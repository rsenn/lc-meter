
# 1 "../../../lib/format.c"

# 13 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\stdint.h"
typedef signed char int8_t;

# 20
typedef signed int int16_t;

# 28
typedef signed short long int int24_t;

# 36
typedef signed long int int32_t;

# 43
typedef unsigned char uint8_t;

# 49
typedef unsigned int uint16_t;

# 56
typedef unsigned short long int uint24_t;

# 63
typedef unsigned long int uint32_t;

# 71
typedef signed char int_least8_t;

# 78
typedef signed int int_least16_t;

# 90
typedef signed short long int int_least24_t;

# 98
typedef signed long int int_least32_t;

# 105
typedef unsigned char uint_least8_t;

# 111
typedef unsigned int uint_least16_t;

# 121
typedef unsigned short long int uint_least24_t;

# 128
typedef unsigned long int uint_least32_t;

# 137
typedef signed char int_fast8_t;

# 144
typedef signed int int_fast16_t;

# 156
typedef signed short long int int_fast24_t;

# 164
typedef signed long int int_fast32_t;

# 171
typedef unsigned char uint_fast8_t;

# 177
typedef unsigned int uint_fast16_t;

# 187
typedef unsigned short long int uint_fast24_t;

# 194
typedef unsigned long int uint_fast32_t;

# 200
typedef int32_t intmax_t;




typedef uint32_t uintmax_t;




typedef int16_t intptr_t;




typedef uint16_t uintptr_t;

# 56 "../../../lib/typedef.h"
typedef char BOOL;

# 6 "../../../lib/format.h"
void format_number(uint16_t n, uint8_t base, int8_t pad);
void format_xint32(uint32_t x);
void format_double(double num);

# 12 "../../../lib/buffer.h"
typedef uint8_t len_t;

typedef struct {
char x[16];
unsigned p : 4;
unsigned n : 4;
} buffer_t;

# 26
extern buffer_t buffer;

void buffer_init(void);
char buffer_flush(void);
char buffer_putch(char ch);
char buffer_put(const char* x, len_t len);
char buffer_puts(const char* x);

# 30 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\math.h"
extern double fabs(double);
extern double floor(double);
extern double ceil(double);
extern double modf(double, double *);
extern double sqrt(double);
extern double atof(const char *);
extern double sin(double) ;
extern double cos(double) ;
extern double tan(double) ;
extern double asin(double) ;
extern double acos(double) ;
extern double atan(double);
extern double atan2(double, double) ;
extern double log(double);
extern double log10(double);
extern double pow(double, double) ;
extern double exp(double) ;
extern double sinh(double) ;
extern double cosh(double) ;
extern double tanh(double);
extern double eval_poly(double, const double *, int);
extern double frexp(double, int *);
extern double ldexp(double, int);
extern double fmod(double, double);
extern double trunc(double);
extern double round(double);

# 6 "../../../lib/format.c"
static void
format_putchar(char c) {
return;
}




void
format_number(uint16_t n, uint8_t base, int8_t pad ) {
char buf[8 * sizeof(long)];
uint8_t di;
int8_t i = 0;
char padchar = ' ';

if(pad < 0) {
pad = -pad;
padchar = '0';
}

# 31
do {

# 35
di = n % base;
buf[i++] = (di < 10 ? (uint8_t)'0' + di : (uint8_t)'A' + di - 10);

n /= base;
} while(n > 0);

while(pad-- > i) buffer_putch(padchar);

for(; i > 0; i--) {
buffer_putch((char)buf[(int16_t)i - 1]);

}
}


void
format_xint32( uint32_t x) {
buffer_putch('0');
buffer_putch('x');
format_number((uint16_t)(x >> 16), 16, -4);
format_number((uint16_t)(x & 0xffff), 16, -4);
}

void
format_float( float num) {
short m = (int)log10(num);
char digit;


while(num > 0 + 3.05176e-05) {
float weight = pow(10.0l, m);
digit = (char)floor(num / weight);
num -= (digit * weight);
buffer_putch('0' + digit);
if(m == 0)
buffer_putch('.');
m--;
}
}


void
format_double(double num) {
short m = (short)log10(num);
short digit;


while(num > 0 + (sizeof(double) == sizeof(float) ? 3.05176e-05 : 1.19209290e-07)) {
double weight = pow(10.0l, m);
digit = (short)floor(num / weight);
num -= (digit * weight);
buffer_putch((char)('0' + digit));
if(m == 0)
buffer_putch('.');
m--;
}
}
