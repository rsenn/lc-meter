

Microchip Technology PIC18 PRO Macro Assembler V1.34 build -361300703 
                                                                                               Sat Dec 28 06:39:49 2019

Microchip Technology Omniscient Code Generator (PRO mode) build 201502162209
     1                           	processor	18F2450
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    72                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    73  0000                     
    74                           	psect	idataBANK0
    75  00290C                     __pidataBANK0:
    76                           	opt stack 0
    77                           
    78                           ;initializer for lcd_gotoxy@F3583
    79  00290C  00                 	db	0
    80  00290D  40                 	db	64
    81  00290E  14                 	db	20
    82  00290F  54                 	db	84
    83                           
    84                           ;initializer for _mode
    85  002910  FF                 	db	255
    86                           
    87                           	psect	smallconst
    88  000500                     __psmallconst:
    89                           	opt stack 0
    90  000500  00                 	db	0
    91  000501                     exp@coeff:
    92                           	opt stack 0
    93  000501  0000               	dw	0
    94  000503  3F80               	dw	16256
    95  000505  7218               	dw	29208
    96  000507  3F31               	dw	16177
    97  000509  FDF0               	dw	65008
    98  00050B  3E75               	dw	15989
    99  00050D  5847               	dw	22599
   100  00050F  3D63               	dw	15715
   101  000511  9558               	dw	38232
   102  000513  3C1D               	dw	15389
   103  000515  C482               	dw	50306
   104  000517  3AAE               	dw	15022
   105  000519  78A8               	dw	30888
   106  00051B  3921               	dw	14625
   107  00051D  93EF               	dw	37871
   108  00051F  3780               	dw	14208
   109  000521  92A0               	dw	37536
   110  000523  35A7               	dw	13735
   111  000525  5646               	dw	22086
   112  000527  3415               	dw	13333
   113  000529                     __end_ofexp@coeff:
   114                           	opt stack 0
   115  000529                     log@coeff:
   116                           	opt stack 0
   117  000529  0000               	dw	0
   118  00052B  0000               	dw	0
   119  00052D  FFC4               	dw	65476
   120  00052F  3F7F               	dw	16255
   121  000531  EF80               	dw	61312
   122  000533  BEFF               	dw	48895
   123  000535  E190               	dw	57744
   124  000537  3EA9               	dw	16041
   125  000539  82EC               	dw	33516
   126  00053B  BE76               	dw	48758
   127  00053D  AD82               	dw	44418
   128  00053F  3E2B               	dw	15915
   129  000541  3C0E               	dw	15374
   130  000543  BDC3               	dw	48579
   131  000545  D187               	dw	53639
   132  000547  3D13               	dw	15635
   133  000549  7841               	dw	30785
   134  00054B  BBD3               	dw	48083
   135  00054D                     __end_oflog@coeff:
   136                           	opt stack 0
   137  00054D                     STR_15:
   138  00054D  2D                 	db	45
   139  00054E  20                 	db	32
   140  00054F  43                 	db	67	;'C'
   141  000550  20                 	db	32
   142  000551  28                 	db	40
   143  000552  55                 	db	85	;'U'
   144  000553  6E                 	db	110	;'n'
   145  000554  69                 	db	105	;'i'
   146  000555  74                 	db	116	;'t'
   147  000556  3A                 	db	58	;':'
   148  000557  20                 	db	32
   149  000558  46                 	db	70	;'F'
   150  000559  29                 	db	41
   151  00055A  20                 	db	32
   152  00055B  2D                 	db	45
   153  00055C  00                 	db	0
   154  00055D                     STR_16:
   155  00055D  2D                 	db	45
   156  00055E  20                 	db	32
   157  00055F  4C                 	db	76	;'L'
   158  000560  20                 	db	32
   159  000561  28                 	db	40
   160  000562  55                 	db	85	;'U'
   161  000563  6E                 	db	110	;'n'
   162  000564  69                 	db	105	;'i'
   163  000565  74                 	db	116	;'t'
   164  000566  3A                 	db	58	;':'
   165  000567  20                 	db	32
   166  000568  48                 	db	72	;'H'
   167  000569  29                 	db	41
   168  00056A  20                 	db	32
   169  00056B  2D                 	db	45
   170  00056C  00                 	db	0
   171  00056D                     STR_25:
   172  00056D  70                 	db	112	;'p'
   173  00056E  6C                 	db	108	;'l'
   174  00056F  65                 	db	101	;'e'
   175  000570  61                 	db	97	;'a'
   176  000571  73                 	db	115	;'s'
   177  000572  65                 	db	101	;'e'
   178  000573  20                 	db	32
   179  000574  77                 	db	119	;'w'
   180  000575  61                 	db	97	;'a'
   181  000576  69                 	db	105	;'i'
   182  000577  74                 	db	116	;'t'
   183  000578  2E                 	db	46
   184  000579  2E                 	db	46
   185  00057A  2E                 	db	46
   186  00057B  00                 	db	0
   187  00057C                     STR_37:
   188  00057C  49                 	db	73	;'I'
   189  00057D  6E                 	db	110	;'n'
   190  00057E  64                 	db	100	;'d'
   191  00057F  75                 	db	117	;'u'
   192  000580  63                 	db	99	;'c'
   193  000581  74                 	db	116	;'t'
   194  000582  69                 	db	105	;'i'
   195  000583  76                 	db	118	;'v'
   196  000584  69                 	db	105	;'i'
   197  000585  74                 	db	116	;'t'
   198  000586  79                 	db	121	;'y'
   199  000587  20                 	db	32
   200  000588  00                 	db	0
   201  000589                     STR_23:
   202  000589  43                 	db	67	;'C'
   203  00058A  61                 	db	97	;'a'
   204  00058B  6C                 	db	108	;'l'
   205  00058C  69                 	db	105	;'i'
   206  00058D  62                 	db	98	;'b'
   207  00058E  72                 	db	114	;'r'
   208  00058F  61                 	db	97	;'a'
   209  000590  74                 	db	116	;'t'
   210  000591  69                 	db	105	;'i'
   211  000592  6E                 	db	110	;'n'
   212  000593  67                 	db	103	;'g'
   213  000594  00                 	db	0
   214  000595                     STR_28:
   215  000595  43                 	db	67	;'C'
   216  000596  61                 	db	97	;'a'
   217  000597  70                 	db	112	;'p'
   218  000598  61                 	db	97	;'a'
   219  000599  63                 	db	99	;'c'
   220  00059A  69                 	db	105	;'i'
   221  00059B  74                 	db	116	;'t'
   222  00059C  79                 	db	121	;'y'
   223  00059D  20                 	db	32
   224  00059E  00                 	db	0
   225  00059F                     STR_14:
   226  00059F  4C                 	db	76	;'L'
   227  0005A0  43                 	db	67	;'C'
   228  0005A1  2D                 	db	45
   229  0005A2  6D                 	db	109	;'m'
   230  0005A3  65                 	db	101	;'e'
   231  0005A4  74                 	db	116	;'t'
   232  0005A5  65                 	db	101	;'e'
   233  0005A6  72                 	db	114	;'r'
   234  0005A7  20                 	db	32
   235  0005A8  00                 	db	0
   236  0005A9                     STR_33:
   237  0005A9  0D                 	db	13
   238  0005AA  0A                 	db	10
   239  0005AB  43                 	db	67	;'C'
   240  0005AC  43                 	db	67	;'C'
   241  0005AD  61                 	db	97	;'a'
   242  0005AE  6C                 	db	108	;'l'
   243  0005AF  3D                 	db	61	;'='
   244  0005B0  00                 	db	0
   245  0005B1                     STR_18:
   246  0005B1  20                 	db	32
   247  0005B2  20                 	db	32
   248  0005B3  20                 	db	32
   249  0005B4  20                 	db	32
   250  0005B5  20                 	db	32
   251  0005B6  20                 	db	32
   252  0005B7  00                 	db	0
   253  0005B8                     STR_30:
   254  0005B8  0D                 	db	13
   255  0005B9  0A                 	db	10
   256  0005BA  46                 	db	70	;'F'
   257  0005BB  31                 	db	49	;'1'
   258  0005BC  3D                 	db	61	;'='
   259  0005BD  00                 	db	0
   260  0005BE                     STR_31:
   261  0005BE  0D                 	db	13
   262  0005BF  0A                 	db	10
   263  0005C0  46                 	db	70	;'F'
   264  0005C1  32                 	db	50	;'2'
   265  0005C2  3D                 	db	61	;'='
   266  0005C3  00                 	db	0
   267  0005C4                     STR_32:
   268  0005C4  0D                 	db	13
   269  0005C5  0A                 	db	10
   270  0005C6  46                 	db	70	;'F'
   271  0005C7  33                 	db	51	;'3'
   272  0005C8  3D                 	db	61	;'='
   273  0005C9  00                 	db	0
   274  0005CA                     STR_27:
   275  0005CA  46                 	db	70	;'F'
   276  0005CB  72                 	db	114	;'r'
   277  0005CC  65                 	db	101	;'e'
   278  0005CD  71                 	db	113	;'q'
   279  0005CE  3D                 	db	61	;'='
   280  0005CF  00                 	db	0
   281  0005D0                     STR_35:
   282  0005D0  43                 	db	67	;'C'
   283  0005D1  69                 	db	105	;'i'
   284  0005D2  6E                 	db	110	;'n'
   285  0005D3  3D                 	db	61	;'='
   286  0005D4  00                 	db	0
   287  0005D5                     STR_29:
   288  0005D5  76                 	db	118	;'v'
   289  0005D6  61                 	db	97	;'a'
   290  0005D7  72                 	db	114	;'r'
   291  0005D8  3D                 	db	61	;'='
   292  0005D9  00                 	db	0
   293  0005DA  52                 	db	82	;'R'
   294  0005DB  43                 	db	67	;'C'
   295  0005DC  34                 	db	52	;'4'
   296  0005DD  3D                 	db	61	;'='
   297  0005DE  00                 	db	0
   298  0005DF                     STR_11:
   299  0005DF  2D                 	db	45
   300  0005E0  2A                 	db	42
   301  0005E1  2D                 	db	45
   302  0005E2  00                 	db	0
   303  0005E3                     STR_9:
   304  0005E3  0D                 	db	13
   305  0005E4  0A                 	db	10
   306  0005E5  00                 	db	0
   307  0005E6  6D                 	db	109	;'m'
   308  0005E7  46                 	db	70	;'F'
   309  0005E8  00                 	db	0
   310  0005E9  6E                 	db	110	;'n'
   311  0005EA  46                 	db	70	;'F'
   312  0005EB  00                 	db	0
   313  0005EC  70                 	db	112	;'p'
   314  0005ED  46                 	db	70	;'F'
   315  0005EE  00                 	db	0
   316  0005EF  75                 	db	117	;'u'
   317  0005F0  46                 	db	70	;'F'
   318  0005F1  00                 	db	0
   319  0005F2                     STR_2:
   320  0005F2  6D                 	db	109	;'m'
   321  0005F3  48                 	db	72	;'H'
   322  0005F4  00                 	db	0
   323  0005F5  6E                 	db	110	;'n'
   324  0005F6  48                 	db	72	;'H'
   325  0005F7  00                 	db	0
   326  0005F8  75                 	db	117	;'u'
   327  0005F9  48                 	db	72	;'H'
   328  0005FA  00                 	db	0
   329  0000                     
   330                           ; #config settings
   331  0005FB  00                 	db	0	; dummy byte at the end
   332  0000                     
   333                           	psect	nvBANK0
   334  0000E3                     __pnvBANK0:
   335                           	opt stack 0
   336  0000E3                     _CCal:
   337                           	opt stack 0
   338  0000E3                     	ds	4
   339  0000E7                     _bres:
   340                           	opt stack 0
   341  0000E7                     	ds	2
   342  0000E9                     _msecpart:
   343                           	opt stack 0
   344  0000E9                     	ds	2
   345  0000                     _TMR0	set	4054
   346  0000                     _INTCON	set	4082
   347  0000                     _INTCON2	set	4081
   348  0000                     _LATB	set	3978
   349  0000                     _LATC	set	3979
   350  0000                     _PIE1	set	3997
   351  0000                     _PIR1	set	3998
   352  0000                     _PORTC	set	3970
   353  0000                     _RCREG	set	4014
   354  0000                     _SPBRG	set	4015
   355  0000                     _T0CON	set	4053
   356  0000                     _T2CON	set	4042
   357  0000                     _TMR2	set	4044
   358  0000                     _TRISA	set	3986
   359  0000                     _TRISB	set	3987
   360  0000                     _TRISC	set	3988
   361  0000                     _TXREG	set	4013
   362  0000                     _BRGH	set	32098
   363  0000                     _CREN	set	32092
   364  0000                     _GIE	set	32663
   365  0000                     _PEIE	set	32662
   366  0000                     _RCIF	set	31989
   367  0000                     _RX9	set	32094
   368  0000                     _SPEN	set	32095
   369  0000                     _SYNC	set	32100
   370  0000                     _TX9	set	32102
   371  0000                     _TXEN	set	32101
   372  0000                     _TXIE	set	31980
   373  0000                     _TXIF	set	31988
   374                           
   375                           	psect	cinit
   376  0023B6                     __pcinit:
   377                           	opt stack 0
   378  0023B6                     start_initialization:
   379                           	opt stack 0
   380  0023B6                     __initialization:
   381                           	opt stack 0
   382                           
   383                           ; Clear objects allocated to BANK1 (33 bytes)
   384  0023B6  EE01  F000         	lfsr	0,__pbssBANK1
   385  0023BA  0E21               	movlw	33
   386  0023BC                     clear_0:
   387  0023BC  6AEE               	clrf	postinc0,c
   388  0023BE  06E8               	decf	wreg,f,c
   389  0023C0  E1FD               	bnz	clear_0
   390                           
   391                           ; Clear objects allocated to BANK0 (48 bytes)
   392  0023C2  EE00  F0B3         	lfsr	0,__pbssBANK0
   393  0023C6  0E30               	movlw	48
   394  0023C8                     clear_1:
   395  0023C8  6AEE               	clrf	postinc0,c
   396  0023CA  06E8               	decf	wreg,f,c
   397  0023CC  E1FD               	bnz	clear_1
   398                           
   399                           ; Clear objects allocated to COMRAM (3 bytes)
   400  0023CE  6A5C               	clrf	(__pbssCOMRAM+2)& (0+255),c
   401  0023D0  6A5B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   402  0023D2  6A5A               	clrf	__pbssCOMRAM& (0+255),c
   403                           
   404                           ; Initialize objects allocated to BANK0 (5 bytes)
   405                           ; load TBLPTR registers with __pidataBANK0
   406  0023D4  0E0C               	movlw	low __pidataBANK0
   407  0023D6  6EF6               	movwf	tblptrl,c
   408  0023D8  0E29               	movlw	high __pidataBANK0
   409  0023DA  6EF7               	movwf	tblptrh,c
   410  0023DC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   411  0023DE  6EF8               	movwf	tblptru,c
   412  0023E0  EE00  F0EB         	lfsr	0,__pdataBANK0
   413  0023E4  EE10 F005          	lfsr	1,5
   414  0023E8                     copy_data0:
   415  0023E8  0009               	tblrd		*+
   416  0023EA  CFF5 FFEE          	movff	tablat,postinc0
   417  0023EE  50E5               	movf	postdec1,w,c
   418  0023F0  50E1               	movf	fsr1l,w,c
   419  0023F2  E1FA               	bnz	copy_data0
   420  0023F4                     end_of_initialization:
   421                           	opt stack 0
   422  0023F4                     __end_of__initialization:
   423                           	opt stack 0
   424  0023F4  0E00               	movlw	low (__Lsmallconst shr (0+16))
   425  0023F6  6EF8               	movwf	tblptru,c
   426  0023F8  0E05               	movlw	high __Lsmallconst
   427  0023FA  6EF7               	movwf	tblptrh,c
   428  0023FC  0100               	movlb	0
   429  0023FE  EF6C  F00C         	goto	_main	;jump to C main() function
   430                           tblptru	equ	0xFF8
   431                           tblptrh	equ	0xFF7
   432                           tblptrl	equ	0xFF6
   433                           tablat	equ	0xFF5
   434                           postinc0	equ	0xFEE
   435                           wreg	equ	0xFE8
   436                           postdec1	equ	0xFE5
   437                           fsr1l	equ	0xFE1
   438                           
   439                           	psect	bssCOMRAM
   440  00005A                     __pbssCOMRAM:
   441                           	opt stack 0
   442  00005A                     _LCD_function:
   443                           	opt stack 0
   444  00005A                     	ds	1
   445  00005B                     _txiptr:
   446                           	opt stack 0
   447  00005B                     	ds	1
   448  00005C                     _txoptr:
   449                           	opt stack 0
   450  00005C                     	ds	1
   451                           tblptru	equ	0xFF8
   452                           tblptrh	equ	0xFF7
   453                           tblptrl	equ	0xFF6
   454                           tablat	equ	0xFF5
   455                           postinc0	equ	0xFEE
   456                           wreg	equ	0xFE8
   457                           postdec1	equ	0xFE5
   458                           fsr1l	equ	0xFE1
   459                           
   460                           	psect	bssBANK0
   461  0000B3                     __pbssBANK0:
   462                           	opt stack 0
   463  0000B3                     _txfifo:
   464                           	opt stack 0
   465  0000B3                     	ds	16
   466  0000C3                     _F2:
   467                           	opt stack 0
   468  0000C3                     	ds	4
   469  0000C7                     _F3:
   470                           	opt stack 0
   471  0000C7                     	ds	4
   472  0000CB                     _msecs:
   473                           	opt stack 0
   474  0000CB                     	ds	4
   475  0000CF                     _seconds:
   476                           	opt stack 0
   477  0000CF                     	ds	4
   478  0000D3                     _timer1of:
   479                           	opt stack 0
   480  0000D3                     	ds	4
   481  0000D7                     _blink:
   482                           	opt stack 0
   483  0000D7                     	ds	2
   484  0000D9                     _LCD_ctrl:
   485                           	opt stack 0
   486  0000D9                     	ds	1
   487  0000DA                     _LCD_lines:
   488                           	opt stack 0
   489  0000DA                     	ds	1
   490  0000DB                     _LCD_mode:
   491                           	opt stack 0
   492  0000DB                     	ds	1
   493  0000DC                     _rxiptr:
   494                           	opt stack 0
   495  0000DC                     	ds	1
   496  0000DD                     _rxoptr:
   497                           	opt stack 0
   498  0000DD                     	ds	1
   499  0000DE                     _ser_tmp:
   500                           	opt stack 0
   501  0000DE                     	ds	1
   502  0000DF                     _F1:
   503                           	opt stack 0
   504  0000DF                     	ds	4
   505                           tblptru	equ	0xFF8
   506                           tblptrh	equ	0xFF7
   507                           tblptrl	equ	0xFF6
   508                           tablat	equ	0xFF5
   509                           postinc0	equ	0xFEE
   510                           wreg	equ	0xFE8
   511                           postdec1	equ	0xFE5
   512                           fsr1l	equ	0xFE1
   513                           
   514                           	psect	dataBANK0
   515  0000EB                     __pdataBANK0:
   516                           	opt stack 0
   517  0000EB                     lcd_gotoxy@F3583:
   518                           	opt stack 0
   519  0000EB                     	ds	4
   520  0000EF                     _mode:
   521                           	opt stack 0
   522  0000EF                     	ds	1
   523                           tblptru	equ	0xFF8
   524                           tblptrh	equ	0xFF7
   525                           tblptrl	equ	0xFF6
   526                           tablat	equ	0xFF5
   527                           postinc0	equ	0xFEE
   528                           wreg	equ	0xFE8
   529                           postdec1	equ	0xFE5
   530                           fsr1l	equ	0xFE1
   531                           
   532                           	psect	bssBANK1
   533  000100                     __pbssBANK1:
   534                           	opt stack 0
   535  000100                     _rxfifo:
   536                           	opt stack 0
   537  000100                     	ds	16
   538  000110                     _buffer:
   539                           	opt stack 0
   540  000110                     	ds	17
   541                           tblptru	equ	0xFF8
   542                           tblptrh	equ	0xFF7
   543                           tblptrl	equ	0xFF6
   544                           tablat	equ	0xFF5
   545                           postinc0	equ	0xFEE
   546                           wreg	equ	0xFE8
   547                           postdec1	equ	0xFE5
   548                           fsr1l	equ	0xFE1
   549                           
   550                           	psect	cstackBANK1
   551  000121                     __pcstackBANK1:
   552                           	opt stack 0
   553  000121                     _measure_capacitance$1122:
   554                           	opt stack 0
   555                           
   556                           ; 4 bytes @ 0x0
   557  000121                     	ds	4
   558  000125                     _measure_capacitance$1123:
   559                           	opt stack 0
   560                           
   561                           ; 4 bytes @ 0x4
   562  000125                     	ds	4
   563  000129                     _measure_capacitance$1124:
   564                           	opt stack 0
   565                           
   566                           ; 4 bytes @ 0x8
   567  000129                     	ds	4
   568  00012D                     measure_capacitance@unit:
   569                           	opt stack 0
   570                           
   571                           ; 1 bytes @ 0xC
   572  00012D                     	ds	1
   573  00012E                     measure_capacitance@var:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0xD
   577  00012E                     	ds	2
   578  000130                     measure_capacitance@Cin:
   579                           	opt stack 0
   580                           
   581                           ; 4 bytes @ 0xF
   582  000130                     	ds	4
   583                           tblptru	equ	0xFF8
   584                           tblptrh	equ	0xFF7
   585                           tblptrl	equ	0xFF6
   586                           tablat	equ	0xFF5
   587                           postinc0	equ	0xFEE
   588                           wreg	equ	0xFE8
   589                           postdec1	equ	0xFE5
   590                           fsr1l	equ	0xFE1
   591                           
   592                           	psect	cstackBANK0
   593  000060                     __pcstackBANK0:
   594                           	opt stack 0
   595  000060                     _log10$1132:
   596                           	opt stack 0
   597                           
   598                           ; 4 bytes @ 0x0
   599  000060                     	ds	4
   600  000064                     ?___fltol:
   601                           	opt stack 0
   602  000064                     ___fltol@f1:
   603                           	opt stack 0
   604                           
   605                           ; 4 bytes @ 0x4
   606  000064                     	ds	4
   607  000068                     ??___fltol:
   608                           
   609                           ; 0 bytes @ 0x8
   610  000068                     	ds	4
   611  00006C                     ___fltol@sign1:
   612                           	opt stack 0
   613                           
   614                           ; 1 bytes @ 0xC
   615  00006C                     	ds	1
   616  00006D                     ___fltol@exp1:
   617                           	opt stack 0
   618                           
   619                           ; 1 bytes @ 0xD
   620  00006D                     	ds	1
   621  00006E                     ?___altofl:
   622                           	opt stack 0
   623  00006E                     measure_inductance@numerator:
   624                           	opt stack 0
   625  00006E                     ___altofl@c:
   626                           	opt stack 0
   627                           
   628                           ; 4 bytes @ 0xE
   629  00006E                     	ds	4
   630  000072                     ___altofl@sign:
   631                           	opt stack 0
   632  000072                     measure_inductance@denominator:
   633                           	opt stack 0
   634                           
   635                           ; 4 bytes @ 0x12
   636  000072                     	ds	1
   637  000073                     ?_floor:
   638                           	opt stack 0
   639  000073                     floor@x:
   640                           	opt stack 0
   641                           
   642                           ; 4 bytes @ 0x13
   643  000073                     	ds	3
   644  000076                     _measure_inductance$1125:
   645                           	opt stack 0
   646                           
   647                           ; 4 bytes @ 0x16
   648  000076                     	ds	1
   649  000077                     floor@i:
   650                           	opt stack 0
   651                           
   652                           ; 4 bytes @ 0x17
   653  000077                     	ds	3
   654  00007A                     _measure_inductance$1129:
   655                           	opt stack 0
   656                           
   657                           ; 4 bytes @ 0x1A
   658  00007A                     	ds	1
   659  00007B                     floor@expon:
   660                           	opt stack 0
   661                           
   662                           ; 2 bytes @ 0x1B
   663  00007B                     	ds	2
   664  00007D                     ?_exp:
   665                           	opt stack 0
   666  00007D                     exp@x:
   667                           	opt stack 0
   668                           
   669                           ; 4 bytes @ 0x1D
   670  00007D                     	ds	1
   671  00007E                     _measure_inductance$1130:
   672                           	opt stack 0
   673                           
   674                           ; 4 bytes @ 0x1E
   675  00007E                     	ds	3
   676  000081                     _exp$1135:
   677                           	opt stack 0
   678                           
   679                           ; 4 bytes @ 0x21
   680  000081                     	ds	1
   681  000082                     _measure_inductance$1131:
   682                           	opt stack 0
   683                           
   684                           ; 4 bytes @ 0x22
   685  000082                     	ds	3
   686  000085                     exp@exponent:
   687                           	opt stack 0
   688                           
   689                           ; 2 bytes @ 0x25
   690  000085                     	ds	1
   691  000086                     measure_inductance@unit:
   692                           	opt stack 0
   693                           
   694                           ; 1 bytes @ 0x26
   695  000086                     	ds	1
   696  000087                     exp@sign:
   697                           	opt stack 0
   698  000087                     _measure_inductance$1126:
   699                           	opt stack 0
   700                           
   701                           ; 4 bytes @ 0x27
   702  000087                     	ds	1
   703  000088                     ?_pow:
   704                           	opt stack 0
   705  000088                     pow@x:
   706                           	opt stack 0
   707                           
   708                           ; 4 bytes @ 0x28
   709  000088                     	ds	3
   710  00008B                     _measure_inductance$1127:
   711                           	opt stack 0
   712                           
   713                           ; 4 bytes @ 0x2B
   714  00008B                     	ds	1
   715  00008C                     pow@y:
   716                           	opt stack 0
   717                           
   718                           ; 4 bytes @ 0x2C
   719  00008C                     	ds	3
   720  00008F                     _measure_inductance$1128:
   721                           	opt stack 0
   722                           
   723                           ; 4 bytes @ 0x2F
   724  00008F                     	ds	1
   725  000090                     _pow$1133:
   726                           	opt stack 0
   727                           
   728                           ; 4 bytes @ 0x30
   729  000090                     	ds	3
   730  000093                     measure_inductance@var:
   731                           	opt stack 0
   732                           
   733                           ; 2 bytes @ 0x33
   734  000093                     	ds	1
   735  000094                     _pow$1134:
   736                           	opt stack 0
   737                           
   738                           ; 4 bytes @ 0x34
   739  000094                     	ds	1
   740  000095                     measure_inductance@Lin:
   741                           	opt stack 0
   742                           
   743                           ; 4 bytes @ 0x35
   744  000095                     	ds	3
   745  000098                     pow@sign:
   746                           	opt stack 0
   747                           
   748                           ; 1 bytes @ 0x38
   749  000098                     	ds	1
   750  000099                     pow@yi:
   751                           	opt stack 0
   752                           
   753                           ; 4 bytes @ 0x39
   754  000099                     	ds	4
   755  00009D                     format_double@num:
   756                           	opt stack 0
   757                           
   758                           ; 4 bytes @ 0x3D
   759  00009D                     	ds	4
   760  0000A1                     _format_double$1120:
   761                           	opt stack 0
   762                           
   763                           ; 4 bytes @ 0x41
   764  0000A1                     	ds	4
   765  0000A5                     _format_double$1121:
   766                           	opt stack 0
   767                           
   768                           ; 4 bytes @ 0x45
   769  0000A5                     	ds	4
   770  0000A9                     format_double@weight:
   771                           	opt stack 0
   772                           
   773                           ; 4 bytes @ 0x49
   774  0000A9                     	ds	4
   775  0000AD                     format_double@digit:
   776                           	opt stack 0
   777                           
   778                           ; 2 bytes @ 0x4D
   779  0000AD                     	ds	2
   780  0000AF                     format_double@m:
   781                           	opt stack 0
   782                           
   783                           ; 2 bytes @ 0x4F
   784  0000AF                     	ds	2
   785  0000B1                     _main$354:
   786                           	opt stack 0
   787                           
   788                           ; 1 bytes @ 0x51
   789  0000B1                     	ds	1
   790  0000B2                     main@new_mode:
   791                           	opt stack 0
   792                           
   793                           ; 1 bytes @ 0x52
   794  0000B2                     	ds	1
   795                           tblptru	equ	0xFF8
   796                           tblptrh	equ	0xFF7
   797                           tblptrl	equ	0xFF6
   798                           tablat	equ	0xFF5
   799                           postinc0	equ	0xFEE
   800                           wreg	equ	0xFE8
   801                           postdec1	equ	0xFE5
   802                           fsr1l	equ	0xFE1
   803                           
   804                           	psect	cstackCOMRAM
   805  000001                     __pcstackCOMRAM:
   806                           	opt stack 0
   807  000001                     ??_global_int:
   808  000001                     
   809                           ; 1 bytes @ 0x0
   810  000001                     	ds	3
   811  000004                     ??_buffer_putch:
   812  000004                     ??_timer2_init:
   813  000004                     ?_timer0_read_ps:
   814                           	opt stack 0
   815  000004                     ?___lwdiv:
   816                           	opt stack 0
   817  000004                     ?___lwmod:
   818                           	opt stack 0
   819  000004                     ?___flpack:
   820                           	opt stack 0
   821  000004                     ?_frexp:
   822                           	opt stack 0
   823  000004                     ?___flneg:
   824                           	opt stack 0
   825  000004                     ser_putch@c:
   826                           	opt stack 0
   827  000004                     lcd_write4bits@value:
   828                           	opt stack 0
   829  000004                     lcd_init@fourbitmode:
   830                           	opt stack 0
   831  000004                     _timer0_init$154:
   832                           	opt stack 0
   833  000004                     ___lwdiv@dividend:
   834                           	opt stack 0
   835  000004                     ___lwmod@dividend:
   836                           	opt stack 0
   837  000004                     ___flpack@arg:
   838                           	opt stack 0
   839  000004                     ___flge@ff1:
   840                           	opt stack 0
   841  000004                     ___flneg@f1:
   842                           	opt stack 0
   843  000004                     frexp@value:
   844                           	opt stack 0
   845                           
   846                           ; 4 bytes @ 0x3
   847  000004                     	ds	1
   848  000005                     ser_puts@s:
   849                           	opt stack 0
   850  000005                     timer2_init@ps:
   851                           	opt stack 0
   852  000005                     lcd_send@mode:
   853                           	opt stack 0
   854  000005                     _lcd_init$263:
   855                           	opt stack 0
   856                           
   857                           ; 2 bytes @ 0x4
   858  000005                     	ds	1
   859  000006                     ??_print_buffer:
   860  000006                     ??_timer0_read_ps:
   861  000006                     lcd_send@value:
   862                           	opt stack 0
   863  000006                     buffer_putch@ch:
   864                           	opt stack 0
   865  000006                     _timer0_init$155:
   866                           	opt stack 0
   867  000006                     ___lwdiv@divisor:
   868                           	opt stack 0
   869  000006                     ___lwmod@divisor:
   870                           	opt stack 0
   871                           
   872                           ; 2 bytes @ 0x5
   873  000006                     	ds	1
   874  000007                     ??_lcd_puts:
   875  000007                     output_putch@c:
   876                           	opt stack 0
   877  000007                     print_buffer@i:
   878                           	opt stack 0
   879  000007                     timer2_init@ps_mode:
   880                           	opt stack 0
   881  000007                     lcd_command@value:
   882                           	opt stack 0
   883  000007                     buffer_puts@x:
   884                           	opt stack 0
   885                           
   886                           ; 1 bytes @ 0x6
   887  000007                     	ds	1
   888  000008                     ??_put_str:
   889  000008                     ??_lcd_clear:
   890  000008                     timer0_read_ps@prev:
   891                           	opt stack 0
   892  000008                     lcd_gotoxy@row:
   893                           	opt stack 0
   894  000008                     lcd_puts@i:
   895                           	opt stack 0
   896  000008                     lcd_begin@dotsize:
   897                           	opt stack 0
   898  000008                     ___flpack@exp:
   899                           	opt stack 0
   900  000008                     frexp@eptr:
   901                           	opt stack 0
   902  000008                     ___lwdiv@counter:
   903                           	opt stack 0
   904  000008                     ___lwmod@counter:
   905                           	opt stack 0
   906  000008                     _timer0_init$156:
   907                           	opt stack 0
   908  000008                     ___flge@ff2:
   909                           	opt stack 0
   910                           
   911                           ; 4 bytes @ 0x7
   912  000008                     	ds	1
   913  000009                     ??_frexp:
   914  000009                     ??_lcd_begin:
   915  000009                     lcd_gotoxy@col:
   916                           	opt stack 0
   917  000009                     lcd_puts@string:
   918                           	opt stack 0
   919  000009                     ___flpack@sign:
   920                           	opt stack 0
   921  000009                     put_str@i:
   922                           	opt stack 0
   923  000009                     timer0_read_ps@count:
   924                           	opt stack 0
   925  000009                     ___lwdiv@quotient:
   926                           	opt stack 0
   927                           
   928                           ; 2 bytes @ 0x8
   929  000009                     	ds	1
   930  00000A                     ??___flpack:
   931  00000A                     lcd_begin@lines:
   932                           	opt stack 0
   933  00000A                     _timer0_init$157:
   934                           	opt stack 0
   935  00000A                     lcd_gotoxy@row_offsets:
   936                           	opt stack 0
   937                           
   938                           ; 4 bytes @ 0x9
   939  00000A                     	ds	1
   940  00000B                     put_str@s:
   941                           	opt stack 0
   942  00000B                     format_number@n:
   943                           	opt stack 0
   944                           
   945                           ; 2 bytes @ 0xA
   946  00000B                     	ds	1
   947  00000C                     _timer0_init$158:
   948                           	opt stack 0
   949                           
   950                           ; 2 bytes @ 0xB
   951  00000C                     	ds	1
   952  00000D                     format_number@base:
   953                           	opt stack 0
   954                           
   955                           ; 1 bytes @ 0xC
   956  00000D                     	ds	1
   957  00000E                     ??_print_unit:
   958  00000E                     ?___fldiv:
   959                           	opt stack 0
   960  00000E                     ?___awtofl:
   961                           	opt stack 0
   962  00000E                     ?___lltofl:
   963                           	opt stack 0
   964  00000E                     print_indicator@indicate:
   965                           	opt stack 0
   966  00000E                     timer0_init@prescaler:
   967                           	opt stack 0
   968  00000E                     format_number@pad:
   969                           	opt stack 0
   970  00000E                     ___awtofl@c:
   971                           	opt stack 0
   972  00000E                     ___fldiv@f1:
   973                           	opt stack 0
   974  00000E                     ___lltofl@c:
   975                           	opt stack 0
   976                           
   977                           ; 4 bytes @ 0xD
   978  00000E                     	ds	1
   979  00000F                     ??_format_number:
   980  00000F                     timer0_init@ps_mode:
   981                           	opt stack 0
   982                           
   983                           ; 1 bytes @ 0xE
   984  00000F                     	ds	2
   985  000011                     format_number@buf:
   986                           	opt stack 0
   987                           
   988                           ; 32 bytes @ 0x10
   989  000011                     	ds	1
   990  000012                     ___awtofl@sign:
   991                           	opt stack 0
   992  000012                     ___fldiv@f2:
   993                           	opt stack 0
   994                           
   995                           ; 4 bytes @ 0x11
   996  000012                     	ds	4
   997  000016                     ___fldiv@f3:
   998                           	opt stack 0
   999                           
  1000                           ; 4 bytes @ 0x15
  1001  000016                     	ds	4
  1002  00001A                     ___fldiv@cntr:
  1003                           	opt stack 0
  1004                           
  1005                           ; 1 bytes @ 0x19
  1006  00001A                     	ds	1
  1007  00001B                     ___fldiv@exp:
  1008                           	opt stack 0
  1009                           
  1010                           ; 1 bytes @ 0x1A
  1011  00001B                     	ds	1
  1012  00001C                     ___fldiv@sign:
  1013                           	opt stack 0
  1014                           
  1015                           ; 1 bytes @ 0x1B
  1016  00001C                     	ds	1
  1017  00001D                     ?___flmul:
  1018                           	opt stack 0
  1019  00001D                     ___flmul@f1:
  1020                           	opt stack 0
  1021                           
  1022                           ; 4 bytes @ 0x1C
  1023  00001D                     	ds	4
  1024  000021                     ___flmul@f2:
  1025                           	opt stack 0
  1026                           
  1027                           ; 4 bytes @ 0x20
  1028  000021                     	ds	4
  1029  000025                     ??___flmul:
  1030                           
  1031                           ; 0 bytes @ 0x24
  1032  000025                     	ds	12
  1033  000031                     _format_number$199:
  1034                           	opt stack 0
  1035                           
  1036                           ; 2 bytes @ 0x30
  1037  000031                     	ds	1
  1038  000032                     ___flmul@exp:
  1039                           	opt stack 0
  1040                           
  1041                           ; 1 bytes @ 0x31
  1042  000032                     	ds	1
  1043  000033                     format_number@padchar:
  1044                           	opt stack 0
  1045  000033                     ___flmul@sign:
  1046                           	opt stack 0
  1047                           
  1048                           ; 1 bytes @ 0x32
  1049  000033                     	ds	1
  1050  000034                     format_number@di:
  1051                           	opt stack 0
  1052  000034                     ___flmul@f3_as_product:
  1053                           	opt stack 0
  1054                           
  1055                           ; 4 bytes @ 0x33
  1056  000034                     	ds	1
  1057  000035                     format_number@i:
  1058                           	opt stack 0
  1059                           
  1060                           ; 1 bytes @ 0x34
  1061  000035                     	ds	1
  1062  000036                     ?_measure_freq:
  1063                           	opt stack 0
  1064  000036                     print_reading@measurement:
  1065                           	opt stack 0
  1066  000036                     format_xint32@x:
  1067                           	opt stack 0
  1068                           
  1069                           ; 4 bytes @ 0x35
  1070  000036                     	ds	2
  1071  000038                     ??_measure_freq:
  1072  000038                     ?___fladd:
  1073                           	opt stack 0
  1074  000038                     _print_reading$1116:
  1075                           	opt stack 0
  1076  000038                     ___fladd@f1:
  1077                           	opt stack 0
  1078                           
  1079                           ; 4 bytes @ 0x37
  1080  000038                     	ds	1
  1081  000039                     measure_freq@count:
  1082                           	opt stack 0
  1083                           
  1084                           ; 2 bytes @ 0x38
  1085  000039                     	ds	1
  1086  00003A                     _print_reading$1117:
  1087                           	opt stack 0
  1088                           
  1089                           ; 2 bytes @ 0x39
  1090  00003A                     	ds	1
  1091  00003B                     ?___lwtofl:
  1092                           	opt stack 0
  1093  00003B                     ___lwtofl@c:
  1094                           	opt stack 0
  1095                           
  1096                           ; 2 bytes @ 0x3A
  1097  00003B                     	ds	1
  1098  00003C                     ___fladd@f2:
  1099                           	opt stack 0
  1100                           
  1101                           ; 4 bytes @ 0x3B
  1102  00003C                     	ds	3
  1103  00003F                     calibrate@i:
  1104                           	opt stack 0
  1105                           
  1106                           ; 1 bytes @ 0x3E
  1107  00003F                     	ds	1
  1108  000040                     ??___fladd:
  1109                           
  1110                           ; 0 bytes @ 0x3F
  1111  000040                     	ds	1
  1112  000041                     ___fladd@sign:
  1113                           	opt stack 0
  1114                           
  1115                           ; 1 bytes @ 0x40
  1116  000041                     	ds	1
  1117  000042                     ___fladd@exp2:
  1118                           	opt stack 0
  1119                           
  1120                           ; 1 bytes @ 0x41
  1121  000042                     	ds	1
  1122  000043                     ___fladd@exp1:
  1123                           	opt stack 0
  1124                           
  1125                           ; 1 bytes @ 0x42
  1126  000043                     	ds	1
  1127  000044                     ?___flsub:
  1128                           	opt stack 0
  1129  000044                     ?_eval_poly:
  1130                           	opt stack 0
  1131  000044                     ___flsub@f1:
  1132                           	opt stack 0
  1133  000044                     eval_poly@x:
  1134                           	opt stack 0
  1135                           
  1136                           ; 4 bytes @ 0x43
  1137  000044                     	ds	4
  1138  000048                     eval_poly@d:
  1139                           	opt stack 0
  1140  000048                     ___flsub@f2:
  1141                           	opt stack 0
  1142                           
  1143                           ; 4 bytes @ 0x47
  1144  000048                     	ds	1
  1145  000049                     eval_poly@n:
  1146                           	opt stack 0
  1147                           
  1148                           ; 2 bytes @ 0x48
  1149  000049                     	ds	2
  1150  00004B                     ??_eval_poly:
  1151                           
  1152                           ; 0 bytes @ 0x4A
  1153  00004B                     	ds	1
  1154  00004C                     eval_poly@res:
  1155                           	opt stack 0
  1156                           
  1157                           ; 4 bytes @ 0x4B
  1158  00004C                     	ds	4
  1159  000050                     ?_ldexp:
  1160                           	opt stack 0
  1161  000050                     ?_log:
  1162                           	opt stack 0
  1163  000050                     ldexp@value:
  1164                           	opt stack 0
  1165  000050                     log@x:
  1166                           	opt stack 0
  1167                           
  1168                           ; 4 bytes @ 0x4F
  1169  000050                     	ds	4
  1170  000054                     ldexp@newexp:
  1171                           	opt stack 0
  1172  000054                     log@exponent:
  1173                           	opt stack 0
  1174                           
  1175                           ; 2 bytes @ 0x53
  1176  000054                     	ds	2
  1177  000056                     ??_ldexp:
  1178  000056                     ?_log10:
  1179                           	opt stack 0
  1180  000056                     log10@x:
  1181                           	opt stack 0
  1182                           
  1183                           ; 4 bytes @ 0x55
  1184  000056                     	ds	4
  1185  00005A                     tblptru	equ	0xFF8
  1186                           tblptrh	equ	0xFF7
  1187                           tblptrl	equ	0xFF6
  1188                           tablat	equ	0xFF5
  1189                           postinc0	equ	0xFEE
  1190                           wreg	equ	0xFE8
  1191                           postdec1	equ	0xFE5
  1192                           fsr1l	equ	0xFE1
  1193                           
  1194                           ; 0 bytes @ 0x59
  1195 ;;
  1196 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1197 ;;
  1198 ;; *************** function _main *****************
  1199 ;; Defined at:
  1200 ;;		line 113 in file "../../../LC-meter.c"
  1201 ;; Parameters:    Size  Location     Type
  1202 ;;		None
  1203 ;; Auto vars:     Size  Location     Type
  1204 ;;  new_mode        1   82[BANK0 ] unsigned char 
  1205 ;; Return value:  Size  Location     Type
  1206 ;;		None               void
  1207 ;; Registers used:
  1208 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1209 ;; Tracked objects:
  1210 ;;		On entry : 0/0
  1211 ;;		On exit  : 0/0
  1212 ;;		Unchanged: 0/0
  1213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  1214 ;;      Params:         0       0       0       0
  1215 ;;      Locals:         0       2       0       0
  1216 ;;      Temps:          0       0       0       0
  1217 ;;      Totals:         0       2       0       0
  1218 ;;Total ram usage:        2 bytes
  1219 ;; Hardware stack levels required when called:    8
  1220 ;; This function calls:
  1221 ;;		_calibrate
  1222 ;;		_delay10ms
  1223 ;;		_format_double
  1224 ;;		_lcd_begin
  1225 ;;		_lcd_clear
  1226 ;;		_lcd_gotoxy
  1227 ;;		_lcd_init
  1228 ;;		_lcd_puts
  1229 ;;		_measure_capacitance
  1230 ;;		_measure_inductance
  1231 ;;		_print_indicator
  1232 ;;		_ser_init
  1233 ;;		_ser_puts
  1234 ;;		_timer0_init
  1235 ;;		_timer2_init
  1236 ;; This function is called by:
  1237 ;;		Startup code after reset
  1238 ;; This function uses a non-reentrant model
  1239 ;;
  1240                           
  1241                           	psect	text0
  1242  0018D8                     __ptext0:
  1243                           	opt stack 0
  1244  0018D8                     _main:
  1245                           	opt stack 23
  1246                           
  1247                           ;LC-meter.c: 114: bres = msecpart = msecs = seconds = 0;
  1248                           
  1249                           ;incstack = 0
  1250  0018D8  0100               	movlb	0	; () banked
  1251  0018DA  6BCF               	clrf	_seconds& (0+255),b	;volatile
  1252  0018DC  6BD0               	clrf	(_seconds+1)& (0+255),b	;volatile
  1253  0018DE  6BD1               	clrf	(_seconds+2)& (0+255),b	;volatile
  1254  0018E0  6BD2               	clrf	(_seconds+3)& (0+255),b	;volatile
  1255  0018E2  C0CF  F0CB         	movff	_seconds,_msecs	;volatile
  1256  0018E6  C0D0  F0CC         	movff	_seconds+1,_msecs+1	;volatile
  1257  0018EA  C0D1  F0CD         	movff	_seconds+2,_msecs+2	;volatile
  1258  0018EE  C0D2  F0CE         	movff	_seconds+3,_msecs+3	;volatile
  1259  0018F2  C0CB  F0E9         	movff	_msecs,_msecpart	;volatile
  1260  0018F6  C0CC  F0EA         	movff	_msecs+1,_msecpart+1	;volatile
  1261  0018FA  C0E9  F0E7         	movff	_msecpart,_bres	;volatile
  1262  0018FE  C0EA  F0E8         	movff	_msecpart+1,_bres+1	;volatile
  1263                           
  1264                           ; BSR set to: 0
  1265                           ;LC-meter.c: 115: mode = -1;
  1266  001902  69EF               	setf	_mode& (0+255),b
  1267                           
  1268                           ;LC-meter.c: 117: CCal = 1000;
  1269  001904  6BE3               	clrf	_CCal& (0+255),b
  1270  001906  6BE4               	clrf	(_CCal+1)& (0+255),b
  1271  001908  0E7A               	movlw	122
  1272  00190A  6FE5               	movwf	(_CCal+2)& (0+255),b
  1273  00190C  0E44               	movlw	68
  1274  00190E  6FE6               	movwf	(_CCal+3)& (0+255),b
  1275                           
  1276                           ;LC-meter.c: 127: TRISA = 0b11001111;
  1277  001910  0ECF               	movlw	207
  1278  001912  6E92               	movwf	3986,c	;volatile
  1279                           
  1280                           ; BSR set to: 0
  1281                           ;LC-meter.c: 130: timer0_init(0b1000 | 0x20 | 0x40);
  1282  001914  0E68               	movlw	104
  1283  001916  ECD1  F010         	call	_timer0_init
  1284                           
  1285                           ; BSR set to: 0
  1286                           ;LC-meter.c: 137: INTCON2 &= ~0b10000000;
  1287  00191A  9EF1               	bcf	intcon2,7,c	;volatile
  1288                           
  1289                           ; BSR set to: 0
  1290                           ;LC-meter.c: 145: TRISC = 0b10111011;
  1291  00191C  0EBB               	movlw	187
  1292  00191E  6E94               	movwf	3988,c	;volatile
  1293                           
  1294                           ; BSR set to: 0
  1295                           ;LC-meter.c: 149: TRISC &= ~0b00000100;
  1296  001920  9494               	bcf	3988,2,c	;volatile
  1297                           
  1298                           ; BSR set to: 0
  1299                           ;LC-meter.c: 150: LATC &= ~0b00000100; LATC |= (!!(1)) << 2;;
  1300  001922  948B               	bcf	3979,2,c	;volatile
  1301                           
  1302                           ; BSR set to: 0
  1303  001924  848B               	bsf	3979,2,c	;volatile
  1304                           
  1305                           ;LC-meter.c: 152: timer2_init(0b000 | 0x80);
  1306  001926  0E80               	movlw	128
  1307  001928  EC5C  F013         	call	_timer2_init
  1308                           
  1309                           ;LC-meter.c: 160: lcd_init(1);
  1310  00192C  0E01               	movlw	1
  1311  00192E  ECA1  F013         	call	_lcd_init
  1312                           
  1313                           ;LC-meter.c: 161: lcd_begin(2, 1);
  1314  001932  0E01               	movlw	1
  1315  001934  6E08               	movwf	lcd_begin@dotsize,c
  1316  001936  0E02               	movlw	2
  1317  001938  EC5B  F00E         	call	_lcd_begin
  1318                           
  1319                           ;LC-meter.c: 164: TRISC |= (1 << 4);
  1320  00193C  8894               	bsf	3988,4,c	;volatile
  1321                           
  1322                           ;LC-meter.c: 165: TRISC &= ~(1 << 5);
  1323  00193E  9A94               	bcf	3988,5,c	;volatile
  1324                           
  1325                           ;LC-meter.c: 167: LATC &= ~(1 << 5);
  1326  001940  9A8B               	bcf	3979,5,c	;volatile
  1327                           
  1328                           ;LC-meter.c: 168: delay10ms(50);
  1329  001942  0E32               	movlw	50
  1330  001944  EC89  F014         	call	_delay10ms
  1331                           
  1332                           ;LC-meter.c: 169: LATC |= (1 << 5);
  1333  001948  8A8B               	bsf	3979,5,c	;volatile
  1334                           
  1335                           ;LC-meter.c: 170: delay10ms(50);
  1336  00194A  0E32               	movlw	50
  1337  00194C  EC89  F014         	call	_delay10ms
  1338                           
  1339                           ;LC-meter.c: 171: LATC &= ~(1 << 5);
  1340  001950  9A8B               	bcf	3979,5,c	;volatile
  1341                           
  1342                           ;LC-meter.c: 172: delay10ms(50);
  1343  001952  0E32               	movlw	50
  1344  001954  EC89  F014         	call	_delay10ms
  1345                           
  1346                           ;LC-meter.c: 173: LATC |= (1 << 5);
  1347  001958  8A8B               	bsf	3979,5,c	;volatile
  1348                           
  1349                           ;LC-meter.c: 174: delay10ms(50);
  1350  00195A  0E32               	movlw	50
  1351  00195C  EC89  F014         	call	_delay10ms
  1352                           
  1353                           ;LC-meter.c: 175: LATC &= ~(1 << 5);
  1354  001960  9A8B               	bcf	3979,5,c	;volatile
  1355                           
  1356                           ;LC-meter.c: 178: ser_init();
  1357  001962  ECE1  F013         	call	_ser_init	;wreg free
  1358                           
  1359                           ; BSR set to: 0
  1360                           ;LC-meter.c: 185: INTCON |= 0xc0;
  1361  001966  0EC0               	movlw	192
  1362  001968  12F2               	iorwf	intcon,f,c	;volatile
  1363                           
  1364                           ; BSR set to: 0
  1365                           ;LC-meter.c: 191: lcd_gotoxy(0, 0);
  1366  00196A  0E00               	movlw	0
  1367  00196C  6A08               	clrf	lcd_gotoxy@row,c
  1368  00196E  ECF3  F012         	call	_lcd_gotoxy
  1369                           
  1370                           ;LC-meter.c: 193: lcd_puts("LC-meter ");
  1371  001972  0E9F               	movlw	STR_14& (0+255)
  1372  001974  EC2A  F013         	call	_lcd_puts
  1373                           
  1374                           ;LC-meter.c: 194: format_double( CCal);
  1375  001978  C0E3  F09D         	movff	_CCal,format_double@num
  1376  00197C  C0E4  F09E         	movff	_CCal+1,format_double@num+1
  1377  001980  C0E5  F09F         	movff	_CCal+2,format_double@num+2
  1378  001984  C0E6  F0A0         	movff	_CCal+3,format_double@num+3
  1379  001988  EC60  F00A         	call	_format_double	;wreg free
  1380                           
  1381                           ;LC-meter.c: 200: delay10ms(200);
  1382  00198C  0EC8               	movlw	200
  1383  00198E  EC89  F014         	call	_delay10ms
  1384                           
  1385                           ;LC-meter.c: 203: calibrate();
  1386  001992  ECE9  F00D         	call	_calibrate	;wreg free
  1387                           
  1388                           ;LC-meter.c: 206: lcd_clear();
  1389  001996  EC63  F014         	call	_lcd_clear	;wreg free
  1390  00199A                     l4680:
  1391  00199A  0E01               	movlw	1
  1392                           
  1393                           ;LC-meter.c: 215: char new_mode = (!!(PORTC & 0b10000));
  1394  00199C  A882               	btfss	3970,4,c	;volatile
  1395  00199E  0E00               	movlw	0
  1396  0019A0  0100               	movlb	0	; () banked
  1397  0019A2  6FB2               	movwf	main@new_mode& (0+255),b
  1398                           
  1399                           ; BSR set to: 0
  1400                           ;LC-meter.c: 217: if(new_mode != mode) {
  1401  0019A4  51EF               	movf	_mode& (0+255),w,b
  1402  0019A6  19B2               	xorwf	main@new_mode& (0+255),w,b
  1403  0019A8  E00D               	bz	l4696
  1404                           
  1405                           ; BSR set to: 0
  1406                           ;LC-meter.c: 218: ser_puts(mode ? "- C (Unit: F) -" : "- L (Unit: H) -");
  1407  0019AA  51EF               	movf	_mode& (0+255),w,b
  1408                           
  1409                           ; BSR set to: 0
  1410  0019AC  0E5D               	movlw	low STR_16
  1411  0019AE  A4D8               	btfss	status,2,c
  1412                           
  1413                           ; BSR set to: 0
  1414  0019B0  0E4D               	movlw	low STR_15
  1415  0019B2  6FB1               	movwf	_main$354& (0+255),b
  1416                           
  1417                           ; BSR set to: 0
  1418  0019B4  51B1               	movf	_main$354& (0+255),w,b
  1419  0019B6  EC27  F014         	call	_ser_puts
  1420                           
  1421                           ;LC-meter.c: 219: ser_puts("\r\n");
  1422  0019BA  0EE3               	movlw	STR_9& (0+255)
  1423  0019BC  EC27  F014         	call	_ser_puts
  1424                           
  1425                           ;LC-meter.c: 221: mode = new_mode;
  1426  0019C0  C0B2  F0EF         	movff	main@new_mode,_mode
  1427  0019C4                     l4696:
  1428                           
  1429                           ;LC-meter.c: 222: }
  1430                           ;LC-meter.c: 224: if(mode)
  1431  0019C4  0100               	movlb	0	; () banked
  1432  0019C6  51EF               	movf	_mode& (0+255),w,b
  1433  0019C8  E003               	bz	l4700
  1434                           
  1435                           ; BSR set to: 0
  1436                           ;LC-meter.c: 225: measure_capacitance();
  1437  0019CA  EC8F  F005         	call	_measure_capacitance	;wreg free
  1438  0019CE  D002               	goto	l4702
  1439  0019D0                     l4700:
  1440                           
  1441                           ; BSR set to: 0
  1442                           ;LC-meter.c: 226: else
  1443                           ;LC-meter.c: 227: measure_inductance();
  1444  0019D0  ECFE  F002         	call	_measure_inductance	;wreg free
  1445  0019D4                     l4702:
  1446                           
  1447                           ;LC-meter.c: 229: print_indicator(1);
  1448  0019D4  0E01               	movlw	1
  1449  0019D6  EC47  F014         	call	_print_indicator
  1450                           
  1451                           ;LC-meter.c: 230: delay10ms(30);
  1452  0019DA  0E1E               	movlw	30
  1453  0019DC  EC89  F014         	call	_delay10ms
  1454                           
  1455                           ;LC-meter.c: 232: print_indicator(0);
  1456  0019E0  0E00               	movlw	0
  1457  0019E2  EC47  F014         	call	_print_indicator
  1458                           
  1459                           ;LC-meter.c: 233: delay10ms(20);
  1460  0019E6  0E14               	movlw	20
  1461  0019E8  EC89  F014         	call	_delay10ms
  1462                           
  1463                           ;LC-meter.c: 234: }
  1464  0019EC  D7D6               	goto	l4680
  1465  0019EE                     __end_of_main:
  1466                           	opt stack 0
  1467                           tblptru	equ	0xFF8
  1468                           tblptrh	equ	0xFF7
  1469                           tblptrl	equ	0xFF6
  1470                           tablat	equ	0xFF5
  1471                           intcon	equ	0xFF2
  1472                           intcon2	equ	0xFF1
  1473                           postinc0	equ	0xFEE
  1474                           wreg	equ	0xFE8
  1475                           postdec1	equ	0xFE5
  1476                           fsr1l	equ	0xFE1
  1477                           status	equ	0xFD8
  1478                           
  1479 ;; *************** function _timer2_init *****************
  1480 ;; Defined at:
  1481 ;;		line 129 in file "../../../lib/timer.c"
  1482 ;; Parameters:    Size  Location     Type
  1483 ;;  ps_mode         1    wreg     unsigned char 
  1484 ;; Auto vars:     Size  Location     Type
  1485 ;;  ps_mode         1    6[COMRAM] unsigned char 
  1486 ;;  postscaler      1    0        unsigned char 
  1487 ;;  ps              1    4[COMRAM] unsigned char 
  1488 ;; Return value:  Size  Location     Type
  1489 ;;		None               void
  1490 ;; Registers used:
  1491 ;;		wreg, status,2, status,0
  1492 ;; Tracked objects:
  1493 ;;		On entry : F/0
  1494 ;;		On exit  : 0/0
  1495 ;;		Unchanged: 0/0
  1496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  1497 ;;      Params:         0       0       0       0
  1498 ;;      Locals:         3       0       0       0
  1499 ;;      Temps:          1       0       0       0
  1500 ;;      Totals:         4       0       0       0
  1501 ;;Total ram usage:        4 bytes
  1502 ;; Hardware stack levels used:    1
  1503 ;; Hardware stack levels required when called:    1
  1504 ;; This function calls:
  1505 ;;		Nothing
  1506 ;; This function is called by:
  1507 ;;		_main
  1508 ;; This function uses a non-reentrant model
  1509 ;;
  1510                           
  1511                           	psect	text1
  1512  0026B8                     __ptext1:
  1513                           	opt stack 0
  1514  0026B8                     _timer2_init:
  1515                           	opt stack 29
  1516                           
  1517                           ;incstack = 0
  1518                           ;timer2_init@ps_mode stored from wreg
  1519  0026B8  6E07               	movwf	timer2_init@ps_mode,c
  1520                           
  1521                           ; BSR set to: 0
  1522                           ;timer.c: 130: uint8_t ps = ps_mode & 0b1111;
  1523  0026BA  5007               	movf	timer2_init@ps_mode,w,c
  1524  0026BC  0B0F               	andlw	15
  1525  0026BE  6E05               	movwf	timer2_init@ps,c
  1526                           
  1527                           ; BSR set to: 0
  1528                           ;timer.c: 134: T2CON &= ~0b01111111;
  1529  0026C0  0E80               	movlw	128
  1530  0026C2  16CA               	andwf	4042,f,c	;volatile
  1531                           
  1532                           ;timer.c: 136: T2CON |= (postscaler & 0b1111) << 3;
  1533  0026C4  50CA               	movf	4042,w,c	;volatile
  1534                           
  1535                           ;timer.c: 137: T2CON |= (ps & 0b11);
  1536  0026C6  5005               	movf	timer2_init@ps,w,c
  1537  0026C8  0B03               	andlw	3
  1538  0026CA  12CA               	iorwf	4042,f,c	;volatile
  1539                           
  1540                           ; BSR set to: 0
  1541                           ;timer.c: 139: TMR2 = 0;
  1542  0026CC  6ACC               	clrf	4044,c	;volatile
  1543                           
  1544                           ; BSR set to: 0
  1545                           ;timer.c: 141: T2CON |= 0b100;
  1546  0026CE  84CA               	bsf	4042,2,c	;volatile
  1547                           
  1548                           ; BSR set to: 0
  1549                           ;timer.c: 144: PIR1 &= ~0b10;
  1550  0026D0  929E               	bcf	3998,1,c	;volatile
  1551                           
  1552                           ;timer.c: 145: PIE1 = (!!(ps_mode & 0x80)) << 1;
  1553  0026D2  AE07               	btfss	timer2_init@ps_mode,7,c
  1554  0026D4  D003               	goto	u2420
  1555  0026D6  6A04               	clrf	??_timer2_init& (0+255),c
  1556  0026D8  2A04               	incf	??_timer2_init& (0+255),f,c
  1557  0026DA  D001               	goto	u2438
  1558  0026DC                     u2420:
  1559  0026DC  6A04               	clrf	??_timer2_init& (0+255),c
  1560  0026DE                     u2438:
  1561  0026DE  90D8               	bcf	status,0,c
  1562  0026E0  3404               	rlcf	??_timer2_init,w,c
  1563  0026E2  6E9D               	movwf	3997,c	;volatile
  1564  0026E4  0012               	return		;funcret
  1565  0026E6                     __end_of_timer2_init:
  1566                           	opt stack 0
  1567                           tblptru	equ	0xFF8
  1568                           tblptrh	equ	0xFF7
  1569                           tblptrl	equ	0xFF6
  1570                           tablat	equ	0xFF5
  1571                           intcon	equ	0xFF2
  1572                           intcon2	equ	0xFF1
  1573                           postinc0	equ	0xFEE
  1574                           wreg	equ	0xFE8
  1575                           postdec1	equ	0xFE5
  1576                           fsr1l	equ	0xFE1
  1577                           status	equ	0xFD8
  1578                           
  1579 ;; *************** function _timer0_init *****************
  1580 ;; Defined at:
  1581 ;;		line 27 in file "../../../lib/timer.c"
  1582 ;; Parameters:    Size  Location     Type
  1583 ;;  ps_mode         1    wreg     unsigned char 
  1584 ;; Auto vars:     Size  Location     Type
  1585 ;;  ps_mode         1   14[COMRAM] unsigned char 
  1586 ;;  prescaler       1   13[COMRAM] unsigned char 
  1587 ;; Return value:  Size  Location     Type
  1588 ;;		None               void
  1589 ;; Registers used:
  1590 ;;		wreg, status,2, status,0
  1591 ;; Tracked objects:
  1592 ;;		On entry : F/0
  1593 ;;		On exit  : F/0
  1594 ;;		Unchanged: F/0
  1595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  1596 ;;      Params:         0       0       0       0
  1597 ;;      Locals:        12       0       0       0
  1598 ;;      Temps:          0       0       0       0
  1599 ;;      Totals:        12       0       0       0
  1600 ;;Total ram usage:       12 bytes
  1601 ;; Hardware stack levels used:    1
  1602 ;; Hardware stack levels required when called:    1
  1603 ;; This function calls:
  1604 ;;		Nothing
  1605 ;; This function is called by:
  1606 ;;		_main
  1607 ;; This function uses a non-reentrant model
  1608 ;;
  1609                           
  1610                           	psect	text2
  1611  0021A2                     __ptext2:
  1612                           	opt stack 0
  1613  0021A2                     _timer0_init:
  1614                           	opt stack 29
  1615                           
  1616                           ;incstack = 0
  1617                           ;timer0_init@ps_mode stored from wreg
  1618  0021A2  6E0F               	movwf	timer0_init@ps_mode,c
  1619                           
  1620                           ; BSR set to: 0
  1621                           ;timer.c: 28: uint8_t prescaler = ps_mode & 0b1111;
  1622  0021A4  500F               	movf	timer0_init@ps_mode,w,c
  1623  0021A6  0B0F               	andlw	15
  1624  0021A8  6E0E               	movwf	timer0_init@prescaler,c
  1625                           
  1626                           ; BSR set to: 0
  1627                           ;timer.c: 30: TMR0 = 0;
  1628  0021AA  6AD6               	clrf	4054,c	;volatile
  1629  0021AC  6AD7               	clrf	4055,c	;volatile
  1630                           
  1631                           ; BSR set to: 0
  1632                           ;timer.c: 33: T0CON |= (!!(ps_mode & 0x20)) ? 0x20 : 0x00;
  1633  0021AE  BA0F               	btfsc	timer0_init@ps_mode,5,c
  1634  0021B0  D003               	goto	l3230
  1635                           
  1636                           ; BSR set to: 0
  1637  0021B2  6A04               	clrf	_timer0_init$154,c
  1638  0021B4  6A05               	clrf	_timer0_init$154+1,c
  1639  0021B6  D003               	goto	l3232
  1640  0021B8                     l3230:
  1641                           
  1642                           ; BSR set to: 0
  1643  0021B8  6A05               	clrf	_timer0_init$154+1,c
  1644  0021BA  0E20               	movlw	32
  1645  0021BC  6E04               	movwf	_timer0_init$154,c
  1646  0021BE                     l3232:
  1647                           
  1648                           ; BSR set to: 0
  1649  0021BE  5004               	movf	_timer0_init$154,w,c
  1650  0021C0  12D5               	iorwf	4053,f,c	;volatile
  1651                           
  1652                           ; BSR set to: 0
  1653                           ;timer.c: 36: T0CON |= (!!(ps_mode & 0x10)) ? 0x10 : 0x00;
  1654  0021C2  B80F               	btfsc	timer0_init@ps_mode,4,c
  1655  0021C4  D003               	goto	l3238
  1656                           
  1657                           ; BSR set to: 0
  1658  0021C6  6A06               	clrf	_timer0_init$155,c
  1659  0021C8  6A07               	clrf	_timer0_init$155+1,c
  1660  0021CA  D003               	goto	l3240
  1661  0021CC                     l3238:
  1662                           
  1663                           ; BSR set to: 0
  1664  0021CC  6A07               	clrf	_timer0_init$155+1,c
  1665  0021CE  0E10               	movlw	16
  1666  0021D0  6E06               	movwf	_timer0_init$155,c
  1667  0021D2                     l3240:
  1668                           
  1669                           ; BSR set to: 0
  1670  0021D2  5006               	movf	_timer0_init$155,w,c
  1671  0021D4  12D5               	iorwf	4053,f,c	;volatile
  1672                           
  1673                           ; BSR set to: 0
  1674                           ;timer.c: 39: T0CON |= (!!(ps_mode & 0x40)) ? 0x40 : 0x00;
  1675  0021D6  BC0F               	btfsc	timer0_init@ps_mode,6,c
  1676  0021D8  D003               	goto	l3246
  1677                           
  1678                           ; BSR set to: 0
  1679  0021DA  6A08               	clrf	_timer0_init$156,c
  1680  0021DC  6A09               	clrf	_timer0_init$156+1,c
  1681  0021DE  D003               	goto	l3248
  1682  0021E0                     l3246:
  1683                           
  1684                           ; BSR set to: 0
  1685  0021E0  6A09               	clrf	_timer0_init$156+1,c
  1686  0021E2  0E40               	movlw	64
  1687  0021E4  6E08               	movwf	_timer0_init$156,c
  1688  0021E6                     l3248:
  1689                           
  1690                           ; BSR set to: 0
  1691  0021E6  5008               	movf	_timer0_init$156,w,c
  1692  0021E8  12D5               	iorwf	4053,f,c	;volatile
  1693                           
  1694                           ; BSR set to: 0
  1695                           ;timer.c: 43: T0CON &= (!!prescaler) ? ~0x08 : ~0x00;
  1696  0021EA  500E               	movf	timer0_init@prescaler,w,c
  1697  0021EC  E103               	bnz	l3254
  1698                           
  1699                           ; BSR set to: 0
  1700  0021EE  680A               	setf	_timer0_init$157,c
  1701  0021F0  680B               	setf	_timer0_init$157+1,c
  1702  0021F2  D003               	goto	l3256
  1703  0021F4                     l3254:
  1704                           
  1705                           ; BSR set to: 0
  1706  0021F4  680B               	setf	_timer0_init$157+1,c
  1707  0021F6  0EF7               	movlw	247
  1708  0021F8  6E0A               	movwf	_timer0_init$157,c
  1709  0021FA                     l3256:
  1710                           
  1711                           ; BSR set to: 0
  1712  0021FA  500A               	movf	_timer0_init$157,w,c
  1713  0021FC  16D5               	andwf	4053,f,c	;volatile
  1714                           
  1715                           ; BSR set to: 0
  1716                           ;timer.c: 45: T0CON &= ~0b111;
  1717  0021FE  0EF8               	movlw	248
  1718  002200  16D5               	andwf	4053,f,c	;volatile
  1719                           
  1720                           ;timer.c: 47: if(prescaler > 0) {
  1721  002202  500E               	movf	timer0_init@prescaler,w,c
  1722  002204  E003               	bz	l3262
  1723                           
  1724                           ; BSR set to: 0
  1725                           ;timer.c: 48: T0CON |= (prescaler - 1) & 0b111;
  1726  002206  040E               	decf	timer0_init@prescaler,w,c
  1727  002208  0B07               	andlw	7
  1728  00220A  12D5               	iorwf	4053,f,c	;volatile
  1729  00220C                     l3262:
  1730                           
  1731                           ; BSR set to: 0
  1732                           ;timer.c: 54: }
  1733                           ;timer.c: 58: INTCON &= ~0x40;
  1734  00220C  9CF2               	bcf	intcon,6,c	;volatile
  1735                           
  1736                           ; BSR set to: 0
  1737                           ;timer.c: 59: INTCON |= (!!(ps_mode & 0x80)) ? 0x20 : 0x00;
  1738  00220E  BE0F               	btfsc	timer0_init@ps_mode,7,c
  1739  002210  D003               	goto	l3268
  1740                           
  1741                           ; BSR set to: 0
  1742  002212  6A0C               	clrf	_timer0_init$158,c
  1743  002214  6A0D               	clrf	_timer0_init$158+1,c
  1744  002216  D003               	goto	l3270
  1745  002218                     l3268:
  1746                           
  1747                           ; BSR set to: 0
  1748  002218  6A0D               	clrf	_timer0_init$158+1,c
  1749  00221A  0E20               	movlw	32
  1750  00221C  6E0C               	movwf	_timer0_init$158,c
  1751  00221E                     l3270:
  1752                           
  1753                           ; BSR set to: 0
  1754  00221E  500C               	movf	_timer0_init$158,w,c
  1755  002220  12F2               	iorwf	intcon,f,c	;volatile
  1756                           
  1757                           ; BSR set to: 0
  1758  002222  0012               	return		;funcret
  1759  002224                     __end_of_timer0_init:
  1760                           	opt stack 0
  1761                           tblptru	equ	0xFF8
  1762                           tblptrh	equ	0xFF7
  1763                           tblptrl	equ	0xFF6
  1764                           tablat	equ	0xFF5
  1765                           intcon	equ	0xFF2
  1766                           intcon2	equ	0xFF1
  1767                           postinc0	equ	0xFEE
  1768                           wreg	equ	0xFE8
  1769                           postdec1	equ	0xFE5
  1770                           fsr1l	equ	0xFE1
  1771                           status	equ	0xFD8
  1772                           
  1773 ;; *************** function _ser_init *****************
  1774 ;; Defined at:
  1775 ;;		line 98 in file "../../../lib/ser.c"
  1776 ;; Parameters:    Size  Location     Type
  1777 ;;		None
  1778 ;; Auto vars:     Size  Location     Type
  1779 ;;		None
  1780 ;; Return value:  Size  Location     Type
  1781 ;;		None               void
  1782 ;; Registers used:
  1783 ;;		wreg, status,2, status,0
  1784 ;; Tracked objects:
  1785 ;;		On entry : 0/0
  1786 ;;		On exit  : F/0
  1787 ;;		Unchanged: 0/0
  1788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  1789 ;;      Params:         0       0       0       0
  1790 ;;      Locals:         0       0       0       0
  1791 ;;      Temps:          0       0       0       0
  1792 ;;      Totals:         0       0       0       0
  1793 ;;Total ram usage:        0 bytes
  1794 ;; Hardware stack levels used:    1
  1795 ;; Hardware stack levels required when called:    1
  1796 ;; This function calls:
  1797 ;;		Nothing
  1798 ;; This function is called by:
  1799 ;;		_main
  1800 ;; This function uses a non-reentrant model
  1801 ;;
  1802                           
  1803                           	psect	text3
  1804  0027C2                     __ptext3:
  1805                           	opt stack 0
  1806  0027C2                     _ser_init:
  1807                           	opt stack 29
  1808                           
  1809                           ;ser.c: 99: TRISC &= ~0x40;
  1810                           
  1811                           ; BSR set to: 0
  1812                           ;incstack = 0
  1813  0027C2  9C94               	bcf	3988,6,c	;volatile
  1814                           
  1815                           ;ser.c: 101: TRISC |= 0x80;
  1816  0027C4  8E94               	bsf	3988,7,c	;volatile
  1817                           
  1818                           ;ser.c: 103: BRGH = 1;
  1819  0027C6  84AC               	bsf	4012,2,c	;volatile
  1820                           
  1821                           ;ser.c: 109: SPBRG = ser_brg;
  1822  0027C8  0E19               	movlw	25
  1823  0027CA  6EAF               	movwf	4015,c	;volatile
  1824                           
  1825                           ;ser.c: 112: TX9 = 0;
  1826  0027CC  9CAC               	bcf	4012,6,c	;volatile
  1827                           
  1828                           ;ser.c: 113: RX9 = 0;
  1829  0027CE  9CAB               	bcf	4011,6,c	;volatile
  1830                           
  1831                           ;ser.c: 115: SYNC = 0;
  1832  0027D0  98AC               	bcf	4012,4,c	;volatile
  1833                           
  1834                           ;ser.c: 116: SPEN = 1;
  1835  0027D2  8EAB               	bsf	4011,7,c	;volatile
  1836                           
  1837                           ;ser.c: 117: CREN = 1;
  1838  0027D4  88AB               	bsf	4011,4,c	;volatile
  1839                           
  1840                           ;ser.c: 118: TXIE = 0;
  1841  0027D6  989D               	bcf	3997,4,c	;volatile
  1842                           
  1843                           ;ser.c: 120: TXEN = 1;
  1844  0027D8  8AAC               	bsf	4012,5,c	;volatile
  1845                           
  1846                           ;ser.c: 121: PEIE = 1;
  1847  0027DA  8CF2               	bsf	intcon,6,c	;volatile
  1848                           
  1849                           ;ser.c: 123: rxiptr = rxoptr = txiptr = txoptr = 0;
  1850  0027DC  6A5C               	clrf	_txoptr,c	;volatile
  1851  0027DE  6A5B               	clrf	_txiptr,c	;volatile
  1852  0027E0  0100               	movlb	0	; () banked
  1853  0027E2  6BDD               	clrf	_rxoptr& (0+255),b	;volatile
  1854  0027E4  6BDC               	clrf	_rxiptr& (0+255),b	;volatile
  1855                           
  1856                           ; BSR set to: 0
  1857  0027E6  0012               	return		;funcret
  1858  0027E8                     __end_of_ser_init:
  1859                           	opt stack 0
  1860                           tblptru	equ	0xFF8
  1861                           tblptrh	equ	0xFF7
  1862                           tblptrl	equ	0xFF6
  1863                           tablat	equ	0xFF5
  1864                           intcon	equ	0xFF2
  1865                           intcon2	equ	0xFF1
  1866                           postinc0	equ	0xFEE
  1867                           wreg	equ	0xFE8
  1868                           postdec1	equ	0xFE5
  1869                           fsr1l	equ	0xFE1
  1870                           status	equ	0xFD8
  1871                           
  1872 ;; *************** function _print_indicator *****************
  1873 ;; Defined at:
  1874 ;;		line 184 in file "../../../src/print.c"
  1875 ;; Parameters:    Size  Location     Type
  1876 ;;  indicate        1    wreg     unsigned char 
  1877 ;; Auto vars:     Size  Location     Type
  1878 ;;  indicate        1   13[COMRAM] unsigned char 
  1879 ;; Return value:  Size  Location     Type
  1880 ;;		None               void
  1881 ;; Registers used:
  1882 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1883 ;; Tracked objects:
  1884 ;;		On entry : 0/0
  1885 ;;		On exit  : 0/0
  1886 ;;		Unchanged: 0/0
  1887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  1888 ;;      Params:         0       0       0       0
  1889 ;;      Locals:         1       0       0       0
  1890 ;;      Temps:          0       0       0       0
  1891 ;;      Totals:         1       0       0       0
  1892 ;;Total ram usage:        1 bytes
  1893 ;; Hardware stack levels used:    1
  1894 ;; Hardware stack levels required when called:    5
  1895 ;; This function calls:
  1896 ;;		_lcd_gotoxy
  1897 ;;		_lcd_puts
  1898 ;; This function is called by:
  1899 ;;		_main
  1900 ;; This function uses a non-reentrant model
  1901 ;;
  1902                           
  1903                           	psect	text4
  1904  00288E                     __ptext4:
  1905                           	opt stack 0
  1906  00288E                     _print_indicator:
  1907                           	opt stack 25
  1908                           
  1909                           ; BSR set to: 0
  1910                           ;incstack = 0
  1911                           ;print_indicator@indicate stored from wreg
  1912  00288E  6E0E               	movwf	print_indicator@indicate,c
  1913                           
  1914                           ;print.c: 198: lcd_gotoxy(0, 1);
  1915  002890  0E01               	movlw	1
  1916  002892  6E08               	movwf	lcd_gotoxy@row,c
  1917  002894  0E00               	movlw	0
  1918  002896  ECF3  F012         	call	_lcd_gotoxy
  1919                           
  1920                           ;print.c: 199: if(indicate) {
  1921  00289A  500E               	movf	print_indicator@indicate,w,c
  1922  00289C  E003               	bz	l4390
  1923                           
  1924                           ;print.c: 200: lcd_puts("-*-");
  1925  00289E  0EDF               	movlw	STR_11& (0+255)
  1926  0028A0  EF2A  F013         	goto	_lcd_puts
  1927  0028A4                     l4390:
  1928                           
  1929                           ;print.c: 202: lcd_puts("   ");
  1930  0028A4  0EB4               	movlw	(STR_18+3)& (0+255)
  1931  0028A6  EF2A  F013         	goto	_lcd_puts
  1932  0028AA                     __end_of_print_indicator:
  1933                           	opt stack 0
  1934                           tblptru	equ	0xFF8
  1935                           tblptrh	equ	0xFF7
  1936                           tblptrl	equ	0xFF6
  1937                           tablat	equ	0xFF5
  1938                           intcon	equ	0xFF2
  1939                           intcon2	equ	0xFF1
  1940                           postinc0	equ	0xFEE
  1941                           wreg	equ	0xFE8
  1942                           postdec1	equ	0xFE5
  1943                           fsr1l	equ	0xFE1
  1944                           status	equ	0xFD8
  1945                           
  1946 ;; *************** function _measure_inductance *****************
  1947 ;; Defined at:
  1948 ;;		line 197 in file "../../../src/measure.c"
  1949 ;; Parameters:    Size  Location     Type
  1950 ;;		None
  1951 ;; Auto vars:     Size  Location     Type
  1952 ;;  Lin             4   53[BANK0 ] unsigned char 
  1953 ;;  denominator     4   18[BANK0 ] unsigned char 
  1954 ;;  numerator       4   14[BANK0 ] unsigned char 
  1955 ;;  var             2   51[BANK0 ] unsigned int 
  1956 ;;  unit            1   38[BANK0 ] unsigned char 
  1957 ;; Return value:  Size  Location     Type
  1958 ;;		None               void
  1959 ;; Registers used:
  1960 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1961 ;; Tracked objects:
  1962 ;;		On entry : F/0
  1963 ;;		On exit  : 0/0
  1964 ;;		Unchanged: 0/0
  1965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  1966 ;;      Params:         0       0       0       0
  1967 ;;      Locals:         0      43       0       0
  1968 ;;      Temps:          0       0       0       0
  1969 ;;      Totals:         0      43       0       0
  1970 ;;Total ram usage:       43 bytes
  1971 ;; Hardware stack levels used:    1
  1972 ;; Hardware stack levels required when called:    6
  1973 ;; This function calls:
  1974 ;;		___fldiv
  1975 ;;		___flge
  1976 ;;		___flmul
  1977 ;;		___flsub
  1978 ;;		___fltol
  1979 ;;		___lwtofl
  1980 ;;		_lcd_gotoxy
  1981 ;;		_measure_freq
  1982 ;;		_print_reading
  1983 ;;		_print_unit
  1984 ;;		_put_str
  1985 ;; This function is called by:
  1986 ;;		_main
  1987 ;; This function uses a non-reentrant model
  1988 ;;
  1989                           
  1990                           	psect	text5
  1991  0005FC                     __ptext5:
  1992                           	opt stack 0
  1993  0005FC                     _measure_inductance:
  1994                           	opt stack 24
  1995                           
  1996                           ; BSR set to: 0
  1997                           ;measure.c: 198: uint8_t unit;
  1998                           ;measure.c: 199: uint16_t var;
  1999                           ;measure.c: 201: double Lin, numerator, denominator;
  2000                           ;measure.c: 204: lcd_gotoxy(0, 0);
  2001                           
  2002                           ;incstack = 0
  2003  0005FC  0E00               	movlw	0
  2004  0005FE  6A08               	clrf	lcd_gotoxy@row,c
  2005  000600  ECF3  F012         	call	_lcd_gotoxy
  2006                           
  2007                           ;measure.c: 205: put_str("Inductivity ");
  2008  000604  0E7C               	movlw	STR_37& (0+255)
  2009  000606  EC43  F013         	call	_put_str
  2010                           
  2011                           ;measure.c: 207: var = measure_freq();
  2012  00060A  EC75  F00D         	call	_measure_freq	;wreg free
  2013  00060E  C036  F093         	movff	?_measure_freq,measure_inductance@var
  2014  000612  C037  F094         	movff	?_measure_freq+1,measure_inductance@var+1
  2015                           
  2016                           ;measure.c: 209: F3 = (double)var;
  2017  000616  C093  F03B         	movff	measure_inductance@var,___lwtofl@c
  2018  00061A  C094  F03C         	movff	measure_inductance@var+1,___lwtofl@c+1
  2019  00061E  ECCC  F013         	call	___lwtofl	;wreg free
  2020  000622  C03B  F0C7         	movff	?___lwtofl,_F3
  2021  000626  C03C  F0C8         	movff	?___lwtofl+1,_F3+1
  2022  00062A  C03D  F0C9         	movff	?___lwtofl+2,_F3+2
  2023  00062E  C03E  F0CA         	movff	?___lwtofl+3,_F3+3
  2024                           
  2025                           ;measure.c: 210: if(F3 > F1)
  2026  000632  C0DF  F004         	movff	_F1,___flge@ff1
  2027  000636  C0E0  F005         	movff	_F1+1,___flge@ff1+1
  2028  00063A  C0E1  F006         	movff	_F1+2,___flge@ff1+2
  2029  00063E  C0E2  F007         	movff	_F1+3,___flge@ff1+3
  2030  000642  C0C7  F008         	movff	_F3,___flge@ff2
  2031  000646  C0C8  F009         	movff	_F3+1,___flge@ff2+1
  2032  00064A  C0C9  F00A         	movff	_F3+2,___flge@ff2+2
  2033  00064E  C0CA  F00B         	movff	_F3+3,___flge@ff2+3
  2034  000652  EC01  F012         	call	___flge	;wreg free
  2035  000656  E208               	bc	l4582
  2036                           
  2037                           ;measure.c: 211: F3 = F1;
  2038  000658  C0DF  F0C7         	movff	_F1,_F3
  2039  00065C  C0E0  F0C8         	movff	_F1+1,_F3+1
  2040  000660  C0E1  F0C9         	movff	_F1+2,_F3+2
  2041  000664  C0E2  F0CA         	movff	_F1+3,_F3+3
  2042  000668                     l4582:
  2043                           
  2044                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  2045  000668  C0C3  F048         	movff	_F2,___flsub@f2
  2046  00066C  C0C4  F049         	movff	_F2+1,___flsub@f2+1
  2047  000670  C0C5  F04A         	movff	_F2+2,___flsub@f2+2
  2048  000674  C0C6  F04B         	movff	_F2+3,___flsub@f2+3
  2049  000678  C0C3  F044         	movff	_F2,___flsub@f1
  2050  00067C  C0C4  F045         	movff	_F2+1,___flsub@f1+1
  2051  000680  C0C5  F046         	movff	_F2+2,___flsub@f1+2
  2052  000684  C0C6  F047         	movff	_F2+3,___flsub@f1+3
  2053  000688  EC95  F012         	call	___flsub	;wreg free
  2054  00068C  C044  F076         	movff	?___flsub,_measure_inductance$1125
  2055  000690  C045  F077         	movff	?___flsub+1,_measure_inductance$1125+1
  2056  000694  C046  F078         	movff	?___flsub+2,_measure_inductance$1125+2
  2057  000698  C047  F079         	movff	?___flsub+3,_measure_inductance$1125+3
  2058                           
  2059                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  2060  00069C  C076  F048         	movff	_measure_inductance$1125,___flsub@f2
  2061  0006A0  C077  F049         	movff	_measure_inductance$1125+1,___flsub@f2+1
  2062  0006A4  C078  F04A         	movff	_measure_inductance$1125+2,___flsub@f2+2
  2063  0006A8  C079  F04B         	movff	_measure_inductance$1125+3,___flsub@f2+3
  2064  0006AC  C0DF  F021         	movff	_F1,___flmul@f2
  2065  0006B0  C0E0  F022         	movff	_F1+1,___flmul@f2+1
  2066  0006B4  C0E1  F023         	movff	_F1+2,___flmul@f2+2
  2067  0006B8  C0E2  F024         	movff	_F1+3,___flmul@f2+3
  2068  0006BC  C0DF  F01D         	movff	_F1,___flmul@f1
  2069  0006C0  C0E0  F01E         	movff	_F1+1,___flmul@f1+1
  2070  0006C4  C0E1  F01F         	movff	_F1+2,___flmul@f1+2
  2071  0006C8  C0E2  F020         	movff	_F1+3,___flmul@f1+3
  2072  0006CC  ECB3  F008         	call	___flmul	;wreg free
  2073  0006D0  C01D  F044         	movff	?___flmul,___flsub@f1
  2074  0006D4  C01E  F045         	movff	?___flmul+1,___flsub@f1+1
  2075  0006D8  C01F  F046         	movff	?___flmul+2,___flsub@f1+2
  2076  0006DC  C020  F047         	movff	?___flmul+3,___flsub@f1+3
  2077  0006E0  EC95  F012         	call	___flsub	;wreg free
  2078  0006E4  C044  F087         	movff	?___flsub,_measure_inductance$1126
  2079  0006E8  C045  F088         	movff	?___flsub+1,_measure_inductance$1126+1
  2080  0006EC  C046  F089         	movff	?___flsub+2,_measure_inductance$1126+2
  2081  0006F0  C047  F08A         	movff	?___flsub+3,_measure_inductance$1126+3
  2082                           
  2083                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  2084  0006F4  C0C7  F021         	movff	_F3,___flmul@f2
  2085  0006F8  C0C8  F022         	movff	_F3+1,___flmul@f2+1
  2086  0006FC  C0C9  F023         	movff	_F3+2,___flmul@f2+2
  2087  000700  C0CA  F024         	movff	_F3+3,___flmul@f2+3
  2088  000704  C0C7  F01D         	movff	_F3,___flmul@f1
  2089  000708  C0C8  F01E         	movff	_F3+1,___flmul@f1+1
  2090  00070C  C0C9  F01F         	movff	_F3+2,___flmul@f1+2
  2091  000710  C0CA  F020         	movff	_F3+3,___flmul@f1+3
  2092  000714  ECB3  F008         	call	___flmul	;wreg free
  2093  000718  C01D  F048         	movff	?___flmul,___flsub@f2
  2094  00071C  C01E  F049         	movff	?___flmul+1,___flsub@f2+1
  2095  000720  C01F  F04A         	movff	?___flmul+2,___flsub@f2+2
  2096  000724  C020  F04B         	movff	?___flmul+3,___flsub@f2+3
  2097  000728  C0DF  F021         	movff	_F1,___flmul@f2
  2098  00072C  C0E0  F022         	movff	_F1+1,___flmul@f2+1
  2099  000730  C0E1  F023         	movff	_F1+2,___flmul@f2+2
  2100  000734  C0E2  F024         	movff	_F1+3,___flmul@f2+3
  2101  000738  C0DF  F01D         	movff	_F1,___flmul@f1
  2102  00073C  C0E0  F01E         	movff	_F1+1,___flmul@f1+1
  2103  000740  C0E1  F01F         	movff	_F1+2,___flmul@f1+2
  2104  000744  C0E2  F020         	movff	_F1+3,___flmul@f1+3
  2105  000748  ECB3  F008         	call	___flmul	;wreg free
  2106  00074C  C01D  F044         	movff	?___flmul,___flsub@f1
  2107  000750  C01E  F045         	movff	?___flmul+1,___flsub@f1+1
  2108  000754  C01F  F046         	movff	?___flmul+2,___flsub@f1+2
  2109  000758  C020  F047         	movff	?___flmul+3,___flsub@f1+3
  2110  00075C  EC95  F012         	call	___flsub	;wreg free
  2111  000760  C044  F08B         	movff	?___flsub,_measure_inductance$1127
  2112  000764  C045  F08C         	movff	?___flsub+1,_measure_inductance$1127+1
  2113  000768  C046  F08D         	movff	?___flsub+2,_measure_inductance$1127+2
  2114  00076C  C047  F08E         	movff	?___flsub+3,_measure_inductance$1127+3
  2115                           
  2116                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  2117  000770  C087  F021         	movff	_measure_inductance$1126,___flmul@f2
  2118  000774  C088  F022         	movff	_measure_inductance$1126+1,___flmul@f2+1
  2119  000778  C089  F023         	movff	_measure_inductance$1126+2,___flmul@f2+2
  2120  00077C  C08A  F024         	movff	_measure_inductance$1126+3,___flmul@f2+3
  2121  000780  C08B  F01D         	movff	_measure_inductance$1127,___flmul@f1
  2122  000784  C08C  F01E         	movff	_measure_inductance$1127+1,___flmul@f1+1
  2123  000788  C08D  F01F         	movff	_measure_inductance$1127+2,___flmul@f1+2
  2124  00078C  C08E  F020         	movff	_measure_inductance$1127+3,___flmul@f1+3
  2125  000790  ECB3  F008         	call	___flmul	;wreg free
  2126  000794  C01D  F08F         	movff	?___flmul,_measure_inductance$1128
  2127  000798  C01E  F090         	movff	?___flmul+1,_measure_inductance$1128+1
  2128  00079C  C01F  F091         	movff	?___flmul+2,_measure_inductance$1128+2
  2129  0007A0  C020  F092         	movff	?___flmul+3,_measure_inductance$1128+3
  2130                           
  2131                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  2132  0007A4  C08F  F01D         	movff	_measure_inductance$1128,___flmul@f1
  2133  0007A8  C090  F01E         	movff	_measure_inductance$1128+1,___flmul@f1+1
  2134  0007AC  C091  F01F         	movff	_measure_inductance$1128+2,___flmul@f1+2
  2135  0007B0  C092  F020         	movff	_measure_inductance$1128+3,___flmul@f1+3
  2136  0007B4  0E00               	movlw	0
  2137  0007B6  6E21               	movwf	___flmul@f2,c
  2138  0007B8  0E40               	movlw	64
  2139  0007BA  6E22               	movwf	___flmul@f2+1,c
  2140  0007BC  0E1C               	movlw	28
  2141  0007BE  6E23               	movwf	___flmul@f2+2,c
  2142  0007C0  0E46               	movlw	70
  2143  0007C2  6E24               	movwf	___flmul@f2+3,c
  2144  0007C4  ECB3  F008         	call	___flmul	;wreg free
  2145  0007C8  C01D  F06E         	movff	?___flmul,measure_inductance@numerator
  2146  0007CC  C01E  F06F         	movff	?___flmul+1,measure_inductance@numerator+1
  2147  0007D0  C01F  F070         	movff	?___flmul+2,measure_inductance@numerator+2
  2148  0007D4  C020  F071         	movff	?___flmul+3,measure_inductance@numerator+3
  2149                           
  2150                           ;measure.c: 213: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2151  0007D8  C0DF  F021         	movff	_F1,___flmul@f2
  2152  0007DC  C0E0  F022         	movff	_F1+1,___flmul@f2+1
  2153  0007E0  C0E1  F023         	movff	_F1+2,___flmul@f2+2
  2154  0007E4  C0E2  F024         	movff	_F1+3,___flmul@f2+3
  2155  0007E8  C0DF  F01D         	movff	_F1,___flmul@f1
  2156  0007EC  C0E0  F01E         	movff	_F1+1,___flmul@f1+1
  2157  0007F0  C0E1  F01F         	movff	_F1+2,___flmul@f1+2
  2158  0007F4  C0E2  F020         	movff	_F1+3,___flmul@f1+3
  2159  0007F8  ECB3  F008         	call	___flmul	;wreg free
  2160  0007FC  C01D  F07A         	movff	?___flmul,_measure_inductance$1129
  2161  000800  C01E  F07B         	movff	?___flmul+1,_measure_inductance$1129+1
  2162  000804  C01F  F07C         	movff	?___flmul+2,_measure_inductance$1129+2
  2163  000808  C020  F07D         	movff	?___flmul+3,_measure_inductance$1129+3
  2164                           
  2165                           ;measure.c: 213: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2166  00080C  C0C3  F021         	movff	_F2,___flmul@f2
  2167  000810  C0C4  F022         	movff	_F2+1,___flmul@f2+1
  2168  000814  C0C5  F023         	movff	_F2+2,___flmul@f2+2
  2169  000818  C0C6  F024         	movff	_F2+3,___flmul@f2+3
  2170  00081C  C07A  F01D         	movff	_measure_inductance$1129,___flmul@f1
  2171  000820  C07B  F01E         	movff	_measure_inductance$1129+1,___flmul@f1+1
  2172  000824  C07C  F01F         	movff	_measure_inductance$1129+2,___flmul@f1+2
  2173  000828  C07D  F020         	movff	_measure_inductance$1129+3,___flmul@f1+3
  2174  00082C  ECB3  F008         	call	___flmul	;wreg free
  2175  000830  C01D  F087         	movff	?___flmul,_measure_inductance$1126
  2176  000834  C01E  F088         	movff	?___flmul+1,_measure_inductance$1126+1
  2177  000838  C01F  F089         	movff	?___flmul+2,_measure_inductance$1126+2
  2178  00083C  C020  F08A         	movff	?___flmul+3,_measure_inductance$1126+3
  2179                           
  2180                           ;measure.c: 213: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2181  000840  C0C3  F021         	movff	_F2,___flmul@f2
  2182  000844  C0C4  F022         	movff	_F2+1,___flmul@f2+1
  2183  000848  C0C5  F023         	movff	_F2+2,___flmul@f2+2
  2184  00084C  C0C6  F024         	movff	_F2+3,___flmul@f2+3
  2185  000850  C087  F01D         	movff	_measure_inductance$1126,___flmul@f1
  2186  000854  C088  F01E         	movff	_measure_inductance$1126+1,___flmul@f1+1
  2187  000858  C089  F01F         	movff	_measure_inductance$1126+2,___flmul@f1+2
  2188  00085C  C08A  F020         	movff	_measure_inductance$1126+3,___flmul@f1+3
  2189  000860  ECB3  F008         	call	___flmul	;wreg free
  2190  000864  C01D  F08B         	movff	?___flmul,_measure_inductance$1127
  2191  000868  C01E  F08C         	movff	?___flmul+1,_measure_inductance$1127+1
  2192  00086C  C01F  F08D         	movff	?___flmul+2,_measure_inductance$1127+2
  2193  000870  C020  F08E         	movff	?___flmul+3,_measure_inductance$1127+3
  2194                           
  2195                           ;measure.c: 213: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2196  000874  C0C7  F021         	movff	_F3,___flmul@f2
  2197  000878  C0C8  F022         	movff	_F3+1,___flmul@f2+1
  2198  00087C  C0C9  F023         	movff	_F3+2,___flmul@f2+2
  2199  000880  C0CA  F024         	movff	_F3+3,___flmul@f2+3
  2200  000884  C08B  F01D         	movff	_measure_inductance$1127,___flmul@f1
  2201  000888  C08C  F01E         	movff	_measure_inductance$1127+1,___flmul@f1+1
  2202  00088C  C08D  F01F         	movff	_measure_inductance$1127+2,___flmul@f1+2
  2203  000890  C08E  F020         	movff	_measure_inductance$1127+3,___flmul@f1+3
  2204  000894  ECB3  F008         	call	___flmul	;wreg free
  2205  000898  C01D  F08F         	movff	?___flmul,_measure_inductance$1128
  2206  00089C  C01E  F090         	movff	?___flmul+1,_measure_inductance$1128+1
  2207  0008A0  C01F  F091         	movff	?___flmul+2,_measure_inductance$1128+2
  2208  0008A4  C020  F092         	movff	?___flmul+3,_measure_inductance$1128+3
  2209                           
  2210                           ;measure.c: 213: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2211  0008A8  C0C7  F021         	movff	_F3,___flmul@f2
  2212  0008AC  C0C8  F022         	movff	_F3+1,___flmul@f2+1
  2213  0008B0  C0C9  F023         	movff	_F3+2,___flmul@f2+2
  2214  0008B4  C0CA  F024         	movff	_F3+3,___flmul@f2+3
  2215  0008B8  C08F  F01D         	movff	_measure_inductance$1128,___flmul@f1
  2216  0008BC  C090  F01E         	movff	_measure_inductance$1128+1,___flmul@f1+1
  2217  0008C0  C091  F01F         	movff	_measure_inductance$1128+2,___flmul@f1+2
  2218  0008C4  C092  F020         	movff	_measure_inductance$1128+3,___flmul@f1+3
  2219  0008C8  ECB3  F008         	call	___flmul	;wreg free
  2220  0008CC  C01D  F07E         	movff	?___flmul,_measure_inductance$1130
  2221  0008D0  C01E  F07F         	movff	?___flmul+1,_measure_inductance$1130+1
  2222  0008D4  C01F  F080         	movff	?___flmul+2,_measure_inductance$1130+2
  2223  0008D8  C020  F081         	movff	?___flmul+3,_measure_inductance$1130+3
  2224                           
  2225                           ;measure.c: 213: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2226  0008DC  C0E3  F021         	movff	_CCal,___flmul@f2
  2227  0008E0  C0E4  F022         	movff	_CCal+1,___flmul@f2+1
  2228  0008E4  C0E5  F023         	movff	_CCal+2,___flmul@f2+2
  2229  0008E8  C0E6  F024         	movff	_CCal+3,___flmul@f2+3
  2230  0008EC  C07E  F01D         	movff	_measure_inductance$1130,___flmul@f1
  2231  0008F0  C07F  F01E         	movff	_measure_inductance$1130+1,___flmul@f1+1
  2232  0008F4  C080  F01F         	movff	_measure_inductance$1130+2,___flmul@f1+2
  2233  0008F8  C081  F020         	movff	_measure_inductance$1130+3,___flmul@f1+3
  2234  0008FC  ECB3  F008         	call	___flmul	;wreg free
  2235  000900  C01D  F082         	movff	?___flmul,_measure_inductance$1131
  2236  000904  C01E  F083         	movff	?___flmul+1,_measure_inductance$1131+1
  2237  000908  C01F  F084         	movff	?___flmul+2,_measure_inductance$1131+2
  2238  00090C  C020  F085         	movff	?___flmul+3,_measure_inductance$1131+3
  2239                           
  2240                           ;measure.c: 213: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2241  000910  C082  F01D         	movff	_measure_inductance$1131,___flmul@f1
  2242  000914  C083  F01E         	movff	_measure_inductance$1131+1,___flmul@f1+1
  2243  000918  C084  F01F         	movff	_measure_inductance$1131+2,___flmul@f1+2
  2244  00091C  C085  F020         	movff	_measure_inductance$1131+3,___flmul@f1+3
  2245  000920  0EE6               	movlw	230
  2246  000922  6E21               	movwf	___flmul@f2,c
  2247  000924  0EE9               	movlw	233
  2248  000926  6E22               	movwf	___flmul@f2+1,c
  2249  000928  0E1D               	movlw	29
  2250  00092A  6E23               	movwf	___flmul@f2+2,c
  2251  00092C  0E42               	movlw	66
  2252  00092E  6E24               	movwf	___flmul@f2+3,c
  2253  000930  ECB3  F008         	call	___flmul	;wreg free
  2254  000934  C01D  F072         	movff	?___flmul,measure_inductance@denominator
  2255  000938  C01E  F073         	movff	?___flmul+1,measure_inductance@denominator+1
  2256  00093C  C01F  F074         	movff	?___flmul+2,measure_inductance@denominator+2
  2257  000940  C020  F075         	movff	?___flmul+3,measure_inductance@denominator+3
  2258                           
  2259                           ;measure.c: 214: Lin = (numerator / denominator) * 1e+15l;
  2260  000944  C072  F012         	movff	measure_inductance@denominator,___fldiv@f2
  2261  000948  C073  F013         	movff	measure_inductance@denominator+1,___fldiv@f2+1
  2262  00094C  C074  F014         	movff	measure_inductance@denominator+2,___fldiv@f2+2
  2263  000950  C075  F015         	movff	measure_inductance@denominator+3,___fldiv@f2+3
  2264  000954  C06E  F00E         	movff	measure_inductance@numerator,___fldiv@f1
  2265  000958  C06F  F00F         	movff	measure_inductance@numerator+1,___fldiv@f1+1
  2266  00095C  C070  F010         	movff	measure_inductance@numerator+2,___fldiv@f1+2
  2267  000960  C071  F011         	movff	measure_inductance@numerator+3,___fldiv@f1+3
  2268  000964  EC85  F00F         	call	___fldiv	;wreg free
  2269  000968  C00E  F01D         	movff	?___fldiv,___flmul@f1
  2270  00096C  C00F  F01E         	movff	?___fldiv+1,___flmul@f1+1
  2271  000970  C010  F01F         	movff	?___fldiv+2,___flmul@f1+2
  2272  000974  C011  F020         	movff	?___fldiv+3,___flmul@f1+3
  2273  000978  0EA9               	movlw	169
  2274  00097A  6E21               	movwf	___flmul@f2,c
  2275  00097C  0E5F               	movlw	95
  2276  00097E  6E22               	movwf	___flmul@f2+1,c
  2277  000980  0E63               	movlw	99
  2278  000982  6E23               	movwf	___flmul@f2+2,c
  2279  000984  0E58               	movlw	88
  2280  000986  6E24               	movwf	___flmul@f2+3,c
  2281  000988  ECB3  F008         	call	___flmul	;wreg free
  2282  00098C  C01D  F095         	movff	?___flmul,measure_inductance@Lin
  2283  000990  C01E  F096         	movff	?___flmul+1,measure_inductance@Lin+1
  2284  000994  C01F  F097         	movff	?___flmul+2,measure_inductance@Lin+2
  2285  000998  C020  F098         	movff	?___flmul+3,measure_inductance@Lin+3
  2286                           
  2287                           ;measure.c: 216: if(Lin > 999) {
  2288  00099C  6A04               	clrf	___flge@ff1,c
  2289  00099E  0EC0               	movlw	192
  2290  0009A0  6E05               	movwf	___flge@ff1+1,c
  2291  0009A2  0E79               	movlw	121
  2292  0009A4  6E06               	movwf	___flge@ff1+2,c
  2293  0009A6  0E44               	movlw	68
  2294  0009A8  6E07               	movwf	___flge@ff1+3,c
  2295  0009AA  C095  F008         	movff	measure_inductance@Lin,___flge@ff2
  2296  0009AE  C096  F009         	movff	measure_inductance@Lin+1,___flge@ff2+1
  2297  0009B2  C097  F00A         	movff	measure_inductance@Lin+2,___flge@ff2+2
  2298  0009B6  C098  F00B         	movff	measure_inductance@Lin+3,___flge@ff2+3
  2299  0009BA  EC01  F012         	call	___flge	;wreg free
  2300  0009BE  E27A               	bc	l4624
  2301                           
  2302                           ;measure.c: 217: if(Lin > (999e+03l)) {
  2303  0009C0  0E80               	movlw	128
  2304  0009C2  6E04               	movwf	___flge@ff1,c
  2305  0009C4  0EE5               	movlw	229
  2306  0009C6  6E05               	movwf	___flge@ff1+1,c
  2307  0009C8  0E73               	movlw	115
  2308  0009CA  6E06               	movwf	___flge@ff1+2,c
  2309  0009CC  0E49               	movlw	73
  2310  0009CE  6E07               	movwf	___flge@ff1+3,c
  2311  0009D0  C095  F008         	movff	measure_inductance@Lin,___flge@ff2
  2312  0009D4  C096  F009         	movff	measure_inductance@Lin+1,___flge@ff2+1
  2313  0009D8  C097  F00A         	movff	measure_inductance@Lin+2,___flge@ff2+2
  2314  0009DC  C098  F00B         	movff	measure_inductance@Lin+3,___flge@ff2+3
  2315  0009E0  EC01  F012         	call	___flge	;wreg free
  2316  0009E4  E24C               	bc	l4620
  2317                           
  2318                           ;measure.c: 218: if(Lin > (999e+06l)) {
  2319  0009E6  0E1F               	movlw	31
  2320  0009E8  6E04               	movwf	___flge@ff1,c
  2321  0009EA  0E2E               	movlw	46
  2322  0009EC  6E05               	movwf	___flge@ff1+1,c
  2323  0009EE  0E6E               	movlw	110
  2324  0009F0  6E06               	movwf	___flge@ff1+2,c
  2325  0009F2  0E4E               	movlw	78
  2326  0009F4  6E07               	movwf	___flge@ff1+3,c
  2327  0009F6  C095  F008         	movff	measure_inductance@Lin,___flge@ff2
  2328  0009FA  C096  F009         	movff	measure_inductance@Lin+1,___flge@ff2+1
  2329  0009FE  C097  F00A         	movff	measure_inductance@Lin+2,___flge@ff2+2
  2330  000A02  C098  F00B         	movff	measure_inductance@Lin+3,___flge@ff2+3
  2331  000A06  EC01  F012         	call	___flge	;wreg free
  2332  000A0A  E21D               	bc	l4616
  2333                           
  2334                           ;measure.c: 219: Lin = Lin / (1e+09l);
  2335  000A0C  C095  F00E         	movff	measure_inductance@Lin,___fldiv@f1
  2336  000A10  C096  F00F         	movff	measure_inductance@Lin+1,___fldiv@f1+1
  2337  000A14  C097  F010         	movff	measure_inductance@Lin+2,___fldiv@f1+2
  2338  000A18  C098  F011         	movff	measure_inductance@Lin+3,___fldiv@f1+3
  2339  000A1C  0E28               	movlw	40
  2340  000A1E  6E12               	movwf	___fldiv@f2,c
  2341  000A20  0E6B               	movlw	107
  2342  000A22  6E13               	movwf	___fldiv@f2+1,c
  2343  000A24  0E6E               	movlw	110
  2344  000A26  6E14               	movwf	___fldiv@f2+2,c
  2345  000A28  0E4E               	movlw	78
  2346  000A2A  6E15               	movwf	___fldiv@f2+3,c
  2347  000A2C  EC85  F00F         	call	___fldiv	;wreg free
  2348  000A30  C00E  F095         	movff	?___fldiv,measure_inductance@Lin
  2349  000A34  C00F  F096         	movff	?___fldiv+1,measure_inductance@Lin+1
  2350  000A38  C010  F097         	movff	?___fldiv+2,measure_inductance@Lin+2
  2351  000A3C  C011  F098         	movff	?___fldiv+3,measure_inductance@Lin+3
  2352                           
  2353                           ;measure.c: 220: unit = 0;
  2354  000A40  0100               	movlb	0	; () banked
  2355  000A42  6B86               	clrf	measure_inductance@unit& (0+255),b
  2356                           
  2357                           ;measure.c: 221: } else {
  2358  000A44  D03A               	goto	l4626
  2359  000A46                     l4616:
  2360                           
  2361                           ;measure.c: 222: Lin = Lin / (1e+06l);
  2362  000A46  C095  F00E         	movff	measure_inductance@Lin,___fldiv@f1
  2363  000A4A  C096  F00F         	movff	measure_inductance@Lin+1,___fldiv@f1+1
  2364  000A4E  C097  F010         	movff	measure_inductance@Lin+2,___fldiv@f1+2
  2365  000A52  C098  F011         	movff	measure_inductance@Lin+3,___fldiv@f1+3
  2366  000A56  0E00               	movlw	0
  2367  000A58  6E12               	movwf	___fldiv@f2,c
  2368  000A5A  0E24               	movlw	36
  2369  000A5C  6E13               	movwf	___fldiv@f2+1,c
  2370  000A5E  0E74               	movlw	116
  2371  000A60  6E14               	movwf	___fldiv@f2+2,c
  2372  000A62  0E49               	movlw	73
  2373  000A64  6E15               	movwf	___fldiv@f2+3,c
  2374  000A66  EC85  F00F         	call	___fldiv	;wreg free
  2375  000A6A  C00E  F095         	movff	?___fldiv,measure_inductance@Lin
  2376  000A6E  C00F  F096         	movff	?___fldiv+1,measure_inductance@Lin+1
  2377  000A72  C010  F097         	movff	?___fldiv+2,measure_inductance@Lin+2
  2378  000A76  C011  F098         	movff	?___fldiv+3,measure_inductance@Lin+3
  2379                           
  2380                           ;measure.c: 223: unit = 1;
  2381  000A7A  0E01               	movlw	1
  2382  000A7C  D01C               	goto	L2
  2383  000A7E                     l4620:
  2384                           
  2385                           ;measure.c: 226: Lin = Lin / 1e+03l;
  2386  000A7E  C095  F00E         	movff	measure_inductance@Lin,___fldiv@f1
  2387  000A82  C096  F00F         	movff	measure_inductance@Lin+1,___fldiv@f1+1
  2388  000A86  C097  F010         	movff	measure_inductance@Lin+2,___fldiv@f1+2
  2389  000A8A  C098  F011         	movff	measure_inductance@Lin+3,___fldiv@f1+3
  2390  000A8E  0E00               	movlw	0
  2391  000A90  6E12               	movwf	___fldiv@f2,c
  2392  000A92  6E13               	movwf	___fldiv@f2+1,c
  2393  000A94  0E7A               	movlw	122
  2394  000A96  6E14               	movwf	___fldiv@f2+2,c
  2395  000A98  0E44               	movlw	68
  2396  000A9A  6E15               	movwf	___fldiv@f2+3,c
  2397  000A9C  EC85  F00F         	call	___fldiv	;wreg free
  2398  000AA0  C00E  F095         	movff	?___fldiv,measure_inductance@Lin
  2399  000AA4  C00F  F096         	movff	?___fldiv+1,measure_inductance@Lin+1
  2400  000AA8  C010  F097         	movff	?___fldiv+2,measure_inductance@Lin+2
  2401  000AAC  C011  F098         	movff	?___fldiv+3,measure_inductance@Lin+3
  2402                           
  2403                           ;measure.c: 227: unit = 2;
  2404  000AB0  0E02               	movlw	2
  2405  000AB2  D001               	goto	L2
  2406  000AB4                     l4624:
  2407                           
  2408                           ;measure.c: 230: unit = 3;
  2409  000AB4  0E03               	movlw	3
  2410  000AB6                     L2:
  2411  000AB6  0100               	movlb	0	; () banked
  2412  000AB8  6F86               	movwf	measure_inductance@unit& (0+255),b
  2413  000ABA                     l4626:
  2414                           
  2415                           ; BSR set to: 0
  2416                           ;measure.c: 232: Lin = Lin * 100;
  2417  000ABA  C095  F01D         	movff	measure_inductance@Lin,___flmul@f1
  2418  000ABE  C096  F01E         	movff	measure_inductance@Lin+1,___flmul@f1+1
  2419  000AC2  C097  F01F         	movff	measure_inductance@Lin+2,___flmul@f1+2
  2420  000AC6  C098  F020         	movff	measure_inductance@Lin+3,___flmul@f1+3
  2421  000ACA  0E00               	movlw	0
  2422  000ACC  6E21               	movwf	___flmul@f2,c
  2423  000ACE  6E22               	movwf	___flmul@f2+1,c
  2424  000AD0  0EC8               	movlw	200
  2425  000AD2  6E23               	movwf	___flmul@f2+2,c
  2426  000AD4  0E42               	movlw	66
  2427  000AD6  6E24               	movwf	___flmul@f2+3,c
  2428  000AD8  ECB3  F008         	call	___flmul	;wreg free
  2429  000ADC  C01D  F095         	movff	?___flmul,measure_inductance@Lin
  2430  000AE0  C01E  F096         	movff	?___flmul+1,measure_inductance@Lin+1
  2431  000AE4  C01F  F097         	movff	?___flmul+2,measure_inductance@Lin+2
  2432  000AE8  C020  F098         	movff	?___flmul+3,measure_inductance@Lin+3
  2433                           
  2434                           ;measure.c: 233: var = (uint16_t)Lin;
  2435  000AEC  C095  F064         	movff	measure_inductance@Lin,___fltol@f1
  2436  000AF0  C096  F065         	movff	measure_inductance@Lin+1,___fltol@f1+1
  2437  000AF4  C097  F066         	movff	measure_inductance@Lin+2,___fltol@f1+2
  2438  000AF8  C098  F067         	movff	measure_inductance@Lin+3,___fltol@f1+3
  2439  000AFC  EC82  F010         	call	___fltol	;wreg free
  2440  000B00  C064  F093         	movff	?___fltol,measure_inductance@var
  2441  000B04  C065  F094         	movff	?___fltol+1,measure_inductance@var+1
  2442                           
  2443                           ; BSR set to: 0
  2444                           ;measure.c: 235: print_reading(var);
  2445  000B08  C093  F036         	movff	measure_inductance@var,print_reading@measurement
  2446  000B0C  C094  F037         	movff	measure_inductance@var+1,print_reading@measurement+1
  2447  000B10  EC4E  F011         	call	_print_reading	;wreg free
  2448                           
  2449                           ;measure.c: 236: print_unit(unit);
  2450  000B14  0100               	movlb	0	; () banked
  2451  000B16  5186               	movf	measure_inductance@unit& (0+255),w,b
  2452  000B18  ECB7  F013         	call	_print_unit
  2453  000B1C  0012               	return		;funcret
  2454  000B1E                     __end_of_measure_inductance:
  2455                           	opt stack 0
  2456                           tblptru	equ	0xFF8
  2457                           tblptrh	equ	0xFF7
  2458                           tblptrl	equ	0xFF6
  2459                           tablat	equ	0xFF5
  2460                           intcon	equ	0xFF2
  2461                           intcon2	equ	0xFF1
  2462                           postinc0	equ	0xFEE
  2463                           wreg	equ	0xFE8
  2464                           postdec1	equ	0xFE5
  2465                           fsr1l	equ	0xFE1
  2466                           status	equ	0xFD8
  2467                           
  2468 ;; *************** function _measure_capacitance *****************
  2469 ;; Defined at:
  2470 ;;		line 119 in file "../../../src/measure.c"
  2471 ;; Parameters:    Size  Location     Type
  2472 ;;		None
  2473 ;; Auto vars:     Size  Location     Type
  2474 ;;  Cin             4   15[BANK1 ] unsigned char 
  2475 ;;  var             2   13[BANK1 ] unsigned int 
  2476 ;;  unit            1   12[BANK1 ] unsigned char 
  2477 ;; Return value:  Size  Location     Type
  2478 ;;		None               void
  2479 ;; Registers used:
  2480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2481 ;; Tracked objects:
  2482 ;;		On entry : F/0
  2483 ;;		On exit  : 0/0
  2484 ;;		Unchanged: 0/0
  2485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  2486 ;;      Params:         0       0       0       0
  2487 ;;      Locals:         0       0      19       0
  2488 ;;      Temps:          0       0       0       0
  2489 ;;      Totals:         0       0      19       0
  2490 ;;Total ram usage:       19 bytes
  2491 ;; Hardware stack levels used:    1
  2492 ;; Hardware stack levels required when called:    7
  2493 ;; This function calls:
  2494 ;;		___fldiv
  2495 ;;		___flge
  2496 ;;		___flmul
  2497 ;;		___flsub
  2498 ;;		___fltol
  2499 ;;		___lwtofl
  2500 ;;		_format_double
  2501 ;;		_format_xint32
  2502 ;;		_lcd_gotoxy
  2503 ;;		_measure_freq
  2504 ;;		_print_reading
  2505 ;;		_print_unit
  2506 ;;		_put_str
  2507 ;;		_ser_putch
  2508 ;;		_ser_puts
  2509 ;; This function is called by:
  2510 ;;		_main
  2511 ;; This function uses a non-reentrant model
  2512 ;;
  2513                           
  2514                           	psect	text6
  2515  000B1E                     __ptext6:
  2516                           	opt stack 0
  2517  000B1E                     _measure_capacitance:
  2518                           	opt stack 23
  2519                           
  2520                           ; BSR set to: 0
  2521                           ;measure.c: 120: uint8_t unit;
  2522                           ;measure.c: 121: uint16_t var;
  2523                           ;measure.c: 123: double Cin;
  2524                           ;measure.c: 127: lcd_gotoxy(0, 0);
  2525                           
  2526                           ;incstack = 0
  2527  000B1E  0E00               	movlw	0
  2528  000B20  6A08               	clrf	lcd_gotoxy@row,c
  2529  000B22  ECF3  F012         	call	_lcd_gotoxy
  2530                           
  2531                           ;measure.c: 128: put_str("Capacity ");
  2532  000B26  0E95               	movlw	STR_28& (0+255)
  2533  000B28  EC43  F013         	call	_put_str
  2534                           
  2535                           ;measure.c: 130: var = measure_freq();
  2536  000B2C  EC75  F00D         	call	_measure_freq	;wreg free
  2537  000B30  C036  F12E         	movff	?_measure_freq,measure_capacitance@var
  2538  000B34  C037  F12F         	movff	?_measure_freq+1,measure_capacitance@var+1
  2539                           
  2540                           ;measure.c: 132: F3 = (double)var;
  2541  000B38  C12E  F03B         	movff	measure_capacitance@var,___lwtofl@c
  2542  000B3C  C12F  F03C         	movff	measure_capacitance@var+1,___lwtofl@c+1
  2543  000B40  ECCC  F013         	call	___lwtofl	;wreg free
  2544  000B44  C03B  F0C7         	movff	?___lwtofl,_F3
  2545  000B48  C03C  F0C8         	movff	?___lwtofl+1,_F3+1
  2546  000B4C  C03D  F0C9         	movff	?___lwtofl+2,_F3+2
  2547  000B50  C03E  F0CA         	movff	?___lwtofl+3,_F3+3
  2548                           
  2549                           ;measure.c: 135: ser_puts("var=");
  2550  000B54  0ED5               	movlw	STR_29& (0+255)
  2551  000B56  EC27  F014         	call	_ser_puts
  2552                           
  2553                           ;measure.c: 136: format_xint32(var);
  2554  000B5A  C12E  F036         	movff	measure_capacitance@var,format_xint32@x
  2555  000B5E  C12F  F037         	movff	measure_capacitance@var+1,format_xint32@x+1
  2556  000B62  6A38               	clrf	format_xint32@x+2,c
  2557  000B64  6A39               	clrf	format_xint32@x+3,c
  2558  000B66  EC0F  F013         	call	_format_xint32	;wreg free
  2559                           
  2560                           ;measure.c: 137: ser_puts("\r\nF1=");
  2561  000B6A  0EB8               	movlw	STR_30& (0+255)
  2562  000B6C  EC27  F014         	call	_ser_puts
  2563                           
  2564                           ;measure.c: 138: format_double(F1);
  2565  000B70  C0DF  F09D         	movff	_F1,format_double@num
  2566  000B74  C0E0  F09E         	movff	_F1+1,format_double@num+1
  2567  000B78  C0E1  F09F         	movff	_F1+2,format_double@num+2
  2568  000B7C  C0E2  F0A0         	movff	_F1+3,format_double@num+3
  2569  000B80  EC60  F00A         	call	_format_double	;wreg free
  2570                           
  2571                           ;measure.c: 139: ser_putch(' ');
  2572  000B84  0E20               	movlw	32
  2573  000B86  ECF4  F013         	call	_ser_putch
  2574                           
  2575                           ;measure.c: 140: format_xint32(*(uint32_t*)&F1);
  2576  000B8A  C0DF  F036         	movff	_F1,format_xint32@x
  2577  000B8E  C0E0  F037         	movff	_F1+1,format_xint32@x+1
  2578  000B92  C0E1  F038         	movff	_F1+2,format_xint32@x+2
  2579  000B96  C0E2  F039         	movff	_F1+3,format_xint32@x+3
  2580  000B9A  EC0F  F013         	call	_format_xint32	;wreg free
  2581                           
  2582                           ;measure.c: 141: ser_puts("\r\nF2=");
  2583  000B9E  0EBE               	movlw	STR_31& (0+255)
  2584  000BA0  EC27  F014         	call	_ser_puts
  2585                           
  2586                           ;measure.c: 142: format_double(F2);
  2587  000BA4  C0C3  F09D         	movff	_F2,format_double@num
  2588  000BA8  C0C4  F09E         	movff	_F2+1,format_double@num+1
  2589  000BAC  C0C5  F09F         	movff	_F2+2,format_double@num+2
  2590  000BB0  C0C6  F0A0         	movff	_F2+3,format_double@num+3
  2591  000BB4  EC60  F00A         	call	_format_double	;wreg free
  2592                           
  2593                           ;measure.c: 143: ser_putch(' ');
  2594  000BB8  0E20               	movlw	32
  2595  000BBA  ECF4  F013         	call	_ser_putch
  2596                           
  2597                           ;measure.c: 144: format_xint32(*(uint32_t*)&F2);
  2598  000BBE  C0C3  F036         	movff	_F2,format_xint32@x
  2599  000BC2  C0C4  F037         	movff	_F2+1,format_xint32@x+1
  2600  000BC6  C0C5  F038         	movff	_F2+2,format_xint32@x+2
  2601  000BCA  C0C6  F039         	movff	_F2+3,format_xint32@x+3
  2602  000BCE  EC0F  F013         	call	_format_xint32	;wreg free
  2603                           
  2604                           ;measure.c: 145: ser_puts("\r\nF3=");
  2605  000BD2  0EC4               	movlw	STR_32& (0+255)
  2606  000BD4  EC27  F014         	call	_ser_puts
  2607                           
  2608                           ;measure.c: 146: format_double(F3);
  2609  000BD8  C0C7  F09D         	movff	_F3,format_double@num
  2610  000BDC  C0C8  F09E         	movff	_F3+1,format_double@num+1
  2611  000BE0  C0C9  F09F         	movff	_F3+2,format_double@num+2
  2612  000BE4  C0CA  F0A0         	movff	_F3+3,format_double@num+3
  2613  000BE8  EC60  F00A         	call	_format_double	;wreg free
  2614                           
  2615                           ;measure.c: 147: ser_putch(' ');
  2616  000BEC  0E20               	movlw	32
  2617  000BEE  ECF4  F013         	call	_ser_putch
  2618                           
  2619                           ;measure.c: 148: format_xint32(*(uint32_t*)&F3);
  2620  000BF2  C0C7  F036         	movff	_F3,format_xint32@x
  2621  000BF6  C0C8  F037         	movff	_F3+1,format_xint32@x+1
  2622  000BFA  C0C9  F038         	movff	_F3+2,format_xint32@x+2
  2623  000BFE  C0CA  F039         	movff	_F3+3,format_xint32@x+3
  2624  000C02  EC0F  F013         	call	_format_xint32	;wreg free
  2625                           
  2626                           ;measure.c: 149: ser_puts("\r\nCCal=");
  2627  000C06  0EA9               	movlw	STR_33& (0+255)
  2628  000C08  EC27  F014         	call	_ser_puts
  2629                           
  2630                           ;measure.c: 150: format_double(CCal);
  2631  000C0C  C0E3  F09D         	movff	_CCal,format_double@num
  2632  000C10  C0E4  F09E         	movff	_CCal+1,format_double@num+1
  2633  000C14  C0E5  F09F         	movff	_CCal+2,format_double@num+2
  2634  000C18  C0E6  F0A0         	movff	_CCal+3,format_double@num+3
  2635  000C1C  EC60  F00A         	call	_format_double	;wreg free
  2636                           
  2637                           ;measure.c: 151: ser_putch(' ');
  2638  000C20  0E20               	movlw	32
  2639  000C22  ECF4  F013         	call	_ser_putch
  2640                           
  2641                           ;measure.c: 152: format_xint32(*(uint32_t*)&CCal);
  2642  000C26  C0E3  F036         	movff	_CCal,format_xint32@x
  2643  000C2A  C0E4  F037         	movff	_CCal+1,format_xint32@x+1
  2644  000C2E  C0E5  F038         	movff	_CCal+2,format_xint32@x+2
  2645  000C32  C0E6  F039         	movff	_CCal+3,format_xint32@x+3
  2646  000C36  EC0F  F013         	call	_format_xint32	;wreg free
  2647                           
  2648                           ;measure.c: 153: ser_puts("\r\n");
  2649  000C3A  0EE3               	movlw	STR_9& (0+255)
  2650  000C3C  EC27  F014         	call	_ser_puts
  2651                           
  2652                           ;measure.c: 157: if(F3 > F1)
  2653  000C40  C0DF  F004         	movff	_F1,___flge@ff1
  2654  000C44  C0E0  F005         	movff	_F1+1,___flge@ff1+1
  2655  000C48  C0E1  F006         	movff	_F1+2,___flge@ff1+2
  2656  000C4C  C0E2  F007         	movff	_F1+3,___flge@ff1+3
  2657  000C50  C0C7  F008         	movff	_F3,___flge@ff2
  2658  000C54  C0C8  F009         	movff	_F3+1,___flge@ff2+1
  2659  000C58  C0C9  F00A         	movff	_F3+2,___flge@ff2+2
  2660  000C5C  C0CA  F00B         	movff	_F3+3,___flge@ff2+3
  2661  000C60  EC01  F012         	call	___flge	;wreg free
  2662  000C64  E208               	bc	l4534
  2663                           
  2664                           ;measure.c: 158: F3 = F1;
  2665  000C66  C0DF  F0C7         	movff	_F1,_F3
  2666  000C6A  C0E0  F0C8         	movff	_F1+1,_F3+1
  2667  000C6E  C0E1  F0C9         	movff	_F1+2,_F3+2
  2668  000C72  C0E2  F0CA         	movff	_F1+3,_F3+3
  2669  000C76                     l4534:
  2670                           
  2671                           ;measure.c: 160: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2672  000C76  C0C7  F021         	movff	_F3,___flmul@f2
  2673  000C7A  C0C8  F022         	movff	_F3+1,___flmul@f2+1
  2674  000C7E  C0C9  F023         	movff	_F3+2,___flmul@f2+2
  2675  000C82  C0CA  F024         	movff	_F3+3,___flmul@f2+3
  2676  000C86  C0C7  F01D         	movff	_F3,___flmul@f1
  2677  000C8A  C0C8  F01E         	movff	_F3+1,___flmul@f1+1
  2678  000C8E  C0C9  F01F         	movff	_F3+2,___flmul@f1+2
  2679  000C92  C0CA  F020         	movff	_F3+3,___flmul@f1+3
  2680  000C96  ECB3  F008         	call	___flmul	;wreg free
  2681  000C9A  C01D  F048         	movff	?___flmul,___flsub@f2
  2682  000C9E  C01E  F049         	movff	?___flmul+1,___flsub@f2+1
  2683  000CA2  C01F  F04A         	movff	?___flmul+2,___flsub@f2+2
  2684  000CA6  C020  F04B         	movff	?___flmul+3,___flsub@f2+3
  2685  000CAA  C0DF  F021         	movff	_F1,___flmul@f2
  2686  000CAE  C0E0  F022         	movff	_F1+1,___flmul@f2+1
  2687  000CB2  C0E1  F023         	movff	_F1+2,___flmul@f2+2
  2688  000CB6  C0E2  F024         	movff	_F1+3,___flmul@f2+3
  2689  000CBA  C0DF  F01D         	movff	_F1,___flmul@f1
  2690  000CBE  C0E0  F01E         	movff	_F1+1,___flmul@f1+1
  2691  000CC2  C0E1  F01F         	movff	_F1+2,___flmul@f1+2
  2692  000CC6  C0E2  F020         	movff	_F1+3,___flmul@f1+3
  2693  000CCA  ECB3  F008         	call	___flmul	;wreg free
  2694  000CCE  C01D  F044         	movff	?___flmul,___flsub@f1
  2695  000CD2  C01E  F045         	movff	?___flmul+1,___flsub@f1+1
  2696  000CD6  C01F  F046         	movff	?___flmul+2,___flsub@f1+2
  2697  000CDA  C020  F047         	movff	?___flmul+3,___flsub@f1+3
  2698  000CDE  EC95  F012         	call	___flsub	;wreg free
  2699  000CE2  C044  F121         	movff	?___flsub,_measure_capacitance$1122
  2700  000CE6  C045  F122         	movff	?___flsub+1,_measure_capacitance$1122+1
  2701  000CEA  C046  F123         	movff	?___flsub+2,_measure_capacitance$1122+2
  2702  000CEE  C047  F124         	movff	?___flsub+3,_measure_capacitance$1122+3
  2703                           
  2704                           ;measure.c: 160: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2705  000CF2  C0C3  F021         	movff	_F2,___flmul@f2
  2706  000CF6  C0C4  F022         	movff	_F2+1,___flmul@f2+1
  2707  000CFA  C0C5  F023         	movff	_F2+2,___flmul@f2+2
  2708  000CFE  C0C6  F024         	movff	_F2+3,___flmul@f2+3
  2709  000D02  C121  F01D         	movff	_measure_capacitance$1122,___flmul@f1
  2710  000D06  C122  F01E         	movff	_measure_capacitance$1122+1,___flmul@f1+1
  2711  000D0A  C123  F01F         	movff	_measure_capacitance$1122+2,___flmul@f1+2
  2712  000D0E  C124  F020         	movff	_measure_capacitance$1122+3,___flmul@f1+3
  2713  000D12  ECB3  F008         	call	___flmul	;wreg free
  2714  000D16  C01D  F125         	movff	?___flmul,_measure_capacitance$1123
  2715  000D1A  C01E  F126         	movff	?___flmul+1,_measure_capacitance$1123+1
  2716  000D1E  C01F  F127         	movff	?___flmul+2,_measure_capacitance$1123+2
  2717  000D22  C020  F128         	movff	?___flmul+3,_measure_capacitance$1123+3
  2718                           
  2719                           ;measure.c: 160: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2720  000D26  C0C3  F021         	movff	_F2,___flmul@f2
  2721  000D2A  C0C4  F022         	movff	_F2+1,___flmul@f2+1
  2722  000D2E  C0C5  F023         	movff	_F2+2,___flmul@f2+2
  2723  000D32  C0C6  F024         	movff	_F2+3,___flmul@f2+3
  2724  000D36  C125  F01D         	movff	_measure_capacitance$1123,___flmul@f1
  2725  000D3A  C126  F01E         	movff	_measure_capacitance$1123+1,___flmul@f1+1
  2726  000D3E  C127  F01F         	movff	_measure_capacitance$1123+2,___flmul@f1+2
  2727  000D42  C128  F020         	movff	_measure_capacitance$1123+3,___flmul@f1+3
  2728  000D46  ECB3  F008         	call	___flmul	;wreg free
  2729  000D4A  C01D  F129         	movff	?___flmul,_measure_capacitance$1124
  2730  000D4E  C01E  F12A         	movff	?___flmul+1,_measure_capacitance$1124+1
  2731  000D52  C01F  F12B         	movff	?___flmul+2,_measure_capacitance$1124+2
  2732  000D56  C020  F12C         	movff	?___flmul+3,_measure_capacitance$1124+3
  2733                           
  2734                           ;measure.c: 160: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2735  000D5A  C129  F01D         	movff	_measure_capacitance$1124,___flmul@f1
  2736  000D5E  C12A  F01E         	movff	_measure_capacitance$1124+1,___flmul@f1+1
  2737  000D62  C12B  F01F         	movff	_measure_capacitance$1124+2,___flmul@f1+2
  2738  000D66  C12C  F020         	movff	_measure_capacitance$1124+3,___flmul@f1+3
  2739  000D6A  C0E3  F021         	movff	_CCal,___flmul@f2
  2740  000D6E  C0E4  F022         	movff	_CCal+1,___flmul@f2+1
  2741  000D72  C0E5  F023         	movff	_CCal+2,___flmul@f2+2
  2742  000D76  C0E6  F024         	movff	_CCal+3,___flmul@f2+3
  2743  000D7A  ECB3  F008         	call	___flmul	;wreg free
  2744  000D7E  C01D  F130         	movff	?___flmul,measure_capacitance@Cin
  2745  000D82  C01E  F131         	movff	?___flmul+1,measure_capacitance@Cin+1
  2746  000D86  C01F  F132         	movff	?___flmul+2,measure_capacitance@Cin+2
  2747  000D8A  C020  F133         	movff	?___flmul+3,measure_capacitance@Cin+3
  2748                           
  2749                           ;measure.c: 164: ser_puts("Cin=");
  2750  000D8E  0ED0               	movlw	STR_35& (0+255)
  2751  000D90  EC27  F014         	call	_ser_puts
  2752                           
  2753                           ;measure.c: 165: format_double(Cin);
  2754  000D94  C130  F09D         	movff	measure_capacitance@Cin,format_double@num
  2755  000D98  C131  F09E         	movff	measure_capacitance@Cin+1,format_double@num+1
  2756  000D9C  C132  F09F         	movff	measure_capacitance@Cin+2,format_double@num+2
  2757  000DA0  C133  F0A0         	movff	measure_capacitance@Cin+3,format_double@num+3
  2758  000DA4  EC60  F00A         	call	_format_double	;wreg free
  2759                           
  2760                           ;measure.c: 166: ser_putch(' ');
  2761  000DA8  0E20               	movlw	32
  2762  000DAA  ECF4  F013         	call	_ser_putch
  2763                           
  2764                           ;measure.c: 167: format_xint32(*(uint32_t*)&Cin);
  2765  000DAE  C130  F036         	movff	measure_capacitance@Cin,format_xint32@x
  2766  000DB2  C131  F037         	movff	measure_capacitance@Cin+1,format_xint32@x+1
  2767  000DB6  C132  F038         	movff	measure_capacitance@Cin+2,format_xint32@x+2
  2768  000DBA  C133  F039         	movff	measure_capacitance@Cin+3,format_xint32@x+3
  2769  000DBE  EC0F  F013         	call	_format_xint32	;wreg free
  2770                           
  2771                           ;measure.c: 168: ser_puts("\r\n");
  2772  000DC2  0EE3               	movlw	STR_9& (0+255)
  2773  000DC4  EC27  F014         	call	_ser_puts
  2774                           
  2775                           ;measure.c: 170: if(Cin > 999) {
  2776  000DC8  6A04               	clrf	___flge@ff1,c
  2777  000DCA  0EC0               	movlw	192
  2778  000DCC  6E05               	movwf	___flge@ff1+1,c
  2779  000DCE  0E79               	movlw	121
  2780  000DD0  6E06               	movwf	___flge@ff1+2,c
  2781  000DD2  0E44               	movlw	68
  2782  000DD4  6E07               	movwf	___flge@ff1+3,c
  2783  000DD6  C130  F008         	movff	measure_capacitance@Cin,___flge@ff2
  2784  000DDA  C131  F009         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2785  000DDE  C132  F00A         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2786  000DE2  C133  F00B         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2787  000DE6  EC01  F012         	call	___flge	;wreg free
  2788  000DEA  E279               	bc	l4560
  2789                           
  2790                           ;measure.c: 171: if(Cin > (999e+03l)) {
  2791  000DEC  0E80               	movlw	128
  2792  000DEE  6E04               	movwf	___flge@ff1,c
  2793  000DF0  0EE5               	movlw	229
  2794  000DF2  6E05               	movwf	___flge@ff1+1,c
  2795  000DF4  0E73               	movlw	115
  2796  000DF6  6E06               	movwf	___flge@ff1+2,c
  2797  000DF8  0E49               	movlw	73
  2798  000DFA  6E07               	movwf	___flge@ff1+3,c
  2799  000DFC  C130  F008         	movff	measure_capacitance@Cin,___flge@ff2
  2800  000E00  C131  F009         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2801  000E04  C132  F00A         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2802  000E08  C133  F00B         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2803  000E0C  EC01  F012         	call	___flge	;wreg free
  2804  000E10  E24B               	bc	l4556
  2805                           
  2806                           ;measure.c: 172: if(Cin > (999e+06l)) {
  2807  000E12  0E1F               	movlw	31
  2808  000E14  6E04               	movwf	___flge@ff1,c
  2809  000E16  0E2E               	movlw	46
  2810  000E18  6E05               	movwf	___flge@ff1+1,c
  2811  000E1A  0E6E               	movlw	110
  2812  000E1C  6E06               	movwf	___flge@ff1+2,c
  2813  000E1E  0E4E               	movlw	78
  2814  000E20  6E07               	movwf	___flge@ff1+3,c
  2815  000E22  C130  F008         	movff	measure_capacitance@Cin,___flge@ff2
  2816  000E26  C131  F009         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2817  000E2A  C132  F00A         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2818  000E2E  C133  F00B         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2819  000E32  EC01  F012         	call	___flge	;wreg free
  2820  000E36  E21C               	bc	l4552
  2821                           
  2822                           ;measure.c: 173: Cin = Cin / (1e+09);
  2823  000E38  C130  F00E         	movff	measure_capacitance@Cin,___fldiv@f1
  2824  000E3C  C131  F00F         	movff	measure_capacitance@Cin+1,___fldiv@f1+1
  2825  000E40  C132  F010         	movff	measure_capacitance@Cin+2,___fldiv@f1+2
  2826  000E44  C133  F011         	movff	measure_capacitance@Cin+3,___fldiv@f1+3
  2827  000E48  0E28               	movlw	40
  2828  000E4A  6E12               	movwf	___fldiv@f2,c
  2829  000E4C  0E6B               	movlw	107
  2830  000E4E  6E13               	movwf	___fldiv@f2+1,c
  2831  000E50  0E6E               	movlw	110
  2832  000E52  6E14               	movwf	___fldiv@f2+2,c
  2833  000E54  0E4E               	movlw	78
  2834  000E56  6E15               	movwf	___fldiv@f2+3,c
  2835  000E58  EC85  F00F         	call	___fldiv	;wreg free
  2836  000E5C  C00E  F130         	movff	?___fldiv,measure_capacitance@Cin
  2837  000E60  C00F  F131         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2838  000E64  C010  F132         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2839  000E68  C011  F133         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2840                           
  2841                           ;measure.c: 174: unit = 4;
  2842  000E6C  0E04               	movlw	4
  2843  000E6E  D038               	goto	L3
  2844  000E70                     l4552:
  2845                           
  2846                           ;measure.c: 176: Cin = Cin / (1e+06);
  2847  000E70  C130  F00E         	movff	measure_capacitance@Cin,___fldiv@f1
  2848  000E74  C131  F00F         	movff	measure_capacitance@Cin+1,___fldiv@f1+1
  2849  000E78  C132  F010         	movff	measure_capacitance@Cin+2,___fldiv@f1+2
  2850  000E7C  C133  F011         	movff	measure_capacitance@Cin+3,___fldiv@f1+3
  2851  000E80  0E00               	movlw	0
  2852  000E82  6E12               	movwf	___fldiv@f2,c
  2853  000E84  0E24               	movlw	36
  2854  000E86  6E13               	movwf	___fldiv@f2+1,c
  2855  000E88  0E74               	movlw	116
  2856  000E8A  6E14               	movwf	___fldiv@f2+2,c
  2857  000E8C  0E49               	movlw	73
  2858  000E8E  6E15               	movwf	___fldiv@f2+3,c
  2859  000E90  EC85  F00F         	call	___fldiv	;wreg free
  2860  000E94  C00E  F130         	movff	?___fldiv,measure_capacitance@Cin
  2861  000E98  C00F  F131         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2862  000E9C  C010  F132         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2863  000EA0  C011  F133         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2864                           
  2865                           ;measure.c: 177: unit = 5;
  2866  000EA4  0E05               	movlw	5
  2867  000EA6  D01C               	goto	L3
  2868  000EA8                     l4556:
  2869                           
  2870                           ;measure.c: 180: Cin = Cin / 1e+03;
  2871  000EA8  C130  F00E         	movff	measure_capacitance@Cin,___fldiv@f1
  2872  000EAC  C131  F00F         	movff	measure_capacitance@Cin+1,___fldiv@f1+1
  2873  000EB0  C132  F010         	movff	measure_capacitance@Cin+2,___fldiv@f1+2
  2874  000EB4  C133  F011         	movff	measure_capacitance@Cin+3,___fldiv@f1+3
  2875  000EB8  0E00               	movlw	0
  2876  000EBA  6E12               	movwf	___fldiv@f2,c
  2877  000EBC  6E13               	movwf	___fldiv@f2+1,c
  2878  000EBE  0E7A               	movlw	122
  2879  000EC0  6E14               	movwf	___fldiv@f2+2,c
  2880  000EC2  0E44               	movlw	68
  2881  000EC4  6E15               	movwf	___fldiv@f2+3,c
  2882  000EC6  EC85  F00F         	call	___fldiv	;wreg free
  2883  000ECA  C00E  F130         	movff	?___fldiv,measure_capacitance@Cin
  2884  000ECE  C00F  F131         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2885  000ED2  C010  F132         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2886  000ED6  C011  F133         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2887                           
  2888                           ;measure.c: 181: unit = 6;
  2889  000EDA  0E06               	movlw	6
  2890  000EDC  D001               	goto	L3
  2891  000EDE                     l4560:
  2892                           
  2893                           ;measure.c: 184: unit = 7;
  2894  000EDE  0E07               	movlw	7
  2895  000EE0                     L3:
  2896  000EE0  0101               	movlb	1	; () banked
  2897  000EE2  6F2D               	movwf	measure_capacitance@unit& (0+255),b
  2898                           
  2899                           ; BSR set to: 1
  2900                           ;measure.c: 186: Cin = Cin * 100;
  2901  000EE4  C130  F01D         	movff	measure_capacitance@Cin,___flmul@f1
  2902  000EE8  C131  F01E         	movff	measure_capacitance@Cin+1,___flmul@f1+1
  2903  000EEC  C132  F01F         	movff	measure_capacitance@Cin+2,___flmul@f1+2
  2904  000EF0  C133  F020         	movff	measure_capacitance@Cin+3,___flmul@f1+3
  2905  000EF4  0E00               	movlw	0
  2906  000EF6  6E21               	movwf	___flmul@f2,c
  2907  000EF8  6E22               	movwf	___flmul@f2+1,c
  2908  000EFA  0EC8               	movlw	200
  2909  000EFC  6E23               	movwf	___flmul@f2+2,c
  2910  000EFE  0E42               	movlw	66
  2911  000F00  6E24               	movwf	___flmul@f2+3,c
  2912  000F02  ECB3  F008         	call	___flmul	;wreg free
  2913  000F06  C01D  F130         	movff	?___flmul,measure_capacitance@Cin
  2914  000F0A  C01E  F131         	movff	?___flmul+1,measure_capacitance@Cin+1
  2915  000F0E  C01F  F132         	movff	?___flmul+2,measure_capacitance@Cin+2
  2916  000F12  C020  F133         	movff	?___flmul+3,measure_capacitance@Cin+3
  2917                           
  2918                           ;measure.c: 187: var = (uint16_t)Cin;
  2919  000F16  C130  F064         	movff	measure_capacitance@Cin,___fltol@f1
  2920  000F1A  C131  F065         	movff	measure_capacitance@Cin+1,___fltol@f1+1
  2921  000F1E  C132  F066         	movff	measure_capacitance@Cin+2,___fltol@f1+2
  2922  000F22  C133  F067         	movff	measure_capacitance@Cin+3,___fltol@f1+3
  2923  000F26  EC82  F010         	call	___fltol	;wreg free
  2924  000F2A  C064  F12E         	movff	?___fltol,measure_capacitance@var
  2925  000F2E  C065  F12F         	movff	?___fltol+1,measure_capacitance@var+1
  2926                           
  2927                           ; BSR set to: 0
  2928                           ;measure.c: 189: print_reading(var);
  2929  000F32  C12E  F036         	movff	measure_capacitance@var,print_reading@measurement
  2930  000F36  C12F  F037         	movff	measure_capacitance@var+1,print_reading@measurement+1
  2931  000F3A  EC4E  F011         	call	_print_reading	;wreg free
  2932                           
  2933                           ;measure.c: 190: print_unit(unit);
  2934  000F3E  0101               	movlb	1	; () banked
  2935  000F40  512D               	movf	measure_capacitance@unit& (0+255),w,b
  2936  000F42  ECB7  F013         	call	_print_unit
  2937  000F46  0012               	return		;funcret
  2938  000F48                     __end_of_measure_capacitance:
  2939                           	opt stack 0
  2940                           tblptru	equ	0xFF8
  2941                           tblptrh	equ	0xFF7
  2942                           tblptrl	equ	0xFF6
  2943                           tablat	equ	0xFF5
  2944                           intcon	equ	0xFF2
  2945                           intcon2	equ	0xFF1
  2946                           postinc0	equ	0xFEE
  2947                           wreg	equ	0xFE8
  2948                           postdec1	equ	0xFE5
  2949                           fsr1l	equ	0xFE1
  2950                           status	equ	0xFD8
  2951                           
  2952 ;; *************** function _print_unit *****************
  2953 ;; Defined at:
  2954 ;;		line 123 in file "../../../src/print.c"
  2955 ;; Parameters:    Size  Location     Type
  2956 ;;  unit            1    wreg     unsigned char 
  2957 ;; Auto vars:     Size  Location     Type
  2958 ;;  unit            1    0[COMRAM] unsigned char 
  2959 ;; Return value:  Size  Location     Type
  2960 ;;		None               void
  2961 ;; Registers used:
  2962 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2963 ;; Tracked objects:
  2964 ;;		On entry : E/0
  2965 ;;		On exit  : 0/0
  2966 ;;		Unchanged: 0/0
  2967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  2968 ;;      Params:         0       0       0       0
  2969 ;;      Locals:         0       0       0       0
  2970 ;;      Temps:          2       0       0       0
  2971 ;;      Totals:         2       0       0       0
  2972 ;;Total ram usage:        2 bytes
  2973 ;; Hardware stack levels used:    1
  2974 ;; Hardware stack levels required when called:    5
  2975 ;; This function calls:
  2976 ;;		_lcd_gotoxy
  2977 ;;		_ser_puts
  2978 ;; This function is called by:
  2979 ;;		_measure_capacitance
  2980 ;;		_measure_inductance
  2981 ;; This function uses a non-reentrant model
  2982 ;;
  2983                           
  2984                           	psect	text7
  2985  00276E                     __ptext7:
  2986                           	opt stack 0
  2987  00276E                     _print_unit:
  2988                           	opt stack 24
  2989                           
  2990                           ;print.c: 131: static const char* units[8] = {"H", "mH", "uH", "nH", "mF", "uF", "nF", "
      +                          pF"};
  2991                           ;print.c: 132: lcd_gotoxy(14, 0);
  2992                           
  2993                           ;incstack = 0
  2994  00276E  6A08               	clrf	lcd_gotoxy@row,c
  2995  002770  0E0E               	movlw	14
  2996  002772  ECF3  F012         	call	_lcd_gotoxy
  2997                           
  2998                           ;print.c: 136: lcd_gotoxy(16 - (buffer.n - buffer.p), 0);
  2999  002776  6A08               	clrf	lcd_gotoxy@row,c
  3000  002778  0101               	movlb	1	; () banked
  3001  00277A  3920               	swapf	(_buffer+16)& (0+255),w,b
  3002  00277C  0B0F               	andlw	15
  3003  00277E  6E0E               	movwf	??_print_unit& (0+255),c
  3004  002780  5120               	movf	(_buffer+16)& (0+255),w,b
  3005  002782  0B0F               	andlw	15
  3006  002784  6E0F               	movwf	(??_print_unit+1)& (0+255),c
  3007  002786  500E               	movf	??_print_unit,w,c
  3008  002788  5C0F               	subwf	??_print_unit+1,w,c
  3009  00278A  0F10               	addlw	16
  3010  00278C  ECF3  F012         	call	_lcd_gotoxy
  3011                           
  3012                           ;print.c: 139: ser_puts("\r\n");
  3013  002790  0EE3               	movlw	STR_9& (0+255)
  3014  002792  EC27  F014         	call	_ser_puts
  3015  002796  0012               	return		;funcret
  3016  002798                     __end_of_print_unit:
  3017                           	opt stack 0
  3018                           tblptru	equ	0xFF8
  3019                           tblptrh	equ	0xFF7
  3020                           tblptrl	equ	0xFF6
  3021                           tablat	equ	0xFF5
  3022                           intcon	equ	0xFF2
  3023                           intcon2	equ	0xFF1
  3024                           postinc0	equ	0xFEE
  3025                           wreg	equ	0xFE8
  3026                           postdec1	equ	0xFE5
  3027                           fsr1l	equ	0xFE1
  3028                           status	equ	0xFD8
  3029                           
  3030 ;; *************** function _print_reading *****************
  3031 ;; Defined at:
  3032 ;;		line 144 in file "../../../src/print.c"
  3033 ;; Parameters:    Size  Location     Type
  3034 ;;  measurement     2   53[COMRAM] unsigned int 
  3035 ;; Auto vars:     Size  Location     Type
  3036 ;;		None
  3037 ;; Return value:  Size  Location     Type
  3038 ;;		None               void
  3039 ;; Registers used:
  3040 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3041 ;; Tracked objects:
  3042 ;;		On entry : F/0
  3043 ;;		On exit  : 0/0
  3044 ;;		Unchanged: 0/0
  3045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  3046 ;;      Params:         2       0       0       0
  3047 ;;      Locals:         4       0       0       0
  3048 ;;      Temps:          0       0       0       0
  3049 ;;      Totals:         6       0       0       0
  3050 ;;Total ram usage:        6 bytes
  3051 ;; Hardware stack levels used:    1
  3052 ;; Hardware stack levels required when called:    5
  3053 ;; This function calls:
  3054 ;;		___lwdiv
  3055 ;;		___lwmod
  3056 ;;		_format_number
  3057 ;;		_lcd_gotoxy
  3058 ;;		_lcd_puts
  3059 ;; This function is called by:
  3060 ;;		_measure_capacitance
  3061 ;;		_measure_inductance
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065                           	psect	text8
  3066  00229C                     __ptext8:
  3067                           	opt stack 0
  3068  00229C                     _print_reading:
  3069                           	opt stack 24
  3070                           
  3071                           ; BSR set to: 0
  3072                           ;print.c: 171: lcd_gotoxy(9, 0);
  3073                           
  3074                           ;incstack = 0
  3075  00229C  6A08               	clrf	lcd_gotoxy@row,c
  3076  00229E  0E09               	movlw	9
  3077  0022A0  ECF3  F012         	call	_lcd_gotoxy
  3078                           
  3079                           ;print.c: 172: lcd_puts("     ");
  3080  0022A4  0EB2               	movlw	(STR_18+1)& (0+255)
  3081  0022A6  EC2A  F013         	call	_lcd_puts
  3082                           
  3083                           ;print.c: 173: lcd_gotoxy(9, 0);
  3084  0022AA  6A08               	clrf	lcd_gotoxy@row,c
  3085  0022AC  0E09               	movlw	9
  3086  0022AE  ECF3  F012         	call	_lcd_gotoxy
  3087                           
  3088                           ;print.c: 175: format_number(measurement / 100, 10, 0);
  3089  0022B2  C036  F004         	movff	print_reading@measurement,___lwdiv@dividend
  3090  0022B6  C037  F005         	movff	print_reading@measurement+1,___lwdiv@dividend+1
  3091  0022BA  6A07               	clrf	___lwdiv@divisor+1,c
  3092  0022BC  0E64               	movlw	100
  3093  0022BE  6E06               	movwf	___lwdiv@divisor,c
  3094  0022C0  EC4C  F012         	call	___lwdiv	;wreg free
  3095  0022C4  C004  F038         	movff	?___lwdiv,_print_reading$1116
  3096  0022C8  C005  F039         	movff	?___lwdiv+1,_print_reading$1116+1
  3097                           
  3098                           ;print.c: 175: format_number(measurement / 100, 10, 0);
  3099  0022CC  C038  F00B         	movff	_print_reading$1116,format_number@n
  3100  0022D0  C039  F00C         	movff	_print_reading$1116+1,format_number@n+1
  3101  0022D4  0E0A               	movlw	10
  3102  0022D6  6E0D               	movwf	format_number@base,c
  3103  0022D8  6A0E               	clrf	format_number@pad,c
  3104  0022DA  ECDD  F00F         	call	_format_number	;wreg free
  3105                           
  3106                           ;print.c: 177: format_number(measurement % 100, 10, 0);
  3107  0022DE  C036  F004         	movff	print_reading@measurement,___lwmod@dividend
  3108  0022E2  C037  F005         	movff	print_reading@measurement+1,___lwmod@dividend+1
  3109  0022E6  6A07               	clrf	___lwmod@divisor+1,c
  3110  0022E8  0E64               	movlw	100
  3111  0022EA  6E06               	movwf	___lwmod@divisor,c
  3112  0022EC  ECB7  F012         	call	___lwmod	;wreg free
  3113  0022F0  C004  F03A         	movff	?___lwmod,_print_reading$1117
  3114  0022F4  C005  F03B         	movff	?___lwmod+1,_print_reading$1117+1
  3115                           
  3116                           ;print.c: 177: format_number(measurement % 100, 10, 0);
  3117  0022F8  C03A  F00B         	movff	_print_reading$1117,format_number@n
  3118  0022FC  C03B  F00C         	movff	_print_reading$1117+1,format_number@n+1
  3119  002300  0E0A               	movlw	10
  3120  002302  6E0D               	movwf	format_number@base,c
  3121  002304  6A0E               	clrf	format_number@pad,c
  3122  002306  ECDD  F00F         	call	_format_number	;wreg free
  3123  00230A  0012               	return		;funcret
  3124  00230C                     __end_of_print_reading:
  3125                           	opt stack 0
  3126                           tblptru	equ	0xFF8
  3127                           tblptrh	equ	0xFF7
  3128                           tblptrl	equ	0xFF6
  3129                           tablat	equ	0xFF5
  3130                           intcon	equ	0xFF2
  3131                           intcon2	equ	0xFF1
  3132                           postinc0	equ	0xFEE
  3133                           wreg	equ	0xFE8
  3134                           postdec1	equ	0xFE5
  3135                           fsr1l	equ	0xFE1
  3136                           status	equ	0xFD8
  3137                           
  3138 ;; *************** function _lcd_puts *****************
  3139 ;; Defined at:
  3140 ;;		line 163 in file "../../../lib/lcd44780.c"
  3141 ;; Parameters:    Size  Location     Type
  3142 ;;  string          1    wreg     PTR const unsigned char 
  3143 ;;		 -> STR_21(5), STR_20(6), STR_19(7), STR_18(7), 
  3144 ;;		 -> STR_14(10), STR_12(4), STR_11(4), STR_10(6), 
  3145 ;; Auto vars:     Size  Location     Type
  3146 ;;  string          1    8[COMRAM] PTR const unsigned char 
  3147 ;;		 -> STR_21(5), STR_20(6), STR_19(7), STR_18(7), 
  3148 ;;		 -> STR_14(10), STR_12(4), STR_11(4), STR_10(6), 
  3149 ;;  i               1    7[COMRAM] unsigned char 
  3150 ;; Return value:  Size  Location     Type
  3151 ;;		None               void
  3152 ;; Registers used:
  3153 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3154 ;; Tracked objects:
  3155 ;;		On entry : 0/0
  3156 ;;		On exit  : 0/0
  3157 ;;		Unchanged: 0/0
  3158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  3159 ;;      Params:         0       0       0       0
  3160 ;;      Locals:         2       0       0       0
  3161 ;;      Temps:          1       0       0       0
  3162 ;;      Totals:         3       0       0       0
  3163 ;;Total ram usage:        3 bytes
  3164 ;; Hardware stack levels used:    1
  3165 ;; Hardware stack levels required when called:    3
  3166 ;; This function calls:
  3167 ;;		_lcd_send
  3168 ;; This function is called by:
  3169 ;;		_print_reading
  3170 ;;		_print_indicator
  3171 ;;		_main
  3172 ;; This function uses a non-reentrant model
  3173 ;;
  3174                           
  3175                           	psect	text9
  3176  002654                     __ptext9:
  3177                           	opt stack 0
  3178  002654                     _lcd_puts:
  3179                           	opt stack 26
  3180                           
  3181                           ;incstack = 0
  3182                           ;lcd_puts@string stored from wreg
  3183  002654  6E09               	movwf	lcd_puts@string,c
  3184                           
  3185                           ;lcd44780.c: 164: uint8_t i;
  3186                           ;lcd44780.c: 165: for(i = 0; string[i]; i++) lcd_send((string[i]), 1);
  3187  002656  6A08               	clrf	lcd_puts@i,c
  3188  002658  D00C               	goto	l4154
  3189  00265A                     l4150:
  3190  00265A  0E01               	movlw	1
  3191  00265C  6E05               	movwf	lcd_send@mode,c
  3192  00265E  5009               	movf	lcd_puts@string,w,c
  3193  002660  2408               	addwf	lcd_puts@i,w,c
  3194  002662  6E07               	movwf	??_lcd_puts& (0+255),c
  3195  002664  C007  FFF6         	movff	??_lcd_puts,tblptrl
  3196  002668                     	if	0	;There is only one active tblptr byte
  3197  002668                     	endif
  3198  002668                     	if	0	;tblptru may be non-zero
  3199  002668                     	endif
  3200  002668                     	if	0	;tblptru may be non-zero
  3201  002668                     	endif
  3202  002668  0008               	tblrd		*
  3203  00266A  50F5               	movf	tablat,w,c
  3204  00266C  EC55  F014         	call	_lcd_send
  3205  002670  2A08               	incf	lcd_puts@i,f,c
  3206  002672                     l4154:
  3207  002672  5009               	movf	lcd_puts@string,w,c
  3208  002674  2408               	addwf	lcd_puts@i,w,c
  3209  002676  6E07               	movwf	??_lcd_puts& (0+255),c
  3210  002678  C007  FFF6         	movff	??_lcd_puts,tblptrl
  3211  00267C                     	if	0	;There is only one active tblptr byte
  3212  00267C                     	endif
  3213  00267C                     	if	0	;tblptru may be non-zero
  3214  00267C                     	endif
  3215  00267C                     	if	0	;tblptru may be non-zero
  3216  00267C                     	endif
  3217  00267C  0008               	tblrd		*
  3218  00267E  50F5               	movf	tablat,w,c
  3219  002680  B4D8               	btfsc	status,2,c
  3220  002682  0012               	return		;funcret
  3221  002684  D7EA               	goto	l4150
  3222  002686                     __end_of_lcd_puts:
  3223                           	opt stack 0
  3224                           tblptru	equ	0xFF8
  3225                           tblptrh	equ	0xFF7
  3226                           tblptrl	equ	0xFF6
  3227                           tablat	equ	0xFF5
  3228                           intcon	equ	0xFF2
  3229                           intcon2	equ	0xFF1
  3230                           postinc0	equ	0xFEE
  3231                           wreg	equ	0xFE8
  3232                           postdec1	equ	0xFE5
  3233                           fsr1l	equ	0xFE1
  3234                           status	equ	0xFD8
  3235                           
  3236 ;; *************** function _format_xint32 *****************
  3237 ;; Defined at:
  3238 ;;		line 51 in file "../../../lib/format.c"
  3239 ;; Parameters:    Size  Location     Type
  3240 ;;  x               4   53[COMRAM] unsigned long 
  3241 ;; Auto vars:     Size  Location     Type
  3242 ;;		None
  3243 ;; Return value:  Size  Location     Type
  3244 ;;		None               void
  3245 ;; Registers used:
  3246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3247 ;; Tracked objects:
  3248 ;;		On entry : 0/0
  3249 ;;		On exit  : 0/0
  3250 ;;		Unchanged: 0/0
  3251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  3252 ;;      Params:         4       0       0       0
  3253 ;;      Locals:         0       0       0       0
  3254 ;;      Temps:          0       0       0       0
  3255 ;;      Totals:         4       0       0       0
  3256 ;;Total ram usage:        4 bytes
  3257 ;; Hardware stack levels used:    1
  3258 ;; Hardware stack levels required when called:    3
  3259 ;; This function calls:
  3260 ;;		_buffer_putch
  3261 ;;		_format_number
  3262 ;; This function is called by:
  3263 ;;		_measure_capacitance
  3264 ;; This function uses a non-reentrant model
  3265 ;;
  3266                           
  3267                           	psect	text10
  3268  00261E                     __ptext10:
  3269                           	opt stack 0
  3270  00261E                     _format_xint32:
  3271                           	opt stack 26
  3272                           
  3273                           ;format.c: 52: buffer_putch('0');
  3274                           
  3275                           ;incstack = 0
  3276  00261E  0E30               	movlw	48
  3277  002620  ECB3  F011         	call	_buffer_putch
  3278                           
  3279                           ;format.c: 53: buffer_putch('x');
  3280  002624  0E78               	movlw	120
  3281  002626  ECB3  F011         	call	_buffer_putch
  3282                           
  3283                           ;format.c: 54: format_number((uint16_t)(x >> 16), 16, -4);
  3284  00262A  C038  F00B         	movff	format_xint32@x+2,format_number@n
  3285  00262E  C039  F00C         	movff	format_xint32@x+3,format_number@n+1
  3286  002632  0E10               	movlw	16
  3287  002634  6E0D               	movwf	format_number@base,c
  3288  002636  0EFC               	movlw	252
  3289  002638  6E0E               	movwf	format_number@pad,c
  3290  00263A  ECDD  F00F         	call	_format_number	;wreg free
  3291                           
  3292                           ;format.c: 55: format_number((uint16_t)(x & 0xffff), 16, -4);
  3293  00263E  C036  F00B         	movff	format_xint32@x,format_number@n
  3294  002642  C037  F00C         	movff	format_xint32@x+1,format_number@n+1
  3295  002646  0E10               	movlw	16
  3296  002648  6E0D               	movwf	format_number@base,c
  3297  00264A  0EFC               	movlw	252
  3298  00264C  6E0E               	movwf	format_number@pad,c
  3299  00264E  ECDD  F00F         	call	_format_number	;wreg free
  3300  002652  0012               	return		;funcret
  3301  002654                     __end_of_format_xint32:
  3302                           	opt stack 0
  3303                           tblptru	equ	0xFF8
  3304                           tblptrh	equ	0xFF7
  3305                           tblptrl	equ	0xFF6
  3306                           tablat	equ	0xFF5
  3307                           intcon	equ	0xFF2
  3308                           intcon2	equ	0xFF1
  3309                           postinc0	equ	0xFEE
  3310                           wreg	equ	0xFE8
  3311                           postdec1	equ	0xFE5
  3312                           fsr1l	equ	0xFE1
  3313                           status	equ	0xFD8
  3314                           
  3315 ;; *************** function _format_double *****************
  3316 ;; Defined at:
  3317 ;;		line 77 in file "../../../lib/format.c"
  3318 ;; Parameters:    Size  Location     Type
  3319 ;;  num             4   61[BANK0 ] unsigned long 
  3320 ;; Auto vars:     Size  Location     Type
  3321 ;;  weight          4   73[BANK0 ] unsigned long 
  3322 ;;  m               2   79[BANK0 ] short 
  3323 ;;  digit           2   77[BANK0 ] short 
  3324 ;; Return value:  Size  Location     Type
  3325 ;;		None               void
  3326 ;; Registers used:
  3327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3328 ;; Tracked objects:
  3329 ;;		On entry : 0/0
  3330 ;;		On exit  : 0/0
  3331 ;;		Unchanged: 0/0
  3332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  3333 ;;      Params:         0       4       0       0
  3334 ;;      Locals:         0      16       0       0
  3335 ;;      Temps:          0       0       0       0
  3336 ;;      Totals:         0      20       0       0
  3337 ;;Total ram usage:       20 bytes
  3338 ;; Hardware stack levels used:    1
  3339 ;; Hardware stack levels required when called:    6
  3340 ;; This function calls:
  3341 ;;		___awtofl
  3342 ;;		___fldiv
  3343 ;;		___flge
  3344 ;;		___flmul
  3345 ;;		___flsub
  3346 ;;		___fltol
  3347 ;;		_buffer_putch
  3348 ;;		_floor
  3349 ;;		_log10
  3350 ;;		_pow
  3351 ;; This function is called by:
  3352 ;;		_main
  3353 ;;		_measure_capacitance
  3354 ;; This function uses a non-reentrant model
  3355 ;;
  3356                           
  3357                           	psect	text11
  3358  0014C0                     __ptext11:
  3359                           	opt stack 0
  3360  0014C0                     _format_double:
  3361                           	opt stack 23
  3362                           
  3363                           ;format.c: 78: short m = (short)log10(num);
  3364                           
  3365                           ;incstack = 0
  3366  0014C0  C09D  F056         	movff	format_double@num,log10@x
  3367  0014C4  C09E  F057         	movff	format_double@num+1,log10@x+1
  3368  0014C8  C09F  F058         	movff	format_double@num+2,log10@x+2
  3369  0014CC  C0A0  F059         	movff	format_double@num+3,log10@x+3
  3370  0014D0  EC86  F011         	call	_log10	;wreg free
  3371  0014D4  C056  F064         	movff	?_log10,___fltol@f1
  3372  0014D8  C057  F065         	movff	?_log10+1,___fltol@f1+1
  3373  0014DC  C058  F066         	movff	?_log10+2,___fltol@f1+2
  3374  0014E0  C059  F067         	movff	?_log10+3,___fltol@f1+3
  3375  0014E4  EC82  F010         	call	___fltol	;wreg free
  3376  0014E8  C064  F0AF         	movff	?___fltol,format_double@m
  3377  0014EC  C065  F0B0         	movff	?___fltol+1,format_double@m+1
  3378                           
  3379                           ;format.c: 79: short digit;
  3380                           ;format.c: 82: while(num > 0 + 1.19209290e-07) {
  3381  0014F0  D09B               	goto	l4330
  3382  0014F2                     l4312:
  3383                           
  3384                           ;format.c: 83: double weight = pow(10.0l, m);
  3385  0014F2  C0AF  F00E         	movff	format_double@m,___awtofl@c
  3386  0014F6  C0B0  F00F         	movff	format_double@m+1,___awtofl@c+1
  3387  0014FA  ECD6  F012         	call	___awtofl	;wreg free
  3388  0014FE  C00E  F0A1         	movff	?___awtofl,_format_double$1120
  3389  001502  C00F  F0A2         	movff	?___awtofl+1,_format_double$1120+1
  3390  001506  C010  F0A3         	movff	?___awtofl+2,_format_double$1120+2
  3391  00150A  C011  F0A4         	movff	?___awtofl+3,_format_double$1120+3
  3392                           
  3393                           ;format.c: 83: double weight = pow(10.0l, m);
  3394  00150E  0100               	movlb	0	; () banked
  3395  001510  6B88               	clrf	pow@x& (0+255),b
  3396  001512  6B89               	clrf	(pow@x+1)& (0+255),b
  3397  001514  0E20               	movlw	32
  3398  001516  6F8A               	movwf	(pow@x+2)& (0+255),b
  3399  001518  0E41               	movlw	65
  3400  00151A  6F8B               	movwf	(pow@x+3)& (0+255),b
  3401  00151C  C0A1  F08C         	movff	_format_double$1120,pow@y
  3402  001520  C0A2  F08D         	movff	_format_double$1120+1,pow@y+1
  3403  001524  C0A3  F08E         	movff	_format_double$1120+2,pow@y+2
  3404  001528  C0A4  F08F         	movff	_format_double$1120+3,pow@y+3
  3405  00152C  EC97  F009         	call	_pow	;wreg free
  3406  001530  C088  F0A9         	movff	?_pow,format_double@weight
  3407  001534  C089  F0AA         	movff	?_pow+1,format_double@weight+1
  3408  001538  C08A  F0AB         	movff	?_pow+2,format_double@weight+2
  3409  00153C  C08B  F0AC         	movff	?_pow+3,format_double@weight+3
  3410                           
  3411                           ; BSR set to: 0
  3412                           ;format.c: 84: digit = (short)floor(num / weight);
  3413  001540  C0A9  F012         	movff	format_double@weight,___fldiv@f2
  3414  001544  C0AA  F013         	movff	format_double@weight+1,___fldiv@f2+1
  3415  001548  C0AB  F014         	movff	format_double@weight+2,___fldiv@f2+2
  3416  00154C  C0AC  F015         	movff	format_double@weight+3,___fldiv@f2+3
  3417  001550  C09D  F00E         	movff	format_double@num,___fldiv@f1
  3418  001554  C09E  F00F         	movff	format_double@num+1,___fldiv@f1+1
  3419  001558  C09F  F010         	movff	format_double@num+2,___fldiv@f1+2
  3420  00155C  C0A0  F011         	movff	format_double@num+3,___fldiv@f1+3
  3421  001560  EC85  F00F         	call	___fldiv	;wreg free
  3422  001564  C00E  F073         	movff	?___fldiv,floor@x
  3423  001568  C00F  F074         	movff	?___fldiv+1,floor@x+1
  3424  00156C  C010  F075         	movff	?___fldiv+2,floor@x+2
  3425  001570  C011  F076         	movff	?___fldiv+3,floor@x+3
  3426  001574  ECF7  F00C         	call	_floor	;wreg free
  3427  001578  C073  F0A5         	movff	?_floor,_format_double$1121
  3428  00157C  C074  F0A6         	movff	?_floor+1,_format_double$1121+1
  3429  001580  C075  F0A7         	movff	?_floor+2,_format_double$1121+2
  3430  001584  C076  F0A8         	movff	?_floor+3,_format_double$1121+3
  3431                           
  3432                           ;format.c: 84: digit = (short)floor(num / weight);
  3433  001588  C0A5  F064         	movff	_format_double$1121,___fltol@f1
  3434  00158C  C0A6  F065         	movff	_format_double$1121+1,___fltol@f1+1
  3435  001590  C0A7  F066         	movff	_format_double$1121+2,___fltol@f1+2
  3436  001594  C0A8  F067         	movff	_format_double$1121+3,___fltol@f1+3
  3437  001598  EC82  F010         	call	___fltol	;wreg free
  3438  00159C  C064  F0AD         	movff	?___fltol,format_double@digit
  3439  0015A0  C065  F0AE         	movff	?___fltol+1,format_double@digit+1
  3440                           
  3441                           ; BSR set to: 0
  3442                           ;format.c: 85: num -= (digit * weight);
  3443  0015A4  C09D  F044         	movff	format_double@num,___flsub@f1
  3444  0015A8  C09E  F045         	movff	format_double@num+1,___flsub@f1+1
  3445  0015AC  C09F  F046         	movff	format_double@num+2,___flsub@f1+2
  3446  0015B0  C0A0  F047         	movff	format_double@num+3,___flsub@f1+3
  3447  0015B4  C0A9  F021         	movff	format_double@weight,___flmul@f2
  3448  0015B8  C0AA  F022         	movff	format_double@weight+1,___flmul@f2+1
  3449  0015BC  C0AB  F023         	movff	format_double@weight+2,___flmul@f2+2
  3450  0015C0  C0AC  F024         	movff	format_double@weight+3,___flmul@f2+3
  3451  0015C4  C0AD  F00E         	movff	format_double@digit,___awtofl@c
  3452  0015C8  C0AE  F00F         	movff	format_double@digit+1,___awtofl@c+1
  3453  0015CC  ECD6  F012         	call	___awtofl	;wreg free
  3454  0015D0  C00E  F01D         	movff	?___awtofl,___flmul@f1
  3455  0015D4  C00F  F01E         	movff	?___awtofl+1,___flmul@f1+1
  3456  0015D8  C010  F01F         	movff	?___awtofl+2,___flmul@f1+2
  3457  0015DC  C011  F020         	movff	?___awtofl+3,___flmul@f1+3
  3458  0015E0  ECB3  F008         	call	___flmul	;wreg free
  3459  0015E4  C01D  F048         	movff	?___flmul,___flsub@f2
  3460  0015E8  C01E  F049         	movff	?___flmul+1,___flsub@f2+1
  3461  0015EC  C01F  F04A         	movff	?___flmul+2,___flsub@f2+2
  3462  0015F0  C020  F04B         	movff	?___flmul+3,___flsub@f2+3
  3463  0015F4  EC95  F012         	call	___flsub	;wreg free
  3464  0015F8  C044  F09D         	movff	?___flsub,format_double@num
  3465  0015FC  C045  F09E         	movff	?___flsub+1,format_double@num+1
  3466  001600  C046  F09F         	movff	?___flsub+2,format_double@num+2
  3467  001604  C047  F0A0         	movff	?___flsub+3,format_double@num+3
  3468                           
  3469                           ;format.c: 86: buffer_putch((char)('0' + digit));
  3470  001608  0100               	movlb	0	; () banked
  3471  00160A  51AD               	movf	format_double@digit& (0+255),w,b
  3472  00160C  0F30               	addlw	48
  3473  00160E  ECB3  F011         	call	_buffer_putch
  3474                           
  3475                           ; BSR set to: 1
  3476                           ;format.c: 87: if(m == 0)
  3477  001612  0100               	movlb	0	; () banked
  3478  001614  51AF               	movf	format_double@m& (0+255),w,b
  3479  001616  11B0               	iorwf	(format_double@m+1)& (0+255),w,b
  3480  001618  E103               	bnz	l4328
  3481                           
  3482                           ; BSR set to: 0
  3483                           ;format.c: 88: buffer_putch('.');
  3484  00161A  0E2E               	movlw	46
  3485  00161C  ECB3  F011         	call	_buffer_putch
  3486  001620                     l4328:
  3487                           
  3488                           ;format.c: 89: m--;
  3489  001620  0100               	movlb	0	; () banked
  3490  001622  07AF               	decf	format_double@m& (0+255),f,b
  3491  001624  A0D8               	btfss	status,0,c
  3492  001626  07B0               	decf	(format_double@m+1)& (0+255),f,b
  3493  001628                     l4330:
  3494                           
  3495                           ; BSR set to: 0
  3496  001628  6A04               	clrf	___flge@ff1,c
  3497  00162A  6A05               	clrf	___flge@ff1+1,c
  3498  00162C  6A06               	clrf	___flge@ff1+2,c
  3499  00162E  0E34               	movlw	52
  3500  001630  6E07               	movwf	___flge@ff1+3,c
  3501  001632  C09D  F008         	movff	format_double@num,___flge@ff2
  3502  001636  C09E  F009         	movff	format_double@num+1,___flge@ff2+1
  3503  00163A  C09F  F00A         	movff	format_double@num+2,___flge@ff2+2
  3504  00163E  C0A0  F00B         	movff	format_double@num+3,___flge@ff2+3
  3505  001642  EC01  F012         	call	___flge	;wreg free
  3506  001646  B0D8               	btfsc	status,0,c
  3507  001648  0012               	return		;funcret
  3508  00164A  D753               	goto	l4312
  3509  00164C                     __end_of_format_double:
  3510                           	opt stack 0
  3511                           tblptru	equ	0xFF8
  3512                           tblptrh	equ	0xFF7
  3513                           tblptrl	equ	0xFF6
  3514                           tablat	equ	0xFF5
  3515                           intcon	equ	0xFF2
  3516                           intcon2	equ	0xFF1
  3517                           postinc0	equ	0xFEE
  3518                           wreg	equ	0xFE8
  3519                           postdec1	equ	0xFE5
  3520                           fsr1l	equ	0xFE1
  3521                           status	equ	0xFD8
  3522                           
  3523 ;; *************** function _pow *****************
  3524 ;; Defined at:
  3525 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\pow.c"
  3526 ;; Parameters:    Size  Location     Type
  3527 ;;  x               4   40[BANK0 ] short 
  3528 ;;  y               4   44[BANK0 ] short 
  3529 ;; Auto vars:     Size  Location     Type
  3530 ;;  yi              4   57[BANK0 ] unsigned long 
  3531 ;;  sign            1   56[BANK0 ] unsigned char 
  3532 ;; Return value:  Size  Location     Type
  3533 ;;                  4   40[BANK0 ] unsigned char 
  3534 ;; Registers used:
  3535 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3536 ;; Tracked objects:
  3537 ;;		On entry : F/0
  3538 ;;		On exit  : F/0
  3539 ;;		Unchanged: 0/0
  3540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  3541 ;;      Params:         0       8       0       0
  3542 ;;      Locals:         0      13       0       0
  3543 ;;      Temps:          0       0       0       0
  3544 ;;      Totals:         0      21       0       0
  3545 ;;Total ram usage:       21 bytes
  3546 ;; Hardware stack levels used:    1
  3547 ;; Hardware stack levels required when called:    5
  3548 ;; This function calls:
  3549 ;;		___flge
  3550 ;;		___flmul
  3551 ;;		___flneg
  3552 ;;		___fltol
  3553 ;;		___lltofl
  3554 ;;		_exp
  3555 ;;		_log
  3556 ;; This function is called by:
  3557 ;;		_format_double
  3558 ;; This function uses a non-reentrant model
  3559 ;;
  3560                           
  3561                           	psect	text12
  3562  00132E                     __ptext12:
  3563                           	opt stack 0
  3564  00132E                     _pow:
  3565                           	opt stack 23
  3566                           
  3567                           ; BSR set to: 0
  3568                           
  3569                           ;incstack = 0
  3570  00132E  6B98               	clrf	pow@sign& (0+255),b
  3571                           
  3572                           ; BSR set to: 0
  3573  001330  5188               	movf	pow@x& (0+255),w,b
  3574  001332  1189               	iorwf	(pow@x+1)& (0+255),w,b
  3575  001334  118A               	iorwf	(pow@x+2)& (0+255),w,b
  3576  001336  118B               	iorwf	(pow@x+3)& (0+255),w,b
  3577  001338  E114               	bnz	l4244
  3578                           
  3579                           ; BSR set to: 0
  3580  00133A  6A04               	clrf	___flge@ff1,c
  3581  00133C  6A05               	clrf	___flge@ff1+1,c
  3582  00133E  6A06               	clrf	___flge@ff1+2,c
  3583  001340  6A07               	clrf	___flge@ff1+3,c
  3584  001342  C08C  F008         	movff	pow@y,___flge@ff2
  3585  001346  C08D  F009         	movff	pow@y+1,___flge@ff2+1
  3586  00134A  C08E  F00A         	movff	pow@y+2,___flge@ff2+2
  3587  00134E  C08F  F00B         	movff	pow@y+3,___flge@ff2+3
  3588  001352  EC01  F012         	call	___flge	;wreg free
  3589  001356  0100               	movlb	0	; () banked
  3590  001358  6B88               	clrf	?_pow& (0+255),b
  3591  00135A  6B89               	clrf	(?_pow+1)& (0+255),b
  3592  00135C  6B8A               	clrf	(?_pow+2)& (0+255),b
  3593  00135E  6B8B               	clrf	(?_pow+3)& (0+255),b
  3594  001360  0012               	return	
  3595  001362                     l4244:
  3596                           
  3597                           ; BSR set to: 0
  3598  001362  518C               	movf	pow@y& (0+255),w,b
  3599  001364  118D               	iorwf	(pow@y+1)& (0+255),w,b
  3600  001366  118E               	iorwf	(pow@y+2)& (0+255),w,b
  3601  001368  118F               	iorwf	(pow@y+3)& (0+255),w,b
  3602  00136A  E108               	bnz	l4250
  3603                           
  3604                           ; BSR set to: 0
  3605  00136C  0E00               	movlw	0
  3606  00136E  6F88               	movwf	?_pow& (0+255),b
  3607  001370  6F89               	movwf	(?_pow+1)& (0+255),b
  3608  001372  0E80               	movlw	128
  3609  001374  6F8A               	movwf	(?_pow+2)& (0+255),b
  3610  001376  0E3F               	movlw	63
  3611  001378  6F8B               	movwf	(?_pow+3)& (0+255),b
  3612  00137A  0C3F               	retlw	63
  3613  00137C                     l4250:
  3614                           
  3615                           ; BSR set to: 0
  3616  00137C  AF8B               	btfss	(pow@x+3)& (0+255),7,b
  3617  00137E  D043               	goto	l4260
  3618                           
  3619                           ; BSR set to: 0
  3620  001380  C08C  F064         	movff	pow@y,___fltol@f1
  3621  001384  C08D  F065         	movff	pow@y+1,___fltol@f1+1
  3622  001388  C08E  F066         	movff	pow@y+2,___fltol@f1+2
  3623  00138C  C08F  F067         	movff	pow@y+3,___fltol@f1+3
  3624  001390  EC82  F010         	call	___fltol	;wreg free
  3625  001394  C064  F099         	movff	?___fltol,pow@yi
  3626  001398  C065  F09A         	movff	?___fltol+1,pow@yi+1
  3627  00139C  C066  F09B         	movff	?___fltol+2,pow@yi+2
  3628  0013A0  C067  F09C         	movff	?___fltol+3,pow@yi+3
  3629  0013A4  C099  F00E         	movff	pow@yi,___lltofl@c
  3630  0013A8  C09A  F00F         	movff	pow@yi+1,___lltofl@c+1
  3631  0013AC  C09B  F010         	movff	pow@yi+2,___lltofl@c+2
  3632  0013B0  C09C  F011         	movff	pow@yi+3,___lltofl@c+3
  3633  0013B4  EC73  F013         	call	___lltofl	;wreg free
  3634  0013B8  0100               	movlb	0	; () banked
  3635  0013BA  518C               	movf	pow@y& (0+255),w,b
  3636  0013BC  180E               	xorwf	?___lltofl,w,c
  3637  0013BE  E109               	bnz	u3650
  3638  0013C0  518D               	movf	(pow@y+1)& (0+255),w,b
  3639  0013C2  180F               	xorwf	?___lltofl+1,w,c
  3640  0013C4  E106               	bnz	u3650
  3641  0013C6  518E               	movf	(pow@y+2)& (0+255),w,b
  3642  0013C8  1810               	xorwf	?___lltofl+2,w,c
  3643  0013CA  E103               	bnz	u3650
  3644  0013CC  518F               	movf	(pow@y+3)& (0+255),w,b
  3645  0013CE  1811               	xorwf	?___lltofl+3,w,c
  3646  0013D0  E005               	bz	l4256
  3647  0013D2                     u3650:
  3648                           
  3649                           ; BSR set to: 0
  3650  0013D2  6B88               	clrf	?_pow& (0+255),b
  3651  0013D4  6B89               	clrf	(?_pow+1)& (0+255),b
  3652  0013D6  6B8A               	clrf	(?_pow+2)& (0+255),b
  3653  0013D8  6B8B               	clrf	(?_pow+3)& (0+255),b
  3654  0013DA  0012               	return	
  3655  0013DC                     l4256:
  3656                           
  3657                           ; BSR set to: 0
  3658  0013DC  5199               	movf	pow@yi& (0+255),w,b
  3659  0013DE  0B01               	andlw	1
  3660  0013E0  6F98               	movwf	pow@sign& (0+255),b
  3661                           
  3662                           ; BSR set to: 0
  3663  0013E2  C088  F004         	movff	pow@x,___flneg@f1
  3664  0013E6  C089  F005         	movff	pow@x+1,___flneg@f1+1
  3665  0013EA  C08A  F006         	movff	pow@x+2,___flneg@f1+2
  3666  0013EE  C08B  F007         	movff	pow@x+3,___flneg@f1+3
  3667  0013F2  EC17  F014         	call	___flneg	;wreg free
  3668  0013F6  C004  F088         	movff	?___flneg,pow@x
  3669  0013FA  C005  F089         	movff	?___flneg+1,pow@x+1
  3670  0013FE  C006  F08A         	movff	?___flneg+2,pow@x+2
  3671  001402  C007  F08B         	movff	?___flneg+3,pow@x+3
  3672  001406                     l4260:
  3673                           
  3674                           ; BSR set to: 0
  3675  001406  C088  F050         	movff	pow@x,log@x
  3676  00140A  C089  F051         	movff	pow@x+1,log@x+1
  3677  00140E  C08A  F052         	movff	pow@x+2,log@x+2
  3678  001412  C08B  F053         	movff	pow@x+3,log@x+3
  3679  001416  ECDA  F00B         	call	_log	;wreg free
  3680  00141A  C050  F090         	movff	?_log,_pow$1133
  3681  00141E  C051  F091         	movff	?_log+1,_pow$1133+1
  3682  001422  C052  F092         	movff	?_log+2,_pow$1133+2
  3683  001426  C053  F093         	movff	?_log+3,_pow$1133+3
  3684  00142A  C090  F01D         	movff	_pow$1133,___flmul@f1
  3685  00142E  C091  F01E         	movff	_pow$1133+1,___flmul@f1+1
  3686  001432  C092  F01F         	movff	_pow$1133+2,___flmul@f1+2
  3687  001436  C093  F020         	movff	_pow$1133+3,___flmul@f1+3
  3688  00143A  C08C  F021         	movff	pow@y,___flmul@f2
  3689  00143E  C08D  F022         	movff	pow@y+1,___flmul@f2+1
  3690  001442  C08E  F023         	movff	pow@y+2,___flmul@f2+2
  3691  001446  C08F  F024         	movff	pow@y+3,___flmul@f2+3
  3692  00144A  ECB3  F008         	call	___flmul	;wreg free
  3693  00144E  C01D  F094         	movff	?___flmul,_pow$1134
  3694  001452  C01E  F095         	movff	?___flmul+1,_pow$1134+1
  3695  001456  C01F  F096         	movff	?___flmul+2,_pow$1134+2
  3696  00145A  C020  F097         	movff	?___flmul+3,_pow$1134+3
  3697  00145E  C094  F07D         	movff	_pow$1134,exp@x
  3698  001462  C095  F07E         	movff	_pow$1134+1,exp@x+1
  3699  001466  C096  F07F         	movff	_pow$1134+2,exp@x+2
  3700  00146A  C097  F080         	movff	_pow$1134+3,exp@x+3
  3701  00146E  ECA4  F007         	call	_exp	;wreg free
  3702  001472  C07D  F088         	movff	?_exp,pow@x
  3703  001476  C07E  F089         	movff	?_exp+1,pow@x+1
  3704  00147A  C07F  F08A         	movff	?_exp+2,pow@x+2
  3705  00147E  C080  F08B         	movff	?_exp+3,pow@x+3
  3706  001482  0100               	movlb	0	; () banked
  3707  001484  5198               	movf	pow@sign& (0+255),w,b
  3708  001486  E013               	bz	l1161
  3709                           
  3710                           ; BSR set to: 0
  3711  001488  C088  F004         	movff	pow@x,___flneg@f1
  3712  00148C  C089  F005         	movff	pow@x+1,___flneg@f1+1
  3713  001490  C08A  F006         	movff	pow@x+2,___flneg@f1+2
  3714  001494  C08B  F007         	movff	pow@x+3,___flneg@f1+3
  3715  001498  EC17  F014         	call	___flneg	;wreg free
  3716  00149C  C004  F088         	movff	?___flneg,?_pow
  3717  0014A0  C005  F089         	movff	?___flneg+1,?_pow+1
  3718  0014A4  C006  F08A         	movff	?___flneg+2,?_pow+2
  3719  0014A8  C007  F08B         	movff	?___flneg+3,?_pow+3
  3720  0014AC  0012               	return	
  3721  0014AE                     l1161:
  3722                           
  3723                           ; BSR set to: 0
  3724  0014AE  C088  F088         	movff	pow@x,?_pow
  3725  0014B2  C089  F089         	movff	pow@x+1,?_pow+1
  3726  0014B6  C08A  F08A         	movff	pow@x+2,?_pow+2
  3727  0014BA  C08B  F08B         	movff	pow@x+3,?_pow+3
  3728                           
  3729                           ; BSR set to: 0
  3730  0014BE  0012               	return		;funcret
  3731  0014C0                     __end_of_pow:
  3732                           	opt stack 0
  3733                           tblptru	equ	0xFF8
  3734                           tblptrh	equ	0xFF7
  3735                           tblptrl	equ	0xFF6
  3736                           tablat	equ	0xFF5
  3737                           intcon	equ	0xFF2
  3738                           intcon2	equ	0xFF1
  3739                           postinc0	equ	0xFEE
  3740                           wreg	equ	0xFE8
  3741                           postdec1	equ	0xFE5
  3742                           fsr1l	equ	0xFE1
  3743                           status	equ	0xFD8
  3744                           
  3745 ;; *************** function _exp *****************
  3746 ;; Defined at:
  3747 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\exp.c"
  3748 ;; Parameters:    Size  Location     Type
  3749 ;;  x               4   29[BANK0 ] unsigned char 
  3750 ;; Auto vars:     Size  Location     Type
  3751 ;;  exponent        2   37[BANK0 ] int 
  3752 ;;  sign            1   39[BANK0 ] unsigned char 
  3753 ;; Return value:  Size  Location     Type
  3754 ;;                  4   29[BANK0 ] unsigned char 
  3755 ;; Registers used:
  3756 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3757 ;; Tracked objects:
  3758 ;;		On entry : 0/0
  3759 ;;		On exit  : 0/0
  3760 ;;		Unchanged: 0/0
  3761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  3762 ;;      Params:         0       4       0       0
  3763 ;;      Locals:         0       7       0       0
  3764 ;;      Temps:          0       0       0       0
  3765 ;;      Totals:         0      11       0       0
  3766 ;;Total ram usage:       11 bytes
  3767 ;; Hardware stack levels used:    1
  3768 ;; Hardware stack levels required when called:    4
  3769 ;; This function calls:
  3770 ;;		___awtofl
  3771 ;;		___fldiv
  3772 ;;		___flge
  3773 ;;		___flmul
  3774 ;;		___flneg
  3775 ;;		___flsub
  3776 ;;		___fltol
  3777 ;;		_eval_poly
  3778 ;;		_floor
  3779 ;;		_ldexp
  3780 ;; This function is called by:
  3781 ;;		_pow
  3782 ;; This function uses a non-reentrant model
  3783 ;;
  3784                           
  3785                           	psect	text13
  3786  000F48                     __ptext13:
  3787                           	opt stack 0
  3788  000F48                     _exp:
  3789                           	opt stack 23
  3790                           
  3791                           ; BSR set to: 0
  3792                           ;incstack = 0
  3793  000F48  0100               	movlb	0	; () banked
  3794  000F4A  517D               	movf	exp@x& (0+255),w,b
  3795  000F4C  117E               	iorwf	(exp@x+1)& (0+255),w,b
  3796  000F4E  117F               	iorwf	(exp@x+2)& (0+255),w,b
  3797  000F50  1180               	iorwf	(exp@x+3)& (0+255),w,b
  3798  000F52  E108               	bnz	l4104
  3799                           
  3800                           ; BSR set to: 0
  3801  000F54  0E00               	movlw	0
  3802  000F56  6F7D               	movwf	?_exp& (0+255),b
  3803  000F58  6F7E               	movwf	(?_exp+1)& (0+255),b
  3804  000F5A  0E80               	movlw	128
  3805  000F5C  6F7F               	movwf	(?_exp+2)& (0+255),b
  3806  000F5E  0E3F               	movlw	63
  3807  000F60  6F80               	movwf	(?_exp+3)& (0+255),b
  3808  000F62  0C3F               	retlw	63
  3809  000F64                     l4104:
  3810                           
  3811                           ; BSR set to: 0
  3812  000F64  0E18               	movlw	24
  3813  000F66  6E04               	movwf	___flge@ff1,c
  3814  000F68  0E72               	movlw	114
  3815  000F6A  6E05               	movwf	___flge@ff1+1,c
  3816  000F6C  0E31               	movlw	49
  3817  000F6E  6E06               	movwf	___flge@ff1+2,c
  3818  000F70  0E44               	movlw	68
  3819  000F72  6E07               	movwf	___flge@ff1+3,c
  3820  000F74  C07D  F008         	movff	exp@x,___flge@ff2
  3821  000F78  C07E  F009         	movff	exp@x+1,___flge@ff2+1
  3822  000F7C  C07F  F00A         	movff	exp@x+2,___flge@ff2+2
  3823  000F80  C080  F00B         	movff	exp@x+3,___flge@ff2+3
  3824  000F84  EC01  F012         	call	___flge	;wreg free
  3825  000F88  E207               	bc	l4110
  3826  000F8A  0100               	movlb	0	; () banked
  3827  000F8C  697D               	setf	?_exp& (0+255),b
  3828  000F8E  697E               	setf	(?_exp+1)& (0+255),b
  3829  000F90  0E7F               	movlw	127
  3830  000F92  6F7F               	movwf	(?_exp+2)& (0+255),b
  3831  000F94  6F80               	movwf	(?_exp+3)& (0+255),b
  3832  000F96  0C7F               	retlw	127
  3833  000F98                     l4110:
  3834  000F98  C07D  F004         	movff	exp@x,___flge@ff1
  3835  000F9C  C07E  F005         	movff	exp@x+1,___flge@ff1+1
  3836  000FA0  C07F  F006         	movff	exp@x+2,___flge@ff1+2
  3837  000FA4  C080  F007         	movff	exp@x+3,___flge@ff1+3
  3838  000FA8  0E87               	movlw	135
  3839  000FAA  6E08               	movwf	___flge@ff2,c
  3840  000FAC  0E48               	movlw	72
  3841  000FAE  6E09               	movwf	___flge@ff2+1,c
  3842  000FB0  0E3A               	movlw	58
  3843  000FB2  6E0A               	movwf	___flge@ff2+2,c
  3844  000FB4  0EC4               	movlw	196
  3845  000FB6  6E0B               	movwf	___flge@ff2+3,c
  3846  000FB8  EC01  F012         	call	___flge	;wreg free
  3847  000FBC  E206               	bc	l4114
  3848  000FBE  0100               	movlb	0	; () banked
  3849  000FC0  6B7D               	clrf	?_exp& (0+255),b
  3850  000FC2  6B7E               	clrf	(?_exp+1)& (0+255),b
  3851  000FC4  6B7F               	clrf	(?_exp+2)& (0+255),b
  3852  000FC6  6B80               	clrf	(?_exp+3)& (0+255),b
  3853  000FC8  0012               	return	
  3854  000FCA                     l4114:
  3855  000FCA  0100               	movlb	0	; () banked
  3856  000FCC  0E01               	movlw	1
  3857  000FCE  AF80               	btfss	(exp@x+3)& (0+255),7,b
  3858  000FD0  0E00               	movlw	0
  3859  000FD2  6F87               	movwf	exp@sign& (0+255),b
  3860                           
  3861                           ; BSR set to: 0
  3862  000FD4  5187               	movf	exp@sign& (0+255),w,b
  3863  000FD6  E012               	bz	l4120
  3864                           
  3865                           ; BSR set to: 0
  3866  000FD8  C07D  F004         	movff	exp@x,___flneg@f1
  3867  000FDC  C07E  F005         	movff	exp@x+1,___flneg@f1+1
  3868  000FE0  C07F  F006         	movff	exp@x+2,___flneg@f1+2
  3869  000FE4  C080  F007         	movff	exp@x+3,___flneg@f1+3
  3870  000FE8  EC17  F014         	call	___flneg	;wreg free
  3871  000FEC  C004  F07D         	movff	?___flneg,exp@x
  3872  000FF0  C005  F07E         	movff	?___flneg+1,exp@x+1
  3873  000FF4  C006  F07F         	movff	?___flneg+2,exp@x+2
  3874  000FF8  C007  F080         	movff	?___flneg+3,exp@x+3
  3875  000FFC                     l4120:
  3876                           
  3877                           ; BSR set to: 0
  3878  000FFC  C07D  F01D         	movff	exp@x,___flmul@f1
  3879  001000  C07E  F01E         	movff	exp@x+1,___flmul@f1+1
  3880  001004  C07F  F01F         	movff	exp@x+2,___flmul@f1+2
  3881  001008  C080  F020         	movff	exp@x+3,___flmul@f1+3
  3882  00100C  0E3B               	movlw	59
  3883  00100E  6E21               	movwf	___flmul@f2,c
  3884  001010  0EAA               	movlw	170
  3885  001012  6E22               	movwf	___flmul@f2+1,c
  3886  001014  0EB8               	movlw	184
  3887  001016  6E23               	movwf	___flmul@f2+2,c
  3888  001018  0E3F               	movlw	63
  3889  00101A  6E24               	movwf	___flmul@f2+3,c
  3890  00101C  ECB3  F008         	call	___flmul	;wreg free
  3891  001020  C01D  F07D         	movff	?___flmul,exp@x
  3892  001024  C01E  F07E         	movff	?___flmul+1,exp@x+1
  3893  001028  C01F  F07F         	movff	?___flmul+2,exp@x+2
  3894  00102C  C020  F080         	movff	?___flmul+3,exp@x+3
  3895  001030  C07D  F073         	movff	exp@x,floor@x
  3896  001034  C07E  F074         	movff	exp@x+1,floor@x+1
  3897  001038  C07F  F075         	movff	exp@x+2,floor@x+2
  3898  00103C  C080  F076         	movff	exp@x+3,floor@x+3
  3899  001040  ECF7  F00C         	call	_floor	;wreg free
  3900  001044  C073  F081         	movff	?_floor,_exp$1135
  3901  001048  C074  F082         	movff	?_floor+1,_exp$1135+1
  3902  00104C  C075  F083         	movff	?_floor+2,_exp$1135+2
  3903  001050  C076  F084         	movff	?_floor+3,_exp$1135+3
  3904  001054  C081  F064         	movff	_exp$1135,___fltol@f1
  3905  001058  C082  F065         	movff	_exp$1135+1,___fltol@f1+1
  3906  00105C  C083  F066         	movff	_exp$1135+2,___fltol@f1+2
  3907  001060  C084  F067         	movff	_exp$1135+3,___fltol@f1+3
  3908  001064  EC82  F010         	call	___fltol	;wreg free
  3909  001068  C064  F085         	movff	?___fltol,exp@exponent
  3910  00106C  C065  F086         	movff	?___fltol+1,exp@exponent+1
  3911                           
  3912                           ; BSR set to: 0
  3913  001070  C07D  F044         	movff	exp@x,___flsub@f1
  3914  001074  C07E  F045         	movff	exp@x+1,___flsub@f1+1
  3915  001078  C07F  F046         	movff	exp@x+2,___flsub@f1+2
  3916  00107C  C080  F047         	movff	exp@x+3,___flsub@f1+3
  3917  001080  C085  F00E         	movff	exp@exponent,___awtofl@c
  3918  001084  C086  F00F         	movff	exp@exponent+1,___awtofl@c+1
  3919  001088  ECD6  F012         	call	___awtofl	;wreg free
  3920  00108C  C00E  F048         	movff	?___awtofl,___flsub@f2
  3921  001090  C00F  F049         	movff	?___awtofl+1,___flsub@f2+1
  3922  001094  C010  F04A         	movff	?___awtofl+2,___flsub@f2+2
  3923  001098  C011  F04B         	movff	?___awtofl+3,___flsub@f2+3
  3924  00109C  EC95  F012         	call	___flsub	;wreg free
  3925  0010A0  C044  F07D         	movff	?___flsub,exp@x
  3926  0010A4  C045  F07E         	movff	?___flsub+1,exp@x+1
  3927  0010A8  C046  F07F         	movff	?___flsub+2,exp@x+2
  3928  0010AC  C047  F080         	movff	?___flsub+3,exp@x+3
  3929  0010B0  C07D  F044         	movff	exp@x,eval_poly@x
  3930  0010B4  C07E  F045         	movff	exp@x+1,eval_poly@x+1
  3931  0010B8  C07F  F046         	movff	exp@x+2,eval_poly@x+2
  3932  0010BC  C080  F047         	movff	exp@x+3,eval_poly@x+3
  3933  0010C0  0E01               	movlw	low exp@coeff
  3934  0010C2  6E48               	movwf	eval_poly@d,c
  3935  0010C4  6A4A               	clrf	eval_poly@n+1,c
  3936  0010C6  0E09               	movlw	9
  3937  0010C8  6E49               	movwf	eval_poly@n,c
  3938  0010CA  EC2B  F00F         	call	_eval_poly	;wreg free
  3939  0010CE  C044  F050         	movff	?_eval_poly,ldexp@value
  3940  0010D2  C045  F051         	movff	?_eval_poly+1,ldexp@value+1
  3941  0010D6  C046  F052         	movff	?_eval_poly+2,ldexp@value+2
  3942  0010DA  C047  F053         	movff	?_eval_poly+3,ldexp@value+3
  3943  0010DE  C085  F054         	movff	exp@exponent,ldexp@newexp
  3944  0010E2  C086  F055         	movff	exp@exponent+1,ldexp@newexp+1
  3945  0010E6  EC31  F010         	call	_ldexp	;wreg free
  3946  0010EA  C050  F07D         	movff	?_ldexp,exp@x
  3947  0010EE  C051  F07E         	movff	?_ldexp+1,exp@x+1
  3948  0010F2  C052  F07F         	movff	?_ldexp+2,exp@x+2
  3949  0010F6  C053  F080         	movff	?_ldexp+3,exp@x+3
  3950  0010FA  0100               	movlb	0	; () banked
  3951  0010FC  5187               	movf	exp@sign& (0+255),w,b
  3952  0010FE  E02A               	bz	l1187
  3953                           
  3954                           ; BSR set to: 0
  3955  001100  297D               	incf	exp@x& (0+255),w,b
  3956  001102  E10E               	bnz	l4136
  3957  001104  297E               	incf	(exp@x+1)& (0+255),w,b
  3958  001106  E10C               	bnz	l4136
  3959  001108  0E7F               	movlw	127
  3960  00110A  197F               	xorwf	(exp@x+2)& (0+255),w,b
  3961  00110C  E109               	bnz	l4136
  3962  00110E  0E7F               	movlw	127
  3963  001110  1980               	xorwf	(exp@x+3)& (0+255),w,b
  3964  001112  A4D8               	btfss	status,2,c
  3965  001114  D005               	goto	l4136
  3966                           
  3967                           ; BSR set to: 0
  3968  001116  6B7D               	clrf	?_exp& (0+255),b
  3969  001118  6B7E               	clrf	(?_exp+1)& (0+255),b
  3970  00111A  6B7F               	clrf	(?_exp+2)& (0+255),b
  3971  00111C  6B80               	clrf	(?_exp+3)& (0+255),b
  3972  00111E  0012               	return	
  3973  001120                     l4136:
  3974                           
  3975                           ; BSR set to: 0
  3976  001120  0E00               	movlw	0
  3977  001122  6E0E               	movwf	___fldiv@f1,c
  3978  001124  6E0F               	movwf	___fldiv@f1+1,c
  3979  001126  0E80               	movlw	128
  3980  001128  6E10               	movwf	___fldiv@f1+2,c
  3981  00112A  0E3F               	movlw	63
  3982  00112C  6E11               	movwf	___fldiv@f1+3,c
  3983  00112E  C07D  F012         	movff	exp@x,___fldiv@f2
  3984  001132  C07E  F013         	movff	exp@x+1,___fldiv@f2+1
  3985  001136  C07F  F014         	movff	exp@x+2,___fldiv@f2+2
  3986  00113A  C080  F015         	movff	exp@x+3,___fldiv@f2+3
  3987  00113E  EC85  F00F         	call	___fldiv	;wreg free
  3988  001142  C00E  F07D         	movff	?___fldiv,?_exp
  3989  001146  C00F  F07E         	movff	?___fldiv+1,?_exp+1
  3990  00114A  C010  F07F         	movff	?___fldiv+2,?_exp+2
  3991  00114E  C011  F080         	movff	?___fldiv+3,?_exp+3
  3992  001152  0012               	return	
  3993  001154                     l1187:
  3994                           
  3995                           ; BSR set to: 0
  3996  001154  C07D  F07D         	movff	exp@x,?_exp
  3997  001158  C07E  F07E         	movff	exp@x+1,?_exp+1
  3998  00115C  C07F  F07F         	movff	exp@x+2,?_exp+2
  3999  001160  C080  F080         	movff	exp@x+3,?_exp+3
  4000  001164  0012               	return		;funcret
  4001  001166                     __end_of_exp:
  4002                           	opt stack 0
  4003                           tblptru	equ	0xFF8
  4004                           tblptrh	equ	0xFF7
  4005                           tblptrl	equ	0xFF6
  4006                           tablat	equ	0xFF5
  4007                           intcon	equ	0xFF2
  4008                           intcon2	equ	0xFF1
  4009                           postinc0	equ	0xFEE
  4010                           wreg	equ	0xFE8
  4011                           postdec1	equ	0xFE5
  4012                           fsr1l	equ	0xFE1
  4013                           status	equ	0xFD8
  4014                           
  4015 ;; *************** function _ldexp *****************
  4016 ;; Defined at:
  4017 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  4018 ;; Parameters:    Size  Location     Type
  4019 ;;  value           4   79[COMRAM] unsigned char 
  4020 ;;  newexp          2   83[COMRAM] int 
  4021 ;; Auto vars:     Size  Location     Type
  4022 ;;		None
  4023 ;; Return value:  Size  Location     Type
  4024 ;;                  4   79[COMRAM] int 
  4025 ;; Registers used:
  4026 ;;		wreg, status,2, status,0
  4027 ;; Tracked objects:
  4028 ;;		On entry : 0/0
  4029 ;;		On exit  : 0/0
  4030 ;;		Unchanged: 0/0
  4031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  4032 ;;      Params:         6       0       0       0
  4033 ;;      Locals:         0       0       0       0
  4034 ;;      Temps:          2       0       0       0
  4035 ;;      Totals:         8       0       0       0
  4036 ;;Total ram usage:        8 bytes
  4037 ;; Hardware stack levels used:    1
  4038 ;; Hardware stack levels required when called:    1
  4039 ;; This function calls:
  4040 ;;		Nothing
  4041 ;; This function is called by:
  4042 ;;		_exp
  4043 ;; This function uses a non-reentrant model
  4044 ;;
  4045                           
  4046                           	psect	text14
  4047  002062                     __ptext14:
  4048                           	opt stack 0
  4049  002062                     _ldexp:
  4050                           	opt stack 25
  4051                           
  4052                           ;incstack = 0
  4053  002062  5050               	movf	ldexp@value,w,c
  4054  002064  1051               	iorwf	ldexp@value+1,w,c
  4055  002066  1052               	iorwf	ldexp@value+2,w,c
  4056  002068  1053               	iorwf	ldexp@value+3,w,c
  4057  00206A  E105               	bnz	l3986
  4058  00206C  6A50               	clrf	?_ldexp,c
  4059  00206E  6A51               	clrf	?_ldexp+1,c
  4060  002070  6A52               	clrf	?_ldexp+2,c
  4061  002072  6A53               	clrf	?_ldexp+3,c
  4062  002074  0012               	return	
  4063  002076                     l3986:
  4064  002076  5053               	movf	ldexp@value+3,w,c
  4065  002078  0B7F               	andlw	127
  4066  00207A  6E56               	movwf	??_ldexp& (0+255),c
  4067  00207C  6A57               	clrf	(??_ldexp+1)& (0+255),c
  4068  00207E  90D8               	bcf	status,0,c
  4069  002080  3656               	rlcf	??_ldexp,f,c
  4070  002082  3657               	rlcf	??_ldexp+1,f,c
  4071  002084  5056               	movf	??_ldexp,w,c
  4072  002086  2654               	addwf	ldexp@newexp,f,c
  4073  002088  5057               	movf	??_ldexp+1,w,c
  4074  00208A  2255               	addwfc	ldexp@newexp+1,f,c
  4075  00208C  0E01               	movlw	1
  4076  00208E  AE52               	btfss	ldexp@value+2,7,c
  4077  002090  0E00               	movlw	0
  4078  002092  2654               	addwf	ldexp@newexp,f,c
  4079  002094  0E00               	movlw	0
  4080  002096  2255               	addwfc	ldexp@newexp+1,f,c
  4081  002098  AE55               	btfss	ldexp@newexp+1,7,c
  4082  00209A  D005               	goto	l3992
  4083  00209C  6A50               	clrf	?_ldexp,c
  4084  00209E  6A51               	clrf	?_ldexp+1,c
  4085  0020A0  6A52               	clrf	?_ldexp+2,c
  4086  0020A2  6A53               	clrf	?_ldexp+3,c
  4087  0020A4  0012               	return	
  4088  0020A6                     l3992:
  4089  0020A6  BE55               	btfsc	ldexp@newexp+1,7,c
  4090  0020A8  D010               	goto	l4006
  4091  0020AA  0455               	decf	ldexp@newexp+1,w,c
  4092  0020AC  E30E               	bnc	l4006
  4093  0020AE  AE53               	btfss	ldexp@value+3,7,c
  4094  0020B0  D006               	goto	l4002
  4095  0020B2  6850               	setf	?_ldexp,c
  4096  0020B4  6851               	setf	?_ldexp+1,c
  4097  0020B6  0E7F               	movlw	127
  4098  0020B8  6E52               	movwf	?_ldexp+2,c
  4099  0020BA  6853               	setf	?_ldexp+3,c
  4100  0020BC  0CFF               	retlw	255
  4101  0020BE                     l4002:
  4102  0020BE  6850               	setf	?_ldexp,c
  4103  0020C0  6851               	setf	?_ldexp+1,c
  4104  0020C2  0E7F               	movlw	127
  4105  0020C4  6E52               	movwf	?_ldexp+2,c
  4106  0020C6  6E53               	movwf	?_ldexp+3,c
  4107  0020C8  0C7F               	retlw	127
  4108  0020CA                     l4006:
  4109  0020CA  3455               	rlcf	ldexp@newexp+1,w,c
  4110  0020CC  3055               	rrcf	ldexp@newexp+1,w,c
  4111  0020CE  6E57               	movwf	(??_ldexp+1)& (0+255),c
  4112  0020D0  3054               	rrcf	ldexp@newexp,w,c
  4113  0020D2  6E56               	movwf	??_ldexp& (0+255),c
  4114  0020D4  1853               	xorwf	ldexp@value+3,w,c
  4115  0020D6  0B80               	andlw	-128
  4116  0020D8  1856               	xorwf	??_ldexp,w,c
  4117  0020DA  6E53               	movwf	ldexp@value+3,c
  4118  0020DC  C054  F056         	movff	ldexp@newexp,??_ldexp
  4119  0020E0  0E01               	movlw	1
  4120  0020E2  1656               	andwf	??_ldexp,f,c
  4121  0020E4  3256               	rrcf	??_ldexp,f,c
  4122  0020E6  3256               	rrcf	??_ldexp,f,c
  4123  0020E8  5052               	movf	ldexp@value+2,w,c
  4124  0020EA  1856               	xorwf	??_ldexp,w,c
  4125  0020EC  0B7F               	andlw	-129
  4126  0020EE  1856               	xorwf	??_ldexp,w,c
  4127  0020F0  6E52               	movwf	ldexp@value+2,c
  4128  0020F2  C050  F050         	movff	ldexp@value,?_ldexp
  4129  0020F6  C051  F051         	movff	ldexp@value+1,?_ldexp+1
  4130  0020FA  C052  F052         	movff	ldexp@value+2,?_ldexp+2
  4131  0020FE  C053  F053         	movff	ldexp@value+3,?_ldexp+3
  4132  002102  0012               	return		;funcret
  4133  002104                     __end_of_ldexp:
  4134                           	opt stack 0
  4135                           tblptru	equ	0xFF8
  4136                           tblptrh	equ	0xFF7
  4137                           tblptrl	equ	0xFF6
  4138                           tablat	equ	0xFF5
  4139                           intcon	equ	0xFF2
  4140                           intcon2	equ	0xFF1
  4141                           postinc0	equ	0xFEE
  4142                           wreg	equ	0xFE8
  4143                           postdec1	equ	0xFE5
  4144                           fsr1l	equ	0xFE1
  4145                           status	equ	0xFD8
  4146                           
  4147 ;; *************** function _floor *****************
  4148 ;; Defined at:
  4149 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\floor.c"
  4150 ;; Parameters:    Size  Location     Type
  4151 ;;  x               4   19[BANK0 ] int 
  4152 ;; Auto vars:     Size  Location     Type
  4153 ;;  i               4   23[BANK0 ] int 
  4154 ;;  expon           2   27[BANK0 ] int 
  4155 ;; Return value:  Size  Location     Type
  4156 ;;                  4   19[BANK0 ] int 
  4157 ;; Registers used:
  4158 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4159 ;; Tracked objects:
  4160 ;;		On entry : 0/0
  4161 ;;		On exit  : 0/0
  4162 ;;		Unchanged: 0/0
  4163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  4164 ;;      Params:         0       4       0       0
  4165 ;;      Locals:         0       6       0       0
  4166 ;;      Temps:          0       0       0       0
  4167 ;;      Totals:         0      10       0       0
  4168 ;;Total ram usage:       10 bytes
  4169 ;; Hardware stack levels used:    1
  4170 ;; Hardware stack levels required when called:    3
  4171 ;; This function calls:
  4172 ;;		___altofl
  4173 ;;		___fladd
  4174 ;;		___flge
  4175 ;;		___fltol
  4176 ;;		_frexp
  4177 ;; This function is called by:
  4178 ;;		_format_double
  4179 ;;		_exp
  4180 ;; This function uses a non-reentrant model
  4181 ;;
  4182                           
  4183                           	psect	text15
  4184  0019EE                     __ptext15:
  4185                           	opt stack 0
  4186  0019EE                     _floor:
  4187                           	opt stack 23
  4188                           
  4189                           ;incstack = 0
  4190  0019EE  C073  F004         	movff	floor@x,frexp@value
  4191  0019F2  C074  F005         	movff	floor@x+1,frexp@value+1
  4192  0019F6  C075  F006         	movff	floor@x+2,frexp@value+2
  4193  0019FA  C076  F007         	movff	floor@x+3,frexp@value+3
  4194  0019FE  0E7B               	movlw	low floor@expon
  4195  001A00  6E08               	movwf	frexp@eptr,c
  4196  001A02  EC12  F011         	call	_frexp	;wreg free
  4197  001A06  0100               	movlb	0	; () banked
  4198  001A08  AF7C               	btfss	(floor@expon+1)& (0+255),7,b
  4199  001A0A  D00F               	goto	l3910
  4200                           
  4201                           ; BSR set to: 0
  4202  001A0C  AF76               	btfss	(floor@x+3)& (0+255),7,b
  4203  001A0E  D008               	goto	l892
  4204                           
  4205                           ; BSR set to: 0
  4206  001A10  0E00               	movlw	0
  4207  001A12  6F73               	movwf	?_floor& (0+255),b
  4208  001A14  6F74               	movwf	(?_floor+1)& (0+255),b
  4209  001A16  0E80               	movlw	128
  4210  001A18  6F75               	movwf	(?_floor+2)& (0+255),b
  4211  001A1A  0EBF               	movlw	191
  4212  001A1C  6F76               	movwf	(?_floor+3)& (0+255),b
  4213  001A1E  0CBF               	retlw	191
  4214  001A20                     l892:
  4215                           
  4216                           ; BSR set to: 0
  4217  001A20  6B73               	clrf	?_floor& (0+255),b
  4218  001A22  6B74               	clrf	(?_floor+1)& (0+255),b
  4219  001A24  6B75               	clrf	(?_floor+2)& (0+255),b
  4220  001A26  6B76               	clrf	(?_floor+3)& (0+255),b
  4221  001A28  0012               	return	
  4222  001A2A                     l3910:
  4223                           
  4224                           ; BSR set to: 0
  4225  001A2A  517C               	movf	(floor@expon+1)& (0+255),w,b
  4226  001A2C  E103               	bnz	u3200
  4227  001A2E  0E1D               	movlw	29
  4228  001A30  5D7B               	subwf	floor@expon& (0+255),w,b
  4229  001A32  E309               	bnc	l3914
  4230  001A34                     u3200:
  4231                           
  4232                           ; BSR set to: 0
  4233  001A34  C073  F073         	movff	floor@x,?_floor
  4234  001A38  C074  F074         	movff	floor@x+1,?_floor+1
  4235  001A3C  C075  F075         	movff	floor@x+2,?_floor+2
  4236  001A40  C076  F076         	movff	floor@x+3,?_floor+3
  4237  001A44  0012               	return	
  4238  001A46                     l3914:
  4239                           
  4240                           ; BSR set to: 0
  4241  001A46  C073  F064         	movff	floor@x,___fltol@f1
  4242  001A4A  C074  F065         	movff	floor@x+1,___fltol@f1+1
  4243  001A4E  C075  F066         	movff	floor@x+2,___fltol@f1+2
  4244  001A52  C076  F067         	movff	floor@x+3,___fltol@f1+3
  4245  001A56  EC82  F010         	call	___fltol	;wreg free
  4246  001A5A  C064  F06E         	movff	?___fltol,___altofl@c
  4247  001A5E  C065  F06F         	movff	?___fltol+1,___altofl@c+1
  4248  001A62  C066  F070         	movff	?___fltol+2,___altofl@c+2
  4249  001A66  C067  F071         	movff	?___fltol+3,___altofl@c+3
  4250  001A6A  EC71  F012         	call	___altofl	;wreg free
  4251  001A6E  C06E  F077         	movff	?___altofl,floor@i
  4252  001A72  C06F  F078         	movff	?___altofl+1,floor@i+1
  4253  001A76  C070  F079         	movff	?___altofl+2,floor@i+2
  4254  001A7A  C071  F07A         	movff	?___altofl+3,floor@i+3
  4255  001A7E  C073  F004         	movff	floor@x,___flge@ff1
  4256  001A82  C074  F005         	movff	floor@x+1,___flge@ff1+1
  4257  001A86  C075  F006         	movff	floor@x+2,___flge@ff1+2
  4258  001A8A  C076  F007         	movff	floor@x+3,___flge@ff1+3
  4259  001A8E  C077  F008         	movff	floor@i,___flge@ff2
  4260  001A92  C078  F009         	movff	floor@i+1,___flge@ff2+1
  4261  001A96  C079  F00A         	movff	floor@i+2,___flge@ff2+2
  4262  001A9A  C07A  F00B         	movff	floor@i+3,___flge@ff2+3
  4263  001A9E  EC01  F012         	call	___flge	;wreg free
  4264  001AA2  E21A               	bc	l895
  4265  001AA4  C077  F038         	movff	floor@i,___fladd@f1
  4266  001AA8  C078  F039         	movff	floor@i+1,___fladd@f1+1
  4267  001AAC  C079  F03A         	movff	floor@i+2,___fladd@f1+2
  4268  001AB0  C07A  F03B         	movff	floor@i+3,___fladd@f1+3
  4269  001AB4  0E00               	movlw	0
  4270  001AB6  6E3C               	movwf	___fladd@f2,c
  4271  001AB8  6E3D               	movwf	___fladd@f2+1,c
  4272  001ABA  0E80               	movlw	128
  4273  001ABC  6E3E               	movwf	___fladd@f2+2,c
  4274  001ABE  0EBF               	movlw	191
  4275  001AC0  6E3F               	movwf	___fladd@f2+3,c
  4276  001AC2  EC26  F00B         	call	___fladd	;wreg free
  4277  001AC6  C038  F073         	movff	?___fladd,?_floor
  4278  001ACA  C039  F074         	movff	?___fladd+1,?_floor+1
  4279  001ACE  C03A  F075         	movff	?___fladd+2,?_floor+2
  4280  001AD2  C03B  F076         	movff	?___fladd+3,?_floor+3
  4281  001AD6  0012               	return	
  4282  001AD8                     l895:
  4283  001AD8  C077  F073         	movff	floor@i,?_floor
  4284  001ADC  C078  F074         	movff	floor@i+1,?_floor+1
  4285  001AE0  C079  F075         	movff	floor@i+2,?_floor+2
  4286  001AE4  C07A  F076         	movff	floor@i+3,?_floor+3
  4287  001AE8  0012               	return		;funcret
  4288  001AEA                     __end_of_floor:
  4289                           	opt stack 0
  4290                           tblptru	equ	0xFF8
  4291                           tblptrh	equ	0xFF7
  4292                           tblptrl	equ	0xFF6
  4293                           tablat	equ	0xFF5
  4294                           intcon	equ	0xFF2
  4295                           intcon2	equ	0xFF1
  4296                           postinc0	equ	0xFEE
  4297                           wreg	equ	0xFE8
  4298                           postdec1	equ	0xFE5
  4299                           fsr1l	equ	0xFE1
  4300                           status	equ	0xFD8
  4301                           
  4302 ;; *************** function ___fltol *****************
  4303 ;; Defined at:
  4304 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fltol.c"
  4305 ;; Parameters:    Size  Location     Type
  4306 ;;  f1              4    4[BANK0 ] int 
  4307 ;; Auto vars:     Size  Location     Type
  4308 ;;  exp1            1   13[BANK0 ] unsigned char 
  4309 ;;  sign1           1   12[BANK0 ] unsigned char 
  4310 ;; Return value:  Size  Location     Type
  4311 ;;                  4    4[BANK0 ] long 
  4312 ;; Registers used:
  4313 ;;		wreg, status,2, status,0
  4314 ;; Tracked objects:
  4315 ;;		On entry : 0/0
  4316 ;;		On exit  : F/0
  4317 ;;		Unchanged: 0/0
  4318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  4319 ;;      Params:         0       4       0       0
  4320 ;;      Locals:         0       2       0       0
  4321 ;;      Temps:          0       4       0       0
  4322 ;;      Totals:         0      10       0       0
  4323 ;;Total ram usage:       10 bytes
  4324 ;; Hardware stack levels used:    1
  4325 ;; Hardware stack levels required when called:    1
  4326 ;; This function calls:
  4327 ;;		Nothing
  4328 ;; This function is called by:
  4329 ;;		_format_double
  4330 ;;		_measure_capacitance
  4331 ;;		_measure_inductance
  4332 ;;		_floor
  4333 ;;		_pow
  4334 ;;		_exp
  4335 ;; This function uses a non-reentrant model
  4336 ;;
  4337                           
  4338                           	psect	text16
  4339  002104                     __ptext16:
  4340                           	opt stack 0
  4341  002104                     ___fltol:
  4342                           	opt stack 28
  4343                           
  4344                           ;incstack = 0
  4345  002104  0100               	movlb	0	; () banked
  4346  002106  3566               	rlcf	(___fltol@f1+2)& (0+255),w,b
  4347  002108  3567               	rlcf	(___fltol@f1+3)& (0+255),w,b
  4348  00210A  6F6D               	movwf	___fltol@exp1& (0+255),b
  4349  00210C  516D               	movf	___fltol@exp1& (0+255),w,b
  4350  00210E  E105               	bnz	l3844
  4351  002110                     l3842:
  4352                           
  4353                           ; BSR set to: 0
  4354  002110  6B64               	clrf	?___fltol& (0+255),b
  4355  002112  6B65               	clrf	(?___fltol+1)& (0+255),b
  4356  002114  6B66               	clrf	(?___fltol+2)& (0+255),b
  4357  002116  6B67               	clrf	(?___fltol+3)& (0+255),b
  4358  002118  0012               	return	
  4359  00211A                     l3844:
  4360                           
  4361                           ; BSR set to: 0
  4362  00211A  C064  F068         	movff	___fltol@f1,??___fltol
  4363  00211E  C065  F069         	movff	___fltol@f1+1,??___fltol+1
  4364  002122  C066  F06A         	movff	___fltol@f1+2,??___fltol+2
  4365  002126  C067  F06B         	movff	___fltol@f1+3,??___fltol+3
  4366  00212A  0E20               	movlw	32
  4367  00212C  D005               	goto	u3100
  4368  00212E                     u3105:
  4369  00212E  90D8               	bcf	status,0,c
  4370  002130  336B               	rrcf	(??___fltol+3)& (0+255),f,b
  4371  002132  336A               	rrcf	(??___fltol+2)& (0+255),f,b
  4372  002134  3369               	rrcf	(??___fltol+1)& (0+255),f,b
  4373  002136  3368               	rrcf	??___fltol& (0+255),f,b
  4374  002138                     u3100:
  4375  002138  2EE8               	decfsz	wreg,f,c
  4376  00213A  D7F9               	goto	u3105
  4377  00213C  5168               	movf	??___fltol& (0+255),w,b
  4378  00213E  6F6C               	movwf	___fltol@sign1& (0+255),b
  4379                           
  4380                           ; BSR set to: 0
  4381  002140  8F66               	bsf	(___fltol@f1+2)& (0+255),7,b
  4382                           
  4383                           ; BSR set to: 0
  4384  002142  6B67               	clrf	(___fltol@f1+3)& (0+255),b
  4385                           
  4386                           ; BSR set to: 0
  4387  002144  0E96               	movlw	150
  4388  002146  5F6D               	subwf	___fltol@exp1& (0+255),f,b
  4389                           
  4390                           ; BSR set to: 0
  4391  002148  AF6D               	btfss	___fltol@exp1& (0+255),7,b
  4392  00214A  D00C               	goto	l3862
  4393                           
  4394                           ; BSR set to: 0
  4395  00214C  516D               	movf	___fltol@exp1& (0+255),w,b
  4396  00214E  0A80               	xorlw	128
  4397  002150  0F97               	addlw	151
  4398  002152  E3DE               	bnc	l3842
  4399  002154                     l3858:
  4400                           
  4401                           ; BSR set to: 0
  4402  002154  90D8               	bcf	status,0,c
  4403  002156  3367               	rrcf	(___fltol@f1+3)& (0+255),f,b
  4404  002158  3366               	rrcf	(___fltol@f1+2)& (0+255),f,b
  4405  00215A  3365               	rrcf	(___fltol@f1+1)& (0+255),f,b
  4406  00215C  3364               	rrcf	___fltol@f1& (0+255),f,b
  4407                           
  4408                           ; BSR set to: 0
  4409  00215E  3F6D               	incfsz	___fltol@exp1& (0+255),f,b
  4410  002160  D7F9               	goto	l3858
  4411  002162  D00C               	goto	l3870
  4412  002164                     l3862:
  4413                           
  4414                           ; BSR set to: 0
  4415  002164  0E1F               	movlw	31
  4416  002166  656D               	cpfsgt	___fltol@exp1& (0+255),b
  4417  002168  D007               	goto	l3868
  4418  00216A  D7D2               	goto	l3842
  4419  00216C                     l3866:
  4420                           
  4421                           ; BSR set to: 0
  4422  00216C  90D8               	bcf	status,0,c
  4423  00216E  3764               	rlcf	___fltol@f1& (0+255),f,b
  4424  002170  3765               	rlcf	(___fltol@f1+1)& (0+255),f,b
  4425  002172  3766               	rlcf	(___fltol@f1+2)& (0+255),f,b
  4426  002174  3767               	rlcf	(___fltol@f1+3)& (0+255),f,b
  4427  002176  076D               	decf	___fltol@exp1& (0+255),f,b
  4428  002178                     l3868:
  4429                           
  4430                           ; BSR set to: 0
  4431  002178  516D               	movf	___fltol@exp1& (0+255),w,b
  4432  00217A  E1F8               	bnz	l3866
  4433  00217C                     l3870:
  4434                           
  4435                           ; BSR set to: 0
  4436  00217C  516C               	movf	___fltol@sign1& (0+255),w,b
  4437  00217E  E008               	bz	l3874
  4438                           
  4439                           ; BSR set to: 0
  4440  002180  1F67               	comf	(___fltol@f1+3)& (0+255),f,b
  4441  002182  1F66               	comf	(___fltol@f1+2)& (0+255),f,b
  4442  002184  1F65               	comf	(___fltol@f1+1)& (0+255),f,b
  4443  002186  6D64               	negf	___fltol@f1& (0+255),b
  4444  002188  0E00               	movlw	0
  4445  00218A  2365               	addwfc	(___fltol@f1+1)& (0+255),f,b
  4446  00218C  2366               	addwfc	(___fltol@f1+2)& (0+255),f,b
  4447  00218E  2367               	addwfc	(___fltol@f1+3)& (0+255),f,b
  4448  002190                     l3874:
  4449                           
  4450                           ; BSR set to: 0
  4451  002190  C064  F064         	movff	___fltol@f1,?___fltol
  4452  002194  C065  F065         	movff	___fltol@f1+1,?___fltol+1
  4453  002198  C066  F066         	movff	___fltol@f1+2,?___fltol+2
  4454  00219C  C067  F067         	movff	___fltol@f1+3,?___fltol+3
  4455                           
  4456                           ; BSR set to: 0
  4457  0021A0  0012               	return		;funcret
  4458  0021A2                     __end_of___fltol:
  4459                           	opt stack 0
  4460                           tblptru	equ	0xFF8
  4461                           tblptrh	equ	0xFF7
  4462                           tblptrl	equ	0xFF6
  4463                           tablat	equ	0xFF5
  4464                           intcon	equ	0xFF2
  4465                           intcon2	equ	0xFF1
  4466                           postinc0	equ	0xFEE
  4467                           wreg	equ	0xFE8
  4468                           postdec1	equ	0xFE5
  4469                           fsr1l	equ	0xFE1
  4470                           status	equ	0xFD8
  4471                           
  4472 ;; *************** function ___flge *****************
  4473 ;; Defined at:
  4474 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flge.c"
  4475 ;; Parameters:    Size  Location     Type
  4476 ;;  ff1             4    3[COMRAM] long 
  4477 ;;  ff2             4    7[COMRAM] long 
  4478 ;; Auto vars:     Size  Location     Type
  4479 ;;		None
  4480 ;; Return value:  Size  Location     Type
  4481 ;;		None               void
  4482 ;; Registers used:
  4483 ;;		wreg, status,2, status,0
  4484 ;; Tracked objects:
  4485 ;;		On entry : 0/0
  4486 ;;		On exit  : 0/0
  4487 ;;		Unchanged: 0/0
  4488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  4489 ;;      Params:         8       0       0       0
  4490 ;;      Locals:         0       0       0       0
  4491 ;;      Temps:          0       0       0       0
  4492 ;;      Totals:         8       0       0       0
  4493 ;;Total ram usage:        8 bytes
  4494 ;; Hardware stack levels used:    1
  4495 ;; Hardware stack levels required when called:    1
  4496 ;; This function calls:
  4497 ;;		Nothing
  4498 ;; This function is called by:
  4499 ;;		_format_double
  4500 ;;		_measure_capacitance
  4501 ;;		_measure_inductance
  4502 ;;		_floor
  4503 ;;		_pow
  4504 ;;		_exp
  4505 ;; This function uses a non-reentrant model
  4506 ;;
  4507                           
  4508                           	psect	text17
  4509  002402                     __ptext17:
  4510                           	opt stack 0
  4511  002402                     ___flge:
  4512                           	opt stack 28
  4513                           
  4514                           ; BSR set to: 0
  4515                           ;incstack = 0
  4516  002402  AE07               	btfss	___flge@ff1+3,7,c
  4517  002404  D009               	goto	l3810
  4518  002406  6C04               	negf	___flge@ff1,c
  4519  002408  1E05               	comf	___flge@ff1+1,f,c
  4520  00240A  B0D8               	btfsc	status,0,c
  4521  00240C  2A05               	incf	___flge@ff1+1,f,c
  4522  00240E  1E06               	comf	___flge@ff1+2,f,c
  4523  002410  B0D8               	btfsc	status,0,c
  4524  002412  2A06               	incf	___flge@ff1+2,f,c
  4525  002414  0E80               	movlw	128
  4526  002416  5607               	subfwb	___flge@ff1+3,f,c
  4527  002418                     l3810:
  4528  002418  AE0B               	btfss	___flge@ff2+3,7,c
  4529  00241A  D009               	goto	l854
  4530  00241C  6C08               	negf	___flge@ff2,c
  4531  00241E  1E09               	comf	___flge@ff2+1,f,c
  4532  002420  B0D8               	btfsc	status,0,c
  4533  002422  2A09               	incf	___flge@ff2+1,f,c
  4534  002424  1E0A               	comf	___flge@ff2+2,f,c
  4535  002426  B0D8               	btfsc	status,0,c
  4536  002428  2A0A               	incf	___flge@ff2+2,f,c
  4537  00242A  0E80               	movlw	128
  4538  00242C  560B               	subfwb	___flge@ff2+3,f,c
  4539  00242E                     l854:
  4540  00242E  0E80               	movlw	128
  4541  002430  1A07               	xorwf	___flge@ff1+3,f,c
  4542  002432  1A0B               	xorwf	___flge@ff2+3,f,c
  4543  002434  5008               	movf	___flge@ff2,w,c
  4544  002436  5C04               	subwf	___flge@ff1,w,c
  4545  002438  5009               	movf	___flge@ff2+1,w,c
  4546  00243A  5805               	subwfb	___flge@ff1+1,w,c
  4547  00243C  500A               	movf	___flge@ff2+2,w,c
  4548  00243E  5806               	subwfb	___flge@ff1+2,w,c
  4549  002440  500B               	movf	___flge@ff2+3,w,c
  4550  002442  5807               	subwfb	___flge@ff1+3,w,c
  4551  002444  E202               	bc	l3816
  4552  002446  90D8               	bcf	status,0,c
  4553  002448  0012               	return	
  4554  00244A                     l3816:
  4555  00244A  80D8               	bsf	status,0,c
  4556  00244C  0012               	return		;funcret
  4557  00244E                     __end_of___flge:
  4558                           	opt stack 0
  4559                           tblptru	equ	0xFF8
  4560                           tblptrh	equ	0xFF7
  4561                           tblptrl	equ	0xFF6
  4562                           tablat	equ	0xFF5
  4563                           intcon	equ	0xFF2
  4564                           intcon2	equ	0xFF1
  4565                           postinc0	equ	0xFEE
  4566                           wreg	equ	0xFE8
  4567                           postdec1	equ	0xFE5
  4568                           fsr1l	equ	0xFE1
  4569                           status	equ	0xFD8
  4570                           
  4571 ;; *************** function ___altofl *****************
  4572 ;; Defined at:
  4573 ;;		line 36 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\altofl.c"
  4574 ;; Parameters:    Size  Location     Type
  4575 ;;  c               4   14[BANK0 ] long 
  4576 ;; Auto vars:     Size  Location     Type
  4577 ;;  sign            1   18[BANK0 ] unsigned char 
  4578 ;; Return value:  Size  Location     Type
  4579 ;;                  4   14[BANK0 ] unsigned char 
  4580 ;; Registers used:
  4581 ;;		wreg, status,2, status,0, cstack
  4582 ;; Tracked objects:
  4583 ;;		On entry : F/0
  4584 ;;		On exit  : 0/0
  4585 ;;		Unchanged: 0/0
  4586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  4587 ;;      Params:         0       4       0       0
  4588 ;;      Locals:         0       1       0       0
  4589 ;;      Temps:          0       0       0       0
  4590 ;;      Totals:         0       5       0       0
  4591 ;;Total ram usage:        5 bytes
  4592 ;; Hardware stack levels used:    1
  4593 ;; Hardware stack levels required when called:    2
  4594 ;; This function calls:
  4595 ;;		___flpack
  4596 ;; This function is called by:
  4597 ;;		_floor
  4598 ;; This function uses a non-reentrant model
  4599 ;;
  4600                           
  4601                           	psect	text18
  4602  0024E2                     __ptext18:
  4603                           	opt stack 0
  4604  0024E2                     ___altofl:
  4605                           	opt stack 23
  4606                           
  4607                           ; BSR set to: 0
  4608                           
  4609                           ;incstack = 0
  4610  0024E2  6B72               	clrf	___altofl@sign& (0+255),b
  4611                           
  4612                           ; BSR set to: 0
  4613  0024E4  AF71               	btfss	(___altofl@c+3)& (0+255),7,b
  4614  0024E6  D00A               	goto	l3696
  4615                           
  4616                           ; BSR set to: 0
  4617  0024E8  1F71               	comf	(___altofl@c+3)& (0+255),f,b
  4618  0024EA  1F70               	comf	(___altofl@c+2)& (0+255),f,b
  4619  0024EC  1F6F               	comf	(___altofl@c+1)& (0+255),f,b
  4620  0024EE  6D6E               	negf	___altofl@c& (0+255),b
  4621  0024F0  0E00               	movlw	0
  4622  0024F2  236F               	addwfc	(___altofl@c+1)& (0+255),f,b
  4623  0024F4  2370               	addwfc	(___altofl@c+2)& (0+255),f,b
  4624  0024F6  2371               	addwfc	(___altofl@c+3)& (0+255),f,b
  4625                           
  4626                           ; BSR set to: 0
  4627  0024F8  0E01               	movlw	1
  4628  0024FA  6F72               	movwf	___altofl@sign& (0+255),b
  4629  0024FC                     l3696:
  4630                           
  4631                           ; BSR set to: 0
  4632  0024FC  C06E  F004         	movff	___altofl@c,___flpack@arg
  4633  002500  C06F  F005         	movff	___altofl@c+1,___flpack@arg+1
  4634  002504  C070  F006         	movff	___altofl@c+2,___flpack@arg+2
  4635  002508  C071  F007         	movff	___altofl@c+3,___flpack@arg+3
  4636  00250C  0E96               	movlw	150
  4637  00250E  6E08               	movwf	___flpack@exp,c
  4638  002510  C072  F009         	movff	___altofl@sign,___flpack@sign
  4639  002514  ECC8  F00E         	call	___flpack	;wreg free
  4640  002518  C004  F06E         	movff	?___flpack,?___altofl
  4641  00251C  C005  F06F         	movff	?___flpack+1,?___altofl+1
  4642  002520  C006  F070         	movff	?___flpack+2,?___altofl+2
  4643  002524  C007  F071         	movff	?___flpack+3,?___altofl+3
  4644  002528  0012               	return		;funcret
  4645  00252A                     __end_of___altofl:
  4646                           	opt stack 0
  4647                           tblptru	equ	0xFF8
  4648                           tblptrh	equ	0xFF7
  4649                           tblptrl	equ	0xFF6
  4650                           tablat	equ	0xFF5
  4651                           intcon	equ	0xFF2
  4652                           intcon2	equ	0xFF1
  4653                           postinc0	equ	0xFEE
  4654                           wreg	equ	0xFE8
  4655                           postdec1	equ	0xFE5
  4656                           fsr1l	equ	0xFE1
  4657                           status	equ	0xFD8
  4658                           
  4659 ;; *************** function ___flsub *****************
  4660 ;; Defined at:
  4661 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flsub.c"
  4662 ;; Parameters:    Size  Location     Type
  4663 ;;  f1              4   67[COMRAM] unsigned char 
  4664 ;;  f2              4   71[COMRAM] unsigned char 
  4665 ;; Auto vars:     Size  Location     Type
  4666 ;;		None
  4667 ;; Return value:  Size  Location     Type
  4668 ;;                  4   67[COMRAM] unsigned char 
  4669 ;; Registers used:
  4670 ;;		wreg, status,2, status,0, cstack
  4671 ;; Tracked objects:
  4672 ;;		On entry : 0/0
  4673 ;;		On exit  : 0/0
  4674 ;;		Unchanged: 0/0
  4675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  4676 ;;      Params:         8       0       0       0
  4677 ;;      Locals:         0       0       0       0
  4678 ;;      Temps:          0       0       0       0
  4679 ;;      Totals:         8       0       0       0
  4680 ;;Total ram usage:        8 bytes
  4681 ;; Hardware stack levels used:    1
  4682 ;; Hardware stack levels required when called:    3
  4683 ;; This function calls:
  4684 ;;		___fladd
  4685 ;; This function is called by:
  4686 ;;		_format_double
  4687 ;;		_measure_capacitance
  4688 ;;		_measure_inductance
  4689 ;;		_exp
  4690 ;; This function uses a non-reentrant model
  4691 ;;
  4692                           
  4693                           	psect	text19
  4694  00252A                     __ptext19:
  4695                           	opt stack 0
  4696  00252A                     ___flsub:
  4697                           	opt stack 26
  4698                           
  4699                           ;incstack = 0
  4700  00252A  5048               	movf	___flsub@f2,w,c
  4701  00252C  1049               	iorwf	___flsub@f2+1,w,c
  4702  00252E  104A               	iorwf	___flsub@f2+2,w,c
  4703  002530  104B               	iorwf	___flsub@f2+3,w,c
  4704  002532  E002               	bz	l3960
  4705  002534  0E80               	movlw	128
  4706  002536  1A4B               	xorwf	___flsub@f2+3,f,c
  4707  002538                     l3960:
  4708  002538  C044  F038         	movff	___flsub@f1,___fladd@f1
  4709  00253C  C045  F039         	movff	___flsub@f1+1,___fladd@f1+1
  4710  002540  C046  F03A         	movff	___flsub@f1+2,___fladd@f1+2
  4711  002544  C047  F03B         	movff	___flsub@f1+3,___fladd@f1+3
  4712  002548  C048  F03C         	movff	___flsub@f2,___fladd@f2
  4713  00254C  C049  F03D         	movff	___flsub@f2+1,___fladd@f2+1
  4714  002550  C04A  F03E         	movff	___flsub@f2+2,___fladd@f2+2
  4715  002554  C04B  F03F         	movff	___flsub@f2+3,___fladd@f2+3
  4716  002558  EC26  F00B         	call	___fladd	;wreg free
  4717  00255C  C038  F044         	movff	?___fladd,?___flsub
  4718  002560  C039  F045         	movff	?___fladd+1,?___flsub+1
  4719  002564  C03A  F046         	movff	?___fladd+2,?___flsub+2
  4720  002568  C03B  F047         	movff	?___fladd+3,?___flsub+3
  4721  00256C  0012               	return		;funcret
  4722  00256E                     __end_of___flsub:
  4723                           	opt stack 0
  4724                           tblptru	equ	0xFF8
  4725                           tblptrh	equ	0xFF7
  4726                           tblptrl	equ	0xFF6
  4727                           tablat	equ	0xFF5
  4728                           intcon	equ	0xFF2
  4729                           intcon2	equ	0xFF1
  4730                           postinc0	equ	0xFEE
  4731                           wreg	equ	0xFE8
  4732                           postdec1	equ	0xFE5
  4733                           fsr1l	equ	0xFE1
  4734                           status	equ	0xFD8
  4735                           
  4736 ;; *************** function ___flneg *****************
  4737 ;; Defined at:
  4738 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flneg.c"
  4739 ;; Parameters:    Size  Location     Type
  4740 ;;  f1              4    3[COMRAM] unsigned char 
  4741 ;; Auto vars:     Size  Location     Type
  4742 ;;		None
  4743 ;; Return value:  Size  Location     Type
  4744 ;;                  4    3[COMRAM] unsigned char 
  4745 ;; Registers used:
  4746 ;;		wreg, status,2, status,0
  4747 ;; Tracked objects:
  4748 ;;		On entry : F/0
  4749 ;;		On exit  : F/0
  4750 ;;		Unchanged: F/0
  4751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  4752 ;;      Params:         4       0       0       0
  4753 ;;      Locals:         0       0       0       0
  4754 ;;      Temps:          0       0       0       0
  4755 ;;      Totals:         4       0       0       0
  4756 ;;Total ram usage:        4 bytes
  4757 ;; Hardware stack levels used:    1
  4758 ;; Hardware stack levels required when called:    1
  4759 ;; This function calls:
  4760 ;;		Nothing
  4761 ;; This function is called by:
  4762 ;;		_pow
  4763 ;;		_exp
  4764 ;; This function uses a non-reentrant model
  4765 ;;
  4766                           
  4767                           	psect	text20
  4768  00282E                     __ptext20:
  4769                           	opt stack 0
  4770  00282E                     ___flneg:
  4771                           	opt stack 25
  4772                           
  4773                           ; BSR set to: 0
  4774                           
  4775                           ;incstack = 0
  4776  00282E  5004               	movf	___flneg@f1,w,c
  4777  002830  1005               	iorwf	___flneg@f1+1,w,c
  4778  002832  1006               	iorwf	___flneg@f1+2,w,c
  4779  002834  1007               	iorwf	___flneg@f1+3,w,c
  4780  002836  E002               	bz	l3978
  4781                           
  4782                           ; BSR set to: 0
  4783  002838  0E80               	movlw	128
  4784  00283A  1A07               	xorwf	___flneg@f1+3,f,c
  4785  00283C                     l3978:
  4786                           
  4787                           ; BSR set to: 0
  4788  00283C  C004  F004         	movff	___flneg@f1,?___flneg
  4789  002840  C005  F005         	movff	___flneg@f1+1,?___flneg+1
  4790  002844  C006  F006         	movff	___flneg@f1+2,?___flneg+2
  4791  002848  C007  F007         	movff	___flneg@f1+3,?___flneg+3
  4792                           
  4793                           ; BSR set to: 0
  4794  00284C  0012               	return		;funcret
  4795  00284E                     __end_of___flneg:
  4796                           	opt stack 0
  4797                           tblptru	equ	0xFF8
  4798                           tblptrh	equ	0xFF7
  4799                           tblptrl	equ	0xFF6
  4800                           tablat	equ	0xFF5
  4801                           intcon	equ	0xFF2
  4802                           intcon2	equ	0xFF1
  4803                           postinc0	equ	0xFEE
  4804                           wreg	equ	0xFE8
  4805                           postdec1	equ	0xFE5
  4806                           fsr1l	equ	0xFE1
  4807                           status	equ	0xFD8
  4808                           
  4809 ;; *************** function ___fldiv *****************
  4810 ;; Defined at:
  4811 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldiv.c"
  4812 ;; Parameters:    Size  Location     Type
  4813 ;;  f1              4   13[COMRAM] unsigned char 
  4814 ;;  f2              4   17[COMRAM] unsigned char 
  4815 ;; Auto vars:     Size  Location     Type
  4816 ;;  f3              4   21[COMRAM] unsigned char 
  4817 ;;  sign            1   27[COMRAM] unsigned char 
  4818 ;;  exp             1   26[COMRAM] unsigned char 
  4819 ;;  cntr            1   25[COMRAM] unsigned char 
  4820 ;; Return value:  Size  Location     Type
  4821 ;;                  4   13[COMRAM] unsigned char 
  4822 ;; Registers used:
  4823 ;;		wreg, status,2, status,0, cstack
  4824 ;; Tracked objects:
  4825 ;;		On entry : 0/0
  4826 ;;		On exit  : 0/0
  4827 ;;		Unchanged: 0/0
  4828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  4829 ;;      Params:         8       0       0       0
  4830 ;;      Locals:         7       0       0       0
  4831 ;;      Temps:          0       0       0       0
  4832 ;;      Totals:        15       0       0       0
  4833 ;;Total ram usage:       15 bytes
  4834 ;; Hardware stack levels used:    1
  4835 ;; Hardware stack levels required when called:    2
  4836 ;; This function calls:
  4837 ;;		___flpack
  4838 ;; This function is called by:
  4839 ;;		_format_double
  4840 ;;		_measure_capacitance
  4841 ;;		_measure_inductance
  4842 ;;		_exp
  4843 ;; This function uses a non-reentrant model
  4844 ;;
  4845                           
  4846                           	psect	text21
  4847  001F0A                     __ptext21:
  4848                           	opt stack 0
  4849  001F0A                     ___fldiv:
  4850                           	opt stack 27
  4851                           
  4852                           ; BSR set to: 0
  4853                           ;incstack = 0
  4854  001F0A  3410               	rlcf	___fldiv@f1+2,w,c
  4855  001F0C  3411               	rlcf	___fldiv@f1+3,w,c
  4856  001F0E  6E1B               	movwf	___fldiv@exp,c
  4857  001F10  501B               	movf	___fldiv@exp,w,c
  4858  001F12  E105               	bnz	l3924
  4859  001F14  6A0E               	clrf	?___fldiv,c
  4860  001F16  6A0F               	clrf	?___fldiv+1,c
  4861  001F18  6A10               	clrf	?___fldiv+2,c
  4862  001F1A  6A11               	clrf	?___fldiv+3,c
  4863  001F1C  0012               	return	
  4864  001F1E                     l3924:
  4865  001F1E  3414               	rlcf	___fldiv@f2+2,w,c
  4866  001F20  3415               	rlcf	___fldiv@f2+3,w,c
  4867  001F22  6E1C               	movwf	___fldiv@sign,c
  4868  001F24  501C               	movf	___fldiv@sign,w,c
  4869  001F26  E105               	bnz	l3928
  4870  001F28  6A0E               	clrf	?___fldiv,c
  4871  001F2A  6A0F               	clrf	?___fldiv+1,c
  4872  001F2C  6A10               	clrf	?___fldiv+2,c
  4873  001F2E  6A11               	clrf	?___fldiv+3,c
  4874  001F30  0012               	return	
  4875  001F32                     l3928:
  4876  001F32  501C               	movf	___fldiv@sign,w,c
  4877  001F34  0F89               	addlw	137
  4878  001F36  5E1B               	subwf	___fldiv@exp,f,c
  4879  001F38  C011  F01C         	movff	___fldiv@f1+3,___fldiv@sign
  4880  001F3C  5015               	movf	___fldiv@f2+3,w,c
  4881  001F3E  1A1C               	xorwf	___fldiv@sign,f,c
  4882  001F40  0E80               	movlw	128
  4883  001F42  161C               	andwf	___fldiv@sign,f,c
  4884  001F44  8E10               	bsf	___fldiv@f1+2,7,c
  4885  001F46  6A11               	clrf	___fldiv@f1+3,c
  4886  001F48  8E14               	bsf	___fldiv@f2+2,7,c
  4887  001F4A  6A15               	clrf	___fldiv@f2+3,c
  4888  001F4C  0E20               	movlw	32
  4889  001F4E  6E1A               	movwf	___fldiv@cntr,c
  4890  001F50                     l3940:
  4891  001F50  90D8               	bcf	status,0,c
  4892  001F52  3616               	rlcf	___fldiv@f3,f,c
  4893  001F54  3617               	rlcf	___fldiv@f3+1,f,c
  4894  001F56  3618               	rlcf	___fldiv@f3+2,f,c
  4895  001F58  3619               	rlcf	___fldiv@f3+3,f,c
  4896  001F5A  5012               	movf	___fldiv@f2,w,c
  4897  001F5C  5C0E               	subwf	___fldiv@f1,w,c
  4898  001F5E  5013               	movf	___fldiv@f2+1,w,c
  4899  001F60  580F               	subwfb	___fldiv@f1+1,w,c
  4900  001F62  5014               	movf	___fldiv@f2+2,w,c
  4901  001F64  5810               	subwfb	___fldiv@f1+2,w,c
  4902  001F66  5015               	movf	___fldiv@f2+3,w,c
  4903  001F68  5811               	subwfb	___fldiv@f1+3,w,c
  4904  001F6A  E309               	bnc	l3948
  4905  001F6C  5012               	movf	___fldiv@f2,w,c
  4906  001F6E  5E0E               	subwf	___fldiv@f1,f,c
  4907  001F70  5013               	movf	___fldiv@f2+1,w,c
  4908  001F72  5A0F               	subwfb	___fldiv@f1+1,f,c
  4909  001F74  5014               	movf	___fldiv@f2+2,w,c
  4910  001F76  5A10               	subwfb	___fldiv@f1+2,f,c
  4911  001F78  5015               	movf	___fldiv@f2+3,w,c
  4912  001F7A  5A11               	subwfb	___fldiv@f1+3,f,c
  4913  001F7C  8016               	bsf	___fldiv@f3,0,c
  4914  001F7E                     l3948:
  4915  001F7E  90D8               	bcf	status,0,c
  4916  001F80  360E               	rlcf	___fldiv@f1,f,c
  4917  001F82  360F               	rlcf	___fldiv@f1+1,f,c
  4918  001F84  3610               	rlcf	___fldiv@f1+2,f,c
  4919  001F86  3611               	rlcf	___fldiv@f1+3,f,c
  4920  001F88  2E1A               	decfsz	___fldiv@cntr,f,c
  4921  001F8A  D7E2               	goto	l3940
  4922  001F8C  C016  F004         	movff	___fldiv@f3,___flpack@arg
  4923  001F90  C017  F005         	movff	___fldiv@f3+1,___flpack@arg+1
  4924  001F94  C018  F006         	movff	___fldiv@f3+2,___flpack@arg+2
  4925  001F98  C019  F007         	movff	___fldiv@f3+3,___flpack@arg+3
  4926  001F9C  C01B  F008         	movff	___fldiv@exp,___flpack@exp
  4927  001FA0  C01C  F009         	movff	___fldiv@sign,___flpack@sign
  4928  001FA4  ECC8  F00E         	call	___flpack	;wreg free
  4929  001FA8  C004  F00E         	movff	?___flpack,?___fldiv
  4930  001FAC  C005  F00F         	movff	?___flpack+1,?___fldiv+1
  4931  001FB0  C006  F010         	movff	?___flpack+2,?___fldiv+2
  4932  001FB4  C007  F011         	movff	?___flpack+3,?___fldiv+3
  4933  001FB8  0012               	return		;funcret
  4934  001FBA                     __end_of___fldiv:
  4935                           	opt stack 0
  4936                           tblptru	equ	0xFF8
  4937                           tblptrh	equ	0xFF7
  4938                           tblptrl	equ	0xFF6
  4939                           tablat	equ	0xFF5
  4940                           intcon	equ	0xFF2
  4941                           intcon2	equ	0xFF1
  4942                           postinc0	equ	0xFEE
  4943                           wreg	equ	0xFE8
  4944                           postdec1	equ	0xFE5
  4945                           fsr1l	equ	0xFE1
  4946                           status	equ	0xFD8
  4947                           
  4948 ;; *************** function ___lltofl *****************
  4949 ;; Defined at:
  4950 ;;		line 30 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltofl.c"
  4951 ;; Parameters:    Size  Location     Type
  4952 ;;  c               4   13[COMRAM] unsigned long 
  4953 ;; Auto vars:     Size  Location     Type
  4954 ;;		None
  4955 ;; Return value:  Size  Location     Type
  4956 ;;                  4   13[COMRAM] unsigned long 
  4957 ;; Registers used:
  4958 ;;		wreg, status,2, status,0, cstack
  4959 ;; Tracked objects:
  4960 ;;		On entry : F/0
  4961 ;;		On exit  : 0/0
  4962 ;;		Unchanged: 0/0
  4963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  4964 ;;      Params:         4       0       0       0
  4965 ;;      Locals:         0       0       0       0
  4966 ;;      Temps:          0       0       0       0
  4967 ;;      Totals:         4       0       0       0
  4968 ;;Total ram usage:        4 bytes
  4969 ;; Hardware stack levels used:    1
  4970 ;; Hardware stack levels required when called:    2
  4971 ;; This function calls:
  4972 ;;		___flpack
  4973 ;; This function is called by:
  4974 ;;		_pow
  4975 ;; This function uses a non-reentrant model
  4976 ;;
  4977                           
  4978                           	psect	text22
  4979  0026E6                     __ptext22:
  4980                           	opt stack 0
  4981  0026E6                     ___lltofl:
  4982                           	opt stack 25
  4983                           
  4984                           ; BSR set to: 0
  4985                           
  4986                           ;incstack = 0
  4987  0026E6  C00E  F004         	movff	___lltofl@c,___flpack@arg
  4988  0026EA  C00F  F005         	movff	___lltofl@c+1,___flpack@arg+1
  4989  0026EE  C010  F006         	movff	___lltofl@c+2,___flpack@arg+2
  4990  0026F2  C011  F007         	movff	___lltofl@c+3,___flpack@arg+3
  4991  0026F6  0E96               	movlw	150
  4992  0026F8  6E08               	movwf	___flpack@exp,c
  4993  0026FA  0E00               	movlw	0
  4994  0026FC  6E09               	movwf	___flpack@sign,c
  4995  0026FE  ECC8  F00E         	call	___flpack	;wreg free
  4996  002702  C004  F00E         	movff	?___flpack,?___lltofl
  4997  002706  C005  F00F         	movff	?___flpack+1,?___lltofl+1
  4998  00270A  C006  F010         	movff	?___flpack+2,?___lltofl+2
  4999  00270E  C007  F011         	movff	?___flpack+3,?___lltofl+3
  5000  002712  0012               	return		;funcret
  5001  002714                     __end_of___lltofl:
  5002                           	opt stack 0
  5003                           tblptru	equ	0xFF8
  5004                           tblptrh	equ	0xFF7
  5005                           tblptrl	equ	0xFF6
  5006                           tablat	equ	0xFF5
  5007                           intcon	equ	0xFF2
  5008                           intcon2	equ	0xFF1
  5009                           postinc0	equ	0xFEE
  5010                           wreg	equ	0xFE8
  5011                           postdec1	equ	0xFE5
  5012                           fsr1l	equ	0xFE1
  5013                           status	equ	0xFD8
  5014                           
  5015 ;; *************** function _log10 *****************
  5016 ;; Defined at:
  5017 ;;		line 39 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  5018 ;; Parameters:    Size  Location     Type
  5019 ;;  x               4   85[COMRAM] unsigned long 
  5020 ;; Auto vars:     Size  Location     Type
  5021 ;;		None
  5022 ;; Return value:  Size  Location     Type
  5023 ;;                  4   85[COMRAM] unsigned long 
  5024 ;; Registers used:
  5025 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5026 ;; Tracked objects:
  5027 ;;		On entry : 0/0
  5028 ;;		On exit  : 0/0
  5029 ;;		Unchanged: 0/0
  5030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  5031 ;;      Params:         4       0       0       0
  5032 ;;      Locals:         0       4       0       0
  5033 ;;      Temps:          0       0       0       0
  5034 ;;      Totals:         4       4       0       0
  5035 ;;Total ram usage:        8 bytes
  5036 ;; Hardware stack levels used:    1
  5037 ;; Hardware stack levels required when called:    5
  5038 ;; This function calls:
  5039 ;;		___flmul
  5040 ;;		_log
  5041 ;; This function is called by:
  5042 ;;		_format_double
  5043 ;; This function uses a non-reentrant model
  5044 ;;
  5045                           
  5046                           	psect	text23
  5047  00230C                     __ptext23:
  5048                           	opt stack 0
  5049  00230C                     _log10:
  5050                           	opt stack 23
  5051                           
  5052                           ;incstack = 0
  5053  00230C  C056  F050         	movff	log10@x,log@x
  5054  002310  C057  F051         	movff	log10@x+1,log@x+1
  5055  002314  C058  F052         	movff	log10@x+2,log@x+2
  5056  002318  C059  F053         	movff	log10@x+3,log@x+3
  5057  00231C  ECDA  F00B         	call	_log	;wreg free
  5058  002320  C050  F060         	movff	?_log,_log10$1132
  5059  002324  C051  F061         	movff	?_log+1,_log10$1132+1
  5060  002328  C052  F062         	movff	?_log+2,_log10$1132+2
  5061  00232C  C053  F063         	movff	?_log+3,_log10$1132+3
  5062  002330  C060  F01D         	movff	_log10$1132,___flmul@f1
  5063  002334  C061  F01E         	movff	_log10$1132+1,___flmul@f1+1
  5064  002338  C062  F01F         	movff	_log10$1132+2,___flmul@f1+2
  5065  00233C  C063  F020         	movff	_log10$1132+3,___flmul@f1+3
  5066  002340  0ED9               	movlw	217
  5067  002342  6E21               	movwf	___flmul@f2,c
  5068  002344  0E5B               	movlw	91
  5069  002346  6E22               	movwf	___flmul@f2+1,c
  5070  002348  0EDE               	movlw	222
  5071  00234A  6E23               	movwf	___flmul@f2+2,c
  5072  00234C  0E3E               	movlw	62
  5073  00234E  6E24               	movwf	___flmul@f2+3,c
  5074  002350  ECB3  F008         	call	___flmul	;wreg free
  5075  002354  C01D  F056         	movff	?___flmul,?_log10
  5076  002358  C01E  F057         	movff	?___flmul+1,?_log10+1
  5077  00235C  C01F  F058         	movff	?___flmul+2,?_log10+2
  5078  002360  C020  F059         	movff	?___flmul+3,?_log10+3
  5079  002364  0012               	return		;funcret
  5080  002366                     __end_of_log10:
  5081                           	opt stack 0
  5082                           tblptru	equ	0xFF8
  5083                           tblptrh	equ	0xFF7
  5084                           tblptrl	equ	0xFF6
  5085                           tablat	equ	0xFF5
  5086                           intcon	equ	0xFF2
  5087                           intcon2	equ	0xFF1
  5088                           postinc0	equ	0xFEE
  5089                           wreg	equ	0xFE8
  5090                           postdec1	equ	0xFE5
  5091                           fsr1l	equ	0xFE1
  5092                           status	equ	0xFD8
  5093                           
  5094 ;; *************** function _log *****************
  5095 ;; Defined at:
  5096 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  5097 ;; Parameters:    Size  Location     Type
  5098 ;;  x               4   79[COMRAM] unsigned long 
  5099 ;; Auto vars:     Size  Location     Type
  5100 ;;  exponent        2   83[COMRAM] int 
  5101 ;; Return value:  Size  Location     Type
  5102 ;;                  4   79[COMRAM] int 
  5103 ;; Registers used:
  5104 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5105 ;; Tracked objects:
  5106 ;;		On entry : 0/0
  5107 ;;		On exit  : 0/0
  5108 ;;		Unchanged: 0/0
  5109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  5110 ;;      Params:         4       0       0       0
  5111 ;;      Locals:         2       0       0       0
  5112 ;;      Temps:          0       0       0       0
  5113 ;;      Totals:         6       0       0       0
  5114 ;;Total ram usage:        6 bytes
  5115 ;; Hardware stack levels used:    1
  5116 ;; Hardware stack levels required when called:    4
  5117 ;; This function calls:
  5118 ;;		___awtofl
  5119 ;;		___fladd
  5120 ;;		___flmul
  5121 ;;		_eval_poly
  5122 ;;		_frexp
  5123 ;; This function is called by:
  5124 ;;		_log10
  5125 ;;		_pow
  5126 ;; This function uses a non-reentrant model
  5127 ;;
  5128                           
  5129                           	psect	text24
  5130  0017B4                     __ptext24:
  5131                           	opt stack 0
  5132  0017B4                     _log:
  5133                           	opt stack 23
  5134                           
  5135                           ;incstack = 0
  5136  0017B4  AE53               	btfss	log@x+3,7,c
  5137  0017B6  D005               	goto	l4046
  5138  0017B8  6A50               	clrf	?_log,c
  5139  0017BA  6A51               	clrf	?_log+1,c
  5140  0017BC  6A52               	clrf	?_log+2,c
  5141  0017BE  6A53               	clrf	?_log+3,c
  5142  0017C0  0012               	return	
  5143  0017C2                     l4046:
  5144  0017C2  5050               	movf	log@x,w,c
  5145  0017C4  1051               	iorwf	log@x+1,w,c
  5146  0017C6  1052               	iorwf	log@x+2,w,c
  5147  0017C8  1053               	iorwf	log@x+3,w,c
  5148  0017CA  E105               	bnz	l4050
  5149  0017CC  6A50               	clrf	?_log,c
  5150  0017CE  6A51               	clrf	?_log+1,c
  5151  0017D0  6A52               	clrf	?_log+2,c
  5152  0017D2  6A53               	clrf	?_log+3,c
  5153  0017D4  0012               	return	
  5154  0017D6                     l4050:
  5155  0017D6  6A21               	clrf	___flmul@f2,c
  5156  0017D8  6A22               	clrf	___flmul@f2+1,c
  5157  0017DA  6A23               	clrf	___flmul@f2+2,c
  5158  0017DC  0E40               	movlw	64
  5159  0017DE  6E24               	movwf	___flmul@f2+3,c
  5160  0017E0  0E54               	movlw	low log@exponent
  5161  0017E2  6E08               	movwf	frexp@eptr,c
  5162  0017E4  C050  F004         	movff	log@x,frexp@value
  5163  0017E8  C051  F005         	movff	log@x+1,frexp@value+1
  5164  0017EC  C052  F006         	movff	log@x+2,frexp@value+2
  5165  0017F0  C053  F007         	movff	log@x+3,frexp@value+3
  5166  0017F4  EC12  F011         	call	_frexp	;wreg free
  5167  0017F8  C004  F01D         	movff	?_frexp,___flmul@f1
  5168  0017FC  C005  F01E         	movff	?_frexp+1,___flmul@f1+1
  5169  001800  C006  F01F         	movff	?_frexp+2,___flmul@f1+2
  5170  001804  C007  F020         	movff	?_frexp+3,___flmul@f1+3
  5171  001808  ECB3  F008         	call	___flmul	;wreg free
  5172  00180C  C01D  F038         	movff	?___flmul,___fladd@f1
  5173  001810  C01E  F039         	movff	?___flmul+1,___fladd@f1+1
  5174  001814  C01F  F03A         	movff	?___flmul+2,___fladd@f1+2
  5175  001818  C020  F03B         	movff	?___flmul+3,___fladd@f1+3
  5176  00181C  0E00               	movlw	0
  5177  00181E  6E3C               	movwf	___fladd@f2,c
  5178  001820  6E3D               	movwf	___fladd@f2+1,c
  5179  001822  0E80               	movlw	128
  5180  001824  6E3E               	movwf	___fladd@f2+2,c
  5181  001826  0EBF               	movlw	191
  5182  001828  6E3F               	movwf	___fladd@f2+3,c
  5183  00182A  EC26  F00B         	call	___fladd	;wreg free
  5184  00182E  C038  F050         	movff	?___fladd,log@x
  5185  001832  C039  F051         	movff	?___fladd+1,log@x+1
  5186  001836  C03A  F052         	movff	?___fladd+2,log@x+2
  5187  00183A  C03B  F053         	movff	?___fladd+3,log@x+3
  5188  00183E  0654               	decf	log@exponent,f,c
  5189  001840  A0D8               	btfss	status,0,c
  5190  001842  0655               	decf	log@exponent+1,f,c
  5191  001844  C050  F044         	movff	log@x,eval_poly@x
  5192  001848  C051  F045         	movff	log@x+1,eval_poly@x+1
  5193  00184C  C052  F046         	movff	log@x+2,eval_poly@x+2
  5194  001850  C053  F047         	movff	log@x+3,eval_poly@x+3
  5195  001854  0E29               	movlw	low log@coeff
  5196  001856  6E48               	movwf	eval_poly@d,c
  5197  001858  6A4A               	clrf	eval_poly@n+1,c
  5198  00185A  0E08               	movlw	8
  5199  00185C  6E49               	movwf	eval_poly@n,c
  5200  00185E  EC2B  F00F         	call	_eval_poly	;wreg free
  5201  001862  C044  F050         	movff	?_eval_poly,log@x
  5202  001866  C045  F051         	movff	?_eval_poly+1,log@x+1
  5203  00186A  C046  F052         	movff	?_eval_poly+2,log@x+2
  5204  00186E  C047  F053         	movff	?_eval_poly+3,log@x+3
  5205  001872  0E18               	movlw	24
  5206  001874  6E21               	movwf	___flmul@f2,c
  5207  001876  0E72               	movlw	114
  5208  001878  6E22               	movwf	___flmul@f2+1,c
  5209  00187A  0E31               	movlw	49
  5210  00187C  6E23               	movwf	___flmul@f2+2,c
  5211  00187E  0E3F               	movlw	63
  5212  001880  6E24               	movwf	___flmul@f2+3,c
  5213  001882  C054  F00E         	movff	log@exponent,___awtofl@c
  5214  001886  C055  F00F         	movff	log@exponent+1,___awtofl@c+1
  5215  00188A  ECD6  F012         	call	___awtofl	;wreg free
  5216  00188E  C00E  F01D         	movff	?___awtofl,___flmul@f1
  5217  001892  C00F  F01E         	movff	?___awtofl+1,___flmul@f1+1
  5218  001896  C010  F01F         	movff	?___awtofl+2,___flmul@f1+2
  5219  00189A  C011  F020         	movff	?___awtofl+3,___flmul@f1+3
  5220  00189E  ECB3  F008         	call	___flmul	;wreg free
  5221  0018A2  C01D  F038         	movff	?___flmul,___fladd@f1
  5222  0018A6  C01E  F039         	movff	?___flmul+1,___fladd@f1+1
  5223  0018AA  C01F  F03A         	movff	?___flmul+2,___fladd@f1+2
  5224  0018AE  C020  F03B         	movff	?___flmul+3,___fladd@f1+3
  5225  0018B2  C050  F03C         	movff	log@x,___fladd@f2
  5226  0018B6  C051  F03D         	movff	log@x+1,___fladd@f2+1
  5227  0018BA  C052  F03E         	movff	log@x+2,___fladd@f2+2
  5228  0018BE  C053  F03F         	movff	log@x+3,___fladd@f2+3
  5229  0018C2  EC26  F00B         	call	___fladd	;wreg free
  5230  0018C6  C038  F050         	movff	?___fladd,?_log
  5231  0018CA  C039  F051         	movff	?___fladd+1,?_log+1
  5232  0018CE  C03A  F052         	movff	?___fladd+2,?_log+2
  5233  0018D2  C03B  F053         	movff	?___fladd+3,?_log+3
  5234  0018D6  0012               	return		;funcret
  5235  0018D8                     __end_of_log:
  5236                           	opt stack 0
  5237                           tblptru	equ	0xFF8
  5238                           tblptrh	equ	0xFF7
  5239                           tblptrl	equ	0xFF6
  5240                           tablat	equ	0xFF5
  5241                           intcon	equ	0xFF2
  5242                           intcon2	equ	0xFF1
  5243                           postinc0	equ	0xFEE
  5244                           wreg	equ	0xFE8
  5245                           postdec1	equ	0xFE5
  5246                           fsr1l	equ	0xFE1
  5247                           status	equ	0xFD8
  5248                           
  5249 ;; *************** function _frexp *****************
  5250 ;; Defined at:
  5251 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  5252 ;; Parameters:    Size  Location     Type
  5253 ;;  value           4    3[COMRAM] int 
  5254 ;;  eptr            1    7[COMRAM] PTR int 
  5255 ;;		 -> log@exponent(2), floor@expon(2), 
  5256 ;; Auto vars:     Size  Location     Type
  5257 ;;		None
  5258 ;; Return value:  Size  Location     Type
  5259 ;;                  4    3[COMRAM] PTR int 
  5260 ;; Registers used:
  5261 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5262 ;; Tracked objects:
  5263 ;;		On entry : 0/0
  5264 ;;		On exit  : 0/0
  5265 ;;		Unchanged: 0/0
  5266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  5267 ;;      Params:         5       0       0       0
  5268 ;;      Locals:         0       0       0       0
  5269 ;;      Temps:          2       0       0       0
  5270 ;;      Totals:         7       0       0       0
  5271 ;;Total ram usage:        7 bytes
  5272 ;; Hardware stack levels used:    1
  5273 ;; Hardware stack levels required when called:    1
  5274 ;; This function calls:
  5275 ;;		Nothing
  5276 ;; This function is called by:
  5277 ;;		_floor
  5278 ;;		_log
  5279 ;; This function uses a non-reentrant model
  5280 ;;
  5281                           
  5282                           	psect	text25
  5283  002224                     __ptext25:
  5284                           	opt stack 0
  5285  002224                     _frexp:
  5286                           	opt stack 25
  5287                           
  5288                           ;incstack = 0
  5289  002224  5004               	movf	frexp@value,w,c
  5290  002226  1005               	iorwf	frexp@value+1,w,c
  5291  002228  1006               	iorwf	frexp@value+2,w,c
  5292  00222A  1007               	iorwf	frexp@value+3,w,c
  5293  00222C  E10B               	bnz	l3828
  5294  00222E  5008               	movf	frexp@eptr,w,c
  5295  002230  6ED9               	movwf	fsr2l,c
  5296  002232  6ADA               	clrf	fsr2h,c
  5297  002234  0E00               	movlw	0
  5298  002236  6ADE               	clrf	postinc2,c
  5299  002238  6ADD               	clrf	postdec2,c
  5300  00223A  6A04               	clrf	?_frexp,c
  5301  00223C  6A05               	clrf	?_frexp+1,c
  5302  00223E  6A06               	clrf	?_frexp+2,c
  5303  002240  6A07               	clrf	?_frexp+3,c
  5304  002242  0012               	return	
  5305  002244                     l3828:
  5306  002244  5007               	movf	frexp@value+3,w,c
  5307  002246  0B7F               	andlw	127
  5308  002248  6E09               	movwf	??_frexp& (0+255),c
  5309  00224A  6A0A               	clrf	(??_frexp+1)& (0+255),c
  5310  00224C  90D8               	bcf	status,0,c
  5311  00224E  3609               	rlcf	??_frexp,f,c
  5312  002250  360A               	rlcf	??_frexp+1,f,c
  5313  002252  5008               	movf	frexp@eptr,w,c
  5314  002254  6ED9               	movwf	fsr2l,c
  5315  002256  6ADA               	clrf	fsr2h,c
  5316  002258  C009  FFDE         	movff	??_frexp,postinc2
  5317  00225C  C00A  FFDD         	movff	??_frexp+1,postdec2
  5318  002260  5008               	movf	frexp@eptr,w,c
  5319  002262  6ED9               	movwf	fsr2l,c
  5320  002264  6ADA               	clrf	fsr2h,c
  5321  002266  0E01               	movlw	1
  5322  002268  AE06               	btfss	frexp@value+2,7,c
  5323  00226A  0E00               	movlw	0
  5324  00226C  12DE               	iorwf	postinc2,f,c
  5325  00226E  0E00               	movlw	0
  5326  002270  12DD               	iorwf	postdec2,f,c
  5327  002272  5008               	movf	frexp@eptr,w,c
  5328  002274  6ED9               	movwf	fsr2l,c
  5329  002276  6ADA               	clrf	fsr2h,c
  5330  002278  0E82               	movlw	130
  5331  00227A  26DE               	addwf	postinc2,f,c
  5332  00227C  0EFF               	movlw	255
  5333  00227E  22DD               	addwfc	postdec2,f,c
  5334  002280  5007               	movf	frexp@value+3,w,c
  5335  002282  0B80               	andlw	-128
  5336  002284  093F               	iorlw	63
  5337  002286  6E07               	movwf	frexp@value+3,c
  5338  002288  9E06               	bcf	frexp@value+2,7,c
  5339  00228A  C004  F004         	movff	frexp@value,?_frexp
  5340  00228E  C005  F005         	movff	frexp@value+1,?_frexp+1
  5341  002292  C006  F006         	movff	frexp@value+2,?_frexp+2
  5342  002296  C007  F007         	movff	frexp@value+3,?_frexp+3
  5343  00229A  0012               	return		;funcret
  5344  00229C                     __end_of_frexp:
  5345                           	opt stack 0
  5346                           tblptru	equ	0xFF8
  5347                           tblptrh	equ	0xFF7
  5348                           tblptrl	equ	0xFF6
  5349                           tablat	equ	0xFF5
  5350                           intcon	equ	0xFF2
  5351                           intcon2	equ	0xFF1
  5352                           postinc0	equ	0xFEE
  5353                           wreg	equ	0xFE8
  5354                           postdec1	equ	0xFE5
  5355                           fsr1l	equ	0xFE1
  5356                           postinc2	equ	0xFDE
  5357                           postdec2	equ	0xFDD
  5358                           fsr2h	equ	0xFDA
  5359                           fsr2l	equ	0xFD9
  5360                           status	equ	0xFD8
  5361                           
  5362 ;; *************** function _eval_poly *****************
  5363 ;; Defined at:
  5364 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  5365 ;; Parameters:    Size  Location     Type
  5366 ;;  x               4   67[COMRAM] PTR int 
  5367 ;;  d               1   71[COMRAM] PTR const 
  5368 ;;		 -> exp@coeff(40), log@coeff(36), 
  5369 ;;  n               2   72[COMRAM] int 
  5370 ;; Auto vars:     Size  Location     Type
  5371 ;;  res             4   75[COMRAM] int 
  5372 ;; Return value:  Size  Location     Type
  5373 ;;                  4   67[COMRAM] int 
  5374 ;; Registers used:
  5375 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5376 ;; Tracked objects:
  5377 ;;		On entry : 0/0
  5378 ;;		On exit  : 0/0
  5379 ;;		Unchanged: 0/0
  5380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  5381 ;;      Params:         7       0       0       0
  5382 ;;      Locals:         4       0       0       0
  5383 ;;      Temps:          1       0       0       0
  5384 ;;      Totals:        12       0       0       0
  5385 ;;Total ram usage:       12 bytes
  5386 ;; Hardware stack levels used:    1
  5387 ;; Hardware stack levels required when called:    3
  5388 ;; This function calls:
  5389 ;;		___fladd
  5390 ;;		___flmul
  5391 ;; This function is called by:
  5392 ;;		_log
  5393 ;;		_exp
  5394 ;; This function uses a non-reentrant model
  5395 ;;
  5396                           
  5397                           	psect	text26
  5398  001E56                     __ptext26:
  5399                           	opt stack 0
  5400  001E56                     _eval_poly:
  5401                           	opt stack 23
  5402                           
  5403                           ;incstack = 0
  5404  001E56  5049               	movf	eval_poly@n,w,c
  5405  001E58  0D04               	mullw	4
  5406  001E5A  5048               	movf	eval_poly@d,w,c
  5407  001E5C  24F3               	addwf	prodl,w,c
  5408  001E5E  6E4B               	movwf	??_eval_poly& (0+255),c
  5409  001E60  C04B  FFF6         	movff	??_eval_poly,tblptrl
  5410  001E64                     	if	0	;There is only one active tblptr byte
  5411  001E64                     	endif
  5412  001E64                     	if	0	;tblptru may be non-zero
  5413  001E64                     	endif
  5414  001E64                     	if	0	;tblptru may be non-zero
  5415  001E64                     	endif
  5416  001E64  0009               	tblrd		*+
  5417  001E66  CFF5 F04C          	movff	tablat,eval_poly@res
  5418  001E6A  0009               	tblrd		*+
  5419  001E6C  CFF5 F04D          	movff	tablat,eval_poly@res+1
  5420  001E70  0009               	tblrd		*+
  5421  001E72  CFF5 F04E          	movff	tablat,eval_poly@res+2
  5422  001E76  000A               	tblrd		*-
  5423  001E78  CFF5 F04F          	movff	tablat,eval_poly@res+3
  5424  001E7C  D03A               	goto	l4016
  5425  001E7E                     l4014:
  5426  001E7E  C04C  F021         	movff	eval_poly@res,___flmul@f2
  5427  001E82  C04D  F022         	movff	eval_poly@res+1,___flmul@f2+1
  5428  001E86  C04E  F023         	movff	eval_poly@res+2,___flmul@f2+2
  5429  001E8A  C04F  F024         	movff	eval_poly@res+3,___flmul@f2+3
  5430  001E8E  C044  F01D         	movff	eval_poly@x,___flmul@f1
  5431  001E92  C045  F01E         	movff	eval_poly@x+1,___flmul@f1+1
  5432  001E96  C046  F01F         	movff	eval_poly@x+2,___flmul@f1+2
  5433  001E9A  C047  F020         	movff	eval_poly@x+3,___flmul@f1+3
  5434  001E9E  ECB3  F008         	call	___flmul	;wreg free
  5435  001EA2  C01D  F038         	movff	?___flmul,___fladd@f1
  5436  001EA6  C01E  F039         	movff	?___flmul+1,___fladd@f1+1
  5437  001EAA  C01F  F03A         	movff	?___flmul+2,___fladd@f1+2
  5438  001EAE  C020  F03B         	movff	?___flmul+3,___fladd@f1+3
  5439  001EB2  0649               	decf	eval_poly@n,f,c
  5440  001EB4  A0D8               	btfss	status,0,c
  5441  001EB6  064A               	decf	eval_poly@n+1,f,c
  5442  001EB8  5049               	movf	eval_poly@n,w,c
  5443  001EBA  0D04               	mullw	4
  5444  001EBC  5048               	movf	eval_poly@d,w,c
  5445  001EBE  24F3               	addwf	prodl,w,c
  5446  001EC0  6E4B               	movwf	??_eval_poly& (0+255),c
  5447  001EC2  C04B  FFF6         	movff	??_eval_poly,tblptrl
  5448  001EC6                     	if	0	;There is only one active tblptr byte
  5449  001EC6                     	endif
  5450  001EC6                     	if	0	;tblptru may be non-zero
  5451  001EC6                     	endif
  5452  001EC6                     	if	0	;tblptru may be non-zero
  5453  001EC6                     	endif
  5454  001EC6  0009               	tblrd		*+
  5455  001EC8  CFF5 F03C          	movff	tablat,___fladd@f2
  5456  001ECC  0009               	tblrd		*+
  5457  001ECE  CFF5 F03D          	movff	tablat,___fladd@f2+1
  5458  001ED2  0009               	tblrd		*+
  5459  001ED4  CFF5 F03E          	movff	tablat,___fladd@f2+2
  5460  001ED8  000A               	tblrd		*-
  5461  001EDA  CFF5 F03F          	movff	tablat,___fladd@f2+3
  5462  001EDE  EC26  F00B         	call	___fladd	;wreg free
  5463  001EE2  C038  F04C         	movff	?___fladd,eval_poly@res
  5464  001EE6  C039  F04D         	movff	?___fladd+1,eval_poly@res+1
  5465  001EEA  C03A  F04E         	movff	?___fladd+2,eval_poly@res+2
  5466  001EEE  C03B  F04F         	movff	?___fladd+3,eval_poly@res+3
  5467  001EF2                     l4016:
  5468  001EF2  5049               	movf	eval_poly@n,w,c
  5469  001EF4  104A               	iorwf	eval_poly@n+1,w,c
  5470  001EF6  E1C3               	bnz	l4014
  5471  001EF8  C04C  F044         	movff	eval_poly@res,?_eval_poly
  5472  001EFC  C04D  F045         	movff	eval_poly@res+1,?_eval_poly+1
  5473  001F00  C04E  F046         	movff	eval_poly@res+2,?_eval_poly+2
  5474  001F04  C04F  F047         	movff	eval_poly@res+3,?_eval_poly+3
  5475  001F08  0012               	return		;funcret
  5476  001F0A                     __end_of_eval_poly:
  5477                           	opt stack 0
  5478                           tblptru	equ	0xFF8
  5479                           tblptrh	equ	0xFF7
  5480                           tblptrl	equ	0xFF6
  5481                           tablat	equ	0xFF5
  5482                           prodl	equ	0xFF3
  5483                           intcon	equ	0xFF2
  5484                           intcon2	equ	0xFF1
  5485                           postinc0	equ	0xFEE
  5486                           wreg	equ	0xFE8
  5487                           postdec1	equ	0xFE5
  5488                           fsr1l	equ	0xFE1
  5489                           postinc2	equ	0xFDE
  5490                           postdec2	equ	0xFDD
  5491                           fsr2h	equ	0xFDA
  5492                           fsr2l	equ	0xFD9
  5493                           status	equ	0xFD8
  5494                           
  5495 ;; *************** function ___flmul *****************
  5496 ;; Defined at:
  5497 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flmul.c"
  5498 ;; Parameters:    Size  Location     Type
  5499 ;;  f1              4   28[COMRAM] int 
  5500 ;;  f2              4   32[COMRAM] int 
  5501 ;; Auto vars:     Size  Location     Type
  5502 ;;  f3_as_produc    4   51[COMRAM] unsigned long 
  5503 ;;  sign            1   50[COMRAM] unsigned char 
  5504 ;;  exp             1   49[COMRAM] unsigned char 
  5505 ;;  cntr            1    0        unsigned char 
  5506 ;; Return value:  Size  Location     Type
  5507 ;;                  4   28[COMRAM] unsigned char 
  5508 ;; Registers used:
  5509 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5510 ;; Tracked objects:
  5511 ;;		On entry : 0/0
  5512 ;;		On exit  : 0/0
  5513 ;;		Unchanged: 0/0
  5514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  5515 ;;      Params:         8       0       0       0
  5516 ;;      Locals:         6       0       0       0
  5517 ;;      Temps:         13       0       0       0
  5518 ;;      Totals:        27       0       0       0
  5519 ;;Total ram usage:       27 bytes
  5520 ;; Hardware stack levels used:    1
  5521 ;; Hardware stack levels required when called:    2
  5522 ;; This function calls:
  5523 ;;		___flpack
  5524 ;; This function is called by:
  5525 ;;		_format_double
  5526 ;;		_measure_capacitance
  5527 ;;		_measure_inductance
  5528 ;;		_log
  5529 ;;		_log10
  5530 ;;		_pow
  5531 ;;		_eval_poly
  5532 ;;		_exp
  5533 ;; This function uses a non-reentrant model
  5534 ;;
  5535                           
  5536                           	psect	text27
  5537  001166                     __ptext27:
  5538                           	opt stack 0
  5539  001166                     ___flmul:
  5540                           	opt stack 27
  5541                           
  5542                           ;incstack = 0
  5543  001166  341F               	rlcf	___flmul@f1+2,w,c
  5544  001168  3420               	rlcf	___flmul@f1+3,w,c
  5545  00116A  6E32               	movwf	___flmul@exp,c
  5546  00116C  5032               	movf	___flmul@exp,w,c
  5547  00116E  E105               	bnz	l3770
  5548  001170  6A1D               	clrf	?___flmul,c
  5549  001172  6A1E               	clrf	?___flmul+1,c
  5550  001174  6A1F               	clrf	?___flmul+2,c
  5551  001176  6A20               	clrf	?___flmul+3,c
  5552  001178  0012               	return	
  5553  00117A                     l3770:
  5554  00117A  3423               	rlcf	___flmul@f2+2,w,c
  5555  00117C  3424               	rlcf	___flmul@f2+3,w,c
  5556  00117E  6E33               	movwf	___flmul@sign,c
  5557  001180  5033               	movf	___flmul@sign,w,c
  5558  001182  E105               	bnz	l3774
  5559  001184  6A1D               	clrf	?___flmul,c
  5560  001186  6A1E               	clrf	?___flmul+1,c
  5561  001188  6A1F               	clrf	?___flmul+2,c
  5562  00118A  6A20               	clrf	?___flmul+3,c
  5563  00118C  0012               	return	
  5564  00118E                     l3774:
  5565  00118E  5033               	movf	___flmul@sign,w,c
  5566  001190  0F7B               	addlw	123
  5567  001192  2632               	addwf	___flmul@exp,f,c
  5568  001194  C020  F033         	movff	___flmul@f1+3,___flmul@sign
  5569  001198  5024               	movf	___flmul@f2+3,w,c
  5570  00119A  1A33               	xorwf	___flmul@sign,f,c
  5571  00119C  0E80               	movlw	128
  5572  00119E  1633               	andwf	___flmul@sign,f,c
  5573  0011A0  8E1F               	bsf	___flmul@f1+2,7,c
  5574  0011A2  8E23               	bsf	___flmul@f2+2,7,c
  5575  0011A4  6A24               	clrf	___flmul@f2+3,c
  5576  0011A6  6A20               	clrf	___flmul@f1+3,c
  5577  0011A8  501D               	movf	___flmul@f1,w,c
  5578  0011AA  0221               	mulwf	___flmul@f2,c
  5579  0011AC  CFF4 FFF3          	movff	prodh,prodl
  5580  0011B0  6AF4               	clrf	prodh,c
  5581  0011B2  CFF3 F034          	movff	prodl,___flmul@f3_as_product
  5582  0011B6  CFF4 F035          	movff	prodh,___flmul@f3_as_product+1
  5583  0011BA  6A36               	clrf	___flmul@f3_as_product+2,c
  5584  0011BC  6A37               	clrf	___flmul@f3_as_product+3,c
  5585  0011BE  501D               	movf	___flmul@f1,w,c
  5586  0011C0  0222               	mulwf	___flmul@f2+1,c
  5587  0011C2  CFF3 F025          	movff	prodl,??___flmul
  5588  0011C6  CFF4 F026          	movff	prodh,??___flmul+1
  5589  0011CA  6A27               	clrf	(??___flmul+2)& (0+255),c
  5590  0011CC  501E               	movf	___flmul@f1+1,w,c
  5591  0011CE  0221               	mulwf	___flmul@f2,c
  5592  0011D0  50F3               	movf	prodl,w,c
  5593  0011D2  2425               	addwf	??___flmul,w,c
  5594  0011D4  6E28               	movwf	(??___flmul+3)& (0+255),c
  5595  0011D6  50F4               	movf	prodh,w,c
  5596  0011D8  2026               	addwfc	??___flmul+1,w,c
  5597  0011DA  6E29               	movwf	(??___flmul+4)& (0+255),c
  5598  0011DC  0E00               	movlw	0
  5599  0011DE  2027               	addwfc	??___flmul+2,w,c
  5600  0011E0  6E2A               	movwf	(??___flmul+5)& (0+255),c
  5601  0011E2  5028               	movf	??___flmul+3,w,c
  5602  0011E4  6E2B               	movwf	(??___flmul+6)& (0+255),c
  5603  0011E6  5029               	movf	??___flmul+4,w,c
  5604  0011E8  6E2C               	movwf	(??___flmul+7)& (0+255),c
  5605  0011EA  502A               	movf	??___flmul+5,w,c
  5606  0011EC  6E2D               	movwf	(??___flmul+8)& (0+255),c
  5607  0011EE  6A2E               	clrf	(??___flmul+9)& (0+255),c
  5608  0011F0  502B               	movf	??___flmul+6,w,c
  5609  0011F2  2634               	addwf	___flmul@f3_as_product,f,c
  5610  0011F4  502C               	movf	??___flmul+7,w,c
  5611  0011F6  2235               	addwfc	___flmul@f3_as_product+1,f,c
  5612  0011F8  502D               	movf	??___flmul+8,w,c
  5613  0011FA  2236               	addwfc	___flmul@f3_as_product+2,f,c
  5614  0011FC  502E               	movf	??___flmul+9,w,c
  5615  0011FE  2237               	addwfc	___flmul@f3_as_product+3,f,c
  5616  001200  5035               	movf	___flmul@f3_as_product+1,w,c
  5617  001202  6E34               	movwf	___flmul@f3_as_product,c
  5618  001204  5036               	movf	___flmul@f3_as_product+2,w,c
  5619  001206  6E35               	movwf	___flmul@f3_as_product+1,c
  5620  001208  5037               	movf	___flmul@f3_as_product+3,w,c
  5621  00120A  6E36               	movwf	___flmul@f3_as_product+2,c
  5622  00120C  6A37               	clrf	___flmul@f3_as_product+3,c
  5623  00120E  501D               	movf	___flmul@f1,w,c
  5624  001210  0223               	mulwf	___flmul@f2+2,c
  5625  001212  CFF3 F025          	movff	prodl,??___flmul
  5626  001216  CFF4 F026          	movff	prodh,??___flmul+1
  5627  00121A  6A27               	clrf	(??___flmul+2)& (0+255),c
  5628  00121C  501E               	movf	___flmul@f1+1,w,c
  5629  00121E  0222               	mulwf	___flmul@f2+1,c
  5630  001220  50F3               	movf	prodl,w,c
  5631  001222  2425               	addwf	??___flmul,w,c
  5632  001224  6E28               	movwf	(??___flmul+3)& (0+255),c
  5633  001226  50F4               	movf	prodh,w,c
  5634  001228  2026               	addwfc	??___flmul+1,w,c
  5635  00122A  6E29               	movwf	(??___flmul+4)& (0+255),c
  5636  00122C  0E00               	movlw	0
  5637  00122E  2027               	addwfc	??___flmul+2,w,c
  5638  001230  6E2A               	movwf	(??___flmul+5)& (0+255),c
  5639  001232  501F               	movf	___flmul@f1+2,w,c
  5640  001234  0221               	mulwf	___flmul@f2,c
  5641  001236  50F3               	movf	prodl,w,c
  5642  001238  2428               	addwf	??___flmul+3,w,c
  5643  00123A  6E2B               	movwf	(??___flmul+6)& (0+255),c
  5644  00123C  50F4               	movf	prodh,w,c
  5645  00123E  2029               	addwfc	??___flmul+4,w,c
  5646  001240  6E2C               	movwf	(??___flmul+7)& (0+255),c
  5647  001242  0E00               	movlw	0
  5648  001244  202A               	addwfc	??___flmul+5,w,c
  5649  001246  6E2D               	movwf	(??___flmul+8)& (0+255),c
  5650  001248  502B               	movf	??___flmul+6,w,c
  5651  00124A  6E2E               	movwf	(??___flmul+9)& (0+255),c
  5652  00124C  502C               	movf	??___flmul+7,w,c
  5653  00124E  6E2F               	movwf	(??___flmul+10)& (0+255),c
  5654  001250  502D               	movf	??___flmul+8,w,c
  5655  001252  6E30               	movwf	(??___flmul+11)& (0+255),c
  5656  001254  6A31               	clrf	(??___flmul+12)& (0+255),c
  5657  001256  502E               	movf	??___flmul+9,w,c
  5658  001258  2634               	addwf	___flmul@f3_as_product,f,c
  5659  00125A  502F               	movf	??___flmul+10,w,c
  5660  00125C  2235               	addwfc	___flmul@f3_as_product+1,f,c
  5661  00125E  5030               	movf	??___flmul+11,w,c
  5662  001260  2236               	addwfc	___flmul@f3_as_product+2,f,c
  5663  001262  5031               	movf	??___flmul+12,w,c
  5664  001264  2237               	addwfc	___flmul@f3_as_product+3,f,c
  5665  001266  501F               	movf	___flmul@f1+2,w,c
  5666  001268  0222               	mulwf	___flmul@f2+1,c
  5667  00126A  CFF3 F025          	movff	prodl,??___flmul
  5668  00126E  CFF4 F026          	movff	prodh,??___flmul+1
  5669  001272  6A27               	clrf	(??___flmul+2)& (0+255),c
  5670  001274  0E34               	movlw	___flmul@f3_as_product& (0+255)
  5671  001276  6E28               	movwf	(??___flmul+3)& (0+255),c
  5672  001278  6A29               	clrf	(??___flmul+4)& (0+255),c
  5673  00127A  2828               	incf	??___flmul+3,w,c
  5674  00127C  6ED9               	movwf	fsr2l,c
  5675  00127E  0E00               	movlw	0
  5676  001280  2029               	addwfc	??___flmul+4,w,c
  5677  001282  6EDA               	movwf	fsr2h,c
  5678  001284  5025               	movf	??___flmul,w,c
  5679  001286  26DE               	addwf	postinc2,f,c
  5680  001288  5026               	movf	??___flmul+1,w,c
  5681  00128A  22DE               	addwfc	postinc2,f,c
  5682  00128C  5027               	movf	??___flmul+2,w,c
  5683  00128E  22DE               	addwfc	postinc2,f,c
  5684  001290  501E               	movf	___flmul@f1+1,w,c
  5685  001292  0223               	mulwf	___flmul@f2+2,c
  5686  001294  CFF3 F025          	movff	prodl,??___flmul
  5687  001298  CFF4 F026          	movff	prodh,??___flmul+1
  5688  00129C  6A27               	clrf	(??___flmul+2)& (0+255),c
  5689  00129E  0E34               	movlw	___flmul@f3_as_product& (0+255)
  5690  0012A0  6E28               	movwf	(??___flmul+3)& (0+255),c
  5691  0012A2  6A29               	clrf	(??___flmul+4)& (0+255),c
  5692  0012A4  2828               	incf	??___flmul+3,w,c
  5693  0012A6  6ED9               	movwf	fsr2l,c
  5694  0012A8  0E00               	movlw	0
  5695  0012AA  2029               	addwfc	??___flmul+4,w,c
  5696  0012AC  6EDA               	movwf	fsr2h,c
  5697  0012AE  5025               	movf	??___flmul,w,c
  5698  0012B0  26DE               	addwf	postinc2,f,c
  5699  0012B2  5026               	movf	??___flmul+1,w,c
  5700  0012B4  22DE               	addwfc	postinc2,f,c
  5701  0012B6  5027               	movf	??___flmul+2,w,c
  5702  0012B8  22DE               	addwfc	postinc2,f,c
  5703  0012BA  501F               	movf	___flmul@f1+2,w,c
  5704  0012BC  0223               	mulwf	___flmul@f2+2,c
  5705  0012BE  CFF3 F025          	movff	prodl,??___flmul
  5706  0012C2  CFF4 F026          	movff	prodh,??___flmul+1
  5707  0012C6  6A27               	clrf	(??___flmul+2)& (0+255),c
  5708  0012C8  0E34               	movlw	___flmul@f3_as_product& (0+255)
  5709  0012CA  6E28               	movwf	(??___flmul+3)& (0+255),c
  5710  0012CC  6A29               	clrf	(??___flmul+4)& (0+255),c
  5711  0012CE  0E02               	movlw	2
  5712  0012D0  2428               	addwf	??___flmul+3,w,c
  5713  0012D2  6ED9               	movwf	fsr2l,c
  5714  0012D4  0E00               	movlw	0
  5715  0012D6  2029               	addwfc	??___flmul+4,w,c
  5716  0012D8  6EDA               	movwf	fsr2h,c
  5717  0012DA  5025               	movf	??___flmul,w,c
  5718  0012DC  26DE               	addwf	postinc2,f,c
  5719  0012DE  5026               	movf	??___flmul+1,w,c
  5720  0012E0  22DE               	addwfc	postinc2,f,c
  5721  0012E2  5027               	movf	??___flmul+2,w,c
  5722  0012E4  22DE               	addwfc	postinc2,f,c
  5723  0012E6  AE37               	btfss	___flmul@f3_as_product+3,7,c
  5724  0012E8  D006               	goto	l863
  5725  0012EA  90D8               	bcf	status,0,c
  5726  0012EC  3237               	rrcf	___flmul@f3_as_product+3,f,c
  5727  0012EE  3236               	rrcf	___flmul@f3_as_product+2,f,c
  5728  0012F0  3235               	rrcf	___flmul@f3_as_product+1,f,c
  5729  0012F2  3234               	rrcf	___flmul@f3_as_product,f,c
  5730  0012F4  2A32               	incf	___flmul@exp,f,c
  5731  0012F6                     l863:
  5732  0012F6  90D8               	bcf	status,0,c
  5733  0012F8  3237               	rrcf	___flmul@f3_as_product+3,f,c
  5734  0012FA  3236               	rrcf	___flmul@f3_as_product+2,f,c
  5735  0012FC  3235               	rrcf	___flmul@f3_as_product+1,f,c
  5736  0012FE  3234               	rrcf	___flmul@f3_as_product,f,c
  5737  001300  C034  F004         	movff	___flmul@f3_as_product,___flpack@arg
  5738  001304  C035  F005         	movff	___flmul@f3_as_product+1,___flpack@arg+1
  5739  001308  C036  F006         	movff	___flmul@f3_as_product+2,___flpack@arg+2
  5740  00130C  C037  F007         	movff	___flmul@f3_as_product+3,___flpack@arg+3
  5741  001310  C032  F008         	movff	___flmul@exp,___flpack@exp
  5742  001314  C033  F009         	movff	___flmul@sign,___flpack@sign
  5743  001318  ECC8  F00E         	call	___flpack	;wreg free
  5744  00131C  C004  F01D         	movff	?___flpack,?___flmul
  5745  001320  C005  F01E         	movff	?___flpack+1,?___flmul+1
  5746  001324  C006  F01F         	movff	?___flpack+2,?___flmul+2
  5747  001328  C007  F020         	movff	?___flpack+3,?___flmul+3
  5748  00132C  0012               	return		;funcret
  5749  00132E                     __end_of___flmul:
  5750                           	opt stack 0
  5751                           tblptru	equ	0xFF8
  5752                           tblptrh	equ	0xFF7
  5753                           tblptrl	equ	0xFF6
  5754                           tablat	equ	0xFF5
  5755                           prodh	equ	0xFF4
  5756                           prodl	equ	0xFF3
  5757                           intcon	equ	0xFF2
  5758                           intcon2	equ	0xFF1
  5759                           postinc0	equ	0xFEE
  5760                           wreg	equ	0xFE8
  5761                           postdec1	equ	0xFE5
  5762                           fsr1l	equ	0xFE1
  5763                           postinc2	equ	0xFDE
  5764                           postdec2	equ	0xFDD
  5765                           fsr2h	equ	0xFDA
  5766                           fsr2l	equ	0xFD9
  5767                           status	equ	0xFD8
  5768                           
  5769 ;; *************** function ___fladd *****************
  5770 ;; Defined at:
  5771 ;;		line 88 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fladd.c"
  5772 ;; Parameters:    Size  Location     Type
  5773 ;;  f1              4   55[COMRAM] unsigned char 
  5774 ;;  f2              4   59[COMRAM] unsigned char 
  5775 ;; Auto vars:     Size  Location     Type
  5776 ;;  exp1            1   66[COMRAM] unsigned char 
  5777 ;;  exp2            1   65[COMRAM] unsigned char 
  5778 ;;  sign            1   64[COMRAM] unsigned char 
  5779 ;; Return value:  Size  Location     Type
  5780 ;;                  4   55[COMRAM] unsigned char 
  5781 ;; Registers used:
  5782 ;;		wreg, status,2, status,0, cstack
  5783 ;; Tracked objects:
  5784 ;;		On entry : 0/0
  5785 ;;		On exit  : 0/0
  5786 ;;		Unchanged: 0/0
  5787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  5788 ;;      Params:         8       0       0       0
  5789 ;;      Locals:         3       0       0       0
  5790 ;;      Temps:          1       0       0       0
  5791 ;;      Totals:        12       0       0       0
  5792 ;;Total ram usage:       12 bytes
  5793 ;; Hardware stack levels used:    1
  5794 ;; Hardware stack levels required when called:    2
  5795 ;; This function calls:
  5796 ;;		___flpack
  5797 ;; This function is called by:
  5798 ;;		_floor
  5799 ;;		___flsub
  5800 ;;		_log
  5801 ;;		_eval_poly
  5802 ;; This function uses a non-reentrant model
  5803 ;;
  5804                           
  5805                           	psect	text28
  5806  00164C                     __ptext28:
  5807                           	opt stack 0
  5808  00164C                     ___fladd:
  5809                           	opt stack 26
  5810                           
  5811                           ;incstack = 0
  5812  00164C  343A               	rlcf	___fladd@f1+2,w,c
  5813  00164E  343B               	rlcf	___fladd@f1+3,w,c
  5814  001650  6E43               	movwf	___fladd@exp1,c
  5815  001652  343E               	rlcf	___fladd@f2+2,w,c
  5816  001654  343F               	rlcf	___fladd@f2+3,w,c
  5817  001656  6E42               	movwf	___fladd@exp2,c
  5818  001658  5043               	movf	___fladd@exp1,w,c
  5819  00165A  E009               	bz	l814
  5820  00165C  5042               	movf	___fladd@exp2,w,c
  5821  00165E  5C43               	subwf	___fladd@exp1,w,c
  5822  001660  E20F               	bc	l3706
  5823  001662  5043               	movf	___fladd@exp1,w,c
  5824  001664  5C42               	subwf	___fladd@exp2,w,c
  5825  001666  6E40               	movwf	??___fladd& (0+255),c
  5826  001668  0E20               	movlw	32
  5827  00166A  6440               	cpfsgt	??___fladd,c
  5828  00166C  D009               	goto	l3706
  5829  00166E                     l814:
  5830  00166E  C03C  F038         	movff	___fladd@f2,?___fladd
  5831  001672  C03D  F039         	movff	___fladd@f2+1,?___fladd+1
  5832  001676  C03E  F03A         	movff	___fladd@f2+2,?___fladd+2
  5833  00167A  C03F  F03B         	movff	___fladd@f2+3,?___fladd+3
  5834  00167E  0012               	return	
  5835  001680                     l3706:
  5836  001680  5042               	movf	___fladd@exp2,w,c
  5837  001682  E009               	bz	l818
  5838  001684  5043               	movf	___fladd@exp1,w,c
  5839  001686  5C42               	subwf	___fladd@exp2,w,c
  5840  001688  E20F               	bc	l3712
  5841  00168A  5042               	movf	___fladd@exp2,w,c
  5842  00168C  5C43               	subwf	___fladd@exp1,w,c
  5843  00168E  6E40               	movwf	??___fladd& (0+255),c
  5844  001690  0E20               	movlw	32
  5845  001692  6440               	cpfsgt	??___fladd,c
  5846  001694  D009               	goto	l3712
  5847  001696                     l818:
  5848  001696  C038  F038         	movff	___fladd@f1,?___fladd
  5849  00169A  C039  F039         	movff	___fladd@f1+1,?___fladd+1
  5850  00169E  C03A  F03A         	movff	___fladd@f1+2,?___fladd+2
  5851  0016A2  C03B  F03B         	movff	___fladd@f1+3,?___fladd+3
  5852  0016A6  0012               	return	
  5853  0016A8                     l3712:
  5854  0016A8  0E06               	movlw	6
  5855  0016AA  6E41               	movwf	___fladd@sign,c
  5856  0016AC  BE3B               	btfsc	___fladd@f1+3,7,c
  5857  0016AE  8E41               	bsf	___fladd@sign,7,c
  5858  0016B0  BE3F               	btfsc	___fladd@f2+3,7,c
  5859  0016B2  8C41               	bsf	___fladd@sign,6,c
  5860  0016B4  8E3A               	bsf	___fladd@f1+2,7,c
  5861  0016B6  6A3B               	clrf	___fladd@f1+3,c
  5862  0016B8  8E3E               	bsf	___fladd@f2+2,7,c
  5863  0016BA  6A3F               	clrf	___fladd@f2+3,c
  5864  0016BC  5042               	movf	___fladd@exp2,w,c
  5865  0016BE  5C43               	subwf	___fladd@exp1,w,c
  5866  0016C0  E21A               	bc	l3736
  5867  0016C2                     l3726:
  5868  0016C2  90D8               	bcf	status,0,c
  5869  0016C4  363C               	rlcf	___fladd@f2,f,c
  5870  0016C6  363D               	rlcf	___fladd@f2+1,f,c
  5871  0016C8  363E               	rlcf	___fladd@f2+2,f,c
  5872  0016CA  363F               	rlcf	___fladd@f2+3,f,c
  5873  0016CC  0642               	decf	___fladd@exp2,f,c
  5874  0016CE  5043               	movf	___fladd@exp1,w,c
  5875  0016D0  1842               	xorwf	___fladd@exp2,w,c
  5876  0016D2  E00D               	bz	l3734
  5877  0016D4  0641               	decf	___fladd@sign,f,c
  5878  0016D6  C041  F040         	movff	___fladd@sign,??___fladd
  5879  0016DA  0E07               	movlw	7
  5880  0016DC  1640               	andwf	??___fladd,f,c
  5881  0016DE  E007               	bz	l3734
  5882  0016E0  D7F0               	goto	l3726
  5883  0016E2                     l3732:
  5884  0016E2  90D8               	bcf	status,0,c
  5885  0016E4  323B               	rrcf	___fladd@f1+3,f,c
  5886  0016E6  323A               	rrcf	___fladd@f1+2,f,c
  5887  0016E8  3239               	rrcf	___fladd@f1+1,f,c
  5888  0016EA  3238               	rrcf	___fladd@f1,f,c
  5889  0016EC  2A43               	incf	___fladd@exp1,f,c
  5890  0016EE                     l3734:
  5891  0016EE  5042               	movf	___fladd@exp2,w,c
  5892  0016F0  1843               	xorwf	___fladd@exp1,w,c
  5893  0016F2  E01D               	bz	l829
  5894  0016F4  D7F6               	goto	l3732
  5895  0016F6                     l3736:
  5896  0016F6  5043               	movf	___fladd@exp1,w,c
  5897  0016F8  5C42               	subwf	___fladd@exp2,w,c
  5898  0016FA  E219               	bc	l829
  5899  0016FC                     l3738:
  5900  0016FC  90D8               	bcf	status,0,c
  5901  0016FE  3638               	rlcf	___fladd@f1,f,c
  5902  001700  3639               	rlcf	___fladd@f1+1,f,c
  5903  001702  363A               	rlcf	___fladd@f1+2,f,c
  5904  001704  363B               	rlcf	___fladd@f1+3,f,c
  5905  001706  0643               	decf	___fladd@exp1,f,c
  5906  001708  5043               	movf	___fladd@exp1,w,c
  5907  00170A  1842               	xorwf	___fladd@exp2,w,c
  5908  00170C  E00D               	bz	l3746
  5909  00170E  0641               	decf	___fladd@sign,f,c
  5910  001710  C041  F040         	movff	___fladd@sign,??___fladd
  5911  001714  0E07               	movlw	7
  5912  001716  1640               	andwf	??___fladd,f,c
  5913  001718  E007               	bz	l3746
  5914  00171A  D7F0               	goto	l3738
  5915  00171C                     l3744:
  5916  00171C  90D8               	bcf	status,0,c
  5917  00171E  323F               	rrcf	___fladd@f2+3,f,c
  5918  001720  323E               	rrcf	___fladd@f2+2,f,c
  5919  001722  323D               	rrcf	___fladd@f2+1,f,c
  5920  001724  323C               	rrcf	___fladd@f2,f,c
  5921  001726  2A42               	incf	___fladd@exp2,f,c
  5922  001728                     l3746:
  5923  001728  5042               	movf	___fladd@exp2,w,c
  5924  00172A  1843               	xorwf	___fladd@exp1,w,c
  5925  00172C  E1F7               	bnz	l3744
  5926  00172E                     l829:
  5927  00172E  AE41               	btfss	___fladd@sign,7,c
  5928  001730  D009               	goto	l3750
  5929  001732  1E38               	comf	___fladd@f1,f,c
  5930  001734  1E39               	comf	___fladd@f1+1,f,c
  5931  001736  1E3A               	comf	___fladd@f1+2,f,c
  5932  001738  1E3B               	comf	___fladd@f1+3,f,c
  5933  00173A  2A38               	incf	___fladd@f1,f,c
  5934  00173C  0E00               	movlw	0
  5935  00173E  2239               	addwfc	___fladd@f1+1,f,c
  5936  001740  223A               	addwfc	___fladd@f1+2,f,c
  5937  001742  223B               	addwfc	___fladd@f1+3,f,c
  5938  001744                     l3750:
  5939  001744  AC41               	btfss	___fladd@sign,6,c
  5940  001746  D009               	goto	l3754
  5941  001748  1E3C               	comf	___fladd@f2,f,c
  5942  00174A  1E3D               	comf	___fladd@f2+1,f,c
  5943  00174C  1E3E               	comf	___fladd@f2+2,f,c
  5944  00174E  1E3F               	comf	___fladd@f2+3,f,c
  5945  001750  2A3C               	incf	___fladd@f2,f,c
  5946  001752  0E00               	movlw	0
  5947  001754  223D               	addwfc	___fladd@f2+1,f,c
  5948  001756  223E               	addwfc	___fladd@f2+2,f,c
  5949  001758  223F               	addwfc	___fladd@f2+3,f,c
  5950  00175A                     l3754:
  5951  00175A  6A41               	clrf	___fladd@sign,c
  5952  00175C  5038               	movf	___fladd@f1,w,c
  5953  00175E  263C               	addwf	___fladd@f2,f,c
  5954  001760  5039               	movf	___fladd@f1+1,w,c
  5955  001762  223D               	addwfc	___fladd@f2+1,f,c
  5956  001764  503A               	movf	___fladd@f1+2,w,c
  5957  001766  223E               	addwfc	___fladd@f2+2,f,c
  5958  001768  503B               	movf	___fladd@f1+3,w,c
  5959  00176A  223F               	addwfc	___fladd@f2+3,f,c
  5960  00176C  AE3F               	btfss	___fladd@f2+3,7,c
  5961  00176E  D00B               	goto	l3762
  5962  001770  1E3C               	comf	___fladd@f2,f,c
  5963  001772  1E3D               	comf	___fladd@f2+1,f,c
  5964  001774  1E3E               	comf	___fladd@f2+2,f,c
  5965  001776  1E3F               	comf	___fladd@f2+3,f,c
  5966  001778  2A3C               	incf	___fladd@f2,f,c
  5967  00177A  0E00               	movlw	0
  5968  00177C  223D               	addwfc	___fladd@f2+1,f,c
  5969  00177E  223E               	addwfc	___fladd@f2+2,f,c
  5970  001780  223F               	addwfc	___fladd@f2+3,f,c
  5971  001782  0E01               	movlw	1
  5972  001784  6E41               	movwf	___fladd@sign,c
  5973  001786                     l3762:
  5974  001786  C03C  F004         	movff	___fladd@f2,___flpack@arg
  5975  00178A  C03D  F005         	movff	___fladd@f2+1,___flpack@arg+1
  5976  00178E  C03E  F006         	movff	___fladd@f2+2,___flpack@arg+2
  5977  001792  C03F  F007         	movff	___fladd@f2+3,___flpack@arg+3
  5978  001796  C043  F008         	movff	___fladd@exp1,___flpack@exp
  5979  00179A  C041  F009         	movff	___fladd@sign,___flpack@sign
  5980  00179E  ECC8  F00E         	call	___flpack	;wreg free
  5981  0017A2  C004  F038         	movff	?___flpack,?___fladd
  5982  0017A6  C005  F039         	movff	?___flpack+1,?___fladd+1
  5983  0017AA  C006  F03A         	movff	?___flpack+2,?___fladd+2
  5984  0017AE  C007  F03B         	movff	?___flpack+3,?___fladd+3
  5985  0017B2  0012               	return		;funcret
  5986  0017B4                     __end_of___fladd:
  5987                           	opt stack 0
  5988                           tblptru	equ	0xFF8
  5989                           tblptrh	equ	0xFF7
  5990                           tblptrl	equ	0xFF6
  5991                           tablat	equ	0xFF5
  5992                           prodh	equ	0xFF4
  5993                           prodl	equ	0xFF3
  5994                           intcon	equ	0xFF2
  5995                           intcon2	equ	0xFF1
  5996                           postinc0	equ	0xFEE
  5997                           wreg	equ	0xFE8
  5998                           postdec1	equ	0xFE5
  5999                           fsr1l	equ	0xFE1
  6000                           postinc2	equ	0xFDE
  6001                           postdec2	equ	0xFDD
  6002                           fsr2h	equ	0xFDA
  6003                           fsr2l	equ	0xFD9
  6004                           status	equ	0xFD8
  6005                           
  6006 ;; *************** function ___awtofl *****************
  6007 ;; Defined at:
  6008 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtofl.c"
  6009 ;; Parameters:    Size  Location     Type
  6010 ;;  c               2   13[COMRAM] int 
  6011 ;; Auto vars:     Size  Location     Type
  6012 ;;  f1              4    0        int 
  6013 ;;  sign            1   17[COMRAM] unsigned char 
  6014 ;; Return value:  Size  Location     Type
  6015 ;;                  4   13[COMRAM] unsigned char 
  6016 ;; Registers used:
  6017 ;;		wreg, status,2, status,0, cstack
  6018 ;; Tracked objects:
  6019 ;;		On entry : 0/0
  6020 ;;		On exit  : 0/0
  6021 ;;		Unchanged: 0/0
  6022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  6023 ;;      Params:         4       0       0       0
  6024 ;;      Locals:         1       0       0       0
  6025 ;;      Temps:          0       0       0       0
  6026 ;;      Totals:         5       0       0       0
  6027 ;;Total ram usage:        5 bytes
  6028 ;; Hardware stack levels used:    1
  6029 ;; Hardware stack levels required when called:    2
  6030 ;; This function calls:
  6031 ;;		___flpack
  6032 ;; This function is called by:
  6033 ;;		_format_double
  6034 ;;		_log
  6035 ;;		_exp
  6036 ;; This function uses a non-reentrant model
  6037 ;;
  6038                           
  6039                           	psect	text29
  6040  0025AC                     __ptext29:
  6041                           	opt stack 0
  6042  0025AC                     ___awtofl:
  6043                           	opt stack 24
  6044                           
  6045                           ;incstack = 0
  6046  0025AC  6A12               	clrf	___awtofl@sign,c
  6047  0025AE  AE0F               	btfss	___awtofl@c+1,7,c
  6048  0025B0  D005               	goto	l3970
  6049  0025B2  6C0E               	negf	___awtofl@c,c
  6050  0025B4  1E0F               	comf	___awtofl@c+1,f,c
  6051  0025B6  B0D8               	btfsc	status,0,c
  6052  0025B8  2A0F               	incf	___awtofl@c+1,f,c
  6053  0025BA  2A12               	incf	___awtofl@sign,f,c
  6054  0025BC                     l3970:
  6055  0025BC  C00E  F004         	movff	___awtofl@c,___flpack@arg
  6056  0025C0  C00F  F005         	movff	___awtofl@c+1,___flpack@arg+1
  6057  0025C4  6A06               	clrf	___flpack@arg+2,c
  6058  0025C6  6A07               	clrf	___flpack@arg+3,c
  6059  0025C8  0E96               	movlw	150
  6060  0025CA  6E08               	movwf	___flpack@exp,c
  6061  0025CC  C012  F009         	movff	___awtofl@sign,___flpack@sign
  6062  0025D0  ECC8  F00E         	call	___flpack	;wreg free
  6063  0025D4  C004  F00E         	movff	?___flpack,?___awtofl
  6064  0025D8  C005  F00F         	movff	?___flpack+1,?___awtofl+1
  6065  0025DC  C006  F010         	movff	?___flpack+2,?___awtofl+2
  6066  0025E0  C007  F011         	movff	?___flpack+3,?___awtofl+3
  6067  0025E4  0012               	return		;funcret
  6068  0025E6                     __end_of___awtofl:
  6069                           	opt stack 0
  6070                           tblptru	equ	0xFF8
  6071                           tblptrh	equ	0xFF7
  6072                           tblptrl	equ	0xFF6
  6073                           tablat	equ	0xFF5
  6074                           prodh	equ	0xFF4
  6075                           prodl	equ	0xFF3
  6076                           intcon	equ	0xFF2
  6077                           intcon2	equ	0xFF1
  6078                           postinc0	equ	0xFEE
  6079                           wreg	equ	0xFE8
  6080                           postdec1	equ	0xFE5
  6081                           fsr1l	equ	0xFE1
  6082                           postinc2	equ	0xFDE
  6083                           postdec2	equ	0xFDD
  6084                           fsr2h	equ	0xFDA
  6085                           fsr2l	equ	0xFD9
  6086                           status	equ	0xFD8
  6087                           
  6088 ;; *************** function _lcd_init *****************
  6089 ;; Defined at:
  6090 ;;		line 484 in file "../../../lib/lcd44780.c"
  6091 ;; Parameters:    Size  Location     Type
  6092 ;;  fourbitmode     1    wreg     unsigned char 
  6093 ;; Auto vars:     Size  Location     Type
  6094 ;;  fourbitmode     1    3[COMRAM] unsigned char 
  6095 ;; Return value:  Size  Location     Type
  6096 ;;		None               void
  6097 ;; Registers used:
  6098 ;;		wreg, status,2, status,0
  6099 ;; Tracked objects:
  6100 ;;		On entry : 0/0
  6101 ;;		On exit  : F/0
  6102 ;;		Unchanged: 0/0
  6103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  6104 ;;      Params:         0       0       0       0
  6105 ;;      Locals:         3       0       0       0
  6106 ;;      Temps:          0       0       0       0
  6107 ;;      Totals:         3       0       0       0
  6108 ;;Total ram usage:        3 bytes
  6109 ;; Hardware stack levels used:    1
  6110 ;; Hardware stack levels required when called:    1
  6111 ;; This function calls:
  6112 ;;		Nothing
  6113 ;; This function is called by:
  6114 ;;		_main
  6115 ;; This function uses a non-reentrant model
  6116 ;;
  6117                           
  6118                           	psect	text30
  6119  002742                     __ptext30:
  6120                           	opt stack 0
  6121  002742                     _lcd_init:
  6122                           	opt stack 29
  6123                           
  6124                           ;incstack = 0
  6125                           ;lcd_init@fourbitmode stored from wreg
  6126  002742  6E04               	movwf	lcd_init@fourbitmode,c
  6127                           
  6128                           ;lcd44780.c: 486: LCD_ctrl = 0;
  6129  002744  0100               	movlb	0	; () banked
  6130  002746  6BD9               	clrf	_LCD_ctrl& (0+255),b
  6131                           
  6132                           ; BSR set to: 0
  6133                           ;lcd44780.c: 487: LCD_function = (fourbitmode ? 0x00 : 0x10);
  6134  002748  5004               	movf	lcd_init@fourbitmode,w,c
  6135  00274A  E104               	bnz	l327
  6136                           
  6137                           ; BSR set to: 0
  6138  00274C  6A06               	clrf	_lcd_init$263+1,c
  6139  00274E  0E10               	movlw	16
  6140  002750  6E05               	movwf	_lcd_init$263,c
  6141  002752  D002               	goto	l329
  6142  002754                     l327:
  6143                           
  6144                           ; BSR set to: 0
  6145  002754  6A05               	clrf	_lcd_init$263,c
  6146  002756  6A06               	clrf	_lcd_init$263+1,c
  6147  002758                     l329:
  6148                           
  6149                           ; BSR set to: 0
  6150  002758  C005  F05A         	movff	_lcd_init$263,_LCD_function
  6151                           
  6152                           ;lcd44780.c: 489: LCD_lines = 0;
  6153  00275C  6BDA               	clrf	_LCD_lines& (0+255),b
  6154                           
  6155                           ;lcd44780.c: 491: LCD_mode = 0;
  6156  00275E  6BDB               	clrf	_LCD_mode& (0+255),b
  6157                           
  6158                           ; BSR set to: 0
  6159                           ;lcd44780.c: 493: TRISB &= ~0b0100;
  6160  002760  9493               	bcf	3987,2,c	;volatile
  6161                           
  6162                           ;lcd44780.c: 494: LATB &= ~0b0100;
  6163  002762  948A               	bcf	3978,2,c	;volatile
  6164                           
  6165                           ;lcd44780.c: 499: TRISB &= ~0b1000;
  6166  002764  9693               	bcf	3987,3,c	;volatile
  6167                           
  6168                           ;lcd44780.c: 500: LATB &= ~0b1000;
  6169  002766  968A               	bcf	3978,3,c	;volatile
  6170                           
  6171                           ; BSR set to: 0
  6172                           ;lcd44780.c: 502: LATB &= ~0b11110000;
  6173  002768  0E0F               	movlw	15
  6174  00276A  168A               	andwf	3978,f,c	;volatile
  6175                           
  6176                           ; BSR set to: 0
  6177  00276C  0012               	return		;funcret
  6178  00276E                     __end_of_lcd_init:
  6179                           	opt stack 0
  6180                           tblptru	equ	0xFF8
  6181                           tblptrh	equ	0xFF7
  6182                           tblptrl	equ	0xFF6
  6183                           tablat	equ	0xFF5
  6184                           prodh	equ	0xFF4
  6185                           prodl	equ	0xFF3
  6186                           intcon	equ	0xFF2
  6187                           intcon2	equ	0xFF1
  6188                           postinc0	equ	0xFEE
  6189                           wreg	equ	0xFE8
  6190                           postdec1	equ	0xFE5
  6191                           fsr1l	equ	0xFE1
  6192                           postinc2	equ	0xFDE
  6193                           postdec2	equ	0xFDD
  6194                           fsr2h	equ	0xFDA
  6195                           fsr2l	equ	0xFD9
  6196                           status	equ	0xFD8
  6197                           
  6198 ;; *************** function _lcd_begin *****************
  6199 ;; Defined at:
  6200 ;;		line 411 in file "../../../lib/lcd44780.c"
  6201 ;; Parameters:    Size  Location     Type
  6202 ;;  lines           1    wreg     unsigned char 
  6203 ;;  dotsize         1    7[COMRAM] unsigned char 
  6204 ;; Auto vars:     Size  Location     Type
  6205 ;;  lines           1    9[COMRAM] unsigned char 
  6206 ;; Return value:  Size  Location     Type
  6207 ;;		None               void
  6208 ;; Registers used:
  6209 ;;		wreg, status,2, status,0, cstack
  6210 ;; Tracked objects:
  6211 ;;		On entry : F/0
  6212 ;;		On exit  : 0/0
  6213 ;;		Unchanged: 0/0
  6214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  6215 ;;      Params:         1       0       0       0
  6216 ;;      Locals:         1       0       0       0
  6217 ;;      Temps:          1       0       0       0
  6218 ;;      Totals:         3       0       0       0
  6219 ;;Total ram usage:        3 bytes
  6220 ;; Hardware stack levels used:    1
  6221 ;; Hardware stack levels required when called:    4
  6222 ;; This function calls:
  6223 ;;		_lcd_command
  6224 ;;		_lcd_write4bits
  6225 ;; This function is called by:
  6226 ;;		_main
  6227 ;; This function uses a non-reentrant model
  6228 ;;
  6229                           
  6230                           	psect	text31
  6231  001CB6                     __ptext31:
  6232                           	opt stack 0
  6233  001CB6                     _lcd_begin:
  6234                           	opt stack 26
  6235                           
  6236                           ; BSR set to: 0
  6237                           ;incstack = 0
  6238                           ;lcd_begin@lines stored from wreg
  6239  001CB6  6E0A               	movwf	lcd_begin@lines,c
  6240                           
  6241                           ; BSR set to: 0
  6242                           ;lcd44780.c: 412: if(lines > 1)
  6243  001CB8  0E01               	movlw	1
  6244  001CBA  640A               	cpfsgt	lcd_begin@lines,c
  6245  001CBC  D001               	goto	l4396
  6246                           
  6247                           ; BSR set to: 0
  6248                           ;lcd44780.c: 413: LCD_function |= 0x08;
  6249  001CBE  865A               	bsf	_LCD_function,3,c
  6250  001CC0                     l4396:
  6251                           
  6252                           ; BSR set to: 0
  6253                           ;lcd44780.c: 416: LCD_lines = lines;
  6254  001CC0  C00A  F0DA         	movff	lcd_begin@lines,_LCD_lines
  6255                           
  6256                           ; BSR set to: 0
  6257                           ;lcd44780.c: 420: if((dotsize != 0) && (lines == 1))
  6258  001CC4  5008               	movf	lcd_begin@dotsize,w,c
  6259  001CC6  E003               	bz	l4404
  6260                           
  6261                           ; BSR set to: 0
  6262  001CC8  040A               	decf	lcd_begin@lines,w,c
  6263  001CCA  B4D8               	btfsc	status,2,c
  6264                           
  6265                           ; BSR set to: 0
  6266                           ;lcd44780.c: 421: LCD_function |= 0x04;
  6267  001CCC  845A               	bsf	_LCD_function,2,c
  6268  001CCE                     l4404:
  6269                           
  6270                           ; BSR set to: 0
  6271                           ;lcd44780.c: 423: _delay((unsigned long)((15)*(16000000/4000.0)));
  6272  001CCE  0E4E               	movlw	78
  6273  001CD0  6E09               	movwf	??_lcd_begin& (0+255),c
  6274  001CD2  0EEB               	movlw	235
  6275  001CD4                     u3907:
  6276  001CD4  2EE8               	decfsz	wreg,f,c
  6277  001CD6  D7FE               	goto	u3907
  6278  001CD8  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6279  001CDA  D7FC               	goto	u3907
  6280  001CDC  F000               	nop	
  6281                           
  6282                           ;lcd44780.c: 426: LATB &= ~0b0100;
  6283  001CDE  948A               	bcf	3978,2,c	;volatile
  6284                           
  6285                           ;lcd44780.c: 427: LATB &= ~0b1000;
  6286  001CE0  968A               	bcf	3978,3,c	;volatile
  6287                           
  6288                           ;lcd44780.c: 430: if(!(LCD_function & 0x10)) {
  6289  001CE2  B85A               	btfsc	_LCD_function,4,c
  6290  001CE4  D01B               	goto	l4422
  6291                           
  6292                           ;lcd44780.c: 434: lcd_write4bits(0x03);
  6293  001CE6  0E03               	movlw	3
  6294  001CE8  EC06  F014         	call	_lcd_write4bits
  6295                           
  6296                           ;lcd44780.c: 435: _delay((unsigned long)((5)*(16000000/4000.0)));
  6297  001CEC  0E1A               	movlw	26
  6298  001CEE  6E09               	movwf	??_lcd_begin& (0+255),c
  6299  001CF0  0EF8               	movlw	248
  6300  001CF2                     u3917:
  6301  001CF2  2EE8               	decfsz	wreg,f,c
  6302  001CF4  D7FE               	goto	u3917
  6303  001CF6  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6304  001CF8  D7FC               	goto	u3917
  6305  001CFA  D000               	nop2	
  6306                           
  6307                           ;lcd44780.c: 437: lcd_write4bits(0x03);
  6308  001CFC  0E03               	movlw	3
  6309  001CFE  EC06  F014         	call	_lcd_write4bits
  6310                           
  6311                           ;lcd44780.c: 438: _delay((unsigned long)((150)*(16000000/4000000.0)));
  6312  001D02  0EC8               	movlw	200
  6313  001D04                     u3927:
  6314  001D04  2EE8               	decfsz	wreg,f,c
  6315  001D06  D7FE               	goto	u3927
  6316                           
  6317                           ;lcd44780.c: 440: lcd_write4bits(0x03);
  6318  001D08  0E03               	movlw	3
  6319  001D0A  EC06  F014         	call	_lcd_write4bits
  6320                           
  6321                           ;lcd44780.c: 441: _delay((unsigned long)((150)*(16000000/4000000.0)));
  6322  001D0E  0EC8               	movlw	200
  6323  001D10                     u3937:
  6324  001D10  2EE8               	decfsz	wreg,f,c
  6325  001D12  D7FE               	goto	u3937
  6326                           
  6327                           ;lcd44780.c: 443: lcd_write4bits(0x02);
  6328  001D14  0E02               	movlw	2
  6329  001D16  EC06  F014         	call	_lcd_write4bits
  6330                           
  6331                           ;lcd44780.c: 444: }
  6332  001D1A  D01C               	goto	l4430
  6333  001D1C                     l4422:
  6334                           
  6335                           ;lcd44780.c: 446: else {
  6336                           ;lcd44780.c: 450: lcd_command(0x20 | LCD_function);
  6337  001D1C  505A               	movf	_LCD_function,w,c
  6338  001D1E  0920               	iorlw	32
  6339  001D20  EC79  F014         	call	_lcd_command
  6340                           
  6341                           ;lcd44780.c: 451: _delay((unsigned long)((5)*(16000000/4000.0)));
  6342  001D24  0E1A               	movlw	26
  6343  001D26  6E09               	movwf	??_lcd_begin& (0+255),c
  6344  001D28  0EF8               	movlw	248
  6345  001D2A                     u3947:
  6346  001D2A  2EE8               	decfsz	wreg,f,c
  6347  001D2C  D7FE               	goto	u3947
  6348  001D2E  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6349  001D30  D7FC               	goto	u3947
  6350  001D32  D000               	nop2	
  6351                           
  6352                           ;lcd44780.c: 454: lcd_command(0x20 | LCD_function);
  6353  001D34  505A               	movf	_LCD_function,w,c
  6354  001D36  0920               	iorlw	32
  6355  001D38  EC79  F014         	call	_lcd_command
  6356                           
  6357                           ;lcd44780.c: 455: _delay((unsigned long)((5)*(16000000/4000.0)));
  6358  001D3C  0E1A               	movlw	26
  6359  001D3E  6E09               	movwf	??_lcd_begin& (0+255),c
  6360  001D40  0EF8               	movlw	248
  6361  001D42                     u3957:
  6362  001D42  2EE8               	decfsz	wreg,f,c
  6363  001D44  D7FE               	goto	u3957
  6364  001D46  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6365  001D48  D7FC               	goto	u3957
  6366  001D4A  D000               	nop2	
  6367                           
  6368                           ;lcd44780.c: 459: lcd_command(0x20 | LCD_function);
  6369  001D4C  505A               	movf	_LCD_function,w,c
  6370  001D4E  0920               	iorlw	32
  6371  001D50  EC79  F014         	call	_lcd_command
  6372  001D54                     l4430:
  6373                           
  6374                           ;lcd44780.c: 460: }
  6375                           ;lcd44780.c: 463: lcd_command(0x20 | LCD_function);
  6376  001D54  505A               	movf	_LCD_function,w,c
  6377  001D56  0920               	iorlw	32
  6378  001D58  EC79  F014         	call	_lcd_command
  6379                           
  6380                           ;lcd44780.c: 466: LCD_ctrl = 0x04 | 0x00 | 0x00;
  6381  001D5C  0E04               	movlw	4
  6382  001D5E  0100               	movlb	0	; () banked
  6383  001D60  6FD9               	movwf	_LCD_ctrl& (0+255),b
  6384                           
  6385                           ; BSR set to: 0
  6386                           ;lcd44780.c: 467: lcd_command(0x08 | LCD_ctrl);
  6387  001D62  51D9               	movf	_LCD_ctrl& (0+255),w,b
  6388  001D64  0908               	iorlw	8
  6389  001D66  EC79  F014         	call	_lcd_command
  6390                           
  6391                           ;lcd44780.c: 470: lcd_command(0x01);
  6392  001D6A  0E01               	movlw	1
  6393  001D6C  EC79  F014         	call	_lcd_command
  6394                           
  6395                           ;lcd44780.c: 471: _delay((unsigned long)((2)*(16000000/4000.0)));
  6396  001D70  0E0B               	movlw	11
  6397  001D72  6E09               	movwf	??_lcd_begin& (0+255),c
  6398  001D74  0E62               	movlw	98
  6399  001D76                     u3967:
  6400  001D76  2EE8               	decfsz	wreg,f,c
  6401  001D78  D7FE               	goto	u3967
  6402  001D7A  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6403  001D7C  D7FC               	goto	u3967
  6404  001D7E  D000               	nop2	
  6405                           
  6406                           ;lcd44780.c: 474: LCD_mode = 0x02 | 0x00;
  6407  001D80  0E02               	movlw	2
  6408  001D82  0100               	movlb	0	; () banked
  6409  001D84  6FDB               	movwf	_LCD_mode& (0+255),b
  6410                           
  6411                           ; BSR set to: 0
  6412                           ;lcd44780.c: 476: lcd_command(0x04 | LCD_mode);
  6413  001D86  51DB               	movf	_LCD_mode& (0+255),w,b
  6414  001D88  0904               	iorlw	4
  6415  001D8A  EC79  F014         	call	_lcd_command
  6416  001D8E  0012               	return		;funcret
  6417  001D90                     __end_of_lcd_begin:
  6418                           	opt stack 0
  6419                           tblptru	equ	0xFF8
  6420                           tblptrh	equ	0xFF7
  6421                           tblptrl	equ	0xFF6
  6422                           tablat	equ	0xFF5
  6423                           prodh	equ	0xFF4
  6424                           prodl	equ	0xFF3
  6425                           intcon	equ	0xFF2
  6426                           intcon2	equ	0xFF1
  6427                           postinc0	equ	0xFEE
  6428                           wreg	equ	0xFE8
  6429                           postdec1	equ	0xFE5
  6430                           fsr1l	equ	0xFE1
  6431                           postinc2	equ	0xFDE
  6432                           postdec2	equ	0xFDD
  6433                           fsr2h	equ	0xFDA
  6434                           fsr2l	equ	0xFD9
  6435                           status	equ	0xFD8
  6436                           
  6437 ;; *************** function _calibrate *****************
  6438 ;; Defined at:
  6439 ;;		line 25 in file "../../../src/measure.c"
  6440 ;; Parameters:    Size  Location     Type
  6441 ;;		None
  6442 ;; Auto vars:     Size  Location     Type
  6443 ;;  i               1   62[COMRAM] unsigned char 
  6444 ;; Return value:  Size  Location     Type
  6445 ;;		None               void
  6446 ;; Registers used:
  6447 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6448 ;; Tracked objects:
  6449 ;;		On entry : 0/0
  6450 ;;		On exit  : 0/0
  6451 ;;		Unchanged: 0/0
  6452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  6453 ;;      Params:         0       0       0       0
  6454 ;;      Locals:         1       0       0       0
  6455 ;;      Temps:          0       0       0       0
  6456 ;;      Totals:         1       0       0       0
  6457 ;;Total ram usage:        1 bytes
  6458 ;; Hardware stack levels used:    1
  6459 ;; Hardware stack levels required when called:    6
  6460 ;; This function calls:
  6461 ;;		___lwtofl
  6462 ;;		_delay10ms
  6463 ;;		_lcd_clear
  6464 ;;		_lcd_gotoxy
  6465 ;;		_lcd_send
  6466 ;;		_measure_freq
  6467 ;;		_put_str
  6468 ;;		_ser_puts
  6469 ;; This function is called by:
  6470 ;;		_main
  6471 ;; This function uses a non-reentrant model
  6472 ;;
  6473                           
  6474                           	psect	text32
  6475  001BD2                     __ptext32:
  6476                           	opt stack 0
  6477  001BD2                     _calibrate:
  6478                           	opt stack 24
  6479                           
  6480                           ;measure.c: 26: uint8_t i;
  6481                           ;measure.c: 29: lcd_clear();
  6482                           
  6483                           ;incstack = 0
  6484  001BD2  EC63  F014         	call	_lcd_clear	;wreg free
  6485                           
  6486                           ;measure.c: 31: lcd_gotoxy(0, 0);
  6487  001BD6  0E00               	movlw	0
  6488  001BD8  6A08               	clrf	lcd_gotoxy@row,c
  6489  001BDA  ECF3  F012         	call	_lcd_gotoxy
  6490                           
  6491                           ;measure.c: 32: put_str("Calibrating");
  6492  001BDE  0E89               	movlw	STR_23& (0+255)
  6493  001BE0  EC43  F013         	call	_put_str
  6494                           
  6495                           ;measure.c: 34: lcd_gotoxy(0, 1);
  6496  001BE4  0E01               	movlw	1
  6497  001BE6  6E08               	movwf	lcd_gotoxy@row,c
  6498  001BE8  0E00               	movlw	0
  6499  001BEA  ECF3  F012         	call	_lcd_gotoxy
  6500                           
  6501                           ;measure.c: 35: ser_puts("\r\n");
  6502  001BEE  0EE3               	movlw	STR_9& (0+255)
  6503  001BF0  EC27  F014         	call	_ser_puts
  6504                           
  6505                           ;measure.c: 36: put_str("please wait...");
  6506  001BF4  0E6D               	movlw	STR_25& (0+255)
  6507  001BF6  EC43  F013         	call	_put_str
  6508                           
  6509                           ;measure.c: 39: LATC &= ~(1 << 5);
  6510  001BFA  9A8B               	bcf	3979,5,c	;volatile
  6511                           
  6512                           ;measure.c: 41: F1 = (double)measure_freq();
  6513  001BFC  EC75  F00D         	call	_measure_freq	;wreg free
  6514  001C00  C036  F03B         	movff	?_measure_freq,___lwtofl@c
  6515  001C04  C037  F03C         	movff	?_measure_freq+1,___lwtofl@c+1
  6516  001C08  ECCC  F013         	call	___lwtofl	;wreg free
  6517  001C0C  C03B  F0DF         	movff	?___lwtofl,_F1
  6518  001C10  C03C  F0E0         	movff	?___lwtofl+1,_F1+1
  6519  001C14  C03D  F0E1         	movff	?___lwtofl+2,_F1+2
  6520  001C18  C03E  F0E2         	movff	?___lwtofl+3,_F1+3
  6521                           
  6522                           ;measure.c: 42: delay10ms(50);
  6523  001C1C  0E32               	movlw	50
  6524  001C1E  EC89  F014         	call	_delay10ms
  6525                           
  6526                           ;measure.c: 44: F1 = (double)measure_freq();
  6527  001C22  EC75  F00D         	call	_measure_freq	;wreg free
  6528  001C26  C036  F03B         	movff	?_measure_freq,___lwtofl@c
  6529  001C2A  C037  F03C         	movff	?_measure_freq+1,___lwtofl@c+1
  6530  001C2E  ECCC  F013         	call	___lwtofl	;wreg free
  6531  001C32  C03B  F0DF         	movff	?___lwtofl,_F1
  6532  001C36  C03C  F0E0         	movff	?___lwtofl+1,_F1+1
  6533  001C3A  C03D  F0E1         	movff	?___lwtofl+2,_F1+2
  6534  001C3E  C03E  F0E2         	movff	?___lwtofl+3,_F1+3
  6535                           
  6536                           ;measure.c: 45: LATC |= (1 << 5);
  6537  001C42  8A8B               	bsf	3979,5,c	;volatile
  6538                           
  6539                           ;measure.c: 47: F2 = (double)measure_freq();
  6540  001C44  EC75  F00D         	call	_measure_freq	;wreg free
  6541  001C48  C036  F03B         	movff	?_measure_freq,___lwtofl@c
  6542  001C4C  C037  F03C         	movff	?_measure_freq+1,___lwtofl@c+1
  6543  001C50  ECCC  F013         	call	___lwtofl	;wreg free
  6544  001C54  C03B  F0C3         	movff	?___lwtofl,_F2
  6545  001C58  C03C  F0C4         	movff	?___lwtofl+1,_F2+1
  6546  001C5C  C03D  F0C5         	movff	?___lwtofl+2,_F2+2
  6547  001C60  C03E  F0C6         	movff	?___lwtofl+3,_F2+3
  6548                           
  6549                           ;measure.c: 48: delay10ms(50);
  6550  001C64  0E32               	movlw	50
  6551  001C66  EC89  F014         	call	_delay10ms
  6552                           
  6553                           ;measure.c: 50: F2 = (double)measure_freq();
  6554  001C6A  EC75  F00D         	call	_measure_freq	;wreg free
  6555  001C6E  C036  F03B         	movff	?_measure_freq,___lwtofl@c
  6556  001C72  C037  F03C         	movff	?_measure_freq+1,___lwtofl@c+1
  6557  001C76  ECCC  F013         	call	___lwtofl	;wreg free
  6558  001C7A  C03B  F0C3         	movff	?___lwtofl,_F2
  6559  001C7E  C03C  F0C4         	movff	?___lwtofl+1,_F2+1
  6560  001C82  C03D  F0C5         	movff	?___lwtofl+2,_F2+2
  6561  001C86  C03E  F0C6         	movff	?___lwtofl+3,_F2+3
  6562                           
  6563                           ;measure.c: 51: LATC &= ~(1 << 5);
  6564  001C8A  9A8B               	bcf	3979,5,c	;volatile
  6565                           
  6566                           ;measure.c: 54: lcd_gotoxy(11, 0);
  6567  001C8C  6A08               	clrf	lcd_gotoxy@row,c
  6568  001C8E  0E0B               	movlw	11
  6569  001C90  ECF3  F012         	call	_lcd_gotoxy
  6570                           
  6571                           ;measure.c: 55: for(i = 0; i < 6; i++) {
  6572  001C94  6A3F               	clrf	calibrate@i,c
  6573  001C96                     l4478:
  6574                           
  6575                           ;measure.c: 56: lcd_send(('='), 1);
  6576  001C96  0E01               	movlw	1
  6577  001C98  6E05               	movwf	lcd_send@mode,c
  6578  001C9A  0E3D               	movlw	61
  6579  001C9C  EC55  F014         	call	_lcd_send
  6580                           
  6581                           ;measure.c: 58: delay10ms(28);
  6582  001CA0  0E1C               	movlw	28
  6583  001CA2  EC89  F014         	call	_delay10ms
  6584  001CA6  2A3F               	incf	calibrate@i,f,c
  6585  001CA8  0E05               	movlw	5
  6586  001CAA  643F               	cpfsgt	calibrate@i,c
  6587  001CAC  D7F4               	goto	l4478
  6588                           
  6589                           ;measure.c: 59: }
  6590                           ;measure.c: 61: ser_puts("\r\n");
  6591  001CAE  0EE3               	movlw	STR_9& (0+255)
  6592  001CB0  EC27  F014         	call	_ser_puts
  6593  001CB4  0012               	return		;funcret
  6594  001CB6                     __end_of_calibrate:
  6595                           	opt stack 0
  6596                           tblptru	equ	0xFF8
  6597                           tblptrh	equ	0xFF7
  6598                           tblptrl	equ	0xFF6
  6599                           tablat	equ	0xFF5
  6600                           prodh	equ	0xFF4
  6601                           prodl	equ	0xFF3
  6602                           intcon	equ	0xFF2
  6603                           intcon2	equ	0xFF1
  6604                           postinc0	equ	0xFEE
  6605                           wreg	equ	0xFE8
  6606                           postdec1	equ	0xFE5
  6607                           fsr1l	equ	0xFE1
  6608                           postinc2	equ	0xFDE
  6609                           postdec2	equ	0xFDD
  6610                           fsr2h	equ	0xFDA
  6611                           fsr2l	equ	0xFD9
  6612                           status	equ	0xFD8
  6613                           
  6614 ;; *************** function _put_str *****************
  6615 ;; Defined at:
  6616 ;;		line 221 in file "../../../src/print.c"
  6617 ;; Parameters:    Size  Location     Type
  6618 ;;  s               1    wreg     PTR const unsigned char 
  6619 ;;		 -> STR_37(13), STR_28(10), STR_25(15), STR_23(12), 
  6620 ;; Auto vars:     Size  Location     Type
  6621 ;;  s               1   10[COMRAM] PTR const unsigned char 
  6622 ;;		 -> STR_37(13), STR_28(10), STR_25(15), STR_23(12), 
  6623 ;;  i               2    8[COMRAM] int 
  6624 ;; Return value:  Size  Location     Type
  6625 ;;		None               void
  6626 ;; Registers used:
  6627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6628 ;; Tracked objects:
  6629 ;;		On entry : 0/0
  6630 ;;		On exit  : 0/0
  6631 ;;		Unchanged: 0/0
  6632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  6633 ;;      Params:         0       0       0       0
  6634 ;;      Locals:         3       0       0       0
  6635 ;;      Temps:          1       0       0       0
  6636 ;;      Totals:         4       0       0       0
  6637 ;;Total ram usage:        4 bytes
  6638 ;; Hardware stack levels used:    1
  6639 ;; Hardware stack levels required when called:    4
  6640 ;; This function calls:
  6641 ;;		_output_putch
  6642 ;; This function is called by:
  6643 ;;		_calibrate
  6644 ;;		_measure_capacitance
  6645 ;;		_measure_inductance
  6646 ;; This function uses a non-reentrant model
  6647 ;;
  6648                           
  6649                           	psect	text33
  6650  002686                     __ptext33:
  6651                           	opt stack 0
  6652  002686                     _put_str:
  6653                           	opt stack 25
  6654                           
  6655                           ;incstack = 0
  6656                           ;put_str@s stored from wreg
  6657  002686  6E0B               	movwf	put_str@s,c
  6658                           
  6659                           ;print.c: 222: int i;
  6660                           ;print.c: 224: for(i = 0; s[i]; i++) {
  6661  002688  6A09               	clrf	put_str@i,c
  6662  00268A  6A0A               	clrf	put_str@i+1,c
  6663  00268C  D00B               	goto	l4306
  6664  00268E                     l4302:
  6665                           
  6666                           ;print.c: 225: output_putch(s[i]);
  6667  00268E  500B               	movf	put_str@s,w,c
  6668  002690  2409               	addwf	put_str@i,w,c
  6669  002692  6E08               	movwf	??_put_str& (0+255),c
  6670  002694  C008  FFF6         	movff	??_put_str,tblptrl
  6671  002698                     	if	0	;There is only one active tblptr byte
  6672  002698                     	endif
  6673  002698                     	if	0	;tblptru may be non-zero
  6674  002698                     	endif
  6675  002698                     	if	0	;tblptru may be non-zero
  6676  002698                     	endif
  6677  002698  0008               	tblrd		*
  6678  00269A  50F5               	movf	tablat,w,c
  6679  00269C  EC6F  F014         	call	_output_putch
  6680  0026A0  4A09               	infsnz	put_str@i,f,c
  6681  0026A2  2A0A               	incf	put_str@i+1,f,c
  6682  0026A4                     l4306:
  6683  0026A4  500B               	movf	put_str@s,w,c
  6684  0026A6  2409               	addwf	put_str@i,w,c
  6685  0026A8  6E08               	movwf	??_put_str& (0+255),c
  6686  0026AA  C008  FFF6         	movff	??_put_str,tblptrl
  6687  0026AE                     	if	0	;There is only one active tblptr byte
  6688  0026AE                     	endif
  6689  0026AE                     	if	0	;tblptru may be non-zero
  6690  0026AE                     	endif
  6691  0026AE                     	if	0	;tblptru may be non-zero
  6692  0026AE                     	endif
  6693  0026AE  0008               	tblrd		*
  6694  0026B0  50F5               	movf	tablat,w,c
  6695  0026B2  B4D8               	btfsc	status,2,c
  6696  0026B4  0012               	return		;funcret
  6697  0026B6  D7EB               	goto	l4302
  6698  0026B8                     __end_of_put_str:
  6699                           	opt stack 0
  6700                           tblptru	equ	0xFF8
  6701                           tblptrh	equ	0xFF7
  6702                           tblptrl	equ	0xFF6
  6703                           tablat	equ	0xFF5
  6704                           prodh	equ	0xFF4
  6705                           prodl	equ	0xFF3
  6706                           intcon	equ	0xFF2
  6707                           intcon2	equ	0xFF1
  6708                           postinc0	equ	0xFEE
  6709                           wreg	equ	0xFE8
  6710                           postdec1	equ	0xFE5
  6711                           fsr1l	equ	0xFE1
  6712                           postinc2	equ	0xFDE
  6713                           postdec2	equ	0xFDD
  6714                           fsr2h	equ	0xFDA
  6715                           fsr2l	equ	0xFD9
  6716                           status	equ	0xFD8
  6717                           
  6718 ;; *************** function _output_putch *****************
  6719 ;; Defined at:
  6720 ;;		line 208 in file "../../../src/print.c"
  6721 ;; Parameters:    Size  Location     Type
  6722 ;;  c               1    wreg     unsigned char 
  6723 ;; Auto vars:     Size  Location     Type
  6724 ;;  c               1    6[COMRAM] unsigned char 
  6725 ;; Return value:  Size  Location     Type
  6726 ;;		None               void
  6727 ;; Registers used:
  6728 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6729 ;; Tracked objects:
  6730 ;;		On entry : 0/0
  6731 ;;		On exit  : 0/0
  6732 ;;		Unchanged: 0/0
  6733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  6734 ;;      Params:         0       0       0       0
  6735 ;;      Locals:         1       0       0       0
  6736 ;;      Temps:          0       0       0       0
  6737 ;;      Totals:         1       0       0       0
  6738 ;;Total ram usage:        1 bytes
  6739 ;; Hardware stack levels used:    1
  6740 ;; Hardware stack levels required when called:    3
  6741 ;; This function calls:
  6742 ;;		_lcd_send
  6743 ;;		_ser_putch
  6744 ;; This function is called by:
  6745 ;;		_put_str
  6746 ;; This function uses a non-reentrant model
  6747 ;;
  6748                           
  6749                           	psect	text34
  6750  0028DE                     __ptext34:
  6751                           	opt stack 0
  6752  0028DE                     _output_putch:
  6753                           	opt stack 25
  6754                           
  6755                           ;incstack = 0
  6756                           ;output_putch@c stored from wreg
  6757  0028DE  6E07               	movwf	output_putch@c,c
  6758                           
  6759                           ;print.c: 210: lcd_send((c), 1);
  6760  0028E0  0E01               	movlw	1
  6761  0028E2  6E05               	movwf	lcd_send@mode,c
  6762  0028E4  5007               	movf	output_putch@c,w,c
  6763  0028E6  EC55  F014         	call	_lcd_send
  6764                           
  6765                           ;print.c: 213: ser_putch(c);
  6766  0028EA  5007               	movf	output_putch@c,w,c
  6767  0028EC  ECF4  F013         	call	_ser_putch
  6768  0028F0  0012               	return		;funcret
  6769  0028F2                     __end_of_output_putch:
  6770                           	opt stack 0
  6771                           tblptru	equ	0xFF8
  6772                           tblptrh	equ	0xFF7
  6773                           tblptrl	equ	0xFF6
  6774                           tablat	equ	0xFF5
  6775                           prodh	equ	0xFF4
  6776                           prodl	equ	0xFF3
  6777                           intcon	equ	0xFF2
  6778                           intcon2	equ	0xFF1
  6779                           postinc0	equ	0xFEE
  6780                           wreg	equ	0xFE8
  6781                           postdec1	equ	0xFE5
  6782                           fsr1l	equ	0xFE1
  6783                           postinc2	equ	0xFDE
  6784                           postdec2	equ	0xFDD
  6785                           fsr2h	equ	0xFDA
  6786                           fsr2l	equ	0xFD9
  6787                           status	equ	0xFD8
  6788                           
  6789 ;; *************** function _measure_freq *****************
  6790 ;; Defined at:
  6791 ;;		line 68 in file "../../../src/measure.c"
  6792 ;; Parameters:    Size  Location     Type
  6793 ;;		None
  6794 ;; Auto vars:     Size  Location     Type
  6795 ;;  count           2   56[COMRAM] unsigned int 
  6796 ;; Return value:  Size  Location     Type
  6797 ;;                  2   53[COMRAM] unsigned short 
  6798 ;; Registers used:
  6799 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6800 ;; Tracked objects:
  6801 ;;		On entry : 0/0
  6802 ;;		On exit  : 0/0
  6803 ;;		Unchanged: 0/0
  6804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  6805 ;;      Params:         2       0       0       0
  6806 ;;      Locals:         2       0       0       0
  6807 ;;      Temps:          1       0       0       0
  6808 ;;      Totals:         5       0       0       0
  6809 ;;Total ram usage:        5 bytes
  6810 ;; Hardware stack levels used:    1
  6811 ;; Hardware stack levels required when called:    5
  6812 ;; This function calls:
  6813 ;;		_buffer_init
  6814 ;;		_buffer_puts
  6815 ;;		_format_number
  6816 ;;		_lcd_gotoxy
  6817 ;;		_print_buffer
  6818 ;;		_timer0_read_ps
  6819 ;; This function is called by:
  6820 ;;		_calibrate
  6821 ;;		_measure_capacitance
  6822 ;;		_measure_inductance
  6823 ;; This function uses a non-reentrant model
  6824 ;;
  6825                           
  6826                           	psect	text35
  6827  001AEA                     __ptext35:
  6828                           	opt stack 0
  6829  001AEA                     _measure_freq:
  6830                           	opt stack 24
  6831                           
  6832                           ;measure.c: 69: uint16_t count;
  6833                           ;measure.c: 71: INTCON &= ~0b100;
  6834                           
  6835                           ;incstack = 0
  6836  001AEA  94F2               	bcf	intcon,2,c	;volatile
  6837                           
  6838                           ;measure.c: 75: TRISA &= ~0b00010000;
  6839  001AEC  9892               	bcf	3986,4,c	;volatile
  6840                           
  6841                           ;measure.c: 77: _delay((unsigned long)((20)*(16000000/4000.0)));
  6842  001AEE  0E68               	movlw	104
  6843  001AF0  6E38               	movwf	??_measure_freq& (0+255),c
  6844  001AF2  0EE4               	movlw	228
  6845  001AF4                     u3977:
  6846  001AF4  2EE8               	decfsz	wreg,f,c
  6847  001AF6  D7FE               	goto	u3977
  6848  001AF8  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6849  001AFA  D7FC               	goto	u3977
  6850  001AFC  D000               	nop2	
  6851                           
  6852                           ;measure.c: 80: TMR0 = 0x00;
  6853  001AFE  6AD6               	clrf	4054,c	;volatile
  6854  001B00  6AD7               	clrf	4055,c	;volatile
  6855                           
  6856                           ;measure.c: 85: _delay((unsigned long)((10)*(16000000/4000.0)));
  6857  001B02  0E34               	movlw	52
  6858  001B04  6E38               	movwf	??_measure_freq& (0+255),c
  6859  001B06  0EF2               	movlw	242
  6860  001B08                     u3987:
  6861  001B08  2EE8               	decfsz	wreg,f,c
  6862  001B0A  D7FE               	goto	u3987
  6863  001B0C  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6864  001B0E  D7FC               	goto	u3987
  6865                           
  6866                           ;measure.c: 86: _delay((unsigned long)((10)*(16000000/4000.0)));
  6867  001B10  0E34               	movlw	52
  6868  001B12  6E38               	movwf	??_measure_freq& (0+255),c
  6869  001B14  0EF2               	movlw	242
  6870  001B16                     u3997:
  6871  001B16  2EE8               	decfsz	wreg,f,c
  6872  001B18  D7FE               	goto	u3997
  6873  001B1A  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6874  001B1C  D7FC               	goto	u3997
  6875                           
  6876                           ;measure.c: 87: _delay((unsigned long)((10)*(16000000/4000.0)));
  6877  001B1E  0E34               	movlw	52
  6878  001B20  6E38               	movwf	??_measure_freq& (0+255),c
  6879  001B22  0EF2               	movlw	242
  6880  001B24                     u4007:
  6881  001B24  2EE8               	decfsz	wreg,f,c
  6882  001B26  D7FE               	goto	u4007
  6883  001B28  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6884  001B2A  D7FC               	goto	u4007
  6885                           
  6886                           ;measure.c: 88: _delay((unsigned long)((10)*(16000000/4000.0)));
  6887  001B2C  0E34               	movlw	52
  6888  001B2E  6E38               	movwf	??_measure_freq& (0+255),c
  6889  001B30  0EF2               	movlw	242
  6890  001B32                     u4017:
  6891  001B32  2EE8               	decfsz	wreg,f,c
  6892  001B34  D7FE               	goto	u4017
  6893  001B36  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6894  001B38  D7FC               	goto	u4017
  6895                           
  6896                           ;measure.c: 89: _delay((unsigned long)((10)*(16000000/4000.0)));
  6897  001B3A  0E34               	movlw	52
  6898  001B3C  6E38               	movwf	??_measure_freq& (0+255),c
  6899  001B3E  0EF2               	movlw	242
  6900  001B40                     u4027:
  6901  001B40  2EE8               	decfsz	wreg,f,c
  6902  001B42  D7FE               	goto	u4027
  6903  001B44  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6904  001B46  D7FC               	goto	u4027
  6905                           
  6906                           ;measure.c: 90: _delay((unsigned long)((10)*(16000000/4000.0)));
  6907  001B48  0E34               	movlw	52
  6908  001B4A  6E38               	movwf	??_measure_freq& (0+255),c
  6909  001B4C  0EF2               	movlw	242
  6910  001B4E                     u4037:
  6911  001B4E  2EE8               	decfsz	wreg,f,c
  6912  001B50  D7FE               	goto	u4037
  6913  001B52  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6914  001B54  D7FC               	goto	u4037
  6915                           
  6916                           ;measure.c: 91: _delay((unsigned long)((10)*(16000000/4000.0)));
  6917  001B56  0E34               	movlw	52
  6918  001B58  6E38               	movwf	??_measure_freq& (0+255),c
  6919  001B5A  0EF2               	movlw	242
  6920  001B5C                     u4047:
  6921  001B5C  2EE8               	decfsz	wreg,f,c
  6922  001B5E  D7FE               	goto	u4047
  6923  001B60  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6924  001B62  D7FC               	goto	u4047
  6925                           
  6926                           ;measure.c: 92: _delay((unsigned long)((10)*(16000000/4000.0)));
  6927  001B64  0E34               	movlw	52
  6928  001B66  6E38               	movwf	??_measure_freq& (0+255),c
  6929  001B68  0EF2               	movlw	242
  6930  001B6A                     u4057:
  6931  001B6A  2EE8               	decfsz	wreg,f,c
  6932  001B6C  D7FE               	goto	u4057
  6933  001B6E  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6934  001B70  D7FC               	goto	u4057
  6935                           
  6936                           ;measure.c: 93: _delay((unsigned long)((10)*(16000000/4000.0)));
  6937  001B72  0E34               	movlw	52
  6938  001B74  6E38               	movwf	??_measure_freq& (0+255),c
  6939  001B76  0EF2               	movlw	242
  6940  001B78                     u4067:
  6941  001B78  2EE8               	decfsz	wreg,f,c
  6942  001B7A  D7FE               	goto	u4067
  6943  001B7C  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6944  001B7E  D7FC               	goto	u4067
  6945                           
  6946                           ;measure.c: 94: _delay((unsigned long)((10)*(16000000/4000.0)));
  6947  001B80  0E34               	movlw	52
  6948  001B82  6E38               	movwf	??_measure_freq& (0+255),c
  6949  001B84  0EF2               	movlw	242
  6950  001B86                     u4077:
  6951  001B86  2EE8               	decfsz	wreg,f,c
  6952  001B88  D7FE               	goto	u4077
  6953  001B8A  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6954  001B8C  D7FC               	goto	u4077
  6955                           
  6956                           ;measure.c: 99: TRISA |= 0b00010000;
  6957  001B8E  8892               	bsf	3986,4,c	;volatile
  6958                           
  6959                           ;measure.c: 102: count = timer0_read_ps();
  6960  001B90  EC27  F012         	call	_timer0_read_ps	;wreg free
  6961  001B94  C004  F039         	movff	?_timer0_read_ps,measure_freq@count
  6962  001B98  C005  F03A         	movff	?_timer0_read_ps+1,measure_freq@count+1
  6963                           
  6964                           ;measure.c: 105: lcd_gotoxy(0, 1);
  6965  001B9C  0E01               	movlw	1
  6966  001B9E  6E08               	movwf	lcd_gotoxy@row,c
  6967  001BA0  0E00               	movlw	0
  6968  001BA2  ECF3  F012         	call	_lcd_gotoxy
  6969                           
  6970                           ;measure.c: 107: buffer_init();
  6971  001BA6  EC80  F014         	call	_buffer_init	;wreg free
  6972                           
  6973                           ; BSR set to: 1
  6974                           ;measure.c: 108: buffer_puts("Freq=");
  6975  001BAA  0ECA               	movlw	STR_27& (0+255)
  6976  001BAC  EC37  F014         	call	_buffer_puts
  6977                           
  6978                           ; BSR set to: 1
  6979                           ;measure.c: 109: format_number(count, 10, 5);
  6980  001BB0  C039  F00B         	movff	measure_freq@count,format_number@n
  6981  001BB4  C03A  F00C         	movff	measure_freq@count+1,format_number@n+1
  6982  001BB8  0E0A               	movlw	10
  6983  001BBA  6E0D               	movwf	format_number@base,c
  6984  001BBC  0E05               	movlw	5
  6985  001BBE  6E0E               	movwf	format_number@pad,c
  6986  001BC0  ECDD  F00F         	call	_format_number	;wreg free
  6987                           
  6988                           ;measure.c: 110: print_buffer();
  6989  001BC4  EC8A  F013         	call	_print_buffer	;wreg free
  6990                           
  6991                           ;measure.c: 112: return count;
  6992  001BC8  C039  F036         	movff	measure_freq@count,?_measure_freq
  6993  001BCC  C03A  F037         	movff	measure_freq@count+1,?_measure_freq+1
  6994  001BD0  0012               	return		;funcret
  6995  001BD2                     __end_of_measure_freq:
  6996                           	opt stack 0
  6997                           tblptru	equ	0xFF8
  6998                           tblptrh	equ	0xFF7
  6999                           tblptrl	equ	0xFF6
  7000                           tablat	equ	0xFF5
  7001                           prodh	equ	0xFF4
  7002                           prodl	equ	0xFF3
  7003                           intcon	equ	0xFF2
  7004                           intcon2	equ	0xFF1
  7005                           postinc0	equ	0xFEE
  7006                           wreg	equ	0xFE8
  7007                           postdec1	equ	0xFE5
  7008                           fsr1l	equ	0xFE1
  7009                           postinc2	equ	0xFDE
  7010                           postdec2	equ	0xFDD
  7011                           fsr2h	equ	0xFDA
  7012                           fsr2l	equ	0xFD9
  7013                           status	equ	0xFD8
  7014                           
  7015 ;; *************** function _timer0_read_ps *****************
  7016 ;; Defined at:
  7017 ;;		line 63 in file "../../../lib/timer.c"
  7018 ;; Parameters:    Size  Location     Type
  7019 ;;		None
  7020 ;; Auto vars:     Size  Location     Type
  7021 ;;  count           2    8[COMRAM] unsigned int 
  7022 ;;  prev            1    7[COMRAM] unsigned char 
  7023 ;; Return value:  Size  Location     Type
  7024 ;;                  2    3[COMRAM] unsigned short 
  7025 ;; Registers used:
  7026 ;;		wreg, status,2, status,0
  7027 ;; Tracked objects:
  7028 ;;		On entry : 0/0
  7029 ;;		On exit  : 0/0
  7030 ;;		Unchanged: 0/0
  7031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  7032 ;;      Params:         2       0       0       0
  7033 ;;      Locals:         3       0       0       0
  7034 ;;      Temps:          2       0       0       0
  7035 ;;      Totals:         7       0       0       0
  7036 ;;Total ram usage:        7 bytes
  7037 ;; Hardware stack levels used:    1
  7038 ;; Hardware stack levels required when called:    1
  7039 ;; This function calls:
  7040 ;;		Nothing
  7041 ;; This function is called by:
  7042 ;;		_measure_freq
  7043 ;; This function uses a non-reentrant model
  7044 ;;
  7045                           
  7046                           	psect	text36
  7047  00244E                     __ptext36:
  7048                           	opt stack 0
  7049  00244E                     _timer0_read_ps:
  7050                           	opt stack 27
  7051                           
  7052                           ;timer.c: 64: uint8_t prev = TMR0;
  7053                           
  7054                           ;incstack = 0
  7055  00244E  CFD6 F008          	movff	4054,timer0_read_ps@prev	;volatile
  7056                           
  7057                           ;timer.c: 65: uint16_t count = 0;
  7058  002452  6A09               	clrf	timer0_read_ps@count,c
  7059  002454  6A0A               	clrf	timer0_read_ps@count+1,c
  7060                           
  7061                           ;timer.c: 67: T0CON |= 0x20;
  7062  002456  8AD5               	bsf	4053,5,c	;volatile
  7063  002458                     l186:
  7064                           
  7065                           ;timer.c: 71: T0CON |= 0x10;
  7066  002458  88D5               	bsf	4053,4,c	;volatile
  7067                           
  7068                           ;timer.c: 73: __nop();
  7069  00245A  F000               	nop	
  7070                           
  7071                           ;timer.c: 74: __nop();
  7072  00245C  F000               	nop	
  7073                           
  7074                           ;timer.c: 76: T0CON &= ~0x10;
  7075  00245E  98D5               	bcf	4053,4,c	;volatile
  7076                           
  7077                           ;timer.c: 78: __nop();
  7078  002460  F000               	nop	
  7079                           
  7080                           ;timer.c: 79: __nop();
  7081  002462  F000               	nop	
  7082                           
  7083                           ;timer.c: 81: ++count;
  7084  002464  4A09               	infsnz	timer0_read_ps@count,f,c
  7085  002466  2A0A               	incf	timer0_read_ps@count+1,f,c
  7086                           
  7087                           ;timer.c: 84: } while(prev == TMR0 && count <= 255);
  7088  002468  5008               	movf	timer0_read_ps@prev,w,c
  7089  00246A  18D6               	xorwf	4054,w,c	;volatile
  7090  00246C  10D7               	iorwf	4055,w,c	;volatile
  7091  00246E  E102               	bnz	l4226
  7092  002470  040A               	decf	timer0_read_ps@count+1,w,c
  7093  002472  E3F2               	bnc	l186
  7094  002474                     l4226:
  7095                           
  7096                           ;timer.c: 86: count = ((prev << 8) + (256 - count));
  7097  002474  5008               	movf	timer0_read_ps@prev,w,c
  7098  002476  6E07               	movwf	(??_timer0_read_ps+1)& (0+255),c
  7099  002478  6A06               	clrf	??_timer0_read_ps& (0+255),c
  7100  00247A  5009               	movf	timer0_read_ps@count,w,c
  7101  00247C  5E06               	subwf	??_timer0_read_ps,f,c
  7102  00247E  500A               	movf	timer0_read_ps@count+1,w,c
  7103  002480  5A07               	subwfb	??_timer0_read_ps+1,f,c
  7104  002482  0E00               	movlw	0
  7105  002484  2406               	addwf	??_timer0_read_ps,w,c
  7106  002486  6E09               	movwf	timer0_read_ps@count,c
  7107  002488  0E01               	movlw	1
  7108  00248A  2007               	addwfc	??_timer0_read_ps+1,w,c
  7109  00248C  6E0A               	movwf	timer0_read_ps@count+1,c
  7110                           
  7111                           ;timer.c: 87: return count;
  7112  00248E  C009  F004         	movff	timer0_read_ps@count,?_timer0_read_ps
  7113  002492  C00A  F005         	movff	timer0_read_ps@count+1,?_timer0_read_ps+1
  7114  002496  0012               	return		;funcret
  7115  002498                     __end_of_timer0_read_ps:
  7116                           	opt stack 0
  7117                           tblptru	equ	0xFF8
  7118                           tblptrh	equ	0xFF7
  7119                           tblptrl	equ	0xFF6
  7120                           tablat	equ	0xFF5
  7121                           prodh	equ	0xFF4
  7122                           prodl	equ	0xFF3
  7123                           intcon	equ	0xFF2
  7124                           intcon2	equ	0xFF1
  7125                           postinc0	equ	0xFEE
  7126                           wreg	equ	0xFE8
  7127                           postdec1	equ	0xFE5
  7128                           fsr1l	equ	0xFE1
  7129                           postinc2	equ	0xFDE
  7130                           postdec2	equ	0xFDD
  7131                           fsr2h	equ	0xFDA
  7132                           fsr2l	equ	0xFD9
  7133                           status	equ	0xFD8
  7134                           
  7135 ;; *************** function _print_buffer *****************
  7136 ;; Defined at:
  7137 ;;		line 230 in file "../../../src/print.c"
  7138 ;; Parameters:    Size  Location     Type
  7139 ;;		None
  7140 ;; Auto vars:     Size  Location     Type
  7141 ;;  i               1    6[COMRAM] unsigned char 
  7142 ;; Return value:  Size  Location     Type
  7143 ;;		None               void
  7144 ;; Registers used:
  7145 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7146 ;; Tracked objects:
  7147 ;;		On entry : 0/1
  7148 ;;		On exit  : 0/0
  7149 ;;		Unchanged: 0/0
  7150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  7151 ;;      Params:         0       0       0       0
  7152 ;;      Locals:         1       0       0       0
  7153 ;;      Temps:          1       0       0       0
  7154 ;;      Totals:         2       0       0       0
  7155 ;;Total ram usage:        2 bytes
  7156 ;; Hardware stack levels used:    1
  7157 ;; Hardware stack levels required when called:    3
  7158 ;; This function calls:
  7159 ;;		_ser_putch
  7160 ;;		_ser_puts
  7161 ;; This function is called by:
  7162 ;;		_measure_freq
  7163 ;; This function uses a non-reentrant model
  7164 ;;
  7165                           
  7166                           	psect	text37
  7167  002714                     __ptext37:
  7168                           	opt stack 0
  7169  002714                     _print_buffer:
  7170                           	opt stack 25
  7171                           
  7172                           ;print.c: 231: uint8_t i;
  7173                           ;print.c: 232: for(i = 0; i < buffer.n; i++) {
  7174                           
  7175                           ;incstack = 0
  7176  002714  6A07               	clrf	print_buffer@i,c
  7177  002716  D00A               	goto	l4206
  7178  002718                     l4202:
  7179                           
  7180                           ; BSR set to: 1
  7181                           ;print.c: 233: ser_putch(buffer.x[i]);
  7182  002718  0E10               	movlw	low _buffer
  7183  00271A  2407               	addwf	print_buffer@i,w,c
  7184  00271C  6ED9               	movwf	fsr2l,c
  7185  00271E  6ADA               	clrf	fsr2h,c
  7186  002720  0E01               	movlw	high _buffer
  7187  002722  22DA               	addwfc	fsr2h,f,c
  7188  002724  50DF               	movf	indf2,w,c
  7189  002726  ECF4  F013         	call	_ser_putch
  7190  00272A  2A07               	incf	print_buffer@i,f,c
  7191  00272C                     l4206:
  7192  00272C  0101               	movlb	1	; () banked
  7193  00272E  3920               	swapf	(_buffer+16)& (0+255),w,b
  7194  002730  0B0F               	andlw	15
  7195  002732  6E06               	movwf	??_print_buffer& (0+255),c
  7196  002734  5006               	movf	??_print_buffer,w,c
  7197  002736  5C07               	subwf	print_buffer@i,w,c
  7198  002738  E3EF               	bnc	l4202
  7199                           
  7200                           ; BSR set to: 1
  7201                           ;print.c: 234: }
  7202                           ;print.c: 235: ser_puts("\r\n");
  7203  00273A  0EE3               	movlw	STR_9& (0+255)
  7204  00273C  EC27  F014         	call	_ser_puts
  7205  002740  0012               	return		;funcret
  7206  002742                     __end_of_print_buffer:
  7207                           	opt stack 0
  7208                           tblptru	equ	0xFF8
  7209                           tblptrh	equ	0xFF7
  7210                           tblptrl	equ	0xFF6
  7211                           tablat	equ	0xFF5
  7212                           prodh	equ	0xFF4
  7213                           prodl	equ	0xFF3
  7214                           intcon	equ	0xFF2
  7215                           intcon2	equ	0xFF1
  7216                           postinc0	equ	0xFEE
  7217                           wreg	equ	0xFE8
  7218                           postdec1	equ	0xFE5
  7219                           fsr1l	equ	0xFE1
  7220                           indf2	equ	0xFDF
  7221                           postinc2	equ	0xFDE
  7222                           postdec2	equ	0xFDD
  7223                           fsr2h	equ	0xFDA
  7224                           fsr2l	equ	0xFD9
  7225                           status	equ	0xFD8
  7226                           
  7227 ;; *************** function _ser_puts *****************
  7228 ;; Defined at:
  7229 ;;		line 65 in file "../../../lib/ser.c"
  7230 ;; Parameters:    Size  Location     Type
  7231 ;;  s               1    wreg     PTR const unsigned char 
  7232 ;;		 -> STR_36(3), STR_35(5), STR_34(3), STR_33(8), 
  7233 ;;		 -> STR_32(6), STR_31(6), STR_30(6), STR_29(5), 
  7234 ;;		 -> STR_26(3), STR_24(3), STR_22(3), STR_17(3), 
  7235 ;;		 -> STR_16(16), STR_15(16), STR_13(3), STR_9(3), 
  7236 ;; Auto vars:     Size  Location     Type
  7237 ;;  s               1    4[COMRAM] PTR const unsigned char 
  7238 ;;		 -> STR_36(3), STR_35(5), STR_34(3), STR_33(8), 
  7239 ;;		 -> STR_32(6), STR_31(6), STR_30(6), STR_29(5), 
  7240 ;;		 -> STR_26(3), STR_24(3), STR_22(3), STR_17(3), 
  7241 ;;		 -> STR_16(16), STR_15(16), STR_13(3), STR_9(3), 
  7242 ;; Return value:  Size  Location     Type
  7243 ;;		None               void
  7244 ;; Registers used:
  7245 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7246 ;; Tracked objects:
  7247 ;;		On entry : 0/0
  7248 ;;		On exit  : 0/0
  7249 ;;		Unchanged: 0/0
  7250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  7251 ;;      Params:         0       0       0       0
  7252 ;;      Locals:         1       0       0       0
  7253 ;;      Temps:          0       0       0       0
  7254 ;;      Totals:         1       0       0       0
  7255 ;;Total ram usage:        1 bytes
  7256 ;; Hardware stack levels used:    1
  7257 ;; Hardware stack levels required when called:    2
  7258 ;; This function calls:
  7259 ;;		_ser_putch
  7260 ;; This function is called by:
  7261 ;;		_print_unit
  7262 ;;		_print_buffer
  7263 ;;		_main
  7264 ;;		_calibrate
  7265 ;;		_measure_capacitance
  7266 ;; This function uses a non-reentrant model
  7267 ;;
  7268                           
  7269                           	psect	text38
  7270  00284E                     __ptext38:
  7271                           	opt stack 0
  7272  00284E                     _ser_puts:
  7273                           	opt stack 28
  7274                           
  7275                           ;incstack = 0
  7276                           ;ser_puts@s stored from wreg
  7277  00284E  6E05               	movwf	ser_puts@s,c
  7278                           
  7279                           ;ser.c: 66: while(*s) ser_putch(*s++);
  7280  002850  D007               	goto	l4024
  7281  002852                     l4020:
  7282  002852  C005  FFF6         	movff	ser_puts@s,tblptrl
  7283  002856                     	if	0	;There is only one active tblptr byte
  7284  002856                     	endif
  7285  002856                     	if	0	;tblptru may be non-zero
  7286  002856                     	endif
  7287  002856                     	if	0	;tblptru may be non-zero
  7288  002856                     	endif
  7289  002856  0008               	tblrd		*
  7290  002858  50F5               	movf	tablat,w,c
  7291  00285A  ECF4  F013         	call	_ser_putch
  7292  00285E  2A05               	incf	ser_puts@s,f,c
  7293  002860                     l4024:
  7294  002860  C005  FFF6         	movff	ser_puts@s,tblptrl
  7295  002864                     	if	0	;There is only one active tblptr byte
  7296  002864                     	endif
  7297  002864                     	if	0	;tblptru may be non-zero
  7298  002864                     	endif
  7299  002864                     	if	0	;tblptru may be non-zero
  7300  002864                     	endif
  7301  002864  0008               	tblrd		*
  7302  002866  50F5               	movf	tablat,w,c
  7303  002868  B4D8               	btfsc	status,2,c
  7304  00286A  0012               	return		;funcret
  7305  00286C  D7F2               	goto	l4020
  7306  00286E                     __end_of_ser_puts:
  7307                           	opt stack 0
  7308                           tblptru	equ	0xFF8
  7309                           tblptrh	equ	0xFF7
  7310                           tblptrl	equ	0xFF6
  7311                           tablat	equ	0xFF5
  7312                           prodh	equ	0xFF4
  7313                           prodl	equ	0xFF3
  7314                           intcon	equ	0xFF2
  7315                           intcon2	equ	0xFF1
  7316                           postinc0	equ	0xFEE
  7317                           wreg	equ	0xFE8
  7318                           postdec1	equ	0xFE5
  7319                           fsr1l	equ	0xFE1
  7320                           indf2	equ	0xFDF
  7321                           postinc2	equ	0xFDE
  7322                           postdec2	equ	0xFDD
  7323                           fsr2h	equ	0xFDA
  7324                           fsr2l	equ	0xFD9
  7325                           status	equ	0xFD8
  7326                           
  7327 ;; *************** function _ser_putch *****************
  7328 ;; Defined at:
  7329 ;;		line 55 in file "../../../lib/ser.c"
  7330 ;; Parameters:    Size  Location     Type
  7331 ;;  c               1    wreg     unsigned char 
  7332 ;; Auto vars:     Size  Location     Type
  7333 ;;  c               1    3[COMRAM] unsigned char 
  7334 ;; Return value:  Size  Location     Type
  7335 ;;		None               void
  7336 ;; Registers used:
  7337 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7338 ;; Tracked objects:
  7339 ;;		On entry : 0/0
  7340 ;;		On exit  : 0/0
  7341 ;;		Unchanged: 0/0
  7342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  7343 ;;      Params:         0       0       0       0
  7344 ;;      Locals:         1       0       0       0
  7345 ;;      Temps:          0       0       0       0
  7346 ;;      Totals:         1       0       0       0
  7347 ;;Total ram usage:        1 bytes
  7348 ;; Hardware stack levels used:    1
  7349 ;; Hardware stack levels required when called:    1
  7350 ;; This function calls:
  7351 ;;		Nothing
  7352 ;; This function is called by:
  7353 ;;		_output_putch
  7354 ;;		_print_buffer
  7355 ;;		_ser_puts
  7356 ;;		_measure_capacitance
  7357 ;; This function uses a non-reentrant model
  7358 ;;
  7359                           
  7360                           	psect	text39
  7361  0027E8                     __ptext39:
  7362                           	opt stack 0
  7363  0027E8                     _ser_putch:
  7364                           	opt stack 28
  7365                           
  7366                           ;incstack = 0
  7367                           ;ser_putch@c stored from wreg
  7368  0027E8  6E04               	movwf	ser_putch@c,c
  7369  0027EA                     l3890:
  7370  0027EA  285B               	incf	_txiptr,w,c	;volatile
  7371  0027EC  0B0F               	andlw	15
  7372  0027EE  185C               	xorwf	_txoptr,w,c	;volatile
  7373  0027F0  E0FC               	bz	l3890
  7374                           
  7375                           ;ser.c: 57: GIE = 0;
  7376  0027F2  9EF2               	bcf	intcon,7,c	;volatile
  7377                           
  7378                           ;ser.c: 58: txfifo[txiptr] = c;
  7379  0027F4  505B               	movf	_txiptr,w,c
  7380  0027F6  0FB3               	addlw	low _txfifo
  7381  0027F8  6ED9               	movwf	fsr2l,c
  7382  0027FA  6ADA               	clrf	fsr2h,c
  7383  0027FC  C004  FFDF         	movff	ser_putch@c,indf2
  7384                           
  7385                           ;ser.c: 59: txiptr = (txiptr + 1) & ((uint8_t)16 - 1);
  7386  002800  285B               	incf	_txiptr,w,c	;volatile
  7387  002802  0B0F               	andlw	15
  7388  002804  6E5B               	movwf	_txiptr,c	;volatile
  7389                           
  7390                           ;ser.c: 60: TXIE = 1;
  7391  002806  889D               	bsf	3997,4,c	;volatile
  7392                           
  7393                           ;ser.c: 61: GIE = 1;
  7394  002808  8EF2               	bsf	intcon,7,c	;volatile
  7395  00280A  0012               	return		;funcret
  7396  00280C                     __end_of_ser_putch:
  7397                           	opt stack 0
  7398                           tblptru	equ	0xFF8
  7399                           tblptrh	equ	0xFF7
  7400                           tblptrl	equ	0xFF6
  7401                           tablat	equ	0xFF5
  7402                           prodh	equ	0xFF4
  7403                           prodl	equ	0xFF3
  7404                           intcon	equ	0xFF2
  7405                           intcon2	equ	0xFF1
  7406                           postinc0	equ	0xFEE
  7407                           wreg	equ	0xFE8
  7408                           postdec1	equ	0xFE5
  7409                           fsr1l	equ	0xFE1
  7410                           indf2	equ	0xFDF
  7411                           postinc2	equ	0xFDE
  7412                           postdec2	equ	0xFDD
  7413                           fsr2h	equ	0xFDA
  7414                           fsr2l	equ	0xFD9
  7415                           status	equ	0xFD8
  7416                           
  7417 ;; *************** function _lcd_gotoxy *****************
  7418 ;; Defined at:
  7419 ;;		line 135 in file "../../../lib/lcd44780.c"
  7420 ;; Parameters:    Size  Location     Type
  7421 ;;  col             1    wreg     unsigned char 
  7422 ;;  row             1    7[COMRAM] unsigned char 
  7423 ;; Auto vars:     Size  Location     Type
  7424 ;;  col             1    8[COMRAM] unsigned char 
  7425 ;;  row_offsets     4    9[COMRAM] unsigned char [4]
  7426 ;; Return value:  Size  Location     Type
  7427 ;;		None               void
  7428 ;; Registers used:
  7429 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7430 ;; Tracked objects:
  7431 ;;		On entry : 0/0
  7432 ;;		On exit  : 0/0
  7433 ;;		Unchanged: 0/0
  7434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  7435 ;;      Params:         1       0       0       0
  7436 ;;      Locals:         5       0       0       0
  7437 ;;      Temps:          0       0       0       0
  7438 ;;      Totals:         6       0       0       0
  7439 ;;Total ram usage:        6 bytes
  7440 ;; Hardware stack levels used:    1
  7441 ;; Hardware stack levels required when called:    4
  7442 ;; This function calls:
  7443 ;;		_lcd_command
  7444 ;; This function is called by:
  7445 ;;		_print_unit
  7446 ;;		_print_reading
  7447 ;;		_print_indicator
  7448 ;;		_main
  7449 ;;		_calibrate
  7450 ;;		_measure_freq
  7451 ;;		_measure_capacitance
  7452 ;;		_measure_inductance
  7453 ;; This function uses a non-reentrant model
  7454 ;;
  7455                           
  7456                           	psect	text40
  7457  0025E6                     __ptext40:
  7458                           	opt stack 0
  7459  0025E6                     _lcd_gotoxy:
  7460                           	opt stack 25
  7461                           
  7462                           ;incstack = 0
  7463                           ;lcd_gotoxy@col stored from wreg
  7464  0025E6  6E09               	movwf	lcd_gotoxy@col,c
  7465                           
  7466                           ;lcd44780.c: 137: uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
  7467  0025E8  C0EB  F00A         	movff	lcd_gotoxy@F3583,lcd_gotoxy@row_offsets
  7468  0025EC  C0EC  F00B         	movff	lcd_gotoxy@F3583+1,lcd_gotoxy@row_offsets+1
  7469  0025F0  C0ED  F00C         	movff	lcd_gotoxy@F3583+2,lcd_gotoxy@row_offsets+2
  7470  0025F4  C0EE  F00D         	movff	lcd_gotoxy@F3583+3,lcd_gotoxy@row_offsets+3
  7471                           
  7472                           ;lcd44780.c: 146: if(LCD_lines == 1) {
  7473  0025F8  0100               	movlb	0	; () banked
  7474  0025FA  05DA               	decf	_LCD_lines& (0+255),w,b
  7475  0025FC  E106               	bnz	l4146
  7476                           
  7477                           ; BSR set to: 0
  7478                           ;lcd44780.c: 147: row_offsets[1] = 0x14;
  7479  0025FE  0E14               	movlw	20
  7480  002600  6E0B               	movwf	lcd_gotoxy@row_offsets+1,c
  7481                           
  7482                           ;lcd44780.c: 148: row_offsets[2] = 0x28;
  7483  002602  0E28               	movlw	40
  7484  002604  6E0C               	movwf	lcd_gotoxy@row_offsets+2,c
  7485                           
  7486                           ;lcd44780.c: 149: row_offsets[3] = 0x3C;
  7487  002606  0E3C               	movlw	60
  7488  002608  6E0D               	movwf	lcd_gotoxy@row_offsets+3,c
  7489  00260A                     l4146:
  7490                           
  7491                           ; BSR set to: 0
  7492                           ;lcd44780.c: 150: }
  7493                           ;lcd44780.c: 156: lcd_command(0x80 | (col + row_offsets[row]));
  7494  00260A  5008               	movf	lcd_gotoxy@row,w,c
  7495  00260C  0F0A               	addlw	low lcd_gotoxy@row_offsets
  7496  00260E  6ED9               	movwf	fsr2l,c
  7497  002610  6ADA               	clrf	fsr2h,c
  7498  002612  50DF               	movf	indf2,w,c
  7499  002614  2409               	addwf	lcd_gotoxy@col,w,c
  7500  002616  0980               	iorlw	128
  7501  002618  EC79  F014         	call	_lcd_command
  7502  00261C  0012               	return		;funcret
  7503  00261E                     __end_of_lcd_gotoxy:
  7504                           	opt stack 0
  7505                           tblptru	equ	0xFF8
  7506                           tblptrh	equ	0xFF7
  7507                           tblptrl	equ	0xFF6
  7508                           tablat	equ	0xFF5
  7509                           prodh	equ	0xFF4
  7510                           prodl	equ	0xFF3
  7511                           intcon	equ	0xFF2
  7512                           intcon2	equ	0xFF1
  7513                           postinc0	equ	0xFEE
  7514                           wreg	equ	0xFE8
  7515                           postdec1	equ	0xFE5
  7516                           fsr1l	equ	0xFE1
  7517                           indf2	equ	0xFDF
  7518                           postinc2	equ	0xFDE
  7519                           postdec2	equ	0xFDD
  7520                           fsr2h	equ	0xFDA
  7521                           fsr2l	equ	0xFD9
  7522                           status	equ	0xFD8
  7523                           
  7524 ;; *************** function _format_number *****************
  7525 ;; Defined at:
  7526 ;;		line 15 in file "../../../lib/format.c"
  7527 ;; Parameters:    Size  Location     Type
  7528 ;;  n               2   10[COMRAM] unsigned int 
  7529 ;;  base            1   12[COMRAM] unsigned char 
  7530 ;;  pad             1   13[COMRAM] char 
  7531 ;; Auto vars:     Size  Location     Type
  7532 ;;  buf            32   16[COMRAM] unsigned char [32]
  7533 ;;  i               1   52[COMRAM] char 
  7534 ;;  di              1   51[COMRAM] unsigned char 
  7535 ;;  padchar         1   50[COMRAM] unsigned char 
  7536 ;; Return value:  Size  Location     Type
  7537 ;;		None               void
  7538 ;; Registers used:
  7539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7540 ;; Tracked objects:
  7541 ;;		On entry : 0/0
  7542 ;;		On exit  : 0/0
  7543 ;;		Unchanged: 0/0
  7544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  7545 ;;      Params:         4       0       0       0
  7546 ;;      Locals:        37       0       0       0
  7547 ;;      Temps:          2       0       0       0
  7548 ;;      Totals:        43       0       0       0
  7549 ;;Total ram usage:       43 bytes
  7550 ;; Hardware stack levels used:    1
  7551 ;; Hardware stack levels required when called:    2
  7552 ;; This function calls:
  7553 ;;		___lwdiv
  7554 ;;		___lwmod
  7555 ;;		_buffer_putch
  7556 ;; This function is called by:
  7557 ;;		_print_reading
  7558 ;;		_format_xint32
  7559 ;;		_measure_freq
  7560 ;; This function uses a non-reentrant model
  7561 ;;
  7562                           
  7563                           	psect	text41
  7564  001FBA                     __ptext41:
  7565                           	opt stack 0
  7566  001FBA                     _format_number:
  7567                           	opt stack 26
  7568                           
  7569                           ;format.c: 16: char buf[8 * sizeof(long)];
  7570                           ;format.c: 17: uint8_t di;
  7571                           ;format.c: 18: int8_t i = 0;
  7572                           
  7573                           ;incstack = 0
  7574  001FBA  6A35               	clrf	format_number@i,c
  7575                           
  7576                           ;format.c: 19: char padchar = ' ';
  7577  001FBC  0E20               	movlw	32
  7578  001FBE  6E33               	movwf	format_number@padchar,c
  7579                           
  7580                           ;format.c: 21: if(pad < 0) {
  7581  001FC0  AE0E               	btfss	format_number@pad,7,c
  7582  001FC2  D003               	goto	l4166
  7583                           
  7584                           ;format.c: 22: pad = -pad;
  7585  001FC4  6C0E               	negf	format_number@pad,c
  7586                           
  7587                           ;format.c: 23: padchar = '0';
  7588  001FC6  0E30               	movlw	48
  7589  001FC8  6E33               	movwf	format_number@padchar,c
  7590  001FCA                     l4166:
  7591                           
  7592                           ;format.c: 35: di = n % base;
  7593  001FCA  C00B  F004         	movff	format_number@n,___lwmod@dividend
  7594  001FCE  C00C  F005         	movff	format_number@n+1,___lwmod@dividend+1
  7595  001FD2  C00D  F006         	movff	format_number@base,___lwmod@divisor
  7596  001FD6  6A07               	clrf	___lwmod@divisor+1,c
  7597  001FD8  ECB7  F012         	call	___lwmod	;wreg free
  7598  001FDC  5004               	movf	?___lwmod,w,c
  7599  001FDE  6E34               	movwf	format_number@di,c
  7600                           
  7601                           ;format.c: 36: buf[i++] = (di < 10 ? (uint8_t)'0' + di : (uint8_t)'A' + di - 10);
  7602  001FE0  0E09               	movlw	9
  7603  001FE2  6434               	cpfsgt	format_number@di,c
  7604  001FE4  D002               	goto	l4172
  7605  001FE6  0E37               	movlw	55
  7606  001FE8  D001               	goto	L4
  7607  001FEA                     l4172:
  7608  001FEA  0E30               	movlw	48
  7609  001FEC                     L4:
  7610  001FEC  2434               	addwf	format_number@di,w,c
  7611  001FEE  6E31               	movwf	_format_number$199,c
  7612  001FF0  6A32               	clrf	_format_number$199+1,c
  7613  001FF2  0E00               	movlw	0
  7614  001FF4  2232               	addwfc	_format_number$199+1,f,c
  7615  001FF6  5035               	movf	format_number@i,w,c
  7616  001FF8  0F11               	addlw	low format_number@buf
  7617  001FFA  6ED9               	movwf	fsr2l,c
  7618  001FFC  6ADA               	clrf	fsr2h,c
  7619  001FFE  C031  FFDF         	movff	_format_number$199,indf2
  7620  002002  2A35               	incf	format_number@i,f,c
  7621                           
  7622                           ;format.c: 38: n /= base;
  7623  002004  C00B  F004         	movff	format_number@n,___lwdiv@dividend
  7624  002008  C00C  F005         	movff	format_number@n+1,___lwdiv@dividend+1
  7625  00200C  C00D  F006         	movff	format_number@base,___lwdiv@divisor
  7626  002010  6A07               	clrf	___lwdiv@divisor+1,c
  7627  002012  EC4C  F012         	call	___lwdiv	;wreg free
  7628  002016  C004  F00B         	movff	?___lwdiv,format_number@n
  7629  00201A  C005  F00C         	movff	?___lwdiv+1,format_number@n+1
  7630                           
  7631                           ;format.c: 39: } while(n > 0);
  7632  00201E  500B               	movf	format_number@n,w,c
  7633  002020  100C               	iorwf	format_number@n+1,w,c
  7634  002022  E004               	bz	l4184
  7635  002024  D7D2               	goto	l4166
  7636  002026                     l4182:
  7637  002026  5033               	movf	format_number@padchar,w,c
  7638  002028  ECB3  F011         	call	_buffer_putch
  7639  00202C                     l4184:
  7640  00202C  060E               	decf	format_number@pad,f,c
  7641  00202E  280E               	incf	format_number@pad,w,c
  7642  002030  6E0F               	movwf	??_format_number& (0+255),c
  7643  002032  5035               	movf	format_number@i,w,c
  7644  002034  0A80               	xorlw	128
  7645  002036  6E10               	movwf	(??_format_number+1)& (0+255),c
  7646  002038  500F               	movf	??_format_number,w,c
  7647  00203A  0A80               	xorlw	128
  7648  00203C  5C10               	subwf	(??_format_number+1)& (0+255),w,c
  7649  00203E  E3F3               	bnc	l4182
  7650  002040                     l4186:
  7651                           
  7652                           ;format.c: 43: for(; i > 0; i--) {
  7653  002040  5035               	movf	format_number@i,w,c
  7654  002042  0A80               	xorlw	128
  7655  002044  0F7F               	addlw	-129
  7656  002046  A0D8               	btfss	status,0,c
  7657  002048  0012               	return	
  7658                           
  7659                           ;format.c: 44: buffer_putch((char)buf[(int16_t)i - 1]);
  7660  00204A  C035  F00F         	movff	format_number@i,??_format_number
  7661  00204E  060F               	decf	??_format_number,f,c
  7662  002050  500F               	movf	??_format_number,w,c
  7663  002052  0F11               	addlw	low format_number@buf
  7664  002054  6ED9               	movwf	fsr2l,c
  7665  002056  6ADA               	clrf	fsr2h,c
  7666  002058  50DF               	movf	indf2,w,c
  7667  00205A  ECB3  F011         	call	_buffer_putch
  7668                           
  7669                           ; BSR set to: 1
  7670  00205E  0635               	decf	format_number@i,f,c
  7671  002060  D7EF               	goto	l4186
  7672  002062                     __end_of_format_number:
  7673                           	opt stack 0
  7674                           tblptru	equ	0xFF8
  7675                           tblptrh	equ	0xFF7
  7676                           tblptrl	equ	0xFF6
  7677                           tablat	equ	0xFF5
  7678                           prodh	equ	0xFF4
  7679                           prodl	equ	0xFF3
  7680                           intcon	equ	0xFF2
  7681                           intcon2	equ	0xFF1
  7682                           postinc0	equ	0xFEE
  7683                           wreg	equ	0xFE8
  7684                           postdec1	equ	0xFE5
  7685                           fsr1l	equ	0xFE1
  7686                           indf2	equ	0xFDF
  7687                           postinc2	equ	0xFDE
  7688                           postdec2	equ	0xFDD
  7689                           fsr2h	equ	0xFDA
  7690                           fsr2l	equ	0xFD9
  7691                           status	equ	0xFD8
  7692                           
  7693 ;; *************** function ___lwmod *****************
  7694 ;; Defined at:
  7695 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  7696 ;; Parameters:    Size  Location     Type
  7697 ;;  dividend        2    3[COMRAM] unsigned int 
  7698 ;;  divisor         2    5[COMRAM] unsigned int 
  7699 ;; Auto vars:     Size  Location     Type
  7700 ;;  counter         1    7[COMRAM] unsigned char 
  7701 ;; Return value:  Size  Location     Type
  7702 ;;                  2    3[COMRAM] unsigned int 
  7703 ;; Registers used:
  7704 ;;		wreg, status,2, status,0
  7705 ;; Tracked objects:
  7706 ;;		On entry : 0/0
  7707 ;;		On exit  : 0/0
  7708 ;;		Unchanged: 0/0
  7709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  7710 ;;      Params:         4       0       0       0
  7711 ;;      Locals:         1       0       0       0
  7712 ;;      Temps:          0       0       0       0
  7713 ;;      Totals:         5       0       0       0
  7714 ;;Total ram usage:        5 bytes
  7715 ;; Hardware stack levels used:    1
  7716 ;; Hardware stack levels required when called:    1
  7717 ;; This function calls:
  7718 ;;		Nothing
  7719 ;; This function is called by:
  7720 ;;		_print_reading
  7721 ;;		_format_number
  7722 ;; This function uses a non-reentrant model
  7723 ;;
  7724                           
  7725                           	psect	text42
  7726  00256E                     __ptext42:
  7727                           	opt stack 0
  7728  00256E                     ___lwmod:
  7729                           	opt stack 26
  7730                           
  7731                           ;incstack = 0
  7732  00256E  5006               	movf	___lwmod@divisor,w,c
  7733  002570  1007               	iorwf	___lwmod@divisor+1,w,c
  7734  002572  E017               	bz	l1129
  7735  002574  0E01               	movlw	1
  7736  002576  6E08               	movwf	___lwmod@counter,c
  7737  002578  D004               	goto	l4088
  7738  00257A                     l4086:
  7739  00257A  90D8               	bcf	status,0,c
  7740  00257C  3606               	rlcf	___lwmod@divisor,f,c
  7741  00257E  3607               	rlcf	___lwmod@divisor+1,f,c
  7742  002580  2A08               	incf	___lwmod@counter,f,c
  7743  002582                     l4088:
  7744  002582  AE07               	btfss	___lwmod@divisor+1,7,c
  7745  002584  D7FA               	goto	l4086
  7746  002586                     l4090:
  7747  002586  5006               	movf	___lwmod@divisor,w,c
  7748  002588  5C04               	subwf	___lwmod@dividend,w,c
  7749  00258A  5007               	movf	___lwmod@divisor+1,w,c
  7750  00258C  5805               	subwfb	___lwmod@dividend+1,w,c
  7751  00258E  E304               	bnc	l4094
  7752  002590  5006               	movf	___lwmod@divisor,w,c
  7753  002592  5E04               	subwf	___lwmod@dividend,f,c
  7754  002594  5007               	movf	___lwmod@divisor+1,w,c
  7755  002596  5A05               	subwfb	___lwmod@dividend+1,f,c
  7756  002598                     l4094:
  7757  002598  90D8               	bcf	status,0,c
  7758  00259A  3207               	rrcf	___lwmod@divisor+1,f,c
  7759  00259C  3206               	rrcf	___lwmod@divisor,f,c
  7760  00259E  2E08               	decfsz	___lwmod@counter,f,c
  7761  0025A0  D7F2               	goto	l4090
  7762  0025A2                     l1129:
  7763  0025A2  C004  F004         	movff	___lwmod@dividend,?___lwmod
  7764  0025A6  C005  F005         	movff	___lwmod@dividend+1,?___lwmod+1
  7765  0025AA  0012               	return		;funcret
  7766  0025AC                     __end_of___lwmod:
  7767                           	opt stack 0
  7768                           tblptru	equ	0xFF8
  7769                           tblptrh	equ	0xFF7
  7770                           tblptrl	equ	0xFF6
  7771                           tablat	equ	0xFF5
  7772                           prodh	equ	0xFF4
  7773                           prodl	equ	0xFF3
  7774                           intcon	equ	0xFF2
  7775                           intcon2	equ	0xFF1
  7776                           postinc0	equ	0xFEE
  7777                           wreg	equ	0xFE8
  7778                           postdec1	equ	0xFE5
  7779                           fsr1l	equ	0xFE1
  7780                           indf2	equ	0xFDF
  7781                           postinc2	equ	0xFDE
  7782                           postdec2	equ	0xFDD
  7783                           fsr2h	equ	0xFDA
  7784                           fsr2l	equ	0xFD9
  7785                           status	equ	0xFD8
  7786                           
  7787 ;; *************** function ___lwdiv *****************
  7788 ;; Defined at:
  7789 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  7790 ;; Parameters:    Size  Location     Type
  7791 ;;  dividend        2    3[COMRAM] unsigned int 
  7792 ;;  divisor         2    5[COMRAM] unsigned int 
  7793 ;; Auto vars:     Size  Location     Type
  7794 ;;  quotient        2    8[COMRAM] unsigned int 
  7795 ;;  counter         1    7[COMRAM] unsigned char 
  7796 ;; Return value:  Size  Location     Type
  7797 ;;                  2    3[COMRAM] unsigned int 
  7798 ;; Registers used:
  7799 ;;		wreg, status,2, status,0
  7800 ;; Tracked objects:
  7801 ;;		On entry : 0/0
  7802 ;;		On exit  : 0/0
  7803 ;;		Unchanged: 0/0
  7804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  7805 ;;      Params:         4       0       0       0
  7806 ;;      Locals:         3       0       0       0
  7807 ;;      Temps:          0       0       0       0
  7808 ;;      Totals:         7       0       0       0
  7809 ;;Total ram usage:        7 bytes
  7810 ;; Hardware stack levels used:    1
  7811 ;; Hardware stack levels required when called:    1
  7812 ;; This function calls:
  7813 ;;		Nothing
  7814 ;; This function is called by:
  7815 ;;		_print_reading
  7816 ;;		_format_number
  7817 ;; This function uses a non-reentrant model
  7818 ;;
  7819                           
  7820                           	psect	text43
  7821  002498                     __ptext43:
  7822                           	opt stack 0
  7823  002498                     ___lwdiv:
  7824                           	opt stack 26
  7825                           
  7826                           ;incstack = 0
  7827  002498  6A09               	clrf	___lwdiv@quotient,c
  7828  00249A  6A0A               	clrf	___lwdiv@quotient+1,c
  7829  00249C  5006               	movf	___lwdiv@divisor,w,c
  7830  00249E  1007               	iorwf	___lwdiv@divisor+1,w,c
  7831  0024A0  E01B               	bz	l1119
  7832  0024A2  0E01               	movlw	1
  7833  0024A4  6E08               	movwf	___lwdiv@counter,c
  7834  0024A6  D004               	goto	l4068
  7835  0024A8                     l4066:
  7836  0024A8  90D8               	bcf	status,0,c
  7837  0024AA  3606               	rlcf	___lwdiv@divisor,f,c
  7838  0024AC  3607               	rlcf	___lwdiv@divisor+1,f,c
  7839  0024AE  2A08               	incf	___lwdiv@counter,f,c
  7840  0024B0                     l4068:
  7841  0024B0  AE07               	btfss	___lwdiv@divisor+1,7,c
  7842  0024B2  D7FA               	goto	l4066
  7843  0024B4                     l4070:
  7844  0024B4  90D8               	bcf	status,0,c
  7845  0024B6  3609               	rlcf	___lwdiv@quotient,f,c
  7846  0024B8  360A               	rlcf	___lwdiv@quotient+1,f,c
  7847  0024BA  5006               	movf	___lwdiv@divisor,w,c
  7848  0024BC  5C04               	subwf	___lwdiv@dividend,w,c
  7849  0024BE  5007               	movf	___lwdiv@divisor+1,w,c
  7850  0024C0  5805               	subwfb	___lwdiv@dividend+1,w,c
  7851  0024C2  E305               	bnc	l4078
  7852  0024C4  5006               	movf	___lwdiv@divisor,w,c
  7853  0024C6  5E04               	subwf	___lwdiv@dividend,f,c
  7854  0024C8  5007               	movf	___lwdiv@divisor+1,w,c
  7855  0024CA  5A05               	subwfb	___lwdiv@dividend+1,f,c
  7856  0024CC  8009               	bsf	___lwdiv@quotient,0,c
  7857  0024CE                     l4078:
  7858  0024CE  90D8               	bcf	status,0,c
  7859  0024D0  3207               	rrcf	___lwdiv@divisor+1,f,c
  7860  0024D2  3206               	rrcf	___lwdiv@divisor,f,c
  7861  0024D4  2E08               	decfsz	___lwdiv@counter,f,c
  7862  0024D6  D7EE               	goto	l4070
  7863  0024D8                     l1119:
  7864  0024D8  C009  F004         	movff	___lwdiv@quotient,?___lwdiv
  7865  0024DC  C00A  F005         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7866  0024E0  0012               	return		;funcret
  7867  0024E2                     __end_of___lwdiv:
  7868                           	opt stack 0
  7869                           tblptru	equ	0xFF8
  7870                           tblptrh	equ	0xFF7
  7871                           tblptrl	equ	0xFF6
  7872                           tablat	equ	0xFF5
  7873                           prodh	equ	0xFF4
  7874                           prodl	equ	0xFF3
  7875                           intcon	equ	0xFF2
  7876                           intcon2	equ	0xFF1
  7877                           postinc0	equ	0xFEE
  7878                           wreg	equ	0xFE8
  7879                           postdec1	equ	0xFE5
  7880                           fsr1l	equ	0xFE1
  7881                           indf2	equ	0xFDF
  7882                           postinc2	equ	0xFDE
  7883                           postdec2	equ	0xFDD
  7884                           fsr2h	equ	0xFDA
  7885                           fsr2l	equ	0xFD9
  7886                           status	equ	0xFD8
  7887                           
  7888 ;; *************** function _buffer_puts *****************
  7889 ;; Defined at:
  7890 ;;		line 56 in file "../../../lib/buffer.c"
  7891 ;; Parameters:    Size  Location     Type
  7892 ;;  x               1    wreg     PTR const unsigned char 
  7893 ;;		 -> STR_27(6), 
  7894 ;; Auto vars:     Size  Location     Type
  7895 ;;  x               1    6[COMRAM] PTR const unsigned char 
  7896 ;;		 -> STR_27(6), 
  7897 ;; Return value:  Size  Location     Type
  7898 ;;                  1    wreg      unsigned char 
  7899 ;; Registers used:
  7900 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7901 ;; Tracked objects:
  7902 ;;		On entry : F/1
  7903 ;;		On exit  : F/1
  7904 ;;		Unchanged: 0/0
  7905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  7906 ;;      Params:         0       0       0       0
  7907 ;;      Locals:         1       0       0       0
  7908 ;;      Temps:          0       0       0       0
  7909 ;;      Totals:         1       0       0       0
  7910 ;;Total ram usage:        1 bytes
  7911 ;; Hardware stack levels used:    1
  7912 ;; Hardware stack levels required when called:    2
  7913 ;; This function calls:
  7914 ;;		_buffer_putch
  7915 ;; This function is called by:
  7916 ;;		_measure_freq
  7917 ;; This function uses a non-reentrant model
  7918 ;;
  7919                           
  7920                           	psect	text44
  7921  00286E                     __ptext44:
  7922                           	opt stack 0
  7923  00286E                     _buffer_puts:
  7924                           	opt stack 26
  7925                           
  7926                           ;incstack = 0
  7927                           ;buffer_puts@x stored from wreg
  7928  00286E  6E07               	movwf	buffer_puts@x,c
  7929                           
  7930                           ; BSR set to: 1
  7931                           ;buffer.c: 57: while(*x) {
  7932  002870  D007               	goto	l4280
  7933  002872                     l4276:
  7934                           
  7935                           ; BSR set to: 1
  7936                           ;buffer.c: 58: buffer_putch(*x);
  7937  002872  C007  FFF6         	movff	buffer_puts@x,tblptrl
  7938  002876                     	if	0	;There is only one active tblptr byte
  7939  002876                     	endif
  7940  002876                     	if	0	;tblptru may be non-zero
  7941  002876                     	endif
  7942  002876                     	if	0	;tblptru may be non-zero
  7943  002876                     	endif
  7944  002876  0008               	tblrd		*
  7945  002878  50F5               	movf	tablat,w,c
  7946  00287A  ECB3  F011         	call	_buffer_putch
  7947                           
  7948                           ; BSR set to: 1
  7949                           ;buffer.c: 59: ++x;
  7950  00287E  2A07               	incf	buffer_puts@x,f,c
  7951  002880                     l4280:
  7952                           
  7953                           ; BSR set to: 1
  7954  002880  C007  FFF6         	movff	buffer_puts@x,tblptrl
  7955  002884                     	if	0	;There is only one active tblptr byte
  7956  002884                     	endif
  7957  002884                     	if	0	;tblptru may be non-zero
  7958  002884                     	endif
  7959  002884                     	if	0	;tblptru may be non-zero
  7960  002884                     	endif
  7961  002884  0008               	tblrd		*
  7962  002886  50F5               	movf	tablat,w,c
  7963  002888  B4D8               	btfsc	status,2,c
  7964                           
  7965                           ; BSR set to: 1
  7966  00288A  0012               	return		;funcret
  7967  00288C  D7F2               	goto	l4276
  7968  00288E                     __end_of_buffer_puts:
  7969                           	opt stack 0
  7970                           tblptru	equ	0xFF8
  7971                           tblptrh	equ	0xFF7
  7972                           tblptrl	equ	0xFF6
  7973                           tablat	equ	0xFF5
  7974                           prodh	equ	0xFF4
  7975                           prodl	equ	0xFF3
  7976                           intcon	equ	0xFF2
  7977                           intcon2	equ	0xFF1
  7978                           postinc0	equ	0xFEE
  7979                           wreg	equ	0xFE8
  7980                           postdec1	equ	0xFE5
  7981                           fsr1l	equ	0xFE1
  7982                           indf2	equ	0xFDF
  7983                           postinc2	equ	0xFDE
  7984                           postdec2	equ	0xFDD
  7985                           fsr2h	equ	0xFDA
  7986                           fsr2l	equ	0xFD9
  7987                           status	equ	0xFD8
  7988                           
  7989 ;; *************** function _buffer_putch *****************
  7990 ;; Defined at:
  7991 ;;		line 30 in file "../../../lib/buffer.c"
  7992 ;; Parameters:    Size  Location     Type
  7993 ;;  ch              1    wreg     unsigned char 
  7994 ;; Auto vars:     Size  Location     Type
  7995 ;;  ch              1    5[COMRAM] unsigned char 
  7996 ;; Return value:  Size  Location     Type
  7997 ;;                  1    wreg      unsigned char 
  7998 ;; Registers used:
  7999 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8000 ;; Tracked objects:
  8001 ;;		On entry : 0/0
  8002 ;;		On exit  : F/1
  8003 ;;		Unchanged: 0/0
  8004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  8005 ;;      Params:         0       0       0       0
  8006 ;;      Locals:         1       0       0       0
  8007 ;;      Temps:          2       0       0       0
  8008 ;;      Totals:         3       0       0       0
  8009 ;;Total ram usage:        3 bytes
  8010 ;; Hardware stack levels used:    1
  8011 ;; Hardware stack levels required when called:    1
  8012 ;; This function calls:
  8013 ;;		Nothing
  8014 ;; This function is called by:
  8015 ;;		_format_number
  8016 ;;		_format_xint32
  8017 ;;		_format_double
  8018 ;;		_buffer_puts
  8019 ;; This function uses a non-reentrant model
  8020 ;;
  8021                           
  8022                           	psect	text45
  8023  002366                     __ptext45:
  8024                           	opt stack 0
  8025  002366                     _buffer_putch:
  8026                           	opt stack 26
  8027                           
  8028                           ; BSR set to: 1
  8029                           ;incstack = 0
  8030                           ;buffer_putch@ch stored from wreg
  8031  002366  6E06               	movwf	buffer_putch@ch,c
  8032                           
  8033                           ;buffer.c: 31: if(16 - buffer.n <= 0)
  8034  002368  0E10               	movlw	16
  8035  00236A  6E04               	movwf	??_buffer_putch& (0+255),c
  8036  00236C  6A05               	clrf	(??_buffer_putch+1)& (0+255),c
  8037  00236E  0101               	movlb	1	; () banked
  8038  002370  3920               	swapf	(_buffer+16)& (0+255),w,b
  8039  002372  0B0F               	andlw	15
  8040  002374  5E04               	subwf	??_buffer_putch,f,c
  8041  002376  0E00               	movlw	0
  8042  002378  5A05               	subwfb	??_buffer_putch+1,f,c
  8043  00237A  BE05               	btfsc	??_buffer_putch+1,7,c
  8044  00237C  0C00               	retlw	0
  8045  00237E  5005               	movf	??_buffer_putch+1,w,c
  8046  002380  E103               	bnz	l4030
  8047  002382  0404               	decf	??_buffer_putch,w,c
  8048  002384  A0D8               	btfss	status,0,c
  8049  002386  0012               	return	
  8050  002388                     l4030:
  8051                           
  8052                           ; BSR set to: 1
  8053                           ;buffer.c: 33: buffer.x[buffer.n] = ch;
  8054  002388  3920               	swapf	(_buffer+16)& (0+255),w,b
  8055  00238A  0B0F               	andlw	15
  8056  00238C  6E04               	movwf	??_buffer_putch& (0+255),c
  8057  00238E  6A05               	clrf	(??_buffer_putch+1)& (0+255),c
  8058  002390  0E10               	movlw	low _buffer
  8059  002392  2404               	addwf	??_buffer_putch,w,c
  8060  002394  6ED9               	movwf	fsr2l,c
  8061  002396  0E01               	movlw	high _buffer
  8062  002398  2005               	addwfc	??_buffer_putch+1,w,c
  8063  00239A  6EDA               	movwf	fsr2h,c
  8064  00239C  C006  FFDF         	movff	buffer_putch@ch,indf2
  8065                           
  8066                           ; BSR set to: 1
  8067                           ;buffer.c: 34: buffer.n++;
  8068  0023A0  3920               	swapf	(_buffer+16)& (0+255),w,b
  8069  0023A2  0B0F               	andlw	15
  8070  0023A4  6E04               	movwf	??_buffer_putch& (0+255),c
  8071  0023A6  2A04               	incf	??_buffer_putch,f,c
  8072  0023A8  3A04               	swapf	??_buffer_putch& (0+255),f,c
  8073  0023AA  5120               	movf	(_buffer+16)& (0+255),w,b
  8074  0023AC  1804               	xorwf	??_buffer_putch& (0+255),w,c
  8075  0023AE  0B0F               	andlw	-241
  8076  0023B0  1804               	xorwf	??_buffer_putch& (0+255),w,c
  8077  0023B2  6F20               	movwf	(_buffer+16)& (0+255),b
  8078                           
  8079                           ; BSR set to: 1
  8080  0023B4  0012               	return		;funcret
  8081  0023B6                     __end_of_buffer_putch:
  8082                           	opt stack 0
  8083                           tblptru	equ	0xFF8
  8084                           tblptrh	equ	0xFF7
  8085                           tblptrl	equ	0xFF6
  8086                           tablat	equ	0xFF5
  8087                           prodh	equ	0xFF4
  8088                           prodl	equ	0xFF3
  8089                           intcon	equ	0xFF2
  8090                           intcon2	equ	0xFF1
  8091                           postinc0	equ	0xFEE
  8092                           wreg	equ	0xFE8
  8093                           postdec1	equ	0xFE5
  8094                           fsr1l	equ	0xFE1
  8095                           indf2	equ	0xFDF
  8096                           postinc2	equ	0xFDE
  8097                           postdec2	equ	0xFDD
  8098                           fsr2h	equ	0xFDA
  8099                           fsr2l	equ	0xFD9
  8100                           status	equ	0xFD8
  8101                           
  8102 ;; *************** function _buffer_init *****************
  8103 ;; Defined at:
  8104 ;;		line 10 in file "../../../lib/buffer.c"
  8105 ;; Parameters:    Size  Location     Type
  8106 ;;		None
  8107 ;; Auto vars:     Size  Location     Type
  8108 ;;		None
  8109 ;; Return value:  Size  Location     Type
  8110 ;;		None               void
  8111 ;; Registers used:
  8112 ;;		wreg, status,2
  8113 ;; Tracked objects:
  8114 ;;		On entry : 0/0
  8115 ;;		On exit  : F/1
  8116 ;;		Unchanged: 0/0
  8117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  8118 ;;      Params:         0       0       0       0
  8119 ;;      Locals:         0       0       0       0
  8120 ;;      Temps:          0       0       0       0
  8121 ;;      Totals:         0       0       0       0
  8122 ;;Total ram usage:        0 bytes
  8123 ;; Hardware stack levels used:    1
  8124 ;; Hardware stack levels required when called:    1
  8125 ;; This function calls:
  8126 ;;		Nothing
  8127 ;; This function is called by:
  8128 ;;		_measure_freq
  8129 ;; This function uses a non-reentrant model
  8130 ;;
  8131                           
  8132                           	psect	text46
  8133  002900                     __ptext46:
  8134                           	opt stack 0
  8135  002900                     _buffer_init:
  8136                           	opt stack 27
  8137                           
  8138                           ;buffer.c: 11: buffer.p = 0;
  8139                           
  8140                           ; BSR set to: 1
  8141                           ;incstack = 0
  8142  002900  0EF0               	movlw	-16
  8143  002902  0101               	movlb	1	; () banked
  8144  002904  1720               	andwf	(_buffer+16)& (0+255),f,b
  8145                           
  8146                           ;buffer.c: 12: buffer.n = 0;
  8147  002906  0E0F               	movlw	-241
  8148  002908  1720               	andwf	(_buffer+16)& (0+255),f,b
  8149                           
  8150                           ; BSR set to: 1
  8151  00290A  0012               	return		;funcret
  8152  00290C                     __end_of_buffer_init:
  8153                           	opt stack 0
  8154                           tblptru	equ	0xFF8
  8155                           tblptrh	equ	0xFF7
  8156                           tblptrl	equ	0xFF6
  8157                           tablat	equ	0xFF5
  8158                           prodh	equ	0xFF4
  8159                           prodl	equ	0xFF3
  8160                           intcon	equ	0xFF2
  8161                           intcon2	equ	0xFF1
  8162                           postinc0	equ	0xFEE
  8163                           wreg	equ	0xFE8
  8164                           postdec1	equ	0xFE5
  8165                           fsr1l	equ	0xFE1
  8166                           indf2	equ	0xFDF
  8167                           postinc2	equ	0xFDE
  8168                           postdec2	equ	0xFDD
  8169                           fsr2h	equ	0xFDA
  8170                           fsr2l	equ	0xFD9
  8171                           status	equ	0xFD8
  8172                           
  8173 ;; *************** function _lcd_clear *****************
  8174 ;; Defined at:
  8175 ;;		line 287 in file "../../../lib/lcd44780.c"
  8176 ;; Parameters:    Size  Location     Type
  8177 ;;		None
  8178 ;; Auto vars:     Size  Location     Type
  8179 ;;		None
  8180 ;; Return value:  Size  Location     Type
  8181 ;;		None               void
  8182 ;; Registers used:
  8183 ;;		wreg, status,2, status,0, cstack
  8184 ;; Tracked objects:
  8185 ;;		On entry : 0/0
  8186 ;;		On exit  : 0/0
  8187 ;;		Unchanged: 0/0
  8188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  8189 ;;      Params:         0       0       0       0
  8190 ;;      Locals:         0       0       0       0
  8191 ;;      Temps:          1       0       0       0
  8192 ;;      Totals:         1       0       0       0
  8193 ;;Total ram usage:        1 bytes
  8194 ;; Hardware stack levels used:    1
  8195 ;; Hardware stack levels required when called:    4
  8196 ;; This function calls:
  8197 ;;		_lcd_command
  8198 ;; This function is called by:
  8199 ;;		_main
  8200 ;;		_calibrate
  8201 ;; This function uses a non-reentrant model
  8202 ;;
  8203                           
  8204                           	psect	text47
  8205  0028C6                     __ptext47:
  8206                           	opt stack 0
  8207  0028C6                     _lcd_clear:
  8208                           	opt stack 26
  8209                           
  8210                           ;lcd44780.c: 288: lcd_command(0x01);
  8211                           
  8212                           ; BSR set to: 1
  8213                           ;incstack = 0
  8214  0028C6  0E01               	movlw	1
  8215  0028C8  EC79  F014         	call	_lcd_command
  8216                           
  8217                           ;lcd44780.c: 289: _delay((unsigned long)((2)*(16000000/4000.0)));
  8218  0028CC  0E0B               	movlw	11
  8219  0028CE  6E08               	movwf	??_lcd_clear& (0+255),c
  8220  0028D0  0E62               	movlw	98
  8221  0028D2                     u4087:
  8222  0028D2  2EE8               	decfsz	wreg,f,c
  8223  0028D4  D7FE               	goto	u4087
  8224  0028D6  2E08               	decfsz	??_lcd_clear& (0+255),f,c
  8225  0028D8  D7FC               	goto	u4087
  8226  0028DA  D000               	nop2	
  8227  0028DC  0012               	return		;funcret
  8228  0028DE                     __end_of_lcd_clear:
  8229                           	opt stack 0
  8230                           tblptru	equ	0xFF8
  8231                           tblptrh	equ	0xFF7
  8232                           tblptrl	equ	0xFF6
  8233                           tablat	equ	0xFF5
  8234                           prodh	equ	0xFF4
  8235                           prodl	equ	0xFF3
  8236                           intcon	equ	0xFF2
  8237                           intcon2	equ	0xFF1
  8238                           postinc0	equ	0xFEE
  8239                           wreg	equ	0xFE8
  8240                           postdec1	equ	0xFE5
  8241                           fsr1l	equ	0xFE1
  8242                           indf2	equ	0xFDF
  8243                           postinc2	equ	0xFDE
  8244                           postdec2	equ	0xFDD
  8245                           fsr2h	equ	0xFDA
  8246                           fsr2l	equ	0xFD9
  8247                           status	equ	0xFD8
  8248                           
  8249 ;; *************** function _lcd_command *****************
  8250 ;; Defined at:
  8251 ;;		line 127 in file "../../../lib/lcd44780.c"
  8252 ;; Parameters:    Size  Location     Type
  8253 ;;  value           1    wreg     unsigned char 
  8254 ;; Auto vars:     Size  Location     Type
  8255 ;;  value           1    6[COMRAM] unsigned char 
  8256 ;; Return value:  Size  Location     Type
  8257 ;;		None               void
  8258 ;; Registers used:
  8259 ;;		wreg, status,2, status,0, cstack
  8260 ;; Tracked objects:
  8261 ;;		On entry : 0/0
  8262 ;;		On exit  : 0/0
  8263 ;;		Unchanged: 0/0
  8264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  8265 ;;      Params:         0       0       0       0
  8266 ;;      Locals:         1       0       0       0
  8267 ;;      Temps:          0       0       0       0
  8268 ;;      Totals:         1       0       0       0
  8269 ;;Total ram usage:        1 bytes
  8270 ;; Hardware stack levels used:    1
  8271 ;; Hardware stack levels required when called:    3
  8272 ;; This function calls:
  8273 ;;		_lcd_send
  8274 ;; This function is called by:
  8275 ;;		_lcd_gotoxy
  8276 ;;		_lcd_clear
  8277 ;;		_lcd_begin
  8278 ;; This function uses a non-reentrant model
  8279 ;;
  8280                           
  8281                           	psect	text48
  8282  0028F2                     __ptext48:
  8283                           	opt stack 0
  8284  0028F2                     _lcd_command:
  8285                           	opt stack 25
  8286                           
  8287                           ;incstack = 0
  8288                           ;lcd_command@value stored from wreg
  8289  0028F2  6E07               	movwf	lcd_command@value,c
  8290                           
  8291                           ;lcd44780.c: 128: lcd_send(value, 0);
  8292  0028F4  0E00               	movlw	0
  8293  0028F6  6E05               	movwf	lcd_send@mode,c
  8294  0028F8  5007               	movf	lcd_command@value,w,c
  8295  0028FA  EC55  F014         	call	_lcd_send
  8296  0028FE  0012               	return		;funcret
  8297  002900                     __end_of_lcd_command:
  8298                           	opt stack 0
  8299                           tblptru	equ	0xFF8
  8300                           tblptrh	equ	0xFF7
  8301                           tblptrl	equ	0xFF6
  8302                           tablat	equ	0xFF5
  8303                           prodh	equ	0xFF4
  8304                           prodl	equ	0xFF3
  8305                           intcon	equ	0xFF2
  8306                           intcon2	equ	0xFF1
  8307                           postinc0	equ	0xFEE
  8308                           wreg	equ	0xFE8
  8309                           postdec1	equ	0xFE5
  8310                           fsr1l	equ	0xFE1
  8311                           indf2	equ	0xFDF
  8312                           postinc2	equ	0xFDE
  8313                           postdec2	equ	0xFDD
  8314                           fsr2h	equ	0xFDA
  8315                           fsr2l	equ	0xFD9
  8316                           status	equ	0xFD8
  8317                           
  8318 ;; *************** function _lcd_send *****************
  8319 ;; Defined at:
  8320 ;;		line 103 in file "../../../lib/lcd44780.c"
  8321 ;; Parameters:    Size  Location     Type
  8322 ;;  value           1    wreg     unsigned char 
  8323 ;;  mode            1    4[COMRAM] unsigned char 
  8324 ;; Auto vars:     Size  Location     Type
  8325 ;;  value           1    5[COMRAM] unsigned char 
  8326 ;; Return value:  Size  Location     Type
  8327 ;;		None               void
  8328 ;; Registers used:
  8329 ;;		wreg, status,2, status,0, cstack
  8330 ;; Tracked objects:
  8331 ;;		On entry : 0/0
  8332 ;;		On exit  : 0/0
  8333 ;;		Unchanged: 0/0
  8334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  8335 ;;      Params:         1       0       0       0
  8336 ;;      Locals:         1       0       0       0
  8337 ;;      Temps:          0       0       0       0
  8338 ;;      Totals:         2       0       0       0
  8339 ;;Total ram usage:        2 bytes
  8340 ;; Hardware stack levels used:    1
  8341 ;; Hardware stack levels required when called:    2
  8342 ;; This function calls:
  8343 ;;		_lcd_write4bits
  8344 ;; This function is called by:
  8345 ;;		_output_putch
  8346 ;;		_lcd_command
  8347 ;;		_lcd_puts
  8348 ;;		_calibrate
  8349 ;; This function uses a non-reentrant model
  8350 ;;
  8351                           
  8352                           	psect	text49
  8353  0028AA                     __ptext49:
  8354                           	opt stack 0
  8355  0028AA                     _lcd_send:
  8356                           	opt stack 26
  8357                           
  8358                           ;incstack = 0
  8359                           ;lcd_send@value stored from wreg
  8360  0028AA  6E06               	movwf	lcd_send@value,c
  8361                           
  8362                           ;lcd44780.c: 104: if(mode) {
  8363  0028AC  5005               	movf	lcd_send@mode,w,c
  8364  0028AE  E002               	bz	l3882
  8365                           
  8366                           ;lcd44780.c: 105: LATB |= 0b0100;
  8367  0028B0  848A               	bsf	3978,2,c	;volatile
  8368                           
  8369                           ;lcd44780.c: 106: } else {
  8370  0028B2  D001               	goto	l3884
  8371  0028B4                     l3882:
  8372                           
  8373                           ;lcd44780.c: 107: LATB &= ~0b0100;
  8374  0028B4  948A               	bcf	3978,2,c	;volatile
  8375  0028B6                     l3884:
  8376                           
  8377                           ;lcd44780.c: 108: }
  8378                           ;lcd44780.c: 115: {
  8379                           ;lcd44780.c: 116: lcd_write4bits(value >> 4);
  8380  0028B6  3806               	swapf	lcd_send@value,w,c
  8381  0028B8  0B0F               	andlw	15
  8382  0028BA  EC06  F014         	call	_lcd_write4bits
  8383                           
  8384                           ;lcd44780.c: 117: lcd_write4bits(value);
  8385  0028BE  5006               	movf	lcd_send@value,w,c
  8386  0028C0  EC06  F014         	call	_lcd_write4bits
  8387  0028C4  0012               	return		;funcret
  8388  0028C6                     __end_of_lcd_send:
  8389                           	opt stack 0
  8390                           tblptru	equ	0xFF8
  8391                           tblptrh	equ	0xFF7
  8392                           tblptrl	equ	0xFF6
  8393                           tablat	equ	0xFF5
  8394                           prodh	equ	0xFF4
  8395                           prodl	equ	0xFF3
  8396                           intcon	equ	0xFF2
  8397                           intcon2	equ	0xFF1
  8398                           postinc0	equ	0xFEE
  8399                           wreg	equ	0xFE8
  8400                           postdec1	equ	0xFE5
  8401                           fsr1l	equ	0xFE1
  8402                           indf2	equ	0xFDF
  8403                           postinc2	equ	0xFDE
  8404                           postdec2	equ	0xFDD
  8405                           fsr2h	equ	0xFDA
  8406                           fsr2l	equ	0xFD9
  8407                           status	equ	0xFD8
  8408                           
  8409 ;; *************** function _lcd_write4bits *****************
  8410 ;; Defined at:
  8411 ;;		line 34 in file "../../../lib/lcd44780.c"
  8412 ;; Parameters:    Size  Location     Type
  8413 ;;  value           1    wreg     unsigned char 
  8414 ;; Auto vars:     Size  Location     Type
  8415 ;;  value           1    3[COMRAM] unsigned char 
  8416 ;; Return value:  Size  Location     Type
  8417 ;;		None               void
  8418 ;; Registers used:
  8419 ;;		wreg, status,2, status,0
  8420 ;; Tracked objects:
  8421 ;;		On entry : 0/0
  8422 ;;		On exit  : 0/0
  8423 ;;		Unchanged: 0/0
  8424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  8425 ;;      Params:         0       0       0       0
  8426 ;;      Locals:         1       0       0       0
  8427 ;;      Temps:          0       0       0       0
  8428 ;;      Totals:         1       0       0       0
  8429 ;;Total ram usage:        1 bytes
  8430 ;; Hardware stack levels used:    1
  8431 ;; Hardware stack levels required when called:    1
  8432 ;; This function calls:
  8433 ;;		Nothing
  8434 ;; This function is called by:
  8435 ;;		_lcd_send
  8436 ;;		_lcd_begin
  8437 ;; This function uses a non-reentrant model
  8438 ;;
  8439                           
  8440                           	psect	text50
  8441  00280C                     __ptext50:
  8442                           	opt stack 0
  8443  00280C                     _lcd_write4bits:
  8444                           	opt stack 26
  8445                           
  8446                           ;incstack = 0
  8447                           ;lcd_write4bits@value stored from wreg
  8448  00280C  6E04               	movwf	lcd_write4bits@value,c
  8449                           
  8450                           ;lcd44780.c: 39: LATB &= 0b00001111;
  8451  00280E  0E0F               	movlw	15
  8452  002810  168A               	andwf	3978,f,c	;volatile
  8453                           
  8454                           ;lcd44780.c: 40: LATB |= value << 4;
  8455  002812  3804               	swapf	lcd_write4bits@value,w,c
  8456  002814  0BF0               	andlw	240
  8457  002816  128A               	iorwf	3978,f,c	;volatile
  8458                           
  8459                           ;lcd44780.c: 55: LATB |= 0b1000; _delay((unsigned long)((4)*(16000000/4000000.0))); LATB
      +                           &= ~0b1000; _delay((unsigned long)((100)*(16000000/4000000.0)));;
  8460  002818  868A               	bsf	3978,3,c	;volatile
  8461  00281A  0E05               	movlw	5
  8462  00281C                     u4097:
  8463  00281C  2EE8               	decfsz	wreg,f,c
  8464  00281E  D7FE               	goto	u4097
  8465  002820  F000               	nop	
  8466  002822  968A               	bcf	3978,3,c	;volatile
  8467  002824  0E85               	movlw	133
  8468  002826                     u4107:
  8469  002826  2EE8               	decfsz	wreg,f,c
  8470  002828  D7FE               	goto	u4107
  8471  00282A  F000               	nop	
  8472  00282C  0012               	return		;funcret
  8473  00282E                     __end_of_lcd_write4bits:
  8474                           	opt stack 0
  8475                           tblptru	equ	0xFF8
  8476                           tblptrh	equ	0xFF7
  8477                           tblptrl	equ	0xFF6
  8478                           tablat	equ	0xFF5
  8479                           prodh	equ	0xFF4
  8480                           prodl	equ	0xFF3
  8481                           intcon	equ	0xFF2
  8482                           intcon2	equ	0xFF1
  8483                           postinc0	equ	0xFEE
  8484                           wreg	equ	0xFE8
  8485                           postdec1	equ	0xFE5
  8486                           fsr1l	equ	0xFE1
  8487                           indf2	equ	0xFDF
  8488                           postinc2	equ	0xFDE
  8489                           postdec2	equ	0xFDD
  8490                           fsr2h	equ	0xFDA
  8491                           fsr2l	equ	0xFD9
  8492                           status	equ	0xFD8
  8493                           
  8494 ;; *************** function _delay10ms *****************
  8495 ;; Defined at:
  8496 ;;		line 58 in file "../../../LC-meter.c"
  8497 ;; Parameters:    Size  Location     Type
  8498 ;;  period_10ms     1    wreg     unsigned char 
  8499 ;; Auto vars:     Size  Location     Type
  8500 ;;  period_10ms     1    0[COMRAM] unsigned char 
  8501 ;; Return value:  Size  Location     Type
  8502 ;;		None               void
  8503 ;; Registers used:
  8504 ;;		wreg
  8505 ;; Tracked objects:
  8506 ;;		On entry : 0/0
  8507 ;;		On exit  : 0/0
  8508 ;;		Unchanged: 0/0
  8509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  8510 ;;      Params:         0       0       0       0
  8511 ;;      Locals:         0       0       0       0
  8512 ;;      Temps:          0       0       0       0
  8513 ;;      Totals:         0       0       0       0
  8514 ;;Total ram usage:        0 bytes
  8515 ;; Hardware stack levels used:    1
  8516 ;; Hardware stack levels required when called:    1
  8517 ;; This function calls:
  8518 ;;		Nothing
  8519 ;; This function is called by:
  8520 ;;		_main
  8521 ;;		_calibrate
  8522 ;; This function uses a non-reentrant model
  8523 ;;
  8524                           
  8525                           	psect	text51
  8526  002912                     __ptext51:
  8527                           	opt stack 0
  8528  002912                     _delay10ms:
  8529                           	opt stack 29
  8530                           
  8531                           ;incstack = 0
  8532  002912  0012               	return		;funcret
  8533  002914                     __end_of_delay10ms:
  8534                           	opt stack 0
  8535                           tblptru	equ	0xFF8
  8536                           tblptrh	equ	0xFF7
  8537                           tblptrl	equ	0xFF6
  8538                           tablat	equ	0xFF5
  8539                           prodh	equ	0xFF4
  8540                           prodl	equ	0xFF3
  8541                           intcon	equ	0xFF2
  8542                           intcon2	equ	0xFF1
  8543                           postinc0	equ	0xFEE
  8544                           wreg	equ	0xFE8
  8545                           postdec1	equ	0xFE5
  8546                           fsr1l	equ	0xFE1
  8547                           indf2	equ	0xFDF
  8548                           postinc2	equ	0xFDE
  8549                           postdec2	equ	0xFDD
  8550                           fsr2h	equ	0xFDA
  8551                           fsr2l	equ	0xFD9
  8552                           status	equ	0xFD8
  8553                           
  8554 ;; *************** function ___lwtofl *****************
  8555 ;; Defined at:
  8556 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtofl.c"
  8557 ;; Parameters:    Size  Location     Type
  8558 ;;  c               2   58[COMRAM] unsigned int 
  8559 ;; Auto vars:     Size  Location     Type
  8560 ;;		None
  8561 ;; Return value:  Size  Location     Type
  8562 ;;                  4   58[COMRAM] unsigned int 
  8563 ;; Registers used:
  8564 ;;		wreg, status,2, status,0, cstack
  8565 ;; Tracked objects:
  8566 ;;		On entry : 0/0
  8567 ;;		On exit  : 0/0
  8568 ;;		Unchanged: 0/0
  8569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  8570 ;;      Params:         4       0       0       0
  8571 ;;      Locals:         0       0       0       0
  8572 ;;      Temps:          0       0       0       0
  8573 ;;      Totals:         4       0       0       0
  8574 ;;Total ram usage:        4 bytes
  8575 ;; Hardware stack levels used:    1
  8576 ;; Hardware stack levels required when called:    2
  8577 ;; This function calls:
  8578 ;;		___flpack
  8579 ;; This function is called by:
  8580 ;;		_calibrate
  8581 ;;		_measure_capacitance
  8582 ;;		_measure_inductance
  8583 ;; This function uses a non-reentrant model
  8584 ;;
  8585                           
  8586                           	psect	text52
  8587  002798                     __ptext52:
  8588                           	opt stack 0
  8589  002798                     ___lwtofl:
  8590                           	opt stack 27
  8591                           
  8592                           ;incstack = 0
  8593  002798  C03B  F004         	movff	___lwtofl@c,___flpack@arg
  8594  00279C  C03C  F005         	movff	___lwtofl@c+1,___flpack@arg+1
  8595  0027A0  6A06               	clrf	___flpack@arg+2,c
  8596  0027A2  6A07               	clrf	___flpack@arg+3,c
  8597  0027A4  0E96               	movlw	150
  8598  0027A6  6E08               	movwf	___flpack@exp,c
  8599  0027A8  0E00               	movlw	0
  8600  0027AA  6E09               	movwf	___flpack@sign,c
  8601  0027AC  ECC8  F00E         	call	___flpack	;wreg free
  8602  0027B0  C004  F03B         	movff	?___flpack,?___lwtofl
  8603  0027B4  C005  F03C         	movff	?___flpack+1,?___lwtofl+1
  8604  0027B8  C006  F03D         	movff	?___flpack+2,?___lwtofl+2
  8605  0027BC  C007  F03E         	movff	?___flpack+3,?___lwtofl+3
  8606  0027C0  0012               	return		;funcret
  8607  0027C2                     __end_of___lwtofl:
  8608                           	opt stack 0
  8609                           tblptru	equ	0xFF8
  8610                           tblptrh	equ	0xFF7
  8611                           tblptrl	equ	0xFF6
  8612                           tablat	equ	0xFF5
  8613                           prodh	equ	0xFF4
  8614                           prodl	equ	0xFF3
  8615                           intcon	equ	0xFF2
  8616                           intcon2	equ	0xFF1
  8617                           postinc0	equ	0xFEE
  8618                           wreg	equ	0xFE8
  8619                           postdec1	equ	0xFE5
  8620                           fsr1l	equ	0xFE1
  8621                           indf2	equ	0xFDF
  8622                           postinc2	equ	0xFDE
  8623                           postdec2	equ	0xFDD
  8624                           fsr2h	equ	0xFDA
  8625                           fsr2l	equ	0xFD9
  8626                           status	equ	0xFD8
  8627                           
  8628 ;; *************** function ___flpack *****************
  8629 ;; Defined at:
  8630 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\double.c"
  8631 ;; Parameters:    Size  Location     Type
  8632 ;;  arg             4    3[COMRAM] unsigned long 
  8633 ;;  exp             1    7[COMRAM] unsigned char 
  8634 ;;  sign            1    8[COMRAM] unsigned char 
  8635 ;; Auto vars:     Size  Location     Type
  8636 ;;		None
  8637 ;; Return value:  Size  Location     Type
  8638 ;;                  4    3[COMRAM] unsigned char 
  8639 ;; Registers used:
  8640 ;;		wreg, status,2, status,0
  8641 ;; Tracked objects:
  8642 ;;		On entry : 0/0
  8643 ;;		On exit  : 0/0
  8644 ;;		Unchanged: 0/0
  8645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  8646 ;;      Params:         6       0       0       0
  8647 ;;      Locals:         0       0       0       0
  8648 ;;      Temps:          4       0       0       0
  8649 ;;      Totals:        10       0       0       0
  8650 ;;Total ram usage:       10 bytes
  8651 ;; Hardware stack levels used:    1
  8652 ;; Hardware stack levels required when called:    1
  8653 ;; This function calls:
  8654 ;;		Nothing
  8655 ;; This function is called by:
  8656 ;;		___altofl
  8657 ;;		___awtofl
  8658 ;;		___fladd
  8659 ;;		___fldiv
  8660 ;;		___flmul
  8661 ;;		___lltofl
  8662 ;;		___lwtofl
  8663 ;; This function uses a non-reentrant model
  8664 ;;
  8665                           
  8666                           	psect	text53
  8667  001D90                     __ptext53:
  8668                           	opt stack 0
  8669  001D90                     ___flpack:
  8670                           	opt stack 27
  8671                           
  8672                           ;incstack = 0
  8673  001D90  5008               	movf	___flpack@exp,w,c
  8674  001D92  E005               	bz	l793
  8675  001D94  5004               	movf	___flpack@arg,w,c
  8676  001D96  1005               	iorwf	___flpack@arg+1,w,c
  8677  001D98  1006               	iorwf	___flpack@arg+2,w,c
  8678  001D9A  1007               	iorwf	___flpack@arg+3,w,c
  8679  001D9C  E10B               	bnz	l3656
  8680  001D9E                     l793:
  8681  001D9E  6A04               	clrf	?___flpack,c
  8682  001DA0  6A05               	clrf	?___flpack+1,c
  8683  001DA2  6A06               	clrf	?___flpack+2,c
  8684  001DA4  6A07               	clrf	?___flpack+3,c
  8685  001DA6  0012               	return	
  8686  001DA8                     l3654:
  8687  001DA8  2A08               	incf	___flpack@exp,f,c
  8688  001DAA  90D8               	bcf	status,0,c
  8689  001DAC  3207               	rrcf	___flpack@arg+3,f,c
  8690  001DAE  3206               	rrcf	___flpack@arg+2,f,c
  8691  001DB0  3205               	rrcf	___flpack@arg+1,f,c
  8692  001DB2  3204               	rrcf	___flpack@arg,f,c
  8693  001DB4                     l3656:
  8694  001DB4  6A0A               	clrf	??___flpack& (0+255),c
  8695  001DB6  6A0B               	clrf	(??___flpack+1)& (0+255),c
  8696  001DB8  6A0C               	clrf	(??___flpack+2)& (0+255),c
  8697  001DBA  0EFE               	movlw	254
  8698  001DBC  1407               	andwf	___flpack@arg+3,w,c
  8699  001DBE  6E0D               	movwf	(??___flpack+3)& (0+255),c
  8700  001DC0  500A               	movf	??___flpack,w,c
  8701  001DC2  100B               	iorwf	??___flpack+1,w,c
  8702  001DC4  100C               	iorwf	??___flpack+2,w,c
  8703  001DC6  100D               	iorwf	??___flpack+3,w,c
  8704  001DC8  E00C               	bz	l798
  8705  001DCA  D7EE               	goto	l3654
  8706  001DCC                     l3658:
  8707  001DCC  2A08               	incf	___flpack@exp,f,c
  8708  001DCE  2A04               	incf	___flpack@arg,f,c
  8709  001DD0  0E00               	movlw	0
  8710  001DD2  2205               	addwfc	___flpack@arg+1,f,c
  8711  001DD4  2206               	addwfc	___flpack@arg+2,f,c
  8712  001DD6  2207               	addwfc	___flpack@arg+3,f,c
  8713  001DD8  90D8               	bcf	status,0,c
  8714  001DDA  3207               	rrcf	___flpack@arg+3,f,c
  8715  001DDC  3206               	rrcf	___flpack@arg+2,f,c
  8716  001DDE  3205               	rrcf	___flpack@arg+1,f,c
  8717  001DE0  3204               	rrcf	___flpack@arg,f,c
  8718  001DE2                     l798:
  8719  001DE2  6A0A               	clrf	??___flpack& (0+255),c
  8720  001DE4  6A0B               	clrf	(??___flpack+1)& (0+255),c
  8721  001DE6  6A0C               	clrf	(??___flpack+2)& (0+255),c
  8722  001DE8  5007               	movf	___flpack@arg+3,w,c
  8723  001DEA  6E0D               	movwf	(??___flpack+3)& (0+255),c
  8724  001DEC  500A               	movf	??___flpack,w,c
  8725  001DEE  100B               	iorwf	??___flpack+1,w,c
  8726  001DF0  100C               	iorwf	??___flpack+2,w,c
  8727  001DF2  100D               	iorwf	??___flpack+3,w,c
  8728  001DF4  E007               	bz	l3666
  8729  001DF6  D7EA               	goto	l3658
  8730  001DF8                     l3664:
  8731  001DF8  0608               	decf	___flpack@exp,f,c
  8732  001DFA  90D8               	bcf	status,0,c
  8733  001DFC  3604               	rlcf	___flpack@arg,f,c
  8734  001DFE  3605               	rlcf	___flpack@arg+1,f,c
  8735  001E00  3606               	rlcf	___flpack@arg+2,f,c
  8736  001E02  3607               	rlcf	___flpack@arg+3,f,c
  8737  001E04                     l3666:
  8738  001E04  BE06               	btfsc	___flpack@arg+2,7,c
  8739  001E06  D003               	goto	l805
  8740  001E08  0E02               	movlw	2
  8741  001E0A  6008               	cpfslt	___flpack@exp,c
  8742  001E0C  D7F5               	goto	l3664
  8743  001E0E                     l805:
  8744  001E0E  B008               	btfsc	___flpack@exp,0,c
  8745  001E10  D002               	goto	l806
  8746  001E12  0E7F               	movlw	127
  8747  001E14  1606               	andwf	___flpack@arg+2,f,c
  8748  001E16                     l806:
  8749  001E16  90D8               	bcf	status,0,c
  8750  001E18  3208               	rrcf	___flpack@exp,f,c
  8751  001E1A  C008  F00A         	movff	___flpack@exp,??___flpack
  8752  001E1E  6A0B               	clrf	(??___flpack+1)& (0+255),c
  8753  001E20  6A0C               	clrf	(??___flpack+2)& (0+255),c
  8754  001E22  6A0D               	clrf	(??___flpack+3)& (0+255),c
  8755  001E24  C00A  F00D         	movff	??___flpack,??___flpack+3
  8756  001E28  6A0C               	clrf	??___flpack+2,c
  8757  001E2A  6A0B               	clrf	??___flpack+1,c
  8758  001E2C  6A0A               	clrf	??___flpack,c
  8759  001E2E  500A               	movf	??___flpack,w,c
  8760  001E30  1204               	iorwf	___flpack@arg,f,c
  8761  001E32  500B               	movf	??___flpack+1,w,c
  8762  001E34  1205               	iorwf	___flpack@arg+1,f,c
  8763  001E36  500C               	movf	??___flpack+2,w,c
  8764  001E38  1206               	iorwf	___flpack@arg+2,f,c
  8765  001E3A  500D               	movf	??___flpack+3,w,c
  8766  001E3C  1207               	iorwf	___flpack@arg+3,f,c
  8767  001E3E  5009               	movf	___flpack@sign,w,c
  8768  001E40  A4D8               	btfss	status,2,c
  8769  001E42  8E07               	bsf	___flpack@arg+3,7,c
  8770  001E44  C004  F004         	movff	___flpack@arg,?___flpack
  8771  001E48  C005  F005         	movff	___flpack@arg+1,?___flpack+1
  8772  001E4C  C006  F006         	movff	___flpack@arg+2,?___flpack+2
  8773  001E50  C007  F007         	movff	___flpack@arg+3,?___flpack+3
  8774  001E54  0012               	return		;funcret
  8775  001E56                     __end_of___flpack:
  8776                           	opt stack 0
  8777                           tblptru	equ	0xFF8
  8778                           tblptrh	equ	0xFF7
  8779                           tblptrl	equ	0xFF6
  8780                           tablat	equ	0xFF5
  8781                           prodh	equ	0xFF4
  8782                           prodl	equ	0xFF3
  8783                           intcon	equ	0xFF2
  8784                           intcon2	equ	0xFF1
  8785                           postinc0	equ	0xFEE
  8786                           wreg	equ	0xFE8
  8787                           postdec1	equ	0xFE5
  8788                           fsr1l	equ	0xFE1
  8789                           indf2	equ	0xFDF
  8790                           postinc2	equ	0xFDE
  8791                           postdec2	equ	0xFDD
  8792                           fsr2h	equ	0xFDA
  8793                           fsr2l	equ	0xFD9
  8794                           status	equ	0xFD8
  8795                           
  8796 ;; *************** function _global_int *****************
  8797 ;; Defined at:
  8798 ;;		line 81 in file "../../../LC-meter.c"
  8799 ;; Parameters:    Size  Location     Type
  8800 ;;		None
  8801 ;; Auto vars:     Size  Location     Type
  8802 ;;		None
  8803 ;; Return value:  Size  Location     Type
  8804 ;;		None               void
  8805 ;; Registers used:
  8806 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8807 ;; Tracked objects:
  8808 ;;		On entry : 0/0
  8809 ;;		On exit  : 0/0
  8810 ;;		Unchanged: 0/0
  8811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
  8812 ;;      Params:         0       0       0       0
  8813 ;;      Locals:         0       0       0       0
  8814 ;;      Temps:          3       0       0       0
  8815 ;;      Totals:         3       0       0       0
  8816 ;;Total ram usage:        3 bytes
  8817 ;; Hardware stack levels used:    1
  8818 ;; This function calls:
  8819 ;;		Nothing
  8820 ;; This function is called by:
  8821 ;;		Interrupt level 2
  8822 ;; This function uses a non-reentrant model
  8823 ;;
  8824                           
  8825                           	psect	intcode
  8826  000008                     __pintcode:
  8827                           	opt stack 0
  8828  000008                     _global_int:
  8829                           	opt stack 23
  8830                           
  8831                           ;incstack = 0
  8832  000008  CFD9 F002          	movff	fsr2l,??_global_int+1
  8833  00000C  CFDA F003          	movff	fsr2h,??_global_int+2
  8834                           
  8835                           ;LC-meter.c: 85: if(PIR1 & 0x02) {
  8836  000010  A29E               	btfss	3998,1,c	;volatile
  8837  000012  D02C               	goto	i2l3548
  8838                           
  8839                           ;LC-meter.c: 86: bres += 256;
  8840  000014  0100               	movlb	0	; () banked
  8841  000016  2BE8               	incf	(_bres+1)& (0+255),f,b	;volatile
  8842                           
  8843                           ;LC-meter.c: 87: if(bres >= ((unsigned long)((double)((16000000) / 4) / 1000))) {
  8844  000018  0EA0               	movlw	160
  8845  00001A  5DE7               	subwf	_bres& (0+255),w,b	;volatile
  8846  00001C  0E0F               	movlw	15
  8847  00001E  59E8               	subwfb	(_bres+1)& (0+255),w,b	;volatile
  8848  000020  E324               	bnc	i2l3546
  8849                           
  8850                           ; BSR set to: 0
  8851                           ;LC-meter.c: 88: bres -= ((unsigned long)((double)((16000000) / 4) / 1000));
  8852  000022  0EA0               	movlw	160
  8853  000024  5FE7               	subwf	_bres& (0+255),f,b	;volatile
  8854  000026  0E0F               	movlw	15
  8855  000028  5BE8               	subwfb	(_bres+1)& (0+255),f,b	;volatile
  8856                           
  8857                           ; BSR set to: 0
  8858                           ;LC-meter.c: 89: msecpart++;
  8859  00002A  4BE9               	infsnz	_msecpart& (0+255),f,b	;volatile
  8860  00002C  2BEA               	incf	(_msecpart+1)& (0+255),f,b	;volatile
  8861                           
  8862                           ; BSR set to: 0
  8863                           ;LC-meter.c: 90: LATC &= ~0b00000100; LATC |= (!!(msecpart >= 833)) << 2;;
  8864  00002E  948B               	bcf	3979,2,c	;volatile
  8865  000030  0E41               	movlw	65
  8866  000032  5DE9               	subwf	_msecpart& (0+255),w,b	;volatile
  8867  000034  0E03               	movlw	3
  8868  000036  59EA               	subwfb	(_msecpart+1)& (0+255),w,b	;volatile
  8869  000038  E303               	bnc	i2u260_40
  8870  00003A  6A01               	clrf	??_global_int& (0+255),c
  8871  00003C  2A01               	incf	??_global_int& (0+255),f,c
  8872  00003E  D001               	goto	i2u261_48
  8873  000040                     i2u260_40:
  8874  000040  6A01               	clrf	??_global_int& (0+255),c
  8875  000042                     i2u261_48:
  8876  000042  90D8               	bcf	status,0,c
  8877  000044  3601               	rlcf	??_global_int,f,c
  8878  000046  90D8               	bcf	status,0,c
  8879  000048  3401               	rlcf	??_global_int,w,c
  8880  00004A  128B               	iorwf	3979,f,c	;volatile
  8881                           
  8882                           ;LC-meter.c: 92: if(msecpart >= 1000) {
  8883  00004C  0EE8               	movlw	232
  8884  00004E  0100               	movlb	0	; () banked
  8885  000050  5DE9               	subwf	_msecpart& (0+255),w,b	;volatile
  8886  000052  0E03               	movlw	3
  8887  000054  59EA               	subwfb	(_msecpart+1)& (0+255),w,b	;volatile
  8888  000056  E309               	bnc	i2l3546
  8889                           
  8890                           ; BSR set to: 0
  8891                           ;LC-meter.c: 94: seconds++;
  8892  000058  2BCF               	incf	_seconds& (0+255),f,b	;volatile
  8893  00005A  0E00               	movlw	0
  8894  00005C  23D0               	addwfc	(_seconds+1)& (0+255),f,b	;volatile
  8895  00005E  23D1               	addwfc	(_seconds+2)& (0+255),f,b	;volatile
  8896  000060  23D2               	addwfc	(_seconds+3)& (0+255),f,b	;volatile
  8897                           
  8898                           ;LC-meter.c: 95: msecpart -= 1000;
  8899  000062  0EE8               	movlw	232
  8900  000064  5FE9               	subwf	_msecpart& (0+255),f,b	;volatile
  8901  000066  0E03               	movlw	3
  8902  000068  5BEA               	subwfb	(_msecpart+1)& (0+255),f,b	;volatile
  8903  00006A                     i2l3546:
  8904                           
  8905                           ; BSR set to: 0
  8906                           ;LC-meter.c: 96: }
  8907                           ;LC-meter.c: 97: }
  8908                           ;LC-meter.c: 99: PIR1 &= ~0b10;
  8909  00006A  929E               	bcf	3998,1,c	;volatile
  8910  00006C                     i2l3548:
  8911                           
  8912                           ;LC-meter.c: 100: }
  8913                           ;LC-meter.c: 102: if(RCIF) { rxfifo[rxiptr] = RCREG; ser_tmp = (rxiptr + 1) & ((uint8_t)
      +                          16 - 1); if(ser_tmp != rxoptr) rxiptr = ser_tmp; }; if(TXIF && TXIE) { TXREG = txfifo[tx
      +                          optr]; ++txoptr; txoptr &= ((uint8_t)16 - 1); if(txoptr == txiptr) { TXIE = 0; }; TXIF =
      +                           0; 
  8914  00006C  AA9E               	btfss	3998,5,c	;volatile
  8915  00006E  D011               	goto	i2l460
  8916  000070  0E00               	movlw	low _rxfifo
  8917  000072  0100               	movlb	0	; () banked
  8918  000074  25DC               	addwf	_rxiptr& (0+255),w,b	;volatile
  8919  000076  6ED9               	movwf	fsr2l,c
  8920  000078  6ADA               	clrf	fsr2h,c
  8921  00007A  0E01               	movlw	high _rxfifo
  8922  00007C  22DA               	addwfc	fsr2h,f,c
  8923  00007E  CFAE FFDF          	movff	4014,indf2	;volatile
  8924                           
  8925                           ; BSR set to: 0
  8926  000082  29DC               	incf	_rxiptr& (0+255),w,b	;volatile
  8927  000084  0B0F               	andlw	15
  8928  000086  6FDE               	movwf	_ser_tmp& (0+255),b
  8929                           
  8930                           ; BSR set to: 0
  8931  000088  51DD               	movf	_rxoptr& (0+255),w,b	;volatile
  8932  00008A  19DE               	xorwf	_ser_tmp& (0+255),w,b
  8933  00008C  A4D8               	btfss	status,2,c
  8934                           
  8935                           ; BSR set to: 0
  8936  00008E  C0DE  F0DC         	movff	_ser_tmp,_rxiptr	;volatile
  8937  000092                     i2l460:
  8938  000092  B89E               	btfsc	3998,4,c	;volatile
  8939  000094  A89D               	btfss	3997,4,c	;volatile
  8940  000096  D00E               	goto	i2l464
  8941  000098  505C               	movf	_txoptr,w,c
  8942  00009A  0FB3               	addlw	low _txfifo
  8943  00009C  6ED9               	movwf	fsr2l,c
  8944  00009E  6ADA               	clrf	fsr2h,c
  8945  0000A0  50DF               	movf	indf2,w,c
  8946  0000A2  6EAD               	movwf	4013,c	;volatile
  8947  0000A4  2A5C               	incf	_txoptr,f,c	;volatile
  8948  0000A6  0E0F               	movlw	15
  8949  0000A8  165C               	andwf	_txoptr,f,c	;volatile
  8950  0000AA  505B               	movf	_txiptr,w,c	;volatile
  8951  0000AC  185C               	xorwf	_txoptr,w,c	;volatile
  8952  0000AE  B4D8               	btfsc	status,2,c
  8953  0000B0  989D               	bcf	3997,4,c	;volatile
  8954  0000B2  989E               	bcf	3998,4,c	;volatile
  8955  0000B4                     i2l464:
  8956  0000B4  C003  FFDA         	movff	??_global_int+2,fsr2h
  8957  0000B8  C002  FFD9         	movff	??_global_int+1,fsr2l
  8958  0000BC  0011               	retfie		f
  8959  0000BE                     __end_of_global_int:
  8960                           	opt stack 0
  8961                           tblptru	equ	0xFF8
  8962                           tblptrh	equ	0xFF7
  8963                           tblptrl	equ	0xFF6
  8964                           tablat	equ	0xFF5
  8965                           prodh	equ	0xFF4
  8966                           prodl	equ	0xFF3
  8967                           intcon	equ	0xFF2
  8968                           intcon2	equ	0xFF1
  8969                           postinc0	equ	0xFEE
  8970                           wreg	equ	0xFE8
  8971                           postdec1	equ	0xFE5
  8972                           fsr1l	equ	0xFE1
  8973                           indf2	equ	0xFDF
  8974                           postinc2	equ	0xFDE
  8975                           postdec2	equ	0xFDD
  8976                           fsr2h	equ	0xFDA
  8977                           fsr2l	equ	0xFD9
  8978                           status	equ	0xFD8
  8979                           tblptru	equ	0xFF8
  8980                           tblptrh	equ	0xFF7
  8981                           tblptrl	equ	0xFF6
  8982                           tablat	equ	0xFF5
  8983                           prodh	equ	0xFF4
  8984                           prodl	equ	0xFF3
  8985                           intcon	equ	0xFF2
  8986                           intcon2	equ	0xFF1
  8987                           postinc0	equ	0xFEE
  8988                           wreg	equ	0xFE8
  8989                           postdec1	equ	0xFE5
  8990                           fsr1l	equ	0xFE1
  8991                           indf2	equ	0xFDF
  8992                           postinc2	equ	0xFDE
  8993                           postdec2	equ	0xFDD
  8994                           fsr2h	equ	0xFDA
  8995                           fsr2l	equ	0xFD9
  8996                           status	equ	0xFD8
  8997                           
  8998                           	psect	rparam
  8999  0000                     tblptru	equ	0xFF8
  9000                           tblptrh	equ	0xFF7
  9001                           tblptrl	equ	0xFF6
  9002                           tablat	equ	0xFF5
  9003                           prodh	equ	0xFF4
  9004                           prodl	equ	0xFF3
  9005                           intcon	equ	0xFF2
  9006                           intcon2	equ	0xFF1
  9007                           postinc0	equ	0xFEE
  9008                           wreg	equ	0xFE8
  9009                           postdec1	equ	0xFE5
  9010                           fsr1l	equ	0xFE1
  9011                           indf2	equ	0xFDF
  9012                           postinc2	equ	0xFDE
  9013                           postdec2	equ	0xFDD
  9014                           fsr2h	equ	0xFDA
  9015                           fsr2l	equ	0xFD9
  9016                           status	equ	0xFD8


Data Sizes:
    Strings     174
    Constant    76
    Data        5
    BSS         84
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     89      92
    BANK0           160     83     144
    BANK1           256     19      52
    BANK4           256      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(1) Largest target is 40
		 -> exp@coeff(CODE[40]), log@coeff(CODE[36]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(BANK0[2]), 

    main$354	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_16(CODE[16]), STR_15(CODE[16]), 

    buffer_puts@x	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_27(CODE[6]), 

    lcd_puts@string	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_21(CODE[5]), STR_20(CODE[6]), STR_19(CODE[7]), STR_18(CODE[7]), 
		 -> STR_14(CODE[10]), STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[6]), 

    ser_puts@s	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_36(CODE[3]), STR_35(CODE[5]), STR_34(CODE[3]), STR_33(CODE[8]), 
		 -> STR_32(CODE[6]), STR_31(CODE[6]), STR_30(CODE[6]), STR_29(CODE[5]), 
		 -> STR_26(CODE[3]), STR_24(CODE[3]), STR_22(CODE[3]), STR_17(CODE[3]), 
		 -> STR_16(CODE[16]), STR_15(CODE[16]), STR_13(CODE[3]), STR_9(CODE[3]), 

    put_str@s	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_37(CODE[13]), STR_28(CODE[10]), STR_25(CODE[15]), STR_23(CODE[12]), 

    print_unit@units	PTR const unsigned char [8] size(1) Largest target is 3
		 -> STR_8(CODE[3]), STR_7(CODE[3]), STR_6(CODE[3]), STR_5(CODE[3]), 
		 -> STR_4(CODE[3]), STR_3(CODE[3]), STR_2(CODE[3]), STR_1(CODE[2]), 


Critical Paths under _main in COMRAM

    _print_indicator->_lcd_gotoxy
    _print_unit->_lcd_gotoxy
    _print_reading->_format_number
    _lcd_puts->_lcd_send
    _format_xint32->_format_number
    _format_double->_log10
    _ldexp->_eval_poly
    ___fltol->_log10
    ___flsub->___fladd
    ___fldiv->___flpack
    ___lltofl->___flpack
    _log10->_log
    _log->_eval_poly
    _eval_poly->___fladd
    ___flmul->___fldiv
    ___fladd->___flmul
    ___awtofl->___flpack
    _lcd_begin->_lcd_command
    _calibrate->___lwtofl
    _put_str->_output_putch
    _output_putch->_lcd_send
    _measure_freq->_format_number
    _print_buffer->_ser_puts
    _ser_puts->_ser_putch
    _lcd_gotoxy->_lcd_command
    _format_number->___lwdiv
    _buffer_puts->_buffer_putch
    _lcd_clear->_lcd_command
    _lcd_command->_lcd_send
    _lcd_send->_lcd_write4bits
    ___lwtofl->_measure_freq

Critical Paths under _global_int in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_format_double
    _measure_inductance->___fltol
    _measure_capacitance->_format_double
    _format_double->_pow
    _pow->_exp
    _exp->_floor
    _floor->___altofl
    ___fltol->_log10
    ___altofl->___fltol

Critical Paths under _global_int in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_measure_capacitance

Critical Paths under _global_int in BANK1

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _global_int in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  415507
                                             81 BANK0      2     2      0
                          _calibrate
                          _delay10ms
                      _format_double
                          _lcd_begin
                          _lcd_clear
                         _lcd_gotoxy
                           _lcd_init
                           _lcd_puts
                _measure_capacitance
                 _measure_inductance
                    _print_indicator
                           _ser_init
                           _ser_puts
                        _timer0_init
                        _timer2_init
 ---------------------------------------------------------------------------------
 (1) _timer2_init                                          4     4      0      90
                                              3 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _timer0_init                                         12    12      0     297
                                              3 COMRAM    12    12      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _print_indicator                                      1     1      0    2955
                                             13 COMRAM     1     1      0
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (1) _measure_inductance                                  55    55      0   41982
                                             14 BANK0     43    43      0
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___lwtofl
                         _lcd_gotoxy
                       _measure_freq
                      _print_reading
                         _print_unit
                            _put_str
 ---------------------------------------------------------------------------------
 (1) _measure_capacitance                                 19    19      0  198658
                                              0 BANK1     19    19      0
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___lwtofl
                      _format_double
                      _format_xint32
                         _lcd_gotoxy
                       _measure_freq
                      _print_reading
                         _print_unit
                            _put_str
                          _ser_putch
                           _ser_puts
 ---------------------------------------------------------------------------------
 (2) _print_unit                                           3     3      0    2491
                                             13 COMRAM     2     2      0
                         _lcd_gotoxy
                           _ser_puts
 ---------------------------------------------------------------------------------
 (2) _print_reading                                        6     4      2    7600
                                             53 COMRAM     6     4      2
                            ___lwdiv
                            ___lwmod
                      _format_number
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (2) _lcd_puts                                             3     3      0     979
                                              6 COMRAM     3     3      0
                           _lcd_send
 ---------------------------------------------------------------------------------
 (2) _format_xint32                                        4     0      4    3729
                                             53 COMRAM     4     0      4
                       _buffer_putch
                      _format_number
 ---------------------------------------------------------------------------------
 (2) _format_double                                       20    16      4  152787
                                             61 BANK0     20    16      4
                           ___awtofl
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                       _buffer_putch
                              _floor
                              _log10
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                 21    13      8   85608
                                             40 BANK0     21    13      8
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___lltofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _exp                                                 11     7      4   45695
                                             29 BANK0     11     7      4
                           ___awtofl
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (5) _ldexp                                                8     2      6     489
                                             79 COMRAM     8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (5) _floor                                               10     6      4   10644
                                             19 BANK0     10     6      4
                           ___altofl
                            ___fladd
                            ___fldiv (ARG)
                             ___flge
                            ___fltol
                              _frexp
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     882
                                              4 BANK0     10     6      4
                            ___fldiv (ARG)
                              _log10 (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                               8     0      8    1978
                                              3 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (6) ___altofl                                             5     1      4    2446
                                             14 BANK0      5     1      4
                           ___flpack
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    5269
                                             67 COMRAM     8     0      8
                           ___awtofl (ARG)
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4     260
                                              3 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             15     7      8    4021
                                             13 COMRAM    15     7      8
                           ___flpack
 ---------------------------------------------------------------------------------
 (4) ___lltofl                                             4     0      4    2344
                                             13 COMRAM     4     0      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (3) _log10                                                8     4      4   33887
                                             85 COMRAM     4     0      4
                                              0 BANK0      4     4      0
                            ___flmul
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  6     2      4   26714
                                             79 COMRAM     6     2      4
                           ___awtofl
                            ___fladd
                            ___flmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                7     2      5     582
                                              3 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           12     5      7   11855
                                             67 COMRAM    12     5      7
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             28    20      8    6998
                                             28 COMRAM    27    19      8
                           ___awtofl (ARG)
                            ___fldiv (ARG)
                           ___flpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             12     4      8    4213
                                             55 COMRAM    12     4      8
                           ___awtofl (ARG)
                            ___flmul (ARG)
                           ___flpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awtofl                                             9     5      4    2686
                                             13 COMRAM     5     1      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             3     3      0      46
                                              3 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcd_begin                                            3     2      1     860
                                              7 COMRAM     3     2      1
                        _lcd_command
                     _lcd_write4bits
 ---------------------------------------------------------------------------------
 (1) _calibrate                                            1     1      0   13620
                                             62 COMRAM     1     1      0
                           ___lwtofl
                          _delay10ms
                          _lcd_clear
                         _lcd_gotoxy
                           _lcd_send
                       _measure_freq
                            _put_str
                           _ser_puts
 ---------------------------------------------------------------------------------
 (2) _put_str                                              4     4      0     952
                                              7 COMRAM     4     4      0
                       _output_putch
 ---------------------------------------------------------------------------------
 (3) _output_putch                                         1     1      0     702
                                              6 COMRAM     1     1      0
                           _lcd_send
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _measure_freq                                         5     3      2    6191
                                             53 COMRAM     5     3      2
                        _buffer_init
                        _buffer_puts
                      _format_number
                         _lcd_gotoxy
                       _print_buffer
                     _timer0_read_ps
 ---------------------------------------------------------------------------------
 (3) _timer0_read_ps                                       7     5      2     167
                                              3 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (3) _print_buffer                                         2     2      0     645
                                              5 COMRAM     2     2      0
                          _ser_putch
                           _ser_puts
 ---------------------------------------------------------------------------------
 (1) _ser_puts                                             1     1      0     546
                                              4 COMRAM     1     1      0
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _ser_putch                                            1     1      0      31
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           6     5      1    1945
                                              7 COMRAM     6     5      1
                        _lcd_command
 ---------------------------------------------------------------------------------
 (3) _format_number                                       43    39      4    3243
                                             10 COMRAM    43    39      4
                            ___lwdiv
                            ___lwmod
                       _buffer_putch
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     582
                                              3 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     591
                                              3 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _buffer_puts                                          1     1      0     126
                                              6 COMRAM     1     1      0
                       _buffer_putch
 ---------------------------------------------------------------------------------
 (4) _buffer_putch                                         3     3      0      31
                                              3 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _buffer_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            1     1      0     640
                                              7 COMRAM     1     1      0
                        _lcd_command
 ---------------------------------------------------------------------------------
 (3) _lcd_command                                          1     1      0     640
                                              6 COMRAM     1     1      0
                           _lcd_send
 ---------------------------------------------------------------------------------
 (3) _lcd_send                                             2     1      1     609
                                              4 COMRAM     2     1      1
                     _lcd_write4bits
 ---------------------------------------------------------------------------------
 (4) _lcd_write4bits                                       1     1      0      31
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _delay10ms                                            1     1      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4    2669
                                             58 COMRAM     4     0      4
                           ___flpack
                       _measure_freq (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6    2248
                                              3 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _global_int                                           3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calibrate
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _buffer_init
         _buffer_puts
           _buffer_putch
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _print_buffer
           _ser_putch
           _ser_puts
             _ser_putch
         _timer0_read_ps
     _delay10ms
     _lcd_clear
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_send
       _lcd_write4bits
     _measure_freq
       _buffer_init
       _buffer_puts
         _buffer_putch
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _print_buffer
         _ser_putch
         _ser_puts
           _ser_putch
       _timer0_read_ps
     _put_str
       _output_putch
         _lcd_send
           _lcd_write4bits
         _ser_putch
     _ser_puts
       _ser_putch
   _delay10ms
   _format_double
     ___awtofl
       ___flpack
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     _buffer_putch
     _floor
       ___altofl
         ___flpack
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
       ___fladd
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___fldiv (ARG)
         ___flpack
       ___flge (ARG)
       ___fltol (ARG)
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       _frexp (ARG)
     _log10
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       _log
         ___awtofl
           ___flpack
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _frexp
     _pow
       ___flge
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       ___flneg
       ___fltol
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       ___lltofl
         ___flpack
       _exp
         ___awtofl
           ___flpack
         ___fldiv
           ___flpack
         ___flge
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         ___flsub
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _floor
           ___altofl
             ___flpack
             ___fltol (ARG)
               ___fldiv (ARG)
                 ___flpack
               _log10 (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _log
                   ___awtofl
                     ___flpack
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___fladd
                       ___awtofl (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                   _frexp
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flge (ARG)
           ___fltol (ARG)
             ___fldiv (ARG)
               ___flpack
             _log10 (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
           _frexp (ARG)
         _ldexp
           _eval_poly (ARG)
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
         _log (ARG)
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
       _log
         ___awtofl
           ___flpack
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _frexp
   _lcd_begin
     _lcd_command
       _lcd_send
         _lcd_write4bits
     _lcd_write4bits
   _lcd_clear
     _lcd_command
       _lcd_send
         _lcd_write4bits
   _lcd_gotoxy
     _lcd_command
       _lcd_send
         _lcd_write4bits
   _lcd_init
   _lcd_puts
     _lcd_send
       _lcd_write4bits
   _measure_capacitance
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _buffer_init
         _buffer_puts
           _buffer_putch
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _print_buffer
           _ser_putch
           _ser_puts
             _ser_putch
         _timer0_read_ps
     _format_double
       ___awtofl
         ___flpack
       ___fldiv
         ___flpack
       ___flge
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       ___flsub
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
       ___fltol
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       _buffer_putch
       _floor
         ___altofl
           ___flpack
           ___fltol (ARG)
             ___fldiv (ARG)
               ___flpack
             _log10 (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flge (ARG)
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
         _frexp (ARG)
       _log10
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
       _pow
         ___flge
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         ___fltol
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
         ___lltofl
           ___flpack
         _exp
           ___awtofl
             ___flpack
           ___fldiv
             ___flpack
           ___flge
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg
           ___flsub
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           ___fltol
             ___fldiv (ARG)
               ___flpack
             _log10 (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _floor
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 _log10 (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   _log
                     ___awtofl
                       ___flpack
                     ___fladd
                       ___awtofl (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     _eval_poly
                       ___fladd
                         ___awtofl (ARG)
                           ___flpack
                         ___flmul (ARG)
                           ___awtofl (ARG)
                             ___flpack
                           ___fldiv (ARG)
                             ___flpack
                           ___flpack (ARG)
                           _frexp (ARG)
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flmul
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                     _frexp
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flge (ARG)
             ___fltol (ARG)
               ___fldiv (ARG)
                 ___flpack
               _log10 (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _log
                   ___awtofl
                     ___flpack
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___fladd
                       ___awtofl (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                   _frexp
             _frexp (ARG)
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
           _log (ARG)
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     _format_xint32
       _buffer_putch
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _measure_freq
       _buffer_init
       _buffer_puts
         _buffer_putch
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _print_buffer
         _ser_putch
         _ser_puts
           _ser_putch
       _timer0_read_ps
     _print_reading
       ___lwdiv
       ___lwmod
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _lcd_puts
         _lcd_send
           _lcd_write4bits
     _print_unit
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _ser_puts
         _ser_putch
     _put_str
       _output_putch
         _lcd_send
           _lcd_write4bits
         _ser_putch
     _ser_putch
     _ser_puts
       _ser_putch
   _measure_inductance
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _buffer_init
         _buffer_puts
           _buffer_putch
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _print_buffer
           _ser_putch
           _ser_puts
             _ser_putch
         _timer0_read_ps
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _measure_freq
       _buffer_init
       _buffer_puts
         _buffer_putch
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _print_buffer
         _ser_putch
         _ser_puts
           _ser_putch
       _timer0_read_ps
     _print_reading
       ___lwdiv
       ___lwmod
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _lcd_puts
         _lcd_send
           _lcd_write4bits
     _print_unit
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _ser_puts
         _ser_putch
     _put_str
       _output_putch
         _lcd_send
           _lcd_write4bits
         _ser_putch
   _print_indicator
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_puts
       _lcd_send
         _lcd_write4bits
   _ser_init
   _ser_puts
     _ser_putch
   _timer0_init
   _timer2_init

 _global_int (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0      11        0.0%
BITBANK4           100      0       0       8        0.0%
BANK4              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     13      34       7       20.3%
BIGRAM_1           100      0       0      10        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     53      90       5       90.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     59      5C       1       96.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     120       3        0.0%
DATA                 0      0     120      12        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sat Dec 28 06:39:49 2019

                ___altofl@sign 0072                   ___fldiv@cntr 001A                   ___fldiv@sign 001C  
                           _F1 00DF                             _F2 00C3                             _F3 00C7  
                  __CFG_BOR$ON 000000                   __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000  
                 ___flpack@arg 0004                   ___flpack@exp 0008                            l327 2754  
                          l329 2758                            l186 2458                            l805 1E0E  
                          l806 1E16                            l814 166E                            l818 1696  
                          l829 172E                            l854 242E                            l863 12F6  
                          l793 1D9E                            l892 1A20                            l798 1DE2  
                          l895 1AD8                            _GIE 007F97                   __CFG_CPB$OFF 000000  
               lcd_begin@lines 000A                            _RX9 007D5E                            _TX9 007D66  
                          _exp 0F48                            _log 17B4                            _pow 132E  
                 __CFG_BORV$21 000000                            wreg 000FE8                   __CFG_FOSC$HS 000000  
           timer0_read_ps@prev 0008                   ___flmul@sign 0033                   __CFG_LVP$OFF 000000  
       __end_of_lcd_write4bits 282E                  ___flpack@sign 0009                   ___fltol@exp1 006D  
                 __CFG_WDT$OFF 000000                           l1119 24D8                           l1129 25A2  
                         l1161 14AE                           l4002 20BE                           l1187 1154  
                         l4020 2852                           l4030 2388                           l4014 1E7E  
                         l4006 20CA                           l4110 0F98                           l3230 21B8  
                         l4024 2860                           l4016 1EF2                           l4120 0FFC  
                         l4104 0F64                           l3240 21D2                           l3232 21BE  
                         l4202 2718                           l4050 17D6                           l4114 0FCA  
                         l4070 24B4                           l4206 272C                           l4302 268E  
                         l4046 17C2                           l4150 265A                           l3270 221E  
                         l3262 220C                           l3254 21F4                           l3246 21E0  
                         l3238 21CC                           l4136 1120                           l4312 14F2  
                         l3256 21FA                           l3248 21E6                           l4066 24A8  
                         l4090 2586                           l4146 260A                           l4226 2474  
                         l4306 26A4                           l4250 137C                           l4330 1628  
                         l4154 2672                           l4068 24B0                           l4172 1FEA  
                         l4404 1CCE                           l4260 1406                           l4244 1362  
                         l3268 2218                           l4078 24CE                           l4094 2598  
                         l4086 257A                           l4182 2026                           l4166 1FCA  
                         l4430 1D54                           l4422 1D1C                           l4280 2880  
                         l4088 2582                           l4184 202C                           l3712 16A8  
                         l4256 13DC                           l4328 1620                           l4186 2040  
                         l3706 1680                           l3810 2418                           l4276 2872  
                         l3732 16E2                           l4620 0A7E                           l4700 19D0  
                         l3654 1DA8                           l3750 1744                           l3734 16EE  
                         l3726 16C2                           l3910 1A2A                           l4534 0C76  
                         l4390 28A4                           l4702 19D4                           l3664 1DF8  
                         l3656 1DB4                           l3744 171C                           l3736 16F6  
                         l3816 244A                           l4552 0E70                           l4560 0EDE  
                         l4616 0A46                           l4624 0AB4                           l3666 1E04  
                         l3658 1DCC                           l3762 1786                           l3754 175A  
                         l3746 1728                           l3738 16FC                           l3770 117A  
                         l3842 2110                           l3914 1A46                           l4626 0ABA  
                         l4396 1CC0                           l3828 2244                           l3940 1F50  
                         l3924 1F1E                           l3844 211A                           l4556 0EA8  
                         l4478 1C96                           l3774 118E                           l3870 217C  
                         l3862 2164                           l4582 0668                           l3928 1F32  
                         l3960 2538                           l3696 24FC                           l4680 199A  
                         l3882 28B4                           l3890 27EA                           l3970 25BC  
                         l3874 2190                           l3866 216C                           l3858 2154  
                         l3884 28B6                           l3948 1F7E                           l3868 2178  
                         ?_exp 007D                           ?_log 0050                           l3992 20A6  
                         l4696 19C4                           l3978 283C                           l3986 2076  
                         ?_pow 0088                           STR_2 05F2                           STR_3 05F8  
                         STR_4 05F5                           STR_5 05E6                           STR_6 05EF  
                         STR_7 05E9                           STR_8 05EC                           STR_9 05E3  
                         _BRGH 007D62                           _CREN 007D5C                           u3100 2138  
                         _LATB 000F8A                           _LATC 000F8B                           u3200 1A34  
                         u3105 212E                           _CCal 00E3                           u2420 26DC  
                         u4007 1B24                           u4017 1B32                           u4107 2826  
                         u4027 1B40                           u4037 1B4E                           u2438 26DE  
                         u4047 1B5C                           _PIE1 000F9D                           u4057 1B6A  
                         u4067 1B78                           u4077 1B86                           u4087 28D2  
                         u4097 281C                           u3650 13D2                           _PEIE 007F96  
                         u3907 1CD4                           _RCIF 007CF5                           u3917 1CF2  
                         u3927 1D04                           u3937 1D10                           _PIR1 000F9E  
                         u3947 1D2A                           u3957 1D42                           u3967 1D76  
                         u3977 1AF4                           u3987 1B08                           u3997 1B16  
                         _TMR0 000FD6                           _TMR2 000FCC                           _SPEN 007D5F  
                         _TXIE 007CEC                           _TXIF 007CF4                           _TXEN 007D65  
                         _SYNC 007D64                   __CFG_PWRT$ON 000000                           _bres 00E7  
                         _main 18D8                           _mode 00EF                           fsr2h 000FDA  
                         fsr1l 000FE1                           indf2 000FDF                           fsr2l 000FD9  
                         exp@x 007D                           log@x 0050          __size_of_output_putch 0014  
                         pow@x 0088                           pow@y 008C                           prodh 000FF4  
                         prodl 000FF3     __end_of_measure_inductance 0B1E                           start 00BE  
          timer0_read_ps@count 0009                 ??_buffer_putch 0004              _format_number$199 0031  
                 ___param_bank 000010                _timer0_init$154 0004                _timer0_init$155 0006  
              _timer0_init$156 0008                _timer0_init$157 000A                _timer0_init$158 000C  
                 buffer_puts@x 0007            lcd_write4bits@value 0004                   lcd_send@mode 0005  
                        ??_exp 005A                          ??_log 0054                          ??_pow 005A  
                ___fltol@sign1 006C                __end_of___fladd 17B4                          ?_main 0001  
              __end_of___fldiv 1FBA                __end_of___flneg 284E                          STR_10 05B2  
                        STR_11 05DF                          STR_12 05B4                          STR_13 05E3  
                        STR_21 05DA                          STR_30 05B8                          STR_14 059F  
                        STR_31 05BE                          STR_23 0589                          STR_15 054D  
                        STR_24 05E3                          STR_32 05C4                          STR_16 055D  
                        STR_17 05E3                          STR_33 05A9                          STR_25 056D  
                        STR_34 05E3                          STR_26 05E3                          STR_18 05B1  
                        STR_35 05D0                          STR_27 05CA                          STR_36 05E3  
                        STR_28 0595                          STR_29 05D5                          STR_37 057C  
              __end_of___flmul 132E                __end_of___flsub 256E                __end_of___fltol 21A2  
                        _T0CON 000FD5                          _T2CON 000FCA                __end_of___lwdiv 24E2  
              __end_of___lwmod 25AC                          i2l460 0092                          i2l464 00B4  
                        _RCREG 000FAE               lcd_begin@dotsize 0008                          _SPBRG 000FAF  
                        _PORTC 000F82                          _TRISA 000F92                          _TRISB 000F93  
                        _TRISC 000F94                          _TXREG 000FAD                  __CFG_WRT0$OFF 000000  
                __CFG_WRT1$OFF 000000                 __CFG_EBTR0$OFF 000000                 __CFG_EBTR1$OFF 000000  
                ___awtofl@sign 0012                   main@new_mode 00B2                  __CFG_WRTB$OFF 000000  
                __CFG_WRTC$OFF 000000                 __CFG_EBTRB$OFF 000000                          _log10 230C  
                        _blink 00D7                          _floor 19EE                          _ldexp 2062  
                        _frexp 2224                   _output_putch 28DE                ?_lcd_write4bits 0001  
                        _msecs 00CB                          tablat 000FF5                          pow@yi 0099  
              format_number@di 0034                          status 000FD8                __end_of_put_str 26B8  
              ??_print_reading 0038                  print_buffer@i 0007                    exp@exponent 0085  
                  ldexp@newexp 0054                __initialization 23B6                    log@exponent 0054  
                 __end_of_main 19EE               format_double@num 009D                  lcd_gotoxy@col 0009  
                lcd_gotoxy@row 0008                  ?_measure_freq 0036         __size_of_format_double 018C  
                       ??_main 005A                  lcd_send@value 0006            format_double@weight 00A9  
                __activetblptr 000001         __size_of_format_number 00A8         __size_of_format_xint32 0036  
          lcd_init@fourbitmode 0004                         ?_log10 0056                         ?_floor 0073  
                       ?_ldexp 0050                         ?_frexp 0004               __end_of___altofl 252A  
             __end_of___flpack 1E56               __end_of___awtofl 25E6               __end_of___lltofl 2714  
                       i2l3546 006A                         i2l3548 006C                         _INTCON 000FF2  
             __end_of___lwtofl 27C2                 __CFG_XINST$OFF 000000               __end_of_lcd_init 276E  
         __size_of_lcd_command 000E               __end_of_lcd_send 28C6                         ___flge 2402  
             __end_of_lcd_puts 2686                      ??___fladd 0040                      ??___fldiv 0016  
                    ??___flneg 0008                      ??___flmul 0025                      ??___flsub 004C  
                    ??___fltol 0068                   ?_timer0_init 0001           __size_of_buffer_init 000C  
               ??_measure_freq 0038                      ??___lwdiv 0008                   ?_timer2_init 0001  
                    ??___lwmod 0008                         _buffer 0110           __size_of_buffer_puts 0020  
                       clear_0 23BC                         clear_1 23C8                         log10@x 0056  
                       _rxfifo 0100                         _txfifo 00B3                         _rxiptr 00DC  
                       _rxoptr 00DD                         floor@i 0077                         _txiptr 005B  
                       floor@x 0073                         _txoptr 005C               __end_of_ser_init 27E8  
             __end_of_ser_puts 286E             timer2_init@ps_mode 0007                   __mediumconst 0000  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
         __end_of_buffer_putch 23B6               format_number@buf 0011               format_number@pad 000E  
      _measure_inductance$1130 007E        _measure_inductance$1131 0082        _measure_inductance$1125 0076  
      _measure_inductance$1126 0087        _measure_inductance$1127 008B        _measure_inductance$1128 008F  
      _measure_inductance$1129 007A                      ??_put_str 0008                     ___fladd@f1 0038  
                   ___fladd@f2 003C                     ___flge@ff1 0004                     ___flge@ff2 0008  
             __end_ofexp@coeff 0529                  _format_double 14C0               __end_oflog@coeff 054D  
                   ___altofl@c 006E                     ___fldiv@f1 000E                     ___fldiv@f2 0012  
                   ___fldiv@f3 0016                     __accesstop 0060        __end_of__initialization 23F4  
                   ___flneg@f1 0004                  _format_number 1FBA                  _format_xint32 261E  
                   ___flmul@f1 001D                     ___flmul@f2 0021                   eval_poly@res 004C  
                ___rparam_used 000001                     ___flsub@f1 0044                     ___flsub@f2 0048  
                   ___fltol@f1 0064                     ___awtofl@c 000E         measure_capacitance@Cin 0130  
 __size_of_measure_capacitance 042A         measure_capacitance@var 012E          lcd_gotoxy@row_offsets 000A  
               __pcstackCOMRAM 0001             __size_of_calibrate 00E4                   __pidataBANK0 290C  
                   ___lltofl@c 000E             __size_of_delay10ms 0002                  __end_of_log10 2366  
                __end_of_floor 1AEA                  __end_of_ldexp 2104                  __end_of_frexp 229C  
                   ___lwtofl@c 003B                 buffer_putch@ch 0006             __size_of_lcd_begin 00DA  
           __size_of_lcd_clear 0018                        ??_log10 005A                        ??_floor 005A  
                      ??_ldexp 0056                        ??_frexp 0009                     _log10$1132 0060  
                   __pbssBANK0 00B3                     __pbssBANK1 0100                 ?_format_double 009D  
           __size_of_eval_poly 00B4                 ?_format_number 000B                 ?_format_xint32 0036  
               print_unit@unit 0001       __size_of_print_indicator 001C                        ?___flge 0004  
                    ?___altofl 006E        __size_of_timer0_read_ps 004A                      ?___flpack 0004  
                    ?___awtofl 000E                      ?___lltofl 000E             _measure_inductance 05FC  
           __size_of_ser_putch 0024                      ?___lwtofl 003B               ??_lcd_write4bits 0004  
                      _INTCON2 000FF1                     _lcd_gotoxy 25E6            ?_measure_inductance 0001  
            __end_of_calibrate 1CB6                      ?_lcd_init 0001                      ?_lcd_send 0005  
            __end_of_delay10ms 2914                      ?_lcd_puts 0001           __end_of_measure_freq 1BD2  
                   _global_int 0008                     calibrate@i 003F                        __Hparam 0000  
                      __Lparam 0000                      ?_ser_init 0001           ??_measure_inductance 005A  
            __end_of_lcd_begin 1D90                      ?_ser_puts 0001              __end_of_lcd_clear 28DE  
              __size_of___flge 004C                        ___fladd 164C                        ___fldiv 1F0A  
                      ___flneg 282E                        ___flmul 1166                        ___flsub 252A  
                      ___fltol 2104                        ___lwdiv 2498                        ___lwmod 256E  
                 __psmallconst 0500                     ??___altofl 005A                __CFG_STVREN$OFF 000000  
                   ??___flpack 000A                        __pcinit 23B6                     ??___awtofl 0012  
            __end_of_eval_poly 1F0A                        __ramtop 0500           __size_of_timer0_init 0082  
                   ??___lltofl 0012                        __ptext0 18D8                        __ptext1 26B8  
                      __ptext2 21A2                        __ptext3 27C2                        __ptext4 288E  
                      __ptext5 05FC                        __ptext6 0B1E                        __ptext7 276E  
                      __ptext8 229C                        __ptext9 2654           __size_of_timer2_init 002E  
        __size_of_buffer_putch 0050                     ??___lwtofl 003F                   __size_of_exp 021E  
                 __size_of_log 0124                   __size_of_pow 0192                        _seconds 00CF  
                      _ser_tmp 00DE                ??_format_double 005A                        _put_str 2686  
                   ??_lcd_init 0004                     ??_lcd_send 0006                     ??_lcd_puts 0007  
         end_of_initialization 23F4                ??_format_number 000F                ??_format_xint32 003A  
                      exp@sign 0087                      _LCD_lines 00DA                   _lcd_init$263 0005  
               lcd_puts@string 0009              __end_of_ser_putch 280C                        pow@sign 0098  
measure_inductance@denominator 0072          __end_of_print_reading 230C                     ??_ser_init 0004  
                   ??_ser_puts 0005                   _buffer_putch 2366              format_number@base 000D  
                      postdec1 000FE5                        postdec2 000FDD                        postinc0 000FEE  
                      postinc2 000FDE              ??_print_indicator 000E                     _print_unit 276E  
                ?_print_buffer 0001            _measure_capacitance 0B1E                    ?_lcd_gotoxy 0008  
                  ___fldiv@exp 001B                    ?_global_int 0001                    ___flmul@exp 0032  
                ??_lcd_command 0007                  ??_buffer_init 0004           ?_measure_capacitance 0001  
                ??_buffer_puts 0007        measure_capacitance@unit 012D                 format_double@m 00AF  
       measure_inductance@unit 0086                 __end_of___flge 244E                 _timer0_read_ps 244E  
              lcd_gotoxy@F3583 00EB                     floor@expon 007B                 ??_print_buffer 0006  
               format_number@i 0035                 format_number@n 000B                 format_xint32@x 0036  
          start_initialization 23B6                     eval_poly@d 0048                     eval_poly@n 0049  
                   eval_poly@x 0044          __size_of_measure_freq 00E8                     ldexp@value 0050  
                  __end_of_exp 1166                    __end_of_log 18D8                    __end_of_pow 14C0  
                 _LCD_function 005A             format_double@digit 00AD                     frexp@value 0004  
        ??_measure_capacitance 005A         __end_of_timer0_read_ps 2498                       ??___flge 000C  
          __size_of_lcd_gotoxy 0038            __end_of_lcd_command 2900                    __pdataBANK0 00EB  
                 _measure_freq 1AEA            __end_of_buffer_init 290C            __end_of_buffer_puts 288E  
          __size_of_global_int 00B6       print_reading@measurement 0036              __size_of___altofl 0048  
            __size_of___flpack 00C6              __size_of___awtofl 003A                    ?_print_unit 0001  
            __size_of___lltofl 002E                    __pbssCOMRAM 005A              __size_of___lwtofl 002A  
                __pcstackBANK0 0060                  __pcstackBANK1 0121                  ?_output_putch 0001  
            measure_freq@count 0039               lcd_command@value 0007              __size_of_lcd_init 002C  
            __size_of_lcd_send 001C                      _calibrate 1BD2              __size_of_lcd_puts 0032  
                    _delay10ms 2912                      __pnvBANK0 00E3               ___lwdiv@dividend 0004  
              ?_timer0_read_ps 0004                      __pintcode 0008                       ?___fladd 0038  
                     ?___fldiv 000E                       ?___flneg 0004                       ?___flmul 001D  
                     ?___flsub 0044                       ?___fltol 0064              __size_of_ser_init 0026  
                     ?___lwdiv 0004                       ?___lwmod 0004              __size_of_ser_puts 0020  
                    _lcd_begin 1CB6                      _lcd_clear 28C6                    __smallconst 0500  
                    _eval_poly 1E56                  output_putch@c 0007                 ??_output_putch 0007  
             ___lwdiv@quotient 0009                 __size_of_log10 005A                       ?_put_str 0001  
               __size_of_floor 00FC                 __size_of_ldexp 00A2                 __size_of_frexp 0078  
                   ?_calibrate 0001                     ser_putch@c 0004                     ?_delay10ms 0001  
                     _LCD_ctrl 00D9                       _LCD_mode 00DB                _print_indicator 288E  
                  _lcd_command 28F2           __end_of_print_buffer 2742            __size_of_print_unit 002A  
                     i2u260_40 0040                       i2u261_48 0042                    _buffer_init 2900  
                    _ser_putch 27E8                    _buffer_puts 286E    __size_of_measure_inductance 0522  
                ??_timer0_init 0004                  ??_timer2_init 0004                     ?_lcd_begin 0008  
                   ?_lcd_clear 0001                     ?_eval_poly 0044                      lcd_puts@i 0008  
                 ??_lcd_gotoxy 0009          measure_inductance@Lin 0095          measure_inductance@var 0093  
                    copy_data0 23E8          __end_of_format_double 164C                   ??_global_int 0001  
         format_number@padchar 0033        __size_of_lcd_write4bits 0022          __end_of_format_number 2062  
        __end_of_format_xint32 2654                      frexp@eptr 0008                       __Hrparam 0000  
                     __Lrparam 0000                     ?_ser_putch 0001                   __Lsmallconst 0500  
           __end_of_lcd_gotoxy 261E               __size_of___fladd 0168               __size_of___fldiv 00B0  
             __size_of___flneg 0020               __size_of___flmul 01C8               __size_of___flsub 0044  
             __size_of___fltol 009E                       ___altofl 24E2                       ___flpack 1D90  
             __size_of___lwdiv 004A               __size_of___lwmod 003E                       ___awtofl 25AC  
                     ___lltofl 26E6                  timer2_init@ps 0005                       ___lwtofl 2798  
           __end_of_global_int 00BE            __end_of_timer0_init 2224                       _exp$1135 0081  
          __end_of_timer2_init 26E6                       _main$354 00B1                ___lwdiv@divisor 0006  
              ___lwdiv@counter 0008         __size_of_print_reading 0070           timer0_init@prescaler 000E  
                     __ptext10 261E                       __ptext11 14C0                       __ptext20 282E  
                     __ptext12 132E                       __ptext21 1F0A                       __ptext13 0F48  
                     __ptext30 2742                       __ptext22 26E6                       __ptext14 2062  
                     __ptext31 1CB6                       __ptext23 230C                       __ptext15 19EE  
                     __ptext40 25E6                       __ptext32 1BD2                       __ptext24 17B4  
                     __ptext16 2104                       __ptext41 1FBA                       __ptext33 2686  
                     __ptext25 2224                       __ptext17 2402                       __ptext50 280C  
                     __ptext42 256E                       __ptext34 28DE                       __ptext26 1E56  
                     __ptext18 24E2                       __ptext51 2912                       __ptext43 2498  
                     __ptext35 1AEA                       __ptext27 1166                       __ptext19 252A  
                     __ptext52 2798                       __ptext44 286E                       __ptext36 244E  
                     __ptext28 164C                       __ptext53 1D90                       __ptext45 2366  
                     __ptext37 2714                       __ptext29 25AC                       __ptext46 2900  
                     __ptext38 284E                       __ptext47 28C6                       __ptext39 27E8  
                     __ptext48 28F2                       __ptext49 28AA                       _lcd_init 2742  
                     _lcd_send 28AA        __end_of_print_indicator 28AA                       _pow$1133 0090  
                     _pow$1134 0094                       _lcd_puts 2654               __size_of_put_str 0032  
                  ??_calibrate 003F                  __size_of_main 0116                    ??_delay10ms 0004  
                    ser_puts@s 0005                       _msecpart 00E9                       _ser_init 27C2  
                     _ser_puts 284E                       _timer1of 00D3           __end_of_output_putch 28F2  
                  ??_lcd_begin 0009                    ??_lcd_clear 0008                       exp@coeff 0501  
        ___flmul@f3_as_product 0034                       log@coeff 0529    measure_inductance@numerator 006E  
                 ??_print_unit 000E                    ??_eval_poly 004B             _print_reading$1116 0038  
           _print_reading$1117 003A                       intlevel2 0000    __end_of_measure_capacitance 0F48  
        __size_of_print_buffer 002E               ___lwmod@dividend 0004               ??_timer0_read_ps 0006  
                  ??_ser_putch 0004             __end_of_print_unit 2798                  _print_reading 229C  
         delay10ms@period_10ms 0001                    _timer0_init 21A2                    _timer2_init 26B8  
           _format_double$1120 00A1             _format_double$1121 00A5       _measure_capacitance$1122 0121  
     _measure_capacitance$1123 0125       _measure_capacitance$1124 0129                       put_str@i 0009  
                     put_str@s 000B             timer0_init@ps_mode 000F                ___lwmod@divisor 0006  
              ___lwmod@counter 0008                   _print_buffer 2714        print_indicator@indicate 000E  
             ?_print_indicator 0001                 _lcd_write4bits 280C                   ___fladd@exp1 0043  
                 ___fladd@exp2 0042                   ___fladd@sign 0041                   ?_lcd_command 0001  
               ?_print_reading 0036                   ?_buffer_init 0001                   ?_buffer_puts 0001  
                ?_buffer_putch 0001  
