

Microchip Technology PIC18 PRO Macro Assembler V1.34 build -361300703 
                                                                                               Sat Dec 28 06:59:53 2019

Microchip Technology Omniscient Code Generator (PRO mode) build 201502162209
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    65                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    66                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    67  0000                     
    68                           	psect	idataBANK0
    69  002784                     __pidataBANK0:
    70                           	opt stack 0
    71                           
    72                           ;initializer for lcd_gotoxy@F7646
    73  002784  00                 	db	0
    74  002785  40                 	db	64
    75  002786  14                 	db	20
    76  002787  54                 	db	84
    77                           
    78                           ;initializer for _mode
    79  002788  FF                 	db	255
    80                           
    81                           	psect	smallconst
    82  000600                     __psmallconst:
    83                           	opt stack 0
    84  000600  00                 	db	0
    85  000601                     exp@coeff:
    86                           	opt stack 0
    87  000601  0000               	dw	0
    88  000603  3F80               	dw	16256
    89  000605  7218               	dw	29208
    90  000607  3F31               	dw	16177
    91  000609  FDF0               	dw	65008
    92  00060B  3E75               	dw	15989
    93  00060D  5847               	dw	22599
    94  00060F  3D63               	dw	15715
    95  000611  9558               	dw	38232
    96  000613  3C1D               	dw	15389
    97  000615  C482               	dw	50306
    98  000617  3AAE               	dw	15022
    99  000619  78A8               	dw	30888
   100  00061B  3921               	dw	14625
   101  00061D  93EF               	dw	37871
   102  00061F  3780               	dw	14208
   103  000621  92A0               	dw	37536
   104  000623  35A7               	dw	13735
   105  000625  5646               	dw	22086
   106  000627  3415               	dw	13333
   107  000629                     __end_ofexp@coeff:
   108                           	opt stack 0
   109  000629                     log@coeff:
   110                           	opt stack 0
   111  000629  0000               	dw	0
   112  00062B  0000               	dw	0
   113  00062D  FFC4               	dw	65476
   114  00062F  3F7F               	dw	16255
   115  000631  EF80               	dw	61312
   116  000633  BEFF               	dw	48895
   117  000635  E190               	dw	57744
   118  000637  3EA9               	dw	16041
   119  000639  82EC               	dw	33516
   120  00063B  BE76               	dw	48758
   121  00063D  AD82               	dw	44418
   122  00063F  3E2B               	dw	15915
   123  000641  3C0E               	dw	15374
   124  000643  BDC3               	dw	48579
   125  000645  D187               	dw	53639
   126  000647  3D13               	dw	15635
   127  000649  7841               	dw	30785
   128  00064B  BBD3               	dw	48083
   129  00064D                     __end_oflog@coeff:
   130                           	opt stack 0
   131  00064D                     STR_18:
   132  00064D  70                 	db	112	;'p'
   133  00064E  6C                 	db	108	;'l'
   134  00064F  65                 	db	101	;'e'
   135  000650  61                 	db	97	;'a'
   136  000651  73                 	db	115	;'s'
   137  000652  65                 	db	101	;'e'
   138  000653  20                 	db	32
   139  000654  77                 	db	119	;'w'
   140  000655  61                 	db	97	;'a'
   141  000656  69                 	db	105	;'i'
   142  000657  74                 	db	116	;'t'
   143  000658  2E                 	db	46
   144  000659  2E                 	db	46
   145  00065A  2E                 	db	46
   146  00065B  00                 	db	0
   147  00065C                     STR_21:
   148  00065C  49                 	db	73	;'I'
   149  00065D  6E                 	db	110	;'n'
   150  00065E  64                 	db	100	;'d'
   151  00065F  75                 	db	117	;'u'
   152  000660  63                 	db	99	;'c'
   153  000661  74                 	db	116	;'t'
   154  000662  69                 	db	105	;'i'
   155  000663  76                 	db	118	;'v'
   156  000664  69                 	db	105	;'i'
   157  000665  74                 	db	116	;'t'
   158  000666  79                 	db	121	;'y'
   159  000667  20                 	db	32
   160  000668  00                 	db	0
   161  000669                     STR_17:
   162  000669  43                 	db	67	;'C'
   163  00066A  61                 	db	97	;'a'
   164  00066B  6C                 	db	108	;'l'
   165  00066C  69                 	db	105	;'i'
   166  00066D  62                 	db	98	;'b'
   167  00066E  72                 	db	114	;'r'
   168  00066F  61                 	db	97	;'a'
   169  000670  74                 	db	116	;'t'
   170  000671  69                 	db	105	;'i'
   171  000672  6E                 	db	110	;'n'
   172  000673  67                 	db	103	;'g'
   173  000674  00                 	db	0
   174  000675                     STR_20:
   175  000675  43                 	db	67	;'C'
   176  000676  61                 	db	97	;'a'
   177  000677  70                 	db	112	;'p'
   178  000678  61                 	db	97	;'a'
   179  000679  63                 	db	99	;'c'
   180  00067A  69                 	db	105	;'i'
   181  00067B  74                 	db	116	;'t'
   182  00067C  79                 	db	121	;'y'
   183  00067D  20                 	db	32
   184  00067E  00                 	db	0
   185  00067F                     STR_12:
   186  00067F  4C                 	db	76	;'L'
   187  000680  43                 	db	67	;'C'
   188  000681  2D                 	db	45
   189  000682  6D                 	db	109	;'m'
   190  000683  65                 	db	101	;'e'
   191  000684  74                 	db	116	;'t'
   192  000685  65                 	db	101	;'e'
   193  000686  72                 	db	114	;'r'
   194  000687  20                 	db	32
   195  000688  00                 	db	0
   196  000689                     STR_13:
   197  000689  20                 	db	32
   198  00068A  20                 	db	32
   199  00068B  20                 	db	32
   200  00068C  20                 	db	32
   201  00068D  20                 	db	32
   202  00068E  20                 	db	32
   203  00068F  00                 	db	0
   204  000690                     STR_19:
   205  000690  46                 	db	70	;'F'
   206  000691  72                 	db	114	;'r'
   207  000692  65                 	db	101	;'e'
   208  000693  71                 	db	113	;'q'
   209  000694  3D                 	db	61	;'='
   210  000695  00                 	db	0
   211  000696  52                 	db	82	;'R'
   212  000697  43                 	db	67	;'C'
   213  000698  34                 	db	52	;'4'
   214  000699  3D                 	db	61	;'='
   215  00069A  00                 	db	0
   216  00069B                     STR_10:
   217  00069B  2D                 	db	45
   218  00069C  2A                 	db	42
   219  00069D  2D                 	db	45
   220  00069E  00                 	db	0
   221  00069F  6D                 	db	109	;'m'
   222  0006A0  46                 	db	70	;'F'
   223  0006A1  00                 	db	0
   224  0006A2  6E                 	db	110	;'n'
   225  0006A3  46                 	db	70	;'F'
   226  0006A4  00                 	db	0
   227  0006A5  70                 	db	112	;'p'
   228  0006A6  46                 	db	70	;'F'
   229  0006A7  00                 	db	0
   230  0006A8  75                 	db	117	;'u'
   231  0006A9  46                 	db	70	;'F'
   232  0006AA  00                 	db	0
   233  0006AB                     STR_2:
   234  0006AB  6D                 	db	109	;'m'
   235  0006AC  48                 	db	72	;'H'
   236  0006AD  00                 	db	0
   237  0006AE  6E                 	db	110	;'n'
   238  0006AF  48                 	db	72	;'H'
   239  0006B0  00                 	db	0
   240  0006B1  75                 	db	117	;'u'
   241  0006B2  48                 	db	72	;'H'
   242  0006B3  00                 	db	0
   243  0000                     
   244                           ; #config settings
   245  0006B4  00                 	db	0	; dummy byte at the end
   246  0000                     
   247                           	psect	nvBANK0
   248  0000DA                     __pnvBANK0:
   249                           	opt stack 0
   250  0000DA                     _CCal:
   251                           	opt stack 0
   252  0000DA                     	ds	4
   253  0000DE                     _bres:
   254                           	opt stack 0
   255  0000DE                     	ds	2
   256  0000E0                     _msecpart:
   257                           	opt stack 0
   258  0000E0                     	ds	2
   259  0000                     _TMR0	set	4054
   260  0000                     _INTCON	set	4082
   261  0000                     _INTCON2	set	4081
   262  0000                     _LATB	set	3978
   263  0000                     _LATC	set	3979
   264  0000                     _PIE1	set	3997
   265  0000                     _PIR1	set	3998
   266  0000                     _PORTC	set	3970
   267  0000                     _T0CON	set	4053
   268  0000                     _T2CON	set	4026
   269  0000                     _TMR2	set	4028
   270  0000                     _TRISA	set	3986
   271  0000                     _TRISB	set	3987
   272  0000                     _TRISC	set	3988
   273                           
   274                           	psect	cinit
   275  0024C2                     __pcinit:
   276                           	opt stack 0
   277  0024C2                     start_initialization:
   278                           	opt stack 0
   279  0024C2                     __initialization:
   280                           	opt stack 0
   281                           
   282                           ; Clear objects allocated to BANK0 (46 bytes)
   283  0024C2  EE00  F0AC         	lfsr	0,__pbssBANK0
   284  0024C6  0E2E               	movlw	46
   285  0024C8                     clear_0:
   286  0024C8  6AEE               	clrf	postinc0,c
   287  0024CA  06E8               	decf	wreg,f,c
   288  0024CC  E1FD               	bnz	clear_0
   289                           
   290                           ; Clear objects allocated to COMRAM (1 bytes)
   291  0024CE  6A5E               	clrf	__pbssCOMRAM& (0+255),c
   292                           
   293                           ; Initialize objects allocated to BANK0 (5 bytes)
   294                           ; load TBLPTR registers with __pidataBANK0
   295  0024D0  0E84               	movlw	low __pidataBANK0
   296  0024D2  6EF6               	movwf	tblptrl,c
   297  0024D4  0E27               	movlw	high __pidataBANK0
   298  0024D6  6EF7               	movwf	tblptrh,c
   299  0024D8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   300  0024DA  6EF8               	movwf	tblptru,c
   301  0024DC  EE00  F0E2         	lfsr	0,__pdataBANK0
   302  0024E0  EE10 F005          	lfsr	1,5
   303  0024E4                     copy_data0:
   304  0024E4  0009               	tblrd		*+
   305  0024E6  CFF5 FFEE          	movff	tablat,postinc0
   306  0024EA  50E5               	movf	postdec1,w,c
   307  0024EC  50E1               	movf	fsr1l,w,c
   308  0024EE  E1FA               	bnz	copy_data0
   309  0024F0                     end_of_initialization:
   310                           	opt stack 0
   311  0024F0                     __end_of__initialization:
   312                           	opt stack 0
   313  0024F0  0E00               	movlw	low (__Lsmallconst shr (0+16))
   314  0024F2  6EF8               	movwf	tblptru,c
   315  0024F4  0E06               	movlw	high __Lsmallconst
   316  0024F6  6EF7               	movwf	tblptrh,c
   317  0024F8  0100               	movlb	0
   318  0024FA  EFB2  F00C         	goto	_main	;jump to C main() function
   319                           tblptru	equ	0xFF8
   320                           tblptrh	equ	0xFF7
   321                           tblptrl	equ	0xFF6
   322                           tablat	equ	0xFF5
   323                           postinc0	equ	0xFEE
   324                           wreg	equ	0xFE8
   325                           postdec1	equ	0xFE5
   326                           fsr1l	equ	0xFE1
   327                           
   328                           	psect	bssCOMRAM
   329  00005E                     __pbssCOMRAM:
   330                           	opt stack 0
   331  00005E                     _LCD_function:
   332                           	opt stack 0
   333  00005E                     	ds	1
   334                           tblptru	equ	0xFF8
   335                           tblptrh	equ	0xFF7
   336                           tblptrl	equ	0xFF6
   337                           tablat	equ	0xFF5
   338                           postinc0	equ	0xFEE
   339                           wreg	equ	0xFE8
   340                           postdec1	equ	0xFE5
   341                           fsr1l	equ	0xFE1
   342                           
   343                           	psect	bssBANK0
   344  0000AC                     __pbssBANK0:
   345                           	opt stack 0
   346  0000AC                     _F2:
   347                           	opt stack 0
   348  0000AC                     	ds	4
   349  0000B0                     _F3:
   350                           	opt stack 0
   351  0000B0                     	ds	4
   352  0000B4                     _msecs:
   353                           	opt stack 0
   354  0000B4                     	ds	4
   355  0000B8                     _seconds:
   356                           	opt stack 0
   357  0000B8                     	ds	4
   358  0000BC                     _timer1of:
   359                           	opt stack 0
   360  0000BC                     	ds	4
   361  0000C0                     _blink:
   362                           	opt stack 0
   363  0000C0                     	ds	2
   364  0000C2                     _LCD_ctrl:
   365                           	opt stack 0
   366  0000C2                     	ds	1
   367  0000C3                     _LCD_lines:
   368                           	opt stack 0
   369  0000C3                     	ds	1
   370  0000C4                     _LCD_mode:
   371                           	opt stack 0
   372  0000C4                     	ds	1
   373  0000C5                     _buffer:
   374                           	opt stack 0
   375  0000C5                     	ds	17
   376  0000D6                     _F1:
   377                           	opt stack 0
   378  0000D6                     	ds	4
   379                           tblptru	equ	0xFF8
   380                           tblptrh	equ	0xFF7
   381                           tblptrl	equ	0xFF6
   382                           tablat	equ	0xFF5
   383                           postinc0	equ	0xFEE
   384                           wreg	equ	0xFE8
   385                           postdec1	equ	0xFE5
   386                           fsr1l	equ	0xFE1
   387                           
   388                           	psect	dataBANK0
   389  0000E2                     __pdataBANK0:
   390                           	opt stack 0
   391  0000E2                     lcd_gotoxy@F7646:
   392                           	opt stack 0
   393  0000E2                     	ds	4
   394  0000E6                     _mode:
   395                           	opt stack 0
   396  0000E6                     	ds	1
   397                           tblptru	equ	0xFF8
   398                           tblptrh	equ	0xFF7
   399                           tblptrl	equ	0xFF6
   400                           tablat	equ	0xFF5
   401                           postinc0	equ	0xFEE
   402                           wreg	equ	0xFE8
   403                           postdec1	equ	0xFE5
   404                           fsr1l	equ	0xFE1
   405                           
   406                           	psect	cstackBANK0
   407  000060                     __pcstackBANK0:
   408                           	opt stack 0
   409  000060                     ?___fltol:
   410                           	opt stack 0
   411  000060                     ___fltol@f1:
   412                           	opt stack 0
   413                           
   414                           ; 4 bytes @ 0x0
   415  000060                     	ds	4
   416  000064                     ??___fltol:
   417                           
   418                           ; 0 bytes @ 0x4
   419  000064                     	ds	4
   420  000068                     ?___altofl:
   421                           	opt stack 0
   422  000068                     measure_inductance@numerator:
   423                           	opt stack 0
   424  000068                     ___altofl@c:
   425                           	opt stack 0
   426  000068                     _measure_capacitance$1020:
   427                           	opt stack 0
   428                           
   429                           ; 4 bytes @ 0x8
   430  000068                     	ds	4
   431  00006C                     ___altofl@sign:
   432                           	opt stack 0
   433  00006C                     measure_inductance@denominator:
   434                           	opt stack 0
   435  00006C                     _measure_capacitance$1021:
   436                           	opt stack 0
   437                           
   438                           ; 4 bytes @ 0xC
   439  00006C                     	ds	1
   440  00006D                     ?_floor:
   441                           	opt stack 0
   442  00006D                     floor@x:
   443                           	opt stack 0
   444                           
   445                           ; 4 bytes @ 0xD
   446  00006D                     	ds	3
   447  000070                     _measure_capacitance$1022:
   448                           	opt stack 0
   449  000070                     _measure_inductance$1023:
   450                           	opt stack 0
   451                           
   452                           ; 4 bytes @ 0x10
   453  000070                     	ds	1
   454  000071                     floor@i:
   455                           	opt stack 0
   456                           
   457                           ; 4 bytes @ 0x11
   458  000071                     	ds	3
   459  000074                     measure_capacitance@unit:
   460                           	opt stack 0
   461  000074                     _measure_inductance$1027:
   462                           	opt stack 0
   463                           
   464                           ; 4 bytes @ 0x14
   465  000074                     	ds	1
   466  000075                     measure_capacitance@var:
   467                           	opt stack 0
   468  000075                     floor@expon:
   469                           	opt stack 0
   470                           
   471                           ; 2 bytes @ 0x15
   472  000075                     	ds	2
   473  000077                     ?_exp:
   474                           	opt stack 0
   475  000077                     measure_capacitance@Cin:
   476                           	opt stack 0
   477  000077                     exp@x:
   478                           	opt stack 0
   479                           
   480                           ; 4 bytes @ 0x17
   481  000077                     	ds	1
   482  000078                     _measure_inductance$1028:
   483                           	opt stack 0
   484                           
   485                           ; 4 bytes @ 0x18
   486  000078                     	ds	3
   487  00007B                     _exp$1033:
   488                           	opt stack 0
   489                           
   490                           ; 4 bytes @ 0x1B
   491  00007B                     	ds	1
   492  00007C                     _measure_inductance$1029:
   493                           	opt stack 0
   494                           
   495                           ; 4 bytes @ 0x1C
   496  00007C                     	ds	3
   497  00007F                     exp@exponent:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x1F
   501  00007F                     	ds	1
   502  000080                     measure_inductance@unit:
   503                           	opt stack 0
   504                           
   505                           ; 1 bytes @ 0x20
   506  000080                     	ds	1
   507  000081                     exp@sign:
   508                           	opt stack 0
   509  000081                     _measure_inductance$1024:
   510                           	opt stack 0
   511                           
   512                           ; 4 bytes @ 0x21
   513  000081                     	ds	1
   514  000082                     ?_pow:
   515                           	opt stack 0
   516  000082                     pow@x:
   517                           	opt stack 0
   518                           
   519                           ; 4 bytes @ 0x22
   520  000082                     	ds	3
   521  000085                     _measure_inductance$1025:
   522                           	opt stack 0
   523                           
   524                           ; 4 bytes @ 0x25
   525  000085                     	ds	1
   526  000086                     pow@y:
   527                           	opt stack 0
   528                           
   529                           ; 4 bytes @ 0x26
   530  000086                     	ds	3
   531  000089                     _measure_inductance$1026:
   532                           	opt stack 0
   533                           
   534                           ; 4 bytes @ 0x29
   535  000089                     	ds	1
   536  00008A                     _pow$1031:
   537                           	opt stack 0
   538                           
   539                           ; 4 bytes @ 0x2A
   540  00008A                     	ds	3
   541  00008D                     measure_inductance@var:
   542                           	opt stack 0
   543                           
   544                           ; 2 bytes @ 0x2D
   545  00008D                     	ds	1
   546  00008E                     _pow$1032:
   547                           	opt stack 0
   548                           
   549                           ; 4 bytes @ 0x2E
   550  00008E                     	ds	1
   551  00008F                     measure_inductance@Lin:
   552                           	opt stack 0
   553                           
   554                           ; 4 bytes @ 0x2F
   555  00008F                     	ds	3
   556  000092                     pow@sign:
   557                           	opt stack 0
   558                           
   559                           ; 1 bytes @ 0x32
   560  000092                     	ds	1
   561  000093                     pow@yi:
   562                           	opt stack 0
   563                           
   564                           ; 4 bytes @ 0x33
   565  000093                     	ds	4
   566  000097                     format_double@num:
   567                           	opt stack 0
   568                           
   569                           ; 4 bytes @ 0x37
   570  000097                     	ds	4
   571  00009B                     _format_double$1018:
   572                           	opt stack 0
   573                           
   574                           ; 4 bytes @ 0x3B
   575  00009B                     	ds	4
   576  00009F                     _format_double$1019:
   577                           	opt stack 0
   578                           
   579                           ; 4 bytes @ 0x3F
   580  00009F                     	ds	4
   581  0000A3                     format_double@weight:
   582                           	opt stack 0
   583                           
   584                           ; 4 bytes @ 0x43
   585  0000A3                     	ds	4
   586  0000A7                     format_double@digit:
   587                           	opt stack 0
   588                           
   589                           ; 2 bytes @ 0x47
   590  0000A7                     	ds	2
   591  0000A9                     format_double@m:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0x49
   595  0000A9                     	ds	2
   596  0000AB                     main@new_mode:
   597                           	opt stack 0
   598                           
   599                           ; 1 bytes @ 0x4B
   600  0000AB                     	ds	1
   601                           tblptru	equ	0xFF8
   602                           tblptrh	equ	0xFF7
   603                           tblptrl	equ	0xFF6
   604                           tablat	equ	0xFF5
   605                           postinc0	equ	0xFEE
   606                           wreg	equ	0xFE8
   607                           postdec1	equ	0xFE5
   608                           fsr1l	equ	0xFE1
   609                           
   610                           	psect	cstackCOMRAM
   611  000001                     __pcstackCOMRAM:
   612                           	opt stack 0
   613  000001                     ??_global_int:
   614  000001                     
   615                           ; 1 bytes @ 0x0
   616  000001                     	ds	1
   617  000002                     ??_buffer_putch:
   618  000002                     ??_timer2_init:
   619  000002                     ?_timer0_read_ps:
   620                           	opt stack 0
   621  000002                     ?___lwdiv:
   622                           	opt stack 0
   623  000002                     ?___lwmod:
   624                           	opt stack 0
   625  000002                     ?___flpack:
   626                           	opt stack 0
   627  000002                     ?_frexp:
   628                           	opt stack 0
   629  000002                     ?___flneg:
   630                           	opt stack 0
   631  000002                     lcd_write4bits@value:
   632                           	opt stack 0
   633  000002                     lcd_init@fourbitmode:
   634                           	opt stack 0
   635  000002                     _timer0_init$103:
   636                           	opt stack 0
   637  000002                     ___lwdiv@dividend:
   638                           	opt stack 0
   639  000002                     ___lwmod@dividend:
   640                           	opt stack 0
   641  000002                     ___flpack@arg:
   642                           	opt stack 0
   643  000002                     ___flge@ff1:
   644                           	opt stack 0
   645  000002                     ___flneg@f1:
   646                           	opt stack 0
   647  000002                     frexp@value:
   648                           	opt stack 0
   649                           
   650                           ; 4 bytes @ 0x1
   651  000002                     	ds	1
   652  000003                     timer2_init@ps:
   653                           	opt stack 0
   654  000003                     lcd_send@mode:
   655                           	opt stack 0
   656  000003                     _lcd_init$212:
   657                           	opt stack 0
   658                           
   659                           ; 2 bytes @ 0x2
   660  000003                     	ds	1
   661  000004                     ??_timer0_read_ps:
   662  000004                     lcd_send@value:
   663                           	opt stack 0
   664  000004                     buffer_putch@ch:
   665                           	opt stack 0
   666  000004                     _timer0_init$104:
   667                           	opt stack 0
   668  000004                     ___lwdiv@divisor:
   669                           	opt stack 0
   670  000004                     ___lwmod@divisor:
   671                           	opt stack 0
   672                           
   673                           ; 2 bytes @ 0x3
   674  000004                     	ds	1
   675  000005                     ??_lcd_puts:
   676  000005                     output_putch@c:
   677                           	opt stack 0
   678  000005                     timer2_init@ps_mode:
   679                           	opt stack 0
   680  000005                     lcd_command@value:
   681                           	opt stack 0
   682  000005                     buffer_puts@x:
   683                           	opt stack 0
   684                           
   685                           ; 1 bytes @ 0x4
   686  000005                     	ds	1
   687  000006                     ??_put_str:
   688  000006                     ??_lcd_clear:
   689  000006                     timer0_read_ps@prev:
   690                           	opt stack 0
   691  000006                     lcd_gotoxy@row:
   692                           	opt stack 0
   693  000006                     lcd_puts@i:
   694                           	opt stack 0
   695  000006                     lcd_begin@dotsize:
   696                           	opt stack 0
   697  000006                     ___flpack@exp:
   698                           	opt stack 0
   699  000006                     frexp@eptr:
   700                           	opt stack 0
   701  000006                     ___lwmod@counter:
   702                           	opt stack 0
   703  000006                     _timer0_init$105:
   704                           	opt stack 0
   705  000006                     ___lwdiv@quotient:
   706                           	opt stack 0
   707  000006                     ___flge@ff2:
   708                           	opt stack 0
   709                           
   710                           ; 4 bytes @ 0x5
   711  000006                     	ds	1
   712  000007                     ??_frexp:
   713  000007                     ??_lcd_begin:
   714  000007                     lcd_gotoxy@col:
   715                           	opt stack 0
   716  000007                     lcd_puts@string:
   717                           	opt stack 0
   718  000007                     ___flpack@sign:
   719                           	opt stack 0
   720  000007                     put_str@i:
   721                           	opt stack 0
   722  000007                     timer0_read_ps@count:
   723                           	opt stack 0
   724                           
   725                           ; 2 bytes @ 0x6
   726  000007                     	ds	1
   727  000008                     ??___flpack:
   728  000008                     lcd_begin@lines:
   729                           	opt stack 0
   730  000008                     ___lwdiv@counter:
   731                           	opt stack 0
   732  000008                     _timer0_init$106:
   733                           	opt stack 0
   734  000008                     lcd_gotoxy@row_offsets:
   735                           	opt stack 0
   736                           
   737                           ; 4 bytes @ 0x7
   738  000008                     	ds	1
   739  000009                     put_str@s:
   740                           	opt stack 0
   741  000009                     format_number@n:
   742                           	opt stack 0
   743                           
   744                           ; 2 bytes @ 0x8
   745  000009                     	ds	1
   746  00000A                     _timer0_init$107:
   747                           	opt stack 0
   748                           
   749                           ; 2 bytes @ 0x9
   750  00000A                     	ds	1
   751  00000B                     format_number@base:
   752                           	opt stack 0
   753                           
   754                           ; 1 bytes @ 0xA
   755  00000B                     	ds	1
   756  00000C                     ??_print_unit:
   757  00000C                     ?___fldiv:
   758                           	opt stack 0
   759  00000C                     ?___awtofl:
   760                           	opt stack 0
   761  00000C                     ?___lltofl:
   762                           	opt stack 0
   763  00000C                     print_indicator@indicate:
   764                           	opt stack 0
   765  00000C                     timer0_init@prescaler:
   766                           	opt stack 0
   767  00000C                     format_number@pad:
   768                           	opt stack 0
   769  00000C                     ___awtofl@c:
   770                           	opt stack 0
   771  00000C                     ___fldiv@f1:
   772                           	opt stack 0
   773  00000C                     ___lltofl@c:
   774                           	opt stack 0
   775                           
   776                           ; 4 bytes @ 0xB
   777  00000C                     	ds	1
   778  00000D                     ??_format_number:
   779  00000D                     timer0_init@ps_mode:
   780                           	opt stack 0
   781                           
   782                           ; 1 bytes @ 0xC
   783  00000D                     	ds	2
   784  00000F                     format_number@buf:
   785                           	opt stack 0
   786                           
   787                           ; 32 bytes @ 0xE
   788  00000F                     	ds	1
   789  000010                     ___awtofl@sign:
   790                           	opt stack 0
   791  000010                     ___fldiv@f2:
   792                           	opt stack 0
   793                           
   794                           ; 4 bytes @ 0xF
   795  000010                     	ds	4
   796  000014                     ___fldiv@f3:
   797                           	opt stack 0
   798                           
   799                           ; 4 bytes @ 0x13
   800  000014                     	ds	4
   801  000018                     ___fldiv@cntr:
   802                           	opt stack 0
   803                           
   804                           ; 1 bytes @ 0x17
   805  000018                     	ds	1
   806  000019                     ___fldiv@exp:
   807                           	opt stack 0
   808                           
   809                           ; 1 bytes @ 0x18
   810  000019                     	ds	1
   811  00001A                     ___fldiv@sign:
   812                           	opt stack 0
   813                           
   814                           ; 1 bytes @ 0x19
   815  00001A                     	ds	1
   816  00001B                     ?___flmul:
   817                           	opt stack 0
   818  00001B                     ___flmul@f1:
   819                           	opt stack 0
   820                           
   821                           ; 4 bytes @ 0x1A
   822  00001B                     	ds	4
   823  00001F                     ___flmul@f2:
   824                           	opt stack 0
   825                           
   826                           ; 4 bytes @ 0x1E
   827  00001F                     	ds	4
   828  000023                     ??___flmul:
   829                           
   830                           ; 0 bytes @ 0x22
   831  000023                     	ds	12
   832  00002F                     _format_number$148:
   833                           	opt stack 0
   834                           
   835                           ; 2 bytes @ 0x2E
   836  00002F                     	ds	1
   837  000030                     ___flmul@exp:
   838                           	opt stack 0
   839                           
   840                           ; 1 bytes @ 0x2F
   841  000030                     	ds	1
   842  000031                     format_number@padchar:
   843                           	opt stack 0
   844  000031                     ___flmul@sign:
   845                           	opt stack 0
   846                           
   847                           ; 1 bytes @ 0x30
   848  000031                     	ds	1
   849  000032                     format_number@di:
   850                           	opt stack 0
   851  000032                     ___flmul@f3_as_product:
   852                           	opt stack 0
   853                           
   854                           ; 4 bytes @ 0x31
   855  000032                     	ds	1
   856  000033                     format_number@i:
   857                           	opt stack 0
   858                           
   859                           ; 1 bytes @ 0x32
   860  000033                     	ds	1
   861  000034                     ?_measure_freq:
   862                           	opt stack 0
   863  000034                     print_reading@measurement:
   864                           	opt stack 0
   865                           
   866                           ; 2 bytes @ 0x33
   867  000034                     	ds	2
   868  000036                     ??_measure_freq:
   869  000036                     ?___fladd:
   870                           	opt stack 0
   871  000036                     _print_reading$1014:
   872                           	opt stack 0
   873  000036                     ___fladd@f1:
   874                           	opt stack 0
   875                           
   876                           ; 4 bytes @ 0x35
   877  000036                     	ds	1
   878  000037                     measure_freq@count:
   879                           	opt stack 0
   880                           
   881                           ; 2 bytes @ 0x36
   882  000037                     	ds	1
   883  000038                     _print_reading$1015:
   884                           	opt stack 0
   885                           
   886                           ; 2 bytes @ 0x37
   887  000038                     	ds	1
   888  000039                     ?___lwtofl:
   889                           	opt stack 0
   890  000039                     ___lwtofl@c:
   891                           	opt stack 0
   892                           
   893                           ; 2 bytes @ 0x38
   894  000039                     	ds	1
   895  00003A                     ___fladd@f2:
   896                           	opt stack 0
   897                           
   898                           ; 4 bytes @ 0x39
   899  00003A                     	ds	3
   900  00003D                     calibrate@i:
   901                           	opt stack 0
   902                           
   903                           ; 1 bytes @ 0x3C
   904  00003D                     	ds	1
   905  00003E                     ??___fladd:
   906                           
   907                           ; 0 bytes @ 0x3D
   908  00003E                     	ds	1
   909  00003F                     ___fladd@sign:
   910                           	opt stack 0
   911                           
   912                           ; 1 bytes @ 0x3E
   913  00003F                     	ds	1
   914  000040                     ___fladd@exp2:
   915                           	opt stack 0
   916                           
   917                           ; 1 bytes @ 0x3F
   918  000040                     	ds	1
   919  000041                     ___fladd@exp1:
   920                           	opt stack 0
   921                           
   922                           ; 1 bytes @ 0x40
   923  000041                     	ds	1
   924  000042                     ?___flsub:
   925                           	opt stack 0
   926  000042                     ?_eval_poly:
   927                           	opt stack 0
   928  000042                     ___flsub@f1:
   929                           	opt stack 0
   930  000042                     eval_poly@x:
   931                           	opt stack 0
   932                           
   933                           ; 4 bytes @ 0x41
   934  000042                     	ds	4
   935  000046                     eval_poly@d:
   936                           	opt stack 0
   937  000046                     ___flsub@f2:
   938                           	opt stack 0
   939                           
   940                           ; 4 bytes @ 0x45
   941  000046                     	ds	1
   942  000047                     eval_poly@n:
   943                           	opt stack 0
   944                           
   945                           ; 2 bytes @ 0x46
   946  000047                     	ds	2
   947  000049                     ??_eval_poly:
   948                           
   949                           ; 0 bytes @ 0x48
   950  000049                     	ds	1
   951  00004A                     eval_poly@res:
   952                           	opt stack 0
   953                           
   954                           ; 4 bytes @ 0x49
   955  00004A                     	ds	4
   956  00004E                     ?_ldexp:
   957                           	opt stack 0
   958  00004E                     ?_log:
   959                           	opt stack 0
   960  00004E                     ldexp@value:
   961                           	opt stack 0
   962  00004E                     log@x:
   963                           	opt stack 0
   964                           
   965                           ; 4 bytes @ 0x4D
   966  00004E                     	ds	4
   967  000052                     ldexp@newexp:
   968                           	opt stack 0
   969  000052                     log@exponent:
   970                           	opt stack 0
   971                           
   972                           ; 2 bytes @ 0x51
   973  000052                     	ds	2
   974  000054                     ??_ldexp:
   975  000054                     ?_log10:
   976                           	opt stack 0
   977  000054                     log10@x:
   978                           	opt stack 0
   979                           
   980                           ; 4 bytes @ 0x53
   981  000054                     	ds	4
   982  000058                     _log10$1030:
   983                           	opt stack 0
   984                           
   985                           ; 4 bytes @ 0x57
   986  000058                     	ds	4
   987  00005C                     ___fltol@sign1:
   988                           	opt stack 0
   989                           
   990                           ; 1 bytes @ 0x5B
   991  00005C                     	ds	1
   992  00005D                     ___fltol@exp1:
   993                           	opt stack 0
   994                           
   995                           ; 1 bytes @ 0x5C
   996  00005D                     	ds	1
   997  00005E                     tblptru	equ	0xFF8
   998                           tblptrh	equ	0xFF7
   999                           tblptrl	equ	0xFF6
  1000                           tablat	equ	0xFF5
  1001                           postinc0	equ	0xFEE
  1002                           wreg	equ	0xFE8
  1003                           postdec1	equ	0xFE5
  1004                           fsr1l	equ	0xFE1
  1005                           
  1006                           ; 0 bytes @ 0x5D
  1007 ;;
  1008 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1009 ;;
  1010 ;; *************** function _main *****************
  1011 ;; Defined at:
  1012 ;;		line 113 in file "../../../LC-meter.c"
  1013 ;; Parameters:    Size  Location     Type
  1014 ;;		None
  1015 ;; Auto vars:     Size  Location     Type
  1016 ;;  new_mode        1   75[BANK0 ] unsigned char 
  1017 ;; Return value:  Size  Location     Type
  1018 ;;		None               void
  1019 ;; Registers used:
  1020 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1021 ;; Tracked objects:
  1022 ;;		On entry : 0/0
  1023 ;;		On exit  : 0/0
  1024 ;;		Unchanged: 0/0
  1025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1026 ;;      Params:         0       0       0       0       0       0       0
  1027 ;;      Locals:         0       1       0       0       0       0       0
  1028 ;;      Temps:          0       0       0       0       0       0       0
  1029 ;;      Totals:         0       1       0       0       0       0       0
  1030 ;;Total ram usage:        1 bytes
  1031 ;; Hardware stack levels required when called:    7
  1032 ;; This function calls:
  1033 ;;		_calibrate
  1034 ;;		_delay10ms
  1035 ;;		_format_double
  1036 ;;		_lcd_begin
  1037 ;;		_lcd_clear
  1038 ;;		_lcd_gotoxy
  1039 ;;		_lcd_init
  1040 ;;		_lcd_puts
  1041 ;;		_measure_capacitance
  1042 ;;		_measure_inductance
  1043 ;;		_print_indicator
  1044 ;;		_timer0_init
  1045 ;;		_timer2_init
  1046 ;; This function is called by:
  1047 ;;		Startup code after reset
  1048 ;; This function uses a non-reentrant model
  1049 ;;
  1050                           
  1051                           	psect	text0
  1052  001964                     __ptext0:
  1053                           	opt stack 0
  1054  001964                     _main:
  1055                           	opt stack 24
  1056                           
  1057                           ;LC-meter.c: 114: bres = msecpart = msecs = seconds = 0;
  1058                           
  1059                           ;incstack = 0
  1060  001964  0100               	movlb	0	; () banked
  1061  001966  6BB8               	clrf	_seconds& (0+255),b	;volatile
  1062  001968  6BB9               	clrf	(_seconds+1)& (0+255),b	;volatile
  1063  00196A  6BBA               	clrf	(_seconds+2)& (0+255),b	;volatile
  1064  00196C  6BBB               	clrf	(_seconds+3)& (0+255),b	;volatile
  1065  00196E  C0B8  F0B4         	movff	_seconds,_msecs	;volatile
  1066  001972  C0B9  F0B5         	movff	_seconds+1,_msecs+1	;volatile
  1067  001976  C0BA  F0B6         	movff	_seconds+2,_msecs+2	;volatile
  1068  00197A  C0BB  F0B7         	movff	_seconds+3,_msecs+3	;volatile
  1069  00197E  C0B4  F0E0         	movff	_msecs,_msecpart	;volatile
  1070  001982  C0B5  F0E1         	movff	_msecs+1,_msecpart+1	;volatile
  1071  001986  C0E0  F0DE         	movff	_msecpart,_bres	;volatile
  1072  00198A  C0E1  F0DF         	movff	_msecpart+1,_bres+1	;volatile
  1073                           
  1074                           ; BSR set to: 0
  1075                           ;LC-meter.c: 115: mode = -1;
  1076  00198E  69E6               	setf	_mode& (0+255),b
  1077                           
  1078                           ;LC-meter.c: 117: CCal = 1000;
  1079  001990  6BDA               	clrf	_CCal& (0+255),b
  1080  001992  6BDB               	clrf	(_CCal+1)& (0+255),b
  1081  001994  0E7A               	movlw	122
  1082  001996  6FDC               	movwf	(_CCal+2)& (0+255),b
  1083  001998  0E44               	movlw	68
  1084  00199A  6FDD               	movwf	(_CCal+3)& (0+255),b
  1085                           
  1086                           ;LC-meter.c: 127: TRISA = 0b11001111;
  1087  00199C  0ECF               	movlw	207
  1088  00199E  6E92               	movwf	3986,c	;volatile
  1089                           
  1090                           ; BSR set to: 0
  1091                           ;LC-meter.c: 130: timer0_init(0b1000 | 0x20 | 0x40);
  1092  0019A0  0E68               	movlw	104
  1093  0019A2  EC85  F010         	call	_timer0_init
  1094                           
  1095                           ; BSR set to: 0
  1096                           ;LC-meter.c: 137: INTCON2 &= ~0b10000000;
  1097  0019A6  9EF1               	bcf	intcon2,7,c	;volatile
  1098                           
  1099                           ; BSR set to: 0
  1100                           ;LC-meter.c: 145: TRISC = 0b10111011;
  1101  0019A8  0EBB               	movlw	187
  1102  0019AA  6E94               	movwf	3988,c	;volatile
  1103                           
  1104                           ; BSR set to: 0
  1105                           ;LC-meter.c: 149: TRISC &= ~0b00000100;
  1106  0019AC  9494               	bcf	3988,2,c	;volatile
  1107                           
  1108                           ; BSR set to: 0
  1109                           ;LC-meter.c: 150: LATC &= ~0b00000100; LATC |= (!!(1)) << 2;;
  1110  0019AE  948B               	bcf	3979,2,c	;volatile
  1111                           
  1112                           ; BSR set to: 0
  1113  0019B0  848B               	bsf	3979,2,c	;volatile
  1114                           
  1115                           ;LC-meter.c: 152: timer2_init(0b000 | 0x80);
  1116  0019B2  0E80               	movlw	128
  1117  0019B4  ECEA  F012         	call	_timer2_init
  1118                           
  1119                           ;LC-meter.c: 160: lcd_init(1);
  1120  0019B8  0E01               	movlw	1
  1121  0019BA  EC18  F013         	call	_lcd_init
  1122                           
  1123                           ;LC-meter.c: 161: lcd_begin(2, 1);
  1124  0019BE  0E01               	movlw	1
  1125  0019C0  6E06               	movwf	lcd_begin@dotsize,c
  1126  0019C2  0E02               	movlw	2
  1127  0019C4  ECA3  F00D         	call	_lcd_begin
  1128                           
  1129                           ;LC-meter.c: 164: TRISC |= (1 << 4);
  1130  0019C8  8894               	bsf	3988,4,c	;volatile
  1131                           
  1132                           ;LC-meter.c: 165: TRISC &= ~(1 << 5);
  1133  0019CA  9A94               	bcf	3988,5,c	;volatile
  1134                           
  1135                           ;LC-meter.c: 167: LATC &= ~(1 << 5);
  1136  0019CC  9A8B               	bcf	3979,5,c	;volatile
  1137                           
  1138                           ;LC-meter.c: 168: delay10ms(50);
  1139  0019CE  0E32               	movlw	50
  1140  0019D0  ECC6  F013         	call	_delay10ms
  1141                           
  1142                           ;LC-meter.c: 169: LATC |= (1 << 5);
  1143  0019D4  8A8B               	bsf	3979,5,c	;volatile
  1144                           
  1145                           ;LC-meter.c: 170: delay10ms(50);
  1146  0019D6  0E32               	movlw	50
  1147  0019D8  ECC6  F013         	call	_delay10ms
  1148                           
  1149                           ;LC-meter.c: 171: LATC &= ~(1 << 5);
  1150  0019DC  9A8B               	bcf	3979,5,c	;volatile
  1151                           
  1152                           ;LC-meter.c: 172: delay10ms(50);
  1153  0019DE  0E32               	movlw	50
  1154  0019E0  ECC6  F013         	call	_delay10ms
  1155                           
  1156                           ;LC-meter.c: 173: LATC |= (1 << 5);
  1157  0019E4  8A8B               	bsf	3979,5,c	;volatile
  1158                           
  1159                           ;LC-meter.c: 174: delay10ms(50);
  1160  0019E6  0E32               	movlw	50
  1161  0019E8  ECC6  F013         	call	_delay10ms
  1162                           
  1163                           ;LC-meter.c: 175: LATC &= ~(1 << 5);
  1164  0019EC  9A8B               	bcf	3979,5,c	;volatile
  1165                           
  1166                           ;LC-meter.c: 185: INTCON |= 0xc0;
  1167  0019EE  0EC0               	movlw	192
  1168  0019F0  12F2               	iorwf	intcon,f,c	;volatile
  1169                           
  1170                           ;LC-meter.c: 191: lcd_gotoxy(0, 0);
  1171  0019F2  0E00               	movlw	0
  1172  0019F4  6A06               	clrf	lcd_gotoxy@row,c
  1173  0019F6  EC9C  F012         	call	_lcd_gotoxy
  1174                           
  1175                           ;LC-meter.c: 193: lcd_puts("LC-meter ");
  1176  0019FA  0E7F               	movlw	STR_12& (0+255)
  1177  0019FC  ECB8  F012         	call	_lcd_puts
  1178                           
  1179                           ;LC-meter.c: 194: format_double( CCal);
  1180  001A00  C0DA  F097         	movff	_CCal,format_double@num
  1181  001A04  C0DB  F098         	movff	_CCal+1,format_double@num+1
  1182  001A08  C0DC  F099         	movff	_CCal+2,format_double@num+2
  1183  001A0C  C0DD  F09A         	movff	_CCal+3,format_double@num+3
  1184  001A10  EC2A  F00A         	call	_format_double	;wreg free
  1185                           
  1186                           ;LC-meter.c: 200: delay10ms(200);
  1187  001A14  0EC8               	movlw	200
  1188  001A16  ECC6  F013         	call	_delay10ms
  1189                           
  1190                           ;LC-meter.c: 203: calibrate();
  1191  001A1A  EC10  F00E         	call	_calibrate	;wreg free
  1192                           
  1193                           ;LC-meter.c: 206: lcd_clear();
  1194  001A1E  ECA2  F013         	call	_lcd_clear	;wreg free
  1195  001A22                     l3739:
  1196  001A22  0E01               	movlw	1
  1197                           
  1198                           ;LC-meter.c: 215: char new_mode = (!!(PORTC & 0b10000));
  1199  001A24  A882               	btfss	3970,4,c	;volatile
  1200  001A26  0E00               	movlw	0
  1201  001A28  0100               	movlb	0	; () banked
  1202  001A2A  6FAB               	movwf	main@new_mode& (0+255),b
  1203                           
  1204                           ; BSR set to: 0
  1205                           ;LC-meter.c: 217: if(new_mode != mode) {
  1206  001A2C  51E6               	movf	_mode& (0+255),w,b
  1207  001A2E  19AB               	xorwf	main@new_mode& (0+255),w,b
  1208  001A30  A4D8               	btfss	status,2,c
  1209                           
  1210                           ; BSR set to: 0
  1211                           ;LC-meter.c: 222: mode = new_mode;
  1212  001A32  C0AB  F0E6         	movff	main@new_mode,_mode
  1213                           
  1214                           ; BSR set to: 0
  1215                           ;LC-meter.c: 223: }
  1216                           ;LC-meter.c: 225: if(mode)
  1217  001A36  51E6               	movf	_mode& (0+255),w,b
  1218  001A38  E003               	bz	l3749
  1219                           
  1220                           ; BSR set to: 0
  1221                           ;LC-meter.c: 226: measure_capacitance();
  1222  001A3A  ECEC  F005         	call	_measure_capacitance	;wreg free
  1223  001A3E  D002               	goto	l3751
  1224  001A40                     l3749:
  1225                           
  1226                           ; BSR set to: 0
  1227                           ;LC-meter.c: 227: else
  1228                           ;LC-meter.c: 228: measure_inductance();
  1229  001A40  EC5B  F003         	call	_measure_inductance	;wreg free
  1230  001A44                     l3751:
  1231                           
  1232                           ;LC-meter.c: 230: print_indicator(1);
  1233  001A44  0E01               	movlw	1
  1234  001A46  EC86  F013         	call	_print_indicator
  1235                           
  1236                           ;LC-meter.c: 231: delay10ms(30);
  1237  001A4A  0E1E               	movlw	30
  1238  001A4C  ECC6  F013         	call	_delay10ms
  1239                           
  1240                           ;LC-meter.c: 233: print_indicator(0);
  1241  001A50  0E00               	movlw	0
  1242  001A52  EC86  F013         	call	_print_indicator
  1243                           
  1244                           ;LC-meter.c: 234: delay10ms(20);
  1245  001A56  0E14               	movlw	20
  1246  001A58  ECC6  F013         	call	_delay10ms
  1247                           
  1248                           ;LC-meter.c: 235: }
  1249  001A5C  D7E2               	goto	l3739
  1250  001A5E                     __end_of_main:
  1251                           	opt stack 0
  1252                           tblptru	equ	0xFF8
  1253                           tblptrh	equ	0xFF7
  1254                           tblptrl	equ	0xFF6
  1255                           tablat	equ	0xFF5
  1256                           intcon	equ	0xFF2
  1257                           intcon2	equ	0xFF1
  1258                           postinc0	equ	0xFEE
  1259                           wreg	equ	0xFE8
  1260                           postdec1	equ	0xFE5
  1261                           fsr1l	equ	0xFE1
  1262                           status	equ	0xFD8
  1263                           
  1264 ;; *************** function _timer2_init *****************
  1265 ;; Defined at:
  1266 ;;		line 129 in file "../../../lib/timer.c"
  1267 ;; Parameters:    Size  Location     Type
  1268 ;;  ps_mode         1    wreg     unsigned char 
  1269 ;; Auto vars:     Size  Location     Type
  1270 ;;  ps_mode         1    4[COMRAM] unsigned char 
  1271 ;;  postscaler      1    0        unsigned char 
  1272 ;;  ps              1    2[COMRAM] unsigned char 
  1273 ;; Return value:  Size  Location     Type
  1274 ;;		None               void
  1275 ;; Registers used:
  1276 ;;		wreg, status,2, status,0
  1277 ;; Tracked objects:
  1278 ;;		On entry : F/0
  1279 ;;		On exit  : 0/0
  1280 ;;		Unchanged: 0/0
  1281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1282 ;;      Params:         0       0       0       0       0       0       0
  1283 ;;      Locals:         3       0       0       0       0       0       0
  1284 ;;      Temps:          1       0       0       0       0       0       0
  1285 ;;      Totals:         4       0       0       0       0       0       0
  1286 ;;Total ram usage:        4 bytes
  1287 ;; Hardware stack levels used:    1
  1288 ;; Hardware stack levels required when called:    1
  1289 ;; This function calls:
  1290 ;;		Nothing
  1291 ;; This function is called by:
  1292 ;;		_main
  1293 ;; This function uses a non-reentrant model
  1294 ;;
  1295                           
  1296                           	psect	text1
  1297  0025D4                     __ptext1:
  1298                           	opt stack 0
  1299  0025D4                     _timer2_init:
  1300                           	opt stack 29
  1301                           
  1302                           ;incstack = 0
  1303                           ;timer2_init@ps_mode stored from wreg
  1304  0025D4  6E05               	movwf	timer2_init@ps_mode,c
  1305                           
  1306                           ; BSR set to: 0
  1307                           ;timer.c: 130: uint8_t ps = ps_mode & 0b1111;
  1308  0025D6  5005               	movf	timer2_init@ps_mode,w,c
  1309  0025D8  0B0F               	andlw	15
  1310  0025DA  6E03               	movwf	timer2_init@ps,c
  1311                           
  1312                           ; BSR set to: 0
  1313                           ;timer.c: 134: T2CON &= ~0b01111111;
  1314  0025DC  0E80               	movlw	128
  1315  0025DE  16BA               	andwf	4026,f,c	;volatile
  1316                           
  1317                           ;timer.c: 136: T2CON |= (postscaler & 0b1111) << 3;
  1318  0025E0  50BA               	movf	4026,w,c	;volatile
  1319                           
  1320                           ;timer.c: 137: T2CON |= (ps & 0b11);
  1321  0025E2  5003               	movf	timer2_init@ps,w,c
  1322  0025E4  0B03               	andlw	3
  1323  0025E6  12BA               	iorwf	4026,f,c	;volatile
  1324                           
  1325                           ; BSR set to: 0
  1326                           ;timer.c: 139: TMR2 = 0;
  1327  0025E8  6ABC               	clrf	4028,c	;volatile
  1328                           
  1329                           ; BSR set to: 0
  1330                           ;timer.c: 141: T2CON |= 0b100;
  1331  0025EA  84BA               	bsf	4026,2,c	;volatile
  1332                           
  1333                           ; BSR set to: 0
  1334                           ;timer.c: 144: PIR1 &= ~0b10;
  1335  0025EC  929E               	bcf	3998,1,c	;volatile
  1336                           
  1337                           ;timer.c: 145: PIE1 = (!!(ps_mode & 0x80)) << 1;
  1338  0025EE  AE05               	btfss	timer2_init@ps_mode,7,c
  1339  0025F0  D003               	goto	u2280
  1340  0025F2  6A02               	clrf	??_timer2_init& (0+255),c
  1341  0025F4  2A02               	incf	??_timer2_init& (0+255),f,c
  1342  0025F6  D001               	goto	u2298
  1343  0025F8                     u2280:
  1344  0025F8  6A02               	clrf	??_timer2_init& (0+255),c
  1345  0025FA                     u2298:
  1346  0025FA  90D8               	bcf	status,0,c
  1347  0025FC  3402               	rlcf	??_timer2_init,w,c
  1348  0025FE  6E9D               	movwf	3997,c	;volatile
  1349  002600  0012               	return		;funcret
  1350  002602                     __end_of_timer2_init:
  1351                           	opt stack 0
  1352                           tblptru	equ	0xFF8
  1353                           tblptrh	equ	0xFF7
  1354                           tblptrl	equ	0xFF6
  1355                           tablat	equ	0xFF5
  1356                           intcon	equ	0xFF2
  1357                           intcon2	equ	0xFF1
  1358                           postinc0	equ	0xFEE
  1359                           wreg	equ	0xFE8
  1360                           postdec1	equ	0xFE5
  1361                           fsr1l	equ	0xFE1
  1362                           status	equ	0xFD8
  1363                           
  1364 ;; *************** function _timer0_init *****************
  1365 ;; Defined at:
  1366 ;;		line 27 in file "../../../lib/timer.c"
  1367 ;; Parameters:    Size  Location     Type
  1368 ;;  ps_mode         1    wreg     unsigned char 
  1369 ;; Auto vars:     Size  Location     Type
  1370 ;;  ps_mode         1   12[COMRAM] unsigned char 
  1371 ;;  prescaler       1   11[COMRAM] unsigned char 
  1372 ;; Return value:  Size  Location     Type
  1373 ;;		None               void
  1374 ;; Registers used:
  1375 ;;		wreg, status,2, status,0
  1376 ;; Tracked objects:
  1377 ;;		On entry : F/0
  1378 ;;		On exit  : F/0
  1379 ;;		Unchanged: F/0
  1380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1381 ;;      Params:         0       0       0       0       0       0       0
  1382 ;;      Locals:        12       0       0       0       0       0       0
  1383 ;;      Temps:          0       0       0       0       0       0       0
  1384 ;;      Totals:        12       0       0       0       0       0       0
  1385 ;;Total ram usage:       12 bytes
  1386 ;; Hardware stack levels used:    1
  1387 ;; Hardware stack levels required when called:    1
  1388 ;; This function calls:
  1389 ;;		Nothing
  1390 ;; This function is called by:
  1391 ;;		_main
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395                           	psect	text2
  1396  00210A                     __ptext2:
  1397                           	opt stack 0
  1398  00210A                     _timer0_init:
  1399                           	opt stack 29
  1400                           
  1401                           ;incstack = 0
  1402                           ;timer0_init@ps_mode stored from wreg
  1403  00210A  6E0D               	movwf	timer0_init@ps_mode,c
  1404                           
  1405                           ; BSR set to: 0
  1406                           ;timer.c: 28: uint8_t prescaler = ps_mode & 0b1111;
  1407  00210C  500D               	movf	timer0_init@ps_mode,w,c
  1408  00210E  0B0F               	andlw	15
  1409  002110  6E0C               	movwf	timer0_init@prescaler,c
  1410                           
  1411                           ; BSR set to: 0
  1412                           ;timer.c: 30: TMR0 = 0;
  1413  002112  6AD6               	clrf	4054,c	;volatile
  1414  002114  6AD7               	clrf	4055,c	;volatile
  1415                           
  1416                           ; BSR set to: 0
  1417                           ;timer.c: 33: T0CON |= (!!(ps_mode & 0x20)) ? 0x20 : 0x00;
  1418  002116  BA0D               	btfsc	timer0_init@ps_mode,5,c
  1419  002118  D003               	goto	l2845
  1420                           
  1421                           ; BSR set to: 0
  1422  00211A  6A02               	clrf	_timer0_init$103,c
  1423  00211C  6A03               	clrf	_timer0_init$103+1,c
  1424  00211E  D003               	goto	l2847
  1425  002120                     l2845:
  1426                           
  1427                           ; BSR set to: 0
  1428  002120  6A03               	clrf	_timer0_init$103+1,c
  1429  002122  0E20               	movlw	32
  1430  002124  6E02               	movwf	_timer0_init$103,c
  1431  002126                     l2847:
  1432                           
  1433                           ; BSR set to: 0
  1434  002126  5002               	movf	_timer0_init$103,w,c
  1435  002128  12D5               	iorwf	4053,f,c	;volatile
  1436                           
  1437                           ; BSR set to: 0
  1438                           ;timer.c: 36: T0CON |= (!!(ps_mode & 0x10)) ? 0x10 : 0x00;
  1439  00212A  B80D               	btfsc	timer0_init@ps_mode,4,c
  1440  00212C  D003               	goto	l2853
  1441                           
  1442                           ; BSR set to: 0
  1443  00212E  6A04               	clrf	_timer0_init$104,c
  1444  002130  6A05               	clrf	_timer0_init$104+1,c
  1445  002132  D003               	goto	l2855
  1446  002134                     l2853:
  1447                           
  1448                           ; BSR set to: 0
  1449  002134  6A05               	clrf	_timer0_init$104+1,c
  1450  002136  0E10               	movlw	16
  1451  002138  6E04               	movwf	_timer0_init$104,c
  1452  00213A                     l2855:
  1453                           
  1454                           ; BSR set to: 0
  1455  00213A  5004               	movf	_timer0_init$104,w,c
  1456  00213C  12D5               	iorwf	4053,f,c	;volatile
  1457                           
  1458                           ; BSR set to: 0
  1459                           ;timer.c: 39: T0CON |= (!!(ps_mode & 0x40)) ? 0x40 : 0x00;
  1460  00213E  BC0D               	btfsc	timer0_init@ps_mode,6,c
  1461  002140  D003               	goto	l2861
  1462                           
  1463                           ; BSR set to: 0
  1464  002142  6A06               	clrf	_timer0_init$105,c
  1465  002144  6A07               	clrf	_timer0_init$105+1,c
  1466  002146  D003               	goto	l2863
  1467  002148                     l2861:
  1468                           
  1469                           ; BSR set to: 0
  1470  002148  6A07               	clrf	_timer0_init$105+1,c
  1471  00214A  0E40               	movlw	64
  1472  00214C  6E06               	movwf	_timer0_init$105,c
  1473  00214E                     l2863:
  1474                           
  1475                           ; BSR set to: 0
  1476  00214E  5006               	movf	_timer0_init$105,w,c
  1477  002150  12D5               	iorwf	4053,f,c	;volatile
  1478                           
  1479                           ; BSR set to: 0
  1480                           ;timer.c: 43: T0CON &= (!!prescaler) ? ~0x08 : ~0x00;
  1481  002152  500C               	movf	timer0_init@prescaler,w,c
  1482  002154  E103               	bnz	l2869
  1483                           
  1484                           ; BSR set to: 0
  1485  002156  6808               	setf	_timer0_init$106,c
  1486  002158  6809               	setf	_timer0_init$106+1,c
  1487  00215A  D003               	goto	l2871
  1488  00215C                     l2869:
  1489                           
  1490                           ; BSR set to: 0
  1491  00215C  6809               	setf	_timer0_init$106+1,c
  1492  00215E  0EF7               	movlw	247
  1493  002160  6E08               	movwf	_timer0_init$106,c
  1494  002162                     l2871:
  1495                           
  1496                           ; BSR set to: 0
  1497  002162  5008               	movf	_timer0_init$106,w,c
  1498  002164  16D5               	andwf	4053,f,c	;volatile
  1499                           
  1500                           ; BSR set to: 0
  1501                           ;timer.c: 45: T0CON &= ~0b111;
  1502  002166  0EF8               	movlw	248
  1503  002168  16D5               	andwf	4053,f,c	;volatile
  1504                           
  1505                           ;timer.c: 47: if(prescaler > 0) {
  1506  00216A  500C               	movf	timer0_init@prescaler,w,c
  1507  00216C  E003               	bz	l2877
  1508                           
  1509                           ; BSR set to: 0
  1510                           ;timer.c: 48: T0CON |= (prescaler - 1) & 0b111;
  1511  00216E  040C               	decf	timer0_init@prescaler,w,c
  1512  002170  0B07               	andlw	7
  1513  002172  12D5               	iorwf	4053,f,c	;volatile
  1514  002174                     l2877:
  1515                           
  1516                           ; BSR set to: 0
  1517                           ;timer.c: 54: }
  1518                           ;timer.c: 58: INTCON &= ~0x40;
  1519  002174  9CF2               	bcf	intcon,6,c	;volatile
  1520                           
  1521                           ; BSR set to: 0
  1522                           ;timer.c: 59: INTCON |= (!!(ps_mode & 0x80)) ? 0x20 : 0x00;
  1523  002176  BE0D               	btfsc	timer0_init@ps_mode,7,c
  1524  002178  D003               	goto	l2883
  1525                           
  1526                           ; BSR set to: 0
  1527  00217A  6A0A               	clrf	_timer0_init$107,c
  1528  00217C  6A0B               	clrf	_timer0_init$107+1,c
  1529  00217E  D003               	goto	l2885
  1530  002180                     l2883:
  1531                           
  1532                           ; BSR set to: 0
  1533  002180  6A0B               	clrf	_timer0_init$107+1,c
  1534  002182  0E20               	movlw	32
  1535  002184  6E0A               	movwf	_timer0_init$107,c
  1536  002186                     l2885:
  1537                           
  1538                           ; BSR set to: 0
  1539  002186  500A               	movf	_timer0_init$107,w,c
  1540  002188  12F2               	iorwf	intcon,f,c	;volatile
  1541                           
  1542                           ; BSR set to: 0
  1543  00218A  0012               	return		;funcret
  1544  00218C                     __end_of_timer0_init:
  1545                           	opt stack 0
  1546                           tblptru	equ	0xFF8
  1547                           tblptrh	equ	0xFF7
  1548                           tblptrl	equ	0xFF6
  1549                           tablat	equ	0xFF5
  1550                           intcon	equ	0xFF2
  1551                           intcon2	equ	0xFF1
  1552                           postinc0	equ	0xFEE
  1553                           wreg	equ	0xFE8
  1554                           postdec1	equ	0xFE5
  1555                           fsr1l	equ	0xFE1
  1556                           status	equ	0xFD8
  1557                           
  1558 ;; *************** function _print_indicator *****************
  1559 ;; Defined at:
  1560 ;;		line 186 in file "../../../src/print.c"
  1561 ;; Parameters:    Size  Location     Type
  1562 ;;  indicate        1    wreg     unsigned char 
  1563 ;; Auto vars:     Size  Location     Type
  1564 ;;  indicate        1   11[COMRAM] unsigned char 
  1565 ;; Return value:  Size  Location     Type
  1566 ;;		None               void
  1567 ;; Registers used:
  1568 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1569 ;; Tracked objects:
  1570 ;;		On entry : 0/0
  1571 ;;		On exit  : 0/0
  1572 ;;		Unchanged: 0/0
  1573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1574 ;;      Params:         0       0       0       0       0       0       0
  1575 ;;      Locals:         1       0       0       0       0       0       0
  1576 ;;      Temps:          0       0       0       0       0       0       0
  1577 ;;      Totals:         1       0       0       0       0       0       0
  1578 ;;Total ram usage:        1 bytes
  1579 ;; Hardware stack levels used:    1
  1580 ;; Hardware stack levels required when called:    5
  1581 ;; This function calls:
  1582 ;;		_lcd_gotoxy
  1583 ;;		_lcd_puts
  1584 ;; This function is called by:
  1585 ;;		_main
  1586 ;; This function uses a non-reentrant model
  1587 ;;
  1588                           
  1589                           	psect	text3
  1590  00270C                     __ptext3:
  1591                           	opt stack 0
  1592  00270C                     _print_indicator:
  1593                           	opt stack 25
  1594                           
  1595                           ; BSR set to: 0
  1596                           ;incstack = 0
  1597                           ;print_indicator@indicate stored from wreg
  1598  00270C  6E0C               	movwf	print_indicator@indicate,c
  1599                           
  1600                           ;print.c: 200: lcd_gotoxy(0, 1);
  1601  00270E  0E01               	movlw	1
  1602  002710  6E06               	movwf	lcd_gotoxy@row,c
  1603  002712  0E00               	movlw	0
  1604  002714  EC9C  F012         	call	_lcd_gotoxy
  1605                           
  1606                           ;print.c: 201: if(indicate) {
  1607  002718  500C               	movf	print_indicator@indicate,w,c
  1608  00271A  E003               	bz	l2835
  1609                           
  1610                           ;print.c: 202: lcd_puts("-*-");
  1611  00271C  0E9B               	movlw	STR_10& (0+255)
  1612  00271E  EFB8  F012         	goto	_lcd_puts
  1613  002722                     l2835:
  1614                           
  1615                           ;print.c: 204: lcd_puts("   ");
  1616  002722  0E8C               	movlw	(STR_13+3)& (0+255)
  1617  002724  EFB8  F012         	goto	_lcd_puts
  1618  002728                     __end_of_print_indicator:
  1619                           	opt stack 0
  1620                           tblptru	equ	0xFF8
  1621                           tblptrh	equ	0xFF7
  1622                           tblptrl	equ	0xFF6
  1623                           tablat	equ	0xFF5
  1624                           intcon	equ	0xFF2
  1625                           intcon2	equ	0xFF1
  1626                           postinc0	equ	0xFEE
  1627                           wreg	equ	0xFE8
  1628                           postdec1	equ	0xFE5
  1629                           fsr1l	equ	0xFE1
  1630                           status	equ	0xFD8
  1631                           
  1632 ;; *************** function _measure_inductance *****************
  1633 ;; Defined at:
  1634 ;;		line 201 in file "../../../src/measure.c"
  1635 ;; Parameters:    Size  Location     Type
  1636 ;;		None
  1637 ;; Auto vars:     Size  Location     Type
  1638 ;;  Lin             4   47[BANK0 ] unsigned char 
  1639 ;;  denominator     4   12[BANK0 ] unsigned char 
  1640 ;;  numerator       4    8[BANK0 ] unsigned char 
  1641 ;;  var             2   45[BANK0 ] unsigned int 
  1642 ;;  unit            1   32[BANK0 ] unsigned char 
  1643 ;; Return value:  Size  Location     Type
  1644 ;;		None               void
  1645 ;; Registers used:
  1646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1647 ;; Tracked objects:
  1648 ;;		On entry : F/0
  1649 ;;		On exit  : 0/0
  1650 ;;		Unchanged: 0/0
  1651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1652 ;;      Params:         0       0       0       0       0       0       0
  1653 ;;      Locals:         0      43       0       0       0       0       0
  1654 ;;      Temps:          0       0       0       0       0       0       0
  1655 ;;      Totals:         0      43       0       0       0       0       0
  1656 ;;Total ram usage:       43 bytes
  1657 ;; Hardware stack levels used:    1
  1658 ;; Hardware stack levels required when called:    6
  1659 ;; This function calls:
  1660 ;;		___fldiv
  1661 ;;		___flge
  1662 ;;		___flmul
  1663 ;;		___flsub
  1664 ;;		___fltol
  1665 ;;		___lwtofl
  1666 ;;		_lcd_gotoxy
  1667 ;;		_measure_freq
  1668 ;;		_print_reading
  1669 ;;		_print_unit
  1670 ;;		_put_str
  1671 ;; This function is called by:
  1672 ;;		_main
  1673 ;; This function uses a non-reentrant model
  1674 ;;
  1675                           
  1676                           	psect	text4
  1677  0006B6                     __ptext4:
  1678                           	opt stack 0
  1679  0006B6                     _measure_inductance:
  1680                           	opt stack 24
  1681                           
  1682                           ; BSR set to: 0
  1683                           ;measure.c: 202: uint8_t unit;
  1684                           ;measure.c: 203: uint16_t var;
  1685                           ;measure.c: 205: double Lin, numerator, denominator;
  1686                           ;measure.c: 208: lcd_gotoxy(0, 0);
  1687                           
  1688                           ;incstack = 0
  1689  0006B6  0E00               	movlw	0
  1690  0006B8  6A06               	clrf	lcd_gotoxy@row,c
  1691  0006BA  EC9C  F012         	call	_lcd_gotoxy
  1692                           
  1693                           ;measure.c: 209: put_str("Inductivity ");
  1694  0006BE  0E5C               	movlw	STR_21& (0+255)
  1695  0006C0  ECD1  F012         	call	_put_str
  1696                           
  1697                           ;measure.c: 211: var = measure_freq();
  1698  0006C4  EC2F  F00D         	call	_measure_freq	;wreg free
  1699  0006C8  C034  F08D         	movff	?_measure_freq,measure_inductance@var
  1700  0006CC  C035  F08E         	movff	?_measure_freq+1,measure_inductance@var+1
  1701                           
  1702                           ;measure.c: 213: F3 = (double)var;
  1703  0006D0  C08D  F039         	movff	measure_inductance@var,___lwtofl@c
  1704  0006D4  C08E  F03A         	movff	measure_inductance@var+1,___lwtofl@c+1
  1705  0006D8  EC2E  F013         	call	___lwtofl	;wreg free
  1706  0006DC  C039  F0B0         	movff	?___lwtofl,_F3
  1707  0006E0  C03A  F0B1         	movff	?___lwtofl+1,_F3+1
  1708  0006E4  C03B  F0B2         	movff	?___lwtofl+2,_F3+2
  1709  0006E8  C03C  F0B3         	movff	?___lwtofl+3,_F3+3
  1710                           
  1711                           ;measure.c: 214: if(F3 > F1)
  1712  0006EC  C0D6  F002         	movff	_F1,___flge@ff1
  1713  0006F0  C0D7  F003         	movff	_F1+1,___flge@ff1+1
  1714  0006F4  C0D8  F004         	movff	_F1+2,___flge@ff1+2
  1715  0006F8  C0D9  F005         	movff	_F1+3,___flge@ff1+3
  1716  0006FC  C0B0  F006         	movff	_F3,___flge@ff2
  1717  000700  C0B1  F007         	movff	_F3+1,___flge@ff2+1
  1718  000704  C0B2  F008         	movff	_F3+2,___flge@ff2+2
  1719  000708  C0B3  F009         	movff	_F3+3,___flge@ff2+3
  1720  00070C  EC67  F011         	call	___flge	;wreg free
  1721  000710  E208               	bc	l3641
  1722                           
  1723                           ;measure.c: 215: F3 = F1;
  1724  000712  C0D6  F0B0         	movff	_F1,_F3
  1725  000716  C0D7  F0B1         	movff	_F1+1,_F3+1
  1726  00071A  C0D8  F0B2         	movff	_F1+2,_F3+2
  1727  00071E  C0D9  F0B3         	movff	_F1+3,_F3+3
  1728  000722                     l3641:
  1729                           
  1730                           ;measure.c: 216: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1731  000722  C0AC  F046         	movff	_F2,___flsub@f2
  1732  000726  C0AD  F047         	movff	_F2+1,___flsub@f2+1
  1733  00072A  C0AE  F048         	movff	_F2+2,___flsub@f2+2
  1734  00072E  C0AF  F049         	movff	_F2+3,___flsub@f2+3
  1735  000732  C0AC  F042         	movff	_F2,___flsub@f1
  1736  000736  C0AD  F043         	movff	_F2+1,___flsub@f1+1
  1737  00073A  C0AE  F044         	movff	_F2+2,___flsub@f1+2
  1738  00073E  C0AF  F045         	movff	_F2+3,___flsub@f1+3
  1739  000742  EC20  F012         	call	___flsub	;wreg free
  1740  000746  C042  F070         	movff	?___flsub,_measure_inductance$1023
  1741  00074A  C043  F071         	movff	?___flsub+1,_measure_inductance$1023+1
  1742  00074E  C044  F072         	movff	?___flsub+2,_measure_inductance$1023+2
  1743  000752  C045  F073         	movff	?___flsub+3,_measure_inductance$1023+3
  1744                           
  1745                           ;measure.c: 216: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1746  000756  C070  F046         	movff	_measure_inductance$1023,___flsub@f2
  1747  00075A  C071  F047         	movff	_measure_inductance$1023+1,___flsub@f2+1
  1748  00075E  C072  F048         	movff	_measure_inductance$1023+2,___flsub@f2+2
  1749  000762  C073  F049         	movff	_measure_inductance$1023+3,___flsub@f2+3
  1750  000766  C0D6  F01F         	movff	_F1,___flmul@f2
  1751  00076A  C0D7  F020         	movff	_F1+1,___flmul@f2+1
  1752  00076E  C0D8  F021         	movff	_F1+2,___flmul@f2+2
  1753  000772  C0D9  F022         	movff	_F1+3,___flmul@f2+3
  1754  000776  C0D6  F01B         	movff	_F1,___flmul@f1
  1755  00077A  C0D7  F01C         	movff	_F1+1,___flmul@f1+1
  1756  00077E  C0D8  F01D         	movff	_F1+2,___flmul@f1+2
  1757  000782  C0D9  F01E         	movff	_F1+3,___flmul@f1+3
  1758  000786  EC7D  F008         	call	___flmul	;wreg free
  1759  00078A  C01B  F042         	movff	?___flmul,___flsub@f1
  1760  00078E  C01C  F043         	movff	?___flmul+1,___flsub@f1+1
  1761  000792  C01D  F044         	movff	?___flmul+2,___flsub@f1+2
  1762  000796  C01E  F045         	movff	?___flmul+3,___flsub@f1+3
  1763  00079A  EC20  F012         	call	___flsub	;wreg free
  1764  00079E  C042  F081         	movff	?___flsub,_measure_inductance$1024
  1765  0007A2  C043  F082         	movff	?___flsub+1,_measure_inductance$1024+1
  1766  0007A6  C044  F083         	movff	?___flsub+2,_measure_inductance$1024+2
  1767  0007AA  C045  F084         	movff	?___flsub+3,_measure_inductance$1024+3
  1768                           
  1769                           ;measure.c: 216: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1770  0007AE  C0B0  F01F         	movff	_F3,___flmul@f2
  1771  0007B2  C0B1  F020         	movff	_F3+1,___flmul@f2+1
  1772  0007B6  C0B2  F021         	movff	_F3+2,___flmul@f2+2
  1773  0007BA  C0B3  F022         	movff	_F3+3,___flmul@f2+3
  1774  0007BE  C0B0  F01B         	movff	_F3,___flmul@f1
  1775  0007C2  C0B1  F01C         	movff	_F3+1,___flmul@f1+1
  1776  0007C6  C0B2  F01D         	movff	_F3+2,___flmul@f1+2
  1777  0007CA  C0B3  F01E         	movff	_F3+3,___flmul@f1+3
  1778  0007CE  EC7D  F008         	call	___flmul	;wreg free
  1779  0007D2  C01B  F046         	movff	?___flmul,___flsub@f2
  1780  0007D6  C01C  F047         	movff	?___flmul+1,___flsub@f2+1
  1781  0007DA  C01D  F048         	movff	?___flmul+2,___flsub@f2+2
  1782  0007DE  C01E  F049         	movff	?___flmul+3,___flsub@f2+3
  1783  0007E2  C0D6  F01F         	movff	_F1,___flmul@f2
  1784  0007E6  C0D7  F020         	movff	_F1+1,___flmul@f2+1
  1785  0007EA  C0D8  F021         	movff	_F1+2,___flmul@f2+2
  1786  0007EE  C0D9  F022         	movff	_F1+3,___flmul@f2+3
  1787  0007F2  C0D6  F01B         	movff	_F1,___flmul@f1
  1788  0007F6  C0D7  F01C         	movff	_F1+1,___flmul@f1+1
  1789  0007FA  C0D8  F01D         	movff	_F1+2,___flmul@f1+2
  1790  0007FE  C0D9  F01E         	movff	_F1+3,___flmul@f1+3
  1791  000802  EC7D  F008         	call	___flmul	;wreg free
  1792  000806  C01B  F042         	movff	?___flmul,___flsub@f1
  1793  00080A  C01C  F043         	movff	?___flmul+1,___flsub@f1+1
  1794  00080E  C01D  F044         	movff	?___flmul+2,___flsub@f1+2
  1795  000812  C01E  F045         	movff	?___flmul+3,___flsub@f1+3
  1796  000816  EC20  F012         	call	___flsub	;wreg free
  1797  00081A  C042  F085         	movff	?___flsub,_measure_inductance$1025
  1798  00081E  C043  F086         	movff	?___flsub+1,_measure_inductance$1025+1
  1799  000822  C044  F087         	movff	?___flsub+2,_measure_inductance$1025+2
  1800  000826  C045  F088         	movff	?___flsub+3,_measure_inductance$1025+3
  1801                           
  1802                           ;measure.c: 216: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1803  00082A  C081  F01F         	movff	_measure_inductance$1024,___flmul@f2
  1804  00082E  C082  F020         	movff	_measure_inductance$1024+1,___flmul@f2+1
  1805  000832  C083  F021         	movff	_measure_inductance$1024+2,___flmul@f2+2
  1806  000836  C084  F022         	movff	_measure_inductance$1024+3,___flmul@f2+3
  1807  00083A  C085  F01B         	movff	_measure_inductance$1025,___flmul@f1
  1808  00083E  C086  F01C         	movff	_measure_inductance$1025+1,___flmul@f1+1
  1809  000842  C087  F01D         	movff	_measure_inductance$1025+2,___flmul@f1+2
  1810  000846  C088  F01E         	movff	_measure_inductance$1025+3,___flmul@f1+3
  1811  00084A  EC7D  F008         	call	___flmul	;wreg free
  1812  00084E  C01B  F089         	movff	?___flmul,_measure_inductance$1026
  1813  000852  C01C  F08A         	movff	?___flmul+1,_measure_inductance$1026+1
  1814  000856  C01D  F08B         	movff	?___flmul+2,_measure_inductance$1026+2
  1815  00085A  C01E  F08C         	movff	?___flmul+3,_measure_inductance$1026+3
  1816                           
  1817                           ;measure.c: 216: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1818  00085E  C089  F01B         	movff	_measure_inductance$1026,___flmul@f1
  1819  000862  C08A  F01C         	movff	_measure_inductance$1026+1,___flmul@f1+1
  1820  000866  C08B  F01D         	movff	_measure_inductance$1026+2,___flmul@f1+2
  1821  00086A  C08C  F01E         	movff	_measure_inductance$1026+3,___flmul@f1+3
  1822  00086E  0E00               	movlw	0
  1823  000870  6E1F               	movwf	___flmul@f2,c
  1824  000872  0E40               	movlw	64
  1825  000874  6E20               	movwf	___flmul@f2+1,c
  1826  000876  0E1C               	movlw	28
  1827  000878  6E21               	movwf	___flmul@f2+2,c
  1828  00087A  0E46               	movlw	70
  1829  00087C  6E22               	movwf	___flmul@f2+3,c
  1830  00087E  EC7D  F008         	call	___flmul	;wreg free
  1831  000882  C01B  F068         	movff	?___flmul,measure_inductance@numerator
  1832  000886  C01C  F069         	movff	?___flmul+1,measure_inductance@numerator+1
  1833  00088A  C01D  F06A         	movff	?___flmul+2,measure_inductance@numerator+2
  1834  00088E  C01E  F06B         	movff	?___flmul+3,measure_inductance@numerator+3
  1835                           
  1836                           ;measure.c: 217: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1837  000892  C0D6  F01F         	movff	_F1,___flmul@f2
  1838  000896  C0D7  F020         	movff	_F1+1,___flmul@f2+1
  1839  00089A  C0D8  F021         	movff	_F1+2,___flmul@f2+2
  1840  00089E  C0D9  F022         	movff	_F1+3,___flmul@f2+3
  1841  0008A2  C0D6  F01B         	movff	_F1,___flmul@f1
  1842  0008A6  C0D7  F01C         	movff	_F1+1,___flmul@f1+1
  1843  0008AA  C0D8  F01D         	movff	_F1+2,___flmul@f1+2
  1844  0008AE  C0D9  F01E         	movff	_F1+3,___flmul@f1+3
  1845  0008B2  EC7D  F008         	call	___flmul	;wreg free
  1846  0008B6  C01B  F074         	movff	?___flmul,_measure_inductance$1027
  1847  0008BA  C01C  F075         	movff	?___flmul+1,_measure_inductance$1027+1
  1848  0008BE  C01D  F076         	movff	?___flmul+2,_measure_inductance$1027+2
  1849  0008C2  C01E  F077         	movff	?___flmul+3,_measure_inductance$1027+3
  1850                           
  1851                           ;measure.c: 217: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1852  0008C6  C0AC  F01F         	movff	_F2,___flmul@f2
  1853  0008CA  C0AD  F020         	movff	_F2+1,___flmul@f2+1
  1854  0008CE  C0AE  F021         	movff	_F2+2,___flmul@f2+2
  1855  0008D2  C0AF  F022         	movff	_F2+3,___flmul@f2+3
  1856  0008D6  C074  F01B         	movff	_measure_inductance$1027,___flmul@f1
  1857  0008DA  C075  F01C         	movff	_measure_inductance$1027+1,___flmul@f1+1
  1858  0008DE  C076  F01D         	movff	_measure_inductance$1027+2,___flmul@f1+2
  1859  0008E2  C077  F01E         	movff	_measure_inductance$1027+3,___flmul@f1+3
  1860  0008E6  EC7D  F008         	call	___flmul	;wreg free
  1861  0008EA  C01B  F081         	movff	?___flmul,_measure_inductance$1024
  1862  0008EE  C01C  F082         	movff	?___flmul+1,_measure_inductance$1024+1
  1863  0008F2  C01D  F083         	movff	?___flmul+2,_measure_inductance$1024+2
  1864  0008F6  C01E  F084         	movff	?___flmul+3,_measure_inductance$1024+3
  1865                           
  1866                           ;measure.c: 217: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1867  0008FA  C0AC  F01F         	movff	_F2,___flmul@f2
  1868  0008FE  C0AD  F020         	movff	_F2+1,___flmul@f2+1
  1869  000902  C0AE  F021         	movff	_F2+2,___flmul@f2+2
  1870  000906  C0AF  F022         	movff	_F2+3,___flmul@f2+3
  1871  00090A  C081  F01B         	movff	_measure_inductance$1024,___flmul@f1
  1872  00090E  C082  F01C         	movff	_measure_inductance$1024+1,___flmul@f1+1
  1873  000912  C083  F01D         	movff	_measure_inductance$1024+2,___flmul@f1+2
  1874  000916  C084  F01E         	movff	_measure_inductance$1024+3,___flmul@f1+3
  1875  00091A  EC7D  F008         	call	___flmul	;wreg free
  1876  00091E  C01B  F085         	movff	?___flmul,_measure_inductance$1025
  1877  000922  C01C  F086         	movff	?___flmul+1,_measure_inductance$1025+1
  1878  000926  C01D  F087         	movff	?___flmul+2,_measure_inductance$1025+2
  1879  00092A  C01E  F088         	movff	?___flmul+3,_measure_inductance$1025+3
  1880                           
  1881                           ;measure.c: 217: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1882  00092E  C0B0  F01F         	movff	_F3,___flmul@f2
  1883  000932  C0B1  F020         	movff	_F3+1,___flmul@f2+1
  1884  000936  C0B2  F021         	movff	_F3+2,___flmul@f2+2
  1885  00093A  C0B3  F022         	movff	_F3+3,___flmul@f2+3
  1886  00093E  C085  F01B         	movff	_measure_inductance$1025,___flmul@f1
  1887  000942  C086  F01C         	movff	_measure_inductance$1025+1,___flmul@f1+1
  1888  000946  C087  F01D         	movff	_measure_inductance$1025+2,___flmul@f1+2
  1889  00094A  C088  F01E         	movff	_measure_inductance$1025+3,___flmul@f1+3
  1890  00094E  EC7D  F008         	call	___flmul	;wreg free
  1891  000952  C01B  F089         	movff	?___flmul,_measure_inductance$1026
  1892  000956  C01C  F08A         	movff	?___flmul+1,_measure_inductance$1026+1
  1893  00095A  C01D  F08B         	movff	?___flmul+2,_measure_inductance$1026+2
  1894  00095E  C01E  F08C         	movff	?___flmul+3,_measure_inductance$1026+3
  1895                           
  1896                           ;measure.c: 217: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1897  000962  C0B0  F01F         	movff	_F3,___flmul@f2
  1898  000966  C0B1  F020         	movff	_F3+1,___flmul@f2+1
  1899  00096A  C0B2  F021         	movff	_F3+2,___flmul@f2+2
  1900  00096E  C0B3  F022         	movff	_F3+3,___flmul@f2+3
  1901  000972  C089  F01B         	movff	_measure_inductance$1026,___flmul@f1
  1902  000976  C08A  F01C         	movff	_measure_inductance$1026+1,___flmul@f1+1
  1903  00097A  C08B  F01D         	movff	_measure_inductance$1026+2,___flmul@f1+2
  1904  00097E  C08C  F01E         	movff	_measure_inductance$1026+3,___flmul@f1+3
  1905  000982  EC7D  F008         	call	___flmul	;wreg free
  1906  000986  C01B  F078         	movff	?___flmul,_measure_inductance$1028
  1907  00098A  C01C  F079         	movff	?___flmul+1,_measure_inductance$1028+1
  1908  00098E  C01D  F07A         	movff	?___flmul+2,_measure_inductance$1028+2
  1909  000992  C01E  F07B         	movff	?___flmul+3,_measure_inductance$1028+3
  1910                           
  1911                           ;measure.c: 217: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1912  000996  C0DA  F01F         	movff	_CCal,___flmul@f2
  1913  00099A  C0DB  F020         	movff	_CCal+1,___flmul@f2+1
  1914  00099E  C0DC  F021         	movff	_CCal+2,___flmul@f2+2
  1915  0009A2  C0DD  F022         	movff	_CCal+3,___flmul@f2+3
  1916  0009A6  C078  F01B         	movff	_measure_inductance$1028,___flmul@f1
  1917  0009AA  C079  F01C         	movff	_measure_inductance$1028+1,___flmul@f1+1
  1918  0009AE  C07A  F01D         	movff	_measure_inductance$1028+2,___flmul@f1+2
  1919  0009B2  C07B  F01E         	movff	_measure_inductance$1028+3,___flmul@f1+3
  1920  0009B6  EC7D  F008         	call	___flmul	;wreg free
  1921  0009BA  C01B  F07C         	movff	?___flmul,_measure_inductance$1029
  1922  0009BE  C01C  F07D         	movff	?___flmul+1,_measure_inductance$1029+1
  1923  0009C2  C01D  F07E         	movff	?___flmul+2,_measure_inductance$1029+2
  1924  0009C6  C01E  F07F         	movff	?___flmul+3,_measure_inductance$1029+3
  1925                           
  1926                           ;measure.c: 217: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1927  0009CA  C07C  F01B         	movff	_measure_inductance$1029,___flmul@f1
  1928  0009CE  C07D  F01C         	movff	_measure_inductance$1029+1,___flmul@f1+1
  1929  0009D2  C07E  F01D         	movff	_measure_inductance$1029+2,___flmul@f1+2
  1930  0009D6  C07F  F01E         	movff	_measure_inductance$1029+3,___flmul@f1+3
  1931  0009DA  0EE6               	movlw	230
  1932  0009DC  6E1F               	movwf	___flmul@f2,c
  1933  0009DE  0EE9               	movlw	233
  1934  0009E0  6E20               	movwf	___flmul@f2+1,c
  1935  0009E2  0E1D               	movlw	29
  1936  0009E4  6E21               	movwf	___flmul@f2+2,c
  1937  0009E6  0E42               	movlw	66
  1938  0009E8  6E22               	movwf	___flmul@f2+3,c
  1939  0009EA  EC7D  F008         	call	___flmul	;wreg free
  1940  0009EE  C01B  F06C         	movff	?___flmul,measure_inductance@denominator
  1941  0009F2  C01C  F06D         	movff	?___flmul+1,measure_inductance@denominator+1
  1942  0009F6  C01D  F06E         	movff	?___flmul+2,measure_inductance@denominator+2
  1943  0009FA  C01E  F06F         	movff	?___flmul+3,measure_inductance@denominator+3
  1944                           
  1945                           ;measure.c: 218: Lin = (numerator / denominator) * 1e+15l;
  1946  0009FE  C06C  F010         	movff	measure_inductance@denominator,___fldiv@f2
  1947  000A02  C06D  F011         	movff	measure_inductance@denominator+1,___fldiv@f2+1
  1948  000A06  C06E  F012         	movff	measure_inductance@denominator+2,___fldiv@f2+2
  1949  000A0A  C06F  F013         	movff	measure_inductance@denominator+3,___fldiv@f2+3
  1950  000A0E  C068  F00C         	movff	measure_inductance@numerator,___fldiv@f1
  1951  000A12  C069  F00D         	movff	measure_inductance@numerator+1,___fldiv@f1+1
  1952  000A16  C06A  F00E         	movff	measure_inductance@numerator+2,___fldiv@f1+2
  1953  000A1A  C06B  F00F         	movff	measure_inductance@numerator+3,___fldiv@f1+3
  1954  000A1E  EC39  F00F         	call	___fldiv	;wreg free
  1955  000A22  C00C  F01B         	movff	?___fldiv,___flmul@f1
  1956  000A26  C00D  F01C         	movff	?___fldiv+1,___flmul@f1+1
  1957  000A2A  C00E  F01D         	movff	?___fldiv+2,___flmul@f1+2
  1958  000A2E  C00F  F01E         	movff	?___fldiv+3,___flmul@f1+3
  1959  000A32  0EA9               	movlw	169
  1960  000A34  6E1F               	movwf	___flmul@f2,c
  1961  000A36  0E5F               	movlw	95
  1962  000A38  6E20               	movwf	___flmul@f2+1,c
  1963  000A3A  0E63               	movlw	99
  1964  000A3C  6E21               	movwf	___flmul@f2+2,c
  1965  000A3E  0E58               	movlw	88
  1966  000A40  6E22               	movwf	___flmul@f2+3,c
  1967  000A42  EC7D  F008         	call	___flmul	;wreg free
  1968  000A46  C01B  F08F         	movff	?___flmul,measure_inductance@Lin
  1969  000A4A  C01C  F090         	movff	?___flmul+1,measure_inductance@Lin+1
  1970  000A4E  C01D  F091         	movff	?___flmul+2,measure_inductance@Lin+2
  1971  000A52  C01E  F092         	movff	?___flmul+3,measure_inductance@Lin+3
  1972                           
  1973                           ;measure.c: 220: if(Lin > 999) {
  1974  000A56  6A02               	clrf	___flge@ff1,c
  1975  000A58  0EC0               	movlw	192
  1976  000A5A  6E03               	movwf	___flge@ff1+1,c
  1977  000A5C  0E79               	movlw	121
  1978  000A5E  6E04               	movwf	___flge@ff1+2,c
  1979  000A60  0E44               	movlw	68
  1980  000A62  6E05               	movwf	___flge@ff1+3,c
  1981  000A64  C08F  F006         	movff	measure_inductance@Lin,___flge@ff2
  1982  000A68  C090  F007         	movff	measure_inductance@Lin+1,___flge@ff2+1
  1983  000A6C  C091  F008         	movff	measure_inductance@Lin+2,___flge@ff2+2
  1984  000A70  C092  F009         	movff	measure_inductance@Lin+3,___flge@ff2+3
  1985  000A74  EC67  F011         	call	___flge	;wreg free
  1986  000A78  E27A               	bc	l3683
  1987                           
  1988                           ;measure.c: 221: if(Lin > (999e+03l)) {
  1989  000A7A  0E80               	movlw	128
  1990  000A7C  6E02               	movwf	___flge@ff1,c
  1991  000A7E  0EE5               	movlw	229
  1992  000A80  6E03               	movwf	___flge@ff1+1,c
  1993  000A82  0E73               	movlw	115
  1994  000A84  6E04               	movwf	___flge@ff1+2,c
  1995  000A86  0E49               	movlw	73
  1996  000A88  6E05               	movwf	___flge@ff1+3,c
  1997  000A8A  C08F  F006         	movff	measure_inductance@Lin,___flge@ff2
  1998  000A8E  C090  F007         	movff	measure_inductance@Lin+1,___flge@ff2+1
  1999  000A92  C091  F008         	movff	measure_inductance@Lin+2,___flge@ff2+2
  2000  000A96  C092  F009         	movff	measure_inductance@Lin+3,___flge@ff2+3
  2001  000A9A  EC67  F011         	call	___flge	;wreg free
  2002  000A9E  E24C               	bc	l3679
  2003                           
  2004                           ;measure.c: 222: if(Lin > (999e+06l)) {
  2005  000AA0  0E1F               	movlw	31
  2006  000AA2  6E02               	movwf	___flge@ff1,c
  2007  000AA4  0E2E               	movlw	46
  2008  000AA6  6E03               	movwf	___flge@ff1+1,c
  2009  000AA8  0E6E               	movlw	110
  2010  000AAA  6E04               	movwf	___flge@ff1+2,c
  2011  000AAC  0E4E               	movlw	78
  2012  000AAE  6E05               	movwf	___flge@ff1+3,c
  2013  000AB0  C08F  F006         	movff	measure_inductance@Lin,___flge@ff2
  2014  000AB4  C090  F007         	movff	measure_inductance@Lin+1,___flge@ff2+1
  2015  000AB8  C091  F008         	movff	measure_inductance@Lin+2,___flge@ff2+2
  2016  000ABC  C092  F009         	movff	measure_inductance@Lin+3,___flge@ff2+3
  2017  000AC0  EC67  F011         	call	___flge	;wreg free
  2018  000AC4  E21D               	bc	l3675
  2019                           
  2020                           ;measure.c: 223: Lin = Lin / (1e+09l);
  2021  000AC6  C08F  F00C         	movff	measure_inductance@Lin,___fldiv@f1
  2022  000ACA  C090  F00D         	movff	measure_inductance@Lin+1,___fldiv@f1+1
  2023  000ACE  C091  F00E         	movff	measure_inductance@Lin+2,___fldiv@f1+2
  2024  000AD2  C092  F00F         	movff	measure_inductance@Lin+3,___fldiv@f1+3
  2025  000AD6  0E28               	movlw	40
  2026  000AD8  6E10               	movwf	___fldiv@f2,c
  2027  000ADA  0E6B               	movlw	107
  2028  000ADC  6E11               	movwf	___fldiv@f2+1,c
  2029  000ADE  0E6E               	movlw	110
  2030  000AE0  6E12               	movwf	___fldiv@f2+2,c
  2031  000AE2  0E4E               	movlw	78
  2032  000AE4  6E13               	movwf	___fldiv@f2+3,c
  2033  000AE6  EC39  F00F         	call	___fldiv	;wreg free
  2034  000AEA  C00C  F08F         	movff	?___fldiv,measure_inductance@Lin
  2035  000AEE  C00D  F090         	movff	?___fldiv+1,measure_inductance@Lin+1
  2036  000AF2  C00E  F091         	movff	?___fldiv+2,measure_inductance@Lin+2
  2037  000AF6  C00F  F092         	movff	?___fldiv+3,measure_inductance@Lin+3
  2038                           
  2039                           ;measure.c: 224: unit = 0;
  2040  000AFA  0100               	movlb	0	; () banked
  2041  000AFC  6B80               	clrf	measure_inductance@unit& (0+255),b
  2042                           
  2043                           ;measure.c: 225: } else {
  2044  000AFE  D03A               	goto	l3685
  2045  000B00                     l3675:
  2046                           
  2047                           ;measure.c: 226: Lin = Lin / (1e+06l);
  2048  000B00  C08F  F00C         	movff	measure_inductance@Lin,___fldiv@f1
  2049  000B04  C090  F00D         	movff	measure_inductance@Lin+1,___fldiv@f1+1
  2050  000B08  C091  F00E         	movff	measure_inductance@Lin+2,___fldiv@f1+2
  2051  000B0C  C092  F00F         	movff	measure_inductance@Lin+3,___fldiv@f1+3
  2052  000B10  0E00               	movlw	0
  2053  000B12  6E10               	movwf	___fldiv@f2,c
  2054  000B14  0E24               	movlw	36
  2055  000B16  6E11               	movwf	___fldiv@f2+1,c
  2056  000B18  0E74               	movlw	116
  2057  000B1A  6E12               	movwf	___fldiv@f2+2,c
  2058  000B1C  0E49               	movlw	73
  2059  000B1E  6E13               	movwf	___fldiv@f2+3,c
  2060  000B20  EC39  F00F         	call	___fldiv	;wreg free
  2061  000B24  C00C  F08F         	movff	?___fldiv,measure_inductance@Lin
  2062  000B28  C00D  F090         	movff	?___fldiv+1,measure_inductance@Lin+1
  2063  000B2C  C00E  F091         	movff	?___fldiv+2,measure_inductance@Lin+2
  2064  000B30  C00F  F092         	movff	?___fldiv+3,measure_inductance@Lin+3
  2065                           
  2066                           ;measure.c: 227: unit = 1;
  2067  000B34  0E01               	movlw	1
  2068  000B36  D01C               	goto	L1
  2069  000B38                     l3679:
  2070                           
  2071                           ;measure.c: 230: Lin = Lin / 1e+03l;
  2072  000B38  C08F  F00C         	movff	measure_inductance@Lin,___fldiv@f1
  2073  000B3C  C090  F00D         	movff	measure_inductance@Lin+1,___fldiv@f1+1
  2074  000B40  C091  F00E         	movff	measure_inductance@Lin+2,___fldiv@f1+2
  2075  000B44  C092  F00F         	movff	measure_inductance@Lin+3,___fldiv@f1+3
  2076  000B48  0E00               	movlw	0
  2077  000B4A  6E10               	movwf	___fldiv@f2,c
  2078  000B4C  6E11               	movwf	___fldiv@f2+1,c
  2079  000B4E  0E7A               	movlw	122
  2080  000B50  6E12               	movwf	___fldiv@f2+2,c
  2081  000B52  0E44               	movlw	68
  2082  000B54  6E13               	movwf	___fldiv@f2+3,c
  2083  000B56  EC39  F00F         	call	___fldiv	;wreg free
  2084  000B5A  C00C  F08F         	movff	?___fldiv,measure_inductance@Lin
  2085  000B5E  C00D  F090         	movff	?___fldiv+1,measure_inductance@Lin+1
  2086  000B62  C00E  F091         	movff	?___fldiv+2,measure_inductance@Lin+2
  2087  000B66  C00F  F092         	movff	?___fldiv+3,measure_inductance@Lin+3
  2088                           
  2089                           ;measure.c: 231: unit = 2;
  2090  000B6A  0E02               	movlw	2
  2091  000B6C  D001               	goto	L1
  2092  000B6E                     l3683:
  2093                           
  2094                           ;measure.c: 234: unit = 3;
  2095  000B6E  0E03               	movlw	3
  2096  000B70                     L1:
  2097  000B70  0100               	movlb	0	; () banked
  2098  000B72  6F80               	movwf	measure_inductance@unit& (0+255),b
  2099  000B74                     l3685:
  2100                           
  2101                           ; BSR set to: 0
  2102                           ;measure.c: 236: Lin = Lin * 100;
  2103  000B74  C08F  F01B         	movff	measure_inductance@Lin,___flmul@f1
  2104  000B78  C090  F01C         	movff	measure_inductance@Lin+1,___flmul@f1+1
  2105  000B7C  C091  F01D         	movff	measure_inductance@Lin+2,___flmul@f1+2
  2106  000B80  C092  F01E         	movff	measure_inductance@Lin+3,___flmul@f1+3
  2107  000B84  0E00               	movlw	0
  2108  000B86  6E1F               	movwf	___flmul@f2,c
  2109  000B88  6E20               	movwf	___flmul@f2+1,c
  2110  000B8A  0EC8               	movlw	200
  2111  000B8C  6E21               	movwf	___flmul@f2+2,c
  2112  000B8E  0E42               	movlw	66
  2113  000B90  6E22               	movwf	___flmul@f2+3,c
  2114  000B92  EC7D  F008         	call	___flmul	;wreg free
  2115  000B96  C01B  F08F         	movff	?___flmul,measure_inductance@Lin
  2116  000B9A  C01C  F090         	movff	?___flmul+1,measure_inductance@Lin+1
  2117  000B9E  C01D  F091         	movff	?___flmul+2,measure_inductance@Lin+2
  2118  000BA2  C01E  F092         	movff	?___flmul+3,measure_inductance@Lin+3
  2119                           
  2120                           ;measure.c: 237: var = (uint16_t)Lin;
  2121  000BA6  C08F  F060         	movff	measure_inductance@Lin,___fltol@f1
  2122  000BAA  C090  F061         	movff	measure_inductance@Lin+1,___fltol@f1+1
  2123  000BAE  C091  F062         	movff	measure_inductance@Lin+2,___fltol@f1+2
  2124  000BB2  C092  F063         	movff	measure_inductance@Lin+3,___fltol@f1+3
  2125  000BB6  EC36  F010         	call	___fltol	;wreg free
  2126  000BBA  C060  F08D         	movff	?___fltol,measure_inductance@var
  2127  000BBE  C061  F08E         	movff	?___fltol+1,measure_inductance@var+1
  2128                           
  2129                           ; BSR set to: 0
  2130                           ;measure.c: 239: print_reading(var);
  2131  000BC2  C08D  F034         	movff	measure_inductance@var,print_reading@measurement
  2132  000BC6  C08E  F035         	movff	measure_inductance@var+1,print_reading@measurement+1
  2133  000BCA  EC02  F011         	call	_print_reading	;wreg free
  2134                           
  2135                           ;measure.c: 240: print_unit(unit);
  2136  000BCE  0100               	movlb	0	; () banked
  2137  000BD0  5180               	movf	measure_inductance@unit& (0+255),w,b
  2138  000BD2  EC43  F013         	call	_print_unit
  2139  000BD6  0012               	return		;funcret
  2140  000BD8                     __end_of_measure_inductance:
  2141                           	opt stack 0
  2142                           tblptru	equ	0xFF8
  2143                           tblptrh	equ	0xFF7
  2144                           tblptrl	equ	0xFF6
  2145                           tablat	equ	0xFF5
  2146                           intcon	equ	0xFF2
  2147                           intcon2	equ	0xFF1
  2148                           postinc0	equ	0xFEE
  2149                           wreg	equ	0xFE8
  2150                           postdec1	equ	0xFE5
  2151                           fsr1l	equ	0xFE1
  2152                           status	equ	0xFD8
  2153                           
  2154 ;; *************** function _measure_capacitance *****************
  2155 ;; Defined at:
  2156 ;;		line 123 in file "../../../src/measure.c"
  2157 ;; Parameters:    Size  Location     Type
  2158 ;;		None
  2159 ;; Auto vars:     Size  Location     Type
  2160 ;;  Cin             4   23[BANK0 ] unsigned char 
  2161 ;;  var             2   21[BANK0 ] unsigned int 
  2162 ;;  unit            1   20[BANK0 ] unsigned char 
  2163 ;; Return value:  Size  Location     Type
  2164 ;;		None               void
  2165 ;; Registers used:
  2166 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2167 ;; Tracked objects:
  2168 ;;		On entry : F/0
  2169 ;;		On exit  : 0/0
  2170 ;;		Unchanged: 0/0
  2171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2172 ;;      Params:         0       0       0       0       0       0       0
  2173 ;;      Locals:         0      19       0       0       0       0       0
  2174 ;;      Temps:          0       0       0       0       0       0       0
  2175 ;;      Totals:         0      19       0       0       0       0       0
  2176 ;;Total ram usage:       19 bytes
  2177 ;; Hardware stack levels used:    1
  2178 ;; Hardware stack levels required when called:    6
  2179 ;; This function calls:
  2180 ;;		___fldiv
  2181 ;;		___flge
  2182 ;;		___flmul
  2183 ;;		___flsub
  2184 ;;		___fltol
  2185 ;;		___lwtofl
  2186 ;;		_lcd_gotoxy
  2187 ;;		_measure_freq
  2188 ;;		_print_reading
  2189 ;;		_print_unit
  2190 ;;		_put_str
  2191 ;; This function is called by:
  2192 ;;		_main
  2193 ;; This function uses a non-reentrant model
  2194 ;;
  2195                           
  2196                           	psect	text5
  2197  000BD8                     __ptext5:
  2198                           	opt stack 0
  2199  000BD8                     _measure_capacitance:
  2200                           	opt stack 24
  2201                           
  2202                           ; BSR set to: 0
  2203                           ;measure.c: 124: uint8_t unit;
  2204                           ;measure.c: 125: uint16_t var;
  2205                           ;measure.c: 127: double Cin;
  2206                           ;measure.c: 131: lcd_gotoxy(0, 0);
  2207                           
  2208                           ;incstack = 0
  2209  000BD8  0E00               	movlw	0
  2210  000BDA  6A06               	clrf	lcd_gotoxy@row,c
  2211  000BDC  EC9C  F012         	call	_lcd_gotoxy
  2212                           
  2213                           ;measure.c: 132: put_str("Capacity ");
  2214  000BE0  0E75               	movlw	STR_20& (0+255)
  2215  000BE2  ECD1  F012         	call	_put_str
  2216                           
  2217                           ;measure.c: 134: var = measure_freq();
  2218  000BE6  EC2F  F00D         	call	_measure_freq	;wreg free
  2219  000BEA  C034  F075         	movff	?_measure_freq,measure_capacitance@var
  2220  000BEE  C035  F076         	movff	?_measure_freq+1,measure_capacitance@var+1
  2221                           
  2222                           ;measure.c: 136: F3 = (double)var;
  2223  000BF2  C075  F039         	movff	measure_capacitance@var,___lwtofl@c
  2224  000BF6  C076  F03A         	movff	measure_capacitance@var+1,___lwtofl@c+1
  2225  000BFA  EC2E  F013         	call	___lwtofl	;wreg free
  2226  000BFE  C039  F0B0         	movff	?___lwtofl,_F3
  2227  000C02  C03A  F0B1         	movff	?___lwtofl+1,_F3+1
  2228  000C06  C03B  F0B2         	movff	?___lwtofl+2,_F3+2
  2229  000C0A  C03C  F0B3         	movff	?___lwtofl+3,_F3+3
  2230                           
  2231                           ;measure.c: 161: if(F3 > F1)
  2232  000C0E  C0D6  F002         	movff	_F1,___flge@ff1
  2233  000C12  C0D7  F003         	movff	_F1+1,___flge@ff1+1
  2234  000C16  C0D8  F004         	movff	_F1+2,___flge@ff1+2
  2235  000C1A  C0D9  F005         	movff	_F1+3,___flge@ff1+3
  2236  000C1E  C0B0  F006         	movff	_F3,___flge@ff2
  2237  000C22  C0B1  F007         	movff	_F3+1,___flge@ff2+1
  2238  000C26  C0B2  F008         	movff	_F3+2,___flge@ff2+2
  2239  000C2A  C0B3  F009         	movff	_F3+3,___flge@ff2+3
  2240  000C2E  EC67  F011         	call	___flge	;wreg free
  2241  000C32  E208               	bc	l3603
  2242                           
  2243                           ;measure.c: 162: F3 = F1;
  2244  000C34  C0D6  F0B0         	movff	_F1,_F3
  2245  000C38  C0D7  F0B1         	movff	_F1+1,_F3+1
  2246  000C3C  C0D8  F0B2         	movff	_F1+2,_F3+2
  2247  000C40  C0D9  F0B3         	movff	_F1+3,_F3+3
  2248  000C44                     l3603:
  2249                           
  2250                           ;measure.c: 164: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2251  000C44  C0B0  F01F         	movff	_F3,___flmul@f2
  2252  000C48  C0B1  F020         	movff	_F3+1,___flmul@f2+1
  2253  000C4C  C0B2  F021         	movff	_F3+2,___flmul@f2+2
  2254  000C50  C0B3  F022         	movff	_F3+3,___flmul@f2+3
  2255  000C54  C0B0  F01B         	movff	_F3,___flmul@f1
  2256  000C58  C0B1  F01C         	movff	_F3+1,___flmul@f1+1
  2257  000C5C  C0B2  F01D         	movff	_F3+2,___flmul@f1+2
  2258  000C60  C0B3  F01E         	movff	_F3+3,___flmul@f1+3
  2259  000C64  EC7D  F008         	call	___flmul	;wreg free
  2260  000C68  C01B  F046         	movff	?___flmul,___flsub@f2
  2261  000C6C  C01C  F047         	movff	?___flmul+1,___flsub@f2+1
  2262  000C70  C01D  F048         	movff	?___flmul+2,___flsub@f2+2
  2263  000C74  C01E  F049         	movff	?___flmul+3,___flsub@f2+3
  2264  000C78  C0D6  F01F         	movff	_F1,___flmul@f2
  2265  000C7C  C0D7  F020         	movff	_F1+1,___flmul@f2+1
  2266  000C80  C0D8  F021         	movff	_F1+2,___flmul@f2+2
  2267  000C84  C0D9  F022         	movff	_F1+3,___flmul@f2+3
  2268  000C88  C0D6  F01B         	movff	_F1,___flmul@f1
  2269  000C8C  C0D7  F01C         	movff	_F1+1,___flmul@f1+1
  2270  000C90  C0D8  F01D         	movff	_F1+2,___flmul@f1+2
  2271  000C94  C0D9  F01E         	movff	_F1+3,___flmul@f1+3
  2272  000C98  EC7D  F008         	call	___flmul	;wreg free
  2273  000C9C  C01B  F042         	movff	?___flmul,___flsub@f1
  2274  000CA0  C01C  F043         	movff	?___flmul+1,___flsub@f1+1
  2275  000CA4  C01D  F044         	movff	?___flmul+2,___flsub@f1+2
  2276  000CA8  C01E  F045         	movff	?___flmul+3,___flsub@f1+3
  2277  000CAC  EC20  F012         	call	___flsub	;wreg free
  2278  000CB0  C042  F068         	movff	?___flsub,_measure_capacitance$1020
  2279  000CB4  C043  F069         	movff	?___flsub+1,_measure_capacitance$1020+1
  2280  000CB8  C044  F06A         	movff	?___flsub+2,_measure_capacitance$1020+2
  2281  000CBC  C045  F06B         	movff	?___flsub+3,_measure_capacitance$1020+3
  2282                           
  2283                           ;measure.c: 164: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2284  000CC0  C0AC  F01F         	movff	_F2,___flmul@f2
  2285  000CC4  C0AD  F020         	movff	_F2+1,___flmul@f2+1
  2286  000CC8  C0AE  F021         	movff	_F2+2,___flmul@f2+2
  2287  000CCC  C0AF  F022         	movff	_F2+3,___flmul@f2+3
  2288  000CD0  C068  F01B         	movff	_measure_capacitance$1020,___flmul@f1
  2289  000CD4  C069  F01C         	movff	_measure_capacitance$1020+1,___flmul@f1+1
  2290  000CD8  C06A  F01D         	movff	_measure_capacitance$1020+2,___flmul@f1+2
  2291  000CDC  C06B  F01E         	movff	_measure_capacitance$1020+3,___flmul@f1+3
  2292  000CE0  EC7D  F008         	call	___flmul	;wreg free
  2293  000CE4  C01B  F06C         	movff	?___flmul,_measure_capacitance$1021
  2294  000CE8  C01C  F06D         	movff	?___flmul+1,_measure_capacitance$1021+1
  2295  000CEC  C01D  F06E         	movff	?___flmul+2,_measure_capacitance$1021+2
  2296  000CF0  C01E  F06F         	movff	?___flmul+3,_measure_capacitance$1021+3
  2297                           
  2298                           ;measure.c: 164: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2299  000CF4  C0AC  F01F         	movff	_F2,___flmul@f2
  2300  000CF8  C0AD  F020         	movff	_F2+1,___flmul@f2+1
  2301  000CFC  C0AE  F021         	movff	_F2+2,___flmul@f2+2
  2302  000D00  C0AF  F022         	movff	_F2+3,___flmul@f2+3
  2303  000D04  C06C  F01B         	movff	_measure_capacitance$1021,___flmul@f1
  2304  000D08  C06D  F01C         	movff	_measure_capacitance$1021+1,___flmul@f1+1
  2305  000D0C  C06E  F01D         	movff	_measure_capacitance$1021+2,___flmul@f1+2
  2306  000D10  C06F  F01E         	movff	_measure_capacitance$1021+3,___flmul@f1+3
  2307  000D14  EC7D  F008         	call	___flmul	;wreg free
  2308  000D18  C01B  F070         	movff	?___flmul,_measure_capacitance$1022
  2309  000D1C  C01C  F071         	movff	?___flmul+1,_measure_capacitance$1022+1
  2310  000D20  C01D  F072         	movff	?___flmul+2,_measure_capacitance$1022+2
  2311  000D24  C01E  F073         	movff	?___flmul+3,_measure_capacitance$1022+3
  2312                           
  2313                           ;measure.c: 164: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2314  000D28  C070  F01B         	movff	_measure_capacitance$1022,___flmul@f1
  2315  000D2C  C071  F01C         	movff	_measure_capacitance$1022+1,___flmul@f1+1
  2316  000D30  C072  F01D         	movff	_measure_capacitance$1022+2,___flmul@f1+2
  2317  000D34  C073  F01E         	movff	_measure_capacitance$1022+3,___flmul@f1+3
  2318  000D38  C0DA  F01F         	movff	_CCal,___flmul@f2
  2319  000D3C  C0DB  F020         	movff	_CCal+1,___flmul@f2+1
  2320  000D40  C0DC  F021         	movff	_CCal+2,___flmul@f2+2
  2321  000D44  C0DD  F022         	movff	_CCal+3,___flmul@f2+3
  2322  000D48  EC7D  F008         	call	___flmul	;wreg free
  2323  000D4C  C01B  F077         	movff	?___flmul,measure_capacitance@Cin
  2324  000D50  C01C  F078         	movff	?___flmul+1,measure_capacitance@Cin+1
  2325  000D54  C01D  F079         	movff	?___flmul+2,measure_capacitance@Cin+2
  2326  000D58  C01E  F07A         	movff	?___flmul+3,measure_capacitance@Cin+3
  2327                           
  2328                           ;measure.c: 174: if(Cin > 999) {
  2329  000D5C  6A02               	clrf	___flge@ff1,c
  2330  000D5E  0EC0               	movlw	192
  2331  000D60  6E03               	movwf	___flge@ff1+1,c
  2332  000D62  0E79               	movlw	121
  2333  000D64  6E04               	movwf	___flge@ff1+2,c
  2334  000D66  0E44               	movlw	68
  2335  000D68  6E05               	movwf	___flge@ff1+3,c
  2336  000D6A  C077  F006         	movff	measure_capacitance@Cin,___flge@ff2
  2337  000D6E  C078  F007         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2338  000D72  C079  F008         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2339  000D76  C07A  F009         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2340  000D7A  EC67  F011         	call	___flge	;wreg free
  2341  000D7E  E279               	bc	l3623
  2342                           
  2343                           ;measure.c: 175: if(Cin > (999e+03l)) {
  2344  000D80  0E80               	movlw	128
  2345  000D82  6E02               	movwf	___flge@ff1,c
  2346  000D84  0EE5               	movlw	229
  2347  000D86  6E03               	movwf	___flge@ff1+1,c
  2348  000D88  0E73               	movlw	115
  2349  000D8A  6E04               	movwf	___flge@ff1+2,c
  2350  000D8C  0E49               	movlw	73
  2351  000D8E  6E05               	movwf	___flge@ff1+3,c
  2352  000D90  C077  F006         	movff	measure_capacitance@Cin,___flge@ff2
  2353  000D94  C078  F007         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2354  000D98  C079  F008         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2355  000D9C  C07A  F009         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2356  000DA0  EC67  F011         	call	___flge	;wreg free
  2357  000DA4  E24B               	bc	l3619
  2358                           
  2359                           ;measure.c: 176: if(Cin > (999e+06l)) {
  2360  000DA6  0E1F               	movlw	31
  2361  000DA8  6E02               	movwf	___flge@ff1,c
  2362  000DAA  0E2E               	movlw	46
  2363  000DAC  6E03               	movwf	___flge@ff1+1,c
  2364  000DAE  0E6E               	movlw	110
  2365  000DB0  6E04               	movwf	___flge@ff1+2,c
  2366  000DB2  0E4E               	movlw	78
  2367  000DB4  6E05               	movwf	___flge@ff1+3,c
  2368  000DB6  C077  F006         	movff	measure_capacitance@Cin,___flge@ff2
  2369  000DBA  C078  F007         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2370  000DBE  C079  F008         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2371  000DC2  C07A  F009         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2372  000DC6  EC67  F011         	call	___flge	;wreg free
  2373  000DCA  E21C               	bc	l3615
  2374                           
  2375                           ;measure.c: 177: Cin = Cin / (1e+09);
  2376  000DCC  C077  F00C         	movff	measure_capacitance@Cin,___fldiv@f1
  2377  000DD0  C078  F00D         	movff	measure_capacitance@Cin+1,___fldiv@f1+1
  2378  000DD4  C079  F00E         	movff	measure_capacitance@Cin+2,___fldiv@f1+2
  2379  000DD8  C07A  F00F         	movff	measure_capacitance@Cin+3,___fldiv@f1+3
  2380  000DDC  0E28               	movlw	40
  2381  000DDE  6E10               	movwf	___fldiv@f2,c
  2382  000DE0  0E6B               	movlw	107
  2383  000DE2  6E11               	movwf	___fldiv@f2+1,c
  2384  000DE4  0E6E               	movlw	110
  2385  000DE6  6E12               	movwf	___fldiv@f2+2,c
  2386  000DE8  0E4E               	movlw	78
  2387  000DEA  6E13               	movwf	___fldiv@f2+3,c
  2388  000DEC  EC39  F00F         	call	___fldiv	;wreg free
  2389  000DF0  C00C  F077         	movff	?___fldiv,measure_capacitance@Cin
  2390  000DF4  C00D  F078         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2391  000DF8  C00E  F079         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2392  000DFC  C00F  F07A         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2393                           
  2394                           ;measure.c: 178: unit = 4;
  2395  000E00  0E04               	movlw	4
  2396  000E02  D038               	goto	L2
  2397  000E04                     l3615:
  2398                           
  2399                           ;measure.c: 180: Cin = Cin / (1e+06);
  2400  000E04  C077  F00C         	movff	measure_capacitance@Cin,___fldiv@f1
  2401  000E08  C078  F00D         	movff	measure_capacitance@Cin+1,___fldiv@f1+1
  2402  000E0C  C079  F00E         	movff	measure_capacitance@Cin+2,___fldiv@f1+2
  2403  000E10  C07A  F00F         	movff	measure_capacitance@Cin+3,___fldiv@f1+3
  2404  000E14  0E00               	movlw	0
  2405  000E16  6E10               	movwf	___fldiv@f2,c
  2406  000E18  0E24               	movlw	36
  2407  000E1A  6E11               	movwf	___fldiv@f2+1,c
  2408  000E1C  0E74               	movlw	116
  2409  000E1E  6E12               	movwf	___fldiv@f2+2,c
  2410  000E20  0E49               	movlw	73
  2411  000E22  6E13               	movwf	___fldiv@f2+3,c
  2412  000E24  EC39  F00F         	call	___fldiv	;wreg free
  2413  000E28  C00C  F077         	movff	?___fldiv,measure_capacitance@Cin
  2414  000E2C  C00D  F078         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2415  000E30  C00E  F079         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2416  000E34  C00F  F07A         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2417                           
  2418                           ;measure.c: 181: unit = 5;
  2419  000E38  0E05               	movlw	5
  2420  000E3A  D01C               	goto	L2
  2421  000E3C                     l3619:
  2422                           
  2423                           ;measure.c: 184: Cin = Cin / 1e+03;
  2424  000E3C  C077  F00C         	movff	measure_capacitance@Cin,___fldiv@f1
  2425  000E40  C078  F00D         	movff	measure_capacitance@Cin+1,___fldiv@f1+1
  2426  000E44  C079  F00E         	movff	measure_capacitance@Cin+2,___fldiv@f1+2
  2427  000E48  C07A  F00F         	movff	measure_capacitance@Cin+3,___fldiv@f1+3
  2428  000E4C  0E00               	movlw	0
  2429  000E4E  6E10               	movwf	___fldiv@f2,c
  2430  000E50  6E11               	movwf	___fldiv@f2+1,c
  2431  000E52  0E7A               	movlw	122
  2432  000E54  6E12               	movwf	___fldiv@f2+2,c
  2433  000E56  0E44               	movlw	68
  2434  000E58  6E13               	movwf	___fldiv@f2+3,c
  2435  000E5A  EC39  F00F         	call	___fldiv	;wreg free
  2436  000E5E  C00C  F077         	movff	?___fldiv,measure_capacitance@Cin
  2437  000E62  C00D  F078         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2438  000E66  C00E  F079         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2439  000E6A  C00F  F07A         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2440                           
  2441                           ;measure.c: 185: unit = 6;
  2442  000E6E  0E06               	movlw	6
  2443  000E70  D001               	goto	L2
  2444  000E72                     l3623:
  2445                           
  2446                           ;measure.c: 188: unit = 7;
  2447  000E72  0E07               	movlw	7
  2448  000E74                     L2:
  2449  000E74  0100               	movlb	0	; () banked
  2450  000E76  6F74               	movwf	measure_capacitance@unit& (0+255),b
  2451                           
  2452                           ; BSR set to: 0
  2453                           ;measure.c: 190: Cin = Cin * 100;
  2454  000E78  C077  F01B         	movff	measure_capacitance@Cin,___flmul@f1
  2455  000E7C  C078  F01C         	movff	measure_capacitance@Cin+1,___flmul@f1+1
  2456  000E80  C079  F01D         	movff	measure_capacitance@Cin+2,___flmul@f1+2
  2457  000E84  C07A  F01E         	movff	measure_capacitance@Cin+3,___flmul@f1+3
  2458  000E88  0E00               	movlw	0
  2459  000E8A  6E1F               	movwf	___flmul@f2,c
  2460  000E8C  6E20               	movwf	___flmul@f2+1,c
  2461  000E8E  0EC8               	movlw	200
  2462  000E90  6E21               	movwf	___flmul@f2+2,c
  2463  000E92  0E42               	movlw	66
  2464  000E94  6E22               	movwf	___flmul@f2+3,c
  2465  000E96  EC7D  F008         	call	___flmul	;wreg free
  2466  000E9A  C01B  F077         	movff	?___flmul,measure_capacitance@Cin
  2467  000E9E  C01C  F078         	movff	?___flmul+1,measure_capacitance@Cin+1
  2468  000EA2  C01D  F079         	movff	?___flmul+2,measure_capacitance@Cin+2
  2469  000EA6  C01E  F07A         	movff	?___flmul+3,measure_capacitance@Cin+3
  2470                           
  2471                           ;measure.c: 191: var = (uint16_t)Cin;
  2472  000EAA  C077  F060         	movff	measure_capacitance@Cin,___fltol@f1
  2473  000EAE  C078  F061         	movff	measure_capacitance@Cin+1,___fltol@f1+1
  2474  000EB2  C079  F062         	movff	measure_capacitance@Cin+2,___fltol@f1+2
  2475  000EB6  C07A  F063         	movff	measure_capacitance@Cin+3,___fltol@f1+3
  2476  000EBA  EC36  F010         	call	___fltol	;wreg free
  2477  000EBE  C060  F075         	movff	?___fltol,measure_capacitance@var
  2478  000EC2  C061  F076         	movff	?___fltol+1,measure_capacitance@var+1
  2479                           
  2480                           ; BSR set to: 0
  2481                           ;measure.c: 193: print_reading(var);
  2482  000EC6  C075  F034         	movff	measure_capacitance@var,print_reading@measurement
  2483  000ECA  C076  F035         	movff	measure_capacitance@var+1,print_reading@measurement+1
  2484  000ECE  EC02  F011         	call	_print_reading	;wreg free
  2485                           
  2486                           ;measure.c: 194: print_unit(unit);
  2487  000ED2  0100               	movlb	0	; () banked
  2488  000ED4  5174               	movf	measure_capacitance@unit& (0+255),w,b
  2489  000ED6  EC43  F013         	call	_print_unit
  2490  000EDA  0012               	return		;funcret
  2491  000EDC                     __end_of_measure_capacitance:
  2492                           	opt stack 0
  2493                           tblptru	equ	0xFF8
  2494                           tblptrh	equ	0xFF7
  2495                           tblptrl	equ	0xFF6
  2496                           tablat	equ	0xFF5
  2497                           intcon	equ	0xFF2
  2498                           intcon2	equ	0xFF1
  2499                           postinc0	equ	0xFEE
  2500                           wreg	equ	0xFE8
  2501                           postdec1	equ	0xFE5
  2502                           fsr1l	equ	0xFE1
  2503                           status	equ	0xFD8
  2504                           
  2505 ;; *************** function _print_unit *****************
  2506 ;; Defined at:
  2507 ;;		line 123 in file "../../../src/print.c"
  2508 ;; Parameters:    Size  Location     Type
  2509 ;;  unit            1    wreg     unsigned char 
  2510 ;; Auto vars:     Size  Location     Type
  2511 ;;  unit            1    0[COMRAM] unsigned char 
  2512 ;; Return value:  Size  Location     Type
  2513 ;;		None               void
  2514 ;; Registers used:
  2515 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2516 ;; Tracked objects:
  2517 ;;		On entry : F/0
  2518 ;;		On exit  : 0/0
  2519 ;;		Unchanged: 0/0
  2520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2521 ;;      Params:         0       0       0       0       0       0       0
  2522 ;;      Locals:         0       0       0       0       0       0       0
  2523 ;;      Temps:          2       0       0       0       0       0       0
  2524 ;;      Totals:         2       0       0       0       0       0       0
  2525 ;;Total ram usage:        2 bytes
  2526 ;; Hardware stack levels used:    1
  2527 ;; Hardware stack levels required when called:    5
  2528 ;; This function calls:
  2529 ;;		_lcd_gotoxy
  2530 ;; This function is called by:
  2531 ;;		_measure_capacitance
  2532 ;;		_measure_inductance
  2533 ;; This function uses a non-reentrant model
  2534 ;;
  2535                           
  2536                           	psect	text6
  2537  002686                     __ptext6:
  2538                           	opt stack 0
  2539  002686                     _print_unit:
  2540                           	opt stack 24
  2541                           
  2542                           ; BSR set to: 0
  2543                           ;print.c: 131: static const char* units[8] = {"H", "mH", "uH", "nH", "mF", "uF", "nF", "
      +                          pF"};
  2544                           ;print.c: 132: lcd_gotoxy(14, 0);
  2545                           
  2546                           ;incstack = 0
  2547  002686  6A06               	clrf	lcd_gotoxy@row,c
  2548  002688  0E0E               	movlw	14
  2549  00268A  EC9C  F012         	call	_lcd_gotoxy
  2550                           
  2551                           ;print.c: 136: lcd_gotoxy(16 - (buffer.n - buffer.p), 0);
  2552  00268E  6A06               	clrf	lcd_gotoxy@row,c
  2553  002690  0100               	movlb	0	; () banked
  2554  002692  39D5               	swapf	(_buffer+16)& (0+255),w,b
  2555  002694  0B0F               	andlw	15
  2556  002696  6E0C               	movwf	??_print_unit& (0+255),c
  2557  002698  51D5               	movf	(_buffer+16)& (0+255),w,b
  2558  00269A  0B0F               	andlw	15
  2559  00269C  6E0D               	movwf	(??_print_unit+1)& (0+255),c
  2560  00269E  500C               	movf	??_print_unit,w,c
  2561  0026A0  5C0D               	subwf	??_print_unit+1,w,c
  2562  0026A2  0F10               	addlw	16
  2563  0026A4  EC9C  F012         	call	_lcd_gotoxy
  2564  0026A8  0012               	return		;funcret
  2565  0026AA                     __end_of_print_unit:
  2566                           	opt stack 0
  2567                           tblptru	equ	0xFF8
  2568                           tblptrh	equ	0xFF7
  2569                           tblptrl	equ	0xFF6
  2570                           tablat	equ	0xFF5
  2571                           intcon	equ	0xFF2
  2572                           intcon2	equ	0xFF1
  2573                           postinc0	equ	0xFEE
  2574                           wreg	equ	0xFE8
  2575                           postdec1	equ	0xFE5
  2576                           fsr1l	equ	0xFE1
  2577                           status	equ	0xFD8
  2578                           
  2579 ;; *************** function _print_reading *****************
  2580 ;; Defined at:
  2581 ;;		line 146 in file "../../../src/print.c"
  2582 ;; Parameters:    Size  Location     Type
  2583 ;;  measurement     2   51[COMRAM] unsigned int 
  2584 ;; Auto vars:     Size  Location     Type
  2585 ;;		None
  2586 ;; Return value:  Size  Location     Type
  2587 ;;		None               void
  2588 ;; Registers used:
  2589 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2590 ;; Tracked objects:
  2591 ;;		On entry : F/0
  2592 ;;		On exit  : 0/0
  2593 ;;		Unchanged: 0/0
  2594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2595 ;;      Params:         2       0       0       0       0       0       0
  2596 ;;      Locals:         4       0       0       0       0       0       0
  2597 ;;      Temps:          0       0       0       0       0       0       0
  2598 ;;      Totals:         6       0       0       0       0       0       0
  2599 ;;Total ram usage:        6 bytes
  2600 ;; Hardware stack levels used:    1
  2601 ;; Hardware stack levels required when called:    5
  2602 ;; This function calls:
  2603 ;;		___lwdiv
  2604 ;;		___lwmod
  2605 ;;		_format_number
  2606 ;;		_lcd_gotoxy
  2607 ;;		_lcd_puts
  2608 ;; This function is called by:
  2609 ;;		_measure_capacitance
  2610 ;;		_measure_inductance
  2611 ;; This function uses a non-reentrant model
  2612 ;;
  2613                           
  2614                           	psect	text7
  2615  002204                     __ptext7:
  2616                           	opt stack 0
  2617  002204                     _print_reading:
  2618                           	opt stack 24
  2619                           
  2620                           ; BSR set to: 0
  2621                           ;print.c: 173: lcd_gotoxy(9, 0);
  2622                           
  2623                           ;incstack = 0
  2624  002204  6A06               	clrf	lcd_gotoxy@row,c
  2625  002206  0E09               	movlw	9
  2626  002208  EC9C  F012         	call	_lcd_gotoxy
  2627                           
  2628                           ;print.c: 174: lcd_puts("     ");
  2629  00220C  0E8A               	movlw	(STR_13+1)& (0+255)
  2630  00220E  ECB8  F012         	call	_lcd_puts
  2631                           
  2632                           ;print.c: 175: lcd_gotoxy(9, 0);
  2633  002212  6A06               	clrf	lcd_gotoxy@row,c
  2634  002214  0E09               	movlw	9
  2635  002216  EC9C  F012         	call	_lcd_gotoxy
  2636                           
  2637                           ;print.c: 177: format_number(measurement / 100, 10, 0);
  2638  00221A  C034  F002         	movff	print_reading@measurement,___lwdiv@dividend
  2639  00221E  C035  F003         	movff	print_reading@measurement+1,___lwdiv@dividend+1
  2640  002222  6A05               	clrf	___lwdiv@divisor+1,c
  2641  002224  0E64               	movlw	100
  2642  002226  6E04               	movwf	___lwdiv@divisor,c
  2643  002228  ECB2  F011         	call	___lwdiv	;wreg free
  2644  00222C  C002  F036         	movff	?___lwdiv,_print_reading$1014
  2645  002230  C003  F037         	movff	?___lwdiv+1,_print_reading$1014+1
  2646                           
  2647                           ;print.c: 177: format_number(measurement / 100, 10, 0);
  2648  002234  C036  F009         	movff	_print_reading$1014,format_number@n
  2649  002238  C037  F00A         	movff	_print_reading$1014+1,format_number@n+1
  2650  00223C  0E0A               	movlw	10
  2651  00223E  6E0B               	movwf	format_number@base,c
  2652  002240  6A0C               	clrf	format_number@pad,c
  2653  002242  EC91  F00F         	call	_format_number	;wreg free
  2654                           
  2655                           ;print.c: 179: format_number(measurement % 100, 10, 0);
  2656  002246  C034  F002         	movff	print_reading@measurement,___lwmod@dividend
  2657  00224A  C035  F003         	movff	print_reading@measurement+1,___lwmod@dividend+1
  2658  00224E  6A05               	clrf	___lwmod@divisor+1,c
  2659  002250  0E64               	movlw	100
  2660  002252  6E04               	movwf	___lwmod@divisor,c
  2661  002254  EC42  F012         	call	___lwmod	;wreg free
  2662  002258  C002  F038         	movff	?___lwmod,_print_reading$1015
  2663  00225C  C003  F039         	movff	?___lwmod+1,_print_reading$1015+1
  2664                           
  2665                           ;print.c: 179: format_number(measurement % 100, 10, 0);
  2666  002260  C038  F009         	movff	_print_reading$1015,format_number@n
  2667  002264  C039  F00A         	movff	_print_reading$1015+1,format_number@n+1
  2668  002268  0E0A               	movlw	10
  2669  00226A  6E0B               	movwf	format_number@base,c
  2670  00226C  6A0C               	clrf	format_number@pad,c
  2671  00226E  EC91  F00F         	call	_format_number	;wreg free
  2672  002272  0012               	return		;funcret
  2673  002274                     __end_of_print_reading:
  2674                           	opt stack 0
  2675                           tblptru	equ	0xFF8
  2676                           tblptrh	equ	0xFF7
  2677                           tblptrl	equ	0xFF6
  2678                           tablat	equ	0xFF5
  2679                           intcon	equ	0xFF2
  2680                           intcon2	equ	0xFF1
  2681                           postinc0	equ	0xFEE
  2682                           wreg	equ	0xFE8
  2683                           postdec1	equ	0xFE5
  2684                           fsr1l	equ	0xFE1
  2685                           status	equ	0xFD8
  2686                           
  2687 ;; *************** function _lcd_puts *****************
  2688 ;; Defined at:
  2689 ;;		line 163 in file "../../../lib/lcd44780.c"
  2690 ;; Parameters:    Size  Location     Type
  2691 ;;  string          1    wreg     PTR const unsigned char 
  2692 ;;		 -> STR_16(5), STR_15(6), STR_14(7), STR_13(7), 
  2693 ;;		 -> STR_12(10), STR_11(4), STR_10(4), STR_9(6), 
  2694 ;; Auto vars:     Size  Location     Type
  2695 ;;  string          1    6[COMRAM] PTR const unsigned char 
  2696 ;;		 -> STR_16(5), STR_15(6), STR_14(7), STR_13(7), 
  2697 ;;		 -> STR_12(10), STR_11(4), STR_10(4), STR_9(6), 
  2698 ;;  i               1    5[COMRAM] unsigned char 
  2699 ;; Return value:  Size  Location     Type
  2700 ;;		None               void
  2701 ;; Registers used:
  2702 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2703 ;; Tracked objects:
  2704 ;;		On entry : 0/0
  2705 ;;		On exit  : 0/0
  2706 ;;		Unchanged: 0/0
  2707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2708 ;;      Params:         0       0       0       0       0       0       0
  2709 ;;      Locals:         2       0       0       0       0       0       0
  2710 ;;      Temps:          1       0       0       0       0       0       0
  2711 ;;      Totals:         3       0       0       0       0       0       0
  2712 ;;Total ram usage:        3 bytes
  2713 ;; Hardware stack levels used:    1
  2714 ;; Hardware stack levels required when called:    3
  2715 ;; This function calls:
  2716 ;;		_lcd_send
  2717 ;; This function is called by:
  2718 ;;		_print_reading
  2719 ;;		_print_indicator
  2720 ;;		_main
  2721 ;; This function uses a non-reentrant model
  2722 ;;
  2723                           
  2724                           	psect	text8
  2725  002570                     __ptext8:
  2726                           	opt stack 0
  2727  002570                     _lcd_puts:
  2728                           	opt stack 26
  2729                           
  2730                           ;incstack = 0
  2731                           ;lcd_puts@string stored from wreg
  2732  002570  6E07               	movwf	lcd_puts@string,c
  2733                           
  2734                           ;lcd44780.c: 164: uint8_t i;
  2735                           ;lcd44780.c: 165: for(i = 0; string[i]; i++) lcd_send((string[i]), 1);
  2736  002572  6A06               	clrf	lcd_puts@i,c
  2737  002574  D00C               	goto	l2573
  2738  002576                     l2569:
  2739  002576  0E01               	movlw	1
  2740  002578  6E03               	movwf	lcd_send@mode,c
  2741  00257A  5007               	movf	lcd_puts@string,w,c
  2742  00257C  2406               	addwf	lcd_puts@i,w,c
  2743  00257E  6E05               	movwf	??_lcd_puts& (0+255),c
  2744  002580  C005  FFF6         	movff	??_lcd_puts,tblptrl
  2745  002584                     	if	0	;There is only one active tblptr byte
  2746  002584                     	endif
  2747  002584                     	if	0	;tblptru may be non-zero
  2748  002584                     	endif
  2749  002584                     	if	0	;tblptru may be non-zero
  2750  002584                     	endif
  2751  002584  0008               	tblrd		*
  2752  002586  50F5               	movf	tablat,w,c
  2753  002588  EC94  F013         	call	_lcd_send
  2754  00258C  2A06               	incf	lcd_puts@i,f,c
  2755  00258E                     l2573:
  2756  00258E  5007               	movf	lcd_puts@string,w,c
  2757  002590  2406               	addwf	lcd_puts@i,w,c
  2758  002592  6E05               	movwf	??_lcd_puts& (0+255),c
  2759  002594  C005  FFF6         	movff	??_lcd_puts,tblptrl
  2760  002598                     	if	0	;There is only one active tblptr byte
  2761  002598                     	endif
  2762  002598                     	if	0	;tblptru may be non-zero
  2763  002598                     	endif
  2764  002598                     	if	0	;tblptru may be non-zero
  2765  002598                     	endif
  2766  002598  0008               	tblrd		*
  2767  00259A  50F5               	movf	tablat,w,c
  2768  00259C  B4D8               	btfsc	status,2,c
  2769  00259E  0012               	return		;funcret
  2770  0025A0  D7EA               	goto	l2569
  2771  0025A2                     __end_of_lcd_puts:
  2772                           	opt stack 0
  2773                           tblptru	equ	0xFF8
  2774                           tblptrh	equ	0xFF7
  2775                           tblptrl	equ	0xFF6
  2776                           tablat	equ	0xFF5
  2777                           intcon	equ	0xFF2
  2778                           intcon2	equ	0xFF1
  2779                           postinc0	equ	0xFEE
  2780                           wreg	equ	0xFE8
  2781                           postdec1	equ	0xFE5
  2782                           fsr1l	equ	0xFE1
  2783                           status	equ	0xFD8
  2784                           
  2785 ;; *************** function _lcd_init *****************
  2786 ;; Defined at:
  2787 ;;		line 484 in file "../../../lib/lcd44780.c"
  2788 ;; Parameters:    Size  Location     Type
  2789 ;;  fourbitmode     1    wreg     unsigned char 
  2790 ;; Auto vars:     Size  Location     Type
  2791 ;;  fourbitmode     1    1[COMRAM] unsigned char 
  2792 ;; Return value:  Size  Location     Type
  2793 ;;		None               void
  2794 ;; Registers used:
  2795 ;;		wreg, status,2, status,0
  2796 ;; Tracked objects:
  2797 ;;		On entry : 0/0
  2798 ;;		On exit  : F/0
  2799 ;;		Unchanged: 0/0
  2800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2801 ;;      Params:         0       0       0       0       0       0       0
  2802 ;;      Locals:         3       0       0       0       0       0       0
  2803 ;;      Temps:          0       0       0       0       0       0       0
  2804 ;;      Totals:         3       0       0       0       0       0       0
  2805 ;;Total ram usage:        3 bytes
  2806 ;; Hardware stack levels used:    1
  2807 ;; Hardware stack levels required when called:    1
  2808 ;; This function calls:
  2809 ;;		Nothing
  2810 ;; This function is called by:
  2811 ;;		_main
  2812 ;; This function uses a non-reentrant model
  2813 ;;
  2814                           
  2815                           	psect	text9
  2816  002630                     __ptext9:
  2817                           	opt stack 0
  2818  002630                     _lcd_init:
  2819                           	opt stack 29
  2820                           
  2821                           ;incstack = 0
  2822                           ;lcd_init@fourbitmode stored from wreg
  2823  002630  6E02               	movwf	lcd_init@fourbitmode,c
  2824                           
  2825                           ;lcd44780.c: 486: LCD_ctrl = 0;
  2826  002632  0100               	movlb	0	; () banked
  2827  002634  6BC2               	clrf	_LCD_ctrl& (0+255),b
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;lcd44780.c: 487: LCD_function = (fourbitmode ? 0x00 : 0x10);
  2831  002636  5002               	movf	lcd_init@fourbitmode,w,c
  2832  002638  E104               	bnz	l234
  2833                           
  2834                           ; BSR set to: 0
  2835  00263A  6A04               	clrf	_lcd_init$212+1,c
  2836  00263C  0E10               	movlw	16
  2837  00263E  6E03               	movwf	_lcd_init$212,c
  2838  002640  D002               	goto	l236
  2839  002642                     l234:
  2840                           
  2841                           ; BSR set to: 0
  2842  002642  6A03               	clrf	_lcd_init$212,c
  2843  002644  6A04               	clrf	_lcd_init$212+1,c
  2844  002646                     l236:
  2845                           
  2846                           ; BSR set to: 0
  2847  002646  C003  F05E         	movff	_lcd_init$212,_LCD_function
  2848                           
  2849                           ;lcd44780.c: 489: LCD_lines = 0;
  2850  00264A  6BC3               	clrf	_LCD_lines& (0+255),b
  2851                           
  2852                           ;lcd44780.c: 491: LCD_mode = 0;
  2853  00264C  6BC4               	clrf	_LCD_mode& (0+255),b
  2854                           
  2855                           ; BSR set to: 0
  2856                           ;lcd44780.c: 493: TRISB &= ~0b0100;
  2857  00264E  9493               	bcf	3987,2,c	;volatile
  2858                           
  2859                           ;lcd44780.c: 494: LATB &= ~0b0100;
  2860  002650  948A               	bcf	3978,2,c	;volatile
  2861                           
  2862                           ;lcd44780.c: 499: TRISB &= ~0b1000;
  2863  002652  9693               	bcf	3987,3,c	;volatile
  2864                           
  2865                           ;lcd44780.c: 500: LATB &= ~0b1000;
  2866  002654  968A               	bcf	3978,3,c	;volatile
  2867                           
  2868                           ; BSR set to: 0
  2869                           ;lcd44780.c: 502: LATB &= ~0b11110000;
  2870  002656  0E0F               	movlw	15
  2871  002658  168A               	andwf	3978,f,c	;volatile
  2872                           
  2873                           ; BSR set to: 0
  2874  00265A  0012               	return		;funcret
  2875  00265C                     __end_of_lcd_init:
  2876                           	opt stack 0
  2877                           tblptru	equ	0xFF8
  2878                           tblptrh	equ	0xFF7
  2879                           tblptrl	equ	0xFF6
  2880                           tablat	equ	0xFF5
  2881                           intcon	equ	0xFF2
  2882                           intcon2	equ	0xFF1
  2883                           postinc0	equ	0xFEE
  2884                           wreg	equ	0xFE8
  2885                           postdec1	equ	0xFE5
  2886                           fsr1l	equ	0xFE1
  2887                           status	equ	0xFD8
  2888                           
  2889 ;; *************** function _lcd_begin *****************
  2890 ;; Defined at:
  2891 ;;		line 411 in file "../../../lib/lcd44780.c"
  2892 ;; Parameters:    Size  Location     Type
  2893 ;;  lines           1    wreg     unsigned char 
  2894 ;;  dotsize         1    5[COMRAM] unsigned char 
  2895 ;; Auto vars:     Size  Location     Type
  2896 ;;  lines           1    7[COMRAM] unsigned char 
  2897 ;; Return value:  Size  Location     Type
  2898 ;;		None               void
  2899 ;; Registers used:
  2900 ;;		wreg, status,2, status,0, cstack
  2901 ;; Tracked objects:
  2902 ;;		On entry : F/0
  2903 ;;		On exit  : 0/0
  2904 ;;		Unchanged: 0/0
  2905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2906 ;;      Params:         1       0       0       0       0       0       0
  2907 ;;      Locals:         1       0       0       0       0       0       0
  2908 ;;      Temps:          1       0       0       0       0       0       0
  2909 ;;      Totals:         3       0       0       0       0       0       0
  2910 ;;Total ram usage:        3 bytes
  2911 ;; Hardware stack levels used:    1
  2912 ;; Hardware stack levels required when called:    4
  2913 ;; This function calls:
  2914 ;;		_lcd_command
  2915 ;;		_lcd_write4bits
  2916 ;; This function is called by:
  2917 ;;		_main
  2918 ;; This function uses a non-reentrant model
  2919 ;;
  2920                           
  2921                           	psect	text10
  2922  001B46                     __ptext10:
  2923                           	opt stack 0
  2924  001B46                     _lcd_begin:
  2925                           	opt stack 26
  2926                           
  2927                           ; BSR set to: 0
  2928                           ;incstack = 0
  2929                           ;lcd_begin@lines stored from wreg
  2930  001B46  6E08               	movwf	lcd_begin@lines,c
  2931                           
  2932                           ; BSR set to: 0
  2933                           ;lcd44780.c: 412: if(lines > 1)
  2934  001B48  0E01               	movlw	1
  2935  001B4A  6408               	cpfsgt	lcd_begin@lines,c
  2936  001B4C  D001               	goto	l2923
  2937                           
  2938                           ; BSR set to: 0
  2939                           ;lcd44780.c: 413: LCD_function |= 0x08;
  2940  001B4E  865E               	bsf	_LCD_function,3,c
  2941  001B50                     l2923:
  2942                           
  2943                           ; BSR set to: 0
  2944                           ;lcd44780.c: 416: LCD_lines = lines;
  2945  001B50  C008  F0C3         	movff	lcd_begin@lines,_LCD_lines
  2946                           
  2947                           ; BSR set to: 0
  2948                           ;lcd44780.c: 420: if((dotsize != 0) && (lines == 1))
  2949  001B54  5006               	movf	lcd_begin@dotsize,w,c
  2950  001B56  E003               	bz	l2931
  2951                           
  2952                           ; BSR set to: 0
  2953  001B58  0408               	decf	lcd_begin@lines,w,c
  2954  001B5A  B4D8               	btfsc	status,2,c
  2955                           
  2956                           ; BSR set to: 0
  2957                           ;lcd44780.c: 421: LCD_function |= 0x04;
  2958  001B5C  845E               	bsf	_LCD_function,2,c
  2959  001B5E                     l2931:
  2960                           
  2961                           ; BSR set to: 0
  2962                           ;lcd44780.c: 423: _delay((unsigned long)((15)*(16000000/4000.0)));
  2963  001B5E  0E4E               	movlw	78
  2964  001B60  6E07               	movwf	??_lcd_begin& (0+255),c
  2965  001B62  0EEB               	movlw	235
  2966  001B64                     u3267:
  2967  001B64  2EE8               	decfsz	wreg,f,c
  2968  001B66  D7FE               	goto	u3267
  2969  001B68  2E07               	decfsz	??_lcd_begin& (0+255),f,c
  2970  001B6A  D7FC               	goto	u3267
  2971  001B6C  F000               	nop	
  2972                           
  2973                           ;lcd44780.c: 426: LATB &= ~0b0100;
  2974  001B6E  948A               	bcf	3978,2,c	;volatile
  2975                           
  2976                           ;lcd44780.c: 427: LATB &= ~0b1000;
  2977  001B70  968A               	bcf	3978,3,c	;volatile
  2978                           
  2979                           ;lcd44780.c: 430: if(!(LCD_function & 0x10)) {
  2980  001B72  B85E               	btfsc	_LCD_function,4,c
  2981  001B74  D01B               	goto	l2949
  2982                           
  2983                           ;lcd44780.c: 434: lcd_write4bits(0x03);
  2984  001B76  0E03               	movlw	3
  2985  001B78  EC55  F013         	call	_lcd_write4bits
  2986                           
  2987                           ;lcd44780.c: 435: _delay((unsigned long)((5)*(16000000/4000.0)));
  2988  001B7C  0E1A               	movlw	26
  2989  001B7E  6E07               	movwf	??_lcd_begin& (0+255),c
  2990  001B80  0EF8               	movlw	248
  2991  001B82                     u3277:
  2992  001B82  2EE8               	decfsz	wreg,f,c
  2993  001B84  D7FE               	goto	u3277
  2994  001B86  2E07               	decfsz	??_lcd_begin& (0+255),f,c
  2995  001B88  D7FC               	goto	u3277
  2996  001B8A  D000               	nop2	
  2997                           
  2998                           ;lcd44780.c: 437: lcd_write4bits(0x03);
  2999  001B8C  0E03               	movlw	3
  3000  001B8E  EC55  F013         	call	_lcd_write4bits
  3001                           
  3002                           ;lcd44780.c: 438: _delay((unsigned long)((150)*(16000000/4000000.0)));
  3003  001B92  0EC8               	movlw	200
  3004  001B94                     u3287:
  3005  001B94  2EE8               	decfsz	wreg,f,c
  3006  001B96  D7FE               	goto	u3287
  3007                           
  3008                           ;lcd44780.c: 440: lcd_write4bits(0x03);
  3009  001B98  0E03               	movlw	3
  3010  001B9A  EC55  F013         	call	_lcd_write4bits
  3011                           
  3012                           ;lcd44780.c: 441: _delay((unsigned long)((150)*(16000000/4000000.0)));
  3013  001B9E  0EC8               	movlw	200
  3014  001BA0                     u3297:
  3015  001BA0  2EE8               	decfsz	wreg,f,c
  3016  001BA2  D7FE               	goto	u3297
  3017                           
  3018                           ;lcd44780.c: 443: lcd_write4bits(0x02);
  3019  001BA4  0E02               	movlw	2
  3020  001BA6  EC55  F013         	call	_lcd_write4bits
  3021                           
  3022                           ;lcd44780.c: 444: }
  3023  001BAA  D01C               	goto	l2957
  3024  001BAC                     l2949:
  3025                           
  3026                           ;lcd44780.c: 446: else {
  3027                           ;lcd44780.c: 450: lcd_command(0x20 | LCD_function);
  3028  001BAC  505E               	movf	_LCD_function,w,c
  3029  001BAE  0920               	iorlw	32
  3030  001BB0  ECB5  F013         	call	_lcd_command
  3031                           
  3032                           ;lcd44780.c: 451: _delay((unsigned long)((5)*(16000000/4000.0)));
  3033  001BB4  0E1A               	movlw	26
  3034  001BB6  6E07               	movwf	??_lcd_begin& (0+255),c
  3035  001BB8  0EF8               	movlw	248
  3036  001BBA                     u3307:
  3037  001BBA  2EE8               	decfsz	wreg,f,c
  3038  001BBC  D7FE               	goto	u3307
  3039  001BBE  2E07               	decfsz	??_lcd_begin& (0+255),f,c
  3040  001BC0  D7FC               	goto	u3307
  3041  001BC2  D000               	nop2	
  3042                           
  3043                           ;lcd44780.c: 454: lcd_command(0x20 | LCD_function);
  3044  001BC4  505E               	movf	_LCD_function,w,c
  3045  001BC6  0920               	iorlw	32
  3046  001BC8  ECB5  F013         	call	_lcd_command
  3047                           
  3048                           ;lcd44780.c: 455: _delay((unsigned long)((5)*(16000000/4000.0)));
  3049  001BCC  0E1A               	movlw	26
  3050  001BCE  6E07               	movwf	??_lcd_begin& (0+255),c
  3051  001BD0  0EF8               	movlw	248
  3052  001BD2                     u3317:
  3053  001BD2  2EE8               	decfsz	wreg,f,c
  3054  001BD4  D7FE               	goto	u3317
  3055  001BD6  2E07               	decfsz	??_lcd_begin& (0+255),f,c
  3056  001BD8  D7FC               	goto	u3317
  3057  001BDA  D000               	nop2	
  3058                           
  3059                           ;lcd44780.c: 459: lcd_command(0x20 | LCD_function);
  3060  001BDC  505E               	movf	_LCD_function,w,c
  3061  001BDE  0920               	iorlw	32
  3062  001BE0  ECB5  F013         	call	_lcd_command
  3063  001BE4                     l2957:
  3064                           
  3065                           ;lcd44780.c: 460: }
  3066                           ;lcd44780.c: 463: lcd_command(0x20 | LCD_function);
  3067  001BE4  505E               	movf	_LCD_function,w,c
  3068  001BE6  0920               	iorlw	32
  3069  001BE8  ECB5  F013         	call	_lcd_command
  3070                           
  3071                           ;lcd44780.c: 466: LCD_ctrl = 0x04 | 0x00 | 0x00;
  3072  001BEC  0E04               	movlw	4
  3073  001BEE  0100               	movlb	0	; () banked
  3074  001BF0  6FC2               	movwf	_LCD_ctrl& (0+255),b
  3075                           
  3076                           ; BSR set to: 0
  3077                           ;lcd44780.c: 467: lcd_command(0x08 | LCD_ctrl);
  3078  001BF2  51C2               	movf	_LCD_ctrl& (0+255),w,b
  3079  001BF4  0908               	iorlw	8
  3080  001BF6  ECB5  F013         	call	_lcd_command
  3081                           
  3082                           ;lcd44780.c: 470: lcd_command(0x01);
  3083  001BFA  0E01               	movlw	1
  3084  001BFC  ECB5  F013         	call	_lcd_command
  3085                           
  3086                           ;lcd44780.c: 471: _delay((unsigned long)((2)*(16000000/4000.0)));
  3087  001C00  0E0B               	movlw	11
  3088  001C02  6E07               	movwf	??_lcd_begin& (0+255),c
  3089  001C04  0E62               	movlw	98
  3090  001C06                     u3327:
  3091  001C06  2EE8               	decfsz	wreg,f,c
  3092  001C08  D7FE               	goto	u3327
  3093  001C0A  2E07               	decfsz	??_lcd_begin& (0+255),f,c
  3094  001C0C  D7FC               	goto	u3327
  3095  001C0E  D000               	nop2	
  3096                           
  3097                           ;lcd44780.c: 474: LCD_mode = 0x02 | 0x00;
  3098  001C10  0E02               	movlw	2
  3099  001C12  0100               	movlb	0	; () banked
  3100  001C14  6FC4               	movwf	_LCD_mode& (0+255),b
  3101                           
  3102                           ; BSR set to: 0
  3103                           ;lcd44780.c: 476: lcd_command(0x04 | LCD_mode);
  3104  001C16  51C4               	movf	_LCD_mode& (0+255),w,b
  3105  001C18  0904               	iorlw	4
  3106  001C1A  ECB5  F013         	call	_lcd_command
  3107  001C1E  0012               	return		;funcret
  3108  001C20                     __end_of_lcd_begin:
  3109                           	opt stack 0
  3110                           tblptru	equ	0xFF8
  3111                           tblptrh	equ	0xFF7
  3112                           tblptrl	equ	0xFF6
  3113                           tablat	equ	0xFF5
  3114                           intcon	equ	0xFF2
  3115                           intcon2	equ	0xFF1
  3116                           postinc0	equ	0xFEE
  3117                           wreg	equ	0xFE8
  3118                           postdec1	equ	0xFE5
  3119                           fsr1l	equ	0xFE1
  3120                           status	equ	0xFD8
  3121                           
  3122 ;; *************** function _format_double *****************
  3123 ;; Defined at:
  3124 ;;		line 77 in file "../../../lib/format.c"
  3125 ;; Parameters:    Size  Location     Type
  3126 ;;  num             4   55[BANK0 ] unsigned char 
  3127 ;; Auto vars:     Size  Location     Type
  3128 ;;  weight          4   67[BANK0 ] unsigned char 
  3129 ;;  m               2   73[BANK0 ] short 
  3130 ;;  digit           2   71[BANK0 ] short 
  3131 ;; Return value:  Size  Location     Type
  3132 ;;		None               void
  3133 ;; Registers used:
  3134 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3135 ;; Tracked objects:
  3136 ;;		On entry : 0/0
  3137 ;;		On exit  : 0/0
  3138 ;;		Unchanged: 0/0
  3139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3140 ;;      Params:         0       4       0       0       0       0       0
  3141 ;;      Locals:         0      16       0       0       0       0       0
  3142 ;;      Temps:          0       0       0       0       0       0       0
  3143 ;;      Totals:         0      20       0       0       0       0       0
  3144 ;;Total ram usage:       20 bytes
  3145 ;; Hardware stack levels used:    1
  3146 ;; Hardware stack levels required when called:    6
  3147 ;; This function calls:
  3148 ;;		___awtofl
  3149 ;;		___fldiv
  3150 ;;		___flge
  3151 ;;		___flmul
  3152 ;;		___flsub
  3153 ;;		___fltol
  3154 ;;		_buffer_putch
  3155 ;;		_floor
  3156 ;;		_log10
  3157 ;;		_pow
  3158 ;; This function is called by:
  3159 ;;		_main
  3160 ;; This function uses a non-reentrant model
  3161 ;;
  3162                           
  3163                           	psect	text11
  3164  001454                     __ptext11:
  3165                           	opt stack 0
  3166  001454                     _format_double:
  3167                           	opt stack 24
  3168                           
  3169                           ;format.c: 78: short m = (short)log10(num);
  3170                           
  3171                           ;incstack = 0
  3172  001454  C097  F054         	movff	format_double@num,log10@x
  3173  001458  C098  F055         	movff	format_double@num+1,log10@x+1
  3174  00145C  C099  F056         	movff	format_double@num+2,log10@x+2
  3175  001460  C09A  F057         	movff	format_double@num+3,log10@x+3
  3176  001464  EC3A  F011         	call	_log10	;wreg free
  3177  001468  C054  F060         	movff	?_log10,___fltol@f1
  3178  00146C  C055  F061         	movff	?_log10+1,___fltol@f1+1
  3179  001470  C056  F062         	movff	?_log10+2,___fltol@f1+2
  3180  001474  C057  F063         	movff	?_log10+3,___fltol@f1+3
  3181  001478  EC36  F010         	call	___fltol	;wreg free
  3182  00147C  C060  F0A9         	movff	?___fltol,format_double@m
  3183  001480  C061  F0AA         	movff	?___fltol+1,format_double@m+1
  3184                           
  3185                           ;format.c: 79: short digit;
  3186                           ;format.c: 82: while(num > 0 + 1.19209290e-07) {
  3187  001484  D099               	goto	l3553
  3188  001486                     l3535:
  3189                           
  3190                           ;format.c: 83: double weight = pow(10.0l, m);
  3191  001486  C0A9  F00C         	movff	format_double@m,___awtofl@c
  3192  00148A  C0AA  F00D         	movff	format_double@m+1,___awtofl@c+1
  3193  00148E  EC7F  F012         	call	___awtofl	;wreg free
  3194  001492  C00C  F09B         	movff	?___awtofl,_format_double$1018
  3195  001496  C00D  F09C         	movff	?___awtofl+1,_format_double$1018+1
  3196  00149A  C00E  F09D         	movff	?___awtofl+2,_format_double$1018+2
  3197  00149E  C00F  F09E         	movff	?___awtofl+3,_format_double$1018+3
  3198                           
  3199                           ;format.c: 83: double weight = pow(10.0l, m);
  3200  0014A2  0100               	movlb	0	; () banked
  3201  0014A4  6B82               	clrf	pow@x& (0+255),b
  3202  0014A6  6B83               	clrf	(pow@x+1)& (0+255),b
  3203  0014A8  0E20               	movlw	32
  3204  0014AA  6F84               	movwf	(pow@x+2)& (0+255),b
  3205  0014AC  0E41               	movlw	65
  3206  0014AE  6F85               	movwf	(pow@x+3)& (0+255),b
  3207  0014B0  C09B  F086         	movff	_format_double$1018,pow@y
  3208  0014B4  C09C  F087         	movff	_format_double$1018+1,pow@y+1
  3209  0014B8  C09D  F088         	movff	_format_double$1018+2,pow@y+2
  3210  0014BC  C09E  F089         	movff	_format_double$1018+3,pow@y+3
  3211  0014C0  EC61  F009         	call	_pow	;wreg free
  3212  0014C4  C082  F0A3         	movff	?_pow,format_double@weight
  3213  0014C8  C083  F0A4         	movff	?_pow+1,format_double@weight+1
  3214  0014CC  C084  F0A5         	movff	?_pow+2,format_double@weight+2
  3215  0014D0  C085  F0A6         	movff	?_pow+3,format_double@weight+3
  3216                           
  3217                           ; BSR set to: 0
  3218                           ;format.c: 84: digit = (short)floor(num / weight);
  3219  0014D4  C0A3  F010         	movff	format_double@weight,___fldiv@f2
  3220  0014D8  C0A4  F011         	movff	format_double@weight+1,___fldiv@f2+1
  3221  0014DC  C0A5  F012         	movff	format_double@weight+2,___fldiv@f2+2
  3222  0014E0  C0A6  F013         	movff	format_double@weight+3,___fldiv@f2+3
  3223  0014E4  C097  F00C         	movff	format_double@num,___fldiv@f1
  3224  0014E8  C098  F00D         	movff	format_double@num+1,___fldiv@f1+1
  3225  0014EC  C099  F00E         	movff	format_double@num+2,___fldiv@f1+2
  3226  0014F0  C09A  F00F         	movff	format_double@num+3,___fldiv@f1+3
  3227  0014F4  EC39  F00F         	call	___fldiv	;wreg free
  3228  0014F8  C00C  F06D         	movff	?___fldiv,floor@x
  3229  0014FC  C00D  F06E         	movff	?___fldiv+1,floor@x+1
  3230  001500  C00E  F06F         	movff	?___fldiv+2,floor@x+2
  3231  001504  C00F  F070         	movff	?___fldiv+3,floor@x+3
  3232  001508  EC34  F00C         	call	_floor	;wreg free
  3233  00150C  C06D  F09F         	movff	?_floor,_format_double$1019
  3234  001510  C06E  F0A0         	movff	?_floor+1,_format_double$1019+1
  3235  001514  C06F  F0A1         	movff	?_floor+2,_format_double$1019+2
  3236  001518  C070  F0A2         	movff	?_floor+3,_format_double$1019+3
  3237                           
  3238                           ;format.c: 84: digit = (short)floor(num / weight);
  3239  00151C  C09F  F060         	movff	_format_double$1019,___fltol@f1
  3240  001520  C0A0  F061         	movff	_format_double$1019+1,___fltol@f1+1
  3241  001524  C0A1  F062         	movff	_format_double$1019+2,___fltol@f1+2
  3242  001528  C0A2  F063         	movff	_format_double$1019+3,___fltol@f1+3
  3243  00152C  EC36  F010         	call	___fltol	;wreg free
  3244  001530  C060  F0A7         	movff	?___fltol,format_double@digit
  3245  001534  C061  F0A8         	movff	?___fltol+1,format_double@digit+1
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;format.c: 85: num -= (digit * weight);
  3249  001538  C097  F042         	movff	format_double@num,___flsub@f1
  3250  00153C  C098  F043         	movff	format_double@num+1,___flsub@f1+1
  3251  001540  C099  F044         	movff	format_double@num+2,___flsub@f1+2
  3252  001544  C09A  F045         	movff	format_double@num+3,___flsub@f1+3
  3253  001548  C0A3  F01F         	movff	format_double@weight,___flmul@f2
  3254  00154C  C0A4  F020         	movff	format_double@weight+1,___flmul@f2+1
  3255  001550  C0A5  F021         	movff	format_double@weight+2,___flmul@f2+2
  3256  001554  C0A6  F022         	movff	format_double@weight+3,___flmul@f2+3
  3257  001558  C0A7  F00C         	movff	format_double@digit,___awtofl@c
  3258  00155C  C0A8  F00D         	movff	format_double@digit+1,___awtofl@c+1
  3259  001560  EC7F  F012         	call	___awtofl	;wreg free
  3260  001564  C00C  F01B         	movff	?___awtofl,___flmul@f1
  3261  001568  C00D  F01C         	movff	?___awtofl+1,___flmul@f1+1
  3262  00156C  C00E  F01D         	movff	?___awtofl+2,___flmul@f1+2
  3263  001570  C00F  F01E         	movff	?___awtofl+3,___flmul@f1+3
  3264  001574  EC7D  F008         	call	___flmul	;wreg free
  3265  001578  C01B  F046         	movff	?___flmul,___flsub@f2
  3266  00157C  C01C  F047         	movff	?___flmul+1,___flsub@f2+1
  3267  001580  C01D  F048         	movff	?___flmul+2,___flsub@f2+2
  3268  001584  C01E  F049         	movff	?___flmul+3,___flsub@f2+3
  3269  001588  EC20  F012         	call	___flsub	;wreg free
  3270  00158C  C042  F097         	movff	?___flsub,format_double@num
  3271  001590  C043  F098         	movff	?___flsub+1,format_double@num+1
  3272  001594  C044  F099         	movff	?___flsub+2,format_double@num+2
  3273  001598  C045  F09A         	movff	?___flsub+3,format_double@num+3
  3274                           
  3275                           ;format.c: 86: buffer_putch((char)('0' + digit));
  3276  00159C  0100               	movlb	0	; () banked
  3277  00159E  51A7               	movf	format_double@digit& (0+255),w,b
  3278  0015A0  0F30               	addlw	48
  3279  0015A2  ECD7  F011         	call	_buffer_putch
  3280                           
  3281                           ; BSR set to: 0
  3282                           ;format.c: 87: if(m == 0)
  3283  0015A6  51A9               	movf	format_double@m& (0+255),w,b
  3284  0015A8  11AA               	iorwf	(format_double@m+1)& (0+255),w,b
  3285  0015AA  E103               	bnz	l3551
  3286                           
  3287                           ; BSR set to: 0
  3288                           ;format.c: 88: buffer_putch('.');
  3289  0015AC  0E2E               	movlw	46
  3290  0015AE  ECD7  F011         	call	_buffer_putch
  3291  0015B2                     l3551:
  3292                           
  3293                           ; BSR set to: 0
  3294                           ;format.c: 89: m--;
  3295  0015B2  07A9               	decf	format_double@m& (0+255),f,b
  3296  0015B4  A0D8               	btfss	status,0,c
  3297  0015B6  07AA               	decf	(format_double@m+1)& (0+255),f,b
  3298  0015B8                     l3553:
  3299                           
  3300                           ; BSR set to: 0
  3301  0015B8  6A02               	clrf	___flge@ff1,c
  3302  0015BA  6A03               	clrf	___flge@ff1+1,c
  3303  0015BC  6A04               	clrf	___flge@ff1+2,c
  3304  0015BE  0E34               	movlw	52
  3305  0015C0  6E05               	movwf	___flge@ff1+3,c
  3306  0015C2  C097  F006         	movff	format_double@num,___flge@ff2
  3307  0015C6  C098  F007         	movff	format_double@num+1,___flge@ff2+1
  3308  0015CA  C099  F008         	movff	format_double@num+2,___flge@ff2+2
  3309  0015CE  C09A  F009         	movff	format_double@num+3,___flge@ff2+3
  3310  0015D2  EC67  F011         	call	___flge	;wreg free
  3311  0015D6  B0D8               	btfsc	status,0,c
  3312  0015D8  0012               	return		;funcret
  3313  0015DA  D755               	goto	l3535
  3314  0015DC                     __end_of_format_double:
  3315                           	opt stack 0
  3316                           tblptru	equ	0xFF8
  3317                           tblptrh	equ	0xFF7
  3318                           tblptrl	equ	0xFF6
  3319                           tablat	equ	0xFF5
  3320                           intcon	equ	0xFF2
  3321                           intcon2	equ	0xFF1
  3322                           postinc0	equ	0xFEE
  3323                           wreg	equ	0xFE8
  3324                           postdec1	equ	0xFE5
  3325                           fsr1l	equ	0xFE1
  3326                           status	equ	0xFD8
  3327                           
  3328 ;; *************** function _pow *****************
  3329 ;; Defined at:
  3330 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\pow.c"
  3331 ;; Parameters:    Size  Location     Type
  3332 ;;  x               4   34[BANK0 ] short 
  3333 ;;  y               4   38[BANK0 ] short 
  3334 ;; Auto vars:     Size  Location     Type
  3335 ;;  yi              4   51[BANK0 ] unsigned long 
  3336 ;;  sign            1   50[BANK0 ] unsigned char 
  3337 ;; Return value:  Size  Location     Type
  3338 ;;                  4   34[BANK0 ] unsigned char 
  3339 ;; Registers used:
  3340 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3341 ;; Tracked objects:
  3342 ;;		On entry : F/0
  3343 ;;		On exit  : F/0
  3344 ;;		Unchanged: 0/0
  3345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3346 ;;      Params:         0       8       0       0       0       0       0
  3347 ;;      Locals:         0      13       0       0       0       0       0
  3348 ;;      Temps:          0       0       0       0       0       0       0
  3349 ;;      Totals:         0      21       0       0       0       0       0
  3350 ;;Total ram usage:       21 bytes
  3351 ;; Hardware stack levels used:    1
  3352 ;; Hardware stack levels required when called:    5
  3353 ;; This function calls:
  3354 ;;		___flge
  3355 ;;		___flmul
  3356 ;;		___flneg
  3357 ;;		___fltol
  3358 ;;		___lltofl
  3359 ;;		_exp
  3360 ;;		_log
  3361 ;; This function is called by:
  3362 ;;		_format_double
  3363 ;; This function uses a non-reentrant model
  3364 ;;
  3365                           
  3366                           	psect	text12
  3367  0012C2                     __ptext12:
  3368                           	opt stack 0
  3369  0012C2                     _pow:
  3370                           	opt stack 24
  3371                           
  3372                           ; BSR set to: 0
  3373                           
  3374                           ;incstack = 0
  3375  0012C2  6B92               	clrf	pow@sign& (0+255),b
  3376                           
  3377                           ; BSR set to: 0
  3378  0012C4  5182               	movf	pow@x& (0+255),w,b
  3379  0012C6  1183               	iorwf	(pow@x+1)& (0+255),w,b
  3380  0012C8  1184               	iorwf	(pow@x+2)& (0+255),w,b
  3381  0012CA  1185               	iorwf	(pow@x+3)& (0+255),w,b
  3382  0012CC  E114               	bnz	l3501
  3383                           
  3384                           ; BSR set to: 0
  3385  0012CE  6A02               	clrf	___flge@ff1,c
  3386  0012D0  6A03               	clrf	___flge@ff1+1,c
  3387  0012D2  6A04               	clrf	___flge@ff1+2,c
  3388  0012D4  6A05               	clrf	___flge@ff1+3,c
  3389  0012D6  C086  F006         	movff	pow@y,___flge@ff2
  3390  0012DA  C087  F007         	movff	pow@y+1,___flge@ff2+1
  3391  0012DE  C088  F008         	movff	pow@y+2,___flge@ff2+2
  3392  0012E2  C089  F009         	movff	pow@y+3,___flge@ff2+3
  3393  0012E6  EC67  F011         	call	___flge	;wreg free
  3394  0012EA  0100               	movlb	0	; () banked
  3395  0012EC  6B82               	clrf	?_pow& (0+255),b
  3396  0012EE  6B83               	clrf	(?_pow+1)& (0+255),b
  3397  0012F0  6B84               	clrf	(?_pow+2)& (0+255),b
  3398  0012F2  6B85               	clrf	(?_pow+3)& (0+255),b
  3399  0012F4  0012               	return	
  3400  0012F6                     l3501:
  3401                           
  3402                           ; BSR set to: 0
  3403  0012F6  5186               	movf	pow@y& (0+255),w,b
  3404  0012F8  1187               	iorwf	(pow@y+1)& (0+255),w,b
  3405  0012FA  1188               	iorwf	(pow@y+2)& (0+255),w,b
  3406  0012FC  1189               	iorwf	(pow@y+3)& (0+255),w,b
  3407  0012FE  E108               	bnz	l3507
  3408                           
  3409                           ; BSR set to: 0
  3410  001300  0E00               	movlw	0
  3411  001302  6F82               	movwf	?_pow& (0+255),b
  3412  001304  6F83               	movwf	(?_pow+1)& (0+255),b
  3413  001306  0E80               	movlw	128
  3414  001308  6F84               	movwf	(?_pow+2)& (0+255),b
  3415  00130A  0E3F               	movlw	63
  3416  00130C  6F85               	movwf	(?_pow+3)& (0+255),b
  3417  00130E  0C3F               	retlw	63
  3418  001310                     l3507:
  3419                           
  3420                           ; BSR set to: 0
  3421  001310  AF85               	btfss	(pow@x+3)& (0+255),7,b
  3422  001312  D043               	goto	l3517
  3423                           
  3424                           ; BSR set to: 0
  3425  001314  C086  F060         	movff	pow@y,___fltol@f1
  3426  001318  C087  F061         	movff	pow@y+1,___fltol@f1+1
  3427  00131C  C088  F062         	movff	pow@y+2,___fltol@f1+2
  3428  001320  C089  F063         	movff	pow@y+3,___fltol@f1+3
  3429  001324  EC36  F010         	call	___fltol	;wreg free
  3430  001328  C060  F093         	movff	?___fltol,pow@yi
  3431  00132C  C061  F094         	movff	?___fltol+1,pow@yi+1
  3432  001330  C062  F095         	movff	?___fltol+2,pow@yi+2
  3433  001334  C063  F096         	movff	?___fltol+3,pow@yi+3
  3434  001338  C093  F00C         	movff	pow@yi,___lltofl@c
  3435  00133C  C094  F00D         	movff	pow@yi+1,___lltofl@c+1
  3436  001340  C095  F00E         	movff	pow@yi+2,___lltofl@c+2
  3437  001344  C096  F00F         	movff	pow@yi+3,___lltofl@c+3
  3438  001348  EC01  F013         	call	___lltofl	;wreg free
  3439  00134C  0100               	movlb	0	; () banked
  3440  00134E  5186               	movf	pow@y& (0+255),w,b
  3441  001350  180C               	xorwf	?___lltofl,w,c
  3442  001352  E109               	bnz	u3090
  3443  001354  5187               	movf	(pow@y+1)& (0+255),w,b
  3444  001356  180D               	xorwf	?___lltofl+1,w,c
  3445  001358  E106               	bnz	u3090
  3446  00135A  5188               	movf	(pow@y+2)& (0+255),w,b
  3447  00135C  180E               	xorwf	?___lltofl+2,w,c
  3448  00135E  E103               	bnz	u3090
  3449  001360  5189               	movf	(pow@y+3)& (0+255),w,b
  3450  001362  180F               	xorwf	?___lltofl+3,w,c
  3451  001364  E005               	bz	l3513
  3452  001366                     u3090:
  3453                           
  3454                           ; BSR set to: 0
  3455  001366  6B82               	clrf	?_pow& (0+255),b
  3456  001368  6B83               	clrf	(?_pow+1)& (0+255),b
  3457  00136A  6B84               	clrf	(?_pow+2)& (0+255),b
  3458  00136C  6B85               	clrf	(?_pow+3)& (0+255),b
  3459  00136E  0012               	return	
  3460  001370                     l3513:
  3461                           
  3462                           ; BSR set to: 0
  3463  001370  5193               	movf	pow@yi& (0+255),w,b
  3464  001372  0B01               	andlw	1
  3465  001374  6F92               	movwf	pow@sign& (0+255),b
  3466                           
  3467                           ; BSR set to: 0
  3468  001376  C082  F002         	movff	pow@x,___flneg@f1
  3469  00137A  C083  F003         	movff	pow@x+1,___flneg@f1+1
  3470  00137E  C084  F004         	movff	pow@x+2,___flneg@f1+2
  3471  001382  C085  F005         	movff	pow@x+3,___flneg@f1+3
  3472  001386  EC66  F013         	call	___flneg	;wreg free
  3473  00138A  C002  F082         	movff	?___flneg,pow@x
  3474  00138E  C003  F083         	movff	?___flneg+1,pow@x+1
  3475  001392  C004  F084         	movff	?___flneg+2,pow@x+2
  3476  001396  C005  F085         	movff	?___flneg+3,pow@x+3
  3477  00139A                     l3517:
  3478                           
  3479                           ; BSR set to: 0
  3480  00139A  C082  F04E         	movff	pow@x,log@x
  3481  00139E  C083  F04F         	movff	pow@x+1,log@x+1
  3482  0013A2  C084  F050         	movff	pow@x+2,log@x+2
  3483  0013A6  C085  F051         	movff	pow@x+3,log@x+3
  3484  0013AA  ECA2  F00B         	call	_log	;wreg free
  3485  0013AE  C04E  F08A         	movff	?_log,_pow$1031
  3486  0013B2  C04F  F08B         	movff	?_log+1,_pow$1031+1
  3487  0013B6  C050  F08C         	movff	?_log+2,_pow$1031+2
  3488  0013BA  C051  F08D         	movff	?_log+3,_pow$1031+3
  3489  0013BE  C08A  F01B         	movff	_pow$1031,___flmul@f1
  3490  0013C2  C08B  F01C         	movff	_pow$1031+1,___flmul@f1+1
  3491  0013C6  C08C  F01D         	movff	_pow$1031+2,___flmul@f1+2
  3492  0013CA  C08D  F01E         	movff	_pow$1031+3,___flmul@f1+3
  3493  0013CE  C086  F01F         	movff	pow@y,___flmul@f2
  3494  0013D2  C087  F020         	movff	pow@y+1,___flmul@f2+1
  3495  0013D6  C088  F021         	movff	pow@y+2,___flmul@f2+2
  3496  0013DA  C089  F022         	movff	pow@y+3,___flmul@f2+3
  3497  0013DE  EC7D  F008         	call	___flmul	;wreg free
  3498  0013E2  C01B  F08E         	movff	?___flmul,_pow$1032
  3499  0013E6  C01C  F08F         	movff	?___flmul+1,_pow$1032+1
  3500  0013EA  C01D  F090         	movff	?___flmul+2,_pow$1032+2
  3501  0013EE  C01E  F091         	movff	?___flmul+3,_pow$1032+3
  3502  0013F2  C08E  F077         	movff	_pow$1032,exp@x
  3503  0013F6  C08F  F078         	movff	_pow$1032+1,exp@x+1
  3504  0013FA  C090  F079         	movff	_pow$1032+2,exp@x+2
  3505  0013FE  C091  F07A         	movff	_pow$1032+3,exp@x+3
  3506  001402  EC6E  F007         	call	_exp	;wreg free
  3507  001406  C077  F082         	movff	?_exp,pow@x
  3508  00140A  C078  F083         	movff	?_exp+1,pow@x+1
  3509  00140E  C079  F084         	movff	?_exp+2,pow@x+2
  3510  001412  C07A  F085         	movff	?_exp+3,pow@x+3
  3511  001416  0100               	movlb	0	; () banked
  3512  001418  5192               	movf	pow@sign& (0+255),w,b
  3513  00141A  E013               	bz	l1024
  3514                           
  3515                           ; BSR set to: 0
  3516  00141C  C082  F002         	movff	pow@x,___flneg@f1
  3517  001420  C083  F003         	movff	pow@x+1,___flneg@f1+1
  3518  001424  C084  F004         	movff	pow@x+2,___flneg@f1+2
  3519  001428  C085  F005         	movff	pow@x+3,___flneg@f1+3
  3520  00142C  EC66  F013         	call	___flneg	;wreg free
  3521  001430  C002  F082         	movff	?___flneg,?_pow
  3522  001434  C003  F083         	movff	?___flneg+1,?_pow+1
  3523  001438  C004  F084         	movff	?___flneg+2,?_pow+2
  3524  00143C  C005  F085         	movff	?___flneg+3,?_pow+3
  3525  001440  0012               	return	
  3526  001442                     l1024:
  3527                           
  3528                           ; BSR set to: 0
  3529  001442  C082  F082         	movff	pow@x,?_pow
  3530  001446  C083  F083         	movff	pow@x+1,?_pow+1
  3531  00144A  C084  F084         	movff	pow@x+2,?_pow+2
  3532  00144E  C085  F085         	movff	pow@x+3,?_pow+3
  3533                           
  3534                           ; BSR set to: 0
  3535  001452  0012               	return		;funcret
  3536  001454                     __end_of_pow:
  3537                           	opt stack 0
  3538                           tblptru	equ	0xFF8
  3539                           tblptrh	equ	0xFF7
  3540                           tblptrl	equ	0xFF6
  3541                           tablat	equ	0xFF5
  3542                           intcon	equ	0xFF2
  3543                           intcon2	equ	0xFF1
  3544                           postinc0	equ	0xFEE
  3545                           wreg	equ	0xFE8
  3546                           postdec1	equ	0xFE5
  3547                           fsr1l	equ	0xFE1
  3548                           status	equ	0xFD8
  3549                           
  3550 ;; *************** function _exp *****************
  3551 ;; Defined at:
  3552 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\exp.c"
  3553 ;; Parameters:    Size  Location     Type
  3554 ;;  x               4   23[BANK0 ] unsigned char 
  3555 ;; Auto vars:     Size  Location     Type
  3556 ;;  exponent        2   31[BANK0 ] int 
  3557 ;;  sign            1   33[BANK0 ] unsigned char 
  3558 ;; Return value:  Size  Location     Type
  3559 ;;                  4   23[BANK0 ] unsigned char 
  3560 ;; Registers used:
  3561 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3562 ;; Tracked objects:
  3563 ;;		On entry : 0/0
  3564 ;;		On exit  : 0/0
  3565 ;;		Unchanged: 0/0
  3566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3567 ;;      Params:         0       4       0       0       0       0       0
  3568 ;;      Locals:         0       7       0       0       0       0       0
  3569 ;;      Temps:          0       0       0       0       0       0       0
  3570 ;;      Totals:         0      11       0       0       0       0       0
  3571 ;;Total ram usage:       11 bytes
  3572 ;; Hardware stack levels used:    1
  3573 ;; Hardware stack levels required when called:    4
  3574 ;; This function calls:
  3575 ;;		___awtofl
  3576 ;;		___fldiv
  3577 ;;		___flge
  3578 ;;		___flmul
  3579 ;;		___flneg
  3580 ;;		___flsub
  3581 ;;		___fltol
  3582 ;;		_eval_poly
  3583 ;;		_floor
  3584 ;;		_ldexp
  3585 ;; This function is called by:
  3586 ;;		_pow
  3587 ;; This function uses a non-reentrant model
  3588 ;;
  3589                           
  3590                           	psect	text13
  3591  000EDC                     __ptext13:
  3592                           	opt stack 0
  3593  000EDC                     _exp:
  3594                           	opt stack 24
  3595                           
  3596                           ; BSR set to: 0
  3597                           ;incstack = 0
  3598  000EDC  0100               	movlb	0	; () banked
  3599  000EDE  5177               	movf	exp@x& (0+255),w,b
  3600  000EE0  1178               	iorwf	(exp@x+1)& (0+255),w,b
  3601  000EE2  1179               	iorwf	(exp@x+2)& (0+255),w,b
  3602  000EE4  117A               	iorwf	(exp@x+3)& (0+255),w,b
  3603  000EE6  E108               	bnz	l3453
  3604                           
  3605                           ; BSR set to: 0
  3606  000EE8  0E00               	movlw	0
  3607  000EEA  6F77               	movwf	?_exp& (0+255),b
  3608  000EEC  6F78               	movwf	(?_exp+1)& (0+255),b
  3609  000EEE  0E80               	movlw	128
  3610  000EF0  6F79               	movwf	(?_exp+2)& (0+255),b
  3611  000EF2  0E3F               	movlw	63
  3612  000EF4  6F7A               	movwf	(?_exp+3)& (0+255),b
  3613  000EF6  0C3F               	retlw	63
  3614  000EF8                     l3453:
  3615                           
  3616                           ; BSR set to: 0
  3617  000EF8  0E18               	movlw	24
  3618  000EFA  6E02               	movwf	___flge@ff1,c
  3619  000EFC  0E72               	movlw	114
  3620  000EFE  6E03               	movwf	___flge@ff1+1,c
  3621  000F00  0E31               	movlw	49
  3622  000F02  6E04               	movwf	___flge@ff1+2,c
  3623  000F04  0E44               	movlw	68
  3624  000F06  6E05               	movwf	___flge@ff1+3,c
  3625  000F08  C077  F006         	movff	exp@x,___flge@ff2
  3626  000F0C  C078  F007         	movff	exp@x+1,___flge@ff2+1
  3627  000F10  C079  F008         	movff	exp@x+2,___flge@ff2+2
  3628  000F14  C07A  F009         	movff	exp@x+3,___flge@ff2+3
  3629  000F18  EC67  F011         	call	___flge	;wreg free
  3630  000F1C  E207               	bc	l3459
  3631  000F1E  0100               	movlb	0	; () banked
  3632  000F20  6977               	setf	?_exp& (0+255),b
  3633  000F22  6978               	setf	(?_exp+1)& (0+255),b
  3634  000F24  0E7F               	movlw	127
  3635  000F26  6F79               	movwf	(?_exp+2)& (0+255),b
  3636  000F28  6F7A               	movwf	(?_exp+3)& (0+255),b
  3637  000F2A  0C7F               	retlw	127
  3638  000F2C                     l3459:
  3639  000F2C  C077  F002         	movff	exp@x,___flge@ff1
  3640  000F30  C078  F003         	movff	exp@x+1,___flge@ff1+1
  3641  000F34  C079  F004         	movff	exp@x+2,___flge@ff1+2
  3642  000F38  C07A  F005         	movff	exp@x+3,___flge@ff1+3
  3643  000F3C  0E87               	movlw	135
  3644  000F3E  6E06               	movwf	___flge@ff2,c
  3645  000F40  0E48               	movlw	72
  3646  000F42  6E07               	movwf	___flge@ff2+1,c
  3647  000F44  0E3A               	movlw	58
  3648  000F46  6E08               	movwf	___flge@ff2+2,c
  3649  000F48  0EC4               	movlw	196
  3650  000F4A  6E09               	movwf	___flge@ff2+3,c
  3651  000F4C  EC67  F011         	call	___flge	;wreg free
  3652  000F50  E206               	bc	l3463
  3653  000F52  0100               	movlb	0	; () banked
  3654  000F54  6B77               	clrf	?_exp& (0+255),b
  3655  000F56  6B78               	clrf	(?_exp+1)& (0+255),b
  3656  000F58  6B79               	clrf	(?_exp+2)& (0+255),b
  3657  000F5A  6B7A               	clrf	(?_exp+3)& (0+255),b
  3658  000F5C  0012               	return	
  3659  000F5E                     l3463:
  3660  000F5E  0100               	movlb	0	; () banked
  3661  000F60  0E01               	movlw	1
  3662  000F62  AF7A               	btfss	(exp@x+3)& (0+255),7,b
  3663  000F64  0E00               	movlw	0
  3664  000F66  6F81               	movwf	exp@sign& (0+255),b
  3665                           
  3666                           ; BSR set to: 0
  3667  000F68  5181               	movf	exp@sign& (0+255),w,b
  3668  000F6A  E012               	bz	l3469
  3669                           
  3670                           ; BSR set to: 0
  3671  000F6C  C077  F002         	movff	exp@x,___flneg@f1
  3672  000F70  C078  F003         	movff	exp@x+1,___flneg@f1+1
  3673  000F74  C079  F004         	movff	exp@x+2,___flneg@f1+2
  3674  000F78  C07A  F005         	movff	exp@x+3,___flneg@f1+3
  3675  000F7C  EC66  F013         	call	___flneg	;wreg free
  3676  000F80  C002  F077         	movff	?___flneg,exp@x
  3677  000F84  C003  F078         	movff	?___flneg+1,exp@x+1
  3678  000F88  C004  F079         	movff	?___flneg+2,exp@x+2
  3679  000F8C  C005  F07A         	movff	?___flneg+3,exp@x+3
  3680  000F90                     l3469:
  3681                           
  3682                           ; BSR set to: 0
  3683  000F90  C077  F01B         	movff	exp@x,___flmul@f1
  3684  000F94  C078  F01C         	movff	exp@x+1,___flmul@f1+1
  3685  000F98  C079  F01D         	movff	exp@x+2,___flmul@f1+2
  3686  000F9C  C07A  F01E         	movff	exp@x+3,___flmul@f1+3
  3687  000FA0  0E3B               	movlw	59
  3688  000FA2  6E1F               	movwf	___flmul@f2,c
  3689  000FA4  0EAA               	movlw	170
  3690  000FA6  6E20               	movwf	___flmul@f2+1,c
  3691  000FA8  0EB8               	movlw	184
  3692  000FAA  6E21               	movwf	___flmul@f2+2,c
  3693  000FAC  0E3F               	movlw	63
  3694  000FAE  6E22               	movwf	___flmul@f2+3,c
  3695  000FB0  EC7D  F008         	call	___flmul	;wreg free
  3696  000FB4  C01B  F077         	movff	?___flmul,exp@x
  3697  000FB8  C01C  F078         	movff	?___flmul+1,exp@x+1
  3698  000FBC  C01D  F079         	movff	?___flmul+2,exp@x+2
  3699  000FC0  C01E  F07A         	movff	?___flmul+3,exp@x+3
  3700  000FC4  C077  F06D         	movff	exp@x,floor@x
  3701  000FC8  C078  F06E         	movff	exp@x+1,floor@x+1
  3702  000FCC  C079  F06F         	movff	exp@x+2,floor@x+2
  3703  000FD0  C07A  F070         	movff	exp@x+3,floor@x+3
  3704  000FD4  EC34  F00C         	call	_floor	;wreg free
  3705  000FD8  C06D  F07B         	movff	?_floor,_exp$1033
  3706  000FDC  C06E  F07C         	movff	?_floor+1,_exp$1033+1
  3707  000FE0  C06F  F07D         	movff	?_floor+2,_exp$1033+2
  3708  000FE4  C070  F07E         	movff	?_floor+3,_exp$1033+3
  3709  000FE8  C07B  F060         	movff	_exp$1033,___fltol@f1
  3710  000FEC  C07C  F061         	movff	_exp$1033+1,___fltol@f1+1
  3711  000FF0  C07D  F062         	movff	_exp$1033+2,___fltol@f1+2
  3712  000FF4  C07E  F063         	movff	_exp$1033+3,___fltol@f1+3
  3713  000FF8  EC36  F010         	call	___fltol	;wreg free
  3714  000FFC  C060  F07F         	movff	?___fltol,exp@exponent
  3715  001000  C061  F080         	movff	?___fltol+1,exp@exponent+1
  3716                           
  3717                           ; BSR set to: 0
  3718  001004  C077  F042         	movff	exp@x,___flsub@f1
  3719  001008  C078  F043         	movff	exp@x+1,___flsub@f1+1
  3720  00100C  C079  F044         	movff	exp@x+2,___flsub@f1+2
  3721  001010  C07A  F045         	movff	exp@x+3,___flsub@f1+3
  3722  001014  C07F  F00C         	movff	exp@exponent,___awtofl@c
  3723  001018  C080  F00D         	movff	exp@exponent+1,___awtofl@c+1
  3724  00101C  EC7F  F012         	call	___awtofl	;wreg free
  3725  001020  C00C  F046         	movff	?___awtofl,___flsub@f2
  3726  001024  C00D  F047         	movff	?___awtofl+1,___flsub@f2+1
  3727  001028  C00E  F048         	movff	?___awtofl+2,___flsub@f2+2
  3728  00102C  C00F  F049         	movff	?___awtofl+3,___flsub@f2+3
  3729  001030  EC20  F012         	call	___flsub	;wreg free
  3730  001034  C042  F077         	movff	?___flsub,exp@x
  3731  001038  C043  F078         	movff	?___flsub+1,exp@x+1
  3732  00103C  C044  F079         	movff	?___flsub+2,exp@x+2
  3733  001040  C045  F07A         	movff	?___flsub+3,exp@x+3
  3734  001044  C077  F042         	movff	exp@x,eval_poly@x
  3735  001048  C078  F043         	movff	exp@x+1,eval_poly@x+1
  3736  00104C  C079  F044         	movff	exp@x+2,eval_poly@x+2
  3737  001050  C07A  F045         	movff	exp@x+3,eval_poly@x+3
  3738  001054  0E01               	movlw	low exp@coeff
  3739  001056  6E46               	movwf	eval_poly@d,c
  3740  001058  6A48               	clrf	eval_poly@n+1,c
  3741  00105A  0E09               	movlw	9
  3742  00105C  6E47               	movwf	eval_poly@n,c
  3743  00105E  ECDF  F00E         	call	_eval_poly	;wreg free
  3744  001062  C042  F04E         	movff	?_eval_poly,ldexp@value
  3745  001066  C043  F04F         	movff	?_eval_poly+1,ldexp@value+1
  3746  00106A  C044  F050         	movff	?_eval_poly+2,ldexp@value+2
  3747  00106E  C045  F051         	movff	?_eval_poly+3,ldexp@value+3
  3748  001072  C07F  F052         	movff	exp@exponent,ldexp@newexp
  3749  001076  C080  F053         	movff	exp@exponent+1,ldexp@newexp+1
  3750  00107A  ECE5  F00F         	call	_ldexp	;wreg free
  3751  00107E  C04E  F077         	movff	?_ldexp,exp@x
  3752  001082  C04F  F078         	movff	?_ldexp+1,exp@x+1
  3753  001086  C050  F079         	movff	?_ldexp+2,exp@x+2
  3754  00108A  C051  F07A         	movff	?_ldexp+3,exp@x+3
  3755  00108E  0100               	movlb	0	; () banked
  3756  001090  5181               	movf	exp@sign& (0+255),w,b
  3757  001092  E02A               	bz	l1050
  3758                           
  3759                           ; BSR set to: 0
  3760  001094  2977               	incf	exp@x& (0+255),w,b
  3761  001096  E10E               	bnz	l3485
  3762  001098  2978               	incf	(exp@x+1)& (0+255),w,b
  3763  00109A  E10C               	bnz	l3485
  3764  00109C  0E7F               	movlw	127
  3765  00109E  1979               	xorwf	(exp@x+2)& (0+255),w,b
  3766  0010A0  E109               	bnz	l3485
  3767  0010A2  0E7F               	movlw	127
  3768  0010A4  197A               	xorwf	(exp@x+3)& (0+255),w,b
  3769  0010A6  A4D8               	btfss	status,2,c
  3770  0010A8  D005               	goto	l3485
  3771                           
  3772                           ; BSR set to: 0
  3773  0010AA  6B77               	clrf	?_exp& (0+255),b
  3774  0010AC  6B78               	clrf	(?_exp+1)& (0+255),b
  3775  0010AE  6B79               	clrf	(?_exp+2)& (0+255),b
  3776  0010B0  6B7A               	clrf	(?_exp+3)& (0+255),b
  3777  0010B2  0012               	return	
  3778  0010B4                     l3485:
  3779                           
  3780                           ; BSR set to: 0
  3781  0010B4  0E00               	movlw	0
  3782  0010B6  6E0C               	movwf	___fldiv@f1,c
  3783  0010B8  6E0D               	movwf	___fldiv@f1+1,c
  3784  0010BA  0E80               	movlw	128
  3785  0010BC  6E0E               	movwf	___fldiv@f1+2,c
  3786  0010BE  0E3F               	movlw	63
  3787  0010C0  6E0F               	movwf	___fldiv@f1+3,c
  3788  0010C2  C077  F010         	movff	exp@x,___fldiv@f2
  3789  0010C6  C078  F011         	movff	exp@x+1,___fldiv@f2+1
  3790  0010CA  C079  F012         	movff	exp@x+2,___fldiv@f2+2
  3791  0010CE  C07A  F013         	movff	exp@x+3,___fldiv@f2+3
  3792  0010D2  EC39  F00F         	call	___fldiv	;wreg free
  3793  0010D6  C00C  F077         	movff	?___fldiv,?_exp
  3794  0010DA  C00D  F078         	movff	?___fldiv+1,?_exp+1
  3795  0010DE  C00E  F079         	movff	?___fldiv+2,?_exp+2
  3796  0010E2  C00F  F07A         	movff	?___fldiv+3,?_exp+3
  3797  0010E6  0012               	return	
  3798  0010E8                     l1050:
  3799                           
  3800                           ; BSR set to: 0
  3801  0010E8  C077  F077         	movff	exp@x,?_exp
  3802  0010EC  C078  F078         	movff	exp@x+1,?_exp+1
  3803  0010F0  C079  F079         	movff	exp@x+2,?_exp+2
  3804  0010F4  C07A  F07A         	movff	exp@x+3,?_exp+3
  3805  0010F8  0012               	return		;funcret
  3806  0010FA                     __end_of_exp:
  3807                           	opt stack 0
  3808                           tblptru	equ	0xFF8
  3809                           tblptrh	equ	0xFF7
  3810                           tblptrl	equ	0xFF6
  3811                           tablat	equ	0xFF5
  3812                           intcon	equ	0xFF2
  3813                           intcon2	equ	0xFF1
  3814                           postinc0	equ	0xFEE
  3815                           wreg	equ	0xFE8
  3816                           postdec1	equ	0xFE5
  3817                           fsr1l	equ	0xFE1
  3818                           status	equ	0xFD8
  3819                           
  3820 ;; *************** function _ldexp *****************
  3821 ;; Defined at:
  3822 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  3823 ;; Parameters:    Size  Location     Type
  3824 ;;  value           4   77[COMRAM] unsigned char 
  3825 ;;  newexp          2   81[COMRAM] int 
  3826 ;; Auto vars:     Size  Location     Type
  3827 ;;		None
  3828 ;; Return value:  Size  Location     Type
  3829 ;;                  4   77[COMRAM] int 
  3830 ;; Registers used:
  3831 ;;		wreg, status,2, status,0
  3832 ;; Tracked objects:
  3833 ;;		On entry : 0/0
  3834 ;;		On exit  : 0/0
  3835 ;;		Unchanged: 0/0
  3836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3837 ;;      Params:         6       0       0       0       0       0       0
  3838 ;;      Locals:         0       0       0       0       0       0       0
  3839 ;;      Temps:          2       0       0       0       0       0       0
  3840 ;;      Totals:         8       0       0       0       0       0       0
  3841 ;;Total ram usage:        8 bytes
  3842 ;; Hardware stack levels used:    1
  3843 ;; Hardware stack levels required when called:    1
  3844 ;; This function calls:
  3845 ;;		Nothing
  3846 ;; This function is called by:
  3847 ;;		_exp
  3848 ;; This function uses a non-reentrant model
  3849 ;;
  3850                           
  3851                           	psect	text14
  3852  001FCA                     __ptext14:
  3853                           	opt stack 0
  3854  001FCA                     _ldexp:
  3855                           	opt stack 26
  3856                           
  3857                           ;incstack = 0
  3858  001FCA  504E               	movf	ldexp@value,w,c
  3859  001FCC  104F               	iorwf	ldexp@value+1,w,c
  3860  001FCE  1050               	iorwf	ldexp@value+2,w,c
  3861  001FD0  1051               	iorwf	ldexp@value+3,w,c
  3862  001FD2  E105               	bnz	l2489
  3863  001FD4  6A4E               	clrf	?_ldexp,c
  3864  001FD6  6A4F               	clrf	?_ldexp+1,c
  3865  001FD8  6A50               	clrf	?_ldexp+2,c
  3866  001FDA  6A51               	clrf	?_ldexp+3,c
  3867  001FDC  0012               	return	
  3868  001FDE                     l2489:
  3869  001FDE  5051               	movf	ldexp@value+3,w,c
  3870  001FE0  0B7F               	andlw	127
  3871  001FE2  6E54               	movwf	??_ldexp& (0+255),c
  3872  001FE4  6A55               	clrf	(??_ldexp+1)& (0+255),c
  3873  001FE6  90D8               	bcf	status,0,c
  3874  001FE8  3654               	rlcf	??_ldexp,f,c
  3875  001FEA  3655               	rlcf	??_ldexp+1,f,c
  3876  001FEC  5054               	movf	??_ldexp,w,c
  3877  001FEE  2652               	addwf	ldexp@newexp,f,c
  3878  001FF0  5055               	movf	??_ldexp+1,w,c
  3879  001FF2  2253               	addwfc	ldexp@newexp+1,f,c
  3880  001FF4  0E01               	movlw	1
  3881  001FF6  AE50               	btfss	ldexp@value+2,7,c
  3882  001FF8  0E00               	movlw	0
  3883  001FFA  2652               	addwf	ldexp@newexp,f,c
  3884  001FFC  0E00               	movlw	0
  3885  001FFE  2253               	addwfc	ldexp@newexp+1,f,c
  3886  002000  AE53               	btfss	ldexp@newexp+1,7,c
  3887  002002  D005               	goto	l2495
  3888  002004  6A4E               	clrf	?_ldexp,c
  3889  002006  6A4F               	clrf	?_ldexp+1,c
  3890  002008  6A50               	clrf	?_ldexp+2,c
  3891  00200A  6A51               	clrf	?_ldexp+3,c
  3892  00200C  0012               	return	
  3893  00200E                     l2495:
  3894  00200E  BE53               	btfsc	ldexp@newexp+1,7,c
  3895  002010  D010               	goto	l2509
  3896  002012  0453               	decf	ldexp@newexp+1,w,c
  3897  002014  E30E               	bnc	l2509
  3898  002016  AE51               	btfss	ldexp@value+3,7,c
  3899  002018  D006               	goto	l2505
  3900  00201A  684E               	setf	?_ldexp,c
  3901  00201C  684F               	setf	?_ldexp+1,c
  3902  00201E  0E7F               	movlw	127
  3903  002020  6E50               	movwf	?_ldexp+2,c
  3904  002022  6851               	setf	?_ldexp+3,c
  3905  002024  0CFF               	retlw	255
  3906  002026                     l2505:
  3907  002026  684E               	setf	?_ldexp,c
  3908  002028  684F               	setf	?_ldexp+1,c
  3909  00202A  0E7F               	movlw	127
  3910  00202C  6E50               	movwf	?_ldexp+2,c
  3911  00202E  6E51               	movwf	?_ldexp+3,c
  3912  002030  0C7F               	retlw	127
  3913  002032                     l2509:
  3914  002032  3453               	rlcf	ldexp@newexp+1,w,c
  3915  002034  3053               	rrcf	ldexp@newexp+1,w,c
  3916  002036  6E55               	movwf	(??_ldexp+1)& (0+255),c
  3917  002038  3052               	rrcf	ldexp@newexp,w,c
  3918  00203A  6E54               	movwf	??_ldexp& (0+255),c
  3919  00203C  1851               	xorwf	ldexp@value+3,w,c
  3920  00203E  0B80               	andlw	-128
  3921  002040  1854               	xorwf	??_ldexp,w,c
  3922  002042  6E51               	movwf	ldexp@value+3,c
  3923  002044  C052  F054         	movff	ldexp@newexp,??_ldexp
  3924  002048  0E01               	movlw	1
  3925  00204A  1654               	andwf	??_ldexp,f,c
  3926  00204C  3254               	rrcf	??_ldexp,f,c
  3927  00204E  3254               	rrcf	??_ldexp,f,c
  3928  002050  5050               	movf	ldexp@value+2,w,c
  3929  002052  1854               	xorwf	??_ldexp,w,c
  3930  002054  0B7F               	andlw	-129
  3931  002056  1854               	xorwf	??_ldexp,w,c
  3932  002058  6E50               	movwf	ldexp@value+2,c
  3933  00205A  C04E  F04E         	movff	ldexp@value,?_ldexp
  3934  00205E  C04F  F04F         	movff	ldexp@value+1,?_ldexp+1
  3935  002062  C050  F050         	movff	ldexp@value+2,?_ldexp+2
  3936  002066  C051  F051         	movff	ldexp@value+3,?_ldexp+3
  3937  00206A  0012               	return		;funcret
  3938  00206C                     __end_of_ldexp:
  3939                           	opt stack 0
  3940                           tblptru	equ	0xFF8
  3941                           tblptrh	equ	0xFF7
  3942                           tblptrl	equ	0xFF6
  3943                           tablat	equ	0xFF5
  3944                           intcon	equ	0xFF2
  3945                           intcon2	equ	0xFF1
  3946                           postinc0	equ	0xFEE
  3947                           wreg	equ	0xFE8
  3948                           postdec1	equ	0xFE5
  3949                           fsr1l	equ	0xFE1
  3950                           status	equ	0xFD8
  3951                           
  3952 ;; *************** function _floor *****************
  3953 ;; Defined at:
  3954 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\floor.c"
  3955 ;; Parameters:    Size  Location     Type
  3956 ;;  x               4   13[BANK0 ] int 
  3957 ;; Auto vars:     Size  Location     Type
  3958 ;;  i               4   17[BANK0 ] int 
  3959 ;;  expon           2   21[BANK0 ] int 
  3960 ;; Return value:  Size  Location     Type
  3961 ;;                  4   13[BANK0 ] int 
  3962 ;; Registers used:
  3963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3964 ;; Tracked objects:
  3965 ;;		On entry : 0/0
  3966 ;;		On exit  : 0/0
  3967 ;;		Unchanged: 0/0
  3968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3969 ;;      Params:         0       4       0       0       0       0       0
  3970 ;;      Locals:         0       6       0       0       0       0       0
  3971 ;;      Temps:          0       0       0       0       0       0       0
  3972 ;;      Totals:         0      10       0       0       0       0       0
  3973 ;;Total ram usage:       10 bytes
  3974 ;; Hardware stack levels used:    1
  3975 ;; Hardware stack levels required when called:    3
  3976 ;; This function calls:
  3977 ;;		___altofl
  3978 ;;		___fladd
  3979 ;;		___flge
  3980 ;;		___fltol
  3981 ;;		_frexp
  3982 ;; This function is called by:
  3983 ;;		_format_double
  3984 ;;		_exp
  3985 ;; This function uses a non-reentrant model
  3986 ;;
  3987                           
  3988                           	psect	text15
  3989  001868                     __ptext15:
  3990                           	opt stack 0
  3991  001868                     _floor:
  3992                           	opt stack 24
  3993                           
  3994                           ;incstack = 0
  3995  001868  C06D  F002         	movff	floor@x,frexp@value
  3996  00186C  C06E  F003         	movff	floor@x+1,frexp@value+1
  3997  001870  C06F  F004         	movff	floor@x+2,frexp@value+2
  3998  001874  C070  F005         	movff	floor@x+3,frexp@value+3
  3999  001878  0E75               	movlw	low floor@expon
  4000  00187A  6E06               	movwf	frexp@eptr,c
  4001  00187C  ECC6  F010         	call	_frexp	;wreg free
  4002  001880  0100               	movlb	0	; () banked
  4003  001882  AF76               	btfss	(floor@expon+1)& (0+255),7,b
  4004  001884  D00F               	goto	l3355
  4005                           
  4006                           ; BSR set to: 0
  4007  001886  AF70               	btfss	(floor@x+3)& (0+255),7,b
  4008  001888  D008               	goto	l755
  4009                           
  4010                           ; BSR set to: 0
  4011  00188A  0E00               	movlw	0
  4012  00188C  6F6D               	movwf	?_floor& (0+255),b
  4013  00188E  6F6E               	movwf	(?_floor+1)& (0+255),b
  4014  001890  0E80               	movlw	128
  4015  001892  6F6F               	movwf	(?_floor+2)& (0+255),b
  4016  001894  0EBF               	movlw	191
  4017  001896  6F70               	movwf	(?_floor+3)& (0+255),b
  4018  001898  0CBF               	retlw	191
  4019  00189A                     l755:
  4020                           
  4021                           ; BSR set to: 0
  4022  00189A  6B6D               	clrf	?_floor& (0+255),b
  4023  00189C  6B6E               	clrf	(?_floor+1)& (0+255),b
  4024  00189E  6B6F               	clrf	(?_floor+2)& (0+255),b
  4025  0018A0  6B70               	clrf	(?_floor+3)& (0+255),b
  4026  0018A2  0012               	return	
  4027  0018A4                     l3355:
  4028                           
  4029                           ; BSR set to: 0
  4030  0018A4  5176               	movf	(floor@expon+1)& (0+255),w,b
  4031  0018A6  E103               	bnz	u2880
  4032  0018A8  0E1D               	movlw	29
  4033  0018AA  5D75               	subwf	floor@expon& (0+255),w,b
  4034  0018AC  E309               	bnc	l3359
  4035  0018AE                     u2880:
  4036                           
  4037                           ; BSR set to: 0
  4038  0018AE  C06D  F06D         	movff	floor@x,?_floor
  4039  0018B2  C06E  F06E         	movff	floor@x+1,?_floor+1
  4040  0018B6  C06F  F06F         	movff	floor@x+2,?_floor+2
  4041  0018BA  C070  F070         	movff	floor@x+3,?_floor+3
  4042  0018BE  0012               	return	
  4043  0018C0                     l3359:
  4044                           
  4045                           ; BSR set to: 0
  4046  0018C0  C06D  F060         	movff	floor@x,___fltol@f1
  4047  0018C4  C06E  F061         	movff	floor@x+1,___fltol@f1+1
  4048  0018C8  C06F  F062         	movff	floor@x+2,___fltol@f1+2
  4049  0018CC  C070  F063         	movff	floor@x+3,___fltol@f1+3
  4050  0018D0  EC36  F010         	call	___fltol	;wreg free
  4051  0018D4  C060  F068         	movff	?___fltol,___altofl@c
  4052  0018D8  C061  F069         	movff	?___fltol+1,___altofl@c+1
  4053  0018DC  C062  F06A         	movff	?___fltol+2,___altofl@c+2
  4054  0018E0  C063  F06B         	movff	?___fltol+3,___altofl@c+3
  4055  0018E4  ECFC  F011         	call	___altofl	;wreg free
  4056  0018E8  C068  F071         	movff	?___altofl,floor@i
  4057  0018EC  C069  F072         	movff	?___altofl+1,floor@i+1
  4058  0018F0  C06A  F073         	movff	?___altofl+2,floor@i+2
  4059  0018F4  C06B  F074         	movff	?___altofl+3,floor@i+3
  4060  0018F8  C06D  F002         	movff	floor@x,___flge@ff1
  4061  0018FC  C06E  F003         	movff	floor@x+1,___flge@ff1+1
  4062  001900  C06F  F004         	movff	floor@x+2,___flge@ff1+2
  4063  001904  C070  F005         	movff	floor@x+3,___flge@ff1+3
  4064  001908  C071  F006         	movff	floor@i,___flge@ff2
  4065  00190C  C072  F007         	movff	floor@i+1,___flge@ff2+1
  4066  001910  C073  F008         	movff	floor@i+2,___flge@ff2+2
  4067  001914  C074  F009         	movff	floor@i+3,___flge@ff2+3
  4068  001918  EC67  F011         	call	___flge	;wreg free
  4069  00191C  E21A               	bc	l758
  4070  00191E  C071  F036         	movff	floor@i,___fladd@f1
  4071  001922  C072  F037         	movff	floor@i+1,___fladd@f1+1
  4072  001926  C073  F038         	movff	floor@i+2,___fladd@f1+2
  4073  00192A  C074  F039         	movff	floor@i+3,___fladd@f1+3
  4074  00192E  0E00               	movlw	0
  4075  001930  6E3A               	movwf	___fladd@f2,c
  4076  001932  6E3B               	movwf	___fladd@f2+1,c
  4077  001934  0E80               	movlw	128
  4078  001936  6E3C               	movwf	___fladd@f2+2,c
  4079  001938  0EBF               	movlw	191
  4080  00193A  6E3D               	movwf	___fladd@f2+3,c
  4081  00193C  ECEE  F00A         	call	___fladd	;wreg free
  4082  001940  C036  F06D         	movff	?___fladd,?_floor
  4083  001944  C037  F06E         	movff	?___fladd+1,?_floor+1
  4084  001948  C038  F06F         	movff	?___fladd+2,?_floor+2
  4085  00194C  C039  F070         	movff	?___fladd+3,?_floor+3
  4086  001950  0012               	return	
  4087  001952                     l758:
  4088  001952  C071  F06D         	movff	floor@i,?_floor
  4089  001956  C072  F06E         	movff	floor@i+1,?_floor+1
  4090  00195A  C073  F06F         	movff	floor@i+2,?_floor+2
  4091  00195E  C074  F070         	movff	floor@i+3,?_floor+3
  4092  001962  0012               	return		;funcret
  4093  001964                     __end_of_floor:
  4094                           	opt stack 0
  4095                           tblptru	equ	0xFF8
  4096                           tblptrh	equ	0xFF7
  4097                           tblptrl	equ	0xFF6
  4098                           tablat	equ	0xFF5
  4099                           intcon	equ	0xFF2
  4100                           intcon2	equ	0xFF1
  4101                           postinc0	equ	0xFEE
  4102                           wreg	equ	0xFE8
  4103                           postdec1	equ	0xFE5
  4104                           fsr1l	equ	0xFE1
  4105                           status	equ	0xFD8
  4106                           
  4107 ;; *************** function ___fltol *****************
  4108 ;; Defined at:
  4109 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fltol.c"
  4110 ;; Parameters:    Size  Location     Type
  4111 ;;  f1              4    0[BANK0 ] int 
  4112 ;; Auto vars:     Size  Location     Type
  4113 ;;  exp1            1   92[COMRAM] unsigned char 
  4114 ;;  sign1           1   91[COMRAM] unsigned char 
  4115 ;; Return value:  Size  Location     Type
  4116 ;;                  4    0[BANK0 ] long 
  4117 ;; Registers used:
  4118 ;;		wreg, status,2, status,0
  4119 ;; Tracked objects:
  4120 ;;		On entry : 0/0
  4121 ;;		On exit  : F/0
  4122 ;;		Unchanged: 0/0
  4123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4124 ;;      Params:         0       4       0       0       0       0       0
  4125 ;;      Locals:         2       0       0       0       0       0       0
  4126 ;;      Temps:          0       4       0       0       0       0       0
  4127 ;;      Totals:         2       8       0       0       0       0       0
  4128 ;;Total ram usage:       10 bytes
  4129 ;; Hardware stack levels used:    1
  4130 ;; Hardware stack levels required when called:    1
  4131 ;; This function calls:
  4132 ;;		Nothing
  4133 ;; This function is called by:
  4134 ;;		_format_double
  4135 ;;		_measure_capacitance
  4136 ;;		_measure_inductance
  4137 ;;		_floor
  4138 ;;		_pow
  4139 ;;		_exp
  4140 ;; This function uses a non-reentrant model
  4141 ;;
  4142                           
  4143                           	psect	text16
  4144  00206C                     __ptext16:
  4145                           	opt stack 0
  4146  00206C                     ___fltol:
  4147                           	opt stack 28
  4148                           
  4149                           ;incstack = 0
  4150  00206C  0100               	movlb	0	; () banked
  4151  00206E  3562               	rlcf	(___fltol@f1+2)& (0+255),w,b
  4152  002070  3563               	rlcf	(___fltol@f1+3)& (0+255),w,b
  4153  002072  6E5D               	movwf	___fltol@exp1,c
  4154  002074  505D               	movf	___fltol@exp1,w,c
  4155  002076  E105               	bnz	l2357
  4156  002078                     l2355:
  4157                           
  4158                           ; BSR set to: 0
  4159  002078  6B60               	clrf	?___fltol& (0+255),b
  4160  00207A  6B61               	clrf	(?___fltol+1)& (0+255),b
  4161  00207C  6B62               	clrf	(?___fltol+2)& (0+255),b
  4162  00207E  6B63               	clrf	(?___fltol+3)& (0+255),b
  4163  002080  0012               	return	
  4164  002082                     l2357:
  4165                           
  4166                           ; BSR set to: 0
  4167  002082  C060  F064         	movff	___fltol@f1,??___fltol
  4168  002086  C061  F065         	movff	___fltol@f1+1,??___fltol+1
  4169  00208A  C062  F066         	movff	___fltol@f1+2,??___fltol+2
  4170  00208E  C063  F067         	movff	___fltol@f1+3,??___fltol+3
  4171  002092  0E20               	movlw	32
  4172  002094  D005               	goto	u1660
  4173  002096                     u1665:
  4174  002096  90D8               	bcf	status,0,c
  4175  002098  3367               	rrcf	(??___fltol+3)& (0+255),f,b
  4176  00209A  3366               	rrcf	(??___fltol+2)& (0+255),f,b
  4177  00209C  3365               	rrcf	(??___fltol+1)& (0+255),f,b
  4178  00209E  3364               	rrcf	??___fltol& (0+255),f,b
  4179  0020A0                     u1660:
  4180  0020A0  2EE8               	decfsz	wreg,f,c
  4181  0020A2  D7F9               	goto	u1665
  4182  0020A4  5164               	movf	??___fltol& (0+255),w,b
  4183  0020A6  6E5C               	movwf	___fltol@sign1,c
  4184                           
  4185                           ; BSR set to: 0
  4186  0020A8  8F62               	bsf	(___fltol@f1+2)& (0+255),7,b
  4187                           
  4188                           ; BSR set to: 0
  4189  0020AA  6B63               	clrf	(___fltol@f1+3)& (0+255),b
  4190                           
  4191                           ; BSR set to: 0
  4192  0020AC  0E96               	movlw	150
  4193  0020AE  5E5D               	subwf	___fltol@exp1,f,c
  4194                           
  4195                           ; BSR set to: 0
  4196  0020B0  AE5D               	btfss	___fltol@exp1,7,c
  4197  0020B2  D00C               	goto	l2375
  4198                           
  4199                           ; BSR set to: 0
  4200  0020B4  505D               	movf	___fltol@exp1,w,c
  4201  0020B6  0A80               	xorlw	128
  4202  0020B8  0F97               	addlw	151
  4203  0020BA  E3DE               	bnc	l2355
  4204  0020BC                     l2371:
  4205                           
  4206                           ; BSR set to: 0
  4207  0020BC  90D8               	bcf	status,0,c
  4208  0020BE  3363               	rrcf	(___fltol@f1+3)& (0+255),f,b
  4209  0020C0  3362               	rrcf	(___fltol@f1+2)& (0+255),f,b
  4210  0020C2  3361               	rrcf	(___fltol@f1+1)& (0+255),f,b
  4211  0020C4  3360               	rrcf	___fltol@f1& (0+255),f,b
  4212                           
  4213                           ; BSR set to: 0
  4214  0020C6  3E5D               	incfsz	___fltol@exp1,f,c
  4215  0020C8  D7F9               	goto	l2371
  4216  0020CA  D00C               	goto	l2383
  4217  0020CC                     l2375:
  4218                           
  4219                           ; BSR set to: 0
  4220  0020CC  0E1F               	movlw	31
  4221  0020CE  645D               	cpfsgt	___fltol@exp1,c
  4222  0020D0  D007               	goto	l2381
  4223  0020D2  D7D2               	goto	l2355
  4224  0020D4                     l2379:
  4225                           
  4226                           ; BSR set to: 0
  4227  0020D4  90D8               	bcf	status,0,c
  4228  0020D6  3760               	rlcf	___fltol@f1& (0+255),f,b
  4229  0020D8  3761               	rlcf	(___fltol@f1+1)& (0+255),f,b
  4230  0020DA  3762               	rlcf	(___fltol@f1+2)& (0+255),f,b
  4231  0020DC  3763               	rlcf	(___fltol@f1+3)& (0+255),f,b
  4232  0020DE  065D               	decf	___fltol@exp1,f,c
  4233  0020E0                     l2381:
  4234                           
  4235                           ; BSR set to: 0
  4236  0020E0  505D               	movf	___fltol@exp1,w,c
  4237  0020E2  E1F8               	bnz	l2379
  4238  0020E4                     l2383:
  4239                           
  4240                           ; BSR set to: 0
  4241  0020E4  505C               	movf	___fltol@sign1,w,c
  4242  0020E6  E008               	bz	l2387
  4243                           
  4244                           ; BSR set to: 0
  4245  0020E8  1F63               	comf	(___fltol@f1+3)& (0+255),f,b
  4246  0020EA  1F62               	comf	(___fltol@f1+2)& (0+255),f,b
  4247  0020EC  1F61               	comf	(___fltol@f1+1)& (0+255),f,b
  4248  0020EE  6D60               	negf	___fltol@f1& (0+255),b
  4249  0020F0  0E00               	movlw	0
  4250  0020F2  2361               	addwfc	(___fltol@f1+1)& (0+255),f,b
  4251  0020F4  2362               	addwfc	(___fltol@f1+2)& (0+255),f,b
  4252  0020F6  2363               	addwfc	(___fltol@f1+3)& (0+255),f,b
  4253  0020F8                     l2387:
  4254                           
  4255                           ; BSR set to: 0
  4256  0020F8  C060  F060         	movff	___fltol@f1,?___fltol
  4257  0020FC  C061  F061         	movff	___fltol@f1+1,?___fltol+1
  4258  002100  C062  F062         	movff	___fltol@f1+2,?___fltol+2
  4259  002104  C063  F063         	movff	___fltol@f1+3,?___fltol+3
  4260                           
  4261                           ; BSR set to: 0
  4262  002108  0012               	return		;funcret
  4263  00210A                     __end_of___fltol:
  4264                           	opt stack 0
  4265                           tblptru	equ	0xFF8
  4266                           tblptrh	equ	0xFF7
  4267                           tblptrl	equ	0xFF6
  4268                           tablat	equ	0xFF5
  4269                           intcon	equ	0xFF2
  4270                           intcon2	equ	0xFF1
  4271                           postinc0	equ	0xFEE
  4272                           wreg	equ	0xFE8
  4273                           postdec1	equ	0xFE5
  4274                           fsr1l	equ	0xFE1
  4275                           status	equ	0xFD8
  4276                           
  4277 ;; *************** function ___flge *****************
  4278 ;; Defined at:
  4279 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flge.c"
  4280 ;; Parameters:    Size  Location     Type
  4281 ;;  ff1             4    1[COMRAM] long 
  4282 ;;  ff2             4    5[COMRAM] long 
  4283 ;; Auto vars:     Size  Location     Type
  4284 ;;		None
  4285 ;; Return value:  Size  Location     Type
  4286 ;;		None               void
  4287 ;; Registers used:
  4288 ;;		wreg, status,2, status,0
  4289 ;; Tracked objects:
  4290 ;;		On entry : 0/0
  4291 ;;		On exit  : 0/0
  4292 ;;		Unchanged: 0/0
  4293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4294 ;;      Params:         8       0       0       0       0       0       0
  4295 ;;      Locals:         0       0       0       0       0       0       0
  4296 ;;      Temps:          0       0       0       0       0       0       0
  4297 ;;      Totals:         8       0       0       0       0       0       0
  4298 ;;Total ram usage:        8 bytes
  4299 ;; Hardware stack levels used:    1
  4300 ;; Hardware stack levels required when called:    1
  4301 ;; This function calls:
  4302 ;;		Nothing
  4303 ;; This function is called by:
  4304 ;;		_format_double
  4305 ;;		_measure_capacitance
  4306 ;;		_measure_inductance
  4307 ;;		_floor
  4308 ;;		_pow
  4309 ;;		_exp
  4310 ;; This function uses a non-reentrant model
  4311 ;;
  4312                           
  4313                           	psect	text17
  4314  0022CE                     __ptext17:
  4315                           	opt stack 0
  4316  0022CE                     ___flge:
  4317                           	opt stack 28
  4318                           
  4319                           ; BSR set to: 0
  4320                           ;incstack = 0
  4321  0022CE  AE05               	btfss	___flge@ff1+3,7,c
  4322  0022D0  D009               	goto	l2323
  4323  0022D2  6C02               	negf	___flge@ff1,c
  4324  0022D4  1E03               	comf	___flge@ff1+1,f,c
  4325  0022D6  B0D8               	btfsc	status,0,c
  4326  0022D8  2A03               	incf	___flge@ff1+1,f,c
  4327  0022DA  1E04               	comf	___flge@ff1+2,f,c
  4328  0022DC  B0D8               	btfsc	status,0,c
  4329  0022DE  2A04               	incf	___flge@ff1+2,f,c
  4330  0022E0  0E80               	movlw	128
  4331  0022E2  5605               	subfwb	___flge@ff1+3,f,c
  4332  0022E4                     l2323:
  4333  0022E4  AE09               	btfss	___flge@ff2+3,7,c
  4334  0022E6  D009               	goto	l717
  4335  0022E8  6C06               	negf	___flge@ff2,c
  4336  0022EA  1E07               	comf	___flge@ff2+1,f,c
  4337  0022EC  B0D8               	btfsc	status,0,c
  4338  0022EE  2A07               	incf	___flge@ff2+1,f,c
  4339  0022F0  1E08               	comf	___flge@ff2+2,f,c
  4340  0022F2  B0D8               	btfsc	status,0,c
  4341  0022F4  2A08               	incf	___flge@ff2+2,f,c
  4342  0022F6  0E80               	movlw	128
  4343  0022F8  5609               	subfwb	___flge@ff2+3,f,c
  4344  0022FA                     l717:
  4345  0022FA  0E80               	movlw	128
  4346  0022FC  1A05               	xorwf	___flge@ff1+3,f,c
  4347  0022FE  1A09               	xorwf	___flge@ff2+3,f,c
  4348  002300  5006               	movf	___flge@ff2,w,c
  4349  002302  5C02               	subwf	___flge@ff1,w,c
  4350  002304  5007               	movf	___flge@ff2+1,w,c
  4351  002306  5803               	subwfb	___flge@ff1+1,w,c
  4352  002308  5008               	movf	___flge@ff2+2,w,c
  4353  00230A  5804               	subwfb	___flge@ff1+2,w,c
  4354  00230C  5009               	movf	___flge@ff2+3,w,c
  4355  00230E  5805               	subwfb	___flge@ff1+3,w,c
  4356  002310  E202               	bc	l2329
  4357  002312  90D8               	bcf	status,0,c
  4358  002314  0012               	return	
  4359  002316                     l2329:
  4360  002316  80D8               	bsf	status,0,c
  4361  002318  0012               	return		;funcret
  4362  00231A                     __end_of___flge:
  4363                           	opt stack 0
  4364                           tblptru	equ	0xFF8
  4365                           tblptrh	equ	0xFF7
  4366                           tblptrl	equ	0xFF6
  4367                           tablat	equ	0xFF5
  4368                           intcon	equ	0xFF2
  4369                           intcon2	equ	0xFF1
  4370                           postinc0	equ	0xFEE
  4371                           wreg	equ	0xFE8
  4372                           postdec1	equ	0xFE5
  4373                           fsr1l	equ	0xFE1
  4374                           status	equ	0xFD8
  4375                           
  4376 ;; *************** function ___altofl *****************
  4377 ;; Defined at:
  4378 ;;		line 36 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\altofl.c"
  4379 ;; Parameters:    Size  Location     Type
  4380 ;;  c               4    8[BANK0 ] long 
  4381 ;; Auto vars:     Size  Location     Type
  4382 ;;  sign            1   12[BANK0 ] unsigned char 
  4383 ;; Return value:  Size  Location     Type
  4384 ;;                  4    8[BANK0 ] unsigned char 
  4385 ;; Registers used:
  4386 ;;		wreg, status,2, status,0, cstack
  4387 ;; Tracked objects:
  4388 ;;		On entry : F/0
  4389 ;;		On exit  : 0/0
  4390 ;;		Unchanged: 0/0
  4391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4392 ;;      Params:         0       4       0       0       0       0       0
  4393 ;;      Locals:         0       1       0       0       0       0       0
  4394 ;;      Temps:          0       0       0       0       0       0       0
  4395 ;;      Totals:         0       5       0       0       0       0       0
  4396 ;;Total ram usage:        5 bytes
  4397 ;; Hardware stack levels used:    1
  4398 ;; Hardware stack levels required when called:    2
  4399 ;; This function calls:
  4400 ;;		___flpack
  4401 ;; This function is called by:
  4402 ;;		_floor
  4403 ;; This function uses a non-reentrant model
  4404 ;;
  4405                           
  4406                           	psect	text18
  4407  0023F8                     __ptext18:
  4408                           	opt stack 0
  4409  0023F8                     ___altofl:
  4410                           	opt stack 24
  4411                           
  4412                           ; BSR set to: 0
  4413                           
  4414                           ;incstack = 0
  4415  0023F8  6B6C               	clrf	___altofl@sign& (0+255),b
  4416                           
  4417                           ; BSR set to: 0
  4418  0023FA  AF6B               	btfss	(___altofl@c+3)& (0+255),7,b
  4419  0023FC  D00A               	goto	l3235
  4420                           
  4421                           ; BSR set to: 0
  4422  0023FE  1F6B               	comf	(___altofl@c+3)& (0+255),f,b
  4423  002400  1F6A               	comf	(___altofl@c+2)& (0+255),f,b
  4424  002402  1F69               	comf	(___altofl@c+1)& (0+255),f,b
  4425  002404  6D68               	negf	___altofl@c& (0+255),b
  4426  002406  0E00               	movlw	0
  4427  002408  2369               	addwfc	(___altofl@c+1)& (0+255),f,b
  4428  00240A  236A               	addwfc	(___altofl@c+2)& (0+255),f,b
  4429  00240C  236B               	addwfc	(___altofl@c+3)& (0+255),f,b
  4430                           
  4431                           ; BSR set to: 0
  4432  00240E  0E01               	movlw	1
  4433  002410  6F6C               	movwf	___altofl@sign& (0+255),b
  4434  002412                     l3235:
  4435                           
  4436                           ; BSR set to: 0
  4437  002412  C068  F002         	movff	___altofl@c,___flpack@arg
  4438  002416  C069  F003         	movff	___altofl@c+1,___flpack@arg+1
  4439  00241A  C06A  F004         	movff	___altofl@c+2,___flpack@arg+2
  4440  00241E  C06B  F005         	movff	___altofl@c+3,___flpack@arg+3
  4441  002422  0E96               	movlw	150
  4442  002424  6E06               	movwf	___flpack@exp,c
  4443  002426  C06C  F007         	movff	___altofl@sign,___flpack@sign
  4444  00242A  EC7C  F00E         	call	___flpack	;wreg free
  4445  00242E  C002  F068         	movff	?___flpack,?___altofl
  4446  002432  C003  F069         	movff	?___flpack+1,?___altofl+1
  4447  002436  C004  F06A         	movff	?___flpack+2,?___altofl+2
  4448  00243A  C005  F06B         	movff	?___flpack+3,?___altofl+3
  4449  00243E  0012               	return		;funcret
  4450  002440                     __end_of___altofl:
  4451                           	opt stack 0
  4452                           tblptru	equ	0xFF8
  4453                           tblptrh	equ	0xFF7
  4454                           tblptrl	equ	0xFF6
  4455                           tablat	equ	0xFF5
  4456                           intcon	equ	0xFF2
  4457                           intcon2	equ	0xFF1
  4458                           postinc0	equ	0xFEE
  4459                           wreg	equ	0xFE8
  4460                           postdec1	equ	0xFE5
  4461                           fsr1l	equ	0xFE1
  4462                           status	equ	0xFD8
  4463                           
  4464 ;; *************** function ___flsub *****************
  4465 ;; Defined at:
  4466 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flsub.c"
  4467 ;; Parameters:    Size  Location     Type
  4468 ;;  f1              4   65[COMRAM] unsigned char 
  4469 ;;  f2              4   69[COMRAM] unsigned char 
  4470 ;; Auto vars:     Size  Location     Type
  4471 ;;		None
  4472 ;; Return value:  Size  Location     Type
  4473 ;;                  4   65[COMRAM] unsigned char 
  4474 ;; Registers used:
  4475 ;;		wreg, status,2, status,0, cstack
  4476 ;; Tracked objects:
  4477 ;;		On entry : 0/0
  4478 ;;		On exit  : 0/0
  4479 ;;		Unchanged: 0/0
  4480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4481 ;;      Params:         8       0       0       0       0       0       0
  4482 ;;      Locals:         0       0       0       0       0       0       0
  4483 ;;      Temps:          0       0       0       0       0       0       0
  4484 ;;      Totals:         8       0       0       0       0       0       0
  4485 ;;Total ram usage:        8 bytes
  4486 ;; Hardware stack levels used:    1
  4487 ;; Hardware stack levels required when called:    3
  4488 ;; This function calls:
  4489 ;;		___fladd
  4490 ;; This function is called by:
  4491 ;;		_format_double
  4492 ;;		_measure_capacitance
  4493 ;;		_measure_inductance
  4494 ;;		_exp
  4495 ;; This function uses a non-reentrant model
  4496 ;;
  4497                           
  4498                           	psect	text19
  4499  002440                     __ptext19:
  4500                           	opt stack 0
  4501  002440                     ___flsub:
  4502                           	opt stack 26
  4503                           
  4504                           ;incstack = 0
  4505  002440  5046               	movf	___flsub@f2,w,c
  4506  002442  1047               	iorwf	___flsub@f2+1,w,c
  4507  002444  1048               	iorwf	___flsub@f2+2,w,c
  4508  002446  1049               	iorwf	___flsub@f2+3,w,c
  4509  002448  E002               	bz	l3405
  4510  00244A  0E80               	movlw	128
  4511  00244C  1A49               	xorwf	___flsub@f2+3,f,c
  4512  00244E                     l3405:
  4513  00244E  C042  F036         	movff	___flsub@f1,___fladd@f1
  4514  002452  C043  F037         	movff	___flsub@f1+1,___fladd@f1+1
  4515  002456  C044  F038         	movff	___flsub@f1+2,___fladd@f1+2
  4516  00245A  C045  F039         	movff	___flsub@f1+3,___fladd@f1+3
  4517  00245E  C046  F03A         	movff	___flsub@f2,___fladd@f2
  4518  002462  C047  F03B         	movff	___flsub@f2+1,___fladd@f2+1
  4519  002466  C048  F03C         	movff	___flsub@f2+2,___fladd@f2+2
  4520  00246A  C049  F03D         	movff	___flsub@f2+3,___fladd@f2+3
  4521  00246E  ECEE  F00A         	call	___fladd	;wreg free
  4522  002472  C036  F042         	movff	?___fladd,?___flsub
  4523  002476  C037  F043         	movff	?___fladd+1,?___flsub+1
  4524  00247A  C038  F044         	movff	?___fladd+2,?___flsub+2
  4525  00247E  C039  F045         	movff	?___fladd+3,?___flsub+3
  4526  002482  0012               	return		;funcret
  4527  002484                     __end_of___flsub:
  4528                           	opt stack 0
  4529                           tblptru	equ	0xFF8
  4530                           tblptrh	equ	0xFF7
  4531                           tblptrl	equ	0xFF6
  4532                           tablat	equ	0xFF5
  4533                           intcon	equ	0xFF2
  4534                           intcon2	equ	0xFF1
  4535                           postinc0	equ	0xFEE
  4536                           wreg	equ	0xFE8
  4537                           postdec1	equ	0xFE5
  4538                           fsr1l	equ	0xFE1
  4539                           status	equ	0xFD8
  4540                           
  4541 ;; *************** function ___flneg *****************
  4542 ;; Defined at:
  4543 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flneg.c"
  4544 ;; Parameters:    Size  Location     Type
  4545 ;;  f1              4    1[COMRAM] unsigned char 
  4546 ;; Auto vars:     Size  Location     Type
  4547 ;;		None
  4548 ;; Return value:  Size  Location     Type
  4549 ;;                  4    1[COMRAM] unsigned char 
  4550 ;; Registers used:
  4551 ;;		wreg, status,2, status,0
  4552 ;; Tracked objects:
  4553 ;;		On entry : F/0
  4554 ;;		On exit  : F/0
  4555 ;;		Unchanged: F/0
  4556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4557 ;;      Params:         4       0       0       0       0       0       0
  4558 ;;      Locals:         0       0       0       0       0       0       0
  4559 ;;      Temps:          0       0       0       0       0       0       0
  4560 ;;      Totals:         4       0       0       0       0       0       0
  4561 ;;Total ram usage:        4 bytes
  4562 ;; Hardware stack levels used:    1
  4563 ;; Hardware stack levels required when called:    1
  4564 ;; This function calls:
  4565 ;;		Nothing
  4566 ;; This function is called by:
  4567 ;;		_pow
  4568 ;;		_exp
  4569 ;; This function uses a non-reentrant model
  4570 ;;
  4571                           
  4572                           	psect	text20
  4573  0026CC                     __ptext20:
  4574                           	opt stack 0
  4575  0026CC                     ___flneg:
  4576                           	opt stack 26
  4577                           
  4578                           ; BSR set to: 0
  4579                           
  4580                           ;incstack = 0
  4581  0026CC  5002               	movf	___flneg@f1,w,c
  4582  0026CE  1003               	iorwf	___flneg@f1+1,w,c
  4583  0026D0  1004               	iorwf	___flneg@f1+2,w,c
  4584  0026D2  1005               	iorwf	___flneg@f1+3,w,c
  4585  0026D4  E002               	bz	l2481
  4586                           
  4587                           ; BSR set to: 0
  4588  0026D6  0E80               	movlw	128
  4589  0026D8  1A05               	xorwf	___flneg@f1+3,f,c
  4590  0026DA                     l2481:
  4591                           
  4592                           ; BSR set to: 0
  4593  0026DA  C002  F002         	movff	___flneg@f1,?___flneg
  4594  0026DE  C003  F003         	movff	___flneg@f1+1,?___flneg+1
  4595  0026E2  C004  F004         	movff	___flneg@f1+2,?___flneg+2
  4596  0026E6  C005  F005         	movff	___flneg@f1+3,?___flneg+3
  4597                           
  4598                           ; BSR set to: 0
  4599  0026EA  0012               	return		;funcret
  4600  0026EC                     __end_of___flneg:
  4601                           	opt stack 0
  4602                           tblptru	equ	0xFF8
  4603                           tblptrh	equ	0xFF7
  4604                           tblptrl	equ	0xFF6
  4605                           tablat	equ	0xFF5
  4606                           intcon	equ	0xFF2
  4607                           intcon2	equ	0xFF1
  4608                           postinc0	equ	0xFEE
  4609                           wreg	equ	0xFE8
  4610                           postdec1	equ	0xFE5
  4611                           fsr1l	equ	0xFE1
  4612                           status	equ	0xFD8
  4613                           
  4614 ;; *************** function ___fldiv *****************
  4615 ;; Defined at:
  4616 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldiv.c"
  4617 ;; Parameters:    Size  Location     Type
  4618 ;;  f1              4   11[COMRAM] unsigned char 
  4619 ;;  f2              4   15[COMRAM] unsigned char 
  4620 ;; Auto vars:     Size  Location     Type
  4621 ;;  f3              4   19[COMRAM] unsigned char 
  4622 ;;  sign            1   25[COMRAM] unsigned char 
  4623 ;;  exp             1   24[COMRAM] unsigned char 
  4624 ;;  cntr            1   23[COMRAM] unsigned char 
  4625 ;; Return value:  Size  Location     Type
  4626 ;;                  4   11[COMRAM] unsigned char 
  4627 ;; Registers used:
  4628 ;;		wreg, status,2, status,0, cstack
  4629 ;; Tracked objects:
  4630 ;;		On entry : 0/0
  4631 ;;		On exit  : 0/0
  4632 ;;		Unchanged: 0/0
  4633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4634 ;;      Params:         8       0       0       0       0       0       0
  4635 ;;      Locals:         7       0       0       0       0       0       0
  4636 ;;      Temps:          0       0       0       0       0       0       0
  4637 ;;      Totals:        15       0       0       0       0       0       0
  4638 ;;Total ram usage:       15 bytes
  4639 ;; Hardware stack levels used:    1
  4640 ;; Hardware stack levels required when called:    2
  4641 ;; This function calls:
  4642 ;;		___flpack
  4643 ;; This function is called by:
  4644 ;;		_format_double
  4645 ;;		_measure_capacitance
  4646 ;;		_measure_inductance
  4647 ;;		_exp
  4648 ;; This function uses a non-reentrant model
  4649 ;;
  4650                           
  4651                           	psect	text21
  4652  001E72                     __ptext21:
  4653                           	opt stack 0
  4654  001E72                     ___fldiv:
  4655                           	opt stack 27
  4656                           
  4657                           ; BSR set to: 0
  4658                           ;incstack = 0
  4659  001E72  340E               	rlcf	___fldiv@f1+2,w,c
  4660  001E74  340F               	rlcf	___fldiv@f1+3,w,c
  4661  001E76  6E19               	movwf	___fldiv@exp,c
  4662  001E78  5019               	movf	___fldiv@exp,w,c
  4663  001E7A  E105               	bnz	l3369
  4664  001E7C  6A0C               	clrf	?___fldiv,c
  4665  001E7E  6A0D               	clrf	?___fldiv+1,c
  4666  001E80  6A0E               	clrf	?___fldiv+2,c
  4667  001E82  6A0F               	clrf	?___fldiv+3,c
  4668  001E84  0012               	return	
  4669  001E86                     l3369:
  4670  001E86  3412               	rlcf	___fldiv@f2+2,w,c
  4671  001E88  3413               	rlcf	___fldiv@f2+3,w,c
  4672  001E8A  6E1A               	movwf	___fldiv@sign,c
  4673  001E8C  501A               	movf	___fldiv@sign,w,c
  4674  001E8E  E105               	bnz	l3373
  4675  001E90  6A0C               	clrf	?___fldiv,c
  4676  001E92  6A0D               	clrf	?___fldiv+1,c
  4677  001E94  6A0E               	clrf	?___fldiv+2,c
  4678  001E96  6A0F               	clrf	?___fldiv+3,c
  4679  001E98  0012               	return	
  4680  001E9A                     l3373:
  4681  001E9A  501A               	movf	___fldiv@sign,w,c
  4682  001E9C  0F89               	addlw	137
  4683  001E9E  5E19               	subwf	___fldiv@exp,f,c
  4684  001EA0  C00F  F01A         	movff	___fldiv@f1+3,___fldiv@sign
  4685  001EA4  5013               	movf	___fldiv@f2+3,w,c
  4686  001EA6  1A1A               	xorwf	___fldiv@sign,f,c
  4687  001EA8  0E80               	movlw	128
  4688  001EAA  161A               	andwf	___fldiv@sign,f,c
  4689  001EAC  8E0E               	bsf	___fldiv@f1+2,7,c
  4690  001EAE  6A0F               	clrf	___fldiv@f1+3,c
  4691  001EB0  8E12               	bsf	___fldiv@f2+2,7,c
  4692  001EB2  6A13               	clrf	___fldiv@f2+3,c
  4693  001EB4  0E20               	movlw	32
  4694  001EB6  6E18               	movwf	___fldiv@cntr,c
  4695  001EB8                     l3385:
  4696  001EB8  90D8               	bcf	status,0,c
  4697  001EBA  3614               	rlcf	___fldiv@f3,f,c
  4698  001EBC  3615               	rlcf	___fldiv@f3+1,f,c
  4699  001EBE  3616               	rlcf	___fldiv@f3+2,f,c
  4700  001EC0  3617               	rlcf	___fldiv@f3+3,f,c
  4701  001EC2  5010               	movf	___fldiv@f2,w,c
  4702  001EC4  5C0C               	subwf	___fldiv@f1,w,c
  4703  001EC6  5011               	movf	___fldiv@f2+1,w,c
  4704  001EC8  580D               	subwfb	___fldiv@f1+1,w,c
  4705  001ECA  5012               	movf	___fldiv@f2+2,w,c
  4706  001ECC  580E               	subwfb	___fldiv@f1+2,w,c
  4707  001ECE  5013               	movf	___fldiv@f2+3,w,c
  4708  001ED0  580F               	subwfb	___fldiv@f1+3,w,c
  4709  001ED2  E309               	bnc	l3393
  4710  001ED4  5010               	movf	___fldiv@f2,w,c
  4711  001ED6  5E0C               	subwf	___fldiv@f1,f,c
  4712  001ED8  5011               	movf	___fldiv@f2+1,w,c
  4713  001EDA  5A0D               	subwfb	___fldiv@f1+1,f,c
  4714  001EDC  5012               	movf	___fldiv@f2+2,w,c
  4715  001EDE  5A0E               	subwfb	___fldiv@f1+2,f,c
  4716  001EE0  5013               	movf	___fldiv@f2+3,w,c
  4717  001EE2  5A0F               	subwfb	___fldiv@f1+3,f,c
  4718  001EE4  8014               	bsf	___fldiv@f3,0,c
  4719  001EE6                     l3393:
  4720  001EE6  90D8               	bcf	status,0,c
  4721  001EE8  360C               	rlcf	___fldiv@f1,f,c
  4722  001EEA  360D               	rlcf	___fldiv@f1+1,f,c
  4723  001EEC  360E               	rlcf	___fldiv@f1+2,f,c
  4724  001EEE  360F               	rlcf	___fldiv@f1+3,f,c
  4725  001EF0  2E18               	decfsz	___fldiv@cntr,f,c
  4726  001EF2  D7E2               	goto	l3385
  4727  001EF4  C014  F002         	movff	___fldiv@f3,___flpack@arg
  4728  001EF8  C015  F003         	movff	___fldiv@f3+1,___flpack@arg+1
  4729  001EFC  C016  F004         	movff	___fldiv@f3+2,___flpack@arg+2
  4730  001F00  C017  F005         	movff	___fldiv@f3+3,___flpack@arg+3
  4731  001F04  C019  F006         	movff	___fldiv@exp,___flpack@exp
  4732  001F08  C01A  F007         	movff	___fldiv@sign,___flpack@sign
  4733  001F0C  EC7C  F00E         	call	___flpack	;wreg free
  4734  001F10  C002  F00C         	movff	?___flpack,?___fldiv
  4735  001F14  C003  F00D         	movff	?___flpack+1,?___fldiv+1
  4736  001F18  C004  F00E         	movff	?___flpack+2,?___fldiv+2
  4737  001F1C  C005  F00F         	movff	?___flpack+3,?___fldiv+3
  4738  001F20  0012               	return		;funcret
  4739  001F22                     __end_of___fldiv:
  4740                           	opt stack 0
  4741                           tblptru	equ	0xFF8
  4742                           tblptrh	equ	0xFF7
  4743                           tblptrl	equ	0xFF6
  4744                           tablat	equ	0xFF5
  4745                           intcon	equ	0xFF2
  4746                           intcon2	equ	0xFF1
  4747                           postinc0	equ	0xFEE
  4748                           wreg	equ	0xFE8
  4749                           postdec1	equ	0xFE5
  4750                           fsr1l	equ	0xFE1
  4751                           status	equ	0xFD8
  4752                           
  4753 ;; *************** function ___lltofl *****************
  4754 ;; Defined at:
  4755 ;;		line 30 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltofl.c"
  4756 ;; Parameters:    Size  Location     Type
  4757 ;;  c               4   11[COMRAM] unsigned long 
  4758 ;; Auto vars:     Size  Location     Type
  4759 ;;		None
  4760 ;; Return value:  Size  Location     Type
  4761 ;;                  4   11[COMRAM] unsigned long 
  4762 ;; Registers used:
  4763 ;;		wreg, status,2, status,0, cstack
  4764 ;; Tracked objects:
  4765 ;;		On entry : F/0
  4766 ;;		On exit  : 0/0
  4767 ;;		Unchanged: 0/0
  4768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4769 ;;      Params:         4       0       0       0       0       0       0
  4770 ;;      Locals:         0       0       0       0       0       0       0
  4771 ;;      Temps:          0       0       0       0       0       0       0
  4772 ;;      Totals:         4       0       0       0       0       0       0
  4773 ;;Total ram usage:        4 bytes
  4774 ;; Hardware stack levels used:    1
  4775 ;; Hardware stack levels required when called:    2
  4776 ;; This function calls:
  4777 ;;		___flpack
  4778 ;; This function is called by:
  4779 ;;		_pow
  4780 ;; This function uses a non-reentrant model
  4781 ;;
  4782                           
  4783                           	psect	text22
  4784  002602                     __ptext22:
  4785                           	opt stack 0
  4786  002602                     ___lltofl:
  4787                           	opt stack 26
  4788                           
  4789                           ; BSR set to: 0
  4790                           
  4791                           ;incstack = 0
  4792  002602  C00C  F002         	movff	___lltofl@c,___flpack@arg
  4793  002606  C00D  F003         	movff	___lltofl@c+1,___flpack@arg+1
  4794  00260A  C00E  F004         	movff	___lltofl@c+2,___flpack@arg+2
  4795  00260E  C00F  F005         	movff	___lltofl@c+3,___flpack@arg+3
  4796  002612  0E96               	movlw	150
  4797  002614  6E06               	movwf	___flpack@exp,c
  4798  002616  0E00               	movlw	0
  4799  002618  6E07               	movwf	___flpack@sign,c
  4800  00261A  EC7C  F00E         	call	___flpack	;wreg free
  4801  00261E  C002  F00C         	movff	?___flpack,?___lltofl
  4802  002622  C003  F00D         	movff	?___flpack+1,?___lltofl+1
  4803  002626  C004  F00E         	movff	?___flpack+2,?___lltofl+2
  4804  00262A  C005  F00F         	movff	?___flpack+3,?___lltofl+3
  4805  00262E  0012               	return		;funcret
  4806  002630                     __end_of___lltofl:
  4807                           	opt stack 0
  4808                           tblptru	equ	0xFF8
  4809                           tblptrh	equ	0xFF7
  4810                           tblptrl	equ	0xFF6
  4811                           tablat	equ	0xFF5
  4812                           intcon	equ	0xFF2
  4813                           intcon2	equ	0xFF1
  4814                           postinc0	equ	0xFEE
  4815                           wreg	equ	0xFE8
  4816                           postdec1	equ	0xFE5
  4817                           fsr1l	equ	0xFE1
  4818                           status	equ	0xFD8
  4819                           
  4820 ;; *************** function _log10 *****************
  4821 ;; Defined at:
  4822 ;;		line 39 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  4823 ;; Parameters:    Size  Location     Type
  4824 ;;  x               4   83[COMRAM] unsigned long 
  4825 ;; Auto vars:     Size  Location     Type
  4826 ;;		None
  4827 ;; Return value:  Size  Location     Type
  4828 ;;                  4   83[COMRAM] unsigned long 
  4829 ;; Registers used:
  4830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4831 ;; Tracked objects:
  4832 ;;		On entry : 0/0
  4833 ;;		On exit  : 0/0
  4834 ;;		Unchanged: 0/0
  4835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4836 ;;      Params:         4       0       0       0       0       0       0
  4837 ;;      Locals:         4       0       0       0       0       0       0
  4838 ;;      Temps:          0       0       0       0       0       0       0
  4839 ;;      Totals:         8       0       0       0       0       0       0
  4840 ;;Total ram usage:        8 bytes
  4841 ;; Hardware stack levels used:    1
  4842 ;; Hardware stack levels required when called:    5
  4843 ;; This function calls:
  4844 ;;		___flmul
  4845 ;;		_log
  4846 ;; This function is called by:
  4847 ;;		_format_double
  4848 ;; This function uses a non-reentrant model
  4849 ;;
  4850                           
  4851                           	psect	text23
  4852  002274                     __ptext23:
  4853                           	opt stack 0
  4854  002274                     _log10:
  4855                           	opt stack 24
  4856                           
  4857                           ;incstack = 0
  4858  002274  C054  F04E         	movff	log10@x,log@x
  4859  002278  C055  F04F         	movff	log10@x+1,log@x+1
  4860  00227C  C056  F050         	movff	log10@x+2,log@x+2
  4861  002280  C057  F051         	movff	log10@x+3,log@x+3
  4862  002284  ECA2  F00B         	call	_log	;wreg free
  4863  002288  C04E  F058         	movff	?_log,_log10$1030
  4864  00228C  C04F  F059         	movff	?_log+1,_log10$1030+1
  4865  002290  C050  F05A         	movff	?_log+2,_log10$1030+2
  4866  002294  C051  F05B         	movff	?_log+3,_log10$1030+3
  4867  002298  C058  F01B         	movff	_log10$1030,___flmul@f1
  4868  00229C  C059  F01C         	movff	_log10$1030+1,___flmul@f1+1
  4869  0022A0  C05A  F01D         	movff	_log10$1030+2,___flmul@f1+2
  4870  0022A4  C05B  F01E         	movff	_log10$1030+3,___flmul@f1+3
  4871  0022A8  0ED9               	movlw	217
  4872  0022AA  6E1F               	movwf	___flmul@f2,c
  4873  0022AC  0E5B               	movlw	91
  4874  0022AE  6E20               	movwf	___flmul@f2+1,c
  4875  0022B0  0EDE               	movlw	222
  4876  0022B2  6E21               	movwf	___flmul@f2+2,c
  4877  0022B4  0E3E               	movlw	62
  4878  0022B6  6E22               	movwf	___flmul@f2+3,c
  4879  0022B8  EC7D  F008         	call	___flmul	;wreg free
  4880  0022BC  C01B  F054         	movff	?___flmul,?_log10
  4881  0022C0  C01C  F055         	movff	?___flmul+1,?_log10+1
  4882  0022C4  C01D  F056         	movff	?___flmul+2,?_log10+2
  4883  0022C8  C01E  F057         	movff	?___flmul+3,?_log10+3
  4884  0022CC  0012               	return		;funcret
  4885  0022CE                     __end_of_log10:
  4886                           	opt stack 0
  4887                           tblptru	equ	0xFF8
  4888                           tblptrh	equ	0xFF7
  4889                           tblptrl	equ	0xFF6
  4890                           tablat	equ	0xFF5
  4891                           intcon	equ	0xFF2
  4892                           intcon2	equ	0xFF1
  4893                           postinc0	equ	0xFEE
  4894                           wreg	equ	0xFE8
  4895                           postdec1	equ	0xFE5
  4896                           fsr1l	equ	0xFE1
  4897                           status	equ	0xFD8
  4898                           
  4899 ;; *************** function _log *****************
  4900 ;; Defined at:
  4901 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  4902 ;; Parameters:    Size  Location     Type
  4903 ;;  x               4   77[COMRAM] unsigned long 
  4904 ;; Auto vars:     Size  Location     Type
  4905 ;;  exponent        2   81[COMRAM] int 
  4906 ;; Return value:  Size  Location     Type
  4907 ;;                  4   77[COMRAM] int 
  4908 ;; Registers used:
  4909 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4910 ;; Tracked objects:
  4911 ;;		On entry : 0/0
  4912 ;;		On exit  : 0/0
  4913 ;;		Unchanged: 0/0
  4914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4915 ;;      Params:         4       0       0       0       0       0       0
  4916 ;;      Locals:         2       0       0       0       0       0       0
  4917 ;;      Temps:          0       0       0       0       0       0       0
  4918 ;;      Totals:         6       0       0       0       0       0       0
  4919 ;;Total ram usage:        6 bytes
  4920 ;; Hardware stack levels used:    1
  4921 ;; Hardware stack levels required when called:    4
  4922 ;; This function calls:
  4923 ;;		___awtofl
  4924 ;;		___fladd
  4925 ;;		___flmul
  4926 ;;		_eval_poly
  4927 ;;		_frexp
  4928 ;; This function is called by:
  4929 ;;		_log10
  4930 ;;		_pow
  4931 ;; This function uses a non-reentrant model
  4932 ;;
  4933                           
  4934                           	psect	text24
  4935  001744                     __ptext24:
  4936                           	opt stack 0
  4937  001744                     _log:
  4938                           	opt stack 24
  4939                           
  4940                           ;incstack = 0
  4941  001744  AE51               	btfss	log@x+3,7,c
  4942  001746  D005               	goto	l3433
  4943  001748  6A4E               	clrf	?_log,c
  4944  00174A  6A4F               	clrf	?_log+1,c
  4945  00174C  6A50               	clrf	?_log+2,c
  4946  00174E  6A51               	clrf	?_log+3,c
  4947  001750  0012               	return	
  4948  001752                     l3433:
  4949  001752  504E               	movf	log@x,w,c
  4950  001754  104F               	iorwf	log@x+1,w,c
  4951  001756  1050               	iorwf	log@x+2,w,c
  4952  001758  1051               	iorwf	log@x+3,w,c
  4953  00175A  E105               	bnz	l3437
  4954  00175C  6A4E               	clrf	?_log,c
  4955  00175E  6A4F               	clrf	?_log+1,c
  4956  001760  6A50               	clrf	?_log+2,c
  4957  001762  6A51               	clrf	?_log+3,c
  4958  001764  0012               	return	
  4959  001766                     l3437:
  4960  001766  6A1F               	clrf	___flmul@f2,c
  4961  001768  6A20               	clrf	___flmul@f2+1,c
  4962  00176A  6A21               	clrf	___flmul@f2+2,c
  4963  00176C  0E40               	movlw	64
  4964  00176E  6E22               	movwf	___flmul@f2+3,c
  4965  001770  0E52               	movlw	low log@exponent
  4966  001772  6E06               	movwf	frexp@eptr,c
  4967  001774  C04E  F002         	movff	log@x,frexp@value
  4968  001778  C04F  F003         	movff	log@x+1,frexp@value+1
  4969  00177C  C050  F004         	movff	log@x+2,frexp@value+2
  4970  001780  C051  F005         	movff	log@x+3,frexp@value+3
  4971  001784  ECC6  F010         	call	_frexp	;wreg free
  4972  001788  C002  F01B         	movff	?_frexp,___flmul@f1
  4973  00178C  C003  F01C         	movff	?_frexp+1,___flmul@f1+1
  4974  001790  C004  F01D         	movff	?_frexp+2,___flmul@f1+2
  4975  001794  C005  F01E         	movff	?_frexp+3,___flmul@f1+3
  4976  001798  EC7D  F008         	call	___flmul	;wreg free
  4977  00179C  C01B  F036         	movff	?___flmul,___fladd@f1
  4978  0017A0  C01C  F037         	movff	?___flmul+1,___fladd@f1+1
  4979  0017A4  C01D  F038         	movff	?___flmul+2,___fladd@f1+2
  4980  0017A8  C01E  F039         	movff	?___flmul+3,___fladd@f1+3
  4981  0017AC  0E00               	movlw	0
  4982  0017AE  6E3A               	movwf	___fladd@f2,c
  4983  0017B0  6E3B               	movwf	___fladd@f2+1,c
  4984  0017B2  0E80               	movlw	128
  4985  0017B4  6E3C               	movwf	___fladd@f2+2,c
  4986  0017B6  0EBF               	movlw	191
  4987  0017B8  6E3D               	movwf	___fladd@f2+3,c
  4988  0017BA  ECEE  F00A         	call	___fladd	;wreg free
  4989  0017BE  C036  F04E         	movff	?___fladd,log@x
  4990  0017C2  C037  F04F         	movff	?___fladd+1,log@x+1
  4991  0017C6  C038  F050         	movff	?___fladd+2,log@x+2
  4992  0017CA  C039  F051         	movff	?___fladd+3,log@x+3
  4993  0017CE  0652               	decf	log@exponent,f,c
  4994  0017D0  A0D8               	btfss	status,0,c
  4995  0017D2  0653               	decf	log@exponent+1,f,c
  4996  0017D4  C04E  F042         	movff	log@x,eval_poly@x
  4997  0017D8  C04F  F043         	movff	log@x+1,eval_poly@x+1
  4998  0017DC  C050  F044         	movff	log@x+2,eval_poly@x+2
  4999  0017E0  C051  F045         	movff	log@x+3,eval_poly@x+3
  5000  0017E4  0E29               	movlw	low log@coeff
  5001  0017E6  6E46               	movwf	eval_poly@d,c
  5002  0017E8  6A48               	clrf	eval_poly@n+1,c
  5003  0017EA  0E08               	movlw	8
  5004  0017EC  6E47               	movwf	eval_poly@n,c
  5005  0017EE  ECDF  F00E         	call	_eval_poly	;wreg free
  5006  0017F2  C042  F04E         	movff	?_eval_poly,log@x
  5007  0017F6  C043  F04F         	movff	?_eval_poly+1,log@x+1
  5008  0017FA  C044  F050         	movff	?_eval_poly+2,log@x+2
  5009  0017FE  C045  F051         	movff	?_eval_poly+3,log@x+3
  5010  001802  0E18               	movlw	24
  5011  001804  6E1F               	movwf	___flmul@f2,c
  5012  001806  0E72               	movlw	114
  5013  001808  6E20               	movwf	___flmul@f2+1,c
  5014  00180A  0E31               	movlw	49
  5015  00180C  6E21               	movwf	___flmul@f2+2,c
  5016  00180E  0E3F               	movlw	63
  5017  001810  6E22               	movwf	___flmul@f2+3,c
  5018  001812  C052  F00C         	movff	log@exponent,___awtofl@c
  5019  001816  C053  F00D         	movff	log@exponent+1,___awtofl@c+1
  5020  00181A  EC7F  F012         	call	___awtofl	;wreg free
  5021  00181E  C00C  F01B         	movff	?___awtofl,___flmul@f1
  5022  001822  C00D  F01C         	movff	?___awtofl+1,___flmul@f1+1
  5023  001826  C00E  F01D         	movff	?___awtofl+2,___flmul@f1+2
  5024  00182A  C00F  F01E         	movff	?___awtofl+3,___flmul@f1+3
  5025  00182E  EC7D  F008         	call	___flmul	;wreg free
  5026  001832  C01B  F036         	movff	?___flmul,___fladd@f1
  5027  001836  C01C  F037         	movff	?___flmul+1,___fladd@f1+1
  5028  00183A  C01D  F038         	movff	?___flmul+2,___fladd@f1+2
  5029  00183E  C01E  F039         	movff	?___flmul+3,___fladd@f1+3
  5030  001842  C04E  F03A         	movff	log@x,___fladd@f2
  5031  001846  C04F  F03B         	movff	log@x+1,___fladd@f2+1
  5032  00184A  C050  F03C         	movff	log@x+2,___fladd@f2+2
  5033  00184E  C051  F03D         	movff	log@x+3,___fladd@f2+3
  5034  001852  ECEE  F00A         	call	___fladd	;wreg free
  5035  001856  C036  F04E         	movff	?___fladd,?_log
  5036  00185A  C037  F04F         	movff	?___fladd+1,?_log+1
  5037  00185E  C038  F050         	movff	?___fladd+2,?_log+2
  5038  001862  C039  F051         	movff	?___fladd+3,?_log+3
  5039  001866  0012               	return		;funcret
  5040  001868                     __end_of_log:
  5041                           	opt stack 0
  5042                           tblptru	equ	0xFF8
  5043                           tblptrh	equ	0xFF7
  5044                           tblptrl	equ	0xFF6
  5045                           tablat	equ	0xFF5
  5046                           intcon	equ	0xFF2
  5047                           intcon2	equ	0xFF1
  5048                           postinc0	equ	0xFEE
  5049                           wreg	equ	0xFE8
  5050                           postdec1	equ	0xFE5
  5051                           fsr1l	equ	0xFE1
  5052                           status	equ	0xFD8
  5053                           
  5054 ;; *************** function _frexp *****************
  5055 ;; Defined at:
  5056 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  5057 ;; Parameters:    Size  Location     Type
  5058 ;;  value           4    1[COMRAM] int 
  5059 ;;  eptr            1    5[COMRAM] PTR int 
  5060 ;;		 -> log@exponent(2), floor@expon(2), 
  5061 ;; Auto vars:     Size  Location     Type
  5062 ;;		None
  5063 ;; Return value:  Size  Location     Type
  5064 ;;                  4    1[COMRAM] PTR int 
  5065 ;; Registers used:
  5066 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5067 ;; Tracked objects:
  5068 ;;		On entry : 0/0
  5069 ;;		On exit  : 0/0
  5070 ;;		Unchanged: 0/0
  5071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5072 ;;      Params:         5       0       0       0       0       0       0
  5073 ;;      Locals:         0       0       0       0       0       0       0
  5074 ;;      Temps:          2       0       0       0       0       0       0
  5075 ;;      Totals:         7       0       0       0       0       0       0
  5076 ;;Total ram usage:        7 bytes
  5077 ;; Hardware stack levels used:    1
  5078 ;; Hardware stack levels required when called:    1
  5079 ;; This function calls:
  5080 ;;		Nothing
  5081 ;; This function is called by:
  5082 ;;		_floor
  5083 ;;		_log
  5084 ;; This function uses a non-reentrant model
  5085 ;;
  5086                           
  5087                           	psect	text25
  5088  00218C                     __ptext25:
  5089                           	opt stack 0
  5090  00218C                     _frexp:
  5091                           	opt stack 26
  5092                           
  5093                           ;incstack = 0
  5094  00218C  5002               	movf	frexp@value,w,c
  5095  00218E  1003               	iorwf	frexp@value+1,w,c
  5096  002190  1004               	iorwf	frexp@value+2,w,c
  5097  002192  1005               	iorwf	frexp@value+3,w,c
  5098  002194  E10B               	bnz	l2341
  5099  002196  5006               	movf	frexp@eptr,w,c
  5100  002198  6ED9               	movwf	fsr2l,c
  5101  00219A  6ADA               	clrf	fsr2h,c
  5102  00219C  0E00               	movlw	0
  5103  00219E  6ADE               	clrf	postinc2,c
  5104  0021A0  6ADD               	clrf	postdec2,c
  5105  0021A2  6A02               	clrf	?_frexp,c
  5106  0021A4  6A03               	clrf	?_frexp+1,c
  5107  0021A6  6A04               	clrf	?_frexp+2,c
  5108  0021A8  6A05               	clrf	?_frexp+3,c
  5109  0021AA  0012               	return	
  5110  0021AC                     l2341:
  5111  0021AC  5005               	movf	frexp@value+3,w,c
  5112  0021AE  0B7F               	andlw	127
  5113  0021B0  6E07               	movwf	??_frexp& (0+255),c
  5114  0021B2  6A08               	clrf	(??_frexp+1)& (0+255),c
  5115  0021B4  90D8               	bcf	status,0,c
  5116  0021B6  3607               	rlcf	??_frexp,f,c
  5117  0021B8  3608               	rlcf	??_frexp+1,f,c
  5118  0021BA  5006               	movf	frexp@eptr,w,c
  5119  0021BC  6ED9               	movwf	fsr2l,c
  5120  0021BE  6ADA               	clrf	fsr2h,c
  5121  0021C0  C007  FFDE         	movff	??_frexp,postinc2
  5122  0021C4  C008  FFDD         	movff	??_frexp+1,postdec2
  5123  0021C8  5006               	movf	frexp@eptr,w,c
  5124  0021CA  6ED9               	movwf	fsr2l,c
  5125  0021CC  6ADA               	clrf	fsr2h,c
  5126  0021CE  0E01               	movlw	1
  5127  0021D0  AE04               	btfss	frexp@value+2,7,c
  5128  0021D2  0E00               	movlw	0
  5129  0021D4  12DE               	iorwf	postinc2,f,c
  5130  0021D6  0E00               	movlw	0
  5131  0021D8  12DD               	iorwf	postdec2,f,c
  5132  0021DA  5006               	movf	frexp@eptr,w,c
  5133  0021DC  6ED9               	movwf	fsr2l,c
  5134  0021DE  6ADA               	clrf	fsr2h,c
  5135  0021E0  0E82               	movlw	130
  5136  0021E2  26DE               	addwf	postinc2,f,c
  5137  0021E4  0EFF               	movlw	255
  5138  0021E6  22DD               	addwfc	postdec2,f,c
  5139  0021E8  5005               	movf	frexp@value+3,w,c
  5140  0021EA  0B80               	andlw	-128
  5141  0021EC  093F               	iorlw	63
  5142  0021EE  6E05               	movwf	frexp@value+3,c
  5143  0021F0  9E04               	bcf	frexp@value+2,7,c
  5144  0021F2  C002  F002         	movff	frexp@value,?_frexp
  5145  0021F6  C003  F003         	movff	frexp@value+1,?_frexp+1
  5146  0021FA  C004  F004         	movff	frexp@value+2,?_frexp+2
  5147  0021FE  C005  F005         	movff	frexp@value+3,?_frexp+3
  5148  002202  0012               	return		;funcret
  5149  002204                     __end_of_frexp:
  5150                           	opt stack 0
  5151                           tblptru	equ	0xFF8
  5152                           tblptrh	equ	0xFF7
  5153                           tblptrl	equ	0xFF6
  5154                           tablat	equ	0xFF5
  5155                           intcon	equ	0xFF2
  5156                           intcon2	equ	0xFF1
  5157                           postinc0	equ	0xFEE
  5158                           wreg	equ	0xFE8
  5159                           postdec1	equ	0xFE5
  5160                           fsr1l	equ	0xFE1
  5161                           postinc2	equ	0xFDE
  5162                           postdec2	equ	0xFDD
  5163                           fsr2h	equ	0xFDA
  5164                           fsr2l	equ	0xFD9
  5165                           status	equ	0xFD8
  5166                           
  5167 ;; *************** function _eval_poly *****************
  5168 ;; Defined at:
  5169 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  5170 ;; Parameters:    Size  Location     Type
  5171 ;;  x               4   65[COMRAM] PTR int 
  5172 ;;  d               1   69[COMRAM] PTR const 
  5173 ;;		 -> exp@coeff(40), log@coeff(36), 
  5174 ;;  n               2   70[COMRAM] int 
  5175 ;; Auto vars:     Size  Location     Type
  5176 ;;  res             4   73[COMRAM] int 
  5177 ;; Return value:  Size  Location     Type
  5178 ;;                  4   65[COMRAM] int 
  5179 ;; Registers used:
  5180 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5181 ;; Tracked objects:
  5182 ;;		On entry : 0/0
  5183 ;;		On exit  : 0/0
  5184 ;;		Unchanged: 0/0
  5185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5186 ;;      Params:         7       0       0       0       0       0       0
  5187 ;;      Locals:         4       0       0       0       0       0       0
  5188 ;;      Temps:          1       0       0       0       0       0       0
  5189 ;;      Totals:        12       0       0       0       0       0       0
  5190 ;;Total ram usage:       12 bytes
  5191 ;; Hardware stack levels used:    1
  5192 ;; Hardware stack levels required when called:    3
  5193 ;; This function calls:
  5194 ;;		___fladd
  5195 ;;		___flmul
  5196 ;; This function is called by:
  5197 ;;		_log
  5198 ;;		_exp
  5199 ;; This function uses a non-reentrant model
  5200 ;;
  5201                           
  5202                           	psect	text26
  5203  001DBE                     __ptext26:
  5204                           	opt stack 0
  5205  001DBE                     _eval_poly:
  5206                           	opt stack 24
  5207                           
  5208                           ;incstack = 0
  5209  001DBE  5047               	movf	eval_poly@n,w,c
  5210  001DC0  0D04               	mullw	4
  5211  001DC2  5046               	movf	eval_poly@d,w,c
  5212  001DC4  24F3               	addwf	prodl,w,c
  5213  001DC6  6E49               	movwf	??_eval_poly& (0+255),c
  5214  001DC8  C049  FFF6         	movff	??_eval_poly,tblptrl
  5215  001DCC                     	if	0	;There is only one active tblptr byte
  5216  001DCC                     	endif
  5217  001DCC                     	if	0	;tblptru may be non-zero
  5218  001DCC                     	endif
  5219  001DCC                     	if	0	;tblptru may be non-zero
  5220  001DCC                     	endif
  5221  001DCC  0009               	tblrd		*+
  5222  001DCE  CFF5 F04A          	movff	tablat,eval_poly@res
  5223  001DD2  0009               	tblrd		*+
  5224  001DD4  CFF5 F04B          	movff	tablat,eval_poly@res+1
  5225  001DD8  0009               	tblrd		*+
  5226  001DDA  CFF5 F04C          	movff	tablat,eval_poly@res+2
  5227  001DDE  000A               	tblrd		*-
  5228  001DE0  CFF5 F04D          	movff	tablat,eval_poly@res+3
  5229  001DE4  D03A               	goto	l3423
  5230  001DE6                     l3421:
  5231  001DE6  C04A  F01F         	movff	eval_poly@res,___flmul@f2
  5232  001DEA  C04B  F020         	movff	eval_poly@res+1,___flmul@f2+1
  5233  001DEE  C04C  F021         	movff	eval_poly@res+2,___flmul@f2+2
  5234  001DF2  C04D  F022         	movff	eval_poly@res+3,___flmul@f2+3
  5235  001DF6  C042  F01B         	movff	eval_poly@x,___flmul@f1
  5236  001DFA  C043  F01C         	movff	eval_poly@x+1,___flmul@f1+1
  5237  001DFE  C044  F01D         	movff	eval_poly@x+2,___flmul@f1+2
  5238  001E02  C045  F01E         	movff	eval_poly@x+3,___flmul@f1+3
  5239  001E06  EC7D  F008         	call	___flmul	;wreg free
  5240  001E0A  C01B  F036         	movff	?___flmul,___fladd@f1
  5241  001E0E  C01C  F037         	movff	?___flmul+1,___fladd@f1+1
  5242  001E12  C01D  F038         	movff	?___flmul+2,___fladd@f1+2
  5243  001E16  C01E  F039         	movff	?___flmul+3,___fladd@f1+3
  5244  001E1A  0647               	decf	eval_poly@n,f,c
  5245  001E1C  A0D8               	btfss	status,0,c
  5246  001E1E  0648               	decf	eval_poly@n+1,f,c
  5247  001E20  5047               	movf	eval_poly@n,w,c
  5248  001E22  0D04               	mullw	4
  5249  001E24  5046               	movf	eval_poly@d,w,c
  5250  001E26  24F3               	addwf	prodl,w,c
  5251  001E28  6E49               	movwf	??_eval_poly& (0+255),c
  5252  001E2A  C049  FFF6         	movff	??_eval_poly,tblptrl
  5253  001E2E                     	if	0	;There is only one active tblptr byte
  5254  001E2E                     	endif
  5255  001E2E                     	if	0	;tblptru may be non-zero
  5256  001E2E                     	endif
  5257  001E2E                     	if	0	;tblptru may be non-zero
  5258  001E2E                     	endif
  5259  001E2E  0009               	tblrd		*+
  5260  001E30  CFF5 F03A          	movff	tablat,___fladd@f2
  5261  001E34  0009               	tblrd		*+
  5262  001E36  CFF5 F03B          	movff	tablat,___fladd@f2+1
  5263  001E3A  0009               	tblrd		*+
  5264  001E3C  CFF5 F03C          	movff	tablat,___fladd@f2+2
  5265  001E40  000A               	tblrd		*-
  5266  001E42  CFF5 F03D          	movff	tablat,___fladd@f2+3
  5267  001E46  ECEE  F00A         	call	___fladd	;wreg free
  5268  001E4A  C036  F04A         	movff	?___fladd,eval_poly@res
  5269  001E4E  C037  F04B         	movff	?___fladd+1,eval_poly@res+1
  5270  001E52  C038  F04C         	movff	?___fladd+2,eval_poly@res+2
  5271  001E56  C039  F04D         	movff	?___fladd+3,eval_poly@res+3
  5272  001E5A                     l3423:
  5273  001E5A  5047               	movf	eval_poly@n,w,c
  5274  001E5C  1048               	iorwf	eval_poly@n+1,w,c
  5275  001E5E  E1C3               	bnz	l3421
  5276  001E60  C04A  F042         	movff	eval_poly@res,?_eval_poly
  5277  001E64  C04B  F043         	movff	eval_poly@res+1,?_eval_poly+1
  5278  001E68  C04C  F044         	movff	eval_poly@res+2,?_eval_poly+2
  5279  001E6C  C04D  F045         	movff	eval_poly@res+3,?_eval_poly+3
  5280  001E70  0012               	return		;funcret
  5281  001E72                     __end_of_eval_poly:
  5282                           	opt stack 0
  5283                           tblptru	equ	0xFF8
  5284                           tblptrh	equ	0xFF7
  5285                           tblptrl	equ	0xFF6
  5286                           tablat	equ	0xFF5
  5287                           prodl	equ	0xFF3
  5288                           intcon	equ	0xFF2
  5289                           intcon2	equ	0xFF1
  5290                           postinc0	equ	0xFEE
  5291                           wreg	equ	0xFE8
  5292                           postdec1	equ	0xFE5
  5293                           fsr1l	equ	0xFE1
  5294                           postinc2	equ	0xFDE
  5295                           postdec2	equ	0xFDD
  5296                           fsr2h	equ	0xFDA
  5297                           fsr2l	equ	0xFD9
  5298                           status	equ	0xFD8
  5299                           
  5300 ;; *************** function ___flmul *****************
  5301 ;; Defined at:
  5302 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flmul.c"
  5303 ;; Parameters:    Size  Location     Type
  5304 ;;  f1              4   26[COMRAM] int 
  5305 ;;  f2              4   30[COMRAM] int 
  5306 ;; Auto vars:     Size  Location     Type
  5307 ;;  f3_as_produc    4   49[COMRAM] unsigned long 
  5308 ;;  sign            1   48[COMRAM] unsigned char 
  5309 ;;  exp             1   47[COMRAM] unsigned char 
  5310 ;;  cntr            1    0        unsigned char 
  5311 ;; Return value:  Size  Location     Type
  5312 ;;                  4   26[COMRAM] unsigned char 
  5313 ;; Registers used:
  5314 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5315 ;; Tracked objects:
  5316 ;;		On entry : 0/0
  5317 ;;		On exit  : 0/0
  5318 ;;		Unchanged: 0/0
  5319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5320 ;;      Params:         8       0       0       0       0       0       0
  5321 ;;      Locals:         6       0       0       0       0       0       0
  5322 ;;      Temps:         13       0       0       0       0       0       0
  5323 ;;      Totals:        27       0       0       0       0       0       0
  5324 ;;Total ram usage:       27 bytes
  5325 ;; Hardware stack levels used:    1
  5326 ;; Hardware stack levels required when called:    2
  5327 ;; This function calls:
  5328 ;;		___flpack
  5329 ;; This function is called by:
  5330 ;;		_format_double
  5331 ;;		_measure_capacitance
  5332 ;;		_measure_inductance
  5333 ;;		_log
  5334 ;;		_log10
  5335 ;;		_pow
  5336 ;;		_eval_poly
  5337 ;;		_exp
  5338 ;; This function uses a non-reentrant model
  5339 ;;
  5340                           
  5341                           	psect	text27
  5342  0010FA                     __ptext27:
  5343                           	opt stack 0
  5344  0010FA                     ___flmul:
  5345                           	opt stack 27
  5346                           
  5347                           ;incstack = 0
  5348  0010FA  341D               	rlcf	___flmul@f1+2,w,c
  5349  0010FC  341E               	rlcf	___flmul@f1+3,w,c
  5350  0010FE  6E30               	movwf	___flmul@exp,c
  5351  001100  5030               	movf	___flmul@exp,w,c
  5352  001102  E105               	bnz	l3309
  5353  001104  6A1B               	clrf	?___flmul,c
  5354  001106  6A1C               	clrf	?___flmul+1,c
  5355  001108  6A1D               	clrf	?___flmul+2,c
  5356  00110A  6A1E               	clrf	?___flmul+3,c
  5357  00110C  0012               	return	
  5358  00110E                     l3309:
  5359  00110E  3421               	rlcf	___flmul@f2+2,w,c
  5360  001110  3422               	rlcf	___flmul@f2+3,w,c
  5361  001112  6E31               	movwf	___flmul@sign,c
  5362  001114  5031               	movf	___flmul@sign,w,c
  5363  001116  E105               	bnz	l3313
  5364  001118  6A1B               	clrf	?___flmul,c
  5365  00111A  6A1C               	clrf	?___flmul+1,c
  5366  00111C  6A1D               	clrf	?___flmul+2,c
  5367  00111E  6A1E               	clrf	?___flmul+3,c
  5368  001120  0012               	return	
  5369  001122                     l3313:
  5370  001122  5031               	movf	___flmul@sign,w,c
  5371  001124  0F7B               	addlw	123
  5372  001126  2630               	addwf	___flmul@exp,f,c
  5373  001128  C01E  F031         	movff	___flmul@f1+3,___flmul@sign
  5374  00112C  5022               	movf	___flmul@f2+3,w,c
  5375  00112E  1A31               	xorwf	___flmul@sign,f,c
  5376  001130  0E80               	movlw	128
  5377  001132  1631               	andwf	___flmul@sign,f,c
  5378  001134  8E1D               	bsf	___flmul@f1+2,7,c
  5379  001136  8E21               	bsf	___flmul@f2+2,7,c
  5380  001138  6A22               	clrf	___flmul@f2+3,c
  5381  00113A  6A1E               	clrf	___flmul@f1+3,c
  5382  00113C  501B               	movf	___flmul@f1,w,c
  5383  00113E  021F               	mulwf	___flmul@f2,c
  5384  001140  CFF4 FFF3          	movff	prodh,prodl
  5385  001144  6AF4               	clrf	prodh,c
  5386  001146  CFF3 F032          	movff	prodl,___flmul@f3_as_product
  5387  00114A  CFF4 F033          	movff	prodh,___flmul@f3_as_product+1
  5388  00114E  6A34               	clrf	___flmul@f3_as_product+2,c
  5389  001150  6A35               	clrf	___flmul@f3_as_product+3,c
  5390  001152  501B               	movf	___flmul@f1,w,c
  5391  001154  0220               	mulwf	___flmul@f2+1,c
  5392  001156  CFF3 F023          	movff	prodl,??___flmul
  5393  00115A  CFF4 F024          	movff	prodh,??___flmul+1
  5394  00115E  6A25               	clrf	(??___flmul+2)& (0+255),c
  5395  001160  501C               	movf	___flmul@f1+1,w,c
  5396  001162  021F               	mulwf	___flmul@f2,c
  5397  001164  50F3               	movf	prodl,w,c
  5398  001166  2423               	addwf	??___flmul,w,c
  5399  001168  6E26               	movwf	(??___flmul+3)& (0+255),c
  5400  00116A  50F4               	movf	prodh,w,c
  5401  00116C  2024               	addwfc	??___flmul+1,w,c
  5402  00116E  6E27               	movwf	(??___flmul+4)& (0+255),c
  5403  001170  0E00               	movlw	0
  5404  001172  2025               	addwfc	??___flmul+2,w,c
  5405  001174  6E28               	movwf	(??___flmul+5)& (0+255),c
  5406  001176  5026               	movf	??___flmul+3,w,c
  5407  001178  6E29               	movwf	(??___flmul+6)& (0+255),c
  5408  00117A  5027               	movf	??___flmul+4,w,c
  5409  00117C  6E2A               	movwf	(??___flmul+7)& (0+255),c
  5410  00117E  5028               	movf	??___flmul+5,w,c
  5411  001180  6E2B               	movwf	(??___flmul+8)& (0+255),c
  5412  001182  6A2C               	clrf	(??___flmul+9)& (0+255),c
  5413  001184  5029               	movf	??___flmul+6,w,c
  5414  001186  2632               	addwf	___flmul@f3_as_product,f,c
  5415  001188  502A               	movf	??___flmul+7,w,c
  5416  00118A  2233               	addwfc	___flmul@f3_as_product+1,f,c
  5417  00118C  502B               	movf	??___flmul+8,w,c
  5418  00118E  2234               	addwfc	___flmul@f3_as_product+2,f,c
  5419  001190  502C               	movf	??___flmul+9,w,c
  5420  001192  2235               	addwfc	___flmul@f3_as_product+3,f,c
  5421  001194  5033               	movf	___flmul@f3_as_product+1,w,c
  5422  001196  6E32               	movwf	___flmul@f3_as_product,c
  5423  001198  5034               	movf	___flmul@f3_as_product+2,w,c
  5424  00119A  6E33               	movwf	___flmul@f3_as_product+1,c
  5425  00119C  5035               	movf	___flmul@f3_as_product+3,w,c
  5426  00119E  6E34               	movwf	___flmul@f3_as_product+2,c
  5427  0011A0  6A35               	clrf	___flmul@f3_as_product+3,c
  5428  0011A2  501B               	movf	___flmul@f1,w,c
  5429  0011A4  0221               	mulwf	___flmul@f2+2,c
  5430  0011A6  CFF3 F023          	movff	prodl,??___flmul
  5431  0011AA  CFF4 F024          	movff	prodh,??___flmul+1
  5432  0011AE  6A25               	clrf	(??___flmul+2)& (0+255),c
  5433  0011B0  501C               	movf	___flmul@f1+1,w,c
  5434  0011B2  0220               	mulwf	___flmul@f2+1,c
  5435  0011B4  50F3               	movf	prodl,w,c
  5436  0011B6  2423               	addwf	??___flmul,w,c
  5437  0011B8  6E26               	movwf	(??___flmul+3)& (0+255),c
  5438  0011BA  50F4               	movf	prodh,w,c
  5439  0011BC  2024               	addwfc	??___flmul+1,w,c
  5440  0011BE  6E27               	movwf	(??___flmul+4)& (0+255),c
  5441  0011C0  0E00               	movlw	0
  5442  0011C2  2025               	addwfc	??___flmul+2,w,c
  5443  0011C4  6E28               	movwf	(??___flmul+5)& (0+255),c
  5444  0011C6  501D               	movf	___flmul@f1+2,w,c
  5445  0011C8  021F               	mulwf	___flmul@f2,c
  5446  0011CA  50F3               	movf	prodl,w,c
  5447  0011CC  2426               	addwf	??___flmul+3,w,c
  5448  0011CE  6E29               	movwf	(??___flmul+6)& (0+255),c
  5449  0011D0  50F4               	movf	prodh,w,c
  5450  0011D2  2027               	addwfc	??___flmul+4,w,c
  5451  0011D4  6E2A               	movwf	(??___flmul+7)& (0+255),c
  5452  0011D6  0E00               	movlw	0
  5453  0011D8  2028               	addwfc	??___flmul+5,w,c
  5454  0011DA  6E2B               	movwf	(??___flmul+8)& (0+255),c
  5455  0011DC  5029               	movf	??___flmul+6,w,c
  5456  0011DE  6E2C               	movwf	(??___flmul+9)& (0+255),c
  5457  0011E0  502A               	movf	??___flmul+7,w,c
  5458  0011E2  6E2D               	movwf	(??___flmul+10)& (0+255),c
  5459  0011E4  502B               	movf	??___flmul+8,w,c
  5460  0011E6  6E2E               	movwf	(??___flmul+11)& (0+255),c
  5461  0011E8  6A2F               	clrf	(??___flmul+12)& (0+255),c
  5462  0011EA  502C               	movf	??___flmul+9,w,c
  5463  0011EC  2632               	addwf	___flmul@f3_as_product,f,c
  5464  0011EE  502D               	movf	??___flmul+10,w,c
  5465  0011F0  2233               	addwfc	___flmul@f3_as_product+1,f,c
  5466  0011F2  502E               	movf	??___flmul+11,w,c
  5467  0011F4  2234               	addwfc	___flmul@f3_as_product+2,f,c
  5468  0011F6  502F               	movf	??___flmul+12,w,c
  5469  0011F8  2235               	addwfc	___flmul@f3_as_product+3,f,c
  5470  0011FA  501D               	movf	___flmul@f1+2,w,c
  5471  0011FC  0220               	mulwf	___flmul@f2+1,c
  5472  0011FE  CFF3 F023          	movff	prodl,??___flmul
  5473  001202  CFF4 F024          	movff	prodh,??___flmul+1
  5474  001206  6A25               	clrf	(??___flmul+2)& (0+255),c
  5475  001208  0E32               	movlw	___flmul@f3_as_product& (0+255)
  5476  00120A  6E26               	movwf	(??___flmul+3)& (0+255),c
  5477  00120C  6A27               	clrf	(??___flmul+4)& (0+255),c
  5478  00120E  2826               	incf	??___flmul+3,w,c
  5479  001210  6ED9               	movwf	fsr2l,c
  5480  001212  0E00               	movlw	0
  5481  001214  2027               	addwfc	??___flmul+4,w,c
  5482  001216  6EDA               	movwf	fsr2h,c
  5483  001218  5023               	movf	??___flmul,w,c
  5484  00121A  26DE               	addwf	postinc2,f,c
  5485  00121C  5024               	movf	??___flmul+1,w,c
  5486  00121E  22DE               	addwfc	postinc2,f,c
  5487  001220  5025               	movf	??___flmul+2,w,c
  5488  001222  22DE               	addwfc	postinc2,f,c
  5489  001224  501C               	movf	___flmul@f1+1,w,c
  5490  001226  0221               	mulwf	___flmul@f2+2,c
  5491  001228  CFF3 F023          	movff	prodl,??___flmul
  5492  00122C  CFF4 F024          	movff	prodh,??___flmul+1
  5493  001230  6A25               	clrf	(??___flmul+2)& (0+255),c
  5494  001232  0E32               	movlw	___flmul@f3_as_product& (0+255)
  5495  001234  6E26               	movwf	(??___flmul+3)& (0+255),c
  5496  001236  6A27               	clrf	(??___flmul+4)& (0+255),c
  5497  001238  2826               	incf	??___flmul+3,w,c
  5498  00123A  6ED9               	movwf	fsr2l,c
  5499  00123C  0E00               	movlw	0
  5500  00123E  2027               	addwfc	??___flmul+4,w,c
  5501  001240  6EDA               	movwf	fsr2h,c
  5502  001242  5023               	movf	??___flmul,w,c
  5503  001244  26DE               	addwf	postinc2,f,c
  5504  001246  5024               	movf	??___flmul+1,w,c
  5505  001248  22DE               	addwfc	postinc2,f,c
  5506  00124A  5025               	movf	??___flmul+2,w,c
  5507  00124C  22DE               	addwfc	postinc2,f,c
  5508  00124E  501D               	movf	___flmul@f1+2,w,c
  5509  001250  0221               	mulwf	___flmul@f2+2,c
  5510  001252  CFF3 F023          	movff	prodl,??___flmul
  5511  001256  CFF4 F024          	movff	prodh,??___flmul+1
  5512  00125A  6A25               	clrf	(??___flmul+2)& (0+255),c
  5513  00125C  0E32               	movlw	___flmul@f3_as_product& (0+255)
  5514  00125E  6E26               	movwf	(??___flmul+3)& (0+255),c
  5515  001260  6A27               	clrf	(??___flmul+4)& (0+255),c
  5516  001262  0E02               	movlw	2
  5517  001264  2426               	addwf	??___flmul+3,w,c
  5518  001266  6ED9               	movwf	fsr2l,c
  5519  001268  0E00               	movlw	0
  5520  00126A  2027               	addwfc	??___flmul+4,w,c
  5521  00126C  6EDA               	movwf	fsr2h,c
  5522  00126E  5023               	movf	??___flmul,w,c
  5523  001270  26DE               	addwf	postinc2,f,c
  5524  001272  5024               	movf	??___flmul+1,w,c
  5525  001274  22DE               	addwfc	postinc2,f,c
  5526  001276  5025               	movf	??___flmul+2,w,c
  5527  001278  22DE               	addwfc	postinc2,f,c
  5528  00127A  AE35               	btfss	___flmul@f3_as_product+3,7,c
  5529  00127C  D006               	goto	l726
  5530  00127E  90D8               	bcf	status,0,c
  5531  001280  3235               	rrcf	___flmul@f3_as_product+3,f,c
  5532  001282  3234               	rrcf	___flmul@f3_as_product+2,f,c
  5533  001284  3233               	rrcf	___flmul@f3_as_product+1,f,c
  5534  001286  3232               	rrcf	___flmul@f3_as_product,f,c
  5535  001288  2A30               	incf	___flmul@exp,f,c
  5536  00128A                     l726:
  5537  00128A  90D8               	bcf	status,0,c
  5538  00128C  3235               	rrcf	___flmul@f3_as_product+3,f,c
  5539  00128E  3234               	rrcf	___flmul@f3_as_product+2,f,c
  5540  001290  3233               	rrcf	___flmul@f3_as_product+1,f,c
  5541  001292  3232               	rrcf	___flmul@f3_as_product,f,c
  5542  001294  C032  F002         	movff	___flmul@f3_as_product,___flpack@arg
  5543  001298  C033  F003         	movff	___flmul@f3_as_product+1,___flpack@arg+1
  5544  00129C  C034  F004         	movff	___flmul@f3_as_product+2,___flpack@arg+2
  5545  0012A0  C035  F005         	movff	___flmul@f3_as_product+3,___flpack@arg+3
  5546  0012A4  C030  F006         	movff	___flmul@exp,___flpack@exp
  5547  0012A8  C031  F007         	movff	___flmul@sign,___flpack@sign
  5548  0012AC  EC7C  F00E         	call	___flpack	;wreg free
  5549  0012B0  C002  F01B         	movff	?___flpack,?___flmul
  5550  0012B4  C003  F01C         	movff	?___flpack+1,?___flmul+1
  5551  0012B8  C004  F01D         	movff	?___flpack+2,?___flmul+2
  5552  0012BC  C005  F01E         	movff	?___flpack+3,?___flmul+3
  5553  0012C0  0012               	return		;funcret
  5554  0012C2                     __end_of___flmul:
  5555                           	opt stack 0
  5556                           tblptru	equ	0xFF8
  5557                           tblptrh	equ	0xFF7
  5558                           tblptrl	equ	0xFF6
  5559                           tablat	equ	0xFF5
  5560                           prodh	equ	0xFF4
  5561                           prodl	equ	0xFF3
  5562                           intcon	equ	0xFF2
  5563                           intcon2	equ	0xFF1
  5564                           postinc0	equ	0xFEE
  5565                           wreg	equ	0xFE8
  5566                           postdec1	equ	0xFE5
  5567                           fsr1l	equ	0xFE1
  5568                           postinc2	equ	0xFDE
  5569                           postdec2	equ	0xFDD
  5570                           fsr2h	equ	0xFDA
  5571                           fsr2l	equ	0xFD9
  5572                           status	equ	0xFD8
  5573                           
  5574 ;; *************** function ___fladd *****************
  5575 ;; Defined at:
  5576 ;;		line 88 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fladd.c"
  5577 ;; Parameters:    Size  Location     Type
  5578 ;;  f1              4   53[COMRAM] unsigned char 
  5579 ;;  f2              4   57[COMRAM] unsigned char 
  5580 ;; Auto vars:     Size  Location     Type
  5581 ;;  exp1            1   64[COMRAM] unsigned char 
  5582 ;;  exp2            1   63[COMRAM] unsigned char 
  5583 ;;  sign            1   62[COMRAM] unsigned char 
  5584 ;; Return value:  Size  Location     Type
  5585 ;;                  4   53[COMRAM] unsigned char 
  5586 ;; Registers used:
  5587 ;;		wreg, status,2, status,0, cstack
  5588 ;; Tracked objects:
  5589 ;;		On entry : 0/0
  5590 ;;		On exit  : 0/0
  5591 ;;		Unchanged: 0/0
  5592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5593 ;;      Params:         8       0       0       0       0       0       0
  5594 ;;      Locals:         3       0       0       0       0       0       0
  5595 ;;      Temps:          1       0       0       0       0       0       0
  5596 ;;      Totals:        12       0       0       0       0       0       0
  5597 ;;Total ram usage:       12 bytes
  5598 ;; Hardware stack levels used:    1
  5599 ;; Hardware stack levels required when called:    2
  5600 ;; This function calls:
  5601 ;;		___flpack
  5602 ;; This function is called by:
  5603 ;;		_floor
  5604 ;;		___flsub
  5605 ;;		_log
  5606 ;;		_eval_poly
  5607 ;; This function uses a non-reentrant model
  5608 ;;
  5609                           
  5610                           	psect	text28
  5611  0015DC                     __ptext28:
  5612                           	opt stack 0
  5613  0015DC                     ___fladd:
  5614                           	opt stack 26
  5615                           
  5616                           ;incstack = 0
  5617  0015DC  3438               	rlcf	___fladd@f1+2,w,c
  5618  0015DE  3439               	rlcf	___fladd@f1+3,w,c
  5619  0015E0  6E41               	movwf	___fladd@exp1,c
  5620  0015E2  343C               	rlcf	___fladd@f2+2,w,c
  5621  0015E4  343D               	rlcf	___fladd@f2+3,w,c
  5622  0015E6  6E40               	movwf	___fladd@exp2,c
  5623  0015E8  5041               	movf	___fladd@exp1,w,c
  5624  0015EA  E009               	bz	l677
  5625  0015EC  5040               	movf	___fladd@exp2,w,c
  5626  0015EE  5C41               	subwf	___fladd@exp1,w,c
  5627  0015F0  E20F               	bc	l3245
  5628  0015F2  5041               	movf	___fladd@exp1,w,c
  5629  0015F4  5C40               	subwf	___fladd@exp2,w,c
  5630  0015F6  6E3E               	movwf	??___fladd& (0+255),c
  5631  0015F8  0E20               	movlw	32
  5632  0015FA  643E               	cpfsgt	??___fladd,c
  5633  0015FC  D009               	goto	l3245
  5634  0015FE                     l677:
  5635  0015FE  C03A  F036         	movff	___fladd@f2,?___fladd
  5636  001602  C03B  F037         	movff	___fladd@f2+1,?___fladd+1
  5637  001606  C03C  F038         	movff	___fladd@f2+2,?___fladd+2
  5638  00160A  C03D  F039         	movff	___fladd@f2+3,?___fladd+3
  5639  00160E  0012               	return	
  5640  001610                     l3245:
  5641  001610  5040               	movf	___fladd@exp2,w,c
  5642  001612  E009               	bz	l681
  5643  001614  5041               	movf	___fladd@exp1,w,c
  5644  001616  5C40               	subwf	___fladd@exp2,w,c
  5645  001618  E20F               	bc	l3251
  5646  00161A  5040               	movf	___fladd@exp2,w,c
  5647  00161C  5C41               	subwf	___fladd@exp1,w,c
  5648  00161E  6E3E               	movwf	??___fladd& (0+255),c
  5649  001620  0E20               	movlw	32
  5650  001622  643E               	cpfsgt	??___fladd,c
  5651  001624  D009               	goto	l3251
  5652  001626                     l681:
  5653  001626  C036  F036         	movff	___fladd@f1,?___fladd
  5654  00162A  C037  F037         	movff	___fladd@f1+1,?___fladd+1
  5655  00162E  C038  F038         	movff	___fladd@f1+2,?___fladd+2
  5656  001632  C039  F039         	movff	___fladd@f1+3,?___fladd+3
  5657  001636  0012               	return	
  5658  001638                     l3251:
  5659  001638  0E06               	movlw	6
  5660  00163A  6E3F               	movwf	___fladd@sign,c
  5661  00163C  BE39               	btfsc	___fladd@f1+3,7,c
  5662  00163E  8E3F               	bsf	___fladd@sign,7,c
  5663  001640  BE3D               	btfsc	___fladd@f2+3,7,c
  5664  001642  8C3F               	bsf	___fladd@sign,6,c
  5665  001644  8E38               	bsf	___fladd@f1+2,7,c
  5666  001646  6A39               	clrf	___fladd@f1+3,c
  5667  001648  8E3C               	bsf	___fladd@f2+2,7,c
  5668  00164A  6A3D               	clrf	___fladd@f2+3,c
  5669  00164C  5040               	movf	___fladd@exp2,w,c
  5670  00164E  5C41               	subwf	___fladd@exp1,w,c
  5671  001650  E21A               	bc	l3275
  5672  001652                     l3265:
  5673  001652  90D8               	bcf	status,0,c
  5674  001654  363A               	rlcf	___fladd@f2,f,c
  5675  001656  363B               	rlcf	___fladd@f2+1,f,c
  5676  001658  363C               	rlcf	___fladd@f2+2,f,c
  5677  00165A  363D               	rlcf	___fladd@f2+3,f,c
  5678  00165C  0640               	decf	___fladd@exp2,f,c
  5679  00165E  5041               	movf	___fladd@exp1,w,c
  5680  001660  1840               	xorwf	___fladd@exp2,w,c
  5681  001662  E00D               	bz	l3273
  5682  001664  063F               	decf	___fladd@sign,f,c
  5683  001666  C03F  F03E         	movff	___fladd@sign,??___fladd
  5684  00166A  0E07               	movlw	7
  5685  00166C  163E               	andwf	??___fladd,f,c
  5686  00166E  E007               	bz	l3273
  5687  001670  D7F0               	goto	l3265
  5688  001672                     l3271:
  5689  001672  90D8               	bcf	status,0,c
  5690  001674  3239               	rrcf	___fladd@f1+3,f,c
  5691  001676  3238               	rrcf	___fladd@f1+2,f,c
  5692  001678  3237               	rrcf	___fladd@f1+1,f,c
  5693  00167A  3236               	rrcf	___fladd@f1,f,c
  5694  00167C  2A41               	incf	___fladd@exp1,f,c
  5695  00167E                     l3273:
  5696  00167E  5040               	movf	___fladd@exp2,w,c
  5697  001680  1841               	xorwf	___fladd@exp1,w,c
  5698  001682  E01D               	bz	l692
  5699  001684  D7F6               	goto	l3271
  5700  001686                     l3275:
  5701  001686  5041               	movf	___fladd@exp1,w,c
  5702  001688  5C40               	subwf	___fladd@exp2,w,c
  5703  00168A  E219               	bc	l692
  5704  00168C                     l3277:
  5705  00168C  90D8               	bcf	status,0,c
  5706  00168E  3636               	rlcf	___fladd@f1,f,c
  5707  001690  3637               	rlcf	___fladd@f1+1,f,c
  5708  001692  3638               	rlcf	___fladd@f1+2,f,c
  5709  001694  3639               	rlcf	___fladd@f1+3,f,c
  5710  001696  0641               	decf	___fladd@exp1,f,c
  5711  001698  5041               	movf	___fladd@exp1,w,c
  5712  00169A  1840               	xorwf	___fladd@exp2,w,c
  5713  00169C  E00D               	bz	l3285
  5714  00169E  063F               	decf	___fladd@sign,f,c
  5715  0016A0  C03F  F03E         	movff	___fladd@sign,??___fladd
  5716  0016A4  0E07               	movlw	7
  5717  0016A6  163E               	andwf	??___fladd,f,c
  5718  0016A8  E007               	bz	l3285
  5719  0016AA  D7F0               	goto	l3277
  5720  0016AC                     l3283:
  5721  0016AC  90D8               	bcf	status,0,c
  5722  0016AE  323D               	rrcf	___fladd@f2+3,f,c
  5723  0016B0  323C               	rrcf	___fladd@f2+2,f,c
  5724  0016B2  323B               	rrcf	___fladd@f2+1,f,c
  5725  0016B4  323A               	rrcf	___fladd@f2,f,c
  5726  0016B6  2A40               	incf	___fladd@exp2,f,c
  5727  0016B8                     l3285:
  5728  0016B8  5040               	movf	___fladd@exp2,w,c
  5729  0016BA  1841               	xorwf	___fladd@exp1,w,c
  5730  0016BC  E1F7               	bnz	l3283
  5731  0016BE                     l692:
  5732  0016BE  AE3F               	btfss	___fladd@sign,7,c
  5733  0016C0  D009               	goto	l3289
  5734  0016C2  1E36               	comf	___fladd@f1,f,c
  5735  0016C4  1E37               	comf	___fladd@f1+1,f,c
  5736  0016C6  1E38               	comf	___fladd@f1+2,f,c
  5737  0016C8  1E39               	comf	___fladd@f1+3,f,c
  5738  0016CA  2A36               	incf	___fladd@f1,f,c
  5739  0016CC  0E00               	movlw	0
  5740  0016CE  2237               	addwfc	___fladd@f1+1,f,c
  5741  0016D0  2238               	addwfc	___fladd@f1+2,f,c
  5742  0016D2  2239               	addwfc	___fladd@f1+3,f,c
  5743  0016D4                     l3289:
  5744  0016D4  AC3F               	btfss	___fladd@sign,6,c
  5745  0016D6  D009               	goto	l3293
  5746  0016D8  1E3A               	comf	___fladd@f2,f,c
  5747  0016DA  1E3B               	comf	___fladd@f2+1,f,c
  5748  0016DC  1E3C               	comf	___fladd@f2+2,f,c
  5749  0016DE  1E3D               	comf	___fladd@f2+3,f,c
  5750  0016E0  2A3A               	incf	___fladd@f2,f,c
  5751  0016E2  0E00               	movlw	0
  5752  0016E4  223B               	addwfc	___fladd@f2+1,f,c
  5753  0016E6  223C               	addwfc	___fladd@f2+2,f,c
  5754  0016E8  223D               	addwfc	___fladd@f2+3,f,c
  5755  0016EA                     l3293:
  5756  0016EA  6A3F               	clrf	___fladd@sign,c
  5757  0016EC  5036               	movf	___fladd@f1,w,c
  5758  0016EE  263A               	addwf	___fladd@f2,f,c
  5759  0016F0  5037               	movf	___fladd@f1+1,w,c
  5760  0016F2  223B               	addwfc	___fladd@f2+1,f,c
  5761  0016F4  5038               	movf	___fladd@f1+2,w,c
  5762  0016F6  223C               	addwfc	___fladd@f2+2,f,c
  5763  0016F8  5039               	movf	___fladd@f1+3,w,c
  5764  0016FA  223D               	addwfc	___fladd@f2+3,f,c
  5765  0016FC  AE3D               	btfss	___fladd@f2+3,7,c
  5766  0016FE  D00B               	goto	l3301
  5767  001700  1E3A               	comf	___fladd@f2,f,c
  5768  001702  1E3B               	comf	___fladd@f2+1,f,c
  5769  001704  1E3C               	comf	___fladd@f2+2,f,c
  5770  001706  1E3D               	comf	___fladd@f2+3,f,c
  5771  001708  2A3A               	incf	___fladd@f2,f,c
  5772  00170A  0E00               	movlw	0
  5773  00170C  223B               	addwfc	___fladd@f2+1,f,c
  5774  00170E  223C               	addwfc	___fladd@f2+2,f,c
  5775  001710  223D               	addwfc	___fladd@f2+3,f,c
  5776  001712  0E01               	movlw	1
  5777  001714  6E3F               	movwf	___fladd@sign,c
  5778  001716                     l3301:
  5779  001716  C03A  F002         	movff	___fladd@f2,___flpack@arg
  5780  00171A  C03B  F003         	movff	___fladd@f2+1,___flpack@arg+1
  5781  00171E  C03C  F004         	movff	___fladd@f2+2,___flpack@arg+2
  5782  001722  C03D  F005         	movff	___fladd@f2+3,___flpack@arg+3
  5783  001726  C041  F006         	movff	___fladd@exp1,___flpack@exp
  5784  00172A  C03F  F007         	movff	___fladd@sign,___flpack@sign
  5785  00172E  EC7C  F00E         	call	___flpack	;wreg free
  5786  001732  C002  F036         	movff	?___flpack,?___fladd
  5787  001736  C003  F037         	movff	?___flpack+1,?___fladd+1
  5788  00173A  C004  F038         	movff	?___flpack+2,?___fladd+2
  5789  00173E  C005  F039         	movff	?___flpack+3,?___fladd+3
  5790  001742  0012               	return		;funcret
  5791  001744                     __end_of___fladd:
  5792                           	opt stack 0
  5793                           tblptru	equ	0xFF8
  5794                           tblptrh	equ	0xFF7
  5795                           tblptrl	equ	0xFF6
  5796                           tablat	equ	0xFF5
  5797                           prodh	equ	0xFF4
  5798                           prodl	equ	0xFF3
  5799                           intcon	equ	0xFF2
  5800                           intcon2	equ	0xFF1
  5801                           postinc0	equ	0xFEE
  5802                           wreg	equ	0xFE8
  5803                           postdec1	equ	0xFE5
  5804                           fsr1l	equ	0xFE1
  5805                           postinc2	equ	0xFDE
  5806                           postdec2	equ	0xFDD
  5807                           fsr2h	equ	0xFDA
  5808                           fsr2l	equ	0xFD9
  5809                           status	equ	0xFD8
  5810                           
  5811 ;; *************** function ___awtofl *****************
  5812 ;; Defined at:
  5813 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtofl.c"
  5814 ;; Parameters:    Size  Location     Type
  5815 ;;  c               2   11[COMRAM] int 
  5816 ;; Auto vars:     Size  Location     Type
  5817 ;;  f1              4    0        int 
  5818 ;;  sign            1   15[COMRAM] unsigned char 
  5819 ;; Return value:  Size  Location     Type
  5820 ;;                  4   11[COMRAM] unsigned char 
  5821 ;; Registers used:
  5822 ;;		wreg, status,2, status,0, cstack
  5823 ;; Tracked objects:
  5824 ;;		On entry : 0/0
  5825 ;;		On exit  : 0/0
  5826 ;;		Unchanged: 0/0
  5827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5828 ;;      Params:         4       0       0       0       0       0       0
  5829 ;;      Locals:         1       0       0       0       0       0       0
  5830 ;;      Temps:          0       0       0       0       0       0       0
  5831 ;;      Totals:         5       0       0       0       0       0       0
  5832 ;;Total ram usage:        5 bytes
  5833 ;; Hardware stack levels used:    1
  5834 ;; Hardware stack levels required when called:    2
  5835 ;; This function calls:
  5836 ;;		___flpack
  5837 ;; This function is called by:
  5838 ;;		_format_double
  5839 ;;		_log
  5840 ;;		_exp
  5841 ;; This function uses a non-reentrant model
  5842 ;;
  5843                           
  5844                           	psect	text29
  5845  0024FE                     __ptext29:
  5846                           	opt stack 0
  5847  0024FE                     ___awtofl:
  5848                           	opt stack 25
  5849                           
  5850                           ;incstack = 0
  5851  0024FE  6A10               	clrf	___awtofl@sign,c
  5852  002500  AE0D               	btfss	___awtofl@c+1,7,c
  5853  002502  D005               	goto	l3415
  5854  002504  6C0C               	negf	___awtofl@c,c
  5855  002506  1E0D               	comf	___awtofl@c+1,f,c
  5856  002508  B0D8               	btfsc	status,0,c
  5857  00250A  2A0D               	incf	___awtofl@c+1,f,c
  5858  00250C  2A10               	incf	___awtofl@sign,f,c
  5859  00250E                     l3415:
  5860  00250E  C00C  F002         	movff	___awtofl@c,___flpack@arg
  5861  002512  C00D  F003         	movff	___awtofl@c+1,___flpack@arg+1
  5862  002516  6A04               	clrf	___flpack@arg+2,c
  5863  002518  6A05               	clrf	___flpack@arg+3,c
  5864  00251A  0E96               	movlw	150
  5865  00251C  6E06               	movwf	___flpack@exp,c
  5866  00251E  C010  F007         	movff	___awtofl@sign,___flpack@sign
  5867  002522  EC7C  F00E         	call	___flpack	;wreg free
  5868  002526  C002  F00C         	movff	?___flpack,?___awtofl
  5869  00252A  C003  F00D         	movff	?___flpack+1,?___awtofl+1
  5870  00252E  C004  F00E         	movff	?___flpack+2,?___awtofl+2
  5871  002532  C005  F00F         	movff	?___flpack+3,?___awtofl+3
  5872  002536  0012               	return		;funcret
  5873  002538                     __end_of___awtofl:
  5874                           	opt stack 0
  5875                           tblptru	equ	0xFF8
  5876                           tblptrh	equ	0xFF7
  5877                           tblptrl	equ	0xFF6
  5878                           tablat	equ	0xFF5
  5879                           prodh	equ	0xFF4
  5880                           prodl	equ	0xFF3
  5881                           intcon	equ	0xFF2
  5882                           intcon2	equ	0xFF1
  5883                           postinc0	equ	0xFEE
  5884                           wreg	equ	0xFE8
  5885                           postdec1	equ	0xFE5
  5886                           fsr1l	equ	0xFE1
  5887                           postinc2	equ	0xFDE
  5888                           postdec2	equ	0xFDD
  5889                           fsr2h	equ	0xFDA
  5890                           fsr2l	equ	0xFD9
  5891                           status	equ	0xFD8
  5892                           
  5893 ;; *************** function _calibrate *****************
  5894 ;; Defined at:
  5895 ;;		line 25 in file "../../../src/measure.c"
  5896 ;; Parameters:    Size  Location     Type
  5897 ;;		None
  5898 ;; Auto vars:     Size  Location     Type
  5899 ;;  i               1   60[COMRAM] unsigned char 
  5900 ;; Return value:  Size  Location     Type
  5901 ;;		None               void
  5902 ;; Registers used:
  5903 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5904 ;; Tracked objects:
  5905 ;;		On entry : 0/0
  5906 ;;		On exit  : 0/0
  5907 ;;		Unchanged: 0/0
  5908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5909 ;;      Params:         0       0       0       0       0       0       0
  5910 ;;      Locals:         1       0       0       0       0       0       0
  5911 ;;      Temps:          0       0       0       0       0       0       0
  5912 ;;      Totals:         1       0       0       0       0       0       0
  5913 ;;Total ram usage:        1 bytes
  5914 ;; Hardware stack levels used:    1
  5915 ;; Hardware stack levels required when called:    6
  5916 ;; This function calls:
  5917 ;;		___lwtofl
  5918 ;;		_delay10ms
  5919 ;;		_lcd_clear
  5920 ;;		_lcd_gotoxy
  5921 ;;		_lcd_send
  5922 ;;		_measure_freq
  5923 ;;		_put_str
  5924 ;; This function is called by:
  5925 ;;		_main
  5926 ;; This function uses a non-reentrant model
  5927 ;;
  5928                           
  5929                           	psect	text30
  5930  001C20                     __ptext30:
  5931                           	opt stack 0
  5932  001C20                     _calibrate:
  5933                           	opt stack 24
  5934                           
  5935                           ;measure.c: 26: uint8_t i;
  5936                           ;measure.c: 29: lcd_clear();
  5937                           
  5938                           ;incstack = 0
  5939  001C20  ECA2  F013         	call	_lcd_clear	;wreg free
  5940                           
  5941                           ;measure.c: 31: lcd_gotoxy(0, 0);
  5942  001C24  0E00               	movlw	0
  5943  001C26  6A06               	clrf	lcd_gotoxy@row,c
  5944  001C28  EC9C  F012         	call	_lcd_gotoxy
  5945                           
  5946                           ;measure.c: 32: put_str("Calibrating");
  5947  001C2C  0E69               	movlw	STR_17& (0+255)
  5948  001C2E  ECD1  F012         	call	_put_str
  5949                           
  5950                           ;measure.c: 34: lcd_gotoxy(0, 1);
  5951  001C32  0E01               	movlw	1
  5952  001C34  6E06               	movwf	lcd_gotoxy@row,c
  5953  001C36  0E00               	movlw	0
  5954  001C38  EC9C  F012         	call	_lcd_gotoxy
  5955                           
  5956                           ;measure.c: 38: put_str("please wait...");
  5957  001C3C  0E4D               	movlw	STR_18& (0+255)
  5958  001C3E  ECD1  F012         	call	_put_str
  5959                           
  5960                           ;measure.c: 41: LATC &= ~(1 << 5);
  5961  001C42  9A8B               	bcf	3979,5,c	;volatile
  5962                           
  5963                           ;measure.c: 43: F1 = (double)measure_freq();
  5964  001C44  EC2F  F00D         	call	_measure_freq	;wreg free
  5965  001C48  C034  F039         	movff	?_measure_freq,___lwtofl@c
  5966  001C4C  C035  F03A         	movff	?_measure_freq+1,___lwtofl@c+1
  5967  001C50  EC2E  F013         	call	___lwtofl	;wreg free
  5968  001C54  C039  F0D6         	movff	?___lwtofl,_F1
  5969  001C58  C03A  F0D7         	movff	?___lwtofl+1,_F1+1
  5970  001C5C  C03B  F0D8         	movff	?___lwtofl+2,_F1+2
  5971  001C60  C03C  F0D9         	movff	?___lwtofl+3,_F1+3
  5972                           
  5973                           ;measure.c: 44: delay10ms(50);
  5974  001C64  0E32               	movlw	50
  5975  001C66  ECC6  F013         	call	_delay10ms
  5976                           
  5977                           ;measure.c: 46: F1 = (double)measure_freq();
  5978  001C6A  EC2F  F00D         	call	_measure_freq	;wreg free
  5979  001C6E  C034  F039         	movff	?_measure_freq,___lwtofl@c
  5980  001C72  C035  F03A         	movff	?_measure_freq+1,___lwtofl@c+1
  5981  001C76  EC2E  F013         	call	___lwtofl	;wreg free
  5982  001C7A  C039  F0D6         	movff	?___lwtofl,_F1
  5983  001C7E  C03A  F0D7         	movff	?___lwtofl+1,_F1+1
  5984  001C82  C03B  F0D8         	movff	?___lwtofl+2,_F1+2
  5985  001C86  C03C  F0D9         	movff	?___lwtofl+3,_F1+3
  5986                           
  5987                           ;measure.c: 47: LATC |= (1 << 5);
  5988  001C8A  8A8B               	bsf	3979,5,c	;volatile
  5989                           
  5990                           ;measure.c: 49: F2 = (double)measure_freq();
  5991  001C8C  EC2F  F00D         	call	_measure_freq	;wreg free
  5992  001C90  C034  F039         	movff	?_measure_freq,___lwtofl@c
  5993  001C94  C035  F03A         	movff	?_measure_freq+1,___lwtofl@c+1
  5994  001C98  EC2E  F013         	call	___lwtofl	;wreg free
  5995  001C9C  C039  F0AC         	movff	?___lwtofl,_F2
  5996  001CA0  C03A  F0AD         	movff	?___lwtofl+1,_F2+1
  5997  001CA4  C03B  F0AE         	movff	?___lwtofl+2,_F2+2
  5998  001CA8  C03C  F0AF         	movff	?___lwtofl+3,_F2+3
  5999                           
  6000                           ;measure.c: 50: delay10ms(50);
  6001  001CAC  0E32               	movlw	50
  6002  001CAE  ECC6  F013         	call	_delay10ms
  6003                           
  6004                           ;measure.c: 52: F2 = (double)measure_freq();
  6005  001CB2  EC2F  F00D         	call	_measure_freq	;wreg free
  6006  001CB6  C034  F039         	movff	?_measure_freq,___lwtofl@c
  6007  001CBA  C035  F03A         	movff	?_measure_freq+1,___lwtofl@c+1
  6008  001CBE  EC2E  F013         	call	___lwtofl	;wreg free
  6009  001CC2  C039  F0AC         	movff	?___lwtofl,_F2
  6010  001CC6  C03A  F0AD         	movff	?___lwtofl+1,_F2+1
  6011  001CCA  C03B  F0AE         	movff	?___lwtofl+2,_F2+2
  6012  001CCE  C03C  F0AF         	movff	?___lwtofl+3,_F2+3
  6013                           
  6014                           ;measure.c: 53: LATC &= ~(1 << 5);
  6015  001CD2  9A8B               	bcf	3979,5,c	;volatile
  6016                           
  6017                           ;measure.c: 56: lcd_gotoxy(11, 0);
  6018  001CD4  6A06               	clrf	lcd_gotoxy@row,c
  6019  001CD6  0E0B               	movlw	11
  6020  001CD8  EC9C  F012         	call	_lcd_gotoxy
  6021                           
  6022                           ;measure.c: 57: for(i = 0; i < 6; i++) {
  6023  001CDC  6A3D               	clrf	calibrate@i,c
  6024  001CDE                     l3589:
  6025                           
  6026                           ;measure.c: 58: lcd_send(('='), 1);
  6027  001CDE  0E01               	movlw	1
  6028  001CE0  6E03               	movwf	lcd_send@mode,c
  6029  001CE2  0E3D               	movlw	61
  6030  001CE4  EC94  F013         	call	_lcd_send
  6031                           
  6032                           ;measure.c: 60: delay10ms(28);
  6033  001CE8  0E1C               	movlw	28
  6034  001CEA  ECC6  F013         	call	_delay10ms
  6035  001CEE  2A3D               	incf	calibrate@i,f,c
  6036  001CF0  0E05               	movlw	5
  6037  001CF2  643D               	cpfsgt	calibrate@i,c
  6038  001CF4  D7F4               	goto	l3589
  6039  001CF6  0C05               	retlw	5
  6040  001CF8                     __end_of_calibrate:
  6041                           	opt stack 0
  6042                           tblptru	equ	0xFF8
  6043                           tblptrh	equ	0xFF7
  6044                           tblptrl	equ	0xFF6
  6045                           tablat	equ	0xFF5
  6046                           prodh	equ	0xFF4
  6047                           prodl	equ	0xFF3
  6048                           intcon	equ	0xFF2
  6049                           intcon2	equ	0xFF1
  6050                           postinc0	equ	0xFEE
  6051                           wreg	equ	0xFE8
  6052                           postdec1	equ	0xFE5
  6053                           fsr1l	equ	0xFE1
  6054                           postinc2	equ	0xFDE
  6055                           postdec2	equ	0xFDD
  6056                           fsr2h	equ	0xFDA
  6057                           fsr2l	equ	0xFD9
  6058                           status	equ	0xFD8
  6059                           
  6060 ;; *************** function _put_str *****************
  6061 ;; Defined at:
  6062 ;;		line 223 in file "../../../src/print.c"
  6063 ;; Parameters:    Size  Location     Type
  6064 ;;  s               1    wreg     PTR const unsigned char 
  6065 ;;		 -> STR_21(13), STR_20(10), STR_18(15), STR_17(12), 
  6066 ;; Auto vars:     Size  Location     Type
  6067 ;;  s               1    8[COMRAM] PTR const unsigned char 
  6068 ;;		 -> STR_21(13), STR_20(10), STR_18(15), STR_17(12), 
  6069 ;;  i               2    6[COMRAM] int 
  6070 ;; Return value:  Size  Location     Type
  6071 ;;		None               void
  6072 ;; Registers used:
  6073 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6074 ;; Tracked objects:
  6075 ;;		On entry : 0/0
  6076 ;;		On exit  : 0/0
  6077 ;;		Unchanged: 0/0
  6078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6079 ;;      Params:         0       0       0       0       0       0       0
  6080 ;;      Locals:         3       0       0       0       0       0       0
  6081 ;;      Temps:          1       0       0       0       0       0       0
  6082 ;;      Totals:         4       0       0       0       0       0       0
  6083 ;;Total ram usage:        4 bytes
  6084 ;; Hardware stack levels used:    1
  6085 ;; Hardware stack levels required when called:    4
  6086 ;; This function calls:
  6087 ;;		_output_putch
  6088 ;; This function is called by:
  6089 ;;		_calibrate
  6090 ;;		_measure_capacitance
  6091 ;;		_measure_inductance
  6092 ;; This function uses a non-reentrant model
  6093 ;;
  6094                           
  6095                           	psect	text31
  6096  0025A2                     __ptext31:
  6097                           	opt stack 0
  6098  0025A2                     _put_str:
  6099                           	opt stack 25
  6100                           
  6101                           ;incstack = 0
  6102                           ;put_str@s stored from wreg
  6103  0025A2  6E09               	movwf	put_str@s,c
  6104                           
  6105                           ;print.c: 224: int i;
  6106                           ;print.c: 226: for(i = 0; s[i]; i++) {
  6107  0025A4  6A07               	clrf	put_str@i,c
  6108  0025A6  6A08               	clrf	put_str@i+1,c
  6109  0025A8  D00B               	goto	l2735
  6110  0025AA                     l2731:
  6111                           
  6112                           ;print.c: 227: output_putch(s[i]);
  6113  0025AA  5009               	movf	put_str@s,w,c
  6114  0025AC  2407               	addwf	put_str@i,w,c
  6115  0025AE  6E06               	movwf	??_put_str& (0+255),c
  6116  0025B0  C006  FFF6         	movff	??_put_str,tblptrl
  6117  0025B4                     	if	0	;There is only one active tblptr byte
  6118  0025B4                     	endif
  6119  0025B4                     	if	0	;tblptru may be non-zero
  6120  0025B4                     	endif
  6121  0025B4                     	if	0	;tblptru may be non-zero
  6122  0025B4                     	endif
  6123  0025B4  0008               	tblrd		*
  6124  0025B6  50F5               	movf	tablat,w,c
  6125  0025B8  ECAE  F013         	call	_output_putch
  6126  0025BC  4A07               	infsnz	put_str@i,f,c
  6127  0025BE  2A08               	incf	put_str@i+1,f,c
  6128  0025C0                     l2735:
  6129  0025C0  5009               	movf	put_str@s,w,c
  6130  0025C2  2407               	addwf	put_str@i,w,c
  6131  0025C4  6E06               	movwf	??_put_str& (0+255),c
  6132  0025C6  C006  FFF6         	movff	??_put_str,tblptrl
  6133  0025CA                     	if	0	;There is only one active tblptr byte
  6134  0025CA                     	endif
  6135  0025CA                     	if	0	;tblptru may be non-zero
  6136  0025CA                     	endif
  6137  0025CA                     	if	0	;tblptru may be non-zero
  6138  0025CA                     	endif
  6139  0025CA  0008               	tblrd		*
  6140  0025CC  50F5               	movf	tablat,w,c
  6141  0025CE  B4D8               	btfsc	status,2,c
  6142  0025D0  0012               	return		;funcret
  6143  0025D2  D7EB               	goto	l2731
  6144  0025D4                     __end_of_put_str:
  6145                           	opt stack 0
  6146                           tblptru	equ	0xFF8
  6147                           tblptrh	equ	0xFF7
  6148                           tblptrl	equ	0xFF6
  6149                           tablat	equ	0xFF5
  6150                           prodh	equ	0xFF4
  6151                           prodl	equ	0xFF3
  6152                           intcon	equ	0xFF2
  6153                           intcon2	equ	0xFF1
  6154                           postinc0	equ	0xFEE
  6155                           wreg	equ	0xFE8
  6156                           postdec1	equ	0xFE5
  6157                           fsr1l	equ	0xFE1
  6158                           postinc2	equ	0xFDE
  6159                           postdec2	equ	0xFDD
  6160                           fsr2h	equ	0xFDA
  6161                           fsr2l	equ	0xFD9
  6162                           status	equ	0xFD8
  6163                           
  6164 ;; *************** function _output_putch *****************
  6165 ;; Defined at:
  6166 ;;		line 210 in file "../../../src/print.c"
  6167 ;; Parameters:    Size  Location     Type
  6168 ;;  c               1    wreg     unsigned char 
  6169 ;; Auto vars:     Size  Location     Type
  6170 ;;  c               1    4[COMRAM] unsigned char 
  6171 ;; Return value:  Size  Location     Type
  6172 ;;		None               void
  6173 ;; Registers used:
  6174 ;;		wreg, status,2, status,0, cstack
  6175 ;; Tracked objects:
  6176 ;;		On entry : 0/0
  6177 ;;		On exit  : 0/0
  6178 ;;		Unchanged: 0/0
  6179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6180 ;;      Params:         0       0       0       0       0       0       0
  6181 ;;      Locals:         1       0       0       0       0       0       0
  6182 ;;      Temps:          0       0       0       0       0       0       0
  6183 ;;      Totals:         1       0       0       0       0       0       0
  6184 ;;Total ram usage:        1 bytes
  6185 ;; Hardware stack levels used:    1
  6186 ;; Hardware stack levels required when called:    3
  6187 ;; This function calls:
  6188 ;;		_lcd_send
  6189 ;; This function is called by:
  6190 ;;		_put_str
  6191 ;; This function uses a non-reentrant model
  6192 ;;
  6193                           
  6194                           	psect	text32
  6195  00275C                     __ptext32:
  6196                           	opt stack 0
  6197  00275C                     _output_putch:
  6198                           	opt stack 25
  6199                           
  6200                           ;incstack = 0
  6201                           ;output_putch@c stored from wreg
  6202  00275C  6E05               	movwf	output_putch@c,c
  6203                           
  6204                           ;print.c: 212: lcd_send((c), 1);
  6205  00275E  0E01               	movlw	1
  6206  002760  6E03               	movwf	lcd_send@mode,c
  6207  002762  5005               	movf	output_putch@c,w,c
  6208  002764  EC94  F013         	call	_lcd_send
  6209  002768  0012               	return		;funcret
  6210  00276A                     __end_of_output_putch:
  6211                           	opt stack 0
  6212                           tblptru	equ	0xFF8
  6213                           tblptrh	equ	0xFF7
  6214                           tblptrl	equ	0xFF6
  6215                           tablat	equ	0xFF5
  6216                           prodh	equ	0xFF4
  6217                           prodl	equ	0xFF3
  6218                           intcon	equ	0xFF2
  6219                           intcon2	equ	0xFF1
  6220                           postinc0	equ	0xFEE
  6221                           wreg	equ	0xFE8
  6222                           postdec1	equ	0xFE5
  6223                           fsr1l	equ	0xFE1
  6224                           postinc2	equ	0xFDE
  6225                           postdec2	equ	0xFDD
  6226                           fsr2h	equ	0xFDA
  6227                           fsr2l	equ	0xFD9
  6228                           status	equ	0xFD8
  6229                           
  6230 ;; *************** function _measure_freq *****************
  6231 ;; Defined at:
  6232 ;;		line 72 in file "../../../src/measure.c"
  6233 ;; Parameters:    Size  Location     Type
  6234 ;;		None
  6235 ;; Auto vars:     Size  Location     Type
  6236 ;;  count           2   54[COMRAM] unsigned int 
  6237 ;; Return value:  Size  Location     Type
  6238 ;;                  2   51[COMRAM] unsigned short 
  6239 ;; Registers used:
  6240 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6241 ;; Tracked objects:
  6242 ;;		On entry : 0/0
  6243 ;;		On exit  : 0/0
  6244 ;;		Unchanged: 0/0
  6245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6246 ;;      Params:         2       0       0       0       0       0       0
  6247 ;;      Locals:         2       0       0       0       0       0       0
  6248 ;;      Temps:          1       0       0       0       0       0       0
  6249 ;;      Totals:         5       0       0       0       0       0       0
  6250 ;;Total ram usage:        5 bytes
  6251 ;; Hardware stack levels used:    1
  6252 ;; Hardware stack levels required when called:    5
  6253 ;; This function calls:
  6254 ;;		_buffer_init
  6255 ;;		_buffer_puts
  6256 ;;		_format_number
  6257 ;;		_lcd_gotoxy
  6258 ;;		_print_buffer
  6259 ;;		_timer0_read_ps
  6260 ;; This function is called by:
  6261 ;;		_calibrate
  6262 ;;		_measure_capacitance
  6263 ;;		_measure_inductance
  6264 ;; This function uses a non-reentrant model
  6265 ;;
  6266                           
  6267                           	psect	text33
  6268  001A5E                     __ptext33:
  6269                           	opt stack 0
  6270  001A5E                     _measure_freq:
  6271                           	opt stack 24
  6272                           
  6273                           ;measure.c: 73: uint16_t count;
  6274                           ;measure.c: 75: INTCON &= ~0b100;
  6275                           
  6276                           ;incstack = 0
  6277  001A5E  94F2               	bcf	intcon,2,c	;volatile
  6278                           
  6279                           ;measure.c: 79: TRISA &= ~0b00010000;
  6280  001A60  9892               	bcf	3986,4,c	;volatile
  6281                           
  6282                           ;measure.c: 81: _delay((unsigned long)((20)*(16000000/4000.0)));
  6283  001A62  0E68               	movlw	104
  6284  001A64  6E36               	movwf	??_measure_freq& (0+255),c
  6285  001A66  0EE4               	movlw	228
  6286  001A68                     u3337:
  6287  001A68  2EE8               	decfsz	wreg,f,c
  6288  001A6A  D7FE               	goto	u3337
  6289  001A6C  2E36               	decfsz	??_measure_freq& (0+255),f,c
  6290  001A6E  D7FC               	goto	u3337
  6291  001A70  D000               	nop2	
  6292                           
  6293                           ;measure.c: 84: TMR0 = 0x00;
  6294  001A72  6AD6               	clrf	4054,c	;volatile
  6295  001A74  6AD7               	clrf	4055,c	;volatile
  6296                           
  6297                           ;measure.c: 89: _delay((unsigned long)((10)*(16000000/4000.0)));
  6298  001A76  0E34               	movlw	52
  6299  001A78  6E36               	movwf	??_measure_freq& (0+255),c
  6300  001A7A  0EF2               	movlw	242
  6301  001A7C                     u3347:
  6302  001A7C  2EE8               	decfsz	wreg,f,c
  6303  001A7E  D7FE               	goto	u3347
  6304  001A80  2E36               	decfsz	??_measure_freq& (0+255),f,c
  6305  001A82  D7FC               	goto	u3347
  6306                           
  6307                           ;measure.c: 90: _delay((unsigned long)((10)*(16000000/4000.0)));
  6308  001A84  0E34               	movlw	52
  6309  001A86  6E36               	movwf	??_measure_freq& (0+255),c
  6310  001A88  0EF2               	movlw	242
  6311  001A8A                     u3357:
  6312  001A8A  2EE8               	decfsz	wreg,f,c
  6313  001A8C  D7FE               	goto	u3357
  6314  001A8E  2E36               	decfsz	??_measure_freq& (0+255),f,c
  6315  001A90  D7FC               	goto	u3357
  6316                           
  6317                           ;measure.c: 91: _delay((unsigned long)((10)*(16000000/4000.0)));
  6318  001A92  0E34               	movlw	52
  6319  001A94  6E36               	movwf	??_measure_freq& (0+255),c
  6320  001A96  0EF2               	movlw	242
  6321  001A98                     u3367:
  6322  001A98  2EE8               	decfsz	wreg,f,c
  6323  001A9A  D7FE               	goto	u3367
  6324  001A9C  2E36               	decfsz	??_measure_freq& (0+255),f,c
  6325  001A9E  D7FC               	goto	u3367
  6326                           
  6327                           ;measure.c: 92: _delay((unsigned long)((10)*(16000000/4000.0)));
  6328  001AA0  0E34               	movlw	52
  6329  001AA2  6E36               	movwf	??_measure_freq& (0+255),c
  6330  001AA4  0EF2               	movlw	242
  6331  001AA6                     u3377:
  6332  001AA6  2EE8               	decfsz	wreg,f,c
  6333  001AA8  D7FE               	goto	u3377
  6334  001AAA  2E36               	decfsz	??_measure_freq& (0+255),f,c
  6335  001AAC  D7FC               	goto	u3377
  6336                           
  6337                           ;measure.c: 93: _delay((unsigned long)((10)*(16000000/4000.0)));
  6338  001AAE  0E34               	movlw	52
  6339  001AB0  6E36               	movwf	??_measure_freq& (0+255),c
  6340  001AB2  0EF2               	movlw	242
  6341  001AB4                     u3387:
  6342  001AB4  2EE8               	decfsz	wreg,f,c
  6343  001AB6  D7FE               	goto	u3387
  6344  001AB8  2E36               	decfsz	??_measure_freq& (0+255),f,c
  6345  001ABA  D7FC               	goto	u3387
  6346                           
  6347                           ;measure.c: 94: _delay((unsigned long)((10)*(16000000/4000.0)));
  6348  001ABC  0E34               	movlw	52
  6349  001ABE  6E36               	movwf	??_measure_freq& (0+255),c
  6350  001AC0  0EF2               	movlw	242
  6351  001AC2                     u3397:
  6352  001AC2  2EE8               	decfsz	wreg,f,c
  6353  001AC4  D7FE               	goto	u3397
  6354  001AC6  2E36               	decfsz	??_measure_freq& (0+255),f,c
  6355  001AC8  D7FC               	goto	u3397
  6356                           
  6357                           ;measure.c: 95: _delay((unsigned long)((10)*(16000000/4000.0)));
  6358  001ACA  0E34               	movlw	52
  6359  001ACC  6E36               	movwf	??_measure_freq& (0+255),c
  6360  001ACE  0EF2               	movlw	242
  6361  001AD0                     u3407:
  6362  001AD0  2EE8               	decfsz	wreg,f,c
  6363  001AD2  D7FE               	goto	u3407
  6364  001AD4  2E36               	decfsz	??_measure_freq& (0+255),f,c
  6365  001AD6  D7FC               	goto	u3407
  6366                           
  6367                           ;measure.c: 96: _delay((unsigned long)((10)*(16000000/4000.0)));
  6368  001AD8  0E34               	movlw	52
  6369  001ADA  6E36               	movwf	??_measure_freq& (0+255),c
  6370  001ADC  0EF2               	movlw	242
  6371  001ADE                     u3417:
  6372  001ADE  2EE8               	decfsz	wreg,f,c
  6373  001AE0  D7FE               	goto	u3417
  6374  001AE2  2E36               	decfsz	??_measure_freq& (0+255),f,c
  6375  001AE4  D7FC               	goto	u3417
  6376                           
  6377                           ;measure.c: 97: _delay((unsigned long)((10)*(16000000/4000.0)));
  6378  001AE6  0E34               	movlw	52
  6379  001AE8  6E36               	movwf	??_measure_freq& (0+255),c
  6380  001AEA  0EF2               	movlw	242
  6381  001AEC                     u3427:
  6382  001AEC  2EE8               	decfsz	wreg,f,c
  6383  001AEE  D7FE               	goto	u3427
  6384  001AF0  2E36               	decfsz	??_measure_freq& (0+255),f,c
  6385  001AF2  D7FC               	goto	u3427
  6386                           
  6387                           ;measure.c: 98: _delay((unsigned long)((10)*(16000000/4000.0)));
  6388  001AF4  0E34               	movlw	52
  6389  001AF6  6E36               	movwf	??_measure_freq& (0+255),c
  6390  001AF8  0EF2               	movlw	242
  6391  001AFA                     u3437:
  6392  001AFA  2EE8               	decfsz	wreg,f,c
  6393  001AFC  D7FE               	goto	u3437
  6394  001AFE  2E36               	decfsz	??_measure_freq& (0+255),f,c
  6395  001B00  D7FC               	goto	u3437
  6396                           
  6397                           ;measure.c: 103: TRISA |= 0b00010000;
  6398  001B02  8892               	bsf	3986,4,c	;volatile
  6399                           
  6400                           ;measure.c: 106: count = timer0_read_ps();
  6401  001B04  EC8D  F011         	call	_timer0_read_ps	;wreg free
  6402  001B08  C002  F037         	movff	?_timer0_read_ps,measure_freq@count
  6403  001B0C  C003  F038         	movff	?_timer0_read_ps+1,measure_freq@count+1
  6404                           
  6405                           ;measure.c: 109: lcd_gotoxy(0, 1);
  6406  001B10  0E01               	movlw	1
  6407  001B12  6E06               	movwf	lcd_gotoxy@row,c
  6408  001B14  0E00               	movlw	0
  6409  001B16  EC9C  F012         	call	_lcd_gotoxy
  6410                           
  6411                           ;measure.c: 111: buffer_init();
  6412  001B1A  ECBC  F013         	call	_buffer_init	;wreg free
  6413                           
  6414                           ; BSR set to: 0
  6415                           ;measure.c: 112: buffer_puts("Freq=");
  6416  001B1E  0E90               	movlw	STR_19& (0+255)
  6417  001B20  EC76  F013         	call	_buffer_puts
  6418                           
  6419                           ; BSR set to: 0
  6420                           ;measure.c: 113: format_number(count, 10, 5);
  6421  001B24  C037  F009         	movff	measure_freq@count,format_number@n
  6422  001B28  C038  F00A         	movff	measure_freq@count+1,format_number@n+1
  6423  001B2C  0E0A               	movlw	10
  6424  001B2E  6E0B               	movwf	format_number@base,c
  6425  001B30  0E05               	movlw	5
  6426  001B32  6E0C               	movwf	format_number@pad,c
  6427  001B34  EC91  F00F         	call	_format_number	;wreg free
  6428                           
  6429                           ;measure.c: 114: print_buffer();
  6430  001B38  ECC5  F013         	call	_print_buffer	;wreg free
  6431                           
  6432                           ;measure.c: 116: return count;
  6433  001B3C  C037  F034         	movff	measure_freq@count,?_measure_freq
  6434  001B40  C038  F035         	movff	measure_freq@count+1,?_measure_freq+1
  6435  001B44  0012               	return		;funcret
  6436  001B46                     __end_of_measure_freq:
  6437                           	opt stack 0
  6438                           tblptru	equ	0xFF8
  6439                           tblptrh	equ	0xFF7
  6440                           tblptrl	equ	0xFF6
  6441                           tablat	equ	0xFF5
  6442                           prodh	equ	0xFF4
  6443                           prodl	equ	0xFF3
  6444                           intcon	equ	0xFF2
  6445                           intcon2	equ	0xFF1
  6446                           postinc0	equ	0xFEE
  6447                           wreg	equ	0xFE8
  6448                           postdec1	equ	0xFE5
  6449                           fsr1l	equ	0xFE1
  6450                           postinc2	equ	0xFDE
  6451                           postdec2	equ	0xFDD
  6452                           fsr2h	equ	0xFDA
  6453                           fsr2l	equ	0xFD9
  6454                           status	equ	0xFD8
  6455                           
  6456 ;; *************** function _timer0_read_ps *****************
  6457 ;; Defined at:
  6458 ;;		line 63 in file "../../../lib/timer.c"
  6459 ;; Parameters:    Size  Location     Type
  6460 ;;		None
  6461 ;; Auto vars:     Size  Location     Type
  6462 ;;  count           2    6[COMRAM] unsigned int 
  6463 ;;  prev            1    5[COMRAM] unsigned char 
  6464 ;; Return value:  Size  Location     Type
  6465 ;;                  2    1[COMRAM] unsigned short 
  6466 ;; Registers used:
  6467 ;;		wreg, status,2, status,0
  6468 ;; Tracked objects:
  6469 ;;		On entry : 0/0
  6470 ;;		On exit  : 0/0
  6471 ;;		Unchanged: 0/0
  6472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6473 ;;      Params:         2       0       0       0       0       0       0
  6474 ;;      Locals:         3       0       0       0       0       0       0
  6475 ;;      Temps:          2       0       0       0       0       0       0
  6476 ;;      Totals:         7       0       0       0       0       0       0
  6477 ;;Total ram usage:        7 bytes
  6478 ;; Hardware stack levels used:    1
  6479 ;; Hardware stack levels required when called:    1
  6480 ;; This function calls:
  6481 ;;		Nothing
  6482 ;; This function is called by:
  6483 ;;		_measure_freq
  6484 ;; This function uses a non-reentrant model
  6485 ;;
  6486                           
  6487                           	psect	text34
  6488  00231A                     __ptext34:
  6489                           	opt stack 0
  6490  00231A                     _timer0_read_ps:
  6491                           	opt stack 27
  6492                           
  6493                           ;timer.c: 64: uint8_t prev = TMR0;
  6494                           
  6495                           ;incstack = 0
  6496  00231A  CFD6 F006          	movff	4054,timer0_read_ps@prev	;volatile
  6497                           
  6498                           ;timer.c: 65: uint16_t count = 0;
  6499  00231E  6A07               	clrf	timer0_read_ps@count,c
  6500  002320  6A08               	clrf	timer0_read_ps@count+1,c
  6501                           
  6502                           ;timer.c: 67: T0CON |= 0x20;
  6503  002322  8AD5               	bsf	4053,5,c	;volatile
  6504  002324                     l93:
  6505                           
  6506                           ;timer.c: 71: T0CON |= 0x10;
  6507  002324  88D5               	bsf	4053,4,c	;volatile
  6508                           
  6509                           ;timer.c: 73: __nop();
  6510  002326  F000               	nop	
  6511                           
  6512                           ;timer.c: 74: __nop();
  6513  002328  F000               	nop	
  6514                           
  6515                           ;timer.c: 76: T0CON &= ~0x10;
  6516  00232A  98D5               	bcf	4053,4,c	;volatile
  6517                           
  6518                           ;timer.c: 78: __nop();
  6519  00232C  F000               	nop	
  6520                           
  6521                           ;timer.c: 79: __nop();
  6522  00232E  F000               	nop	
  6523                           
  6524                           ;timer.c: 81: ++count;
  6525  002330  4A07               	infsnz	timer0_read_ps@count,f,c
  6526  002332  2A08               	incf	timer0_read_ps@count+1,f,c
  6527                           
  6528                           ;timer.c: 84: } while(prev == TMR0 && count <= 255);
  6529  002334  5006               	movf	timer0_read_ps@prev,w,c
  6530  002336  18D6               	xorwf	4054,w,c	;volatile
  6531  002338  10D7               	iorwf	4055,w,c	;volatile
  6532  00233A  E102               	bnz	l2633
  6533  00233C  0408               	decf	timer0_read_ps@count+1,w,c
  6534  00233E  E3F2               	bnc	l93
  6535  002340                     l2633:
  6536                           
  6537                           ;timer.c: 86: count = ((prev << 8) + (256 - count));
  6538  002340  5006               	movf	timer0_read_ps@prev,w,c
  6539  002342  6E05               	movwf	(??_timer0_read_ps+1)& (0+255),c
  6540  002344  6A04               	clrf	??_timer0_read_ps& (0+255),c
  6541  002346  5007               	movf	timer0_read_ps@count,w,c
  6542  002348  5E04               	subwf	??_timer0_read_ps,f,c
  6543  00234A  5008               	movf	timer0_read_ps@count+1,w,c
  6544  00234C  5A05               	subwfb	??_timer0_read_ps+1,f,c
  6545  00234E  0E00               	movlw	0
  6546  002350  2404               	addwf	??_timer0_read_ps,w,c
  6547  002352  6E07               	movwf	timer0_read_ps@count,c
  6548  002354  0E01               	movlw	1
  6549  002356  2005               	addwfc	??_timer0_read_ps+1,w,c
  6550  002358  6E08               	movwf	timer0_read_ps@count+1,c
  6551                           
  6552                           ;timer.c: 87: return count;
  6553  00235A  C007  F002         	movff	timer0_read_ps@count,?_timer0_read_ps
  6554  00235E  C008  F003         	movff	timer0_read_ps@count+1,?_timer0_read_ps+1
  6555  002362  0012               	return		;funcret
  6556  002364                     __end_of_timer0_read_ps:
  6557                           	opt stack 0
  6558                           tblptru	equ	0xFF8
  6559                           tblptrh	equ	0xFF7
  6560                           tblptrl	equ	0xFF6
  6561                           tablat	equ	0xFF5
  6562                           prodh	equ	0xFF4
  6563                           prodl	equ	0xFF3
  6564                           intcon	equ	0xFF2
  6565                           intcon2	equ	0xFF1
  6566                           postinc0	equ	0xFEE
  6567                           wreg	equ	0xFE8
  6568                           postdec1	equ	0xFE5
  6569                           fsr1l	equ	0xFE1
  6570                           postinc2	equ	0xFDE
  6571                           postdec2	equ	0xFDD
  6572                           fsr2h	equ	0xFDA
  6573                           fsr2l	equ	0xFD9
  6574                           status	equ	0xFD8
  6575                           
  6576 ;; *************** function _print_buffer *****************
  6577 ;; Defined at:
  6578 ;;		line 232 in file "../../../src/print.c"
  6579 ;; Parameters:    Size  Location     Type
  6580 ;;		None
  6581 ;; Auto vars:     Size  Location     Type
  6582 ;;		None
  6583 ;; Return value:  Size  Location     Type
  6584 ;;		None               void
  6585 ;; Registers used:
  6586 ;;		None
  6587 ;; Tracked objects:
  6588 ;;		On entry : 0/0
  6589 ;;		On exit  : 0/0
  6590 ;;		Unchanged: 0/0
  6591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6592 ;;      Params:         0       0       0       0       0       0       0
  6593 ;;      Locals:         0       0       0       0       0       0       0
  6594 ;;      Temps:          0       0       0       0       0       0       0
  6595 ;;      Totals:         0       0       0       0       0       0       0
  6596 ;;Total ram usage:        0 bytes
  6597 ;; Hardware stack levels used:    1
  6598 ;; Hardware stack levels required when called:    1
  6599 ;; This function calls:
  6600 ;;		Nothing
  6601 ;; This function is called by:
  6602 ;;		_measure_freq
  6603 ;; This function uses a non-reentrant model
  6604 ;;
  6605                           
  6606                           	psect	text35
  6607  00278A                     __ptext35:
  6608                           	opt stack 0
  6609  00278A                     _print_buffer:
  6610                           	opt stack 27
  6611                           
  6612                           ;incstack = 0
  6613  00278A  0012               	return		;funcret
  6614  00278C                     __end_of_print_buffer:
  6615                           	opt stack 0
  6616                           tblptru	equ	0xFF8
  6617                           tblptrh	equ	0xFF7
  6618                           tblptrl	equ	0xFF6
  6619                           tablat	equ	0xFF5
  6620                           prodh	equ	0xFF4
  6621                           prodl	equ	0xFF3
  6622                           intcon	equ	0xFF2
  6623                           intcon2	equ	0xFF1
  6624                           postinc0	equ	0xFEE
  6625                           wreg	equ	0xFE8
  6626                           postdec1	equ	0xFE5
  6627                           fsr1l	equ	0xFE1
  6628                           postinc2	equ	0xFDE
  6629                           postdec2	equ	0xFDD
  6630                           fsr2h	equ	0xFDA
  6631                           fsr2l	equ	0xFD9
  6632                           status	equ	0xFD8
  6633                           
  6634 ;; *************** function _lcd_gotoxy *****************
  6635 ;; Defined at:
  6636 ;;		line 135 in file "../../../lib/lcd44780.c"
  6637 ;; Parameters:    Size  Location     Type
  6638 ;;  col             1    wreg     unsigned char 
  6639 ;;  row             1    5[COMRAM] unsigned char 
  6640 ;; Auto vars:     Size  Location     Type
  6641 ;;  col             1    6[COMRAM] unsigned char 
  6642 ;;  row_offsets     4    7[COMRAM] unsigned char [4]
  6643 ;; Return value:  Size  Location     Type
  6644 ;;		None               void
  6645 ;; Registers used:
  6646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6647 ;; Tracked objects:
  6648 ;;		On entry : 0/0
  6649 ;;		On exit  : 0/0
  6650 ;;		Unchanged: 0/0
  6651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6652 ;;      Params:         1       0       0       0       0       0       0
  6653 ;;      Locals:         5       0       0       0       0       0       0
  6654 ;;      Temps:          0       0       0       0       0       0       0
  6655 ;;      Totals:         6       0       0       0       0       0       0
  6656 ;;Total ram usage:        6 bytes
  6657 ;; Hardware stack levels used:    1
  6658 ;; Hardware stack levels required when called:    4
  6659 ;; This function calls:
  6660 ;;		_lcd_command
  6661 ;; This function is called by:
  6662 ;;		_print_unit
  6663 ;;		_print_reading
  6664 ;;		_print_indicator
  6665 ;;		_main
  6666 ;;		_calibrate
  6667 ;;		_measure_freq
  6668 ;;		_measure_capacitance
  6669 ;;		_measure_inductance
  6670 ;; This function uses a non-reentrant model
  6671 ;;
  6672                           
  6673                           	psect	text36
  6674  002538                     __ptext36:
  6675                           	opt stack 0
  6676  002538                     _lcd_gotoxy:
  6677                           	opt stack 25
  6678                           
  6679                           ;incstack = 0
  6680                           ;lcd_gotoxy@col stored from wreg
  6681  002538  6E07               	movwf	lcd_gotoxy@col,c
  6682                           
  6683                           ;lcd44780.c: 137: uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
  6684  00253A  C0E2  F008         	movff	lcd_gotoxy@F7646,lcd_gotoxy@row_offsets
  6685  00253E  C0E3  F009         	movff	lcd_gotoxy@F7646+1,lcd_gotoxy@row_offsets+1
  6686  002542  C0E4  F00A         	movff	lcd_gotoxy@F7646+2,lcd_gotoxy@row_offsets+2
  6687  002546  C0E5  F00B         	movff	lcd_gotoxy@F7646+3,lcd_gotoxy@row_offsets+3
  6688                           
  6689                           ;lcd44780.c: 146: if(LCD_lines == 1) {
  6690  00254A  0100               	movlb	0	; () banked
  6691  00254C  05C3               	decf	_LCD_lines& (0+255),w,b
  6692  00254E  E106               	bnz	l2565
  6693                           
  6694                           ; BSR set to: 0
  6695                           ;lcd44780.c: 147: row_offsets[1] = 0x14;
  6696  002550  0E14               	movlw	20
  6697  002552  6E09               	movwf	lcd_gotoxy@row_offsets+1,c
  6698                           
  6699                           ;lcd44780.c: 148: row_offsets[2] = 0x28;
  6700  002554  0E28               	movlw	40
  6701  002556  6E0A               	movwf	lcd_gotoxy@row_offsets+2,c
  6702                           
  6703                           ;lcd44780.c: 149: row_offsets[3] = 0x3C;
  6704  002558  0E3C               	movlw	60
  6705  00255A  6E0B               	movwf	lcd_gotoxy@row_offsets+3,c
  6706  00255C                     l2565:
  6707                           
  6708                           ; BSR set to: 0
  6709                           ;lcd44780.c: 150: }
  6710                           ;lcd44780.c: 156: lcd_command(0x80 | (col + row_offsets[row]));
  6711  00255C  5006               	movf	lcd_gotoxy@row,w,c
  6712  00255E  0F08               	addlw	low lcd_gotoxy@row_offsets
  6713  002560  6ED9               	movwf	fsr2l,c
  6714  002562  6ADA               	clrf	fsr2h,c
  6715  002564  50DF               	movf	indf2,w,c
  6716  002566  2407               	addwf	lcd_gotoxy@col,w,c
  6717  002568  0980               	iorlw	128
  6718  00256A  ECB5  F013         	call	_lcd_command
  6719  00256E  0012               	return		;funcret
  6720  002570                     __end_of_lcd_gotoxy:
  6721                           	opt stack 0
  6722                           tblptru	equ	0xFF8
  6723                           tblptrh	equ	0xFF7
  6724                           tblptrl	equ	0xFF6
  6725                           tablat	equ	0xFF5
  6726                           prodh	equ	0xFF4
  6727                           prodl	equ	0xFF3
  6728                           intcon	equ	0xFF2
  6729                           intcon2	equ	0xFF1
  6730                           postinc0	equ	0xFEE
  6731                           wreg	equ	0xFE8
  6732                           postdec1	equ	0xFE5
  6733                           fsr1l	equ	0xFE1
  6734                           indf2	equ	0xFDF
  6735                           postinc2	equ	0xFDE
  6736                           postdec2	equ	0xFDD
  6737                           fsr2h	equ	0xFDA
  6738                           fsr2l	equ	0xFD9
  6739                           status	equ	0xFD8
  6740                           
  6741 ;; *************** function _format_number *****************
  6742 ;; Defined at:
  6743 ;;		line 15 in file "../../../lib/format.c"
  6744 ;; Parameters:    Size  Location     Type
  6745 ;;  n               2    8[COMRAM] unsigned int 
  6746 ;;  base            1   10[COMRAM] unsigned char 
  6747 ;;  pad             1   11[COMRAM] char 
  6748 ;; Auto vars:     Size  Location     Type
  6749 ;;  buf            32   14[COMRAM] unsigned char [32]
  6750 ;;  i               1   50[COMRAM] char 
  6751 ;;  di              1   49[COMRAM] unsigned char 
  6752 ;;  padchar         1   48[COMRAM] unsigned char 
  6753 ;; Return value:  Size  Location     Type
  6754 ;;		None               void
  6755 ;; Registers used:
  6756 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6757 ;; Tracked objects:
  6758 ;;		On entry : 0/0
  6759 ;;		On exit  : 0/0
  6760 ;;		Unchanged: 0/0
  6761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6762 ;;      Params:         4       0       0       0       0       0       0
  6763 ;;      Locals:        37       0       0       0       0       0       0
  6764 ;;      Temps:          2       0       0       0       0       0       0
  6765 ;;      Totals:        43       0       0       0       0       0       0
  6766 ;;Total ram usage:       43 bytes
  6767 ;; Hardware stack levels used:    1
  6768 ;; Hardware stack levels required when called:    2
  6769 ;; This function calls:
  6770 ;;		___lwdiv
  6771 ;;		___lwmod
  6772 ;;		_buffer_putch
  6773 ;; This function is called by:
  6774 ;;		_print_reading
  6775 ;;		_measure_freq
  6776 ;; This function uses a non-reentrant model
  6777 ;;
  6778                           
  6779                           	psect	text37
  6780  001F22                     __ptext37:
  6781                           	opt stack 0
  6782  001F22                     _format_number:
  6783                           	opt stack 26
  6784                           
  6785                           ;format.c: 16: char buf[8 * sizeof(long)];
  6786                           ;format.c: 17: uint8_t di;
  6787                           ;format.c: 18: int8_t i = 0;
  6788                           
  6789                           ;incstack = 0
  6790  001F22  6A33               	clrf	format_number@i,c
  6791                           
  6792                           ;format.c: 19: char padchar = ' ';
  6793  001F24  0E20               	movlw	32
  6794  001F26  6E31               	movwf	format_number@padchar,c
  6795                           
  6796                           ;format.c: 21: if(pad < 0) {
  6797  001F28  AE0C               	btfss	format_number@pad,7,c
  6798  001F2A  D003               	goto	l2585
  6799                           
  6800                           ;format.c: 22: pad = -pad;
  6801  001F2C  6C0C               	negf	format_number@pad,c
  6802                           
  6803                           ;format.c: 23: padchar = '0';
  6804  001F2E  0E30               	movlw	48
  6805  001F30  6E31               	movwf	format_number@padchar,c
  6806  001F32                     l2585:
  6807                           
  6808                           ;format.c: 35: di = n % base;
  6809  001F32  C009  F002         	movff	format_number@n,___lwmod@dividend
  6810  001F36  C00A  F003         	movff	format_number@n+1,___lwmod@dividend+1
  6811  001F3A  C00B  F004         	movff	format_number@base,___lwmod@divisor
  6812  001F3E  6A05               	clrf	___lwmod@divisor+1,c
  6813  001F40  EC42  F012         	call	___lwmod	;wreg free
  6814  001F44  5002               	movf	?___lwmod,w,c
  6815  001F46  6E32               	movwf	format_number@di,c
  6816                           
  6817                           ;format.c: 36: buf[i++] = (di < 10 ? (uint8_t)'0' + di : (uint8_t)'A' + di - 10);
  6818  001F48  0E09               	movlw	9
  6819  001F4A  6432               	cpfsgt	format_number@di,c
  6820  001F4C  D002               	goto	l2591
  6821  001F4E  0E37               	movlw	55
  6822  001F50  D001               	goto	L3
  6823  001F52                     l2591:
  6824  001F52  0E30               	movlw	48
  6825  001F54                     L3:
  6826  001F54  2432               	addwf	format_number@di,w,c
  6827  001F56  6E2F               	movwf	_format_number$148,c
  6828  001F58  6A30               	clrf	_format_number$148+1,c
  6829  001F5A  0E00               	movlw	0
  6830  001F5C  2230               	addwfc	_format_number$148+1,f,c
  6831  001F5E  5033               	movf	format_number@i,w,c
  6832  001F60  0F0F               	addlw	low format_number@buf
  6833  001F62  6ED9               	movwf	fsr2l,c
  6834  001F64  6ADA               	clrf	fsr2h,c
  6835  001F66  C02F  FFDF         	movff	_format_number$148,indf2
  6836  001F6A  2A33               	incf	format_number@i,f,c
  6837                           
  6838                           ;format.c: 38: n /= base;
  6839  001F6C  C009  F002         	movff	format_number@n,___lwdiv@dividend
  6840  001F70  C00A  F003         	movff	format_number@n+1,___lwdiv@dividend+1
  6841  001F74  C00B  F004         	movff	format_number@base,___lwdiv@divisor
  6842  001F78  6A05               	clrf	___lwdiv@divisor+1,c
  6843  001F7A  ECB2  F011         	call	___lwdiv	;wreg free
  6844  001F7E  C002  F009         	movff	?___lwdiv,format_number@n
  6845  001F82  C003  F00A         	movff	?___lwdiv+1,format_number@n+1
  6846                           
  6847                           ;format.c: 39: } while(n > 0);
  6848  001F86  5009               	movf	format_number@n,w,c
  6849  001F88  100A               	iorwf	format_number@n+1,w,c
  6850  001F8A  E004               	bz	l2603
  6851  001F8C  D7D2               	goto	l2585
  6852  001F8E                     l2601:
  6853  001F8E  5031               	movf	format_number@padchar,w,c
  6854  001F90  ECD7  F011         	call	_buffer_putch
  6855  001F94                     l2603:
  6856  001F94  060C               	decf	format_number@pad,f,c
  6857  001F96  280C               	incf	format_number@pad,w,c
  6858  001F98  6E0D               	movwf	??_format_number& (0+255),c
  6859  001F9A  5033               	movf	format_number@i,w,c
  6860  001F9C  0A80               	xorlw	128
  6861  001F9E  6E0E               	movwf	(??_format_number+1)& (0+255),c
  6862  001FA0  500D               	movf	??_format_number,w,c
  6863  001FA2  0A80               	xorlw	128
  6864  001FA4  5C0E               	subwf	(??_format_number+1)& (0+255),w,c
  6865  001FA6  E3F3               	bnc	l2601
  6866  001FA8                     l2605:
  6867                           
  6868                           ;format.c: 43: for(; i > 0; i--) {
  6869  001FA8  5033               	movf	format_number@i,w,c
  6870  001FAA  0A80               	xorlw	128
  6871  001FAC  0F7F               	addlw	-129
  6872  001FAE  A0D8               	btfss	status,0,c
  6873  001FB0  0012               	return	
  6874                           
  6875                           ;format.c: 44: buffer_putch((char)buf[(int16_t)i - 1]);
  6876  001FB2  C033  F00D         	movff	format_number@i,??_format_number
  6877  001FB6  060D               	decf	??_format_number,f,c
  6878  001FB8  500D               	movf	??_format_number,w,c
  6879  001FBA  0F0F               	addlw	low format_number@buf
  6880  001FBC  6ED9               	movwf	fsr2l,c
  6881  001FBE  6ADA               	clrf	fsr2h,c
  6882  001FC0  50DF               	movf	indf2,w,c
  6883  001FC2  ECD7  F011         	call	_buffer_putch
  6884                           
  6885                           ; BSR set to: 0
  6886  001FC6  0633               	decf	format_number@i,f,c
  6887  001FC8  D7EF               	goto	l2605
  6888  001FCA                     __end_of_format_number:
  6889                           	opt stack 0
  6890                           tblptru	equ	0xFF8
  6891                           tblptrh	equ	0xFF7
  6892                           tblptrl	equ	0xFF6
  6893                           tablat	equ	0xFF5
  6894                           prodh	equ	0xFF4
  6895                           prodl	equ	0xFF3
  6896                           intcon	equ	0xFF2
  6897                           intcon2	equ	0xFF1
  6898                           postinc0	equ	0xFEE
  6899                           wreg	equ	0xFE8
  6900                           postdec1	equ	0xFE5
  6901                           fsr1l	equ	0xFE1
  6902                           indf2	equ	0xFDF
  6903                           postinc2	equ	0xFDE
  6904                           postdec2	equ	0xFDD
  6905                           fsr2h	equ	0xFDA
  6906                           fsr2l	equ	0xFD9
  6907                           status	equ	0xFD8
  6908                           
  6909 ;; *************** function ___lwmod *****************
  6910 ;; Defined at:
  6911 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  6912 ;; Parameters:    Size  Location     Type
  6913 ;;  dividend        2    1[COMRAM] unsigned int 
  6914 ;;  divisor         2    3[COMRAM] unsigned int 
  6915 ;; Auto vars:     Size  Location     Type
  6916 ;;  counter         1    5[COMRAM] unsigned char 
  6917 ;; Return value:  Size  Location     Type
  6918 ;;                  2    1[COMRAM] unsigned int 
  6919 ;; Registers used:
  6920 ;;		wreg, status,2, status,0
  6921 ;; Tracked objects:
  6922 ;;		On entry : 0/0
  6923 ;;		On exit  : 0/0
  6924 ;;		Unchanged: 0/0
  6925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6926 ;;      Params:         4       0       0       0       0       0       0
  6927 ;;      Locals:         1       0       0       0       0       0       0
  6928 ;;      Temps:          0       0       0       0       0       0       0
  6929 ;;      Totals:         5       0       0       0       0       0       0
  6930 ;;Total ram usage:        5 bytes
  6931 ;; Hardware stack levels used:    1
  6932 ;; Hardware stack levels required when called:    1
  6933 ;; This function calls:
  6934 ;;		Nothing
  6935 ;; This function is called by:
  6936 ;;		_print_reading
  6937 ;;		_format_number
  6938 ;; This function uses a non-reentrant model
  6939 ;;
  6940                           
  6941                           	psect	text38
  6942  002484                     __ptext38:
  6943                           	opt stack 0
  6944  002484                     ___lwmod:
  6945                           	opt stack 26
  6946                           
  6947                           ;incstack = 0
  6948  002484  5004               	movf	___lwmod@divisor,w,c
  6949  002486  1005               	iorwf	___lwmod@divisor+1,w,c
  6950  002488  E017               	bz	l992
  6951  00248A  0E01               	movlw	1
  6952  00248C  6E06               	movwf	___lwmod@counter,c
  6953  00248E  D004               	goto	l2549
  6954  002490                     l2547:
  6955  002490  90D8               	bcf	status,0,c
  6956  002492  3604               	rlcf	___lwmod@divisor,f,c
  6957  002494  3605               	rlcf	___lwmod@divisor+1,f,c
  6958  002496  2A06               	incf	___lwmod@counter,f,c
  6959  002498                     l2549:
  6960  002498  AE05               	btfss	___lwmod@divisor+1,7,c
  6961  00249A  D7FA               	goto	l2547
  6962  00249C                     l2551:
  6963  00249C  5004               	movf	___lwmod@divisor,w,c
  6964  00249E  5C02               	subwf	___lwmod@dividend,w,c
  6965  0024A0  5005               	movf	___lwmod@divisor+1,w,c
  6966  0024A2  5803               	subwfb	___lwmod@dividend+1,w,c
  6967  0024A4  E304               	bnc	l2555
  6968  0024A6  5004               	movf	___lwmod@divisor,w,c
  6969  0024A8  5E02               	subwf	___lwmod@dividend,f,c
  6970  0024AA  5005               	movf	___lwmod@divisor+1,w,c
  6971  0024AC  5A03               	subwfb	___lwmod@dividend+1,f,c
  6972  0024AE                     l2555:
  6973  0024AE  90D8               	bcf	status,0,c
  6974  0024B0  3205               	rrcf	___lwmod@divisor+1,f,c
  6975  0024B2  3204               	rrcf	___lwmod@divisor,f,c
  6976  0024B4  2E06               	decfsz	___lwmod@counter,f,c
  6977  0024B6  D7F2               	goto	l2551
  6978  0024B8                     l992:
  6979  0024B8  C002  F002         	movff	___lwmod@dividend,?___lwmod
  6980  0024BC  C003  F003         	movff	___lwmod@dividend+1,?___lwmod+1
  6981  0024C0  0012               	return		;funcret
  6982  0024C2                     __end_of___lwmod:
  6983                           	opt stack 0
  6984                           tblptru	equ	0xFF8
  6985                           tblptrh	equ	0xFF7
  6986                           tblptrl	equ	0xFF6
  6987                           tablat	equ	0xFF5
  6988                           prodh	equ	0xFF4
  6989                           prodl	equ	0xFF3
  6990                           intcon	equ	0xFF2
  6991                           intcon2	equ	0xFF1
  6992                           postinc0	equ	0xFEE
  6993                           wreg	equ	0xFE8
  6994                           postdec1	equ	0xFE5
  6995                           fsr1l	equ	0xFE1
  6996                           indf2	equ	0xFDF
  6997                           postinc2	equ	0xFDE
  6998                           postdec2	equ	0xFDD
  6999                           fsr2h	equ	0xFDA
  7000                           fsr2l	equ	0xFD9
  7001                           status	equ	0xFD8
  7002                           
  7003 ;; *************** function ___lwdiv *****************
  7004 ;; Defined at:
  7005 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  7006 ;; Parameters:    Size  Location     Type
  7007 ;;  dividend        2    1[COMRAM] unsigned int 
  7008 ;;  divisor         2    3[COMRAM] unsigned int 
  7009 ;; Auto vars:     Size  Location     Type
  7010 ;;  quotient        2    5[COMRAM] unsigned int 
  7011 ;;  counter         1    7[COMRAM] unsigned char 
  7012 ;; Return value:  Size  Location     Type
  7013 ;;                  2    1[COMRAM] unsigned int 
  7014 ;; Registers used:
  7015 ;;		wreg, status,2, status,0
  7016 ;; Tracked objects:
  7017 ;;		On entry : 0/0
  7018 ;;		On exit  : 0/0
  7019 ;;		Unchanged: 0/0
  7020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7021 ;;      Params:         4       0       0       0       0       0       0
  7022 ;;      Locals:         3       0       0       0       0       0       0
  7023 ;;      Temps:          0       0       0       0       0       0       0
  7024 ;;      Totals:         7       0       0       0       0       0       0
  7025 ;;Total ram usage:        7 bytes
  7026 ;; Hardware stack levels used:    1
  7027 ;; Hardware stack levels required when called:    1
  7028 ;; This function calls:
  7029 ;;		Nothing
  7030 ;; This function is called by:
  7031 ;;		_print_reading
  7032 ;;		_format_number
  7033 ;; This function uses a non-reentrant model
  7034 ;;
  7035                           
  7036                           	psect	text39
  7037  002364                     __ptext39:
  7038                           	opt stack 0
  7039  002364                     ___lwdiv:
  7040                           	opt stack 26
  7041                           
  7042                           ;incstack = 0
  7043  002364  6A06               	clrf	___lwdiv@quotient,c
  7044  002366  6A07               	clrf	___lwdiv@quotient+1,c
  7045  002368  5004               	movf	___lwdiv@divisor,w,c
  7046  00236A  1005               	iorwf	___lwdiv@divisor+1,w,c
  7047  00236C  E01B               	bz	l982
  7048  00236E  0E01               	movlw	1
  7049  002370  6E08               	movwf	___lwdiv@counter,c
  7050  002372  D004               	goto	l2529
  7051  002374                     l2527:
  7052  002374  90D8               	bcf	status,0,c
  7053  002376  3604               	rlcf	___lwdiv@divisor,f,c
  7054  002378  3605               	rlcf	___lwdiv@divisor+1,f,c
  7055  00237A  2A08               	incf	___lwdiv@counter,f,c
  7056  00237C                     l2529:
  7057  00237C  AE05               	btfss	___lwdiv@divisor+1,7,c
  7058  00237E  D7FA               	goto	l2527
  7059  002380                     l2531:
  7060  002380  90D8               	bcf	status,0,c
  7061  002382  3606               	rlcf	___lwdiv@quotient,f,c
  7062  002384  3607               	rlcf	___lwdiv@quotient+1,f,c
  7063  002386  5004               	movf	___lwdiv@divisor,w,c
  7064  002388  5C02               	subwf	___lwdiv@dividend,w,c
  7065  00238A  5005               	movf	___lwdiv@divisor+1,w,c
  7066  00238C  5803               	subwfb	___lwdiv@dividend+1,w,c
  7067  00238E  E305               	bnc	l2539
  7068  002390  5004               	movf	___lwdiv@divisor,w,c
  7069  002392  5E02               	subwf	___lwdiv@dividend,f,c
  7070  002394  5005               	movf	___lwdiv@divisor+1,w,c
  7071  002396  5A03               	subwfb	___lwdiv@dividend+1,f,c
  7072  002398  8006               	bsf	___lwdiv@quotient,0,c
  7073  00239A                     l2539:
  7074  00239A  90D8               	bcf	status,0,c
  7075  00239C  3205               	rrcf	___lwdiv@divisor+1,f,c
  7076  00239E  3204               	rrcf	___lwdiv@divisor,f,c
  7077  0023A0  2E08               	decfsz	___lwdiv@counter,f,c
  7078  0023A2  D7EE               	goto	l2531
  7079  0023A4                     l982:
  7080  0023A4  C006  F002         	movff	___lwdiv@quotient,?___lwdiv
  7081  0023A8  C007  F003         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7082  0023AC  0012               	return		;funcret
  7083  0023AE                     __end_of___lwdiv:
  7084                           	opt stack 0
  7085                           tblptru	equ	0xFF8
  7086                           tblptrh	equ	0xFF7
  7087                           tblptrl	equ	0xFF6
  7088                           tablat	equ	0xFF5
  7089                           prodh	equ	0xFF4
  7090                           prodl	equ	0xFF3
  7091                           intcon	equ	0xFF2
  7092                           intcon2	equ	0xFF1
  7093                           postinc0	equ	0xFEE
  7094                           wreg	equ	0xFE8
  7095                           postdec1	equ	0xFE5
  7096                           fsr1l	equ	0xFE1
  7097                           indf2	equ	0xFDF
  7098                           postinc2	equ	0xFDE
  7099                           postdec2	equ	0xFDD
  7100                           fsr2h	equ	0xFDA
  7101                           fsr2l	equ	0xFD9
  7102                           status	equ	0xFD8
  7103                           
  7104 ;; *************** function _buffer_puts *****************
  7105 ;; Defined at:
  7106 ;;		line 56 in file "../../../lib/buffer.c"
  7107 ;; Parameters:    Size  Location     Type
  7108 ;;  x               1    wreg     PTR const unsigned char 
  7109 ;;		 -> STR_19(6), 
  7110 ;; Auto vars:     Size  Location     Type
  7111 ;;  x               1    4[COMRAM] PTR const unsigned char 
  7112 ;;		 -> STR_19(6), 
  7113 ;; Return value:  Size  Location     Type
  7114 ;;                  1    wreg      unsigned char 
  7115 ;; Registers used:
  7116 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7117 ;; Tracked objects:
  7118 ;;		On entry : F/0
  7119 ;;		On exit  : F/0
  7120 ;;		Unchanged: 0/0
  7121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7122 ;;      Params:         0       0       0       0       0       0       0
  7123 ;;      Locals:         1       0       0       0       0       0       0
  7124 ;;      Temps:          0       0       0       0       0       0       0
  7125 ;;      Totals:         1       0       0       0       0       0       0
  7126 ;;Total ram usage:        1 bytes
  7127 ;; Hardware stack levels used:    1
  7128 ;; Hardware stack levels required when called:    2
  7129 ;; This function calls:
  7130 ;;		_buffer_putch
  7131 ;; This function is called by:
  7132 ;;		_measure_freq
  7133 ;; This function uses a non-reentrant model
  7134 ;;
  7135                           
  7136                           	psect	text40
  7137  0026EC                     __ptext40:
  7138                           	opt stack 0
  7139  0026EC                     _buffer_puts:
  7140                           	opt stack 26
  7141                           
  7142                           ;incstack = 0
  7143                           ;buffer_puts@x stored from wreg
  7144  0026EC  6E05               	movwf	buffer_puts@x,c
  7145                           
  7146                           ; BSR set to: 0
  7147                           ;buffer.c: 57: while(*x) {
  7148  0026EE  D007               	goto	l2647
  7149  0026F0                     l2643:
  7150                           
  7151                           ; BSR set to: 0
  7152                           ;buffer.c: 58: buffer_putch(*x);
  7153  0026F0  C005  FFF6         	movff	buffer_puts@x,tblptrl
  7154  0026F4                     	if	0	;There is only one active tblptr byte
  7155  0026F4                     	endif
  7156  0026F4                     	if	0	;tblptru may be non-zero
  7157  0026F4                     	endif
  7158  0026F4                     	if	0	;tblptru may be non-zero
  7159  0026F4                     	endif
  7160  0026F4  0008               	tblrd		*
  7161  0026F6  50F5               	movf	tablat,w,c
  7162  0026F8  ECD7  F011         	call	_buffer_putch
  7163                           
  7164                           ; BSR set to: 0
  7165                           ;buffer.c: 59: ++x;
  7166  0026FC  2A05               	incf	buffer_puts@x,f,c
  7167  0026FE                     l2647:
  7168                           
  7169                           ; BSR set to: 0
  7170  0026FE  C005  FFF6         	movff	buffer_puts@x,tblptrl
  7171  002702                     	if	0	;There is only one active tblptr byte
  7172  002702                     	endif
  7173  002702                     	if	0	;tblptru may be non-zero
  7174  002702                     	endif
  7175  002702                     	if	0	;tblptru may be non-zero
  7176  002702                     	endif
  7177  002702  0008               	tblrd		*
  7178  002704  50F5               	movf	tablat,w,c
  7179  002706  B4D8               	btfsc	status,2,c
  7180                           
  7181                           ; BSR set to: 0
  7182  002708  0012               	return		;funcret
  7183  00270A  D7F2               	goto	l2643
  7184  00270C                     __end_of_buffer_puts:
  7185                           	opt stack 0
  7186                           tblptru	equ	0xFF8
  7187                           tblptrh	equ	0xFF7
  7188                           tblptrl	equ	0xFF6
  7189                           tablat	equ	0xFF5
  7190                           prodh	equ	0xFF4
  7191                           prodl	equ	0xFF3
  7192                           intcon	equ	0xFF2
  7193                           intcon2	equ	0xFF1
  7194                           postinc0	equ	0xFEE
  7195                           wreg	equ	0xFE8
  7196                           postdec1	equ	0xFE5
  7197                           fsr1l	equ	0xFE1
  7198                           indf2	equ	0xFDF
  7199                           postinc2	equ	0xFDE
  7200                           postdec2	equ	0xFDD
  7201                           fsr2h	equ	0xFDA
  7202                           fsr2l	equ	0xFD9
  7203                           status	equ	0xFD8
  7204                           
  7205 ;; *************** function _buffer_putch *****************
  7206 ;; Defined at:
  7207 ;;		line 30 in file "../../../lib/buffer.c"
  7208 ;; Parameters:    Size  Location     Type
  7209 ;;  ch              1    wreg     unsigned char 
  7210 ;; Auto vars:     Size  Location     Type
  7211 ;;  ch              1    3[COMRAM] unsigned char 
  7212 ;; Return value:  Size  Location     Type
  7213 ;;                  1    wreg      unsigned char 
  7214 ;; Registers used:
  7215 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7216 ;; Tracked objects:
  7217 ;;		On entry : 0/0
  7218 ;;		On exit  : F/0
  7219 ;;		Unchanged: 0/0
  7220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7221 ;;      Params:         0       0       0       0       0       0       0
  7222 ;;      Locals:         1       0       0       0       0       0       0
  7223 ;;      Temps:          2       0       0       0       0       0       0
  7224 ;;      Totals:         3       0       0       0       0       0       0
  7225 ;;Total ram usage:        3 bytes
  7226 ;; Hardware stack levels used:    1
  7227 ;; Hardware stack levels required when called:    1
  7228 ;; This function calls:
  7229 ;;		Nothing
  7230 ;; This function is called by:
  7231 ;;		_format_number
  7232 ;;		_format_double
  7233 ;;		_buffer_puts
  7234 ;; This function uses a non-reentrant model
  7235 ;;
  7236                           
  7237                           	psect	text41
  7238  0023AE                     __ptext41:
  7239                           	opt stack 0
  7240  0023AE                     _buffer_putch:
  7241                           	opt stack 26
  7242                           
  7243                           ; BSR set to: 0
  7244                           ;incstack = 0
  7245                           ;buffer_putch@ch stored from wreg
  7246  0023AE  6E04               	movwf	buffer_putch@ch,c
  7247                           
  7248                           ;buffer.c: 31: if(16 - buffer.n <= 0)
  7249  0023B0  0E10               	movlw	16
  7250  0023B2  6E02               	movwf	??_buffer_putch& (0+255),c
  7251  0023B4  6A03               	clrf	(??_buffer_putch+1)& (0+255),c
  7252  0023B6  0100               	movlb	0	; () banked
  7253  0023B8  39D5               	swapf	(_buffer+16)& (0+255),w,b
  7254  0023BA  0B0F               	andlw	15
  7255  0023BC  5E02               	subwf	??_buffer_putch,f,c
  7256  0023BE  0E00               	movlw	0
  7257  0023C0  5A03               	subwfb	??_buffer_putch+1,f,c
  7258  0023C2  BE03               	btfsc	??_buffer_putch+1,7,c
  7259  0023C4  0C00               	retlw	0
  7260  0023C6  5003               	movf	??_buffer_putch+1,w,c
  7261  0023C8  E103               	bnz	l2395
  7262  0023CA  0402               	decf	??_buffer_putch,w,c
  7263  0023CC  A0D8               	btfss	status,0,c
  7264  0023CE  0012               	return	
  7265  0023D0                     l2395:
  7266                           
  7267                           ; BSR set to: 0
  7268                           ;buffer.c: 33: buffer.x[buffer.n] = ch;
  7269  0023D0  39D5               	swapf	(_buffer+16)& (0+255),w,b
  7270  0023D2  0B0F               	andlw	15
  7271  0023D4  6E02               	movwf	??_buffer_putch& (0+255),c
  7272  0023D6  5002               	movf	??_buffer_putch,w,c
  7273  0023D8  0FC5               	addlw	low _buffer
  7274  0023DA  6ED9               	movwf	fsr2l,c
  7275  0023DC  6ADA               	clrf	fsr2h,c
  7276  0023DE  C004  FFDF         	movff	buffer_putch@ch,indf2
  7277                           
  7278                           ; BSR set to: 0
  7279                           ;buffer.c: 34: buffer.n++;
  7280  0023E2  39D5               	swapf	(_buffer+16)& (0+255),w,b
  7281  0023E4  0B0F               	andlw	15
  7282  0023E6  6E02               	movwf	??_buffer_putch& (0+255),c
  7283  0023E8  2A02               	incf	??_buffer_putch,f,c
  7284  0023EA  3A02               	swapf	??_buffer_putch& (0+255),f,c
  7285  0023EC  51D5               	movf	(_buffer+16)& (0+255),w,b
  7286  0023EE  1802               	xorwf	??_buffer_putch& (0+255),w,c
  7287  0023F0  0B0F               	andlw	-241
  7288  0023F2  1802               	xorwf	??_buffer_putch& (0+255),w,c
  7289  0023F4  6FD5               	movwf	(_buffer+16)& (0+255),b
  7290                           
  7291                           ; BSR set to: 0
  7292  0023F6  0012               	return		;funcret
  7293  0023F8                     __end_of_buffer_putch:
  7294                           	opt stack 0
  7295                           tblptru	equ	0xFF8
  7296                           tblptrh	equ	0xFF7
  7297                           tblptrl	equ	0xFF6
  7298                           tablat	equ	0xFF5
  7299                           prodh	equ	0xFF4
  7300                           prodl	equ	0xFF3
  7301                           intcon	equ	0xFF2
  7302                           intcon2	equ	0xFF1
  7303                           postinc0	equ	0xFEE
  7304                           wreg	equ	0xFE8
  7305                           postdec1	equ	0xFE5
  7306                           fsr1l	equ	0xFE1
  7307                           indf2	equ	0xFDF
  7308                           postinc2	equ	0xFDE
  7309                           postdec2	equ	0xFDD
  7310                           fsr2h	equ	0xFDA
  7311                           fsr2l	equ	0xFD9
  7312                           status	equ	0xFD8
  7313                           
  7314 ;; *************** function _buffer_init *****************
  7315 ;; Defined at:
  7316 ;;		line 10 in file "../../../lib/buffer.c"
  7317 ;; Parameters:    Size  Location     Type
  7318 ;;		None
  7319 ;; Auto vars:     Size  Location     Type
  7320 ;;		None
  7321 ;; Return value:  Size  Location     Type
  7322 ;;		None               void
  7323 ;; Registers used:
  7324 ;;		wreg, status,2
  7325 ;; Tracked objects:
  7326 ;;		On entry : 0/0
  7327 ;;		On exit  : F/0
  7328 ;;		Unchanged: 0/0
  7329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7330 ;;      Params:         0       0       0       0       0       0       0
  7331 ;;      Locals:         0       0       0       0       0       0       0
  7332 ;;      Temps:          0       0       0       0       0       0       0
  7333 ;;      Totals:         0       0       0       0       0       0       0
  7334 ;;Total ram usage:        0 bytes
  7335 ;; Hardware stack levels used:    1
  7336 ;; Hardware stack levels required when called:    1
  7337 ;; This function calls:
  7338 ;;		Nothing
  7339 ;; This function is called by:
  7340 ;;		_measure_freq
  7341 ;; This function uses a non-reentrant model
  7342 ;;
  7343                           
  7344                           	psect	text42
  7345  002778                     __ptext42:
  7346                           	opt stack 0
  7347  002778                     _buffer_init:
  7348                           	opt stack 27
  7349                           
  7350                           ;buffer.c: 11: buffer.p = 0;
  7351                           
  7352                           ; BSR set to: 0
  7353                           ;incstack = 0
  7354  002778  0EF0               	movlw	-16
  7355  00277A  0100               	movlb	0	; () banked
  7356  00277C  17D5               	andwf	(_buffer+16)& (0+255),f,b
  7357                           
  7358                           ;buffer.c: 12: buffer.n = 0;
  7359  00277E  0E0F               	movlw	-241
  7360  002780  17D5               	andwf	(_buffer+16)& (0+255),f,b
  7361                           
  7362                           ; BSR set to: 0
  7363  002782  0012               	return		;funcret
  7364  002784                     __end_of_buffer_init:
  7365                           	opt stack 0
  7366                           tblptru	equ	0xFF8
  7367                           tblptrh	equ	0xFF7
  7368                           tblptrl	equ	0xFF6
  7369                           tablat	equ	0xFF5
  7370                           prodh	equ	0xFF4
  7371                           prodl	equ	0xFF3
  7372                           intcon	equ	0xFF2
  7373                           intcon2	equ	0xFF1
  7374                           postinc0	equ	0xFEE
  7375                           wreg	equ	0xFE8
  7376                           postdec1	equ	0xFE5
  7377                           fsr1l	equ	0xFE1
  7378                           indf2	equ	0xFDF
  7379                           postinc2	equ	0xFDE
  7380                           postdec2	equ	0xFDD
  7381                           fsr2h	equ	0xFDA
  7382                           fsr2l	equ	0xFD9
  7383                           status	equ	0xFD8
  7384                           
  7385 ;; *************** function _lcd_clear *****************
  7386 ;; Defined at:
  7387 ;;		line 287 in file "../../../lib/lcd44780.c"
  7388 ;; Parameters:    Size  Location     Type
  7389 ;;		None
  7390 ;; Auto vars:     Size  Location     Type
  7391 ;;		None
  7392 ;; Return value:  Size  Location     Type
  7393 ;;		None               void
  7394 ;; Registers used:
  7395 ;;		wreg, status,2, status,0, cstack
  7396 ;; Tracked objects:
  7397 ;;		On entry : 0/0
  7398 ;;		On exit  : 0/0
  7399 ;;		Unchanged: 0/0
  7400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7401 ;;      Params:         0       0       0       0       0       0       0
  7402 ;;      Locals:         0       0       0       0       0       0       0
  7403 ;;      Temps:          1       0       0       0       0       0       0
  7404 ;;      Totals:         1       0       0       0       0       0       0
  7405 ;;Total ram usage:        1 bytes
  7406 ;; Hardware stack levels used:    1
  7407 ;; Hardware stack levels required when called:    4
  7408 ;; This function calls:
  7409 ;;		_lcd_command
  7410 ;; This function is called by:
  7411 ;;		_main
  7412 ;;		_calibrate
  7413 ;; This function uses a non-reentrant model
  7414 ;;
  7415                           
  7416                           	psect	text43
  7417  002744                     __ptext43:
  7418                           	opt stack 0
  7419  002744                     _lcd_clear:
  7420                           	opt stack 26
  7421                           
  7422                           ;lcd44780.c: 288: lcd_command(0x01);
  7423                           
  7424                           ; BSR set to: 0
  7425                           ;incstack = 0
  7426  002744  0E01               	movlw	1
  7427  002746  ECB5  F013         	call	_lcd_command
  7428                           
  7429                           ;lcd44780.c: 289: _delay((unsigned long)((2)*(16000000/4000.0)));
  7430  00274A  0E0B               	movlw	11
  7431  00274C  6E06               	movwf	??_lcd_clear& (0+255),c
  7432  00274E  0E62               	movlw	98
  7433  002750                     u3447:
  7434  002750  2EE8               	decfsz	wreg,f,c
  7435  002752  D7FE               	goto	u3447
  7436  002754  2E06               	decfsz	??_lcd_clear& (0+255),f,c
  7437  002756  D7FC               	goto	u3447
  7438  002758  D000               	nop2	
  7439  00275A  0012               	return		;funcret
  7440  00275C                     __end_of_lcd_clear:
  7441                           	opt stack 0
  7442                           tblptru	equ	0xFF8
  7443                           tblptrh	equ	0xFF7
  7444                           tblptrl	equ	0xFF6
  7445                           tablat	equ	0xFF5
  7446                           prodh	equ	0xFF4
  7447                           prodl	equ	0xFF3
  7448                           intcon	equ	0xFF2
  7449                           intcon2	equ	0xFF1
  7450                           postinc0	equ	0xFEE
  7451                           wreg	equ	0xFE8
  7452                           postdec1	equ	0xFE5
  7453                           fsr1l	equ	0xFE1
  7454                           indf2	equ	0xFDF
  7455                           postinc2	equ	0xFDE
  7456                           postdec2	equ	0xFDD
  7457                           fsr2h	equ	0xFDA
  7458                           fsr2l	equ	0xFD9
  7459                           status	equ	0xFD8
  7460                           
  7461 ;; *************** function _lcd_command *****************
  7462 ;; Defined at:
  7463 ;;		line 127 in file "../../../lib/lcd44780.c"
  7464 ;; Parameters:    Size  Location     Type
  7465 ;;  value           1    wreg     unsigned char 
  7466 ;; Auto vars:     Size  Location     Type
  7467 ;;  value           1    4[COMRAM] unsigned char 
  7468 ;; Return value:  Size  Location     Type
  7469 ;;		None               void
  7470 ;; Registers used:
  7471 ;;		wreg, status,2, status,0, cstack
  7472 ;; Tracked objects:
  7473 ;;		On entry : 0/0
  7474 ;;		On exit  : 0/0
  7475 ;;		Unchanged: 0/0
  7476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7477 ;;      Params:         0       0       0       0       0       0       0
  7478 ;;      Locals:         1       0       0       0       0       0       0
  7479 ;;      Temps:          0       0       0       0       0       0       0
  7480 ;;      Totals:         1       0       0       0       0       0       0
  7481 ;;Total ram usage:        1 bytes
  7482 ;; Hardware stack levels used:    1
  7483 ;; Hardware stack levels required when called:    3
  7484 ;; This function calls:
  7485 ;;		_lcd_send
  7486 ;; This function is called by:
  7487 ;;		_lcd_gotoxy
  7488 ;;		_lcd_clear
  7489 ;;		_lcd_begin
  7490 ;; This function uses a non-reentrant model
  7491 ;;
  7492                           
  7493                           	psect	text44
  7494  00276A                     __ptext44:
  7495                           	opt stack 0
  7496  00276A                     _lcd_command:
  7497                           	opt stack 25
  7498                           
  7499                           ;incstack = 0
  7500                           ;lcd_command@value stored from wreg
  7501  00276A  6E05               	movwf	lcd_command@value,c
  7502                           
  7503                           ;lcd44780.c: 128: lcd_send(value, 0);
  7504  00276C  0E00               	movlw	0
  7505  00276E  6E03               	movwf	lcd_send@mode,c
  7506  002770  5005               	movf	lcd_command@value,w,c
  7507  002772  EC94  F013         	call	_lcd_send
  7508  002776  0012               	return		;funcret
  7509  002778                     __end_of_lcd_command:
  7510                           	opt stack 0
  7511                           tblptru	equ	0xFF8
  7512                           tblptrh	equ	0xFF7
  7513                           tblptrl	equ	0xFF6
  7514                           tablat	equ	0xFF5
  7515                           prodh	equ	0xFF4
  7516                           prodl	equ	0xFF3
  7517                           intcon	equ	0xFF2
  7518                           intcon2	equ	0xFF1
  7519                           postinc0	equ	0xFEE
  7520                           wreg	equ	0xFE8
  7521                           postdec1	equ	0xFE5
  7522                           fsr1l	equ	0xFE1
  7523                           indf2	equ	0xFDF
  7524                           postinc2	equ	0xFDE
  7525                           postdec2	equ	0xFDD
  7526                           fsr2h	equ	0xFDA
  7527                           fsr2l	equ	0xFD9
  7528                           status	equ	0xFD8
  7529                           
  7530 ;; *************** function _lcd_send *****************
  7531 ;; Defined at:
  7532 ;;		line 103 in file "../../../lib/lcd44780.c"
  7533 ;; Parameters:    Size  Location     Type
  7534 ;;  value           1    wreg     unsigned char 
  7535 ;;  mode            1    2[COMRAM] unsigned char 
  7536 ;; Auto vars:     Size  Location     Type
  7537 ;;  value           1    3[COMRAM] unsigned char 
  7538 ;; Return value:  Size  Location     Type
  7539 ;;		None               void
  7540 ;; Registers used:
  7541 ;;		wreg, status,2, status,0, cstack
  7542 ;; Tracked objects:
  7543 ;;		On entry : 0/0
  7544 ;;		On exit  : 0/0
  7545 ;;		Unchanged: 0/0
  7546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7547 ;;      Params:         1       0       0       0       0       0       0
  7548 ;;      Locals:         1       0       0       0       0       0       0
  7549 ;;      Temps:          0       0       0       0       0       0       0
  7550 ;;      Totals:         2       0       0       0       0       0       0
  7551 ;;Total ram usage:        2 bytes
  7552 ;; Hardware stack levels used:    1
  7553 ;; Hardware stack levels required when called:    2
  7554 ;; This function calls:
  7555 ;;		_lcd_write4bits
  7556 ;; This function is called by:
  7557 ;;		_output_putch
  7558 ;;		_lcd_command
  7559 ;;		_lcd_puts
  7560 ;;		_calibrate
  7561 ;; This function uses a non-reentrant model
  7562 ;;
  7563                           
  7564                           	psect	text45
  7565  002728                     __ptext45:
  7566                           	opt stack 0
  7567  002728                     _lcd_send:
  7568                           	opt stack 26
  7569                           
  7570                           ;incstack = 0
  7571                           ;lcd_send@value stored from wreg
  7572  002728  6E04               	movwf	lcd_send@value,c
  7573                           
  7574                           ;lcd44780.c: 104: if(mode) {
  7575  00272A  5003               	movf	lcd_send@mode,w,c
  7576  00272C  E002               	bz	l2195
  7577                           
  7578                           ;lcd44780.c: 105: LATB |= 0b0100;
  7579  00272E  848A               	bsf	3978,2,c	;volatile
  7580                           
  7581                           ;lcd44780.c: 106: } else {
  7582  002730  D001               	goto	l2197
  7583  002732                     l2195:
  7584                           
  7585                           ;lcd44780.c: 107: LATB &= ~0b0100;
  7586  002732  948A               	bcf	3978,2,c	;volatile
  7587  002734                     l2197:
  7588                           
  7589                           ;lcd44780.c: 108: }
  7590                           ;lcd44780.c: 115: {
  7591                           ;lcd44780.c: 116: lcd_write4bits(value >> 4);
  7592  002734  3804               	swapf	lcd_send@value,w,c
  7593  002736  0B0F               	andlw	15
  7594  002738  EC55  F013         	call	_lcd_write4bits
  7595                           
  7596                           ;lcd44780.c: 117: lcd_write4bits(value);
  7597  00273C  5004               	movf	lcd_send@value,w,c
  7598  00273E  EC55  F013         	call	_lcd_write4bits
  7599  002742  0012               	return		;funcret
  7600  002744                     __end_of_lcd_send:
  7601                           	opt stack 0
  7602                           tblptru	equ	0xFF8
  7603                           tblptrh	equ	0xFF7
  7604                           tblptrl	equ	0xFF6
  7605                           tablat	equ	0xFF5
  7606                           prodh	equ	0xFF4
  7607                           prodl	equ	0xFF3
  7608                           intcon	equ	0xFF2
  7609                           intcon2	equ	0xFF1
  7610                           postinc0	equ	0xFEE
  7611                           wreg	equ	0xFE8
  7612                           postdec1	equ	0xFE5
  7613                           fsr1l	equ	0xFE1
  7614                           indf2	equ	0xFDF
  7615                           postinc2	equ	0xFDE
  7616                           postdec2	equ	0xFDD
  7617                           fsr2h	equ	0xFDA
  7618                           fsr2l	equ	0xFD9
  7619                           status	equ	0xFD8
  7620                           
  7621 ;; *************** function _lcd_write4bits *****************
  7622 ;; Defined at:
  7623 ;;		line 34 in file "../../../lib/lcd44780.c"
  7624 ;; Parameters:    Size  Location     Type
  7625 ;;  value           1    wreg     unsigned char 
  7626 ;; Auto vars:     Size  Location     Type
  7627 ;;  value           1    1[COMRAM] unsigned char 
  7628 ;; Return value:  Size  Location     Type
  7629 ;;		None               void
  7630 ;; Registers used:
  7631 ;;		wreg, status,2, status,0
  7632 ;; Tracked objects:
  7633 ;;		On entry : 0/0
  7634 ;;		On exit  : 0/0
  7635 ;;		Unchanged: 0/0
  7636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7637 ;;      Params:         0       0       0       0       0       0       0
  7638 ;;      Locals:         1       0       0       0       0       0       0
  7639 ;;      Temps:          0       0       0       0       0       0       0
  7640 ;;      Totals:         1       0       0       0       0       0       0
  7641 ;;Total ram usage:        1 bytes
  7642 ;; Hardware stack levels used:    1
  7643 ;; Hardware stack levels required when called:    1
  7644 ;; This function calls:
  7645 ;;		Nothing
  7646 ;; This function is called by:
  7647 ;;		_lcd_send
  7648 ;;		_lcd_begin
  7649 ;; This function uses a non-reentrant model
  7650 ;;
  7651                           
  7652                           	psect	text46
  7653  0026AA                     __ptext46:
  7654                           	opt stack 0
  7655  0026AA                     _lcd_write4bits:
  7656                           	opt stack 26
  7657                           
  7658                           ;incstack = 0
  7659                           ;lcd_write4bits@value stored from wreg
  7660  0026AA  6E02               	movwf	lcd_write4bits@value,c
  7661                           
  7662                           ;lcd44780.c: 39: LATB &= 0b00001111;
  7663  0026AC  0E0F               	movlw	15
  7664  0026AE  168A               	andwf	3978,f,c	;volatile
  7665                           
  7666                           ;lcd44780.c: 40: LATB |= value << 4;
  7667  0026B0  3802               	swapf	lcd_write4bits@value,w,c
  7668  0026B2  0BF0               	andlw	240
  7669  0026B4  128A               	iorwf	3978,f,c	;volatile
  7670                           
  7671                           ;lcd44780.c: 55: LATB |= 0b1000; _delay((unsigned long)((4)*(16000000/4000000.0))); LATB
      +                           &= ~0b1000; _delay((unsigned long)((100)*(16000000/4000000.0)));;
  7672  0026B6  868A               	bsf	3978,3,c	;volatile
  7673  0026B8  0E05               	movlw	5
  7674  0026BA                     u3457:
  7675  0026BA  2EE8               	decfsz	wreg,f,c
  7676  0026BC  D7FE               	goto	u3457
  7677  0026BE  F000               	nop	
  7678  0026C0  968A               	bcf	3978,3,c	;volatile
  7679  0026C2  0E85               	movlw	133
  7680  0026C4                     u3467:
  7681  0026C4  2EE8               	decfsz	wreg,f,c
  7682  0026C6  D7FE               	goto	u3467
  7683  0026C8  F000               	nop	
  7684  0026CA  0012               	return		;funcret
  7685  0026CC                     __end_of_lcd_write4bits:
  7686                           	opt stack 0
  7687                           tblptru	equ	0xFF8
  7688                           tblptrh	equ	0xFF7
  7689                           tblptrl	equ	0xFF6
  7690                           tablat	equ	0xFF5
  7691                           prodh	equ	0xFF4
  7692                           prodl	equ	0xFF3
  7693                           intcon	equ	0xFF2
  7694                           intcon2	equ	0xFF1
  7695                           postinc0	equ	0xFEE
  7696                           wreg	equ	0xFE8
  7697                           postdec1	equ	0xFE5
  7698                           fsr1l	equ	0xFE1
  7699                           indf2	equ	0xFDF
  7700                           postinc2	equ	0xFDE
  7701                           postdec2	equ	0xFDD
  7702                           fsr2h	equ	0xFDA
  7703                           fsr2l	equ	0xFD9
  7704                           status	equ	0xFD8
  7705                           
  7706 ;; *************** function _delay10ms *****************
  7707 ;; Defined at:
  7708 ;;		line 58 in file "../../../LC-meter.c"
  7709 ;; Parameters:    Size  Location     Type
  7710 ;;  period_10ms     1    wreg     unsigned char 
  7711 ;; Auto vars:     Size  Location     Type
  7712 ;;  period_10ms     1    0[COMRAM] unsigned char 
  7713 ;; Return value:  Size  Location     Type
  7714 ;;		None               void
  7715 ;; Registers used:
  7716 ;;		wreg
  7717 ;; Tracked objects:
  7718 ;;		On entry : 0/0
  7719 ;;		On exit  : 0/0
  7720 ;;		Unchanged: 0/0
  7721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7722 ;;      Params:         0       0       0       0       0       0       0
  7723 ;;      Locals:         0       0       0       0       0       0       0
  7724 ;;      Temps:          0       0       0       0       0       0       0
  7725 ;;      Totals:         0       0       0       0       0       0       0
  7726 ;;Total ram usage:        0 bytes
  7727 ;; Hardware stack levels used:    1
  7728 ;; Hardware stack levels required when called:    1
  7729 ;; This function calls:
  7730 ;;		Nothing
  7731 ;; This function is called by:
  7732 ;;		_main
  7733 ;;		_calibrate
  7734 ;; This function uses a non-reentrant model
  7735 ;;
  7736                           
  7737                           	psect	text47
  7738  00278C                     __ptext47:
  7739                           	opt stack 0
  7740  00278C                     _delay10ms:
  7741                           	opt stack 29
  7742                           
  7743                           ;incstack = 0
  7744  00278C  0012               	return		;funcret
  7745  00278E                     __end_of_delay10ms:
  7746                           	opt stack 0
  7747                           tblptru	equ	0xFF8
  7748                           tblptrh	equ	0xFF7
  7749                           tblptrl	equ	0xFF6
  7750                           tablat	equ	0xFF5
  7751                           prodh	equ	0xFF4
  7752                           prodl	equ	0xFF3
  7753                           intcon	equ	0xFF2
  7754                           intcon2	equ	0xFF1
  7755                           postinc0	equ	0xFEE
  7756                           wreg	equ	0xFE8
  7757                           postdec1	equ	0xFE5
  7758                           fsr1l	equ	0xFE1
  7759                           indf2	equ	0xFDF
  7760                           postinc2	equ	0xFDE
  7761                           postdec2	equ	0xFDD
  7762                           fsr2h	equ	0xFDA
  7763                           fsr2l	equ	0xFD9
  7764                           status	equ	0xFD8
  7765                           
  7766 ;; *************** function ___lwtofl *****************
  7767 ;; Defined at:
  7768 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtofl.c"
  7769 ;; Parameters:    Size  Location     Type
  7770 ;;  c               2   56[COMRAM] unsigned int 
  7771 ;; Auto vars:     Size  Location     Type
  7772 ;;		None
  7773 ;; Return value:  Size  Location     Type
  7774 ;;                  4   56[COMRAM] unsigned int 
  7775 ;; Registers used:
  7776 ;;		wreg, status,2, status,0, cstack
  7777 ;; Tracked objects:
  7778 ;;		On entry : 0/0
  7779 ;;		On exit  : 0/0
  7780 ;;		Unchanged: 0/0
  7781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7782 ;;      Params:         4       0       0       0       0       0       0
  7783 ;;      Locals:         0       0       0       0       0       0       0
  7784 ;;      Temps:          0       0       0       0       0       0       0
  7785 ;;      Totals:         4       0       0       0       0       0       0
  7786 ;;Total ram usage:        4 bytes
  7787 ;; Hardware stack levels used:    1
  7788 ;; Hardware stack levels required when called:    2
  7789 ;; This function calls:
  7790 ;;		___flpack
  7791 ;; This function is called by:
  7792 ;;		_calibrate
  7793 ;;		_measure_capacitance
  7794 ;;		_measure_inductance
  7795 ;; This function uses a non-reentrant model
  7796 ;;
  7797                           
  7798                           	psect	text48
  7799  00265C                     __ptext48:
  7800                           	opt stack 0
  7801  00265C                     ___lwtofl:
  7802                           	opt stack 27
  7803                           
  7804                           ;incstack = 0
  7805  00265C  C039  F002         	movff	___lwtofl@c,___flpack@arg
  7806  002660  C03A  F003         	movff	___lwtofl@c+1,___flpack@arg+1
  7807  002664  6A04               	clrf	___flpack@arg+2,c
  7808  002666  6A05               	clrf	___flpack@arg+3,c
  7809  002668  0E96               	movlw	150
  7810  00266A  6E06               	movwf	___flpack@exp,c
  7811  00266C  0E00               	movlw	0
  7812  00266E  6E07               	movwf	___flpack@sign,c
  7813  002670  EC7C  F00E         	call	___flpack	;wreg free
  7814  002674  C002  F039         	movff	?___flpack,?___lwtofl
  7815  002678  C003  F03A         	movff	?___flpack+1,?___lwtofl+1
  7816  00267C  C004  F03B         	movff	?___flpack+2,?___lwtofl+2
  7817  002680  C005  F03C         	movff	?___flpack+3,?___lwtofl+3
  7818  002684  0012               	return		;funcret
  7819  002686                     __end_of___lwtofl:
  7820                           	opt stack 0
  7821                           tblptru	equ	0xFF8
  7822                           tblptrh	equ	0xFF7
  7823                           tblptrl	equ	0xFF6
  7824                           tablat	equ	0xFF5
  7825                           prodh	equ	0xFF4
  7826                           prodl	equ	0xFF3
  7827                           intcon	equ	0xFF2
  7828                           intcon2	equ	0xFF1
  7829                           postinc0	equ	0xFEE
  7830                           wreg	equ	0xFE8
  7831                           postdec1	equ	0xFE5
  7832                           fsr1l	equ	0xFE1
  7833                           indf2	equ	0xFDF
  7834                           postinc2	equ	0xFDE
  7835                           postdec2	equ	0xFDD
  7836                           fsr2h	equ	0xFDA
  7837                           fsr2l	equ	0xFD9
  7838                           status	equ	0xFD8
  7839                           
  7840 ;; *************** function ___flpack *****************
  7841 ;; Defined at:
  7842 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\double.c"
  7843 ;; Parameters:    Size  Location     Type
  7844 ;;  arg             4    1[COMRAM] unsigned long 
  7845 ;;  exp             1    5[COMRAM] unsigned char 
  7846 ;;  sign            1    6[COMRAM] unsigned char 
  7847 ;; Auto vars:     Size  Location     Type
  7848 ;;		None
  7849 ;; Return value:  Size  Location     Type
  7850 ;;                  4    1[COMRAM] unsigned char 
  7851 ;; Registers used:
  7852 ;;		wreg, status,2, status,0
  7853 ;; Tracked objects:
  7854 ;;		On entry : 0/0
  7855 ;;		On exit  : 0/0
  7856 ;;		Unchanged: 0/0
  7857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7858 ;;      Params:         6       0       0       0       0       0       0
  7859 ;;      Locals:         0       0       0       0       0       0       0
  7860 ;;      Temps:          4       0       0       0       0       0       0
  7861 ;;      Totals:        10       0       0       0       0       0       0
  7862 ;;Total ram usage:       10 bytes
  7863 ;; Hardware stack levels used:    1
  7864 ;; Hardware stack levels required when called:    1
  7865 ;; This function calls:
  7866 ;;		Nothing
  7867 ;; This function is called by:
  7868 ;;		___altofl
  7869 ;;		___awtofl
  7870 ;;		___fladd
  7871 ;;		___fldiv
  7872 ;;		___flmul
  7873 ;;		___lltofl
  7874 ;;		___lwtofl
  7875 ;; This function uses a non-reentrant model
  7876 ;;
  7877                           
  7878                           	psect	text49
  7879  001CF8                     __ptext49:
  7880                           	opt stack 0
  7881  001CF8                     ___flpack:
  7882                           	opt stack 27
  7883                           
  7884                           ;incstack = 0
  7885  001CF8  5006               	movf	___flpack@exp,w,c
  7886  001CFA  E005               	bz	l656
  7887  001CFC  5002               	movf	___flpack@arg,w,c
  7888  001CFE  1003               	iorwf	___flpack@arg+1,w,c
  7889  001D00  1004               	iorwf	___flpack@arg+2,w,c
  7890  001D02  1005               	iorwf	___flpack@arg+3,w,c
  7891  001D04  E10B               	bnz	l3203
  7892  001D06                     l656:
  7893  001D06  6A02               	clrf	?___flpack,c
  7894  001D08  6A03               	clrf	?___flpack+1,c
  7895  001D0A  6A04               	clrf	?___flpack+2,c
  7896  001D0C  6A05               	clrf	?___flpack+3,c
  7897  001D0E  0012               	return	
  7898  001D10                     l3201:
  7899  001D10  2A06               	incf	___flpack@exp,f,c
  7900  001D12  90D8               	bcf	status,0,c
  7901  001D14  3205               	rrcf	___flpack@arg+3,f,c
  7902  001D16  3204               	rrcf	___flpack@arg+2,f,c
  7903  001D18  3203               	rrcf	___flpack@arg+1,f,c
  7904  001D1A  3202               	rrcf	___flpack@arg,f,c
  7905  001D1C                     l3203:
  7906  001D1C  6A08               	clrf	??___flpack& (0+255),c
  7907  001D1E  6A09               	clrf	(??___flpack+1)& (0+255),c
  7908  001D20  6A0A               	clrf	(??___flpack+2)& (0+255),c
  7909  001D22  0EFE               	movlw	254
  7910  001D24  1405               	andwf	___flpack@arg+3,w,c
  7911  001D26  6E0B               	movwf	(??___flpack+3)& (0+255),c
  7912  001D28  5008               	movf	??___flpack,w,c
  7913  001D2A  1009               	iorwf	??___flpack+1,w,c
  7914  001D2C  100A               	iorwf	??___flpack+2,w,c
  7915  001D2E  100B               	iorwf	??___flpack+3,w,c
  7916  001D30  E00C               	bz	l661
  7917  001D32  D7EE               	goto	l3201
  7918  001D34                     l3205:
  7919  001D34  2A06               	incf	___flpack@exp,f,c
  7920  001D36  2A02               	incf	___flpack@arg,f,c
  7921  001D38  0E00               	movlw	0
  7922  001D3A  2203               	addwfc	___flpack@arg+1,f,c
  7923  001D3C  2204               	addwfc	___flpack@arg+2,f,c
  7924  001D3E  2205               	addwfc	___flpack@arg+3,f,c
  7925  001D40  90D8               	bcf	status,0,c
  7926  001D42  3205               	rrcf	___flpack@arg+3,f,c
  7927  001D44  3204               	rrcf	___flpack@arg+2,f,c
  7928  001D46  3203               	rrcf	___flpack@arg+1,f,c
  7929  001D48  3202               	rrcf	___flpack@arg,f,c
  7930  001D4A                     l661:
  7931  001D4A  6A08               	clrf	??___flpack& (0+255),c
  7932  001D4C  6A09               	clrf	(??___flpack+1)& (0+255),c
  7933  001D4E  6A0A               	clrf	(??___flpack+2)& (0+255),c
  7934  001D50  5005               	movf	___flpack@arg+3,w,c
  7935  001D52  6E0B               	movwf	(??___flpack+3)& (0+255),c
  7936  001D54  5008               	movf	??___flpack,w,c
  7937  001D56  1009               	iorwf	??___flpack+1,w,c
  7938  001D58  100A               	iorwf	??___flpack+2,w,c
  7939  001D5A  100B               	iorwf	??___flpack+3,w,c
  7940  001D5C  E007               	bz	l3213
  7941  001D5E  D7EA               	goto	l3205
  7942  001D60                     l3211:
  7943  001D60  0606               	decf	___flpack@exp,f,c
  7944  001D62  90D8               	bcf	status,0,c
  7945  001D64  3602               	rlcf	___flpack@arg,f,c
  7946  001D66  3603               	rlcf	___flpack@arg+1,f,c
  7947  001D68  3604               	rlcf	___flpack@arg+2,f,c
  7948  001D6A  3605               	rlcf	___flpack@arg+3,f,c
  7949  001D6C                     l3213:
  7950  001D6C  BE04               	btfsc	___flpack@arg+2,7,c
  7951  001D6E  D003               	goto	l668
  7952  001D70  0E02               	movlw	2
  7953  001D72  6006               	cpfslt	___flpack@exp,c
  7954  001D74  D7F5               	goto	l3211
  7955  001D76                     l668:
  7956  001D76  B006               	btfsc	___flpack@exp,0,c
  7957  001D78  D002               	goto	l669
  7958  001D7A  0E7F               	movlw	127
  7959  001D7C  1604               	andwf	___flpack@arg+2,f,c
  7960  001D7E                     l669:
  7961  001D7E  90D8               	bcf	status,0,c
  7962  001D80  3206               	rrcf	___flpack@exp,f,c
  7963  001D82  C006  F008         	movff	___flpack@exp,??___flpack
  7964  001D86  6A09               	clrf	(??___flpack+1)& (0+255),c
  7965  001D88  6A0A               	clrf	(??___flpack+2)& (0+255),c
  7966  001D8A  6A0B               	clrf	(??___flpack+3)& (0+255),c
  7967  001D8C  C008  F00B         	movff	??___flpack,??___flpack+3
  7968  001D90  6A0A               	clrf	??___flpack+2,c
  7969  001D92  6A09               	clrf	??___flpack+1,c
  7970  001D94  6A08               	clrf	??___flpack,c
  7971  001D96  5008               	movf	??___flpack,w,c
  7972  001D98  1202               	iorwf	___flpack@arg,f,c
  7973  001D9A  5009               	movf	??___flpack+1,w,c
  7974  001D9C  1203               	iorwf	___flpack@arg+1,f,c
  7975  001D9E  500A               	movf	??___flpack+2,w,c
  7976  001DA0  1204               	iorwf	___flpack@arg+2,f,c
  7977  001DA2  500B               	movf	??___flpack+3,w,c
  7978  001DA4  1205               	iorwf	___flpack@arg+3,f,c
  7979  001DA6  5007               	movf	___flpack@sign,w,c
  7980  001DA8  A4D8               	btfss	status,2,c
  7981  001DAA  8E05               	bsf	___flpack@arg+3,7,c
  7982  001DAC  C002  F002         	movff	___flpack@arg,?___flpack
  7983  001DB0  C003  F003         	movff	___flpack@arg+1,?___flpack+1
  7984  001DB4  C004  F004         	movff	___flpack@arg+2,?___flpack+2
  7985  001DB8  C005  F005         	movff	___flpack@arg+3,?___flpack+3
  7986  001DBC  0012               	return		;funcret
  7987  001DBE                     __end_of___flpack:
  7988                           	opt stack 0
  7989                           tblptru	equ	0xFF8
  7990                           tblptrh	equ	0xFF7
  7991                           tblptrl	equ	0xFF6
  7992                           tablat	equ	0xFF5
  7993                           prodh	equ	0xFF4
  7994                           prodl	equ	0xFF3
  7995                           intcon	equ	0xFF2
  7996                           intcon2	equ	0xFF1
  7997                           postinc0	equ	0xFEE
  7998                           wreg	equ	0xFE8
  7999                           postdec1	equ	0xFE5
  8000                           fsr1l	equ	0xFE1
  8001                           indf2	equ	0xFDF
  8002                           postinc2	equ	0xFDE
  8003                           postdec2	equ	0xFDD
  8004                           fsr2h	equ	0xFDA
  8005                           fsr2l	equ	0xFD9
  8006                           status	equ	0xFD8
  8007                           
  8008 ;; *************** function _global_int *****************
  8009 ;; Defined at:
  8010 ;;		line 81 in file "../../../LC-meter.c"
  8011 ;; Parameters:    Size  Location     Type
  8012 ;;		None
  8013 ;; Auto vars:     Size  Location     Type
  8014 ;;		None
  8015 ;; Return value:  Size  Location     Type
  8016 ;;		None               void
  8017 ;; Registers used:
  8018 ;;		wreg, status,2, status,0
  8019 ;; Tracked objects:
  8020 ;;		On entry : 0/0
  8021 ;;		On exit  : 0/0
  8022 ;;		Unchanged: 0/0
  8023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8024 ;;      Params:         0       0       0       0       0       0       0
  8025 ;;      Locals:         0       0       0       0       0       0       0
  8026 ;;      Temps:          1       0       0       0       0       0       0
  8027 ;;      Totals:         1       0       0       0       0       0       0
  8028 ;;Total ram usage:        1 bytes
  8029 ;; Hardware stack levels used:    1
  8030 ;; This function calls:
  8031 ;;		Nothing
  8032 ;; This function is called by:
  8033 ;;		Interrupt level 2
  8034 ;; This function uses a non-reentrant model
  8035 ;;
  8036                           
  8037                           	psect	intcode
  8038  000008                     __pintcode:
  8039                           	opt stack 0
  8040  000008                     _global_int:
  8041                           	opt stack 24
  8042                           
  8043                           ;LC-meter.c: 85: if(PIR1 & 0x02) {
  8044                           
  8045                           ;incstack = 0
  8046  000008  A29E               	btfss	3998,1,c	;volatile
  8047  00000A  0011               	retfie		f
  8048                           
  8049                           ;LC-meter.c: 86: bres += 256;
  8050  00000C  0100               	movlb	0	; () banked
  8051  00000E  2BDF               	incf	(_bres+1)& (0+255),f,b	;volatile
  8052                           
  8053                           ;LC-meter.c: 87: if(bres >= ((unsigned long)((double)((16000000) / 4) / 1000))) {
  8054  000010  0EA0               	movlw	160
  8055  000012  5DDE               	subwf	_bres& (0+255),w,b	;volatile
  8056  000014  0E0F               	movlw	15
  8057  000016  59DF               	subwfb	(_bres+1)& (0+255),w,b	;volatile
  8058  000018  E324               	bnc	i2l3129
  8059                           
  8060                           ; BSR set to: 0
  8061                           ;LC-meter.c: 88: bres -= ((unsigned long)((double)((16000000) / 4) / 1000));
  8062  00001A  0EA0               	movlw	160
  8063  00001C  5FDE               	subwf	_bres& (0+255),f,b	;volatile
  8064  00001E  0E0F               	movlw	15
  8065  000020  5BDF               	subwfb	(_bres+1)& (0+255),f,b	;volatile
  8066                           
  8067                           ; BSR set to: 0
  8068                           ;LC-meter.c: 89: msecpart++;
  8069  000022  4BE0               	infsnz	_msecpart& (0+255),f,b	;volatile
  8070  000024  2BE1               	incf	(_msecpart+1)& (0+255),f,b	;volatile
  8071                           
  8072                           ; BSR set to: 0
  8073                           ;LC-meter.c: 90: LATC &= ~0b00000100; LATC |= (!!(msecpart >= 833)) << 2;;
  8074  000026  948B               	bcf	3979,2,c	;volatile
  8075  000028  0E41               	movlw	65
  8076  00002A  5DE0               	subwf	_msecpart& (0+255),w,b	;volatile
  8077  00002C  0E03               	movlw	3
  8078  00002E  59E1               	subwfb	(_msecpart+1)& (0+255),w,b	;volatile
  8079  000030  E303               	bnc	i2u248_40
  8080  000032  6A01               	clrf	??_global_int& (0+255),c
  8081  000034  2A01               	incf	??_global_int& (0+255),f,c
  8082  000036  D001               	goto	i2u249_48
  8083  000038                     i2u248_40:
  8084  000038  6A01               	clrf	??_global_int& (0+255),c
  8085  00003A                     i2u249_48:
  8086  00003A  90D8               	bcf	status,0,c
  8087  00003C  3601               	rlcf	??_global_int,f,c
  8088  00003E  90D8               	bcf	status,0,c
  8089  000040  3401               	rlcf	??_global_int,w,c
  8090  000042  128B               	iorwf	3979,f,c	;volatile
  8091                           
  8092                           ;LC-meter.c: 92: if(msecpart >= 1000) {
  8093  000044  0EE8               	movlw	232
  8094  000046  0100               	movlb	0	; () banked
  8095  000048  5DE0               	subwf	_msecpart& (0+255),w,b	;volatile
  8096  00004A  0E03               	movlw	3
  8097  00004C  59E1               	subwfb	(_msecpart+1)& (0+255),w,b	;volatile
  8098  00004E  E309               	bnc	i2l3129
  8099                           
  8100                           ; BSR set to: 0
  8101                           ;LC-meter.c: 94: seconds++;
  8102  000050  2BB8               	incf	_seconds& (0+255),f,b	;volatile
  8103  000052  0E00               	movlw	0
  8104  000054  23B9               	addwfc	(_seconds+1)& (0+255),f,b	;volatile
  8105  000056  23BA               	addwfc	(_seconds+2)& (0+255),f,b	;volatile
  8106  000058  23BB               	addwfc	(_seconds+3)& (0+255),f,b	;volatile
  8107                           
  8108                           ;LC-meter.c: 95: msecpart -= 1000;
  8109  00005A  0EE8               	movlw	232
  8110  00005C  5FE0               	subwf	_msecpart& (0+255),f,b	;volatile
  8111  00005E  0E03               	movlw	3
  8112  000060  5BE1               	subwfb	(_msecpart+1)& (0+255),f,b	;volatile
  8113  000062                     i2l3129:
  8114                           
  8115                           ; BSR set to: 0
  8116                           ;LC-meter.c: 96: }
  8117                           ;LC-meter.c: 97: }
  8118                           ;LC-meter.c: 99: PIR1 &= ~0b10;
  8119  000062  929E               	bcf	3998,1,c	;volatile
  8120  000064  0011               	retfie		f
  8121  000066                     __end_of_global_int:
  8122                           	opt stack 0
  8123                           tblptru	equ	0xFF8
  8124                           tblptrh	equ	0xFF7
  8125                           tblptrl	equ	0xFF6
  8126                           tablat	equ	0xFF5
  8127                           prodh	equ	0xFF4
  8128                           prodl	equ	0xFF3
  8129                           intcon	equ	0xFF2
  8130                           intcon2	equ	0xFF1
  8131                           postinc0	equ	0xFEE
  8132                           wreg	equ	0xFE8
  8133                           postdec1	equ	0xFE5
  8134                           fsr1l	equ	0xFE1
  8135                           indf2	equ	0xFDF
  8136                           postinc2	equ	0xFDE
  8137                           postdec2	equ	0xFDD
  8138                           fsr2h	equ	0xFDA
  8139                           fsr2l	equ	0xFD9
  8140                           status	equ	0xFD8
  8141                           tblptru	equ	0xFF8
  8142                           tblptrh	equ	0xFF7
  8143                           tblptrl	equ	0xFF6
  8144                           tablat	equ	0xFF5
  8145                           prodh	equ	0xFF4
  8146                           prodl	equ	0xFF3
  8147                           intcon	equ	0xFF2
  8148                           intcon2	equ	0xFF1
  8149                           postinc0	equ	0xFEE
  8150                           wreg	equ	0xFE8
  8151                           postdec1	equ	0xFE5
  8152                           fsr1l	equ	0xFE1
  8153                           indf2	equ	0xFDF
  8154                           postinc2	equ	0xFDE
  8155                           postdec2	equ	0xFDD
  8156                           fsr2h	equ	0xFDA
  8157                           fsr2l	equ	0xFD9
  8158                           status	equ	0xFD8
  8159                           
  8160                           	psect	rparam
  8161  0000                     tblptru	equ	0xFF8
  8162                           tblptrh	equ	0xFF7
  8163                           tblptrl	equ	0xFF6
  8164                           tablat	equ	0xFF5
  8165                           prodh	equ	0xFF4
  8166                           prodl	equ	0xFF3
  8167                           intcon	equ	0xFF2
  8168                           intcon2	equ	0xFF1
  8169                           postinc0	equ	0xFEE
  8170                           wreg	equ	0xFE8
  8171                           postdec1	equ	0xFE5
  8172                           fsr1l	equ	0xFE1
  8173                           indf2	equ	0xFDF
  8174                           postinc2	equ	0xFDE
  8175                           postdec2	equ	0xFDD
  8176                           fsr2h	equ	0xFDA
  8177                           fsr2l	equ	0xFD9
  8178                           status	equ	0xFD8


Data Sizes:
    Strings     103
    Constant    76
    Data        5
    BSS         47
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     93      94
    BANK0           160     76     135
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(1) Largest target is 40
		 -> exp@coeff(CODE[40]), log@coeff(CODE[36]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(BANK0[2]), 

    buffer_puts@x	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_19(CODE[6]), 

    lcd_puts@string	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_16(CODE[5]), STR_15(CODE[6]), STR_14(CODE[7]), STR_13(CODE[7]), 
		 -> STR_12(CODE[10]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[6]), 

    put_str@s	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_21(CODE[13]), STR_20(CODE[10]), STR_18(CODE[15]), STR_17(CODE[12]), 

    print_unit@units	PTR const unsigned char [8] size(1) Largest target is 3
		 -> STR_8(CODE[3]), STR_7(CODE[3]), STR_6(CODE[3]), STR_5(CODE[3]), 
		 -> STR_4(CODE[3]), STR_3(CODE[3]), STR_2(CODE[3]), STR_1(CODE[2]), 


Critical Paths under _main in COMRAM

    _print_indicator->_lcd_gotoxy
    _measure_inductance->___fltol
    _measure_capacitance->___fltol
    _print_unit->_lcd_gotoxy
    _print_reading->_format_number
    _lcd_puts->_lcd_send
    _lcd_begin->_lcd_command
    _format_double->___fltol
    _pow->___fltol
    _exp->___fltol
    _ldexp->_eval_poly
    _floor->___fltol
    ___fltol->_log10
    ___altofl->___fltol
    ___flsub->___fladd
    ___fldiv->___flpack
    ___lltofl->___flpack
    _log10->_log
    _log->_eval_poly
    _eval_poly->___fladd
    ___flmul->___fldiv
    ___fladd->___flmul
    ___awtofl->___flpack
    _calibrate->___lwtofl
    _put_str->_output_putch
    _output_putch->_lcd_send
    _measure_freq->_format_number
    _lcd_gotoxy->_lcd_command
    _format_number->___lwdiv
    _buffer_puts->_buffer_putch
    _lcd_clear->_lcd_command
    _lcd_command->_lcd_send
    _lcd_send->_lcd_write4bits
    ___lwtofl->_measure_freq

Critical Paths under _global_int in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_format_double
    _measure_inductance->___fltol
    _measure_capacitance->___fltol
    _format_double->_pow
    _pow->_exp
    _exp->_floor
    _floor->___altofl
    ___altofl->___fltol

Critical Paths under _global_int in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _global_int in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _global_int in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _global_int in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _global_int in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _global_int in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  237068
                                             75 BANK0      1     1      0
                          _calibrate
                          _delay10ms
                      _format_double
                          _lcd_begin
                          _lcd_clear
                         _lcd_gotoxy
                           _lcd_init
                           _lcd_puts
                _measure_capacitance
                 _measure_inductance
                    _print_indicator
                        _timer0_init
                        _timer2_init
 ---------------------------------------------------------------------------------
 (1) _timer2_init                                          4     4      0      90
                                              1 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _timer0_init                                         12    12      0     297
                                              1 COMRAM    12    12      0
 ---------------------------------------------------------------------------------
 (1) _print_indicator                                      1     1      0    2406
                                             11 COMRAM     1     1      0
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (1) _measure_inductance                                  55    55      0   36083
                                              8 BANK0     43    43      0
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___lwtofl
                         _lcd_gotoxy
                       _measure_freq
                      _print_reading
                         _print_unit
                            _put_str
 ---------------------------------------------------------------------------------
 (1) _measure_capacitance                                 19    19      0   35573
                                              8 BANK0     19    19      0
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___lwtofl
                         _lcd_gotoxy
                       _measure_freq
                      _print_reading
                         _print_unit
                            _put_str
 ---------------------------------------------------------------------------------
 (2) _print_unit                                           3     3      0    1578
                                             11 COMRAM     2     2      0
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (2) _print_reading                                        6     4      2    5822
                                             51 COMRAM     6     4      2
                            ___lwdiv
                            ___lwmod
                      _format_number
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (2) _lcd_puts                                             3     3      0     806
                                              4 COMRAM     3     3      0
                           _lcd_send
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             3     3      0      46
                                              1 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcd_begin                                            3     2      1     685
                                              5 COMRAM     3     2      1
                        _lcd_command
                     _lcd_write4bits
 ---------------------------------------------------------------------------------
 (1) _format_double                                       20    16      4  148692
                                             55 BANK0     20    16      4
                           ___awtofl
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                       _buffer_putch
                              _floor
                              _log10
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 21    13      8   83311
                                             34 BANK0     21    13      8
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___lltofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _exp                                                 11     7      4   44186
                                             23 BANK0     11     7      4
                           ___awtofl
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                8     2      6     354
                                             77 COMRAM     8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                               10     6      4    9912
                                             13 BANK0     10     6      4
                           ___altofl
                            ___fladd
                            ___fldiv (ARG)
                             ___flge
                            ___fltol
                              _frexp
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     680
                                             91 COMRAM     2     2      0
                                              0 BANK0      8     4      4
                            ___fldiv (ARG)
                              _log10 (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                               8     0      8    1594
                                              1 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (5) ___altofl                                             5     1      4    2446
                                              8 BANK0      5     1      4
                           ___flpack
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    5269
                                             65 COMRAM     8     0      8
                           ___awtofl (ARG)
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flneg                                              4     0      4     204
                                              1 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             15     7      8    4021
                                             11 COMRAM    15     7      8
                           ___flpack
 ---------------------------------------------------------------------------------
 (3) ___lltofl                                             4     0      4    2344
                                             11 COMRAM     4     0      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) _log10                                                8     4      4   33741
                                             83 COMRAM     8     4      4
                            ___flmul
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  6     2      4   26568
                                             77 COMRAM     6     2      4
                           ___awtofl
                            ___fladd
                            ___flmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     436
                                              1 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   11855
                                             65 COMRAM    12     5      7
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             28    20      8    6998
                                             26 COMRAM    27    19      8
                           ___awtofl (ARG)
                            ___fldiv (ARG)
                           ___flpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             12     4      8    4213
                                             53 COMRAM    12     4      8
                           ___awtofl (ARG)
                            ___flmul (ARG)
                           ___flpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtofl                                             9     5      4    2686
                                             11 COMRAM     5     1      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (1) _calibrate                                            1     1      0   10225
                                             60 COMRAM     1     1      0
                           ___lwtofl
                          _delay10ms
                          _lcd_clear
                         _lcd_gotoxy
                           _lcd_send
                       _measure_freq
                            _put_str
 ---------------------------------------------------------------------------------
 (2) _put_str                                              4     4      0     720
                                              5 COMRAM     4     4      0
                       _output_putch
 ---------------------------------------------------------------------------------
 (3) _output_putch                                         1     1      0     522
                                              4 COMRAM     1     1      0
                           _lcd_send
 ---------------------------------------------------------------------------------
 (2) _measure_freq                                         5     3      2    4168
                                             51 COMRAM     5     3      2
                        _buffer_init
                        _buffer_puts
                      _format_number
                         _lcd_gotoxy
                       _print_buffer
                     _timer0_read_ps
 ---------------------------------------------------------------------------------
 (3) _timer0_read_ps                                       7     5      2     114
                                              1 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (3) _print_buffer                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           6     5      1    1578
                                              5 COMRAM     6     5      1
                        _lcd_command
 ---------------------------------------------------------------------------------
 (3) _format_number                                       43    39      4    2337
                                              8 COMRAM    43    39      4
                            ___lwdiv
                            ___lwmod
                       _buffer_putch
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     451
                                              1 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     454
                                              1 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _buffer_puts                                          1     1      0      94
                                              4 COMRAM     1     1      0
                       _buffer_putch
 ---------------------------------------------------------------------------------
 (4) _buffer_putch                                         3     3      0      22
                                              1 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _buffer_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            1     1      0     522
                                              5 COMRAM     1     1      0
                        _lcd_command
 ---------------------------------------------------------------------------------
 (3) _lcd_command                                          1     1      0     522
                                              4 COMRAM     1     1      0
                           _lcd_send
 ---------------------------------------------------------------------------------
 (3) _lcd_send                                             2     1      1     500
                                              2 COMRAM     2     1      1
                     _lcd_write4bits
 ---------------------------------------------------------------------------------
 (4) _lcd_write4bits                                       1     1      0      22
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _delay10ms                                            1     1      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4    2669
                                             56 COMRAM     4     0      4
                           ___flpack
                       _measure_freq (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6    2248
                                              1 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _global_int                                           1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calibrate
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _buffer_init
         _buffer_puts
           _buffer_putch
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _print_buffer
         _timer0_read_ps
     _delay10ms
     _lcd_clear
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_send
       _lcd_write4bits
     _measure_freq
       _buffer_init
       _buffer_puts
         _buffer_putch
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _print_buffer
       _timer0_read_ps
     _put_str
       _output_putch
         _lcd_send
           _lcd_write4bits
   _delay10ms
   _format_double
     ___awtofl
       ___flpack
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     _buffer_putch
     _floor
       ___altofl
         ___flpack
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
       ___fladd
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___fldiv (ARG)
         ___flpack
       ___flge (ARG)
       ___fltol (ARG)
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       _frexp (ARG)
     _log10
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       _log
         ___awtofl
           ___flpack
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _frexp
     _pow
       ___flge
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       ___flneg
       ___fltol
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       ___lltofl
         ___flpack
       _exp
         ___awtofl
           ___flpack
         ___fldiv
           ___flpack
         ___flge
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         ___flsub
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _floor
           ___altofl
             ___flpack
             ___fltol (ARG)
               ___fldiv (ARG)
                 ___flpack
               _log10 (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _log
                   ___awtofl
                     ___flpack
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___fladd
                       ___awtofl (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                   _frexp
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flge (ARG)
           ___fltol (ARG)
             ___fldiv (ARG)
               ___flpack
             _log10 (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
           _frexp (ARG)
         _ldexp
           _eval_poly (ARG)
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
         _log (ARG)
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
       _log
         ___awtofl
           ___flpack
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _frexp
   _lcd_begin
     _lcd_command
       _lcd_send
         _lcd_write4bits
     _lcd_write4bits
   _lcd_clear
     _lcd_command
       _lcd_send
         _lcd_write4bits
   _lcd_gotoxy
     _lcd_command
       _lcd_send
         _lcd_write4bits
   _lcd_init
   _lcd_puts
     _lcd_send
       _lcd_write4bits
   _measure_capacitance
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _buffer_init
         _buffer_puts
           _buffer_putch
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _print_buffer
         _timer0_read_ps
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _measure_freq
       _buffer_init
       _buffer_puts
         _buffer_putch
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _print_buffer
       _timer0_read_ps
     _print_reading
       ___lwdiv
       ___lwmod
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _lcd_puts
         _lcd_send
           _lcd_write4bits
     _print_unit
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
     _put_str
       _output_putch
         _lcd_send
           _lcd_write4bits
   _measure_inductance
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _buffer_init
         _buffer_puts
           _buffer_putch
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _print_buffer
         _timer0_read_ps
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _measure_freq
       _buffer_init
       _buffer_puts
         _buffer_putch
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _print_buffer
       _timer0_read_ps
     _print_reading
       ___lwdiv
       ___lwmod
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _lcd_puts
         _lcd_send
           _lcd_write4bits
     _print_unit
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
     _put_str
       _output_putch
         _lcd_send
           _lcd_write4bits
   _print_indicator
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_puts
       _lcd_send
         _lcd_write4bits
   _timer0_init
   _timer2_init

 _global_int (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     4C      87       4       84.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5D      5E       1       98.9%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E5       9        0.0%
DATA                 0      0      E5      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sat Dec 28 06:59:53 2019

                ___altofl@sign 006C                   ___fldiv@cntr 0018                   ___fldiv@sign 001A  
                           _F1 00D6                             _F2 00AC                             _F3 00B0  
                           l93 2324                   __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000  
                 __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000                   ___flpack@arg 0002  
                  __CFG_LVP$ON 000000                   ___flpack@exp 0006                            l234 2642  
                          l236 2646                            l661 1D4A                            l717 22FA  
                          l726 128A                            l656 1D06                            l681 1626  
                          l755 189A                            l668 1D76                            l692 16BE  
                          l669 1D7E                            l677 15FE                            l758 1952  
                          l982 23A4                            l992 24B8                   __CFG_CPB$OFF 000000  
                 __CFG_CPD$OFF 000000                 lcd_begin@lines 0008                            _exp 0EDC  
                          _log 1744                            _pow 12C2                            wreg 000FE8  
           timer0_read_ps@prev 0006                   ___flmul@sign 0031         __end_of_lcd_write4bits 26CC  
                ___flpack@sign 0007                   ___fltol@exp1 005D                           l1024 1442  
                         l1050 10E8                           l3201 1D10                           l3211 1D60  
                         l3203 1D1C                           l2323 22E4                           l3213 1D6C  
                         l3205 1D34                           l3301 1716                           l2341 21AC  
                         l2601 1F8E                           l3313 1122                           l2329 2316  
                         l2505 2026                           l2195 2732                           l2531 2380  
                         l2603 1F94                           l3251 1638                           l3235 2412  
                         l2371 20BC                           l2355 2078                           l2197 2734  
                         l2605 1FA8                           l3245 1610                           l3309 110E  
                         l3421 1DE6                           l3405 244E                           l2381 20E0  
                         l2357 2082                           l2509 2032                           l3501 12F6  
                         l2527 2374                           l2551 249C                           l3415 250E  
                         l3271 1672                           l3423 1E5A                           l2383 20E4  
                         l2375 20CC                           l2529 237C                           l2633 2340  
                         l3273 167E                           l3265 1652                           l3433 1752  
                         l2481 26DA                           l3513 1370                           l2395 23D0  
                         l2643 26F0                           l2539 239A                           l2555 24AE  
                         l2547 2490                           l2731 25AA                           l3283 16AC  
                         l3275 1686                           l2387 20F8                           l2379 20D4  
                         l3355 18A4                           l3507 1310                           l3603 0C44  
                         l2549 2498                           l2565 255C                           l3293 16EA  
                         l3285 16B8                           l3277 168C                           l3437 1766  
                         l3373 1E9A                           l3453 0EF8                           l3517 139A  
                         l2573 258E                           l2647 26FE                           l2591 1F52  
                         l2735 25C0                           l3359 18C0                           l2495 200E  
                         l3463 0F5E                           l3551 15B2                           l3535 1486  
                         l3615 0E04                           l3623 0E72                           l2585 1F32  
                         l3289 16D4                           l3393 1EE6                           l3385 1EB8  
                         l3369 1E86                           l2489 1FDE                           l3553 15B8  
                         l2569 2576                           l3641 0722                           l3459 0F2C  
                         l2931 1B5E                           l2923 1B50                           l3619 0E3C  
                         l2835 2722                           l3485 10B4                           l3469 0F90  
                         l2861 2148                           l2853 2134                           l2845 2120  
                         l2871 2162                           l2863 214E                           l2855 213A  
                         l2847 2126                           l3751 1A44                           l3675 0B00  
                         l3683 0B6E                           l2883 2180                           l3739 1A22  
                         l3589 1CDE                           l2957 1BE4                           l2949 1BAC  
                         l3685 0B74                           l2885 2186                           l2877 2174  
                         l2869 215C                           l3749 1A40                           l3679 0B38  
                         ?_exp 0077                           ?_log 004E                           ?_pow 0082  
                         STR_2 06AB                           STR_3 06B1                           STR_4 06AE  
                         STR_5 069F                           STR_6 06A8                           STR_7 06A2  
                         STR_8 06A5                           STR_9 068A                           _LATB 000F8A  
                         _LATC 000F8B                           _CCal 00DA                           u2280 25F8  
                         u3090 1366                           u3307 1BBA                           u1660 20A0  
                         u3317 1BD2                           u3407 1AD0                           u3327 1C06  
                         _PIE1 000F9D                           u3417 1ADE                           u3337 1A68  
                         u1665 2096                           u2298 25FA                           u3427 1AEC  
                         u3347 1A7C                           u3267 1B64                           u3437 1AFA  
                         u3357 1A8A                           u3277 1B82                           u3447 2750  
                         u3367 1A98                           u3287 1B94                           u3457 26BA  
                         u3377 1AA6                           u3297 1BA0                           u3467 26C4  
                         u3387 1AB4                           u3397 1AC2                           u2880 18AE  
                         _PIR1 000F9E                           _TMR0 000FD6                           _TMR2 000FBC  
                         _bres 00DE                           _main 1964                           _mode 00E6  
                         fsr2h 000FDA                           fsr1l 000FE1                           indf2 000FDF  
                         fsr2l 000FD9                  __CFG_BORV$285 000000                           exp@x 0077  
                         log@x 004E                  __CFG_BOREN$ON 000000          __size_of_output_putch 000E  
                         pow@x 0082                           pow@y 0086                           prodh 000FF4  
                         prodl 000FF3     __end_of_measure_inductance 0BD8                           start 0066  
          timer0_read_ps@count 0007                 ??_buffer_putch 0002              _format_number$148 002F  
                 ___param_bank 000010                _timer0_init$103 0002                _timer0_init$104 0004  
              _timer0_init$105 0006                _timer0_init$106 0008                _timer0_init$107 000A  
                 buffer_puts@x 0005            lcd_write4bits@value 0002                   lcd_send@mode 0003  
                        ??_exp 005E                          ??_log 0052                          ??_pow 005E  
                ___fltol@sign1 005C                __end_of___fladd 1744                          ?_main 0001  
              __end_of___fldiv 1F22                __end_of___flneg 26EC                          STR_10 069B  
                        STR_11 068C                          STR_12 067F                          STR_20 0675  
                        STR_13 0689                          STR_21 065C                          STR_16 0696  
                        STR_17 0669                          STR_18 064D                          STR_19 0690  
              __end_of___flmul 12C2                __end_of___flsub 2484                __end_of___fltol 210A  
                        _T0CON 000FD5                          _T2CON 000FBA                __end_of___lwdiv 23AE  
              __end_of___lwmod 24C2               lcd_begin@dotsize 0006                          _PORTC 000F82  
                        _TRISA 000F92                          _TRISB 000F93                          _TRISC 000F94  
                __CFG_WRT0$OFF 000000                  __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000  
                __CFG_WRT3$OFF 000000                 __CFG_EBTR0$OFF 000000                 __CFG_EBTR1$OFF 000000  
               __CFG_EBTR2$OFF 000000                  ___awtofl@sign 0010                   main@new_mode 00AB  
               __CFG_EBTR3$OFF 000000                  __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000  
                __CFG_WRTD$OFF 000000                 __CFG_EBTRB$OFF 000000                          _log10 2274  
                        _blink 00C0                          _floor 1868                          _ldexp 1FCA  
                        _frexp 218C                   _output_putch 275C                ?_lcd_write4bits 0001  
                        _msecs 00B4                          tablat 000FF5                          pow@yi 0093  
              format_number@di 0032                          status 000FD8                __end_of_put_str 25D4  
               __CFG_FOSC$HSHP 000000                ??_print_reading 0036                    exp@exponent 007F  
                  ldexp@newexp 0052                __initialization 24C2                    log@exponent 0052  
                 __end_of_main 1A5E               format_double@num 0097                  lcd_gotoxy@col 0007  
                lcd_gotoxy@row 0006                  ?_measure_freq 0034         __size_of_format_double 0188  
                       ??_main 005E                  lcd_send@value 0004            format_double@weight 00A3  
                __activetblptr 000001         __size_of_format_number 00A8            lcd_init@fourbitmode 0002  
                       ?_log10 0054                         ?_floor 006D                         ?_ldexp 004E  
                       ?_frexp 0002               __end_of___altofl 2440               __end_of___flpack 1DBE  
             __end_of___awtofl 2538               __end_of___lltofl 2630                         i2l3129 0062  
               __CFG_WDTEN$OFF 000000                         _INTCON 000FF2               __end_of___lwtofl 2686  
             __end_of_lcd_init 265C           __size_of_lcd_command 000E               __end_of_lcd_send 2744  
                       ___flge 22CE               __end_of_lcd_puts 25A2                      ??___fladd 003E  
                    ??___fldiv 0014                      ??___flneg 0006                      ??___flmul 0023  
                    ??___flsub 004A                      ??___fltol 0064                   ?_timer0_init 0001  
         __size_of_buffer_init 000C                 ??_measure_freq 0036                      ??___lwdiv 0006  
                 ?_timer2_init 0001                      ??___lwmod 0006                         _buffer 00C5  
         __size_of_buffer_puts 0020                         clear_0 24C8                         log10@x 0054  
                       floor@i 0071                         floor@x 006D             timer2_init@ps_mode 0005  
                 __mediumconst 0000                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8           __end_of_buffer_putch 23F8               format_number@buf 000F  
             format_number@pad 000C        _measure_inductance$1023 0070        _measure_inductance$1024 0081  
      _measure_inductance$1025 0085        _measure_inductance$1026 0089        _measure_inductance$1027 0074  
      _measure_inductance$1028 0078        _measure_inductance$1029 007C                      ??_put_str 0006  
                   ___fladd@f1 0036                     ___fladd@f2 003A                     ___flge@ff1 0002  
                   ___flge@ff2 0006               __end_ofexp@coeff 0629                  _format_double 1454  
             __end_oflog@coeff 064D                     ___altofl@c 0068                     ___fldiv@f1 000C  
                   ___fldiv@f2 0010                     ___fldiv@f3 0014                     __accesstop 0060  
      __end_of__initialization 24F0                     ___flneg@f1 0002                  _format_number 1F22  
                   ___flmul@f1 001B                     ___flmul@f2 001F                   eval_poly@res 004A  
                ___rparam_used 000001                     ___flsub@f1 0042                     ___flsub@f2 0046  
                   ___fltol@f1 0060                     ___awtofl@c 000C         measure_capacitance@Cin 0077  
 __size_of_measure_capacitance 0304         measure_capacitance@var 0075          lcd_gotoxy@row_offsets 0008  
               __pcstackCOMRAM 0001             __size_of_calibrate 00D8                   __pidataBANK0 2784  
                   ___lltofl@c 000C             __size_of_delay10ms 0002                  __end_of_log10 22CE  
                __end_of_floor 1964                  __end_of_ldexp 206C                  __end_of_frexp 2204  
                   ___lwtofl@c 0039                 buffer_putch@ch 0004             __size_of_lcd_begin 00DA  
           __size_of_lcd_clear 0018                        ??_log10 0058                        ??_floor 005E  
                      ??_ldexp 0054                        ??_frexp 0007                     _log10$1030 0058  
                   __pbssBANK0 00AC                 ?_format_double 0097             __size_of_eval_poly 00B4  
               ?_format_number 0009                 print_unit@unit 0001       __size_of_print_indicator 001C  
                      ?___flge 0002                      ?___altofl 0068        __size_of_timer0_read_ps 004A  
                    ?___flpack 0002                      ?___awtofl 000C                      ?___lltofl 000C  
           _measure_inductance 06B6                      ?___lwtofl 0039               ??_lcd_write4bits 0002  
                      _INTCON2 000FF1                     _lcd_gotoxy 2538            ?_measure_inductance 0001  
            __end_of_calibrate 1CF8                      ?_lcd_init 0001                      ?_lcd_send 0003  
            __end_of_delay10ms 278E                      ?_lcd_puts 0001           __end_of_measure_freq 1B46  
                   _global_int 0008                     calibrate@i 003D                __CFG_PWRTEN$OFF 000000  
                      __Hparam 0000                        __Lparam 0000           ??_measure_inductance 005E  
            __end_of_lcd_begin 1C20              __end_of_lcd_clear 275C                __size_of___flge 004C  
                      ___fladd 15DC                        ___fldiv 1E72                        ___flneg 26CC  
                      ___flmul 10FA                        ___flsub 2440                        ___fltol 206C  
                      ___lwdiv 2364                        ___lwmod 2484                   __psmallconst 0600  
                   ??___altofl 005E                __CFG_STVREN$OFF 000000                     ??___flpack 0008  
                      __pcinit 24C2                     ??___awtofl 0010              __end_of_eval_poly 1E72  
                      __ramtop 0600           __size_of_timer0_init 0082                     ??___lltofl 0010  
                      __ptext0 1964                        __ptext1 25D4                        __ptext2 210A  
                      __ptext3 270C                        __ptext4 06B6                        __ptext5 0BD8  
                      __ptext6 2686                        __ptext7 2204                        __ptext8 2570  
                      __ptext9 2630           __size_of_timer2_init 002E          __size_of_buffer_putch 004A  
                   ??___lwtofl 003D                   __size_of_exp 021E                   __size_of_log 0124  
                 __size_of_pow 0192                        _seconds 00B8                ??_format_double 005E  
                      _put_str 25A2                     ??_lcd_init 0002                     ??_lcd_send 0004  
                   ??_lcd_puts 0005           end_of_initialization 24F0                ??_format_number 000D  
                      exp@sign 0081                      _LCD_lines 00C3                   _lcd_init$212 0003  
               lcd_puts@string 0007                        pow@sign 0092  measure_inductance@denominator 006C  
        __end_of_print_reading 2274                   _buffer_putch 23AE              format_number@base 000B  
                      postdec1 000FE5                        postdec2 000FDD                        postinc0 000FEE  
                      postinc2 000FDE              ??_print_indicator 000C                     _print_unit 2686  
                ?_print_buffer 0001            _measure_capacitance 0BD8                    ?_lcd_gotoxy 0006  
                  ___fldiv@exp 0019                    ?_global_int 0001                    ___flmul@exp 0030  
                ??_lcd_command 0005                  ??_buffer_init 0002           ?_measure_capacitance 0001  
                ??_buffer_puts 0005        measure_capacitance@unit 0074                 format_double@m 00A9  
       measure_inductance@unit 0080                 __end_of___flge 231A                 _timer0_read_ps 231A  
              lcd_gotoxy@F7646 00E2                     floor@expon 0075                 ??_print_buffer 0002  
               format_number@i 0033                 format_number@n 0009            start_initialization 24C2  
                   eval_poly@d 0046                     eval_poly@n 0047                     eval_poly@x 0042  
        __size_of_measure_freq 00E8                     ldexp@value 004E                    __end_of_exp 10FA  
                  __end_of_log 1868                    __end_of_pow 1454                   _LCD_function 005E  
           format_double@digit 00A7                     frexp@value 0002          ??_measure_capacitance 005E  
       __end_of_timer0_read_ps 2364                       ??___flge 000A            __size_of_lcd_gotoxy 0038  
          __end_of_lcd_command 2778                    __pdataBANK0 00E2                   _measure_freq 1A5E  
          __end_of_buffer_init 2784            __end_of_buffer_puts 270C            __size_of_global_int 005E  
     print_reading@measurement 0034              __size_of___altofl 0048              __size_of___flpack 00C6  
            __size_of___awtofl 003A                    ?_print_unit 0001              __size_of___lltofl 002E  
                  __pbssCOMRAM 005E              __size_of___lwtofl 002A                  __pcstackBANK0 0060  
                ?_output_putch 0001              measure_freq@count 0037               lcd_command@value 0005  
            __size_of_lcd_init 002C              __size_of_lcd_send 001C                      _calibrate 1C20  
            __size_of_lcd_puts 0032                      _delay10ms 278C                      __pnvBANK0 00DA  
             ___lwdiv@dividend 0002                ?_timer0_read_ps 0002                      __pintcode 0008  
                     ?___fladd 0036                       ?___fldiv 000C                       ?___flneg 0002  
                     ?___flmul 001B                       ?___flsub 0042                       ?___fltol 0060  
                     ?___lwdiv 0002                       ?___lwmod 0002                      _lcd_begin 1B46  
                    _lcd_clear 2744                    __smallconst 0600                      _eval_poly 1DBE  
                output_putch@c 0005                 ??_output_putch 0005               ___lwdiv@quotient 0006  
               __size_of_log10 005A                       ?_put_str 0001                 __size_of_floor 00FC  
               __size_of_ldexp 00A2                 __size_of_frexp 0078                     ?_calibrate 0001  
                   ?_delay10ms 0001                       _LCD_ctrl 00C2                       _LCD_mode 00C4  
              _print_indicator 270C                    _lcd_command 276A           __end_of_print_buffer 278C  
          __size_of_print_unit 0024                       i2u248_40 0038                       i2u249_48 003A  
                  _buffer_init 2778                    _buffer_puts 26EC    __size_of_measure_inductance 0522  
                ??_timer0_init 0002                  ??_timer2_init 0002                     ?_lcd_begin 0006  
                   ?_lcd_clear 0001                     ?_eval_poly 0042                      lcd_puts@i 0006  
                 ??_lcd_gotoxy 0007          measure_inductance@Lin 008F          measure_inductance@var 008D  
                    copy_data0 24E4          __end_of_format_double 15DC                   ??_global_int 0001  
         format_number@padchar 0031        __size_of_lcd_write4bits 0022          __end_of_format_number 1FCA  
                    frexp@eptr 0006                       __Hrparam 0000                       __Lrparam 0000  
                 __Lsmallconst 0600             __end_of_lcd_gotoxy 2570               __size_of___fladd 0168  
             __size_of___fldiv 00B0               __size_of___flneg 0020               __size_of___flmul 01C8  
             __size_of___flsub 0044               __size_of___fltol 009E                       ___altofl 23F8  
                     ___flpack 1CF8               __size_of___lwdiv 004A               __size_of___lwmod 003E  
                     ___awtofl 24FE                       ___lltofl 2602                  timer2_init@ps 0003  
                     ___lwtofl 265C             __end_of_global_int 0066            __end_of_timer0_init 218C  
                     _exp$1033 007B            __end_of_timer2_init 2602                ___lwdiv@divisor 0004  
              ___lwdiv@counter 0008         __size_of_print_reading 0070           timer0_init@prescaler 000C  
                     __ptext10 1B46                       __ptext11 1454                       __ptext20 26CC  
                     __ptext12 12C2                       __ptext21 1E72                       __ptext13 0EDC  
                     __ptext30 1C20                       __ptext22 2602                       __ptext14 1FCA  
                     __ptext31 25A2                       __ptext23 2274                       __ptext15 1868  
                     __ptext40 26EC                       __ptext32 275C                       __ptext24 1744  
                     __ptext16 206C                       __ptext41 23AE                       __ptext33 1A5E  
                     __ptext25 218C                       __ptext17 22CE                       __ptext42 2778  
                     __ptext34 231A                       __ptext26 1DBE                       __ptext18 23F8  
                     __ptext43 2744                       __ptext35 278A                       __ptext27 10FA  
                     __ptext19 2440                       __ptext44 276A                       __ptext36 2538  
                     __ptext28 15DC                       __ptext45 2728                       __ptext37 1F22  
                     __ptext29 24FE                       __ptext46 26AA                       __ptext38 2484  
                     __ptext47 278C                       __ptext39 2364                       __ptext48 265C  
                     __ptext49 1CF8                       _lcd_init 2630                       _lcd_send 2728  
      __end_of_print_indicator 2728                       _pow$1031 008A                       _pow$1032 008E  
                     _lcd_puts 2570               __size_of_put_str 0032                    ??_calibrate 003D  
                __size_of_main 00FA                    ??_delay10ms 0002                       _msecpart 00E0  
                     _timer1of 00BC           __end_of_output_putch 276A                    ??_lcd_begin 0007  
                  ??_lcd_clear 0006                       exp@coeff 0601          ___flmul@f3_as_product 0032  
                     log@coeff 0629    measure_inductance@numerator 0068                   ??_print_unit 000C  
                  ??_eval_poly 0049             _print_reading$1014 0036             _print_reading$1015 0038  
                     intlevel2 0000    __end_of_measure_capacitance 0EDC          __size_of_print_buffer 0002  
             ___lwmod@dividend 0002               ??_timer0_read_ps 0004             __end_of_print_unit 26AA  
                _print_reading 2204           delay10ms@period_10ms 0001                    _timer0_init 210A  
                  _timer2_init 25D4             _format_double$1018 009B             _format_double$1019 009F  
     _measure_capacitance$1020 0068       _measure_capacitance$1021 006C       _measure_capacitance$1022 0070  
                     put_str@i 0007                       put_str@s 0009             timer0_init@ps_mode 000D  
              ___lwmod@divisor 0004                ___lwmod@counter 0006                   _print_buffer 278A  
      print_indicator@indicate 000C               ?_print_indicator 0001                 _lcd_write4bits 26AA  
                 ___fladd@exp1 0041                   ___fladd@exp2 0040                   ___fladd@sign 003F  
                 ?_lcd_command 0001                 ?_print_reading 0034                   ?_buffer_init 0001  
                 ?_buffer_puts 0001                  ?_buffer_putch 0001  
