

Microchip Technology PIC18 PRO Macro Assembler V1.34 build -361300703 
                                                                                               Tue Sep 17 00:08:57 2019

Microchip Technology Omniscient Code Generator (PRO mode) build 201502162209
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    67                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    68                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    69                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    70                           	psect	pa_nodes,global,class=CODE,delta=1
    71  0000                     tblptrl	equ	0xFF6
    72                           tablat	equ	0xFF5
    73                           prodl	equ	0xFF3
    74                           intcon	equ	0xFF2
    75                           intcon2	equ	0xFF1
    76                           wreg	equ	0xFE8
    77                           indf2	equ	0xFDF
    78                           postinc2	equ	0xFDE
    79                           postdec2	equ	0xFDD
    80                           fsr2h	equ	0xFDA
    81                           fsr2l	equ	0xFD9
    82                           status	equ	0xFD8
    83                           
    84                           	psect	idataBANK0
    85  0029DA                     __pidataBANK0:
    86                           	opt stack 0
    87                           
    88                           ;initializer for lcd_gotoxy@F4120
    89  0029DA  00                 	db	0
    90  0029DB  40                 	db	64
    91  0029DC  14                 	db	20
    92  0029DD  54                 	db	84
    93                           tblptrl	equ	0xFF6
    94                           tablat	equ	0xFF5
    95                           prodl	equ	0xFF3
    96                           intcon	equ	0xFF2
    97                           intcon2	equ	0xFF1
    98                           wreg	equ	0xFE8
    99                           indf2	equ	0xFDF
   100                           postinc2	equ	0xFDE
   101                           postdec2	equ	0xFDD
   102                           fsr2h	equ	0xFDA
   103                           fsr2l	equ	0xFD9
   104                           status	equ	0xFD8
   105                           
   106                           	psect	smallconst
   107  000800                     __psmallconst:
   108                           	opt stack 0
   109  000800  00                 	db	0
   110  000801                     exp@coeff:
   111                           	opt stack 0
   112  000801  0000               	dw	0
   113  000803  3F80               	dw	16256
   114  000805  7218               	dw	29208
   115  000807  3F31               	dw	16177
   116  000809  FDF0               	dw	65008
   117  00080B  3E75               	dw	15989
   118  00080D  5847               	dw	22599
   119  00080F  3D63               	dw	15715
   120  000811  9558               	dw	38232
   121  000813  3C1D               	dw	15389
   122  000815  C482               	dw	50306
   123  000817  3AAE               	dw	15022
   124  000819  78A8               	dw	30888
   125  00081B  3921               	dw	14625
   126  00081D  93EF               	dw	37871
   127  00081F  3780               	dw	14208
   128  000821  92A0               	dw	37536
   129  000823  35A7               	dw	13735
   130  000825  5646               	dw	22086
   131  000827  3415               	dw	13333
   132  000829                     __end_ofexp@coeff:
   133                           	opt stack 0
   134  000829                     log@coeff:
   135                           	opt stack 0
   136  000829  0000               	dw	0
   137  00082B  0000               	dw	0
   138  00082D  FFC4               	dw	65476
   139  00082F  3F7F               	dw	16255
   140  000831  EF80               	dw	61312
   141  000833  BEFF               	dw	48895
   142  000835  E190               	dw	57744
   143  000837  3EA9               	dw	16041
   144  000839  82EC               	dw	33516
   145  00083B  BE76               	dw	48758
   146  00083D  AD82               	dw	44418
   147  00083F  3E2B               	dw	15915
   148  000841  3C0E               	dw	15374
   149  000843  BDC3               	dw	48579
   150  000845  D187               	dw	53639
   151  000847  3D13               	dw	15635
   152  000849  7841               	dw	30785
   153  00084B  BBD3               	dw	48083
   154  00084D                     __end_oflog@coeff:
   155                           	opt stack 0
   156  00084D                     STR_3:
   157  00084D  70                 	db	112	;'p'
   158  00084E  6C                 	db	108	;'l'
   159  00084F  65                 	db	101	;'e'
   160  000850  61                 	db	97	;'a'
   161  000851  73                 	db	115	;'s'
   162  000852  65                 	db	101	;'e'
   163  000853  20                 	db	32
   164  000854  77                 	db	119	;'w'
   165  000855  61                 	db	97	;'a'
   166  000856  69                 	db	105	;'i'
   167  000857  74                 	db	116	;'t'
   168  000858  2E                 	db	46
   169  000859  2E                 	db	46
   170  00085A  2E                 	db	46
   171  00085B  00                 	db	0
   172  00085C                     STR_15:
   173  00085C  49                 	db	73	;'I'
   174  00085D  6E                 	db	110	;'n'
   175  00085E  64                 	db	100	;'d'
   176  00085F  75                 	db	117	;'u'
   177  000860  63                 	db	99	;'c'
   178  000861  74                 	db	116	;'t'
   179  000862  69                 	db	105	;'i'
   180  000863  76                 	db	118	;'v'
   181  000864  69                 	db	105	;'i'
   182  000865  74                 	db	116	;'t'
   183  000866  79                 	db	121	;'y'
   184  000867  20                 	db	32
   185  000868  00                 	db	0
   186  000869                     STR_1:
   187  000869  43                 	db	67	;'C'
   188  00086A  61                 	db	97	;'a'
   189  00086B  6C                 	db	108	;'l'
   190  00086C  69                 	db	105	;'i'
   191  00086D  62                 	db	98	;'b'
   192  00086E  72                 	db	114	;'r'
   193  00086F  61                 	db	97	;'a'
   194  000870  74                 	db	116	;'t'
   195  000871  69                 	db	105	;'i'
   196  000872  6E                 	db	110	;'n'
   197  000873  67                 	db	103	;'g'
   198  000874  00                 	db	0
   199  000875                     STR_28:
   200  000875  4C                 	db	76	;'L'
   201  000876  43                 	db	67	;'C'
   202  000877  2D                 	db	45
   203  000878  6D                 	db	109	;'m'
   204  000879  65                 	db	101	;'e'
   205  00087A  74                 	db	116	;'t'
   206  00087B  65                 	db	101	;'e'
   207  00087C  72                 	db	114	;'r'
   208  00087D  20                 	db	32
   209  00087E  00                 	db	0
   210  00087F                     STR_6:
   211  00087F  43                 	db	67	;'C'
   212  000880  61                 	db	97	;'a'
   213  000881  70                 	db	112	;'p'
   214  000882  61                 	db	97	;'a'
   215  000883  63                 	db	99	;'c'
   216  000884  69                 	db	105	;'i'
   217  000885  74                 	db	116	;'t'
   218  000886  79                 	db	121	;'y'
   219  000887  20                 	db	32
   220  000888  00                 	db	0
   221  000889                     STR_11:
   222  000889  0D                 	db	13
   223  00088A  0A                 	db	10
   224  00088B  43                 	db	67	;'C'
   225  00088C  43                 	db	67	;'C'
   226  00088D  61                 	db	97	;'a'
   227  00088E  6C                 	db	108	;'l'
   228  00088F  3D                 	db	61	;'='
   229  000890  00                 	db	0
   230  000891                     STR_30:
   231  000891  20                 	db	32
   232  000892  20                 	db	32
   233  000893  20                 	db	32
   234  000894  20                 	db	32
   235  000895  20                 	db	32
   236  000896  20                 	db	32
   237  000897  00                 	db	0
   238  000898                     STR_29:
   239  000898  2E                 	db	46
   240  000899  2E                 	db	46
   241  00089A  2E                 	db	46
   242  00089B  0D                 	db	13
   243  00089C  0A                 	db	10
   244  00089D  00                 	db	0
   245  00089E                     STR_8:
   246  00089E  0D                 	db	13
   247  00089F  0A                 	db	10
   248  0008A0  46                 	db	70	;'F'
   249  0008A1  31                 	db	49	;'1'
   250  0008A2  3D                 	db	61	;'='
   251  0008A3  00                 	db	0
   252  0008A4                     STR_9:
   253  0008A4  0D                 	db	13
   254  0008A5  0A                 	db	10
   255  0008A6  46                 	db	70	;'F'
   256  0008A7  32                 	db	50	;'2'
   257  0008A8  3D                 	db	61	;'='
   258  0008A9  00                 	db	0
   259  0008AA                     STR_10:
   260  0008AA  0D                 	db	13
   261  0008AB  0A                 	db	10
   262  0008AC  46                 	db	70	;'F'
   263  0008AD  33                 	db	51	;'3'
   264  0008AE  3D                 	db	61	;'='
   265  0008AF  00                 	db	0
   266  0008B0                     STR_5:
   267  0008B0  46                 	db	70	;'F'
   268  0008B1  72                 	db	114	;'r'
   269  0008B2  65                 	db	101	;'e'
   270  0008B3  71                 	db	113	;'q'
   271  0008B4  3D                 	db	61	;'='
   272  0008B5  00                 	db	0
   273  0008B6  52                 	db	82	;'R'
   274  0008B7  43                 	db	67	;'C'
   275  0008B8  34                 	db	52	;'4'
   276  0008B9  3D                 	db	61	;'='
   277  0008BA  00                 	db	0
   278  0008BB                     STR_13:
   279  0008BB  43                 	db	67	;'C'
   280  0008BC  69                 	db	105	;'i'
   281  0008BD  6E                 	db	110	;'n'
   282  0008BE  3D                 	db	61	;'='
   283  0008BF  00                 	db	0
   284  0008C0                     STR_7:
   285  0008C0  76                 	db	118	;'v'
   286  0008C1  61                 	db	97	;'a'
   287  0008C2  72                 	db	114	;'r'
   288  0008C3  3D                 	db	61	;'='
   289  0008C4  00                 	db	0
   290  0008C5                     STR_26:
   291  0008C5  2D                 	db	45
   292  0008C6  2A                 	db	42
   293  0008C7  2D                 	db	45
   294  0008C8  00                 	db	0
   295  0008C9  6D                 	db	109	;'m'
   296  0008CA  46                 	db	70	;'F'
   297  0008CB  00                 	db	0
   298  0008CC  6E                 	db	110	;'n'
   299  0008CD  46                 	db	70	;'F'
   300  0008CE  00                 	db	0
   301  0008CF  70                 	db	112	;'p'
   302  0008D0  46                 	db	70	;'F'
   303  0008D1  00                 	db	0
   304  0008D2  75                 	db	117	;'u'
   305  0008D3  46                 	db	70	;'F'
   306  0008D4  00                 	db	0
   307  0008D5                     STR_17:
   308  0008D5  6D                 	db	109	;'m'
   309  0008D6  48                 	db	72	;'H'
   310  0008D7  00                 	db	0
   311  0008D8  6E                 	db	110	;'n'
   312  0008D9  48                 	db	72	;'H'
   313  0008DA  00                 	db	0
   314  0008DB  75                 	db	117	;'u'
   315  0008DC  48                 	db	72	;'H'
   316  0008DD  00                 	db	0
   317  0000                     
   318                           ; #config settings
   319  0008DE  00                 	db	0	; dummy byte at the end
   320  0000                     tblptrl	equ	0xFF6
   321                           tablat	equ	0xFF5
   322                           prodl	equ	0xFF3
   323                           intcon	equ	0xFF2
   324                           intcon2	equ	0xFF1
   325                           wreg	equ	0xFE8
   326                           indf2	equ	0xFDF
   327                           postinc2	equ	0xFDE
   328                           postdec2	equ	0xFDD
   329                           fsr2h	equ	0xFDA
   330                           fsr2l	equ	0xFD9
   331                           status	equ	0xFD8
   332                           
   333                           	psect	nvBANK0
   334  0000E9                     __pnvBANK0:
   335                           	opt stack 0
   336  0000E9                     _CCal:
   337                           	opt stack 0
   338  0000E9                     	ds	4
   339  0000ED                     _bres:
   340                           	opt stack 0
   341  0000ED                     	ds	2
   342  0000EF                     _msecpart:
   343                           	opt stack 0
   344  0000EF                     	ds	2
   345  0000                     _TMR0	set	4054
   346  0000                     _INTCON	set	4082
   347  0000                     _INTCON2	set	4081
   348  0000                     _LATB	set	3978
   349  0000                     _LATC	set	3979
   350  0000                     _PIE1	set	3997
   351  0000                     _PIR1	set	3998
   352  0000                     _PORTC	set	3970
   353  0000                     _RCREG	set	4014
   354  0000                     _SPBRG	set	4015
   355  0000                     _T0CON	set	4053
   356  0000                     _T2CON	set	4042
   357  0000                     _TMR2	set	4044
   358  0000                     _TRISA	set	3986
   359  0000                     _TRISB	set	3987
   360  0000                     _TRISC	set	3988
   361  0000                     _TXREG	set	4013
   362  0000                     _BRGH	set	32098
   363  0000                     _CREN	set	32092
   364  0000                     _GIE	set	32663
   365  0000                     _LATC7	set	31839
   366  0000                     _PEIE	set	32662
   367  0000                     _RCIF	set	31989
   368  0000                     _RX9	set	32094
   369  0000                     _SPEN	set	32095
   370  0000                     _SYNC	set	32100
   371  0000                     _TRISC6	set	31910
   372  0000                     _TX9	set	32102
   373  0000                     _TXEN	set	32101
   374  0000                     _TXIE	set	31980
   375  0000                     _TXIF	set	31988
   376                           tblptrl	equ	0xFF6
   377                           tablat	equ	0xFF5
   378                           prodl	equ	0xFF3
   379                           intcon	equ	0xFF2
   380                           intcon2	equ	0xFF1
   381                           wreg	equ	0xFE8
   382                           indf2	equ	0xFDF
   383                           postinc2	equ	0xFDE
   384                           postdec2	equ	0xFDD
   385                           fsr2h	equ	0xFDA
   386                           fsr2l	equ	0xFD9
   387                           status	equ	0xFD8
   388                           
   389                           	psect	cinit
   390  0024AE                     __pcinit:
   391                           	opt stack 0
   392  0024AE                     start_initialization:
   393                           	opt stack 0
   394  0024AE                     __initialization:
   395                           	opt stack 0
   396                           
   397                           ; Clear objects allocated to BANK1 (32 bytes)
   398  0024AE  EE01  F000         	lfsr	0,__pbssBANK1
   399  0024B2  0E20               	movlw	32
   400  0024B4                     clear_0:
   401  0024B4  6AEE               	clrf	postinc0,c
   402  0024B6  06E8               	decf	wreg,f,c
   403  0024B8  E1FD               	bnz	clear_0
   404                           
   405                           ; Clear objects allocated to BANK0 (49 bytes)
   406  0024BA  EE00  F0B8         	lfsr	0,__pbssBANK0
   407  0024BE  0E31               	movlw	49
   408  0024C0                     clear_1:
   409  0024C0  6AEE               	clrf	postinc0,c
   410  0024C2  06E8               	decf	wreg,f,c
   411  0024C4  E1FD               	bnz	clear_1
   412                           
   413                           ; Clear objects allocated to COMRAM (3 bytes)
   414  0024C6  6A5C               	clrf	(__pbssCOMRAM+2)& (0+255),c
   415  0024C8  6A5B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   416  0024CA  6A5A               	clrf	__pbssCOMRAM& (0+255),c
   417                           
   418                           ; Initialize objects allocated to BANK0 (4 bytes)
   419                           ; load TBLPTR registers with __pidataBANK0
   420  0024CC  0EDA               	movlw	low __pidataBANK0
   421  0024CE  6EF6               	movwf	tblptrl,c
   422  0024D0  0E29               	movlw	high __pidataBANK0
   423  0024D2  6EF7               	movwf	tblptrh,c
   424  0024D4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   425  0024D6  6EF8               	movwf	tblptru,c
   426  0024D8  EE00  F0F1         	lfsr	0,__pdataBANK0
   427  0024DC  EE10 F004          	lfsr	1,4
   428  0024E0                     copy_data0:
   429  0024E0  0009               	tblrd		*+
   430  0024E2  CFF5 FFEE          	movff	tablat,postinc0
   431  0024E6  50E5               	movf	postdec1,w,c
   432  0024E8  50E1               	movf	fsr1l,w,c
   433  0024EA  E1FA               	bnz	copy_data0
   434  0024EC                     end_of_initialization:
   435                           	opt stack 0
   436  0024EC                     __end_of__initialization:
   437                           	opt stack 0
   438  0024EC  0E00               	movlw	low (__Lsmallconst shr (0+16))
   439  0024EE  6EF8               	movwf	tblptru,c
   440  0024F0  0E08               	movlw	high __Lsmallconst
   441  0024F2  6EF7               	movwf	tblptrh,c
   442  0024F4  0100               	movlb	0
   443  0024F6  EF71  F00D         	goto	_main	;jump to C main() function
   444                           tblptru	equ	0xFF8
   445                           tblptrh	equ	0xFF7
   446                           tblptrl	equ	0xFF6
   447                           tablat	equ	0xFF5
   448                           prodl	equ	0xFF3
   449                           intcon	equ	0xFF2
   450                           intcon2	equ	0xFF1
   451                           postinc0	equ	0xFEE
   452                           wreg	equ	0xFE8
   453                           postdec1	equ	0xFE5
   454                           fsr1l	equ	0xFE1
   455                           indf2	equ	0xFDF
   456                           postinc2	equ	0xFDE
   457                           postdec2	equ	0xFDD
   458                           fsr2h	equ	0xFDA
   459                           fsr2l	equ	0xFD9
   460                           status	equ	0xFD8
   461                           
   462                           	psect	bssCOMRAM
   463  00005A                     __pbssCOMRAM:
   464                           	opt stack 0
   465  00005A                     _LCD_function:
   466                           	opt stack 0
   467  00005A                     	ds	1
   468  00005B                     _txiptr:
   469                           	opt stack 0
   470  00005B                     	ds	1
   471  00005C                     _txoptr:
   472                           	opt stack 0
   473  00005C                     	ds	1
   474                           tblptru	equ	0xFF8
   475                           tblptrh	equ	0xFF7
   476                           tblptrl	equ	0xFF6
   477                           tablat	equ	0xFF5
   478                           prodl	equ	0xFF3
   479                           intcon	equ	0xFF2
   480                           intcon2	equ	0xFF1
   481                           postinc0	equ	0xFEE
   482                           wreg	equ	0xFE8
   483                           postdec1	equ	0xFE5
   484                           fsr1l	equ	0xFE1
   485                           indf2	equ	0xFDF
   486                           postinc2	equ	0xFDE
   487                           postdec2	equ	0xFDD
   488                           fsr2h	equ	0xFDA
   489                           fsr2l	equ	0xFD9
   490                           status	equ	0xFD8
   491                           
   492                           	psect	bssBANK0
   493  0000B8                     __pbssBANK0:
   494                           	opt stack 0
   495  0000B8                     _F2:
   496                           	opt stack 0
   497  0000B8                     	ds	4
   498  0000BC                     _F3:
   499                           	opt stack 0
   500  0000BC                     	ds	4
   501  0000C0                     _msecs:
   502                           	opt stack 0
   503  0000C0                     	ds	4
   504  0000C4                     _seconds:
   505                           	opt stack 0
   506  0000C4                     	ds	4
   507  0000C8                     _timer1of:
   508                           	opt stack 0
   509  0000C8                     	ds	4
   510  0000CC                     _blink:
   511                           	opt stack 0
   512  0000CC                     	ds	2
   513  0000CE                     _LCD_ctrl:
   514                           	opt stack 0
   515  0000CE                     	ds	1
   516  0000CF                     _LCD_lines:
   517                           	opt stack 0
   518  0000CF                     	ds	1
   519  0000D0                     _LCD_mode:
   520                           	opt stack 0
   521  0000D0                     	ds	1
   522  0000D1                     _rxiptr:
   523                           	opt stack 0
   524  0000D1                     	ds	1
   525  0000D2                     _rxoptr:
   526                           	opt stack 0
   527  0000D2                     	ds	1
   528  0000D3                     _ser_tmp:
   529                           	opt stack 0
   530  0000D3                     	ds	1
   531  0000D4                     _buffer:
   532                           	opt stack 0
   533  0000D4                     	ds	17
   534  0000E5                     _F1:
   535                           	opt stack 0
   536  0000E5                     	ds	4
   537                           tblptru	equ	0xFF8
   538                           tblptrh	equ	0xFF7
   539                           tblptrl	equ	0xFF6
   540                           tablat	equ	0xFF5
   541                           prodl	equ	0xFF3
   542                           intcon	equ	0xFF2
   543                           intcon2	equ	0xFF1
   544                           postinc0	equ	0xFEE
   545                           wreg	equ	0xFE8
   546                           postdec1	equ	0xFE5
   547                           fsr1l	equ	0xFE1
   548                           indf2	equ	0xFDF
   549                           postinc2	equ	0xFDE
   550                           postdec2	equ	0xFDD
   551                           fsr2h	equ	0xFDA
   552                           fsr2l	equ	0xFD9
   553                           status	equ	0xFD8
   554                           
   555                           	psect	dataBANK0
   556  0000F1                     __pdataBANK0:
   557                           	opt stack 0
   558  0000F1                     lcd_gotoxy@F4120:
   559                           	opt stack 0
   560  0000F1                     	ds	4
   561                           tblptru	equ	0xFF8
   562                           tblptrh	equ	0xFF7
   563                           tblptrl	equ	0xFF6
   564                           tablat	equ	0xFF5
   565                           prodl	equ	0xFF3
   566                           intcon	equ	0xFF2
   567                           intcon2	equ	0xFF1
   568                           postinc0	equ	0xFEE
   569                           wreg	equ	0xFE8
   570                           postdec1	equ	0xFE5
   571                           fsr1l	equ	0xFE1
   572                           indf2	equ	0xFDF
   573                           postinc2	equ	0xFDE
   574                           postdec2	equ	0xFDD
   575                           fsr2h	equ	0xFDA
   576                           fsr2l	equ	0xFD9
   577                           status	equ	0xFD8
   578                           
   579                           	psect	bssBANK1
   580  000100                     __pbssBANK1:
   581                           	opt stack 0
   582  000100                     _rxfifo:
   583                           	opt stack 0
   584  000100                     	ds	16
   585  000110                     _txfifo:
   586                           	opt stack 0
   587  000110                     	ds	16
   588                           tblptru	equ	0xFF8
   589                           tblptrh	equ	0xFF7
   590                           tblptrl	equ	0xFF6
   591                           tablat	equ	0xFF5
   592                           prodl	equ	0xFF3
   593                           intcon	equ	0xFF2
   594                           intcon2	equ	0xFF1
   595                           postinc0	equ	0xFEE
   596                           wreg	equ	0xFE8
   597                           postdec1	equ	0xFE5
   598                           fsr1l	equ	0xFE1
   599                           indf2	equ	0xFDF
   600                           postinc2	equ	0xFDE
   601                           postdec2	equ	0xFDD
   602                           fsr2h	equ	0xFDA
   603                           fsr2l	equ	0xFD9
   604                           status	equ	0xFD8
   605                           
   606                           	psect	cstackBANK0
   607  000060                     __pcstackBANK0:
   608                           	opt stack 0
   609  000060                     ___fltol@sign1:
   610                           	opt stack 0
   611                           
   612                           ; 1 bytes @ 0x0
   613  000060                     	ds	1
   614  000061                     ___fltol@exp1:
   615                           	opt stack 0
   616                           
   617                           ; 1 bytes @ 0x1
   618  000061                     	ds	1
   619  000062                     ?___altofl:
   620                           	opt stack 0
   621  000062                     measure_inductance@numerator:
   622                           	opt stack 0
   623  000062                     ___altofl@c:
   624                           	opt stack 0
   625                           
   626                           ; 4 bytes @ 0x2
   627  000062                     	ds	4
   628  000066                     ___altofl@sign:
   629                           	opt stack 0
   630  000066                     measure_inductance@denominator:
   631                           	opt stack 0
   632                           
   633                           ; 4 bytes @ 0x6
   634  000066                     	ds	1
   635  000067                     ?_floor:
   636                           	opt stack 0
   637  000067                     floor@x:
   638                           	opt stack 0
   639                           
   640                           ; 4 bytes @ 0x7
   641  000067                     	ds	3
   642  00006A                     _measure_inductance$1097:
   643                           	opt stack 0
   644                           
   645                           ; 4 bytes @ 0xA
   646  00006A                     	ds	1
   647  00006B                     floor@i:
   648                           	opt stack 0
   649                           
   650                           ; 4 bytes @ 0xB
   651  00006B                     	ds	3
   652  00006E                     _measure_inductance$1101:
   653                           	opt stack 0
   654                           
   655                           ; 4 bytes @ 0xE
   656  00006E                     	ds	1
   657  00006F                     floor@expon:
   658                           	opt stack 0
   659                           
   660                           ; 2 bytes @ 0xF
   661  00006F                     	ds	2
   662  000071                     ?_exp:
   663                           	opt stack 0
   664  000071                     exp@x:
   665                           	opt stack 0
   666                           
   667                           ; 4 bytes @ 0x11
   668  000071                     	ds	1
   669  000072                     _measure_inductance$1102:
   670                           	opt stack 0
   671                           
   672                           ; 4 bytes @ 0x12
   673  000072                     	ds	3
   674  000075                     _exp$1109:
   675                           	opt stack 0
   676                           
   677                           ; 4 bytes @ 0x15
   678  000075                     	ds	1
   679  000076                     _measure_inductance$1103:
   680                           	opt stack 0
   681                           
   682                           ; 4 bytes @ 0x16
   683  000076                     	ds	3
   684  000079                     exp@exponent:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0x19
   688  000079                     	ds	1
   689  00007A                     measure_inductance@unit:
   690                           	opt stack 0
   691                           
   692                           ; 1 bytes @ 0x1A
   693  00007A                     	ds	1
   694  00007B                     exp@sign:
   695                           	opt stack 0
   696  00007B                     _measure_inductance$1098:
   697                           	opt stack 0
   698                           
   699                           ; 4 bytes @ 0x1B
   700  00007B                     	ds	1
   701  00007C                     ?_pow:
   702                           	opt stack 0
   703  00007C                     pow@x:
   704                           	opt stack 0
   705                           
   706                           ; 4 bytes @ 0x1C
   707  00007C                     	ds	3
   708  00007F                     _measure_inductance$1099:
   709                           	opt stack 0
   710                           
   711                           ; 4 bytes @ 0x1F
   712  00007F                     	ds	1
   713  000080                     pow@y:
   714                           	opt stack 0
   715                           
   716                           ; 4 bytes @ 0x20
   717  000080                     	ds	3
   718  000083                     _measure_inductance$1100:
   719                           	opt stack 0
   720                           
   721                           ; 4 bytes @ 0x23
   722  000083                     	ds	1
   723  000084                     _pow$1107:
   724                           	opt stack 0
   725                           
   726                           ; 4 bytes @ 0x24
   727  000084                     	ds	3
   728  000087                     measure_inductance@var:
   729                           	opt stack 0
   730                           
   731                           ; 2 bytes @ 0x27
   732  000087                     	ds	1
   733  000088                     _pow$1108:
   734                           	opt stack 0
   735                           
   736                           ; 4 bytes @ 0x28
   737  000088                     	ds	1
   738  000089                     measure_inductance@Lin:
   739                           	opt stack 0
   740                           
   741                           ; 4 bytes @ 0x29
   742  000089                     	ds	3
   743  00008C                     pow@sign:
   744                           	opt stack 0
   745                           
   746                           ; 1 bytes @ 0x2C
   747  00008C                     	ds	1
   748  00008D                     pow@yi:
   749                           	opt stack 0
   750                           
   751                           ; 4 bytes @ 0x2D
   752  00008D                     	ds	4
   753  000091                     format_double@num:
   754                           	opt stack 0
   755                           
   756                           ; 4 bytes @ 0x31
   757  000091                     	ds	4
   758  000095                     _format_double$1092:
   759                           	opt stack 0
   760                           
   761                           ; 4 bytes @ 0x35
   762  000095                     	ds	4
   763  000099                     _format_double$1093:
   764                           	opt stack 0
   765                           
   766                           ; 4 bytes @ 0x39
   767  000099                     	ds	4
   768  00009D                     format_double@weight:
   769                           	opt stack 0
   770                           
   771                           ; 4 bytes @ 0x3D
   772  00009D                     	ds	4
   773  0000A1                     format_double@digit:
   774                           	opt stack 0
   775                           
   776                           ; 2 bytes @ 0x41
   777  0000A1                     	ds	2
   778  0000A3                     format_double@m:
   779                           	opt stack 0
   780                           
   781                           ; 2 bytes @ 0x43
   782  0000A3                     	ds	2
   783  0000A5                     _measure_capacitance$1094:
   784                           	opt stack 0
   785                           
   786                           ; 4 bytes @ 0x45
   787  0000A5                     	ds	4
   788  0000A9                     _measure_capacitance$1095:
   789                           	opt stack 0
   790                           
   791                           ; 4 bytes @ 0x49
   792  0000A9                     	ds	4
   793  0000AD                     _measure_capacitance$1096:
   794                           	opt stack 0
   795                           
   796                           ; 4 bytes @ 0x4D
   797  0000AD                     	ds	4
   798  0000B1                     measure_capacitance@unit:
   799                           	opt stack 0
   800                           
   801                           ; 1 bytes @ 0x51
   802  0000B1                     	ds	1
   803  0000B2                     measure_capacitance@var:
   804                           	opt stack 0
   805                           
   806                           ; 2 bytes @ 0x52
   807  0000B2                     	ds	2
   808  0000B4                     measure_capacitance@Cin:
   809                           	opt stack 0
   810                           
   811                           ; 4 bytes @ 0x54
   812  0000B4                     	ds	4
   813                           tblptru	equ	0xFF8
   814                           tblptrh	equ	0xFF7
   815                           tblptrl	equ	0xFF6
   816                           tablat	equ	0xFF5
   817                           prodl	equ	0xFF3
   818                           intcon	equ	0xFF2
   819                           intcon2	equ	0xFF1
   820                           postinc0	equ	0xFEE
   821                           wreg	equ	0xFE8
   822                           postdec1	equ	0xFE5
   823                           fsr1l	equ	0xFE1
   824                           indf2	equ	0xFDF
   825                           postinc2	equ	0xFDE
   826                           postdec2	equ	0xFDD
   827                           fsr2h	equ	0xFDA
   828                           fsr2l	equ	0xFD9
   829                           status	equ	0xFD8
   830                           
   831                           	psect	cstackCOMRAM
   832  000001                     __pcstackCOMRAM:
   833                           	opt stack 0
   834  000001                     ??_global_int:
   835  000001                     
   836                           ; 1 bytes @ 0x0
   837  000001                     	ds	3
   838  000004                     ??_buffer_putch:
   839  000004                     ??_timer2_init:
   840  000004                     ?_timer0_read_ps:
   841                           	opt stack 0
   842  000004                     ?___lwdiv:
   843                           	opt stack 0
   844  000004                     ?___lwmod:
   845                           	opt stack 0
   846  000004                     ?___flpack:
   847                           	opt stack 0
   848  000004                     ?_frexp:
   849                           	opt stack 0
   850  000004                     ?___flneg:
   851                           	opt stack 0
   852  000004                     lcd_write4bits@value:
   853                           	opt stack 0
   854  000004                     lcd_init@fourbitmode:
   855                           	opt stack 0
   856  000004                     ser_putch@c:
   857                           	opt stack 0
   858  000004                     _timer0_init$152:
   859                           	opt stack 0
   860  000004                     ___lwdiv@dividend:
   861                           	opt stack 0
   862  000004                     ___lwmod@dividend:
   863                           	opt stack 0
   864  000004                     ___flpack@arg:
   865                           	opt stack 0
   866  000004                     ___flge@ff1:
   867                           	opt stack 0
   868  000004                     ___flneg@f1:
   869                           	opt stack 0
   870  000004                     frexp@value:
   871                           	opt stack 0
   872                           
   873                           ; 4 bytes @ 0x3
   874  000004                     	ds	1
   875  000005                     lcd_send@mode:
   876                           	opt stack 0
   877  000005                     timer2_init@ps:
   878                           	opt stack 0
   879  000005                     ser_puts@s:
   880                           	opt stack 0
   881  000005                     _lcd_init$134:
   882                           	opt stack 0
   883                           
   884                           ; 2 bytes @ 0x4
   885  000005                     	ds	1
   886  000006                     ??_timer0_read_ps:
   887  000006                     buffer_putch@ch:
   888                           	opt stack 0
   889  000006                     lcd_send@value:
   890                           	opt stack 0
   891  000006                     _timer0_init$153:
   892                           	opt stack 0
   893  000006                     ___lwdiv@divisor:
   894                           	opt stack 0
   895  000006                     ___lwmod@divisor:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x5
   899  000006                     	ds	1
   900  000007                     ??_lcd_puts:
   901  000007                     lcd_command@value:
   902                           	opt stack 0
   903  000007                     timer2_init@ps_mode:
   904                           	opt stack 0
   905  000007                     output_putch@c:
   906                           	opt stack 0
   907                           
   908                           ; 1 bytes @ 0x6
   909  000007                     	ds	1
   910  000008                     ??_put_str:
   911  000008                     ??_lcd_clear:
   912  000008                     lcd_gotoxy@row:
   913                           	opt stack 0
   914  000008                     lcd_puts@i:
   915                           	opt stack 0
   916  000008                     lcd_begin@dotsize:
   917                           	opt stack 0
   918  000008                     timer0_read_ps@prev:
   919                           	opt stack 0
   920  000008                     ___flpack@exp:
   921                           	opt stack 0
   922  000008                     frexp@eptr:
   923                           	opt stack 0
   924  000008                     ___lwmod@counter:
   925                           	opt stack 0
   926  000008                     _timer0_init$154:
   927                           	opt stack 0
   928  000008                     ___lwdiv@quotient:
   929                           	opt stack 0
   930  000008                     ___flge@ff2:
   931                           	opt stack 0
   932                           
   933                           ; 4 bytes @ 0x7
   934  000008                     	ds	1
   935  000009                     ??_frexp:
   936  000009                     ??_lcd_begin:
   937  000009                     lcd_gotoxy@col:
   938                           	opt stack 0
   939  000009                     lcd_puts@string:
   940                           	opt stack 0
   941  000009                     ___flpack@sign:
   942                           	opt stack 0
   943  000009                     timer0_read_ps@count:
   944                           	opt stack 0
   945  000009                     put_str@i:
   946                           	opt stack 0
   947                           
   948                           ; 2 bytes @ 0x8
   949  000009                     	ds	1
   950  00000A                     ??___flpack:
   951  00000A                     lcd_begin@lines:
   952                           	opt stack 0
   953  00000A                     ___lwdiv@counter:
   954                           	opt stack 0
   955  00000A                     _timer0_init$155:
   956                           	opt stack 0
   957  00000A                     lcd_gotoxy@row_offsets:
   958                           	opt stack 0
   959                           
   960                           ; 4 bytes @ 0x9
   961  00000A                     	ds	1
   962  00000B                     put_str@s:
   963                           	opt stack 0
   964  00000B                     format_number@n:
   965                           	opt stack 0
   966                           
   967                           ; 2 bytes @ 0xA
   968  00000B                     	ds	1
   969  00000C                     timer0_init@prescaler:
   970                           	opt stack 0
   971                           
   972                           ; 1 bytes @ 0xB
   973  00000C                     	ds	1
   974  00000D                     format_number@base:
   975                           	opt stack 0
   976  00000D                     timer0_init@ps_mode:
   977                           	opt stack 0
   978                           
   979                           ; 1 bytes @ 0xC
   980  00000D                     	ds	1
   981  00000E                     ??_print_unit:
   982  00000E                     ?___fldiv:
   983                           	opt stack 0
   984  00000E                     ?___awtofl:
   985                           	opt stack 0
   986  00000E                     ?___lltofl:
   987                           	opt stack 0
   988  00000E                     format_number@pad:
   989                           	opt stack 0
   990  00000E                     indicator@indicate:
   991                           	opt stack 0
   992  00000E                     ___awtofl@c:
   993                           	opt stack 0
   994  00000E                     ___fldiv@f1:
   995                           	opt stack 0
   996  00000E                     ___lltofl@c:
   997                           	opt stack 0
   998                           
   999                           ; 4 bytes @ 0xD
  1000  00000E                     	ds	1
  1001  00000F                     ??_format_number:
  1002                           
  1003                           ; 0 bytes @ 0xE
  1004  00000F                     	ds	2
  1005  000011                     format_number@buf:
  1006                           	opt stack 0
  1007                           
  1008                           ; 32 bytes @ 0x10
  1009  000011                     	ds	1
  1010  000012                     ___awtofl@sign:
  1011                           	opt stack 0
  1012  000012                     ___fldiv@f2:
  1013                           	opt stack 0
  1014                           
  1015                           ; 4 bytes @ 0x11
  1016  000012                     	ds	4
  1017  000016                     ___fldiv@f3:
  1018                           	opt stack 0
  1019                           
  1020                           ; 4 bytes @ 0x15
  1021  000016                     	ds	4
  1022  00001A                     ___fldiv@cntr:
  1023                           	opt stack 0
  1024                           
  1025                           ; 1 bytes @ 0x19
  1026  00001A                     	ds	1
  1027  00001B                     ___fldiv@exp:
  1028                           	opt stack 0
  1029                           
  1030                           ; 1 bytes @ 0x1A
  1031  00001B                     	ds	1
  1032  00001C                     ___fldiv@sign:
  1033                           	opt stack 0
  1034                           
  1035                           ; 1 bytes @ 0x1B
  1036  00001C                     	ds	1
  1037  00001D                     ?___flmul:
  1038                           	opt stack 0
  1039  00001D                     ___flmul@f1:
  1040                           	opt stack 0
  1041                           
  1042                           ; 4 bytes @ 0x1C
  1043  00001D                     	ds	4
  1044  000021                     ___flmul@f2:
  1045                           	opt stack 0
  1046                           
  1047                           ; 4 bytes @ 0x20
  1048  000021                     	ds	4
  1049  000025                     ___flmul@exp:
  1050                           	opt stack 0
  1051                           
  1052                           ; 1 bytes @ 0x24
  1053  000025                     	ds	1
  1054  000026                     ___flmul@f3_as_product:
  1055                           	opt stack 0
  1056                           
  1057                           ; 4 bytes @ 0x25
  1058  000026                     	ds	4
  1059  00002A                     ___flmul@cntr:
  1060                           	opt stack 0
  1061                           
  1062                           ; 1 bytes @ 0x29
  1063  00002A                     	ds	1
  1064  00002B                     ___flmul@sign:
  1065                           	opt stack 0
  1066                           
  1067                           ; 1 bytes @ 0x2A
  1068  00002B                     	ds	1
  1069  00002C                     ?___fladd:
  1070                           	opt stack 0
  1071  00002C                     ___fladd@f1:
  1072                           	opt stack 0
  1073                           
  1074                           ; 4 bytes @ 0x2B
  1075  00002C                     	ds	4
  1076  000030                     ___fladd@f2:
  1077                           	opt stack 0
  1078                           
  1079                           ; 4 bytes @ 0x2F
  1080  000030                     	ds	1
  1081  000031                     _format_number$68:
  1082                           	opt stack 0
  1083                           
  1084                           ; 2 bytes @ 0x30
  1085  000031                     	ds	2
  1086  000033                     format_number@padchar:
  1087                           	opt stack 0
  1088                           
  1089                           ; 1 bytes @ 0x32
  1090  000033                     	ds	1
  1091  000034                     ??___fladd:
  1092  000034                     format_number@di:
  1093                           	opt stack 0
  1094                           
  1095                           ; 1 bytes @ 0x33
  1096  000034                     	ds	1
  1097  000035                     format_number@i:
  1098                           	opt stack 0
  1099  000035                     ___fladd@sign:
  1100                           	opt stack 0
  1101                           
  1102                           ; 1 bytes @ 0x34
  1103  000035                     	ds	1
  1104  000036                     ?_measure_freq:
  1105                           	opt stack 0
  1106  000036                     ___fladd@exp2:
  1107                           	opt stack 0
  1108  000036                     print_reading@measurement:
  1109                           	opt stack 0
  1110  000036                     format_xint32@x:
  1111                           	opt stack 0
  1112                           
  1113                           ; 4 bytes @ 0x35
  1114  000036                     	ds	1
  1115  000037                     ___fladd@exp1:
  1116                           	opt stack 0
  1117                           
  1118                           ; 1 bytes @ 0x36
  1119  000037                     	ds	1
  1120  000038                     ??_measure_freq:
  1121  000038                     ?___flsub:
  1122                           	opt stack 0
  1123  000038                     ?_eval_poly:
  1124                           	opt stack 0
  1125  000038                     _print_reading$1104:
  1126                           	opt stack 0
  1127  000038                     ___flsub@f1:
  1128                           	opt stack 0
  1129  000038                     eval_poly@x:
  1130                           	opt stack 0
  1131                           
  1132                           ; 4 bytes @ 0x37
  1133  000038                     	ds	1
  1134  000039                     measure_freq@count:
  1135                           	opt stack 0
  1136                           
  1137                           ; 2 bytes @ 0x38
  1138  000039                     	ds	1
  1139  00003A                     _print_reading$1105:
  1140                           	opt stack 0
  1141                           
  1142                           ; 2 bytes @ 0x39
  1143  00003A                     	ds	1
  1144  00003B                     ?___lwtofl:
  1145                           	opt stack 0
  1146  00003B                     ___lwtofl@c:
  1147                           	opt stack 0
  1148                           
  1149                           ; 2 bytes @ 0x3A
  1150  00003B                     	ds	1
  1151  00003C                     eval_poly@d:
  1152                           	opt stack 0
  1153  00003C                     ___flsub@f2:
  1154                           	opt stack 0
  1155                           
  1156                           ; 4 bytes @ 0x3B
  1157  00003C                     	ds	1
  1158  00003D                     eval_poly@n:
  1159                           	opt stack 0
  1160                           
  1161                           ; 2 bytes @ 0x3C
  1162  00003D                     	ds	2
  1163  00003F                     ??_eval_poly:
  1164  00003F                     calibrate@i:
  1165                           	opt stack 0
  1166                           
  1167                           ; 1 bytes @ 0x3E
  1168  00003F                     	ds	1
  1169  000040                     eval_poly@res:
  1170                           	opt stack 0
  1171                           
  1172                           ; 4 bytes @ 0x3F
  1173  000040                     	ds	4
  1174  000044                     ?_ldexp:
  1175                           	opt stack 0
  1176  000044                     ?_log:
  1177                           	opt stack 0
  1178  000044                     ldexp@value:
  1179                           	opt stack 0
  1180  000044                     log@x:
  1181                           	opt stack 0
  1182                           
  1183                           ; 4 bytes @ 0x43
  1184  000044                     	ds	4
  1185  000048                     ldexp@newexp:
  1186                           	opt stack 0
  1187  000048                     log@exponent:
  1188                           	opt stack 0
  1189                           
  1190                           ; 2 bytes @ 0x47
  1191  000048                     	ds	2
  1192  00004A                     ??_ldexp:
  1193  00004A                     ?_log10:
  1194                           	opt stack 0
  1195  00004A                     log10@x:
  1196                           	opt stack 0
  1197                           
  1198                           ; 4 bytes @ 0x49
  1199  00004A                     	ds	4
  1200  00004E                     _log10$1106:
  1201                           	opt stack 0
  1202                           
  1203                           ; 4 bytes @ 0x4D
  1204  00004E                     	ds	4
  1205  000052                     ?___fltol:
  1206                           	opt stack 0
  1207  000052                     ___fltol@f1:
  1208                           	opt stack 0
  1209                           
  1210                           ; 4 bytes @ 0x51
  1211  000052                     	ds	4
  1212  000056                     ??___fltol:
  1213                           
  1214                           ; 0 bytes @ 0x55
  1215  000056                     	ds	4
  1216  00005A                     tblptru	equ	0xFF8
  1217                           tblptrh	equ	0xFF7
  1218                           tblptrl	equ	0xFF6
  1219                           tablat	equ	0xFF5
  1220                           prodl	equ	0xFF3
  1221                           intcon	equ	0xFF2
  1222                           intcon2	equ	0xFF1
  1223                           postinc0	equ	0xFEE
  1224                           wreg	equ	0xFE8
  1225                           postdec1	equ	0xFE5
  1226                           fsr1l	equ	0xFE1
  1227                           indf2	equ	0xFDF
  1228                           postinc2	equ	0xFDE
  1229                           postdec2	equ	0xFDD
  1230                           fsr2h	equ	0xFDA
  1231                           fsr2l	equ	0xFD9
  1232                           status	equ	0xFD8
  1233                           
  1234                           ; 0 bytes @ 0x59
  1235 ;;
  1236 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1237 ;;
  1238 ;; *************** function _main *****************
  1239 ;; Defined at:
  1240 ;;		line 115 in file "../../../LC-meter.c"
  1241 ;; Parameters:    Size  Location     Type
  1242 ;;		None
  1243 ;; Auto vars:     Size  Location     Type
  1244 ;;		None
  1245 ;; Return value:  Size  Location     Type
  1246 ;;		None               void
  1247 ;; Registers used:
  1248 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1249 ;; Tracked objects:
  1250 ;;		On entry : 0/0
  1251 ;;		On exit  : 0/0
  1252 ;;		Unchanged: 0/0
  1253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1254 ;;      Params:         0       0       0       0       0       0       0       0       0
  1255 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1256 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1257 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1258 ;;Total ram usage:        0 bytes
  1259 ;; Hardware stack levels required when called:    8
  1260 ;; This function calls:
  1261 ;;		_calibrate
  1262 ;;		_delay10ms
  1263 ;;		_format_double
  1264 ;;		_indicator
  1265 ;;		_lcd_begin
  1266 ;;		_lcd_clear
  1267 ;;		_lcd_gotoxy
  1268 ;;		_lcd_init
  1269 ;;		_lcd_puts
  1270 ;;		_measure_capacitance
  1271 ;;		_measure_inductance
  1272 ;;		_ser_init
  1273 ;;		_ser_puts
  1274 ;;		_timer0_init
  1275 ;;		_timer2_init
  1276 ;; This function is called by:
  1277 ;;		Startup code after reset
  1278 ;; This function uses a non-reentrant model
  1279 ;;
  1280                           
  1281                           	psect	text0
  1282  001AE2                     __ptext0:
  1283                           	opt stack 0
  1284  001AE2                     _main:
  1285                           	opt stack 23
  1286                           
  1287                           ;LC-meter.c: 116: bres = msecpart = msecs = seconds = 0;
  1288                           
  1289                           ;incstack = 0
  1290  001AE2  0100               	movlb	0	; () banked
  1291  001AE4  6BC4               	clrf	_seconds& (0+255),b	;volatile
  1292  001AE6  6BC5               	clrf	(_seconds+1)& (0+255),b	;volatile
  1293  001AE8  6BC6               	clrf	(_seconds+2)& (0+255),b	;volatile
  1294  001AEA  6BC7               	clrf	(_seconds+3)& (0+255),b	;volatile
  1295  001AEC  C0C4  F0C0         	movff	_seconds,_msecs	;volatile
  1296  001AF0  C0C5  F0C1         	movff	_seconds+1,_msecs+1	;volatile
  1297  001AF4  C0C6  F0C2         	movff	_seconds+2,_msecs+2	;volatile
  1298  001AF8  C0C7  F0C3         	movff	_seconds+3,_msecs+3	;volatile
  1299  001AFC  C0C0  F0EF         	movff	_msecs,_msecpart	;volatile
  1300  001B00  C0C1  F0F0         	movff	_msecs+1,_msecpart+1	;volatile
  1301  001B04  C0EF  F0ED         	movff	_msecpart,_bres	;volatile
  1302  001B08  C0F0  F0EE         	movff	_msecpart+1,_bres+1	;volatile
  1303                           
  1304                           ;LC-meter.c: 118: CCal = 1000;
  1305  001B0C  6BE9               	clrf	_CCal& (0+255),b
  1306  001B0E  6BEA               	clrf	(_CCal+1)& (0+255),b
  1307  001B10  0E7A               	movlw	122
  1308  001B12  6FEB               	movwf	(_CCal+2)& (0+255),b
  1309  001B14  0E44               	movlw	68
  1310  001B16  6FEC               	movwf	(_CCal+3)& (0+255),b
  1311                           
  1312                           ;LC-meter.c: 127: TRISA = 0b11001111;
  1313  001B18  0ECF               	movlw	207
  1314  001B1A  6E92               	movwf	3986,c	;volatile
  1315                           
  1316                           ; BSR set to: 0
  1317                           ;LC-meter.c: 130: timer0_init(0b100 | 0x40);
  1318  001B1C  0E44               	movlw	68
  1319  001B1E  ECBC  F011         	call	_timer0_init
  1320                           
  1321                           ; BSR set to: 0
  1322                           ;LC-meter.c: 146: INTCON2 &= ~0b10000000;
  1323  001B22  9EF1               	bcf	intcon2,7,c	;volatile
  1324                           
  1325                           ; BSR set to: 0
  1326                           ;LC-meter.c: 152: TRISC &= ~0b00000010;
  1327  001B24  9294               	bcf	3988,1,c	;volatile
  1328                           
  1329                           ; BSR set to: 0
  1330                           ;LC-meter.c: 153: LATC &= ~0b00000010; LATC |= (!!(1)) << 1;;
  1331  001B26  928B               	bcf	3979,1,c	;volatile
  1332                           
  1333                           ; BSR set to: 0
  1334  001B28  828B               	bsf	3979,1,c	;volatile
  1335                           
  1336                           ; BSR set to: 0
  1337                           ;LC-meter.c: 165: timer2_init(0b000 | 0x80);
  1338  001B2A  0E80               	movlw	128
  1339  001B2C  ECC8  F013         	call	_timer2_init
  1340                           
  1341                           ;LC-meter.c: 170: TRISC &= 0b10110101;
  1342  001B30  0EB5               	movlw	181
  1343  001B32  1694               	andwf	3988,f,c	;volatile
  1344                           
  1345                           ;LC-meter.c: 182: lcd_init(1);
  1346  001B34  0E01               	movlw	1
  1347  001B36  ECF6  F013         	call	_lcd_init
  1348                           
  1349                           ; BSR set to: 0
  1350                           ;LC-meter.c: 183: lcd_begin(2, 1);
  1351  001B3A  0E01               	movlw	1
  1352  001B3C  6E08               	movwf	lcd_begin@dotsize,c
  1353  001B3E  0E02               	movlw	2
  1354  001B40  EC59  F00E         	call	_lcd_begin
  1355                           
  1356                           ;LC-meter.c: 186: TRISC |= 0b1;
  1357  001B44  8094               	bsf	3988,0,c	;volatile
  1358                           
  1359                           ;LC-meter.c: 187: TRISC &= ~(1 << 5);
  1360  001B46  9A94               	bcf	3988,5,c	;volatile
  1361                           
  1362                           ;LC-meter.c: 189: LATC &= ~0b100;
  1363  001B48  948B               	bcf	3979,2,c	;volatile
  1364                           
  1365                           ;LC-meter.c: 190: delay10ms(50);
  1366  001B4A  0E32               	movlw	50
  1367  001B4C  ECEF  F014         	call	_delay10ms
  1368                           
  1369                           ;LC-meter.c: 191: LATC |= 0b100;
  1370  001B50  848B               	bsf	3979,2,c	;volatile
  1371                           
  1372                           ;LC-meter.c: 192: delay10ms(50);
  1373  001B52  0E32               	movlw	50
  1374  001B54  ECEF  F014         	call	_delay10ms
  1375                           
  1376                           ;LC-meter.c: 193: LATC &= ~0b100;
  1377  001B58  948B               	bcf	3979,2,c	;volatile
  1378                           
  1379                           ;LC-meter.c: 194: delay10ms(50);
  1380  001B5A  0E32               	movlw	50
  1381  001B5C  ECEF  F014         	call	_delay10ms
  1382                           
  1383                           ;LC-meter.c: 195: LATC |= 0b100;
  1384  001B60  848B               	bsf	3979,2,c	;volatile
  1385                           
  1386                           ;LC-meter.c: 196: delay10ms(50);
  1387  001B62  0E32               	movlw	50
  1388  001B64  ECEF  F014         	call	_delay10ms
  1389                           
  1390                           ;LC-meter.c: 197: LATC &= ~0b100;
  1391  001B68  948B               	bcf	3979,2,c	;volatile
  1392                           
  1393                           ;LC-meter.c: 200: ser_init();
  1394  001B6A  EC73  F014         	call	_ser_init	;wreg free
  1395                           
  1396                           ; BSR set to: 0
  1397                           ;LC-meter.c: 207: INTCON |= 0xc0;
  1398  001B6E  0EC0               	movlw	192
  1399  001B70  12F2               	iorwf	intcon,f,c	;volatile
  1400                           
  1401                           ; BSR set to: 0
  1402                           ;LC-meter.c: 217: lcd_gotoxy(0, 0);
  1403  001B72  0E00               	movlw	0
  1404  001B74  6A08               	clrf	lcd_gotoxy@row,c
  1405  001B76  EC93  F013         	call	_lcd_gotoxy
  1406                           
  1407                           ;LC-meter.c: 219: lcd_puts("LC-meter ");
  1408  001B7A  0E75               	movlw	STR_28& (0+255)
  1409  001B7C  EC0C  F014         	call	_lcd_puts
  1410                           
  1411                           ;LC-meter.c: 220: format_double( CCal);
  1412  001B80  C0E9  F091         	movff	_CCal,format_double@num
  1413  001B84  C0EA  F092         	movff	_CCal+1,format_double@num+1
  1414  001B88  C0EB  F093         	movff	_CCal+2,format_double@num+2
  1415  001B8C  C0EC  F094         	movff	_CCal+3,format_double@num+3
  1416  001B90  ECB8  F009         	call	_format_double	;wreg free
  1417                           
  1418                           ;LC-meter.c: 226: delay10ms(200);
  1419  001B94  0EC8               	movlw	200
  1420  001B96  ECEF  F014         	call	_delay10ms
  1421                           
  1422                           ;LC-meter.c: 229: calibrate();
  1423  001B9A  ECE8  F00D         	call	_calibrate	;wreg free
  1424                           
  1425                           ;LC-meter.c: 231: lcd_clear();
  1426  001B9E  ECD3  F014         	call	_lcd_clear	;wreg free
  1427  001BA2                     l4190:
  1428                           
  1429                           ;LC-meter.c: 242: ser_puts("...\r\n");
  1430  001BA2  0E98               	movlw	STR_29& (0+255)
  1431  001BA4  ECB7  F014         	call	_ser_puts
  1432                           
  1433                           ;LC-meter.c: 243: if((!!(PORTC & 0b1)))
  1434  001BA8  A082               	btfss	3970,0,c	;volatile
  1435  001BAA  D003               	goto	l4196
  1436                           
  1437                           ;LC-meter.c: 244: measure_capacitance();
  1438  001BAC  ECA1  F006         	call	_measure_capacitance	;wreg free
  1439  001BB0  D002               	goto	l449
  1440  001BB2                     l4196:
  1441                           
  1442                           ;LC-meter.c: 245: else
  1443                           ;LC-meter.c: 246: measure_inductance();
  1444  001BB2  EC70  F004         	call	_measure_inductance	;wreg free
  1445  001BB6                     l449:
  1446                           
  1447                           ;LC-meter.c: 248: indicator(1);
  1448  001BB6  0E01               	movlw	1
  1449  001BB8  ECA7  F014         	call	_indicator
  1450                           
  1451                           ;LC-meter.c: 249: delay10ms(30);
  1452  001BBC  0E1E               	movlw	30
  1453  001BBE  ECEF  F014         	call	_delay10ms
  1454                           
  1455                           ;LC-meter.c: 250: indicator(0);
  1456  001BC2  0E00               	movlw	0
  1457  001BC4  ECA7  F014         	call	_indicator
  1458                           
  1459                           ;LC-meter.c: 251: delay10ms(20);
  1460  001BC8  0E14               	movlw	20
  1461  001BCA  ECEF  F014         	call	_delay10ms
  1462                           
  1463                           ;LC-meter.c: 252: }
  1464  001BCE  D7E9               	goto	l4190
  1465  001BD0                     __end_of_main:
  1466                           	opt stack 0
  1467                           tblptru	equ	0xFF8
  1468                           tblptrh	equ	0xFF7
  1469                           tblptrl	equ	0xFF6
  1470                           tablat	equ	0xFF5
  1471                           prodl	equ	0xFF3
  1472                           intcon	equ	0xFF2
  1473                           intcon2	equ	0xFF1
  1474                           postinc0	equ	0xFEE
  1475                           wreg	equ	0xFE8
  1476                           postdec1	equ	0xFE5
  1477                           fsr1l	equ	0xFE1
  1478                           indf2	equ	0xFDF
  1479                           postinc2	equ	0xFDE
  1480                           postdec2	equ	0xFDD
  1481                           fsr2h	equ	0xFDA
  1482                           fsr2l	equ	0xFD9
  1483                           status	equ	0xFD8
  1484                           
  1485 ;; *************** function _timer2_init *****************
  1486 ;; Defined at:
  1487 ;;		line 125 in file "../../../lib/timer.c"
  1488 ;; Parameters:    Size  Location     Type
  1489 ;;  ps_mode         1    wreg     unsigned char 
  1490 ;; Auto vars:     Size  Location     Type
  1491 ;;  ps_mode         1    6[COMRAM] unsigned char 
  1492 ;;  postscaler      1    0        unsigned char 
  1493 ;;  ps              1    4[COMRAM] unsigned char 
  1494 ;; Return value:  Size  Location     Type
  1495 ;;		None               void
  1496 ;; Registers used:
  1497 ;;		wreg, status,2, status,0
  1498 ;; Tracked objects:
  1499 ;;		On entry : F/0
  1500 ;;		On exit  : 0/0
  1501 ;;		Unchanged: 0/0
  1502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1503 ;;      Params:         0       0       0       0       0       0       0       0       0
  1504 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1505 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1506 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1507 ;;Total ram usage:        4 bytes
  1508 ;; Hardware stack levels used:    1
  1509 ;; Hardware stack levels required when called:    1
  1510 ;; This function calls:
  1511 ;;		Nothing
  1512 ;; This function is called by:
  1513 ;;		_main
  1514 ;; This function uses a non-reentrant model
  1515 ;;
  1516                           
  1517                           	psect	text1
  1518  002790                     __ptext1:
  1519                           	opt stack 0
  1520  002790                     _timer2_init:
  1521                           	opt stack 29
  1522                           
  1523                           ;incstack = 0
  1524                           ;timer2_init@ps_mode stored from wreg
  1525  002790  6E07               	movwf	timer2_init@ps_mode,c
  1526                           
  1527                           ; BSR set to: 0
  1528                           ;timer.c: 126: uint8_t ps = ps_mode & 0b1111;
  1529  002792  5007               	movf	timer2_init@ps_mode,w,c
  1530  002794  0B0F               	andlw	15
  1531  002796  6E05               	movwf	timer2_init@ps,c
  1532                           
  1533                           ; BSR set to: 0
  1534                           ;timer.c: 130: T2CON &= ~0b01111111;
  1535  002798  0E80               	movlw	128
  1536  00279A  16CA               	andwf	4042,f,c	;volatile
  1537                           
  1538                           ;timer.c: 132: T2CON |= (postscaler & 0b1111) << 3;
  1539  00279C  50CA               	movf	4042,w,c	;volatile
  1540                           
  1541                           ;timer.c: 133: T2CON |= (ps & 0b11);
  1542  00279E  5005               	movf	timer2_init@ps,w,c
  1543  0027A0  0B03               	andlw	3
  1544  0027A2  12CA               	iorwf	4042,f,c	;volatile
  1545                           
  1546                           ; BSR set to: 0
  1547                           ;timer.c: 135: TMR2 = 0;
  1548  0027A4  6ACC               	clrf	4044,c	;volatile
  1549                           
  1550                           ; BSR set to: 0
  1551                           ;timer.c: 137: T2CON |= 0b100;
  1552  0027A6  84CA               	bsf	4042,2,c	;volatile
  1553                           
  1554                           ; BSR set to: 0
  1555                           ;timer.c: 140: PIR1 &= ~0b10;
  1556  0027A8  929E               	bcf	3998,1,c	;volatile
  1557                           
  1558                           ;timer.c: 141: PIE1 = (!!(ps_mode & 0x80)) << 1;
  1559  0027AA  AE07               	btfss	timer2_init@ps_mode,7,c
  1560  0027AC  D003               	goto	u2390
  1561  0027AE  6A04               	clrf	??_timer2_init& (0+255),c
  1562  0027B0  2A04               	incf	??_timer2_init& (0+255),f,c
  1563  0027B2  D001               	goto	u2408
  1564  0027B4                     u2390:
  1565  0027B4  6A04               	clrf	??_timer2_init& (0+255),c
  1566  0027B6                     u2408:
  1567  0027B6  90D8               	bcf	status,0,c
  1568  0027B8  3404               	rlcf	??_timer2_init,w,c
  1569  0027BA  6E9D               	movwf	3997,c	;volatile
  1570  0027BC  0012               	return		;funcret
  1571  0027BE                     __end_of_timer2_init:
  1572                           	opt stack 0
  1573                           tblptru	equ	0xFF8
  1574                           tblptrh	equ	0xFF7
  1575                           tblptrl	equ	0xFF6
  1576                           tablat	equ	0xFF5
  1577                           prodl	equ	0xFF3
  1578                           intcon	equ	0xFF2
  1579                           intcon2	equ	0xFF1
  1580                           postinc0	equ	0xFEE
  1581                           wreg	equ	0xFE8
  1582                           postdec1	equ	0xFE5
  1583                           fsr1l	equ	0xFE1
  1584                           indf2	equ	0xFDF
  1585                           postinc2	equ	0xFDE
  1586                           postdec2	equ	0xFDD
  1587                           fsr2h	equ	0xFDA
  1588                           fsr2l	equ	0xFD9
  1589                           status	equ	0xFD8
  1590                           
  1591 ;; *************** function _timer0_init *****************
  1592 ;; Defined at:
  1593 ;;		line 27 in file "../../../lib/timer.c"
  1594 ;; Parameters:    Size  Location     Type
  1595 ;;  ps_mode         1    wreg     unsigned char 
  1596 ;; Auto vars:     Size  Location     Type
  1597 ;;  ps_mode         1   12[COMRAM] unsigned char 
  1598 ;;  prescaler       1   11[COMRAM] unsigned char 
  1599 ;; Return value:  Size  Location     Type
  1600 ;;		None               void
  1601 ;; Registers used:
  1602 ;;		wreg, status,2, status,0
  1603 ;; Tracked objects:
  1604 ;;		On entry : F/0
  1605 ;;		On exit  : F/0
  1606 ;;		Unchanged: F/0
  1607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1608 ;;      Params:         0       0       0       0       0       0       0       0       0
  1609 ;;      Locals:        10       0       0       0       0       0       0       0       0
  1610 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1611 ;;      Totals:        10       0       0       0       0       0       0       0       0
  1612 ;;Total ram usage:       10 bytes
  1613 ;; Hardware stack levels used:    1
  1614 ;; Hardware stack levels required when called:    1
  1615 ;; This function calls:
  1616 ;;		Nothing
  1617 ;; This function is called by:
  1618 ;;		_main
  1619 ;; This function uses a non-reentrant model
  1620 ;;
  1621                           
  1622                           	psect	text2
  1623  002378                     __ptext2:
  1624                           	opt stack 0
  1625  002378                     _timer0_init:
  1626                           	opt stack 29
  1627                           
  1628                           ;incstack = 0
  1629                           ;timer0_init@ps_mode stored from wreg
  1630  002378  6E0D               	movwf	timer0_init@ps_mode,c
  1631                           
  1632                           ; BSR set to: 0
  1633                           ;timer.c: 28: uint8_t prescaler = ps_mode & 0b1111;
  1634  00237A  500D               	movf	timer0_init@ps_mode,w,c
  1635  00237C  0B0F               	andlw	15
  1636  00237E  6E0C               	movwf	timer0_init@prescaler,c
  1637                           
  1638                           ; BSR set to: 0
  1639                           ;timer.c: 30: TMR0 = 0;
  1640  002380  6AD6               	clrf	4054,c	;volatile
  1641  002382  6AD7               	clrf	4055,c	;volatile
  1642                           
  1643                           ; BSR set to: 0
  1644                           ;timer.c: 33: T0CON |= (!!(ps_mode & 0x40)) ? 0x20 : 0x00;
  1645  002384  BC0D               	btfsc	timer0_init@ps_mode,6,c
  1646  002386  D003               	goto	l3198
  1647                           
  1648                           ; BSR set to: 0
  1649  002388  6A04               	clrf	_timer0_init$152,c
  1650  00238A  6A05               	clrf	_timer0_init$152+1,c
  1651  00238C  D003               	goto	l3200
  1652  00238E                     l3198:
  1653                           
  1654                           ; BSR set to: 0
  1655  00238E  6A05               	clrf	_timer0_init$152+1,c
  1656  002390  0E20               	movlw	32
  1657  002392  6E04               	movwf	_timer0_init$152,c
  1658  002394                     l3200:
  1659                           
  1660                           ; BSR set to: 0
  1661  002394  5004               	movf	_timer0_init$152,w,c
  1662  002396  12D5               	iorwf	4053,f,c	;volatile
  1663                           
  1664                           ; BSR set to: 0
  1665                           ;timer.c: 36: T0CON |= (!!(ps_mode & 0x10)) ? 0x10 : 0x00;
  1666  002398  B80D               	btfsc	timer0_init@ps_mode,4,c
  1667  00239A  D003               	goto	l3206
  1668                           
  1669                           ; BSR set to: 0
  1670  00239C  6A06               	clrf	_timer0_init$153,c
  1671  00239E  6A07               	clrf	_timer0_init$153+1,c
  1672  0023A0  D003               	goto	l3208
  1673  0023A2                     l3206:
  1674                           
  1675                           ; BSR set to: 0
  1676  0023A2  6A07               	clrf	_timer0_init$153+1,c
  1677  0023A4  0E10               	movlw	16
  1678  0023A6  6E06               	movwf	_timer0_init$153,c
  1679  0023A8                     l3208:
  1680                           
  1681                           ; BSR set to: 0
  1682  0023A8  5006               	movf	_timer0_init$153,w,c
  1683  0023AA  12D5               	iorwf	4053,f,c	;volatile
  1684                           
  1685                           ; BSR set to: 0
  1686                           ;timer.c: 39: T0CON &= (!!prescaler) ? ~0x08 : ~0x00;
  1687  0023AC  500C               	movf	timer0_init@prescaler,w,c
  1688  0023AE  E103               	bnz	l3214
  1689                           
  1690                           ; BSR set to: 0
  1691  0023B0  6808               	setf	_timer0_init$154,c
  1692  0023B2  6809               	setf	_timer0_init$154+1,c
  1693  0023B4  D003               	goto	l3216
  1694  0023B6                     l3214:
  1695                           
  1696                           ; BSR set to: 0
  1697  0023B6  6809               	setf	_timer0_init$154+1,c
  1698  0023B8  0EF7               	movlw	247
  1699  0023BA  6E08               	movwf	_timer0_init$154,c
  1700  0023BC                     l3216:
  1701                           
  1702                           ; BSR set to: 0
  1703  0023BC  5008               	movf	_timer0_init$154,w,c
  1704  0023BE  16D5               	andwf	4053,f,c	;volatile
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;timer.c: 41: T0CON &= ~0b111;
  1708  0023C0  0EF8               	movlw	248
  1709  0023C2  16D5               	andwf	4053,f,c	;volatile
  1710                           
  1711                           ;timer.c: 43: if(prescaler > 0) {
  1712  0023C4  500C               	movf	timer0_init@prescaler,w,c
  1713  0023C6  E003               	bz	l3222
  1714                           
  1715                           ; BSR set to: 0
  1716                           ;timer.c: 44: T0CON |= (prescaler - 1) & 0b111;
  1717  0023C8  040C               	decf	timer0_init@prescaler,w,c
  1718  0023CA  0B07               	andlw	7
  1719  0023CC  12D5               	iorwf	4053,f,c	;volatile
  1720  0023CE                     l3222:
  1721                           
  1722                           ; BSR set to: 0
  1723                           ;timer.c: 50: }
  1724                           ;timer.c: 54: INTCON &= ~0x40;
  1725  0023CE  9CF2               	bcf	intcon,6,c	;volatile
  1726                           
  1727                           ; BSR set to: 0
  1728                           ;timer.c: 55: INTCON |= (!!(ps_mode & 0x80)) ? 0x20 : 0x00;
  1729  0023D0  BE0D               	btfsc	timer0_init@ps_mode,7,c
  1730  0023D2  D003               	goto	l3228
  1731                           
  1732                           ; BSR set to: 0
  1733  0023D4  6A0A               	clrf	_timer0_init$155,c
  1734  0023D6  6A0B               	clrf	_timer0_init$155+1,c
  1735  0023D8  D003               	goto	l3230
  1736  0023DA                     l3228:
  1737                           
  1738                           ; BSR set to: 0
  1739  0023DA  6A0B               	clrf	_timer0_init$155+1,c
  1740  0023DC  0E20               	movlw	32
  1741  0023DE  6E0A               	movwf	_timer0_init$155,c
  1742  0023E0                     l3230:
  1743                           
  1744                           ; BSR set to: 0
  1745  0023E0  500A               	movf	_timer0_init$155,w,c
  1746  0023E2  12F2               	iorwf	intcon,f,c	;volatile
  1747                           
  1748                           ; BSR set to: 0
  1749  0023E4  0012               	return		;funcret
  1750  0023E6                     __end_of_timer0_init:
  1751                           	opt stack 0
  1752                           tblptru	equ	0xFF8
  1753                           tblptrh	equ	0xFF7
  1754                           tblptrl	equ	0xFF6
  1755                           tablat	equ	0xFF5
  1756                           prodl	equ	0xFF3
  1757                           intcon	equ	0xFF2
  1758                           intcon2	equ	0xFF1
  1759                           postinc0	equ	0xFEE
  1760                           wreg	equ	0xFE8
  1761                           postdec1	equ	0xFE5
  1762                           fsr1l	equ	0xFE1
  1763                           indf2	equ	0xFDF
  1764                           postinc2	equ	0xFDE
  1765                           postdec2	equ	0xFDD
  1766                           fsr2h	equ	0xFDA
  1767                           fsr2l	equ	0xFD9
  1768                           status	equ	0xFD8
  1769                           
  1770 ;; *************** function _ser_init *****************
  1771 ;; Defined at:
  1772 ;;		line 125 in file "../../../lib/ser.c"
  1773 ;; Parameters:    Size  Location     Type
  1774 ;;		None
  1775 ;; Auto vars:     Size  Location     Type
  1776 ;;		None
  1777 ;; Return value:  Size  Location     Type
  1778 ;;		None               void
  1779 ;; Registers used:
  1780 ;;		wreg, status,2
  1781 ;; Tracked objects:
  1782 ;;		On entry : 0/0
  1783 ;;		On exit  : F/0
  1784 ;;		Unchanged: 0/0
  1785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1786 ;;      Params:         0       0       0       0       0       0       0       0       0
  1787 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1788 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1789 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1790 ;;Total ram usage:        0 bytes
  1791 ;; Hardware stack levels used:    1
  1792 ;; Hardware stack levels required when called:    1
  1793 ;; This function calls:
  1794 ;;		Nothing
  1795 ;; This function is called by:
  1796 ;;		_main
  1797 ;; This function uses a non-reentrant model
  1798 ;;
  1799                           
  1800                           	psect	text3
  1801  0028E6                     __ptext3:
  1802                           	opt stack 0
  1803  0028E6                     _ser_init:
  1804                           	opt stack 29
  1805                           
  1806                           ;ser.c: 128: TRISC6 = 1;
  1807                           
  1808                           ; BSR set to: 0
  1809                           ;incstack = 0
  1810  0028E6  8C94               	bsf	3988,6,c	;volatile
  1811                           
  1812                           ;ser.c: 129: LATC7 = 1;
  1813  0028E8  8E8B               	bsf	3979,7,c	;volatile
  1814                           
  1815                           ;ser.c: 131: BRGH = 1;
  1816  0028EA  84AC               	bsf	4012,2,c	;volatile
  1817                           
  1818                           ;ser.c: 136: SPBRG = ser_brg;
  1819  0028EC  0E1F               	movlw	31
  1820  0028EE  6EAF               	movwf	4015,c	;volatile
  1821                           
  1822                           ;ser.c: 139: TX9 = 0;
  1823  0028F0  9CAC               	bcf	4012,6,c	;volatile
  1824                           
  1825                           ;ser.c: 140: RX9 = 0;
  1826  0028F2  9CAB               	bcf	4011,6,c	;volatile
  1827                           
  1828                           ;ser.c: 142: SYNC = 0;
  1829  0028F4  98AC               	bcf	4012,4,c	;volatile
  1830                           
  1831                           ;ser.c: 143: SPEN = 1;
  1832  0028F6  8EAB               	bsf	4011,7,c	;volatile
  1833                           
  1834                           ;ser.c: 144: CREN = 1;
  1835  0028F8  88AB               	bsf	4011,4,c	;volatile
  1836                           
  1837                           ;ser.c: 145: TXIE = 0;
  1838  0028FA  989D               	bcf	3997,4,c	;volatile
  1839                           
  1840                           ;ser.c: 147: TXEN = 1;
  1841  0028FC  8AAC               	bsf	4012,5,c	;volatile
  1842                           
  1843                           ;ser.c: 148: PEIE = 1;
  1844  0028FE  8CF2               	bsf	intcon,6,c	;volatile
  1845                           
  1846                           ;ser.c: 150: rxiptr = rxoptr = txiptr = txoptr = 0;
  1847  002900  6A5C               	clrf	_txoptr,c	;volatile
  1848  002902  6A5B               	clrf	_txiptr,c	;volatile
  1849  002904  0100               	movlb	0	; () banked
  1850  002906  6BD2               	clrf	_rxoptr& (0+255),b	;volatile
  1851  002908  6BD1               	clrf	_rxiptr& (0+255),b	;volatile
  1852                           
  1853                           ; BSR set to: 0
  1854  00290A  0012               	return		;funcret
  1855  00290C                     __end_of_ser_init:
  1856                           	opt stack 0
  1857                           tblptru	equ	0xFF8
  1858                           tblptrh	equ	0xFF7
  1859                           tblptrl	equ	0xFF6
  1860                           tablat	equ	0xFF5
  1861                           prodl	equ	0xFF3
  1862                           intcon	equ	0xFF2
  1863                           intcon2	equ	0xFF1
  1864                           postinc0	equ	0xFEE
  1865                           wreg	equ	0xFE8
  1866                           postdec1	equ	0xFE5
  1867                           fsr1l	equ	0xFE1
  1868                           indf2	equ	0xFDF
  1869                           postinc2	equ	0xFDE
  1870                           postdec2	equ	0xFDD
  1871                           fsr2h	equ	0xFDA
  1872                           fsr2l	equ	0xFD9
  1873                           status	equ	0xFD8
  1874                           
  1875 ;; *************** function _measure_inductance *****************
  1876 ;; Defined at:
  1877 ;;		line 196 in file "../../../src/measure.c"
  1878 ;; Parameters:    Size  Location     Type
  1879 ;;		None
  1880 ;; Auto vars:     Size  Location     Type
  1881 ;;  Lin             4   41[BANK0 ] unsigned char 
  1882 ;;  denominator     4    6[BANK0 ] unsigned char 
  1883 ;;  numerator       4    2[BANK0 ] unsigned char 
  1884 ;;  var             2   39[BANK0 ] unsigned int 
  1885 ;;  unit            1   26[BANK0 ] unsigned char 
  1886 ;; Return value:  Size  Location     Type
  1887 ;;		None               void
  1888 ;; Registers used:
  1889 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1890 ;; Tracked objects:
  1891 ;;		On entry : 0/0
  1892 ;;		On exit  : 0/0
  1893 ;;		Unchanged: 0/0
  1894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1895 ;;      Params:         0       0       0       0       0       0       0       0       0
  1896 ;;      Locals:         0      43       0       0       0       0       0       0       0
  1897 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1898 ;;      Totals:         0      43       0       0       0       0       0       0       0
  1899 ;;Total ram usage:       43 bytes
  1900 ;; Hardware stack levels used:    1
  1901 ;; Hardware stack levels required when called:    6
  1902 ;; This function calls:
  1903 ;;		___fldiv
  1904 ;;		___flge
  1905 ;;		___flmul
  1906 ;;		___flsub
  1907 ;;		___fltol
  1908 ;;		___lwtofl
  1909 ;;		_lcd_gotoxy
  1910 ;;		_measure_freq
  1911 ;;		_print_reading
  1912 ;;		_print_unit
  1913 ;;		_put_str
  1914 ;; This function is called by:
  1915 ;;		_main
  1916 ;; This function uses a non-reentrant model
  1917 ;;
  1918                           
  1919                           	psect	text4
  1920  0008E0                     __ptext4:
  1921                           	opt stack 0
  1922  0008E0                     _measure_inductance:
  1923                           	opt stack 24
  1924                           
  1925                           ;measure.c: 197: uint8_t unit;
  1926                           ;measure.c: 198: uint16_t var;
  1927                           ;measure.c: 200: double Lin, numerator, denominator;
  1928                           ;measure.c: 203: lcd_gotoxy(0, 0);
  1929                           
  1930                           ; BSR set to: 0
  1931                           ;incstack = 0
  1932  0008E0  0E00               	movlw	0
  1933  0008E2  6A08               	clrf	lcd_gotoxy@row,c
  1934  0008E4  EC93  F013         	call	_lcd_gotoxy
  1935                           
  1936                           ;measure.c: 204: put_str("Inductivity ");
  1937  0008E8  0E5C               	movlw	STR_15& (0+255)
  1938  0008EA  EC21  F014         	call	_put_str
  1939                           
  1940                           ;measure.c: 206: var = measure_freq();
  1941  0008EE  EC7C  F00C         	call	_measure_freq	;wreg free
  1942  0008F2  C036  F087         	movff	?_measure_freq,measure_inductance@var
  1943  0008F6  C037  F088         	movff	?_measure_freq+1,measure_inductance@var+1
  1944                           
  1945                           ;measure.c: 208: F3 = (double)var;
  1946  0008FA  C087  F03B         	movff	measure_inductance@var,___lwtofl@c
  1947  0008FE  C088  F03C         	movff	measure_inductance@var+1,___lwtofl@c+1
  1948  000902  EC36  F014         	call	___lwtofl	;wreg free
  1949  000906  C03B  F0BC         	movff	?___lwtofl,_F3
  1950  00090A  C03C  F0BD         	movff	?___lwtofl+1,_F3+1
  1951  00090E  C03D  F0BE         	movff	?___lwtofl+2,_F3+2
  1952  000912  C03E  F0BF         	movff	?___lwtofl+3,_F3+3
  1953                           
  1954                           ;measure.c: 209: if(F3 > F1)
  1955  000916  EC62  F008         	call	PL6	;call to abstracted procedure
  1956  00091A  EC7D  F012         	call	___flge	;wreg free
  1957  00091E  E208               	bc	l4104
  1958                           
  1959                           ;measure.c: 210: F3 = F1;
  1960  000920  C0E5  F0BC         	movff	_F1,_F3
  1961  000924  C0E6  F0BD         	movff	_F1+1,_F3+1
  1962  000928  C0E7  F0BE         	movff	_F1+2,_F3+2
  1963  00092C  C0E8  F0BF         	movff	_F1+3,_F3+3
  1964  000930                     l4104:
  1965                           
  1966                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1967  000930  C0B8  F03C         	movff	_F2,___flsub@f2
  1968  000934  C0B9  F03D         	movff	_F2+1,___flsub@f2+1
  1969  000938  C0BA  F03E         	movff	_F2+2,___flsub@f2+2
  1970  00093C  C0BB  F03F         	movff	_F2+3,___flsub@f2+3
  1971  000940  C0B8  F038         	movff	_F2,___flsub@f1
  1972  000944  C0B9  F039         	movff	_F2+1,___flsub@f1+1
  1973  000948  C0BA  F03A         	movff	_F2+2,___flsub@f1+2
  1974  00094C  C0BB  F03B         	movff	_F2+3,___flsub@f1+3
  1975  000950  EC35  F013         	call	___flsub	;wreg free
  1976  000954  C038  F06A         	movff	?___flsub,_measure_inductance$1097
  1977  000958  C039  F06B         	movff	?___flsub+1,_measure_inductance$1097+1
  1978  00095C  C03A  F06C         	movff	?___flsub+2,_measure_inductance$1097+2
  1979  000960  C03B  F06D         	movff	?___flsub+3,_measure_inductance$1097+3
  1980                           
  1981                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1982  000964  C06A  F03C         	movff	_measure_inductance$1097,___flsub@f2
  1983  000968  C06B  F03D         	movff	_measure_inductance$1097+1,___flsub@f2+1
  1984  00096C  C06C  F03E         	movff	_measure_inductance$1097+2,___flsub@f2+2
  1985  000970  C06D  F03F         	movff	_measure_inductance$1097+3,___flsub@f2+3
  1986  000974  D9CA               	call	PL2	;call to abstracted procedure
  1987  000976  EC8C  F00F         	call	___flmul	;wreg free
  1988  00097A  C01D  F038         	movff	?___flmul,___flsub@f1
  1989  00097E  C01E  F039         	movff	?___flmul+1,___flsub@f1+1
  1990  000982  C01F  F03A         	movff	?___flmul+2,___flsub@f1+2
  1991  000986  C020  F03B         	movff	?___flmul+3,___flsub@f1+3
  1992  00098A  EC35  F013         	call	___flsub	;wreg free
  1993  00098E  C038  F07B         	movff	?___flsub,_measure_inductance$1098
  1994  000992  C039  F07C         	movff	?___flsub+1,_measure_inductance$1098+1
  1995  000996  C03A  F07D         	movff	?___flsub+2,_measure_inductance$1098+2
  1996  00099A  C03B  F07E         	movff	?___flsub+3,_measure_inductance$1098+3
  1997                           
  1998                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1999  00099E  EC51  F008         	call	PL4	;call to abstracted procedure
  2000  0009A2  EC8C  F00F         	call	___flmul	;wreg free
  2001  0009A6  C01D  F03C         	movff	?___flmul,___flsub@f2
  2002  0009AA  C01E  F03D         	movff	?___flmul+1,___flsub@f2+1
  2003  0009AE  C01F  F03E         	movff	?___flmul+2,___flsub@f2+2
  2004  0009B2  C020  F03F         	movff	?___flmul+3,___flsub@f2+3
  2005  0009B6  D9A9               	call	PL2	;call to abstracted procedure
  2006  0009B8  EC8C  F00F         	call	___flmul	;wreg free
  2007  0009BC  C01D  F038         	movff	?___flmul,___flsub@f1
  2008  0009C0  C01E  F039         	movff	?___flmul+1,___flsub@f1+1
  2009  0009C4  C01F  F03A         	movff	?___flmul+2,___flsub@f1+2
  2010  0009C8  C020  F03B         	movff	?___flmul+3,___flsub@f1+3
  2011  0009CC  EC35  F013         	call	___flsub	;wreg free
  2012  0009D0  C038  F07F         	movff	?___flsub,_measure_inductance$1099
  2013  0009D4  C039  F080         	movff	?___flsub+1,_measure_inductance$1099+1
  2014  0009D8  C03A  F081         	movff	?___flsub+2,_measure_inductance$1099+2
  2015  0009DC  C03B  F082         	movff	?___flsub+3,_measure_inductance$1099+3
  2016                           
  2017                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  2018  0009E0  C07B  F021         	movff	_measure_inductance$1098,___flmul@f2
  2019  0009E4  C07C  F022         	movff	_measure_inductance$1098+1,___flmul@f2+1
  2020  0009E8  C07D  F023         	movff	_measure_inductance$1098+2,___flmul@f2+2
  2021  0009EC  C07E  F024         	movff	_measure_inductance$1098+3,___flmul@f2+3
  2022  0009F0  C07F  F01D         	movff	_measure_inductance$1099,___flmul@f1
  2023  0009F4  C080  F01E         	movff	_measure_inductance$1099+1,___flmul@f1+1
  2024  0009F8  C081  F01F         	movff	_measure_inductance$1099+2,___flmul@f1+2
  2025  0009FC  C082  F020         	movff	_measure_inductance$1099+3,___flmul@f1+3
  2026  000A00  EC8C  F00F         	call	___flmul	;wreg free
  2027  000A04  C01D  F083         	movff	?___flmul,_measure_inductance$1100
  2028  000A08  C01E  F084         	movff	?___flmul+1,_measure_inductance$1100+1
  2029  000A0C  C01F  F085         	movff	?___flmul+2,_measure_inductance$1100+2
  2030  000A10  C020  F086         	movff	?___flmul+3,_measure_inductance$1100+3
  2031                           
  2032                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  2033  000A14  C083  F01D         	movff	_measure_inductance$1100,___flmul@f1
  2034  000A18  C084  F01E         	movff	_measure_inductance$1100+1,___flmul@f1+1
  2035  000A1C  C085  F01F         	movff	_measure_inductance$1100+2,___flmul@f1+2
  2036  000A20  C086  F020         	movff	_measure_inductance$1100+3,___flmul@f1+3
  2037  000A24  0E00               	movlw	0
  2038  000A26  6E21               	movwf	___flmul@f2,c
  2039  000A28  0E40               	movlw	64
  2040  000A2A  6E22               	movwf	___flmul@f2+1,c
  2041  000A2C  0E1C               	movlw	28
  2042  000A2E  6E23               	movwf	___flmul@f2+2,c
  2043  000A30  0E46               	movlw	70
  2044  000A32  6E24               	movwf	___flmul@f2+3,c
  2045  000A34  EC8C  F00F         	call	___flmul	;wreg free
  2046  000A38  C01D  F062         	movff	?___flmul,measure_inductance@numerator
  2047  000A3C  C01E  F063         	movff	?___flmul+1,measure_inductance@numerator+1
  2048  000A40  C01F  F064         	movff	?___flmul+2,measure_inductance@numerator+2
  2049  000A44  C020  F065         	movff	?___flmul+3,measure_inductance@numerator+3
  2050                           
  2051                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2052  000A48  D960               	call	PL2	;call to abstracted procedure
  2053  000A4A  EC8C  F00F         	call	___flmul	;wreg free
  2054  000A4E  C01D  F06E         	movff	?___flmul,_measure_inductance$1101
  2055  000A52  C01E  F06F         	movff	?___flmul+1,_measure_inductance$1101+1
  2056  000A56  C01F  F070         	movff	?___flmul+2,_measure_inductance$1101+2
  2057  000A5A  C020  F071         	movff	?___flmul+3,_measure_inductance$1101+3
  2058                           
  2059                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2060  000A5E  C0B8  F021         	movff	_F2,___flmul@f2
  2061  000A62  C0B9  F022         	movff	_F2+1,___flmul@f2+1
  2062  000A66  C0BA  F023         	movff	_F2+2,___flmul@f2+2
  2063  000A6A  C0BB  F024         	movff	_F2+3,___flmul@f2+3
  2064  000A6E  C06E  F01D         	movff	_measure_inductance$1101,___flmul@f1
  2065  000A72  C06F  F01E         	movff	_measure_inductance$1101+1,___flmul@f1+1
  2066  000A76  C070  F01F         	movff	_measure_inductance$1101+2,___flmul@f1+2
  2067  000A7A  C071  F020         	movff	_measure_inductance$1101+3,___flmul@f1+3
  2068  000A7E  EC8C  F00F         	call	___flmul	;wreg free
  2069  000A82  C01D  F07B         	movff	?___flmul,_measure_inductance$1098
  2070  000A86  C01E  F07C         	movff	?___flmul+1,_measure_inductance$1098+1
  2071  000A8A  C01F  F07D         	movff	?___flmul+2,_measure_inductance$1098+2
  2072  000A8E  C020  F07E         	movff	?___flmul+3,_measure_inductance$1098+3
  2073                           
  2074                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2075  000A92  C0B8  F021         	movff	_F2,___flmul@f2
  2076  000A96  C0B9  F022         	movff	_F2+1,___flmul@f2+1
  2077  000A9A  C0BA  F023         	movff	_F2+2,___flmul@f2+2
  2078  000A9E  C0BB  F024         	movff	_F2+3,___flmul@f2+3
  2079  000AA2  C07B  F01D         	movff	_measure_inductance$1098,___flmul@f1
  2080  000AA6  C07C  F01E         	movff	_measure_inductance$1098+1,___flmul@f1+1
  2081  000AAA  C07D  F01F         	movff	_measure_inductance$1098+2,___flmul@f1+2
  2082  000AAE  C07E  F020         	movff	_measure_inductance$1098+3,___flmul@f1+3
  2083  000AB2  EC8C  F00F         	call	___flmul	;wreg free
  2084  000AB6  C01D  F07F         	movff	?___flmul,_measure_inductance$1099
  2085  000ABA  C01E  F080         	movff	?___flmul+1,_measure_inductance$1099+1
  2086  000ABE  C01F  F081         	movff	?___flmul+2,_measure_inductance$1099+2
  2087  000AC2  C020  F082         	movff	?___flmul+3,_measure_inductance$1099+3
  2088                           
  2089                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2090  000AC6  C0BC  F021         	movff	_F3,___flmul@f2
  2091  000ACA  C0BD  F022         	movff	_F3+1,___flmul@f2+1
  2092  000ACE  C0BE  F023         	movff	_F3+2,___flmul@f2+2
  2093  000AD2  C0BF  F024         	movff	_F3+3,___flmul@f2+3
  2094  000AD6  C07F  F01D         	movff	_measure_inductance$1099,___flmul@f1
  2095  000ADA  C080  F01E         	movff	_measure_inductance$1099+1,___flmul@f1+1
  2096  000ADE  C081  F01F         	movff	_measure_inductance$1099+2,___flmul@f1+2
  2097  000AE2  C082  F020         	movff	_measure_inductance$1099+3,___flmul@f1+3
  2098  000AE6  EC8C  F00F         	call	___flmul	;wreg free
  2099  000AEA  C01D  F083         	movff	?___flmul,_measure_inductance$1100
  2100  000AEE  C01E  F084         	movff	?___flmul+1,_measure_inductance$1100+1
  2101  000AF2  C01F  F085         	movff	?___flmul+2,_measure_inductance$1100+2
  2102  000AF6  C020  F086         	movff	?___flmul+3,_measure_inductance$1100+3
  2103                           
  2104                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2105  000AFA  C0BC  F021         	movff	_F3,___flmul@f2
  2106  000AFE  C0BD  F022         	movff	_F3+1,___flmul@f2+1
  2107  000B02  C0BE  F023         	movff	_F3+2,___flmul@f2+2
  2108  000B06  C0BF  F024         	movff	_F3+3,___flmul@f2+3
  2109  000B0A  C083  F01D         	movff	_measure_inductance$1100,___flmul@f1
  2110  000B0E  C084  F01E         	movff	_measure_inductance$1100+1,___flmul@f1+1
  2111  000B12  C085  F01F         	movff	_measure_inductance$1100+2,___flmul@f1+2
  2112  000B16  C086  F020         	movff	_measure_inductance$1100+3,___flmul@f1+3
  2113  000B1A  EC8C  F00F         	call	___flmul	;wreg free
  2114  000B1E  C01D  F072         	movff	?___flmul,_measure_inductance$1102
  2115  000B22  C01E  F073         	movff	?___flmul+1,_measure_inductance$1102+1
  2116  000B26  C01F  F074         	movff	?___flmul+2,_measure_inductance$1102+2
  2117  000B2A  C020  F075         	movff	?___flmul+3,_measure_inductance$1102+3
  2118                           
  2119                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2120  000B2E  C0E9  F021         	movff	_CCal,___flmul@f2
  2121  000B32  C0EA  F022         	movff	_CCal+1,___flmul@f2+1
  2122  000B36  C0EB  F023         	movff	_CCal+2,___flmul@f2+2
  2123  000B3A  C0EC  F024         	movff	_CCal+3,___flmul@f2+3
  2124  000B3E  C072  F01D         	movff	_measure_inductance$1102,___flmul@f1
  2125  000B42  C073  F01E         	movff	_measure_inductance$1102+1,___flmul@f1+1
  2126  000B46  C074  F01F         	movff	_measure_inductance$1102+2,___flmul@f1+2
  2127  000B4A  C075  F020         	movff	_measure_inductance$1102+3,___flmul@f1+3
  2128  000B4E  EC8C  F00F         	call	___flmul	;wreg free
  2129  000B52  C01D  F076         	movff	?___flmul,_measure_inductance$1103
  2130  000B56  C01E  F077         	movff	?___flmul+1,_measure_inductance$1103+1
  2131  000B5A  C01F  F078         	movff	?___flmul+2,_measure_inductance$1103+2
  2132  000B5E  C020  F079         	movff	?___flmul+3,_measure_inductance$1103+3
  2133                           
  2134                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2135  000B62  C076  F01D         	movff	_measure_inductance$1103,___flmul@f1
  2136  000B66  C077  F01E         	movff	_measure_inductance$1103+1,___flmul@f1+1
  2137  000B6A  C078  F01F         	movff	_measure_inductance$1103+2,___flmul@f1+2
  2138  000B6E  C079  F020         	movff	_measure_inductance$1103+3,___flmul@f1+3
  2139  000B72  0EE6               	movlw	230
  2140  000B74  6E21               	movwf	___flmul@f2,c
  2141  000B76  0EE9               	movlw	233
  2142  000B78  6E22               	movwf	___flmul@f2+1,c
  2143  000B7A  0E1D               	movlw	29
  2144  000B7C  6E23               	movwf	___flmul@f2+2,c
  2145  000B7E  0E42               	movlw	66
  2146  000B80  6E24               	movwf	___flmul@f2+3,c
  2147  000B82  EC8C  F00F         	call	___flmul	;wreg free
  2148  000B86  C01D  F066         	movff	?___flmul,measure_inductance@denominator
  2149  000B8A  C01E  F067         	movff	?___flmul+1,measure_inductance@denominator+1
  2150  000B8E  C01F  F068         	movff	?___flmul+2,measure_inductance@denominator+2
  2151  000B92  C020  F069         	movff	?___flmul+3,measure_inductance@denominator+3
  2152                           
  2153                           ;measure.c: 216: Lin = (numerator / denominator) * 1e+15l;
  2154  000B96  C066  F012         	movff	measure_inductance@denominator,___fldiv@f2
  2155  000B9A  C067  F013         	movff	measure_inductance@denominator+1,___fldiv@f2+1
  2156  000B9E  C068  F014         	movff	measure_inductance@denominator+2,___fldiv@f2+2
  2157  000BA2  C069  F015         	movff	measure_inductance@denominator+3,___fldiv@f2+3
  2158  000BA6  C062  F00E         	movff	measure_inductance@numerator,___fldiv@f1
  2159  000BAA  C063  F00F         	movff	measure_inductance@numerator+1,___fldiv@f1+1
  2160  000BAE  C064  F010         	movff	measure_inductance@numerator+2,___fldiv@f1+2
  2161  000BB2  C065  F011         	movff	measure_inductance@numerator+3,___fldiv@f1+3
  2162  000BB6  EC92  F010         	call	___fldiv	;wreg free
  2163  000BBA  C00E  F01D         	movff	?___fldiv,___flmul@f1
  2164  000BBE  C00F  F01E         	movff	?___fldiv+1,___flmul@f1+1
  2165  000BC2  C010  F01F         	movff	?___fldiv+2,___flmul@f1+2
  2166  000BC6  C011  F020         	movff	?___fldiv+3,___flmul@f1+3
  2167  000BCA  0EA9               	movlw	169
  2168  000BCC  6E21               	movwf	___flmul@f2,c
  2169  000BCE  0E5F               	movlw	95
  2170  000BD0  6E22               	movwf	___flmul@f2+1,c
  2171  000BD2  0E63               	movlw	99
  2172  000BD4  6E23               	movwf	___flmul@f2+2,c
  2173  000BD6  0E58               	movlw	88
  2174  000BD8  6E24               	movwf	___flmul@f2+3,c
  2175  000BDA  EC8C  F00F         	call	___flmul	;wreg free
  2176  000BDE  C01D  F089         	movff	?___flmul,measure_inductance@Lin
  2177  000BE2  C01E  F08A         	movff	?___flmul+1,measure_inductance@Lin+1
  2178  000BE6  C01F  F08B         	movff	?___flmul+2,measure_inductance@Lin+2
  2179  000BEA  C020  F08C         	movff	?___flmul+3,measure_inductance@Lin+3
  2180                           
  2181                           ;measure.c: 218: if(Lin > 999) {
  2182  000BEE  ECA1  F008         	call	PL32	;call to abstracted procedure
  2183  000BF2  C089  F008         	movff	measure_inductance@Lin,___flge@ff2
  2184  000BF6  C08A  F009         	movff	measure_inductance@Lin+1,___flge@ff2+1
  2185  000BFA  C08B  F00A         	movff	measure_inductance@Lin+2,___flge@ff2+2
  2186  000BFE  C08C  F00B         	movff	measure_inductance@Lin+3,___flge@ff2+3
  2187  000C02  EC7D  F012         	call	___flge	;wreg free
  2188  000C06  E252               	bc	l4122
  2189                           
  2190                           ;measure.c: 219: if(Lin > (999e+03l)) {
  2191  000C08  EC90  F008         	call	PL22	;call to abstracted procedure
  2192  000C0C  C089  F008         	movff	measure_inductance@Lin,___flge@ff2
  2193  000C10  C08A  F009         	movff	measure_inductance@Lin+1,___flge@ff2+1
  2194  000C14  C08B  F00A         	movff	measure_inductance@Lin+2,___flge@ff2+2
  2195  000C18  C08C  F00B         	movff	measure_inductance@Lin+3,___flge@ff2+3
  2196  000C1C  EC7D  F012         	call	___flge	;wreg free
  2197  000C20  E233               	bc	l4118
  2198                           
  2199                           ;measure.c: 220: if(Lin > (999e+06l)) {
  2200  000C22  EC7E  F008         	call	PL14	;call to abstracted procedure
  2201  000C26  C089  F008         	movff	measure_inductance@Lin,___flge@ff2
  2202  000C2A  C08A  F009         	movff	measure_inductance@Lin+1,___flge@ff2+1
  2203  000C2E  C08B  F00A         	movff	measure_inductance@Lin+2,___flge@ff2+2
  2204  000C32  C08C  F00B         	movff	measure_inductance@Lin+3,___flge@ff2+3
  2205  000C36  EC7D  F012         	call	___flge	;wreg free
  2206  000C3A  E217               	bc	l4114
  2207                           
  2208                           ;measure.c: 221: Lin = Lin / (1e+09l);
  2209  000C3C  C089  F00E         	movff	measure_inductance@Lin,___fldiv@f1
  2210  000C40  C08A  F00F         	movff	measure_inductance@Lin+1,___fldiv@f1+1
  2211  000C44  C08B  F010         	movff	measure_inductance@Lin+2,___fldiv@f1+2
  2212  000C48  C08C  F011         	movff	measure_inductance@Lin+3,___fldiv@f1+3
  2213  000C4C  EC87  F008         	call	PL20	;call to abstracted procedure
  2214  000C50  EC92  F010         	call	___fldiv	;wreg free
  2215  000C54  C00E  F089         	movff	?___fldiv,measure_inductance@Lin
  2216  000C58  C00F  F08A         	movff	?___fldiv+1,measure_inductance@Lin+1
  2217  000C5C  C010  F08B         	movff	?___fldiv+2,measure_inductance@Lin+2
  2218  000C60  C011  F08C         	movff	?___fldiv+3,measure_inductance@Lin+3
  2219                           
  2220                           ;measure.c: 222: unit = 0;
  2221  000C64  0100               	movlb	0	; () banked
  2222  000C66  6B7A               	clrf	measure_inductance@unit& (0+255),b
  2223                           
  2224                           ;measure.c: 223: } else {
  2225  000C68  D024               	goto	l4124
  2226  000C6A                     l4114:
  2227                           
  2228                           ;measure.c: 224: Lin = Lin / (1e+06l);
  2229  000C6A  D860               	call	PL8	;call to abstracted procedure
  2230  000C6C  ECA9  F008         	call	PL34	;call to abstracted procedure
  2231  000C70  EC92  F010         	call	___fldiv	;wreg free
  2232  000C74  C00E  F089         	movff	?___fldiv,measure_inductance@Lin
  2233  000C78  C00F  F08A         	movff	?___fldiv+1,measure_inductance@Lin+1
  2234  000C7C  C010  F08B         	movff	?___fldiv+2,measure_inductance@Lin+2
  2235  000C80  C011  F08C         	movff	?___fldiv+3,measure_inductance@Lin+3
  2236                           
  2237                           ;measure.c: 225: unit = 1;
  2238  000C84  0E01               	movlw	1
  2239  000C86  D013               	goto	L1
  2240  000C88                     l4118:
  2241                           
  2242                           ;measure.c: 228: Lin = Lin / 1e+03l;
  2243  000C88  D851               	call	PL8	;call to abstracted procedure
  2244  000C8A  6E13               	movwf	___fldiv@f2+1,c
  2245  000C8C  0E7A               	movlw	122
  2246  000C8E  6E14               	movwf	___fldiv@f2+2,c
  2247  000C90  0E44               	movlw	68
  2248  000C92  6E15               	movwf	___fldiv@f2+3,c
  2249  000C94  EC92  F010         	call	___fldiv	;wreg free
  2250  000C98  C00E  F089         	movff	?___fldiv,measure_inductance@Lin
  2251  000C9C  C00F  F08A         	movff	?___fldiv+1,measure_inductance@Lin+1
  2252  000CA0  C010  F08B         	movff	?___fldiv+2,measure_inductance@Lin+2
  2253  000CA4  C011  F08C         	movff	?___fldiv+3,measure_inductance@Lin+3
  2254                           
  2255                           ;measure.c: 229: unit = 2;
  2256  000CA8  0E02               	movlw	2
  2257  000CAA  D001               	goto	L1
  2258  000CAC                     l4122:
  2259                           
  2260                           ;measure.c: 232: unit = 3;
  2261  000CAC  0E03               	movlw	3
  2262  000CAE                     L1:
  2263  000CAE  0100               	movlb	0	; () banked
  2264  000CB0  6F7A               	movwf	measure_inductance@unit& (0+255),b
  2265  000CB2                     l4124:
  2266                           
  2267                           ; BSR set to: 0
  2268                           ;measure.c: 234: Lin = Lin * 100;
  2269  000CB2  C089  F01D         	movff	measure_inductance@Lin,___flmul@f1
  2270  000CB6  C08A  F01E         	movff	measure_inductance@Lin+1,___flmul@f1+1
  2271  000CBA  C08B  F01F         	movff	measure_inductance@Lin+2,___flmul@f1+2
  2272  000CBE  C08C  F020         	movff	measure_inductance@Lin+3,___flmul@f1+3
  2273  000CC2  EC99  F008         	call	PL28	;call to abstracted procedure
  2274  000CC6  EC8C  F00F         	call	___flmul	;wreg free
  2275  000CCA  C01D  F089         	movff	?___flmul,measure_inductance@Lin
  2276  000CCE  C01E  F08A         	movff	?___flmul+1,measure_inductance@Lin+1
  2277  000CD2  C01F  F08B         	movff	?___flmul+2,measure_inductance@Lin+2
  2278  000CD6  C020  F08C         	movff	?___flmul+3,measure_inductance@Lin+3
  2279                           
  2280                           ;measure.c: 235: var = (uint16_t)Lin;
  2281  000CDA  C089  F052         	movff	measure_inductance@Lin,___fltol@f1
  2282  000CDE  C08A  F053         	movff	measure_inductance@Lin+1,___fltol@f1+1
  2283  000CE2  C08B  F054         	movff	measure_inductance@Lin+2,___fltol@f1+2
  2284  000CE6  C08C  F055         	movff	measure_inductance@Lin+3,___fltol@f1+3
  2285  000CEA  ECE5  F010         	call	___fltol	;wreg free
  2286  000CEE  C052  F087         	movff	?___fltol,measure_inductance@var
  2287  000CF2  C053  F088         	movff	?___fltol+1,measure_inductance@var+1
  2288                           
  2289                           ; BSR set to: 0
  2290                           ;measure.c: 237: print_reading(var);
  2291  000CF6  C087  F036         	movff	measure_inductance@var,print_reading@measurement
  2292  000CFA  C088  F037         	movff	measure_inductance@var+1,print_reading@measurement+1
  2293  000CFE  ECF3  F011         	call	_print_reading	;wreg free
  2294                           
  2295                           ;measure.c: 238: print_unit(unit);
  2296  000D02  0100               	movlb	0	; () banked
  2297  000D04  517A               	movf	measure_inductance@unit& (0+255),w,b
  2298  000D06  EF4B  F014         	goto	_print_unit
  2299  000D0A                     __end_of_measure_inductance:
  2300                           	opt stack 0
  2301  000D0A                     PL2:
  2302                           	opt stack 24
  2303  000D0A  C0E5  F021         	movff	_F1,___flmul@f2
  2304  000D0E  C0E6  F022         	movff	_F1+1,___flmul@f2+1
  2305  000D12  C0E7  F023         	movff	_F1+2,___flmul@f2+2
  2306  000D16  C0E8  F024         	movff	_F1+3,___flmul@f2+3
  2307  000D1A  C0E5  F01D         	movff	_F1,___flmul@f1
  2308  000D1E  C0E6  F01E         	movff	_F1+1,___flmul@f1+1
  2309  000D22  C0E7  F01F         	movff	_F1+2,___flmul@f1+2
  2310  000D26  C0E8  F020         	movff	_F1+3,___flmul@f1+3
  2311  000D2A  0012               	return	
  2312  000D2C                     __end_ofPL2:
  2313                           	opt stack 0
  2314  000D2C                     PL8:
  2315                           	opt stack 24
  2316  000D2C  C089  F00E         	movff	measure_inductance@Lin,___fldiv@f1
  2317  000D30  C08A  F00F         	movff	measure_inductance@Lin+1,___fldiv@f1+1
  2318  000D34  C08B  F010         	movff	measure_inductance@Lin+2,___fldiv@f1+2
  2319  000D38  C08C  F011         	movff	measure_inductance@Lin+3,___fldiv@f1+3
  2320  000D3C  0E00               	movlw	0
  2321  000D3E  6E12               	movwf	___fldiv@f2,c
  2322  000D40  0C00               	retlw	0
  2323  000D42                     __end_ofPL8:
  2324                           	opt stack 0
  2325                           tblptru	equ	0xFF8
  2326                           tblptrh	equ	0xFF7
  2327                           tblptrl	equ	0xFF6
  2328                           tablat	equ	0xFF5
  2329                           prodl	equ	0xFF3
  2330                           intcon	equ	0xFF2
  2331                           intcon2	equ	0xFF1
  2332                           postinc0	equ	0xFEE
  2333                           wreg	equ	0xFE8
  2334                           postdec1	equ	0xFE5
  2335                           fsr1l	equ	0xFE1
  2336                           indf2	equ	0xFDF
  2337                           postinc2	equ	0xFDE
  2338                           postdec2	equ	0xFDD
  2339                           fsr2h	equ	0xFDA
  2340                           fsr2l	equ	0xFD9
  2341                           status	equ	0xFD8
  2342                           
  2343 ;; *************** function _measure_capacitance *****************
  2344 ;; Defined at:
  2345 ;;		line 118 in file "../../../src/measure.c"
  2346 ;; Parameters:    Size  Location     Type
  2347 ;;		None
  2348 ;; Auto vars:     Size  Location     Type
  2349 ;;  Cin             4   84[BANK0 ] unsigned char 
  2350 ;;  var             2   82[BANK0 ] unsigned int 
  2351 ;;  unit            1   81[BANK0 ] unsigned char 
  2352 ;; Return value:  Size  Location     Type
  2353 ;;		None               void
  2354 ;; Registers used:
  2355 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2356 ;; Tracked objects:
  2357 ;;		On entry : 0/0
  2358 ;;		On exit  : 0/0
  2359 ;;		Unchanged: 0/0
  2360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2361 ;;      Params:         0       0       0       0       0       0       0       0       0
  2362 ;;      Locals:         0      19       0       0       0       0       0       0       0
  2363 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2364 ;;      Totals:         0      19       0       0       0       0       0       0       0
  2365 ;;Total ram usage:       19 bytes
  2366 ;; Hardware stack levels used:    1
  2367 ;; Hardware stack levels required when called:    7
  2368 ;; This function calls:
  2369 ;;		___fldiv
  2370 ;;		___flge
  2371 ;;		___flmul
  2372 ;;		___flsub
  2373 ;;		___fltol
  2374 ;;		___lwtofl
  2375 ;;		_format_double
  2376 ;;		_format_xint32
  2377 ;;		_lcd_gotoxy
  2378 ;;		_measure_freq
  2379 ;;		_print_reading
  2380 ;;		_print_unit
  2381 ;;		_put_str
  2382 ;;		_ser_putch
  2383 ;;		_ser_puts
  2384 ;; This function is called by:
  2385 ;;		_main
  2386 ;; This function uses a non-reentrant model
  2387 ;;
  2388                           
  2389                           	psect	text5
  2390  000D42                     __ptext5:
  2391                           	opt stack 0
  2392  000D42                     _measure_capacitance:
  2393                           	opt stack 23
  2394                           
  2395                           ;measure.c: 119: uint8_t unit;
  2396                           ;measure.c: 120: uint16_t var;
  2397                           ;measure.c: 122: double Cin;
  2398                           ;measure.c: 126: lcd_gotoxy(0, 0);
  2399                           
  2400                           ;incstack = 0
  2401  000D42  0E00               	movlw	0
  2402  000D44  6A08               	clrf	lcd_gotoxy@row,c
  2403  000D46  EC93  F013         	call	_lcd_gotoxy
  2404                           
  2405                           ;measure.c: 127: put_str("Capacity ");
  2406  000D4A  0E7F               	movlw	STR_6& (0+255)
  2407  000D4C  EC21  F014         	call	_put_str
  2408                           
  2409                           ;measure.c: 129: var = measure_freq();
  2410  000D50  EC7C  F00C         	call	_measure_freq	;wreg free
  2411  000D54  C036  F0B2         	movff	?_measure_freq,measure_capacitance@var
  2412  000D58  C037  F0B3         	movff	?_measure_freq+1,measure_capacitance@var+1
  2413                           
  2414                           ;measure.c: 131: F3 = (double)var;
  2415  000D5C  C0B2  F03B         	movff	measure_capacitance@var,___lwtofl@c
  2416  000D60  C0B3  F03C         	movff	measure_capacitance@var+1,___lwtofl@c+1
  2417  000D64  EC36  F014         	call	___lwtofl	;wreg free
  2418  000D68  C03B  F0BC         	movff	?___lwtofl,_F3
  2419  000D6C  C03C  F0BD         	movff	?___lwtofl+1,_F3+1
  2420  000D70  C03D  F0BE         	movff	?___lwtofl+2,_F3+2
  2421  000D74  C03E  F0BF         	movff	?___lwtofl+3,_F3+3
  2422                           
  2423                           ;measure.c: 134: ser_puts("var=");
  2424  000D78  0EC0               	movlw	STR_7& (0+255)
  2425  000D7A  ECB7  F014         	call	_ser_puts
  2426                           
  2427                           ;measure.c: 135: format_xint32( var);
  2428  000D7E  C0B2  F036         	movff	measure_capacitance@var,format_xint32@x
  2429  000D82  C0B3  F037         	movff	measure_capacitance@var+1,format_xint32@x+1
  2430  000D86  6A38               	clrf	format_xint32@x+2,c
  2431  000D88  6A39               	clrf	format_xint32@x+3,c
  2432  000D8A  ECAE  F013         	call	_format_xint32	;wreg free
  2433                           
  2434                           ;measure.c: 136: ser_puts("\r\nF1=");
  2435  000D8E  0E9E               	movlw	STR_8& (0+255)
  2436  000D90  ECB7  F014         	call	_ser_puts
  2437                           
  2438                           ;measure.c: 137: format_double( F1);
  2439  000D94  C0E5  F091         	movff	_F1,format_double@num
  2440  000D98  C0E6  F092         	movff	_F1+1,format_double@num+1
  2441  000D9C  C0E7  F093         	movff	_F1+2,format_double@num+2
  2442  000DA0  C0E8  F094         	movff	_F1+3,format_double@num+3
  2443  000DA4  ECB8  F009         	call	_format_double	;wreg free
  2444                           
  2445                           ;measure.c: 138: ser_putch(' ');
  2446  000DA8  0E20               	movlw	32
  2447  000DAA  EC5F  F014         	call	_ser_putch
  2448                           
  2449                           ;measure.c: 139: format_xint32( *(uint32_t*)&F1);
  2450  000DAE  C0E5  F036         	movff	_F1,format_xint32@x
  2451  000DB2  C0E6  F037         	movff	_F1+1,format_xint32@x+1
  2452  000DB6  C0E7  F038         	movff	_F1+2,format_xint32@x+2
  2453  000DBA  C0E8  F039         	movff	_F1+3,format_xint32@x+3
  2454  000DBE  ECAE  F013         	call	_format_xint32	;wreg free
  2455                           
  2456                           ;measure.c: 140: ser_puts("\r\nF2=");
  2457  000DC2  0EA4               	movlw	STR_9& (0+255)
  2458  000DC4  ECB7  F014         	call	_ser_puts
  2459                           
  2460                           ;measure.c: 141: format_double( F2);
  2461  000DC8  C0B8  F091         	movff	_F2,format_double@num
  2462  000DCC  C0B9  F092         	movff	_F2+1,format_double@num+1
  2463  000DD0  C0BA  F093         	movff	_F2+2,format_double@num+2
  2464  000DD4  C0BB  F094         	movff	_F2+3,format_double@num+3
  2465  000DD8  ECB8  F009         	call	_format_double	;wreg free
  2466                           
  2467                           ;measure.c: 142: ser_putch(' ');
  2468  000DDC  0E20               	movlw	32
  2469  000DDE  EC5F  F014         	call	_ser_putch
  2470                           
  2471                           ;measure.c: 143: format_xint32( *(uint32_t*)&F2);
  2472  000DE2  C0B8  F036         	movff	_F2,format_xint32@x
  2473  000DE6  C0B9  F037         	movff	_F2+1,format_xint32@x+1
  2474  000DEA  C0BA  F038         	movff	_F2+2,format_xint32@x+2
  2475  000DEE  C0BB  F039         	movff	_F2+3,format_xint32@x+3
  2476  000DF2  ECAE  F013         	call	_format_xint32	;wreg free
  2477                           
  2478                           ;measure.c: 144: ser_puts("\r\nF3=");
  2479  000DF6  0EAA               	movlw	STR_10& (0+255)
  2480  000DF8  ECB7  F014         	call	_ser_puts
  2481                           
  2482                           ;measure.c: 145: format_double( F3);
  2483  000DFC  C0BC  F091         	movff	_F3,format_double@num
  2484  000E00  C0BD  F092         	movff	_F3+1,format_double@num+1
  2485  000E04  C0BE  F093         	movff	_F3+2,format_double@num+2
  2486  000E08  C0BF  F094         	movff	_F3+3,format_double@num+3
  2487  000E0C  ECB8  F009         	call	_format_double	;wreg free
  2488                           
  2489                           ;measure.c: 146: ser_putch(' ');
  2490  000E10  0E20               	movlw	32
  2491  000E12  EC5F  F014         	call	_ser_putch
  2492                           
  2493                           ;measure.c: 147: format_xint32( *(uint32_t*)&F3);
  2494  000E16  C0BC  F036         	movff	_F3,format_xint32@x
  2495  000E1A  C0BD  F037         	movff	_F3+1,format_xint32@x+1
  2496  000E1E  C0BE  F038         	movff	_F3+2,format_xint32@x+2
  2497  000E22  C0BF  F039         	movff	_F3+3,format_xint32@x+3
  2498  000E26  ECAE  F013         	call	_format_xint32	;wreg free
  2499                           
  2500                           ;measure.c: 148: ser_puts("\r\nCCal=");
  2501  000E2A  0E89               	movlw	STR_11& (0+255)
  2502  000E2C  ECB7  F014         	call	_ser_puts
  2503                           
  2504                           ;measure.c: 149: format_double( CCal);
  2505  000E30  C0E9  F091         	movff	_CCal,format_double@num
  2506  000E34  C0EA  F092         	movff	_CCal+1,format_double@num+1
  2507  000E38  C0EB  F093         	movff	_CCal+2,format_double@num+2
  2508  000E3C  C0EC  F094         	movff	_CCal+3,format_double@num+3
  2509  000E40  ECB8  F009         	call	_format_double	;wreg free
  2510                           
  2511                           ;measure.c: 150: ser_putch(' ');
  2512  000E44  0E20               	movlw	32
  2513  000E46  EC5F  F014         	call	_ser_putch
  2514                           
  2515                           ;measure.c: 151: format_xint32( *(uint32_t*)&CCal);
  2516  000E4A  C0E9  F036         	movff	_CCal,format_xint32@x
  2517  000E4E  C0EA  F037         	movff	_CCal+1,format_xint32@x+1
  2518  000E52  C0EB  F038         	movff	_CCal+2,format_xint32@x+2
  2519  000E56  C0EC  F039         	movff	_CCal+3,format_xint32@x+3
  2520  000E5A  ECAE  F013         	call	_format_xint32	;wreg free
  2521                           
  2522                           ;measure.c: 152: ser_puts("\r\n");
  2523  000E5E  0E9B               	movlw	(STR_29+3)& (0+255)
  2524  000E60  ECB7  F014         	call	_ser_puts
  2525                           
  2526                           ;measure.c: 156: if(F3 > F1)
  2527  000E64  D92F               	call	PL6	;call to abstracted procedure
  2528  000E66  EC7D  F012         	call	___flge	;wreg free
  2529  000E6A  E208               	bc	l4052
  2530                           
  2531                           ;measure.c: 157: F3 = F1;
  2532  000E6C  C0E5  F0BC         	movff	_F1,_F3
  2533  000E70  C0E6  F0BD         	movff	_F1+1,_F3+1
  2534  000E74  C0E7  F0BE         	movff	_F1+2,_F3+2
  2535  000E78  C0E8  F0BF         	movff	_F1+3,_F3+3
  2536  000E7C                     l4052:
  2537                           
  2538                           ;measure.c: 159: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2539  000E7C  D912               	call	PL4	;call to abstracted procedure
  2540  000E7E  EC8C  F00F         	call	___flmul	;wreg free
  2541  000E82  C01D  F03C         	movff	?___flmul,___flsub@f2
  2542  000E86  C01E  F03D         	movff	?___flmul+1,___flsub@f2+1
  2543  000E8A  C01F  F03E         	movff	?___flmul+2,___flsub@f2+2
  2544  000E8E  C020  F03F         	movff	?___flmul+3,___flsub@f2+3
  2545  000E92  EC85  F006         	call	PL2	;call to abstracted procedure
  2546  000E96  EC8C  F00F         	call	___flmul	;wreg free
  2547  000E9A  C01D  F038         	movff	?___flmul,___flsub@f1
  2548  000E9E  C01E  F039         	movff	?___flmul+1,___flsub@f1+1
  2549  000EA2  C01F  F03A         	movff	?___flmul+2,___flsub@f1+2
  2550  000EA6  C020  F03B         	movff	?___flmul+3,___flsub@f1+3
  2551  000EAA  EC35  F013         	call	___flsub	;wreg free
  2552  000EAE  C038  F0A5         	movff	?___flsub,_measure_capacitance$1094
  2553  000EB2  C039  F0A6         	movff	?___flsub+1,_measure_capacitance$1094+1
  2554  000EB6  C03A  F0A7         	movff	?___flsub+2,_measure_capacitance$1094+2
  2555  000EBA  C03B  F0A8         	movff	?___flsub+3,_measure_capacitance$1094+3
  2556                           
  2557                           ;measure.c: 159: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2558  000EBE  C0B8  F021         	movff	_F2,___flmul@f2
  2559  000EC2  C0B9  F022         	movff	_F2+1,___flmul@f2+1
  2560  000EC6  C0BA  F023         	movff	_F2+2,___flmul@f2+2
  2561  000ECA  C0BB  F024         	movff	_F2+3,___flmul@f2+3
  2562  000ECE  C0A5  F01D         	movff	_measure_capacitance$1094,___flmul@f1
  2563  000ED2  C0A6  F01E         	movff	_measure_capacitance$1094+1,___flmul@f1+1
  2564  000ED6  C0A7  F01F         	movff	_measure_capacitance$1094+2,___flmul@f1+2
  2565  000EDA  C0A8  F020         	movff	_measure_capacitance$1094+3,___flmul@f1+3
  2566  000EDE  EC8C  F00F         	call	___flmul	;wreg free
  2567  000EE2  C01D  F0A9         	movff	?___flmul,_measure_capacitance$1095
  2568  000EE6  C01E  F0AA         	movff	?___flmul+1,_measure_capacitance$1095+1
  2569  000EEA  C01F  F0AB         	movff	?___flmul+2,_measure_capacitance$1095+2
  2570  000EEE  C020  F0AC         	movff	?___flmul+3,_measure_capacitance$1095+3
  2571                           
  2572                           ;measure.c: 159: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2573  000EF2  C0B8  F021         	movff	_F2,___flmul@f2
  2574  000EF6  C0B9  F022         	movff	_F2+1,___flmul@f2+1
  2575  000EFA  C0BA  F023         	movff	_F2+2,___flmul@f2+2
  2576  000EFE  C0BB  F024         	movff	_F2+3,___flmul@f2+3
  2577  000F02  C0A9  F01D         	movff	_measure_capacitance$1095,___flmul@f1
  2578  000F06  C0AA  F01E         	movff	_measure_capacitance$1095+1,___flmul@f1+1
  2579  000F0A  C0AB  F01F         	movff	_measure_capacitance$1095+2,___flmul@f1+2
  2580  000F0E  C0AC  F020         	movff	_measure_capacitance$1095+3,___flmul@f1+3
  2581  000F12  EC8C  F00F         	call	___flmul	;wreg free
  2582  000F16  C01D  F0AD         	movff	?___flmul,_measure_capacitance$1096
  2583  000F1A  C01E  F0AE         	movff	?___flmul+1,_measure_capacitance$1096+1
  2584  000F1E  C01F  F0AF         	movff	?___flmul+2,_measure_capacitance$1096+2
  2585  000F22  C020  F0B0         	movff	?___flmul+3,_measure_capacitance$1096+3
  2586                           
  2587                           ;measure.c: 159: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2588  000F26  C0AD  F01D         	movff	_measure_capacitance$1096,___flmul@f1
  2589  000F2A  C0AE  F01E         	movff	_measure_capacitance$1096+1,___flmul@f1+1
  2590  000F2E  C0AF  F01F         	movff	_measure_capacitance$1096+2,___flmul@f1+2
  2591  000F32  C0B0  F020         	movff	_measure_capacitance$1096+3,___flmul@f1+3
  2592  000F36  C0E9  F021         	movff	_CCal,___flmul@f2
  2593  000F3A  C0EA  F022         	movff	_CCal+1,___flmul@f2+1
  2594  000F3E  C0EB  F023         	movff	_CCal+2,___flmul@f2+2
  2595  000F42  C0EC  F024         	movff	_CCal+3,___flmul@f2+3
  2596  000F46  EC8C  F00F         	call	___flmul	;wreg free
  2597  000F4A  C01D  F0B4         	movff	?___flmul,measure_capacitance@Cin
  2598  000F4E  C01E  F0B5         	movff	?___flmul+1,measure_capacitance@Cin+1
  2599  000F52  C01F  F0B6         	movff	?___flmul+2,measure_capacitance@Cin+2
  2600  000F56  C020  F0B7         	movff	?___flmul+3,measure_capacitance@Cin+3
  2601                           
  2602                           ;measure.c: 163: ser_puts("Cin=");
  2603  000F5A  0EBB               	movlw	STR_13& (0+255)
  2604  000F5C  ECB7  F014         	call	_ser_puts
  2605                           
  2606                           ;measure.c: 164: format_double( Cin);
  2607  000F60  C0B4  F091         	movff	measure_capacitance@Cin,format_double@num
  2608  000F64  C0B5  F092         	movff	measure_capacitance@Cin+1,format_double@num+1
  2609  000F68  C0B6  F093         	movff	measure_capacitance@Cin+2,format_double@num+2
  2610  000F6C  C0B7  F094         	movff	measure_capacitance@Cin+3,format_double@num+3
  2611  000F70  ECB8  F009         	call	_format_double	;wreg free
  2612                           
  2613                           ;measure.c: 165: ser_putch(' ');
  2614  000F74  0E20               	movlw	32
  2615  000F76  EC5F  F014         	call	_ser_putch
  2616                           
  2617                           ;measure.c: 166: format_xint32( *(uint32_t*)&Cin);
  2618  000F7A  C0B4  F036         	movff	measure_capacitance@Cin,format_xint32@x
  2619  000F7E  C0B5  F037         	movff	measure_capacitance@Cin+1,format_xint32@x+1
  2620  000F82  C0B6  F038         	movff	measure_capacitance@Cin+2,format_xint32@x+2
  2621  000F86  C0B7  F039         	movff	measure_capacitance@Cin+3,format_xint32@x+3
  2622  000F8A  ECAE  F013         	call	_format_xint32	;wreg free
  2623                           
  2624                           ;measure.c: 167: ser_puts("\r\n");
  2625  000F8E  0E9B               	movlw	(STR_29+3)& (0+255)
  2626  000F90  ECB7  F014         	call	_ser_puts
  2627                           
  2628                           ;measure.c: 169: if(Cin > 999) {
  2629  000F94  D8D6               	call	PL32	;call to abstracted procedure
  2630  000F96  C0B4  F008         	movff	measure_capacitance@Cin,___flge@ff2
  2631  000F9A  C0B5  F009         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2632  000F9E  C0B6  F00A         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2633  000FA2  C0B7  F00B         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2634  000FA6  EC7D  F012         	call	___flge	;wreg free
  2635  000FAA  E24D               	bc	l4082
  2636                           
  2637                           ;measure.c: 170: if(Cin > (999e+03l)) {
  2638  000FAC  D8B9               	call	PL22	;call to abstracted procedure
  2639  000FAE  C0B4  F008         	movff	measure_capacitance@Cin,___flge@ff2
  2640  000FB2  C0B5  F009         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2641  000FB6  C0B6  F00A         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2642  000FBA  C0B7  F00B         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2643  000FBE  EC7D  F012         	call	___flge	;wreg free
  2644  000FC2  E22F               	bc	l4078
  2645                           
  2646                           ;measure.c: 171: if(Cin > (999e+06l)) {
  2647  000FC4  D89B               	call	PL14	;call to abstracted procedure
  2648  000FC6  C0B4  F008         	movff	measure_capacitance@Cin,___flge@ff2
  2649  000FCA  C0B5  F009         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2650  000FCE  C0B6  F00A         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2651  000FD2  C0B7  F00B         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2652  000FD6  EC7D  F012         	call	___flge	;wreg free
  2653  000FDA  E215               	bc	l4074
  2654                           
  2655                           ;measure.c: 172: Cin = Cin / (1e+09);
  2656  000FDC  C0B4  F00E         	movff	measure_capacitance@Cin,___fldiv@f1
  2657  000FE0  C0B5  F00F         	movff	measure_capacitance@Cin+1,___fldiv@f1+1
  2658  000FE4  C0B6  F010         	movff	measure_capacitance@Cin+2,___fldiv@f1+2
  2659  000FE8  C0B7  F011         	movff	measure_capacitance@Cin+3,___fldiv@f1+3
  2660  000FEC  D890               	call	PL20	;call to abstracted procedure
  2661  000FEE  EC92  F010         	call	___fldiv	;wreg free
  2662  000FF2  C00E  F0B4         	movff	?___fldiv,measure_capacitance@Cin
  2663  000FF6  C00F  F0B5         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2664  000FFA  C010  F0B6         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2665  000FFE  C011  F0B7         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2666                           
  2667                           ;measure.c: 173: unit = 4;
  2668  001002  0E04               	movlw	4
  2669  001004  D021               	goto	L2
  2670  001006                     l4074:
  2671                           
  2672                           ;measure.c: 175: Cin = Cin / (1e+06);
  2673  001006  D86F               	call	PL10	;call to abstracted procedure
  2674  001008  D8A4               	call	PL34	;call to abstracted procedure
  2675  00100A  EC92  F010         	call	___fldiv	;wreg free
  2676  00100E  C00E  F0B4         	movff	?___fldiv,measure_capacitance@Cin
  2677  001012  C00F  F0B5         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2678  001016  C010  F0B6         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2679  00101A  C011  F0B7         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2680                           
  2681                           ;measure.c: 176: unit = 5;
  2682  00101E  0E05               	movlw	5
  2683  001020  D013               	goto	L2
  2684  001022                     l4078:
  2685                           
  2686                           ;measure.c: 179: Cin = Cin / 1e+03;
  2687  001022  D861               	call	PL10	;call to abstracted procedure
  2688  001024  6E13               	movwf	___fldiv@f2+1,c
  2689  001026  0E7A               	movlw	122
  2690  001028  6E14               	movwf	___fldiv@f2+2,c
  2691  00102A  0E44               	movlw	68
  2692  00102C  6E15               	movwf	___fldiv@f2+3,c
  2693  00102E  EC92  F010         	call	___fldiv	;wreg free
  2694  001032  C00E  F0B4         	movff	?___fldiv,measure_capacitance@Cin
  2695  001036  C00F  F0B5         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2696  00103A  C010  F0B6         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2697  00103E  C011  F0B7         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2698                           
  2699                           ;measure.c: 180: unit = 6;
  2700  001042  0E06               	movlw	6
  2701  001044  D001               	goto	L2
  2702  001046                     l4082:
  2703                           
  2704                           ;measure.c: 183: unit = 7;
  2705  001046  0E07               	movlw	7
  2706  001048                     L2:
  2707  001048  0100               	movlb	0	; () banked
  2708  00104A  6FB1               	movwf	measure_capacitance@unit& (0+255),b
  2709                           
  2710                           ; BSR set to: 0
  2711                           ;measure.c: 185: Cin = Cin * 100;
  2712  00104C  C0B4  F01D         	movff	measure_capacitance@Cin,___flmul@f1
  2713  001050  C0B5  F01E         	movff	measure_capacitance@Cin+1,___flmul@f1+1
  2714  001054  C0B6  F01F         	movff	measure_capacitance@Cin+2,___flmul@f1+2
  2715  001058  C0B7  F020         	movff	measure_capacitance@Cin+3,___flmul@f1+3
  2716  00105C  D86A               	call	PL28	;call to abstracted procedure
  2717  00105E  EC8C  F00F         	call	___flmul	;wreg free
  2718  001062  C01D  F0B4         	movff	?___flmul,measure_capacitance@Cin
  2719  001066  C01E  F0B5         	movff	?___flmul+1,measure_capacitance@Cin+1
  2720  00106A  C01F  F0B6         	movff	?___flmul+2,measure_capacitance@Cin+2
  2721  00106E  C020  F0B7         	movff	?___flmul+3,measure_capacitance@Cin+3
  2722                           
  2723                           ;measure.c: 186: var = (uint16_t)Cin;
  2724  001072  C0B4  F052         	movff	measure_capacitance@Cin,___fltol@f1
  2725  001076  C0B5  F053         	movff	measure_capacitance@Cin+1,___fltol@f1+1
  2726  00107A  C0B6  F054         	movff	measure_capacitance@Cin+2,___fltol@f1+2
  2727  00107E  C0B7  F055         	movff	measure_capacitance@Cin+3,___fltol@f1+3
  2728  001082  ECE5  F010         	call	___fltol	;wreg free
  2729  001086  C052  F0B2         	movff	?___fltol,measure_capacitance@var
  2730  00108A  C053  F0B3         	movff	?___fltol+1,measure_capacitance@var+1
  2731                           
  2732                           ; BSR set to: 0
  2733                           ;measure.c: 188: print_reading(var);
  2734  00108E  C0B2  F036         	movff	measure_capacitance@var,print_reading@measurement
  2735  001092  C0B3  F037         	movff	measure_capacitance@var+1,print_reading@measurement+1
  2736  001096  ECF3  F011         	call	_print_reading	;wreg free
  2737                           
  2738                           ;measure.c: 189: print_unit(unit);
  2739  00109A  0100               	movlb	0	; () banked
  2740  00109C  51B1               	movf	measure_capacitance@unit& (0+255),w,b
  2741  00109E  EF4B  F014         	goto	_print_unit
  2742  0010A2                     __end_of_measure_capacitance:
  2743                           	opt stack 0
  2744  0010A2                     PL4:
  2745                           	opt stack 24
  2746  0010A2  C0BC  F021         	movff	_F3,___flmul@f2
  2747  0010A6  C0BD  F022         	movff	_F3+1,___flmul@f2+1
  2748  0010AA  C0BE  F023         	movff	_F3+2,___flmul@f2+2
  2749  0010AE  C0BF  F024         	movff	_F3+3,___flmul@f2+3
  2750  0010B2  C0BC  F01D         	movff	_F3,___flmul@f1
  2751  0010B6  C0BD  F01E         	movff	_F3+1,___flmul@f1+1
  2752  0010BA  C0BE  F01F         	movff	_F3+2,___flmul@f1+2
  2753  0010BE  C0BF  F020         	movff	_F3+3,___flmul@f1+3
  2754  0010C2  0012               	return	
  2755  0010C4                     __end_ofPL4:
  2756                           	opt stack 0
  2757  0010C4                     PL6:
  2758                           	opt stack 24
  2759  0010C4  C0E5  F004         	movff	_F1,___flge@ff1
  2760  0010C8  C0E6  F005         	movff	_F1+1,___flge@ff1+1
  2761  0010CC  C0E7  F006         	movff	_F1+2,___flge@ff1+2
  2762  0010D0  C0E8  F007         	movff	_F1+3,___flge@ff1+3
  2763  0010D4  C0BC  F008         	movff	_F3,___flge@ff2
  2764  0010D8  C0BD  F009         	movff	_F3+1,___flge@ff2+1
  2765  0010DC  C0BE  F00A         	movff	_F3+2,___flge@ff2+2
  2766  0010E0  C0BF  F00B         	movff	_F3+3,___flge@ff2+3
  2767  0010E4  0012               	return	
  2768  0010E6                     __end_ofPL6:
  2769                           	opt stack 0
  2770  0010E6                     PL10:
  2771                           	opt stack 23
  2772  0010E6  C0B4  F00E         	movff	measure_capacitance@Cin,___fldiv@f1
  2773  0010EA  C0B5  F00F         	movff	measure_capacitance@Cin+1,___fldiv@f1+1
  2774  0010EE  C0B6  F010         	movff	measure_capacitance@Cin+2,___fldiv@f1+2
  2775  0010F2  C0B7  F011         	movff	measure_capacitance@Cin+3,___fldiv@f1+3
  2776  0010F6  0E00               	movlw	0
  2777  0010F8  6E12               	movwf	___fldiv@f2,c
  2778  0010FA  0C00               	retlw	0
  2779  0010FC                     __end_ofPL10:
  2780                           	opt stack 0
  2781  0010FC                     PL14:
  2782                           	opt stack 24
  2783  0010FC  0E1F               	movlw	31
  2784  0010FE  6E04               	movwf	___flge@ff1,c
  2785  001100  0E2E               	movlw	46
  2786  001102  6E05               	movwf	___flge@ff1+1,c
  2787  001104  0E6E               	movlw	110
  2788  001106  6E06               	movwf	___flge@ff1+2,c
  2789  001108  0E4E               	movlw	78
  2790  00110A  6E07               	movwf	___flge@ff1+3,c
  2791  00110C  0C4E               	retlw	78
  2792  00110E                     __end_ofPL14:
  2793                           	opt stack 0
  2794  00110E                     PL20:
  2795                           	opt stack 24
  2796  00110E  0E28               	movlw	40
  2797  001110  6E12               	movwf	___fldiv@f2,c
  2798  001112  0E6B               	movlw	107
  2799  001114  6E13               	movwf	___fldiv@f2+1,c
  2800  001116  0E6E               	movlw	110
  2801  001118  6E14               	movwf	___fldiv@f2+2,c
  2802  00111A  0E4E               	movlw	78
  2803  00111C  6E15               	movwf	___fldiv@f2+3,c
  2804  00111E  0C4E               	retlw	78
  2805  001120                     __end_ofPL20:
  2806                           	opt stack 0
  2807  001120                     PL22:
  2808                           	opt stack 24
  2809  001120  0E80               	movlw	128
  2810  001122  6E04               	movwf	___flge@ff1,c
  2811  001124  0EE5               	movlw	229
  2812  001126  6E05               	movwf	___flge@ff1+1,c
  2813  001128  0E73               	movlw	115
  2814  00112A  6E06               	movwf	___flge@ff1+2,c
  2815  00112C  0E49               	movlw	73
  2816  00112E  6E07               	movwf	___flge@ff1+3,c
  2817  001130  0C49               	retlw	73
  2818  001132                     __end_ofPL22:
  2819                           	opt stack 0
  2820  001132                     PL28:
  2821                           	opt stack 24
  2822  001132  0E00               	movlw	0
  2823  001134  6E21               	movwf	___flmul@f2,c
  2824  001136  6E22               	movwf	___flmul@f2+1,c
  2825  001138  0EC8               	movlw	200
  2826  00113A  6E23               	movwf	___flmul@f2+2,c
  2827  00113C  0E42               	movlw	66
  2828  00113E  6E24               	movwf	___flmul@f2+3,c
  2829  001140  0C42               	retlw	66
  2830  001142                     __end_ofPL28:
  2831                           	opt stack 0
  2832  001142                     PL32:
  2833                           	opt stack 24
  2834  001142  6A04               	clrf	___flge@ff1,c
  2835  001144  0EC0               	movlw	192
  2836  001146  6E05               	movwf	___flge@ff1+1,c
  2837  001148  0E79               	movlw	121
  2838  00114A  6E06               	movwf	___flge@ff1+2,c
  2839  00114C  0E44               	movlw	68
  2840  00114E  6E07               	movwf	___flge@ff1+3,c
  2841  001150  0C44               	retlw	68
  2842  001152                     __end_ofPL32:
  2843                           	opt stack 0
  2844  001152                     PL34:
  2845                           	opt stack 24
  2846  001152  0E24               	movlw	36
  2847  001154  6E13               	movwf	___fldiv@f2+1,c
  2848  001156  0E74               	movlw	116
  2849  001158  6E14               	movwf	___fldiv@f2+2,c
  2850  00115A  0E49               	movlw	73
  2851  00115C  6E15               	movwf	___fldiv@f2+3,c
  2852  00115E  0C49               	retlw	73
  2853  001160                     __end_ofPL34:
  2854                           	opt stack 0
  2855                           tblptru	equ	0xFF8
  2856                           tblptrh	equ	0xFF7
  2857                           tblptrl	equ	0xFF6
  2858                           tablat	equ	0xFF5
  2859                           prodl	equ	0xFF3
  2860                           intcon	equ	0xFF2
  2861                           intcon2	equ	0xFF1
  2862                           postinc0	equ	0xFEE
  2863                           wreg	equ	0xFE8
  2864                           postdec1	equ	0xFE5
  2865                           fsr1l	equ	0xFE1
  2866                           indf2	equ	0xFDF
  2867                           postinc2	equ	0xFDE
  2868                           postdec2	equ	0xFDD
  2869                           fsr2h	equ	0xFDA
  2870                           fsr2l	equ	0xFD9
  2871                           status	equ	0xFD8
  2872                           
  2873 ;; *************** function _print_unit *****************
  2874 ;; Defined at:
  2875 ;;		line 412 in file "../../../src/print.c"
  2876 ;; Parameters:    Size  Location     Type
  2877 ;;  unit            1    wreg     unsigned char 
  2878 ;; Auto vars:     Size  Location     Type
  2879 ;;  unit            1    0[COMRAM] unsigned char 
  2880 ;; Return value:  Size  Location     Type
  2881 ;;		None               void
  2882 ;; Registers used:
  2883 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2884 ;; Tracked objects:
  2885 ;;		On entry : F/0
  2886 ;;		On exit  : 0/0
  2887 ;;		Unchanged: 0/0
  2888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2889 ;;      Params:         0       0       0       0       0       0       0       0       0
  2890 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2891 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2892 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2893 ;;Total ram usage:        2 bytes
  2894 ;; Hardware stack levels used:    1
  2895 ;; Hardware stack levels required when called:    5
  2896 ;; This function calls:
  2897 ;;		_lcd_gotoxy
  2898 ;;		_ser_puts
  2899 ;; This function is called by:
  2900 ;;		_measure_capacitance
  2901 ;;		_measure_inductance
  2902 ;; This function uses a non-reentrant model
  2903 ;;
  2904                           
  2905                           	psect	text6
  2906  002896                     __ptext6:
  2907                           	opt stack 0
  2908  002896                     _print_unit:
  2909                           	opt stack 24
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;print.c: 420: static const char* units[8] = {"H", "mH", "uH", "nH", "mF", "uF", "nF", "
      +                          pF"};
  2913                           ;print.c: 421: lcd_gotoxy(14, 0);
  2914                           
  2915                           ;incstack = 0
  2916  002896  6A08               	clrf	lcd_gotoxy@row,c
  2917  002898  0E0E               	movlw	14
  2918  00289A  EC93  F013         	call	_lcd_gotoxy
  2919                           
  2920                           ;print.c: 425: lcd_gotoxy(16 - (buffer.n - buffer.p), 0);
  2921  00289E  6A08               	clrf	lcd_gotoxy@row,c
  2922  0028A0  0100               	movlb	0	; () banked
  2923  0028A2  39E4               	swapf	(_buffer+16)& (0+255),w,b
  2924  0028A4  0B0F               	andlw	15
  2925  0028A6  6E0E               	movwf	??_print_unit& (0+255),c
  2926  0028A8  51E4               	movf	(_buffer+16)& (0+255),w,b
  2927  0028AA  0B0F               	andlw	15
  2928  0028AC  6E0F               	movwf	(??_print_unit+1)& (0+255),c
  2929  0028AE  500E               	movf	??_print_unit,w,c
  2930  0028B0  5C0F               	subwf	??_print_unit+1,w,c
  2931  0028B2  0F10               	addlw	16
  2932  0028B4  EC93  F013         	call	_lcd_gotoxy
  2933                           
  2934                           ;print.c: 428: ser_puts("\r\n");
  2935  0028B8  0E9B               	movlw	(STR_29+3)& (0+255)
  2936  0028BA  EFB7  F014         	goto	_ser_puts
  2937  0028BE                     __end_of_print_unit:
  2938                           	opt stack 0
  2939                           tblptru	equ	0xFF8
  2940                           tblptrh	equ	0xFF7
  2941                           tblptrl	equ	0xFF6
  2942                           tablat	equ	0xFF5
  2943                           prodl	equ	0xFF3
  2944                           intcon	equ	0xFF2
  2945                           intcon2	equ	0xFF1
  2946                           postinc0	equ	0xFEE
  2947                           wreg	equ	0xFE8
  2948                           postdec1	equ	0xFE5
  2949                           fsr1l	equ	0xFE1
  2950                           indf2	equ	0xFDF
  2951                           postinc2	equ	0xFDE
  2952                           postdec2	equ	0xFDD
  2953                           fsr2h	equ	0xFDA
  2954                           fsr2l	equ	0xFD9
  2955                           status	equ	0xFD8
  2956                           
  2957 ;; *************** function _print_reading *****************
  2958 ;; Defined at:
  2959 ;;		line 433 in file "../../../src/print.c"
  2960 ;; Parameters:    Size  Location     Type
  2961 ;;  measurement     2   53[COMRAM] unsigned int 
  2962 ;; Auto vars:     Size  Location     Type
  2963 ;;		None
  2964 ;; Return value:  Size  Location     Type
  2965 ;;		None               void
  2966 ;; Registers used:
  2967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2968 ;; Tracked objects:
  2969 ;;		On entry : F/0
  2970 ;;		On exit  : 0/0
  2971 ;;		Unchanged: 0/0
  2972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2973 ;;      Params:         2       0       0       0       0       0       0       0       0
  2974 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2975 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2976 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2977 ;;Total ram usage:        6 bytes
  2978 ;; Hardware stack levels used:    1
  2979 ;; Hardware stack levels required when called:    5
  2980 ;; This function calls:
  2981 ;;		___lwdiv
  2982 ;;		___lwmod
  2983 ;;		_format_number
  2984 ;;		_lcd_gotoxy
  2985 ;;		_lcd_puts
  2986 ;; This function is called by:
  2987 ;;		_measure_capacitance
  2988 ;;		_measure_inductance
  2989 ;; This function uses a non-reentrant model
  2990 ;;
  2991                           
  2992                           	psect	text7
  2993  0023E6                     __ptext7:
  2994                           	opt stack 0
  2995  0023E6                     _print_reading:
  2996                           	opt stack 24
  2997                           
  2998                           ; BSR set to: 0
  2999                           ;print.c: 460: lcd_gotoxy(9, 0);
  3000                           
  3001                           ;incstack = 0
  3002  0023E6  6A08               	clrf	lcd_gotoxy@row,c
  3003  0023E8  0E09               	movlw	9
  3004  0023EA  EC93  F013         	call	_lcd_gotoxy
  3005                           
  3006                           ;print.c: 461: lcd_puts("     ");
  3007  0023EE  0E92               	movlw	(STR_30+1)& (0+255)
  3008  0023F0  EC0C  F014         	call	_lcd_puts
  3009                           
  3010                           ;print.c: 462: lcd_gotoxy(9, 0);
  3011  0023F4  6A08               	clrf	lcd_gotoxy@row,c
  3012  0023F6  0E09               	movlw	9
  3013  0023F8  EC93  F013         	call	_lcd_gotoxy
  3014                           
  3015                           ;print.c: 464: format_number( measurement / 100, 10, 0);
  3016  0023FC  C036  F004         	movff	print_reading@measurement,___lwdiv@dividend
  3017  002400  C037  F005         	movff	print_reading@measurement+1,___lwdiv@dividend+1
  3018  002404  6A07               	clrf	___lwdiv@divisor+1,c
  3019  002406  0E64               	movlw	100
  3020  002408  6E06               	movwf	___lwdiv@divisor,c
  3021  00240A  ECC8  F012         	call	___lwdiv	;wreg free
  3022  00240E  C004  F038         	movff	?___lwdiv,_print_reading$1104
  3023  002412  C005  F039         	movff	?___lwdiv+1,_print_reading$1104+1
  3024                           
  3025                           ;print.c: 464: format_number( measurement / 100, 10, 0);
  3026  002416  C038  F00B         	movff	_print_reading$1104,format_number@n
  3027  00241A  C039  F00C         	movff	_print_reading$1104+1,format_number@n+1
  3028  00241E  0E0A               	movlw	10
  3029  002420  6E0D               	movwf	format_number@base,c
  3030  002422  6A0E               	clrf	format_number@pad,c
  3031  002424  EC3E  F010         	call	_format_number	;wreg free
  3032                           
  3033                           ;print.c: 466: format_number( measurement % 100, 10, 0);
  3034  002428  C036  F004         	movff	print_reading@measurement,___lwmod@dividend
  3035  00242C  C037  F005         	movff	print_reading@measurement+1,___lwmod@dividend+1
  3036  002430  6A07               	clrf	___lwmod@divisor+1,c
  3037  002432  0E64               	movlw	100
  3038  002434  6E06               	movwf	___lwmod@divisor,c
  3039  002436  EC57  F013         	call	___lwmod	;wreg free
  3040  00243A  C004  F03A         	movff	?___lwmod,_print_reading$1105
  3041  00243E  C005  F03B         	movff	?___lwmod+1,_print_reading$1105+1
  3042                           
  3043                           ;print.c: 466: format_number( measurement % 100, 10, 0);
  3044  002442  C03A  F00B         	movff	_print_reading$1105,format_number@n
  3045  002446  C03B  F00C         	movff	_print_reading$1105+1,format_number@n+1
  3046  00244A  0E0A               	movlw	10
  3047  00244C  6E0D               	movwf	format_number@base,c
  3048  00244E  6A0E               	clrf	format_number@pad,c
  3049  002450  EF3E  F010         	goto	_format_number	;wreg free
  3050  002454                     __end_of_print_reading:
  3051                           	opt stack 0
  3052                           tblptru	equ	0xFF8
  3053                           tblptrh	equ	0xFF7
  3054                           tblptrl	equ	0xFF6
  3055                           tablat	equ	0xFF5
  3056                           prodl	equ	0xFF3
  3057                           intcon	equ	0xFF2
  3058                           intcon2	equ	0xFF1
  3059                           postinc0	equ	0xFEE
  3060                           wreg	equ	0xFE8
  3061                           postdec1	equ	0xFE5
  3062                           fsr1l	equ	0xFE1
  3063                           indf2	equ	0xFDF
  3064                           postinc2	equ	0xFDE
  3065                           postdec2	equ	0xFDD
  3066                           fsr2h	equ	0xFDA
  3067                           fsr2l	equ	0xFD9
  3068                           status	equ	0xFD8
  3069                           
  3070 ;; *************** function _format_xint32 *****************
  3071 ;; Defined at:
  3072 ;;		line 49 in file "../../../lib/format.c"
  3073 ;; Parameters:    Size  Location     Type
  3074 ;;  x               4   53[COMRAM] unsigned long 
  3075 ;; Auto vars:     Size  Location     Type
  3076 ;;		None
  3077 ;; Return value:  Size  Location     Type
  3078 ;;		None               void
  3079 ;; Registers used:
  3080 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3081 ;; Tracked objects:
  3082 ;;		On entry : 0/0
  3083 ;;		On exit  : 0/0
  3084 ;;		Unchanged: 0/0
  3085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3086 ;;      Params:         4       0       0       0       0       0       0       0       0
  3087 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3088 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3089 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3090 ;;Total ram usage:        4 bytes
  3091 ;; Hardware stack levels used:    1
  3092 ;; Hardware stack levels required when called:    3
  3093 ;; This function calls:
  3094 ;;		_buffer_putch
  3095 ;;		_format_number
  3096 ;; This function is called by:
  3097 ;;		_measure_capacitance
  3098 ;; This function uses a non-reentrant model
  3099 ;;
  3100                           
  3101                           	psect	text8
  3102  00275C                     __ptext8:
  3103                           	opt stack 0
  3104  00275C                     _format_xint32:
  3105                           	opt stack 26
  3106                           
  3107                           ;format.c: 50: buffer_putch('0');
  3108                           
  3109                           ;incstack = 0
  3110  00275C  0E30               	movlw	48
  3111  00275E  EC11  F013         	call	_buffer_putch
  3112                           
  3113                           ;format.c: 51: buffer_putch('x');
  3114  002762  0E78               	movlw	120
  3115  002764  EC11  F013         	call	_buffer_putch
  3116                           
  3117                           ;format.c: 52: format_number((uint16_t)(x >> 16), 16, -4);
  3118  002768  C038  F00B         	movff	format_xint32@x+2,format_number@n
  3119  00276C  C039  F00C         	movff	format_xint32@x+3,format_number@n+1
  3120  002770  0E10               	movlw	16
  3121  002772  6E0D               	movwf	format_number@base,c
  3122  002774  0EFC               	movlw	252
  3123  002776  6E0E               	movwf	format_number@pad,c
  3124  002778  EC3E  F010         	call	_format_number	;wreg free
  3125                           
  3126                           ;format.c: 53: format_number((uint16_t)(x & 0xffff), 16, -4);
  3127  00277C  C036  F00B         	movff	format_xint32@x,format_number@n
  3128  002780  C037  F00C         	movff	format_xint32@x+1,format_number@n+1
  3129  002784  0E10               	movlw	16
  3130  002786  6E0D               	movwf	format_number@base,c
  3131  002788  0EFC               	movlw	252
  3132  00278A  6E0E               	movwf	format_number@pad,c
  3133  00278C  EF3E  F010         	goto	_format_number	;wreg free
  3134  002790                     __end_of_format_xint32:
  3135                           	opt stack 0
  3136                           tblptru	equ	0xFF8
  3137                           tblptrh	equ	0xFF7
  3138                           tblptrl	equ	0xFF6
  3139                           tablat	equ	0xFF5
  3140                           prodl	equ	0xFF3
  3141                           intcon	equ	0xFF2
  3142                           intcon2	equ	0xFF1
  3143                           postinc0	equ	0xFEE
  3144                           wreg	equ	0xFE8
  3145                           postdec1	equ	0xFE5
  3146                           fsr1l	equ	0xFE1
  3147                           indf2	equ	0xFDF
  3148                           postinc2	equ	0xFDE
  3149                           postdec2	equ	0xFDD
  3150                           fsr2h	equ	0xFDA
  3151                           fsr2l	equ	0xFD9
  3152                           status	equ	0xFD8
  3153                           
  3154 ;; *************** function _format_double *****************
  3155 ;; Defined at:
  3156 ;;		line 75 in file "../../../lib/format.c"
  3157 ;; Parameters:    Size  Location     Type
  3158 ;;  num             4   49[BANK0 ] unsigned long 
  3159 ;; Auto vars:     Size  Location     Type
  3160 ;;  weight          4   61[BANK0 ] unsigned long 
  3161 ;;  m               2   67[BANK0 ] short 
  3162 ;;  digit           2   65[BANK0 ] short 
  3163 ;; Return value:  Size  Location     Type
  3164 ;;		None               void
  3165 ;; Registers used:
  3166 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3167 ;; Tracked objects:
  3168 ;;		On entry : 0/0
  3169 ;;		On exit  : 0/0
  3170 ;;		Unchanged: 0/0
  3171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3172 ;;      Params:         0       4       0       0       0       0       0       0       0
  3173 ;;      Locals:         0      16       0       0       0       0       0       0       0
  3174 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3175 ;;      Totals:         0      20       0       0       0       0       0       0       0
  3176 ;;Total ram usage:       20 bytes
  3177 ;; Hardware stack levels used:    1
  3178 ;; Hardware stack levels required when called:    6
  3179 ;; This function calls:
  3180 ;;		___awtofl
  3181 ;;		___fldiv
  3182 ;;		___flge
  3183 ;;		___flmul
  3184 ;;		___flsub
  3185 ;;		___fltol
  3186 ;;		_buffer_putch
  3187 ;;		_floor
  3188 ;;		_log10
  3189 ;;		_pow
  3190 ;; This function is called by:
  3191 ;;		_measure_capacitance
  3192 ;;		_main
  3193 ;; This function uses a non-reentrant model
  3194 ;;
  3195                           
  3196                           	psect	text9
  3197  001370                     __ptext9:
  3198                           	opt stack 0
  3199  001370                     _format_double:
  3200                           	opt stack 23
  3201                           
  3202                           ;format.c: 76: short m = (short)log10(num);
  3203                           
  3204                           ;incstack = 0
  3205  001370  C091  F04A         	movff	format_double@num,log10@x
  3206  001374  C092  F04B         	movff	format_double@num+1,log10@x+1
  3207  001378  C093  F04C         	movff	format_double@num+2,log10@x+2
  3208  00137C  C094  F04D         	movff	format_double@num+3,log10@x+3
  3209  001380  EC2A  F012         	call	_log10	;wreg free
  3210  001384  C04A  F052         	movff	?_log10,___fltol@f1
  3211  001388  C04B  F053         	movff	?_log10+1,___fltol@f1+1
  3212  00138C  C04C  F054         	movff	?_log10+2,___fltol@f1+2
  3213  001390  C04D  F055         	movff	?_log10+3,___fltol@f1+3
  3214  001394  ECE5  F010         	call	___fltol	;wreg free
  3215  001398  C052  F0A3         	movff	?___fltol,format_double@m
  3216  00139C  C053  F0A4         	movff	?___fltol+1,format_double@m+1
  3217                           
  3218                           ;format.c: 77: short digit;
  3219                           ;format.c: 80: while(num > 0 + 1.19209290e-07) {
  3220  0013A0  D099               	goto	l3954
  3221  0013A2                     l3936:
  3222                           
  3223                           ;format.c: 81: double weight = pow(10.0l, m);
  3224  0013A2  C0A3  F00E         	movff	format_double@m,___awtofl@c
  3225  0013A6  C0A4  F00F         	movff	format_double@m+1,___awtofl@c+1
  3226  0013AA  EC76  F013         	call	___awtofl	;wreg free
  3227  0013AE  C00E  F095         	movff	?___awtofl,_format_double$1092
  3228  0013B2  C00F  F096         	movff	?___awtofl+1,_format_double$1092+1
  3229  0013B6  C010  F097         	movff	?___awtofl+2,_format_double$1092+2
  3230  0013BA  C011  F098         	movff	?___awtofl+3,_format_double$1092+3
  3231                           
  3232                           ;format.c: 81: double weight = pow(10.0l, m);
  3233  0013BE  0100               	movlb	0	; () banked
  3234  0013C0  6B7C               	clrf	pow@x& (0+255),b
  3235  0013C2  6B7D               	clrf	(pow@x+1)& (0+255),b
  3236  0013C4  0E20               	movlw	32
  3237  0013C6  6F7E               	movwf	(pow@x+2)& (0+255),b
  3238  0013C8  0E41               	movlw	65
  3239  0013CA  6F7F               	movwf	(pow@x+3)& (0+255),b
  3240  0013CC  C095  F080         	movff	_format_double$1092,pow@y
  3241  0013D0  C096  F081         	movff	_format_double$1092+1,pow@y+1
  3242  0013D4  C097  F082         	movff	_format_double$1092+2,pow@y+2
  3243  0013D8  C098  F083         	movff	_format_double$1092+3,pow@y+3
  3244  0013DC  EC7C  F00A         	call	_pow	;wreg free
  3245  0013E0  C07C  F09D         	movff	?_pow,format_double@weight
  3246  0013E4  C07D  F09E         	movff	?_pow+1,format_double@weight+1
  3247  0013E8  C07E  F09F         	movff	?_pow+2,format_double@weight+2
  3248  0013EC  C07F  F0A0         	movff	?_pow+3,format_double@weight+3
  3249                           
  3250                           ; BSR set to: 0
  3251                           ;format.c: 82: digit = (short)floor(num / weight);
  3252  0013F0  C09D  F012         	movff	format_double@weight,___fldiv@f2
  3253  0013F4  C09E  F013         	movff	format_double@weight+1,___fldiv@f2+1
  3254  0013F8  C09F  F014         	movff	format_double@weight+2,___fldiv@f2+2
  3255  0013FC  C0A0  F015         	movff	format_double@weight+3,___fldiv@f2+3
  3256  001400  C091  F00E         	movff	format_double@num,___fldiv@f1
  3257  001404  C092  F00F         	movff	format_double@num+1,___fldiv@f1+1
  3258  001408  C093  F010         	movff	format_double@num+2,___fldiv@f1+2
  3259  00140C  C094  F011         	movff	format_double@num+3,___fldiv@f1+3
  3260  001410  EC92  F010         	call	___fldiv	;wreg free
  3261  001414  C00E  F067         	movff	?___fldiv,floor@x
  3262  001418  C00F  F068         	movff	?___fldiv+1,floor@x+1
  3263  00141C  C010  F069         	movff	?___fldiv+2,floor@x+2
  3264  001420  C011  F06A         	movff	?___fldiv+3,floor@x+3
  3265  001424  ECF9  F00C         	call	_floor	;wreg free
  3266  001428  C067  F099         	movff	?_floor,_format_double$1093
  3267  00142C  C068  F09A         	movff	?_floor+1,_format_double$1093+1
  3268  001430  C069  F09B         	movff	?_floor+2,_format_double$1093+2
  3269  001434  C06A  F09C         	movff	?_floor+3,_format_double$1093+3
  3270                           
  3271                           ;format.c: 82: digit = (short)floor(num / weight);
  3272  001438  C099  F052         	movff	_format_double$1093,___fltol@f1
  3273  00143C  C09A  F053         	movff	_format_double$1093+1,___fltol@f1+1
  3274  001440  C09B  F054         	movff	_format_double$1093+2,___fltol@f1+2
  3275  001444  C09C  F055         	movff	_format_double$1093+3,___fltol@f1+3
  3276  001448  ECE5  F010         	call	___fltol	;wreg free
  3277  00144C  C052  F0A1         	movff	?___fltol,format_double@digit
  3278  001450  C053  F0A2         	movff	?___fltol+1,format_double@digit+1
  3279                           
  3280                           ; BSR set to: 0
  3281                           ;format.c: 83: num -= (digit * weight);
  3282  001454  C091  F038         	movff	format_double@num,___flsub@f1
  3283  001458  C092  F039         	movff	format_double@num+1,___flsub@f1+1
  3284  00145C  C093  F03A         	movff	format_double@num+2,___flsub@f1+2
  3285  001460  C094  F03B         	movff	format_double@num+3,___flsub@f1+3
  3286  001464  C09D  F021         	movff	format_double@weight,___flmul@f2
  3287  001468  C09E  F022         	movff	format_double@weight+1,___flmul@f2+1
  3288  00146C  C09F  F023         	movff	format_double@weight+2,___flmul@f2+2
  3289  001470  C0A0  F024         	movff	format_double@weight+3,___flmul@f2+3
  3290  001474  C0A1  F00E         	movff	format_double@digit,___awtofl@c
  3291  001478  C0A2  F00F         	movff	format_double@digit+1,___awtofl@c+1
  3292  00147C  EC76  F013         	call	___awtofl	;wreg free
  3293  001480  C00E  F01D         	movff	?___awtofl,___flmul@f1
  3294  001484  C00F  F01E         	movff	?___awtofl+1,___flmul@f1+1
  3295  001488  C010  F01F         	movff	?___awtofl+2,___flmul@f1+2
  3296  00148C  C011  F020         	movff	?___awtofl+3,___flmul@f1+3
  3297  001490  EC8C  F00F         	call	___flmul	;wreg free
  3298  001494  C01D  F03C         	movff	?___flmul,___flsub@f2
  3299  001498  C01E  F03D         	movff	?___flmul+1,___flsub@f2+1
  3300  00149C  C01F  F03E         	movff	?___flmul+2,___flsub@f2+2
  3301  0014A0  C020  F03F         	movff	?___flmul+3,___flsub@f2+3
  3302  0014A4  EC35  F013         	call	___flsub	;wreg free
  3303  0014A8  C038  F091         	movff	?___flsub,format_double@num
  3304  0014AC  C039  F092         	movff	?___flsub+1,format_double@num+1
  3305  0014B0  C03A  F093         	movff	?___flsub+2,format_double@num+2
  3306  0014B4  C03B  F094         	movff	?___flsub+3,format_double@num+3
  3307                           
  3308                           ;format.c: 84: buffer_putch((char)('0' + digit));
  3309  0014B8  0100               	movlb	0	; () banked
  3310  0014BA  51A1               	movf	format_double@digit& (0+255),w,b
  3311  0014BC  0F30               	addlw	48
  3312  0014BE  EC11  F013         	call	_buffer_putch
  3313                           
  3314                           ; BSR set to: 0
  3315                           ;format.c: 85: if(m == 0)
  3316  0014C2  51A3               	movf	format_double@m& (0+255),w,b
  3317  0014C4  11A4               	iorwf	(format_double@m+1)& (0+255),w,b
  3318  0014C6  E103               	bnz	l3952
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;format.c: 86: buffer_putch('.');
  3322  0014C8  0E2E               	movlw	46
  3323  0014CA  EC11  F013         	call	_buffer_putch
  3324  0014CE                     l3952:
  3325                           
  3326                           ; BSR set to: 0
  3327                           ;format.c: 87: m--;
  3328  0014CE  07A3               	decf	format_double@m& (0+255),f,b
  3329  0014D0  A0D8               	btfss	status,0,c
  3330  0014D2  07A4               	decf	(format_double@m+1)& (0+255),f,b
  3331  0014D4                     l3954:
  3332                           
  3333                           ; BSR set to: 0
  3334  0014D4  6A04               	clrf	___flge@ff1,c
  3335  0014D6  6A05               	clrf	___flge@ff1+1,c
  3336  0014D8  6A06               	clrf	___flge@ff1+2,c
  3337  0014DA  0E34               	movlw	52
  3338  0014DC  6E07               	movwf	___flge@ff1+3,c
  3339  0014DE  C091  F008         	movff	format_double@num,___flge@ff2
  3340  0014E2  C092  F009         	movff	format_double@num+1,___flge@ff2+1
  3341  0014E6  C093  F00A         	movff	format_double@num+2,___flge@ff2+2
  3342  0014EA  C094  F00B         	movff	format_double@num+3,___flge@ff2+3
  3343  0014EE  EC7D  F012         	call	___flge	;wreg free
  3344  0014F2  B0D8               	btfsc	status,0,c
  3345  0014F4  0012               	return		;funcret
  3346  0014F6  D755               	goto	l3936
  3347  0014F8                     __end_of_format_double:
  3348                           	opt stack 0
  3349                           tblptru	equ	0xFF8
  3350                           tblptrh	equ	0xFF7
  3351                           tblptrl	equ	0xFF6
  3352                           tablat	equ	0xFF5
  3353                           prodl	equ	0xFF3
  3354                           intcon	equ	0xFF2
  3355                           intcon2	equ	0xFF1
  3356                           postinc0	equ	0xFEE
  3357                           wreg	equ	0xFE8
  3358                           postdec1	equ	0xFE5
  3359                           fsr1l	equ	0xFE1
  3360                           indf2	equ	0xFDF
  3361                           postinc2	equ	0xFDE
  3362                           postdec2	equ	0xFDD
  3363                           fsr2h	equ	0xFDA
  3364                           fsr2l	equ	0xFD9
  3365                           status	equ	0xFD8
  3366                           
  3367 ;; *************** function _pow *****************
  3368 ;; Defined at:
  3369 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\pow.c"
  3370 ;; Parameters:    Size  Location     Type
  3371 ;;  x               4   28[BANK0 ] short 
  3372 ;;  y               4   32[BANK0 ] short 
  3373 ;; Auto vars:     Size  Location     Type
  3374 ;;  yi              4   45[BANK0 ] unsigned long 
  3375 ;;  sign            1   44[BANK0 ] unsigned char 
  3376 ;; Return value:  Size  Location     Type
  3377 ;;                  4   28[BANK0 ] unsigned char 
  3378 ;; Registers used:
  3379 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3380 ;; Tracked objects:
  3381 ;;		On entry : F/0
  3382 ;;		On exit  : F/0
  3383 ;;		Unchanged: 0/0
  3384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3385 ;;      Params:         0       8       0       0       0       0       0       0       0
  3386 ;;      Locals:         0      13       0       0       0       0       0       0       0
  3387 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3388 ;;      Totals:         0      21       0       0       0       0       0       0       0
  3389 ;;Total ram usage:       21 bytes
  3390 ;; Hardware stack levels used:    1
  3391 ;; Hardware stack levels required when called:    5
  3392 ;; This function calls:
  3393 ;;		___flge
  3394 ;;		___flmul
  3395 ;;		___flneg
  3396 ;;		___fltol
  3397 ;;		___lltofl
  3398 ;;		_exp
  3399 ;;		_log
  3400 ;; This function is called by:
  3401 ;;		_format_double
  3402 ;; This function uses a non-reentrant model
  3403 ;;
  3404                           
  3405                           	psect	text10
  3406  0014F8                     __ptext10:
  3407                           	opt stack 0
  3408  0014F8                     _pow:
  3409                           	opt stack 23
  3410                           
  3411                           ; BSR set to: 0
  3412                           
  3413                           ;incstack = 0
  3414  0014F8  6B8C               	clrf	pow@sign& (0+255),b
  3415                           
  3416                           ; BSR set to: 0
  3417  0014FA  517C               	movf	pow@x& (0+255),w,b
  3418  0014FC  117D               	iorwf	(pow@x+1)& (0+255),w,b
  3419  0014FE  117E               	iorwf	(pow@x+2)& (0+255),w,b
  3420  001500  117F               	iorwf	(pow@x+3)& (0+255),w,b
  3421  001502  E110               	bnz	l3906
  3422                           
  3423                           ; BSR set to: 0
  3424  001504  6A04               	clrf	___flge@ff1,c
  3425  001506  6A05               	clrf	___flge@ff1+1,c
  3426  001508  6A06               	clrf	___flge@ff1+2,c
  3427  00150A  6A07               	clrf	___flge@ff1+3,c
  3428  00150C  C080  F008         	movff	pow@y,___flge@ff2
  3429  001510  C081  F009         	movff	pow@y+1,___flge@ff2+1
  3430  001514  C082  F00A         	movff	pow@y+2,___flge@ff2+2
  3431  001518  C083  F00B         	movff	pow@y+3,___flge@ff2+3
  3432  00151C  EC7D  F012         	call	___flge	;wreg free
  3433  001520  0100               	movlb	0	; () banked
  3434  001522  D037               	goto	l3916
  3435  001524                     l3906:
  3436                           
  3437                           ; BSR set to: 0
  3438  001524  5180               	movf	pow@y& (0+255),w,b
  3439  001526  1181               	iorwf	(pow@y+1)& (0+255),w,b
  3440  001528  1182               	iorwf	(pow@y+2)& (0+255),w,b
  3441  00152A  1183               	iorwf	(pow@y+3)& (0+255),w,b
  3442  00152C  E107               	bnz	l3912
  3443                           
  3444                           ; BSR set to: 0
  3445  00152E  6B7C               	clrf	?_pow& (0+255),b
  3446  001530  6B7D               	clrf	(?_pow+1)& (0+255),b
  3447  001532  0E80               	movlw	128
  3448  001534  6F7E               	movwf	(?_pow+2)& (0+255),b
  3449  001536  0E3F               	movlw	63
  3450  001538  6F7F               	movwf	(?_pow+3)& (0+255),b
  3451  00153A  D0A1               	goto	l1151
  3452  00153C                     l3912:
  3453                           
  3454                           ; BSR set to: 0
  3455  00153C  AF7F               	btfss	(pow@x+3)& (0+255),7,b
  3456  00153E  D043               	goto	l3922
  3457                           
  3458                           ; BSR set to: 0
  3459  001540  C080  F052         	movff	pow@y,___fltol@f1
  3460  001544  C081  F053         	movff	pow@y+1,___fltol@f1+1
  3461  001548  C082  F054         	movff	pow@y+2,___fltol@f1+2
  3462  00154C  C083  F055         	movff	pow@y+3,___fltol@f1+3
  3463  001550  ECE5  F010         	call	___fltol	;wreg free
  3464  001554  C052  F08D         	movff	?___fltol,pow@yi
  3465  001558  C053  F08E         	movff	?___fltol+1,pow@yi+1
  3466  00155C  C054  F08F         	movff	?___fltol+2,pow@yi+2
  3467  001560  C055  F090         	movff	?___fltol+3,pow@yi+3
  3468  001564  C08D  F00E         	movff	pow@yi,___lltofl@c
  3469  001568  C08E  F00F         	movff	pow@yi+1,___lltofl@c+1
  3470  00156C  C08F  F010         	movff	pow@yi+2,___lltofl@c+2
  3471  001570  C090  F011         	movff	pow@yi+3,___lltofl@c+3
  3472  001574  ECDF  F013         	call	___lltofl	;wreg free
  3473  001578  0100               	movlb	0	; () banked
  3474  00157A  5180               	movf	pow@y& (0+255),w,b
  3475  00157C  180E               	xorwf	?___lltofl,w,c
  3476  00157E  E109               	bnz	u3250
  3477  001580  5181               	movf	(pow@y+1)& (0+255),w,b
  3478  001582  180F               	xorwf	?___lltofl+1,w,c
  3479  001584  E106               	bnz	u3250
  3480  001586  5182               	movf	(pow@y+2)& (0+255),w,b
  3481  001588  1810               	xorwf	?___lltofl+2,w,c
  3482  00158A  E103               	bnz	u3250
  3483  00158C  5183               	movf	(pow@y+3)& (0+255),w,b
  3484  00158E  1811               	xorwf	?___lltofl+3,w,c
  3485  001590  E005               	bz	l3918
  3486  001592                     u3250:
  3487  001592                     l3916:
  3488                           
  3489                           ; BSR set to: 0
  3490  001592  6B7C               	clrf	?_pow& (0+255),b
  3491  001594  6B7D               	clrf	(?_pow+1)& (0+255),b
  3492  001596  6B7E               	clrf	(?_pow+2)& (0+255),b
  3493  001598  6B7F               	clrf	(?_pow+3)& (0+255),b
  3494  00159A  D071               	goto	l1151
  3495  00159C                     l3918:
  3496                           
  3497                           ; BSR set to: 0
  3498  00159C  518D               	movf	pow@yi& (0+255),w,b
  3499  00159E  0B01               	andlw	1
  3500  0015A0  6F8C               	movwf	pow@sign& (0+255),b
  3501                           
  3502                           ; BSR set to: 0
  3503  0015A2  C07C  F004         	movff	pow@x,___flneg@f1
  3504  0015A6  C07D  F005         	movff	pow@x+1,___flneg@f1+1
  3505  0015AA  C07E  F006         	movff	pow@x+2,___flneg@f1+2
  3506  0015AE  C07F  F007         	movff	pow@x+3,___flneg@f1+3
  3507  0015B2  EC97  F014         	call	___flneg	;wreg free
  3508  0015B6  C004  F07C         	movff	?___flneg,pow@x
  3509  0015BA  C005  F07D         	movff	?___flneg+1,pow@x+1
  3510  0015BE  C006  F07E         	movff	?___flneg+2,pow@x+2
  3511  0015C2  C007  F07F         	movff	?___flneg+3,pow@x+3
  3512  0015C6                     l3922:
  3513                           
  3514                           ; BSR set to: 0
  3515  0015C6  C07C  F044         	movff	pow@x,log@x
  3516  0015CA  C07D  F045         	movff	pow@x+1,log@x+1
  3517  0015CE  C07E  F046         	movff	pow@x+2,log@x+2
  3518  0015D2  C07F  F047         	movff	pow@x+3,log@x+3
  3519  0015D6  ECED  F00B         	call	_log	;wreg free
  3520  0015DA  C044  F084         	movff	?_log,_pow$1107
  3521  0015DE  C045  F085         	movff	?_log+1,_pow$1107+1
  3522  0015E2  C046  F086         	movff	?_log+2,_pow$1107+2
  3523  0015E6  C047  F087         	movff	?_log+3,_pow$1107+3
  3524  0015EA  C084  F01D         	movff	_pow$1107,___flmul@f1
  3525  0015EE  C085  F01E         	movff	_pow$1107+1,___flmul@f1+1
  3526  0015F2  C086  F01F         	movff	_pow$1107+2,___flmul@f1+2
  3527  0015F6  C087  F020         	movff	_pow$1107+3,___flmul@f1+3
  3528  0015FA  C080  F021         	movff	pow@y,___flmul@f2
  3529  0015FE  C081  F022         	movff	pow@y+1,___flmul@f2+1
  3530  001602  C082  F023         	movff	pow@y+2,___flmul@f2+2
  3531  001606  C083  F024         	movff	pow@y+3,___flmul@f2+3
  3532  00160A  EC8C  F00F         	call	___flmul	;wreg free
  3533  00160E  C01D  F088         	movff	?___flmul,_pow$1108
  3534  001612  C01E  F089         	movff	?___flmul+1,_pow$1108+1
  3535  001616  C01F  F08A         	movff	?___flmul+2,_pow$1108+2
  3536  00161A  C020  F08B         	movff	?___flmul+3,_pow$1108+3
  3537  00161E  C088  F071         	movff	_pow$1108,exp@x
  3538  001622  C089  F072         	movff	_pow$1108+1,exp@x+1
  3539  001626  C08A  F073         	movff	_pow$1108+2,exp@x+2
  3540  00162A  C08B  F074         	movff	_pow$1108+3,exp@x+3
  3541  00162E  ECB0  F008         	call	_exp	;wreg free
  3542  001632  C071  F07C         	movff	?_exp,pow@x
  3543  001636  C072  F07D         	movff	?_exp+1,pow@x+1
  3544  00163A  C073  F07E         	movff	?_exp+2,pow@x+2
  3545  00163E  C074  F07F         	movff	?_exp+3,pow@x+3
  3546  001642  0100               	movlb	0	; () banked
  3547  001644  518C               	movf	pow@sign& (0+255),w,b
  3548  001646  E013               	bz	l1155
  3549                           
  3550                           ; BSR set to: 0
  3551  001648  C07C  F004         	movff	pow@x,___flneg@f1
  3552  00164C  C07D  F005         	movff	pow@x+1,___flneg@f1+1
  3553  001650  C07E  F006         	movff	pow@x+2,___flneg@f1+2
  3554  001654  C07F  F007         	movff	pow@x+3,___flneg@f1+3
  3555  001658  EC97  F014         	call	___flneg	;wreg free
  3556  00165C  C004  F07C         	movff	?___flneg,?_pow
  3557  001660  C005  F07D         	movff	?___flneg+1,?_pow+1
  3558  001664  C006  F07E         	movff	?___flneg+2,?_pow+2
  3559  001668  C007  F07F         	movff	?___flneg+3,?_pow+3
  3560  00166C  D008               	goto	l1151
  3561  00166E                     l1155:
  3562                           
  3563                           ; BSR set to: 0
  3564  00166E  C07C  F07C         	movff	pow@x,?_pow
  3565  001672  C07D  F07D         	movff	pow@x+1,?_pow+1
  3566  001676  C07E  F07E         	movff	pow@x+2,?_pow+2
  3567  00167A  C07F  F07F         	movff	pow@x+3,?_pow+3
  3568  00167E                     l1151:
  3569                           
  3570                           ; BSR set to: 0
  3571  00167E  0012               	return		;funcret
  3572  001680                     __end_of_pow:
  3573                           	opt stack 0
  3574                           tblptru	equ	0xFF8
  3575                           tblptrh	equ	0xFF7
  3576                           tblptrl	equ	0xFF6
  3577                           tablat	equ	0xFF5
  3578                           prodl	equ	0xFF3
  3579                           intcon	equ	0xFF2
  3580                           intcon2	equ	0xFF1
  3581                           postinc0	equ	0xFEE
  3582                           wreg	equ	0xFE8
  3583                           postdec1	equ	0xFE5
  3584                           fsr1l	equ	0xFE1
  3585                           indf2	equ	0xFDF
  3586                           postinc2	equ	0xFDE
  3587                           postdec2	equ	0xFDD
  3588                           fsr2h	equ	0xFDA
  3589                           fsr2l	equ	0xFD9
  3590                           status	equ	0xFD8
  3591                           
  3592 ;; *************** function _exp *****************
  3593 ;; Defined at:
  3594 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\exp.c"
  3595 ;; Parameters:    Size  Location     Type
  3596 ;;  x               4   17[BANK0 ] unsigned char 
  3597 ;; Auto vars:     Size  Location     Type
  3598 ;;  exponent        2   25[BANK0 ] int 
  3599 ;;  sign            1   27[BANK0 ] unsigned char 
  3600 ;; Return value:  Size  Location     Type
  3601 ;;                  4   17[BANK0 ] unsigned char 
  3602 ;; Registers used:
  3603 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3604 ;; Tracked objects:
  3605 ;;		On entry : 0/0
  3606 ;;		On exit  : 0/0
  3607 ;;		Unchanged: 0/0
  3608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3609 ;;      Params:         0       4       0       0       0       0       0       0       0
  3610 ;;      Locals:         0       7       0       0       0       0       0       0       0
  3611 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3612 ;;      Totals:         0      11       0       0       0       0       0       0       0
  3613 ;;Total ram usage:       11 bytes
  3614 ;; Hardware stack levels used:    1
  3615 ;; Hardware stack levels required when called:    4
  3616 ;; This function calls:
  3617 ;;		___awtofl
  3618 ;;		___fldiv
  3619 ;;		___flge
  3620 ;;		___flmul
  3621 ;;		___flneg
  3622 ;;		___flsub
  3623 ;;		___fltol
  3624 ;;		_eval_poly
  3625 ;;		_floor
  3626 ;;		_ldexp
  3627 ;; This function is called by:
  3628 ;;		_pow
  3629 ;; This function uses a non-reentrant model
  3630 ;;
  3631                           
  3632                           	psect	text11
  3633  001160                     __ptext11:
  3634                           	opt stack 0
  3635  001160                     _exp:
  3636                           	opt stack 23
  3637                           
  3638                           ; BSR set to: 0
  3639                           ;incstack = 0
  3640  001160  0100               	movlb	0	; () banked
  3641  001162  5171               	movf	exp@x& (0+255),w,b
  3642  001164  1172               	iorwf	(exp@x+1)& (0+255),w,b
  3643  001166  1173               	iorwf	(exp@x+2)& (0+255),w,b
  3644  001168  1174               	iorwf	(exp@x+3)& (0+255),w,b
  3645  00116A  E106               	bnz	l3860
  3646                           
  3647                           ; BSR set to: 0
  3648  00116C  6B71               	clrf	?_exp& (0+255),b
  3649  00116E  6B72               	clrf	(?_exp+1)& (0+255),b
  3650  001170  0E80               	movlw	128
  3651  001172  6F73               	movwf	(?_exp+2)& (0+255),b
  3652  001174  0E3F               	movlw	63
  3653  001176  D018               	goto	L3
  3654  001178                     l3860:
  3655                           
  3656                           ; BSR set to: 0
  3657  001178  0E18               	movlw	24
  3658  00117A  6E04               	movwf	___flge@ff1,c
  3659  00117C  0E72               	movlw	114
  3660  00117E  6E05               	movwf	___flge@ff1+1,c
  3661  001180  0E31               	movlw	49
  3662  001182  6E06               	movwf	___flge@ff1+2,c
  3663  001184  0E44               	movlw	68
  3664  001186  6E07               	movwf	___flge@ff1+3,c
  3665  001188  C071  F008         	movff	exp@x,___flge@ff2
  3666  00118C  C072  F009         	movff	exp@x+1,___flge@ff2+1
  3667  001190  C073  F00A         	movff	exp@x+2,___flge@ff2+2
  3668  001194  C074  F00B         	movff	exp@x+3,___flge@ff2+3
  3669  001198  EC7D  F012         	call	___flge	;wreg free
  3670  00119C  E207               	bc	l3866
  3671  00119E  0100               	movlb	0	; () banked
  3672  0011A0  6971               	setf	?_exp& (0+255),b
  3673  0011A2  6972               	setf	(?_exp+1)& (0+255),b
  3674  0011A4  0E7F               	movlw	127
  3675  0011A6  6F73               	movwf	(?_exp+2)& (0+255),b
  3676  0011A8                     L3:
  3677  0011A8  6F74               	movwf	(?_exp+3)& (0+255),b
  3678  0011AA  D0E1               	goto	l1177
  3679  0011AC                     l3866:
  3680  0011AC  C071  F004         	movff	exp@x,___flge@ff1
  3681  0011B0  C072  F005         	movff	exp@x+1,___flge@ff1+1
  3682  0011B4  C073  F006         	movff	exp@x+2,___flge@ff1+2
  3683  0011B8  C074  F007         	movff	exp@x+3,___flge@ff1+3
  3684  0011BC  0E87               	movlw	135
  3685  0011BE  6E08               	movwf	___flge@ff2,c
  3686  0011C0  0E48               	movlw	72
  3687  0011C2  6E09               	movwf	___flge@ff2+1,c
  3688  0011C4  0E3A               	movlw	58
  3689  0011C6  6E0A               	movwf	___flge@ff2+2,c
  3690  0011C8  0EC4               	movlw	196
  3691  0011CA  6E0B               	movwf	___flge@ff2+3,c
  3692  0011CC  EC7D  F012         	call	___flge	;wreg free
  3693  0011D0  E202               	bc	l3870
  3694  0011D2  0100               	movlb	0	; () banked
  3695  0011D4  D0A5               	goto	l3888
  3696  0011D6                     l3870:
  3697  0011D6  0100               	movlb	0	; () banked
  3698  0011D8  0E01               	movlw	1
  3699  0011DA  AF74               	btfss	(exp@x+3)& (0+255),7,b
  3700  0011DC  0E00               	movlw	0
  3701  0011DE  6F7B               	movwf	exp@sign& (0+255),b
  3702                           
  3703                           ; BSR set to: 0
  3704  0011E0  517B               	movf	exp@sign& (0+255),w,b
  3705  0011E2  E012               	bz	l1180
  3706                           
  3707                           ; BSR set to: 0
  3708  0011E4  C071  F004         	movff	exp@x,___flneg@f1
  3709  0011E8  C072  F005         	movff	exp@x+1,___flneg@f1+1
  3710  0011EC  C073  F006         	movff	exp@x+2,___flneg@f1+2
  3711  0011F0  C074  F007         	movff	exp@x+3,___flneg@f1+3
  3712  0011F4  EC97  F014         	call	___flneg	;wreg free
  3713  0011F8  C004  F071         	movff	?___flneg,exp@x
  3714  0011FC  C005  F072         	movff	?___flneg+1,exp@x+1
  3715  001200  C006  F073         	movff	?___flneg+2,exp@x+2
  3716  001204  C007  F074         	movff	?___flneg+3,exp@x+3
  3717  001208                     l1180:
  3718                           
  3719                           ; BSR set to: 0
  3720  001208  C071  F01D         	movff	exp@x,___flmul@f1
  3721  00120C  C072  F01E         	movff	exp@x+1,___flmul@f1+1
  3722  001210  C073  F01F         	movff	exp@x+2,___flmul@f1+2
  3723  001214  C074  F020         	movff	exp@x+3,___flmul@f1+3
  3724  001218  0E3B               	movlw	59
  3725  00121A  6E21               	movwf	___flmul@f2,c
  3726  00121C  0EAA               	movlw	170
  3727  00121E  6E22               	movwf	___flmul@f2+1,c
  3728  001220  0EB8               	movlw	184
  3729  001222  6E23               	movwf	___flmul@f2+2,c
  3730  001224  0E3F               	movlw	63
  3731  001226  6E24               	movwf	___flmul@f2+3,c
  3732  001228  EC8C  F00F         	call	___flmul	;wreg free
  3733  00122C  C01D  F071         	movff	?___flmul,exp@x
  3734  001230  C01E  F072         	movff	?___flmul+1,exp@x+1
  3735  001234  C01F  F073         	movff	?___flmul+2,exp@x+2
  3736  001238  C020  F074         	movff	?___flmul+3,exp@x+3
  3737  00123C  C071  F067         	movff	exp@x,floor@x
  3738  001240  C072  F068         	movff	exp@x+1,floor@x+1
  3739  001244  C073  F069         	movff	exp@x+2,floor@x+2
  3740  001248  C074  F06A         	movff	exp@x+3,floor@x+3
  3741  00124C  ECF9  F00C         	call	_floor	;wreg free
  3742  001250  C067  F075         	movff	?_floor,_exp$1109
  3743  001254  C068  F076         	movff	?_floor+1,_exp$1109+1
  3744  001258  C069  F077         	movff	?_floor+2,_exp$1109+2
  3745  00125C  C06A  F078         	movff	?_floor+3,_exp$1109+3
  3746  001260  C075  F052         	movff	_exp$1109,___fltol@f1
  3747  001264  C076  F053         	movff	_exp$1109+1,___fltol@f1+1
  3748  001268  C077  F054         	movff	_exp$1109+2,___fltol@f1+2
  3749  00126C  C078  F055         	movff	_exp$1109+3,___fltol@f1+3
  3750  001270  ECE5  F010         	call	___fltol	;wreg free
  3751  001274  C052  F079         	movff	?___fltol,exp@exponent
  3752  001278  C053  F07A         	movff	?___fltol+1,exp@exponent+1
  3753                           
  3754                           ; BSR set to: 0
  3755  00127C  C071  F038         	movff	exp@x,___flsub@f1
  3756  001280  C072  F039         	movff	exp@x+1,___flsub@f1+1
  3757  001284  C073  F03A         	movff	exp@x+2,___flsub@f1+2
  3758  001288  C074  F03B         	movff	exp@x+3,___flsub@f1+3
  3759  00128C  C079  F00E         	movff	exp@exponent,___awtofl@c
  3760  001290  C07A  F00F         	movff	exp@exponent+1,___awtofl@c+1
  3761  001294  EC76  F013         	call	___awtofl	;wreg free
  3762  001298  C00E  F03C         	movff	?___awtofl,___flsub@f2
  3763  00129C  C00F  F03D         	movff	?___awtofl+1,___flsub@f2+1
  3764  0012A0  C010  F03E         	movff	?___awtofl+2,___flsub@f2+2
  3765  0012A4  C011  F03F         	movff	?___awtofl+3,___flsub@f2+3
  3766  0012A8  EC35  F013         	call	___flsub	;wreg free
  3767  0012AC  C038  F071         	movff	?___flsub,exp@x
  3768  0012B0  C039  F072         	movff	?___flsub+1,exp@x+1
  3769  0012B4  C03A  F073         	movff	?___flsub+2,exp@x+2
  3770  0012B8  C03B  F074         	movff	?___flsub+3,exp@x+3
  3771  0012BC  C071  F038         	movff	exp@x,eval_poly@x
  3772  0012C0  C072  F039         	movff	exp@x+1,eval_poly@x+1
  3773  0012C4  C073  F03A         	movff	exp@x+2,eval_poly@x+2
  3774  0012C8  C074  F03B         	movff	exp@x+3,eval_poly@x+3
  3775  0012CC  0E01               	movlw	low exp@coeff
  3776  0012CE  6E3C               	movwf	eval_poly@d,c
  3777  0012D0  6A3E               	clrf	eval_poly@n+1,c
  3778  0012D2  0E09               	movlw	9
  3779  0012D4  6E3D               	movwf	eval_poly@n,c
  3780  0012D6  ECE9  F00F         	call	_eval_poly	;wreg free
  3781  0012DA  C038  F044         	movff	?_eval_poly,ldexp@value
  3782  0012DE  C039  F045         	movff	?_eval_poly+1,ldexp@value+1
  3783  0012E2  C03A  F046         	movff	?_eval_poly+2,ldexp@value+2
  3784  0012E6  C03B  F047         	movff	?_eval_poly+3,ldexp@value+3
  3785  0012EA  C079  F048         	movff	exp@exponent,ldexp@newexp
  3786  0012EE  C07A  F049         	movff	exp@exponent+1,ldexp@newexp+1
  3787  0012F2  EC34  F011         	call	_ldexp	;wreg free
  3788  0012F6  C044  F071         	movff	?_ldexp,exp@x
  3789  0012FA  C045  F072         	movff	?_ldexp+1,exp@x+1
  3790  0012FE  C046  F073         	movff	?_ldexp+2,exp@x+2
  3791  001302  C047  F074         	movff	?_ldexp+3,exp@x+3
  3792  001306  0100               	movlb	0	; () banked
  3793  001308  517B               	movf	exp@sign& (0+255),w,b
  3794  00130A  E029               	bz	l1181
  3795                           
  3796                           ; BSR set to: 0
  3797  00130C  2971               	incf	exp@x& (0+255),w,b
  3798  00130E  E10D               	bnz	l3890
  3799  001310  2972               	incf	(exp@x+1)& (0+255),w,b
  3800  001312  E10B               	bnz	l3890
  3801  001314  0E7F               	movlw	127
  3802  001316  1973               	xorwf	(exp@x+2)& (0+255),w,b
  3803  001318  E108               	bnz	l3890
  3804  00131A  0E7F               	movlw	127
  3805  00131C  1974               	xorwf	(exp@x+3)& (0+255),w,b
  3806  00131E  E105               	bnz	l3890
  3807  001320                     l3888:
  3808                           
  3809                           ; BSR set to: 0
  3810  001320  6B71               	clrf	?_exp& (0+255),b
  3811  001322  6B72               	clrf	(?_exp+1)& (0+255),b
  3812  001324  6B73               	clrf	(?_exp+2)& (0+255),b
  3813  001326  6B74               	clrf	(?_exp+3)& (0+255),b
  3814  001328  D022               	goto	l1177
  3815  00132A                     l3890:
  3816                           
  3817                           ; BSR set to: 0
  3818  00132A  0E00               	movlw	0
  3819  00132C  6E0E               	movwf	___fldiv@f1,c
  3820  00132E  6E0F               	movwf	___fldiv@f1+1,c
  3821  001330  0E80               	movlw	128
  3822  001332  6E10               	movwf	___fldiv@f1+2,c
  3823  001334  0E3F               	movlw	63
  3824  001336  6E11               	movwf	___fldiv@f1+3,c
  3825  001338  C071  F012         	movff	exp@x,___fldiv@f2
  3826  00133C  C072  F013         	movff	exp@x+1,___fldiv@f2+1
  3827  001340  C073  F014         	movff	exp@x+2,___fldiv@f2+2
  3828  001344  C074  F015         	movff	exp@x+3,___fldiv@f2+3
  3829  001348  EC92  F010         	call	___fldiv	;wreg free
  3830  00134C  C00E  F071         	movff	?___fldiv,?_exp
  3831  001350  C00F  F072         	movff	?___fldiv+1,?_exp+1
  3832  001354  C010  F073         	movff	?___fldiv+2,?_exp+2
  3833  001358  C011  F074         	movff	?___fldiv+3,?_exp+3
  3834  00135C  D008               	goto	l1177
  3835  00135E                     l1181:
  3836                           
  3837                           ; BSR set to: 0
  3838  00135E  C071  F071         	movff	exp@x,?_exp
  3839  001362  C072  F072         	movff	exp@x+1,?_exp+1
  3840  001366  C073  F073         	movff	exp@x+2,?_exp+2
  3841  00136A  C074  F074         	movff	exp@x+3,?_exp+3
  3842  00136E                     l1177:
  3843  00136E  0012               	return		;funcret
  3844  001370                     __end_of_exp:
  3845                           	opt stack 0
  3846                           tblptru	equ	0xFF8
  3847                           tblptrh	equ	0xFF7
  3848                           tblptrl	equ	0xFF6
  3849                           tablat	equ	0xFF5
  3850                           prodl	equ	0xFF3
  3851                           intcon	equ	0xFF2
  3852                           intcon2	equ	0xFF1
  3853                           postinc0	equ	0xFEE
  3854                           wreg	equ	0xFE8
  3855                           postdec1	equ	0xFE5
  3856                           fsr1l	equ	0xFE1
  3857                           indf2	equ	0xFDF
  3858                           postinc2	equ	0xFDE
  3859                           postdec2	equ	0xFDD
  3860                           fsr2h	equ	0xFDA
  3861                           fsr2l	equ	0xFD9
  3862                           status	equ	0xFD8
  3863                           
  3864 ;; *************** function _ldexp *****************
  3865 ;; Defined at:
  3866 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  3867 ;; Parameters:    Size  Location     Type
  3868 ;;  value           4   67[COMRAM] unsigned char 
  3869 ;;  newexp          2   71[COMRAM] int 
  3870 ;; Auto vars:     Size  Location     Type
  3871 ;;		None
  3872 ;; Return value:  Size  Location     Type
  3873 ;;                  4   67[COMRAM] int 
  3874 ;; Registers used:
  3875 ;;		wreg, status,2, status,0
  3876 ;; Tracked objects:
  3877 ;;		On entry : 0/0
  3878 ;;		On exit  : 0/0
  3879 ;;		Unchanged: 0/0
  3880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3881 ;;      Params:         6       0       0       0       0       0       0       0       0
  3882 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3883 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3884 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3885 ;;Total ram usage:        8 bytes
  3886 ;; Hardware stack levels used:    1
  3887 ;; Hardware stack levels required when called:    1
  3888 ;; This function calls:
  3889 ;;		Nothing
  3890 ;; This function is called by:
  3891 ;;		_exp
  3892 ;; This function uses a non-reentrant model
  3893 ;;
  3894                           
  3895                           	psect	text12
  3896  002268                     __ptext12:
  3897                           	opt stack 0
  3898  002268                     _ldexp:
  3899                           	opt stack 25
  3900                           
  3901                           ;incstack = 0
  3902  002268  5044               	movf	ldexp@value,w,c
  3903  00226A  1045               	iorwf	ldexp@value+1,w,c
  3904  00226C  1046               	iorwf	ldexp@value+2,w,c
  3905  00226E  1047               	iorwf	ldexp@value+3,w,c
  3906  002270  E013               	bz	l2754
  3907  002272  5047               	movf	ldexp@value+3,w,c
  3908  002274  0B7F               	andlw	127
  3909  002276  6E4A               	movwf	??_ldexp& (0+255),c
  3910  002278  6A4B               	clrf	(??_ldexp+1)& (0+255),c
  3911  00227A  90D8               	bcf	status,0,c
  3912  00227C  364A               	rlcf	??_ldexp,f,c
  3913  00227E  364B               	rlcf	??_ldexp+1,f,c
  3914  002280  504A               	movf	??_ldexp,w,c
  3915  002282  2648               	addwf	ldexp@newexp,f,c
  3916  002284  504B               	movf	??_ldexp+1,w,c
  3917  002286  2249               	addwfc	ldexp@newexp+1,f,c
  3918  002288  0E01               	movlw	1
  3919  00228A  AE46               	btfss	ldexp@value+2,7,c
  3920  00228C  0E00               	movlw	0
  3921  00228E  2648               	addwf	ldexp@newexp,f,c
  3922  002290  0E00               	movlw	0
  3923  002292  2249               	addwfc	ldexp@newexp+1,f,c
  3924  002294  AE49               	btfss	ldexp@newexp+1,7,c
  3925  002296  D005               	goto	l2758
  3926  002298                     l2754:
  3927  002298  6A44               	clrf	?_ldexp,c
  3928  00229A  6A45               	clrf	?_ldexp+1,c
  3929  00229C  6A46               	clrf	?_ldexp+2,c
  3930  00229E  6A47               	clrf	?_ldexp+3,c
  3931  0022A0  D02E               	goto	l914
  3932  0022A2                     l2758:
  3933  0022A2  BE49               	btfsc	ldexp@newexp+1,7,c
  3934  0022A4  D010               	goto	l2772
  3935  0022A6  0449               	decf	ldexp@newexp+1,w,c
  3936  0022A8  E30E               	bnc	l2772
  3937  0022AA  AE47               	btfss	ldexp@value+3,7,c
  3938  0022AC  D006               	goto	l2768
  3939  0022AE  6844               	setf	?_ldexp,c
  3940  0022B0  6845               	setf	?_ldexp+1,c
  3941  0022B2  0E7F               	movlw	127
  3942  0022B4  6E46               	movwf	?_ldexp+2,c
  3943  0022B6  0EFF               	movlw	255
  3944  0022B8  D004               	goto	L4
  3945  0022BA                     l2768:
  3946  0022BA  6844               	setf	?_ldexp,c
  3947  0022BC  6845               	setf	?_ldexp+1,c
  3948  0022BE  0E7F               	movlw	127
  3949  0022C0  6E46               	movwf	?_ldexp+2,c
  3950  0022C2                     L4:
  3951  0022C2  6E47               	movwf	?_ldexp+3,c
  3952  0022C4  D01C               	goto	l914
  3953  0022C6                     l2772:
  3954  0022C6  3449               	rlcf	ldexp@newexp+1,w,c
  3955  0022C8  3049               	rrcf	ldexp@newexp+1,w,c
  3956  0022CA  6E4B               	movwf	(??_ldexp+1)& (0+255),c
  3957  0022CC  3048               	rrcf	ldexp@newexp,w,c
  3958  0022CE  6E4A               	movwf	??_ldexp& (0+255),c
  3959  0022D0  1847               	xorwf	ldexp@value+3,w,c
  3960  0022D2  0B80               	andlw	-128
  3961  0022D4  184A               	xorwf	??_ldexp,w,c
  3962  0022D6  6E47               	movwf	ldexp@value+3,c
  3963  0022D8  C048  F04A         	movff	ldexp@newexp,??_ldexp
  3964  0022DC  0E01               	movlw	1
  3965  0022DE  164A               	andwf	??_ldexp,f,c
  3966  0022E0  324A               	rrcf	??_ldexp,f,c
  3967  0022E2  324A               	rrcf	??_ldexp,f,c
  3968  0022E4  5046               	movf	ldexp@value+2,w,c
  3969  0022E6  184A               	xorwf	??_ldexp,w,c
  3970  0022E8  0B7F               	andlw	-129
  3971  0022EA  184A               	xorwf	??_ldexp,w,c
  3972  0022EC  6E46               	movwf	ldexp@value+2,c
  3973  0022EE  C044  F044         	movff	ldexp@value,?_ldexp
  3974  0022F2  C045  F045         	movff	ldexp@value+1,?_ldexp+1
  3975  0022F6  C046  F046         	movff	ldexp@value+2,?_ldexp+2
  3976  0022FA  C047  F047         	movff	ldexp@value+3,?_ldexp+3
  3977  0022FE                     l914:
  3978  0022FE  0012               	return		;funcret
  3979  002300                     __end_of_ldexp:
  3980                           	opt stack 0
  3981                           tblptru	equ	0xFF8
  3982                           tblptrh	equ	0xFF7
  3983                           tblptrl	equ	0xFF6
  3984                           tablat	equ	0xFF5
  3985                           prodl	equ	0xFF3
  3986                           intcon	equ	0xFF2
  3987                           intcon2	equ	0xFF1
  3988                           postinc0	equ	0xFEE
  3989                           wreg	equ	0xFE8
  3990                           postdec1	equ	0xFE5
  3991                           fsr1l	equ	0xFE1
  3992                           indf2	equ	0xFDF
  3993                           postinc2	equ	0xFDE
  3994                           postdec2	equ	0xFDD
  3995                           fsr2h	equ	0xFDA
  3996                           fsr2l	equ	0xFD9
  3997                           status	equ	0xFD8
  3998                           
  3999 ;; *************** function _floor *****************
  4000 ;; Defined at:
  4001 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\floor.c"
  4002 ;; Parameters:    Size  Location     Type
  4003 ;;  x               4    7[BANK0 ] int 
  4004 ;; Auto vars:     Size  Location     Type
  4005 ;;  i               4   11[BANK0 ] int 
  4006 ;;  expon           2   15[BANK0 ] int 
  4007 ;; Return value:  Size  Location     Type
  4008 ;;                  4    7[BANK0 ] int 
  4009 ;; Registers used:
  4010 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4011 ;; Tracked objects:
  4012 ;;		On entry : 0/0
  4013 ;;		On exit  : 0/0
  4014 ;;		Unchanged: 0/0
  4015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4016 ;;      Params:         0       4       0       0       0       0       0       0       0
  4017 ;;      Locals:         0       6       0       0       0       0       0       0       0
  4018 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4019 ;;      Totals:         0      10       0       0       0       0       0       0       0
  4020 ;;Total ram usage:       10 bytes
  4021 ;; Hardware stack levels used:    1
  4022 ;; Hardware stack levels required when called:    3
  4023 ;; This function calls:
  4024 ;;		___altofl
  4025 ;;		___fladd
  4026 ;;		___flge
  4027 ;;		___fltol
  4028 ;;		_frexp
  4029 ;; This function is called by:
  4030 ;;		_format_double
  4031 ;;		_exp
  4032 ;; This function uses a non-reentrant model
  4033 ;;
  4034                           
  4035                           	psect	text13
  4036  0019F2                     __ptext13:
  4037                           	opt stack 0
  4038  0019F2                     _floor:
  4039                           	opt stack 23
  4040                           
  4041                           ;incstack = 0
  4042  0019F2  C067  F004         	movff	floor@x,frexp@value
  4043  0019F6  C068  F005         	movff	floor@x+1,frexp@value+1
  4044  0019FA  C069  F006         	movff	floor@x+2,frexp@value+2
  4045  0019FE  C06A  F007         	movff	floor@x+3,frexp@value+3
  4046  001A02  0E6F               	movlw	low floor@expon
  4047  001A04  6E08               	movwf	frexp@eptr,c
  4048  001A06  EC80  F011         	call	_frexp	;wreg free
  4049  001A0A  0100               	movlb	0	; () banked
  4050  001A0C  AF70               	btfss	(floor@expon+1)& (0+255),7,b
  4051  001A0E  D00E               	goto	l3762
  4052                           
  4053                           ; BSR set to: 0
  4054  001A10  AF6A               	btfss	(floor@x+3)& (0+255),7,b
  4055  001A12  D007               	goto	l881
  4056                           
  4057                           ; BSR set to: 0
  4058  001A14  6B67               	clrf	?_floor& (0+255),b
  4059  001A16  6B68               	clrf	(?_floor+1)& (0+255),b
  4060  001A18  0E80               	movlw	128
  4061  001A1A  6F69               	movwf	(?_floor+2)& (0+255),b
  4062  001A1C  0EBF               	movlw	191
  4063  001A1E  6F6A               	movwf	(?_floor+3)& (0+255),b
  4064  001A20  D05F               	goto	l882
  4065  001A22                     l881:
  4066                           
  4067                           ; BSR set to: 0
  4068  001A22  6B67               	clrf	?_floor& (0+255),b
  4069  001A24  6B68               	clrf	(?_floor+1)& (0+255),b
  4070  001A26  6B69               	clrf	(?_floor+2)& (0+255),b
  4071  001A28  6B6A               	clrf	(?_floor+3)& (0+255),b
  4072  001A2A  D05A               	goto	l882
  4073  001A2C                     l3762:
  4074                           
  4075                           ; BSR set to: 0
  4076  001A2C  5170               	movf	(floor@expon+1)& (0+255),w,b
  4077  001A2E  E103               	bnz	u3040
  4078  001A30  0E1D               	movlw	29
  4079  001A32  5D6F               	subwf	floor@expon& (0+255),w,b
  4080  001A34  E309               	bnc	l3766
  4081  001A36                     u3040:
  4082                           
  4083                           ; BSR set to: 0
  4084  001A36  C067  F067         	movff	floor@x,?_floor
  4085  001A3A  C068  F068         	movff	floor@x+1,?_floor+1
  4086  001A3E  C069  F069         	movff	floor@x+2,?_floor+2
  4087  001A42  C06A  F06A         	movff	floor@x+3,?_floor+3
  4088  001A46  D04C               	goto	l882
  4089  001A48                     l3766:
  4090                           
  4091                           ; BSR set to: 0
  4092  001A48  C067  F052         	movff	floor@x,___fltol@f1
  4093  001A4C  C068  F053         	movff	floor@x+1,___fltol@f1+1
  4094  001A50  C069  F054         	movff	floor@x+2,___fltol@f1+2
  4095  001A54  C06A  F055         	movff	floor@x+3,___fltol@f1+3
  4096  001A58  ECE5  F010         	call	___fltol	;wreg free
  4097  001A5C  C052  F062         	movff	?___fltol,___altofl@c
  4098  001A60  C053  F063         	movff	?___fltol+1,___altofl@c+1
  4099  001A64  C054  F064         	movff	?___fltol+2,___altofl@c+2
  4100  001A68  C055  F065         	movff	?___fltol+3,___altofl@c+3
  4101  001A6C  ECED  F012         	call	___altofl	;wreg free
  4102  001A70  C062  F06B         	movff	?___altofl,floor@i
  4103  001A74  C063  F06C         	movff	?___altofl+1,floor@i+1
  4104  001A78  C064  F06D         	movff	?___altofl+2,floor@i+2
  4105  001A7C  C065  F06E         	movff	?___altofl+3,floor@i+3
  4106  001A80  C067  F004         	movff	floor@x,___flge@ff1
  4107  001A84  C068  F005         	movff	floor@x+1,___flge@ff1+1
  4108  001A88  C069  F006         	movff	floor@x+2,___flge@ff1+2
  4109  001A8C  C06A  F007         	movff	floor@x+3,___flge@ff1+3
  4110  001A90  C06B  F008         	movff	floor@i,___flge@ff2
  4111  001A94  C06C  F009         	movff	floor@i+1,___flge@ff2+1
  4112  001A98  C06D  F00A         	movff	floor@i+2,___flge@ff2+2
  4113  001A9C  C06E  F00B         	movff	floor@i+3,___flge@ff2+3
  4114  001AA0  EC7D  F012         	call	___flge	;wreg free
  4115  001AA4  E215               	bc	l884
  4116  001AA6  C06B  F02C         	movff	floor@i,___fladd@f1
  4117  001AAA  C06C  F02D         	movff	floor@i+1,___fladd@f1+1
  4118  001AAE  C06D  F02E         	movff	floor@i+2,___fladd@f1+2
  4119  001AB2  C06E  F02F         	movff	floor@i+3,___fladd@f1+3
  4120  001AB6  EC74  F00C         	call	PL26	;call to abstracted procedure
  4121  001ABA  EC40  F00B         	call	___fladd	;wreg free
  4122  001ABE  C02C  F067         	movff	?___fladd,?_floor
  4123  001AC2  C02D  F068         	movff	?___fladd+1,?_floor+1
  4124  001AC6  C02E  F069         	movff	?___fladd+2,?_floor+2
  4125  001ACA  C02F  F06A         	movff	?___fladd+3,?_floor+3
  4126  001ACE  D008               	goto	l882
  4127  001AD0                     l884:
  4128  001AD0  C06B  F067         	movff	floor@i,?_floor
  4129  001AD4  C06C  F068         	movff	floor@i+1,?_floor+1
  4130  001AD8  C06D  F069         	movff	floor@i+2,?_floor+2
  4131  001ADC  C06E  F06A         	movff	floor@i+3,?_floor+3
  4132  001AE0                     l882:
  4133  001AE0  0012               	return		;funcret
  4134  001AE2                     __end_of_floor:
  4135                           	opt stack 0
  4136                           tblptru	equ	0xFF8
  4137                           tblptrh	equ	0xFF7
  4138                           tblptrl	equ	0xFF6
  4139                           tablat	equ	0xFF5
  4140                           prodl	equ	0xFF3
  4141                           intcon	equ	0xFF2
  4142                           intcon2	equ	0xFF1
  4143                           postinc0	equ	0xFEE
  4144                           wreg	equ	0xFE8
  4145                           postdec1	equ	0xFE5
  4146                           fsr1l	equ	0xFE1
  4147                           indf2	equ	0xFDF
  4148                           postinc2	equ	0xFDE
  4149                           postdec2	equ	0xFDD
  4150                           fsr2h	equ	0xFDA
  4151                           fsr2l	equ	0xFD9
  4152                           status	equ	0xFD8
  4153                           
  4154 ;; *************** function ___fltol *****************
  4155 ;; Defined at:
  4156 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fltol.c"
  4157 ;; Parameters:    Size  Location     Type
  4158 ;;  f1              4   81[COMRAM] int 
  4159 ;; Auto vars:     Size  Location     Type
  4160 ;;  exp1            1    1[BANK0 ] unsigned char 
  4161 ;;  sign1           1    0[BANK0 ] unsigned char 
  4162 ;; Return value:  Size  Location     Type
  4163 ;;                  4   81[COMRAM] long 
  4164 ;; Registers used:
  4165 ;;		wreg, status,2, status,0
  4166 ;; Tracked objects:
  4167 ;;		On entry : 0/0
  4168 ;;		On exit  : F/0
  4169 ;;		Unchanged: 0/0
  4170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4171 ;;      Params:         4       0       0       0       0       0       0       0       0
  4172 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4173 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4174 ;;      Totals:         8       2       0       0       0       0       0       0       0
  4175 ;;Total ram usage:       10 bytes
  4176 ;; Hardware stack levels used:    1
  4177 ;; Hardware stack levels required when called:    1
  4178 ;; This function calls:
  4179 ;;		Nothing
  4180 ;; This function is called by:
  4181 ;;		_format_double
  4182 ;;		_measure_capacitance
  4183 ;;		_measure_inductance
  4184 ;;		_floor
  4185 ;;		_pow
  4186 ;;		_exp
  4187 ;; This function uses a non-reentrant model
  4188 ;;
  4189                           
  4190                           	psect	text14
  4191  0021CA                     __ptext14:
  4192                           	opt stack 0
  4193  0021CA                     ___fltol:
  4194                           	opt stack 28
  4195                           
  4196                           ;incstack = 0
  4197  0021CA  3454               	rlcf	___fltol@f1+2,w,c
  4198  0021CC  3455               	rlcf	___fltol@f1+3,w,c
  4199  0021CE  0100               	movlb	0	; () banked
  4200  0021D0  6F61               	movwf	___fltol@exp1& (0+255),b
  4201  0021D2  5161               	movf	___fltol@exp1& (0+255),w,b
  4202  0021D4  E105               	bnz	l3718
  4203  0021D6                     l3716:
  4204                           
  4205                           ; BSR set to: 0
  4206  0021D6  6A52               	clrf	?___fltol,c
  4207  0021D8  6A53               	clrf	?___fltol+1,c
  4208  0021DA  6A54               	clrf	?___fltol+2,c
  4209  0021DC  6A55               	clrf	?___fltol+3,c
  4210  0021DE  D043               	goto	l894
  4211  0021E0                     l3718:
  4212                           
  4213                           ; BSR set to: 0
  4214  0021E0  C052  F056         	movff	___fltol@f1,??___fltol
  4215  0021E4  C053  F057         	movff	___fltol@f1+1,??___fltol+1
  4216  0021E8  C054  F058         	movff	___fltol@f1+2,??___fltol+2
  4217  0021EC  C055  F059         	movff	___fltol@f1+3,??___fltol+3
  4218  0021F0  0E20               	movlw	32
  4219  0021F2  D005               	goto	u2960
  4220  0021F4                     u2965:
  4221  0021F4  90D8               	bcf	status,0,c
  4222  0021F6  3259               	rrcf	??___fltol+3,f,c
  4223  0021F8  3258               	rrcf	??___fltol+2,f,c
  4224  0021FA  3257               	rrcf	??___fltol+1,f,c
  4225  0021FC  3256               	rrcf	??___fltol,f,c
  4226  0021FE                     u2960:
  4227  0021FE  2EE8               	decfsz	wreg,f,c
  4228  002200  D7F9               	goto	u2965
  4229  002202  5056               	movf	??___fltol,w,c
  4230  002204  6F60               	movwf	___fltol@sign1& (0+255),b
  4231                           
  4232                           ; BSR set to: 0
  4233  002206  8E54               	bsf	___fltol@f1+2,7,c
  4234                           
  4235                           ; BSR set to: 0
  4236  002208  6A55               	clrf	___fltol@f1+3,c
  4237                           
  4238                           ; BSR set to: 0
  4239  00220A  0E96               	movlw	150
  4240  00220C  5F61               	subwf	___fltol@exp1& (0+255),f,b
  4241                           
  4242                           ; BSR set to: 0
  4243  00220E  AF61               	btfss	___fltol@exp1& (0+255),7,b
  4244  002210  D00C               	goto	l3736
  4245                           
  4246                           ; BSR set to: 0
  4247  002212  5161               	movf	___fltol@exp1& (0+255),w,b
  4248  002214  0A80               	xorlw	128
  4249  002216  0F97               	addlw	151
  4250  002218  E3DE               	bnc	l3716
  4251  00221A                     l3732:
  4252                           
  4253                           ; BSR set to: 0
  4254  00221A  90D8               	bcf	status,0,c
  4255  00221C  3255               	rrcf	___fltol@f1+3,f,c
  4256  00221E  3254               	rrcf	___fltol@f1+2,f,c
  4257  002220  3253               	rrcf	___fltol@f1+1,f,c
  4258  002222  3252               	rrcf	___fltol@f1,f,c
  4259                           
  4260                           ; BSR set to: 0
  4261  002224  3F61               	incfsz	___fltol@exp1& (0+255),f,b
  4262  002226  D7F9               	goto	l3732
  4263  002228  D00C               	goto	l3744
  4264  00222A                     l3736:
  4265                           
  4266                           ; BSR set to: 0
  4267  00222A  0E1F               	movlw	31
  4268  00222C  6561               	cpfsgt	___fltol@exp1& (0+255),b
  4269  00222E  D007               	goto	l3742
  4270  002230  D7D2               	goto	l3716
  4271  002232                     l3740:
  4272                           
  4273                           ; BSR set to: 0
  4274  002232  90D8               	bcf	status,0,c
  4275  002234  3652               	rlcf	___fltol@f1,f,c
  4276  002236  3653               	rlcf	___fltol@f1+1,f,c
  4277  002238  3654               	rlcf	___fltol@f1+2,f,c
  4278  00223A  3655               	rlcf	___fltol@f1+3,f,c
  4279  00223C  0761               	decf	___fltol@exp1& (0+255),f,b
  4280  00223E                     l3742:
  4281                           
  4282                           ; BSR set to: 0
  4283  00223E  5161               	movf	___fltol@exp1& (0+255),w,b
  4284  002240  E1F8               	bnz	l3740
  4285  002242                     l3744:
  4286                           
  4287                           ; BSR set to: 0
  4288  002242  5160               	movf	___fltol@sign1& (0+255),w,b
  4289  002244  E008               	bz	l3748
  4290                           
  4291                           ; BSR set to: 0
  4292  002246  1E55               	comf	___fltol@f1+3,f,c
  4293  002248  1E54               	comf	___fltol@f1+2,f,c
  4294  00224A  1E53               	comf	___fltol@f1+1,f,c
  4295  00224C  6C52               	negf	___fltol@f1,c
  4296  00224E  0E00               	movlw	0
  4297  002250  2253               	addwfc	___fltol@f1+1,f,c
  4298  002252  2254               	addwfc	___fltol@f1+2,f,c
  4299  002254  2255               	addwfc	___fltol@f1+3,f,c
  4300  002256                     l3748:
  4301                           
  4302                           ; BSR set to: 0
  4303  002256  C052  F052         	movff	___fltol@f1,?___fltol
  4304  00225A  C053  F053         	movff	___fltol@f1+1,?___fltol+1
  4305  00225E  C054  F054         	movff	___fltol@f1+2,?___fltol+2
  4306  002262  C055  F055         	movff	___fltol@f1+3,?___fltol+3
  4307  002266                     l894:
  4308                           
  4309                           ; BSR set to: 0
  4310  002266  0012               	return		;funcret
  4311  002268                     __end_of___fltol:
  4312                           	opt stack 0
  4313                           tblptru	equ	0xFF8
  4314                           tblptrh	equ	0xFF7
  4315                           tblptrl	equ	0xFF6
  4316                           tablat	equ	0xFF5
  4317                           prodl	equ	0xFF3
  4318                           intcon	equ	0xFF2
  4319                           intcon2	equ	0xFF1
  4320                           postinc0	equ	0xFEE
  4321                           wreg	equ	0xFE8
  4322                           postdec1	equ	0xFE5
  4323                           fsr1l	equ	0xFE1
  4324                           indf2	equ	0xFDF
  4325                           postinc2	equ	0xFDE
  4326                           postdec2	equ	0xFDD
  4327                           fsr2h	equ	0xFDA
  4328                           fsr2l	equ	0xFD9
  4329                           status	equ	0xFD8
  4330                           
  4331 ;; *************** function ___flge *****************
  4332 ;; Defined at:
  4333 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flge.c"
  4334 ;; Parameters:    Size  Location     Type
  4335 ;;  ff1             4    3[COMRAM] long 
  4336 ;;  ff2             4    7[COMRAM] long 
  4337 ;; Auto vars:     Size  Location     Type
  4338 ;;		None
  4339 ;; Return value:  Size  Location     Type
  4340 ;;		None               void
  4341 ;; Registers used:
  4342 ;;		wreg, status,2, status,0
  4343 ;; Tracked objects:
  4344 ;;		On entry : 0/0
  4345 ;;		On exit  : 0/0
  4346 ;;		Unchanged: 0/0
  4347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4348 ;;      Params:         8       0       0       0       0       0       0       0       0
  4349 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4350 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4351 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4352 ;;Total ram usage:        8 bytes
  4353 ;; Hardware stack levels used:    1
  4354 ;; Hardware stack levels required when called:    1
  4355 ;; This function calls:
  4356 ;;		Nothing
  4357 ;; This function is called by:
  4358 ;;		_format_double
  4359 ;;		_measure_capacitance
  4360 ;;		_measure_inductance
  4361 ;;		_floor
  4362 ;;		_pow
  4363 ;;		_exp
  4364 ;; This function uses a non-reentrant model
  4365 ;;
  4366                           
  4367                           	psect	text15
  4368  0024FA                     __ptext15:
  4369                           	opt stack 0
  4370  0024FA                     ___flge:
  4371                           	opt stack 28
  4372                           
  4373                           ; BSR set to: 0
  4374                           ;incstack = 0
  4375  0024FA  AE07               	btfss	___flge@ff1+3,7,c
  4376  0024FC  D009               	goto	l2576
  4377  0024FE  6C04               	negf	___flge@ff1,c
  4378  002500  1E05               	comf	___flge@ff1+1,f,c
  4379  002502  B0D8               	btfsc	status,0,c
  4380  002504  2A05               	incf	___flge@ff1+1,f,c
  4381  002506  1E06               	comf	___flge@ff1+2,f,c
  4382  002508  B0D8               	btfsc	status,0,c
  4383  00250A  2A06               	incf	___flge@ff1+2,f,c
  4384  00250C  0E80               	movlw	128
  4385  00250E  5607               	subfwb	___flge@ff1+3,f,c
  4386  002510                     l2576:
  4387  002510  AE0B               	btfss	___flge@ff2+3,7,c
  4388  002512  D009               	goto	l838
  4389  002514  6C08               	negf	___flge@ff2,c
  4390  002516  1E09               	comf	___flge@ff2+1,f,c
  4391  002518  B0D8               	btfsc	status,0,c
  4392  00251A  2A09               	incf	___flge@ff2+1,f,c
  4393  00251C  1E0A               	comf	___flge@ff2+2,f,c
  4394  00251E  B0D8               	btfsc	status,0,c
  4395  002520  2A0A               	incf	___flge@ff2+2,f,c
  4396  002522  0E80               	movlw	128
  4397  002524  560B               	subfwb	___flge@ff2+3,f,c
  4398  002526                     l838:
  4399  002526  0E80               	movlw	128
  4400  002528  1A07               	xorwf	___flge@ff1+3,f,c
  4401  00252A  1A0B               	xorwf	___flge@ff2+3,f,c
  4402  00252C  5008               	movf	___flge@ff2,w,c
  4403  00252E  5C04               	subwf	___flge@ff1,w,c
  4404  002530  5009               	movf	___flge@ff2+1,w,c
  4405  002532  5805               	subwfb	___flge@ff1+1,w,c
  4406  002534  500A               	movf	___flge@ff2+2,w,c
  4407  002536  5806               	subwfb	___flge@ff1+2,w,c
  4408  002538  500B               	movf	___flge@ff2+3,w,c
  4409  00253A  5807               	subwfb	___flge@ff1+3,w,c
  4410  00253C  E202               	bc	l2582
  4411  00253E  90D8               	bcf	status,0,c
  4412  002540  D001               	goto	l839
  4413  002542                     l2582:
  4414  002542  80D8               	bsf	status,0,c
  4415  002544                     l839:
  4416  002544  0012               	return		;funcret
  4417  002546                     __end_of___flge:
  4418                           	opt stack 0
  4419                           tblptru	equ	0xFF8
  4420                           tblptrh	equ	0xFF7
  4421                           tblptrl	equ	0xFF6
  4422                           tablat	equ	0xFF5
  4423                           prodl	equ	0xFF3
  4424                           intcon	equ	0xFF2
  4425                           intcon2	equ	0xFF1
  4426                           postinc0	equ	0xFEE
  4427                           wreg	equ	0xFE8
  4428                           postdec1	equ	0xFE5
  4429                           fsr1l	equ	0xFE1
  4430                           indf2	equ	0xFDF
  4431                           postinc2	equ	0xFDE
  4432                           postdec2	equ	0xFDD
  4433                           fsr2h	equ	0xFDA
  4434                           fsr2l	equ	0xFD9
  4435                           status	equ	0xFD8
  4436                           
  4437 ;; *************** function ___altofl *****************
  4438 ;; Defined at:
  4439 ;;		line 36 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\altofl.c"
  4440 ;; Parameters:    Size  Location     Type
  4441 ;;  c               4    2[BANK0 ] long 
  4442 ;; Auto vars:     Size  Location     Type
  4443 ;;  sign            1    6[BANK0 ] unsigned char 
  4444 ;; Return value:  Size  Location     Type
  4445 ;;                  4    2[BANK0 ] unsigned char 
  4446 ;; Registers used:
  4447 ;;		wreg, status,2, status,0, cstack
  4448 ;; Tracked objects:
  4449 ;;		On entry : F/0
  4450 ;;		On exit  : 0/0
  4451 ;;		Unchanged: 0/0
  4452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4453 ;;      Params:         0       4       0       0       0       0       0       0       0
  4454 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4455 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4456 ;;      Totals:         0       5       0       0       0       0       0       0       0
  4457 ;;Total ram usage:        5 bytes
  4458 ;; Hardware stack levels used:    1
  4459 ;; Hardware stack levels required when called:    2
  4460 ;; This function calls:
  4461 ;;		___flpack
  4462 ;; This function is called by:
  4463 ;;		_floor
  4464 ;; This function uses a non-reentrant model
  4465 ;;
  4466                           
  4467                           	psect	text16
  4468  0025DA                     __ptext16:
  4469                           	opt stack 0
  4470  0025DA                     ___altofl:
  4471                           	opt stack 23
  4472                           
  4473                           ; BSR set to: 0
  4474                           
  4475                           ;incstack = 0
  4476  0025DA  6B66               	clrf	___altofl@sign& (0+255),b
  4477                           
  4478                           ; BSR set to: 0
  4479  0025DC  AF65               	btfss	(___altofl@c+3)& (0+255),7,b
  4480  0025DE  D00A               	goto	l3598
  4481                           
  4482                           ; BSR set to: 0
  4483  0025E0  1F65               	comf	(___altofl@c+3)& (0+255),f,b
  4484  0025E2  1F64               	comf	(___altofl@c+2)& (0+255),f,b
  4485  0025E4  1F63               	comf	(___altofl@c+1)& (0+255),f,b
  4486  0025E6  6D62               	negf	___altofl@c& (0+255),b
  4487  0025E8  0E00               	movlw	0
  4488  0025EA  2363               	addwfc	(___altofl@c+1)& (0+255),f,b
  4489  0025EC  2364               	addwfc	(___altofl@c+2)& (0+255),f,b
  4490  0025EE  2365               	addwfc	(___altofl@c+3)& (0+255),f,b
  4491                           
  4492                           ; BSR set to: 0
  4493  0025F0  0E01               	movlw	1
  4494  0025F2  6F66               	movwf	___altofl@sign& (0+255),b
  4495  0025F4                     l3598:
  4496                           
  4497                           ; BSR set to: 0
  4498  0025F4  C062  F004         	movff	___altofl@c,___flpack@arg
  4499  0025F8  C063  F005         	movff	___altofl@c+1,___flpack@arg+1
  4500  0025FC  C064  F006         	movff	___altofl@c+2,___flpack@arg+2
  4501  002600  C065  F007         	movff	___altofl@c+3,___flpack@arg+3
  4502  002604  0E96               	movlw	150
  4503  002606  6E08               	movwf	___flpack@exp,c
  4504  002608  C066  F009         	movff	___altofl@sign,___flpack@sign
  4505  00260C  EC2B  F00F         	call	___flpack	;wreg free
  4506  002610  C004  F062         	movff	?___flpack,?___altofl
  4507  002614  C005  F063         	movff	?___flpack+1,?___altofl+1
  4508  002618  C006  F064         	movff	?___flpack+2,?___altofl+2
  4509  00261C  C007  F065         	movff	?___flpack+3,?___altofl+3
  4510  002620  0012               	return		;funcret
  4511  002622                     __end_of___altofl:
  4512                           	opt stack 0
  4513                           tblptru	equ	0xFF8
  4514                           tblptrh	equ	0xFF7
  4515                           tblptrl	equ	0xFF6
  4516                           tablat	equ	0xFF5
  4517                           prodl	equ	0xFF3
  4518                           intcon	equ	0xFF2
  4519                           intcon2	equ	0xFF1
  4520                           postinc0	equ	0xFEE
  4521                           wreg	equ	0xFE8
  4522                           postdec1	equ	0xFE5
  4523                           fsr1l	equ	0xFE1
  4524                           indf2	equ	0xFDF
  4525                           postinc2	equ	0xFDE
  4526                           postdec2	equ	0xFDD
  4527                           fsr2h	equ	0xFDA
  4528                           fsr2l	equ	0xFD9
  4529                           status	equ	0xFD8
  4530                           
  4531 ;; *************** function ___flsub *****************
  4532 ;; Defined at:
  4533 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flsub.c"
  4534 ;; Parameters:    Size  Location     Type
  4535 ;;  f1              4   55[COMRAM] unsigned char 
  4536 ;;  f2              4   59[COMRAM] unsigned char 
  4537 ;; Auto vars:     Size  Location     Type
  4538 ;;		None
  4539 ;; Return value:  Size  Location     Type
  4540 ;;                  4   55[COMRAM] unsigned char 
  4541 ;; Registers used:
  4542 ;;		wreg, status,2, status,0, cstack
  4543 ;; Tracked objects:
  4544 ;;		On entry : 0/0
  4545 ;;		On exit  : 0/0
  4546 ;;		Unchanged: 0/0
  4547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4548 ;;      Params:         8       0       0       0       0       0       0       0       0
  4549 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4550 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4551 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4552 ;;Total ram usage:        8 bytes
  4553 ;; Hardware stack levels used:    1
  4554 ;; Hardware stack levels required when called:    3
  4555 ;; This function calls:
  4556 ;;		___fladd
  4557 ;; This function is called by:
  4558 ;;		_format_double
  4559 ;;		_measure_capacitance
  4560 ;;		_measure_inductance
  4561 ;;		_exp
  4562 ;; This function uses a non-reentrant model
  4563 ;;
  4564                           
  4565                           	psect	text17
  4566  00266A                     __ptext17:
  4567                           	opt stack 0
  4568  00266A                     ___flsub:
  4569                           	opt stack 26
  4570                           
  4571                           ;incstack = 0
  4572  00266A  503C               	movf	___flsub@f2,w,c
  4573  00266C  103D               	iorwf	___flsub@f2+1,w,c
  4574  00266E  103E               	iorwf	___flsub@f2+2,w,c
  4575  002670  103F               	iorwf	___flsub@f2+3,w,c
  4576  002672  E002               	bz	l3812
  4577  002674  0E80               	movlw	128
  4578  002676  1A3F               	xorwf	___flsub@f2+3,f,c
  4579  002678                     l3812:
  4580  002678  C038  F02C         	movff	___flsub@f1,___fladd@f1
  4581  00267C  C039  F02D         	movff	___flsub@f1+1,___fladd@f1+1
  4582  002680  C03A  F02E         	movff	___flsub@f1+2,___fladd@f1+2
  4583  002684  C03B  F02F         	movff	___flsub@f1+3,___fladd@f1+3
  4584  002688  C03C  F030         	movff	___flsub@f2,___fladd@f2
  4585  00268C  C03D  F031         	movff	___flsub@f2+1,___fladd@f2+1
  4586  002690  C03E  F032         	movff	___flsub@f2+2,___fladd@f2+2
  4587  002694  C03F  F033         	movff	___flsub@f2+3,___fladd@f2+3
  4588  002698  EC40  F00B         	call	___fladd	;wreg free
  4589  00269C  C02C  F038         	movff	?___fladd,?___flsub
  4590  0026A0  C02D  F039         	movff	?___fladd+1,?___flsub+1
  4591  0026A4  C02E  F03A         	movff	?___fladd+2,?___flsub+2
  4592  0026A8  C02F  F03B         	movff	?___fladd+3,?___flsub+3
  4593  0026AC  0012               	return		;funcret
  4594  0026AE                     __end_of___flsub:
  4595                           	opt stack 0
  4596                           tblptru	equ	0xFF8
  4597                           tblptrh	equ	0xFF7
  4598                           tblptrl	equ	0xFF6
  4599                           tablat	equ	0xFF5
  4600                           prodl	equ	0xFF3
  4601                           intcon	equ	0xFF2
  4602                           intcon2	equ	0xFF1
  4603                           postinc0	equ	0xFEE
  4604                           wreg	equ	0xFE8
  4605                           postdec1	equ	0xFE5
  4606                           fsr1l	equ	0xFE1
  4607                           indf2	equ	0xFDF
  4608                           postinc2	equ	0xFDE
  4609                           postdec2	equ	0xFDD
  4610                           fsr2h	equ	0xFDA
  4611                           fsr2l	equ	0xFD9
  4612                           status	equ	0xFD8
  4613                           
  4614 ;; *************** function ___flneg *****************
  4615 ;; Defined at:
  4616 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flneg.c"
  4617 ;; Parameters:    Size  Location     Type
  4618 ;;  f1              4    3[COMRAM] unsigned char 
  4619 ;; Auto vars:     Size  Location     Type
  4620 ;;		None
  4621 ;; Return value:  Size  Location     Type
  4622 ;;                  4    3[COMRAM] unsigned char 
  4623 ;; Registers used:
  4624 ;;		wreg, status,2, status,0
  4625 ;; Tracked objects:
  4626 ;;		On entry : F/0
  4627 ;;		On exit  : F/0
  4628 ;;		Unchanged: F/0
  4629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4630 ;;      Params:         4       0       0       0       0       0       0       0       0
  4631 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4632 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4633 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4634 ;;Total ram usage:        4 bytes
  4635 ;; Hardware stack levels used:    1
  4636 ;; Hardware stack levels required when called:    1
  4637 ;; This function calls:
  4638 ;;		Nothing
  4639 ;; This function is called by:
  4640 ;;		_pow
  4641 ;;		_exp
  4642 ;; This function uses a non-reentrant model
  4643 ;;
  4644                           
  4645                           	psect	text18
  4646  00292E                     __ptext18:
  4647                           	opt stack 0
  4648  00292E                     ___flneg:
  4649                           	opt stack 25
  4650                           
  4651                           ; BSR set to: 0
  4652                           
  4653                           ;incstack = 0
  4654  00292E  5004               	movf	___flneg@f1,w,c
  4655  002930  1005               	iorwf	___flneg@f1+1,w,c
  4656  002932  1006               	iorwf	___flneg@f1+2,w,c
  4657  002934  1007               	iorwf	___flneg@f1+3,w,c
  4658  002936  E002               	bz	l2744
  4659                           
  4660                           ; BSR set to: 0
  4661  002938  0E80               	movlw	128
  4662  00293A  1A07               	xorwf	___flneg@f1+3,f,c
  4663  00293C                     l2744:
  4664                           
  4665                           ; BSR set to: 0
  4666  00293C  C004  F004         	movff	___flneg@f1,?___flneg
  4667  002940  C005  F005         	movff	___flneg@f1+1,?___flneg+1
  4668  002944  C006  F006         	movff	___flneg@f1+2,?___flneg+2
  4669  002948  C007  F007         	movff	___flneg@f1+3,?___flneg+3
  4670                           
  4671                           ; BSR set to: 0
  4672  00294C  0012               	return		;funcret
  4673  00294E                     __end_of___flneg:
  4674                           	opt stack 0
  4675                           tblptru	equ	0xFF8
  4676                           tblptrh	equ	0xFF7
  4677                           tblptrl	equ	0xFF6
  4678                           tablat	equ	0xFF5
  4679                           prodl	equ	0xFF3
  4680                           intcon	equ	0xFF2
  4681                           intcon2	equ	0xFF1
  4682                           postinc0	equ	0xFEE
  4683                           wreg	equ	0xFE8
  4684                           postdec1	equ	0xFE5
  4685                           fsr1l	equ	0xFE1
  4686                           indf2	equ	0xFDF
  4687                           postinc2	equ	0xFDE
  4688                           postdec2	equ	0xFDD
  4689                           fsr2h	equ	0xFDA
  4690                           fsr2l	equ	0xFD9
  4691                           status	equ	0xFD8
  4692                           
  4693 ;; *************** function ___fldiv *****************
  4694 ;; Defined at:
  4695 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldiv.c"
  4696 ;; Parameters:    Size  Location     Type
  4697 ;;  f1              4   13[COMRAM] unsigned char 
  4698 ;;  f2              4   17[COMRAM] unsigned char 
  4699 ;; Auto vars:     Size  Location     Type
  4700 ;;  f3              4   21[COMRAM] unsigned char 
  4701 ;;  sign            1   27[COMRAM] unsigned char 
  4702 ;;  exp             1   26[COMRAM] unsigned char 
  4703 ;;  cntr            1   25[COMRAM] unsigned char 
  4704 ;; Return value:  Size  Location     Type
  4705 ;;                  4   13[COMRAM] unsigned char 
  4706 ;; Registers used:
  4707 ;;		wreg, status,2, status,0, cstack
  4708 ;; Tracked objects:
  4709 ;;		On entry : 0/0
  4710 ;;		On exit  : 0/0
  4711 ;;		Unchanged: 0/0
  4712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4713 ;;      Params:         8       0       0       0       0       0       0       0       0
  4714 ;;      Locals:         7       0       0       0       0       0       0       0       0
  4715 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4716 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4717 ;;Total ram usage:       15 bytes
  4718 ;; Hardware stack levels used:    1
  4719 ;; Hardware stack levels required when called:    2
  4720 ;; This function calls:
  4721 ;;		___flpack
  4722 ;; This function is called by:
  4723 ;;		_format_double
  4724 ;;		_measure_capacitance
  4725 ;;		_measure_inductance
  4726 ;;		_exp
  4727 ;; This function uses a non-reentrant model
  4728 ;;
  4729                           
  4730                           	psect	text19
  4731  002124                     __ptext19:
  4732                           	opt stack 0
  4733  002124                     ___fldiv:
  4734                           	opt stack 27
  4735                           
  4736                           ; BSR set to: 0
  4737                           ;incstack = 0
  4738  002124  3410               	rlcf	___fldiv@f1+2,w,c
  4739  002126  3411               	rlcf	___fldiv@f1+3,w,c
  4740  002128  6E1B               	movwf	___fldiv@exp,c
  4741  00212A  501B               	movf	___fldiv@exp,w,c
  4742  00212C  E005               	bz	l3778
  4743  00212E  3414               	rlcf	___fldiv@f2+2,w,c
  4744  002130  3415               	rlcf	___fldiv@f2+3,w,c
  4745  002132  6E1C               	movwf	___fldiv@sign,c
  4746  002134  501C               	movf	___fldiv@sign,w,c
  4747  002136  E105               	bnz	l3780
  4748  002138                     l3778:
  4749  002138  6A0E               	clrf	?___fldiv,c
  4750  00213A  6A0F               	clrf	?___fldiv+1,c
  4751  00213C  6A10               	clrf	?___fldiv+2,c
  4752  00213E  6A11               	clrf	?___fldiv+3,c
  4753  002140  D043               	goto	l830
  4754  002142                     l3780:
  4755  002142  501C               	movf	___fldiv@sign,w,c
  4756  002144  0F89               	addlw	137
  4757  002146  5E1B               	subwf	___fldiv@exp,f,c
  4758  002148  C011  F01C         	movff	___fldiv@f1+3,___fldiv@sign
  4759  00214C  5015               	movf	___fldiv@f2+3,w,c
  4760  00214E  1A1C               	xorwf	___fldiv@sign,f,c
  4761  002150  0E80               	movlw	128
  4762  002152  161C               	andwf	___fldiv@sign,f,c
  4763  002154  8E10               	bsf	___fldiv@f1+2,7,c
  4764  002156  6A11               	clrf	___fldiv@f1+3,c
  4765  002158  8E14               	bsf	___fldiv@f2+2,7,c
  4766  00215A  6A15               	clrf	___fldiv@f2+3,c
  4767  00215C  0E20               	movlw	32
  4768  00215E  6E1A               	movwf	___fldiv@cntr,c
  4769  002160                     l3792:
  4770  002160  90D8               	bcf	status,0,c
  4771  002162  3616               	rlcf	___fldiv@f3,f,c
  4772  002164  3617               	rlcf	___fldiv@f3+1,f,c
  4773  002166  3618               	rlcf	___fldiv@f3+2,f,c
  4774  002168  3619               	rlcf	___fldiv@f3+3,f,c
  4775  00216A  5012               	movf	___fldiv@f2,w,c
  4776  00216C  5C0E               	subwf	___fldiv@f1,w,c
  4777  00216E  5013               	movf	___fldiv@f2+1,w,c
  4778  002170  580F               	subwfb	___fldiv@f1+1,w,c
  4779  002172  5014               	movf	___fldiv@f2+2,w,c
  4780  002174  5810               	subwfb	___fldiv@f1+2,w,c
  4781  002176  5015               	movf	___fldiv@f2+3,w,c
  4782  002178  5811               	subwfb	___fldiv@f1+3,w,c
  4783  00217A  E309               	bnc	l3800
  4784  00217C  5012               	movf	___fldiv@f2,w,c
  4785  00217E  5E0E               	subwf	___fldiv@f1,f,c
  4786  002180  5013               	movf	___fldiv@f2+1,w,c
  4787  002182  5A0F               	subwfb	___fldiv@f1+1,f,c
  4788  002184  5014               	movf	___fldiv@f2+2,w,c
  4789  002186  5A10               	subwfb	___fldiv@f1+2,f,c
  4790  002188  5015               	movf	___fldiv@f2+3,w,c
  4791  00218A  5A11               	subwfb	___fldiv@f1+3,f,c
  4792  00218C  8016               	bsf	___fldiv@f3,0,c
  4793  00218E                     l3800:
  4794  00218E  90D8               	bcf	status,0,c
  4795  002190  360E               	rlcf	___fldiv@f1,f,c
  4796  002192  360F               	rlcf	___fldiv@f1+1,f,c
  4797  002194  3610               	rlcf	___fldiv@f1+2,f,c
  4798  002196  3611               	rlcf	___fldiv@f1+3,f,c
  4799  002198  2E1A               	decfsz	___fldiv@cntr,f,c
  4800  00219A  D7E2               	goto	l3792
  4801  00219C  C016  F004         	movff	___fldiv@f3,___flpack@arg
  4802  0021A0  C017  F005         	movff	___fldiv@f3+1,___flpack@arg+1
  4803  0021A4  C018  F006         	movff	___fldiv@f3+2,___flpack@arg+2
  4804  0021A8  C019  F007         	movff	___fldiv@f3+3,___flpack@arg+3
  4805  0021AC  C01B  F008         	movff	___fldiv@exp,___flpack@exp
  4806  0021B0  C01C  F009         	movff	___fldiv@sign,___flpack@sign
  4807  0021B4  EC2B  F00F         	call	___flpack	;wreg free
  4808  0021B8  C004  F00E         	movff	?___flpack,?___fldiv
  4809  0021BC  C005  F00F         	movff	?___flpack+1,?___fldiv+1
  4810  0021C0  C006  F010         	movff	?___flpack+2,?___fldiv+2
  4811  0021C4  C007  F011         	movff	?___flpack+3,?___fldiv+3
  4812  0021C8                     l830:
  4813  0021C8  0012               	return		;funcret
  4814  0021CA                     __end_of___fldiv:
  4815                           	opt stack 0
  4816                           tblptru	equ	0xFF8
  4817                           tblptrh	equ	0xFF7
  4818                           tblptrl	equ	0xFF6
  4819                           tablat	equ	0xFF5
  4820                           prodl	equ	0xFF3
  4821                           intcon	equ	0xFF2
  4822                           intcon2	equ	0xFF1
  4823                           postinc0	equ	0xFEE
  4824                           wreg	equ	0xFE8
  4825                           postdec1	equ	0xFE5
  4826                           fsr1l	equ	0xFE1
  4827                           indf2	equ	0xFDF
  4828                           postinc2	equ	0xFDE
  4829                           postdec2	equ	0xFDD
  4830                           fsr2h	equ	0xFDA
  4831                           fsr2l	equ	0xFD9
  4832                           status	equ	0xFD8
  4833                           
  4834 ;; *************** function ___lltofl *****************
  4835 ;; Defined at:
  4836 ;;		line 30 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltofl.c"
  4837 ;; Parameters:    Size  Location     Type
  4838 ;;  c               4   13[COMRAM] unsigned long 
  4839 ;; Auto vars:     Size  Location     Type
  4840 ;;		None
  4841 ;; Return value:  Size  Location     Type
  4842 ;;                  4   13[COMRAM] unsigned long 
  4843 ;; Registers used:
  4844 ;;		wreg, status,2, status,0, cstack
  4845 ;; Tracked objects:
  4846 ;;		On entry : F/0
  4847 ;;		On exit  : 0/0
  4848 ;;		Unchanged: 0/0
  4849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4850 ;;      Params:         4       0       0       0       0       0       0       0       0
  4851 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4852 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4853 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4854 ;;Total ram usage:        4 bytes
  4855 ;; Hardware stack levels used:    1
  4856 ;; Hardware stack levels required when called:    2
  4857 ;; This function calls:
  4858 ;;		___flpack
  4859 ;; This function is called by:
  4860 ;;		_pow
  4861 ;; This function uses a non-reentrant model
  4862 ;;
  4863                           
  4864                           	psect	text20
  4865  0027BE                     __ptext20:
  4866                           	opt stack 0
  4867  0027BE                     ___lltofl:
  4868                           	opt stack 25
  4869                           
  4870                           ; BSR set to: 0
  4871                           
  4872                           ;incstack = 0
  4873  0027BE  C00E  F004         	movff	___lltofl@c,___flpack@arg
  4874  0027C2  C00F  F005         	movff	___lltofl@c+1,___flpack@arg+1
  4875  0027C6  C010  F006         	movff	___lltofl@c+2,___flpack@arg+2
  4876  0027CA  C011  F007         	movff	___lltofl@c+3,___flpack@arg+3
  4877  0027CE  0E96               	movlw	150
  4878  0027D0  6E08               	movwf	___flpack@exp,c
  4879  0027D2  0E00               	movlw	0
  4880  0027D4  6E09               	movwf	___flpack@sign,c
  4881  0027D6  EC2B  F00F         	call	___flpack	;wreg free
  4882  0027DA  C004  F00E         	movff	?___flpack,?___lltofl
  4883  0027DE  C005  F00F         	movff	?___flpack+1,?___lltofl+1
  4884  0027E2  C006  F010         	movff	?___flpack+2,?___lltofl+2
  4885  0027E6  C007  F011         	movff	?___flpack+3,?___lltofl+3
  4886  0027EA  0012               	return		;funcret
  4887  0027EC                     __end_of___lltofl:
  4888                           	opt stack 0
  4889                           tblptru	equ	0xFF8
  4890                           tblptrh	equ	0xFF7
  4891                           tblptrl	equ	0xFF6
  4892                           tablat	equ	0xFF5
  4893                           prodl	equ	0xFF3
  4894                           intcon	equ	0xFF2
  4895                           intcon2	equ	0xFF1
  4896                           postinc0	equ	0xFEE
  4897                           wreg	equ	0xFE8
  4898                           postdec1	equ	0xFE5
  4899                           fsr1l	equ	0xFE1
  4900                           indf2	equ	0xFDF
  4901                           postinc2	equ	0xFDE
  4902                           postdec2	equ	0xFDD
  4903                           fsr2h	equ	0xFDA
  4904                           fsr2l	equ	0xFD9
  4905                           status	equ	0xFD8
  4906                           
  4907 ;; *************** function _log10 *****************
  4908 ;; Defined at:
  4909 ;;		line 39 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  4910 ;; Parameters:    Size  Location     Type
  4911 ;;  x               4   73[COMRAM] unsigned long 
  4912 ;; Auto vars:     Size  Location     Type
  4913 ;;		None
  4914 ;; Return value:  Size  Location     Type
  4915 ;;                  4   73[COMRAM] unsigned long 
  4916 ;; Registers used:
  4917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4918 ;; Tracked objects:
  4919 ;;		On entry : 0/0
  4920 ;;		On exit  : 0/0
  4921 ;;		Unchanged: 0/0
  4922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4923 ;;      Params:         4       0       0       0       0       0       0       0       0
  4924 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4925 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4926 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4927 ;;Total ram usage:        8 bytes
  4928 ;; Hardware stack levels used:    1
  4929 ;; Hardware stack levels required when called:    5
  4930 ;; This function calls:
  4931 ;;		___flmul
  4932 ;;		_log
  4933 ;; This function is called by:
  4934 ;;		_format_double
  4935 ;; This function uses a non-reentrant model
  4936 ;;
  4937                           
  4938                           	psect	text21
  4939  002454                     __ptext21:
  4940                           	opt stack 0
  4941  002454                     _log10:
  4942                           	opt stack 23
  4943                           
  4944                           ;incstack = 0
  4945  002454  C04A  F044         	movff	log10@x,log@x
  4946  002458  C04B  F045         	movff	log10@x+1,log@x+1
  4947  00245C  C04C  F046         	movff	log10@x+2,log@x+2
  4948  002460  C04D  F047         	movff	log10@x+3,log@x+3
  4949  002464  ECED  F00B         	call	_log	;wreg free
  4950  002468  C044  F04E         	movff	?_log,_log10$1106
  4951  00246C  C045  F04F         	movff	?_log+1,_log10$1106+1
  4952  002470  C046  F050         	movff	?_log+2,_log10$1106+2
  4953  002474  C047  F051         	movff	?_log+3,_log10$1106+3
  4954  002478  C04E  F01D         	movff	_log10$1106,___flmul@f1
  4955  00247C  C04F  F01E         	movff	_log10$1106+1,___flmul@f1+1
  4956  002480  C050  F01F         	movff	_log10$1106+2,___flmul@f1+2
  4957  002484  C051  F020         	movff	_log10$1106+3,___flmul@f1+3
  4958  002488  0ED9               	movlw	217
  4959  00248A  6E21               	movwf	___flmul@f2,c
  4960  00248C  0E5B               	movlw	91
  4961  00248E  6E22               	movwf	___flmul@f2+1,c
  4962  002490  0EDE               	movlw	222
  4963  002492  6E23               	movwf	___flmul@f2+2,c
  4964  002494  0E3E               	movlw	62
  4965  002496  6E24               	movwf	___flmul@f2+3,c
  4966  002498  EC8C  F00F         	call	___flmul	;wreg free
  4967  00249C  C01D  F04A         	movff	?___flmul,?_log10
  4968  0024A0  C01E  F04B         	movff	?___flmul+1,?_log10+1
  4969  0024A4  C01F  F04C         	movff	?___flmul+2,?_log10+2
  4970  0024A8  C020  F04D         	movff	?___flmul+3,?_log10+3
  4971  0024AC  0012               	return		;funcret
  4972  0024AE                     __end_of_log10:
  4973                           	opt stack 0
  4974                           tblptru	equ	0xFF8
  4975                           tblptrh	equ	0xFF7
  4976                           tblptrl	equ	0xFF6
  4977                           tablat	equ	0xFF5
  4978                           prodl	equ	0xFF3
  4979                           intcon	equ	0xFF2
  4980                           intcon2	equ	0xFF1
  4981                           postinc0	equ	0xFEE
  4982                           wreg	equ	0xFE8
  4983                           postdec1	equ	0xFE5
  4984                           fsr1l	equ	0xFE1
  4985                           indf2	equ	0xFDF
  4986                           postinc2	equ	0xFDE
  4987                           postdec2	equ	0xFDD
  4988                           fsr2h	equ	0xFDA
  4989                           fsr2l	equ	0xFD9
  4990                           status	equ	0xFD8
  4991                           
  4992 ;; *************** function _log *****************
  4993 ;; Defined at:
  4994 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  4995 ;; Parameters:    Size  Location     Type
  4996 ;;  x               4   67[COMRAM] unsigned long 
  4997 ;; Auto vars:     Size  Location     Type
  4998 ;;  exponent        2   71[COMRAM] int 
  4999 ;; Return value:  Size  Location     Type
  5000 ;;                  4   67[COMRAM] int 
  5001 ;; Registers used:
  5002 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5003 ;; Tracked objects:
  5004 ;;		On entry : 0/0
  5005 ;;		On exit  : 0/0
  5006 ;;		Unchanged: 0/0
  5007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5008 ;;      Params:         4       0       0       0       0       0       0       0       0
  5009 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5010 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5011 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5012 ;;Total ram usage:        6 bytes
  5013 ;; Hardware stack levels used:    1
  5014 ;; Hardware stack levels required when called:    4
  5015 ;; This function calls:
  5016 ;;		___awtofl
  5017 ;;		___fladd
  5018 ;;		___flmul
  5019 ;;		_eval_poly
  5020 ;;		_frexp
  5021 ;; This function is called by:
  5022 ;;		_log10
  5023 ;;		_pow
  5024 ;; This function uses a non-reentrant model
  5025 ;;
  5026                           
  5027                           	psect	text22
  5028  0017DA                     __ptext22:
  5029                           	opt stack 0
  5030  0017DA                     _log:
  5031                           	opt stack 23
  5032                           
  5033                           ;incstack = 0
  5034  0017DA  BE47               	btfsc	log@x+3,7,c
  5035  0017DC  D005               	goto	l3842
  5036  0017DE  5044               	movf	log@x,w,c
  5037  0017E0  1045               	iorwf	log@x+1,w,c
  5038  0017E2  1046               	iorwf	log@x+2,w,c
  5039  0017E4  1047               	iorwf	log@x+3,w,c
  5040  0017E6  E105               	bnz	l3844
  5041  0017E8                     l3842:
  5042  0017E8  6A44               	clrf	?_log,c
  5043  0017EA  6A45               	clrf	?_log+1,c
  5044  0017EC  6A46               	clrf	?_log+2,c
  5045  0017EE  6A47               	clrf	?_log+3,c
  5046  0017F0  D07A               	goto	l1076
  5047  0017F2                     l3844:
  5048  0017F2  6A21               	clrf	___flmul@f2,c
  5049  0017F4  6A22               	clrf	___flmul@f2+1,c
  5050  0017F6  6A23               	clrf	___flmul@f2+2,c
  5051  0017F8  0E40               	movlw	64
  5052  0017FA  6E24               	movwf	___flmul@f2+3,c
  5053  0017FC  0E48               	movlw	low log@exponent
  5054  0017FE  6E08               	movwf	frexp@eptr,c
  5055  001800  C044  F004         	movff	log@x,frexp@value
  5056  001804  C045  F005         	movff	log@x+1,frexp@value+1
  5057  001808  C046  F006         	movff	log@x+2,frexp@value+2
  5058  00180C  C047  F007         	movff	log@x+3,frexp@value+3
  5059  001810  EC80  F011         	call	_frexp	;wreg free
  5060  001814  C004  F01D         	movff	?_frexp,___flmul@f1
  5061  001818  C005  F01E         	movff	?_frexp+1,___flmul@f1+1
  5062  00181C  C006  F01F         	movff	?_frexp+2,___flmul@f1+2
  5063  001820  C007  F020         	movff	?_frexp+3,___flmul@f1+3
  5064  001824  EC8C  F00F         	call	___flmul	;wreg free
  5065  001828  C01D  F02C         	movff	?___flmul,___fladd@f1
  5066  00182C  C01E  F02D         	movff	?___flmul+1,___fladd@f1+1
  5067  001830  C01F  F02E         	movff	?___flmul+2,___fladd@f1+2
  5068  001834  C020  F02F         	movff	?___flmul+3,___fladd@f1+3
  5069  001838  D857               	call	PL26	;call to abstracted procedure
  5070  00183A  EC40  F00B         	call	___fladd	;wreg free
  5071  00183E  C02C  F044         	movff	?___fladd,log@x
  5072  001842  C02D  F045         	movff	?___fladd+1,log@x+1
  5073  001846  C02E  F046         	movff	?___fladd+2,log@x+2
  5074  00184A  C02F  F047         	movff	?___fladd+3,log@x+3
  5075  00184E  0648               	decf	log@exponent,f,c
  5076  001850  A0D8               	btfss	status,0,c
  5077  001852  0649               	decf	log@exponent+1,f,c
  5078  001854  C044  F038         	movff	log@x,eval_poly@x
  5079  001858  C045  F039         	movff	log@x+1,eval_poly@x+1
  5080  00185C  C046  F03A         	movff	log@x+2,eval_poly@x+2
  5081  001860  C047  F03B         	movff	log@x+3,eval_poly@x+3
  5082  001864  0E29               	movlw	low log@coeff
  5083  001866  6E3C               	movwf	eval_poly@d,c
  5084  001868  6A3E               	clrf	eval_poly@n+1,c
  5085  00186A  0E08               	movlw	8
  5086  00186C  6E3D               	movwf	eval_poly@n,c
  5087  00186E  ECE9  F00F         	call	_eval_poly	;wreg free
  5088  001872  C038  F044         	movff	?_eval_poly,log@x
  5089  001876  C039  F045         	movff	?_eval_poly+1,log@x+1
  5090  00187A  C03A  F046         	movff	?_eval_poly+2,log@x+2
  5091  00187E  C03B  F047         	movff	?_eval_poly+3,log@x+3
  5092  001882  0E18               	movlw	24
  5093  001884  6E21               	movwf	___flmul@f2,c
  5094  001886  0E72               	movlw	114
  5095  001888  6E22               	movwf	___flmul@f2+1,c
  5096  00188A  0E31               	movlw	49
  5097  00188C  6E23               	movwf	___flmul@f2+2,c
  5098  00188E  0E3F               	movlw	63
  5099  001890  6E24               	movwf	___flmul@f2+3,c
  5100  001892  C048  F00E         	movff	log@exponent,___awtofl@c
  5101  001896  C049  F00F         	movff	log@exponent+1,___awtofl@c+1
  5102  00189A  EC76  F013         	call	___awtofl	;wreg free
  5103  00189E  C00E  F01D         	movff	?___awtofl,___flmul@f1
  5104  0018A2  C00F  F01E         	movff	?___awtofl+1,___flmul@f1+1
  5105  0018A6  C010  F01F         	movff	?___awtofl+2,___flmul@f1+2
  5106  0018AA  C011  F020         	movff	?___awtofl+3,___flmul@f1+3
  5107  0018AE  EC8C  F00F         	call	___flmul	;wreg free
  5108  0018B2  C01D  F02C         	movff	?___flmul,___fladd@f1
  5109  0018B6  C01E  F02D         	movff	?___flmul+1,___fladd@f1+1
  5110  0018BA  C01F  F02E         	movff	?___flmul+2,___fladd@f1+2
  5111  0018BE  C020  F02F         	movff	?___flmul+3,___fladd@f1+3
  5112  0018C2  C044  F030         	movff	log@x,___fladd@f2
  5113  0018C6  C045  F031         	movff	log@x+1,___fladd@f2+1
  5114  0018CA  C046  F032         	movff	log@x+2,___fladd@f2+2
  5115  0018CE  C047  F033         	movff	log@x+3,___fladd@f2+3
  5116  0018D2  EC40  F00B         	call	___fladd	;wreg free
  5117  0018D6  C02C  F044         	movff	?___fladd,?_log
  5118  0018DA  C02D  F045         	movff	?___fladd+1,?_log+1
  5119  0018DE  C02E  F046         	movff	?___fladd+2,?_log+2
  5120  0018E2  C02F  F047         	movff	?___fladd+3,?_log+3
  5121  0018E6                     l1076:
  5122  0018E6  0012               	return		;funcret
  5123  0018E8                     __end_of_log:
  5124                           	opt stack 0
  5125  0018E8                     PL26:
  5126                           	opt stack 23
  5127  0018E8  0E00               	movlw	0
  5128  0018EA  6E30               	movwf	___fladd@f2,c
  5129  0018EC  6E31               	movwf	___fladd@f2+1,c
  5130  0018EE  0E80               	movlw	128
  5131  0018F0  6E32               	movwf	___fladd@f2+2,c
  5132  0018F2  0EBF               	movlw	191
  5133  0018F4  6E33               	movwf	___fladd@f2+3,c
  5134  0018F6  0CBF               	retlw	191
  5135  0018F8                     __end_ofPL26:
  5136                           	opt stack 0
  5137                           tblptru	equ	0xFF8
  5138                           tblptrh	equ	0xFF7
  5139                           tblptrl	equ	0xFF6
  5140                           tablat	equ	0xFF5
  5141                           prodl	equ	0xFF3
  5142                           intcon	equ	0xFF2
  5143                           intcon2	equ	0xFF1
  5144                           postinc0	equ	0xFEE
  5145                           wreg	equ	0xFE8
  5146                           postdec1	equ	0xFE5
  5147                           fsr1l	equ	0xFE1
  5148                           indf2	equ	0xFDF
  5149                           postinc2	equ	0xFDE
  5150                           postdec2	equ	0xFDD
  5151                           fsr2h	equ	0xFDA
  5152                           fsr2l	equ	0xFD9
  5153                           status	equ	0xFD8
  5154                           
  5155 ;; *************** function _frexp *****************
  5156 ;; Defined at:
  5157 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  5158 ;; Parameters:    Size  Location     Type
  5159 ;;  value           4    3[COMRAM] int 
  5160 ;;  eptr            1    7[COMRAM] PTR int 
  5161 ;;		 -> log@exponent(2), floor@expon(2), 
  5162 ;; Auto vars:     Size  Location     Type
  5163 ;;		None
  5164 ;; Return value:  Size  Location     Type
  5165 ;;                  4    3[COMRAM] PTR int 
  5166 ;; Registers used:
  5167 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5168 ;; Tracked objects:
  5169 ;;		On entry : 0/0
  5170 ;;		On exit  : 0/0
  5171 ;;		Unchanged: 0/0
  5172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5173 ;;      Params:         5       0       0       0       0       0       0       0       0
  5174 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5175 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5176 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5177 ;;Total ram usage:        7 bytes
  5178 ;; Hardware stack levels used:    1
  5179 ;; Hardware stack levels required when called:    1
  5180 ;; This function calls:
  5181 ;;		Nothing
  5182 ;; This function is called by:
  5183 ;;		_floor
  5184 ;;		_log
  5185 ;; This function uses a non-reentrant model
  5186 ;;
  5187                           
  5188                           	psect	text23
  5189  002300                     __ptext23:
  5190                           	opt stack 0
  5191  002300                     _frexp:
  5192                           	opt stack 25
  5193                           
  5194                           ;incstack = 0
  5195  002300  5004               	movf	frexp@value,w,c
  5196  002302  1005               	iorwf	frexp@value+1,w,c
  5197  002304  1006               	iorwf	frexp@value+2,w,c
  5198  002306  1007               	iorwf	frexp@value+3,w,c
  5199  002308  E10B               	bnz	l2594
  5200  00230A  5008               	movf	frexp@eptr,w,c
  5201  00230C  6ED9               	movwf	fsr2l,c
  5202  00230E  6ADA               	clrf	fsr2h,c
  5203  002310  0E00               	movlw	0
  5204  002312  6ADE               	clrf	postinc2,c
  5205  002314  6ADD               	clrf	postdec2,c
  5206  002316  6A04               	clrf	?_frexp,c
  5207  002318  6A05               	clrf	?_frexp+1,c
  5208  00231A  6A06               	clrf	?_frexp+2,c
  5209  00231C  6A07               	clrf	?_frexp+3,c
  5210  00231E  D02B               	goto	l910
  5211  002320                     l2594:
  5212  002320  5007               	movf	frexp@value+3,w,c
  5213  002322  0B7F               	andlw	127
  5214  002324  6E09               	movwf	??_frexp& (0+255),c
  5215  002326  6A0A               	clrf	(??_frexp+1)& (0+255),c
  5216  002328  90D8               	bcf	status,0,c
  5217  00232A  3609               	rlcf	??_frexp,f,c
  5218  00232C  360A               	rlcf	??_frexp+1,f,c
  5219  00232E  5008               	movf	frexp@eptr,w,c
  5220  002330  6ED9               	movwf	fsr2l,c
  5221  002332  6ADA               	clrf	fsr2h,c
  5222  002334  C009  FFDE         	movff	??_frexp,postinc2
  5223  002338  C00A  FFDD         	movff	??_frexp+1,postdec2
  5224  00233C  5008               	movf	frexp@eptr,w,c
  5225  00233E  6ED9               	movwf	fsr2l,c
  5226  002340  6ADA               	clrf	fsr2h,c
  5227  002342  0E01               	movlw	1
  5228  002344  AE06               	btfss	frexp@value+2,7,c
  5229  002346  0E00               	movlw	0
  5230  002348  12DE               	iorwf	postinc2,f,c
  5231  00234A  0E00               	movlw	0
  5232  00234C  12DD               	iorwf	postdec2,f,c
  5233  00234E  5008               	movf	frexp@eptr,w,c
  5234  002350  6ED9               	movwf	fsr2l,c
  5235  002352  6ADA               	clrf	fsr2h,c
  5236  002354  0E82               	movlw	130
  5237  002356  26DE               	addwf	postinc2,f,c
  5238  002358  0EFF               	movlw	255
  5239  00235A  22DD               	addwfc	postdec2,f,c
  5240  00235C  5007               	movf	frexp@value+3,w,c
  5241  00235E  0B80               	andlw	-128
  5242  002360  093F               	iorlw	63
  5243  002362  6E07               	movwf	frexp@value+3,c
  5244  002364  9E06               	bcf	frexp@value+2,7,c
  5245  002366  C004  F004         	movff	frexp@value,?_frexp
  5246  00236A  C005  F005         	movff	frexp@value+1,?_frexp+1
  5247  00236E  C006  F006         	movff	frexp@value+2,?_frexp+2
  5248  002372  C007  F007         	movff	frexp@value+3,?_frexp+3
  5249  002376                     l910:
  5250  002376  0012               	return		;funcret
  5251  002378                     __end_of_frexp:
  5252                           	opt stack 0
  5253                           tblptru	equ	0xFF8
  5254                           tblptrh	equ	0xFF7
  5255                           tblptrl	equ	0xFF6
  5256                           tablat	equ	0xFF5
  5257                           prodl	equ	0xFF3
  5258                           intcon	equ	0xFF2
  5259                           intcon2	equ	0xFF1
  5260                           postinc0	equ	0xFEE
  5261                           wreg	equ	0xFE8
  5262                           postdec1	equ	0xFE5
  5263                           fsr1l	equ	0xFE1
  5264                           indf2	equ	0xFDF
  5265                           postinc2	equ	0xFDE
  5266                           postdec2	equ	0xFDD
  5267                           fsr2h	equ	0xFDA
  5268                           fsr2l	equ	0xFD9
  5269                           status	equ	0xFD8
  5270                           
  5271 ;; *************** function _eval_poly *****************
  5272 ;; Defined at:
  5273 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  5274 ;; Parameters:    Size  Location     Type
  5275 ;;  x               4   55[COMRAM] PTR int 
  5276 ;;  d               1   59[COMRAM] PTR const 
  5277 ;;		 -> exp@coeff(40), log@coeff(36), 
  5278 ;;  n               2   60[COMRAM] int 
  5279 ;; Auto vars:     Size  Location     Type
  5280 ;;  res             4   63[COMRAM] int 
  5281 ;; Return value:  Size  Location     Type
  5282 ;;                  4   55[COMRAM] int 
  5283 ;; Registers used:
  5284 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5285 ;; Tracked objects:
  5286 ;;		On entry : 0/0
  5287 ;;		On exit  : 0/0
  5288 ;;		Unchanged: 0/0
  5289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5290 ;;      Params:         7       0       0       0       0       0       0       0       0
  5291 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5292 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5293 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5294 ;;Total ram usage:       12 bytes
  5295 ;; Hardware stack levels used:    1
  5296 ;; Hardware stack levels required when called:    3
  5297 ;; This function calls:
  5298 ;;		___fladd
  5299 ;;		___flmul
  5300 ;; This function is called by:
  5301 ;;		_log
  5302 ;;		_exp
  5303 ;; This function uses a non-reentrant model
  5304 ;;
  5305                           
  5306                           	psect	text24
  5307  001FD2                     __ptext24:
  5308                           	opt stack 0
  5309  001FD2                     _eval_poly:
  5310                           	opt stack 0
  5311                           
  5312                           ;incstack = 0
  5313  001FD2  D84B               	call	PL16	;call to abstracted procedure
  5314  001FD4  CFF5 F040          	movff	tablat,eval_poly@res
  5315  001FD8  0009               	tblrd		*+
  5316  001FDA  CFF5 F041          	movff	tablat,eval_poly@res+1
  5317  001FDE  0009               	tblrd		*+
  5318  001FE0  CFF5 F042          	movff	tablat,eval_poly@res+2
  5319  001FE4  000A               	tblrd		*-
  5320  001FE6  CFF5 F043          	movff	tablat,eval_poly@res+3
  5321  001FEA  D033               	goto	l3830
  5322  001FEC                     l3828:
  5323  001FEC  C040  F021         	movff	eval_poly@res,___flmul@f2
  5324  001FF0  C041  F022         	movff	eval_poly@res+1,___flmul@f2+1
  5325  001FF4  C042  F023         	movff	eval_poly@res+2,___flmul@f2+2
  5326  001FF8  C043  F024         	movff	eval_poly@res+3,___flmul@f2+3
  5327  001FFC  C038  F01D         	movff	eval_poly@x,___flmul@f1
  5328  002000  C039  F01E         	movff	eval_poly@x+1,___flmul@f1+1
  5329  002004  C03A  F01F         	movff	eval_poly@x+2,___flmul@f1+2
  5330  002008  C03B  F020         	movff	eval_poly@x+3,___flmul@f1+3
  5331  00200C  EC8C  F00F         	call	___flmul	;wreg free
  5332  002010  C01D  F02C         	movff	?___flmul,___fladd@f1
  5333  002014  C01E  F02D         	movff	?___flmul+1,___fladd@f1+1
  5334  002018  C01F  F02E         	movff	?___flmul+2,___fladd@f1+2
  5335  00201C  C020  F02F         	movff	?___flmul+3,___fladd@f1+3
  5336  002020  063D               	decf	eval_poly@n,f,c
  5337  002022  A0D8               	btfss	status,0,c
  5338  002024  063E               	decf	eval_poly@n+1,f,c
  5339  002026  D821               	call	PL16	;call to abstracted procedure
  5340  002028  CFF5 F030          	movff	tablat,___fladd@f2
  5341  00202C  0009               	tblrd		*+
  5342  00202E  CFF5 F031          	movff	tablat,___fladd@f2+1
  5343  002032  0009               	tblrd		*+
  5344  002034  CFF5 F032          	movff	tablat,___fladd@f2+2
  5345  002038  000A               	tblrd		*-
  5346  00203A  CFF5 F033          	movff	tablat,___fladd@f2+3
  5347  00203E  EC40  F00B         	call	___fladd	;wreg free
  5348  002042  C02C  F040         	movff	?___fladd,eval_poly@res
  5349  002046  C02D  F041         	movff	?___fladd+1,eval_poly@res+1
  5350  00204A  C02E  F042         	movff	?___fladd+2,eval_poly@res+2
  5351  00204E  C02F  F043         	movff	?___fladd+3,eval_poly@res+3
  5352  002052                     l3830:
  5353  002052  503D               	movf	eval_poly@n,w,c
  5354  002054  103E               	iorwf	eval_poly@n+1,w,c
  5355  002056  E1CA               	bnz	l3828
  5356  002058  C040  F038         	movff	eval_poly@res,?_eval_poly
  5357  00205C  C041  F039         	movff	eval_poly@res+1,?_eval_poly+1
  5358  002060  C042  F03A         	movff	eval_poly@res+2,?_eval_poly+2
  5359  002064  C043  F03B         	movff	eval_poly@res+3,?_eval_poly+3
  5360  002068  0012               	return		;funcret
  5361  00206A                     __end_of_eval_poly:
  5362                           	opt stack 0
  5363  00206A                     PL16:
  5364                           	opt stack 23
  5365  00206A  503D               	movf	eval_poly@n,w,c
  5366  00206C  0D04               	mullw	4
  5367  00206E  503C               	movf	eval_poly@d,w,c
  5368  002070  24F3               	addwf	prodl,w,c
  5369  002072  6E3F               	movwf	??_eval_poly& (0+255),c
  5370  002074  C03F  FFF6         	movff	??_eval_poly,tblptrl
  5371  002078                     	if	0	;There is only one active tblptr byte
  5372  002078                     	endif
  5373  002078                     	if	0	;tblptru may be non-zero
  5374  002078                     	endif
  5375  002078                     	if	0	;tblptru may be non-zero
  5376  002078                     	endif
  5377  002078  0009               	tblrd		*+
  5378  00207A  0012               	return	
  5379  00207C                     __end_ofPL16:
  5380                           	opt stack 0
  5381                           tblptru	equ	0xFF8
  5382                           tblptrh	equ	0xFF7
  5383                           tblptrl	equ	0xFF6
  5384                           tablat	equ	0xFF5
  5385                           prodl	equ	0xFF3
  5386                           intcon	equ	0xFF2
  5387                           intcon2	equ	0xFF1
  5388                           postinc0	equ	0xFEE
  5389                           wreg	equ	0xFE8
  5390                           postdec1	equ	0xFE5
  5391                           fsr1l	equ	0xFE1
  5392                           indf2	equ	0xFDF
  5393                           postinc2	equ	0xFDE
  5394                           postdec2	equ	0xFDD
  5395                           fsr2h	equ	0xFDA
  5396                           fsr2l	equ	0xFD9
  5397                           status	equ	0xFD8
  5398                           
  5399 ;; *************** function ___flmul *****************
  5400 ;; Defined at:
  5401 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flmul.c"
  5402 ;; Parameters:    Size  Location     Type
  5403 ;;  f1              4   28[COMRAM] int 
  5404 ;;  f2              4   32[COMRAM] int 
  5405 ;; Auto vars:     Size  Location     Type
  5406 ;;  f3_as_produc    4   37[COMRAM] unsigned long 
  5407 ;;  sign            1   42[COMRAM] unsigned char 
  5408 ;;  cntr            1   41[COMRAM] unsigned char 
  5409 ;;  exp             1   36[COMRAM] unsigned char 
  5410 ;; Return value:  Size  Location     Type
  5411 ;;                  4   28[COMRAM] unsigned char 
  5412 ;; Registers used:
  5413 ;;		wreg, status,2, status,0, cstack
  5414 ;; Tracked objects:
  5415 ;;		On entry : 0/0
  5416 ;;		On exit  : 0/0
  5417 ;;		Unchanged: 0/0
  5418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5419 ;;      Params:         8       0       0       0       0       0       0       0       0
  5420 ;;      Locals:         7       0       0       0       0       0       0       0       0
  5421 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5422 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5423 ;;Total ram usage:       15 bytes
  5424 ;; Hardware stack levels used:    1
  5425 ;; Hardware stack levels required when called:    2
  5426 ;; This function calls:
  5427 ;;		___flpack
  5428 ;; This function is called by:
  5429 ;;		_format_double
  5430 ;;		_measure_capacitance
  5431 ;;		_measure_inductance
  5432 ;;		_log
  5433 ;;		_log10
  5434 ;;		_pow
  5435 ;;		_eval_poly
  5436 ;;		_exp
  5437 ;; This function uses a non-reentrant model
  5438 ;;
  5439                           
  5440                           	psect	text25
  5441  001F18                     __ptext25:
  5442                           	opt stack 0
  5443  001F18                     ___flmul:
  5444                           	opt stack 27
  5445                           
  5446                           ;incstack = 0
  5447  001F18  341F               	rlcf	___flmul@f1+2,w,c
  5448  001F1A  3420               	rlcf	___flmul@f1+3,w,c
  5449  001F1C  6E25               	movwf	___flmul@exp,c
  5450  001F1E  5025               	movf	___flmul@exp,w,c
  5451  001F20  E005               	bz	l3674
  5452  001F22  3423               	rlcf	___flmul@f2+2,w,c
  5453  001F24  3424               	rlcf	___flmul@f2+3,w,c
  5454  001F26  6E2B               	movwf	___flmul@sign,c
  5455  001F28  502B               	movf	___flmul@sign,w,c
  5456  001F2A  E105               	bnz	l3676
  5457  001F2C                     l3674:
  5458  001F2C  6A1D               	clrf	?___flmul,c
  5459  001F2E  6A1E               	clrf	?___flmul+1,c
  5460  001F30  6A1F               	clrf	?___flmul+2,c
  5461  001F32  6A20               	clrf	?___flmul+3,c
  5462  001F34  D03D               	goto	l845
  5463  001F36                     l3676:
  5464  001F36  502B               	movf	___flmul@sign,w,c
  5465  001F38  0F7B               	addlw	123
  5466  001F3A  2625               	addwf	___flmul@exp,f,c
  5467  001F3C  C020  F02B         	movff	___flmul@f1+3,___flmul@sign
  5468  001F40  5024               	movf	___flmul@f2+3,w,c
  5469  001F42  1A2B               	xorwf	___flmul@sign,f,c
  5470  001F44  0E80               	movlw	128
  5471  001F46  162B               	andwf	___flmul@sign,f,c
  5472  001F48  8E1F               	bsf	___flmul@f1+2,7,c
  5473  001F4A  8E23               	bsf	___flmul@f2+2,7,c
  5474  001F4C  0E00               	movlw	0
  5475  001F4E  1624               	andwf	___flmul@f2+3,f,c
  5476  001F50  6A26               	clrf	___flmul@f3_as_product,c
  5477  001F52  6A27               	clrf	___flmul@f3_as_product+1,c
  5478  001F54  6A28               	clrf	___flmul@f3_as_product+2,c
  5479  001F56  6A29               	clrf	___flmul@f3_as_product+3,c
  5480  001F58  0E07               	movlw	7
  5481  001F5A  6E2A               	movwf	___flmul@cntr,c
  5482  001F5C                     l3688:
  5483  001F5C  B01D               	btfsc	___flmul@f1,0,c
  5484  001F5E  D829               	call	PL18	;call to abstracted procedure
  5485  001F60  D831               	call	PL36	;call to abstracted procedure
  5486  001F62  3621               	rlcf	___flmul@f2,f,c
  5487  001F64  3622               	rlcf	___flmul@f2+1,f,c
  5488  001F66  3623               	rlcf	___flmul@f2+2,f,c
  5489  001F68  3624               	rlcf	___flmul@f2+3,f,c
  5490  001F6A  2E2A               	decfsz	___flmul@cntr,f,c
  5491  001F6C  D7F7               	goto	l3688
  5492  001F6E  0E11               	movlw	17
  5493  001F70  6E2A               	movwf	___flmul@cntr,c
  5494  001F72                     l3700:
  5495  001F72  B01D               	btfsc	___flmul@f1,0,c
  5496  001F74  D81E               	call	PL18	;call to abstracted procedure
  5497  001F76  D826               	call	PL36	;call to abstracted procedure
  5498  001F78  3229               	rrcf	___flmul@f3_as_product+3,f,c
  5499  001F7A  3228               	rrcf	___flmul@f3_as_product+2,f,c
  5500  001F7C  3227               	rrcf	___flmul@f3_as_product+1,f,c
  5501  001F7E  3226               	rrcf	___flmul@f3_as_product,f,c
  5502  001F80  2E2A               	decfsz	___flmul@cntr,f,c
  5503  001F82  D7F7               	goto	l3700
  5504  001F84  C026  F004         	movff	___flmul@f3_as_product,___flpack@arg
  5505  001F88  C027  F005         	movff	___flmul@f3_as_product+1,___flpack@arg+1
  5506  001F8C  C028  F006         	movff	___flmul@f3_as_product+2,___flpack@arg+2
  5507  001F90  C029  F007         	movff	___flmul@f3_as_product+3,___flpack@arg+3
  5508  001F94  C025  F008         	movff	___flmul@exp,___flpack@exp
  5509  001F98  C02B  F009         	movff	___flmul@sign,___flpack@sign
  5510  001F9C  EC2B  F00F         	call	___flpack	;wreg free
  5511  001FA0  C004  F01D         	movff	?___flpack,?___flmul
  5512  001FA4  C005  F01E         	movff	?___flpack+1,?___flmul+1
  5513  001FA8  C006  F01F         	movff	?___flpack+2,?___flmul+2
  5514  001FAC  C007  F020         	movff	?___flpack+3,?___flmul+3
  5515  001FB0                     l845:
  5516  001FB0  0012               	return		;funcret
  5517  001FB2                     __end_of___flmul:
  5518                           	opt stack 0
  5519  001FB2                     PL18:
  5520                           	opt stack 27
  5521  001FB2  5021               	movf	___flmul@f2,w,c
  5522  001FB4  2626               	addwf	___flmul@f3_as_product,f,c
  5523  001FB6  5022               	movf	___flmul@f2+1,w,c
  5524  001FB8  2227               	addwfc	___flmul@f3_as_product+1,f,c
  5525  001FBA  5023               	movf	___flmul@f2+2,w,c
  5526  001FBC  2228               	addwfc	___flmul@f3_as_product+2,f,c
  5527  001FBE  5024               	movf	___flmul@f2+3,w,c
  5528  001FC0  2229               	addwfc	___flmul@f3_as_product+3,f,c
  5529  001FC2  0012               	return	
  5530  001FC4                     __end_ofPL18:
  5531                           	opt stack 0
  5532  001FC4                     PL36:
  5533                           	opt stack 27
  5534  001FC4  90D8               	bcf	status,0,c
  5535  001FC6  3220               	rrcf	___flmul@f1+3,f,c
  5536  001FC8  321F               	rrcf	___flmul@f1+2,f,c
  5537  001FCA  321E               	rrcf	___flmul@f1+1,f,c
  5538  001FCC  321D               	rrcf	___flmul@f1,f,c
  5539  001FCE  90D8               	bcf	status,0,c
  5540  001FD0  0012               	return	
  5541  001FD2                     __end_ofPL36:
  5542                           	opt stack 0
  5543                           tblptru	equ	0xFF8
  5544                           tblptrh	equ	0xFF7
  5545                           tblptrl	equ	0xFF6
  5546                           tablat	equ	0xFF5
  5547                           prodl	equ	0xFF3
  5548                           intcon	equ	0xFF2
  5549                           intcon2	equ	0xFF1
  5550                           postinc0	equ	0xFEE
  5551                           wreg	equ	0xFE8
  5552                           postdec1	equ	0xFE5
  5553                           fsr1l	equ	0xFE1
  5554                           indf2	equ	0xFDF
  5555                           postinc2	equ	0xFDE
  5556                           postdec2	equ	0xFDD
  5557                           fsr2h	equ	0xFDA
  5558                           fsr2l	equ	0xFD9
  5559                           status	equ	0xFD8
  5560                           
  5561 ;; *************** function ___fladd *****************
  5562 ;; Defined at:
  5563 ;;		line 88 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fladd.c"
  5564 ;; Parameters:    Size  Location     Type
  5565 ;;  f1              4   43[COMRAM] unsigned char 
  5566 ;;  f2              4   47[COMRAM] unsigned char 
  5567 ;; Auto vars:     Size  Location     Type
  5568 ;;  exp1            1   54[COMRAM] unsigned char 
  5569 ;;  exp2            1   53[COMRAM] unsigned char 
  5570 ;;  sign            1   52[COMRAM] unsigned char 
  5571 ;; Return value:  Size  Location     Type
  5572 ;;                  4   43[COMRAM] unsigned char 
  5573 ;; Registers used:
  5574 ;;		wreg, status,2, status,0, cstack
  5575 ;; Tracked objects:
  5576 ;;		On entry : 0/0
  5577 ;;		On exit  : 0/0
  5578 ;;		Unchanged: 0/0
  5579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5580 ;;      Params:         8       0       0       0       0       0       0       0       0
  5581 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5582 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5583 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5584 ;;Total ram usage:       12 bytes
  5585 ;; Hardware stack levels used:    1
  5586 ;; Hardware stack levels required when called:    2
  5587 ;; This function calls:
  5588 ;;		___flpack
  5589 ;; This function is called by:
  5590 ;;		_floor
  5591 ;;		___flsub
  5592 ;;		_log
  5593 ;;		_eval_poly
  5594 ;; This function uses a non-reentrant model
  5595 ;;
  5596                           
  5597                           	psect	text26
  5598  001680                     __ptext26:
  5599                           	opt stack 0
  5600  001680                     ___fladd:
  5601                           	opt stack 26
  5602                           
  5603                           ;incstack = 0
  5604  001680  342E               	rlcf	___fladd@f1+2,w,c
  5605  001682  342F               	rlcf	___fladd@f1+3,w,c
  5606  001684  6E37               	movwf	___fladd@exp1,c
  5607  001686  3432               	rlcf	___fladd@f2+2,w,c
  5608  001688  3433               	rlcf	___fladd@f2+3,w,c
  5609  00168A  6E36               	movwf	___fladd@exp2,c
  5610  00168C  5037               	movf	___fladd@exp1,w,c
  5611  00168E  E009               	bz	l798
  5612  001690  5036               	movf	___fladd@exp2,w,c
  5613  001692  5C37               	subwf	___fladd@exp1,w,c
  5614  001694  E20F               	bc	l3608
  5615  001696  5037               	movf	___fladd@exp1,w,c
  5616  001698  5C36               	subwf	___fladd@exp2,w,c
  5617  00169A  6E34               	movwf	??___fladd& (0+255),c
  5618  00169C  0E20               	movlw	32
  5619  00169E  6434               	cpfsgt	??___fladd,c
  5620  0016A0  D009               	goto	l3608
  5621  0016A2                     l798:
  5622  0016A2  C030  F02C         	movff	___fladd@f2,?___fladd
  5623  0016A6  C031  F02D         	movff	___fladd@f2+1,?___fladd+1
  5624  0016AA  C032  F02E         	movff	___fladd@f2+2,?___fladd+2
  5625  0016AE  C033  F02F         	movff	___fladd@f2+3,?___fladd+3
  5626  0016B2  D088               	goto	l799
  5627  0016B4                     l3608:
  5628  0016B4  5036               	movf	___fladd@exp2,w,c
  5629  0016B6  E009               	bz	l802
  5630  0016B8  5037               	movf	___fladd@exp1,w,c
  5631  0016BA  5C36               	subwf	___fladd@exp2,w,c
  5632  0016BC  E20F               	bc	l3614
  5633  0016BE  5036               	movf	___fladd@exp2,w,c
  5634  0016C0  5C37               	subwf	___fladd@exp1,w,c
  5635  0016C2  6E34               	movwf	??___fladd& (0+255),c
  5636  0016C4  0E20               	movlw	32
  5637  0016C6  6434               	cpfsgt	??___fladd,c
  5638  0016C8  D009               	goto	l3614
  5639  0016CA                     l802:
  5640  0016CA  C02C  F02C         	movff	___fladd@f1,?___fladd
  5641  0016CE  C02D  F02D         	movff	___fladd@f1+1,?___fladd+1
  5642  0016D2  C02E  F02E         	movff	___fladd@f1+2,?___fladd+2
  5643  0016D6  C02F  F02F         	movff	___fladd@f1+3,?___fladd+3
  5644  0016DA  D074               	goto	l799
  5645  0016DC                     l3614:
  5646  0016DC  0E06               	movlw	6
  5647  0016DE  6E35               	movwf	___fladd@sign,c
  5648  0016E0  BE2F               	btfsc	___fladd@f1+3,7,c
  5649  0016E2  8E35               	bsf	___fladd@sign,7,c
  5650  0016E4  BE33               	btfsc	___fladd@f2+3,7,c
  5651  0016E6  8C35               	bsf	___fladd@sign,6,c
  5652  0016E8  8E2E               	bsf	___fladd@f1+2,7,c
  5653  0016EA  6A2F               	clrf	___fladd@f1+3,c
  5654  0016EC  8E32               	bsf	___fladd@f2+2,7,c
  5655  0016EE  6A33               	clrf	___fladd@f2+3,c
  5656  0016F0  5036               	movf	___fladd@exp2,w,c
  5657  0016F2  5C37               	subwf	___fladd@exp1,w,c
  5658  0016F4  E21A               	bc	l3638
  5659  0016F6                     l3628:
  5660  0016F6  90D8               	bcf	status,0,c
  5661  0016F8  3630               	rlcf	___fladd@f2,f,c
  5662  0016FA  3631               	rlcf	___fladd@f2+1,f,c
  5663  0016FC  3632               	rlcf	___fladd@f2+2,f,c
  5664  0016FE  3633               	rlcf	___fladd@f2+3,f,c
  5665  001700  0636               	decf	___fladd@exp2,f,c
  5666  001702  5037               	movf	___fladd@exp1,w,c
  5667  001704  1836               	xorwf	___fladd@exp2,w,c
  5668  001706  E00D               	bz	l3636
  5669  001708  0635               	decf	___fladd@sign,f,c
  5670  00170A  C035  F034         	movff	___fladd@sign,??___fladd
  5671  00170E  0E07               	movlw	7
  5672  001710  1634               	andwf	??___fladd,f,c
  5673  001712  E007               	bz	l3636
  5674  001714  D7F0               	goto	l3628
  5675  001716                     l3634:
  5676  001716  90D8               	bcf	status,0,c
  5677  001718  322F               	rrcf	___fladd@f1+3,f,c
  5678  00171A  322E               	rrcf	___fladd@f1+2,f,c
  5679  00171C  322D               	rrcf	___fladd@f1+1,f,c
  5680  00171E  322C               	rrcf	___fladd@f1,f,c
  5681  001720  2A37               	incf	___fladd@exp1,f,c
  5682  001722                     l3636:
  5683  001722  5036               	movf	___fladd@exp2,w,c
  5684  001724  1837               	xorwf	___fladd@exp1,w,c
  5685  001726  E01D               	bz	l813
  5686  001728  D7F6               	goto	l3634
  5687  00172A                     l3638:
  5688  00172A  5037               	movf	___fladd@exp1,w,c
  5689  00172C  5C36               	subwf	___fladd@exp2,w,c
  5690  00172E  E219               	bc	l813
  5691  001730                     l3640:
  5692  001730  90D8               	bcf	status,0,c
  5693  001732  362C               	rlcf	___fladd@f1,f,c
  5694  001734  362D               	rlcf	___fladd@f1+1,f,c
  5695  001736  362E               	rlcf	___fladd@f1+2,f,c
  5696  001738  362F               	rlcf	___fladd@f1+3,f,c
  5697  00173A  0637               	decf	___fladd@exp1,f,c
  5698  00173C  5037               	movf	___fladd@exp1,w,c
  5699  00173E  1836               	xorwf	___fladd@exp2,w,c
  5700  001740  E00D               	bz	l3648
  5701  001742  0635               	decf	___fladd@sign,f,c
  5702  001744  C035  F034         	movff	___fladd@sign,??___fladd
  5703  001748  0E07               	movlw	7
  5704  00174A  1634               	andwf	??___fladd,f,c
  5705  00174C  E007               	bz	l3648
  5706  00174E  D7F0               	goto	l3640
  5707  001750                     l3646:
  5708  001750  90D8               	bcf	status,0,c
  5709  001752  3233               	rrcf	___fladd@f2+3,f,c
  5710  001754  3232               	rrcf	___fladd@f2+2,f,c
  5711  001756  3231               	rrcf	___fladd@f2+1,f,c
  5712  001758  3230               	rrcf	___fladd@f2,f,c
  5713  00175A  2A36               	incf	___fladd@exp2,f,c
  5714  00175C                     l3648:
  5715  00175C  5036               	movf	___fladd@exp2,w,c
  5716  00175E  1837               	xorwf	___fladd@exp1,w,c
  5717  001760  E1F7               	bnz	l3646
  5718  001762                     l813:
  5719  001762  AE35               	btfss	___fladd@sign,7,c
  5720  001764  D009               	goto	l3652
  5721  001766  1E2C               	comf	___fladd@f1,f,c
  5722  001768  1E2D               	comf	___fladd@f1+1,f,c
  5723  00176A  1E2E               	comf	___fladd@f1+2,f,c
  5724  00176C  1E2F               	comf	___fladd@f1+3,f,c
  5725  00176E  2A2C               	incf	___fladd@f1,f,c
  5726  001770  0E00               	movlw	0
  5727  001772  222D               	addwfc	___fladd@f1+1,f,c
  5728  001774  222E               	addwfc	___fladd@f1+2,f,c
  5729  001776  222F               	addwfc	___fladd@f1+3,f,c
  5730  001778                     l3652:
  5731  001778  BC35               	btfsc	___fladd@sign,6,c
  5732  00177A  D825               	call	PL12	;call to abstracted procedure
  5733  00177C  6A35               	clrf	___fladd@sign,c
  5734  00177E  502C               	movf	___fladd@f1,w,c
  5735  001780  2630               	addwf	___fladd@f2,f,c
  5736  001782  502D               	movf	___fladd@f1+1,w,c
  5737  001784  2231               	addwfc	___fladd@f2+1,f,c
  5738  001786  502E               	movf	___fladd@f1+2,w,c
  5739  001788  2232               	addwfc	___fladd@f2+2,f,c
  5740  00178A  502F               	movf	___fladd@f1+3,w,c
  5741  00178C  2233               	addwfc	___fladd@f2+3,f,c
  5742  00178E  AE33               	btfss	___fladd@f2+3,7,c
  5743  001790  D003               	goto	l3664
  5744  001792  D819               	call	PL12	;call to abstracted procedure
  5745  001794  0E01               	movlw	1
  5746  001796  6E35               	movwf	___fladd@sign,c
  5747  001798                     l3664:
  5748  001798  C030  F004         	movff	___fladd@f2,___flpack@arg
  5749  00179C  C031  F005         	movff	___fladd@f2+1,___flpack@arg+1
  5750  0017A0  C032  F006         	movff	___fladd@f2+2,___flpack@arg+2
  5751  0017A4  C033  F007         	movff	___fladd@f2+3,___flpack@arg+3
  5752  0017A8  C037  F008         	movff	___fladd@exp1,___flpack@exp
  5753  0017AC  C035  F009         	movff	___fladd@sign,___flpack@sign
  5754  0017B0  EC2B  F00F         	call	___flpack	;wreg free
  5755  0017B4  C004  F02C         	movff	?___flpack,?___fladd
  5756  0017B8  C005  F02D         	movff	?___flpack+1,?___fladd+1
  5757  0017BC  C006  F02E         	movff	?___flpack+2,?___fladd+2
  5758  0017C0  C007  F02F         	movff	?___flpack+3,?___fladd+3
  5759  0017C4                     l799:
  5760  0017C4  0012               	return		;funcret
  5761  0017C6                     __end_of___fladd:
  5762                           	opt stack 0
  5763  0017C6                     PL12:
  5764                           	opt stack 26
  5765  0017C6  1E30               	comf	___fladd@f2,f,c
  5766  0017C8  1E31               	comf	___fladd@f2+1,f,c
  5767  0017CA  1E32               	comf	___fladd@f2+2,f,c
  5768  0017CC  1E33               	comf	___fladd@f2+3,f,c
  5769  0017CE  2A30               	incf	___fladd@f2,f,c
  5770  0017D0  0E00               	movlw	0
  5771  0017D2  2231               	addwfc	___fladd@f2+1,f,c
  5772  0017D4  2232               	addwfc	___fladd@f2+2,f,c
  5773  0017D6  2233               	addwfc	___fladd@f2+3,f,c
  5774  0017D8  0C00               	retlw	0
  5775  0017DA                     __end_ofPL12:
  5776                           	opt stack 0
  5777                           tblptru	equ	0xFF8
  5778                           tblptrh	equ	0xFF7
  5779                           tblptrl	equ	0xFF6
  5780                           tablat	equ	0xFF5
  5781                           prodl	equ	0xFF3
  5782                           intcon	equ	0xFF2
  5783                           intcon2	equ	0xFF1
  5784                           postinc0	equ	0xFEE
  5785                           wreg	equ	0xFE8
  5786                           postdec1	equ	0xFE5
  5787                           fsr1l	equ	0xFE1
  5788                           indf2	equ	0xFDF
  5789                           postinc2	equ	0xFDE
  5790                           postdec2	equ	0xFDD
  5791                           fsr2h	equ	0xFDA
  5792                           fsr2l	equ	0xFD9
  5793                           status	equ	0xFD8
  5794                           
  5795 ;; *************** function ___awtofl *****************
  5796 ;; Defined at:
  5797 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtofl.c"
  5798 ;; Parameters:    Size  Location     Type
  5799 ;;  c               2   13[COMRAM] int 
  5800 ;; Auto vars:     Size  Location     Type
  5801 ;;  f1              4    0        int 
  5802 ;;  sign            1   17[COMRAM] unsigned char 
  5803 ;; Return value:  Size  Location     Type
  5804 ;;                  4   13[COMRAM] unsigned char 
  5805 ;; Registers used:
  5806 ;;		wreg, status,2, status,0, cstack
  5807 ;; Tracked objects:
  5808 ;;		On entry : 0/0
  5809 ;;		On exit  : 0/0
  5810 ;;		Unchanged: 0/0
  5811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5812 ;;      Params:         4       0       0       0       0       0       0       0       0
  5813 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5814 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5815 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5816 ;;Total ram usage:        5 bytes
  5817 ;; Hardware stack levels used:    1
  5818 ;; Hardware stack levels required when called:    2
  5819 ;; This function calls:
  5820 ;;		___flpack
  5821 ;; This function is called by:
  5822 ;;		_format_double
  5823 ;;		_log
  5824 ;;		_exp
  5825 ;; This function uses a non-reentrant model
  5826 ;;
  5827                           
  5828                           	psect	text27
  5829  0026EC                     __ptext27:
  5830                           	opt stack 0
  5831  0026EC                     ___awtofl:
  5832                           	opt stack 24
  5833                           
  5834                           ;incstack = 0
  5835  0026EC  6A12               	clrf	___awtofl@sign,c
  5836  0026EE  AE0F               	btfss	___awtofl@c+1,7,c
  5837  0026F0  D005               	goto	l3822
  5838  0026F2  6C0E               	negf	___awtofl@c,c
  5839  0026F4  1E0F               	comf	___awtofl@c+1,f,c
  5840  0026F6  B0D8               	btfsc	status,0,c
  5841  0026F8  2A0F               	incf	___awtofl@c+1,f,c
  5842  0026FA  2A12               	incf	___awtofl@sign,f,c
  5843  0026FC                     l3822:
  5844  0026FC  C00E  F004         	movff	___awtofl@c,___flpack@arg
  5845  002700  C00F  F005         	movff	___awtofl@c+1,___flpack@arg+1
  5846  002704  6A06               	clrf	___flpack@arg+2,c
  5847  002706  6A07               	clrf	___flpack@arg+3,c
  5848  002708  0E96               	movlw	150
  5849  00270A  6E08               	movwf	___flpack@exp,c
  5850  00270C  C012  F009         	movff	___awtofl@sign,___flpack@sign
  5851  002710  EC2B  F00F         	call	___flpack	;wreg free
  5852  002714  C004  F00E         	movff	?___flpack,?___awtofl
  5853  002718  C005  F00F         	movff	?___flpack+1,?___awtofl+1
  5854  00271C  C006  F010         	movff	?___flpack+2,?___awtofl+2
  5855  002720  C007  F011         	movff	?___flpack+3,?___awtofl+3
  5856  002724  0012               	return		;funcret
  5857  002726                     __end_of___awtofl:
  5858                           	opt stack 0
  5859                           tblptru	equ	0xFF8
  5860                           tblptrh	equ	0xFF7
  5861                           tblptrl	equ	0xFF6
  5862                           tablat	equ	0xFF5
  5863                           prodl	equ	0xFF3
  5864                           intcon	equ	0xFF2
  5865                           intcon2	equ	0xFF1
  5866                           postinc0	equ	0xFEE
  5867                           wreg	equ	0xFE8
  5868                           postdec1	equ	0xFE5
  5869                           fsr1l	equ	0xFE1
  5870                           indf2	equ	0xFDF
  5871                           postinc2	equ	0xFDE
  5872                           postdec2	equ	0xFDD
  5873                           fsr2h	equ	0xFDA
  5874                           fsr2l	equ	0xFD9
  5875                           status	equ	0xFD8
  5876                           
  5877 ;; *************** function _lcd_init *****************
  5878 ;; Defined at:
  5879 ;;		line 506 in file "../../../lib/lcd44780.c"
  5880 ;; Parameters:    Size  Location     Type
  5881 ;;  fourbitmode     1    wreg     unsigned char 
  5882 ;; Auto vars:     Size  Location     Type
  5883 ;;  fourbitmode     1    3[COMRAM] unsigned char 
  5884 ;; Return value:  Size  Location     Type
  5885 ;;		None               void
  5886 ;; Registers used:
  5887 ;;		wreg, status,2, status,0
  5888 ;; Tracked objects:
  5889 ;;		On entry : 0/0
  5890 ;;		On exit  : F/0
  5891 ;;		Unchanged: 0/0
  5892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5893 ;;      Params:         0       0       0       0       0       0       0       0       0
  5894 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5895 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5896 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5897 ;;Total ram usage:        3 bytes
  5898 ;; Hardware stack levels used:    1
  5899 ;; Hardware stack levels required when called:    1
  5900 ;; This function calls:
  5901 ;;		Nothing
  5902 ;; This function is called by:
  5903 ;;		_main
  5904 ;; This function uses a non-reentrant model
  5905 ;;
  5906                           
  5907                           	psect	text28
  5908  0027EC                     __ptext28:
  5909                           	opt stack 0
  5910  0027EC                     _lcd_init:
  5911                           	opt stack 29
  5912                           
  5913                           ;incstack = 0
  5914                           ;lcd_init@fourbitmode stored from wreg
  5915  0027EC  6E04               	movwf	lcd_init@fourbitmode,c
  5916                           
  5917                           ;lcd44780.c: 508: LCD_ctrl = 0;
  5918  0027EE  0100               	movlb	0	; () banked
  5919  0027F0  6BCE               	clrf	_LCD_ctrl& (0+255),b
  5920                           
  5921                           ; BSR set to: 0
  5922                           ;lcd44780.c: 509: LCD_function = (fourbitmode ? 0x00 : 0x10);
  5923  0027F2  5004               	movf	lcd_init@fourbitmode,w,c
  5924  0027F4  E104               	bnz	l158
  5925                           
  5926                           ; BSR set to: 0
  5927  0027F6  6A06               	clrf	_lcd_init$134+1,c
  5928  0027F8  0E10               	movlw	16
  5929  0027FA  6E05               	movwf	_lcd_init$134,c
  5930  0027FC  D002               	goto	l160
  5931  0027FE                     l158:
  5932                           
  5933                           ; BSR set to: 0
  5934  0027FE  6A05               	clrf	_lcd_init$134,c
  5935  002800  6A06               	clrf	_lcd_init$134+1,c
  5936  002802                     l160:
  5937                           
  5938                           ; BSR set to: 0
  5939  002802  C005  F05A         	movff	_lcd_init$134,_LCD_function
  5940                           
  5941                           ;lcd44780.c: 511: LCD_lines = 0;
  5942  002806  6BCF               	clrf	_LCD_lines& (0+255),b
  5943                           
  5944                           ;lcd44780.c: 513: LCD_mode = 0;
  5945  002808  6BD0               	clrf	_LCD_mode& (0+255),b
  5946                           
  5947                           ; BSR set to: 0
  5948                           ;lcd44780.c: 515: TRISB &= ~0b0100;
  5949  00280A  9493               	bcf	3987,2,c	;volatile
  5950                           
  5951                           ;lcd44780.c: 516: LATB &= ~0b0100;
  5952  00280C  948A               	bcf	3978,2,c	;volatile
  5953                           
  5954                           ;lcd44780.c: 521: TRISB &= ~0b1000;
  5955  00280E  9693               	bcf	3987,3,c	;volatile
  5956                           
  5957                           ;lcd44780.c: 522: LATB &= ~0b1000;
  5958  002810  968A               	bcf	3978,3,c	;volatile
  5959                           
  5960                           ; BSR set to: 0
  5961                           ;lcd44780.c: 524: LATB &= ~0b11110000;
  5962  002812  0E0F               	movlw	15
  5963  002814  168A               	andwf	3978,f,c	;volatile
  5964                           
  5965                           ; BSR set to: 0
  5966  002816  0C0F               	retlw	15	;funcret
  5967  002818                     __end_of_lcd_init:
  5968                           	opt stack 0
  5969                           tblptru	equ	0xFF8
  5970                           tblptrh	equ	0xFF7
  5971                           tblptrl	equ	0xFF6
  5972                           tablat	equ	0xFF5
  5973                           prodl	equ	0xFF3
  5974                           intcon	equ	0xFF2
  5975                           intcon2	equ	0xFF1
  5976                           postinc0	equ	0xFEE
  5977                           wreg	equ	0xFE8
  5978                           postdec1	equ	0xFE5
  5979                           fsr1l	equ	0xFE1
  5980                           indf2	equ	0xFDF
  5981                           postinc2	equ	0xFDE
  5982                           postdec2	equ	0xFDD
  5983                           fsr2h	equ	0xFDA
  5984                           fsr2l	equ	0xFD9
  5985                           status	equ	0xFD8
  5986                           
  5987 ;; *************** function _lcd_begin *****************
  5988 ;; Defined at:
  5989 ;;		line 433 in file "../../../lib/lcd44780.c"
  5990 ;; Parameters:    Size  Location     Type
  5991 ;;  lines           1    wreg     unsigned char 
  5992 ;;  dotsize         1    7[COMRAM] unsigned char 
  5993 ;; Auto vars:     Size  Location     Type
  5994 ;;  lines           1    9[COMRAM] unsigned char 
  5995 ;; Return value:  Size  Location     Type
  5996 ;;		None               void
  5997 ;; Registers used:
  5998 ;;		wreg, status,2, status,0, cstack
  5999 ;; Tracked objects:
  6000 ;;		On entry : F/0
  6001 ;;		On exit  : 0/0
  6002 ;;		Unchanged: 0/0
  6003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6004 ;;      Params:         1       0       0       0       0       0       0       0       0
  6005 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6006 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6007 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6008 ;;Total ram usage:        3 bytes
  6009 ;; Hardware stack levels used:    1
  6010 ;; Hardware stack levels required when called:    4
  6011 ;; This function calls:
  6012 ;;		_lcd_command
  6013 ;;		_lcd_write4bits
  6014 ;; This function is called by:
  6015 ;;		_main
  6016 ;; This function uses a non-reentrant model
  6017 ;;
  6018                           
  6019                           	psect	text29
  6020  001CB2                     __ptext29:
  6021                           	opt stack 0
  6022  001CB2                     _lcd_begin:
  6023                           	opt stack 26
  6024                           
  6025                           ; BSR set to: 0
  6026                           ;incstack = 0
  6027                           ;lcd_begin@lines stored from wreg
  6028  001CB2  6E0A               	movwf	lcd_begin@lines,c
  6029                           
  6030                           ; BSR set to: 0
  6031                           ;lcd44780.c: 434: if(lines > 1)
  6032  001CB4  0E01               	movlw	1
  6033  001CB6  640A               	cpfsgt	lcd_begin@lines,c
  6034  001CB8  D001               	goto	l3134
  6035                           
  6036                           ; BSR set to: 0
  6037                           ;lcd44780.c: 435: LCD_function |= 0x08;
  6038  001CBA  865A               	bsf	_LCD_function,3,c
  6039  001CBC                     l3134:
  6040                           
  6041                           ; BSR set to: 0
  6042                           ;lcd44780.c: 438: LCD_lines = lines;
  6043  001CBC  C00A  F0CF         	movff	lcd_begin@lines,_LCD_lines
  6044                           
  6045                           ; BSR set to: 0
  6046                           ;lcd44780.c: 442: if((dotsize != 0) && (lines == 1))
  6047  001CC0  5008               	movf	lcd_begin@dotsize,w,c
  6048  001CC2  E003               	bz	l3142
  6049                           
  6050                           ; BSR set to: 0
  6051  001CC4  040A               	decf	lcd_begin@lines,w,c
  6052  001CC6  B4D8               	btfsc	status,2,c
  6053                           
  6054                           ; BSR set to: 0
  6055                           ;lcd44780.c: 443: LCD_function |= 0x04;
  6056  001CC8  845A               	bsf	_LCD_function,2,c
  6057  001CCA                     l3142:
  6058                           
  6059                           ; BSR set to: 0
  6060                           ;lcd44780.c: 445: _delay((unsigned long)((15)*(20000000/4000.0)));
  6061  001CCA  0E62               	movlw	98
  6062  001CCC  6E09               	movwf	??_lcd_begin& (0+255),c
  6063  001CCE  0E66               	movlw	102
  6064  001CD0                     u3397:
  6065  001CD0  2EE8               	decfsz	wreg,f,c
  6066  001CD2  D7FE               	goto	u3397
  6067  001CD4  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6068  001CD6  D7FC               	goto	u3397
  6069                           
  6070                           ;lcd44780.c: 448: LATB &= ~0b0100;
  6071  001CD8  948A               	bcf	3978,2,c	;volatile
  6072                           
  6073                           ;lcd44780.c: 449: LATB &= ~0b1000;
  6074  001CDA  968A               	bcf	3978,3,c	;volatile
  6075                           
  6076                           ;lcd44780.c: 452: if(!(LCD_function & 0x10)) {
  6077  001CDC  B85A               	btfsc	_LCD_function,4,c
  6078  001CDE  D01B               	goto	l3160
  6079                           
  6080                           ;lcd44780.c: 456: lcd_write4bits(0x03);
  6081  001CE0  0E03               	movlw	3
  6082  001CE2  EC86  F014         	call	_lcd_write4bits
  6083                           
  6084                           ;lcd44780.c: 457: _delay((unsigned long)((5)*(20000000/4000.0)));
  6085  001CE6  0E21               	movlw	33
  6086  001CE8  6E09               	movwf	??_lcd_begin& (0+255),c
  6087  001CEA  0E76               	movlw	118
  6088  001CEC                     u3407:
  6089  001CEC  2EE8               	decfsz	wreg,f,c
  6090  001CEE  D7FE               	goto	u3407
  6091  001CF0  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6092  001CF2  D7FC               	goto	u3407
  6093  001CF4  D000               	nop2	
  6094                           
  6095                           ;lcd44780.c: 459: lcd_write4bits(0x03);
  6096  001CF6  0E03               	movlw	3
  6097  001CF8  EC86  F014         	call	_lcd_write4bits
  6098                           
  6099                           ;lcd44780.c: 460: _delay((unsigned long)((150)*(20000000/4000000.0)));
  6100  001CFC  0EFA               	movlw	250
  6101  001CFE                     u3417:
  6102  001CFE  2EE8               	decfsz	wreg,f,c
  6103  001D00  D7FE               	goto	u3417
  6104                           
  6105                           ;lcd44780.c: 462: lcd_write4bits(0x03);
  6106  001D02  0E03               	movlw	3
  6107  001D04  EC86  F014         	call	_lcd_write4bits
  6108                           
  6109                           ;lcd44780.c: 463: _delay((unsigned long)((150)*(20000000/4000000.0)));
  6110  001D08  0EFA               	movlw	250
  6111  001D0A                     u3427:
  6112  001D0A  2EE8               	decfsz	wreg,f,c
  6113  001D0C  D7FE               	goto	u3427
  6114                           
  6115                           ;lcd44780.c: 465: lcd_write4bits(0x02);
  6116  001D0E  0E02               	movlw	2
  6117  001D10  EC86  F014         	call	_lcd_write4bits
  6118                           
  6119                           ;lcd44780.c: 466: }
  6120  001D14  D01C               	goto	l3168
  6121  001D16                     l3160:
  6122                           
  6123                           ;lcd44780.c: 468: else {
  6124                           ;lcd44780.c: 472: lcd_command(0x20 | LCD_function);
  6125  001D16  505A               	movf	_LCD_function,w,c
  6126  001D18  0920               	iorlw	32
  6127  001D1A  ECE7  F014         	call	_lcd_command
  6128                           
  6129                           ;lcd44780.c: 473: _delay((unsigned long)((5)*(20000000/4000.0)));
  6130  001D1E  0E21               	movlw	33
  6131  001D20  6E09               	movwf	??_lcd_begin& (0+255),c
  6132  001D22  0E76               	movlw	118
  6133  001D24                     u3437:
  6134  001D24  2EE8               	decfsz	wreg,f,c
  6135  001D26  D7FE               	goto	u3437
  6136  001D28  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6137  001D2A  D7FC               	goto	u3437
  6138  001D2C  D000               	nop2	
  6139                           
  6140                           ;lcd44780.c: 476: lcd_command(0x20 | LCD_function);
  6141  001D2E  505A               	movf	_LCD_function,w,c
  6142  001D30  0920               	iorlw	32
  6143  001D32  ECE7  F014         	call	_lcd_command
  6144                           
  6145                           ;lcd44780.c: 477: _delay((unsigned long)((5)*(20000000/4000.0)));
  6146  001D36  0E21               	movlw	33
  6147  001D38  6E09               	movwf	??_lcd_begin& (0+255),c
  6148  001D3A  0E76               	movlw	118
  6149  001D3C                     u3447:
  6150  001D3C  2EE8               	decfsz	wreg,f,c
  6151  001D3E  D7FE               	goto	u3447
  6152  001D40  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6153  001D42  D7FC               	goto	u3447
  6154  001D44  D000               	nop2	
  6155                           
  6156                           ;lcd44780.c: 481: lcd_command(0x20 | LCD_function);
  6157  001D46  505A               	movf	_LCD_function,w,c
  6158  001D48  0920               	iorlw	32
  6159  001D4A  ECE7  F014         	call	_lcd_command
  6160  001D4E                     l3168:
  6161                           
  6162                           ;lcd44780.c: 482: }
  6163                           ;lcd44780.c: 485: lcd_command(0x20 | LCD_function);
  6164  001D4E  505A               	movf	_LCD_function,w,c
  6165  001D50  0920               	iorlw	32
  6166  001D52  ECE7  F014         	call	_lcd_command
  6167                           
  6168                           ;lcd44780.c: 488: LCD_ctrl = 0x04 | 0x00 | 0x00;
  6169  001D56  0E04               	movlw	4
  6170  001D58  0100               	movlb	0	; () banked
  6171  001D5A  6FCE               	movwf	_LCD_ctrl& (0+255),b
  6172                           
  6173                           ; BSR set to: 0
  6174                           ;lcd44780.c: 489: lcd_command(0x08 | LCD_ctrl);
  6175  001D5C  51CE               	movf	_LCD_ctrl& (0+255),w,b
  6176  001D5E  0908               	iorlw	8
  6177  001D60  ECE7  F014         	call	_lcd_command
  6178                           
  6179                           ;lcd44780.c: 492: lcd_command(0x01);
  6180  001D64  0E01               	movlw	1
  6181  001D66  ECE7  F014         	call	_lcd_command
  6182                           
  6183                           ;lcd44780.c: 493: _delay((unsigned long)((2)*(20000000/4000.0)));
  6184  001D6A  0E0D               	movlw	13
  6185  001D6C  6E09               	movwf	??_lcd_begin& (0+255),c
  6186  001D6E  0EFC               	movlw	252
  6187  001D70                     u3457:
  6188  001D70  2EE8               	decfsz	wreg,f,c
  6189  001D72  D7FE               	goto	u3457
  6190  001D74  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6191  001D76  D7FC               	goto	u3457
  6192                           
  6193                           ;lcd44780.c: 496: LCD_mode = 0x02 | 0x00;
  6194  001D78  0E02               	movlw	2
  6195  001D7A  0100               	movlb	0	; () banked
  6196  001D7C  6FD0               	movwf	_LCD_mode& (0+255),b
  6197                           
  6198                           ; BSR set to: 0
  6199                           ;lcd44780.c: 498: lcd_command(0x04 | LCD_mode);
  6200  001D7E  51D0               	movf	_LCD_mode& (0+255),w,b
  6201  001D80  0904               	iorlw	4
  6202  001D82  EFE7  F014         	goto	_lcd_command
  6203  001D86                     __end_of_lcd_begin:
  6204                           	opt stack 0
  6205                           tblptru	equ	0xFF8
  6206                           tblptrh	equ	0xFF7
  6207                           tblptrl	equ	0xFF6
  6208                           tablat	equ	0xFF5
  6209                           prodl	equ	0xFF3
  6210                           intcon	equ	0xFF2
  6211                           intcon2	equ	0xFF1
  6212                           postinc0	equ	0xFEE
  6213                           wreg	equ	0xFE8
  6214                           postdec1	equ	0xFE5
  6215                           fsr1l	equ	0xFE1
  6216                           indf2	equ	0xFDF
  6217                           postinc2	equ	0xFDE
  6218                           postdec2	equ	0xFDD
  6219                           fsr2h	equ	0xFDA
  6220                           fsr2l	equ	0xFD9
  6221                           status	equ	0xFD8
  6222                           
  6223 ;; *************** function _indicator *****************
  6224 ;; Defined at:
  6225 ;;		line 473 in file "../../../src/print.c"
  6226 ;; Parameters:    Size  Location     Type
  6227 ;;  indicate        1    wreg     unsigned char 
  6228 ;; Auto vars:     Size  Location     Type
  6229 ;;  indicate        1   13[COMRAM] unsigned char 
  6230 ;; Return value:  Size  Location     Type
  6231 ;;		None               void
  6232 ;; Registers used:
  6233 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6234 ;; Tracked objects:
  6235 ;;		On entry : 0/0
  6236 ;;		On exit  : 0/0
  6237 ;;		Unchanged: 0/0
  6238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6239 ;;      Params:         0       0       0       0       0       0       0       0       0
  6240 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6241 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6242 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6243 ;;Total ram usage:        1 bytes
  6244 ;; Hardware stack levels used:    1
  6245 ;; Hardware stack levels required when called:    5
  6246 ;; This function calls:
  6247 ;;		_lcd_gotoxy
  6248 ;;		_lcd_puts
  6249 ;; This function is called by:
  6250 ;;		_main
  6251 ;; This function uses a non-reentrant model
  6252 ;;
  6253                           
  6254                           	psect	text30
  6255  00294E                     __ptext30:
  6256                           	opt stack 0
  6257  00294E                     _indicator:
  6258                           	opt stack 25
  6259                           
  6260                           ;incstack = 0
  6261                           ;indicator@indicate stored from wreg
  6262  00294E  6E0E               	movwf	indicator@indicate,c
  6263                           
  6264                           ;print.c: 487: lcd_gotoxy(0, 1);
  6265  002950  0E01               	movlw	1
  6266  002952  6E08               	movwf	lcd_gotoxy@row,c
  6267  002954  0E00               	movlw	0
  6268  002956  EC93  F013         	call	_lcd_gotoxy
  6269                           
  6270                           ;print.c: 488: if(indicate) {
  6271  00295A  500E               	movf	indicator@indicate,w,c
  6272  00295C  E004               	bz	l3420
  6273                           
  6274                           ;print.c: 489: lcd_puts("-*-");
  6275  00295E  0EC5               	movlw	STR_26& (0+255)
  6276  002960  EC0C  F014         	call	_lcd_puts
  6277                           
  6278                           ;print.c: 490: } else {
  6279  002964  D003               	goto	l327
  6280  002966                     l3420:
  6281                           
  6282                           ;print.c: 491: lcd_puts("   ");
  6283  002966  0E94               	movlw	(STR_30+3)& (0+255)
  6284  002968  EC0C  F014         	call	_lcd_puts
  6285  00296C                     l327:
  6286  00296C  0012               	return		;funcret
  6287  00296E                     __end_of_indicator:
  6288                           	opt stack 0
  6289                           tblptru	equ	0xFF8
  6290                           tblptrh	equ	0xFF7
  6291                           tblptrl	equ	0xFF6
  6292                           tablat	equ	0xFF5
  6293                           prodl	equ	0xFF3
  6294                           intcon	equ	0xFF2
  6295                           intcon2	equ	0xFF1
  6296                           postinc0	equ	0xFEE
  6297                           wreg	equ	0xFE8
  6298                           postdec1	equ	0xFE5
  6299                           fsr1l	equ	0xFE1
  6300                           indf2	equ	0xFDF
  6301                           postinc2	equ	0xFDE
  6302                           postdec2	equ	0xFDD
  6303                           fsr2h	equ	0xFDA
  6304                           fsr2l	equ	0xFD9
  6305                           status	equ	0xFD8
  6306                           
  6307 ;; *************** function _lcd_puts *****************
  6308 ;; Defined at:
  6309 ;;		line 185 in file "../../../lib/lcd44780.c"
  6310 ;; Parameters:    Size  Location     Type
  6311 ;;  string          1    wreg     PTR const unsigned char 
  6312 ;;		 -> STR_33(5), STR_32(6), STR_31(7), STR_30(7), 
  6313 ;;		 -> STR_28(10), STR_27(4), STR_26(4), STR_25(6), 
  6314 ;; Auto vars:     Size  Location     Type
  6315 ;;  string          1    8[COMRAM] PTR const unsigned char 
  6316 ;;		 -> STR_33(5), STR_32(6), STR_31(7), STR_30(7), 
  6317 ;;		 -> STR_28(10), STR_27(4), STR_26(4), STR_25(6), 
  6318 ;;  i               1    7[COMRAM] unsigned char 
  6319 ;; Return value:  Size  Location     Type
  6320 ;;		None               void
  6321 ;; Registers used:
  6322 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6323 ;; Tracked objects:
  6324 ;;		On entry : 0/0
  6325 ;;		On exit  : 0/0
  6326 ;;		Unchanged: 0/0
  6327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6328 ;;      Params:         0       0       0       0       0       0       0       0       0
  6329 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6330 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6331 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6332 ;;Total ram usage:        3 bytes
  6333 ;; Hardware stack levels used:    1
  6334 ;; Hardware stack levels required when called:    3
  6335 ;; This function calls:
  6336 ;;		_lcd_send
  6337 ;; This function is called by:
  6338 ;;		_print_reading
  6339 ;;		_indicator
  6340 ;;		_main
  6341 ;; This function uses a non-reentrant model
  6342 ;;
  6343                           
  6344                           	psect	text31
  6345  002818                     __ptext31:
  6346                           	opt stack 0
  6347  002818                     _lcd_puts:
  6348                           	opt stack 25
  6349                           
  6350                           ;incstack = 0
  6351                           ;lcd_puts@string stored from wreg
  6352  002818  6E09               	movwf	lcd_puts@string,c
  6353                           
  6354                           ;lcd44780.c: 186: uint8_t i;
  6355                           ;lcd44780.c: 187: for(i = 0; string[i]; i++) lcd_send((string[i]), 1);
  6356  00281A  6A08               	clrf	lcd_puts@i,c
  6357  00281C  D006               	goto	l2994
  6358  00281E                     l2990:
  6359  00281E  0E01               	movlw	1
  6360  002820  6E05               	movwf	lcd_send@mode,c
  6361  002822  D807               	call	PL24	;call to abstracted procedure
  6362  002824  ECC6  F014         	call	_lcd_send
  6363  002828  2A08               	incf	lcd_puts@i,f,c
  6364  00282A                     l2994:
  6365  00282A  D803               	call	PL24	;call to abstracted procedure
  6366  00282C  B4D8               	btfsc	status,2,c
  6367  00282E  0012               	return		;funcret
  6368  002830  D7F6               	goto	l2990
  6369  002832                     __end_of_lcd_puts:
  6370                           	opt stack 0
  6371  002832                     PL24:
  6372                           	opt stack 25
  6373  002832  5009               	movf	lcd_puts@string,w,c
  6374  002834  2408               	addwf	lcd_puts@i,w,c
  6375  002836  6E07               	movwf	??_lcd_puts& (0+255),c
  6376  002838  C007  FFF6         	movff	??_lcd_puts,tblptrl
  6377  00283C                     	if	0	;There is only one active tblptr byte
  6378  00283C                     	endif
  6379  00283C                     	if	0	;tblptru may be non-zero
  6380  00283C                     	endif
  6381  00283C                     	if	0	;tblptru may be non-zero
  6382  00283C                     	endif
  6383  00283C  0008               	tblrd		*
  6384  00283E  50F5               	movf	tablat,w,c
  6385  002840  0012               	return	
  6386  002842                     __end_ofPL24:
  6387                           	opt stack 0
  6388                           tblptru	equ	0xFF8
  6389                           tblptrh	equ	0xFF7
  6390                           tblptrl	equ	0xFF6
  6391                           tablat	equ	0xFF5
  6392                           prodl	equ	0xFF3
  6393                           intcon	equ	0xFF2
  6394                           intcon2	equ	0xFF1
  6395                           postinc0	equ	0xFEE
  6396                           wreg	equ	0xFE8
  6397                           postdec1	equ	0xFE5
  6398                           fsr1l	equ	0xFE1
  6399                           indf2	equ	0xFDF
  6400                           postinc2	equ	0xFDE
  6401                           postdec2	equ	0xFDD
  6402                           fsr2h	equ	0xFDA
  6403                           fsr2l	equ	0xFD9
  6404                           status	equ	0xFD8
  6405                           
  6406 ;; *************** function _calibrate *****************
  6407 ;; Defined at:
  6408 ;;		line 24 in file "../../../src/measure.c"
  6409 ;; Parameters:    Size  Location     Type
  6410 ;;		None
  6411 ;; Auto vars:     Size  Location     Type
  6412 ;;  i               1   62[COMRAM] unsigned char 
  6413 ;; Return value:  Size  Location     Type
  6414 ;;		None               void
  6415 ;; Registers used:
  6416 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6417 ;; Tracked objects:
  6418 ;;		On entry : 0/0
  6419 ;;		On exit  : 0/0
  6420 ;;		Unchanged: 0/0
  6421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6422 ;;      Params:         0       0       0       0       0       0       0       0       0
  6423 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6424 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6425 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6426 ;;Total ram usage:        1 bytes
  6427 ;; Hardware stack levels used:    1
  6428 ;; Hardware stack levels required when called:    6
  6429 ;; This function calls:
  6430 ;;		___lwtofl
  6431 ;;		_delay10ms
  6432 ;;		_lcd_clear
  6433 ;;		_lcd_gotoxy
  6434 ;;		_lcd_send
  6435 ;;		_measure_freq
  6436 ;;		_put_str
  6437 ;;		_ser_puts
  6438 ;; This function is called by:
  6439 ;;		_main
  6440 ;; This function uses a non-reentrant model
  6441 ;;
  6442                           
  6443                           	psect	text32
  6444  001BD0                     __ptext32:
  6445                           	opt stack 0
  6446  001BD0                     _calibrate:
  6447                           	opt stack 24
  6448                           
  6449                           ;measure.c: 25: uint8_t i;
  6450                           ;measure.c: 28: lcd_clear();
  6451                           
  6452                           ;incstack = 0
  6453  001BD0  ECD3  F014         	call	_lcd_clear	;wreg free
  6454                           
  6455                           ;measure.c: 30: lcd_gotoxy(0, 0);
  6456  001BD4  0E00               	movlw	0
  6457  001BD6  6A08               	clrf	lcd_gotoxy@row,c
  6458  001BD8  EC93  F013         	call	_lcd_gotoxy
  6459                           
  6460                           ;measure.c: 31: put_str("Calibrating");
  6461  001BDC  0E69               	movlw	STR_1& (0+255)
  6462  001BDE  EC21  F014         	call	_put_str
  6463                           
  6464                           ;measure.c: 33: lcd_gotoxy(0, 1);
  6465  001BE2  0E01               	movlw	1
  6466  001BE4  6E08               	movwf	lcd_gotoxy@row,c
  6467  001BE6  0E00               	movlw	0
  6468  001BE8  EC93  F013         	call	_lcd_gotoxy
  6469                           
  6470                           ;measure.c: 34: ser_puts("\r\n");
  6471  001BEC  0E9B               	movlw	(STR_29+3)& (0+255)
  6472  001BEE  ECB7  F014         	call	_ser_puts
  6473                           
  6474                           ;measure.c: 35: put_str("please wait...");
  6475  001BF2  0E4D               	movlw	STR_3& (0+255)
  6476  001BF4  EC21  F014         	call	_put_str
  6477                           
  6478                           ;measure.c: 38: LATC &= ~0b100;
  6479  001BF8  948B               	bcf	3979,2,c	;volatile
  6480                           
  6481                           ;measure.c: 40: F1 = (double)measure_freq();
  6482  001BFA  EC7C  F00C         	call	_measure_freq	;wreg free
  6483  001BFE  C036  F03B         	movff	?_measure_freq,___lwtofl@c
  6484  001C02  C037  F03C         	movff	?_measure_freq+1,___lwtofl@c+1
  6485  001C06  EC36  F014         	call	___lwtofl	;wreg free
  6486  001C0A  C03B  F0E5         	movff	?___lwtofl,_F1
  6487  001C0E  C03C  F0E6         	movff	?___lwtofl+1,_F1+1
  6488  001C12  C03D  F0E7         	movff	?___lwtofl+2,_F1+2
  6489  001C16  C03E  F0E8         	movff	?___lwtofl+3,_F1+3
  6490                           
  6491                           ;measure.c: 41: delay10ms(50);
  6492  001C1A  0E32               	movlw	50
  6493  001C1C  ECEF  F014         	call	_delay10ms
  6494                           
  6495                           ;measure.c: 43: F1 = (double)measure_freq();
  6496  001C20  EC7C  F00C         	call	_measure_freq	;wreg free
  6497  001C24  C036  F03B         	movff	?_measure_freq,___lwtofl@c
  6498  001C28  C037  F03C         	movff	?_measure_freq+1,___lwtofl@c+1
  6499  001C2C  EC36  F014         	call	___lwtofl	;wreg free
  6500  001C30  C03B  F0E5         	movff	?___lwtofl,_F1
  6501  001C34  C03C  F0E6         	movff	?___lwtofl+1,_F1+1
  6502  001C38  C03D  F0E7         	movff	?___lwtofl+2,_F1+2
  6503  001C3C  C03E  F0E8         	movff	?___lwtofl+3,_F1+3
  6504                           
  6505                           ;measure.c: 44: LATC |= 0b100;
  6506  001C40  848B               	bsf	3979,2,c	;volatile
  6507                           
  6508                           ;measure.c: 46: F2 = (double)measure_freq();
  6509  001C42  EC7C  F00C         	call	_measure_freq	;wreg free
  6510  001C46  C036  F03B         	movff	?_measure_freq,___lwtofl@c
  6511  001C4A  C037  F03C         	movff	?_measure_freq+1,___lwtofl@c+1
  6512  001C4E  EC36  F014         	call	___lwtofl	;wreg free
  6513  001C52  C03B  F0B8         	movff	?___lwtofl,_F2
  6514  001C56  C03C  F0B9         	movff	?___lwtofl+1,_F2+1
  6515  001C5A  C03D  F0BA         	movff	?___lwtofl+2,_F2+2
  6516  001C5E  C03E  F0BB         	movff	?___lwtofl+3,_F2+3
  6517                           
  6518                           ;measure.c: 47: delay10ms(50);
  6519  001C62  0E32               	movlw	50
  6520  001C64  ECEF  F014         	call	_delay10ms
  6521                           
  6522                           ;measure.c: 49: F2 = (double)measure_freq();
  6523  001C68  EC7C  F00C         	call	_measure_freq	;wreg free
  6524  001C6C  C036  F03B         	movff	?_measure_freq,___lwtofl@c
  6525  001C70  C037  F03C         	movff	?_measure_freq+1,___lwtofl@c+1
  6526  001C74  EC36  F014         	call	___lwtofl	;wreg free
  6527  001C78  C03B  F0B8         	movff	?___lwtofl,_F2
  6528  001C7C  C03C  F0B9         	movff	?___lwtofl+1,_F2+1
  6529  001C80  C03D  F0BA         	movff	?___lwtofl+2,_F2+2
  6530  001C84  C03E  F0BB         	movff	?___lwtofl+3,_F2+3
  6531                           
  6532                           ;measure.c: 50: LATC &= ~0b100;
  6533  001C88  948B               	bcf	3979,2,c	;volatile
  6534                           
  6535                           ;measure.c: 54: lcd_gotoxy(11, 0);
  6536  001C8A  6A08               	clrf	lcd_gotoxy@row,c
  6537  001C8C  0E0B               	movlw	11
  6538  001C8E  EC93  F013         	call	_lcd_gotoxy
  6539                           
  6540                           ;measure.c: 56: for(i = 0; i < 6; i++) {
  6541  001C92  6A3F               	clrf	calibrate@i,c
  6542  001C94                     l3996:
  6543                           
  6544                           ;measure.c: 57: lcd_send(('='), 1);
  6545  001C94  0E01               	movlw	1
  6546  001C96  6E05               	movwf	lcd_send@mode,c
  6547  001C98  0E3D               	movlw	61
  6548  001C9A  ECC6  F014         	call	_lcd_send
  6549                           
  6550                           ;measure.c: 59: delay10ms(28);
  6551  001C9E  0E1C               	movlw	28
  6552  001CA0  ECEF  F014         	call	_delay10ms
  6553  001CA4  2A3F               	incf	calibrate@i,f,c
  6554  001CA6  0E05               	movlw	5
  6555  001CA8  643F               	cpfsgt	calibrate@i,c
  6556  001CAA  D7F4               	goto	l3996
  6557                           
  6558                           ;measure.c: 60: }
  6559                           ;measure.c: 62: ser_puts("\r\n");
  6560  001CAC  0E9B               	movlw	(STR_29+3)& (0+255)
  6561  001CAE  EFB7  F014         	goto	_ser_puts
  6562  001CB2                     __end_of_calibrate:
  6563                           	opt stack 0
  6564                           tblptru	equ	0xFF8
  6565                           tblptrh	equ	0xFF7
  6566                           tblptrl	equ	0xFF6
  6567                           tablat	equ	0xFF5
  6568                           prodl	equ	0xFF3
  6569                           intcon	equ	0xFF2
  6570                           intcon2	equ	0xFF1
  6571                           postinc0	equ	0xFEE
  6572                           wreg	equ	0xFE8
  6573                           postdec1	equ	0xFE5
  6574                           fsr1l	equ	0xFE1
  6575                           indf2	equ	0xFDF
  6576                           postinc2	equ	0xFDE
  6577                           postdec2	equ	0xFDD
  6578                           fsr2h	equ	0xFDA
  6579                           fsr2l	equ	0xFD9
  6580                           status	equ	0xFD8
  6581                           
  6582 ;; *************** function _ser_puts *****************
  6583 ;; Defined at:
  6584 ;;		line 92 in file "../../../lib/ser.c"
  6585 ;; Parameters:    Size  Location     Type
  6586 ;;  s               1    wreg     PTR const unsigned char 
  6587 ;;		 -> STR_34(3), STR_29(6), STR_24(3), STR_14(3), 
  6588 ;;		 -> STR_13(5), STR_12(3), STR_11(8), STR_10(6), 
  6589 ;;		 -> STR_9(6), STR_8(6), STR_7(5), STR_4(3), 
  6590 ;;		 -> STR_2(3), 
  6591 ;; Auto vars:     Size  Location     Type
  6592 ;;  s               1    4[COMRAM] PTR const unsigned char 
  6593 ;;		 -> STR_34(3), STR_29(6), STR_24(3), STR_14(3), 
  6594 ;;		 -> STR_13(5), STR_12(3), STR_11(8), STR_10(6), 
  6595 ;;		 -> STR_9(6), STR_8(6), STR_7(5), STR_4(3), 
  6596 ;;		 -> STR_2(3), 
  6597 ;; Return value:  Size  Location     Type
  6598 ;;		None               void
  6599 ;; Registers used:
  6600 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6601 ;; Tracked objects:
  6602 ;;		On entry : 0/0
  6603 ;;		On exit  : 0/0
  6604 ;;		Unchanged: 0/0
  6605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6606 ;;      Params:         0       0       0       0       0       0       0       0       0
  6607 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6608 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6609 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6610 ;;Total ram usage:        1 bytes
  6611 ;; Hardware stack levels used:    1
  6612 ;; Hardware stack levels required when called:    2
  6613 ;; This function calls:
  6614 ;;		_ser_putch
  6615 ;; This function is called by:
  6616 ;;		_calibrate
  6617 ;;		_measure_capacitance
  6618 ;;		_print_unit
  6619 ;;		_main
  6620 ;; This function uses a non-reentrant model
  6621 ;;
  6622                           
  6623                           	psect	text33
  6624  00296E                     __ptext33:
  6625                           	opt stack 0
  6626  00296E                     _ser_puts:
  6627                           	opt stack 28
  6628                           
  6629                           ;incstack = 0
  6630                           ;ser_puts@s stored from wreg
  6631  00296E  6E05               	movwf	ser_puts@s,c
  6632                           
  6633                           ;ser.c: 93: while(*s) ser_putch(*s++);
  6634  002970  D004               	goto	l3032
  6635  002972                     l3028:
  6636  002972  D807               	call	PL40	;call to abstracted procedure
  6637  002974  EC5F  F014         	call	_ser_putch
  6638  002978  2A05               	incf	ser_puts@s,f,c
  6639  00297A                     l3032:
  6640  00297A  D803               	call	PL40	;call to abstracted procedure
  6641  00297C  B4D8               	btfsc	status,2,c
  6642  00297E  0012               	return		;funcret
  6643  002980  D7F8               	goto	l3028
  6644  002982                     __end_of_ser_puts:
  6645                           	opt stack 0
  6646  002982                     PL40:
  6647                           	opt stack 28
  6648  002982  C005  FFF6         	movff	ser_puts@s,tblptrl
  6649  002986                     	if	0	;There is only one active tblptr byte
  6650  002986                     	endif
  6651  002986                     	if	0	;tblptru may be non-zero
  6652  002986                     	endif
  6653  002986                     	if	0	;tblptru may be non-zero
  6654  002986                     	endif
  6655  002986  0008               	tblrd		*
  6656  002988  50F5               	movf	tablat,w,c
  6657  00298A  0012               	return	
  6658  00298C                     __end_ofPL40:
  6659                           	opt stack 0
  6660                           tblptru	equ	0xFF8
  6661                           tblptrh	equ	0xFF7
  6662                           tblptrl	equ	0xFF6
  6663                           tablat	equ	0xFF5
  6664                           prodl	equ	0xFF3
  6665                           intcon	equ	0xFF2
  6666                           intcon2	equ	0xFF1
  6667                           postinc0	equ	0xFEE
  6668                           wreg	equ	0xFE8
  6669                           postdec1	equ	0xFE5
  6670                           fsr1l	equ	0xFE1
  6671                           indf2	equ	0xFDF
  6672                           postinc2	equ	0xFDE
  6673                           postdec2	equ	0xFDD
  6674                           fsr2h	equ	0xFDA
  6675                           fsr2l	equ	0xFD9
  6676                           status	equ	0xFD8
  6677                           
  6678 ;; *************** function _measure_freq *****************
  6679 ;; Defined at:
  6680 ;;		line 69 in file "../../../src/measure.c"
  6681 ;; Parameters:    Size  Location     Type
  6682 ;;		None
  6683 ;; Auto vars:     Size  Location     Type
  6684 ;;  count           2   56[COMRAM] unsigned int 
  6685 ;; Return value:  Size  Location     Type
  6686 ;;                  2   53[COMRAM] unsigned short 
  6687 ;; Registers used:
  6688 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6689 ;; Tracked objects:
  6690 ;;		On entry : 0/0
  6691 ;;		On exit  : 0/0
  6692 ;;		Unchanged: 0/0
  6693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6694 ;;      Params:         2       0       0       0       0       0       0       0       0
  6695 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6696 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6697 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6698 ;;Total ram usage:        5 bytes
  6699 ;; Hardware stack levels used:    1
  6700 ;; Hardware stack levels required when called:    5
  6701 ;; This function calls:
  6702 ;;		_format_number
  6703 ;;		_lcd_gotoxy
  6704 ;;		_put_str
  6705 ;;		_timer0_read_ps
  6706 ;; This function is called by:
  6707 ;;		_calibrate
  6708 ;;		_measure_capacitance
  6709 ;;		_measure_inductance
  6710 ;; This function uses a non-reentrant model
  6711 ;;
  6712                           
  6713                           	psect	text34
  6714  0018F8                     __ptext34:
  6715                           	opt stack 0
  6716  0018F8                     _measure_freq:
  6717                           	opt stack 24
  6718                           
  6719                           ;measure.c: 70: uint16_t count;
  6720                           ;measure.c: 72: INTCON &= ~0b100;
  6721                           
  6722                           ;incstack = 0
  6723  0018F8  94F2               	bcf	intcon,2,c	;volatile
  6724                           
  6725                           ;measure.c: 76: TRISA &= ~0b00010000;
  6726  0018FA  9892               	bcf	3986,4,c	;volatile
  6727                           
  6728                           ;measure.c: 78: _delay((unsigned long)((20)*(20000000/4000.0)));
  6729  0018FC  0E82               	movlw	130
  6730  0018FE  6E38               	movwf	??_measure_freq& (0+255),c
  6731  001900  0EDE               	movlw	222
  6732  001902                     u3467:
  6733  001902  2EE8               	decfsz	wreg,f,c
  6734  001904  D7FE               	goto	u3467
  6735  001906  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6736  001908  D7FC               	goto	u3467
  6737                           
  6738                           ;measure.c: 81: TMR0 = 0x00;
  6739  00190A  6AD6               	clrf	4054,c	;volatile
  6740  00190C  6AD7               	clrf	4055,c	;volatile
  6741                           
  6742                           ;measure.c: 83: LATC &= ~0b00000010; LATC |= (!!(1)) << 1;;
  6743  00190E  928B               	bcf	3979,1,c	;volatile
  6744  001910  828B               	bsf	3979,1,c	;volatile
  6745                           
  6746                           ;measure.c: 86: _delay((unsigned long)((10)*(20000000/4000.0)));
  6747  001912  0E41               	movlw	65
  6748  001914  6E38               	movwf	??_measure_freq& (0+255),c
  6749  001916  0EEE               	movlw	238
  6750  001918                     u3477:
  6751  001918  2EE8               	decfsz	wreg,f,c
  6752  00191A  D7FE               	goto	u3477
  6753  00191C  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6754  00191E  D7FC               	goto	u3477
  6755  001920  D000               	nop2	
  6756                           
  6757                           ;measure.c: 87: _delay((unsigned long)((10)*(20000000/4000.0)));
  6758  001922  0E41               	movlw	65
  6759  001924  6E38               	movwf	??_measure_freq& (0+255),c
  6760  001926  0EEE               	movlw	238
  6761  001928                     u3487:
  6762  001928  2EE8               	decfsz	wreg,f,c
  6763  00192A  D7FE               	goto	u3487
  6764  00192C  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6765  00192E  D7FC               	goto	u3487
  6766  001930  D000               	nop2	
  6767                           
  6768                           ;measure.c: 88: _delay((unsigned long)((10)*(20000000/4000.0)));
  6769  001932  0E41               	movlw	65
  6770  001934  6E38               	movwf	??_measure_freq& (0+255),c
  6771  001936  0EEE               	movlw	238
  6772  001938                     u3497:
  6773  001938  2EE8               	decfsz	wreg,f,c
  6774  00193A  D7FE               	goto	u3497
  6775  00193C  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6776  00193E  D7FC               	goto	u3497
  6777  001940  D000               	nop2	
  6778                           
  6779                           ;measure.c: 89: _delay((unsigned long)((10)*(20000000/4000.0)));
  6780  001942  0E41               	movlw	65
  6781  001944  6E38               	movwf	??_measure_freq& (0+255),c
  6782  001946  0EEE               	movlw	238
  6783  001948                     u3507:
  6784  001948  2EE8               	decfsz	wreg,f,c
  6785  00194A  D7FE               	goto	u3507
  6786  00194C  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6787  00194E  D7FC               	goto	u3507
  6788  001950  D000               	nop2	
  6789                           
  6790                           ;measure.c: 90: _delay((unsigned long)((10)*(20000000/4000.0)));
  6791  001952  0E41               	movlw	65
  6792  001954  6E38               	movwf	??_measure_freq& (0+255),c
  6793  001956  0EEE               	movlw	238
  6794  001958                     u3517:
  6795  001958  2EE8               	decfsz	wreg,f,c
  6796  00195A  D7FE               	goto	u3517
  6797  00195C  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6798  00195E  D7FC               	goto	u3517
  6799  001960  D000               	nop2	
  6800                           
  6801                           ;measure.c: 91: _delay((unsigned long)((10)*(20000000/4000.0)));
  6802  001962  0E41               	movlw	65
  6803  001964  6E38               	movwf	??_measure_freq& (0+255),c
  6804  001966  0EEE               	movlw	238
  6805  001968                     u3527:
  6806  001968  2EE8               	decfsz	wreg,f,c
  6807  00196A  D7FE               	goto	u3527
  6808  00196C  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6809  00196E  D7FC               	goto	u3527
  6810  001970  D000               	nop2	
  6811                           
  6812                           ;measure.c: 92: _delay((unsigned long)((10)*(20000000/4000.0)));
  6813  001972  0E41               	movlw	65
  6814  001974  6E38               	movwf	??_measure_freq& (0+255),c
  6815  001976  0EEE               	movlw	238
  6816  001978                     u3537:
  6817  001978  2EE8               	decfsz	wreg,f,c
  6818  00197A  D7FE               	goto	u3537
  6819  00197C  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6820  00197E  D7FC               	goto	u3537
  6821  001980  D000               	nop2	
  6822                           
  6823                           ;measure.c: 93: _delay((unsigned long)((10)*(20000000/4000.0)));
  6824  001982  0E41               	movlw	65
  6825  001984  6E38               	movwf	??_measure_freq& (0+255),c
  6826  001986  0EEE               	movlw	238
  6827  001988                     u3547:
  6828  001988  2EE8               	decfsz	wreg,f,c
  6829  00198A  D7FE               	goto	u3547
  6830  00198C  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6831  00198E  D7FC               	goto	u3547
  6832  001990  D000               	nop2	
  6833                           
  6834                           ;measure.c: 94: _delay((unsigned long)((10)*(20000000/4000.0)));
  6835  001992  0E41               	movlw	65
  6836  001994  6E38               	movwf	??_measure_freq& (0+255),c
  6837  001996  0EEE               	movlw	238
  6838  001998                     u3557:
  6839  001998  2EE8               	decfsz	wreg,f,c
  6840  00199A  D7FE               	goto	u3557
  6841  00199C  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6842  00199E  D7FC               	goto	u3557
  6843  0019A0  D000               	nop2	
  6844                           
  6845                           ;measure.c: 95: _delay((unsigned long)((10)*(20000000/4000.0)));
  6846  0019A2  0E41               	movlw	65
  6847  0019A4  6E38               	movwf	??_measure_freq& (0+255),c
  6848  0019A6  0EEE               	movlw	238
  6849  0019A8                     u3567:
  6850  0019A8  2EE8               	decfsz	wreg,f,c
  6851  0019AA  D7FE               	goto	u3567
  6852  0019AC  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6853  0019AE  D7FC               	goto	u3567
  6854  0019B0  D000               	nop2	
  6855                           
  6856                           ;measure.c: 97: LATC &= ~0b00000010; LATC |= (!!(0)) << 1;;
  6857  0019B2  928B               	bcf	3979,1,c	;volatile
  6858  0019B4  508B               	movf	3979,w,c	;volatile
  6859                           
  6860                           ;measure.c: 100: TRISA |= 0b00010000;
  6861  0019B6  8892               	bsf	3986,4,c	;volatile
  6862                           
  6863                           ;measure.c: 103: count = timer0_read_ps();
  6864  0019B8  ECA3  F012         	call	_timer0_read_ps	;wreg free
  6865  0019BC  C004  F039         	movff	?_timer0_read_ps,measure_freq@count
  6866  0019C0  C005  F03A         	movff	?_timer0_read_ps+1,measure_freq@count+1
  6867                           
  6868                           ;measure.c: 106: lcd_gotoxy(0, 1);
  6869  0019C4  0E01               	movlw	1
  6870  0019C6  6E08               	movwf	lcd_gotoxy@row,c
  6871  0019C8  0E00               	movlw	0
  6872  0019CA  EC93  F013         	call	_lcd_gotoxy
  6873                           
  6874                           ;measure.c: 107: put_str("Freq=");
  6875  0019CE  0EB0               	movlw	STR_5& (0+255)
  6876  0019D0  EC21  F014         	call	_put_str
  6877                           
  6878                           ;measure.c: 108: format_number( count, 10, 5);
  6879  0019D4  C039  F00B         	movff	measure_freq@count,format_number@n
  6880  0019D8  C03A  F00C         	movff	measure_freq@count+1,format_number@n+1
  6881  0019DC  0E0A               	movlw	10
  6882  0019DE  6E0D               	movwf	format_number@base,c
  6883  0019E0  0E05               	movlw	5
  6884  0019E2  6E0E               	movwf	format_number@pad,c
  6885  0019E4  EC3E  F010         	call	_format_number	;wreg free
  6886                           
  6887                           ;measure.c: 111: return count;
  6888  0019E8  C039  F036         	movff	measure_freq@count,?_measure_freq
  6889  0019EC  C03A  F037         	movff	measure_freq@count+1,?_measure_freq+1
  6890  0019F0  0012               	return		;funcret
  6891  0019F2                     __end_of_measure_freq:
  6892                           	opt stack 0
  6893                           tblptru	equ	0xFF8
  6894                           tblptrh	equ	0xFF7
  6895                           tblptrl	equ	0xFF6
  6896                           tablat	equ	0xFF5
  6897                           prodl	equ	0xFF3
  6898                           intcon	equ	0xFF2
  6899                           intcon2	equ	0xFF1
  6900                           postinc0	equ	0xFEE
  6901                           wreg	equ	0xFE8
  6902                           postdec1	equ	0xFE5
  6903                           fsr1l	equ	0xFE1
  6904                           indf2	equ	0xFDF
  6905                           postinc2	equ	0xFDE
  6906                           postdec2	equ	0xFDD
  6907                           fsr2h	equ	0xFDA
  6908                           fsr2l	equ	0xFD9
  6909                           status	equ	0xFD8
  6910                           
  6911 ;; *************** function _timer0_read_ps *****************
  6912 ;; Defined at:
  6913 ;;		line 59 in file "../../../lib/timer.c"
  6914 ;; Parameters:    Size  Location     Type
  6915 ;;		None
  6916 ;; Auto vars:     Size  Location     Type
  6917 ;;  count           2    8[COMRAM] unsigned int 
  6918 ;;  prev            1    7[COMRAM] unsigned char 
  6919 ;; Return value:  Size  Location     Type
  6920 ;;                  2    3[COMRAM] unsigned short 
  6921 ;; Registers used:
  6922 ;;		wreg, status,2, status,0
  6923 ;; Tracked objects:
  6924 ;;		On entry : 0/0
  6925 ;;		On exit  : 0/0
  6926 ;;		Unchanged: 0/0
  6927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6928 ;;      Params:         2       0       0       0       0       0       0       0       0
  6929 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6930 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6931 ;;      Totals:         7       0       0       0       0       0       0       0       0
  6932 ;;Total ram usage:        7 bytes
  6933 ;; Hardware stack levels used:    1
  6934 ;; Hardware stack levels required when called:    1
  6935 ;; This function calls:
  6936 ;;		Nothing
  6937 ;; This function is called by:
  6938 ;;		_measure_freq
  6939 ;; This function uses a non-reentrant model
  6940 ;;
  6941                           
  6942                           	psect	text35
  6943  002546                     __ptext35:
  6944                           	opt stack 0
  6945  002546                     _timer0_read_ps:
  6946                           	opt stack 27
  6947                           
  6948                           ;timer.c: 60: uint8_t prev = TMR0;
  6949                           
  6950                           ;incstack = 0
  6951  002546  CFD6 F008          	movff	4054,timer0_read_ps@prev	;volatile
  6952                           
  6953                           ;timer.c: 61: uint16_t count = 0;
  6954  00254A  6A09               	clrf	timer0_read_ps@count,c
  6955  00254C  6A0A               	clrf	timer0_read_ps@count+1,c
  6956                           
  6957                           ;timer.c: 63: T0CON |= 0x20;
  6958  00254E  8AD5               	bsf	4053,5,c	;volatile
  6959  002550                     l206:
  6960                           
  6961                           ;timer.c: 67: T0CON |= 0x10;
  6962  002550  88D5               	bsf	4053,4,c	;volatile
  6963                           
  6964                           ;timer.c: 69: __nop();
  6965  002552  F000               	nop	
  6966                           
  6967                           ;timer.c: 70: __nop();
  6968  002554  F000               	nop	
  6969                           
  6970                           ;timer.c: 72: T0CON &= ~0x10;
  6971  002556  98D5               	bcf	4053,4,c	;volatile
  6972                           
  6973                           ;timer.c: 74: __nop();
  6974  002558  F000               	nop	
  6975                           
  6976                           ;timer.c: 75: __nop();
  6977  00255A  F000               	nop	
  6978                           
  6979                           ;timer.c: 77: ++count;
  6980  00255C  4A09               	infsnz	timer0_read_ps@count,f,c
  6981  00255E  2A0A               	incf	timer0_read_ps@count+1,f,c
  6982                           
  6983                           ;timer.c: 80: } while(prev == TMR0 && count <= 255);
  6984  002560  5008               	movf	timer0_read_ps@prev,w,c
  6985  002562  18D6               	xorwf	4054,w,c	;volatile
  6986  002564  10D7               	iorwf	4055,w,c	;volatile
  6987  002566  E102               	bnz	l3012
  6988  002568  040A               	decf	timer0_read_ps@count+1,w,c
  6989  00256A  E3F2               	bnc	l206
  6990  00256C                     l3012:
  6991                           
  6992                           ;timer.c: 82: count = ((prev << 8) + (256 - count));
  6993  00256C  5008               	movf	timer0_read_ps@prev,w,c
  6994  00256E  6E07               	movwf	(??_timer0_read_ps+1)& (0+255),c
  6995  002570  6A06               	clrf	??_timer0_read_ps& (0+255),c
  6996  002572  5009               	movf	timer0_read_ps@count,w,c
  6997  002574  5E06               	subwf	??_timer0_read_ps,f,c
  6998  002576  500A               	movf	timer0_read_ps@count+1,w,c
  6999  002578  5A07               	subwfb	??_timer0_read_ps+1,f,c
  7000  00257A  0E00               	movlw	0
  7001  00257C  2406               	addwf	??_timer0_read_ps,w,c
  7002  00257E  6E09               	movwf	timer0_read_ps@count,c
  7003  002580  0E01               	movlw	1
  7004  002582  2007               	addwfc	??_timer0_read_ps+1,w,c
  7005  002584  6E0A               	movwf	timer0_read_ps@count+1,c
  7006                           
  7007                           ;timer.c: 83: return count;
  7008  002586  C009  F004         	movff	timer0_read_ps@count,?_timer0_read_ps
  7009  00258A  C00A  F005         	movff	timer0_read_ps@count+1,?_timer0_read_ps+1
  7010  00258E  0012               	return		;funcret
  7011  002590                     __end_of_timer0_read_ps:
  7012                           	opt stack 0
  7013                           tblptru	equ	0xFF8
  7014                           tblptrh	equ	0xFF7
  7015                           tblptrl	equ	0xFF6
  7016                           tablat	equ	0xFF5
  7017                           prodl	equ	0xFF3
  7018                           intcon	equ	0xFF2
  7019                           intcon2	equ	0xFF1
  7020                           postinc0	equ	0xFEE
  7021                           wreg	equ	0xFE8
  7022                           postdec1	equ	0xFE5
  7023                           fsr1l	equ	0xFE1
  7024                           indf2	equ	0xFDF
  7025                           postinc2	equ	0xFDE
  7026                           postdec2	equ	0xFDD
  7027                           fsr2h	equ	0xFDA
  7028                           fsr2l	equ	0xFD9
  7029                           status	equ	0xFD8
  7030                           
  7031 ;; *************** function _put_str *****************
  7032 ;; Defined at:
  7033 ;;		line 510 in file "../../../src/print.c"
  7034 ;; Parameters:    Size  Location     Type
  7035 ;;  s               1    wreg     PTR const unsigned char 
  7036 ;;		 -> STR_15(13), STR_6(10), STR_5(6), STR_3(15), 
  7037 ;;		 -> STR_1(12), 
  7038 ;; Auto vars:     Size  Location     Type
  7039 ;;  s               1   10[COMRAM] PTR const unsigned char 
  7040 ;;		 -> STR_15(13), STR_6(10), STR_5(6), STR_3(15), 
  7041 ;;		 -> STR_1(12), 
  7042 ;;  i               2    8[COMRAM] int 
  7043 ;; Return value:  Size  Location     Type
  7044 ;;		None               void
  7045 ;; Registers used:
  7046 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7047 ;; Tracked objects:
  7048 ;;		On entry : 0/0
  7049 ;;		On exit  : 0/0
  7050 ;;		Unchanged: 0/0
  7051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7052 ;;      Params:         0       0       0       0       0       0       0       0       0
  7053 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7054 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7055 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7056 ;;Total ram usage:        4 bytes
  7057 ;; Hardware stack levels used:    1
  7058 ;; Hardware stack levels required when called:    4
  7059 ;; This function calls:
  7060 ;;		_output_putch
  7061 ;; This function is called by:
  7062 ;;		_calibrate
  7063 ;;		_measure_freq
  7064 ;;		_measure_capacitance
  7065 ;;		_measure_inductance
  7066 ;; This function uses a non-reentrant model
  7067 ;;
  7068                           
  7069                           	psect	text36
  7070  002842                     __ptext36:
  7071                           	opt stack 0
  7072  002842                     _put_str:
  7073                           	opt stack 25
  7074                           
  7075                           ;incstack = 0
  7076                           ;put_str@s stored from wreg
  7077  002842  6E0B               	movwf	put_str@s,c
  7078                           
  7079                           ;print.c: 511: int i;
  7080                           ;print.c: 513: for(i = 0; s[i]; i++) {
  7081  002844  6A09               	clrf	put_str@i,c
  7082  002846  6A0A               	clrf	put_str@i+1,c
  7083  002848  D005               	goto	l3024
  7084  00284A                     l3020:
  7085                           
  7086                           ;print.c: 514: output_putch(s[i]);
  7087  00284A  D808               	call	PL30	;call to abstracted procedure
  7088  00284C  ECDE  F014         	call	_output_putch
  7089  002850  4A09               	infsnz	put_str@i,f,c
  7090  002852  2A0A               	incf	put_str@i+1,f,c
  7091  002854                     l3024:
  7092  002854  D803               	call	PL30	;call to abstracted procedure
  7093  002856  B4D8               	btfsc	status,2,c
  7094  002858  0012               	return		;funcret
  7095  00285A  D7F7               	goto	l3020
  7096  00285C                     __end_of_put_str:
  7097                           	opt stack 0
  7098  00285C                     PL30:
  7099                           	opt stack 25
  7100  00285C  500B               	movf	put_str@s,w,c
  7101  00285E  2409               	addwf	put_str@i,w,c
  7102  002860  6E08               	movwf	??_put_str& (0+255),c
  7103  002862  C008  FFF6         	movff	??_put_str,tblptrl
  7104  002866                     	if	0	;There is only one active tblptr byte
  7105  002866                     	endif
  7106  002866                     	if	0	;tblptru may be non-zero
  7107  002866                     	endif
  7108  002866                     	if	0	;tblptru may be non-zero
  7109  002866                     	endif
  7110  002866  0008               	tblrd		*
  7111  002868  50F5               	movf	tablat,w,c
  7112  00286A  0012               	return	
  7113  00286C                     __end_ofPL30:
  7114                           	opt stack 0
  7115                           tblptru	equ	0xFF8
  7116                           tblptrh	equ	0xFF7
  7117                           tblptrl	equ	0xFF6
  7118                           tablat	equ	0xFF5
  7119                           prodl	equ	0xFF3
  7120                           intcon	equ	0xFF2
  7121                           intcon2	equ	0xFF1
  7122                           postinc0	equ	0xFEE
  7123                           wreg	equ	0xFE8
  7124                           postdec1	equ	0xFE5
  7125                           fsr1l	equ	0xFE1
  7126                           indf2	equ	0xFDF
  7127                           postinc2	equ	0xFDE
  7128                           postdec2	equ	0xFDD
  7129                           fsr2h	equ	0xFDA
  7130                           fsr2l	equ	0xFD9
  7131                           status	equ	0xFD8
  7132                           
  7133 ;; *************** function _output_putch *****************
  7134 ;; Defined at:
  7135 ;;		line 497 in file "../../../src/print.c"
  7136 ;; Parameters:    Size  Location     Type
  7137 ;;  c               1    wreg     unsigned char 
  7138 ;; Auto vars:     Size  Location     Type
  7139 ;;  c               1    6[COMRAM] unsigned char 
  7140 ;; Return value:  Size  Location     Type
  7141 ;;		None               void
  7142 ;; Registers used:
  7143 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7144 ;; Tracked objects:
  7145 ;;		On entry : 0/0
  7146 ;;		On exit  : 0/0
  7147 ;;		Unchanged: 0/0
  7148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7149 ;;      Params:         0       0       0       0       0       0       0       0       0
  7150 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7151 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7152 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7153 ;;Total ram usage:        1 bytes
  7154 ;; Hardware stack levels used:    1
  7155 ;; Hardware stack levels required when called:    3
  7156 ;; This function calls:
  7157 ;;		_lcd_send
  7158 ;;		_ser_putch
  7159 ;; This function is called by:
  7160 ;;		_put_str
  7161 ;; This function uses a non-reentrant model
  7162 ;;
  7163                           
  7164                           	psect	text37
  7165  0029BC                     __ptext37:
  7166                           	opt stack 0
  7167  0029BC                     _output_putch:
  7168                           	opt stack 25
  7169                           
  7170                           ;incstack = 0
  7171                           ;output_putch@c stored from wreg
  7172  0029BC  6E07               	movwf	output_putch@c,c
  7173                           
  7174                           ;print.c: 499: lcd_send((c), 1);
  7175  0029BE  0E01               	movlw	1
  7176  0029C0  6E05               	movwf	lcd_send@mode,c
  7177  0029C2  5007               	movf	output_putch@c,w,c
  7178  0029C4  ECC6  F014         	call	_lcd_send
  7179                           
  7180                           ;print.c: 502: ser_putch(c);
  7181  0029C8  5007               	movf	output_putch@c,w,c
  7182  0029CA  EF5F  F014         	goto	_ser_putch
  7183  0029CE                     __end_of_output_putch:
  7184                           	opt stack 0
  7185                           tblptru	equ	0xFF8
  7186                           tblptrh	equ	0xFF7
  7187                           tblptrl	equ	0xFF6
  7188                           tablat	equ	0xFF5
  7189                           prodl	equ	0xFF3
  7190                           intcon	equ	0xFF2
  7191                           intcon2	equ	0xFF1
  7192                           postinc0	equ	0xFEE
  7193                           wreg	equ	0xFE8
  7194                           postdec1	equ	0xFE5
  7195                           fsr1l	equ	0xFE1
  7196                           indf2	equ	0xFDF
  7197                           postinc2	equ	0xFDE
  7198                           postdec2	equ	0xFDD
  7199                           fsr2h	equ	0xFDA
  7200                           fsr2l	equ	0xFD9
  7201                           status	equ	0xFD8
  7202                           
  7203 ;; *************** function _ser_putch *****************
  7204 ;; Defined at:
  7205 ;;		line 82 in file "../../../lib/ser.c"
  7206 ;; Parameters:    Size  Location     Type
  7207 ;;  c               1    wreg     unsigned char 
  7208 ;; Auto vars:     Size  Location     Type
  7209 ;;  c               1    3[COMRAM] unsigned char 
  7210 ;; Return value:  Size  Location     Type
  7211 ;;		None               void
  7212 ;; Registers used:
  7213 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7214 ;; Tracked objects:
  7215 ;;		On entry : 0/0
  7216 ;;		On exit  : 0/0
  7217 ;;		Unchanged: 0/0
  7218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7219 ;;      Params:         0       0       0       0       0       0       0       0       0
  7220 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7221 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7222 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7223 ;;Total ram usage:        1 bytes
  7224 ;; Hardware stack levels used:    1
  7225 ;; Hardware stack levels required when called:    1
  7226 ;; This function calls:
  7227 ;;		Nothing
  7228 ;; This function is called by:
  7229 ;;		_measure_capacitance
  7230 ;;		_output_putch
  7231 ;;		_ser_puts
  7232 ;; This function uses a non-reentrant model
  7233 ;;
  7234                           
  7235                           	psect	text38
  7236  0028BE                     __ptext38:
  7237                           	opt stack 0
  7238  0028BE                     _ser_putch:
  7239                           	opt stack 28
  7240                           
  7241                           ;incstack = 0
  7242                           ;ser_putch@c stored from wreg
  7243  0028BE  6E04               	movwf	ser_putch@c,c
  7244  0028C0                     l2676:
  7245  0028C0  285B               	incf	_txiptr,w,c	;volatile
  7246  0028C2  0B0F               	andlw	15
  7247  0028C4  185C               	xorwf	_txoptr,w,c	;volatile
  7248  0028C6  E0FC               	bz	l2676
  7249                           
  7250                           ;ser.c: 84: GIE = 0;
  7251  0028C8  9EF2               	bcf	intcon,7,c	;volatile
  7252                           
  7253                           ;ser.c: 85: txfifo[txiptr] = c;
  7254  0028CA  0E10               	movlw	low _txfifo
  7255  0028CC  245B               	addwf	_txiptr,w,c	;volatile
  7256  0028CE  6ED9               	movwf	fsr2l,c
  7257  0028D0  6ADA               	clrf	fsr2h,c
  7258  0028D2  0E01               	movlw	high _txfifo
  7259  0028D4  22DA               	addwfc	fsr2h,f,c
  7260  0028D6  C004  FFDF         	movff	ser_putch@c,indf2
  7261                           
  7262                           ;ser.c: 86: txiptr = (txiptr + 1) & ((uint8_t)16 - 1);
  7263  0028DA  285B               	incf	_txiptr,w,c	;volatile
  7264  0028DC  0B0F               	andlw	15
  7265  0028DE  6E5B               	movwf	_txiptr,c	;volatile
  7266                           
  7267                           ;ser.c: 87: TXIE = 1;
  7268  0028E0  889D               	bsf	3997,4,c	;volatile
  7269                           
  7270                           ;ser.c: 88: GIE = 1;
  7271  0028E2  8EF2               	bsf	intcon,7,c	;volatile
  7272  0028E4  0012               	return		;funcret
  7273  0028E6                     __end_of_ser_putch:
  7274                           	opt stack 0
  7275                           tblptru	equ	0xFF8
  7276                           tblptrh	equ	0xFF7
  7277                           tblptrl	equ	0xFF6
  7278                           tablat	equ	0xFF5
  7279                           prodl	equ	0xFF3
  7280                           intcon	equ	0xFF2
  7281                           intcon2	equ	0xFF1
  7282                           postinc0	equ	0xFEE
  7283                           wreg	equ	0xFE8
  7284                           postdec1	equ	0xFE5
  7285                           fsr1l	equ	0xFE1
  7286                           indf2	equ	0xFDF
  7287                           postinc2	equ	0xFDE
  7288                           postdec2	equ	0xFDD
  7289                           fsr2h	equ	0xFDA
  7290                           fsr2l	equ	0xFD9
  7291                           status	equ	0xFD8
  7292                           
  7293 ;; *************** function _lcd_gotoxy *****************
  7294 ;; Defined at:
  7295 ;;		line 157 in file "../../../lib/lcd44780.c"
  7296 ;; Parameters:    Size  Location     Type
  7297 ;;  col             1    wreg     unsigned char 
  7298 ;;  row             1    7[COMRAM] unsigned char 
  7299 ;; Auto vars:     Size  Location     Type
  7300 ;;  col             1    8[COMRAM] unsigned char 
  7301 ;;  row_offsets     4    9[COMRAM] unsigned char [4]
  7302 ;; Return value:  Size  Location     Type
  7303 ;;		None               void
  7304 ;; Registers used:
  7305 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7306 ;; Tracked objects:
  7307 ;;		On entry : 0/0
  7308 ;;		On exit  : 0/0
  7309 ;;		Unchanged: 0/0
  7310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7311 ;;      Params:         1       0       0       0       0       0       0       0       0
  7312 ;;      Locals:         5       0       0       0       0       0       0       0       0
  7313 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7314 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7315 ;;Total ram usage:        6 bytes
  7316 ;; Hardware stack levels used:    1
  7317 ;; Hardware stack levels required when called:    4
  7318 ;; This function calls:
  7319 ;;		_lcd_command
  7320 ;; This function is called by:
  7321 ;;		_calibrate
  7322 ;;		_measure_freq
  7323 ;;		_measure_capacitance
  7324 ;;		_measure_inductance
  7325 ;;		_print_unit
  7326 ;;		_print_reading
  7327 ;;		_indicator
  7328 ;;		_main
  7329 ;; This function uses a non-reentrant model
  7330 ;;
  7331                           
  7332                           	psect	text39
  7333  002726                     __ptext39:
  7334                           	opt stack 0
  7335  002726                     _lcd_gotoxy:
  7336                           	opt stack 24
  7337                           
  7338                           ;incstack = 0
  7339                           ;lcd_gotoxy@col stored from wreg
  7340  002726  6E09               	movwf	lcd_gotoxy@col,c
  7341                           
  7342                           ;lcd44780.c: 159: uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
  7343  002728  C0F1  F00A         	movff	lcd_gotoxy@F4120,lcd_gotoxy@row_offsets
  7344  00272C  C0F2  F00B         	movff	lcd_gotoxy@F4120+1,lcd_gotoxy@row_offsets+1
  7345  002730  C0F3  F00C         	movff	lcd_gotoxy@F4120+2,lcd_gotoxy@row_offsets+2
  7346  002734  C0F4  F00D         	movff	lcd_gotoxy@F4120+3,lcd_gotoxy@row_offsets+3
  7347                           
  7348                           ;lcd44780.c: 168: if(LCD_lines == 1) {
  7349  002738  0100               	movlb	0	; () banked
  7350  00273A  05CF               	decf	_LCD_lines& (0+255),w,b
  7351  00273C  E106               	bnz	l2986
  7352                           
  7353                           ; BSR set to: 0
  7354                           ;lcd44780.c: 169: row_offsets[1] = 0x14;
  7355  00273E  0E14               	movlw	20
  7356  002740  6E0B               	movwf	lcd_gotoxy@row_offsets+1,c
  7357                           
  7358                           ;lcd44780.c: 170: row_offsets[2] = 0x28;
  7359  002742  0E28               	movlw	40
  7360  002744  6E0C               	movwf	lcd_gotoxy@row_offsets+2,c
  7361                           
  7362                           ;lcd44780.c: 171: row_offsets[3] = 0x3C;
  7363  002746  0E3C               	movlw	60
  7364  002748  6E0D               	movwf	lcd_gotoxy@row_offsets+3,c
  7365  00274A                     l2986:
  7366                           
  7367                           ; BSR set to: 0
  7368                           ;lcd44780.c: 172: }
  7369                           ;lcd44780.c: 178: lcd_command(0x80 | (col + row_offsets[row]));
  7370  00274A  5008               	movf	lcd_gotoxy@row,w,c
  7371  00274C  0F0A               	addlw	low lcd_gotoxy@row_offsets
  7372  00274E  6ED9               	movwf	fsr2l,c
  7373  002750  6ADA               	clrf	fsr2h,c
  7374  002752  50DF               	movf	indf2,w,c
  7375  002754  2409               	addwf	lcd_gotoxy@col,w,c
  7376  002756  0980               	iorlw	128
  7377  002758  EFE7  F014         	goto	_lcd_command
  7378  00275C                     __end_of_lcd_gotoxy:
  7379                           	opt stack 0
  7380                           tblptru	equ	0xFF8
  7381                           tblptrh	equ	0xFF7
  7382                           tblptrl	equ	0xFF6
  7383                           tablat	equ	0xFF5
  7384                           prodl	equ	0xFF3
  7385                           intcon	equ	0xFF2
  7386                           intcon2	equ	0xFF1
  7387                           postinc0	equ	0xFEE
  7388                           wreg	equ	0xFE8
  7389                           postdec1	equ	0xFE5
  7390                           fsr1l	equ	0xFE1
  7391                           indf2	equ	0xFDF
  7392                           postinc2	equ	0xFDE
  7393                           postdec2	equ	0xFDD
  7394                           fsr2h	equ	0xFDA
  7395                           fsr2l	equ	0xFD9
  7396                           status	equ	0xFD8
  7397                           
  7398 ;; *************** function _format_number *****************
  7399 ;; Defined at:
  7400 ;;		line 15 in file "../../../lib/format.c"
  7401 ;; Parameters:    Size  Location     Type
  7402 ;;  n               2   10[COMRAM] unsigned int 
  7403 ;;  base            1   12[COMRAM] unsigned char 
  7404 ;;  pad             1   13[COMRAM] char 
  7405 ;; Auto vars:     Size  Location     Type
  7406 ;;  buf            32   16[COMRAM] unsigned char [32]
  7407 ;;  i               1   52[COMRAM] char 
  7408 ;;  di              1   51[COMRAM] unsigned char 
  7409 ;;  padchar         1   50[COMRAM] unsigned char 
  7410 ;; Return value:  Size  Location     Type
  7411 ;;		None               void
  7412 ;; Registers used:
  7413 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7414 ;; Tracked objects:
  7415 ;;		On entry : 0/0
  7416 ;;		On exit  : 0/0
  7417 ;;		Unchanged: 0/0
  7418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7419 ;;      Params:         4       0       0       0       0       0       0       0       0
  7420 ;;      Locals:        37       0       0       0       0       0       0       0       0
  7421 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7422 ;;      Totals:        43       0       0       0       0       0       0       0       0
  7423 ;;Total ram usage:       43 bytes
  7424 ;; Hardware stack levels used:    1
  7425 ;; Hardware stack levels required when called:    2
  7426 ;; This function calls:
  7427 ;;		___lwdiv
  7428 ;;		___lwmod
  7429 ;;		_buffer_putch
  7430 ;; This function is called by:
  7431 ;;		_format_xint32
  7432 ;;		_measure_freq
  7433 ;;		_print_reading
  7434 ;; This function uses a non-reentrant model
  7435 ;;
  7436                           
  7437                           	psect	text40
  7438  00207C                     __ptext40:
  7439                           	opt stack 0
  7440  00207C                     _format_number:
  7441                           	opt stack 26
  7442                           
  7443                           ;format.c: 16: char buf[8 * sizeof(long)];
  7444                           ;format.c: 17: uint8_t di;
  7445                           ;format.c: 18: int8_t i = 0;
  7446                           
  7447                           ;incstack = 0
  7448  00207C  6A35               	clrf	format_number@i,c
  7449                           
  7450                           ;format.c: 19: char padchar = ' ';
  7451  00207E  0E20               	movlw	32
  7452  002080  6E33               	movwf	format_number@padchar,c
  7453                           
  7454                           ;format.c: 21: if(pad < 0) {
  7455  002082  AE0E               	btfss	format_number@pad,7,c
  7456  002084  D003               	goto	l2910
  7457                           
  7458                           ;format.c: 22: pad = -pad;
  7459  002086  6C0E               	negf	format_number@pad,c
  7460                           
  7461                           ;format.c: 23: padchar = '0';
  7462  002088  0E30               	movlw	48
  7463  00208A  6E33               	movwf	format_number@padchar,c
  7464  00208C                     l2910:
  7465                           
  7466                           ;format.c: 35: di = n % base;
  7467  00208C  C00B  F004         	movff	format_number@n,___lwmod@dividend
  7468  002090  C00C  F005         	movff	format_number@n+1,___lwmod@dividend+1
  7469  002094  C00D  F006         	movff	format_number@base,___lwmod@divisor
  7470  002098  6A07               	clrf	___lwmod@divisor+1,c
  7471  00209A  EC57  F013         	call	___lwmod	;wreg free
  7472  00209E  5004               	movf	?___lwmod,w,c
  7473  0020A0  6E34               	movwf	format_number@di,c
  7474                           
  7475                           ;format.c: 36: buf[i++] = (di < 10 ? (uint8_t)'0' + di : (uint8_t)'A' + di - 10);
  7476  0020A2  0E09               	movlw	9
  7477  0020A4  6434               	cpfsgt	format_number@di,c
  7478  0020A6  D002               	goto	l2916
  7479  0020A8  0E37               	movlw	55
  7480  0020AA  D001               	goto	L5
  7481  0020AC                     l2916:
  7482  0020AC  0E30               	movlw	48
  7483  0020AE                     L5:
  7484  0020AE  2434               	addwf	format_number@di,w,c
  7485  0020B0  6E31               	movwf	_format_number$68,c
  7486  0020B2  6A32               	clrf	_format_number$68+1,c
  7487  0020B4  0E00               	movlw	0
  7488  0020B6  2232               	addwfc	_format_number$68+1,f,c
  7489  0020B8  5035               	movf	format_number@i,w,c
  7490  0020BA  0F11               	addlw	low format_number@buf
  7491  0020BC  6ED9               	movwf	fsr2l,c
  7492  0020BE  6ADA               	clrf	fsr2h,c
  7493  0020C0  C031  FFDF         	movff	_format_number$68,indf2
  7494  0020C4  2A35               	incf	format_number@i,f,c
  7495                           
  7496                           ;format.c: 38: n /= base;
  7497  0020C6  C00B  F004         	movff	format_number@n,___lwdiv@dividend
  7498  0020CA  C00C  F005         	movff	format_number@n+1,___lwdiv@dividend+1
  7499  0020CE  C00D  F006         	movff	format_number@base,___lwdiv@divisor
  7500  0020D2  6A07               	clrf	___lwdiv@divisor+1,c
  7501  0020D4  ECC8  F012         	call	___lwdiv	;wreg free
  7502  0020D8  C004  F00B         	movff	?___lwdiv,format_number@n
  7503  0020DC  C005  F00C         	movff	?___lwdiv+1,format_number@n+1
  7504                           
  7505                           ;format.c: 39: } while(n > 0);
  7506  0020E0  500B               	movf	format_number@n,w,c
  7507  0020E2  100C               	iorwf	format_number@n+1,w,c
  7508  0020E4  E004               	bz	l2928
  7509  0020E6  D7D2               	goto	l2910
  7510  0020E8                     l2926:
  7511  0020E8  5033               	movf	format_number@padchar,w,c
  7512  0020EA  EC11  F013         	call	_buffer_putch
  7513  0020EE                     l2928:
  7514  0020EE  060E               	decf	format_number@pad,f,c
  7515  0020F0  280E               	incf	format_number@pad,w,c
  7516  0020F2  6E0F               	movwf	??_format_number& (0+255),c
  7517  0020F4  5035               	movf	format_number@i,w,c
  7518  0020F6  0A80               	xorlw	128
  7519  0020F8  6E10               	movwf	(??_format_number+1)& (0+255),c
  7520  0020FA  500F               	movf	??_format_number,w,c
  7521  0020FC  0A80               	xorlw	128
  7522  0020FE  5C10               	subwf	(??_format_number+1)& (0+255),w,c
  7523  002100  E3F3               	bnc	l2926
  7524  002102                     l2930:
  7525                           
  7526                           ;format.c: 43: for(; i > 0; i--) buffer_putch((char)buf[(int16_t)i - 1]);
  7527  002102  5035               	movf	format_number@i,w,c
  7528  002104  0A80               	xorlw	128
  7529  002106  0F7F               	addlw	-129
  7530  002108  E30C               	bnc	l54
  7531  00210A  C035  F00F         	movff	format_number@i,??_format_number
  7532  00210E  060F               	decf	??_format_number,f,c
  7533  002110  500F               	movf	??_format_number,w,c
  7534  002112  0F11               	addlw	low format_number@buf
  7535  002114  6ED9               	movwf	fsr2l,c
  7536  002116  6ADA               	clrf	fsr2h,c
  7537  002118  50DF               	movf	indf2,w,c
  7538  00211A  EC11  F013         	call	_buffer_putch
  7539                           
  7540                           ; BSR set to: 0
  7541  00211E  0635               	decf	format_number@i,f,c
  7542  002120  D7F0               	goto	l2930
  7543  002122                     l54:
  7544  002122  0012               	return		;funcret
  7545  002124                     __end_of_format_number:
  7546                           	opt stack 0
  7547                           tblptru	equ	0xFF8
  7548                           tblptrh	equ	0xFF7
  7549                           tblptrl	equ	0xFF6
  7550                           tablat	equ	0xFF5
  7551                           prodl	equ	0xFF3
  7552                           intcon	equ	0xFF2
  7553                           intcon2	equ	0xFF1
  7554                           postinc0	equ	0xFEE
  7555                           wreg	equ	0xFE8
  7556                           postdec1	equ	0xFE5
  7557                           fsr1l	equ	0xFE1
  7558                           indf2	equ	0xFDF
  7559                           postinc2	equ	0xFDE
  7560                           postdec2	equ	0xFDD
  7561                           fsr2h	equ	0xFDA
  7562                           fsr2l	equ	0xFD9
  7563                           status	equ	0xFD8
  7564                           
  7565 ;; *************** function _buffer_putch *****************
  7566 ;; Defined at:
  7567 ;;		line 22 in file "../../../lib/buffer.c"
  7568 ;; Parameters:    Size  Location     Type
  7569 ;;  ch              1    wreg     unsigned char 
  7570 ;; Auto vars:     Size  Location     Type
  7571 ;;  ch              1    5[COMRAM] unsigned char 
  7572 ;; Return value:  Size  Location     Type
  7573 ;;                  1    wreg      unsigned char 
  7574 ;; Registers used:
  7575 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7576 ;; Tracked objects:
  7577 ;;		On entry : 0/0
  7578 ;;		On exit  : F/0
  7579 ;;		Unchanged: 0/0
  7580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7581 ;;      Params:         0       0       0       0       0       0       0       0       0
  7582 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7583 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7584 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7585 ;;Total ram usage:        3 bytes
  7586 ;; Hardware stack levels used:    1
  7587 ;; Hardware stack levels required when called:    1
  7588 ;; This function calls:
  7589 ;;		Nothing
  7590 ;; This function is called by:
  7591 ;;		_format_number
  7592 ;;		_format_xint32
  7593 ;;		_format_double
  7594 ;; This function uses a non-reentrant model
  7595 ;;
  7596                           
  7597                           	psect	text41
  7598  002622                     __ptext41:
  7599                           	opt stack 0
  7600  002622                     _buffer_putch:
  7601                           	opt stack 26
  7602                           
  7603                           ;incstack = 0
  7604                           ;buffer_putch@ch stored from wreg
  7605  002622  6E06               	movwf	buffer_putch@ch,c
  7606                           
  7607                           ;buffer.c: 23: if(16 - buffer.n <= 0) {
  7608  002624  0E10               	movlw	16
  7609  002626  6E04               	movwf	??_buffer_putch& (0+255),c
  7610  002628  6A05               	clrf	(??_buffer_putch+1)& (0+255),c
  7611  00262A  0100               	movlb	0	; () banked
  7612  00262C  39E4               	swapf	(_buffer+16)& (0+255),w,b
  7613  00262E  0B0F               	andlw	15
  7614  002630  5E04               	subwf	??_buffer_putch,f,c
  7615  002632  0E00               	movlw	0
  7616  002634  5A05               	subwfb	??_buffer_putch+1,f,c
  7617  002636  BE05               	btfsc	??_buffer_putch+1,7,c
  7618  002638  D017               	goto	l12
  7619  00263A  5005               	movf	??_buffer_putch+1,w,c
  7620  00263C  E102               	bnz	l2788
  7621  00263E  0404               	decf	??_buffer_putch,w,c
  7622  002640  E313               	bnc	l12
  7623  002642                     l2788:
  7624                           
  7625                           ; BSR set to: 0
  7626                           ;buffer.c: 25: }
  7627                           ;buffer.c: 26: buffer.x[buffer.n] = ch;
  7628  002642  39E4               	swapf	(_buffer+16)& (0+255),w,b
  7629  002644  0B0F               	andlw	15
  7630  002646  6E04               	movwf	??_buffer_putch& (0+255),c
  7631  002648  5004               	movf	??_buffer_putch,w,c
  7632  00264A  0FD4               	addlw	low _buffer
  7633  00264C  6ED9               	movwf	fsr2l,c
  7634  00264E  6ADA               	clrf	fsr2h,c
  7635  002650  C006  FFDF         	movff	buffer_putch@ch,indf2
  7636                           
  7637                           ; BSR set to: 0
  7638                           ;buffer.c: 27: buffer.n++;
  7639  002654  39E4               	swapf	(_buffer+16)& (0+255),w,b
  7640  002656  0B0F               	andlw	15
  7641  002658  6E04               	movwf	??_buffer_putch& (0+255),c
  7642  00265A  2A04               	incf	??_buffer_putch,f,c
  7643  00265C  3A04               	swapf	??_buffer_putch& (0+255),f,c
  7644  00265E  51E4               	movf	(_buffer+16)& (0+255),w,b
  7645  002660  1804               	xorwf	??_buffer_putch& (0+255),w,c
  7646  002662  0B0F               	andlw	-241
  7647  002664  1804               	xorwf	??_buffer_putch& (0+255),w,c
  7648  002666  6FE4               	movwf	(_buffer+16)& (0+255),b
  7649  002668                     l12:
  7650                           
  7651                           ; BSR set to: 0
  7652  002668  0012               	return		;funcret
  7653  00266A                     __end_of_buffer_putch:
  7654                           	opt stack 0
  7655                           tblptru	equ	0xFF8
  7656                           tblptrh	equ	0xFF7
  7657                           tblptrl	equ	0xFF6
  7658                           tablat	equ	0xFF5
  7659                           prodl	equ	0xFF3
  7660                           intcon	equ	0xFF2
  7661                           intcon2	equ	0xFF1
  7662                           postinc0	equ	0xFEE
  7663                           wreg	equ	0xFE8
  7664                           postdec1	equ	0xFE5
  7665                           fsr1l	equ	0xFE1
  7666                           indf2	equ	0xFDF
  7667                           postinc2	equ	0xFDE
  7668                           postdec2	equ	0xFDD
  7669                           fsr2h	equ	0xFDA
  7670                           fsr2l	equ	0xFD9
  7671                           status	equ	0xFD8
  7672                           
  7673 ;; *************** function ___lwmod *****************
  7674 ;; Defined at:
  7675 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  7676 ;; Parameters:    Size  Location     Type
  7677 ;;  dividend        2    3[COMRAM] unsigned int 
  7678 ;;  divisor         2    5[COMRAM] unsigned int 
  7679 ;; Auto vars:     Size  Location     Type
  7680 ;;  counter         1    7[COMRAM] unsigned char 
  7681 ;; Return value:  Size  Location     Type
  7682 ;;                  2    3[COMRAM] unsigned int 
  7683 ;; Registers used:
  7684 ;;		wreg, status,2, status,0
  7685 ;; Tracked objects:
  7686 ;;		On entry : 0/0
  7687 ;;		On exit  : 0/0
  7688 ;;		Unchanged: 0/0
  7689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7690 ;;      Params:         4       0       0       0       0       0       0       0       0
  7691 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7692 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7693 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7694 ;;Total ram usage:        5 bytes
  7695 ;; Hardware stack levels used:    1
  7696 ;; Hardware stack levels required when called:    1
  7697 ;; This function calls:
  7698 ;;		Nothing
  7699 ;; This function is called by:
  7700 ;;		_format_number
  7701 ;;		_print_reading
  7702 ;; This function uses a non-reentrant model
  7703 ;;
  7704                           
  7705                           	psect	text42
  7706  0026AE                     __ptext42:
  7707                           	opt stack 0
  7708  0026AE                     ___lwmod:
  7709                           	opt stack 26
  7710                           
  7711                           ; BSR set to: 0
  7712                           ;incstack = 0
  7713  0026AE  5006               	movf	___lwmod@divisor,w,c
  7714  0026B0  1007               	iorwf	___lwmod@divisor+1,w,c
  7715  0026B2  E017               	bz	l1123
  7716  0026B4  0E01               	movlw	1
  7717  0026B6  6E08               	movwf	___lwmod@counter,c
  7718  0026B8  D004               	goto	l2850
  7719  0026BA                     l2848:
  7720  0026BA  90D8               	bcf	status,0,c
  7721  0026BC  3606               	rlcf	___lwmod@divisor,f,c
  7722  0026BE  3607               	rlcf	___lwmod@divisor+1,f,c
  7723  0026C0  2A08               	incf	___lwmod@counter,f,c
  7724  0026C2                     l2850:
  7725  0026C2  AE07               	btfss	___lwmod@divisor+1,7,c
  7726  0026C4  D7FA               	goto	l2848
  7727  0026C6                     l2852:
  7728  0026C6  5006               	movf	___lwmod@divisor,w,c
  7729  0026C8  5C04               	subwf	___lwmod@dividend,w,c
  7730  0026CA  5007               	movf	___lwmod@divisor+1,w,c
  7731  0026CC  5805               	subwfb	___lwmod@dividend+1,w,c
  7732  0026CE  E304               	bnc	l2856
  7733  0026D0  5006               	movf	___lwmod@divisor,w,c
  7734  0026D2  5E04               	subwf	___lwmod@dividend,f,c
  7735  0026D4  5007               	movf	___lwmod@divisor+1,w,c
  7736  0026D6  5A05               	subwfb	___lwmod@dividend+1,f,c
  7737  0026D8                     l2856:
  7738  0026D8  90D8               	bcf	status,0,c
  7739  0026DA  3207               	rrcf	___lwmod@divisor+1,f,c
  7740  0026DC  3206               	rrcf	___lwmod@divisor,f,c
  7741  0026DE  2E08               	decfsz	___lwmod@counter,f,c
  7742  0026E0  D7F2               	goto	l2852
  7743  0026E2                     l1123:
  7744  0026E2  C004  F004         	movff	___lwmod@dividend,?___lwmod
  7745  0026E6  C005  F005         	movff	___lwmod@dividend+1,?___lwmod+1
  7746  0026EA  0012               	return		;funcret
  7747  0026EC                     __end_of___lwmod:
  7748                           	opt stack 0
  7749                           tblptru	equ	0xFF8
  7750                           tblptrh	equ	0xFF7
  7751                           tblptrl	equ	0xFF6
  7752                           tablat	equ	0xFF5
  7753                           prodl	equ	0xFF3
  7754                           intcon	equ	0xFF2
  7755                           intcon2	equ	0xFF1
  7756                           postinc0	equ	0xFEE
  7757                           wreg	equ	0xFE8
  7758                           postdec1	equ	0xFE5
  7759                           fsr1l	equ	0xFE1
  7760                           indf2	equ	0xFDF
  7761                           postinc2	equ	0xFDE
  7762                           postdec2	equ	0xFDD
  7763                           fsr2h	equ	0xFDA
  7764                           fsr2l	equ	0xFD9
  7765                           status	equ	0xFD8
  7766                           
  7767 ;; *************** function ___lwdiv *****************
  7768 ;; Defined at:
  7769 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  7770 ;; Parameters:    Size  Location     Type
  7771 ;;  dividend        2    3[COMRAM] unsigned int 
  7772 ;;  divisor         2    5[COMRAM] unsigned int 
  7773 ;; Auto vars:     Size  Location     Type
  7774 ;;  quotient        2    7[COMRAM] unsigned int 
  7775 ;;  counter         1    9[COMRAM] unsigned char 
  7776 ;; Return value:  Size  Location     Type
  7777 ;;                  2    3[COMRAM] unsigned int 
  7778 ;; Registers used:
  7779 ;;		wreg, status,2, status,0
  7780 ;; Tracked objects:
  7781 ;;		On entry : 0/0
  7782 ;;		On exit  : 0/0
  7783 ;;		Unchanged: 0/0
  7784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7785 ;;      Params:         4       0       0       0       0       0       0       0       0
  7786 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7787 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7788 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7789 ;;Total ram usage:        7 bytes
  7790 ;; Hardware stack levels used:    1
  7791 ;; Hardware stack levels required when called:    1
  7792 ;; This function calls:
  7793 ;;		Nothing
  7794 ;; This function is called by:
  7795 ;;		_format_number
  7796 ;;		_print_reading
  7797 ;; This function uses a non-reentrant model
  7798 ;;
  7799                           
  7800                           	psect	text43
  7801  002590                     __ptext43:
  7802                           	opt stack 0
  7803  002590                     ___lwdiv:
  7804                           	opt stack 26
  7805                           
  7806                           ;incstack = 0
  7807  002590  6A08               	clrf	___lwdiv@quotient,c
  7808  002592  6A09               	clrf	___lwdiv@quotient+1,c
  7809  002594  5006               	movf	___lwdiv@divisor,w,c
  7810  002596  1007               	iorwf	___lwdiv@divisor+1,w,c
  7811  002598  E01B               	bz	l1113
  7812  00259A  0E01               	movlw	1
  7813  00259C  6E0A               	movwf	___lwdiv@counter,c
  7814  00259E  D004               	goto	l2830
  7815  0025A0                     l2828:
  7816  0025A0  90D8               	bcf	status,0,c
  7817  0025A2  3606               	rlcf	___lwdiv@divisor,f,c
  7818  0025A4  3607               	rlcf	___lwdiv@divisor+1,f,c
  7819  0025A6  2A0A               	incf	___lwdiv@counter,f,c
  7820  0025A8                     l2830:
  7821  0025A8  AE07               	btfss	___lwdiv@divisor+1,7,c
  7822  0025AA  D7FA               	goto	l2828
  7823  0025AC                     l2832:
  7824  0025AC  90D8               	bcf	status,0,c
  7825  0025AE  3608               	rlcf	___lwdiv@quotient,f,c
  7826  0025B0  3609               	rlcf	___lwdiv@quotient+1,f,c
  7827  0025B2  5006               	movf	___lwdiv@divisor,w,c
  7828  0025B4  5C04               	subwf	___lwdiv@dividend,w,c
  7829  0025B6  5007               	movf	___lwdiv@divisor+1,w,c
  7830  0025B8  5805               	subwfb	___lwdiv@dividend+1,w,c
  7831  0025BA  E305               	bnc	l2840
  7832  0025BC  5006               	movf	___lwdiv@divisor,w,c
  7833  0025BE  5E04               	subwf	___lwdiv@dividend,f,c
  7834  0025C0  5007               	movf	___lwdiv@divisor+1,w,c
  7835  0025C2  5A05               	subwfb	___lwdiv@dividend+1,f,c
  7836  0025C4  8008               	bsf	___lwdiv@quotient,0,c
  7837  0025C6                     l2840:
  7838  0025C6  90D8               	bcf	status,0,c
  7839  0025C8  3207               	rrcf	___lwdiv@divisor+1,f,c
  7840  0025CA  3206               	rrcf	___lwdiv@divisor,f,c
  7841  0025CC  2E0A               	decfsz	___lwdiv@counter,f,c
  7842  0025CE  D7EE               	goto	l2832
  7843  0025D0                     l1113:
  7844  0025D0  C008  F004         	movff	___lwdiv@quotient,?___lwdiv
  7845  0025D4  C009  F005         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7846  0025D8  0012               	return		;funcret
  7847  0025DA                     __end_of___lwdiv:
  7848                           	opt stack 0
  7849                           tblptru	equ	0xFF8
  7850                           tblptrh	equ	0xFF7
  7851                           tblptrl	equ	0xFF6
  7852                           tablat	equ	0xFF5
  7853                           prodl	equ	0xFF3
  7854                           intcon	equ	0xFF2
  7855                           intcon2	equ	0xFF1
  7856                           postinc0	equ	0xFEE
  7857                           wreg	equ	0xFE8
  7858                           postdec1	equ	0xFE5
  7859                           fsr1l	equ	0xFE1
  7860                           indf2	equ	0xFDF
  7861                           postinc2	equ	0xFDE
  7862                           postdec2	equ	0xFDD
  7863                           fsr2h	equ	0xFDA
  7864                           fsr2l	equ	0xFD9
  7865                           status	equ	0xFD8
  7866                           
  7867 ;; *************** function _lcd_clear *****************
  7868 ;; Defined at:
  7869 ;;		line 309 in file "../../../lib/lcd44780.c"
  7870 ;; Parameters:    Size  Location     Type
  7871 ;;		None
  7872 ;; Auto vars:     Size  Location     Type
  7873 ;;		None
  7874 ;; Return value:  Size  Location     Type
  7875 ;;		None               void
  7876 ;; Registers used:
  7877 ;;		wreg, status,2, status,0, cstack
  7878 ;; Tracked objects:
  7879 ;;		On entry : 0/0
  7880 ;;		On exit  : 0/0
  7881 ;;		Unchanged: 0/0
  7882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7883 ;;      Params:         0       0       0       0       0       0       0       0       0
  7884 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7885 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7886 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7887 ;;Total ram usage:        1 bytes
  7888 ;; Hardware stack levels used:    1
  7889 ;; Hardware stack levels required when called:    4
  7890 ;; This function calls:
  7891 ;;		_lcd_command
  7892 ;; This function is called by:
  7893 ;;		_calibrate
  7894 ;;		_main
  7895 ;; This function uses a non-reentrant model
  7896 ;;
  7897                           
  7898                           	psect	text44
  7899  0029A6                     __ptext44:
  7900                           	opt stack 0
  7901  0029A6                     _lcd_clear:
  7902                           	opt stack 26
  7903                           
  7904                           ;lcd44780.c: 310: lcd_command(0x01);
  7905                           
  7906                           ;incstack = 0
  7907  0029A6  0E01               	movlw	1
  7908  0029A8  ECE7  F014         	call	_lcd_command
  7909                           
  7910                           ;lcd44780.c: 311: _delay((unsigned long)((2)*(20000000/4000.0)));
  7911  0029AC  0E0D               	movlw	13
  7912  0029AE  6E08               	movwf	??_lcd_clear& (0+255),c
  7913  0029B0  0EFC               	movlw	252
  7914  0029B2                     u3577:
  7915  0029B2  2EE8               	decfsz	wreg,f,c
  7916  0029B4  D7FE               	goto	u3577
  7917  0029B6  2E08               	decfsz	??_lcd_clear& (0+255),f,c
  7918  0029B8  D7FC               	goto	u3577
  7919  0029BA  0012               	return		;funcret
  7920  0029BC                     __end_of_lcd_clear:
  7921                           	opt stack 0
  7922                           tblptru	equ	0xFF8
  7923                           tblptrh	equ	0xFF7
  7924                           tblptrl	equ	0xFF6
  7925                           tablat	equ	0xFF5
  7926                           prodl	equ	0xFF3
  7927                           intcon	equ	0xFF2
  7928                           intcon2	equ	0xFF1
  7929                           postinc0	equ	0xFEE
  7930                           wreg	equ	0xFE8
  7931                           postdec1	equ	0xFE5
  7932                           fsr1l	equ	0xFE1
  7933                           indf2	equ	0xFDF
  7934                           postinc2	equ	0xFDE
  7935                           postdec2	equ	0xFDD
  7936                           fsr2h	equ	0xFDA
  7937                           fsr2l	equ	0xFD9
  7938                           status	equ	0xFD8
  7939                           
  7940 ;; *************** function _lcd_command *****************
  7941 ;; Defined at:
  7942 ;;		line 149 in file "../../../lib/lcd44780.c"
  7943 ;; Parameters:    Size  Location     Type
  7944 ;;  value           1    wreg     unsigned char 
  7945 ;; Auto vars:     Size  Location     Type
  7946 ;;  value           1    6[COMRAM] unsigned char 
  7947 ;; Return value:  Size  Location     Type
  7948 ;;		None               void
  7949 ;; Registers used:
  7950 ;;		wreg, status,2, status,0, cstack
  7951 ;; Tracked objects:
  7952 ;;		On entry : 0/0
  7953 ;;		On exit  : 0/0
  7954 ;;		Unchanged: 0/0
  7955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7956 ;;      Params:         0       0       0       0       0       0       0       0       0
  7957 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7958 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7959 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7960 ;;Total ram usage:        1 bytes
  7961 ;; Hardware stack levels used:    1
  7962 ;; Hardware stack levels required when called:    3
  7963 ;; This function calls:
  7964 ;;		_lcd_send
  7965 ;; This function is called by:
  7966 ;;		_lcd_gotoxy
  7967 ;;		_lcd_clear
  7968 ;;		_lcd_begin
  7969 ;; This function uses a non-reentrant model
  7970 ;;
  7971                           
  7972                           	psect	text45
  7973  0029CE                     __ptext45:
  7974                           	opt stack 0
  7975  0029CE                     _lcd_command:
  7976                           	opt stack 24
  7977                           
  7978                           ;incstack = 0
  7979                           ;lcd_command@value stored from wreg
  7980  0029CE  6E07               	movwf	lcd_command@value,c
  7981                           
  7982                           ;lcd44780.c: 150: lcd_send(value, 0);
  7983  0029D0  0E00               	movlw	0
  7984  0029D2  6E05               	movwf	lcd_send@mode,c
  7985  0029D4  5007               	movf	lcd_command@value,w,c
  7986  0029D6  EFC6  F014         	goto	_lcd_send
  7987  0029DA                     __end_of_lcd_command:
  7988                           	opt stack 0
  7989                           tblptru	equ	0xFF8
  7990                           tblptrh	equ	0xFF7
  7991                           tblptrl	equ	0xFF6
  7992                           tablat	equ	0xFF5
  7993                           prodl	equ	0xFF3
  7994                           intcon	equ	0xFF2
  7995                           intcon2	equ	0xFF1
  7996                           postinc0	equ	0xFEE
  7997                           wreg	equ	0xFE8
  7998                           postdec1	equ	0xFE5
  7999                           fsr1l	equ	0xFE1
  8000                           indf2	equ	0xFDF
  8001                           postinc2	equ	0xFDE
  8002                           postdec2	equ	0xFDD
  8003                           fsr2h	equ	0xFDA
  8004                           fsr2l	equ	0xFD9
  8005                           status	equ	0xFD8
  8006                           
  8007 ;; *************** function _lcd_send *****************
  8008 ;; Defined at:
  8009 ;;		line 125 in file "../../../lib/lcd44780.c"
  8010 ;; Parameters:    Size  Location     Type
  8011 ;;  value           1    wreg     unsigned char 
  8012 ;;  mode            1    4[COMRAM] unsigned char 
  8013 ;; Auto vars:     Size  Location     Type
  8014 ;;  value           1    5[COMRAM] unsigned char 
  8015 ;; Return value:  Size  Location     Type
  8016 ;;		None               void
  8017 ;; Registers used:
  8018 ;;		wreg, status,2, status,0, cstack
  8019 ;; Tracked objects:
  8020 ;;		On entry : 0/0
  8021 ;;		On exit  : 0/0
  8022 ;;		Unchanged: 0/0
  8023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8024 ;;      Params:         1       0       0       0       0       0       0       0       0
  8025 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8026 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8027 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8028 ;;Total ram usage:        2 bytes
  8029 ;; Hardware stack levels used:    1
  8030 ;; Hardware stack levels required when called:    2
  8031 ;; This function calls:
  8032 ;;		_lcd_write4bits
  8033 ;; This function is called by:
  8034 ;;		_lcd_command
  8035 ;;		_lcd_puts
  8036 ;;		_calibrate
  8037 ;;		_output_putch
  8038 ;; This function uses a non-reentrant model
  8039 ;;
  8040                           
  8041                           	psect	text46
  8042  00298C                     __ptext46:
  8043                           	opt stack 0
  8044  00298C                     _lcd_send:
  8045                           	opt stack 25
  8046                           
  8047                           ;incstack = 0
  8048                           ;lcd_send@value stored from wreg
  8049  00298C  6E06               	movwf	lcd_send@value,c
  8050                           
  8051                           ;lcd44780.c: 126: if(mode) {
  8052  00298E  5005               	movf	lcd_send@mode,w,c
  8053  002990  E002               	bz	l2668
  8054                           
  8055                           ;lcd44780.c: 127: LATB |= 0b0100;
  8056  002992  848A               	bsf	3978,2,c	;volatile
  8057                           
  8058                           ;lcd44780.c: 128: } else {
  8059  002994  D001               	goto	l2670
  8060  002996                     l2668:
  8061                           
  8062                           ;lcd44780.c: 129: LATB &= ~0b0100;
  8063  002996  948A               	bcf	3978,2,c	;volatile
  8064  002998                     l2670:
  8065                           
  8066                           ;lcd44780.c: 130: }
  8067                           ;lcd44780.c: 137: {
  8068                           ;lcd44780.c: 138: lcd_write4bits(value >> 4);
  8069  002998  3806               	swapf	lcd_send@value,w,c
  8070  00299A  0B0F               	andlw	15
  8071  00299C  EC86  F014         	call	_lcd_write4bits
  8072                           
  8073                           ;lcd44780.c: 139: lcd_write4bits(value);
  8074  0029A0  5006               	movf	lcd_send@value,w,c
  8075  0029A2  EF86  F014         	goto	_lcd_write4bits
  8076  0029A6                     __end_of_lcd_send:
  8077                           	opt stack 0
  8078                           tblptru	equ	0xFF8
  8079                           tblptrh	equ	0xFF7
  8080                           tblptrl	equ	0xFF6
  8081                           tablat	equ	0xFF5
  8082                           prodl	equ	0xFF3
  8083                           intcon	equ	0xFF2
  8084                           intcon2	equ	0xFF1
  8085                           postinc0	equ	0xFEE
  8086                           wreg	equ	0xFE8
  8087                           postdec1	equ	0xFE5
  8088                           fsr1l	equ	0xFE1
  8089                           indf2	equ	0xFDF
  8090                           postinc2	equ	0xFDE
  8091                           postdec2	equ	0xFDD
  8092                           fsr2h	equ	0xFDA
  8093                           fsr2l	equ	0xFD9
  8094                           status	equ	0xFD8
  8095                           
  8096 ;; *************** function _lcd_write4bits *****************
  8097 ;; Defined at:
  8098 ;;		line 56 in file "../../../lib/lcd44780.c"
  8099 ;; Parameters:    Size  Location     Type
  8100 ;;  value           1    wreg     unsigned char 
  8101 ;; Auto vars:     Size  Location     Type
  8102 ;;  value           1    3[COMRAM] unsigned char 
  8103 ;; Return value:  Size  Location     Type
  8104 ;;		None               void
  8105 ;; Registers used:
  8106 ;;		wreg, status,2, status,0
  8107 ;; Tracked objects:
  8108 ;;		On entry : 0/0
  8109 ;;		On exit  : 0/0
  8110 ;;		Unchanged: 0/0
  8111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8112 ;;      Params:         0       0       0       0       0       0       0       0       0
  8113 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8114 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8115 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8116 ;;Total ram usage:        1 bytes
  8117 ;; Hardware stack levels used:    1
  8118 ;; Hardware stack levels required when called:    1
  8119 ;; This function calls:
  8120 ;;		Nothing
  8121 ;; This function is called by:
  8122 ;;		_lcd_send
  8123 ;;		_lcd_begin
  8124 ;; This function uses a non-reentrant model
  8125 ;;
  8126                           
  8127                           	psect	text47
  8128  00290C                     __ptext47:
  8129                           	opt stack 0
  8130  00290C                     _lcd_write4bits:
  8131                           	opt stack 25
  8132                           
  8133                           ;incstack = 0
  8134                           ;lcd_write4bits@value stored from wreg
  8135  00290C  6E04               	movwf	lcd_write4bits@value,c
  8136                           
  8137                           ;lcd44780.c: 61: LATB &= 0b00001111;
  8138  00290E  0E0F               	movlw	15
  8139  002910  168A               	andwf	3978,f,c	;volatile
  8140                           
  8141                           ;lcd44780.c: 62: LATB |= value << 4;
  8142  002912  3804               	swapf	lcd_write4bits@value,w,c
  8143  002914  0BF0               	andlw	240
  8144  002916  128A               	iorwf	3978,f,c	;volatile
  8145                           
  8146                           ;lcd44780.c: 77: LATB |= 0b1000; _delay((unsigned long)((4)*(20000000/4000000.0))); LATB
      +                           &= ~0b1000; _delay((unsigned long)((100)*(20000000/4000000.0)));;
  8147  002918  868A               	bsf	3978,3,c	;volatile
  8148  00291A  0E06               	movlw	6
  8149  00291C                     u3587:
  8150  00291C  2EE8               	decfsz	wreg,f,c
  8151  00291E  D7FE               	goto	u3587
  8152  002920  D000               	nop2		;nop
  8153  002922  968A               	bcf	3978,3,c	;volatile
  8154  002924  0EA6               	movlw	166
  8155  002926                     u3597:
  8156  002926  2EE8               	decfsz	wreg,f,c
  8157  002928  D7FE               	goto	u3597
  8158  00292A  D000               	nop2		;nop
  8159  00292C  0012               	return		;funcret
  8160  00292E                     __end_of_lcd_write4bits:
  8161                           	opt stack 0
  8162                           tblptru	equ	0xFF8
  8163                           tblptrh	equ	0xFF7
  8164                           tblptrl	equ	0xFF6
  8165                           tablat	equ	0xFF5
  8166                           prodl	equ	0xFF3
  8167                           intcon	equ	0xFF2
  8168                           intcon2	equ	0xFF1
  8169                           postinc0	equ	0xFEE
  8170                           wreg	equ	0xFE8
  8171                           postdec1	equ	0xFE5
  8172                           fsr1l	equ	0xFE1
  8173                           indf2	equ	0xFDF
  8174                           postinc2	equ	0xFDE
  8175                           postdec2	equ	0xFDD
  8176                           fsr2h	equ	0xFDA
  8177                           fsr2l	equ	0xFD9
  8178                           status	equ	0xFD8
  8179                           
  8180 ;; *************** function _delay10ms *****************
  8181 ;; Defined at:
  8182 ;;		line 54 in file "../../../LC-meter.c"
  8183 ;; Parameters:    Size  Location     Type
  8184 ;;  period_10ms     1    wreg     unsigned char 
  8185 ;; Auto vars:     Size  Location     Type
  8186 ;;  period_10ms     1    0[COMRAM] unsigned char 
  8187 ;; Return value:  Size  Location     Type
  8188 ;;		None               void
  8189 ;; Registers used:
  8190 ;;		wreg
  8191 ;; Tracked objects:
  8192 ;;		On entry : 0/0
  8193 ;;		On exit  : 0/0
  8194 ;;		Unchanged: 0/0
  8195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8196 ;;      Params:         0       0       0       0       0       0       0       0       0
  8197 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8198 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8199 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8200 ;;Total ram usage:        0 bytes
  8201 ;; Hardware stack levels used:    1
  8202 ;; Hardware stack levels required when called:    1
  8203 ;; This function calls:
  8204 ;;		Nothing
  8205 ;; This function is called by:
  8206 ;;		_calibrate
  8207 ;;		_main
  8208 ;; This function uses a non-reentrant model
  8209 ;;
  8210                           
  8211                           	psect	text48
  8212  0029DE                     __ptext48:
  8213                           	opt stack 0
  8214  0029DE                     _delay10ms:
  8215                           	opt stack 29
  8216                           
  8217                           ;incstack = 0
  8218  0029DE  0012               	return		;funcret
  8219  0029E0                     __end_of_delay10ms:
  8220                           	opt stack 0
  8221                           tblptru	equ	0xFF8
  8222                           tblptrh	equ	0xFF7
  8223                           tblptrl	equ	0xFF6
  8224                           tablat	equ	0xFF5
  8225                           prodl	equ	0xFF3
  8226                           intcon	equ	0xFF2
  8227                           intcon2	equ	0xFF1
  8228                           postinc0	equ	0xFEE
  8229                           wreg	equ	0xFE8
  8230                           postdec1	equ	0xFE5
  8231                           fsr1l	equ	0xFE1
  8232                           indf2	equ	0xFDF
  8233                           postinc2	equ	0xFDE
  8234                           postdec2	equ	0xFDD
  8235                           fsr2h	equ	0xFDA
  8236                           fsr2l	equ	0xFD9
  8237                           status	equ	0xFD8
  8238                           
  8239 ;; *************** function ___lwtofl *****************
  8240 ;; Defined at:
  8241 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtofl.c"
  8242 ;; Parameters:    Size  Location     Type
  8243 ;;  c               2   58[COMRAM] unsigned int 
  8244 ;; Auto vars:     Size  Location     Type
  8245 ;;		None
  8246 ;; Return value:  Size  Location     Type
  8247 ;;                  4   58[COMRAM] unsigned int 
  8248 ;; Registers used:
  8249 ;;		wreg, status,2, status,0, cstack
  8250 ;; Tracked objects:
  8251 ;;		On entry : 0/0
  8252 ;;		On exit  : 0/0
  8253 ;;		Unchanged: 0/0
  8254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8255 ;;      Params:         4       0       0       0       0       0       0       0       0
  8256 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8257 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8258 ;;      Totals:         4       0       0       0       0       0       0       0       0
  8259 ;;Total ram usage:        4 bytes
  8260 ;; Hardware stack levels used:    1
  8261 ;; Hardware stack levels required when called:    2
  8262 ;; This function calls:
  8263 ;;		___flpack
  8264 ;; This function is called by:
  8265 ;;		_calibrate
  8266 ;;		_measure_capacitance
  8267 ;;		_measure_inductance
  8268 ;; This function uses a non-reentrant model
  8269 ;;
  8270                           
  8271                           	psect	text49
  8272  00286C                     __ptext49:
  8273                           	opt stack 0
  8274  00286C                     ___lwtofl:
  8275                           	opt stack 27
  8276                           
  8277                           ;incstack = 0
  8278  00286C  C03B  F004         	movff	___lwtofl@c,___flpack@arg
  8279  002870  C03C  F005         	movff	___lwtofl@c+1,___flpack@arg+1
  8280  002874  6A06               	clrf	___flpack@arg+2,c
  8281  002876  6A07               	clrf	___flpack@arg+3,c
  8282  002878  0E96               	movlw	150
  8283  00287A  6E08               	movwf	___flpack@exp,c
  8284  00287C  0E00               	movlw	0
  8285  00287E  6E09               	movwf	___flpack@sign,c
  8286  002880  EC2B  F00F         	call	___flpack	;wreg free
  8287  002884  C004  F03B         	movff	?___flpack,?___lwtofl
  8288  002888  C005  F03C         	movff	?___flpack+1,?___lwtofl+1
  8289  00288C  C006  F03D         	movff	?___flpack+2,?___lwtofl+2
  8290  002890  C007  F03E         	movff	?___flpack+3,?___lwtofl+3
  8291  002894  0012               	return		;funcret
  8292  002896                     __end_of___lwtofl:
  8293                           	opt stack 0
  8294                           tblptru	equ	0xFF8
  8295                           tblptrh	equ	0xFF7
  8296                           tblptrl	equ	0xFF6
  8297                           tablat	equ	0xFF5
  8298                           prodl	equ	0xFF3
  8299                           intcon	equ	0xFF2
  8300                           intcon2	equ	0xFF1
  8301                           postinc0	equ	0xFEE
  8302                           wreg	equ	0xFE8
  8303                           postdec1	equ	0xFE5
  8304                           fsr1l	equ	0xFE1
  8305                           indf2	equ	0xFDF
  8306                           postinc2	equ	0xFDE
  8307                           postdec2	equ	0xFDD
  8308                           fsr2h	equ	0xFDA
  8309                           fsr2l	equ	0xFD9
  8310                           status	equ	0xFD8
  8311                           
  8312 ;; *************** function ___flpack *****************
  8313 ;; Defined at:
  8314 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\double.c"
  8315 ;; Parameters:    Size  Location     Type
  8316 ;;  arg             4    3[COMRAM] unsigned long 
  8317 ;;  exp             1    7[COMRAM] unsigned char 
  8318 ;;  sign            1    8[COMRAM] unsigned char 
  8319 ;; Auto vars:     Size  Location     Type
  8320 ;;		None
  8321 ;; Return value:  Size  Location     Type
  8322 ;;                  4    3[COMRAM] unsigned char 
  8323 ;; Registers used:
  8324 ;;		wreg, status,2, status,0
  8325 ;; Tracked objects:
  8326 ;;		On entry : 0/0
  8327 ;;		On exit  : 0/0
  8328 ;;		Unchanged: 0/0
  8329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8330 ;;      Params:         6       0       0       0       0       0       0       0       0
  8331 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8332 ;;      Temps:          4       0       0       0       0       0       0       0       0
  8333 ;;      Totals:        10       0       0       0       0       0       0       0       0
  8334 ;;Total ram usage:       10 bytes
  8335 ;; Hardware stack levels used:    1
  8336 ;; Hardware stack levels required when called:    1
  8337 ;; This function calls:
  8338 ;;		Nothing
  8339 ;; This function is called by:
  8340 ;;		___altofl
  8341 ;;		___awtofl
  8342 ;;		___fladd
  8343 ;;		___fldiv
  8344 ;;		___flmul
  8345 ;;		___lltofl
  8346 ;;		___lwtofl
  8347 ;; This function uses a non-reentrant model
  8348 ;;
  8349                           
  8350                           	psect	text50
  8351  001E56                     __ptext50:
  8352                           	opt stack 0
  8353  001E56                     ___flpack:
  8354                           	opt stack 27
  8355                           
  8356                           ;incstack = 0
  8357  001E56  5008               	movf	___flpack@exp,w,c
  8358  001E58  E005               	bz	l777
  8359  001E5A  5004               	movf	___flpack@arg,w,c
  8360  001E5C  1005               	iorwf	___flpack@arg+1,w,c
  8361  001E5E  1006               	iorwf	___flpack@arg+2,w,c
  8362  001E60  1007               	iorwf	___flpack@arg+3,w,c
  8363  001E62  E107               	bnz	l3566
  8364  001E64                     l777:
  8365  001E64  6A04               	clrf	?___flpack,c
  8366  001E66  6A05               	clrf	?___flpack+1,c
  8367  001E68  6A06               	clrf	?___flpack+2,c
  8368  001E6A  6A07               	clrf	?___flpack+3,c
  8369  001E6C  D04E               	goto	l778
  8370  001E6E                     l3564:
  8371  001E6E  2A08               	incf	___flpack@exp,f,c
  8372  001E70  D84D               	call	PL38	;call to abstracted procedure
  8373  001E72                     l3566:
  8374  001E72  6A0A               	clrf	??___flpack& (0+255),c
  8375  001E74  6A0B               	clrf	(??___flpack+1)& (0+255),c
  8376  001E76  6A0C               	clrf	(??___flpack+2)& (0+255),c
  8377  001E78  0EFE               	movlw	254
  8378  001E7A  1407               	andwf	___flpack@arg+3,w,c
  8379  001E7C  6E0D               	movwf	(??___flpack+3)& (0+255),c
  8380  001E7E  500A               	movf	??___flpack,w,c
  8381  001E80  100B               	iorwf	??___flpack+1,w,c
  8382  001E82  100C               	iorwf	??___flpack+2,w,c
  8383  001E84  100D               	iorwf	??___flpack+3,w,c
  8384  001E86  E008               	bz	l782
  8385  001E88  D7F2               	goto	l3564
  8386  001E8A                     l3568:
  8387  001E8A  2A08               	incf	___flpack@exp,f,c
  8388  001E8C  2A04               	incf	___flpack@arg,f,c
  8389  001E8E  0E00               	movlw	0
  8390  001E90  2205               	addwfc	___flpack@arg+1,f,c
  8391  001E92  2206               	addwfc	___flpack@arg+2,f,c
  8392  001E94  2207               	addwfc	___flpack@arg+3,f,c
  8393  001E96  D83A               	call	PL38	;call to abstracted procedure
  8394  001E98                     l782:
  8395  001E98  6A0A               	clrf	??___flpack& (0+255),c
  8396  001E9A  6A0B               	clrf	(??___flpack+1)& (0+255),c
  8397  001E9C  6A0C               	clrf	(??___flpack+2)& (0+255),c
  8398  001E9E  5007               	movf	___flpack@arg+3,w,c
  8399  001EA0  6E0D               	movwf	(??___flpack+3)& (0+255),c
  8400  001EA2  500A               	movf	??___flpack,w,c
  8401  001EA4  100B               	iorwf	??___flpack+1,w,c
  8402  001EA6  100C               	iorwf	??___flpack+2,w,c
  8403  001EA8  100D               	iorwf	??___flpack+3,w,c
  8404  001EAA  E007               	bz	l3576
  8405  001EAC  D7EE               	goto	l3568
  8406  001EAE                     l3574:
  8407  001EAE  0608               	decf	___flpack@exp,f,c
  8408  001EB0  90D8               	bcf	status,0,c
  8409  001EB2  3604               	rlcf	___flpack@arg,f,c
  8410  001EB4  3605               	rlcf	___flpack@arg+1,f,c
  8411  001EB6  3606               	rlcf	___flpack@arg+2,f,c
  8412  001EB8  3607               	rlcf	___flpack@arg+3,f,c
  8413  001EBA                     l3576:
  8414  001EBA  BE06               	btfsc	___flpack@arg+2,7,c
  8415  001EBC  D003               	goto	l789
  8416  001EBE  0E02               	movlw	2
  8417  001EC0  6008               	cpfslt	___flpack@exp,c
  8418  001EC2  D7F5               	goto	l3574
  8419  001EC4                     l789:
  8420  001EC4  B008               	btfsc	___flpack@exp,0,c
  8421  001EC6  D002               	goto	l790
  8422  001EC8  0E7F               	movlw	127
  8423  001ECA  1606               	andwf	___flpack@arg+2,f,c
  8424  001ECC                     l790:
  8425  001ECC  90D8               	bcf	status,0,c
  8426  001ECE  3208               	rrcf	___flpack@exp,f,c
  8427  001ED0  C008  F00A         	movff	___flpack@exp,??___flpack
  8428  001ED4  6A0B               	clrf	(??___flpack+1)& (0+255),c
  8429  001ED6  6A0C               	clrf	(??___flpack+2)& (0+255),c
  8430  001ED8  6A0D               	clrf	(??___flpack+3)& (0+255),c
  8431  001EDA  C00A  F00D         	movff	??___flpack,??___flpack+3
  8432  001EDE  6A0C               	clrf	??___flpack+2,c
  8433  001EE0  6A0B               	clrf	??___flpack+1,c
  8434  001EE2  6A0A               	clrf	??___flpack,c
  8435  001EE4  500A               	movf	??___flpack,w,c
  8436  001EE6  1204               	iorwf	___flpack@arg,f,c
  8437  001EE8  500B               	movf	??___flpack+1,w,c
  8438  001EEA  1205               	iorwf	___flpack@arg+1,f,c
  8439  001EEC  500C               	movf	??___flpack+2,w,c
  8440  001EEE  1206               	iorwf	___flpack@arg+2,f,c
  8441  001EF0  500D               	movf	??___flpack+3,w,c
  8442  001EF2  1207               	iorwf	___flpack@arg+3,f,c
  8443  001EF4  5009               	movf	___flpack@sign,w,c
  8444  001EF6  A4D8               	btfss	status,2,c
  8445  001EF8  8E07               	bsf	___flpack@arg+3,7,c
  8446  001EFA  C004  F004         	movff	___flpack@arg,?___flpack
  8447  001EFE  C005  F005         	movff	___flpack@arg+1,?___flpack+1
  8448  001F02  C006  F006         	movff	___flpack@arg+2,?___flpack+2
  8449  001F06  C007  F007         	movff	___flpack@arg+3,?___flpack+3
  8450  001F0A                     l778:
  8451  001F0A  0012               	return		;funcret
  8452  001F0C                     __end_of___flpack:
  8453                           	opt stack 0
  8454  001F0C                     PL38:
  8455                           	opt stack 27
  8456  001F0C  90D8               	bcf	status,0,c
  8457  001F0E  3207               	rrcf	___flpack@arg+3,f,c
  8458  001F10  3206               	rrcf	___flpack@arg+2,f,c
  8459  001F12  3205               	rrcf	___flpack@arg+1,f,c
  8460  001F14  3204               	rrcf	___flpack@arg,f,c
  8461  001F16  0012               	return	
  8462  001F18                     __end_ofPL38:
  8463                           	opt stack 0
  8464                           tblptru	equ	0xFF8
  8465                           tblptrh	equ	0xFF7
  8466                           tblptrl	equ	0xFF6
  8467                           tablat	equ	0xFF5
  8468                           prodl	equ	0xFF3
  8469                           intcon	equ	0xFF2
  8470                           intcon2	equ	0xFF1
  8471                           postinc0	equ	0xFEE
  8472                           wreg	equ	0xFE8
  8473                           postdec1	equ	0xFE5
  8474                           fsr1l	equ	0xFE1
  8475                           indf2	equ	0xFDF
  8476                           postinc2	equ	0xFDE
  8477                           postdec2	equ	0xFDD
  8478                           fsr2h	equ	0xFDA
  8479                           fsr2l	equ	0xFD9
  8480                           status	equ	0xFD8
  8481                           
  8482 ;; *************** function _global_int *****************
  8483 ;; Defined at:
  8484 ;;		line 76 in file "../../../LC-meter.c"
  8485 ;; Parameters:    Size  Location     Type
  8486 ;;		None
  8487 ;; Auto vars:     Size  Location     Type
  8488 ;;		None
  8489 ;; Return value:  Size  Location     Type
  8490 ;;		None               void
  8491 ;; Registers used:
  8492 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8493 ;; Tracked objects:
  8494 ;;		On entry : 0/0
  8495 ;;		On exit  : 0/0
  8496 ;;		Unchanged: 0/0
  8497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8498 ;;      Params:         0       0       0       0       0       0       0       0       0
  8499 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8500 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8501 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8502 ;;Total ram usage:        3 bytes
  8503 ;; Hardware stack levels used:    1
  8504 ;; This function calls:
  8505 ;;		Nothing
  8506 ;; This function is called by:
  8507 ;;		Interrupt level 2
  8508 ;; This function uses a non-reentrant model
  8509 ;;
  8510                           
  8511                           	psect	intcode
  8512  000008                     __pintcode:
  8513                           	opt stack 0
  8514  000008                     _global_int:
  8515                           	opt stack 23
  8516                           
  8517                           ;incstack = 0
  8518  000008  CFD9 F002          	movff	fsr2l,??_global_int+1
  8519  00000C  CFDA F003          	movff	fsr2h,??_global_int+2
  8520  000010  EDC3  F00E         	call	int_func,f	;refresh shadow registers
  8521                           tblptru	equ	0xFF8
  8522                           tblptrh	equ	0xFF7
  8523                           tblptrl	equ	0xFF6
  8524                           tablat	equ	0xFF5
  8525                           prodl	equ	0xFF3
  8526                           intcon	equ	0xFF2
  8527                           intcon2	equ	0xFF1
  8528                           postinc0	equ	0xFEE
  8529                           wreg	equ	0xFE8
  8530                           postdec1	equ	0xFE5
  8531                           fsr1l	equ	0xFE1
  8532                           indf2	equ	0xFDF
  8533                           postinc2	equ	0xFDE
  8534                           postdec2	equ	0xFDD
  8535                           fsr2h	equ	0xFDA
  8536                           fsr2l	equ	0xFD9
  8537                           status	equ	0xFD8
  8538                           
  8539                           	psect	intcode_body
  8540  001D86                     __pintcode_body:
  8541                           	opt stack 23
  8542  001D86                     int_func:
  8543                           	opt stack 23
  8544  001D86  0006               	pop		; remove dummy address from shadow register refresh
  8545                           
  8546                           ;LC-meter.c: 81: if(PIR1 & 0x02) {
  8547  001D88  A29E               	btfss	3998,1,c	;volatile
  8548  001D8A  D03A               	goto	i2l3468
  8549                           
  8550                           ;LC-meter.c: 83: bres += 256;
  8551  001D8C  0100               	movlb	0	; () banked
  8552  001D8E  2BEE               	incf	(_bres+1)& (0+255),f,b	;volatile
  8553                           
  8554                           ;LC-meter.c: 85: if(bres >= 5000) {
  8555  001D90  0E88               	movlw	136
  8556  001D92  5DED               	subwf	_bres& (0+255),w,b	;volatile
  8557  001D94  0E13               	movlw	19
  8558  001D96  59EE               	subwfb	(_bres+1)& (0+255),w,b	;volatile
  8559  001D98  E332               	bnc	i2l3466
  8560                           
  8561                           ; BSR set to: 0
  8562                           ;LC-meter.c: 86: bres -= 5000;
  8563  001D9A  0E88               	movlw	136
  8564  001D9C  5FED               	subwf	_bres& (0+255),f,b	;volatile
  8565  001D9E  0E13               	movlw	19
  8566  001DA0  5BEE               	subwfb	(_bres+1)& (0+255),f,b	;volatile
  8567                           
  8568                           ; BSR set to: 0
  8569                           ;LC-meter.c: 87: msecpart++;
  8570  001DA2  4BEF               	infsnz	_msecpart& (0+255),f,b	;volatile
  8571  001DA4  2BF0               	incf	(_msecpart+1)& (0+255),f,b	;volatile
  8572                           
  8573                           ; BSR set to: 0
  8574                           ;LC-meter.c: 88: msecs++;
  8575  001DA6  2BC0               	incf	_msecs& (0+255),f,b	;volatile
  8576  001DA8  0E00               	movlw	0
  8577  001DAA  23C1               	addwfc	(_msecs+1)& (0+255),f,b	;volatile
  8578  001DAC  23C2               	addwfc	(_msecs+2)& (0+255),f,b	;volatile
  8579  001DAE  23C3               	addwfc	(_msecs+3)& (0+255),f,b	;volatile
  8580                           
  8581                           ;LC-meter.c: 90: LATC &= ~0b00000010; LATC |= (!!((blink > 200))) << 1;;
  8582  001DB0  928B               	bcf	3979,1,c	;volatile
  8583                           
  8584                           ; BSR set to: 0
  8585  001DB2  51CD               	movf	(_blink+1)& (0+255),w,b	;volatile
  8586  001DB4  E103               	bnz	i2u253_41
  8587  001DB6  0EC9               	movlw	201
  8588  001DB8  5DCC               	subwf	_blink& (0+255),w,b	;volatile
  8589  001DBA  E303               	bnc	i2u253_40
  8590  001DBC                     i2u253_41:
  8591  001DBC  6A01               	clrf	??_global_int& (0+255),c
  8592  001DBE  2A01               	incf	??_global_int& (0+255),f,c
  8593  001DC0  D001               	goto	i2u254_48
  8594  001DC2                     i2u253_40:
  8595  001DC2  6A01               	clrf	??_global_int& (0+255),c
  8596  001DC4                     i2u254_48:
  8597  001DC4  90D8               	bcf	status,0,c
  8598  001DC6  3401               	rlcf	??_global_int,w,c
  8599  001DC8  128B               	iorwf	3979,f,c	;volatile
  8600                           
  8601                           ;LC-meter.c: 91: if(blink >= 400)
  8602  001DCA  0E90               	movlw	144
  8603  001DCC  0100               	movlb	0	; () banked
  8604  001DCE  5DCC               	subwf	_blink& (0+255),w,b	;volatile
  8605  001DD0  0E01               	movlw	1
  8606  001DD2  59CD               	subwfb	(_blink+1)& (0+255),w,b	;volatile
  8607  001DD4  E304               	bnc	i2l3460
  8608                           
  8609                           ; BSR set to: 0
  8610                           ;LC-meter.c: 92: blink -= 400;
  8611  001DD6  0E90               	movlw	144
  8612  001DD8  5FCC               	subwf	_blink& (0+255),f,b	;volatile
  8613  001DDA  0E01               	movlw	1
  8614  001DDC  5BCD               	subwfb	(_blink+1)& (0+255),f,b	;volatile
  8615  001DDE                     i2l3460:
  8616                           
  8617                           ; BSR set to: 0
  8618                           ;LC-meter.c: 93: ++blink;
  8619  001DDE  4BCC               	infsnz	_blink& (0+255),f,b	;volatile
  8620  001DE0  2BCD               	incf	(_blink+1)& (0+255),f,b	;volatile
  8621                           
  8622                           ; BSR set to: 0
  8623                           ;LC-meter.c: 96: if(msecpart >= 1000) {
  8624  001DE2  0EE8               	movlw	232
  8625  001DE4  5DEF               	subwf	_msecpart& (0+255),w,b	;volatile
  8626  001DE6  0E03               	movlw	3
  8627  001DE8  59F0               	subwfb	(_msecpart+1)& (0+255),w,b	;volatile
  8628  001DEA  E309               	bnc	i2l3466
  8629                           
  8630                           ; BSR set to: 0
  8631                           ;LC-meter.c: 98: seconds++;
  8632  001DEC  2BC4               	incf	_seconds& (0+255),f,b	;volatile
  8633  001DEE  0E00               	movlw	0
  8634  001DF0  23C5               	addwfc	(_seconds+1)& (0+255),f,b	;volatile
  8635  001DF2  23C6               	addwfc	(_seconds+2)& (0+255),f,b	;volatile
  8636  001DF4  23C7               	addwfc	(_seconds+3)& (0+255),f,b	;volatile
  8637                           
  8638                           ;LC-meter.c: 99: msecpart -= 1000;
  8639  001DF6  0EE8               	movlw	232
  8640  001DF8  5FEF               	subwf	_msecpart& (0+255),f,b	;volatile
  8641  001DFA  0E03               	movlw	3
  8642  001DFC  5BF0               	subwfb	(_msecpart+1)& (0+255),f,b	;volatile
  8643  001DFE                     i2l3466:
  8644                           
  8645                           ; BSR set to: 0
  8646                           ;LC-meter.c: 100: }
  8647                           ;LC-meter.c: 101: }
  8648                           ;LC-meter.c: 103: PIR1 &= ~0b10;
  8649  001DFE  929E               	bcf	3998,1,c	;volatile
  8650  001E00                     i2l3468:
  8651                           
  8652                           ;LC-meter.c: 104: }
  8653                           ;LC-meter.c: 106: if(RCIF) { rxfifo[rxiptr] = RCREG; ser_tmp = (rxiptr + 1) & ((uint8_t)
      +                          16 - 1); if(ser_tmp != rxoptr) rxiptr = ser_tmp; }; if(TXIF && TXIE) { TXREG = txfifo[tx
      +                          optr]; ++txoptr; txoptr &= ((uint8_t)16 - 1); if(txoptr == txiptr) { TXIE = 0; }; TXIF =
      +                           0; 
  8654  001E00  AA9E               	btfss	3998,5,c	;volatile
  8655  001E02  D011               	goto	i2l440
  8656  001E04  0E00               	movlw	low _rxfifo
  8657  001E06  0100               	movlb	0	; () banked
  8658  001E08  25D1               	addwf	_rxiptr& (0+255),w,b	;volatile
  8659  001E0A  6ED9               	movwf	fsr2l,c
  8660  001E0C  6ADA               	clrf	fsr2h,c
  8661  001E0E  0E01               	movlw	high _rxfifo
  8662  001E10  22DA               	addwfc	fsr2h,f,c
  8663  001E12  CFAE FFDF          	movff	4014,indf2	;volatile
  8664                           
  8665                           ; BSR set to: 0
  8666  001E16  29D1               	incf	_rxiptr& (0+255),w,b	;volatile
  8667  001E18  0B0F               	andlw	15
  8668  001E1A  6FD3               	movwf	_ser_tmp& (0+255),b
  8669                           
  8670                           ; BSR set to: 0
  8671  001E1C  51D2               	movf	_rxoptr& (0+255),w,b	;volatile
  8672  001E1E  19D3               	xorwf	_ser_tmp& (0+255),w,b
  8673  001E20  A4D8               	btfss	status,2,c
  8674                           
  8675                           ; BSR set to: 0
  8676  001E22  C0D3  F0D1         	movff	_ser_tmp,_rxiptr	;volatile
  8677  001E26                     i2l440:
  8678  001E26  B89E               	btfsc	3998,4,c	;volatile
  8679  001E28  A89D               	btfss	3997,4,c	;volatile
  8680  001E2A  D010               	goto	i2l444
  8681  001E2C  0E10               	movlw	low _txfifo
  8682  001E2E  245C               	addwf	_txoptr,w,c	;volatile
  8683  001E30  6ED9               	movwf	fsr2l,c
  8684  001E32  6ADA               	clrf	fsr2h,c
  8685  001E34  0E01               	movlw	high _txfifo
  8686  001E36  22DA               	addwfc	fsr2h,f,c
  8687  001E38  50DF               	movf	indf2,w,c
  8688  001E3A  6EAD               	movwf	4013,c	;volatile
  8689  001E3C  2A5C               	incf	_txoptr,f,c	;volatile
  8690  001E3E  0E0F               	movlw	15
  8691  001E40  165C               	andwf	_txoptr,f,c	;volatile
  8692  001E42  505B               	movf	_txiptr,w,c	;volatile
  8693  001E44  185C               	xorwf	_txoptr,w,c	;volatile
  8694  001E46  B4D8               	btfsc	status,2,c
  8695  001E48  989D               	bcf	3997,4,c	;volatile
  8696  001E4A  989E               	bcf	3998,4,c	;volatile
  8697  001E4C                     i2l444:
  8698  001E4C  C003  FFDA         	movff	??_global_int+2,fsr2h
  8699  001E50  C002  FFD9         	movff	??_global_int+1,fsr2l
  8700  001E54  0011               	retfie		f
  8701  001E56                     __end_of_global_int:
  8702                           	opt stack 0
  8703                           tblptru	equ	0xFF8
  8704                           tblptrh	equ	0xFF7
  8705                           tblptrl	equ	0xFF6
  8706                           tablat	equ	0xFF5
  8707                           prodl	equ	0xFF3
  8708                           intcon	equ	0xFF2
  8709                           intcon2	equ	0xFF1
  8710                           postinc0	equ	0xFEE
  8711                           wreg	equ	0xFE8
  8712                           postdec1	equ	0xFE5
  8713                           fsr1l	equ	0xFE1
  8714                           indf2	equ	0xFDF
  8715                           postinc2	equ	0xFDE
  8716                           postdec2	equ	0xFDD
  8717                           fsr2h	equ	0xFDA
  8718                           fsr2l	equ	0xFD9
  8719                           status	equ	0xFD8
  8720                           tblptru	equ	0xFF8
  8721                           tblptrh	equ	0xFF7
  8722                           tblptrl	equ	0xFF6
  8723                           tablat	equ	0xFF5
  8724                           prodl	equ	0xFF3
  8725                           intcon	equ	0xFF2
  8726                           intcon2	equ	0xFF1
  8727                           postinc0	equ	0xFEE
  8728                           wreg	equ	0xFE8
  8729                           postdec1	equ	0xFE5
  8730                           fsr1l	equ	0xFE1
  8731                           indf2	equ	0xFDF
  8732                           postinc2	equ	0xFDE
  8733                           postdec2	equ	0xFDD
  8734                           fsr2h	equ	0xFDA
  8735                           fsr2l	equ	0xFD9
  8736                           status	equ	0xFD8
  8737                           
  8738                           	psect	rparam
  8739  0000                     tblptru	equ	0xFF8
  8740                           tblptrh	equ	0xFF7
  8741                           tblptrl	equ	0xFF6
  8742                           tablat	equ	0xFF5
  8743                           prodl	equ	0xFF3
  8744                           intcon	equ	0xFF2
  8745                           intcon2	equ	0xFF1
  8746                           postinc0	equ	0xFEE
  8747                           wreg	equ	0xFE8
  8748                           postdec1	equ	0xFE5
  8749                           fsr1l	equ	0xFE1
  8750                           indf2	equ	0xFDF
  8751                           postinc2	equ	0xFDE
  8752                           postdec2	equ	0xFDD
  8753                           fsr2h	equ	0xFDA
  8754                           fsr2l	equ	0xFD9
  8755                           status	equ	0xFD8
  8756                           tblptru	equ	0xFF8
  8757                           tblptrh	equ	0xFF7
  8758                           tblptrl	equ	0xFF6
  8759                           tablat	equ	0xFF5
  8760                           prodl	equ	0xFF3
  8761                           intcon	equ	0xFF2
  8762                           intcon2	equ	0xFF1
  8763                           postinc0	equ	0xFEE
  8764                           wreg	equ	0xFE8
  8765                           postdec1	equ	0xFE5
  8766                           fsr1l	equ	0xFE1
  8767                           indf2	equ	0xFDF
  8768                           postinc2	equ	0xFDE
  8769                           postdec2	equ	0xFDD
  8770                           fsr2h	equ	0xFDA
  8771                           fsr2l	equ	0xFD9
  8772                           status	equ	0xFD8


Data Sizes:
    Strings     145
    Constant    76
    Data        4
    BSS         84
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     89      92
    BANK0           160     88     149
    BANK1           256      0      32
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(1) Largest target is 40
		 -> exp@coeff(CODE[40]), log@coeff(CODE[36]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(BANK0[2]), 

    ser_puts@s	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_34(CODE[3]), STR_29(CODE[6]), STR_24(CODE[3]), STR_14(CODE[3]), 
		 -> STR_13(CODE[5]), STR_12(CODE[3]), STR_11(CODE[8]), STR_10(CODE[6]), 
		 -> STR_9(CODE[6]), STR_8(CODE[6]), STR_7(CODE[5]), STR_4(CODE[3]), 
		 -> STR_2(CODE[3]), 

    put_str@s	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_15(CODE[13]), STR_6(CODE[10]), STR_5(CODE[6]), STR_3(CODE[15]), 
		 -> STR_1(CODE[12]), 

    print_unit@units	PTR const unsigned char [8] size(1) Largest target is 3
		 -> STR_23(CODE[3]), STR_22(CODE[3]), STR_21(CODE[3]), STR_20(CODE[3]), 
		 -> STR_19(CODE[3]), STR_18(CODE[3]), STR_17(CODE[3]), STR_16(CODE[2]), 

    lcd_puts@string	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_33(CODE[5]), STR_32(CODE[6]), STR_31(CODE[7]), STR_30(CODE[7]), 
		 -> STR_28(CODE[10]), STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[6]), 


Critical Paths under _main in COMRAM

    _measure_inductance->___fltol
    _measure_capacitance->___fltol
    _print_unit->_lcd_gotoxy
    _print_reading->_format_number
    _format_xint32->_format_number
    _format_double->___fltol
    _pow->___fltol
    _exp->___fltol
    _ldexp->_eval_poly
    _floor->___fltol
    ___fltol->_log10
    ___altofl->___fltol
    ___flsub->___fladd
    ___fldiv->___flpack
    ___lltofl->___flpack
    _log10->_log
    _log->_eval_poly
    _eval_poly->___fladd
    ___flmul->___fldiv
    ___fladd->___flmul
    ___awtofl->___flpack
    _lcd_begin->_lcd_command
    _indicator->_lcd_gotoxy
    _lcd_puts->_lcd_send
    _calibrate->___lwtofl
    _ser_puts->_ser_putch
    _measure_freq->_format_number
    _put_str->_output_putch
    _output_putch->_lcd_send
    _lcd_gotoxy->_lcd_command
    _format_number->___lwdiv
    _lcd_clear->_lcd_command
    _lcd_command->_lcd_send
    _lcd_send->_lcd_write4bits
    ___lwtofl->_measure_freq

Critical Paths under _global_int in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_measure_capacitance
    _measure_inductance->___fltol
    _measure_capacitance->_format_double
    _format_double->_pow
    _pow->_exp
    _exp->_floor
    _floor->___altofl
    ___altofl->___fltol

Critical Paths under _global_int in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _global_int in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _global_int in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _global_int in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _global_int in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _global_int in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _global_int in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _global_int in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  385822
                          _calibrate
                          _delay10ms
                      _format_double
                          _indicator
                          _lcd_begin
                          _lcd_clear
                         _lcd_gotoxy
                           _lcd_init
                           _lcd_puts
                _measure_capacitance
                 _measure_inductance
                           _ser_init
                           _ser_puts
                        _timer0_init
                        _timer2_init
 ---------------------------------------------------------------------------------
 (1) _timer2_init                                          4     4      0      90
                                              3 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _timer0_init                                         10    10      0     251
                                              3 COMRAM    10    10      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _measure_inductance                                  55    55      0   37301
                                              2 BANK0     43    43      0
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___lwtofl
                         _lcd_gotoxy
                       _measure_freq
                      _print_reading
                         _print_unit
                            _put_str
 ---------------------------------------------------------------------------------
 (1) _measure_capacitance                                 19    19      0  185177
                                             69 BANK0     19    19      0
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___lwtofl
                      _format_double
                      _format_xint32
                         _lcd_gotoxy
                       _measure_freq
                      _print_reading
                         _print_unit
                            _put_str
                          _ser_putch
                           _ser_puts
 ---------------------------------------------------------------------------------
 (2) _print_unit                                           3     3      0    1996
                                             13 COMRAM     2     2      0
                         _lcd_gotoxy
                           _ser_puts
 ---------------------------------------------------------------------------------
 (2) _print_reading                                        6     4      2    6020
                                             53 COMRAM     6     4      2
                            ___lwdiv
                            ___lwmod
                      _format_number
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (2) _format_xint32                                        4     0      4    2920
                                             53 COMRAM     4     0      4
                       _buffer_putch
                      _format_number
 ---------------------------------------------------------------------------------
 (2) _format_double                                       20    16      4  144933
                                             49 BANK0     20    16      4
                           ___awtofl
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                       _buffer_putch
                              _floor
                              _log10
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                 21    13      8   81087
                                             28 BANK0     21    13      8
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___lltofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _exp                                                 11     7      4   43458
                                             17 BANK0     11     7      4
                           ___awtofl
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (5) _ldexp                                                8     2      6     354
                                             67 COMRAM     8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (5) _floor                                               10     6      4   10114
                                              7 BANK0     10     6      4
                           ___altofl
                            ___fladd
                            ___fldiv (ARG)
                             ___flge
                            ___fltol
                              _frexp
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     882
                                             81 COMRAM     8     4      4
                                              0 BANK0      2     2      0
                            ___fldiv (ARG)
                              _log10 (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                               8     0      8    1594
                                              3 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (6) ___altofl                                             5     1      4    2446
                                              2 BANK0      5     1      4
                           ___flpack
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    5269
                                             55 COMRAM     8     0      8
                           ___awtofl (ARG)
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4     204
                                              3 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             15     7      8    4021
                                             13 COMRAM    15     7      8
                           ___flpack
 ---------------------------------------------------------------------------------
 (4) ___lltofl                                             4     0      4    2344
                                             13 COMRAM     4     0      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (3) _log10                                                8     4      4   32043
                                             73 COMRAM     8     4      4
                            ___flmul
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  6     2      4   25436
                                             67 COMRAM     6     2      4
                           ___awtofl
                            ___fladd
                            ___flmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                7     2      5     436
                                              3 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           12     5      7   11289
                                             55 COMRAM    12     5      7
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             15     7      8    6432
                                             28 COMRAM    15     7      8
                           ___awtofl (ARG)
                            ___fldiv (ARG)
                           ___flpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             12     4      8    4213
                                             43 COMRAM    12     4      8
                           ___awtofl (ARG)
                            ___flmul (ARG)
                           ___flpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awtofl                                             9     5      4    2686
                                             13 COMRAM     5     1      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             3     3      0      46
                                              3 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcd_begin                                            3     2      1     685
                                              7 COMRAM     3     2      1
                        _lcd_command
                     _lcd_write4bits
 ---------------------------------------------------------------------------------
 (1) _indicator                                            1     1      0    2406
                                             13 COMRAM     1     1      0
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (3) _lcd_puts                                             3     3      0     806
                                              6 COMRAM     3     3      0
                           _lcd_send
 ---------------------------------------------------------------------------------
 (1) _calibrate                                            1     1      0   11609
                                             62 COMRAM     1     1      0
                           ___lwtofl
                          _delay10ms
                          _lcd_clear
                         _lcd_gotoxy
                           _lcd_send
                       _measure_freq
                            _put_str
                           _ser_puts
 ---------------------------------------------------------------------------------
 (1) _ser_puts                                             1     1      0     418
                                              4 COMRAM     1     1      0
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _measure_freq                                         5     3      2    5063
                                             53 COMRAM     5     3      2
                      _format_number
                         _lcd_gotoxy
                            _put_str
                     _timer0_read_ps
 ---------------------------------------------------------------------------------
 (3) _timer0_read_ps                                       7     5      2     114
                                              3 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _put_str                                              4     4      0     791
                                              7 COMRAM     4     4      0
                       _output_putch
 ---------------------------------------------------------------------------------
 (3) _output_putch                                         1     1      0     566
                                              6 COMRAM     1     1      0
                           _lcd_send
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _ser_putch                                            1     1      0      22
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _lcd_gotoxy                                           6     5      1    1578
                                              7 COMRAM     6     5      1
                        _lcd_command
 ---------------------------------------------------------------------------------
 (3) _format_number                                       43    39      4    2535
                                             10 COMRAM    43    39      4
                            ___lwdiv
                            ___lwmod
                       _buffer_putch
 ---------------------------------------------------------------------------------
 (4) _buffer_putch                                         3     3      0      22
                                              3 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     451
                                              3 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     454
                                              3 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            1     1      0     522
                                              7 COMRAM     1     1      0
                        _lcd_command
 ---------------------------------------------------------------------------------
 (4) _lcd_command                                          1     1      0     522
                                              6 COMRAM     1     1      0
                           _lcd_send
 ---------------------------------------------------------------------------------
 (4) _lcd_send                                             2     1      1     500
                                              4 COMRAM     2     1      1
                     _lcd_write4bits
 ---------------------------------------------------------------------------------
 (5) _lcd_write4bits                                       1     1      0      22
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _delay10ms                                            1     1      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4    2669
                                             58 COMRAM     4     0      4
                           ___flpack
                       _measure_freq (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6    2248
                                              3 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _global_int                                           3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calibrate
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _put_str
           _output_putch
             _lcd_send
               _lcd_write4bits
             _ser_putch
         _timer0_read_ps
     _delay10ms
     _lcd_clear
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_send
       _lcd_write4bits
     _measure_freq
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _put_str
         _output_putch
           _lcd_send
             _lcd_write4bits
           _ser_putch
       _timer0_read_ps
     _put_str
       _output_putch
         _lcd_send
           _lcd_write4bits
         _ser_putch
     _ser_puts
       _ser_putch
   _delay10ms
   _format_double
     ___awtofl
       ___flpack
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     _buffer_putch
     _floor
       ___altofl
         ___flpack
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
       ___fladd
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___fldiv (ARG)
         ___flpack
       ___flge (ARG)
       ___fltol (ARG)
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       _frexp (ARG)
     _log10
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       _log
         ___awtofl
           ___flpack
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _frexp
     _pow
       ___flge
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       ___flneg
       ___fltol
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       ___lltofl
         ___flpack
       _exp
         ___awtofl
           ___flpack
         ___fldiv
           ___flpack
         ___flge
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         ___flsub
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _floor
           ___altofl
             ___flpack
             ___fltol (ARG)
               ___fldiv (ARG)
                 ___flpack
               _log10 (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _log
                   ___awtofl
                     ___flpack
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___fladd
                       ___awtofl (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                   _frexp
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flge (ARG)
           ___fltol (ARG)
             ___fldiv (ARG)
               ___flpack
             _log10 (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
           _frexp (ARG)
         _ldexp
           _eval_poly (ARG)
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
         _log (ARG)
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
       _log
         ___awtofl
           ___flpack
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _frexp
   _indicator
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_puts
       _lcd_send
         _lcd_write4bits
   _lcd_begin
     _lcd_command
       _lcd_send
         _lcd_write4bits
     _lcd_write4bits
   _lcd_clear
     _lcd_command
       _lcd_send
         _lcd_write4bits
   _lcd_gotoxy
     _lcd_command
       _lcd_send
         _lcd_write4bits
   _lcd_init
   _lcd_puts
     _lcd_send
       _lcd_write4bits
   _measure_capacitance
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _put_str
           _output_putch
             _lcd_send
               _lcd_write4bits
             _ser_putch
         _timer0_read_ps
     _format_double
       ___awtofl
         ___flpack
       ___fldiv
         ___flpack
       ___flge
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       ___flsub
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
       ___fltol
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       _buffer_putch
       _floor
         ___altofl
           ___flpack
           ___fltol (ARG)
             ___fldiv (ARG)
               ___flpack
             _log10 (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flge (ARG)
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
         _frexp (ARG)
       _log10
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
       _pow
         ___flge
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         ___fltol
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
         ___lltofl
           ___flpack
         _exp
           ___awtofl
             ___flpack
           ___fldiv
             ___flpack
           ___flge
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg
           ___flsub
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           ___fltol
             ___fldiv (ARG)
               ___flpack
             _log10 (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _floor
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 _log10 (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   _log
                     ___awtofl
                       ___flpack
                     ___fladd
                       ___awtofl (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     _eval_poly
                       ___fladd
                         ___awtofl (ARG)
                           ___flpack
                         ___flmul (ARG)
                           ___awtofl (ARG)
                             ___flpack
                           ___fldiv (ARG)
                             ___flpack
                           ___flpack (ARG)
                           _frexp (ARG)
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flmul
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                     _frexp
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flge (ARG)
             ___fltol (ARG)
               ___fldiv (ARG)
                 ___flpack
               _log10 (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _log
                   ___awtofl
                     ___flpack
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___fladd
                       ___awtofl (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                   _frexp
             _frexp (ARG)
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
           _log (ARG)
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     _format_xint32
       _buffer_putch
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _measure_freq
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _put_str
         _output_putch
           _lcd_send
             _lcd_write4bits
           _ser_putch
       _timer0_read_ps
     _print_reading
       ___lwdiv
       ___lwmod
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _lcd_puts
         _lcd_send
           _lcd_write4bits
     _print_unit
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _ser_puts
         _ser_putch
     _put_str
       _output_putch
         _lcd_send
           _lcd_write4bits
         _ser_putch
     _ser_putch
     _ser_puts
       _ser_putch
   _measure_inductance
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _put_str
           _output_putch
             _lcd_send
               _lcd_write4bits
             _ser_putch
         _timer0_read_ps
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _measure_freq
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _put_str
         _output_putch
           _lcd_send
             _lcd_write4bits
           _ser_putch
       _timer0_read_ps
     _print_reading
       ___lwdiv
       ___lwmod
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _lcd_puts
         _lcd_send
           _lcd_write4bits
     _print_unit
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _ser_puts
         _ser_putch
     _put_str
       _output_putch
         _lcd_send
           _lcd_write4bits
         _ser_putch
   _ser_init
   _ser_puts
     _ser_putch
   _timer0_init
   _timer2_init

 _global_int (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      20       7       12.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     58      95       5       93.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     59      5C       1       96.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     111      20        0.0%
DATA                 0      0     111       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Sep 17 00:08:57 2019

                ___altofl@sign 0066                   ___fldiv@cntr 001A                   ___fldiv@sign 001C  
                           PL2 0D0A                             PL4 10A2                             PL6 10C4  
                           PL8 0D2C                             _F1 00E5                             _F2 00B8  
                           _F3 00BC                             l12 2668                             l54 2122  
                  __CFG_BOR$ON 000000                   __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000  
                 __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000                   ___flpack@arg 0004  
                          PL10 10E6                            PL20 110E                            PL12 17C6  
                          PL30 285C                            PL22 1120                            PL14 10FC  
                          PL40 2982                            PL32 1142                            PL24 2832  
                          PL16 206A                            PL34 1152                            PL26 18E8  
                          PL18 1FB2                            PL36 1FC4                            PL28 1132  
                          PL38 1F0C                   ___flpack@exp 0008                            l206 2550  
                          l160 2802                            l158 27FE                            l327 296C  
                          l449 1BB6                            l802 16CA                            l813 1762  
                          l910 2376                            l830 21C8                            l914 22FE  
                          l845 1FB0                            l790 1ECC                            l782 1E98  
                          l838 2526                            l839 2544                            l777 1E64  
                          l881 1A22                            l778 1F0A                            l882 1AE0  
                          l884 1AD0                            l789 1EC4                            l798 16A2  
                          l894 2266                            l799 17C4                            _GIE 007F97  
                 __CFG_CPB$OFF 000000                   __CFG_CPD$OFF 000000                 lcd_begin@lines 000A  
                          _RX9 007D5E                            _TX9 007D66                            _exp 1160  
                          _log 17DA                            _pow 14F8                            wreg 000FE8  
           timer0_read_ps@prev 0008                   ___flmul@cntr 002A               _format_number$68 0031  
                 ___flmul@sign 002B                   __CFG_LVP$OFF 000000         __end_of_lcd_write4bits 292E  
                ___flpack@sign 0009                   ___fltol@exp1 0061                   __CFG_WDT$OFF 000000  
                         l1113 25D0                           l1123 26E2                           l1151 167E  
                         l1155 166E                           l3020 284A                           l3012 256C  
                         l1076 18E6                           l1180 1208                           l1181 135E  
                         l3024 2854                           l3032 297A                           l3200 2394  
                         l1177 136E                           l3028 2972                           l3142 1CCA  
                         l3134 1CBC                           l3230 23E0                           l3222 23CE  
                         l3214 23B6                           l3206 23A2                           l3160 1D16  
                         l4104 0930                           l3216 23BC                           l3208 23A8  
                         l4114 0C6A                           l4122 0CAC                           l3420 2966  
                         l4052 0E7C                           l4124 0CB2                           l3228 23DA  
                         l4118 0C88                           l3168 1D4E                           l4074 1006  
                         l4082 1046                           l3700 1F72                           l2670 2998  
                         l2830 25A8                           l2910 208C                           l3614 16DC  
                         l2582 2542                           l4078 1022                           l3198 238E  
                         l4190 1BA2                           l2840 25C6                           l2832 25AC  
                         l3640 1730                           l3608 16B4                           l3800 218E  
                         l2744 293C                           l2576 2510                           l2850 26C2  
                         l2930 2102                           l3634 1716                           l2594 2320  
                         l2754 2298                           l3564 1E6E                           l2668 2996  
                         l2828 25A0                           l2852 26C6                           l2916 20AC  
                         l2676 28C0                           l3652 1778                           l3636 1722  
                         l3628 16F6                           l3812 2678                           l3740 2232  
                         l3732 221A                           l3716 21D6                           l2772 22C6  
                         l4196 1BB2                           l3574 1EAE                           l3566 1E72  
                         l2926 20E8                           l3822 26FC                           l3646 1750  
                         l3638 172A                           l3830 2052                           l3742 223E  
                         l3718 21E0                           l2758 22A2                           l3576 1EBA  
                         l3568 1E8A                           l2856 26D8                           l2848 26BA  
                         l2928 20EE                           l3664 1798                           l3648 175C  
                         l3744 2242                           l3736 222A                           l2768 22BA  
                         l3912 153C                           l3674 1F2C                           l3842 17E8  
                         l3762 1A2C                           l3922 15C6                           l3906 1524  
                         l2788 2642                           l3676 1F36                           l3828 1FEC  
                         l3844 17F2                           l3780 2142                           l3748 2256  
                         l3860 1178                           l3916 1592                           l2990 281E  
                         l3598 25F4                           l3766 1A48                           l3870 11D6  
                         l3918 159C                           l3688 1F5C                           l3792 2160  
                         l3952 14CE                           l3936 13A2                           l2986 274A  
                         l2994 282A                           l3778 2138                           l3890 132A  
                         l3866 11AC                           l3954 14D4                           ?_exp 0071  
                         ?_log 0044                           l3888 1320                           l3996 1C94  
                         ?_pow 007C                           STR_1 0869                           STR_2 089B  
                         STR_3 084D                           STR_4 089B                           STR_5 08B0  
                         STR_6 087F                           STR_7 08C0                           STR_8 089E  
                         STR_9 08A4                           _BRGH 007D62                           _CREN 007D5C  
                         _LATB 000F8A                           _LATC 000F8B                           u3040 1A36  
                         _CCal 00E9                           u2408 27B6                           u3250 1592  
                         u2390 27B4                           u3407 1CEC                           _PIE1 000F9D  
                         u3417 1CFE                           u3507 1948                           u3427 1D0A  
                         u3517 1958                           u3437 1D24                           u3527 1968  
                         u3447 1D3C                           u3537 1978                           u3457 1D70  
                         u3547 1988                           u3467 1902                           _PEIE 007F96  
                         u3557 1998                           u3477 1918                           u3397 1CD0  
                         u3567 19A8                           u3487 1928                           u2960 21FE  
                         u3577 29B2                           u3497 1938                           u3587 291C  
                         _RCIF 007CF5                           u3597 2926                           u2965 21F4  
                         _PIR1 000F9E                           _TMR0 000FD6                           _TMR2 000FCC  
                         _SPEN 007D5F                           _TXIE 007CEC                           _TXIF 007CF4  
                         _TXEN 007D65                           _SYNC 007D64                   __CFG_PWRT$ON 000000  
                         _bres 00ED                           _main 1AE2                           fsr2h 000FDA  
                         fsr1l 000FE1                           indf2 000FDF                           fsr2l 000FD9  
                         exp@x 0071                           log@x 0044          __size_of_output_putch 0012  
                         pow@x 007C                           pow@y 0080                           prodl 000FF3  
   __end_of_measure_inductance 0D0A                           start 0014            timer0_read_ps@count 0009  
               ??_buffer_putch 0004                   ___param_bank 000010                _timer0_init$152 0004  
              _timer0_init$153 0006                _timer0_init$154 0008                _timer0_init$155 000A  
          lcd_write4bits@value 0004                   lcd_send@mode 0005                          ??_exp 005A  
                        ??_log 0048                          ??_pow 005A                 __CFG_CCP2MX$ON 000000  
                ___fltol@sign1 0060                __end_of___fladd 17C6                          ?_main 0001  
              __end_of___fldiv 21CA                __end_of___flneg 294E                          STR_10 08AA  
                        STR_11 0889                          STR_12 089B                          STR_20 08C9  
                        STR_21 08D2                          STR_13 08BB                          STR_14 089B  
                        STR_22 08CC                          STR_30 0891                          STR_23 08CF  
                        STR_15 085C                          STR_24 089B                          STR_25 0892  
                        STR_17 08D5                          STR_33 08B6                          STR_18 08DB  
                        STR_26 08C5                          STR_27 0894                          STR_19 08D8  
                        STR_28 0875                          STR_29 0898                __end_of___flmul 1FB2  
              __end_of___flsub 26AE                __end_of___fltol 2268                          _T0CON 000FD5  
                        _T2CON 000FCA                          _LATC7 007C5F                __end_of___lwdiv 25DA  
              __end_of___lwmod 26EC                          i2l440 1E26                          i2l444 1E4C  
                        _RCREG 000FAE               lcd_begin@dotsize 0008                          _SPBRG 000FAF  
                        _PORTC 000F82                          _TRISA 000F92                          _TRISB 000F93  
                        _TRISC 000F94                          _TXREG 000FAD                  __CFG_WRT0$OFF 000000  
                __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000  
               __CFG_EBTR0$OFF 000000                 __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000  
                ___awtofl@sign 0012                 __CFG_EBTR3$OFF 000000                  __CFG_WRTB$OFF 000000  
                __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000                 __CFG_EBTRB$OFF 000000  
                        _log10 2454                          _blink 00CC                          _floor 19F2  
                        _ldexp 2268                          _frexp 2300                   _output_putch 29BC  
              ?_lcd_write4bits 0001                          _msecs 00C0                          tablat 000FF5  
                        pow@yi 008D                format_number@di 0034                          status 000FD8  
              __end_of_put_str 285C                ??_print_reading 0038                    exp@exponent 0079  
                  ldexp@newexp 0048                __initialization 24AE                    log@exponent 0048  
                 __end_of_main 1BD0               format_double@num 0091                  lcd_gotoxy@col 0009  
                lcd_gotoxy@row 0008                  ?_measure_freq 0036         __size_of_format_double 0188  
                       ??_main 005A                  lcd_send@value 0006            format_double@weight 009D  
                __activetblptr 000001         __size_of_format_number 00A8         __size_of_format_xint32 0034  
          lcd_init@fourbitmode 0004                         ?_log10 004A                         ?_floor 0067  
                       ?_ldexp 0044                         ?_frexp 0004               __end_of___altofl 2622  
             __end_of___flpack 1F0C               __end_of___awtofl 2726               __end_of___lltofl 27EC  
                       i2l3460 1DDE                         i2l3466 1DFE                         i2l3468 1E00  
                       _INTCON 000FF2               __end_of___lwtofl 2896                         _TRISC6 007CA6  
               __CFG_XINST$OFF 000000               __end_of_lcd_init 2818           __size_of_lcd_command 000C  
             __end_of_lcd_send 29A6                         ___flge 24FA               __end_of_lcd_puts 2832  
                    ??___fladd 0034                      ??___fldiv 0016                      ??___flneg 0008  
                    ??___flmul 0025                      ??___flsub 0040                      ??___fltol 0056  
                 ?_timer0_init 0001                 ??_measure_freq 0038                      ??___lwdiv 0008  
                 ?_timer2_init 0001                      ??___lwmod 0008                         _buffer 00D4  
                       clear_0 24B4                         clear_1 24C0                         log10@x 004A  
                       _rxfifo 0100                         _txfifo 0110                         _rxiptr 00D1  
                       _rxoptr 00D2                         floor@i 006B                         _txiptr 005B  
                       floor@x 0067                         _txoptr 005C               __end_of_ser_init 290C  
             __end_of_ser_puts 2982             timer2_init@ps_mode 0007                   __mediumconst 0000  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
         __end_of_buffer_putch 266A               format_number@buf 0011               format_number@pad 000E  
      _measure_inductance$1100 0083        _measure_inductance$1101 006E        _measure_inductance$1102 0072  
      _measure_inductance$1103 0076        _measure_inductance$1097 006A        _measure_inductance$1098 007B  
      _measure_inductance$1099 007F                      ??_put_str 0008                     ___fladd@f1 002C  
                   ___fladd@f2 0030                     ___flge@ff1 0004                     ___flge@ff2 0008  
             __end_ofexp@coeff 0829                  _format_double 1370               __end_oflog@coeff 084D  
                   ___altofl@c 0062                     ___fldiv@f1 000E                     ___fldiv@f2 0012  
                   ___fldiv@f3 0016                     __accesstop 0060        __end_of__initialization 24EC  
                   ___flneg@f1 0004                  _format_number 207C                  _format_xint32 275C  
                   ___flmul@f1 001D                     ___flmul@f2 0021                   eval_poly@res 0040  
                ___rparam_used 000001                     ___flsub@f1 0038                     ___flsub@f2 003C  
                   ___fltol@f1 0052                     ___awtofl@c 000E         measure_capacitance@Cin 00B4  
 __size_of_measure_capacitance 0360         measure_capacitance@var 00B2          lcd_gotoxy@row_offsets 000A  
               __pcstackCOMRAM 0001             __size_of_calibrate 00E2                   __pidataBANK0 29DA  
                   ___lltofl@c 000E             __size_of_delay10ms 0002                  __end_of_log10 24AE  
                __end_of_floor 1AE2                  __end_of_ldexp 2300                  __end_of_frexp 2378  
                   __end_ofPL2 0D2C                     __end_ofPL4 10C4                     __end_ofPL6 10E6  
                   __end_ofPL8 0D42                     ___lwtofl@c 003B                 buffer_putch@ch 0006  
           __size_of_lcd_begin 00D4             __size_of_lcd_clear 0016                        ??_log10 004E  
                      ??_floor 005A                        ??_ldexp 004A                        ??_frexp 0009  
                   _log10$1106 004E                     __pbssBANK0 00B8                     __pbssBANK1 0100  
               ?_format_double 0091             __size_of_eval_poly 0098             __size_of_indicator 0020  
               ?_format_number 000B                 ?_format_xint32 0036                 print_unit@unit 0001  
                      ?___flge 0004                      ?___altofl 0062        __size_of_timer0_read_ps 004A  
                    ?___flpack 0004                      ?___awtofl 000E                      ?___lltofl 000E  
           _measure_inductance 08E0             __size_of_ser_putch 0028                      ?___lwtofl 003B  
             ??_lcd_write4bits 0004                        _INTCON2 000FF1                     _lcd_gotoxy 2726  
          ?_measure_inductance 0001              __end_of_calibrate 1CB2                      ?_lcd_init 0001  
                    ?_lcd_send 0005              __end_of_delay10ms 29E0                      ?_lcd_puts 0001  
         __end_of_measure_freq 19F2                     _global_int 0008                     calibrate@i 003F  
                      __Hparam 0000                        __Lparam 0000                      ?_ser_init 0001  
         ??_measure_inductance 005A              __end_of_lcd_begin 1D86                      ?_ser_puts 0001  
            __end_of_lcd_clear 29BC                __size_of___flge 004C                        ___fladd 1680  
                      ___fldiv 2124                        ___flneg 292E                        ___flmul 1F18  
                      ___flsub 266A                        ___fltol 21CA                        ___lwdiv 2590  
                      ___lwmod 26AE                   __psmallconst 0800                     ??___altofl 005A  
              __CFG_STVREN$OFF 000000                     ??___flpack 000A                        __pcinit 24AE  
                   ??___awtofl 0012              __end_of_eval_poly 206A                        __ramtop 0800  
            __end_of_indicator 296E           __size_of_timer0_init 006E                     ??___lltofl 0012  
                      __ptext0 1AE2                        __ptext1 2790                        __ptext2 2378  
                      __ptext3 28E6                        __ptext4 08E0                        __ptext5 0D42  
                      __ptext6 2896                        __ptext7 23E6                        __ptext8 275C  
                      __ptext9 1370           __size_of_timer2_init 002E          __size_of_buffer_putch 0048  
                   ??___lwtofl 003F                   __size_of_exp 0210                   __size_of_log 010E  
                 __size_of_pow 0188                        _seconds 00C4                        _ser_tmp 00D3  
              ??_format_double 005A                        _put_str 2842                     ??_lcd_init 0004  
                   ??_lcd_send 0006                 __pintcode_body 1D86                     ??_lcd_puts 0007  
         end_of_initialization 24EC                ??_format_number 000F                ??_format_xint32 003A  
                      exp@sign 007B                      _LCD_lines 00CF                   _lcd_init$134 0005  
                      int_func 1D86                 lcd_puts@string 0009              __end_of_ser_putch 28E6  
                      pow@sign 008C  measure_inductance@denominator 0066          __end_of_print_reading 2454  
                   ??_ser_init 0004                     ??_ser_puts 0005                   _buffer_putch 2622  
            format_number@base 000D                        postdec1 000FE5                        postdec2 000FDD  
                      postinc0 000FEE                        postinc2 000FDE                     _print_unit 2896  
          _measure_capacitance 0D42                    ?_lcd_gotoxy 0008                    ___fldiv@exp 001B  
                  ?_global_int 0001                    ___flmul@exp 0025                  ??_lcd_command 0007  
         ?_measure_capacitance 0001        measure_capacitance@unit 00B1                 format_double@m 00A3  
       measure_inductance@unit 007A                 __end_of___flge 2546                 _timer0_read_ps 2546  
              lcd_gotoxy@F4120 00F1                     floor@expon 006F                 format_number@i 0035  
               format_number@n 000B                 format_xint32@x 0036                    __end_ofPL10 10FC  
                  __end_ofPL20 1120                    __end_ofPL12 17DA                    __end_ofPL30 286C  
                  __end_ofPL22 1132                    __end_ofPL14 110E                    __end_ofPL40 298C  
                  __end_ofPL32 1152                    __end_ofPL24 2842                    __end_ofPL16 207C  
                  __end_ofPL34 1160                    __end_ofPL26 18F8                    __end_ofPL18 1FC4  
                  __end_ofPL36 1FD2                    __end_ofPL28 1142                    __end_ofPL38 1F18  
          start_initialization 24AE                     eval_poly@d 003C                     eval_poly@n 003D  
                   eval_poly@x 0038          __size_of_measure_freq 00FA                     ldexp@value 0044  
                  __end_of_exp 1370                    __end_of_log 18E8                    __end_of_pow 1680  
                 _LCD_function 005A             format_double@digit 00A1                     frexp@value 0004  
        ??_measure_capacitance 005A         __end_of_timer0_read_ps 2590                       ??___flge 000C  
          __size_of_lcd_gotoxy 0036            __end_of_lcd_command 29DA                    __pdataBANK0 00F1  
                 _measure_freq 18F8            __size_of_global_int 1E4E       print_reading@measurement 0036  
            __size_of___altofl 0048              __size_of___flpack 00B6              __size_of___awtofl 003A  
                  ?_print_unit 0001              __size_of___lltofl 002E                    __pbssCOMRAM 005A  
            __size_of___lwtofl 002A                  __pcstackBANK0 0060                  ?_output_putch 0001  
            measure_freq@count 0039               lcd_command@value 0007              __size_of_lcd_init 002C  
            __size_of_lcd_send 001A                      _calibrate 1BD0              __size_of_lcd_puts 001A  
                    _delay10ms 29DE                      __pnvBANK0 00E9               ___lwdiv@dividend 0004  
              ?_timer0_read_ps 0004                      __pintcode 0008                       ?___fladd 002C  
                     ?___fldiv 000E                       ?___flneg 0004                       ?___flmul 001D  
                     ?___flsub 0038                       ?___fltol 0052              __size_of_ser_init 0026  
                     ?___lwdiv 0004                       ?___lwmod 0004              __size_of_ser_puts 0014  
                    _lcd_begin 1CB2                      _lcd_clear 29A6                    __smallconst 0800  
                    _eval_poly 1FD2                  output_putch@c 0007                      _indicator 294E  
               ??_output_putch 0007               ___lwdiv@quotient 0008                 __size_of_log10 005A  
                     ?_put_str 0001                 __size_of_floor 00F0                 __size_of_ldexp 0098  
               __size_of_frexp 0078                     ?_calibrate 0001                     ser_putch@c 0004  
                   ?_delay10ms 0001                       _LCD_ctrl 00CE                       _LCD_mode 00D0  
                  _lcd_command 29CE            __size_of_print_unit 0028                       i2u253_40 1DC2  
                     i2u253_41 1DBC                       i2u254_48 1DC4                      _ser_putch 28BE  
  __size_of_measure_inductance 042A                  ??_timer0_init 0004                  ??_timer2_init 0004  
            indicator@indicate 000E                     ?_lcd_begin 0008                     ?_lcd_clear 0001  
                   ?_eval_poly 0038                     ?_indicator 0001                      lcd_puts@i 0008  
                 ??_lcd_gotoxy 0009          measure_inductance@Lin 0089          measure_inductance@var 0087  
                    copy_data0 24E0          __end_of_format_double 14F8                   ??_global_int 0001  
         format_number@padchar 0033        __size_of_lcd_write4bits 0022          __end_of_format_number 2124  
        __end_of_format_xint32 2790                      frexp@eptr 0008                       __Hrparam 0000  
                     __Lrparam 0000                     ?_ser_putch 0001                   __Lsmallconst 0800  
           __end_of_lcd_gotoxy 275C               __size_of___fladd 0146               __size_of___fldiv 00A6  
             __size_of___flneg 0020               __size_of___flmul 009A               __size_of___flsub 0044  
             __size_of___fltol 009E                       ___altofl 25DA                       ___flpack 1E56  
             __size_of___lwdiv 004A               __size_of___lwmod 003E                       ___awtofl 26EC  
                     ___lltofl 27BE                  timer2_init@ps 0005                       ___lwtofl 286C  
           __end_of_global_int 1E56            __end_of_timer0_init 23E6                       _exp$1109 0075  
          __end_of_timer2_init 27BE                ___lwdiv@divisor 0006                ___lwdiv@counter 000A  
       __size_of_print_reading 006E           timer0_init@prescaler 000C                       __ptext10 14F8  
                     __ptext11 1160                       __ptext20 27BE                       __ptext12 2268  
                     __ptext21 2454                       __ptext13 19F2                       __ptext30 294E  
                     __ptext22 17DA                       __ptext14 21CA                       __ptext31 2818  
                     __ptext23 2300                       __ptext15 24FA                       __ptext40 207C  
                     __ptext32 1BD0                       __ptext24 1FD2                       __ptext16 25DA  
                     __ptext41 2622                       __ptext33 296E                       __ptext25 1F18  
                     __ptext17 266A                       __ptext50 1E56                       __ptext42 26AE  
                     __ptext34 18F8                       __ptext26 1680                       __ptext18 292E  
                     __ptext43 2590                       __ptext35 2546                       __ptext27 26EC  
                     __ptext19 2124                       __ptext44 29A6                       __ptext36 2842  
                     __ptext28 27EC                       __ptext45 29CE                       __ptext37 29BC  
                     __ptext29 1CB2                       __ptext46 298C                       __ptext38 28BE  
                     __ptext47 290C                       __ptext39 2726                       __ptext48 29DE  
                     __ptext49 286C                       _lcd_init 27EC                       _lcd_send 298C  
                     _pow$1107 0084                       _pow$1108 0088                       _lcd_puts 2818  
             __size_of_put_str 001A                    ??_calibrate 003F                  __size_of_main 00EE  
                  ??_delay10ms 0004                      ser_puts@s 0005                       _msecpart 00EF  
                     _ser_init 28E6                       _ser_puts 296E                       _timer1of 00C8  
         __end_of_output_putch 29CE                    ??_lcd_begin 0009                    ??_lcd_clear 0008  
                     exp@coeff 0801          ___flmul@f3_as_product 0026                       log@coeff 0829  
  measure_inductance@numerator 0062                   ??_print_unit 000E                    ??_eval_poly 003F  
                  ??_indicator 000E             _print_reading$1104 0038             _print_reading$1105 003A  
                     intlevel2 0000    __end_of_measure_capacitance 10A2               ___lwmod@dividend 0004  
             ??_timer0_read_ps 0006                    ??_ser_putch 0004             __end_of_print_unit 28BE  
                _print_reading 23E6           delay10ms@period_10ms 0001                    _timer0_init 2378  
                  _timer2_init 2790             _format_double$1092 0095             _format_double$1093 0099  
     _measure_capacitance$1094 00A5       _measure_capacitance$1095 00A9       _measure_capacitance$1096 00AD  
                     put_str@i 0009                       put_str@s 000B             timer0_init@ps_mode 000D  
              ___lwmod@divisor 0006                ___lwmod@counter 0008             __CFG_FOSC$HSPLL_HS 000000  
               _lcd_write4bits 290C                   ___fladd@exp1 0037                   ___fladd@exp2 0036  
                 ___fladd@sign 0035                   ?_lcd_command 0001                 ?_print_reading 0036  
                ?_buffer_putch 0001  
