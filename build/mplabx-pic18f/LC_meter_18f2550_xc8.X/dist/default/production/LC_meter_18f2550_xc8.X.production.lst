

Microchip Technology PIC18 PRO Macro Assembler V1.34 build -361300703 
                                                                                               Thu Sep 05 11:51:10 2019

Microchip Technology Omniscient Code Generator (PRO mode) build 201502162209
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    57                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    58                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    59  0000                     
    60                           	psect	idataBANK0
    61  0027C4                     __pidataBANK0:
    62                           	opt stack 0
    63                           
    64                           ;initializer for _putchar_ptr
    65  0027C4  CA                 	db	low _format_putchar
    66  0027C5  27                 	db	high _format_putchar
    67                           
    68                           	psect	smallconst
    69  000800                     __psmallconst:
    70                           	opt stack 0
    71  000800  00                 	db	0
    72  000801                     exp@coeff:
    73                           	opt stack 0
    74  000801  0000               	dw	0
    75  000803  3F80               	dw	16256
    76  000805  7218               	dw	29208
    77  000807  3F31               	dw	16177
    78  000809  FDF0               	dw	65008
    79  00080B  3E75               	dw	15989
    80  00080D  5847               	dw	22599
    81  00080F  3D63               	dw	15715
    82  000811  9558               	dw	38232
    83  000813  3C1D               	dw	15389
    84  000815  C482               	dw	50306
    85  000817  3AAE               	dw	15022
    86  000819  78A8               	dw	30888
    87  00081B  3921               	dw	14625
    88  00081D  93EF               	dw	37871
    89  00081F  3780               	dw	14208
    90  000821  92A0               	dw	37536
    91  000823  35A7               	dw	13735
    92  000825  5646               	dw	22086
    93  000827  3415               	dw	13333
    94  000829                     __end_ofexp@coeff:
    95                           	opt stack 0
    96  000829                     log@coeff:
    97                           	opt stack 0
    98  000829  0000               	dw	0
    99  00082B  0000               	dw	0
   100  00082D  FFC4               	dw	65476
   101  00082F  3F7F               	dw	16255
   102  000831  EF80               	dw	61312
   103  000833  BEFF               	dw	48895
   104  000835  E190               	dw	57744
   105  000837  3EA9               	dw	16041
   106  000839  82EC               	dw	33516
   107  00083B  BE76               	dw	48758
   108  00083D  AD82               	dw	44418
   109  00083F  3E2B               	dw	15915
   110  000841  3C0E               	dw	15374
   111  000843  BDC3               	dw	48579
   112  000845  D187               	dw	53639
   113  000847  3D13               	dw	15635
   114  000849  7841               	dw	30785
   115  00084B  BBD3               	dw	48083
   116  00084D                     __end_oflog@coeff:
   117                           	opt stack 0
   118  00084D                     STR_8:
   119  00084D  0D                 	db	13
   120  00084E  0A                 	db	10
   121  00084F  43                 	db	67	;'C'
   122  000850  43                 	db	67	;'C'
   123  000851  61                 	db	97	;'a'
   124  000852  6C                 	db	108	;'l'
   125  000853  3D                 	db	61	;'='
   126  000854  00                 	db	0
   127  000855                     STR_1:
   128  000855  2E                 	db	46
   129  000856  2E                 	db	46
   130  000857  2E                 	db	46
   131  000858  0D                 	db	13
   132  000859  0A                 	db	10
   133  00085A  00                 	db	0
   134  00085B                     STR_5:
   135  00085B  0D                 	db	13
   136  00085C  0A                 	db	10
   137  00085D  46                 	db	70	;'F'
   138  00085E  31                 	db	49	;'1'
   139  00085F  3D                 	db	61	;'='
   140  000860  00                 	db	0
   141  000861                     STR_6:
   142  000861  0D                 	db	13
   143  000862  0A                 	db	10
   144  000863  46                 	db	70	;'F'
   145  000864  32                 	db	50	;'2'
   146  000865  3D                 	db	61	;'='
   147  000866  00                 	db	0
   148  000867                     STR_7:
   149  000867  0D                 	db	13
   150  000868  0A                 	db	10
   151  000869  46                 	db	70	;'F'
   152  00086A  33                 	db	51	;'3'
   153  00086B  3D                 	db	61	;'='
   154  00086C  00                 	db	0
   155  00086D                     STR_10:
   156  00086D  43                 	db	67	;'C'
   157  00086E  69                 	db	105	;'i'
   158  00086F  6E                 	db	110	;'n'
   159  000870  3D                 	db	61	;'='
   160  000871  00                 	db	0
   161  000872                     STR_4:
   162  000872  76                 	db	118	;'v'
   163  000873  61                 	db	97	;'a'
   164  000874  72                 	db	114	;'r'
   165  000875  3D                 	db	61	;'='
   166  000876  00                 	db	0
   167  000877  00                 	db	0	; dummy byte at the end
   168  0000                     
   169                           	psect	nvBANK0
   170  0000EE                     __pnvBANK0:
   171                           	opt stack 0
   172  0000EE                     _CCal:
   173                           	opt stack 0
   174  0000EE                     	ds	4
   175  0000F2                     _bres:
   176                           	opt stack 0
   177  0000F2                     	ds	2
   178  0000F4                     _msecpart:
   179                           	opt stack 0
   180  0000F4                     	ds	2
   181  0000                     _TMR0	set	4054
   182  0000                     _PORTC	set	3970
   183  0000                     _RCREG	set	4014
   184  0000                     _SPBRG	set	4015
   185  0000                     _TMR2	set	4044
   186  0000                     _TRISA	set	3986
   187  0000                     _TRISC	set	3988
   188  0000                     _TXREG	set	4013
   189  0000                     _BRGH	set	32098
   190  0000                     _CREN	set	32092
   191  0000                     _GIE	set	32663
   192  0000                     _PEIE	set	32662
   193  0000                     _RC1	set	31761
   194  0000                     _RC4	set	31764
   195  0000                     _RC7	set	31767
   196  0000                     _RCIF	set	31989
   197  0000                     _RX9	set	32094
   198  0000                     _SPEN	set	32095
   199  0000                     _SSPEN	set	32309
   200  0000                     _SYNC	set	32100
   201  0000                     _T0CS	set	32429
   202  0000                     _T0SE	set	32428
   203  0000                     _T2CKPS0	set	32336
   204  0000                     _T2CKPS1	set	32337
   205  0000                     _TMR0IF	set	32658
   206  0000                     _TMR2IE	set	31977
   207  0000                     _TMR2IF	set	31985
   208  0000                     _TMR2ON	set	32338
   209  0000                     _TOUTPS0	set	32339
   210  0000                     _TOUTPS1	set	32340
   211  0000                     _TOUTPS2	set	32341
   212  0000                     _TRISC0	set	31904
   213  0000                     _TRISC1	set	31905
   214  0000                     _TRISC2	set	31906
   215  0000                     _TRISC6	set	31910
   216  0000                     _TX9	set	32102
   217  0000                     _TXEN	set	32101
   218  0000                     _TXIE	set	31980
   219  0000                     _TXIF	set	31988
   220  0000                     _nRBPU	set	32655
   221                           
   222                           ; #config settings
   223                           
   224                           	psect	cinit
   225  00261C                     __pcinit:
   226                           	opt stack 0
   227  00261C                     start_initialization:
   228                           	opt stack 0
   229  00261C                     __initialization:
   230                           	opt stack 0
   231                           
   232                           ; Clear objects allocated to BANK1 (16 bytes)
   233  00261C  EE01  F000         	lfsr	0,__pbssBANK1
   234  002620  0E10               	movlw	16
   235  002622                     clear_0:
   236  002622  6AEE               	clrf	postinc0,c
   237  002624  06E8               	decf	wreg,f,c
   238  002626  E1FD               	bnz	clear_0
   239                           
   240                           ; Clear objects allocated to BANK0 (45 bytes)
   241  002628  EE00  F0C1         	lfsr	0,__pbssBANK0
   242  00262C  0E2D               	movlw	45
   243  00262E                     clear_1:
   244  00262E  6AEE               	clrf	postinc0,c
   245  002630  06E8               	decf	wreg,f,c
   246  002632  E1FD               	bnz	clear_1
   247                           
   248                           ; Clear objects allocated to COMRAM (2 bytes)
   249  002634  6A5D               	clrf	(__pbssCOMRAM+1)& (0+255),c
   250  002636  6A5C               	clrf	__pbssCOMRAM& (0+255),c
   251                           
   252                           ; Initialize objects allocated to BANK0 (2 bytes)
   253                           ; load TBLPTR registers with __pidataBANK0
   254  002638  0EC4               	movlw	low __pidataBANK0
   255  00263A  6EF6               	movwf	tblptrl,c
   256  00263C  0E27               	movlw	high __pidataBANK0
   257  00263E  6EF7               	movwf	tblptrh,c
   258  002640  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   259  002642  6EF8               	movwf	tblptru,c
   260  002644  0009               	tblrd		*+	;fetch initializer
   261  002646  CFF5 F0F6          	movff	tablat,__pdataBANK0
   262  00264A  0009               	tblrd		*+	;fetch initializer
   263  00264C  CFF5 F0F7          	movff	tablat,__pdataBANK0+1
   264  002650                     end_of_initialization:
   265                           	opt stack 0
   266  002650                     __end_of__initialization:
   267                           	opt stack 0
   268  002650  0E00               	movlw	low (__Lmediumconst shr (0+16))
   269  002652  6EF8               	movwf	tblptru,c
   270  002654  0100               	movlb	0
   271  002656  EF1F  F00E         	goto	_main	;jump to C main() function
   272                           tblptru	equ	0xFF8
   273                           tblptrh	equ	0xFF7
   274                           tblptrl	equ	0xFF6
   275                           tablat	equ	0xFF5
   276                           postinc0	equ	0xFEE
   277                           wreg	equ	0xFE8
   278                           
   279                           	psect	bssCOMRAM
   280  00005C                     __pbssCOMRAM:
   281                           	opt stack 0
   282  00005C                     _txiptr:
   283                           	opt stack 0
   284  00005C                     	ds	1
   285  00005D                     _txoptr:
   286                           	opt stack 0
   287  00005D                     	ds	1
   288                           tblptru	equ	0xFF8
   289                           tblptrh	equ	0xFF7
   290                           tblptrl	equ	0xFF6
   291                           tablat	equ	0xFF5
   292                           postinc0	equ	0xFEE
   293                           wreg	equ	0xFE8
   294                           
   295                           	psect	bssBANK0
   296  0000C1                     __pbssBANK0:
   297                           	opt stack 0
   298  0000C1                     _txfifo:
   299                           	opt stack 0
   300  0000C1                     	ds	16
   301  0000D1                     _F2:
   302                           	opt stack 0
   303  0000D1                     	ds	4
   304  0000D5                     _F3:
   305                           	opt stack 0
   306  0000D5                     	ds	4
   307  0000D9                     _msecs:
   308                           	opt stack 0
   309  0000D9                     	ds	4
   310  0000DD                     _seconds:
   311                           	opt stack 0
   312  0000DD                     	ds	4
   313  0000E1                     _timer1of:
   314                           	opt stack 0
   315  0000E1                     	ds	4
   316  0000E5                     _blink:
   317                           	opt stack 0
   318  0000E5                     	ds	2
   319  0000E7                     _rxiptr:
   320                           	opt stack 0
   321  0000E7                     	ds	1
   322  0000E8                     _rxoptr:
   323                           	opt stack 0
   324  0000E8                     	ds	1
   325  0000E9                     _ser_tmp:
   326                           	opt stack 0
   327  0000E9                     	ds	1
   328  0000EA                     _F1:
   329                           	opt stack 0
   330  0000EA                     	ds	4
   331                           tblptru	equ	0xFF8
   332                           tblptrh	equ	0xFF7
   333                           tblptrl	equ	0xFF6
   334                           tablat	equ	0xFF5
   335                           postinc0	equ	0xFEE
   336                           wreg	equ	0xFE8
   337                           
   338                           	psect	dataBANK0
   339  0000F6                     __pdataBANK0:
   340                           	opt stack 0
   341  0000F6                     _putchar_ptr:
   342                           	opt stack 0
   343  0000F6                     	ds	2
   344                           tblptru	equ	0xFF8
   345                           tblptrh	equ	0xFF7
   346                           tblptrl	equ	0xFF6
   347                           tablat	equ	0xFF5
   348                           postinc0	equ	0xFEE
   349                           wreg	equ	0xFE8
   350                           
   351                           	psect	bssBANK1
   352  000100                     __pbssBANK1:
   353                           	opt stack 0
   354  000100                     _rxfifo:
   355                           	opt stack 0
   356  000100                     	ds	16
   357                           tblptru	equ	0xFF8
   358                           tblptrh	equ	0xFF7
   359                           tblptrl	equ	0xFF6
   360                           tablat	equ	0xFF5
   361                           postinc0	equ	0xFEE
   362                           wreg	equ	0xFE8
   363                           
   364                           	psect	cstackBANK0
   365  000060                     __pcstackBANK0:
   366                           	opt stack 0
   367  000060                     _log10$930:
   368                           	opt stack 0
   369                           
   370                           ; 4 bytes @ 0x0
   371  000060                     	ds	4
   372  000064                     ?___fltol:
   373                           	opt stack 0
   374  000064                     ___fltol@f1:
   375                           	opt stack 0
   376                           
   377                           ; 4 bytes @ 0x4
   378  000064                     	ds	4
   379  000068                     ??___fltol:
   380                           
   381                           ; 0 bytes @ 0x8
   382  000068                     	ds	4
   383  00006C                     ?___altofl:
   384                           	opt stack 0
   385  00006C                     measure_inductance@numerator:
   386                           	opt stack 0
   387  00006C                     ___altofl@c:
   388                           	opt stack 0
   389                           
   390                           ; 4 bytes @ 0xC
   391  00006C                     	ds	4
   392  000070                     ?_floor:
   393                           	opt stack 0
   394  000070                     measure_inductance@denominator:
   395                           	opt stack 0
   396  000070                     floor@x:
   397                           	opt stack 0
   398                           
   399                           ; 4 bytes @ 0x10
   400  000070                     	ds	4
   401  000074                     floor@i:
   402                           	opt stack 0
   403  000074                     _measure_inductance$923:
   404                           	opt stack 0
   405                           
   406                           ; 4 bytes @ 0x14
   407  000074                     	ds	4
   408  000078                     floor@expon:
   409                           	opt stack 0
   410  000078                     _measure_inductance$927:
   411                           	opt stack 0
   412                           
   413                           ; 4 bytes @ 0x18
   414  000078                     	ds	2
   415  00007A                     ?_exp:
   416                           	opt stack 0
   417  00007A                     exp@x:
   418                           	opt stack 0
   419                           
   420                           ; 4 bytes @ 0x1A
   421  00007A                     	ds	2
   422  00007C                     _measure_inductance$928:
   423                           	opt stack 0
   424                           
   425                           ; 4 bytes @ 0x1C
   426  00007C                     	ds	2
   427  00007E                     _exp$933:
   428                           	opt stack 0
   429                           
   430                           ; 4 bytes @ 0x1E
   431  00007E                     	ds	2
   432  000080                     _measure_inductance$929:
   433                           	opt stack 0
   434                           
   435                           ; 4 bytes @ 0x20
   436  000080                     	ds	2
   437  000082                     exp@exponent:
   438                           	opt stack 0
   439                           
   440                           ; 2 bytes @ 0x22
   441  000082                     	ds	2
   442  000084                     measure_inductance@unit:
   443                           	opt stack 0
   444  000084                     exp@sign:
   445                           	opt stack 0
   446                           
   447                           ; 1 bytes @ 0x24
   448  000084                     	ds	1
   449  000085                     ?_pow:
   450                           	opt stack 0
   451  000085                     pow@x:
   452                           	opt stack 0
   453  000085                     _measure_inductance$924:
   454                           	opt stack 0
   455                           
   456                           ; 4 bytes @ 0x25
   457  000085                     	ds	4
   458  000089                     pow@y:
   459                           	opt stack 0
   460  000089                     _measure_inductance$925:
   461                           	opt stack 0
   462                           
   463                           ; 4 bytes @ 0x29
   464  000089                     	ds	4
   465  00008D                     _measure_inductance$926:
   466                           	opt stack 0
   467  00008D                     _pow$931:
   468                           	opt stack 0
   469                           
   470                           ; 4 bytes @ 0x2D
   471  00008D                     	ds	4
   472  000091                     measure_inductance@var:
   473                           	opt stack 0
   474  000091                     _pow$932:
   475                           	opt stack 0
   476                           
   477                           ; 4 bytes @ 0x31
   478  000091                     	ds	2
   479  000093                     measure_inductance@Lin:
   480                           	opt stack 0
   481                           
   482                           ; 4 bytes @ 0x33
   483  000093                     	ds	2
   484  000095                     pow@sign:
   485                           	opt stack 0
   486                           
   487                           ; 1 bytes @ 0x35
   488  000095                     	ds	1
   489  000096                     pow@yi:
   490                           	opt stack 0
   491                           
   492                           ; 4 bytes @ 0x36
   493  000096                     	ds	4
   494  00009A                     format_double@num:
   495                           	opt stack 0
   496                           
   497                           ; 4 bytes @ 0x3A
   498  00009A                     	ds	4
   499  00009E                     _format_double$918:
   500                           	opt stack 0
   501                           
   502                           ; 4 bytes @ 0x3E
   503  00009E                     	ds	4
   504  0000A2                     _format_double$919:
   505                           	opt stack 0
   506                           
   507                           ; 4 bytes @ 0x42
   508  0000A2                     	ds	4
   509  0000A6                     format_double@weight:
   510                           	opt stack 0
   511                           
   512                           ; 4 bytes @ 0x46
   513  0000A6                     	ds	4
   514  0000AA                     format_double@digit:
   515                           	opt stack 0
   516                           
   517                           ; 2 bytes @ 0x4A
   518  0000AA                     	ds	2
   519  0000AC                     format_double@m:
   520                           	opt stack 0
   521                           
   522                           ; 2 bytes @ 0x4C
   523  0000AC                     	ds	2
   524  0000AE                     _measure_capacitance$920:
   525                           	opt stack 0
   526                           
   527                           ; 4 bytes @ 0x4E
   528  0000AE                     	ds	4
   529  0000B2                     _measure_capacitance$921:
   530                           	opt stack 0
   531                           
   532                           ; 4 bytes @ 0x52
   533  0000B2                     	ds	4
   534  0000B6                     _measure_capacitance$922:
   535                           	opt stack 0
   536                           
   537                           ; 4 bytes @ 0x56
   538  0000B6                     	ds	4
   539  0000BA                     measure_capacitance@unit:
   540                           	opt stack 0
   541                           
   542                           ; 1 bytes @ 0x5A
   543  0000BA                     	ds	1
   544  0000BB                     measure_capacitance@var:
   545                           	opt stack 0
   546                           
   547                           ; 2 bytes @ 0x5B
   548  0000BB                     	ds	2
   549  0000BD                     measure_capacitance@Cin:
   550                           	opt stack 0
   551                           
   552                           ; 4 bytes @ 0x5D
   553  0000BD                     	ds	4
   554                           tblptru	equ	0xFF8
   555                           tblptrh	equ	0xFF7
   556                           tblptrl	equ	0xFF6
   557                           tablat	equ	0xFF5
   558                           postinc0	equ	0xFEE
   559                           wreg	equ	0xFE8
   560                           
   561                           	psect	cstackCOMRAM
   562  000001                     __pcstackCOMRAM:
   563                           	opt stack 0
   564  000001                     ??_isr:
   565  000001                     
   566                           ; 1 bytes @ 0x0
   567  000001                     	ds	2
   568  000003                     ??_timer2_init:
   569  000003                     ?_measure_freq:
   570                           	opt stack 0
   571  000003                     ?___lwdiv:
   572                           	opt stack 0
   573  000003                     ?___lwmod:
   574                           	opt stack 0
   575  000003                     ?___flpack:
   576                           	opt stack 0
   577  000003                     ?_frexp:
   578                           	opt stack 0
   579  000003                     ?___flneg:
   580                           	opt stack 0
   581  000003                     ser_putch@c:
   582                           	opt stack 0
   583  000003                     print_reading@measurement:
   584                           	opt stack 0
   585  000003                     delay10ms@period_10ms:
   586                           	opt stack 0
   587  000003                     ___lwdiv@dividend:
   588                           	opt stack 0
   589  000003                     ___lwmod@dividend:
   590                           	opt stack 0
   591  000003                     ___flpack@arg:
   592                           	opt stack 0
   593  000003                     ___flge@ff1:
   594                           	opt stack 0
   595  000003                     ___flneg@f1:
   596                           	opt stack 0
   597  000003                     frexp@value:
   598                           	opt stack 0
   599                           
   600                           ; 4 bytes @ 0x2
   601  000003                     	ds	1
   602  000004                     ser_puts@s:
   603                           	opt stack 0
   604  000004                     timer2_init@ps_mode:
   605                           	opt stack 0
   606  000004                     output_putch@c:
   607                           	opt stack 0
   608                           
   609                           ; 1 bytes @ 0x3
   610  000004                     	ds	1
   611  000005                     ??_delay10ms:
   612  000005                     ??_measure_freq:
   613  000005                     timer2_init@ps:
   614                           	opt stack 0
   615  000005                     ___lwdiv@divisor:
   616                           	opt stack 0
   617  000005                     ___lwmod@divisor:
   618                           	opt stack 0
   619                           
   620                           ; 2 bytes @ 0x4
   621  000005                     	ds	2
   622  000007                     measure_freq@prev:
   623                           	opt stack 0
   624  000007                     ___flpack@exp:
   625                           	opt stack 0
   626  000007                     frexp@eptr:
   627                           	opt stack 0
   628  000007                     ___lwmod@counter:
   629                           	opt stack 0
   630  000007                     ___lwdiv@quotient:
   631                           	opt stack 0
   632  000007                     delay10ms@ms:
   633                           	opt stack 0
   634  000007                     ___flge@ff2:
   635                           	opt stack 0
   636                           
   637                           ; 4 bytes @ 0x6
   638  000007                     	ds	1
   639  000008                     ??_frexp:
   640  000008                     measure_freq@i:
   641                           	opt stack 0
   642  000008                     ___flpack@sign:
   643                           	opt stack 0
   644                           
   645                           ; 1 bytes @ 0x7
   646  000008                     	ds	1
   647  000009                     ??___flpack:
   648  000009                     ___lwdiv@counter:
   649                           	opt stack 0
   650  000009                     measure_freq@count:
   651                           	opt stack 0
   652                           
   653                           ; 2 bytes @ 0x8
   654  000009                     	ds	1
   655  00000A                     format_number@n:
   656                           	opt stack 0
   657                           
   658                           ; 2 bytes @ 0x9
   659  00000A                     	ds	1
   660  00000B                     delay10ms@run:
   661                           	opt stack 0
   662                           
   663                           ; 1 bytes @ 0xA
   664  00000B                     	ds	1
   665  00000C                     format_number@base:
   666                           	opt stack 0
   667                           
   668                           ; 1 bytes @ 0xB
   669  00000C                     	ds	1
   670  00000D                     ?___fldiv:
   671                           	opt stack 0
   672  00000D                     ?___awtofl:
   673                           	opt stack 0
   674  00000D                     ?___lltofl:
   675                           	opt stack 0
   676  00000D                     ?___lwtofl:
   677                           	opt stack 0
   678  00000D                     format_number@pad:
   679                           	opt stack 0
   680  00000D                     ___awtofl@c:
   681                           	opt stack 0
   682  00000D                     ___lwtofl@c:
   683                           	opt stack 0
   684  00000D                     ___fldiv@f1:
   685                           	opt stack 0
   686  00000D                     ___lltofl@c:
   687                           	opt stack 0
   688                           
   689                           ; 4 bytes @ 0xC
   690  00000D                     	ds	1
   691  00000E                     ??_format_number:
   692                           
   693                           ; 0 bytes @ 0xD
   694  00000E                     	ds	2
   695  000010                     format_number@buf:
   696                           	opt stack 0
   697                           
   698                           ; 32 bytes @ 0xF
   699  000010                     	ds	1
   700  000011                     ___awtofl@sign:
   701                           	opt stack 0
   702  000011                     ___fldiv@f2:
   703                           	opt stack 0
   704                           
   705                           ; 4 bytes @ 0x10
   706  000011                     	ds	4
   707  000015                     ___fldiv@f3:
   708                           	opt stack 0
   709                           
   710                           ; 4 bytes @ 0x14
   711  000015                     	ds	4
   712  000019                     ___fldiv@cntr:
   713                           	opt stack 0
   714                           
   715                           ; 1 bytes @ 0x18
   716  000019                     	ds	1
   717  00001A                     ___fldiv@exp:
   718                           	opt stack 0
   719                           
   720                           ; 1 bytes @ 0x19
   721  00001A                     	ds	1
   722  00001B                     ___fldiv@sign:
   723                           	opt stack 0
   724                           
   725                           ; 1 bytes @ 0x1A
   726  00001B                     	ds	1
   727  00001C                     ?___flmul:
   728                           	opt stack 0
   729  00001C                     ___flmul@f1:
   730                           	opt stack 0
   731                           
   732                           ; 4 bytes @ 0x1B
   733  00001C                     	ds	4
   734  000020                     ___flmul@f2:
   735                           	opt stack 0
   736                           
   737                           ; 4 bytes @ 0x1F
   738  000020                     	ds	4
   739  000024                     ??___flmul:
   740                           
   741                           ; 0 bytes @ 0x23
   742  000024                     	ds	12
   743  000030                     _format_number$128:
   744                           	opt stack 0
   745                           
   746                           ; 2 bytes @ 0x2F
   747  000030                     	ds	1
   748  000031                     ___flmul@exp:
   749                           	opt stack 0
   750                           
   751                           ; 1 bytes @ 0x30
   752  000031                     	ds	1
   753  000032                     format_number@padchar:
   754                           	opt stack 0
   755  000032                     ___flmul@sign:
   756                           	opt stack 0
   757                           
   758                           ; 1 bytes @ 0x31
   759  000032                     	ds	1
   760  000033                     format_number@di:
   761                           	opt stack 0
   762  000033                     ___flmul@f3_as_product:
   763                           	opt stack 0
   764                           
   765                           ; 4 bytes @ 0x32
   766  000033                     	ds	1
   767  000034                     format_number@i:
   768                           	opt stack 0
   769                           
   770                           ; 1 bytes @ 0x33
   771  000034                     	ds	1
   772  000035                     format_xint32@x:
   773                           	opt stack 0
   774                           
   775                           ; 4 bytes @ 0x34
   776  000035                     	ds	2
   777  000037                     ?___fladd:
   778                           	opt stack 0
   779  000037                     ___fladd@f1:
   780                           	opt stack 0
   781                           
   782                           ; 4 bytes @ 0x36
   783  000037                     	ds	2
   784  000039                     
   785                           ; 0 bytes @ 0x38
   786  000039                     	ds	2
   787  00003B                     ___fladd@f2:
   788                           	opt stack 0
   789                           
   790                           ; 4 bytes @ 0x3A
   791  00003B                     	ds	4
   792  00003F                     ??___fladd:
   793                           
   794                           ; 0 bytes @ 0x3E
   795  00003F                     	ds	1
   796  000040                     ___fladd@sign:
   797                           	opt stack 0
   798                           
   799                           ; 1 bytes @ 0x3F
   800  000040                     	ds	1
   801  000041                     ___fladd@exp2:
   802                           	opt stack 0
   803                           
   804                           ; 1 bytes @ 0x40
   805  000041                     	ds	1
   806  000042                     ___fladd@exp1:
   807                           	opt stack 0
   808                           
   809                           ; 1 bytes @ 0x41
   810  000042                     	ds	1
   811  000043                     ?___flsub:
   812                           	opt stack 0
   813  000043                     ?_eval_poly:
   814                           	opt stack 0
   815  000043                     ___flsub@f1:
   816                           	opt stack 0
   817  000043                     eval_poly@x:
   818                           	opt stack 0
   819                           
   820                           ; 4 bytes @ 0x42
   821  000043                     	ds	4
   822  000047                     eval_poly@d:
   823                           	opt stack 0
   824  000047                     ___flsub@f2:
   825                           	opt stack 0
   826                           
   827                           ; 4 bytes @ 0x46
   828  000047                     	ds	1
   829  000048                     eval_poly@n:
   830                           	opt stack 0
   831                           
   832                           ; 2 bytes @ 0x47
   833  000048                     	ds	2
   834  00004A                     ??_eval_poly:
   835                           
   836                           ; 0 bytes @ 0x49
   837  00004A                     	ds	1
   838  00004B                     eval_poly@res:
   839                           	opt stack 0
   840                           
   841                           ; 4 bytes @ 0x4A
   842  00004B                     	ds	4
   843  00004F                     ?_ldexp:
   844                           	opt stack 0
   845  00004F                     ?_log:
   846                           	opt stack 0
   847  00004F                     ldexp@value:
   848                           	opt stack 0
   849  00004F                     log@x:
   850                           	opt stack 0
   851                           
   852                           ; 4 bytes @ 0x4E
   853  00004F                     	ds	4
   854  000053                     ldexp@newexp:
   855                           	opt stack 0
   856  000053                     log@exponent:
   857                           	opt stack 0
   858                           
   859                           ; 2 bytes @ 0x52
   860  000053                     	ds	2
   861  000055                     ??_ldexp:
   862  000055                     ?_log10:
   863                           	opt stack 0
   864  000055                     log10@x:
   865                           	opt stack 0
   866                           
   867                           ; 4 bytes @ 0x54
   868  000055                     	ds	4
   869  000059                     ___fltol@sign1:
   870                           	opt stack 0
   871                           
   872                           ; 1 bytes @ 0x58
   873  000059                     	ds	1
   874  00005A                     ___fltol@exp1:
   875                           	opt stack 0
   876                           
   877                           ; 1 bytes @ 0x59
   878  00005A                     	ds	1
   879  00005B                     ___altofl@sign:
   880                           	opt stack 0
   881                           
   882                           ; 1 bytes @ 0x5A
   883  00005B                     	ds	1
   884  00005C                     tblptru	equ	0xFF8
   885                           tblptrh	equ	0xFF7
   886                           tblptrl	equ	0xFF6
   887                           tablat	equ	0xFF5
   888                           postinc0	equ	0xFEE
   889                           wreg	equ	0xFE8
   890                           
   891                           ; 0 bytes @ 0x5B
   892 ;;
   893 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   894 ;;
   895 ;; *************** function _main *****************
   896 ;; Defined at:
   897 ;;		line 115 in file "../../../src/LC-meter.c"
   898 ;; Parameters:    Size  Location     Type
   899 ;;		None
   900 ;; Auto vars:     Size  Location     Type
   901 ;;		None
   902 ;; Return value:  Size  Location     Type
   903 ;;		None               void
   904 ;; Registers used:
   905 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   906 ;; Tracked objects:
   907 ;;		On entry : 0/0
   908 ;;		On exit  : F/0
   909 ;;		Unchanged: 0/0
   910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   911 ;;      Params:         0       0       0       0       0       0       0       0       0
   912 ;;      Locals:         0       0       0       0       0       0       0       0       0
   913 ;;      Temps:          0       0       0       0       0       0       0       0       0
   914 ;;      Totals:         0       0       0       0       0       0       0       0       0
   915 ;;Total ram usage:        0 bytes
   916 ;; Hardware stack levels required when called:    8
   917 ;; This function calls:
   918 ;;		_calibrate
   919 ;;		_delay10ms
   920 ;;		_indicator
   921 ;;		_measure_capacitance
   922 ;;		_measure_inductance
   923 ;;		_ser_init
   924 ;;		_ser_puts
   925 ;;		_timer2_init
   926 ;; This function is called by:
   927 ;;		Startup code after reset
   928 ;; This function uses a non-reentrant model
   929 ;;
   930                           
   931                           	psect	text0
   932  001C3E                     __ptext0:
   933                           	opt stack 0
   934  001C3E                     _main:
   935                           	opt stack 23
   936                           
   937                           ;LC-meter.c: 116: bres = msecpart = msecs = seconds = 0;
   938                           
   939                           ;incstack = 0
   940  001C3E  0100               	movlb	0	; () banked
   941  001C40  6BDD               	clrf	_seconds& (0+255),b	;volatile
   942  001C42  6BDE               	clrf	(_seconds+1)& (0+255),b	;volatile
   943  001C44  6BDF               	clrf	(_seconds+2)& (0+255),b	;volatile
   944  001C46  6BE0               	clrf	(_seconds+3)& (0+255),b	;volatile
   945  001C48  C0DD  F0D9         	movff	_seconds,_msecs	;volatile
   946  001C4C  C0DE  F0DA         	movff	_seconds+1,_msecs+1	;volatile
   947  001C50  C0DF  F0DB         	movff	_seconds+2,_msecs+2	;volatile
   948  001C54  C0E0  F0DC         	movff	_seconds+3,_msecs+3	;volatile
   949  001C58  C0D9  F0F4         	movff	_msecs,_msecpart	;volatile
   950  001C5C  C0DA  F0F5         	movff	_msecs+1,_msecpart+1	;volatile
   951  001C60  C0F4  F0F2         	movff	_msecpart,_bres	;volatile
   952  001C64  C0F5  F0F3         	movff	_msecpart+1,_bres+1	;volatile
   953                           
   954                           ;LC-meter.c: 118: CCal = 1000;
   955  001C68  6BEE               	clrf	_CCal& (0+255),b
   956  001C6A  6BEF               	clrf	(_CCal+1)& (0+255),b
   957  001C6C  0E7A               	movlw	122
   958  001C6E  6FF0               	movwf	(_CCal+2)& (0+255),b
   959  001C70  0E44               	movlw	68
   960  001C72  6FF1               	movwf	(_CCal+3)& (0+255),b
   961                           
   962                           ;LC-meter.c: 127: TRISA = 0b11001111;
   963  001C74  0ECF               	movlw	207
   964  001C76  6E92               	movwf	3986,c	;volatile
   965                           
   966                           ; BSR set to: 0
   967                           ;LC-meter.c: 129: T0CS = 1;
   968  001C78  8AD5               	bsf	4053,5,c	;volatile
   969                           
   970                           ; BSR set to: 0
   971                           ;LC-meter.c: 130: T0SE = 1;
   972  001C7A  88D5               	bsf	4053,4,c	;volatile
   973                           
   974                           ; BSR set to: 0
   975                           ;LC-meter.c: 141: nRBPU = 0;
   976  001C7C  9EF1               	bcf	intcon2,7,c	;volatile
   977                           
   978                           ; BSR set to: 0
   979                           ;LC-meter.c: 144: TRISC1 = 0;
   980  001C7E  9294               	bcf	3988,1,c	;volatile
   981                           
   982                           ; BSR set to: 0
   983                           ;LC-meter.c: 145: RC1 = ((1) == 0);
   984  001C80  9282               	bcf	3970,1,c	;volatile
   985                           
   986                           ; BSR set to: 0
   987                           ;LC-meter.c: 147: SSPEN = 0;
   988  001C82  9AC6               	bcf	4038,5,c	;volatile
   989                           
   990                           ; BSR set to: 0
   991                           ;LC-meter.c: 152: timer2_init(0b000 | 0x80);
   992  001C84  0E80               	movlw	128
   993  001C86  EC57  F012         	call	_timer2_init
   994                           
   995                           ;LC-meter.c: 157: TRISC1 = 0;
   996  001C8A  9294               	bcf	3988,1,c	;volatile
   997                           
   998                           ;LC-meter.c: 162: TRISC0 = 1;
   999  001C8C  8094               	bsf	3988,0,c	;volatile
  1000                           
  1001                           ;LC-meter.c: 163: TRISC2 = 1;
  1002  001C8E  8494               	bsf	3988,2,c	;volatile
  1003                           
  1004                           ;LC-meter.c: 173: TRISC |= (1 << 4);
  1005  001C90  8894               	bsf	3988,4,c	;volatile
  1006                           
  1007                           ;LC-meter.c: 174: TRISC &= ~(1 << 5);
  1008  001C92  9A94               	bcf	3988,5,c	;volatile
  1009                           
  1010                           ;LC-meter.c: 176: PORTC &= ~(1 << 5);
  1011  001C94  9A82               	bcf	3970,5,c	;volatile
  1012                           
  1013                           ;LC-meter.c: 177: delay10ms(50);
  1014  001C96  6A04               	clrf	delay10ms@period_10ms+1,c
  1015  001C98  0E32               	movlw	50
  1016  001C9A  6E03               	movwf	delay10ms@period_10ms,c
  1017  001C9C  EC2A  F012         	call	_delay10ms	;wreg free
  1018                           
  1019                           ; BSR set to: 0
  1020                           ;LC-meter.c: 178: PORTC |= (1 << 5);
  1021  001CA0  8A82               	bsf	3970,5,c	;volatile
  1022                           
  1023                           ; BSR set to: 0
  1024                           ;LC-meter.c: 179: delay10ms(50);
  1025  001CA2  6A04               	clrf	delay10ms@period_10ms+1,c
  1026  001CA4  0E32               	movlw	50
  1027  001CA6  6E03               	movwf	delay10ms@period_10ms,c
  1028  001CA8  EC2A  F012         	call	_delay10ms	;wreg free
  1029                           
  1030                           ; BSR set to: 0
  1031                           ;LC-meter.c: 180: PORTC &= ~(1 << 5);
  1032  001CAC  9A82               	bcf	3970,5,c	;volatile
  1033                           
  1034                           ; BSR set to: 0
  1035                           ;LC-meter.c: 181: delay10ms(50);
  1036  001CAE  6A04               	clrf	delay10ms@period_10ms+1,c
  1037  001CB0  0E32               	movlw	50
  1038  001CB2  6E03               	movwf	delay10ms@period_10ms,c
  1039  001CB4  EC2A  F012         	call	_delay10ms	;wreg free
  1040                           
  1041                           ; BSR set to: 0
  1042                           ;LC-meter.c: 182: PORTC |= (1 << 5);
  1043  001CB8  8A82               	bsf	3970,5,c	;volatile
  1044                           
  1045                           ; BSR set to: 0
  1046                           ;LC-meter.c: 183: delay10ms(50);
  1047  001CBA  6A04               	clrf	delay10ms@period_10ms+1,c
  1048  001CBC  0E32               	movlw	50
  1049  001CBE  6E03               	movwf	delay10ms@period_10ms,c
  1050  001CC0  EC2A  F012         	call	_delay10ms	;wreg free
  1051                           
  1052                           ; BSR set to: 0
  1053                           ;LC-meter.c: 184: PORTC &= ~(1 << 5);
  1054  001CC4  9A82               	bcf	3970,5,c	;volatile
  1055                           
  1056                           ; BSR set to: 0
  1057                           ;LC-meter.c: 187: ser_init();
  1058  001CC6  ECA9  F013         	call	_ser_init	;wreg free
  1059                           
  1060                           ; BSR set to: 0
  1061                           ;LC-meter.c: 192: TRISC &= ~0b01000000;
  1062  001CCA  9C94               	bcf	3988,6,c	;volatile
  1063                           
  1064                           ; BSR set to: 0
  1065                           ;LC-meter.c: 194: PEIE = 1;
  1066  001CCC  8CF2               	bsf	intcon,6,c	;volatile
  1067                           
  1068                           ; BSR set to: 0
  1069                           ;LC-meter.c: 195: GIE = 1;
  1070  001CCE  8EF2               	bsf	intcon,7,c	;volatile
  1071                           
  1072                           ; BSR set to: 0
  1073                           ;LC-meter.c: 214: delay10ms(200);
  1074  001CD0  6A04               	clrf	delay10ms@period_10ms+1,c
  1075  001CD2  0EC8               	movlw	200
  1076  001CD4  6E03               	movwf	delay10ms@period_10ms,c
  1077  001CD6  EC2A  F012         	call	_delay10ms	;wreg free
  1078                           
  1079                           ; BSR set to: 0
  1080                           ;LC-meter.c: 217: calibrate();
  1081  001CDA  EC69  F010         	call	_calibrate	;wreg free
  1082  001CDE                     l3595:
  1083                           
  1084                           ;LC-meter.c: 230: ser_puts("...\r\n");
  1085  001CDE  0E55               	movlw	STR_1& (0+255)
  1086  001CE0  EC95  F013         	call	_ser_puts
  1087                           
  1088                           ;LC-meter.c: 231: if(RC4)
  1089  001CE4  A882               	btfss	3970,4,c	;volatile
  1090  001CE6  D003               	goto	l3601
  1091                           
  1092                           ;LC-meter.c: 232: measure_capacitance();
  1093  001CE8  ECC5  F006         	call	_measure_capacitance	;wreg free
  1094  001CEC  D002               	goto	l3603
  1095  001CEE                     l3601:
  1096                           
  1097                           ;LC-meter.c: 233: else
  1098                           ;LC-meter.c: 234: measure_inductance();
  1099  001CEE  EC3C  F004         	call	_measure_inductance	;wreg free
  1100  001CF2                     l3603:
  1101                           
  1102                           ; BSR set to: 0
  1103                           ;LC-meter.c: 236: indicator(1);
  1104  001CF2  0E01               	movlw	1
  1105  001CF4  ECE6  F013         	call	_indicator
  1106                           
  1107                           ; BSR set to: 0
  1108                           ;LC-meter.c: 237: delay10ms(30);
  1109  001CF8  6A04               	clrf	delay10ms@period_10ms+1,c
  1110  001CFA  0E1E               	movlw	30
  1111  001CFC  6E03               	movwf	delay10ms@period_10ms,c
  1112  001CFE  EC2A  F012         	call	_delay10ms	;wreg free
  1113                           
  1114                           ; BSR set to: 0
  1115                           ;LC-meter.c: 238: indicator(0);
  1116  001D02  0E00               	movlw	0
  1117  001D04  ECE6  F013         	call	_indicator
  1118                           
  1119                           ; BSR set to: 0
  1120                           ;LC-meter.c: 239: delay10ms(20);
  1121  001D08  6A04               	clrf	delay10ms@period_10ms+1,c
  1122  001D0A  0E14               	movlw	20
  1123  001D0C  6E03               	movwf	delay10ms@period_10ms,c
  1124  001D0E  EC2A  F012         	call	_delay10ms	;wreg free
  1125                           
  1126                           ;LC-meter.c: 240: }
  1127  001D12  D7E5               	goto	l3595
  1128  001D14                     __end_of_main:
  1129                           	opt stack 0
  1130                           tblptru	equ	0xFF8
  1131                           tblptrh	equ	0xFF7
  1132                           tblptrl	equ	0xFF6
  1133                           tablat	equ	0xFF5
  1134                           intcon	equ	0xFF2
  1135                           intcon2	equ	0xFF1
  1136                           postinc0	equ	0xFEE
  1137                           wreg	equ	0xFE8
  1138                           
  1139 ;; *************** function _timer2_init *****************
  1140 ;; Defined at:
  1141 ;;		line 81 in file "../../../lib/timer.c"
  1142 ;; Parameters:    Size  Location     Type
  1143 ;;  ps_mode         1    wreg     unsigned char 
  1144 ;; Auto vars:     Size  Location     Type
  1145 ;;  ps_mode         1    3[COMRAM] unsigned char 
  1146 ;;  postscaler      1    0        unsigned char 
  1147 ;;  ps              1    4[COMRAM] unsigned char 
  1148 ;; Return value:  Size  Location     Type
  1149 ;;		None               void
  1150 ;; Registers used:
  1151 ;;		wreg, status,2, status,0
  1152 ;; Tracked objects:
  1153 ;;		On entry : F/0
  1154 ;;		On exit  : 0/0
  1155 ;;		Unchanged: 0/0
  1156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1157 ;;      Params:         0       0       0       0       0       0       0       0       0
  1158 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1159 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1160 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1161 ;;Total ram usage:        4 bytes
  1162 ;; Hardware stack levels used:    1
  1163 ;; Hardware stack levels required when called:    1
  1164 ;; This function calls:
  1165 ;;		Nothing
  1166 ;; This function is called by:
  1167 ;;		_main
  1168 ;; This function uses a non-reentrant model
  1169 ;;
  1170                           
  1171                           	psect	text1
  1172  0024AE                     __ptext1:
  1173                           	opt stack 0
  1174  0024AE                     _timer2_init:
  1175                           	opt stack 29
  1176                           
  1177                           ; BSR set to: 0
  1178                           ;incstack = 0
  1179                           ;timer2_init@ps_mode stored from wreg
  1180  0024AE  6E04               	movwf	timer2_init@ps_mode,c
  1181                           
  1182                           ; BSR set to: 0
  1183                           ;timer.c: 82: unsigned char ps = ps_mode & 0b1111;
  1184  0024B0  5004               	movf	timer2_init@ps_mode,w,c
  1185  0024B2  0B0F               	andlw	15
  1186  0024B4  6E05               	movwf	timer2_init@ps,c
  1187                           
  1188                           ; BSR set to: 0
  1189                           ;timer.c: 86: TOUTPS0 = postscaler & 1;
  1190                           
  1191                           ; BSR set to: 0
  1192  0024B6  96CA               	bcf	4042,3,c	;volatile
  1193                           
  1194                           ;timer.c: 87: TOUTPS1 = (postscaler >> 1) & 1;
  1195  0024B8  98CA               	bcf	4042,4,c	;volatile
  1196                           
  1197                           ;timer.c: 88: TOUTPS2 = (postscaler >> 2) & 1;
  1198  0024BA  9ACA               	bcf	4042,5,c	;volatile
  1199                           
  1200                           ;timer.c: 90: T2CKPS0 = (ps >> 1) & 1;
  1201  0024BC  C005  F003         	movff	timer2_init@ps,??_timer2_init
  1202  0024C0  90D8               	bcf	status,0,c
  1203  0024C2  3203               	rrcf	??_timer2_init,f,c
  1204  0024C4  3003               	rrcf	??_timer2_init,w,c
  1205  0024C6  B0D8               	btfsc	status,0,c
  1206  0024C8  D002               	bra	u2255
  1207  0024CA  90CA               	bcf	4042,0,c	;volatile
  1208  0024CC  D001               	bra	u2256
  1209  0024CE                     u2255:
  1210  0024CE  80CA               	bsf	4042,0,c	;volatile
  1211  0024D0                     u2256:
  1212                           
  1213                           ;timer.c: 91: T2CKPS1 = (ps >> 2) & 1;
  1214  0024D0  C005  F003         	movff	timer2_init@ps,??_timer2_init
  1215  0024D4  90D8               	bcf	status,0,c
  1216  0024D6  3203               	rrcf	??_timer2_init,f,c
  1217  0024D8  90D8               	bcf	status,0,c
  1218  0024DA  3203               	rrcf	??_timer2_init,f,c
  1219  0024DC  3003               	rrcf	??_timer2_init,w,c
  1220  0024DE  B0D8               	btfsc	status,0,c
  1221  0024E0  D002               	bra	u2265
  1222  0024E2  92CA               	bcf	4042,1,c	;volatile
  1223  0024E4  D001               	bra	u2266
  1224  0024E6                     u2265:
  1225  0024E6  82CA               	bsf	4042,1,c	;volatile
  1226  0024E8                     u2266:
  1227                           
  1228                           ;timer.c: 93: TMR2 = 0;
  1229  0024E8  6ACC               	clrf	4044,c	;volatile
  1230                           
  1231                           ;timer.c: 95: TMR2ON = 1;
  1232  0024EA  84CA               	bsf	4042,2,c	;volatile
  1233                           
  1234                           ;timer.c: 97: TMR2IF = 0;
  1235  0024EC  929E               	bcf	3998,1,c	;volatile
  1236                           
  1237                           ;timer.c: 98: TMR2IE = !!(ps_mode & 0x80);
  1238  0024EE  AE04               	btfss	timer2_init@ps_mode,7,c
  1239  0024F0  D002               	goto	u2270
  1240  0024F2  829D               	bsf	3997,1,c	;volatile
  1241  0024F4  D001               	goto	l135
  1242  0024F6                     u2270:
  1243  0024F6  929D               	bcf	3997,1,c	;volatile
  1244  0024F8                     l135:
  1245  0024F8  0012               	return		;funcret
  1246  0024FA                     __end_of_timer2_init:
  1247                           	opt stack 0
  1248                           tblptru	equ	0xFF8
  1249                           tblptrh	equ	0xFF7
  1250                           tblptrl	equ	0xFF6
  1251                           tablat	equ	0xFF5
  1252                           intcon	equ	0xFF2
  1253                           intcon2	equ	0xFF1
  1254                           postinc0	equ	0xFEE
  1255                           wreg	equ	0xFE8
  1256                           status	equ	0xFD8
  1257                           
  1258 ;; *************** function _ser_init *****************
  1259 ;; Defined at:
  1260 ;;		line 125 in file "../../../lib/ser.c"
  1261 ;; Parameters:    Size  Location     Type
  1262 ;;		None
  1263 ;; Auto vars:     Size  Location     Type
  1264 ;;		None
  1265 ;; Return value:  Size  Location     Type
  1266 ;;		None               void
  1267 ;; Registers used:
  1268 ;;		wreg, status,2
  1269 ;; Tracked objects:
  1270 ;;		On entry : F/0
  1271 ;;		On exit  : F/0
  1272 ;;		Unchanged: 0/0
  1273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1274 ;;      Params:         0       0       0       0       0       0       0       0       0
  1275 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1276 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1277 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1278 ;;Total ram usage:        0 bytes
  1279 ;; Hardware stack levels used:    1
  1280 ;; Hardware stack levels required when called:    1
  1281 ;; This function calls:
  1282 ;;		Nothing
  1283 ;; This function is called by:
  1284 ;;		_main
  1285 ;; This function uses a non-reentrant model
  1286 ;;
  1287                           
  1288                           	psect	text2
  1289  002752                     __ptext2:
  1290                           	opt stack 0
  1291  002752                     _ser_init:
  1292                           	opt stack 29
  1293                           
  1294                           ; BSR set to: 0
  1295                           ;ser.c: 128: TRISC6 = 1;
  1296                           
  1297                           ;incstack = 0
  1298  002752  8C94               	bsf	3988,6,c	;volatile
  1299                           
  1300                           ;ser.c: 129: RC7 = 1;
  1301  002754  8E82               	bsf	3970,7,c	;volatile
  1302                           
  1303                           ;ser.c: 131: BRGH = 1;
  1304  002756  84AC               	bsf	4012,2,c	;volatile
  1305                           
  1306                           ; BSR set to: 0
  1307                           ;ser.c: 136: SPBRG = ser_brg;
  1308  002758  0E1F               	movlw	31
  1309  00275A  6EAF               	movwf	4015,c	;volatile
  1310                           
  1311                           ; BSR set to: 0
  1312                           ;ser.c: 139: TX9 = 0;
  1313  00275C  9CAC               	bcf	4012,6,c	;volatile
  1314                           
  1315                           ; BSR set to: 0
  1316                           ;ser.c: 140: RX9 = 0;
  1317  00275E  9CAB               	bcf	4011,6,c	;volatile
  1318                           
  1319                           ; BSR set to: 0
  1320                           ;ser.c: 142: SYNC = 0;
  1321  002760  98AC               	bcf	4012,4,c	;volatile
  1322                           
  1323                           ; BSR set to: 0
  1324                           ;ser.c: 143: SPEN = 1;
  1325  002762  8EAB               	bsf	4011,7,c	;volatile
  1326                           
  1327                           ; BSR set to: 0
  1328                           ;ser.c: 144: CREN = 1;
  1329  002764  88AB               	bsf	4011,4,c	;volatile
  1330                           
  1331                           ; BSR set to: 0
  1332                           ;ser.c: 145: TXIE = 0;
  1333  002766  989D               	bcf	3997,4,c	;volatile
  1334                           
  1335                           ; BSR set to: 0
  1336                           ;ser.c: 147: TXEN = 1;
  1337  002768  8AAC               	bsf	4012,5,c	;volatile
  1338                           
  1339                           ; BSR set to: 0
  1340                           ;ser.c: 148: PEIE = 1;
  1341  00276A  8CF2               	bsf	intcon,6,c	;volatile
  1342                           
  1343                           ; BSR set to: 0
  1344                           ;ser.c: 150: rxiptr = rxoptr = txiptr = txoptr = 0;
  1345  00276C  6A5D               	clrf	_txoptr,c	;volatile
  1346  00276E  6A5C               	clrf	_txiptr,c	;volatile
  1347  002770  6BE8               	clrf	_rxoptr& (0+255),b	;volatile
  1348  002772  6BE7               	clrf	_rxiptr& (0+255),b	;volatile
  1349                           
  1350                           ; BSR set to: 0
  1351  002774  0012               	return		;funcret
  1352  002776                     __end_of_ser_init:
  1353                           	opt stack 0
  1354                           tblptru	equ	0xFF8
  1355                           tblptrh	equ	0xFF7
  1356                           tblptrl	equ	0xFF6
  1357                           tablat	equ	0xFF5
  1358                           intcon	equ	0xFF2
  1359                           intcon2	equ	0xFF1
  1360                           postinc0	equ	0xFEE
  1361                           wreg	equ	0xFE8
  1362                           status	equ	0xFD8
  1363                           
  1364 ;; *************** function _measure_inductance *****************
  1365 ;; Defined at:
  1366 ;;		line 469 in file "../../../src/LC-meter.c"
  1367 ;; Parameters:    Size  Location     Type
  1368 ;;		None
  1369 ;; Auto vars:     Size  Location     Type
  1370 ;;  Lin             4   51[BANK0 ] unsigned char 
  1371 ;;  denominator     4   16[BANK0 ] unsigned char 
  1372 ;;  numerator       4   12[BANK0 ] unsigned char 
  1373 ;;  var             2   49[BANK0 ] unsigned short 
  1374 ;;  unit            1   36[BANK0 ] unsigned char 
  1375 ;; Return value:  Size  Location     Type
  1376 ;;		None               void
  1377 ;; Registers used:
  1378 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1379 ;; Tracked objects:
  1380 ;;		On entry : 0/0
  1381 ;;		On exit  : F/0
  1382 ;;		Unchanged: 0/0
  1383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1384 ;;      Params:         0       0       0       0       0       0       0       0       0
  1385 ;;      Locals:         0      43       0       0       0       0       0       0       0
  1386 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1387 ;;      Totals:         0      43       0       0       0       0       0       0       0
  1388 ;;Total ram usage:       43 bytes
  1389 ;; Hardware stack levels used:    1
  1390 ;; Hardware stack levels required when called:    4
  1391 ;; This function calls:
  1392 ;;		___fldiv
  1393 ;;		___flge
  1394 ;;		___flmul
  1395 ;;		___flsub
  1396 ;;		___fltol
  1397 ;;		___lwtofl
  1398 ;;		_measure_freq
  1399 ;;		_print_reading
  1400 ;;		_print_unit
  1401 ;; This function is called by:
  1402 ;;		_main
  1403 ;; This function uses a non-reentrant model
  1404 ;;
  1405                           
  1406                           	psect	text3
  1407  000878                     __ptext3:
  1408                           	opt stack 0
  1409  000878                     _measure_inductance:
  1410                           	opt stack 26
  1411                           
  1412                           ;LC-meter.c: 470: unsigned char unit;
  1413                           ;LC-meter.c: 471: unsigned short int var;
  1414                           ;LC-meter.c: 473: double Lin, numerator, denominator;
  1415                           ;LC-meter.c: 479: var = measure_freq();
  1416                           
  1417                           ; BSR set to: 0
  1418                           ;incstack = 0
  1419  000878  EC55  F011         	call	_measure_freq	;wreg free
  1420  00087C  C003  F091         	movff	?_measure_freq,measure_inductance@var
  1421  000880  C004  F092         	movff	?_measure_freq+1,measure_inductance@var+1
  1422                           
  1423                           ;LC-meter.c: 481: F3 = (double)var;
  1424  000884  C091  F00D         	movff	measure_inductance@var,___lwtofl@c
  1425  000888  C092  F00E         	movff	measure_inductance@var+1,___lwtofl@c+1
  1426  00088C  EC80  F013         	call	___lwtofl	;wreg free
  1427  000890  C00D  F0D5         	movff	?___lwtofl,_F3
  1428  000894  C00E  F0D6         	movff	?___lwtofl+1,_F3+1
  1429  000898  C00F  F0D7         	movff	?___lwtofl+2,_F3+2
  1430  00089C  C010  F0D8         	movff	?___lwtofl+3,_F3+3
  1431                           
  1432                           ;LC-meter.c: 482: if(F3 > F1)
  1433  0008A0  C0EA  F003         	movff	_F1,___flge@ff1
  1434  0008A4  C0EB  F004         	movff	_F1+1,___flge@ff1+1
  1435  0008A8  C0EC  F005         	movff	_F1+2,___flge@ff1+2
  1436  0008AC  C0ED  F006         	movff	_F1+3,___flge@ff1+3
  1437  0008B0  C0D5  F007         	movff	_F3,___flge@ff2
  1438  0008B4  C0D6  F008         	movff	_F3+1,___flge@ff2+1
  1439  0008B8  C0D7  F009         	movff	_F3+2,___flge@ff2+2
  1440  0008BC  C0D8  F00A         	movff	_F3+3,___flge@ff2+3
  1441  0008C0  EC7D  F012         	call	___flge	;wreg free
  1442  0008C4  E208               	bc	l3487
  1443                           
  1444                           ;LC-meter.c: 483: F3 = F1;
  1445  0008C6  C0EA  F0D5         	movff	_F1,_F3
  1446  0008CA  C0EB  F0D6         	movff	_F1+1,_F3+1
  1447  0008CE  C0EC  F0D7         	movff	_F1+2,_F3+2
  1448  0008D2  C0ED  F0D8         	movff	_F1+3,_F3+3
  1449  0008D6                     l3487:
  1450                           
  1451                           ;LC-meter.c: 485: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 *
      +                           100);
  1452  0008D6  C0D1  F047         	movff	_F2,___flsub@f2
  1453  0008DA  C0D2  F048         	movff	_F2+1,___flsub@f2+1
  1454  0008DE  C0D3  F049         	movff	_F2+2,___flsub@f2+2
  1455  0008E2  C0D4  F04A         	movff	_F2+3,___flsub@f2+3
  1456  0008E6  C0D1  F043         	movff	_F2,___flsub@f1
  1457  0008EA  C0D2  F044         	movff	_F2+1,___flsub@f1+1
  1458  0008EE  C0D3  F045         	movff	_F2+2,___flsub@f1+2
  1459  0008F2  C0D4  F046         	movff	_F2+3,___flsub@f1+3
  1460  0008F6  ECEC  F012         	call	___flsub	;wreg free
  1461  0008FA  C043  F074         	movff	?___flsub,_measure_inductance$923
  1462  0008FE  C044  F075         	movff	?___flsub+1,_measure_inductance$923+1
  1463  000902  C045  F076         	movff	?___flsub+2,_measure_inductance$923+2
  1464  000906  C046  F077         	movff	?___flsub+3,_measure_inductance$923+3
  1465                           
  1466                           ;LC-meter.c: 485: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 *
      +                           100);
  1467  00090A  C074  F047         	movff	_measure_inductance$923,___flsub@f2
  1468  00090E  C075  F048         	movff	_measure_inductance$923+1,___flsub@f2+1
  1469  000912  C076  F049         	movff	_measure_inductance$923+2,___flsub@f2+2
  1470  000916  C077  F04A         	movff	_measure_inductance$923+3,___flsub@f2+3
  1471  00091A  C0EA  F020         	movff	_F1,___flmul@f2
  1472  00091E  C0EB  F021         	movff	_F1+1,___flmul@f2+1
  1473  000922  C0EC  F022         	movff	_F1+2,___flmul@f2+2
  1474  000926  C0ED  F023         	movff	_F1+3,___flmul@f2+3
  1475  00092A  C0EA  F01C         	movff	_F1,___flmul@f1
  1476  00092E  C0EB  F01D         	movff	_F1+1,___flmul@f1+1
  1477  000932  C0EC  F01E         	movff	_F1+2,___flmul@f1+2
  1478  000936  C0ED  F01F         	movff	_F1+3,___flmul@f1+3
  1479  00093A  ECE5  F009         	call	___flmul	;wreg free
  1480  00093E  C01C  F043         	movff	?___flmul,___flsub@f1
  1481  000942  C01D  F044         	movff	?___flmul+1,___flsub@f1+1
  1482  000946  C01E  F045         	movff	?___flmul+2,___flsub@f1+2
  1483  00094A  C01F  F046         	movff	?___flmul+3,___flsub@f1+3
  1484  00094E  ECEC  F012         	call	___flsub	;wreg free
  1485  000952  C043  F085         	movff	?___flsub,_measure_inductance$924
  1486  000956  C044  F086         	movff	?___flsub+1,_measure_inductance$924+1
  1487  00095A  C045  F087         	movff	?___flsub+2,_measure_inductance$924+2
  1488  00095E  C046  F088         	movff	?___flsub+3,_measure_inductance$924+3
  1489                           
  1490                           ;LC-meter.c: 485: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 *
      +                           100);
  1491  000962  C0D5  F020         	movff	_F3,___flmul@f2
  1492  000966  C0D6  F021         	movff	_F3+1,___flmul@f2+1
  1493  00096A  C0D7  F022         	movff	_F3+2,___flmul@f2+2
  1494  00096E  C0D8  F023         	movff	_F3+3,___flmul@f2+3
  1495  000972  C0D5  F01C         	movff	_F3,___flmul@f1
  1496  000976  C0D6  F01D         	movff	_F3+1,___flmul@f1+1
  1497  00097A  C0D7  F01E         	movff	_F3+2,___flmul@f1+2
  1498  00097E  C0D8  F01F         	movff	_F3+3,___flmul@f1+3
  1499  000982  ECE5  F009         	call	___flmul	;wreg free
  1500  000986  C01C  F047         	movff	?___flmul,___flsub@f2
  1501  00098A  C01D  F048         	movff	?___flmul+1,___flsub@f2+1
  1502  00098E  C01E  F049         	movff	?___flmul+2,___flsub@f2+2
  1503  000992  C01F  F04A         	movff	?___flmul+3,___flsub@f2+3
  1504  000996  C0EA  F020         	movff	_F1,___flmul@f2
  1505  00099A  C0EB  F021         	movff	_F1+1,___flmul@f2+1
  1506  00099E  C0EC  F022         	movff	_F1+2,___flmul@f2+2
  1507  0009A2  C0ED  F023         	movff	_F1+3,___flmul@f2+3
  1508  0009A6  C0EA  F01C         	movff	_F1,___flmul@f1
  1509  0009AA  C0EB  F01D         	movff	_F1+1,___flmul@f1+1
  1510  0009AE  C0EC  F01E         	movff	_F1+2,___flmul@f1+2
  1511  0009B2  C0ED  F01F         	movff	_F1+3,___flmul@f1+3
  1512  0009B6  ECE5  F009         	call	___flmul	;wreg free
  1513  0009BA  C01C  F043         	movff	?___flmul,___flsub@f1
  1514  0009BE  C01D  F044         	movff	?___flmul+1,___flsub@f1+1
  1515  0009C2  C01E  F045         	movff	?___flmul+2,___flsub@f1+2
  1516  0009C6  C01F  F046         	movff	?___flmul+3,___flsub@f1+3
  1517  0009CA  ECEC  F012         	call	___flsub	;wreg free
  1518  0009CE  C043  F089         	movff	?___flsub,_measure_inductance$925
  1519  0009D2  C044  F08A         	movff	?___flsub+1,_measure_inductance$925+1
  1520  0009D6  C045  F08B         	movff	?___flsub+2,_measure_inductance$925+2
  1521  0009DA  C046  F08C         	movff	?___flsub+3,_measure_inductance$925+3
  1522                           
  1523                           ;LC-meter.c: 485: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 *
      +                           100);
  1524  0009DE  C085  F020         	movff	_measure_inductance$924,___flmul@f2
  1525  0009E2  C086  F021         	movff	_measure_inductance$924+1,___flmul@f2+1
  1526  0009E6  C087  F022         	movff	_measure_inductance$924+2,___flmul@f2+2
  1527  0009EA  C088  F023         	movff	_measure_inductance$924+3,___flmul@f2+3
  1528  0009EE  C089  F01C         	movff	_measure_inductance$925,___flmul@f1
  1529  0009F2  C08A  F01D         	movff	_measure_inductance$925+1,___flmul@f1+1
  1530  0009F6  C08B  F01E         	movff	_measure_inductance$925+2,___flmul@f1+2
  1531  0009FA  C08C  F01F         	movff	_measure_inductance$925+3,___flmul@f1+3
  1532  0009FE  ECE5  F009         	call	___flmul	;wreg free
  1533  000A02  C01C  F08D         	movff	?___flmul,_measure_inductance$926
  1534  000A06  C01D  F08E         	movff	?___flmul+1,_measure_inductance$926+1
  1535  000A0A  C01E  F08F         	movff	?___flmul+2,_measure_inductance$926+2
  1536  000A0E  C01F  F090         	movff	?___flmul+3,_measure_inductance$926+3
  1537                           
  1538                           ;LC-meter.c: 485: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 *
      +                           100);
  1539  000A12  C08D  F01C         	movff	_measure_inductance$926,___flmul@f1
  1540  000A16  C08E  F01D         	movff	_measure_inductance$926+1,___flmul@f1+1
  1541  000A1A  C08F  F01E         	movff	_measure_inductance$926+2,___flmul@f1+2
  1542  000A1E  C090  F01F         	movff	_measure_inductance$926+3,___flmul@f1+3
  1543  000A22  0E00               	movlw	0
  1544  000A24  6E20               	movwf	___flmul@f2,c
  1545  000A26  0E40               	movlw	64
  1546  000A28  6E21               	movwf	___flmul@f2+1,c
  1547  000A2A  0E1C               	movlw	28
  1548  000A2C  6E22               	movwf	___flmul@f2+2,c
  1549  000A2E  0E46               	movlw	70
  1550  000A30  6E23               	movwf	___flmul@f2+3,c
  1551  000A32  ECE5  F009         	call	___flmul	;wreg free
  1552  000A36  C01C  F06C         	movff	?___flmul,measure_inductance@numerator
  1553  000A3A  C01D  F06D         	movff	?___flmul+1,measure_inductance@numerator+1
  1554  000A3E  C01E  F06E         	movff	?___flmul+2,measure_inductance@numerator+2
  1555  000A42  C01F  F06F         	movff	?___flmul+3,measure_inductance@numerator+3
  1556                           
  1557                           ;LC-meter.c: 487: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * 
      +                          F1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1558  000A46  C0EA  F020         	movff	_F1,___flmul@f2
  1559  000A4A  C0EB  F021         	movff	_F1+1,___flmul@f2+1
  1560  000A4E  C0EC  F022         	movff	_F1+2,___flmul@f2+2
  1561  000A52  C0ED  F023         	movff	_F1+3,___flmul@f2+3
  1562  000A56  C0EA  F01C         	movff	_F1,___flmul@f1
  1563  000A5A  C0EB  F01D         	movff	_F1+1,___flmul@f1+1
  1564  000A5E  C0EC  F01E         	movff	_F1+2,___flmul@f1+2
  1565  000A62  C0ED  F01F         	movff	_F1+3,___flmul@f1+3
  1566  000A66  ECE5  F009         	call	___flmul	;wreg free
  1567  000A6A  C01C  F078         	movff	?___flmul,_measure_inductance$927
  1568  000A6E  C01D  F079         	movff	?___flmul+1,_measure_inductance$927+1
  1569  000A72  C01E  F07A         	movff	?___flmul+2,_measure_inductance$927+2
  1570  000A76  C01F  F07B         	movff	?___flmul+3,_measure_inductance$927+3
  1571                           
  1572                           ;LC-meter.c: 487: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * 
      +                          F1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1573  000A7A  C0D1  F020         	movff	_F2,___flmul@f2
  1574  000A7E  C0D2  F021         	movff	_F2+1,___flmul@f2+1
  1575  000A82  C0D3  F022         	movff	_F2+2,___flmul@f2+2
  1576  000A86  C0D4  F023         	movff	_F2+3,___flmul@f2+3
  1577  000A8A  C078  F01C         	movff	_measure_inductance$927,___flmul@f1
  1578  000A8E  C079  F01D         	movff	_measure_inductance$927+1,___flmul@f1+1
  1579  000A92  C07A  F01E         	movff	_measure_inductance$927+2,___flmul@f1+2
  1580  000A96  C07B  F01F         	movff	_measure_inductance$927+3,___flmul@f1+3
  1581  000A9A  ECE5  F009         	call	___flmul	;wreg free
  1582  000A9E  C01C  F085         	movff	?___flmul,_measure_inductance$924
  1583  000AA2  C01D  F086         	movff	?___flmul+1,_measure_inductance$924+1
  1584  000AA6  C01E  F087         	movff	?___flmul+2,_measure_inductance$924+2
  1585  000AAA  C01F  F088         	movff	?___flmul+3,_measure_inductance$924+3
  1586                           
  1587                           ;LC-meter.c: 487: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * 
      +                          F1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1588  000AAE  C0D1  F020         	movff	_F2,___flmul@f2
  1589  000AB2  C0D2  F021         	movff	_F2+1,___flmul@f2+1
  1590  000AB6  C0D3  F022         	movff	_F2+2,___flmul@f2+2
  1591  000ABA  C0D4  F023         	movff	_F2+3,___flmul@f2+3
  1592  000ABE  C085  F01C         	movff	_measure_inductance$924,___flmul@f1
  1593  000AC2  C086  F01D         	movff	_measure_inductance$924+1,___flmul@f1+1
  1594  000AC6  C087  F01E         	movff	_measure_inductance$924+2,___flmul@f1+2
  1595  000ACA  C088  F01F         	movff	_measure_inductance$924+3,___flmul@f1+3
  1596  000ACE  ECE5  F009         	call	___flmul	;wreg free
  1597  000AD2  C01C  F089         	movff	?___flmul,_measure_inductance$925
  1598  000AD6  C01D  F08A         	movff	?___flmul+1,_measure_inductance$925+1
  1599  000ADA  C01E  F08B         	movff	?___flmul+2,_measure_inductance$925+2
  1600  000ADE  C01F  F08C         	movff	?___flmul+3,_measure_inductance$925+3
  1601                           
  1602                           ;LC-meter.c: 487: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * 
      +                          F1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1603  000AE2  C0D5  F020         	movff	_F3,___flmul@f2
  1604  000AE6  C0D6  F021         	movff	_F3+1,___flmul@f2+1
  1605  000AEA  C0D7  F022         	movff	_F3+2,___flmul@f2+2
  1606  000AEE  C0D8  F023         	movff	_F3+3,___flmul@f2+3
  1607  000AF2  C089  F01C         	movff	_measure_inductance$925,___flmul@f1
  1608  000AF6  C08A  F01D         	movff	_measure_inductance$925+1,___flmul@f1+1
  1609  000AFA  C08B  F01E         	movff	_measure_inductance$925+2,___flmul@f1+2
  1610  000AFE  C08C  F01F         	movff	_measure_inductance$925+3,___flmul@f1+3
  1611  000B02  ECE5  F009         	call	___flmul	;wreg free
  1612  000B06  C01C  F08D         	movff	?___flmul,_measure_inductance$926
  1613  000B0A  C01D  F08E         	movff	?___flmul+1,_measure_inductance$926+1
  1614  000B0E  C01E  F08F         	movff	?___flmul+2,_measure_inductance$926+2
  1615  000B12  C01F  F090         	movff	?___flmul+3,_measure_inductance$926+3
  1616                           
  1617                           ;LC-meter.c: 487: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * 
      +                          F1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1618  000B16  C0D5  F020         	movff	_F3,___flmul@f2
  1619  000B1A  C0D6  F021         	movff	_F3+1,___flmul@f2+1
  1620  000B1E  C0D7  F022         	movff	_F3+2,___flmul@f2+2
  1621  000B22  C0D8  F023         	movff	_F3+3,___flmul@f2+3
  1622  000B26  C08D  F01C         	movff	_measure_inductance$926,___flmul@f1
  1623  000B2A  C08E  F01D         	movff	_measure_inductance$926+1,___flmul@f1+1
  1624  000B2E  C08F  F01E         	movff	_measure_inductance$926+2,___flmul@f1+2
  1625  000B32  C090  F01F         	movff	_measure_inductance$926+3,___flmul@f1+3
  1626  000B36  ECE5  F009         	call	___flmul	;wreg free
  1627  000B3A  C01C  F07C         	movff	?___flmul,_measure_inductance$928
  1628  000B3E  C01D  F07D         	movff	?___flmul+1,_measure_inductance$928+1
  1629  000B42  C01E  F07E         	movff	?___flmul+2,_measure_inductance$928+2
  1630  000B46  C01F  F07F         	movff	?___flmul+3,_measure_inductance$928+3
  1631                           
  1632                           ;LC-meter.c: 487: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * 
      +                          F1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1633  000B4A  C0EE  F020         	movff	_CCal,___flmul@f2
  1634  000B4E  C0EF  F021         	movff	_CCal+1,___flmul@f2+1
  1635  000B52  C0F0  F022         	movff	_CCal+2,___flmul@f2+2
  1636  000B56  C0F1  F023         	movff	_CCal+3,___flmul@f2+3
  1637  000B5A  C07C  F01C         	movff	_measure_inductance$928,___flmul@f1
  1638  000B5E  C07D  F01D         	movff	_measure_inductance$928+1,___flmul@f1+1
  1639  000B62  C07E  F01E         	movff	_measure_inductance$928+2,___flmul@f1+2
  1640  000B66  C07F  F01F         	movff	_measure_inductance$928+3,___flmul@f1+3
  1641  000B6A  ECE5  F009         	call	___flmul	;wreg free
  1642  000B6E  C01C  F080         	movff	?___flmul,_measure_inductance$929
  1643  000B72  C01D  F081         	movff	?___flmul+1,_measure_inductance$929+1
  1644  000B76  C01E  F082         	movff	?___flmul+2,_measure_inductance$929+2
  1645  000B7A  C01F  F083         	movff	?___flmul+3,_measure_inductance$929+3
  1646                           
  1647                           ;LC-meter.c: 487: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * 
      +                          F1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1648  000B7E  C080  F01C         	movff	_measure_inductance$929,___flmul@f1
  1649  000B82  C081  F01D         	movff	_measure_inductance$929+1,___flmul@f1+1
  1650  000B86  C082  F01E         	movff	_measure_inductance$929+2,___flmul@f1+2
  1651  000B8A  C083  F01F         	movff	_measure_inductance$929+3,___flmul@f1+3
  1652  000B8E  0EE6               	movlw	230
  1653  000B90  6E20               	movwf	___flmul@f2,c
  1654  000B92  0EE9               	movlw	233
  1655  000B94  6E21               	movwf	___flmul@f2+1,c
  1656  000B96  0E1D               	movlw	29
  1657  000B98  6E22               	movwf	___flmul@f2+2,c
  1658  000B9A  0E42               	movlw	66
  1659  000B9C  6E23               	movwf	___flmul@f2+3,c
  1660  000B9E  ECE5  F009         	call	___flmul	;wreg free
  1661  000BA2  C01C  F070         	movff	?___flmul,measure_inductance@denominator
  1662  000BA6  C01D  F071         	movff	?___flmul+1,measure_inductance@denominator+1
  1663  000BAA  C01E  F072         	movff	?___flmul+2,measure_inductance@denominator+2
  1664  000BAE  C01F  F073         	movff	?___flmul+3,measure_inductance@denominator+3
  1665                           
  1666                           ;LC-meter.c: 489: Lin = (numerator / denominator) * 1e+15l;
  1667  000BB2  C070  F011         	movff	measure_inductance@denominator,___fldiv@f2
  1668  000BB6  C071  F012         	movff	measure_inductance@denominator+1,___fldiv@f2+1
  1669  000BBA  C072  F013         	movff	measure_inductance@denominator+2,___fldiv@f2+2
  1670  000BBE  C073  F014         	movff	measure_inductance@denominator+3,___fldiv@f2+3
  1671  000BC2  C06C  F00D         	movff	measure_inductance@numerator,___fldiv@f1
  1672  000BC6  C06D  F00E         	movff	measure_inductance@numerator+1,___fldiv@f1+1
  1673  000BCA  C06E  F00F         	movff	measure_inductance@numerator+2,___fldiv@f1+2
  1674  000BCE  C06F  F010         	movff	measure_inductance@numerator+3,___fldiv@f1+3
  1675  000BD2  EC16  F010         	call	___fldiv	;wreg free
  1676  000BD6  C00D  F01C         	movff	?___fldiv,___flmul@f1
  1677  000BDA  C00E  F01D         	movff	?___fldiv+1,___flmul@f1+1
  1678  000BDE  C00F  F01E         	movff	?___fldiv+2,___flmul@f1+2
  1679  000BE2  C010  F01F         	movff	?___fldiv+3,___flmul@f1+3
  1680  000BE6  0EA9               	movlw	169
  1681  000BE8  6E20               	movwf	___flmul@f2,c
  1682  000BEA  0E5F               	movlw	95
  1683  000BEC  6E21               	movwf	___flmul@f2+1,c
  1684  000BEE  0E63               	movlw	99
  1685  000BF0  6E22               	movwf	___flmul@f2+2,c
  1686  000BF2  0E58               	movlw	88
  1687  000BF4  6E23               	movwf	___flmul@f2+3,c
  1688  000BF6  ECE5  F009         	call	___flmul	;wreg free
  1689  000BFA  C01C  F093         	movff	?___flmul,measure_inductance@Lin
  1690  000BFE  C01D  F094         	movff	?___flmul+1,measure_inductance@Lin+1
  1691  000C02  C01E  F095         	movff	?___flmul+2,measure_inductance@Lin+2
  1692  000C06  C01F  F096         	movff	?___flmul+3,measure_inductance@Lin+3
  1693                           
  1694                           ;LC-meter.c: 491: if(Lin > 999) {
  1695  000C0A  6A03               	clrf	___flge@ff1,c
  1696  000C0C  0EC0               	movlw	192
  1697  000C0E  6E04               	movwf	___flge@ff1+1,c
  1698  000C10  0E79               	movlw	121
  1699  000C12  6E05               	movwf	___flge@ff1+2,c
  1700  000C14  0E44               	movlw	68
  1701  000C16  6E06               	movwf	___flge@ff1+3,c
  1702  000C18  C093  F007         	movff	measure_inductance@Lin,___flge@ff2
  1703  000C1C  C094  F008         	movff	measure_inductance@Lin+1,___flge@ff2+1
  1704  000C20  C095  F009         	movff	measure_inductance@Lin+2,___flge@ff2+2
  1705  000C24  C096  F00A         	movff	measure_inductance@Lin+3,___flge@ff2+3
  1706  000C28  EC7D  F012         	call	___flge	;wreg free
  1707  000C2C  E27A               	bc	l3529
  1708                           
  1709                           ;LC-meter.c: 492: if(Lin > (999e+03l)) {
  1710  000C2E  0E80               	movlw	128
  1711  000C30  6E03               	movwf	___flge@ff1,c
  1712  000C32  0EE5               	movlw	229
  1713  000C34  6E04               	movwf	___flge@ff1+1,c
  1714  000C36  0E73               	movlw	115
  1715  000C38  6E05               	movwf	___flge@ff1+2,c
  1716  000C3A  0E49               	movlw	73
  1717  000C3C  6E06               	movwf	___flge@ff1+3,c
  1718  000C3E  C093  F007         	movff	measure_inductance@Lin,___flge@ff2
  1719  000C42  C094  F008         	movff	measure_inductance@Lin+1,___flge@ff2+1
  1720  000C46  C095  F009         	movff	measure_inductance@Lin+2,___flge@ff2+2
  1721  000C4A  C096  F00A         	movff	measure_inductance@Lin+3,___flge@ff2+3
  1722  000C4E  EC7D  F012         	call	___flge	;wreg free
  1723  000C52  E24C               	bc	l3525
  1724                           
  1725                           ;LC-meter.c: 493: if(Lin > (999e+06l)) {
  1726  000C54  0E1F               	movlw	31
  1727  000C56  6E03               	movwf	___flge@ff1,c
  1728  000C58  0E2E               	movlw	46
  1729  000C5A  6E04               	movwf	___flge@ff1+1,c
  1730  000C5C  0E6E               	movlw	110
  1731  000C5E  6E05               	movwf	___flge@ff1+2,c
  1732  000C60  0E4E               	movlw	78
  1733  000C62  6E06               	movwf	___flge@ff1+3,c
  1734  000C64  C093  F007         	movff	measure_inductance@Lin,___flge@ff2
  1735  000C68  C094  F008         	movff	measure_inductance@Lin+1,___flge@ff2+1
  1736  000C6C  C095  F009         	movff	measure_inductance@Lin+2,___flge@ff2+2
  1737  000C70  C096  F00A         	movff	measure_inductance@Lin+3,___flge@ff2+3
  1738  000C74  EC7D  F012         	call	___flge	;wreg free
  1739  000C78  E21D               	bc	l3521
  1740                           
  1741                           ;LC-meter.c: 494: Lin = Lin / (1e+09l);
  1742  000C7A  C093  F00D         	movff	measure_inductance@Lin,___fldiv@f1
  1743  000C7E  C094  F00E         	movff	measure_inductance@Lin+1,___fldiv@f1+1
  1744  000C82  C095  F00F         	movff	measure_inductance@Lin+2,___fldiv@f1+2
  1745  000C86  C096  F010         	movff	measure_inductance@Lin+3,___fldiv@f1+3
  1746  000C8A  0E28               	movlw	40
  1747  000C8C  6E11               	movwf	___fldiv@f2,c
  1748  000C8E  0E6B               	movlw	107
  1749  000C90  6E12               	movwf	___fldiv@f2+1,c
  1750  000C92  0E6E               	movlw	110
  1751  000C94  6E13               	movwf	___fldiv@f2+2,c
  1752  000C96  0E4E               	movlw	78
  1753  000C98  6E14               	movwf	___fldiv@f2+3,c
  1754  000C9A  EC16  F010         	call	___fldiv	;wreg free
  1755  000C9E  C00D  F093         	movff	?___fldiv,measure_inductance@Lin
  1756  000CA2  C00E  F094         	movff	?___fldiv+1,measure_inductance@Lin+1
  1757  000CA6  C00F  F095         	movff	?___fldiv+2,measure_inductance@Lin+2
  1758  000CAA  C010  F096         	movff	?___fldiv+3,measure_inductance@Lin+3
  1759                           
  1760                           ;LC-meter.c: 495: unit = 0;
  1761  000CAE  0100               	movlb	0	; () banked
  1762  000CB0  6B84               	clrf	measure_inductance@unit& (0+255),b
  1763                           
  1764                           ;LC-meter.c: 496: } else {
  1765  000CB2  D03A               	goto	l3531
  1766  000CB4                     l3521:
  1767                           
  1768                           ;LC-meter.c: 497: Lin = Lin / (1e+06l);
  1769  000CB4  C093  F00D         	movff	measure_inductance@Lin,___fldiv@f1
  1770  000CB8  C094  F00E         	movff	measure_inductance@Lin+1,___fldiv@f1+1
  1771  000CBC  C095  F00F         	movff	measure_inductance@Lin+2,___fldiv@f1+2
  1772  000CC0  C096  F010         	movff	measure_inductance@Lin+3,___fldiv@f1+3
  1773  000CC4  0E00               	movlw	0
  1774  000CC6  6E11               	movwf	___fldiv@f2,c
  1775  000CC8  0E24               	movlw	36
  1776  000CCA  6E12               	movwf	___fldiv@f2+1,c
  1777  000CCC  0E74               	movlw	116
  1778  000CCE  6E13               	movwf	___fldiv@f2+2,c
  1779  000CD0  0E49               	movlw	73
  1780  000CD2  6E14               	movwf	___fldiv@f2+3,c
  1781  000CD4  EC16  F010         	call	___fldiv	;wreg free
  1782  000CD8  C00D  F093         	movff	?___fldiv,measure_inductance@Lin
  1783  000CDC  C00E  F094         	movff	?___fldiv+1,measure_inductance@Lin+1
  1784  000CE0  C00F  F095         	movff	?___fldiv+2,measure_inductance@Lin+2
  1785  000CE4  C010  F096         	movff	?___fldiv+3,measure_inductance@Lin+3
  1786                           
  1787                           ;LC-meter.c: 498: unit = 1;
  1788  000CE8  0E01               	movlw	1
  1789  000CEA  D01C               	goto	L1
  1790  000CEC                     l3525:
  1791                           
  1792                           ;LC-meter.c: 501: Lin = Lin / 1e+03l;
  1793  000CEC  C093  F00D         	movff	measure_inductance@Lin,___fldiv@f1
  1794  000CF0  C094  F00E         	movff	measure_inductance@Lin+1,___fldiv@f1+1
  1795  000CF4  C095  F00F         	movff	measure_inductance@Lin+2,___fldiv@f1+2
  1796  000CF8  C096  F010         	movff	measure_inductance@Lin+3,___fldiv@f1+3
  1797  000CFC  0E00               	movlw	0
  1798  000CFE  6E11               	movwf	___fldiv@f2,c
  1799  000D00  6E12               	movwf	___fldiv@f2+1,c
  1800  000D02  0E7A               	movlw	122
  1801  000D04  6E13               	movwf	___fldiv@f2+2,c
  1802  000D06  0E44               	movlw	68
  1803  000D08  6E14               	movwf	___fldiv@f2+3,c
  1804  000D0A  EC16  F010         	call	___fldiv	;wreg free
  1805  000D0E  C00D  F093         	movff	?___fldiv,measure_inductance@Lin
  1806  000D12  C00E  F094         	movff	?___fldiv+1,measure_inductance@Lin+1
  1807  000D16  C00F  F095         	movff	?___fldiv+2,measure_inductance@Lin+2
  1808  000D1A  C010  F096         	movff	?___fldiv+3,measure_inductance@Lin+3
  1809                           
  1810                           ;LC-meter.c: 502: unit = 2;
  1811  000D1E  0E02               	movlw	2
  1812  000D20  D001               	goto	L1
  1813  000D22                     l3529:
  1814                           
  1815                           ;LC-meter.c: 505: unit = 3;
  1816  000D22  0E03               	movlw	3
  1817  000D24                     L1:
  1818  000D24  0100               	movlb	0	; () banked
  1819  000D26  6F84               	movwf	measure_inductance@unit& (0+255),b
  1820  000D28                     l3531:
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;LC-meter.c: 507: Lin = Lin * 100;
  1824  000D28  C093  F01C         	movff	measure_inductance@Lin,___flmul@f1
  1825  000D2C  C094  F01D         	movff	measure_inductance@Lin+1,___flmul@f1+1
  1826  000D30  C095  F01E         	movff	measure_inductance@Lin+2,___flmul@f1+2
  1827  000D34  C096  F01F         	movff	measure_inductance@Lin+3,___flmul@f1+3
  1828  000D38  0E00               	movlw	0
  1829  000D3A  6E20               	movwf	___flmul@f2,c
  1830  000D3C  6E21               	movwf	___flmul@f2+1,c
  1831  000D3E  0EC8               	movlw	200
  1832  000D40  6E22               	movwf	___flmul@f2+2,c
  1833  000D42  0E42               	movlw	66
  1834  000D44  6E23               	movwf	___flmul@f2+3,c
  1835  000D46  ECE5  F009         	call	___flmul	;wreg free
  1836  000D4A  C01C  F093         	movff	?___flmul,measure_inductance@Lin
  1837  000D4E  C01D  F094         	movff	?___flmul+1,measure_inductance@Lin+1
  1838  000D52  C01E  F095         	movff	?___flmul+2,measure_inductance@Lin+2
  1839  000D56  C01F  F096         	movff	?___flmul+3,measure_inductance@Lin+3
  1840                           
  1841                           ;LC-meter.c: 508: var = (unsigned short int)Lin;
  1842  000D5A  C093  F064         	movff	measure_inductance@Lin,___fltol@f1
  1843  000D5E  C094  F065         	movff	measure_inductance@Lin+1,___fltol@f1+1
  1844  000D62  C095  F066         	movff	measure_inductance@Lin+2,___fltol@f1+2
  1845  000D66  C096  F067         	movff	measure_inductance@Lin+3,___fltol@f1+3
  1846  000D6A  ECBA  F010         	call	___fltol	;wreg free
  1847  000D6E  C064  F091         	movff	?___fltol,measure_inductance@var
  1848  000D72  C065  F092         	movff	?___fltol+1,measure_inductance@var+1
  1849                           
  1850                           ; BSR set to: 0
  1851                           ;LC-meter.c: 510: print_reading(var);
  1852  000D76  C091  F003         	movff	measure_inductance@var,print_reading@measurement
  1853  000D7A  C092  F004         	movff	measure_inductance@var+1,print_reading@measurement+1
  1854  000D7E  ECE4  F013         	call	_print_reading	;wreg free
  1855                           
  1856                           ; BSR set to: 0
  1857                           ;LC-meter.c: 511: print_unit(unit);
  1858  000D82  5184               	movf	measure_inductance@unit& (0+255),w,b
  1859  000D84  ECE3  F013         	call	_print_unit
  1860                           
  1861                           ; BSR set to: 0
  1862  000D88  0012               	return		;funcret
  1863  000D8A                     __end_of_measure_inductance:
  1864                           	opt stack 0
  1865                           tblptru	equ	0xFF8
  1866                           tblptrh	equ	0xFF7
  1867                           tblptrl	equ	0xFF6
  1868                           tablat	equ	0xFF5
  1869                           intcon	equ	0xFF2
  1870                           intcon2	equ	0xFF1
  1871                           postinc0	equ	0xFEE
  1872                           wreg	equ	0xFE8
  1873                           status	equ	0xFD8
  1874                           
  1875 ;; *************** function _measure_capacitance *****************
  1876 ;; Defined at:
  1877 ;;		line 391 in file "../../../src/LC-meter.c"
  1878 ;; Parameters:    Size  Location     Type
  1879 ;;		None
  1880 ;; Auto vars:     Size  Location     Type
  1881 ;;  Cin             4   93[BANK0 ] unsigned char 
  1882 ;;  var             2   91[BANK0 ] unsigned short 
  1883 ;;  unit            1   90[BANK0 ] unsigned char 
  1884 ;; Return value:  Size  Location     Type
  1885 ;;		None               void
  1886 ;; Registers used:
  1887 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1888 ;; Tracked objects:
  1889 ;;		On entry : 0/0
  1890 ;;		On exit  : F/0
  1891 ;;		Unchanged: 0/0
  1892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1893 ;;      Params:         0       0       0       0       0       0       0       0       0
  1894 ;;      Locals:         0      19       0       0       0       0       0       0       0
  1895 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1896 ;;      Totals:         0      19       0       0       0       0       0       0       0
  1897 ;;Total ram usage:       19 bytes
  1898 ;; Hardware stack levels used:    1
  1899 ;; Hardware stack levels required when called:    7
  1900 ;; This function calls:
  1901 ;;		___fldiv
  1902 ;;		___flge
  1903 ;;		___flmul
  1904 ;;		___flsub
  1905 ;;		___fltol
  1906 ;;		___lwtofl
  1907 ;;		_format_double
  1908 ;;		_format_xint32
  1909 ;;		_measure_freq
  1910 ;;		_print_reading
  1911 ;;		_print_unit
  1912 ;;		_ser_putch
  1913 ;;		_ser_puts
  1914 ;; This function is called by:
  1915 ;;		_main
  1916 ;; This function uses a non-reentrant model
  1917 ;;
  1918                           
  1919                           	psect	text4
  1920  000D8A                     __ptext4:
  1921                           	opt stack 0
  1922  000D8A                     _measure_capacitance:
  1923                           	opt stack 23
  1924                           
  1925                           ;LC-meter.c: 392: unsigned char unit;
  1926                           ;LC-meter.c: 393: unsigned short int var;
  1927                           ;LC-meter.c: 395: double Cin;
  1928                           ;LC-meter.c: 402: var = measure_freq();
  1929                           
  1930                           ; BSR set to: 0
  1931                           ;incstack = 0
  1932  000D8A  EC55  F011         	call	_measure_freq	;wreg free
  1933  000D8E  C003  F0BB         	movff	?_measure_freq,measure_capacitance@var
  1934  000D92  C004  F0BC         	movff	?_measure_freq+1,measure_capacitance@var+1
  1935                           
  1936                           ;LC-meter.c: 404: F3 = (double)var;
  1937  000D96  C0BB  F00D         	movff	measure_capacitance@var,___lwtofl@c
  1938  000D9A  C0BC  F00E         	movff	measure_capacitance@var+1,___lwtofl@c+1
  1939  000D9E  EC80  F013         	call	___lwtofl	;wreg free
  1940  000DA2  C00D  F0D5         	movff	?___lwtofl,_F3
  1941  000DA6  C00E  F0D6         	movff	?___lwtofl+1,_F3+1
  1942  000DAA  C00F  F0D7         	movff	?___lwtofl+2,_F3+2
  1943  000DAE  C010  F0D8         	movff	?___lwtofl+3,_F3+3
  1944                           
  1945                           ;LC-meter.c: 406: putchar_ptr = &ser_putch;
  1946  000DB2  0E76               	movlw	low _ser_putch
  1947  000DB4  0100               	movlb	0	; () banked
  1948  000DB6  6FF6               	movwf	_putchar_ptr& (0+255),b
  1949  000DB8  0E27               	movlw	high _ser_putch
  1950  000DBA  6FF7               	movwf	(_putchar_ptr+1)& (0+255),b
  1951                           
  1952                           ; BSR set to: 0
  1953                           ;LC-meter.c: 407: ser_puts("var=");
  1954  000DBC  0E72               	movlw	STR_4& (0+255)
  1955  000DBE  EC95  F013         	call	_ser_puts
  1956                           
  1957                           ;LC-meter.c: 408: format_xint32( var);
  1958  000DC2  C0BB  F035         	movff	measure_capacitance@var,format_xint32@x
  1959  000DC6  C0BC  F036         	movff	measure_capacitance@var+1,format_xint32@x+1
  1960  000DCA  6A37               	clrf	format_xint32@x+2,c
  1961  000DCC  6A38               	clrf	format_xint32@x+3,c
  1962  000DCE  ECCE  F011         	call	_format_xint32	;wreg free
  1963                           
  1964                           ;LC-meter.c: 409: ser_puts("\r\nF1=");
  1965  000DD2  0E5B               	movlw	STR_5& (0+255)
  1966  000DD4  EC95  F013         	call	_ser_puts
  1967                           
  1968                           ;LC-meter.c: 410: format_double( F1);
  1969  000DD8  C0EA  F09A         	movff	_F1,format_double@num
  1970  000DDC  C0EB  F09B         	movff	_F1+1,format_double@num+1
  1971  000DE0  C0EC  F09C         	movff	_F1+2,format_double@num+2
  1972  000DE4  C0ED  F09D         	movff	_F1+3,format_double@num+3
  1973  000DE8  ECC4  F00A         	call	_format_double	;wreg free
  1974                           
  1975                           ;LC-meter.c: 411: ser_putch(' ');
  1976  000DEC  0E20               	movlw	32
  1977  000DEE  ECBB  F013         	call	_ser_putch
  1978                           
  1979                           ;LC-meter.c: 412: format_xint32( *(unsigned long int*)&F1);
  1980  000DF2  C0EA  F035         	movff	_F1,format_xint32@x
  1981  000DF6  C0EB  F036         	movff	_F1+1,format_xint32@x+1
  1982  000DFA  C0EC  F037         	movff	_F1+2,format_xint32@x+2
  1983  000DFE  C0ED  F038         	movff	_F1+3,format_xint32@x+3
  1984  000E02  ECCE  F011         	call	_format_xint32	;wreg free
  1985                           
  1986                           ;LC-meter.c: 413: ser_puts("\r\nF2=");
  1987  000E06  0E61               	movlw	STR_6& (0+255)
  1988  000E08  EC95  F013         	call	_ser_puts
  1989                           
  1990                           ;LC-meter.c: 414: format_double( F2);
  1991  000E0C  C0D1  F09A         	movff	_F2,format_double@num
  1992  000E10  C0D2  F09B         	movff	_F2+1,format_double@num+1
  1993  000E14  C0D3  F09C         	movff	_F2+2,format_double@num+2
  1994  000E18  C0D4  F09D         	movff	_F2+3,format_double@num+3
  1995  000E1C  ECC4  F00A         	call	_format_double	;wreg free
  1996                           
  1997                           ;LC-meter.c: 415: ser_putch(' ');
  1998  000E20  0E20               	movlw	32
  1999  000E22  ECBB  F013         	call	_ser_putch
  2000                           
  2001                           ;LC-meter.c: 416: format_xint32( *(unsigned long int*)&F2);
  2002  000E26  C0D1  F035         	movff	_F2,format_xint32@x
  2003  000E2A  C0D2  F036         	movff	_F2+1,format_xint32@x+1
  2004  000E2E  C0D3  F037         	movff	_F2+2,format_xint32@x+2
  2005  000E32  C0D4  F038         	movff	_F2+3,format_xint32@x+3
  2006  000E36  ECCE  F011         	call	_format_xint32	;wreg free
  2007                           
  2008                           ;LC-meter.c: 417: ser_puts("\r\nF3=");
  2009  000E3A  0E67               	movlw	STR_7& (0+255)
  2010  000E3C  EC95  F013         	call	_ser_puts
  2011                           
  2012                           ;LC-meter.c: 418: format_double( F3);
  2013  000E40  C0D5  F09A         	movff	_F3,format_double@num
  2014  000E44  C0D6  F09B         	movff	_F3+1,format_double@num+1
  2015  000E48  C0D7  F09C         	movff	_F3+2,format_double@num+2
  2016  000E4C  C0D8  F09D         	movff	_F3+3,format_double@num+3
  2017  000E50  ECC4  F00A         	call	_format_double	;wreg free
  2018                           
  2019                           ;LC-meter.c: 419: ser_putch(' ');
  2020  000E54  0E20               	movlw	32
  2021  000E56  ECBB  F013         	call	_ser_putch
  2022                           
  2023                           ;LC-meter.c: 420: format_xint32( *(unsigned long int*)&F3);
  2024  000E5A  C0D5  F035         	movff	_F3,format_xint32@x
  2025  000E5E  C0D6  F036         	movff	_F3+1,format_xint32@x+1
  2026  000E62  C0D7  F037         	movff	_F3+2,format_xint32@x+2
  2027  000E66  C0D8  F038         	movff	_F3+3,format_xint32@x+3
  2028  000E6A  ECCE  F011         	call	_format_xint32	;wreg free
  2029                           
  2030                           ;LC-meter.c: 421: ser_puts("\r\nCCal=");
  2031  000E6E  0E4D               	movlw	STR_8& (0+255)
  2032  000E70  EC95  F013         	call	_ser_puts
  2033                           
  2034                           ;LC-meter.c: 422: format_double( CCal);
  2035  000E74  C0EE  F09A         	movff	_CCal,format_double@num
  2036  000E78  C0EF  F09B         	movff	_CCal+1,format_double@num+1
  2037  000E7C  C0F0  F09C         	movff	_CCal+2,format_double@num+2
  2038  000E80  C0F1  F09D         	movff	_CCal+3,format_double@num+3
  2039  000E84  ECC4  F00A         	call	_format_double	;wreg free
  2040                           
  2041                           ;LC-meter.c: 423: ser_putch(' ');
  2042  000E88  0E20               	movlw	32
  2043  000E8A  ECBB  F013         	call	_ser_putch
  2044                           
  2045                           ;LC-meter.c: 424: format_xint32( *(unsigned long int*)&CCal);
  2046  000E8E  C0EE  F035         	movff	_CCal,format_xint32@x
  2047  000E92  C0EF  F036         	movff	_CCal+1,format_xint32@x+1
  2048  000E96  C0F0  F037         	movff	_CCal+2,format_xint32@x+2
  2049  000E9A  C0F1  F038         	movff	_CCal+3,format_xint32@x+3
  2050  000E9E  ECCE  F011         	call	_format_xint32	;wreg free
  2051                           
  2052                           ;LC-meter.c: 425: ser_puts("\r\n");
  2053  000EA2  0E58               	movlw	(STR_1+3)& (0+255)
  2054  000EA4  EC95  F013         	call	_ser_puts
  2055                           
  2056                           ;LC-meter.c: 427: putchar_ptr = &output_putch;
  2057  000EA8  0EBA               	movlw	low _output_putch
  2058  000EAA  0100               	movlb	0	; () banked
  2059  000EAC  6FF6               	movwf	_putchar_ptr& (0+255),b
  2060  000EAE  0E27               	movlw	high _output_putch
  2061  000EB0  6FF7               	movwf	(_putchar_ptr+1)& (0+255),b
  2062                           
  2063                           ; BSR set to: 0
  2064                           ;LC-meter.c: 429: if(F3 > F1)
  2065  000EB2  C0EA  F003         	movff	_F1,___flge@ff1
  2066  000EB6  C0EB  F004         	movff	_F1+1,___flge@ff1+1
  2067  000EBA  C0EC  F005         	movff	_F1+2,___flge@ff1+2
  2068  000EBE  C0ED  F006         	movff	_F1+3,___flge@ff1+3
  2069  000EC2  C0D5  F007         	movff	_F3,___flge@ff2
  2070  000EC6  C0D6  F008         	movff	_F3+1,___flge@ff2+1
  2071  000ECA  C0D7  F009         	movff	_F3+2,___flge@ff2+2
  2072  000ECE  C0D8  F00A         	movff	_F3+3,___flge@ff2+3
  2073  000ED2  EC7D  F012         	call	___flge	;wreg free
  2074  000ED6  E208               	bc	l3443
  2075                           
  2076                           ;LC-meter.c: 430: F3 = F1;
  2077  000ED8  C0EA  F0D5         	movff	_F1,_F3
  2078  000EDC  C0EB  F0D6         	movff	_F1+1,_F3+1
  2079  000EE0  C0EC  F0D7         	movff	_F1+2,_F3+2
  2080  000EE4  C0ED  F0D8         	movff	_F1+3,_F3+3
  2081  000EE8                     l3443:
  2082                           
  2083                           ;LC-meter.c: 432: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2084  000EE8  C0D5  F020         	movff	_F3,___flmul@f2
  2085  000EEC  C0D6  F021         	movff	_F3+1,___flmul@f2+1
  2086  000EF0  C0D7  F022         	movff	_F3+2,___flmul@f2+2
  2087  000EF4  C0D8  F023         	movff	_F3+3,___flmul@f2+3
  2088  000EF8  C0D5  F01C         	movff	_F3,___flmul@f1
  2089  000EFC  C0D6  F01D         	movff	_F3+1,___flmul@f1+1
  2090  000F00  C0D7  F01E         	movff	_F3+2,___flmul@f1+2
  2091  000F04  C0D8  F01F         	movff	_F3+3,___flmul@f1+3
  2092  000F08  ECE5  F009         	call	___flmul	;wreg free
  2093  000F0C  C01C  F047         	movff	?___flmul,___flsub@f2
  2094  000F10  C01D  F048         	movff	?___flmul+1,___flsub@f2+1
  2095  000F14  C01E  F049         	movff	?___flmul+2,___flsub@f2+2
  2096  000F18  C01F  F04A         	movff	?___flmul+3,___flsub@f2+3
  2097  000F1C  C0EA  F020         	movff	_F1,___flmul@f2
  2098  000F20  C0EB  F021         	movff	_F1+1,___flmul@f2+1
  2099  000F24  C0EC  F022         	movff	_F1+2,___flmul@f2+2
  2100  000F28  C0ED  F023         	movff	_F1+3,___flmul@f2+3
  2101  000F2C  C0EA  F01C         	movff	_F1,___flmul@f1
  2102  000F30  C0EB  F01D         	movff	_F1+1,___flmul@f1+1
  2103  000F34  C0EC  F01E         	movff	_F1+2,___flmul@f1+2
  2104  000F38  C0ED  F01F         	movff	_F1+3,___flmul@f1+3
  2105  000F3C  ECE5  F009         	call	___flmul	;wreg free
  2106  000F40  C01C  F043         	movff	?___flmul,___flsub@f1
  2107  000F44  C01D  F044         	movff	?___flmul+1,___flsub@f1+1
  2108  000F48  C01E  F045         	movff	?___flmul+2,___flsub@f1+2
  2109  000F4C  C01F  F046         	movff	?___flmul+3,___flsub@f1+3
  2110  000F50  ECEC  F012         	call	___flsub	;wreg free
  2111  000F54  C043  F0AE         	movff	?___flsub,_measure_capacitance$920
  2112  000F58  C044  F0AF         	movff	?___flsub+1,_measure_capacitance$920+1
  2113  000F5C  C045  F0B0         	movff	?___flsub+2,_measure_capacitance$920+2
  2114  000F60  C046  F0B1         	movff	?___flsub+3,_measure_capacitance$920+3
  2115                           
  2116                           ;LC-meter.c: 432: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2117  000F64  C0D1  F020         	movff	_F2,___flmul@f2
  2118  000F68  C0D2  F021         	movff	_F2+1,___flmul@f2+1
  2119  000F6C  C0D3  F022         	movff	_F2+2,___flmul@f2+2
  2120  000F70  C0D4  F023         	movff	_F2+3,___flmul@f2+3
  2121  000F74  C0AE  F01C         	movff	_measure_capacitance$920,___flmul@f1
  2122  000F78  C0AF  F01D         	movff	_measure_capacitance$920+1,___flmul@f1+1
  2123  000F7C  C0B0  F01E         	movff	_measure_capacitance$920+2,___flmul@f1+2
  2124  000F80  C0B1  F01F         	movff	_measure_capacitance$920+3,___flmul@f1+3
  2125  000F84  ECE5  F009         	call	___flmul	;wreg free
  2126  000F88  C01C  F0B2         	movff	?___flmul,_measure_capacitance$921
  2127  000F8C  C01D  F0B3         	movff	?___flmul+1,_measure_capacitance$921+1
  2128  000F90  C01E  F0B4         	movff	?___flmul+2,_measure_capacitance$921+2
  2129  000F94  C01F  F0B5         	movff	?___flmul+3,_measure_capacitance$921+3
  2130                           
  2131                           ;LC-meter.c: 432: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2132  000F98  C0D1  F020         	movff	_F2,___flmul@f2
  2133  000F9C  C0D2  F021         	movff	_F2+1,___flmul@f2+1
  2134  000FA0  C0D3  F022         	movff	_F2+2,___flmul@f2+2
  2135  000FA4  C0D4  F023         	movff	_F2+3,___flmul@f2+3
  2136  000FA8  C0B2  F01C         	movff	_measure_capacitance$921,___flmul@f1
  2137  000FAC  C0B3  F01D         	movff	_measure_capacitance$921+1,___flmul@f1+1
  2138  000FB0  C0B4  F01E         	movff	_measure_capacitance$921+2,___flmul@f1+2
  2139  000FB4  C0B5  F01F         	movff	_measure_capacitance$921+3,___flmul@f1+3
  2140  000FB8  ECE5  F009         	call	___flmul	;wreg free
  2141  000FBC  C01C  F0B6         	movff	?___flmul,_measure_capacitance$922
  2142  000FC0  C01D  F0B7         	movff	?___flmul+1,_measure_capacitance$922+1
  2143  000FC4  C01E  F0B8         	movff	?___flmul+2,_measure_capacitance$922+2
  2144  000FC8  C01F  F0B9         	movff	?___flmul+3,_measure_capacitance$922+3
  2145                           
  2146                           ;LC-meter.c: 432: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2147  000FCC  C0B6  F01C         	movff	_measure_capacitance$922,___flmul@f1
  2148  000FD0  C0B7  F01D         	movff	_measure_capacitance$922+1,___flmul@f1+1
  2149  000FD4  C0B8  F01E         	movff	_measure_capacitance$922+2,___flmul@f1+2
  2150  000FD8  C0B9  F01F         	movff	_measure_capacitance$922+3,___flmul@f1+3
  2151  000FDC  C0EE  F020         	movff	_CCal,___flmul@f2
  2152  000FE0  C0EF  F021         	movff	_CCal+1,___flmul@f2+1
  2153  000FE4  C0F0  F022         	movff	_CCal+2,___flmul@f2+2
  2154  000FE8  C0F1  F023         	movff	_CCal+3,___flmul@f2+3
  2155  000FEC  ECE5  F009         	call	___flmul	;wreg free
  2156  000FF0  C01C  F0BD         	movff	?___flmul,measure_capacitance@Cin
  2157  000FF4  C01D  F0BE         	movff	?___flmul+1,measure_capacitance@Cin+1
  2158  000FF8  C01E  F0BF         	movff	?___flmul+2,measure_capacitance@Cin+2
  2159  000FFC  C01F  F0C0         	movff	?___flmul+3,measure_capacitance@Cin+3
  2160                           
  2161                           ;LC-meter.c: 436: ser_puts("Cin=");
  2162  001000  0E6D               	movlw	STR_10& (0+255)
  2163  001002  EC95  F013         	call	_ser_puts
  2164                           
  2165                           ;LC-meter.c: 437: format_double( Cin);
  2166  001006  C0BD  F09A         	movff	measure_capacitance@Cin,format_double@num
  2167  00100A  C0BE  F09B         	movff	measure_capacitance@Cin+1,format_double@num+1
  2168  00100E  C0BF  F09C         	movff	measure_capacitance@Cin+2,format_double@num+2
  2169  001012  C0C0  F09D         	movff	measure_capacitance@Cin+3,format_double@num+3
  2170  001016  ECC4  F00A         	call	_format_double	;wreg free
  2171                           
  2172                           ;LC-meter.c: 438: ser_putch(' ');
  2173  00101A  0E20               	movlw	32
  2174  00101C  ECBB  F013         	call	_ser_putch
  2175                           
  2176                           ;LC-meter.c: 439: format_xint32( *(unsigned long int*)&Cin);
  2177  001020  C0BD  F035         	movff	measure_capacitance@Cin,format_xint32@x
  2178  001024  C0BE  F036         	movff	measure_capacitance@Cin+1,format_xint32@x+1
  2179  001028  C0BF  F037         	movff	measure_capacitance@Cin+2,format_xint32@x+2
  2180  00102C  C0C0  F038         	movff	measure_capacitance@Cin+3,format_xint32@x+3
  2181  001030  ECCE  F011         	call	_format_xint32	;wreg free
  2182                           
  2183                           ;LC-meter.c: 440: ser_puts("\r\n");
  2184  001034  0E58               	movlw	(STR_1+3)& (0+255)
  2185  001036  EC95  F013         	call	_ser_puts
  2186                           
  2187                           ;LC-meter.c: 442: if(Cin > 999) {
  2188  00103A  6A03               	clrf	___flge@ff1,c
  2189  00103C  0EC0               	movlw	192
  2190  00103E  6E04               	movwf	___flge@ff1+1,c
  2191  001040  0E79               	movlw	121
  2192  001042  6E05               	movwf	___flge@ff1+2,c
  2193  001044  0E44               	movlw	68
  2194  001046  6E06               	movwf	___flge@ff1+3,c
  2195  001048  C0BD  F007         	movff	measure_capacitance@Cin,___flge@ff2
  2196  00104C  C0BE  F008         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2197  001050  C0BF  F009         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2198  001054  C0C0  F00A         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2199  001058  EC7D  F012         	call	___flge	;wreg free
  2200  00105C  E279               	bc	l3473
  2201                           
  2202                           ;LC-meter.c: 443: if(Cin > (999e+03l)) {
  2203  00105E  0E80               	movlw	128
  2204  001060  6E03               	movwf	___flge@ff1,c
  2205  001062  0EE5               	movlw	229
  2206  001064  6E04               	movwf	___flge@ff1+1,c
  2207  001066  0E73               	movlw	115
  2208  001068  6E05               	movwf	___flge@ff1+2,c
  2209  00106A  0E49               	movlw	73
  2210  00106C  6E06               	movwf	___flge@ff1+3,c
  2211  00106E  C0BD  F007         	movff	measure_capacitance@Cin,___flge@ff2
  2212  001072  C0BE  F008         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2213  001076  C0BF  F009         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2214  00107A  C0C0  F00A         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2215  00107E  EC7D  F012         	call	___flge	;wreg free
  2216  001082  E24B               	bc	l3469
  2217                           
  2218                           ;LC-meter.c: 444: if(Cin > (999e+06l)) {
  2219  001084  0E1F               	movlw	31
  2220  001086  6E03               	movwf	___flge@ff1,c
  2221  001088  0E2E               	movlw	46
  2222  00108A  6E04               	movwf	___flge@ff1+1,c
  2223  00108C  0E6E               	movlw	110
  2224  00108E  6E05               	movwf	___flge@ff1+2,c
  2225  001090  0E4E               	movlw	78
  2226  001092  6E06               	movwf	___flge@ff1+3,c
  2227  001094  C0BD  F007         	movff	measure_capacitance@Cin,___flge@ff2
  2228  001098  C0BE  F008         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2229  00109C  C0BF  F009         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2230  0010A0  C0C0  F00A         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2231  0010A4  EC7D  F012         	call	___flge	;wreg free
  2232  0010A8  E21C               	bc	l3465
  2233                           
  2234                           ;LC-meter.c: 445: Cin = Cin / (1e+09l);
  2235  0010AA  C0BD  F00D         	movff	measure_capacitance@Cin,___fldiv@f1
  2236  0010AE  C0BE  F00E         	movff	measure_capacitance@Cin+1,___fldiv@f1+1
  2237  0010B2  C0BF  F00F         	movff	measure_capacitance@Cin+2,___fldiv@f1+2
  2238  0010B6  C0C0  F010         	movff	measure_capacitance@Cin+3,___fldiv@f1+3
  2239  0010BA  0E28               	movlw	40
  2240  0010BC  6E11               	movwf	___fldiv@f2,c
  2241  0010BE  0E6B               	movlw	107
  2242  0010C0  6E12               	movwf	___fldiv@f2+1,c
  2243  0010C2  0E6E               	movlw	110
  2244  0010C4  6E13               	movwf	___fldiv@f2+2,c
  2245  0010C6  0E4E               	movlw	78
  2246  0010C8  6E14               	movwf	___fldiv@f2+3,c
  2247  0010CA  EC16  F010         	call	___fldiv	;wreg free
  2248  0010CE  C00D  F0BD         	movff	?___fldiv,measure_capacitance@Cin
  2249  0010D2  C00E  F0BE         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2250  0010D6  C00F  F0BF         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2251  0010DA  C010  F0C0         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2252                           
  2253                           ;LC-meter.c: 446: unit = 4;
  2254  0010DE  0E04               	movlw	4
  2255  0010E0  D038               	goto	L2
  2256  0010E2                     l3465:
  2257                           
  2258                           ;LC-meter.c: 448: Cin = Cin / (1e+06l);
  2259  0010E2  C0BD  F00D         	movff	measure_capacitance@Cin,___fldiv@f1
  2260  0010E6  C0BE  F00E         	movff	measure_capacitance@Cin+1,___fldiv@f1+1
  2261  0010EA  C0BF  F00F         	movff	measure_capacitance@Cin+2,___fldiv@f1+2
  2262  0010EE  C0C0  F010         	movff	measure_capacitance@Cin+3,___fldiv@f1+3
  2263  0010F2  0E00               	movlw	0
  2264  0010F4  6E11               	movwf	___fldiv@f2,c
  2265  0010F6  0E24               	movlw	36
  2266  0010F8  6E12               	movwf	___fldiv@f2+1,c
  2267  0010FA  0E74               	movlw	116
  2268  0010FC  6E13               	movwf	___fldiv@f2+2,c
  2269  0010FE  0E49               	movlw	73
  2270  001100  6E14               	movwf	___fldiv@f2+3,c
  2271  001102  EC16  F010         	call	___fldiv	;wreg free
  2272  001106  C00D  F0BD         	movff	?___fldiv,measure_capacitance@Cin
  2273  00110A  C00E  F0BE         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2274  00110E  C00F  F0BF         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2275  001112  C010  F0C0         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2276                           
  2277                           ;LC-meter.c: 449: unit = 5;
  2278  001116  0E05               	movlw	5
  2279  001118  D01C               	goto	L2
  2280  00111A                     l3469:
  2281                           
  2282                           ;LC-meter.c: 452: Cin = Cin / 1e+03l;
  2283  00111A  C0BD  F00D         	movff	measure_capacitance@Cin,___fldiv@f1
  2284  00111E  C0BE  F00E         	movff	measure_capacitance@Cin+1,___fldiv@f1+1
  2285  001122  C0BF  F00F         	movff	measure_capacitance@Cin+2,___fldiv@f1+2
  2286  001126  C0C0  F010         	movff	measure_capacitance@Cin+3,___fldiv@f1+3
  2287  00112A  0E00               	movlw	0
  2288  00112C  6E11               	movwf	___fldiv@f2,c
  2289  00112E  6E12               	movwf	___fldiv@f2+1,c
  2290  001130  0E7A               	movlw	122
  2291  001132  6E13               	movwf	___fldiv@f2+2,c
  2292  001134  0E44               	movlw	68
  2293  001136  6E14               	movwf	___fldiv@f2+3,c
  2294  001138  EC16  F010         	call	___fldiv	;wreg free
  2295  00113C  C00D  F0BD         	movff	?___fldiv,measure_capacitance@Cin
  2296  001140  C00E  F0BE         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2297  001144  C00F  F0BF         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2298  001148  C010  F0C0         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2299                           
  2300                           ;LC-meter.c: 453: unit = 6;
  2301  00114C  0E06               	movlw	6
  2302  00114E  D001               	goto	L2
  2303  001150                     l3473:
  2304                           
  2305                           ;LC-meter.c: 456: unit = 7;
  2306  001150  0E07               	movlw	7
  2307  001152                     L2:
  2308  001152  0100               	movlb	0	; () banked
  2309  001154  6FBA               	movwf	measure_capacitance@unit& (0+255),b
  2310                           
  2311                           ; BSR set to: 0
  2312                           ;LC-meter.c: 458: Cin = Cin * 100;
  2313  001156  C0BD  F01C         	movff	measure_capacitance@Cin,___flmul@f1
  2314  00115A  C0BE  F01D         	movff	measure_capacitance@Cin+1,___flmul@f1+1
  2315  00115E  C0BF  F01E         	movff	measure_capacitance@Cin+2,___flmul@f1+2
  2316  001162  C0C0  F01F         	movff	measure_capacitance@Cin+3,___flmul@f1+3
  2317  001166  0E00               	movlw	0
  2318  001168  6E20               	movwf	___flmul@f2,c
  2319  00116A  6E21               	movwf	___flmul@f2+1,c
  2320  00116C  0EC8               	movlw	200
  2321  00116E  6E22               	movwf	___flmul@f2+2,c
  2322  001170  0E42               	movlw	66
  2323  001172  6E23               	movwf	___flmul@f2+3,c
  2324  001174  ECE5  F009         	call	___flmul	;wreg free
  2325  001178  C01C  F0BD         	movff	?___flmul,measure_capacitance@Cin
  2326  00117C  C01D  F0BE         	movff	?___flmul+1,measure_capacitance@Cin+1
  2327  001180  C01E  F0BF         	movff	?___flmul+2,measure_capacitance@Cin+2
  2328  001184  C01F  F0C0         	movff	?___flmul+3,measure_capacitance@Cin+3
  2329                           
  2330                           ;LC-meter.c: 459: var = (unsigned short int)Cin;
  2331  001188  C0BD  F064         	movff	measure_capacitance@Cin,___fltol@f1
  2332  00118C  C0BE  F065         	movff	measure_capacitance@Cin+1,___fltol@f1+1
  2333  001190  C0BF  F066         	movff	measure_capacitance@Cin+2,___fltol@f1+2
  2334  001194  C0C0  F067         	movff	measure_capacitance@Cin+3,___fltol@f1+3
  2335  001198  ECBA  F010         	call	___fltol	;wreg free
  2336  00119C  C064  F0BB         	movff	?___fltol,measure_capacitance@var
  2337  0011A0  C065  F0BC         	movff	?___fltol+1,measure_capacitance@var+1
  2338                           
  2339                           ; BSR set to: 0
  2340                           ;LC-meter.c: 461: print_reading(var);
  2341  0011A4  C0BB  F003         	movff	measure_capacitance@var,print_reading@measurement
  2342  0011A8  C0BC  F004         	movff	measure_capacitance@var+1,print_reading@measurement+1
  2343  0011AC  ECE4  F013         	call	_print_reading	;wreg free
  2344                           
  2345                           ; BSR set to: 0
  2346                           ;LC-meter.c: 462: print_unit(unit);
  2347  0011B0  51BA               	movf	measure_capacitance@unit& (0+255),w,b
  2348  0011B2  ECE3  F013         	call	_print_unit
  2349                           
  2350                           ; BSR set to: 0
  2351  0011B6  0012               	return		;funcret
  2352  0011B8                     __end_of_measure_capacitance:
  2353                           	opt stack 0
  2354                           tblptru	equ	0xFF8
  2355                           tblptrh	equ	0xFF7
  2356                           tblptrl	equ	0xFF6
  2357                           tablat	equ	0xFF5
  2358                           intcon	equ	0xFF2
  2359                           intcon2	equ	0xFF1
  2360                           postinc0	equ	0xFEE
  2361                           wreg	equ	0xFE8
  2362                           status	equ	0xFD8
  2363                           
  2364 ;; *************** function _print_unit *****************
  2365 ;; Defined at:
  2366 ;;		line 408 in file "../../../src/print.c"
  2367 ;; Parameters:    Size  Location     Type
  2368 ;;  unit            1    wreg     unsigned char 
  2369 ;; Auto vars:     Size  Location     Type
  2370 ;;  unit            1    0[COMRAM] unsigned char 
  2371 ;; Return value:  Size  Location     Type
  2372 ;;		None               void
  2373 ;; Registers used:
  2374 ;;		wreg
  2375 ;; Tracked objects:
  2376 ;;		On entry : F/0
  2377 ;;		On exit  : F/0
  2378 ;;		Unchanged: F/0
  2379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2380 ;;      Params:         0       0       0       0       0       0       0       0       0
  2381 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2382 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2383 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2384 ;;Total ram usage:        0 bytes
  2385 ;; Hardware stack levels used:    1
  2386 ;; Hardware stack levels required when called:    1
  2387 ;; This function calls:
  2388 ;;		Nothing
  2389 ;; This function is called by:
  2390 ;;		_measure_capacitance
  2391 ;;		_measure_inductance
  2392 ;; This function uses a non-reentrant model
  2393 ;;
  2394                           
  2395                           	psect	text5
  2396  0027C6                     __ptext5:
  2397                           	opt stack 0
  2398  0027C6                     _print_unit:
  2399                           	opt stack 28
  2400                           
  2401                           ; BSR set to: 0
  2402                           
  2403                           ; BSR set to: 0
  2404                           ;incstack = 0
  2405  0027C6  0012               	return		;funcret
  2406  0027C8                     __end_of_print_unit:
  2407                           	opt stack 0
  2408                           tblptru	equ	0xFF8
  2409                           tblptrh	equ	0xFF7
  2410                           tblptrl	equ	0xFF6
  2411                           tablat	equ	0xFF5
  2412                           intcon	equ	0xFF2
  2413                           intcon2	equ	0xFF1
  2414                           postinc0	equ	0xFEE
  2415                           wreg	equ	0xFE8
  2416                           status	equ	0xFD8
  2417                           
  2418 ;; *************** function _print_reading *****************
  2419 ;; Defined at:
  2420 ;;		line 429 in file "../../../src/print.c"
  2421 ;; Parameters:    Size  Location     Type
  2422 ;;  measurement     2    2[COMRAM] unsigned short 
  2423 ;; Auto vars:     Size  Location     Type
  2424 ;;		None
  2425 ;; Return value:  Size  Location     Type
  2426 ;;		None               void
  2427 ;; Registers used:
  2428 ;;		None
  2429 ;; Tracked objects:
  2430 ;;		On entry : F/0
  2431 ;;		On exit  : F/0
  2432 ;;		Unchanged: F/0
  2433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2434 ;;      Params:         2       0       0       0       0       0       0       0       0
  2435 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2436 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2437 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2438 ;;Total ram usage:        2 bytes
  2439 ;; Hardware stack levels used:    1
  2440 ;; Hardware stack levels required when called:    1
  2441 ;; This function calls:
  2442 ;;		Nothing
  2443 ;; This function is called by:
  2444 ;;		_measure_capacitance
  2445 ;;		_measure_inductance
  2446 ;; This function uses a non-reentrant model
  2447 ;;
  2448                           
  2449                           	psect	text6
  2450  0027C8                     __ptext6:
  2451                           	opt stack 0
  2452  0027C8                     _print_reading:
  2453                           	opt stack 28
  2454                           
  2455                           ; BSR set to: 0
  2456                           
  2457                           ; BSR set to: 0
  2458                           ;incstack = 0
  2459  0027C8  0012               	return		;funcret
  2460  0027CA                     __end_of_print_reading:
  2461                           	opt stack 0
  2462                           tblptru	equ	0xFF8
  2463                           tblptrh	equ	0xFF7
  2464                           tblptrl	equ	0xFF6
  2465                           tablat	equ	0xFF5
  2466                           intcon	equ	0xFF2
  2467                           intcon2	equ	0xFF1
  2468                           postinc0	equ	0xFEE
  2469                           wreg	equ	0xFE8
  2470                           status	equ	0xFD8
  2471                           
  2472 ;; *************** function _format_xint32 *****************
  2473 ;; Defined at:
  2474 ;;		line 48 in file "../../../lib/format.c"
  2475 ;; Parameters:    Size  Location     Type
  2476 ;;  x               4   52[COMRAM] unsigned long 
  2477 ;; Auto vars:     Size  Location     Type
  2478 ;;		None
  2479 ;; Return value:  Size  Location     Type
  2480 ;;		None               void
  2481 ;; Registers used:
  2482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
  2483 ;; Tracked objects:
  2484 ;;		On entry : 0/0
  2485 ;;		On exit  : 0/0
  2486 ;;		Unchanged: 0/0
  2487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2488 ;;      Params:         4       0       0       0       0       0       0       0       0
  2489 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2490 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2491 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2492 ;;Total ram usage:        4 bytes
  2493 ;; Hardware stack levels used:    1
  2494 ;; Hardware stack levels required when called:    4
  2495 ;; This function calls:
  2496 ;;		_format_number
  2497 ;;		_format_putchar
  2498 ;;		_output_putch
  2499 ;;		_ser_putch
  2500 ;; This function is called by:
  2501 ;;		_measure_capacitance
  2502 ;; This function uses a non-reentrant model
  2503 ;;
  2504                           
  2505                           	psect	text7
  2506  00239C                     __ptext7:
  2507                           	opt stack 0
  2508  00239C                     _format_xint32:
  2509                           	opt stack 25
  2510                           
  2511                           ;format.c: 49: putchar_ptr('0');
  2512                           
  2513                           ; BSR set to: 0
  2514                           ;incstack = 0
  2515  00239C  D801               	call	u2148
  2516  00239E  D00B               	goto	u2149
  2517  0023A0                     u2148:
  2518  0023A0  0005               	push	
  2519  0023A2  0100               	movlb	0	; () banked
  2520  0023A4  6EFA               	movwf	pclath,c
  2521  0023A6  51F6               	movf	_putchar_ptr& (0+255),w,b
  2522  0023A8  6EFD               	movwf	tosl,c
  2523  0023AA  51F7               	movf	(_putchar_ptr+1)& (0+255),w,b
  2524  0023AC  6EFE               	movwf	tosh,c
  2525  0023AE  50F8               	movf	tblptru,w,c
  2526  0023B0  6EFF               	movwf	tosu,c
  2527  0023B2  50FA               	movf	pclath,w,c
  2528  0023B4  0C30               	retlw	48	;indir
  2529  0023B6                     u2149:
  2530                           
  2531                           ;format.c: 50: putchar_ptr('x');
  2532  0023B6  D801               	call	u2158
  2533  0023B8  D00B               	goto	u2159
  2534  0023BA                     u2158:
  2535  0023BA  0005               	push	
  2536  0023BC  0100               	movlb	0	; () banked
  2537  0023BE  6EFA               	movwf	pclath,c
  2538  0023C0  51F6               	movf	_putchar_ptr& (0+255),w,b
  2539  0023C2  6EFD               	movwf	tosl,c
  2540  0023C4  51F7               	movf	(_putchar_ptr+1)& (0+255),w,b
  2541  0023C6  6EFE               	movwf	tosh,c
  2542  0023C8  50F8               	movf	tblptru,w,c
  2543  0023CA  6EFF               	movwf	tosu,c
  2544  0023CC  50FA               	movf	pclath,w,c
  2545  0023CE  0C78               	retlw	120	;indir
  2546  0023D0                     u2159:
  2547                           
  2548                           ;format.c: 51: format_number((unsigned short int)(x >> 16), 16, -4);
  2549  0023D0  C037  F00A         	movff	format_xint32@x+2,format_number@n
  2550  0023D4  C038  F00B         	movff	format_xint32@x+3,format_number@n+1
  2551  0023D8  0E10               	movlw	16
  2552  0023DA  6E0C               	movwf	format_number@base,c
  2553  0023DC  0EFC               	movlw	252
  2554  0023DE  6E0D               	movwf	format_number@pad,c
  2555  0023E0  EC8A  F00E         	call	_format_number
  2556                           
  2557                           ;format.c: 52: format_number((unsigned short int)(x & 0xffff), 16, -4);
  2558  0023E4  C035  F00A         	movff	format_xint32@x,format_number@n
  2559  0023E8  C036  F00B         	movff	format_xint32@x+1,format_number@n+1
  2560  0023EC  0E10               	movlw	16
  2561  0023EE  6E0C               	movwf	format_number@base,c
  2562  0023F0  0EFC               	movlw	252
  2563  0023F2  6E0D               	movwf	format_number@pad,c
  2564  0023F4  EC8A  F00E         	call	_format_number	;wreg free
  2565  0023F8  0012               	return		;funcret
  2566  0023FA                     __end_of_format_xint32:
  2567                           	opt stack 0
  2568                           tosu	equ	0xFFF
  2569                           tosh	equ	0xFFE
  2570                           tosl	equ	0xFFD
  2571                           pclath	equ	0xFFA
  2572                           tblptru	equ	0xFF8
  2573                           tblptrh	equ	0xFF7
  2574                           tblptrl	equ	0xFF6
  2575                           tablat	equ	0xFF5
  2576                           intcon	equ	0xFF2
  2577                           intcon2	equ	0xFF1
  2578                           postinc0	equ	0xFEE
  2579                           wreg	equ	0xFE8
  2580                           status	equ	0xFD8
  2581                           
  2582 ;; *************** function _format_number *****************
  2583 ;; Defined at:
  2584 ;;		line 14 in file "../../../lib/format.c"
  2585 ;; Parameters:    Size  Location     Type
  2586 ;;  n               2    9[COMRAM] unsigned short 
  2587 ;;  base            1   11[COMRAM] unsigned char 
  2588 ;;  pad             1   12[COMRAM] char 
  2589 ;; Auto vars:     Size  Location     Type
  2590 ;;  buf            32   15[COMRAM] unsigned char [32]
  2591 ;;  i               1   51[COMRAM] char 
  2592 ;;  di              1   50[COMRAM] unsigned char 
  2593 ;;  padchar         1   49[COMRAM] unsigned char 
  2594 ;; Return value:  Size  Location     Type
  2595 ;;		None               void
  2596 ;; Registers used:
  2597 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
  2598 ;; Tracked objects:
  2599 ;;		On entry : 0/0
  2600 ;;		On exit  : 0/0
  2601 ;;		Unchanged: 0/0
  2602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2603 ;;      Params:         4       0       0       0       0       0       0       0       0
  2604 ;;      Locals:        37       0       0       0       0       0       0       0       0
  2605 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2606 ;;      Totals:        43       0       0       0       0       0       0       0       0
  2607 ;;Total ram usage:       43 bytes
  2608 ;; Hardware stack levels used:    1
  2609 ;; Hardware stack levels required when called:    3
  2610 ;; This function calls:
  2611 ;;		___lwdiv
  2612 ;;		___lwmod
  2613 ;;		_format_putchar
  2614 ;;		_output_putch
  2615 ;;		_ser_putch
  2616 ;; This function is called by:
  2617 ;;		_format_xint32
  2618 ;; This function uses a non-reentrant model
  2619 ;;
  2620                           
  2621                           	psect	text8
  2622  001D14                     __ptext8:
  2623                           	opt stack 0
  2624  001D14                     _format_number:
  2625                           	opt stack 25
  2626                           
  2627                           ;format.c: 15: char buf[8 * sizeof(long)];
  2628                           ;format.c: 16: unsigned char di;
  2629                           ;format.c: 17: signed char i = 0;
  2630                           
  2631                           ;incstack = 0
  2632  001D14  6A34               	clrf	format_number@i,c
  2633                           
  2634                           ;format.c: 18: char padchar = ' ';
  2635  001D16  0E20               	movlw	32
  2636  001D18  6E32               	movwf	format_number@padchar,c
  2637                           
  2638                           ;format.c: 20: if(pad < 0) {
  2639  001D1A  AE0D               	btfss	format_number@pad,7,c
  2640  001D1C  D003               	goto	l2477
  2641                           
  2642                           ;format.c: 21: pad = -pad;
  2643  001D1E  6C0D               	negf	format_number@pad,c
  2644                           
  2645                           ;format.c: 22: padchar = '0';
  2646  001D20  0E30               	movlw	48
  2647  001D22  6E32               	movwf	format_number@padchar,c
  2648  001D24                     l2477:
  2649                           
  2650                           ;format.c: 34: di = n % base;
  2651  001D24  C00A  F003         	movff	format_number@n,___lwmod@dividend
  2652  001D28  C00B  F004         	movff	format_number@n+1,___lwmod@dividend+1
  2653  001D2C  C00C  F005         	movff	format_number@base,___lwmod@divisor
  2654  001D30  6A06               	clrf	___lwmod@divisor+1,c
  2655  001D32  EC2D  F013         	call	___lwmod	;wreg free
  2656  001D36  5003               	movf	?___lwmod,w,c
  2657  001D38  6E33               	movwf	format_number@di,c
  2658                           
  2659                           ;format.c: 35: buf[i++] = (di < 10 ? (unsigned char)'0' + di : (unsigned char)'A' + di -
      +                           10);
  2660  001D3A  0E09               	movlw	9
  2661  001D3C  6433               	cpfsgt	format_number@di,c
  2662  001D3E  D002               	goto	l2483
  2663  001D40  0E37               	movlw	55
  2664  001D42  D001               	goto	L3
  2665  001D44                     l2483:
  2666  001D44  0E30               	movlw	48
  2667  001D46                     L3:
  2668  001D46  2433               	addwf	format_number@di,w,c
  2669  001D48  6E30               	movwf	_format_number$128,c
  2670  001D4A  6A31               	clrf	_format_number$128+1,c
  2671  001D4C  0E00               	movlw	0
  2672  001D4E  2231               	addwfc	_format_number$128+1,f,c
  2673  001D50  5034               	movf	format_number@i,w,c
  2674  001D52  0F10               	addlw	low format_number@buf
  2675  001D54  6ED9               	movwf	fsr2l,c
  2676  001D56  6ADA               	clrf	fsr2h,c
  2677  001D58  C030  FFDF         	movff	_format_number$128,indf2
  2678  001D5C  2A34               	incf	format_number@i,f,c
  2679                           
  2680                           ;format.c: 37: n /= base;
  2681  001D5E  C00A  F003         	movff	format_number@n,___lwdiv@dividend
  2682  001D62  C00B  F004         	movff	format_number@n+1,___lwdiv@dividend+1
  2683  001D66  C00C  F005         	movff	format_number@base,___lwdiv@divisor
  2684  001D6A  6A06               	clrf	___lwdiv@divisor+1,c
  2685  001D6C  ECA3  F012         	call	___lwdiv	;wreg free
  2686  001D70  C003  F00A         	movff	?___lwdiv,format_number@n
  2687  001D74  C004  F00B         	movff	?___lwdiv+1,format_number@n+1
  2688                           
  2689                           ;format.c: 38: } while(n > 0);
  2690  001D78  500A               	movf	format_number@n,w,c
  2691  001D7A  100B               	iorwf	format_number@n+1,w,c
  2692  001D7C  E00F               	bz	l2495
  2693  001D7E  D7D2               	goto	l2477
  2694  001D80                     l2493:
  2695  001D80  D801               	call	u2048
  2696  001D82  D00C               	goto	l2495
  2697  001D84                     u2048:
  2698  001D84  0005               	push	
  2699  001D86  0100               	movlb	0	; () banked
  2700  001D88  6EFA               	movwf	pclath,c
  2701  001D8A  51F6               	movf	_putchar_ptr& (0+255),w,b
  2702  001D8C  6EFD               	movwf	tosl,c
  2703  001D8E  51F7               	movf	(_putchar_ptr+1)& (0+255),w,b
  2704  001D90  6EFE               	movwf	tosh,c
  2705  001D92  50F8               	movf	tblptru,w,c
  2706  001D94  6EFF               	movwf	tosu,c
  2707  001D96  50FA               	movf	pclath,w,c
  2708  001D98  5032               	movf	format_number@padchar,w,c
  2709  001D9A  0012               	return		;indir
  2710  001D9C                     l2495:
  2711  001D9C  060D               	decf	format_number@pad,f,c
  2712  001D9E  280D               	incf	format_number@pad,w,c
  2713  001DA0  6E0E               	movwf	??_format_number& (0+255),c
  2714  001DA2  5034               	movf	format_number@i,w,c
  2715  001DA4  0A80               	xorlw	128
  2716  001DA6  6E0F               	movwf	(??_format_number+1)& (0+255),c
  2717  001DA8  500E               	movf	??_format_number,w,c
  2718  001DAA  0A80               	xorlw	128
  2719  001DAC  5C0F               	subwf	(??_format_number+1)& (0+255),w,c
  2720  001DAE  E3E8               	bnc	l2493
  2721  001DB0                     l2497:
  2722                           
  2723                           ;format.c: 42: for(; i > 0; i--) putchar_ptr((char)buf[(signed short int)i - 1]);
  2724  001DB0  5034               	movf	format_number@i,w,c
  2725  001DB2  0A80               	xorlw	128
  2726  001DB4  0F7F               	addlw	-129
  2727  001DB6  E317               	bnc	l161
  2728  001DB8  D801               	call	u2078
  2729  001DBA  D013               	goto	l2503
  2730  001DBC                     u2078:
  2731  001DBC  0005               	push	
  2732  001DBE  0100               	movlb	0	; () banked
  2733  001DC0  6EFA               	movwf	pclath,c
  2734  001DC2  51F6               	movf	_putchar_ptr& (0+255),w,b
  2735  001DC4  6EFD               	movwf	tosl,c
  2736  001DC6  51F7               	movf	(_putchar_ptr+1)& (0+255),w,b
  2737  001DC8  6EFE               	movwf	tosh,c
  2738  001DCA  50F8               	movf	tblptru,w,c
  2739  001DCC  6EFF               	movwf	tosu,c
  2740  001DCE  50FA               	movf	pclath,w,c
  2741  001DD0  C034  F00E         	movff	format_number@i,??_format_number
  2742  001DD4  060E               	decf	??_format_number,f,c
  2743  001DD6  500E               	movf	??_format_number,w,c
  2744  001DD8  0F10               	addlw	low format_number@buf
  2745  001DDA  6ED9               	movwf	fsr2l,c
  2746  001DDC  6ADA               	clrf	fsr2h,c
  2747  001DDE  50DF               	movf	indf2,w,c
  2748  001DE0  0012               	return		;indir
  2749  001DE2                     l2503:
  2750  001DE2  0634               	decf	format_number@i,f,c
  2751  001DE4  D7E5               	goto	l2497
  2752  001DE6                     l161:
  2753  001DE6  0012               	return		;funcret
  2754  001DE8                     __end_of_format_number:
  2755                           	opt stack 0
  2756                           tosu	equ	0xFFF
  2757                           tosh	equ	0xFFE
  2758                           tosl	equ	0xFFD
  2759                           pclath	equ	0xFFA
  2760                           tblptru	equ	0xFF8
  2761                           tblptrh	equ	0xFF7
  2762                           tblptrl	equ	0xFF6
  2763                           tablat	equ	0xFF5
  2764                           intcon	equ	0xFF2
  2765                           intcon2	equ	0xFF1
  2766                           postinc0	equ	0xFEE
  2767                           wreg	equ	0xFE8
  2768                           indf2	equ	0xFDF
  2769                           fsr2h	equ	0xFDA
  2770                           fsr2l	equ	0xFD9
  2771                           status	equ	0xFD8
  2772                           
  2773 ;; *************** function ___lwmod *****************
  2774 ;; Defined at:
  2775 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  2776 ;; Parameters:    Size  Location     Type
  2777 ;;  dividend        2    2[COMRAM] unsigned int 
  2778 ;;  divisor         2    4[COMRAM] unsigned int 
  2779 ;; Auto vars:     Size  Location     Type
  2780 ;;  counter         1    6[COMRAM] unsigned char 
  2781 ;; Return value:  Size  Location     Type
  2782 ;;                  2    2[COMRAM] unsigned int 
  2783 ;; Registers used:
  2784 ;;		wreg, status,2, status,0
  2785 ;; Tracked objects:
  2786 ;;		On entry : 0/0
  2787 ;;		On exit  : 0/0
  2788 ;;		Unchanged: 0/0
  2789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2790 ;;      Params:         4       0       0       0       0       0       0       0       0
  2791 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2792 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2793 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2794 ;;Total ram usage:        5 bytes
  2795 ;; Hardware stack levels used:    1
  2796 ;; Hardware stack levels required when called:    1
  2797 ;; This function calls:
  2798 ;;		Nothing
  2799 ;; This function is called by:
  2800 ;;		_format_number
  2801 ;; This function uses a non-reentrant model
  2802 ;;
  2803                           
  2804                           	psect	text9
  2805  00265A                     __ptext9:
  2806                           	opt stack 0
  2807  00265A                     ___lwmod:
  2808                           	opt stack 26
  2809                           
  2810                           ;incstack = 0
  2811  00265A  5005               	movf	___lwmod@divisor,w,c
  2812  00265C  1006               	iorwf	___lwmod@divisor+1,w,c
  2813  00265E  E017               	bz	l924
  2814  002660  0E01               	movlw	1
  2815  002662  6E07               	movwf	___lwmod@counter,c
  2816  002664  D004               	goto	l2415
  2817  002666                     l2413:
  2818  002666  90D8               	bcf	status,0,c
  2819  002668  3605               	rlcf	___lwmod@divisor,f,c
  2820  00266A  3606               	rlcf	___lwmod@divisor+1,f,c
  2821  00266C  2A07               	incf	___lwmod@counter,f,c
  2822  00266E                     l2415:
  2823  00266E  AE06               	btfss	___lwmod@divisor+1,7,c
  2824  002670  D7FA               	goto	l2413
  2825  002672                     l2417:
  2826  002672  5005               	movf	___lwmod@divisor,w,c
  2827  002674  5C03               	subwf	___lwmod@dividend,w,c
  2828  002676  5006               	movf	___lwmod@divisor+1,w,c
  2829  002678  5804               	subwfb	___lwmod@dividend+1,w,c
  2830  00267A  E304               	bnc	l2421
  2831  00267C  5005               	movf	___lwmod@divisor,w,c
  2832  00267E  5E03               	subwf	___lwmod@dividend,f,c
  2833  002680  5006               	movf	___lwmod@divisor+1,w,c
  2834  002682  5A04               	subwfb	___lwmod@dividend+1,f,c
  2835  002684                     l2421:
  2836  002684  90D8               	bcf	status,0,c
  2837  002686  3206               	rrcf	___lwmod@divisor+1,f,c
  2838  002688  3205               	rrcf	___lwmod@divisor,f,c
  2839  00268A  2E07               	decfsz	___lwmod@counter,f,c
  2840  00268C  D7F2               	goto	l2417
  2841  00268E                     l924:
  2842  00268E  C003  F003         	movff	___lwmod@dividend,?___lwmod
  2843  002692  C004  F004         	movff	___lwmod@dividend+1,?___lwmod+1
  2844  002696  0012               	return		;funcret
  2845  002698                     __end_of___lwmod:
  2846                           	opt stack 0
  2847                           tosu	equ	0xFFF
  2848                           tosh	equ	0xFFE
  2849                           tosl	equ	0xFFD
  2850                           pclath	equ	0xFFA
  2851                           tblptru	equ	0xFF8
  2852                           tblptrh	equ	0xFF7
  2853                           tblptrl	equ	0xFF6
  2854                           tablat	equ	0xFF5
  2855                           intcon	equ	0xFF2
  2856                           intcon2	equ	0xFF1
  2857                           postinc0	equ	0xFEE
  2858                           wreg	equ	0xFE8
  2859                           indf2	equ	0xFDF
  2860                           fsr2h	equ	0xFDA
  2861                           fsr2l	equ	0xFD9
  2862                           status	equ	0xFD8
  2863                           
  2864 ;; *************** function ___lwdiv *****************
  2865 ;; Defined at:
  2866 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2867 ;; Parameters:    Size  Location     Type
  2868 ;;  dividend        2    2[COMRAM] unsigned int 
  2869 ;;  divisor         2    4[COMRAM] unsigned int 
  2870 ;; Auto vars:     Size  Location     Type
  2871 ;;  quotient        2    6[COMRAM] unsigned int 
  2872 ;;  counter         1    8[COMRAM] unsigned char 
  2873 ;; Return value:  Size  Location     Type
  2874 ;;                  2    2[COMRAM] unsigned int 
  2875 ;; Registers used:
  2876 ;;		wreg, status,2, status,0
  2877 ;; Tracked objects:
  2878 ;;		On entry : 0/0
  2879 ;;		On exit  : 0/0
  2880 ;;		Unchanged: 0/0
  2881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2882 ;;      Params:         4       0       0       0       0       0       0       0       0
  2883 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2884 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2885 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2886 ;;Total ram usage:        7 bytes
  2887 ;; Hardware stack levels used:    1
  2888 ;; Hardware stack levels required when called:    1
  2889 ;; This function calls:
  2890 ;;		Nothing
  2891 ;; This function is called by:
  2892 ;;		_format_number
  2893 ;; This function uses a non-reentrant model
  2894 ;;
  2895                           
  2896                           	psect	text10
  2897  002546                     __ptext10:
  2898                           	opt stack 0
  2899  002546                     ___lwdiv:
  2900                           	opt stack 26
  2901                           
  2902                           ;incstack = 0
  2903  002546  6A07               	clrf	___lwdiv@quotient,c
  2904  002548  6A08               	clrf	___lwdiv@quotient+1,c
  2905  00254A  5005               	movf	___lwdiv@divisor,w,c
  2906  00254C  1006               	iorwf	___lwdiv@divisor+1,w,c
  2907  00254E  E01B               	bz	l914
  2908  002550  0E01               	movlw	1
  2909  002552  6E09               	movwf	___lwdiv@counter,c
  2910  002554  D004               	goto	l2395
  2911  002556                     l2393:
  2912  002556  90D8               	bcf	status,0,c
  2913  002558  3605               	rlcf	___lwdiv@divisor,f,c
  2914  00255A  3606               	rlcf	___lwdiv@divisor+1,f,c
  2915  00255C  2A09               	incf	___lwdiv@counter,f,c
  2916  00255E                     l2395:
  2917  00255E  AE06               	btfss	___lwdiv@divisor+1,7,c
  2918  002560  D7FA               	goto	l2393
  2919  002562                     l2397:
  2920  002562  90D8               	bcf	status,0,c
  2921  002564  3607               	rlcf	___lwdiv@quotient,f,c
  2922  002566  3608               	rlcf	___lwdiv@quotient+1,f,c
  2923  002568  5005               	movf	___lwdiv@divisor,w,c
  2924  00256A  5C03               	subwf	___lwdiv@dividend,w,c
  2925  00256C  5006               	movf	___lwdiv@divisor+1,w,c
  2926  00256E  5804               	subwfb	___lwdiv@dividend+1,w,c
  2927  002570  E305               	bnc	l2405
  2928  002572  5005               	movf	___lwdiv@divisor,w,c
  2929  002574  5E03               	subwf	___lwdiv@dividend,f,c
  2930  002576  5006               	movf	___lwdiv@divisor+1,w,c
  2931  002578  5A04               	subwfb	___lwdiv@dividend+1,f,c
  2932  00257A  8007               	bsf	___lwdiv@quotient,0,c
  2933  00257C                     l2405:
  2934  00257C  90D8               	bcf	status,0,c
  2935  00257E  3206               	rrcf	___lwdiv@divisor+1,f,c
  2936  002580  3205               	rrcf	___lwdiv@divisor,f,c
  2937  002582  2E09               	decfsz	___lwdiv@counter,f,c
  2938  002584  D7EE               	goto	l2397
  2939  002586                     l914:
  2940  002586  C007  F003         	movff	___lwdiv@quotient,?___lwdiv
  2941  00258A  C008  F004         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2942  00258E  0012               	return		;funcret
  2943  002590                     __end_of___lwdiv:
  2944                           	opt stack 0
  2945                           tosu	equ	0xFFF
  2946                           tosh	equ	0xFFE
  2947                           tosl	equ	0xFFD
  2948                           pclath	equ	0xFFA
  2949                           tblptru	equ	0xFF8
  2950                           tblptrh	equ	0xFF7
  2951                           tblptrl	equ	0xFF6
  2952                           tablat	equ	0xFF5
  2953                           intcon	equ	0xFF2
  2954                           intcon2	equ	0xFF1
  2955                           postinc0	equ	0xFEE
  2956                           wreg	equ	0xFE8
  2957                           indf2	equ	0xFDF
  2958                           fsr2h	equ	0xFDA
  2959                           fsr2l	equ	0xFD9
  2960                           status	equ	0xFD8
  2961                           
  2962 ;; *************** function _format_double *****************
  2963 ;; Defined at:
  2964 ;;		line 74 in file "../../../lib/format.c"
  2965 ;; Parameters:    Size  Location     Type
  2966 ;;  num             4   58[BANK0 ] unsigned int 
  2967 ;; Auto vars:     Size  Location     Type
  2968 ;;  weight          4   70[BANK0 ] unsigned int 
  2969 ;;  m               2   76[BANK0 ] short 
  2970 ;;  digit           2   74[BANK0 ] short 
  2971 ;; Return value:  Size  Location     Type
  2972 ;;		None               void
  2973 ;; Registers used:
  2974 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2975 ;; Tracked objects:
  2976 ;;		On entry : 0/0
  2977 ;;		On exit  : 0/0
  2978 ;;		Unchanged: 0/0
  2979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2980 ;;      Params:         0       4       0       0       0       0       0       0       0
  2981 ;;      Locals:         0      16       0       0       0       0       0       0       0
  2982 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2983 ;;      Totals:         0      20       0       0       0       0       0       0       0
  2984 ;;Total ram usage:       20 bytes
  2985 ;; Hardware stack levels used:    1
  2986 ;; Hardware stack levels required when called:    6
  2987 ;; This function calls:
  2988 ;;		___awtofl
  2989 ;;		___fldiv
  2990 ;;		___flge
  2991 ;;		___flmul
  2992 ;;		___flsub
  2993 ;;		___fltol
  2994 ;;		_floor
  2995 ;;		_format_putchar
  2996 ;;		_log10
  2997 ;;		_output_putch
  2998 ;;		_pow
  2999 ;;		_ser_putch
  3000 ;; This function is called by:
  3001 ;;		_measure_capacitance
  3002 ;; This function uses a non-reentrant model
  3003 ;;
  3004                           
  3005                           	psect	text11
  3006  001588                     __ptext11:
  3007                           	opt stack 0
  3008  001588                     _format_double:
  3009                           	opt stack 23
  3010                           
  3011                           ;format.c: 75: short m = (short)log10(num);
  3012                           
  3013                           ;incstack = 0
  3014  001588  C09A  F055         	movff	format_double@num,log10@x
  3015  00158C  C09B  F056         	movff	format_double@num+1,log10@x+1
  3016  001590  C09C  F057         	movff	format_double@num+2,log10@x+2
  3017  001594  C09D  F058         	movff	format_double@num+3,log10@x+3
  3018  001598  ECFD  F011         	call	_log10
  3019  00159C  C055  F064         	movff	?_log10,___fltol@f1
  3020  0015A0  C056  F065         	movff	?_log10+1,___fltol@f1+1
  3021  0015A4  C057  F066         	movff	?_log10+2,___fltol@f1+2
  3022  0015A8  C058  F067         	movff	?_log10+3,___fltol@f1+3
  3023  0015AC  ECBA  F010         	call	___fltol	;wreg free
  3024  0015B0  C064  F0AC         	movff	?___fltol,format_double@m
  3025  0015B4  C065  F0AD         	movff	?___fltol+1,format_double@m+1
  3026                           
  3027                           ;format.c: 76: short digit;
  3028                           ;format.c: 79: while(num > 0 + 1.19209290e-07) {
  3029  0015B8  D0AE               	goto	l3371
  3030  0015BA                     l3353:
  3031                           
  3032                           ;format.c: 80: double weight = pow(10.0l, m);
  3033  0015BA  C0AC  F00D         	movff	format_double@m,___awtofl@c
  3034  0015BE  C0AD  F00E         	movff	format_double@m+1,___awtofl@c+1
  3035  0015C2  EC4C  F013         	call	___awtofl	;wreg free
  3036  0015C6  C00D  F09E         	movff	?___awtofl,_format_double$918
  3037  0015CA  C00E  F09F         	movff	?___awtofl+1,_format_double$918+1
  3038  0015CE  C00F  F0A0         	movff	?___awtofl+2,_format_double$918+2
  3039  0015D2  C010  F0A1         	movff	?___awtofl+3,_format_double$918+3
  3040                           
  3041                           ;format.c: 80: double weight = pow(10.0l, m);
  3042  0015D6  0100               	movlb	0	; () banked
  3043  0015D8  6B85               	clrf	pow@x& (0+255),b
  3044  0015DA  6B86               	clrf	(pow@x+1)& (0+255),b
  3045  0015DC  0E20               	movlw	32
  3046  0015DE  6F87               	movwf	(pow@x+2)& (0+255),b
  3047  0015E0  0E41               	movlw	65
  3048  0015E2  6F88               	movwf	(pow@x+3)& (0+255),b
  3049  0015E4  C09E  F089         	movff	_format_double$918,pow@y
  3050  0015E8  C09F  F08A         	movff	_format_double$918+1,pow@y+1
  3051  0015EC  C0A0  F08B         	movff	_format_double$918+2,pow@y+2
  3052  0015F0  C0A1  F08C         	movff	_format_double$918+3,pow@y+3
  3053  0015F4  EC9D  F00B         	call	_pow	;wreg free
  3054  0015F8  C085  F0A6         	movff	?_pow,format_double@weight
  3055  0015FC  C086  F0A7         	movff	?_pow+1,format_double@weight+1
  3056  001600  C087  F0A8         	movff	?_pow+2,format_double@weight+2
  3057  001604  C088  F0A9         	movff	?_pow+3,format_double@weight+3
  3058                           
  3059                           ; BSR set to: 0
  3060                           ;format.c: 81: digit = (short)floor(num / weight);
  3061  001608  C0A6  F011         	movff	format_double@weight,___fldiv@f2
  3062  00160C  C0A7  F012         	movff	format_double@weight+1,___fldiv@f2+1
  3063  001610  C0A8  F013         	movff	format_double@weight+2,___fldiv@f2+2
  3064  001614  C0A9  F014         	movff	format_double@weight+3,___fldiv@f2+3
  3065  001618  C09A  F00D         	movff	format_double@num,___fldiv@f1
  3066  00161C  C09B  F00E         	movff	format_double@num+1,___fldiv@f1+1
  3067  001620  C09C  F00F         	movff	format_double@num+2,___fldiv@f1+2
  3068  001624  C09D  F010         	movff	format_double@num+3,___fldiv@f1+3
  3069  001628  EC16  F010         	call	___fldiv	;wreg free
  3070  00162C  C00D  F070         	movff	?___fldiv,floor@x
  3071  001630  C00E  F071         	movff	?___fldiv+1,floor@x+1
  3072  001634  C00F  F072         	movff	?___fldiv+2,floor@x+2
  3073  001638  C010  F073         	movff	?___fldiv+3,floor@x+3
  3074  00163C  ECA2  F00D         	call	_floor	;wreg free
  3075  001640  C070  F0A2         	movff	?_floor,_format_double$919
  3076  001644  C071  F0A3         	movff	?_floor+1,_format_double$919+1
  3077  001648  C072  F0A4         	movff	?_floor+2,_format_double$919+2
  3078  00164C  C073  F0A5         	movff	?_floor+3,_format_double$919+3
  3079                           
  3080                           ;format.c: 81: digit = (short)floor(num / weight);
  3081  001650  C0A2  F064         	movff	_format_double$919,___fltol@f1
  3082  001654  C0A3  F065         	movff	_format_double$919+1,___fltol@f1+1
  3083  001658  C0A4  F066         	movff	_format_double$919+2,___fltol@f1+2
  3084  00165C  C0A5  F067         	movff	_format_double$919+3,___fltol@f1+3
  3085  001660  ECBA  F010         	call	___fltol	;wreg free
  3086  001664  C064  F0AA         	movff	?___fltol,format_double@digit
  3087  001668  C065  F0AB         	movff	?___fltol+1,format_double@digit+1
  3088                           
  3089                           ; BSR set to: 0
  3090                           ;format.c: 82: num -= (digit * weight);
  3091  00166C  C09A  F043         	movff	format_double@num,___flsub@f1
  3092  001670  C09B  F044         	movff	format_double@num+1,___flsub@f1+1
  3093  001674  C09C  F045         	movff	format_double@num+2,___flsub@f1+2
  3094  001678  C09D  F046         	movff	format_double@num+3,___flsub@f1+3
  3095  00167C  C0A6  F020         	movff	format_double@weight,___flmul@f2
  3096  001680  C0A7  F021         	movff	format_double@weight+1,___flmul@f2+1
  3097  001684  C0A8  F022         	movff	format_double@weight+2,___flmul@f2+2
  3098  001688  C0A9  F023         	movff	format_double@weight+3,___flmul@f2+3
  3099  00168C  C0AA  F00D         	movff	format_double@digit,___awtofl@c
  3100  001690  C0AB  F00E         	movff	format_double@digit+1,___awtofl@c+1
  3101  001694  EC4C  F013         	call	___awtofl	;wreg free
  3102  001698  C00D  F01C         	movff	?___awtofl,___flmul@f1
  3103  00169C  C00E  F01D         	movff	?___awtofl+1,___flmul@f1+1
  3104  0016A0  C00F  F01E         	movff	?___awtofl+2,___flmul@f1+2
  3105  0016A4  C010  F01F         	movff	?___awtofl+3,___flmul@f1+3
  3106  0016A8  ECE5  F009         	call	___flmul	;wreg free
  3107  0016AC  C01C  F047         	movff	?___flmul,___flsub@f2
  3108  0016B0  C01D  F048         	movff	?___flmul+1,___flsub@f2+1
  3109  0016B4  C01E  F049         	movff	?___flmul+2,___flsub@f2+2
  3110  0016B8  C01F  F04A         	movff	?___flmul+3,___flsub@f2+3
  3111  0016BC  ECEC  F012         	call	___flsub	;wreg free
  3112  0016C0  C043  F09A         	movff	?___flsub,format_double@num
  3113  0016C4  C044  F09B         	movff	?___flsub+1,format_double@num+1
  3114  0016C8  C045  F09C         	movff	?___flsub+2,format_double@num+2
  3115  0016CC  C046  F09D         	movff	?___flsub+3,format_double@num+3
  3116                           
  3117                           ;format.c: 83: putchar_ptr((char)('0' + digit));
  3118  0016D0  D801               	call	u3148
  3119  0016D2  D00D               	goto	l3365
  3120  0016D4                     u3148:
  3121  0016D4  0005               	push	
  3122  0016D6  0100               	movlb	0	; () banked
  3123  0016D8  6EFA               	movwf	pclath,c
  3124  0016DA  51F6               	movf	_putchar_ptr& (0+255),w,b
  3125  0016DC  6EFD               	movwf	tosl,c
  3126  0016DE  51F7               	movf	(_putchar_ptr+1)& (0+255),w,b
  3127  0016E0  6EFE               	movwf	tosh,c
  3128  0016E2  50F8               	movf	tblptru,w,c
  3129  0016E4  6EFF               	movwf	tosu,c
  3130  0016E6  50FA               	movf	pclath,w,c
  3131  0016E8  51AA               	movf	format_double@digit& (0+255),w,b
  3132  0016EA  0F30               	addlw	48
  3133  0016EC  0012               	return		;indir
  3134  0016EE                     l3365:
  3135                           
  3136                           ;format.c: 84: if(m == 0)
  3137  0016EE  0100               	movlb	0	; () banked
  3138  0016F0  51AC               	movf	format_double@m& (0+255),w,b
  3139  0016F2  11AD               	iorwf	(format_double@m+1)& (0+255),w,b
  3140  0016F4  E10C               	bnz	l3369
  3141                           
  3142                           ; BSR set to: 0
  3143                           ;format.c: 85: putchar_ptr('.');
  3144  0016F6  D801               	call	u3168
  3145  0016F8  D00A               	goto	l3369
  3146  0016FA                     u3168:
  3147  0016FA  0005               	push	
  3148  0016FC  6EFA               	movwf	pclath,c
  3149  0016FE  51F6               	movf	_putchar_ptr& (0+255),w,b
  3150  001700  6EFD               	movwf	tosl,c
  3151  001702  51F7               	movf	(_putchar_ptr+1)& (0+255),w,b
  3152  001704  6EFE               	movwf	tosh,c
  3153  001706  50F8               	movf	tblptru,w,c
  3154  001708  6EFF               	movwf	tosu,c
  3155  00170A  50FA               	movf	pclath,w,c
  3156  00170C  0C2E               	retlw	46	;indir
  3157  00170E                     l3369:
  3158                           
  3159                           ;format.c: 86: m--;
  3160  00170E  0100               	movlb	0	; () banked
  3161  001710  07AC               	decf	format_double@m& (0+255),f,b
  3162  001712  A0D8               	btfss	status,0,c
  3163  001714  07AD               	decf	(format_double@m+1)& (0+255),f,b
  3164  001716                     l3371:
  3165                           
  3166                           ; BSR set to: 0
  3167  001716  6A03               	clrf	___flge@ff1,c
  3168  001718  6A04               	clrf	___flge@ff1+1,c
  3169  00171A  6A05               	clrf	___flge@ff1+2,c
  3170  00171C  0E34               	movlw	52
  3171  00171E  6E06               	movwf	___flge@ff1+3,c
  3172  001720  C09A  F007         	movff	format_double@num,___flge@ff2
  3173  001724  C09B  F008         	movff	format_double@num+1,___flge@ff2+1
  3174  001728  C09C  F009         	movff	format_double@num+2,___flge@ff2+2
  3175  00172C  C09D  F00A         	movff	format_double@num+3,___flge@ff2+3
  3176  001730  EC7D  F012         	call	___flge
  3177  001734  B0D8               	btfsc	status,0,c
  3178  001736  0012               	return		;funcret
  3179  001738  D740               	goto	l3353
  3180  00173A                     __end_of_format_double:
  3181                           	opt stack 0
  3182                           tosu	equ	0xFFF
  3183                           tosh	equ	0xFFE
  3184                           tosl	equ	0xFFD
  3185                           pclath	equ	0xFFA
  3186                           tblptru	equ	0xFF8
  3187                           tblptrh	equ	0xFF7
  3188                           tblptrl	equ	0xFF6
  3189                           tablat	equ	0xFF5
  3190                           intcon	equ	0xFF2
  3191                           intcon2	equ	0xFF1
  3192                           postinc0	equ	0xFEE
  3193                           wreg	equ	0xFE8
  3194                           indf2	equ	0xFDF
  3195                           fsr2h	equ	0xFDA
  3196                           fsr2l	equ	0xFD9
  3197                           status	equ	0xFD8
  3198                           
  3199 ;; *************** function _pow *****************
  3200 ;; Defined at:
  3201 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\pow.c"
  3202 ;; Parameters:    Size  Location     Type
  3203 ;;  x               4   37[BANK0 ] short 
  3204 ;;  y               4   41[BANK0 ] short 
  3205 ;; Auto vars:     Size  Location     Type
  3206 ;;  yi              4   54[BANK0 ] unsigned long 
  3207 ;;  sign            1   53[BANK0 ] unsigned char 
  3208 ;; Return value:  Size  Location     Type
  3209 ;;                  4   37[BANK0 ] unsigned char 
  3210 ;; Registers used:
  3211 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3212 ;; Tracked objects:
  3213 ;;		On entry : F/0
  3214 ;;		On exit  : F/0
  3215 ;;		Unchanged: 0/0
  3216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3217 ;;      Params:         0       8       0       0       0       0       0       0       0
  3218 ;;      Locals:         0      13       0       0       0       0       0       0       0
  3219 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3220 ;;      Totals:         0      21       0       0       0       0       0       0       0
  3221 ;;Total ram usage:       21 bytes
  3222 ;; Hardware stack levels used:    1
  3223 ;; Hardware stack levels required when called:    5
  3224 ;; This function calls:
  3225 ;;		___flge
  3226 ;;		___flmul
  3227 ;;		___flneg
  3228 ;;		___fltol
  3229 ;;		___lltofl
  3230 ;;		_exp
  3231 ;;		_log
  3232 ;; This function is called by:
  3233 ;;		_format_double
  3234 ;; This function uses a non-reentrant model
  3235 ;;
  3236                           
  3237                           	psect	text12
  3238  00173A                     __ptext12:
  3239                           	opt stack 0
  3240  00173A                     _pow:
  3241                           	opt stack 23
  3242                           
  3243                           ; BSR set to: 0
  3244                           
  3245                           ;incstack = 0
  3246  00173A  6B95               	clrf	pow@sign& (0+255),b
  3247                           
  3248                           ; BSR set to: 0
  3249  00173C  5185               	movf	pow@x& (0+255),w,b
  3250  00173E  1186               	iorwf	(pow@x+1)& (0+255),w,b
  3251  001740  1187               	iorwf	(pow@x+2)& (0+255),w,b
  3252  001742  1188               	iorwf	(pow@x+3)& (0+255),w,b
  3253  001744  E110               	bnz	l3323
  3254                           
  3255                           ; BSR set to: 0
  3256  001746  6A03               	clrf	___flge@ff1,c
  3257  001748  6A04               	clrf	___flge@ff1+1,c
  3258  00174A  6A05               	clrf	___flge@ff1+2,c
  3259  00174C  6A06               	clrf	___flge@ff1+3,c
  3260  00174E  C089  F007         	movff	pow@y,___flge@ff2
  3261  001752  C08A  F008         	movff	pow@y+1,___flge@ff2+1
  3262  001756  C08B  F009         	movff	pow@y+2,___flge@ff2+2
  3263  00175A  C08C  F00A         	movff	pow@y+3,___flge@ff2+3
  3264  00175E  EC7D  F012         	call	___flge	;wreg free
  3265  001762  0100               	movlb	0	; () banked
  3266  001764  D037               	goto	l3333
  3267  001766                     l3323:
  3268                           
  3269                           ; BSR set to: 0
  3270  001766  5189               	movf	pow@y& (0+255),w,b
  3271  001768  118A               	iorwf	(pow@y+1)& (0+255),w,b
  3272  00176A  118B               	iorwf	(pow@y+2)& (0+255),w,b
  3273  00176C  118C               	iorwf	(pow@y+3)& (0+255),w,b
  3274  00176E  E107               	bnz	l3329
  3275                           
  3276                           ; BSR set to: 0
  3277  001770  6B85               	clrf	?_pow& (0+255),b
  3278  001772  6B86               	clrf	(?_pow+1)& (0+255),b
  3279  001774  0E80               	movlw	128
  3280  001776  6F87               	movwf	(?_pow+2)& (0+255),b
  3281  001778  0E3F               	movlw	63
  3282  00177A  6F88               	movwf	(?_pow+3)& (0+255),b
  3283  00177C  D0A1               	goto	l952
  3284  00177E                     l3329:
  3285                           
  3286                           ; BSR set to: 0
  3287  00177E  AF88               	btfss	(pow@x+3)& (0+255),7,b
  3288  001780  D043               	goto	l3339
  3289                           
  3290                           ; BSR set to: 0
  3291  001782  C089  F064         	movff	pow@y,___fltol@f1
  3292  001786  C08A  F065         	movff	pow@y+1,___fltol@f1+1
  3293  00178A  C08B  F066         	movff	pow@y+2,___fltol@f1+2
  3294  00178E  C08C  F067         	movff	pow@y+3,___fltol@f1+3
  3295  001792  ECBA  F010         	call	___fltol	;wreg free
  3296  001796  C064  F096         	movff	?___fltol,pow@yi
  3297  00179A  C065  F097         	movff	?___fltol+1,pow@yi+1
  3298  00179E  C066  F098         	movff	?___fltol+2,pow@yi+2
  3299  0017A2  C067  F099         	movff	?___fltol+3,pow@yi+3
  3300  0017A6  C096  F00D         	movff	pow@yi,___lltofl@c
  3301  0017AA  C097  F00E         	movff	pow@yi+1,___lltofl@c+1
  3302  0017AE  C098  F00F         	movff	pow@yi+2,___lltofl@c+2
  3303  0017B2  C099  F010         	movff	pow@yi+3,___lltofl@c+3
  3304  0017B6  EC69  F013         	call	___lltofl	;wreg free
  3305  0017BA  0100               	movlb	0	; () banked
  3306  0017BC  5189               	movf	pow@y& (0+255),w,b
  3307  0017BE  180D               	xorwf	?___lltofl,w,c
  3308  0017C0  E109               	bnz	u3120
  3309  0017C2  518A               	movf	(pow@y+1)& (0+255),w,b
  3310  0017C4  180E               	xorwf	?___lltofl+1,w,c
  3311  0017C6  E106               	bnz	u3120
  3312  0017C8  518B               	movf	(pow@y+2)& (0+255),w,b
  3313  0017CA  180F               	xorwf	?___lltofl+2,w,c
  3314  0017CC  E103               	bnz	u3120
  3315  0017CE  518C               	movf	(pow@y+3)& (0+255),w,b
  3316  0017D0  1810               	xorwf	?___lltofl+3,w,c
  3317  0017D2  E005               	bz	l3335
  3318  0017D4                     u3120:
  3319  0017D4                     l3333:
  3320                           
  3321                           ; BSR set to: 0
  3322  0017D4  6B85               	clrf	?_pow& (0+255),b
  3323  0017D6  6B86               	clrf	(?_pow+1)& (0+255),b
  3324  0017D8  6B87               	clrf	(?_pow+2)& (0+255),b
  3325  0017DA  6B88               	clrf	(?_pow+3)& (0+255),b
  3326  0017DC  D071               	goto	l952
  3327  0017DE                     l3335:
  3328                           
  3329                           ; BSR set to: 0
  3330  0017DE  5196               	movf	pow@yi& (0+255),w,b
  3331  0017E0  0B01               	andlw	1
  3332  0017E2  6F95               	movwf	pow@sign& (0+255),b
  3333                           
  3334                           ; BSR set to: 0
  3335  0017E4  C085  F003         	movff	pow@x,___flneg@f1
  3336  0017E8  C086  F004         	movff	pow@x+1,___flneg@f1+1
  3337  0017EC  C087  F005         	movff	pow@x+2,___flneg@f1+2
  3338  0017F0  C088  F006         	movff	pow@x+3,___flneg@f1+3
  3339  0017F4  ECCD  F013         	call	___flneg	;wreg free
  3340  0017F8  C003  F085         	movff	?___flneg,pow@x
  3341  0017FC  C004  F086         	movff	?___flneg+1,pow@x+1
  3342  001800  C005  F087         	movff	?___flneg+2,pow@x+2
  3343  001804  C006  F088         	movff	?___flneg+3,pow@x+3
  3344  001808                     l3339:
  3345                           
  3346                           ; BSR set to: 0
  3347  001808  C085  F04F         	movff	pow@x,log@x
  3348  00180C  C086  F050         	movff	pow@x+1,log@x+1
  3349  001810  C087  F051         	movff	pow@x+2,log@x+2
  3350  001814  C088  F052         	movff	pow@x+3,log@x+3
  3351  001818  EC15  F00D         	call	_log	;wreg free
  3352  00181C  C04F  F08D         	movff	?_log,_pow$931
  3353  001820  C050  F08E         	movff	?_log+1,_pow$931+1
  3354  001824  C051  F08F         	movff	?_log+2,_pow$931+2
  3355  001828  C052  F090         	movff	?_log+3,_pow$931+3
  3356  00182C  C08D  F01C         	movff	_pow$931,___flmul@f1
  3357  001830  C08E  F01D         	movff	_pow$931+1,___flmul@f1+1
  3358  001834  C08F  F01E         	movff	_pow$931+2,___flmul@f1+2
  3359  001838  C090  F01F         	movff	_pow$931+3,___flmul@f1+3
  3360  00183C  C089  F020         	movff	pow@y,___flmul@f2
  3361  001840  C08A  F021         	movff	pow@y+1,___flmul@f2+1
  3362  001844  C08B  F022         	movff	pow@y+2,___flmul@f2+2
  3363  001848  C08C  F023         	movff	pow@y+3,___flmul@f2+3
  3364  00184C  ECE5  F009         	call	___flmul	;wreg free
  3365  001850  C01C  F091         	movff	?___flmul,_pow$932
  3366  001854  C01D  F092         	movff	?___flmul+1,_pow$932+1
  3367  001858  C01E  F093         	movff	?___flmul+2,_pow$932+2
  3368  00185C  C01F  F094         	movff	?___flmul+3,_pow$932+3
  3369  001860  C091  F07A         	movff	_pow$932,exp@x
  3370  001864  C092  F07B         	movff	_pow$932+1,exp@x+1
  3371  001868  C093  F07C         	movff	_pow$932+2,exp@x+2
  3372  00186C  C094  F07D         	movff	_pow$932+3,exp@x+3
  3373  001870  ECDC  F008         	call	_exp	;wreg free
  3374  001874  C07A  F085         	movff	?_exp,pow@x
  3375  001878  C07B  F086         	movff	?_exp+1,pow@x+1
  3376  00187C  C07C  F087         	movff	?_exp+2,pow@x+2
  3377  001880  C07D  F088         	movff	?_exp+3,pow@x+3
  3378  001884  0100               	movlb	0	; () banked
  3379  001886  5195               	movf	pow@sign& (0+255),w,b
  3380  001888  E013               	bz	l956
  3381                           
  3382                           ; BSR set to: 0
  3383  00188A  C085  F003         	movff	pow@x,___flneg@f1
  3384  00188E  C086  F004         	movff	pow@x+1,___flneg@f1+1
  3385  001892  C087  F005         	movff	pow@x+2,___flneg@f1+2
  3386  001896  C088  F006         	movff	pow@x+3,___flneg@f1+3
  3387  00189A  ECCD  F013         	call	___flneg	;wreg free
  3388  00189E  C003  F085         	movff	?___flneg,?_pow
  3389  0018A2  C004  F086         	movff	?___flneg+1,?_pow+1
  3390  0018A6  C005  F087         	movff	?___flneg+2,?_pow+2
  3391  0018AA  C006  F088         	movff	?___flneg+3,?_pow+3
  3392  0018AE  D008               	goto	l952
  3393  0018B0                     l956:
  3394                           
  3395                           ; BSR set to: 0
  3396  0018B0  C085  F085         	movff	pow@x,?_pow
  3397  0018B4  C086  F086         	movff	pow@x+1,?_pow+1
  3398  0018B8  C087  F087         	movff	pow@x+2,?_pow+2
  3399  0018BC  C088  F088         	movff	pow@x+3,?_pow+3
  3400  0018C0                     l952:
  3401                           
  3402                           ; BSR set to: 0
  3403  0018C0  0012               	return		;funcret
  3404  0018C2                     __end_of_pow:
  3405                           	opt stack 0
  3406                           tosu	equ	0xFFF
  3407                           tosh	equ	0xFFE
  3408                           tosl	equ	0xFFD
  3409                           pclath	equ	0xFFA
  3410                           tblptru	equ	0xFF8
  3411                           tblptrh	equ	0xFF7
  3412                           tblptrl	equ	0xFF6
  3413                           tablat	equ	0xFF5
  3414                           intcon	equ	0xFF2
  3415                           intcon2	equ	0xFF1
  3416                           postinc0	equ	0xFEE
  3417                           wreg	equ	0xFE8
  3418                           indf2	equ	0xFDF
  3419                           fsr2h	equ	0xFDA
  3420                           fsr2l	equ	0xFD9
  3421                           status	equ	0xFD8
  3422                           
  3423 ;; *************** function _exp *****************
  3424 ;; Defined at:
  3425 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\exp.c"
  3426 ;; Parameters:    Size  Location     Type
  3427 ;;  x               4   26[BANK0 ] unsigned char 
  3428 ;; Auto vars:     Size  Location     Type
  3429 ;;  exponent        2   34[BANK0 ] int 
  3430 ;;  sign            1   36[BANK0 ] unsigned char 
  3431 ;; Return value:  Size  Location     Type
  3432 ;;                  4   26[BANK0 ] unsigned char 
  3433 ;; Registers used:
  3434 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3435 ;; Tracked objects:
  3436 ;;		On entry : 0/0
  3437 ;;		On exit  : 0/0
  3438 ;;		Unchanged: 0/0
  3439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3440 ;;      Params:         0       4       0       0       0       0       0       0       0
  3441 ;;      Locals:         0       7       0       0       0       0       0       0       0
  3442 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3443 ;;      Totals:         0      11       0       0       0       0       0       0       0
  3444 ;;Total ram usage:       11 bytes
  3445 ;; Hardware stack levels used:    1
  3446 ;; Hardware stack levels required when called:    4
  3447 ;; This function calls:
  3448 ;;		___awtofl
  3449 ;;		___fldiv
  3450 ;;		___flge
  3451 ;;		___flmul
  3452 ;;		___flneg
  3453 ;;		___flsub
  3454 ;;		___fltol
  3455 ;;		_eval_poly
  3456 ;;		_floor
  3457 ;;		_ldexp
  3458 ;; This function is called by:
  3459 ;;		_pow
  3460 ;; This function uses a non-reentrant model
  3461 ;;
  3462                           
  3463                           	psect	text13
  3464  0011B8                     __ptext13:
  3465                           	opt stack 0
  3466  0011B8                     _exp:
  3467                           	opt stack 23
  3468                           
  3469                           ; BSR set to: 0
  3470                           ;incstack = 0
  3471  0011B8  0100               	movlb	0	; () banked
  3472  0011BA  517A               	movf	exp@x& (0+255),w,b
  3473  0011BC  117B               	iorwf	(exp@x+1)& (0+255),w,b
  3474  0011BE  117C               	iorwf	(exp@x+2)& (0+255),w,b
  3475  0011C0  117D               	iorwf	(exp@x+3)& (0+255),w,b
  3476  0011C2  E106               	bnz	l3275
  3477                           
  3478                           ; BSR set to: 0
  3479  0011C4  6B7A               	clrf	?_exp& (0+255),b
  3480  0011C6  6B7B               	clrf	(?_exp+1)& (0+255),b
  3481  0011C8  0E80               	movlw	128
  3482  0011CA  6F7C               	movwf	(?_exp+2)& (0+255),b
  3483  0011CC  0E3F               	movlw	63
  3484  0011CE  D018               	goto	L4
  3485  0011D0                     l3275:
  3486                           
  3487                           ; BSR set to: 0
  3488  0011D0  0E18               	movlw	24
  3489  0011D2  6E03               	movwf	___flge@ff1,c
  3490  0011D4  0E72               	movlw	114
  3491  0011D6  6E04               	movwf	___flge@ff1+1,c
  3492  0011D8  0E31               	movlw	49
  3493  0011DA  6E05               	movwf	___flge@ff1+2,c
  3494  0011DC  0E44               	movlw	68
  3495  0011DE  6E06               	movwf	___flge@ff1+3,c
  3496  0011E0  C07A  F007         	movff	exp@x,___flge@ff2
  3497  0011E4  C07B  F008         	movff	exp@x+1,___flge@ff2+1
  3498  0011E8  C07C  F009         	movff	exp@x+2,___flge@ff2+2
  3499  0011EC  C07D  F00A         	movff	exp@x+3,___flge@ff2+3
  3500  0011F0  EC7D  F012         	call	___flge	;wreg free
  3501  0011F4  E207               	bc	l3281
  3502  0011F6  0100               	movlb	0	; () banked
  3503  0011F8  697A               	setf	?_exp& (0+255),b
  3504  0011FA  697B               	setf	(?_exp+1)& (0+255),b
  3505  0011FC  0E7F               	movlw	127
  3506  0011FE  6F7C               	movwf	(?_exp+2)& (0+255),b
  3507  001200                     L4:
  3508  001200  6F7D               	movwf	(?_exp+3)& (0+255),b
  3509  001202  D0E2               	goto	l978
  3510  001204                     l3281:
  3511  001204  C07A  F003         	movff	exp@x,___flge@ff1
  3512  001208  C07B  F004         	movff	exp@x+1,___flge@ff1+1
  3513  00120C  C07C  F005         	movff	exp@x+2,___flge@ff1+2
  3514  001210  C07D  F006         	movff	exp@x+3,___flge@ff1+3
  3515  001214  0E87               	movlw	135
  3516  001216  6E07               	movwf	___flge@ff2,c
  3517  001218  0E48               	movlw	72
  3518  00121A  6E08               	movwf	___flge@ff2+1,c
  3519  00121C  0E3A               	movlw	58
  3520  00121E  6E09               	movwf	___flge@ff2+2,c
  3521  001220  0EC4               	movlw	196
  3522  001222  6E0A               	movwf	___flge@ff2+3,c
  3523  001224  EC7D  F012         	call	___flge	;wreg free
  3524  001228  E202               	bc	l3285
  3525  00122A  0100               	movlb	0	; () banked
  3526  00122C  D0A6               	goto	l3305
  3527  00122E                     l3285:
  3528  00122E  0100               	movlb	0	; () banked
  3529  001230  0E01               	movlw	1
  3530  001232  AF7D               	btfss	(exp@x+3)& (0+255),7,b
  3531  001234  0E00               	movlw	0
  3532  001236  6F84               	movwf	exp@sign& (0+255),b
  3533                           
  3534                           ; BSR set to: 0
  3535  001238  5184               	movf	exp@sign& (0+255),w,b
  3536  00123A  E012               	bz	l3291
  3537                           
  3538                           ; BSR set to: 0
  3539  00123C  C07A  F003         	movff	exp@x,___flneg@f1
  3540  001240  C07B  F004         	movff	exp@x+1,___flneg@f1+1
  3541  001244  C07C  F005         	movff	exp@x+2,___flneg@f1+2
  3542  001248  C07D  F006         	movff	exp@x+3,___flneg@f1+3
  3543  00124C  ECCD  F013         	call	___flneg	;wreg free
  3544  001250  C003  F07A         	movff	?___flneg,exp@x
  3545  001254  C004  F07B         	movff	?___flneg+1,exp@x+1
  3546  001258  C005  F07C         	movff	?___flneg+2,exp@x+2
  3547  00125C  C006  F07D         	movff	?___flneg+3,exp@x+3
  3548  001260                     l3291:
  3549                           
  3550                           ; BSR set to: 0
  3551  001260  C07A  F01C         	movff	exp@x,___flmul@f1
  3552  001264  C07B  F01D         	movff	exp@x+1,___flmul@f1+1
  3553  001268  C07C  F01E         	movff	exp@x+2,___flmul@f1+2
  3554  00126C  C07D  F01F         	movff	exp@x+3,___flmul@f1+3
  3555  001270  0E3B               	movlw	59
  3556  001272  6E20               	movwf	___flmul@f2,c
  3557  001274  0EAA               	movlw	170
  3558  001276  6E21               	movwf	___flmul@f2+1,c
  3559  001278  0EB8               	movlw	184
  3560  00127A  6E22               	movwf	___flmul@f2+2,c
  3561  00127C  0E3F               	movlw	63
  3562  00127E  6E23               	movwf	___flmul@f2+3,c
  3563  001280  ECE5  F009         	call	___flmul	;wreg free
  3564  001284  C01C  F07A         	movff	?___flmul,exp@x
  3565  001288  C01D  F07B         	movff	?___flmul+1,exp@x+1
  3566  00128C  C01E  F07C         	movff	?___flmul+2,exp@x+2
  3567  001290  C01F  F07D         	movff	?___flmul+3,exp@x+3
  3568  001294  C07A  F070         	movff	exp@x,floor@x
  3569  001298  C07B  F071         	movff	exp@x+1,floor@x+1
  3570  00129C  C07C  F072         	movff	exp@x+2,floor@x+2
  3571  0012A0  C07D  F073         	movff	exp@x+3,floor@x+3
  3572  0012A4  ECA2  F00D         	call	_floor	;wreg free
  3573  0012A8  C070  F07E         	movff	?_floor,_exp$933
  3574  0012AC  C071  F07F         	movff	?_floor+1,_exp$933+1
  3575  0012B0  C072  F080         	movff	?_floor+2,_exp$933+2
  3576  0012B4  C073  F081         	movff	?_floor+3,_exp$933+3
  3577  0012B8  C07E  F064         	movff	_exp$933,___fltol@f1
  3578  0012BC  C07F  F065         	movff	_exp$933+1,___fltol@f1+1
  3579  0012C0  C080  F066         	movff	_exp$933+2,___fltol@f1+2
  3580  0012C4  C081  F067         	movff	_exp$933+3,___fltol@f1+3
  3581  0012C8  ECBA  F010         	call	___fltol	;wreg free
  3582  0012CC  C064  F082         	movff	?___fltol,exp@exponent
  3583  0012D0  C065  F083         	movff	?___fltol+1,exp@exponent+1
  3584                           
  3585                           ; BSR set to: 0
  3586  0012D4  C07A  F043         	movff	exp@x,___flsub@f1
  3587  0012D8  C07B  F044         	movff	exp@x+1,___flsub@f1+1
  3588  0012DC  C07C  F045         	movff	exp@x+2,___flsub@f1+2
  3589  0012E0  C07D  F046         	movff	exp@x+3,___flsub@f1+3
  3590  0012E4  C082  F00D         	movff	exp@exponent,___awtofl@c
  3591  0012E8  C083  F00E         	movff	exp@exponent+1,___awtofl@c+1
  3592  0012EC  EC4C  F013         	call	___awtofl	;wreg free
  3593  0012F0  C00D  F047         	movff	?___awtofl,___flsub@f2
  3594  0012F4  C00E  F048         	movff	?___awtofl+1,___flsub@f2+1
  3595  0012F8  C00F  F049         	movff	?___awtofl+2,___flsub@f2+2
  3596  0012FC  C010  F04A         	movff	?___awtofl+3,___flsub@f2+3
  3597  001300  ECEC  F012         	call	___flsub	;wreg free
  3598  001304  C043  F07A         	movff	?___flsub,exp@x
  3599  001308  C044  F07B         	movff	?___flsub+1,exp@x+1
  3600  00130C  C045  F07C         	movff	?___flsub+2,exp@x+2
  3601  001310  C046  F07D         	movff	?___flsub+3,exp@x+3
  3602  001314  C07A  F043         	movff	exp@x,eval_poly@x
  3603  001318  C07B  F044         	movff	exp@x+1,eval_poly@x+1
  3604  00131C  C07C  F045         	movff	exp@x+2,eval_poly@x+2
  3605  001320  C07D  F046         	movff	exp@x+3,eval_poly@x+3
  3606  001324  0E01               	movlw	low exp@coeff
  3607  001326  6E47               	movwf	eval_poly@d,c
  3608  001328  6A49               	clrf	eval_poly@n+1,c
  3609  00132A  0E09               	movlw	9
  3610  00132C  6E48               	movwf	eval_poly@n,c
  3611  00132E  ECB8  F00F         	call	_eval_poly	;wreg free
  3612  001332  C043  F04F         	movff	?_eval_poly,ldexp@value
  3613  001336  C044  F050         	movff	?_eval_poly+1,ldexp@value+1
  3614  00133A  C045  F051         	movff	?_eval_poly+2,ldexp@value+2
  3615  00133E  C046  F052         	movff	?_eval_poly+3,ldexp@value+3
  3616  001342  C082  F053         	movff	exp@exponent,ldexp@newexp
  3617  001346  C083  F054         	movff	exp@exponent+1,ldexp@newexp+1
  3618  00134A  EC09  F011         	call	_ldexp	;wreg free
  3619  00134E  C04F  F07A         	movff	?_ldexp,exp@x
  3620  001352  C050  F07B         	movff	?_ldexp+1,exp@x+1
  3621  001356  C051  F07C         	movff	?_ldexp+2,exp@x+2
  3622  00135A  C052  F07D         	movff	?_ldexp+3,exp@x+3
  3623  00135E  0100               	movlb	0	; () banked
  3624  001360  5184               	movf	exp@sign& (0+255),w,b
  3625  001362  E02A               	bz	l982
  3626                           
  3627                           ; BSR set to: 0
  3628  001364  297A               	incf	exp@x& (0+255),w,b
  3629  001366  E10E               	bnz	l3307
  3630  001368  297B               	incf	(exp@x+1)& (0+255),w,b
  3631  00136A  E10C               	bnz	l3307
  3632  00136C  0E7F               	movlw	127
  3633  00136E  197C               	xorwf	(exp@x+2)& (0+255),w,b
  3634  001370  E109               	bnz	l3307
  3635  001372  0E7F               	movlw	127
  3636  001374  197D               	xorwf	(exp@x+3)& (0+255),w,b
  3637  001376  A4D8               	btfss	status,2,c
  3638  001378  D005               	goto	l3307
  3639  00137A                     l3305:
  3640                           
  3641                           ; BSR set to: 0
  3642  00137A  6B7A               	clrf	?_exp& (0+255),b
  3643  00137C  6B7B               	clrf	(?_exp+1)& (0+255),b
  3644  00137E  6B7C               	clrf	(?_exp+2)& (0+255),b
  3645  001380  6B7D               	clrf	(?_exp+3)& (0+255),b
  3646  001382  D022               	goto	l978
  3647  001384                     l3307:
  3648                           
  3649                           ; BSR set to: 0
  3650  001384  0E00               	movlw	0
  3651  001386  6E0D               	movwf	___fldiv@f1,c
  3652  001388  6E0E               	movwf	___fldiv@f1+1,c
  3653  00138A  0E80               	movlw	128
  3654  00138C  6E0F               	movwf	___fldiv@f1+2,c
  3655  00138E  0E3F               	movlw	63
  3656  001390  6E10               	movwf	___fldiv@f1+3,c
  3657  001392  C07A  F011         	movff	exp@x,___fldiv@f2
  3658  001396  C07B  F012         	movff	exp@x+1,___fldiv@f2+1
  3659  00139A  C07C  F013         	movff	exp@x+2,___fldiv@f2+2
  3660  00139E  C07D  F014         	movff	exp@x+3,___fldiv@f2+3
  3661  0013A2  EC16  F010         	call	___fldiv	;wreg free
  3662  0013A6  C00D  F07A         	movff	?___fldiv,?_exp
  3663  0013AA  C00E  F07B         	movff	?___fldiv+1,?_exp+1
  3664  0013AE  C00F  F07C         	movff	?___fldiv+2,?_exp+2
  3665  0013B2  C010  F07D         	movff	?___fldiv+3,?_exp+3
  3666  0013B6  D008               	goto	l978
  3667  0013B8                     l982:
  3668                           
  3669                           ; BSR set to: 0
  3670  0013B8  C07A  F07A         	movff	exp@x,?_exp
  3671  0013BC  C07B  F07B         	movff	exp@x+1,?_exp+1
  3672  0013C0  C07C  F07C         	movff	exp@x+2,?_exp+2
  3673  0013C4  C07D  F07D         	movff	exp@x+3,?_exp+3
  3674  0013C8                     l978:
  3675  0013C8  0012               	return		;funcret
  3676  0013CA                     __end_of_exp:
  3677                           	opt stack 0
  3678                           tosu	equ	0xFFF
  3679                           tosh	equ	0xFFE
  3680                           tosl	equ	0xFFD
  3681                           pclath	equ	0xFFA
  3682                           tblptru	equ	0xFF8
  3683                           tblptrh	equ	0xFF7
  3684                           tblptrl	equ	0xFF6
  3685                           tablat	equ	0xFF5
  3686                           intcon	equ	0xFF2
  3687                           intcon2	equ	0xFF1
  3688                           postinc0	equ	0xFEE
  3689                           wreg	equ	0xFE8
  3690                           indf2	equ	0xFDF
  3691                           fsr2h	equ	0xFDA
  3692                           fsr2l	equ	0xFD9
  3693                           status	equ	0xFD8
  3694                           
  3695 ;; *************** function _ldexp *****************
  3696 ;; Defined at:
  3697 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  3698 ;; Parameters:    Size  Location     Type
  3699 ;;  value           4   78[COMRAM] unsigned char 
  3700 ;;  newexp          2   82[COMRAM] int 
  3701 ;; Auto vars:     Size  Location     Type
  3702 ;;		None
  3703 ;; Return value:  Size  Location     Type
  3704 ;;                  4   78[COMRAM] int 
  3705 ;; Registers used:
  3706 ;;		wreg, status,2, status,0
  3707 ;; Tracked objects:
  3708 ;;		On entry : 0/0
  3709 ;;		On exit  : 0/0
  3710 ;;		Unchanged: 0/0
  3711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3712 ;;      Params:         6       0       0       0       0       0       0       0       0
  3713 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3714 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3715 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3716 ;;Total ram usage:        8 bytes
  3717 ;; Hardware stack levels used:    1
  3718 ;; Hardware stack levels required when called:    1
  3719 ;; This function calls:
  3720 ;;		Nothing
  3721 ;; This function is called by:
  3722 ;;		_exp
  3723 ;; This function uses a non-reentrant model
  3724 ;;
  3725                           
  3726                           	psect	text14
  3727  002212                     __ptext14:
  3728                           	opt stack 0
  3729  002212                     _ldexp:
  3730                           	opt stack 25
  3731                           
  3732                           ;incstack = 0
  3733  002212  504F               	movf	ldexp@value,w,c
  3734  002214  1050               	iorwf	ldexp@value+1,w,c
  3735  002216  1051               	iorwf	ldexp@value+2,w,c
  3736  002218  1052               	iorwf	ldexp@value+3,w,c
  3737  00221A  E013               	bz	l2331
  3738  00221C  5052               	movf	ldexp@value+3,w,c
  3739  00221E  0B7F               	andlw	127
  3740  002220  6E55               	movwf	??_ldexp& (0+255),c
  3741  002222  6A56               	clrf	(??_ldexp+1)& (0+255),c
  3742  002224  90D8               	bcf	status,0,c
  3743  002226  3655               	rlcf	??_ldexp,f,c
  3744  002228  3656               	rlcf	??_ldexp+1,f,c
  3745  00222A  5055               	movf	??_ldexp,w,c
  3746  00222C  2653               	addwf	ldexp@newexp,f,c
  3747  00222E  5056               	movf	??_ldexp+1,w,c
  3748  002230  2254               	addwfc	ldexp@newexp+1,f,c
  3749  002232  0E01               	movlw	1
  3750  002234  AE51               	btfss	ldexp@value+2,7,c
  3751  002236  0E00               	movlw	0
  3752  002238  2653               	addwf	ldexp@newexp,f,c
  3753  00223A  0E00               	movlw	0
  3754  00223C  2254               	addwfc	ldexp@newexp+1,f,c
  3755  00223E  AE54               	btfss	ldexp@newexp+1,7,c
  3756  002240  D005               	goto	l2335
  3757  002242                     l2331:
  3758  002242  6A4F               	clrf	?_ldexp,c
  3759  002244  6A50               	clrf	?_ldexp+1,c
  3760  002246  6A51               	clrf	?_ldexp+2,c
  3761  002248  6A52               	clrf	?_ldexp+3,c
  3762  00224A  D02E               	goto	l720
  3763  00224C                     l2335:
  3764  00224C  BE54               	btfsc	ldexp@newexp+1,7,c
  3765  00224E  D010               	goto	l2349
  3766  002250  0454               	decf	ldexp@newexp+1,w,c
  3767  002252  E30E               	bnc	l2349
  3768  002254  AE52               	btfss	ldexp@value+3,7,c
  3769  002256  D006               	goto	l2345
  3770  002258  684F               	setf	?_ldexp,c
  3771  00225A  6850               	setf	?_ldexp+1,c
  3772  00225C  0E7F               	movlw	127
  3773  00225E  6E51               	movwf	?_ldexp+2,c
  3774  002260  0EFF               	movlw	255
  3775  002262  D004               	goto	L5
  3776  002264                     l2345:
  3777  002264  684F               	setf	?_ldexp,c
  3778  002266  6850               	setf	?_ldexp+1,c
  3779  002268  0E7F               	movlw	127
  3780  00226A  6E51               	movwf	?_ldexp+2,c
  3781  00226C                     L5:
  3782  00226C  6E52               	movwf	?_ldexp+3,c
  3783  00226E  D01C               	goto	l720
  3784  002270                     l2349:
  3785  002270  3454               	rlcf	ldexp@newexp+1,w,c
  3786  002272  3054               	rrcf	ldexp@newexp+1,w,c
  3787  002274  6E56               	movwf	(??_ldexp+1)& (0+255),c
  3788  002276  3053               	rrcf	ldexp@newexp,w,c
  3789  002278  6E55               	movwf	??_ldexp& (0+255),c
  3790  00227A  1852               	xorwf	ldexp@value+3,w,c
  3791  00227C  0B80               	andlw	-128
  3792  00227E  1855               	xorwf	??_ldexp,w,c
  3793  002280  6E52               	movwf	ldexp@value+3,c
  3794  002282  C053  F055         	movff	ldexp@newexp,??_ldexp
  3795  002286  0E01               	movlw	1
  3796  002288  1655               	andwf	??_ldexp,f,c
  3797  00228A  3255               	rrcf	??_ldexp,f,c
  3798  00228C  3255               	rrcf	??_ldexp,f,c
  3799  00228E  5051               	movf	ldexp@value+2,w,c
  3800  002290  1855               	xorwf	??_ldexp,w,c
  3801  002292  0B7F               	andlw	-129
  3802  002294  1855               	xorwf	??_ldexp,w,c
  3803  002296  6E51               	movwf	ldexp@value+2,c
  3804  002298  C04F  F04F         	movff	ldexp@value,?_ldexp
  3805  00229C  C050  F050         	movff	ldexp@value+1,?_ldexp+1
  3806  0022A0  C051  F051         	movff	ldexp@value+2,?_ldexp+2
  3807  0022A4  C052  F052         	movff	ldexp@value+3,?_ldexp+3
  3808  0022A8                     l720:
  3809  0022A8  0012               	return		;funcret
  3810  0022AA                     __end_of_ldexp:
  3811                           	opt stack 0
  3812                           tosu	equ	0xFFF
  3813                           tosh	equ	0xFFE
  3814                           tosl	equ	0xFFD
  3815                           pclath	equ	0xFFA
  3816                           tblptru	equ	0xFF8
  3817                           tblptrh	equ	0xFF7
  3818                           tblptrl	equ	0xFF6
  3819                           tablat	equ	0xFF5
  3820                           intcon	equ	0xFF2
  3821                           intcon2	equ	0xFF1
  3822                           postinc0	equ	0xFEE
  3823                           wreg	equ	0xFE8
  3824                           indf2	equ	0xFDF
  3825                           fsr2h	equ	0xFDA
  3826                           fsr2l	equ	0xFD9
  3827                           status	equ	0xFD8
  3828                           
  3829 ;; *************** function _floor *****************
  3830 ;; Defined at:
  3831 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\floor.c"
  3832 ;; Parameters:    Size  Location     Type
  3833 ;;  x               4   16[BANK0 ] int 
  3834 ;; Auto vars:     Size  Location     Type
  3835 ;;  i               4   20[BANK0 ] int 
  3836 ;;  expon           2   24[BANK0 ] int 
  3837 ;; Return value:  Size  Location     Type
  3838 ;;                  4   16[BANK0 ] int 
  3839 ;; Registers used:
  3840 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3841 ;; Tracked objects:
  3842 ;;		On entry : 0/0
  3843 ;;		On exit  : 0/0
  3844 ;;		Unchanged: 0/0
  3845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3846 ;;      Params:         0       4       0       0       0       0       0       0       0
  3847 ;;      Locals:         0       6       0       0       0       0       0       0       0
  3848 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3849 ;;      Totals:         0      10       0       0       0       0       0       0       0
  3850 ;;Total ram usage:       10 bytes
  3851 ;; Hardware stack levels used:    1
  3852 ;; Hardware stack levels required when called:    3
  3853 ;; This function calls:
  3854 ;;		___altofl
  3855 ;;		___fladd
  3856 ;;		___flge
  3857 ;;		___fltol
  3858 ;;		_frexp
  3859 ;; This function is called by:
  3860 ;;		_format_double
  3861 ;;		_exp
  3862 ;; This function uses a non-reentrant model
  3863 ;;
  3864                           
  3865                           	psect	text15
  3866  001B44                     __ptext15:
  3867                           	opt stack 0
  3868  001B44                     _floor:
  3869                           	opt stack 23
  3870                           
  3871                           ;incstack = 0
  3872  001B44  C070  F003         	movff	floor@x,frexp@value
  3873  001B48  C071  F004         	movff	floor@x+1,frexp@value+1
  3874  001B4C  C072  F005         	movff	floor@x+2,frexp@value+2
  3875  001B50  C073  F006         	movff	floor@x+3,frexp@value+3
  3876  001B54  0E78               	movlw	low floor@expon
  3877  001B56  6E07               	movwf	frexp@eptr,c
  3878  001B58  EC92  F011         	call	_frexp	;wreg free
  3879  001B5C  0100               	movlb	0	; () banked
  3880  001B5E  AF79               	btfss	(floor@expon+1)& (0+255),7,b
  3881  001B60  D00E               	goto	l3177
  3882                           
  3883                           ; BSR set to: 0
  3884  001B62  AF73               	btfss	(floor@x+3)& (0+255),7,b
  3885  001B64  D007               	goto	l687
  3886                           
  3887                           ; BSR set to: 0
  3888  001B66  6B70               	clrf	?_floor& (0+255),b
  3889  001B68  6B71               	clrf	(?_floor+1)& (0+255),b
  3890  001B6A  0E80               	movlw	128
  3891  001B6C  6F72               	movwf	(?_floor+2)& (0+255),b
  3892  001B6E  0EBF               	movlw	191
  3893  001B70  6F73               	movwf	(?_floor+3)& (0+255),b
  3894  001B72  D064               	goto	l688
  3895  001B74                     l687:
  3896                           
  3897                           ; BSR set to: 0
  3898  001B74  6B70               	clrf	?_floor& (0+255),b
  3899  001B76  6B71               	clrf	(?_floor+1)& (0+255),b
  3900  001B78  6B72               	clrf	(?_floor+2)& (0+255),b
  3901  001B7A  6B73               	clrf	(?_floor+3)& (0+255),b
  3902  001B7C  D05F               	goto	l688
  3903  001B7E                     l3177:
  3904                           
  3905                           ; BSR set to: 0
  3906  001B7E  5179               	movf	(floor@expon+1)& (0+255),w,b
  3907  001B80  E103               	bnz	u2910
  3908  001B82  0E1D               	movlw	29
  3909  001B84  5D78               	subwf	floor@expon& (0+255),w,b
  3910  001B86  E309               	bnc	l3181
  3911  001B88                     u2910:
  3912                           
  3913                           ; BSR set to: 0
  3914  001B88  C070  F070         	movff	floor@x,?_floor
  3915  001B8C  C071  F071         	movff	floor@x+1,?_floor+1
  3916  001B90  C072  F072         	movff	floor@x+2,?_floor+2
  3917  001B94  C073  F073         	movff	floor@x+3,?_floor+3
  3918  001B98  D051               	goto	l688
  3919  001B9A                     l3181:
  3920                           
  3921                           ; BSR set to: 0
  3922  001B9A  C070  F064         	movff	floor@x,___fltol@f1
  3923  001B9E  C071  F065         	movff	floor@x+1,___fltol@f1+1
  3924  001BA2  C072  F066         	movff	floor@x+2,___fltol@f1+2
  3925  001BA6  C073  F067         	movff	floor@x+3,___fltol@f1+3
  3926  001BAA  ECBA  F010         	call	___fltol	;wreg free
  3927  001BAE  C064  F06C         	movff	?___fltol,___altofl@c
  3928  001BB2  C065  F06D         	movff	?___fltol+1,___altofl@c+1
  3929  001BB6  C066  F06E         	movff	?___fltol+2,___altofl@c+2
  3930  001BBA  C067  F06F         	movff	?___fltol+3,___altofl@c+3
  3931  001BBE  ECC8  F012         	call	___altofl	;wreg free
  3932  001BC2  C06C  F074         	movff	?___altofl,floor@i
  3933  001BC6  C06D  F075         	movff	?___altofl+1,floor@i+1
  3934  001BCA  C06E  F076         	movff	?___altofl+2,floor@i+2
  3935  001BCE  C06F  F077         	movff	?___altofl+3,floor@i+3
  3936  001BD2  C070  F003         	movff	floor@x,___flge@ff1
  3937  001BD6  C071  F004         	movff	floor@x+1,___flge@ff1+1
  3938  001BDA  C072  F005         	movff	floor@x+2,___flge@ff1+2
  3939  001BDE  C073  F006         	movff	floor@x+3,___flge@ff1+3
  3940  001BE2  C074  F007         	movff	floor@i,___flge@ff2
  3941  001BE6  C075  F008         	movff	floor@i+1,___flge@ff2+1
  3942  001BEA  C076  F009         	movff	floor@i+2,___flge@ff2+2
  3943  001BEE  C077  F00A         	movff	floor@i+3,___flge@ff2+3
  3944  001BF2  EC7D  F012         	call	___flge	;wreg free
  3945  001BF6  E21A               	bc	l690
  3946  001BF8  C074  F037         	movff	floor@i,___fladd@f1
  3947  001BFC  C075  F038         	movff	floor@i+1,___fladd@f1+1
  3948  001C00  C076  F039         	movff	floor@i+2,___fladd@f1+2
  3949  001C04  C077  F03A         	movff	floor@i+3,___fladd@f1+3
  3950  001C08  0E00               	movlw	0
  3951  001C0A  6E3B               	movwf	___fladd@f2,c
  3952  001C0C  6E3C               	movwf	___fladd@f2+1,c
  3953  001C0E  0E80               	movlw	128
  3954  001C10  6E3D               	movwf	___fladd@f2+2,c
  3955  001C12  0EBF               	movlw	191
  3956  001C14  6E3E               	movwf	___fladd@f2+3,c
  3957  001C16  EC61  F00C         	call	___fladd	;wreg free
  3958  001C1A  C037  F070         	movff	?___fladd,?_floor
  3959  001C1E  C038  F071         	movff	?___fladd+1,?_floor+1
  3960  001C22  C039  F072         	movff	?___fladd+2,?_floor+2
  3961  001C26  C03A  F073         	movff	?___fladd+3,?_floor+3
  3962  001C2A  D008               	goto	l688
  3963  001C2C                     l690:
  3964  001C2C  C074  F070         	movff	floor@i,?_floor
  3965  001C30  C075  F071         	movff	floor@i+1,?_floor+1
  3966  001C34  C076  F072         	movff	floor@i+2,?_floor+2
  3967  001C38  C077  F073         	movff	floor@i+3,?_floor+3
  3968  001C3C                     l688:
  3969  001C3C  0012               	return		;funcret
  3970  001C3E                     __end_of_floor:
  3971                           	opt stack 0
  3972                           tosu	equ	0xFFF
  3973                           tosh	equ	0xFFE
  3974                           tosl	equ	0xFFD
  3975                           pclath	equ	0xFFA
  3976                           tblptru	equ	0xFF8
  3977                           tblptrh	equ	0xFF7
  3978                           tblptrl	equ	0xFF6
  3979                           tablat	equ	0xFF5
  3980                           intcon	equ	0xFF2
  3981                           intcon2	equ	0xFF1
  3982                           postinc0	equ	0xFEE
  3983                           wreg	equ	0xFE8
  3984                           indf2	equ	0xFDF
  3985                           fsr2h	equ	0xFDA
  3986                           fsr2l	equ	0xFD9
  3987                           status	equ	0xFD8
  3988                           
  3989 ;; *************** function ___fltol *****************
  3990 ;; Defined at:
  3991 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fltol.c"
  3992 ;; Parameters:    Size  Location     Type
  3993 ;;  f1              4    4[BANK0 ] int 
  3994 ;; Auto vars:     Size  Location     Type
  3995 ;;  exp1            1   89[COMRAM] unsigned char 
  3996 ;;  sign1           1   88[COMRAM] unsigned char 
  3997 ;; Return value:  Size  Location     Type
  3998 ;;                  4    4[BANK0 ] long 
  3999 ;; Registers used:
  4000 ;;		wreg, status,2, status,0
  4001 ;; Tracked objects:
  4002 ;;		On entry : 0/0
  4003 ;;		On exit  : F/0
  4004 ;;		Unchanged: 0/0
  4005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4006 ;;      Params:         0       4       0       0       0       0       0       0       0
  4007 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4008 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4009 ;;      Totals:         2       8       0       0       0       0       0       0       0
  4010 ;;Total ram usage:       10 bytes
  4011 ;; Hardware stack levels used:    1
  4012 ;; Hardware stack levels required when called:    1
  4013 ;; This function calls:
  4014 ;;		Nothing
  4015 ;; This function is called by:
  4016 ;;		_format_double
  4017 ;;		_measure_capacitance
  4018 ;;		_measure_inductance
  4019 ;;		_floor
  4020 ;;		_pow
  4021 ;;		_exp
  4022 ;; This function uses a non-reentrant model
  4023 ;;
  4024                           
  4025                           	psect	text16
  4026  002174                     __ptext16:
  4027                           	opt stack 0
  4028  002174                     ___fltol:
  4029                           	opt stack 28
  4030                           
  4031                           ;incstack = 0
  4032  002174  0100               	movlb	0	; () banked
  4033  002176  3566               	rlcf	(___fltol@f1+2)& (0+255),w,b
  4034  002178  3567               	rlcf	(___fltol@f1+3)& (0+255),w,b
  4035  00217A  6E5A               	movwf	___fltol@exp1,c
  4036  00217C  505A               	movf	___fltol@exp1,w,c
  4037  00217E  E105               	bnz	l3133
  4038  002180                     l3131:
  4039                           
  4040                           ; BSR set to: 0
  4041  002180  6B64               	clrf	?___fltol& (0+255),b
  4042  002182  6B65               	clrf	(?___fltol+1)& (0+255),b
  4043  002184  6B66               	clrf	(?___fltol+2)& (0+255),b
  4044  002186  6B67               	clrf	(?___fltol+3)& (0+255),b
  4045  002188  D043               	goto	l700
  4046  00218A                     l3133:
  4047                           
  4048                           ; BSR set to: 0
  4049  00218A  C064  F068         	movff	___fltol@f1,??___fltol
  4050  00218E  C065  F069         	movff	___fltol@f1+1,??___fltol+1
  4051  002192  C066  F06A         	movff	___fltol@f1+2,??___fltol+2
  4052  002196  C067  F06B         	movff	___fltol@f1+3,??___fltol+3
  4053  00219A  0E20               	movlw	32
  4054  00219C  D005               	goto	u2830
  4055  00219E                     u2835:
  4056  00219E  90D8               	bcf	status,0,c
  4057  0021A0  336B               	rrcf	(??___fltol+3)& (0+255),f,b
  4058  0021A2  336A               	rrcf	(??___fltol+2)& (0+255),f,b
  4059  0021A4  3369               	rrcf	(??___fltol+1)& (0+255),f,b
  4060  0021A6  3368               	rrcf	??___fltol& (0+255),f,b
  4061  0021A8                     u2830:
  4062  0021A8  2EE8               	decfsz	wreg,f,c
  4063  0021AA  D7F9               	goto	u2835
  4064  0021AC  5168               	movf	??___fltol& (0+255),w,b
  4065  0021AE  6E59               	movwf	___fltol@sign1,c
  4066                           
  4067                           ; BSR set to: 0
  4068  0021B0  8F66               	bsf	(___fltol@f1+2)& (0+255),7,b
  4069                           
  4070                           ; BSR set to: 0
  4071  0021B2  6B67               	clrf	(___fltol@f1+3)& (0+255),b
  4072                           
  4073                           ; BSR set to: 0
  4074  0021B4  0E96               	movlw	150
  4075  0021B6  5E5A               	subwf	___fltol@exp1,f,c
  4076                           
  4077                           ; BSR set to: 0
  4078  0021B8  AE5A               	btfss	___fltol@exp1,7,c
  4079  0021BA  D00C               	goto	l3151
  4080                           
  4081                           ; BSR set to: 0
  4082  0021BC  505A               	movf	___fltol@exp1,w,c
  4083  0021BE  0A80               	xorlw	128
  4084  0021C0  0F97               	addlw	151
  4085  0021C2  E3DE               	bnc	l3131
  4086  0021C4                     l3147:
  4087                           
  4088                           ; BSR set to: 0
  4089  0021C4  90D8               	bcf	status,0,c
  4090  0021C6  3367               	rrcf	(___fltol@f1+3)& (0+255),f,b
  4091  0021C8  3366               	rrcf	(___fltol@f1+2)& (0+255),f,b
  4092  0021CA  3365               	rrcf	(___fltol@f1+1)& (0+255),f,b
  4093  0021CC  3364               	rrcf	___fltol@f1& (0+255),f,b
  4094                           
  4095                           ; BSR set to: 0
  4096  0021CE  3E5A               	incfsz	___fltol@exp1,f,c
  4097  0021D0  D7F9               	goto	l3147
  4098  0021D2  D00C               	goto	l3159
  4099  0021D4                     l3151:
  4100                           
  4101                           ; BSR set to: 0
  4102  0021D4  0E1F               	movlw	31
  4103  0021D6  645A               	cpfsgt	___fltol@exp1,c
  4104  0021D8  D007               	goto	l3157
  4105  0021DA  D7D2               	goto	l3131
  4106  0021DC                     l3155:
  4107                           
  4108                           ; BSR set to: 0
  4109  0021DC  90D8               	bcf	status,0,c
  4110  0021DE  3764               	rlcf	___fltol@f1& (0+255),f,b
  4111  0021E0  3765               	rlcf	(___fltol@f1+1)& (0+255),f,b
  4112  0021E2  3766               	rlcf	(___fltol@f1+2)& (0+255),f,b
  4113  0021E4  3767               	rlcf	(___fltol@f1+3)& (0+255),f,b
  4114  0021E6  065A               	decf	___fltol@exp1,f,c
  4115  0021E8                     l3157:
  4116                           
  4117                           ; BSR set to: 0
  4118  0021E8  505A               	movf	___fltol@exp1,w,c
  4119  0021EA  E1F8               	bnz	l3155
  4120  0021EC                     l3159:
  4121                           
  4122                           ; BSR set to: 0
  4123  0021EC  5059               	movf	___fltol@sign1,w,c
  4124  0021EE  E008               	bz	l3163
  4125                           
  4126                           ; BSR set to: 0
  4127  0021F0  1F67               	comf	(___fltol@f1+3)& (0+255),f,b
  4128  0021F2  1F66               	comf	(___fltol@f1+2)& (0+255),f,b
  4129  0021F4  1F65               	comf	(___fltol@f1+1)& (0+255),f,b
  4130  0021F6  6D64               	negf	___fltol@f1& (0+255),b
  4131  0021F8  0E00               	movlw	0
  4132  0021FA  2365               	addwfc	(___fltol@f1+1)& (0+255),f,b
  4133  0021FC  2366               	addwfc	(___fltol@f1+2)& (0+255),f,b
  4134  0021FE  2367               	addwfc	(___fltol@f1+3)& (0+255),f,b
  4135  002200                     l3163:
  4136                           
  4137                           ; BSR set to: 0
  4138  002200  C064  F064         	movff	___fltol@f1,?___fltol
  4139  002204  C065  F065         	movff	___fltol@f1+1,?___fltol+1
  4140  002208  C066  F066         	movff	___fltol@f1+2,?___fltol+2
  4141  00220C  C067  F067         	movff	___fltol@f1+3,?___fltol+3
  4142  002210                     l700:
  4143                           
  4144                           ; BSR set to: 0
  4145  002210  0012               	return		;funcret
  4146  002212                     __end_of___fltol:
  4147                           	opt stack 0
  4148                           tosu	equ	0xFFF
  4149                           tosh	equ	0xFFE
  4150                           tosl	equ	0xFFD
  4151                           pclath	equ	0xFFA
  4152                           tblptru	equ	0xFF8
  4153                           tblptrh	equ	0xFF7
  4154                           tblptrl	equ	0xFF6
  4155                           tablat	equ	0xFF5
  4156                           intcon	equ	0xFF2
  4157                           intcon2	equ	0xFF1
  4158                           postinc0	equ	0xFEE
  4159                           wreg	equ	0xFE8
  4160                           indf2	equ	0xFDF
  4161                           fsr2h	equ	0xFDA
  4162                           fsr2l	equ	0xFD9
  4163                           status	equ	0xFD8
  4164                           
  4165 ;; *************** function ___flge *****************
  4166 ;; Defined at:
  4167 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flge.c"
  4168 ;; Parameters:    Size  Location     Type
  4169 ;;  ff1             4    2[COMRAM] long 
  4170 ;;  ff2             4    6[COMRAM] long 
  4171 ;; Auto vars:     Size  Location     Type
  4172 ;;		None
  4173 ;; Return value:  Size  Location     Type
  4174 ;;		None               void
  4175 ;; Registers used:
  4176 ;;		wreg, status,2, status,0
  4177 ;; Tracked objects:
  4178 ;;		On entry : 0/0
  4179 ;;		On exit  : 0/0
  4180 ;;		Unchanged: 0/0
  4181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4182 ;;      Params:         8       0       0       0       0       0       0       0       0
  4183 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4184 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4185 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4186 ;;Total ram usage:        8 bytes
  4187 ;; Hardware stack levels used:    1
  4188 ;; Hardware stack levels required when called:    1
  4189 ;; This function calls:
  4190 ;;		Nothing
  4191 ;; This function is called by:
  4192 ;;		_format_double
  4193 ;;		_measure_capacitance
  4194 ;;		_measure_inductance
  4195 ;;		_floor
  4196 ;;		_pow
  4197 ;;		_exp
  4198 ;; This function uses a non-reentrant model
  4199 ;;
  4200                           
  4201                           	psect	text17
  4202  0024FA                     __ptext17:
  4203                           	opt stack 0
  4204  0024FA                     ___flge:
  4205                           	opt stack 28
  4206                           
  4207                           ; BSR set to: 0
  4208                           ;incstack = 0
  4209  0024FA  AE06               	btfss	___flge@ff1+3,7,c
  4210  0024FC  D009               	goto	l2163
  4211  0024FE  6C03               	negf	___flge@ff1,c
  4212  002500  1E04               	comf	___flge@ff1+1,f,c
  4213  002502  B0D8               	btfsc	status,0,c
  4214  002504  2A04               	incf	___flge@ff1+1,f,c
  4215  002506  1E05               	comf	___flge@ff1+2,f,c
  4216  002508  B0D8               	btfsc	status,0,c
  4217  00250A  2A05               	incf	___flge@ff1+2,f,c
  4218  00250C  0E80               	movlw	128
  4219  00250E  5606               	subfwb	___flge@ff1+3,f,c
  4220  002510                     l2163:
  4221  002510  AE0A               	btfss	___flge@ff2+3,7,c
  4222  002512  D009               	goto	l649
  4223  002514  6C07               	negf	___flge@ff2,c
  4224  002516  1E08               	comf	___flge@ff2+1,f,c
  4225  002518  B0D8               	btfsc	status,0,c
  4226  00251A  2A08               	incf	___flge@ff2+1,f,c
  4227  00251C  1E09               	comf	___flge@ff2+2,f,c
  4228  00251E  B0D8               	btfsc	status,0,c
  4229  002520  2A09               	incf	___flge@ff2+2,f,c
  4230  002522  0E80               	movlw	128
  4231  002524  560A               	subfwb	___flge@ff2+3,f,c
  4232  002526                     l649:
  4233  002526  0E80               	movlw	128
  4234  002528  1A06               	xorwf	___flge@ff1+3,f,c
  4235  00252A  1A0A               	xorwf	___flge@ff2+3,f,c
  4236  00252C  5007               	movf	___flge@ff2,w,c
  4237  00252E  5C03               	subwf	___flge@ff1,w,c
  4238  002530  5008               	movf	___flge@ff2+1,w,c
  4239  002532  5804               	subwfb	___flge@ff1+1,w,c
  4240  002534  5009               	movf	___flge@ff2+2,w,c
  4241  002536  5805               	subwfb	___flge@ff1+2,w,c
  4242  002538  500A               	movf	___flge@ff2+3,w,c
  4243  00253A  5806               	subwfb	___flge@ff1+3,w,c
  4244  00253C  E202               	bc	l2169
  4245  00253E  90D8               	bcf	status,0,c
  4246  002540  D001               	goto	l650
  4247  002542                     l2169:
  4248  002542  80D8               	bsf	status,0,c
  4249  002544                     l650:
  4250  002544  0012               	return		;funcret
  4251  002546                     __end_of___flge:
  4252                           	opt stack 0
  4253                           tosu	equ	0xFFF
  4254                           tosh	equ	0xFFE
  4255                           tosl	equ	0xFFD
  4256                           pclath	equ	0xFFA
  4257                           tblptru	equ	0xFF8
  4258                           tblptrh	equ	0xFF7
  4259                           tblptrl	equ	0xFF6
  4260                           tablat	equ	0xFF5
  4261                           intcon	equ	0xFF2
  4262                           intcon2	equ	0xFF1
  4263                           postinc0	equ	0xFEE
  4264                           wreg	equ	0xFE8
  4265                           indf2	equ	0xFDF
  4266                           fsr2h	equ	0xFDA
  4267                           fsr2l	equ	0xFD9
  4268                           status	equ	0xFD8
  4269                           
  4270 ;; *************** function ___altofl *****************
  4271 ;; Defined at:
  4272 ;;		line 36 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\altofl.c"
  4273 ;; Parameters:    Size  Location     Type
  4274 ;;  c               4   12[BANK0 ] long 
  4275 ;; Auto vars:     Size  Location     Type
  4276 ;;  sign            1   90[COMRAM] unsigned char 
  4277 ;; Return value:  Size  Location     Type
  4278 ;;                  4   12[BANK0 ] unsigned char 
  4279 ;; Registers used:
  4280 ;;		wreg, status,2, status,0, cstack
  4281 ;; Tracked objects:
  4282 ;;		On entry : F/0
  4283 ;;		On exit  : 0/0
  4284 ;;		Unchanged: 0/0
  4285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4286 ;;      Params:         0       4       0       0       0       0       0       0       0
  4287 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4288 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4289 ;;      Totals:         1       4       0       0       0       0       0       0       0
  4290 ;;Total ram usage:        5 bytes
  4291 ;; Hardware stack levels used:    1
  4292 ;; Hardware stack levels required when called:    2
  4293 ;; This function calls:
  4294 ;;		___flpack
  4295 ;; This function is called by:
  4296 ;;		_floor
  4297 ;; This function uses a non-reentrant model
  4298 ;;
  4299                           
  4300                           	psect	text18
  4301  002590                     __ptext18:
  4302                           	opt stack 0
  4303  002590                     ___altofl:
  4304                           	opt stack 23
  4305                           
  4306                           ; BSR set to: 0
  4307                           
  4308                           ;incstack = 0
  4309  002590  6A5B               	clrf	___altofl@sign,c
  4310                           
  4311                           ; BSR set to: 0
  4312  002592  AF6F               	btfss	(___altofl@c+3)& (0+255),7,b
  4313  002594  D00A               	goto	l2999
  4314                           
  4315                           ; BSR set to: 0
  4316  002596  1F6F               	comf	(___altofl@c+3)& (0+255),f,b
  4317  002598  1F6E               	comf	(___altofl@c+2)& (0+255),f,b
  4318  00259A  1F6D               	comf	(___altofl@c+1)& (0+255),f,b
  4319  00259C  6D6C               	negf	___altofl@c& (0+255),b
  4320  00259E  0E00               	movlw	0
  4321  0025A0  236D               	addwfc	(___altofl@c+1)& (0+255),f,b
  4322  0025A2  236E               	addwfc	(___altofl@c+2)& (0+255),f,b
  4323  0025A4  236F               	addwfc	(___altofl@c+3)& (0+255),f,b
  4324                           
  4325                           ; BSR set to: 0
  4326  0025A6  0E01               	movlw	1
  4327  0025A8  6E5B               	movwf	___altofl@sign,c
  4328  0025AA                     l2999:
  4329                           
  4330                           ; BSR set to: 0
  4331  0025AA  C06C  F003         	movff	___altofl@c,___flpack@arg
  4332  0025AE  C06D  F004         	movff	___altofl@c+1,___flpack@arg+1
  4333  0025B2  C06E  F005         	movff	___altofl@c+2,___flpack@arg+2
  4334  0025B6  C06F  F006         	movff	___altofl@c+3,___flpack@arg+3
  4335  0025BA  0E96               	movlw	150
  4336  0025BC  6E07               	movwf	___flpack@exp,c
  4337  0025BE  C05B  F008         	movff	___altofl@sign,___flpack@sign
  4338  0025C2  ECF4  F00E         	call	___flpack	;wreg free
  4339  0025C6  C003  F06C         	movff	?___flpack,?___altofl
  4340  0025CA  C004  F06D         	movff	?___flpack+1,?___altofl+1
  4341  0025CE  C005  F06E         	movff	?___flpack+2,?___altofl+2
  4342  0025D2  C006  F06F         	movff	?___flpack+3,?___altofl+3
  4343  0025D6  0012               	return		;funcret
  4344  0025D8                     __end_of___altofl:
  4345                           	opt stack 0
  4346                           tosu	equ	0xFFF
  4347                           tosh	equ	0xFFE
  4348                           tosl	equ	0xFFD
  4349                           pclath	equ	0xFFA
  4350                           tblptru	equ	0xFF8
  4351                           tblptrh	equ	0xFF7
  4352                           tblptrl	equ	0xFF6
  4353                           tablat	equ	0xFF5
  4354                           intcon	equ	0xFF2
  4355                           intcon2	equ	0xFF1
  4356                           postinc0	equ	0xFEE
  4357                           wreg	equ	0xFE8
  4358                           indf2	equ	0xFDF
  4359                           fsr2h	equ	0xFDA
  4360                           fsr2l	equ	0xFD9
  4361                           status	equ	0xFD8
  4362                           
  4363 ;; *************** function ___flsub *****************
  4364 ;; Defined at:
  4365 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flsub.c"
  4366 ;; Parameters:    Size  Location     Type
  4367 ;;  f1              4   66[COMRAM] unsigned char 
  4368 ;;  f2              4   70[COMRAM] unsigned char 
  4369 ;; Auto vars:     Size  Location     Type
  4370 ;;		None
  4371 ;; Return value:  Size  Location     Type
  4372 ;;                  4   66[COMRAM] unsigned char 
  4373 ;; Registers used:
  4374 ;;		wreg, status,2, status,0, cstack
  4375 ;; Tracked objects:
  4376 ;;		On entry : 0/0
  4377 ;;		On exit  : 0/0
  4378 ;;		Unchanged: 0/0
  4379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4380 ;;      Params:         8       0       0       0       0       0       0       0       0
  4381 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4382 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4383 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4384 ;;Total ram usage:        8 bytes
  4385 ;; Hardware stack levels used:    1
  4386 ;; Hardware stack levels required when called:    3
  4387 ;; This function calls:
  4388 ;;		___fladd
  4389 ;; This function is called by:
  4390 ;;		_format_double
  4391 ;;		_measure_capacitance
  4392 ;;		_measure_inductance
  4393 ;;		_exp
  4394 ;; This function uses a non-reentrant model
  4395 ;;
  4396                           
  4397                           	psect	text19
  4398  0025D8                     __ptext19:
  4399                           	opt stack 0
  4400  0025D8                     ___flsub:
  4401                           	opt stack 26
  4402                           
  4403                           ;incstack = 0
  4404  0025D8  5047               	movf	___flsub@f2,w,c
  4405  0025DA  1048               	iorwf	___flsub@f2+1,w,c
  4406  0025DC  1049               	iorwf	___flsub@f2+2,w,c
  4407  0025DE  104A               	iorwf	___flsub@f2+3,w,c
  4408  0025E0  E002               	bz	l3227
  4409  0025E2  0E80               	movlw	128
  4410  0025E4  1A4A               	xorwf	___flsub@f2+3,f,c
  4411  0025E6                     l3227:
  4412  0025E6  C043  F037         	movff	___flsub@f1,___fladd@f1
  4413  0025EA  C044  F038         	movff	___flsub@f1+1,___fladd@f1+1
  4414  0025EE  C045  F039         	movff	___flsub@f1+2,___fladd@f1+2
  4415  0025F2  C046  F03A         	movff	___flsub@f1+3,___fladd@f1+3
  4416  0025F6  C047  F03B         	movff	___flsub@f2,___fladd@f2
  4417  0025FA  C048  F03C         	movff	___flsub@f2+1,___fladd@f2+1
  4418  0025FE  C049  F03D         	movff	___flsub@f2+2,___fladd@f2+2
  4419  002602  C04A  F03E         	movff	___flsub@f2+3,___fladd@f2+3
  4420  002606  EC61  F00C         	call	___fladd	;wreg free
  4421  00260A  C037  F043         	movff	?___fladd,?___flsub
  4422  00260E  C038  F044         	movff	?___fladd+1,?___flsub+1
  4423  002612  C039  F045         	movff	?___fladd+2,?___flsub+2
  4424  002616  C03A  F046         	movff	?___fladd+3,?___flsub+3
  4425  00261A  0012               	return		;funcret
  4426  00261C                     __end_of___flsub:
  4427                           	opt stack 0
  4428                           tosu	equ	0xFFF
  4429                           tosh	equ	0xFFE
  4430                           tosl	equ	0xFFD
  4431                           pclath	equ	0xFFA
  4432                           tblptru	equ	0xFF8
  4433                           tblptrh	equ	0xFF7
  4434                           tblptrl	equ	0xFF6
  4435                           tablat	equ	0xFF5
  4436                           intcon	equ	0xFF2
  4437                           intcon2	equ	0xFF1
  4438                           postinc0	equ	0xFEE
  4439                           wreg	equ	0xFE8
  4440                           indf2	equ	0xFDF
  4441                           fsr2h	equ	0xFDA
  4442                           fsr2l	equ	0xFD9
  4443                           status	equ	0xFD8
  4444                           
  4445 ;; *************** function ___flneg *****************
  4446 ;; Defined at:
  4447 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flneg.c"
  4448 ;; Parameters:    Size  Location     Type
  4449 ;;  f1              4    2[COMRAM] unsigned char 
  4450 ;; Auto vars:     Size  Location     Type
  4451 ;;		None
  4452 ;; Return value:  Size  Location     Type
  4453 ;;                  4    2[COMRAM] unsigned char 
  4454 ;; Registers used:
  4455 ;;		wreg, status,2, status,0
  4456 ;; Tracked objects:
  4457 ;;		On entry : F/0
  4458 ;;		On exit  : F/0
  4459 ;;		Unchanged: F/0
  4460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4461 ;;      Params:         4       0       0       0       0       0       0       0       0
  4462 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4463 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4464 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4465 ;;Total ram usage:        4 bytes
  4466 ;; Hardware stack levels used:    1
  4467 ;; Hardware stack levels required when called:    1
  4468 ;; This function calls:
  4469 ;;		Nothing
  4470 ;; This function is called by:
  4471 ;;		_pow
  4472 ;;		_exp
  4473 ;; This function uses a non-reentrant model
  4474 ;;
  4475                           
  4476                           	psect	text20
  4477  00279A                     __ptext20:
  4478                           	opt stack 0
  4479  00279A                     ___flneg:
  4480                           	opt stack 25
  4481                           
  4482                           ; BSR set to: 0
  4483                           
  4484                           ;incstack = 0
  4485  00279A  5003               	movf	___flneg@f1,w,c
  4486  00279C  1004               	iorwf	___flneg@f1+1,w,c
  4487  00279E  1005               	iorwf	___flneg@f1+2,w,c
  4488  0027A0  1006               	iorwf	___flneg@f1+3,w,c
  4489  0027A2  E002               	bz	l2321
  4490                           
  4491                           ; BSR set to: 0
  4492  0027A4  0E80               	movlw	128
  4493  0027A6  1A06               	xorwf	___flneg@f1+3,f,c
  4494  0027A8                     l2321:
  4495                           
  4496                           ; BSR set to: 0
  4497  0027A8  C003  F003         	movff	___flneg@f1,?___flneg
  4498  0027AC  C004  F004         	movff	___flneg@f1+1,?___flneg+1
  4499  0027B0  C005  F005         	movff	___flneg@f1+2,?___flneg+2
  4500  0027B4  C006  F006         	movff	___flneg@f1+3,?___flneg+3
  4501                           
  4502                           ; BSR set to: 0
  4503  0027B8  0012               	return		;funcret
  4504  0027BA                     __end_of___flneg:
  4505                           	opt stack 0
  4506                           tosu	equ	0xFFF
  4507                           tosh	equ	0xFFE
  4508                           tosl	equ	0xFFD
  4509                           pclath	equ	0xFFA
  4510                           tblptru	equ	0xFF8
  4511                           tblptrh	equ	0xFF7
  4512                           tblptrl	equ	0xFF6
  4513                           tablat	equ	0xFF5
  4514                           intcon	equ	0xFF2
  4515                           intcon2	equ	0xFF1
  4516                           postinc0	equ	0xFEE
  4517                           wreg	equ	0xFE8
  4518                           indf2	equ	0xFDF
  4519                           fsr2h	equ	0xFDA
  4520                           fsr2l	equ	0xFD9
  4521                           status	equ	0xFD8
  4522                           
  4523 ;; *************** function ___fldiv *****************
  4524 ;; Defined at:
  4525 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldiv.c"
  4526 ;; Parameters:    Size  Location     Type
  4527 ;;  f1              4   12[COMRAM] unsigned char 
  4528 ;;  f2              4   16[COMRAM] unsigned char 
  4529 ;; Auto vars:     Size  Location     Type
  4530 ;;  f3              4   20[COMRAM] unsigned char 
  4531 ;;  sign            1   26[COMRAM] unsigned char 
  4532 ;;  exp             1   25[COMRAM] unsigned char 
  4533 ;;  cntr            1   24[COMRAM] unsigned char 
  4534 ;; Return value:  Size  Location     Type
  4535 ;;                  4   12[COMRAM] unsigned char 
  4536 ;; Registers used:
  4537 ;;		wreg, status,2, status,0, cstack
  4538 ;; Tracked objects:
  4539 ;;		On entry : 0/0
  4540 ;;		On exit  : 0/0
  4541 ;;		Unchanged: 0/0
  4542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4543 ;;      Params:         8       0       0       0       0       0       0       0       0
  4544 ;;      Locals:         7       0       0       0       0       0       0       0       0
  4545 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4546 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4547 ;;Total ram usage:       15 bytes
  4548 ;; Hardware stack levels used:    1
  4549 ;; Hardware stack levels required when called:    2
  4550 ;; This function calls:
  4551 ;;		___flpack
  4552 ;; This function is called by:
  4553 ;;		_format_double
  4554 ;;		_measure_capacitance
  4555 ;;		_measure_inductance
  4556 ;;		_exp
  4557 ;; This function uses a non-reentrant model
  4558 ;;
  4559                           
  4560                           	psect	text21
  4561  00202C                     __ptext21:
  4562                           	opt stack 0
  4563  00202C                     ___fldiv:
  4564                           	opt stack 27
  4565                           
  4566                           ; BSR set to: 0
  4567                           ;incstack = 0
  4568  00202C  340F               	rlcf	___fldiv@f1+2,w,c
  4569  00202E  3410               	rlcf	___fldiv@f1+3,w,c
  4570  002030  6E1A               	movwf	___fldiv@exp,c
  4571  002032  501A               	movf	___fldiv@exp,w,c
  4572  002034  E005               	bz	l3193
  4573  002036  3413               	rlcf	___fldiv@f2+2,w,c
  4574  002038  3414               	rlcf	___fldiv@f2+3,w,c
  4575  00203A  6E1B               	movwf	___fldiv@sign,c
  4576  00203C  501B               	movf	___fldiv@sign,w,c
  4577  00203E  E105               	bnz	l3195
  4578  002040                     l3193:
  4579  002040  6A0D               	clrf	?___fldiv,c
  4580  002042  6A0E               	clrf	?___fldiv+1,c
  4581  002044  6A0F               	clrf	?___fldiv+2,c
  4582  002046  6A10               	clrf	?___fldiv+3,c
  4583  002048  D043               	goto	l641
  4584  00204A                     l3195:
  4585  00204A  501B               	movf	___fldiv@sign,w,c
  4586  00204C  0F89               	addlw	137
  4587  00204E  5E1A               	subwf	___fldiv@exp,f,c
  4588  002050  C010  F01B         	movff	___fldiv@f1+3,___fldiv@sign
  4589  002054  5014               	movf	___fldiv@f2+3,w,c
  4590  002056  1A1B               	xorwf	___fldiv@sign,f,c
  4591  002058  0E80               	movlw	128
  4592  00205A  161B               	andwf	___fldiv@sign,f,c
  4593  00205C  8E0F               	bsf	___fldiv@f1+2,7,c
  4594  00205E  6A10               	clrf	___fldiv@f1+3,c
  4595  002060  8E13               	bsf	___fldiv@f2+2,7,c
  4596  002062  6A14               	clrf	___fldiv@f2+3,c
  4597  002064  0E20               	movlw	32
  4598  002066  6E19               	movwf	___fldiv@cntr,c
  4599  002068                     l3207:
  4600  002068  90D8               	bcf	status,0,c
  4601  00206A  3615               	rlcf	___fldiv@f3,f,c
  4602  00206C  3616               	rlcf	___fldiv@f3+1,f,c
  4603  00206E  3617               	rlcf	___fldiv@f3+2,f,c
  4604  002070  3618               	rlcf	___fldiv@f3+3,f,c
  4605  002072  5011               	movf	___fldiv@f2,w,c
  4606  002074  5C0D               	subwf	___fldiv@f1,w,c
  4607  002076  5012               	movf	___fldiv@f2+1,w,c
  4608  002078  580E               	subwfb	___fldiv@f1+1,w,c
  4609  00207A  5013               	movf	___fldiv@f2+2,w,c
  4610  00207C  580F               	subwfb	___fldiv@f1+2,w,c
  4611  00207E  5014               	movf	___fldiv@f2+3,w,c
  4612  002080  5810               	subwfb	___fldiv@f1+3,w,c
  4613  002082  E309               	bnc	l3215
  4614  002084  5011               	movf	___fldiv@f2,w,c
  4615  002086  5E0D               	subwf	___fldiv@f1,f,c
  4616  002088  5012               	movf	___fldiv@f2+1,w,c
  4617  00208A  5A0E               	subwfb	___fldiv@f1+1,f,c
  4618  00208C  5013               	movf	___fldiv@f2+2,w,c
  4619  00208E  5A0F               	subwfb	___fldiv@f1+2,f,c
  4620  002090  5014               	movf	___fldiv@f2+3,w,c
  4621  002092  5A10               	subwfb	___fldiv@f1+3,f,c
  4622  002094  8015               	bsf	___fldiv@f3,0,c
  4623  002096                     l3215:
  4624  002096  90D8               	bcf	status,0,c
  4625  002098  360D               	rlcf	___fldiv@f1,f,c
  4626  00209A  360E               	rlcf	___fldiv@f1+1,f,c
  4627  00209C  360F               	rlcf	___fldiv@f1+2,f,c
  4628  00209E  3610               	rlcf	___fldiv@f1+3,f,c
  4629  0020A0  2E19               	decfsz	___fldiv@cntr,f,c
  4630  0020A2  D7E2               	goto	l3207
  4631  0020A4  C015  F003         	movff	___fldiv@f3,___flpack@arg
  4632  0020A8  C016  F004         	movff	___fldiv@f3+1,___flpack@arg+1
  4633  0020AC  C017  F005         	movff	___fldiv@f3+2,___flpack@arg+2
  4634  0020B0  C018  F006         	movff	___fldiv@f3+3,___flpack@arg+3
  4635  0020B4  C01A  F007         	movff	___fldiv@exp,___flpack@exp
  4636  0020B8  C01B  F008         	movff	___fldiv@sign,___flpack@sign
  4637  0020BC  ECF4  F00E         	call	___flpack	;wreg free
  4638  0020C0  C003  F00D         	movff	?___flpack,?___fldiv
  4639  0020C4  C004  F00E         	movff	?___flpack+1,?___fldiv+1
  4640  0020C8  C005  F00F         	movff	?___flpack+2,?___fldiv+2
  4641  0020CC  C006  F010         	movff	?___flpack+3,?___fldiv+3
  4642  0020D0                     l641:
  4643  0020D0  0012               	return		;funcret
  4644  0020D2                     __end_of___fldiv:
  4645                           	opt stack 0
  4646                           tosu	equ	0xFFF
  4647                           tosh	equ	0xFFE
  4648                           tosl	equ	0xFFD
  4649                           pclath	equ	0xFFA
  4650                           tblptru	equ	0xFF8
  4651                           tblptrh	equ	0xFF7
  4652                           tblptrl	equ	0xFF6
  4653                           tablat	equ	0xFF5
  4654                           intcon	equ	0xFF2
  4655                           intcon2	equ	0xFF1
  4656                           postinc0	equ	0xFEE
  4657                           wreg	equ	0xFE8
  4658                           indf2	equ	0xFDF
  4659                           fsr2h	equ	0xFDA
  4660                           fsr2l	equ	0xFD9
  4661                           status	equ	0xFD8
  4662                           
  4663 ;; *************** function ___lltofl *****************
  4664 ;; Defined at:
  4665 ;;		line 30 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltofl.c"
  4666 ;; Parameters:    Size  Location     Type
  4667 ;;  c               4   12[COMRAM] unsigned long 
  4668 ;; Auto vars:     Size  Location     Type
  4669 ;;		None
  4670 ;; Return value:  Size  Location     Type
  4671 ;;                  4   12[COMRAM] unsigned long 
  4672 ;; Registers used:
  4673 ;;		wreg, status,2, status,0, cstack
  4674 ;; Tracked objects:
  4675 ;;		On entry : F/0
  4676 ;;		On exit  : 0/0
  4677 ;;		Unchanged: 0/0
  4678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4679 ;;      Params:         4       0       0       0       0       0       0       0       0
  4680 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4681 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4682 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4683 ;;Total ram usage:        4 bytes
  4684 ;; Hardware stack levels used:    1
  4685 ;; Hardware stack levels required when called:    2
  4686 ;; This function calls:
  4687 ;;		___flpack
  4688 ;; This function is called by:
  4689 ;;		_pow
  4690 ;; This function uses a non-reentrant model
  4691 ;;
  4692                           
  4693                           	psect	text22
  4694  0026D2                     __ptext22:
  4695                           	opt stack 0
  4696  0026D2                     ___lltofl:
  4697                           	opt stack 25
  4698                           
  4699                           ; BSR set to: 0
  4700                           
  4701                           ;incstack = 0
  4702  0026D2  C00D  F003         	movff	___lltofl@c,___flpack@arg
  4703  0026D6  C00E  F004         	movff	___lltofl@c+1,___flpack@arg+1
  4704  0026DA  C00F  F005         	movff	___lltofl@c+2,___flpack@arg+2
  4705  0026DE  C010  F006         	movff	___lltofl@c+3,___flpack@arg+3
  4706  0026E2  0E96               	movlw	150
  4707  0026E4  6E07               	movwf	___flpack@exp,c
  4708  0026E6  0E00               	movlw	0
  4709  0026E8  6E08               	movwf	___flpack@sign,c
  4710  0026EA  ECF4  F00E         	call	___flpack	;wreg free
  4711  0026EE  C003  F00D         	movff	?___flpack,?___lltofl
  4712  0026F2  C004  F00E         	movff	?___flpack+1,?___lltofl+1
  4713  0026F6  C005  F00F         	movff	?___flpack+2,?___lltofl+2
  4714  0026FA  C006  F010         	movff	?___flpack+3,?___lltofl+3
  4715  0026FE  0012               	return		;funcret
  4716  002700                     __end_of___lltofl:
  4717                           	opt stack 0
  4718                           tosu	equ	0xFFF
  4719                           tosh	equ	0xFFE
  4720                           tosl	equ	0xFFD
  4721                           pclath	equ	0xFFA
  4722                           tblptru	equ	0xFF8
  4723                           tblptrh	equ	0xFF7
  4724                           tblptrl	equ	0xFF6
  4725                           tablat	equ	0xFF5
  4726                           intcon	equ	0xFF2
  4727                           intcon2	equ	0xFF1
  4728                           postinc0	equ	0xFEE
  4729                           wreg	equ	0xFE8
  4730                           indf2	equ	0xFDF
  4731                           fsr2h	equ	0xFDA
  4732                           fsr2l	equ	0xFD9
  4733                           status	equ	0xFD8
  4734                           
  4735 ;; *************** function _format_putchar *****************
  4736 ;; Defined at:
  4737 ;;		line 6 in file "../../../lib/format.c"
  4738 ;; Parameters:    Size  Location     Type
  4739 ;;  c               1    wreg     unsigned char 
  4740 ;; Auto vars:     Size  Location     Type
  4741 ;;  c               1    0[COMRAM] unsigned char 
  4742 ;; Return value:  Size  Location     Type
  4743 ;;		None               void
  4744 ;; Registers used:
  4745 ;;		wreg
  4746 ;; Tracked objects:
  4747 ;;		On entry : F/0
  4748 ;;		On exit  : F/0
  4749 ;;		Unchanged: F/0
  4750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4751 ;;      Params:         0       0       0       0       0       0       0       0       0
  4752 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4753 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4754 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4755 ;;Total ram usage:        0 bytes
  4756 ;; Hardware stack levels used:    1
  4757 ;; Hardware stack levels required when called:    1
  4758 ;; This function calls:
  4759 ;;		Nothing
  4760 ;; This function is called by:
  4761 ;;		_format_number
  4762 ;;		_format_xint32
  4763 ;;		_format_double
  4764 ;; This function uses a non-reentrant model
  4765 ;;
  4766                           
  4767                           	psect	text23
  4768  0027CA                     __ptext23:
  4769                           	opt stack 0
  4770  0027CA                     _format_putchar:
  4771                           	opt stack 27
  4772                           
  4773                           ; BSR set to: 0
  4774                           
  4775                           ; BSR set to: 0
  4776                           ;format.c: 7: return;
  4777                           
  4778                           ;incstack = 0
  4779  0027CA  0012               	return		;funcret
  4780  0027CC                     __end_of_format_putchar:
  4781                           	opt stack 0
  4782                           tosu	equ	0xFFF
  4783                           tosh	equ	0xFFE
  4784                           tosl	equ	0xFFD
  4785                           pclath	equ	0xFFA
  4786                           tblptru	equ	0xFF8
  4787                           tblptrh	equ	0xFF7
  4788                           tblptrl	equ	0xFF6
  4789                           tablat	equ	0xFF5
  4790                           intcon	equ	0xFF2
  4791                           intcon2	equ	0xFF1
  4792                           postinc0	equ	0xFEE
  4793                           wreg	equ	0xFE8
  4794                           indf2	equ	0xFDF
  4795                           fsr2h	equ	0xFDA
  4796                           fsr2l	equ	0xFD9
  4797                           status	equ	0xFD8
  4798                           
  4799 ;; *************** function _ser_putch *****************
  4800 ;; Defined at:
  4801 ;;		line 82 in file "../../../lib/ser.c"
  4802 ;; Parameters:    Size  Location     Type
  4803 ;;  c               1    wreg     unsigned char 
  4804 ;; Auto vars:     Size  Location     Type
  4805 ;;  c               1    2[COMRAM] unsigned char 
  4806 ;; Return value:  Size  Location     Type
  4807 ;;		None               void
  4808 ;; Registers used:
  4809 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4810 ;; Tracked objects:
  4811 ;;		On entry : 0/0
  4812 ;;		On exit  : 0/0
  4813 ;;		Unchanged: 0/0
  4814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4815 ;;      Params:         0       0       0       0       0       0       0       0       0
  4816 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4817 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4818 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4819 ;;Total ram usage:        1 bytes
  4820 ;; Hardware stack levels used:    1
  4821 ;; Hardware stack levels required when called:    1
  4822 ;; This function calls:
  4823 ;;		Nothing
  4824 ;; This function is called by:
  4825 ;;		_ser_puts
  4826 ;;		_output_putch
  4827 ;;		_measure_capacitance
  4828 ;;		_format_number
  4829 ;;		_format_xint32
  4830 ;;		_format_double
  4831 ;; This function uses a non-reentrant model
  4832 ;;
  4833                           
  4834                           	psect	text24
  4835  002776                     __ptext24:
  4836                           	opt stack 0
  4837  002776                     _ser_putch:
  4838                           	opt stack 28
  4839                           
  4840                           ; BSR set to: 0
  4841                           ;incstack = 0
  4842                           ;ser_putch@c stored from wreg
  4843  002776  6E03               	movwf	ser_putch@c,c
  4844  002778                     l2233:
  4845  002778  285C               	incf	_txiptr,w,c	;volatile
  4846  00277A  0B0F               	andlw	15
  4847  00277C  185D               	xorwf	_txoptr,w,c	;volatile
  4848  00277E  E0FC               	bz	l2233
  4849                           
  4850                           ;ser.c: 84: GIE = 0;
  4851  002780  9EF2               	bcf	intcon,7,c	;volatile
  4852                           
  4853                           ;ser.c: 85: txfifo[txiptr] = c;
  4854  002782  505C               	movf	_txiptr,w,c
  4855  002784  0FC1               	addlw	low _txfifo
  4856  002786  6ED9               	movwf	fsr2l,c
  4857  002788  6ADA               	clrf	fsr2h,c
  4858  00278A  C003  FFDF         	movff	ser_putch@c,indf2
  4859                           
  4860                           ;ser.c: 86: txiptr = (txiptr + 1) & ((unsigned char)16 - 1);
  4861  00278E  285C               	incf	_txiptr,w,c	;volatile
  4862  002790  0B0F               	andlw	15
  4863  002792  6E5C               	movwf	_txiptr,c	;volatile
  4864                           
  4865                           ;ser.c: 87: TXIE = 1;
  4866  002794  889D               	bsf	3997,4,c	;volatile
  4867                           
  4868                           ;ser.c: 88: GIE = 1;
  4869  002796  8EF2               	bsf	intcon,7,c	;volatile
  4870  002798  0012               	return		;funcret
  4871  00279A                     __end_of_ser_putch:
  4872                           	opt stack 0
  4873                           tosu	equ	0xFFF
  4874                           tosh	equ	0xFFE
  4875                           tosl	equ	0xFFD
  4876                           pclath	equ	0xFFA
  4877                           tblptru	equ	0xFF8
  4878                           tblptrh	equ	0xFF7
  4879                           tblptrl	equ	0xFF6
  4880                           tablat	equ	0xFF5
  4881                           intcon	equ	0xFF2
  4882                           intcon2	equ	0xFF1
  4883                           postinc0	equ	0xFEE
  4884                           wreg	equ	0xFE8
  4885                           indf2	equ	0xFDF
  4886                           fsr2h	equ	0xFDA
  4887                           fsr2l	equ	0xFD9
  4888                           status	equ	0xFD8
  4889                           
  4890 ;; *************** function _output_putch *****************
  4891 ;; Defined at:
  4892 ;;		line 48 in file "../../../src/LC-meter.c"
  4893 ;; Parameters:    Size  Location     Type
  4894 ;;  c               1    wreg     unsigned char 
  4895 ;; Auto vars:     Size  Location     Type
  4896 ;;  c               1    3[COMRAM] unsigned char 
  4897 ;; Return value:  Size  Location     Type
  4898 ;;		None               void
  4899 ;; Registers used:
  4900 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4901 ;; Tracked objects:
  4902 ;;		On entry : F/0
  4903 ;;		On exit  : 0/0
  4904 ;;		Unchanged: 0/0
  4905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4906 ;;      Params:         0       0       0       0       0       0       0       0       0
  4907 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4908 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4909 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4910 ;;Total ram usage:        1 bytes
  4911 ;; Hardware stack levels used:    1
  4912 ;; Hardware stack levels required when called:    2
  4913 ;; This function calls:
  4914 ;;		_ser_putch
  4915 ;; This function is called by:
  4916 ;;		_measure_capacitance
  4917 ;;		_format_number
  4918 ;;		_format_xint32
  4919 ;;		_format_double
  4920 ;; This function uses a non-reentrant model
  4921 ;;
  4922                           
  4923                           	psect	text25
  4924  0027BA                     __ptext25:
  4925                           	opt stack 0
  4926  0027BA                     _output_putch:
  4927                           	opt stack 26
  4928                           
  4929                           ;incstack = 0
  4930                           ;output_putch@c stored from wreg
  4931  0027BA  6E04               	movwf	output_putch@c,c
  4932                           
  4933                           ; BSR set to: 0
  4934                           ;LC-meter.c: 54: ser_putch(c);
  4935  0027BC  5004               	movf	output_putch@c,w,c
  4936  0027BE  ECBB  F013         	call	_ser_putch
  4937  0027C2  0012               	return		;funcret
  4938  0027C4                     __end_of_output_putch:
  4939                           	opt stack 0
  4940                           tosu	equ	0xFFF
  4941                           tosh	equ	0xFFE
  4942                           tosl	equ	0xFFD
  4943                           pclath	equ	0xFFA
  4944                           tblptru	equ	0xFF8
  4945                           tblptrh	equ	0xFF7
  4946                           tblptrl	equ	0xFF6
  4947                           tablat	equ	0xFF5
  4948                           intcon	equ	0xFF2
  4949                           intcon2	equ	0xFF1
  4950                           postinc0	equ	0xFEE
  4951                           wreg	equ	0xFE8
  4952                           indf2	equ	0xFDF
  4953                           fsr2h	equ	0xFDA
  4954                           fsr2l	equ	0xFD9
  4955                           status	equ	0xFD8
  4956                           
  4957 ;; *************** function _log10 *****************
  4958 ;; Defined at:
  4959 ;;		line 39 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  4960 ;; Parameters:    Size  Location     Type
  4961 ;;  x               4   84[COMRAM] unsigned char 
  4962 ;; Auto vars:     Size  Location     Type
  4963 ;;		None
  4964 ;; Return value:  Size  Location     Type
  4965 ;;                  4   84[COMRAM] unsigned char 
  4966 ;; Registers used:
  4967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4968 ;; Tracked objects:
  4969 ;;		On entry : 0/0
  4970 ;;		On exit  : 0/0
  4971 ;;		Unchanged: 0/0
  4972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4973 ;;      Params:         4       0       0       0       0       0       0       0       0
  4974 ;;      Locals:         0       4       0       0       0       0       0       0       0
  4975 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4976 ;;      Totals:         4       4       0       0       0       0       0       0       0
  4977 ;;Total ram usage:        8 bytes
  4978 ;; Hardware stack levels used:    1
  4979 ;; Hardware stack levels required when called:    5
  4980 ;; This function calls:
  4981 ;;		___flmul
  4982 ;;		_log
  4983 ;; This function is called by:
  4984 ;;		_format_double
  4985 ;; This function uses a non-reentrant model
  4986 ;;
  4987                           
  4988                           	psect	text26
  4989  0023FA                     __ptext26:
  4990                           	opt stack 0
  4991  0023FA                     _log10:
  4992                           	opt stack 23
  4993                           
  4994                           ;incstack = 0
  4995  0023FA  C055  F04F         	movff	log10@x,log@x
  4996  0023FE  C056  F050         	movff	log10@x+1,log@x+1
  4997  002402  C057  F051         	movff	log10@x+2,log@x+2
  4998  002406  C058  F052         	movff	log10@x+3,log@x+3
  4999  00240A  EC15  F00D         	call	_log	;wreg free
  5000  00240E  C04F  F060         	movff	?_log,_log10$930
  5001  002412  C050  F061         	movff	?_log+1,_log10$930+1
  5002  002416  C051  F062         	movff	?_log+2,_log10$930+2
  5003  00241A  C052  F063         	movff	?_log+3,_log10$930+3
  5004  00241E  C060  F01C         	movff	_log10$930,___flmul@f1
  5005  002422  C061  F01D         	movff	_log10$930+1,___flmul@f1+1
  5006  002426  C062  F01E         	movff	_log10$930+2,___flmul@f1+2
  5007  00242A  C063  F01F         	movff	_log10$930+3,___flmul@f1+3
  5008  00242E  0ED9               	movlw	217
  5009  002430  6E20               	movwf	___flmul@f2,c
  5010  002432  0E5B               	movlw	91
  5011  002434  6E21               	movwf	___flmul@f2+1,c
  5012  002436  0EDE               	movlw	222
  5013  002438  6E22               	movwf	___flmul@f2+2,c
  5014  00243A  0E3E               	movlw	62
  5015  00243C  6E23               	movwf	___flmul@f2+3,c
  5016  00243E  ECE5  F009         	call	___flmul	;wreg free
  5017  002442  C01C  F055         	movff	?___flmul,?_log10
  5018  002446  C01D  F056         	movff	?___flmul+1,?_log10+1
  5019  00244A  C01E  F057         	movff	?___flmul+2,?_log10+2
  5020  00244E  C01F  F058         	movff	?___flmul+3,?_log10+3
  5021  002452  0012               	return		;funcret
  5022  002454                     __end_of_log10:
  5023                           	opt stack 0
  5024                           tosu	equ	0xFFF
  5025                           tosh	equ	0xFFE
  5026                           tosl	equ	0xFFD
  5027                           pclath	equ	0xFFA
  5028                           tblptru	equ	0xFF8
  5029                           tblptrh	equ	0xFF7
  5030                           tblptrl	equ	0xFF6
  5031                           tablat	equ	0xFF5
  5032                           intcon	equ	0xFF2
  5033                           intcon2	equ	0xFF1
  5034                           postinc0	equ	0xFEE
  5035                           wreg	equ	0xFE8
  5036                           indf2	equ	0xFDF
  5037                           fsr2h	equ	0xFDA
  5038                           fsr2l	equ	0xFD9
  5039                           status	equ	0xFD8
  5040                           
  5041 ;; *************** function _log *****************
  5042 ;; Defined at:
  5043 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  5044 ;; Parameters:    Size  Location     Type
  5045 ;;  x               4   78[COMRAM] unsigned char 
  5046 ;; Auto vars:     Size  Location     Type
  5047 ;;  exponent        2   82[COMRAM] int 
  5048 ;; Return value:  Size  Location     Type
  5049 ;;                  4   78[COMRAM] int 
  5050 ;; Registers used:
  5051 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5052 ;; Tracked objects:
  5053 ;;		On entry : 0/0
  5054 ;;		On exit  : 0/0
  5055 ;;		Unchanged: 0/0
  5056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5057 ;;      Params:         4       0       0       0       0       0       0       0       0
  5058 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5059 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5060 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5061 ;;Total ram usage:        6 bytes
  5062 ;; Hardware stack levels used:    1
  5063 ;; Hardware stack levels required when called:    4
  5064 ;; This function calls:
  5065 ;;		___awtofl
  5066 ;;		___fladd
  5067 ;;		___flmul
  5068 ;;		_eval_poly
  5069 ;;		_frexp
  5070 ;; This function is called by:
  5071 ;;		_log10
  5072 ;;		_pow
  5073 ;; This function uses a non-reentrant model
  5074 ;;
  5075                           
  5076                           	psect	text27
  5077  001A2A                     __ptext27:
  5078                           	opt stack 0
  5079  001A2A                     _log:
  5080                           	opt stack 23
  5081                           
  5082                           ;incstack = 0
  5083  001A2A  BE52               	btfsc	log@x+3,7,c
  5084  001A2C  D005               	goto	l3257
  5085  001A2E  504F               	movf	log@x,w,c
  5086  001A30  1050               	iorwf	log@x+1,w,c
  5087  001A32  1051               	iorwf	log@x+2,w,c
  5088  001A34  1052               	iorwf	log@x+3,w,c
  5089  001A36  E105               	bnz	l3259
  5090  001A38                     l3257:
  5091  001A38  6A4F               	clrf	?_log,c
  5092  001A3A  6A50               	clrf	?_log+1,c
  5093  001A3C  6A51               	clrf	?_log+2,c
  5094  001A3E  6A52               	clrf	?_log+3,c
  5095  001A40  D080               	goto	l877
  5096  001A42                     l3259:
  5097  001A42  6A20               	clrf	___flmul@f2,c
  5098  001A44  6A21               	clrf	___flmul@f2+1,c
  5099  001A46  6A22               	clrf	___flmul@f2+2,c
  5100  001A48  0E40               	movlw	64
  5101  001A4A  6E23               	movwf	___flmul@f2+3,c
  5102  001A4C  0E53               	movlw	low log@exponent
  5103  001A4E  6E07               	movwf	frexp@eptr,c
  5104  001A50  C04F  F003         	movff	log@x,frexp@value
  5105  001A54  C050  F004         	movff	log@x+1,frexp@value+1
  5106  001A58  C051  F005         	movff	log@x+2,frexp@value+2
  5107  001A5C  C052  F006         	movff	log@x+3,frexp@value+3
  5108  001A60  EC92  F011         	call	_frexp	;wreg free
  5109  001A64  C003  F01C         	movff	?_frexp,___flmul@f1
  5110  001A68  C004  F01D         	movff	?_frexp+1,___flmul@f1+1
  5111  001A6C  C005  F01E         	movff	?_frexp+2,___flmul@f1+2
  5112  001A70  C006  F01F         	movff	?_frexp+3,___flmul@f1+3
  5113  001A74  ECE5  F009         	call	___flmul	;wreg free
  5114  001A78  C01C  F037         	movff	?___flmul,___fladd@f1
  5115  001A7C  C01D  F038         	movff	?___flmul+1,___fladd@f1+1
  5116  001A80  C01E  F039         	movff	?___flmul+2,___fladd@f1+2
  5117  001A84  C01F  F03A         	movff	?___flmul+3,___fladd@f1+3
  5118  001A88  0E00               	movlw	0
  5119  001A8A  6E3B               	movwf	___fladd@f2,c
  5120  001A8C  6E3C               	movwf	___fladd@f2+1,c
  5121  001A8E  0E80               	movlw	128
  5122  001A90  6E3D               	movwf	___fladd@f2+2,c
  5123  001A92  0EBF               	movlw	191
  5124  001A94  6E3E               	movwf	___fladd@f2+3,c
  5125  001A96  EC61  F00C         	call	___fladd	;wreg free
  5126  001A9A  C037  F04F         	movff	?___fladd,log@x
  5127  001A9E  C038  F050         	movff	?___fladd+1,log@x+1
  5128  001AA2  C039  F051         	movff	?___fladd+2,log@x+2
  5129  001AA6  C03A  F052         	movff	?___fladd+3,log@x+3
  5130  001AAA  0653               	decf	log@exponent,f,c
  5131  001AAC  A0D8               	btfss	status,0,c
  5132  001AAE  0654               	decf	log@exponent+1,f,c
  5133  001AB0  C04F  F043         	movff	log@x,eval_poly@x
  5134  001AB4  C050  F044         	movff	log@x+1,eval_poly@x+1
  5135  001AB8  C051  F045         	movff	log@x+2,eval_poly@x+2
  5136  001ABC  C052  F046         	movff	log@x+3,eval_poly@x+3
  5137  001AC0  0E29               	movlw	low log@coeff
  5138  001AC2  6E47               	movwf	eval_poly@d,c
  5139  001AC4  6A49               	clrf	eval_poly@n+1,c
  5140  001AC6  0E08               	movlw	8
  5141  001AC8  6E48               	movwf	eval_poly@n,c
  5142  001ACA  ECB8  F00F         	call	_eval_poly	;wreg free
  5143  001ACE  C043  F04F         	movff	?_eval_poly,log@x
  5144  001AD2  C044  F050         	movff	?_eval_poly+1,log@x+1
  5145  001AD6  C045  F051         	movff	?_eval_poly+2,log@x+2
  5146  001ADA  C046  F052         	movff	?_eval_poly+3,log@x+3
  5147  001ADE  0E18               	movlw	24
  5148  001AE0  6E20               	movwf	___flmul@f2,c
  5149  001AE2  0E72               	movlw	114
  5150  001AE4  6E21               	movwf	___flmul@f2+1,c
  5151  001AE6  0E31               	movlw	49
  5152  001AE8  6E22               	movwf	___flmul@f2+2,c
  5153  001AEA  0E3F               	movlw	63
  5154  001AEC  6E23               	movwf	___flmul@f2+3,c
  5155  001AEE  C053  F00D         	movff	log@exponent,___awtofl@c
  5156  001AF2  C054  F00E         	movff	log@exponent+1,___awtofl@c+1
  5157  001AF6  EC4C  F013         	call	___awtofl	;wreg free
  5158  001AFA  C00D  F01C         	movff	?___awtofl,___flmul@f1
  5159  001AFE  C00E  F01D         	movff	?___awtofl+1,___flmul@f1+1
  5160  001B02  C00F  F01E         	movff	?___awtofl+2,___flmul@f1+2
  5161  001B06  C010  F01F         	movff	?___awtofl+3,___flmul@f1+3
  5162  001B0A  ECE5  F009         	call	___flmul	;wreg free
  5163  001B0E  C01C  F037         	movff	?___flmul,___fladd@f1
  5164  001B12  C01D  F038         	movff	?___flmul+1,___fladd@f1+1
  5165  001B16  C01E  F039         	movff	?___flmul+2,___fladd@f1+2
  5166  001B1A  C01F  F03A         	movff	?___flmul+3,___fladd@f1+3
  5167  001B1E  C04F  F03B         	movff	log@x,___fladd@f2
  5168  001B22  C050  F03C         	movff	log@x+1,___fladd@f2+1
  5169  001B26  C051  F03D         	movff	log@x+2,___fladd@f2+2
  5170  001B2A  C052  F03E         	movff	log@x+3,___fladd@f2+3
  5171  001B2E  EC61  F00C         	call	___fladd	;wreg free
  5172  001B32  C037  F04F         	movff	?___fladd,?_log
  5173  001B36  C038  F050         	movff	?___fladd+1,?_log+1
  5174  001B3A  C039  F051         	movff	?___fladd+2,?_log+2
  5175  001B3E  C03A  F052         	movff	?___fladd+3,?_log+3
  5176  001B42                     l877:
  5177  001B42  0012               	return		;funcret
  5178  001B44                     __end_of_log:
  5179                           	opt stack 0
  5180                           tosu	equ	0xFFF
  5181                           tosh	equ	0xFFE
  5182                           tosl	equ	0xFFD
  5183                           pclath	equ	0xFFA
  5184                           tblptru	equ	0xFF8
  5185                           tblptrh	equ	0xFF7
  5186                           tblptrl	equ	0xFF6
  5187                           tablat	equ	0xFF5
  5188                           intcon	equ	0xFF2
  5189                           intcon2	equ	0xFF1
  5190                           postinc0	equ	0xFEE
  5191                           wreg	equ	0xFE8
  5192                           indf2	equ	0xFDF
  5193                           fsr2h	equ	0xFDA
  5194                           fsr2l	equ	0xFD9
  5195                           status	equ	0xFD8
  5196                           
  5197 ;; *************** function _frexp *****************
  5198 ;; Defined at:
  5199 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  5200 ;; Parameters:    Size  Location     Type
  5201 ;;  value           4    2[COMRAM] int 
  5202 ;;  eptr            1    6[COMRAM] PTR int 
  5203 ;;		 -> log@exponent(2), floor@expon(2), 
  5204 ;; Auto vars:     Size  Location     Type
  5205 ;;		None
  5206 ;; Return value:  Size  Location     Type
  5207 ;;                  4    2[COMRAM] PTR int 
  5208 ;; Registers used:
  5209 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5210 ;; Tracked objects:
  5211 ;;		On entry : 0/0
  5212 ;;		On exit  : 0/0
  5213 ;;		Unchanged: 0/0
  5214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5215 ;;      Params:         5       0       0       0       0       0       0       0       0
  5216 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5217 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5218 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5219 ;;Total ram usage:        7 bytes
  5220 ;; Hardware stack levels used:    1
  5221 ;; Hardware stack levels required when called:    1
  5222 ;; This function calls:
  5223 ;;		Nothing
  5224 ;; This function is called by:
  5225 ;;		_floor
  5226 ;;		_log
  5227 ;; This function uses a non-reentrant model
  5228 ;;
  5229                           
  5230                           	psect	text28
  5231  002324                     __ptext28:
  5232                           	opt stack 0
  5233  002324                     _frexp:
  5234                           	opt stack 25
  5235                           
  5236                           ;incstack = 0
  5237  002324  5003               	movf	frexp@value,w,c
  5238  002326  1004               	iorwf	frexp@value+1,w,c
  5239  002328  1005               	iorwf	frexp@value+2,w,c
  5240  00232A  1006               	iorwf	frexp@value+3,w,c
  5241  00232C  E10B               	bnz	l3117
  5242  00232E  5007               	movf	frexp@eptr,w,c
  5243  002330  6ED9               	movwf	fsr2l,c
  5244  002332  6ADA               	clrf	fsr2h,c
  5245  002334  0E00               	movlw	0
  5246  002336  6ADE               	clrf	postinc2,c
  5247  002338  6ADD               	clrf	postdec2,c
  5248  00233A  6A03               	clrf	?_frexp,c
  5249  00233C  6A04               	clrf	?_frexp+1,c
  5250  00233E  6A05               	clrf	?_frexp+2,c
  5251  002340  6A06               	clrf	?_frexp+3,c
  5252  002342  D02B               	goto	l716
  5253  002344                     l3117:
  5254  002344  5006               	movf	frexp@value+3,w,c
  5255  002346  0B7F               	andlw	127
  5256  002348  6E08               	movwf	??_frexp& (0+255),c
  5257  00234A  6A09               	clrf	(??_frexp+1)& (0+255),c
  5258  00234C  90D8               	bcf	status,0,c
  5259  00234E  3608               	rlcf	??_frexp,f,c
  5260  002350  3609               	rlcf	??_frexp+1,f,c
  5261  002352  5007               	movf	frexp@eptr,w,c
  5262  002354  6ED9               	movwf	fsr2l,c
  5263  002356  6ADA               	clrf	fsr2h,c
  5264  002358  C008  FFDE         	movff	??_frexp,postinc2
  5265  00235C  C009  FFDD         	movff	??_frexp+1,postdec2
  5266  002360  5007               	movf	frexp@eptr,w,c
  5267  002362  6ED9               	movwf	fsr2l,c
  5268  002364  6ADA               	clrf	fsr2h,c
  5269  002366  0E01               	movlw	1
  5270  002368  AE05               	btfss	frexp@value+2,7,c
  5271  00236A  0E00               	movlw	0
  5272  00236C  12DE               	iorwf	postinc2,f,c
  5273  00236E  0E00               	movlw	0
  5274  002370  12DD               	iorwf	postdec2,f,c
  5275  002372  5007               	movf	frexp@eptr,w,c
  5276  002374  6ED9               	movwf	fsr2l,c
  5277  002376  6ADA               	clrf	fsr2h,c
  5278  002378  0E82               	movlw	130
  5279  00237A  26DE               	addwf	postinc2,f,c
  5280  00237C  0EFF               	movlw	255
  5281  00237E  22DD               	addwfc	postdec2,f,c
  5282  002380  5006               	movf	frexp@value+3,w,c
  5283  002382  0B80               	andlw	-128
  5284  002384  093F               	iorlw	63
  5285  002386  6E06               	movwf	frexp@value+3,c
  5286  002388  9E05               	bcf	frexp@value+2,7,c
  5287  00238A  C003  F003         	movff	frexp@value,?_frexp
  5288  00238E  C004  F004         	movff	frexp@value+1,?_frexp+1
  5289  002392  C005  F005         	movff	frexp@value+2,?_frexp+2
  5290  002396  C006  F006         	movff	frexp@value+3,?_frexp+3
  5291  00239A                     l716:
  5292  00239A  0012               	return		;funcret
  5293  00239C                     __end_of_frexp:
  5294                           	opt stack 0
  5295                           tosu	equ	0xFFF
  5296                           tosh	equ	0xFFE
  5297                           tosl	equ	0xFFD
  5298                           pclath	equ	0xFFA
  5299                           tblptru	equ	0xFF8
  5300                           tblptrh	equ	0xFF7
  5301                           tblptrl	equ	0xFF6
  5302                           tablat	equ	0xFF5
  5303                           intcon	equ	0xFF2
  5304                           intcon2	equ	0xFF1
  5305                           postinc0	equ	0xFEE
  5306                           wreg	equ	0xFE8
  5307                           indf2	equ	0xFDF
  5308                           postinc2	equ	0xFDE
  5309                           postdec2	equ	0xFDD
  5310                           fsr2h	equ	0xFDA
  5311                           fsr2l	equ	0xFD9
  5312                           status	equ	0xFD8
  5313                           
  5314 ;; *************** function _eval_poly *****************
  5315 ;; Defined at:
  5316 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  5317 ;; Parameters:    Size  Location     Type
  5318 ;;  x               4   66[COMRAM] PTR int 
  5319 ;;  d               1   70[COMRAM] PTR const 
  5320 ;;		 -> exp@coeff(40), log@coeff(36), 
  5321 ;;  n               2   71[COMRAM] int 
  5322 ;; Auto vars:     Size  Location     Type
  5323 ;;  res             4   74[COMRAM] int 
  5324 ;; Return value:  Size  Location     Type
  5325 ;;                  4   66[COMRAM] int 
  5326 ;; Registers used:
  5327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5328 ;; Tracked objects:
  5329 ;;		On entry : 0/0
  5330 ;;		On exit  : 0/0
  5331 ;;		Unchanged: 0/0
  5332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5333 ;;      Params:         7       0       0       0       0       0       0       0       0
  5334 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5335 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5336 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5337 ;;Total ram usage:       12 bytes
  5338 ;; Hardware stack levels used:    1
  5339 ;; Hardware stack levels required when called:    3
  5340 ;; This function calls:
  5341 ;;		___fladd
  5342 ;;		___flmul
  5343 ;; This function is called by:
  5344 ;;		_log
  5345 ;;		_exp
  5346 ;; This function uses a non-reentrant model
  5347 ;;
  5348                           
  5349                           	psect	text29
  5350  001F70                     __ptext29:
  5351                           	opt stack 0
  5352  001F70                     _eval_poly:
  5353                           	opt stack 23
  5354                           
  5355                           ;incstack = 0
  5356  001F70  5048               	movf	eval_poly@n,w,c
  5357  001F72  0D04               	mullw	4
  5358  001F74  5047               	movf	eval_poly@d,w,c
  5359  001F76  24F3               	addwf	prodl,w,c
  5360  001F78  6E4A               	movwf	??_eval_poly& (0+255),c
  5361  001F7A  C04A  FFF6         	movff	??_eval_poly,tblptrl
  5362  001F7E                     	if	1	;There is more than 1 active tblptr byte
  5363  001F7E  0E08               	movlw	high __smallconst
  5364  001F80  6EF7               	movwf	tblptrh,c
  5365  001F82                     	endif
  5366  001F82                     	if	0	;tblptru may be non-zero
  5367  001F82                     	endif
  5368  001F82                     	if	0	;tblptru may be non-zero
  5369  001F82                     	endif
  5370  001F82  0009               	tblrd		*+
  5371  001F84  CFF5 F04B          	movff	tablat,eval_poly@res
  5372  001F88  0009               	tblrd		*+
  5373  001F8A  CFF5 F04C          	movff	tablat,eval_poly@res+1
  5374  001F8E  0009               	tblrd		*+
  5375  001F90  CFF5 F04D          	movff	tablat,eval_poly@res+2
  5376  001F94  000A               	tblrd		*-
  5377  001F96  CFF5 F04E          	movff	tablat,eval_poly@res+3
  5378  001F9A  D03C               	goto	l3245
  5379  001F9C                     l3243:
  5380  001F9C  C04B  F020         	movff	eval_poly@res,___flmul@f2
  5381  001FA0  C04C  F021         	movff	eval_poly@res+1,___flmul@f2+1
  5382  001FA4  C04D  F022         	movff	eval_poly@res+2,___flmul@f2+2
  5383  001FA8  C04E  F023         	movff	eval_poly@res+3,___flmul@f2+3
  5384  001FAC  C043  F01C         	movff	eval_poly@x,___flmul@f1
  5385  001FB0  C044  F01D         	movff	eval_poly@x+1,___flmul@f1+1
  5386  001FB4  C045  F01E         	movff	eval_poly@x+2,___flmul@f1+2
  5387  001FB8  C046  F01F         	movff	eval_poly@x+3,___flmul@f1+3
  5388  001FBC  ECE5  F009         	call	___flmul	;wreg free
  5389  001FC0  C01C  F037         	movff	?___flmul,___fladd@f1
  5390  001FC4  C01D  F038         	movff	?___flmul+1,___fladd@f1+1
  5391  001FC8  C01E  F039         	movff	?___flmul+2,___fladd@f1+2
  5392  001FCC  C01F  F03A         	movff	?___flmul+3,___fladd@f1+3
  5393  001FD0  0648               	decf	eval_poly@n,f,c
  5394  001FD2  A0D8               	btfss	status,0,c
  5395  001FD4  0649               	decf	eval_poly@n+1,f,c
  5396  001FD6  5048               	movf	eval_poly@n,w,c
  5397  001FD8  0D04               	mullw	4
  5398  001FDA  5047               	movf	eval_poly@d,w,c
  5399  001FDC  24F3               	addwf	prodl,w,c
  5400  001FDE  6E4A               	movwf	??_eval_poly& (0+255),c
  5401  001FE0  C04A  FFF6         	movff	??_eval_poly,tblptrl
  5402  001FE4                     	if	1	;There is more than 1 active tblptr byte
  5403  001FE4  0E08               	movlw	high __smallconst
  5404  001FE6  6EF7               	movwf	tblptrh,c
  5405  001FE8                     	endif
  5406  001FE8                     	if	0	;tblptru may be non-zero
  5407  001FE8                     	endif
  5408  001FE8                     	if	0	;tblptru may be non-zero
  5409  001FE8                     	endif
  5410  001FE8  0009               	tblrd		*+
  5411  001FEA  CFF5 F03B          	movff	tablat,___fladd@f2
  5412  001FEE  0009               	tblrd		*+
  5413  001FF0  CFF5 F03C          	movff	tablat,___fladd@f2+1
  5414  001FF4  0009               	tblrd		*+
  5415  001FF6  CFF5 F03D          	movff	tablat,___fladd@f2+2
  5416  001FFA  000A               	tblrd		*-
  5417  001FFC  CFF5 F03E          	movff	tablat,___fladd@f2+3
  5418  002000  EC61  F00C         	call	___fladd	;wreg free
  5419  002004  C037  F04B         	movff	?___fladd,eval_poly@res
  5420  002008  C038  F04C         	movff	?___fladd+1,eval_poly@res+1
  5421  00200C  C039  F04D         	movff	?___fladd+2,eval_poly@res+2
  5422  002010  C03A  F04E         	movff	?___fladd+3,eval_poly@res+3
  5423  002014                     l3245:
  5424  002014  5048               	movf	eval_poly@n,w,c
  5425  002016  1049               	iorwf	eval_poly@n+1,w,c
  5426  002018  E1C1               	bnz	l3243
  5427  00201A  C04B  F043         	movff	eval_poly@res,?_eval_poly
  5428  00201E  C04C  F044         	movff	eval_poly@res+1,?_eval_poly+1
  5429  002022  C04D  F045         	movff	eval_poly@res+2,?_eval_poly+2
  5430  002026  C04E  F046         	movff	eval_poly@res+3,?_eval_poly+3
  5431  00202A  0012               	return		;funcret
  5432  00202C                     __end_of_eval_poly:
  5433                           	opt stack 0
  5434                           tosu	equ	0xFFF
  5435                           tosh	equ	0xFFE
  5436                           tosl	equ	0xFFD
  5437                           pclath	equ	0xFFA
  5438                           tblptru	equ	0xFF8
  5439                           tblptrh	equ	0xFF7
  5440                           tblptrl	equ	0xFF6
  5441                           tablat	equ	0xFF5
  5442                           prodl	equ	0xFF3
  5443                           intcon	equ	0xFF2
  5444                           intcon2	equ	0xFF1
  5445                           postinc0	equ	0xFEE
  5446                           wreg	equ	0xFE8
  5447                           indf2	equ	0xFDF
  5448                           postinc2	equ	0xFDE
  5449                           postdec2	equ	0xFDD
  5450                           fsr2h	equ	0xFDA
  5451                           fsr2l	equ	0xFD9
  5452                           status	equ	0xFD8
  5453                           
  5454 ;; *************** function ___flmul *****************
  5455 ;; Defined at:
  5456 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flmul.c"
  5457 ;; Parameters:    Size  Location     Type
  5458 ;;  f1              4   27[COMRAM] int 
  5459 ;;  f2              4   31[COMRAM] int 
  5460 ;; Auto vars:     Size  Location     Type
  5461 ;;  f3_as_produc    4   50[COMRAM] unsigned long 
  5462 ;;  sign            1   49[COMRAM] unsigned char 
  5463 ;;  exp             1   48[COMRAM] unsigned char 
  5464 ;;  cntr            1    0        unsigned char 
  5465 ;; Return value:  Size  Location     Type
  5466 ;;                  4   27[COMRAM] unsigned char 
  5467 ;; Registers used:
  5468 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5469 ;; Tracked objects:
  5470 ;;		On entry : 0/0
  5471 ;;		On exit  : 0/0
  5472 ;;		Unchanged: 0/0
  5473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5474 ;;      Params:         8       0       0       0       0       0       0       0       0
  5475 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5476 ;;      Temps:         13       0       0       0       0       0       0       0       0
  5477 ;;      Totals:        27       0       0       0       0       0       0       0       0
  5478 ;;Total ram usage:       27 bytes
  5479 ;; Hardware stack levels used:    1
  5480 ;; Hardware stack levels required when called:    2
  5481 ;; This function calls:
  5482 ;;		___flpack
  5483 ;; This function is called by:
  5484 ;;		_format_double
  5485 ;;		_measure_capacitance
  5486 ;;		_measure_inductance
  5487 ;;		_log
  5488 ;;		_log10
  5489 ;;		_pow
  5490 ;;		_eval_poly
  5491 ;;		_exp
  5492 ;; This function uses a non-reentrant model
  5493 ;;
  5494                           
  5495                           	psect	text30
  5496  0013CA                     __ptext30:
  5497                           	opt stack 0
  5498  0013CA                     ___flmul:
  5499                           	opt stack 27
  5500                           
  5501                           ;incstack = 0
  5502  0013CA  341E               	rlcf	___flmul@f1+2,w,c
  5503  0013CC  341F               	rlcf	___flmul@f1+3,w,c
  5504  0013CE  6E31               	movwf	___flmul@exp,c
  5505  0013D0  5031               	movf	___flmul@exp,w,c
  5506  0013D2  E005               	bz	l3075
  5507  0013D4  3422               	rlcf	___flmul@f2+2,w,c
  5508  0013D6  3423               	rlcf	___flmul@f2+3,w,c
  5509  0013D8  6E32               	movwf	___flmul@sign,c
  5510  0013DA  5032               	movf	___flmul@sign,w,c
  5511  0013DC  E105               	bnz	l3077
  5512  0013DE                     l3075:
  5513  0013DE  6A1C               	clrf	?___flmul,c
  5514  0013E0  6A1D               	clrf	?___flmul+1,c
  5515  0013E2  6A1E               	clrf	?___flmul+2,c
  5516  0013E4  6A1F               	clrf	?___flmul+3,c
  5517  0013E6  D0CF               	goto	l656
  5518  0013E8                     l3077:
  5519  0013E8  5032               	movf	___flmul@sign,w,c
  5520  0013EA  0F7B               	addlw	123
  5521  0013EC  2631               	addwf	___flmul@exp,f,c
  5522  0013EE  C01F  F032         	movff	___flmul@f1+3,___flmul@sign
  5523  0013F2  5023               	movf	___flmul@f2+3,w,c
  5524  0013F4  1A32               	xorwf	___flmul@sign,f,c
  5525  0013F6  0E80               	movlw	128
  5526  0013F8  1632               	andwf	___flmul@sign,f,c
  5527  0013FA  8E1E               	bsf	___flmul@f1+2,7,c
  5528  0013FC  8E22               	bsf	___flmul@f2+2,7,c
  5529  0013FE  6A23               	clrf	___flmul@f2+3,c
  5530  001400  6A1F               	clrf	___flmul@f1+3,c
  5531  001402  501C               	movf	___flmul@f1,w,c
  5532  001404  0220               	mulwf	___flmul@f2,c
  5533  001406  CFF4 FFF3          	movff	prodh,prodl
  5534  00140A  6AF4               	clrf	prodh,c
  5535  00140C  CFF3 F033          	movff	prodl,___flmul@f3_as_product
  5536  001410  CFF4 F034          	movff	prodh,___flmul@f3_as_product+1
  5537  001414  6A35               	clrf	___flmul@f3_as_product+2,c
  5538  001416  6A36               	clrf	___flmul@f3_as_product+3,c
  5539  001418  501C               	movf	___flmul@f1,w,c
  5540  00141A  0221               	mulwf	___flmul@f2+1,c
  5541  00141C  CFF3 F024          	movff	prodl,??___flmul
  5542  001420  CFF4 F025          	movff	prodh,??___flmul+1
  5543  001424  6A26               	clrf	(??___flmul+2)& (0+255),c
  5544  001426  501D               	movf	___flmul@f1+1,w,c
  5545  001428  0220               	mulwf	___flmul@f2,c
  5546  00142A  50F3               	movf	prodl,w,c
  5547  00142C  2424               	addwf	??___flmul,w,c
  5548  00142E  6E27               	movwf	(??___flmul+3)& (0+255),c
  5549  001430  50F4               	movf	prodh,w,c
  5550  001432  2025               	addwfc	??___flmul+1,w,c
  5551  001434  6E28               	movwf	(??___flmul+4)& (0+255),c
  5552  001436  0E00               	movlw	0
  5553  001438  2026               	addwfc	??___flmul+2,w,c
  5554  00143A  6E29               	movwf	(??___flmul+5)& (0+255),c
  5555  00143C  5027               	movf	??___flmul+3,w,c
  5556  00143E  6E2A               	movwf	(??___flmul+6)& (0+255),c
  5557  001440  5028               	movf	??___flmul+4,w,c
  5558  001442  6E2B               	movwf	(??___flmul+7)& (0+255),c
  5559  001444  5029               	movf	??___flmul+5,w,c
  5560  001446  6E2C               	movwf	(??___flmul+8)& (0+255),c
  5561  001448  6A2D               	clrf	(??___flmul+9)& (0+255),c
  5562  00144A  502A               	movf	??___flmul+6,w,c
  5563  00144C  2633               	addwf	___flmul@f3_as_product,f,c
  5564  00144E  502B               	movf	??___flmul+7,w,c
  5565  001450  2234               	addwfc	___flmul@f3_as_product+1,f,c
  5566  001452  502C               	movf	??___flmul+8,w,c
  5567  001454  2235               	addwfc	___flmul@f3_as_product+2,f,c
  5568  001456  502D               	movf	??___flmul+9,w,c
  5569  001458  2236               	addwfc	___flmul@f3_as_product+3,f,c
  5570  00145A  5034               	movf	___flmul@f3_as_product+1,w,c
  5571  00145C  6E33               	movwf	___flmul@f3_as_product,c
  5572  00145E  5035               	movf	___flmul@f3_as_product+2,w,c
  5573  001460  6E34               	movwf	___flmul@f3_as_product+1,c
  5574  001462  5036               	movf	___flmul@f3_as_product+3,w,c
  5575  001464  6E35               	movwf	___flmul@f3_as_product+2,c
  5576  001466  6A36               	clrf	___flmul@f3_as_product+3,c
  5577  001468  501C               	movf	___flmul@f1,w,c
  5578  00146A  0222               	mulwf	___flmul@f2+2,c
  5579  00146C  CFF3 F024          	movff	prodl,??___flmul
  5580  001470  CFF4 F025          	movff	prodh,??___flmul+1
  5581  001474  6A26               	clrf	(??___flmul+2)& (0+255),c
  5582  001476  501D               	movf	___flmul@f1+1,w,c
  5583  001478  0221               	mulwf	___flmul@f2+1,c
  5584  00147A  50F3               	movf	prodl,w,c
  5585  00147C  2424               	addwf	??___flmul,w,c
  5586  00147E  6E27               	movwf	(??___flmul+3)& (0+255),c
  5587  001480  50F4               	movf	prodh,w,c
  5588  001482  2025               	addwfc	??___flmul+1,w,c
  5589  001484  6E28               	movwf	(??___flmul+4)& (0+255),c
  5590  001486  0E00               	movlw	0
  5591  001488  2026               	addwfc	??___flmul+2,w,c
  5592  00148A  6E29               	movwf	(??___flmul+5)& (0+255),c
  5593  00148C  501E               	movf	___flmul@f1+2,w,c
  5594  00148E  0220               	mulwf	___flmul@f2,c
  5595  001490  50F3               	movf	prodl,w,c
  5596  001492  2427               	addwf	??___flmul+3,w,c
  5597  001494  6E2A               	movwf	(??___flmul+6)& (0+255),c
  5598  001496  50F4               	movf	prodh,w,c
  5599  001498  2028               	addwfc	??___flmul+4,w,c
  5600  00149A  6E2B               	movwf	(??___flmul+7)& (0+255),c
  5601  00149C  0E00               	movlw	0
  5602  00149E  2029               	addwfc	??___flmul+5,w,c
  5603  0014A0  6E2C               	movwf	(??___flmul+8)& (0+255),c
  5604  0014A2  502A               	movf	??___flmul+6,w,c
  5605  0014A4  6E2D               	movwf	(??___flmul+9)& (0+255),c
  5606  0014A6  502B               	movf	??___flmul+7,w,c
  5607  0014A8  6E2E               	movwf	(??___flmul+10)& (0+255),c
  5608  0014AA  502C               	movf	??___flmul+8,w,c
  5609  0014AC  6E2F               	movwf	(??___flmul+11)& (0+255),c
  5610  0014AE  6A30               	clrf	(??___flmul+12)& (0+255),c
  5611  0014B0  502D               	movf	??___flmul+9,w,c
  5612  0014B2  2633               	addwf	___flmul@f3_as_product,f,c
  5613  0014B4  502E               	movf	??___flmul+10,w,c
  5614  0014B6  2234               	addwfc	___flmul@f3_as_product+1,f,c
  5615  0014B8  502F               	movf	??___flmul+11,w,c
  5616  0014BA  2235               	addwfc	___flmul@f3_as_product+2,f,c
  5617  0014BC  5030               	movf	??___flmul+12,w,c
  5618  0014BE  2236               	addwfc	___flmul@f3_as_product+3,f,c
  5619  0014C0  501E               	movf	___flmul@f1+2,w,c
  5620  0014C2  0221               	mulwf	___flmul@f2+1,c
  5621  0014C4  CFF3 F024          	movff	prodl,??___flmul
  5622  0014C8  CFF4 F025          	movff	prodh,??___flmul+1
  5623  0014CC  6A26               	clrf	(??___flmul+2)& (0+255),c
  5624  0014CE  0E33               	movlw	___flmul@f3_as_product& (0+255)
  5625  0014D0  6E27               	movwf	(??___flmul+3)& (0+255),c
  5626  0014D2  6A28               	clrf	(??___flmul+4)& (0+255),c
  5627  0014D4  2827               	incf	??___flmul+3,w,c
  5628  0014D6  6ED9               	movwf	fsr2l,c
  5629  0014D8  0E00               	movlw	0
  5630  0014DA  2028               	addwfc	??___flmul+4,w,c
  5631  0014DC  6EDA               	movwf	fsr2h,c
  5632  0014DE  5024               	movf	??___flmul,w,c
  5633  0014E0  26DE               	addwf	postinc2,f,c
  5634  0014E2  5025               	movf	??___flmul+1,w,c
  5635  0014E4  22DE               	addwfc	postinc2,f,c
  5636  0014E6  5026               	movf	??___flmul+2,w,c
  5637  0014E8  22DE               	addwfc	postinc2,f,c
  5638  0014EA  501D               	movf	___flmul@f1+1,w,c
  5639  0014EC  0222               	mulwf	___flmul@f2+2,c
  5640  0014EE  CFF3 F024          	movff	prodl,??___flmul
  5641  0014F2  CFF4 F025          	movff	prodh,??___flmul+1
  5642  0014F6  6A26               	clrf	(??___flmul+2)& (0+255),c
  5643  0014F8  0E33               	movlw	___flmul@f3_as_product& (0+255)
  5644  0014FA  6E27               	movwf	(??___flmul+3)& (0+255),c
  5645  0014FC  6A28               	clrf	(??___flmul+4)& (0+255),c
  5646  0014FE  2827               	incf	??___flmul+3,w,c
  5647  001500  6ED9               	movwf	fsr2l,c
  5648  001502  0E00               	movlw	0
  5649  001504  2028               	addwfc	??___flmul+4,w,c
  5650  001506  6EDA               	movwf	fsr2h,c
  5651  001508  5024               	movf	??___flmul,w,c
  5652  00150A  26DE               	addwf	postinc2,f,c
  5653  00150C  5025               	movf	??___flmul+1,w,c
  5654  00150E  22DE               	addwfc	postinc2,f,c
  5655  001510  5026               	movf	??___flmul+2,w,c
  5656  001512  22DE               	addwfc	postinc2,f,c
  5657  001514  501E               	movf	___flmul@f1+2,w,c
  5658  001516  0222               	mulwf	___flmul@f2+2,c
  5659  001518  CFF3 F024          	movff	prodl,??___flmul
  5660  00151C  CFF4 F025          	movff	prodh,??___flmul+1
  5661  001520  6A26               	clrf	(??___flmul+2)& (0+255),c
  5662  001522  0E33               	movlw	___flmul@f3_as_product& (0+255)
  5663  001524  6E27               	movwf	(??___flmul+3)& (0+255),c
  5664  001526  6A28               	clrf	(??___flmul+4)& (0+255),c
  5665  001528  0E02               	movlw	2
  5666  00152A  2427               	addwf	??___flmul+3,w,c
  5667  00152C  6ED9               	movwf	fsr2l,c
  5668  00152E  0E00               	movlw	0
  5669  001530  2028               	addwfc	??___flmul+4,w,c
  5670  001532  6EDA               	movwf	fsr2h,c
  5671  001534  5024               	movf	??___flmul,w,c
  5672  001536  26DE               	addwf	postinc2,f,c
  5673  001538  5025               	movf	??___flmul+1,w,c
  5674  00153A  22DE               	addwfc	postinc2,f,c
  5675  00153C  5026               	movf	??___flmul+2,w,c
  5676  00153E  22DE               	addwfc	postinc2,f,c
  5677  001540  AE36               	btfss	___flmul@f3_as_product+3,7,c
  5678  001542  D006               	goto	l658
  5679  001544  90D8               	bcf	status,0,c
  5680  001546  3236               	rrcf	___flmul@f3_as_product+3,f,c
  5681  001548  3235               	rrcf	___flmul@f3_as_product+2,f,c
  5682  00154A  3234               	rrcf	___flmul@f3_as_product+1,f,c
  5683  00154C  3233               	rrcf	___flmul@f3_as_product,f,c
  5684  00154E  2A31               	incf	___flmul@exp,f,c
  5685  001550                     l658:
  5686  001550  90D8               	bcf	status,0,c
  5687  001552  3236               	rrcf	___flmul@f3_as_product+3,f,c
  5688  001554  3235               	rrcf	___flmul@f3_as_product+2,f,c
  5689  001556  3234               	rrcf	___flmul@f3_as_product+1,f,c
  5690  001558  3233               	rrcf	___flmul@f3_as_product,f,c
  5691  00155A  C033  F003         	movff	___flmul@f3_as_product,___flpack@arg
  5692  00155E  C034  F004         	movff	___flmul@f3_as_product+1,___flpack@arg+1
  5693  001562  C035  F005         	movff	___flmul@f3_as_product+2,___flpack@arg+2
  5694  001566  C036  F006         	movff	___flmul@f3_as_product+3,___flpack@arg+3
  5695  00156A  C031  F007         	movff	___flmul@exp,___flpack@exp
  5696  00156E  C032  F008         	movff	___flmul@sign,___flpack@sign
  5697  001572  ECF4  F00E         	call	___flpack	;wreg free
  5698  001576  C003  F01C         	movff	?___flpack,?___flmul
  5699  00157A  C004  F01D         	movff	?___flpack+1,?___flmul+1
  5700  00157E  C005  F01E         	movff	?___flpack+2,?___flmul+2
  5701  001582  C006  F01F         	movff	?___flpack+3,?___flmul+3
  5702  001586                     l656:
  5703  001586  0012               	return		;funcret
  5704  001588                     __end_of___flmul:
  5705                           	opt stack 0
  5706                           tosu	equ	0xFFF
  5707                           tosh	equ	0xFFE
  5708                           tosl	equ	0xFFD
  5709                           pclath	equ	0xFFA
  5710                           tblptru	equ	0xFF8
  5711                           tblptrh	equ	0xFF7
  5712                           tblptrl	equ	0xFF6
  5713                           tablat	equ	0xFF5
  5714                           prodh	equ	0xFF4
  5715                           prodl	equ	0xFF3
  5716                           intcon	equ	0xFF2
  5717                           intcon2	equ	0xFF1
  5718                           postinc0	equ	0xFEE
  5719                           wreg	equ	0xFE8
  5720                           indf2	equ	0xFDF
  5721                           postinc2	equ	0xFDE
  5722                           postdec2	equ	0xFDD
  5723                           fsr2h	equ	0xFDA
  5724                           fsr2l	equ	0xFD9
  5725                           status	equ	0xFD8
  5726                           
  5727 ;; *************** function ___fladd *****************
  5728 ;; Defined at:
  5729 ;;		line 88 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fladd.c"
  5730 ;; Parameters:    Size  Location     Type
  5731 ;;  f1              4   54[COMRAM] unsigned char 
  5732 ;;  f2              4   58[COMRAM] unsigned char 
  5733 ;; Auto vars:     Size  Location     Type
  5734 ;;  exp1            1   65[COMRAM] unsigned char 
  5735 ;;  exp2            1   64[COMRAM] unsigned char 
  5736 ;;  sign            1   63[COMRAM] unsigned char 
  5737 ;; Return value:  Size  Location     Type
  5738 ;;                  4   54[COMRAM] unsigned char 
  5739 ;; Registers used:
  5740 ;;		wreg, status,2, status,0, cstack
  5741 ;; Tracked objects:
  5742 ;;		On entry : 0/0
  5743 ;;		On exit  : 0/0
  5744 ;;		Unchanged: 0/0
  5745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5746 ;;      Params:         8       0       0       0       0       0       0       0       0
  5747 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5748 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5749 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5750 ;;Total ram usage:       12 bytes
  5751 ;; Hardware stack levels used:    1
  5752 ;; Hardware stack levels required when called:    2
  5753 ;; This function calls:
  5754 ;;		___flpack
  5755 ;; This function is called by:
  5756 ;;		_floor
  5757 ;;		___flsub
  5758 ;;		_log
  5759 ;;		_eval_poly
  5760 ;; This function uses a non-reentrant model
  5761 ;;
  5762                           
  5763                           	psect	text31
  5764  0018C2                     __ptext31:
  5765                           	opt stack 0
  5766  0018C2                     ___fladd:
  5767                           	opt stack 26
  5768                           
  5769                           ;incstack = 0
  5770  0018C2  3439               	rlcf	___fladd@f1+2,w,c
  5771  0018C4  343A               	rlcf	___fladd@f1+3,w,c
  5772  0018C6  6E42               	movwf	___fladd@exp1,c
  5773  0018C8  343D               	rlcf	___fladd@f2+2,w,c
  5774  0018CA  343E               	rlcf	___fladd@f2+3,w,c
  5775  0018CC  6E41               	movwf	___fladd@exp2,c
  5776  0018CE  5042               	movf	___fladd@exp1,w,c
  5777  0018D0  E009               	bz	l609
  5778  0018D2  5041               	movf	___fladd@exp2,w,c
  5779  0018D4  5C42               	subwf	___fladd@exp1,w,c
  5780  0018D6  E20F               	bc	l3009
  5781  0018D8  5042               	movf	___fladd@exp1,w,c
  5782  0018DA  5C41               	subwf	___fladd@exp2,w,c
  5783  0018DC  6E3F               	movwf	??___fladd& (0+255),c
  5784  0018DE  0E20               	movlw	32
  5785  0018E0  643F               	cpfsgt	??___fladd,c
  5786  0018E2  D009               	goto	l3009
  5787  0018E4                     l609:
  5788  0018E4  C03B  F037         	movff	___fladd@f2,?___fladd
  5789  0018E8  C03C  F038         	movff	___fladd@f2+1,?___fladd+1
  5790  0018EC  C03D  F039         	movff	___fladd@f2+2,?___fladd+2
  5791  0018F0  C03E  F03A         	movff	___fladd@f2+3,?___fladd+3
  5792  0018F4  D099               	goto	l610
  5793  0018F6                     l3009:
  5794  0018F6  5041               	movf	___fladd@exp2,w,c
  5795  0018F8  E009               	bz	l613
  5796  0018FA  5042               	movf	___fladd@exp1,w,c
  5797  0018FC  5C41               	subwf	___fladd@exp2,w,c
  5798  0018FE  E20F               	bc	l3015
  5799  001900  5041               	movf	___fladd@exp2,w,c
  5800  001902  5C42               	subwf	___fladd@exp1,w,c
  5801  001904  6E3F               	movwf	??___fladd& (0+255),c
  5802  001906  0E20               	movlw	32
  5803  001908  643F               	cpfsgt	??___fladd,c
  5804  00190A  D009               	goto	l3015
  5805  00190C                     l613:
  5806  00190C  C037  F037         	movff	___fladd@f1,?___fladd
  5807  001910  C038  F038         	movff	___fladd@f1+1,?___fladd+1
  5808  001914  C039  F039         	movff	___fladd@f1+2,?___fladd+2
  5809  001918  C03A  F03A         	movff	___fladd@f1+3,?___fladd+3
  5810  00191C  D085               	goto	l610
  5811  00191E                     l3015:
  5812  00191E  0E06               	movlw	6
  5813  001920  6E40               	movwf	___fladd@sign,c
  5814  001922  BE3A               	btfsc	___fladd@f1+3,7,c
  5815  001924  8E40               	bsf	___fladd@sign,7,c
  5816  001926  BE3E               	btfsc	___fladd@f2+3,7,c
  5817  001928  8C40               	bsf	___fladd@sign,6,c
  5818  00192A  8E39               	bsf	___fladd@f1+2,7,c
  5819  00192C  6A3A               	clrf	___fladd@f1+3,c
  5820  00192E  8E3D               	bsf	___fladd@f2+2,7,c
  5821  001930  6A3E               	clrf	___fladd@f2+3,c
  5822  001932  5041               	movf	___fladd@exp2,w,c
  5823  001934  5C42               	subwf	___fladd@exp1,w,c
  5824  001936  E21A               	bc	l3039
  5825  001938                     l3029:
  5826  001938  90D8               	bcf	status,0,c
  5827  00193A  363B               	rlcf	___fladd@f2,f,c
  5828  00193C  363C               	rlcf	___fladd@f2+1,f,c
  5829  00193E  363D               	rlcf	___fladd@f2+2,f,c
  5830  001940  363E               	rlcf	___fladd@f2+3,f,c
  5831  001942  0641               	decf	___fladd@exp2,f,c
  5832  001944  5042               	movf	___fladd@exp1,w,c
  5833  001946  1841               	xorwf	___fladd@exp2,w,c
  5834  001948  E00D               	bz	l3037
  5835  00194A  0640               	decf	___fladd@sign,f,c
  5836  00194C  C040  F03F         	movff	___fladd@sign,??___fladd
  5837  001950  0E07               	movlw	7
  5838  001952  163F               	andwf	??___fladd,f,c
  5839  001954  E007               	bz	l3037
  5840  001956  D7F0               	goto	l3029
  5841  001958                     l3035:
  5842  001958  90D8               	bcf	status,0,c
  5843  00195A  323A               	rrcf	___fladd@f1+3,f,c
  5844  00195C  3239               	rrcf	___fladd@f1+2,f,c
  5845  00195E  3238               	rrcf	___fladd@f1+1,f,c
  5846  001960  3237               	rrcf	___fladd@f1,f,c
  5847  001962  2A42               	incf	___fladd@exp1,f,c
  5848  001964                     l3037:
  5849  001964  5041               	movf	___fladd@exp2,w,c
  5850  001966  1842               	xorwf	___fladd@exp1,w,c
  5851  001968  E01D               	bz	l624
  5852  00196A  D7F6               	goto	l3035
  5853  00196C                     l3039:
  5854  00196C  5042               	movf	___fladd@exp1,w,c
  5855  00196E  5C41               	subwf	___fladd@exp2,w,c
  5856  001970  E219               	bc	l624
  5857  001972                     l3041:
  5858  001972  90D8               	bcf	status,0,c
  5859  001974  3637               	rlcf	___fladd@f1,f,c
  5860  001976  3638               	rlcf	___fladd@f1+1,f,c
  5861  001978  3639               	rlcf	___fladd@f1+2,f,c
  5862  00197A  363A               	rlcf	___fladd@f1+3,f,c
  5863  00197C  0642               	decf	___fladd@exp1,f,c
  5864  00197E  5042               	movf	___fladd@exp1,w,c
  5865  001980  1841               	xorwf	___fladd@exp2,w,c
  5866  001982  E00D               	bz	l3049
  5867  001984  0640               	decf	___fladd@sign,f,c
  5868  001986  C040  F03F         	movff	___fladd@sign,??___fladd
  5869  00198A  0E07               	movlw	7
  5870  00198C  163F               	andwf	??___fladd,f,c
  5871  00198E  E007               	bz	l3049
  5872  001990  D7F0               	goto	l3041
  5873  001992                     l3047:
  5874  001992  90D8               	bcf	status,0,c
  5875  001994  323E               	rrcf	___fladd@f2+3,f,c
  5876  001996  323D               	rrcf	___fladd@f2+2,f,c
  5877  001998  323C               	rrcf	___fladd@f2+1,f,c
  5878  00199A  323B               	rrcf	___fladd@f2,f,c
  5879  00199C  2A41               	incf	___fladd@exp2,f,c
  5880  00199E                     l3049:
  5881  00199E  5041               	movf	___fladd@exp2,w,c
  5882  0019A0  1842               	xorwf	___fladd@exp1,w,c
  5883  0019A2  E1F7               	bnz	l3047
  5884  0019A4                     l624:
  5885  0019A4  AE40               	btfss	___fladd@sign,7,c
  5886  0019A6  D009               	goto	l3053
  5887  0019A8  1E37               	comf	___fladd@f1,f,c
  5888  0019AA  1E38               	comf	___fladd@f1+1,f,c
  5889  0019AC  1E39               	comf	___fladd@f1+2,f,c
  5890  0019AE  1E3A               	comf	___fladd@f1+3,f,c
  5891  0019B0  2A37               	incf	___fladd@f1,f,c
  5892  0019B2  0E00               	movlw	0
  5893  0019B4  2238               	addwfc	___fladd@f1+1,f,c
  5894  0019B6  2239               	addwfc	___fladd@f1+2,f,c
  5895  0019B8  223A               	addwfc	___fladd@f1+3,f,c
  5896  0019BA                     l3053:
  5897  0019BA  AC40               	btfss	___fladd@sign,6,c
  5898  0019BC  D009               	goto	l3057
  5899  0019BE  1E3B               	comf	___fladd@f2,f,c
  5900  0019C0  1E3C               	comf	___fladd@f2+1,f,c
  5901  0019C2  1E3D               	comf	___fladd@f2+2,f,c
  5902  0019C4  1E3E               	comf	___fladd@f2+3,f,c
  5903  0019C6  2A3B               	incf	___fladd@f2,f,c
  5904  0019C8  0E00               	movlw	0
  5905  0019CA  223C               	addwfc	___fladd@f2+1,f,c
  5906  0019CC  223D               	addwfc	___fladd@f2+2,f,c
  5907  0019CE  223E               	addwfc	___fladd@f2+3,f,c
  5908  0019D0                     l3057:
  5909  0019D0  6A40               	clrf	___fladd@sign,c
  5910  0019D2  5037               	movf	___fladd@f1,w,c
  5911  0019D4  263B               	addwf	___fladd@f2,f,c
  5912  0019D6  5038               	movf	___fladd@f1+1,w,c
  5913  0019D8  223C               	addwfc	___fladd@f2+1,f,c
  5914  0019DA  5039               	movf	___fladd@f1+2,w,c
  5915  0019DC  223D               	addwfc	___fladd@f2+2,f,c
  5916  0019DE  503A               	movf	___fladd@f1+3,w,c
  5917  0019E0  223E               	addwfc	___fladd@f2+3,f,c
  5918  0019E2  AE3E               	btfss	___fladd@f2+3,7,c
  5919  0019E4  D00B               	goto	l3065
  5920  0019E6  1E3B               	comf	___fladd@f2,f,c
  5921  0019E8  1E3C               	comf	___fladd@f2+1,f,c
  5922  0019EA  1E3D               	comf	___fladd@f2+2,f,c
  5923  0019EC  1E3E               	comf	___fladd@f2+3,f,c
  5924  0019EE  2A3B               	incf	___fladd@f2,f,c
  5925  0019F0  0E00               	movlw	0
  5926  0019F2  223C               	addwfc	___fladd@f2+1,f,c
  5927  0019F4  223D               	addwfc	___fladd@f2+2,f,c
  5928  0019F6  223E               	addwfc	___fladd@f2+3,f,c
  5929  0019F8  0E01               	movlw	1
  5930  0019FA  6E40               	movwf	___fladd@sign,c
  5931  0019FC                     l3065:
  5932  0019FC  C03B  F003         	movff	___fladd@f2,___flpack@arg
  5933  001A00  C03C  F004         	movff	___fladd@f2+1,___flpack@arg+1
  5934  001A04  C03D  F005         	movff	___fladd@f2+2,___flpack@arg+2
  5935  001A08  C03E  F006         	movff	___fladd@f2+3,___flpack@arg+3
  5936  001A0C  C042  F007         	movff	___fladd@exp1,___flpack@exp
  5937  001A10  C040  F008         	movff	___fladd@sign,___flpack@sign
  5938  001A14  ECF4  F00E         	call	___flpack	;wreg free
  5939  001A18  C003  F037         	movff	?___flpack,?___fladd
  5940  001A1C  C004  F038         	movff	?___flpack+1,?___fladd+1
  5941  001A20  C005  F039         	movff	?___flpack+2,?___fladd+2
  5942  001A24  C006  F03A         	movff	?___flpack+3,?___fladd+3
  5943  001A28                     l610:
  5944  001A28  0012               	return		;funcret
  5945  001A2A                     __end_of___fladd:
  5946                           	opt stack 0
  5947                           tosu	equ	0xFFF
  5948                           tosh	equ	0xFFE
  5949                           tosl	equ	0xFFD
  5950                           pclath	equ	0xFFA
  5951                           tblptru	equ	0xFF8
  5952                           tblptrh	equ	0xFF7
  5953                           tblptrl	equ	0xFF6
  5954                           tablat	equ	0xFF5
  5955                           prodh	equ	0xFF4
  5956                           prodl	equ	0xFF3
  5957                           intcon	equ	0xFF2
  5958                           intcon2	equ	0xFF1
  5959                           postinc0	equ	0xFEE
  5960                           wreg	equ	0xFE8
  5961                           indf2	equ	0xFDF
  5962                           postinc2	equ	0xFDE
  5963                           postdec2	equ	0xFDD
  5964                           fsr2h	equ	0xFDA
  5965                           fsr2l	equ	0xFD9
  5966                           status	equ	0xFD8
  5967                           
  5968 ;; *************** function ___awtofl *****************
  5969 ;; Defined at:
  5970 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtofl.c"
  5971 ;; Parameters:    Size  Location     Type
  5972 ;;  c               2   12[COMRAM] int 
  5973 ;; Auto vars:     Size  Location     Type
  5974 ;;  f1              4    0        int 
  5975 ;;  sign            1   16[COMRAM] unsigned char 
  5976 ;; Return value:  Size  Location     Type
  5977 ;;                  4   12[COMRAM] unsigned char 
  5978 ;; Registers used:
  5979 ;;		wreg, status,2, status,0, cstack
  5980 ;; Tracked objects:
  5981 ;;		On entry : 0/0
  5982 ;;		On exit  : 0/0
  5983 ;;		Unchanged: 0/0
  5984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5985 ;;      Params:         4       0       0       0       0       0       0       0       0
  5986 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5987 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5988 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5989 ;;Total ram usage:        5 bytes
  5990 ;; Hardware stack levels used:    1
  5991 ;; Hardware stack levels required when called:    2
  5992 ;; This function calls:
  5993 ;;		___flpack
  5994 ;; This function is called by:
  5995 ;;		_format_double
  5996 ;;		_log
  5997 ;;		_exp
  5998 ;; This function uses a non-reentrant model
  5999 ;;
  6000                           
  6001                           	psect	text32
  6002  002698                     __ptext32:
  6003                           	opt stack 0
  6004  002698                     ___awtofl:
  6005                           	opt stack 24
  6006                           
  6007                           ;incstack = 0
  6008  002698  6A11               	clrf	___awtofl@sign,c
  6009  00269A  AE0E               	btfss	___awtofl@c+1,7,c
  6010  00269C  D005               	goto	l3237
  6011  00269E  6C0D               	negf	___awtofl@c,c
  6012  0026A0  1E0E               	comf	___awtofl@c+1,f,c
  6013  0026A2  B0D8               	btfsc	status,0,c
  6014  0026A4  2A0E               	incf	___awtofl@c+1,f,c
  6015  0026A6  2A11               	incf	___awtofl@sign,f,c
  6016  0026A8                     l3237:
  6017  0026A8  C00D  F003         	movff	___awtofl@c,___flpack@arg
  6018  0026AC  C00E  F004         	movff	___awtofl@c+1,___flpack@arg+1
  6019  0026B0  6A05               	clrf	___flpack@arg+2,c
  6020  0026B2  6A06               	clrf	___flpack@arg+3,c
  6021  0026B4  0E96               	movlw	150
  6022  0026B6  6E07               	movwf	___flpack@exp,c
  6023  0026B8  C011  F008         	movff	___awtofl@sign,___flpack@sign
  6024  0026BC  ECF4  F00E         	call	___flpack	;wreg free
  6025  0026C0  C003  F00D         	movff	?___flpack,?___awtofl
  6026  0026C4  C004  F00E         	movff	?___flpack+1,?___awtofl+1
  6027  0026C8  C005  F00F         	movff	?___flpack+2,?___awtofl+2
  6028  0026CC  C006  F010         	movff	?___flpack+3,?___awtofl+3
  6029  0026D0  0012               	return		;funcret
  6030  0026D2                     __end_of___awtofl:
  6031                           	opt stack 0
  6032                           tosu	equ	0xFFF
  6033                           tosh	equ	0xFFE
  6034                           tosl	equ	0xFFD
  6035                           pclath	equ	0xFFA
  6036                           tblptru	equ	0xFF8
  6037                           tblptrh	equ	0xFF7
  6038                           tblptrl	equ	0xFF6
  6039                           tablat	equ	0xFF5
  6040                           prodh	equ	0xFF4
  6041                           prodl	equ	0xFF3
  6042                           intcon	equ	0xFF2
  6043                           intcon2	equ	0xFF1
  6044                           postinc0	equ	0xFEE
  6045                           wreg	equ	0xFE8
  6046                           indf2	equ	0xFDF
  6047                           postinc2	equ	0xFDE
  6048                           postdec2	equ	0xFDD
  6049                           fsr2h	equ	0xFDA
  6050                           fsr2l	equ	0xFD9
  6051                           status	equ	0xFD8
  6052                           
  6053 ;; *************** function _indicator *****************
  6054 ;; Defined at:
  6055 ;;		line 469 in file "../../../src/print.c"
  6056 ;; Parameters:    Size  Location     Type
  6057 ;;  indicate        1    wreg     unsigned char 
  6058 ;; Auto vars:     Size  Location     Type
  6059 ;;  indicate        1    0[COMRAM] unsigned char 
  6060 ;; Return value:  Size  Location     Type
  6061 ;;		None               void
  6062 ;; Registers used:
  6063 ;;		wreg
  6064 ;; Tracked objects:
  6065 ;;		On entry : F/0
  6066 ;;		On exit  : F/0
  6067 ;;		Unchanged: F/0
  6068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6069 ;;      Params:         0       0       0       0       0       0       0       0       0
  6070 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6071 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6072 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6073 ;;Total ram usage:        0 bytes
  6074 ;; Hardware stack levels used:    1
  6075 ;; Hardware stack levels required when called:    1
  6076 ;; This function calls:
  6077 ;;		Nothing
  6078 ;; This function is called by:
  6079 ;;		_main
  6080 ;; This function uses a non-reentrant model
  6081 ;;
  6082                           
  6083                           	psect	text33
  6084  0027CC                     __ptext33:
  6085                           	opt stack 0
  6086  0027CC                     _indicator:
  6087                           	opt stack 29
  6088                           
  6089                           ; BSR set to: 0
  6090                           
  6091                           ;incstack = 0
  6092  0027CC  0012               	return		;funcret
  6093  0027CE                     __end_of_indicator:
  6094                           	opt stack 0
  6095                           tosu	equ	0xFFF
  6096                           tosh	equ	0xFFE
  6097                           tosl	equ	0xFFD
  6098                           pclath	equ	0xFFA
  6099                           tblptru	equ	0xFF8
  6100                           tblptrh	equ	0xFF7
  6101                           tblptrl	equ	0xFF6
  6102                           tablat	equ	0xFF5
  6103                           prodh	equ	0xFF4
  6104                           prodl	equ	0xFF3
  6105                           intcon	equ	0xFF2
  6106                           intcon2	equ	0xFF1
  6107                           postinc0	equ	0xFEE
  6108                           wreg	equ	0xFE8
  6109                           indf2	equ	0xFDF
  6110                           postinc2	equ	0xFDE
  6111                           postdec2	equ	0xFDD
  6112                           fsr2h	equ	0xFDA
  6113                           fsr2l	equ	0xFD9
  6114                           status	equ	0xFD8
  6115                           
  6116 ;; *************** function _calibrate *****************
  6117 ;; Defined at:
  6118 ;;		line 346 in file "../../../src/LC-meter.c"
  6119 ;; Parameters:    Size  Location     Type
  6120 ;;		None
  6121 ;; Auto vars:     Size  Location     Type
  6122 ;;  i               1    0        unsigned char 
  6123 ;; Return value:  Size  Location     Type
  6124 ;;		None               void
  6125 ;; Registers used:
  6126 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6127 ;; Tracked objects:
  6128 ;;		On entry : F/0
  6129 ;;		On exit  : 0/0
  6130 ;;		Unchanged: 0/0
  6131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6132 ;;      Params:         0       0       0       0       0       0       0       0       0
  6133 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6134 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6135 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6136 ;;Total ram usage:        0 bytes
  6137 ;; Hardware stack levels used:    1
  6138 ;; Hardware stack levels required when called:    3
  6139 ;; This function calls:
  6140 ;;		___lwtofl
  6141 ;;		_delay10ms
  6142 ;;		_measure_freq
  6143 ;;		_ser_puts
  6144 ;; This function is called by:
  6145 ;;		_main
  6146 ;; This function uses a non-reentrant model
  6147 ;;
  6148                           
  6149                           	psect	text34
  6150  0020D2                     __ptext34:
  6151                           	opt stack 0
  6152  0020D2                     _calibrate:
  6153                           	opt stack 27
  6154                           
  6155                           ; BSR set to: 0
  6156                           ;LC-meter.c: 347: unsigned char i;
  6157                           ;LC-meter.c: 360: PORTC &= ~(1 << 5);
  6158                           
  6159                           ; BSR set to: 0
  6160                           ;incstack = 0
  6161  0020D2  9A82               	bcf	3970,5,c	;volatile
  6162                           
  6163                           ; BSR set to: 0
  6164                           ;LC-meter.c: 362: F1 = (double)measure_freq();
  6165  0020D4  EC55  F011         	call	_measure_freq	;wreg free
  6166  0020D8  C003  F00D         	movff	?_measure_freq,___lwtofl@c
  6167  0020DC  C004  F00E         	movff	?_measure_freq+1,___lwtofl@c+1
  6168  0020E0  EC80  F013         	call	___lwtofl	;wreg free
  6169  0020E4  C00D  F0EA         	movff	?___lwtofl,_F1
  6170  0020E8  C00E  F0EB         	movff	?___lwtofl+1,_F1+1
  6171  0020EC  C00F  F0EC         	movff	?___lwtofl+2,_F1+2
  6172  0020F0  C010  F0ED         	movff	?___lwtofl+3,_F1+3
  6173                           
  6174                           ;LC-meter.c: 363: delay10ms(50);
  6175  0020F4  6A04               	clrf	delay10ms@period_10ms+1,c
  6176  0020F6  0E32               	movlw	50
  6177  0020F8  6E03               	movwf	delay10ms@period_10ms,c
  6178  0020FA  EC2A  F012         	call	_delay10ms	;wreg free
  6179                           
  6180                           ; BSR set to: 0
  6181                           ;LC-meter.c: 365: F1 = (double)measure_freq();
  6182  0020FE  EC55  F011         	call	_measure_freq	;wreg free
  6183  002102  C003  F00D         	movff	?_measure_freq,___lwtofl@c
  6184  002106  C004  F00E         	movff	?_measure_freq+1,___lwtofl@c+1
  6185  00210A  EC80  F013         	call	___lwtofl	;wreg free
  6186  00210E  C00D  F0EA         	movff	?___lwtofl,_F1
  6187  002112  C00E  F0EB         	movff	?___lwtofl+1,_F1+1
  6188  002116  C00F  F0EC         	movff	?___lwtofl+2,_F1+2
  6189  00211A  C010  F0ED         	movff	?___lwtofl+3,_F1+3
  6190                           
  6191                           ;LC-meter.c: 366: PORTC |= (1 << 5);
  6192  00211E  8A82               	bsf	3970,5,c	;volatile
  6193                           
  6194                           ;LC-meter.c: 368: F2 = (double)measure_freq();
  6195  002120  EC55  F011         	call	_measure_freq	;wreg free
  6196  002124  C003  F00D         	movff	?_measure_freq,___lwtofl@c
  6197  002128  C004  F00E         	movff	?_measure_freq+1,___lwtofl@c+1
  6198  00212C  EC80  F013         	call	___lwtofl	;wreg free
  6199  002130  C00D  F0D1         	movff	?___lwtofl,_F2
  6200  002134  C00E  F0D2         	movff	?___lwtofl+1,_F2+1
  6201  002138  C00F  F0D3         	movff	?___lwtofl+2,_F2+2
  6202  00213C  C010  F0D4         	movff	?___lwtofl+3,_F2+3
  6203                           
  6204                           ;LC-meter.c: 369: delay10ms(50);
  6205  002140  6A04               	clrf	delay10ms@period_10ms+1,c
  6206  002142  0E32               	movlw	50
  6207  002144  6E03               	movwf	delay10ms@period_10ms,c
  6208  002146  EC2A  F012         	call	_delay10ms	;wreg free
  6209                           
  6210                           ;LC-meter.c: 371: F2 = (double)measure_freq();
  6211  00214A  EC55  F011         	call	_measure_freq	;wreg free
  6212  00214E  C003  F00D         	movff	?_measure_freq,___lwtofl@c
  6213  002152  C004  F00E         	movff	?_measure_freq+1,___lwtofl@c+1
  6214  002156  EC80  F013         	call	___lwtofl	;wreg free
  6215  00215A  C00D  F0D1         	movff	?___lwtofl,_F2
  6216  00215E  C00E  F0D2         	movff	?___lwtofl+1,_F2+1
  6217  002162  C00F  F0D3         	movff	?___lwtofl+2,_F2+2
  6218  002166  C010  F0D4         	movff	?___lwtofl+3,_F2+3
  6219                           
  6220                           ;LC-meter.c: 372: PORTC &= ~(1 << 5);
  6221  00216A  9A82               	bcf	3970,5,c	;volatile
  6222                           
  6223                           ;LC-meter.c: 384: ser_puts("\r\n");
  6224  00216C  0E58               	movlw	(STR_1+3)& (0+255)
  6225  00216E  EC95  F013         	call	_ser_puts
  6226  002172  0012               	return		;funcret
  6227  002174                     __end_of_calibrate:
  6228                           	opt stack 0
  6229                           tosu	equ	0xFFF
  6230                           tosh	equ	0xFFE
  6231                           tosl	equ	0xFFD
  6232                           pclath	equ	0xFFA
  6233                           tblptru	equ	0xFF8
  6234                           tblptrh	equ	0xFF7
  6235                           tblptrl	equ	0xFF6
  6236                           tablat	equ	0xFF5
  6237                           prodh	equ	0xFF4
  6238                           prodl	equ	0xFF3
  6239                           intcon	equ	0xFF2
  6240                           intcon2	equ	0xFF1
  6241                           postinc0	equ	0xFEE
  6242                           wreg	equ	0xFE8
  6243                           indf2	equ	0xFDF
  6244                           postinc2	equ	0xFDE
  6245                           postdec2	equ	0xFDD
  6246                           fsr2h	equ	0xFDA
  6247                           fsr2l	equ	0xFD9
  6248                           status	equ	0xFD8
  6249                           
  6250 ;; *************** function _ser_puts *****************
  6251 ;; Defined at:
  6252 ;;		line 92 in file "../../../lib/ser.c"
  6253 ;; Parameters:    Size  Location     Type
  6254 ;;  s               1    wreg     PTR const unsigned char 
  6255 ;;		 -> STR_11(3), STR_10(5), STR_9(3), STR_8(8), 
  6256 ;;		 -> STR_7(6), STR_6(6), STR_5(6), STR_4(5), 
  6257 ;;		 -> STR_3(3), STR_2(3), STR_1(6), 
  6258 ;; Auto vars:     Size  Location     Type
  6259 ;;  s               1    3[COMRAM] PTR const unsigned char 
  6260 ;;		 -> STR_11(3), STR_10(5), STR_9(3), STR_8(8), 
  6261 ;;		 -> STR_7(6), STR_6(6), STR_5(6), STR_4(5), 
  6262 ;;		 -> STR_3(3), STR_2(3), STR_1(6), 
  6263 ;; Return value:  Size  Location     Type
  6264 ;;		None               void
  6265 ;; Registers used:
  6266 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6267 ;; Tracked objects:
  6268 ;;		On entry : 0/0
  6269 ;;		On exit  : 0/0
  6270 ;;		Unchanged: 0/0
  6271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6272 ;;      Params:         0       0       0       0       0       0       0       0       0
  6273 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6274 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6275 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6276 ;;Total ram usage:        1 bytes
  6277 ;; Hardware stack levels used:    1
  6278 ;; Hardware stack levels required when called:    2
  6279 ;; This function calls:
  6280 ;;		_ser_putch
  6281 ;; This function is called by:
  6282 ;;		_main
  6283 ;;		_calibrate
  6284 ;;		_measure_capacitance
  6285 ;; This function uses a non-reentrant model
  6286 ;;
  6287                           
  6288                           	psect	text35
  6289  00272A                     __ptext35:
  6290                           	opt stack 0
  6291  00272A                     _ser_puts:
  6292                           	opt stack 28
  6293                           
  6294                           ;incstack = 0
  6295                           ;ser_puts@s stored from wreg
  6296  00272A  6E04               	movwf	ser_puts@s,c
  6297                           
  6298                           ;ser.c: 93: while(*s) ser_putch(*s++);
  6299  00272C  D009               	goto	l2553
  6300  00272E                     l2549:
  6301  00272E  C004  FFF6         	movff	ser_puts@s,tblptrl
  6302  002732                     	if	1	;There is more than 1 active tblptr byte
  6303  002732  0E08               	movlw	high __smallconst
  6304  002734  6EF7               	movwf	tblptrh,c
  6305  002736                     	endif
  6306  002736                     	if	0	;tblptru may be non-zero
  6307  002736                     	endif
  6308  002736                     	if	0	;tblptru may be non-zero
  6309  002736                     	endif
  6310  002736  0008               	tblrd		*
  6311  002738  50F5               	movf	tablat,w,c
  6312  00273A  ECBB  F013         	call	_ser_putch
  6313  00273E  2A04               	incf	ser_puts@s,f,c
  6314  002740                     l2553:
  6315  002740  C004  FFF6         	movff	ser_puts@s,tblptrl
  6316  002744                     	if	1	;There is more than 1 active tblptr byte
  6317  002744  0E08               	movlw	high __smallconst
  6318  002746  6EF7               	movwf	tblptrh,c
  6319  002748                     	endif
  6320  002748                     	if	0	;tblptru may be non-zero
  6321  002748                     	endif
  6322  002748                     	if	0	;tblptru may be non-zero
  6323  002748                     	endif
  6324  002748  0008               	tblrd		*
  6325  00274A  50F5               	movf	tablat,w,c
  6326  00274C  B4D8               	btfsc	status,2,c
  6327  00274E  0012               	return		;funcret
  6328  002750  D7EE               	goto	l2549
  6329  002752                     __end_of_ser_puts:
  6330                           	opt stack 0
  6331                           tosu	equ	0xFFF
  6332                           tosh	equ	0xFFE
  6333                           tosl	equ	0xFFD
  6334                           pclath	equ	0xFFA
  6335                           tblptru	equ	0xFF8
  6336                           tblptrh	equ	0xFF7
  6337                           tblptrl	equ	0xFF6
  6338                           tablat	equ	0xFF5
  6339                           prodh	equ	0xFF4
  6340                           prodl	equ	0xFF3
  6341                           intcon	equ	0xFF2
  6342                           intcon2	equ	0xFF1
  6343                           postinc0	equ	0xFEE
  6344                           wreg	equ	0xFE8
  6345                           indf2	equ	0xFDF
  6346                           postinc2	equ	0xFDE
  6347                           postdec2	equ	0xFDD
  6348                           fsr2h	equ	0xFDA
  6349                           fsr2l	equ	0xFD9
  6350                           status	equ	0xFD8
  6351                           
  6352 ;; *************** function _measure_freq *****************
  6353 ;; Defined at:
  6354 ;;		line 299 in file "../../../src/LC-meter.c"
  6355 ;; Parameters:    Size  Location     Type
  6356 ;;		None
  6357 ;; Auto vars:     Size  Location     Type
  6358 ;;  i               1    7[COMRAM] unsigned char 
  6359 ;;  count           2    8[COMRAM] unsigned short 
  6360 ;;  prev            1    6[COMRAM] unsigned char 
  6361 ;; Return value:  Size  Location     Type
  6362 ;;                  2    2[COMRAM] unsigned short 
  6363 ;; Registers used:
  6364 ;;		wreg, status,2, status,0
  6365 ;; Tracked objects:
  6366 ;;		On entry : 0/0
  6367 ;;		On exit  : 0/0
  6368 ;;		Unchanged: 0/0
  6369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6370 ;;      Params:         2       0       0       0       0       0       0       0       0
  6371 ;;      Locals:         4       0       0       0       0       0       0       0       0
  6372 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6373 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6374 ;;Total ram usage:        8 bytes
  6375 ;; Hardware stack levels used:    1
  6376 ;; Hardware stack levels required when called:    1
  6377 ;; This function calls:
  6378 ;;		Nothing
  6379 ;; This function is called by:
  6380 ;;		_calibrate
  6381 ;;		_measure_capacitance
  6382 ;;		_measure_inductance
  6383 ;; This function uses a non-reentrant model
  6384 ;;
  6385                           
  6386                           	psect	text36
  6387  0022AA                     __ptext36:
  6388                           	opt stack 0
  6389  0022AA                     _measure_freq:
  6390                           	opt stack 28
  6391                           
  6392                           ;LC-meter.c: 300: unsigned char prev;
  6393                           ;LC-meter.c: 301: unsigned short int count;
  6394                           ;LC-meter.c: 303: TMR0IF = 0;
  6395                           
  6396                           ;incstack = 0
  6397  0022AA  94F2               	bcf	intcon,2,c	;volatile
  6398                           
  6399                           ;LC-meter.c: 305: TRISA &= ~0b00010000;
  6400  0022AC  9892               	bcf	3986,4,c	;volatile
  6401                           
  6402                           ;LC-meter.c: 308: _delay((unsigned long)((20)*(20000000/4000.0)));
  6403  0022AE  0E82               	movlw	130
  6404  0022B0  6E05               	movwf	??_measure_freq& (0+255),c
  6405  0022B2  0EDE               	movlw	222
  6406  0022B4                     u3277:
  6407  0022B4  2EE8               	decfsz	wreg,f,c
  6408  0022B6  D7FE               	goto	u3277
  6409  0022B8  2E05               	decfsz	??_measure_freq& (0+255),f,c
  6410  0022BA  D7FC               	goto	u3277
  6411                           
  6412                           ;LC-meter.c: 310: TMR0 = 0x00;
  6413  0022BC  6AD6               	clrf	4054,c	;volatile
  6414  0022BE  6AD7               	clrf	4055,c	;volatile
  6415                           
  6416                           ;LC-meter.c: 312: for(char i = 0; i < 10; i++) _delay((unsigned long)((10)*(20000000/400
      +                          0.0)));
  6417  0022C0  6A08               	clrf	measure_freq@i,c
  6418  0022C2                     l2609:
  6419  0022C2  0E41               	movlw	65
  6420  0022C4  6E05               	movwf	??_measure_freq& (0+255),c
  6421  0022C6  0EEE               	movlw	238
  6422  0022C8                     u3287:
  6423  0022C8  2EE8               	decfsz	wreg,f,c
  6424  0022CA  D7FE               	goto	u3287
  6425  0022CC  2E05               	decfsz	??_measure_freq& (0+255),f,c
  6426  0022CE  D7FC               	goto	u3287
  6427  0022D0  D000               	nop2	
  6428  0022D2  2A08               	incf	measure_freq@i,f,c
  6429  0022D4  0E09               	movlw	9
  6430  0022D6  6408               	cpfsgt	measure_freq@i,c
  6431  0022D8  D7F4               	goto	l2609
  6432                           
  6433                           ;LC-meter.c: 314: TRISA |= 0b00010000;
  6434  0022DA  8892               	bsf	3986,4,c	;volatile
  6435                           
  6436                           ;LC-meter.c: 316: prev = TMR0;
  6437  0022DC  CFD6 F007          	movff	4054,measure_freq@prev	;volatile
  6438                           
  6439                           ;LC-meter.c: 317: count = 0;
  6440  0022E0  6A09               	clrf	measure_freq@count,c
  6441  0022E2  6A0A               	clrf	measure_freq@count+1,c
  6442  0022E4                     l2619:
  6443                           
  6444                           ;LC-meter.c: 321: T0SE = 1;
  6445  0022E4  88D5               	bsf	4053,4,c	;volatile
  6446                           
  6447                           ;LC-meter.c: 322: __nop();
  6448  0022E6  F000               	nop	
  6449                           
  6450                           ;LC-meter.c: 323: __nop();
  6451  0022E8  F000               	nop	
  6452                           
  6453                           ;LC-meter.c: 325: T0SE = 0;
  6454  0022EA  98D5               	bcf	4053,4,c	;volatile
  6455                           
  6456                           ;LC-meter.c: 326: __nop();
  6457  0022EC  F000               	nop	
  6458                           
  6459                           ;LC-meter.c: 327: __nop();
  6460  0022EE  F000               	nop	
  6461                           
  6462                           ;LC-meter.c: 328: count++;
  6463  0022F0  4A09               	infsnz	measure_freq@count,f,c
  6464  0022F2  2A0A               	incf	measure_freq@count+1,f,c
  6465                           
  6466                           ;LC-meter.c: 329: } while(prev == TMR0 && count <= 255);
  6467  0022F4  5007               	movf	measure_freq@prev,w,c
  6468  0022F6  18D6               	xorwf	4054,w,c	;volatile
  6469  0022F8  10D7               	iorwf	4055,w,c	;volatile
  6470  0022FA  E102               	bnz	l2635
  6471  0022FC  040A               	decf	measure_freq@count+1,w,c
  6472  0022FE  E3F2               	bnc	l2619
  6473  002300                     l2635:
  6474                           
  6475                           ;LC-meter.c: 332: count = ((prev << 8) + (256 - count));
  6476  002300  5007               	movf	measure_freq@prev,w,c
  6477  002302  6E06               	movwf	(??_measure_freq+1)& (0+255),c
  6478  002304  6A05               	clrf	??_measure_freq& (0+255),c
  6479  002306  5009               	movf	measure_freq@count,w,c
  6480  002308  5E05               	subwf	??_measure_freq,f,c
  6481  00230A  500A               	movf	measure_freq@count+1,w,c
  6482  00230C  5A06               	subwfb	??_measure_freq+1,f,c
  6483  00230E  0E00               	movlw	0
  6484  002310  2405               	addwf	??_measure_freq,w,c
  6485  002312  6E09               	movwf	measure_freq@count,c
  6486  002314  0E01               	movlw	1
  6487  002316  2006               	addwfc	??_measure_freq+1,w,c
  6488  002318  6E0A               	movwf	measure_freq@count+1,c
  6489                           
  6490                           ;LC-meter.c: 339: return count;
  6491  00231A  C009  F003         	movff	measure_freq@count,?_measure_freq
  6492  00231E  C00A  F004         	movff	measure_freq@count+1,?_measure_freq+1
  6493  002322  0012               	return		;funcret
  6494  002324                     __end_of_measure_freq:
  6495                           	opt stack 0
  6496                           tosu	equ	0xFFF
  6497                           tosh	equ	0xFFE
  6498                           tosl	equ	0xFFD
  6499                           pclath	equ	0xFFA
  6500                           tblptru	equ	0xFF8
  6501                           tblptrh	equ	0xFF7
  6502                           tblptrl	equ	0xFF6
  6503                           tablat	equ	0xFF5
  6504                           prodh	equ	0xFF4
  6505                           prodl	equ	0xFF3
  6506                           intcon	equ	0xFF2
  6507                           intcon2	equ	0xFF1
  6508                           postinc0	equ	0xFEE
  6509                           wreg	equ	0xFE8
  6510                           indf2	equ	0xFDF
  6511                           postinc2	equ	0xFDE
  6512                           postdec2	equ	0xFDD
  6513                           fsr2h	equ	0xFDA
  6514                           fsr2l	equ	0xFD9
  6515                           status	equ	0xFD8
  6516                           
  6517 ;; *************** function _delay10ms *****************
  6518 ;; Defined at:
  6519 ;;		line 532 in file "../../../src/LC-meter.c"
  6520 ;; Parameters:    Size  Location     Type
  6521 ;;  period_10ms     2    2[COMRAM] unsigned short 
  6522 ;; Auto vars:     Size  Location     Type
  6523 ;;  ms              4    6[COMRAM] unsigned long 
  6524 ;;  run             1   10[COMRAM] unsigned char 
  6525 ;; Return value:  Size  Location     Type
  6526 ;;		None               void
  6527 ;; Registers used:
  6528 ;;		wreg, status,2, status,0, prodl, prodh
  6529 ;; Tracked objects:
  6530 ;;		On entry : 0/0
  6531 ;;		On exit  : F/0
  6532 ;;		Unchanged: 0/0
  6533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6534 ;;      Params:         2       0       0       0       0       0       0       0       0
  6535 ;;      Locals:         5       0       0       0       0       0       0       0       0
  6536 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6537 ;;      Totals:         9       0       0       0       0       0       0       0       0
  6538 ;;Total ram usage:        9 bytes
  6539 ;; Hardware stack levels used:    1
  6540 ;; Hardware stack levels required when called:    1
  6541 ;; This function calls:
  6542 ;;		Nothing
  6543 ;; This function is called by:
  6544 ;;		_main
  6545 ;;		_calibrate
  6546 ;; This function uses a non-reentrant model
  6547 ;;
  6548                           
  6549                           	psect	text37
  6550  002454                     __ptext37:
  6551                           	opt stack 0
  6552  002454                     _delay10ms:
  6553                           	opt stack 29
  6554                           
  6555                           ;LC-meter.c: 536: unsigned long int ms;
  6556                           ;LC-meter.c: 537: char run = 1;
  6557                           
  6558                           ;incstack = 0
  6559  002454  0E01               	movlw	1
  6560  002456  6E0B               	movwf	delay10ms@run,c
  6561                           
  6562                           ;LC-meter.c: 539: GIE = 0, ms = msecs, GIE = 1;
  6563  002458  9EF2               	bcf	intcon,7,c	;volatile
  6564  00245A  C0D9  F007         	movff	_msecs,delay10ms@ms	;volatile
  6565  00245E  C0DA  F008         	movff	_msecs+1,delay10ms@ms+1	;volatile
  6566  002462  C0DB  F009         	movff	_msecs+2,delay10ms@ms+2	;volatile
  6567  002466  C0DC  F00A         	movff	_msecs+3,delay10ms@ms+3	;volatile
  6568  00246A  8EF2               	bsf	intcon,7,c	;volatile
  6569                           
  6570                           ;LC-meter.c: 544: ms += period_10ms * 10;
  6571  00246C  0E0A               	movlw	10
  6572  00246E  0203               	mulwf	delay10ms@period_10ms,c
  6573  002470  CFF3 F005          	movff	prodl,??_delay10ms
  6574  002474  CFF4 F006          	movff	prodh,??_delay10ms+1
  6575  002478  0204               	mulwf	delay10ms@period_10ms+1,c
  6576  00247A  50F3               	movf	prodl,w,c
  6577  00247C  2606               	addwf	(??_delay10ms+1)& (0+255),f,c
  6578  00247E  5005               	movf	??_delay10ms,w,c
  6579  002480  2607               	addwf	delay10ms@ms,f,c
  6580  002482  5006               	movf	??_delay10ms+1,w,c
  6581  002484  2208               	addwfc	delay10ms@ms+1,f,c
  6582  002486  0E00               	movlw	0
  6583  002488  2209               	addwfc	delay10ms@ms+2,f,c
  6584  00248A  220A               	addwfc	delay10ms@ms+3,f,c
  6585  00248C                     l2589:
  6586                           
  6587                           ;LC-meter.c: 548: GIE = 0;
  6588  00248C  9EF2               	bcf	intcon,7,c	;volatile
  6589                           
  6590                           ;LC-meter.c: 549: if(ms <= msecs)
  6591  00248E  5007               	movf	delay10ms@ms,w,c
  6592  002490  0100               	movlb	0	; () banked
  6593  002492  5DD9               	subwf	_msecs& (0+255),w,b	;volatile
  6594  002494  5008               	movf	delay10ms@ms+1,w,c
  6595  002496  59DA               	subwfb	(_msecs+1)& (0+255),w,b	;volatile
  6596  002498  5009               	movf	delay10ms@ms+2,w,c
  6597  00249A  59DB               	subwfb	(_msecs+2)& (0+255),w,b	;volatile
  6598  00249C  500A               	movf	delay10ms@ms+3,w,c
  6599  00249E  59DC               	subwfb	(_msecs+3)& (0+255),w,b	;volatile
  6600  0024A0  B0D8               	btfsc	status,0,c
  6601                           
  6602                           ; BSR set to: 0
  6603                           ;LC-meter.c: 550: run = 0;
  6604  0024A2  6A0B               	clrf	delay10ms@run,c
  6605                           
  6606                           ; BSR set to: 0
  6607                           ;LC-meter.c: 551: GIE = 1;
  6608  0024A4  8EF2               	bsf	intcon,7,c	;volatile
  6609                           
  6610                           ; BSR set to: 0
  6611                           ;LC-meter.c: 552: } while(run);
  6612  0024A6  500B               	movf	delay10ms@run,w,c
  6613  0024A8  B4D8               	btfsc	status,2,c
  6614                           
  6615                           ; BSR set to: 0
  6616  0024AA  0012               	return		;funcret
  6617  0024AC  D7EF               	goto	l2589
  6618  0024AE                     __end_of_delay10ms:
  6619                           	opt stack 0
  6620                           tosu	equ	0xFFF
  6621                           tosh	equ	0xFFE
  6622                           tosl	equ	0xFFD
  6623                           pclath	equ	0xFFA
  6624                           tblptru	equ	0xFF8
  6625                           tblptrh	equ	0xFF7
  6626                           tblptrl	equ	0xFF6
  6627                           tablat	equ	0xFF5
  6628                           prodh	equ	0xFF4
  6629                           prodl	equ	0xFF3
  6630                           intcon	equ	0xFF2
  6631                           intcon2	equ	0xFF1
  6632                           postinc0	equ	0xFEE
  6633                           wreg	equ	0xFE8
  6634                           indf2	equ	0xFDF
  6635                           postinc2	equ	0xFDE
  6636                           postdec2	equ	0xFDD
  6637                           fsr2h	equ	0xFDA
  6638                           fsr2l	equ	0xFD9
  6639                           status	equ	0xFD8
  6640                           
  6641 ;; *************** function ___lwtofl *****************
  6642 ;; Defined at:
  6643 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtofl.c"
  6644 ;; Parameters:    Size  Location     Type
  6645 ;;  c               2   12[COMRAM] unsigned int 
  6646 ;; Auto vars:     Size  Location     Type
  6647 ;;		None
  6648 ;; Return value:  Size  Location     Type
  6649 ;;                  4   12[COMRAM] unsigned int 
  6650 ;; Registers used:
  6651 ;;		wreg, status,2, status,0, cstack
  6652 ;; Tracked objects:
  6653 ;;		On entry : 0/0
  6654 ;;		On exit  : 0/0
  6655 ;;		Unchanged: 0/0
  6656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6657 ;;      Params:         4       0       0       0       0       0       0       0       0
  6658 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6659 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6660 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6661 ;;Total ram usage:        4 bytes
  6662 ;; Hardware stack levels used:    1
  6663 ;; Hardware stack levels required when called:    2
  6664 ;; This function calls:
  6665 ;;		___flpack
  6666 ;; This function is called by:
  6667 ;;		_calibrate
  6668 ;;		_measure_capacitance
  6669 ;;		_measure_inductance
  6670 ;; This function uses a non-reentrant model
  6671 ;;
  6672                           
  6673                           	psect	text38
  6674  002700                     __ptext38:
  6675                           	opt stack 0
  6676  002700                     ___lwtofl:
  6677                           	opt stack 27
  6678                           
  6679                           ; BSR set to: 0
  6680                           ;incstack = 0
  6681  002700  C00D  F003         	movff	___lwtofl@c,___flpack@arg
  6682  002704  C00E  F004         	movff	___lwtofl@c+1,___flpack@arg+1
  6683  002708  6A05               	clrf	___flpack@arg+2,c
  6684  00270A  6A06               	clrf	___flpack@arg+3,c
  6685  00270C  0E96               	movlw	150
  6686  00270E  6E07               	movwf	___flpack@exp,c
  6687  002710  0E00               	movlw	0
  6688  002712  6E08               	movwf	___flpack@sign,c
  6689  002714  ECF4  F00E         	call	___flpack	;wreg free
  6690  002718  C003  F00D         	movff	?___flpack,?___lwtofl
  6691  00271C  C004  F00E         	movff	?___flpack+1,?___lwtofl+1
  6692  002720  C005  F00F         	movff	?___flpack+2,?___lwtofl+2
  6693  002724  C006  F010         	movff	?___flpack+3,?___lwtofl+3
  6694  002728  0012               	return		;funcret
  6695  00272A                     __end_of___lwtofl:
  6696                           	opt stack 0
  6697                           tosu	equ	0xFFF
  6698                           tosh	equ	0xFFE
  6699                           tosl	equ	0xFFD
  6700                           pclath	equ	0xFFA
  6701                           tblptru	equ	0xFF8
  6702                           tblptrh	equ	0xFF7
  6703                           tblptrl	equ	0xFF6
  6704                           tablat	equ	0xFF5
  6705                           prodh	equ	0xFF4
  6706                           prodl	equ	0xFF3
  6707                           intcon	equ	0xFF2
  6708                           intcon2	equ	0xFF1
  6709                           postinc0	equ	0xFEE
  6710                           wreg	equ	0xFE8
  6711                           indf2	equ	0xFDF
  6712                           postinc2	equ	0xFDE
  6713                           postdec2	equ	0xFDD
  6714                           fsr2h	equ	0xFDA
  6715                           fsr2l	equ	0xFD9
  6716                           status	equ	0xFD8
  6717                           
  6718 ;; *************** function ___flpack *****************
  6719 ;; Defined at:
  6720 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\double.c"
  6721 ;; Parameters:    Size  Location     Type
  6722 ;;  arg             4    2[COMRAM] unsigned long 
  6723 ;;  exp             1    6[COMRAM] unsigned char 
  6724 ;;  sign            1    7[COMRAM] unsigned char 
  6725 ;; Auto vars:     Size  Location     Type
  6726 ;;		None
  6727 ;; Return value:  Size  Location     Type
  6728 ;;                  4    2[COMRAM] unsigned char 
  6729 ;; Registers used:
  6730 ;;		wreg, status,2, status,0
  6731 ;; Tracked objects:
  6732 ;;		On entry : 0/0
  6733 ;;		On exit  : 0/0
  6734 ;;		Unchanged: 0/0
  6735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6736 ;;      Params:         6       0       0       0       0       0       0       0       0
  6737 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6738 ;;      Temps:          4       0       0       0       0       0       0       0       0
  6739 ;;      Totals:        10       0       0       0       0       0       0       0       0
  6740 ;;Total ram usage:       10 bytes
  6741 ;; Hardware stack levels used:    1
  6742 ;; Hardware stack levels required when called:    1
  6743 ;; This function calls:
  6744 ;;		Nothing
  6745 ;; This function is called by:
  6746 ;;		___altofl
  6747 ;;		___awtofl
  6748 ;;		___fladd
  6749 ;;		___fldiv
  6750 ;;		___flmul
  6751 ;;		___lltofl
  6752 ;;		___lwtofl
  6753 ;; This function uses a non-reentrant model
  6754 ;;
  6755                           
  6756                           	psect	text39
  6757  001DE8                     __ptext39:
  6758                           	opt stack 0
  6759  001DE8                     ___flpack:
  6760                           	opt stack 27
  6761                           
  6762                           ;incstack = 0
  6763  001DE8  5007               	movf	___flpack@exp,w,c
  6764  001DEA  E005               	bz	l588
  6765  001DEC  5003               	movf	___flpack@arg,w,c
  6766  001DEE  1004               	iorwf	___flpack@arg+1,w,c
  6767  001DF0  1005               	iorwf	___flpack@arg+2,w,c
  6768  001DF2  1006               	iorwf	___flpack@arg+3,w,c
  6769  001DF4  E10B               	bnz	l2967
  6770  001DF6                     l588:
  6771  001DF6  6A03               	clrf	?___flpack,c
  6772  001DF8  6A04               	clrf	?___flpack+1,c
  6773  001DFA  6A05               	clrf	?___flpack+2,c
  6774  001DFC  6A06               	clrf	?___flpack+3,c
  6775  001DFE  D056               	goto	l589
  6776  001E00                     l2965:
  6777  001E00  2A07               	incf	___flpack@exp,f,c
  6778  001E02  90D8               	bcf	status,0,c
  6779  001E04  3206               	rrcf	___flpack@arg+3,f,c
  6780  001E06  3205               	rrcf	___flpack@arg+2,f,c
  6781  001E08  3204               	rrcf	___flpack@arg+1,f,c
  6782  001E0A  3203               	rrcf	___flpack@arg,f,c
  6783  001E0C                     l2967:
  6784  001E0C  6A09               	clrf	??___flpack& (0+255),c
  6785  001E0E  6A0A               	clrf	(??___flpack+1)& (0+255),c
  6786  001E10  6A0B               	clrf	(??___flpack+2)& (0+255),c
  6787  001E12  0EFE               	movlw	254
  6788  001E14  1406               	andwf	___flpack@arg+3,w,c
  6789  001E16  6E0C               	movwf	(??___flpack+3)& (0+255),c
  6790  001E18  5009               	movf	??___flpack,w,c
  6791  001E1A  100A               	iorwf	??___flpack+1,w,c
  6792  001E1C  100B               	iorwf	??___flpack+2,w,c
  6793  001E1E  100C               	iorwf	??___flpack+3,w,c
  6794  001E20  E00C               	bz	l593
  6795  001E22  D7EE               	goto	l2965
  6796  001E24                     l2969:
  6797  001E24  2A07               	incf	___flpack@exp,f,c
  6798  001E26  2A03               	incf	___flpack@arg,f,c
  6799  001E28  0E00               	movlw	0
  6800  001E2A  2204               	addwfc	___flpack@arg+1,f,c
  6801  001E2C  2205               	addwfc	___flpack@arg+2,f,c
  6802  001E2E  2206               	addwfc	___flpack@arg+3,f,c
  6803  001E30  90D8               	bcf	status,0,c
  6804  001E32  3206               	rrcf	___flpack@arg+3,f,c
  6805  001E34  3205               	rrcf	___flpack@arg+2,f,c
  6806  001E36  3204               	rrcf	___flpack@arg+1,f,c
  6807  001E38  3203               	rrcf	___flpack@arg,f,c
  6808  001E3A                     l593:
  6809  001E3A  6A09               	clrf	??___flpack& (0+255),c
  6810  001E3C  6A0A               	clrf	(??___flpack+1)& (0+255),c
  6811  001E3E  6A0B               	clrf	(??___flpack+2)& (0+255),c
  6812  001E40  5006               	movf	___flpack@arg+3,w,c
  6813  001E42  6E0C               	movwf	(??___flpack+3)& (0+255),c
  6814  001E44  5009               	movf	??___flpack,w,c
  6815  001E46  100A               	iorwf	??___flpack+1,w,c
  6816  001E48  100B               	iorwf	??___flpack+2,w,c
  6817  001E4A  100C               	iorwf	??___flpack+3,w,c
  6818  001E4C  E007               	bz	l2977
  6819  001E4E  D7EA               	goto	l2969
  6820  001E50                     l2975:
  6821  001E50  0607               	decf	___flpack@exp,f,c
  6822  001E52  90D8               	bcf	status,0,c
  6823  001E54  3603               	rlcf	___flpack@arg,f,c
  6824  001E56  3604               	rlcf	___flpack@arg+1,f,c
  6825  001E58  3605               	rlcf	___flpack@arg+2,f,c
  6826  001E5A  3606               	rlcf	___flpack@arg+3,f,c
  6827  001E5C                     l2977:
  6828  001E5C  BE05               	btfsc	___flpack@arg+2,7,c
  6829  001E5E  D003               	goto	l600
  6830  001E60  0E02               	movlw	2
  6831  001E62  6007               	cpfslt	___flpack@exp,c
  6832  001E64  D7F5               	goto	l2975
  6833  001E66                     l600:
  6834  001E66  B007               	btfsc	___flpack@exp,0,c
  6835  001E68  D002               	goto	l601
  6836  001E6A  0E7F               	movlw	127
  6837  001E6C  1605               	andwf	___flpack@arg+2,f,c
  6838  001E6E                     l601:
  6839  001E6E  90D8               	bcf	status,0,c
  6840  001E70  3207               	rrcf	___flpack@exp,f,c
  6841  001E72  C007  F009         	movff	___flpack@exp,??___flpack
  6842  001E76  6A0A               	clrf	(??___flpack+1)& (0+255),c
  6843  001E78  6A0B               	clrf	(??___flpack+2)& (0+255),c
  6844  001E7A  6A0C               	clrf	(??___flpack+3)& (0+255),c
  6845  001E7C  C009  F00C         	movff	??___flpack,??___flpack+3
  6846  001E80  6A0B               	clrf	??___flpack+2,c
  6847  001E82  6A0A               	clrf	??___flpack+1,c
  6848  001E84  6A09               	clrf	??___flpack,c
  6849  001E86  5009               	movf	??___flpack,w,c
  6850  001E88  1203               	iorwf	___flpack@arg,f,c
  6851  001E8A  500A               	movf	??___flpack+1,w,c
  6852  001E8C  1204               	iorwf	___flpack@arg+1,f,c
  6853  001E8E  500B               	movf	??___flpack+2,w,c
  6854  001E90  1205               	iorwf	___flpack@arg+2,f,c
  6855  001E92  500C               	movf	??___flpack+3,w,c
  6856  001E94  1206               	iorwf	___flpack@arg+3,f,c
  6857  001E96  5008               	movf	___flpack@sign,w,c
  6858  001E98  A4D8               	btfss	status,2,c
  6859  001E9A  8E06               	bsf	___flpack@arg+3,7,c
  6860  001E9C  C003  F003         	movff	___flpack@arg,?___flpack
  6861  001EA0  C004  F004         	movff	___flpack@arg+1,?___flpack+1
  6862  001EA4  C005  F005         	movff	___flpack@arg+2,?___flpack+2
  6863  001EA8  C006  F006         	movff	___flpack@arg+3,?___flpack+3
  6864  001EAC                     l589:
  6865  001EAC  0012               	return		;funcret
  6866  001EAE                     __end_of___flpack:
  6867                           	opt stack 0
  6868                           tosu	equ	0xFFF
  6869                           tosh	equ	0xFFE
  6870                           tosl	equ	0xFFD
  6871                           pclath	equ	0xFFA
  6872                           tblptru	equ	0xFF8
  6873                           tblptrh	equ	0xFF7
  6874                           tblptrl	equ	0xFF6
  6875                           tablat	equ	0xFF5
  6876                           prodh	equ	0xFF4
  6877                           prodl	equ	0xFF3
  6878                           intcon	equ	0xFF2
  6879                           intcon2	equ	0xFF1
  6880                           postinc0	equ	0xFEE
  6881                           wreg	equ	0xFE8
  6882                           indf2	equ	0xFDF
  6883                           postinc2	equ	0xFDE
  6884                           postdec2	equ	0xFDD
  6885                           fsr2h	equ	0xFDA
  6886                           fsr2l	equ	0xFD9
  6887                           status	equ	0xFD8
  6888                           
  6889 ;; *************** function _isr *****************
  6890 ;; Defined at:
  6891 ;;		line 79 in file "../../../src/LC-meter.c"
  6892 ;; Parameters:    Size  Location     Type
  6893 ;;		None
  6894 ;; Auto vars:     Size  Location     Type
  6895 ;;		None
  6896 ;; Return value:  Size  Location     Type
  6897 ;;                  2  295[None  ] int 
  6898 ;; Registers used:
  6899 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6900 ;; Tracked objects:
  6901 ;;		On entry : 0/0
  6902 ;;		On exit  : 0/0
  6903 ;;		Unchanged: 0/0
  6904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6905 ;;      Params:         0       0       0       0       0       0       0       0       0
  6906 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6907 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6908 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6909 ;;Total ram usage:        2 bytes
  6910 ;; Hardware stack levels used:    1
  6911 ;; This function calls:
  6912 ;;		Nothing
  6913 ;; This function is called by:
  6914 ;;		Interrupt level 2
  6915 ;; This function uses a non-reentrant model
  6916 ;;
  6917                           
  6918                           	psect	intcode
  6919  000008                     __pintcode:
  6920                           	opt stack 0
  6921  000008                     _isr:
  6922                           	opt stack 23
  6923                           
  6924                           ;incstack = 0
  6925  000008  CFD9 F001          	movff	fsr2l,??_isr
  6926  00000C  CFDA F002          	movff	fsr2h,??_isr+1
  6927  000010  ED57  F00F         	call	int_func,f	;refresh shadow registers
  6928                           tosu	equ	0xFFF
  6929                           tosh	equ	0xFFE
  6930                           tosl	equ	0xFFD
  6931                           pclath	equ	0xFFA
  6932                           tblptru	equ	0xFF8
  6933                           tblptrh	equ	0xFF7
  6934                           tblptrl	equ	0xFF6
  6935                           tablat	equ	0xFF5
  6936                           prodh	equ	0xFF4
  6937                           prodl	equ	0xFF3
  6938                           intcon	equ	0xFF2
  6939                           intcon2	equ	0xFF1
  6940                           postinc0	equ	0xFEE
  6941                           wreg	equ	0xFE8
  6942                           indf2	equ	0xFDF
  6943                           postinc2	equ	0xFDE
  6944                           postdec2	equ	0xFDD
  6945                           fsr2h	equ	0xFDA
  6946                           fsr2l	equ	0xFD9
  6947                           status	equ	0xFD8
  6948                           
  6949                           	psect	intcode_body
  6950  001EAE                     __pintcode_body:
  6951                           	opt stack 23
  6952  001EAE                     int_func:
  6953                           	opt stack 23
  6954  001EAE  0006               	pop		; remove dummy address from shadow register refresh
  6955                           
  6956                           ;LC-meter.c: 81: if(TMR2IF) {
  6957  001EB0  A29E               	btfss	3998,1,c	;volatile
  6958  001EB2  D035               	goto	i2l2867
  6959                           
  6960                           ;LC-meter.c: 83: bres += 256;
  6961  001EB4  0100               	movlb	0	; () banked
  6962  001EB6  2BF3               	incf	(_bres+1)& (0+255),f,b	;volatile
  6963                           
  6964                           ;LC-meter.c: 85: if(bres >= 5000) {
  6965  001EB8  0E88               	movlw	136
  6966  001EBA  5DF2               	subwf	_bres& (0+255),w,b	;volatile
  6967  001EBC  0E13               	movlw	19
  6968  001EBE  59F3               	subwfb	(_bres+1)& (0+255),w,b	;volatile
  6969  001EC0  E32D               	bnc	i2l2865
  6970                           
  6971                           ; BSR set to: 0
  6972                           ;LC-meter.c: 86: bres -= 5000;
  6973  001EC2  0E88               	movlw	136
  6974  001EC4  5FF2               	subwf	_bres& (0+255),f,b	;volatile
  6975  001EC6  0E13               	movlw	19
  6976  001EC8  5BF3               	subwfb	(_bres+1)& (0+255),f,b	;volatile
  6977                           
  6978                           ; BSR set to: 0
  6979                           ;LC-meter.c: 87: msecpart++;
  6980  001ECA  4BF4               	infsnz	_msecpart& (0+255),f,b	;volatile
  6981  001ECC  2BF5               	incf	(_msecpart+1)& (0+255),f,b	;volatile
  6982                           
  6983                           ; BSR set to: 0
  6984                           ;LC-meter.c: 88: msecs++;
  6985  001ECE  2BD9               	incf	_msecs& (0+255),f,b	;volatile
  6986  001ED0  0E00               	movlw	0
  6987  001ED2  23DA               	addwfc	(_msecs+1)& (0+255),f,b	;volatile
  6988  001ED4  23DB               	addwfc	(_msecs+2)& (0+255),f,b	;volatile
  6989  001ED6  23DC               	addwfc	(_msecs+3)& (0+255),f,b	;volatile
  6990                           
  6991                           ; BSR set to: 0
  6992                           ;LC-meter.c: 90: RC1 = (((blink > 200)) == 0);
  6993  001ED8  51E6               	movf	(_blink+1)& (0+255),w,b
  6994  001EDA  E105               	bnz	i2u239_40
  6995  001EDC  0EC9               	movlw	201
  6996  001EDE  5DE5               	subwf	_blink& (0+255),w,b
  6997  001EE0  E202               	bc	i2u239_40
  6998  001EE2  8282               	bsf	3970,1,c	;volatile
  6999  001EE4  D001               	goto	i2l2855
  7000  001EE6                     i2u239_40:
  7001  001EE6  9282               	bcf	3970,1,c	;volatile
  7002  001EE8                     i2l2855:
  7003                           
  7004                           ;LC-meter.c: 91: if(blink >= 400)
  7005  001EE8  0E90               	movlw	144
  7006  001EEA  0100               	movlb	0	; () banked
  7007  001EEC  5DE5               	subwf	_blink& (0+255),w,b
  7008  001EEE  0E01               	movlw	1
  7009  001EF0  59E6               	subwfb	(_blink+1)& (0+255),w,b
  7010  001EF2  E304               	bnc	i2l2859
  7011                           
  7012                           ; BSR set to: 0
  7013                           ;LC-meter.c: 92: blink -= 400;
  7014  001EF4  0E90               	movlw	144
  7015  001EF6  5FE5               	subwf	_blink& (0+255),f,b
  7016  001EF8  0E01               	movlw	1
  7017  001EFA  5BE6               	subwfb	(_blink+1)& (0+255),f,b
  7018  001EFC                     i2l2859:
  7019                           
  7020                           ; BSR set to: 0
  7021                           ;LC-meter.c: 93: ++blink;
  7022  001EFC  4BE5               	infsnz	_blink& (0+255),f,b
  7023  001EFE  2BE6               	incf	(_blink+1)& (0+255),f,b
  7024                           
  7025                           ; BSR set to: 0
  7026                           ;LC-meter.c: 96: if(msecpart >= 1000) {
  7027  001F00  0EE8               	movlw	232
  7028  001F02  5DF4               	subwf	_msecpart& (0+255),w,b	;volatile
  7029  001F04  0E03               	movlw	3
  7030  001F06  59F5               	subwfb	(_msecpart+1)& (0+255),w,b	;volatile
  7031  001F08  E309               	bnc	i2l2865
  7032                           
  7033                           ; BSR set to: 0
  7034                           ;LC-meter.c: 98: seconds++;
  7035  001F0A  2BDD               	incf	_seconds& (0+255),f,b	;volatile
  7036  001F0C  0E00               	movlw	0
  7037  001F0E  23DE               	addwfc	(_seconds+1)& (0+255),f,b	;volatile
  7038  001F10  23DF               	addwfc	(_seconds+2)& (0+255),f,b	;volatile
  7039  001F12  23E0               	addwfc	(_seconds+3)& (0+255),f,b	;volatile
  7040                           
  7041                           ;LC-meter.c: 99: msecpart -= 1000;
  7042  001F14  0EE8               	movlw	232
  7043  001F16  5FF4               	subwf	_msecpart& (0+255),f,b	;volatile
  7044  001F18  0E03               	movlw	3
  7045  001F1A  5BF5               	subwfb	(_msecpart+1)& (0+255),f,b	;volatile
  7046  001F1C                     i2l2865:
  7047                           
  7048                           ; BSR set to: 0
  7049                           ;LC-meter.c: 100: }
  7050                           ;LC-meter.c: 101: }
  7051                           ;LC-meter.c: 103: TMR2IF = 0;
  7052  001F1C  929E               	bcf	3998,1,c	;volatile
  7053  001F1E                     i2l2867:
  7054                           
  7055                           ;LC-meter.c: 104: }
  7056                           ;LC-meter.c: 106: if(RCIF) { rxfifo[rxiptr] = RCREG; ser_tmp = (rxiptr + 1) & ((unsigned
      +                           char)16 - 1); if(ser_tmp != rxoptr) rxiptr = ser_tmp; }; if(TXIF && TXIE) { TXREG = txf
      +                          ifo[txoptr]; ++txoptr; txoptr &= ((unsigned char)16 - 1); if(txoptr == txiptr) { TXIE = 
      +                          0; }
  7057  001F1E  AA9E               	btfss	3998,5,c	;volatile
  7058  001F20  D011               	goto	i2l300
  7059  001F22  0E00               	movlw	low _rxfifo
  7060  001F24  0100               	movlb	0	; () banked
  7061  001F26  25E7               	addwf	_rxiptr& (0+255),w,b	;volatile
  7062  001F28  6ED9               	movwf	fsr2l,c
  7063  001F2A  6ADA               	clrf	fsr2h,c
  7064  001F2C  0E01               	movlw	high _rxfifo
  7065  001F2E  22DA               	addwfc	fsr2h,f,c
  7066  001F30  CFAE FFDF          	movff	4014,indf2	;volatile
  7067                           
  7068                           ; BSR set to: 0
  7069  001F34  29E7               	incf	_rxiptr& (0+255),w,b	;volatile
  7070  001F36  0B0F               	andlw	15
  7071  001F38  6FE9               	movwf	_ser_tmp& (0+255),b
  7072                           
  7073                           ; BSR set to: 0
  7074  001F3A  51E8               	movf	_rxoptr& (0+255),w,b	;volatile
  7075  001F3C  19E9               	xorwf	_ser_tmp& (0+255),w,b
  7076  001F3E  A4D8               	btfss	status,2,c
  7077                           
  7078                           ; BSR set to: 0
  7079  001F40  C0E9  F0E7         	movff	_ser_tmp,_rxiptr	;volatile
  7080  001F44                     i2l300:
  7081  001F44  B89E               	btfsc	3998,4,c	;volatile
  7082  001F46  A89D               	btfss	3997,4,c	;volatile
  7083  001F48  D00E               	goto	i2l304
  7084  001F4A  505D               	movf	_txoptr,w,c
  7085  001F4C  0FC1               	addlw	low _txfifo
  7086  001F4E  6ED9               	movwf	fsr2l,c
  7087  001F50  6ADA               	clrf	fsr2h,c
  7088  001F52  50DF               	movf	indf2,w,c
  7089  001F54  6EAD               	movwf	4013,c	;volatile
  7090  001F56  2A5D               	incf	_txoptr,f,c	;volatile
  7091  001F58  0E0F               	movlw	15
  7092  001F5A  165D               	andwf	_txoptr,f,c	;volatile
  7093  001F5C  505C               	movf	_txiptr,w,c	;volatile
  7094  001F5E  185D               	xorwf	_txoptr,w,c	;volatile
  7095  001F60  B4D8               	btfsc	status,2,c
  7096  001F62  989D               	bcf	3997,4,c	;volatile
  7097  001F64  989E               	bcf	3998,4,c	;volatile
  7098  001F66                     i2l304:
  7099  001F66  C002  FFDA         	movff	??_isr+1,fsr2h
  7100  001F6A  C001  FFD9         	movff	??_isr,fsr2l
  7101  001F6E  0011               	retfie		f
  7102  001F70                     __end_of_isr:
  7103                           	opt stack 0
  7104                           tosu	equ	0xFFF
  7105                           tosh	equ	0xFFE
  7106                           tosl	equ	0xFFD
  7107                           pclath	equ	0xFFA
  7108                           tblptru	equ	0xFF8
  7109                           tblptrh	equ	0xFF7
  7110                           tblptrl	equ	0xFF6
  7111                           tablat	equ	0xFF5
  7112                           prodh	equ	0xFF4
  7113                           prodl	equ	0xFF3
  7114                           intcon	equ	0xFF2
  7115                           intcon2	equ	0xFF1
  7116                           postinc0	equ	0xFEE
  7117                           wreg	equ	0xFE8
  7118                           indf2	equ	0xFDF
  7119                           postinc2	equ	0xFDE
  7120                           postdec2	equ	0xFDD
  7121                           fsr2h	equ	0xFDA
  7122                           fsr2l	equ	0xFD9
  7123                           status	equ	0xFD8
  7124                           tosu	equ	0xFFF
  7125                           tosh	equ	0xFFE
  7126                           tosl	equ	0xFFD
  7127                           pclath	equ	0xFFA
  7128                           tblptru	equ	0xFF8
  7129                           tblptrh	equ	0xFF7
  7130                           tblptrl	equ	0xFF6
  7131                           tablat	equ	0xFF5
  7132                           prodh	equ	0xFF4
  7133                           prodl	equ	0xFF3
  7134                           intcon	equ	0xFF2
  7135                           intcon2	equ	0xFF1
  7136                           postinc0	equ	0xFEE
  7137                           wreg	equ	0xFE8
  7138                           indf2	equ	0xFDF
  7139                           postinc2	equ	0xFDE
  7140                           postdec2	equ	0xFDD
  7141                           fsr2h	equ	0xFDA
  7142                           fsr2l	equ	0xFD9
  7143                           status	equ	0xFD8
  7144                           
  7145                           	psect	rparam
  7146  0000                     tosu	equ	0xFFF
  7147                           tosh	equ	0xFFE
  7148                           tosl	equ	0xFFD
  7149                           pclath	equ	0xFFA
  7150                           tblptru	equ	0xFF8
  7151                           tblptrh	equ	0xFF7
  7152                           tblptrl	equ	0xFF6
  7153                           tablat	equ	0xFF5
  7154                           prodh	equ	0xFF4
  7155                           prodl	equ	0xFF3
  7156                           intcon	equ	0xFF2
  7157                           intcon2	equ	0xFF1
  7158                           postinc0	equ	0xFEE
  7159                           wreg	equ	0xFE8
  7160                           indf2	equ	0xFDF
  7161                           postinc2	equ	0xFDE
  7162                           postdec2	equ	0xFDD
  7163                           fsr2h	equ	0xFDA
  7164                           fsr2l	equ	0xFD9
  7165                           status	equ	0xFD8


Data Sizes:
    Strings     42
    Constant    76
    Data        2
    BSS         63
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     91      93
    BANK0           160     97     152
    BANK1           256      0      16
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(1) Largest target is 40
		 -> exp@coeff(CODE[40]), log@coeff(CODE[36]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(BANK0[2]), 

    putchar_ptr	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> output_putch(), format_putchar(), ser_putch(), 

    ser_puts@s	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_11(CODE[3]), STR_10(CODE[5]), STR_9(CODE[3]), STR_8(CODE[8]), 
		 -> STR_7(CODE[6]), STR_6(CODE[6]), STR_5(CODE[6]), STR_4(CODE[5]), 
		 -> STR_3(CODE[3]), STR_2(CODE[3]), STR_1(CODE[6]), 


Critical Paths under _main in COMRAM

    _measure_inductance->___fltol
    _format_xint32->_format_number
    _format_number->___lwdiv
    _ldexp->_eval_poly
    _floor->___altofl
    ___fltol->_log10
    ___altofl->___fltol
    ___flsub->___fladd
    ___fldiv->___flpack
    ___lltofl->___flpack
    _output_putch->_ser_putch
    _log10->_log
    _log->_eval_poly
    _eval_poly->___fladd
    ___flmul->___fldiv
    ___fladd->___flmul
    ___awtofl->___flpack
    _calibrate->___lwtofl
    _ser_puts->_ser_putch
    ___lwtofl->___flpack

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_measure_capacitance
    _measure_inductance->___fltol
    _measure_capacitance->_format_double
    _format_double->_pow
    _pow->_exp
    _exp->_floor
    _floor->___altofl
    ___fltol->_log10
    ___altofl->___fltol

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  202735
                          _calibrate
                          _delay10ms
                          _indicator
                _measure_capacitance
                 _measure_inductance
                           _ser_init
                           _ser_puts
                        _timer2_init
 ---------------------------------------------------------------------------------
 (1) _timer2_init                                          4     4      0     156
                                              2 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _measure_inductance                                  55    55      0   22685
                                             12 BANK0     43    43      0
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___lwtofl
                       _measure_freq
                      _print_reading
                         _print_unit
 ---------------------------------------------------------------------------------
 (1) _measure_capacitance                                 19    19      0  175163
                                             78 BANK0     19    19      0
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___lwtofl
                      _format_double
                      _format_xint32
                       _measure_freq
                      _print_reading
                         _print_unit
                          _ser_putch
                           _ser_puts
 ---------------------------------------------------------------------------------
 (2) _print_unit                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _print_reading                                        2     0      2     106
                                              2 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _format_xint32                                        4     0      4    1919
                                             52 COMRAM     4     0      4
                      _format_number
                     _format_putchar *
                       _output_putch *
                          _ser_putch *
 ---------------------------------------------------------------------------------
 (3) _format_number                                       43    39      4    1490
                                              9 COMRAM    43    39      4
                            ___lwdiv
                            ___lwmod
                     _format_putchar *
                       _output_putch *
                          _ser_putch *
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     265
                                              2 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     268
                                              2 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _format_double                                       20    16      4  150590
                                             58 BANK0     20    16      4
                           ___awtofl
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                              _floor
                     _format_putchar *
                              _log10
                       _output_putch *
                                _pow
                          _ser_putch *
 ---------------------------------------------------------------------------------
 (3) _pow                                                 21    13      8   84209
                                             37 BANK0     21    13      8
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___lltofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _exp                                                 11     7      4   44736
                                             26 BANK0     11     7      4
                           ___awtofl
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (5) _ldexp                                                8     2      6     354
                                             78 COMRAM     8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (5) _floor                                               10     6      4   10260
                                             16 BANK0     10     6      4
                           ___altofl
                            ___fladd
                            ___fldiv (ARG)
                             ___flge
                            ___fltol
                              _frexp
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     882
                                             88 COMRAM     2     2      0
                                              4 BANK0      8     4      4
                            ___fldiv (ARG)
                              _log10 (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                               8     0      8    1594
                                              2 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (6) ___altofl                                             5     1      4    2446
                                             90 COMRAM     1     1      0
                                             12 BANK0      4     0      4
                           ___flpack
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    5269
                                             66 COMRAM     8     0      8
                           ___awtofl (ARG)
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4     204
                                              2 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             15     7      8    4021
                                             12 COMRAM    15     7      8
                           ___flpack
 ---------------------------------------------------------------------------------
 (4) ___lltofl                                             4     0      4    2344
                                             12 COMRAM     4     0      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (3) _output_putch                                         1     1      0      44
                                              3 COMRAM     1     1      0
                          _ser_putch
 ---------------------------------------------------------------------------------
 (3) _log10                                                8     4      4   33887
                                             84 COMRAM     4     0      4
                                              0 BANK0      4     4      0
                            ___flmul
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  6     2      4   26714
                                             78 COMRAM     6     2      4
                           ___awtofl
                            ___fladd
                            ___flmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                7     2      5     582
                                              2 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           12     5      7   11855
                                             66 COMRAM    12     5      7
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             28    20      8    6998
                                             27 COMRAM    27    19      8
                           ___awtofl (ARG)
                            ___fldiv (ARG)
                           ___flpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             12     4      8    4213
                                             54 COMRAM    12     4      8
                           ___awtofl (ARG)
                            ___flmul (ARG)
                           ___flpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awtofl                                             9     5      4    2686
                                             12 COMRAM     5     1      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (3) _format_putchar                                       1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _indicator                                            1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _calibrate                                            1     1      0    3780
                           ___lwtofl
                          _delay10ms
                       _measure_freq
                           _ser_puts
 ---------------------------------------------------------------------------------
 (1) _ser_puts                                             1     1      0     364
                                              3 COMRAM     1     1      0
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _ser_putch                                            1     1      0      22
                                              2 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _measure_freq                                         8     6      2     160
                                              2 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _delay10ms                                            9     7      2     587
                                              2 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4    2669
                                             12 COMRAM     4     0      4
                           ___flpack
                       _measure_freq (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6    2248
                                              2 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calibrate
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
     _delay10ms
     _measure_freq
     _ser_puts
       _ser_putch
   _delay10ms
   _indicator
   _measure_capacitance
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
     _format_double
       ___awtofl
         ___flpack
       ___fldiv
         ___flpack
       ___flge
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       ___flsub
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
       ___fltol
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       _floor
         ___altofl
           ___flpack
           ___fltol (ARG)
             ___fldiv (ARG)
               ___flpack
             _log10 (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flge (ARG)
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
         _frexp (ARG)
       _format_putchar *
       _log10 *
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
       _output_putch *
         _ser_putch
       _pow *
         ___flge
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         ___fltol
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
         ___lltofl
           ___flpack
         _exp
           ___awtofl
             ___flpack
           ___fldiv
             ___flpack
           ___flge
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg
           ___flsub
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           ___fltol
             ___fldiv (ARG)
               ___flpack
             _log10 (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _floor
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 _log10 (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   _log
                     ___awtofl
                       ___flpack
                     ___fladd
                       ___awtofl (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     _eval_poly
                       ___fladd
                         ___awtofl (ARG)
                           ___flpack
                         ___flmul (ARG)
                           ___awtofl (ARG)
                             ___flpack
                           ___fldiv (ARG)
                             ___flpack
                           ___flpack (ARG)
                           _frexp (ARG)
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flmul
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                     _frexp
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flge (ARG)
             ___fltol (ARG)
               ___fldiv (ARG)
                 ___flpack
               _log10 (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _log
                   ___awtofl
                     ___flpack
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___fladd
                       ___awtofl (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                   _frexp
             _frexp (ARG)
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
           _log (ARG)
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
       _ser_putch *
     _format_xint32
       _format_number
         ___lwdiv
         ___lwmod
         _format_putchar *
         _output_putch *
           _ser_putch
         _ser_putch *
       _format_putchar *
       _output_putch *
         _ser_putch
       _ser_putch *
     _measure_freq
     _print_reading
     _print_unit
     _ser_putch
     _ser_puts
       _ser_putch
   _measure_inductance
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
     _measure_freq
     _print_reading
     _print_unit
   _ser_init
   _ser_puts
     _ser_putch
   _timer2_init

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      10       7        6.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     61      98       5       95.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5B      5D       1       97.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     105      20        0.0%
DATA                 0      0     105       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Sep 05 11:51:10 2019

                ___altofl@sign 005B                   ___fldiv@cntr 0019                   ___fldiv@sign 001B  
                           _F1 00EA                             _F2 00D1                             _F3 00D5  
                 ___flpack@arg 0003                   ___flpack@exp 0007                    _putchar_ptr 00F6  
                          l135 24F8                            l161 1DE6                            l600 1E66  
                          l601 1E6E                            l610 1A28                            l700 2210  
                          l613 190C                            l624 19A4                            l720 22A8  
                          l609 18E4                            l641 20D0                            l650 2544  
                          l716 239A                            l656 1586                            l593 1E3A  
                          l649 2526                            l658 1550                            l690 1C2C  
                          l914 2586                            l588 1DF6                            l924 268E  
                          l589 1EAC                            l687 1B74                            l688 1C3C  
                          l952 18C0                            l956 18B0                            l877 1B42  
                          l982 13B8                            l978 13C8                            _GIE 007F97  
                          _RC1 007C11                            _RC4 007C14                            _RC7 007C17  
                          _RX9 007D5E                            _TX9 007D66                            _exp 11B8  
                          _log 1A2A                            _isr 0008                            _pow 173A  
                          tosl 000FFD                            wreg 000FE8                   ___flmul@sign 0032  
                ___flpack@sign 0008                   ___fltol@exp1 005A                           l3015 191E  
                         l3041 1972                           l3009 18F6                           l2233 2778  
                         l2321 27A8                           l3035 1958                           l2163 2510  
                         l3131 2180                           l2331 2242                           l3053 19BA  
                         l3037 1964                           l3029 1938                           l3117 2344  
                         l3133 218A                           l2405 257C                           l2421 2684  
                         l2413 2666                           l3047 1992                           l3039 196C  
                         l3215 2096                           l3207 2068                           l3151 21D4  
                         l2335 224C                           l2415 266E                           l2503 1DE2  
                         l3065 19FC                           l3057 19D0                           l3049 199E  
                         l2169 2542                           l2345 2264                           l3305 137A  
                         l2417 2672                           l3075 13DE                           l3243 1F9C  
                         l3227 25E6                           l3163 2200                           l3155 21DC  
                         l3147 21C4                           l3307 1384                           l3323 1766  
                         l3237 26A8                           l3077 13E8                           l3245 2014  
                         l3157 21E8                           l3181 1B9A                           l2349 2270  
                         l3333 17D4                           l3159 21EC                           l3335 17DE  
                         l2609 22C2                           l2553 2740                           l3257 1A38  
                         l3193 2040                           l3177 1B7E                           l3281 1204  
                         l3329 177E                           l3353 15BA                           l2393 2556  
                         l3521 0CB4                           l3601 1CEE                           l2635 2300  
                         l2619 22E4                           l3259 1A42                           l3195 204A  
                         l3291 1260                           l3275 11D0                           l3339 1808  
                         l3371 1716                           l2395 255E                           l2483 1D44  
                         l3443 0EE8                           l3531 0D28                           l3603 1CF2  
                         l2549 272E                           l3285 122E                           l3365 16EE  
                         l2397 2562                           l2493 1D80                           l2477 1D24  
                         l3525 0CEC                           l2495 1D9C                           l3369 170E  
                         l2497 1DB0                           l3465 10E2                           l3473 1150  
                         l3529 0D22                           l2589 248C                           l3469 111A  
                         l3487 08D6                           l3595 1CDE                           l2965 1E00  
                         l2975 1E50                           l2967 1E0C                           l2977 1E5C  
                         l2969 1E24                           ?_exp 007A                           ?_log 004F  
                         l2999 25AA                           ?_isr 0001                           ?_pow 0085  
                         STR_1 0855                           STR_3 0858                           STR_4 0872  
                         STR_5 085B                           STR_6 0861                           STR_7 0867  
                         STR_8 084D                           STR_9 0858                           _BRGH 007D62  
                         _CREN 007D5C                           _T0CS 007EAD                           _T0SE 007EAC  
                         u3120 17D4                           u2048 1D84                           _CCal 00EE  
                         u2148 23A0                           u2149 23B6                           u2078 1DBC  
                         u2158 23BA                           u2270 24F6                           u2159 23D0  
                         u2255 24CE                           u2256 24D0                           u2265 24E6  
                         u2266 24E8                           u3148 16D4                           u3168 16FA  
                         u3277 22B4                           u2830 21A8                           u2910 1B88  
                         u3287 22C8                           u2835 219E                           _PEIE 007F96  
                         _RCIF 007CF5                           _TMR0 000FD6                           _TMR2 000FCC  
                         _SPEN 007D5F                           _TXIE 007CEC                           _TXIF 007CF4  
                         _TXEN 007D65                           _SYNC 007D64                           _bres 00F2  
                         _main 1C3E                           fsr2h 000FDA                           indf2 000FDF  
                         fsr2l 000FD9                           exp@x 007A                           log@x 004F  
        __size_of_output_putch 000A                           pow@x 0085                           pow@y 0089  
                         prodh 000FF4                           prodl 000FF3     __end_of_measure_inductance 0D8A  
                         start 0014              _format_number$128 0030                   ___param_bank 000010  
                        ??_exp 005C                          ??_log 0053                          ??_isr 0001  
                        ??_pow 005C                  ___fltol@sign1 0059                __end_of___fladd 1A2A  
                        ?_main 0001                __end_of___fldiv 20D2                __end_of___flneg 27BA  
                        STR_10 086D                          STR_11 0858                __end_of___flmul 1588  
              __end_of___flsub 261C                __end_of___fltol 2212                __end_of___lwdiv 2590  
              __end_of___lwmod 2698                          i2l300 1F44                          i2l304 1F66  
                        _RCREG 000FAE                          _SPBRG 000FAF                          _PORTC 000F82  
                        _TRISA 000F92                          _TRISC 000F94                          _SSPEN 007E35  
                        _TXREG 000FAD                  ___awtofl@sign 0011                          _nRBPU 007F8F  
                        _log10 23FA                          _blink 00E5                          _floor 1B44  
                        _ldexp 2212                          _frexp 2324                   _output_putch 27BA  
                        _msecs 00D9                          pclath 000FFA                          tablat 000FF5  
                        pow@yi 0096                format_number@di 0033                          status 000FD8  
              ??_print_reading 0005                    exp@exponent 0082                    ldexp@newexp 0053  
              __initialization 261C                format_putchar@c 0001                    log@exponent 0053  
                 __end_of_main 1D14               format_double@num 009A                  ?_measure_freq 0003  
       __size_of_format_double 01B2                         ??_main 005C            format_double@weight 00A6  
                __activetblptr 000002         __size_of_format_number 00D4         __size_of_format_xint32 005E  
                       ?_log10 0055                         ?_floor 0070                         ?_ldexp 004F  
                       ?_frexp 0003               __end_of___altofl 25D8               __end_of___flpack 1EAE  
             __end_of___awtofl 26D2               __end_of___lltofl 2700                         i2l2855 1EE8  
                       i2l2865 1F1C                         i2l2859 1EFC                         i2l2867 1F1E  
             __end_of___lwtofl 272A                         _TMR0IF 007F92                         _TMR2IE 007CE9  
                       _TMR2IF 007CF1                         _TMR2ON 007E52                         _TRISC0 007CA0  
                       _TRISC1 007CA1                         _TRISC2 007CA2                         _TRISC6 007CA6  
                       ___flge 24FA                      ??___fladd 003F                      ??___fldiv 0015  
                    ??___flneg 0007                      ??___flmul 0024                      ??___flsub 004B  
                    ??___fltol 0068                 ??_measure_freq 0005                      ??___lwdiv 0007  
                 ?_timer2_init 0001                      ??___lwmod 0007                         clear_0 2622  
                       clear_1 262E                         log10@x 0055                         _rxfifo 0100  
                       _txfifo 00C1                         _rxiptr 00E7                         _rxoptr 00E8  
                       floor@i 0074                         _txiptr 005C                         floor@x 0070  
                       _txoptr 005D               __end_of_ser_init 2776               __end_of_ser_puts 2752  
           timer2_init@ps_mode 0004                   __mediumconst 0000                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8               format_number@buf 0010  
             format_number@pad 000D                     ___fladd@f1 0037                     ___fladd@f2 003B  
                   ___flge@ff1 0003                     ___flge@ff2 0007               __end_ofexp@coeff 0829  
                _format_double 1588               __end_oflog@coeff 084D                     ___altofl@c 006C  
                   ___fldiv@f1 000D                     ___fldiv@f2 0011                     ___fldiv@f3 0015  
                   __accesstop 0060        __end_of__initialization 2650                     ___flneg@f1 0003  
                _format_number 1D14                  _format_xint32 239C                     ___flmul@f1 001C  
                   ___flmul@f2 0020                   eval_poly@res 004B                  ___rparam_used 000001  
                   ___flsub@f1 0043                     ___flsub@f2 0047                     ___fltol@f1 0064  
                   ___awtofl@c 000D         measure_capacitance@Cin 00BD   __size_of_measure_capacitance 042E  
       measure_capacitance@var 00BB                 __pcstackCOMRAM 0001             __size_of_calibrate 00A2  
                 __pidataBANK0 27C4                     ___lltofl@c 000D             __size_of_delay10ms 005A  
                __end_of_log10 2454                  __end_of_floor 1C3E                  __end_of_ldexp 22AA  
                __end_of_frexp 239C                     ___lwtofl@c 000D                        ??_log10 0059  
                      ??_floor 005C                        ??_ldexp 0055                        ??_frexp 0008  
                   __pbssBANK0 00C1                     __pbssBANK1 0100                 ?_format_double 009A  
           __size_of_eval_poly 00BC             __size_of_indicator 0002        __size_of_format_putchar 0002  
               ?_format_number 000A                 ?_format_xint32 0035                 print_unit@unit 0001  
                      ?___flge 0003                      ?___altofl 006C                      ?___flpack 0003  
                    ?___awtofl 000D                      ?___lltofl 000D             _measure_inductance 0878  
           __size_of_ser_putch 0024                        _T2CKPS0 007E50                        _T2CKPS1 007E51  
                    ?___lwtofl 000D            ?_measure_inductance 0001              __end_of_calibrate 2174  
                      _TOUTPS0 007E53                        _TOUTPS1 007E54                        _TOUTPS2 007E55  
            __end_of_delay10ms 24AE           __end_of_measure_freq 2324                        __Hparam 0000  
                      __Lparam 0000                      ?_ser_init 0001           ??_measure_inductance 005B  
                    ?_ser_puts 0001                __size_of___flge 004C                        ___fladd 18C2  
                      ___fldiv 202C                        ___flneg 279A                        ___flmul 13CA  
                      ___flsub 25D8                        ___fltol 2174                        ___lwdiv 2546  
                      ___lwmod 265A                   __psmallconst 0800                     ??___altofl 005B  
                   ??___flpack 0009                        _exp$933 007E                        __pcinit 261C  
                   ??___awtofl 0011              __end_of_eval_poly 202C                        __ramtop 0800  
            __end_of_indicator 27CE                     ??___lltofl 0011                        __ptext0 1C3E  
                      __ptext1 24AE                        __ptext2 2752                        __ptext3 0878  
                      __ptext4 0D8A                        __ptext5 27C6                        __ptext6 27C8  
                      __ptext7 239C                        __ptext8 1D14                        __ptext9 265A  
         __size_of_timer2_init 004C                     ??___lwtofl 0011                        _pow$931 008D  
                      _pow$932 0091                   __size_of_exp 0212                   __size_of_log 011A  
                 __size_of_isr 1F68                   __size_of_pow 0188                        _seconds 00DD  
                      _ser_tmp 00E9                ??_format_double 005C                 __pintcode_body 1EAE  
         end_of_initialization 2650                ??_format_number 000E                ??_format_xint32 0039  
                      exp@sign 0084                  __Lmediumconst 0000                        int_func 1EAE  
            __end_of_ser_putch 279A                        pow@sign 0095  measure_inductance@denominator 0070  
        __end_of_print_reading 27CA                     ??_ser_init 0003                     ??_ser_puts 0004  
            format_number@base 000C                        postdec2 000FDD                        postinc0 000FEE  
                      postinc2 000FDE                     _print_unit 27C6            _measure_capacitance 0D8A  
                  ___fldiv@exp 001A                 _format_putchar 27CA                    ___flmul@exp 0031  
         ?_measure_capacitance 0001        measure_capacitance@unit 00BA                 format_double@m 00AC  
       measure_inductance@unit 0084                 __end_of___flge 2546                     floor@expon 0078  
               format_number@i 0034                 format_number@n 000A                 format_xint32@x 0035  
          start_initialization 261C                     eval_poly@d 0047                     eval_poly@n 0048  
                   eval_poly@x 0043          __size_of_measure_freq 007A                     ldexp@value 004F  
                  __end_of_exp 13CA                    __end_of_log 1B44                    __end_of_isr 1F70  
                  __end_of_pow 18C2         __end_of_format_putchar 27CC             format_double@digit 00AA  
                   frexp@value 0003          ??_measure_capacitance 005C                       ??___flge 000B  
                  __pdataBANK0 00F6                   _measure_freq 22AA                   delay10ms@run 000B  
       _measure_inductance$923 0074         _measure_inductance$924 0085         _measure_inductance$925 0089  
       _measure_inductance$926 008D         _measure_inductance$927 0078         _measure_inductance$928 007C  
       _measure_inductance$929 0080       print_reading@measurement 0003              __size_of___altofl 0048  
            __size_of___flpack 00C6              __size_of___awtofl 003A                    ?_print_unit 0001  
            __size_of___lltofl 002E                    __pbssCOMRAM 005C              __size_of___lwtofl 002A  
                __pcstackBANK0 0060                  ?_output_putch 0001                ?_format_putchar 0001  
            measure_freq@count 0009                      _calibrate 20D2                      _delay10ms 2454  
                    _log10$930 0060                      __pnvBANK0 00EE               ___lwdiv@dividend 0003  
                    __pintcode 0008                       ?___fladd 0037                       ?___fldiv 000D  
                     ?___flneg 0003                       ?___flmul 001C                       ?___flsub 0043  
                     ?___fltol 0064              __size_of_ser_init 0024                       ?___lwdiv 0003  
                     ?___lwmod 0003              __size_of_ser_puts 0028                    __smallconst 0800  
                    _eval_poly 1F70                  output_putch@c 0004                      _indicator 27CC  
               ??_output_putch 0004               ___lwdiv@quotient 0007                 __size_of_log10 005A  
               __size_of_floor 00FA                 __size_of_ldexp 0098                 __size_of_frexp 0078  
                   ?_calibrate 0001                     ser_putch@c 0003                     ?_delay10ms 0003  
                measure_freq@i 0008            __size_of_print_unit 0002                       i2u239_40 1EE6  
                    _ser_putch 2776    __size_of_measure_inductance 0512                  ??_timer2_init 0003  
            indicator@indicate 0001                     ?_eval_poly 0043                     ?_indicator 0001  
        measure_inductance@Lin 0093          measure_inductance@var 0091          __end_of_format_double 173A  
         format_number@padchar 0032          __end_of_format_number 1DE8          __end_of_format_xint32 23FA  
                    frexp@eptr 0007                       __Hrparam 0000                       __Lrparam 0000  
                   ?_ser_putch 0001                    delay10ms@ms 0007               __size_of___fladd 0168  
             __size_of___fldiv 00A6               __size_of___flneg 0020               __size_of___flmul 01BE  
             __size_of___flsub 0044               __size_of___fltol 009E                       ___altofl 2590  
                     ___flpack 1DE8               __size_of___lwdiv 004A               __size_of___lwmod 003E  
                     ___awtofl 2698                       ___lltofl 26D2                  timer2_init@ps 0005  
                     ___lwtofl 2700               measure_freq@prev 0007            __end_of_timer2_init 24FA  
              ___lwdiv@divisor 0005                ___lwdiv@counter 0009         __size_of_print_reading 0002  
                     __ptext10 2546                       __ptext11 1588                       __ptext20 279A  
                     __ptext12 173A                       __ptext21 202C                       __ptext13 11B8  
                     __ptext30 13CA                       __ptext22 26D2                       __ptext14 2212  
                     __ptext31 18C2                       __ptext23 27CA                       __ptext15 1B44  
                     __ptext32 2698                       __ptext24 2776                       __ptext16 2174  
                     __ptext33 27CC                       __ptext25 27BA                       __ptext17 24FA  
                     __ptext34 20D2                       __ptext26 23FA                       __ptext18 2590  
                     __ptext35 272A                       __ptext27 1A2A                       __ptext19 25D8  
                     __ptext36 22AA                       __ptext28 2324                       __ptext37 2454  
                     __ptext29 1F70                       __ptext38 2700                       __ptext39 1DE8  
                  ??_calibrate 0011                  __size_of_main 00D6                    ??_delay10ms 0005  
                    ser_puts@s 0004                       _msecpart 00F4                       _ser_init 2752  
                     _ser_puts 272A                       _timer1of 00E1           __end_of_output_putch 27C4  
                     exp@coeff 0801          ___flmul@f3_as_product 0033                       log@coeff 0829  
  measure_inductance@numerator 006C               ??_format_putchar 0003                   ??_print_unit 0003  
                  ??_eval_poly 004A                    ??_indicator 0003                       intlevel2 0000  
  __end_of_measure_capacitance 11B8               ___lwmod@dividend 0003                    ??_ser_putch 0003  
           __end_of_print_unit 27C8                  _print_reading 27C8           delay10ms@period_10ms 0003  
                  _timer2_init 24AE                ___lwmod@divisor 0005                ___lwmod@counter 0007  
            _format_double$918 009E              _format_double$919 00A2        _measure_capacitance$920 00AE  
      _measure_capacitance$921 00B2        _measure_capacitance$922 00B6                   ___fladd@exp1 0042  
                 ___fladd@exp2 0041                   ___fladd@sign 0040                 ?_print_reading 0003  
