

Microchip Technology PIC18 PRO Macro Assembler V1.34 build -361300703 
                                                                                               Sun Sep 15 18:17:54 2019

Microchip Technology Omniscient Code Generator (PRO mode) build 201502162209
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    69  0000                     
    70                           	psect	idataBANK0
    71  004284                     __pidataBANK0:
    72                           	opt stack 0
    73                           
    74                           ;initializer for lcd_gotoxy@F4098
    75  004284  00                 	db	0
    76  004285  40                 	db	64
    77  004286  14                 	db	20
    78  004287  54                 	db	84
    79                           
    80                           ;initializer for _putchar_ptr
    81  004288  8A                 	db	low _format_putchar
    82  004289  42                 	db	high _format_putchar
    83                           
    84                           	psect	smallconst
    85  002010                     __psmallconst:
    86                           	opt stack 0
    87  002010  00                 	db	0
    88  002011                     exp@coeff:
    89                           	opt stack 0
    90  002011  0000               	dw	0
    91  002013  3F80               	dw	16256
    92  002015  7218               	dw	29208
    93  002017  3F31               	dw	16177
    94  002019  FDF0               	dw	65008
    95  00201B  3E75               	dw	15989
    96  00201D  5847               	dw	22599
    97  00201F  3D63               	dw	15715
    98  002021  9558               	dw	38232
    99  002023  3C1D               	dw	15389
   100  002025  C482               	dw	50306
   101  002027  3AAE               	dw	15022
   102  002029  78A8               	dw	30888
   103  00202B  3921               	dw	14625
   104  00202D  93EF               	dw	37871
   105  00202F  3780               	dw	14208
   106  002031  92A0               	dw	37536
   107  002033  35A7               	dw	13735
   108  002035  5646               	dw	22086
   109  002037  3415               	dw	13333
   110  002039                     __end_ofexp@coeff:
   111                           	opt stack 0
   112  002039                     log@coeff:
   113                           	opt stack 0
   114  002039  0000               	dw	0
   115  00203B  0000               	dw	0
   116  00203D  FFC4               	dw	65476
   117  00203F  3F7F               	dw	16255
   118  002041  EF80               	dw	61312
   119  002043  BEFF               	dw	48895
   120  002045  E190               	dw	57744
   121  002047  3EA9               	dw	16041
   122  002049  82EC               	dw	33516
   123  00204B  BE76               	dw	48758
   124  00204D  AD82               	dw	44418
   125  00204F  3E2B               	dw	15915
   126  002051  3C0E               	dw	15374
   127  002053  BDC3               	dw	48579
   128  002055  D187               	dw	53639
   129  002057  3D13               	dw	15635
   130  002059  7841               	dw	30785
   131  00205B  BBD3               	dw	48083
   132  00205D                     __end_oflog@coeff:
   133                           	opt stack 0
   134  00205D                     STR_15:
   135  00205D  70                 	db	112	;'p'
   136  00205E  6C                 	db	108	;'l'
   137  00205F  65                 	db	101	;'e'
   138  002060  61                 	db	97	;'a'
   139  002061  73                 	db	115	;'s'
   140  002062  65                 	db	101	;'e'
   141  002063  20                 	db	32
   142  002064  77                 	db	119	;'w'
   143  002065  61                 	db	97	;'a'
   144  002066  69                 	db	105	;'i'
   145  002067  74                 	db	116	;'t'
   146  002068  2E                 	db	46
   147  002069  2E                 	db	46
   148  00206A  2E                 	db	46
   149  00206B  00                 	db	0
   150  00206C                     STR_19:
   151  00206C  49                 	db	73	;'I'
   152  00206D  6E                 	db	110	;'n'
   153  00206E  64                 	db	100	;'d'
   154  00206F  75                 	db	117	;'u'
   155  002070  63                 	db	99	;'c'
   156  002071  74                 	db	116	;'t'
   157  002072  69                 	db	105	;'i'
   158  002073  76                 	db	118	;'v'
   159  002074  69                 	db	105	;'i'
   160  002075  74                 	db	116	;'t'
   161  002076  79                 	db	121	;'y'
   162  002077  20                 	db	32
   163  002078  00                 	db	0
   164  002079                     STR_13:
   165  002079  43                 	db	67	;'C'
   166  00207A  61                 	db	97	;'a'
   167  00207B  6C                 	db	108	;'l'
   168  00207C  69                 	db	105	;'i'
   169  00207D  62                 	db	98	;'b'
   170  00207E  72                 	db	114	;'r'
   171  00207F  61                 	db	97	;'a'
   172  002080  74                 	db	116	;'t'
   173  002081  69                 	db	105	;'i'
   174  002082  6E                 	db	110	;'n'
   175  002083  67                 	db	103	;'g'
   176  002084  00                 	db	0
   177  002085                     STR_20:
   178  002085  4C                 	db	76	;'L'
   179  002086  43                 	db	67	;'C'
   180  002087  2D                 	db	45
   181  002088  6D                 	db	109	;'m'
   182  002089  65                 	db	101	;'e'
   183  00208A  74                 	db	116	;'t'
   184  00208B  65                 	db	101	;'e'
   185  00208C  72                 	db	114	;'r'
   186  00208D  20                 	db	32
   187  00208E  00                 	db	0
   188  00208F                     STR_18:
   189  00208F  43                 	db	67	;'C'
   190  002090  61                 	db	97	;'a'
   191  002091  70                 	db	112	;'p'
   192  002092  61                 	db	97	;'a'
   193  002093  63                 	db	99	;'c'
   194  002094  69                 	db	105	;'i'
   195  002095  74                 	db	116	;'t'
   196  002096  79                 	db	121	;'y'
   197  002097  20                 	db	32
   198  002098  00                 	db	0
   199  002099                     STR_22:
   200  002099  20                 	db	32
   201  00209A  20                 	db	32
   202  00209B  20                 	db	32
   203  00209C  20                 	db	32
   204  00209D  20                 	db	32
   205  00209E  20                 	db	32
   206  00209F  00                 	db	0
   207  0020A0                     STR_21:
   208  0020A0  2E                 	db	46
   209  0020A1  2E                 	db	46
   210  0020A2  2E                 	db	46
   211  0020A3  0D                 	db	13
   212  0020A4  0A                 	db	10
   213  0020A5  00                 	db	0
   214  0020A6                     STR_17:
   215  0020A6  46                 	db	70	;'F'
   216  0020A7  72                 	db	114	;'r'
   217  0020A8  65                 	db	101	;'e'
   218  0020A9  71                 	db	113	;'q'
   219  0020AA  3D                 	db	61	;'='
   220  0020AB  00                 	db	0
   221  0020AC  52                 	db	82	;'R'
   222  0020AD  43                 	db	67	;'C'
   223  0020AE  34                 	db	52	;'4'
   224  0020AF  3D                 	db	61	;'='
   225  0020B0  00                 	db	0
   226  0020B1                     STR_11:
   227  0020B1  2D                 	db	45
   228  0020B2  2A                 	db	42
   229  0020B3  2D                 	db	45
   230  0020B4  00                 	db	0
   231  0020B5  6D                 	db	109	;'m'
   232  0020B6  46                 	db	70	;'F'
   233  0020B7  00                 	db	0
   234  0020B8  6E                 	db	110	;'n'
   235  0020B9  46                 	db	70	;'F'
   236  0020BA  00                 	db	0
   237  0020BB  70                 	db	112	;'p'
   238  0020BC  46                 	db	70	;'F'
   239  0020BD  00                 	db	0
   240  0020BE  75                 	db	117	;'u'
   241  0020BF  46                 	db	70	;'F'
   242  0020C0  00                 	db	0
   243  0020C1                     STR_2:
   244  0020C1  6D                 	db	109	;'m'
   245  0020C2  48                 	db	72	;'H'
   246  0020C3  00                 	db	0
   247  0020C4  6E                 	db	110	;'n'
   248  0020C5  48                 	db	72	;'H'
   249  0020C6  00                 	db	0
   250  0020C7  75                 	db	117	;'u'
   251  0020C8  48                 	db	72	;'H'
   252  0020C9  00                 	db	0
   253  0020CA  00                 	db	0	; dummy byte at the end
   254  0000                     
   255                           	psect	nvBANK0
   256  0000D9                     __pnvBANK0:
   257                           	opt stack 0
   258  0000D9                     _CCal:
   259                           	opt stack 0
   260  0000D9                     	ds	4
   261  0000DD                     _bres:
   262                           	opt stack 0
   263  0000DD                     	ds	2
   264  0000DF                     _msecpart:
   265                           	opt stack 0
   266  0000DF                     	ds	2
   267  0000                     _TMR0	set	4054
   268  0000                     _INTCON	set	4082
   269  0000                     _RCSTA	set	4011
   270  0000                     _SPBRG	set	4015
   271  0000                     _T0CON	set	4053
   272  0000                     _T0CONbits	set	4053
   273  0000                     _TMR2	set	4044
   274  0000                     _TRISA	set	3986
   275  0000                     _TRISC	set	3988
   276  0000                     _TXREG	set	4013
   277  0000                     _TXSTA	set	4012
   278  0000                     _GIE	set	32663
   279  0000                     _PEIE	set	32662
   280  0000                     _RB2	set	31754
   281  0000                     _RB3	set	31755
   282  0000                     _RB4	set	31756
   283  0000                     _RB5	set	31757
   284  0000                     _RB6	set	31758
   285  0000                     _RB7	set	31759
   286  0000                     _RC0	set	31760
   287  0000                     _RC1	set	31761
   288  0000                     _RC2	set	31762
   289  0000                     _RC6	set	31766
   290  0000                     _RCIE	set	31981
   291  0000                     _SSPEN	set	32309
   292  0000                     _T0SE	set	32428
   293  0000                     _T2CKPS0	set	32336
   294  0000                     _T2CKPS1	set	32337
   295  0000                     _TMR0IF	set	32658
   296  0000                     _TMR2IE	set	31977
   297  0000                     _TMR2IF	set	31985
   298  0000                     _TMR2ON	set	32338
   299  0000                     _TOUTPS0	set	32339
   300  0000                     _TOUTPS1	set	32340
   301  0000                     _TOUTPS2	set	32341
   302  0000                     _TRISB2	set	31898
   303  0000                     _TRISB3	set	31899
   304  0000                     _TRISB4	set	31900
   305  0000                     _TRISB5	set	31901
   306  0000                     _TRISB6	set	31902
   307  0000                     _TRISB7	set	31903
   308  0000                     _TRISC0	set	31904
   309  0000                     _TRISC1	set	31905
   310  0000                     _TRISC6	set	31910
   311  0000                     _TRISC7	set	31911
   312  0000                     _TX9	set	32102
   313  0000                     _TXEN	set	32101
   314  0000                     _TXIF	set	31988
   315  0000                     _nRBPU	set	32655
   316                           
   317                           ; #config settings
   318                           
   319                           	psect	cinit
   320  004078                     __pcinit:
   321                           	opt stack 0
   322  004078                     start_initialization:
   323                           	opt stack 0
   324  004078                     __initialization:
   325                           	opt stack 0
   326                           
   327                           ; Clear objects allocated to BANK0 (49 bytes)
   328  004078  EE00  F0A8         	lfsr	0,__pbssBANK0
   329  00407C  0E31               	movlw	49
   330  00407E                     clear_0:
   331  00407E  6AEE               	clrf	postinc0,c
   332  004080  06E8               	decf	wreg,f,c
   333  004082  E1FD               	bnz	clear_0
   334                           
   335                           ; Initialize objects allocated to BANK0 (6 bytes)
   336                           ; load TBLPTR registers with __pidataBANK0
   337  004084  0E84               	movlw	low __pidataBANK0
   338  004086  6EF6               	movwf	tblptrl,c
   339  004088  0E42               	movlw	high __pidataBANK0
   340  00408A  6EF7               	movwf	tblptrh,c
   341  00408C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   342  00408E  6EF8               	movwf	tblptru,c
   343  004090  EE00  F0E1         	lfsr	0,__pdataBANK0
   344  004094  EE10 F006          	lfsr	1,6
   345  004098                     copy_data0:
   346  004098  0009               	tblrd		*+
   347  00409A  CFF5 FFEE          	movff	tablat,postinc0
   348  00409E  50E5               	movf	postdec1,w,c
   349  0040A0  50E1               	movf	fsr1l,w,c
   350  0040A2  E1FA               	bnz	copy_data0
   351  0040A4                     end_of_initialization:
   352                           	opt stack 0
   353  0040A4                     __end_of__initialization:
   354                           	opt stack 0
   355  0040A4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   356  0040A6  6EF8               	movwf	tblptru,c
   357  0040A8  0100               	movlb	0
   358  0040AA  EF44  F019         	goto	_main	;jump to C main() function
   359                           tblptru	equ	0xFF8
   360                           tblptrh	equ	0xFF7
   361                           tblptrl	equ	0xFF6
   362                           tablat	equ	0xFF5
   363                           postinc0	equ	0xFEE
   364                           wreg	equ	0xFE8
   365                           postdec1	equ	0xFE5
   366                           fsr1l	equ	0xFE1
   367                           
   368                           	psect	bssBANK0
   369  0000A8                     __pbssBANK0:
   370                           	opt stack 0
   371  0000A8                     _F2:
   372                           	opt stack 0
   373  0000A8                     	ds	4
   374  0000AC                     _F3:
   375                           	opt stack 0
   376  0000AC                     	ds	4
   377  0000B0                     _msecs:
   378                           	opt stack 0
   379  0000B0                     	ds	4
   380  0000B4                     _seconds:
   381                           	opt stack 0
   382  0000B4                     	ds	4
   383  0000B8                     _timer1of:
   384                           	opt stack 0
   385  0000B8                     	ds	4
   386  0000BC                     _blink:
   387                           	opt stack 0
   388  0000BC                     	ds	2
   389  0000BE                     _LCD_ctrl:
   390                           	opt stack 0
   391  0000BE                     	ds	1
   392  0000BF                     _LCD_function:
   393                           	opt stack 0
   394  0000BF                     	ds	1
   395  0000C0                     _LCD_lines:
   396                           	opt stack 0
   397  0000C0                     	ds	1
   398  0000C1                     _LCD_mode:
   399                           	opt stack 0
   400  0000C1                     	ds	1
   401  0000C2                     _buffer:
   402                           	opt stack 0
   403  0000C2                     	ds	19
   404  0000D5                     _F1:
   405                           	opt stack 0
   406  0000D5                     	ds	4
   407                           tblptru	equ	0xFF8
   408                           tblptrh	equ	0xFF7
   409                           tblptrl	equ	0xFF6
   410                           tablat	equ	0xFF5
   411                           postinc0	equ	0xFEE
   412                           wreg	equ	0xFE8
   413                           postdec1	equ	0xFE5
   414                           fsr1l	equ	0xFE1
   415                           
   416                           	psect	dataBANK0
   417  0000E1                     __pdataBANK0:
   418                           	opt stack 0
   419  0000E1                     lcd_gotoxy@F4098:
   420                           	opt stack 0
   421  0000E1                     	ds	4
   422  0000E5                     _putchar_ptr:
   423                           	opt stack 0
   424  0000E5                     	ds	2
   425                           tblptru	equ	0xFF8
   426                           tblptrh	equ	0xFF7
   427                           tblptrl	equ	0xFF6
   428                           tablat	equ	0xFF5
   429                           postinc0	equ	0xFEE
   430                           wreg	equ	0xFE8
   431                           postdec1	equ	0xFE5
   432                           fsr1l	equ	0xFE1
   433                           
   434                           	psect	cstackBANK0
   435  000060                     __pcstackBANK0:
   436                           	opt stack 0
   437  000060                     ??___fltol:
   438                           
   439                           ; 0 bytes @ 0x0
   440  000060                     	ds	4
   441  000064                     ___fltol@sign1:
   442                           	opt stack 0
   443                           
   444                           ; 1 bytes @ 0x4
   445  000064                     	ds	1
   446  000065                     ___fltol@exp1:
   447                           	opt stack 0
   448                           
   449                           ; 1 bytes @ 0x5
   450  000065                     	ds	1
   451  000066                     ?___altofl:
   452                           	opt stack 0
   453  000066                     measure_inductance@numerator:
   454                           	opt stack 0
   455  000066                     ___altofl@c:
   456                           	opt stack 0
   457  000066                     _measure_capacitance$1256:
   458                           	opt stack 0
   459                           
   460                           ; 4 bytes @ 0x6
   461  000066                     	ds	4
   462  00006A                     ?_floor:
   463                           	opt stack 0
   464  00006A                     measure_inductance@denominator:
   465                           	opt stack 0
   466  00006A                     floor@x:
   467                           	opt stack 0
   468  00006A                     _measure_capacitance$1257:
   469                           	opt stack 0
   470                           
   471                           ; 4 bytes @ 0xA
   472  00006A                     	ds	4
   473  00006E                     floor@i:
   474                           	opt stack 0
   475  00006E                     _measure_capacitance$1258:
   476                           	opt stack 0
   477  00006E                     _measure_inductance$1259:
   478                           	opt stack 0
   479                           
   480                           ; 4 bytes @ 0xE
   481  00006E                     	ds	4
   482  000072                     measure_capacitance@unit:
   483                           	opt stack 0
   484  000072                     floor@expon:
   485                           	opt stack 0
   486  000072                     _measure_inductance$1263:
   487                           	opt stack 0
   488                           
   489                           ; 4 bytes @ 0x12
   490  000072                     	ds	1
   491  000073                     measure_capacitance@var:
   492                           	opt stack 0
   493                           
   494                           ; 2 bytes @ 0x13
   495  000073                     	ds	1
   496  000074                     ?_exp:
   497                           	opt stack 0
   498  000074                     exp@x:
   499                           	opt stack 0
   500                           
   501                           ; 4 bytes @ 0x14
   502  000074                     	ds	1
   503  000075                     measure_capacitance@Cin:
   504                           	opt stack 0
   505                           
   506                           ; 4 bytes @ 0x15
   507  000075                     	ds	1
   508  000076                     _measure_inductance$1264:
   509                           	opt stack 0
   510                           
   511                           ; 4 bytes @ 0x16
   512  000076                     	ds	2
   513  000078                     _exp$1269:
   514                           	opt stack 0
   515                           
   516                           ; 4 bytes @ 0x18
   517  000078                     	ds	2
   518  00007A                     _measure_inductance$1265:
   519                           	opt stack 0
   520                           
   521                           ; 4 bytes @ 0x1A
   522  00007A                     	ds	2
   523  00007C                     exp@exponent:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0x1C
   527  00007C                     	ds	2
   528  00007E                     measure_inductance@unit:
   529                           	opt stack 0
   530  00007E                     exp@sign:
   531                           	opt stack 0
   532                           
   533                           ; 1 bytes @ 0x1E
   534  00007E                     	ds	1
   535  00007F                     ?_pow:
   536                           	opt stack 0
   537  00007F                     pow@x:
   538                           	opt stack 0
   539  00007F                     _measure_inductance$1260:
   540                           	opt stack 0
   541                           
   542                           ; 4 bytes @ 0x1F
   543  00007F                     	ds	4
   544  000083                     pow@y:
   545                           	opt stack 0
   546  000083                     _measure_inductance$1261:
   547                           	opt stack 0
   548                           
   549                           ; 4 bytes @ 0x23
   550  000083                     	ds	4
   551  000087                     _measure_inductance$1262:
   552                           	opt stack 0
   553  000087                     _pow$1267:
   554                           	opt stack 0
   555                           
   556                           ; 4 bytes @ 0x27
   557  000087                     	ds	4
   558  00008B                     measure_inductance@var:
   559                           	opt stack 0
   560  00008B                     _pow$1268:
   561                           	opt stack 0
   562                           
   563                           ; 4 bytes @ 0x2B
   564  00008B                     	ds	2
   565  00008D                     measure_inductance@Lin:
   566                           	opt stack 0
   567                           
   568                           ; 4 bytes @ 0x2D
   569  00008D                     	ds	2
   570  00008F                     pow@sign:
   571                           	opt stack 0
   572                           
   573                           ; 1 bytes @ 0x2F
   574  00008F                     	ds	1
   575  000090                     pow@yi:
   576                           	opt stack 0
   577                           
   578                           ; 4 bytes @ 0x30
   579  000090                     	ds	4
   580  000094                     format_double@num:
   581                           	opt stack 0
   582                           
   583                           ; 4 bytes @ 0x34
   584  000094                     	ds	4
   585  000098                     _format_double$1254:
   586                           	opt stack 0
   587                           
   588                           ; 4 bytes @ 0x38
   589  000098                     	ds	4
   590  00009C                     _format_double$1255:
   591                           	opt stack 0
   592                           
   593                           ; 4 bytes @ 0x3C
   594  00009C                     	ds	4
   595  0000A0                     format_double@weight:
   596                           	opt stack 0
   597                           
   598                           ; 4 bytes @ 0x40
   599  0000A0                     	ds	4
   600  0000A4                     format_double@digit:
   601                           	opt stack 0
   602                           
   603                           ; 2 bytes @ 0x44
   604  0000A4                     	ds	2
   605  0000A6                     format_double@m:
   606                           	opt stack 0
   607                           
   608                           ; 2 bytes @ 0x46
   609  0000A6                     	ds	2
   610                           tblptru	equ	0xFF8
   611                           tblptrh	equ	0xFF7
   612                           tblptrl	equ	0xFF6
   613                           tablat	equ	0xFF5
   614                           postinc0	equ	0xFEE
   615                           wreg	equ	0xFE8
   616                           postdec1	equ	0xFE5
   617                           fsr1l	equ	0xFE1
   618                           
   619                           	psect	cstackCOMRAM
   620  000001                     __pcstackCOMRAM:
   621                           	opt stack 0
   622  000001                     ??_timer0_init:
   623  000001                     ??_timer2_init:
   624  000001                     ?_timer0_read_ps:
   625                           	opt stack 0
   626  000001                     ?___lwdiv:
   627                           	opt stack 0
   628  000001                     ?___lwmod:
   629                           	opt stack 0
   630  000001                     ?___flpack:
   631                           	opt stack 0
   632  000001                     ?_frexp:
   633                           	opt stack 0
   634  000001                     ?___flneg:
   635                           	opt stack 0
   636  000001                     lcd_write4bits@value:
   637                           	opt stack 0
   638  000001                     lcd_init@fourbitmode:
   639                           	opt stack 0
   640  000001                     uart_putch@byte:
   641                           	opt stack 0
   642  000001                     ___lwdiv@dividend:
   643                           	opt stack 0
   644  000001                     ___lwmod@dividend:
   645                           	opt stack 0
   646  000001                     ___flpack@arg:
   647                           	opt stack 0
   648  000001                     ___flge@ff1:
   649                           	opt stack 0
   650  000001                     ___flneg@f1:
   651                           	opt stack 0
   652  000001                     frexp@value:
   653                           	opt stack 0
   654                           
   655                           ; 4 bytes @ 0x0
   656  000001                     	ds	1
   657  000002                     timer2_init@ps_mode:
   658                           	opt stack 0
   659  000002                     lcd_send@mode:
   660                           	opt stack 0
   661  000002                     uart_puts@s:
   662                           	opt stack 0
   663  000002                     _timer0_init$204:
   664                           	opt stack 0
   665  000002                     _lcd_init$403:
   666                           	opt stack 0
   667                           
   668                           ; 2 bytes @ 0x1
   669  000002                     	ds	1
   670  000003                     ??_timer0_read_ps:
   671  000003                     timer2_init@ps:
   672                           	opt stack 0
   673  000003                     lcd_send@value:
   674                           	opt stack 0
   675  000003                     ___lwdiv@divisor:
   676                           	opt stack 0
   677  000003                     ___lwmod@divisor:
   678                           	opt stack 0
   679                           
   680                           ; 2 bytes @ 0x2
   681  000003                     	ds	1
   682  000004                     lcd_putch@value:
   683                           	opt stack 0
   684  000004                     lcd_command@value:
   685                           	opt stack 0
   686  000004                     _timer0_init$205:
   687                           	opt stack 0
   688                           
   689                           ; 2 bytes @ 0x3
   690  000004                     	ds	1
   691  000005                     ??_lcd_puts:
   692  000005                     ??_lcd_clear:
   693  000005                     output_putch@c:
   694                           	opt stack 0
   695  000005                     timer0_read_ps@prev:
   696                           	opt stack 0
   697  000005                     lcd_gotoxy@row:
   698                           	opt stack 0
   699  000005                     lcd_begin@dotsize:
   700                           	opt stack 0
   701  000005                     ___flpack@exp:
   702                           	opt stack 0
   703  000005                     frexp@eptr:
   704                           	opt stack 0
   705  000005                     ___lwmod@counter:
   706                           	opt stack 0
   707  000005                     ___lwdiv@quotient:
   708                           	opt stack 0
   709  000005                     ___flge@ff2:
   710                           	opt stack 0
   711                           
   712                           ; 4 bytes @ 0x4
   713  000005                     	ds	1
   714  000006                     ??_frexp:
   715  000006                     ??_put_str:
   716  000006                     ??_lcd_begin:
   717  000006                     lcd_gotoxy@col:
   718                           	opt stack 0
   719  000006                     lcd_puts@i:
   720                           	opt stack 0
   721  000006                     ___flpack@sign:
   722                           	opt stack 0
   723  000006                     _timer0_init$206:
   724                           	opt stack 0
   725  000006                     timer0_read_ps@count:
   726                           	opt stack 0
   727                           
   728                           ; 2 bytes @ 0x5
   729  000006                     	ds	1
   730  000007                     ??___flpack:
   731  000007                     lcd_puts@string:
   732                           	opt stack 0
   733  000007                     lcd_begin@lines:
   734                           	opt stack 0
   735  000007                     ___lwdiv@counter:
   736                           	opt stack 0
   737  000007                     put_str@i:
   738                           	opt stack 0
   739  000007                     lcd_gotoxy@row_offsets:
   740                           	opt stack 0
   741                           
   742                           ; 4 bytes @ 0x6
   743  000007                     	ds	1
   744  000008                     _timer0_init$213:
   745                           	opt stack 0
   746  000008                     format_number@n:
   747                           	opt stack 0
   748                           
   749                           ; 2 bytes @ 0x7
   750  000008                     	ds	1
   751  000009                     put_str@s:
   752                           	opt stack 0
   753                           
   754                           ; 1 bytes @ 0x8
   755  000009                     	ds	1
   756  00000A                     timer0_init@prescaler:
   757                           	opt stack 0
   758  00000A                     format_number@base:
   759                           	opt stack 0
   760                           
   761                           ; 1 bytes @ 0x9
   762  00000A                     	ds	1
   763  00000B                     ??_print_unit:
   764  00000B                     ?___fldiv:
   765                           	opt stack 0
   766  00000B                     ?___awtofl:
   767                           	opt stack 0
   768  00000B                     ?___lltofl:
   769                           	opt stack 0
   770  00000B                     indicator@indicate:
   771                           	opt stack 0
   772  00000B                     timer0_init@ps_mode:
   773                           	opt stack 0
   774  00000B                     format_number@pad:
   775                           	opt stack 0
   776  00000B                     ___awtofl@c:
   777                           	opt stack 0
   778  00000B                     ___fldiv@f1:
   779                           	opt stack 0
   780  00000B                     ___lltofl@c:
   781                           	opt stack 0
   782                           
   783                           ; 4 bytes @ 0xA
   784  00000B                     	ds	1
   785  00000C                     ??_format_number:
   786                           
   787                           ; 0 bytes @ 0xB
   788  00000C                     	ds	2
   789  00000E                     format_number@buf:
   790                           	opt stack 0
   791                           
   792                           ; 32 bytes @ 0xD
   793  00000E                     	ds	1
   794  00000F                     ___awtofl@sign:
   795                           	opt stack 0
   796  00000F                     ___fldiv@f2:
   797                           	opt stack 0
   798                           
   799                           ; 4 bytes @ 0xE
   800  00000F                     	ds	4
   801  000013                     ___fldiv@f3:
   802                           	opt stack 0
   803                           
   804                           ; 4 bytes @ 0x12
   805  000013                     	ds	4
   806  000017                     ___fldiv@cntr:
   807                           	opt stack 0
   808                           
   809                           ; 1 bytes @ 0x16
   810  000017                     	ds	1
   811  000018                     ___fldiv@exp:
   812                           	opt stack 0
   813                           
   814                           ; 1 bytes @ 0x17
   815  000018                     	ds	1
   816  000019                     ___fldiv@sign:
   817                           	opt stack 0
   818                           
   819                           ; 1 bytes @ 0x18
   820  000019                     	ds	1
   821  00001A                     ?___flmul:
   822                           	opt stack 0
   823  00001A                     ___flmul@f1:
   824                           	opt stack 0
   825                           
   826                           ; 4 bytes @ 0x19
   827  00001A                     	ds	4
   828  00001E                     ___flmul@f2:
   829                           	opt stack 0
   830                           
   831                           ; 4 bytes @ 0x1D
   832  00001E                     	ds	4
   833  000022                     ??___flmul:
   834                           
   835                           ; 0 bytes @ 0x21
   836  000022                     	ds	12
   837  00002E                     _format_number$262:
   838                           	opt stack 0
   839                           
   840                           ; 2 bytes @ 0x2D
   841  00002E                     	ds	1
   842  00002F                     ___flmul@exp:
   843                           	opt stack 0
   844                           
   845                           ; 1 bytes @ 0x2E
   846  00002F                     	ds	1
   847  000030                     format_number@padchar:
   848                           	opt stack 0
   849  000030                     ___flmul@sign:
   850                           	opt stack 0
   851                           
   852                           ; 1 bytes @ 0x2F
   853  000030                     	ds	1
   854  000031                     format_number@di:
   855                           	opt stack 0
   856  000031                     ___flmul@f3_as_product:
   857                           	opt stack 0
   858                           
   859                           ; 4 bytes @ 0x30
   860  000031                     	ds	1
   861  000032                     format_number@i:
   862                           	opt stack 0
   863                           
   864                           ; 1 bytes @ 0x31
   865  000032                     	ds	1
   866  000033                     ?_measure_freq:
   867                           	opt stack 0
   868  000033                     print_reading@measurement:
   869                           	opt stack 0
   870                           
   871                           ; 2 bytes @ 0x32
   872  000033                     	ds	2
   873  000035                     ??_measure_freq:
   874  000035                     ?___fladd:
   875                           	opt stack 0
   876  000035                     _print_reading$1250:
   877                           	opt stack 0
   878  000035                     ___fladd@f1:
   879                           	opt stack 0
   880                           
   881                           ; 4 bytes @ 0x34
   882  000035                     	ds	1
   883  000036                     measure_freq@count:
   884                           	opt stack 0
   885                           
   886                           ; 2 bytes @ 0x35
   887  000036                     	ds	1
   888  000037                     _print_reading$1251:
   889                           	opt stack 0
   890                           
   891                           ; 2 bytes @ 0x36
   892  000037                     	ds	1
   893  000038                     ?___lwtofl:
   894                           	opt stack 0
   895  000038                     ___lwtofl@c:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x37
   899  000038                     	ds	1
   900  000039                     ___fladd@f2:
   901                           	opt stack 0
   902                           
   903                           ; 4 bytes @ 0x38
   904  000039                     	ds	3
   905  00003C                     calibrate@i:
   906                           	opt stack 0
   907                           
   908                           ; 1 bytes @ 0x3B
   909  00003C                     	ds	1
   910  00003D                     ??___fladd:
   911                           
   912                           ; 0 bytes @ 0x3C
   913  00003D                     	ds	1
   914  00003E                     ___fladd@sign:
   915                           	opt stack 0
   916                           
   917                           ; 1 bytes @ 0x3D
   918  00003E                     	ds	1
   919  00003F                     ___fladd@exp2:
   920                           	opt stack 0
   921                           
   922                           ; 1 bytes @ 0x3E
   923  00003F                     	ds	1
   924  000040                     ___fladd@exp1:
   925                           	opt stack 0
   926                           
   927                           ; 1 bytes @ 0x3F
   928  000040                     	ds	1
   929  000041                     ?___flsub:
   930                           	opt stack 0
   931  000041                     ?_eval_poly:
   932                           	opt stack 0
   933  000041                     ___flsub@f1:
   934                           	opt stack 0
   935  000041                     eval_poly@x:
   936                           	opt stack 0
   937                           
   938                           ; 4 bytes @ 0x40
   939  000041                     	ds	4
   940  000045                     eval_poly@d:
   941                           	opt stack 0
   942  000045                     ___flsub@f2:
   943                           	opt stack 0
   944                           
   945                           ; 4 bytes @ 0x44
   946  000045                     	ds	1
   947  000046                     eval_poly@n:
   948                           	opt stack 0
   949                           
   950                           ; 2 bytes @ 0x45
   951  000046                     	ds	2
   952  000048                     ??_eval_poly:
   953                           
   954                           ; 0 bytes @ 0x47
   955  000048                     	ds	1
   956  000049                     eval_poly@res:
   957                           	opt stack 0
   958                           
   959                           ; 4 bytes @ 0x48
   960  000049                     	ds	4
   961  00004D                     ?_ldexp:
   962                           	opt stack 0
   963  00004D                     ?_log:
   964                           	opt stack 0
   965  00004D                     ldexp@value:
   966                           	opt stack 0
   967  00004D                     log@x:
   968                           	opt stack 0
   969                           
   970                           ; 4 bytes @ 0x4C
   971  00004D                     	ds	4
   972  000051                     ldexp@newexp:
   973                           	opt stack 0
   974  000051                     log@exponent:
   975                           	opt stack 0
   976                           
   977                           ; 2 bytes @ 0x50
   978  000051                     	ds	2
   979  000053                     ??_ldexp:
   980  000053                     ?_log10:
   981                           	opt stack 0
   982  000053                     log10@x:
   983                           	opt stack 0
   984                           
   985                           ; 4 bytes @ 0x52
   986  000053                     	ds	4
   987  000057                     _log10$1266:
   988                           	opt stack 0
   989                           
   990                           ; 4 bytes @ 0x56
   991  000057                     	ds	4
   992  00005B                     ?___fltol:
   993                           	opt stack 0
   994  00005B                     ___fltol@f1:
   995                           	opt stack 0
   996                           
   997                           ; 4 bytes @ 0x5A
   998  00005B                     	ds	4
   999  00005F                     ___altofl@sign:
  1000                           	opt stack 0
  1001                           
  1002                           ; 1 bytes @ 0x5E
  1003  00005F                     	ds	1
  1004  000060                     tblptru	equ	0xFF8
  1005                           tblptrh	equ	0xFF7
  1006                           tblptrl	equ	0xFF6
  1007                           tablat	equ	0xFF5
  1008                           postinc0	equ	0xFEE
  1009                           wreg	equ	0xFE8
  1010                           postdec1	equ	0xFE5
  1011                           fsr1l	equ	0xFE1
  1012                           
  1013                           ; 0 bytes @ 0x5F
  1014 ;;
  1015 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1016 ;;
  1017 ;; *************** function _main *****************
  1018 ;; Defined at:
  1019 ;;		line 112 in file "../../../src/LC-meter.c"
  1020 ;; Parameters:    Size  Location     Type
  1021 ;;		None
  1022 ;; Auto vars:     Size  Location     Type
  1023 ;;		None
  1024 ;; Return value:  Size  Location     Type
  1025 ;;		None               void
  1026 ;; Registers used:
  1027 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1028 ;; Tracked objects:
  1029 ;;		On entry : 0/0
  1030 ;;		On exit  : 0/0
  1031 ;;		Unchanged: 0/0
  1032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1033 ;;      Params:         0       0       0       0       0       0       0       0       0
  1034 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1035 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1036 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1037 ;;Total ram usage:        0 bytes
  1038 ;; Hardware stack levels required when called:    8
  1039 ;; This function calls:
  1040 ;;		_calibrate
  1041 ;;		_delay10ms
  1042 ;;		_format_double
  1043 ;;		_indicator
  1044 ;;		_lcd_begin
  1045 ;;		_lcd_clear
  1046 ;;		_lcd_gotoxy
  1047 ;;		_lcd_init
  1048 ;;		_lcd_puts
  1049 ;;		_measure_capacitance
  1050 ;;		_measure_inductance
  1051 ;;		_timer0_init
  1052 ;;		_timer2_init
  1053 ;;		_uart_init
  1054 ;;		_uart_puts
  1055 ;; This function is called by:
  1056 ;;		Startup code after reset
  1057 ;; This function uses a non-reentrant model
  1058 ;;
  1059                           
  1060                           	psect	text0
  1061  003288                     __ptext0:
  1062                           	opt stack 0
  1063  003288                     _main:
  1064                           	opt stack 23
  1065                           
  1066                           ;LC-meter.c: 113: bres = msecpart = msecs = seconds = 0;
  1067                           
  1068                           ;incstack = 0
  1069  003288  0100               	movlb	0	; () banked
  1070  00328A  6BB4               	clrf	_seconds& (0+255),b	;volatile
  1071  00328C  6BB5               	clrf	(_seconds+1)& (0+255),b	;volatile
  1072  00328E  6BB6               	clrf	(_seconds+2)& (0+255),b	;volatile
  1073  003290  6BB7               	clrf	(_seconds+3)& (0+255),b	;volatile
  1074  003292  C0B4  F0B0         	movff	_seconds,_msecs	;volatile
  1075  003296  C0B5  F0B1         	movff	_seconds+1,_msecs+1	;volatile
  1076  00329A  C0B6  F0B2         	movff	_seconds+2,_msecs+2	;volatile
  1077  00329E  C0B7  F0B3         	movff	_seconds+3,_msecs+3	;volatile
  1078  0032A2  C0B0  F0DF         	movff	_msecs,_msecpart	;volatile
  1079  0032A6  C0B1  F0E0         	movff	_msecs+1,_msecpart+1	;volatile
  1080  0032AA  C0DF  F0DD         	movff	_msecpart,_bres	;volatile
  1081  0032AE  C0E0  F0DE         	movff	_msecpart+1,_bres+1	;volatile
  1082                           
  1083                           ;LC-meter.c: 115: CCal = 1000;
  1084  0032B2  6BD9               	clrf	_CCal& (0+255),b
  1085  0032B4  6BDA               	clrf	(_CCal+1)& (0+255),b
  1086  0032B6  0E7A               	movlw	122
  1087  0032B8  6FDB               	movwf	(_CCal+2)& (0+255),b
  1088  0032BA  0E44               	movlw	68
  1089  0032BC  6FDC               	movwf	(_CCal+3)& (0+255),b
  1090                           
  1091                           ;LC-meter.c: 124: TRISA = 0b11001111;
  1092  0032BE  0ECF               	movlw	207
  1093  0032C0  6E92               	movwf	3986,c	;volatile
  1094                           
  1095                           ; BSR set to: 0
  1096                           ;LC-meter.c: 127: timer0_init(0b100 | 0x40);
  1097  0032C2  0E44               	movlw	68
  1098  0032C4  ECED  F01D         	call	_timer0_init
  1099                           
  1100                           ; BSR set to: 0
  1101                           ;LC-meter.c: 130: T0SE = 1;
  1102  0032C8  88D5               	bsf	4053,4,c	;volatile
  1103                           
  1104                           ; BSR set to: 0
  1105                           ;LC-meter.c: 141: nRBPU = 0;
  1106  0032CA  9EF1               	bcf	intcon2,7,c	;volatile
  1107                           
  1108                           ; BSR set to: 0
  1109                           ;LC-meter.c: 144: TRISC1 = 0;
  1110  0032CC  9294               	bcf	3988,1,c	;volatile
  1111                           
  1112                           ; BSR set to: 0
  1113                           ;LC-meter.c: 145: RC1 = ((1) == 0);
  1114  0032CE  9282               	bcf	3970,1,c	;volatile
  1115                           
  1116                           ; BSR set to: 0
  1117                           ;LC-meter.c: 147: SSPEN = 0;
  1118  0032D0  9AC6               	bcf	4038,5,c	;volatile
  1119                           
  1120                           ; BSR set to: 0
  1121                           ;LC-meter.c: 152: timer2_init(0b000 | 0x80);
  1122  0032D2  0E80               	movlw	128
  1123  0032D4  ECC5  F01E         	call	_timer2_init
  1124                           
  1125                           ;LC-meter.c: 157: TRISC &= 0b10110101;
  1126  0032D8  0EB5               	movlw	181
  1127  0032DA  1694               	andwf	3988,f,c	;volatile
  1128                           
  1129                           ;LC-meter.c: 169: lcd_init(!0);
  1130  0032DC  0E01               	movlw	1
  1131  0032DE  EC72  F020         	call	_lcd_init
  1132                           
  1133                           ;LC-meter.c: 170: lcd_begin(2, 1);
  1134  0032E2  0E01               	movlw	1
  1135  0032E4  6E05               	movwf	lcd_begin@dotsize,c
  1136  0032E6  0E02               	movlw	2
  1137  0032E8  EC29  F01B         	call	_lcd_begin
  1138                           
  1139                           ;LC-meter.c: 173: TRISC0 = 1;
  1140  0032EC  8094               	bsf	3988,0,c	;volatile
  1141                           
  1142                           ;LC-meter.c: 174: TRISC &= ~(1 << 5);
  1143  0032EE  9A94               	bcf	3988,5,c	;volatile
  1144                           
  1145                           ;LC-meter.c: 176: RC2 = 0;
  1146  0032F0  9482               	bcf	3970,2,c	;volatile
  1147                           
  1148                           ;LC-meter.c: 177: delay10ms(50);
  1149  0032F2  0E32               	movlw	50
  1150  0032F4  EC46  F021         	call	_delay10ms
  1151                           
  1152                           ;LC-meter.c: 178: RC2 = 1;
  1153  0032F8  8482               	bsf	3970,2,c	;volatile
  1154                           
  1155                           ;LC-meter.c: 179: delay10ms(50);
  1156  0032FA  0E32               	movlw	50
  1157  0032FC  EC46  F021         	call	_delay10ms
  1158                           
  1159                           ;LC-meter.c: 180: RC2 = 0;
  1160  003300  9482               	bcf	3970,2,c	;volatile
  1161                           
  1162                           ;LC-meter.c: 181: delay10ms(50);
  1163  003302  0E32               	movlw	50
  1164  003304  EC46  F021         	call	_delay10ms
  1165                           
  1166                           ;LC-meter.c: 182: RC2 = 1;
  1167  003308  8482               	bsf	3970,2,c	;volatile
  1168                           
  1169                           ;LC-meter.c: 183: delay10ms(50);
  1170  00330A  0E32               	movlw	50
  1171  00330C  EC46  F021         	call	_delay10ms
  1172                           
  1173                           ;LC-meter.c: 184: RC2 = 0;
  1174  003310  9482               	bcf	3970,2,c	;volatile
  1175                           
  1176                           ;LC-meter.c: 190: uart_init();
  1177  003312  EC0D  F021         	call	_uart_init	;wreg free
  1178                           
  1179                           ;LC-meter.c: 194: PEIE = 1;
  1180  003316  8CF2               	bsf	intcon,6,c	;volatile
  1181                           
  1182                           ;LC-meter.c: 195: GIE = 1;
  1183  003318  8EF2               	bsf	intcon,7,c	;volatile
  1184                           
  1185                           ;LC-meter.c: 198: putchar_ptr = &lcd_putch;
  1186  00331A  0E54               	movlw	low _lcd_putch
  1187  00331C  0100               	movlb	0	; () banked
  1188  00331E  6FE5               	movwf	_putchar_ptr& (0+255),b
  1189  003320  0E42               	movlw	high _lcd_putch
  1190  003322  6FE6               	movwf	(_putchar_ptr+1)& (0+255),b
  1191                           
  1192                           ; BSR set to: 0
  1193                           ;LC-meter.c: 205: lcd_gotoxy(0, 0);
  1194  003324  0E00               	movlw	0
  1195  003326  6A05               	clrf	lcd_gotoxy@row,c
  1196  003328  EC20  F020         	call	_lcd_gotoxy
  1197                           
  1198                           ;LC-meter.c: 207: lcd_puts("LC-meter ");
  1199  00332C  0E85               	movlw	STR_20& (0+255)
  1200  00332E  EC57  F020         	call	_lcd_puts
  1201                           
  1202                           ;LC-meter.c: 208: format_double( CCal);
  1203  003332  C0D9  F094         	movff	_CCal,format_double@num
  1204  003336  C0DA  F095         	movff	_CCal+1,format_double@num+1
  1205  00333A  C0DB  F096         	movff	_CCal+2,format_double@num+2
  1206  00333E  C0DC  F097         	movff	_CCal+3,format_double@num+3
  1207  003342  EC66  F016         	call	_format_double	;wreg free
  1208                           
  1209                           ;LC-meter.c: 214: delay10ms(200);
  1210  003346  0EC8               	movlw	200
  1211  003348  EC46  F021         	call	_delay10ms
  1212                           
  1213                           ;LC-meter.c: 217: calibrate();
  1214  00334C  ECB9  F01A         	call	_calibrate	;wreg free
  1215                           
  1216                           ;LC-meter.c: 219: lcd_clear();
  1217  003350  EC18  F021         	call	_lcd_clear	;wreg free
  1218  003354                     l3456:
  1219                           
  1220                           ;LC-meter.c: 230: uart_puts("...\r\n");
  1221  003354  0EA0               	movlw	STR_21& (0+255)
  1222  003356  ECCB  F020         	call	_uart_puts
  1223                           
  1224                           ;LC-meter.c: 231: if(RC0)
  1225  00335A  A082               	btfss	3970,0,c	;volatile
  1226  00335C  D003               	goto	l3462
  1227                           
  1228                           ;LC-meter.c: 232: measure_capacitance();
  1229  00335E  ECF7  F012         	call	_measure_capacitance	;wreg free
  1230  003362  D002               	goto	l3464
  1231  003364                     l3462:
  1232                           
  1233                           ;LC-meter.c: 233: else
  1234                           ;LC-meter.c: 234: measure_inductance();
  1235  003364  EC66  F010         	call	_measure_inductance	;wreg free
  1236  003368                     l3464:
  1237                           
  1238                           ;LC-meter.c: 236: indicator(1);
  1239  003368  0E01               	movlw	1
  1240  00336A  ECDF  F020         	call	_indicator
  1241                           
  1242                           ;LC-meter.c: 237: delay10ms(30);
  1243  00336E  0E1E               	movlw	30
  1244  003370  EC46  F021         	call	_delay10ms
  1245                           
  1246                           ;LC-meter.c: 238: indicator(0);
  1247  003374  0E00               	movlw	0
  1248  003376  ECDF  F020         	call	_indicator
  1249                           
  1250                           ;LC-meter.c: 239: delay10ms(20);
  1251  00337A  0E14               	movlw	20
  1252  00337C  EC46  F021         	call	_delay10ms
  1253                           
  1254                           ;LC-meter.c: 240: }
  1255  003380  D7E9               	goto	l3456
  1256  003382                     __end_of_main:
  1257                           	opt stack 0
  1258                           tblptru	equ	0xFF8
  1259                           tblptrh	equ	0xFF7
  1260                           tblptrl	equ	0xFF6
  1261                           tablat	equ	0xFF5
  1262                           intcon	equ	0xFF2
  1263                           intcon2	equ	0xFF1
  1264                           postinc0	equ	0xFEE
  1265                           wreg	equ	0xFE8
  1266                           postdec1	equ	0xFE5
  1267                           fsr1l	equ	0xFE1
  1268                           
  1269 ;; *************** function _uart_init *****************
  1270 ;; Defined at:
  1271 ;;		line 93 in file "../../../lib/uart.c"
  1272 ;; Parameters:    Size  Location     Type
  1273 ;;		None
  1274 ;; Auto vars:     Size  Location     Type
  1275 ;;		None
  1276 ;; Return value:  Size  Location     Type
  1277 ;;		None               void
  1278 ;; Registers used:
  1279 ;;		wreg, status,2, status,0, cstack
  1280 ;; Tracked objects:
  1281 ;;		On entry : 0/0
  1282 ;;		On exit  : 0/0
  1283 ;;		Unchanged: 0/0
  1284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1285 ;;      Params:         0       0       0       0       0       0       0       0       0
  1286 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1287 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1288 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1289 ;;Total ram usage:        4 bytes
  1290 ;; Hardware stack levels used:    1
  1291 ;; Hardware stack levels required when called:    2
  1292 ;; This function calls:
  1293 ;;		_uart_enable
  1294 ;; This function is called by:
  1295 ;;		_main
  1296 ;; This function uses a non-reentrant model
  1297 ;;
  1298                           
  1299                           	psect	text1
  1300  00421A                     __ptext1:
  1301                           	opt stack 0
  1302  00421A                     _uart_init:
  1303                           	opt stack 28
  1304                           
  1305                           ;uart.c: 96: TRISC7 = 1;
  1306                           
  1307                           ;incstack = 0
  1308  00421A  8E94               	bsf	3988,7,c	;volatile
  1309                           
  1310                           ;uart.c: 97: TRISC6 = 0;
  1311  00421C  9C94               	bcf	3988,6,c	;volatile
  1312                           
  1313                           ;uart.c: 98: RC6 = 0;
  1314  00421E  9C82               	bcf	3970,6,c	;volatile
  1315                           
  1316                           ;uart.c: 99: SPBRG = ((unsigned short int)((double)(20000000) / (16 * (double)(38400))) 
      +                          - 1);
  1317  004220  0E1F               	movlw	31
  1318  004222  6EAF               	movwf	4015,c	;volatile
  1319                           
  1320                           ;uart.c: 101: RCSTA |= 0x90
  1321                           ;uart.c: 102: | (0 == 1 ? 0b1 : 0);
  1322  004224  0E90               	movlw	144
  1323  004226  12AB               	iorwf	4011,f,c	;volatile
  1324                           
  1325                           ;uart.c: 106: TX9 |= (0 == 1) ? 0b01000000 : 0;
  1326                           
  1327                           ;uart.c: 104: TXSTA |= (1 == 1) ? 0b100 : 0b000;
  1328  004228  84AC               	bsf	4012,2,c	;volatile
  1329                           
  1330                           ;uart.c: 108: uart_enable();
  1331  00422A  EC23  F021         	call	_uart_enable	;wreg free
  1332  00422E  0012               	return		;funcret
  1333  004230                     __end_of_uart_init:
  1334                           	opt stack 0
  1335                           tblptru	equ	0xFF8
  1336                           tblptrh	equ	0xFF7
  1337                           tblptrl	equ	0xFF6
  1338                           tablat	equ	0xFF5
  1339                           intcon	equ	0xFF2
  1340                           intcon2	equ	0xFF1
  1341                           postinc0	equ	0xFEE
  1342                           wreg	equ	0xFE8
  1343                           postdec1	equ	0xFE5
  1344                           fsr1l	equ	0xFE1
  1345                           
  1346 ;; *************** function _uart_enable *****************
  1347 ;; Defined at:
  1348 ;;		line 75 in file "../../../lib/uart.c"
  1349 ;; Parameters:    Size  Location     Type
  1350 ;;		None
  1351 ;; Auto vars:     Size  Location     Type
  1352 ;;		None
  1353 ;; Return value:  Size  Location     Type
  1354 ;;		None               void
  1355 ;; Registers used:
  1356 ;;		status,2, status,0
  1357 ;; Tracked objects:
  1358 ;;		On entry : 0/0
  1359 ;;		On exit  : 0/0
  1360 ;;		Unchanged: 0/0
  1361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1362 ;;      Params:         0       0       0       0       0       0       0       0       0
  1363 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1364 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1365 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1366 ;;Total ram usage:        0 bytes
  1367 ;; Hardware stack levels used:    1
  1368 ;; Hardware stack levels required when called:    1
  1369 ;; This function calls:
  1370 ;;		Nothing
  1371 ;; This function is called by:
  1372 ;;		_uart_init
  1373 ;; This function uses a non-reentrant model
  1374 ;;
  1375                           
  1376                           	psect	text2
  1377  004246                     __ptext2:
  1378                           	opt stack 0
  1379  004246                     _uart_enable:
  1380                           	opt stack 28
  1381                           
  1382                           ;uart.c: 76: TRISC7 = 1;
  1383                           
  1384                           ;incstack = 0
  1385  004246  8E94               	bsf	3988,7,c	;volatile
  1386                           
  1387                           ;uart.c: 77: TRISC6 = RC6 = 0;
  1388  004248  9C82               	bcf	3970,6,c	;volatile
  1389  00424A  9C94               	bcf	3988,6,c	;volatile
  1390                           
  1391                           ;uart.c: 78: TXEN = 1;
  1392  00424C  8AAC               	bsf	4012,5,c	;volatile
  1393                           
  1394                           ;uart.c: 79: RCSTA |= 0x80;
  1395  00424E  8EAB               	bsf	4011,7,c	;volatile
  1396                           
  1397                           ;uart.c: 80: RCIE = 0;
  1398  004250  9A9D               	bcf	3997,5,c	;volatile
  1399  004252  0012               	return		;funcret
  1400  004254                     __end_of_uart_enable:
  1401                           	opt stack 0
  1402                           tblptru	equ	0xFF8
  1403                           tblptrh	equ	0xFF7
  1404                           tblptrl	equ	0xFF6
  1405                           tablat	equ	0xFF5
  1406                           intcon	equ	0xFF2
  1407                           intcon2	equ	0xFF1
  1408                           postinc0	equ	0xFEE
  1409                           wreg	equ	0xFE8
  1410                           postdec1	equ	0xFE5
  1411                           fsr1l	equ	0xFE1
  1412                           
  1413 ;; *************** function _timer2_init *****************
  1414 ;; Defined at:
  1415 ;;		line 123 in file "../../../lib/timer.c"
  1416 ;; Parameters:    Size  Location     Type
  1417 ;;  ps_mode         1    wreg     unsigned char 
  1418 ;; Auto vars:     Size  Location     Type
  1419 ;;  ps_mode         1    1[COMRAM] unsigned char 
  1420 ;;  postscaler      1    0        unsigned char 
  1421 ;;  ps              1    2[COMRAM] unsigned char 
  1422 ;; Return value:  Size  Location     Type
  1423 ;;		None               void
  1424 ;; Registers used:
  1425 ;;		wreg, status,2, status,0
  1426 ;; Tracked objects:
  1427 ;;		On entry : F/0
  1428 ;;		On exit  : 0/0
  1429 ;;		Unchanged: 0/0
  1430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1431 ;;      Params:         0       0       0       0       0       0       0       0       0
  1432 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1433 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1434 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1435 ;;Total ram usage:        4 bytes
  1436 ;; Hardware stack levels used:    1
  1437 ;; Hardware stack levels required when called:    1
  1438 ;; This function calls:
  1439 ;;		Nothing
  1440 ;; This function is called by:
  1441 ;;		_main
  1442 ;; This function uses a non-reentrant model
  1443 ;;
  1444                           
  1445                           	psect	text3
  1446  003D8A                     __ptext3:
  1447                           	opt stack 0
  1448  003D8A                     _timer2_init:
  1449                           	opt stack 29
  1450                           
  1451                           ;incstack = 0
  1452                           ;timer2_init@ps_mode stored from wreg
  1453  003D8A  6E02               	movwf	timer2_init@ps_mode,c
  1454                           
  1455                           ; BSR set to: 0
  1456                           ;timer.c: 124: unsigned char ps = ps_mode & 0b1111;
  1457  003D8C  5002               	movf	timer2_init@ps_mode,w,c
  1458  003D8E  0B0F               	andlw	15
  1459  003D90  6E03               	movwf	timer2_init@ps,c
  1460                           
  1461                           ; BSR set to: 0
  1462                           ;timer.c: 128: TOUTPS0 = postscaler & 1;
  1463                           
  1464                           ; BSR set to: 0
  1465  003D92  96CA               	bcf	4042,3,c	;volatile
  1466                           
  1467                           ;timer.c: 129: TOUTPS1 = (postscaler >> 1) & 1;
  1468  003D94  98CA               	bcf	4042,4,c	;volatile
  1469                           
  1470                           ;timer.c: 130: TOUTPS2 = (postscaler >> 2) & 1;
  1471  003D96  9ACA               	bcf	4042,5,c	;volatile
  1472                           
  1473                           ;timer.c: 132: T2CKPS0 = (ps >> 1) & 1;
  1474  003D98  C003  F001         	movff	timer2_init@ps,??_timer2_init
  1475  003D9C  90D8               	bcf	status,0,c
  1476  003D9E  3201               	rrcf	??_timer2_init,f,c
  1477  003DA0  3001               	rrcf	??_timer2_init,w,c
  1478  003DA2  B0D8               	btfsc	status,0,c
  1479  003DA4  D002               	bra	u2405
  1480  003DA6  90CA               	bcf	4042,0,c	;volatile
  1481  003DA8  D001               	bra	u2406
  1482  003DAA                     u2405:
  1483  003DAA  80CA               	bsf	4042,0,c	;volatile
  1484  003DAC                     u2406:
  1485                           
  1486                           ;timer.c: 133: T2CKPS1 = (ps >> 2) & 1;
  1487  003DAC  C003  F001         	movff	timer2_init@ps,??_timer2_init
  1488  003DB0  90D8               	bcf	status,0,c
  1489  003DB2  3201               	rrcf	??_timer2_init,f,c
  1490  003DB4  90D8               	bcf	status,0,c
  1491  003DB6  3201               	rrcf	??_timer2_init,f,c
  1492  003DB8  3001               	rrcf	??_timer2_init,w,c
  1493  003DBA  B0D8               	btfsc	status,0,c
  1494  003DBC  D002               	bra	u2415
  1495  003DBE  92CA               	bcf	4042,1,c	;volatile
  1496  003DC0  D001               	bra	u2416
  1497  003DC2                     u2415:
  1498  003DC2  82CA               	bsf	4042,1,c	;volatile
  1499  003DC4                     u2416:
  1500                           
  1501                           ;timer.c: 135: TMR2 = 0;
  1502  003DC4  6ACC               	clrf	4044,c	;volatile
  1503                           
  1504                           ;timer.c: 137: TMR2ON = 1;
  1505  003DC6  84CA               	bsf	4042,2,c	;volatile
  1506                           
  1507                           ;timer.c: 139: TMR2IF = 0;
  1508  003DC8  929E               	bcf	3998,1,c	;volatile
  1509                           
  1510                           ;timer.c: 140: TMR2IE = !!(ps_mode & 0x80);
  1511  003DCA  AE02               	btfss	timer2_init@ps_mode,7,c
  1512  003DCC  D002               	goto	u2420
  1513  003DCE  829D               	bsf	3997,1,c	;volatile
  1514  003DD0  D001               	goto	l125
  1515  003DD2                     u2420:
  1516  003DD2  929D               	bcf	3997,1,c	;volatile
  1517  003DD4                     l125:
  1518  003DD4  0012               	return		;funcret
  1519  003DD6                     __end_of_timer2_init:
  1520                           	opt stack 0
  1521                           tblptru	equ	0xFF8
  1522                           tblptrh	equ	0xFF7
  1523                           tblptrl	equ	0xFF6
  1524                           tablat	equ	0xFF5
  1525                           intcon	equ	0xFF2
  1526                           intcon2	equ	0xFF1
  1527                           postinc0	equ	0xFEE
  1528                           wreg	equ	0xFE8
  1529                           postdec1	equ	0xFE5
  1530                           fsr1l	equ	0xFE1
  1531                           status	equ	0xFD8
  1532                           
  1533 ;; *************** function _timer0_init *****************
  1534 ;; Defined at:
  1535 ;;		line 18 in file "../../../lib/timer.c"
  1536 ;; Parameters:    Size  Location     Type
  1537 ;;  ps_mode         1    wreg     unsigned char 
  1538 ;; Auto vars:     Size  Location     Type
  1539 ;;  ps_mode         1   10[COMRAM] unsigned char 
  1540 ;;  prescaler       1    9[COMRAM] unsigned char 
  1541 ;; Return value:  Size  Location     Type
  1542 ;;		None               void
  1543 ;; Registers used:
  1544 ;;		wreg, status,2, status,0
  1545 ;; Tracked objects:
  1546 ;;		On entry : F/0
  1547 ;;		On exit  : F/0
  1548 ;;		Unchanged: F/0
  1549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1550 ;;      Params:         0       0       0       0       0       0       0       0       0
  1551 ;;      Locals:        10       0       0       0       0       0       0       0       0
  1552 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1553 ;;      Totals:        11       0       0       0       0       0       0       0       0
  1554 ;;Total ram usage:       11 bytes
  1555 ;; Hardware stack levels used:    1
  1556 ;; Hardware stack levels required when called:    1
  1557 ;; This function calls:
  1558 ;;		Nothing
  1559 ;; This function is called by:
  1560 ;;		_main
  1561 ;; This function uses a non-reentrant model
  1562 ;;
  1563                           
  1564                           	psect	text4
  1565  003BDA                     __ptext4:
  1566                           	opt stack 0
  1567  003BDA                     _timer0_init:
  1568                           	opt stack 29
  1569                           
  1570                           ;incstack = 0
  1571                           ;timer0_init@ps_mode stored from wreg
  1572  003BDA  6E0B               	movwf	timer0_init@ps_mode,c
  1573                           
  1574                           ; BSR set to: 0
  1575                           ;timer.c: 19: unsigned char prescaler = ps_mode & 0b1111;
  1576  003BDC  500B               	movf	timer0_init@ps_mode,w,c
  1577  003BDE  0B0F               	andlw	15
  1578  003BE0  6E0A               	movwf	timer0_init@prescaler,c
  1579                           
  1580                           ; BSR set to: 0
  1581                           ;timer.c: 21: TMR0 = 0;
  1582  003BE2  6AD6               	clrf	4054,c	;volatile
  1583  003BE4  6AD7               	clrf	4055,c	;volatile
  1584                           
  1585                           ; BSR set to: 0
  1586                           ;timer.c: 26: T0CON |= (!!(ps_mode & 0x40)) ? 0x20 : 0x00;
  1587  003BE6  BC0B               	btfsc	timer0_init@ps_mode,6,c
  1588  003BE8  D003               	goto	l3078
  1589                           
  1590                           ; BSR set to: 0
  1591  003BEA  6A02               	clrf	_timer0_init$204,c
  1592  003BEC  6A03               	clrf	_timer0_init$204+1,c
  1593  003BEE  D003               	goto	l3080
  1594  003BF0                     l3078:
  1595                           
  1596                           ; BSR set to: 0
  1597  003BF0  6A03               	clrf	_timer0_init$204+1,c
  1598  003BF2  0E20               	movlw	32
  1599  003BF4  6E02               	movwf	_timer0_init$204,c
  1600  003BF6                     l3080:
  1601                           
  1602                           ; BSR set to: 0
  1603  003BF6  5002               	movf	_timer0_init$204,w,c
  1604  003BF8  12D5               	iorwf	4053,f,c	;volatile
  1605                           
  1606                           ; BSR set to: 0
  1607                           ;timer.c: 29: T0CON |= (!!(ps_mode & 0x10)) ? 0x10 : 0x00;
  1608  003BFA  B80B               	btfsc	timer0_init@ps_mode,4,c
  1609  003BFC  D003               	goto	l3086
  1610                           
  1611                           ; BSR set to: 0
  1612  003BFE  6A04               	clrf	_timer0_init$205,c
  1613  003C00  6A05               	clrf	_timer0_init$205+1,c
  1614  003C02  D003               	goto	l3088
  1615  003C04                     l3086:
  1616                           
  1617                           ; BSR set to: 0
  1618  003C04  6A05               	clrf	_timer0_init$205+1,c
  1619  003C06  0E10               	movlw	16
  1620  003C08  6E04               	movwf	_timer0_init$205,c
  1621  003C0A                     l3088:
  1622                           
  1623                           ; BSR set to: 0
  1624  003C0A  5004               	movf	_timer0_init$205,w,c
  1625  003C0C  12D5               	iorwf	4053,f,c	;volatile
  1626                           
  1627                           ; BSR set to: 0
  1628                           ;timer.c: 32: T0CON &= (!!prescaler) ? ~0x08 : ~0x00;
  1629  003C0E  500A               	movf	timer0_init@prescaler,w,c
  1630  003C10  E103               	bnz	l3094
  1631                           
  1632                           ; BSR set to: 0
  1633  003C12  6806               	setf	_timer0_init$206,c
  1634  003C14  6807               	setf	_timer0_init$206+1,c
  1635  003C16  D003               	goto	l3096
  1636  003C18                     l3094:
  1637                           
  1638                           ; BSR set to: 0
  1639  003C18  6807               	setf	_timer0_init$206+1,c
  1640  003C1A  0EF7               	movlw	247
  1641  003C1C  6E06               	movwf	_timer0_init$206,c
  1642  003C1E                     l3096:
  1643                           
  1644                           ; BSR set to: 0
  1645  003C1E  5006               	movf	_timer0_init$206,w,c
  1646  003C20  16D5               	andwf	4053,f,c	;volatile
  1647                           
  1648                           ; BSR set to: 0
  1649                           ;timer.c: 35: if(prescaler > 0) {
  1650  003C22  500A               	movf	timer0_init@prescaler,w,c
  1651  003C24  E008               	bz	l3102
  1652                           
  1653                           ; BSR set to: 0
  1654                           ;timer.c: 36: T0CONbits.T0PS = (prescaler - 1);
  1655  003C26  C00A  F001         	movff	timer0_init@prescaler,??_timer0_init
  1656  003C2A  0601               	decf	??_timer0_init,f,c
  1657  003C2C  50D5               	movf	4053,w,c	;volatile
  1658  003C2E  1801               	xorwf	??_timer0_init,w,c
  1659  003C30  0BF8               	andlw	-8
  1660  003C32  1801               	xorwf	??_timer0_init,w,c
  1661  003C34  6ED5               	movwf	4053,c	;volatile
  1662  003C36                     l3102:
  1663                           
  1664                           ; BSR set to: 0
  1665                           ;timer.c: 37: }
  1666                           ;timer.c: 53: INTCON &= ~0x40;
  1667  003C36  9CF2               	bcf	intcon,6,c	;volatile
  1668                           
  1669                           ; BSR set to: 0
  1670                           ;timer.c: 54: INTCON |= (!!(ps_mode & 0x80)) ? 0x20 : 0x00;
  1671  003C38  BE0B               	btfsc	timer0_init@ps_mode,7,c
  1672  003C3A  D003               	goto	l3108
  1673                           
  1674                           ; BSR set to: 0
  1675  003C3C  6A08               	clrf	_timer0_init$213,c
  1676  003C3E  6A09               	clrf	_timer0_init$213+1,c
  1677  003C40  D003               	goto	l3110
  1678  003C42                     l3108:
  1679                           
  1680                           ; BSR set to: 0
  1681  003C42  6A09               	clrf	_timer0_init$213+1,c
  1682  003C44  0E20               	movlw	32
  1683  003C46  6E08               	movwf	_timer0_init$213,c
  1684  003C48                     l3110:
  1685                           
  1686                           ; BSR set to: 0
  1687  003C48  5008               	movf	_timer0_init$213,w,c
  1688  003C4A  12F2               	iorwf	intcon,f,c	;volatile
  1689                           
  1690                           ; BSR set to: 0
  1691  003C4C  0012               	return		;funcret
  1692  003C4E                     __end_of_timer0_init:
  1693                           	opt stack 0
  1694                           tblptru	equ	0xFF8
  1695                           tblptrh	equ	0xFF7
  1696                           tblptrl	equ	0xFF6
  1697                           tablat	equ	0xFF5
  1698                           intcon	equ	0xFF2
  1699                           intcon2	equ	0xFF1
  1700                           postinc0	equ	0xFEE
  1701                           wreg	equ	0xFE8
  1702                           postdec1	equ	0xFE5
  1703                           fsr1l	equ	0xFE1
  1704                           status	equ	0xFD8
  1705                           
  1706 ;; *************** function _measure_inductance *****************
  1707 ;; Defined at:
  1708 ;;		line 192 in file "../../../src/measure.c"
  1709 ;; Parameters:    Size  Location     Type
  1710 ;;		None
  1711 ;; Auto vars:     Size  Location     Type
  1712 ;;  Lin             4   45[BANK0 ] unsigned char 
  1713 ;;  denominator     4   10[BANK0 ] unsigned char 
  1714 ;;  numerator       4    6[BANK0 ] unsigned char 
  1715 ;;  var             2   43[BANK0 ] unsigned short 
  1716 ;;  unit            1   30[BANK0 ] unsigned char 
  1717 ;; Return value:  Size  Location     Type
  1718 ;;		None               void
  1719 ;; Registers used:
  1720 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1721 ;; Tracked objects:
  1722 ;;		On entry : 0/0
  1723 ;;		On exit  : 0/0
  1724 ;;		Unchanged: 0/0
  1725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1726 ;;      Params:         0       0       0       0       0       0       0       0       0
  1727 ;;      Locals:         0      43       0       0       0       0       0       0       0
  1728 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1729 ;;      Totals:         0      43       0       0       0       0       0       0       0
  1730 ;;Total ram usage:       43 bytes
  1731 ;; Hardware stack levels used:    1
  1732 ;; Hardware stack levels required when called:    7
  1733 ;; This function calls:
  1734 ;;		___fldiv
  1735 ;;		___flge
  1736 ;;		___flmul
  1737 ;;		___flsub
  1738 ;;		___fltol
  1739 ;;		___lwtofl
  1740 ;;		_lcd_gotoxy
  1741 ;;		_measure_freq
  1742 ;;		_print_reading
  1743 ;;		_print_unit
  1744 ;;		_put_str
  1745 ;; This function is called by:
  1746 ;;		_main
  1747 ;; This function uses a non-reentrant model
  1748 ;;
  1749                           
  1750                           	psect	text5
  1751  0020CC                     __ptext5:
  1752                           	opt stack 0
  1753  0020CC                     _measure_inductance:
  1754                           	opt stack 23
  1755                           
  1756                           ;measure.c: 193: unsigned char unit;
  1757                           ;measure.c: 194: unsigned short int var;
  1758                           ;measure.c: 196: double Lin, numerator, denominator;
  1759                           ;measure.c: 199: lcd_gotoxy(0, 0);
  1760                           
  1761                           ; BSR set to: 0
  1762                           ;incstack = 0
  1763  0020CC  0E00               	movlw	0
  1764  0020CE  6A05               	clrf	lcd_gotoxy@row,c
  1765  0020D0  EC20  F020         	call	_lcd_gotoxy
  1766                           
  1767                           ;measure.c: 200: put_str("Inductivity ");
  1768  0020D4  0E6C               	movlw	STR_19& (0+255)
  1769  0020D6  EC03  F020         	call	_put_str
  1770                           
  1771                           ;measure.c: 202: var = measure_freq();
  1772  0020DA  EC3E  F01A         	call	_measure_freq	;wreg free
  1773  0020DE  C033  F08B         	movff	?_measure_freq,measure_inductance@var
  1774  0020E2  C034  F08C         	movff	?_measure_freq+1,measure_inductance@var+1
  1775                           
  1776                           ;measure.c: 204: F3 = (double)var;
  1777  0020E6  C08B  F038         	movff	measure_inductance@var,___lwtofl@c
  1778  0020EA  C08C  F039         	movff	measure_inductance@var+1,___lwtofl@c+1
  1779  0020EE  ECB6  F020         	call	___lwtofl	;wreg free
  1780  0020F2  C038  F0AC         	movff	?___lwtofl,_F3
  1781  0020F6  C039  F0AD         	movff	?___lwtofl+1,_F3+1
  1782  0020FA  C03A  F0AE         	movff	?___lwtofl+2,_F3+2
  1783  0020FE  C03B  F0AF         	movff	?___lwtofl+3,_F3+3
  1784                           
  1785                           ;measure.c: 205: if(F3 > F1)
  1786  002102  C0D5  F001         	movff	_F1,___flge@ff1
  1787  002106  C0D6  F002         	movff	_F1+1,___flge@ff1+1
  1788  00210A  C0D7  F003         	movff	_F1+2,___flge@ff1+2
  1789  00210E  C0D8  F004         	movff	_F1+3,___flge@ff1+3
  1790  002112  C0AC  F005         	movff	_F3,___flge@ff2
  1791  002116  C0AD  F006         	movff	_F3+1,___flge@ff2+1
  1792  00211A  C0AE  F007         	movff	_F3+2,___flge@ff2+2
  1793  00211E  C0AF  F008         	movff	_F3+3,___flge@ff2+3
  1794  002122  ECEB  F01E         	call	___flge	;wreg free
  1795  002126  E208               	bc	l3250
  1796                           
  1797                           ;measure.c: 206: F3 = F1;
  1798  002128  C0D5  F0AC         	movff	_F1,_F3
  1799  00212C  C0D6  F0AD         	movff	_F1+1,_F3+1
  1800  002130  C0D7  F0AE         	movff	_F1+2,_F3+2
  1801  002134  C0D8  F0AF         	movff	_F1+3,_F3+3
  1802  002138                     l3250:
  1803                           
  1804                           ;measure.c: 208: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1805  002138  C0A8  F045         	movff	_F2,___flsub@f2
  1806  00213C  C0A9  F046         	movff	_F2+1,___flsub@f2+1
  1807  002140  C0AA  F047         	movff	_F2+2,___flsub@f2+2
  1808  002144  C0AB  F048         	movff	_F2+3,___flsub@f2+3
  1809  002148  C0A8  F041         	movff	_F2,___flsub@f1
  1810  00214C  C0A9  F042         	movff	_F2+1,___flsub@f1+1
  1811  002150  C0AA  F043         	movff	_F2+2,___flsub@f1+2
  1812  002154  C0AB  F044         	movff	_F2+3,___flsub@f1+3
  1813  002158  ECA5  F01F         	call	___flsub	;wreg free
  1814  00215C  C041  F06E         	movff	?___flsub,_measure_inductance$1259
  1815  002160  C042  F06F         	movff	?___flsub+1,_measure_inductance$1259+1
  1816  002164  C043  F070         	movff	?___flsub+2,_measure_inductance$1259+2
  1817  002168  C044  F071         	movff	?___flsub+3,_measure_inductance$1259+3
  1818                           
  1819                           ;measure.c: 208: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1820  00216C  C06E  F045         	movff	_measure_inductance$1259,___flsub@f2
  1821  002170  C06F  F046         	movff	_measure_inductance$1259+1,___flsub@f2+1
  1822  002174  C070  F047         	movff	_measure_inductance$1259+2,___flsub@f2+2
  1823  002178  C071  F048         	movff	_measure_inductance$1259+3,___flsub@f2+3
  1824  00217C  C0D5  F01E         	movff	_F1,___flmul@f2
  1825  002180  C0D6  F01F         	movff	_F1+1,___flmul@f2+1
  1826  002184  C0D7  F020         	movff	_F1+2,___flmul@f2+2
  1827  002188  C0D8  F021         	movff	_F1+3,___flmul@f2+3
  1828  00218C  C0D5  F01A         	movff	_F1,___flmul@f1
  1829  002190  C0D6  F01B         	movff	_F1+1,___flmul@f1+1
  1830  002194  C0D7  F01C         	movff	_F1+2,___flmul@f1+2
  1831  002198  C0D8  F01D         	movff	_F1+3,___flmul@f1+3
  1832  00219C  EC87  F015         	call	___flmul	;wreg free
  1833  0021A0  C01A  F041         	movff	?___flmul,___flsub@f1
  1834  0021A4  C01B  F042         	movff	?___flmul+1,___flsub@f1+1
  1835  0021A8  C01C  F043         	movff	?___flmul+2,___flsub@f1+2
  1836  0021AC  C01D  F044         	movff	?___flmul+3,___flsub@f1+3
  1837  0021B0  ECA5  F01F         	call	___flsub	;wreg free
  1838  0021B4  C041  F07F         	movff	?___flsub,_measure_inductance$1260
  1839  0021B8  C042  F080         	movff	?___flsub+1,_measure_inductance$1260+1
  1840  0021BC  C043  F081         	movff	?___flsub+2,_measure_inductance$1260+2
  1841  0021C0  C044  F082         	movff	?___flsub+3,_measure_inductance$1260+3
  1842                           
  1843                           ;measure.c: 208: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1844  0021C4  C0AC  F01E         	movff	_F3,___flmul@f2
  1845  0021C8  C0AD  F01F         	movff	_F3+1,___flmul@f2+1
  1846  0021CC  C0AE  F020         	movff	_F3+2,___flmul@f2+2
  1847  0021D0  C0AF  F021         	movff	_F3+3,___flmul@f2+3
  1848  0021D4  C0AC  F01A         	movff	_F3,___flmul@f1
  1849  0021D8  C0AD  F01B         	movff	_F3+1,___flmul@f1+1
  1850  0021DC  C0AE  F01C         	movff	_F3+2,___flmul@f1+2
  1851  0021E0  C0AF  F01D         	movff	_F3+3,___flmul@f1+3
  1852  0021E4  EC87  F015         	call	___flmul	;wreg free
  1853  0021E8  C01A  F045         	movff	?___flmul,___flsub@f2
  1854  0021EC  C01B  F046         	movff	?___flmul+1,___flsub@f2+1
  1855  0021F0  C01C  F047         	movff	?___flmul+2,___flsub@f2+2
  1856  0021F4  C01D  F048         	movff	?___flmul+3,___flsub@f2+3
  1857  0021F8  C0D5  F01E         	movff	_F1,___flmul@f2
  1858  0021FC  C0D6  F01F         	movff	_F1+1,___flmul@f2+1
  1859  002200  C0D7  F020         	movff	_F1+2,___flmul@f2+2
  1860  002204  C0D8  F021         	movff	_F1+3,___flmul@f2+3
  1861  002208  C0D5  F01A         	movff	_F1,___flmul@f1
  1862  00220C  C0D6  F01B         	movff	_F1+1,___flmul@f1+1
  1863  002210  C0D7  F01C         	movff	_F1+2,___flmul@f1+2
  1864  002214  C0D8  F01D         	movff	_F1+3,___flmul@f1+3
  1865  002218  EC87  F015         	call	___flmul	;wreg free
  1866  00221C  C01A  F041         	movff	?___flmul,___flsub@f1
  1867  002220  C01B  F042         	movff	?___flmul+1,___flsub@f1+1
  1868  002224  C01C  F043         	movff	?___flmul+2,___flsub@f1+2
  1869  002228  C01D  F044         	movff	?___flmul+3,___flsub@f1+3
  1870  00222C  ECA5  F01F         	call	___flsub	;wreg free
  1871  002230  C041  F083         	movff	?___flsub,_measure_inductance$1261
  1872  002234  C042  F084         	movff	?___flsub+1,_measure_inductance$1261+1
  1873  002238  C043  F085         	movff	?___flsub+2,_measure_inductance$1261+2
  1874  00223C  C044  F086         	movff	?___flsub+3,_measure_inductance$1261+3
  1875                           
  1876                           ;measure.c: 208: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1877  002240  C07F  F01E         	movff	_measure_inductance$1260,___flmul@f2
  1878  002244  C080  F01F         	movff	_measure_inductance$1260+1,___flmul@f2+1
  1879  002248  C081  F020         	movff	_measure_inductance$1260+2,___flmul@f2+2
  1880  00224C  C082  F021         	movff	_measure_inductance$1260+3,___flmul@f2+3
  1881  002250  C083  F01A         	movff	_measure_inductance$1261,___flmul@f1
  1882  002254  C084  F01B         	movff	_measure_inductance$1261+1,___flmul@f1+1
  1883  002258  C085  F01C         	movff	_measure_inductance$1261+2,___flmul@f1+2
  1884  00225C  C086  F01D         	movff	_measure_inductance$1261+3,___flmul@f1+3
  1885  002260  EC87  F015         	call	___flmul	;wreg free
  1886  002264  C01A  F087         	movff	?___flmul,_measure_inductance$1262
  1887  002268  C01B  F088         	movff	?___flmul+1,_measure_inductance$1262+1
  1888  00226C  C01C  F089         	movff	?___flmul+2,_measure_inductance$1262+2
  1889  002270  C01D  F08A         	movff	?___flmul+3,_measure_inductance$1262+3
  1890                           
  1891                           ;measure.c: 208: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1892  002274  C087  F01A         	movff	_measure_inductance$1262,___flmul@f1
  1893  002278  C088  F01B         	movff	_measure_inductance$1262+1,___flmul@f1+1
  1894  00227C  C089  F01C         	movff	_measure_inductance$1262+2,___flmul@f1+2
  1895  002280  C08A  F01D         	movff	_measure_inductance$1262+3,___flmul@f1+3
  1896  002284  0E00               	movlw	0
  1897  002286  6E1E               	movwf	___flmul@f2,c
  1898  002288  0E40               	movlw	64
  1899  00228A  6E1F               	movwf	___flmul@f2+1,c
  1900  00228C  0E1C               	movlw	28
  1901  00228E  6E20               	movwf	___flmul@f2+2,c
  1902  002290  0E46               	movlw	70
  1903  002292  6E21               	movwf	___flmul@f2+3,c
  1904  002294  EC87  F015         	call	___flmul	;wreg free
  1905  002298  C01A  F066         	movff	?___flmul,measure_inductance@numerator
  1906  00229C  C01B  F067         	movff	?___flmul+1,measure_inductance@numerator+1
  1907  0022A0  C01C  F068         	movff	?___flmul+2,measure_inductance@numerator+2
  1908  0022A4  C01D  F069         	movff	?___flmul+3,measure_inductance@numerator+3
  1909                           
  1910                           ;measure.c: 210: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1911  0022A8  C0D5  F01E         	movff	_F1,___flmul@f2
  1912  0022AC  C0D6  F01F         	movff	_F1+1,___flmul@f2+1
  1913  0022B0  C0D7  F020         	movff	_F1+2,___flmul@f2+2
  1914  0022B4  C0D8  F021         	movff	_F1+3,___flmul@f2+3
  1915  0022B8  C0D5  F01A         	movff	_F1,___flmul@f1
  1916  0022BC  C0D6  F01B         	movff	_F1+1,___flmul@f1+1
  1917  0022C0  C0D7  F01C         	movff	_F1+2,___flmul@f1+2
  1918  0022C4  C0D8  F01D         	movff	_F1+3,___flmul@f1+3
  1919  0022C8  EC87  F015         	call	___flmul	;wreg free
  1920  0022CC  C01A  F072         	movff	?___flmul,_measure_inductance$1263
  1921  0022D0  C01B  F073         	movff	?___flmul+1,_measure_inductance$1263+1
  1922  0022D4  C01C  F074         	movff	?___flmul+2,_measure_inductance$1263+2
  1923  0022D8  C01D  F075         	movff	?___flmul+3,_measure_inductance$1263+3
  1924                           
  1925                           ;measure.c: 210: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1926  0022DC  C0A8  F01E         	movff	_F2,___flmul@f2
  1927  0022E0  C0A9  F01F         	movff	_F2+1,___flmul@f2+1
  1928  0022E4  C0AA  F020         	movff	_F2+2,___flmul@f2+2
  1929  0022E8  C0AB  F021         	movff	_F2+3,___flmul@f2+3
  1930  0022EC  C072  F01A         	movff	_measure_inductance$1263,___flmul@f1
  1931  0022F0  C073  F01B         	movff	_measure_inductance$1263+1,___flmul@f1+1
  1932  0022F4  C074  F01C         	movff	_measure_inductance$1263+2,___flmul@f1+2
  1933  0022F8  C075  F01D         	movff	_measure_inductance$1263+3,___flmul@f1+3
  1934  0022FC  EC87  F015         	call	___flmul	;wreg free
  1935  002300  C01A  F07F         	movff	?___flmul,_measure_inductance$1260
  1936  002304  C01B  F080         	movff	?___flmul+1,_measure_inductance$1260+1
  1937  002308  C01C  F081         	movff	?___flmul+2,_measure_inductance$1260+2
  1938  00230C  C01D  F082         	movff	?___flmul+3,_measure_inductance$1260+3
  1939                           
  1940                           ;measure.c: 210: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1941  002310  C0A8  F01E         	movff	_F2,___flmul@f2
  1942  002314  C0A9  F01F         	movff	_F2+1,___flmul@f2+1
  1943  002318  C0AA  F020         	movff	_F2+2,___flmul@f2+2
  1944  00231C  C0AB  F021         	movff	_F2+3,___flmul@f2+3
  1945  002320  C07F  F01A         	movff	_measure_inductance$1260,___flmul@f1
  1946  002324  C080  F01B         	movff	_measure_inductance$1260+1,___flmul@f1+1
  1947  002328  C081  F01C         	movff	_measure_inductance$1260+2,___flmul@f1+2
  1948  00232C  C082  F01D         	movff	_measure_inductance$1260+3,___flmul@f1+3
  1949  002330  EC87  F015         	call	___flmul	;wreg free
  1950  002334  C01A  F083         	movff	?___flmul,_measure_inductance$1261
  1951  002338  C01B  F084         	movff	?___flmul+1,_measure_inductance$1261+1
  1952  00233C  C01C  F085         	movff	?___flmul+2,_measure_inductance$1261+2
  1953  002340  C01D  F086         	movff	?___flmul+3,_measure_inductance$1261+3
  1954                           
  1955                           ;measure.c: 210: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1956  002344  C0AC  F01E         	movff	_F3,___flmul@f2
  1957  002348  C0AD  F01F         	movff	_F3+1,___flmul@f2+1
  1958  00234C  C0AE  F020         	movff	_F3+2,___flmul@f2+2
  1959  002350  C0AF  F021         	movff	_F3+3,___flmul@f2+3
  1960  002354  C083  F01A         	movff	_measure_inductance$1261,___flmul@f1
  1961  002358  C084  F01B         	movff	_measure_inductance$1261+1,___flmul@f1+1
  1962  00235C  C085  F01C         	movff	_measure_inductance$1261+2,___flmul@f1+2
  1963  002360  C086  F01D         	movff	_measure_inductance$1261+3,___flmul@f1+3
  1964  002364  EC87  F015         	call	___flmul	;wreg free
  1965  002368  C01A  F087         	movff	?___flmul,_measure_inductance$1262
  1966  00236C  C01B  F088         	movff	?___flmul+1,_measure_inductance$1262+1
  1967  002370  C01C  F089         	movff	?___flmul+2,_measure_inductance$1262+2
  1968  002374  C01D  F08A         	movff	?___flmul+3,_measure_inductance$1262+3
  1969                           
  1970                           ;measure.c: 210: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1971  002378  C0AC  F01E         	movff	_F3,___flmul@f2
  1972  00237C  C0AD  F01F         	movff	_F3+1,___flmul@f2+1
  1973  002380  C0AE  F020         	movff	_F3+2,___flmul@f2+2
  1974  002384  C0AF  F021         	movff	_F3+3,___flmul@f2+3
  1975  002388  C087  F01A         	movff	_measure_inductance$1262,___flmul@f1
  1976  00238C  C088  F01B         	movff	_measure_inductance$1262+1,___flmul@f1+1
  1977  002390  C089  F01C         	movff	_measure_inductance$1262+2,___flmul@f1+2
  1978  002394  C08A  F01D         	movff	_measure_inductance$1262+3,___flmul@f1+3
  1979  002398  EC87  F015         	call	___flmul	;wreg free
  1980  00239C  C01A  F076         	movff	?___flmul,_measure_inductance$1264
  1981  0023A0  C01B  F077         	movff	?___flmul+1,_measure_inductance$1264+1
  1982  0023A4  C01C  F078         	movff	?___flmul+2,_measure_inductance$1264+2
  1983  0023A8  C01D  F079         	movff	?___flmul+3,_measure_inductance$1264+3
  1984                           
  1985                           ;measure.c: 210: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1986  0023AC  C0D9  F01E         	movff	_CCal,___flmul@f2
  1987  0023B0  C0DA  F01F         	movff	_CCal+1,___flmul@f2+1
  1988  0023B4  C0DB  F020         	movff	_CCal+2,___flmul@f2+2
  1989  0023B8  C0DC  F021         	movff	_CCal+3,___flmul@f2+3
  1990  0023BC  C076  F01A         	movff	_measure_inductance$1264,___flmul@f1
  1991  0023C0  C077  F01B         	movff	_measure_inductance$1264+1,___flmul@f1+1
  1992  0023C4  C078  F01C         	movff	_measure_inductance$1264+2,___flmul@f1+2
  1993  0023C8  C079  F01D         	movff	_measure_inductance$1264+3,___flmul@f1+3
  1994  0023CC  EC87  F015         	call	___flmul	;wreg free
  1995  0023D0  C01A  F07A         	movff	?___flmul,_measure_inductance$1265
  1996  0023D4  C01B  F07B         	movff	?___flmul+1,_measure_inductance$1265+1
  1997  0023D8  C01C  F07C         	movff	?___flmul+2,_measure_inductance$1265+2
  1998  0023DC  C01D  F07D         	movff	?___flmul+3,_measure_inductance$1265+3
  1999                           
  2000                           ;measure.c: 210: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2001  0023E0  C07A  F01A         	movff	_measure_inductance$1265,___flmul@f1
  2002  0023E4  C07B  F01B         	movff	_measure_inductance$1265+1,___flmul@f1+1
  2003  0023E8  C07C  F01C         	movff	_measure_inductance$1265+2,___flmul@f1+2
  2004  0023EC  C07D  F01D         	movff	_measure_inductance$1265+3,___flmul@f1+3
  2005  0023F0  0EE6               	movlw	230
  2006  0023F2  6E1E               	movwf	___flmul@f2,c
  2007  0023F4  0EE9               	movlw	233
  2008  0023F6  6E1F               	movwf	___flmul@f2+1,c
  2009  0023F8  0E1D               	movlw	29
  2010  0023FA  6E20               	movwf	___flmul@f2+2,c
  2011  0023FC  0E42               	movlw	66
  2012  0023FE  6E21               	movwf	___flmul@f2+3,c
  2013  002400  EC87  F015         	call	___flmul	;wreg free
  2014  002404  C01A  F06A         	movff	?___flmul,measure_inductance@denominator
  2015  002408  C01B  F06B         	movff	?___flmul+1,measure_inductance@denominator+1
  2016  00240C  C01C  F06C         	movff	?___flmul+2,measure_inductance@denominator+2
  2017  002410  C01D  F06D         	movff	?___flmul+3,measure_inductance@denominator+3
  2018                           
  2019                           ;measure.c: 212: Lin = (numerator / denominator) * 1e+15l;
  2020  002414  C06A  F00F         	movff	measure_inductance@denominator,___fldiv@f2
  2021  002418  C06B  F010         	movff	measure_inductance@denominator+1,___fldiv@f2+1
  2022  00241C  C06C  F011         	movff	measure_inductance@denominator+2,___fldiv@f2+2
  2023  002420  C06D  F012         	movff	measure_inductance@denominator+3,___fldiv@f2+3
  2024  002424  C066  F00B         	movff	measure_inductance@numerator,___fldiv@f1
  2025  002428  C067  F00C         	movff	measure_inductance@numerator+1,___fldiv@f1+1
  2026  00242C  C068  F00D         	movff	measure_inductance@numerator+2,___fldiv@f1+2
  2027  002430  C069  F00E         	movff	measure_inductance@numerator+3,___fldiv@f1+3
  2028  002434  ECC3  F01C         	call	___fldiv	;wreg free
  2029  002438  C00B  F01A         	movff	?___fldiv,___flmul@f1
  2030  00243C  C00C  F01B         	movff	?___fldiv+1,___flmul@f1+1
  2031  002440  C00D  F01C         	movff	?___fldiv+2,___flmul@f1+2
  2032  002444  C00E  F01D         	movff	?___fldiv+3,___flmul@f1+3
  2033  002448  0EA9               	movlw	169
  2034  00244A  6E1E               	movwf	___flmul@f2,c
  2035  00244C  0E5F               	movlw	95
  2036  00244E  6E1F               	movwf	___flmul@f2+1,c
  2037  002450  0E63               	movlw	99
  2038  002452  6E20               	movwf	___flmul@f2+2,c
  2039  002454  0E58               	movlw	88
  2040  002456  6E21               	movwf	___flmul@f2+3,c
  2041  002458  EC87  F015         	call	___flmul	;wreg free
  2042  00245C  C01A  F08D         	movff	?___flmul,measure_inductance@Lin
  2043  002460  C01B  F08E         	movff	?___flmul+1,measure_inductance@Lin+1
  2044  002464  C01C  F08F         	movff	?___flmul+2,measure_inductance@Lin+2
  2045  002468  C01D  F090         	movff	?___flmul+3,measure_inductance@Lin+3
  2046                           
  2047                           ;measure.c: 214: if(Lin > 999) {
  2048  00246C  6A01               	clrf	___flge@ff1,c
  2049  00246E  0EC0               	movlw	192
  2050  002470  6E02               	movwf	___flge@ff1+1,c
  2051  002472  0E79               	movlw	121
  2052  002474  6E03               	movwf	___flge@ff1+2,c
  2053  002476  0E44               	movlw	68
  2054  002478  6E04               	movwf	___flge@ff1+3,c
  2055  00247A  C08D  F005         	movff	measure_inductance@Lin,___flge@ff2
  2056  00247E  C08E  F006         	movff	measure_inductance@Lin+1,___flge@ff2+1
  2057  002482  C08F  F007         	movff	measure_inductance@Lin+2,___flge@ff2+2
  2058  002486  C090  F008         	movff	measure_inductance@Lin+3,___flge@ff2+3
  2059  00248A  ECEB  F01E         	call	___flge	;wreg free
  2060  00248E  E27A               	bc	l3292
  2061                           
  2062                           ;measure.c: 215: if(Lin > (999e+03l)) {
  2063  002490  0E80               	movlw	128
  2064  002492  6E01               	movwf	___flge@ff1,c
  2065  002494  0EE5               	movlw	229
  2066  002496  6E02               	movwf	___flge@ff1+1,c
  2067  002498  0E73               	movlw	115
  2068  00249A  6E03               	movwf	___flge@ff1+2,c
  2069  00249C  0E49               	movlw	73
  2070  00249E  6E04               	movwf	___flge@ff1+3,c
  2071  0024A0  C08D  F005         	movff	measure_inductance@Lin,___flge@ff2
  2072  0024A4  C08E  F006         	movff	measure_inductance@Lin+1,___flge@ff2+1
  2073  0024A8  C08F  F007         	movff	measure_inductance@Lin+2,___flge@ff2+2
  2074  0024AC  C090  F008         	movff	measure_inductance@Lin+3,___flge@ff2+3
  2075  0024B0  ECEB  F01E         	call	___flge	;wreg free
  2076  0024B4  E24C               	bc	l3288
  2077                           
  2078                           ;measure.c: 216: if(Lin > (999e+06l)) {
  2079  0024B6  0E1F               	movlw	31
  2080  0024B8  6E01               	movwf	___flge@ff1,c
  2081  0024BA  0E2E               	movlw	46
  2082  0024BC  6E02               	movwf	___flge@ff1+1,c
  2083  0024BE  0E6E               	movlw	110
  2084  0024C0  6E03               	movwf	___flge@ff1+2,c
  2085  0024C2  0E4E               	movlw	78
  2086  0024C4  6E04               	movwf	___flge@ff1+3,c
  2087  0024C6  C08D  F005         	movff	measure_inductance@Lin,___flge@ff2
  2088  0024CA  C08E  F006         	movff	measure_inductance@Lin+1,___flge@ff2+1
  2089  0024CE  C08F  F007         	movff	measure_inductance@Lin+2,___flge@ff2+2
  2090  0024D2  C090  F008         	movff	measure_inductance@Lin+3,___flge@ff2+3
  2091  0024D6  ECEB  F01E         	call	___flge	;wreg free
  2092  0024DA  E21D               	bc	l3284
  2093                           
  2094                           ;measure.c: 217: Lin = Lin / (1e+09l);
  2095  0024DC  C08D  F00B         	movff	measure_inductance@Lin,___fldiv@f1
  2096  0024E0  C08E  F00C         	movff	measure_inductance@Lin+1,___fldiv@f1+1
  2097  0024E4  C08F  F00D         	movff	measure_inductance@Lin+2,___fldiv@f1+2
  2098  0024E8  C090  F00E         	movff	measure_inductance@Lin+3,___fldiv@f1+3
  2099  0024EC  0E28               	movlw	40
  2100  0024EE  6E0F               	movwf	___fldiv@f2,c
  2101  0024F0  0E6B               	movlw	107
  2102  0024F2  6E10               	movwf	___fldiv@f2+1,c
  2103  0024F4  0E6E               	movlw	110
  2104  0024F6  6E11               	movwf	___fldiv@f2+2,c
  2105  0024F8  0E4E               	movlw	78
  2106  0024FA  6E12               	movwf	___fldiv@f2+3,c
  2107  0024FC  ECC3  F01C         	call	___fldiv	;wreg free
  2108  002500  C00B  F08D         	movff	?___fldiv,measure_inductance@Lin
  2109  002504  C00C  F08E         	movff	?___fldiv+1,measure_inductance@Lin+1
  2110  002508  C00D  F08F         	movff	?___fldiv+2,measure_inductance@Lin+2
  2111  00250C  C00E  F090         	movff	?___fldiv+3,measure_inductance@Lin+3
  2112                           
  2113                           ;measure.c: 218: unit = 0;
  2114  002510  0100               	movlb	0	; () banked
  2115  002512  6B7E               	clrf	measure_inductance@unit& (0+255),b
  2116                           
  2117                           ;measure.c: 219: } else {
  2118  002514  D03A               	goto	l3294
  2119  002516                     l3284:
  2120                           
  2121                           ;measure.c: 220: Lin = Lin / (1e+06l);
  2122  002516  C08D  F00B         	movff	measure_inductance@Lin,___fldiv@f1
  2123  00251A  C08E  F00C         	movff	measure_inductance@Lin+1,___fldiv@f1+1
  2124  00251E  C08F  F00D         	movff	measure_inductance@Lin+2,___fldiv@f1+2
  2125  002522  C090  F00E         	movff	measure_inductance@Lin+3,___fldiv@f1+3
  2126  002526  0E00               	movlw	0
  2127  002528  6E0F               	movwf	___fldiv@f2,c
  2128  00252A  0E24               	movlw	36
  2129  00252C  6E10               	movwf	___fldiv@f2+1,c
  2130  00252E  0E74               	movlw	116
  2131  002530  6E11               	movwf	___fldiv@f2+2,c
  2132  002532  0E49               	movlw	73
  2133  002534  6E12               	movwf	___fldiv@f2+3,c
  2134  002536  ECC3  F01C         	call	___fldiv	;wreg free
  2135  00253A  C00B  F08D         	movff	?___fldiv,measure_inductance@Lin
  2136  00253E  C00C  F08E         	movff	?___fldiv+1,measure_inductance@Lin+1
  2137  002542  C00D  F08F         	movff	?___fldiv+2,measure_inductance@Lin+2
  2138  002546  C00E  F090         	movff	?___fldiv+3,measure_inductance@Lin+3
  2139                           
  2140                           ;measure.c: 221: unit = 1;
  2141  00254A  0E01               	movlw	1
  2142  00254C  D01C               	goto	L1
  2143  00254E                     l3288:
  2144                           
  2145                           ;measure.c: 224: Lin = Lin / 1e+03l;
  2146  00254E  C08D  F00B         	movff	measure_inductance@Lin,___fldiv@f1
  2147  002552  C08E  F00C         	movff	measure_inductance@Lin+1,___fldiv@f1+1
  2148  002556  C08F  F00D         	movff	measure_inductance@Lin+2,___fldiv@f1+2
  2149  00255A  C090  F00E         	movff	measure_inductance@Lin+3,___fldiv@f1+3
  2150  00255E  0E00               	movlw	0
  2151  002560  6E0F               	movwf	___fldiv@f2,c
  2152  002562  6E10               	movwf	___fldiv@f2+1,c
  2153  002564  0E7A               	movlw	122
  2154  002566  6E11               	movwf	___fldiv@f2+2,c
  2155  002568  0E44               	movlw	68
  2156  00256A  6E12               	movwf	___fldiv@f2+3,c
  2157  00256C  ECC3  F01C         	call	___fldiv	;wreg free
  2158  002570  C00B  F08D         	movff	?___fldiv,measure_inductance@Lin
  2159  002574  C00C  F08E         	movff	?___fldiv+1,measure_inductance@Lin+1
  2160  002578  C00D  F08F         	movff	?___fldiv+2,measure_inductance@Lin+2
  2161  00257C  C00E  F090         	movff	?___fldiv+3,measure_inductance@Lin+3
  2162                           
  2163                           ;measure.c: 225: unit = 2;
  2164  002580  0E02               	movlw	2
  2165  002582  D001               	goto	L1
  2166  002584                     l3292:
  2167                           
  2168                           ;measure.c: 228: unit = 3;
  2169  002584  0E03               	movlw	3
  2170  002586                     L1:
  2171  002586  0100               	movlb	0	; () banked
  2172  002588  6F7E               	movwf	measure_inductance@unit& (0+255),b
  2173  00258A                     l3294:
  2174                           
  2175                           ; BSR set to: 0
  2176                           ;measure.c: 230: Lin = Lin * 100;
  2177  00258A  C08D  F01A         	movff	measure_inductance@Lin,___flmul@f1
  2178  00258E  C08E  F01B         	movff	measure_inductance@Lin+1,___flmul@f1+1
  2179  002592  C08F  F01C         	movff	measure_inductance@Lin+2,___flmul@f1+2
  2180  002596  C090  F01D         	movff	measure_inductance@Lin+3,___flmul@f1+3
  2181  00259A  0E00               	movlw	0
  2182  00259C  6E1E               	movwf	___flmul@f2,c
  2183  00259E  6E1F               	movwf	___flmul@f2+1,c
  2184  0025A0  0EC8               	movlw	200
  2185  0025A2  6E20               	movwf	___flmul@f2+2,c
  2186  0025A4  0E42               	movlw	66
  2187  0025A6  6E21               	movwf	___flmul@f2+3,c
  2188  0025A8  EC87  F015         	call	___flmul	;wreg free
  2189  0025AC  C01A  F08D         	movff	?___flmul,measure_inductance@Lin
  2190  0025B0  C01B  F08E         	movff	?___flmul+1,measure_inductance@Lin+1
  2191  0025B4  C01C  F08F         	movff	?___flmul+2,measure_inductance@Lin+2
  2192  0025B8  C01D  F090         	movff	?___flmul+3,measure_inductance@Lin+3
  2193                           
  2194                           ;measure.c: 231: var = (unsigned short int)Lin;
  2195  0025BC  C08D  F05B         	movff	measure_inductance@Lin,___fltol@f1
  2196  0025C0  C08E  F05C         	movff	measure_inductance@Lin+1,___fltol@f1+1
  2197  0025C4  C08F  F05D         	movff	measure_inductance@Lin+2,___fltol@f1+2
  2198  0025C8  C090  F05E         	movff	measure_inductance@Lin+3,___fltol@f1+3
  2199  0025CC  EC16  F01D         	call	___fltol	;wreg free
  2200  0025D0  C05B  F08B         	movff	?___fltol,measure_inductance@var
  2201  0025D4  C05C  F08C         	movff	?___fltol+1,measure_inductance@var+1
  2202                           
  2203                           ; BSR set to: 0
  2204                           ;measure.c: 233: print_reading(var);
  2205  0025D8  C08B  F033         	movff	measure_inductance@var,print_reading@measurement
  2206  0025DC  C08C  F034         	movff	measure_inductance@var+1,print_reading@measurement+1
  2207  0025E0  EC60  F01E         	call	_print_reading	;wreg free
  2208                           
  2209                           ;measure.c: 234: print_unit(unit);
  2210  0025E4  0100               	movlb	0	; () banked
  2211  0025E6  517E               	movf	measure_inductance@unit& (0+255),w,b
  2212  0025E8  ECA1  F020         	call	_print_unit
  2213  0025EC  0012               	return		;funcret
  2214  0025EE                     __end_of_measure_inductance:
  2215                           	opt stack 0
  2216                           tblptru	equ	0xFF8
  2217                           tblptrh	equ	0xFF7
  2218                           tblptrl	equ	0xFF6
  2219                           tablat	equ	0xFF5
  2220                           intcon	equ	0xFF2
  2221                           intcon2	equ	0xFF1
  2222                           postinc0	equ	0xFEE
  2223                           wreg	equ	0xFE8
  2224                           postdec1	equ	0xFE5
  2225                           fsr1l	equ	0xFE1
  2226                           status	equ	0xFD8
  2227                           
  2228 ;; *************** function _measure_capacitance *****************
  2229 ;; Defined at:
  2230 ;;		line 113 in file "../../../src/measure.c"
  2231 ;; Parameters:    Size  Location     Type
  2232 ;;		None
  2233 ;; Auto vars:     Size  Location     Type
  2234 ;;  Cin             4   21[BANK0 ] unsigned char 
  2235 ;;  var             2   19[BANK0 ] unsigned short 
  2236 ;;  unit            1   18[BANK0 ] unsigned char 
  2237 ;; Return value:  Size  Location     Type
  2238 ;;		None               void
  2239 ;; Registers used:
  2240 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2241 ;; Tracked objects:
  2242 ;;		On entry : 0/0
  2243 ;;		On exit  : 0/0
  2244 ;;		Unchanged: 0/0
  2245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2246 ;;      Params:         0       0       0       0       0       0       0       0       0
  2247 ;;      Locals:         0      19       0       0       0       0       0       0       0
  2248 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2249 ;;      Totals:         0      19       0       0       0       0       0       0       0
  2250 ;;Total ram usage:       19 bytes
  2251 ;; Hardware stack levels used:    1
  2252 ;; Hardware stack levels required when called:    7
  2253 ;; This function calls:
  2254 ;;		___fldiv
  2255 ;;		___flge
  2256 ;;		___flmul
  2257 ;;		___flsub
  2258 ;;		___fltol
  2259 ;;		___lwtofl
  2260 ;;		_lcd_gotoxy
  2261 ;;		_measure_freq
  2262 ;;		_print_reading
  2263 ;;		_print_unit
  2264 ;;		_put_str
  2265 ;; This function is called by:
  2266 ;;		_main
  2267 ;; This function uses a non-reentrant model
  2268 ;;
  2269                           
  2270                           	psect	text6
  2271  0025EE                     __ptext6:
  2272                           	opt stack 0
  2273  0025EE                     _measure_capacitance:
  2274                           	opt stack 23
  2275                           
  2276                           ;measure.c: 114: unsigned char unit;
  2277                           ;measure.c: 115: unsigned short int var;
  2278                           ;measure.c: 117: double Cin;
  2279                           ;measure.c: 121: lcd_gotoxy(0, 0);
  2280                           
  2281                           ;incstack = 0
  2282  0025EE  0E00               	movlw	0
  2283  0025F0  6A05               	clrf	lcd_gotoxy@row,c
  2284  0025F2  EC20  F020         	call	_lcd_gotoxy
  2285                           
  2286                           ;measure.c: 122: put_str("Capacity ");
  2287  0025F6  0E8F               	movlw	STR_18& (0+255)
  2288  0025F8  EC03  F020         	call	_put_str
  2289                           
  2290                           ;measure.c: 124: var = measure_freq();
  2291  0025FC  EC3E  F01A         	call	_measure_freq	;wreg free
  2292  002600  C033  F073         	movff	?_measure_freq,measure_capacitance@var
  2293  002604  C034  F074         	movff	?_measure_freq+1,measure_capacitance@var+1
  2294                           
  2295                           ;measure.c: 126: F3 = (double)var;
  2296  002608  C073  F038         	movff	measure_capacitance@var,___lwtofl@c
  2297  00260C  C074  F039         	movff	measure_capacitance@var+1,___lwtofl@c+1
  2298  002610  ECB6  F020         	call	___lwtofl	;wreg free
  2299  002614  C038  F0AC         	movff	?___lwtofl,_F3
  2300  002618  C039  F0AD         	movff	?___lwtofl+1,_F3+1
  2301  00261C  C03A  F0AE         	movff	?___lwtofl+2,_F3+2
  2302  002620  C03B  F0AF         	movff	?___lwtofl+3,_F3+3
  2303                           
  2304                           ;measure.c: 149: putchar_ptr = &output_putch;
  2305  002624  0E7A               	movlw	low _output_putch
  2306  002626  0100               	movlb	0	; () banked
  2307  002628  6FE5               	movwf	_putchar_ptr& (0+255),b
  2308  00262A  0E42               	movlw	high _output_putch
  2309  00262C  6FE6               	movwf	(_putchar_ptr+1)& (0+255),b
  2310                           
  2311                           ; BSR set to: 0
  2312                           ;measure.c: 151: if(F3 > F1)
  2313  00262E  C0D5  F001         	movff	_F1,___flge@ff1
  2314  002632  C0D6  F002         	movff	_F1+1,___flge@ff1+1
  2315  002636  C0D7  F003         	movff	_F1+2,___flge@ff1+2
  2316  00263A  C0D8  F004         	movff	_F1+3,___flge@ff1+3
  2317  00263E  C0AC  F005         	movff	_F3,___flge@ff2
  2318  002642  C0AD  F006         	movff	_F3+1,___flge@ff2+1
  2319  002646  C0AE  F007         	movff	_F3+2,___flge@ff2+2
  2320  00264A  C0AF  F008         	movff	_F3+3,___flge@ff2+3
  2321  00264E  ECEB  F01E         	call	___flge	;wreg free
  2322  002652  E208               	bc	l3208
  2323                           
  2324                           ;measure.c: 152: F3 = F1;
  2325  002654  C0D5  F0AC         	movff	_F1,_F3
  2326  002658  C0D6  F0AD         	movff	_F1+1,_F3+1
  2327  00265C  C0D7  F0AE         	movff	_F1+2,_F3+2
  2328  002660  C0D8  F0AF         	movff	_F1+3,_F3+3
  2329  002664                     l3208:
  2330                           
  2331                           ;measure.c: 154: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2332  002664  C0AC  F01E         	movff	_F3,___flmul@f2
  2333  002668  C0AD  F01F         	movff	_F3+1,___flmul@f2+1
  2334  00266C  C0AE  F020         	movff	_F3+2,___flmul@f2+2
  2335  002670  C0AF  F021         	movff	_F3+3,___flmul@f2+3
  2336  002674  C0AC  F01A         	movff	_F3,___flmul@f1
  2337  002678  C0AD  F01B         	movff	_F3+1,___flmul@f1+1
  2338  00267C  C0AE  F01C         	movff	_F3+2,___flmul@f1+2
  2339  002680  C0AF  F01D         	movff	_F3+3,___flmul@f1+3
  2340  002684  EC87  F015         	call	___flmul	;wreg free
  2341  002688  C01A  F045         	movff	?___flmul,___flsub@f2
  2342  00268C  C01B  F046         	movff	?___flmul+1,___flsub@f2+1
  2343  002690  C01C  F047         	movff	?___flmul+2,___flsub@f2+2
  2344  002694  C01D  F048         	movff	?___flmul+3,___flsub@f2+3
  2345  002698  C0D5  F01E         	movff	_F1,___flmul@f2
  2346  00269C  C0D6  F01F         	movff	_F1+1,___flmul@f2+1
  2347  0026A0  C0D7  F020         	movff	_F1+2,___flmul@f2+2
  2348  0026A4  C0D8  F021         	movff	_F1+3,___flmul@f2+3
  2349  0026A8  C0D5  F01A         	movff	_F1,___flmul@f1
  2350  0026AC  C0D6  F01B         	movff	_F1+1,___flmul@f1+1
  2351  0026B0  C0D7  F01C         	movff	_F1+2,___flmul@f1+2
  2352  0026B4  C0D8  F01D         	movff	_F1+3,___flmul@f1+3
  2353  0026B8  EC87  F015         	call	___flmul	;wreg free
  2354  0026BC  C01A  F041         	movff	?___flmul,___flsub@f1
  2355  0026C0  C01B  F042         	movff	?___flmul+1,___flsub@f1+1
  2356  0026C4  C01C  F043         	movff	?___flmul+2,___flsub@f1+2
  2357  0026C8  C01D  F044         	movff	?___flmul+3,___flsub@f1+3
  2358  0026CC  ECA5  F01F         	call	___flsub	;wreg free
  2359  0026D0  C041  F066         	movff	?___flsub,_measure_capacitance$1256
  2360  0026D4  C042  F067         	movff	?___flsub+1,_measure_capacitance$1256+1
  2361  0026D8  C043  F068         	movff	?___flsub+2,_measure_capacitance$1256+2
  2362  0026DC  C044  F069         	movff	?___flsub+3,_measure_capacitance$1256+3
  2363                           
  2364                           ;measure.c: 154: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2365  0026E0  C0A8  F01E         	movff	_F2,___flmul@f2
  2366  0026E4  C0A9  F01F         	movff	_F2+1,___flmul@f2+1
  2367  0026E8  C0AA  F020         	movff	_F2+2,___flmul@f2+2
  2368  0026EC  C0AB  F021         	movff	_F2+3,___flmul@f2+3
  2369  0026F0  C066  F01A         	movff	_measure_capacitance$1256,___flmul@f1
  2370  0026F4  C067  F01B         	movff	_measure_capacitance$1256+1,___flmul@f1+1
  2371  0026F8  C068  F01C         	movff	_measure_capacitance$1256+2,___flmul@f1+2
  2372  0026FC  C069  F01D         	movff	_measure_capacitance$1256+3,___flmul@f1+3
  2373  002700  EC87  F015         	call	___flmul	;wreg free
  2374  002704  C01A  F06A         	movff	?___flmul,_measure_capacitance$1257
  2375  002708  C01B  F06B         	movff	?___flmul+1,_measure_capacitance$1257+1
  2376  00270C  C01C  F06C         	movff	?___flmul+2,_measure_capacitance$1257+2
  2377  002710  C01D  F06D         	movff	?___flmul+3,_measure_capacitance$1257+3
  2378                           
  2379                           ;measure.c: 154: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2380  002714  C0A8  F01E         	movff	_F2,___flmul@f2
  2381  002718  C0A9  F01F         	movff	_F2+1,___flmul@f2+1
  2382  00271C  C0AA  F020         	movff	_F2+2,___flmul@f2+2
  2383  002720  C0AB  F021         	movff	_F2+3,___flmul@f2+3
  2384  002724  C06A  F01A         	movff	_measure_capacitance$1257,___flmul@f1
  2385  002728  C06B  F01B         	movff	_measure_capacitance$1257+1,___flmul@f1+1
  2386  00272C  C06C  F01C         	movff	_measure_capacitance$1257+2,___flmul@f1+2
  2387  002730  C06D  F01D         	movff	_measure_capacitance$1257+3,___flmul@f1+3
  2388  002734  EC87  F015         	call	___flmul	;wreg free
  2389  002738  C01A  F06E         	movff	?___flmul,_measure_capacitance$1258
  2390  00273C  C01B  F06F         	movff	?___flmul+1,_measure_capacitance$1258+1
  2391  002740  C01C  F070         	movff	?___flmul+2,_measure_capacitance$1258+2
  2392  002744  C01D  F071         	movff	?___flmul+3,_measure_capacitance$1258+3
  2393                           
  2394                           ;measure.c: 154: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2395  002748  C06E  F01A         	movff	_measure_capacitance$1258,___flmul@f1
  2396  00274C  C06F  F01B         	movff	_measure_capacitance$1258+1,___flmul@f1+1
  2397  002750  C070  F01C         	movff	_measure_capacitance$1258+2,___flmul@f1+2
  2398  002754  C071  F01D         	movff	_measure_capacitance$1258+3,___flmul@f1+3
  2399  002758  C0D9  F01E         	movff	_CCal,___flmul@f2
  2400  00275C  C0DA  F01F         	movff	_CCal+1,___flmul@f2+1
  2401  002760  C0DB  F020         	movff	_CCal+2,___flmul@f2+2
  2402  002764  C0DC  F021         	movff	_CCal+3,___flmul@f2+3
  2403  002768  EC87  F015         	call	___flmul	;wreg free
  2404  00276C  C01A  F075         	movff	?___flmul,measure_capacitance@Cin
  2405  002770  C01B  F076         	movff	?___flmul+1,measure_capacitance@Cin+1
  2406  002774  C01C  F077         	movff	?___flmul+2,measure_capacitance@Cin+2
  2407  002778  C01D  F078         	movff	?___flmul+3,measure_capacitance@Cin+3
  2408                           
  2409                           ;measure.c: 164: if(Cin > 999) {
  2410  00277C  6A01               	clrf	___flge@ff1,c
  2411  00277E  0EC0               	movlw	192
  2412  002780  6E02               	movwf	___flge@ff1+1,c
  2413  002782  0E79               	movlw	121
  2414  002784  6E03               	movwf	___flge@ff1+2,c
  2415  002786  0E44               	movlw	68
  2416  002788  6E04               	movwf	___flge@ff1+3,c
  2417  00278A  C075  F005         	movff	measure_capacitance@Cin,___flge@ff2
  2418  00278E  C076  F006         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2419  002792  C077  F007         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2420  002796  C078  F008         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2421  00279A  ECEB  F01E         	call	___flge	;wreg free
  2422  00279E  E279               	bc	l3228
  2423                           
  2424                           ;measure.c: 165: if(Cin > (999e+03l)) {
  2425  0027A0  0E80               	movlw	128
  2426  0027A2  6E01               	movwf	___flge@ff1,c
  2427  0027A4  0EE5               	movlw	229
  2428  0027A6  6E02               	movwf	___flge@ff1+1,c
  2429  0027A8  0E73               	movlw	115
  2430  0027AA  6E03               	movwf	___flge@ff1+2,c
  2431  0027AC  0E49               	movlw	73
  2432  0027AE  6E04               	movwf	___flge@ff1+3,c
  2433  0027B0  C075  F005         	movff	measure_capacitance@Cin,___flge@ff2
  2434  0027B4  C076  F006         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2435  0027B8  C077  F007         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2436  0027BC  C078  F008         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2437  0027C0  ECEB  F01E         	call	___flge	;wreg free
  2438  0027C4  E24B               	bc	l3224
  2439                           
  2440                           ;measure.c: 166: if(Cin > (999e+06l)) {
  2441  0027C6  0E1F               	movlw	31
  2442  0027C8  6E01               	movwf	___flge@ff1,c
  2443  0027CA  0E2E               	movlw	46
  2444  0027CC  6E02               	movwf	___flge@ff1+1,c
  2445  0027CE  0E6E               	movlw	110
  2446  0027D0  6E03               	movwf	___flge@ff1+2,c
  2447  0027D2  0E4E               	movlw	78
  2448  0027D4  6E04               	movwf	___flge@ff1+3,c
  2449  0027D6  C075  F005         	movff	measure_capacitance@Cin,___flge@ff2
  2450  0027DA  C076  F006         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2451  0027DE  C077  F007         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2452  0027E2  C078  F008         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2453  0027E6  ECEB  F01E         	call	___flge	;wreg free
  2454  0027EA  E21C               	bc	l3220
  2455                           
  2456                           ;measure.c: 167: Cin = Cin / (1e+09);
  2457  0027EC  C075  F00B         	movff	measure_capacitance@Cin,___fldiv@f1
  2458  0027F0  C076  F00C         	movff	measure_capacitance@Cin+1,___fldiv@f1+1
  2459  0027F4  C077  F00D         	movff	measure_capacitance@Cin+2,___fldiv@f1+2
  2460  0027F8  C078  F00E         	movff	measure_capacitance@Cin+3,___fldiv@f1+3
  2461  0027FC  0E28               	movlw	40
  2462  0027FE  6E0F               	movwf	___fldiv@f2,c
  2463  002800  0E6B               	movlw	107
  2464  002802  6E10               	movwf	___fldiv@f2+1,c
  2465  002804  0E6E               	movlw	110
  2466  002806  6E11               	movwf	___fldiv@f2+2,c
  2467  002808  0E4E               	movlw	78
  2468  00280A  6E12               	movwf	___fldiv@f2+3,c
  2469  00280C  ECC3  F01C         	call	___fldiv	;wreg free
  2470  002810  C00B  F075         	movff	?___fldiv,measure_capacitance@Cin
  2471  002814  C00C  F076         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2472  002818  C00D  F077         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2473  00281C  C00E  F078         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2474                           
  2475                           ;measure.c: 168: unit = 4;
  2476  002820  0E04               	movlw	4
  2477  002822  D038               	goto	L2
  2478  002824                     l3220:
  2479                           
  2480                           ;measure.c: 170: Cin = Cin / (1e+06);
  2481  002824  C075  F00B         	movff	measure_capacitance@Cin,___fldiv@f1
  2482  002828  C076  F00C         	movff	measure_capacitance@Cin+1,___fldiv@f1+1
  2483  00282C  C077  F00D         	movff	measure_capacitance@Cin+2,___fldiv@f1+2
  2484  002830  C078  F00E         	movff	measure_capacitance@Cin+3,___fldiv@f1+3
  2485  002834  0E00               	movlw	0
  2486  002836  6E0F               	movwf	___fldiv@f2,c
  2487  002838  0E24               	movlw	36
  2488  00283A  6E10               	movwf	___fldiv@f2+1,c
  2489  00283C  0E74               	movlw	116
  2490  00283E  6E11               	movwf	___fldiv@f2+2,c
  2491  002840  0E49               	movlw	73
  2492  002842  6E12               	movwf	___fldiv@f2+3,c
  2493  002844  ECC3  F01C         	call	___fldiv	;wreg free
  2494  002848  C00B  F075         	movff	?___fldiv,measure_capacitance@Cin
  2495  00284C  C00C  F076         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2496  002850  C00D  F077         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2497  002854  C00E  F078         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2498                           
  2499                           ;measure.c: 171: unit = 5;
  2500  002858  0E05               	movlw	5
  2501  00285A  D01C               	goto	L2
  2502  00285C                     l3224:
  2503                           
  2504                           ;measure.c: 174: Cin = Cin / 1e+03;
  2505  00285C  C075  F00B         	movff	measure_capacitance@Cin,___fldiv@f1
  2506  002860  C076  F00C         	movff	measure_capacitance@Cin+1,___fldiv@f1+1
  2507  002864  C077  F00D         	movff	measure_capacitance@Cin+2,___fldiv@f1+2
  2508  002868  C078  F00E         	movff	measure_capacitance@Cin+3,___fldiv@f1+3
  2509  00286C  0E00               	movlw	0
  2510  00286E  6E0F               	movwf	___fldiv@f2,c
  2511  002870  6E10               	movwf	___fldiv@f2+1,c
  2512  002872  0E7A               	movlw	122
  2513  002874  6E11               	movwf	___fldiv@f2+2,c
  2514  002876  0E44               	movlw	68
  2515  002878  6E12               	movwf	___fldiv@f2+3,c
  2516  00287A  ECC3  F01C         	call	___fldiv	;wreg free
  2517  00287E  C00B  F075         	movff	?___fldiv,measure_capacitance@Cin
  2518  002882  C00C  F076         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2519  002886  C00D  F077         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2520  00288A  C00E  F078         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2521                           
  2522                           ;measure.c: 175: unit = 6;
  2523  00288E  0E06               	movlw	6
  2524  002890  D001               	goto	L2
  2525  002892                     l3228:
  2526                           
  2527                           ;measure.c: 178: unit = 7;
  2528  002892  0E07               	movlw	7
  2529  002894                     L2:
  2530  002894  0100               	movlb	0	; () banked
  2531  002896  6F72               	movwf	measure_capacitance@unit& (0+255),b
  2532                           
  2533                           ; BSR set to: 0
  2534                           ;measure.c: 180: Cin = Cin * 100;
  2535  002898  C075  F01A         	movff	measure_capacitance@Cin,___flmul@f1
  2536  00289C  C076  F01B         	movff	measure_capacitance@Cin+1,___flmul@f1+1
  2537  0028A0  C077  F01C         	movff	measure_capacitance@Cin+2,___flmul@f1+2
  2538  0028A4  C078  F01D         	movff	measure_capacitance@Cin+3,___flmul@f1+3
  2539  0028A8  0E00               	movlw	0
  2540  0028AA  6E1E               	movwf	___flmul@f2,c
  2541  0028AC  6E1F               	movwf	___flmul@f2+1,c
  2542  0028AE  0EC8               	movlw	200
  2543  0028B0  6E20               	movwf	___flmul@f2+2,c
  2544  0028B2  0E42               	movlw	66
  2545  0028B4  6E21               	movwf	___flmul@f2+3,c
  2546  0028B6  EC87  F015         	call	___flmul	;wreg free
  2547  0028BA  C01A  F075         	movff	?___flmul,measure_capacitance@Cin
  2548  0028BE  C01B  F076         	movff	?___flmul+1,measure_capacitance@Cin+1
  2549  0028C2  C01C  F077         	movff	?___flmul+2,measure_capacitance@Cin+2
  2550  0028C6  C01D  F078         	movff	?___flmul+3,measure_capacitance@Cin+3
  2551                           
  2552                           ;measure.c: 181: var = (unsigned short int)Cin;
  2553  0028CA  C075  F05B         	movff	measure_capacitance@Cin,___fltol@f1
  2554  0028CE  C076  F05C         	movff	measure_capacitance@Cin+1,___fltol@f1+1
  2555  0028D2  C077  F05D         	movff	measure_capacitance@Cin+2,___fltol@f1+2
  2556  0028D6  C078  F05E         	movff	measure_capacitance@Cin+3,___fltol@f1+3
  2557  0028DA  EC16  F01D         	call	___fltol	;wreg free
  2558  0028DE  C05B  F073         	movff	?___fltol,measure_capacitance@var
  2559  0028E2  C05C  F074         	movff	?___fltol+1,measure_capacitance@var+1
  2560                           
  2561                           ; BSR set to: 0
  2562                           ;measure.c: 183: print_reading(var);
  2563  0028E6  C073  F033         	movff	measure_capacitance@var,print_reading@measurement
  2564  0028EA  C074  F034         	movff	measure_capacitance@var+1,print_reading@measurement+1
  2565  0028EE  EC60  F01E         	call	_print_reading	;wreg free
  2566                           
  2567                           ;measure.c: 184: print_unit(unit);
  2568  0028F2  0100               	movlb	0	; () banked
  2569  0028F4  5172               	movf	measure_capacitance@unit& (0+255),w,b
  2570  0028F6  ECA1  F020         	call	_print_unit
  2571  0028FA  0012               	return		;funcret
  2572  0028FC                     __end_of_measure_capacitance:
  2573                           	opt stack 0
  2574                           tblptru	equ	0xFF8
  2575                           tblptrh	equ	0xFF7
  2576                           tblptrl	equ	0xFF6
  2577                           tablat	equ	0xFF5
  2578                           intcon	equ	0xFF2
  2579                           intcon2	equ	0xFF1
  2580                           postinc0	equ	0xFEE
  2581                           wreg	equ	0xFE8
  2582                           postdec1	equ	0xFE5
  2583                           fsr1l	equ	0xFE1
  2584                           status	equ	0xFD8
  2585                           
  2586 ;; *************** function _print_unit *****************
  2587 ;; Defined at:
  2588 ;;		line 411 in file "../../../src/print.c"
  2589 ;; Parameters:    Size  Location     Type
  2590 ;;  unit            1    wreg     unsigned char 
  2591 ;; Auto vars:     Size  Location     Type
  2592 ;;  unit            1    0[COMRAM] unsigned char 
  2593 ;; Return value:  Size  Location     Type
  2594 ;;		None               void
  2595 ;; Registers used:
  2596 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2597 ;; Tracked objects:
  2598 ;;		On entry : F/0
  2599 ;;		On exit  : 0/0
  2600 ;;		Unchanged: 0/0
  2601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2602 ;;      Params:         0       0       0       0       0       0       0       0       0
  2603 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2604 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2605 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2606 ;;Total ram usage:        2 bytes
  2607 ;; Hardware stack levels used:    1
  2608 ;; Hardware stack levels required when called:    5
  2609 ;; This function calls:
  2610 ;;		_lcd_gotoxy
  2611 ;;		_uart_puts
  2612 ;; This function is called by:
  2613 ;;		_measure_capacitance
  2614 ;;		_measure_inductance
  2615 ;; This function uses a non-reentrant model
  2616 ;;
  2617                           
  2618                           	psect	text7
  2619  004142                     __ptext7:
  2620                           	opt stack 0
  2621  004142                     _print_unit:
  2622                           	opt stack 24
  2623                           
  2624                           ; BSR set to: 0
  2625                           ;print.c: 419: static const char* units[8] = {"H", "mH", "uH", "nH", "mF", "uF", "nF", "
      +                          pF"};
  2626                           ;print.c: 420: lcd_gotoxy(14, 0);
  2627                           
  2628                           ;incstack = 0
  2629  004142  6A05               	clrf	lcd_gotoxy@row,c
  2630  004144  0E0E               	movlw	14
  2631  004146  EC20  F020         	call	_lcd_gotoxy
  2632                           
  2633                           ;print.c: 424: lcd_gotoxy(16 - (buffer.n - buffer.p), 0);
  2634  00414A  6A05               	clrf	lcd_gotoxy@row,c
  2635  00414C  0100               	movlb	0	; () banked
  2636  00414E  39D2               	swapf	(_buffer+16)& (0+255),w,b
  2637  004150  0B0F               	andlw	15
  2638  004152  6E0B               	movwf	??_print_unit& (0+255),c
  2639  004154  51D2               	movf	(_buffer+16)& (0+255),w,b
  2640  004156  0B0F               	andlw	15
  2641  004158  6E0C               	movwf	(??_print_unit+1)& (0+255),c
  2642  00415A  500B               	movf	??_print_unit,w,c
  2643  00415C  5C0C               	subwf	??_print_unit+1,w,c
  2644  00415E  0F10               	addlw	16
  2645  004160  EC20  F020         	call	_lcd_gotoxy
  2646                           
  2647                           ;print.c: 427: uart_puts("\r\n");
  2648  004164  0EA3               	movlw	(STR_21+3)& (0+255)
  2649  004166  ECCB  F020         	call	_uart_puts
  2650  00416A  0012               	return		;funcret
  2651  00416C                     __end_of_print_unit:
  2652                           	opt stack 0
  2653                           tblptru	equ	0xFF8
  2654                           tblptrh	equ	0xFF7
  2655                           tblptrl	equ	0xFF6
  2656                           tablat	equ	0xFF5
  2657                           intcon	equ	0xFF2
  2658                           intcon2	equ	0xFF1
  2659                           postinc0	equ	0xFEE
  2660                           wreg	equ	0xFE8
  2661                           postdec1	equ	0xFE5
  2662                           fsr1l	equ	0xFE1
  2663                           status	equ	0xFD8
  2664                           
  2665 ;; *************** function _print_reading *****************
  2666 ;; Defined at:
  2667 ;;		line 432 in file "../../../src/print.c"
  2668 ;; Parameters:    Size  Location     Type
  2669 ;;  measurement     2   50[COMRAM] unsigned short 
  2670 ;; Auto vars:     Size  Location     Type
  2671 ;;		None
  2672 ;; Return value:  Size  Location     Type
  2673 ;;		None               void
  2674 ;; Registers used:
  2675 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, cstack
  2676 ;; Tracked objects:
  2677 ;;		On entry : F/0
  2678 ;;		On exit  : 0/0
  2679 ;;		Unchanged: 0/0
  2680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2681 ;;      Params:         2       0       0       0       0       0       0       0       0
  2682 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2683 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2684 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2685 ;;Total ram usage:        6 bytes
  2686 ;; Hardware stack levels used:    1
  2687 ;; Hardware stack levels required when called:    6
  2688 ;; This function calls:
  2689 ;;		___lwdiv
  2690 ;;		___lwmod
  2691 ;;		_format_number
  2692 ;;		_lcd_gotoxy
  2693 ;;		_lcd_puts
  2694 ;; This function is called by:
  2695 ;;		_measure_capacitance
  2696 ;;		_measure_inductance
  2697 ;; This function uses a non-reentrant model
  2698 ;;
  2699                           
  2700                           	psect	text8
  2701  003CC0                     __ptext8:
  2702                           	opt stack 0
  2703  003CC0                     _print_reading:
  2704                           	opt stack 23
  2705                           
  2706                           ; BSR set to: 0
  2707                           ;print.c: 459: lcd_gotoxy(9, 0);
  2708                           
  2709                           ;incstack = 0
  2710  003CC0  6A05               	clrf	lcd_gotoxy@row,c
  2711  003CC2  0E09               	movlw	9
  2712  003CC4  EC20  F020         	call	_lcd_gotoxy
  2713                           
  2714                           ;print.c: 460: lcd_puts("     ");
  2715  003CC8  0E9A               	movlw	(STR_22+1)& (0+255)
  2716  003CCA  EC57  F020         	call	_lcd_puts
  2717                           
  2718                           ;print.c: 461: lcd_gotoxy(9, 0);
  2719  003CCE  6A05               	clrf	lcd_gotoxy@row,c
  2720  003CD0  0E09               	movlw	9
  2721  003CD2  EC20  F020         	call	_lcd_gotoxy
  2722                           
  2723                           ;print.c: 463: format_number( measurement / 100, 10, 0);
  2724  003CD6  C033  F001         	movff	print_reading@measurement,___lwdiv@dividend
  2725  003CDA  C034  F002         	movff	print_reading@measurement+1,___lwdiv@dividend+1
  2726  003CDE  6A04               	clrf	___lwdiv@divisor+1,c
  2727  003CE0  0E64               	movlw	100
  2728  003CE2  6E03               	movwf	___lwdiv@divisor,c
  2729  003CE4  EC5C  F01F         	call	___lwdiv	;wreg free
  2730  003CE8  C001  F035         	movff	?___lwdiv,_print_reading$1250
  2731  003CEC  C002  F036         	movff	?___lwdiv+1,_print_reading$1250+1
  2732                           
  2733                           ;print.c: 463: format_number( measurement / 100, 10, 0);
  2734  003CF0  C035  F008         	movff	_print_reading$1250,format_number@n
  2735  003CF4  C036  F009         	movff	_print_reading$1250+1,format_number@n+1
  2736  003CF8  0E0A               	movlw	10
  2737  003CFA  6E0A               	movwf	format_number@base,c
  2738  003CFC  6A0B               	clrf	format_number@pad,c
  2739  003CFE  EC98  F01B         	call	_format_number	;wreg free
  2740                           
  2741                           ;print.c: 465: format_number( measurement % 100, 10, 0);
  2742  003D02  C033  F001         	movff	print_reading@measurement,___lwmod@dividend
  2743  003D06  C034  F002         	movff	print_reading@measurement+1,___lwmod@dividend+1
  2744  003D0A  6A04               	clrf	___lwmod@divisor+1,c
  2745  003D0C  0E64               	movlw	100
  2746  003D0E  6E03               	movwf	___lwmod@divisor,c
  2747  003D10  ECC7  F01F         	call	___lwmod	;wreg free
  2748  003D14  C001  F037         	movff	?___lwmod,_print_reading$1251
  2749  003D18  C002  F038         	movff	?___lwmod+1,_print_reading$1251+1
  2750                           
  2751                           ;print.c: 465: format_number( measurement % 100, 10, 0);
  2752  003D1C  C037  F008         	movff	_print_reading$1251,format_number@n
  2753  003D20  C038  F009         	movff	_print_reading$1251+1,format_number@n+1
  2754  003D24  0E0A               	movlw	10
  2755  003D26  6E0A               	movwf	format_number@base,c
  2756  003D28  6A0B               	clrf	format_number@pad,c
  2757  003D2A  EC98  F01B         	call	_format_number	;wreg free
  2758  003D2E  0012               	return		;funcret
  2759  003D30                     __end_of_print_reading:
  2760                           	opt stack 0
  2761                           tblptru	equ	0xFF8
  2762                           tblptrh	equ	0xFF7
  2763                           tblptrl	equ	0xFF6
  2764                           tablat	equ	0xFF5
  2765                           intcon	equ	0xFF2
  2766                           intcon2	equ	0xFF1
  2767                           postinc0	equ	0xFEE
  2768                           wreg	equ	0xFE8
  2769                           postdec1	equ	0xFE5
  2770                           fsr1l	equ	0xFE1
  2771                           status	equ	0xFD8
  2772                           
  2773 ;; *************** function _lcd_init *****************
  2774 ;; Defined at:
  2775 ;;		line 503 in file "../../../lib/lcd44780.c"
  2776 ;; Parameters:    Size  Location     Type
  2777 ;;  fourbitmode     1    wreg     unsigned char 
  2778 ;; Auto vars:     Size  Location     Type
  2779 ;;  fourbitmode     1    0[COMRAM] unsigned char 
  2780 ;; Return value:  Size  Location     Type
  2781 ;;		None               void
  2782 ;; Registers used:
  2783 ;;		wreg, status,2
  2784 ;; Tracked objects:
  2785 ;;		On entry : 0/0
  2786 ;;		On exit  : F/0
  2787 ;;		Unchanged: 0/0
  2788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2789 ;;      Params:         0       0       0       0       0       0       0       0       0
  2790 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2791 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2792 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2793 ;;Total ram usage:        3 bytes
  2794 ;; Hardware stack levels used:    1
  2795 ;; Hardware stack levels required when called:    1
  2796 ;; This function calls:
  2797 ;;		Nothing
  2798 ;; This function is called by:
  2799 ;;		_main
  2800 ;; This function uses a non-reentrant model
  2801 ;;
  2802                           
  2803                           	psect	text9
  2804  0040E4                     __ptext9:
  2805                           	opt stack 0
  2806  0040E4                     _lcd_init:
  2807                           	opt stack 29
  2808                           
  2809                           ;incstack = 0
  2810                           ;lcd_init@fourbitmode stored from wreg
  2811  0040E4  6E01               	movwf	lcd_init@fourbitmode,c
  2812                           
  2813                           ;lcd44780.c: 505: LCD_ctrl = 0;
  2814  0040E6  0100               	movlb	0	; () banked
  2815  0040E8  6BBE               	clrf	_LCD_ctrl& (0+255),b
  2816                           
  2817                           ; BSR set to: 0
  2818                           ;lcd44780.c: 506: LCD_function = (fourbitmode ? 0x00 : 0x10);
  2819  0040EA  5001               	movf	lcd_init@fourbitmode,w,c
  2820  0040EC  E104               	bnz	l350
  2821                           
  2822                           ; BSR set to: 0
  2823  0040EE  6A03               	clrf	_lcd_init$403+1,c
  2824  0040F0  0E10               	movlw	16
  2825  0040F2  6E02               	movwf	_lcd_init$403,c
  2826  0040F4  D002               	goto	l352
  2827  0040F6                     l350:
  2828                           
  2829                           ; BSR set to: 0
  2830  0040F6  6A02               	clrf	_lcd_init$403,c
  2831  0040F8  6A03               	clrf	_lcd_init$403+1,c
  2832  0040FA                     l352:
  2833                           
  2834                           ; BSR set to: 0
  2835  0040FA  C002  F0BF         	movff	_lcd_init$403,_LCD_function
  2836                           
  2837                           ;lcd44780.c: 508: LCD_lines = 0;
  2838  0040FE  6BC0               	clrf	_LCD_lines& (0+255),b
  2839                           
  2840                           ;lcd44780.c: 510: LCD_mode = 0;
  2841  004100  6BC1               	clrf	_LCD_mode& (0+255),b
  2842                           
  2843                           ;lcd44780.c: 512: TRISB2 = 0;
  2844  004102  9493               	bcf	3987,2,c	;volatile
  2845                           
  2846                           ;lcd44780.c: 513: RB2 = 0;
  2847  004104  9481               	bcf	3969,2,c	;volatile
  2848                           
  2849                           ;lcd44780.c: 518: TRISB3 = 0;
  2850  004106  9693               	bcf	3987,3,c	;volatile
  2851                           
  2852                           ;lcd44780.c: 519: RB3 = 0;
  2853  004108  9681               	bcf	3969,3,c	;volatile
  2854                           
  2855                           ;lcd44780.c: 521: TRISB4 = 0;
  2856  00410A  9893               	bcf	3987,4,c	;volatile
  2857                           
  2858                           ;lcd44780.c: 522: TRISB5 = 0;
  2859  00410C  9A93               	bcf	3987,5,c	;volatile
  2860                           
  2861                           ;lcd44780.c: 523: TRISB6 = 0;
  2862  00410E  9C93               	bcf	3987,6,c	;volatile
  2863                           
  2864                           ;lcd44780.c: 524: TRISB7 = 0;
  2865  004110  9E93               	bcf	3987,7,c	;volatile
  2866                           
  2867                           ; BSR set to: 0
  2868  004112  0012               	return		;funcret
  2869  004114                     __end_of_lcd_init:
  2870                           	opt stack 0
  2871                           tblptru	equ	0xFF8
  2872                           tblptrh	equ	0xFF7
  2873                           tblptrl	equ	0xFF6
  2874                           tablat	equ	0xFF5
  2875                           intcon	equ	0xFF2
  2876                           intcon2	equ	0xFF1
  2877                           postinc0	equ	0xFEE
  2878                           wreg	equ	0xFE8
  2879                           postdec1	equ	0xFE5
  2880                           fsr1l	equ	0xFE1
  2881                           status	equ	0xFD8
  2882                           
  2883 ;; *************** function _lcd_begin *****************
  2884 ;; Defined at:
  2885 ;;		line 430 in file "../../../lib/lcd44780.c"
  2886 ;; Parameters:    Size  Location     Type
  2887 ;;  lines           1    wreg     unsigned char 
  2888 ;;  dotsize         1    4[COMRAM] unsigned char 
  2889 ;; Auto vars:     Size  Location     Type
  2890 ;;  lines           1    6[COMRAM] unsigned char 
  2891 ;; Return value:  Size  Location     Type
  2892 ;;		None               void
  2893 ;; Registers used:
  2894 ;;		wreg, status,2, status,0, cstack
  2895 ;; Tracked objects:
  2896 ;;		On entry : F/0
  2897 ;;		On exit  : 0/0
  2898 ;;		Unchanged: 0/0
  2899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2900 ;;      Params:         1       0       0       0       0       0       0       0       0
  2901 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2902 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2903 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2904 ;;Total ram usage:        3 bytes
  2905 ;; Hardware stack levels used:    1
  2906 ;; Hardware stack levels required when called:    4
  2907 ;; This function calls:
  2908 ;;		_lcd_command
  2909 ;;		_lcd_write4bits
  2910 ;; This function is called by:
  2911 ;;		_main
  2912 ;; This function uses a non-reentrant model
  2913 ;;
  2914                           
  2915                           	psect	text10
  2916  003652                     __ptext10:
  2917                           	opt stack 0
  2918  003652                     _lcd_begin:
  2919                           	opt stack 26
  2920                           
  2921                           ; BSR set to: 0
  2922                           ;incstack = 0
  2923                           ;lcd_begin@lines stored from wreg
  2924  003652  6E07               	movwf	lcd_begin@lines,c
  2925                           
  2926                           ; BSR set to: 0
  2927                           ;lcd44780.c: 431: if(lines > 1)
  2928  003654  0E01               	movlw	1
  2929  003656  6407               	cpfsgt	lcd_begin@lines,c
  2930  003658  D001               	goto	l3306
  2931                           
  2932                           ; BSR set to: 0
  2933                           ;lcd44780.c: 432: LCD_function |= 0x08;
  2934  00365A  87BF               	bsf	_LCD_function& (0+255),3,b
  2935  00365C                     l3306:
  2936                           
  2937                           ; BSR set to: 0
  2938                           ;lcd44780.c: 435: LCD_lines = lines;
  2939  00365C  C007  F0C0         	movff	lcd_begin@lines,_LCD_lines
  2940                           
  2941                           ; BSR set to: 0
  2942                           ;lcd44780.c: 439: if((dotsize != 0) && (lines == 1))
  2943  003660  5005               	movf	lcd_begin@dotsize,w,c
  2944  003662  E003               	bz	l3314
  2945                           
  2946                           ; BSR set to: 0
  2947  003664  0407               	decf	lcd_begin@lines,w,c
  2948  003666  B4D8               	btfsc	status,2,c
  2949                           
  2950                           ; BSR set to: 0
  2951                           ;lcd44780.c: 440: LCD_function |= 0x04;
  2952  003668  85BF               	bsf	_LCD_function& (0+255),2,b
  2953  00366A                     l3314:
  2954                           
  2955                           ; BSR set to: 0
  2956                           ;lcd44780.c: 442: _delay((unsigned long)((15)*(20000000/4000.0)));
  2957  00366A  0E62               	movlw	98
  2958  00366C  6E06               	movwf	??_lcd_begin& (0+255),c
  2959  00366E  0E66               	movlw	102
  2960  003670                     u2697:
  2961  003670  2EE8               	decfsz	wreg,f,c
  2962  003672  D7FE               	goto	u2697
  2963  003674  2E06               	decfsz	??_lcd_begin& (0+255),f,c
  2964  003676  D7FC               	goto	u2697
  2965                           
  2966                           ;lcd44780.c: 445: RB2 = 0;
  2967  003678  9481               	bcf	3969,2,c	;volatile
  2968                           
  2969                           ;lcd44780.c: 446: RB3 = 0;
  2970  00367A  9681               	bcf	3969,3,c	;volatile
  2971                           
  2972                           ;lcd44780.c: 449: if(!(LCD_function & 0x10)) {
  2973  00367C  0100               	movlb	0	; () banked
  2974  00367E  B9BF               	btfsc	_LCD_function& (0+255),4,b
  2975  003680  D01B               	goto	l3332
  2976                           
  2977                           ; BSR set to: 0
  2978                           ;lcd44780.c: 453: lcd_write4bits(0x03);
  2979  003682  0E03               	movlw	3
  2980  003684  EC11  F01F         	call	_lcd_write4bits
  2981                           
  2982                           ;lcd44780.c: 454: _delay((unsigned long)((5)*(20000000/4000.0)));
  2983  003688  0E21               	movlw	33
  2984  00368A  6E06               	movwf	??_lcd_begin& (0+255),c
  2985  00368C  0E76               	movlw	118
  2986  00368E                     u2707:
  2987  00368E  2EE8               	decfsz	wreg,f,c
  2988  003690  D7FE               	goto	u2707
  2989  003692  2E06               	decfsz	??_lcd_begin& (0+255),f,c
  2990  003694  D7FC               	goto	u2707
  2991  003696  D000               	nop2	
  2992                           
  2993                           ;lcd44780.c: 456: lcd_write4bits(0x03);
  2994  003698  0E03               	movlw	3
  2995  00369A  EC11  F01F         	call	_lcd_write4bits
  2996                           
  2997                           ;lcd44780.c: 457: _delay((unsigned long)((150)*(20000000/4000000.0)));
  2998  00369E  0EFA               	movlw	250
  2999  0036A0                     u2717:
  3000  0036A0  2EE8               	decfsz	wreg,f,c
  3001  0036A2  D7FE               	goto	u2717
  3002                           
  3003                           ;lcd44780.c: 459: lcd_write4bits(0x03);
  3004  0036A4  0E03               	movlw	3
  3005  0036A6  EC11  F01F         	call	_lcd_write4bits
  3006                           
  3007                           ;lcd44780.c: 460: _delay((unsigned long)((150)*(20000000/4000000.0)));
  3008  0036AA  0EFA               	movlw	250
  3009  0036AC                     u2727:
  3010  0036AC  2EE8               	decfsz	wreg,f,c
  3011  0036AE  D7FE               	goto	u2727
  3012                           
  3013                           ;lcd44780.c: 462: lcd_write4bits(0x02);
  3014  0036B0  0E02               	movlw	2
  3015  0036B2  EC11  F01F         	call	_lcd_write4bits
  3016                           
  3017                           ;lcd44780.c: 463: }
  3018  0036B6  D01E               	goto	l3340
  3019  0036B8                     l3332:
  3020                           
  3021                           ; BSR set to: 0
  3022                           ;lcd44780.c: 465: else {
  3023                           ;lcd44780.c: 469: lcd_command(0x20 | LCD_function);
  3024  0036B8  51BF               	movf	_LCD_function& (0+255),w,b
  3025  0036BA  0920               	iorlw	32
  3026  0036BC  EC37  F021         	call	_lcd_command
  3027                           
  3028                           ;lcd44780.c: 470: _delay((unsigned long)((5)*(20000000/4000.0)));
  3029  0036C0  0E21               	movlw	33
  3030  0036C2  6E06               	movwf	??_lcd_begin& (0+255),c
  3031  0036C4  0E76               	movlw	118
  3032  0036C6                     u2737:
  3033  0036C6  2EE8               	decfsz	wreg,f,c
  3034  0036C8  D7FE               	goto	u2737
  3035  0036CA  2E06               	decfsz	??_lcd_begin& (0+255),f,c
  3036  0036CC  D7FC               	goto	u2737
  3037  0036CE  D000               	nop2	
  3038                           
  3039                           ;lcd44780.c: 473: lcd_command(0x20 | LCD_function);
  3040  0036D0  0100               	movlb	0	; () banked
  3041  0036D2  51BF               	movf	_LCD_function& (0+255),w,b
  3042  0036D4  0920               	iorlw	32
  3043  0036D6  EC37  F021         	call	_lcd_command
  3044                           
  3045                           ;lcd44780.c: 474: _delay((unsigned long)((5)*(20000000/4000.0)));
  3046  0036DA  0E21               	movlw	33
  3047  0036DC  6E06               	movwf	??_lcd_begin& (0+255),c
  3048  0036DE  0E76               	movlw	118
  3049  0036E0                     u2747:
  3050  0036E0  2EE8               	decfsz	wreg,f,c
  3051  0036E2  D7FE               	goto	u2747
  3052  0036E4  2E06               	decfsz	??_lcd_begin& (0+255),f,c
  3053  0036E6  D7FC               	goto	u2747
  3054  0036E8  D000               	nop2	
  3055                           
  3056                           ;lcd44780.c: 478: lcd_command(0x20 | LCD_function);
  3057  0036EA  0100               	movlb	0	; () banked
  3058  0036EC  51BF               	movf	_LCD_function& (0+255),w,b
  3059  0036EE  0920               	iorlw	32
  3060  0036F0  EC37  F021         	call	_lcd_command
  3061  0036F4                     l3340:
  3062                           
  3063                           ;lcd44780.c: 479: }
  3064                           ;lcd44780.c: 482: lcd_command(0x20 | LCD_function);
  3065  0036F4  0100               	movlb	0	; () banked
  3066  0036F6  51BF               	movf	_LCD_function& (0+255),w,b
  3067  0036F8  0920               	iorlw	32
  3068  0036FA  EC37  F021         	call	_lcd_command
  3069                           
  3070                           ;lcd44780.c: 485: LCD_ctrl = 0x04 | 0x00 | 0x00;
  3071  0036FE  0E04               	movlw	4
  3072  003700  0100               	movlb	0	; () banked
  3073  003702  6FBE               	movwf	_LCD_ctrl& (0+255),b
  3074                           
  3075                           ; BSR set to: 0
  3076                           ;lcd44780.c: 486: lcd_command(0x08 | LCD_ctrl);
  3077  003704  51BE               	movf	_LCD_ctrl& (0+255),w,b
  3078  003706  0908               	iorlw	8
  3079  003708  EC37  F021         	call	_lcd_command
  3080                           
  3081                           ;lcd44780.c: 489: lcd_command(0x01);
  3082  00370C  0E01               	movlw	1
  3083  00370E  EC37  F021         	call	_lcd_command
  3084                           
  3085                           ;lcd44780.c: 490: _delay((unsigned long)((2)*(20000000/4000.0)));
  3086  003712  0E0D               	movlw	13
  3087  003714  6E06               	movwf	??_lcd_begin& (0+255),c
  3088  003716  0EFC               	movlw	252
  3089  003718                     u2757:
  3090  003718  2EE8               	decfsz	wreg,f,c
  3091  00371A  D7FE               	goto	u2757
  3092  00371C  2E06               	decfsz	??_lcd_begin& (0+255),f,c
  3093  00371E  D7FC               	goto	u2757
  3094                           
  3095                           ;lcd44780.c: 493: LCD_mode = 0x02 | 0x00;
  3096  003720  0E02               	movlw	2
  3097  003722  0100               	movlb	0	; () banked
  3098  003724  6FC1               	movwf	_LCD_mode& (0+255),b
  3099                           
  3100                           ; BSR set to: 0
  3101                           ;lcd44780.c: 495: lcd_command(0x04 | LCD_mode);
  3102  003726  51C1               	movf	_LCD_mode& (0+255),w,b
  3103  003728  0904               	iorlw	4
  3104  00372A  EC37  F021         	call	_lcd_command
  3105  00372E  0012               	return		;funcret
  3106  003730                     __end_of_lcd_begin:
  3107                           	opt stack 0
  3108                           tblptru	equ	0xFF8
  3109                           tblptrh	equ	0xFF7
  3110                           tblptrl	equ	0xFF6
  3111                           tablat	equ	0xFF5
  3112                           intcon	equ	0xFF2
  3113                           intcon2	equ	0xFF1
  3114                           postinc0	equ	0xFEE
  3115                           wreg	equ	0xFE8
  3116                           postdec1	equ	0xFE5
  3117                           fsr1l	equ	0xFE1
  3118                           status	equ	0xFD8
  3119                           
  3120 ;; *************** function _indicator *****************
  3121 ;; Defined at:
  3122 ;;		line 472 in file "../../../src/print.c"
  3123 ;; Parameters:    Size  Location     Type
  3124 ;;  indicate        1    wreg     unsigned char 
  3125 ;; Auto vars:     Size  Location     Type
  3126 ;;  indicate        1   10[COMRAM] unsigned char 
  3127 ;; Return value:  Size  Location     Type
  3128 ;;		None               void
  3129 ;; Registers used:
  3130 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3131 ;; Tracked objects:
  3132 ;;		On entry : 0/0
  3133 ;;		On exit  : 0/0
  3134 ;;		Unchanged: 0/0
  3135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3136 ;;      Params:         0       0       0       0       0       0       0       0       0
  3137 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3138 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3139 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3140 ;;Total ram usage:        1 bytes
  3141 ;; Hardware stack levels used:    1
  3142 ;; Hardware stack levels required when called:    5
  3143 ;; This function calls:
  3144 ;;		_lcd_gotoxy
  3145 ;;		_lcd_puts
  3146 ;; This function is called by:
  3147 ;;		_main
  3148 ;; This function uses a non-reentrant model
  3149 ;;
  3150                           
  3151                           	psect	text11
  3152  0041BE                     __ptext11:
  3153                           	opt stack 0
  3154  0041BE                     _indicator:
  3155                           	opt stack 25
  3156                           
  3157                           ;incstack = 0
  3158                           ;indicator@indicate stored from wreg
  3159  0041BE  6E0B               	movwf	indicator@indicate,c
  3160                           
  3161                           ;print.c: 486: lcd_gotoxy(0, 1);
  3162  0041C0  0E01               	movlw	1
  3163  0041C2  6E05               	movwf	lcd_gotoxy@row,c
  3164  0041C4  0E00               	movlw	0
  3165  0041C6  EC20  F020         	call	_lcd_gotoxy
  3166                           
  3167                           ;print.c: 487: if(indicate) {
  3168  0041CA  500B               	movf	indicator@indicate,w,c
  3169  0041CC  E004               	bz	l3068
  3170                           
  3171                           ;print.c: 488: lcd_puts("-*-");
  3172  0041CE  0EB1               	movlw	STR_11& (0+255)
  3173  0041D0  EC57  F020         	call	_lcd_puts
  3174                           
  3175                           ;print.c: 489: } else {
  3176  0041D4  D003               	goto	l34
  3177  0041D6                     l3068:
  3178                           
  3179                           ;print.c: 490: lcd_puts("   ");
  3180  0041D6  0E9C               	movlw	(STR_22+3)& (0+255)
  3181  0041D8  EC57  F020         	call	_lcd_puts
  3182  0041DC                     l34:
  3183  0041DC  0012               	return		;funcret
  3184  0041DE                     __end_of_indicator:
  3185                           	opt stack 0
  3186                           tblptru	equ	0xFF8
  3187                           tblptrh	equ	0xFF7
  3188                           tblptrl	equ	0xFF6
  3189                           tablat	equ	0xFF5
  3190                           intcon	equ	0xFF2
  3191                           intcon2	equ	0xFF1
  3192                           postinc0	equ	0xFEE
  3193                           wreg	equ	0xFE8
  3194                           postdec1	equ	0xFE5
  3195                           fsr1l	equ	0xFE1
  3196                           status	equ	0xFD8
  3197                           
  3198 ;; *************** function _lcd_puts *****************
  3199 ;; Defined at:
  3200 ;;		line 182 in file "../../../lib/lcd44780.c"
  3201 ;; Parameters:    Size  Location     Type
  3202 ;;  string          1    wreg     PTR const unsigned char 
  3203 ;;		 -> STR_25(5), STR_24(6), STR_23(7), STR_22(7), 
  3204 ;;		 -> STR_20(10), STR_12(4), STR_11(4), STR_10(6), 
  3205 ;; Auto vars:     Size  Location     Type
  3206 ;;  string          1    6[COMRAM] PTR const unsigned char 
  3207 ;;		 -> STR_25(5), STR_24(6), STR_23(7), STR_22(7), 
  3208 ;;		 -> STR_20(10), STR_12(4), STR_11(4), STR_10(6), 
  3209 ;;  i               1    5[COMRAM] unsigned char 
  3210 ;; Return value:  Size  Location     Type
  3211 ;;		None               void
  3212 ;; Registers used:
  3213 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3214 ;; Tracked objects:
  3215 ;;		On entry : 0/0
  3216 ;;		On exit  : 0/0
  3217 ;;		Unchanged: 0/0
  3218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3219 ;;      Params:         0       0       0       0       0       0       0       0       0
  3220 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3221 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3222 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3223 ;;Total ram usage:        3 bytes
  3224 ;; Hardware stack levels used:    1
  3225 ;; Hardware stack levels required when called:    4
  3226 ;; This function calls:
  3227 ;;		_lcd_putch
  3228 ;; This function is called by:
  3229 ;;		_print_reading
  3230 ;;		_indicator
  3231 ;;		_main
  3232 ;; This function uses a non-reentrant model
  3233 ;;
  3234                           
  3235                           	psect	text12
  3236  0040AE                     __ptext12:
  3237                           	opt stack 0
  3238  0040AE                     _lcd_puts:
  3239                           	opt stack 24
  3240                           
  3241                           ;incstack = 0
  3242                           ;lcd_puts@string stored from wreg
  3243  0040AE  6E07               	movwf	lcd_puts@string,c
  3244                           
  3245                           ;lcd44780.c: 183: unsigned char i;
  3246                           ;lcd44780.c: 184: for(i = 0; string[i]; i++) lcd_putch(string[i]);
  3247  0040B0  6A06               	clrf	lcd_puts@i,c
  3248  0040B2  D00C               	goto	l2808
  3249  0040B4                     l2804:
  3250  0040B4  5007               	movf	lcd_puts@string,w,c
  3251  0040B6  2406               	addwf	lcd_puts@i,w,c
  3252  0040B8  6E05               	movwf	??_lcd_puts& (0+255),c
  3253  0040BA  C005  FFF6         	movff	??_lcd_puts,tblptrl
  3254  0040BE                     	if	1	;There is more than 1 active tblptr byte
  3255  0040BE  0E20               	movlw	high __smallconst
  3256  0040C0  6EF7               	movwf	tblptrh,c
  3257  0040C2                     	endif
  3258  0040C2                     	if	0	;tblptru may be non-zero
  3259  0040C2                     	endif
  3260  0040C2                     	if	0	;tblptru may be non-zero
  3261  0040C2                     	endif
  3262  0040C2  0008               	tblrd		*
  3263  0040C4  50F5               	movf	tablat,w,c
  3264  0040C6  EC2A  F021         	call	_lcd_putch
  3265  0040CA  2A06               	incf	lcd_puts@i,f,c
  3266  0040CC                     l2808:
  3267  0040CC  5007               	movf	lcd_puts@string,w,c
  3268  0040CE  2406               	addwf	lcd_puts@i,w,c
  3269  0040D0  6E05               	movwf	??_lcd_puts& (0+255),c
  3270  0040D2  C005  FFF6         	movff	??_lcd_puts,tblptrl
  3271  0040D6                     	if	1	;There is more than 1 active tblptr byte
  3272  0040D6  0E20               	movlw	high __smallconst
  3273  0040D8  6EF7               	movwf	tblptrh,c
  3274  0040DA                     	endif
  3275  0040DA                     	if	0	;tblptru may be non-zero
  3276  0040DA                     	endif
  3277  0040DA                     	if	0	;tblptru may be non-zero
  3278  0040DA                     	endif
  3279  0040DA  0008               	tblrd		*
  3280  0040DC  50F5               	movf	tablat,w,c
  3281  0040DE  B4D8               	btfsc	status,2,c
  3282  0040E0  0012               	return		;funcret
  3283  0040E2  D7E8               	goto	l2804
  3284  0040E4                     __end_of_lcd_puts:
  3285                           	opt stack 0
  3286                           tblptru	equ	0xFF8
  3287                           tblptrh	equ	0xFF7
  3288                           tblptrl	equ	0xFF6
  3289                           tablat	equ	0xFF5
  3290                           intcon	equ	0xFF2
  3291                           intcon2	equ	0xFF1
  3292                           postinc0	equ	0xFEE
  3293                           wreg	equ	0xFE8
  3294                           postdec1	equ	0xFE5
  3295                           fsr1l	equ	0xFE1
  3296                           status	equ	0xFD8
  3297                           
  3298 ;; *************** function _format_double *****************
  3299 ;; Defined at:
  3300 ;;		line 74 in file "../../../lib/format.c"
  3301 ;; Parameters:    Size  Location     Type
  3302 ;;  num             4   52[BANK0 ] unsigned char 
  3303 ;; Auto vars:     Size  Location     Type
  3304 ;;  weight          4   64[BANK0 ] unsigned char 
  3305 ;;  m               2   70[BANK0 ] short 
  3306 ;;  digit           2   68[BANK0 ] short 
  3307 ;; Return value:  Size  Location     Type
  3308 ;;		None               void
  3309 ;; Registers used:
  3310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3311 ;; Tracked objects:
  3312 ;;		On entry : 0/0
  3313 ;;		On exit  : 0/0
  3314 ;;		Unchanged: 0/0
  3315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3316 ;;      Params:         0       4       0       0       0       0       0       0       0
  3317 ;;      Locals:         0      16       0       0       0       0       0       0       0
  3318 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3319 ;;      Totals:         0      20       0       0       0       0       0       0       0
  3320 ;;Total ram usage:       20 bytes
  3321 ;; Hardware stack levels used:    1
  3322 ;; Hardware stack levels required when called:    6
  3323 ;; This function calls:
  3324 ;;		___awtofl
  3325 ;;		___fldiv
  3326 ;;		___flge
  3327 ;;		___flmul
  3328 ;;		___flsub
  3329 ;;		___fltol
  3330 ;;		_floor
  3331 ;;		_format_putchar
  3332 ;;		_lcd_putch
  3333 ;;		_log10
  3334 ;;		_output_putch
  3335 ;;		_pow
  3336 ;; This function is called by:
  3337 ;;		_main
  3338 ;; This function uses a non-reentrant model
  3339 ;;
  3340                           
  3341                           	psect	text13
  3342  002CCC                     __ptext13:
  3343                           	opt stack 0
  3344  002CCC                     _format_double:
  3345                           	opt stack 24
  3346                           
  3347                           ;format.c: 75: short m = (short)log10(num);
  3348                           
  3349                           ;incstack = 0
  3350  002CCC  C094  F053         	movff	format_double@num,log10@x
  3351  002CD0  C095  F054         	movff	format_double@num+1,log10@x+1
  3352  002CD4  C096  F055         	movff	format_double@num+2,log10@x+2
  3353  002CD8  C097  F056         	movff	format_double@num+3,log10@x+3
  3354  002CDC  EC98  F01E         	call	_log10	;wreg free
  3355  002CE0  C053  F05B         	movff	?_log10,___fltol@f1
  3356  002CE4  C054  F05C         	movff	?_log10+1,___fltol@f1+1
  3357  002CE8  C055  F05D         	movff	?_log10+2,___fltol@f1+2
  3358  002CEC  C056  F05E         	movff	?_log10+3,___fltol@f1+3
  3359  002CF0  EC16  F01D         	call	___fltol	;wreg free
  3360  002CF4  C05B  F0A6         	movff	?___fltol,format_double@m
  3361  002CF8  C05C  F0A7         	movff	?___fltol+1,format_double@m+1
  3362                           
  3363                           ;format.c: 76: short digit;
  3364                           ;format.c: 79: while(num > 0 + 1.19209290e-07) {
  3365  002CFC  D0AE               	goto	l3146
  3366  002CFE                     l3128:
  3367                           
  3368                           ;format.c: 80: double weight = pow(10.0l, m);
  3369  002CFE  C0A6  F00B         	movff	format_double@m,___awtofl@c
  3370  002D02  C0A7  F00C         	movff	format_double@m+1,___awtofl@c+1
  3371  002D06  ECE6  F01F         	call	___awtofl	;wreg free
  3372  002D0A  C00B  F098         	movff	?___awtofl,_format_double$1254
  3373  002D0E  C00C  F099         	movff	?___awtofl+1,_format_double$1254+1
  3374  002D12  C00D  F09A         	movff	?___awtofl+2,_format_double$1254+2
  3375  002D16  C00E  F09B         	movff	?___awtofl+3,_format_double$1254+3
  3376                           
  3377                           ;format.c: 80: double weight = pow(10.0l, m);
  3378  002D1A  0100               	movlb	0	; () banked
  3379  002D1C  6B7F               	clrf	pow@x& (0+255),b
  3380  002D1E  6B80               	clrf	(pow@x+1)& (0+255),b
  3381  002D20  0E20               	movlw	32
  3382  002D22  6F81               	movwf	(pow@x+2)& (0+255),b
  3383  002D24  0E41               	movlw	65
  3384  002D26  6F82               	movwf	(pow@x+3)& (0+255),b
  3385  002D28  C098  F083         	movff	_format_double$1254,pow@y
  3386  002D2C  C099  F084         	movff	_format_double$1254+1,pow@y+1
  3387  002D30  C09A  F085         	movff	_format_double$1254+2,pow@y+2
  3388  002D34  C09B  F086         	movff	_format_double$1254+3,pow@y+3
  3389  002D38  EC3F  F017         	call	_pow	;wreg free
  3390  002D3C  C07F  F0A0         	movff	?_pow,format_double@weight
  3391  002D40  C080  F0A1         	movff	?_pow+1,format_double@weight+1
  3392  002D44  C081  F0A2         	movff	?_pow+2,format_double@weight+2
  3393  002D48  C082  F0A3         	movff	?_pow+3,format_double@weight+3
  3394                           
  3395                           ; BSR set to: 0
  3396                           ;format.c: 81: digit = (short)floor(num / weight);
  3397  002D4C  C0A0  F00F         	movff	format_double@weight,___fldiv@f2
  3398  002D50  C0A1  F010         	movff	format_double@weight+1,___fldiv@f2+1
  3399  002D54  C0A2  F011         	movff	format_double@weight+2,___fldiv@f2+2
  3400  002D58  C0A3  F012         	movff	format_double@weight+3,___fldiv@f2+3
  3401  002D5C  C094  F00B         	movff	format_double@num,___fldiv@f1
  3402  002D60  C095  F00C         	movff	format_double@num+1,___fldiv@f1+1
  3403  002D64  C096  F00D         	movff	format_double@num+2,___fldiv@f1+2
  3404  002D68  C097  F00E         	movff	format_double@num+3,___fldiv@f1+3
  3405  002D6C  ECC3  F01C         	call	___fldiv	;wreg free
  3406  002D70  C00B  F06A         	movff	?___fldiv,floor@x
  3407  002D74  C00C  F06B         	movff	?___fldiv+1,floor@x+1
  3408  002D78  C00D  F06C         	movff	?___fldiv+2,floor@x+2
  3409  002D7C  C00E  F06D         	movff	?___fldiv+3,floor@x+3
  3410  002D80  ECC1  F019         	call	_floor	;wreg free
  3411  002D84  C06A  F09C         	movff	?_floor,_format_double$1255
  3412  002D88  C06B  F09D         	movff	?_floor+1,_format_double$1255+1
  3413  002D8C  C06C  F09E         	movff	?_floor+2,_format_double$1255+2
  3414  002D90  C06D  F09F         	movff	?_floor+3,_format_double$1255+3
  3415                           
  3416                           ;format.c: 81: digit = (short)floor(num / weight);
  3417  002D94  C09C  F05B         	movff	_format_double$1255,___fltol@f1
  3418  002D98  C09D  F05C         	movff	_format_double$1255+1,___fltol@f1+1
  3419  002D9C  C09E  F05D         	movff	_format_double$1255+2,___fltol@f1+2
  3420  002DA0  C09F  F05E         	movff	_format_double$1255+3,___fltol@f1+3
  3421  002DA4  EC16  F01D         	call	___fltol	;wreg free
  3422  002DA8  C05B  F0A4         	movff	?___fltol,format_double@digit
  3423  002DAC  C05C  F0A5         	movff	?___fltol+1,format_double@digit+1
  3424                           
  3425                           ; BSR set to: 0
  3426                           ;format.c: 82: num -= (digit * weight);
  3427  002DB0  C094  F041         	movff	format_double@num,___flsub@f1
  3428  002DB4  C095  F042         	movff	format_double@num+1,___flsub@f1+1
  3429  002DB8  C096  F043         	movff	format_double@num+2,___flsub@f1+2
  3430  002DBC  C097  F044         	movff	format_double@num+3,___flsub@f1+3
  3431  002DC0  C0A0  F01E         	movff	format_double@weight,___flmul@f2
  3432  002DC4  C0A1  F01F         	movff	format_double@weight+1,___flmul@f2+1
  3433  002DC8  C0A2  F020         	movff	format_double@weight+2,___flmul@f2+2
  3434  002DCC  C0A3  F021         	movff	format_double@weight+3,___flmul@f2+3
  3435  002DD0  C0A4  F00B         	movff	format_double@digit,___awtofl@c
  3436  002DD4  C0A5  F00C         	movff	format_double@digit+1,___awtofl@c+1
  3437  002DD8  ECE6  F01F         	call	___awtofl	;wreg free
  3438  002DDC  C00B  F01A         	movff	?___awtofl,___flmul@f1
  3439  002DE0  C00C  F01B         	movff	?___awtofl+1,___flmul@f1+1
  3440  002DE4  C00D  F01C         	movff	?___awtofl+2,___flmul@f1+2
  3441  002DE8  C00E  F01D         	movff	?___awtofl+3,___flmul@f1+3
  3442  002DEC  EC87  F015         	call	___flmul	;wreg free
  3443  002DF0  C01A  F045         	movff	?___flmul,___flsub@f2
  3444  002DF4  C01B  F046         	movff	?___flmul+1,___flsub@f2+1
  3445  002DF8  C01C  F047         	movff	?___flmul+2,___flsub@f2+2
  3446  002DFC  C01D  F048         	movff	?___flmul+3,___flsub@f2+3
  3447  002E00  ECA5  F01F         	call	___flsub	;wreg free
  3448  002E04  C041  F094         	movff	?___flsub,format_double@num
  3449  002E08  C042  F095         	movff	?___flsub+1,format_double@num+1
  3450  002E0C  C043  F096         	movff	?___flsub+2,format_double@num+2
  3451  002E10  C044  F097         	movff	?___flsub+3,format_double@num+3
  3452                           
  3453                           ;format.c: 83: putchar_ptr((char)('0' + digit));
  3454  002E14  D801               	call	u2448
  3455  002E16  D00D               	goto	l3140
  3456  002E18                     u2448:
  3457  002E18  0005               	push	
  3458  002E1A  0100               	movlb	0	; () banked
  3459  002E1C  6EFA               	movwf	pclath,c
  3460  002E1E  51E5               	movf	_putchar_ptr& (0+255),w,b
  3461  002E20  6EFD               	movwf	tosl,c
  3462  002E22  51E6               	movf	(_putchar_ptr+1)& (0+255),w,b
  3463  002E24  6EFE               	movwf	tosh,c
  3464  002E26  50F8               	movf	tblptru,w,c
  3465  002E28  6EFF               	movwf	tosu,c
  3466  002E2A  50FA               	movf	pclath,w,c
  3467  002E2C  51A4               	movf	format_double@digit& (0+255),w,b
  3468  002E2E  0F30               	addlw	48
  3469  002E30  0012               	return		;indir
  3470  002E32                     l3140:
  3471                           
  3472                           ;format.c: 84: if(m == 0)
  3473  002E32  0100               	movlb	0	; () banked
  3474  002E34  51A6               	movf	format_double@m& (0+255),w,b
  3475  002E36  11A7               	iorwf	(format_double@m+1)& (0+255),w,b
  3476  002E38  E10C               	bnz	l3144
  3477                           
  3478                           ; BSR set to: 0
  3479                           ;format.c: 85: putchar_ptr('.');
  3480  002E3A  D801               	call	u2468
  3481  002E3C  D00A               	goto	l3144
  3482  002E3E                     u2468:
  3483  002E3E  0005               	push	
  3484  002E40  6EFA               	movwf	pclath,c
  3485  002E42  51E5               	movf	_putchar_ptr& (0+255),w,b
  3486  002E44  6EFD               	movwf	tosl,c
  3487  002E46  51E6               	movf	(_putchar_ptr+1)& (0+255),w,b
  3488  002E48  6EFE               	movwf	tosh,c
  3489  002E4A  50F8               	movf	tblptru,w,c
  3490  002E4C  6EFF               	movwf	tosu,c
  3491  002E4E  50FA               	movf	pclath,w,c
  3492  002E50  0C2E               	retlw	46	;indir
  3493  002E52                     l3144:
  3494                           
  3495                           ;format.c: 86: m--;
  3496  002E52  0100               	movlb	0	; () banked
  3497  002E54  07A6               	decf	format_double@m& (0+255),f,b
  3498  002E56  A0D8               	btfss	status,0,c
  3499  002E58  07A7               	decf	(format_double@m+1)& (0+255),f,b
  3500  002E5A                     l3146:
  3501                           
  3502                           ; BSR set to: 0
  3503  002E5A  6A01               	clrf	___flge@ff1,c
  3504  002E5C  6A02               	clrf	___flge@ff1+1,c
  3505  002E5E  6A03               	clrf	___flge@ff1+2,c
  3506  002E60  0E34               	movlw	52
  3507  002E62  6E04               	movwf	___flge@ff1+3,c
  3508  002E64  C094  F005         	movff	format_double@num,___flge@ff2
  3509  002E68  C095  F006         	movff	format_double@num+1,___flge@ff2+1
  3510  002E6C  C096  F007         	movff	format_double@num+2,___flge@ff2+2
  3511  002E70  C097  F008         	movff	format_double@num+3,___flge@ff2+3
  3512  002E74  ECEB  F01E         	call	___flge
  3513  002E78  B0D8               	btfsc	status,0,c
  3514  002E7A  0012               	return		;funcret
  3515  002E7C  D740               	goto	l3128
  3516  002E7E                     __end_of_format_double:
  3517                           	opt stack 0
  3518                           tosu	equ	0xFFF
  3519                           tosh	equ	0xFFE
  3520                           tosl	equ	0xFFD
  3521                           pclath	equ	0xFFA
  3522                           tblptru	equ	0xFF8
  3523                           tblptrh	equ	0xFF7
  3524                           tblptrl	equ	0xFF6
  3525                           tablat	equ	0xFF5
  3526                           intcon	equ	0xFF2
  3527                           intcon2	equ	0xFF1
  3528                           postinc0	equ	0xFEE
  3529                           wreg	equ	0xFE8
  3530                           postdec1	equ	0xFE5
  3531                           fsr1l	equ	0xFE1
  3532                           status	equ	0xFD8
  3533                           
  3534 ;; *************** function _pow *****************
  3535 ;; Defined at:
  3536 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\pow.c"
  3537 ;; Parameters:    Size  Location     Type
  3538 ;;  x               4   31[BANK0 ] short 
  3539 ;;  y               4   35[BANK0 ] short 
  3540 ;; Auto vars:     Size  Location     Type
  3541 ;;  yi              4   48[BANK0 ] unsigned long 
  3542 ;;  sign            1   47[BANK0 ] unsigned char 
  3543 ;; Return value:  Size  Location     Type
  3544 ;;                  4   31[BANK0 ] unsigned char 
  3545 ;; Registers used:
  3546 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3547 ;; Tracked objects:
  3548 ;;		On entry : F/0
  3549 ;;		On exit  : F/0
  3550 ;;		Unchanged: 0/0
  3551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3552 ;;      Params:         0       8       0       0       0       0       0       0       0
  3553 ;;      Locals:         0      13       0       0       0       0       0       0       0
  3554 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3555 ;;      Totals:         0      21       0       0       0       0       0       0       0
  3556 ;;Total ram usage:       21 bytes
  3557 ;; Hardware stack levels used:    1
  3558 ;; Hardware stack levels required when called:    5
  3559 ;; This function calls:
  3560 ;;		___flge
  3561 ;;		___flmul
  3562 ;;		___flneg
  3563 ;;		___fltol
  3564 ;;		___lltofl
  3565 ;;		_exp
  3566 ;;		_log
  3567 ;; This function is called by:
  3568 ;;		_format_double
  3569 ;; This function uses a non-reentrant model
  3570 ;;
  3571                           
  3572                           	psect	text14
  3573  002E7E                     __ptext14:
  3574                           	opt stack 0
  3575  002E7E                     _pow:
  3576                           	opt stack 24
  3577                           
  3578                           ; BSR set to: 0
  3579                           
  3580                           ;incstack = 0
  3581  002E7E  6B8F               	clrf	pow@sign& (0+255),b
  3582                           
  3583                           ; BSR set to: 0
  3584  002E80  517F               	movf	pow@x& (0+255),w,b
  3585  002E82  1180               	iorwf	(pow@x+1)& (0+255),w,b
  3586  002E84  1181               	iorwf	(pow@x+2)& (0+255),w,b
  3587  002E86  1182               	iorwf	(pow@x+3)& (0+255),w,b
  3588  002E88  E110               	bnz	l2974
  3589                           
  3590                           ; BSR set to: 0
  3591  002E8A  6A01               	clrf	___flge@ff1,c
  3592  002E8C  6A02               	clrf	___flge@ff1+1,c
  3593  002E8E  6A03               	clrf	___flge@ff1+2,c
  3594  002E90  6A04               	clrf	___flge@ff1+3,c
  3595  002E92  C083  F005         	movff	pow@y,___flge@ff2
  3596  002E96  C084  F006         	movff	pow@y+1,___flge@ff2+1
  3597  002E9A  C085  F007         	movff	pow@y+2,___flge@ff2+2
  3598  002E9E  C086  F008         	movff	pow@y+3,___flge@ff2+3
  3599  002EA2  ECEB  F01E         	call	___flge	;wreg free
  3600  002EA6  0100               	movlb	0	; () banked
  3601  002EA8  D037               	goto	l2984
  3602  002EAA                     l2974:
  3603                           
  3604                           ; BSR set to: 0
  3605  002EAA  5183               	movf	pow@y& (0+255),w,b
  3606  002EAC  1184               	iorwf	(pow@y+1)& (0+255),w,b
  3607  002EAE  1185               	iorwf	(pow@y+2)& (0+255),w,b
  3608  002EB0  1186               	iorwf	(pow@y+3)& (0+255),w,b
  3609  002EB2  E107               	bnz	l2980
  3610                           
  3611                           ; BSR set to: 0
  3612  002EB4  6B7F               	clrf	?_pow& (0+255),b
  3613  002EB6  6B80               	clrf	(?_pow+1)& (0+255),b
  3614  002EB8  0E80               	movlw	128
  3615  002EBA  6F81               	movwf	(?_pow+2)& (0+255),b
  3616  002EBC  0E3F               	movlw	63
  3617  002EBE  6F82               	movwf	(?_pow+3)& (0+255),b
  3618  002EC0  D0A1               	goto	l1175
  3619  002EC2                     l2980:
  3620                           
  3621                           ; BSR set to: 0
  3622  002EC2  AF82               	btfss	(pow@x+3)& (0+255),7,b
  3623  002EC4  D043               	goto	l2990
  3624                           
  3625                           ; BSR set to: 0
  3626  002EC6  C083  F05B         	movff	pow@y,___fltol@f1
  3627  002ECA  C084  F05C         	movff	pow@y+1,___fltol@f1+1
  3628  002ECE  C085  F05D         	movff	pow@y+2,___fltol@f1+2
  3629  002ED2  C086  F05E         	movff	pow@y+3,___fltol@f1+3
  3630  002ED6  EC16  F01D         	call	___fltol	;wreg free
  3631  002EDA  C05B  F090         	movff	?___fltol,pow@yi
  3632  002EDE  C05C  F091         	movff	?___fltol+1,pow@yi+1
  3633  002EE2  C05D  F092         	movff	?___fltol+2,pow@yi+2
  3634  002EE6  C05E  F093         	movff	?___fltol+3,pow@yi+3
  3635  002EEA  C090  F00B         	movff	pow@yi,___lltofl@c
  3636  002EEE  C091  F00C         	movff	pow@yi+1,___lltofl@c+1
  3637  002EF2  C092  F00D         	movff	pow@yi+2,___lltofl@c+2
  3638  002EF6  C093  F00E         	movff	pow@yi+3,___lltofl@c+3
  3639  002EFA  EC8A  F020         	call	___lltofl	;wreg free
  3640  002EFE  0100               	movlb	0	; () banked
  3641  002F00  5183               	movf	pow@y& (0+255),w,b
  3642  002F02  180B               	xorwf	?___lltofl,w,c
  3643  002F04  E109               	bnz	u2320
  3644  002F06  5184               	movf	(pow@y+1)& (0+255),w,b
  3645  002F08  180C               	xorwf	?___lltofl+1,w,c
  3646  002F0A  E106               	bnz	u2320
  3647  002F0C  5185               	movf	(pow@y+2)& (0+255),w,b
  3648  002F0E  180D               	xorwf	?___lltofl+2,w,c
  3649  002F10  E103               	bnz	u2320
  3650  002F12  5186               	movf	(pow@y+3)& (0+255),w,b
  3651  002F14  180E               	xorwf	?___lltofl+3,w,c
  3652  002F16  E005               	bz	l2986
  3653  002F18                     u2320:
  3654  002F18                     l2984:
  3655                           
  3656                           ; BSR set to: 0
  3657  002F18  6B7F               	clrf	?_pow& (0+255),b
  3658  002F1A  6B80               	clrf	(?_pow+1)& (0+255),b
  3659  002F1C  6B81               	clrf	(?_pow+2)& (0+255),b
  3660  002F1E  6B82               	clrf	(?_pow+3)& (0+255),b
  3661  002F20  D071               	goto	l1175
  3662  002F22                     l2986:
  3663                           
  3664                           ; BSR set to: 0
  3665  002F22  5190               	movf	pow@yi& (0+255),w,b
  3666  002F24  0B01               	andlw	1
  3667  002F26  6F8F               	movwf	pow@sign& (0+255),b
  3668                           
  3669                           ; BSR set to: 0
  3670  002F28  C07F  F001         	movff	pow@x,___flneg@f1
  3671  002F2C  C080  F002         	movff	pow@x+1,___flneg@f1+1
  3672  002F30  C081  F003         	movff	pow@x+2,___flneg@f1+2
  3673  002F34  C082  F004         	movff	pow@x+3,___flneg@f1+3
  3674  002F38  ECEF  F020         	call	___flneg	;wreg free
  3675  002F3C  C001  F07F         	movff	?___flneg,pow@x
  3676  002F40  C002  F080         	movff	?___flneg+1,pow@x+1
  3677  002F44  C003  F081         	movff	?___flneg+2,pow@x+2
  3678  002F48  C004  F082         	movff	?___flneg+3,pow@x+3
  3679  002F4C                     l2990:
  3680                           
  3681                           ; BSR set to: 0
  3682  002F4C  C07F  F04D         	movff	pow@x,log@x
  3683  002F50  C080  F04E         	movff	pow@x+1,log@x+1
  3684  002F54  C081  F04F         	movff	pow@x+2,log@x+2
  3685  002F58  C082  F050         	movff	pow@x+3,log@x+3
  3686  002F5C  ECB7  F018         	call	_log	;wreg free
  3687  002F60  C04D  F087         	movff	?_log,_pow$1267
  3688  002F64  C04E  F088         	movff	?_log+1,_pow$1267+1
  3689  002F68  C04F  F089         	movff	?_log+2,_pow$1267+2
  3690  002F6C  C050  F08A         	movff	?_log+3,_pow$1267+3
  3691  002F70  C087  F01A         	movff	_pow$1267,___flmul@f1
  3692  002F74  C088  F01B         	movff	_pow$1267+1,___flmul@f1+1
  3693  002F78  C089  F01C         	movff	_pow$1267+2,___flmul@f1+2
  3694  002F7C  C08A  F01D         	movff	_pow$1267+3,___flmul@f1+3
  3695  002F80  C083  F01E         	movff	pow@y,___flmul@f2
  3696  002F84  C084  F01F         	movff	pow@y+1,___flmul@f2+1
  3697  002F88  C085  F020         	movff	pow@y+2,___flmul@f2+2
  3698  002F8C  C086  F021         	movff	pow@y+3,___flmul@f2+3
  3699  002F90  EC87  F015         	call	___flmul	;wreg free
  3700  002F94  C01A  F08B         	movff	?___flmul,_pow$1268
  3701  002F98  C01B  F08C         	movff	?___flmul+1,_pow$1268+1
  3702  002F9C  C01C  F08D         	movff	?___flmul+2,_pow$1268+2
  3703  002FA0  C01D  F08E         	movff	?___flmul+3,_pow$1268+3
  3704  002FA4  C08B  F074         	movff	_pow$1268,exp@x
  3705  002FA8  C08C  F075         	movff	_pow$1268+1,exp@x+1
  3706  002FAC  C08D  F076         	movff	_pow$1268+2,exp@x+2
  3707  002FB0  C08E  F077         	movff	_pow$1268+3,exp@x+3
  3708  002FB4  EC7E  F014         	call	_exp	;wreg free
  3709  002FB8  C074  F07F         	movff	?_exp,pow@x
  3710  002FBC  C075  F080         	movff	?_exp+1,pow@x+1
  3711  002FC0  C076  F081         	movff	?_exp+2,pow@x+2
  3712  002FC4  C077  F082         	movff	?_exp+3,pow@x+3
  3713  002FC8  0100               	movlb	0	; () banked
  3714  002FCA  518F               	movf	pow@sign& (0+255),w,b
  3715  002FCC  E013               	bz	l1179
  3716                           
  3717                           ; BSR set to: 0
  3718  002FCE  C07F  F001         	movff	pow@x,___flneg@f1
  3719  002FD2  C080  F002         	movff	pow@x+1,___flneg@f1+1
  3720  002FD6  C081  F003         	movff	pow@x+2,___flneg@f1+2
  3721  002FDA  C082  F004         	movff	pow@x+3,___flneg@f1+3
  3722  002FDE  ECEF  F020         	call	___flneg	;wreg free
  3723  002FE2  C001  F07F         	movff	?___flneg,?_pow
  3724  002FE6  C002  F080         	movff	?___flneg+1,?_pow+1
  3725  002FEA  C003  F081         	movff	?___flneg+2,?_pow+2
  3726  002FEE  C004  F082         	movff	?___flneg+3,?_pow+3
  3727  002FF2  D008               	goto	l1175
  3728  002FF4                     l1179:
  3729                           
  3730                           ; BSR set to: 0
  3731  002FF4  C07F  F07F         	movff	pow@x,?_pow
  3732  002FF8  C080  F080         	movff	pow@x+1,?_pow+1
  3733  002FFC  C081  F081         	movff	pow@x+2,?_pow+2
  3734  003000  C082  F082         	movff	pow@x+3,?_pow+3
  3735  003004                     l1175:
  3736                           
  3737                           ; BSR set to: 0
  3738  003004  0012               	return		;funcret
  3739  003006                     __end_of_pow:
  3740                           	opt stack 0
  3741                           tosu	equ	0xFFF
  3742                           tosh	equ	0xFFE
  3743                           tosl	equ	0xFFD
  3744                           pclath	equ	0xFFA
  3745                           tblptru	equ	0xFF8
  3746                           tblptrh	equ	0xFF7
  3747                           tblptrl	equ	0xFF6
  3748                           tablat	equ	0xFF5
  3749                           intcon	equ	0xFF2
  3750                           intcon2	equ	0xFF1
  3751                           postinc0	equ	0xFEE
  3752                           wreg	equ	0xFE8
  3753                           postdec1	equ	0xFE5
  3754                           fsr1l	equ	0xFE1
  3755                           status	equ	0xFD8
  3756                           
  3757 ;; *************** function _exp *****************
  3758 ;; Defined at:
  3759 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\exp.c"
  3760 ;; Parameters:    Size  Location     Type
  3761 ;;  x               4   20[BANK0 ] unsigned char 
  3762 ;; Auto vars:     Size  Location     Type
  3763 ;;  exponent        2   28[BANK0 ] int 
  3764 ;;  sign            1   30[BANK0 ] unsigned char 
  3765 ;; Return value:  Size  Location     Type
  3766 ;;                  4   20[BANK0 ] unsigned char 
  3767 ;; Registers used:
  3768 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3769 ;; Tracked objects:
  3770 ;;		On entry : 0/0
  3771 ;;		On exit  : 0/0
  3772 ;;		Unchanged: 0/0
  3773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3774 ;;      Params:         0       4       0       0       0       0       0       0       0
  3775 ;;      Locals:         0       7       0       0       0       0       0       0       0
  3776 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3777 ;;      Totals:         0      11       0       0       0       0       0       0       0
  3778 ;;Total ram usage:       11 bytes
  3779 ;; Hardware stack levels used:    1
  3780 ;; Hardware stack levels required when called:    4
  3781 ;; This function calls:
  3782 ;;		___awtofl
  3783 ;;		___fldiv
  3784 ;;		___flge
  3785 ;;		___flmul
  3786 ;;		___flneg
  3787 ;;		___flsub
  3788 ;;		___fltol
  3789 ;;		_eval_poly
  3790 ;;		_floor
  3791 ;;		_ldexp
  3792 ;; This function is called by:
  3793 ;;		_pow
  3794 ;; This function uses a non-reentrant model
  3795 ;;
  3796                           
  3797                           	psect	text15
  3798  0028FC                     __ptext15:
  3799                           	opt stack 0
  3800  0028FC                     _exp:
  3801                           	opt stack 24
  3802                           
  3803                           ; BSR set to: 0
  3804                           ;incstack = 0
  3805  0028FC  0100               	movlb	0	; () banked
  3806  0028FE  5174               	movf	exp@x& (0+255),w,b
  3807  002900  1175               	iorwf	(exp@x+1)& (0+255),w,b
  3808  002902  1176               	iorwf	(exp@x+2)& (0+255),w,b
  3809  002904  1177               	iorwf	(exp@x+3)& (0+255),w,b
  3810  002906  E106               	bnz	l2908
  3811                           
  3812                           ; BSR set to: 0
  3813  002908  6B74               	clrf	?_exp& (0+255),b
  3814  00290A  6B75               	clrf	(?_exp+1)& (0+255),b
  3815  00290C  0E80               	movlw	128
  3816  00290E  6F76               	movwf	(?_exp+2)& (0+255),b
  3817  002910  0E3F               	movlw	63
  3818  002912  D018               	goto	L3
  3819  002914                     l2908:
  3820                           
  3821                           ; BSR set to: 0
  3822  002914  0E18               	movlw	24
  3823  002916  6E01               	movwf	___flge@ff1,c
  3824  002918  0E72               	movlw	114
  3825  00291A  6E02               	movwf	___flge@ff1+1,c
  3826  00291C  0E31               	movlw	49
  3827  00291E  6E03               	movwf	___flge@ff1+2,c
  3828  002920  0E44               	movlw	68
  3829  002922  6E04               	movwf	___flge@ff1+3,c
  3830  002924  C074  F005         	movff	exp@x,___flge@ff2
  3831  002928  C075  F006         	movff	exp@x+1,___flge@ff2+1
  3832  00292C  C076  F007         	movff	exp@x+2,___flge@ff2+2
  3833  002930  C077  F008         	movff	exp@x+3,___flge@ff2+3
  3834  002934  ECEB  F01E         	call	___flge	;wreg free
  3835  002938  E207               	bc	l2914
  3836  00293A  0100               	movlb	0	; () banked
  3837  00293C  6974               	setf	?_exp& (0+255),b
  3838  00293E  6975               	setf	(?_exp+1)& (0+255),b
  3839  002940  0E7F               	movlw	127
  3840  002942  6F76               	movwf	(?_exp+2)& (0+255),b
  3841  002944                     L3:
  3842  002944  6F77               	movwf	(?_exp+3)& (0+255),b
  3843  002946  D0E2               	goto	l1201
  3844  002948                     l2914:
  3845  002948  C074  F001         	movff	exp@x,___flge@ff1
  3846  00294C  C075  F002         	movff	exp@x+1,___flge@ff1+1
  3847  002950  C076  F003         	movff	exp@x+2,___flge@ff1+2
  3848  002954  C077  F004         	movff	exp@x+3,___flge@ff1+3
  3849  002958  0E87               	movlw	135
  3850  00295A  6E05               	movwf	___flge@ff2,c
  3851  00295C  0E48               	movlw	72
  3852  00295E  6E06               	movwf	___flge@ff2+1,c
  3853  002960  0E3A               	movlw	58
  3854  002962  6E07               	movwf	___flge@ff2+2,c
  3855  002964  0EC4               	movlw	196
  3856  002966  6E08               	movwf	___flge@ff2+3,c
  3857  002968  ECEB  F01E         	call	___flge	;wreg free
  3858  00296C  E202               	bc	l2918
  3859  00296E  0100               	movlb	0	; () banked
  3860  002970  D0A6               	goto	l2938
  3861  002972                     l2918:
  3862  002972  0100               	movlb	0	; () banked
  3863  002974  0E01               	movlw	1
  3864  002976  AF77               	btfss	(exp@x+3)& (0+255),7,b
  3865  002978  0E00               	movlw	0
  3866  00297A  6F7E               	movwf	exp@sign& (0+255),b
  3867                           
  3868                           ; BSR set to: 0
  3869  00297C  517E               	movf	exp@sign& (0+255),w,b
  3870  00297E  E012               	bz	l2924
  3871                           
  3872                           ; BSR set to: 0
  3873  002980  C074  F001         	movff	exp@x,___flneg@f1
  3874  002984  C075  F002         	movff	exp@x+1,___flneg@f1+1
  3875  002988  C076  F003         	movff	exp@x+2,___flneg@f1+2
  3876  00298C  C077  F004         	movff	exp@x+3,___flneg@f1+3
  3877  002990  ECEF  F020         	call	___flneg	;wreg free
  3878  002994  C001  F074         	movff	?___flneg,exp@x
  3879  002998  C002  F075         	movff	?___flneg+1,exp@x+1
  3880  00299C  C003  F076         	movff	?___flneg+2,exp@x+2
  3881  0029A0  C004  F077         	movff	?___flneg+3,exp@x+3
  3882  0029A4                     l2924:
  3883                           
  3884                           ; BSR set to: 0
  3885  0029A4  C074  F01A         	movff	exp@x,___flmul@f1
  3886  0029A8  C075  F01B         	movff	exp@x+1,___flmul@f1+1
  3887  0029AC  C076  F01C         	movff	exp@x+2,___flmul@f1+2
  3888  0029B0  C077  F01D         	movff	exp@x+3,___flmul@f1+3
  3889  0029B4  0E3B               	movlw	59
  3890  0029B6  6E1E               	movwf	___flmul@f2,c
  3891  0029B8  0EAA               	movlw	170
  3892  0029BA  6E1F               	movwf	___flmul@f2+1,c
  3893  0029BC  0EB8               	movlw	184
  3894  0029BE  6E20               	movwf	___flmul@f2+2,c
  3895  0029C0  0E3F               	movlw	63
  3896  0029C2  6E21               	movwf	___flmul@f2+3,c
  3897  0029C4  EC87  F015         	call	___flmul	;wreg free
  3898  0029C8  C01A  F074         	movff	?___flmul,exp@x
  3899  0029CC  C01B  F075         	movff	?___flmul+1,exp@x+1
  3900  0029D0  C01C  F076         	movff	?___flmul+2,exp@x+2
  3901  0029D4  C01D  F077         	movff	?___flmul+3,exp@x+3
  3902  0029D8  C074  F06A         	movff	exp@x,floor@x
  3903  0029DC  C075  F06B         	movff	exp@x+1,floor@x+1
  3904  0029E0  C076  F06C         	movff	exp@x+2,floor@x+2
  3905  0029E4  C077  F06D         	movff	exp@x+3,floor@x+3
  3906  0029E8  ECC1  F019         	call	_floor	;wreg free
  3907  0029EC  C06A  F078         	movff	?_floor,_exp$1269
  3908  0029F0  C06B  F079         	movff	?_floor+1,_exp$1269+1
  3909  0029F4  C06C  F07A         	movff	?_floor+2,_exp$1269+2
  3910  0029F8  C06D  F07B         	movff	?_floor+3,_exp$1269+3
  3911  0029FC  C078  F05B         	movff	_exp$1269,___fltol@f1
  3912  002A00  C079  F05C         	movff	_exp$1269+1,___fltol@f1+1
  3913  002A04  C07A  F05D         	movff	_exp$1269+2,___fltol@f1+2
  3914  002A08  C07B  F05E         	movff	_exp$1269+3,___fltol@f1+3
  3915  002A0C  EC16  F01D         	call	___fltol	;wreg free
  3916  002A10  C05B  F07C         	movff	?___fltol,exp@exponent
  3917  002A14  C05C  F07D         	movff	?___fltol+1,exp@exponent+1
  3918                           
  3919                           ; BSR set to: 0
  3920  002A18  C074  F041         	movff	exp@x,___flsub@f1
  3921  002A1C  C075  F042         	movff	exp@x+1,___flsub@f1+1
  3922  002A20  C076  F043         	movff	exp@x+2,___flsub@f1+2
  3923  002A24  C077  F044         	movff	exp@x+3,___flsub@f1+3
  3924  002A28  C07C  F00B         	movff	exp@exponent,___awtofl@c
  3925  002A2C  C07D  F00C         	movff	exp@exponent+1,___awtofl@c+1
  3926  002A30  ECE6  F01F         	call	___awtofl	;wreg free
  3927  002A34  C00B  F045         	movff	?___awtofl,___flsub@f2
  3928  002A38  C00C  F046         	movff	?___awtofl+1,___flsub@f2+1
  3929  002A3C  C00D  F047         	movff	?___awtofl+2,___flsub@f2+2
  3930  002A40  C00E  F048         	movff	?___awtofl+3,___flsub@f2+3
  3931  002A44  ECA5  F01F         	call	___flsub	;wreg free
  3932  002A48  C041  F074         	movff	?___flsub,exp@x
  3933  002A4C  C042  F075         	movff	?___flsub+1,exp@x+1
  3934  002A50  C043  F076         	movff	?___flsub+2,exp@x+2
  3935  002A54  C044  F077         	movff	?___flsub+3,exp@x+3
  3936  002A58  C074  F041         	movff	exp@x,eval_poly@x
  3937  002A5C  C075  F042         	movff	exp@x+1,eval_poly@x+1
  3938  002A60  C076  F043         	movff	exp@x+2,eval_poly@x+2
  3939  002A64  C077  F044         	movff	exp@x+3,eval_poly@x+3
  3940  002A68  0E11               	movlw	low exp@coeff
  3941  002A6A  6E45               	movwf	eval_poly@d,c
  3942  002A6C  6A47               	clrf	eval_poly@n+1,c
  3943  002A6E  0E09               	movlw	9
  3944  002A70  6E46               	movwf	eval_poly@n,c
  3945  002A72  EC65  F01C         	call	_eval_poly	;wreg free
  3946  002A76  C041  F04D         	movff	?_eval_poly,ldexp@value
  3947  002A7A  C042  F04E         	movff	?_eval_poly+1,ldexp@value+1
  3948  002A7E  C043  F04F         	movff	?_eval_poly+2,ldexp@value+2
  3949  002A82  C044  F050         	movff	?_eval_poly+3,ldexp@value+3
  3950  002A86  C07C  F051         	movff	exp@exponent,ldexp@newexp
  3951  002A8A  C07D  F052         	movff	exp@exponent+1,ldexp@newexp+1
  3952  002A8E  EC65  F01D         	call	_ldexp	;wreg free
  3953  002A92  C04D  F074         	movff	?_ldexp,exp@x
  3954  002A96  C04E  F075         	movff	?_ldexp+1,exp@x+1
  3955  002A9A  C04F  F076         	movff	?_ldexp+2,exp@x+2
  3956  002A9E  C050  F077         	movff	?_ldexp+3,exp@x+3
  3957  002AA2  0100               	movlb	0	; () banked
  3958  002AA4  517E               	movf	exp@sign& (0+255),w,b
  3959  002AA6  E02A               	bz	l1205
  3960                           
  3961                           ; BSR set to: 0
  3962  002AA8  2974               	incf	exp@x& (0+255),w,b
  3963  002AAA  E10E               	bnz	l2940
  3964  002AAC  2975               	incf	(exp@x+1)& (0+255),w,b
  3965  002AAE  E10C               	bnz	l2940
  3966  002AB0  0E7F               	movlw	127
  3967  002AB2  1976               	xorwf	(exp@x+2)& (0+255),w,b
  3968  002AB4  E109               	bnz	l2940
  3969  002AB6  0E7F               	movlw	127
  3970  002AB8  1977               	xorwf	(exp@x+3)& (0+255),w,b
  3971  002ABA  A4D8               	btfss	status,2,c
  3972  002ABC  D005               	goto	l2940
  3973  002ABE                     l2938:
  3974                           
  3975                           ; BSR set to: 0
  3976  002ABE  6B74               	clrf	?_exp& (0+255),b
  3977  002AC0  6B75               	clrf	(?_exp+1)& (0+255),b
  3978  002AC2  6B76               	clrf	(?_exp+2)& (0+255),b
  3979  002AC4  6B77               	clrf	(?_exp+3)& (0+255),b
  3980  002AC6  D022               	goto	l1201
  3981  002AC8                     l2940:
  3982                           
  3983                           ; BSR set to: 0
  3984  002AC8  0E00               	movlw	0
  3985  002ACA  6E0B               	movwf	___fldiv@f1,c
  3986  002ACC  6E0C               	movwf	___fldiv@f1+1,c
  3987  002ACE  0E80               	movlw	128
  3988  002AD0  6E0D               	movwf	___fldiv@f1+2,c
  3989  002AD2  0E3F               	movlw	63
  3990  002AD4  6E0E               	movwf	___fldiv@f1+3,c
  3991  002AD6  C074  F00F         	movff	exp@x,___fldiv@f2
  3992  002ADA  C075  F010         	movff	exp@x+1,___fldiv@f2+1
  3993  002ADE  C076  F011         	movff	exp@x+2,___fldiv@f2+2
  3994  002AE2  C077  F012         	movff	exp@x+3,___fldiv@f2+3
  3995  002AE6  ECC3  F01C         	call	___fldiv	;wreg free
  3996  002AEA  C00B  F074         	movff	?___fldiv,?_exp
  3997  002AEE  C00C  F075         	movff	?___fldiv+1,?_exp+1
  3998  002AF2  C00D  F076         	movff	?___fldiv+2,?_exp+2
  3999  002AF6  C00E  F077         	movff	?___fldiv+3,?_exp+3
  4000  002AFA  D008               	goto	l1201
  4001  002AFC                     l1205:
  4002                           
  4003                           ; BSR set to: 0
  4004  002AFC  C074  F074         	movff	exp@x,?_exp
  4005  002B00  C075  F075         	movff	exp@x+1,?_exp+1
  4006  002B04  C076  F076         	movff	exp@x+2,?_exp+2
  4007  002B08  C077  F077         	movff	exp@x+3,?_exp+3
  4008  002B0C                     l1201:
  4009  002B0C  0012               	return		;funcret
  4010  002B0E                     __end_of_exp:
  4011                           	opt stack 0
  4012                           tosu	equ	0xFFF
  4013                           tosh	equ	0xFFE
  4014                           tosl	equ	0xFFD
  4015                           pclath	equ	0xFFA
  4016                           tblptru	equ	0xFF8
  4017                           tblptrh	equ	0xFF7
  4018                           tblptrl	equ	0xFF6
  4019                           tablat	equ	0xFF5
  4020                           intcon	equ	0xFF2
  4021                           intcon2	equ	0xFF1
  4022                           postinc0	equ	0xFEE
  4023                           wreg	equ	0xFE8
  4024                           postdec1	equ	0xFE5
  4025                           fsr1l	equ	0xFE1
  4026                           status	equ	0xFD8
  4027                           
  4028 ;; *************** function _ldexp *****************
  4029 ;; Defined at:
  4030 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  4031 ;; Parameters:    Size  Location     Type
  4032 ;;  value           4   76[COMRAM] unsigned char 
  4033 ;;  newexp          2   80[COMRAM] int 
  4034 ;; Auto vars:     Size  Location     Type
  4035 ;;		None
  4036 ;; Return value:  Size  Location     Type
  4037 ;;                  4   76[COMRAM] int 
  4038 ;; Registers used:
  4039 ;;		wreg, status,2, status,0
  4040 ;; Tracked objects:
  4041 ;;		On entry : 0/0
  4042 ;;		On exit  : 0/0
  4043 ;;		Unchanged: 0/0
  4044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4045 ;;      Params:         6       0       0       0       0       0       0       0       0
  4046 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4047 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4048 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4049 ;;Total ram usage:        8 bytes
  4050 ;; Hardware stack levels used:    1
  4051 ;; Hardware stack levels required when called:    1
  4052 ;; This function calls:
  4053 ;;		Nothing
  4054 ;; This function is called by:
  4055 ;;		_exp
  4056 ;; This function uses a non-reentrant model
  4057 ;;
  4058                           
  4059                           	psect	text16
  4060  003ACA                     __ptext16:
  4061                           	opt stack 0
  4062  003ACA                     _ldexp:
  4063                           	opt stack 26
  4064                           
  4065                           ;incstack = 0
  4066  003ACA  504D               	movf	ldexp@value,w,c
  4067  003ACC  104E               	iorwf	ldexp@value+1,w,c
  4068  003ACE  104F               	iorwf	ldexp@value+2,w,c
  4069  003AD0  1050               	iorwf	ldexp@value+3,w,c
  4070  003AD2  E013               	bz	l2718
  4071  003AD4  5050               	movf	ldexp@value+3,w,c
  4072  003AD6  0B7F               	andlw	127
  4073  003AD8  6E53               	movwf	??_ldexp& (0+255),c
  4074  003ADA  6A54               	clrf	(??_ldexp+1)& (0+255),c
  4075  003ADC  90D8               	bcf	status,0,c
  4076  003ADE  3653               	rlcf	??_ldexp,f,c
  4077  003AE0  3654               	rlcf	??_ldexp+1,f,c
  4078  003AE2  5053               	movf	??_ldexp,w,c
  4079  003AE4  2651               	addwf	ldexp@newexp,f,c
  4080  003AE6  5054               	movf	??_ldexp+1,w,c
  4081  003AE8  2252               	addwfc	ldexp@newexp+1,f,c
  4082  003AEA  0E01               	movlw	1
  4083  003AEC  AE4F               	btfss	ldexp@value+2,7,c
  4084  003AEE  0E00               	movlw	0
  4085  003AF0  2651               	addwf	ldexp@newexp,f,c
  4086  003AF2  0E00               	movlw	0
  4087  003AF4  2252               	addwfc	ldexp@newexp+1,f,c
  4088  003AF6  AE52               	btfss	ldexp@newexp+1,7,c
  4089  003AF8  D005               	goto	l2722
  4090  003AFA                     l2718:
  4091  003AFA  6A4D               	clrf	?_ldexp,c
  4092  003AFC  6A4E               	clrf	?_ldexp+1,c
  4093  003AFE  6A4F               	clrf	?_ldexp+2,c
  4094  003B00  6A50               	clrf	?_ldexp+3,c
  4095  003B02  D02E               	goto	l937
  4096  003B04                     l2722:
  4097  003B04  BE52               	btfsc	ldexp@newexp+1,7,c
  4098  003B06  D010               	goto	l2736
  4099  003B08  0452               	decf	ldexp@newexp+1,w,c
  4100  003B0A  E30E               	bnc	l2736
  4101  003B0C  AE50               	btfss	ldexp@value+3,7,c
  4102  003B0E  D006               	goto	l2732
  4103  003B10  684D               	setf	?_ldexp,c
  4104  003B12  684E               	setf	?_ldexp+1,c
  4105  003B14  0E7F               	movlw	127
  4106  003B16  6E4F               	movwf	?_ldexp+2,c
  4107  003B18  0EFF               	movlw	255
  4108  003B1A  D004               	goto	L4
  4109  003B1C                     l2732:
  4110  003B1C  684D               	setf	?_ldexp,c
  4111  003B1E  684E               	setf	?_ldexp+1,c
  4112  003B20  0E7F               	movlw	127
  4113  003B22  6E4F               	movwf	?_ldexp+2,c
  4114  003B24                     L4:
  4115  003B24  6E50               	movwf	?_ldexp+3,c
  4116  003B26  D01C               	goto	l937
  4117  003B28                     l2736:
  4118  003B28  3452               	rlcf	ldexp@newexp+1,w,c
  4119  003B2A  3052               	rrcf	ldexp@newexp+1,w,c
  4120  003B2C  6E54               	movwf	(??_ldexp+1)& (0+255),c
  4121  003B2E  3051               	rrcf	ldexp@newexp,w,c
  4122  003B30  6E53               	movwf	??_ldexp& (0+255),c
  4123  003B32  1850               	xorwf	ldexp@value+3,w,c
  4124  003B34  0B80               	andlw	-128
  4125  003B36  1853               	xorwf	??_ldexp,w,c
  4126  003B38  6E50               	movwf	ldexp@value+3,c
  4127  003B3A  C051  F053         	movff	ldexp@newexp,??_ldexp
  4128  003B3E  0E01               	movlw	1
  4129  003B40  1653               	andwf	??_ldexp,f,c
  4130  003B42  3253               	rrcf	??_ldexp,f,c
  4131  003B44  3253               	rrcf	??_ldexp,f,c
  4132  003B46  504F               	movf	ldexp@value+2,w,c
  4133  003B48  1853               	xorwf	??_ldexp,w,c
  4134  003B4A  0B7F               	andlw	-129
  4135  003B4C  1853               	xorwf	??_ldexp,w,c
  4136  003B4E  6E4F               	movwf	ldexp@value+2,c
  4137  003B50  C04D  F04D         	movff	ldexp@value,?_ldexp
  4138  003B54  C04E  F04E         	movff	ldexp@value+1,?_ldexp+1
  4139  003B58  C04F  F04F         	movff	ldexp@value+2,?_ldexp+2
  4140  003B5C  C050  F050         	movff	ldexp@value+3,?_ldexp+3
  4141  003B60                     l937:
  4142  003B60  0012               	return		;funcret
  4143  003B62                     __end_of_ldexp:
  4144                           	opt stack 0
  4145                           tosu	equ	0xFFF
  4146                           tosh	equ	0xFFE
  4147                           tosl	equ	0xFFD
  4148                           pclath	equ	0xFFA
  4149                           tblptru	equ	0xFF8
  4150                           tblptrh	equ	0xFF7
  4151                           tblptrl	equ	0xFF6
  4152                           tablat	equ	0xFF5
  4153                           intcon	equ	0xFF2
  4154                           intcon2	equ	0xFF1
  4155                           postinc0	equ	0xFEE
  4156                           wreg	equ	0xFE8
  4157                           postdec1	equ	0xFE5
  4158                           fsr1l	equ	0xFE1
  4159                           status	equ	0xFD8
  4160                           
  4161 ;; *************** function _floor *****************
  4162 ;; Defined at:
  4163 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\floor.c"
  4164 ;; Parameters:    Size  Location     Type
  4165 ;;  x               4   10[BANK0 ] int 
  4166 ;; Auto vars:     Size  Location     Type
  4167 ;;  i               4   14[BANK0 ] int 
  4168 ;;  expon           2   18[BANK0 ] int 
  4169 ;; Return value:  Size  Location     Type
  4170 ;;                  4   10[BANK0 ] int 
  4171 ;; Registers used:
  4172 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4173 ;; Tracked objects:
  4174 ;;		On entry : 0/0
  4175 ;;		On exit  : 0/0
  4176 ;;		Unchanged: 0/0
  4177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4178 ;;      Params:         0       4       0       0       0       0       0       0       0
  4179 ;;      Locals:         0       6       0       0       0       0       0       0       0
  4180 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4181 ;;      Totals:         0      10       0       0       0       0       0       0       0
  4182 ;;Total ram usage:       10 bytes
  4183 ;; Hardware stack levels used:    1
  4184 ;; Hardware stack levels required when called:    3
  4185 ;; This function calls:
  4186 ;;		___altofl
  4187 ;;		___fladd
  4188 ;;		___flge
  4189 ;;		___fltol
  4190 ;;		_frexp
  4191 ;; This function is called by:
  4192 ;;		_format_double
  4193 ;;		_exp
  4194 ;; This function uses a non-reentrant model
  4195 ;;
  4196                           
  4197                           	psect	text17
  4198  003382                     __ptext17:
  4199                           	opt stack 0
  4200  003382                     _floor:
  4201                           	opt stack 24
  4202                           
  4203                           ;incstack = 0
  4204  003382  C06A  F001         	movff	floor@x,frexp@value
  4205  003386  C06B  F002         	movff	floor@x+1,frexp@value+1
  4206  00338A  C06C  F003         	movff	floor@x+2,frexp@value+2
  4207  00338E  C06D  F004         	movff	floor@x+3,frexp@value+3
  4208  003392  0E72               	movlw	low floor@expon
  4209  003394  6E05               	movwf	frexp@eptr,c
  4210  003396  ECB1  F01D         	call	_frexp	;wreg free
  4211  00339A  0100               	movlb	0	; () banked
  4212  00339C  AF73               	btfss	(floor@expon+1)& (0+255),7,b
  4213  00339E  D00E               	goto	l2634
  4214                           
  4215                           ; BSR set to: 0
  4216  0033A0  AF6D               	btfss	(floor@x+3)& (0+255),7,b
  4217  0033A2  D007               	goto	l904
  4218                           
  4219                           ; BSR set to: 0
  4220  0033A4  6B6A               	clrf	?_floor& (0+255),b
  4221  0033A6  6B6B               	clrf	(?_floor+1)& (0+255),b
  4222  0033A8  0E80               	movlw	128
  4223  0033AA  6F6C               	movwf	(?_floor+2)& (0+255),b
  4224  0033AC  0EBF               	movlw	191
  4225  0033AE  6F6D               	movwf	(?_floor+3)& (0+255),b
  4226  0033B0  D064               	goto	l905
  4227  0033B2                     l904:
  4228                           
  4229                           ; BSR set to: 0
  4230  0033B2  6B6A               	clrf	?_floor& (0+255),b
  4231  0033B4  6B6B               	clrf	(?_floor+1)& (0+255),b
  4232  0033B6  6B6C               	clrf	(?_floor+2)& (0+255),b
  4233  0033B8  6B6D               	clrf	(?_floor+3)& (0+255),b
  4234  0033BA  D05F               	goto	l905
  4235  0033BC                     l2634:
  4236                           
  4237                           ; BSR set to: 0
  4238  0033BC  5173               	movf	(floor@expon+1)& (0+255),w,b
  4239  0033BE  E103               	bnz	u1850
  4240  0033C0  0E1D               	movlw	29
  4241  0033C2  5D72               	subwf	floor@expon& (0+255),w,b
  4242  0033C4  E309               	bnc	l2638
  4243  0033C6                     u1850:
  4244                           
  4245                           ; BSR set to: 0
  4246  0033C6  C06A  F06A         	movff	floor@x,?_floor
  4247  0033CA  C06B  F06B         	movff	floor@x+1,?_floor+1
  4248  0033CE  C06C  F06C         	movff	floor@x+2,?_floor+2
  4249  0033D2  C06D  F06D         	movff	floor@x+3,?_floor+3
  4250  0033D6  D051               	goto	l905
  4251  0033D8                     l2638:
  4252                           
  4253                           ; BSR set to: 0
  4254  0033D8  C06A  F05B         	movff	floor@x,___fltol@f1
  4255  0033DC  C06B  F05C         	movff	floor@x+1,___fltol@f1+1
  4256  0033E0  C06C  F05D         	movff	floor@x+2,___fltol@f1+2
  4257  0033E4  C06D  F05E         	movff	floor@x+3,___fltol@f1+3
  4258  0033E8  EC16  F01D         	call	___fltol	;wreg free
  4259  0033EC  C05B  F066         	movff	?___fltol,___altofl@c
  4260  0033F0  C05C  F067         	movff	?___fltol+1,___altofl@c+1
  4261  0033F4  C05D  F068         	movff	?___fltol+2,___altofl@c+2
  4262  0033F8  C05E  F069         	movff	?___fltol+3,___altofl@c+3
  4263  0033FC  EC81  F01F         	call	___altofl	;wreg free
  4264  003400  C066  F06E         	movff	?___altofl,floor@i
  4265  003404  C067  F06F         	movff	?___altofl+1,floor@i+1
  4266  003408  C068  F070         	movff	?___altofl+2,floor@i+2
  4267  00340C  C069  F071         	movff	?___altofl+3,floor@i+3
  4268  003410  C06A  F001         	movff	floor@x,___flge@ff1
  4269  003414  C06B  F002         	movff	floor@x+1,___flge@ff1+1
  4270  003418  C06C  F003         	movff	floor@x+2,___flge@ff1+2
  4271  00341C  C06D  F004         	movff	floor@x+3,___flge@ff1+3
  4272  003420  C06E  F005         	movff	floor@i,___flge@ff2
  4273  003424  C06F  F006         	movff	floor@i+1,___flge@ff2+1
  4274  003428  C070  F007         	movff	floor@i+2,___flge@ff2+2
  4275  00342C  C071  F008         	movff	floor@i+3,___flge@ff2+3
  4276  003430  ECEB  F01E         	call	___flge	;wreg free
  4277  003434  E21A               	bc	l907
  4278  003436  C06E  F035         	movff	floor@i,___fladd@f1
  4279  00343A  C06F  F036         	movff	floor@i+1,___fladd@f1+1
  4280  00343E  C070  F037         	movff	floor@i+2,___fladd@f1+2
  4281  003442  C071  F038         	movff	floor@i+3,___fladd@f1+3
  4282  003446  0E00               	movlw	0
  4283  003448  6E39               	movwf	___fladd@f2,c
  4284  00344A  6E3A               	movwf	___fladd@f2+1,c
  4285  00344C  0E80               	movlw	128
  4286  00344E  6E3B               	movwf	___fladd@f2+2,c
  4287  003450  0EBF               	movlw	191
  4288  003452  6E3C               	movwf	___fladd@f2+3,c
  4289  003454  EC03  F018         	call	___fladd	;wreg free
  4290  003458  C035  F06A         	movff	?___fladd,?_floor
  4291  00345C  C036  F06B         	movff	?___fladd+1,?_floor+1
  4292  003460  C037  F06C         	movff	?___fladd+2,?_floor+2
  4293  003464  C038  F06D         	movff	?___fladd+3,?_floor+3
  4294  003468  D008               	goto	l905
  4295  00346A                     l907:
  4296  00346A  C06E  F06A         	movff	floor@i,?_floor
  4297  00346E  C06F  F06B         	movff	floor@i+1,?_floor+1
  4298  003472  C070  F06C         	movff	floor@i+2,?_floor+2
  4299  003476  C071  F06D         	movff	floor@i+3,?_floor+3
  4300  00347A                     l905:
  4301  00347A  0012               	return		;funcret
  4302  00347C                     __end_of_floor:
  4303                           	opt stack 0
  4304                           tosu	equ	0xFFF
  4305                           tosh	equ	0xFFE
  4306                           tosl	equ	0xFFD
  4307                           pclath	equ	0xFFA
  4308                           tblptru	equ	0xFF8
  4309                           tblptrh	equ	0xFF7
  4310                           tblptrl	equ	0xFF6
  4311                           tablat	equ	0xFF5
  4312                           intcon	equ	0xFF2
  4313                           intcon2	equ	0xFF1
  4314                           postinc0	equ	0xFEE
  4315                           wreg	equ	0xFE8
  4316                           postdec1	equ	0xFE5
  4317                           fsr1l	equ	0xFE1
  4318                           status	equ	0xFD8
  4319                           
  4320 ;; *************** function ___fltol *****************
  4321 ;; Defined at:
  4322 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fltol.c"
  4323 ;; Parameters:    Size  Location     Type
  4324 ;;  f1              4   90[COMRAM] int 
  4325 ;; Auto vars:     Size  Location     Type
  4326 ;;  exp1            1    5[BANK0 ] unsigned char 
  4327 ;;  sign1           1    4[BANK0 ] unsigned char 
  4328 ;; Return value:  Size  Location     Type
  4329 ;;                  4   90[COMRAM] long 
  4330 ;; Registers used:
  4331 ;;		wreg, status,2, status,0
  4332 ;; Tracked objects:
  4333 ;;		On entry : 0/0
  4334 ;;		On exit  : F/0
  4335 ;;		Unchanged: 0/0
  4336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4337 ;;      Params:         4       0       0       0       0       0       0       0       0
  4338 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4339 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4340 ;;      Totals:         4       6       0       0       0       0       0       0       0
  4341 ;;Total ram usage:       10 bytes
  4342 ;; Hardware stack levels used:    1
  4343 ;; Hardware stack levels required when called:    1
  4344 ;; This function calls:
  4345 ;;		Nothing
  4346 ;; This function is called by:
  4347 ;;		_format_double
  4348 ;;		_measure_capacitance
  4349 ;;		_measure_inductance
  4350 ;;		_floor
  4351 ;;		_pow
  4352 ;;		_exp
  4353 ;; This function uses a non-reentrant model
  4354 ;;
  4355                           
  4356                           	psect	text18
  4357  003A2C                     __ptext18:
  4358                           	opt stack 0
  4359  003A2C                     ___fltol:
  4360                           	opt stack 28
  4361                           
  4362                           ;incstack = 0
  4363  003A2C  345D               	rlcf	___fltol@f1+2,w,c
  4364  003A2E  345E               	rlcf	___fltol@f1+3,w,c
  4365  003A30  0100               	movlb	0	; () banked
  4366  003A32  6F65               	movwf	___fltol@exp1& (0+255),b
  4367  003A34  5165               	movf	___fltol@exp1& (0+255),w,b
  4368  003A36  E105               	bnz	l2586
  4369  003A38                     l2584:
  4370                           
  4371                           ; BSR set to: 0
  4372  003A38  6A5B               	clrf	?___fltol,c
  4373  003A3A  6A5C               	clrf	?___fltol+1,c
  4374  003A3C  6A5D               	clrf	?___fltol+2,c
  4375  003A3E  6A5E               	clrf	?___fltol+3,c
  4376  003A40  D043               	goto	l917
  4377  003A42                     l2586:
  4378                           
  4379                           ; BSR set to: 0
  4380  003A42  C05B  F060         	movff	___fltol@f1,??___fltol
  4381  003A46  C05C  F061         	movff	___fltol@f1+1,??___fltol+1
  4382  003A4A  C05D  F062         	movff	___fltol@f1+2,??___fltol+2
  4383  003A4E  C05E  F063         	movff	___fltol@f1+3,??___fltol+3
  4384  003A52  0E20               	movlw	32
  4385  003A54  D005               	goto	u1770
  4386  003A56                     u1775:
  4387  003A56  90D8               	bcf	status,0,c
  4388  003A58  3363               	rrcf	(??___fltol+3)& (0+255),f,b
  4389  003A5A  3362               	rrcf	(??___fltol+2)& (0+255),f,b
  4390  003A5C  3361               	rrcf	(??___fltol+1)& (0+255),f,b
  4391  003A5E  3360               	rrcf	??___fltol& (0+255),f,b
  4392  003A60                     u1770:
  4393  003A60  2EE8               	decfsz	wreg,f,c
  4394  003A62  D7F9               	goto	u1775
  4395  003A64  5160               	movf	??___fltol& (0+255),w,b
  4396  003A66  6F64               	movwf	___fltol@sign1& (0+255),b
  4397                           
  4398                           ; BSR set to: 0
  4399  003A68  8E5D               	bsf	___fltol@f1+2,7,c
  4400                           
  4401                           ; BSR set to: 0
  4402  003A6A  6A5E               	clrf	___fltol@f1+3,c
  4403                           
  4404                           ; BSR set to: 0
  4405  003A6C  0E96               	movlw	150
  4406  003A6E  5F65               	subwf	___fltol@exp1& (0+255),f,b
  4407                           
  4408                           ; BSR set to: 0
  4409  003A70  AF65               	btfss	___fltol@exp1& (0+255),7,b
  4410  003A72  D00C               	goto	l2604
  4411                           
  4412                           ; BSR set to: 0
  4413  003A74  5165               	movf	___fltol@exp1& (0+255),w,b
  4414  003A76  0A80               	xorlw	128
  4415  003A78  0F97               	addlw	151
  4416  003A7A  E3DE               	bnc	l2584
  4417  003A7C                     l2600:
  4418                           
  4419                           ; BSR set to: 0
  4420  003A7C  90D8               	bcf	status,0,c
  4421  003A7E  325E               	rrcf	___fltol@f1+3,f,c
  4422  003A80  325D               	rrcf	___fltol@f1+2,f,c
  4423  003A82  325C               	rrcf	___fltol@f1+1,f,c
  4424  003A84  325B               	rrcf	___fltol@f1,f,c
  4425                           
  4426                           ; BSR set to: 0
  4427  003A86  3F65               	incfsz	___fltol@exp1& (0+255),f,b
  4428  003A88  D7F9               	goto	l2600
  4429  003A8A  D00C               	goto	l2612
  4430  003A8C                     l2604:
  4431                           
  4432                           ; BSR set to: 0
  4433  003A8C  0E1F               	movlw	31
  4434  003A8E  6565               	cpfsgt	___fltol@exp1& (0+255),b
  4435  003A90  D007               	goto	l2610
  4436  003A92  D7D2               	goto	l2584
  4437  003A94                     l2608:
  4438                           
  4439                           ; BSR set to: 0
  4440  003A94  90D8               	bcf	status,0,c
  4441  003A96  365B               	rlcf	___fltol@f1,f,c
  4442  003A98  365C               	rlcf	___fltol@f1+1,f,c
  4443  003A9A  365D               	rlcf	___fltol@f1+2,f,c
  4444  003A9C  365E               	rlcf	___fltol@f1+3,f,c
  4445  003A9E  0765               	decf	___fltol@exp1& (0+255),f,b
  4446  003AA0                     l2610:
  4447                           
  4448                           ; BSR set to: 0
  4449  003AA0  5165               	movf	___fltol@exp1& (0+255),w,b
  4450  003AA2  E1F8               	bnz	l2608
  4451  003AA4                     l2612:
  4452                           
  4453                           ; BSR set to: 0
  4454  003AA4  5164               	movf	___fltol@sign1& (0+255),w,b
  4455  003AA6  E008               	bz	l2616
  4456                           
  4457                           ; BSR set to: 0
  4458  003AA8  1E5E               	comf	___fltol@f1+3,f,c
  4459  003AAA  1E5D               	comf	___fltol@f1+2,f,c
  4460  003AAC  1E5C               	comf	___fltol@f1+1,f,c
  4461  003AAE  6C5B               	negf	___fltol@f1,c
  4462  003AB0  0E00               	movlw	0
  4463  003AB2  225C               	addwfc	___fltol@f1+1,f,c
  4464  003AB4  225D               	addwfc	___fltol@f1+2,f,c
  4465  003AB6  225E               	addwfc	___fltol@f1+3,f,c
  4466  003AB8                     l2616:
  4467                           
  4468                           ; BSR set to: 0
  4469  003AB8  C05B  F05B         	movff	___fltol@f1,?___fltol
  4470  003ABC  C05C  F05C         	movff	___fltol@f1+1,?___fltol+1
  4471  003AC0  C05D  F05D         	movff	___fltol@f1+2,?___fltol+2
  4472  003AC4  C05E  F05E         	movff	___fltol@f1+3,?___fltol+3
  4473  003AC8                     l917:
  4474                           
  4475                           ; BSR set to: 0
  4476  003AC8  0012               	return		;funcret
  4477  003ACA                     __end_of___fltol:
  4478                           	opt stack 0
  4479                           tosu	equ	0xFFF
  4480                           tosh	equ	0xFFE
  4481                           tosl	equ	0xFFD
  4482                           pclath	equ	0xFFA
  4483                           tblptru	equ	0xFF8
  4484                           tblptrh	equ	0xFF7
  4485                           tblptrl	equ	0xFF6
  4486                           tablat	equ	0xFF5
  4487                           intcon	equ	0xFF2
  4488                           intcon2	equ	0xFF1
  4489                           postinc0	equ	0xFEE
  4490                           wreg	equ	0xFE8
  4491                           postdec1	equ	0xFE5
  4492                           fsr1l	equ	0xFE1
  4493                           status	equ	0xFD8
  4494                           
  4495 ;; *************** function ___flge *****************
  4496 ;; Defined at:
  4497 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flge.c"
  4498 ;; Parameters:    Size  Location     Type
  4499 ;;  ff1             4    0[COMRAM] long 
  4500 ;;  ff2             4    4[COMRAM] long 
  4501 ;; Auto vars:     Size  Location     Type
  4502 ;;		None
  4503 ;; Return value:  Size  Location     Type
  4504 ;;		None               void
  4505 ;; Registers used:
  4506 ;;		wreg, status,2, status,0
  4507 ;; Tracked objects:
  4508 ;;		On entry : 0/0
  4509 ;;		On exit  : 0/0
  4510 ;;		Unchanged: 0/0
  4511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4512 ;;      Params:         8       0       0       0       0       0       0       0       0
  4513 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4514 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4515 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4516 ;;Total ram usage:        8 bytes
  4517 ;; Hardware stack levels used:    1
  4518 ;; Hardware stack levels required when called:    1
  4519 ;; This function calls:
  4520 ;;		Nothing
  4521 ;; This function is called by:
  4522 ;;		_format_double
  4523 ;;		_measure_capacitance
  4524 ;;		_measure_inductance
  4525 ;;		_floor
  4526 ;;		_pow
  4527 ;;		_exp
  4528 ;; This function uses a non-reentrant model
  4529 ;;
  4530                           
  4531                           	psect	text19
  4532  003DD6                     __ptext19:
  4533                           	opt stack 0
  4534  003DD6                     ___flge:
  4535                           	opt stack 28
  4536                           
  4537                           ; BSR set to: 0
  4538                           ;incstack = 0
  4539  003DD6  AE04               	btfss	___flge@ff1+3,7,c
  4540  003DD8  D009               	goto	l2552
  4541  003DDA  6C01               	negf	___flge@ff1,c
  4542  003DDC  1E02               	comf	___flge@ff1+1,f,c
  4543  003DDE  B0D8               	btfsc	status,0,c
  4544  003DE0  2A02               	incf	___flge@ff1+1,f,c
  4545  003DE2  1E03               	comf	___flge@ff1+2,f,c
  4546  003DE4  B0D8               	btfsc	status,0,c
  4547  003DE6  2A03               	incf	___flge@ff1+2,f,c
  4548  003DE8  0E80               	movlw	128
  4549  003DEA  5604               	subfwb	___flge@ff1+3,f,c
  4550  003DEC                     l2552:
  4551  003DEC  AE08               	btfss	___flge@ff2+3,7,c
  4552  003DEE  D009               	goto	l866
  4553  003DF0  6C05               	negf	___flge@ff2,c
  4554  003DF2  1E06               	comf	___flge@ff2+1,f,c
  4555  003DF4  B0D8               	btfsc	status,0,c
  4556  003DF6  2A06               	incf	___flge@ff2+1,f,c
  4557  003DF8  1E07               	comf	___flge@ff2+2,f,c
  4558  003DFA  B0D8               	btfsc	status,0,c
  4559  003DFC  2A07               	incf	___flge@ff2+2,f,c
  4560  003DFE  0E80               	movlw	128
  4561  003E00  5608               	subfwb	___flge@ff2+3,f,c
  4562  003E02                     l866:
  4563  003E02  0E80               	movlw	128
  4564  003E04  1A04               	xorwf	___flge@ff1+3,f,c
  4565  003E06  1A08               	xorwf	___flge@ff2+3,f,c
  4566  003E08  5005               	movf	___flge@ff2,w,c
  4567  003E0A  5C01               	subwf	___flge@ff1,w,c
  4568  003E0C  5006               	movf	___flge@ff2+1,w,c
  4569  003E0E  5802               	subwfb	___flge@ff1+1,w,c
  4570  003E10  5007               	movf	___flge@ff2+2,w,c
  4571  003E12  5803               	subwfb	___flge@ff1+2,w,c
  4572  003E14  5008               	movf	___flge@ff2+3,w,c
  4573  003E16  5804               	subwfb	___flge@ff1+3,w,c
  4574  003E18  E202               	bc	l2558
  4575  003E1A  90D8               	bcf	status,0,c
  4576  003E1C  D001               	goto	l867
  4577  003E1E                     l2558:
  4578  003E1E  80D8               	bsf	status,0,c
  4579  003E20                     l867:
  4580  003E20  0012               	return		;funcret
  4581  003E22                     __end_of___flge:
  4582                           	opt stack 0
  4583                           tosu	equ	0xFFF
  4584                           tosh	equ	0xFFE
  4585                           tosl	equ	0xFFD
  4586                           pclath	equ	0xFFA
  4587                           tblptru	equ	0xFF8
  4588                           tblptrh	equ	0xFF7
  4589                           tblptrl	equ	0xFF6
  4590                           tablat	equ	0xFF5
  4591                           intcon	equ	0xFF2
  4592                           intcon2	equ	0xFF1
  4593                           postinc0	equ	0xFEE
  4594                           wreg	equ	0xFE8
  4595                           postdec1	equ	0xFE5
  4596                           fsr1l	equ	0xFE1
  4597                           status	equ	0xFD8
  4598                           
  4599 ;; *************** function ___altofl *****************
  4600 ;; Defined at:
  4601 ;;		line 36 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\altofl.c"
  4602 ;; Parameters:    Size  Location     Type
  4603 ;;  c               4    6[BANK0 ] long 
  4604 ;; Auto vars:     Size  Location     Type
  4605 ;;  sign            1   94[COMRAM] unsigned char 
  4606 ;; Return value:  Size  Location     Type
  4607 ;;                  4    6[BANK0 ] unsigned char 
  4608 ;; Registers used:
  4609 ;;		wreg, status,2, status,0, cstack
  4610 ;; Tracked objects:
  4611 ;;		On entry : F/0
  4612 ;;		On exit  : 0/0
  4613 ;;		Unchanged: 0/0
  4614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4615 ;;      Params:         0       4       0       0       0       0       0       0       0
  4616 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4617 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4618 ;;      Totals:         1       4       0       0       0       0       0       0       0
  4619 ;;Total ram usage:        5 bytes
  4620 ;; Hardware stack levels used:    1
  4621 ;; Hardware stack levels required when called:    2
  4622 ;; This function calls:
  4623 ;;		___flpack
  4624 ;; This function is called by:
  4625 ;;		_floor
  4626 ;; This function uses a non-reentrant model
  4627 ;;
  4628                           
  4629                           	psect	text20
  4630  003F02                     __ptext20:
  4631                           	opt stack 0
  4632  003F02                     ___altofl:
  4633                           	opt stack 24
  4634                           
  4635                           ; BSR set to: 0
  4636                           
  4637                           ;incstack = 0
  4638  003F02  6A5F               	clrf	___altofl@sign,c
  4639                           
  4640                           ; BSR set to: 0
  4641  003F04  AF69               	btfss	(___altofl@c+3)& (0+255),7,b
  4642  003F06  D00A               	goto	l2438
  4643                           
  4644                           ; BSR set to: 0
  4645  003F08  1F69               	comf	(___altofl@c+3)& (0+255),f,b
  4646  003F0A  1F68               	comf	(___altofl@c+2)& (0+255),f,b
  4647  003F0C  1F67               	comf	(___altofl@c+1)& (0+255),f,b
  4648  003F0E  6D66               	negf	___altofl@c& (0+255),b
  4649  003F10  0E00               	movlw	0
  4650  003F12  2367               	addwfc	(___altofl@c+1)& (0+255),f,b
  4651  003F14  2368               	addwfc	(___altofl@c+2)& (0+255),f,b
  4652  003F16  2369               	addwfc	(___altofl@c+3)& (0+255),f,b
  4653                           
  4654                           ; BSR set to: 0
  4655  003F18  0E01               	movlw	1
  4656  003F1A  6E5F               	movwf	___altofl@sign,c
  4657  003F1C                     l2438:
  4658                           
  4659                           ; BSR set to: 0
  4660  003F1C  C066  F001         	movff	___altofl@c,___flpack@arg
  4661  003F20  C067  F002         	movff	___altofl@c+1,___flpack@arg+1
  4662  003F24  C068  F003         	movff	___altofl@c+2,___flpack@arg+2
  4663  003F28  C069  F004         	movff	___altofl@c+3,___flpack@arg+3
  4664  003F2C  0E96               	movlw	150
  4665  003F2E  6E05               	movwf	___flpack@exp,c
  4666  003F30  C05F  F006         	movff	___altofl@sign,___flpack@sign
  4667  003F34  EC02  F01C         	call	___flpack	;wreg free
  4668  003F38  C001  F066         	movff	?___flpack,?___altofl
  4669  003F3C  C002  F067         	movff	?___flpack+1,?___altofl+1
  4670  003F40  C003  F068         	movff	?___flpack+2,?___altofl+2
  4671  003F44  C004  F069         	movff	?___flpack+3,?___altofl+3
  4672  003F48  0012               	return		;funcret
  4673  003F4A                     __end_of___altofl:
  4674                           	opt stack 0
  4675                           tosu	equ	0xFFF
  4676                           tosh	equ	0xFFE
  4677                           tosl	equ	0xFFD
  4678                           pclath	equ	0xFFA
  4679                           tblptru	equ	0xFF8
  4680                           tblptrh	equ	0xFF7
  4681                           tblptrl	equ	0xFF6
  4682                           tablat	equ	0xFF5
  4683                           intcon	equ	0xFF2
  4684                           intcon2	equ	0xFF1
  4685                           postinc0	equ	0xFEE
  4686                           wreg	equ	0xFE8
  4687                           postdec1	equ	0xFE5
  4688                           fsr1l	equ	0xFE1
  4689                           status	equ	0xFD8
  4690                           
  4691 ;; *************** function ___flsub *****************
  4692 ;; Defined at:
  4693 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flsub.c"
  4694 ;; Parameters:    Size  Location     Type
  4695 ;;  f1              4   64[COMRAM] unsigned char 
  4696 ;;  f2              4   68[COMRAM] unsigned char 
  4697 ;; Auto vars:     Size  Location     Type
  4698 ;;		None
  4699 ;; Return value:  Size  Location     Type
  4700 ;;                  4   64[COMRAM] unsigned char 
  4701 ;; Registers used:
  4702 ;;		wreg, status,2, status,0, cstack
  4703 ;; Tracked objects:
  4704 ;;		On entry : 0/0
  4705 ;;		On exit  : 0/0
  4706 ;;		Unchanged: 0/0
  4707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4708 ;;      Params:         8       0       0       0       0       0       0       0       0
  4709 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4710 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4711 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4712 ;;Total ram usage:        8 bytes
  4713 ;; Hardware stack levels used:    1
  4714 ;; Hardware stack levels required when called:    3
  4715 ;; This function calls:
  4716 ;;		___fladd
  4717 ;; This function is called by:
  4718 ;;		_format_double
  4719 ;;		_measure_capacitance
  4720 ;;		_measure_inductance
  4721 ;;		_exp
  4722 ;; This function uses a non-reentrant model
  4723 ;;
  4724                           
  4725                           	psect	text21
  4726  003F4A                     __ptext21:
  4727                           	opt stack 0
  4728  003F4A                     ___flsub:
  4729                           	opt stack 26
  4730                           
  4731                           ;incstack = 0
  4732  003F4A  5045               	movf	___flsub@f2,w,c
  4733  003F4C  1046               	iorwf	___flsub@f2+1,w,c
  4734  003F4E  1047               	iorwf	___flsub@f2+2,w,c
  4735  003F50  1048               	iorwf	___flsub@f2+3,w,c
  4736  003F52  E002               	bz	l2690
  4737  003F54  0E80               	movlw	128
  4738  003F56  1A48               	xorwf	___flsub@f2+3,f,c
  4739  003F58                     l2690:
  4740  003F58  C041  F035         	movff	___flsub@f1,___fladd@f1
  4741  003F5C  C042  F036         	movff	___flsub@f1+1,___fladd@f1+1
  4742  003F60  C043  F037         	movff	___flsub@f1+2,___fladd@f1+2
  4743  003F64  C044  F038         	movff	___flsub@f1+3,___fladd@f1+3
  4744  003F68  C045  F039         	movff	___flsub@f2,___fladd@f2
  4745  003F6C  C046  F03A         	movff	___flsub@f2+1,___fladd@f2+1
  4746  003F70  C047  F03B         	movff	___flsub@f2+2,___fladd@f2+2
  4747  003F74  C048  F03C         	movff	___flsub@f2+3,___fladd@f2+3
  4748  003F78  EC03  F018         	call	___fladd	;wreg free
  4749  003F7C  C035  F041         	movff	?___fladd,?___flsub
  4750  003F80  C036  F042         	movff	?___fladd+1,?___flsub+1
  4751  003F84  C037  F043         	movff	?___fladd+2,?___flsub+2
  4752  003F88  C038  F044         	movff	?___fladd+3,?___flsub+3
  4753  003F8C  0012               	return		;funcret
  4754  003F8E                     __end_of___flsub:
  4755                           	opt stack 0
  4756                           tosu	equ	0xFFF
  4757                           tosh	equ	0xFFE
  4758                           tosl	equ	0xFFD
  4759                           pclath	equ	0xFFA
  4760                           tblptru	equ	0xFF8
  4761                           tblptrh	equ	0xFF7
  4762                           tblptrl	equ	0xFF6
  4763                           tablat	equ	0xFF5
  4764                           intcon	equ	0xFF2
  4765                           intcon2	equ	0xFF1
  4766                           postinc0	equ	0xFEE
  4767                           wreg	equ	0xFE8
  4768                           postdec1	equ	0xFE5
  4769                           fsr1l	equ	0xFE1
  4770                           status	equ	0xFD8
  4771                           
  4772 ;; *************** function ___flneg *****************
  4773 ;; Defined at:
  4774 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flneg.c"
  4775 ;; Parameters:    Size  Location     Type
  4776 ;;  f1              4    0[COMRAM] unsigned char 
  4777 ;; Auto vars:     Size  Location     Type
  4778 ;;		None
  4779 ;; Return value:  Size  Location     Type
  4780 ;;                  4    0[COMRAM] unsigned char 
  4781 ;; Registers used:
  4782 ;;		wreg, status,2, status,0
  4783 ;; Tracked objects:
  4784 ;;		On entry : F/0
  4785 ;;		On exit  : F/0
  4786 ;;		Unchanged: F/0
  4787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4788 ;;      Params:         4       0       0       0       0       0       0       0       0
  4789 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4790 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4791 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4792 ;;Total ram usage:        4 bytes
  4793 ;; Hardware stack levels used:    1
  4794 ;; Hardware stack levels required when called:    1
  4795 ;; This function calls:
  4796 ;;		Nothing
  4797 ;; This function is called by:
  4798 ;;		_pow
  4799 ;;		_exp
  4800 ;; This function uses a non-reentrant model
  4801 ;;
  4802                           
  4803                           	psect	text22
  4804  0041DE                     __ptext22:
  4805                           	opt stack 0
  4806  0041DE                     ___flneg:
  4807                           	opt stack 26
  4808                           
  4809                           ; BSR set to: 0
  4810                           
  4811                           ;incstack = 0
  4812  0041DE  5001               	movf	___flneg@f1,w,c
  4813  0041E0  1002               	iorwf	___flneg@f1+1,w,c
  4814  0041E2  1003               	iorwf	___flneg@f1+2,w,c
  4815  0041E4  1004               	iorwf	___flneg@f1+3,w,c
  4816  0041E6  E002               	bz	l2708
  4817                           
  4818                           ; BSR set to: 0
  4819  0041E8  0E80               	movlw	128
  4820  0041EA  1A04               	xorwf	___flneg@f1+3,f,c
  4821  0041EC                     l2708:
  4822                           
  4823                           ; BSR set to: 0
  4824  0041EC  C001  F001         	movff	___flneg@f1,?___flneg
  4825  0041F0  C002  F002         	movff	___flneg@f1+1,?___flneg+1
  4826  0041F4  C003  F003         	movff	___flneg@f1+2,?___flneg+2
  4827  0041F8  C004  F004         	movff	___flneg@f1+3,?___flneg+3
  4828                           
  4829                           ; BSR set to: 0
  4830  0041FC  0012               	return		;funcret
  4831  0041FE                     __end_of___flneg:
  4832                           	opt stack 0
  4833                           tosu	equ	0xFFF
  4834                           tosh	equ	0xFFE
  4835                           tosl	equ	0xFFD
  4836                           pclath	equ	0xFFA
  4837                           tblptru	equ	0xFF8
  4838                           tblptrh	equ	0xFF7
  4839                           tblptrl	equ	0xFF6
  4840                           tablat	equ	0xFF5
  4841                           intcon	equ	0xFF2
  4842                           intcon2	equ	0xFF1
  4843                           postinc0	equ	0xFEE
  4844                           wreg	equ	0xFE8
  4845                           postdec1	equ	0xFE5
  4846                           fsr1l	equ	0xFE1
  4847                           status	equ	0xFD8
  4848                           
  4849 ;; *************** function ___fldiv *****************
  4850 ;; Defined at:
  4851 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldiv.c"
  4852 ;; Parameters:    Size  Location     Type
  4853 ;;  f1              4   10[COMRAM] unsigned char 
  4854 ;;  f2              4   14[COMRAM] unsigned char 
  4855 ;; Auto vars:     Size  Location     Type
  4856 ;;  f3              4   18[COMRAM] unsigned char 
  4857 ;;  sign            1   24[COMRAM] unsigned char 
  4858 ;;  exp             1   23[COMRAM] unsigned char 
  4859 ;;  cntr            1   22[COMRAM] unsigned char 
  4860 ;; Return value:  Size  Location     Type
  4861 ;;                  4   10[COMRAM] unsigned char 
  4862 ;; Registers used:
  4863 ;;		wreg, status,2, status,0, cstack
  4864 ;; Tracked objects:
  4865 ;;		On entry : 0/0
  4866 ;;		On exit  : 0/0
  4867 ;;		Unchanged: 0/0
  4868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4869 ;;      Params:         8       0       0       0       0       0       0       0       0
  4870 ;;      Locals:         7       0       0       0       0       0       0       0       0
  4871 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4872 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4873 ;;Total ram usage:       15 bytes
  4874 ;; Hardware stack levels used:    1
  4875 ;; Hardware stack levels required when called:    2
  4876 ;; This function calls:
  4877 ;;		___flpack
  4878 ;; This function is called by:
  4879 ;;		_format_double
  4880 ;;		_measure_capacitance
  4881 ;;		_measure_inductance
  4882 ;;		_exp
  4883 ;; This function uses a non-reentrant model
  4884 ;;
  4885                           
  4886                           	psect	text23
  4887  003986                     __ptext23:
  4888                           	opt stack 0
  4889  003986                     ___fldiv:
  4890                           	opt stack 27
  4891                           
  4892                           ; BSR set to: 0
  4893                           ;incstack = 0
  4894  003986  340D               	rlcf	___fldiv@f1+2,w,c
  4895  003988  340E               	rlcf	___fldiv@f1+3,w,c
  4896  00398A  6E18               	movwf	___fldiv@exp,c
  4897  00398C  5018               	movf	___fldiv@exp,w,c
  4898  00398E  E005               	bz	l2656
  4899  003990  3411               	rlcf	___fldiv@f2+2,w,c
  4900  003992  3412               	rlcf	___fldiv@f2+3,w,c
  4901  003994  6E19               	movwf	___fldiv@sign,c
  4902  003996  5019               	movf	___fldiv@sign,w,c
  4903  003998  E105               	bnz	l2658
  4904  00399A                     l2656:
  4905  00399A  6A0B               	clrf	?___fldiv,c
  4906  00399C  6A0C               	clrf	?___fldiv+1,c
  4907  00399E  6A0D               	clrf	?___fldiv+2,c
  4908  0039A0  6A0E               	clrf	?___fldiv+3,c
  4909  0039A2  D043               	goto	l858
  4910  0039A4                     l2658:
  4911  0039A4  5019               	movf	___fldiv@sign,w,c
  4912  0039A6  0F89               	addlw	137
  4913  0039A8  5E18               	subwf	___fldiv@exp,f,c
  4914  0039AA  C00E  F019         	movff	___fldiv@f1+3,___fldiv@sign
  4915  0039AE  5012               	movf	___fldiv@f2+3,w,c
  4916  0039B0  1A19               	xorwf	___fldiv@sign,f,c
  4917  0039B2  0E80               	movlw	128
  4918  0039B4  1619               	andwf	___fldiv@sign,f,c
  4919  0039B6  8E0D               	bsf	___fldiv@f1+2,7,c
  4920  0039B8  6A0E               	clrf	___fldiv@f1+3,c
  4921  0039BA  8E11               	bsf	___fldiv@f2+2,7,c
  4922  0039BC  6A12               	clrf	___fldiv@f2+3,c
  4923  0039BE  0E20               	movlw	32
  4924  0039C0  6E17               	movwf	___fldiv@cntr,c
  4925  0039C2                     l2670:
  4926  0039C2  90D8               	bcf	status,0,c
  4927  0039C4  3613               	rlcf	___fldiv@f3,f,c
  4928  0039C6  3614               	rlcf	___fldiv@f3+1,f,c
  4929  0039C8  3615               	rlcf	___fldiv@f3+2,f,c
  4930  0039CA  3616               	rlcf	___fldiv@f3+3,f,c
  4931  0039CC  500F               	movf	___fldiv@f2,w,c
  4932  0039CE  5C0B               	subwf	___fldiv@f1,w,c
  4933  0039D0  5010               	movf	___fldiv@f2+1,w,c
  4934  0039D2  580C               	subwfb	___fldiv@f1+1,w,c
  4935  0039D4  5011               	movf	___fldiv@f2+2,w,c
  4936  0039D6  580D               	subwfb	___fldiv@f1+2,w,c
  4937  0039D8  5012               	movf	___fldiv@f2+3,w,c
  4938  0039DA  580E               	subwfb	___fldiv@f1+3,w,c
  4939  0039DC  E309               	bnc	l2678
  4940  0039DE  500F               	movf	___fldiv@f2,w,c
  4941  0039E0  5E0B               	subwf	___fldiv@f1,f,c
  4942  0039E2  5010               	movf	___fldiv@f2+1,w,c
  4943  0039E4  5A0C               	subwfb	___fldiv@f1+1,f,c
  4944  0039E6  5011               	movf	___fldiv@f2+2,w,c
  4945  0039E8  5A0D               	subwfb	___fldiv@f1+2,f,c
  4946  0039EA  5012               	movf	___fldiv@f2+3,w,c
  4947  0039EC  5A0E               	subwfb	___fldiv@f1+3,f,c
  4948  0039EE  8013               	bsf	___fldiv@f3,0,c
  4949  0039F0                     l2678:
  4950  0039F0  90D8               	bcf	status,0,c
  4951  0039F2  360B               	rlcf	___fldiv@f1,f,c
  4952  0039F4  360C               	rlcf	___fldiv@f1+1,f,c
  4953  0039F6  360D               	rlcf	___fldiv@f1+2,f,c
  4954  0039F8  360E               	rlcf	___fldiv@f1+3,f,c
  4955  0039FA  2E17               	decfsz	___fldiv@cntr,f,c
  4956  0039FC  D7E2               	goto	l2670
  4957  0039FE  C013  F001         	movff	___fldiv@f3,___flpack@arg
  4958  003A02  C014  F002         	movff	___fldiv@f3+1,___flpack@arg+1
  4959  003A06  C015  F003         	movff	___fldiv@f3+2,___flpack@arg+2
  4960  003A0A  C016  F004         	movff	___fldiv@f3+3,___flpack@arg+3
  4961  003A0E  C018  F005         	movff	___fldiv@exp,___flpack@exp
  4962  003A12  C019  F006         	movff	___fldiv@sign,___flpack@sign
  4963  003A16  EC02  F01C         	call	___flpack	;wreg free
  4964  003A1A  C001  F00B         	movff	?___flpack,?___fldiv
  4965  003A1E  C002  F00C         	movff	?___flpack+1,?___fldiv+1
  4966  003A22  C003  F00D         	movff	?___flpack+2,?___fldiv+2
  4967  003A26  C004  F00E         	movff	?___flpack+3,?___fldiv+3
  4968  003A2A                     l858:
  4969  003A2A  0012               	return		;funcret
  4970  003A2C                     __end_of___fldiv:
  4971                           	opt stack 0
  4972                           tosu	equ	0xFFF
  4973                           tosh	equ	0xFFE
  4974                           tosl	equ	0xFFD
  4975                           pclath	equ	0xFFA
  4976                           tblptru	equ	0xFF8
  4977                           tblptrh	equ	0xFF7
  4978                           tblptrl	equ	0xFF6
  4979                           tablat	equ	0xFF5
  4980                           intcon	equ	0xFF2
  4981                           intcon2	equ	0xFF1
  4982                           postinc0	equ	0xFEE
  4983                           wreg	equ	0xFE8
  4984                           postdec1	equ	0xFE5
  4985                           fsr1l	equ	0xFE1
  4986                           status	equ	0xFD8
  4987                           
  4988 ;; *************** function ___lltofl *****************
  4989 ;; Defined at:
  4990 ;;		line 30 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltofl.c"
  4991 ;; Parameters:    Size  Location     Type
  4992 ;;  c               4   10[COMRAM] unsigned long 
  4993 ;; Auto vars:     Size  Location     Type
  4994 ;;		None
  4995 ;; Return value:  Size  Location     Type
  4996 ;;                  4   10[COMRAM] unsigned long 
  4997 ;; Registers used:
  4998 ;;		wreg, status,2, status,0, cstack
  4999 ;; Tracked objects:
  5000 ;;		On entry : F/0
  5001 ;;		On exit  : 0/0
  5002 ;;		Unchanged: 0/0
  5003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5004 ;;      Params:         4       0       0       0       0       0       0       0       0
  5005 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5006 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5007 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5008 ;;Total ram usage:        4 bytes
  5009 ;; Hardware stack levels used:    1
  5010 ;; Hardware stack levels required when called:    2
  5011 ;; This function calls:
  5012 ;;		___flpack
  5013 ;; This function is called by:
  5014 ;;		_pow
  5015 ;; This function uses a non-reentrant model
  5016 ;;
  5017                           
  5018                           	psect	text24
  5019  004114                     __ptext24:
  5020                           	opt stack 0
  5021  004114                     ___lltofl:
  5022                           	opt stack 26
  5023                           
  5024                           ; BSR set to: 0
  5025                           
  5026                           ;incstack = 0
  5027  004114  C00B  F001         	movff	___lltofl@c,___flpack@arg
  5028  004118  C00C  F002         	movff	___lltofl@c+1,___flpack@arg+1
  5029  00411C  C00D  F003         	movff	___lltofl@c+2,___flpack@arg+2
  5030  004120  C00E  F004         	movff	___lltofl@c+3,___flpack@arg+3
  5031  004124  0E96               	movlw	150
  5032  004126  6E05               	movwf	___flpack@exp,c
  5033  004128  0E00               	movlw	0
  5034  00412A  6E06               	movwf	___flpack@sign,c
  5035  00412C  EC02  F01C         	call	___flpack	;wreg free
  5036  004130  C001  F00B         	movff	?___flpack,?___lltofl
  5037  004134  C002  F00C         	movff	?___flpack+1,?___lltofl+1
  5038  004138  C003  F00D         	movff	?___flpack+2,?___lltofl+2
  5039  00413C  C004  F00E         	movff	?___flpack+3,?___lltofl+3
  5040  004140  0012               	return		;funcret
  5041  004142                     __end_of___lltofl:
  5042                           	opt stack 0
  5043                           tosu	equ	0xFFF
  5044                           tosh	equ	0xFFE
  5045                           tosl	equ	0xFFD
  5046                           pclath	equ	0xFFA
  5047                           tblptru	equ	0xFF8
  5048                           tblptrh	equ	0xFF7
  5049                           tblptrl	equ	0xFF6
  5050                           tablat	equ	0xFF5
  5051                           intcon	equ	0xFF2
  5052                           intcon2	equ	0xFF1
  5053                           postinc0	equ	0xFEE
  5054                           wreg	equ	0xFE8
  5055                           postdec1	equ	0xFE5
  5056                           fsr1l	equ	0xFE1
  5057                           status	equ	0xFD8
  5058                           
  5059 ;; *************** function _log10 *****************
  5060 ;; Defined at:
  5061 ;;		line 39 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  5062 ;; Parameters:    Size  Location     Type
  5063 ;;  x               4   82[COMRAM] unsigned long 
  5064 ;; Auto vars:     Size  Location     Type
  5065 ;;		None
  5066 ;; Return value:  Size  Location     Type
  5067 ;;                  4   82[COMRAM] unsigned long 
  5068 ;; Registers used:
  5069 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5070 ;; Tracked objects:
  5071 ;;		On entry : 0/0
  5072 ;;		On exit  : 0/0
  5073 ;;		Unchanged: 0/0
  5074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5075 ;;      Params:         4       0       0       0       0       0       0       0       0
  5076 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5077 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5078 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5079 ;;Total ram usage:        8 bytes
  5080 ;; Hardware stack levels used:    1
  5081 ;; Hardware stack levels required when called:    5
  5082 ;; This function calls:
  5083 ;;		___flmul
  5084 ;;		_log
  5085 ;; This function is called by:
  5086 ;;		_format_double
  5087 ;; This function uses a non-reentrant model
  5088 ;;
  5089                           
  5090                           	psect	text25
  5091  003D30                     __ptext25:
  5092                           	opt stack 0
  5093  003D30                     _log10:
  5094                           	opt stack 24
  5095                           
  5096                           ;incstack = 0
  5097  003D30  C053  F04D         	movff	log10@x,log@x
  5098  003D34  C054  F04E         	movff	log10@x+1,log@x+1
  5099  003D38  C055  F04F         	movff	log10@x+2,log@x+2
  5100  003D3C  C056  F050         	movff	log10@x+3,log@x+3
  5101  003D40  ECB7  F018         	call	_log	;wreg free
  5102  003D44  C04D  F057         	movff	?_log,_log10$1266
  5103  003D48  C04E  F058         	movff	?_log+1,_log10$1266+1
  5104  003D4C  C04F  F059         	movff	?_log+2,_log10$1266+2
  5105  003D50  C050  F05A         	movff	?_log+3,_log10$1266+3
  5106  003D54  C057  F01A         	movff	_log10$1266,___flmul@f1
  5107  003D58  C058  F01B         	movff	_log10$1266+1,___flmul@f1+1
  5108  003D5C  C059  F01C         	movff	_log10$1266+2,___flmul@f1+2
  5109  003D60  C05A  F01D         	movff	_log10$1266+3,___flmul@f1+3
  5110  003D64  0ED9               	movlw	217
  5111  003D66  6E1E               	movwf	___flmul@f2,c
  5112  003D68  0E5B               	movlw	91
  5113  003D6A  6E1F               	movwf	___flmul@f2+1,c
  5114  003D6C  0EDE               	movlw	222
  5115  003D6E  6E20               	movwf	___flmul@f2+2,c
  5116  003D70  0E3E               	movlw	62
  5117  003D72  6E21               	movwf	___flmul@f2+3,c
  5118  003D74  EC87  F015         	call	___flmul	;wreg free
  5119  003D78  C01A  F053         	movff	?___flmul,?_log10
  5120  003D7C  C01B  F054         	movff	?___flmul+1,?_log10+1
  5121  003D80  C01C  F055         	movff	?___flmul+2,?_log10+2
  5122  003D84  C01D  F056         	movff	?___flmul+3,?_log10+3
  5123  003D88  0012               	return		;funcret
  5124  003D8A                     __end_of_log10:
  5125                           	opt stack 0
  5126                           tosu	equ	0xFFF
  5127                           tosh	equ	0xFFE
  5128                           tosl	equ	0xFFD
  5129                           pclath	equ	0xFFA
  5130                           tblptru	equ	0xFF8
  5131                           tblptrh	equ	0xFF7
  5132                           tblptrl	equ	0xFF6
  5133                           tablat	equ	0xFF5
  5134                           intcon	equ	0xFF2
  5135                           intcon2	equ	0xFF1
  5136                           postinc0	equ	0xFEE
  5137                           wreg	equ	0xFE8
  5138                           postdec1	equ	0xFE5
  5139                           fsr1l	equ	0xFE1
  5140                           status	equ	0xFD8
  5141                           
  5142 ;; *************** function _log *****************
  5143 ;; Defined at:
  5144 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  5145 ;; Parameters:    Size  Location     Type
  5146 ;;  x               4   76[COMRAM] unsigned long 
  5147 ;; Auto vars:     Size  Location     Type
  5148 ;;  exponent        2   80[COMRAM] int 
  5149 ;; Return value:  Size  Location     Type
  5150 ;;                  4   76[COMRAM] int 
  5151 ;; Registers used:
  5152 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5153 ;; Tracked objects:
  5154 ;;		On entry : 0/0
  5155 ;;		On exit  : 0/0
  5156 ;;		Unchanged: 0/0
  5157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5158 ;;      Params:         4       0       0       0       0       0       0       0       0
  5159 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5160 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5161 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5162 ;;Total ram usage:        6 bytes
  5163 ;; Hardware stack levels used:    1
  5164 ;; Hardware stack levels required when called:    4
  5165 ;; This function calls:
  5166 ;;		___awtofl
  5167 ;;		___fladd
  5168 ;;		___flmul
  5169 ;;		_eval_poly
  5170 ;;		_frexp
  5171 ;; This function is called by:
  5172 ;;		_log10
  5173 ;;		_pow
  5174 ;; This function uses a non-reentrant model
  5175 ;;
  5176                           
  5177                           	psect	text26
  5178  00316E                     __ptext26:
  5179                           	opt stack 0
  5180  00316E                     _log:
  5181                           	opt stack 24
  5182                           
  5183                           ;incstack = 0
  5184  00316E  BE50               	btfsc	log@x+3,7,c
  5185  003170  D005               	goto	l2890
  5186  003172  504D               	movf	log@x,w,c
  5187  003174  104E               	iorwf	log@x+1,w,c
  5188  003176  104F               	iorwf	log@x+2,w,c
  5189  003178  1050               	iorwf	log@x+3,w,c
  5190  00317A  E105               	bnz	l2892
  5191  00317C                     l2890:
  5192  00317C  6A4D               	clrf	?_log,c
  5193  00317E  6A4E               	clrf	?_log+1,c
  5194  003180  6A4F               	clrf	?_log+2,c
  5195  003182  6A50               	clrf	?_log+3,c
  5196  003184  D080               	goto	l1094
  5197  003186                     l2892:
  5198  003186  6A1E               	clrf	___flmul@f2,c
  5199  003188  6A1F               	clrf	___flmul@f2+1,c
  5200  00318A  6A20               	clrf	___flmul@f2+2,c
  5201  00318C  0E40               	movlw	64
  5202  00318E  6E21               	movwf	___flmul@f2+3,c
  5203  003190  0E51               	movlw	low log@exponent
  5204  003192  6E05               	movwf	frexp@eptr,c
  5205  003194  C04D  F001         	movff	log@x,frexp@value
  5206  003198  C04E  F002         	movff	log@x+1,frexp@value+1
  5207  00319C  C04F  F003         	movff	log@x+2,frexp@value+2
  5208  0031A0  C050  F004         	movff	log@x+3,frexp@value+3
  5209  0031A4  ECB1  F01D         	call	_frexp	;wreg free
  5210  0031A8  C001  F01A         	movff	?_frexp,___flmul@f1
  5211  0031AC  C002  F01B         	movff	?_frexp+1,___flmul@f1+1
  5212  0031B0  C003  F01C         	movff	?_frexp+2,___flmul@f1+2
  5213  0031B4  C004  F01D         	movff	?_frexp+3,___flmul@f1+3
  5214  0031B8  EC87  F015         	call	___flmul	;wreg free
  5215  0031BC  C01A  F035         	movff	?___flmul,___fladd@f1
  5216  0031C0  C01B  F036         	movff	?___flmul+1,___fladd@f1+1
  5217  0031C4  C01C  F037         	movff	?___flmul+2,___fladd@f1+2
  5218  0031C8  C01D  F038         	movff	?___flmul+3,___fladd@f1+3
  5219  0031CC  0E00               	movlw	0
  5220  0031CE  6E39               	movwf	___fladd@f2,c
  5221  0031D0  6E3A               	movwf	___fladd@f2+1,c
  5222  0031D2  0E80               	movlw	128
  5223  0031D4  6E3B               	movwf	___fladd@f2+2,c
  5224  0031D6  0EBF               	movlw	191
  5225  0031D8  6E3C               	movwf	___fladd@f2+3,c
  5226  0031DA  EC03  F018         	call	___fladd	;wreg free
  5227  0031DE  C035  F04D         	movff	?___fladd,log@x
  5228  0031E2  C036  F04E         	movff	?___fladd+1,log@x+1
  5229  0031E6  C037  F04F         	movff	?___fladd+2,log@x+2
  5230  0031EA  C038  F050         	movff	?___fladd+3,log@x+3
  5231  0031EE  0651               	decf	log@exponent,f,c
  5232  0031F0  A0D8               	btfss	status,0,c
  5233  0031F2  0652               	decf	log@exponent+1,f,c
  5234  0031F4  C04D  F041         	movff	log@x,eval_poly@x
  5235  0031F8  C04E  F042         	movff	log@x+1,eval_poly@x+1
  5236  0031FC  C04F  F043         	movff	log@x+2,eval_poly@x+2
  5237  003200  C050  F044         	movff	log@x+3,eval_poly@x+3
  5238  003204  0E39               	movlw	low log@coeff
  5239  003206  6E45               	movwf	eval_poly@d,c
  5240  003208  6A47               	clrf	eval_poly@n+1,c
  5241  00320A  0E08               	movlw	8
  5242  00320C  6E46               	movwf	eval_poly@n,c
  5243  00320E  EC65  F01C         	call	_eval_poly	;wreg free
  5244  003212  C041  F04D         	movff	?_eval_poly,log@x
  5245  003216  C042  F04E         	movff	?_eval_poly+1,log@x+1
  5246  00321A  C043  F04F         	movff	?_eval_poly+2,log@x+2
  5247  00321E  C044  F050         	movff	?_eval_poly+3,log@x+3
  5248  003222  0E18               	movlw	24
  5249  003224  6E1E               	movwf	___flmul@f2,c
  5250  003226  0E72               	movlw	114
  5251  003228  6E1F               	movwf	___flmul@f2+1,c
  5252  00322A  0E31               	movlw	49
  5253  00322C  6E20               	movwf	___flmul@f2+2,c
  5254  00322E  0E3F               	movlw	63
  5255  003230  6E21               	movwf	___flmul@f2+3,c
  5256  003232  C051  F00B         	movff	log@exponent,___awtofl@c
  5257  003236  C052  F00C         	movff	log@exponent+1,___awtofl@c+1
  5258  00323A  ECE6  F01F         	call	___awtofl	;wreg free
  5259  00323E  C00B  F01A         	movff	?___awtofl,___flmul@f1
  5260  003242  C00C  F01B         	movff	?___awtofl+1,___flmul@f1+1
  5261  003246  C00D  F01C         	movff	?___awtofl+2,___flmul@f1+2
  5262  00324A  C00E  F01D         	movff	?___awtofl+3,___flmul@f1+3
  5263  00324E  EC87  F015         	call	___flmul	;wreg free
  5264  003252  C01A  F035         	movff	?___flmul,___fladd@f1
  5265  003256  C01B  F036         	movff	?___flmul+1,___fladd@f1+1
  5266  00325A  C01C  F037         	movff	?___flmul+2,___fladd@f1+2
  5267  00325E  C01D  F038         	movff	?___flmul+3,___fladd@f1+3
  5268  003262  C04D  F039         	movff	log@x,___fladd@f2
  5269  003266  C04E  F03A         	movff	log@x+1,___fladd@f2+1
  5270  00326A  C04F  F03B         	movff	log@x+2,___fladd@f2+2
  5271  00326E  C050  F03C         	movff	log@x+3,___fladd@f2+3
  5272  003272  EC03  F018         	call	___fladd	;wreg free
  5273  003276  C035  F04D         	movff	?___fladd,?_log
  5274  00327A  C036  F04E         	movff	?___fladd+1,?_log+1
  5275  00327E  C037  F04F         	movff	?___fladd+2,?_log+2
  5276  003282  C038  F050         	movff	?___fladd+3,?_log+3
  5277  003286                     l1094:
  5278  003286  0012               	return		;funcret
  5279  003288                     __end_of_log:
  5280                           	opt stack 0
  5281                           tosu	equ	0xFFF
  5282                           tosh	equ	0xFFE
  5283                           tosl	equ	0xFFD
  5284                           pclath	equ	0xFFA
  5285                           tblptru	equ	0xFF8
  5286                           tblptrh	equ	0xFF7
  5287                           tblptrl	equ	0xFF6
  5288                           tablat	equ	0xFF5
  5289                           intcon	equ	0xFF2
  5290                           intcon2	equ	0xFF1
  5291                           postinc0	equ	0xFEE
  5292                           wreg	equ	0xFE8
  5293                           postdec1	equ	0xFE5
  5294                           fsr1l	equ	0xFE1
  5295                           status	equ	0xFD8
  5296                           
  5297 ;; *************** function _frexp *****************
  5298 ;; Defined at:
  5299 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  5300 ;; Parameters:    Size  Location     Type
  5301 ;;  value           4    0[COMRAM] int 
  5302 ;;  eptr            1    4[COMRAM] PTR int 
  5303 ;;		 -> log@exponent(2), floor@expon(2), 
  5304 ;; Auto vars:     Size  Location     Type
  5305 ;;		None
  5306 ;; Return value:  Size  Location     Type
  5307 ;;                  4    0[COMRAM] PTR int 
  5308 ;; Registers used:
  5309 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5310 ;; Tracked objects:
  5311 ;;		On entry : 0/0
  5312 ;;		On exit  : 0/0
  5313 ;;		Unchanged: 0/0
  5314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5315 ;;      Params:         5       0       0       0       0       0       0       0       0
  5316 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5317 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5318 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5319 ;;Total ram usage:        7 bytes
  5320 ;; Hardware stack levels used:    1
  5321 ;; Hardware stack levels required when called:    1
  5322 ;; This function calls:
  5323 ;;		Nothing
  5324 ;; This function is called by:
  5325 ;;		_floor
  5326 ;;		_log
  5327 ;; This function uses a non-reentrant model
  5328 ;;
  5329                           
  5330                           	psect	text27
  5331  003B62                     __ptext27:
  5332                           	opt stack 0
  5333  003B62                     _frexp:
  5334                           	opt stack 26
  5335                           
  5336                           ;incstack = 0
  5337  003B62  5001               	movf	frexp@value,w,c
  5338  003B64  1002               	iorwf	frexp@value+1,w,c
  5339  003B66  1003               	iorwf	frexp@value+2,w,c
  5340  003B68  1004               	iorwf	frexp@value+3,w,c
  5341  003B6A  E10B               	bnz	l2570
  5342  003B6C  5005               	movf	frexp@eptr,w,c
  5343  003B6E  6ED9               	movwf	fsr2l,c
  5344  003B70  6ADA               	clrf	fsr2h,c
  5345  003B72  0E00               	movlw	0
  5346  003B74  6ADE               	clrf	postinc2,c
  5347  003B76  6ADD               	clrf	postdec2,c
  5348  003B78  6A01               	clrf	?_frexp,c
  5349  003B7A  6A02               	clrf	?_frexp+1,c
  5350  003B7C  6A03               	clrf	?_frexp+2,c
  5351  003B7E  6A04               	clrf	?_frexp+3,c
  5352  003B80  D02B               	goto	l933
  5353  003B82                     l2570:
  5354  003B82  5004               	movf	frexp@value+3,w,c
  5355  003B84  0B7F               	andlw	127
  5356  003B86  6E06               	movwf	??_frexp& (0+255),c
  5357  003B88  6A07               	clrf	(??_frexp+1)& (0+255),c
  5358  003B8A  90D8               	bcf	status,0,c
  5359  003B8C  3606               	rlcf	??_frexp,f,c
  5360  003B8E  3607               	rlcf	??_frexp+1,f,c
  5361  003B90  5005               	movf	frexp@eptr,w,c
  5362  003B92  6ED9               	movwf	fsr2l,c
  5363  003B94  6ADA               	clrf	fsr2h,c
  5364  003B96  C006  FFDE         	movff	??_frexp,postinc2
  5365  003B9A  C007  FFDD         	movff	??_frexp+1,postdec2
  5366  003B9E  5005               	movf	frexp@eptr,w,c
  5367  003BA0  6ED9               	movwf	fsr2l,c
  5368  003BA2  6ADA               	clrf	fsr2h,c
  5369  003BA4  0E01               	movlw	1
  5370  003BA6  AE03               	btfss	frexp@value+2,7,c
  5371  003BA8  0E00               	movlw	0
  5372  003BAA  12DE               	iorwf	postinc2,f,c
  5373  003BAC  0E00               	movlw	0
  5374  003BAE  12DD               	iorwf	postdec2,f,c
  5375  003BB0  5005               	movf	frexp@eptr,w,c
  5376  003BB2  6ED9               	movwf	fsr2l,c
  5377  003BB4  6ADA               	clrf	fsr2h,c
  5378  003BB6  0E82               	movlw	130
  5379  003BB8  26DE               	addwf	postinc2,f,c
  5380  003BBA  0EFF               	movlw	255
  5381  003BBC  22DD               	addwfc	postdec2,f,c
  5382  003BBE  5004               	movf	frexp@value+3,w,c
  5383  003BC0  0B80               	andlw	-128
  5384  003BC2  093F               	iorlw	63
  5385  003BC4  6E04               	movwf	frexp@value+3,c
  5386  003BC6  9E03               	bcf	frexp@value+2,7,c
  5387  003BC8  C001  F001         	movff	frexp@value,?_frexp
  5388  003BCC  C002  F002         	movff	frexp@value+1,?_frexp+1
  5389  003BD0  C003  F003         	movff	frexp@value+2,?_frexp+2
  5390  003BD4  C004  F004         	movff	frexp@value+3,?_frexp+3
  5391  003BD8                     l933:
  5392  003BD8  0012               	return		;funcret
  5393  003BDA                     __end_of_frexp:
  5394                           	opt stack 0
  5395                           tosu	equ	0xFFF
  5396                           tosh	equ	0xFFE
  5397                           tosl	equ	0xFFD
  5398                           pclath	equ	0xFFA
  5399                           tblptru	equ	0xFF8
  5400                           tblptrh	equ	0xFF7
  5401                           tblptrl	equ	0xFF6
  5402                           tablat	equ	0xFF5
  5403                           intcon	equ	0xFF2
  5404                           intcon2	equ	0xFF1
  5405                           postinc0	equ	0xFEE
  5406                           wreg	equ	0xFE8
  5407                           postdec1	equ	0xFE5
  5408                           fsr1l	equ	0xFE1
  5409                           postinc2	equ	0xFDE
  5410                           postdec2	equ	0xFDD
  5411                           fsr2h	equ	0xFDA
  5412                           fsr2l	equ	0xFD9
  5413                           status	equ	0xFD8
  5414                           
  5415 ;; *************** function _eval_poly *****************
  5416 ;; Defined at:
  5417 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  5418 ;; Parameters:    Size  Location     Type
  5419 ;;  x               4   64[COMRAM] PTR int 
  5420 ;;  d               1   68[COMRAM] PTR const 
  5421 ;;		 -> exp@coeff(40), log@coeff(36), 
  5422 ;;  n               2   69[COMRAM] int 
  5423 ;; Auto vars:     Size  Location     Type
  5424 ;;  res             4   72[COMRAM] int 
  5425 ;; Return value:  Size  Location     Type
  5426 ;;                  4   64[COMRAM] int 
  5427 ;; Registers used:
  5428 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5429 ;; Tracked objects:
  5430 ;;		On entry : 0/0
  5431 ;;		On exit  : 0/0
  5432 ;;		Unchanged: 0/0
  5433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5434 ;;      Params:         7       0       0       0       0       0       0       0       0
  5435 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5436 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5437 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5438 ;;Total ram usage:       12 bytes
  5439 ;; Hardware stack levels used:    1
  5440 ;; Hardware stack levels required when called:    3
  5441 ;; This function calls:
  5442 ;;		___fladd
  5443 ;;		___flmul
  5444 ;; This function is called by:
  5445 ;;		_log
  5446 ;;		_exp
  5447 ;; This function uses a non-reentrant model
  5448 ;;
  5449                           
  5450                           	psect	text28
  5451  0038CA                     __ptext28:
  5452                           	opt stack 0
  5453  0038CA                     _eval_poly:
  5454                           	opt stack 24
  5455                           
  5456                           ;incstack = 0
  5457  0038CA  5046               	movf	eval_poly@n,w,c
  5458  0038CC  0D04               	mullw	4
  5459  0038CE  5045               	movf	eval_poly@d,w,c
  5460  0038D0  24F3               	addwf	prodl,w,c
  5461  0038D2  6E48               	movwf	??_eval_poly& (0+255),c
  5462  0038D4  C048  FFF6         	movff	??_eval_poly,tblptrl
  5463  0038D8                     	if	1	;There is more than 1 active tblptr byte
  5464  0038D8  0E20               	movlw	high __smallconst
  5465  0038DA  6EF7               	movwf	tblptrh,c
  5466  0038DC                     	endif
  5467  0038DC                     	if	0	;tblptru may be non-zero
  5468  0038DC                     	endif
  5469  0038DC                     	if	0	;tblptru may be non-zero
  5470  0038DC                     	endif
  5471  0038DC  0009               	tblrd		*+
  5472  0038DE  CFF5 F049          	movff	tablat,eval_poly@res
  5473  0038E2  0009               	tblrd		*+
  5474  0038E4  CFF5 F04A          	movff	tablat,eval_poly@res+1
  5475  0038E8  0009               	tblrd		*+
  5476  0038EA  CFF5 F04B          	movff	tablat,eval_poly@res+2
  5477  0038EE  000A               	tblrd		*-
  5478  0038F0  CFF5 F04C          	movff	tablat,eval_poly@res+3
  5479  0038F4  D03C               	goto	l2746
  5480  0038F6                     l2744:
  5481  0038F6  C049  F01E         	movff	eval_poly@res,___flmul@f2
  5482  0038FA  C04A  F01F         	movff	eval_poly@res+1,___flmul@f2+1
  5483  0038FE  C04B  F020         	movff	eval_poly@res+2,___flmul@f2+2
  5484  003902  C04C  F021         	movff	eval_poly@res+3,___flmul@f2+3
  5485  003906  C041  F01A         	movff	eval_poly@x,___flmul@f1
  5486  00390A  C042  F01B         	movff	eval_poly@x+1,___flmul@f1+1
  5487  00390E  C043  F01C         	movff	eval_poly@x+2,___flmul@f1+2
  5488  003912  C044  F01D         	movff	eval_poly@x+3,___flmul@f1+3
  5489  003916  EC87  F015         	call	___flmul	;wreg free
  5490  00391A  C01A  F035         	movff	?___flmul,___fladd@f1
  5491  00391E  C01B  F036         	movff	?___flmul+1,___fladd@f1+1
  5492  003922  C01C  F037         	movff	?___flmul+2,___fladd@f1+2
  5493  003926  C01D  F038         	movff	?___flmul+3,___fladd@f1+3
  5494  00392A  0646               	decf	eval_poly@n,f,c
  5495  00392C  A0D8               	btfss	status,0,c
  5496  00392E  0647               	decf	eval_poly@n+1,f,c
  5497  003930  5046               	movf	eval_poly@n,w,c
  5498  003932  0D04               	mullw	4
  5499  003934  5045               	movf	eval_poly@d,w,c
  5500  003936  24F3               	addwf	prodl,w,c
  5501  003938  6E48               	movwf	??_eval_poly& (0+255),c
  5502  00393A  C048  FFF6         	movff	??_eval_poly,tblptrl
  5503  00393E                     	if	1	;There is more than 1 active tblptr byte
  5504  00393E  0E20               	movlw	high __smallconst
  5505  003940  6EF7               	movwf	tblptrh,c
  5506  003942                     	endif
  5507  003942                     	if	0	;tblptru may be non-zero
  5508  003942                     	endif
  5509  003942                     	if	0	;tblptru may be non-zero
  5510  003942                     	endif
  5511  003942  0009               	tblrd		*+
  5512  003944  CFF5 F039          	movff	tablat,___fladd@f2
  5513  003948  0009               	tblrd		*+
  5514  00394A  CFF5 F03A          	movff	tablat,___fladd@f2+1
  5515  00394E  0009               	tblrd		*+
  5516  003950  CFF5 F03B          	movff	tablat,___fladd@f2+2
  5517  003954  000A               	tblrd		*-
  5518  003956  CFF5 F03C          	movff	tablat,___fladd@f2+3
  5519  00395A  EC03  F018         	call	___fladd	;wreg free
  5520  00395E  C035  F049         	movff	?___fladd,eval_poly@res
  5521  003962  C036  F04A         	movff	?___fladd+1,eval_poly@res+1
  5522  003966  C037  F04B         	movff	?___fladd+2,eval_poly@res+2
  5523  00396A  C038  F04C         	movff	?___fladd+3,eval_poly@res+3
  5524  00396E                     l2746:
  5525  00396E  5046               	movf	eval_poly@n,w,c
  5526  003970  1047               	iorwf	eval_poly@n+1,w,c
  5527  003972  E1C1               	bnz	l2744
  5528  003974  C049  F041         	movff	eval_poly@res,?_eval_poly
  5529  003978  C04A  F042         	movff	eval_poly@res+1,?_eval_poly+1
  5530  00397C  C04B  F043         	movff	eval_poly@res+2,?_eval_poly+2
  5531  003980  C04C  F044         	movff	eval_poly@res+3,?_eval_poly+3
  5532  003984  0012               	return		;funcret
  5533  003986                     __end_of_eval_poly:
  5534                           	opt stack 0
  5535                           tosu	equ	0xFFF
  5536                           tosh	equ	0xFFE
  5537                           tosl	equ	0xFFD
  5538                           pclath	equ	0xFFA
  5539                           tblptru	equ	0xFF8
  5540                           tblptrh	equ	0xFF7
  5541                           tblptrl	equ	0xFF6
  5542                           tablat	equ	0xFF5
  5543                           prodl	equ	0xFF3
  5544                           intcon	equ	0xFF2
  5545                           intcon2	equ	0xFF1
  5546                           postinc0	equ	0xFEE
  5547                           wreg	equ	0xFE8
  5548                           postdec1	equ	0xFE5
  5549                           fsr1l	equ	0xFE1
  5550                           postinc2	equ	0xFDE
  5551                           postdec2	equ	0xFDD
  5552                           fsr2h	equ	0xFDA
  5553                           fsr2l	equ	0xFD9
  5554                           status	equ	0xFD8
  5555                           
  5556 ;; *************** function ___flmul *****************
  5557 ;; Defined at:
  5558 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flmul.c"
  5559 ;; Parameters:    Size  Location     Type
  5560 ;;  f1              4   25[COMRAM] int 
  5561 ;;  f2              4   29[COMRAM] int 
  5562 ;; Auto vars:     Size  Location     Type
  5563 ;;  f3_as_produc    4   48[COMRAM] unsigned long 
  5564 ;;  sign            1   47[COMRAM] unsigned char 
  5565 ;;  exp             1   46[COMRAM] unsigned char 
  5566 ;;  cntr            1    0        unsigned char 
  5567 ;; Return value:  Size  Location     Type
  5568 ;;                  4   25[COMRAM] unsigned char 
  5569 ;; Registers used:
  5570 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5571 ;; Tracked objects:
  5572 ;;		On entry : 0/0
  5573 ;;		On exit  : 0/0
  5574 ;;		Unchanged: 0/0
  5575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5576 ;;      Params:         8       0       0       0       0       0       0       0       0
  5577 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5578 ;;      Temps:         13       0       0       0       0       0       0       0       0
  5579 ;;      Totals:        27       0       0       0       0       0       0       0       0
  5580 ;;Total ram usage:       27 bytes
  5581 ;; Hardware stack levels used:    1
  5582 ;; Hardware stack levels required when called:    2
  5583 ;; This function calls:
  5584 ;;		___flpack
  5585 ;; This function is called by:
  5586 ;;		_format_double
  5587 ;;		_measure_capacitance
  5588 ;;		_measure_inductance
  5589 ;;		_log
  5590 ;;		_log10
  5591 ;;		_pow
  5592 ;;		_eval_poly
  5593 ;;		_exp
  5594 ;; This function uses a non-reentrant model
  5595 ;;
  5596                           
  5597                           	psect	text29
  5598  002B0E                     __ptext29:
  5599                           	opt stack 0
  5600  002B0E                     ___flmul:
  5601                           	opt stack 27
  5602                           
  5603                           ;incstack = 0
  5604  002B0E  341C               	rlcf	___flmul@f1+2,w,c
  5605  002B10  341D               	rlcf	___flmul@f1+3,w,c
  5606  002B12  6E2F               	movwf	___flmul@exp,c
  5607  002B14  502F               	movf	___flmul@exp,w,c
  5608  002B16  E005               	bz	l2514
  5609  002B18  3420               	rlcf	___flmul@f2+2,w,c
  5610  002B1A  3421               	rlcf	___flmul@f2+3,w,c
  5611  002B1C  6E30               	movwf	___flmul@sign,c
  5612  002B1E  5030               	movf	___flmul@sign,w,c
  5613  002B20  E105               	bnz	l2516
  5614  002B22                     l2514:
  5615  002B22  6A1A               	clrf	?___flmul,c
  5616  002B24  6A1B               	clrf	?___flmul+1,c
  5617  002B26  6A1C               	clrf	?___flmul+2,c
  5618  002B28  6A1D               	clrf	?___flmul+3,c
  5619  002B2A  D0CF               	goto	l873
  5620  002B2C                     l2516:
  5621  002B2C  5030               	movf	___flmul@sign,w,c
  5622  002B2E  0F7B               	addlw	123
  5623  002B30  262F               	addwf	___flmul@exp,f,c
  5624  002B32  C01D  F030         	movff	___flmul@f1+3,___flmul@sign
  5625  002B36  5021               	movf	___flmul@f2+3,w,c
  5626  002B38  1A30               	xorwf	___flmul@sign,f,c
  5627  002B3A  0E80               	movlw	128
  5628  002B3C  1630               	andwf	___flmul@sign,f,c
  5629  002B3E  8E1C               	bsf	___flmul@f1+2,7,c
  5630  002B40  8E20               	bsf	___flmul@f2+2,7,c
  5631  002B42  6A21               	clrf	___flmul@f2+3,c
  5632  002B44  6A1D               	clrf	___flmul@f1+3,c
  5633  002B46  501A               	movf	___flmul@f1,w,c
  5634  002B48  021E               	mulwf	___flmul@f2,c
  5635  002B4A  CFF4 FFF3          	movff	prodh,prodl
  5636  002B4E  6AF4               	clrf	prodh,c
  5637  002B50  CFF3 F031          	movff	prodl,___flmul@f3_as_product
  5638  002B54  CFF4 F032          	movff	prodh,___flmul@f3_as_product+1
  5639  002B58  6A33               	clrf	___flmul@f3_as_product+2,c
  5640  002B5A  6A34               	clrf	___flmul@f3_as_product+3,c
  5641  002B5C  501A               	movf	___flmul@f1,w,c
  5642  002B5E  021F               	mulwf	___flmul@f2+1,c
  5643  002B60  CFF3 F022          	movff	prodl,??___flmul
  5644  002B64  CFF4 F023          	movff	prodh,??___flmul+1
  5645  002B68  6A24               	clrf	(??___flmul+2)& (0+255),c
  5646  002B6A  501B               	movf	___flmul@f1+1,w,c
  5647  002B6C  021E               	mulwf	___flmul@f2,c
  5648  002B6E  50F3               	movf	prodl,w,c
  5649  002B70  2422               	addwf	??___flmul,w,c
  5650  002B72  6E25               	movwf	(??___flmul+3)& (0+255),c
  5651  002B74  50F4               	movf	prodh,w,c
  5652  002B76  2023               	addwfc	??___flmul+1,w,c
  5653  002B78  6E26               	movwf	(??___flmul+4)& (0+255),c
  5654  002B7A  0E00               	movlw	0
  5655  002B7C  2024               	addwfc	??___flmul+2,w,c
  5656  002B7E  6E27               	movwf	(??___flmul+5)& (0+255),c
  5657  002B80  5025               	movf	??___flmul+3,w,c
  5658  002B82  6E28               	movwf	(??___flmul+6)& (0+255),c
  5659  002B84  5026               	movf	??___flmul+4,w,c
  5660  002B86  6E29               	movwf	(??___flmul+7)& (0+255),c
  5661  002B88  5027               	movf	??___flmul+5,w,c
  5662  002B8A  6E2A               	movwf	(??___flmul+8)& (0+255),c
  5663  002B8C  6A2B               	clrf	(??___flmul+9)& (0+255),c
  5664  002B8E  5028               	movf	??___flmul+6,w,c
  5665  002B90  2631               	addwf	___flmul@f3_as_product,f,c
  5666  002B92  5029               	movf	??___flmul+7,w,c
  5667  002B94  2232               	addwfc	___flmul@f3_as_product+1,f,c
  5668  002B96  502A               	movf	??___flmul+8,w,c
  5669  002B98  2233               	addwfc	___flmul@f3_as_product+2,f,c
  5670  002B9A  502B               	movf	??___flmul+9,w,c
  5671  002B9C  2234               	addwfc	___flmul@f3_as_product+3,f,c
  5672  002B9E  5032               	movf	___flmul@f3_as_product+1,w,c
  5673  002BA0  6E31               	movwf	___flmul@f3_as_product,c
  5674  002BA2  5033               	movf	___flmul@f3_as_product+2,w,c
  5675  002BA4  6E32               	movwf	___flmul@f3_as_product+1,c
  5676  002BA6  5034               	movf	___flmul@f3_as_product+3,w,c
  5677  002BA8  6E33               	movwf	___flmul@f3_as_product+2,c
  5678  002BAA  6A34               	clrf	___flmul@f3_as_product+3,c
  5679  002BAC  501A               	movf	___flmul@f1,w,c
  5680  002BAE  0220               	mulwf	___flmul@f2+2,c
  5681  002BB0  CFF3 F022          	movff	prodl,??___flmul
  5682  002BB4  CFF4 F023          	movff	prodh,??___flmul+1
  5683  002BB8  6A24               	clrf	(??___flmul+2)& (0+255),c
  5684  002BBA  501B               	movf	___flmul@f1+1,w,c
  5685  002BBC  021F               	mulwf	___flmul@f2+1,c
  5686  002BBE  50F3               	movf	prodl,w,c
  5687  002BC0  2422               	addwf	??___flmul,w,c
  5688  002BC2  6E25               	movwf	(??___flmul+3)& (0+255),c
  5689  002BC4  50F4               	movf	prodh,w,c
  5690  002BC6  2023               	addwfc	??___flmul+1,w,c
  5691  002BC8  6E26               	movwf	(??___flmul+4)& (0+255),c
  5692  002BCA  0E00               	movlw	0
  5693  002BCC  2024               	addwfc	??___flmul+2,w,c
  5694  002BCE  6E27               	movwf	(??___flmul+5)& (0+255),c
  5695  002BD0  501C               	movf	___flmul@f1+2,w,c
  5696  002BD2  021E               	mulwf	___flmul@f2,c
  5697  002BD4  50F3               	movf	prodl,w,c
  5698  002BD6  2425               	addwf	??___flmul+3,w,c
  5699  002BD8  6E28               	movwf	(??___flmul+6)& (0+255),c
  5700  002BDA  50F4               	movf	prodh,w,c
  5701  002BDC  2026               	addwfc	??___flmul+4,w,c
  5702  002BDE  6E29               	movwf	(??___flmul+7)& (0+255),c
  5703  002BE0  0E00               	movlw	0
  5704  002BE2  2027               	addwfc	??___flmul+5,w,c
  5705  002BE4  6E2A               	movwf	(??___flmul+8)& (0+255),c
  5706  002BE6  5028               	movf	??___flmul+6,w,c
  5707  002BE8  6E2B               	movwf	(??___flmul+9)& (0+255),c
  5708  002BEA  5029               	movf	??___flmul+7,w,c
  5709  002BEC  6E2C               	movwf	(??___flmul+10)& (0+255),c
  5710  002BEE  502A               	movf	??___flmul+8,w,c
  5711  002BF0  6E2D               	movwf	(??___flmul+11)& (0+255),c
  5712  002BF2  6A2E               	clrf	(??___flmul+12)& (0+255),c
  5713  002BF4  502B               	movf	??___flmul+9,w,c
  5714  002BF6  2631               	addwf	___flmul@f3_as_product,f,c
  5715  002BF8  502C               	movf	??___flmul+10,w,c
  5716  002BFA  2232               	addwfc	___flmul@f3_as_product+1,f,c
  5717  002BFC  502D               	movf	??___flmul+11,w,c
  5718  002BFE  2233               	addwfc	___flmul@f3_as_product+2,f,c
  5719  002C00  502E               	movf	??___flmul+12,w,c
  5720  002C02  2234               	addwfc	___flmul@f3_as_product+3,f,c
  5721  002C04  501C               	movf	___flmul@f1+2,w,c
  5722  002C06  021F               	mulwf	___flmul@f2+1,c
  5723  002C08  CFF3 F022          	movff	prodl,??___flmul
  5724  002C0C  CFF4 F023          	movff	prodh,??___flmul+1
  5725  002C10  6A24               	clrf	(??___flmul+2)& (0+255),c
  5726  002C12  0E31               	movlw	___flmul@f3_as_product& (0+255)
  5727  002C14  6E25               	movwf	(??___flmul+3)& (0+255),c
  5728  002C16  6A26               	clrf	(??___flmul+4)& (0+255),c
  5729  002C18  2825               	incf	??___flmul+3,w,c
  5730  002C1A  6ED9               	movwf	fsr2l,c
  5731  002C1C  0E00               	movlw	0
  5732  002C1E  2026               	addwfc	??___flmul+4,w,c
  5733  002C20  6EDA               	movwf	fsr2h,c
  5734  002C22  5022               	movf	??___flmul,w,c
  5735  002C24  26DE               	addwf	postinc2,f,c
  5736  002C26  5023               	movf	??___flmul+1,w,c
  5737  002C28  22DE               	addwfc	postinc2,f,c
  5738  002C2A  5024               	movf	??___flmul+2,w,c
  5739  002C2C  22DE               	addwfc	postinc2,f,c
  5740  002C2E  501B               	movf	___flmul@f1+1,w,c
  5741  002C30  0220               	mulwf	___flmul@f2+2,c
  5742  002C32  CFF3 F022          	movff	prodl,??___flmul
  5743  002C36  CFF4 F023          	movff	prodh,??___flmul+1
  5744  002C3A  6A24               	clrf	(??___flmul+2)& (0+255),c
  5745  002C3C  0E31               	movlw	___flmul@f3_as_product& (0+255)
  5746  002C3E  6E25               	movwf	(??___flmul+3)& (0+255),c
  5747  002C40  6A26               	clrf	(??___flmul+4)& (0+255),c
  5748  002C42  2825               	incf	??___flmul+3,w,c
  5749  002C44  6ED9               	movwf	fsr2l,c
  5750  002C46  0E00               	movlw	0
  5751  002C48  2026               	addwfc	??___flmul+4,w,c
  5752  002C4A  6EDA               	movwf	fsr2h,c
  5753  002C4C  5022               	movf	??___flmul,w,c
  5754  002C4E  26DE               	addwf	postinc2,f,c
  5755  002C50  5023               	movf	??___flmul+1,w,c
  5756  002C52  22DE               	addwfc	postinc2,f,c
  5757  002C54  5024               	movf	??___flmul+2,w,c
  5758  002C56  22DE               	addwfc	postinc2,f,c
  5759  002C58  501C               	movf	___flmul@f1+2,w,c
  5760  002C5A  0220               	mulwf	___flmul@f2+2,c
  5761  002C5C  CFF3 F022          	movff	prodl,??___flmul
  5762  002C60  CFF4 F023          	movff	prodh,??___flmul+1
  5763  002C64  6A24               	clrf	(??___flmul+2)& (0+255),c
  5764  002C66  0E31               	movlw	___flmul@f3_as_product& (0+255)
  5765  002C68  6E25               	movwf	(??___flmul+3)& (0+255),c
  5766  002C6A  6A26               	clrf	(??___flmul+4)& (0+255),c
  5767  002C6C  0E02               	movlw	2
  5768  002C6E  2425               	addwf	??___flmul+3,w,c
  5769  002C70  6ED9               	movwf	fsr2l,c
  5770  002C72  0E00               	movlw	0
  5771  002C74  2026               	addwfc	??___flmul+4,w,c
  5772  002C76  6EDA               	movwf	fsr2h,c
  5773  002C78  5022               	movf	??___flmul,w,c
  5774  002C7A  26DE               	addwf	postinc2,f,c
  5775  002C7C  5023               	movf	??___flmul+1,w,c
  5776  002C7E  22DE               	addwfc	postinc2,f,c
  5777  002C80  5024               	movf	??___flmul+2,w,c
  5778  002C82  22DE               	addwfc	postinc2,f,c
  5779  002C84  AE34               	btfss	___flmul@f3_as_product+3,7,c
  5780  002C86  D006               	goto	l875
  5781  002C88  90D8               	bcf	status,0,c
  5782  002C8A  3234               	rrcf	___flmul@f3_as_product+3,f,c
  5783  002C8C  3233               	rrcf	___flmul@f3_as_product+2,f,c
  5784  002C8E  3232               	rrcf	___flmul@f3_as_product+1,f,c
  5785  002C90  3231               	rrcf	___flmul@f3_as_product,f,c
  5786  002C92  2A2F               	incf	___flmul@exp,f,c
  5787  002C94                     l875:
  5788  002C94  90D8               	bcf	status,0,c
  5789  002C96  3234               	rrcf	___flmul@f3_as_product+3,f,c
  5790  002C98  3233               	rrcf	___flmul@f3_as_product+2,f,c
  5791  002C9A  3232               	rrcf	___flmul@f3_as_product+1,f,c
  5792  002C9C  3231               	rrcf	___flmul@f3_as_product,f,c
  5793  002C9E  C031  F001         	movff	___flmul@f3_as_product,___flpack@arg
  5794  002CA2  C032  F002         	movff	___flmul@f3_as_product+1,___flpack@arg+1
  5795  002CA6  C033  F003         	movff	___flmul@f3_as_product+2,___flpack@arg+2
  5796  002CAA  C034  F004         	movff	___flmul@f3_as_product+3,___flpack@arg+3
  5797  002CAE  C02F  F005         	movff	___flmul@exp,___flpack@exp
  5798  002CB2  C030  F006         	movff	___flmul@sign,___flpack@sign
  5799  002CB6  EC02  F01C         	call	___flpack	;wreg free
  5800  002CBA  C001  F01A         	movff	?___flpack,?___flmul
  5801  002CBE  C002  F01B         	movff	?___flpack+1,?___flmul+1
  5802  002CC2  C003  F01C         	movff	?___flpack+2,?___flmul+2
  5803  002CC6  C004  F01D         	movff	?___flpack+3,?___flmul+3
  5804  002CCA                     l873:
  5805  002CCA  0012               	return		;funcret
  5806  002CCC                     __end_of___flmul:
  5807                           	opt stack 0
  5808                           tosu	equ	0xFFF
  5809                           tosh	equ	0xFFE
  5810                           tosl	equ	0xFFD
  5811                           pclath	equ	0xFFA
  5812                           tblptru	equ	0xFF8
  5813                           tblptrh	equ	0xFF7
  5814                           tblptrl	equ	0xFF6
  5815                           tablat	equ	0xFF5
  5816                           prodh	equ	0xFF4
  5817                           prodl	equ	0xFF3
  5818                           intcon	equ	0xFF2
  5819                           intcon2	equ	0xFF1
  5820                           postinc0	equ	0xFEE
  5821                           wreg	equ	0xFE8
  5822                           postdec1	equ	0xFE5
  5823                           fsr1l	equ	0xFE1
  5824                           postinc2	equ	0xFDE
  5825                           postdec2	equ	0xFDD
  5826                           fsr2h	equ	0xFDA
  5827                           fsr2l	equ	0xFD9
  5828                           status	equ	0xFD8
  5829                           
  5830 ;; *************** function ___fladd *****************
  5831 ;; Defined at:
  5832 ;;		line 88 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fladd.c"
  5833 ;; Parameters:    Size  Location     Type
  5834 ;;  f1              4   52[COMRAM] unsigned char 
  5835 ;;  f2              4   56[COMRAM] unsigned char 
  5836 ;; Auto vars:     Size  Location     Type
  5837 ;;  exp1            1   63[COMRAM] unsigned char 
  5838 ;;  exp2            1   62[COMRAM] unsigned char 
  5839 ;;  sign            1   61[COMRAM] unsigned char 
  5840 ;; Return value:  Size  Location     Type
  5841 ;;                  4   52[COMRAM] unsigned char 
  5842 ;; Registers used:
  5843 ;;		wreg, status,2, status,0, cstack
  5844 ;; Tracked objects:
  5845 ;;		On entry : 0/0
  5846 ;;		On exit  : 0/0
  5847 ;;		Unchanged: 0/0
  5848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5849 ;;      Params:         8       0       0       0       0       0       0       0       0
  5850 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5851 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5852 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5853 ;;Total ram usage:       12 bytes
  5854 ;; Hardware stack levels used:    1
  5855 ;; Hardware stack levels required when called:    2
  5856 ;; This function calls:
  5857 ;;		___flpack
  5858 ;; This function is called by:
  5859 ;;		_floor
  5860 ;;		___flsub
  5861 ;;		_log
  5862 ;;		_eval_poly
  5863 ;; This function uses a non-reentrant model
  5864 ;;
  5865                           
  5866                           	psect	text30
  5867  003006                     __ptext30:
  5868                           	opt stack 0
  5869  003006                     ___fladd:
  5870                           	opt stack 26
  5871                           
  5872                           ;incstack = 0
  5873  003006  3437               	rlcf	___fladd@f1+2,w,c
  5874  003008  3438               	rlcf	___fladd@f1+3,w,c
  5875  00300A  6E40               	movwf	___fladd@exp1,c
  5876  00300C  343B               	rlcf	___fladd@f2+2,w,c
  5877  00300E  343C               	rlcf	___fladd@f2+3,w,c
  5878  003010  6E3F               	movwf	___fladd@exp2,c
  5879  003012  5040               	movf	___fladd@exp1,w,c
  5880  003014  E009               	bz	l826
  5881  003016  503F               	movf	___fladd@exp2,w,c
  5882  003018  5C40               	subwf	___fladd@exp1,w,c
  5883  00301A  E20F               	bc	l2448
  5884  00301C  5040               	movf	___fladd@exp1,w,c
  5885  00301E  5C3F               	subwf	___fladd@exp2,w,c
  5886  003020  6E3D               	movwf	??___fladd& (0+255),c
  5887  003022  0E20               	movlw	32
  5888  003024  643D               	cpfsgt	??___fladd,c
  5889  003026  D009               	goto	l2448
  5890  003028                     l826:
  5891  003028  C039  F035         	movff	___fladd@f2,?___fladd
  5892  00302C  C03A  F036         	movff	___fladd@f2+1,?___fladd+1
  5893  003030  C03B  F037         	movff	___fladd@f2+2,?___fladd+2
  5894  003034  C03C  F038         	movff	___fladd@f2+3,?___fladd+3
  5895  003038  D099               	goto	l827
  5896  00303A                     l2448:
  5897  00303A  503F               	movf	___fladd@exp2,w,c
  5898  00303C  E009               	bz	l830
  5899  00303E  5040               	movf	___fladd@exp1,w,c
  5900  003040  5C3F               	subwf	___fladd@exp2,w,c
  5901  003042  E20F               	bc	l2454
  5902  003044  503F               	movf	___fladd@exp2,w,c
  5903  003046  5C40               	subwf	___fladd@exp1,w,c
  5904  003048  6E3D               	movwf	??___fladd& (0+255),c
  5905  00304A  0E20               	movlw	32
  5906  00304C  643D               	cpfsgt	??___fladd,c
  5907  00304E  D009               	goto	l2454
  5908  003050                     l830:
  5909  003050  C035  F035         	movff	___fladd@f1,?___fladd
  5910  003054  C036  F036         	movff	___fladd@f1+1,?___fladd+1
  5911  003058  C037  F037         	movff	___fladd@f1+2,?___fladd+2
  5912  00305C  C038  F038         	movff	___fladd@f1+3,?___fladd+3
  5913  003060  D085               	goto	l827
  5914  003062                     l2454:
  5915  003062  0E06               	movlw	6
  5916  003064  6E3E               	movwf	___fladd@sign,c
  5917  003066  BE38               	btfsc	___fladd@f1+3,7,c
  5918  003068  8E3E               	bsf	___fladd@sign,7,c
  5919  00306A  BE3C               	btfsc	___fladd@f2+3,7,c
  5920  00306C  8C3E               	bsf	___fladd@sign,6,c
  5921  00306E  8E37               	bsf	___fladd@f1+2,7,c
  5922  003070  6A38               	clrf	___fladd@f1+3,c
  5923  003072  8E3B               	bsf	___fladd@f2+2,7,c
  5924  003074  6A3C               	clrf	___fladd@f2+3,c
  5925  003076  503F               	movf	___fladd@exp2,w,c
  5926  003078  5C40               	subwf	___fladd@exp1,w,c
  5927  00307A  E21A               	bc	l2478
  5928  00307C                     l2468:
  5929  00307C  90D8               	bcf	status,0,c
  5930  00307E  3639               	rlcf	___fladd@f2,f,c
  5931  003080  363A               	rlcf	___fladd@f2+1,f,c
  5932  003082  363B               	rlcf	___fladd@f2+2,f,c
  5933  003084  363C               	rlcf	___fladd@f2+3,f,c
  5934  003086  063F               	decf	___fladd@exp2,f,c
  5935  003088  5040               	movf	___fladd@exp1,w,c
  5936  00308A  183F               	xorwf	___fladd@exp2,w,c
  5937  00308C  E00D               	bz	l2476
  5938  00308E  063E               	decf	___fladd@sign,f,c
  5939  003090  C03E  F03D         	movff	___fladd@sign,??___fladd
  5940  003094  0E07               	movlw	7
  5941  003096  163D               	andwf	??___fladd,f,c
  5942  003098  E007               	bz	l2476
  5943  00309A  D7F0               	goto	l2468
  5944  00309C                     l2474:
  5945  00309C  90D8               	bcf	status,0,c
  5946  00309E  3238               	rrcf	___fladd@f1+3,f,c
  5947  0030A0  3237               	rrcf	___fladd@f1+2,f,c
  5948  0030A2  3236               	rrcf	___fladd@f1+1,f,c
  5949  0030A4  3235               	rrcf	___fladd@f1,f,c
  5950  0030A6  2A40               	incf	___fladd@exp1,f,c
  5951  0030A8                     l2476:
  5952  0030A8  503F               	movf	___fladd@exp2,w,c
  5953  0030AA  1840               	xorwf	___fladd@exp1,w,c
  5954  0030AC  E01D               	bz	l841
  5955  0030AE  D7F6               	goto	l2474
  5956  0030B0                     l2478:
  5957  0030B0  5040               	movf	___fladd@exp1,w,c
  5958  0030B2  5C3F               	subwf	___fladd@exp2,w,c
  5959  0030B4  E219               	bc	l841
  5960  0030B6                     l2480:
  5961  0030B6  90D8               	bcf	status,0,c
  5962  0030B8  3635               	rlcf	___fladd@f1,f,c
  5963  0030BA  3636               	rlcf	___fladd@f1+1,f,c
  5964  0030BC  3637               	rlcf	___fladd@f1+2,f,c
  5965  0030BE  3638               	rlcf	___fladd@f1+3,f,c
  5966  0030C0  0640               	decf	___fladd@exp1,f,c
  5967  0030C2  5040               	movf	___fladd@exp1,w,c
  5968  0030C4  183F               	xorwf	___fladd@exp2,w,c
  5969  0030C6  E00D               	bz	l2488
  5970  0030C8  063E               	decf	___fladd@sign,f,c
  5971  0030CA  C03E  F03D         	movff	___fladd@sign,??___fladd
  5972  0030CE  0E07               	movlw	7
  5973  0030D0  163D               	andwf	??___fladd,f,c
  5974  0030D2  E007               	bz	l2488
  5975  0030D4  D7F0               	goto	l2480
  5976  0030D6                     l2486:
  5977  0030D6  90D8               	bcf	status,0,c
  5978  0030D8  323C               	rrcf	___fladd@f2+3,f,c
  5979  0030DA  323B               	rrcf	___fladd@f2+2,f,c
  5980  0030DC  323A               	rrcf	___fladd@f2+1,f,c
  5981  0030DE  3239               	rrcf	___fladd@f2,f,c
  5982  0030E0  2A3F               	incf	___fladd@exp2,f,c
  5983  0030E2                     l2488:
  5984  0030E2  503F               	movf	___fladd@exp2,w,c
  5985  0030E4  1840               	xorwf	___fladd@exp1,w,c
  5986  0030E6  E1F7               	bnz	l2486
  5987  0030E8                     l841:
  5988  0030E8  AE3E               	btfss	___fladd@sign,7,c
  5989  0030EA  D009               	goto	l2492
  5990  0030EC  1E35               	comf	___fladd@f1,f,c
  5991  0030EE  1E36               	comf	___fladd@f1+1,f,c
  5992  0030F0  1E37               	comf	___fladd@f1+2,f,c
  5993  0030F2  1E38               	comf	___fladd@f1+3,f,c
  5994  0030F4  2A35               	incf	___fladd@f1,f,c
  5995  0030F6  0E00               	movlw	0
  5996  0030F8  2236               	addwfc	___fladd@f1+1,f,c
  5997  0030FA  2237               	addwfc	___fladd@f1+2,f,c
  5998  0030FC  2238               	addwfc	___fladd@f1+3,f,c
  5999  0030FE                     l2492:
  6000  0030FE  AC3E               	btfss	___fladd@sign,6,c
  6001  003100  D009               	goto	l2496
  6002  003102  1E39               	comf	___fladd@f2,f,c
  6003  003104  1E3A               	comf	___fladd@f2+1,f,c
  6004  003106  1E3B               	comf	___fladd@f2+2,f,c
  6005  003108  1E3C               	comf	___fladd@f2+3,f,c
  6006  00310A  2A39               	incf	___fladd@f2,f,c
  6007  00310C  0E00               	movlw	0
  6008  00310E  223A               	addwfc	___fladd@f2+1,f,c
  6009  003110  223B               	addwfc	___fladd@f2+2,f,c
  6010  003112  223C               	addwfc	___fladd@f2+3,f,c
  6011  003114                     l2496:
  6012  003114  6A3E               	clrf	___fladd@sign,c
  6013  003116  5035               	movf	___fladd@f1,w,c
  6014  003118  2639               	addwf	___fladd@f2,f,c
  6015  00311A  5036               	movf	___fladd@f1+1,w,c
  6016  00311C  223A               	addwfc	___fladd@f2+1,f,c
  6017  00311E  5037               	movf	___fladd@f1+2,w,c
  6018  003120  223B               	addwfc	___fladd@f2+2,f,c
  6019  003122  5038               	movf	___fladd@f1+3,w,c
  6020  003124  223C               	addwfc	___fladd@f2+3,f,c
  6021  003126  AE3C               	btfss	___fladd@f2+3,7,c
  6022  003128  D00B               	goto	l2504
  6023  00312A  1E39               	comf	___fladd@f2,f,c
  6024  00312C  1E3A               	comf	___fladd@f2+1,f,c
  6025  00312E  1E3B               	comf	___fladd@f2+2,f,c
  6026  003130  1E3C               	comf	___fladd@f2+3,f,c
  6027  003132  2A39               	incf	___fladd@f2,f,c
  6028  003134  0E00               	movlw	0
  6029  003136  223A               	addwfc	___fladd@f2+1,f,c
  6030  003138  223B               	addwfc	___fladd@f2+2,f,c
  6031  00313A  223C               	addwfc	___fladd@f2+3,f,c
  6032  00313C  0E01               	movlw	1
  6033  00313E  6E3E               	movwf	___fladd@sign,c
  6034  003140                     l2504:
  6035  003140  C039  F001         	movff	___fladd@f2,___flpack@arg
  6036  003144  C03A  F002         	movff	___fladd@f2+1,___flpack@arg+1
  6037  003148  C03B  F003         	movff	___fladd@f2+2,___flpack@arg+2
  6038  00314C  C03C  F004         	movff	___fladd@f2+3,___flpack@arg+3
  6039  003150  C040  F005         	movff	___fladd@exp1,___flpack@exp
  6040  003154  C03E  F006         	movff	___fladd@sign,___flpack@sign
  6041  003158  EC02  F01C         	call	___flpack	;wreg free
  6042  00315C  C001  F035         	movff	?___flpack,?___fladd
  6043  003160  C002  F036         	movff	?___flpack+1,?___fladd+1
  6044  003164  C003  F037         	movff	?___flpack+2,?___fladd+2
  6045  003168  C004  F038         	movff	?___flpack+3,?___fladd+3
  6046  00316C                     l827:
  6047  00316C  0012               	return		;funcret
  6048  00316E                     __end_of___fladd:
  6049                           	opt stack 0
  6050                           tosu	equ	0xFFF
  6051                           tosh	equ	0xFFE
  6052                           tosl	equ	0xFFD
  6053                           pclath	equ	0xFFA
  6054                           tblptru	equ	0xFF8
  6055                           tblptrh	equ	0xFF7
  6056                           tblptrl	equ	0xFF6
  6057                           tablat	equ	0xFF5
  6058                           prodh	equ	0xFF4
  6059                           prodl	equ	0xFF3
  6060                           intcon	equ	0xFF2
  6061                           intcon2	equ	0xFF1
  6062                           postinc0	equ	0xFEE
  6063                           wreg	equ	0xFE8
  6064                           postdec1	equ	0xFE5
  6065                           fsr1l	equ	0xFE1
  6066                           postinc2	equ	0xFDE
  6067                           postdec2	equ	0xFDD
  6068                           fsr2h	equ	0xFDA
  6069                           fsr2l	equ	0xFD9
  6070                           status	equ	0xFD8
  6071                           
  6072 ;; *************** function ___awtofl *****************
  6073 ;; Defined at:
  6074 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtofl.c"
  6075 ;; Parameters:    Size  Location     Type
  6076 ;;  c               2   10[COMRAM] int 
  6077 ;; Auto vars:     Size  Location     Type
  6078 ;;  f1              4    0        int 
  6079 ;;  sign            1   14[COMRAM] unsigned char 
  6080 ;; Return value:  Size  Location     Type
  6081 ;;                  4   10[COMRAM] unsigned char 
  6082 ;; Registers used:
  6083 ;;		wreg, status,2, status,0, cstack
  6084 ;; Tracked objects:
  6085 ;;		On entry : 0/0
  6086 ;;		On exit  : 0/0
  6087 ;;		Unchanged: 0/0
  6088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6089 ;;      Params:         4       0       0       0       0       0       0       0       0
  6090 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6091 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6092 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6093 ;;Total ram usage:        5 bytes
  6094 ;; Hardware stack levels used:    1
  6095 ;; Hardware stack levels required when called:    2
  6096 ;; This function calls:
  6097 ;;		___flpack
  6098 ;; This function is called by:
  6099 ;;		_format_double
  6100 ;;		_log
  6101 ;;		_exp
  6102 ;; This function uses a non-reentrant model
  6103 ;;
  6104                           
  6105                           	psect	text31
  6106  003FCC                     __ptext31:
  6107                           	opt stack 0
  6108  003FCC                     ___awtofl:
  6109                           	opt stack 25
  6110                           
  6111                           ;incstack = 0
  6112  003FCC  6A0F               	clrf	___awtofl@sign,c
  6113  003FCE  AE0C               	btfss	___awtofl@c+1,7,c
  6114  003FD0  D005               	goto	l2700
  6115  003FD2  6C0B               	negf	___awtofl@c,c
  6116  003FD4  1E0C               	comf	___awtofl@c+1,f,c
  6117  003FD6  B0D8               	btfsc	status,0,c
  6118  003FD8  2A0C               	incf	___awtofl@c+1,f,c
  6119  003FDA  2A0F               	incf	___awtofl@sign,f,c
  6120  003FDC                     l2700:
  6121  003FDC  C00B  F001         	movff	___awtofl@c,___flpack@arg
  6122  003FE0  C00C  F002         	movff	___awtofl@c+1,___flpack@arg+1
  6123  003FE4  6A03               	clrf	___flpack@arg+2,c
  6124  003FE6  6A04               	clrf	___flpack@arg+3,c
  6125  003FE8  0E96               	movlw	150
  6126  003FEA  6E05               	movwf	___flpack@exp,c
  6127  003FEC  C00F  F006         	movff	___awtofl@sign,___flpack@sign
  6128  003FF0  EC02  F01C         	call	___flpack	;wreg free
  6129  003FF4  C001  F00B         	movff	?___flpack,?___awtofl
  6130  003FF8  C002  F00C         	movff	?___flpack+1,?___awtofl+1
  6131  003FFC  C003  F00D         	movff	?___flpack+2,?___awtofl+2
  6132  004000  C004  F00E         	movff	?___flpack+3,?___awtofl+3
  6133  004004  0012               	return		;funcret
  6134  004006                     __end_of___awtofl:
  6135                           	opt stack 0
  6136                           tosu	equ	0xFFF
  6137                           tosh	equ	0xFFE
  6138                           tosl	equ	0xFFD
  6139                           pclath	equ	0xFFA
  6140                           tblptru	equ	0xFF8
  6141                           tblptrh	equ	0xFF7
  6142                           tblptrl	equ	0xFF6
  6143                           tablat	equ	0xFF5
  6144                           prodh	equ	0xFF4
  6145                           prodl	equ	0xFF3
  6146                           intcon	equ	0xFF2
  6147                           intcon2	equ	0xFF1
  6148                           postinc0	equ	0xFEE
  6149                           wreg	equ	0xFE8
  6150                           postdec1	equ	0xFE5
  6151                           fsr1l	equ	0xFE1
  6152                           postinc2	equ	0xFDE
  6153                           postdec2	equ	0xFDD
  6154                           fsr2h	equ	0xFDA
  6155                           fsr2l	equ	0xFD9
  6156                           status	equ	0xFD8
  6157                           
  6158 ;; *************** function _calibrate *****************
  6159 ;; Defined at:
  6160 ;;		line 25 in file "../../../src/measure.c"
  6161 ;; Parameters:    Size  Location     Type
  6162 ;;		None
  6163 ;; Auto vars:     Size  Location     Type
  6164 ;;  i               1   59[COMRAM] unsigned char 
  6165 ;; Return value:  Size  Location     Type
  6166 ;;		None               void
  6167 ;; Registers used:
  6168 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, cstack
  6169 ;; Tracked objects:
  6170 ;;		On entry : 0/0
  6171 ;;		On exit  : 0/0
  6172 ;;		Unchanged: 0/0
  6173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6174 ;;      Params:         0       0       0       0       0       0       0       0       0
  6175 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6176 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6177 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6178 ;;Total ram usage:        1 bytes
  6179 ;; Hardware stack levels used:    1
  6180 ;; Hardware stack levels required when called:    7
  6181 ;; This function calls:
  6182 ;;		___lwtofl
  6183 ;;		_delay10ms
  6184 ;;		_lcd_clear
  6185 ;;		_lcd_gotoxy
  6186 ;;		_lcd_putch
  6187 ;;		_measure_freq
  6188 ;;		_put_str
  6189 ;;		_uart_puts
  6190 ;; This function is called by:
  6191 ;;		_main
  6192 ;; This function uses a non-reentrant model
  6193 ;;
  6194                           
  6195                           	psect	text32
  6196  003572                     __ptext32:
  6197                           	opt stack 0
  6198  003572                     _calibrate:
  6199                           	opt stack 23
  6200                           
  6201                           ;measure.c: 26: unsigned char i;
  6202                           ;measure.c: 29: lcd_clear();
  6203                           
  6204                           ;incstack = 0
  6205  003572  EC18  F021         	call	_lcd_clear	;wreg free
  6206                           
  6207                           ;measure.c: 31: lcd_gotoxy(0, 0);
  6208  003576  0E00               	movlw	0
  6209  003578  6A05               	clrf	lcd_gotoxy@row,c
  6210  00357A  EC20  F020         	call	_lcd_gotoxy
  6211                           
  6212                           ;measure.c: 32: put_str("Calibrating");
  6213  00357E  0E79               	movlw	STR_13& (0+255)
  6214  003580  EC03  F020         	call	_put_str
  6215                           
  6216                           ;measure.c: 34: lcd_gotoxy(0, 1);
  6217  003584  0E01               	movlw	1
  6218  003586  6E05               	movwf	lcd_gotoxy@row,c
  6219  003588  0E00               	movlw	0
  6220  00358A  EC20  F020         	call	_lcd_gotoxy
  6221                           
  6222                           ;measure.c: 35: uart_puts("\r\n");
  6223  00358E  0EA3               	movlw	(STR_21+3)& (0+255)
  6224  003590  ECCB  F020         	call	_uart_puts
  6225                           
  6226                           ;measure.c: 36: put_str("please wait...");
  6227  003594  0E5D               	movlw	STR_15& (0+255)
  6228  003596  EC03  F020         	call	_put_str
  6229                           
  6230                           ;measure.c: 39: RC2 = 0;
  6231  00359A  9482               	bcf	3970,2,c	;volatile
  6232                           
  6233                           ;measure.c: 41: F1 = (double)measure_freq();
  6234  00359C  EC3E  F01A         	call	_measure_freq	;wreg free
  6235  0035A0  C033  F038         	movff	?_measure_freq,___lwtofl@c
  6236  0035A4  C034  F039         	movff	?_measure_freq+1,___lwtofl@c+1
  6237  0035A8  ECB6  F020         	call	___lwtofl	;wreg free
  6238  0035AC  C038  F0D5         	movff	?___lwtofl,_F1
  6239  0035B0  C039  F0D6         	movff	?___lwtofl+1,_F1+1
  6240  0035B4  C03A  F0D7         	movff	?___lwtofl+2,_F1+2
  6241  0035B8  C03B  F0D8         	movff	?___lwtofl+3,_F1+3
  6242                           
  6243                           ;measure.c: 42: delay10ms(50);
  6244  0035BC  0E32               	movlw	50
  6245  0035BE  EC46  F021         	call	_delay10ms
  6246                           
  6247                           ;measure.c: 44: F1 = (double)measure_freq();
  6248  0035C2  EC3E  F01A         	call	_measure_freq	;wreg free
  6249  0035C6  C033  F038         	movff	?_measure_freq,___lwtofl@c
  6250  0035CA  C034  F039         	movff	?_measure_freq+1,___lwtofl@c+1
  6251  0035CE  ECB6  F020         	call	___lwtofl	;wreg free
  6252  0035D2  C038  F0D5         	movff	?___lwtofl,_F1
  6253  0035D6  C039  F0D6         	movff	?___lwtofl+1,_F1+1
  6254  0035DA  C03A  F0D7         	movff	?___lwtofl+2,_F1+2
  6255  0035DE  C03B  F0D8         	movff	?___lwtofl+3,_F1+3
  6256                           
  6257                           ;measure.c: 45: RC2 = 1;
  6258  0035E2  8482               	bsf	3970,2,c	;volatile
  6259                           
  6260                           ;measure.c: 47: F2 = (double)measure_freq();
  6261  0035E4  EC3E  F01A         	call	_measure_freq	;wreg free
  6262  0035E8  C033  F038         	movff	?_measure_freq,___lwtofl@c
  6263  0035EC  C034  F039         	movff	?_measure_freq+1,___lwtofl@c+1
  6264  0035F0  ECB6  F020         	call	___lwtofl	;wreg free
  6265  0035F4  C038  F0A8         	movff	?___lwtofl,_F2
  6266  0035F8  C039  F0A9         	movff	?___lwtofl+1,_F2+1
  6267  0035FC  C03A  F0AA         	movff	?___lwtofl+2,_F2+2
  6268  003600  C03B  F0AB         	movff	?___lwtofl+3,_F2+3
  6269                           
  6270                           ;measure.c: 48: delay10ms(50);
  6271  003604  0E32               	movlw	50
  6272  003606  EC46  F021         	call	_delay10ms
  6273                           
  6274                           ;measure.c: 50: F2 = (double)measure_freq();
  6275  00360A  EC3E  F01A         	call	_measure_freq	;wreg free
  6276  00360E  C033  F038         	movff	?_measure_freq,___lwtofl@c
  6277  003612  C034  F039         	movff	?_measure_freq+1,___lwtofl@c+1
  6278  003616  ECB6  F020         	call	___lwtofl	;wreg free
  6279  00361A  C038  F0A8         	movff	?___lwtofl,_F2
  6280  00361E  C039  F0A9         	movff	?___lwtofl+1,_F2+1
  6281  003622  C03A  F0AA         	movff	?___lwtofl+2,_F2+2
  6282  003626  C03B  F0AB         	movff	?___lwtofl+3,_F2+3
  6283                           
  6284                           ;measure.c: 51: RC2 = 0;
  6285  00362A  9482               	bcf	3970,2,c	;volatile
  6286                           
  6287                           ;measure.c: 55: lcd_gotoxy(11, 0);
  6288  00362C  6A05               	clrf	lcd_gotoxy@row,c
  6289  00362E  0E0B               	movlw	11
  6290  003630  EC20  F020         	call	_lcd_gotoxy
  6291                           
  6292                           ;measure.c: 57: for(i = 0; i < 6; i++) {
  6293  003634  6A3C               	clrf	calibrate@i,c
  6294  003636                     l3186:
  6295                           
  6296                           ;measure.c: 58: lcd_putch('=');
  6297  003636  0E3D               	movlw	61
  6298  003638  EC2A  F021         	call	_lcd_putch
  6299                           
  6300                           ;measure.c: 60: delay10ms(28);
  6301  00363C  0E1C               	movlw	28
  6302  00363E  EC46  F021         	call	_delay10ms
  6303  003642  2A3C               	incf	calibrate@i,f,c
  6304  003644  0E05               	movlw	5
  6305  003646  643C               	cpfsgt	calibrate@i,c
  6306  003648  D7F6               	goto	l3186
  6307                           
  6308                           ;measure.c: 61: }
  6309                           ;measure.c: 63: uart_puts("\r\n");
  6310  00364A  0EA3               	movlw	(STR_21+3)& (0+255)
  6311  00364C  ECCB  F020         	call	_uart_puts
  6312  003650  0012               	return		;funcret
  6313  003652                     __end_of_calibrate:
  6314                           	opt stack 0
  6315                           tosu	equ	0xFFF
  6316                           tosh	equ	0xFFE
  6317                           tosl	equ	0xFFD
  6318                           pclath	equ	0xFFA
  6319                           tblptru	equ	0xFF8
  6320                           tblptrh	equ	0xFF7
  6321                           tblptrl	equ	0xFF6
  6322                           tablat	equ	0xFF5
  6323                           prodh	equ	0xFF4
  6324                           prodl	equ	0xFF3
  6325                           intcon	equ	0xFF2
  6326                           intcon2	equ	0xFF1
  6327                           postinc0	equ	0xFEE
  6328                           wreg	equ	0xFE8
  6329                           postdec1	equ	0xFE5
  6330                           fsr1l	equ	0xFE1
  6331                           postinc2	equ	0xFDE
  6332                           postdec2	equ	0xFDD
  6333                           fsr2h	equ	0xFDA
  6334                           fsr2l	equ	0xFD9
  6335                           status	equ	0xFD8
  6336                           
  6337 ;; *************** function _uart_puts *****************
  6338 ;; Defined at:
  6339 ;;		line 112 in file "../../../lib/uart.c"
  6340 ;; Parameters:    Size  Location     Type
  6341 ;;  s               1    wreg     PTR const unsigned char 
  6342 ;;		 -> STR_21(6), STR_16(3), STR_14(3), STR_9(3), 
  6343 ;; Auto vars:     Size  Location     Type
  6344 ;;  s               1    1[COMRAM] PTR const unsigned char 
  6345 ;;		 -> STR_21(6), STR_16(3), STR_14(3), STR_9(3), 
  6346 ;; Return value:  Size  Location     Type
  6347 ;;		None               void
  6348 ;; Registers used:
  6349 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6350 ;; Tracked objects:
  6351 ;;		On entry : 0/0
  6352 ;;		On exit  : 0/0
  6353 ;;		Unchanged: 0/0
  6354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6355 ;;      Params:         0       0       0       0       0       0       0       0       0
  6356 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6357 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6358 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6359 ;;Total ram usage:        1 bytes
  6360 ;; Hardware stack levels used:    1
  6361 ;; Hardware stack levels required when called:    2
  6362 ;; This function calls:
  6363 ;;		_uart_putch
  6364 ;; This function is called by:
  6365 ;;		_print_unit
  6366 ;;		_calibrate
  6367 ;;		_main
  6368 ;; This function uses a non-reentrant model
  6369 ;;
  6370                           
  6371                           	psect	text33
  6372  004196                     __ptext33:
  6373                           	opt stack 0
  6374  004196                     _uart_puts:
  6375                           	opt stack 28
  6376                           
  6377                           ;incstack = 0
  6378                           ;uart_puts@s stored from wreg
  6379  004196  6E02               	movwf	uart_puts@s,c
  6380                           
  6381                           ;uart.c: 113: while(*s) uart_putch(*s++);
  6382  004198  D009               	goto	l2800
  6383  00419A                     l2796:
  6384  00419A  C002  FFF6         	movff	uart_puts@s,tblptrl
  6385  00419E                     	if	1	;There is more than 1 active tblptr byte
  6386  00419E  0E20               	movlw	high __smallconst
  6387  0041A0  6EF7               	movwf	tblptrh,c
  6388  0041A2                     	endif
  6389  0041A2                     	if	0	;tblptru may be non-zero
  6390  0041A2                     	endif
  6391  0041A2                     	if	0	;tblptru may be non-zero
  6392  0041A2                     	endif
  6393  0041A2  0008               	tblrd		*
  6394  0041A4  50F5               	movf	tablat,w,c
  6395  0041A6  EC31  F021         	call	_uart_putch
  6396  0041AA  2A02               	incf	uart_puts@s,f,c
  6397  0041AC                     l2800:
  6398  0041AC  C002  FFF6         	movff	uart_puts@s,tblptrl
  6399  0041B0                     	if	1	;There is more than 1 active tblptr byte
  6400  0041B0  0E20               	movlw	high __smallconst
  6401  0041B2  6EF7               	movwf	tblptrh,c
  6402  0041B4                     	endif
  6403  0041B4                     	if	0	;tblptru may be non-zero
  6404  0041B4                     	endif
  6405  0041B4                     	if	0	;tblptru may be non-zero
  6406  0041B4                     	endif
  6407  0041B4  0008               	tblrd		*
  6408  0041B6  50F5               	movf	tablat,w,c
  6409  0041B8  B4D8               	btfsc	status,2,c
  6410  0041BA  0012               	return		;funcret
  6411  0041BC  D7EE               	goto	l2796
  6412  0041BE                     __end_of_uart_puts:
  6413                           	opt stack 0
  6414                           tosu	equ	0xFFF
  6415                           tosh	equ	0xFFE
  6416                           tosl	equ	0xFFD
  6417                           pclath	equ	0xFFA
  6418                           tblptru	equ	0xFF8
  6419                           tblptrh	equ	0xFF7
  6420                           tblptrl	equ	0xFF6
  6421                           tablat	equ	0xFF5
  6422                           prodh	equ	0xFF4
  6423                           prodl	equ	0xFF3
  6424                           intcon	equ	0xFF2
  6425                           intcon2	equ	0xFF1
  6426                           postinc0	equ	0xFEE
  6427                           wreg	equ	0xFE8
  6428                           postdec1	equ	0xFE5
  6429                           fsr1l	equ	0xFE1
  6430                           postinc2	equ	0xFDE
  6431                           postdec2	equ	0xFDD
  6432                           fsr2h	equ	0xFDA
  6433                           fsr2l	equ	0xFD9
  6434                           status	equ	0xFD8
  6435                           
  6436 ;; *************** function _uart_putch *****************
  6437 ;; Defined at:
  6438 ;;		line 23 in file "../../../lib/uart.c"
  6439 ;; Parameters:    Size  Location     Type
  6440 ;;  byte            1    wreg     unsigned char 
  6441 ;; Auto vars:     Size  Location     Type
  6442 ;;  byte            1    0[COMRAM] unsigned char 
  6443 ;; Return value:  Size  Location     Type
  6444 ;;		None               void
  6445 ;; Registers used:
  6446 ;;		wreg
  6447 ;; Tracked objects:
  6448 ;;		On entry : 0/0
  6449 ;;		On exit  : 0/0
  6450 ;;		Unchanged: 0/0
  6451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6452 ;;      Params:         0       0       0       0       0       0       0       0       0
  6453 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6454 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6455 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6456 ;;Total ram usage:        1 bytes
  6457 ;; Hardware stack levels used:    1
  6458 ;; Hardware stack levels required when called:    1
  6459 ;; This function calls:
  6460 ;;		Nothing
  6461 ;; This function is called by:
  6462 ;;		_uart_puts
  6463 ;; This function uses a non-reentrant model
  6464 ;;
  6465                           
  6466                           	psect	text34
  6467  004262                     __ptext34:
  6468                           	opt stack 0
  6469  004262                     _uart_putch:
  6470                           	opt stack 28
  6471                           
  6472                           ;incstack = 0
  6473                           ;uart_putch@byte stored from wreg
  6474  004262  6E01               	movwf	uart_putch@byte,c
  6475  004264                     l533:
  6476  004264  A89E               	btfss	3998,4,c	;volatile
  6477  004266  D7FE               	goto	l533
  6478                           
  6479                           ;uart.c: 28: }
  6480                           ;uart.c: 29: TXREG = (unsigned char)byte;
  6481  004268  C001  FFAD         	movff	uart_putch@byte,4013	;volatile
  6482  00426C  0012               	return		;funcret
  6483  00426E                     __end_of_uart_putch:
  6484                           	opt stack 0
  6485                           tosu	equ	0xFFF
  6486                           tosh	equ	0xFFE
  6487                           tosl	equ	0xFFD
  6488                           pclath	equ	0xFFA
  6489                           tblptru	equ	0xFF8
  6490                           tblptrh	equ	0xFF7
  6491                           tblptrl	equ	0xFF6
  6492                           tablat	equ	0xFF5
  6493                           prodh	equ	0xFF4
  6494                           prodl	equ	0xFF3
  6495                           intcon	equ	0xFF2
  6496                           intcon2	equ	0xFF1
  6497                           postinc0	equ	0xFEE
  6498                           wreg	equ	0xFE8
  6499                           postdec1	equ	0xFE5
  6500                           fsr1l	equ	0xFE1
  6501                           postinc2	equ	0xFDE
  6502                           postdec2	equ	0xFDD
  6503                           fsr2h	equ	0xFDA
  6504                           fsr2l	equ	0xFD9
  6505                           status	equ	0xFD8
  6506                           
  6507 ;; *************** function _measure_freq *****************
  6508 ;; Defined at:
  6509 ;;		line 71 in file "../../../src/measure.c"
  6510 ;; Parameters:    Size  Location     Type
  6511 ;;		None
  6512 ;; Auto vars:     Size  Location     Type
  6513 ;;  count           2   53[COMRAM] unsigned short 
  6514 ;; Return value:  Size  Location     Type
  6515 ;;                  2   50[COMRAM] unsigned short 
  6516 ;; Registers used:
  6517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, cstack
  6518 ;; Tracked objects:
  6519 ;;		On entry : 0/0
  6520 ;;		On exit  : 0/0
  6521 ;;		Unchanged: 0/0
  6522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6523 ;;      Params:         2       0       0       0       0       0       0       0       0
  6524 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6525 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6526 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6527 ;;Total ram usage:        5 bytes
  6528 ;; Hardware stack levels used:    1
  6529 ;; Hardware stack levels required when called:    6
  6530 ;; This function calls:
  6531 ;;		_format_number
  6532 ;;		_lcd_gotoxy
  6533 ;;		_put_str
  6534 ;;		_timer0_read_ps
  6535 ;; This function is called by:
  6536 ;;		_calibrate
  6537 ;;		_measure_capacitance
  6538 ;;		_measure_inductance
  6539 ;; This function uses a non-reentrant model
  6540 ;;
  6541                           
  6542                           	psect	text35
  6543  00347C                     __ptext35:
  6544                           	opt stack 0
  6545  00347C                     _measure_freq:
  6546                           	opt stack 23
  6547                           
  6548                           ;measure.c: 72: unsigned short int count;
  6549                           ;measure.c: 74: TMR0IF = 0;
  6550                           
  6551                           ;incstack = 0
  6552  00347C  94F2               	bcf	intcon,2,c	;volatile
  6553                           
  6554                           ;measure.c: 78: TRISA &= ~0b00010000;
  6555  00347E  9892               	bcf	3986,4,c	;volatile
  6556                           
  6557                           ;measure.c: 80: _delay((unsigned long)((20)*(20000000/4000.0)));
  6558  003480  0E82               	movlw	130
  6559  003482  6E35               	movwf	??_measure_freq& (0+255),c
  6560  003484  0EDE               	movlw	222
  6561  003486                     u2767:
  6562  003486  2EE8               	decfsz	wreg,f,c
  6563  003488  D7FE               	goto	u2767
  6564  00348A  2E35               	decfsz	??_measure_freq& (0+255),f,c
  6565  00348C  D7FC               	goto	u2767
  6566                           
  6567                           ;measure.c: 83: TMR0 = 0x00;
  6568  00348E  6AD6               	clrf	4054,c	;volatile
  6569  003490  6AD7               	clrf	4055,c	;volatile
  6570                           
  6571                           ;measure.c: 85: RC1 = ((1) == 0);
  6572  003492  9282               	bcf	3970,1,c	;volatile
  6573                           
  6574                           ;measure.c: 88: _delay((unsigned long)((10)*(20000000/4000.0))); _delay((unsigned long)(
      +                          (10)*(20000000/4000.0))); _delay((unsigned long)((10)*(20000000/4000.0))); _delay((unsig
      +                          ned long)((10)*(20000000/4000.0))); _delay((unsigned long)((10)*(20000000/4000.0)));
  6575  003494  0E41               	movlw	65
  6576  003496  6E35               	movwf	??_measure_freq& (0+255),c
  6577  003498  0EEE               	movlw	238
  6578  00349A                     u2777:
  6579  00349A  2EE8               	decfsz	wreg,f,c
  6580  00349C  D7FE               	goto	u2777
  6581  00349E  2E35               	decfsz	??_measure_freq& (0+255),f,c
  6582  0034A0  D7FC               	goto	u2777
  6583  0034A2  D000               	nop2	
  6584  0034A4  0E41               	movlw	65
  6585  0034A6  6E35               	movwf	??_measure_freq& (0+255),c
  6586  0034A8  0EEE               	movlw	238
  6587  0034AA                     u2787:
  6588  0034AA  2EE8               	decfsz	wreg,f,c
  6589  0034AC  D7FE               	goto	u2787
  6590  0034AE  2E35               	decfsz	??_measure_freq& (0+255),f,c
  6591  0034B0  D7FC               	goto	u2787
  6592  0034B2  D000               	nop2	
  6593  0034B4  0E41               	movlw	65
  6594  0034B6  6E35               	movwf	??_measure_freq& (0+255),c
  6595  0034B8  0EEE               	movlw	238
  6596  0034BA                     u2797:
  6597  0034BA  2EE8               	decfsz	wreg,f,c
  6598  0034BC  D7FE               	goto	u2797
  6599  0034BE  2E35               	decfsz	??_measure_freq& (0+255),f,c
  6600  0034C0  D7FC               	goto	u2797
  6601  0034C2  D000               	nop2	
  6602  0034C4  0E41               	movlw	65
  6603  0034C6  6E35               	movwf	??_measure_freq& (0+255),c
  6604  0034C8  0EEE               	movlw	238
  6605  0034CA                     u2807:
  6606  0034CA  2EE8               	decfsz	wreg,f,c
  6607  0034CC  D7FE               	goto	u2807
  6608  0034CE  2E35               	decfsz	??_measure_freq& (0+255),f,c
  6609  0034D0  D7FC               	goto	u2807
  6610  0034D2  D000               	nop2	
  6611  0034D4  0E41               	movlw	65
  6612  0034D6  6E35               	movwf	??_measure_freq& (0+255),c
  6613  0034D8  0EEE               	movlw	238
  6614  0034DA                     u2817:
  6615  0034DA  2EE8               	decfsz	wreg,f,c
  6616  0034DC  D7FE               	goto	u2817
  6617  0034DE  2E35               	decfsz	??_measure_freq& (0+255),f,c
  6618  0034E0  D7FC               	goto	u2817
  6619  0034E2  D000               	nop2	
  6620                           
  6621                           ;measure.c: 89: _delay((unsigned long)((10)*(20000000/4000.0))); _delay((unsigned long)(
      +                          (10)*(20000000/4000.0))); _delay((unsigned long)((10)*(20000000/4000.0))); _delay((unsig
      +                          ned long)((10)*(20000000/4000.0))); _delay((unsigned long)((10)*(20000000/4000.0)));
  6622  0034E4  0E41               	movlw	65
  6623  0034E6  6E35               	movwf	??_measure_freq& (0+255),c
  6624  0034E8  0EEE               	movlw	238
  6625  0034EA                     u2827:
  6626  0034EA  2EE8               	decfsz	wreg,f,c
  6627  0034EC  D7FE               	goto	u2827
  6628  0034EE  2E35               	decfsz	??_measure_freq& (0+255),f,c
  6629  0034F0  D7FC               	goto	u2827
  6630  0034F2  D000               	nop2	
  6631  0034F4  0E41               	movlw	65
  6632  0034F6  6E35               	movwf	??_measure_freq& (0+255),c
  6633  0034F8  0EEE               	movlw	238
  6634  0034FA                     u2837:
  6635  0034FA  2EE8               	decfsz	wreg,f,c
  6636  0034FC  D7FE               	goto	u2837
  6637  0034FE  2E35               	decfsz	??_measure_freq& (0+255),f,c
  6638  003500  D7FC               	goto	u2837
  6639  003502  D000               	nop2	
  6640  003504  0E41               	movlw	65
  6641  003506  6E35               	movwf	??_measure_freq& (0+255),c
  6642  003508  0EEE               	movlw	238
  6643  00350A                     u2847:
  6644  00350A  2EE8               	decfsz	wreg,f,c
  6645  00350C  D7FE               	goto	u2847
  6646  00350E  2E35               	decfsz	??_measure_freq& (0+255),f,c
  6647  003510  D7FC               	goto	u2847
  6648  003512  D000               	nop2	
  6649  003514  0E41               	movlw	65
  6650  003516  6E35               	movwf	??_measure_freq& (0+255),c
  6651  003518  0EEE               	movlw	238
  6652  00351A                     u2857:
  6653  00351A  2EE8               	decfsz	wreg,f,c
  6654  00351C  D7FE               	goto	u2857
  6655  00351E  2E35               	decfsz	??_measure_freq& (0+255),f,c
  6656  003520  D7FC               	goto	u2857
  6657  003522  D000               	nop2	
  6658  003524  0E41               	movlw	65
  6659  003526  6E35               	movwf	??_measure_freq& (0+255),c
  6660  003528  0EEE               	movlw	238
  6661  00352A                     u2867:
  6662  00352A  2EE8               	decfsz	wreg,f,c
  6663  00352C  D7FE               	goto	u2867
  6664  00352E  2E35               	decfsz	??_measure_freq& (0+255),f,c
  6665  003530  D7FC               	goto	u2867
  6666  003532  D000               	nop2	
  6667                           
  6668                           ;measure.c: 91: RC1 = ((0) == 0);
  6669  003534  8282               	bsf	3970,1,c	;volatile
  6670                           
  6671                           ;measure.c: 94: TRISA |= 0b00010000;
  6672  003536  8892               	bsf	3986,4,c	;volatile
  6673                           
  6674                           ;measure.c: 97: count = timer0_read_ps();
  6675  003538  EC37  F01F         	call	_timer0_read_ps	;wreg free
  6676  00353C  C001  F036         	movff	?_timer0_read_ps,measure_freq@count
  6677  003540  C002  F037         	movff	?_timer0_read_ps+1,measure_freq@count+1
  6678                           
  6679                           ;measure.c: 100: lcd_gotoxy(0, 1);
  6680  003544  0E01               	movlw	1
  6681  003546  6E05               	movwf	lcd_gotoxy@row,c
  6682  003548  0E00               	movlw	0
  6683  00354A  EC20  F020         	call	_lcd_gotoxy
  6684                           
  6685                           ;measure.c: 101: put_str("Freq=");
  6686  00354E  0EA6               	movlw	STR_17& (0+255)
  6687  003550  EC03  F020         	call	_put_str
  6688                           
  6689                           ;measure.c: 102: format_number( count, 10, 5);
  6690  003554  C036  F008         	movff	measure_freq@count,format_number@n
  6691  003558  C037  F009         	movff	measure_freq@count+1,format_number@n+1
  6692  00355C  0E0A               	movlw	10
  6693  00355E  6E0A               	movwf	format_number@base,c
  6694  003560  0E05               	movlw	5
  6695  003562  6E0B               	movwf	format_number@pad,c
  6696  003564  EC98  F01B         	call	_format_number	;wreg free
  6697                           
  6698                           ;measure.c: 105: return count;
  6699  003568  C036  F033         	movff	measure_freq@count,?_measure_freq
  6700  00356C  C037  F034         	movff	measure_freq@count+1,?_measure_freq+1
  6701  003570  0012               	return		;funcret
  6702  003572                     __end_of_measure_freq:
  6703                           	opt stack 0
  6704                           tosu	equ	0xFFF
  6705                           tosh	equ	0xFFE
  6706                           tosl	equ	0xFFD
  6707                           pclath	equ	0xFFA
  6708                           tblptru	equ	0xFF8
  6709                           tblptrh	equ	0xFF7
  6710                           tblptrl	equ	0xFF6
  6711                           tablat	equ	0xFF5
  6712                           prodh	equ	0xFF4
  6713                           prodl	equ	0xFF3
  6714                           intcon	equ	0xFF2
  6715                           intcon2	equ	0xFF1
  6716                           postinc0	equ	0xFEE
  6717                           wreg	equ	0xFE8
  6718                           postdec1	equ	0xFE5
  6719                           fsr1l	equ	0xFE1
  6720                           postinc2	equ	0xFDE
  6721                           postdec2	equ	0xFDD
  6722                           fsr2h	equ	0xFDA
  6723                           fsr2l	equ	0xFD9
  6724                           status	equ	0xFD8
  6725                           
  6726 ;; *************** function _timer0_read_ps *****************
  6727 ;; Defined at:
  6728 ;;		line 58 in file "../../../lib/timer.c"
  6729 ;; Parameters:    Size  Location     Type
  6730 ;;		None
  6731 ;; Auto vars:     Size  Location     Type
  6732 ;;  count           2    5[COMRAM] unsigned short 
  6733 ;;  prev            1    4[COMRAM] unsigned char 
  6734 ;; Return value:  Size  Location     Type
  6735 ;;                  2    0[COMRAM] unsigned short 
  6736 ;; Registers used:
  6737 ;;		wreg, status,2, status,0
  6738 ;; Tracked objects:
  6739 ;;		On entry : 0/0
  6740 ;;		On exit  : 0/0
  6741 ;;		Unchanged: 0/0
  6742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6743 ;;      Params:         2       0       0       0       0       0       0       0       0
  6744 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6745 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6746 ;;      Totals:         7       0       0       0       0       0       0       0       0
  6747 ;;Total ram usage:        7 bytes
  6748 ;; Hardware stack levels used:    1
  6749 ;; Hardware stack levels required when called:    1
  6750 ;; This function calls:
  6751 ;;		Nothing
  6752 ;; This function is called by:
  6753 ;;		_measure_freq
  6754 ;; This function uses a non-reentrant model
  6755 ;;
  6756                           
  6757                           	psect	text36
  6758  003E6E                     __ptext36:
  6759                           	opt stack 0
  6760  003E6E                     _timer0_read_ps:
  6761                           	opt stack 27
  6762                           
  6763                           ;timer.c: 59: unsigned char prev = TMR0;
  6764                           
  6765                           ;incstack = 0
  6766  003E6E  CFD6 F005          	movff	4054,timer0_read_ps@prev	;volatile
  6767                           
  6768                           ;timer.c: 60: unsigned short int count = 0;
  6769  003E72  6A06               	clrf	timer0_read_ps@count,c
  6770  003E74  6A07               	clrf	timer0_read_ps@count+1,c
  6771                           
  6772                           ;timer.c: 62: T0CON |= 0x20;
  6773  003E76  8AD5               	bsf	4053,5,c	;volatile
  6774  003E78                     l114:
  6775                           
  6776                           ;timer.c: 66: T0CON |= 0x10;
  6777  003E78  88D5               	bsf	4053,4,c	;volatile
  6778                           
  6779                           ;timer.c: 68: __nop();
  6780  003E7A  F000               	nop	
  6781                           
  6782                           ;timer.c: 69: __nop();
  6783  003E7C  F000               	nop	
  6784                           
  6785                           ;timer.c: 71: T0CON &= ~0x10;
  6786  003E7E  98D5               	bcf	4053,4,c	;volatile
  6787                           
  6788                           ;timer.c: 73: __nop();
  6789  003E80  F000               	nop	
  6790                           
  6791                           ;timer.c: 74: __nop();
  6792  003E82  F000               	nop	
  6793                           
  6794                           ;timer.c: 76: ++count;
  6795  003E84  4A06               	infsnz	timer0_read_ps@count,f,c
  6796  003E86  2A07               	incf	timer0_read_ps@count+1,f,c
  6797                           
  6798                           ;timer.c: 79: } while(prev == TMR0 && count <= 255);
  6799  003E88  5005               	movf	timer0_read_ps@prev,w,c
  6800  003E8A  18D6               	xorwf	4054,w,c	;volatile
  6801  003E8C  10D7               	iorwf	4055,w,c	;volatile
  6802  003E8E  E102               	bnz	l2874
  6803  003E90  0407               	decf	timer0_read_ps@count+1,w,c
  6804  003E92  E3F2               	bnc	l114
  6805  003E94                     l2874:
  6806                           
  6807                           ;timer.c: 81: count = ((prev << 8) + (256 - count));
  6808  003E94  5005               	movf	timer0_read_ps@prev,w,c
  6809  003E96  6E04               	movwf	(??_timer0_read_ps+1)& (0+255),c
  6810  003E98  6A03               	clrf	??_timer0_read_ps& (0+255),c
  6811  003E9A  5006               	movf	timer0_read_ps@count,w,c
  6812  003E9C  5E03               	subwf	??_timer0_read_ps,f,c
  6813  003E9E  5007               	movf	timer0_read_ps@count+1,w,c
  6814  003EA0  5A04               	subwfb	??_timer0_read_ps+1,f,c
  6815  003EA2  0E00               	movlw	0
  6816  003EA4  2403               	addwf	??_timer0_read_ps,w,c
  6817  003EA6  6E06               	movwf	timer0_read_ps@count,c
  6818  003EA8  0E01               	movlw	1
  6819  003EAA  2004               	addwfc	??_timer0_read_ps+1,w,c
  6820  003EAC  6E07               	movwf	timer0_read_ps@count+1,c
  6821                           
  6822                           ;timer.c: 82: return count;
  6823  003EAE  C006  F001         	movff	timer0_read_ps@count,?_timer0_read_ps
  6824  003EB2  C007  F002         	movff	timer0_read_ps@count+1,?_timer0_read_ps+1
  6825  003EB6  0012               	return		;funcret
  6826  003EB8                     __end_of_timer0_read_ps:
  6827                           	opt stack 0
  6828                           tosu	equ	0xFFF
  6829                           tosh	equ	0xFFE
  6830                           tosl	equ	0xFFD
  6831                           pclath	equ	0xFFA
  6832                           tblptru	equ	0xFF8
  6833                           tblptrh	equ	0xFF7
  6834                           tblptrl	equ	0xFF6
  6835                           tablat	equ	0xFF5
  6836                           prodh	equ	0xFF4
  6837                           prodl	equ	0xFF3
  6838                           intcon	equ	0xFF2
  6839                           intcon2	equ	0xFF1
  6840                           postinc0	equ	0xFEE
  6841                           wreg	equ	0xFE8
  6842                           postdec1	equ	0xFE5
  6843                           fsr1l	equ	0xFE1
  6844                           postinc2	equ	0xFDE
  6845                           postdec2	equ	0xFDD
  6846                           fsr2h	equ	0xFDA
  6847                           fsr2l	equ	0xFD9
  6848                           status	equ	0xFD8
  6849                           
  6850 ;; *************** function _put_str *****************
  6851 ;; Defined at:
  6852 ;;		line 511 in file "../../../src/print.c"
  6853 ;; Parameters:    Size  Location     Type
  6854 ;;  s               1    wreg     PTR const unsigned char 
  6855 ;;		 -> STR_19(13), STR_18(10), STR_17(6), STR_15(15), 
  6856 ;;		 -> STR_13(12), 
  6857 ;; Auto vars:     Size  Location     Type
  6858 ;;  s               1    8[COMRAM] PTR const unsigned char 
  6859 ;;		 -> STR_19(13), STR_18(10), STR_17(6), STR_15(15), 
  6860 ;;		 -> STR_13(12), 
  6861 ;;  i               2    6[COMRAM] int 
  6862 ;; Return value:  Size  Location     Type
  6863 ;;		None               void
  6864 ;; Registers used:
  6865 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6866 ;; Tracked objects:
  6867 ;;		On entry : 0/0
  6868 ;;		On exit  : 0/0
  6869 ;;		Unchanged: 0/0
  6870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6871 ;;      Params:         0       0       0       0       0       0       0       0       0
  6872 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6873 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6874 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6875 ;;Total ram usage:        4 bytes
  6876 ;; Hardware stack levels used:    1
  6877 ;; Hardware stack levels required when called:    5
  6878 ;; This function calls:
  6879 ;;		_output_putch
  6880 ;; This function is called by:
  6881 ;;		_calibrate
  6882 ;;		_measure_freq
  6883 ;;		_measure_capacitance
  6884 ;;		_measure_inductance
  6885 ;; This function uses a non-reentrant model
  6886 ;;
  6887                           
  6888                           	psect	text37
  6889  004006                     __ptext37:
  6890                           	opt stack 0
  6891  004006                     _put_str:
  6892                           	opt stack 24
  6893                           
  6894                           ;incstack = 0
  6895                           ;put_str@s stored from wreg
  6896  004006  6E09               	movwf	put_str@s,c
  6897                           
  6898                           ;print.c: 512: int i;
  6899                           ;print.c: 514: for(i = 0; s[i]; i++) {
  6900  004008  6A07               	clrf	put_str@i,c
  6901  00400A  6A08               	clrf	put_str@i+1,c
  6902  00400C  D00D               	goto	l2856
  6903  00400E                     l2852:
  6904                           
  6905                           ;print.c: 515: output_putch(s[i]);
  6906  00400E  5009               	movf	put_str@s,w,c
  6907  004010  2407               	addwf	put_str@i,w,c
  6908  004012  6E06               	movwf	??_put_str& (0+255),c
  6909  004014  C006  FFF6         	movff	??_put_str,tblptrl
  6910  004018                     	if	1	;There is more than 1 active tblptr byte
  6911  004018  0E20               	movlw	high __smallconst
  6912  00401A  6EF7               	movwf	tblptrh,c
  6913  00401C                     	endif
  6914  00401C                     	if	0	;tblptru may be non-zero
  6915  00401C                     	endif
  6916  00401C                     	if	0	;tblptru may be non-zero
  6917  00401C                     	endif
  6918  00401C  0008               	tblrd		*
  6919  00401E  50F5               	movf	tablat,w,c
  6920  004020  EC3D  F021         	call	_output_putch
  6921  004024  4A07               	infsnz	put_str@i,f,c
  6922  004026  2A08               	incf	put_str@i+1,f,c
  6923  004028                     l2856:
  6924  004028  5009               	movf	put_str@s,w,c
  6925  00402A  2407               	addwf	put_str@i,w,c
  6926  00402C  6E06               	movwf	??_put_str& (0+255),c
  6927  00402E  C006  FFF6         	movff	??_put_str,tblptrl
  6928  004032                     	if	1	;There is more than 1 active tblptr byte
  6929  004032  0E20               	movlw	high __smallconst
  6930  004034  6EF7               	movwf	tblptrh,c
  6931  004036                     	endif
  6932  004036                     	if	0	;tblptru may be non-zero
  6933  004036                     	endif
  6934  004036                     	if	0	;tblptru may be non-zero
  6935  004036                     	endif
  6936  004036  0008               	tblrd		*
  6937  004038  50F5               	movf	tablat,w,c
  6938  00403A  B4D8               	btfsc	status,2,c
  6939  00403C  0012               	return		;funcret
  6940  00403E  D7E7               	goto	l2852
  6941  004040                     __end_of_put_str:
  6942                           	opt stack 0
  6943                           tosu	equ	0xFFF
  6944                           tosh	equ	0xFFE
  6945                           tosl	equ	0xFFD
  6946                           pclath	equ	0xFFA
  6947                           tblptru	equ	0xFF8
  6948                           tblptrh	equ	0xFF7
  6949                           tblptrl	equ	0xFF6
  6950                           tablat	equ	0xFF5
  6951                           prodh	equ	0xFF4
  6952                           prodl	equ	0xFF3
  6953                           intcon	equ	0xFF2
  6954                           intcon2	equ	0xFF1
  6955                           postinc0	equ	0xFEE
  6956                           wreg	equ	0xFE8
  6957                           postdec1	equ	0xFE5
  6958                           fsr1l	equ	0xFE1
  6959                           postinc2	equ	0xFDE
  6960                           postdec2	equ	0xFDD
  6961                           fsr2h	equ	0xFDA
  6962                           fsr2l	equ	0xFD9
  6963                           status	equ	0xFD8
  6964                           
  6965 ;; *************** function _lcd_gotoxy *****************
  6966 ;; Defined at:
  6967 ;;		line 154 in file "../../../lib/lcd44780.c"
  6968 ;; Parameters:    Size  Location     Type
  6969 ;;  col             1    wreg     unsigned char 
  6970 ;;  row             1    4[COMRAM] unsigned char 
  6971 ;; Auto vars:     Size  Location     Type
  6972 ;;  col             1    5[COMRAM] unsigned char 
  6973 ;;  row_offsets     4    6[COMRAM] unsigned char [4]
  6974 ;; Return value:  Size  Location     Type
  6975 ;;		None               void
  6976 ;; Registers used:
  6977 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6978 ;; Tracked objects:
  6979 ;;		On entry : 0/0
  6980 ;;		On exit  : 0/0
  6981 ;;		Unchanged: 0/0
  6982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6983 ;;      Params:         1       0       0       0       0       0       0       0       0
  6984 ;;      Locals:         5       0       0       0       0       0       0       0       0
  6985 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6986 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6987 ;;Total ram usage:        6 bytes
  6988 ;; Hardware stack levels used:    1
  6989 ;; Hardware stack levels required when called:    4
  6990 ;; This function calls:
  6991 ;;		_lcd_command
  6992 ;; This function is called by:
  6993 ;;		_print_unit
  6994 ;;		_print_reading
  6995 ;;		_indicator
  6996 ;;		_calibrate
  6997 ;;		_measure_freq
  6998 ;;		_measure_capacitance
  6999 ;;		_measure_inductance
  7000 ;;		_main
  7001 ;; This function uses a non-reentrant model
  7002 ;;
  7003                           
  7004                           	psect	text38
  7005  004040                     __ptext38:
  7006                           	opt stack 0
  7007  004040                     _lcd_gotoxy:
  7008                           	opt stack 24
  7009                           
  7010                           ;incstack = 0
  7011                           ;lcd_gotoxy@col stored from wreg
  7012  004040  6E06               	movwf	lcd_gotoxy@col,c
  7013                           
  7014                           ;lcd44780.c: 156: unsigned char row_offsets[] = {0x00, 0x40, 0x14, 0x54};
  7015  004042  C0E1  F007         	movff	lcd_gotoxy@F4098,lcd_gotoxy@row_offsets
  7016  004046  C0E2  F008         	movff	lcd_gotoxy@F4098+1,lcd_gotoxy@row_offsets+1
  7017  00404A  C0E3  F009         	movff	lcd_gotoxy@F4098+2,lcd_gotoxy@row_offsets+2
  7018  00404E  C0E4  F00A         	movff	lcd_gotoxy@F4098+3,lcd_gotoxy@row_offsets+3
  7019                           
  7020                           ;lcd44780.c: 165: if(LCD_lines == 1) {
  7021  004052  0100               	movlb	0	; () banked
  7022  004054  05C0               	decf	_LCD_lines& (0+255),w,b
  7023  004056  E106               	bnz	l2792
  7024                           
  7025                           ; BSR set to: 0
  7026                           ;lcd44780.c: 166: row_offsets[1] = 0x14;
  7027  004058  0E14               	movlw	20
  7028  00405A  6E08               	movwf	lcd_gotoxy@row_offsets+1,c
  7029                           
  7030                           ;lcd44780.c: 167: row_offsets[2] = 0x28;
  7031  00405C  0E28               	movlw	40
  7032  00405E  6E09               	movwf	lcd_gotoxy@row_offsets+2,c
  7033                           
  7034                           ;lcd44780.c: 168: row_offsets[3] = 0x3C;
  7035  004060  0E3C               	movlw	60
  7036  004062  6E0A               	movwf	lcd_gotoxy@row_offsets+3,c
  7037  004064                     l2792:
  7038                           
  7039                           ; BSR set to: 0
  7040                           ;lcd44780.c: 169: }
  7041                           ;lcd44780.c: 175: lcd_command(0x80 | (col + row_offsets[row]));
  7042  004064  5005               	movf	lcd_gotoxy@row,w,c
  7043  004066  0F07               	addlw	low lcd_gotoxy@row_offsets
  7044  004068  6ED9               	movwf	fsr2l,c
  7045  00406A  6ADA               	clrf	fsr2h,c
  7046  00406C  50DF               	movf	indf2,w,c
  7047  00406E  2406               	addwf	lcd_gotoxy@col,w,c
  7048  004070  0980               	iorlw	128
  7049  004072  EC37  F021         	call	_lcd_command
  7050  004076  0012               	return		;funcret
  7051  004078                     __end_of_lcd_gotoxy:
  7052                           	opt stack 0
  7053                           tosu	equ	0xFFF
  7054                           tosh	equ	0xFFE
  7055                           tosl	equ	0xFFD
  7056                           pclath	equ	0xFFA
  7057                           tblptru	equ	0xFF8
  7058                           tblptrh	equ	0xFF7
  7059                           tblptrl	equ	0xFF6
  7060                           tablat	equ	0xFF5
  7061                           prodh	equ	0xFF4
  7062                           prodl	equ	0xFF3
  7063                           intcon	equ	0xFF2
  7064                           intcon2	equ	0xFF1
  7065                           postinc0	equ	0xFEE
  7066                           wreg	equ	0xFE8
  7067                           postdec1	equ	0xFE5
  7068                           fsr1l	equ	0xFE1
  7069                           indf2	equ	0xFDF
  7070                           postinc2	equ	0xFDE
  7071                           postdec2	equ	0xFDD
  7072                           fsr2h	equ	0xFDA
  7073                           fsr2l	equ	0xFD9
  7074                           status	equ	0xFD8
  7075                           
  7076 ;; *************** function _format_number *****************
  7077 ;; Defined at:
  7078 ;;		line 14 in file "../../../lib/format.c"
  7079 ;; Parameters:    Size  Location     Type
  7080 ;;  n               2    7[COMRAM] unsigned short 
  7081 ;;  base            1    9[COMRAM] unsigned char 
  7082 ;;  pad             1   10[COMRAM] char 
  7083 ;; Auto vars:     Size  Location     Type
  7084 ;;  buf            32   13[COMRAM] unsigned char [32]
  7085 ;;  i               1   49[COMRAM] char 
  7086 ;;  di              1   48[COMRAM] unsigned char 
  7087 ;;  padchar         1   47[COMRAM] unsigned char 
  7088 ;; Return value:  Size  Location     Type
  7089 ;;		None               void
  7090 ;; Registers used:
  7091 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
  7092 ;; Tracked objects:
  7093 ;;		On entry : 0/0
  7094 ;;		On exit  : 0/0
  7095 ;;		Unchanged: 0/0
  7096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7097 ;;      Params:         4       0       0       0       0       0       0       0       0
  7098 ;;      Locals:        37       0       0       0       0       0       0       0       0
  7099 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7100 ;;      Totals:        43       0       0       0       0       0       0       0       0
  7101 ;;Total ram usage:       43 bytes
  7102 ;; Hardware stack levels used:    1
  7103 ;; Hardware stack levels required when called:    5
  7104 ;; This function calls:
  7105 ;;		___lwdiv
  7106 ;;		___lwmod
  7107 ;;		_format_putchar
  7108 ;;		_lcd_putch
  7109 ;;		_output_putch
  7110 ;; This function is called by:
  7111 ;;		_print_reading
  7112 ;;		_measure_freq
  7113 ;; This function uses a non-reentrant model
  7114 ;;
  7115                           
  7116                           	psect	text39
  7117  003730                     __ptext39:
  7118                           	opt stack 0
  7119  003730                     _format_number:
  7120                           	opt stack 23
  7121                           
  7122                           ;format.c: 15: char buf[8 * sizeof(long)];
  7123                           ;format.c: 16: unsigned char di;
  7124                           ;format.c: 17: signed char i = 0;
  7125                           
  7126                           ;incstack = 0
  7127  003730  6A32               	clrf	format_number@i,c
  7128                           
  7129                           ;format.c: 18: char padchar = ' ';
  7130  003732  0E20               	movlw	32
  7131  003734  6E30               	movwf	format_number@padchar,c
  7132                           
  7133                           ;format.c: 20: if(pad < 0) {
  7134  003736  AE0B               	btfss	format_number@pad,7,c
  7135  003738  D003               	goto	l2820
  7136                           
  7137                           ;format.c: 21: pad = -pad;
  7138  00373A  6C0B               	negf	format_number@pad,c
  7139                           
  7140                           ;format.c: 22: padchar = '0';
  7141  00373C  0E30               	movlw	48
  7142  00373E  6E30               	movwf	format_number@padchar,c
  7143  003740                     l2820:
  7144                           
  7145                           ;format.c: 34: di = n % base;
  7146  003740  C008  F001         	movff	format_number@n,___lwmod@dividend
  7147  003744  C009  F002         	movff	format_number@n+1,___lwmod@dividend+1
  7148  003748  C00A  F003         	movff	format_number@base,___lwmod@divisor
  7149  00374C  6A04               	clrf	___lwmod@divisor+1,c
  7150  00374E  ECC7  F01F         	call	___lwmod	;wreg free
  7151  003752  5001               	movf	?___lwmod,w,c
  7152  003754  6E31               	movwf	format_number@di,c
  7153                           
  7154                           ;format.c: 35: buf[i++] = (di < 10 ? (unsigned char)'0' + di : (unsigned char)'A' + di -
      +                           10);
  7155  003756  0E09               	movlw	9
  7156  003758  6431               	cpfsgt	format_number@di,c
  7157  00375A  D002               	goto	l2826
  7158  00375C  0E37               	movlw	55
  7159  00375E  D001               	goto	L5
  7160  003760                     l2826:
  7161  003760  0E30               	movlw	48
  7162  003762                     L5:
  7163  003762  2431               	addwf	format_number@di,w,c
  7164  003764  6E2E               	movwf	_format_number$262,c
  7165  003766  6A2F               	clrf	_format_number$262+1,c
  7166  003768  0E00               	movlw	0
  7167  00376A  222F               	addwfc	_format_number$262+1,f,c
  7168  00376C  5032               	movf	format_number@i,w,c
  7169  00376E  0F0E               	addlw	low format_number@buf
  7170  003770  6ED9               	movwf	fsr2l,c
  7171  003772  6ADA               	clrf	fsr2h,c
  7172  003774  C02E  FFDF         	movff	_format_number$262,indf2
  7173  003778  2A32               	incf	format_number@i,f,c
  7174                           
  7175                           ;format.c: 37: n /= base;
  7176  00377A  C008  F001         	movff	format_number@n,___lwdiv@dividend
  7177  00377E  C009  F002         	movff	format_number@n+1,___lwdiv@dividend+1
  7178  003782  C00A  F003         	movff	format_number@base,___lwdiv@divisor
  7179  003786  6A04               	clrf	___lwdiv@divisor+1,c
  7180  003788  EC5C  F01F         	call	___lwdiv	;wreg free
  7181  00378C  C001  F008         	movff	?___lwdiv,format_number@n
  7182  003790  C002  F009         	movff	?___lwdiv+1,format_number@n+1
  7183                           
  7184                           ;format.c: 38: } while(n > 0);
  7185  003794  5008               	movf	format_number@n,w,c
  7186  003796  1009               	iorwf	format_number@n+1,w,c
  7187  003798  E00F               	bz	l2838
  7188  00379A  D7D2               	goto	l2820
  7189  00379C                     l2836:
  7190  00379C  D801               	call	u2128
  7191  00379E  D00C               	goto	l2838
  7192  0037A0                     u2128:
  7193  0037A0  0005               	push	
  7194  0037A2  0100               	movlb	0	; () banked
  7195  0037A4  6EFA               	movwf	pclath,c
  7196  0037A6  51E5               	movf	_putchar_ptr& (0+255),w,b
  7197  0037A8  6EFD               	movwf	tosl,c
  7198  0037AA  51E6               	movf	(_putchar_ptr+1)& (0+255),w,b
  7199  0037AC  6EFE               	movwf	tosh,c
  7200  0037AE  50F8               	movf	tblptru,w,c
  7201  0037B0  6EFF               	movwf	tosu,c
  7202  0037B2  50FA               	movf	pclath,w,c
  7203  0037B4  5030               	movf	format_number@padchar,w,c
  7204  0037B6  0012               	return		;indir
  7205  0037B8                     l2838:
  7206  0037B8  060B               	decf	format_number@pad,f,c
  7207  0037BA  280B               	incf	format_number@pad,w,c
  7208  0037BC  6E0C               	movwf	??_format_number& (0+255),c
  7209  0037BE  5032               	movf	format_number@i,w,c
  7210  0037C0  0A80               	xorlw	128
  7211  0037C2  6E0D               	movwf	(??_format_number+1)& (0+255),c
  7212  0037C4  500C               	movf	??_format_number,w,c
  7213  0037C6  0A80               	xorlw	128
  7214  0037C8  5C0D               	subwf	(??_format_number+1)& (0+255),w,c
  7215  0037CA  E3E8               	bnc	l2836
  7216  0037CC                     l2840:
  7217                           
  7218                           ;format.c: 42: for(; i > 0; i--) putchar_ptr((char)buf[(signed short int)i - 1]);
  7219  0037CC  5032               	movf	format_number@i,w,c
  7220  0037CE  0A80               	xorlw	128
  7221  0037D0  0F7F               	addlw	-129
  7222  0037D2  E317               	bnc	l151
  7223  0037D4  D801               	call	u2158
  7224  0037D6  D013               	goto	l2846
  7225  0037D8                     u2158:
  7226  0037D8  0005               	push	
  7227  0037DA  0100               	movlb	0	; () banked
  7228  0037DC  6EFA               	movwf	pclath,c
  7229  0037DE  51E5               	movf	_putchar_ptr& (0+255),w,b
  7230  0037E0  6EFD               	movwf	tosl,c
  7231  0037E2  51E6               	movf	(_putchar_ptr+1)& (0+255),w,b
  7232  0037E4  6EFE               	movwf	tosh,c
  7233  0037E6  50F8               	movf	tblptru,w,c
  7234  0037E8  6EFF               	movwf	tosu,c
  7235  0037EA  50FA               	movf	pclath,w,c
  7236  0037EC  C032  F00C         	movff	format_number@i,??_format_number
  7237  0037F0  060C               	decf	??_format_number,f,c
  7238  0037F2  500C               	movf	??_format_number,w,c
  7239  0037F4  0F0E               	addlw	low format_number@buf
  7240  0037F6  6ED9               	movwf	fsr2l,c
  7241  0037F8  6ADA               	clrf	fsr2h,c
  7242  0037FA  50DF               	movf	indf2,w,c
  7243  0037FC  0012               	return		;indir
  7244  0037FE                     l2846:
  7245  0037FE  0632               	decf	format_number@i,f,c
  7246  003800  D7E5               	goto	l2840
  7247  003802                     l151:
  7248  003802  0012               	return		;funcret
  7249  003804                     __end_of_format_number:
  7250                           	opt stack 0
  7251                           tosu	equ	0xFFF
  7252                           tosh	equ	0xFFE
  7253                           tosl	equ	0xFFD
  7254                           pclath	equ	0xFFA
  7255                           tblptru	equ	0xFF8
  7256                           tblptrh	equ	0xFF7
  7257                           tblptrl	equ	0xFF6
  7258                           tablat	equ	0xFF5
  7259                           prodh	equ	0xFF4
  7260                           prodl	equ	0xFF3
  7261                           intcon	equ	0xFF2
  7262                           intcon2	equ	0xFF1
  7263                           postinc0	equ	0xFEE
  7264                           wreg	equ	0xFE8
  7265                           postdec1	equ	0xFE5
  7266                           fsr1l	equ	0xFE1
  7267                           indf2	equ	0xFDF
  7268                           postinc2	equ	0xFDE
  7269                           postdec2	equ	0xFDD
  7270                           fsr2h	equ	0xFDA
  7271                           fsr2l	equ	0xFD9
  7272                           status	equ	0xFD8
  7273                           
  7274 ;; *************** function _format_putchar *****************
  7275 ;; Defined at:
  7276 ;;		line 6 in file "../../../lib/format.c"
  7277 ;; Parameters:    Size  Location     Type
  7278 ;;  c               1    wreg     unsigned char 
  7279 ;; Auto vars:     Size  Location     Type
  7280 ;;  c               1    0[COMRAM] unsigned char 
  7281 ;; Return value:  Size  Location     Type
  7282 ;;		None               void
  7283 ;; Registers used:
  7284 ;;		wreg
  7285 ;; Tracked objects:
  7286 ;;		On entry : F/0
  7287 ;;		On exit  : F/0
  7288 ;;		Unchanged: F/0
  7289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7290 ;;      Params:         0       0       0       0       0       0       0       0       0
  7291 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7292 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7293 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7294 ;;Total ram usage:        0 bytes
  7295 ;; Hardware stack levels used:    1
  7296 ;; Hardware stack levels required when called:    1
  7297 ;; This function calls:
  7298 ;;		Nothing
  7299 ;; This function is called by:
  7300 ;;		_format_number
  7301 ;;		_format_double
  7302 ;; This function uses a non-reentrant model
  7303 ;;
  7304                           
  7305                           	psect	text40
  7306  00428A                     __ptext40:
  7307                           	opt stack 0
  7308  00428A                     _format_putchar:
  7309                           	opt stack 26
  7310                           
  7311                           ; BSR set to: 0
  7312                           
  7313                           ; BSR set to: 0
  7314                           ;format.c: 7: return;
  7315                           
  7316                           ;incstack = 0
  7317  00428A  0012               	return		;funcret
  7318  00428C                     __end_of_format_putchar:
  7319                           	opt stack 0
  7320                           tosu	equ	0xFFF
  7321                           tosh	equ	0xFFE
  7322                           tosl	equ	0xFFD
  7323                           pclath	equ	0xFFA
  7324                           tblptru	equ	0xFF8
  7325                           tblptrh	equ	0xFF7
  7326                           tblptrl	equ	0xFF6
  7327                           tablat	equ	0xFF5
  7328                           prodh	equ	0xFF4
  7329                           prodl	equ	0xFF3
  7330                           intcon	equ	0xFF2
  7331                           intcon2	equ	0xFF1
  7332                           postinc0	equ	0xFEE
  7333                           wreg	equ	0xFE8
  7334                           postdec1	equ	0xFE5
  7335                           fsr1l	equ	0xFE1
  7336                           indf2	equ	0xFDF
  7337                           postinc2	equ	0xFDE
  7338                           postdec2	equ	0xFDD
  7339                           fsr2h	equ	0xFDA
  7340                           fsr2l	equ	0xFD9
  7341                           status	equ	0xFD8
  7342                           
  7343 ;; *************** function _lcd_putch *****************
  7344 ;; Defined at:
  7345 ;;		line 139 in file "../../../lib/lcd44780.c"
  7346 ;; Parameters:    Size  Location     Type
  7347 ;;  value           1    wreg     unsigned char 
  7348 ;; Auto vars:     Size  Location     Type
  7349 ;;  value           1    3[COMRAM] unsigned char 
  7350 ;; Return value:  Size  Location     Type
  7351 ;;		None               void
  7352 ;; Registers used:
  7353 ;;		wreg, status,2, status,0, cstack
  7354 ;; Tracked objects:
  7355 ;;		On entry : 0/0
  7356 ;;		On exit  : 0/0
  7357 ;;		Unchanged: 0/0
  7358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7359 ;;      Params:         0       0       0       0       0       0       0       0       0
  7360 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7361 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7362 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7363 ;;Total ram usage:        1 bytes
  7364 ;; Hardware stack levels used:    1
  7365 ;; Hardware stack levels required when called:    3
  7366 ;; This function calls:
  7367 ;;		_lcd_send
  7368 ;; This function is called by:
  7369 ;;		_output_putch
  7370 ;;		_calibrate
  7371 ;;		_lcd_puts
  7372 ;;		_main
  7373 ;;		_format_number
  7374 ;;		_format_double
  7375 ;; This function uses a non-reentrant model
  7376 ;;
  7377                           
  7378                           	psect	text41
  7379  004254                     __ptext41:
  7380                           	opt stack 0
  7381  004254                     _lcd_putch:
  7382                           	opt stack 24
  7383                           
  7384                           ; BSR set to: 0
  7385                           ;incstack = 0
  7386                           ;lcd_putch@value stored from wreg
  7387  004254  6E04               	movwf	lcd_putch@value,c
  7388                           
  7389                           ;lcd44780.c: 140: lcd_send((unsigned)value, 1);
  7390  004256  0E01               	movlw	1
  7391  004258  6E02               	movwf	lcd_send@mode,c
  7392  00425A  5004               	movf	lcd_putch@value,w,c
  7393  00425C  ECFF  F020         	call	_lcd_send
  7394  004260  0012               	return		;funcret
  7395  004262                     __end_of_lcd_putch:
  7396                           	opt stack 0
  7397                           tosu	equ	0xFFF
  7398                           tosh	equ	0xFFE
  7399                           tosl	equ	0xFFD
  7400                           pclath	equ	0xFFA
  7401                           tblptru	equ	0xFF8
  7402                           tblptrh	equ	0xFF7
  7403                           tblptrl	equ	0xFF6
  7404                           tablat	equ	0xFF5
  7405                           prodh	equ	0xFF4
  7406                           prodl	equ	0xFF3
  7407                           intcon	equ	0xFF2
  7408                           intcon2	equ	0xFF1
  7409                           postinc0	equ	0xFEE
  7410                           wreg	equ	0xFE8
  7411                           postdec1	equ	0xFE5
  7412                           fsr1l	equ	0xFE1
  7413                           indf2	equ	0xFDF
  7414                           postinc2	equ	0xFDE
  7415                           postdec2	equ	0xFDD
  7416                           fsr2h	equ	0xFDA
  7417                           fsr2l	equ	0xFD9
  7418                           status	equ	0xFD8
  7419                           
  7420 ;; *************** function _output_putch *****************
  7421 ;; Defined at:
  7422 ;;		line 498 in file "../../../src/print.c"
  7423 ;; Parameters:    Size  Location     Type
  7424 ;;  c               1    wreg     unsigned char 
  7425 ;; Auto vars:     Size  Location     Type
  7426 ;;  c               1    4[COMRAM] unsigned char 
  7427 ;; Return value:  Size  Location     Type
  7428 ;;		None               void
  7429 ;; Registers used:
  7430 ;;		wreg, status,2, status,0, cstack
  7431 ;; Tracked objects:
  7432 ;;		On entry : 0/0
  7433 ;;		On exit  : 0/0
  7434 ;;		Unchanged: 0/0
  7435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7436 ;;      Params:         0       0       0       0       0       0       0       0       0
  7437 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7438 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7439 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7440 ;;Total ram usage:        1 bytes
  7441 ;; Hardware stack levels used:    1
  7442 ;; Hardware stack levels required when called:    4
  7443 ;; This function calls:
  7444 ;;		_lcd_putch
  7445 ;; This function is called by:
  7446 ;;		_put_str
  7447 ;;		_measure_capacitance
  7448 ;;		_format_number
  7449 ;;		_format_double
  7450 ;; This function uses a non-reentrant model
  7451 ;;
  7452                           
  7453                           	psect	text42
  7454  00427A                     __ptext42:
  7455                           	opt stack 0
  7456  00427A                     _output_putch:
  7457                           	opt stack 24
  7458                           
  7459                           ;incstack = 0
  7460                           ;output_putch@c stored from wreg
  7461  00427A  6E05               	movwf	output_putch@c,c
  7462                           
  7463                           ;print.c: 500: lcd_putch(c);
  7464  00427C  5005               	movf	output_putch@c,w,c
  7465  00427E  EC2A  F021         	call	_lcd_putch
  7466  004282  0012               	return		;funcret
  7467  004284                     __end_of_output_putch:
  7468                           	opt stack 0
  7469                           tosu	equ	0xFFF
  7470                           tosh	equ	0xFFE
  7471                           tosl	equ	0xFFD
  7472                           pclath	equ	0xFFA
  7473                           tblptru	equ	0xFF8
  7474                           tblptrh	equ	0xFF7
  7475                           tblptrl	equ	0xFF6
  7476                           tablat	equ	0xFF5
  7477                           prodh	equ	0xFF4
  7478                           prodl	equ	0xFF3
  7479                           intcon	equ	0xFF2
  7480                           intcon2	equ	0xFF1
  7481                           postinc0	equ	0xFEE
  7482                           wreg	equ	0xFE8
  7483                           postdec1	equ	0xFE5
  7484                           fsr1l	equ	0xFE1
  7485                           indf2	equ	0xFDF
  7486                           postinc2	equ	0xFDE
  7487                           postdec2	equ	0xFDD
  7488                           fsr2h	equ	0xFDA
  7489                           fsr2l	equ	0xFD9
  7490                           status	equ	0xFD8
  7491                           
  7492 ;; *************** function ___lwmod *****************
  7493 ;; Defined at:
  7494 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  7495 ;; Parameters:    Size  Location     Type
  7496 ;;  dividend        2    0[COMRAM] unsigned int 
  7497 ;;  divisor         2    2[COMRAM] unsigned int 
  7498 ;; Auto vars:     Size  Location     Type
  7499 ;;  counter         1    4[COMRAM] unsigned char 
  7500 ;; Return value:  Size  Location     Type
  7501 ;;                  2    0[COMRAM] unsigned int 
  7502 ;; Registers used:
  7503 ;;		wreg, status,2, status,0
  7504 ;; Tracked objects:
  7505 ;;		On entry : 0/0
  7506 ;;		On exit  : 0/0
  7507 ;;		Unchanged: 0/0
  7508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7509 ;;      Params:         4       0       0       0       0       0       0       0       0
  7510 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7511 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7512 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7513 ;;Total ram usage:        5 bytes
  7514 ;; Hardware stack levels used:    1
  7515 ;; Hardware stack levels required when called:    1
  7516 ;; This function calls:
  7517 ;;		Nothing
  7518 ;; This function is called by:
  7519 ;;		_print_reading
  7520 ;;		_format_number
  7521 ;; This function uses a non-reentrant model
  7522 ;;
  7523                           
  7524                           	psect	text43
  7525  003F8E                     __ptext43:
  7526                           	opt stack 0
  7527  003F8E                     ___lwmod:
  7528                           	opt stack 26
  7529                           
  7530                           ;incstack = 0
  7531  003F8E  5003               	movf	___lwmod@divisor,w,c
  7532  003F90  1004               	iorwf	___lwmod@divisor+1,w,c
  7533  003F92  E017               	bz	l1141
  7534  003F94  0E01               	movlw	1
  7535  003F96  6E05               	movwf	___lwmod@counter,c
  7536  003F98  D004               	goto	l2776
  7537  003F9A                     l2774:
  7538  003F9A  90D8               	bcf	status,0,c
  7539  003F9C  3603               	rlcf	___lwmod@divisor,f,c
  7540  003F9E  3604               	rlcf	___lwmod@divisor+1,f,c
  7541  003FA0  2A05               	incf	___lwmod@counter,f,c
  7542  003FA2                     l2776:
  7543  003FA2  AE04               	btfss	___lwmod@divisor+1,7,c
  7544  003FA4  D7FA               	goto	l2774
  7545  003FA6                     l2778:
  7546  003FA6  5003               	movf	___lwmod@divisor,w,c
  7547  003FA8  5C01               	subwf	___lwmod@dividend,w,c
  7548  003FAA  5004               	movf	___lwmod@divisor+1,w,c
  7549  003FAC  5802               	subwfb	___lwmod@dividend+1,w,c
  7550  003FAE  E304               	bnc	l2782
  7551  003FB0  5003               	movf	___lwmod@divisor,w,c
  7552  003FB2  5E01               	subwf	___lwmod@dividend,f,c
  7553  003FB4  5004               	movf	___lwmod@divisor+1,w,c
  7554  003FB6  5A02               	subwfb	___lwmod@dividend+1,f,c
  7555  003FB8                     l2782:
  7556  003FB8  90D8               	bcf	status,0,c
  7557  003FBA  3204               	rrcf	___lwmod@divisor+1,f,c
  7558  003FBC  3203               	rrcf	___lwmod@divisor,f,c
  7559  003FBE  2E05               	decfsz	___lwmod@counter,f,c
  7560  003FC0  D7F2               	goto	l2778
  7561  003FC2                     l1141:
  7562  003FC2  C001  F001         	movff	___lwmod@dividend,?___lwmod
  7563  003FC6  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  7564  003FCA  0012               	return		;funcret
  7565  003FCC                     __end_of___lwmod:
  7566                           	opt stack 0
  7567                           tosu	equ	0xFFF
  7568                           tosh	equ	0xFFE
  7569                           tosl	equ	0xFFD
  7570                           pclath	equ	0xFFA
  7571                           tblptru	equ	0xFF8
  7572                           tblptrh	equ	0xFF7
  7573                           tblptrl	equ	0xFF6
  7574                           tablat	equ	0xFF5
  7575                           prodh	equ	0xFF4
  7576                           prodl	equ	0xFF3
  7577                           intcon	equ	0xFF2
  7578                           intcon2	equ	0xFF1
  7579                           postinc0	equ	0xFEE
  7580                           wreg	equ	0xFE8
  7581                           postdec1	equ	0xFE5
  7582                           fsr1l	equ	0xFE1
  7583                           indf2	equ	0xFDF
  7584                           postinc2	equ	0xFDE
  7585                           postdec2	equ	0xFDD
  7586                           fsr2h	equ	0xFDA
  7587                           fsr2l	equ	0xFD9
  7588                           status	equ	0xFD8
  7589                           
  7590 ;; *************** function ___lwdiv *****************
  7591 ;; Defined at:
  7592 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  7593 ;; Parameters:    Size  Location     Type
  7594 ;;  dividend        2    0[COMRAM] unsigned int 
  7595 ;;  divisor         2    2[COMRAM] unsigned int 
  7596 ;; Auto vars:     Size  Location     Type
  7597 ;;  quotient        2    4[COMRAM] unsigned int 
  7598 ;;  counter         1    6[COMRAM] unsigned char 
  7599 ;; Return value:  Size  Location     Type
  7600 ;;                  2    0[COMRAM] unsigned int 
  7601 ;; Registers used:
  7602 ;;		wreg, status,2, status,0
  7603 ;; Tracked objects:
  7604 ;;		On entry : 0/0
  7605 ;;		On exit  : 0/0
  7606 ;;		Unchanged: 0/0
  7607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7608 ;;      Params:         4       0       0       0       0       0       0       0       0
  7609 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7610 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7611 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7612 ;;Total ram usage:        7 bytes
  7613 ;; Hardware stack levels used:    1
  7614 ;; Hardware stack levels required when called:    1
  7615 ;; This function calls:
  7616 ;;		Nothing
  7617 ;; This function is called by:
  7618 ;;		_print_reading
  7619 ;;		_format_number
  7620 ;; This function uses a non-reentrant model
  7621 ;;
  7622                           
  7623                           	psect	text44
  7624  003EB8                     __ptext44:
  7625                           	opt stack 0
  7626  003EB8                     ___lwdiv:
  7627                           	opt stack 26
  7628                           
  7629                           ;incstack = 0
  7630  003EB8  6A05               	clrf	___lwdiv@quotient,c
  7631  003EBA  6A06               	clrf	___lwdiv@quotient+1,c
  7632  003EBC  5003               	movf	___lwdiv@divisor,w,c
  7633  003EBE  1004               	iorwf	___lwdiv@divisor+1,w,c
  7634  003EC0  E01B               	bz	l1131
  7635  003EC2  0E01               	movlw	1
  7636  003EC4  6E07               	movwf	___lwdiv@counter,c
  7637  003EC6  D004               	goto	l2756
  7638  003EC8                     l2754:
  7639  003EC8  90D8               	bcf	status,0,c
  7640  003ECA  3603               	rlcf	___lwdiv@divisor,f,c
  7641  003ECC  3604               	rlcf	___lwdiv@divisor+1,f,c
  7642  003ECE  2A07               	incf	___lwdiv@counter,f,c
  7643  003ED0                     l2756:
  7644  003ED0  AE04               	btfss	___lwdiv@divisor+1,7,c
  7645  003ED2  D7FA               	goto	l2754
  7646  003ED4                     l2758:
  7647  003ED4  90D8               	bcf	status,0,c
  7648  003ED6  3605               	rlcf	___lwdiv@quotient,f,c
  7649  003ED8  3606               	rlcf	___lwdiv@quotient+1,f,c
  7650  003EDA  5003               	movf	___lwdiv@divisor,w,c
  7651  003EDC  5C01               	subwf	___lwdiv@dividend,w,c
  7652  003EDE  5004               	movf	___lwdiv@divisor+1,w,c
  7653  003EE0  5802               	subwfb	___lwdiv@dividend+1,w,c
  7654  003EE2  E305               	bnc	l2766
  7655  003EE4  5003               	movf	___lwdiv@divisor,w,c
  7656  003EE6  5E01               	subwf	___lwdiv@dividend,f,c
  7657  003EE8  5004               	movf	___lwdiv@divisor+1,w,c
  7658  003EEA  5A02               	subwfb	___lwdiv@dividend+1,f,c
  7659  003EEC  8005               	bsf	___lwdiv@quotient,0,c
  7660  003EEE                     l2766:
  7661  003EEE  90D8               	bcf	status,0,c
  7662  003EF0  3204               	rrcf	___lwdiv@divisor+1,f,c
  7663  003EF2  3203               	rrcf	___lwdiv@divisor,f,c
  7664  003EF4  2E07               	decfsz	___lwdiv@counter,f,c
  7665  003EF6  D7EE               	goto	l2758
  7666  003EF8                     l1131:
  7667  003EF8  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  7668  003EFC  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7669  003F00  0012               	return		;funcret
  7670  003F02                     __end_of___lwdiv:
  7671                           	opt stack 0
  7672                           tosu	equ	0xFFF
  7673                           tosh	equ	0xFFE
  7674                           tosl	equ	0xFFD
  7675                           pclath	equ	0xFFA
  7676                           tblptru	equ	0xFF8
  7677                           tblptrh	equ	0xFF7
  7678                           tblptrl	equ	0xFF6
  7679                           tablat	equ	0xFF5
  7680                           prodh	equ	0xFF4
  7681                           prodl	equ	0xFF3
  7682                           intcon	equ	0xFF2
  7683                           intcon2	equ	0xFF1
  7684                           postinc0	equ	0xFEE
  7685                           wreg	equ	0xFE8
  7686                           postdec1	equ	0xFE5
  7687                           fsr1l	equ	0xFE1
  7688                           indf2	equ	0xFDF
  7689                           postinc2	equ	0xFDE
  7690                           postdec2	equ	0xFDD
  7691                           fsr2h	equ	0xFDA
  7692                           fsr2l	equ	0xFD9
  7693                           status	equ	0xFD8
  7694                           
  7695 ;; *************** function _lcd_clear *****************
  7696 ;; Defined at:
  7697 ;;		line 306 in file "../../../lib/lcd44780.c"
  7698 ;; Parameters:    Size  Location     Type
  7699 ;;		None
  7700 ;; Auto vars:     Size  Location     Type
  7701 ;;		None
  7702 ;; Return value:  Size  Location     Type
  7703 ;;		None               void
  7704 ;; Registers used:
  7705 ;;		wreg, status,2, status,0, cstack
  7706 ;; Tracked objects:
  7707 ;;		On entry : 0/0
  7708 ;;		On exit  : 0/0
  7709 ;;		Unchanged: 0/0
  7710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7711 ;;      Params:         0       0       0       0       0       0       0       0       0
  7712 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7713 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7714 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7715 ;;Total ram usage:        1 bytes
  7716 ;; Hardware stack levels used:    1
  7717 ;; Hardware stack levels required when called:    4
  7718 ;; This function calls:
  7719 ;;		_lcd_command
  7720 ;; This function is called by:
  7721 ;;		_calibrate
  7722 ;;		_main
  7723 ;; This function uses a non-reentrant model
  7724 ;;
  7725                           
  7726                           	psect	text45
  7727  004230                     __ptext45:
  7728                           	opt stack 0
  7729  004230                     _lcd_clear:
  7730                           	opt stack 26
  7731                           
  7732                           ;lcd44780.c: 307: lcd_command(0x01);
  7733                           
  7734                           ;incstack = 0
  7735  004230  0E01               	movlw	1
  7736  004232  EC37  F021         	call	_lcd_command
  7737                           
  7738                           ;lcd44780.c: 308: _delay((unsigned long)((2)*(20000000/4000.0)));
  7739  004236  0E0D               	movlw	13
  7740  004238  6E05               	movwf	??_lcd_clear& (0+255),c
  7741  00423A  0EFC               	movlw	252
  7742  00423C                     u2877:
  7743  00423C  2EE8               	decfsz	wreg,f,c
  7744  00423E  D7FE               	goto	u2877
  7745  004240  2E05               	decfsz	??_lcd_clear& (0+255),f,c
  7746  004242  D7FC               	goto	u2877
  7747  004244  0012               	return		;funcret
  7748  004246                     __end_of_lcd_clear:
  7749                           	opt stack 0
  7750                           tosu	equ	0xFFF
  7751                           tosh	equ	0xFFE
  7752                           tosl	equ	0xFFD
  7753                           pclath	equ	0xFFA
  7754                           tblptru	equ	0xFF8
  7755                           tblptrh	equ	0xFF7
  7756                           tblptrl	equ	0xFF6
  7757                           tablat	equ	0xFF5
  7758                           prodh	equ	0xFF4
  7759                           prodl	equ	0xFF3
  7760                           intcon	equ	0xFF2
  7761                           intcon2	equ	0xFF1
  7762                           postinc0	equ	0xFEE
  7763                           wreg	equ	0xFE8
  7764                           postdec1	equ	0xFE5
  7765                           fsr1l	equ	0xFE1
  7766                           indf2	equ	0xFDF
  7767                           postinc2	equ	0xFDE
  7768                           postdec2	equ	0xFDD
  7769                           fsr2h	equ	0xFDA
  7770                           fsr2l	equ	0xFD9
  7771                           status	equ	0xFD8
  7772                           
  7773 ;; *************** function _lcd_command *****************
  7774 ;; Defined at:
  7775 ;;		line 146 in file "../../../lib/lcd44780.c"
  7776 ;; Parameters:    Size  Location     Type
  7777 ;;  value           1    wreg     unsigned char 
  7778 ;; Auto vars:     Size  Location     Type
  7779 ;;  value           1    3[COMRAM] unsigned char 
  7780 ;; Return value:  Size  Location     Type
  7781 ;;		None               void
  7782 ;; Registers used:
  7783 ;;		wreg, status,2, status,0, cstack
  7784 ;; Tracked objects:
  7785 ;;		On entry : 0/0
  7786 ;;		On exit  : 0/0
  7787 ;;		Unchanged: 0/0
  7788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7789 ;;      Params:         0       0       0       0       0       0       0       0       0
  7790 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7791 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7792 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7793 ;;Total ram usage:        1 bytes
  7794 ;; Hardware stack levels used:    1
  7795 ;; Hardware stack levels required when called:    3
  7796 ;; This function calls:
  7797 ;;		_lcd_send
  7798 ;; This function is called by:
  7799 ;;		_lcd_gotoxy
  7800 ;;		_lcd_clear
  7801 ;;		_lcd_begin
  7802 ;; This function uses a non-reentrant model
  7803 ;;
  7804                           
  7805                           	psect	text46
  7806  00426E                     __ptext46:
  7807                           	opt stack 0
  7808  00426E                     _lcd_command:
  7809                           	opt stack 24
  7810                           
  7811                           ;incstack = 0
  7812                           ;lcd_command@value stored from wreg
  7813  00426E  6E04               	movwf	lcd_command@value,c
  7814                           
  7815                           ;lcd44780.c: 147: lcd_send(value, 0);
  7816  004270  6A02               	clrf	lcd_send@mode,c
  7817  004272  5004               	movf	lcd_command@value,w,c
  7818  004274  ECFF  F020         	call	_lcd_send
  7819  004278  0012               	return		;funcret
  7820  00427A                     __end_of_lcd_command:
  7821                           	opt stack 0
  7822                           tosu	equ	0xFFF
  7823                           tosh	equ	0xFFE
  7824                           tosl	equ	0xFFD
  7825                           pclath	equ	0xFFA
  7826                           tblptru	equ	0xFF8
  7827                           tblptrh	equ	0xFF7
  7828                           tblptrl	equ	0xFF6
  7829                           tablat	equ	0xFF5
  7830                           prodh	equ	0xFF4
  7831                           prodl	equ	0xFF3
  7832                           intcon	equ	0xFF2
  7833                           intcon2	equ	0xFF1
  7834                           postinc0	equ	0xFEE
  7835                           wreg	equ	0xFE8
  7836                           postdec1	equ	0xFE5
  7837                           fsr1l	equ	0xFE1
  7838                           indf2	equ	0xFDF
  7839                           postinc2	equ	0xFDE
  7840                           postdec2	equ	0xFDD
  7841                           fsr2h	equ	0xFDA
  7842                           fsr2l	equ	0xFD9
  7843                           status	equ	0xFD8
  7844                           
  7845 ;; *************** function _lcd_send *****************
  7846 ;; Defined at:
  7847 ;;		line 122 in file "../../../lib/lcd44780.c"
  7848 ;; Parameters:    Size  Location     Type
  7849 ;;  value           1    wreg     unsigned char 
  7850 ;;  mode            1    1[COMRAM] unsigned char 
  7851 ;; Auto vars:     Size  Location     Type
  7852 ;;  value           1    2[COMRAM] unsigned char 
  7853 ;; Return value:  Size  Location     Type
  7854 ;;		None               void
  7855 ;; Registers used:
  7856 ;;		wreg, status,2, status,0, cstack
  7857 ;; Tracked objects:
  7858 ;;		On entry : 0/0
  7859 ;;		On exit  : 0/0
  7860 ;;		Unchanged: 0/0
  7861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7862 ;;      Params:         1       0       0       0       0       0       0       0       0
  7863 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7864 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7865 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7866 ;;Total ram usage:        2 bytes
  7867 ;; Hardware stack levels used:    1
  7868 ;; Hardware stack levels required when called:    2
  7869 ;; This function calls:
  7870 ;;		_lcd_write4bits
  7871 ;; This function is called by:
  7872 ;;		_lcd_putch
  7873 ;;		_lcd_command
  7874 ;; This function uses a non-reentrant model
  7875 ;;
  7876                           
  7877                           	psect	text47
  7878  0041FE                     __ptext47:
  7879                           	opt stack 0
  7880  0041FE                     _lcd_send:
  7881                           	opt stack 24
  7882                           
  7883                           ;incstack = 0
  7884                           ;lcd_send@value stored from wreg
  7885  0041FE  6E03               	movwf	lcd_send@value,c
  7886                           
  7887                           ;lcd44780.c: 123: RB2 = mode;
  7888  004200  B002               	btfsc	lcd_send@mode,0,c
  7889  004202  D002               	bra	u1395
  7890  004204  9481               	bcf	3969,2,c	;volatile
  7891  004206  D001               	bra	u1396
  7892  004208                     u1395:
  7893  004208  8481               	bsf	3969,2,c	;volatile
  7894  00420A                     u1396:
  7895                           
  7896                           ;lcd44780.c: 130: {
  7897                           ;lcd44780.c: 131: lcd_write4bits(value >> 4);
  7898  00420A  3803               	swapf	lcd_send@value,w,c
  7899  00420C  0B0F               	andlw	15
  7900  00420E  EC11  F01F         	call	_lcd_write4bits
  7901                           
  7902                           ;lcd44780.c: 132: lcd_write4bits(value);
  7903  004212  5003               	movf	lcd_send@value,w,c
  7904  004214  EC11  F01F         	call	_lcd_write4bits
  7905  004218  0012               	return		;funcret
  7906  00421A                     __end_of_lcd_send:
  7907                           	opt stack 0
  7908                           tosu	equ	0xFFF
  7909                           tosh	equ	0xFFE
  7910                           tosl	equ	0xFFD
  7911                           pclath	equ	0xFFA
  7912                           tblptru	equ	0xFF8
  7913                           tblptrh	equ	0xFF7
  7914                           tblptrl	equ	0xFF6
  7915                           tablat	equ	0xFF5
  7916                           prodh	equ	0xFF4
  7917                           prodl	equ	0xFF3
  7918                           intcon	equ	0xFF2
  7919                           intcon2	equ	0xFF1
  7920                           postinc0	equ	0xFEE
  7921                           wreg	equ	0xFE8
  7922                           postdec1	equ	0xFE5
  7923                           fsr1l	equ	0xFE1
  7924                           indf2	equ	0xFDF
  7925                           postinc2	equ	0xFDE
  7926                           postdec2	equ	0xFDD
  7927                           fsr2h	equ	0xFDA
  7928                           fsr2l	equ	0xFD9
  7929                           status	equ	0xFD8
  7930                           
  7931 ;; *************** function _lcd_write4bits *****************
  7932 ;; Defined at:
  7933 ;;		line 57 in file "../../../lib/lcd44780.c"
  7934 ;; Parameters:    Size  Location     Type
  7935 ;;  value           1    wreg     unsigned char 
  7936 ;; Auto vars:     Size  Location     Type
  7937 ;;  value           1    0[COMRAM] unsigned char 
  7938 ;; Return value:  Size  Location     Type
  7939 ;;		None               void
  7940 ;; Registers used:
  7941 ;;		wreg, status,2, status,0
  7942 ;; Tracked objects:
  7943 ;;		On entry : 0/0
  7944 ;;		On exit  : 0/0
  7945 ;;		Unchanged: 0/0
  7946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7947 ;;      Params:         0       0       0       0       0       0       0       0       0
  7948 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7949 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7950 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7951 ;;Total ram usage:        1 bytes
  7952 ;; Hardware stack levels used:    1
  7953 ;; Hardware stack levels required when called:    1
  7954 ;; This function calls:
  7955 ;;		Nothing
  7956 ;; This function is called by:
  7957 ;;		_lcd_send
  7958 ;;		_lcd_begin
  7959 ;; This function uses a non-reentrant model
  7960 ;;
  7961                           
  7962                           	psect	text48
  7963  003E22                     __ptext48:
  7964                           	opt stack 0
  7965  003E22                     _lcd_write4bits:
  7966                           	opt stack 24
  7967                           
  7968                           ;incstack = 0
  7969                           ;lcd_write4bits@value stored from wreg
  7970  003E22  6E01               	movwf	lcd_write4bits@value,c
  7971                           
  7972                           ;lcd44780.c: 62: RB4 = value & 1;
  7973  003E24  B001               	btfsc	lcd_write4bits@value,0,c
  7974  003E26  D002               	bra	u1355
  7975  003E28  9881               	bcf	3969,4,c	;volatile
  7976  003E2A  D001               	bra	u1356
  7977  003E2C                     u1355:
  7978  003E2C  8881               	bsf	3969,4,c	;volatile
  7979  003E2E                     u1356:
  7980                           
  7981                           ;lcd44780.c: 63: value >>= 1;
  7982  003E2E  90D8               	bcf	status,0,c
  7983  003E30  3201               	rrcf	lcd_write4bits@value,f,c
  7984                           
  7985                           ;lcd44780.c: 64: RB5 = value & 1;
  7986  003E32  B001               	btfsc	lcd_write4bits@value,0,c
  7987  003E34  D002               	bra	u1365
  7988  003E36  9A81               	bcf	3969,5,c	;volatile
  7989  003E38  D001               	bra	u1366
  7990  003E3A                     u1365:
  7991  003E3A  8A81               	bsf	3969,5,c	;volatile
  7992  003E3C                     u1366:
  7993                           
  7994                           ;lcd44780.c: 65: value >>= 1;
  7995  003E3C  90D8               	bcf	status,0,c
  7996  003E3E  3201               	rrcf	lcd_write4bits@value,f,c
  7997                           
  7998                           ;lcd44780.c: 66: RB6 = value & 1;
  7999  003E40  B001               	btfsc	lcd_write4bits@value,0,c
  8000  003E42  D002               	bra	u1375
  8001  003E44  9C81               	bcf	3969,6,c	;volatile
  8002  003E46  D001               	bra	u1376
  8003  003E48                     u1375:
  8004  003E48  8C81               	bsf	3969,6,c	;volatile
  8005  003E4A                     u1376:
  8006                           
  8007                           ;lcd44780.c: 67: value >>= 1;
  8008  003E4A  90D8               	bcf	status,0,c
  8009  003E4C  3201               	rrcf	lcd_write4bits@value,f,c
  8010                           
  8011                           ;lcd44780.c: 68: RB7 = value & 1;
  8012  003E4E  B001               	btfsc	lcd_write4bits@value,0,c
  8013  003E50  D002               	bra	u1385
  8014  003E52  9E81               	bcf	3969,7,c	;volatile
  8015  003E54  D001               	bra	u1386
  8016  003E56                     u1385:
  8017  003E56  8E81               	bsf	3969,7,c	;volatile
  8018  003E58                     u1386:
  8019                           
  8020                           ;lcd44780.c: 74: RB3 = 1; _delay((unsigned long)((4)*(20000000/4000000.0))); RB3 = 0; _d
      +                          elay((unsigned long)((100)*(20000000/4000000.0)));;
  8021  003E58  8681               	bsf	3969,3,c	;volatile
  8022  003E5A  0E06               	movlw	6
  8023  003E5C                     u2887:
  8024  003E5C  2EE8               	decfsz	wreg,f,c
  8025  003E5E  D7FE               	goto	u2887
  8026  003E60  D000               	nop2		;nop
  8027  003E62  9681               	bcf	3969,3,c	;volatile
  8028  003E64  0EA6               	movlw	166
  8029  003E66                     u2897:
  8030  003E66  2EE8               	decfsz	wreg,f,c
  8031  003E68  D7FE               	goto	u2897
  8032  003E6A  D000               	nop2		;nop
  8033  003E6C  0012               	return		;funcret
  8034  003E6E                     __end_of_lcd_write4bits:
  8035                           	opt stack 0
  8036                           tosu	equ	0xFFF
  8037                           tosh	equ	0xFFE
  8038                           tosl	equ	0xFFD
  8039                           pclath	equ	0xFFA
  8040                           tblptru	equ	0xFF8
  8041                           tblptrh	equ	0xFF7
  8042                           tblptrl	equ	0xFF6
  8043                           tablat	equ	0xFF5
  8044                           prodh	equ	0xFF4
  8045                           prodl	equ	0xFF3
  8046                           intcon	equ	0xFF2
  8047                           intcon2	equ	0xFF1
  8048                           postinc0	equ	0xFEE
  8049                           wreg	equ	0xFE8
  8050                           postdec1	equ	0xFE5
  8051                           fsr1l	equ	0xFE1
  8052                           indf2	equ	0xFDF
  8053                           postinc2	equ	0xFDE
  8054                           postdec2	equ	0xFDD
  8055                           fsr2h	equ	0xFDA
  8056                           fsr2l	equ	0xFD9
  8057                           status	equ	0xFD8
  8058                           
  8059 ;; *************** function _delay10ms *****************
  8060 ;; Defined at:
  8061 ;;		line 55 in file "../../../src/LC-meter.c"
  8062 ;; Parameters:    Size  Location     Type
  8063 ;;  period_10ms     1    wreg     unsigned char 
  8064 ;; Auto vars:     Size  Location     Type
  8065 ;;  period_10ms     1    0[COMRAM] unsigned char 
  8066 ;; Return value:  Size  Location     Type
  8067 ;;		None               void
  8068 ;; Registers used:
  8069 ;;		wreg
  8070 ;; Tracked objects:
  8071 ;;		On entry : 0/0
  8072 ;;		On exit  : 0/0
  8073 ;;		Unchanged: 0/0
  8074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8075 ;;      Params:         0       0       0       0       0       0       0       0       0
  8076 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8077 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8078 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8079 ;;Total ram usage:        0 bytes
  8080 ;; Hardware stack levels used:    1
  8081 ;; Hardware stack levels required when called:    1
  8082 ;; This function calls:
  8083 ;;		Nothing
  8084 ;; This function is called by:
  8085 ;;		_calibrate
  8086 ;;		_main
  8087 ;; This function uses a non-reentrant model
  8088 ;;
  8089                           
  8090                           	psect	text49
  8091  00428C                     __ptext49:
  8092                           	opt stack 0
  8093  00428C                     _delay10ms:
  8094                           	opt stack 29
  8095                           
  8096                           ;incstack = 0
  8097  00428C  0012               	return		;funcret
  8098  00428E                     __end_of_delay10ms:
  8099                           	opt stack 0
  8100                           tosu	equ	0xFFF
  8101                           tosh	equ	0xFFE
  8102                           tosl	equ	0xFFD
  8103                           pclath	equ	0xFFA
  8104                           tblptru	equ	0xFF8
  8105                           tblptrh	equ	0xFF7
  8106                           tblptrl	equ	0xFF6
  8107                           tablat	equ	0xFF5
  8108                           prodh	equ	0xFF4
  8109                           prodl	equ	0xFF3
  8110                           intcon	equ	0xFF2
  8111                           intcon2	equ	0xFF1
  8112                           postinc0	equ	0xFEE
  8113                           wreg	equ	0xFE8
  8114                           postdec1	equ	0xFE5
  8115                           fsr1l	equ	0xFE1
  8116                           indf2	equ	0xFDF
  8117                           postinc2	equ	0xFDE
  8118                           postdec2	equ	0xFDD
  8119                           fsr2h	equ	0xFDA
  8120                           fsr2l	equ	0xFD9
  8121                           status	equ	0xFD8
  8122                           
  8123 ;; *************** function ___lwtofl *****************
  8124 ;; Defined at:
  8125 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtofl.c"
  8126 ;; Parameters:    Size  Location     Type
  8127 ;;  c               2   55[COMRAM] unsigned int 
  8128 ;; Auto vars:     Size  Location     Type
  8129 ;;		None
  8130 ;; Return value:  Size  Location     Type
  8131 ;;                  4   55[COMRAM] unsigned int 
  8132 ;; Registers used:
  8133 ;;		wreg, status,2, status,0, cstack
  8134 ;; Tracked objects:
  8135 ;;		On entry : 0/0
  8136 ;;		On exit  : 0/0
  8137 ;;		Unchanged: 0/0
  8138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8139 ;;      Params:         4       0       0       0       0       0       0       0       0
  8140 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8141 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8142 ;;      Totals:         4       0       0       0       0       0       0       0       0
  8143 ;;Total ram usage:        4 bytes
  8144 ;; Hardware stack levels used:    1
  8145 ;; Hardware stack levels required when called:    2
  8146 ;; This function calls:
  8147 ;;		___flpack
  8148 ;; This function is called by:
  8149 ;;		_calibrate
  8150 ;;		_measure_capacitance
  8151 ;;		_measure_inductance
  8152 ;; This function uses a non-reentrant model
  8153 ;;
  8154                           
  8155                           	psect	text50
  8156  00416C                     __ptext50:
  8157                           	opt stack 0
  8158  00416C                     ___lwtofl:
  8159                           	opt stack 27
  8160                           
  8161                           ;incstack = 0
  8162  00416C  C038  F001         	movff	___lwtofl@c,___flpack@arg
  8163  004170  C039  F002         	movff	___lwtofl@c+1,___flpack@arg+1
  8164  004174  6A03               	clrf	___flpack@arg+2,c
  8165  004176  6A04               	clrf	___flpack@arg+3,c
  8166  004178  0E96               	movlw	150
  8167  00417A  6E05               	movwf	___flpack@exp,c
  8168  00417C  0E00               	movlw	0
  8169  00417E  6E06               	movwf	___flpack@sign,c
  8170  004180  EC02  F01C         	call	___flpack	;wreg free
  8171  004184  C001  F038         	movff	?___flpack,?___lwtofl
  8172  004188  C002  F039         	movff	?___flpack+1,?___lwtofl+1
  8173  00418C  C003  F03A         	movff	?___flpack+2,?___lwtofl+2
  8174  004190  C004  F03B         	movff	?___flpack+3,?___lwtofl+3
  8175  004194  0012               	return		;funcret
  8176  004196                     __end_of___lwtofl:
  8177                           	opt stack 0
  8178                           tosu	equ	0xFFF
  8179                           tosh	equ	0xFFE
  8180                           tosl	equ	0xFFD
  8181                           pclath	equ	0xFFA
  8182                           tblptru	equ	0xFF8
  8183                           tblptrh	equ	0xFF7
  8184                           tblptrl	equ	0xFF6
  8185                           tablat	equ	0xFF5
  8186                           prodh	equ	0xFF4
  8187                           prodl	equ	0xFF3
  8188                           intcon	equ	0xFF2
  8189                           intcon2	equ	0xFF1
  8190                           postinc0	equ	0xFEE
  8191                           wreg	equ	0xFE8
  8192                           postdec1	equ	0xFE5
  8193                           fsr1l	equ	0xFE1
  8194                           indf2	equ	0xFDF
  8195                           postinc2	equ	0xFDE
  8196                           postdec2	equ	0xFDD
  8197                           fsr2h	equ	0xFDA
  8198                           fsr2l	equ	0xFD9
  8199                           status	equ	0xFD8
  8200                           
  8201 ;; *************** function ___flpack *****************
  8202 ;; Defined at:
  8203 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\double.c"
  8204 ;; Parameters:    Size  Location     Type
  8205 ;;  arg             4    0[COMRAM] unsigned long 
  8206 ;;  exp             1    4[COMRAM] unsigned char 
  8207 ;;  sign            1    5[COMRAM] unsigned char 
  8208 ;; Auto vars:     Size  Location     Type
  8209 ;;		None
  8210 ;; Return value:  Size  Location     Type
  8211 ;;                  4    0[COMRAM] unsigned char 
  8212 ;; Registers used:
  8213 ;;		wreg, status,2, status,0
  8214 ;; Tracked objects:
  8215 ;;		On entry : 0/0
  8216 ;;		On exit  : 0/0
  8217 ;;		Unchanged: 0/0
  8218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8219 ;;      Params:         6       0       0       0       0       0       0       0       0
  8220 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8221 ;;      Temps:          4       0       0       0       0       0       0       0       0
  8222 ;;      Totals:        10       0       0       0       0       0       0       0       0
  8223 ;;Total ram usage:       10 bytes
  8224 ;; Hardware stack levels used:    1
  8225 ;; Hardware stack levels required when called:    1
  8226 ;; This function calls:
  8227 ;;		Nothing
  8228 ;; This function is called by:
  8229 ;;		___altofl
  8230 ;;		___awtofl
  8231 ;;		___fladd
  8232 ;;		___fldiv
  8233 ;;		___flmul
  8234 ;;		___lltofl
  8235 ;;		___lwtofl
  8236 ;; This function uses a non-reentrant model
  8237 ;;
  8238                           
  8239                           	psect	text51
  8240  003804                     __ptext51:
  8241                           	opt stack 0
  8242  003804                     ___flpack:
  8243                           	opt stack 27
  8244                           
  8245                           ;incstack = 0
  8246  003804  5005               	movf	___flpack@exp,w,c
  8247  003806  E005               	bz	l805
  8248  003808  5001               	movf	___flpack@arg,w,c
  8249  00380A  1002               	iorwf	___flpack@arg+1,w,c
  8250  00380C  1003               	iorwf	___flpack@arg+2,w,c
  8251  00380E  1004               	iorwf	___flpack@arg+3,w,c
  8252  003810  E10B               	bnz	l2404
  8253  003812                     l805:
  8254  003812  6A01               	clrf	?___flpack,c
  8255  003814  6A02               	clrf	?___flpack+1,c
  8256  003816  6A03               	clrf	?___flpack+2,c
  8257  003818  6A04               	clrf	?___flpack+3,c
  8258  00381A  D056               	goto	l806
  8259  00381C                     l2402:
  8260  00381C  2A05               	incf	___flpack@exp,f,c
  8261  00381E  90D8               	bcf	status,0,c
  8262  003820  3204               	rrcf	___flpack@arg+3,f,c
  8263  003822  3203               	rrcf	___flpack@arg+2,f,c
  8264  003824  3202               	rrcf	___flpack@arg+1,f,c
  8265  003826  3201               	rrcf	___flpack@arg,f,c
  8266  003828                     l2404:
  8267  003828  6A07               	clrf	??___flpack& (0+255),c
  8268  00382A  6A08               	clrf	(??___flpack+1)& (0+255),c
  8269  00382C  6A09               	clrf	(??___flpack+2)& (0+255),c
  8270  00382E  0EFE               	movlw	254
  8271  003830  1404               	andwf	___flpack@arg+3,w,c
  8272  003832  6E0A               	movwf	(??___flpack+3)& (0+255),c
  8273  003834  5007               	movf	??___flpack,w,c
  8274  003836  1008               	iorwf	??___flpack+1,w,c
  8275  003838  1009               	iorwf	??___flpack+2,w,c
  8276  00383A  100A               	iorwf	??___flpack+3,w,c
  8277  00383C  E00C               	bz	l810
  8278  00383E  D7EE               	goto	l2402
  8279  003840                     l2406:
  8280  003840  2A05               	incf	___flpack@exp,f,c
  8281  003842  2A01               	incf	___flpack@arg,f,c
  8282  003844  0E00               	movlw	0
  8283  003846  2202               	addwfc	___flpack@arg+1,f,c
  8284  003848  2203               	addwfc	___flpack@arg+2,f,c
  8285  00384A  2204               	addwfc	___flpack@arg+3,f,c
  8286  00384C  90D8               	bcf	status,0,c
  8287  00384E  3204               	rrcf	___flpack@arg+3,f,c
  8288  003850  3203               	rrcf	___flpack@arg+2,f,c
  8289  003852  3202               	rrcf	___flpack@arg+1,f,c
  8290  003854  3201               	rrcf	___flpack@arg,f,c
  8291  003856                     l810:
  8292  003856  6A07               	clrf	??___flpack& (0+255),c
  8293  003858  6A08               	clrf	(??___flpack+1)& (0+255),c
  8294  00385A  6A09               	clrf	(??___flpack+2)& (0+255),c
  8295  00385C  5004               	movf	___flpack@arg+3,w,c
  8296  00385E  6E0A               	movwf	(??___flpack+3)& (0+255),c
  8297  003860  5007               	movf	??___flpack,w,c
  8298  003862  1008               	iorwf	??___flpack+1,w,c
  8299  003864  1009               	iorwf	??___flpack+2,w,c
  8300  003866  100A               	iorwf	??___flpack+3,w,c
  8301  003868  E007               	bz	l2414
  8302  00386A  D7EA               	goto	l2406
  8303  00386C                     l2412:
  8304  00386C  0605               	decf	___flpack@exp,f,c
  8305  00386E  90D8               	bcf	status,0,c
  8306  003870  3601               	rlcf	___flpack@arg,f,c
  8307  003872  3602               	rlcf	___flpack@arg+1,f,c
  8308  003874  3603               	rlcf	___flpack@arg+2,f,c
  8309  003876  3604               	rlcf	___flpack@arg+3,f,c
  8310  003878                     l2414:
  8311  003878  BE03               	btfsc	___flpack@arg+2,7,c
  8312  00387A  D003               	goto	l817
  8313  00387C  0E02               	movlw	2
  8314  00387E  6005               	cpfslt	___flpack@exp,c
  8315  003880  D7F5               	goto	l2412
  8316  003882                     l817:
  8317  003882  B005               	btfsc	___flpack@exp,0,c
  8318  003884  D002               	goto	l818
  8319  003886  0E7F               	movlw	127
  8320  003888  1603               	andwf	___flpack@arg+2,f,c
  8321  00388A                     l818:
  8322  00388A  90D8               	bcf	status,0,c
  8323  00388C  3205               	rrcf	___flpack@exp,f,c
  8324  00388E  C005  F007         	movff	___flpack@exp,??___flpack
  8325  003892  6A08               	clrf	(??___flpack+1)& (0+255),c
  8326  003894  6A09               	clrf	(??___flpack+2)& (0+255),c
  8327  003896  6A0A               	clrf	(??___flpack+3)& (0+255),c
  8328  003898  C007  F00A         	movff	??___flpack,??___flpack+3
  8329  00389C  6A09               	clrf	??___flpack+2,c
  8330  00389E  6A08               	clrf	??___flpack+1,c
  8331  0038A0  6A07               	clrf	??___flpack,c
  8332  0038A2  5007               	movf	??___flpack,w,c
  8333  0038A4  1201               	iorwf	___flpack@arg,f,c
  8334  0038A6  5008               	movf	??___flpack+1,w,c
  8335  0038A8  1202               	iorwf	___flpack@arg+1,f,c
  8336  0038AA  5009               	movf	??___flpack+2,w,c
  8337  0038AC  1203               	iorwf	___flpack@arg+2,f,c
  8338  0038AE  500A               	movf	??___flpack+3,w,c
  8339  0038B0  1204               	iorwf	___flpack@arg+3,f,c
  8340  0038B2  5006               	movf	___flpack@sign,w,c
  8341  0038B4  A4D8               	btfss	status,2,c
  8342  0038B6  8E04               	bsf	___flpack@arg+3,7,c
  8343  0038B8  C001  F001         	movff	___flpack@arg,?___flpack
  8344  0038BC  C002  F002         	movff	___flpack@arg+1,?___flpack+1
  8345  0038C0  C003  F003         	movff	___flpack@arg+2,?___flpack+2
  8346  0038C4  C004  F004         	movff	___flpack@arg+3,?___flpack+3
  8347  0038C8                     l806:
  8348  0038C8  0012               	return		;funcret
  8349  0038CA                     __end_of___flpack:
  8350                           	opt stack 0
  8351                           tosu	equ	0xFFF
  8352                           tosh	equ	0xFFE
  8353                           tosl	equ	0xFFD
  8354                           pclath	equ	0xFFA
  8355                           tblptru	equ	0xFF8
  8356                           tblptrh	equ	0xFF7
  8357                           tblptrl	equ	0xFF6
  8358                           tablat	equ	0xFF5
  8359                           prodh	equ	0xFF4
  8360                           prodl	equ	0xFF3
  8361                           intcon	equ	0xFF2
  8362                           intcon2	equ	0xFF1
  8363                           postinc0	equ	0xFEE
  8364                           wreg	equ	0xFE8
  8365                           postdec1	equ	0xFE5
  8366                           fsr1l	equ	0xFE1
  8367                           indf2	equ	0xFDF
  8368                           postinc2	equ	0xFDE
  8369                           postdec2	equ	0xFDD
  8370                           fsr2h	equ	0xFDA
  8371                           fsr2l	equ	0xFD9
  8372                           status	equ	0xFD8
  8373                           
  8374 ;; *************** function _isr *****************
  8375 ;; Defined at:
  8376 ;;		line 76 in file "../../../src/LC-meter.c"
  8377 ;; Parameters:    Size  Location     Type
  8378 ;;		None
  8379 ;; Auto vars:     Size  Location     Type
  8380 ;;		None
  8381 ;; Return value:  Size  Location     Type
  8382 ;;                  2  442[None  ] int 
  8383 ;; Registers used:
  8384 ;;		wreg, status,2, status,0
  8385 ;; Tracked objects:
  8386 ;;		On entry : 0/0
  8387 ;;		On exit  : 0/0
  8388 ;;		Unchanged: 0/0
  8389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8390 ;;      Params:         0       0       0       0       0       0       0       0       0
  8391 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8392 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8393 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8394 ;;Total ram usage:        0 bytes
  8395 ;; Hardware stack levels used:    1
  8396 ;; This function calls:
  8397 ;;		Nothing
  8398 ;; This function is called by:
  8399 ;;		Interrupt level 2
  8400 ;; This function uses a non-reentrant model
  8401 ;;
  8402                           
  8403                           	psect	intcode
  8404  002008                     __pintcode:
  8405                           	opt stack 0
  8406  002008                     _isr:
  8407                           	opt stack 23
  8408                           
  8409                           ;incstack = 0
  8410  002008  ED27  F01E         	call	int_func,f	;refresh shadow registers
  8411                           tosu	equ	0xFFF
  8412                           tosh	equ	0xFFE
  8413                           tosl	equ	0xFFD
  8414                           pclath	equ	0xFFA
  8415                           tblptru	equ	0xFF8
  8416                           tblptrh	equ	0xFF7
  8417                           tblptrl	equ	0xFF6
  8418                           tablat	equ	0xFF5
  8419                           prodh	equ	0xFF4
  8420                           prodl	equ	0xFF3
  8421                           intcon	equ	0xFF2
  8422                           intcon2	equ	0xFF1
  8423                           postinc0	equ	0xFEE
  8424                           wreg	equ	0xFE8
  8425                           postdec1	equ	0xFE5
  8426                           fsr1l	equ	0xFE1
  8427                           indf2	equ	0xFDF
  8428                           postinc2	equ	0xFDE
  8429                           postdec2	equ	0xFDD
  8430                           fsr2h	equ	0xFDA
  8431                           fsr2l	equ	0xFD9
  8432                           status	equ	0xFD8
  8433                           
  8434                           	psect	intcode_body
  8435  003C4E                     __pintcode_body:
  8436                           	opt stack 23
  8437  003C4E                     int_func:
  8438                           	opt stack 23
  8439  003C4E  0006               	pop		; remove dummy address from shadow register refresh
  8440                           
  8441                           ;LC-meter.c: 78: if(TMR2IF) {
  8442  003C50  A29E               	btfss	3998,1,c	;volatile
  8443  003C52  D035               	goto	i2l447
  8444                           
  8445                           ;LC-meter.c: 80: bres += 256;
  8446  003C54  0100               	movlb	0	; () banked
  8447  003C56  2BDE               	incf	(_bres+1)& (0+255),f,b	;volatile
  8448                           
  8449                           ;LC-meter.c: 82: if(bres >= 5000) {
  8450  003C58  0E88               	movlw	136
  8451  003C5A  5DDD               	subwf	_bres& (0+255),w,b	;volatile
  8452  003C5C  0E13               	movlw	19
  8453  003C5E  59DE               	subwfb	(_bres+1)& (0+255),w,b	;volatile
  8454  003C60  E32D               	bnc	i2l3400
  8455                           
  8456                           ; BSR set to: 0
  8457                           ;LC-meter.c: 83: bres -= 5000;
  8458  003C62  0E88               	movlw	136
  8459  003C64  5FDD               	subwf	_bres& (0+255),f,b	;volatile
  8460  003C66  0E13               	movlw	19
  8461  003C68  5BDE               	subwfb	(_bres+1)& (0+255),f,b	;volatile
  8462                           
  8463                           ; BSR set to: 0
  8464                           ;LC-meter.c: 84: msecpart++;
  8465  003C6A  4BDF               	infsnz	_msecpart& (0+255),f,b	;volatile
  8466  003C6C  2BE0               	incf	(_msecpart+1)& (0+255),f,b	;volatile
  8467                           
  8468                           ; BSR set to: 0
  8469                           ;LC-meter.c: 85: msecs++;
  8470  003C6E  2BB0               	incf	_msecs& (0+255),f,b	;volatile
  8471  003C70  0E00               	movlw	0
  8472  003C72  23B1               	addwfc	(_msecs+1)& (0+255),f,b	;volatile
  8473  003C74  23B2               	addwfc	(_msecs+2)& (0+255),f,b	;volatile
  8474  003C76  23B3               	addwfc	(_msecs+3)& (0+255),f,b	;volatile
  8475                           
  8476                           ; BSR set to: 0
  8477                           ;LC-meter.c: 87: RC1 = (((blink > 200)) == 0);
  8478  003C78  51BD               	movf	(_blink+1)& (0+255),w,b	;volatile
  8479  003C7A  E105               	bnz	i2u264_40
  8480  003C7C  0EC9               	movlw	201
  8481  003C7E  5DBC               	subwf	_blink& (0+255),w,b	;volatile
  8482  003C80  E202               	bc	i2u264_40
  8483  003C82  8282               	bsf	3970,1,c	;volatile
  8484  003C84  D001               	goto	i2l3390
  8485  003C86                     i2u264_40:
  8486  003C86  9282               	bcf	3970,1,c	;volatile
  8487  003C88                     i2l3390:
  8488                           
  8489                           ;LC-meter.c: 88: if(blink >= 400)
  8490  003C88  0E90               	movlw	144
  8491  003C8A  0100               	movlb	0	; () banked
  8492  003C8C  5DBC               	subwf	_blink& (0+255),w,b	;volatile
  8493  003C8E  0E01               	movlw	1
  8494  003C90  59BD               	subwfb	(_blink+1)& (0+255),w,b	;volatile
  8495  003C92  E304               	bnc	i2l3394
  8496                           
  8497                           ; BSR set to: 0
  8498                           ;LC-meter.c: 89: blink -= 400;
  8499  003C94  0E90               	movlw	144
  8500  003C96  5FBC               	subwf	_blink& (0+255),f,b	;volatile
  8501  003C98  0E01               	movlw	1
  8502  003C9A  5BBD               	subwfb	(_blink+1)& (0+255),f,b	;volatile
  8503  003C9C                     i2l3394:
  8504                           
  8505                           ; BSR set to: 0
  8506                           ;LC-meter.c: 90: ++blink;
  8507  003C9C  4BBC               	infsnz	_blink& (0+255),f,b	;volatile
  8508  003C9E  2BBD               	incf	(_blink+1)& (0+255),f,b	;volatile
  8509                           
  8510                           ; BSR set to: 0
  8511                           ;LC-meter.c: 93: if(msecpart >= 1000) {
  8512  003CA0  0EE8               	movlw	232
  8513  003CA2  5DDF               	subwf	_msecpart& (0+255),w,b	;volatile
  8514  003CA4  0E03               	movlw	3
  8515  003CA6  59E0               	subwfb	(_msecpart+1)& (0+255),w,b	;volatile
  8516  003CA8  E309               	bnc	i2l3400
  8517                           
  8518                           ; BSR set to: 0
  8519                           ;LC-meter.c: 95: seconds++;
  8520  003CAA  2BB4               	incf	_seconds& (0+255),f,b	;volatile
  8521  003CAC  0E00               	movlw	0
  8522  003CAE  23B5               	addwfc	(_seconds+1)& (0+255),f,b	;volatile
  8523  003CB0  23B6               	addwfc	(_seconds+2)& (0+255),f,b	;volatile
  8524  003CB2  23B7               	addwfc	(_seconds+3)& (0+255),f,b	;volatile
  8525                           
  8526                           ;LC-meter.c: 96: msecpart -= 1000;
  8527  003CB4  0EE8               	movlw	232
  8528  003CB6  5FDF               	subwf	_msecpart& (0+255),f,b	;volatile
  8529  003CB8  0E03               	movlw	3
  8530  003CBA  5BE0               	subwfb	(_msecpart+1)& (0+255),f,b	;volatile
  8531  003CBC                     i2l3400:
  8532                           
  8533                           ; BSR set to: 0
  8534                           ;LC-meter.c: 97: }
  8535                           ;LC-meter.c: 98: }
  8536                           ;LC-meter.c: 100: TMR2IF = 0;
  8537  003CBC  929E               	bcf	3998,1,c	;volatile
  8538  003CBE                     i2l447:
  8539  003CBE  0011               	retfie		f
  8540  003CC0                     __end_of_isr:
  8541                           	opt stack 0
  8542                           tosu	equ	0xFFF
  8543                           tosh	equ	0xFFE
  8544                           tosl	equ	0xFFD
  8545                           pclath	equ	0xFFA
  8546                           tblptru	equ	0xFF8
  8547                           tblptrh	equ	0xFF7
  8548                           tblptrl	equ	0xFF6
  8549                           tablat	equ	0xFF5
  8550                           prodh	equ	0xFF4
  8551                           prodl	equ	0xFF3
  8552                           intcon	equ	0xFF2
  8553                           intcon2	equ	0xFF1
  8554                           postinc0	equ	0xFEE
  8555                           wreg	equ	0xFE8
  8556                           postdec1	equ	0xFE5
  8557                           fsr1l	equ	0xFE1
  8558                           indf2	equ	0xFDF
  8559                           postinc2	equ	0xFDE
  8560                           postdec2	equ	0xFDD
  8561                           fsr2h	equ	0xFDA
  8562                           fsr2l	equ	0xFD9
  8563                           status	equ	0xFD8
  8564                           tosu	equ	0xFFF
  8565                           tosh	equ	0xFFE
  8566                           tosl	equ	0xFFD
  8567                           pclath	equ	0xFFA
  8568                           tblptru	equ	0xFF8
  8569                           tblptrh	equ	0xFF7
  8570                           tblptrl	equ	0xFF6
  8571                           tablat	equ	0xFF5
  8572                           prodh	equ	0xFF4
  8573                           prodl	equ	0xFF3
  8574                           intcon	equ	0xFF2
  8575                           intcon2	equ	0xFF1
  8576                           postinc0	equ	0xFEE
  8577                           wreg	equ	0xFE8
  8578                           postdec1	equ	0xFE5
  8579                           fsr1l	equ	0xFE1
  8580                           indf2	equ	0xFDF
  8581                           postinc2	equ	0xFDE
  8582                           postdec2	equ	0xFDD
  8583                           fsr2h	equ	0xFDA
  8584                           fsr2l	equ	0xFD9
  8585                           status	equ	0xFD8
  8586                           
  8587                           	psect	rparam
  8588  0000                     tosu	equ	0xFFF
  8589                           tosh	equ	0xFFE
  8590                           tosl	equ	0xFFD
  8591                           pclath	equ	0xFFA
  8592                           tblptru	equ	0xFF8
  8593                           tblptrh	equ	0xFF7
  8594                           tblptrl	equ	0xFF6
  8595                           tablat	equ	0xFF5
  8596                           prodh	equ	0xFF4
  8597                           prodl	equ	0xFF3
  8598                           intcon	equ	0xFF2
  8599                           intcon2	equ	0xFF1
  8600                           postinc0	equ	0xFEE
  8601                           wreg	equ	0xFE8
  8602                           postdec1	equ	0xFE5
  8603                           fsr1l	equ	0xFE1
  8604                           indf2	equ	0xFDF
  8605                           postinc2	equ	0xFDE
  8606                           postdec2	equ	0xFDD
  8607                           fsr2h	equ	0xFDA
  8608                           fsr2l	equ	0xFD9
  8609                           status	equ	0xFD8


Data Sizes:
    Strings     109
    Constant    76
    Data        6
    BSS         49
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     72     135
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(1) Largest target is 40
		 -> exp@coeff(CODE[40]), log@coeff(CODE[36]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(BANK0[2]), 

    uart_puts@s	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_21(CODE[6]), STR_16(CODE[3]), STR_14(CODE[3]), STR_9(CODE[3]), 

    sp__memcpy	PTR void  size(1) Largest target is 19
		 -> buffer.x(BANK0[16]), buffer(BANK0[19]), 

    lcd_puts@string	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_25(CODE[5]), STR_24(CODE[6]), STR_23(CODE[7]), STR_22(CODE[7]), 
		 -> STR_20(CODE[10]), STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[6]), 

    putchar_ptr	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> format_putchar(), output_putch(), lcd_putch(), 

    put_str@s	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_19(CODE[13]), STR_18(CODE[10]), STR_17(CODE[6]), STR_15(CODE[15]), 
		 -> STR_13(CODE[12]), 

    print_unit@units	PTR const unsigned char [8] size(1) Largest target is 3
		 -> STR_8(CODE[3]), STR_7(CODE[3]), STR_6(CODE[3]), STR_5(CODE[3]), 
		 -> STR_4(CODE[3]), STR_3(CODE[3]), STR_2(CODE[3]), STR_1(CODE[2]), 

    S33$op	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    buffer.op	PTR FTN(unsigned char ,)void  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _measure_inductance->___fltol
    _measure_capacitance->___fltol
    _print_unit->_lcd_gotoxy
    _print_reading->_format_number
    _lcd_begin->_lcd_command
    _indicator->_lcd_gotoxy
    _lcd_puts->_lcd_putch
    _ldexp->_eval_poly
    _floor->___altofl
    ___fltol->_log10
    ___altofl->___fltol
    ___flsub->___fladd
    ___fldiv->___flpack
    ___lltofl->___flpack
    _log10->_log
    _log->_eval_poly
    _eval_poly->___fladd
    ___flmul->___fldiv
    ___fladd->___flmul
    ___awtofl->___flpack
    _calibrate->___lwtofl
    _uart_puts->_uart_putch
    _measure_freq->_format_number
    _put_str->_output_putch
    _lcd_gotoxy->_lcd_command
    _format_number->___lwdiv
    _output_putch->_lcd_putch
    _lcd_putch->_lcd_send
    _lcd_clear->_lcd_command
    _lcd_command->_lcd_send
    _lcd_send->_lcd_write4bits
    ___lwtofl->_measure_freq

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_format_double
    _measure_inductance->___fltol
    _measure_capacitance->___fltol
    _format_double->_pow
    _pow->_exp
    _exp->_floor
    _floor->___altofl
    ___altofl->___fltol

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  233163
                          _calibrate
                          _delay10ms
                      _format_double
                          _indicator
                          _lcd_begin
                          _lcd_clear
                         _lcd_gotoxy
                           _lcd_init
                           _lcd_puts
                _measure_capacitance
                 _measure_inductance
                        _timer0_init
                        _timer2_init
                          _uart_init
                          _uart_puts
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            4     4      0      48
                                              0 COMRAM     4     4      0
                        _uart_enable
 ---------------------------------------------------------------------------------
 (2) _uart_enable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer2_init                                          4     4      0     156
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _timer0_init                                         11    11      0     251
                                              0 COMRAM    11    11      0
 ---------------------------------------------------------------------------------
 (1) _measure_inductance                                  55    55      0   37427
                                              6 BANK0     43    43      0
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___lwtofl
                         _lcd_gotoxy
                       _measure_freq
                      _print_reading
                         _print_unit
                            _put_str
 ---------------------------------------------------------------------------------
 (1) _measure_capacitance                                 19    19      0   37082
                                              6 BANK0     19    19      0
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___lwtofl
                         _lcd_gotoxy
                       _measure_freq
                      _print_reading
                         _print_unit
                            _put_str
 ---------------------------------------------------------------------------------
 (2) _print_unit                                           3     3      0    1759
                                             10 COMRAM     2     2      0
                         _lcd_gotoxy
                          _uart_puts
 ---------------------------------------------------------------------------------
 (2) _print_reading                                        6     4      2    6778
                                             50 COMRAM     6     4      2
                            ___lwdiv
                            ___lwmod
                      _format_number
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             3     3      0      46
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcd_begin                                            3     2      1     550
                                              4 COMRAM     3     2      1
                        _lcd_command
                     _lcd_write4bits
 ---------------------------------------------------------------------------------
 (1) _indicator                                            1     1      0    2231
                                             10 COMRAM     1     1      0
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (3) _lcd_puts                                             3     3      0     637
                                              4 COMRAM     3     3      0
                          _lcd_putch
 ---------------------------------------------------------------------------------
 (1) _format_double                                       20    16      4  141474
                                             52 BANK0     20    16      4
                           ___awtofl
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                              _floor
                     _format_putchar *
                          _lcd_putch *
                              _log10
                       _output_putch *
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 21    13      8   79037
                                             31 BANK0     21    13      8
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___lltofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _exp                                                 11     7      4   42113
                                             20 BANK0     11     7      4
                           ___awtofl
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                8     2      6     376
                                             76 COMRAM     8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                               10     6      4    9702
                                             10 BANK0     10     6      4
                           ___altofl
                            ___fladd
                            ___fldiv (ARG)
                             ___flge
                            ___fltol
                              _frexp
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     779
                                             90 COMRAM     4     0      4
                                              0 BANK0      6     6      0
                            ___fldiv (ARG)
                              _log10 (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                               8     0      8    1902
                                              0 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (5) ___altofl                                             5     1      4    2342
                                             94 COMRAM     1     1      0
                                              6 BANK0      4     0      4
                           ___flpack
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    4808
                                             64 COMRAM     8     0      8
                           ___awtofl (ARG)
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flneg                                              4     0      4     237
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             15     7      8    3824
                                             10 COMRAM    15     7      8
                           ___flpack
 ---------------------------------------------------------------------------------
 (3) ___lltofl                                             4     0      4    2273
                                             10 COMRAM     4     0      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) _log10                                                8     4      4   31304
                                             82 COMRAM     8     4      4
                            ___flmul
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  6     2      4   24582
                                             76 COMRAM     6     2      4
                           ___awtofl
                            ___fladd
                            ___flmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     480
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   10893
                                             64 COMRAM    12     5      7
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             28    20      8    6562
                                             25 COMRAM    27    19      8
                           ___awtofl (ARG)
                            ___fldiv (ARG)
                           ___flpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             12     4      8    3769
                                             52 COMRAM    12     4      8
                           ___awtofl (ARG)
                            ___flmul (ARG)
                           ___flpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtofl                                             9     5      4    2585
                                             10 COMRAM     5     1      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (1) _calibrate                                            1     1      0   11195
                                             59 COMRAM     1     1      0
                           ___lwtofl
                          _delay10ms
                          _lcd_clear
                         _lcd_gotoxy
                          _lcd_putch
                       _measure_freq
                            _put_str
                          _uart_puts
 ---------------------------------------------------------------------------------
 (1) _uart_puts                                            1     1      0     187
                                              1 COMRAM     1     1      0
                         _uart_putch
 ---------------------------------------------------------------------------------
 (2) _uart_putch                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _measure_freq                                         5     3      2    5614
                                             50 COMRAM     5     3      2
                      _format_number
                         _lcd_gotoxy
                            _put_str
                     _timer0_read_ps
 ---------------------------------------------------------------------------------
 (3) _timer0_read_ps                                       7     5      2     114
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _put_str                                              4     4      0     569
                                              5 COMRAM     4     4      0
                       _output_putch
 ---------------------------------------------------------------------------------
 (3) _lcd_gotoxy                                           6     5      1    1572
                                              4 COMRAM     6     5      1
                        _lcd_command
 ---------------------------------------------------------------------------------
 (3) _format_number                                       43    39      4    3314
                                              7 COMRAM    43    39      4
                            ___lwdiv
                            ___lwmod
                     _format_putchar *
                          _lcd_putch *
                       _output_putch *
 ---------------------------------------------------------------------------------
 (3) _output_putch                                         1     1      0     329
                                              4 COMRAM     1     1      0
                          _lcd_putch
 ---------------------------------------------------------------------------------
 (4) _lcd_putch                                            1     1      0     307
                                              3 COMRAM     1     1      0
                           _lcd_send
 ---------------------------------------------------------------------------------
 (4) _format_putchar                                       1     1      0       0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     517
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     520
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            1     1      0     307
                                              4 COMRAM     1     1      0
                        _lcd_command
 ---------------------------------------------------------------------------------
 (4) _lcd_command                                          1     1      0     307
                                              3 COMRAM     1     1      0
                           _lcd_send
 ---------------------------------------------------------------------------------
 (5) _lcd_send                                             2     1      1     285
                                              1 COMRAM     2     1      1
                     _lcd_write4bits
 ---------------------------------------------------------------------------------
 (6) _lcd_write4bits                                       1     1      0      91
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _delay10ms                                            1     1      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4    2593
                                             55 COMRAM     4     0      4
                           ___flpack
                       _measure_freq (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6    2187
                                              0 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calibrate
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _format_number
           ___lwdiv
           ___lwmod
           _format_putchar *
           _lcd_putch *
             _lcd_send
               _lcd_write4bits
           _output_putch *
             _lcd_putch
               _lcd_send
                 _lcd_write4bits
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _put_str
           _output_putch
             _lcd_putch
               _lcd_send
                 _lcd_write4bits
         _timer0_read_ps
     _delay10ms
     _lcd_clear
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_putch
       _lcd_send
         _lcd_write4bits
     _measure_freq
       _format_number
         ___lwdiv
         ___lwmod
         _format_putchar *
         _lcd_putch *
           _lcd_send
             _lcd_write4bits
         _output_putch *
           _lcd_putch
             _lcd_send
               _lcd_write4bits
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _put_str
         _output_putch
           _lcd_putch
             _lcd_send
               _lcd_write4bits
       _timer0_read_ps
     _put_str
       _output_putch
         _lcd_putch
           _lcd_send
             _lcd_write4bits
     _uart_puts
       _uart_putch
   _delay10ms
   _format_double
     ___awtofl
       ___flpack
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     _floor
       ___altofl
         ___flpack
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
       ___fladd
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___fldiv (ARG)
         ___flpack
       ___flge (ARG)
       ___fltol (ARG)
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       _frexp (ARG)
     _format_putchar *
     _lcd_putch *
       _lcd_send
         _lcd_write4bits
     _log10 *
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       _log
         ___awtofl
           ___flpack
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _frexp
     _output_putch *
       _lcd_putch
         _lcd_send
           _lcd_write4bits
     _pow *
       ___flge
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       ___flneg
       ___fltol
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       ___lltofl
         ___flpack
       _exp
         ___awtofl
           ___flpack
         ___fldiv
           ___flpack
         ___flge
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         ___flsub
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _floor
           ___altofl
             ___flpack
             ___fltol (ARG)
               ___fldiv (ARG)
                 ___flpack
               _log10 (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _log
                   ___awtofl
                     ___flpack
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___fladd
                       ___awtofl (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                   _frexp
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flge (ARG)
           ___fltol (ARG)
             ___fldiv (ARG)
               ___flpack
             _log10 (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
           _frexp (ARG)
         _ldexp
           _eval_poly (ARG)
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
         _log (ARG)
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
       _log
         ___awtofl
           ___flpack
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _frexp
   _indicator
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_puts
       _lcd_putch
         _lcd_send
           _lcd_write4bits
   _lcd_begin
     _lcd_command
       _lcd_send
         _lcd_write4bits
     _lcd_write4bits
   _lcd_clear
     _lcd_command
       _lcd_send
         _lcd_write4bits
   _lcd_gotoxy
     _lcd_command
       _lcd_send
         _lcd_write4bits
   _lcd_init
   _lcd_puts
     _lcd_putch
       _lcd_send
         _lcd_write4bits
   _measure_capacitance
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _format_number
           ___lwdiv
           ___lwmod
           _format_putchar *
           _lcd_putch *
             _lcd_send
               _lcd_write4bits
           _output_putch *
             _lcd_putch
               _lcd_send
                 _lcd_write4bits
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _put_str
           _output_putch
             _lcd_putch
               _lcd_send
                 _lcd_write4bits
         _timer0_read_ps
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _measure_freq
       _format_number
         ___lwdiv
         ___lwmod
         _format_putchar *
         _lcd_putch *
           _lcd_send
             _lcd_write4bits
         _output_putch *
           _lcd_putch
             _lcd_send
               _lcd_write4bits
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _put_str
         _output_putch
           _lcd_putch
             _lcd_send
               _lcd_write4bits
       _timer0_read_ps
     _print_reading
       ___lwdiv
       ___lwmod
       _format_number
         ___lwdiv
         ___lwmod
         _format_putchar *
         _lcd_putch *
           _lcd_send
             _lcd_write4bits
         _output_putch *
           _lcd_putch
             _lcd_send
               _lcd_write4bits
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _lcd_puts
         _lcd_putch
           _lcd_send
             _lcd_write4bits
     _print_unit
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _uart_puts
         _uart_putch
     _put_str
       _output_putch
         _lcd_putch
           _lcd_send
             _lcd_write4bits
   _measure_inductance
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _format_number
           ___lwdiv
           ___lwmod
           _format_putchar *
           _lcd_putch *
             _lcd_send
               _lcd_write4bits
           _output_putch *
             _lcd_putch
               _lcd_send
                 _lcd_write4bits
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _put_str
           _output_putch
             _lcd_putch
               _lcd_send
                 _lcd_write4bits
         _timer0_read_ps
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _measure_freq
       _format_number
         ___lwdiv
         ___lwmod
         _format_putchar *
         _lcd_putch *
           _lcd_send
             _lcd_write4bits
         _output_putch *
           _lcd_putch
             _lcd_send
               _lcd_write4bits
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _put_str
         _output_putch
           _lcd_putch
             _lcd_send
               _lcd_write4bits
       _timer0_read_ps
     _print_reading
       ___lwdiv
       ___lwmod
       _format_number
         ___lwdiv
         ___lwmod
         _format_putchar *
         _lcd_putch *
           _lcd_send
             _lcd_write4bits
         _output_putch *
           _lcd_putch
             _lcd_send
               _lcd_write4bits
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _lcd_puts
         _lcd_putch
           _lcd_send
             _lcd_write4bits
     _print_unit
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _uart_puts
         _uart_putch
     _put_str
       _output_putch
         _lcd_putch
           _lcd_send
             _lcd_write4bits
   _timer0_init
   _timer2_init
   _uart_init
     _uart_enable
   _uart_puts
     _uart_putch

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     48      87       5       84.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E6      20        0.0%
DATA                 0      0      E6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Sep 15 18:17:54 2019

                ___altofl@sign 005F                   ___fldiv@cntr 0017                   ___fldiv@sign 0019  
                           _F1 00D5                             _F2 00A8                             _F3 00AC  
                           l34 41DC                   ___flpack@arg 0001                   ___flpack@exp 0005  
                  _putchar_ptr 00E5                            l114 3E78                            l125 3DD4  
                          l151 3802                            l350 40F6                            l352 40FA  
                          l533 4264                            l810 3856                            l805 3812  
                          l806 38C8                            l830 3050                            l904 33B2  
                          l817 3882                            l841 30E8                            l905 347A  
                          l818 388A                            l826 3028                            l827 316C  
                          l907 346A                            l933 3BD8                            l917 3AC8  
                          l873 2CCA                            l937 3B60                            l858 3A2A  
                          l866 3E02                            l875 2C94                            l867 3E20  
                          _GIE 007F97                            _RC0 007C10                            _RB2 007C0A  
                          _RC1 007C11                            _RB3 007C0B                            _RC2 007C12  
                          _RB4 007C0C                            _RB5 007C0D                            _RB6 007C0E  
                          _RB7 007C0F                            _RC6 007C16                 lcd_begin@lines 0007  
                          _TX9 007D66                            _exp 28FC                            _log 316E  
                          _isr 2008                            _pow 2E7E                            tosl 000FFD  
                          wreg 000FE8             timer0_read_ps@prev 0005                   ___flmul@sign 0030  
       __end_of_lcd_write4bits 3E6E                  ___flpack@sign 0006                   ___fltol@exp1 0065  
                         l1201 2B0C                           l1131 3EF8                           l1141 3FC2  
                         l1205 2AFC                           l1094 3286                           l3110 3C48  
                         l3102 3C36                           l1175 3004                           l2402 381C  
                         l1179 2FF4                           l2412 386C                           l2404 3828  
                         l3140 2E32                           l3220 2824                           l3108 3C42  
                         l2414 3878                           l2406 3840                           l2504 3140  
                         l2600 3A7C                           l3144 2E52                           l3128 2CFE  
                         l3224 285C                           l3208 2664                           l3080 3BF6  
                         l2514 2B22                           l2610 3AA0                           l3146 2E5A  
                         l3314 366A                           l3306 365C                           l3250 2138  
                         l2700 3FDC                           l2516 2B2C                           l2612 3AA4  
                         l2604 3A8C                           l3068 41D6                           l3340 36F4  
                         l3332 36B8                           l3228 2892                           l2454 3062  
                         l2438 3F1C                           l3094 3C18                           l3086 3C04  
                         l3078 3BF0                           l2800 41AC                           l2480 30B6  
                         l2448 303A                           l2552 3DEC                           l2616 3AB8  
                         l2608 3A94                           l3096 3C1E                           l3088 3C0A  
                         l3186 3636                           l2474 309C                           l2570 3B82  
                         l2634 33BC                           l2722 3B04                           l2820 3740  
                         l2492 30FE                           l2476 30A8                           l2468 307C  
                         l2708 41EC                           l2732 3B1C                           l2804 40B4  
                         l3284 2516                           l3292 2584                           l2486 30D6  
                         l2478 30B0                           l2670 39C2                           l2558 3E1E  
                         l2638 33D8                           l2718 3AFA                           l3294 258A  
                         l3462 3364                           l2840 37CC                           l2496 3114  
                         l2488 30E2                           l2744 38F6                           l2656 399A  
                         l2584 3A38                           l2736 3B28                           l2808 40CC  
                         l3288 254E                           l3464 3368                           l3456 3354  
                         l2754 3EC8                           l2826 3760                           l2746 396E  
                         l2658 39A4                           l2690 3F58                           l2586 3A42  
                         l2914 2948                           l2756 3ED0                           l2836 379C  
                         l2852 400E                           l2940 2AC8                           l2924 29A4  
                         l2908 2914                           l2766 3EEE                           l2758 3ED4  
                         l2782 3FB8                           l2774 3F9A                           l2846 37FE  
                         l2838 37B8                           l2678 39F0                           l2918 2972  
                         l2776 3FA2                           l2792 4064                           l2856 4028  
                         l2778 3FA6                           l2874 3E94                           l2890 317C  
                         l2938 2ABE                           l2796 419A                           l2892 3186  
                         l2980 2EC2                           l2990 2F4C                           l2974 2EAA  
                         l2984 2F18                           l2986 2F22                           ?_exp 0074  
                         ?_log 004D                           ?_isr 0001                           ?_pow 007F  
                         STR_2 20C1                           STR_3 20C7                           STR_4 20C4  
                         STR_5 20B5                           STR_6 20BE                           STR_7 20B8  
                         STR_8 20BB                           STR_9 20A3                           _T0SE 007EAC  
                         u2128 37A0                           u2320 2F18                           _CCal 00D9  
                         u1355 3E2C                           u1356 3E2E                           u2420 3DD2  
                         u1365 3E3A                           u2405 3DAA                           u1366 3E3C  
                         u2158 37D8                           u2406 3DAC                           u1375 3E48  
                         u2415 3DC2                           u1376 3E4A                           u2416 3DC4  
                         u1385 3E56                           u1386 3E58                           u1395 4208  
                         u1396 420A                           u2448 2E18                           u1770 3A60  
                         u1850 33C6                           u2707 368E                           u2468 2E3E  
                         u2717 36A0                           u2807 34CA                           u1775 3A56  
                         u2727 36AC                           u2817 34DA                           u2737 36C6  
                         u2827 34EA                           u2747 36E0                           _PEIE 007F96  
                         u2837 34FA                           u2757 3718                           u2847 350A  
                         u2767 3486                           u2857 351A                           u2777 349A  
                         u2697 3670                           u2867 352A                           u2787 34AA  
                         _RCIE 007CED                           u2877 423C                           u2797 34BA  
                         u2887 3E5C                           u2897 3E66                           _TMR0 000FD6  
                         _TMR2 000FCC                           _TXIF 007CF4                           _TXEN 007D65  
                         _bres 00DD                           _main 3288                           fsr2h 000FDA  
                         fsr1l 000FE1                           indf2 000FDF                           fsr2l 000FD9  
                         exp@x 0074                           log@x 004D          __size_of_output_putch 000A  
                         pow@x 007F                           pow@y 0083                           prodh 000FF4  
                         prodl 000FF3     __end_of_measure_inductance 25EE                           start 200C  
          timer0_read_ps@count 0006              _format_number$262 002E                   ___param_bank 000010  
              _timer0_init$204 0002                _timer0_init$213 0008                _timer0_init$205 0004  
              _timer0_init$206 0006            lcd_write4bits@value 0001                   lcd_send@mode 0002  
                        ??_exp 0060                          ??_log 0051                          ??_isr 0001  
                        ??_pow 0060                  ___fltol@sign1 0064                __end_of___fladd 316E  
                        ?_main 0001                __end_of___fldiv 3A2C                __end_of___flneg 41FE  
                        STR_10 209A                          STR_11 20B1                          STR_12 209C  
                        STR_20 2085                          STR_21 20A0                          STR_13 2079  
                        STR_14 20A3                          STR_22 2099                          STR_15 205D  
                        STR_16 20A3                          STR_25 20AC                          STR_17 20A6  
                        STR_18 208F                          STR_19 206C                __end_of___flmul 2CCC  
              __end_of___flsub 3F8E                __end_of___fltol 3ACA                          _T0CON 000FD5  
              __end_of___lwdiv 3F02                __end_of___lwmod 3FCC                          i2l447 3CBE  
                        _RCSTA 000FAB               lcd_begin@dotsize 0005                          _SPBRG 000FAF  
                        _TRISA 000F92                          _TRISC 000F94                          _SSPEN 007E35  
                        _TXREG 000FAD                          _TXSTA 000FAC                  ___awtofl@sign 000F  
                        _nRBPU 007F8F                          _log10 3D30                          _blink 00BC  
                        _floor 3382                          _ldexp 3ACA                          _frexp 3B62  
                 _output_putch 427A                ?_lcd_write4bits 0001                          _msecs 00B0  
                        pclath 000FFA                          tablat 000FF5                          pow@yi 0090  
              format_number@di 0031                          status 000FD8                __end_of_put_str 4040  
              ??_print_reading 0035                    exp@exponent 007C                    ldexp@newexp 0051  
              __initialization 4078                format_putchar@c 0001                    log@exponent 0051  
                 __end_of_main 3382               format_double@num 0094                  lcd_gotoxy@col 0006  
                lcd_gotoxy@row 0005                  ?_measure_freq 0033         __size_of_format_double 01B2  
                       ??_main 0060                  lcd_send@value 0003            format_double@weight 00A0  
                __activetblptr 000002         __size_of_format_number 00D4            lcd_init@fourbitmode 0001  
                       ?_log10 0053                         ?_floor 006A                         ?_ldexp 004D  
                       ?_frexp 0001               __end_of___altofl 3F4A               __end_of___flpack 38CA  
             __end_of___awtofl 4006               __end_of___lltofl 4142                         i2l3400 3CBC  
                       i2l3390 3C88                         i2l3394 3C9C                         _INTCON 000FF2  
             __end_of___lwtofl 4196                         _TMR0IF 007F92                         _TMR2IE 007CE9  
                       _TMR2IF 007CF1                         _TMR2ON 007E52                         _TRISC0 007CA0  
                       _TRISB2 007C9A                         _TRISC1 007CA1                         _TRISB3 007C9B  
                       _TRISB4 007C9C                         _TRISB5 007C9D                         _TRISB6 007C9E  
                       _TRISB7 007C9F                         _TRISC6 007CA6                         _TRISC7 007CA7  
             __end_of_lcd_init 4114           __size_of_lcd_command 000C               __end_of_lcd_send 421A  
                       ___flge 3DD6               __end_of_lcd_puts 40E4                      ??___fladd 003D  
                    ??___fldiv 0013                      ??___flneg 0005                      ??___flmul 0022  
                    ??___flsub 0049                      ??___fltol 0060                   ?_timer0_init 0001  
               ??_measure_freq 0035                      ??___lwdiv 0005                   ?_timer2_init 0001  
                    ??___lwmod 0005                         _buffer 00C2                         clear_0 407E  
                       log10@x 0053                   ?_uart_enable 0001                         floor@i 006E  
                       floor@x 006A             timer2_init@ps_mode 0002                   __mediumconst 0000  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
             format_number@buf 000E               format_number@pad 000B        _measure_inductance$1260 007F  
      _measure_inductance$1261 0083        _measure_inductance$1262 0087        _measure_inductance$1263 0072  
      _measure_inductance$1264 0076        _measure_inductance$1265 007A        _measure_inductance$1259 006E  
                    ??_put_str 0006                     ___fladd@f1 0035                     ___fladd@f2 0039  
                   ___flge@ff1 0001                     ___flge@ff2 0005               __end_ofexp@coeff 2039  
                _format_double 2CCC               __end_oflog@coeff 205D                     ___altofl@c 0066  
                   ___fldiv@f1 000B                     ___fldiv@f2 000F                     ___fldiv@f3 0013  
                   __accesstop 0060        __end_of__initialization 40A4                     ___flneg@f1 0001  
                _format_number 3730                     ___flmul@f1 001A                     ___flmul@f2 001E  
                 eval_poly@res 0049                  ___rparam_used 000001                     ___flsub@f1 0041  
                   ___flsub@f2 0045                     ___fltol@f1 005B                     ___awtofl@c 000B  
       measure_capacitance@Cin 0075   __size_of_measure_capacitance 030E         measure_capacitance@var 0073  
        lcd_gotoxy@row_offsets 0007                 __pcstackCOMRAM 0001             __size_of_calibrate 00E0  
                 __pidataBANK0 4284                     ___lltofl@c 000B             __size_of_delay10ms 0002  
                __end_of_log10 3D8A                  __end_of_floor 347C                  __end_of_ldexp 3B62  
                __end_of_frexp 3BDA                     ___lwtofl@c 0038             __size_of_lcd_begin 00DE  
           __size_of_lcd_clear 0016                        ??_log10 0057             __size_of_lcd_putch 000E  
                      ??_floor 0060                        ??_ldexp 0053                        ??_frexp 0006  
                   _log10$1266 0057                     __pbssBANK0 00A8                 ?_format_double 0094  
           __size_of_eval_poly 00BC             __size_of_indicator 0020        __size_of_format_putchar 0002  
               ?_format_number 0008                 print_unit@unit 0001                        ?___flge 0001  
                    ?___altofl 0066        __size_of_timer0_read_ps 004A                      ?___flpack 0001  
                    ?___awtofl 000B                      ?___lltofl 000B             _measure_inductance 20CC  
                      _T2CKPS0 007E50                        _T2CKPS1 007E51                      ?___lwtofl 0038  
           __size_of_uart_init 0016               ??_lcd_write4bits 0001             __size_of_uart_puts 0028  
                   _lcd_gotoxy 4040            ?_measure_inductance 0001              __end_of_calibrate 3652  
                    ?_lcd_init 0001                      ?_lcd_send 0002                        _TOUTPS0 007E53  
                      _TOUTPS1 007E54                        _TOUTPS2 007E55              __end_of_delay10ms 428E  
                    ?_lcd_puts 0001           __end_of_measure_freq 3572                     calibrate@i 003C  
                      __Hparam 0000                        __Lparam 0000           ??_measure_inductance 005F  
            __end_of_lcd_begin 3730              __end_of_lcd_clear 4246                __size_of___flge 004C  
                      ___fladd 3006              __end_of_lcd_putch 4262                        ___fldiv 3986  
                      ___flneg 41DE                        ___flmul 2B0E                        ___flsub 3F4A  
                      ___fltol 3A2C                        ___lwdiv 3EB8                        ___lwmod 3F8E  
                 __psmallconst 2010                     ??___altofl 005F                     ??___flpack 0007  
                      __pcinit 4078                     ??___awtofl 000F              __end_of_eval_poly 3986  
                      __ramtop 0800              __end_of_indicator 41DE           __size_of_timer0_init 0074  
                   ??___lltofl 000F                        __ptext0 3288                        __ptext1 421A  
                      __ptext2 4246                        __ptext3 3D8A                        __ptext4 3BDA  
                      __ptext5 20CC                        __ptext6 25EE                        __ptext7 4142  
                      __ptext8 3CC0                        __ptext9 40E4           __size_of_timer2_init 004C  
                   ??___lwtofl 003C                      _T0CONbits 000FD5                   __size_of_exp 0212  
                 __size_of_log 011A                   __size_of_isr 1CB8                   __size_of_pow 0188  
         __size_of_uart_enable 000E                        _seconds 00B4                 lcd_putch@value 0004  
              ??_format_double 0060                        _put_str 4006                     ??_lcd_init 0001  
                   ??_lcd_send 0003                 __pintcode_body 3C4E                     ??_lcd_puts 0005  
         end_of_initialization 40A4                ??_format_number 000C                        exp@sign 007E  
                    _LCD_lines 00C0                   _lcd_init$403 0002                  __Lmediumconst 0000  
                      int_func 3C4E                 lcd_puts@string 0007              __end_of_uart_init 4230  
            __end_of_uart_puts 41BE                        pow@sign 008F  measure_inductance@denominator 006A  
        __end_of_print_reading 3D30              format_number@base 000A                        postdec1 000FE5  
                      postdec2 000FDD                        postinc0 000FEE                        postinc2 000FDE  
                   _uart_putch 4262                     _print_unit 4142            _measure_capacitance 25EE  
                  ?_lcd_gotoxy 0005                    ___fldiv@exp 0018                 _format_putchar 428A  
                  ___flmul@exp 002F                  ??_lcd_command 0004           ?_measure_capacitance 0001  
      measure_capacitance@unit 0072                 format_double@m 00A6         measure_inductance@unit 007E  
               __end_of___flge 3E22                 _timer0_read_ps 3E6E                lcd_gotoxy@F4098 00E1  
                   floor@expon 0072                 format_number@i 0032                 format_number@n 0008  
          start_initialization 4078                     eval_poly@d 0045                     eval_poly@n 0046  
                   eval_poly@x 0041          __size_of_measure_freq 00F6                     ldexp@value 004D  
                  __end_of_exp 2B0E                    __end_of_log 3288                    __end_of_isr 3CC0  
                  __end_of_pow 3006                   _LCD_function 00BF         __end_of_format_putchar 428C  
           format_double@digit 00A4                     frexp@value 0001          ??_measure_capacitance 005F  
       __end_of_timer0_read_ps 3EB8                       ??___flge 0009            __size_of_lcd_gotoxy 0038  
          __end_of_lcd_command 427A                    __pdataBANK0 00E1                   _measure_freq 347C  
                  ?_uart_putch 0001       print_reading@measurement 0033              __size_of___altofl 0048  
            __size_of___flpack 00C6              __size_of___awtofl 003A                    ?_print_unit 0001  
            __size_of___lltofl 002E              __size_of___lwtofl 002A                  __pcstackBANK0 0060  
                ?_output_putch 0001                ?_format_putchar 0001              measure_freq@count 0036  
             lcd_command@value 0004              __size_of_lcd_init 0030              __size_of_lcd_send 001C  
                    _calibrate 3572              __size_of_lcd_puts 0036                      _delay10ms 428C  
                    __pnvBANK0 00D9               ___lwdiv@dividend 0001                ?_timer0_read_ps 0001  
                    __pintcode 2008                       ?___fladd 0035                       ?___fldiv 000B  
                     ?___flneg 0001                       ?___flmul 001A                       ?___flsub 0041  
                     ?___fltol 005B                       ?___lwdiv 0001                       ?___lwmod 0001  
                    _lcd_begin 3652                      _lcd_clear 4230                      _lcd_putch 4254  
                  __smallconst 2010                      _eval_poly 38CA                  output_putch@c 0005  
                    _indicator 41BE                 ??_output_putch 0005               ___lwdiv@quotient 0005  
               __size_of_log10 005A                       ?_put_str 0001                 __size_of_floor 00FA  
               __size_of_ldexp 0098                 __size_of_frexp 0078                     ?_calibrate 0001  
          __size_of_uart_putch 000C                     ?_delay10ms 0001                       _LCD_ctrl 00BE  
                     _LCD_mode 00C1                    _lcd_command 426E            __size_of_print_unit 002A  
                     i2u264_40 3C86    __size_of_measure_inductance 0522                      _uart_init 421A  
                ??_timer0_init 0001                  ??_timer2_init 0001                      _uart_puts 4196  
            indicator@indicate 000B                     ?_lcd_begin 0005                     ?_lcd_clear 0001  
                   uart_puts@s 0002                  ??_uart_enable 0001                     ?_lcd_putch 0001  
                   ?_eval_poly 0041                     ?_indicator 0001                      lcd_puts@i 0006  
                 ??_lcd_gotoxy 0006          measure_inductance@Lin 008D          measure_inductance@var 008B  
                    copy_data0 4098          __end_of_format_double 2E7E           format_number@padchar 0030  
      __size_of_lcd_write4bits 004C          __end_of_format_number 3804                      frexp@eptr 0005  
                     __Hrparam 0000                       __Lrparam 0000                     ?_uart_init 0001  
                   ?_uart_puts 0001             __end_of_lcd_gotoxy 4078               __size_of___fladd 0168  
             __size_of___fldiv 00A6               __size_of___flneg 0020               __size_of___flmul 01BE  
             __size_of___flsub 0044               __size_of___fltol 009E                       ___altofl 3F02  
                     ___flpack 3804               __size_of___lwdiv 004A               __size_of___lwmod 003E  
                     ___awtofl 3FCC                       ___lltofl 4114                  timer2_init@ps 0003  
                     ___lwtofl 416C            __end_of_timer0_init 3C4E                       _exp$1269 0078  
          __end_of_timer2_init 3DD6                ___lwdiv@divisor 0003                ___lwdiv@counter 0007  
       __size_of_print_reading 0070           timer0_init@prescaler 000A            __end_of_uart_enable 4254  
                     __ptext10 3652                       __ptext11 41BE                       __ptext20 3F02  
                     __ptext12 40AE                       __ptext21 3F4A                       __ptext13 2CCC  
                     __ptext30 3006                       __ptext22 41DE                       __ptext14 2E7E  
                     __ptext31 3FCC                       __ptext23 3986                       __ptext15 28FC  
                     __ptext40 428A                       __ptext32 3572                       __ptext24 4114  
                     __ptext16 3ACA                       __ptext41 4254                       __ptext33 4196  
                     __ptext25 3D30                       __ptext17 3382                       __ptext50 416C  
                     __ptext42 427A                       __ptext34 4262                       __ptext26 316E  
                     __ptext18 3A2C                       __ptext51 3804                       __ptext43 3F8E  
                     __ptext35 347C                       __ptext27 3B62                       __ptext19 3DD6  
                     __ptext44 3EB8                       __ptext36 3E6E                       __ptext28 38CA  
                     __ptext45 4230                       __ptext37 4006                       __ptext29 2B0E  
                     __ptext46 426E                       __ptext38 4040                       __ptext47 41FE  
                     __ptext39 3730                       __ptext48 3E22                       __ptext49 428C  
                     _lcd_init 40E4                       _lcd_send 41FE                       _pow$1267 0087  
                     _pow$1268 008B                       _lcd_puts 40AE               __size_of_put_str 003A  
                  ??_calibrate 003C                  __size_of_main 00FA                    ??_delay10ms 0001  
                     _msecpart 00DF                       _timer1of 00B8           __end_of_output_putch 4284  
                  ??_lcd_begin 0006                    ??_lcd_clear 0005                   ??_uart_putch 0001  
                  ??_lcd_putch 0004                       exp@coeff 2011          ___flmul@f3_as_product 0031  
                     log@coeff 2039    measure_inductance@numerator 0066               ??_format_putchar 0001  
                 ??_print_unit 000B                    ??_eval_poly 0048                    ??_indicator 000B  
           _print_reading$1250 0035             _print_reading$1251 0037                       intlevel2 0000  
  __end_of_measure_capacitance 28FC               ___lwmod@dividend 0001               ??_timer0_read_ps 0003  
           __end_of_uart_putch 426E             __end_of_print_unit 416C                  _print_reading 3CC0  
                  ??_uart_init 0001                    ??_uart_puts 0002           delay10ms@period_10ms 0001  
                  _timer0_init 3BDA                    _timer2_init 3D8A             _format_double$1254 0098  
           _format_double$1255 009C       _measure_capacitance$1256 0066       _measure_capacitance$1257 006A  
     _measure_capacitance$1258 006E                       put_str@i 0007                       put_str@s 0009  
                  _uart_enable 4246             timer0_init@ps_mode 000B                ___lwmod@divisor 0003  
              ___lwmod@counter 0005                 uart_putch@byte 0001                 _lcd_write4bits 3E22  
                 ___fladd@exp1 0040                   ___fladd@exp2 003F                   ___fladd@sign 003E  
                 ?_lcd_command 0001                 ?_print_reading 0033  
