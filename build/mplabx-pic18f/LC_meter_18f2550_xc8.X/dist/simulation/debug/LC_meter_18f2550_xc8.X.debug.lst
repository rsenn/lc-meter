

Microchip Technology PIC18 PRO Macro Assembler V1.34 build -361300703 
                                                                                               Tue Sep 17 03:07:47 2019

Microchip Technology Omniscient Code Generator (PRO mode) build 201502162209
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    68                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    69                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    70                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    71  0000                     
    72                           	psect	idataBANK0
    73  00440A                     __pidataBANK0:
    74                           	opt stack 0
    75                           
    76                           ;initializer for lcd_gotoxy@F4120
    77  00440A  00                 	db	0
    78  00440B  40                 	db	64
    79  00440C  14                 	db	20
    80  00440D  54                 	db	84
    81                           
    82                           	psect	smallconst
    83  002018                     __psmallconst:
    84                           	opt stack 0
    85  002018  00                 	db	0
    86  002019                     exp@coeff:
    87                           	opt stack 0
    88  002019  0000               	dw	0
    89  00201B  3F80               	dw	16256
    90  00201D  7218               	dw	29208
    91  00201F  3F31               	dw	16177
    92  002021  FDF0               	dw	65008
    93  002023  3E75               	dw	15989
    94  002025  5847               	dw	22599
    95  002027  3D63               	dw	15715
    96  002029  9558               	dw	38232
    97  00202B  3C1D               	dw	15389
    98  00202D  C482               	dw	50306
    99  00202F  3AAE               	dw	15022
   100  002031  78A8               	dw	30888
   101  002033  3921               	dw	14625
   102  002035  93EF               	dw	37871
   103  002037  3780               	dw	14208
   104  002039  92A0               	dw	37536
   105  00203B  35A7               	dw	13735
   106  00203D  5646               	dw	22086
   107  00203F  3415               	dw	13333
   108  002041                     __end_ofexp@coeff:
   109                           	opt stack 0
   110  002041                     log@coeff:
   111                           	opt stack 0
   112  002041  0000               	dw	0
   113  002043  0000               	dw	0
   114  002045  FFC4               	dw	65476
   115  002047  3F7F               	dw	16255
   116  002049  EF80               	dw	61312
   117  00204B  BEFF               	dw	48895
   118  00204D  E190               	dw	57744
   119  00204F  3EA9               	dw	16041
   120  002051  82EC               	dw	33516
   121  002053  BE76               	dw	48758
   122  002055  AD82               	dw	44418
   123  002057  3E2B               	dw	15915
   124  002059  3C0E               	dw	15374
   125  00205B  BDC3               	dw	48579
   126  00205D  D187               	dw	53639
   127  00205F  3D13               	dw	15635
   128  002061  7841               	dw	30785
   129  002063  BBD3               	dw	48083
   130  002065                     __end_oflog@coeff:
   131                           	opt stack 0
   132  002065                     STR_15:
   133  002065  70                 	db	112	;'p'
   134  002066  6C                 	db	108	;'l'
   135  002067  65                 	db	101	;'e'
   136  002068  61                 	db	97	;'a'
   137  002069  73                 	db	115	;'s'
   138  00206A  65                 	db	101	;'e'
   139  00206B  20                 	db	32
   140  00206C  77                 	db	119	;'w'
   141  00206D  61                 	db	97	;'a'
   142  00206E  69                 	db	105	;'i'
   143  00206F  74                 	db	116	;'t'
   144  002070  2E                 	db	46
   145  002071  2E                 	db	46
   146  002072  2E                 	db	46
   147  002073  00                 	db	0
   148  002074                     STR_27:
   149  002074  49                 	db	73	;'I'
   150  002075  6E                 	db	110	;'n'
   151  002076  64                 	db	100	;'d'
   152  002077  75                 	db	117	;'u'
   153  002078  63                 	db	99	;'c'
   154  002079  74                 	db	116	;'t'
   155  00207A  69                 	db	105	;'i'
   156  00207B  76                 	db	118	;'v'
   157  00207C  69                 	db	105	;'i'
   158  00207D  74                 	db	116	;'t'
   159  00207E  79                 	db	121	;'y'
   160  00207F  20                 	db	32
   161  002080  00                 	db	0
   162  002081                     STR_13:
   163  002081  43                 	db	67	;'C'
   164  002082  61                 	db	97	;'a'
   165  002083  6C                 	db	108	;'l'
   166  002084  69                 	db	105	;'i'
   167  002085  62                 	db	98	;'b'
   168  002086  72                 	db	114	;'r'
   169  002087  61                 	db	97	;'a'
   170  002088  74                 	db	116	;'t'
   171  002089  69                 	db	105	;'i'
   172  00208A  6E                 	db	110	;'n'
   173  00208B  67                 	db	103	;'g'
   174  00208C  00                 	db	0
   175  00208D                     STR_28:
   176  00208D  4C                 	db	76	;'L'
   177  00208E  43                 	db	67	;'C'
   178  00208F  2D                 	db	45
   179  002090  6D                 	db	109	;'m'
   180  002091  65                 	db	101	;'e'
   181  002092  74                 	db	116	;'t'
   182  002093  65                 	db	101	;'e'
   183  002094  72                 	db	114	;'r'
   184  002095  20                 	db	32
   185  002096  00                 	db	0
   186  002097                     STR_18:
   187  002097  43                 	db	67	;'C'
   188  002098  61                 	db	97	;'a'
   189  002099  70                 	db	112	;'p'
   190  00209A  61                 	db	97	;'a'
   191  00209B  63                 	db	99	;'c'
   192  00209C  69                 	db	105	;'i'
   193  00209D  74                 	db	116	;'t'
   194  00209E  79                 	db	121	;'y'
   195  00209F  20                 	db	32
   196  0020A0  00                 	db	0
   197  0020A1                     STR_23:
   198  0020A1  0D                 	db	13
   199  0020A2  0A                 	db	10
   200  0020A3  43                 	db	67	;'C'
   201  0020A4  43                 	db	67	;'C'
   202  0020A5  61                 	db	97	;'a'
   203  0020A6  6C                 	db	108	;'l'
   204  0020A7  3D                 	db	61	;'='
   205  0020A8  00                 	db	0
   206  0020A9                     STR_30:
   207  0020A9  20                 	db	32
   208  0020AA  20                 	db	32
   209  0020AB  20                 	db	32
   210  0020AC  20                 	db	32
   211  0020AD  20                 	db	32
   212  0020AE  20                 	db	32
   213  0020AF  00                 	db	0
   214  0020B0                     STR_29:
   215  0020B0  2E                 	db	46
   216  0020B1  2E                 	db	46
   217  0020B2  2E                 	db	46
   218  0020B3  0D                 	db	13
   219  0020B4  0A                 	db	10
   220  0020B5  00                 	db	0
   221  0020B6                     STR_20:
   222  0020B6  0D                 	db	13
   223  0020B7  0A                 	db	10
   224  0020B8  46                 	db	70	;'F'
   225  0020B9  31                 	db	49	;'1'
   226  0020BA  3D                 	db	61	;'='
   227  0020BB  00                 	db	0
   228  0020BC                     STR_21:
   229  0020BC  0D                 	db	13
   230  0020BD  0A                 	db	10
   231  0020BE  46                 	db	70	;'F'
   232  0020BF  32                 	db	50	;'2'
   233  0020C0  3D                 	db	61	;'='
   234  0020C1  00                 	db	0
   235  0020C2                     STR_22:
   236  0020C2  0D                 	db	13
   237  0020C3  0A                 	db	10
   238  0020C4  46                 	db	70	;'F'
   239  0020C5  33                 	db	51	;'3'
   240  0020C6  3D                 	db	61	;'='
   241  0020C7  00                 	db	0
   242  0020C8                     STR_17:
   243  0020C8  46                 	db	70	;'F'
   244  0020C9  72                 	db	114	;'r'
   245  0020CA  65                 	db	101	;'e'
   246  0020CB  71                 	db	113	;'q'
   247  0020CC  3D                 	db	61	;'='
   248  0020CD  00                 	db	0
   249  0020CE  52                 	db	82	;'R'
   250  0020CF  43                 	db	67	;'C'
   251  0020D0  34                 	db	52	;'4'
   252  0020D1  3D                 	db	61	;'='
   253  0020D2  00                 	db	0
   254  0020D3                     STR_25:
   255  0020D3  43                 	db	67	;'C'
   256  0020D4  69                 	db	105	;'i'
   257  0020D5  6E                 	db	110	;'n'
   258  0020D6  3D                 	db	61	;'='
   259  0020D7  00                 	db	0
   260  0020D8                     STR_19:
   261  0020D8  76                 	db	118	;'v'
   262  0020D9  61                 	db	97	;'a'
   263  0020DA  72                 	db	114	;'r'
   264  0020DB  3D                 	db	61	;'='
   265  0020DC  00                 	db	0
   266  0020DD                     STR_11:
   267  0020DD  2D                 	db	45
   268  0020DE  2A                 	db	42
   269  0020DF  2D                 	db	45
   270  0020E0  00                 	db	0
   271  0020E1  6D                 	db	109	;'m'
   272  0020E2  46                 	db	70	;'F'
   273  0020E3  00                 	db	0
   274  0020E4  6E                 	db	110	;'n'
   275  0020E5  46                 	db	70	;'F'
   276  0020E6  00                 	db	0
   277  0020E7  70                 	db	112	;'p'
   278  0020E8  46                 	db	70	;'F'
   279  0020E9  00                 	db	0
   280  0020EA  75                 	db	117	;'u'
   281  0020EB  46                 	db	70	;'F'
   282  0020EC  00                 	db	0
   283  0020ED                     STR_2:
   284  0020ED  6D                 	db	109	;'m'
   285  0020EE  48                 	db	72	;'H'
   286  0020EF  00                 	db	0
   287  0020F0  6E                 	db	110	;'n'
   288  0020F1  48                 	db	72	;'H'
   289  0020F2  00                 	db	0
   290  0020F3  75                 	db	117	;'u'
   291  0020F4  48                 	db	72	;'H'
   292  0020F5  00                 	db	0
   293  0000                     
   294                           ; #config settings
   295  0020F6  00                 	db	0	; dummy byte at the end
   296  0000                     
   297                           	psect	nvBANK0
   298  0000E2                     __pnvBANK0:
   299                           	opt stack 0
   300  0000E2                     _CCal:
   301                           	opt stack 0
   302  0000E2                     	ds	4
   303  0000E6                     _bres:
   304                           	opt stack 0
   305  0000E6                     	ds	2
   306  0000E8                     _msecpart:
   307                           	opt stack 0
   308  0000E8                     	ds	2
   309  0000                     _TMR0	set	4054
   310  0000                     _INTCON	set	4082
   311  0000                     _INTCON2	set	4081
   312  0000                     _LATB	set	3978
   313  0000                     _LATC	set	3979
   314  0000                     _PIE1	set	3997
   315  0000                     _PIR1	set	3998
   316  0000                     _PORTC	set	3970
   317  0000                     _RCREG	set	4014
   318  0000                     _SPBRG	set	4015
   319  0000                     _T0CON	set	4053
   320  0000                     _T2CON	set	4042
   321  0000                     _TMR2	set	4044
   322  0000                     _TRISA	set	3986
   323  0000                     _TRISB	set	3987
   324  0000                     _TRISC	set	3988
   325  0000                     _TXREG	set	4013
   326  0000                     _BRGH	set	32098
   327  0000                     _CREN	set	32092
   328  0000                     _GIE	set	32663
   329  0000                     _LATC7	set	31839
   330  0000                     _PEIE	set	32662
   331  0000                     _RCIF	set	31989
   332  0000                     _RX9	set	32094
   333  0000                     _SPEN	set	32095
   334  0000                     _SYNC	set	32100
   335  0000                     _TRISC6	set	31910
   336  0000                     _TX9	set	32102
   337  0000                     _TXEN	set	32101
   338  0000                     _TXIE	set	31980
   339  0000                     _TXIF	set	31988
   340                           
   341                           	psect	cinit
   342  003EC0                     __pcinit:
   343                           	opt stack 0
   344  003EC0                     start_initialization:
   345                           	opt stack 0
   346  003EC0                     __initialization:
   347                           	opt stack 0
   348                           
   349                           ; Clear objects allocated to BANK1 (32 bytes)
   350  003EC0  EE01  F000         	lfsr	0,__pbssBANK1
   351  003EC4  0E20               	movlw	32
   352  003EC6                     clear_0:
   353  003EC6  6AEE               	clrf	postinc0,c
   354  003EC8  06E8               	decf	wreg,f,c
   355  003ECA  E1FD               	bnz	clear_0
   356                           
   357                           ; Clear objects allocated to BANK0 (49 bytes)
   358  003ECC  EE00  F0B1         	lfsr	0,__pbssBANK0
   359  003ED0  0E31               	movlw	49
   360  003ED2                     clear_1:
   361  003ED2  6AEE               	clrf	postinc0,c
   362  003ED4  06E8               	decf	wreg,f,c
   363  003ED6  E1FD               	bnz	clear_1
   364                           
   365                           ; Clear objects allocated to COMRAM (3 bytes)
   366  003ED8  6A5C               	clrf	(__pbssCOMRAM+2)& (0+255),c
   367  003EDA  6A5B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   368  003EDC  6A5A               	clrf	__pbssCOMRAM& (0+255),c
   369                           
   370                           ; Initialize objects allocated to BANK0 (4 bytes)
   371                           ; load TBLPTR registers with __pidataBANK0
   372  003EDE  0E0A               	movlw	low __pidataBANK0
   373  003EE0  6EF6               	movwf	tblptrl,c
   374  003EE2  0E44               	movlw	high __pidataBANK0
   375  003EE4  6EF7               	movwf	tblptrh,c
   376  003EE6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   377  003EE8  6EF8               	movwf	tblptru,c
   378  003EEA  EE00  F0EA         	lfsr	0,__pdataBANK0
   379  003EEE  EE10 F004          	lfsr	1,4
   380  003EF2                     copy_data0:
   381  003EF2  0009               	tblrd		*+
   382  003EF4  CFF5 FFEE          	movff	tablat,postinc0
   383  003EF8  50E5               	movf	postdec1,w,c
   384  003EFA  50E1               	movf	fsr1l,w,c
   385  003EFC  E1FA               	bnz	copy_data0
   386  003EFE                     end_of_initialization:
   387                           	opt stack 0
   388  003EFE                     __end_of__initialization:
   389                           	opt stack 0
   390  003EFE  0E00               	movlw	low (__Lsmallconst shr (0+16))
   391  003F00  6EF8               	movwf	tblptru,c
   392  003F02  0E20               	movlw	high __Lsmallconst
   393  003F04  6EF7               	movwf	tblptrh,c
   394  003F06  0100               	movlb	0
   395  003F08  EFCD  F01A         	goto	_main	;jump to C main() function
   396                           tblptru	equ	0xFF8
   397                           tblptrh	equ	0xFF7
   398                           tblptrl	equ	0xFF6
   399                           tablat	equ	0xFF5
   400                           postinc0	equ	0xFEE
   401                           wreg	equ	0xFE8
   402                           postdec1	equ	0xFE5
   403                           fsr1l	equ	0xFE1
   404                           
   405                           	psect	bssCOMRAM
   406  00005A                     __pbssCOMRAM:
   407                           	opt stack 0
   408  00005A                     _LCD_function:
   409                           	opt stack 0
   410  00005A                     	ds	1
   411  00005B                     _txiptr:
   412                           	opt stack 0
   413  00005B                     	ds	1
   414  00005C                     _txoptr:
   415                           	opt stack 0
   416  00005C                     	ds	1
   417                           tblptru	equ	0xFF8
   418                           tblptrh	equ	0xFF7
   419                           tblptrl	equ	0xFF6
   420                           tablat	equ	0xFF5
   421                           postinc0	equ	0xFEE
   422                           wreg	equ	0xFE8
   423                           postdec1	equ	0xFE5
   424                           fsr1l	equ	0xFE1
   425                           
   426                           	psect	bssBANK0
   427  0000B1                     __pbssBANK0:
   428                           	opt stack 0
   429  0000B1                     _F2:
   430                           	opt stack 0
   431  0000B1                     	ds	4
   432  0000B5                     _F3:
   433                           	opt stack 0
   434  0000B5                     	ds	4
   435  0000B9                     _msecs:
   436                           	opt stack 0
   437  0000B9                     	ds	4
   438  0000BD                     _seconds:
   439                           	opt stack 0
   440  0000BD                     	ds	4
   441  0000C1                     _timer1of:
   442                           	opt stack 0
   443  0000C1                     	ds	4
   444  0000C5                     _blink:
   445                           	opt stack 0
   446  0000C5                     	ds	2
   447  0000C7                     _LCD_ctrl:
   448                           	opt stack 0
   449  0000C7                     	ds	1
   450  0000C8                     _LCD_lines:
   451                           	opt stack 0
   452  0000C8                     	ds	1
   453  0000C9                     _LCD_mode:
   454                           	opt stack 0
   455  0000C9                     	ds	1
   456  0000CA                     _rxiptr:
   457                           	opt stack 0
   458  0000CA                     	ds	1
   459  0000CB                     _rxoptr:
   460                           	opt stack 0
   461  0000CB                     	ds	1
   462  0000CC                     _ser_tmp:
   463                           	opt stack 0
   464  0000CC                     	ds	1
   465  0000CD                     _buffer:
   466                           	opt stack 0
   467  0000CD                     	ds	17
   468  0000DE                     _F1:
   469                           	opt stack 0
   470  0000DE                     	ds	4
   471                           tblptru	equ	0xFF8
   472                           tblptrh	equ	0xFF7
   473                           tblptrl	equ	0xFF6
   474                           tablat	equ	0xFF5
   475                           postinc0	equ	0xFEE
   476                           wreg	equ	0xFE8
   477                           postdec1	equ	0xFE5
   478                           fsr1l	equ	0xFE1
   479                           
   480                           	psect	dataBANK0
   481  0000EA                     __pdataBANK0:
   482                           	opt stack 0
   483  0000EA                     lcd_gotoxy@F4120:
   484                           	opt stack 0
   485  0000EA                     	ds	4
   486                           tblptru	equ	0xFF8
   487                           tblptrh	equ	0xFF7
   488                           tblptrl	equ	0xFF6
   489                           tablat	equ	0xFF5
   490                           postinc0	equ	0xFEE
   491                           wreg	equ	0xFE8
   492                           postdec1	equ	0xFE5
   493                           fsr1l	equ	0xFE1
   494                           
   495                           	psect	bssBANK1
   496  000100                     __pbssBANK1:
   497                           	opt stack 0
   498  000100                     _rxfifo:
   499                           	opt stack 0
   500  000100                     	ds	16
   501  000110                     _txfifo:
   502                           	opt stack 0
   503  000110                     	ds	16
   504                           tblptru	equ	0xFF8
   505                           tblptrh	equ	0xFF7
   506                           tblptrl	equ	0xFF6
   507                           tablat	equ	0xFF5
   508                           postinc0	equ	0xFEE
   509                           wreg	equ	0xFE8
   510                           postdec1	equ	0xFE5
   511                           fsr1l	equ	0xFE1
   512                           
   513                           	psect	cstackBANK1
   514  000120                     __pcstackBANK1:
   515                           	opt stack 0
   516  000120                     _measure_capacitance$1115:
   517                           	opt stack 0
   518                           
   519                           ; 4 bytes @ 0x0
   520  000120                     	ds	4
   521  000124                     _measure_capacitance$1116:
   522                           	opt stack 0
   523                           
   524                           ; 4 bytes @ 0x4
   525  000124                     	ds	4
   526  000128                     _measure_capacitance$1117:
   527                           	opt stack 0
   528                           
   529                           ; 4 bytes @ 0x8
   530  000128                     	ds	4
   531  00012C                     measure_capacitance@unit:
   532                           	opt stack 0
   533                           
   534                           ; 1 bytes @ 0xC
   535  00012C                     	ds	1
   536  00012D                     measure_capacitance@var:
   537                           	opt stack 0
   538                           
   539                           ; 2 bytes @ 0xD
   540  00012D                     	ds	2
   541  00012F                     measure_capacitance@Cin:
   542                           	opt stack 0
   543                           
   544                           ; 4 bytes @ 0xF
   545  00012F                     	ds	4
   546                           tblptru	equ	0xFF8
   547                           tblptrh	equ	0xFF7
   548                           tblptrl	equ	0xFF6
   549                           tablat	equ	0xFF5
   550                           postinc0	equ	0xFEE
   551                           wreg	equ	0xFE8
   552                           postdec1	equ	0xFE5
   553                           fsr1l	equ	0xFE1
   554                           
   555                           	psect	cstackBANK0
   556  000060                     __pcstackBANK0:
   557                           	opt stack 0
   558  000060                     _log10$1129:
   559                           	opt stack 0
   560                           
   561                           ; 4 bytes @ 0x0
   562  000060                     	ds	4
   563  000064                     ?___fltol:
   564                           	opt stack 0
   565  000064                     ___fltol@f1:
   566                           	opt stack 0
   567                           
   568                           ; 4 bytes @ 0x4
   569  000064                     	ds	4
   570  000068                     ??___fltol:
   571                           
   572                           ; 0 bytes @ 0x8
   573  000068                     	ds	4
   574  00006C                     ___fltol@sign1:
   575                           	opt stack 0
   576                           
   577                           ; 1 bytes @ 0xC
   578  00006C                     	ds	1
   579  00006D                     ___fltol@exp1:
   580                           	opt stack 0
   581                           
   582                           ; 1 bytes @ 0xD
   583  00006D                     	ds	1
   584  00006E                     ?___altofl:
   585                           	opt stack 0
   586  00006E                     measure_inductance@numerator:
   587                           	opt stack 0
   588  00006E                     ___altofl@c:
   589                           	opt stack 0
   590                           
   591                           ; 4 bytes @ 0xE
   592  00006E                     	ds	4
   593  000072                     ___altofl@sign:
   594                           	opt stack 0
   595  000072                     measure_inductance@denominator:
   596                           	opt stack 0
   597                           
   598                           ; 4 bytes @ 0x12
   599  000072                     	ds	1
   600  000073                     ?_floor:
   601                           	opt stack 0
   602  000073                     floor@x:
   603                           	opt stack 0
   604                           
   605                           ; 4 bytes @ 0x13
   606  000073                     	ds	3
   607  000076                     _measure_inductance$1118:
   608                           	opt stack 0
   609                           
   610                           ; 4 bytes @ 0x16
   611  000076                     	ds	1
   612  000077                     floor@i:
   613                           	opt stack 0
   614                           
   615                           ; 4 bytes @ 0x17
   616  000077                     	ds	3
   617  00007A                     _measure_inductance$1122:
   618                           	opt stack 0
   619                           
   620                           ; 4 bytes @ 0x1A
   621  00007A                     	ds	1
   622  00007B                     floor@expon:
   623                           	opt stack 0
   624                           
   625                           ; 2 bytes @ 0x1B
   626  00007B                     	ds	2
   627  00007D                     ?_exp:
   628                           	opt stack 0
   629  00007D                     exp@x:
   630                           	opt stack 0
   631                           
   632                           ; 4 bytes @ 0x1D
   633  00007D                     	ds	1
   634  00007E                     _measure_inductance$1123:
   635                           	opt stack 0
   636                           
   637                           ; 4 bytes @ 0x1E
   638  00007E                     	ds	3
   639  000081                     _exp$1132:
   640                           	opt stack 0
   641                           
   642                           ; 4 bytes @ 0x21
   643  000081                     	ds	1
   644  000082                     _measure_inductance$1124:
   645                           	opt stack 0
   646                           
   647                           ; 4 bytes @ 0x22
   648  000082                     	ds	3
   649  000085                     exp@exponent:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x25
   653  000085                     	ds	1
   654  000086                     measure_inductance@unit:
   655                           	opt stack 0
   656                           
   657                           ; 1 bytes @ 0x26
   658  000086                     	ds	1
   659  000087                     exp@sign:
   660                           	opt stack 0
   661  000087                     _measure_inductance$1119:
   662                           	opt stack 0
   663                           
   664                           ; 4 bytes @ 0x27
   665  000087                     	ds	1
   666  000088                     ?_pow:
   667                           	opt stack 0
   668  000088                     pow@x:
   669                           	opt stack 0
   670                           
   671                           ; 4 bytes @ 0x28
   672  000088                     	ds	3
   673  00008B                     _measure_inductance$1120:
   674                           	opt stack 0
   675                           
   676                           ; 4 bytes @ 0x2B
   677  00008B                     	ds	1
   678  00008C                     pow@y:
   679                           	opt stack 0
   680                           
   681                           ; 4 bytes @ 0x2C
   682  00008C                     	ds	3
   683  00008F                     _measure_inductance$1121:
   684                           	opt stack 0
   685                           
   686                           ; 4 bytes @ 0x2F
   687  00008F                     	ds	1
   688  000090                     _pow$1130:
   689                           	opt stack 0
   690                           
   691                           ; 4 bytes @ 0x30
   692  000090                     	ds	3
   693  000093                     measure_inductance@var:
   694                           	opt stack 0
   695                           
   696                           ; 2 bytes @ 0x33
   697  000093                     	ds	1
   698  000094                     _pow$1131:
   699                           	opt stack 0
   700                           
   701                           ; 4 bytes @ 0x34
   702  000094                     	ds	1
   703  000095                     measure_inductance@Lin:
   704                           	opt stack 0
   705                           
   706                           ; 4 bytes @ 0x35
   707  000095                     	ds	3
   708  000098                     pow@sign:
   709                           	opt stack 0
   710                           
   711                           ; 1 bytes @ 0x38
   712  000098                     	ds	1
   713  000099                     pow@yi:
   714                           	opt stack 0
   715                           
   716                           ; 4 bytes @ 0x39
   717  000099                     	ds	4
   718  00009D                     format_double@num:
   719                           	opt stack 0
   720                           
   721                           ; 4 bytes @ 0x3D
   722  00009D                     	ds	4
   723  0000A1                     _format_double$1127:
   724                           	opt stack 0
   725                           
   726                           ; 4 bytes @ 0x41
   727  0000A1                     	ds	4
   728  0000A5                     _format_double$1128:
   729                           	opt stack 0
   730                           
   731                           ; 4 bytes @ 0x45
   732  0000A5                     	ds	4
   733  0000A9                     format_double@weight:
   734                           	opt stack 0
   735                           
   736                           ; 4 bytes @ 0x49
   737  0000A9                     	ds	4
   738  0000AD                     format_double@digit:
   739                           	opt stack 0
   740                           
   741                           ; 2 bytes @ 0x4D
   742  0000AD                     	ds	2
   743  0000AF                     format_double@m:
   744                           	opt stack 0
   745                           
   746                           ; 2 bytes @ 0x4F
   747  0000AF                     	ds	2
   748                           tblptru	equ	0xFF8
   749                           tblptrh	equ	0xFF7
   750                           tblptrl	equ	0xFF6
   751                           tablat	equ	0xFF5
   752                           postinc0	equ	0xFEE
   753                           wreg	equ	0xFE8
   754                           postdec1	equ	0xFE5
   755                           fsr1l	equ	0xFE1
   756                           
   757                           	psect	cstackCOMRAM
   758  000001                     __pcstackCOMRAM:
   759                           	opt stack 0
   760  000001                     ??_global_int:
   761  000001                     
   762                           ; 1 bytes @ 0x0
   763  000001                     	ds	3
   764  000004                     ??_timer2_init:
   765  000004                     ??_buffer_putch:
   766  000004                     ?_timer0_read_ps:
   767                           	opt stack 0
   768  000004                     ?___lwdiv:
   769                           	opt stack 0
   770  000004                     ?___lwmod:
   771                           	opt stack 0
   772  000004                     ?___flpack:
   773                           	opt stack 0
   774  000004                     ?_frexp:
   775                           	opt stack 0
   776  000004                     ?___flneg:
   777                           	opt stack 0
   778  000004                     lcd_write4bits@value:
   779                           	opt stack 0
   780  000004                     lcd_init@fourbitmode:
   781                           	opt stack 0
   782  000004                     ser_putch@c:
   783                           	opt stack 0
   784  000004                     _timer0_init$282:
   785                           	opt stack 0
   786  000004                     ___lwdiv@dividend:
   787                           	opt stack 0
   788  000004                     ___lwmod@dividend:
   789                           	opt stack 0
   790  000004                     ___flpack@arg:
   791                           	opt stack 0
   792  000004                     ___flge@ff1:
   793                           	opt stack 0
   794  000004                     ___flneg@f1:
   795                           	opt stack 0
   796  000004                     frexp@value:
   797                           	opt stack 0
   798                           
   799                           ; 4 bytes @ 0x3
   800  000004                     	ds	1
   801  000005                     timer2_init@ps:
   802                           	opt stack 0
   803  000005                     lcd_send@mode:
   804                           	opt stack 0
   805  000005                     ser_puts@s:
   806                           	opt stack 0
   807  000005                     _lcd_init$342:
   808                           	opt stack 0
   809                           
   810                           ; 2 bytes @ 0x4
   811  000005                     	ds	1
   812  000006                     ??_timer0_read_ps:
   813  000006                     lcd_send@value:
   814                           	opt stack 0
   815  000006                     buffer_putch@ch:
   816                           	opt stack 0
   817  000006                     _timer0_init$283:
   818                           	opt stack 0
   819  000006                     ___lwdiv@divisor:
   820                           	opt stack 0
   821  000006                     ___lwmod@divisor:
   822                           	opt stack 0
   823                           
   824                           ; 2 bytes @ 0x5
   825  000006                     	ds	1
   826  000007                     ??_lcd_puts:
   827  000007                     output_putch@c:
   828                           	opt stack 0
   829  000007                     timer2_init@ps_mode:
   830                           	opt stack 0
   831  000007                     lcd_command@value:
   832                           	opt stack 0
   833                           
   834                           ; 1 bytes @ 0x6
   835  000007                     	ds	1
   836  000008                     ??_lcd_clear:
   837  000008                     ??_put_str:
   838  000008                     timer0_read_ps@prev:
   839                           	opt stack 0
   840  000008                     lcd_gotoxy@row:
   841                           	opt stack 0
   842  000008                     lcd_puts@i:
   843                           	opt stack 0
   844  000008                     lcd_begin@dotsize:
   845                           	opt stack 0
   846  000008                     ___flpack@exp:
   847                           	opt stack 0
   848  000008                     frexp@eptr:
   849                           	opt stack 0
   850  000008                     ___lwdiv@counter:
   851                           	opt stack 0
   852  000008                     ___lwmod@counter:
   853                           	opt stack 0
   854  000008                     _timer0_init$284:
   855                           	opt stack 0
   856  000008                     ___flge@ff2:
   857                           	opt stack 0
   858                           
   859                           ; 4 bytes @ 0x7
   860  000008                     	ds	1
   861  000009                     ??_lcd_begin:
   862  000009                     ??_frexp:
   863  000009                     lcd_gotoxy@col:
   864                           	opt stack 0
   865  000009                     lcd_puts@string:
   866                           	opt stack 0
   867  000009                     ___flpack@sign:
   868                           	opt stack 0
   869  000009                     put_str@i:
   870                           	opt stack 0
   871  000009                     timer0_read_ps@count:
   872                           	opt stack 0
   873  000009                     ___lwdiv@quotient:
   874                           	opt stack 0
   875                           
   876                           ; 2 bytes @ 0x8
   877  000009                     	ds	1
   878  00000A                     ??___flpack:
   879  00000A                     lcd_begin@lines:
   880                           	opt stack 0
   881  00000A                     _timer0_init$285:
   882                           	opt stack 0
   883  00000A                     lcd_gotoxy@row_offsets:
   884                           	opt stack 0
   885                           
   886                           ; 4 bytes @ 0x9
   887  00000A                     	ds	1
   888  00000B                     put_str@s:
   889                           	opt stack 0
   890  00000B                     format_number@n:
   891                           	opt stack 0
   892                           
   893                           ; 2 bytes @ 0xA
   894  00000B                     	ds	1
   895  00000C                     timer0_init@prescaler:
   896                           	opt stack 0
   897                           
   898                           ; 1 bytes @ 0xB
   899  00000C                     	ds	1
   900  00000D                     timer0_init@ps_mode:
   901                           	opt stack 0
   902  00000D                     format_number@base:
   903                           	opt stack 0
   904                           
   905                           ; 1 bytes @ 0xC
   906  00000D                     	ds	1
   907  00000E                     ??_print_unit:
   908  00000E                     ?___fldiv:
   909                           	opt stack 0
   910  00000E                     ?___awtofl:
   911                           	opt stack 0
   912  00000E                     ?___lltofl:
   913                           	opt stack 0
   914  00000E                     indicator@indicate:
   915                           	opt stack 0
   916  00000E                     format_number@pad:
   917                           	opt stack 0
   918  00000E                     ___awtofl@c:
   919                           	opt stack 0
   920  00000E                     ___fldiv@f1:
   921                           	opt stack 0
   922  00000E                     ___lltofl@c:
   923                           	opt stack 0
   924                           
   925                           ; 4 bytes @ 0xD
   926  00000E                     	ds	1
   927  00000F                     ??_format_number:
   928                           
   929                           ; 0 bytes @ 0xE
   930  00000F                     	ds	2
   931  000011                     format_number@buf:
   932                           	opt stack 0
   933                           
   934                           ; 32 bytes @ 0x10
   935  000011                     	ds	1
   936  000012                     ___awtofl@sign:
   937                           	opt stack 0
   938  000012                     ___fldiv@f2:
   939                           	opt stack 0
   940                           
   941                           ; 4 bytes @ 0x11
   942  000012                     	ds	4
   943  000016                     ___fldiv@f3:
   944                           	opt stack 0
   945                           
   946                           ; 4 bytes @ 0x15
   947  000016                     	ds	4
   948  00001A                     ___fldiv@cntr:
   949                           	opt stack 0
   950                           
   951                           ; 1 bytes @ 0x19
   952  00001A                     	ds	1
   953  00001B                     ___fldiv@exp:
   954                           	opt stack 0
   955                           
   956                           ; 1 bytes @ 0x1A
   957  00001B                     	ds	1
   958  00001C                     ___fldiv@sign:
   959                           	opt stack 0
   960                           
   961                           ; 1 bytes @ 0x1B
   962  00001C                     	ds	1
   963  00001D                     ?___flmul:
   964                           	opt stack 0
   965  00001D                     ___flmul@f1:
   966                           	opt stack 0
   967                           
   968                           ; 4 bytes @ 0x1C
   969  00001D                     	ds	4
   970  000021                     ___flmul@f2:
   971                           	opt stack 0
   972                           
   973                           ; 4 bytes @ 0x20
   974  000021                     	ds	4
   975  000025                     ??___flmul:
   976                           
   977                           ; 0 bytes @ 0x24
   978  000025                     	ds	12
   979  000031                     _format_number$374:
   980                           	opt stack 0
   981                           
   982                           ; 2 bytes @ 0x30
   983  000031                     	ds	1
   984  000032                     ___flmul@exp:
   985                           	opt stack 0
   986                           
   987                           ; 1 bytes @ 0x31
   988  000032                     	ds	1
   989  000033                     format_number@padchar:
   990                           	opt stack 0
   991  000033                     ___flmul@sign:
   992                           	opt stack 0
   993                           
   994                           ; 1 bytes @ 0x32
   995  000033                     	ds	1
   996  000034                     format_number@di:
   997                           	opt stack 0
   998  000034                     ___flmul@f3_as_product:
   999                           	opt stack 0
  1000                           
  1001                           ; 4 bytes @ 0x33
  1002  000034                     	ds	1
  1003  000035                     format_number@i:
  1004                           	opt stack 0
  1005                           
  1006                           ; 1 bytes @ 0x34
  1007  000035                     	ds	1
  1008  000036                     ?_measure_freq:
  1009                           	opt stack 0
  1010  000036                     print_reading@measurement:
  1011                           	opt stack 0
  1012  000036                     format_xint32@x:
  1013                           	opt stack 0
  1014                           
  1015                           ; 4 bytes @ 0x35
  1016  000036                     	ds	2
  1017  000038                     ??_measure_freq:
  1018  000038                     ?___fladd:
  1019                           	opt stack 0
  1020  000038                     _print_reading$1113:
  1021                           	opt stack 0
  1022  000038                     ___fladd@f1:
  1023                           	opt stack 0
  1024                           
  1025                           ; 4 bytes @ 0x37
  1026  000038                     	ds	1
  1027  000039                     measure_freq@count:
  1028                           	opt stack 0
  1029                           
  1030                           ; 2 bytes @ 0x38
  1031  000039                     	ds	1
  1032  00003A                     _print_reading$1114:
  1033                           	opt stack 0
  1034                           
  1035                           ; 2 bytes @ 0x39
  1036  00003A                     	ds	1
  1037  00003B                     ?___lwtofl:
  1038                           	opt stack 0
  1039  00003B                     ___lwtofl@c:
  1040                           	opt stack 0
  1041                           
  1042                           ; 2 bytes @ 0x3A
  1043  00003B                     	ds	1
  1044  00003C                     ___fladd@f2:
  1045                           	opt stack 0
  1046                           
  1047                           ; 4 bytes @ 0x3B
  1048  00003C                     	ds	3
  1049  00003F                     calibrate@i:
  1050                           	opt stack 0
  1051                           
  1052                           ; 1 bytes @ 0x3E
  1053  00003F                     	ds	1
  1054  000040                     ??___fladd:
  1055                           
  1056                           ; 0 bytes @ 0x3F
  1057  000040                     	ds	1
  1058  000041                     ___fladd@sign:
  1059                           	opt stack 0
  1060                           
  1061                           ; 1 bytes @ 0x40
  1062  000041                     	ds	1
  1063  000042                     ___fladd@exp2:
  1064                           	opt stack 0
  1065                           
  1066                           ; 1 bytes @ 0x41
  1067  000042                     	ds	1
  1068  000043                     ___fladd@exp1:
  1069                           	opt stack 0
  1070                           
  1071                           ; 1 bytes @ 0x42
  1072  000043                     	ds	1
  1073  000044                     ?___flsub:
  1074                           	opt stack 0
  1075  000044                     ?_eval_poly:
  1076                           	opt stack 0
  1077  000044                     ___flsub@f1:
  1078                           	opt stack 0
  1079  000044                     eval_poly@x:
  1080                           	opt stack 0
  1081                           
  1082                           ; 4 bytes @ 0x43
  1083  000044                     	ds	4
  1084  000048                     eval_poly@d:
  1085                           	opt stack 0
  1086  000048                     ___flsub@f2:
  1087                           	opt stack 0
  1088                           
  1089                           ; 4 bytes @ 0x47
  1090  000048                     	ds	1
  1091  000049                     eval_poly@n:
  1092                           	opt stack 0
  1093                           
  1094                           ; 2 bytes @ 0x48
  1095  000049                     	ds	2
  1096  00004B                     ??_eval_poly:
  1097                           
  1098                           ; 0 bytes @ 0x4A
  1099  00004B                     	ds	1
  1100  00004C                     eval_poly@res:
  1101                           	opt stack 0
  1102                           
  1103                           ; 4 bytes @ 0x4B
  1104  00004C                     	ds	4
  1105  000050                     ?_ldexp:
  1106                           	opt stack 0
  1107  000050                     ?_log:
  1108                           	opt stack 0
  1109  000050                     ldexp@value:
  1110                           	opt stack 0
  1111  000050                     log@x:
  1112                           	opt stack 0
  1113                           
  1114                           ; 4 bytes @ 0x4F
  1115  000050                     	ds	4
  1116  000054                     ldexp@newexp:
  1117                           	opt stack 0
  1118  000054                     log@exponent:
  1119                           	opt stack 0
  1120                           
  1121                           ; 2 bytes @ 0x53
  1122  000054                     	ds	2
  1123  000056                     ??_ldexp:
  1124  000056                     ?_log10:
  1125                           	opt stack 0
  1126  000056                     log10@x:
  1127                           	opt stack 0
  1128                           
  1129                           ; 4 bytes @ 0x55
  1130  000056                     	ds	4
  1131  00005A                     tblptru	equ	0xFF8
  1132                           tblptrh	equ	0xFF7
  1133                           tblptrl	equ	0xFF6
  1134                           tablat	equ	0xFF5
  1135                           postinc0	equ	0xFEE
  1136                           wreg	equ	0xFE8
  1137                           postdec1	equ	0xFE5
  1138                           fsr1l	equ	0xFE1
  1139                           
  1140                           ; 0 bytes @ 0x59
  1141 ;;
  1142 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1143 ;;
  1144 ;; *************** function _main *****************
  1145 ;; Defined at:
  1146 ;;		line 115 in file "../../../LC-meter.c"
  1147 ;; Parameters:    Size  Location     Type
  1148 ;;		None
  1149 ;; Auto vars:     Size  Location     Type
  1150 ;;		None
  1151 ;; Return value:  Size  Location     Type
  1152 ;;		None               void
  1153 ;; Registers used:
  1154 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1155 ;; Tracked objects:
  1156 ;;		On entry : 0/0
  1157 ;;		On exit  : 0/0
  1158 ;;		Unchanged: 0/0
  1159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1160 ;;      Params:         0       0       0       0       0       0       0       0       0
  1161 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1162 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1163 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1164 ;;Total ram usage:        0 bytes
  1165 ;; Hardware stack levels required when called:    8
  1166 ;; This function calls:
  1167 ;;		_calibrate
  1168 ;;		_delay10ms
  1169 ;;		_format_double
  1170 ;;		_indicator
  1171 ;;		_lcd_begin
  1172 ;;		_lcd_clear
  1173 ;;		_lcd_gotoxy
  1174 ;;		_lcd_init
  1175 ;;		_lcd_puts
  1176 ;;		_measure_capacitance
  1177 ;;		_measure_inductance
  1178 ;;		_ser_init
  1179 ;;		_ser_puts
  1180 ;;		_timer0_init
  1181 ;;		_timer2_init
  1182 ;; This function is called by:
  1183 ;;		Startup code after reset
  1184 ;; This function uses a non-reentrant model
  1185 ;;
  1186                           
  1187                           	psect	text0
  1188  00359A                     __ptext0:
  1189                           	opt stack 0
  1190  00359A                     _main:
  1191                           	opt stack 23
  1192                           
  1193                           ;LC-meter.c: 116: bres = msecpart = msecs = seconds = 0;
  1194                           
  1195                           ;incstack = 0
  1196  00359A  0100               	movlb	0	; () banked
  1197  00359C  6BBD               	clrf	_seconds& (0+255),b	;volatile
  1198  00359E  6BBE               	clrf	(_seconds+1)& (0+255),b	;volatile
  1199  0035A0  6BBF               	clrf	(_seconds+2)& (0+255),b	;volatile
  1200  0035A2  6BC0               	clrf	(_seconds+3)& (0+255),b	;volatile
  1201  0035A4  C0BD  F0B9         	movff	_seconds,_msecs	;volatile
  1202  0035A8  C0BE  F0BA         	movff	_seconds+1,_msecs+1	;volatile
  1203  0035AC  C0BF  F0BB         	movff	_seconds+2,_msecs+2	;volatile
  1204  0035B0  C0C0  F0BC         	movff	_seconds+3,_msecs+3	;volatile
  1205  0035B4  C0B9  F0E8         	movff	_msecs,_msecpart	;volatile
  1206  0035B8  C0BA  F0E9         	movff	_msecs+1,_msecpart+1	;volatile
  1207  0035BC  C0E8  F0E6         	movff	_msecpart,_bres	;volatile
  1208  0035C0  C0E9  F0E7         	movff	_msecpart+1,_bres+1	;volatile
  1209                           
  1210                           ;LC-meter.c: 118: CCal = 1000;
  1211  0035C4  6BE2               	clrf	_CCal& (0+255),b
  1212  0035C6  6BE3               	clrf	(_CCal+1)& (0+255),b
  1213  0035C8  0E7A               	movlw	122
  1214  0035CA  6FE4               	movwf	(_CCal+2)& (0+255),b
  1215  0035CC  0E44               	movlw	68
  1216  0035CE  6FE5               	movwf	(_CCal+3)& (0+255),b
  1217                           
  1218                           ;LC-meter.c: 127: TRISA = 0b11001111;
  1219  0035D0  0ECF               	movlw	207
  1220  0035D2  6E92               	movwf	3986,c	;volatile
  1221                           
  1222                           ; BSR set to: 0
  1223                           ;LC-meter.c: 130: timer0_init(0b100 | 0x40);
  1224  0035D4  0E44               	movlw	68
  1225  0035D6  ECFC  F01E         	call	_timer0_init
  1226                           
  1227                           ; BSR set to: 0
  1228                           ;LC-meter.c: 146: INTCON2 &= ~0b10000000;
  1229  0035DA  9EF1               	bcf	intcon2,7,c	;volatile
  1230                           
  1231                           ; BSR set to: 0
  1232                           ;LC-meter.c: 152: TRISC &= ~0b00000010;
  1233  0035DC  9294               	bcf	3988,1,c	;volatile
  1234                           
  1235                           ; BSR set to: 0
  1236                           ;LC-meter.c: 153: LATC &= ~0b00000010; LATC |= (!!(1)) << 1;;
  1237  0035DE  928B               	bcf	3979,1,c	;volatile
  1238                           
  1239                           ; BSR set to: 0
  1240  0035E0  828B               	bsf	3979,1,c	;volatile
  1241                           
  1242                           ; BSR set to: 0
  1243                           ;LC-meter.c: 165: timer2_init(0b000 | 0x80);
  1244  0035E2  0E80               	movlw	128
  1245  0035E4  EC05  F021         	call	_timer2_init
  1246                           
  1247                           ;LC-meter.c: 170: TRISC &= 0b10110101;
  1248  0035E8  0EB5               	movlw	181
  1249  0035EA  1694               	andwf	3988,f,c	;volatile
  1250                           
  1251                           ;LC-meter.c: 182: lcd_init(1);
  1252  0035EC  0E01               	movlw	1
  1253  0035EE  EC33  F021         	call	_lcd_init
  1254                           
  1255                           ; BSR set to: 0
  1256                           ;LC-meter.c: 183: lcd_begin(2, 1);
  1257  0035F2  0E01               	movlw	1
  1258  0035F4  6E08               	movwf	lcd_begin@dotsize,c
  1259  0035F6  0E02               	movlw	2
  1260  0035F8  ECB6  F01B         	call	_lcd_begin
  1261                           
  1262                           ;LC-meter.c: 186: TRISC |= 0b1;
  1263  0035FC  8094               	bsf	3988,0,c	;volatile
  1264                           
  1265                           ;LC-meter.c: 187: TRISC &= ~(1 << 5);
  1266  0035FE  9A94               	bcf	3988,5,c	;volatile
  1267                           
  1268                           ;LC-meter.c: 189: LATC &= ~0b100;
  1269  003600  948B               	bcf	3979,2,c	;volatile
  1270                           
  1271                           ;LC-meter.c: 190: delay10ms(50);
  1272  003602  0E32               	movlw	50
  1273  003604  EC07  F022         	call	_delay10ms
  1274                           
  1275                           ;LC-meter.c: 191: LATC |= 0b100;
  1276  003608  848B               	bsf	3979,2,c	;volatile
  1277                           
  1278                           ;LC-meter.c: 192: delay10ms(50);
  1279  00360A  0E32               	movlw	50
  1280  00360C  EC07  F022         	call	_delay10ms
  1281                           
  1282                           ;LC-meter.c: 193: LATC &= ~0b100;
  1283  003610  948B               	bcf	3979,2,c	;volatile
  1284                           
  1285                           ;LC-meter.c: 194: delay10ms(50);
  1286  003612  0E32               	movlw	50
  1287  003614  EC07  F022         	call	_delay10ms
  1288                           
  1289                           ;LC-meter.c: 195: LATC |= 0b100;
  1290  003618  848B               	bsf	3979,2,c	;volatile
  1291                           
  1292                           ;LC-meter.c: 196: delay10ms(50);
  1293  00361A  0E32               	movlw	50
  1294  00361C  EC07  F022         	call	_delay10ms
  1295                           
  1296                           ;LC-meter.c: 197: LATC &= ~0b100;
  1297  003620  948B               	bcf	3979,2,c	;volatile
  1298                           
  1299                           ;LC-meter.c: 200: ser_init();
  1300  003622  EC87  F021         	call	_ser_init	;wreg free
  1301                           
  1302                           ; BSR set to: 0
  1303                           ;LC-meter.c: 207: INTCON |= 0xc0;
  1304  003626  0EC0               	movlw	192
  1305  003628  12F2               	iorwf	intcon,f,c	;volatile
  1306                           
  1307                           ; BSR set to: 0
  1308                           ;LC-meter.c: 217: lcd_gotoxy(0, 0);
  1309  00362A  0E00               	movlw	0
  1310  00362C  6A08               	clrf	lcd_gotoxy@row,c
  1311  00362E  EC9C  F020         	call	_lcd_gotoxy
  1312                           
  1313                           ;LC-meter.c: 219: lcd_puts("LC-meter ");
  1314  003632  0E8D               	movlw	STR_28& (0+255)
  1315  003634  ECD3  F020         	call	_lcd_puts
  1316                           
  1317                           ;LC-meter.c: 220: format_double( CCal);
  1318  003638  C0E2  F09D         	movff	_CCal,format_double@num
  1319  00363C  C0E3  F09E         	movff	_CCal+1,format_double@num+1
  1320  003640  C0E4  F09F         	movff	_CCal+2,format_double@num+2
  1321  003644  C0E5  F0A0         	movff	_CCal+3,format_double@num+3
  1322  003648  EC0A  F017         	call	_format_double	;wreg free
  1323                           
  1324                           ;LC-meter.c: 226: delay10ms(200);
  1325  00364C  0EC8               	movlw	200
  1326  00364E  EC07  F022         	call	_delay10ms
  1327                           
  1328                           ;LC-meter.c: 229: calibrate();
  1329  003652  EC44  F01B         	call	_calibrate	;wreg free
  1330                           
  1331                           ;LC-meter.c: 231: lcd_clear();
  1332  003656  ECE9  F021         	call	_lcd_clear	;wreg free
  1333  00365A                     l4617:
  1334                           
  1335                           ;LC-meter.c: 242: ser_puts("...\r\n");
  1336  00365A  0EB0               	movlw	STR_29& (0+255)
  1337  00365C  ECCB  F021         	call	_ser_puts
  1338                           
  1339                           ;LC-meter.c: 243: if((!!(PORTC & 0b1)))
  1340  003660  A082               	btfss	3970,0,c	;volatile
  1341  003662  D003               	goto	l4623
  1342                           
  1343                           ;LC-meter.c: 244: measure_capacitance();
  1344  003664  EC0D  F013         	call	_measure_capacitance	;wreg free
  1345  003668  D002               	goto	l4625
  1346  00366A                     l4623:
  1347                           
  1348                           ;LC-meter.c: 245: else
  1349                           ;LC-meter.c: 246: measure_inductance();
  1350  00366A  EC7C  F010         	call	_measure_inductance	;wreg free
  1351  00366E                     l4625:
  1352                           
  1353                           ;LC-meter.c: 248: indicator(1);
  1354  00366E  0E01               	movlw	1
  1355  003670  ECBB  F021         	call	_indicator
  1356                           
  1357                           ;LC-meter.c: 249: delay10ms(30);
  1358  003674  0E1E               	movlw	30
  1359  003676  EC07  F022         	call	_delay10ms
  1360                           
  1361                           ;LC-meter.c: 250: indicator(0);
  1362  00367A  0E00               	movlw	0
  1363  00367C  ECBB  F021         	call	_indicator
  1364                           
  1365                           ;LC-meter.c: 251: delay10ms(20);
  1366  003680  0E14               	movlw	20
  1367  003682  EC07  F022         	call	_delay10ms
  1368                           
  1369                           ;LC-meter.c: 252: }
  1370  003686  D7E9               	goto	l4617
  1371  003688                     __end_of_main:
  1372                           	opt stack 0
  1373                           tblptru	equ	0xFF8
  1374                           tblptrh	equ	0xFF7
  1375                           tblptrl	equ	0xFF6
  1376                           tablat	equ	0xFF5
  1377                           intcon	equ	0xFF2
  1378                           intcon2	equ	0xFF1
  1379                           postinc0	equ	0xFEE
  1380                           wreg	equ	0xFE8
  1381                           postdec1	equ	0xFE5
  1382                           fsr1l	equ	0xFE1
  1383                           
  1384 ;; *************** function _timer2_init *****************
  1385 ;; Defined at:
  1386 ;;		line 125 in file "../../../lib/timer.c"
  1387 ;; Parameters:    Size  Location     Type
  1388 ;;  ps_mode         1    wreg     unsigned char 
  1389 ;; Auto vars:     Size  Location     Type
  1390 ;;  ps_mode         1    6[COMRAM] unsigned char 
  1391 ;;  postscaler      1    0        unsigned char 
  1392 ;;  ps              1    4[COMRAM] unsigned char 
  1393 ;; Return value:  Size  Location     Type
  1394 ;;		None               void
  1395 ;; Registers used:
  1396 ;;		wreg, status,2, status,0
  1397 ;; Tracked objects:
  1398 ;;		On entry : F/0
  1399 ;;		On exit  : 0/0
  1400 ;;		Unchanged: 0/0
  1401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1402 ;;      Params:         0       0       0       0       0       0       0       0       0
  1403 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1404 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1405 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1406 ;;Total ram usage:        4 bytes
  1407 ;; Hardware stack levels used:    1
  1408 ;; Hardware stack levels required when called:    1
  1409 ;; This function calls:
  1410 ;;		Nothing
  1411 ;; This function is called by:
  1412 ;;		_main
  1413 ;; This function uses a non-reentrant model
  1414 ;;
  1415                           
  1416                           	psect	text1
  1417  00420A                     __ptext1:
  1418                           	opt stack 0
  1419  00420A                     _timer2_init:
  1420                           	opt stack 29
  1421                           
  1422                           ;incstack = 0
  1423                           ;timer2_init@ps_mode stored from wreg
  1424  00420A  6E07               	movwf	timer2_init@ps_mode,c
  1425                           
  1426                           ; BSR set to: 0
  1427                           ;timer.c: 126: uint8_t ps = ps_mode & 0b1111;
  1428  00420C  5007               	movf	timer2_init@ps_mode,w,c
  1429  00420E  0B0F               	andlw	15
  1430  004210  6E05               	movwf	timer2_init@ps,c
  1431                           
  1432                           ; BSR set to: 0
  1433                           ;timer.c: 130: T2CON &= ~0b01111111;
  1434  004212  0E80               	movlw	128
  1435  004214  16CA               	andwf	4042,f,c	;volatile
  1436                           
  1437                           ;timer.c: 132: T2CON |= (postscaler & 0b1111) << 3;
  1438  004216  50CA               	movf	4042,w,c	;volatile
  1439                           
  1440                           ;timer.c: 133: T2CON |= (ps & 0b11);
  1441  004218  5005               	movf	timer2_init@ps,w,c
  1442  00421A  0B03               	andlw	3
  1443  00421C  12CA               	iorwf	4042,f,c	;volatile
  1444                           
  1445                           ; BSR set to: 0
  1446                           ;timer.c: 135: TMR2 = 0;
  1447  00421E  6ACC               	clrf	4044,c	;volatile
  1448                           
  1449                           ; BSR set to: 0
  1450                           ;timer.c: 137: T2CON |= 0b100;
  1451  004220  84CA               	bsf	4042,2,c	;volatile
  1452                           
  1453                           ; BSR set to: 0
  1454                           ;timer.c: 140: PIR1 &= ~0b10;
  1455  004222  929E               	bcf	3998,1,c	;volatile
  1456                           
  1457                           ;timer.c: 141: PIE1 = (!!(ps_mode & 0x80)) << 1;
  1458  004224  AE07               	btfss	timer2_init@ps_mode,7,c
  1459  004226  D003               	goto	u2420
  1460  004228  6A04               	clrf	??_timer2_init& (0+255),c
  1461  00422A  2A04               	incf	??_timer2_init& (0+255),f,c
  1462  00422C  D001               	goto	u2438
  1463  00422E                     u2420:
  1464  00422E  6A04               	clrf	??_timer2_init& (0+255),c
  1465  004230                     u2438:
  1466  004230  90D8               	bcf	status,0,c
  1467  004232  3404               	rlcf	??_timer2_init,w,c
  1468  004234  6E9D               	movwf	3997,c	;volatile
  1469  004236  0012               	return		;funcret
  1470  004238                     __end_of_timer2_init:
  1471                           	opt stack 0
  1472                           tblptru	equ	0xFF8
  1473                           tblptrh	equ	0xFF7
  1474                           tblptrl	equ	0xFF6
  1475                           tablat	equ	0xFF5
  1476                           intcon	equ	0xFF2
  1477                           intcon2	equ	0xFF1
  1478                           postinc0	equ	0xFEE
  1479                           wreg	equ	0xFE8
  1480                           postdec1	equ	0xFE5
  1481                           fsr1l	equ	0xFE1
  1482                           status	equ	0xFD8
  1483                           
  1484 ;; *************** function _timer0_init *****************
  1485 ;; Defined at:
  1486 ;;		line 27 in file "../../../lib/timer.c"
  1487 ;; Parameters:    Size  Location     Type
  1488 ;;  ps_mode         1    wreg     unsigned char 
  1489 ;; Auto vars:     Size  Location     Type
  1490 ;;  ps_mode         1   12[COMRAM] unsigned char 
  1491 ;;  prescaler       1   11[COMRAM] unsigned char 
  1492 ;; Return value:  Size  Location     Type
  1493 ;;		None               void
  1494 ;; Registers used:
  1495 ;;		wreg, status,2, status,0
  1496 ;; Tracked objects:
  1497 ;;		On entry : F/0
  1498 ;;		On exit  : F/0
  1499 ;;		Unchanged: F/0
  1500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1501 ;;      Params:         0       0       0       0       0       0       0       0       0
  1502 ;;      Locals:        10       0       0       0       0       0       0       0       0
  1503 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1504 ;;      Totals:        10       0       0       0       0       0       0       0       0
  1505 ;;Total ram usage:       10 bytes
  1506 ;; Hardware stack levels used:    1
  1507 ;; Hardware stack levels required when called:    1
  1508 ;; This function calls:
  1509 ;;		Nothing
  1510 ;; This function is called by:
  1511 ;;		_main
  1512 ;; This function uses a non-reentrant model
  1513 ;;
  1514                           
  1515                           	psect	text2
  1516  003DF8                     __ptext2:
  1517                           	opt stack 0
  1518  003DF8                     _timer0_init:
  1519                           	opt stack 29
  1520                           
  1521                           ;incstack = 0
  1522                           ;timer0_init@ps_mode stored from wreg
  1523  003DF8  6E0D               	movwf	timer0_init@ps_mode,c
  1524                           
  1525                           ; BSR set to: 0
  1526                           ;timer.c: 28: uint8_t prescaler = ps_mode & 0b1111;
  1527  003DFA  500D               	movf	timer0_init@ps_mode,w,c
  1528  003DFC  0B0F               	andlw	15
  1529  003DFE  6E0C               	movwf	timer0_init@prescaler,c
  1530                           
  1531                           ; BSR set to: 0
  1532                           ;timer.c: 30: TMR0 = 0;
  1533  003E00  6AD6               	clrf	4054,c	;volatile
  1534  003E02  6AD7               	clrf	4055,c	;volatile
  1535                           
  1536                           ; BSR set to: 0
  1537                           ;timer.c: 33: T0CON |= (!!(ps_mode & 0x40)) ? 0x20 : 0x00;
  1538  003E04  BC0D               	btfsc	timer0_init@ps_mode,6,c
  1539  003E06  D003               	goto	l3343
  1540                           
  1541                           ; BSR set to: 0
  1542  003E08  6A04               	clrf	_timer0_init$282,c
  1543  003E0A  6A05               	clrf	_timer0_init$282+1,c
  1544  003E0C  D003               	goto	l3345
  1545  003E0E                     l3343:
  1546                           
  1547                           ; BSR set to: 0
  1548  003E0E  6A05               	clrf	_timer0_init$282+1,c
  1549  003E10  0E20               	movlw	32
  1550  003E12  6E04               	movwf	_timer0_init$282,c
  1551  003E14                     l3345:
  1552                           
  1553                           ; BSR set to: 0
  1554  003E14  5004               	movf	_timer0_init$282,w,c
  1555  003E16  12D5               	iorwf	4053,f,c	;volatile
  1556                           
  1557                           ; BSR set to: 0
  1558                           ;timer.c: 36: T0CON |= (!!(ps_mode & 0x10)) ? 0x10 : 0x00;
  1559  003E18  B80D               	btfsc	timer0_init@ps_mode,4,c
  1560  003E1A  D003               	goto	l3351
  1561                           
  1562                           ; BSR set to: 0
  1563  003E1C  6A06               	clrf	_timer0_init$283,c
  1564  003E1E  6A07               	clrf	_timer0_init$283+1,c
  1565  003E20  D003               	goto	l3353
  1566  003E22                     l3351:
  1567                           
  1568                           ; BSR set to: 0
  1569  003E22  6A07               	clrf	_timer0_init$283+1,c
  1570  003E24  0E10               	movlw	16
  1571  003E26  6E06               	movwf	_timer0_init$283,c
  1572  003E28                     l3353:
  1573                           
  1574                           ; BSR set to: 0
  1575  003E28  5006               	movf	_timer0_init$283,w,c
  1576  003E2A  12D5               	iorwf	4053,f,c	;volatile
  1577                           
  1578                           ; BSR set to: 0
  1579                           ;timer.c: 39: T0CON &= (!!prescaler) ? ~0x08 : ~0x00;
  1580  003E2C  500C               	movf	timer0_init@prescaler,w,c
  1581  003E2E  E103               	bnz	l3359
  1582                           
  1583                           ; BSR set to: 0
  1584  003E30  6808               	setf	_timer0_init$284,c
  1585  003E32  6809               	setf	_timer0_init$284+1,c
  1586  003E34  D003               	goto	l3361
  1587  003E36                     l3359:
  1588                           
  1589                           ; BSR set to: 0
  1590  003E36  6809               	setf	_timer0_init$284+1,c
  1591  003E38  0EF7               	movlw	247
  1592  003E3A  6E08               	movwf	_timer0_init$284,c
  1593  003E3C                     l3361:
  1594                           
  1595                           ; BSR set to: 0
  1596  003E3C  5008               	movf	_timer0_init$284,w,c
  1597  003E3E  16D5               	andwf	4053,f,c	;volatile
  1598                           
  1599                           ; BSR set to: 0
  1600                           ;timer.c: 41: T0CON &= ~0b111;
  1601  003E40  0EF8               	movlw	248
  1602  003E42  16D5               	andwf	4053,f,c	;volatile
  1603                           
  1604                           ;timer.c: 43: if(prescaler > 0) {
  1605  003E44  500C               	movf	timer0_init@prescaler,w,c
  1606  003E46  E003               	bz	l3367
  1607                           
  1608                           ; BSR set to: 0
  1609                           ;timer.c: 44: T0CON |= (prescaler - 1) & 0b111;
  1610  003E48  040C               	decf	timer0_init@prescaler,w,c
  1611  003E4A  0B07               	andlw	7
  1612  003E4C  12D5               	iorwf	4053,f,c	;volatile
  1613  003E4E                     l3367:
  1614                           
  1615                           ; BSR set to: 0
  1616                           ;timer.c: 50: }
  1617                           ;timer.c: 54: INTCON &= ~0x40;
  1618  003E4E  9CF2               	bcf	intcon,6,c	;volatile
  1619                           
  1620                           ; BSR set to: 0
  1621                           ;timer.c: 55: INTCON |= (!!(ps_mode & 0x80)) ? 0x20 : 0x00;
  1622  003E50  BE0D               	btfsc	timer0_init@ps_mode,7,c
  1623  003E52  D003               	goto	l3373
  1624                           
  1625                           ; BSR set to: 0
  1626  003E54  6A0A               	clrf	_timer0_init$285,c
  1627  003E56  6A0B               	clrf	_timer0_init$285+1,c
  1628  003E58  D003               	goto	l3375
  1629  003E5A                     l3373:
  1630                           
  1631                           ; BSR set to: 0
  1632  003E5A  6A0B               	clrf	_timer0_init$285+1,c
  1633  003E5C  0E20               	movlw	32
  1634  003E5E  6E0A               	movwf	_timer0_init$285,c
  1635  003E60                     l3375:
  1636                           
  1637                           ; BSR set to: 0
  1638  003E60  500A               	movf	_timer0_init$285,w,c
  1639  003E62  12F2               	iorwf	intcon,f,c	;volatile
  1640                           
  1641                           ; BSR set to: 0
  1642  003E64  0012               	return		;funcret
  1643  003E66                     __end_of_timer0_init:
  1644                           	opt stack 0
  1645                           tblptru	equ	0xFF8
  1646                           tblptrh	equ	0xFF7
  1647                           tblptrl	equ	0xFF6
  1648                           tablat	equ	0xFF5
  1649                           intcon	equ	0xFF2
  1650                           intcon2	equ	0xFF1
  1651                           postinc0	equ	0xFEE
  1652                           wreg	equ	0xFE8
  1653                           postdec1	equ	0xFE5
  1654                           fsr1l	equ	0xFE1
  1655                           status	equ	0xFD8
  1656                           
  1657 ;; *************** function _ser_init *****************
  1658 ;; Defined at:
  1659 ;;		line 125 in file "../../../lib/ser.c"
  1660 ;; Parameters:    Size  Location     Type
  1661 ;;		None
  1662 ;; Auto vars:     Size  Location     Type
  1663 ;;		None
  1664 ;; Return value:  Size  Location     Type
  1665 ;;		None               void
  1666 ;; Registers used:
  1667 ;;		wreg, status,2
  1668 ;; Tracked objects:
  1669 ;;		On entry : 0/0
  1670 ;;		On exit  : F/0
  1671 ;;		Unchanged: 0/0
  1672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1673 ;;      Params:         0       0       0       0       0       0       0       0       0
  1674 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1675 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1676 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1677 ;;Total ram usage:        0 bytes
  1678 ;; Hardware stack levels used:    1
  1679 ;; Hardware stack levels required when called:    1
  1680 ;; This function calls:
  1681 ;;		Nothing
  1682 ;; This function is called by:
  1683 ;;		_main
  1684 ;; This function uses a non-reentrant model
  1685 ;;
  1686                           
  1687                           	psect	text3
  1688  00430E                     __ptext3:
  1689                           	opt stack 0
  1690  00430E                     _ser_init:
  1691                           	opt stack 29
  1692                           
  1693                           ;ser.c: 128: TRISC6 = 1;
  1694                           
  1695                           ; BSR set to: 0
  1696                           ;incstack = 0
  1697  00430E  8C94               	bsf	3988,6,c	;volatile
  1698                           
  1699                           ;ser.c: 129: LATC7 = 1;
  1700  004310  8E8B               	bsf	3979,7,c	;volatile
  1701                           
  1702                           ;ser.c: 131: BRGH = 1;
  1703  004312  84AC               	bsf	4012,2,c	;volatile
  1704                           
  1705                           ;ser.c: 136: SPBRG = ser_brg;
  1706  004314  0E1F               	movlw	31
  1707  004316  6EAF               	movwf	4015,c	;volatile
  1708                           
  1709                           ;ser.c: 139: TX9 = 0;
  1710  004318  9CAC               	bcf	4012,6,c	;volatile
  1711                           
  1712                           ;ser.c: 140: RX9 = 0;
  1713  00431A  9CAB               	bcf	4011,6,c	;volatile
  1714                           
  1715                           ;ser.c: 142: SYNC = 0;
  1716  00431C  98AC               	bcf	4012,4,c	;volatile
  1717                           
  1718                           ;ser.c: 143: SPEN = 1;
  1719  00431E  8EAB               	bsf	4011,7,c	;volatile
  1720                           
  1721                           ;ser.c: 144: CREN = 1;
  1722  004320  88AB               	bsf	4011,4,c	;volatile
  1723                           
  1724                           ;ser.c: 145: TXIE = 0;
  1725  004322  989D               	bcf	3997,4,c	;volatile
  1726                           
  1727                           ;ser.c: 147: TXEN = 1;
  1728  004324  8AAC               	bsf	4012,5,c	;volatile
  1729                           
  1730                           ;ser.c: 148: PEIE = 1;
  1731  004326  8CF2               	bsf	intcon,6,c	;volatile
  1732                           
  1733                           ;ser.c: 150: rxiptr = rxoptr = txiptr = txoptr = 0;
  1734  004328  6A5C               	clrf	_txoptr,c	;volatile
  1735  00432A  6A5B               	clrf	_txiptr,c	;volatile
  1736  00432C  0100               	movlb	0	; () banked
  1737  00432E  6BCB               	clrf	_rxoptr& (0+255),b	;volatile
  1738  004330  6BCA               	clrf	_rxiptr& (0+255),b	;volatile
  1739                           
  1740                           ; BSR set to: 0
  1741  004332  0012               	return		;funcret
  1742  004334                     __end_of_ser_init:
  1743                           	opt stack 0
  1744                           tblptru	equ	0xFF8
  1745                           tblptrh	equ	0xFF7
  1746                           tblptrl	equ	0xFF6
  1747                           tablat	equ	0xFF5
  1748                           intcon	equ	0xFF2
  1749                           intcon2	equ	0xFF1
  1750                           postinc0	equ	0xFEE
  1751                           wreg	equ	0xFE8
  1752                           postdec1	equ	0xFE5
  1753                           fsr1l	equ	0xFE1
  1754                           status	equ	0xFD8
  1755                           
  1756 ;; *************** function _measure_inductance *****************
  1757 ;; Defined at:
  1758 ;;		line 196 in file "../../../src/measure.c"
  1759 ;; Parameters:    Size  Location     Type
  1760 ;;		None
  1761 ;; Auto vars:     Size  Location     Type
  1762 ;;  Lin             4   53[BANK0 ] unsigned char 
  1763 ;;  denominator     4   18[BANK0 ] unsigned char 
  1764 ;;  numerator       4   14[BANK0 ] unsigned char 
  1765 ;;  var             2   51[BANK0 ] unsigned int 
  1766 ;;  unit            1   38[BANK0 ] unsigned char 
  1767 ;; Return value:  Size  Location     Type
  1768 ;;		None               void
  1769 ;; Registers used:
  1770 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1771 ;; Tracked objects:
  1772 ;;		On entry : 0/0
  1773 ;;		On exit  : 0/0
  1774 ;;		Unchanged: 0/0
  1775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1776 ;;      Params:         0       0       0       0       0       0       0       0       0
  1777 ;;      Locals:         0      43       0       0       0       0       0       0       0
  1778 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1779 ;;      Totals:         0      43       0       0       0       0       0       0       0
  1780 ;;Total ram usage:       43 bytes
  1781 ;; Hardware stack levels used:    1
  1782 ;; Hardware stack levels required when called:    6
  1783 ;; This function calls:
  1784 ;;		___fldiv
  1785 ;;		___flge
  1786 ;;		___flmul
  1787 ;;		___flsub
  1788 ;;		___fltol
  1789 ;;		___lwtofl
  1790 ;;		_lcd_gotoxy
  1791 ;;		_measure_freq
  1792 ;;		_print_reading
  1793 ;;		_print_unit
  1794 ;;		_put_str
  1795 ;; This function is called by:
  1796 ;;		_main
  1797 ;; This function uses a non-reentrant model
  1798 ;;
  1799                           
  1800                           	psect	text4
  1801  0020F8                     __ptext4:
  1802                           	opt stack 0
  1803  0020F8                     _measure_inductance:
  1804                           	opt stack 24
  1805                           
  1806                           ;measure.c: 197: uint8_t unit;
  1807                           ;measure.c: 198: uint16_t var;
  1808                           ;measure.c: 200: double Lin, numerator, denominator;
  1809                           ;measure.c: 203: lcd_gotoxy(0, 0);
  1810                           
  1811                           ; BSR set to: 0
  1812                           ;incstack = 0
  1813  0020F8  0E00               	movlw	0
  1814  0020FA  6A08               	clrf	lcd_gotoxy@row,c
  1815  0020FC  EC9C  F020         	call	_lcd_gotoxy
  1816                           
  1817                           ;measure.c: 204: put_str("Inductivity ");
  1818  002100  0E74               	movlw	STR_27& (0+255)
  1819  002102  ECEC  F020         	call	_put_str
  1820                           
  1821                           ;measure.c: 206: var = measure_freq();
  1822  002106  EC50  F01A         	call	_measure_freq	;wreg free
  1823  00210A  C036  F093         	movff	?_measure_freq,measure_inductance@var
  1824  00210E  C037  F094         	movff	?_measure_freq+1,measure_inductance@var+1
  1825                           
  1826                           ;measure.c: 208: F3 = (double)var;
  1827  002112  C093  F03B         	movff	measure_inductance@var,___lwtofl@c
  1828  002116  C094  F03C         	movff	measure_inductance@var+1,___lwtofl@c+1
  1829  00211A  EC5E  F021         	call	___lwtofl	;wreg free
  1830  00211E  C03B  F0B5         	movff	?___lwtofl,_F3
  1831  002122  C03C  F0B6         	movff	?___lwtofl+1,_F3+1
  1832  002126  C03D  F0B7         	movff	?___lwtofl+2,_F3+2
  1833  00212A  C03E  F0B8         	movff	?___lwtofl+3,_F3+3
  1834                           
  1835                           ;measure.c: 209: if(F3 > F1)
  1836  00212E  C0DE  F004         	movff	_F1,___flge@ff1
  1837  002132  C0DF  F005         	movff	_F1+1,___flge@ff1+1
  1838  002136  C0E0  F006         	movff	_F1+2,___flge@ff1+2
  1839  00213A  C0E1  F007         	movff	_F1+3,___flge@ff1+3
  1840  00213E  C0B5  F008         	movff	_F3,___flge@ff2
  1841  002142  C0B6  F009         	movff	_F3+1,___flge@ff2+1
  1842  002146  C0B7  F00A         	movff	_F3+2,___flge@ff2+2
  1843  00214A  C0B8  F00B         	movff	_F3+3,___flge@ff2+3
  1844  00214E  EC86  F01F         	call	___flge	;wreg free
  1845  002152  E208               	bc	l4457
  1846                           
  1847                           ;measure.c: 210: F3 = F1;
  1848  002154  C0DE  F0B5         	movff	_F1,_F3
  1849  002158  C0DF  F0B6         	movff	_F1+1,_F3+1
  1850  00215C  C0E0  F0B7         	movff	_F1+2,_F3+2
  1851  002160  C0E1  F0B8         	movff	_F1+3,_F3+3
  1852  002164                     l4457:
  1853                           
  1854                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1855  002164  C0B1  F048         	movff	_F2,___flsub@f2
  1856  002168  C0B2  F049         	movff	_F2+1,___flsub@f2+1
  1857  00216C  C0B3  F04A         	movff	_F2+2,___flsub@f2+2
  1858  002170  C0B4  F04B         	movff	_F2+3,___flsub@f2+3
  1859  002174  C0B1  F044         	movff	_F2,___flsub@f1
  1860  002178  C0B2  F045         	movff	_F2+1,___flsub@f1+1
  1861  00217C  C0B3  F046         	movff	_F2+2,___flsub@f1+2
  1862  002180  C0B4  F047         	movff	_F2+3,___flsub@f1+3
  1863  002184  EC3E  F020         	call	___flsub	;wreg free
  1864  002188  C044  F076         	movff	?___flsub,_measure_inductance$1118
  1865  00218C  C045  F077         	movff	?___flsub+1,_measure_inductance$1118+1
  1866  002190  C046  F078         	movff	?___flsub+2,_measure_inductance$1118+2
  1867  002194  C047  F079         	movff	?___flsub+3,_measure_inductance$1118+3
  1868                           
  1869                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1870  002198  C076  F048         	movff	_measure_inductance$1118,___flsub@f2
  1871  00219C  C077  F049         	movff	_measure_inductance$1118+1,___flsub@f2+1
  1872  0021A0  C078  F04A         	movff	_measure_inductance$1118+2,___flsub@f2+2
  1873  0021A4  C079  F04B         	movff	_measure_inductance$1118+3,___flsub@f2+3
  1874  0021A8  C0DE  F021         	movff	_F1,___flmul@f2
  1875  0021AC  C0DF  F022         	movff	_F1+1,___flmul@f2+1
  1876  0021B0  C0E0  F023         	movff	_F1+2,___flmul@f2+2
  1877  0021B4  C0E1  F024         	movff	_F1+3,___flmul@f2+3
  1878  0021B8  C0DE  F01D         	movff	_F1,___flmul@f1
  1879  0021BC  C0DF  F01E         	movff	_F1+1,___flmul@f1+1
  1880  0021C0  C0E0  F01F         	movff	_F1+2,___flmul@f1+2
  1881  0021C4  C0E1  F020         	movff	_F1+3,___flmul@f1+3
  1882  0021C8  EC2B  F016         	call	___flmul	;wreg free
  1883  0021CC  C01D  F044         	movff	?___flmul,___flsub@f1
  1884  0021D0  C01E  F045         	movff	?___flmul+1,___flsub@f1+1
  1885  0021D4  C01F  F046         	movff	?___flmul+2,___flsub@f1+2
  1886  0021D8  C020  F047         	movff	?___flmul+3,___flsub@f1+3
  1887  0021DC  EC3E  F020         	call	___flsub	;wreg free
  1888  0021E0  C044  F087         	movff	?___flsub,_measure_inductance$1119
  1889  0021E4  C045  F088         	movff	?___flsub+1,_measure_inductance$1119+1
  1890  0021E8  C046  F089         	movff	?___flsub+2,_measure_inductance$1119+2
  1891  0021EC  C047  F08A         	movff	?___flsub+3,_measure_inductance$1119+3
  1892                           
  1893                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1894  0021F0  C0B5  F021         	movff	_F3,___flmul@f2
  1895  0021F4  C0B6  F022         	movff	_F3+1,___flmul@f2+1
  1896  0021F8  C0B7  F023         	movff	_F3+2,___flmul@f2+2
  1897  0021FC  C0B8  F024         	movff	_F3+3,___flmul@f2+3
  1898  002200  C0B5  F01D         	movff	_F3,___flmul@f1
  1899  002204  C0B6  F01E         	movff	_F3+1,___flmul@f1+1
  1900  002208  C0B7  F01F         	movff	_F3+2,___flmul@f1+2
  1901  00220C  C0B8  F020         	movff	_F3+3,___flmul@f1+3
  1902  002210  EC2B  F016         	call	___flmul	;wreg free
  1903  002214  C01D  F048         	movff	?___flmul,___flsub@f2
  1904  002218  C01E  F049         	movff	?___flmul+1,___flsub@f2+1
  1905  00221C  C01F  F04A         	movff	?___flmul+2,___flsub@f2+2
  1906  002220  C020  F04B         	movff	?___flmul+3,___flsub@f2+3
  1907  002224  C0DE  F021         	movff	_F1,___flmul@f2
  1908  002228  C0DF  F022         	movff	_F1+1,___flmul@f2+1
  1909  00222C  C0E0  F023         	movff	_F1+2,___flmul@f2+2
  1910  002230  C0E1  F024         	movff	_F1+3,___flmul@f2+3
  1911  002234  C0DE  F01D         	movff	_F1,___flmul@f1
  1912  002238  C0DF  F01E         	movff	_F1+1,___flmul@f1+1
  1913  00223C  C0E0  F01F         	movff	_F1+2,___flmul@f1+2
  1914  002240  C0E1  F020         	movff	_F1+3,___flmul@f1+3
  1915  002244  EC2B  F016         	call	___flmul	;wreg free
  1916  002248  C01D  F044         	movff	?___flmul,___flsub@f1
  1917  00224C  C01E  F045         	movff	?___flmul+1,___flsub@f1+1
  1918  002250  C01F  F046         	movff	?___flmul+2,___flsub@f1+2
  1919  002254  C020  F047         	movff	?___flmul+3,___flsub@f1+3
  1920  002258  EC3E  F020         	call	___flsub	;wreg free
  1921  00225C  C044  F08B         	movff	?___flsub,_measure_inductance$1120
  1922  002260  C045  F08C         	movff	?___flsub+1,_measure_inductance$1120+1
  1923  002264  C046  F08D         	movff	?___flsub+2,_measure_inductance$1120+2
  1924  002268  C047  F08E         	movff	?___flsub+3,_measure_inductance$1120+3
  1925                           
  1926                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1927  00226C  C087  F021         	movff	_measure_inductance$1119,___flmul@f2
  1928  002270  C088  F022         	movff	_measure_inductance$1119+1,___flmul@f2+1
  1929  002274  C089  F023         	movff	_measure_inductance$1119+2,___flmul@f2+2
  1930  002278  C08A  F024         	movff	_measure_inductance$1119+3,___flmul@f2+3
  1931  00227C  C08B  F01D         	movff	_measure_inductance$1120,___flmul@f1
  1932  002280  C08C  F01E         	movff	_measure_inductance$1120+1,___flmul@f1+1
  1933  002284  C08D  F01F         	movff	_measure_inductance$1120+2,___flmul@f1+2
  1934  002288  C08E  F020         	movff	_measure_inductance$1120+3,___flmul@f1+3
  1935  00228C  EC2B  F016         	call	___flmul	;wreg free
  1936  002290  C01D  F08F         	movff	?___flmul,_measure_inductance$1121
  1937  002294  C01E  F090         	movff	?___flmul+1,_measure_inductance$1121+1
  1938  002298  C01F  F091         	movff	?___flmul+2,_measure_inductance$1121+2
  1939  00229C  C020  F092         	movff	?___flmul+3,_measure_inductance$1121+3
  1940                           
  1941                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1942  0022A0  C08F  F01D         	movff	_measure_inductance$1121,___flmul@f1
  1943  0022A4  C090  F01E         	movff	_measure_inductance$1121+1,___flmul@f1+1
  1944  0022A8  C091  F01F         	movff	_measure_inductance$1121+2,___flmul@f1+2
  1945  0022AC  C092  F020         	movff	_measure_inductance$1121+3,___flmul@f1+3
  1946  0022B0  0E00               	movlw	0
  1947  0022B2  6E21               	movwf	___flmul@f2,c
  1948  0022B4  0E40               	movlw	64
  1949  0022B6  6E22               	movwf	___flmul@f2+1,c
  1950  0022B8  0E1C               	movlw	28
  1951  0022BA  6E23               	movwf	___flmul@f2+2,c
  1952  0022BC  0E46               	movlw	70
  1953  0022BE  6E24               	movwf	___flmul@f2+3,c
  1954  0022C0  EC2B  F016         	call	___flmul	;wreg free
  1955  0022C4  C01D  F06E         	movff	?___flmul,measure_inductance@numerator
  1956  0022C8  C01E  F06F         	movff	?___flmul+1,measure_inductance@numerator+1
  1957  0022CC  C01F  F070         	movff	?___flmul+2,measure_inductance@numerator+2
  1958  0022D0  C020  F071         	movff	?___flmul+3,measure_inductance@numerator+3
  1959                           
  1960                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1961  0022D4  C0DE  F021         	movff	_F1,___flmul@f2
  1962  0022D8  C0DF  F022         	movff	_F1+1,___flmul@f2+1
  1963  0022DC  C0E0  F023         	movff	_F1+2,___flmul@f2+2
  1964  0022E0  C0E1  F024         	movff	_F1+3,___flmul@f2+3
  1965  0022E4  C0DE  F01D         	movff	_F1,___flmul@f1
  1966  0022E8  C0DF  F01E         	movff	_F1+1,___flmul@f1+1
  1967  0022EC  C0E0  F01F         	movff	_F1+2,___flmul@f1+2
  1968  0022F0  C0E1  F020         	movff	_F1+3,___flmul@f1+3
  1969  0022F4  EC2B  F016         	call	___flmul	;wreg free
  1970  0022F8  C01D  F07A         	movff	?___flmul,_measure_inductance$1122
  1971  0022FC  C01E  F07B         	movff	?___flmul+1,_measure_inductance$1122+1
  1972  002300  C01F  F07C         	movff	?___flmul+2,_measure_inductance$1122+2
  1973  002304  C020  F07D         	movff	?___flmul+3,_measure_inductance$1122+3
  1974                           
  1975                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1976  002308  C0B1  F021         	movff	_F2,___flmul@f2
  1977  00230C  C0B2  F022         	movff	_F2+1,___flmul@f2+1
  1978  002310  C0B3  F023         	movff	_F2+2,___flmul@f2+2
  1979  002314  C0B4  F024         	movff	_F2+3,___flmul@f2+3
  1980  002318  C07A  F01D         	movff	_measure_inductance$1122,___flmul@f1
  1981  00231C  C07B  F01E         	movff	_measure_inductance$1122+1,___flmul@f1+1
  1982  002320  C07C  F01F         	movff	_measure_inductance$1122+2,___flmul@f1+2
  1983  002324  C07D  F020         	movff	_measure_inductance$1122+3,___flmul@f1+3
  1984  002328  EC2B  F016         	call	___flmul	;wreg free
  1985  00232C  C01D  F087         	movff	?___flmul,_measure_inductance$1119
  1986  002330  C01E  F088         	movff	?___flmul+1,_measure_inductance$1119+1
  1987  002334  C01F  F089         	movff	?___flmul+2,_measure_inductance$1119+2
  1988  002338  C020  F08A         	movff	?___flmul+3,_measure_inductance$1119+3
  1989                           
  1990                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1991  00233C  C0B1  F021         	movff	_F2,___flmul@f2
  1992  002340  C0B2  F022         	movff	_F2+1,___flmul@f2+1
  1993  002344  C0B3  F023         	movff	_F2+2,___flmul@f2+2
  1994  002348  C0B4  F024         	movff	_F2+3,___flmul@f2+3
  1995  00234C  C087  F01D         	movff	_measure_inductance$1119,___flmul@f1
  1996  002350  C088  F01E         	movff	_measure_inductance$1119+1,___flmul@f1+1
  1997  002354  C089  F01F         	movff	_measure_inductance$1119+2,___flmul@f1+2
  1998  002358  C08A  F020         	movff	_measure_inductance$1119+3,___flmul@f1+3
  1999  00235C  EC2B  F016         	call	___flmul	;wreg free
  2000  002360  C01D  F08B         	movff	?___flmul,_measure_inductance$1120
  2001  002364  C01E  F08C         	movff	?___flmul+1,_measure_inductance$1120+1
  2002  002368  C01F  F08D         	movff	?___flmul+2,_measure_inductance$1120+2
  2003  00236C  C020  F08E         	movff	?___flmul+3,_measure_inductance$1120+3
  2004                           
  2005                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2006  002370  C0B5  F021         	movff	_F3,___flmul@f2
  2007  002374  C0B6  F022         	movff	_F3+1,___flmul@f2+1
  2008  002378  C0B7  F023         	movff	_F3+2,___flmul@f2+2
  2009  00237C  C0B8  F024         	movff	_F3+3,___flmul@f2+3
  2010  002380  C08B  F01D         	movff	_measure_inductance$1120,___flmul@f1
  2011  002384  C08C  F01E         	movff	_measure_inductance$1120+1,___flmul@f1+1
  2012  002388  C08D  F01F         	movff	_measure_inductance$1120+2,___flmul@f1+2
  2013  00238C  C08E  F020         	movff	_measure_inductance$1120+3,___flmul@f1+3
  2014  002390  EC2B  F016         	call	___flmul	;wreg free
  2015  002394  C01D  F08F         	movff	?___flmul,_measure_inductance$1121
  2016  002398  C01E  F090         	movff	?___flmul+1,_measure_inductance$1121+1
  2017  00239C  C01F  F091         	movff	?___flmul+2,_measure_inductance$1121+2
  2018  0023A0  C020  F092         	movff	?___flmul+3,_measure_inductance$1121+3
  2019                           
  2020                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2021  0023A4  C0B5  F021         	movff	_F3,___flmul@f2
  2022  0023A8  C0B6  F022         	movff	_F3+1,___flmul@f2+1
  2023  0023AC  C0B7  F023         	movff	_F3+2,___flmul@f2+2
  2024  0023B0  C0B8  F024         	movff	_F3+3,___flmul@f2+3
  2025  0023B4  C08F  F01D         	movff	_measure_inductance$1121,___flmul@f1
  2026  0023B8  C090  F01E         	movff	_measure_inductance$1121+1,___flmul@f1+1
  2027  0023BC  C091  F01F         	movff	_measure_inductance$1121+2,___flmul@f1+2
  2028  0023C0  C092  F020         	movff	_measure_inductance$1121+3,___flmul@f1+3
  2029  0023C4  EC2B  F016         	call	___flmul	;wreg free
  2030  0023C8  C01D  F07E         	movff	?___flmul,_measure_inductance$1123
  2031  0023CC  C01E  F07F         	movff	?___flmul+1,_measure_inductance$1123+1
  2032  0023D0  C01F  F080         	movff	?___flmul+2,_measure_inductance$1123+2
  2033  0023D4  C020  F081         	movff	?___flmul+3,_measure_inductance$1123+3
  2034                           
  2035                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2036  0023D8  C0E2  F021         	movff	_CCal,___flmul@f2
  2037  0023DC  C0E3  F022         	movff	_CCal+1,___flmul@f2+1
  2038  0023E0  C0E4  F023         	movff	_CCal+2,___flmul@f2+2
  2039  0023E4  C0E5  F024         	movff	_CCal+3,___flmul@f2+3
  2040  0023E8  C07E  F01D         	movff	_measure_inductance$1123,___flmul@f1
  2041  0023EC  C07F  F01E         	movff	_measure_inductance$1123+1,___flmul@f1+1
  2042  0023F0  C080  F01F         	movff	_measure_inductance$1123+2,___flmul@f1+2
  2043  0023F4  C081  F020         	movff	_measure_inductance$1123+3,___flmul@f1+3
  2044  0023F8  EC2B  F016         	call	___flmul	;wreg free
  2045  0023FC  C01D  F082         	movff	?___flmul,_measure_inductance$1124
  2046  002400  C01E  F083         	movff	?___flmul+1,_measure_inductance$1124+1
  2047  002404  C01F  F084         	movff	?___flmul+2,_measure_inductance$1124+2
  2048  002408  C020  F085         	movff	?___flmul+3,_measure_inductance$1124+3
  2049                           
  2050                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2051  00240C  C082  F01D         	movff	_measure_inductance$1124,___flmul@f1
  2052  002410  C083  F01E         	movff	_measure_inductance$1124+1,___flmul@f1+1
  2053  002414  C084  F01F         	movff	_measure_inductance$1124+2,___flmul@f1+2
  2054  002418  C085  F020         	movff	_measure_inductance$1124+3,___flmul@f1+3
  2055  00241C  0EE6               	movlw	230
  2056  00241E  6E21               	movwf	___flmul@f2,c
  2057  002420  0EE9               	movlw	233
  2058  002422  6E22               	movwf	___flmul@f2+1,c
  2059  002424  0E1D               	movlw	29
  2060  002426  6E23               	movwf	___flmul@f2+2,c
  2061  002428  0E42               	movlw	66
  2062  00242A  6E24               	movwf	___flmul@f2+3,c
  2063  00242C  EC2B  F016         	call	___flmul	;wreg free
  2064  002430  C01D  F072         	movff	?___flmul,measure_inductance@denominator
  2065  002434  C01E  F073         	movff	?___flmul+1,measure_inductance@denominator+1
  2066  002438  C01F  F074         	movff	?___flmul+2,measure_inductance@denominator+2
  2067  00243C  C020  F075         	movff	?___flmul+3,measure_inductance@denominator+3
  2068                           
  2069                           ;measure.c: 216: Lin = (numerator / denominator) * 1e+15l;
  2070  002440  C072  F012         	movff	measure_inductance@denominator,___fldiv@f2
  2071  002444  C073  F013         	movff	measure_inductance@denominator+1,___fldiv@f2+1
  2072  002448  C074  F014         	movff	measure_inductance@denominator+2,___fldiv@f2+2
  2073  00244C  C075  F015         	movff	measure_inductance@denominator+3,___fldiv@f2+3
  2074  002450  C06E  F00E         	movff	measure_inductance@numerator,___fldiv@f1
  2075  002454  C06F  F00F         	movff	measure_inductance@numerator+1,___fldiv@f1+1
  2076  002458  C070  F010         	movff	measure_inductance@numerator+2,___fldiv@f1+2
  2077  00245C  C071  F011         	movff	measure_inductance@numerator+3,___fldiv@f1+3
  2078  002460  EC9A  F01D         	call	___fldiv	;wreg free
  2079  002464  C00E  F01D         	movff	?___fldiv,___flmul@f1
  2080  002468  C00F  F01E         	movff	?___fldiv+1,___flmul@f1+1
  2081  00246C  C010  F01F         	movff	?___fldiv+2,___flmul@f1+2
  2082  002470  C011  F020         	movff	?___fldiv+3,___flmul@f1+3
  2083  002474  0EA9               	movlw	169
  2084  002476  6E21               	movwf	___flmul@f2,c
  2085  002478  0E5F               	movlw	95
  2086  00247A  6E22               	movwf	___flmul@f2+1,c
  2087  00247C  0E63               	movlw	99
  2088  00247E  6E23               	movwf	___flmul@f2+2,c
  2089  002480  0E58               	movlw	88
  2090  002482  6E24               	movwf	___flmul@f2+3,c
  2091  002484  EC2B  F016         	call	___flmul	;wreg free
  2092  002488  C01D  F095         	movff	?___flmul,measure_inductance@Lin
  2093  00248C  C01E  F096         	movff	?___flmul+1,measure_inductance@Lin+1
  2094  002490  C01F  F097         	movff	?___flmul+2,measure_inductance@Lin+2
  2095  002494  C020  F098         	movff	?___flmul+3,measure_inductance@Lin+3
  2096                           
  2097                           ;measure.c: 218: if(Lin > 999) {
  2098  002498  6A04               	clrf	___flge@ff1,c
  2099  00249A  0EC0               	movlw	192
  2100  00249C  6E05               	movwf	___flge@ff1+1,c
  2101  00249E  0E79               	movlw	121
  2102  0024A0  6E06               	movwf	___flge@ff1+2,c
  2103  0024A2  0E44               	movlw	68
  2104  0024A4  6E07               	movwf	___flge@ff1+3,c
  2105  0024A6  C095  F008         	movff	measure_inductance@Lin,___flge@ff2
  2106  0024AA  C096  F009         	movff	measure_inductance@Lin+1,___flge@ff2+1
  2107  0024AE  C097  F00A         	movff	measure_inductance@Lin+2,___flge@ff2+2
  2108  0024B2  C098  F00B         	movff	measure_inductance@Lin+3,___flge@ff2+3
  2109  0024B6  EC86  F01F         	call	___flge	;wreg free
  2110  0024BA  E27A               	bc	l4499
  2111                           
  2112                           ;measure.c: 219: if(Lin > (999e+03l)) {
  2113  0024BC  0E80               	movlw	128
  2114  0024BE  6E04               	movwf	___flge@ff1,c
  2115  0024C0  0EE5               	movlw	229
  2116  0024C2  6E05               	movwf	___flge@ff1+1,c
  2117  0024C4  0E73               	movlw	115
  2118  0024C6  6E06               	movwf	___flge@ff1+2,c
  2119  0024C8  0E49               	movlw	73
  2120  0024CA  6E07               	movwf	___flge@ff1+3,c
  2121  0024CC  C095  F008         	movff	measure_inductance@Lin,___flge@ff2
  2122  0024D0  C096  F009         	movff	measure_inductance@Lin+1,___flge@ff2+1
  2123  0024D4  C097  F00A         	movff	measure_inductance@Lin+2,___flge@ff2+2
  2124  0024D8  C098  F00B         	movff	measure_inductance@Lin+3,___flge@ff2+3
  2125  0024DC  EC86  F01F         	call	___flge	;wreg free
  2126  0024E0  E24C               	bc	l4495
  2127                           
  2128                           ;measure.c: 220: if(Lin > (999e+06l)) {
  2129  0024E2  0E1F               	movlw	31
  2130  0024E4  6E04               	movwf	___flge@ff1,c
  2131  0024E6  0E2E               	movlw	46
  2132  0024E8  6E05               	movwf	___flge@ff1+1,c
  2133  0024EA  0E6E               	movlw	110
  2134  0024EC  6E06               	movwf	___flge@ff1+2,c
  2135  0024EE  0E4E               	movlw	78
  2136  0024F0  6E07               	movwf	___flge@ff1+3,c
  2137  0024F2  C095  F008         	movff	measure_inductance@Lin,___flge@ff2
  2138  0024F6  C096  F009         	movff	measure_inductance@Lin+1,___flge@ff2+1
  2139  0024FA  C097  F00A         	movff	measure_inductance@Lin+2,___flge@ff2+2
  2140  0024FE  C098  F00B         	movff	measure_inductance@Lin+3,___flge@ff2+3
  2141  002502  EC86  F01F         	call	___flge	;wreg free
  2142  002506  E21D               	bc	l4491
  2143                           
  2144                           ;measure.c: 221: Lin = Lin / (1e+09l);
  2145  002508  C095  F00E         	movff	measure_inductance@Lin,___fldiv@f1
  2146  00250C  C096  F00F         	movff	measure_inductance@Lin+1,___fldiv@f1+1
  2147  002510  C097  F010         	movff	measure_inductance@Lin+2,___fldiv@f1+2
  2148  002514  C098  F011         	movff	measure_inductance@Lin+3,___fldiv@f1+3
  2149  002518  0E28               	movlw	40
  2150  00251A  6E12               	movwf	___fldiv@f2,c
  2151  00251C  0E6B               	movlw	107
  2152  00251E  6E13               	movwf	___fldiv@f2+1,c
  2153  002520  0E6E               	movlw	110
  2154  002522  6E14               	movwf	___fldiv@f2+2,c
  2155  002524  0E4E               	movlw	78
  2156  002526  6E15               	movwf	___fldiv@f2+3,c
  2157  002528  EC9A  F01D         	call	___fldiv	;wreg free
  2158  00252C  C00E  F095         	movff	?___fldiv,measure_inductance@Lin
  2159  002530  C00F  F096         	movff	?___fldiv+1,measure_inductance@Lin+1
  2160  002534  C010  F097         	movff	?___fldiv+2,measure_inductance@Lin+2
  2161  002538  C011  F098         	movff	?___fldiv+3,measure_inductance@Lin+3
  2162                           
  2163                           ;measure.c: 222: unit = 0;
  2164  00253C  0100               	movlb	0	; () banked
  2165  00253E  6B86               	clrf	measure_inductance@unit& (0+255),b
  2166                           
  2167                           ;measure.c: 223: } else {
  2168  002540  D03A               	goto	l4501
  2169  002542                     l4491:
  2170                           
  2171                           ;measure.c: 224: Lin = Lin / (1e+06l);
  2172  002542  C095  F00E         	movff	measure_inductance@Lin,___fldiv@f1
  2173  002546  C096  F00F         	movff	measure_inductance@Lin+1,___fldiv@f1+1
  2174  00254A  C097  F010         	movff	measure_inductance@Lin+2,___fldiv@f1+2
  2175  00254E  C098  F011         	movff	measure_inductance@Lin+3,___fldiv@f1+3
  2176  002552  0E00               	movlw	0
  2177  002554  6E12               	movwf	___fldiv@f2,c
  2178  002556  0E24               	movlw	36
  2179  002558  6E13               	movwf	___fldiv@f2+1,c
  2180  00255A  0E74               	movlw	116
  2181  00255C  6E14               	movwf	___fldiv@f2+2,c
  2182  00255E  0E49               	movlw	73
  2183  002560  6E15               	movwf	___fldiv@f2+3,c
  2184  002562  EC9A  F01D         	call	___fldiv	;wreg free
  2185  002566  C00E  F095         	movff	?___fldiv,measure_inductance@Lin
  2186  00256A  C00F  F096         	movff	?___fldiv+1,measure_inductance@Lin+1
  2187  00256E  C010  F097         	movff	?___fldiv+2,measure_inductance@Lin+2
  2188  002572  C011  F098         	movff	?___fldiv+3,measure_inductance@Lin+3
  2189                           
  2190                           ;measure.c: 225: unit = 1;
  2191  002576  0E01               	movlw	1
  2192  002578  D01C               	goto	L1
  2193  00257A                     l4495:
  2194                           
  2195                           ;measure.c: 228: Lin = Lin / 1e+03l;
  2196  00257A  C095  F00E         	movff	measure_inductance@Lin,___fldiv@f1
  2197  00257E  C096  F00F         	movff	measure_inductance@Lin+1,___fldiv@f1+1
  2198  002582  C097  F010         	movff	measure_inductance@Lin+2,___fldiv@f1+2
  2199  002586  C098  F011         	movff	measure_inductance@Lin+3,___fldiv@f1+3
  2200  00258A  0E00               	movlw	0
  2201  00258C  6E12               	movwf	___fldiv@f2,c
  2202  00258E  6E13               	movwf	___fldiv@f2+1,c
  2203  002590  0E7A               	movlw	122
  2204  002592  6E14               	movwf	___fldiv@f2+2,c
  2205  002594  0E44               	movlw	68
  2206  002596  6E15               	movwf	___fldiv@f2+3,c
  2207  002598  EC9A  F01D         	call	___fldiv	;wreg free
  2208  00259C  C00E  F095         	movff	?___fldiv,measure_inductance@Lin
  2209  0025A0  C00F  F096         	movff	?___fldiv+1,measure_inductance@Lin+1
  2210  0025A4  C010  F097         	movff	?___fldiv+2,measure_inductance@Lin+2
  2211  0025A8  C011  F098         	movff	?___fldiv+3,measure_inductance@Lin+3
  2212                           
  2213                           ;measure.c: 229: unit = 2;
  2214  0025AC  0E02               	movlw	2
  2215  0025AE  D001               	goto	L1
  2216  0025B0                     l4499:
  2217                           
  2218                           ;measure.c: 232: unit = 3;
  2219  0025B0  0E03               	movlw	3
  2220  0025B2                     L1:
  2221  0025B2  0100               	movlb	0	; () banked
  2222  0025B4  6F86               	movwf	measure_inductance@unit& (0+255),b
  2223  0025B6                     l4501:
  2224                           
  2225                           ; BSR set to: 0
  2226                           ;measure.c: 234: Lin = Lin * 100;
  2227  0025B6  C095  F01D         	movff	measure_inductance@Lin,___flmul@f1
  2228  0025BA  C096  F01E         	movff	measure_inductance@Lin+1,___flmul@f1+1
  2229  0025BE  C097  F01F         	movff	measure_inductance@Lin+2,___flmul@f1+2
  2230  0025C2  C098  F020         	movff	measure_inductance@Lin+3,___flmul@f1+3
  2231  0025C6  0E00               	movlw	0
  2232  0025C8  6E21               	movwf	___flmul@f2,c
  2233  0025CA  6E22               	movwf	___flmul@f2+1,c
  2234  0025CC  0EC8               	movlw	200
  2235  0025CE  6E23               	movwf	___flmul@f2+2,c
  2236  0025D0  0E42               	movlw	66
  2237  0025D2  6E24               	movwf	___flmul@f2+3,c
  2238  0025D4  EC2B  F016         	call	___flmul	;wreg free
  2239  0025D8  C01D  F095         	movff	?___flmul,measure_inductance@Lin
  2240  0025DC  C01E  F096         	movff	?___flmul+1,measure_inductance@Lin+1
  2241  0025E0  C01F  F097         	movff	?___flmul+2,measure_inductance@Lin+2
  2242  0025E4  C020  F098         	movff	?___flmul+3,measure_inductance@Lin+3
  2243                           
  2244                           ;measure.c: 235: var = (uint16_t)Lin;
  2245  0025E8  C095  F064         	movff	measure_inductance@Lin,___fltol@f1
  2246  0025EC  C096  F065         	movff	measure_inductance@Lin+1,___fltol@f1+1
  2247  0025F0  C097  F066         	movff	measure_inductance@Lin+2,___fltol@f1+2
  2248  0025F4  C098  F067         	movff	measure_inductance@Lin+3,___fltol@f1+3
  2249  0025F8  ECED  F01D         	call	___fltol	;wreg free
  2250  0025FC  C064  F093         	movff	?___fltol,measure_inductance@var
  2251  002600  C065  F094         	movff	?___fltol+1,measure_inductance@var+1
  2252                           
  2253                           ; BSR set to: 0
  2254                           ;measure.c: 237: print_reading(var);
  2255  002604  C093  F036         	movff	measure_inductance@var,print_reading@measurement
  2256  002608  C094  F037         	movff	measure_inductance@var+1,print_reading@measurement+1
  2257  00260C  ECC4  F01E         	call	_print_reading	;wreg free
  2258                           
  2259                           ;measure.c: 238: print_unit(unit);
  2260  002610  0100               	movlb	0	; () banked
  2261  002612  5186               	movf	measure_inductance@unit& (0+255),w,b
  2262  002614  EC49  F021         	call	_print_unit
  2263  002618  0012               	return		;funcret
  2264  00261A                     __end_of_measure_inductance:
  2265                           	opt stack 0
  2266                           tblptru	equ	0xFF8
  2267                           tblptrh	equ	0xFF7
  2268                           tblptrl	equ	0xFF6
  2269                           tablat	equ	0xFF5
  2270                           intcon	equ	0xFF2
  2271                           intcon2	equ	0xFF1
  2272                           postinc0	equ	0xFEE
  2273                           wreg	equ	0xFE8
  2274                           postdec1	equ	0xFE5
  2275                           fsr1l	equ	0xFE1
  2276                           status	equ	0xFD8
  2277                           
  2278 ;; *************** function _measure_capacitance *****************
  2279 ;; Defined at:
  2280 ;;		line 118 in file "../../../src/measure.c"
  2281 ;; Parameters:    Size  Location     Type
  2282 ;;		None
  2283 ;; Auto vars:     Size  Location     Type
  2284 ;;  Cin             4   15[BANK1 ] unsigned char 
  2285 ;;  var             2   13[BANK1 ] unsigned int 
  2286 ;;  unit            1   12[BANK1 ] unsigned char 
  2287 ;; Return value:  Size  Location     Type
  2288 ;;		None               void
  2289 ;; Registers used:
  2290 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2291 ;; Tracked objects:
  2292 ;;		On entry : 0/0
  2293 ;;		On exit  : 0/0
  2294 ;;		Unchanged: 0/0
  2295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2296 ;;      Params:         0       0       0       0       0       0       0       0       0
  2297 ;;      Locals:         0       0      19       0       0       0       0       0       0
  2298 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2299 ;;      Totals:         0       0      19       0       0       0       0       0       0
  2300 ;;Total ram usage:       19 bytes
  2301 ;; Hardware stack levels used:    1
  2302 ;; Hardware stack levels required when called:    7
  2303 ;; This function calls:
  2304 ;;		___fldiv
  2305 ;;		___flge
  2306 ;;		___flmul
  2307 ;;		___flsub
  2308 ;;		___fltol
  2309 ;;		___lwtofl
  2310 ;;		_format_double
  2311 ;;		_format_xint32
  2312 ;;		_lcd_gotoxy
  2313 ;;		_measure_freq
  2314 ;;		_print_reading
  2315 ;;		_print_unit
  2316 ;;		_put_str
  2317 ;;		_ser_putch
  2318 ;;		_ser_puts
  2319 ;; This function is called by:
  2320 ;;		_main
  2321 ;; This function uses a non-reentrant model
  2322 ;;
  2323                           
  2324                           	psect	text5
  2325  00261A                     __ptext5:
  2326                           	opt stack 0
  2327  00261A                     _measure_capacitance:
  2328                           	opt stack 23
  2329                           
  2330                           ;measure.c: 119: uint8_t unit;
  2331                           ;measure.c: 120: uint16_t var;
  2332                           ;measure.c: 122: double Cin;
  2333                           ;measure.c: 126: lcd_gotoxy(0, 0);
  2334                           
  2335                           ;incstack = 0
  2336  00261A  0E00               	movlw	0
  2337  00261C  6A08               	clrf	lcd_gotoxy@row,c
  2338  00261E  EC9C  F020         	call	_lcd_gotoxy
  2339                           
  2340                           ;measure.c: 127: put_str("Capacity ");
  2341  002622  0E97               	movlw	STR_18& (0+255)
  2342  002624  ECEC  F020         	call	_put_str
  2343                           
  2344                           ;measure.c: 129: var = measure_freq();
  2345  002628  EC50  F01A         	call	_measure_freq	;wreg free
  2346  00262C  C036  F12D         	movff	?_measure_freq,measure_capacitance@var
  2347  002630  C037  F12E         	movff	?_measure_freq+1,measure_capacitance@var+1
  2348                           
  2349                           ;measure.c: 131: F3 = (double)var;
  2350  002634  C12D  F03B         	movff	measure_capacitance@var,___lwtofl@c
  2351  002638  C12E  F03C         	movff	measure_capacitance@var+1,___lwtofl@c+1
  2352  00263C  EC5E  F021         	call	___lwtofl	;wreg free
  2353  002640  C03B  F0B5         	movff	?___lwtofl,_F3
  2354  002644  C03C  F0B6         	movff	?___lwtofl+1,_F3+1
  2355  002648  C03D  F0B7         	movff	?___lwtofl+2,_F3+2
  2356  00264C  C03E  F0B8         	movff	?___lwtofl+3,_F3+3
  2357                           
  2358                           ;measure.c: 134: ser_puts("var=");
  2359  002650  0ED8               	movlw	STR_19& (0+255)
  2360  002652  ECCB  F021         	call	_ser_puts
  2361                           
  2362                           ;measure.c: 135: format_xint32( var);
  2363  002656  C12D  F036         	movff	measure_capacitance@var,format_xint32@x
  2364  00265A  C12E  F037         	movff	measure_capacitance@var+1,format_xint32@x+1
  2365  00265E  6A38               	clrf	format_xint32@x+2,c
  2366  002660  6A39               	clrf	format_xint32@x+3,c
  2367  002662  ECB8  F020         	call	_format_xint32	;wreg free
  2368                           
  2369                           ;measure.c: 136: ser_puts("\r\nF1=");
  2370  002666  0EB6               	movlw	STR_20& (0+255)
  2371  002668  ECCB  F021         	call	_ser_puts
  2372                           
  2373                           ;measure.c: 137: format_double( F1);
  2374  00266C  C0DE  F09D         	movff	_F1,format_double@num
  2375  002670  C0DF  F09E         	movff	_F1+1,format_double@num+1
  2376  002674  C0E0  F09F         	movff	_F1+2,format_double@num+2
  2377  002678  C0E1  F0A0         	movff	_F1+3,format_double@num+3
  2378  00267C  EC0A  F017         	call	_format_double	;wreg free
  2379                           
  2380                           ;measure.c: 138: ser_putch(' ');
  2381  002680  0E20               	movlw	32
  2382  002682  EC73  F021         	call	_ser_putch
  2383                           
  2384                           ;measure.c: 139: format_xint32( *(uint32_t*)&F1);
  2385  002686  C0DE  F036         	movff	_F1,format_xint32@x
  2386  00268A  C0DF  F037         	movff	_F1+1,format_xint32@x+1
  2387  00268E  C0E0  F038         	movff	_F1+2,format_xint32@x+2
  2388  002692  C0E1  F039         	movff	_F1+3,format_xint32@x+3
  2389  002696  ECB8  F020         	call	_format_xint32	;wreg free
  2390                           
  2391                           ;measure.c: 140: ser_puts("\r\nF2=");
  2392  00269A  0EBC               	movlw	STR_21& (0+255)
  2393  00269C  ECCB  F021         	call	_ser_puts
  2394                           
  2395                           ;measure.c: 141: format_double( F2);
  2396  0026A0  C0B1  F09D         	movff	_F2,format_double@num
  2397  0026A4  C0B2  F09E         	movff	_F2+1,format_double@num+1
  2398  0026A8  C0B3  F09F         	movff	_F2+2,format_double@num+2
  2399  0026AC  C0B4  F0A0         	movff	_F2+3,format_double@num+3
  2400  0026B0  EC0A  F017         	call	_format_double	;wreg free
  2401                           
  2402                           ;measure.c: 142: ser_putch(' ');
  2403  0026B4  0E20               	movlw	32
  2404  0026B6  EC73  F021         	call	_ser_putch
  2405                           
  2406                           ;measure.c: 143: format_xint32( *(uint32_t*)&F2);
  2407  0026BA  C0B1  F036         	movff	_F2,format_xint32@x
  2408  0026BE  C0B2  F037         	movff	_F2+1,format_xint32@x+1
  2409  0026C2  C0B3  F038         	movff	_F2+2,format_xint32@x+2
  2410  0026C6  C0B4  F039         	movff	_F2+3,format_xint32@x+3
  2411  0026CA  ECB8  F020         	call	_format_xint32	;wreg free
  2412                           
  2413                           ;measure.c: 144: ser_puts("\r\nF3=");
  2414  0026CE  0EC2               	movlw	STR_22& (0+255)
  2415  0026D0  ECCB  F021         	call	_ser_puts
  2416                           
  2417                           ;measure.c: 145: format_double( F3);
  2418  0026D4  C0B5  F09D         	movff	_F3,format_double@num
  2419  0026D8  C0B6  F09E         	movff	_F3+1,format_double@num+1
  2420  0026DC  C0B7  F09F         	movff	_F3+2,format_double@num+2
  2421  0026E0  C0B8  F0A0         	movff	_F3+3,format_double@num+3
  2422  0026E4  EC0A  F017         	call	_format_double	;wreg free
  2423                           
  2424                           ;measure.c: 146: ser_putch(' ');
  2425  0026E8  0E20               	movlw	32
  2426  0026EA  EC73  F021         	call	_ser_putch
  2427                           
  2428                           ;measure.c: 147: format_xint32( *(uint32_t*)&F3);
  2429  0026EE  C0B5  F036         	movff	_F3,format_xint32@x
  2430  0026F2  C0B6  F037         	movff	_F3+1,format_xint32@x+1
  2431  0026F6  C0B7  F038         	movff	_F3+2,format_xint32@x+2
  2432  0026FA  C0B8  F039         	movff	_F3+3,format_xint32@x+3
  2433  0026FE  ECB8  F020         	call	_format_xint32	;wreg free
  2434                           
  2435                           ;measure.c: 148: ser_puts("\r\nCCal=");
  2436  002702  0EA1               	movlw	STR_23& (0+255)
  2437  002704  ECCB  F021         	call	_ser_puts
  2438                           
  2439                           ;measure.c: 149: format_double( CCal);
  2440  002708  C0E2  F09D         	movff	_CCal,format_double@num
  2441  00270C  C0E3  F09E         	movff	_CCal+1,format_double@num+1
  2442  002710  C0E4  F09F         	movff	_CCal+2,format_double@num+2
  2443  002714  C0E5  F0A0         	movff	_CCal+3,format_double@num+3
  2444  002718  EC0A  F017         	call	_format_double	;wreg free
  2445                           
  2446                           ;measure.c: 150: ser_putch(' ');
  2447  00271C  0E20               	movlw	32
  2448  00271E  EC73  F021         	call	_ser_putch
  2449                           
  2450                           ;measure.c: 151: format_xint32( *(uint32_t*)&CCal);
  2451  002722  C0E2  F036         	movff	_CCal,format_xint32@x
  2452  002726  C0E3  F037         	movff	_CCal+1,format_xint32@x+1
  2453  00272A  C0E4  F038         	movff	_CCal+2,format_xint32@x+2
  2454  00272E  C0E5  F039         	movff	_CCal+3,format_xint32@x+3
  2455  002732  ECB8  F020         	call	_format_xint32	;wreg free
  2456                           
  2457                           ;measure.c: 152: ser_puts("\r\n");
  2458  002736  0EB3               	movlw	(STR_29+3)& (0+255)
  2459  002738  ECCB  F021         	call	_ser_puts
  2460                           
  2461                           ;measure.c: 156: if(F3 > F1)
  2462  00273C  C0DE  F004         	movff	_F1,___flge@ff1
  2463  002740  C0DF  F005         	movff	_F1+1,___flge@ff1+1
  2464  002744  C0E0  F006         	movff	_F1+2,___flge@ff1+2
  2465  002748  C0E1  F007         	movff	_F1+3,___flge@ff1+3
  2466  00274C  C0B5  F008         	movff	_F3,___flge@ff2
  2467  002750  C0B6  F009         	movff	_F3+1,___flge@ff2+1
  2468  002754  C0B7  F00A         	movff	_F3+2,___flge@ff2+2
  2469  002758  C0B8  F00B         	movff	_F3+3,___flge@ff2+3
  2470  00275C  EC86  F01F         	call	___flge	;wreg free
  2471  002760  E208               	bc	l4409
  2472                           
  2473                           ;measure.c: 157: F3 = F1;
  2474  002762  C0DE  F0B5         	movff	_F1,_F3
  2475  002766  C0DF  F0B6         	movff	_F1+1,_F3+1
  2476  00276A  C0E0  F0B7         	movff	_F1+2,_F3+2
  2477  00276E  C0E1  F0B8         	movff	_F1+3,_F3+3
  2478  002772                     l4409:
  2479                           
  2480                           ;measure.c: 159: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2481  002772  C0B5  F021         	movff	_F3,___flmul@f2
  2482  002776  C0B6  F022         	movff	_F3+1,___flmul@f2+1
  2483  00277A  C0B7  F023         	movff	_F3+2,___flmul@f2+2
  2484  00277E  C0B8  F024         	movff	_F3+3,___flmul@f2+3
  2485  002782  C0B5  F01D         	movff	_F3,___flmul@f1
  2486  002786  C0B6  F01E         	movff	_F3+1,___flmul@f1+1
  2487  00278A  C0B7  F01F         	movff	_F3+2,___flmul@f1+2
  2488  00278E  C0B8  F020         	movff	_F3+3,___flmul@f1+3
  2489  002792  EC2B  F016         	call	___flmul	;wreg free
  2490  002796  C01D  F048         	movff	?___flmul,___flsub@f2
  2491  00279A  C01E  F049         	movff	?___flmul+1,___flsub@f2+1
  2492  00279E  C01F  F04A         	movff	?___flmul+2,___flsub@f2+2
  2493  0027A2  C020  F04B         	movff	?___flmul+3,___flsub@f2+3
  2494  0027A6  C0DE  F021         	movff	_F1,___flmul@f2
  2495  0027AA  C0DF  F022         	movff	_F1+1,___flmul@f2+1
  2496  0027AE  C0E0  F023         	movff	_F1+2,___flmul@f2+2
  2497  0027B2  C0E1  F024         	movff	_F1+3,___flmul@f2+3
  2498  0027B6  C0DE  F01D         	movff	_F1,___flmul@f1
  2499  0027BA  C0DF  F01E         	movff	_F1+1,___flmul@f1+1
  2500  0027BE  C0E0  F01F         	movff	_F1+2,___flmul@f1+2
  2501  0027C2  C0E1  F020         	movff	_F1+3,___flmul@f1+3
  2502  0027C6  EC2B  F016         	call	___flmul	;wreg free
  2503  0027CA  C01D  F044         	movff	?___flmul,___flsub@f1
  2504  0027CE  C01E  F045         	movff	?___flmul+1,___flsub@f1+1
  2505  0027D2  C01F  F046         	movff	?___flmul+2,___flsub@f1+2
  2506  0027D6  C020  F047         	movff	?___flmul+3,___flsub@f1+3
  2507  0027DA  EC3E  F020         	call	___flsub	;wreg free
  2508  0027DE  C044  F120         	movff	?___flsub,_measure_capacitance$1115
  2509  0027E2  C045  F121         	movff	?___flsub+1,_measure_capacitance$1115+1
  2510  0027E6  C046  F122         	movff	?___flsub+2,_measure_capacitance$1115+2
  2511  0027EA  C047  F123         	movff	?___flsub+3,_measure_capacitance$1115+3
  2512                           
  2513                           ;measure.c: 159: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2514  0027EE  C0B1  F021         	movff	_F2,___flmul@f2
  2515  0027F2  C0B2  F022         	movff	_F2+1,___flmul@f2+1
  2516  0027F6  C0B3  F023         	movff	_F2+2,___flmul@f2+2
  2517  0027FA  C0B4  F024         	movff	_F2+3,___flmul@f2+3
  2518  0027FE  C120  F01D         	movff	_measure_capacitance$1115,___flmul@f1
  2519  002802  C121  F01E         	movff	_measure_capacitance$1115+1,___flmul@f1+1
  2520  002806  C122  F01F         	movff	_measure_capacitance$1115+2,___flmul@f1+2
  2521  00280A  C123  F020         	movff	_measure_capacitance$1115+3,___flmul@f1+3
  2522  00280E  EC2B  F016         	call	___flmul	;wreg free
  2523  002812  C01D  F124         	movff	?___flmul,_measure_capacitance$1116
  2524  002816  C01E  F125         	movff	?___flmul+1,_measure_capacitance$1116+1
  2525  00281A  C01F  F126         	movff	?___flmul+2,_measure_capacitance$1116+2
  2526  00281E  C020  F127         	movff	?___flmul+3,_measure_capacitance$1116+3
  2527                           
  2528                           ;measure.c: 159: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2529  002822  C0B1  F021         	movff	_F2,___flmul@f2
  2530  002826  C0B2  F022         	movff	_F2+1,___flmul@f2+1
  2531  00282A  C0B3  F023         	movff	_F2+2,___flmul@f2+2
  2532  00282E  C0B4  F024         	movff	_F2+3,___flmul@f2+3
  2533  002832  C124  F01D         	movff	_measure_capacitance$1116,___flmul@f1
  2534  002836  C125  F01E         	movff	_measure_capacitance$1116+1,___flmul@f1+1
  2535  00283A  C126  F01F         	movff	_measure_capacitance$1116+2,___flmul@f1+2
  2536  00283E  C127  F020         	movff	_measure_capacitance$1116+3,___flmul@f1+3
  2537  002842  EC2B  F016         	call	___flmul	;wreg free
  2538  002846  C01D  F128         	movff	?___flmul,_measure_capacitance$1117
  2539  00284A  C01E  F129         	movff	?___flmul+1,_measure_capacitance$1117+1
  2540  00284E  C01F  F12A         	movff	?___flmul+2,_measure_capacitance$1117+2
  2541  002852  C020  F12B         	movff	?___flmul+3,_measure_capacitance$1117+3
  2542                           
  2543                           ;measure.c: 159: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2544  002856  C128  F01D         	movff	_measure_capacitance$1117,___flmul@f1
  2545  00285A  C129  F01E         	movff	_measure_capacitance$1117+1,___flmul@f1+1
  2546  00285E  C12A  F01F         	movff	_measure_capacitance$1117+2,___flmul@f1+2
  2547  002862  C12B  F020         	movff	_measure_capacitance$1117+3,___flmul@f1+3
  2548  002866  C0E2  F021         	movff	_CCal,___flmul@f2
  2549  00286A  C0E3  F022         	movff	_CCal+1,___flmul@f2+1
  2550  00286E  C0E4  F023         	movff	_CCal+2,___flmul@f2+2
  2551  002872  C0E5  F024         	movff	_CCal+3,___flmul@f2+3
  2552  002876  EC2B  F016         	call	___flmul	;wreg free
  2553  00287A  C01D  F12F         	movff	?___flmul,measure_capacitance@Cin
  2554  00287E  C01E  F130         	movff	?___flmul+1,measure_capacitance@Cin+1
  2555  002882  C01F  F131         	movff	?___flmul+2,measure_capacitance@Cin+2
  2556  002886  C020  F132         	movff	?___flmul+3,measure_capacitance@Cin+3
  2557                           
  2558                           ;measure.c: 163: ser_puts("Cin=");
  2559  00288A  0ED3               	movlw	STR_25& (0+255)
  2560  00288C  ECCB  F021         	call	_ser_puts
  2561                           
  2562                           ;measure.c: 164: format_double( Cin);
  2563  002890  C12F  F09D         	movff	measure_capacitance@Cin,format_double@num
  2564  002894  C130  F09E         	movff	measure_capacitance@Cin+1,format_double@num+1
  2565  002898  C131  F09F         	movff	measure_capacitance@Cin+2,format_double@num+2
  2566  00289C  C132  F0A0         	movff	measure_capacitance@Cin+3,format_double@num+3
  2567  0028A0  EC0A  F017         	call	_format_double	;wreg free
  2568                           
  2569                           ;measure.c: 165: ser_putch(' ');
  2570  0028A4  0E20               	movlw	32
  2571  0028A6  EC73  F021         	call	_ser_putch
  2572                           
  2573                           ;measure.c: 166: format_xint32( *(uint32_t*)&Cin);
  2574  0028AA  C12F  F036         	movff	measure_capacitance@Cin,format_xint32@x
  2575  0028AE  C130  F037         	movff	measure_capacitance@Cin+1,format_xint32@x+1
  2576  0028B2  C131  F038         	movff	measure_capacitance@Cin+2,format_xint32@x+2
  2577  0028B6  C132  F039         	movff	measure_capacitance@Cin+3,format_xint32@x+3
  2578  0028BA  ECB8  F020         	call	_format_xint32	;wreg free
  2579                           
  2580                           ;measure.c: 167: ser_puts("\r\n");
  2581  0028BE  0EB3               	movlw	(STR_29+3)& (0+255)
  2582  0028C0  ECCB  F021         	call	_ser_puts
  2583                           
  2584                           ;measure.c: 169: if(Cin > 999) {
  2585  0028C4  6A04               	clrf	___flge@ff1,c
  2586  0028C6  0EC0               	movlw	192
  2587  0028C8  6E05               	movwf	___flge@ff1+1,c
  2588  0028CA  0E79               	movlw	121
  2589  0028CC  6E06               	movwf	___flge@ff1+2,c
  2590  0028CE  0E44               	movlw	68
  2591  0028D0  6E07               	movwf	___flge@ff1+3,c
  2592  0028D2  C12F  F008         	movff	measure_capacitance@Cin,___flge@ff2
  2593  0028D6  C130  F009         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2594  0028DA  C131  F00A         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2595  0028DE  C132  F00B         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2596  0028E2  EC86  F01F         	call	___flge	;wreg free
  2597  0028E6  E279               	bc	l4435
  2598                           
  2599                           ;measure.c: 170: if(Cin > (999e+03l)) {
  2600  0028E8  0E80               	movlw	128
  2601  0028EA  6E04               	movwf	___flge@ff1,c
  2602  0028EC  0EE5               	movlw	229
  2603  0028EE  6E05               	movwf	___flge@ff1+1,c
  2604  0028F0  0E73               	movlw	115
  2605  0028F2  6E06               	movwf	___flge@ff1+2,c
  2606  0028F4  0E49               	movlw	73
  2607  0028F6  6E07               	movwf	___flge@ff1+3,c
  2608  0028F8  C12F  F008         	movff	measure_capacitance@Cin,___flge@ff2
  2609  0028FC  C130  F009         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2610  002900  C131  F00A         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2611  002904  C132  F00B         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2612  002908  EC86  F01F         	call	___flge	;wreg free
  2613  00290C  E24B               	bc	l4431
  2614                           
  2615                           ;measure.c: 171: if(Cin > (999e+06l)) {
  2616  00290E  0E1F               	movlw	31
  2617  002910  6E04               	movwf	___flge@ff1,c
  2618  002912  0E2E               	movlw	46
  2619  002914  6E05               	movwf	___flge@ff1+1,c
  2620  002916  0E6E               	movlw	110
  2621  002918  6E06               	movwf	___flge@ff1+2,c
  2622  00291A  0E4E               	movlw	78
  2623  00291C  6E07               	movwf	___flge@ff1+3,c
  2624  00291E  C12F  F008         	movff	measure_capacitance@Cin,___flge@ff2
  2625  002922  C130  F009         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2626  002926  C131  F00A         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2627  00292A  C132  F00B         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2628  00292E  EC86  F01F         	call	___flge	;wreg free
  2629  002932  E21C               	bc	l4427
  2630                           
  2631                           ;measure.c: 172: Cin = Cin / (1e+09);
  2632  002934  C12F  F00E         	movff	measure_capacitance@Cin,___fldiv@f1
  2633  002938  C130  F00F         	movff	measure_capacitance@Cin+1,___fldiv@f1+1
  2634  00293C  C131  F010         	movff	measure_capacitance@Cin+2,___fldiv@f1+2
  2635  002940  C132  F011         	movff	measure_capacitance@Cin+3,___fldiv@f1+3
  2636  002944  0E28               	movlw	40
  2637  002946  6E12               	movwf	___fldiv@f2,c
  2638  002948  0E6B               	movlw	107
  2639  00294A  6E13               	movwf	___fldiv@f2+1,c
  2640  00294C  0E6E               	movlw	110
  2641  00294E  6E14               	movwf	___fldiv@f2+2,c
  2642  002950  0E4E               	movlw	78
  2643  002952  6E15               	movwf	___fldiv@f2+3,c
  2644  002954  EC9A  F01D         	call	___fldiv	;wreg free
  2645  002958  C00E  F12F         	movff	?___fldiv,measure_capacitance@Cin
  2646  00295C  C00F  F130         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2647  002960  C010  F131         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2648  002964  C011  F132         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2649                           
  2650                           ;measure.c: 173: unit = 4;
  2651  002968  0E04               	movlw	4
  2652  00296A  D038               	goto	L2
  2653  00296C                     l4427:
  2654                           
  2655                           ;measure.c: 175: Cin = Cin / (1e+06);
  2656  00296C  C12F  F00E         	movff	measure_capacitance@Cin,___fldiv@f1
  2657  002970  C130  F00F         	movff	measure_capacitance@Cin+1,___fldiv@f1+1
  2658  002974  C131  F010         	movff	measure_capacitance@Cin+2,___fldiv@f1+2
  2659  002978  C132  F011         	movff	measure_capacitance@Cin+3,___fldiv@f1+3
  2660  00297C  0E00               	movlw	0
  2661  00297E  6E12               	movwf	___fldiv@f2,c
  2662  002980  0E24               	movlw	36
  2663  002982  6E13               	movwf	___fldiv@f2+1,c
  2664  002984  0E74               	movlw	116
  2665  002986  6E14               	movwf	___fldiv@f2+2,c
  2666  002988  0E49               	movlw	73
  2667  00298A  6E15               	movwf	___fldiv@f2+3,c
  2668  00298C  EC9A  F01D         	call	___fldiv	;wreg free
  2669  002990  C00E  F12F         	movff	?___fldiv,measure_capacitance@Cin
  2670  002994  C00F  F130         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2671  002998  C010  F131         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2672  00299C  C011  F132         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2673                           
  2674                           ;measure.c: 176: unit = 5;
  2675  0029A0  0E05               	movlw	5
  2676  0029A2  D01C               	goto	L2
  2677  0029A4                     l4431:
  2678                           
  2679                           ;measure.c: 179: Cin = Cin / 1e+03;
  2680  0029A4  C12F  F00E         	movff	measure_capacitance@Cin,___fldiv@f1
  2681  0029A8  C130  F00F         	movff	measure_capacitance@Cin+1,___fldiv@f1+1
  2682  0029AC  C131  F010         	movff	measure_capacitance@Cin+2,___fldiv@f1+2
  2683  0029B0  C132  F011         	movff	measure_capacitance@Cin+3,___fldiv@f1+3
  2684  0029B4  0E00               	movlw	0
  2685  0029B6  6E12               	movwf	___fldiv@f2,c
  2686  0029B8  6E13               	movwf	___fldiv@f2+1,c
  2687  0029BA  0E7A               	movlw	122
  2688  0029BC  6E14               	movwf	___fldiv@f2+2,c
  2689  0029BE  0E44               	movlw	68
  2690  0029C0  6E15               	movwf	___fldiv@f2+3,c
  2691  0029C2  EC9A  F01D         	call	___fldiv	;wreg free
  2692  0029C6  C00E  F12F         	movff	?___fldiv,measure_capacitance@Cin
  2693  0029CA  C00F  F130         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2694  0029CE  C010  F131         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2695  0029D2  C011  F132         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2696                           
  2697                           ;measure.c: 180: unit = 6;
  2698  0029D6  0E06               	movlw	6
  2699  0029D8  D001               	goto	L2
  2700  0029DA                     l4435:
  2701                           
  2702                           ;measure.c: 183: unit = 7;
  2703  0029DA  0E07               	movlw	7
  2704  0029DC                     L2:
  2705  0029DC  0101               	movlb	1	; () banked
  2706  0029DE  6F2C               	movwf	measure_capacitance@unit& (0+255),b
  2707                           
  2708                           ; BSR set to: 1
  2709                           ;measure.c: 185: Cin = Cin * 100;
  2710  0029E0  C12F  F01D         	movff	measure_capacitance@Cin,___flmul@f1
  2711  0029E4  C130  F01E         	movff	measure_capacitance@Cin+1,___flmul@f1+1
  2712  0029E8  C131  F01F         	movff	measure_capacitance@Cin+2,___flmul@f1+2
  2713  0029EC  C132  F020         	movff	measure_capacitance@Cin+3,___flmul@f1+3
  2714  0029F0  0E00               	movlw	0
  2715  0029F2  6E21               	movwf	___flmul@f2,c
  2716  0029F4  6E22               	movwf	___flmul@f2+1,c
  2717  0029F6  0EC8               	movlw	200
  2718  0029F8  6E23               	movwf	___flmul@f2+2,c
  2719  0029FA  0E42               	movlw	66
  2720  0029FC  6E24               	movwf	___flmul@f2+3,c
  2721  0029FE  EC2B  F016         	call	___flmul	;wreg free
  2722  002A02  C01D  F12F         	movff	?___flmul,measure_capacitance@Cin
  2723  002A06  C01E  F130         	movff	?___flmul+1,measure_capacitance@Cin+1
  2724  002A0A  C01F  F131         	movff	?___flmul+2,measure_capacitance@Cin+2
  2725  002A0E  C020  F132         	movff	?___flmul+3,measure_capacitance@Cin+3
  2726                           
  2727                           ;measure.c: 186: var = (uint16_t)Cin;
  2728  002A12  C12F  F064         	movff	measure_capacitance@Cin,___fltol@f1
  2729  002A16  C130  F065         	movff	measure_capacitance@Cin+1,___fltol@f1+1
  2730  002A1A  C131  F066         	movff	measure_capacitance@Cin+2,___fltol@f1+2
  2731  002A1E  C132  F067         	movff	measure_capacitance@Cin+3,___fltol@f1+3
  2732  002A22  ECED  F01D         	call	___fltol	;wreg free
  2733  002A26  C064  F12D         	movff	?___fltol,measure_capacitance@var
  2734  002A2A  C065  F12E         	movff	?___fltol+1,measure_capacitance@var+1
  2735                           
  2736                           ; BSR set to: 0
  2737                           ;measure.c: 188: print_reading(var);
  2738  002A2E  C12D  F036         	movff	measure_capacitance@var,print_reading@measurement
  2739  002A32  C12E  F037         	movff	measure_capacitance@var+1,print_reading@measurement+1
  2740  002A36  ECC4  F01E         	call	_print_reading	;wreg free
  2741                           
  2742                           ;measure.c: 189: print_unit(unit);
  2743  002A3A  0101               	movlb	1	; () banked
  2744  002A3C  512C               	movf	measure_capacitance@unit& (0+255),w,b
  2745  002A3E  EC49  F021         	call	_print_unit
  2746  002A42  0012               	return		;funcret
  2747  002A44                     __end_of_measure_capacitance:
  2748                           	opt stack 0
  2749                           tblptru	equ	0xFF8
  2750                           tblptrh	equ	0xFF7
  2751                           tblptrl	equ	0xFF6
  2752                           tablat	equ	0xFF5
  2753                           intcon	equ	0xFF2
  2754                           intcon2	equ	0xFF1
  2755                           postinc0	equ	0xFEE
  2756                           wreg	equ	0xFE8
  2757                           postdec1	equ	0xFE5
  2758                           fsr1l	equ	0xFE1
  2759                           status	equ	0xFD8
  2760                           
  2761 ;; *************** function _print_unit *****************
  2762 ;; Defined at:
  2763 ;;		line 412 in file "../../../src/print.c"
  2764 ;; Parameters:    Size  Location     Type
  2765 ;;  unit            1    wreg     unsigned char 
  2766 ;; Auto vars:     Size  Location     Type
  2767 ;;  unit            1    0[COMRAM] unsigned char 
  2768 ;; Return value:  Size  Location     Type
  2769 ;;		None               void
  2770 ;; Registers used:
  2771 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2772 ;; Tracked objects:
  2773 ;;		On entry : E/0
  2774 ;;		On exit  : 0/0
  2775 ;;		Unchanged: 0/0
  2776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2777 ;;      Params:         0       0       0       0       0       0       0       0       0
  2778 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2779 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2780 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2781 ;;Total ram usage:        2 bytes
  2782 ;; Hardware stack levels used:    1
  2783 ;; Hardware stack levels required when called:    5
  2784 ;; This function calls:
  2785 ;;		_lcd_gotoxy
  2786 ;;		_ser_puts
  2787 ;; This function is called by:
  2788 ;;		_measure_capacitance
  2789 ;;		_measure_inductance
  2790 ;; This function uses a non-reentrant model
  2791 ;;
  2792                           
  2793                           	psect	text6
  2794  004292                     __ptext6:
  2795                           	opt stack 0
  2796  004292                     _print_unit:
  2797                           	opt stack 24
  2798                           
  2799                           ;print.c: 420: static const char* units[8] = {"H", "mH", "uH", "nH", "mF", "uF", "nF", "
      +                          pF"};
  2800                           ;print.c: 421: lcd_gotoxy(14, 0);
  2801                           
  2802                           ;incstack = 0
  2803  004292  6A08               	clrf	lcd_gotoxy@row,c
  2804  004294  0E0E               	movlw	14
  2805  004296  EC9C  F020         	call	_lcd_gotoxy
  2806                           
  2807                           ;print.c: 425: lcd_gotoxy(16 - (buffer.n - buffer.p), 0);
  2808  00429A  6A08               	clrf	lcd_gotoxy@row,c
  2809  00429C  0100               	movlb	0	; () banked
  2810  00429E  39DD               	swapf	(_buffer+16)& (0+255),w,b
  2811  0042A0  0B0F               	andlw	15
  2812  0042A2  6E0E               	movwf	??_print_unit& (0+255),c
  2813  0042A4  51DD               	movf	(_buffer+16)& (0+255),w,b
  2814  0042A6  0B0F               	andlw	15
  2815  0042A8  6E0F               	movwf	(??_print_unit+1)& (0+255),c
  2816  0042AA  500E               	movf	??_print_unit,w,c
  2817  0042AC  5C0F               	subwf	??_print_unit+1,w,c
  2818  0042AE  0F10               	addlw	16
  2819  0042B0  EC9C  F020         	call	_lcd_gotoxy
  2820                           
  2821                           ;print.c: 428: ser_puts("\r\n");
  2822  0042B4  0EB3               	movlw	(STR_29+3)& (0+255)
  2823  0042B6  ECCB  F021         	call	_ser_puts
  2824  0042BA  0012               	return		;funcret
  2825  0042BC                     __end_of_print_unit:
  2826                           	opt stack 0
  2827                           tblptru	equ	0xFF8
  2828                           tblptrh	equ	0xFF7
  2829                           tblptrl	equ	0xFF6
  2830                           tablat	equ	0xFF5
  2831                           intcon	equ	0xFF2
  2832                           intcon2	equ	0xFF1
  2833                           postinc0	equ	0xFEE
  2834                           wreg	equ	0xFE8
  2835                           postdec1	equ	0xFE5
  2836                           fsr1l	equ	0xFE1
  2837                           status	equ	0xFD8
  2838                           
  2839 ;; *************** function _print_reading *****************
  2840 ;; Defined at:
  2841 ;;		line 433 in file "../../../src/print.c"
  2842 ;; Parameters:    Size  Location     Type
  2843 ;;  measurement     2   53[COMRAM] unsigned int 
  2844 ;; Auto vars:     Size  Location     Type
  2845 ;;		None
  2846 ;; Return value:  Size  Location     Type
  2847 ;;		None               void
  2848 ;; Registers used:
  2849 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2850 ;; Tracked objects:
  2851 ;;		On entry : F/0
  2852 ;;		On exit  : 0/0
  2853 ;;		Unchanged: 0/0
  2854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2855 ;;      Params:         2       0       0       0       0       0       0       0       0
  2856 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2857 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2858 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2859 ;;Total ram usage:        6 bytes
  2860 ;; Hardware stack levels used:    1
  2861 ;; Hardware stack levels required when called:    5
  2862 ;; This function calls:
  2863 ;;		___lwdiv
  2864 ;;		___lwmod
  2865 ;;		_format_number
  2866 ;;		_lcd_gotoxy
  2867 ;;		_lcd_puts
  2868 ;; This function is called by:
  2869 ;;		_measure_capacitance
  2870 ;;		_measure_inductance
  2871 ;; This function uses a non-reentrant model
  2872 ;;
  2873                           
  2874                           	psect	text7
  2875  003D88                     __ptext7:
  2876                           	opt stack 0
  2877  003D88                     _print_reading:
  2878                           	opt stack 24
  2879                           
  2880                           ; BSR set to: 0
  2881                           ;print.c: 460: lcd_gotoxy(9, 0);
  2882                           
  2883                           ;incstack = 0
  2884  003D88  6A08               	clrf	lcd_gotoxy@row,c
  2885  003D8A  0E09               	movlw	9
  2886  003D8C  EC9C  F020         	call	_lcd_gotoxy
  2887                           
  2888                           ;print.c: 461: lcd_puts("     ");
  2889  003D90  0EAA               	movlw	(STR_30+1)& (0+255)
  2890  003D92  ECD3  F020         	call	_lcd_puts
  2891                           
  2892                           ;print.c: 462: lcd_gotoxy(9, 0);
  2893  003D96  6A08               	clrf	lcd_gotoxy@row,c
  2894  003D98  0E09               	movlw	9
  2895  003D9A  EC9C  F020         	call	_lcd_gotoxy
  2896                           
  2897                           ;print.c: 464: format_number( measurement / 100, 10, 0);
  2898  003D9E  C036  F004         	movff	print_reading@measurement,___lwdiv@dividend
  2899  003DA2  C037  F005         	movff	print_reading@measurement+1,___lwdiv@dividend+1
  2900  003DA6  6A07               	clrf	___lwdiv@divisor+1,c
  2901  003DA8  0E64               	movlw	100
  2902  003DAA  6E06               	movwf	___lwdiv@divisor,c
  2903  003DAC  ECD1  F01F         	call	___lwdiv	;wreg free
  2904  003DB0  C004  F038         	movff	?___lwdiv,_print_reading$1113
  2905  003DB4  C005  F039         	movff	?___lwdiv+1,_print_reading$1113+1
  2906                           
  2907                           ;print.c: 464: format_number( measurement / 100, 10, 0);
  2908  003DB8  C038  F00B         	movff	_print_reading$1113,format_number@n
  2909  003DBC  C039  F00C         	movff	_print_reading$1113+1,format_number@n+1
  2910  003DC0  0E0A               	movlw	10
  2911  003DC2  6E0D               	movwf	format_number@base,c
  2912  003DC4  6A0E               	clrf	format_number@pad,c
  2913  003DC6  EC46  F01D         	call	_format_number	;wreg free
  2914                           
  2915                           ;print.c: 466: format_number( measurement % 100, 10, 0);
  2916  003DCA  C036  F004         	movff	print_reading@measurement,___lwmod@dividend
  2917  003DCE  C037  F005         	movff	print_reading@measurement+1,___lwmod@dividend+1
  2918  003DD2  6A07               	clrf	___lwmod@divisor+1,c
  2919  003DD4  0E64               	movlw	100
  2920  003DD6  6E06               	movwf	___lwmod@divisor,c
  2921  003DD8  EC60  F020         	call	___lwmod	;wreg free
  2922  003DDC  C004  F03A         	movff	?___lwmod,_print_reading$1114
  2923  003DE0  C005  F03B         	movff	?___lwmod+1,_print_reading$1114+1
  2924                           
  2925                           ;print.c: 466: format_number( measurement % 100, 10, 0);
  2926  003DE4  C03A  F00B         	movff	_print_reading$1114,format_number@n
  2927  003DE8  C03B  F00C         	movff	_print_reading$1114+1,format_number@n+1
  2928  003DEC  0E0A               	movlw	10
  2929  003DEE  6E0D               	movwf	format_number@base,c
  2930  003DF0  6A0E               	clrf	format_number@pad,c
  2931  003DF2  EC46  F01D         	call	_format_number	;wreg free
  2932  003DF6  0012               	return		;funcret
  2933  003DF8                     __end_of_print_reading:
  2934                           	opt stack 0
  2935                           tblptru	equ	0xFF8
  2936                           tblptrh	equ	0xFF7
  2937                           tblptrl	equ	0xFF6
  2938                           tablat	equ	0xFF5
  2939                           intcon	equ	0xFF2
  2940                           intcon2	equ	0xFF1
  2941                           postinc0	equ	0xFEE
  2942                           wreg	equ	0xFE8
  2943                           postdec1	equ	0xFE5
  2944                           fsr1l	equ	0xFE1
  2945                           status	equ	0xFD8
  2946                           
  2947 ;; *************** function _format_xint32 *****************
  2948 ;; Defined at:
  2949 ;;		line 49 in file "../../../lib/format.c"
  2950 ;; Parameters:    Size  Location     Type
  2951 ;;  x               4   53[COMRAM] unsigned long 
  2952 ;; Auto vars:     Size  Location     Type
  2953 ;;		None
  2954 ;; Return value:  Size  Location     Type
  2955 ;;		None               void
  2956 ;; Registers used:
  2957 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2958 ;; Tracked objects:
  2959 ;;		On entry : 0/0
  2960 ;;		On exit  : 0/0
  2961 ;;		Unchanged: 0/0
  2962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2963 ;;      Params:         4       0       0       0       0       0       0       0       0
  2964 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2965 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2966 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2967 ;;Total ram usage:        4 bytes
  2968 ;; Hardware stack levels used:    1
  2969 ;; Hardware stack levels required when called:    3
  2970 ;; This function calls:
  2971 ;;		_buffer_putch
  2972 ;;		_format_number
  2973 ;; This function is called by:
  2974 ;;		_measure_capacitance
  2975 ;; This function uses a non-reentrant model
  2976 ;;
  2977                           
  2978                           	psect	text8
  2979  004170                     __ptext8:
  2980                           	opt stack 0
  2981  004170                     _format_xint32:
  2982                           	opt stack 26
  2983                           
  2984                           ;format.c: 50: buffer_putch('0');
  2985                           
  2986                           ;incstack = 0
  2987  004170  0E30               	movlw	48
  2988  004172  EC1A  F020         	call	_buffer_putch
  2989                           
  2990                           ;format.c: 51: buffer_putch('x');
  2991  004176  0E78               	movlw	120
  2992  004178  EC1A  F020         	call	_buffer_putch
  2993                           
  2994                           ;format.c: 52: format_number((uint16_t)(x >> 16), 16, -4);
  2995  00417C  C038  F00B         	movff	format_xint32@x+2,format_number@n
  2996  004180  C039  F00C         	movff	format_xint32@x+3,format_number@n+1
  2997  004184  0E10               	movlw	16
  2998  004186  6E0D               	movwf	format_number@base,c
  2999  004188  0EFC               	movlw	252
  3000  00418A  6E0E               	movwf	format_number@pad,c
  3001  00418C  EC46  F01D         	call	_format_number	;wreg free
  3002                           
  3003                           ;format.c: 53: format_number((uint16_t)(x & 0xffff), 16, -4);
  3004  004190  C036  F00B         	movff	format_xint32@x,format_number@n
  3005  004194  C037  F00C         	movff	format_xint32@x+1,format_number@n+1
  3006  004198  0E10               	movlw	16
  3007  00419A  6E0D               	movwf	format_number@base,c
  3008  00419C  0EFC               	movlw	252
  3009  00419E  6E0E               	movwf	format_number@pad,c
  3010  0041A0  EC46  F01D         	call	_format_number	;wreg free
  3011  0041A4  0012               	return		;funcret
  3012  0041A6                     __end_of_format_xint32:
  3013                           	opt stack 0
  3014                           tblptru	equ	0xFF8
  3015                           tblptrh	equ	0xFF7
  3016                           tblptrl	equ	0xFF6
  3017                           tablat	equ	0xFF5
  3018                           intcon	equ	0xFF2
  3019                           intcon2	equ	0xFF1
  3020                           postinc0	equ	0xFEE
  3021                           wreg	equ	0xFE8
  3022                           postdec1	equ	0xFE5
  3023                           fsr1l	equ	0xFE1
  3024                           status	equ	0xFD8
  3025                           
  3026 ;; *************** function _format_double *****************
  3027 ;; Defined at:
  3028 ;;		line 75 in file "../../../lib/format.c"
  3029 ;; Parameters:    Size  Location     Type
  3030 ;;  num             4   61[BANK0 ] unsigned long 
  3031 ;; Auto vars:     Size  Location     Type
  3032 ;;  weight          4   73[BANK0 ] unsigned long 
  3033 ;;  m               2   79[BANK0 ] short 
  3034 ;;  digit           2   77[BANK0 ] short 
  3035 ;; Return value:  Size  Location     Type
  3036 ;;		None               void
  3037 ;; Registers used:
  3038 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3039 ;; Tracked objects:
  3040 ;;		On entry : 0/0
  3041 ;;		On exit  : 0/0
  3042 ;;		Unchanged: 0/0
  3043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3044 ;;      Params:         0       4       0       0       0       0       0       0       0
  3045 ;;      Locals:         0      16       0       0       0       0       0       0       0
  3046 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3047 ;;      Totals:         0      20       0       0       0       0       0       0       0
  3048 ;;Total ram usage:       20 bytes
  3049 ;; Hardware stack levels used:    1
  3050 ;; Hardware stack levels required when called:    6
  3051 ;; This function calls:
  3052 ;;		___awtofl
  3053 ;;		___fldiv
  3054 ;;		___flge
  3055 ;;		___flmul
  3056 ;;		___flsub
  3057 ;;		___fltol
  3058 ;;		_buffer_putch
  3059 ;;		_floor
  3060 ;;		_log10
  3061 ;;		_pow
  3062 ;; This function is called by:
  3063 ;;		_measure_capacitance
  3064 ;;		_main
  3065 ;; This function uses a non-reentrant model
  3066 ;;
  3067                           
  3068                           	psect	text9
  3069  002E14                     __ptext9:
  3070                           	opt stack 0
  3071  002E14                     _format_double:
  3072                           	opt stack 23
  3073                           
  3074                           ;format.c: 76: short m = (short)log10(num);
  3075                           
  3076                           ;incstack = 0
  3077  002E14  C09D  F056         	movff	format_double@num,log10@x
  3078  002E18  C09E  F057         	movff	format_double@num+1,log10@x+1
  3079  002E1C  C09F  F058         	movff	format_double@num+2,log10@x+2
  3080  002E20  C0A0  F059         	movff	format_double@num+3,log10@x+3
  3081  002E24  EC33  F01F         	call	_log10	;wreg free
  3082  002E28  C056  F064         	movff	?_log10,___fltol@f1
  3083  002E2C  C057  F065         	movff	?_log10+1,___fltol@f1+1
  3084  002E30  C058  F066         	movff	?_log10+2,___fltol@f1+2
  3085  002E34  C059  F067         	movff	?_log10+3,___fltol@f1+3
  3086  002E38  ECED  F01D         	call	___fltol	;wreg free
  3087  002E3C  C064  F0AF         	movff	?___fltol,format_double@m
  3088  002E40  C065  F0B0         	movff	?___fltol+1,format_double@m+1
  3089                           
  3090                           ;format.c: 77: short digit;
  3091                           ;format.c: 80: while(num > 0 + 1.19209290e-07) {
  3092  002E44  D099               	goto	l4303
  3093  002E46                     l4285:
  3094                           
  3095                           ;format.c: 81: double weight = pow(10.0l, m);
  3096  002E46  C0AF  F00E         	movff	format_double@m,___awtofl@c
  3097  002E4A  C0B0  F00F         	movff	format_double@m+1,___awtofl@c+1
  3098  002E4E  EC7F  F020         	call	___awtofl	;wreg free
  3099  002E52  C00E  F0A1         	movff	?___awtofl,_format_double$1127
  3100  002E56  C00F  F0A2         	movff	?___awtofl+1,_format_double$1127+1
  3101  002E5A  C010  F0A3         	movff	?___awtofl+2,_format_double$1127+2
  3102  002E5E  C011  F0A4         	movff	?___awtofl+3,_format_double$1127+3
  3103                           
  3104                           ;format.c: 81: double weight = pow(10.0l, m);
  3105  002E62  0100               	movlb	0	; () banked
  3106  002E64  6B88               	clrf	pow@x& (0+255),b
  3107  002E66  6B89               	clrf	(pow@x+1)& (0+255),b
  3108  002E68  0E20               	movlw	32
  3109  002E6A  6F8A               	movwf	(pow@x+2)& (0+255),b
  3110  002E6C  0E41               	movlw	65
  3111  002E6E  6F8B               	movwf	(pow@x+3)& (0+255),b
  3112  002E70  C0A1  F08C         	movff	_format_double$1127,pow@y
  3113  002E74  C0A2  F08D         	movff	_format_double$1127+1,pow@y+1
  3114  002E78  C0A3  F08E         	movff	_format_double$1127+2,pow@y+2
  3115  002E7C  C0A4  F08F         	movff	_format_double$1127+3,pow@y+3
  3116  002E80  ECCE  F017         	call	_pow	;wreg free
  3117  002E84  C088  F0A9         	movff	?_pow,format_double@weight
  3118  002E88  C089  F0AA         	movff	?_pow+1,format_double@weight+1
  3119  002E8C  C08A  F0AB         	movff	?_pow+2,format_double@weight+2
  3120  002E90  C08B  F0AC         	movff	?_pow+3,format_double@weight+3
  3121                           
  3122                           ; BSR set to: 0
  3123                           ;format.c: 82: digit = (short)floor(num / weight);
  3124  002E94  C0A9  F012         	movff	format_double@weight,___fldiv@f2
  3125  002E98  C0AA  F013         	movff	format_double@weight+1,___fldiv@f2+1
  3126  002E9C  C0AB  F014         	movff	format_double@weight+2,___fldiv@f2+2
  3127  002EA0  C0AC  F015         	movff	format_double@weight+3,___fldiv@f2+3
  3128  002EA4  C09D  F00E         	movff	format_double@num,___fldiv@f1
  3129  002EA8  C09E  F00F         	movff	format_double@num+1,___fldiv@f1+1
  3130  002EAC  C09F  F010         	movff	format_double@num+2,___fldiv@f1+2
  3131  002EB0  C0A0  F011         	movff	format_double@num+3,___fldiv@f1+3
  3132  002EB4  EC9A  F01D         	call	___fldiv	;wreg free
  3133  002EB8  C00E  F073         	movff	?___fldiv,floor@x
  3134  002EBC  C00F  F074         	movff	?___fldiv+1,floor@x+1
  3135  002EC0  C010  F075         	movff	?___fldiv+2,floor@x+2
  3136  002EC4  C011  F076         	movff	?___fldiv+3,floor@x+3
  3137  002EC8  ECD3  F019         	call	_floor	;wreg free
  3138  002ECC  C073  F0A5         	movff	?_floor,_format_double$1128
  3139  002ED0  C074  F0A6         	movff	?_floor+1,_format_double$1128+1
  3140  002ED4  C075  F0A7         	movff	?_floor+2,_format_double$1128+2
  3141  002ED8  C076  F0A8         	movff	?_floor+3,_format_double$1128+3
  3142                           
  3143                           ;format.c: 82: digit = (short)floor(num / weight);
  3144  002EDC  C0A5  F064         	movff	_format_double$1128,___fltol@f1
  3145  002EE0  C0A6  F065         	movff	_format_double$1128+1,___fltol@f1+1
  3146  002EE4  C0A7  F066         	movff	_format_double$1128+2,___fltol@f1+2
  3147  002EE8  C0A8  F067         	movff	_format_double$1128+3,___fltol@f1+3
  3148  002EEC  ECED  F01D         	call	___fltol	;wreg free
  3149  002EF0  C064  F0AD         	movff	?___fltol,format_double@digit
  3150  002EF4  C065  F0AE         	movff	?___fltol+1,format_double@digit+1
  3151                           
  3152                           ; BSR set to: 0
  3153                           ;format.c: 83: num -= (digit * weight);
  3154  002EF8  C09D  F044         	movff	format_double@num,___flsub@f1
  3155  002EFC  C09E  F045         	movff	format_double@num+1,___flsub@f1+1
  3156  002F00  C09F  F046         	movff	format_double@num+2,___flsub@f1+2
  3157  002F04  C0A0  F047         	movff	format_double@num+3,___flsub@f1+3
  3158  002F08  C0A9  F021         	movff	format_double@weight,___flmul@f2
  3159  002F0C  C0AA  F022         	movff	format_double@weight+1,___flmul@f2+1
  3160  002F10  C0AB  F023         	movff	format_double@weight+2,___flmul@f2+2
  3161  002F14  C0AC  F024         	movff	format_double@weight+3,___flmul@f2+3
  3162  002F18  C0AD  F00E         	movff	format_double@digit,___awtofl@c
  3163  002F1C  C0AE  F00F         	movff	format_double@digit+1,___awtofl@c+1
  3164  002F20  EC7F  F020         	call	___awtofl	;wreg free
  3165  002F24  C00E  F01D         	movff	?___awtofl,___flmul@f1
  3166  002F28  C00F  F01E         	movff	?___awtofl+1,___flmul@f1+1
  3167  002F2C  C010  F01F         	movff	?___awtofl+2,___flmul@f1+2
  3168  002F30  C011  F020         	movff	?___awtofl+3,___flmul@f1+3
  3169  002F34  EC2B  F016         	call	___flmul	;wreg free
  3170  002F38  C01D  F048         	movff	?___flmul,___flsub@f2
  3171  002F3C  C01E  F049         	movff	?___flmul+1,___flsub@f2+1
  3172  002F40  C01F  F04A         	movff	?___flmul+2,___flsub@f2+2
  3173  002F44  C020  F04B         	movff	?___flmul+3,___flsub@f2+3
  3174  002F48  EC3E  F020         	call	___flsub	;wreg free
  3175  002F4C  C044  F09D         	movff	?___flsub,format_double@num
  3176  002F50  C045  F09E         	movff	?___flsub+1,format_double@num+1
  3177  002F54  C046  F09F         	movff	?___flsub+2,format_double@num+2
  3178  002F58  C047  F0A0         	movff	?___flsub+3,format_double@num+3
  3179                           
  3180                           ;format.c: 84: buffer_putch((char)('0' + digit));
  3181  002F5C  0100               	movlb	0	; () banked
  3182  002F5E  51AD               	movf	format_double@digit& (0+255),w,b
  3183  002F60  0F30               	addlw	48
  3184  002F62  EC1A  F020         	call	_buffer_putch
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;format.c: 85: if(m == 0)
  3188  002F66  51AF               	movf	format_double@m& (0+255),w,b
  3189  002F68  11B0               	iorwf	(format_double@m+1)& (0+255),w,b
  3190  002F6A  E103               	bnz	l4301
  3191                           
  3192                           ; BSR set to: 0
  3193                           ;format.c: 86: buffer_putch('.');
  3194  002F6C  0E2E               	movlw	46
  3195  002F6E  EC1A  F020         	call	_buffer_putch
  3196  002F72                     l4301:
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;format.c: 87: m--;
  3200  002F72  07AF               	decf	format_double@m& (0+255),f,b
  3201  002F74  A0D8               	btfss	status,0,c
  3202  002F76  07B0               	decf	(format_double@m+1)& (0+255),f,b
  3203  002F78                     l4303:
  3204                           
  3205                           ; BSR set to: 0
  3206  002F78  6A04               	clrf	___flge@ff1,c
  3207  002F7A  6A05               	clrf	___flge@ff1+1,c
  3208  002F7C  6A06               	clrf	___flge@ff1+2,c
  3209  002F7E  0E34               	movlw	52
  3210  002F80  6E07               	movwf	___flge@ff1+3,c
  3211  002F82  C09D  F008         	movff	format_double@num,___flge@ff2
  3212  002F86  C09E  F009         	movff	format_double@num+1,___flge@ff2+1
  3213  002F8A  C09F  F00A         	movff	format_double@num+2,___flge@ff2+2
  3214  002F8E  C0A0  F00B         	movff	format_double@num+3,___flge@ff2+3
  3215  002F92  EC86  F01F         	call	___flge	;wreg free
  3216  002F96  B0D8               	btfsc	status,0,c
  3217  002F98  0012               	return		;funcret
  3218  002F9A  D755               	goto	l4285
  3219  002F9C                     __end_of_format_double:
  3220                           	opt stack 0
  3221                           tblptru	equ	0xFF8
  3222                           tblptrh	equ	0xFF7
  3223                           tblptrl	equ	0xFF6
  3224                           tablat	equ	0xFF5
  3225                           intcon	equ	0xFF2
  3226                           intcon2	equ	0xFF1
  3227                           postinc0	equ	0xFEE
  3228                           wreg	equ	0xFE8
  3229                           postdec1	equ	0xFE5
  3230                           fsr1l	equ	0xFE1
  3231                           status	equ	0xFD8
  3232                           
  3233 ;; *************** function _pow *****************
  3234 ;; Defined at:
  3235 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\pow.c"
  3236 ;; Parameters:    Size  Location     Type
  3237 ;;  x               4   40[BANK0 ] short 
  3238 ;;  y               4   44[BANK0 ] short 
  3239 ;; Auto vars:     Size  Location     Type
  3240 ;;  yi              4   57[BANK0 ] unsigned long 
  3241 ;;  sign            1   56[BANK0 ] unsigned char 
  3242 ;; Return value:  Size  Location     Type
  3243 ;;                  4   40[BANK0 ] unsigned char 
  3244 ;; Registers used:
  3245 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3246 ;; Tracked objects:
  3247 ;;		On entry : F/0
  3248 ;;		On exit  : F/0
  3249 ;;		Unchanged: 0/0
  3250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3251 ;;      Params:         0       8       0       0       0       0       0       0       0
  3252 ;;      Locals:         0      13       0       0       0       0       0       0       0
  3253 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3254 ;;      Totals:         0      21       0       0       0       0       0       0       0
  3255 ;;Total ram usage:       21 bytes
  3256 ;; Hardware stack levels used:    1
  3257 ;; Hardware stack levels required when called:    5
  3258 ;; This function calls:
  3259 ;;		___flge
  3260 ;;		___flmul
  3261 ;;		___flneg
  3262 ;;		___fltol
  3263 ;;		___lltofl
  3264 ;;		_exp
  3265 ;;		_log
  3266 ;; This function is called by:
  3267 ;;		_format_double
  3268 ;; This function uses a non-reentrant model
  3269 ;;
  3270                           
  3271                           	psect	text10
  3272  002F9C                     __ptext10:
  3273                           	opt stack 0
  3274  002F9C                     _pow:
  3275                           	opt stack 23
  3276                           
  3277                           ; BSR set to: 0
  3278                           
  3279                           ;incstack = 0
  3280  002F9C  6B98               	clrf	pow@sign& (0+255),b
  3281                           
  3282                           ; BSR set to: 0
  3283  002F9E  5188               	movf	pow@x& (0+255),w,b
  3284  002FA0  1189               	iorwf	(pow@x+1)& (0+255),w,b
  3285  002FA2  118A               	iorwf	(pow@x+2)& (0+255),w,b
  3286  002FA4  118B               	iorwf	(pow@x+3)& (0+255),w,b
  3287  002FA6  E110               	bnz	l4185
  3288                           
  3289                           ; BSR set to: 0
  3290  002FA8  6A04               	clrf	___flge@ff1,c
  3291  002FAA  6A05               	clrf	___flge@ff1+1,c
  3292  002FAC  6A06               	clrf	___flge@ff1+2,c
  3293  002FAE  6A07               	clrf	___flge@ff1+3,c
  3294  002FB0  C08C  F008         	movff	pow@y,___flge@ff2
  3295  002FB4  C08D  F009         	movff	pow@y+1,___flge@ff2+1
  3296  002FB8  C08E  F00A         	movff	pow@y+2,___flge@ff2+2
  3297  002FBC  C08F  F00B         	movff	pow@y+3,___flge@ff2+3
  3298  002FC0  EC86  F01F         	call	___flge	;wreg free
  3299  002FC4  0100               	movlb	0	; () banked
  3300  002FC6  D037               	goto	l4195
  3301  002FC8                     l4185:
  3302                           
  3303                           ; BSR set to: 0
  3304  002FC8  518C               	movf	pow@y& (0+255),w,b
  3305  002FCA  118D               	iorwf	(pow@y+1)& (0+255),w,b
  3306  002FCC  118E               	iorwf	(pow@y+2)& (0+255),w,b
  3307  002FCE  118F               	iorwf	(pow@y+3)& (0+255),w,b
  3308  002FD0  E107               	bnz	l4191
  3309                           
  3310                           ; BSR set to: 0
  3311  002FD2  6B88               	clrf	?_pow& (0+255),b
  3312  002FD4  6B89               	clrf	(?_pow+1)& (0+255),b
  3313  002FD6  0E80               	movlw	128
  3314  002FD8  6F8A               	movwf	(?_pow+2)& (0+255),b
  3315  002FDA  0E3F               	movlw	63
  3316  002FDC  6F8B               	movwf	(?_pow+3)& (0+255),b
  3317  002FDE  D0A1               	goto	l1140
  3318  002FE0                     l4191:
  3319                           
  3320                           ; BSR set to: 0
  3321  002FE0  AF8B               	btfss	(pow@x+3)& (0+255),7,b
  3322  002FE2  D043               	goto	l4201
  3323                           
  3324                           ; BSR set to: 0
  3325  002FE4  C08C  F064         	movff	pow@y,___fltol@f1
  3326  002FE8  C08D  F065         	movff	pow@y+1,___fltol@f1+1
  3327  002FEC  C08E  F066         	movff	pow@y+2,___fltol@f1+2
  3328  002FF0  C08F  F067         	movff	pow@y+3,___fltol@f1+3
  3329  002FF4  ECED  F01D         	call	___fltol	;wreg free
  3330  002FF8  C064  F099         	movff	?___fltol,pow@yi
  3331  002FFC  C065  F09A         	movff	?___fltol+1,pow@yi+1
  3332  003000  C066  F09B         	movff	?___fltol+2,pow@yi+2
  3333  003004  C067  F09C         	movff	?___fltol+3,pow@yi+3
  3334  003008  C099  F00E         	movff	pow@yi,___lltofl@c
  3335  00300C  C09A  F00F         	movff	pow@yi+1,___lltofl@c+1
  3336  003010  C09B  F010         	movff	pow@yi+2,___lltofl@c+2
  3337  003014  C09C  F011         	movff	pow@yi+3,___lltofl@c+3
  3338  003018  EC1C  F021         	call	___lltofl	;wreg free
  3339  00301C  0100               	movlb	0	; () banked
  3340  00301E  518C               	movf	pow@y& (0+255),w,b
  3341  003020  180E               	xorwf	?___lltofl,w,c
  3342  003022  E109               	bnz	u3530
  3343  003024  518D               	movf	(pow@y+1)& (0+255),w,b
  3344  003026  180F               	xorwf	?___lltofl+1,w,c
  3345  003028  E106               	bnz	u3530
  3346  00302A  518E               	movf	(pow@y+2)& (0+255),w,b
  3347  00302C  1810               	xorwf	?___lltofl+2,w,c
  3348  00302E  E103               	bnz	u3530
  3349  003030  518F               	movf	(pow@y+3)& (0+255),w,b
  3350  003032  1811               	xorwf	?___lltofl+3,w,c
  3351  003034  E005               	bz	l4197
  3352  003036                     u3530:
  3353  003036                     l4195:
  3354                           
  3355                           ; BSR set to: 0
  3356  003036  6B88               	clrf	?_pow& (0+255),b
  3357  003038  6B89               	clrf	(?_pow+1)& (0+255),b
  3358  00303A  6B8A               	clrf	(?_pow+2)& (0+255),b
  3359  00303C  6B8B               	clrf	(?_pow+3)& (0+255),b
  3360  00303E  D071               	goto	l1140
  3361  003040                     l4197:
  3362                           
  3363                           ; BSR set to: 0
  3364  003040  5199               	movf	pow@yi& (0+255),w,b
  3365  003042  0B01               	andlw	1
  3366  003044  6F98               	movwf	pow@sign& (0+255),b
  3367                           
  3368                           ; BSR set to: 0
  3369  003046  C088  F004         	movff	pow@x,___flneg@f1
  3370  00304A  C089  F005         	movff	pow@x+1,___flneg@f1+1
  3371  00304E  C08A  F006         	movff	pow@x+2,___flneg@f1+2
  3372  003052  C08B  F007         	movff	pow@x+3,___flneg@f1+3
  3373  003056  ECAB  F021         	call	___flneg	;wreg free
  3374  00305A  C004  F088         	movff	?___flneg,pow@x
  3375  00305E  C005  F089         	movff	?___flneg+1,pow@x+1
  3376  003062  C006  F08A         	movff	?___flneg+2,pow@x+2
  3377  003066  C007  F08B         	movff	?___flneg+3,pow@x+3
  3378  00306A                     l4201:
  3379                           
  3380                           ; BSR set to: 0
  3381  00306A  C088  F050         	movff	pow@x,log@x
  3382  00306E  C089  F051         	movff	pow@x+1,log@x+1
  3383  003072  C08A  F052         	movff	pow@x+2,log@x+2
  3384  003076  C08B  F053         	movff	pow@x+3,log@x+3
  3385  00307A  EC46  F019         	call	_log	;wreg free
  3386  00307E  C050  F090         	movff	?_log,_pow$1130
  3387  003082  C051  F091         	movff	?_log+1,_pow$1130+1
  3388  003086  C052  F092         	movff	?_log+2,_pow$1130+2
  3389  00308A  C053  F093         	movff	?_log+3,_pow$1130+3
  3390  00308E  C090  F01D         	movff	_pow$1130,___flmul@f1
  3391  003092  C091  F01E         	movff	_pow$1130+1,___flmul@f1+1
  3392  003096  C092  F01F         	movff	_pow$1130+2,___flmul@f1+2
  3393  00309A  C093  F020         	movff	_pow$1130+3,___flmul@f1+3
  3394  00309E  C08C  F021         	movff	pow@y,___flmul@f2
  3395  0030A2  C08D  F022         	movff	pow@y+1,___flmul@f2+1
  3396  0030A6  C08E  F023         	movff	pow@y+2,___flmul@f2+2
  3397  0030AA  C08F  F024         	movff	pow@y+3,___flmul@f2+3
  3398  0030AE  EC2B  F016         	call	___flmul	;wreg free
  3399  0030B2  C01D  F094         	movff	?___flmul,_pow$1131
  3400  0030B6  C01E  F095         	movff	?___flmul+1,_pow$1131+1
  3401  0030BA  C01F  F096         	movff	?___flmul+2,_pow$1131+2
  3402  0030BE  C020  F097         	movff	?___flmul+3,_pow$1131+3
  3403  0030C2  C094  F07D         	movff	_pow$1131,exp@x
  3404  0030C6  C095  F07E         	movff	_pow$1131+1,exp@x+1
  3405  0030CA  C096  F07F         	movff	_pow$1131+2,exp@x+2
  3406  0030CE  C097  F080         	movff	_pow$1131+3,exp@x+3
  3407  0030D2  EC22  F015         	call	_exp	;wreg free
  3408  0030D6  C07D  F088         	movff	?_exp,pow@x
  3409  0030DA  C07E  F089         	movff	?_exp+1,pow@x+1
  3410  0030DE  C07F  F08A         	movff	?_exp+2,pow@x+2
  3411  0030E2  C080  F08B         	movff	?_exp+3,pow@x+3
  3412  0030E6  0100               	movlb	0	; () banked
  3413  0030E8  5198               	movf	pow@sign& (0+255),w,b
  3414  0030EA  E013               	bz	l1144
  3415                           
  3416                           ; BSR set to: 0
  3417  0030EC  C088  F004         	movff	pow@x,___flneg@f1
  3418  0030F0  C089  F005         	movff	pow@x+1,___flneg@f1+1
  3419  0030F4  C08A  F006         	movff	pow@x+2,___flneg@f1+2
  3420  0030F8  C08B  F007         	movff	pow@x+3,___flneg@f1+3
  3421  0030FC  ECAB  F021         	call	___flneg	;wreg free
  3422  003100  C004  F088         	movff	?___flneg,?_pow
  3423  003104  C005  F089         	movff	?___flneg+1,?_pow+1
  3424  003108  C006  F08A         	movff	?___flneg+2,?_pow+2
  3425  00310C  C007  F08B         	movff	?___flneg+3,?_pow+3
  3426  003110  D008               	goto	l1140
  3427  003112                     l1144:
  3428                           
  3429                           ; BSR set to: 0
  3430  003112  C088  F088         	movff	pow@x,?_pow
  3431  003116  C089  F089         	movff	pow@x+1,?_pow+1
  3432  00311A  C08A  F08A         	movff	pow@x+2,?_pow+2
  3433  00311E  C08B  F08B         	movff	pow@x+3,?_pow+3
  3434  003122                     l1140:
  3435                           
  3436                           ; BSR set to: 0
  3437  003122  0012               	return		;funcret
  3438  003124                     __end_of_pow:
  3439                           	opt stack 0
  3440                           tblptru	equ	0xFF8
  3441                           tblptrh	equ	0xFF7
  3442                           tblptrl	equ	0xFF6
  3443                           tablat	equ	0xFF5
  3444                           intcon	equ	0xFF2
  3445                           intcon2	equ	0xFF1
  3446                           postinc0	equ	0xFEE
  3447                           wreg	equ	0xFE8
  3448                           postdec1	equ	0xFE5
  3449                           fsr1l	equ	0xFE1
  3450                           status	equ	0xFD8
  3451                           
  3452 ;; *************** function _exp *****************
  3453 ;; Defined at:
  3454 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\exp.c"
  3455 ;; Parameters:    Size  Location     Type
  3456 ;;  x               4   29[BANK0 ] unsigned char 
  3457 ;; Auto vars:     Size  Location     Type
  3458 ;;  exponent        2   37[BANK0 ] int 
  3459 ;;  sign            1   39[BANK0 ] unsigned char 
  3460 ;; Return value:  Size  Location     Type
  3461 ;;                  4   29[BANK0 ] unsigned char 
  3462 ;; Registers used:
  3463 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3464 ;; Tracked objects:
  3465 ;;		On entry : 0/0
  3466 ;;		On exit  : 0/0
  3467 ;;		Unchanged: 0/0
  3468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3469 ;;      Params:         0       4       0       0       0       0       0       0       0
  3470 ;;      Locals:         0       7       0       0       0       0       0       0       0
  3471 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3472 ;;      Totals:         0      11       0       0       0       0       0       0       0
  3473 ;;Total ram usage:       11 bytes
  3474 ;; Hardware stack levels used:    1
  3475 ;; Hardware stack levels required when called:    4
  3476 ;; This function calls:
  3477 ;;		___awtofl
  3478 ;;		___fldiv
  3479 ;;		___flge
  3480 ;;		___flmul
  3481 ;;		___flneg
  3482 ;;		___flsub
  3483 ;;		___fltol
  3484 ;;		_eval_poly
  3485 ;;		_floor
  3486 ;;		_ldexp
  3487 ;; This function is called by:
  3488 ;;		_pow
  3489 ;; This function uses a non-reentrant model
  3490 ;;
  3491                           
  3492                           	psect	text11
  3493  002A44                     __ptext11:
  3494                           	opt stack 0
  3495  002A44                     _exp:
  3496                           	opt stack 23
  3497                           
  3498                           ; BSR set to: 0
  3499                           ;incstack = 0
  3500  002A44  0100               	movlb	0	; () banked
  3501  002A46  517D               	movf	exp@x& (0+255),w,b
  3502  002A48  117E               	iorwf	(exp@x+1)& (0+255),w,b
  3503  002A4A  117F               	iorwf	(exp@x+2)& (0+255),w,b
  3504  002A4C  1180               	iorwf	(exp@x+3)& (0+255),w,b
  3505  002A4E  E106               	bnz	l4043
  3506                           
  3507                           ; BSR set to: 0
  3508  002A50  6B7D               	clrf	?_exp& (0+255),b
  3509  002A52  6B7E               	clrf	(?_exp+1)& (0+255),b
  3510  002A54  0E80               	movlw	128
  3511  002A56  6F7F               	movwf	(?_exp+2)& (0+255),b
  3512  002A58  0E3F               	movlw	63
  3513  002A5A  D018               	goto	L3
  3514  002A5C                     l4043:
  3515                           
  3516                           ; BSR set to: 0
  3517  002A5C  0E18               	movlw	24
  3518  002A5E  6E04               	movwf	___flge@ff1,c
  3519  002A60  0E72               	movlw	114
  3520  002A62  6E05               	movwf	___flge@ff1+1,c
  3521  002A64  0E31               	movlw	49
  3522  002A66  6E06               	movwf	___flge@ff1+2,c
  3523  002A68  0E44               	movlw	68
  3524  002A6A  6E07               	movwf	___flge@ff1+3,c
  3525  002A6C  C07D  F008         	movff	exp@x,___flge@ff2
  3526  002A70  C07E  F009         	movff	exp@x+1,___flge@ff2+1
  3527  002A74  C07F  F00A         	movff	exp@x+2,___flge@ff2+2
  3528  002A78  C080  F00B         	movff	exp@x+3,___flge@ff2+3
  3529  002A7C  EC86  F01F         	call	___flge	;wreg free
  3530  002A80  E207               	bc	l4049
  3531  002A82  0100               	movlb	0	; () banked
  3532  002A84  697D               	setf	?_exp& (0+255),b
  3533  002A86  697E               	setf	(?_exp+1)& (0+255),b
  3534  002A88  0E7F               	movlw	127
  3535  002A8A  6F7F               	movwf	(?_exp+2)& (0+255),b
  3536  002A8C                     L3:
  3537  002A8C  6F80               	movwf	(?_exp+3)& (0+255),b
  3538  002A8E  D0E2               	goto	l1166
  3539  002A90                     l4049:
  3540  002A90  C07D  F004         	movff	exp@x,___flge@ff1
  3541  002A94  C07E  F005         	movff	exp@x+1,___flge@ff1+1
  3542  002A98  C07F  F006         	movff	exp@x+2,___flge@ff1+2
  3543  002A9C  C080  F007         	movff	exp@x+3,___flge@ff1+3
  3544  002AA0  0E87               	movlw	135
  3545  002AA2  6E08               	movwf	___flge@ff2,c
  3546  002AA4  0E48               	movlw	72
  3547  002AA6  6E09               	movwf	___flge@ff2+1,c
  3548  002AA8  0E3A               	movlw	58
  3549  002AAA  6E0A               	movwf	___flge@ff2+2,c
  3550  002AAC  0EC4               	movlw	196
  3551  002AAE  6E0B               	movwf	___flge@ff2+3,c
  3552  002AB0  EC86  F01F         	call	___flge	;wreg free
  3553  002AB4  E202               	bc	l4053
  3554  002AB6  0100               	movlb	0	; () banked
  3555  002AB8  D0A6               	goto	l4073
  3556  002ABA                     l4053:
  3557  002ABA  0100               	movlb	0	; () banked
  3558  002ABC  0E01               	movlw	1
  3559  002ABE  AF80               	btfss	(exp@x+3)& (0+255),7,b
  3560  002AC0  0E00               	movlw	0
  3561  002AC2  6F87               	movwf	exp@sign& (0+255),b
  3562                           
  3563                           ; BSR set to: 0
  3564  002AC4  5187               	movf	exp@sign& (0+255),w,b
  3565  002AC6  E012               	bz	l4059
  3566                           
  3567                           ; BSR set to: 0
  3568  002AC8  C07D  F004         	movff	exp@x,___flneg@f1
  3569  002ACC  C07E  F005         	movff	exp@x+1,___flneg@f1+1
  3570  002AD0  C07F  F006         	movff	exp@x+2,___flneg@f1+2
  3571  002AD4  C080  F007         	movff	exp@x+3,___flneg@f1+3
  3572  002AD8  ECAB  F021         	call	___flneg	;wreg free
  3573  002ADC  C004  F07D         	movff	?___flneg,exp@x
  3574  002AE0  C005  F07E         	movff	?___flneg+1,exp@x+1
  3575  002AE4  C006  F07F         	movff	?___flneg+2,exp@x+2
  3576  002AE8  C007  F080         	movff	?___flneg+3,exp@x+3
  3577  002AEC                     l4059:
  3578                           
  3579                           ; BSR set to: 0
  3580  002AEC  C07D  F01D         	movff	exp@x,___flmul@f1
  3581  002AF0  C07E  F01E         	movff	exp@x+1,___flmul@f1+1
  3582  002AF4  C07F  F01F         	movff	exp@x+2,___flmul@f1+2
  3583  002AF8  C080  F020         	movff	exp@x+3,___flmul@f1+3
  3584  002AFC  0E3B               	movlw	59
  3585  002AFE  6E21               	movwf	___flmul@f2,c
  3586  002B00  0EAA               	movlw	170
  3587  002B02  6E22               	movwf	___flmul@f2+1,c
  3588  002B04  0EB8               	movlw	184
  3589  002B06  6E23               	movwf	___flmul@f2+2,c
  3590  002B08  0E3F               	movlw	63
  3591  002B0A  6E24               	movwf	___flmul@f2+3,c
  3592  002B0C  EC2B  F016         	call	___flmul	;wreg free
  3593  002B10  C01D  F07D         	movff	?___flmul,exp@x
  3594  002B14  C01E  F07E         	movff	?___flmul+1,exp@x+1
  3595  002B18  C01F  F07F         	movff	?___flmul+2,exp@x+2
  3596  002B1C  C020  F080         	movff	?___flmul+3,exp@x+3
  3597  002B20  C07D  F073         	movff	exp@x,floor@x
  3598  002B24  C07E  F074         	movff	exp@x+1,floor@x+1
  3599  002B28  C07F  F075         	movff	exp@x+2,floor@x+2
  3600  002B2C  C080  F076         	movff	exp@x+3,floor@x+3
  3601  002B30  ECD3  F019         	call	_floor	;wreg free
  3602  002B34  C073  F081         	movff	?_floor,_exp$1132
  3603  002B38  C074  F082         	movff	?_floor+1,_exp$1132+1
  3604  002B3C  C075  F083         	movff	?_floor+2,_exp$1132+2
  3605  002B40  C076  F084         	movff	?_floor+3,_exp$1132+3
  3606  002B44  C081  F064         	movff	_exp$1132,___fltol@f1
  3607  002B48  C082  F065         	movff	_exp$1132+1,___fltol@f1+1
  3608  002B4C  C083  F066         	movff	_exp$1132+2,___fltol@f1+2
  3609  002B50  C084  F067         	movff	_exp$1132+3,___fltol@f1+3
  3610  002B54  ECED  F01D         	call	___fltol	;wreg free
  3611  002B58  C064  F085         	movff	?___fltol,exp@exponent
  3612  002B5C  C065  F086         	movff	?___fltol+1,exp@exponent+1
  3613                           
  3614                           ; BSR set to: 0
  3615  002B60  C07D  F044         	movff	exp@x,___flsub@f1
  3616  002B64  C07E  F045         	movff	exp@x+1,___flsub@f1+1
  3617  002B68  C07F  F046         	movff	exp@x+2,___flsub@f1+2
  3618  002B6C  C080  F047         	movff	exp@x+3,___flsub@f1+3
  3619  002B70  C085  F00E         	movff	exp@exponent,___awtofl@c
  3620  002B74  C086  F00F         	movff	exp@exponent+1,___awtofl@c+1
  3621  002B78  EC7F  F020         	call	___awtofl	;wreg free
  3622  002B7C  C00E  F048         	movff	?___awtofl,___flsub@f2
  3623  002B80  C00F  F049         	movff	?___awtofl+1,___flsub@f2+1
  3624  002B84  C010  F04A         	movff	?___awtofl+2,___flsub@f2+2
  3625  002B88  C011  F04B         	movff	?___awtofl+3,___flsub@f2+3
  3626  002B8C  EC3E  F020         	call	___flsub	;wreg free
  3627  002B90  C044  F07D         	movff	?___flsub,exp@x
  3628  002B94  C045  F07E         	movff	?___flsub+1,exp@x+1
  3629  002B98  C046  F07F         	movff	?___flsub+2,exp@x+2
  3630  002B9C  C047  F080         	movff	?___flsub+3,exp@x+3
  3631  002BA0  C07D  F044         	movff	exp@x,eval_poly@x
  3632  002BA4  C07E  F045         	movff	exp@x+1,eval_poly@x+1
  3633  002BA8  C07F  F046         	movff	exp@x+2,eval_poly@x+2
  3634  002BAC  C080  F047         	movff	exp@x+3,eval_poly@x+3
  3635  002BB0  0E19               	movlw	low exp@coeff
  3636  002BB2  6E48               	movwf	eval_poly@d,c
  3637  002BB4  6A4A               	clrf	eval_poly@n+1,c
  3638  002BB6  0E09               	movlw	9
  3639  002BB8  6E49               	movwf	eval_poly@n,c
  3640  002BBA  ECEC  F01C         	call	_eval_poly	;wreg free
  3641  002BBE  C044  F050         	movff	?_eval_poly,ldexp@value
  3642  002BC2  C045  F051         	movff	?_eval_poly+1,ldexp@value+1
  3643  002BC6  C046  F052         	movff	?_eval_poly+2,ldexp@value+2
  3644  002BCA  C047  F053         	movff	?_eval_poly+3,ldexp@value+3
  3645  002BCE  C085  F054         	movff	exp@exponent,ldexp@newexp
  3646  002BD2  C086  F055         	movff	exp@exponent+1,ldexp@newexp+1
  3647  002BD6  EC3C  F01E         	call	_ldexp	;wreg free
  3648  002BDA  C050  F07D         	movff	?_ldexp,exp@x
  3649  002BDE  C051  F07E         	movff	?_ldexp+1,exp@x+1
  3650  002BE2  C052  F07F         	movff	?_ldexp+2,exp@x+2
  3651  002BE6  C053  F080         	movff	?_ldexp+3,exp@x+3
  3652  002BEA  0100               	movlb	0	; () banked
  3653  002BEC  5187               	movf	exp@sign& (0+255),w,b
  3654  002BEE  E02A               	bz	l1170
  3655                           
  3656                           ; BSR set to: 0
  3657  002BF0  297D               	incf	exp@x& (0+255),w,b
  3658  002BF2  E10E               	bnz	l4075
  3659  002BF4  297E               	incf	(exp@x+1)& (0+255),w,b
  3660  002BF6  E10C               	bnz	l4075
  3661  002BF8  0E7F               	movlw	127
  3662  002BFA  197F               	xorwf	(exp@x+2)& (0+255),w,b
  3663  002BFC  E109               	bnz	l4075
  3664  002BFE  0E7F               	movlw	127
  3665  002C00  1980               	xorwf	(exp@x+3)& (0+255),w,b
  3666  002C02  A4D8               	btfss	status,2,c
  3667  002C04  D005               	goto	l4075
  3668  002C06                     l4073:
  3669                           
  3670                           ; BSR set to: 0
  3671  002C06  6B7D               	clrf	?_exp& (0+255),b
  3672  002C08  6B7E               	clrf	(?_exp+1)& (0+255),b
  3673  002C0A  6B7F               	clrf	(?_exp+2)& (0+255),b
  3674  002C0C  6B80               	clrf	(?_exp+3)& (0+255),b
  3675  002C0E  D022               	goto	l1166
  3676  002C10                     l4075:
  3677                           
  3678                           ; BSR set to: 0
  3679  002C10  0E00               	movlw	0
  3680  002C12  6E0E               	movwf	___fldiv@f1,c
  3681  002C14  6E0F               	movwf	___fldiv@f1+1,c
  3682  002C16  0E80               	movlw	128
  3683  002C18  6E10               	movwf	___fldiv@f1+2,c
  3684  002C1A  0E3F               	movlw	63
  3685  002C1C  6E11               	movwf	___fldiv@f1+3,c
  3686  002C1E  C07D  F012         	movff	exp@x,___fldiv@f2
  3687  002C22  C07E  F013         	movff	exp@x+1,___fldiv@f2+1
  3688  002C26  C07F  F014         	movff	exp@x+2,___fldiv@f2+2
  3689  002C2A  C080  F015         	movff	exp@x+3,___fldiv@f2+3
  3690  002C2E  EC9A  F01D         	call	___fldiv	;wreg free
  3691  002C32  C00E  F07D         	movff	?___fldiv,?_exp
  3692  002C36  C00F  F07E         	movff	?___fldiv+1,?_exp+1
  3693  002C3A  C010  F07F         	movff	?___fldiv+2,?_exp+2
  3694  002C3E  C011  F080         	movff	?___fldiv+3,?_exp+3
  3695  002C42  D008               	goto	l1166
  3696  002C44                     l1170:
  3697                           
  3698                           ; BSR set to: 0
  3699  002C44  C07D  F07D         	movff	exp@x,?_exp
  3700  002C48  C07E  F07E         	movff	exp@x+1,?_exp+1
  3701  002C4C  C07F  F07F         	movff	exp@x+2,?_exp+2
  3702  002C50  C080  F080         	movff	exp@x+3,?_exp+3
  3703  002C54                     l1166:
  3704  002C54  0012               	return		;funcret
  3705  002C56                     __end_of_exp:
  3706                           	opt stack 0
  3707                           tblptru	equ	0xFF8
  3708                           tblptrh	equ	0xFF7
  3709                           tblptrl	equ	0xFF6
  3710                           tablat	equ	0xFF5
  3711                           intcon	equ	0xFF2
  3712                           intcon2	equ	0xFF1
  3713                           postinc0	equ	0xFEE
  3714                           wreg	equ	0xFE8
  3715                           postdec1	equ	0xFE5
  3716                           fsr1l	equ	0xFE1
  3717                           status	equ	0xFD8
  3718                           
  3719 ;; *************** function _ldexp *****************
  3720 ;; Defined at:
  3721 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  3722 ;; Parameters:    Size  Location     Type
  3723 ;;  value           4   79[COMRAM] unsigned char 
  3724 ;;  newexp          2   83[COMRAM] int 
  3725 ;; Auto vars:     Size  Location     Type
  3726 ;;		None
  3727 ;; Return value:  Size  Location     Type
  3728 ;;                  4   79[COMRAM] int 
  3729 ;; Registers used:
  3730 ;;		wreg, status,2, status,0
  3731 ;; Tracked objects:
  3732 ;;		On entry : 0/0
  3733 ;;		On exit  : 0/0
  3734 ;;		Unchanged: 0/0
  3735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3736 ;;      Params:         6       0       0       0       0       0       0       0       0
  3737 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3738 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3739 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3740 ;;Total ram usage:        8 bytes
  3741 ;; Hardware stack levels used:    1
  3742 ;; Hardware stack levels required when called:    1
  3743 ;; This function calls:
  3744 ;;		Nothing
  3745 ;; This function is called by:
  3746 ;;		_exp
  3747 ;; This function uses a non-reentrant model
  3748 ;;
  3749                           
  3750                           	psect	text12
  3751  003C78                     __ptext12:
  3752                           	opt stack 0
  3753  003C78                     _ldexp:
  3754                           	opt stack 25
  3755                           
  3756                           ;incstack = 0
  3757  003C78  5050               	movf	ldexp@value,w,c
  3758  003C7A  1051               	iorwf	ldexp@value+1,w,c
  3759  003C7C  1052               	iorwf	ldexp@value+2,w,c
  3760  003C7E  1053               	iorwf	ldexp@value+3,w,c
  3761  003C80  E013               	bz	l3931
  3762  003C82  5053               	movf	ldexp@value+3,w,c
  3763  003C84  0B7F               	andlw	127
  3764  003C86  6E56               	movwf	??_ldexp& (0+255),c
  3765  003C88  6A57               	clrf	(??_ldexp+1)& (0+255),c
  3766  003C8A  90D8               	bcf	status,0,c
  3767  003C8C  3656               	rlcf	??_ldexp,f,c
  3768  003C8E  3657               	rlcf	??_ldexp+1,f,c
  3769  003C90  5056               	movf	??_ldexp,w,c
  3770  003C92  2654               	addwf	ldexp@newexp,f,c
  3771  003C94  5057               	movf	??_ldexp+1,w,c
  3772  003C96  2255               	addwfc	ldexp@newexp+1,f,c
  3773  003C98  0E01               	movlw	1
  3774  003C9A  AE52               	btfss	ldexp@value+2,7,c
  3775  003C9C  0E00               	movlw	0
  3776  003C9E  2654               	addwf	ldexp@newexp,f,c
  3777  003CA0  0E00               	movlw	0
  3778  003CA2  2255               	addwfc	ldexp@newexp+1,f,c
  3779  003CA4  AE55               	btfss	ldexp@newexp+1,7,c
  3780  003CA6  D005               	goto	l3935
  3781  003CA8                     l3931:
  3782  003CA8  6A50               	clrf	?_ldexp,c
  3783  003CAA  6A51               	clrf	?_ldexp+1,c
  3784  003CAC  6A52               	clrf	?_ldexp+2,c
  3785  003CAE  6A53               	clrf	?_ldexp+3,c
  3786  003CB0  D02E               	goto	l908
  3787  003CB2                     l3935:
  3788  003CB2  BE55               	btfsc	ldexp@newexp+1,7,c
  3789  003CB4  D010               	goto	l3949
  3790  003CB6  0455               	decf	ldexp@newexp+1,w,c
  3791  003CB8  E30E               	bnc	l3949
  3792  003CBA  AE53               	btfss	ldexp@value+3,7,c
  3793  003CBC  D006               	goto	l3945
  3794  003CBE  6850               	setf	?_ldexp,c
  3795  003CC0  6851               	setf	?_ldexp+1,c
  3796  003CC2  0E7F               	movlw	127
  3797  003CC4  6E52               	movwf	?_ldexp+2,c
  3798  003CC6  0EFF               	movlw	255
  3799  003CC8  D004               	goto	L4
  3800  003CCA                     l3945:
  3801  003CCA  6850               	setf	?_ldexp,c
  3802  003CCC  6851               	setf	?_ldexp+1,c
  3803  003CCE  0E7F               	movlw	127
  3804  003CD0  6E52               	movwf	?_ldexp+2,c
  3805  003CD2                     L4:
  3806  003CD2  6E53               	movwf	?_ldexp+3,c
  3807  003CD4  D01C               	goto	l908
  3808  003CD6                     l3949:
  3809  003CD6  3455               	rlcf	ldexp@newexp+1,w,c
  3810  003CD8  3055               	rrcf	ldexp@newexp+1,w,c
  3811  003CDA  6E57               	movwf	(??_ldexp+1)& (0+255),c
  3812  003CDC  3054               	rrcf	ldexp@newexp,w,c
  3813  003CDE  6E56               	movwf	??_ldexp& (0+255),c
  3814  003CE0  1853               	xorwf	ldexp@value+3,w,c
  3815  003CE2  0B80               	andlw	-128
  3816  003CE4  1856               	xorwf	??_ldexp,w,c
  3817  003CE6  6E53               	movwf	ldexp@value+3,c
  3818  003CE8  C054  F056         	movff	ldexp@newexp,??_ldexp
  3819  003CEC  0E01               	movlw	1
  3820  003CEE  1656               	andwf	??_ldexp,f,c
  3821  003CF0  3256               	rrcf	??_ldexp,f,c
  3822  003CF2  3256               	rrcf	??_ldexp,f,c
  3823  003CF4  5052               	movf	ldexp@value+2,w,c
  3824  003CF6  1856               	xorwf	??_ldexp,w,c
  3825  003CF8  0B7F               	andlw	-129
  3826  003CFA  1856               	xorwf	??_ldexp,w,c
  3827  003CFC  6E52               	movwf	ldexp@value+2,c
  3828  003CFE  C050  F050         	movff	ldexp@value,?_ldexp
  3829  003D02  C051  F051         	movff	ldexp@value+1,?_ldexp+1
  3830  003D06  C052  F052         	movff	ldexp@value+2,?_ldexp+2
  3831  003D0A  C053  F053         	movff	ldexp@value+3,?_ldexp+3
  3832  003D0E                     l908:
  3833  003D0E  0012               	return		;funcret
  3834  003D10                     __end_of_ldexp:
  3835                           	opt stack 0
  3836                           tblptru	equ	0xFF8
  3837                           tblptrh	equ	0xFF7
  3838                           tblptrl	equ	0xFF6
  3839                           tablat	equ	0xFF5
  3840                           intcon	equ	0xFF2
  3841                           intcon2	equ	0xFF1
  3842                           postinc0	equ	0xFEE
  3843                           wreg	equ	0xFE8
  3844                           postdec1	equ	0xFE5
  3845                           fsr1l	equ	0xFE1
  3846                           status	equ	0xFD8
  3847                           
  3848 ;; *************** function _floor *****************
  3849 ;; Defined at:
  3850 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\floor.c"
  3851 ;; Parameters:    Size  Location     Type
  3852 ;;  x               4   19[BANK0 ] int 
  3853 ;; Auto vars:     Size  Location     Type
  3854 ;;  i               4   23[BANK0 ] int 
  3855 ;;  expon           2   27[BANK0 ] int 
  3856 ;; Return value:  Size  Location     Type
  3857 ;;                  4   19[BANK0 ] int 
  3858 ;; Registers used:
  3859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3860 ;; Tracked objects:
  3861 ;;		On entry : 0/0
  3862 ;;		On exit  : 0/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3865 ;;      Params:         0       4       0       0       0       0       0       0       0
  3866 ;;      Locals:         0       6       0       0       0       0       0       0       0
  3867 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3868 ;;      Totals:         0      10       0       0       0       0       0       0       0
  3869 ;;Total ram usage:       10 bytes
  3870 ;; Hardware stack levels used:    1
  3871 ;; Hardware stack levels required when called:    3
  3872 ;; This function calls:
  3873 ;;		___altofl
  3874 ;;		___fladd
  3875 ;;		___flge
  3876 ;;		___fltol
  3877 ;;		_frexp
  3878 ;; This function is called by:
  3879 ;;		_format_double
  3880 ;;		_exp
  3881 ;; This function uses a non-reentrant model
  3882 ;;
  3883                           
  3884                           	psect	text13
  3885  0033A6                     __ptext13:
  3886                           	opt stack 0
  3887  0033A6                     _floor:
  3888                           	opt stack 23
  3889                           
  3890                           ;incstack = 0
  3891  0033A6  C073  F004         	movff	floor@x,frexp@value
  3892  0033AA  C074  F005         	movff	floor@x+1,frexp@value+1
  3893  0033AE  C075  F006         	movff	floor@x+2,frexp@value+2
  3894  0033B2  C076  F007         	movff	floor@x+3,frexp@value+3
  3895  0033B6  0E7B               	movlw	low floor@expon
  3896  0033B8  6E08               	movwf	frexp@eptr,c
  3897  0033BA  EC88  F01E         	call	_frexp	;wreg free
  3898  0033BE  0100               	movlb	0	; () banked
  3899  0033C0  AF7C               	btfss	(floor@expon+1)& (0+255),7,b
  3900  0033C2  D00E               	goto	l3853
  3901                           
  3902                           ; BSR set to: 0
  3903  0033C4  AF76               	btfss	(floor@x+3)& (0+255),7,b
  3904  0033C6  D007               	goto	l875
  3905                           
  3906                           ; BSR set to: 0
  3907  0033C8  6B73               	clrf	?_floor& (0+255),b
  3908  0033CA  6B74               	clrf	(?_floor+1)& (0+255),b
  3909  0033CC  0E80               	movlw	128
  3910  0033CE  6F75               	movwf	(?_floor+2)& (0+255),b
  3911  0033D0  0EBF               	movlw	191
  3912  0033D2  6F76               	movwf	(?_floor+3)& (0+255),b
  3913  0033D4  D064               	goto	l876
  3914  0033D6                     l875:
  3915                           
  3916                           ; BSR set to: 0
  3917  0033D6  6B73               	clrf	?_floor& (0+255),b
  3918  0033D8  6B74               	clrf	(?_floor+1)& (0+255),b
  3919  0033DA  6B75               	clrf	(?_floor+2)& (0+255),b
  3920  0033DC  6B76               	clrf	(?_floor+3)& (0+255),b
  3921  0033DE  D05F               	goto	l876
  3922  0033E0                     l3853:
  3923                           
  3924                           ; BSR set to: 0
  3925  0033E0  517C               	movf	(floor@expon+1)& (0+255),w,b
  3926  0033E2  E103               	bnz	u3080
  3927  0033E4  0E1D               	movlw	29
  3928  0033E6  5D7B               	subwf	floor@expon& (0+255),w,b
  3929  0033E8  E309               	bnc	l3857
  3930  0033EA                     u3080:
  3931                           
  3932                           ; BSR set to: 0
  3933  0033EA  C073  F073         	movff	floor@x,?_floor
  3934  0033EE  C074  F074         	movff	floor@x+1,?_floor+1
  3935  0033F2  C075  F075         	movff	floor@x+2,?_floor+2
  3936  0033F6  C076  F076         	movff	floor@x+3,?_floor+3
  3937  0033FA  D051               	goto	l876
  3938  0033FC                     l3857:
  3939                           
  3940                           ; BSR set to: 0
  3941  0033FC  C073  F064         	movff	floor@x,___fltol@f1
  3942  003400  C074  F065         	movff	floor@x+1,___fltol@f1+1
  3943  003404  C075  F066         	movff	floor@x+2,___fltol@f1+2
  3944  003408  C076  F067         	movff	floor@x+3,___fltol@f1+3
  3945  00340C  ECED  F01D         	call	___fltol	;wreg free
  3946  003410  C064  F06E         	movff	?___fltol,___altofl@c
  3947  003414  C065  F06F         	movff	?___fltol+1,___altofl@c+1
  3948  003418  C066  F070         	movff	?___fltol+2,___altofl@c+2
  3949  00341C  C067  F071         	movff	?___fltol+3,___altofl@c+3
  3950  003420  ECF6  F01F         	call	___altofl	;wreg free
  3951  003424  C06E  F077         	movff	?___altofl,floor@i
  3952  003428  C06F  F078         	movff	?___altofl+1,floor@i+1
  3953  00342C  C070  F079         	movff	?___altofl+2,floor@i+2
  3954  003430  C071  F07A         	movff	?___altofl+3,floor@i+3
  3955  003434  C073  F004         	movff	floor@x,___flge@ff1
  3956  003438  C074  F005         	movff	floor@x+1,___flge@ff1+1
  3957  00343C  C075  F006         	movff	floor@x+2,___flge@ff1+2
  3958  003440  C076  F007         	movff	floor@x+3,___flge@ff1+3
  3959  003444  C077  F008         	movff	floor@i,___flge@ff2
  3960  003448  C078  F009         	movff	floor@i+1,___flge@ff2+1
  3961  00344C  C079  F00A         	movff	floor@i+2,___flge@ff2+2
  3962  003450  C07A  F00B         	movff	floor@i+3,___flge@ff2+3
  3963  003454  EC86  F01F         	call	___flge	;wreg free
  3964  003458  E21A               	bc	l878
  3965  00345A  C077  F038         	movff	floor@i,___fladd@f1
  3966  00345E  C078  F039         	movff	floor@i+1,___fladd@f1+1
  3967  003462  C079  F03A         	movff	floor@i+2,___fladd@f1+2
  3968  003466  C07A  F03B         	movff	floor@i+3,___fladd@f1+3
  3969  00346A  0E00               	movlw	0
  3970  00346C  6E3C               	movwf	___fladd@f2,c
  3971  00346E  6E3D               	movwf	___fladd@f2+1,c
  3972  003470  0E80               	movlw	128
  3973  003472  6E3E               	movwf	___fladd@f2+2,c
  3974  003474  0EBF               	movlw	191
  3975  003476  6E3F               	movwf	___fladd@f2+3,c
  3976  003478  EC92  F018         	call	___fladd	;wreg free
  3977  00347C  C038  F073         	movff	?___fladd,?_floor
  3978  003480  C039  F074         	movff	?___fladd+1,?_floor+1
  3979  003484  C03A  F075         	movff	?___fladd+2,?_floor+2
  3980  003488  C03B  F076         	movff	?___fladd+3,?_floor+3
  3981  00348C  D008               	goto	l876
  3982  00348E                     l878:
  3983  00348E  C077  F073         	movff	floor@i,?_floor
  3984  003492  C078  F074         	movff	floor@i+1,?_floor+1
  3985  003496  C079  F075         	movff	floor@i+2,?_floor+2
  3986  00349A  C07A  F076         	movff	floor@i+3,?_floor+3
  3987  00349E                     l876:
  3988  00349E  0012               	return		;funcret
  3989  0034A0                     __end_of_floor:
  3990                           	opt stack 0
  3991                           tblptru	equ	0xFF8
  3992                           tblptrh	equ	0xFF7
  3993                           tblptrl	equ	0xFF6
  3994                           tablat	equ	0xFF5
  3995                           intcon	equ	0xFF2
  3996                           intcon2	equ	0xFF1
  3997                           postinc0	equ	0xFEE
  3998                           wreg	equ	0xFE8
  3999                           postdec1	equ	0xFE5
  4000                           fsr1l	equ	0xFE1
  4001                           status	equ	0xFD8
  4002                           
  4003 ;; *************** function ___fltol *****************
  4004 ;; Defined at:
  4005 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fltol.c"
  4006 ;; Parameters:    Size  Location     Type
  4007 ;;  f1              4    4[BANK0 ] int 
  4008 ;; Auto vars:     Size  Location     Type
  4009 ;;  exp1            1   13[BANK0 ] unsigned char 
  4010 ;;  sign1           1   12[BANK0 ] unsigned char 
  4011 ;; Return value:  Size  Location     Type
  4012 ;;                  4    4[BANK0 ] long 
  4013 ;; Registers used:
  4014 ;;		wreg, status,2, status,0
  4015 ;; Tracked objects:
  4016 ;;		On entry : 0/0
  4017 ;;		On exit  : F/0
  4018 ;;		Unchanged: 0/0
  4019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4020 ;;      Params:         0       4       0       0       0       0       0       0       0
  4021 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4022 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4023 ;;      Totals:         0      10       0       0       0       0       0       0       0
  4024 ;;Total ram usage:       10 bytes
  4025 ;; Hardware stack levels used:    1
  4026 ;; Hardware stack levels required when called:    1
  4027 ;; This function calls:
  4028 ;;		Nothing
  4029 ;; This function is called by:
  4030 ;;		_measure_capacitance
  4031 ;;		_measure_inductance
  4032 ;;		_format_double
  4033 ;;		_floor
  4034 ;;		_pow
  4035 ;;		_exp
  4036 ;; This function uses a non-reentrant model
  4037 ;;
  4038                           
  4039                           	psect	text14
  4040  003BDA                     __ptext14:
  4041                           	opt stack 0
  4042  003BDA                     ___fltol:
  4043                           	opt stack 28
  4044                           
  4045                           ;incstack = 0
  4046  003BDA  0100               	movlb	0	; () banked
  4047  003BDC  3566               	rlcf	(___fltol@f1+2)& (0+255),w,b
  4048  003BDE  3567               	rlcf	(___fltol@f1+3)& (0+255),w,b
  4049  003BE0  6F6D               	movwf	___fltol@exp1& (0+255),b
  4050  003BE2  516D               	movf	___fltol@exp1& (0+255),w,b
  4051  003BE4  E105               	bnz	l3787
  4052  003BE6                     l3785:
  4053                           
  4054                           ; BSR set to: 0
  4055  003BE6  6B64               	clrf	?___fltol& (0+255),b
  4056  003BE8  6B65               	clrf	(?___fltol+1)& (0+255),b
  4057  003BEA  6B66               	clrf	(?___fltol+2)& (0+255),b
  4058  003BEC  6B67               	clrf	(?___fltol+3)& (0+255),b
  4059  003BEE  D043               	goto	l888
  4060  003BF0                     l3787:
  4061                           
  4062                           ; BSR set to: 0
  4063  003BF0  C064  F068         	movff	___fltol@f1,??___fltol
  4064  003BF4  C065  F069         	movff	___fltol@f1+1,??___fltol+1
  4065  003BF8  C066  F06A         	movff	___fltol@f1+2,??___fltol+2
  4066  003BFC  C067  F06B         	movff	___fltol@f1+3,??___fltol+3
  4067  003C00  0E20               	movlw	32
  4068  003C02  D005               	goto	u2980
  4069  003C04                     u2985:
  4070  003C04  90D8               	bcf	status,0,c
  4071  003C06  336B               	rrcf	(??___fltol+3)& (0+255),f,b
  4072  003C08  336A               	rrcf	(??___fltol+2)& (0+255),f,b
  4073  003C0A  3369               	rrcf	(??___fltol+1)& (0+255),f,b
  4074  003C0C  3368               	rrcf	??___fltol& (0+255),f,b
  4075  003C0E                     u2980:
  4076  003C0E  2EE8               	decfsz	wreg,f,c
  4077  003C10  D7F9               	goto	u2985
  4078  003C12  5168               	movf	??___fltol& (0+255),w,b
  4079  003C14  6F6C               	movwf	___fltol@sign1& (0+255),b
  4080                           
  4081                           ; BSR set to: 0
  4082  003C16  8F66               	bsf	(___fltol@f1+2)& (0+255),7,b
  4083                           
  4084                           ; BSR set to: 0
  4085  003C18  6B67               	clrf	(___fltol@f1+3)& (0+255),b
  4086                           
  4087                           ; BSR set to: 0
  4088  003C1A  0E96               	movlw	150
  4089  003C1C  5F6D               	subwf	___fltol@exp1& (0+255),f,b
  4090                           
  4091                           ; BSR set to: 0
  4092  003C1E  AF6D               	btfss	___fltol@exp1& (0+255),7,b
  4093  003C20  D00C               	goto	l3805
  4094                           
  4095                           ; BSR set to: 0
  4096  003C22  516D               	movf	___fltol@exp1& (0+255),w,b
  4097  003C24  0A80               	xorlw	128
  4098  003C26  0F97               	addlw	151
  4099  003C28  E3DE               	bnc	l3785
  4100  003C2A                     l3801:
  4101                           
  4102                           ; BSR set to: 0
  4103  003C2A  90D8               	bcf	status,0,c
  4104  003C2C  3367               	rrcf	(___fltol@f1+3)& (0+255),f,b
  4105  003C2E  3366               	rrcf	(___fltol@f1+2)& (0+255),f,b
  4106  003C30  3365               	rrcf	(___fltol@f1+1)& (0+255),f,b
  4107  003C32  3364               	rrcf	___fltol@f1& (0+255),f,b
  4108                           
  4109                           ; BSR set to: 0
  4110  003C34  3F6D               	incfsz	___fltol@exp1& (0+255),f,b
  4111  003C36  D7F9               	goto	l3801
  4112  003C38  D00C               	goto	l3813
  4113  003C3A                     l3805:
  4114                           
  4115                           ; BSR set to: 0
  4116  003C3A  0E1F               	movlw	31
  4117  003C3C  656D               	cpfsgt	___fltol@exp1& (0+255),b
  4118  003C3E  D007               	goto	l3811
  4119  003C40  D7D2               	goto	l3785
  4120  003C42                     l3809:
  4121                           
  4122                           ; BSR set to: 0
  4123  003C42  90D8               	bcf	status,0,c
  4124  003C44  3764               	rlcf	___fltol@f1& (0+255),f,b
  4125  003C46  3765               	rlcf	(___fltol@f1+1)& (0+255),f,b
  4126  003C48  3766               	rlcf	(___fltol@f1+2)& (0+255),f,b
  4127  003C4A  3767               	rlcf	(___fltol@f1+3)& (0+255),f,b
  4128  003C4C  076D               	decf	___fltol@exp1& (0+255),f,b
  4129  003C4E                     l3811:
  4130                           
  4131                           ; BSR set to: 0
  4132  003C4E  516D               	movf	___fltol@exp1& (0+255),w,b
  4133  003C50  E1F8               	bnz	l3809
  4134  003C52                     l3813:
  4135                           
  4136                           ; BSR set to: 0
  4137  003C52  516C               	movf	___fltol@sign1& (0+255),w,b
  4138  003C54  E008               	bz	l3817
  4139                           
  4140                           ; BSR set to: 0
  4141  003C56  1F67               	comf	(___fltol@f1+3)& (0+255),f,b
  4142  003C58  1F66               	comf	(___fltol@f1+2)& (0+255),f,b
  4143  003C5A  1F65               	comf	(___fltol@f1+1)& (0+255),f,b
  4144  003C5C  6D64               	negf	___fltol@f1& (0+255),b
  4145  003C5E  0E00               	movlw	0
  4146  003C60  2365               	addwfc	(___fltol@f1+1)& (0+255),f,b
  4147  003C62  2366               	addwfc	(___fltol@f1+2)& (0+255),f,b
  4148  003C64  2367               	addwfc	(___fltol@f1+3)& (0+255),f,b
  4149  003C66                     l3817:
  4150                           
  4151                           ; BSR set to: 0
  4152  003C66  C064  F064         	movff	___fltol@f1,?___fltol
  4153  003C6A  C065  F065         	movff	___fltol@f1+1,?___fltol+1
  4154  003C6E  C066  F066         	movff	___fltol@f1+2,?___fltol+2
  4155  003C72  C067  F067         	movff	___fltol@f1+3,?___fltol+3
  4156  003C76                     l888:
  4157                           
  4158                           ; BSR set to: 0
  4159  003C76  0012               	return		;funcret
  4160  003C78                     __end_of___fltol:
  4161                           	opt stack 0
  4162                           tblptru	equ	0xFF8
  4163                           tblptrh	equ	0xFF7
  4164                           tblptrl	equ	0xFF6
  4165                           tablat	equ	0xFF5
  4166                           intcon	equ	0xFF2
  4167                           intcon2	equ	0xFF1
  4168                           postinc0	equ	0xFEE
  4169                           wreg	equ	0xFE8
  4170                           postdec1	equ	0xFE5
  4171                           fsr1l	equ	0xFE1
  4172                           status	equ	0xFD8
  4173                           
  4174 ;; *************** function ___flge *****************
  4175 ;; Defined at:
  4176 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flge.c"
  4177 ;; Parameters:    Size  Location     Type
  4178 ;;  ff1             4    3[COMRAM] long 
  4179 ;;  ff2             4    7[COMRAM] long 
  4180 ;; Auto vars:     Size  Location     Type
  4181 ;;		None
  4182 ;; Return value:  Size  Location     Type
  4183 ;;		None               void
  4184 ;; Registers used:
  4185 ;;		wreg, status,2, status,0
  4186 ;; Tracked objects:
  4187 ;;		On entry : 0/0
  4188 ;;		On exit  : 0/0
  4189 ;;		Unchanged: 0/0
  4190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4191 ;;      Params:         8       0       0       0       0       0       0       0       0
  4192 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4193 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4194 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4195 ;;Total ram usage:        8 bytes
  4196 ;; Hardware stack levels used:    1
  4197 ;; Hardware stack levels required when called:    1
  4198 ;; This function calls:
  4199 ;;		Nothing
  4200 ;; This function is called by:
  4201 ;;		_measure_capacitance
  4202 ;;		_measure_inductance
  4203 ;;		_format_double
  4204 ;;		_floor
  4205 ;;		_pow
  4206 ;;		_exp
  4207 ;; This function uses a non-reentrant model
  4208 ;;
  4209                           
  4210                           	psect	text15
  4211  003F0C                     __ptext15:
  4212                           	opt stack 0
  4213  003F0C                     ___flge:
  4214                           	opt stack 28
  4215                           
  4216                           ; BSR set to: 0
  4217                           ;incstack = 0
  4218  003F0C  AE07               	btfss	___flge@ff1+3,7,c
  4219  003F0E  D009               	goto	l3753
  4220  003F10  6C04               	negf	___flge@ff1,c
  4221  003F12  1E05               	comf	___flge@ff1+1,f,c
  4222  003F14  B0D8               	btfsc	status,0,c
  4223  003F16  2A05               	incf	___flge@ff1+1,f,c
  4224  003F18  1E06               	comf	___flge@ff1+2,f,c
  4225  003F1A  B0D8               	btfsc	status,0,c
  4226  003F1C  2A06               	incf	___flge@ff1+2,f,c
  4227  003F1E  0E80               	movlw	128
  4228  003F20  5607               	subfwb	___flge@ff1+3,f,c
  4229  003F22                     l3753:
  4230  003F22  AE0B               	btfss	___flge@ff2+3,7,c
  4231  003F24  D009               	goto	l837
  4232  003F26  6C08               	negf	___flge@ff2,c
  4233  003F28  1E09               	comf	___flge@ff2+1,f,c
  4234  003F2A  B0D8               	btfsc	status,0,c
  4235  003F2C  2A09               	incf	___flge@ff2+1,f,c
  4236  003F2E  1E0A               	comf	___flge@ff2+2,f,c
  4237  003F30  B0D8               	btfsc	status,0,c
  4238  003F32  2A0A               	incf	___flge@ff2+2,f,c
  4239  003F34  0E80               	movlw	128
  4240  003F36  560B               	subfwb	___flge@ff2+3,f,c
  4241  003F38                     l837:
  4242  003F38  0E80               	movlw	128
  4243  003F3A  1A07               	xorwf	___flge@ff1+3,f,c
  4244  003F3C  1A0B               	xorwf	___flge@ff2+3,f,c
  4245  003F3E  5008               	movf	___flge@ff2,w,c
  4246  003F40  5C04               	subwf	___flge@ff1,w,c
  4247  003F42  5009               	movf	___flge@ff2+1,w,c
  4248  003F44  5805               	subwfb	___flge@ff1+1,w,c
  4249  003F46  500A               	movf	___flge@ff2+2,w,c
  4250  003F48  5806               	subwfb	___flge@ff1+2,w,c
  4251  003F4A  500B               	movf	___flge@ff2+3,w,c
  4252  003F4C  5807               	subwfb	___flge@ff1+3,w,c
  4253  003F4E  E202               	bc	l3759
  4254  003F50  90D8               	bcf	status,0,c
  4255  003F52  D001               	goto	l838
  4256  003F54                     l3759:
  4257  003F54  80D8               	bsf	status,0,c
  4258  003F56                     l838:
  4259  003F56  0012               	return		;funcret
  4260  003F58                     __end_of___flge:
  4261                           	opt stack 0
  4262                           tblptru	equ	0xFF8
  4263                           tblptrh	equ	0xFF7
  4264                           tblptrl	equ	0xFF6
  4265                           tablat	equ	0xFF5
  4266                           intcon	equ	0xFF2
  4267                           intcon2	equ	0xFF1
  4268                           postinc0	equ	0xFEE
  4269                           wreg	equ	0xFE8
  4270                           postdec1	equ	0xFE5
  4271                           fsr1l	equ	0xFE1
  4272                           status	equ	0xFD8
  4273                           
  4274 ;; *************** function ___altofl *****************
  4275 ;; Defined at:
  4276 ;;		line 36 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\altofl.c"
  4277 ;; Parameters:    Size  Location     Type
  4278 ;;  c               4   14[BANK0 ] long 
  4279 ;; Auto vars:     Size  Location     Type
  4280 ;;  sign            1   18[BANK0 ] unsigned char 
  4281 ;; Return value:  Size  Location     Type
  4282 ;;                  4   14[BANK0 ] unsigned char 
  4283 ;; Registers used:
  4284 ;;		wreg, status,2, status,0, cstack
  4285 ;; Tracked objects:
  4286 ;;		On entry : F/0
  4287 ;;		On exit  : 0/0
  4288 ;;		Unchanged: 0/0
  4289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4290 ;;      Params:         0       4       0       0       0       0       0       0       0
  4291 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4292 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4293 ;;      Totals:         0       5       0       0       0       0       0       0       0
  4294 ;;Total ram usage:        5 bytes
  4295 ;; Hardware stack levels used:    1
  4296 ;; Hardware stack levels required when called:    2
  4297 ;; This function calls:
  4298 ;;		___flpack
  4299 ;; This function is called by:
  4300 ;;		_floor
  4301 ;; This function uses a non-reentrant model
  4302 ;;
  4303                           
  4304                           	psect	text16
  4305  003FEC                     __ptext16:
  4306                           	opt stack 0
  4307  003FEC                     ___altofl:
  4308                           	opt stack 23
  4309                           
  4310                           ; BSR set to: 0
  4311                           
  4312                           ;incstack = 0
  4313  003FEC  6B72               	clrf	___altofl@sign& (0+255),b
  4314                           
  4315                           ; BSR set to: 0
  4316  003FEE  AF71               	btfss	(___altofl@c+3)& (0+255),7,b
  4317  003FF0  D00A               	goto	l3639
  4318                           
  4319                           ; BSR set to: 0
  4320  003FF2  1F71               	comf	(___altofl@c+3)& (0+255),f,b
  4321  003FF4  1F70               	comf	(___altofl@c+2)& (0+255),f,b
  4322  003FF6  1F6F               	comf	(___altofl@c+1)& (0+255),f,b
  4323  003FF8  6D6E               	negf	___altofl@c& (0+255),b
  4324  003FFA  0E00               	movlw	0
  4325  003FFC  236F               	addwfc	(___altofl@c+1)& (0+255),f,b
  4326  003FFE  2370               	addwfc	(___altofl@c+2)& (0+255),f,b
  4327  004000  2371               	addwfc	(___altofl@c+3)& (0+255),f,b
  4328                           
  4329                           ; BSR set to: 0
  4330  004002  0E01               	movlw	1
  4331  004004  6F72               	movwf	___altofl@sign& (0+255),b
  4332  004006                     l3639:
  4333                           
  4334                           ; BSR set to: 0
  4335  004006  C06E  F004         	movff	___altofl@c,___flpack@arg
  4336  00400A  C06F  F005         	movff	___altofl@c+1,___flpack@arg+1
  4337  00400E  C070  F006         	movff	___altofl@c+2,___flpack@arg+2
  4338  004012  C071  F007         	movff	___altofl@c+3,___flpack@arg+3
  4339  004016  0E96               	movlw	150
  4340  004018  6E08               	movwf	___flpack@exp,c
  4341  00401A  C072  F009         	movff	___altofl@sign,___flpack@sign
  4342  00401E  EC89  F01C         	call	___flpack	;wreg free
  4343  004022  C004  F06E         	movff	?___flpack,?___altofl
  4344  004026  C005  F06F         	movff	?___flpack+1,?___altofl+1
  4345  00402A  C006  F070         	movff	?___flpack+2,?___altofl+2
  4346  00402E  C007  F071         	movff	?___flpack+3,?___altofl+3
  4347  004032  0012               	return		;funcret
  4348  004034                     __end_of___altofl:
  4349                           	opt stack 0
  4350                           tblptru	equ	0xFF8
  4351                           tblptrh	equ	0xFF7
  4352                           tblptrl	equ	0xFF6
  4353                           tablat	equ	0xFF5
  4354                           intcon	equ	0xFF2
  4355                           intcon2	equ	0xFF1
  4356                           postinc0	equ	0xFEE
  4357                           wreg	equ	0xFE8
  4358                           postdec1	equ	0xFE5
  4359                           fsr1l	equ	0xFE1
  4360                           status	equ	0xFD8
  4361                           
  4362 ;; *************** function ___flsub *****************
  4363 ;; Defined at:
  4364 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flsub.c"
  4365 ;; Parameters:    Size  Location     Type
  4366 ;;  f1              4   67[COMRAM] unsigned char 
  4367 ;;  f2              4   71[COMRAM] unsigned char 
  4368 ;; Auto vars:     Size  Location     Type
  4369 ;;		None
  4370 ;; Return value:  Size  Location     Type
  4371 ;;                  4   67[COMRAM] unsigned char 
  4372 ;; Registers used:
  4373 ;;		wreg, status,2, status,0, cstack
  4374 ;; Tracked objects:
  4375 ;;		On entry : 0/0
  4376 ;;		On exit  : 0/0
  4377 ;;		Unchanged: 0/0
  4378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4379 ;;      Params:         8       0       0       0       0       0       0       0       0
  4380 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4381 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4382 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4383 ;;Total ram usage:        8 bytes
  4384 ;; Hardware stack levels used:    1
  4385 ;; Hardware stack levels required when called:    3
  4386 ;; This function calls:
  4387 ;;		___fladd
  4388 ;; This function is called by:
  4389 ;;		_measure_capacitance
  4390 ;;		_measure_inductance
  4391 ;;		_format_double
  4392 ;;		_exp
  4393 ;; This function uses a non-reentrant model
  4394 ;;
  4395                           
  4396                           	psect	text17
  4397  00407C                     __ptext17:
  4398                           	opt stack 0
  4399  00407C                     ___flsub:
  4400                           	opt stack 26
  4401                           
  4402                           ;incstack = 0
  4403  00407C  5048               	movf	___flsub@f2,w,c
  4404  00407E  1049               	iorwf	___flsub@f2+1,w,c
  4405  004080  104A               	iorwf	___flsub@f2+2,w,c
  4406  004082  104B               	iorwf	___flsub@f2+3,w,c
  4407  004084  E002               	bz	l3903
  4408  004086  0E80               	movlw	128
  4409  004088  1A4B               	xorwf	___flsub@f2+3,f,c
  4410  00408A                     l3903:
  4411  00408A  C044  F038         	movff	___flsub@f1,___fladd@f1
  4412  00408E  C045  F039         	movff	___flsub@f1+1,___fladd@f1+1
  4413  004092  C046  F03A         	movff	___flsub@f1+2,___fladd@f1+2
  4414  004096  C047  F03B         	movff	___flsub@f1+3,___fladd@f1+3
  4415  00409A  C048  F03C         	movff	___flsub@f2,___fladd@f2
  4416  00409E  C049  F03D         	movff	___flsub@f2+1,___fladd@f2+1
  4417  0040A2  C04A  F03E         	movff	___flsub@f2+2,___fladd@f2+2
  4418  0040A6  C04B  F03F         	movff	___flsub@f2+3,___fladd@f2+3
  4419  0040AA  EC92  F018         	call	___fladd	;wreg free
  4420  0040AE  C038  F044         	movff	?___fladd,?___flsub
  4421  0040B2  C039  F045         	movff	?___fladd+1,?___flsub+1
  4422  0040B6  C03A  F046         	movff	?___fladd+2,?___flsub+2
  4423  0040BA  C03B  F047         	movff	?___fladd+3,?___flsub+3
  4424  0040BE  0012               	return		;funcret
  4425  0040C0                     __end_of___flsub:
  4426                           	opt stack 0
  4427                           tblptru	equ	0xFF8
  4428                           tblptrh	equ	0xFF7
  4429                           tblptrl	equ	0xFF6
  4430                           tablat	equ	0xFF5
  4431                           intcon	equ	0xFF2
  4432                           intcon2	equ	0xFF1
  4433                           postinc0	equ	0xFEE
  4434                           wreg	equ	0xFE8
  4435                           postdec1	equ	0xFE5
  4436                           fsr1l	equ	0xFE1
  4437                           status	equ	0xFD8
  4438                           
  4439 ;; *************** function ___flneg *****************
  4440 ;; Defined at:
  4441 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flneg.c"
  4442 ;; Parameters:    Size  Location     Type
  4443 ;;  f1              4    3[COMRAM] unsigned char 
  4444 ;; Auto vars:     Size  Location     Type
  4445 ;;		None
  4446 ;; Return value:  Size  Location     Type
  4447 ;;                  4    3[COMRAM] unsigned char 
  4448 ;; Registers used:
  4449 ;;		wreg, status,2, status,0
  4450 ;; Tracked objects:
  4451 ;;		On entry : F/0
  4452 ;;		On exit  : F/0
  4453 ;;		Unchanged: F/0
  4454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4455 ;;      Params:         4       0       0       0       0       0       0       0       0
  4456 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4457 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4458 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4459 ;;Total ram usage:        4 bytes
  4460 ;; Hardware stack levels used:    1
  4461 ;; Hardware stack levels required when called:    1
  4462 ;; This function calls:
  4463 ;;		Nothing
  4464 ;; This function is called by:
  4465 ;;		_pow
  4466 ;;		_exp
  4467 ;; This function uses a non-reentrant model
  4468 ;;
  4469                           
  4470                           	psect	text18
  4471  004356                     __ptext18:
  4472                           	opt stack 0
  4473  004356                     ___flneg:
  4474                           	opt stack 25
  4475                           
  4476                           ; BSR set to: 0
  4477                           
  4478                           ;incstack = 0
  4479  004356  5004               	movf	___flneg@f1,w,c
  4480  004358  1005               	iorwf	___flneg@f1+1,w,c
  4481  00435A  1006               	iorwf	___flneg@f1+2,w,c
  4482  00435C  1007               	iorwf	___flneg@f1+3,w,c
  4483  00435E  E002               	bz	l3921
  4484                           
  4485                           ; BSR set to: 0
  4486  004360  0E80               	movlw	128
  4487  004362  1A07               	xorwf	___flneg@f1+3,f,c
  4488  004364                     l3921:
  4489                           
  4490                           ; BSR set to: 0
  4491  004364  C004  F004         	movff	___flneg@f1,?___flneg
  4492  004368  C005  F005         	movff	___flneg@f1+1,?___flneg+1
  4493  00436C  C006  F006         	movff	___flneg@f1+2,?___flneg+2
  4494  004370  C007  F007         	movff	___flneg@f1+3,?___flneg+3
  4495                           
  4496                           ; BSR set to: 0
  4497  004374  0012               	return		;funcret
  4498  004376                     __end_of___flneg:
  4499                           	opt stack 0
  4500                           tblptru	equ	0xFF8
  4501                           tblptrh	equ	0xFF7
  4502                           tblptrl	equ	0xFF6
  4503                           tablat	equ	0xFF5
  4504                           intcon	equ	0xFF2
  4505                           intcon2	equ	0xFF1
  4506                           postinc0	equ	0xFEE
  4507                           wreg	equ	0xFE8
  4508                           postdec1	equ	0xFE5
  4509                           fsr1l	equ	0xFE1
  4510                           status	equ	0xFD8
  4511                           
  4512 ;; *************** function ___fldiv *****************
  4513 ;; Defined at:
  4514 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldiv.c"
  4515 ;; Parameters:    Size  Location     Type
  4516 ;;  f1              4   13[COMRAM] unsigned char 
  4517 ;;  f2              4   17[COMRAM] unsigned char 
  4518 ;; Auto vars:     Size  Location     Type
  4519 ;;  f3              4   21[COMRAM] unsigned char 
  4520 ;;  sign            1   27[COMRAM] unsigned char 
  4521 ;;  exp             1   26[COMRAM] unsigned char 
  4522 ;;  cntr            1   25[COMRAM] unsigned char 
  4523 ;; Return value:  Size  Location     Type
  4524 ;;                  4   13[COMRAM] unsigned char 
  4525 ;; Registers used:
  4526 ;;		wreg, status,2, status,0, cstack
  4527 ;; Tracked objects:
  4528 ;;		On entry : 0/0
  4529 ;;		On exit  : 0/0
  4530 ;;		Unchanged: 0/0
  4531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4532 ;;      Params:         8       0       0       0       0       0       0       0       0
  4533 ;;      Locals:         7       0       0       0       0       0       0       0       0
  4534 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4535 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4536 ;;Total ram usage:       15 bytes
  4537 ;; Hardware stack levels used:    1
  4538 ;; Hardware stack levels required when called:    2
  4539 ;; This function calls:
  4540 ;;		___flpack
  4541 ;; This function is called by:
  4542 ;;		_measure_capacitance
  4543 ;;		_measure_inductance
  4544 ;;		_format_double
  4545 ;;		_exp
  4546 ;; This function uses a non-reentrant model
  4547 ;;
  4548                           
  4549                           	psect	text19
  4550  003B34                     __ptext19:
  4551                           	opt stack 0
  4552  003B34                     ___fldiv:
  4553                           	opt stack 27
  4554                           
  4555                           ; BSR set to: 0
  4556                           ;incstack = 0
  4557  003B34  3410               	rlcf	___fldiv@f1+2,w,c
  4558  003B36  3411               	rlcf	___fldiv@f1+3,w,c
  4559  003B38  6E1B               	movwf	___fldiv@exp,c
  4560  003B3A  501B               	movf	___fldiv@exp,w,c
  4561  003B3C  E005               	bz	l3869
  4562  003B3E  3414               	rlcf	___fldiv@f2+2,w,c
  4563  003B40  3415               	rlcf	___fldiv@f2+3,w,c
  4564  003B42  6E1C               	movwf	___fldiv@sign,c
  4565  003B44  501C               	movf	___fldiv@sign,w,c
  4566  003B46  E105               	bnz	l3871
  4567  003B48                     l3869:
  4568  003B48  6A0E               	clrf	?___fldiv,c
  4569  003B4A  6A0F               	clrf	?___fldiv+1,c
  4570  003B4C  6A10               	clrf	?___fldiv+2,c
  4571  003B4E  6A11               	clrf	?___fldiv+3,c
  4572  003B50  D043               	goto	l829
  4573  003B52                     l3871:
  4574  003B52  501C               	movf	___fldiv@sign,w,c
  4575  003B54  0F89               	addlw	137
  4576  003B56  5E1B               	subwf	___fldiv@exp,f,c
  4577  003B58  C011  F01C         	movff	___fldiv@f1+3,___fldiv@sign
  4578  003B5C  5015               	movf	___fldiv@f2+3,w,c
  4579  003B5E  1A1C               	xorwf	___fldiv@sign,f,c
  4580  003B60  0E80               	movlw	128
  4581  003B62  161C               	andwf	___fldiv@sign,f,c
  4582  003B64  8E10               	bsf	___fldiv@f1+2,7,c
  4583  003B66  6A11               	clrf	___fldiv@f1+3,c
  4584  003B68  8E14               	bsf	___fldiv@f2+2,7,c
  4585  003B6A  6A15               	clrf	___fldiv@f2+3,c
  4586  003B6C  0E20               	movlw	32
  4587  003B6E  6E1A               	movwf	___fldiv@cntr,c
  4588  003B70                     l3883:
  4589  003B70  90D8               	bcf	status,0,c
  4590  003B72  3616               	rlcf	___fldiv@f3,f,c
  4591  003B74  3617               	rlcf	___fldiv@f3+1,f,c
  4592  003B76  3618               	rlcf	___fldiv@f3+2,f,c
  4593  003B78  3619               	rlcf	___fldiv@f3+3,f,c
  4594  003B7A  5012               	movf	___fldiv@f2,w,c
  4595  003B7C  5C0E               	subwf	___fldiv@f1,w,c
  4596  003B7E  5013               	movf	___fldiv@f2+1,w,c
  4597  003B80  580F               	subwfb	___fldiv@f1+1,w,c
  4598  003B82  5014               	movf	___fldiv@f2+2,w,c
  4599  003B84  5810               	subwfb	___fldiv@f1+2,w,c
  4600  003B86  5015               	movf	___fldiv@f2+3,w,c
  4601  003B88  5811               	subwfb	___fldiv@f1+3,w,c
  4602  003B8A  E309               	bnc	l3891
  4603  003B8C  5012               	movf	___fldiv@f2,w,c
  4604  003B8E  5E0E               	subwf	___fldiv@f1,f,c
  4605  003B90  5013               	movf	___fldiv@f2+1,w,c
  4606  003B92  5A0F               	subwfb	___fldiv@f1+1,f,c
  4607  003B94  5014               	movf	___fldiv@f2+2,w,c
  4608  003B96  5A10               	subwfb	___fldiv@f1+2,f,c
  4609  003B98  5015               	movf	___fldiv@f2+3,w,c
  4610  003B9A  5A11               	subwfb	___fldiv@f1+3,f,c
  4611  003B9C  8016               	bsf	___fldiv@f3,0,c
  4612  003B9E                     l3891:
  4613  003B9E  90D8               	bcf	status,0,c
  4614  003BA0  360E               	rlcf	___fldiv@f1,f,c
  4615  003BA2  360F               	rlcf	___fldiv@f1+1,f,c
  4616  003BA4  3610               	rlcf	___fldiv@f1+2,f,c
  4617  003BA6  3611               	rlcf	___fldiv@f1+3,f,c
  4618  003BA8  2E1A               	decfsz	___fldiv@cntr,f,c
  4619  003BAA  D7E2               	goto	l3883
  4620  003BAC  C016  F004         	movff	___fldiv@f3,___flpack@arg
  4621  003BB0  C017  F005         	movff	___fldiv@f3+1,___flpack@arg+1
  4622  003BB4  C018  F006         	movff	___fldiv@f3+2,___flpack@arg+2
  4623  003BB8  C019  F007         	movff	___fldiv@f3+3,___flpack@arg+3
  4624  003BBC  C01B  F008         	movff	___fldiv@exp,___flpack@exp
  4625  003BC0  C01C  F009         	movff	___fldiv@sign,___flpack@sign
  4626  003BC4  EC89  F01C         	call	___flpack	;wreg free
  4627  003BC8  C004  F00E         	movff	?___flpack,?___fldiv
  4628  003BCC  C005  F00F         	movff	?___flpack+1,?___fldiv+1
  4629  003BD0  C006  F010         	movff	?___flpack+2,?___fldiv+2
  4630  003BD4  C007  F011         	movff	?___flpack+3,?___fldiv+3
  4631  003BD8                     l829:
  4632  003BD8  0012               	return		;funcret
  4633  003BDA                     __end_of___fldiv:
  4634                           	opt stack 0
  4635                           tblptru	equ	0xFF8
  4636                           tblptrh	equ	0xFF7
  4637                           tblptrl	equ	0xFF6
  4638                           tablat	equ	0xFF5
  4639                           intcon	equ	0xFF2
  4640                           intcon2	equ	0xFF1
  4641                           postinc0	equ	0xFEE
  4642                           wreg	equ	0xFE8
  4643                           postdec1	equ	0xFE5
  4644                           fsr1l	equ	0xFE1
  4645                           status	equ	0xFD8
  4646                           
  4647 ;; *************** function ___lltofl *****************
  4648 ;; Defined at:
  4649 ;;		line 30 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltofl.c"
  4650 ;; Parameters:    Size  Location     Type
  4651 ;;  c               4   13[COMRAM] unsigned long 
  4652 ;; Auto vars:     Size  Location     Type
  4653 ;;		None
  4654 ;; Return value:  Size  Location     Type
  4655 ;;                  4   13[COMRAM] unsigned long 
  4656 ;; Registers used:
  4657 ;;		wreg, status,2, status,0, cstack
  4658 ;; Tracked objects:
  4659 ;;		On entry : F/0
  4660 ;;		On exit  : 0/0
  4661 ;;		Unchanged: 0/0
  4662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4663 ;;      Params:         4       0       0       0       0       0       0       0       0
  4664 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4665 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4666 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4667 ;;Total ram usage:        4 bytes
  4668 ;; Hardware stack levels used:    1
  4669 ;; Hardware stack levels required when called:    2
  4670 ;; This function calls:
  4671 ;;		___flpack
  4672 ;; This function is called by:
  4673 ;;		_pow
  4674 ;; This function uses a non-reentrant model
  4675 ;;
  4676                           
  4677                           	psect	text20
  4678  004238                     __ptext20:
  4679                           	opt stack 0
  4680  004238                     ___lltofl:
  4681                           	opt stack 25
  4682                           
  4683                           ; BSR set to: 0
  4684                           
  4685                           ;incstack = 0
  4686  004238  C00E  F004         	movff	___lltofl@c,___flpack@arg
  4687  00423C  C00F  F005         	movff	___lltofl@c+1,___flpack@arg+1
  4688  004240  C010  F006         	movff	___lltofl@c+2,___flpack@arg+2
  4689  004244  C011  F007         	movff	___lltofl@c+3,___flpack@arg+3
  4690  004248  0E96               	movlw	150
  4691  00424A  6E08               	movwf	___flpack@exp,c
  4692  00424C  0E00               	movlw	0
  4693  00424E  6E09               	movwf	___flpack@sign,c
  4694  004250  EC89  F01C         	call	___flpack	;wreg free
  4695  004254  C004  F00E         	movff	?___flpack,?___lltofl
  4696  004258  C005  F00F         	movff	?___flpack+1,?___lltofl+1
  4697  00425C  C006  F010         	movff	?___flpack+2,?___lltofl+2
  4698  004260  C007  F011         	movff	?___flpack+3,?___lltofl+3
  4699  004264  0012               	return		;funcret
  4700  004266                     __end_of___lltofl:
  4701                           	opt stack 0
  4702                           tblptru	equ	0xFF8
  4703                           tblptrh	equ	0xFF7
  4704                           tblptrl	equ	0xFF6
  4705                           tablat	equ	0xFF5
  4706                           intcon	equ	0xFF2
  4707                           intcon2	equ	0xFF1
  4708                           postinc0	equ	0xFEE
  4709                           wreg	equ	0xFE8
  4710                           postdec1	equ	0xFE5
  4711                           fsr1l	equ	0xFE1
  4712                           status	equ	0xFD8
  4713                           
  4714 ;; *************** function _log10 *****************
  4715 ;; Defined at:
  4716 ;;		line 39 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  4717 ;; Parameters:    Size  Location     Type
  4718 ;;  x               4   85[COMRAM] unsigned long 
  4719 ;; Auto vars:     Size  Location     Type
  4720 ;;		None
  4721 ;; Return value:  Size  Location     Type
  4722 ;;                  4   85[COMRAM] unsigned long 
  4723 ;; Registers used:
  4724 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4725 ;; Tracked objects:
  4726 ;;		On entry : 0/0
  4727 ;;		On exit  : 0/0
  4728 ;;		Unchanged: 0/0
  4729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4730 ;;      Params:         4       0       0       0       0       0       0       0       0
  4731 ;;      Locals:         0       4       0       0       0       0       0       0       0
  4732 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4733 ;;      Totals:         4       4       0       0       0       0       0       0       0
  4734 ;;Total ram usage:        8 bytes
  4735 ;; Hardware stack levels used:    1
  4736 ;; Hardware stack levels required when called:    5
  4737 ;; This function calls:
  4738 ;;		___flmul
  4739 ;;		_log
  4740 ;; This function is called by:
  4741 ;;		_format_double
  4742 ;; This function uses a non-reentrant model
  4743 ;;
  4744                           
  4745                           	psect	text21
  4746  003E66                     __ptext21:
  4747                           	opt stack 0
  4748  003E66                     _log10:
  4749                           	opt stack 23
  4750                           
  4751                           ;incstack = 0
  4752  003E66  C056  F050         	movff	log10@x,log@x
  4753  003E6A  C057  F051         	movff	log10@x+1,log@x+1
  4754  003E6E  C058  F052         	movff	log10@x+2,log@x+2
  4755  003E72  C059  F053         	movff	log10@x+3,log@x+3
  4756  003E76  EC46  F019         	call	_log	;wreg free
  4757  003E7A  C050  F060         	movff	?_log,_log10$1129
  4758  003E7E  C051  F061         	movff	?_log+1,_log10$1129+1
  4759  003E82  C052  F062         	movff	?_log+2,_log10$1129+2
  4760  003E86  C053  F063         	movff	?_log+3,_log10$1129+3
  4761  003E8A  C060  F01D         	movff	_log10$1129,___flmul@f1
  4762  003E8E  C061  F01E         	movff	_log10$1129+1,___flmul@f1+1
  4763  003E92  C062  F01F         	movff	_log10$1129+2,___flmul@f1+2
  4764  003E96  C063  F020         	movff	_log10$1129+3,___flmul@f1+3
  4765  003E9A  0ED9               	movlw	217
  4766  003E9C  6E21               	movwf	___flmul@f2,c
  4767  003E9E  0E5B               	movlw	91
  4768  003EA0  6E22               	movwf	___flmul@f2+1,c
  4769  003EA2  0EDE               	movlw	222
  4770  003EA4  6E23               	movwf	___flmul@f2+2,c
  4771  003EA6  0E3E               	movlw	62
  4772  003EA8  6E24               	movwf	___flmul@f2+3,c
  4773  003EAA  EC2B  F016         	call	___flmul	;wreg free
  4774  003EAE  C01D  F056         	movff	?___flmul,?_log10
  4775  003EB2  C01E  F057         	movff	?___flmul+1,?_log10+1
  4776  003EB6  C01F  F058         	movff	?___flmul+2,?_log10+2
  4777  003EBA  C020  F059         	movff	?___flmul+3,?_log10+3
  4778  003EBE  0012               	return		;funcret
  4779  003EC0                     __end_of_log10:
  4780                           	opt stack 0
  4781                           tblptru	equ	0xFF8
  4782                           tblptrh	equ	0xFF7
  4783                           tblptrl	equ	0xFF6
  4784                           tablat	equ	0xFF5
  4785                           intcon	equ	0xFF2
  4786                           intcon2	equ	0xFF1
  4787                           postinc0	equ	0xFEE
  4788                           wreg	equ	0xFE8
  4789                           postdec1	equ	0xFE5
  4790                           fsr1l	equ	0xFE1
  4791                           status	equ	0xFD8
  4792                           
  4793 ;; *************** function _log *****************
  4794 ;; Defined at:
  4795 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  4796 ;; Parameters:    Size  Location     Type
  4797 ;;  x               4   79[COMRAM] unsigned long 
  4798 ;; Auto vars:     Size  Location     Type
  4799 ;;  exponent        2   83[COMRAM] int 
  4800 ;; Return value:  Size  Location     Type
  4801 ;;                  4   79[COMRAM] int 
  4802 ;; Registers used:
  4803 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4804 ;; Tracked objects:
  4805 ;;		On entry : 0/0
  4806 ;;		On exit  : 0/0
  4807 ;;		Unchanged: 0/0
  4808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4809 ;;      Params:         4       0       0       0       0       0       0       0       0
  4810 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4811 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4812 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4813 ;;Total ram usage:        6 bytes
  4814 ;; Hardware stack levels used:    1
  4815 ;; Hardware stack levels required when called:    4
  4816 ;; This function calls:
  4817 ;;		___awtofl
  4818 ;;		___fladd
  4819 ;;		___flmul
  4820 ;;		_eval_poly
  4821 ;;		_frexp
  4822 ;; This function is called by:
  4823 ;;		_log10
  4824 ;;		_pow
  4825 ;; This function uses a non-reentrant model
  4826 ;;
  4827                           
  4828                           	psect	text22
  4829  00328C                     __ptext22:
  4830                           	opt stack 0
  4831  00328C                     _log:
  4832                           	opt stack 23
  4833                           
  4834                           ;incstack = 0
  4835  00328C  BE53               	btfsc	log@x+3,7,c
  4836  00328E  D005               	goto	l3987
  4837  003290  5050               	movf	log@x,w,c
  4838  003292  1051               	iorwf	log@x+1,w,c
  4839  003294  1052               	iorwf	log@x+2,w,c
  4840  003296  1053               	iorwf	log@x+3,w,c
  4841  003298  E105               	bnz	l3989
  4842  00329A                     l3987:
  4843  00329A  6A50               	clrf	?_log,c
  4844  00329C  6A51               	clrf	?_log+1,c
  4845  00329E  6A52               	clrf	?_log+2,c
  4846  0032A0  6A53               	clrf	?_log+3,c
  4847  0032A2  D080               	goto	l1065
  4848  0032A4                     l3989:
  4849  0032A4  6A21               	clrf	___flmul@f2,c
  4850  0032A6  6A22               	clrf	___flmul@f2+1,c
  4851  0032A8  6A23               	clrf	___flmul@f2+2,c
  4852  0032AA  0E40               	movlw	64
  4853  0032AC  6E24               	movwf	___flmul@f2+3,c
  4854  0032AE  0E54               	movlw	low log@exponent
  4855  0032B0  6E08               	movwf	frexp@eptr,c
  4856  0032B2  C050  F004         	movff	log@x,frexp@value
  4857  0032B6  C051  F005         	movff	log@x+1,frexp@value+1
  4858  0032BA  C052  F006         	movff	log@x+2,frexp@value+2
  4859  0032BE  C053  F007         	movff	log@x+3,frexp@value+3
  4860  0032C2  EC88  F01E         	call	_frexp	;wreg free
  4861  0032C6  C004  F01D         	movff	?_frexp,___flmul@f1
  4862  0032CA  C005  F01E         	movff	?_frexp+1,___flmul@f1+1
  4863  0032CE  C006  F01F         	movff	?_frexp+2,___flmul@f1+2
  4864  0032D2  C007  F020         	movff	?_frexp+3,___flmul@f1+3
  4865  0032D6  EC2B  F016         	call	___flmul	;wreg free
  4866  0032DA  C01D  F038         	movff	?___flmul,___fladd@f1
  4867  0032DE  C01E  F039         	movff	?___flmul+1,___fladd@f1+1
  4868  0032E2  C01F  F03A         	movff	?___flmul+2,___fladd@f1+2
  4869  0032E6  C020  F03B         	movff	?___flmul+3,___fladd@f1+3
  4870  0032EA  0E00               	movlw	0
  4871  0032EC  6E3C               	movwf	___fladd@f2,c
  4872  0032EE  6E3D               	movwf	___fladd@f2+1,c
  4873  0032F0  0E80               	movlw	128
  4874  0032F2  6E3E               	movwf	___fladd@f2+2,c
  4875  0032F4  0EBF               	movlw	191
  4876  0032F6  6E3F               	movwf	___fladd@f2+3,c
  4877  0032F8  EC92  F018         	call	___fladd	;wreg free
  4878  0032FC  C038  F050         	movff	?___fladd,log@x
  4879  003300  C039  F051         	movff	?___fladd+1,log@x+1
  4880  003304  C03A  F052         	movff	?___fladd+2,log@x+2
  4881  003308  C03B  F053         	movff	?___fladd+3,log@x+3
  4882  00330C  0654               	decf	log@exponent,f,c
  4883  00330E  A0D8               	btfss	status,0,c
  4884  003310  0655               	decf	log@exponent+1,f,c
  4885  003312  C050  F044         	movff	log@x,eval_poly@x
  4886  003316  C051  F045         	movff	log@x+1,eval_poly@x+1
  4887  00331A  C052  F046         	movff	log@x+2,eval_poly@x+2
  4888  00331E  C053  F047         	movff	log@x+3,eval_poly@x+3
  4889  003322  0E41               	movlw	low log@coeff
  4890  003324  6E48               	movwf	eval_poly@d,c
  4891  003326  6A4A               	clrf	eval_poly@n+1,c
  4892  003328  0E08               	movlw	8
  4893  00332A  6E49               	movwf	eval_poly@n,c
  4894  00332C  ECEC  F01C         	call	_eval_poly	;wreg free
  4895  003330  C044  F050         	movff	?_eval_poly,log@x
  4896  003334  C045  F051         	movff	?_eval_poly+1,log@x+1
  4897  003338  C046  F052         	movff	?_eval_poly+2,log@x+2
  4898  00333C  C047  F053         	movff	?_eval_poly+3,log@x+3
  4899  003340  0E18               	movlw	24
  4900  003342  6E21               	movwf	___flmul@f2,c
  4901  003344  0E72               	movlw	114
  4902  003346  6E22               	movwf	___flmul@f2+1,c
  4903  003348  0E31               	movlw	49
  4904  00334A  6E23               	movwf	___flmul@f2+2,c
  4905  00334C  0E3F               	movlw	63
  4906  00334E  6E24               	movwf	___flmul@f2+3,c
  4907  003350  C054  F00E         	movff	log@exponent,___awtofl@c
  4908  003354  C055  F00F         	movff	log@exponent+1,___awtofl@c+1
  4909  003358  EC7F  F020         	call	___awtofl	;wreg free
  4910  00335C  C00E  F01D         	movff	?___awtofl,___flmul@f1
  4911  003360  C00F  F01E         	movff	?___awtofl+1,___flmul@f1+1
  4912  003364  C010  F01F         	movff	?___awtofl+2,___flmul@f1+2
  4913  003368  C011  F020         	movff	?___awtofl+3,___flmul@f1+3
  4914  00336C  EC2B  F016         	call	___flmul	;wreg free
  4915  003370  C01D  F038         	movff	?___flmul,___fladd@f1
  4916  003374  C01E  F039         	movff	?___flmul+1,___fladd@f1+1
  4917  003378  C01F  F03A         	movff	?___flmul+2,___fladd@f1+2
  4918  00337C  C020  F03B         	movff	?___flmul+3,___fladd@f1+3
  4919  003380  C050  F03C         	movff	log@x,___fladd@f2
  4920  003384  C051  F03D         	movff	log@x+1,___fladd@f2+1
  4921  003388  C052  F03E         	movff	log@x+2,___fladd@f2+2
  4922  00338C  C053  F03F         	movff	log@x+3,___fladd@f2+3
  4923  003390  EC92  F018         	call	___fladd	;wreg free
  4924  003394  C038  F050         	movff	?___fladd,?_log
  4925  003398  C039  F051         	movff	?___fladd+1,?_log+1
  4926  00339C  C03A  F052         	movff	?___fladd+2,?_log+2
  4927  0033A0  C03B  F053         	movff	?___fladd+3,?_log+3
  4928  0033A4                     l1065:
  4929  0033A4  0012               	return		;funcret
  4930  0033A6                     __end_of_log:
  4931                           	opt stack 0
  4932                           tblptru	equ	0xFF8
  4933                           tblptrh	equ	0xFF7
  4934                           tblptrl	equ	0xFF6
  4935                           tablat	equ	0xFF5
  4936                           intcon	equ	0xFF2
  4937                           intcon2	equ	0xFF1
  4938                           postinc0	equ	0xFEE
  4939                           wreg	equ	0xFE8
  4940                           postdec1	equ	0xFE5
  4941                           fsr1l	equ	0xFE1
  4942                           status	equ	0xFD8
  4943                           
  4944 ;; *************** function _frexp *****************
  4945 ;; Defined at:
  4946 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  4947 ;; Parameters:    Size  Location     Type
  4948 ;;  value           4    3[COMRAM] int 
  4949 ;;  eptr            1    7[COMRAM] PTR int 
  4950 ;;		 -> log@exponent(2), floor@expon(2), 
  4951 ;; Auto vars:     Size  Location     Type
  4952 ;;		None
  4953 ;; Return value:  Size  Location     Type
  4954 ;;                  4    3[COMRAM] PTR int 
  4955 ;; Registers used:
  4956 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4957 ;; Tracked objects:
  4958 ;;		On entry : 0/0
  4959 ;;		On exit  : 0/0
  4960 ;;		Unchanged: 0/0
  4961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4962 ;;      Params:         5       0       0       0       0       0       0       0       0
  4963 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4964 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4965 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4966 ;;Total ram usage:        7 bytes
  4967 ;; Hardware stack levels used:    1
  4968 ;; Hardware stack levels required when called:    1
  4969 ;; This function calls:
  4970 ;;		Nothing
  4971 ;; This function is called by:
  4972 ;;		_floor
  4973 ;;		_log
  4974 ;; This function uses a non-reentrant model
  4975 ;;
  4976                           
  4977                           	psect	text23
  4978  003D10                     __ptext23:
  4979                           	opt stack 0
  4980  003D10                     _frexp:
  4981                           	opt stack 25
  4982                           
  4983                           ;incstack = 0
  4984  003D10  5004               	movf	frexp@value,w,c
  4985  003D12  1005               	iorwf	frexp@value+1,w,c
  4986  003D14  1006               	iorwf	frexp@value+2,w,c
  4987  003D16  1007               	iorwf	frexp@value+3,w,c
  4988  003D18  E10B               	bnz	l3771
  4989  003D1A  5008               	movf	frexp@eptr,w,c
  4990  003D1C  6ED9               	movwf	fsr2l,c
  4991  003D1E  6ADA               	clrf	fsr2h,c
  4992  003D20  0E00               	movlw	0
  4993  003D22  6ADE               	clrf	postinc2,c
  4994  003D24  6ADD               	clrf	postdec2,c
  4995  003D26  6A04               	clrf	?_frexp,c
  4996  003D28  6A05               	clrf	?_frexp+1,c
  4997  003D2A  6A06               	clrf	?_frexp+2,c
  4998  003D2C  6A07               	clrf	?_frexp+3,c
  4999  003D2E  D02B               	goto	l904
  5000  003D30                     l3771:
  5001  003D30  5007               	movf	frexp@value+3,w,c
  5002  003D32  0B7F               	andlw	127
  5003  003D34  6E09               	movwf	??_frexp& (0+255),c
  5004  003D36  6A0A               	clrf	(??_frexp+1)& (0+255),c
  5005  003D38  90D8               	bcf	status,0,c
  5006  003D3A  3609               	rlcf	??_frexp,f,c
  5007  003D3C  360A               	rlcf	??_frexp+1,f,c
  5008  003D3E  5008               	movf	frexp@eptr,w,c
  5009  003D40  6ED9               	movwf	fsr2l,c
  5010  003D42  6ADA               	clrf	fsr2h,c
  5011  003D44  C009  FFDE         	movff	??_frexp,postinc2
  5012  003D48  C00A  FFDD         	movff	??_frexp+1,postdec2
  5013  003D4C  5008               	movf	frexp@eptr,w,c
  5014  003D4E  6ED9               	movwf	fsr2l,c
  5015  003D50  6ADA               	clrf	fsr2h,c
  5016  003D52  0E01               	movlw	1
  5017  003D54  AE06               	btfss	frexp@value+2,7,c
  5018  003D56  0E00               	movlw	0
  5019  003D58  12DE               	iorwf	postinc2,f,c
  5020  003D5A  0E00               	movlw	0
  5021  003D5C  12DD               	iorwf	postdec2,f,c
  5022  003D5E  5008               	movf	frexp@eptr,w,c
  5023  003D60  6ED9               	movwf	fsr2l,c
  5024  003D62  6ADA               	clrf	fsr2h,c
  5025  003D64  0E82               	movlw	130
  5026  003D66  26DE               	addwf	postinc2,f,c
  5027  003D68  0EFF               	movlw	255
  5028  003D6A  22DD               	addwfc	postdec2,f,c
  5029  003D6C  5007               	movf	frexp@value+3,w,c
  5030  003D6E  0B80               	andlw	-128
  5031  003D70  093F               	iorlw	63
  5032  003D72  6E07               	movwf	frexp@value+3,c
  5033  003D74  9E06               	bcf	frexp@value+2,7,c
  5034  003D76  C004  F004         	movff	frexp@value,?_frexp
  5035  003D7A  C005  F005         	movff	frexp@value+1,?_frexp+1
  5036  003D7E  C006  F006         	movff	frexp@value+2,?_frexp+2
  5037  003D82  C007  F007         	movff	frexp@value+3,?_frexp+3
  5038  003D86                     l904:
  5039  003D86  0012               	return		;funcret
  5040  003D88                     __end_of_frexp:
  5041                           	opt stack 0
  5042                           tblptru	equ	0xFF8
  5043                           tblptrh	equ	0xFF7
  5044                           tblptrl	equ	0xFF6
  5045                           tablat	equ	0xFF5
  5046                           intcon	equ	0xFF2
  5047                           intcon2	equ	0xFF1
  5048                           postinc0	equ	0xFEE
  5049                           wreg	equ	0xFE8
  5050                           postdec1	equ	0xFE5
  5051                           fsr1l	equ	0xFE1
  5052                           postinc2	equ	0xFDE
  5053                           postdec2	equ	0xFDD
  5054                           fsr2h	equ	0xFDA
  5055                           fsr2l	equ	0xFD9
  5056                           status	equ	0xFD8
  5057                           
  5058 ;; *************** function _eval_poly *****************
  5059 ;; Defined at:
  5060 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  5061 ;; Parameters:    Size  Location     Type
  5062 ;;  x               4   67[COMRAM] PTR int 
  5063 ;;  d               1   71[COMRAM] PTR const 
  5064 ;;		 -> exp@coeff(40), log@coeff(36), 
  5065 ;;  n               2   72[COMRAM] int 
  5066 ;; Auto vars:     Size  Location     Type
  5067 ;;  res             4   75[COMRAM] int 
  5068 ;; Return value:  Size  Location     Type
  5069 ;;                  4   67[COMRAM] int 
  5070 ;; Registers used:
  5071 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5072 ;; Tracked objects:
  5073 ;;		On entry : 0/0
  5074 ;;		On exit  : 0/0
  5075 ;;		Unchanged: 0/0
  5076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5077 ;;      Params:         7       0       0       0       0       0       0       0       0
  5078 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5079 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5080 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5081 ;;Total ram usage:       12 bytes
  5082 ;; Hardware stack levels used:    1
  5083 ;; Hardware stack levels required when called:    3
  5084 ;; This function calls:
  5085 ;;		___fladd
  5086 ;;		___flmul
  5087 ;; This function is called by:
  5088 ;;		_log
  5089 ;;		_exp
  5090 ;; This function uses a non-reentrant model
  5091 ;;
  5092                           
  5093                           	psect	text24
  5094  0039D8                     __ptext24:
  5095                           	opt stack 0
  5096  0039D8                     _eval_poly:
  5097                           	opt stack 23
  5098                           
  5099                           ;incstack = 0
  5100  0039D8  5049               	movf	eval_poly@n,w,c
  5101  0039DA  0D04               	mullw	4
  5102  0039DC  5048               	movf	eval_poly@d,w,c
  5103  0039DE  24F3               	addwf	prodl,w,c
  5104  0039E0  6E4B               	movwf	??_eval_poly& (0+255),c
  5105  0039E2  C04B  FFF6         	movff	??_eval_poly,tblptrl
  5106  0039E6                     	if	0	;There is only one active tblptr byte
  5107  0039E6                     	endif
  5108  0039E6                     	if	0	;tblptru may be non-zero
  5109  0039E6                     	endif
  5110  0039E6                     	if	0	;tblptru may be non-zero
  5111  0039E6                     	endif
  5112  0039E6  0009               	tblrd		*+
  5113  0039E8  CFF5 F04C          	movff	tablat,eval_poly@res
  5114  0039EC  0009               	tblrd		*+
  5115  0039EE  CFF5 F04D          	movff	tablat,eval_poly@res+1
  5116  0039F2  0009               	tblrd		*+
  5117  0039F4  CFF5 F04E          	movff	tablat,eval_poly@res+2
  5118  0039F8  000A               	tblrd		*-
  5119  0039FA  CFF5 F04F          	movff	tablat,eval_poly@res+3
  5120  0039FE  D03A               	goto	l3959
  5121  003A00                     l3957:
  5122  003A00  C04C  F021         	movff	eval_poly@res,___flmul@f2
  5123  003A04  C04D  F022         	movff	eval_poly@res+1,___flmul@f2+1
  5124  003A08  C04E  F023         	movff	eval_poly@res+2,___flmul@f2+2
  5125  003A0C  C04F  F024         	movff	eval_poly@res+3,___flmul@f2+3
  5126  003A10  C044  F01D         	movff	eval_poly@x,___flmul@f1
  5127  003A14  C045  F01E         	movff	eval_poly@x+1,___flmul@f1+1
  5128  003A18  C046  F01F         	movff	eval_poly@x+2,___flmul@f1+2
  5129  003A1C  C047  F020         	movff	eval_poly@x+3,___flmul@f1+3
  5130  003A20  EC2B  F016         	call	___flmul	;wreg free
  5131  003A24  C01D  F038         	movff	?___flmul,___fladd@f1
  5132  003A28  C01E  F039         	movff	?___flmul+1,___fladd@f1+1
  5133  003A2C  C01F  F03A         	movff	?___flmul+2,___fladd@f1+2
  5134  003A30  C020  F03B         	movff	?___flmul+3,___fladd@f1+3
  5135  003A34  0649               	decf	eval_poly@n,f,c
  5136  003A36  A0D8               	btfss	status,0,c
  5137  003A38  064A               	decf	eval_poly@n+1,f,c
  5138  003A3A  5049               	movf	eval_poly@n,w,c
  5139  003A3C  0D04               	mullw	4
  5140  003A3E  5048               	movf	eval_poly@d,w,c
  5141  003A40  24F3               	addwf	prodl,w,c
  5142  003A42  6E4B               	movwf	??_eval_poly& (0+255),c
  5143  003A44  C04B  FFF6         	movff	??_eval_poly,tblptrl
  5144  003A48                     	if	0	;There is only one active tblptr byte
  5145  003A48                     	endif
  5146  003A48                     	if	0	;tblptru may be non-zero
  5147  003A48                     	endif
  5148  003A48                     	if	0	;tblptru may be non-zero
  5149  003A48                     	endif
  5150  003A48  0009               	tblrd		*+
  5151  003A4A  CFF5 F03C          	movff	tablat,___fladd@f2
  5152  003A4E  0009               	tblrd		*+
  5153  003A50  CFF5 F03D          	movff	tablat,___fladd@f2+1
  5154  003A54  0009               	tblrd		*+
  5155  003A56  CFF5 F03E          	movff	tablat,___fladd@f2+2
  5156  003A5A  000A               	tblrd		*-
  5157  003A5C  CFF5 F03F          	movff	tablat,___fladd@f2+3
  5158  003A60  EC92  F018         	call	___fladd	;wreg free
  5159  003A64  C038  F04C         	movff	?___fladd,eval_poly@res
  5160  003A68  C039  F04D         	movff	?___fladd+1,eval_poly@res+1
  5161  003A6C  C03A  F04E         	movff	?___fladd+2,eval_poly@res+2
  5162  003A70  C03B  F04F         	movff	?___fladd+3,eval_poly@res+3
  5163  003A74                     l3959:
  5164  003A74  5049               	movf	eval_poly@n,w,c
  5165  003A76  104A               	iorwf	eval_poly@n+1,w,c
  5166  003A78  E1C3               	bnz	l3957
  5167  003A7A  C04C  F044         	movff	eval_poly@res,?_eval_poly
  5168  003A7E  C04D  F045         	movff	eval_poly@res+1,?_eval_poly+1
  5169  003A82  C04E  F046         	movff	eval_poly@res+2,?_eval_poly+2
  5170  003A86  C04F  F047         	movff	eval_poly@res+3,?_eval_poly+3
  5171  003A8A  0012               	return		;funcret
  5172  003A8C                     __end_of_eval_poly:
  5173                           	opt stack 0
  5174                           tblptru	equ	0xFF8
  5175                           tblptrh	equ	0xFF7
  5176                           tblptrl	equ	0xFF6
  5177                           tablat	equ	0xFF5
  5178                           prodl	equ	0xFF3
  5179                           intcon	equ	0xFF2
  5180                           intcon2	equ	0xFF1
  5181                           postinc0	equ	0xFEE
  5182                           wreg	equ	0xFE8
  5183                           postdec1	equ	0xFE5
  5184                           fsr1l	equ	0xFE1
  5185                           postinc2	equ	0xFDE
  5186                           postdec2	equ	0xFDD
  5187                           fsr2h	equ	0xFDA
  5188                           fsr2l	equ	0xFD9
  5189                           status	equ	0xFD8
  5190                           
  5191 ;; *************** function ___flmul *****************
  5192 ;; Defined at:
  5193 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flmul.c"
  5194 ;; Parameters:    Size  Location     Type
  5195 ;;  f1              4   28[COMRAM] int 
  5196 ;;  f2              4   32[COMRAM] int 
  5197 ;; Auto vars:     Size  Location     Type
  5198 ;;  f3_as_produc    4   51[COMRAM] unsigned long 
  5199 ;;  sign            1   50[COMRAM] unsigned char 
  5200 ;;  exp             1   49[COMRAM] unsigned char 
  5201 ;;  cntr            1    0        unsigned char 
  5202 ;; Return value:  Size  Location     Type
  5203 ;;                  4   28[COMRAM] unsigned char 
  5204 ;; Registers used:
  5205 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5206 ;; Tracked objects:
  5207 ;;		On entry : 0/0
  5208 ;;		On exit  : 0/0
  5209 ;;		Unchanged: 0/0
  5210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5211 ;;      Params:         8       0       0       0       0       0       0       0       0
  5212 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5213 ;;      Temps:         13       0       0       0       0       0       0       0       0
  5214 ;;      Totals:        27       0       0       0       0       0       0       0       0
  5215 ;;Total ram usage:       27 bytes
  5216 ;; Hardware stack levels used:    1
  5217 ;; Hardware stack levels required when called:    2
  5218 ;; This function calls:
  5219 ;;		___flpack
  5220 ;; This function is called by:
  5221 ;;		_measure_capacitance
  5222 ;;		_measure_inductance
  5223 ;;		_format_double
  5224 ;;		_log
  5225 ;;		_log10
  5226 ;;		_pow
  5227 ;;		_eval_poly
  5228 ;;		_exp
  5229 ;; This function uses a non-reentrant model
  5230 ;;
  5231                           
  5232                           	psect	text25
  5233  002C56                     __ptext25:
  5234                           	opt stack 0
  5235  002C56                     ___flmul:
  5236                           	opt stack 27
  5237                           
  5238                           ;incstack = 0
  5239  002C56  341F               	rlcf	___flmul@f1+2,w,c
  5240  002C58  3420               	rlcf	___flmul@f1+3,w,c
  5241  002C5A  6E32               	movwf	___flmul@exp,c
  5242  002C5C  5032               	movf	___flmul@exp,w,c
  5243  002C5E  E005               	bz	l3715
  5244  002C60  3423               	rlcf	___flmul@f2+2,w,c
  5245  002C62  3424               	rlcf	___flmul@f2+3,w,c
  5246  002C64  6E33               	movwf	___flmul@sign,c
  5247  002C66  5033               	movf	___flmul@sign,w,c
  5248  002C68  E105               	bnz	l3717
  5249  002C6A                     l3715:
  5250  002C6A  6A1D               	clrf	?___flmul,c
  5251  002C6C  6A1E               	clrf	?___flmul+1,c
  5252  002C6E  6A1F               	clrf	?___flmul+2,c
  5253  002C70  6A20               	clrf	?___flmul+3,c
  5254  002C72  D0CF               	goto	l844
  5255  002C74                     l3717:
  5256  002C74  5033               	movf	___flmul@sign,w,c
  5257  002C76  0F7B               	addlw	123
  5258  002C78  2632               	addwf	___flmul@exp,f,c
  5259  002C7A  C020  F033         	movff	___flmul@f1+3,___flmul@sign
  5260  002C7E  5024               	movf	___flmul@f2+3,w,c
  5261  002C80  1A33               	xorwf	___flmul@sign,f,c
  5262  002C82  0E80               	movlw	128
  5263  002C84  1633               	andwf	___flmul@sign,f,c
  5264  002C86  8E1F               	bsf	___flmul@f1+2,7,c
  5265  002C88  8E23               	bsf	___flmul@f2+2,7,c
  5266  002C8A  6A24               	clrf	___flmul@f2+3,c
  5267  002C8C  6A20               	clrf	___flmul@f1+3,c
  5268  002C8E  501D               	movf	___flmul@f1,w,c
  5269  002C90  0221               	mulwf	___flmul@f2,c
  5270  002C92  CFF4 FFF3          	movff	prodh,prodl
  5271  002C96  6AF4               	clrf	prodh,c
  5272  002C98  CFF3 F034          	movff	prodl,___flmul@f3_as_product
  5273  002C9C  CFF4 F035          	movff	prodh,___flmul@f3_as_product+1
  5274  002CA0  6A36               	clrf	___flmul@f3_as_product+2,c
  5275  002CA2  6A37               	clrf	___flmul@f3_as_product+3,c
  5276  002CA4  501D               	movf	___flmul@f1,w,c
  5277  002CA6  0222               	mulwf	___flmul@f2+1,c
  5278  002CA8  CFF3 F025          	movff	prodl,??___flmul
  5279  002CAC  CFF4 F026          	movff	prodh,??___flmul+1
  5280  002CB0  6A27               	clrf	(??___flmul+2)& (0+255),c
  5281  002CB2  501E               	movf	___flmul@f1+1,w,c
  5282  002CB4  0221               	mulwf	___flmul@f2,c
  5283  002CB6  50F3               	movf	prodl,w,c
  5284  002CB8  2425               	addwf	??___flmul,w,c
  5285  002CBA  6E28               	movwf	(??___flmul+3)& (0+255),c
  5286  002CBC  50F4               	movf	prodh,w,c
  5287  002CBE  2026               	addwfc	??___flmul+1,w,c
  5288  002CC0  6E29               	movwf	(??___flmul+4)& (0+255),c
  5289  002CC2  0E00               	movlw	0
  5290  002CC4  2027               	addwfc	??___flmul+2,w,c
  5291  002CC6  6E2A               	movwf	(??___flmul+5)& (0+255),c
  5292  002CC8  5028               	movf	??___flmul+3,w,c
  5293  002CCA  6E2B               	movwf	(??___flmul+6)& (0+255),c
  5294  002CCC  5029               	movf	??___flmul+4,w,c
  5295  002CCE  6E2C               	movwf	(??___flmul+7)& (0+255),c
  5296  002CD0  502A               	movf	??___flmul+5,w,c
  5297  002CD2  6E2D               	movwf	(??___flmul+8)& (0+255),c
  5298  002CD4  6A2E               	clrf	(??___flmul+9)& (0+255),c
  5299  002CD6  502B               	movf	??___flmul+6,w,c
  5300  002CD8  2634               	addwf	___flmul@f3_as_product,f,c
  5301  002CDA  502C               	movf	??___flmul+7,w,c
  5302  002CDC  2235               	addwfc	___flmul@f3_as_product+1,f,c
  5303  002CDE  502D               	movf	??___flmul+8,w,c
  5304  002CE0  2236               	addwfc	___flmul@f3_as_product+2,f,c
  5305  002CE2  502E               	movf	??___flmul+9,w,c
  5306  002CE4  2237               	addwfc	___flmul@f3_as_product+3,f,c
  5307  002CE6  5035               	movf	___flmul@f3_as_product+1,w,c
  5308  002CE8  6E34               	movwf	___flmul@f3_as_product,c
  5309  002CEA  5036               	movf	___flmul@f3_as_product+2,w,c
  5310  002CEC  6E35               	movwf	___flmul@f3_as_product+1,c
  5311  002CEE  5037               	movf	___flmul@f3_as_product+3,w,c
  5312  002CF0  6E36               	movwf	___flmul@f3_as_product+2,c
  5313  002CF2  6A37               	clrf	___flmul@f3_as_product+3,c
  5314  002CF4  501D               	movf	___flmul@f1,w,c
  5315  002CF6  0223               	mulwf	___flmul@f2+2,c
  5316  002CF8  CFF3 F025          	movff	prodl,??___flmul
  5317  002CFC  CFF4 F026          	movff	prodh,??___flmul+1
  5318  002D00  6A27               	clrf	(??___flmul+2)& (0+255),c
  5319  002D02  501E               	movf	___flmul@f1+1,w,c
  5320  002D04  0222               	mulwf	___flmul@f2+1,c
  5321  002D06  50F3               	movf	prodl,w,c
  5322  002D08  2425               	addwf	??___flmul,w,c
  5323  002D0A  6E28               	movwf	(??___flmul+3)& (0+255),c
  5324  002D0C  50F4               	movf	prodh,w,c
  5325  002D0E  2026               	addwfc	??___flmul+1,w,c
  5326  002D10  6E29               	movwf	(??___flmul+4)& (0+255),c
  5327  002D12  0E00               	movlw	0
  5328  002D14  2027               	addwfc	??___flmul+2,w,c
  5329  002D16  6E2A               	movwf	(??___flmul+5)& (0+255),c
  5330  002D18  501F               	movf	___flmul@f1+2,w,c
  5331  002D1A  0221               	mulwf	___flmul@f2,c
  5332  002D1C  50F3               	movf	prodl,w,c
  5333  002D1E  2428               	addwf	??___flmul+3,w,c
  5334  002D20  6E2B               	movwf	(??___flmul+6)& (0+255),c
  5335  002D22  50F4               	movf	prodh,w,c
  5336  002D24  2029               	addwfc	??___flmul+4,w,c
  5337  002D26  6E2C               	movwf	(??___flmul+7)& (0+255),c
  5338  002D28  0E00               	movlw	0
  5339  002D2A  202A               	addwfc	??___flmul+5,w,c
  5340  002D2C  6E2D               	movwf	(??___flmul+8)& (0+255),c
  5341  002D2E  502B               	movf	??___flmul+6,w,c
  5342  002D30  6E2E               	movwf	(??___flmul+9)& (0+255),c
  5343  002D32  502C               	movf	??___flmul+7,w,c
  5344  002D34  6E2F               	movwf	(??___flmul+10)& (0+255),c
  5345  002D36  502D               	movf	??___flmul+8,w,c
  5346  002D38  6E30               	movwf	(??___flmul+11)& (0+255),c
  5347  002D3A  6A31               	clrf	(??___flmul+12)& (0+255),c
  5348  002D3C  502E               	movf	??___flmul+9,w,c
  5349  002D3E  2634               	addwf	___flmul@f3_as_product,f,c
  5350  002D40  502F               	movf	??___flmul+10,w,c
  5351  002D42  2235               	addwfc	___flmul@f3_as_product+1,f,c
  5352  002D44  5030               	movf	??___flmul+11,w,c
  5353  002D46  2236               	addwfc	___flmul@f3_as_product+2,f,c
  5354  002D48  5031               	movf	??___flmul+12,w,c
  5355  002D4A  2237               	addwfc	___flmul@f3_as_product+3,f,c
  5356  002D4C  501F               	movf	___flmul@f1+2,w,c
  5357  002D4E  0222               	mulwf	___flmul@f2+1,c
  5358  002D50  CFF3 F025          	movff	prodl,??___flmul
  5359  002D54  CFF4 F026          	movff	prodh,??___flmul+1
  5360  002D58  6A27               	clrf	(??___flmul+2)& (0+255),c
  5361  002D5A  0E34               	movlw	___flmul@f3_as_product& (0+255)
  5362  002D5C  6E28               	movwf	(??___flmul+3)& (0+255),c
  5363  002D5E  6A29               	clrf	(??___flmul+4)& (0+255),c
  5364  002D60  2828               	incf	??___flmul+3,w,c
  5365  002D62  6ED9               	movwf	fsr2l,c
  5366  002D64  0E00               	movlw	0
  5367  002D66  2029               	addwfc	??___flmul+4,w,c
  5368  002D68  6EDA               	movwf	fsr2h,c
  5369  002D6A  5025               	movf	??___flmul,w,c
  5370  002D6C  26DE               	addwf	postinc2,f,c
  5371  002D6E  5026               	movf	??___flmul+1,w,c
  5372  002D70  22DE               	addwfc	postinc2,f,c
  5373  002D72  5027               	movf	??___flmul+2,w,c
  5374  002D74  22DE               	addwfc	postinc2,f,c
  5375  002D76  501E               	movf	___flmul@f1+1,w,c
  5376  002D78  0223               	mulwf	___flmul@f2+2,c
  5377  002D7A  CFF3 F025          	movff	prodl,??___flmul
  5378  002D7E  CFF4 F026          	movff	prodh,??___flmul+1
  5379  002D82  6A27               	clrf	(??___flmul+2)& (0+255),c
  5380  002D84  0E34               	movlw	___flmul@f3_as_product& (0+255)
  5381  002D86  6E28               	movwf	(??___flmul+3)& (0+255),c
  5382  002D88  6A29               	clrf	(??___flmul+4)& (0+255),c
  5383  002D8A  2828               	incf	??___flmul+3,w,c
  5384  002D8C  6ED9               	movwf	fsr2l,c
  5385  002D8E  0E00               	movlw	0
  5386  002D90  2029               	addwfc	??___flmul+4,w,c
  5387  002D92  6EDA               	movwf	fsr2h,c
  5388  002D94  5025               	movf	??___flmul,w,c
  5389  002D96  26DE               	addwf	postinc2,f,c
  5390  002D98  5026               	movf	??___flmul+1,w,c
  5391  002D9A  22DE               	addwfc	postinc2,f,c
  5392  002D9C  5027               	movf	??___flmul+2,w,c
  5393  002D9E  22DE               	addwfc	postinc2,f,c
  5394  002DA0  501F               	movf	___flmul@f1+2,w,c
  5395  002DA2  0223               	mulwf	___flmul@f2+2,c
  5396  002DA4  CFF3 F025          	movff	prodl,??___flmul
  5397  002DA8  CFF4 F026          	movff	prodh,??___flmul+1
  5398  002DAC  6A27               	clrf	(??___flmul+2)& (0+255),c
  5399  002DAE  0E34               	movlw	___flmul@f3_as_product& (0+255)
  5400  002DB0  6E28               	movwf	(??___flmul+3)& (0+255),c
  5401  002DB2  6A29               	clrf	(??___flmul+4)& (0+255),c
  5402  002DB4  0E02               	movlw	2
  5403  002DB6  2428               	addwf	??___flmul+3,w,c
  5404  002DB8  6ED9               	movwf	fsr2l,c
  5405  002DBA  0E00               	movlw	0
  5406  002DBC  2029               	addwfc	??___flmul+4,w,c
  5407  002DBE  6EDA               	movwf	fsr2h,c
  5408  002DC0  5025               	movf	??___flmul,w,c
  5409  002DC2  26DE               	addwf	postinc2,f,c
  5410  002DC4  5026               	movf	??___flmul+1,w,c
  5411  002DC6  22DE               	addwfc	postinc2,f,c
  5412  002DC8  5027               	movf	??___flmul+2,w,c
  5413  002DCA  22DE               	addwfc	postinc2,f,c
  5414  002DCC  AE37               	btfss	___flmul@f3_as_product+3,7,c
  5415  002DCE  D006               	goto	l846
  5416  002DD0  90D8               	bcf	status,0,c
  5417  002DD2  3237               	rrcf	___flmul@f3_as_product+3,f,c
  5418  002DD4  3236               	rrcf	___flmul@f3_as_product+2,f,c
  5419  002DD6  3235               	rrcf	___flmul@f3_as_product+1,f,c
  5420  002DD8  3234               	rrcf	___flmul@f3_as_product,f,c
  5421  002DDA  2A32               	incf	___flmul@exp,f,c
  5422  002DDC                     l846:
  5423  002DDC  90D8               	bcf	status,0,c
  5424  002DDE  3237               	rrcf	___flmul@f3_as_product+3,f,c
  5425  002DE0  3236               	rrcf	___flmul@f3_as_product+2,f,c
  5426  002DE2  3235               	rrcf	___flmul@f3_as_product+1,f,c
  5427  002DE4  3234               	rrcf	___flmul@f3_as_product,f,c
  5428  002DE6  C034  F004         	movff	___flmul@f3_as_product,___flpack@arg
  5429  002DEA  C035  F005         	movff	___flmul@f3_as_product+1,___flpack@arg+1
  5430  002DEE  C036  F006         	movff	___flmul@f3_as_product+2,___flpack@arg+2
  5431  002DF2  C037  F007         	movff	___flmul@f3_as_product+3,___flpack@arg+3
  5432  002DF6  C032  F008         	movff	___flmul@exp,___flpack@exp
  5433  002DFA  C033  F009         	movff	___flmul@sign,___flpack@sign
  5434  002DFE  EC89  F01C         	call	___flpack	;wreg free
  5435  002E02  C004  F01D         	movff	?___flpack,?___flmul
  5436  002E06  C005  F01E         	movff	?___flpack+1,?___flmul+1
  5437  002E0A  C006  F01F         	movff	?___flpack+2,?___flmul+2
  5438  002E0E  C007  F020         	movff	?___flpack+3,?___flmul+3
  5439  002E12                     l844:
  5440  002E12  0012               	return		;funcret
  5441  002E14                     __end_of___flmul:
  5442                           	opt stack 0
  5443                           tblptru	equ	0xFF8
  5444                           tblptrh	equ	0xFF7
  5445                           tblptrl	equ	0xFF6
  5446                           tablat	equ	0xFF5
  5447                           prodh	equ	0xFF4
  5448                           prodl	equ	0xFF3
  5449                           intcon	equ	0xFF2
  5450                           intcon2	equ	0xFF1
  5451                           postinc0	equ	0xFEE
  5452                           wreg	equ	0xFE8
  5453                           postdec1	equ	0xFE5
  5454                           fsr1l	equ	0xFE1
  5455                           postinc2	equ	0xFDE
  5456                           postdec2	equ	0xFDD
  5457                           fsr2h	equ	0xFDA
  5458                           fsr2l	equ	0xFD9
  5459                           status	equ	0xFD8
  5460                           
  5461 ;; *************** function ___fladd *****************
  5462 ;; Defined at:
  5463 ;;		line 88 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fladd.c"
  5464 ;; Parameters:    Size  Location     Type
  5465 ;;  f1              4   55[COMRAM] unsigned char 
  5466 ;;  f2              4   59[COMRAM] unsigned char 
  5467 ;; Auto vars:     Size  Location     Type
  5468 ;;  exp1            1   66[COMRAM] unsigned char 
  5469 ;;  exp2            1   65[COMRAM] unsigned char 
  5470 ;;  sign            1   64[COMRAM] unsigned char 
  5471 ;; Return value:  Size  Location     Type
  5472 ;;                  4   55[COMRAM] unsigned char 
  5473 ;; Registers used:
  5474 ;;		wreg, status,2, status,0, cstack
  5475 ;; Tracked objects:
  5476 ;;		On entry : 0/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5480 ;;      Params:         8       0       0       0       0       0       0       0       0
  5481 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5482 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5483 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5484 ;;Total ram usage:       12 bytes
  5485 ;; Hardware stack levels used:    1
  5486 ;; Hardware stack levels required when called:    2
  5487 ;; This function calls:
  5488 ;;		___flpack
  5489 ;; This function is called by:
  5490 ;;		_floor
  5491 ;;		___flsub
  5492 ;;		_log
  5493 ;;		_eval_poly
  5494 ;; This function uses a non-reentrant model
  5495 ;;
  5496                           
  5497                           	psect	text26
  5498  003124                     __ptext26:
  5499                           	opt stack 0
  5500  003124                     ___fladd:
  5501                           	opt stack 26
  5502                           
  5503                           ;incstack = 0
  5504  003124  343A               	rlcf	___fladd@f1+2,w,c
  5505  003126  343B               	rlcf	___fladd@f1+3,w,c
  5506  003128  6E43               	movwf	___fladd@exp1,c
  5507  00312A  343E               	rlcf	___fladd@f2+2,w,c
  5508  00312C  343F               	rlcf	___fladd@f2+3,w,c
  5509  00312E  6E42               	movwf	___fladd@exp2,c
  5510  003130  5043               	movf	___fladd@exp1,w,c
  5511  003132  E009               	bz	l797
  5512  003134  5042               	movf	___fladd@exp2,w,c
  5513  003136  5C43               	subwf	___fladd@exp1,w,c
  5514  003138  E20F               	bc	l3649
  5515  00313A  5043               	movf	___fladd@exp1,w,c
  5516  00313C  5C42               	subwf	___fladd@exp2,w,c
  5517  00313E  6E40               	movwf	??___fladd& (0+255),c
  5518  003140  0E20               	movlw	32
  5519  003142  6440               	cpfsgt	??___fladd,c
  5520  003144  D009               	goto	l3649
  5521  003146                     l797:
  5522  003146  C03C  F038         	movff	___fladd@f2,?___fladd
  5523  00314A  C03D  F039         	movff	___fladd@f2+1,?___fladd+1
  5524  00314E  C03E  F03A         	movff	___fladd@f2+2,?___fladd+2
  5525  003152  C03F  F03B         	movff	___fladd@f2+3,?___fladd+3
  5526  003156  D099               	goto	l798
  5527  003158                     l3649:
  5528  003158  5042               	movf	___fladd@exp2,w,c
  5529  00315A  E009               	bz	l801
  5530  00315C  5043               	movf	___fladd@exp1,w,c
  5531  00315E  5C42               	subwf	___fladd@exp2,w,c
  5532  003160  E20F               	bc	l3655
  5533  003162  5042               	movf	___fladd@exp2,w,c
  5534  003164  5C43               	subwf	___fladd@exp1,w,c
  5535  003166  6E40               	movwf	??___fladd& (0+255),c
  5536  003168  0E20               	movlw	32
  5537  00316A  6440               	cpfsgt	??___fladd,c
  5538  00316C  D009               	goto	l3655
  5539  00316E                     l801:
  5540  00316E  C038  F038         	movff	___fladd@f1,?___fladd
  5541  003172  C039  F039         	movff	___fladd@f1+1,?___fladd+1
  5542  003176  C03A  F03A         	movff	___fladd@f1+2,?___fladd+2
  5543  00317A  C03B  F03B         	movff	___fladd@f1+3,?___fladd+3
  5544  00317E  D085               	goto	l798
  5545  003180                     l3655:
  5546  003180  0E06               	movlw	6
  5547  003182  6E41               	movwf	___fladd@sign,c
  5548  003184  BE3B               	btfsc	___fladd@f1+3,7,c
  5549  003186  8E41               	bsf	___fladd@sign,7,c
  5550  003188  BE3F               	btfsc	___fladd@f2+3,7,c
  5551  00318A  8C41               	bsf	___fladd@sign,6,c
  5552  00318C  8E3A               	bsf	___fladd@f1+2,7,c
  5553  00318E  6A3B               	clrf	___fladd@f1+3,c
  5554  003190  8E3E               	bsf	___fladd@f2+2,7,c
  5555  003192  6A3F               	clrf	___fladd@f2+3,c
  5556  003194  5042               	movf	___fladd@exp2,w,c
  5557  003196  5C43               	subwf	___fladd@exp1,w,c
  5558  003198  E21A               	bc	l3679
  5559  00319A                     l3669:
  5560  00319A  90D8               	bcf	status,0,c
  5561  00319C  363C               	rlcf	___fladd@f2,f,c
  5562  00319E  363D               	rlcf	___fladd@f2+1,f,c
  5563  0031A0  363E               	rlcf	___fladd@f2+2,f,c
  5564  0031A2  363F               	rlcf	___fladd@f2+3,f,c
  5565  0031A4  0642               	decf	___fladd@exp2,f,c
  5566  0031A6  5043               	movf	___fladd@exp1,w,c
  5567  0031A8  1842               	xorwf	___fladd@exp2,w,c
  5568  0031AA  E00D               	bz	l3677
  5569  0031AC  0641               	decf	___fladd@sign,f,c
  5570  0031AE  C041  F040         	movff	___fladd@sign,??___fladd
  5571  0031B2  0E07               	movlw	7
  5572  0031B4  1640               	andwf	??___fladd,f,c
  5573  0031B6  E007               	bz	l3677
  5574  0031B8  D7F0               	goto	l3669
  5575  0031BA                     l3675:
  5576  0031BA  90D8               	bcf	status,0,c
  5577  0031BC  323B               	rrcf	___fladd@f1+3,f,c
  5578  0031BE  323A               	rrcf	___fladd@f1+2,f,c
  5579  0031C0  3239               	rrcf	___fladd@f1+1,f,c
  5580  0031C2  3238               	rrcf	___fladd@f1,f,c
  5581  0031C4  2A43               	incf	___fladd@exp1,f,c
  5582  0031C6                     l3677:
  5583  0031C6  5042               	movf	___fladd@exp2,w,c
  5584  0031C8  1843               	xorwf	___fladd@exp1,w,c
  5585  0031CA  E01D               	bz	l812
  5586  0031CC  D7F6               	goto	l3675
  5587  0031CE                     l3679:
  5588  0031CE  5043               	movf	___fladd@exp1,w,c
  5589  0031D0  5C42               	subwf	___fladd@exp2,w,c
  5590  0031D2  E219               	bc	l812
  5591  0031D4                     l3681:
  5592  0031D4  90D8               	bcf	status,0,c
  5593  0031D6  3638               	rlcf	___fladd@f1,f,c
  5594  0031D8  3639               	rlcf	___fladd@f1+1,f,c
  5595  0031DA  363A               	rlcf	___fladd@f1+2,f,c
  5596  0031DC  363B               	rlcf	___fladd@f1+3,f,c
  5597  0031DE  0643               	decf	___fladd@exp1,f,c
  5598  0031E0  5043               	movf	___fladd@exp1,w,c
  5599  0031E2  1842               	xorwf	___fladd@exp2,w,c
  5600  0031E4  E00D               	bz	l3689
  5601  0031E6  0641               	decf	___fladd@sign,f,c
  5602  0031E8  C041  F040         	movff	___fladd@sign,??___fladd
  5603  0031EC  0E07               	movlw	7
  5604  0031EE  1640               	andwf	??___fladd,f,c
  5605  0031F0  E007               	bz	l3689
  5606  0031F2  D7F0               	goto	l3681
  5607  0031F4                     l3687:
  5608  0031F4  90D8               	bcf	status,0,c
  5609  0031F6  323F               	rrcf	___fladd@f2+3,f,c
  5610  0031F8  323E               	rrcf	___fladd@f2+2,f,c
  5611  0031FA  323D               	rrcf	___fladd@f2+1,f,c
  5612  0031FC  323C               	rrcf	___fladd@f2,f,c
  5613  0031FE  2A42               	incf	___fladd@exp2,f,c
  5614  003200                     l3689:
  5615  003200  5042               	movf	___fladd@exp2,w,c
  5616  003202  1843               	xorwf	___fladd@exp1,w,c
  5617  003204  E1F7               	bnz	l3687
  5618  003206                     l812:
  5619  003206  AE41               	btfss	___fladd@sign,7,c
  5620  003208  D009               	goto	l3693
  5621  00320A  1E38               	comf	___fladd@f1,f,c
  5622  00320C  1E39               	comf	___fladd@f1+1,f,c
  5623  00320E  1E3A               	comf	___fladd@f1+2,f,c
  5624  003210  1E3B               	comf	___fladd@f1+3,f,c
  5625  003212  2A38               	incf	___fladd@f1,f,c
  5626  003214  0E00               	movlw	0
  5627  003216  2239               	addwfc	___fladd@f1+1,f,c
  5628  003218  223A               	addwfc	___fladd@f1+2,f,c
  5629  00321A  223B               	addwfc	___fladd@f1+3,f,c
  5630  00321C                     l3693:
  5631  00321C  AC41               	btfss	___fladd@sign,6,c
  5632  00321E  D009               	goto	l3697
  5633  003220  1E3C               	comf	___fladd@f2,f,c
  5634  003222  1E3D               	comf	___fladd@f2+1,f,c
  5635  003224  1E3E               	comf	___fladd@f2+2,f,c
  5636  003226  1E3F               	comf	___fladd@f2+3,f,c
  5637  003228  2A3C               	incf	___fladd@f2,f,c
  5638  00322A  0E00               	movlw	0
  5639  00322C  223D               	addwfc	___fladd@f2+1,f,c
  5640  00322E  223E               	addwfc	___fladd@f2+2,f,c
  5641  003230  223F               	addwfc	___fladd@f2+3,f,c
  5642  003232                     l3697:
  5643  003232  6A41               	clrf	___fladd@sign,c
  5644  003234  5038               	movf	___fladd@f1,w,c
  5645  003236  263C               	addwf	___fladd@f2,f,c
  5646  003238  5039               	movf	___fladd@f1+1,w,c
  5647  00323A  223D               	addwfc	___fladd@f2+1,f,c
  5648  00323C  503A               	movf	___fladd@f1+2,w,c
  5649  00323E  223E               	addwfc	___fladd@f2+2,f,c
  5650  003240  503B               	movf	___fladd@f1+3,w,c
  5651  003242  223F               	addwfc	___fladd@f2+3,f,c
  5652  003244  AE3F               	btfss	___fladd@f2+3,7,c
  5653  003246  D00B               	goto	l3705
  5654  003248  1E3C               	comf	___fladd@f2,f,c
  5655  00324A  1E3D               	comf	___fladd@f2+1,f,c
  5656  00324C  1E3E               	comf	___fladd@f2+2,f,c
  5657  00324E  1E3F               	comf	___fladd@f2+3,f,c
  5658  003250  2A3C               	incf	___fladd@f2,f,c
  5659  003252  0E00               	movlw	0
  5660  003254  223D               	addwfc	___fladd@f2+1,f,c
  5661  003256  223E               	addwfc	___fladd@f2+2,f,c
  5662  003258  223F               	addwfc	___fladd@f2+3,f,c
  5663  00325A  0E01               	movlw	1
  5664  00325C  6E41               	movwf	___fladd@sign,c
  5665  00325E                     l3705:
  5666  00325E  C03C  F004         	movff	___fladd@f2,___flpack@arg
  5667  003262  C03D  F005         	movff	___fladd@f2+1,___flpack@arg+1
  5668  003266  C03E  F006         	movff	___fladd@f2+2,___flpack@arg+2
  5669  00326A  C03F  F007         	movff	___fladd@f2+3,___flpack@arg+3
  5670  00326E  C043  F008         	movff	___fladd@exp1,___flpack@exp
  5671  003272  C041  F009         	movff	___fladd@sign,___flpack@sign
  5672  003276  EC89  F01C         	call	___flpack	;wreg free
  5673  00327A  C004  F038         	movff	?___flpack,?___fladd
  5674  00327E  C005  F039         	movff	?___flpack+1,?___fladd+1
  5675  003282  C006  F03A         	movff	?___flpack+2,?___fladd+2
  5676  003286  C007  F03B         	movff	?___flpack+3,?___fladd+3
  5677  00328A                     l798:
  5678  00328A  0012               	return		;funcret
  5679  00328C                     __end_of___fladd:
  5680                           	opt stack 0
  5681                           tblptru	equ	0xFF8
  5682                           tblptrh	equ	0xFF7
  5683                           tblptrl	equ	0xFF6
  5684                           tablat	equ	0xFF5
  5685                           prodh	equ	0xFF4
  5686                           prodl	equ	0xFF3
  5687                           intcon	equ	0xFF2
  5688                           intcon2	equ	0xFF1
  5689                           postinc0	equ	0xFEE
  5690                           wreg	equ	0xFE8
  5691                           postdec1	equ	0xFE5
  5692                           fsr1l	equ	0xFE1
  5693                           postinc2	equ	0xFDE
  5694                           postdec2	equ	0xFDD
  5695                           fsr2h	equ	0xFDA
  5696                           fsr2l	equ	0xFD9
  5697                           status	equ	0xFD8
  5698                           
  5699 ;; *************** function ___awtofl *****************
  5700 ;; Defined at:
  5701 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtofl.c"
  5702 ;; Parameters:    Size  Location     Type
  5703 ;;  c               2   13[COMRAM] int 
  5704 ;; Auto vars:     Size  Location     Type
  5705 ;;  f1              4    0        int 
  5706 ;;  sign            1   17[COMRAM] unsigned char 
  5707 ;; Return value:  Size  Location     Type
  5708 ;;                  4   13[COMRAM] unsigned char 
  5709 ;; Registers used:
  5710 ;;		wreg, status,2, status,0, cstack
  5711 ;; Tracked objects:
  5712 ;;		On entry : 0/0
  5713 ;;		On exit  : 0/0
  5714 ;;		Unchanged: 0/0
  5715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5716 ;;      Params:         4       0       0       0       0       0       0       0       0
  5717 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5718 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5719 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5720 ;;Total ram usage:        5 bytes
  5721 ;; Hardware stack levels used:    1
  5722 ;; Hardware stack levels required when called:    2
  5723 ;; This function calls:
  5724 ;;		___flpack
  5725 ;; This function is called by:
  5726 ;;		_format_double
  5727 ;;		_log
  5728 ;;		_exp
  5729 ;; This function uses a non-reentrant model
  5730 ;;
  5731                           
  5732                           	psect	text27
  5733  0040FE                     __ptext27:
  5734                           	opt stack 0
  5735  0040FE                     ___awtofl:
  5736                           	opt stack 24
  5737                           
  5738                           ;incstack = 0
  5739  0040FE  6A12               	clrf	___awtofl@sign,c
  5740  004100  AE0F               	btfss	___awtofl@c+1,7,c
  5741  004102  D005               	goto	l3913
  5742  004104  6C0E               	negf	___awtofl@c,c
  5743  004106  1E0F               	comf	___awtofl@c+1,f,c
  5744  004108  B0D8               	btfsc	status,0,c
  5745  00410A  2A0F               	incf	___awtofl@c+1,f,c
  5746  00410C  2A12               	incf	___awtofl@sign,f,c
  5747  00410E                     l3913:
  5748  00410E  C00E  F004         	movff	___awtofl@c,___flpack@arg
  5749  004112  C00F  F005         	movff	___awtofl@c+1,___flpack@arg+1
  5750  004116  6A06               	clrf	___flpack@arg+2,c
  5751  004118  6A07               	clrf	___flpack@arg+3,c
  5752  00411A  0E96               	movlw	150
  5753  00411C  6E08               	movwf	___flpack@exp,c
  5754  00411E  C012  F009         	movff	___awtofl@sign,___flpack@sign
  5755  004122  EC89  F01C         	call	___flpack	;wreg free
  5756  004126  C004  F00E         	movff	?___flpack,?___awtofl
  5757  00412A  C005  F00F         	movff	?___flpack+1,?___awtofl+1
  5758  00412E  C006  F010         	movff	?___flpack+2,?___awtofl+2
  5759  004132  C007  F011         	movff	?___flpack+3,?___awtofl+3
  5760  004136  0012               	return		;funcret
  5761  004138                     __end_of___awtofl:
  5762                           	opt stack 0
  5763                           tblptru	equ	0xFF8
  5764                           tblptrh	equ	0xFF7
  5765                           tblptrl	equ	0xFF6
  5766                           tablat	equ	0xFF5
  5767                           prodh	equ	0xFF4
  5768                           prodl	equ	0xFF3
  5769                           intcon	equ	0xFF2
  5770                           intcon2	equ	0xFF1
  5771                           postinc0	equ	0xFEE
  5772                           wreg	equ	0xFE8
  5773                           postdec1	equ	0xFE5
  5774                           fsr1l	equ	0xFE1
  5775                           postinc2	equ	0xFDE
  5776                           postdec2	equ	0xFDD
  5777                           fsr2h	equ	0xFDA
  5778                           fsr2l	equ	0xFD9
  5779                           status	equ	0xFD8
  5780                           
  5781 ;; *************** function _lcd_init *****************
  5782 ;; Defined at:
  5783 ;;		line 506 in file "../../../lib/lcd44780.c"
  5784 ;; Parameters:    Size  Location     Type
  5785 ;;  fourbitmode     1    wreg     unsigned char 
  5786 ;; Auto vars:     Size  Location     Type
  5787 ;;  fourbitmode     1    3[COMRAM] unsigned char 
  5788 ;; Return value:  Size  Location     Type
  5789 ;;		None               void
  5790 ;; Registers used:
  5791 ;;		wreg, status,2, status,0
  5792 ;; Tracked objects:
  5793 ;;		On entry : 0/0
  5794 ;;		On exit  : F/0
  5795 ;;		Unchanged: 0/0
  5796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5797 ;;      Params:         0       0       0       0       0       0       0       0       0
  5798 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5799 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5800 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5801 ;;Total ram usage:        3 bytes
  5802 ;; Hardware stack levels used:    1
  5803 ;; Hardware stack levels required when called:    1
  5804 ;; This function calls:
  5805 ;;		Nothing
  5806 ;; This function is called by:
  5807 ;;		_main
  5808 ;; This function uses a non-reentrant model
  5809 ;;
  5810                           
  5811                           	psect	text28
  5812  004266                     __ptext28:
  5813                           	opt stack 0
  5814  004266                     _lcd_init:
  5815                           	opt stack 29
  5816                           
  5817                           ;incstack = 0
  5818                           ;lcd_init@fourbitmode stored from wreg
  5819  004266  6E04               	movwf	lcd_init@fourbitmode,c
  5820                           
  5821                           ;lcd44780.c: 508: LCD_ctrl = 0;
  5822  004268  0100               	movlb	0	; () banked
  5823  00426A  6BC7               	clrf	_LCD_ctrl& (0+255),b
  5824                           
  5825                           ; BSR set to: 0
  5826                           ;lcd44780.c: 509: LCD_function = (fourbitmode ? 0x00 : 0x10);
  5827  00426C  5004               	movf	lcd_init@fourbitmode,w,c
  5828  00426E  E104               	bnz	l389
  5829                           
  5830                           ; BSR set to: 0
  5831  004270  6A06               	clrf	_lcd_init$342+1,c
  5832  004272  0E10               	movlw	16
  5833  004274  6E05               	movwf	_lcd_init$342,c
  5834  004276  D002               	goto	l391
  5835  004278                     l389:
  5836                           
  5837                           ; BSR set to: 0
  5838  004278  6A05               	clrf	_lcd_init$342,c
  5839  00427A  6A06               	clrf	_lcd_init$342+1,c
  5840  00427C                     l391:
  5841                           
  5842                           ; BSR set to: 0
  5843  00427C  C005  F05A         	movff	_lcd_init$342,_LCD_function
  5844                           
  5845                           ;lcd44780.c: 511: LCD_lines = 0;
  5846  004280  6BC8               	clrf	_LCD_lines& (0+255),b
  5847                           
  5848                           ;lcd44780.c: 513: LCD_mode = 0;
  5849  004282  6BC9               	clrf	_LCD_mode& (0+255),b
  5850                           
  5851                           ; BSR set to: 0
  5852                           ;lcd44780.c: 515: TRISB &= ~0b0100;
  5853  004284  9493               	bcf	3987,2,c	;volatile
  5854                           
  5855                           ;lcd44780.c: 516: LATB &= ~0b0100;
  5856  004286  948A               	bcf	3978,2,c	;volatile
  5857                           
  5858                           ;lcd44780.c: 521: TRISB &= ~0b1000;
  5859  004288  9693               	bcf	3987,3,c	;volatile
  5860                           
  5861                           ;lcd44780.c: 522: LATB &= ~0b1000;
  5862  00428A  968A               	bcf	3978,3,c	;volatile
  5863                           
  5864                           ; BSR set to: 0
  5865                           ;lcd44780.c: 524: LATB &= ~0b11110000;
  5866  00428C  0E0F               	movlw	15
  5867  00428E  168A               	andwf	3978,f,c	;volatile
  5868                           
  5869                           ; BSR set to: 0
  5870  004290  0012               	return		;funcret
  5871  004292                     __end_of_lcd_init:
  5872                           	opt stack 0
  5873                           tblptru	equ	0xFF8
  5874                           tblptrh	equ	0xFF7
  5875                           tblptrl	equ	0xFF6
  5876                           tablat	equ	0xFF5
  5877                           prodh	equ	0xFF4
  5878                           prodl	equ	0xFF3
  5879                           intcon	equ	0xFF2
  5880                           intcon2	equ	0xFF1
  5881                           postinc0	equ	0xFEE
  5882                           wreg	equ	0xFE8
  5883                           postdec1	equ	0xFE5
  5884                           fsr1l	equ	0xFE1
  5885                           postinc2	equ	0xFDE
  5886                           postdec2	equ	0xFDD
  5887                           fsr2h	equ	0xFDA
  5888                           fsr2l	equ	0xFD9
  5889                           status	equ	0xFD8
  5890                           
  5891 ;; *************** function _lcd_begin *****************
  5892 ;; Defined at:
  5893 ;;		line 433 in file "../../../lib/lcd44780.c"
  5894 ;; Parameters:    Size  Location     Type
  5895 ;;  lines           1    wreg     unsigned char 
  5896 ;;  dotsize         1    7[COMRAM] unsigned char 
  5897 ;; Auto vars:     Size  Location     Type
  5898 ;;  lines           1    9[COMRAM] unsigned char 
  5899 ;; Return value:  Size  Location     Type
  5900 ;;		None               void
  5901 ;; Registers used:
  5902 ;;		wreg, status,2, status,0, cstack
  5903 ;; Tracked objects:
  5904 ;;		On entry : F/0
  5905 ;;		On exit  : 0/0
  5906 ;;		Unchanged: 0/0
  5907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5908 ;;      Params:         1       0       0       0       0       0       0       0       0
  5909 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5910 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5911 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5912 ;;Total ram usage:        3 bytes
  5913 ;; Hardware stack levels used:    1
  5914 ;; Hardware stack levels required when called:    4
  5915 ;; This function calls:
  5916 ;;		_lcd_command
  5917 ;;		_lcd_write4bits
  5918 ;; This function is called by:
  5919 ;;		_main
  5920 ;; This function uses a non-reentrant model
  5921 ;;
  5922                           
  5923                           	psect	text29
  5924  00376C                     __ptext29:
  5925                           	opt stack 0
  5926  00376C                     _lcd_begin:
  5927                           	opt stack 26
  5928                           
  5929                           ; BSR set to: 0
  5930                           ;incstack = 0
  5931                           ;lcd_begin@lines stored from wreg
  5932  00376C  6E0A               	movwf	lcd_begin@lines,c
  5933                           
  5934                           ; BSR set to: 0
  5935                           ;lcd44780.c: 434: if(lines > 1)
  5936  00376E  0E01               	movlw	1
  5937  003770  640A               	cpfsgt	lcd_begin@lines,c
  5938  003772  D001               	goto	l4513
  5939                           
  5940                           ; BSR set to: 0
  5941                           ;lcd44780.c: 435: LCD_function |= 0x08;
  5942  003774  865A               	bsf	_LCD_function,3,c
  5943  003776                     l4513:
  5944                           
  5945                           ; BSR set to: 0
  5946                           ;lcd44780.c: 438: LCD_lines = lines;
  5947  003776  C00A  F0C8         	movff	lcd_begin@lines,_LCD_lines
  5948                           
  5949                           ; BSR set to: 0
  5950                           ;lcd44780.c: 442: if((dotsize != 0) && (lines == 1))
  5951  00377A  5008               	movf	lcd_begin@dotsize,w,c
  5952  00377C  E003               	bz	l4521
  5953                           
  5954                           ; BSR set to: 0
  5955  00377E  040A               	decf	lcd_begin@lines,w,c
  5956  003780  B4D8               	btfsc	status,2,c
  5957                           
  5958                           ; BSR set to: 0
  5959                           ;lcd44780.c: 443: LCD_function |= 0x04;
  5960  003782  845A               	bsf	_LCD_function,2,c
  5961  003784                     l4521:
  5962                           
  5963                           ; BSR set to: 0
  5964                           ;lcd44780.c: 445: _delay((unsigned long)((15)*(20000000/4000.0)));
  5965  003784  0E62               	movlw	98
  5966  003786  6E09               	movwf	??_lcd_begin& (0+255),c
  5967  003788  0E66               	movlw	102
  5968  00378A                     u3727:
  5969  00378A  2EE8               	decfsz	wreg,f,c
  5970  00378C  D7FE               	goto	u3727
  5971  00378E  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  5972  003790  D7FC               	goto	u3727
  5973                           
  5974                           ;lcd44780.c: 448: LATB &= ~0b0100;
  5975  003792  948A               	bcf	3978,2,c	;volatile
  5976                           
  5977                           ;lcd44780.c: 449: LATB &= ~0b1000;
  5978  003794  968A               	bcf	3978,3,c	;volatile
  5979                           
  5980                           ;lcd44780.c: 452: if(!(LCD_function & 0x10)) {
  5981  003796  B85A               	btfsc	_LCD_function,4,c
  5982  003798  D01B               	goto	l4539
  5983                           
  5984                           ;lcd44780.c: 456: lcd_write4bits(0x03);
  5985  00379A  0E03               	movlw	3
  5986  00379C  EC9A  F021         	call	_lcd_write4bits
  5987                           
  5988                           ;lcd44780.c: 457: _delay((unsigned long)((5)*(20000000/4000.0)));
  5989  0037A0  0E21               	movlw	33
  5990  0037A2  6E09               	movwf	??_lcd_begin& (0+255),c
  5991  0037A4  0E76               	movlw	118
  5992  0037A6                     u3737:
  5993  0037A6  2EE8               	decfsz	wreg,f,c
  5994  0037A8  D7FE               	goto	u3737
  5995  0037AA  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  5996  0037AC  D7FC               	goto	u3737
  5997  0037AE  D000               	nop2	
  5998                           
  5999                           ;lcd44780.c: 459: lcd_write4bits(0x03);
  6000  0037B0  0E03               	movlw	3
  6001  0037B2  EC9A  F021         	call	_lcd_write4bits
  6002                           
  6003                           ;lcd44780.c: 460: _delay((unsigned long)((150)*(20000000/4000000.0)));
  6004  0037B6  0EFA               	movlw	250
  6005  0037B8                     u3747:
  6006  0037B8  2EE8               	decfsz	wreg,f,c
  6007  0037BA  D7FE               	goto	u3747
  6008                           
  6009                           ;lcd44780.c: 462: lcd_write4bits(0x03);
  6010  0037BC  0E03               	movlw	3
  6011  0037BE  EC9A  F021         	call	_lcd_write4bits
  6012                           
  6013                           ;lcd44780.c: 463: _delay((unsigned long)((150)*(20000000/4000000.0)));
  6014  0037C2  0EFA               	movlw	250
  6015  0037C4                     u3757:
  6016  0037C4  2EE8               	decfsz	wreg,f,c
  6017  0037C6  D7FE               	goto	u3757
  6018                           
  6019                           ;lcd44780.c: 465: lcd_write4bits(0x02);
  6020  0037C8  0E02               	movlw	2
  6021  0037CA  EC9A  F021         	call	_lcd_write4bits
  6022                           
  6023                           ;lcd44780.c: 466: }
  6024  0037CE  D01C               	goto	l4547
  6025  0037D0                     l4539:
  6026                           
  6027                           ;lcd44780.c: 468: else {
  6028                           ;lcd44780.c: 472: lcd_command(0x20 | LCD_function);
  6029  0037D0  505A               	movf	_LCD_function,w,c
  6030  0037D2  0920               	iorlw	32
  6031  0037D4  ECFE  F021         	call	_lcd_command
  6032                           
  6033                           ;lcd44780.c: 473: _delay((unsigned long)((5)*(20000000/4000.0)));
  6034  0037D8  0E21               	movlw	33
  6035  0037DA  6E09               	movwf	??_lcd_begin& (0+255),c
  6036  0037DC  0E76               	movlw	118
  6037  0037DE                     u3767:
  6038  0037DE  2EE8               	decfsz	wreg,f,c
  6039  0037E0  D7FE               	goto	u3767
  6040  0037E2  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6041  0037E4  D7FC               	goto	u3767
  6042  0037E6  D000               	nop2	
  6043                           
  6044                           ;lcd44780.c: 476: lcd_command(0x20 | LCD_function);
  6045  0037E8  505A               	movf	_LCD_function,w,c
  6046  0037EA  0920               	iorlw	32
  6047  0037EC  ECFE  F021         	call	_lcd_command
  6048                           
  6049                           ;lcd44780.c: 477: _delay((unsigned long)((5)*(20000000/4000.0)));
  6050  0037F0  0E21               	movlw	33
  6051  0037F2  6E09               	movwf	??_lcd_begin& (0+255),c
  6052  0037F4  0E76               	movlw	118
  6053  0037F6                     u3777:
  6054  0037F6  2EE8               	decfsz	wreg,f,c
  6055  0037F8  D7FE               	goto	u3777
  6056  0037FA  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6057  0037FC  D7FC               	goto	u3777
  6058  0037FE  D000               	nop2	
  6059                           
  6060                           ;lcd44780.c: 481: lcd_command(0x20 | LCD_function);
  6061  003800  505A               	movf	_LCD_function,w,c
  6062  003802  0920               	iorlw	32
  6063  003804  ECFE  F021         	call	_lcd_command
  6064  003808                     l4547:
  6065                           
  6066                           ;lcd44780.c: 482: }
  6067                           ;lcd44780.c: 485: lcd_command(0x20 | LCD_function);
  6068  003808  505A               	movf	_LCD_function,w,c
  6069  00380A  0920               	iorlw	32
  6070  00380C  ECFE  F021         	call	_lcd_command
  6071                           
  6072                           ;lcd44780.c: 488: LCD_ctrl = 0x04 | 0x00 | 0x00;
  6073  003810  0E04               	movlw	4
  6074  003812  0100               	movlb	0	; () banked
  6075  003814  6FC7               	movwf	_LCD_ctrl& (0+255),b
  6076                           
  6077                           ; BSR set to: 0
  6078                           ;lcd44780.c: 489: lcd_command(0x08 | LCD_ctrl);
  6079  003816  51C7               	movf	_LCD_ctrl& (0+255),w,b
  6080  003818  0908               	iorlw	8
  6081  00381A  ECFE  F021         	call	_lcd_command
  6082                           
  6083                           ;lcd44780.c: 492: lcd_command(0x01);
  6084  00381E  0E01               	movlw	1
  6085  003820  ECFE  F021         	call	_lcd_command
  6086                           
  6087                           ;lcd44780.c: 493: _delay((unsigned long)((2)*(20000000/4000.0)));
  6088  003824  0E0D               	movlw	13
  6089  003826  6E09               	movwf	??_lcd_begin& (0+255),c
  6090  003828  0EFC               	movlw	252
  6091  00382A                     u3787:
  6092  00382A  2EE8               	decfsz	wreg,f,c
  6093  00382C  D7FE               	goto	u3787
  6094  00382E  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6095  003830  D7FC               	goto	u3787
  6096                           
  6097                           ;lcd44780.c: 496: LCD_mode = 0x02 | 0x00;
  6098  003832  0E02               	movlw	2
  6099  003834  0100               	movlb	0	; () banked
  6100  003836  6FC9               	movwf	_LCD_mode& (0+255),b
  6101                           
  6102                           ; BSR set to: 0
  6103                           ;lcd44780.c: 498: lcd_command(0x04 | LCD_mode);
  6104  003838  51C9               	movf	_LCD_mode& (0+255),w,b
  6105  00383A  0904               	iorlw	4
  6106  00383C  ECFE  F021         	call	_lcd_command
  6107  003840  0012               	return		;funcret
  6108  003842                     __end_of_lcd_begin:
  6109                           	opt stack 0
  6110                           tblptru	equ	0xFF8
  6111                           tblptrh	equ	0xFF7
  6112                           tblptrl	equ	0xFF6
  6113                           tablat	equ	0xFF5
  6114                           prodh	equ	0xFF4
  6115                           prodl	equ	0xFF3
  6116                           intcon	equ	0xFF2
  6117                           intcon2	equ	0xFF1
  6118                           postinc0	equ	0xFEE
  6119                           wreg	equ	0xFE8
  6120                           postdec1	equ	0xFE5
  6121                           fsr1l	equ	0xFE1
  6122                           postinc2	equ	0xFDE
  6123                           postdec2	equ	0xFDD
  6124                           fsr2h	equ	0xFDA
  6125                           fsr2l	equ	0xFD9
  6126                           status	equ	0xFD8
  6127                           
  6128 ;; *************** function _indicator *****************
  6129 ;; Defined at:
  6130 ;;		line 473 in file "../../../src/print.c"
  6131 ;; Parameters:    Size  Location     Type
  6132 ;;  indicate        1    wreg     unsigned char 
  6133 ;; Auto vars:     Size  Location     Type
  6134 ;;  indicate        1   13[COMRAM] unsigned char 
  6135 ;; Return value:  Size  Location     Type
  6136 ;;		None               void
  6137 ;; Registers used:
  6138 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6139 ;; Tracked objects:
  6140 ;;		On entry : 0/0
  6141 ;;		On exit  : 0/0
  6142 ;;		Unchanged: 0/0
  6143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6144 ;;      Params:         0       0       0       0       0       0       0       0       0
  6145 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6146 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6147 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6148 ;;Total ram usage:        1 bytes
  6149 ;; Hardware stack levels used:    1
  6150 ;; Hardware stack levels required when called:    5
  6151 ;; This function calls:
  6152 ;;		_lcd_gotoxy
  6153 ;;		_lcd_puts
  6154 ;; This function is called by:
  6155 ;;		_main
  6156 ;; This function uses a non-reentrant model
  6157 ;;
  6158                           
  6159                           	psect	text30
  6160  004376                     __ptext30:
  6161                           	opt stack 0
  6162  004376                     _indicator:
  6163                           	opt stack 25
  6164                           
  6165                           ;incstack = 0
  6166                           ;indicator@indicate stored from wreg
  6167  004376  6E0E               	movwf	indicator@indicate,c
  6168                           
  6169                           ;print.c: 487: lcd_gotoxy(0, 1);
  6170  004378  0E01               	movlw	1
  6171  00437A  6E08               	movwf	lcd_gotoxy@row,c
  6172  00437C  0E00               	movlw	0
  6173  00437E  EC9C  F020         	call	_lcd_gotoxy
  6174                           
  6175                           ;print.c: 488: if(indicate) {
  6176  004382  500E               	movf	indicator@indicate,w,c
  6177  004384  E004               	bz	l4315
  6178                           
  6179                           ;print.c: 489: lcd_puts("-*-");
  6180  004386  0EDD               	movlw	STR_11& (0+255)
  6181  004388  ECD3  F020         	call	_lcd_puts
  6182                           
  6183                           ;print.c: 490: } else {
  6184  00438C  D003               	goto	l36
  6185  00438E                     l4315:
  6186                           
  6187                           ;print.c: 491: lcd_puts("   ");
  6188  00438E  0EAC               	movlw	(STR_30+3)& (0+255)
  6189  004390  ECD3  F020         	call	_lcd_puts
  6190  004394                     l36:
  6191  004394  0012               	return		;funcret
  6192  004396                     __end_of_indicator:
  6193                           	opt stack 0
  6194                           tblptru	equ	0xFF8
  6195                           tblptrh	equ	0xFF7
  6196                           tblptrl	equ	0xFF6
  6197                           tablat	equ	0xFF5
  6198                           prodh	equ	0xFF4
  6199                           prodl	equ	0xFF3
  6200                           intcon	equ	0xFF2
  6201                           intcon2	equ	0xFF1
  6202                           postinc0	equ	0xFEE
  6203                           wreg	equ	0xFE8
  6204                           postdec1	equ	0xFE5
  6205                           fsr1l	equ	0xFE1
  6206                           postinc2	equ	0xFDE
  6207                           postdec2	equ	0xFDD
  6208                           fsr2h	equ	0xFDA
  6209                           fsr2l	equ	0xFD9
  6210                           status	equ	0xFD8
  6211                           
  6212 ;; *************** function _lcd_puts *****************
  6213 ;; Defined at:
  6214 ;;		line 185 in file "../../../lib/lcd44780.c"
  6215 ;; Parameters:    Size  Location     Type
  6216 ;;  string          1    wreg     PTR const unsigned char 
  6217 ;;		 -> STR_33(5), STR_32(6), STR_31(7), STR_30(7), 
  6218 ;;		 -> STR_28(10), STR_12(4), STR_11(4), STR_10(6), 
  6219 ;; Auto vars:     Size  Location     Type
  6220 ;;  string          1    8[COMRAM] PTR const unsigned char 
  6221 ;;		 -> STR_33(5), STR_32(6), STR_31(7), STR_30(7), 
  6222 ;;		 -> STR_28(10), STR_12(4), STR_11(4), STR_10(6), 
  6223 ;;  i               1    7[COMRAM] unsigned char 
  6224 ;; Return value:  Size  Location     Type
  6225 ;;		None               void
  6226 ;; Registers used:
  6227 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6228 ;; Tracked objects:
  6229 ;;		On entry : 0/0
  6230 ;;		On exit  : 0/0
  6231 ;;		Unchanged: 0/0
  6232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6233 ;;      Params:         0       0       0       0       0       0       0       0       0
  6234 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6235 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6236 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6237 ;;Total ram usage:        3 bytes
  6238 ;; Hardware stack levels used:    1
  6239 ;; Hardware stack levels required when called:    3
  6240 ;; This function calls:
  6241 ;;		_lcd_send
  6242 ;; This function is called by:
  6243 ;;		_print_reading
  6244 ;;		_indicator
  6245 ;;		_main
  6246 ;; This function uses a non-reentrant model
  6247 ;;
  6248                           
  6249                           	psect	text31
  6250  0041A6                     __ptext31:
  6251                           	opt stack 0
  6252  0041A6                     _lcd_puts:
  6253                           	opt stack 25
  6254                           
  6255                           ;incstack = 0
  6256                           ;lcd_puts@string stored from wreg
  6257  0041A6  6E09               	movwf	lcd_puts@string,c
  6258                           
  6259                           ;lcd44780.c: 186: uint8_t i;
  6260                           ;lcd44780.c: 187: for(i = 0; string[i]; i++) lcd_send((string[i]), 1);
  6261  0041A8  6A08               	clrf	lcd_puts@i,c
  6262  0041AA  D00C               	goto	l4101
  6263  0041AC                     l4097:
  6264  0041AC  0E01               	movlw	1
  6265  0041AE  6E05               	movwf	lcd_send@mode,c
  6266  0041B0  5009               	movf	lcd_puts@string,w,c
  6267  0041B2  2408               	addwf	lcd_puts@i,w,c
  6268  0041B4  6E07               	movwf	??_lcd_puts& (0+255),c
  6269  0041B6  C007  FFF6         	movff	??_lcd_puts,tblptrl
  6270  0041BA                     	if	0	;There is only one active tblptr byte
  6271  0041BA                     	endif
  6272  0041BA                     	if	0	;tblptru may be non-zero
  6273  0041BA                     	endif
  6274  0041BA                     	if	0	;tblptru may be non-zero
  6275  0041BA                     	endif
  6276  0041BA  0008               	tblrd		*
  6277  0041BC  50F5               	movf	tablat,w,c
  6278  0041BE  ECDB  F021         	call	_lcd_send
  6279  0041C2  2A08               	incf	lcd_puts@i,f,c
  6280  0041C4                     l4101:
  6281  0041C4  5009               	movf	lcd_puts@string,w,c
  6282  0041C6  2408               	addwf	lcd_puts@i,w,c
  6283  0041C8  6E07               	movwf	??_lcd_puts& (0+255),c
  6284  0041CA  C007  FFF6         	movff	??_lcd_puts,tblptrl
  6285  0041CE                     	if	0	;There is only one active tblptr byte
  6286  0041CE                     	endif
  6287  0041CE                     	if	0	;tblptru may be non-zero
  6288  0041CE                     	endif
  6289  0041CE                     	if	0	;tblptru may be non-zero
  6290  0041CE                     	endif
  6291  0041CE  0008               	tblrd		*
  6292  0041D0  50F5               	movf	tablat,w,c
  6293  0041D2  B4D8               	btfsc	status,2,c
  6294  0041D4  0012               	return		;funcret
  6295  0041D6  D7EA               	goto	l4097
  6296  0041D8                     __end_of_lcd_puts:
  6297                           	opt stack 0
  6298                           tblptru	equ	0xFF8
  6299                           tblptrh	equ	0xFF7
  6300                           tblptrl	equ	0xFF6
  6301                           tablat	equ	0xFF5
  6302                           prodh	equ	0xFF4
  6303                           prodl	equ	0xFF3
  6304                           intcon	equ	0xFF2
  6305                           intcon2	equ	0xFF1
  6306                           postinc0	equ	0xFEE
  6307                           wreg	equ	0xFE8
  6308                           postdec1	equ	0xFE5
  6309                           fsr1l	equ	0xFE1
  6310                           postinc2	equ	0xFDE
  6311                           postdec2	equ	0xFDD
  6312                           fsr2h	equ	0xFDA
  6313                           fsr2l	equ	0xFD9
  6314                           status	equ	0xFD8
  6315                           
  6316 ;; *************** function _calibrate *****************
  6317 ;; Defined at:
  6318 ;;		line 24 in file "../../../src/measure.c"
  6319 ;; Parameters:    Size  Location     Type
  6320 ;;		None
  6321 ;; Auto vars:     Size  Location     Type
  6322 ;;  i               1   62[COMRAM] unsigned char 
  6323 ;; Return value:  Size  Location     Type
  6324 ;;		None               void
  6325 ;; Registers used:
  6326 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6327 ;; Tracked objects:
  6328 ;;		On entry : 0/0
  6329 ;;		On exit  : 0/0
  6330 ;;		Unchanged: 0/0
  6331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6332 ;;      Params:         0       0       0       0       0       0       0       0       0
  6333 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6334 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6335 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6336 ;;Total ram usage:        1 bytes
  6337 ;; Hardware stack levels used:    1
  6338 ;; Hardware stack levels required when called:    6
  6339 ;; This function calls:
  6340 ;;		___lwtofl
  6341 ;;		_delay10ms
  6342 ;;		_lcd_clear
  6343 ;;		_lcd_gotoxy
  6344 ;;		_lcd_send
  6345 ;;		_measure_freq
  6346 ;;		_put_str
  6347 ;;		_ser_puts
  6348 ;; This function is called by:
  6349 ;;		_main
  6350 ;; This function uses a non-reentrant model
  6351 ;;
  6352                           
  6353                           	psect	text32
  6354  003688                     __ptext32:
  6355                           	opt stack 0
  6356  003688                     _calibrate:
  6357                           	opt stack 24
  6358                           
  6359                           ;measure.c: 25: uint8_t i;
  6360                           ;measure.c: 28: lcd_clear();
  6361                           
  6362                           ;incstack = 0
  6363  003688  ECE9  F021         	call	_lcd_clear	;wreg free
  6364                           
  6365                           ;measure.c: 30: lcd_gotoxy(0, 0);
  6366  00368C  0E00               	movlw	0
  6367  00368E  6A08               	clrf	lcd_gotoxy@row,c
  6368  003690  EC9C  F020         	call	_lcd_gotoxy
  6369                           
  6370                           ;measure.c: 31: put_str("Calibrating");
  6371  003694  0E81               	movlw	STR_13& (0+255)
  6372  003696  ECEC  F020         	call	_put_str
  6373                           
  6374                           ;measure.c: 33: lcd_gotoxy(0, 1);
  6375  00369A  0E01               	movlw	1
  6376  00369C  6E08               	movwf	lcd_gotoxy@row,c
  6377  00369E  0E00               	movlw	0
  6378  0036A0  EC9C  F020         	call	_lcd_gotoxy
  6379                           
  6380                           ;measure.c: 34: ser_puts("\r\n");
  6381  0036A4  0EB3               	movlw	(STR_29+3)& (0+255)
  6382  0036A6  ECCB  F021         	call	_ser_puts
  6383                           
  6384                           ;measure.c: 35: put_str("please wait...");
  6385  0036AA  0E65               	movlw	STR_15& (0+255)
  6386  0036AC  ECEC  F020         	call	_put_str
  6387                           
  6388                           ;measure.c: 38: LATC &= ~0b100;
  6389  0036B0  948B               	bcf	3979,2,c	;volatile
  6390                           
  6391                           ;measure.c: 40: F1 = (double)measure_freq();
  6392  0036B2  EC50  F01A         	call	_measure_freq	;wreg free
  6393  0036B6  C036  F03B         	movff	?_measure_freq,___lwtofl@c
  6394  0036BA  C037  F03C         	movff	?_measure_freq+1,___lwtofl@c+1
  6395  0036BE  EC5E  F021         	call	___lwtofl	;wreg free
  6396  0036C2  C03B  F0DE         	movff	?___lwtofl,_F1
  6397  0036C6  C03C  F0DF         	movff	?___lwtofl+1,_F1+1
  6398  0036CA  C03D  F0E0         	movff	?___lwtofl+2,_F1+2
  6399  0036CE  C03E  F0E1         	movff	?___lwtofl+3,_F1+3
  6400                           
  6401                           ;measure.c: 41: delay10ms(50);
  6402  0036D2  0E32               	movlw	50
  6403  0036D4  EC07  F022         	call	_delay10ms
  6404                           
  6405                           ;measure.c: 43: F1 = (double)measure_freq();
  6406  0036D8  EC50  F01A         	call	_measure_freq	;wreg free
  6407  0036DC  C036  F03B         	movff	?_measure_freq,___lwtofl@c
  6408  0036E0  C037  F03C         	movff	?_measure_freq+1,___lwtofl@c+1
  6409  0036E4  EC5E  F021         	call	___lwtofl	;wreg free
  6410  0036E8  C03B  F0DE         	movff	?___lwtofl,_F1
  6411  0036EC  C03C  F0DF         	movff	?___lwtofl+1,_F1+1
  6412  0036F0  C03D  F0E0         	movff	?___lwtofl+2,_F1+2
  6413  0036F4  C03E  F0E1         	movff	?___lwtofl+3,_F1+3
  6414                           
  6415                           ;measure.c: 44: LATC |= 0b100;
  6416  0036F8  848B               	bsf	3979,2,c	;volatile
  6417                           
  6418                           ;measure.c: 46: F2 = (double)measure_freq();
  6419  0036FA  EC50  F01A         	call	_measure_freq	;wreg free
  6420  0036FE  C036  F03B         	movff	?_measure_freq,___lwtofl@c
  6421  003702  C037  F03C         	movff	?_measure_freq+1,___lwtofl@c+1
  6422  003706  EC5E  F021         	call	___lwtofl	;wreg free
  6423  00370A  C03B  F0B1         	movff	?___lwtofl,_F2
  6424  00370E  C03C  F0B2         	movff	?___lwtofl+1,_F2+1
  6425  003712  C03D  F0B3         	movff	?___lwtofl+2,_F2+2
  6426  003716  C03E  F0B4         	movff	?___lwtofl+3,_F2+3
  6427                           
  6428                           ;measure.c: 47: delay10ms(50);
  6429  00371A  0E32               	movlw	50
  6430  00371C  EC07  F022         	call	_delay10ms
  6431                           
  6432                           ;measure.c: 49: F2 = (double)measure_freq();
  6433  003720  EC50  F01A         	call	_measure_freq	;wreg free
  6434  003724  C036  F03B         	movff	?_measure_freq,___lwtofl@c
  6435  003728  C037  F03C         	movff	?_measure_freq+1,___lwtofl@c+1
  6436  00372C  EC5E  F021         	call	___lwtofl	;wreg free
  6437  003730  C03B  F0B1         	movff	?___lwtofl,_F2
  6438  003734  C03C  F0B2         	movff	?___lwtofl+1,_F2+1
  6439  003738  C03D  F0B3         	movff	?___lwtofl+2,_F2+2
  6440  00373C  C03E  F0B4         	movff	?___lwtofl+3,_F2+3
  6441                           
  6442                           ;measure.c: 50: LATC &= ~0b100;
  6443  003740  948B               	bcf	3979,2,c	;volatile
  6444                           
  6445                           ;measure.c: 54: lcd_gotoxy(11, 0);
  6446  003742  6A08               	clrf	lcd_gotoxy@row,c
  6447  003744  0E0B               	movlw	11
  6448  003746  EC9C  F020         	call	_lcd_gotoxy
  6449                           
  6450                           ;measure.c: 56: for(i = 0; i < 6; i++) {
  6451  00374A  6A3F               	clrf	calibrate@i,c
  6452  00374C                     l4353:
  6453                           
  6454                           ;measure.c: 57: lcd_send(('='), 1);
  6455  00374C  0E01               	movlw	1
  6456  00374E  6E05               	movwf	lcd_send@mode,c
  6457  003750  0E3D               	movlw	61
  6458  003752  ECDB  F021         	call	_lcd_send
  6459                           
  6460                           ;measure.c: 59: delay10ms(28);
  6461  003756  0E1C               	movlw	28
  6462  003758  EC07  F022         	call	_delay10ms
  6463  00375C  2A3F               	incf	calibrate@i,f,c
  6464  00375E  0E05               	movlw	5
  6465  003760  643F               	cpfsgt	calibrate@i,c
  6466  003762  D7F4               	goto	l4353
  6467                           
  6468                           ;measure.c: 60: }
  6469                           ;measure.c: 62: ser_puts("\r\n");
  6470  003764  0EB3               	movlw	(STR_29+3)& (0+255)
  6471  003766  ECCB  F021         	call	_ser_puts
  6472  00376A  0012               	return		;funcret
  6473  00376C                     __end_of_calibrate:
  6474                           	opt stack 0
  6475                           tblptru	equ	0xFF8
  6476                           tblptrh	equ	0xFF7
  6477                           tblptrl	equ	0xFF6
  6478                           tablat	equ	0xFF5
  6479                           prodh	equ	0xFF4
  6480                           prodl	equ	0xFF3
  6481                           intcon	equ	0xFF2
  6482                           intcon2	equ	0xFF1
  6483                           postinc0	equ	0xFEE
  6484                           wreg	equ	0xFE8
  6485                           postdec1	equ	0xFE5
  6486                           fsr1l	equ	0xFE1
  6487                           postinc2	equ	0xFDE
  6488                           postdec2	equ	0xFDD
  6489                           fsr2h	equ	0xFDA
  6490                           fsr2l	equ	0xFD9
  6491                           status	equ	0xFD8
  6492                           
  6493 ;; *************** function _ser_puts *****************
  6494 ;; Defined at:
  6495 ;;		line 92 in file "../../../lib/ser.c"
  6496 ;; Parameters:    Size  Location     Type
  6497 ;;  s               1    wreg     PTR const unsigned char 
  6498 ;;		 -> STR_34(3), STR_29(6), STR_26(3), STR_25(5), 
  6499 ;;		 -> STR_24(3), STR_23(8), STR_22(6), STR_21(6), 
  6500 ;;		 -> STR_20(6), STR_19(5), STR_16(3), STR_14(3), 
  6501 ;;		 -> STR_9(3), 
  6502 ;; Auto vars:     Size  Location     Type
  6503 ;;  s               1    4[COMRAM] PTR const unsigned char 
  6504 ;;		 -> STR_34(3), STR_29(6), STR_26(3), STR_25(5), 
  6505 ;;		 -> STR_24(3), STR_23(8), STR_22(6), STR_21(6), 
  6506 ;;		 -> STR_20(6), STR_19(5), STR_16(3), STR_14(3), 
  6507 ;;		 -> STR_9(3), 
  6508 ;; Return value:  Size  Location     Type
  6509 ;;		None               void
  6510 ;; Registers used:
  6511 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6512 ;; Tracked objects:
  6513 ;;		On entry : 0/0
  6514 ;;		On exit  : 0/0
  6515 ;;		Unchanged: 0/0
  6516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6517 ;;      Params:         0       0       0       0       0       0       0       0       0
  6518 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6519 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6520 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6521 ;;Total ram usage:        1 bytes
  6522 ;; Hardware stack levels used:    1
  6523 ;; Hardware stack levels required when called:    2
  6524 ;; This function calls:
  6525 ;;		_ser_putch
  6526 ;; This function is called by:
  6527 ;;		_print_unit
  6528 ;;		_calibrate
  6529 ;;		_measure_capacitance
  6530 ;;		_main
  6531 ;; This function uses a non-reentrant model
  6532 ;;
  6533                           
  6534                           	psect	text33
  6535  004396                     __ptext33:
  6536                           	opt stack 0
  6537  004396                     _ser_puts:
  6538                           	opt stack 28
  6539                           
  6540                           ;incstack = 0
  6541                           ;ser_puts@s stored from wreg
  6542  004396  6E05               	movwf	ser_puts@s,c
  6543                           
  6544                           ;ser.c: 93: while(*s) ser_putch(*s++);
  6545  004398  D007               	goto	l4093
  6546  00439A                     l4089:
  6547  00439A  C005  FFF6         	movff	ser_puts@s,tblptrl
  6548  00439E                     	if	0	;There is only one active tblptr byte
  6549  00439E                     	endif
  6550  00439E                     	if	0	;tblptru may be non-zero
  6551  00439E                     	endif
  6552  00439E                     	if	0	;tblptru may be non-zero
  6553  00439E                     	endif
  6554  00439E  0008               	tblrd		*
  6555  0043A0  50F5               	movf	tablat,w,c
  6556  0043A2  EC73  F021         	call	_ser_putch
  6557  0043A6  2A05               	incf	ser_puts@s,f,c
  6558  0043A8                     l4093:
  6559  0043A8  C005  FFF6         	movff	ser_puts@s,tblptrl
  6560  0043AC                     	if	0	;There is only one active tblptr byte
  6561  0043AC                     	endif
  6562  0043AC                     	if	0	;tblptru may be non-zero
  6563  0043AC                     	endif
  6564  0043AC                     	if	0	;tblptru may be non-zero
  6565  0043AC                     	endif
  6566  0043AC  0008               	tblrd		*
  6567  0043AE  50F5               	movf	tablat,w,c
  6568  0043B0  B4D8               	btfsc	status,2,c
  6569  0043B2  0012               	return		;funcret
  6570  0043B4  D7F2               	goto	l4089
  6571  0043B6                     __end_of_ser_puts:
  6572                           	opt stack 0
  6573                           tblptru	equ	0xFF8
  6574                           tblptrh	equ	0xFF7
  6575                           tblptrl	equ	0xFF6
  6576                           tablat	equ	0xFF5
  6577                           prodh	equ	0xFF4
  6578                           prodl	equ	0xFF3
  6579                           intcon	equ	0xFF2
  6580                           intcon2	equ	0xFF1
  6581                           postinc0	equ	0xFEE
  6582                           wreg	equ	0xFE8
  6583                           postdec1	equ	0xFE5
  6584                           fsr1l	equ	0xFE1
  6585                           postinc2	equ	0xFDE
  6586                           postdec2	equ	0xFDD
  6587                           fsr2h	equ	0xFDA
  6588                           fsr2l	equ	0xFD9
  6589                           status	equ	0xFD8
  6590                           
  6591 ;; *************** function _measure_freq *****************
  6592 ;; Defined at:
  6593 ;;		line 69 in file "../../../src/measure.c"
  6594 ;; Parameters:    Size  Location     Type
  6595 ;;		None
  6596 ;; Auto vars:     Size  Location     Type
  6597 ;;  count           2   56[COMRAM] unsigned int 
  6598 ;; Return value:  Size  Location     Type
  6599 ;;                  2   53[COMRAM] unsigned short 
  6600 ;; Registers used:
  6601 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6602 ;; Tracked objects:
  6603 ;;		On entry : 0/0
  6604 ;;		On exit  : 0/0
  6605 ;;		Unchanged: 0/0
  6606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6607 ;;      Params:         2       0       0       0       0       0       0       0       0
  6608 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6609 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6610 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6611 ;;Total ram usage:        5 bytes
  6612 ;; Hardware stack levels used:    1
  6613 ;; Hardware stack levels required when called:    5
  6614 ;; This function calls:
  6615 ;;		_format_number
  6616 ;;		_lcd_gotoxy
  6617 ;;		_put_str
  6618 ;;		_timer0_read_ps
  6619 ;; This function is called by:
  6620 ;;		_calibrate
  6621 ;;		_measure_capacitance
  6622 ;;		_measure_inductance
  6623 ;; This function uses a non-reentrant model
  6624 ;;
  6625                           
  6626                           	psect	text34
  6627  0034A0                     __ptext34:
  6628                           	opt stack 0
  6629  0034A0                     _measure_freq:
  6630                           	opt stack 24
  6631                           
  6632                           ;measure.c: 70: uint16_t count;
  6633                           ;measure.c: 72: INTCON &= ~0b100;
  6634                           
  6635                           ;incstack = 0
  6636  0034A0  94F2               	bcf	intcon,2,c	;volatile
  6637                           
  6638                           ;measure.c: 76: TRISA &= ~0b00010000;
  6639  0034A2  9892               	bcf	3986,4,c	;volatile
  6640                           
  6641                           ;measure.c: 78: _delay((unsigned long)((20)*(20000000/4000.0)));
  6642  0034A4  0E82               	movlw	130
  6643  0034A6  6E38               	movwf	??_measure_freq& (0+255),c
  6644  0034A8  0EDE               	movlw	222
  6645  0034AA                     u3797:
  6646  0034AA  2EE8               	decfsz	wreg,f,c
  6647  0034AC  D7FE               	goto	u3797
  6648  0034AE  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6649  0034B0  D7FC               	goto	u3797
  6650                           
  6651                           ;measure.c: 81: TMR0 = 0x00;
  6652  0034B2  6AD6               	clrf	4054,c	;volatile
  6653  0034B4  6AD7               	clrf	4055,c	;volatile
  6654                           
  6655                           ;measure.c: 83: LATC &= ~0b00000010; LATC |= (!!(1)) << 1;;
  6656  0034B6  928B               	bcf	3979,1,c	;volatile
  6657  0034B8  828B               	bsf	3979,1,c	;volatile
  6658                           
  6659                           ;measure.c: 86: _delay((unsigned long)((10)*(20000000/4000.0)));
  6660  0034BA  0E41               	movlw	65
  6661  0034BC  6E38               	movwf	??_measure_freq& (0+255),c
  6662  0034BE  0EEE               	movlw	238
  6663  0034C0                     u3807:
  6664  0034C0  2EE8               	decfsz	wreg,f,c
  6665  0034C2  D7FE               	goto	u3807
  6666  0034C4  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6667  0034C6  D7FC               	goto	u3807
  6668  0034C8  D000               	nop2	
  6669                           
  6670                           ;measure.c: 87: _delay((unsigned long)((10)*(20000000/4000.0)));
  6671  0034CA  0E41               	movlw	65
  6672  0034CC  6E38               	movwf	??_measure_freq& (0+255),c
  6673  0034CE  0EEE               	movlw	238
  6674  0034D0                     u3817:
  6675  0034D0  2EE8               	decfsz	wreg,f,c
  6676  0034D2  D7FE               	goto	u3817
  6677  0034D4  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6678  0034D6  D7FC               	goto	u3817
  6679  0034D8  D000               	nop2	
  6680                           
  6681                           ;measure.c: 88: _delay((unsigned long)((10)*(20000000/4000.0)));
  6682  0034DA  0E41               	movlw	65
  6683  0034DC  6E38               	movwf	??_measure_freq& (0+255),c
  6684  0034DE  0EEE               	movlw	238
  6685  0034E0                     u3827:
  6686  0034E0  2EE8               	decfsz	wreg,f,c
  6687  0034E2  D7FE               	goto	u3827
  6688  0034E4  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6689  0034E6  D7FC               	goto	u3827
  6690  0034E8  D000               	nop2	
  6691                           
  6692                           ;measure.c: 89: _delay((unsigned long)((10)*(20000000/4000.0)));
  6693  0034EA  0E41               	movlw	65
  6694  0034EC  6E38               	movwf	??_measure_freq& (0+255),c
  6695  0034EE  0EEE               	movlw	238
  6696  0034F0                     u3837:
  6697  0034F0  2EE8               	decfsz	wreg,f,c
  6698  0034F2  D7FE               	goto	u3837
  6699  0034F4  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6700  0034F6  D7FC               	goto	u3837
  6701  0034F8  D000               	nop2	
  6702                           
  6703                           ;measure.c: 90: _delay((unsigned long)((10)*(20000000/4000.0)));
  6704  0034FA  0E41               	movlw	65
  6705  0034FC  6E38               	movwf	??_measure_freq& (0+255),c
  6706  0034FE  0EEE               	movlw	238
  6707  003500                     u3847:
  6708  003500  2EE8               	decfsz	wreg,f,c
  6709  003502  D7FE               	goto	u3847
  6710  003504  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6711  003506  D7FC               	goto	u3847
  6712  003508  D000               	nop2	
  6713                           
  6714                           ;measure.c: 91: _delay((unsigned long)((10)*(20000000/4000.0)));
  6715  00350A  0E41               	movlw	65
  6716  00350C  6E38               	movwf	??_measure_freq& (0+255),c
  6717  00350E  0EEE               	movlw	238
  6718  003510                     u3857:
  6719  003510  2EE8               	decfsz	wreg,f,c
  6720  003512  D7FE               	goto	u3857
  6721  003514  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6722  003516  D7FC               	goto	u3857
  6723  003518  D000               	nop2	
  6724                           
  6725                           ;measure.c: 92: _delay((unsigned long)((10)*(20000000/4000.0)));
  6726  00351A  0E41               	movlw	65
  6727  00351C  6E38               	movwf	??_measure_freq& (0+255),c
  6728  00351E  0EEE               	movlw	238
  6729  003520                     u3867:
  6730  003520  2EE8               	decfsz	wreg,f,c
  6731  003522  D7FE               	goto	u3867
  6732  003524  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6733  003526  D7FC               	goto	u3867
  6734  003528  D000               	nop2	
  6735                           
  6736                           ;measure.c: 93: _delay((unsigned long)((10)*(20000000/4000.0)));
  6737  00352A  0E41               	movlw	65
  6738  00352C  6E38               	movwf	??_measure_freq& (0+255),c
  6739  00352E  0EEE               	movlw	238
  6740  003530                     u3877:
  6741  003530  2EE8               	decfsz	wreg,f,c
  6742  003532  D7FE               	goto	u3877
  6743  003534  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6744  003536  D7FC               	goto	u3877
  6745  003538  D000               	nop2	
  6746                           
  6747                           ;measure.c: 94: _delay((unsigned long)((10)*(20000000/4000.0)));
  6748  00353A  0E41               	movlw	65
  6749  00353C  6E38               	movwf	??_measure_freq& (0+255),c
  6750  00353E  0EEE               	movlw	238
  6751  003540                     u3887:
  6752  003540  2EE8               	decfsz	wreg,f,c
  6753  003542  D7FE               	goto	u3887
  6754  003544  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6755  003546  D7FC               	goto	u3887
  6756  003548  D000               	nop2	
  6757                           
  6758                           ;measure.c: 95: _delay((unsigned long)((10)*(20000000/4000.0)));
  6759  00354A  0E41               	movlw	65
  6760  00354C  6E38               	movwf	??_measure_freq& (0+255),c
  6761  00354E  0EEE               	movlw	238
  6762  003550                     u3897:
  6763  003550  2EE8               	decfsz	wreg,f,c
  6764  003552  D7FE               	goto	u3897
  6765  003554  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6766  003556  D7FC               	goto	u3897
  6767  003558  D000               	nop2	
  6768                           
  6769                           ;measure.c: 97: LATC &= ~0b00000010; LATC |= (!!(0)) << 1;;
  6770  00355A  928B               	bcf	3979,1,c	;volatile
  6771  00355C  508B               	movf	3979,w,c	;volatile
  6772                           
  6773                           ;measure.c: 100: TRISA |= 0b00010000;
  6774  00355E  8892               	bsf	3986,4,c	;volatile
  6775                           
  6776                           ;measure.c: 103: count = timer0_read_ps();
  6777  003560  ECAC  F01F         	call	_timer0_read_ps	;wreg free
  6778  003564  C004  F039         	movff	?_timer0_read_ps,measure_freq@count
  6779  003568  C005  F03A         	movff	?_timer0_read_ps+1,measure_freq@count+1
  6780                           
  6781                           ;measure.c: 106: lcd_gotoxy(0, 1);
  6782  00356C  0E01               	movlw	1
  6783  00356E  6E08               	movwf	lcd_gotoxy@row,c
  6784  003570  0E00               	movlw	0
  6785  003572  EC9C  F020         	call	_lcd_gotoxy
  6786                           
  6787                           ;measure.c: 107: put_str("Freq=");
  6788  003576  0EC8               	movlw	STR_17& (0+255)
  6789  003578  ECEC  F020         	call	_put_str
  6790                           
  6791                           ;measure.c: 108: format_number( count, 10, 5);
  6792  00357C  C039  F00B         	movff	measure_freq@count,format_number@n
  6793  003580  C03A  F00C         	movff	measure_freq@count+1,format_number@n+1
  6794  003584  0E0A               	movlw	10
  6795  003586  6E0D               	movwf	format_number@base,c
  6796  003588  0E05               	movlw	5
  6797  00358A  6E0E               	movwf	format_number@pad,c
  6798  00358C  EC46  F01D         	call	_format_number	;wreg free
  6799                           
  6800                           ;measure.c: 111: return count;
  6801  003590  C039  F036         	movff	measure_freq@count,?_measure_freq
  6802  003594  C03A  F037         	movff	measure_freq@count+1,?_measure_freq+1
  6803  003598  0012               	return		;funcret
  6804  00359A                     __end_of_measure_freq:
  6805                           	opt stack 0
  6806                           tblptru	equ	0xFF8
  6807                           tblptrh	equ	0xFF7
  6808                           tblptrl	equ	0xFF6
  6809                           tablat	equ	0xFF5
  6810                           prodh	equ	0xFF4
  6811                           prodl	equ	0xFF3
  6812                           intcon	equ	0xFF2
  6813                           intcon2	equ	0xFF1
  6814                           postinc0	equ	0xFEE
  6815                           wreg	equ	0xFE8
  6816                           postdec1	equ	0xFE5
  6817                           fsr1l	equ	0xFE1
  6818                           postinc2	equ	0xFDE
  6819                           postdec2	equ	0xFDD
  6820                           fsr2h	equ	0xFDA
  6821                           fsr2l	equ	0xFD9
  6822                           status	equ	0xFD8
  6823                           
  6824 ;; *************** function _timer0_read_ps *****************
  6825 ;; Defined at:
  6826 ;;		line 59 in file "../../../lib/timer.c"
  6827 ;; Parameters:    Size  Location     Type
  6828 ;;		None
  6829 ;; Auto vars:     Size  Location     Type
  6830 ;;  count           2    8[COMRAM] unsigned int 
  6831 ;;  prev            1    7[COMRAM] unsigned char 
  6832 ;; Return value:  Size  Location     Type
  6833 ;;                  2    3[COMRAM] unsigned short 
  6834 ;; Registers used:
  6835 ;;		wreg, status,2, status,0
  6836 ;; Tracked objects:
  6837 ;;		On entry : 0/0
  6838 ;;		On exit  : 0/0
  6839 ;;		Unchanged: 0/0
  6840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6841 ;;      Params:         2       0       0       0       0       0       0       0       0
  6842 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6843 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6844 ;;      Totals:         7       0       0       0       0       0       0       0       0
  6845 ;;Total ram usage:        7 bytes
  6846 ;; Hardware stack levels used:    1
  6847 ;; Hardware stack levels required when called:    1
  6848 ;; This function calls:
  6849 ;;		Nothing
  6850 ;; This function is called by:
  6851 ;;		_measure_freq
  6852 ;; This function uses a non-reentrant model
  6853 ;;
  6854                           
  6855                           	psect	text35
  6856  003F58                     __ptext35:
  6857                           	opt stack 0
  6858  003F58                     _timer0_read_ps:
  6859                           	opt stack 27
  6860                           
  6861                           ;timer.c: 60: uint8_t prev = TMR0;
  6862                           
  6863                           ;incstack = 0
  6864  003F58  CFD6 F008          	movff	4054,timer0_read_ps@prev	;volatile
  6865                           
  6866                           ;timer.c: 61: uint16_t count = 0;
  6867  003F5C  6A09               	clrf	timer0_read_ps@count,c
  6868  003F5E  6A0A               	clrf	timer0_read_ps@count+1,c
  6869                           
  6870                           ;timer.c: 63: T0CON |= 0x20;
  6871  003F60  8AD5               	bsf	4053,5,c	;volatile
  6872  003F62                     l291:
  6873                           
  6874                           ;timer.c: 67: T0CON |= 0x10;
  6875  003F62  88D5               	bsf	4053,4,c	;volatile
  6876                           
  6877                           ;timer.c: 69: __nop();
  6878  003F64  F000               	nop	
  6879                           
  6880                           ;timer.c: 70: __nop();
  6881  003F66  F000               	nop	
  6882                           
  6883                           ;timer.c: 72: T0CON &= ~0x10;
  6884  003F68  98D5               	bcf	4053,4,c	;volatile
  6885                           
  6886                           ;timer.c: 74: __nop();
  6887  003F6A  F000               	nop	
  6888                           
  6889                           ;timer.c: 75: __nop();
  6890  003F6C  F000               	nop	
  6891                           
  6892                           ;timer.c: 77: ++count;
  6893  003F6E  4A09               	infsnz	timer0_read_ps@count,f,c
  6894  003F70  2A0A               	incf	timer0_read_ps@count+1,f,c
  6895                           
  6896                           ;timer.c: 80: } while(prev == TMR0 && count <= 255);
  6897  003F72  5008               	movf	timer0_read_ps@prev,w,c
  6898  003F74  18D6               	xorwf	4054,w,c	;volatile
  6899  003F76  10D7               	iorwf	4055,w,c	;volatile
  6900  003F78  E102               	bnz	l4167
  6901  003F7A  040A               	decf	timer0_read_ps@count+1,w,c
  6902  003F7C  E3F2               	bnc	l291
  6903  003F7E                     l4167:
  6904                           
  6905                           ;timer.c: 82: count = ((prev << 8) + (256 - count));
  6906  003F7E  5008               	movf	timer0_read_ps@prev,w,c
  6907  003F80  6E07               	movwf	(??_timer0_read_ps+1)& (0+255),c
  6908  003F82  6A06               	clrf	??_timer0_read_ps& (0+255),c
  6909  003F84  5009               	movf	timer0_read_ps@count,w,c
  6910  003F86  5E06               	subwf	??_timer0_read_ps,f,c
  6911  003F88  500A               	movf	timer0_read_ps@count+1,w,c
  6912  003F8A  5A07               	subwfb	??_timer0_read_ps+1,f,c
  6913  003F8C  0E00               	movlw	0
  6914  003F8E  2406               	addwf	??_timer0_read_ps,w,c
  6915  003F90  6E09               	movwf	timer0_read_ps@count,c
  6916  003F92  0E01               	movlw	1
  6917  003F94  2007               	addwfc	??_timer0_read_ps+1,w,c
  6918  003F96  6E0A               	movwf	timer0_read_ps@count+1,c
  6919                           
  6920                           ;timer.c: 83: return count;
  6921  003F98  C009  F004         	movff	timer0_read_ps@count,?_timer0_read_ps
  6922  003F9C  C00A  F005         	movff	timer0_read_ps@count+1,?_timer0_read_ps+1
  6923  003FA0  0012               	return		;funcret
  6924  003FA2                     __end_of_timer0_read_ps:
  6925                           	opt stack 0
  6926                           tblptru	equ	0xFF8
  6927                           tblptrh	equ	0xFF7
  6928                           tblptrl	equ	0xFF6
  6929                           tablat	equ	0xFF5
  6930                           prodh	equ	0xFF4
  6931                           prodl	equ	0xFF3
  6932                           intcon	equ	0xFF2
  6933                           intcon2	equ	0xFF1
  6934                           postinc0	equ	0xFEE
  6935                           wreg	equ	0xFE8
  6936                           postdec1	equ	0xFE5
  6937                           fsr1l	equ	0xFE1
  6938                           postinc2	equ	0xFDE
  6939                           postdec2	equ	0xFDD
  6940                           fsr2h	equ	0xFDA
  6941                           fsr2l	equ	0xFD9
  6942                           status	equ	0xFD8
  6943                           
  6944 ;; *************** function _put_str *****************
  6945 ;; Defined at:
  6946 ;;		line 510 in file "../../../src/print.c"
  6947 ;; Parameters:    Size  Location     Type
  6948 ;;  s               1    wreg     PTR const unsigned char 
  6949 ;;		 -> STR_27(13), STR_18(10), STR_17(6), STR_15(15), 
  6950 ;;		 -> STR_13(12), 
  6951 ;; Auto vars:     Size  Location     Type
  6952 ;;  s               1   10[COMRAM] PTR const unsigned char 
  6953 ;;		 -> STR_27(13), STR_18(10), STR_17(6), STR_15(15), 
  6954 ;;		 -> STR_13(12), 
  6955 ;;  i               2    8[COMRAM] int 
  6956 ;; Return value:  Size  Location     Type
  6957 ;;		None               void
  6958 ;; Registers used:
  6959 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6960 ;; Tracked objects:
  6961 ;;		On entry : 0/0
  6962 ;;		On exit  : 0/0
  6963 ;;		Unchanged: 0/0
  6964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6965 ;;      Params:         0       0       0       0       0       0       0       0       0
  6966 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6967 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6968 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6969 ;;Total ram usage:        4 bytes
  6970 ;; Hardware stack levels used:    1
  6971 ;; Hardware stack levels required when called:    4
  6972 ;; This function calls:
  6973 ;;		_output_putch
  6974 ;; This function is called by:
  6975 ;;		_calibrate
  6976 ;;		_measure_freq
  6977 ;;		_measure_capacitance
  6978 ;;		_measure_inductance
  6979 ;; This function uses a non-reentrant model
  6980 ;;
  6981                           
  6982                           	psect	text36
  6983  0041D8                     __ptext36:
  6984                           	opt stack 0
  6985  0041D8                     _put_str:
  6986                           	opt stack 25
  6987                           
  6988                           ;incstack = 0
  6989                           ;put_str@s stored from wreg
  6990  0041D8  6E0B               	movwf	put_str@s,c
  6991                           
  6992                           ;print.c: 511: int i;
  6993                           ;print.c: 513: for(i = 0; s[i]; i++) {
  6994  0041DA  6A09               	clrf	put_str@i,c
  6995  0041DC  6A0A               	clrf	put_str@i+1,c
  6996  0041DE  D00B               	goto	l4149
  6997  0041E0                     l4145:
  6998                           
  6999                           ;print.c: 514: output_putch(s[i]);
  7000  0041E0  500B               	movf	put_str@s,w,c
  7001  0041E2  2409               	addwf	put_str@i,w,c
  7002  0041E4  6E08               	movwf	??_put_str& (0+255),c
  7003  0041E6  C008  FFF6         	movff	??_put_str,tblptrl
  7004  0041EA                     	if	0	;There is only one active tblptr byte
  7005  0041EA                     	endif
  7006  0041EA                     	if	0	;tblptru may be non-zero
  7007  0041EA                     	endif
  7008  0041EA                     	if	0	;tblptru may be non-zero
  7009  0041EA                     	endif
  7010  0041EA  0008               	tblrd		*
  7011  0041EC  50F5               	movf	tablat,w,c
  7012  0041EE  ECF4  F021         	call	_output_putch
  7013  0041F2  4A09               	infsnz	put_str@i,f,c
  7014  0041F4  2A0A               	incf	put_str@i+1,f,c
  7015  0041F6                     l4149:
  7016  0041F6  500B               	movf	put_str@s,w,c
  7017  0041F8  2409               	addwf	put_str@i,w,c
  7018  0041FA  6E08               	movwf	??_put_str& (0+255),c
  7019  0041FC  C008  FFF6         	movff	??_put_str,tblptrl
  7020  004200                     	if	0	;There is only one active tblptr byte
  7021  004200                     	endif
  7022  004200                     	if	0	;tblptru may be non-zero
  7023  004200                     	endif
  7024  004200                     	if	0	;tblptru may be non-zero
  7025  004200                     	endif
  7026  004200  0008               	tblrd		*
  7027  004202  50F5               	movf	tablat,w,c
  7028  004204  B4D8               	btfsc	status,2,c
  7029  004206  0012               	return		;funcret
  7030  004208  D7EB               	goto	l4145
  7031  00420A                     __end_of_put_str:
  7032                           	opt stack 0
  7033                           tblptru	equ	0xFF8
  7034                           tblptrh	equ	0xFF7
  7035                           tblptrl	equ	0xFF6
  7036                           tablat	equ	0xFF5
  7037                           prodh	equ	0xFF4
  7038                           prodl	equ	0xFF3
  7039                           intcon	equ	0xFF2
  7040                           intcon2	equ	0xFF1
  7041                           postinc0	equ	0xFEE
  7042                           wreg	equ	0xFE8
  7043                           postdec1	equ	0xFE5
  7044                           fsr1l	equ	0xFE1
  7045                           postinc2	equ	0xFDE
  7046                           postdec2	equ	0xFDD
  7047                           fsr2h	equ	0xFDA
  7048                           fsr2l	equ	0xFD9
  7049                           status	equ	0xFD8
  7050                           
  7051 ;; *************** function _output_putch *****************
  7052 ;; Defined at:
  7053 ;;		line 497 in file "../../../src/print.c"
  7054 ;; Parameters:    Size  Location     Type
  7055 ;;  c               1    wreg     unsigned char 
  7056 ;; Auto vars:     Size  Location     Type
  7057 ;;  c               1    6[COMRAM] unsigned char 
  7058 ;; Return value:  Size  Location     Type
  7059 ;;		None               void
  7060 ;; Registers used:
  7061 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7062 ;; Tracked objects:
  7063 ;;		On entry : 0/0
  7064 ;;		On exit  : 0/0
  7065 ;;		Unchanged: 0/0
  7066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7067 ;;      Params:         0       0       0       0       0       0       0       0       0
  7068 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7069 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7070 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7071 ;;Total ram usage:        1 bytes
  7072 ;; Hardware stack levels used:    1
  7073 ;; Hardware stack levels required when called:    3
  7074 ;; This function calls:
  7075 ;;		_lcd_send
  7076 ;;		_ser_putch
  7077 ;; This function is called by:
  7078 ;;		_put_str
  7079 ;; This function uses a non-reentrant model
  7080 ;;
  7081                           
  7082                           	psect	text37
  7083  0043E8                     __ptext37:
  7084                           	opt stack 0
  7085  0043E8                     _output_putch:
  7086                           	opt stack 25
  7087                           
  7088                           ;incstack = 0
  7089                           ;output_putch@c stored from wreg
  7090  0043E8  6E07               	movwf	output_putch@c,c
  7091                           
  7092                           ;print.c: 499: lcd_send((c), 1);
  7093  0043EA  0E01               	movlw	1
  7094  0043EC  6E05               	movwf	lcd_send@mode,c
  7095  0043EE  5007               	movf	output_putch@c,w,c
  7096  0043F0  ECDB  F021         	call	_lcd_send
  7097                           
  7098                           ;print.c: 502: ser_putch(c);
  7099  0043F4  5007               	movf	output_putch@c,w,c
  7100  0043F6  EC73  F021         	call	_ser_putch
  7101  0043FA  0012               	return		;funcret
  7102  0043FC                     __end_of_output_putch:
  7103                           	opt stack 0
  7104                           tblptru	equ	0xFF8
  7105                           tblptrh	equ	0xFF7
  7106                           tblptrl	equ	0xFF6
  7107                           tablat	equ	0xFF5
  7108                           prodh	equ	0xFF4
  7109                           prodl	equ	0xFF3
  7110                           intcon	equ	0xFF2
  7111                           intcon2	equ	0xFF1
  7112                           postinc0	equ	0xFEE
  7113                           wreg	equ	0xFE8
  7114                           postdec1	equ	0xFE5
  7115                           fsr1l	equ	0xFE1
  7116                           postinc2	equ	0xFDE
  7117                           postdec2	equ	0xFDD
  7118                           fsr2h	equ	0xFDA
  7119                           fsr2l	equ	0xFD9
  7120                           status	equ	0xFD8
  7121                           
  7122 ;; *************** function _ser_putch *****************
  7123 ;; Defined at:
  7124 ;;		line 82 in file "../../../lib/ser.c"
  7125 ;; Parameters:    Size  Location     Type
  7126 ;;  c               1    wreg     unsigned char 
  7127 ;; Auto vars:     Size  Location     Type
  7128 ;;  c               1    3[COMRAM] unsigned char 
  7129 ;; Return value:  Size  Location     Type
  7130 ;;		None               void
  7131 ;; Registers used:
  7132 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7133 ;; Tracked objects:
  7134 ;;		On entry : 0/0
  7135 ;;		On exit  : 0/0
  7136 ;;		Unchanged: 0/0
  7137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7138 ;;      Params:         0       0       0       0       0       0       0       0       0
  7139 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7140 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7141 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7142 ;;Total ram usage:        1 bytes
  7143 ;; Hardware stack levels used:    1
  7144 ;; Hardware stack levels required when called:    1
  7145 ;; This function calls:
  7146 ;;		Nothing
  7147 ;; This function is called by:
  7148 ;;		_output_putch
  7149 ;;		_measure_capacitance
  7150 ;;		_ser_puts
  7151 ;; This function uses a non-reentrant model
  7152 ;;
  7153                           
  7154                           	psect	text38
  7155  0042E6                     __ptext38:
  7156                           	opt stack 0
  7157  0042E6                     _ser_putch:
  7158                           	opt stack 28
  7159                           
  7160                           ;incstack = 0
  7161                           ;ser_putch@c stored from wreg
  7162  0042E6  6E04               	movwf	ser_putch@c,c
  7163  0042E8                     l3833:
  7164  0042E8  285B               	incf	_txiptr,w,c	;volatile
  7165  0042EA  0B0F               	andlw	15
  7166  0042EC  185C               	xorwf	_txoptr,w,c	;volatile
  7167  0042EE  E0FC               	bz	l3833
  7168                           
  7169                           ;ser.c: 84: GIE = 0;
  7170  0042F0  9EF2               	bcf	intcon,7,c	;volatile
  7171                           
  7172                           ;ser.c: 85: txfifo[txiptr] = c;
  7173  0042F2  0E10               	movlw	low _txfifo
  7174  0042F4  245B               	addwf	_txiptr,w,c	;volatile
  7175  0042F6  6ED9               	movwf	fsr2l,c
  7176  0042F8  6ADA               	clrf	fsr2h,c
  7177  0042FA  0E01               	movlw	high _txfifo
  7178  0042FC  22DA               	addwfc	fsr2h,f,c
  7179  0042FE  C004  FFDF         	movff	ser_putch@c,indf2
  7180                           
  7181                           ;ser.c: 86: txiptr = (txiptr + 1) & ((uint8_t)16 - 1);
  7182  004302  285B               	incf	_txiptr,w,c	;volatile
  7183  004304  0B0F               	andlw	15
  7184  004306  6E5B               	movwf	_txiptr,c	;volatile
  7185                           
  7186                           ;ser.c: 87: TXIE = 1;
  7187  004308  889D               	bsf	3997,4,c	;volatile
  7188                           
  7189                           ;ser.c: 88: GIE = 1;
  7190  00430A  8EF2               	bsf	intcon,7,c	;volatile
  7191  00430C  0012               	return		;funcret
  7192  00430E                     __end_of_ser_putch:
  7193                           	opt stack 0
  7194                           tblptru	equ	0xFF8
  7195                           tblptrh	equ	0xFF7
  7196                           tblptrl	equ	0xFF6
  7197                           tablat	equ	0xFF5
  7198                           prodh	equ	0xFF4
  7199                           prodl	equ	0xFF3
  7200                           intcon	equ	0xFF2
  7201                           intcon2	equ	0xFF1
  7202                           postinc0	equ	0xFEE
  7203                           wreg	equ	0xFE8
  7204                           postdec1	equ	0xFE5
  7205                           fsr1l	equ	0xFE1
  7206                           indf2	equ	0xFDF
  7207                           postinc2	equ	0xFDE
  7208                           postdec2	equ	0xFDD
  7209                           fsr2h	equ	0xFDA
  7210                           fsr2l	equ	0xFD9
  7211                           status	equ	0xFD8
  7212                           
  7213 ;; *************** function _lcd_gotoxy *****************
  7214 ;; Defined at:
  7215 ;;		line 157 in file "../../../lib/lcd44780.c"
  7216 ;; Parameters:    Size  Location     Type
  7217 ;;  col             1    wreg     unsigned char 
  7218 ;;  row             1    7[COMRAM] unsigned char 
  7219 ;; Auto vars:     Size  Location     Type
  7220 ;;  col             1    8[COMRAM] unsigned char 
  7221 ;;  row_offsets     4    9[COMRAM] unsigned char [4]
  7222 ;; Return value:  Size  Location     Type
  7223 ;;		None               void
  7224 ;; Registers used:
  7225 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7226 ;; Tracked objects:
  7227 ;;		On entry : 0/0
  7228 ;;		On exit  : 0/0
  7229 ;;		Unchanged: 0/0
  7230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7231 ;;      Params:         1       0       0       0       0       0       0       0       0
  7232 ;;      Locals:         5       0       0       0       0       0       0       0       0
  7233 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7234 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7235 ;;Total ram usage:        6 bytes
  7236 ;; Hardware stack levels used:    1
  7237 ;; Hardware stack levels required when called:    4
  7238 ;; This function calls:
  7239 ;;		_lcd_command
  7240 ;; This function is called by:
  7241 ;;		_print_unit
  7242 ;;		_print_reading
  7243 ;;		_indicator
  7244 ;;		_calibrate
  7245 ;;		_measure_freq
  7246 ;;		_measure_capacitance
  7247 ;;		_measure_inductance
  7248 ;;		_main
  7249 ;; This function uses a non-reentrant model
  7250 ;;
  7251                           
  7252                           	psect	text39
  7253  004138                     __ptext39:
  7254                           	opt stack 0
  7255  004138                     _lcd_gotoxy:
  7256                           	opt stack 24
  7257                           
  7258                           ;incstack = 0
  7259                           ;lcd_gotoxy@col stored from wreg
  7260  004138  6E09               	movwf	lcd_gotoxy@col,c
  7261                           
  7262                           ;lcd44780.c: 159: uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
  7263  00413A  C0EA  F00A         	movff	lcd_gotoxy@F4120,lcd_gotoxy@row_offsets
  7264  00413E  C0EB  F00B         	movff	lcd_gotoxy@F4120+1,lcd_gotoxy@row_offsets+1
  7265  004142  C0EC  F00C         	movff	lcd_gotoxy@F4120+2,lcd_gotoxy@row_offsets+2
  7266  004146  C0ED  F00D         	movff	lcd_gotoxy@F4120+3,lcd_gotoxy@row_offsets+3
  7267                           
  7268                           ;lcd44780.c: 168: if(LCD_lines == 1) {
  7269  00414A  0100               	movlb	0	; () banked
  7270  00414C  05C8               	decf	_LCD_lines& (0+255),w,b
  7271  00414E  E106               	bnz	l4085
  7272                           
  7273                           ; BSR set to: 0
  7274                           ;lcd44780.c: 169: row_offsets[1] = 0x14;
  7275  004150  0E14               	movlw	20
  7276  004152  6E0B               	movwf	lcd_gotoxy@row_offsets+1,c
  7277                           
  7278                           ;lcd44780.c: 170: row_offsets[2] = 0x28;
  7279  004154  0E28               	movlw	40
  7280  004156  6E0C               	movwf	lcd_gotoxy@row_offsets+2,c
  7281                           
  7282                           ;lcd44780.c: 171: row_offsets[3] = 0x3C;
  7283  004158  0E3C               	movlw	60
  7284  00415A  6E0D               	movwf	lcd_gotoxy@row_offsets+3,c
  7285  00415C                     l4085:
  7286                           
  7287                           ; BSR set to: 0
  7288                           ;lcd44780.c: 172: }
  7289                           ;lcd44780.c: 178: lcd_command(0x80 | (col + row_offsets[row]));
  7290  00415C  5008               	movf	lcd_gotoxy@row,w,c
  7291  00415E  0F0A               	addlw	low lcd_gotoxy@row_offsets
  7292  004160  6ED9               	movwf	fsr2l,c
  7293  004162  6ADA               	clrf	fsr2h,c
  7294  004164  50DF               	movf	indf2,w,c
  7295  004166  2409               	addwf	lcd_gotoxy@col,w,c
  7296  004168  0980               	iorlw	128
  7297  00416A  ECFE  F021         	call	_lcd_command
  7298  00416E  0012               	return		;funcret
  7299  004170                     __end_of_lcd_gotoxy:
  7300                           	opt stack 0
  7301                           tblptru	equ	0xFF8
  7302                           tblptrh	equ	0xFF7
  7303                           tblptrl	equ	0xFF6
  7304                           tablat	equ	0xFF5
  7305                           prodh	equ	0xFF4
  7306                           prodl	equ	0xFF3
  7307                           intcon	equ	0xFF2
  7308                           intcon2	equ	0xFF1
  7309                           postinc0	equ	0xFEE
  7310                           wreg	equ	0xFE8
  7311                           postdec1	equ	0xFE5
  7312                           fsr1l	equ	0xFE1
  7313                           indf2	equ	0xFDF
  7314                           postinc2	equ	0xFDE
  7315                           postdec2	equ	0xFDD
  7316                           fsr2h	equ	0xFDA
  7317                           fsr2l	equ	0xFD9
  7318                           status	equ	0xFD8
  7319                           
  7320 ;; *************** function _format_number *****************
  7321 ;; Defined at:
  7322 ;;		line 15 in file "../../../lib/format.c"
  7323 ;; Parameters:    Size  Location     Type
  7324 ;;  n               2   10[COMRAM] unsigned int 
  7325 ;;  base            1   12[COMRAM] unsigned char 
  7326 ;;  pad             1   13[COMRAM] char 
  7327 ;; Auto vars:     Size  Location     Type
  7328 ;;  buf            32   16[COMRAM] unsigned char [32]
  7329 ;;  i               1   52[COMRAM] char 
  7330 ;;  di              1   51[COMRAM] unsigned char 
  7331 ;;  padchar         1   50[COMRAM] unsigned char 
  7332 ;; Return value:  Size  Location     Type
  7333 ;;		None               void
  7334 ;; Registers used:
  7335 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7336 ;; Tracked objects:
  7337 ;;		On entry : 0/0
  7338 ;;		On exit  : 0/0
  7339 ;;		Unchanged: 0/0
  7340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7341 ;;      Params:         4       0       0       0       0       0       0       0       0
  7342 ;;      Locals:        37       0       0       0       0       0       0       0       0
  7343 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7344 ;;      Totals:        43       0       0       0       0       0       0       0       0
  7345 ;;Total ram usage:       43 bytes
  7346 ;; Hardware stack levels used:    1
  7347 ;; Hardware stack levels required when called:    2
  7348 ;; This function calls:
  7349 ;;		___lwdiv
  7350 ;;		___lwmod
  7351 ;;		_buffer_putch
  7352 ;; This function is called by:
  7353 ;;		_print_reading
  7354 ;;		_measure_freq
  7355 ;;		_format_xint32
  7356 ;; This function uses a non-reentrant model
  7357 ;;
  7358                           
  7359                           	psect	text40
  7360  003A8C                     __ptext40:
  7361                           	opt stack 0
  7362  003A8C                     _format_number:
  7363                           	opt stack 26
  7364                           
  7365                           ;format.c: 16: char buf[8 * sizeof(long)];
  7366                           ;format.c: 17: uint8_t di;
  7367                           ;format.c: 18: int8_t i = 0;
  7368                           
  7369                           ;incstack = 0
  7370  003A8C  6A35               	clrf	format_number@i,c
  7371                           
  7372                           ;format.c: 19: char padchar = ' ';
  7373  003A8E  0E20               	movlw	32
  7374  003A90  6E33               	movwf	format_number@padchar,c
  7375                           
  7376                           ;format.c: 21: if(pad < 0) {
  7377  003A92  AE0E               	btfss	format_number@pad,7,c
  7378  003A94  D003               	goto	l4113
  7379                           
  7380                           ;format.c: 22: pad = -pad;
  7381  003A96  6C0E               	negf	format_number@pad,c
  7382                           
  7383                           ;format.c: 23: padchar = '0';
  7384  003A98  0E30               	movlw	48
  7385  003A9A  6E33               	movwf	format_number@padchar,c
  7386  003A9C                     l4113:
  7387                           
  7388                           ;format.c: 35: di = n % base;
  7389  003A9C  C00B  F004         	movff	format_number@n,___lwmod@dividend
  7390  003AA0  C00C  F005         	movff	format_number@n+1,___lwmod@dividend+1
  7391  003AA4  C00D  F006         	movff	format_number@base,___lwmod@divisor
  7392  003AA8  6A07               	clrf	___lwmod@divisor+1,c
  7393  003AAA  EC60  F020         	call	___lwmod	;wreg free
  7394  003AAE  5004               	movf	?___lwmod,w,c
  7395  003AB0  6E34               	movwf	format_number@di,c
  7396                           
  7397                           ;format.c: 36: buf[i++] = (di < 10 ? (uint8_t)'0' + di : (uint8_t)'A' + di - 10);
  7398  003AB2  0E09               	movlw	9
  7399  003AB4  6434               	cpfsgt	format_number@di,c
  7400  003AB6  D002               	goto	l4119
  7401  003AB8  0E37               	movlw	55
  7402  003ABA  D001               	goto	L5
  7403  003ABC                     l4119:
  7404  003ABC  0E30               	movlw	48
  7405  003ABE                     L5:
  7406  003ABE  2434               	addwf	format_number@di,w,c
  7407  003AC0  6E31               	movwf	_format_number$374,c
  7408  003AC2  6A32               	clrf	_format_number$374+1,c
  7409  003AC4  0E00               	movlw	0
  7410  003AC6  2232               	addwfc	_format_number$374+1,f,c
  7411  003AC8  5035               	movf	format_number@i,w,c
  7412  003ACA  0F11               	addlw	low format_number@buf
  7413  003ACC  6ED9               	movwf	fsr2l,c
  7414  003ACE  6ADA               	clrf	fsr2h,c
  7415  003AD0  C031  FFDF         	movff	_format_number$374,indf2
  7416  003AD4  2A35               	incf	format_number@i,f,c
  7417                           
  7418                           ;format.c: 38: n /= base;
  7419  003AD6  C00B  F004         	movff	format_number@n,___lwdiv@dividend
  7420  003ADA  C00C  F005         	movff	format_number@n+1,___lwdiv@dividend+1
  7421  003ADE  C00D  F006         	movff	format_number@base,___lwdiv@divisor
  7422  003AE2  6A07               	clrf	___lwdiv@divisor+1,c
  7423  003AE4  ECD1  F01F         	call	___lwdiv	;wreg free
  7424  003AE8  C004  F00B         	movff	?___lwdiv,format_number@n
  7425  003AEC  C005  F00C         	movff	?___lwdiv+1,format_number@n+1
  7426                           
  7427                           ;format.c: 39: } while(n > 0);
  7428  003AF0  500B               	movf	format_number@n,w,c
  7429  003AF2  100C               	iorwf	format_number@n+1,w,c
  7430  003AF4  E004               	bz	l4131
  7431  003AF6  D7D2               	goto	l4113
  7432  003AF8                     l4129:
  7433  003AF8  5033               	movf	format_number@padchar,w,c
  7434  003AFA  EC1A  F020         	call	_buffer_putch
  7435  003AFE                     l4131:
  7436  003AFE  060E               	decf	format_number@pad,f,c
  7437  003B00  280E               	incf	format_number@pad,w,c
  7438  003B02  6E0F               	movwf	??_format_number& (0+255),c
  7439  003B04  5035               	movf	format_number@i,w,c
  7440  003B06  0A80               	xorlw	128
  7441  003B08  6E10               	movwf	(??_format_number+1)& (0+255),c
  7442  003B0A  500F               	movf	??_format_number,w,c
  7443  003B0C  0A80               	xorlw	128
  7444  003B0E  5C10               	subwf	(??_format_number+1)& (0+255),w,c
  7445  003B10  E3F3               	bnc	l4129
  7446  003B12                     l4133:
  7447                           
  7448                           ;format.c: 43: for(; i > 0; i--) buffer_putch((char)buf[(int16_t)i - 1]);
  7449  003B12  5035               	movf	format_number@i,w,c
  7450  003B14  0A80               	xorlw	128
  7451  003B16  0F7F               	addlw	-129
  7452  003B18  E30C               	bnc	l418
  7453  003B1A  C035  F00F         	movff	format_number@i,??_format_number
  7454  003B1E  060F               	decf	??_format_number,f,c
  7455  003B20  500F               	movf	??_format_number,w,c
  7456  003B22  0F11               	addlw	low format_number@buf
  7457  003B24  6ED9               	movwf	fsr2l,c
  7458  003B26  6ADA               	clrf	fsr2h,c
  7459  003B28  50DF               	movf	indf2,w,c
  7460  003B2A  EC1A  F020         	call	_buffer_putch
  7461                           
  7462                           ; BSR set to: 0
  7463  003B2E  0635               	decf	format_number@i,f,c
  7464  003B30  D7F0               	goto	l4133
  7465  003B32                     l418:
  7466  003B32  0012               	return		;funcret
  7467  003B34                     __end_of_format_number:
  7468                           	opt stack 0
  7469                           tblptru	equ	0xFF8
  7470                           tblptrh	equ	0xFF7
  7471                           tblptrl	equ	0xFF6
  7472                           tablat	equ	0xFF5
  7473                           prodh	equ	0xFF4
  7474                           prodl	equ	0xFF3
  7475                           intcon	equ	0xFF2
  7476                           intcon2	equ	0xFF1
  7477                           postinc0	equ	0xFEE
  7478                           wreg	equ	0xFE8
  7479                           postdec1	equ	0xFE5
  7480                           fsr1l	equ	0xFE1
  7481                           indf2	equ	0xFDF
  7482                           postinc2	equ	0xFDE
  7483                           postdec2	equ	0xFDD
  7484                           fsr2h	equ	0xFDA
  7485                           fsr2l	equ	0xFD9
  7486                           status	equ	0xFD8
  7487                           
  7488 ;; *************** function _buffer_putch *****************
  7489 ;; Defined at:
  7490 ;;		line 22 in file "../../../lib/buffer.c"
  7491 ;; Parameters:    Size  Location     Type
  7492 ;;  ch              1    wreg     unsigned char 
  7493 ;; Auto vars:     Size  Location     Type
  7494 ;;  ch              1    5[COMRAM] unsigned char 
  7495 ;; Return value:  Size  Location     Type
  7496 ;;                  1    wreg      unsigned char 
  7497 ;; Registers used:
  7498 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7499 ;; Tracked objects:
  7500 ;;		On entry : 0/0
  7501 ;;		On exit  : F/0
  7502 ;;		Unchanged: 0/0
  7503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7504 ;;      Params:         0       0       0       0       0       0       0       0       0
  7505 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7506 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7507 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7508 ;;Total ram usage:        3 bytes
  7509 ;; Hardware stack levels used:    1
  7510 ;; Hardware stack levels required when called:    1
  7511 ;; This function calls:
  7512 ;;		Nothing
  7513 ;; This function is called by:
  7514 ;;		_format_number
  7515 ;;		_format_xint32
  7516 ;;		_format_double
  7517 ;; This function uses a non-reentrant model
  7518 ;;
  7519                           
  7520                           	psect	text41
  7521  004034                     __ptext41:
  7522                           	opt stack 0
  7523  004034                     _buffer_putch:
  7524                           	opt stack 26
  7525                           
  7526                           ;incstack = 0
  7527                           ;buffer_putch@ch stored from wreg
  7528  004034  6E06               	movwf	buffer_putch@ch,c
  7529                           
  7530                           ;buffer.c: 23: if(16 - buffer.n <= 0) {
  7531  004036  0E10               	movlw	16
  7532  004038  6E04               	movwf	??_buffer_putch& (0+255),c
  7533  00403A  6A05               	clrf	(??_buffer_putch+1)& (0+255),c
  7534  00403C  0100               	movlb	0	; () banked
  7535  00403E  39DD               	swapf	(_buffer+16)& (0+255),w,b
  7536  004040  0B0F               	andlw	15
  7537  004042  5E04               	subwf	??_buffer_putch,f,c
  7538  004044  0E00               	movlw	0
  7539  004046  5A05               	subwfb	??_buffer_putch+1,f,c
  7540  004048  BE05               	btfsc	??_buffer_putch+1,7,c
  7541  00404A  D017               	goto	l450
  7542  00404C  5005               	movf	??_buffer_putch+1,w,c
  7543  00404E  E102               	bnz	l3971
  7544  004050  0404               	decf	??_buffer_putch,w,c
  7545  004052  E313               	bnc	l450
  7546  004054                     l3971:
  7547                           
  7548                           ; BSR set to: 0
  7549                           ;buffer.c: 25: }
  7550                           ;buffer.c: 26: buffer.x[buffer.n] = ch;
  7551  004054  39DD               	swapf	(_buffer+16)& (0+255),w,b
  7552  004056  0B0F               	andlw	15
  7553  004058  6E04               	movwf	??_buffer_putch& (0+255),c
  7554  00405A  5004               	movf	??_buffer_putch,w,c
  7555  00405C  0FCD               	addlw	low _buffer
  7556  00405E  6ED9               	movwf	fsr2l,c
  7557  004060  6ADA               	clrf	fsr2h,c
  7558  004062  C006  FFDF         	movff	buffer_putch@ch,indf2
  7559                           
  7560                           ; BSR set to: 0
  7561                           ;buffer.c: 27: buffer.n++;
  7562  004066  39DD               	swapf	(_buffer+16)& (0+255),w,b
  7563  004068  0B0F               	andlw	15
  7564  00406A  6E04               	movwf	??_buffer_putch& (0+255),c
  7565  00406C  2A04               	incf	??_buffer_putch,f,c
  7566  00406E  3A04               	swapf	??_buffer_putch& (0+255),f,c
  7567  004070  51DD               	movf	(_buffer+16)& (0+255),w,b
  7568  004072  1804               	xorwf	??_buffer_putch& (0+255),w,c
  7569  004074  0B0F               	andlw	-241
  7570  004076  1804               	xorwf	??_buffer_putch& (0+255),w,c
  7571  004078  6FDD               	movwf	(_buffer+16)& (0+255),b
  7572  00407A                     l450:
  7573                           
  7574                           ; BSR set to: 0
  7575  00407A  0012               	return		;funcret
  7576  00407C                     __end_of_buffer_putch:
  7577                           	opt stack 0
  7578                           tblptru	equ	0xFF8
  7579                           tblptrh	equ	0xFF7
  7580                           tblptrl	equ	0xFF6
  7581                           tablat	equ	0xFF5
  7582                           prodh	equ	0xFF4
  7583                           prodl	equ	0xFF3
  7584                           intcon	equ	0xFF2
  7585                           intcon2	equ	0xFF1
  7586                           postinc0	equ	0xFEE
  7587                           wreg	equ	0xFE8
  7588                           postdec1	equ	0xFE5
  7589                           fsr1l	equ	0xFE1
  7590                           indf2	equ	0xFDF
  7591                           postinc2	equ	0xFDE
  7592                           postdec2	equ	0xFDD
  7593                           fsr2h	equ	0xFDA
  7594                           fsr2l	equ	0xFD9
  7595                           status	equ	0xFD8
  7596                           
  7597 ;; *************** function ___lwmod *****************
  7598 ;; Defined at:
  7599 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  7600 ;; Parameters:    Size  Location     Type
  7601 ;;  dividend        2    3[COMRAM] unsigned int 
  7602 ;;  divisor         2    5[COMRAM] unsigned int 
  7603 ;; Auto vars:     Size  Location     Type
  7604 ;;  counter         1    7[COMRAM] unsigned char 
  7605 ;; Return value:  Size  Location     Type
  7606 ;;                  2    3[COMRAM] unsigned int 
  7607 ;; Registers used:
  7608 ;;		wreg, status,2, status,0
  7609 ;; Tracked objects:
  7610 ;;		On entry : 0/0
  7611 ;;		On exit  : 0/0
  7612 ;;		Unchanged: 0/0
  7613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7614 ;;      Params:         4       0       0       0       0       0       0       0       0
  7615 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7616 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7617 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7618 ;;Total ram usage:        5 bytes
  7619 ;; Hardware stack levels used:    1
  7620 ;; Hardware stack levels required when called:    1
  7621 ;; This function calls:
  7622 ;;		Nothing
  7623 ;; This function is called by:
  7624 ;;		_print_reading
  7625 ;;		_format_number
  7626 ;; This function uses a non-reentrant model
  7627 ;;
  7628                           
  7629                           	psect	text42
  7630  0040C0                     __ptext42:
  7631                           	opt stack 0
  7632  0040C0                     ___lwmod:
  7633                           	opt stack 26
  7634                           
  7635                           ; BSR set to: 0
  7636                           ;incstack = 0
  7637  0040C0  5006               	movf	___lwmod@divisor,w,c
  7638  0040C2  1007               	iorwf	___lwmod@divisor+1,w,c
  7639  0040C4  E017               	bz	l1112
  7640  0040C6  0E01               	movlw	1
  7641  0040C8  6E08               	movwf	___lwmod@counter,c
  7642  0040CA  D004               	goto	l4027
  7643  0040CC                     l4025:
  7644  0040CC  90D8               	bcf	status,0,c
  7645  0040CE  3606               	rlcf	___lwmod@divisor,f,c
  7646  0040D0  3607               	rlcf	___lwmod@divisor+1,f,c
  7647  0040D2  2A08               	incf	___lwmod@counter,f,c
  7648  0040D4                     l4027:
  7649  0040D4  AE07               	btfss	___lwmod@divisor+1,7,c
  7650  0040D6  D7FA               	goto	l4025
  7651  0040D8                     l4029:
  7652  0040D8  5006               	movf	___lwmod@divisor,w,c
  7653  0040DA  5C04               	subwf	___lwmod@dividend,w,c
  7654  0040DC  5007               	movf	___lwmod@divisor+1,w,c
  7655  0040DE  5805               	subwfb	___lwmod@dividend+1,w,c
  7656  0040E0  E304               	bnc	l4033
  7657  0040E2  5006               	movf	___lwmod@divisor,w,c
  7658  0040E4  5E04               	subwf	___lwmod@dividend,f,c
  7659  0040E6  5007               	movf	___lwmod@divisor+1,w,c
  7660  0040E8  5A05               	subwfb	___lwmod@dividend+1,f,c
  7661  0040EA                     l4033:
  7662  0040EA  90D8               	bcf	status,0,c
  7663  0040EC  3207               	rrcf	___lwmod@divisor+1,f,c
  7664  0040EE  3206               	rrcf	___lwmod@divisor,f,c
  7665  0040F0  2E08               	decfsz	___lwmod@counter,f,c
  7666  0040F2  D7F2               	goto	l4029
  7667  0040F4                     l1112:
  7668  0040F4  C004  F004         	movff	___lwmod@dividend,?___lwmod
  7669  0040F8  C005  F005         	movff	___lwmod@dividend+1,?___lwmod+1
  7670  0040FC  0012               	return		;funcret
  7671  0040FE                     __end_of___lwmod:
  7672                           	opt stack 0
  7673                           tblptru	equ	0xFF8
  7674                           tblptrh	equ	0xFF7
  7675                           tblptrl	equ	0xFF6
  7676                           tablat	equ	0xFF5
  7677                           prodh	equ	0xFF4
  7678                           prodl	equ	0xFF3
  7679                           intcon	equ	0xFF2
  7680                           intcon2	equ	0xFF1
  7681                           postinc0	equ	0xFEE
  7682                           wreg	equ	0xFE8
  7683                           postdec1	equ	0xFE5
  7684                           fsr1l	equ	0xFE1
  7685                           indf2	equ	0xFDF
  7686                           postinc2	equ	0xFDE
  7687                           postdec2	equ	0xFDD
  7688                           fsr2h	equ	0xFDA
  7689                           fsr2l	equ	0xFD9
  7690                           status	equ	0xFD8
  7691                           
  7692 ;; *************** function ___lwdiv *****************
  7693 ;; Defined at:
  7694 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  7695 ;; Parameters:    Size  Location     Type
  7696 ;;  dividend        2    3[COMRAM] unsigned int 
  7697 ;;  divisor         2    5[COMRAM] unsigned int 
  7698 ;; Auto vars:     Size  Location     Type
  7699 ;;  quotient        2    8[COMRAM] unsigned int 
  7700 ;;  counter         1    7[COMRAM] unsigned char 
  7701 ;; Return value:  Size  Location     Type
  7702 ;;                  2    3[COMRAM] unsigned int 
  7703 ;; Registers used:
  7704 ;;		wreg, status,2, status,0
  7705 ;; Tracked objects:
  7706 ;;		On entry : 0/0
  7707 ;;		On exit  : 0/0
  7708 ;;		Unchanged: 0/0
  7709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7710 ;;      Params:         4       0       0       0       0       0       0       0       0
  7711 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7712 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7713 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7714 ;;Total ram usage:        7 bytes
  7715 ;; Hardware stack levels used:    1
  7716 ;; Hardware stack levels required when called:    1
  7717 ;; This function calls:
  7718 ;;		Nothing
  7719 ;; This function is called by:
  7720 ;;		_print_reading
  7721 ;;		_format_number
  7722 ;; This function uses a non-reentrant model
  7723 ;;
  7724                           
  7725                           	psect	text43
  7726  003FA2                     __ptext43:
  7727                           	opt stack 0
  7728  003FA2                     ___lwdiv:
  7729                           	opt stack 26
  7730                           
  7731                           ;incstack = 0
  7732  003FA2  6A09               	clrf	___lwdiv@quotient,c
  7733  003FA4  6A0A               	clrf	___lwdiv@quotient+1,c
  7734  003FA6  5006               	movf	___lwdiv@divisor,w,c
  7735  003FA8  1007               	iorwf	___lwdiv@divisor+1,w,c
  7736  003FAA  E01B               	bz	l1102
  7737  003FAC  0E01               	movlw	1
  7738  003FAE  6E08               	movwf	___lwdiv@counter,c
  7739  003FB0  D004               	goto	l4007
  7740  003FB2                     l4005:
  7741  003FB2  90D8               	bcf	status,0,c
  7742  003FB4  3606               	rlcf	___lwdiv@divisor,f,c
  7743  003FB6  3607               	rlcf	___lwdiv@divisor+1,f,c
  7744  003FB8  2A08               	incf	___lwdiv@counter,f,c
  7745  003FBA                     l4007:
  7746  003FBA  AE07               	btfss	___lwdiv@divisor+1,7,c
  7747  003FBC  D7FA               	goto	l4005
  7748  003FBE                     l4009:
  7749  003FBE  90D8               	bcf	status,0,c
  7750  003FC0  3609               	rlcf	___lwdiv@quotient,f,c
  7751  003FC2  360A               	rlcf	___lwdiv@quotient+1,f,c
  7752  003FC4  5006               	movf	___lwdiv@divisor,w,c
  7753  003FC6  5C04               	subwf	___lwdiv@dividend,w,c
  7754  003FC8  5007               	movf	___lwdiv@divisor+1,w,c
  7755  003FCA  5805               	subwfb	___lwdiv@dividend+1,w,c
  7756  003FCC  E305               	bnc	l4017
  7757  003FCE  5006               	movf	___lwdiv@divisor,w,c
  7758  003FD0  5E04               	subwf	___lwdiv@dividend,f,c
  7759  003FD2  5007               	movf	___lwdiv@divisor+1,w,c
  7760  003FD4  5A05               	subwfb	___lwdiv@dividend+1,f,c
  7761  003FD6  8009               	bsf	___lwdiv@quotient,0,c
  7762  003FD8                     l4017:
  7763  003FD8  90D8               	bcf	status,0,c
  7764  003FDA  3207               	rrcf	___lwdiv@divisor+1,f,c
  7765  003FDC  3206               	rrcf	___lwdiv@divisor,f,c
  7766  003FDE  2E08               	decfsz	___lwdiv@counter,f,c
  7767  003FE0  D7EE               	goto	l4009
  7768  003FE2                     l1102:
  7769  003FE2  C009  F004         	movff	___lwdiv@quotient,?___lwdiv
  7770  003FE6  C00A  F005         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7771  003FEA  0012               	return		;funcret
  7772  003FEC                     __end_of___lwdiv:
  7773                           	opt stack 0
  7774                           tblptru	equ	0xFF8
  7775                           tblptrh	equ	0xFF7
  7776                           tblptrl	equ	0xFF6
  7777                           tablat	equ	0xFF5
  7778                           prodh	equ	0xFF4
  7779                           prodl	equ	0xFF3
  7780                           intcon	equ	0xFF2
  7781                           intcon2	equ	0xFF1
  7782                           postinc0	equ	0xFEE
  7783                           wreg	equ	0xFE8
  7784                           postdec1	equ	0xFE5
  7785                           fsr1l	equ	0xFE1
  7786                           indf2	equ	0xFDF
  7787                           postinc2	equ	0xFDE
  7788                           postdec2	equ	0xFDD
  7789                           fsr2h	equ	0xFDA
  7790                           fsr2l	equ	0xFD9
  7791                           status	equ	0xFD8
  7792                           
  7793 ;; *************** function _lcd_clear *****************
  7794 ;; Defined at:
  7795 ;;		line 309 in file "../../../lib/lcd44780.c"
  7796 ;; Parameters:    Size  Location     Type
  7797 ;;		None
  7798 ;; Auto vars:     Size  Location     Type
  7799 ;;		None
  7800 ;; Return value:  Size  Location     Type
  7801 ;;		None               void
  7802 ;; Registers used:
  7803 ;;		wreg, status,2, status,0, cstack
  7804 ;; Tracked objects:
  7805 ;;		On entry : 0/0
  7806 ;;		On exit  : 0/0
  7807 ;;		Unchanged: 0/0
  7808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7809 ;;      Params:         0       0       0       0       0       0       0       0       0
  7810 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7811 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7812 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7813 ;;Total ram usage:        1 bytes
  7814 ;; Hardware stack levels used:    1
  7815 ;; Hardware stack levels required when called:    4
  7816 ;; This function calls:
  7817 ;;		_lcd_command
  7818 ;; This function is called by:
  7819 ;;		_calibrate
  7820 ;;		_main
  7821 ;; This function uses a non-reentrant model
  7822 ;;
  7823                           
  7824                           	psect	text44
  7825  0043D2                     __ptext44:
  7826                           	opt stack 0
  7827  0043D2                     _lcd_clear:
  7828                           	opt stack 26
  7829                           
  7830                           ;lcd44780.c: 310: lcd_command(0x01);
  7831                           
  7832                           ;incstack = 0
  7833  0043D2  0E01               	movlw	1
  7834  0043D4  ECFE  F021         	call	_lcd_command
  7835                           
  7836                           ;lcd44780.c: 311: _delay((unsigned long)((2)*(20000000/4000.0)));
  7837  0043D8  0E0D               	movlw	13
  7838  0043DA  6E08               	movwf	??_lcd_clear& (0+255),c
  7839  0043DC  0EFC               	movlw	252
  7840  0043DE                     u3907:
  7841  0043DE  2EE8               	decfsz	wreg,f,c
  7842  0043E0  D7FE               	goto	u3907
  7843  0043E2  2E08               	decfsz	??_lcd_clear& (0+255),f,c
  7844  0043E4  D7FC               	goto	u3907
  7845  0043E6  0012               	return		;funcret
  7846  0043E8                     __end_of_lcd_clear:
  7847                           	opt stack 0
  7848                           tblptru	equ	0xFF8
  7849                           tblptrh	equ	0xFF7
  7850                           tblptrl	equ	0xFF6
  7851                           tablat	equ	0xFF5
  7852                           prodh	equ	0xFF4
  7853                           prodl	equ	0xFF3
  7854                           intcon	equ	0xFF2
  7855                           intcon2	equ	0xFF1
  7856                           postinc0	equ	0xFEE
  7857                           wreg	equ	0xFE8
  7858                           postdec1	equ	0xFE5
  7859                           fsr1l	equ	0xFE1
  7860                           indf2	equ	0xFDF
  7861                           postinc2	equ	0xFDE
  7862                           postdec2	equ	0xFDD
  7863                           fsr2h	equ	0xFDA
  7864                           fsr2l	equ	0xFD9
  7865                           status	equ	0xFD8
  7866                           
  7867 ;; *************** function _lcd_command *****************
  7868 ;; Defined at:
  7869 ;;		line 149 in file "../../../lib/lcd44780.c"
  7870 ;; Parameters:    Size  Location     Type
  7871 ;;  value           1    wreg     unsigned char 
  7872 ;; Auto vars:     Size  Location     Type
  7873 ;;  value           1    6[COMRAM] unsigned char 
  7874 ;; Return value:  Size  Location     Type
  7875 ;;		None               void
  7876 ;; Registers used:
  7877 ;;		wreg, status,2, status,0, cstack
  7878 ;; Tracked objects:
  7879 ;;		On entry : 0/0
  7880 ;;		On exit  : 0/0
  7881 ;;		Unchanged: 0/0
  7882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7883 ;;      Params:         0       0       0       0       0       0       0       0       0
  7884 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7885 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7886 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7887 ;;Total ram usage:        1 bytes
  7888 ;; Hardware stack levels used:    1
  7889 ;; Hardware stack levels required when called:    3
  7890 ;; This function calls:
  7891 ;;		_lcd_send
  7892 ;; This function is called by:
  7893 ;;		_lcd_gotoxy
  7894 ;;		_lcd_clear
  7895 ;;		_lcd_begin
  7896 ;; This function uses a non-reentrant model
  7897 ;;
  7898                           
  7899                           	psect	text45
  7900  0043FC                     __ptext45:
  7901                           	opt stack 0
  7902  0043FC                     _lcd_command:
  7903                           	opt stack 24
  7904                           
  7905                           ;incstack = 0
  7906                           ;lcd_command@value stored from wreg
  7907  0043FC  6E07               	movwf	lcd_command@value,c
  7908                           
  7909                           ;lcd44780.c: 150: lcd_send(value, 0);
  7910  0043FE  0E00               	movlw	0
  7911  004400  6E05               	movwf	lcd_send@mode,c
  7912  004402  5007               	movf	lcd_command@value,w,c
  7913  004404  ECDB  F021         	call	_lcd_send
  7914  004408  0012               	return		;funcret
  7915  00440A                     __end_of_lcd_command:
  7916                           	opt stack 0
  7917                           tblptru	equ	0xFF8
  7918                           tblptrh	equ	0xFF7
  7919                           tblptrl	equ	0xFF6
  7920                           tablat	equ	0xFF5
  7921                           prodh	equ	0xFF4
  7922                           prodl	equ	0xFF3
  7923                           intcon	equ	0xFF2
  7924                           intcon2	equ	0xFF1
  7925                           postinc0	equ	0xFEE
  7926                           wreg	equ	0xFE8
  7927                           postdec1	equ	0xFE5
  7928                           fsr1l	equ	0xFE1
  7929                           indf2	equ	0xFDF
  7930                           postinc2	equ	0xFDE
  7931                           postdec2	equ	0xFDD
  7932                           fsr2h	equ	0xFDA
  7933                           fsr2l	equ	0xFD9
  7934                           status	equ	0xFD8
  7935                           
  7936 ;; *************** function _lcd_send *****************
  7937 ;; Defined at:
  7938 ;;		line 125 in file "../../../lib/lcd44780.c"
  7939 ;; Parameters:    Size  Location     Type
  7940 ;;  value           1    wreg     unsigned char 
  7941 ;;  mode            1    4[COMRAM] unsigned char 
  7942 ;; Auto vars:     Size  Location     Type
  7943 ;;  value           1    5[COMRAM] unsigned char 
  7944 ;; Return value:  Size  Location     Type
  7945 ;;		None               void
  7946 ;; Registers used:
  7947 ;;		wreg, status,2, status,0, cstack
  7948 ;; Tracked objects:
  7949 ;;		On entry : 0/0
  7950 ;;		On exit  : 0/0
  7951 ;;		Unchanged: 0/0
  7952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7953 ;;      Params:         1       0       0       0       0       0       0       0       0
  7954 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7955 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7956 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7957 ;;Total ram usage:        2 bytes
  7958 ;; Hardware stack levels used:    1
  7959 ;; Hardware stack levels required when called:    2
  7960 ;; This function calls:
  7961 ;;		_lcd_write4bits
  7962 ;; This function is called by:
  7963 ;;		_output_putch
  7964 ;;		_calibrate
  7965 ;;		_lcd_command
  7966 ;;		_lcd_puts
  7967 ;; This function uses a non-reentrant model
  7968 ;;
  7969                           
  7970                           	psect	text46
  7971  0043B6                     __ptext46:
  7972                           	opt stack 0
  7973  0043B6                     _lcd_send:
  7974                           	opt stack 25
  7975                           
  7976                           ;incstack = 0
  7977                           ;lcd_send@value stored from wreg
  7978  0043B6  6E06               	movwf	lcd_send@value,c
  7979                           
  7980                           ;lcd44780.c: 126: if(mode) {
  7981  0043B8  5005               	movf	lcd_send@mode,w,c
  7982  0043BA  E002               	bz	l3825
  7983                           
  7984                           ;lcd44780.c: 127: LATB |= 0b0100;
  7985  0043BC  848A               	bsf	3978,2,c	;volatile
  7986                           
  7987                           ;lcd44780.c: 128: } else {
  7988  0043BE  D001               	goto	l3827
  7989  0043C0                     l3825:
  7990                           
  7991                           ;lcd44780.c: 129: LATB &= ~0b0100;
  7992  0043C0  948A               	bcf	3978,2,c	;volatile
  7993  0043C2                     l3827:
  7994                           
  7995                           ;lcd44780.c: 130: }
  7996                           ;lcd44780.c: 137: {
  7997                           ;lcd44780.c: 138: lcd_write4bits(value >> 4);
  7998  0043C2  3806               	swapf	lcd_send@value,w,c
  7999  0043C4  0B0F               	andlw	15
  8000  0043C6  EC9A  F021         	call	_lcd_write4bits
  8001                           
  8002                           ;lcd44780.c: 139: lcd_write4bits(value);
  8003  0043CA  5006               	movf	lcd_send@value,w,c
  8004  0043CC  EC9A  F021         	call	_lcd_write4bits
  8005  0043D0  0012               	return		;funcret
  8006  0043D2                     __end_of_lcd_send:
  8007                           	opt stack 0
  8008                           tblptru	equ	0xFF8
  8009                           tblptrh	equ	0xFF7
  8010                           tblptrl	equ	0xFF6
  8011                           tablat	equ	0xFF5
  8012                           prodh	equ	0xFF4
  8013                           prodl	equ	0xFF3
  8014                           intcon	equ	0xFF2
  8015                           intcon2	equ	0xFF1
  8016                           postinc0	equ	0xFEE
  8017                           wreg	equ	0xFE8
  8018                           postdec1	equ	0xFE5
  8019                           fsr1l	equ	0xFE1
  8020                           indf2	equ	0xFDF
  8021                           postinc2	equ	0xFDE
  8022                           postdec2	equ	0xFDD
  8023                           fsr2h	equ	0xFDA
  8024                           fsr2l	equ	0xFD9
  8025                           status	equ	0xFD8
  8026                           
  8027 ;; *************** function _lcd_write4bits *****************
  8028 ;; Defined at:
  8029 ;;		line 56 in file "../../../lib/lcd44780.c"
  8030 ;; Parameters:    Size  Location     Type
  8031 ;;  value           1    wreg     unsigned char 
  8032 ;; Auto vars:     Size  Location     Type
  8033 ;;  value           1    3[COMRAM] unsigned char 
  8034 ;; Return value:  Size  Location     Type
  8035 ;;		None               void
  8036 ;; Registers used:
  8037 ;;		wreg, status,2, status,0
  8038 ;; Tracked objects:
  8039 ;;		On entry : 0/0
  8040 ;;		On exit  : 0/0
  8041 ;;		Unchanged: 0/0
  8042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8043 ;;      Params:         0       0       0       0       0       0       0       0       0
  8044 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8045 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8046 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8047 ;;Total ram usage:        1 bytes
  8048 ;; Hardware stack levels used:    1
  8049 ;; Hardware stack levels required when called:    1
  8050 ;; This function calls:
  8051 ;;		Nothing
  8052 ;; This function is called by:
  8053 ;;		_lcd_send
  8054 ;;		_lcd_begin
  8055 ;; This function uses a non-reentrant model
  8056 ;;
  8057                           
  8058                           	psect	text47
  8059  004334                     __ptext47:
  8060                           	opt stack 0
  8061  004334                     _lcd_write4bits:
  8062                           	opt stack 25
  8063                           
  8064                           ;incstack = 0
  8065                           ;lcd_write4bits@value stored from wreg
  8066  004334  6E04               	movwf	lcd_write4bits@value,c
  8067                           
  8068                           ;lcd44780.c: 61: LATB &= 0b00001111;
  8069  004336  0E0F               	movlw	15
  8070  004338  168A               	andwf	3978,f,c	;volatile
  8071                           
  8072                           ;lcd44780.c: 62: LATB |= value << 4;
  8073  00433A  3804               	swapf	lcd_write4bits@value,w,c
  8074  00433C  0BF0               	andlw	240
  8075  00433E  128A               	iorwf	3978,f,c	;volatile
  8076                           
  8077                           ;lcd44780.c: 77: LATB |= 0b1000; _delay((unsigned long)((4)*(20000000/4000000.0))); LATB
      +                           &= ~0b1000; _delay((unsigned long)((100)*(20000000/4000000.0)));;
  8078  004340  868A               	bsf	3978,3,c	;volatile
  8079  004342  0E06               	movlw	6
  8080  004344                     u3917:
  8081  004344  2EE8               	decfsz	wreg,f,c
  8082  004346  D7FE               	goto	u3917
  8083  004348  D000               	nop2		;nop
  8084  00434A  968A               	bcf	3978,3,c	;volatile
  8085  00434C  0EA6               	movlw	166
  8086  00434E                     u3927:
  8087  00434E  2EE8               	decfsz	wreg,f,c
  8088  004350  D7FE               	goto	u3927
  8089  004352  D000               	nop2		;nop
  8090  004354  0012               	return		;funcret
  8091  004356                     __end_of_lcd_write4bits:
  8092                           	opt stack 0
  8093                           tblptru	equ	0xFF8
  8094                           tblptrh	equ	0xFF7
  8095                           tblptrl	equ	0xFF6
  8096                           tablat	equ	0xFF5
  8097                           prodh	equ	0xFF4
  8098                           prodl	equ	0xFF3
  8099                           intcon	equ	0xFF2
  8100                           intcon2	equ	0xFF1
  8101                           postinc0	equ	0xFEE
  8102                           wreg	equ	0xFE8
  8103                           postdec1	equ	0xFE5
  8104                           fsr1l	equ	0xFE1
  8105                           indf2	equ	0xFDF
  8106                           postinc2	equ	0xFDE
  8107                           postdec2	equ	0xFDD
  8108                           fsr2h	equ	0xFDA
  8109                           fsr2l	equ	0xFD9
  8110                           status	equ	0xFD8
  8111                           
  8112 ;; *************** function _delay10ms *****************
  8113 ;; Defined at:
  8114 ;;		line 54 in file "../../../LC-meter.c"
  8115 ;; Parameters:    Size  Location     Type
  8116 ;;  period_10ms     1    wreg     unsigned char 
  8117 ;; Auto vars:     Size  Location     Type
  8118 ;;  period_10ms     1    0[COMRAM] unsigned char 
  8119 ;; Return value:  Size  Location     Type
  8120 ;;		None               void
  8121 ;; Registers used:
  8122 ;;		wreg
  8123 ;; Tracked objects:
  8124 ;;		On entry : 0/0
  8125 ;;		On exit  : 0/0
  8126 ;;		Unchanged: 0/0
  8127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8128 ;;      Params:         0       0       0       0       0       0       0       0       0
  8129 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8130 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8131 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8132 ;;Total ram usage:        0 bytes
  8133 ;; Hardware stack levels used:    1
  8134 ;; Hardware stack levels required when called:    1
  8135 ;; This function calls:
  8136 ;;		Nothing
  8137 ;; This function is called by:
  8138 ;;		_calibrate
  8139 ;;		_main
  8140 ;; This function uses a non-reentrant model
  8141 ;;
  8142                           
  8143                           	psect	text48
  8144  00440E                     __ptext48:
  8145                           	opt stack 0
  8146  00440E                     _delay10ms:
  8147                           	opt stack 29
  8148                           
  8149                           ;incstack = 0
  8150  00440E  0012               	return		;funcret
  8151  004410                     __end_of_delay10ms:
  8152                           	opt stack 0
  8153                           tblptru	equ	0xFF8
  8154                           tblptrh	equ	0xFF7
  8155                           tblptrl	equ	0xFF6
  8156                           tablat	equ	0xFF5
  8157                           prodh	equ	0xFF4
  8158                           prodl	equ	0xFF3
  8159                           intcon	equ	0xFF2
  8160                           intcon2	equ	0xFF1
  8161                           postinc0	equ	0xFEE
  8162                           wreg	equ	0xFE8
  8163                           postdec1	equ	0xFE5
  8164                           fsr1l	equ	0xFE1
  8165                           indf2	equ	0xFDF
  8166                           postinc2	equ	0xFDE
  8167                           postdec2	equ	0xFDD
  8168                           fsr2h	equ	0xFDA
  8169                           fsr2l	equ	0xFD9
  8170                           status	equ	0xFD8
  8171                           
  8172 ;; *************** function ___lwtofl *****************
  8173 ;; Defined at:
  8174 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtofl.c"
  8175 ;; Parameters:    Size  Location     Type
  8176 ;;  c               2   58[COMRAM] unsigned int 
  8177 ;; Auto vars:     Size  Location     Type
  8178 ;;		None
  8179 ;; Return value:  Size  Location     Type
  8180 ;;                  4   58[COMRAM] unsigned int 
  8181 ;; Registers used:
  8182 ;;		wreg, status,2, status,0, cstack
  8183 ;; Tracked objects:
  8184 ;;		On entry : 0/0
  8185 ;;		On exit  : 0/0
  8186 ;;		Unchanged: 0/0
  8187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8188 ;;      Params:         4       0       0       0       0       0       0       0       0
  8189 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8190 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8191 ;;      Totals:         4       0       0       0       0       0       0       0       0
  8192 ;;Total ram usage:        4 bytes
  8193 ;; Hardware stack levels used:    1
  8194 ;; Hardware stack levels required when called:    2
  8195 ;; This function calls:
  8196 ;;		___flpack
  8197 ;; This function is called by:
  8198 ;;		_calibrate
  8199 ;;		_measure_capacitance
  8200 ;;		_measure_inductance
  8201 ;; This function uses a non-reentrant model
  8202 ;;
  8203                           
  8204                           	psect	text49
  8205  0042BC                     __ptext49:
  8206                           	opt stack 0
  8207  0042BC                     ___lwtofl:
  8208                           	opt stack 27
  8209                           
  8210                           ;incstack = 0
  8211  0042BC  C03B  F004         	movff	___lwtofl@c,___flpack@arg
  8212  0042C0  C03C  F005         	movff	___lwtofl@c+1,___flpack@arg+1
  8213  0042C4  6A06               	clrf	___flpack@arg+2,c
  8214  0042C6  6A07               	clrf	___flpack@arg+3,c
  8215  0042C8  0E96               	movlw	150
  8216  0042CA  6E08               	movwf	___flpack@exp,c
  8217  0042CC  0E00               	movlw	0
  8218  0042CE  6E09               	movwf	___flpack@sign,c
  8219  0042D0  EC89  F01C         	call	___flpack	;wreg free
  8220  0042D4  C004  F03B         	movff	?___flpack,?___lwtofl
  8221  0042D8  C005  F03C         	movff	?___flpack+1,?___lwtofl+1
  8222  0042DC  C006  F03D         	movff	?___flpack+2,?___lwtofl+2
  8223  0042E0  C007  F03E         	movff	?___flpack+3,?___lwtofl+3
  8224  0042E4  0012               	return		;funcret
  8225  0042E6                     __end_of___lwtofl:
  8226                           	opt stack 0
  8227                           tblptru	equ	0xFF8
  8228                           tblptrh	equ	0xFF7
  8229                           tblptrl	equ	0xFF6
  8230                           tablat	equ	0xFF5
  8231                           prodh	equ	0xFF4
  8232                           prodl	equ	0xFF3
  8233                           intcon	equ	0xFF2
  8234                           intcon2	equ	0xFF1
  8235                           postinc0	equ	0xFEE
  8236                           wreg	equ	0xFE8
  8237                           postdec1	equ	0xFE5
  8238                           fsr1l	equ	0xFE1
  8239                           indf2	equ	0xFDF
  8240                           postinc2	equ	0xFDE
  8241                           postdec2	equ	0xFDD
  8242                           fsr2h	equ	0xFDA
  8243                           fsr2l	equ	0xFD9
  8244                           status	equ	0xFD8
  8245                           
  8246 ;; *************** function ___flpack *****************
  8247 ;; Defined at:
  8248 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\double.c"
  8249 ;; Parameters:    Size  Location     Type
  8250 ;;  arg             4    3[COMRAM] unsigned long 
  8251 ;;  exp             1    7[COMRAM] unsigned char 
  8252 ;;  sign            1    8[COMRAM] unsigned char 
  8253 ;; Auto vars:     Size  Location     Type
  8254 ;;		None
  8255 ;; Return value:  Size  Location     Type
  8256 ;;                  4    3[COMRAM] unsigned char 
  8257 ;; Registers used:
  8258 ;;		wreg, status,2, status,0
  8259 ;; Tracked objects:
  8260 ;;		On entry : 0/0
  8261 ;;		On exit  : 0/0
  8262 ;;		Unchanged: 0/0
  8263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8264 ;;      Params:         6       0       0       0       0       0       0       0       0
  8265 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8266 ;;      Temps:          4       0       0       0       0       0       0       0       0
  8267 ;;      Totals:        10       0       0       0       0       0       0       0       0
  8268 ;;Total ram usage:       10 bytes
  8269 ;; Hardware stack levels used:    1
  8270 ;; Hardware stack levels required when called:    1
  8271 ;; This function calls:
  8272 ;;		Nothing
  8273 ;; This function is called by:
  8274 ;;		___altofl
  8275 ;;		___awtofl
  8276 ;;		___fladd
  8277 ;;		___fldiv
  8278 ;;		___flmul
  8279 ;;		___lltofl
  8280 ;;		___lwtofl
  8281 ;; This function uses a non-reentrant model
  8282 ;;
  8283                           
  8284                           	psect	text50
  8285  003912                     __ptext50:
  8286                           	opt stack 0
  8287  003912                     ___flpack:
  8288                           	opt stack 27
  8289                           
  8290                           ;incstack = 0
  8291  003912  5008               	movf	___flpack@exp,w,c
  8292  003914  E005               	bz	l776
  8293  003916  5004               	movf	___flpack@arg,w,c
  8294  003918  1005               	iorwf	___flpack@arg+1,w,c
  8295  00391A  1006               	iorwf	___flpack@arg+2,w,c
  8296  00391C  1007               	iorwf	___flpack@arg+3,w,c
  8297  00391E  E10B               	bnz	l3599
  8298  003920                     l776:
  8299  003920  6A04               	clrf	?___flpack,c
  8300  003922  6A05               	clrf	?___flpack+1,c
  8301  003924  6A06               	clrf	?___flpack+2,c
  8302  003926  6A07               	clrf	?___flpack+3,c
  8303  003928  D056               	goto	l777
  8304  00392A                     l3597:
  8305  00392A  2A08               	incf	___flpack@exp,f,c
  8306  00392C  90D8               	bcf	status,0,c
  8307  00392E  3207               	rrcf	___flpack@arg+3,f,c
  8308  003930  3206               	rrcf	___flpack@arg+2,f,c
  8309  003932  3205               	rrcf	___flpack@arg+1,f,c
  8310  003934  3204               	rrcf	___flpack@arg,f,c
  8311  003936                     l3599:
  8312  003936  6A0A               	clrf	??___flpack& (0+255),c
  8313  003938  6A0B               	clrf	(??___flpack+1)& (0+255),c
  8314  00393A  6A0C               	clrf	(??___flpack+2)& (0+255),c
  8315  00393C  0EFE               	movlw	254
  8316  00393E  1407               	andwf	___flpack@arg+3,w,c
  8317  003940  6E0D               	movwf	(??___flpack+3)& (0+255),c
  8318  003942  500A               	movf	??___flpack,w,c
  8319  003944  100B               	iorwf	??___flpack+1,w,c
  8320  003946  100C               	iorwf	??___flpack+2,w,c
  8321  003948  100D               	iorwf	??___flpack+3,w,c
  8322  00394A  E00C               	bz	l781
  8323  00394C  D7EE               	goto	l3597
  8324  00394E                     l3601:
  8325  00394E  2A08               	incf	___flpack@exp,f,c
  8326  003950  2A04               	incf	___flpack@arg,f,c
  8327  003952  0E00               	movlw	0
  8328  003954  2205               	addwfc	___flpack@arg+1,f,c
  8329  003956  2206               	addwfc	___flpack@arg+2,f,c
  8330  003958  2207               	addwfc	___flpack@arg+3,f,c
  8331  00395A  90D8               	bcf	status,0,c
  8332  00395C  3207               	rrcf	___flpack@arg+3,f,c
  8333  00395E  3206               	rrcf	___flpack@arg+2,f,c
  8334  003960  3205               	rrcf	___flpack@arg+1,f,c
  8335  003962  3204               	rrcf	___flpack@arg,f,c
  8336  003964                     l781:
  8337  003964  6A0A               	clrf	??___flpack& (0+255),c
  8338  003966  6A0B               	clrf	(??___flpack+1)& (0+255),c
  8339  003968  6A0C               	clrf	(??___flpack+2)& (0+255),c
  8340  00396A  5007               	movf	___flpack@arg+3,w,c
  8341  00396C  6E0D               	movwf	(??___flpack+3)& (0+255),c
  8342  00396E  500A               	movf	??___flpack,w,c
  8343  003970  100B               	iorwf	??___flpack+1,w,c
  8344  003972  100C               	iorwf	??___flpack+2,w,c
  8345  003974  100D               	iorwf	??___flpack+3,w,c
  8346  003976  E007               	bz	l3609
  8347  003978  D7EA               	goto	l3601
  8348  00397A                     l3607:
  8349  00397A  0608               	decf	___flpack@exp,f,c
  8350  00397C  90D8               	bcf	status,0,c
  8351  00397E  3604               	rlcf	___flpack@arg,f,c
  8352  003980  3605               	rlcf	___flpack@arg+1,f,c
  8353  003982  3606               	rlcf	___flpack@arg+2,f,c
  8354  003984  3607               	rlcf	___flpack@arg+3,f,c
  8355  003986                     l3609:
  8356  003986  BE06               	btfsc	___flpack@arg+2,7,c
  8357  003988  D003               	goto	l788
  8358  00398A  0E02               	movlw	2
  8359  00398C  6008               	cpfslt	___flpack@exp,c
  8360  00398E  D7F5               	goto	l3607
  8361  003990                     l788:
  8362  003990  B008               	btfsc	___flpack@exp,0,c
  8363  003992  D002               	goto	l789
  8364  003994  0E7F               	movlw	127
  8365  003996  1606               	andwf	___flpack@arg+2,f,c
  8366  003998                     l789:
  8367  003998  90D8               	bcf	status,0,c
  8368  00399A  3208               	rrcf	___flpack@exp,f,c
  8369  00399C  C008  F00A         	movff	___flpack@exp,??___flpack
  8370  0039A0  6A0B               	clrf	(??___flpack+1)& (0+255),c
  8371  0039A2  6A0C               	clrf	(??___flpack+2)& (0+255),c
  8372  0039A4  6A0D               	clrf	(??___flpack+3)& (0+255),c
  8373  0039A6  C00A  F00D         	movff	??___flpack,??___flpack+3
  8374  0039AA  6A0C               	clrf	??___flpack+2,c
  8375  0039AC  6A0B               	clrf	??___flpack+1,c
  8376  0039AE  6A0A               	clrf	??___flpack,c
  8377  0039B0  500A               	movf	??___flpack,w,c
  8378  0039B2  1204               	iorwf	___flpack@arg,f,c
  8379  0039B4  500B               	movf	??___flpack+1,w,c
  8380  0039B6  1205               	iorwf	___flpack@arg+1,f,c
  8381  0039B8  500C               	movf	??___flpack+2,w,c
  8382  0039BA  1206               	iorwf	___flpack@arg+2,f,c
  8383  0039BC  500D               	movf	??___flpack+3,w,c
  8384  0039BE  1207               	iorwf	___flpack@arg+3,f,c
  8385  0039C0  5009               	movf	___flpack@sign,w,c
  8386  0039C2  A4D8               	btfss	status,2,c
  8387  0039C4  8E07               	bsf	___flpack@arg+3,7,c
  8388  0039C6  C004  F004         	movff	___flpack@arg,?___flpack
  8389  0039CA  C005  F005         	movff	___flpack@arg+1,?___flpack+1
  8390  0039CE  C006  F006         	movff	___flpack@arg+2,?___flpack+2
  8391  0039D2  C007  F007         	movff	___flpack@arg+3,?___flpack+3
  8392  0039D6                     l777:
  8393  0039D6  0012               	return		;funcret
  8394  0039D8                     __end_of___flpack:
  8395                           	opt stack 0
  8396                           tblptru	equ	0xFF8
  8397                           tblptrh	equ	0xFF7
  8398                           tblptrl	equ	0xFF6
  8399                           tablat	equ	0xFF5
  8400                           prodh	equ	0xFF4
  8401                           prodl	equ	0xFF3
  8402                           intcon	equ	0xFF2
  8403                           intcon2	equ	0xFF1
  8404                           postinc0	equ	0xFEE
  8405                           wreg	equ	0xFE8
  8406                           postdec1	equ	0xFE5
  8407                           fsr1l	equ	0xFE1
  8408                           indf2	equ	0xFDF
  8409                           postinc2	equ	0xFDE
  8410                           postdec2	equ	0xFDD
  8411                           fsr2h	equ	0xFDA
  8412                           fsr2l	equ	0xFD9
  8413                           status	equ	0xFD8
  8414                           
  8415 ;; *************** function _global_int *****************
  8416 ;; Defined at:
  8417 ;;		line 76 in file "../../../LC-meter.c"
  8418 ;; Parameters:    Size  Location     Type
  8419 ;;		None
  8420 ;; Auto vars:     Size  Location     Type
  8421 ;;		None
  8422 ;; Return value:  Size  Location     Type
  8423 ;;		None               void
  8424 ;; Registers used:
  8425 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8426 ;; Tracked objects:
  8427 ;;		On entry : 0/0
  8428 ;;		On exit  : 0/0
  8429 ;;		Unchanged: 0/0
  8430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8431 ;;      Params:         0       0       0       0       0       0       0       0       0
  8432 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8433 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8434 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8435 ;;Total ram usage:        3 bytes
  8436 ;; Hardware stack levels used:    1
  8437 ;; This function calls:
  8438 ;;		Nothing
  8439 ;; This function is called by:
  8440 ;;		Interrupt level 2
  8441 ;; This function uses a non-reentrant model
  8442 ;;
  8443                           
  8444                           	psect	intcode
  8445  002008                     __pintcode:
  8446                           	opt stack 0
  8447  002008                     _global_int:
  8448                           	opt stack 23
  8449                           
  8450                           ;incstack = 0
  8451  002008  CFD9 F002          	movff	fsr2l,??_global_int+1
  8452  00200C  CFDA F003          	movff	fsr2h,??_global_int+2
  8453  002010  ED21  F01C         	call	int_func,f	;refresh shadow registers
  8454                           tblptru	equ	0xFF8
  8455                           tblptrh	equ	0xFF7
  8456                           tblptrl	equ	0xFF6
  8457                           tablat	equ	0xFF5
  8458                           prodh	equ	0xFF4
  8459                           prodl	equ	0xFF3
  8460                           intcon	equ	0xFF2
  8461                           intcon2	equ	0xFF1
  8462                           postinc0	equ	0xFEE
  8463                           wreg	equ	0xFE8
  8464                           postdec1	equ	0xFE5
  8465                           fsr1l	equ	0xFE1
  8466                           indf2	equ	0xFDF
  8467                           postinc2	equ	0xFDE
  8468                           postdec2	equ	0xFDD
  8469                           fsr2h	equ	0xFDA
  8470                           fsr2l	equ	0xFD9
  8471                           status	equ	0xFD8
  8472                           
  8473                           	psect	intcode_body
  8474  003842                     __pintcode_body:
  8475                           	opt stack 23
  8476  003842                     int_func:
  8477                           	opt stack 23
  8478  003842  0006               	pop		; remove dummy address from shadow register refresh
  8479                           
  8480                           ;LC-meter.c: 81: if(PIR1 & 0x02) {
  8481  003844  A29E               	btfss	3998,1,c	;volatile
  8482  003846  D03A               	goto	i2l3493
  8483                           
  8484                           ;LC-meter.c: 83: bres += 256;
  8485  003848  0100               	movlb	0	; () banked
  8486  00384A  2BE7               	incf	(_bres+1)& (0+255),f,b	;volatile
  8487                           
  8488                           ;LC-meter.c: 85: if(bres >= 5000) {
  8489  00384C  0E88               	movlw	136
  8490  00384E  5DE6               	subwf	_bres& (0+255),w,b	;volatile
  8491  003850  0E13               	movlw	19
  8492  003852  59E7               	subwfb	(_bres+1)& (0+255),w,b	;volatile
  8493  003854  E332               	bnc	i2l3491
  8494                           
  8495                           ; BSR set to: 0
  8496                           ;LC-meter.c: 86: bres -= 5000;
  8497  003856  0E88               	movlw	136
  8498  003858  5FE6               	subwf	_bres& (0+255),f,b	;volatile
  8499  00385A  0E13               	movlw	19
  8500  00385C  5BE7               	subwfb	(_bres+1)& (0+255),f,b	;volatile
  8501                           
  8502                           ; BSR set to: 0
  8503                           ;LC-meter.c: 87: msecpart++;
  8504  00385E  4BE8               	infsnz	_msecpart& (0+255),f,b	;volatile
  8505  003860  2BE9               	incf	(_msecpart+1)& (0+255),f,b	;volatile
  8506                           
  8507                           ; BSR set to: 0
  8508                           ;LC-meter.c: 88: msecs++;
  8509  003862  2BB9               	incf	_msecs& (0+255),f,b	;volatile
  8510  003864  0E00               	movlw	0
  8511  003866  23BA               	addwfc	(_msecs+1)& (0+255),f,b	;volatile
  8512  003868  23BB               	addwfc	(_msecs+2)& (0+255),f,b	;volatile
  8513  00386A  23BC               	addwfc	(_msecs+3)& (0+255),f,b	;volatile
  8514                           
  8515                           ;LC-meter.c: 90: LATC &= ~0b00000010; LATC |= (!!((blink > 200))) << 1;;
  8516  00386C  928B               	bcf	3979,1,c	;volatile
  8517                           
  8518                           ; BSR set to: 0
  8519  00386E  51C6               	movf	(_blink+1)& (0+255),w,b	;volatile
  8520  003870  E103               	bnz	i2u251_41
  8521  003872  0EC9               	movlw	201
  8522  003874  5DC5               	subwf	_blink& (0+255),w,b	;volatile
  8523  003876  E303               	bnc	i2u251_40
  8524  003878                     i2u251_41:
  8525  003878  6A01               	clrf	??_global_int& (0+255),c
  8526  00387A  2A01               	incf	??_global_int& (0+255),f,c
  8527  00387C  D001               	goto	i2u252_48
  8528  00387E                     i2u251_40:
  8529  00387E  6A01               	clrf	??_global_int& (0+255),c
  8530  003880                     i2u252_48:
  8531  003880  90D8               	bcf	status,0,c
  8532  003882  3401               	rlcf	??_global_int,w,c
  8533  003884  128B               	iorwf	3979,f,c	;volatile
  8534                           
  8535                           ;LC-meter.c: 91: if(blink >= 400)
  8536  003886  0E90               	movlw	144
  8537  003888  0100               	movlb	0	; () banked
  8538  00388A  5DC5               	subwf	_blink& (0+255),w,b	;volatile
  8539  00388C  0E01               	movlw	1
  8540  00388E  59C6               	subwfb	(_blink+1)& (0+255),w,b	;volatile
  8541  003890  E304               	bnc	i2l3485
  8542                           
  8543                           ; BSR set to: 0
  8544                           ;LC-meter.c: 92: blink -= 400;
  8545  003892  0E90               	movlw	144
  8546  003894  5FC5               	subwf	_blink& (0+255),f,b	;volatile
  8547  003896  0E01               	movlw	1
  8548  003898  5BC6               	subwfb	(_blink+1)& (0+255),f,b	;volatile
  8549  00389A                     i2l3485:
  8550                           
  8551                           ; BSR set to: 0
  8552                           ;LC-meter.c: 93: ++blink;
  8553  00389A  4BC5               	infsnz	_blink& (0+255),f,b	;volatile
  8554  00389C  2BC6               	incf	(_blink+1)& (0+255),f,b	;volatile
  8555                           
  8556                           ; BSR set to: 0
  8557                           ;LC-meter.c: 96: if(msecpart >= 1000) {
  8558  00389E  0EE8               	movlw	232
  8559  0038A0  5DE8               	subwf	_msecpart& (0+255),w,b	;volatile
  8560  0038A2  0E03               	movlw	3
  8561  0038A4  59E9               	subwfb	(_msecpart+1)& (0+255),w,b	;volatile
  8562  0038A6  E309               	bnc	i2l3491
  8563                           
  8564                           ; BSR set to: 0
  8565                           ;LC-meter.c: 98: seconds++;
  8566  0038A8  2BBD               	incf	_seconds& (0+255),f,b	;volatile
  8567  0038AA  0E00               	movlw	0
  8568  0038AC  23BE               	addwfc	(_seconds+1)& (0+255),f,b	;volatile
  8569  0038AE  23BF               	addwfc	(_seconds+2)& (0+255),f,b	;volatile
  8570  0038B0  23C0               	addwfc	(_seconds+3)& (0+255),f,b	;volatile
  8571                           
  8572                           ;LC-meter.c: 99: msecpart -= 1000;
  8573  0038B2  0EE8               	movlw	232
  8574  0038B4  5FE8               	subwf	_msecpart& (0+255),f,b	;volatile
  8575  0038B6  0E03               	movlw	3
  8576  0038B8  5BE9               	subwfb	(_msecpart+1)& (0+255),f,b	;volatile
  8577  0038BA                     i2l3491:
  8578                           
  8579                           ; BSR set to: 0
  8580                           ;LC-meter.c: 100: }
  8581                           ;LC-meter.c: 101: }
  8582                           ;LC-meter.c: 103: PIR1 &= ~0b10;
  8583  0038BA  929E               	bcf	3998,1,c	;volatile
  8584  0038BC                     i2l3493:
  8585                           
  8586                           ;LC-meter.c: 104: }
  8587                           ;LC-meter.c: 106: if(RCIF) { rxfifo[rxiptr] = RCREG; ser_tmp = (rxiptr + 1) & ((uint8_t)
      +                          16 - 1); if(ser_tmp != rxoptr) rxiptr = ser_tmp; }; if(TXIF && TXIE) { TXREG = txfifo[tx
      +                          optr]; ++txoptr; txoptr &= ((uint8_t)16 - 1); if(txoptr == txiptr) { TXIE = 0; }; TXIF =
      +                           0; 
  8588  0038BC  AA9E               	btfss	3998,5,c	;volatile
  8589  0038BE  D011               	goto	i2l223
  8590  0038C0  0E00               	movlw	low _rxfifo
  8591  0038C2  0100               	movlb	0	; () banked
  8592  0038C4  25CA               	addwf	_rxiptr& (0+255),w,b	;volatile
  8593  0038C6  6ED9               	movwf	fsr2l,c
  8594  0038C8  6ADA               	clrf	fsr2h,c
  8595  0038CA  0E01               	movlw	high _rxfifo
  8596  0038CC  22DA               	addwfc	fsr2h,f,c
  8597  0038CE  CFAE FFDF          	movff	4014,indf2	;volatile
  8598                           
  8599                           ; BSR set to: 0
  8600  0038D2  29CA               	incf	_rxiptr& (0+255),w,b	;volatile
  8601  0038D4  0B0F               	andlw	15
  8602  0038D6  6FCC               	movwf	_ser_tmp& (0+255),b
  8603                           
  8604                           ; BSR set to: 0
  8605  0038D8  51CB               	movf	_rxoptr& (0+255),w,b	;volatile
  8606  0038DA  19CC               	xorwf	_ser_tmp& (0+255),w,b
  8607  0038DC  A4D8               	btfss	status,2,c
  8608                           
  8609                           ; BSR set to: 0
  8610  0038DE  C0CC  F0CA         	movff	_ser_tmp,_rxiptr	;volatile
  8611  0038E2                     i2l223:
  8612  0038E2  B89E               	btfsc	3998,4,c	;volatile
  8613  0038E4  A89D               	btfss	3997,4,c	;volatile
  8614  0038E6  D010               	goto	i2l227
  8615  0038E8  0E10               	movlw	low _txfifo
  8616  0038EA  245C               	addwf	_txoptr,w,c	;volatile
  8617  0038EC  6ED9               	movwf	fsr2l,c
  8618  0038EE  6ADA               	clrf	fsr2h,c
  8619  0038F0  0E01               	movlw	high _txfifo
  8620  0038F2  22DA               	addwfc	fsr2h,f,c
  8621  0038F4  50DF               	movf	indf2,w,c
  8622  0038F6  6EAD               	movwf	4013,c	;volatile
  8623  0038F8  2A5C               	incf	_txoptr,f,c	;volatile
  8624  0038FA  0E0F               	movlw	15
  8625  0038FC  165C               	andwf	_txoptr,f,c	;volatile
  8626  0038FE  505B               	movf	_txiptr,w,c	;volatile
  8627  003900  185C               	xorwf	_txoptr,w,c	;volatile
  8628  003902  B4D8               	btfsc	status,2,c
  8629  003904  989D               	bcf	3997,4,c	;volatile
  8630  003906  989E               	bcf	3998,4,c	;volatile
  8631  003908                     i2l227:
  8632  003908  C003  FFDA         	movff	??_global_int+2,fsr2h
  8633  00390C  C002  FFD9         	movff	??_global_int+1,fsr2l
  8634  003910  0011               	retfie		f
  8635  003912                     __end_of_global_int:
  8636                           	opt stack 0
  8637                           tblptru	equ	0xFF8
  8638                           tblptrh	equ	0xFF7
  8639                           tblptrl	equ	0xFF6
  8640                           tablat	equ	0xFF5
  8641                           prodh	equ	0xFF4
  8642                           prodl	equ	0xFF3
  8643                           intcon	equ	0xFF2
  8644                           intcon2	equ	0xFF1
  8645                           postinc0	equ	0xFEE
  8646                           wreg	equ	0xFE8
  8647                           postdec1	equ	0xFE5
  8648                           fsr1l	equ	0xFE1
  8649                           indf2	equ	0xFDF
  8650                           postinc2	equ	0xFDE
  8651                           postdec2	equ	0xFDD
  8652                           fsr2h	equ	0xFDA
  8653                           fsr2l	equ	0xFD9
  8654                           status	equ	0xFD8
  8655                           tblptru	equ	0xFF8
  8656                           tblptrh	equ	0xFF7
  8657                           tblptrl	equ	0xFF6
  8658                           tablat	equ	0xFF5
  8659                           prodh	equ	0xFF4
  8660                           prodl	equ	0xFF3
  8661                           intcon	equ	0xFF2
  8662                           intcon2	equ	0xFF1
  8663                           postinc0	equ	0xFEE
  8664                           wreg	equ	0xFE8
  8665                           postdec1	equ	0xFE5
  8666                           fsr1l	equ	0xFE1
  8667                           indf2	equ	0xFDF
  8668                           postinc2	equ	0xFDE
  8669                           postdec2	equ	0xFDD
  8670                           fsr2h	equ	0xFDA
  8671                           fsr2l	equ	0xFD9
  8672                           status	equ	0xFD8
  8673                           
  8674                           	psect	rparam
  8675  0000                     tblptru	equ	0xFF8
  8676                           tblptrh	equ	0xFF7
  8677                           tblptrl	equ	0xFF6
  8678                           tablat	equ	0xFF5
  8679                           prodh	equ	0xFF4
  8680                           prodl	equ	0xFF3
  8681                           intcon	equ	0xFF2
  8682                           intcon2	equ	0xFF1
  8683                           postinc0	equ	0xFEE
  8684                           wreg	equ	0xFE8
  8685                           postdec1	equ	0xFE5
  8686                           fsr1l	equ	0xFE1
  8687                           indf2	equ	0xFDF
  8688                           postinc2	equ	0xFDE
  8689                           postdec2	equ	0xFDD
  8690                           fsr2h	equ	0xFDA
  8691                           fsr2l	equ	0xFD9
  8692                           status	equ	0xFD8


Data Sizes:
    Strings     145
    Constant    76
    Data        4
    BSS         84
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     89      92
    BANK0           160     81     142
    BANK1           256     19      51
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(1) Largest target is 40
		 -> exp@coeff(CODE[40]), log@coeff(CODE[36]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(BANK0[2]), 

    ser_puts@s	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_34(CODE[3]), STR_29(CODE[6]), STR_26(CODE[3]), STR_25(CODE[5]), 
		 -> STR_24(CODE[3]), STR_23(CODE[8]), STR_22(CODE[6]), STR_21(CODE[6]), 
		 -> STR_20(CODE[6]), STR_19(CODE[5]), STR_16(CODE[3]), STR_14(CODE[3]), 
		 -> STR_9(CODE[3]), 

    lcd_puts@string	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_33(CODE[5]), STR_32(CODE[6]), STR_31(CODE[7]), STR_30(CODE[7]), 
		 -> STR_28(CODE[10]), STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[6]), 

    put_str@s	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_27(CODE[13]), STR_18(CODE[10]), STR_17(CODE[6]), STR_15(CODE[15]), 
		 -> STR_13(CODE[12]), 

    print_unit@units	PTR const unsigned char [8] size(1) Largest target is 3
		 -> STR_8(CODE[3]), STR_7(CODE[3]), STR_6(CODE[3]), STR_5(CODE[3]), 
		 -> STR_4(CODE[3]), STR_3(CODE[3]), STR_2(CODE[3]), STR_1(CODE[2]), 


Critical Paths under _main in COMRAM

    _print_unit->_lcd_gotoxy
    _print_reading->_format_number
    _format_xint32->_format_number
    _format_double->_log10
    _ldexp->_eval_poly
    ___fltol->_log10
    ___flsub->___fladd
    ___fldiv->___flpack
    ___lltofl->___flpack
    _log10->_log
    _log->_eval_poly
    _eval_poly->___fladd
    ___flmul->___fldiv
    ___fladd->___flmul
    ___awtofl->___flpack
    _lcd_begin->_lcd_command
    _indicator->_lcd_gotoxy
    _lcd_puts->_lcd_send
    _calibrate->___lwtofl
    _ser_puts->_ser_putch
    _measure_freq->_format_number
    _put_str->_output_putch
    _output_putch->_lcd_send
    _lcd_gotoxy->_lcd_command
    _format_number->___lwdiv
    _lcd_clear->_lcd_command
    _lcd_command->_lcd_send
    _lcd_send->_lcd_write4bits
    ___lwtofl->_measure_freq

Critical Paths under _global_int in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_format_double
    _measure_inductance->___fltol
    _measure_capacitance->_format_double
    _format_double->_pow
    _pow->_exp
    _exp->_floor
    _floor->___altofl
    ___fltol->_log10
    ___altofl->___fltol

Critical Paths under _global_int in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_measure_capacitance

Critical Paths under _global_int in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _global_int in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _global_int in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _global_int in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _global_int in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _global_int in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _global_int in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  415782
                          _calibrate
                          _delay10ms
                      _format_double
                          _indicator
                          _lcd_begin
                          _lcd_clear
                         _lcd_gotoxy
                           _lcd_init
                           _lcd_puts
                _measure_capacitance
                 _measure_inductance
                           _ser_init
                           _ser_puts
                        _timer0_init
                        _timer2_init
 ---------------------------------------------------------------------------------
 (1) _timer2_init                                          4     4      0      90
                                              3 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _timer0_init                                         10    10      0     251
                                              3 COMRAM    10    10      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _measure_inductance                                  55    55      0   42163
                                             14 BANK0     43    43      0
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___lwtofl
                         _lcd_gotoxy
                       _measure_freq
                      _print_reading
                         _print_unit
                            _put_str
 ---------------------------------------------------------------------------------
 (1) _measure_capacitance                                 19    19      0  198779
                                              0 BANK1     19    19      0
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___lwtofl
                      _format_double
                      _format_xint32
                         _lcd_gotoxy
                       _measure_freq
                      _print_reading
                         _print_unit
                            _put_str
                          _ser_putch
                           _ser_puts
 ---------------------------------------------------------------------------------
 (2) _print_unit                                           3     3      0    2431
                                             13 COMRAM     2     2      0
                         _lcd_gotoxy
                           _ser_puts
 ---------------------------------------------------------------------------------
 (2) _print_reading                                        6     4      2    7600
                                             53 COMRAM     6     4      2
                            ___lwdiv
                            ___lwmod
                      _format_number
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (2) _format_xint32                                        4     0      4    3729
                                             53 COMRAM     4     0      4
                       _buffer_putch
                      _format_number
 ---------------------------------------------------------------------------------
 (2) _format_double                                       20    16      4  152787
                                             61 BANK0     20    16      4
                           ___awtofl
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                       _buffer_putch
                              _floor
                              _log10
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                 21    13      8   85608
                                             40 BANK0     21    13      8
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___lltofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _exp                                                 11     7      4   45695
                                             29 BANK0     11     7      4
                           ___awtofl
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (5) _ldexp                                                8     2      6     489
                                             79 COMRAM     8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (5) _floor                                               10     6      4   10644
                                             19 BANK0     10     6      4
                           ___altofl
                            ___fladd
                            ___fldiv (ARG)
                             ___flge
                            ___fltol
                              _frexp
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     882
                                              4 BANK0     10     6      4
                            ___fldiv (ARG)
                              _log10 (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                               8     0      8    1978
                                              3 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (6) ___altofl                                             5     1      4    2446
                                             14 BANK0      5     1      4
                           ___flpack
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    5269
                                             67 COMRAM     8     0      8
                           ___awtofl (ARG)
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4     260
                                              3 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             15     7      8    4021
                                             13 COMRAM    15     7      8
                           ___flpack
 ---------------------------------------------------------------------------------
 (4) ___lltofl                                             4     0      4    2344
                                             13 COMRAM     4     0      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (3) _log10                                                8     4      4   33887
                                             85 COMRAM     4     0      4
                                              0 BANK0      4     4      0
                            ___flmul
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  6     2      4   26714
                                             79 COMRAM     6     2      4
                           ___awtofl
                            ___fladd
                            ___flmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                7     2      5     582
                                              3 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           12     5      7   11855
                                             67 COMRAM    12     5      7
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             28    20      8    6998
                                             28 COMRAM    27    19      8
                           ___awtofl (ARG)
                            ___fldiv (ARG)
                           ___flpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             12     4      8    4213
                                             55 COMRAM    12     4      8
                           ___awtofl (ARG)
                            ___flmul (ARG)
                           ___flpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awtofl                                             9     5      4    2686
                                             13 COMRAM     5     1      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             3     3      0      46
                                              3 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcd_begin                                            3     2      1     860
                                              7 COMRAM     3     2      1
                        _lcd_command
                     _lcd_write4bits
 ---------------------------------------------------------------------------------
 (1) _indicator                                            1     1      0    2955
                                             13 COMRAM     1     1      0
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (3) _lcd_puts                                             3     3      0     979
                                              6 COMRAM     3     3      0
                           _lcd_send
 ---------------------------------------------------------------------------------
 (1) _calibrate                                            1     1      0   13801
                                             62 COMRAM     1     1      0
                           ___lwtofl
                          _delay10ms
                          _lcd_clear
                         _lcd_gotoxy
                           _lcd_send
                       _measure_freq
                            _put_str
                           _ser_puts
 ---------------------------------------------------------------------------------
 (1) _ser_puts                                             1     1      0     486
                                              4 COMRAM     1     1      0
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _measure_freq                                         5     3      2    6402
                                             53 COMRAM     5     3      2
                      _format_number
                         _lcd_gotoxy
                            _put_str
                     _timer0_read_ps
 ---------------------------------------------------------------------------------
 (3) _timer0_read_ps                                       7     5      2     167
                                              3 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _put_str                                              4     4      0     982
                                              7 COMRAM     4     4      0
                       _output_putch
 ---------------------------------------------------------------------------------
 (3) _output_putch                                         1     1      0     702
                                              6 COMRAM     1     1      0
                           _lcd_send
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _ser_putch                                            1     1      0      31
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _lcd_gotoxy                                           6     5      1    1945
                                              7 COMRAM     6     5      1
                        _lcd_command
 ---------------------------------------------------------------------------------
 (3) _format_number                                       43    39      4    3243
                                             10 COMRAM    43    39      4
                            ___lwdiv
                            ___lwmod
                       _buffer_putch
 ---------------------------------------------------------------------------------
 (4) _buffer_putch                                         3     3      0      31
                                              3 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     582
                                              3 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     591
                                              3 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            1     1      0     640
                                              7 COMRAM     1     1      0
                        _lcd_command
 ---------------------------------------------------------------------------------
 (4) _lcd_command                                          1     1      0     640
                                              6 COMRAM     1     1      0
                           _lcd_send
 ---------------------------------------------------------------------------------
 (4) _lcd_send                                             2     1      1     609
                                              4 COMRAM     2     1      1
                     _lcd_write4bits
 ---------------------------------------------------------------------------------
 (5) _lcd_write4bits                                       1     1      0      31
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _delay10ms                                            1     1      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4    2669
                                             58 COMRAM     4     0      4
                           ___flpack
                       _measure_freq (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6    2248
                                              3 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _global_int                                           3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calibrate
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _put_str
           _output_putch
             _lcd_send
               _lcd_write4bits
             _ser_putch
         _timer0_read_ps
     _delay10ms
     _lcd_clear
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_send
       _lcd_write4bits
     _measure_freq
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _put_str
         _output_putch
           _lcd_send
             _lcd_write4bits
           _ser_putch
       _timer0_read_ps
     _put_str
       _output_putch
         _lcd_send
           _lcd_write4bits
         _ser_putch
     _ser_puts
       _ser_putch
   _delay10ms
   _format_double
     ___awtofl
       ___flpack
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     _buffer_putch
     _floor
       ___altofl
         ___flpack
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
       ___fladd
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___fldiv (ARG)
         ___flpack
       ___flge (ARG)
       ___fltol (ARG)
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       _frexp (ARG)
     _log10
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       _log
         ___awtofl
           ___flpack
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _frexp
     _pow
       ___flge
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       ___flneg
       ___fltol
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       ___lltofl
         ___flpack
       _exp
         ___awtofl
           ___flpack
         ___fldiv
           ___flpack
         ___flge
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         ___flsub
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _floor
           ___altofl
             ___flpack
             ___fltol (ARG)
               ___fldiv (ARG)
                 ___flpack
               _log10 (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _log
                   ___awtofl
                     ___flpack
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___fladd
                       ___awtofl (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                   _frexp
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flge (ARG)
           ___fltol (ARG)
             ___fldiv (ARG)
               ___flpack
             _log10 (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
           _frexp (ARG)
         _ldexp
           _eval_poly (ARG)
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
         _log (ARG)
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
       _log
         ___awtofl
           ___flpack
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _frexp
   _indicator
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_puts
       _lcd_send
         _lcd_write4bits
   _lcd_begin
     _lcd_command
       _lcd_send
         _lcd_write4bits
     _lcd_write4bits
   _lcd_clear
     _lcd_command
       _lcd_send
         _lcd_write4bits
   _lcd_gotoxy
     _lcd_command
       _lcd_send
         _lcd_write4bits
   _lcd_init
   _lcd_puts
     _lcd_send
       _lcd_write4bits
   _measure_capacitance
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _put_str
           _output_putch
             _lcd_send
               _lcd_write4bits
             _ser_putch
         _timer0_read_ps
     _format_double
       ___awtofl
         ___flpack
       ___fldiv
         ___flpack
       ___flge
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       ___flsub
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
       ___fltol
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       _buffer_putch
       _floor
         ___altofl
           ___flpack
           ___fltol (ARG)
             ___fldiv (ARG)
               ___flpack
             _log10 (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flge (ARG)
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
         _frexp (ARG)
       _log10
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
       _pow
         ___flge
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         ___fltol
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
         ___lltofl
           ___flpack
         _exp
           ___awtofl
             ___flpack
           ___fldiv
             ___flpack
           ___flge
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg
           ___flsub
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           ___fltol
             ___fldiv (ARG)
               ___flpack
             _log10 (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _floor
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 _log10 (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   _log
                     ___awtofl
                       ___flpack
                     ___fladd
                       ___awtofl (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     _eval_poly
                       ___fladd
                         ___awtofl (ARG)
                           ___flpack
                         ___flmul (ARG)
                           ___awtofl (ARG)
                             ___flpack
                           ___fldiv (ARG)
                             ___flpack
                           ___flpack (ARG)
                           _frexp (ARG)
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flmul
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                     _frexp
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flge (ARG)
             ___fltol (ARG)
               ___fldiv (ARG)
                 ___flpack
               _log10 (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _log
                   ___awtofl
                     ___flpack
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___fladd
                       ___awtofl (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                   _frexp
             _frexp (ARG)
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
           _log (ARG)
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     _format_xint32
       _buffer_putch
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _measure_freq
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _put_str
         _output_putch
           _lcd_send
             _lcd_write4bits
           _ser_putch
       _timer0_read_ps
     _print_reading
       ___lwdiv
       ___lwmod
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _lcd_puts
         _lcd_send
           _lcd_write4bits
     _print_unit
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _ser_puts
         _ser_putch
     _put_str
       _output_putch
         _lcd_send
           _lcd_write4bits
         _ser_putch
     _ser_putch
     _ser_puts
       _ser_putch
   _measure_inductance
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _put_str
           _output_putch
             _lcd_send
               _lcd_write4bits
             _ser_putch
         _timer0_read_ps
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _measure_freq
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _put_str
         _output_putch
           _lcd_send
             _lcd_write4bits
           _ser_putch
       _timer0_read_ps
     _print_reading
       ___lwdiv
       ___lwmod
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _lcd_puts
         _lcd_send
           _lcd_write4bits
     _print_unit
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _ser_puts
         _ser_putch
     _put_str
       _output_putch
         _lcd_send
           _lcd_write4bits
         _ser_putch
   _ser_init
   _ser_puts
     _ser_putch
   _timer0_init
   _timer2_init

 _global_int (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     13      33       7       19.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     51      8E       5       88.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     59      5C       1       96.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     11D      20        0.0%
DATA                 0      0     11D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Sep 17 03:07:47 2019

                ___altofl@sign 0072                   ___fldiv@cntr 001A                   ___fldiv@sign 001C  
                           _F1 00DE                             _F2 00B1                             _F3 00B5  
                           l36 4394                    __CFG_BOR$ON 000000                    __CFG_BORV$3 000000  
                 ___flpack@arg 0004                   ___flpack@exp 0008                            l450 407A  
                          l418 3B32                            l291 3F62                            l391 427C  
                          l801 316E                            l812 3206                            l389 4278  
                          l904 3D86                            l844 2E12                            l908 3D0E  
                          l781 3964                            l829 3BD8                            l837 3F38  
                          l846 2DDC                            l838 3F56                            l776 3920  
                          l777 39D6                            l875 33D6                            l788 3990  
                          l876 349E                            l789 3998                            l797 3146  
                          l798 328A                            l878 348E                            l888 3C76  
                          _GIE 007F97                 lcd_begin@lines 000A                            _RX9 007D5E  
                          _TX9 007D66                            _exp 2A44                            _log 328C  
                          _pow 2F9C                            wreg 000FE8                   __CFG_FOSC$HS 000000  
           timer0_read_ps@prev 0008                   ___flmul@sign 0033                   __CFG_LVP$OFF 000000  
       __end_of_lcd_write4bits 4356                  ___flpack@sign 0009                   ___fltol@exp1 006D  
                 __CFG_WDT$OFF 000000                           l1102 3FE2                           l1112 40F4  
                         l1140 3122                           l1144 3112                           l1065 33A4  
                         l1170 2C44                           l1166 2C54                           l4005 3FB2  
                         l4101 41C4                           l4007 3FBA                           l4017 3FD8  
                         l4009 3FBE                           l4033 40EA                           l4025 40CC  
                         l4113 3A9C                           l4201 306A                           l4027 40D4  
                         l4131 3AFE                           l4043 2A5C                           l4029 40D8  
                         l4133 3B12                           l4053 2ABA                           l4301 2F72  
                         l4119 3ABC                           l4303 2F78                           l3351 3E22  
                         l3343 3E0E                           l3601 394E                           l4129 3AF8  
                         l4145 41E0                           l4073 2C06                           l4049 2A90  
                         l3361 3E3C                           l3353 3E28                           l3345 3E14  
                         l4315 438E                           l4075 2C10                           l4059 2AEC  
                         l4085 415C                           l4149 41F6                           l4093 43A8  
                         l4501 25B6                           l3373 3E5A                           l3607 397A  
                         l4167 3F7E                           l4191 2FE0                           l4431 29A4  
                         l3375 3E60                           l3367 3E4E                           l3359 3E36  
                         l3609 3986                           l4089 439A                           l4353 374C  
                         l4097 41AC                           l4521 3784                           l4513 3776  
                         l3705 325E                           l3801 3C2A                           l4185 2FC8  
                         l4409 2772                           l3715 2C6A                           l3811 3C4E  
                         l4195 3036                           l4427 296C                           l4435 29DA  
                         l3717 2C74                           l3813 3C52                           l3805 3C3A  
                         l4197 3040                           l4285 2E46                           l3655 3180  
                         l3903 408A                           l3639 4006                           l4623 366A  
                         l3825 43C0                           l3833 42E8                           l3913 410E  
                         l3681 31D4                           l3649 3158                           l3921 4364  
                         l3753 3F22                           l3817 3C66                           l3809 3C42  
                         l4457 2164                           l4625 366E                           l4617 365A  
                         l3827 43C2                           l4547 3808                           l4539 37D0  
                         l3675 31BA                           l3771 3D30                           l3931 3CA8  
                         l4491 2542                           l3597 392A                           l3693 321C  
                         l3677 31C6                           l3669 319A                           l3853 33E0  
                         l3599 3936                           l3687 31F4                           l3679 31CE  
                         l3871 3B52                           l3759 3F54                           l3935 3CB2  
                         l4495 257A                           l3697 3232                           l3689 3200  
                         l3785 3BE6                           l3857 33FC                           l3945 3CCA  
                         l3971 4054                           l3891 3B9E                           l3883 3B70  
                         l3787 3BF0                           l4499 25B0                           ?_exp 007D  
                         l3957 3A00                           l3869 3B48                           l3949 3CD6  
                         ?_log 0050                           l3959 3A74                           l3987 329A  
                         l3989 32A4                           ?_pow 0088                           STR_2 20ED  
                         STR_3 20F3                           STR_4 20F0                           STR_5 20E1  
                         STR_6 20EA                           STR_7 20E4                           STR_8 20E7  
                         STR_9 20B3                           _BRGH 007D62                           _CREN 007D5C  
                         _LATB 000F8A                           _LATC 000F8B                           _CCal 00E2  
                         u2420 422E                           u3080 33EA                  __CFG_DEBUG$ON 000000  
                         u2438 4230                           _PIE1 000F9D                           u3530 3036  
                         _PEIE 007F96                           u3807 34C0                           u3727 378A  
                         u3817 34D0                           u3737 37A6                           u3907 43DE  
                         u3827 34E0                           u3747 37B8                           u2980 3C0E  
                         _RCIF 007CF5                           u3917 4344                           u3837 34F0  
                         u3757 37C4                           u3927 434E                           u3847 3500  
                         u3767 37DE                           u3857 3510                           u3777 37F6  
                         u2985 3C04                           _PIR1 000F9E                           u3867 3520  
                         u3787 382A                           u3877 3530                           u3797 34AA  
                         u3887 3540                           u3897 3550                           _TMR0 000FD6  
                         _TMR2 000FCC                           _SPEN 007D5F                           _TXIE 007CEC  
                         _TXIF 007CF4                           _TXEN 007D65                           _SYNC 007D64  
                 __CFG_PWRT$ON 000000                  __CFG_FCMEN$ON 000000                   __CFG_WRTB$ON 000000  
                 __CFG_WRTC$ON 000000                           _bres 00E6                           _main 359A  
                         fsr2h 000FDA                           fsr1l 000FE1                           indf2 000FDF  
                         fsr2l 000FD9                           exp@x 007D                           log@x 0050  
        __size_of_output_putch 0014                           pow@x 0088                           pow@y 008C  
                         prodh 000FF4                           prodl 000FF3     __end_of_measure_inductance 261A  
                         start 2014            timer0_read_ps@count 0009                 ??_buffer_putch 0004  
            _format_number$374 0031                  __CFG_MCLRE$ON 000000                   ___param_bank 000010  
              _timer0_init$282 0004                _timer0_init$283 0006                _timer0_init$284 0008  
              _timer0_init$285 000A            lcd_write4bits@value 0004                   lcd_send@mode 0005  
                        ??_exp 005A                          ??_log 0054                          ??_pow 005A  
               __CFG_CCP2MX$ON 000000                  ___fltol@sign1 006C                __end_of___fladd 328C  
                        ?_main 0001                __end_of___fldiv 3BDA                __end_of___flneg 4376  
                        STR_10 20AA                          STR_11 20DD                          STR_12 20AC  
                        STR_20 20B6                          STR_21 20BC                          STR_13 2081  
                        STR_14 20B3                          STR_22 20C2                          STR_30 20A9  
                        STR_23 20A1                          STR_15 2065                          STR_24 20B3  
                        STR_16 20B3                          STR_25 20D3                          STR_33 20CE  
                        STR_17 20C8                          STR_26 20B3                          STR_18 2097  
                        STR_19 20D8                          STR_27 2074                          STR_28 208D  
                        STR_29 20B0                __end_of___flmul 2E14                __end_of___flsub 40C0  
              __end_of___fltol 3C78                          _T0CON 000FD5                          _T2CON 000FCA  
                        _LATC7 007C5F                __end_of___lwdiv 3FEC                __end_of___lwmod 40FE  
                        i2l223 38E2                          i2l227 3908                          _RCREG 000FAE  
             lcd_begin@dotsize 0008                          _SPBRG 000FAF                          _PORTC 000F82  
                        _TRISA 000F92                          _TRISB 000F93                          _TRISC 000F94  
                        _TXREG 000FAD                 __CFG_EBTR0$OFF 000000                 __CFG_EBTR1$OFF 000000  
               __CFG_EBTR2$OFF 000000                  ___awtofl@sign 0012                 __CFG_EBTR3$OFF 000000  
                __CFG_WRTD$OFF 000000                          _log10 3E66                          _blink 00C5  
                        _floor 33A6                          _ldexp 3C78                          _frexp 3D10  
                 _output_putch 43E8                ?_lcd_write4bits 0001                          _msecs 00B9  
                        tablat 000FF5                          pow@yi 0099                format_number@di 0034  
                        status 000FD8                __end_of_put_str 420A                ??_print_reading 0038  
                  exp@exponent 0085                    ldexp@newexp 0054                __initialization 3EC0  
                  log@exponent 0054                   __end_of_main 3688               format_double@num 009D  
                lcd_gotoxy@col 0009                  lcd_gotoxy@row 0008                  ?_measure_freq 0036  
       __size_of_format_double 0188                         ??_main 005A                  lcd_send@value 0006  
          format_double@weight 00A9                  __activetblptr 000001         __size_of_format_number 00A8  
       __size_of_format_xint32 0036            lcd_init@fourbitmode 0004                         ?_log10 0056  
                       ?_floor 0073                         ?_ldexp 0050                         ?_frexp 0004  
             __end_of___altofl 4034               __end_of___flpack 39D8               __end_of___awtofl 4138  
             __end_of___lltofl 4266                         i2l3491 38BA                         i2l3485 389A  
                       i2l3493 38BC                         _INTCON 000FF2               __end_of___lwtofl 42E6  
                       _TRISC6 007CA6                 __CFG_VREGEN$ON 000000                 __CFG_XINST$OFF 000000  
             __end_of_lcd_init 4292           __size_of_lcd_command 000E               __end_of_lcd_send 43D2  
                       ___flge 3F0C               __end_of_lcd_puts 41D8                      ??___fladd 0040  
                    ??___fldiv 0016                      ??___flneg 0008                 __CFG_STVREN$ON 000000  
                    ??___flmul 0025                      ??___flsub 004C                      ??___fltol 0068  
                 ?_timer0_init 0001                 ??_measure_freq 0038                      ??___lwdiv 0008  
                 ?_timer2_init 0001                      ??___lwmod 0008                         _buffer 00CD  
                       clear_0 3EC6                         clear_1 3ED2                         log10@x 0056  
                       _rxfifo 0100                         _txfifo 0110                         _rxiptr 00CA  
                       _rxoptr 00CB                         floor@i 0077                         _txiptr 005B  
                       floor@x 0073                         _txoptr 005C               __end_of_ser_init 4334  
             __end_of_ser_puts 43B6             timer2_init@ps_mode 0007                   __mediumconst 0000  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
         __end_of_buffer_putch 407C               format_number@buf 0011               format_number@pad 000E  
      _measure_inductance$1120 008B        _measure_inductance$1121 008F        _measure_inductance$1122 007A  
      _measure_inductance$1123 007E        _measure_inductance$1124 0082        _measure_inductance$1118 0076  
      _measure_inductance$1119 0087                      ??_put_str 0008                     ___fladd@f1 0038  
                   ___fladd@f2 003C                     ___flge@ff1 0004                     ___flge@ff2 0008  
             __end_ofexp@coeff 2041                  _format_double 2E14               __end_oflog@coeff 2065  
                   ___altofl@c 006E                     ___fldiv@f1 000E                     ___fldiv@f2 0012  
                   ___fldiv@f3 0016                     __accesstop 0060        __end_of__initialization 3EFE  
              __CFG_PBADEN$OFF 000000                     ___flneg@f1 0004                  _format_number 3A8C  
                _format_xint32 4170                     ___flmul@f1 001D                     ___flmul@f2 0021  
                 eval_poly@res 004C                  ___rparam_used 000001                     ___flsub@f1 0044  
                   ___flsub@f2 0048                     ___fltol@f1 0064                     ___awtofl@c 000E  
       measure_capacitance@Cin 012F   __size_of_measure_capacitance 042A         measure_capacitance@var 012D  
        lcd_gotoxy@row_offsets 000A                 __pcstackCOMRAM 0001             __size_of_calibrate 00E4  
                 __pidataBANK0 440A                     ___lltofl@c 000E             __size_of_delay10ms 0002  
                __end_of_log10 3EC0                  __end_of_floor 34A0                  __end_of_ldexp 3D10  
                __end_of_frexp 3D88                     ___lwtofl@c 003B                 buffer_putch@ch 0006  
           __size_of_lcd_begin 00D6             __size_of_lcd_clear 0016                        ??_log10 005A  
                      ??_floor 005A                        ??_ldexp 0056                        ??_frexp 0009  
                   _log10$1129 0060                     __pbssBANK0 00B1                     __pbssBANK1 0100  
               ?_format_double 009D             __size_of_eval_poly 00B4             __size_of_indicator 0020  
               ?_format_number 000B                 ?_format_xint32 0036                 print_unit@unit 0001  
                      ?___flge 0004                      ?___altofl 006E        __size_of_timer0_read_ps 004A  
                    ?___flpack 0004                      ?___awtofl 000E                      ?___lltofl 000E  
           _measure_inductance 20F8             __size_of_ser_putch 0028                      ?___lwtofl 003B  
             ??_lcd_write4bits 0004                        _INTCON2 000FF1                     _lcd_gotoxy 4138  
          ?_measure_inductance 0001              __end_of_calibrate 376C                      ?_lcd_init 0001  
                    ?_lcd_send 0005              __end_of_delay10ms 4410                      ?_lcd_puts 0001  
         __end_of_measure_freq 359A                     _global_int 2008                     calibrate@i 003F  
                      __Hparam 0000                        __Lparam 0000                      ?_ser_init 0001  
         ??_measure_inductance 005A              __end_of_lcd_begin 3842                      ?_ser_puts 0001  
            __end_of_lcd_clear 43E8                __size_of___flge 004C                        ___fladd 3124  
                      ___fldiv 3B34                        ___flneg 4356                        ___flmul 2C56  
                      ___flsub 407C                        ___fltol 3BDA                        ___lwdiv 3FA2  
                      ___lwmod 40C0                   __psmallconst 2018                     ??___altofl 005A  
                   ??___flpack 000A                        __pcinit 3EC0                     ??___awtofl 0012  
            __end_of_eval_poly 3A8C                        __ramtop 0800              __end_of_indicator 4396  
         __size_of_timer0_init 006E                     ??___lltofl 0012                        __ptext0 359A  
                      __ptext1 420A                        __ptext2 3DF8                        __ptext3 430E  
                      __ptext4 20F8                        __ptext5 261A                        __ptext6 4292  
                      __ptext7 3D88                        __ptext8 4170                        __ptext9 2E14  
         __size_of_timer2_init 002E          __size_of_buffer_putch 0048                     ??___lwtofl 003F  
                 __size_of_exp 0212                   __size_of_log 011A                   __size_of_pow 0188  
                      _seconds 00BD                        _ser_tmp 00CC                ??_format_double 005A  
                      _put_str 41D8                     ??_lcd_init 0004                     ??_lcd_send 0006  
               __pintcode_body 3842                     ??_lcd_puts 0007           end_of_initialization 3EFE  
              ??_format_number 000F                ??_format_xint32 003A                        exp@sign 0087  
                    _LCD_lines 00C8                   _lcd_init$342 0005                        int_func 3842  
               lcd_puts@string 0009              __end_of_ser_putch 430E                        pow@sign 0098  
measure_inductance@denominator 0072          __end_of_print_reading 3DF8                     ??_ser_init 0004  
                   ??_ser_puts 0005                   _buffer_putch 4034              format_number@base 000D  
                      postdec1 000FE5                        postdec2 000FDD                        postinc0 000FEE  
                      postinc2 000FDE                     _print_unit 4292            _measure_capacitance 261A  
                  ?_lcd_gotoxy 0008                    ___fldiv@exp 001B                    ?_global_int 0001  
                  ___flmul@exp 0032                  ??_lcd_command 0007           ?_measure_capacitance 0001  
      measure_capacitance@unit 012C                 format_double@m 00AF         measure_inductance@unit 0086  
               __end_of___flge 3F58                 _timer0_read_ps 3F58                lcd_gotoxy@F4120 00EA  
                   floor@expon 007B                 format_number@i 0035                 format_number@n 000B  
               format_xint32@x 0036            start_initialization 3EC0                     eval_poly@d 0048  
                   eval_poly@n 0049                     eval_poly@x 0044          __size_of_measure_freq 00FA  
                   ldexp@value 0050                    __end_of_exp 2C56                    __end_of_log 33A6  
                  __end_of_pow 3124                   _LCD_function 005A             format_double@digit 00AD  
                   frexp@value 0004          ??_measure_capacitance 005A         __end_of_timer0_read_ps 3FA2  
                     ??___flge 000C            __size_of_lcd_gotoxy 0038            __end_of_lcd_command 440A  
                  __pdataBANK0 00EA                   _measure_freq 34A0            __size_of_global_int 190A  
     print_reading@measurement 0036              __size_of___altofl 0048              __size_of___flpack 00C6  
            __size_of___awtofl 003A                    ?_print_unit 0001              __size_of___lltofl 002E  
                  __pbssCOMRAM 005A              __size_of___lwtofl 002A                  __pcstackBANK0 0060  
                __pcstackBANK1 0120                  ?_output_putch 0001              measure_freq@count 0039  
             lcd_command@value 0007              __size_of_lcd_init 002C              __size_of_lcd_send 001C  
                    _calibrate 3688              __size_of_lcd_puts 0032                      _delay10ms 440E  
                    __pnvBANK0 00E2               ___lwdiv@dividend 0004                ?_timer0_read_ps 0004  
                    __pintcode 2008                       ?___fladd 0038                       ?___fldiv 000E  
                     ?___flneg 0004                       ?___flmul 001D                       ?___flsub 0044  
                     ?___fltol 0064              __size_of_ser_init 0026                       ?___lwdiv 0004  
                     ?___lwmod 0004              __size_of_ser_puts 0020                      _lcd_begin 376C  
                    _lcd_clear 43D2                    __smallconst 2018                      _eval_poly 39D8  
                output_putch@c 0007                      _indicator 4376                 ??_output_putch 0007  
             ___lwdiv@quotient 0009                 __size_of_log10 005A                       ?_put_str 0001  
               __size_of_floor 00FA                 __size_of_ldexp 0098                 __size_of_frexp 0078  
                   ?_calibrate 0001                     ser_putch@c 0004                     ?_delay10ms 0001  
                     _LCD_ctrl 00C7                       _LCD_mode 00C9                    _lcd_command 43FC  
          __size_of_print_unit 002A                       i2u251_40 387E                       i2u251_41 3878  
                     i2u252_48 3880                      _ser_putch 42E6    __size_of_measure_inductance 0522  
                ??_timer0_init 0004                  ??_timer2_init 0004              indicator@indicate 000E  
                   ?_lcd_begin 0008                     ?_lcd_clear 0001                     ?_eval_poly 0044  
                   ?_indicator 0001                      lcd_puts@i 0008                   ??_lcd_gotoxy 0009  
        measure_inductance@Lin 0095          measure_inductance@var 0093                      copy_data0 3EF2  
        __end_of_format_double 2F9C                   ??_global_int 0001           format_number@padchar 0033  
      __size_of_lcd_write4bits 0022          __end_of_format_number 3B34          __end_of_format_xint32 41A6  
                    frexp@eptr 0008                       __Hrparam 0000                       __Lrparam 0000  
                   ?_ser_putch 0001                   __Lsmallconst 2018             __end_of_lcd_gotoxy 4170  
             __size_of___fladd 0168               __size_of___fldiv 00A6               __size_of___flneg 0020  
             __size_of___flmul 01BE               __size_of___flsub 0044               __size_of___fltol 009E  
                     ___altofl 3FEC                       ___flpack 3912               __size_of___lwdiv 004A  
             __size_of___lwmod 003E                       ___awtofl 40FE                       ___lltofl 4238  
                timer2_init@ps 0005                       ___lwtofl 42BC             __end_of_global_int 3912  
          __end_of_timer0_init 3E66                       _exp$1132 0081            __end_of_timer2_init 4238  
              ___lwdiv@divisor 0006                ___lwdiv@counter 0008         __size_of_print_reading 0070  
         timer0_init@prescaler 000C                       __ptext10 2F9C                       __ptext11 2A44  
                     __ptext20 4238                       __ptext12 3C78                       __ptext21 3E66  
                     __ptext13 33A6                       __ptext30 4376                       __ptext22 328C  
                     __ptext14 3BDA                       __ptext31 41A6                       __ptext23 3D10  
                     __ptext15 3F0C                       __ptext40 3A8C                       __ptext32 3688  
                     __ptext24 39D8                       __ptext16 3FEC                       __ptext41 4034  
                     __ptext33 4396                       __ptext25 2C56                       __ptext17 407C  
                     __ptext50 3912                       __ptext42 40C0                       __ptext34 34A0  
                     __ptext26 3124                       __ptext18 4356                       __ptext43 3FA2  
                     __ptext35 3F58                       __ptext27 40FE                       __ptext19 3B34  
                     __ptext44 43D2                       __ptext36 41D8                       __ptext28 4266  
                     __ptext45 43FC                       __ptext37 43E8                       __ptext29 376C  
                     __ptext46 43B6                       __ptext38 42E6                       __ptext47 4334  
                     __ptext39 4138                       __ptext48 440E                       __ptext49 42BC  
                     _lcd_init 4266                       _lcd_send 43B6                       _pow$1130 0090  
                     _pow$1131 0094                       _lcd_puts 41A6               __size_of_put_str 0032  
                  ??_calibrate 003F                  __size_of_main 00EE                    ??_delay10ms 0004  
                    ser_puts@s 0005                       _msecpart 00E8                       _ser_init 430E  
                     _ser_puts 4396                       _timer1of 00C1           __end_of_output_putch 43FC  
                  ??_lcd_begin 0009                    ??_lcd_clear 0008                       exp@coeff 2019  
        ___flmul@f3_as_product 0034                       log@coeff 2041    measure_inductance@numerator 006E  
                 ??_print_unit 000E                    ??_eval_poly 004B                    ??_indicator 000E  
           _print_reading$1113 0038             _print_reading$1114 003A                       intlevel2 0000  
  __end_of_measure_capacitance 2A44               ___lwmod@dividend 0004               ??_timer0_read_ps 0006  
                  ??_ser_putch 0004             __end_of_print_unit 42BC                  _print_reading 3D88  
         delay10ms@period_10ms 0001                    _timer0_init 3DF8                    _timer2_init 420A  
           _format_double$1127 00A1             _format_double$1128 00A5       _measure_capacitance$1115 0120  
     _measure_capacitance$1116 0124       _measure_capacitance$1117 0128                       put_str@i 0009  
                     put_str@s 000B             timer0_init@ps_mode 000D                ___lwmod@divisor 0006  
              ___lwmod@counter 0008                 _lcd_write4bits 4334                   ___fladd@exp1 0043  
                 ___fladd@exp2 0042                   ___fladd@sign 0041                   ?_lcd_command 0001  
               ?_print_reading 0036                  ?_buffer_putch 0001  
