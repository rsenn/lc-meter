

Microchip Technology PIC18 PRO Macro Assembler V1.34 build -361300703 
                                                                                               Tue Sep 17 13:23:05 2019

Microchip Technology Omniscient Code Generator (PRO mode) build 201502162209
     1                           	processor	18F25K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    72                           	psect	pa_nodes,global,class=CODE,delta=1
    73  0000                     tblptrl	equ	0xFF6
    74                           tablat	equ	0xFF5
    75                           prodl	equ	0xFF3
    76                           intcon	equ	0xFF2
    77                           intcon2	equ	0xFF1
    78                           wreg	equ	0xFE8
    79                           indf2	equ	0xFDF
    80                           postinc2	equ	0xFDE
    81                           postdec2	equ	0xFDD
    82                           fsr2h	equ	0xFDA
    83                           fsr2l	equ	0xFD9
    84                           status	equ	0xFD8
    85                           
    86                           	psect	idataBANK0
    87  0029F0                     __pidataBANK0:
    88                           	opt stack 0
    89                           
    90                           ;initializer for lcd_gotoxy@F6470
    91  0029F0  00                 	db	0
    92  0029F1  40                 	db	64
    93  0029F2  14                 	db	20
    94  0029F3  54                 	db	84
    95                           
    96                           ;initializer for _mode
    97  0029F4  FF                 	db	255
    98                           tblptrl	equ	0xFF6
    99                           tablat	equ	0xFF5
   100                           prodl	equ	0xFF3
   101                           intcon	equ	0xFF2
   102                           intcon2	equ	0xFF1
   103                           wreg	equ	0xFE8
   104                           indf2	equ	0xFDF
   105                           postinc2	equ	0xFDE
   106                           postdec2	equ	0xFDD
   107                           fsr2h	equ	0xFDA
   108                           fsr2l	equ	0xFD9
   109                           status	equ	0xFD8
   110                           
   111                           	psect	smallconst
   112  000800                     __psmallconst:
   113                           	opt stack 0
   114  000800  00                 	db	0
   115  000801                     exp@coeff:
   116                           	opt stack 0
   117  000801  0000               	dw	0
   118  000803  3F80               	dw	16256
   119  000805  7218               	dw	29208
   120  000807  3F31               	dw	16177
   121  000809  FDF0               	dw	65008
   122  00080B  3E75               	dw	15989
   123  00080D  5847               	dw	22599
   124  00080F  3D63               	dw	15715
   125  000811  9558               	dw	38232
   126  000813  3C1D               	dw	15389
   127  000815  C482               	dw	50306
   128  000817  3AAE               	dw	15022
   129  000819  78A8               	dw	30888
   130  00081B  3921               	dw	14625
   131  00081D  93EF               	dw	37871
   132  00081F  3780               	dw	14208
   133  000821  92A0               	dw	37536
   134  000823  35A7               	dw	13735
   135  000825  5646               	dw	22086
   136  000827  3415               	dw	13333
   137  000829                     __end_ofexp@coeff:
   138                           	opt stack 0
   139  000829                     log@coeff:
   140                           	opt stack 0
   141  000829  0000               	dw	0
   142  00082B  0000               	dw	0
   143  00082D  FFC4               	dw	65476
   144  00082F  3F7F               	dw	16255
   145  000831  EF80               	dw	61312
   146  000833  BEFF               	dw	48895
   147  000835  E190               	dw	57744
   148  000837  3EA9               	dw	16041
   149  000839  82EC               	dw	33516
   150  00083B  BE76               	dw	48758
   151  00083D  AD82               	dw	44418
   152  00083F  3E2B               	dw	15915
   153  000841  3C0E               	dw	15374
   154  000843  BDC3               	dw	48579
   155  000845  D187               	dw	53639
   156  000847  3D13               	dw	15635
   157  000849  7841               	dw	30785
   158  00084B  BBD3               	dw	48083
   159  00084D                     __end_oflog@coeff:
   160                           	opt stack 0
   161  00084D                     STR_30:
   162  00084D  2D                 	db	45
   163  00084E  20                 	db	32
   164  00084F  43                 	db	67	;'C'
   165  000850  20                 	db	32
   166  000851  28                 	db	40
   167  000852  55                 	db	85	;'U'
   168  000853  6E                 	db	110	;'n'
   169  000854  69                 	db	105	;'i'
   170  000855  74                 	db	116	;'t'
   171  000856  3A                 	db	58	;':'
   172  000857  20                 	db	32
   173  000858  46                 	db	70	;'F'
   174  000859  29                 	db	41
   175  00085A  20                 	db	32
   176  00085B  2D                 	db	45
   177  00085C  00                 	db	0
   178  00085D                     STR_31:
   179  00085D  2D                 	db	45
   180  00085E  20                 	db	32
   181  00085F  4C                 	db	76	;'L'
   182  000860  20                 	db	32
   183  000861  28                 	db	40
   184  000862  55                 	db	85	;'U'
   185  000863  6E                 	db	110	;'n'
   186  000864  69                 	db	105	;'i'
   187  000865  74                 	db	116	;'t'
   188  000866  3A                 	db	58	;':'
   189  000867  20                 	db	32
   190  000868  48                 	db	72	;'H'
   191  000869  29                 	db	41
   192  00086A  20                 	db	32
   193  00086B  2D                 	db	45
   194  00086C  00                 	db	0
   195  00086D                     STR_3:
   196  00086D  70                 	db	112	;'p'
   197  00086E  6C                 	db	108	;'l'
   198  00086F  65                 	db	101	;'e'
   199  000870  61                 	db	97	;'a'
   200  000871  73                 	db	115	;'s'
   201  000872  65                 	db	101	;'e'
   202  000873  20                 	db	32
   203  000874  77                 	db	119	;'w'
   204  000875  61                 	db	97	;'a'
   205  000876  69                 	db	105	;'i'
   206  000877  74                 	db	116	;'t'
   207  000878  2E                 	db	46
   208  000879  2E                 	db	46
   209  00087A  2E                 	db	46
   210  00087B  00                 	db	0
   211  00087C                     STR_15:
   212  00087C  49                 	db	73	;'I'
   213  00087D  6E                 	db	110	;'n'
   214  00087E  64                 	db	100	;'d'
   215  00087F  75                 	db	117	;'u'
   216  000880  63                 	db	99	;'c'
   217  000881  74                 	db	116	;'t'
   218  000882  69                 	db	105	;'i'
   219  000883  76                 	db	118	;'v'
   220  000884  69                 	db	105	;'i'
   221  000885  74                 	db	116	;'t'
   222  000886  79                 	db	121	;'y'
   223  000887  20                 	db	32
   224  000888  00                 	db	0
   225  000889                     STR_1:
   226  000889  43                 	db	67	;'C'
   227  00088A  61                 	db	97	;'a'
   228  00088B  6C                 	db	108	;'l'
   229  00088C  69                 	db	105	;'i'
   230  00088D  62                 	db	98	;'b'
   231  00088E  72                 	db	114	;'r'
   232  00088F  61                 	db	97	;'a'
   233  000890  74                 	db	116	;'t'
   234  000891  69                 	db	105	;'i'
   235  000892  6E                 	db	110	;'n'
   236  000893  67                 	db	103	;'g'
   237  000894  00                 	db	0
   238  000895                     STR_29:
   239  000895  4C                 	db	76	;'L'
   240  000896  43                 	db	67	;'C'
   241  000897  2D                 	db	45
   242  000898  6D                 	db	109	;'m'
   243  000899  65                 	db	101	;'e'
   244  00089A  74                 	db	116	;'t'
   245  00089B  65                 	db	101	;'e'
   246  00089C  72                 	db	114	;'r'
   247  00089D  20                 	db	32
   248  00089E  00                 	db	0
   249  00089F                     STR_6:
   250  00089F  43                 	db	67	;'C'
   251  0008A0  61                 	db	97	;'a'
   252  0008A1  70                 	db	112	;'p'
   253  0008A2  61                 	db	97	;'a'
   254  0008A3  63                 	db	99	;'c'
   255  0008A4  69                 	db	105	;'i'
   256  0008A5  74                 	db	116	;'t'
   257  0008A6  79                 	db	121	;'y'
   258  0008A7  20                 	db	32
   259  0008A8  00                 	db	0
   260  0008A9                     STR_11:
   261  0008A9  0D                 	db	13
   262  0008AA  0A                 	db	10
   263  0008AB  43                 	db	67	;'C'
   264  0008AC  43                 	db	67	;'C'
   265  0008AD  61                 	db	97	;'a'
   266  0008AE  6C                 	db	108	;'l'
   267  0008AF  3D                 	db	61	;'='
   268  0008B0  00                 	db	0
   269  0008B1                     STR_33:
   270  0008B1  20                 	db	32
   271  0008B2  20                 	db	32
   272  0008B3  20                 	db	32
   273  0008B4  20                 	db	32
   274  0008B5  20                 	db	32
   275  0008B6  20                 	db	32
   276  0008B7  00                 	db	0
   277  0008B8                     STR_8:
   278  0008B8  0D                 	db	13
   279  0008B9  0A                 	db	10
   280  0008BA  46                 	db	70	;'F'
   281  0008BB  31                 	db	49	;'1'
   282  0008BC  3D                 	db	61	;'='
   283  0008BD  00                 	db	0
   284  0008BE                     STR_9:
   285  0008BE  0D                 	db	13
   286  0008BF  0A                 	db	10
   287  0008C0  46                 	db	70	;'F'
   288  0008C1  32                 	db	50	;'2'
   289  0008C2  3D                 	db	61	;'='
   290  0008C3  00                 	db	0
   291  0008C4                     STR_10:
   292  0008C4  0D                 	db	13
   293  0008C5  0A                 	db	10
   294  0008C6  46                 	db	70	;'F'
   295  0008C7  33                 	db	51	;'3'
   296  0008C8  3D                 	db	61	;'='
   297  0008C9  00                 	db	0
   298  0008CA                     STR_5:
   299  0008CA  46                 	db	70	;'F'
   300  0008CB  72                 	db	114	;'r'
   301  0008CC  65                 	db	101	;'e'
   302  0008CD  71                 	db	113	;'q'
   303  0008CE  3D                 	db	61	;'='
   304  0008CF  00                 	db	0
   305  0008D0  52                 	db	82	;'R'
   306  0008D1  43                 	db	67	;'C'
   307  0008D2  34                 	db	52	;'4'
   308  0008D3  3D                 	db	61	;'='
   309  0008D4  00                 	db	0
   310  0008D5                     STR_13:
   311  0008D5  43                 	db	67	;'C'
   312  0008D6  69                 	db	105	;'i'
   313  0008D7  6E                 	db	110	;'n'
   314  0008D8  3D                 	db	61	;'='
   315  0008D9  00                 	db	0
   316  0008DA                     STR_7:
   317  0008DA  76                 	db	118	;'v'
   318  0008DB  61                 	db	97	;'a'
   319  0008DC  72                 	db	114	;'r'
   320  0008DD  3D                 	db	61	;'='
   321  0008DE  00                 	db	0
   322  0008DF                     STR_26:
   323  0008DF  2D                 	db	45
   324  0008E0  2A                 	db	42
   325  0008E1  2D                 	db	45
   326  0008E2  00                 	db	0
   327  0008E3  6D                 	db	109	;'m'
   328  0008E4  46                 	db	70	;'F'
   329  0008E5  00                 	db	0
   330  0008E6  6E                 	db	110	;'n'
   331  0008E7  46                 	db	70	;'F'
   332  0008E8  00                 	db	0
   333  0008E9  70                 	db	112	;'p'
   334  0008EA  46                 	db	70	;'F'
   335  0008EB  00                 	db	0
   336  0008EC  75                 	db	117	;'u'
   337  0008ED  46                 	db	70	;'F'
   338  0008EE  00                 	db	0
   339  0008EF                     STR_17:
   340  0008EF  6D                 	db	109	;'m'
   341  0008F0  48                 	db	72	;'H'
   342  0008F1  00                 	db	0
   343  0008F2  6E                 	db	110	;'n'
   344  0008F3  48                 	db	72	;'H'
   345  0008F4  00                 	db	0
   346  0008F5  75                 	db	117	;'u'
   347  0008F6  48                 	db	72	;'H'
   348  0008F7  00                 	db	0
   349  0008F8                     STR_2:
   350  0008F8  0D                 	db	13
   351  0008F9  0A                 	db	10
   352  0008FA  00                 	db	0
   353  0000                     
   354                           ; #config settings
   355  0008FB  00                 	db	0	; dummy byte at the end
   356  0000                     tblptrl	equ	0xFF6
   357                           tablat	equ	0xFF5
   358                           prodl	equ	0xFF3
   359                           intcon	equ	0xFF2
   360                           intcon2	equ	0xFF1
   361                           wreg	equ	0xFE8
   362                           indf2	equ	0xFDF
   363                           postinc2	equ	0xFDE
   364                           postdec2	equ	0xFDD
   365                           fsr2h	equ	0xFDA
   366                           fsr2l	equ	0xFD9
   367                           status	equ	0xFD8
   368                           
   369                           	psect	nvBANK0
   370  0000EB                     __pnvBANK0:
   371                           	opt stack 0
   372  0000EB                     _CCal:
   373                           	opt stack 0
   374  0000EB                     	ds	4
   375  0000EF                     _bres:
   376                           	opt stack 0
   377  0000EF                     	ds	2
   378  0000F1                     _msecpart:
   379                           	opt stack 0
   380  0000F1                     	ds	2
   381  0000                     _TMR0	set	4054
   382  0000                     _INTCON	set	4082
   383  0000                     _INTCON2	set	4081
   384  0000                     _LATB	set	3978
   385  0000                     _LATC	set	3979
   386  0000                     _PIE1	set	3997
   387  0000                     _PIR1	set	3998
   388  0000                     _PORTC	set	3970
   389  0000                     _RCREG	set	4014
   390  0000                     _SPBRG	set	4015
   391  0000                     _T0CON	set	4053
   392  0000                     _T2CON	set	4026
   393  0000                     _TMR2	set	4028
   394  0000                     _TRISA	set	3986
   395  0000                     _TRISB	set	3987
   396  0000                     _TRISC	set	3988
   397  0000                     _TXREG	set	4013
   398  0000                     _BRGH	set	32098
   399  0000                     _CREN	set	32092
   400  0000                     _GIE	set	32663
   401  0000                     _LATC7	set	31839
   402  0000                     _PEIE	set	32662
   403  0000                     _RCIF	set	31989
   404  0000                     _RX9	set	32094
   405  0000                     _SPEN	set	32095
   406  0000                     _SYNC	set	32100
   407  0000                     _TRISC6	set	31910
   408  0000                     _TX9	set	32102
   409  0000                     _TXEN	set	32101
   410  0000                     _TXIE	set	31980
   411  0000                     _TXIF	set	31988
   412                           tblptrl	equ	0xFF6
   413                           tablat	equ	0xFF5
   414                           prodl	equ	0xFF3
   415                           intcon	equ	0xFF2
   416                           intcon2	equ	0xFF1
   417                           wreg	equ	0xFE8
   418                           indf2	equ	0xFDF
   419                           postinc2	equ	0xFDE
   420                           postdec2	equ	0xFDD
   421                           fsr2h	equ	0xFDA
   422                           fsr2l	equ	0xFD9
   423                           status	equ	0xFD8
   424                           
   425                           	psect	cinit
   426  002474                     __pcinit:
   427                           	opt stack 0
   428  002474                     start_initialization:
   429                           	opt stack 0
   430  002474                     __initialization:
   431                           	opt stack 0
   432                           
   433                           ; Clear objects allocated to BANK1 (32 bytes)
   434  002474  EE01  F000         	lfsr	0,__pbssBANK1
   435  002478  0E20               	movlw	32
   436  00247A                     clear_0:
   437  00247A  6AEE               	clrf	postinc0,c
   438  00247C  06E8               	decf	wreg,f,c
   439  00247E  E1FD               	bnz	clear_0
   440                           
   441                           ; Clear objects allocated to BANK0 (49 bytes)
   442  002480  EE00  F0BA         	lfsr	0,__pbssBANK0
   443  002484  0E31               	movlw	49
   444  002486                     clear_1:
   445  002486  6AEE               	clrf	postinc0,c
   446  002488  06E8               	decf	wreg,f,c
   447  00248A  E1FD               	bnz	clear_1
   448                           
   449                           ; Clear objects allocated to COMRAM (3 bytes)
   450  00248C  6A5C               	clrf	(__pbssCOMRAM+2)& (0+255),c
   451  00248E  6A5B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   452  002490  6A5A               	clrf	__pbssCOMRAM& (0+255),c
   453                           
   454                           ; Initialize objects allocated to BANK0 (5 bytes)
   455                           ; load TBLPTR registers with __pidataBANK0
   456  002492  0EF0               	movlw	low __pidataBANK0
   457  002494  6EF6               	movwf	tblptrl,c
   458  002496  0E29               	movlw	high __pidataBANK0
   459  002498  6EF7               	movwf	tblptrh,c
   460  00249A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   461  00249C  6EF8               	movwf	tblptru,c
   462  00249E  EE00  F0F3         	lfsr	0,__pdataBANK0
   463  0024A2  EE10 F005          	lfsr	1,5
   464  0024A6                     copy_data0:
   465  0024A6  0009               	tblrd		*+
   466  0024A8  CFF5 FFEE          	movff	tablat,postinc0
   467  0024AC  50E5               	movf	postdec1,w,c
   468  0024AE  50E1               	movf	fsr1l,w,c
   469  0024B0  E1FA               	bnz	copy_data0
   470  0024B2                     end_of_initialization:
   471                           	opt stack 0
   472  0024B2                     __end_of__initialization:
   473                           	opt stack 0
   474  0024B2  0E00               	movlw	low (__Lsmallconst shr (0+16))
   475  0024B4  6EF8               	movwf	tblptru,c
   476  0024B6  0E08               	movlw	high __Lsmallconst
   477  0024B8  6EF7               	movwf	tblptrh,c
   478  0024BA  0100               	movlb	0
   479  0024BC  EF9A  F00C         	goto	_main	;jump to C main() function
   480                           tblptru	equ	0xFF8
   481                           tblptrh	equ	0xFF7
   482                           tblptrl	equ	0xFF6
   483                           tablat	equ	0xFF5
   484                           prodl	equ	0xFF3
   485                           intcon	equ	0xFF2
   486                           intcon2	equ	0xFF1
   487                           postinc0	equ	0xFEE
   488                           wreg	equ	0xFE8
   489                           postdec1	equ	0xFE5
   490                           fsr1l	equ	0xFE1
   491                           indf2	equ	0xFDF
   492                           postinc2	equ	0xFDE
   493                           postdec2	equ	0xFDD
   494                           fsr2h	equ	0xFDA
   495                           fsr2l	equ	0xFD9
   496                           status	equ	0xFD8
   497                           
   498                           	psect	bssCOMRAM
   499  00005A                     __pbssCOMRAM:
   500                           	opt stack 0
   501  00005A                     _LCD_function:
   502                           	opt stack 0
   503  00005A                     	ds	1
   504  00005B                     _txiptr:
   505                           	opt stack 0
   506  00005B                     	ds	1
   507  00005C                     _txoptr:
   508                           	opt stack 0
   509  00005C                     	ds	1
   510                           tblptru	equ	0xFF8
   511                           tblptrh	equ	0xFF7
   512                           tblptrl	equ	0xFF6
   513                           tablat	equ	0xFF5
   514                           prodl	equ	0xFF3
   515                           intcon	equ	0xFF2
   516                           intcon2	equ	0xFF1
   517                           postinc0	equ	0xFEE
   518                           wreg	equ	0xFE8
   519                           postdec1	equ	0xFE5
   520                           fsr1l	equ	0xFE1
   521                           indf2	equ	0xFDF
   522                           postinc2	equ	0xFDE
   523                           postdec2	equ	0xFDD
   524                           fsr2h	equ	0xFDA
   525                           fsr2l	equ	0xFD9
   526                           status	equ	0xFD8
   527                           
   528                           	psect	bssBANK0
   529  0000BA                     __pbssBANK0:
   530                           	opt stack 0
   531  0000BA                     _F2:
   532                           	opt stack 0
   533  0000BA                     	ds	4
   534  0000BE                     _F3:
   535                           	opt stack 0
   536  0000BE                     	ds	4
   537  0000C2                     _msecs:
   538                           	opt stack 0
   539  0000C2                     	ds	4
   540  0000C6                     _seconds:
   541                           	opt stack 0
   542  0000C6                     	ds	4
   543  0000CA                     _timer1of:
   544                           	opt stack 0
   545  0000CA                     	ds	4
   546  0000CE                     _blink:
   547                           	opt stack 0
   548  0000CE                     	ds	2
   549  0000D0                     _LCD_ctrl:
   550                           	opt stack 0
   551  0000D0                     	ds	1
   552  0000D1                     _LCD_lines:
   553                           	opt stack 0
   554  0000D1                     	ds	1
   555  0000D2                     _LCD_mode:
   556                           	opt stack 0
   557  0000D2                     	ds	1
   558  0000D3                     _rxiptr:
   559                           	opt stack 0
   560  0000D3                     	ds	1
   561  0000D4                     _rxoptr:
   562                           	opt stack 0
   563  0000D4                     	ds	1
   564  0000D5                     _ser_tmp:
   565                           	opt stack 0
   566  0000D5                     	ds	1
   567  0000D6                     _buffer:
   568                           	opt stack 0
   569  0000D6                     	ds	17
   570  0000E7                     _F1:
   571                           	opt stack 0
   572  0000E7                     	ds	4
   573                           tblptru	equ	0xFF8
   574                           tblptrh	equ	0xFF7
   575                           tblptrl	equ	0xFF6
   576                           tablat	equ	0xFF5
   577                           prodl	equ	0xFF3
   578                           intcon	equ	0xFF2
   579                           intcon2	equ	0xFF1
   580                           postinc0	equ	0xFEE
   581                           wreg	equ	0xFE8
   582                           postdec1	equ	0xFE5
   583                           fsr1l	equ	0xFE1
   584                           indf2	equ	0xFDF
   585                           postinc2	equ	0xFDE
   586                           postdec2	equ	0xFDD
   587                           fsr2h	equ	0xFDA
   588                           fsr2l	equ	0xFD9
   589                           status	equ	0xFD8
   590                           
   591                           	psect	dataBANK0
   592  0000F3                     __pdataBANK0:
   593                           	opt stack 0
   594  0000F3                     lcd_gotoxy@F6470:
   595                           	opt stack 0
   596  0000F3                     	ds	4
   597  0000F7                     _mode:
   598                           	opt stack 0
   599  0000F7                     	ds	1
   600                           tblptru	equ	0xFF8
   601                           tblptrh	equ	0xFF7
   602                           tblptrl	equ	0xFF6
   603                           tablat	equ	0xFF5
   604                           prodl	equ	0xFF3
   605                           intcon	equ	0xFF2
   606                           intcon2	equ	0xFF1
   607                           postinc0	equ	0xFEE
   608                           wreg	equ	0xFE8
   609                           postdec1	equ	0xFE5
   610                           fsr1l	equ	0xFE1
   611                           indf2	equ	0xFDF
   612                           postinc2	equ	0xFDE
   613                           postdec2	equ	0xFDD
   614                           fsr2h	equ	0xFDA
   615                           fsr2l	equ	0xFD9
   616                           status	equ	0xFD8
   617                           
   618                           	psect	bssBANK1
   619  000100                     __pbssBANK1:
   620                           	opt stack 0
   621  000100                     _rxfifo:
   622                           	opt stack 0
   623  000100                     	ds	16
   624  000110                     _txfifo:
   625                           	opt stack 0
   626  000110                     	ds	16
   627                           tblptru	equ	0xFF8
   628                           tblptrh	equ	0xFF7
   629                           tblptrl	equ	0xFF6
   630                           tablat	equ	0xFF5
   631                           prodl	equ	0xFF3
   632                           intcon	equ	0xFF2
   633                           intcon2	equ	0xFF1
   634                           postinc0	equ	0xFEE
   635                           wreg	equ	0xFE8
   636                           postdec1	equ	0xFE5
   637                           fsr1l	equ	0xFE1
   638                           indf2	equ	0xFDF
   639                           postinc2	equ	0xFDE
   640                           postdec2	equ	0xFDD
   641                           fsr2h	equ	0xFDA
   642                           fsr2l	equ	0xFD9
   643                           status	equ	0xFD8
   644                           
   645                           	psect	cstackBANK0
   646  000060                     __pcstackBANK0:
   647                           	opt stack 0
   648  000060                     ___fltol@sign1:
   649                           	opt stack 0
   650                           
   651                           ; 1 bytes @ 0x0
   652  000060                     	ds	1
   653  000061                     ___fltol@exp1:
   654                           	opt stack 0
   655                           
   656                           ; 1 bytes @ 0x1
   657  000061                     	ds	1
   658  000062                     ?___altofl:
   659                           	opt stack 0
   660  000062                     measure_inductance@numerator:
   661                           	opt stack 0
   662  000062                     ___altofl@c:
   663                           	opt stack 0
   664                           
   665                           ; 4 bytes @ 0x2
   666  000062                     	ds	4
   667  000066                     ___altofl@sign:
   668                           	opt stack 0
   669  000066                     measure_inductance@denominator:
   670                           	opt stack 0
   671                           
   672                           ; 4 bytes @ 0x6
   673  000066                     	ds	1
   674  000067                     ?_floor:
   675                           	opt stack 0
   676  000067                     floor@x:
   677                           	opt stack 0
   678                           
   679                           ; 4 bytes @ 0x7
   680  000067                     	ds	3
   681  00006A                     _measure_inductance$1111:
   682                           	opt stack 0
   683                           
   684                           ; 4 bytes @ 0xA
   685  00006A                     	ds	1
   686  00006B                     floor@i:
   687                           	opt stack 0
   688                           
   689                           ; 4 bytes @ 0xB
   690  00006B                     	ds	3
   691  00006E                     _measure_inductance$1115:
   692                           	opt stack 0
   693                           
   694                           ; 4 bytes @ 0xE
   695  00006E                     	ds	1
   696  00006F                     floor@expon:
   697                           	opt stack 0
   698                           
   699                           ; 2 bytes @ 0xF
   700  00006F                     	ds	2
   701  000071                     ?_exp:
   702                           	opt stack 0
   703  000071                     exp@x:
   704                           	opt stack 0
   705                           
   706                           ; 4 bytes @ 0x11
   707  000071                     	ds	1
   708  000072                     _measure_inductance$1116:
   709                           	opt stack 0
   710                           
   711                           ; 4 bytes @ 0x12
   712  000072                     	ds	3
   713  000075                     _exp$1123:
   714                           	opt stack 0
   715                           
   716                           ; 4 bytes @ 0x15
   717  000075                     	ds	1
   718  000076                     _measure_inductance$1117:
   719                           	opt stack 0
   720                           
   721                           ; 4 bytes @ 0x16
   722  000076                     	ds	3
   723  000079                     exp@exponent:
   724                           	opt stack 0
   725                           
   726                           ; 2 bytes @ 0x19
   727  000079                     	ds	1
   728  00007A                     measure_inductance@unit:
   729                           	opt stack 0
   730                           
   731                           ; 1 bytes @ 0x1A
   732  00007A                     	ds	1
   733  00007B                     exp@sign:
   734                           	opt stack 0
   735  00007B                     _measure_inductance$1112:
   736                           	opt stack 0
   737                           
   738                           ; 4 bytes @ 0x1B
   739  00007B                     	ds	1
   740  00007C                     ?_pow:
   741                           	opt stack 0
   742  00007C                     pow@x:
   743                           	opt stack 0
   744                           
   745                           ; 4 bytes @ 0x1C
   746  00007C                     	ds	3
   747  00007F                     _measure_inductance$1113:
   748                           	opt stack 0
   749                           
   750                           ; 4 bytes @ 0x1F
   751  00007F                     	ds	1
   752  000080                     pow@y:
   753                           	opt stack 0
   754                           
   755                           ; 4 bytes @ 0x20
   756  000080                     	ds	3
   757  000083                     _measure_inductance$1114:
   758                           	opt stack 0
   759                           
   760                           ; 4 bytes @ 0x23
   761  000083                     	ds	1
   762  000084                     _pow$1121:
   763                           	opt stack 0
   764                           
   765                           ; 4 bytes @ 0x24
   766  000084                     	ds	3
   767  000087                     measure_inductance@var:
   768                           	opt stack 0
   769                           
   770                           ; 2 bytes @ 0x27
   771  000087                     	ds	1
   772  000088                     _pow$1122:
   773                           	opt stack 0
   774                           
   775                           ; 4 bytes @ 0x28
   776  000088                     	ds	1
   777  000089                     measure_inductance@Lin:
   778                           	opt stack 0
   779                           
   780                           ; 4 bytes @ 0x29
   781  000089                     	ds	3
   782  00008C                     pow@sign:
   783                           	opt stack 0
   784                           
   785                           ; 1 bytes @ 0x2C
   786  00008C                     	ds	1
   787  00008D                     pow@yi:
   788                           	opt stack 0
   789                           
   790                           ; 4 bytes @ 0x2D
   791  00008D                     	ds	4
   792  000091                     format_double@num:
   793                           	opt stack 0
   794                           
   795                           ; 4 bytes @ 0x31
   796  000091                     	ds	4
   797  000095                     _format_double$1106:
   798                           	opt stack 0
   799                           
   800                           ; 4 bytes @ 0x35
   801  000095                     	ds	4
   802  000099                     _format_double$1107:
   803                           	opt stack 0
   804                           
   805                           ; 4 bytes @ 0x39
   806  000099                     	ds	4
   807  00009D                     format_double@weight:
   808                           	opt stack 0
   809                           
   810                           ; 4 bytes @ 0x3D
   811  00009D                     	ds	4
   812  0000A1                     format_double@digit:
   813                           	opt stack 0
   814                           
   815                           ; 2 bytes @ 0x41
   816  0000A1                     	ds	2
   817  0000A3                     format_double@m:
   818                           	opt stack 0
   819                           
   820                           ; 2 bytes @ 0x43
   821  0000A3                     	ds	2
   822  0000A5                     _measure_capacitance$1108:
   823                           	opt stack 0
   824                           
   825                           ; 4 bytes @ 0x45
   826  0000A5                     	ds	4
   827  0000A9                     _measure_capacitance$1109:
   828                           	opt stack 0
   829                           
   830                           ; 4 bytes @ 0x49
   831  0000A9                     	ds	4
   832  0000AD                     _measure_capacitance$1110:
   833                           	opt stack 0
   834                           
   835                           ; 4 bytes @ 0x4D
   836  0000AD                     	ds	4
   837  0000B1                     measure_capacitance@unit:
   838                           	opt stack 0
   839                           
   840                           ; 1 bytes @ 0x51
   841  0000B1                     	ds	1
   842  0000B2                     measure_capacitance@var:
   843                           	opt stack 0
   844                           
   845                           ; 2 bytes @ 0x52
   846  0000B2                     	ds	2
   847  0000B4                     measure_capacitance@Cin:
   848                           	opt stack 0
   849                           
   850                           ; 4 bytes @ 0x54
   851  0000B4                     	ds	4
   852  0000B8                     _main$404:
   853                           	opt stack 0
   854                           
   855                           ; 1 bytes @ 0x58
   856  0000B8                     	ds	1
   857  0000B9                     main@new_mode:
   858                           	opt stack 0
   859                           
   860                           ; 1 bytes @ 0x59
   861  0000B9                     	ds	1
   862                           tblptru	equ	0xFF8
   863                           tblptrh	equ	0xFF7
   864                           tblptrl	equ	0xFF6
   865                           tablat	equ	0xFF5
   866                           prodl	equ	0xFF3
   867                           intcon	equ	0xFF2
   868                           intcon2	equ	0xFF1
   869                           postinc0	equ	0xFEE
   870                           wreg	equ	0xFE8
   871                           postdec1	equ	0xFE5
   872                           fsr1l	equ	0xFE1
   873                           indf2	equ	0xFDF
   874                           postinc2	equ	0xFDE
   875                           postdec2	equ	0xFDD
   876                           fsr2h	equ	0xFDA
   877                           fsr2l	equ	0xFD9
   878                           status	equ	0xFD8
   879                           
   880                           	psect	cstackCOMRAM
   881  000001                     __pcstackCOMRAM:
   882                           	opt stack 0
   883  000001                     ??_global_int:
   884  000001                     
   885                           ; 1 bytes @ 0x0
   886  000001                     	ds	3
   887  000004                     ??_buffer_putch:
   888  000004                     ??_timer2_init:
   889  000004                     ?_timer0_read_ps:
   890                           	opt stack 0
   891  000004                     ?___lwdiv:
   892                           	opt stack 0
   893  000004                     ?___lwmod:
   894                           	opt stack 0
   895  000004                     ?___flpack:
   896                           	opt stack 0
   897  000004                     ?_frexp:
   898                           	opt stack 0
   899  000004                     ?___flneg:
   900                           	opt stack 0
   901  000004                     lcd_write4bits@value:
   902                           	opt stack 0
   903  000004                     lcd_init@fourbitmode:
   904                           	opt stack 0
   905  000004                     ser_putch@c:
   906                           	opt stack 0
   907  000004                     _timer0_init$152:
   908                           	opt stack 0
   909  000004                     ___lwdiv@dividend:
   910                           	opt stack 0
   911  000004                     ___lwmod@dividend:
   912                           	opt stack 0
   913  000004                     ___flpack@arg:
   914                           	opt stack 0
   915  000004                     ___flge@ff1:
   916                           	opt stack 0
   917  000004                     ___flneg@f1:
   918                           	opt stack 0
   919  000004                     frexp@value:
   920                           	opt stack 0
   921                           
   922                           ; 4 bytes @ 0x3
   923  000004                     	ds	1
   924  000005                     lcd_send@mode:
   925                           	opt stack 0
   926  000005                     timer2_init@ps:
   927                           	opt stack 0
   928  000005                     ser_puts@s:
   929                           	opt stack 0
   930  000005                     _lcd_init$134:
   931                           	opt stack 0
   932                           
   933                           ; 2 bytes @ 0x4
   934  000005                     	ds	1
   935  000006                     ??_print_buffer:
   936  000006                     ??_timer0_read_ps:
   937  000006                     buffer_putch@ch:
   938                           	opt stack 0
   939  000006                     lcd_send@value:
   940                           	opt stack 0
   941  000006                     _timer0_init$153:
   942                           	opt stack 0
   943  000006                     ___lwdiv@divisor:
   944                           	opt stack 0
   945  000006                     ___lwmod@divisor:
   946                           	opt stack 0
   947                           
   948                           ; 2 bytes @ 0x5
   949  000006                     	ds	1
   950  000007                     ??_lcd_puts:
   951  000007                     buffer_puts@x:
   952                           	opt stack 0
   953  000007                     lcd_command@value:
   954                           	opt stack 0
   955  000007                     timer2_init@ps_mode:
   956                           	opt stack 0
   957  000007                     output_putch@c:
   958                           	opt stack 0
   959  000007                     print_buffer@i:
   960                           	opt stack 0
   961                           
   962                           ; 1 bytes @ 0x6
   963  000007                     	ds	1
   964  000008                     ??_put_str:
   965  000008                     ??_lcd_clear:
   966  000008                     lcd_gotoxy@row:
   967                           	opt stack 0
   968  000008                     lcd_puts@i:
   969                           	opt stack 0
   970  000008                     lcd_begin@dotsize:
   971                           	opt stack 0
   972  000008                     timer0_read_ps@prev:
   973                           	opt stack 0
   974  000008                     ___flpack@exp:
   975                           	opt stack 0
   976  000008                     frexp@eptr:
   977                           	opt stack 0
   978  000008                     ___lwmod@counter:
   979                           	opt stack 0
   980  000008                     _timer0_init$154:
   981                           	opt stack 0
   982  000008                     ___lwdiv@quotient:
   983                           	opt stack 0
   984  000008                     ___flge@ff2:
   985                           	opt stack 0
   986                           
   987                           ; 4 bytes @ 0x7
   988  000008                     	ds	1
   989  000009                     ??_frexp:
   990  000009                     ??_lcd_begin:
   991  000009                     lcd_gotoxy@col:
   992                           	opt stack 0
   993  000009                     lcd_puts@string:
   994                           	opt stack 0
   995  000009                     ___flpack@sign:
   996                           	opt stack 0
   997  000009                     timer0_read_ps@count:
   998                           	opt stack 0
   999  000009                     put_str@i:
  1000                           	opt stack 0
  1001                           
  1002                           ; 2 bytes @ 0x8
  1003  000009                     	ds	1
  1004  00000A                     ??___flpack:
  1005  00000A                     lcd_begin@lines:
  1006                           	opt stack 0
  1007  00000A                     ___lwdiv@counter:
  1008                           	opt stack 0
  1009  00000A                     _timer0_init$155:
  1010                           	opt stack 0
  1011  00000A                     lcd_gotoxy@row_offsets:
  1012                           	opt stack 0
  1013                           
  1014                           ; 4 bytes @ 0x9
  1015  00000A                     	ds	1
  1016  00000B                     put_str@s:
  1017                           	opt stack 0
  1018  00000B                     format_number@n:
  1019                           	opt stack 0
  1020                           
  1021                           ; 2 bytes @ 0xA
  1022  00000B                     	ds	1
  1023  00000C                     _timer0_init$156:
  1024                           	opt stack 0
  1025                           
  1026                           ; 2 bytes @ 0xB
  1027  00000C                     	ds	1
  1028  00000D                     format_number@base:
  1029                           	opt stack 0
  1030                           
  1031                           ; 1 bytes @ 0xC
  1032  00000D                     	ds	1
  1033  00000E                     ??_print_unit:
  1034  00000E                     ?___fldiv:
  1035                           	opt stack 0
  1036  00000E                     ?___awtofl:
  1037                           	opt stack 0
  1038  00000E                     ?___lltofl:
  1039                           	opt stack 0
  1040  00000E                     format_number@pad:
  1041                           	opt stack 0
  1042  00000E                     timer0_init@prescaler:
  1043                           	opt stack 0
  1044  00000E                     print_indicator@indicate:
  1045                           	opt stack 0
  1046  00000E                     ___awtofl@c:
  1047                           	opt stack 0
  1048  00000E                     ___fldiv@f1:
  1049                           	opt stack 0
  1050  00000E                     ___lltofl@c:
  1051                           	opt stack 0
  1052                           
  1053                           ; 4 bytes @ 0xD
  1054  00000E                     	ds	1
  1055  00000F                     ??_format_number:
  1056  00000F                     timer0_init@ps_mode:
  1057                           	opt stack 0
  1058                           
  1059                           ; 1 bytes @ 0xE
  1060  00000F                     	ds	2
  1061  000011                     format_number@buf:
  1062                           	opt stack 0
  1063                           
  1064                           ; 32 bytes @ 0x10
  1065  000011                     	ds	1
  1066  000012                     ___awtofl@sign:
  1067                           	opt stack 0
  1068  000012                     ___fldiv@f2:
  1069                           	opt stack 0
  1070                           
  1071                           ; 4 bytes @ 0x11
  1072  000012                     	ds	4
  1073  000016                     ___fldiv@f3:
  1074                           	opt stack 0
  1075                           
  1076                           ; 4 bytes @ 0x15
  1077  000016                     	ds	4
  1078  00001A                     ___fldiv@cntr:
  1079                           	opt stack 0
  1080                           
  1081                           ; 1 bytes @ 0x19
  1082  00001A                     	ds	1
  1083  00001B                     ___fldiv@exp:
  1084                           	opt stack 0
  1085                           
  1086                           ; 1 bytes @ 0x1A
  1087  00001B                     	ds	1
  1088  00001C                     ___fldiv@sign:
  1089                           	opt stack 0
  1090                           
  1091                           ; 1 bytes @ 0x1B
  1092  00001C                     	ds	1
  1093  00001D                     ?___flmul:
  1094                           	opt stack 0
  1095  00001D                     ___flmul@f1:
  1096                           	opt stack 0
  1097                           
  1098                           ; 4 bytes @ 0x1C
  1099  00001D                     	ds	4
  1100  000021                     ___flmul@f2:
  1101                           	opt stack 0
  1102                           
  1103                           ; 4 bytes @ 0x20
  1104  000021                     	ds	4
  1105  000025                     ___flmul@exp:
  1106                           	opt stack 0
  1107                           
  1108                           ; 1 bytes @ 0x24
  1109  000025                     	ds	1
  1110  000026                     ___flmul@f3_as_product:
  1111                           	opt stack 0
  1112                           
  1113                           ; 4 bytes @ 0x25
  1114  000026                     	ds	4
  1115  00002A                     ___flmul@cntr:
  1116                           	opt stack 0
  1117                           
  1118                           ; 1 bytes @ 0x29
  1119  00002A                     	ds	1
  1120  00002B                     ___flmul@sign:
  1121                           	opt stack 0
  1122                           
  1123                           ; 1 bytes @ 0x2A
  1124  00002B                     	ds	1
  1125  00002C                     ?___fladd:
  1126                           	opt stack 0
  1127  00002C                     ___fladd@f1:
  1128                           	opt stack 0
  1129                           
  1130                           ; 4 bytes @ 0x2B
  1131  00002C                     	ds	4
  1132  000030                     ___fladd@f2:
  1133                           	opt stack 0
  1134                           
  1135                           ; 4 bytes @ 0x2F
  1136  000030                     	ds	1
  1137  000031                     _format_number$68:
  1138                           	opt stack 0
  1139                           
  1140                           ; 2 bytes @ 0x30
  1141  000031                     	ds	2
  1142  000033                     format_number@padchar:
  1143                           	opt stack 0
  1144                           
  1145                           ; 1 bytes @ 0x32
  1146  000033                     	ds	1
  1147  000034                     ??___fladd:
  1148  000034                     format_number@di:
  1149                           	opt stack 0
  1150                           
  1151                           ; 1 bytes @ 0x33
  1152  000034                     	ds	1
  1153  000035                     format_number@i:
  1154                           	opt stack 0
  1155  000035                     ___fladd@sign:
  1156                           	opt stack 0
  1157                           
  1158                           ; 1 bytes @ 0x34
  1159  000035                     	ds	1
  1160  000036                     ?_measure_freq:
  1161                           	opt stack 0
  1162  000036                     ___fladd@exp2:
  1163                           	opt stack 0
  1164  000036                     print_reading@measurement:
  1165                           	opt stack 0
  1166  000036                     format_xint32@x:
  1167                           	opt stack 0
  1168                           
  1169                           ; 4 bytes @ 0x35
  1170  000036                     	ds	1
  1171  000037                     ___fladd@exp1:
  1172                           	opt stack 0
  1173                           
  1174                           ; 1 bytes @ 0x36
  1175  000037                     	ds	1
  1176  000038                     ??_measure_freq:
  1177  000038                     ?___flsub:
  1178                           	opt stack 0
  1179  000038                     ?_eval_poly:
  1180                           	opt stack 0
  1181  000038                     _print_reading$1118:
  1182                           	opt stack 0
  1183  000038                     ___flsub@f1:
  1184                           	opt stack 0
  1185  000038                     eval_poly@x:
  1186                           	opt stack 0
  1187                           
  1188                           ; 4 bytes @ 0x37
  1189  000038                     	ds	1
  1190  000039                     measure_freq@count:
  1191                           	opt stack 0
  1192                           
  1193                           ; 2 bytes @ 0x38
  1194  000039                     	ds	1
  1195  00003A                     _print_reading$1119:
  1196                           	opt stack 0
  1197                           
  1198                           ; 2 bytes @ 0x39
  1199  00003A                     	ds	1
  1200  00003B                     ?___lwtofl:
  1201                           	opt stack 0
  1202  00003B                     ___lwtofl@c:
  1203                           	opt stack 0
  1204                           
  1205                           ; 2 bytes @ 0x3A
  1206  00003B                     	ds	1
  1207  00003C                     eval_poly@d:
  1208                           	opt stack 0
  1209  00003C                     ___flsub@f2:
  1210                           	opt stack 0
  1211                           
  1212                           ; 4 bytes @ 0x3B
  1213  00003C                     	ds	1
  1214  00003D                     eval_poly@n:
  1215                           	opt stack 0
  1216                           
  1217                           ; 2 bytes @ 0x3C
  1218  00003D                     	ds	2
  1219  00003F                     ??_eval_poly:
  1220  00003F                     calibrate@i:
  1221                           	opt stack 0
  1222                           
  1223                           ; 1 bytes @ 0x3E
  1224  00003F                     	ds	1
  1225  000040                     eval_poly@res:
  1226                           	opt stack 0
  1227                           
  1228                           ; 4 bytes @ 0x3F
  1229  000040                     	ds	4
  1230  000044                     ?_ldexp:
  1231                           	opt stack 0
  1232  000044                     ?_log:
  1233                           	opt stack 0
  1234  000044                     ldexp@value:
  1235                           	opt stack 0
  1236  000044                     log@x:
  1237                           	opt stack 0
  1238                           
  1239                           ; 4 bytes @ 0x43
  1240  000044                     	ds	4
  1241  000048                     ldexp@newexp:
  1242                           	opt stack 0
  1243  000048                     log@exponent:
  1244                           	opt stack 0
  1245                           
  1246                           ; 2 bytes @ 0x47
  1247  000048                     	ds	2
  1248  00004A                     ??_ldexp:
  1249  00004A                     ?_log10:
  1250                           	opt stack 0
  1251  00004A                     log10@x:
  1252                           	opt stack 0
  1253                           
  1254                           ; 4 bytes @ 0x49
  1255  00004A                     	ds	4
  1256  00004E                     _log10$1120:
  1257                           	opt stack 0
  1258                           
  1259                           ; 4 bytes @ 0x4D
  1260  00004E                     	ds	4
  1261  000052                     ?___fltol:
  1262                           	opt stack 0
  1263  000052                     ___fltol@f1:
  1264                           	opt stack 0
  1265                           
  1266                           ; 4 bytes @ 0x51
  1267  000052                     	ds	4
  1268  000056                     ??___fltol:
  1269                           
  1270                           ; 0 bytes @ 0x55
  1271  000056                     	ds	4
  1272  00005A                     tblptru	equ	0xFF8
  1273                           tblptrh	equ	0xFF7
  1274                           tblptrl	equ	0xFF6
  1275                           tablat	equ	0xFF5
  1276                           prodl	equ	0xFF3
  1277                           intcon	equ	0xFF2
  1278                           intcon2	equ	0xFF1
  1279                           postinc0	equ	0xFEE
  1280                           wreg	equ	0xFE8
  1281                           postdec1	equ	0xFE5
  1282                           fsr1l	equ	0xFE1
  1283                           indf2	equ	0xFDF
  1284                           postinc2	equ	0xFDE
  1285                           postdec2	equ	0xFDD
  1286                           fsr2h	equ	0xFDA
  1287                           fsr2l	equ	0xFD9
  1288                           status	equ	0xFD8
  1289                           
  1290                           ; 0 bytes @ 0x59
  1291 ;;
  1292 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1293 ;;
  1294 ;; *************** function _main *****************
  1295 ;; Defined at:
  1296 ;;		line 113 in file "../../../LC-meter.c"
  1297 ;; Parameters:    Size  Location     Type
  1298 ;;		None
  1299 ;; Auto vars:     Size  Location     Type
  1300 ;;  new_mode        1   89[BANK0 ] unsigned char 
  1301 ;; Return value:  Size  Location     Type
  1302 ;;		None               void
  1303 ;; Registers used:
  1304 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1305 ;; Tracked objects:
  1306 ;;		On entry : 0/0
  1307 ;;		On exit  : 0/0
  1308 ;;		Unchanged: 0/0
  1309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1310 ;;      Params:         0       0       0       0       0       0       0       0       0
  1311 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1312 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1313 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1314 ;;Total ram usage:        2 bytes
  1315 ;; Hardware stack levels required when called:    8
  1316 ;; This function calls:
  1317 ;;		_calibrate
  1318 ;;		_delay10ms
  1319 ;;		_format_double
  1320 ;;		_lcd_begin
  1321 ;;		_lcd_clear
  1322 ;;		_lcd_gotoxy
  1323 ;;		_lcd_init
  1324 ;;		_lcd_puts
  1325 ;;		_measure_capacitance
  1326 ;;		_measure_inductance
  1327 ;;		_print_indicator
  1328 ;;		_ser_init
  1329 ;;		_ser_puts
  1330 ;;		_timer0_init
  1331 ;;		_timer2_init
  1332 ;; This function is called by:
  1333 ;;		Startup code after reset
  1334 ;; This function uses a non-reentrant model
  1335 ;;
  1336                           
  1337                           	psect	text0
  1338  001934                     __ptext0:
  1339                           	opt stack 0
  1340  001934                     _main:
  1341                           	opt stack 23
  1342                           
  1343                           ;LC-meter.c: 114: bres = msecpart = msecs = seconds = 0;
  1344                           
  1345                           ;incstack = 0
  1346  001934  0100               	movlb	0	; () banked
  1347  001936  6BC6               	clrf	_seconds& (0+255),b	;volatile
  1348  001938  6BC7               	clrf	(_seconds+1)& (0+255),b	;volatile
  1349  00193A  6BC8               	clrf	(_seconds+2)& (0+255),b	;volatile
  1350  00193C  6BC9               	clrf	(_seconds+3)& (0+255),b	;volatile
  1351  00193E  C0C6  F0C2         	movff	_seconds,_msecs	;volatile
  1352  001942  C0C7  F0C3         	movff	_seconds+1,_msecs+1	;volatile
  1353  001946  C0C8  F0C4         	movff	_seconds+2,_msecs+2	;volatile
  1354  00194A  C0C9  F0C5         	movff	_seconds+3,_msecs+3	;volatile
  1355  00194E  C0C2  F0F1         	movff	_msecs,_msecpart	;volatile
  1356  001952  C0C3  F0F2         	movff	_msecs+1,_msecpart+1	;volatile
  1357  001956  C0F1  F0EF         	movff	_msecpart,_bres	;volatile
  1358  00195A  C0F2  F0F0         	movff	_msecpart+1,_bres+1	;volatile
  1359                           
  1360                           ; BSR set to: 0
  1361                           ;LC-meter.c: 115: mode = -1;
  1362  00195E  69F7               	setf	_mode& (0+255),b
  1363                           
  1364                           ;LC-meter.c: 117: CCal = 1000;
  1365  001960  6BEB               	clrf	_CCal& (0+255),b
  1366  001962  6BEC               	clrf	(_CCal+1)& (0+255),b
  1367  001964  0E7A               	movlw	122
  1368  001966  6FED               	movwf	(_CCal+2)& (0+255),b
  1369  001968  0E44               	movlw	68
  1370  00196A  6FEE               	movwf	(_CCal+3)& (0+255),b
  1371                           
  1372                           ;LC-meter.c: 127: TRISA = 0b11001111;
  1373  00196C  0ECF               	movlw	207
  1374  00196E  6E92               	movwf	3986,c	;volatile
  1375                           
  1376                           ; BSR set to: 0
  1377                           ;LC-meter.c: 130: timer0_init(0b1000 | 0x20 | 0x40);
  1378  001970  0E68               	movlw	104
  1379  001972  EC59  F011         	call	_timer0_init
  1380                           
  1381                           ; BSR set to: 0
  1382                           ;LC-meter.c: 137: INTCON2 &= ~0b10000000;
  1383  001976  9EF1               	bcf	intcon2,7,c	;volatile
  1384                           
  1385                           ; BSR set to: 0
  1386                           ;LC-meter.c: 143: TRISC &= ~0b00000100;
  1387  001978  9494               	bcf	3988,2,c	;volatile
  1388                           
  1389                           ; BSR set to: 0
  1390                           ;LC-meter.c: 144: LATC &= ~0b00000100; LATC |= (!!(1)) << 2;;
  1391  00197A  948B               	bcf	3979,2,c	;volatile
  1392                           
  1393                           ; BSR set to: 0
  1394  00197C  848B               	bsf	3979,2,c	;volatile
  1395                           
  1396                           ; BSR set to: 0
  1397                           ;LC-meter.c: 146: timer2_init(0b000 | 0x80);
  1398  00197E  0E80               	movlw	128
  1399  001980  ECAC  F013         	call	_timer2_init
  1400                           
  1401                           ;LC-meter.c: 151: TRISC = 0b10110101;
  1402  001984  0EB5               	movlw	181
  1403  001986  6E94               	movwf	3988,c	;volatile
  1404                           
  1405                           ;LC-meter.c: 160: lcd_init(1);
  1406  001988  0E01               	movlw	1
  1407  00198A  ECDA  F013         	call	_lcd_init
  1408                           
  1409                           ; BSR set to: 0
  1410                           ;LC-meter.c: 161: lcd_begin(2, 1);
  1411  00198E  0E01               	movlw	1
  1412  001990  6E08               	movwf	lcd_begin@dotsize,c
  1413  001992  0E02               	movlw	2
  1414  001994  EC8B  F00E         	call	_lcd_begin
  1415                           
  1416                           ;LC-meter.c: 164: TRISC |= (1 << 4);
  1417  001998  8894               	bsf	3988,4,c	;volatile
  1418                           
  1419                           ;LC-meter.c: 165: TRISC &= ~(1 << 5);
  1420  00199A  9A94               	bcf	3988,5,c	;volatile
  1421                           
  1422                           ;LC-meter.c: 167: LATC &= ~(1 << 5);
  1423  00199C  9A8B               	bcf	3979,5,c	;volatile
  1424                           
  1425                           ;LC-meter.c: 168: delay10ms(50);
  1426  00199E  0E32               	movlw	50
  1427  0019A0  ECFB  F014         	call	_delay10ms
  1428                           
  1429                           ;LC-meter.c: 169: LATC |= (1 << 5);
  1430  0019A4  8A8B               	bsf	3979,5,c	;volatile
  1431                           
  1432                           ;LC-meter.c: 170: delay10ms(50);
  1433  0019A6  0E32               	movlw	50
  1434  0019A8  ECFB  F014         	call	_delay10ms
  1435                           
  1436                           ;LC-meter.c: 171: LATC &= ~(1 << 5);
  1437  0019AC  9A8B               	bcf	3979,5,c	;volatile
  1438                           
  1439                           ;LC-meter.c: 172: delay10ms(50);
  1440  0019AE  0E32               	movlw	50
  1441  0019B0  ECFB  F014         	call	_delay10ms
  1442                           
  1443                           ;LC-meter.c: 173: LATC |= (1 << 5);
  1444  0019B4  8A8B               	bsf	3979,5,c	;volatile
  1445                           
  1446                           ;LC-meter.c: 174: delay10ms(50);
  1447  0019B6  0E32               	movlw	50
  1448  0019B8  ECFB  F014         	call	_delay10ms
  1449                           
  1450                           ;LC-meter.c: 175: LATC &= ~(1 << 5);
  1451  0019BC  9A8B               	bcf	3979,5,c	;volatile
  1452                           
  1453                           ;LC-meter.c: 178: ser_init();
  1454  0019BE  EC6B  F014         	call	_ser_init	;wreg free
  1455                           
  1456                           ; BSR set to: 0
  1457                           ;LC-meter.c: 185: INTCON |= 0xc0;
  1458  0019C2  0EC0               	movlw	192
  1459  0019C4  12F2               	iorwf	intcon,f,c	;volatile
  1460                           
  1461                           ; BSR set to: 0
  1462                           ;LC-meter.c: 191: lcd_gotoxy(0, 0);
  1463  0019C6  0E00               	movlw	0
  1464  0019C8  6A08               	clrf	lcd_gotoxy@row,c
  1465  0019CA  EC77  F013         	call	_lcd_gotoxy
  1466                           
  1467                           ;LC-meter.c: 193: lcd_puts("LC-meter ");
  1468  0019CE  0E95               	movlw	STR_29& (0+255)
  1469  0019D0  ECF0  F013         	call	_lcd_puts
  1470                           
  1471                           ;LC-meter.c: 194: format_double( CCal);
  1472  0019D4  C0EB  F091         	movff	_CCal,format_double@num
  1473  0019D8  C0EC  F092         	movff	_CCal+1,format_double@num+1
  1474  0019DC  C0ED  F093         	movff	_CCal+2,format_double@num+2
  1475  0019E0  C0EE  F094         	movff	_CCal+3,format_double@num+3
  1476  0019E4  EC95  F00A         	call	_format_double	;wreg free
  1477                           
  1478                           ;LC-meter.c: 200: delay10ms(200);
  1479  0019E8  0EC8               	movlw	200
  1480  0019EA  ECFB  F014         	call	_delay10ms
  1481                           
  1482                           ;LC-meter.c: 203: calibrate();
  1483  0019EE  EC1A  F00E         	call	_calibrate	;wreg free
  1484                           
  1485                           ;LC-meter.c: 206: lcd_clear();
  1486  0019F2  ECD8  F014         	call	_lcd_clear	;wreg free
  1487  0019F6                     l4272:
  1488  0019F6  0E01               	movlw	1
  1489                           
  1490                           ;LC-meter.c: 215: char new_mode = (!!(PORTC & 0b10000));
  1491  0019F8  A882               	btfss	3970,4,c	;volatile
  1492  0019FA  0E00               	movlw	0
  1493  0019FC  0100               	movlb	0	; () banked
  1494  0019FE  6FB9               	movwf	main@new_mode& (0+255),b
  1495                           
  1496                           ; BSR set to: 0
  1497                           ;LC-meter.c: 217: if(new_mode != mode) {
  1498  001A00  19F7               	xorwf	_mode& (0+255),w,b
  1499  001A02  E00D               	bz	l4288
  1500                           
  1501                           ; BSR set to: 0
  1502                           ;LC-meter.c: 218: ser_puts(mode ? "- C (Unit: F) -" : "- L (Unit: H) -");
  1503  001A04  51F7               	movf	_mode& (0+255),w,b
  1504                           
  1505                           ; BSR set to: 0
  1506  001A06  0E5D               	movlw	low STR_31
  1507  001A08  A4D8               	btfss	status,2,c
  1508                           
  1509                           ; BSR set to: 0
  1510  001A0A  0E4D               	movlw	low STR_30
  1511  001A0C  6FB8               	movwf	_main$404& (0+255),b
  1512                           
  1513                           ; BSR set to: 0
  1514  001A0E  51B8               	movf	_main$404& (0+255),w,b
  1515  001A10  EC9F  F014         	call	_ser_puts
  1516                           
  1517                           ;LC-meter.c: 219: ser_puts("\r\n");
  1518  001A14  0EF8               	movlw	STR_2& (0+255)
  1519  001A16  EC9F  F014         	call	_ser_puts
  1520                           
  1521                           ;LC-meter.c: 221: mode = new_mode;
  1522  001A1A  C0B9  F0F7         	movff	main@new_mode,_mode
  1523  001A1E                     l4288:
  1524                           
  1525                           ;LC-meter.c: 222: }
  1526                           ;LC-meter.c: 224: if(mode)
  1527  001A1E  0100               	movlb	0	; () banked
  1528  001A20  51F7               	movf	_mode& (0+255),w,b
  1529  001A22  E003               	bz	l4292
  1530                           
  1531                           ; BSR set to: 0
  1532                           ;LC-meter.c: 225: measure_capacitance();
  1533  001A24  ECAF  F006         	call	_measure_capacitance	;wreg free
  1534  001A28  D002               	goto	l559
  1535  001A2A                     l4292:
  1536                           
  1537                           ; BSR set to: 0
  1538                           ;LC-meter.c: 226: else
  1539                           ;LC-meter.c: 227: measure_inductance();
  1540  001A2A  EC7E  F004         	call	_measure_inductance	;wreg free
  1541  001A2E                     l559:
  1542                           
  1543                           ;LC-meter.c: 229: print_indicator(1);
  1544  001A2E  0E01               	movlw	1
  1545  001A30  ECBD  F014         	call	_print_indicator
  1546                           
  1547                           ;LC-meter.c: 230: delay10ms(30);
  1548  001A34  0E1E               	movlw	30
  1549  001A36  ECFB  F014         	call	_delay10ms
  1550                           
  1551                           ;LC-meter.c: 232: print_indicator(0);
  1552  001A3A  0E00               	movlw	0
  1553  001A3C  ECBD  F014         	call	_print_indicator
  1554                           
  1555                           ;LC-meter.c: 233: delay10ms(20);
  1556  001A40  0E14               	movlw	20
  1557  001A42  ECFB  F014         	call	_delay10ms
  1558                           
  1559                           ;LC-meter.c: 234: }
  1560  001A46  D7D7               	goto	l4272
  1561  001A48                     __end_of_main:
  1562                           	opt stack 0
  1563                           tblptru	equ	0xFF8
  1564                           tblptrh	equ	0xFF7
  1565                           tblptrl	equ	0xFF6
  1566                           tablat	equ	0xFF5
  1567                           prodl	equ	0xFF3
  1568                           intcon	equ	0xFF2
  1569                           intcon2	equ	0xFF1
  1570                           postinc0	equ	0xFEE
  1571                           wreg	equ	0xFE8
  1572                           postdec1	equ	0xFE5
  1573                           fsr1l	equ	0xFE1
  1574                           indf2	equ	0xFDF
  1575                           postinc2	equ	0xFDE
  1576                           postdec2	equ	0xFDD
  1577                           fsr2h	equ	0xFDA
  1578                           fsr2l	equ	0xFD9
  1579                           status	equ	0xFD8
  1580                           
  1581 ;; *************** function _timer2_init *****************
  1582 ;; Defined at:
  1583 ;;		line 130 in file "../../../lib/timer.c"
  1584 ;; Parameters:    Size  Location     Type
  1585 ;;  ps_mode         1    wreg     unsigned char 
  1586 ;; Auto vars:     Size  Location     Type
  1587 ;;  ps_mode         1    6[COMRAM] unsigned char 
  1588 ;;  postscaler      1    0        unsigned char 
  1589 ;;  ps              1    4[COMRAM] unsigned char 
  1590 ;; Return value:  Size  Location     Type
  1591 ;;		None               void
  1592 ;; Registers used:
  1593 ;;		wreg, status,2, status,0
  1594 ;; Tracked objects:
  1595 ;;		On entry : F/0
  1596 ;;		On exit  : 0/0
  1597 ;;		Unchanged: 0/0
  1598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1599 ;;      Params:         0       0       0       0       0       0       0       0       0
  1600 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1601 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1602 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1603 ;;Total ram usage:        4 bytes
  1604 ;; Hardware stack levels used:    1
  1605 ;; Hardware stack levels required when called:    1
  1606 ;; This function calls:
  1607 ;;		Nothing
  1608 ;; This function is called by:
  1609 ;;		_main
  1610 ;; This function uses a non-reentrant model
  1611 ;;
  1612                           
  1613                           	psect	text1
  1614  002758                     __ptext1:
  1615                           	opt stack 0
  1616  002758                     _timer2_init:
  1617                           	opt stack 29
  1618                           
  1619                           ;incstack = 0
  1620                           ;timer2_init@ps_mode stored from wreg
  1621  002758  6E07               	movwf	timer2_init@ps_mode,c
  1622                           
  1623                           ; BSR set to: 0
  1624                           ;timer.c: 131: uint8_t ps = ps_mode & 0b1111;
  1625  00275A  5007               	movf	timer2_init@ps_mode,w,c
  1626  00275C  0B0F               	andlw	15
  1627  00275E  6E05               	movwf	timer2_init@ps,c
  1628                           
  1629                           ; BSR set to: 0
  1630                           ;timer.c: 135: T2CON &= ~0b01111111;
  1631  002760  0E80               	movlw	128
  1632  002762  16BA               	andwf	4026,f,c	;volatile
  1633                           
  1634                           ;timer.c: 137: T2CON |= (postscaler & 0b1111) << 3;
  1635  002764  50BA               	movf	4026,w,c	;volatile
  1636                           
  1637                           ;timer.c: 138: T2CON |= (ps & 0b11);
  1638  002766  5005               	movf	timer2_init@ps,w,c
  1639  002768  0B03               	andlw	3
  1640  00276A  12BA               	iorwf	4026,f,c	;volatile
  1641                           
  1642                           ; BSR set to: 0
  1643                           ;timer.c: 140: TMR2 = 0;
  1644  00276C  6ABC               	clrf	4028,c	;volatile
  1645                           
  1646                           ; BSR set to: 0
  1647                           ;timer.c: 142: T2CON |= 0b100;
  1648  00276E  84BA               	bsf	4026,2,c	;volatile
  1649                           
  1650                           ; BSR set to: 0
  1651                           ;timer.c: 145: PIR1 &= ~0b10;
  1652  002770  929E               	bcf	3998,1,c	;volatile
  1653                           
  1654                           ;timer.c: 146: PIE1 = (!!(ps_mode & 0x80)) << 1;
  1655  002772  AE07               	btfss	timer2_init@ps_mode,7,c
  1656  002774  D003               	goto	u2480
  1657  002776  6A04               	clrf	??_timer2_init& (0+255),c
  1658  002778  2A04               	incf	??_timer2_init& (0+255),f,c
  1659  00277A  D001               	goto	u2498
  1660  00277C                     u2480:
  1661  00277C  6A04               	clrf	??_timer2_init& (0+255),c
  1662  00277E                     u2498:
  1663  00277E  90D8               	bcf	status,0,c
  1664  002780  3404               	rlcf	??_timer2_init,w,c
  1665  002782  6E9D               	movwf	3997,c	;volatile
  1666  002784  0012               	return		;funcret
  1667  002786                     __end_of_timer2_init:
  1668                           	opt stack 0
  1669                           tblptru	equ	0xFF8
  1670                           tblptrh	equ	0xFF7
  1671                           tblptrl	equ	0xFF6
  1672                           tablat	equ	0xFF5
  1673                           prodl	equ	0xFF3
  1674                           intcon	equ	0xFF2
  1675                           intcon2	equ	0xFF1
  1676                           postinc0	equ	0xFEE
  1677                           wreg	equ	0xFE8
  1678                           postdec1	equ	0xFE5
  1679                           fsr1l	equ	0xFE1
  1680                           indf2	equ	0xFDF
  1681                           postinc2	equ	0xFDE
  1682                           postdec2	equ	0xFDD
  1683                           fsr2h	equ	0xFDA
  1684                           fsr2l	equ	0xFD9
  1685                           status	equ	0xFD8
  1686                           
  1687 ;; *************** function _timer0_init *****************
  1688 ;; Defined at:
  1689 ;;		line 27 in file "../../../lib/timer.c"
  1690 ;; Parameters:    Size  Location     Type
  1691 ;;  ps_mode         1    wreg     unsigned char 
  1692 ;; Auto vars:     Size  Location     Type
  1693 ;;  ps_mode         1   14[COMRAM] unsigned char 
  1694 ;;  prescaler       1   13[COMRAM] unsigned char 
  1695 ;; Return value:  Size  Location     Type
  1696 ;;		None               void
  1697 ;; Registers used:
  1698 ;;		wreg, status,2, status,0
  1699 ;; Tracked objects:
  1700 ;;		On entry : F/0
  1701 ;;		On exit  : F/0
  1702 ;;		Unchanged: F/0
  1703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1704 ;;      Params:         0       0       0       0       0       0       0       0       0
  1705 ;;      Locals:        12       0       0       0       0       0       0       0       0
  1706 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1707 ;;      Totals:        12       0       0       0       0       0       0       0       0
  1708 ;;Total ram usage:       12 bytes
  1709 ;; Hardware stack levels used:    1
  1710 ;; Hardware stack levels required when called:    1
  1711 ;; This function calls:
  1712 ;;		Nothing
  1713 ;; This function is called by:
  1714 ;;		_main
  1715 ;; This function uses a non-reentrant model
  1716 ;;
  1717                           
  1718                           	psect	text2
  1719  0022B2                     __ptext2:
  1720                           	opt stack 0
  1721  0022B2                     _timer0_init:
  1722                           	opt stack 29
  1723                           
  1724                           ;incstack = 0
  1725                           ;timer0_init@ps_mode stored from wreg
  1726  0022B2  6E0F               	movwf	timer0_init@ps_mode,c
  1727                           
  1728                           ; BSR set to: 0
  1729                           ;timer.c: 28: uint8_t prescaler = ps_mode & 0b1111;
  1730  0022B4  500F               	movf	timer0_init@ps_mode,w,c
  1731  0022B6  0B0F               	andlw	15
  1732  0022B8  6E0E               	movwf	timer0_init@prescaler,c
  1733                           
  1734                           ; BSR set to: 0
  1735                           ;timer.c: 30: TMR0 = 0;
  1736  0022BA  6AD6               	clrf	4054,c	;volatile
  1737  0022BC  6AD7               	clrf	4055,c	;volatile
  1738                           
  1739                           ; BSR set to: 0
  1740                           ;timer.c: 33: T0CON |= (!!(ps_mode & 0x20)) ? 0x20 : 0x00;
  1741  0022BE  BA0F               	btfsc	timer0_init@ps_mode,5,c
  1742  0022C0  D003               	goto	l3268
  1743                           
  1744                           ; BSR set to: 0
  1745  0022C2  6A04               	clrf	_timer0_init$152,c
  1746  0022C4  6A05               	clrf	_timer0_init$152+1,c
  1747  0022C6  D003               	goto	l3270
  1748  0022C8                     l3268:
  1749                           
  1750                           ; BSR set to: 0
  1751  0022C8  6A05               	clrf	_timer0_init$152+1,c
  1752  0022CA  0E20               	movlw	32
  1753  0022CC  6E04               	movwf	_timer0_init$152,c
  1754  0022CE                     l3270:
  1755                           
  1756                           ; BSR set to: 0
  1757  0022CE  5004               	movf	_timer0_init$152,w,c
  1758  0022D0  12D5               	iorwf	4053,f,c	;volatile
  1759                           
  1760                           ; BSR set to: 0
  1761                           ;timer.c: 36: T0CON |= (!!(ps_mode & 0x10)) ? 0x10 : 0x00;
  1762  0022D2  B80F               	btfsc	timer0_init@ps_mode,4,c
  1763  0022D4  D003               	goto	l3276
  1764                           
  1765                           ; BSR set to: 0
  1766  0022D6  6A06               	clrf	_timer0_init$153,c
  1767  0022D8  6A07               	clrf	_timer0_init$153+1,c
  1768  0022DA  D003               	goto	l3278
  1769  0022DC                     l3276:
  1770                           
  1771                           ; BSR set to: 0
  1772  0022DC  6A07               	clrf	_timer0_init$153+1,c
  1773  0022DE  0E10               	movlw	16
  1774  0022E0  6E06               	movwf	_timer0_init$153,c
  1775  0022E2                     l3278:
  1776                           
  1777                           ; BSR set to: 0
  1778  0022E2  5006               	movf	_timer0_init$153,w,c
  1779  0022E4  12D5               	iorwf	4053,f,c	;volatile
  1780                           
  1781                           ; BSR set to: 0
  1782                           ;timer.c: 39: T0CON |= (!!(ps_mode & 0x40)) ? 0x40 : 0x00;
  1783  0022E6  BC0F               	btfsc	timer0_init@ps_mode,6,c
  1784  0022E8  D003               	goto	l3284
  1785                           
  1786                           ; BSR set to: 0
  1787  0022EA  6A08               	clrf	_timer0_init$154,c
  1788  0022EC  6A09               	clrf	_timer0_init$154+1,c
  1789  0022EE  D003               	goto	l3286
  1790  0022F0                     l3284:
  1791                           
  1792                           ; BSR set to: 0
  1793  0022F0  6A09               	clrf	_timer0_init$154+1,c
  1794  0022F2  0E40               	movlw	64
  1795  0022F4  6E08               	movwf	_timer0_init$154,c
  1796  0022F6                     l3286:
  1797                           
  1798                           ; BSR set to: 0
  1799  0022F6  5008               	movf	_timer0_init$154,w,c
  1800  0022F8  12D5               	iorwf	4053,f,c	;volatile
  1801                           
  1802                           ; BSR set to: 0
  1803                           ;timer.c: 44: T0CON &= (!!prescaler) ? ~0x08 : ~0x00;
  1804  0022FA  500E               	movf	timer0_init@prescaler,w,c
  1805  0022FC  E103               	bnz	l3292
  1806                           
  1807                           ; BSR set to: 0
  1808  0022FE  680A               	setf	_timer0_init$155,c
  1809  002300  680B               	setf	_timer0_init$155+1,c
  1810  002302  D003               	goto	l3294
  1811  002304                     l3292:
  1812                           
  1813                           ; BSR set to: 0
  1814  002304  680B               	setf	_timer0_init$155+1,c
  1815  002306  0EF7               	movlw	247
  1816  002308  6E0A               	movwf	_timer0_init$155,c
  1817  00230A                     l3294:
  1818                           
  1819                           ; BSR set to: 0
  1820  00230A  500A               	movf	_timer0_init$155,w,c
  1821  00230C  16D5               	andwf	4053,f,c	;volatile
  1822                           
  1823                           ; BSR set to: 0
  1824                           ;timer.c: 46: T0CON &= ~0b111;
  1825  00230E  0EF8               	movlw	248
  1826  002310  16D5               	andwf	4053,f,c	;volatile
  1827                           
  1828                           ;timer.c: 48: if(prescaler > 0) {
  1829  002312  500E               	movf	timer0_init@prescaler,w,c
  1830  002314  E003               	bz	l3300
  1831                           
  1832                           ; BSR set to: 0
  1833                           ;timer.c: 49: T0CON |= (prescaler - 1) & 0b111;
  1834  002316  040E               	decf	timer0_init@prescaler,w,c
  1835  002318  0B07               	andlw	7
  1836  00231A  12D5               	iorwf	4053,f,c	;volatile
  1837  00231C                     l3300:
  1838                           
  1839                           ; BSR set to: 0
  1840                           ;timer.c: 55: }
  1841                           ;timer.c: 59: INTCON &= ~0x40;
  1842  00231C  9CF2               	bcf	intcon,6,c	;volatile
  1843                           
  1844                           ; BSR set to: 0
  1845                           ;timer.c: 60: INTCON |= (!!(ps_mode & 0x80)) ? 0x20 : 0x00;
  1846  00231E  BE0F               	btfsc	timer0_init@ps_mode,7,c
  1847  002320  D003               	goto	l3306
  1848                           
  1849                           ; BSR set to: 0
  1850  002322  6A0C               	clrf	_timer0_init$156,c
  1851  002324  6A0D               	clrf	_timer0_init$156+1,c
  1852  002326  D003               	goto	l3308
  1853  002328                     l3306:
  1854                           
  1855                           ; BSR set to: 0
  1856  002328  6A0D               	clrf	_timer0_init$156+1,c
  1857  00232A  0E20               	movlw	32
  1858  00232C  6E0C               	movwf	_timer0_init$156,c
  1859  00232E                     l3308:
  1860                           
  1861                           ; BSR set to: 0
  1862  00232E  500C               	movf	_timer0_init$156,w,c
  1863  002330  12F2               	iorwf	intcon,f,c	;volatile
  1864                           
  1865                           ; BSR set to: 0
  1866  002332  0012               	return		;funcret
  1867  002334                     __end_of_timer0_init:
  1868                           	opt stack 0
  1869                           tblptru	equ	0xFF8
  1870                           tblptrh	equ	0xFF7
  1871                           tblptrl	equ	0xFF6
  1872                           tablat	equ	0xFF5
  1873                           prodl	equ	0xFF3
  1874                           intcon	equ	0xFF2
  1875                           intcon2	equ	0xFF1
  1876                           postinc0	equ	0xFEE
  1877                           wreg	equ	0xFE8
  1878                           postdec1	equ	0xFE5
  1879                           fsr1l	equ	0xFE1
  1880                           indf2	equ	0xFDF
  1881                           postinc2	equ	0xFDE
  1882                           postdec2	equ	0xFDD
  1883                           fsr2h	equ	0xFDA
  1884                           fsr2l	equ	0xFD9
  1885                           status	equ	0xFD8
  1886                           
  1887 ;; *************** function _ser_init *****************
  1888 ;; Defined at:
  1889 ;;		line 98 in file "../../../lib/ser.c"
  1890 ;; Parameters:    Size  Location     Type
  1891 ;;		None
  1892 ;; Auto vars:     Size  Location     Type
  1893 ;;		None
  1894 ;; Return value:  Size  Location     Type
  1895 ;;		None               void
  1896 ;; Registers used:
  1897 ;;		wreg, status,2
  1898 ;; Tracked objects:
  1899 ;;		On entry : 0/0
  1900 ;;		On exit  : F/0
  1901 ;;		Unchanged: 0/0
  1902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1903 ;;      Params:         0       0       0       0       0       0       0       0       0
  1904 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1905 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1906 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1907 ;;Total ram usage:        0 bytes
  1908 ;; Hardware stack levels used:    1
  1909 ;; Hardware stack levels required when called:    1
  1910 ;; This function calls:
  1911 ;;		Nothing
  1912 ;; This function is called by:
  1913 ;;		_main
  1914 ;; This function uses a non-reentrant model
  1915 ;;
  1916                           
  1917                           	psect	text3
  1918  0028D6                     __ptext3:
  1919                           	opt stack 0
  1920  0028D6                     _ser_init:
  1921                           	opt stack 29
  1922                           
  1923                           ;ser.c: 101: TRISC6 = 1;
  1924                           
  1925                           ; BSR set to: 0
  1926                           ;incstack = 0
  1927  0028D6  8C94               	bsf	3988,6,c	;volatile
  1928                           
  1929                           ;ser.c: 102: LATC7 = 1;
  1930  0028D8  8E8B               	bsf	3979,7,c	;volatile
  1931                           
  1932                           ;ser.c: 104: BRGH = 1;
  1933  0028DA  84AC               	bsf	4012,2,c	;volatile
  1934                           
  1935                           ;ser.c: 110: SPBRG = ser_brg;
  1936  0028DC  0E1F               	movlw	31
  1937  0028DE  6EAF               	movwf	4015,c	;volatile
  1938                           
  1939                           ;ser.c: 113: TX9 = 0;
  1940  0028E0  9CAC               	bcf	4012,6,c	;volatile
  1941                           
  1942                           ;ser.c: 114: RX9 = 0;
  1943  0028E2  9CAB               	bcf	4011,6,c	;volatile
  1944                           
  1945                           ;ser.c: 116: SYNC = 0;
  1946  0028E4  98AC               	bcf	4012,4,c	;volatile
  1947                           
  1948                           ;ser.c: 117: SPEN = 1;
  1949  0028E6  8EAB               	bsf	4011,7,c	;volatile
  1950                           
  1951                           ;ser.c: 118: CREN = 1;
  1952  0028E8  88AB               	bsf	4011,4,c	;volatile
  1953                           
  1954                           ;ser.c: 119: TXIE = 0;
  1955  0028EA  989D               	bcf	3997,4,c	;volatile
  1956                           
  1957                           ;ser.c: 121: TXEN = 1;
  1958  0028EC  8AAC               	bsf	4012,5,c	;volatile
  1959                           
  1960                           ;ser.c: 122: PEIE = 1;
  1961  0028EE  8CF2               	bsf	intcon,6,c	;volatile
  1962                           
  1963                           ;ser.c: 124: rxiptr = rxoptr = txiptr = txoptr = 0;
  1964  0028F0  6A5C               	clrf	_txoptr,c	;volatile
  1965  0028F2  6A5B               	clrf	_txiptr,c	;volatile
  1966  0028F4  0100               	movlb	0	; () banked
  1967  0028F6  6BD4               	clrf	_rxoptr& (0+255),b	;volatile
  1968  0028F8  6BD3               	clrf	_rxiptr& (0+255),b	;volatile
  1969                           
  1970                           ; BSR set to: 0
  1971  0028FA  0012               	return		;funcret
  1972  0028FC                     __end_of_ser_init:
  1973                           	opt stack 0
  1974                           tblptru	equ	0xFF8
  1975                           tblptrh	equ	0xFF7
  1976                           tblptrl	equ	0xFF6
  1977                           tablat	equ	0xFF5
  1978                           prodl	equ	0xFF3
  1979                           intcon	equ	0xFF2
  1980                           intcon2	equ	0xFF1
  1981                           postinc0	equ	0xFEE
  1982                           wreg	equ	0xFE8
  1983                           postdec1	equ	0xFE5
  1984                           fsr1l	equ	0xFE1
  1985                           indf2	equ	0xFDF
  1986                           postinc2	equ	0xFDE
  1987                           postdec2	equ	0xFDD
  1988                           fsr2h	equ	0xFDA
  1989                           fsr2l	equ	0xFD9
  1990                           status	equ	0xFD8
  1991                           
  1992 ;; *************** function _print_indicator *****************
  1993 ;; Defined at:
  1994 ;;		line 184 in file "../../../src/print.c"
  1995 ;; Parameters:    Size  Location     Type
  1996 ;;  indicate        1    wreg     unsigned char 
  1997 ;; Auto vars:     Size  Location     Type
  1998 ;;  indicate        1   13[COMRAM] unsigned char 
  1999 ;; Return value:  Size  Location     Type
  2000 ;;		None               void
  2001 ;; Registers used:
  2002 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2003 ;; Tracked objects:
  2004 ;;		On entry : 0/0
  2005 ;;		On exit  : 0/0
  2006 ;;		Unchanged: 0/0
  2007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2008 ;;      Params:         0       0       0       0       0       0       0       0       0
  2009 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2010 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2011 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2012 ;;Total ram usage:        1 bytes
  2013 ;; Hardware stack levels used:    1
  2014 ;; Hardware stack levels required when called:    5
  2015 ;; This function calls:
  2016 ;;		_lcd_gotoxy
  2017 ;;		_lcd_puts
  2018 ;; This function is called by:
  2019 ;;		_main
  2020 ;; This function uses a non-reentrant model
  2021 ;;
  2022                           
  2023                           	psect	text4
  2024  00297A                     __ptext4:
  2025                           	opt stack 0
  2026  00297A                     _print_indicator:
  2027                           	opt stack 25
  2028                           
  2029                           ; BSR set to: 0
  2030                           ;incstack = 0
  2031                           ;print_indicator@indicate stored from wreg
  2032  00297A  6E0E               	movwf	print_indicator@indicate,c
  2033                           
  2034                           ;print.c: 198: lcd_gotoxy(0, 1);
  2035  00297C  0E01               	movlw	1
  2036  00297E  6E08               	movwf	lcd_gotoxy@row,c
  2037  002980  0E00               	movlw	0
  2038  002982  EC77  F013         	call	_lcd_gotoxy
  2039                           
  2040                           ;print.c: 199: if(indicate) {
  2041  002986  500E               	movf	print_indicator@indicate,w,c
  2042  002988  E003               	bz	l3520
  2043                           
  2044                           ;print.c: 200: lcd_puts("-*-");
  2045  00298A  0EDF               	movlw	STR_26& (0+255)
  2046  00298C  EFF0  F013         	goto	_lcd_puts
  2047  002990                     l3520:
  2048                           
  2049                           ;print.c: 202: lcd_puts("   ");
  2050  002990  0EB4               	movlw	(STR_33+3)& (0+255)
  2051  002992  EFF0  F013         	goto	_lcd_puts
  2052  002996                     __end_of_print_indicator:
  2053                           	opt stack 0
  2054                           tblptru	equ	0xFF8
  2055                           tblptrh	equ	0xFF7
  2056                           tblptrl	equ	0xFF6
  2057                           tablat	equ	0xFF5
  2058                           prodl	equ	0xFF3
  2059                           intcon	equ	0xFF2
  2060                           intcon2	equ	0xFF1
  2061                           postinc0	equ	0xFEE
  2062                           wreg	equ	0xFE8
  2063                           postdec1	equ	0xFE5
  2064                           fsr1l	equ	0xFE1
  2065                           indf2	equ	0xFDF
  2066                           postinc2	equ	0xFDE
  2067                           postdec2	equ	0xFDD
  2068                           fsr2h	equ	0xFDA
  2069                           fsr2l	equ	0xFD9
  2070                           status	equ	0xFD8
  2071                           
  2072 ;; *************** function _measure_inductance *****************
  2073 ;; Defined at:
  2074 ;;		line 197 in file "../../../src/measure.c"
  2075 ;; Parameters:    Size  Location     Type
  2076 ;;		None
  2077 ;; Auto vars:     Size  Location     Type
  2078 ;;  Lin             4   41[BANK0 ] unsigned char 
  2079 ;;  denominator     4    6[BANK0 ] unsigned char 
  2080 ;;  numerator       4    2[BANK0 ] unsigned char 
  2081 ;;  var             2   39[BANK0 ] unsigned int 
  2082 ;;  unit            1   26[BANK0 ] unsigned char 
  2083 ;; Return value:  Size  Location     Type
  2084 ;;		None               void
  2085 ;; Registers used:
  2086 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2087 ;; Tracked objects:
  2088 ;;		On entry : F/0
  2089 ;;		On exit  : 0/0
  2090 ;;		Unchanged: 0/0
  2091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2092 ;;      Params:         0       0       0       0       0       0       0       0       0
  2093 ;;      Locals:         0      43       0       0       0       0       0       0       0
  2094 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2095 ;;      Totals:         0      43       0       0       0       0       0       0       0
  2096 ;;Total ram usage:       43 bytes
  2097 ;; Hardware stack levels used:    1
  2098 ;; Hardware stack levels required when called:    6
  2099 ;; This function calls:
  2100 ;;		___fldiv
  2101 ;;		___flge
  2102 ;;		___flmul
  2103 ;;		___flsub
  2104 ;;		___fltol
  2105 ;;		___lwtofl
  2106 ;;		_lcd_gotoxy
  2107 ;;		_measure_freq
  2108 ;;		_print_reading
  2109 ;;		_print_unit
  2110 ;;		_put_str
  2111 ;; This function is called by:
  2112 ;;		_main
  2113 ;; This function uses a non-reentrant model
  2114 ;;
  2115                           
  2116                           	psect	text5
  2117  0008FC                     __ptext5:
  2118                           	opt stack 0
  2119  0008FC                     _measure_inductance:
  2120                           	opt stack 24
  2121                           
  2122                           ; BSR set to: 0
  2123                           ;measure.c: 198: uint8_t unit;
  2124                           ;measure.c: 199: uint16_t var;
  2125                           ;measure.c: 201: double Lin, numerator, denominator;
  2126                           ;measure.c: 204: lcd_gotoxy(0, 0);
  2127                           
  2128                           ;incstack = 0
  2129  0008FC  0E00               	movlw	0
  2130  0008FE  6A08               	clrf	lcd_gotoxy@row,c
  2131  000900  EC77  F013         	call	_lcd_gotoxy
  2132                           
  2133                           ;measure.c: 205: put_str("Inductivity ");
  2134  000904  0E7C               	movlw	STR_15& (0+255)
  2135  000906  EC05  F014         	call	_put_str
  2136                           
  2137                           ;measure.c: 207: var = measure_freq();
  2138  00090A  EC24  F00D         	call	_measure_freq	;wreg free
  2139  00090E  C036  F087         	movff	?_measure_freq,measure_inductance@var
  2140  000912  C037  F088         	movff	?_measure_freq+1,measure_inductance@var+1
  2141                           
  2142                           ;measure.c: 209: F3 = (double)var;
  2143  000916  C087  F03B         	movff	measure_inductance@var,___lwtofl@c
  2144  00091A  C088  F03C         	movff	measure_inductance@var+1,___lwtofl@c+1
  2145  00091E  EC1A  F014         	call	___lwtofl	;wreg free
  2146  000922  C03B  F0BE         	movff	?___lwtofl,_F3
  2147  000926  C03C  F0BF         	movff	?___lwtofl+1,_F3+1
  2148  00092A  C03D  F0C0         	movff	?___lwtofl+2,_F3+2
  2149  00092E  C03E  F0C1         	movff	?___lwtofl+3,_F3+3
  2150                           
  2151                           ;measure.c: 210: if(F3 > F1)
  2152  000932  EC70  F008         	call	PL6	;call to abstracted procedure
  2153  000936  EC60  F012         	call	___flge	;wreg free
  2154  00093A  E208               	bc	l4186
  2155                           
  2156                           ;measure.c: 211: F3 = F1;
  2157  00093C  C0E7  F0BE         	movff	_F1,_F3
  2158  000940  C0E8  F0BF         	movff	_F1+1,_F3+1
  2159  000944  C0E9  F0C0         	movff	_F1+2,_F3+2
  2160  000948  C0EA  F0C1         	movff	_F1+3,_F3+3
  2161  00094C                     l4186:
  2162                           
  2163                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  2164  00094C  C0BA  F03C         	movff	_F2,___flsub@f2
  2165  000950  C0BB  F03D         	movff	_F2+1,___flsub@f2+1
  2166  000954  C0BC  F03E         	movff	_F2+2,___flsub@f2+2
  2167  000958  C0BD  F03F         	movff	_F2+3,___flsub@f2+3
  2168  00095C  C0BA  F038         	movff	_F2,___flsub@f1
  2169  000960  C0BB  F039         	movff	_F2+1,___flsub@f1+1
  2170  000964  C0BC  F03A         	movff	_F2+2,___flsub@f1+2
  2171  000968  C0BD  F03B         	movff	_F2+3,___flsub@f1+3
  2172  00096C  EC19  F013         	call	___flsub	;wreg free
  2173  000970  C038  F06A         	movff	?___flsub,_measure_inductance$1111
  2174  000974  C039  F06B         	movff	?___flsub+1,_measure_inductance$1111+1
  2175  000978  C03A  F06C         	movff	?___flsub+2,_measure_inductance$1111+2
  2176  00097C  C03B  F06D         	movff	?___flsub+3,_measure_inductance$1111+3
  2177                           
  2178                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  2179  000980  C06A  F03C         	movff	_measure_inductance$1111,___flsub@f2
  2180  000984  C06B  F03D         	movff	_measure_inductance$1111+1,___flsub@f2+1
  2181  000988  C06C  F03E         	movff	_measure_inductance$1111+2,___flsub@f2+2
  2182  00098C  C06D  F03F         	movff	_measure_inductance$1111+3,___flsub@f2+3
  2183  000990  D9CA               	call	PL2	;call to abstracted procedure
  2184  000992  ECF5  F00E         	call	___flmul	;wreg free
  2185  000996  C01D  F038         	movff	?___flmul,___flsub@f1
  2186  00099A  C01E  F039         	movff	?___flmul+1,___flsub@f1+1
  2187  00099E  C01F  F03A         	movff	?___flmul+2,___flsub@f1+2
  2188  0009A2  C020  F03B         	movff	?___flmul+3,___flsub@f1+3
  2189  0009A6  EC19  F013         	call	___flsub	;wreg free
  2190  0009AA  C038  F07B         	movff	?___flsub,_measure_inductance$1112
  2191  0009AE  C039  F07C         	movff	?___flsub+1,_measure_inductance$1112+1
  2192  0009B2  C03A  F07D         	movff	?___flsub+2,_measure_inductance$1112+2
  2193  0009B6  C03B  F07E         	movff	?___flsub+3,_measure_inductance$1112+3
  2194                           
  2195                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  2196  0009BA  EC5F  F008         	call	PL4	;call to abstracted procedure
  2197  0009BE  ECF5  F00E         	call	___flmul	;wreg free
  2198  0009C2  C01D  F03C         	movff	?___flmul,___flsub@f2
  2199  0009C6  C01E  F03D         	movff	?___flmul+1,___flsub@f2+1
  2200  0009CA  C01F  F03E         	movff	?___flmul+2,___flsub@f2+2
  2201  0009CE  C020  F03F         	movff	?___flmul+3,___flsub@f2+3
  2202  0009D2  D9A9               	call	PL2	;call to abstracted procedure
  2203  0009D4  ECF5  F00E         	call	___flmul	;wreg free
  2204  0009D8  C01D  F038         	movff	?___flmul,___flsub@f1
  2205  0009DC  C01E  F039         	movff	?___flmul+1,___flsub@f1+1
  2206  0009E0  C01F  F03A         	movff	?___flmul+2,___flsub@f1+2
  2207  0009E4  C020  F03B         	movff	?___flmul+3,___flsub@f1+3
  2208  0009E8  EC19  F013         	call	___flsub	;wreg free
  2209  0009EC  C038  F07F         	movff	?___flsub,_measure_inductance$1113
  2210  0009F0  C039  F080         	movff	?___flsub+1,_measure_inductance$1113+1
  2211  0009F4  C03A  F081         	movff	?___flsub+2,_measure_inductance$1113+2
  2212  0009F8  C03B  F082         	movff	?___flsub+3,_measure_inductance$1113+3
  2213                           
  2214                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  2215  0009FC  C07B  F021         	movff	_measure_inductance$1112,___flmul@f2
  2216  000A00  C07C  F022         	movff	_measure_inductance$1112+1,___flmul@f2+1
  2217  000A04  C07D  F023         	movff	_measure_inductance$1112+2,___flmul@f2+2
  2218  000A08  C07E  F024         	movff	_measure_inductance$1112+3,___flmul@f2+3
  2219  000A0C  C07F  F01D         	movff	_measure_inductance$1113,___flmul@f1
  2220  000A10  C080  F01E         	movff	_measure_inductance$1113+1,___flmul@f1+1
  2221  000A14  C081  F01F         	movff	_measure_inductance$1113+2,___flmul@f1+2
  2222  000A18  C082  F020         	movff	_measure_inductance$1113+3,___flmul@f1+3
  2223  000A1C  ECF5  F00E         	call	___flmul	;wreg free
  2224  000A20  C01D  F083         	movff	?___flmul,_measure_inductance$1114
  2225  000A24  C01E  F084         	movff	?___flmul+1,_measure_inductance$1114+1
  2226  000A28  C01F  F085         	movff	?___flmul+2,_measure_inductance$1114+2
  2227  000A2C  C020  F086         	movff	?___flmul+3,_measure_inductance$1114+3
  2228                           
  2229                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  2230  000A30  C083  F01D         	movff	_measure_inductance$1114,___flmul@f1
  2231  000A34  C084  F01E         	movff	_measure_inductance$1114+1,___flmul@f1+1
  2232  000A38  C085  F01F         	movff	_measure_inductance$1114+2,___flmul@f1+2
  2233  000A3C  C086  F020         	movff	_measure_inductance$1114+3,___flmul@f1+3
  2234  000A40  0E00               	movlw	0
  2235  000A42  6E21               	movwf	___flmul@f2,c
  2236  000A44  0E40               	movlw	64
  2237  000A46  6E22               	movwf	___flmul@f2+1,c
  2238  000A48  0E1C               	movlw	28
  2239  000A4A  6E23               	movwf	___flmul@f2+2,c
  2240  000A4C  0E46               	movlw	70
  2241  000A4E  6E24               	movwf	___flmul@f2+3,c
  2242  000A50  ECF5  F00E         	call	___flmul	;wreg free
  2243  000A54  C01D  F062         	movff	?___flmul,measure_inductance@numerator
  2244  000A58  C01E  F063         	movff	?___flmul+1,measure_inductance@numerator+1
  2245  000A5C  C01F  F064         	movff	?___flmul+2,measure_inductance@numerator+2
  2246  000A60  C020  F065         	movff	?___flmul+3,measure_inductance@numerator+3
  2247                           
  2248                           ;measure.c: 213: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2249  000A64  D960               	call	PL2	;call to abstracted procedure
  2250  000A66  ECF5  F00E         	call	___flmul	;wreg free
  2251  000A6A  C01D  F06E         	movff	?___flmul,_measure_inductance$1115
  2252  000A6E  C01E  F06F         	movff	?___flmul+1,_measure_inductance$1115+1
  2253  000A72  C01F  F070         	movff	?___flmul+2,_measure_inductance$1115+2
  2254  000A76  C020  F071         	movff	?___flmul+3,_measure_inductance$1115+3
  2255                           
  2256                           ;measure.c: 213: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2257  000A7A  C0BA  F021         	movff	_F2,___flmul@f2
  2258  000A7E  C0BB  F022         	movff	_F2+1,___flmul@f2+1
  2259  000A82  C0BC  F023         	movff	_F2+2,___flmul@f2+2
  2260  000A86  C0BD  F024         	movff	_F2+3,___flmul@f2+3
  2261  000A8A  C06E  F01D         	movff	_measure_inductance$1115,___flmul@f1
  2262  000A8E  C06F  F01E         	movff	_measure_inductance$1115+1,___flmul@f1+1
  2263  000A92  C070  F01F         	movff	_measure_inductance$1115+2,___flmul@f1+2
  2264  000A96  C071  F020         	movff	_measure_inductance$1115+3,___flmul@f1+3
  2265  000A9A  ECF5  F00E         	call	___flmul	;wreg free
  2266  000A9E  C01D  F07B         	movff	?___flmul,_measure_inductance$1112
  2267  000AA2  C01E  F07C         	movff	?___flmul+1,_measure_inductance$1112+1
  2268  000AA6  C01F  F07D         	movff	?___flmul+2,_measure_inductance$1112+2
  2269  000AAA  C020  F07E         	movff	?___flmul+3,_measure_inductance$1112+3
  2270                           
  2271                           ;measure.c: 213: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2272  000AAE  C0BA  F021         	movff	_F2,___flmul@f2
  2273  000AB2  C0BB  F022         	movff	_F2+1,___flmul@f2+1
  2274  000AB6  C0BC  F023         	movff	_F2+2,___flmul@f2+2
  2275  000ABA  C0BD  F024         	movff	_F2+3,___flmul@f2+3
  2276  000ABE  C07B  F01D         	movff	_measure_inductance$1112,___flmul@f1
  2277  000AC2  C07C  F01E         	movff	_measure_inductance$1112+1,___flmul@f1+1
  2278  000AC6  C07D  F01F         	movff	_measure_inductance$1112+2,___flmul@f1+2
  2279  000ACA  C07E  F020         	movff	_measure_inductance$1112+3,___flmul@f1+3
  2280  000ACE  ECF5  F00E         	call	___flmul	;wreg free
  2281  000AD2  C01D  F07F         	movff	?___flmul,_measure_inductance$1113
  2282  000AD6  C01E  F080         	movff	?___flmul+1,_measure_inductance$1113+1
  2283  000ADA  C01F  F081         	movff	?___flmul+2,_measure_inductance$1113+2
  2284  000ADE  C020  F082         	movff	?___flmul+3,_measure_inductance$1113+3
  2285                           
  2286                           ;measure.c: 213: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2287  000AE2  C0BE  F021         	movff	_F3,___flmul@f2
  2288  000AE6  C0BF  F022         	movff	_F3+1,___flmul@f2+1
  2289  000AEA  C0C0  F023         	movff	_F3+2,___flmul@f2+2
  2290  000AEE  C0C1  F024         	movff	_F3+3,___flmul@f2+3
  2291  000AF2  C07F  F01D         	movff	_measure_inductance$1113,___flmul@f1
  2292  000AF6  C080  F01E         	movff	_measure_inductance$1113+1,___flmul@f1+1
  2293  000AFA  C081  F01F         	movff	_measure_inductance$1113+2,___flmul@f1+2
  2294  000AFE  C082  F020         	movff	_measure_inductance$1113+3,___flmul@f1+3
  2295  000B02  ECF5  F00E         	call	___flmul	;wreg free
  2296  000B06  C01D  F083         	movff	?___flmul,_measure_inductance$1114
  2297  000B0A  C01E  F084         	movff	?___flmul+1,_measure_inductance$1114+1
  2298  000B0E  C01F  F085         	movff	?___flmul+2,_measure_inductance$1114+2
  2299  000B12  C020  F086         	movff	?___flmul+3,_measure_inductance$1114+3
  2300                           
  2301                           ;measure.c: 213: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2302  000B16  C0BE  F021         	movff	_F3,___flmul@f2
  2303  000B1A  C0BF  F022         	movff	_F3+1,___flmul@f2+1
  2304  000B1E  C0C0  F023         	movff	_F3+2,___flmul@f2+2
  2305  000B22  C0C1  F024         	movff	_F3+3,___flmul@f2+3
  2306  000B26  C083  F01D         	movff	_measure_inductance$1114,___flmul@f1
  2307  000B2A  C084  F01E         	movff	_measure_inductance$1114+1,___flmul@f1+1
  2308  000B2E  C085  F01F         	movff	_measure_inductance$1114+2,___flmul@f1+2
  2309  000B32  C086  F020         	movff	_measure_inductance$1114+3,___flmul@f1+3
  2310  000B36  ECF5  F00E         	call	___flmul	;wreg free
  2311  000B3A  C01D  F072         	movff	?___flmul,_measure_inductance$1116
  2312  000B3E  C01E  F073         	movff	?___flmul+1,_measure_inductance$1116+1
  2313  000B42  C01F  F074         	movff	?___flmul+2,_measure_inductance$1116+2
  2314  000B46  C020  F075         	movff	?___flmul+3,_measure_inductance$1116+3
  2315                           
  2316                           ;measure.c: 213: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2317  000B4A  C0EB  F021         	movff	_CCal,___flmul@f2
  2318  000B4E  C0EC  F022         	movff	_CCal+1,___flmul@f2+1
  2319  000B52  C0ED  F023         	movff	_CCal+2,___flmul@f2+2
  2320  000B56  C0EE  F024         	movff	_CCal+3,___flmul@f2+3
  2321  000B5A  C072  F01D         	movff	_measure_inductance$1116,___flmul@f1
  2322  000B5E  C073  F01E         	movff	_measure_inductance$1116+1,___flmul@f1+1
  2323  000B62  C074  F01F         	movff	_measure_inductance$1116+2,___flmul@f1+2
  2324  000B66  C075  F020         	movff	_measure_inductance$1116+3,___flmul@f1+3
  2325  000B6A  ECF5  F00E         	call	___flmul	;wreg free
  2326  000B6E  C01D  F076         	movff	?___flmul,_measure_inductance$1117
  2327  000B72  C01E  F077         	movff	?___flmul+1,_measure_inductance$1117+1
  2328  000B76  C01F  F078         	movff	?___flmul+2,_measure_inductance$1117+2
  2329  000B7A  C020  F079         	movff	?___flmul+3,_measure_inductance$1117+3
  2330                           
  2331                           ;measure.c: 213: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2332  000B7E  C076  F01D         	movff	_measure_inductance$1117,___flmul@f1
  2333  000B82  C077  F01E         	movff	_measure_inductance$1117+1,___flmul@f1+1
  2334  000B86  C078  F01F         	movff	_measure_inductance$1117+2,___flmul@f1+2
  2335  000B8A  C079  F020         	movff	_measure_inductance$1117+3,___flmul@f1+3
  2336  000B8E  0EE6               	movlw	230
  2337  000B90  6E21               	movwf	___flmul@f2,c
  2338  000B92  0EE9               	movlw	233
  2339  000B94  6E22               	movwf	___flmul@f2+1,c
  2340  000B96  0E1D               	movlw	29
  2341  000B98  6E23               	movwf	___flmul@f2+2,c
  2342  000B9A  0E42               	movlw	66
  2343  000B9C  6E24               	movwf	___flmul@f2+3,c
  2344  000B9E  ECF5  F00E         	call	___flmul	;wreg free
  2345  000BA2  C01D  F066         	movff	?___flmul,measure_inductance@denominator
  2346  000BA6  C01E  F067         	movff	?___flmul+1,measure_inductance@denominator+1
  2347  000BAA  C01F  F068         	movff	?___flmul+2,measure_inductance@denominator+2
  2348  000BAE  C020  F069         	movff	?___flmul+3,measure_inductance@denominator+3
  2349                           
  2350                           ;measure.c: 214: Lin = (numerator / denominator) * 1e+15l;
  2351  000BB2  C066  F012         	movff	measure_inductance@denominator,___fldiv@f2
  2352  000BB6  C067  F013         	movff	measure_inductance@denominator+1,___fldiv@f2+1
  2353  000BBA  C068  F014         	movff	measure_inductance@denominator+2,___fldiv@f2+2
  2354  000BBE  C069  F015         	movff	measure_inductance@denominator+3,___fldiv@f2+3
  2355  000BC2  C062  F00E         	movff	measure_inductance@numerator,___fldiv@f1
  2356  000BC6  C063  F00F         	movff	measure_inductance@numerator+1,___fldiv@f1+1
  2357  000BCA  C064  F010         	movff	measure_inductance@numerator+2,___fldiv@f1+2
  2358  000BCE  C065  F011         	movff	measure_inductance@numerator+3,___fldiv@f1+3
  2359  000BD2  ECB8  F00F         	call	___fldiv	;wreg free
  2360  000BD6  C00E  F01D         	movff	?___fldiv,___flmul@f1
  2361  000BDA  C00F  F01E         	movff	?___fldiv+1,___flmul@f1+1
  2362  000BDE  C010  F01F         	movff	?___fldiv+2,___flmul@f1+2
  2363  000BE2  C011  F020         	movff	?___fldiv+3,___flmul@f1+3
  2364  000BE6  0EA9               	movlw	169
  2365  000BE8  6E21               	movwf	___flmul@f2,c
  2366  000BEA  0E5F               	movlw	95
  2367  000BEC  6E22               	movwf	___flmul@f2+1,c
  2368  000BEE  0E63               	movlw	99
  2369  000BF0  6E23               	movwf	___flmul@f2+2,c
  2370  000BF2  0E58               	movlw	88
  2371  000BF4  6E24               	movwf	___flmul@f2+3,c
  2372  000BF6  ECF5  F00E         	call	___flmul	;wreg free
  2373  000BFA  C01D  F089         	movff	?___flmul,measure_inductance@Lin
  2374  000BFE  C01E  F08A         	movff	?___flmul+1,measure_inductance@Lin+1
  2375  000C02  C01F  F08B         	movff	?___flmul+2,measure_inductance@Lin+2
  2376  000C06  C020  F08C         	movff	?___flmul+3,measure_inductance@Lin+3
  2377                           
  2378                           ;measure.c: 216: if(Lin > 999) {
  2379  000C0A  ECAF  F008         	call	PL32	;call to abstracted procedure
  2380  000C0E  C089  F008         	movff	measure_inductance@Lin,___flge@ff2
  2381  000C12  C08A  F009         	movff	measure_inductance@Lin+1,___flge@ff2+1
  2382  000C16  C08B  F00A         	movff	measure_inductance@Lin+2,___flge@ff2+2
  2383  000C1A  C08C  F00B         	movff	measure_inductance@Lin+3,___flge@ff2+3
  2384  000C1E  EC60  F012         	call	___flge	;wreg free
  2385  000C22  E252               	bc	l4204
  2386                           
  2387                           ;measure.c: 217: if(Lin > (999e+03l)) {
  2388  000C24  EC9E  F008         	call	PL22	;call to abstracted procedure
  2389  000C28  C089  F008         	movff	measure_inductance@Lin,___flge@ff2
  2390  000C2C  C08A  F009         	movff	measure_inductance@Lin+1,___flge@ff2+1
  2391  000C30  C08B  F00A         	movff	measure_inductance@Lin+2,___flge@ff2+2
  2392  000C34  C08C  F00B         	movff	measure_inductance@Lin+3,___flge@ff2+3
  2393  000C38  EC60  F012         	call	___flge	;wreg free
  2394  000C3C  E233               	bc	l4200
  2395                           
  2396                           ;measure.c: 218: if(Lin > (999e+06l)) {
  2397  000C3E  EC8C  F008         	call	PL14	;call to abstracted procedure
  2398  000C42  C089  F008         	movff	measure_inductance@Lin,___flge@ff2
  2399  000C46  C08A  F009         	movff	measure_inductance@Lin+1,___flge@ff2+1
  2400  000C4A  C08B  F00A         	movff	measure_inductance@Lin+2,___flge@ff2+2
  2401  000C4E  C08C  F00B         	movff	measure_inductance@Lin+3,___flge@ff2+3
  2402  000C52  EC60  F012         	call	___flge	;wreg free
  2403  000C56  E217               	bc	l4196
  2404                           
  2405                           ;measure.c: 219: Lin = Lin / (1e+09l);
  2406  000C58  C089  F00E         	movff	measure_inductance@Lin,___fldiv@f1
  2407  000C5C  C08A  F00F         	movff	measure_inductance@Lin+1,___fldiv@f1+1
  2408  000C60  C08B  F010         	movff	measure_inductance@Lin+2,___fldiv@f1+2
  2409  000C64  C08C  F011         	movff	measure_inductance@Lin+3,___fldiv@f1+3
  2410  000C68  EC95  F008         	call	PL20	;call to abstracted procedure
  2411  000C6C  ECB8  F00F         	call	___fldiv	;wreg free
  2412  000C70  C00E  F089         	movff	?___fldiv,measure_inductance@Lin
  2413  000C74  C00F  F08A         	movff	?___fldiv+1,measure_inductance@Lin+1
  2414  000C78  C010  F08B         	movff	?___fldiv+2,measure_inductance@Lin+2
  2415  000C7C  C011  F08C         	movff	?___fldiv+3,measure_inductance@Lin+3
  2416                           
  2417                           ;measure.c: 220: unit = 0;
  2418  000C80  0100               	movlb	0	; () banked
  2419  000C82  6B7A               	clrf	measure_inductance@unit& (0+255),b
  2420                           
  2421                           ;measure.c: 221: } else {
  2422  000C84  D024               	goto	l4206
  2423  000C86                     l4196:
  2424                           
  2425                           ;measure.c: 222: Lin = Lin / (1e+06l);
  2426  000C86  D860               	call	PL8	;call to abstracted procedure
  2427  000C88  ECB7  F008         	call	PL34	;call to abstracted procedure
  2428  000C8C  ECB8  F00F         	call	___fldiv	;wreg free
  2429  000C90  C00E  F089         	movff	?___fldiv,measure_inductance@Lin
  2430  000C94  C00F  F08A         	movff	?___fldiv+1,measure_inductance@Lin+1
  2431  000C98  C010  F08B         	movff	?___fldiv+2,measure_inductance@Lin+2
  2432  000C9C  C011  F08C         	movff	?___fldiv+3,measure_inductance@Lin+3
  2433                           
  2434                           ;measure.c: 223: unit = 1;
  2435  000CA0  0E01               	movlw	1
  2436  000CA2  D013               	goto	L2
  2437  000CA4                     l4200:
  2438                           
  2439                           ;measure.c: 226: Lin = Lin / 1e+03l;
  2440  000CA4  D851               	call	PL8	;call to abstracted procedure
  2441  000CA6  6E13               	movwf	___fldiv@f2+1,c
  2442  000CA8  0E7A               	movlw	122
  2443  000CAA  6E14               	movwf	___fldiv@f2+2,c
  2444  000CAC  0E44               	movlw	68
  2445  000CAE  6E15               	movwf	___fldiv@f2+3,c
  2446  000CB0  ECB8  F00F         	call	___fldiv	;wreg free
  2447  000CB4  C00E  F089         	movff	?___fldiv,measure_inductance@Lin
  2448  000CB8  C00F  F08A         	movff	?___fldiv+1,measure_inductance@Lin+1
  2449  000CBC  C010  F08B         	movff	?___fldiv+2,measure_inductance@Lin+2
  2450  000CC0  C011  F08C         	movff	?___fldiv+3,measure_inductance@Lin+3
  2451                           
  2452                           ;measure.c: 227: unit = 2;
  2453  000CC4  0E02               	movlw	2
  2454  000CC6  D001               	goto	L2
  2455  000CC8                     l4204:
  2456                           
  2457                           ;measure.c: 230: unit = 3;
  2458  000CC8  0E03               	movlw	3
  2459  000CCA                     L2:
  2460  000CCA  0100               	movlb	0	; () banked
  2461  000CCC  6F7A               	movwf	measure_inductance@unit& (0+255),b
  2462  000CCE                     l4206:
  2463                           
  2464                           ; BSR set to: 0
  2465                           ;measure.c: 232: Lin = Lin * 100;
  2466  000CCE  C089  F01D         	movff	measure_inductance@Lin,___flmul@f1
  2467  000CD2  C08A  F01E         	movff	measure_inductance@Lin+1,___flmul@f1+1
  2468  000CD6  C08B  F01F         	movff	measure_inductance@Lin+2,___flmul@f1+2
  2469  000CDA  C08C  F020         	movff	measure_inductance@Lin+3,___flmul@f1+3
  2470  000CDE  ECA7  F008         	call	PL28	;call to abstracted procedure
  2471  000CE2  ECF5  F00E         	call	___flmul	;wreg free
  2472  000CE6  C01D  F089         	movff	?___flmul,measure_inductance@Lin
  2473  000CEA  C01E  F08A         	movff	?___flmul+1,measure_inductance@Lin+1
  2474  000CEE  C01F  F08B         	movff	?___flmul+2,measure_inductance@Lin+2
  2475  000CF2  C020  F08C         	movff	?___flmul+3,measure_inductance@Lin+3
  2476                           
  2477                           ;measure.c: 233: var = (uint16_t)Lin;
  2478  000CF6  C089  F052         	movff	measure_inductance@Lin,___fltol@f1
  2479  000CFA  C08A  F053         	movff	measure_inductance@Lin+1,___fltol@f1+1
  2480  000CFE  C08B  F054         	movff	measure_inductance@Lin+2,___fltol@f1+2
  2481  000D02  C08C  F055         	movff	measure_inductance@Lin+3,___fltol@f1+3
  2482  000D06  EC0A  F011         	call	___fltol	;wreg free
  2483  000D0A  C052  F087         	movff	?___fltol,measure_inductance@var
  2484  000D0E  C053  F088         	movff	?___fltol+1,measure_inductance@var+1
  2485                           
  2486                           ; BSR set to: 0
  2487                           ;measure.c: 235: print_reading(var);
  2488  000D12  C087  F036         	movff	measure_inductance@var,print_reading@measurement
  2489  000D16  C088  F037         	movff	measure_inductance@var+1,print_reading@measurement+1
  2490  000D1A  ECD6  F011         	call	_print_reading	;wreg free
  2491                           
  2492                           ;measure.c: 236: print_unit(unit);
  2493  000D1E  0100               	movlb	0	; () banked
  2494  000D20  517A               	movf	measure_inductance@unit& (0+255),w,b
  2495  000D22  EF2F  F014         	goto	_print_unit
  2496  000D26                     __end_of_measure_inductance:
  2497                           	opt stack 0
  2498  000D26                     PL2:
  2499                           	opt stack 24
  2500  000D26  C0E7  F021         	movff	_F1,___flmul@f2
  2501  000D2A  C0E8  F022         	movff	_F1+1,___flmul@f2+1
  2502  000D2E  C0E9  F023         	movff	_F1+2,___flmul@f2+2
  2503  000D32  C0EA  F024         	movff	_F1+3,___flmul@f2+3
  2504  000D36  C0E7  F01D         	movff	_F1,___flmul@f1
  2505  000D3A  C0E8  F01E         	movff	_F1+1,___flmul@f1+1
  2506  000D3E  C0E9  F01F         	movff	_F1+2,___flmul@f1+2
  2507  000D42  C0EA  F020         	movff	_F1+3,___flmul@f1+3
  2508  000D46  0012               	return	
  2509  000D48                     __end_ofPL2:
  2510                           	opt stack 0
  2511  000D48                     PL8:
  2512                           	opt stack 24
  2513  000D48  C089  F00E         	movff	measure_inductance@Lin,___fldiv@f1
  2514  000D4C  C08A  F00F         	movff	measure_inductance@Lin+1,___fldiv@f1+1
  2515  000D50  C08B  F010         	movff	measure_inductance@Lin+2,___fldiv@f1+2
  2516  000D54  C08C  F011         	movff	measure_inductance@Lin+3,___fldiv@f1+3
  2517  000D58  0E00               	movlw	0
  2518  000D5A  6E12               	movwf	___fldiv@f2,c
  2519  000D5C  0C00               	retlw	0
  2520  000D5E                     __end_ofPL8:
  2521                           	opt stack 0
  2522                           tblptru	equ	0xFF8
  2523                           tblptrh	equ	0xFF7
  2524                           tblptrl	equ	0xFF6
  2525                           tablat	equ	0xFF5
  2526                           prodl	equ	0xFF3
  2527                           intcon	equ	0xFF2
  2528                           intcon2	equ	0xFF1
  2529                           postinc0	equ	0xFEE
  2530                           wreg	equ	0xFE8
  2531                           postdec1	equ	0xFE5
  2532                           fsr1l	equ	0xFE1
  2533                           indf2	equ	0xFDF
  2534                           postinc2	equ	0xFDE
  2535                           postdec2	equ	0xFDD
  2536                           fsr2h	equ	0xFDA
  2537                           fsr2l	equ	0xFD9
  2538                           status	equ	0xFD8
  2539                           
  2540 ;; *************** function _measure_capacitance *****************
  2541 ;; Defined at:
  2542 ;;		line 119 in file "../../../src/measure.c"
  2543 ;; Parameters:    Size  Location     Type
  2544 ;;		None
  2545 ;; Auto vars:     Size  Location     Type
  2546 ;;  Cin             4   84[BANK0 ] unsigned char 
  2547 ;;  var             2   82[BANK0 ] unsigned int 
  2548 ;;  unit            1   81[BANK0 ] unsigned char 
  2549 ;; Return value:  Size  Location     Type
  2550 ;;		None               void
  2551 ;; Registers used:
  2552 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2553 ;; Tracked objects:
  2554 ;;		On entry : F/0
  2555 ;;		On exit  : 0/0
  2556 ;;		Unchanged: 0/0
  2557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2558 ;;      Params:         0       0       0       0       0       0       0       0       0
  2559 ;;      Locals:         0      19       0       0       0       0       0       0       0
  2560 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2561 ;;      Totals:         0      19       0       0       0       0       0       0       0
  2562 ;;Total ram usage:       19 bytes
  2563 ;; Hardware stack levels used:    1
  2564 ;; Hardware stack levels required when called:    7
  2565 ;; This function calls:
  2566 ;;		___fldiv
  2567 ;;		___flge
  2568 ;;		___flmul
  2569 ;;		___flsub
  2570 ;;		___fltol
  2571 ;;		___lwtofl
  2572 ;;		_format_double
  2573 ;;		_format_xint32
  2574 ;;		_lcd_gotoxy
  2575 ;;		_measure_freq
  2576 ;;		_print_reading
  2577 ;;		_print_unit
  2578 ;;		_put_str
  2579 ;;		_ser_putch
  2580 ;;		_ser_puts
  2581 ;; This function is called by:
  2582 ;;		_main
  2583 ;; This function uses a non-reentrant model
  2584 ;;
  2585                           
  2586                           	psect	text6
  2587  000D5E                     __ptext6:
  2588                           	opt stack 0
  2589  000D5E                     _measure_capacitance:
  2590                           	opt stack 23
  2591                           
  2592                           ; BSR set to: 0
  2593                           ;measure.c: 120: uint8_t unit;
  2594                           ;measure.c: 121: uint16_t var;
  2595                           ;measure.c: 123: double Cin;
  2596                           ;measure.c: 127: lcd_gotoxy(0, 0);
  2597                           
  2598                           ;incstack = 0
  2599  000D5E  0E00               	movlw	0
  2600  000D60  6A08               	clrf	lcd_gotoxy@row,c
  2601  000D62  EC77  F013         	call	_lcd_gotoxy
  2602                           
  2603                           ;measure.c: 128: put_str("Capacity ");
  2604  000D66  0E9F               	movlw	STR_6& (0+255)
  2605  000D68  EC05  F014         	call	_put_str
  2606                           
  2607                           ;measure.c: 130: var = measure_freq();
  2608  000D6C  EC24  F00D         	call	_measure_freq	;wreg free
  2609  000D70  C036  F0B2         	movff	?_measure_freq,measure_capacitance@var
  2610  000D74  C037  F0B3         	movff	?_measure_freq+1,measure_capacitance@var+1
  2611                           
  2612                           ;measure.c: 132: F3 = (double)var;
  2613  000D78  C0B2  F03B         	movff	measure_capacitance@var,___lwtofl@c
  2614  000D7C  C0B3  F03C         	movff	measure_capacitance@var+1,___lwtofl@c+1
  2615  000D80  EC1A  F014         	call	___lwtofl	;wreg free
  2616  000D84  C03B  F0BE         	movff	?___lwtofl,_F3
  2617  000D88  C03C  F0BF         	movff	?___lwtofl+1,_F3+1
  2618  000D8C  C03D  F0C0         	movff	?___lwtofl+2,_F3+2
  2619  000D90  C03E  F0C1         	movff	?___lwtofl+3,_F3+3
  2620                           
  2621                           ;measure.c: 135: ser_puts("var=");
  2622  000D94  0EDA               	movlw	STR_7& (0+255)
  2623  000D96  EC9F  F014         	call	_ser_puts
  2624                           
  2625                           ;measure.c: 136: format_xint32(var);
  2626  000D9A  C0B2  F036         	movff	measure_capacitance@var,format_xint32@x
  2627  000D9E  C0B3  F037         	movff	measure_capacitance@var+1,format_xint32@x+1
  2628  000DA2  6A38               	clrf	format_xint32@x+2,c
  2629  000DA4  6A39               	clrf	format_xint32@x+3,c
  2630  000DA6  EC92  F013         	call	_format_xint32	;wreg free
  2631                           
  2632                           ;measure.c: 137: ser_puts("\r\nF1=");
  2633  000DAA  0EB8               	movlw	STR_8& (0+255)
  2634  000DAC  EC9F  F014         	call	_ser_puts
  2635                           
  2636                           ;measure.c: 138: format_double(F1);
  2637  000DB0  C0E7  F091         	movff	_F1,format_double@num
  2638  000DB4  C0E8  F092         	movff	_F1+1,format_double@num+1
  2639  000DB8  C0E9  F093         	movff	_F1+2,format_double@num+2
  2640  000DBC  C0EA  F094         	movff	_F1+3,format_double@num+3
  2641  000DC0  EC95  F00A         	call	_format_double	;wreg free
  2642                           
  2643                           ;measure.c: 139: ser_putch(' ');
  2644  000DC4  0E20               	movlw	32
  2645  000DC6  EC57  F014         	call	_ser_putch
  2646                           
  2647                           ;measure.c: 140: format_xint32(*(uint32_t*)&F1);
  2648  000DCA  C0E7  F036         	movff	_F1,format_xint32@x
  2649  000DCE  C0E8  F037         	movff	_F1+1,format_xint32@x+1
  2650  000DD2  C0E9  F038         	movff	_F1+2,format_xint32@x+2
  2651  000DD6  C0EA  F039         	movff	_F1+3,format_xint32@x+3
  2652  000DDA  EC92  F013         	call	_format_xint32	;wreg free
  2653                           
  2654                           ;measure.c: 141: ser_puts("\r\nF2=");
  2655  000DDE  0EBE               	movlw	STR_9& (0+255)
  2656  000DE0  EC9F  F014         	call	_ser_puts
  2657                           
  2658                           ;measure.c: 142: format_double(F2);
  2659  000DE4  C0BA  F091         	movff	_F2,format_double@num
  2660  000DE8  C0BB  F092         	movff	_F2+1,format_double@num+1
  2661  000DEC  C0BC  F093         	movff	_F2+2,format_double@num+2
  2662  000DF0  C0BD  F094         	movff	_F2+3,format_double@num+3
  2663  000DF4  EC95  F00A         	call	_format_double	;wreg free
  2664                           
  2665                           ;measure.c: 143: ser_putch(' ');
  2666  000DF8  0E20               	movlw	32
  2667  000DFA  EC57  F014         	call	_ser_putch
  2668                           
  2669                           ;measure.c: 144: format_xint32(*(uint32_t*)&F2);
  2670  000DFE  C0BA  F036         	movff	_F2,format_xint32@x
  2671  000E02  C0BB  F037         	movff	_F2+1,format_xint32@x+1
  2672  000E06  C0BC  F038         	movff	_F2+2,format_xint32@x+2
  2673  000E0A  C0BD  F039         	movff	_F2+3,format_xint32@x+3
  2674  000E0E  EC92  F013         	call	_format_xint32	;wreg free
  2675                           
  2676                           ;measure.c: 145: ser_puts("\r\nF3=");
  2677  000E12  0EC4               	movlw	STR_10& (0+255)
  2678  000E14  EC9F  F014         	call	_ser_puts
  2679                           
  2680                           ;measure.c: 146: format_double(F3);
  2681  000E18  C0BE  F091         	movff	_F3,format_double@num
  2682  000E1C  C0BF  F092         	movff	_F3+1,format_double@num+1
  2683  000E20  C0C0  F093         	movff	_F3+2,format_double@num+2
  2684  000E24  C0C1  F094         	movff	_F3+3,format_double@num+3
  2685  000E28  EC95  F00A         	call	_format_double	;wreg free
  2686                           
  2687                           ;measure.c: 147: ser_putch(' ');
  2688  000E2C  0E20               	movlw	32
  2689  000E2E  EC57  F014         	call	_ser_putch
  2690                           
  2691                           ;measure.c: 148: format_xint32(*(uint32_t*)&F3);
  2692  000E32  C0BE  F036         	movff	_F3,format_xint32@x
  2693  000E36  C0BF  F037         	movff	_F3+1,format_xint32@x+1
  2694  000E3A  C0C0  F038         	movff	_F3+2,format_xint32@x+2
  2695  000E3E  C0C1  F039         	movff	_F3+3,format_xint32@x+3
  2696  000E42  EC92  F013         	call	_format_xint32	;wreg free
  2697                           
  2698                           ;measure.c: 149: ser_puts("\r\nCCal=");
  2699  000E46  0EA9               	movlw	STR_11& (0+255)
  2700  000E48  EC9F  F014         	call	_ser_puts
  2701                           
  2702                           ;measure.c: 150: format_double(CCal);
  2703  000E4C  C0EB  F091         	movff	_CCal,format_double@num
  2704  000E50  C0EC  F092         	movff	_CCal+1,format_double@num+1
  2705  000E54  C0ED  F093         	movff	_CCal+2,format_double@num+2
  2706  000E58  C0EE  F094         	movff	_CCal+3,format_double@num+3
  2707  000E5C  EC95  F00A         	call	_format_double	;wreg free
  2708                           
  2709                           ;measure.c: 151: ser_putch(' ');
  2710  000E60  0E20               	movlw	32
  2711  000E62  EC57  F014         	call	_ser_putch
  2712                           
  2713                           ;measure.c: 152: format_xint32(*(uint32_t*)&CCal);
  2714  000E66  C0EB  F036         	movff	_CCal,format_xint32@x
  2715  000E6A  C0EC  F037         	movff	_CCal+1,format_xint32@x+1
  2716  000E6E  C0ED  F038         	movff	_CCal+2,format_xint32@x+2
  2717  000E72  C0EE  F039         	movff	_CCal+3,format_xint32@x+3
  2718  000E76  EC92  F013         	call	_format_xint32	;wreg free
  2719                           
  2720                           ;measure.c: 153: ser_puts("\r\n");
  2721  000E7A  0EF8               	movlw	STR_2& (0+255)
  2722  000E7C  EC9F  F014         	call	_ser_puts
  2723                           
  2724                           ;measure.c: 157: if(F3 > F1)
  2725  000E80  D92F               	call	PL6	;call to abstracted procedure
  2726  000E82  EC60  F012         	call	___flge	;wreg free
  2727  000E86  E208               	bc	l4134
  2728                           
  2729                           ;measure.c: 158: F3 = F1;
  2730  000E88  C0E7  F0BE         	movff	_F1,_F3
  2731  000E8C  C0E8  F0BF         	movff	_F1+1,_F3+1
  2732  000E90  C0E9  F0C0         	movff	_F1+2,_F3+2
  2733  000E94  C0EA  F0C1         	movff	_F1+3,_F3+3
  2734  000E98                     l4134:
  2735                           
  2736                           ;measure.c: 160: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2737  000E98  D912               	call	PL4	;call to abstracted procedure
  2738  000E9A  ECF5  F00E         	call	___flmul	;wreg free
  2739  000E9E  C01D  F03C         	movff	?___flmul,___flsub@f2
  2740  000EA2  C01E  F03D         	movff	?___flmul+1,___flsub@f2+1
  2741  000EA6  C01F  F03E         	movff	?___flmul+2,___flsub@f2+2
  2742  000EAA  C020  F03F         	movff	?___flmul+3,___flsub@f2+3
  2743  000EAE  EC93  F006         	call	PL2	;call to abstracted procedure
  2744  000EB2  ECF5  F00E         	call	___flmul	;wreg free
  2745  000EB6  C01D  F038         	movff	?___flmul,___flsub@f1
  2746  000EBA  C01E  F039         	movff	?___flmul+1,___flsub@f1+1
  2747  000EBE  C01F  F03A         	movff	?___flmul+2,___flsub@f1+2
  2748  000EC2  C020  F03B         	movff	?___flmul+3,___flsub@f1+3
  2749  000EC6  EC19  F013         	call	___flsub	;wreg free
  2750  000ECA  C038  F0A5         	movff	?___flsub,_measure_capacitance$1108
  2751  000ECE  C039  F0A6         	movff	?___flsub+1,_measure_capacitance$1108+1
  2752  000ED2  C03A  F0A7         	movff	?___flsub+2,_measure_capacitance$1108+2
  2753  000ED6  C03B  F0A8         	movff	?___flsub+3,_measure_capacitance$1108+3
  2754                           
  2755                           ;measure.c: 160: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2756  000EDA  C0BA  F021         	movff	_F2,___flmul@f2
  2757  000EDE  C0BB  F022         	movff	_F2+1,___flmul@f2+1
  2758  000EE2  C0BC  F023         	movff	_F2+2,___flmul@f2+2
  2759  000EE6  C0BD  F024         	movff	_F2+3,___flmul@f2+3
  2760  000EEA  C0A5  F01D         	movff	_measure_capacitance$1108,___flmul@f1
  2761  000EEE  C0A6  F01E         	movff	_measure_capacitance$1108+1,___flmul@f1+1
  2762  000EF2  C0A7  F01F         	movff	_measure_capacitance$1108+2,___flmul@f1+2
  2763  000EF6  C0A8  F020         	movff	_measure_capacitance$1108+3,___flmul@f1+3
  2764  000EFA  ECF5  F00E         	call	___flmul	;wreg free
  2765  000EFE  C01D  F0A9         	movff	?___flmul,_measure_capacitance$1109
  2766  000F02  C01E  F0AA         	movff	?___flmul+1,_measure_capacitance$1109+1
  2767  000F06  C01F  F0AB         	movff	?___flmul+2,_measure_capacitance$1109+2
  2768  000F0A  C020  F0AC         	movff	?___flmul+3,_measure_capacitance$1109+3
  2769                           
  2770                           ;measure.c: 160: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2771  000F0E  C0BA  F021         	movff	_F2,___flmul@f2
  2772  000F12  C0BB  F022         	movff	_F2+1,___flmul@f2+1
  2773  000F16  C0BC  F023         	movff	_F2+2,___flmul@f2+2
  2774  000F1A  C0BD  F024         	movff	_F2+3,___flmul@f2+3
  2775  000F1E  C0A9  F01D         	movff	_measure_capacitance$1109,___flmul@f1
  2776  000F22  C0AA  F01E         	movff	_measure_capacitance$1109+1,___flmul@f1+1
  2777  000F26  C0AB  F01F         	movff	_measure_capacitance$1109+2,___flmul@f1+2
  2778  000F2A  C0AC  F020         	movff	_measure_capacitance$1109+3,___flmul@f1+3
  2779  000F2E  ECF5  F00E         	call	___flmul	;wreg free
  2780  000F32  C01D  F0AD         	movff	?___flmul,_measure_capacitance$1110
  2781  000F36  C01E  F0AE         	movff	?___flmul+1,_measure_capacitance$1110+1
  2782  000F3A  C01F  F0AF         	movff	?___flmul+2,_measure_capacitance$1110+2
  2783  000F3E  C020  F0B0         	movff	?___flmul+3,_measure_capacitance$1110+3
  2784                           
  2785                           ;measure.c: 160: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2786  000F42  C0AD  F01D         	movff	_measure_capacitance$1110,___flmul@f1
  2787  000F46  C0AE  F01E         	movff	_measure_capacitance$1110+1,___flmul@f1+1
  2788  000F4A  C0AF  F01F         	movff	_measure_capacitance$1110+2,___flmul@f1+2
  2789  000F4E  C0B0  F020         	movff	_measure_capacitance$1110+3,___flmul@f1+3
  2790  000F52  C0EB  F021         	movff	_CCal,___flmul@f2
  2791  000F56  C0EC  F022         	movff	_CCal+1,___flmul@f2+1
  2792  000F5A  C0ED  F023         	movff	_CCal+2,___flmul@f2+2
  2793  000F5E  C0EE  F024         	movff	_CCal+3,___flmul@f2+3
  2794  000F62  ECF5  F00E         	call	___flmul	;wreg free
  2795  000F66  C01D  F0B4         	movff	?___flmul,measure_capacitance@Cin
  2796  000F6A  C01E  F0B5         	movff	?___flmul+1,measure_capacitance@Cin+1
  2797  000F6E  C01F  F0B6         	movff	?___flmul+2,measure_capacitance@Cin+2
  2798  000F72  C020  F0B7         	movff	?___flmul+3,measure_capacitance@Cin+3
  2799                           
  2800                           ;measure.c: 164: ser_puts("Cin=");
  2801  000F76  0ED5               	movlw	STR_13& (0+255)
  2802  000F78  EC9F  F014         	call	_ser_puts
  2803                           
  2804                           ;measure.c: 165: format_double(Cin);
  2805  000F7C  C0B4  F091         	movff	measure_capacitance@Cin,format_double@num
  2806  000F80  C0B5  F092         	movff	measure_capacitance@Cin+1,format_double@num+1
  2807  000F84  C0B6  F093         	movff	measure_capacitance@Cin+2,format_double@num+2
  2808  000F88  C0B7  F094         	movff	measure_capacitance@Cin+3,format_double@num+3
  2809  000F8C  EC95  F00A         	call	_format_double	;wreg free
  2810                           
  2811                           ;measure.c: 166: ser_putch(' ');
  2812  000F90  0E20               	movlw	32
  2813  000F92  EC57  F014         	call	_ser_putch
  2814                           
  2815                           ;measure.c: 167: format_xint32(*(uint32_t*)&Cin);
  2816  000F96  C0B4  F036         	movff	measure_capacitance@Cin,format_xint32@x
  2817  000F9A  C0B5  F037         	movff	measure_capacitance@Cin+1,format_xint32@x+1
  2818  000F9E  C0B6  F038         	movff	measure_capacitance@Cin+2,format_xint32@x+2
  2819  000FA2  C0B7  F039         	movff	measure_capacitance@Cin+3,format_xint32@x+3
  2820  000FA6  EC92  F013         	call	_format_xint32	;wreg free
  2821                           
  2822                           ;measure.c: 168: ser_puts("\r\n");
  2823  000FAA  0EF8               	movlw	STR_2& (0+255)
  2824  000FAC  EC9F  F014         	call	_ser_puts
  2825                           
  2826                           ;measure.c: 170: if(Cin > 999) {
  2827  000FB0  D8D6               	call	PL32	;call to abstracted procedure
  2828  000FB2  C0B4  F008         	movff	measure_capacitance@Cin,___flge@ff2
  2829  000FB6  C0B5  F009         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2830  000FBA  C0B6  F00A         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2831  000FBE  C0B7  F00B         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2832  000FC2  EC60  F012         	call	___flge	;wreg free
  2833  000FC6  E24D               	bc	l4164
  2834                           
  2835                           ;measure.c: 171: if(Cin > (999e+03l)) {
  2836  000FC8  D8B9               	call	PL22	;call to abstracted procedure
  2837  000FCA  C0B4  F008         	movff	measure_capacitance@Cin,___flge@ff2
  2838  000FCE  C0B5  F009         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2839  000FD2  C0B6  F00A         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2840  000FD6  C0B7  F00B         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2841  000FDA  EC60  F012         	call	___flge	;wreg free
  2842  000FDE  E22F               	bc	l4160
  2843                           
  2844                           ;measure.c: 172: if(Cin > (999e+06l)) {
  2845  000FE0  D89B               	call	PL14	;call to abstracted procedure
  2846  000FE2  C0B4  F008         	movff	measure_capacitance@Cin,___flge@ff2
  2847  000FE6  C0B5  F009         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2848  000FEA  C0B6  F00A         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2849  000FEE  C0B7  F00B         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2850  000FF2  EC60  F012         	call	___flge	;wreg free
  2851  000FF6  E215               	bc	l4156
  2852                           
  2853                           ;measure.c: 173: Cin = Cin / (1e+09);
  2854  000FF8  C0B4  F00E         	movff	measure_capacitance@Cin,___fldiv@f1
  2855  000FFC  C0B5  F00F         	movff	measure_capacitance@Cin+1,___fldiv@f1+1
  2856  001000  C0B6  F010         	movff	measure_capacitance@Cin+2,___fldiv@f1+2
  2857  001004  C0B7  F011         	movff	measure_capacitance@Cin+3,___fldiv@f1+3
  2858  001008  D890               	call	PL20	;call to abstracted procedure
  2859  00100A  ECB8  F00F         	call	___fldiv	;wreg free
  2860  00100E  C00E  F0B4         	movff	?___fldiv,measure_capacitance@Cin
  2861  001012  C00F  F0B5         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2862  001016  C010  F0B6         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2863  00101A  C011  F0B7         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2864                           
  2865                           ;measure.c: 174: unit = 4;
  2866  00101E  0E04               	movlw	4
  2867  001020  D021               	goto	L3
  2868  001022                     l4156:
  2869                           
  2870                           ;measure.c: 176: Cin = Cin / (1e+06);
  2871  001022  D86F               	call	PL10	;call to abstracted procedure
  2872  001024  D8A4               	call	PL34	;call to abstracted procedure
  2873  001026  ECB8  F00F         	call	___fldiv	;wreg free
  2874  00102A  C00E  F0B4         	movff	?___fldiv,measure_capacitance@Cin
  2875  00102E  C00F  F0B5         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2876  001032  C010  F0B6         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2877  001036  C011  F0B7         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2878                           
  2879                           ;measure.c: 177: unit = 5;
  2880  00103A  0E05               	movlw	5
  2881  00103C  D013               	goto	L3
  2882  00103E                     l4160:
  2883                           
  2884                           ;measure.c: 180: Cin = Cin / 1e+03;
  2885  00103E  D861               	call	PL10	;call to abstracted procedure
  2886  001040  6E13               	movwf	___fldiv@f2+1,c
  2887  001042  0E7A               	movlw	122
  2888  001044  6E14               	movwf	___fldiv@f2+2,c
  2889  001046  0E44               	movlw	68
  2890  001048  6E15               	movwf	___fldiv@f2+3,c
  2891  00104A  ECB8  F00F         	call	___fldiv	;wreg free
  2892  00104E  C00E  F0B4         	movff	?___fldiv,measure_capacitance@Cin
  2893  001052  C00F  F0B5         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2894  001056  C010  F0B6         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2895  00105A  C011  F0B7         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2896                           
  2897                           ;measure.c: 181: unit = 6;
  2898  00105E  0E06               	movlw	6
  2899  001060  D001               	goto	L3
  2900  001062                     l4164:
  2901                           
  2902                           ;measure.c: 184: unit = 7;
  2903  001062  0E07               	movlw	7
  2904  001064                     L3:
  2905  001064  0100               	movlb	0	; () banked
  2906  001066  6FB1               	movwf	measure_capacitance@unit& (0+255),b
  2907                           
  2908                           ; BSR set to: 0
  2909                           ;measure.c: 186: Cin = Cin * 100;
  2910  001068  C0B4  F01D         	movff	measure_capacitance@Cin,___flmul@f1
  2911  00106C  C0B5  F01E         	movff	measure_capacitance@Cin+1,___flmul@f1+1
  2912  001070  C0B6  F01F         	movff	measure_capacitance@Cin+2,___flmul@f1+2
  2913  001074  C0B7  F020         	movff	measure_capacitance@Cin+3,___flmul@f1+3
  2914  001078  D86A               	call	PL28	;call to abstracted procedure
  2915  00107A  ECF5  F00E         	call	___flmul	;wreg free
  2916  00107E  C01D  F0B4         	movff	?___flmul,measure_capacitance@Cin
  2917  001082  C01E  F0B5         	movff	?___flmul+1,measure_capacitance@Cin+1
  2918  001086  C01F  F0B6         	movff	?___flmul+2,measure_capacitance@Cin+2
  2919  00108A  C020  F0B7         	movff	?___flmul+3,measure_capacitance@Cin+3
  2920                           
  2921                           ;measure.c: 187: var = (uint16_t)Cin;
  2922  00108E  C0B4  F052         	movff	measure_capacitance@Cin,___fltol@f1
  2923  001092  C0B5  F053         	movff	measure_capacitance@Cin+1,___fltol@f1+1
  2924  001096  C0B6  F054         	movff	measure_capacitance@Cin+2,___fltol@f1+2
  2925  00109A  C0B7  F055         	movff	measure_capacitance@Cin+3,___fltol@f1+3
  2926  00109E  EC0A  F011         	call	___fltol	;wreg free
  2927  0010A2  C052  F0B2         	movff	?___fltol,measure_capacitance@var
  2928  0010A6  C053  F0B3         	movff	?___fltol+1,measure_capacitance@var+1
  2929                           
  2930                           ; BSR set to: 0
  2931                           ;measure.c: 189: print_reading(var);
  2932  0010AA  C0B2  F036         	movff	measure_capacitance@var,print_reading@measurement
  2933  0010AE  C0B3  F037         	movff	measure_capacitance@var+1,print_reading@measurement+1
  2934  0010B2  ECD6  F011         	call	_print_reading	;wreg free
  2935                           
  2936                           ;measure.c: 190: print_unit(unit);
  2937  0010B6  0100               	movlb	0	; () banked
  2938  0010B8  51B1               	movf	measure_capacitance@unit& (0+255),w,b
  2939  0010BA  EF2F  F014         	goto	_print_unit
  2940  0010BE                     __end_of_measure_capacitance:
  2941                           	opt stack 0
  2942  0010BE                     PL4:
  2943                           	opt stack 24
  2944  0010BE  C0BE  F021         	movff	_F3,___flmul@f2
  2945  0010C2  C0BF  F022         	movff	_F3+1,___flmul@f2+1
  2946  0010C6  C0C0  F023         	movff	_F3+2,___flmul@f2+2
  2947  0010CA  C0C1  F024         	movff	_F3+3,___flmul@f2+3
  2948  0010CE  C0BE  F01D         	movff	_F3,___flmul@f1
  2949  0010D2  C0BF  F01E         	movff	_F3+1,___flmul@f1+1
  2950  0010D6  C0C0  F01F         	movff	_F3+2,___flmul@f1+2
  2951  0010DA  C0C1  F020         	movff	_F3+3,___flmul@f1+3
  2952  0010DE  0012               	return	
  2953  0010E0                     __end_ofPL4:
  2954                           	opt stack 0
  2955  0010E0                     PL6:
  2956                           	opt stack 24
  2957  0010E0  C0E7  F004         	movff	_F1,___flge@ff1
  2958  0010E4  C0E8  F005         	movff	_F1+1,___flge@ff1+1
  2959  0010E8  C0E9  F006         	movff	_F1+2,___flge@ff1+2
  2960  0010EC  C0EA  F007         	movff	_F1+3,___flge@ff1+3
  2961  0010F0  C0BE  F008         	movff	_F3,___flge@ff2
  2962  0010F4  C0BF  F009         	movff	_F3+1,___flge@ff2+1
  2963  0010F8  C0C0  F00A         	movff	_F3+2,___flge@ff2+2
  2964  0010FC  C0C1  F00B         	movff	_F3+3,___flge@ff2+3
  2965  001100  0012               	return	
  2966  001102                     __end_ofPL6:
  2967                           	opt stack 0
  2968  001102                     PL10:
  2969                           	opt stack 23
  2970  001102  C0B4  F00E         	movff	measure_capacitance@Cin,___fldiv@f1
  2971  001106  C0B5  F00F         	movff	measure_capacitance@Cin+1,___fldiv@f1+1
  2972  00110A  C0B6  F010         	movff	measure_capacitance@Cin+2,___fldiv@f1+2
  2973  00110E  C0B7  F011         	movff	measure_capacitance@Cin+3,___fldiv@f1+3
  2974  001112  0E00               	movlw	0
  2975  001114  6E12               	movwf	___fldiv@f2,c
  2976  001116  0C00               	retlw	0
  2977  001118                     __end_ofPL10:
  2978                           	opt stack 0
  2979  001118                     PL14:
  2980                           	opt stack 24
  2981  001118  0E1F               	movlw	31
  2982  00111A  6E04               	movwf	___flge@ff1,c
  2983  00111C  0E2E               	movlw	46
  2984  00111E  6E05               	movwf	___flge@ff1+1,c
  2985  001120  0E6E               	movlw	110
  2986  001122  6E06               	movwf	___flge@ff1+2,c
  2987  001124  0E4E               	movlw	78
  2988  001126  6E07               	movwf	___flge@ff1+3,c
  2989  001128  0C4E               	retlw	78
  2990  00112A                     __end_ofPL14:
  2991                           	opt stack 0
  2992  00112A                     PL20:
  2993                           	opt stack 24
  2994  00112A  0E28               	movlw	40
  2995  00112C  6E12               	movwf	___fldiv@f2,c
  2996  00112E  0E6B               	movlw	107
  2997  001130  6E13               	movwf	___fldiv@f2+1,c
  2998  001132  0E6E               	movlw	110
  2999  001134  6E14               	movwf	___fldiv@f2+2,c
  3000  001136  0E4E               	movlw	78
  3001  001138  6E15               	movwf	___fldiv@f2+3,c
  3002  00113A  0C4E               	retlw	78
  3003  00113C                     __end_ofPL20:
  3004                           	opt stack 0
  3005  00113C                     PL22:
  3006                           	opt stack 24
  3007  00113C  0E80               	movlw	128
  3008  00113E  6E04               	movwf	___flge@ff1,c
  3009  001140  0EE5               	movlw	229
  3010  001142  6E05               	movwf	___flge@ff1+1,c
  3011  001144  0E73               	movlw	115
  3012  001146  6E06               	movwf	___flge@ff1+2,c
  3013  001148  0E49               	movlw	73
  3014  00114A  6E07               	movwf	___flge@ff1+3,c
  3015  00114C  0C49               	retlw	73
  3016  00114E                     __end_ofPL22:
  3017                           	opt stack 0
  3018  00114E                     PL28:
  3019                           	opt stack 24
  3020  00114E  0E00               	movlw	0
  3021  001150  6E21               	movwf	___flmul@f2,c
  3022  001152  6E22               	movwf	___flmul@f2+1,c
  3023  001154  0EC8               	movlw	200
  3024  001156  6E23               	movwf	___flmul@f2+2,c
  3025  001158  0E42               	movlw	66
  3026  00115A  6E24               	movwf	___flmul@f2+3,c
  3027  00115C  0C42               	retlw	66
  3028  00115E                     __end_ofPL28:
  3029                           	opt stack 0
  3030  00115E                     PL32:
  3031                           	opt stack 24
  3032  00115E  6A04               	clrf	___flge@ff1,c
  3033  001160  0EC0               	movlw	192
  3034  001162  6E05               	movwf	___flge@ff1+1,c
  3035  001164  0E79               	movlw	121
  3036  001166  6E06               	movwf	___flge@ff1+2,c
  3037  001168  0E44               	movlw	68
  3038  00116A  6E07               	movwf	___flge@ff1+3,c
  3039  00116C  0C44               	retlw	68
  3040  00116E                     __end_ofPL32:
  3041                           	opt stack 0
  3042  00116E                     PL34:
  3043                           	opt stack 24
  3044  00116E  0E24               	movlw	36
  3045  001170  6E13               	movwf	___fldiv@f2+1,c
  3046  001172  0E74               	movlw	116
  3047  001174  6E14               	movwf	___fldiv@f2+2,c
  3048  001176  0E49               	movlw	73
  3049  001178  6E15               	movwf	___fldiv@f2+3,c
  3050  00117A  0C49               	retlw	73
  3051  00117C                     __end_ofPL34:
  3052                           	opt stack 0
  3053                           tblptru	equ	0xFF8
  3054                           tblptrh	equ	0xFF7
  3055                           tblptrl	equ	0xFF6
  3056                           tablat	equ	0xFF5
  3057                           prodl	equ	0xFF3
  3058                           intcon	equ	0xFF2
  3059                           intcon2	equ	0xFF1
  3060                           postinc0	equ	0xFEE
  3061                           wreg	equ	0xFE8
  3062                           postdec1	equ	0xFE5
  3063                           fsr1l	equ	0xFE1
  3064                           indf2	equ	0xFDF
  3065                           postinc2	equ	0xFDE
  3066                           postdec2	equ	0xFDD
  3067                           fsr2h	equ	0xFDA
  3068                           fsr2l	equ	0xFD9
  3069                           status	equ	0xFD8
  3070                           
  3071 ;; *************** function _print_unit *****************
  3072 ;; Defined at:
  3073 ;;		line 123 in file "../../../src/print.c"
  3074 ;; Parameters:    Size  Location     Type
  3075 ;;  unit            1    wreg     unsigned char 
  3076 ;; Auto vars:     Size  Location     Type
  3077 ;;  unit            1    0[COMRAM] unsigned char 
  3078 ;; Return value:  Size  Location     Type
  3079 ;;		None               void
  3080 ;; Registers used:
  3081 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3082 ;; Tracked objects:
  3083 ;;		On entry : F/0
  3084 ;;		On exit  : 0/0
  3085 ;;		Unchanged: 0/0
  3086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3087 ;;      Params:         0       0       0       0       0       0       0       0       0
  3088 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3089 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3090 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3091 ;;Total ram usage:        2 bytes
  3092 ;; Hardware stack levels used:    1
  3093 ;; Hardware stack levels required when called:    5
  3094 ;; This function calls:
  3095 ;;		_lcd_gotoxy
  3096 ;;		_ser_puts
  3097 ;; This function is called by:
  3098 ;;		_measure_capacitance
  3099 ;;		_measure_inductance
  3100 ;; This function uses a non-reentrant model
  3101 ;;
  3102                           
  3103                           	psect	text7
  3104  00285E                     __ptext7:
  3105                           	opt stack 0
  3106  00285E                     _print_unit:
  3107                           	opt stack 24
  3108                           
  3109                           ; BSR set to: 0
  3110                           ;print.c: 131: static const char* units[8] = {"H", "mH", "uH", "nH", "mF", "uF", "nF", "
      +                          pF"};
  3111                           ;print.c: 132: lcd_gotoxy(14, 0);
  3112                           
  3113                           ;incstack = 0
  3114  00285E  6A08               	clrf	lcd_gotoxy@row,c
  3115  002860  0E0E               	movlw	14
  3116  002862  EC77  F013         	call	_lcd_gotoxy
  3117                           
  3118                           ;print.c: 136: lcd_gotoxy(16 - (buffer.n - buffer.p), 0);
  3119  002866  6A08               	clrf	lcd_gotoxy@row,c
  3120  002868  0100               	movlb	0	; () banked
  3121  00286A  39E6               	swapf	(_buffer+16)& (0+255),w,b
  3122  00286C  0B0F               	andlw	15
  3123  00286E  6E0E               	movwf	??_print_unit& (0+255),c
  3124  002870  51E6               	movf	(_buffer+16)& (0+255),w,b
  3125  002872  0B0F               	andlw	15
  3126  002874  6E0F               	movwf	(??_print_unit+1)& (0+255),c
  3127  002876  500E               	movf	??_print_unit,w,c
  3128  002878  5C0F               	subwf	??_print_unit+1,w,c
  3129  00287A  0F10               	addlw	16
  3130  00287C  EC77  F013         	call	_lcd_gotoxy
  3131                           
  3132                           ;print.c: 139: ser_puts("\r\n");
  3133  002880  0EF8               	movlw	STR_2& (0+255)
  3134  002882  EF9F  F014         	goto	_ser_puts
  3135  002886                     __end_of_print_unit:
  3136                           	opt stack 0
  3137                           tblptru	equ	0xFF8
  3138                           tblptrh	equ	0xFF7
  3139                           tblptrl	equ	0xFF6
  3140                           tablat	equ	0xFF5
  3141                           prodl	equ	0xFF3
  3142                           intcon	equ	0xFF2
  3143                           intcon2	equ	0xFF1
  3144                           postinc0	equ	0xFEE
  3145                           wreg	equ	0xFE8
  3146                           postdec1	equ	0xFE5
  3147                           fsr1l	equ	0xFE1
  3148                           indf2	equ	0xFDF
  3149                           postinc2	equ	0xFDE
  3150                           postdec2	equ	0xFDD
  3151                           fsr2h	equ	0xFDA
  3152                           fsr2l	equ	0xFD9
  3153                           status	equ	0xFD8
  3154                           
  3155 ;; *************** function _print_reading *****************
  3156 ;; Defined at:
  3157 ;;		line 144 in file "../../../src/print.c"
  3158 ;; Parameters:    Size  Location     Type
  3159 ;;  measurement     2   53[COMRAM] unsigned int 
  3160 ;; Auto vars:     Size  Location     Type
  3161 ;;		None
  3162 ;; Return value:  Size  Location     Type
  3163 ;;		None               void
  3164 ;; Registers used:
  3165 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3166 ;; Tracked objects:
  3167 ;;		On entry : F/0
  3168 ;;		On exit  : 0/0
  3169 ;;		Unchanged: 0/0
  3170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3171 ;;      Params:         2       0       0       0       0       0       0       0       0
  3172 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3173 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3174 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3175 ;;Total ram usage:        6 bytes
  3176 ;; Hardware stack levels used:    1
  3177 ;; Hardware stack levels required when called:    5
  3178 ;; This function calls:
  3179 ;;		___lwdiv
  3180 ;;		___lwmod
  3181 ;;		_format_number
  3182 ;;		_lcd_gotoxy
  3183 ;;		_lcd_puts
  3184 ;; This function is called by:
  3185 ;;		_measure_capacitance
  3186 ;;		_measure_inductance
  3187 ;; This function uses a non-reentrant model
  3188 ;;
  3189                           
  3190                           	psect	text8
  3191  0023AC                     __ptext8:
  3192                           	opt stack 0
  3193  0023AC                     _print_reading:
  3194                           	opt stack 24
  3195                           
  3196                           ; BSR set to: 0
  3197                           ;print.c: 171: lcd_gotoxy(9, 0);
  3198                           
  3199                           ;incstack = 0
  3200  0023AC  6A08               	clrf	lcd_gotoxy@row,c
  3201  0023AE  0E09               	movlw	9
  3202  0023B0  EC77  F013         	call	_lcd_gotoxy
  3203                           
  3204                           ;print.c: 172: lcd_puts("     ");
  3205  0023B4  0EB2               	movlw	(STR_33+1)& (0+255)
  3206  0023B6  ECF0  F013         	call	_lcd_puts
  3207                           
  3208                           ;print.c: 173: lcd_gotoxy(9, 0);
  3209  0023BA  6A08               	clrf	lcd_gotoxy@row,c
  3210  0023BC  0E09               	movlw	9
  3211  0023BE  EC77  F013         	call	_lcd_gotoxy
  3212                           
  3213                           ;print.c: 175: format_number(measurement / 100, 10, 0);
  3214  0023C2  C036  F004         	movff	print_reading@measurement,___lwdiv@dividend
  3215  0023C6  C037  F005         	movff	print_reading@measurement+1,___lwdiv@dividend+1
  3216  0023CA  6A07               	clrf	___lwdiv@divisor+1,c
  3217  0023CC  0E64               	movlw	100
  3218  0023CE  6E06               	movwf	___lwdiv@divisor,c
  3219  0023D0  ECAB  F012         	call	___lwdiv	;wreg free
  3220  0023D4  C004  F038         	movff	?___lwdiv,_print_reading$1118
  3221  0023D8  C005  F039         	movff	?___lwdiv+1,_print_reading$1118+1
  3222                           
  3223                           ;print.c: 175: format_number(measurement / 100, 10, 0);
  3224  0023DC  C038  F00B         	movff	_print_reading$1118,format_number@n
  3225  0023E0  C039  F00C         	movff	_print_reading$1118+1,format_number@n+1
  3226  0023E4  0E0A               	movlw	10
  3227  0023E6  6E0D               	movwf	format_number@base,c
  3228  0023E8  6A0E               	clrf	format_number@pad,c
  3229  0023EA  EC65  F010         	call	_format_number	;wreg free
  3230                           
  3231                           ;print.c: 177: format_number(measurement % 100, 10, 0);
  3232  0023EE  C036  F004         	movff	print_reading@measurement,___lwmod@dividend
  3233  0023F2  C037  F005         	movff	print_reading@measurement+1,___lwmod@dividend+1
  3234  0023F6  6A07               	clrf	___lwmod@divisor+1,c
  3235  0023F8  0E64               	movlw	100
  3236  0023FA  6E06               	movwf	___lwmod@divisor,c
  3237  0023FC  EC3B  F013         	call	___lwmod	;wreg free
  3238  002400  C004  F03A         	movff	?___lwmod,_print_reading$1119
  3239  002404  C005  F03B         	movff	?___lwmod+1,_print_reading$1119+1
  3240                           
  3241                           ;print.c: 177: format_number(measurement % 100, 10, 0);
  3242  002408  C03A  F00B         	movff	_print_reading$1119,format_number@n
  3243  00240C  C03B  F00C         	movff	_print_reading$1119+1,format_number@n+1
  3244  002410  0E0A               	movlw	10
  3245  002412  6E0D               	movwf	format_number@base,c
  3246  002414  6A0E               	clrf	format_number@pad,c
  3247  002416  EF65  F010         	goto	_format_number	;wreg free
  3248  00241A                     __end_of_print_reading:
  3249                           	opt stack 0
  3250                           tblptru	equ	0xFF8
  3251                           tblptrh	equ	0xFF7
  3252                           tblptrl	equ	0xFF6
  3253                           tablat	equ	0xFF5
  3254                           prodl	equ	0xFF3
  3255                           intcon	equ	0xFF2
  3256                           intcon2	equ	0xFF1
  3257                           postinc0	equ	0xFEE
  3258                           wreg	equ	0xFE8
  3259                           postdec1	equ	0xFE5
  3260                           fsr1l	equ	0xFE1
  3261                           indf2	equ	0xFDF
  3262                           postinc2	equ	0xFDE
  3263                           postdec2	equ	0xFDD
  3264                           fsr2h	equ	0xFDA
  3265                           fsr2l	equ	0xFD9
  3266                           status	equ	0xFD8
  3267                           
  3268 ;; *************** function _lcd_puts *****************
  3269 ;; Defined at:
  3270 ;;		line 163 in file "../../../lib/lcd44780.c"
  3271 ;; Parameters:    Size  Location     Type
  3272 ;;  string          1    wreg     PTR const unsigned char 
  3273 ;;		 -> STR_36(5), STR_35(6), STR_34(7), STR_33(7), 
  3274 ;;		 -> STR_29(10), STR_27(4), STR_26(4), STR_25(6), 
  3275 ;; Auto vars:     Size  Location     Type
  3276 ;;  string          1    8[COMRAM] PTR const unsigned char 
  3277 ;;		 -> STR_36(5), STR_35(6), STR_34(7), STR_33(7), 
  3278 ;;		 -> STR_29(10), STR_27(4), STR_26(4), STR_25(6), 
  3279 ;;  i               1    7[COMRAM] unsigned char 
  3280 ;; Return value:  Size  Location     Type
  3281 ;;		None               void
  3282 ;; Registers used:
  3283 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3284 ;; Tracked objects:
  3285 ;;		On entry : 0/0
  3286 ;;		On exit  : 0/0
  3287 ;;		Unchanged: 0/0
  3288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3289 ;;      Params:         0       0       0       0       0       0       0       0       0
  3290 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3291 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3292 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3293 ;;Total ram usage:        3 bytes
  3294 ;; Hardware stack levels used:    1
  3295 ;; Hardware stack levels required when called:    3
  3296 ;; This function calls:
  3297 ;;		_lcd_send
  3298 ;; This function is called by:
  3299 ;;		_print_reading
  3300 ;;		_print_indicator
  3301 ;;		_main
  3302 ;; This function uses a non-reentrant model
  3303 ;;
  3304                           
  3305                           	psect	text9
  3306  0027E0                     __ptext9:
  3307                           	opt stack 0
  3308  0027E0                     _lcd_puts:
  3309                           	opt stack 26
  3310                           
  3311                           ;incstack = 0
  3312                           ;lcd_puts@string stored from wreg
  3313  0027E0  6E09               	movwf	lcd_puts@string,c
  3314                           
  3315                           ;lcd44780.c: 164: uint8_t i;
  3316                           ;lcd44780.c: 165: for(i = 0; string[i]; i++) lcd_send((string[i]), 1);
  3317  0027E2  6A08               	clrf	lcd_puts@i,c
  3318  0027E4  D006               	goto	l3060
  3319  0027E6                     l3056:
  3320  0027E6  0E01               	movlw	1
  3321  0027E8  6E05               	movwf	lcd_send@mode,c
  3322  0027EA  D807               	call	PL24	;call to abstracted procedure
  3323  0027EC  ECCB  F014         	call	_lcd_send
  3324  0027F0  2A08               	incf	lcd_puts@i,f,c
  3325  0027F2                     l3060:
  3326  0027F2  D803               	call	PL24	;call to abstracted procedure
  3327  0027F4  B4D8               	btfsc	status,2,c
  3328  0027F6  0012               	return		;funcret
  3329  0027F8  D7F6               	goto	l3056
  3330  0027FA                     __end_of_lcd_puts:
  3331                           	opt stack 0
  3332  0027FA                     PL24:
  3333                           	opt stack 26
  3334  0027FA  5009               	movf	lcd_puts@string,w,c
  3335  0027FC  2408               	addwf	lcd_puts@i,w,c
  3336  0027FE  6E07               	movwf	??_lcd_puts& (0+255),c
  3337  002800  C007  FFF6         	movff	??_lcd_puts,tblptrl
  3338  002804                     	if	0	;There is only one active tblptr byte
  3339  002804                     	endif
  3340  002804                     	if	0	;tblptru may be non-zero
  3341  002804                     	endif
  3342  002804                     	if	0	;tblptru may be non-zero
  3343  002804                     	endif
  3344  002804  0008               	tblrd		*
  3345  002806  50F5               	movf	tablat,w,c
  3346  002808  0012               	return	
  3347  00280A                     __end_ofPL24:
  3348                           	opt stack 0
  3349                           tblptru	equ	0xFF8
  3350                           tblptrh	equ	0xFF7
  3351                           tblptrl	equ	0xFF6
  3352                           tablat	equ	0xFF5
  3353                           prodl	equ	0xFF3
  3354                           intcon	equ	0xFF2
  3355                           intcon2	equ	0xFF1
  3356                           postinc0	equ	0xFEE
  3357                           wreg	equ	0xFE8
  3358                           postdec1	equ	0xFE5
  3359                           fsr1l	equ	0xFE1
  3360                           indf2	equ	0xFDF
  3361                           postinc2	equ	0xFDE
  3362                           postdec2	equ	0xFDD
  3363                           fsr2h	equ	0xFDA
  3364                           fsr2l	equ	0xFD9
  3365                           status	equ	0xFD8
  3366                           
  3367 ;; *************** function _format_xint32 *****************
  3368 ;; Defined at:
  3369 ;;		line 51 in file "../../../lib/format.c"
  3370 ;; Parameters:    Size  Location     Type
  3371 ;;  x               4   53[COMRAM] unsigned long 
  3372 ;; Auto vars:     Size  Location     Type
  3373 ;;		None
  3374 ;; Return value:  Size  Location     Type
  3375 ;;		None               void
  3376 ;; Registers used:
  3377 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3378 ;; Tracked objects:
  3379 ;;		On entry : 0/0
  3380 ;;		On exit  : 0/0
  3381 ;;		Unchanged: 0/0
  3382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3383 ;;      Params:         4       0       0       0       0       0       0       0       0
  3384 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3385 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3386 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3387 ;;Total ram usage:        4 bytes
  3388 ;; Hardware stack levels used:    1
  3389 ;; Hardware stack levels required when called:    3
  3390 ;; This function calls:
  3391 ;;		_buffer_putch
  3392 ;;		_format_number
  3393 ;; This function is called by:
  3394 ;;		_measure_capacitance
  3395 ;; This function uses a non-reentrant model
  3396 ;;
  3397                           
  3398                           	psect	text10
  3399  002724                     __ptext10:
  3400                           	opt stack 0
  3401  002724                     _format_xint32:
  3402                           	opt stack 26
  3403                           
  3404                           ;format.c: 52: buffer_putch('0');
  3405                           
  3406                           ;incstack = 0
  3407  002724  0E30               	movlw	48
  3408  002726  ECD0  F012         	call	_buffer_putch
  3409                           
  3410                           ;format.c: 53: buffer_putch('x');
  3411  00272A  0E78               	movlw	120
  3412  00272C  ECD0  F012         	call	_buffer_putch
  3413                           
  3414                           ;format.c: 54: format_number((uint16_t)(x >> 16), 16, -4);
  3415  002730  C038  F00B         	movff	format_xint32@x+2,format_number@n
  3416  002734  C039  F00C         	movff	format_xint32@x+3,format_number@n+1
  3417  002738  0E10               	movlw	16
  3418  00273A  6E0D               	movwf	format_number@base,c
  3419  00273C  0EFC               	movlw	252
  3420  00273E  6E0E               	movwf	format_number@pad,c
  3421  002740  EC65  F010         	call	_format_number	;wreg free
  3422                           
  3423                           ;format.c: 55: format_number((uint16_t)(x & 0xffff), 16, -4);
  3424  002744  C036  F00B         	movff	format_xint32@x,format_number@n
  3425  002748  C037  F00C         	movff	format_xint32@x+1,format_number@n+1
  3426  00274C  0E10               	movlw	16
  3427  00274E  6E0D               	movwf	format_number@base,c
  3428  002750  0EFC               	movlw	252
  3429  002752  6E0E               	movwf	format_number@pad,c
  3430  002754  EF65  F010         	goto	_format_number	;wreg free
  3431  002758                     __end_of_format_xint32:
  3432                           	opt stack 0
  3433                           tblptru	equ	0xFF8
  3434                           tblptrh	equ	0xFF7
  3435                           tblptrl	equ	0xFF6
  3436                           tablat	equ	0xFF5
  3437                           prodl	equ	0xFF3
  3438                           intcon	equ	0xFF2
  3439                           intcon2	equ	0xFF1
  3440                           postinc0	equ	0xFEE
  3441                           wreg	equ	0xFE8
  3442                           postdec1	equ	0xFE5
  3443                           fsr1l	equ	0xFE1
  3444                           indf2	equ	0xFDF
  3445                           postinc2	equ	0xFDE
  3446                           postdec2	equ	0xFDD
  3447                           fsr2h	equ	0xFDA
  3448                           fsr2l	equ	0xFD9
  3449                           status	equ	0xFD8
  3450                           
  3451 ;; *************** function _format_double *****************
  3452 ;; Defined at:
  3453 ;;		line 77 in file "../../../lib/format.c"
  3454 ;; Parameters:    Size  Location     Type
  3455 ;;  num             4   49[BANK0 ] unsigned long 
  3456 ;; Auto vars:     Size  Location     Type
  3457 ;;  weight          4   61[BANK0 ] unsigned long 
  3458 ;;  m               2   67[BANK0 ] short 
  3459 ;;  digit           2   65[BANK0 ] short 
  3460 ;; Return value:  Size  Location     Type
  3461 ;;		None               void
  3462 ;; Registers used:
  3463 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3464 ;; Tracked objects:
  3465 ;;		On entry : 0/0
  3466 ;;		On exit  : 0/0
  3467 ;;		Unchanged: 0/0
  3468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3469 ;;      Params:         0       4       0       0       0       0       0       0       0
  3470 ;;      Locals:         0      16       0       0       0       0       0       0       0
  3471 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3472 ;;      Totals:         0      20       0       0       0       0       0       0       0
  3473 ;;Total ram usage:       20 bytes
  3474 ;; Hardware stack levels used:    1
  3475 ;; Hardware stack levels required when called:    6
  3476 ;; This function calls:
  3477 ;;		___awtofl
  3478 ;;		___fldiv
  3479 ;;		___flge
  3480 ;;		___flmul
  3481 ;;		___flsub
  3482 ;;		___fltol
  3483 ;;		_buffer_putch
  3484 ;;		_floor
  3485 ;;		_log10
  3486 ;;		_pow
  3487 ;; This function is called by:
  3488 ;;		_measure_capacitance
  3489 ;;		_main
  3490 ;; This function uses a non-reentrant model
  3491 ;;
  3492                           
  3493                           	psect	text11
  3494  00152A                     __ptext11:
  3495                           	opt stack 0
  3496  00152A                     _format_double:
  3497                           	opt stack 23
  3498                           
  3499                           ;format.c: 78: short m = (short)log10(num);
  3500                           
  3501                           ;incstack = 0
  3502  00152A  C091  F04A         	movff	format_double@num,log10@x
  3503  00152E  C092  F04B         	movff	format_double@num+1,log10@x+1
  3504  001532  C093  F04C         	movff	format_double@num+2,log10@x+2
  3505  001536  C094  F04D         	movff	format_double@num+3,log10@x+3
  3506  00153A  EC0D  F012         	call	_log10	;wreg free
  3507  00153E  C04A  F052         	movff	?_log10,___fltol@f1
  3508  001542  C04B  F053         	movff	?_log10+1,___fltol@f1+1
  3509  001546  C04C  F054         	movff	?_log10+2,___fltol@f1+2
  3510  00154A  C04D  F055         	movff	?_log10+3,___fltol@f1+3
  3511  00154E  EC0A  F011         	call	___fltol	;wreg free
  3512  001552  C052  F0A3         	movff	?___fltol,format_double@m
  3513  001556  C053  F0A4         	movff	?___fltol+1,format_double@m+1
  3514                           
  3515                           ;format.c: 79: short digit;
  3516                           ;format.c: 82: while(num > 0 + 1.19209290e-07) {
  3517  00155A  D099               	goto	l4036
  3518  00155C                     l4018:
  3519                           
  3520                           ;format.c: 83: double weight = pow(10.0l, m);
  3521  00155C  C0A3  F00E         	movff	format_double@m,___awtofl@c
  3522  001560  C0A4  F00F         	movff	format_double@m+1,___awtofl@c+1
  3523  001564  EC5A  F013         	call	___awtofl	;wreg free
  3524  001568  C00E  F095         	movff	?___awtofl,_format_double$1106
  3525  00156C  C00F  F096         	movff	?___awtofl+1,_format_double$1106+1
  3526  001570  C010  F097         	movff	?___awtofl+2,_format_double$1106+2
  3527  001574  C011  F098         	movff	?___awtofl+3,_format_double$1106+3
  3528                           
  3529                           ;format.c: 83: double weight = pow(10.0l, m);
  3530  001578  0100               	movlb	0	; () banked
  3531  00157A  6B7C               	clrf	pow@x& (0+255),b
  3532  00157C  6B7D               	clrf	(pow@x+1)& (0+255),b
  3533  00157E  0E20               	movlw	32
  3534  001580  6F7E               	movwf	(pow@x+2)& (0+255),b
  3535  001582  0E41               	movlw	65
  3536  001584  6F7F               	movwf	(pow@x+3)& (0+255),b
  3537  001586  C095  F080         	movff	_format_double$1106,pow@y
  3538  00158A  C096  F081         	movff	_format_double$1106+1,pow@y+1
  3539  00158E  C097  F082         	movff	_format_double$1106+2,pow@y+2
  3540  001592  C098  F083         	movff	_format_double$1106+3,pow@y+3
  3541  001596  ECCC  F009         	call	_pow	;wreg free
  3542  00159A  C07C  F09D         	movff	?_pow,format_double@weight
  3543  00159E  C07D  F09E         	movff	?_pow+1,format_double@weight+1
  3544  0015A2  C07E  F09F         	movff	?_pow+2,format_double@weight+2
  3545  0015A6  C07F  F0A0         	movff	?_pow+3,format_double@weight+3
  3546                           
  3547                           ; BSR set to: 0
  3548                           ;format.c: 84: digit = (short)floor(num / weight);
  3549  0015AA  C09D  F012         	movff	format_double@weight,___fldiv@f2
  3550  0015AE  C09E  F013         	movff	format_double@weight+1,___fldiv@f2+1
  3551  0015B2  C09F  F014         	movff	format_double@weight+2,___fldiv@f2+2
  3552  0015B6  C0A0  F015         	movff	format_double@weight+3,___fldiv@f2+3
  3553  0015BA  C091  F00E         	movff	format_double@num,___fldiv@f1
  3554  0015BE  C092  F00F         	movff	format_double@num+1,___fldiv@f1+1
  3555  0015C2  C093  F010         	movff	format_double@num+2,___fldiv@f1+2
  3556  0015C6  C094  F011         	movff	format_double@num+3,___fldiv@f1+3
  3557  0015CA  ECB8  F00F         	call	___fldiv	;wreg free
  3558  0015CE  C00E  F067         	movff	?___fldiv,floor@x
  3559  0015D2  C00F  F068         	movff	?___fldiv+1,floor@x+1
  3560  0015D6  C010  F069         	movff	?___fldiv+2,floor@x+2
  3561  0015DA  C011  F06A         	movff	?___fldiv+3,floor@x+3
  3562  0015DE  ECA1  F00D         	call	_floor	;wreg free
  3563  0015E2  C067  F099         	movff	?_floor,_format_double$1107
  3564  0015E6  C068  F09A         	movff	?_floor+1,_format_double$1107+1
  3565  0015EA  C069  F09B         	movff	?_floor+2,_format_double$1107+2
  3566  0015EE  C06A  F09C         	movff	?_floor+3,_format_double$1107+3
  3567                           
  3568                           ;format.c: 84: digit = (short)floor(num / weight);
  3569  0015F2  C099  F052         	movff	_format_double$1107,___fltol@f1
  3570  0015F6  C09A  F053         	movff	_format_double$1107+1,___fltol@f1+1
  3571  0015FA  C09B  F054         	movff	_format_double$1107+2,___fltol@f1+2
  3572  0015FE  C09C  F055         	movff	_format_double$1107+3,___fltol@f1+3
  3573  001602  EC0A  F011         	call	___fltol	;wreg free
  3574  001606  C052  F0A1         	movff	?___fltol,format_double@digit
  3575  00160A  C053  F0A2         	movff	?___fltol+1,format_double@digit+1
  3576                           
  3577                           ; BSR set to: 0
  3578                           ;format.c: 85: num -= (digit * weight);
  3579  00160E  C091  F038         	movff	format_double@num,___flsub@f1
  3580  001612  C092  F039         	movff	format_double@num+1,___flsub@f1+1
  3581  001616  C093  F03A         	movff	format_double@num+2,___flsub@f1+2
  3582  00161A  C094  F03B         	movff	format_double@num+3,___flsub@f1+3
  3583  00161E  C09D  F021         	movff	format_double@weight,___flmul@f2
  3584  001622  C09E  F022         	movff	format_double@weight+1,___flmul@f2+1
  3585  001626  C09F  F023         	movff	format_double@weight+2,___flmul@f2+2
  3586  00162A  C0A0  F024         	movff	format_double@weight+3,___flmul@f2+3
  3587  00162E  C0A1  F00E         	movff	format_double@digit,___awtofl@c
  3588  001632  C0A2  F00F         	movff	format_double@digit+1,___awtofl@c+1
  3589  001636  EC5A  F013         	call	___awtofl	;wreg free
  3590  00163A  C00E  F01D         	movff	?___awtofl,___flmul@f1
  3591  00163E  C00F  F01E         	movff	?___awtofl+1,___flmul@f1+1
  3592  001642  C010  F01F         	movff	?___awtofl+2,___flmul@f1+2
  3593  001646  C011  F020         	movff	?___awtofl+3,___flmul@f1+3
  3594  00164A  ECF5  F00E         	call	___flmul	;wreg free
  3595  00164E  C01D  F03C         	movff	?___flmul,___flsub@f2
  3596  001652  C01E  F03D         	movff	?___flmul+1,___flsub@f2+1
  3597  001656  C01F  F03E         	movff	?___flmul+2,___flsub@f2+2
  3598  00165A  C020  F03F         	movff	?___flmul+3,___flsub@f2+3
  3599  00165E  EC19  F013         	call	___flsub	;wreg free
  3600  001662  C038  F091         	movff	?___flsub,format_double@num
  3601  001666  C039  F092         	movff	?___flsub+1,format_double@num+1
  3602  00166A  C03A  F093         	movff	?___flsub+2,format_double@num+2
  3603  00166E  C03B  F094         	movff	?___flsub+3,format_double@num+3
  3604                           
  3605                           ;format.c: 86: buffer_putch((char)('0' + digit));
  3606  001672  0100               	movlb	0	; () banked
  3607  001674  51A1               	movf	format_double@digit& (0+255),w,b
  3608  001676  0F30               	addlw	48
  3609  001678  ECD0  F012         	call	_buffer_putch
  3610                           
  3611                           ; BSR set to: 0
  3612                           ;format.c: 87: if(m == 0)
  3613  00167C  51A3               	movf	format_double@m& (0+255),w,b
  3614  00167E  11A4               	iorwf	(format_double@m+1)& (0+255),w,b
  3615  001680  E103               	bnz	l4034
  3616                           
  3617                           ; BSR set to: 0
  3618                           ;format.c: 88: buffer_putch('.');
  3619  001682  0E2E               	movlw	46
  3620  001684  ECD0  F012         	call	_buffer_putch
  3621  001688                     l4034:
  3622                           
  3623                           ; BSR set to: 0
  3624                           ;format.c: 89: m--;
  3625  001688  07A3               	decf	format_double@m& (0+255),f,b
  3626  00168A  A0D8               	btfss	status,0,c
  3627  00168C  07A4               	decf	(format_double@m+1)& (0+255),f,b
  3628  00168E                     l4036:
  3629                           
  3630                           ; BSR set to: 0
  3631  00168E  6A04               	clrf	___flge@ff1,c
  3632  001690  6A05               	clrf	___flge@ff1+1,c
  3633  001692  6A06               	clrf	___flge@ff1+2,c
  3634  001694  0E34               	movlw	52
  3635  001696  6E07               	movwf	___flge@ff1+3,c
  3636  001698  C091  F008         	movff	format_double@num,___flge@ff2
  3637  00169C  C092  F009         	movff	format_double@num+1,___flge@ff2+1
  3638  0016A0  C093  F00A         	movff	format_double@num+2,___flge@ff2+2
  3639  0016A4  C094  F00B         	movff	format_double@num+3,___flge@ff2+3
  3640  0016A8  EC60  F012         	call	___flge	;wreg free
  3641  0016AC  B0D8               	btfsc	status,0,c
  3642  0016AE  0012               	return		;funcret
  3643  0016B0  D755               	goto	l4018
  3644  0016B2                     __end_of_format_double:
  3645                           	opt stack 0
  3646                           tblptru	equ	0xFF8
  3647                           tblptrh	equ	0xFF7
  3648                           tblptrl	equ	0xFF6
  3649                           tablat	equ	0xFF5
  3650                           prodl	equ	0xFF3
  3651                           intcon	equ	0xFF2
  3652                           intcon2	equ	0xFF1
  3653                           postinc0	equ	0xFEE
  3654                           wreg	equ	0xFE8
  3655                           postdec1	equ	0xFE5
  3656                           fsr1l	equ	0xFE1
  3657                           indf2	equ	0xFDF
  3658                           postinc2	equ	0xFDE
  3659                           postdec2	equ	0xFDD
  3660                           fsr2h	equ	0xFDA
  3661                           fsr2l	equ	0xFD9
  3662                           status	equ	0xFD8
  3663                           
  3664 ;; *************** function _pow *****************
  3665 ;; Defined at:
  3666 ;;		line 5 in file "/opt/microchip/xc8/v1.34/sources/common/pow.c"
  3667 ;; Parameters:    Size  Location     Type
  3668 ;;  x               4   28[BANK0 ] short 
  3669 ;;  y               4   32[BANK0 ] short 
  3670 ;; Auto vars:     Size  Location     Type
  3671 ;;  yi              4   45[BANK0 ] unsigned long 
  3672 ;;  sign            1   44[BANK0 ] unsigned char 
  3673 ;; Return value:  Size  Location     Type
  3674 ;;                  4   28[BANK0 ] unsigned char 
  3675 ;; Registers used:
  3676 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3677 ;; Tracked objects:
  3678 ;;		On entry : F/0
  3679 ;;		On exit  : F/0
  3680 ;;		Unchanged: 0/0
  3681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3682 ;;      Params:         0       8       0       0       0       0       0       0       0
  3683 ;;      Locals:         0      13       0       0       0       0       0       0       0
  3684 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3685 ;;      Totals:         0      21       0       0       0       0       0       0       0
  3686 ;;Total ram usage:       21 bytes
  3687 ;; Hardware stack levels used:    1
  3688 ;; Hardware stack levels required when called:    5
  3689 ;; This function calls:
  3690 ;;		___flge
  3691 ;;		___flmul
  3692 ;;		___flneg
  3693 ;;		___fltol
  3694 ;;		___lltofl
  3695 ;;		_exp
  3696 ;;		_log
  3697 ;; This function is called by:
  3698 ;;		_format_double
  3699 ;; This function uses a non-reentrant model
  3700 ;;
  3701                           
  3702                           	psect	text12
  3703  001398                     __ptext12:
  3704                           	opt stack 0
  3705  001398                     _pow:
  3706                           	opt stack 23
  3707                           
  3708                           ; BSR set to: 0
  3709                           
  3710                           ;incstack = 0
  3711  001398  6B8C               	clrf	pow@sign& (0+255),b
  3712                           
  3713                           ; BSR set to: 0
  3714  00139A  517C               	movf	pow@x& (0+255),w,b
  3715  00139C  117D               	iorwf	(pow@x+1)& (0+255),w,b
  3716  00139E  117E               	iorwf	(pow@x+2)& (0+255),w,b
  3717  0013A0  117F               	iorwf	(pow@x+3)& (0+255),w,b
  3718  0013A2  E114               	bnz	l3988
  3719                           
  3720                           ; BSR set to: 0
  3721  0013A4  6A04               	clrf	___flge@ff1,c
  3722  0013A6  6A05               	clrf	___flge@ff1+1,c
  3723  0013A8  6A06               	clrf	___flge@ff1+2,c
  3724  0013AA  6A07               	clrf	___flge@ff1+3,c
  3725  0013AC  C080  F008         	movff	pow@y,___flge@ff2
  3726  0013B0  C081  F009         	movff	pow@y+1,___flge@ff2+1
  3727  0013B4  C082  F00A         	movff	pow@y+2,___flge@ff2+2
  3728  0013B8  C083  F00B         	movff	pow@y+3,___flge@ff2+3
  3729  0013BC  EC60  F012         	call	___flge	;wreg free
  3730  0013C0  0100               	movlb	0	; () banked
  3731  0013C2  6B7C               	clrf	?_pow& (0+255),b
  3732  0013C4  6B7D               	clrf	(?_pow+1)& (0+255),b
  3733  0013C6  6B7E               	clrf	(?_pow+2)& (0+255),b
  3734  0013C8  6B7F               	clrf	(?_pow+3)& (0+255),b
  3735  0013CA  0012               	return	
  3736  0013CC                     l3988:
  3737                           
  3738                           ; BSR set to: 0
  3739  0013CC  5180               	movf	pow@y& (0+255),w,b
  3740  0013CE  1181               	iorwf	(pow@y+1)& (0+255),w,b
  3741  0013D0  1182               	iorwf	(pow@y+2)& (0+255),w,b
  3742  0013D2  1183               	iorwf	(pow@y+3)& (0+255),w,b
  3743  0013D4  E108               	bnz	l3994
  3744                           
  3745                           ; BSR set to: 0
  3746  0013D6  0E00               	movlw	0
  3747  0013D8  6F7C               	movwf	?_pow& (0+255),b
  3748  0013DA  6F7D               	movwf	(?_pow+1)& (0+255),b
  3749  0013DC  0E80               	movlw	128
  3750  0013DE  6F7E               	movwf	(?_pow+2)& (0+255),b
  3751  0013E0  0E3F               	movlw	63
  3752  0013E2  6F7F               	movwf	(?_pow+3)& (0+255),b
  3753  0013E4  0C3F               	retlw	63
  3754  0013E6                     l3994:
  3755                           
  3756                           ; BSR set to: 0
  3757  0013E6  AF7F               	btfss	(pow@x+3)& (0+255),7,b
  3758  0013E8  D043               	goto	l4004
  3759                           
  3760                           ; BSR set to: 0
  3761  0013EA  C080  F052         	movff	pow@y,___fltol@f1
  3762  0013EE  C081  F053         	movff	pow@y+1,___fltol@f1+1
  3763  0013F2  C082  F054         	movff	pow@y+2,___fltol@f1+2
  3764  0013F6  C083  F055         	movff	pow@y+3,___fltol@f1+3
  3765  0013FA  EC0A  F011         	call	___fltol	;wreg free
  3766  0013FE  C052  F08D         	movff	?___fltol,pow@yi
  3767  001402  C053  F08E         	movff	?___fltol+1,pow@yi+1
  3768  001406  C054  F08F         	movff	?___fltol+2,pow@yi+2
  3769  00140A  C055  F090         	movff	?___fltol+3,pow@yi+3
  3770  00140E  C08D  F00E         	movff	pow@yi,___lltofl@c
  3771  001412  C08E  F00F         	movff	pow@yi+1,___lltofl@c+1
  3772  001416  C08F  F010         	movff	pow@yi+2,___lltofl@c+2
  3773  00141A  C090  F011         	movff	pow@yi+3,___lltofl@c+3
  3774  00141E  ECC3  F013         	call	___lltofl	;wreg free
  3775  001422  0100               	movlb	0	; () banked
  3776  001424  5180               	movf	pow@y& (0+255),w,b
  3777  001426  180E               	xorwf	?___lltofl,w,c
  3778  001428  E109               	bnz	u3370
  3779  00142A  5181               	movf	(pow@y+1)& (0+255),w,b
  3780  00142C  180F               	xorwf	?___lltofl+1,w,c
  3781  00142E  E106               	bnz	u3370
  3782  001430  5182               	movf	(pow@y+2)& (0+255),w,b
  3783  001432  1810               	xorwf	?___lltofl+2,w,c
  3784  001434  E103               	bnz	u3370
  3785  001436  5183               	movf	(pow@y+3)& (0+255),w,b
  3786  001438  1811               	xorwf	?___lltofl+3,w,c
  3787  00143A  E005               	bz	l4000
  3788  00143C                     u3370:
  3789                           
  3790                           ; BSR set to: 0
  3791  00143C  6B7C               	clrf	?_pow& (0+255),b
  3792  00143E  6B7D               	clrf	(?_pow+1)& (0+255),b
  3793  001440  6B7E               	clrf	(?_pow+2)& (0+255),b
  3794  001442  6B7F               	clrf	(?_pow+3)& (0+255),b
  3795  001444  0012               	return	
  3796  001446                     l4000:
  3797                           
  3798                           ; BSR set to: 0
  3799  001446  518D               	movf	pow@yi& (0+255),w,b
  3800  001448  0B01               	andlw	1
  3801  00144A  6F8C               	movwf	pow@sign& (0+255),b
  3802                           
  3803                           ; BSR set to: 0
  3804  00144C  C07C  F004         	movff	pow@x,___flneg@f1
  3805  001450  C07D  F005         	movff	pow@x+1,___flneg@f1+1
  3806  001454  C07E  F006         	movff	pow@x+2,___flneg@f1+2
  3807  001458  C07F  F007         	movff	pow@x+3,___flneg@f1+3
  3808  00145C  EC8F  F014         	call	___flneg	;wreg free
  3809  001460  C004  F07C         	movff	?___flneg,pow@x
  3810  001464  C005  F07D         	movff	?___flneg+1,pow@x+1
  3811  001468  C006  F07E         	movff	?___flneg+2,pow@x+2
  3812  00146C  C007  F07F         	movff	?___flneg+3,pow@x+3
  3813  001470                     l4004:
  3814                           
  3815                           ; BSR set to: 0
  3816  001470  C07C  F044         	movff	pow@x,log@x
  3817  001474  C07D  F045         	movff	pow@x+1,log@x+1
  3818  001478  C07E  F046         	movff	pow@x+2,log@x+2
  3819  00147C  C07F  F047         	movff	pow@x+3,log@x+3
  3820  001480  EC06  F00C         	call	_log	;wreg free
  3821  001484  C044  F084         	movff	?_log,_pow$1121
  3822  001488  C045  F085         	movff	?_log+1,_pow$1121+1
  3823  00148C  C046  F086         	movff	?_log+2,_pow$1121+2
  3824  001490  C047  F087         	movff	?_log+3,_pow$1121+3
  3825  001494  C084  F01D         	movff	_pow$1121,___flmul@f1
  3826  001498  C085  F01E         	movff	_pow$1121+1,___flmul@f1+1
  3827  00149C  C086  F01F         	movff	_pow$1121+2,___flmul@f1+2
  3828  0014A0  C087  F020         	movff	_pow$1121+3,___flmul@f1+3
  3829  0014A4  C080  F021         	movff	pow@y,___flmul@f2
  3830  0014A8  C081  F022         	movff	pow@y+1,___flmul@f2+1
  3831  0014AC  C082  F023         	movff	pow@y+2,___flmul@f2+2
  3832  0014B0  C083  F024         	movff	pow@y+3,___flmul@f2+3
  3833  0014B4  ECF5  F00E         	call	___flmul	;wreg free
  3834  0014B8  C01D  F088         	movff	?___flmul,_pow$1122
  3835  0014BC  C01E  F089         	movff	?___flmul+1,_pow$1122+1
  3836  0014C0  C01F  F08A         	movff	?___flmul+2,_pow$1122+2
  3837  0014C4  C020  F08B         	movff	?___flmul+3,_pow$1122+3
  3838  0014C8  C088  F071         	movff	_pow$1122,exp@x
  3839  0014CC  C089  F072         	movff	_pow$1122+1,exp@x+1
  3840  0014D0  C08A  F073         	movff	_pow$1122+2,exp@x+2
  3841  0014D4  C08B  F074         	movff	_pow$1122+3,exp@x+3
  3842  0014D8  ECBE  F008         	call	_exp	;wreg free
  3843  0014DC  C071  F07C         	movff	?_exp,pow@x
  3844  0014E0  C072  F07D         	movff	?_exp+1,pow@x+1
  3845  0014E4  C073  F07E         	movff	?_exp+2,pow@x+2
  3846  0014E8  C074  F07F         	movff	?_exp+3,pow@x+3
  3847  0014EC  0100               	movlb	0	; () banked
  3848  0014EE  518C               	movf	pow@sign& (0+255),w,b
  3849  0014F0  E013               	bz	l1177
  3850                           
  3851                           ; BSR set to: 0
  3852  0014F2  C07C  F004         	movff	pow@x,___flneg@f1
  3853  0014F6  C07D  F005         	movff	pow@x+1,___flneg@f1+1
  3854  0014FA  C07E  F006         	movff	pow@x+2,___flneg@f1+2
  3855  0014FE  C07F  F007         	movff	pow@x+3,___flneg@f1+3
  3856  001502  EC8F  F014         	call	___flneg	;wreg free
  3857  001506  C004  F07C         	movff	?___flneg,?_pow
  3858  00150A  C005  F07D         	movff	?___flneg+1,?_pow+1
  3859  00150E  C006  F07E         	movff	?___flneg+2,?_pow+2
  3860  001512  C007  F07F         	movff	?___flneg+3,?_pow+3
  3861  001516  0012               	return	
  3862  001518                     l1177:
  3863                           
  3864                           ; BSR set to: 0
  3865  001518  C07C  F07C         	movff	pow@x,?_pow
  3866  00151C  C07D  F07D         	movff	pow@x+1,?_pow+1
  3867  001520  C07E  F07E         	movff	pow@x+2,?_pow+2
  3868  001524  C07F  F07F         	movff	pow@x+3,?_pow+3
  3869                           
  3870                           ; BSR set to: 0
  3871  001528  0012               	return		;funcret
  3872  00152A                     __end_of_pow:
  3873                           	opt stack 0
  3874                           tblptru	equ	0xFF8
  3875                           tblptrh	equ	0xFF7
  3876                           tblptrl	equ	0xFF6
  3877                           tablat	equ	0xFF5
  3878                           prodl	equ	0xFF3
  3879                           intcon	equ	0xFF2
  3880                           intcon2	equ	0xFF1
  3881                           postinc0	equ	0xFEE
  3882                           wreg	equ	0xFE8
  3883                           postdec1	equ	0xFE5
  3884                           fsr1l	equ	0xFE1
  3885                           indf2	equ	0xFDF
  3886                           postinc2	equ	0xFDE
  3887                           postdec2	equ	0xFDD
  3888                           fsr2h	equ	0xFDA
  3889                           fsr2l	equ	0xFD9
  3890                           status	equ	0xFD8
  3891                           
  3892 ;; *************** function _exp *****************
  3893 ;; Defined at:
  3894 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/common/exp.c"
  3895 ;; Parameters:    Size  Location     Type
  3896 ;;  x               4   17[BANK0 ] unsigned char 
  3897 ;; Auto vars:     Size  Location     Type
  3898 ;;  exponent        2   25[BANK0 ] int 
  3899 ;;  sign            1   27[BANK0 ] unsigned char 
  3900 ;; Return value:  Size  Location     Type
  3901 ;;                  4   17[BANK0 ] unsigned char 
  3902 ;; Registers used:
  3903 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3904 ;; Tracked objects:
  3905 ;;		On entry : 0/0
  3906 ;;		On exit  : 0/0
  3907 ;;		Unchanged: 0/0
  3908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3909 ;;      Params:         0       4       0       0       0       0       0       0       0
  3910 ;;      Locals:         0       7       0       0       0       0       0       0       0
  3911 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3912 ;;      Totals:         0      11       0       0       0       0       0       0       0
  3913 ;;Total ram usage:       11 bytes
  3914 ;; Hardware stack levels used:    1
  3915 ;; Hardware stack levels required when called:    4
  3916 ;; This function calls:
  3917 ;;		___awtofl
  3918 ;;		___fldiv
  3919 ;;		___flge
  3920 ;;		___flmul
  3921 ;;		___flneg
  3922 ;;		___flsub
  3923 ;;		___fltol
  3924 ;;		_eval_poly
  3925 ;;		_floor
  3926 ;;		_ldexp
  3927 ;; This function is called by:
  3928 ;;		_pow
  3929 ;; This function uses a non-reentrant model
  3930 ;;
  3931                           
  3932                           	psect	text13
  3933  00117C                     __ptext13:
  3934                           	opt stack 0
  3935  00117C                     _exp:
  3936                           	opt stack 23
  3937                           
  3938                           ; BSR set to: 0
  3939                           ;incstack = 0
  3940  00117C  0100               	movlb	0	; () banked
  3941  00117E  5171               	movf	exp@x& (0+255),w,b
  3942  001180  1172               	iorwf	(exp@x+1)& (0+255),w,b
  3943  001182  1173               	iorwf	(exp@x+2)& (0+255),w,b
  3944  001184  1174               	iorwf	(exp@x+3)& (0+255),w,b
  3945  001186  E108               	bnz	l3942
  3946                           
  3947                           ; BSR set to: 0
  3948  001188  0E00               	movlw	0
  3949  00118A  6F71               	movwf	?_exp& (0+255),b
  3950  00118C  6F72               	movwf	(?_exp+1)& (0+255),b
  3951  00118E  0E80               	movlw	128
  3952  001190  6F73               	movwf	(?_exp+2)& (0+255),b
  3953  001192  0E3F               	movlw	63
  3954  001194  6F74               	movwf	(?_exp+3)& (0+255),b
  3955  001196  0C3F               	retlw	63
  3956  001198                     l3942:
  3957                           
  3958                           ; BSR set to: 0
  3959  001198  0E18               	movlw	24
  3960  00119A  6E04               	movwf	___flge@ff1,c
  3961  00119C  0E72               	movlw	114
  3962  00119E  6E05               	movwf	___flge@ff1+1,c
  3963  0011A0  0E31               	movlw	49
  3964  0011A2  6E06               	movwf	___flge@ff1+2,c
  3965  0011A4  0E44               	movlw	68
  3966  0011A6  6E07               	movwf	___flge@ff1+3,c
  3967  0011A8  C071  F008         	movff	exp@x,___flge@ff2
  3968  0011AC  C072  F009         	movff	exp@x+1,___flge@ff2+1
  3969  0011B0  C073  F00A         	movff	exp@x+2,___flge@ff2+2
  3970  0011B4  C074  F00B         	movff	exp@x+3,___flge@ff2+3
  3971  0011B8  EC60  F012         	call	___flge	;wreg free
  3972  0011BC  E207               	bc	l3948
  3973  0011BE  0100               	movlb	0	; () banked
  3974  0011C0  6971               	setf	?_exp& (0+255),b
  3975  0011C2  6972               	setf	(?_exp+1)& (0+255),b
  3976  0011C4  0E7F               	movlw	127
  3977  0011C6  6F73               	movwf	(?_exp+2)& (0+255),b
  3978  0011C8  6F74               	movwf	(?_exp+3)& (0+255),b
  3979  0011CA  0C7F               	retlw	127
  3980  0011CC                     l3948:
  3981  0011CC  C071  F004         	movff	exp@x,___flge@ff1
  3982  0011D0  C072  F005         	movff	exp@x+1,___flge@ff1+1
  3983  0011D4  C073  F006         	movff	exp@x+2,___flge@ff1+2
  3984  0011D8  C074  F007         	movff	exp@x+3,___flge@ff1+3
  3985  0011DC  0E87               	movlw	135
  3986  0011DE  6E08               	movwf	___flge@ff2,c
  3987  0011E0  0E48               	movlw	72
  3988  0011E2  6E09               	movwf	___flge@ff2+1,c
  3989  0011E4  0E3A               	movlw	58
  3990  0011E6  6E0A               	movwf	___flge@ff2+2,c
  3991  0011E8  0EC4               	movlw	196
  3992  0011EA  6E0B               	movwf	___flge@ff2+3,c
  3993  0011EC  EC60  F012         	call	___flge	;wreg free
  3994  0011F0  E206               	bc	l3952
  3995  0011F2  0100               	movlb	0	; () banked
  3996  0011F4  6B71               	clrf	?_exp& (0+255),b
  3997  0011F6  6B72               	clrf	(?_exp+1)& (0+255),b
  3998  0011F8  6B73               	clrf	(?_exp+2)& (0+255),b
  3999  0011FA  6B74               	clrf	(?_exp+3)& (0+255),b
  4000  0011FC  0012               	return	
  4001  0011FE                     l3952:
  4002  0011FE  0100               	movlb	0	; () banked
  4003  001200  0E01               	movlw	1
  4004  001202  AF74               	btfss	(exp@x+3)& (0+255),7,b
  4005  001204  0E00               	movlw	0
  4006  001206  6F7B               	movwf	exp@sign& (0+255),b
  4007                           
  4008                           ; BSR set to: 0
  4009  001208  517B               	movf	exp@sign& (0+255),w,b
  4010  00120A  E012               	bz	l1202
  4011                           
  4012                           ; BSR set to: 0
  4013  00120C  C071  F004         	movff	exp@x,___flneg@f1
  4014  001210  C072  F005         	movff	exp@x+1,___flneg@f1+1
  4015  001214  C073  F006         	movff	exp@x+2,___flneg@f1+2
  4016  001218  C074  F007         	movff	exp@x+3,___flneg@f1+3
  4017  00121C  EC8F  F014         	call	___flneg	;wreg free
  4018  001220  C004  F071         	movff	?___flneg,exp@x
  4019  001224  C005  F072         	movff	?___flneg+1,exp@x+1
  4020  001228  C006  F073         	movff	?___flneg+2,exp@x+2
  4021  00122C  C007  F074         	movff	?___flneg+3,exp@x+3
  4022  001230                     l1202:
  4023                           
  4024                           ; BSR set to: 0
  4025  001230  C071  F01D         	movff	exp@x,___flmul@f1
  4026  001234  C072  F01E         	movff	exp@x+1,___flmul@f1+1
  4027  001238  C073  F01F         	movff	exp@x+2,___flmul@f1+2
  4028  00123C  C074  F020         	movff	exp@x+3,___flmul@f1+3
  4029  001240  0E3B               	movlw	59
  4030  001242  6E21               	movwf	___flmul@f2,c
  4031  001244  0EAA               	movlw	170
  4032  001246  6E22               	movwf	___flmul@f2+1,c
  4033  001248  0EB8               	movlw	184
  4034  00124A  6E23               	movwf	___flmul@f2+2,c
  4035  00124C  0E3F               	movlw	63
  4036  00124E  6E24               	movwf	___flmul@f2+3,c
  4037  001250  ECF5  F00E         	call	___flmul	;wreg free
  4038  001254  C01D  F071         	movff	?___flmul,exp@x
  4039  001258  C01E  F072         	movff	?___flmul+1,exp@x+1
  4040  00125C  C01F  F073         	movff	?___flmul+2,exp@x+2
  4041  001260  C020  F074         	movff	?___flmul+3,exp@x+3
  4042  001264  C071  F067         	movff	exp@x,floor@x
  4043  001268  C072  F068         	movff	exp@x+1,floor@x+1
  4044  00126C  C073  F069         	movff	exp@x+2,floor@x+2
  4045  001270  C074  F06A         	movff	exp@x+3,floor@x+3
  4046  001274  ECA1  F00D         	call	_floor	;wreg free
  4047  001278  C067  F075         	movff	?_floor,_exp$1123
  4048  00127C  C068  F076         	movff	?_floor+1,_exp$1123+1
  4049  001280  C069  F077         	movff	?_floor+2,_exp$1123+2
  4050  001284  C06A  F078         	movff	?_floor+3,_exp$1123+3
  4051  001288  C075  F052         	movff	_exp$1123,___fltol@f1
  4052  00128C  C076  F053         	movff	_exp$1123+1,___fltol@f1+1
  4053  001290  C077  F054         	movff	_exp$1123+2,___fltol@f1+2
  4054  001294  C078  F055         	movff	_exp$1123+3,___fltol@f1+3
  4055  001298  EC0A  F011         	call	___fltol	;wreg free
  4056  00129C  C052  F079         	movff	?___fltol,exp@exponent
  4057  0012A0  C053  F07A         	movff	?___fltol+1,exp@exponent+1
  4058                           
  4059                           ; BSR set to: 0
  4060  0012A4  C071  F038         	movff	exp@x,___flsub@f1
  4061  0012A8  C072  F039         	movff	exp@x+1,___flsub@f1+1
  4062  0012AC  C073  F03A         	movff	exp@x+2,___flsub@f1+2
  4063  0012B0  C074  F03B         	movff	exp@x+3,___flsub@f1+3
  4064  0012B4  C079  F00E         	movff	exp@exponent,___awtofl@c
  4065  0012B8  C07A  F00F         	movff	exp@exponent+1,___awtofl@c+1
  4066  0012BC  EC5A  F013         	call	___awtofl	;wreg free
  4067  0012C0  C00E  F03C         	movff	?___awtofl,___flsub@f2
  4068  0012C4  C00F  F03D         	movff	?___awtofl+1,___flsub@f2+1
  4069  0012C8  C010  F03E         	movff	?___awtofl+2,___flsub@f2+2
  4070  0012CC  C011  F03F         	movff	?___awtofl+3,___flsub@f2+3
  4071  0012D0  EC19  F013         	call	___flsub	;wreg free
  4072  0012D4  C038  F071         	movff	?___flsub,exp@x
  4073  0012D8  C039  F072         	movff	?___flsub+1,exp@x+1
  4074  0012DC  C03A  F073         	movff	?___flsub+2,exp@x+2
  4075  0012E0  C03B  F074         	movff	?___flsub+3,exp@x+3
  4076  0012E4  C071  F038         	movff	exp@x,eval_poly@x
  4077  0012E8  C072  F039         	movff	exp@x+1,eval_poly@x+1
  4078  0012EC  C073  F03A         	movff	exp@x+2,eval_poly@x+2
  4079  0012F0  C074  F03B         	movff	exp@x+3,eval_poly@x+3
  4080  0012F4  0E01               	movlw	low exp@coeff
  4081  0012F6  6E3C               	movwf	eval_poly@d,c
  4082  0012F8  6A3E               	clrf	eval_poly@n+1,c
  4083  0012FA  0E09               	movlw	9
  4084  0012FC  6E3D               	movwf	eval_poly@n,c
  4085  0012FE  EC10  F010         	call	_eval_poly	;wreg free
  4086  001302  C038  F044         	movff	?_eval_poly,ldexp@value
  4087  001306  C039  F045         	movff	?_eval_poly+1,ldexp@value+1
  4088  00130A  C03A  F046         	movff	?_eval_poly+2,ldexp@value+2
  4089  00130E  C03B  F047         	movff	?_eval_poly+3,ldexp@value+3
  4090  001312  C079  F048         	movff	exp@exponent,ldexp@newexp
  4091  001316  C07A  F049         	movff	exp@exponent+1,ldexp@newexp+1
  4092  00131A  ECB9  F010         	call	_ldexp	;wreg free
  4093  00131E  C044  F071         	movff	?_ldexp,exp@x
  4094  001322  C045  F072         	movff	?_ldexp+1,exp@x+1
  4095  001326  C046  F073         	movff	?_ldexp+2,exp@x+2
  4096  00132A  C047  F074         	movff	?_ldexp+3,exp@x+3
  4097  00132E  0100               	movlb	0	; () banked
  4098  001330  517B               	movf	exp@sign& (0+255),w,b
  4099  001332  E029               	bz	l1203
  4100                           
  4101                           ; BSR set to: 0
  4102  001334  2971               	incf	exp@x& (0+255),w,b
  4103  001336  E10D               	bnz	l3972
  4104  001338  2972               	incf	(exp@x+1)& (0+255),w,b
  4105  00133A  E10B               	bnz	l3972
  4106  00133C  0E7F               	movlw	127
  4107  00133E  1973               	xorwf	(exp@x+2)& (0+255),w,b
  4108  001340  E108               	bnz	l3972
  4109  001342  0E7F               	movlw	127
  4110  001344  1974               	xorwf	(exp@x+3)& (0+255),w,b
  4111  001346  E105               	bnz	l3972
  4112                           
  4113                           ; BSR set to: 0
  4114  001348  6B71               	clrf	?_exp& (0+255),b
  4115  00134A  6B72               	clrf	(?_exp+1)& (0+255),b
  4116  00134C  6B73               	clrf	(?_exp+2)& (0+255),b
  4117  00134E  6B74               	clrf	(?_exp+3)& (0+255),b
  4118  001350  0012               	return	
  4119  001352                     l3972:
  4120                           
  4121                           ; BSR set to: 0
  4122  001352  0E00               	movlw	0
  4123  001354  6E0E               	movwf	___fldiv@f1,c
  4124  001356  6E0F               	movwf	___fldiv@f1+1,c
  4125  001358  0E80               	movlw	128
  4126  00135A  6E10               	movwf	___fldiv@f1+2,c
  4127  00135C  0E3F               	movlw	63
  4128  00135E  6E11               	movwf	___fldiv@f1+3,c
  4129  001360  C071  F012         	movff	exp@x,___fldiv@f2
  4130  001364  C072  F013         	movff	exp@x+1,___fldiv@f2+1
  4131  001368  C073  F014         	movff	exp@x+2,___fldiv@f2+2
  4132  00136C  C074  F015         	movff	exp@x+3,___fldiv@f2+3
  4133  001370  ECB8  F00F         	call	___fldiv	;wreg free
  4134  001374  C00E  F071         	movff	?___fldiv,?_exp
  4135  001378  C00F  F072         	movff	?___fldiv+1,?_exp+1
  4136  00137C  C010  F073         	movff	?___fldiv+2,?_exp+2
  4137  001380  C011  F074         	movff	?___fldiv+3,?_exp+3
  4138  001384  0012               	return	
  4139  001386                     l1203:
  4140                           
  4141                           ; BSR set to: 0
  4142  001386  C071  F071         	movff	exp@x,?_exp
  4143  00138A  C072  F072         	movff	exp@x+1,?_exp+1
  4144  00138E  C073  F073         	movff	exp@x+2,?_exp+2
  4145  001392  C074  F074         	movff	exp@x+3,?_exp+3
  4146  001396  0012               	return		;funcret
  4147  001398                     __end_of_exp:
  4148                           	opt stack 0
  4149                           tblptru	equ	0xFF8
  4150                           tblptrh	equ	0xFF7
  4151                           tblptrl	equ	0xFF6
  4152                           tablat	equ	0xFF5
  4153                           prodl	equ	0xFF3
  4154                           intcon	equ	0xFF2
  4155                           intcon2	equ	0xFF1
  4156                           postinc0	equ	0xFEE
  4157                           wreg	equ	0xFE8
  4158                           postdec1	equ	0xFE5
  4159                           fsr1l	equ	0xFE1
  4160                           indf2	equ	0xFDF
  4161                           postinc2	equ	0xFDE
  4162                           postdec2	equ	0xFDD
  4163                           fsr2h	equ	0xFDA
  4164                           fsr2l	equ	0xFD9
  4165                           status	equ	0xFD8
  4166                           
  4167 ;; *************** function _ldexp *****************
  4168 ;; Defined at:
  4169 ;;		line 277 in file "/opt/microchip/xc8/v1.34/sources/common/frexp.c"
  4170 ;; Parameters:    Size  Location     Type
  4171 ;;  value           4   67[COMRAM] unsigned char 
  4172 ;;  newexp          2   71[COMRAM] int 
  4173 ;; Auto vars:     Size  Location     Type
  4174 ;;		None
  4175 ;; Return value:  Size  Location     Type
  4176 ;;                  4   67[COMRAM] int 
  4177 ;; Registers used:
  4178 ;;		wreg, status,2, status,0
  4179 ;; Tracked objects:
  4180 ;;		On entry : 0/0
  4181 ;;		On exit  : 0/0
  4182 ;;		Unchanged: 0/0
  4183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4184 ;;      Params:         6       0       0       0       0       0       0       0       0
  4185 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4186 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4187 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4188 ;;Total ram usage:        8 bytes
  4189 ;; Hardware stack levels used:    1
  4190 ;; Hardware stack levels required when called:    1
  4191 ;; This function calls:
  4192 ;;		Nothing
  4193 ;; This function is called by:
  4194 ;;		_exp
  4195 ;; This function uses a non-reentrant model
  4196 ;;
  4197                           
  4198                           	psect	text14
  4199  002172                     __ptext14:
  4200                           	opt stack 0
  4201  002172                     _ldexp:
  4202                           	opt stack 25
  4203                           
  4204                           ;incstack = 0
  4205  002172  5044               	movf	ldexp@value,w,c
  4206  002174  1045               	iorwf	ldexp@value+1,w,c
  4207  002176  1046               	iorwf	ldexp@value+2,w,c
  4208  002178  1047               	iorwf	ldexp@value+3,w,c
  4209  00217A  E105               	bnz	l2804
  4210  00217C  6A44               	clrf	?_ldexp,c
  4211  00217E  6A45               	clrf	?_ldexp+1,c
  4212  002180  6A46               	clrf	?_ldexp+2,c
  4213  002182  6A47               	clrf	?_ldexp+3,c
  4214  002184  0012               	return	
  4215  002186                     l2804:
  4216  002186  5047               	movf	ldexp@value+3,w,c
  4217  002188  0B7F               	andlw	127
  4218  00218A  6E4A               	movwf	??_ldexp& (0+255),c
  4219  00218C  6A4B               	clrf	(??_ldexp+1)& (0+255),c
  4220  00218E  90D8               	bcf	status,0,c
  4221  002190  364A               	rlcf	??_ldexp,f,c
  4222  002192  364B               	rlcf	??_ldexp+1,f,c
  4223  002194  504A               	movf	??_ldexp,w,c
  4224  002196  2648               	addwf	ldexp@newexp,f,c
  4225  002198  504B               	movf	??_ldexp+1,w,c
  4226  00219A  2249               	addwfc	ldexp@newexp+1,f,c
  4227  00219C  0E01               	movlw	1
  4228  00219E  AE46               	btfss	ldexp@value+2,7,c
  4229  0021A0  0E00               	movlw	0
  4230  0021A2  2648               	addwf	ldexp@newexp,f,c
  4231  0021A4  0E00               	movlw	0
  4232  0021A6  2249               	addwfc	ldexp@newexp+1,f,c
  4233  0021A8  AE49               	btfss	ldexp@newexp+1,7,c
  4234  0021AA  D005               	goto	l2810
  4235  0021AC  6A44               	clrf	?_ldexp,c
  4236  0021AE  6A45               	clrf	?_ldexp+1,c
  4237  0021B0  6A46               	clrf	?_ldexp+2,c
  4238  0021B2  6A47               	clrf	?_ldexp+3,c
  4239  0021B4  0012               	return	
  4240  0021B6                     l2810:
  4241  0021B6  BE49               	btfsc	ldexp@newexp+1,7,c
  4242  0021B8  D010               	goto	l2824
  4243  0021BA  0449               	decf	ldexp@newexp+1,w,c
  4244  0021BC  E30E               	bnc	l2824
  4245  0021BE  AE47               	btfss	ldexp@value+3,7,c
  4246  0021C0  D006               	goto	l2820
  4247  0021C2  6844               	setf	?_ldexp,c
  4248  0021C4  6845               	setf	?_ldexp+1,c
  4249  0021C6  0E7F               	movlw	127
  4250  0021C8  6E46               	movwf	?_ldexp+2,c
  4251  0021CA  6847               	setf	?_ldexp+3,c
  4252  0021CC  0CFF               	retlw	255
  4253  0021CE                     l2820:
  4254  0021CE  6844               	setf	?_ldexp,c
  4255  0021D0  6845               	setf	?_ldexp+1,c
  4256  0021D2  0E7F               	movlw	127
  4257  0021D4  6E46               	movwf	?_ldexp+2,c
  4258  0021D6  6E47               	movwf	?_ldexp+3,c
  4259  0021D8  0C7F               	retlw	127
  4260  0021DA                     l2824:
  4261  0021DA  3449               	rlcf	ldexp@newexp+1,w,c
  4262  0021DC  3049               	rrcf	ldexp@newexp+1,w,c
  4263  0021DE  6E4B               	movwf	(??_ldexp+1)& (0+255),c
  4264  0021E0  3048               	rrcf	ldexp@newexp,w,c
  4265  0021E2  6E4A               	movwf	??_ldexp& (0+255),c
  4266  0021E4  1847               	xorwf	ldexp@value+3,w,c
  4267  0021E6  0B80               	andlw	-128
  4268  0021E8  184A               	xorwf	??_ldexp,w,c
  4269  0021EA  6E47               	movwf	ldexp@value+3,c
  4270  0021EC  C048  F04A         	movff	ldexp@newexp,??_ldexp
  4271  0021F0  0E01               	movlw	1
  4272  0021F2  164A               	andwf	??_ldexp,f,c
  4273  0021F4  324A               	rrcf	??_ldexp,f,c
  4274  0021F6  324A               	rrcf	??_ldexp,f,c
  4275  0021F8  5046               	movf	ldexp@value+2,w,c
  4276  0021FA  184A               	xorwf	??_ldexp,w,c
  4277  0021FC  0B7F               	andlw	-129
  4278  0021FE  184A               	xorwf	??_ldexp,w,c
  4279  002200  6E46               	movwf	ldexp@value+2,c
  4280  002202  C044  F044         	movff	ldexp@value,?_ldexp
  4281  002206  C045  F045         	movff	ldexp@value+1,?_ldexp+1
  4282  00220A  C046  F046         	movff	ldexp@value+2,?_ldexp+2
  4283  00220E  C047  F047         	movff	ldexp@value+3,?_ldexp+3
  4284  002212  0012               	return		;funcret
  4285  002214                     __end_of_ldexp:
  4286                           	opt stack 0
  4287                           tblptru	equ	0xFF8
  4288                           tblptrh	equ	0xFF7
  4289                           tblptrl	equ	0xFF6
  4290                           tablat	equ	0xFF5
  4291                           prodl	equ	0xFF3
  4292                           intcon	equ	0xFF2
  4293                           intcon2	equ	0xFF1
  4294                           postinc0	equ	0xFEE
  4295                           wreg	equ	0xFE8
  4296                           postdec1	equ	0xFE5
  4297                           fsr1l	equ	0xFE1
  4298                           indf2	equ	0xFDF
  4299                           postinc2	equ	0xFDE
  4300                           postdec2	equ	0xFDD
  4301                           fsr2h	equ	0xFDA
  4302                           fsr2l	equ	0xFD9
  4303                           status	equ	0xFD8
  4304                           
  4305 ;; *************** function _floor *****************
  4306 ;; Defined at:
  4307 ;;		line 13 in file "/opt/microchip/xc8/v1.34/sources/common/floor.c"
  4308 ;; Parameters:    Size  Location     Type
  4309 ;;  x               4    7[BANK0 ] int 
  4310 ;; Auto vars:     Size  Location     Type
  4311 ;;  i               4   11[BANK0 ] int 
  4312 ;;  expon           2   15[BANK0 ] int 
  4313 ;; Return value:  Size  Location     Type
  4314 ;;                  4    7[BANK0 ] int 
  4315 ;; Registers used:
  4316 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4317 ;; Tracked objects:
  4318 ;;		On entry : 0/0
  4319 ;;		On exit  : 0/0
  4320 ;;		Unchanged: 0/0
  4321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4322 ;;      Params:         0       4       0       0       0       0       0       0       0
  4323 ;;      Locals:         0       6       0       0       0       0       0       0       0
  4324 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4325 ;;      Totals:         0      10       0       0       0       0       0       0       0
  4326 ;;Total ram usage:       10 bytes
  4327 ;; Hardware stack levels used:    1
  4328 ;; Hardware stack levels required when called:    3
  4329 ;; This function calls:
  4330 ;;		___altofl
  4331 ;;		___fladd
  4332 ;;		___flge
  4333 ;;		___fltol
  4334 ;;		_frexp
  4335 ;; This function is called by:
  4336 ;;		_format_double
  4337 ;;		_exp
  4338 ;; This function uses a non-reentrant model
  4339 ;;
  4340                           
  4341                           	psect	text15
  4342  001B42                     __ptext15:
  4343                           	opt stack 0
  4344  001B42                     _floor:
  4345                           	opt stack 23
  4346                           
  4347                           ;incstack = 0
  4348  001B42  C067  F004         	movff	floor@x,frexp@value
  4349  001B46  C068  F005         	movff	floor@x+1,frexp@value+1
  4350  001B4A  C069  F006         	movff	floor@x+2,frexp@value+2
  4351  001B4E  C06A  F007         	movff	floor@x+3,frexp@value+3
  4352  001B52  0E6F               	movlw	low floor@expon
  4353  001B54  6E08               	movwf	frexp@eptr,c
  4354  001B56  EC9A  F011         	call	_frexp	;wreg free
  4355  001B5A  0100               	movlb	0	; () banked
  4356  001B5C  AF70               	btfss	(floor@expon+1)& (0+255),7,b
  4357  001B5E  D00F               	goto	l3844
  4358                           
  4359                           ; BSR set to: 0
  4360  001B60  AF6A               	btfss	(floor@x+3)& (0+255),7,b
  4361  001B62  D008               	goto	l903
  4362                           
  4363                           ; BSR set to: 0
  4364  001B64  0E00               	movlw	0
  4365  001B66  6F67               	movwf	?_floor& (0+255),b
  4366  001B68  6F68               	movwf	(?_floor+1)& (0+255),b
  4367  001B6A  0E80               	movlw	128
  4368  001B6C  6F69               	movwf	(?_floor+2)& (0+255),b
  4369  001B6E  0EBF               	movlw	191
  4370  001B70  6F6A               	movwf	(?_floor+3)& (0+255),b
  4371  001B72  0CBF               	retlw	191
  4372  001B74                     l903:
  4373                           
  4374                           ; BSR set to: 0
  4375  001B74  6B67               	clrf	?_floor& (0+255),b
  4376  001B76  6B68               	clrf	(?_floor+1)& (0+255),b
  4377  001B78  6B69               	clrf	(?_floor+2)& (0+255),b
  4378  001B7A  6B6A               	clrf	(?_floor+3)& (0+255),b
  4379  001B7C  0012               	return	
  4380  001B7E                     l3844:
  4381                           
  4382                           ; BSR set to: 0
  4383  001B7E  5170               	movf	(floor@expon+1)& (0+255),w,b
  4384  001B80  E103               	bnz	u3160
  4385  001B82  0E1D               	movlw	29
  4386  001B84  5D6F               	subwf	floor@expon& (0+255),w,b
  4387  001B86  E309               	bnc	l3848
  4388  001B88                     u3160:
  4389                           
  4390                           ; BSR set to: 0
  4391  001B88  C067  F067         	movff	floor@x,?_floor
  4392  001B8C  C068  F068         	movff	floor@x+1,?_floor+1
  4393  001B90  C069  F069         	movff	floor@x+2,?_floor+2
  4394  001B94  C06A  F06A         	movff	floor@x+3,?_floor+3
  4395  001B98  0012               	return	
  4396  001B9A                     l3848:
  4397                           
  4398                           ; BSR set to: 0
  4399  001B9A  C067  F052         	movff	floor@x,___fltol@f1
  4400  001B9E  C068  F053         	movff	floor@x+1,___fltol@f1+1
  4401  001BA2  C069  F054         	movff	floor@x+2,___fltol@f1+2
  4402  001BA6  C06A  F055         	movff	floor@x+3,___fltol@f1+3
  4403  001BAA  EC0A  F011         	call	___fltol	;wreg free
  4404  001BAE  C052  F062         	movff	?___fltol,___altofl@c
  4405  001BB2  C053  F063         	movff	?___fltol+1,___altofl@c+1
  4406  001BB6  C054  F064         	movff	?___fltol+2,___altofl@c+2
  4407  001BBA  C055  F065         	movff	?___fltol+3,___altofl@c+3
  4408  001BBE  ECF5  F012         	call	___altofl	;wreg free
  4409  001BC2  C062  F06B         	movff	?___altofl,floor@i
  4410  001BC6  C063  F06C         	movff	?___altofl+1,floor@i+1
  4411  001BCA  C064  F06D         	movff	?___altofl+2,floor@i+2
  4412  001BCE  C065  F06E         	movff	?___altofl+3,floor@i+3
  4413  001BD2  C067  F004         	movff	floor@x,___flge@ff1
  4414  001BD6  C068  F005         	movff	floor@x+1,___flge@ff1+1
  4415  001BDA  C069  F006         	movff	floor@x+2,___flge@ff1+2
  4416  001BDE  C06A  F007         	movff	floor@x+3,___flge@ff1+3
  4417  001BE2  C06B  F008         	movff	floor@i,___flge@ff2
  4418  001BE6  C06C  F009         	movff	floor@i+1,___flge@ff2+1
  4419  001BEA  C06D  F00A         	movff	floor@i+2,___flge@ff2+2
  4420  001BEE  C06E  F00B         	movff	floor@i+3,___flge@ff2+3
  4421  001BF2  EC60  F012         	call	___flge	;wreg free
  4422  001BF6  E215               	bc	l906
  4423  001BF8  C06B  F02C         	movff	floor@i,___fladd@f1
  4424  001BFC  C06C  F02D         	movff	floor@i+1,___fladd@f1+1
  4425  001C00  C06D  F02E         	movff	floor@i+2,___fladd@f1+2
  4426  001C04  C06E  F02F         	movff	floor@i+3,___fladd@f1+3
  4427  001C08  EC92  F00C         	call	PL26	;call to abstracted procedure
  4428  001C0C  EC59  F00B         	call	___fladd	;wreg free
  4429  001C10  C02C  F067         	movff	?___fladd,?_floor
  4430  001C14  C02D  F068         	movff	?___fladd+1,?_floor+1
  4431  001C18  C02E  F069         	movff	?___fladd+2,?_floor+2
  4432  001C1C  C02F  F06A         	movff	?___fladd+3,?_floor+3
  4433  001C20  0012               	return	
  4434  001C22                     l906:
  4435  001C22  C06B  F067         	movff	floor@i,?_floor
  4436  001C26  C06C  F068         	movff	floor@i+1,?_floor+1
  4437  001C2A  C06D  F069         	movff	floor@i+2,?_floor+2
  4438  001C2E  C06E  F06A         	movff	floor@i+3,?_floor+3
  4439  001C32  0012               	return		;funcret
  4440  001C34                     __end_of_floor:
  4441                           	opt stack 0
  4442                           tblptru	equ	0xFF8
  4443                           tblptrh	equ	0xFF7
  4444                           tblptrl	equ	0xFF6
  4445                           tablat	equ	0xFF5
  4446                           prodl	equ	0xFF3
  4447                           intcon	equ	0xFF2
  4448                           intcon2	equ	0xFF1
  4449                           postinc0	equ	0xFEE
  4450                           wreg	equ	0xFE8
  4451                           postdec1	equ	0xFE5
  4452                           fsr1l	equ	0xFE1
  4453                           indf2	equ	0xFDF
  4454                           postinc2	equ	0xFDE
  4455                           postdec2	equ	0xFDD
  4456                           fsr2h	equ	0xFDA
  4457                           fsr2l	equ	0xFD9
  4458                           status	equ	0xFD8
  4459                           
  4460 ;; *************** function ___fltol *****************
  4461 ;; Defined at:
  4462 ;;		line 43 in file "/opt/microchip/xc8/v1.34/sources/common/fltol.c"
  4463 ;; Parameters:    Size  Location     Type
  4464 ;;  f1              4   81[COMRAM] int 
  4465 ;; Auto vars:     Size  Location     Type
  4466 ;;  exp1            1    1[BANK0 ] unsigned char 
  4467 ;;  sign1           1    0[BANK0 ] unsigned char 
  4468 ;; Return value:  Size  Location     Type
  4469 ;;                  4   81[COMRAM] long 
  4470 ;; Registers used:
  4471 ;;		wreg, status,2, status,0
  4472 ;; Tracked objects:
  4473 ;;		On entry : 0/0
  4474 ;;		On exit  : F/0
  4475 ;;		Unchanged: 0/0
  4476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4477 ;;      Params:         4       0       0       0       0       0       0       0       0
  4478 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4479 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4480 ;;      Totals:         8       2       0       0       0       0       0       0       0
  4481 ;;Total ram usage:       10 bytes
  4482 ;; Hardware stack levels used:    1
  4483 ;; Hardware stack levels required when called:    1
  4484 ;; This function calls:
  4485 ;;		Nothing
  4486 ;; This function is called by:
  4487 ;;		_format_double
  4488 ;;		_measure_capacitance
  4489 ;;		_measure_inductance
  4490 ;;		_floor
  4491 ;;		_pow
  4492 ;;		_exp
  4493 ;; This function uses a non-reentrant model
  4494 ;;
  4495                           
  4496                           	psect	text16
  4497  002214                     __ptext16:
  4498                           	opt stack 0
  4499  002214                     ___fltol:
  4500                           	opt stack 28
  4501                           
  4502                           ;incstack = 0
  4503  002214  3454               	rlcf	___fltol@f1+2,w,c
  4504  002216  3455               	rlcf	___fltol@f1+3,w,c
  4505  002218  0100               	movlb	0	; () banked
  4506  00221A  6F61               	movwf	___fltol@exp1& (0+255),b
  4507  00221C  5161               	movf	___fltol@exp1& (0+255),w,b
  4508  00221E  E105               	bnz	l3800
  4509  002220                     l3798:
  4510                           
  4511                           ; BSR set to: 0
  4512  002220  6A52               	clrf	?___fltol,c
  4513  002222  6A53               	clrf	?___fltol+1,c
  4514  002224  6A54               	clrf	?___fltol+2,c
  4515  002226  6A55               	clrf	?___fltol+3,c
  4516  002228  0012               	return	
  4517  00222A                     l3800:
  4518                           
  4519                           ; BSR set to: 0
  4520  00222A  C052  F056         	movff	___fltol@f1,??___fltol
  4521  00222E  C053  F057         	movff	___fltol@f1+1,??___fltol+1
  4522  002232  C054  F058         	movff	___fltol@f1+2,??___fltol+2
  4523  002236  C055  F059         	movff	___fltol@f1+3,??___fltol+3
  4524  00223A  0E20               	movlw	32
  4525  00223C  D005               	goto	u3080
  4526  00223E                     u3085:
  4527  00223E  90D8               	bcf	status,0,c
  4528  002240  3259               	rrcf	??___fltol+3,f,c
  4529  002242  3258               	rrcf	??___fltol+2,f,c
  4530  002244  3257               	rrcf	??___fltol+1,f,c
  4531  002246  3256               	rrcf	??___fltol,f,c
  4532  002248                     u3080:
  4533  002248  2EE8               	decfsz	wreg,f,c
  4534  00224A  D7F9               	goto	u3085
  4535  00224C  5056               	movf	??___fltol,w,c
  4536  00224E  6F60               	movwf	___fltol@sign1& (0+255),b
  4537                           
  4538                           ; BSR set to: 0
  4539  002250  8E54               	bsf	___fltol@f1+2,7,c
  4540                           
  4541                           ; BSR set to: 0
  4542  002252  6A55               	clrf	___fltol@f1+3,c
  4543                           
  4544                           ; BSR set to: 0
  4545  002254  0E96               	movlw	150
  4546  002256  5F61               	subwf	___fltol@exp1& (0+255),f,b
  4547                           
  4548                           ; BSR set to: 0
  4549  002258  AF61               	btfss	___fltol@exp1& (0+255),7,b
  4550  00225A  D00C               	goto	l3818
  4551                           
  4552                           ; BSR set to: 0
  4553  00225C  5161               	movf	___fltol@exp1& (0+255),w,b
  4554  00225E  0A80               	xorlw	128
  4555  002260  0F97               	addlw	151
  4556  002262  E3DE               	bnc	l3798
  4557  002264                     l3814:
  4558                           
  4559                           ; BSR set to: 0
  4560  002264  90D8               	bcf	status,0,c
  4561  002266  3255               	rrcf	___fltol@f1+3,f,c
  4562  002268  3254               	rrcf	___fltol@f1+2,f,c
  4563  00226A  3253               	rrcf	___fltol@f1+1,f,c
  4564  00226C  3252               	rrcf	___fltol@f1,f,c
  4565                           
  4566                           ; BSR set to: 0
  4567  00226E  3F61               	incfsz	___fltol@exp1& (0+255),f,b
  4568  002270  D7F9               	goto	l3814
  4569  002272  D00C               	goto	l3826
  4570  002274                     l3818:
  4571                           
  4572                           ; BSR set to: 0
  4573  002274  0E1F               	movlw	31
  4574  002276  6561               	cpfsgt	___fltol@exp1& (0+255),b
  4575  002278  D007               	goto	l3824
  4576  00227A  D7D2               	goto	l3798
  4577  00227C                     l3822:
  4578                           
  4579                           ; BSR set to: 0
  4580  00227C  90D8               	bcf	status,0,c
  4581  00227E  3652               	rlcf	___fltol@f1,f,c
  4582  002280  3653               	rlcf	___fltol@f1+1,f,c
  4583  002282  3654               	rlcf	___fltol@f1+2,f,c
  4584  002284  3655               	rlcf	___fltol@f1+3,f,c
  4585  002286  0761               	decf	___fltol@exp1& (0+255),f,b
  4586  002288                     l3824:
  4587                           
  4588                           ; BSR set to: 0
  4589  002288  5161               	movf	___fltol@exp1& (0+255),w,b
  4590  00228A  E1F8               	bnz	l3822
  4591  00228C                     l3826:
  4592                           
  4593                           ; BSR set to: 0
  4594  00228C  5160               	movf	___fltol@sign1& (0+255),w,b
  4595  00228E  E008               	bz	l3830
  4596                           
  4597                           ; BSR set to: 0
  4598  002290  1E55               	comf	___fltol@f1+3,f,c
  4599  002292  1E54               	comf	___fltol@f1+2,f,c
  4600  002294  1E53               	comf	___fltol@f1+1,f,c
  4601  002296  6C52               	negf	___fltol@f1,c
  4602  002298  0E00               	movlw	0
  4603  00229A  2253               	addwfc	___fltol@f1+1,f,c
  4604  00229C  2254               	addwfc	___fltol@f1+2,f,c
  4605  00229E  2255               	addwfc	___fltol@f1+3,f,c
  4606  0022A0                     l3830:
  4607                           
  4608                           ; BSR set to: 0
  4609  0022A0  C052  F052         	movff	___fltol@f1,?___fltol
  4610  0022A4  C053  F053         	movff	___fltol@f1+1,?___fltol+1
  4611  0022A8  C054  F054         	movff	___fltol@f1+2,?___fltol+2
  4612  0022AC  C055  F055         	movff	___fltol@f1+3,?___fltol+3
  4613                           
  4614                           ; BSR set to: 0
  4615  0022B0  0012               	return		;funcret
  4616  0022B2                     __end_of___fltol:
  4617                           	opt stack 0
  4618                           tblptru	equ	0xFF8
  4619                           tblptrh	equ	0xFF7
  4620                           tblptrl	equ	0xFF6
  4621                           tablat	equ	0xFF5
  4622                           prodl	equ	0xFF3
  4623                           intcon	equ	0xFF2
  4624                           intcon2	equ	0xFF1
  4625                           postinc0	equ	0xFEE
  4626                           wreg	equ	0xFE8
  4627                           postdec1	equ	0xFE5
  4628                           fsr1l	equ	0xFE1
  4629                           indf2	equ	0xFDF
  4630                           postinc2	equ	0xFDE
  4631                           postdec2	equ	0xFDD
  4632                           fsr2h	equ	0xFDA
  4633                           fsr2l	equ	0xFD9
  4634                           status	equ	0xFD8
  4635                           
  4636 ;; *************** function ___flge *****************
  4637 ;; Defined at:
  4638 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/flge.c"
  4639 ;; Parameters:    Size  Location     Type
  4640 ;;  ff1             4    3[COMRAM] long 
  4641 ;;  ff2             4    7[COMRAM] long 
  4642 ;; Auto vars:     Size  Location     Type
  4643 ;;		None
  4644 ;; Return value:  Size  Location     Type
  4645 ;;		None               void
  4646 ;; Registers used:
  4647 ;;		wreg, status,2, status,0
  4648 ;; Tracked objects:
  4649 ;;		On entry : 0/0
  4650 ;;		On exit  : 0/0
  4651 ;;		Unchanged: 0/0
  4652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4653 ;;      Params:         8       0       0       0       0       0       0       0       0
  4654 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4655 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4656 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4657 ;;Total ram usage:        8 bytes
  4658 ;; Hardware stack levels used:    1
  4659 ;; Hardware stack levels required when called:    1
  4660 ;; This function calls:
  4661 ;;		Nothing
  4662 ;; This function is called by:
  4663 ;;		_format_double
  4664 ;;		_measure_capacitance
  4665 ;;		_measure_inductance
  4666 ;;		_floor
  4667 ;;		_pow
  4668 ;;		_exp
  4669 ;; This function uses a non-reentrant model
  4670 ;;
  4671                           
  4672                           	psect	text17
  4673  0024C0                     __ptext17:
  4674                           	opt stack 0
  4675  0024C0                     ___flge:
  4676                           	opt stack 28
  4677                           
  4678                           ; BSR set to: 0
  4679                           ;incstack = 0
  4680  0024C0  AE07               	btfss	___flge@ff1+3,7,c
  4681  0024C2  D009               	goto	l2628
  4682  0024C4  6C04               	negf	___flge@ff1,c
  4683  0024C6  1E05               	comf	___flge@ff1+1,f,c
  4684  0024C8  B0D8               	btfsc	status,0,c
  4685  0024CA  2A05               	incf	___flge@ff1+1,f,c
  4686  0024CC  1E06               	comf	___flge@ff1+2,f,c
  4687  0024CE  B0D8               	btfsc	status,0,c
  4688  0024D0  2A06               	incf	___flge@ff1+2,f,c
  4689  0024D2  0E80               	movlw	128
  4690  0024D4  5607               	subfwb	___flge@ff1+3,f,c
  4691  0024D6                     l2628:
  4692  0024D6  AE0B               	btfss	___flge@ff2+3,7,c
  4693  0024D8  D009               	goto	l860
  4694  0024DA  6C08               	negf	___flge@ff2,c
  4695  0024DC  1E09               	comf	___flge@ff2+1,f,c
  4696  0024DE  B0D8               	btfsc	status,0,c
  4697  0024E0  2A09               	incf	___flge@ff2+1,f,c
  4698  0024E2  1E0A               	comf	___flge@ff2+2,f,c
  4699  0024E4  B0D8               	btfsc	status,0,c
  4700  0024E6  2A0A               	incf	___flge@ff2+2,f,c
  4701  0024E8  0E80               	movlw	128
  4702  0024EA  560B               	subfwb	___flge@ff2+3,f,c
  4703  0024EC                     l860:
  4704  0024EC  0E80               	movlw	128
  4705  0024EE  1A07               	xorwf	___flge@ff1+3,f,c
  4706  0024F0  1A0B               	xorwf	___flge@ff2+3,f,c
  4707  0024F2  5008               	movf	___flge@ff2,w,c
  4708  0024F4  5C04               	subwf	___flge@ff1,w,c
  4709  0024F6  5009               	movf	___flge@ff2+1,w,c
  4710  0024F8  5805               	subwfb	___flge@ff1+1,w,c
  4711  0024FA  500A               	movf	___flge@ff2+2,w,c
  4712  0024FC  5806               	subwfb	___flge@ff1+2,w,c
  4713  0024FE  500B               	movf	___flge@ff2+3,w,c
  4714  002500  5807               	subwfb	___flge@ff1+3,w,c
  4715  002502  E202               	bc	l2634
  4716  002504  90D8               	bcf	status,0,c
  4717  002506  0012               	return	
  4718  002508                     l2634:
  4719  002508  80D8               	bsf	status,0,c
  4720  00250A  0012               	return		;funcret
  4721  00250C                     __end_of___flge:
  4722                           	opt stack 0
  4723                           tblptru	equ	0xFF8
  4724                           tblptrh	equ	0xFF7
  4725                           tblptrl	equ	0xFF6
  4726                           tablat	equ	0xFF5
  4727                           prodl	equ	0xFF3
  4728                           intcon	equ	0xFF2
  4729                           intcon2	equ	0xFF1
  4730                           postinc0	equ	0xFEE
  4731                           wreg	equ	0xFE8
  4732                           postdec1	equ	0xFE5
  4733                           fsr1l	equ	0xFE1
  4734                           indf2	equ	0xFDF
  4735                           postinc2	equ	0xFDE
  4736                           postdec2	equ	0xFDD
  4737                           fsr2h	equ	0xFDA
  4738                           fsr2l	equ	0xFD9
  4739                           status	equ	0xFD8
  4740                           
  4741 ;; *************** function ___altofl *****************
  4742 ;; Defined at:
  4743 ;;		line 36 in file "/opt/microchip/xc8/v1.34/sources/common/altofl.c"
  4744 ;; Parameters:    Size  Location     Type
  4745 ;;  c               4    2[BANK0 ] long 
  4746 ;; Auto vars:     Size  Location     Type
  4747 ;;  sign            1    6[BANK0 ] unsigned char 
  4748 ;; Return value:  Size  Location     Type
  4749 ;;                  4    2[BANK0 ] unsigned char 
  4750 ;; Registers used:
  4751 ;;		wreg, status,2, status,0, cstack
  4752 ;; Tracked objects:
  4753 ;;		On entry : F/0
  4754 ;;		On exit  : 0/0
  4755 ;;		Unchanged: 0/0
  4756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4757 ;;      Params:         0       4       0       0       0       0       0       0       0
  4758 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4759 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4760 ;;      Totals:         0       5       0       0       0       0       0       0       0
  4761 ;;Total ram usage:        5 bytes
  4762 ;; Hardware stack levels used:    1
  4763 ;; Hardware stack levels required when called:    2
  4764 ;; This function calls:
  4765 ;;		___flpack
  4766 ;; This function is called by:
  4767 ;;		_floor
  4768 ;; This function uses a non-reentrant model
  4769 ;;
  4770                           
  4771                           	psect	text18
  4772  0025EA                     __ptext18:
  4773                           	opt stack 0
  4774  0025EA                     ___altofl:
  4775                           	opt stack 23
  4776                           
  4777                           ; BSR set to: 0
  4778                           
  4779                           ;incstack = 0
  4780  0025EA  6B66               	clrf	___altofl@sign& (0+255),b
  4781                           
  4782                           ; BSR set to: 0
  4783  0025EC  AF65               	btfss	(___altofl@c+3)& (0+255),7,b
  4784  0025EE  D00A               	goto	l3680
  4785                           
  4786                           ; BSR set to: 0
  4787  0025F0  1F65               	comf	(___altofl@c+3)& (0+255),f,b
  4788  0025F2  1F64               	comf	(___altofl@c+2)& (0+255),f,b
  4789  0025F4  1F63               	comf	(___altofl@c+1)& (0+255),f,b
  4790  0025F6  6D62               	negf	___altofl@c& (0+255),b
  4791  0025F8  0E00               	movlw	0
  4792  0025FA  2363               	addwfc	(___altofl@c+1)& (0+255),f,b
  4793  0025FC  2364               	addwfc	(___altofl@c+2)& (0+255),f,b
  4794  0025FE  2365               	addwfc	(___altofl@c+3)& (0+255),f,b
  4795                           
  4796                           ; BSR set to: 0
  4797  002600  0E01               	movlw	1
  4798  002602  6F66               	movwf	___altofl@sign& (0+255),b
  4799  002604                     l3680:
  4800                           
  4801                           ; BSR set to: 0
  4802  002604  C062  F004         	movff	___altofl@c,___flpack@arg
  4803  002608  C063  F005         	movff	___altofl@c+1,___flpack@arg+1
  4804  00260C  C064  F006         	movff	___altofl@c+2,___flpack@arg+2
  4805  002610  C065  F007         	movff	___altofl@c+3,___flpack@arg+3
  4806  002614  0E96               	movlw	150
  4807  002616  6E08               	movwf	___flpack@exp,c
  4808  002618  C066  F009         	movff	___altofl@sign,___flpack@sign
  4809  00261C  EC57  F00F         	call	___flpack	;wreg free
  4810  002620  C004  F062         	movff	?___flpack,?___altofl
  4811  002624  C005  F063         	movff	?___flpack+1,?___altofl+1
  4812  002628  C006  F064         	movff	?___flpack+2,?___altofl+2
  4813  00262C  C007  F065         	movff	?___flpack+3,?___altofl+3
  4814  002630  0012               	return		;funcret
  4815  002632                     __end_of___altofl:
  4816                           	opt stack 0
  4817                           tblptru	equ	0xFF8
  4818                           tblptrh	equ	0xFF7
  4819                           tblptrl	equ	0xFF6
  4820                           tablat	equ	0xFF5
  4821                           prodl	equ	0xFF3
  4822                           intcon	equ	0xFF2
  4823                           intcon2	equ	0xFF1
  4824                           postinc0	equ	0xFEE
  4825                           wreg	equ	0xFE8
  4826                           postdec1	equ	0xFE5
  4827                           fsr1l	equ	0xFE1
  4828                           indf2	equ	0xFDF
  4829                           postinc2	equ	0xFDE
  4830                           postdec2	equ	0xFDD
  4831                           fsr2h	equ	0xFDA
  4832                           fsr2l	equ	0xFD9
  4833                           status	equ	0xFD8
  4834                           
  4835 ;; *************** function ___flsub *****************
  4836 ;; Defined at:
  4837 ;;		line 20 in file "/opt/microchip/xc8/v1.34/sources/common/flsub.c"
  4838 ;; Parameters:    Size  Location     Type
  4839 ;;  f1              4   55[COMRAM] unsigned char 
  4840 ;;  f2              4   59[COMRAM] unsigned char 
  4841 ;; Auto vars:     Size  Location     Type
  4842 ;;		None
  4843 ;; Return value:  Size  Location     Type
  4844 ;;                  4   55[COMRAM] unsigned char 
  4845 ;; Registers used:
  4846 ;;		wreg, status,2, status,0, cstack
  4847 ;; Tracked objects:
  4848 ;;		On entry : 0/0
  4849 ;;		On exit  : 0/0
  4850 ;;		Unchanged: 0/0
  4851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4852 ;;      Params:         8       0       0       0       0       0       0       0       0
  4853 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4854 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4855 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4856 ;;Total ram usage:        8 bytes
  4857 ;; Hardware stack levels used:    1
  4858 ;; Hardware stack levels required when called:    3
  4859 ;; This function calls:
  4860 ;;		___fladd
  4861 ;; This function is called by:
  4862 ;;		_format_double
  4863 ;;		_measure_capacitance
  4864 ;;		_measure_inductance
  4865 ;;		_exp
  4866 ;; This function uses a non-reentrant model
  4867 ;;
  4868                           
  4869                           	psect	text19
  4870  002632                     __ptext19:
  4871                           	opt stack 0
  4872  002632                     ___flsub:
  4873                           	opt stack 26
  4874                           
  4875                           ;incstack = 0
  4876  002632  503C               	movf	___flsub@f2,w,c
  4877  002634  103D               	iorwf	___flsub@f2+1,w,c
  4878  002636  103E               	iorwf	___flsub@f2+2,w,c
  4879  002638  103F               	iorwf	___flsub@f2+3,w,c
  4880  00263A  E002               	bz	l3894
  4881  00263C  0E80               	movlw	128
  4882  00263E  1A3F               	xorwf	___flsub@f2+3,f,c
  4883  002640                     l3894:
  4884  002640  C038  F02C         	movff	___flsub@f1,___fladd@f1
  4885  002644  C039  F02D         	movff	___flsub@f1+1,___fladd@f1+1
  4886  002648  C03A  F02E         	movff	___flsub@f1+2,___fladd@f1+2
  4887  00264C  C03B  F02F         	movff	___flsub@f1+3,___fladd@f1+3
  4888  002650  C03C  F030         	movff	___flsub@f2,___fladd@f2
  4889  002654  C03D  F031         	movff	___flsub@f2+1,___fladd@f2+1
  4890  002658  C03E  F032         	movff	___flsub@f2+2,___fladd@f2+2
  4891  00265C  C03F  F033         	movff	___flsub@f2+3,___fladd@f2+3
  4892  002660  EC59  F00B         	call	___fladd	;wreg free
  4893  002664  C02C  F038         	movff	?___fladd,?___flsub
  4894  002668  C02D  F039         	movff	?___fladd+1,?___flsub+1
  4895  00266C  C02E  F03A         	movff	?___fladd+2,?___flsub+2
  4896  002670  C02F  F03B         	movff	?___fladd+3,?___flsub+3
  4897  002674  0012               	return		;funcret
  4898  002676                     __end_of___flsub:
  4899                           	opt stack 0
  4900                           tblptru	equ	0xFF8
  4901                           tblptrh	equ	0xFF7
  4902                           tblptrl	equ	0xFF6
  4903                           tablat	equ	0xFF5
  4904                           prodl	equ	0xFF3
  4905                           intcon	equ	0xFF2
  4906                           intcon2	equ	0xFF1
  4907                           postinc0	equ	0xFEE
  4908                           wreg	equ	0xFE8
  4909                           postdec1	equ	0xFE5
  4910                           fsr1l	equ	0xFE1
  4911                           indf2	equ	0xFDF
  4912                           postinc2	equ	0xFDE
  4913                           postdec2	equ	0xFDD
  4914                           fsr2h	equ	0xFDA
  4915                           fsr2l	equ	0xFD9
  4916                           status	equ	0xFD8
  4917                           
  4918 ;; *************** function ___flneg *****************
  4919 ;; Defined at:
  4920 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/flneg.c"
  4921 ;; Parameters:    Size  Location     Type
  4922 ;;  f1              4    3[COMRAM] unsigned char 
  4923 ;; Auto vars:     Size  Location     Type
  4924 ;;		None
  4925 ;; Return value:  Size  Location     Type
  4926 ;;                  4    3[COMRAM] unsigned char 
  4927 ;; Registers used:
  4928 ;;		wreg, status,2, status,0
  4929 ;; Tracked objects:
  4930 ;;		On entry : F/0
  4931 ;;		On exit  : F/0
  4932 ;;		Unchanged: F/0
  4933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4934 ;;      Params:         4       0       0       0       0       0       0       0       0
  4935 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4936 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4937 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4938 ;;Total ram usage:        4 bytes
  4939 ;; Hardware stack levels used:    1
  4940 ;; Hardware stack levels required when called:    1
  4941 ;; This function calls:
  4942 ;;		Nothing
  4943 ;; This function is called by:
  4944 ;;		_pow
  4945 ;;		_exp
  4946 ;; This function uses a non-reentrant model
  4947 ;;
  4948                           
  4949                           	psect	text20
  4950  00291E                     __ptext20:
  4951                           	opt stack 0
  4952  00291E                     ___flneg:
  4953                           	opt stack 25
  4954                           
  4955                           ; BSR set to: 0
  4956                           
  4957                           ;incstack = 0
  4958  00291E  5004               	movf	___flneg@f1,w,c
  4959  002920  1005               	iorwf	___flneg@f1+1,w,c
  4960  002922  1006               	iorwf	___flneg@f1+2,w,c
  4961  002924  1007               	iorwf	___flneg@f1+3,w,c
  4962  002926  E002               	bz	l2796
  4963                           
  4964                           ; BSR set to: 0
  4965  002928  0E80               	movlw	128
  4966  00292A  1A07               	xorwf	___flneg@f1+3,f,c
  4967  00292C                     l2796:
  4968                           
  4969                           ; BSR set to: 0
  4970  00292C  C004  F004         	movff	___flneg@f1,?___flneg
  4971  002930  C005  F005         	movff	___flneg@f1+1,?___flneg+1
  4972  002934  C006  F006         	movff	___flneg@f1+2,?___flneg+2
  4973  002938  C007  F007         	movff	___flneg@f1+3,?___flneg+3
  4974                           
  4975                           ; BSR set to: 0
  4976  00293C  0012               	return		;funcret
  4977  00293E                     __end_of___flneg:
  4978                           	opt stack 0
  4979                           tblptru	equ	0xFF8
  4980                           tblptrh	equ	0xFF7
  4981                           tblptrl	equ	0xFF6
  4982                           tablat	equ	0xFF5
  4983                           prodl	equ	0xFF3
  4984                           intcon	equ	0xFF2
  4985                           intcon2	equ	0xFF1
  4986                           postinc0	equ	0xFEE
  4987                           wreg	equ	0xFE8
  4988                           postdec1	equ	0xFE5
  4989                           fsr1l	equ	0xFE1
  4990                           indf2	equ	0xFDF
  4991                           postinc2	equ	0xFDE
  4992                           postdec2	equ	0xFDD
  4993                           fsr2h	equ	0xFDA
  4994                           fsr2l	equ	0xFD9
  4995                           status	equ	0xFD8
  4996                           
  4997 ;; *************** function ___fldiv *****************
  4998 ;; Defined at:
  4999 ;;		line 54 in file "/opt/microchip/xc8/v1.34/sources/common/fldiv.c"
  5000 ;; Parameters:    Size  Location     Type
  5001 ;;  f1              4   13[COMRAM] unsigned char 
  5002 ;;  f2              4   17[COMRAM] unsigned char 
  5003 ;; Auto vars:     Size  Location     Type
  5004 ;;  f3              4   21[COMRAM] unsigned char 
  5005 ;;  sign            1   27[COMRAM] unsigned char 
  5006 ;;  exp             1   26[COMRAM] unsigned char 
  5007 ;;  cntr            1   25[COMRAM] unsigned char 
  5008 ;; Return value:  Size  Location     Type
  5009 ;;                  4   13[COMRAM] unsigned char 
  5010 ;; Registers used:
  5011 ;;		wreg, status,2, status,0, cstack
  5012 ;; Tracked objects:
  5013 ;;		On entry : 0/0
  5014 ;;		On exit  : 0/0
  5015 ;;		Unchanged: 0/0
  5016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5017 ;;      Params:         8       0       0       0       0       0       0       0       0
  5018 ;;      Locals:         7       0       0       0       0       0       0       0       0
  5019 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5020 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5021 ;;Total ram usage:       15 bytes
  5022 ;; Hardware stack levels used:    1
  5023 ;; Hardware stack levels required when called:    2
  5024 ;; This function calls:
  5025 ;;		___flpack
  5026 ;; This function is called by:
  5027 ;;		_format_double
  5028 ;;		_measure_capacitance
  5029 ;;		_measure_inductance
  5030 ;;		_exp
  5031 ;; This function uses a non-reentrant model
  5032 ;;
  5033                           
  5034                           	psect	text21
  5035  001F70                     __ptext21:
  5036                           	opt stack 0
  5037  001F70                     ___fldiv:
  5038                           	opt stack 27
  5039                           
  5040                           ; BSR set to: 0
  5041                           ;incstack = 0
  5042  001F70  3410               	rlcf	___fldiv@f1+2,w,c
  5043  001F72  3411               	rlcf	___fldiv@f1+3,w,c
  5044  001F74  6E1B               	movwf	___fldiv@exp,c
  5045  001F76  501B               	movf	___fldiv@exp,w,c
  5046  001F78  E105               	bnz	l3858
  5047  001F7A  6A0E               	clrf	?___fldiv,c
  5048  001F7C  6A0F               	clrf	?___fldiv+1,c
  5049  001F7E  6A10               	clrf	?___fldiv+2,c
  5050  001F80  6A11               	clrf	?___fldiv+3,c
  5051  001F82  0012               	return	
  5052  001F84                     l3858:
  5053  001F84  3414               	rlcf	___fldiv@f2+2,w,c
  5054  001F86  3415               	rlcf	___fldiv@f2+3,w,c
  5055  001F88  6E1C               	movwf	___fldiv@sign,c
  5056  001F8A  501C               	movf	___fldiv@sign,w,c
  5057  001F8C  E105               	bnz	l3862
  5058  001F8E  6A0E               	clrf	?___fldiv,c
  5059  001F90  6A0F               	clrf	?___fldiv+1,c
  5060  001F92  6A10               	clrf	?___fldiv+2,c
  5061  001F94  6A11               	clrf	?___fldiv+3,c
  5062  001F96  0012               	return	
  5063  001F98                     l3862:
  5064  001F98  501C               	movf	___fldiv@sign,w,c
  5065  001F9A  0F89               	addlw	137
  5066  001F9C  5E1B               	subwf	___fldiv@exp,f,c
  5067  001F9E  C011  F01C         	movff	___fldiv@f1+3,___fldiv@sign
  5068  001FA2  5015               	movf	___fldiv@f2+3,w,c
  5069  001FA4  1A1C               	xorwf	___fldiv@sign,f,c
  5070  001FA6  0E80               	movlw	128
  5071  001FA8  161C               	andwf	___fldiv@sign,f,c
  5072  001FAA  8E10               	bsf	___fldiv@f1+2,7,c
  5073  001FAC  6A11               	clrf	___fldiv@f1+3,c
  5074  001FAE  8E14               	bsf	___fldiv@f2+2,7,c
  5075  001FB0  6A15               	clrf	___fldiv@f2+3,c
  5076  001FB2  0E20               	movlw	32
  5077  001FB4  6E1A               	movwf	___fldiv@cntr,c
  5078  001FB6                     l3874:
  5079  001FB6  90D8               	bcf	status,0,c
  5080  001FB8  3616               	rlcf	___fldiv@f3,f,c
  5081  001FBA  3617               	rlcf	___fldiv@f3+1,f,c
  5082  001FBC  3618               	rlcf	___fldiv@f3+2,f,c
  5083  001FBE  3619               	rlcf	___fldiv@f3+3,f,c
  5084  001FC0  5012               	movf	___fldiv@f2,w,c
  5085  001FC2  5C0E               	subwf	___fldiv@f1,w,c
  5086  001FC4  5013               	movf	___fldiv@f2+1,w,c
  5087  001FC6  580F               	subwfb	___fldiv@f1+1,w,c
  5088  001FC8  5014               	movf	___fldiv@f2+2,w,c
  5089  001FCA  5810               	subwfb	___fldiv@f1+2,w,c
  5090  001FCC  5015               	movf	___fldiv@f2+3,w,c
  5091  001FCE  5811               	subwfb	___fldiv@f1+3,w,c
  5092  001FD0  E309               	bnc	l3882
  5093  001FD2  5012               	movf	___fldiv@f2,w,c
  5094  001FD4  5E0E               	subwf	___fldiv@f1,f,c
  5095  001FD6  5013               	movf	___fldiv@f2+1,w,c
  5096  001FD8  5A0F               	subwfb	___fldiv@f1+1,f,c
  5097  001FDA  5014               	movf	___fldiv@f2+2,w,c
  5098  001FDC  5A10               	subwfb	___fldiv@f1+2,f,c
  5099  001FDE  5015               	movf	___fldiv@f2+3,w,c
  5100  001FE0  5A11               	subwfb	___fldiv@f1+3,f,c
  5101  001FE2  8016               	bsf	___fldiv@f3,0,c
  5102  001FE4                     l3882:
  5103  001FE4  90D8               	bcf	status,0,c
  5104  001FE6  360E               	rlcf	___fldiv@f1,f,c
  5105  001FE8  360F               	rlcf	___fldiv@f1+1,f,c
  5106  001FEA  3610               	rlcf	___fldiv@f1+2,f,c
  5107  001FEC  3611               	rlcf	___fldiv@f1+3,f,c
  5108  001FEE  2E1A               	decfsz	___fldiv@cntr,f,c
  5109  001FF0  D7E2               	goto	l3874
  5110  001FF2  C016  F004         	movff	___fldiv@f3,___flpack@arg
  5111  001FF6  C017  F005         	movff	___fldiv@f3+1,___flpack@arg+1
  5112  001FFA  C018  F006         	movff	___fldiv@f3+2,___flpack@arg+2
  5113  001FFE  C019  F007         	movff	___fldiv@f3+3,___flpack@arg+3
  5114  002002  C01B  F008         	movff	___fldiv@exp,___flpack@exp
  5115  002006  C01C  F009         	movff	___fldiv@sign,___flpack@sign
  5116  00200A  EC57  F00F         	call	___flpack	;wreg free
  5117  00200E  C004  F00E         	movff	?___flpack,?___fldiv
  5118  002012  C005  F00F         	movff	?___flpack+1,?___fldiv+1
  5119  002016  C006  F010         	movff	?___flpack+2,?___fldiv+2
  5120  00201A  C007  F011         	movff	?___flpack+3,?___fldiv+3
  5121  00201E  0012               	return		;funcret
  5122  002020                     __end_of___fldiv:
  5123                           	opt stack 0
  5124                           tblptru	equ	0xFF8
  5125                           tblptrh	equ	0xFF7
  5126                           tblptrl	equ	0xFF6
  5127                           tablat	equ	0xFF5
  5128                           prodl	equ	0xFF3
  5129                           intcon	equ	0xFF2
  5130                           intcon2	equ	0xFF1
  5131                           postinc0	equ	0xFEE
  5132                           wreg	equ	0xFE8
  5133                           postdec1	equ	0xFE5
  5134                           fsr1l	equ	0xFE1
  5135                           indf2	equ	0xFDF
  5136                           postinc2	equ	0xFDE
  5137                           postdec2	equ	0xFDD
  5138                           fsr2h	equ	0xFDA
  5139                           fsr2l	equ	0xFD9
  5140                           status	equ	0xFD8
  5141                           
  5142 ;; *************** function ___lltofl *****************
  5143 ;; Defined at:
  5144 ;;		line 30 in file "/opt/microchip/xc8/v1.34/sources/common/lltofl.c"
  5145 ;; Parameters:    Size  Location     Type
  5146 ;;  c               4   13[COMRAM] unsigned long 
  5147 ;; Auto vars:     Size  Location     Type
  5148 ;;		None
  5149 ;; Return value:  Size  Location     Type
  5150 ;;                  4   13[COMRAM] unsigned long 
  5151 ;; Registers used:
  5152 ;;		wreg, status,2, status,0, cstack
  5153 ;; Tracked objects:
  5154 ;;		On entry : F/0
  5155 ;;		On exit  : 0/0
  5156 ;;		Unchanged: 0/0
  5157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5158 ;;      Params:         4       0       0       0       0       0       0       0       0
  5159 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5160 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5161 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5162 ;;Total ram usage:        4 bytes
  5163 ;; Hardware stack levels used:    1
  5164 ;; Hardware stack levels required when called:    2
  5165 ;; This function calls:
  5166 ;;		___flpack
  5167 ;; This function is called by:
  5168 ;;		_pow
  5169 ;; This function uses a non-reentrant model
  5170 ;;
  5171                           
  5172                           	psect	text22
  5173  002786                     __ptext22:
  5174                           	opt stack 0
  5175  002786                     ___lltofl:
  5176                           	opt stack 25
  5177                           
  5178                           ; BSR set to: 0
  5179                           
  5180                           ;incstack = 0
  5181  002786  C00E  F004         	movff	___lltofl@c,___flpack@arg
  5182  00278A  C00F  F005         	movff	___lltofl@c+1,___flpack@arg+1
  5183  00278E  C010  F006         	movff	___lltofl@c+2,___flpack@arg+2
  5184  002792  C011  F007         	movff	___lltofl@c+3,___flpack@arg+3
  5185  002796  0E96               	movlw	150
  5186  002798  6E08               	movwf	___flpack@exp,c
  5187  00279A  0E00               	movlw	0
  5188  00279C  6E09               	movwf	___flpack@sign,c
  5189  00279E  EC57  F00F         	call	___flpack	;wreg free
  5190  0027A2  C004  F00E         	movff	?___flpack,?___lltofl
  5191  0027A6  C005  F00F         	movff	?___flpack+1,?___lltofl+1
  5192  0027AA  C006  F010         	movff	?___flpack+2,?___lltofl+2
  5193  0027AE  C007  F011         	movff	?___flpack+3,?___lltofl+3
  5194  0027B2  0012               	return		;funcret
  5195  0027B4                     __end_of___lltofl:
  5196                           	opt stack 0
  5197                           tblptru	equ	0xFF8
  5198                           tblptrh	equ	0xFF7
  5199                           tblptrl	equ	0xFF6
  5200                           tablat	equ	0xFF5
  5201                           prodl	equ	0xFF3
  5202                           intcon	equ	0xFF2
  5203                           intcon2	equ	0xFF1
  5204                           postinc0	equ	0xFEE
  5205                           wreg	equ	0xFE8
  5206                           postdec1	equ	0xFE5
  5207                           fsr1l	equ	0xFE1
  5208                           indf2	equ	0xFDF
  5209                           postinc2	equ	0xFDE
  5210                           postdec2	equ	0xFDD
  5211                           fsr2h	equ	0xFDA
  5212                           fsr2l	equ	0xFD9
  5213                           status	equ	0xFD8
  5214                           
  5215 ;; *************** function _log10 *****************
  5216 ;; Defined at:
  5217 ;;		line 39 in file "/opt/microchip/xc8/v1.34/sources/common/log.c"
  5218 ;; Parameters:    Size  Location     Type
  5219 ;;  x               4   73[COMRAM] unsigned long 
  5220 ;; Auto vars:     Size  Location     Type
  5221 ;;		None
  5222 ;; Return value:  Size  Location     Type
  5223 ;;                  4   73[COMRAM] unsigned long 
  5224 ;; Registers used:
  5225 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5226 ;; Tracked objects:
  5227 ;;		On entry : 0/0
  5228 ;;		On exit  : 0/0
  5229 ;;		Unchanged: 0/0
  5230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5231 ;;      Params:         4       0       0       0       0       0       0       0       0
  5232 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5233 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5234 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5235 ;;Total ram usage:        8 bytes
  5236 ;; Hardware stack levels used:    1
  5237 ;; Hardware stack levels required when called:    5
  5238 ;; This function calls:
  5239 ;;		___flmul
  5240 ;;		_log
  5241 ;; This function is called by:
  5242 ;;		_format_double
  5243 ;; This function uses a non-reentrant model
  5244 ;;
  5245                           
  5246                           	psect	text23
  5247  00241A                     __ptext23:
  5248                           	opt stack 0
  5249  00241A                     _log10:
  5250                           	opt stack 23
  5251                           
  5252                           ;incstack = 0
  5253  00241A  C04A  F044         	movff	log10@x,log@x
  5254  00241E  C04B  F045         	movff	log10@x+1,log@x+1
  5255  002422  C04C  F046         	movff	log10@x+2,log@x+2
  5256  002426  C04D  F047         	movff	log10@x+3,log@x+3
  5257  00242A  EC06  F00C         	call	_log	;wreg free
  5258  00242E  C044  F04E         	movff	?_log,_log10$1120
  5259  002432  C045  F04F         	movff	?_log+1,_log10$1120+1
  5260  002436  C046  F050         	movff	?_log+2,_log10$1120+2
  5261  00243A  C047  F051         	movff	?_log+3,_log10$1120+3
  5262  00243E  C04E  F01D         	movff	_log10$1120,___flmul@f1
  5263  002442  C04F  F01E         	movff	_log10$1120+1,___flmul@f1+1
  5264  002446  C050  F01F         	movff	_log10$1120+2,___flmul@f1+2
  5265  00244A  C051  F020         	movff	_log10$1120+3,___flmul@f1+3
  5266  00244E  0ED9               	movlw	217
  5267  002450  6E21               	movwf	___flmul@f2,c
  5268  002452  0E5B               	movlw	91
  5269  002454  6E22               	movwf	___flmul@f2+1,c
  5270  002456  0EDE               	movlw	222
  5271  002458  6E23               	movwf	___flmul@f2+2,c
  5272  00245A  0E3E               	movlw	62
  5273  00245C  6E24               	movwf	___flmul@f2+3,c
  5274  00245E  ECF5  F00E         	call	___flmul	;wreg free
  5275  002462  C01D  F04A         	movff	?___flmul,?_log10
  5276  002466  C01E  F04B         	movff	?___flmul+1,?_log10+1
  5277  00246A  C01F  F04C         	movff	?___flmul+2,?_log10+2
  5278  00246E  C020  F04D         	movff	?___flmul+3,?_log10+3
  5279  002472  0012               	return		;funcret
  5280  002474                     __end_of_log10:
  5281                           	opt stack 0
  5282                           tblptru	equ	0xFF8
  5283                           tblptrh	equ	0xFF7
  5284                           tblptrl	equ	0xFF6
  5285                           tablat	equ	0xFF5
  5286                           prodl	equ	0xFF3
  5287                           intcon	equ	0xFF2
  5288                           intcon2	equ	0xFF1
  5289                           postinc0	equ	0xFEE
  5290                           wreg	equ	0xFE8
  5291                           postdec1	equ	0xFE5
  5292                           fsr1l	equ	0xFE1
  5293                           indf2	equ	0xFDF
  5294                           postinc2	equ	0xFDE
  5295                           postdec2	equ	0xFDD
  5296                           fsr2h	equ	0xFDA
  5297                           fsr2l	equ	0xFD9
  5298                           status	equ	0xFD8
  5299                           
  5300 ;; *************** function _log *****************
  5301 ;; Defined at:
  5302 ;;		line 5 in file "/opt/microchip/xc8/v1.34/sources/common/log.c"
  5303 ;; Parameters:    Size  Location     Type
  5304 ;;  x               4   67[COMRAM] unsigned long 
  5305 ;; Auto vars:     Size  Location     Type
  5306 ;;  exponent        2   71[COMRAM] int 
  5307 ;; Return value:  Size  Location     Type
  5308 ;;                  4   67[COMRAM] int 
  5309 ;; Registers used:
  5310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5311 ;; Tracked objects:
  5312 ;;		On entry : 0/0
  5313 ;;		On exit  : 0/0
  5314 ;;		Unchanged: 0/0
  5315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5316 ;;      Params:         4       0       0       0       0       0       0       0       0
  5317 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5318 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5319 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5320 ;;Total ram usage:        6 bytes
  5321 ;; Hardware stack levels used:    1
  5322 ;; Hardware stack levels required when called:    4
  5323 ;; This function calls:
  5324 ;;		___awtofl
  5325 ;;		___fladd
  5326 ;;		___flmul
  5327 ;;		_eval_poly
  5328 ;;		_frexp
  5329 ;; This function is called by:
  5330 ;;		_log10
  5331 ;;		_pow
  5332 ;; This function uses a non-reentrant model
  5333 ;;
  5334                           
  5335                           	psect	text24
  5336  00180C                     __ptext24:
  5337                           	opt stack 0
  5338  00180C                     _log:
  5339                           	opt stack 23
  5340                           
  5341                           ;incstack = 0
  5342  00180C  AE47               	btfss	log@x+3,7,c
  5343  00180E  D005               	goto	l3922
  5344  001810  6A44               	clrf	?_log,c
  5345  001812  6A45               	clrf	?_log+1,c
  5346  001814  6A46               	clrf	?_log+2,c
  5347  001816  6A47               	clrf	?_log+3,c
  5348  001818  0012               	return	
  5349  00181A                     l3922:
  5350  00181A  5044               	movf	log@x,w,c
  5351  00181C  1045               	iorwf	log@x+1,w,c
  5352  00181E  1046               	iorwf	log@x+2,w,c
  5353  001820  1047               	iorwf	log@x+3,w,c
  5354  001822  E105               	bnz	l3926
  5355  001824  6A44               	clrf	?_log,c
  5356  001826  6A45               	clrf	?_log+1,c
  5357  001828  6A46               	clrf	?_log+2,c
  5358  00182A  6A47               	clrf	?_log+3,c
  5359  00182C  0012               	return	
  5360  00182E                     l3926:
  5361  00182E  6A21               	clrf	___flmul@f2,c
  5362  001830  6A22               	clrf	___flmul@f2+1,c
  5363  001832  6A23               	clrf	___flmul@f2+2,c
  5364  001834  0E40               	movlw	64
  5365  001836  6E24               	movwf	___flmul@f2+3,c
  5366  001838  0E48               	movlw	low log@exponent
  5367  00183A  6E08               	movwf	frexp@eptr,c
  5368  00183C  C044  F004         	movff	log@x,frexp@value
  5369  001840  C045  F005         	movff	log@x+1,frexp@value+1
  5370  001844  C046  F006         	movff	log@x+2,frexp@value+2
  5371  001848  C047  F007         	movff	log@x+3,frexp@value+3
  5372  00184C  EC9A  F011         	call	_frexp	;wreg free
  5373  001850  C004  F01D         	movff	?_frexp,___flmul@f1
  5374  001854  C005  F01E         	movff	?_frexp+1,___flmul@f1+1
  5375  001858  C006  F01F         	movff	?_frexp+2,___flmul@f1+2
  5376  00185C  C007  F020         	movff	?_frexp+3,___flmul@f1+3
  5377  001860  ECF5  F00E         	call	___flmul	;wreg free
  5378  001864  C01D  F02C         	movff	?___flmul,___fladd@f1
  5379  001868  C01E  F02D         	movff	?___flmul+1,___fladd@f1+1
  5380  00186C  C01F  F02E         	movff	?___flmul+2,___fladd@f1+2
  5381  001870  C020  F02F         	movff	?___flmul+3,___fladd@f1+3
  5382  001874  D857               	call	PL26	;call to abstracted procedure
  5383  001876  EC59  F00B         	call	___fladd	;wreg free
  5384  00187A  C02C  F044         	movff	?___fladd,log@x
  5385  00187E  C02D  F045         	movff	?___fladd+1,log@x+1
  5386  001882  C02E  F046         	movff	?___fladd+2,log@x+2
  5387  001886  C02F  F047         	movff	?___fladd+3,log@x+3
  5388  00188A  0648               	decf	log@exponent,f,c
  5389  00188C  A0D8               	btfss	status,0,c
  5390  00188E  0649               	decf	log@exponent+1,f,c
  5391  001890  C044  F038         	movff	log@x,eval_poly@x
  5392  001894  C045  F039         	movff	log@x+1,eval_poly@x+1
  5393  001898  C046  F03A         	movff	log@x+2,eval_poly@x+2
  5394  00189C  C047  F03B         	movff	log@x+3,eval_poly@x+3
  5395  0018A0  0E29               	movlw	low log@coeff
  5396  0018A2  6E3C               	movwf	eval_poly@d,c
  5397  0018A4  6A3E               	clrf	eval_poly@n+1,c
  5398  0018A6  0E08               	movlw	8
  5399  0018A8  6E3D               	movwf	eval_poly@n,c
  5400  0018AA  EC10  F010         	call	_eval_poly	;wreg free
  5401  0018AE  C038  F044         	movff	?_eval_poly,log@x
  5402  0018B2  C039  F045         	movff	?_eval_poly+1,log@x+1
  5403  0018B6  C03A  F046         	movff	?_eval_poly+2,log@x+2
  5404  0018BA  C03B  F047         	movff	?_eval_poly+3,log@x+3
  5405  0018BE  0E18               	movlw	24
  5406  0018C0  6E21               	movwf	___flmul@f2,c
  5407  0018C2  0E72               	movlw	114
  5408  0018C4  6E22               	movwf	___flmul@f2+1,c
  5409  0018C6  0E31               	movlw	49
  5410  0018C8  6E23               	movwf	___flmul@f2+2,c
  5411  0018CA  0E3F               	movlw	63
  5412  0018CC  6E24               	movwf	___flmul@f2+3,c
  5413  0018CE  C048  F00E         	movff	log@exponent,___awtofl@c
  5414  0018D2  C049  F00F         	movff	log@exponent+1,___awtofl@c+1
  5415  0018D6  EC5A  F013         	call	___awtofl	;wreg free
  5416  0018DA  C00E  F01D         	movff	?___awtofl,___flmul@f1
  5417  0018DE  C00F  F01E         	movff	?___awtofl+1,___flmul@f1+1
  5418  0018E2  C010  F01F         	movff	?___awtofl+2,___flmul@f1+2
  5419  0018E6  C011  F020         	movff	?___awtofl+3,___flmul@f1+3
  5420  0018EA  ECF5  F00E         	call	___flmul	;wreg free
  5421  0018EE  C01D  F02C         	movff	?___flmul,___fladd@f1
  5422  0018F2  C01E  F02D         	movff	?___flmul+1,___fladd@f1+1
  5423  0018F6  C01F  F02E         	movff	?___flmul+2,___fladd@f1+2
  5424  0018FA  C020  F02F         	movff	?___flmul+3,___fladd@f1+3
  5425  0018FE  C044  F030         	movff	log@x,___fladd@f2
  5426  001902  C045  F031         	movff	log@x+1,___fladd@f2+1
  5427  001906  C046  F032         	movff	log@x+2,___fladd@f2+2
  5428  00190A  C047  F033         	movff	log@x+3,___fladd@f2+3
  5429  00190E  EC59  F00B         	call	___fladd	;wreg free
  5430  001912  C02C  F044         	movff	?___fladd,?_log
  5431  001916  C02D  F045         	movff	?___fladd+1,?_log+1
  5432  00191A  C02E  F046         	movff	?___fladd+2,?_log+2
  5433  00191E  C02F  F047         	movff	?___fladd+3,?_log+3
  5434  001922  0012               	return		;funcret
  5435  001924                     __end_of_log:
  5436                           	opt stack 0
  5437  001924                     PL26:
  5438                           	opt stack 23
  5439  001924  0E00               	movlw	0
  5440  001926  6E30               	movwf	___fladd@f2,c
  5441  001928  6E31               	movwf	___fladd@f2+1,c
  5442  00192A  0E80               	movlw	128
  5443  00192C  6E32               	movwf	___fladd@f2+2,c
  5444  00192E  0EBF               	movlw	191
  5445  001930  6E33               	movwf	___fladd@f2+3,c
  5446  001932  0CBF               	retlw	191
  5447  001934                     __end_ofPL26:
  5448                           	opt stack 0
  5449                           tblptru	equ	0xFF8
  5450                           tblptrh	equ	0xFF7
  5451                           tblptrl	equ	0xFF6
  5452                           tablat	equ	0xFF5
  5453                           prodl	equ	0xFF3
  5454                           intcon	equ	0xFF2
  5455                           intcon2	equ	0xFF1
  5456                           postinc0	equ	0xFEE
  5457                           wreg	equ	0xFE8
  5458                           postdec1	equ	0xFE5
  5459                           fsr1l	equ	0xFE1
  5460                           indf2	equ	0xFDF
  5461                           postinc2	equ	0xFDE
  5462                           postdec2	equ	0xFDD
  5463                           fsr2h	equ	0xFDA
  5464                           fsr2l	equ	0xFD9
  5465                           status	equ	0xFD8
  5466                           
  5467 ;; *************** function _frexp *****************
  5468 ;; Defined at:
  5469 ;;		line 254 in file "/opt/microchip/xc8/v1.34/sources/common/frexp.c"
  5470 ;; Parameters:    Size  Location     Type
  5471 ;;  value           4    3[COMRAM] int 
  5472 ;;  eptr            1    7[COMRAM] PTR int 
  5473 ;;		 -> log@exponent(2), floor@expon(2), 
  5474 ;; Auto vars:     Size  Location     Type
  5475 ;;		None
  5476 ;; Return value:  Size  Location     Type
  5477 ;;                  4    3[COMRAM] PTR int 
  5478 ;; Registers used:
  5479 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5480 ;; Tracked objects:
  5481 ;;		On entry : 0/0
  5482 ;;		On exit  : 0/0
  5483 ;;		Unchanged: 0/0
  5484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5485 ;;      Params:         5       0       0       0       0       0       0       0       0
  5486 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5487 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5488 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5489 ;;Total ram usage:        7 bytes
  5490 ;; Hardware stack levels used:    1
  5491 ;; Hardware stack levels required when called:    1
  5492 ;; This function calls:
  5493 ;;		Nothing
  5494 ;; This function is called by:
  5495 ;;		_floor
  5496 ;;		_log
  5497 ;; This function uses a non-reentrant model
  5498 ;;
  5499                           
  5500                           	psect	text25
  5501  002334                     __ptext25:
  5502                           	opt stack 0
  5503  002334                     _frexp:
  5504                           	opt stack 25
  5505                           
  5506                           ;incstack = 0
  5507  002334  5004               	movf	frexp@value,w,c
  5508  002336  1005               	iorwf	frexp@value+1,w,c
  5509  002338  1006               	iorwf	frexp@value+2,w,c
  5510  00233A  1007               	iorwf	frexp@value+3,w,c
  5511  00233C  E10B               	bnz	l2646
  5512  00233E  5008               	movf	frexp@eptr,w,c
  5513  002340  6ED9               	movwf	fsr2l,c
  5514  002342  6ADA               	clrf	fsr2h,c
  5515  002344  0E00               	movlw	0
  5516  002346  6ADE               	clrf	postinc2,c
  5517  002348  6ADD               	clrf	postdec2,c
  5518  00234A  6A04               	clrf	?_frexp,c
  5519  00234C  6A05               	clrf	?_frexp+1,c
  5520  00234E  6A06               	clrf	?_frexp+2,c
  5521  002350  6A07               	clrf	?_frexp+3,c
  5522  002352  0012               	return	
  5523  002354                     l2646:
  5524  002354  5007               	movf	frexp@value+3,w,c
  5525  002356  0B7F               	andlw	127
  5526  002358  6E09               	movwf	??_frexp& (0+255),c
  5527  00235A  6A0A               	clrf	(??_frexp+1)& (0+255),c
  5528  00235C  90D8               	bcf	status,0,c
  5529  00235E  3609               	rlcf	??_frexp,f,c
  5530  002360  360A               	rlcf	??_frexp+1,f,c
  5531  002362  5008               	movf	frexp@eptr,w,c
  5532  002364  6ED9               	movwf	fsr2l,c
  5533  002366  6ADA               	clrf	fsr2h,c
  5534  002368  C009  FFDE         	movff	??_frexp,postinc2
  5535  00236C  C00A  FFDD         	movff	??_frexp+1,postdec2
  5536  002370  5008               	movf	frexp@eptr,w,c
  5537  002372  6ED9               	movwf	fsr2l,c
  5538  002374  6ADA               	clrf	fsr2h,c
  5539  002376  0E01               	movlw	1
  5540  002378  AE06               	btfss	frexp@value+2,7,c
  5541  00237A  0E00               	movlw	0
  5542  00237C  12DE               	iorwf	postinc2,f,c
  5543  00237E  0E00               	movlw	0
  5544  002380  12DD               	iorwf	postdec2,f,c
  5545  002382  5008               	movf	frexp@eptr,w,c
  5546  002384  6ED9               	movwf	fsr2l,c
  5547  002386  6ADA               	clrf	fsr2h,c
  5548  002388  0E82               	movlw	130
  5549  00238A  26DE               	addwf	postinc2,f,c
  5550  00238C  0EFF               	movlw	255
  5551  00238E  22DD               	addwfc	postdec2,f,c
  5552  002390  5007               	movf	frexp@value+3,w,c
  5553  002392  0B80               	andlw	-128
  5554  002394  093F               	iorlw	63
  5555  002396  6E07               	movwf	frexp@value+3,c
  5556  002398  9E06               	bcf	frexp@value+2,7,c
  5557  00239A  C004  F004         	movff	frexp@value,?_frexp
  5558  00239E  C005  F005         	movff	frexp@value+1,?_frexp+1
  5559  0023A2  C006  F006         	movff	frexp@value+2,?_frexp+2
  5560  0023A6  C007  F007         	movff	frexp@value+3,?_frexp+3
  5561  0023AA  0012               	return		;funcret
  5562  0023AC                     __end_of_frexp:
  5563                           	opt stack 0
  5564                           tblptru	equ	0xFF8
  5565                           tblptrh	equ	0xFF7
  5566                           tblptrl	equ	0xFF6
  5567                           tablat	equ	0xFF5
  5568                           prodl	equ	0xFF3
  5569                           intcon	equ	0xFF2
  5570                           intcon2	equ	0xFF1
  5571                           postinc0	equ	0xFEE
  5572                           wreg	equ	0xFE8
  5573                           postdec1	equ	0xFE5
  5574                           fsr1l	equ	0xFE1
  5575                           indf2	equ	0xFDF
  5576                           postinc2	equ	0xFDE
  5577                           postdec2	equ	0xFDD
  5578                           fsr2h	equ	0xFDA
  5579                           fsr2l	equ	0xFD9
  5580                           status	equ	0xFD8
  5581                           
  5582 ;; *************** function _eval_poly *****************
  5583 ;; Defined at:
  5584 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/evalpoly.c"
  5585 ;; Parameters:    Size  Location     Type
  5586 ;;  x               4   55[COMRAM] PTR int 
  5587 ;;  d               1   59[COMRAM] PTR const 
  5588 ;;		 -> exp@coeff(40), log@coeff(36), 
  5589 ;;  n               2   60[COMRAM] int 
  5590 ;; Auto vars:     Size  Location     Type
  5591 ;;  res             4   63[COMRAM] int 
  5592 ;; Return value:  Size  Location     Type
  5593 ;;                  4   55[COMRAM] int 
  5594 ;; Registers used:
  5595 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5596 ;; Tracked objects:
  5597 ;;		On entry : 0/0
  5598 ;;		On exit  : 0/0
  5599 ;;		Unchanged: 0/0
  5600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5601 ;;      Params:         7       0       0       0       0       0       0       0       0
  5602 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5603 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5604 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5605 ;;Total ram usage:       12 bytes
  5606 ;; Hardware stack levels used:    1
  5607 ;; Hardware stack levels required when called:    3
  5608 ;; This function calls:
  5609 ;;		___fladd
  5610 ;;		___flmul
  5611 ;; This function is called by:
  5612 ;;		_log
  5613 ;;		_exp
  5614 ;; This function uses a non-reentrant model
  5615 ;;
  5616                           
  5617                           	psect	text26
  5618  002020                     __ptext26:
  5619                           	opt stack 0
  5620  002020                     _eval_poly:
  5621                           	opt stack 0
  5622                           
  5623                           ;incstack = 0
  5624  002020  D84B               	call	PL16	;call to abstracted procedure
  5625  002022  CFF5 F040          	movff	tablat,eval_poly@res
  5626  002026  0009               	tblrd		*+
  5627  002028  CFF5 F041          	movff	tablat,eval_poly@res+1
  5628  00202C  0009               	tblrd		*+
  5629  00202E  CFF5 F042          	movff	tablat,eval_poly@res+2
  5630  002032  000A               	tblrd		*-
  5631  002034  CFF5 F043          	movff	tablat,eval_poly@res+3
  5632  002038  D033               	goto	l3912
  5633  00203A                     l3910:
  5634  00203A  C040  F021         	movff	eval_poly@res,___flmul@f2
  5635  00203E  C041  F022         	movff	eval_poly@res+1,___flmul@f2+1
  5636  002042  C042  F023         	movff	eval_poly@res+2,___flmul@f2+2
  5637  002046  C043  F024         	movff	eval_poly@res+3,___flmul@f2+3
  5638  00204A  C038  F01D         	movff	eval_poly@x,___flmul@f1
  5639  00204E  C039  F01E         	movff	eval_poly@x+1,___flmul@f1+1
  5640  002052  C03A  F01F         	movff	eval_poly@x+2,___flmul@f1+2
  5641  002056  C03B  F020         	movff	eval_poly@x+3,___flmul@f1+3
  5642  00205A  ECF5  F00E         	call	___flmul	;wreg free
  5643  00205E  C01D  F02C         	movff	?___flmul,___fladd@f1
  5644  002062  C01E  F02D         	movff	?___flmul+1,___fladd@f1+1
  5645  002066  C01F  F02E         	movff	?___flmul+2,___fladd@f1+2
  5646  00206A  C020  F02F         	movff	?___flmul+3,___fladd@f1+3
  5647  00206E  063D               	decf	eval_poly@n,f,c
  5648  002070  A0D8               	btfss	status,0,c
  5649  002072  063E               	decf	eval_poly@n+1,f,c
  5650  002074  D821               	call	PL16	;call to abstracted procedure
  5651  002076  CFF5 F030          	movff	tablat,___fladd@f2
  5652  00207A  0009               	tblrd		*+
  5653  00207C  CFF5 F031          	movff	tablat,___fladd@f2+1
  5654  002080  0009               	tblrd		*+
  5655  002082  CFF5 F032          	movff	tablat,___fladd@f2+2
  5656  002086  000A               	tblrd		*-
  5657  002088  CFF5 F033          	movff	tablat,___fladd@f2+3
  5658  00208C  EC59  F00B         	call	___fladd	;wreg free
  5659  002090  C02C  F040         	movff	?___fladd,eval_poly@res
  5660  002094  C02D  F041         	movff	?___fladd+1,eval_poly@res+1
  5661  002098  C02E  F042         	movff	?___fladd+2,eval_poly@res+2
  5662  00209C  C02F  F043         	movff	?___fladd+3,eval_poly@res+3
  5663  0020A0                     l3912:
  5664  0020A0  503D               	movf	eval_poly@n,w,c
  5665  0020A2  103E               	iorwf	eval_poly@n+1,w,c
  5666  0020A4  E1CA               	bnz	l3910
  5667  0020A6  C040  F038         	movff	eval_poly@res,?_eval_poly
  5668  0020AA  C041  F039         	movff	eval_poly@res+1,?_eval_poly+1
  5669  0020AE  C042  F03A         	movff	eval_poly@res+2,?_eval_poly+2
  5670  0020B2  C043  F03B         	movff	eval_poly@res+3,?_eval_poly+3
  5671  0020B6  0012               	return		;funcret
  5672  0020B8                     __end_of_eval_poly:
  5673                           	opt stack 0
  5674  0020B8                     PL16:
  5675                           	opt stack 23
  5676  0020B8  503D               	movf	eval_poly@n,w,c
  5677  0020BA  0D04               	mullw	4
  5678  0020BC  503C               	movf	eval_poly@d,w,c
  5679  0020BE  24F3               	addwf	prodl,w,c
  5680  0020C0  6E3F               	movwf	??_eval_poly& (0+255),c
  5681  0020C2  C03F  FFF6         	movff	??_eval_poly,tblptrl
  5682  0020C6                     	if	0	;There is only one active tblptr byte
  5683  0020C6                     	endif
  5684  0020C6                     	if	0	;tblptru may be non-zero
  5685  0020C6                     	endif
  5686  0020C6                     	if	0	;tblptru may be non-zero
  5687  0020C6                     	endif
  5688  0020C6  0009               	tblrd		*+
  5689  0020C8  0012               	return	
  5690  0020CA                     __end_ofPL16:
  5691                           	opt stack 0
  5692                           tblptru	equ	0xFF8
  5693                           tblptrh	equ	0xFF7
  5694                           tblptrl	equ	0xFF6
  5695                           tablat	equ	0xFF5
  5696                           prodl	equ	0xFF3
  5697                           intcon	equ	0xFF2
  5698                           intcon2	equ	0xFF1
  5699                           postinc0	equ	0xFEE
  5700                           wreg	equ	0xFE8
  5701                           postdec1	equ	0xFE5
  5702                           fsr1l	equ	0xFE1
  5703                           indf2	equ	0xFDF
  5704                           postinc2	equ	0xFDE
  5705                           postdec2	equ	0xFDD
  5706                           fsr2h	equ	0xFDA
  5707                           fsr2l	equ	0xFD9
  5708                           status	equ	0xFD8
  5709                           
  5710 ;; *************** function ___flmul *****************
  5711 ;; Defined at:
  5712 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/flmul.c"
  5713 ;; Parameters:    Size  Location     Type
  5714 ;;  f1              4   28[COMRAM] int 
  5715 ;;  f2              4   32[COMRAM] int 
  5716 ;; Auto vars:     Size  Location     Type
  5717 ;;  f3_as_produc    4   37[COMRAM] unsigned long 
  5718 ;;  sign            1   42[COMRAM] unsigned char 
  5719 ;;  cntr            1   41[COMRAM] unsigned char 
  5720 ;;  exp             1   36[COMRAM] unsigned char 
  5721 ;; Return value:  Size  Location     Type
  5722 ;;                  4   28[COMRAM] unsigned char 
  5723 ;; Registers used:
  5724 ;;		wreg, status,2, status,0, cstack
  5725 ;; Tracked objects:
  5726 ;;		On entry : 0/0
  5727 ;;		On exit  : 0/0
  5728 ;;		Unchanged: 0/0
  5729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5730 ;;      Params:         8       0       0       0       0       0       0       0       0
  5731 ;;      Locals:         7       0       0       0       0       0       0       0       0
  5732 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5733 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5734 ;;Total ram usage:       15 bytes
  5735 ;; Hardware stack levels used:    1
  5736 ;; Hardware stack levels required when called:    2
  5737 ;; This function calls:
  5738 ;;		___flpack
  5739 ;; This function is called by:
  5740 ;;		_format_double
  5741 ;;		_measure_capacitance
  5742 ;;		_measure_inductance
  5743 ;;		_log
  5744 ;;		_log10
  5745 ;;		_pow
  5746 ;;		_eval_poly
  5747 ;;		_exp
  5748 ;; This function uses a non-reentrant model
  5749 ;;
  5750                           
  5751                           	psect	text27
  5752  001DEA                     __ptext27:
  5753                           	opt stack 0
  5754  001DEA                     ___flmul:
  5755                           	opt stack 27
  5756                           
  5757                           ;incstack = 0
  5758  001DEA  341F               	rlcf	___flmul@f1+2,w,c
  5759  001DEC  3420               	rlcf	___flmul@f1+3,w,c
  5760  001DEE  6E25               	movwf	___flmul@exp,c
  5761  001DF0  5025               	movf	___flmul@exp,w,c
  5762  001DF2  E105               	bnz	l3754
  5763  001DF4  6A1D               	clrf	?___flmul,c
  5764  001DF6  6A1E               	clrf	?___flmul+1,c
  5765  001DF8  6A1F               	clrf	?___flmul+2,c
  5766  001DFA  6A20               	clrf	?___flmul+3,c
  5767  001DFC  0012               	return	
  5768  001DFE                     l3754:
  5769  001DFE  3423               	rlcf	___flmul@f2+2,w,c
  5770  001E00  3424               	rlcf	___flmul@f2+3,w,c
  5771  001E02  6E2B               	movwf	___flmul@sign,c
  5772  001E04  502B               	movf	___flmul@sign,w,c
  5773  001E06  E105               	bnz	l3758
  5774  001E08  6A1D               	clrf	?___flmul,c
  5775  001E0A  6A1E               	clrf	?___flmul+1,c
  5776  001E0C  6A1F               	clrf	?___flmul+2,c
  5777  001E0E  6A20               	clrf	?___flmul+3,c
  5778  001E10  0012               	return	
  5779  001E12                     l3758:
  5780  001E12  502B               	movf	___flmul@sign,w,c
  5781  001E14  0F7B               	addlw	123
  5782  001E16  2625               	addwf	___flmul@exp,f,c
  5783  001E18  C020  F02B         	movff	___flmul@f1+3,___flmul@sign
  5784  001E1C  5024               	movf	___flmul@f2+3,w,c
  5785  001E1E  1A2B               	xorwf	___flmul@sign,f,c
  5786  001E20  0E80               	movlw	128
  5787  001E22  162B               	andwf	___flmul@sign,f,c
  5788  001E24  8E1F               	bsf	___flmul@f1+2,7,c
  5789  001E26  8E23               	bsf	___flmul@f2+2,7,c
  5790  001E28  0E00               	movlw	0
  5791  001E2A  1624               	andwf	___flmul@f2+3,f,c
  5792  001E2C  6A26               	clrf	___flmul@f3_as_product,c
  5793  001E2E  6A27               	clrf	___flmul@f3_as_product+1,c
  5794  001E30  6A28               	clrf	___flmul@f3_as_product+2,c
  5795  001E32  6A29               	clrf	___flmul@f3_as_product+3,c
  5796  001E34  0E07               	movlw	7
  5797  001E36  6E2A               	movwf	___flmul@cntr,c
  5798  001E38                     l3770:
  5799  001E38  B01D               	btfsc	___flmul@f1,0,c
  5800  001E3A  D829               	call	PL18	;call to abstracted procedure
  5801  001E3C  D831               	call	PL36	;call to abstracted procedure
  5802  001E3E  3621               	rlcf	___flmul@f2,f,c
  5803  001E40  3622               	rlcf	___flmul@f2+1,f,c
  5804  001E42  3623               	rlcf	___flmul@f2+2,f,c
  5805  001E44  3624               	rlcf	___flmul@f2+3,f,c
  5806  001E46  2E2A               	decfsz	___flmul@cntr,f,c
  5807  001E48  D7F7               	goto	l3770
  5808  001E4A  0E11               	movlw	17
  5809  001E4C  6E2A               	movwf	___flmul@cntr,c
  5810  001E4E                     l3782:
  5811  001E4E  B01D               	btfsc	___flmul@f1,0,c
  5812  001E50  D81E               	call	PL18	;call to abstracted procedure
  5813  001E52  D826               	call	PL36	;call to abstracted procedure
  5814  001E54  3229               	rrcf	___flmul@f3_as_product+3,f,c
  5815  001E56  3228               	rrcf	___flmul@f3_as_product+2,f,c
  5816  001E58  3227               	rrcf	___flmul@f3_as_product+1,f,c
  5817  001E5A  3226               	rrcf	___flmul@f3_as_product,f,c
  5818  001E5C  2E2A               	decfsz	___flmul@cntr,f,c
  5819  001E5E  D7F7               	goto	l3782
  5820  001E60  C026  F004         	movff	___flmul@f3_as_product,___flpack@arg
  5821  001E64  C027  F005         	movff	___flmul@f3_as_product+1,___flpack@arg+1
  5822  001E68  C028  F006         	movff	___flmul@f3_as_product+2,___flpack@arg+2
  5823  001E6C  C029  F007         	movff	___flmul@f3_as_product+3,___flpack@arg+3
  5824  001E70  C025  F008         	movff	___flmul@exp,___flpack@exp
  5825  001E74  C02B  F009         	movff	___flmul@sign,___flpack@sign
  5826  001E78  EC57  F00F         	call	___flpack	;wreg free
  5827  001E7C  C004  F01D         	movff	?___flpack,?___flmul
  5828  001E80  C005  F01E         	movff	?___flpack+1,?___flmul+1
  5829  001E84  C006  F01F         	movff	?___flpack+2,?___flmul+2
  5830  001E88  C007  F020         	movff	?___flpack+3,?___flmul+3
  5831  001E8C  0012               	return		;funcret
  5832  001E8E                     __end_of___flmul:
  5833                           	opt stack 0
  5834  001E8E                     PL18:
  5835                           	opt stack 27
  5836  001E8E  5021               	movf	___flmul@f2,w,c
  5837  001E90  2626               	addwf	___flmul@f3_as_product,f,c
  5838  001E92  5022               	movf	___flmul@f2+1,w,c
  5839  001E94  2227               	addwfc	___flmul@f3_as_product+1,f,c
  5840  001E96  5023               	movf	___flmul@f2+2,w,c
  5841  001E98  2228               	addwfc	___flmul@f3_as_product+2,f,c
  5842  001E9A  5024               	movf	___flmul@f2+3,w,c
  5843  001E9C  2229               	addwfc	___flmul@f3_as_product+3,f,c
  5844  001E9E  0012               	return	
  5845  001EA0                     __end_ofPL18:
  5846                           	opt stack 0
  5847  001EA0                     PL36:
  5848                           	opt stack 27
  5849  001EA0  90D8               	bcf	status,0,c
  5850  001EA2  3220               	rrcf	___flmul@f1+3,f,c
  5851  001EA4  321F               	rrcf	___flmul@f1+2,f,c
  5852  001EA6  321E               	rrcf	___flmul@f1+1,f,c
  5853  001EA8  321D               	rrcf	___flmul@f1,f,c
  5854  001EAA  90D8               	bcf	status,0,c
  5855  001EAC  0012               	return	
  5856  001EAE                     __end_ofPL36:
  5857                           	opt stack 0
  5858                           tblptru	equ	0xFF8
  5859                           tblptrh	equ	0xFF7
  5860                           tblptrl	equ	0xFF6
  5861                           tablat	equ	0xFF5
  5862                           prodl	equ	0xFF3
  5863                           intcon	equ	0xFF2
  5864                           intcon2	equ	0xFF1
  5865                           postinc0	equ	0xFEE
  5866                           wreg	equ	0xFE8
  5867                           postdec1	equ	0xFE5
  5868                           fsr1l	equ	0xFE1
  5869                           indf2	equ	0xFDF
  5870                           postinc2	equ	0xFDE
  5871                           postdec2	equ	0xFDD
  5872                           fsr2h	equ	0xFDA
  5873                           fsr2l	equ	0xFD9
  5874                           status	equ	0xFD8
  5875                           
  5876 ;; *************** function ___fladd *****************
  5877 ;; Defined at:
  5878 ;;		line 88 in file "/opt/microchip/xc8/v1.34/sources/common/fladd.c"
  5879 ;; Parameters:    Size  Location     Type
  5880 ;;  f1              4   43[COMRAM] unsigned char 
  5881 ;;  f2              4   47[COMRAM] unsigned char 
  5882 ;; Auto vars:     Size  Location     Type
  5883 ;;  exp1            1   54[COMRAM] unsigned char 
  5884 ;;  exp2            1   53[COMRAM] unsigned char 
  5885 ;;  sign            1   52[COMRAM] unsigned char 
  5886 ;; Return value:  Size  Location     Type
  5887 ;;                  4   43[COMRAM] unsigned char 
  5888 ;; Registers used:
  5889 ;;		wreg, status,2, status,0, cstack
  5890 ;; Tracked objects:
  5891 ;;		On entry : 0/0
  5892 ;;		On exit  : 0/0
  5893 ;;		Unchanged: 0/0
  5894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5895 ;;      Params:         8       0       0       0       0       0       0       0       0
  5896 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5897 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5898 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5899 ;;Total ram usage:       12 bytes
  5900 ;; Hardware stack levels used:    1
  5901 ;; Hardware stack levels required when called:    2
  5902 ;; This function calls:
  5903 ;;		___flpack
  5904 ;; This function is called by:
  5905 ;;		_floor
  5906 ;;		___flsub
  5907 ;;		_log
  5908 ;;		_eval_poly
  5909 ;; This function uses a non-reentrant model
  5910 ;;
  5911                           
  5912                           	psect	text28
  5913  0016B2                     __ptext28:
  5914                           	opt stack 0
  5915  0016B2                     ___fladd:
  5916                           	opt stack 26
  5917                           
  5918                           ;incstack = 0
  5919  0016B2  342E               	rlcf	___fladd@f1+2,w,c
  5920  0016B4  342F               	rlcf	___fladd@f1+3,w,c
  5921  0016B6  6E37               	movwf	___fladd@exp1,c
  5922  0016B8  3432               	rlcf	___fladd@f2+2,w,c
  5923  0016BA  3433               	rlcf	___fladd@f2+3,w,c
  5924  0016BC  6E36               	movwf	___fladd@exp2,c
  5925  0016BE  5037               	movf	___fladd@exp1,w,c
  5926  0016C0  E009               	bz	l820
  5927  0016C2  5036               	movf	___fladd@exp2,w,c
  5928  0016C4  5C37               	subwf	___fladd@exp1,w,c
  5929  0016C6  E20F               	bc	l3690
  5930  0016C8  5037               	movf	___fladd@exp1,w,c
  5931  0016CA  5C36               	subwf	___fladd@exp2,w,c
  5932  0016CC  6E34               	movwf	??___fladd& (0+255),c
  5933  0016CE  0E20               	movlw	32
  5934  0016D0  6434               	cpfsgt	??___fladd,c
  5935  0016D2  D009               	goto	l3690
  5936  0016D4                     l820:
  5937  0016D4  C030  F02C         	movff	___fladd@f2,?___fladd
  5938  0016D8  C031  F02D         	movff	___fladd@f2+1,?___fladd+1
  5939  0016DC  C032  F02E         	movff	___fladd@f2+2,?___fladd+2
  5940  0016E0  C033  F02F         	movff	___fladd@f2+3,?___fladd+3
  5941  0016E4  0012               	return	
  5942  0016E6                     l3690:
  5943  0016E6  5036               	movf	___fladd@exp2,w,c
  5944  0016E8  E009               	bz	l824
  5945  0016EA  5037               	movf	___fladd@exp1,w,c
  5946  0016EC  5C36               	subwf	___fladd@exp2,w,c
  5947  0016EE  E20F               	bc	l3696
  5948  0016F0  5036               	movf	___fladd@exp2,w,c
  5949  0016F2  5C37               	subwf	___fladd@exp1,w,c
  5950  0016F4  6E34               	movwf	??___fladd& (0+255),c
  5951  0016F6  0E20               	movlw	32
  5952  0016F8  6434               	cpfsgt	??___fladd,c
  5953  0016FA  D009               	goto	l3696
  5954  0016FC                     l824:
  5955  0016FC  C02C  F02C         	movff	___fladd@f1,?___fladd
  5956  001700  C02D  F02D         	movff	___fladd@f1+1,?___fladd+1
  5957  001704  C02E  F02E         	movff	___fladd@f1+2,?___fladd+2
  5958  001708  C02F  F02F         	movff	___fladd@f1+3,?___fladd+3
  5959  00170C  0012               	return	
  5960  00170E                     l3696:
  5961  00170E  0E06               	movlw	6
  5962  001710  6E35               	movwf	___fladd@sign,c
  5963  001712  BE2F               	btfsc	___fladd@f1+3,7,c
  5964  001714  8E35               	bsf	___fladd@sign,7,c
  5965  001716  BE33               	btfsc	___fladd@f2+3,7,c
  5966  001718  8C35               	bsf	___fladd@sign,6,c
  5967  00171A  8E2E               	bsf	___fladd@f1+2,7,c
  5968  00171C  6A2F               	clrf	___fladd@f1+3,c
  5969  00171E  8E32               	bsf	___fladd@f2+2,7,c
  5970  001720  6A33               	clrf	___fladd@f2+3,c
  5971  001722  5036               	movf	___fladd@exp2,w,c
  5972  001724  5C37               	subwf	___fladd@exp1,w,c
  5973  001726  E21A               	bc	l3720
  5974  001728                     l3710:
  5975  001728  90D8               	bcf	status,0,c
  5976  00172A  3630               	rlcf	___fladd@f2,f,c
  5977  00172C  3631               	rlcf	___fladd@f2+1,f,c
  5978  00172E  3632               	rlcf	___fladd@f2+2,f,c
  5979  001730  3633               	rlcf	___fladd@f2+3,f,c
  5980  001732  0636               	decf	___fladd@exp2,f,c
  5981  001734  5037               	movf	___fladd@exp1,w,c
  5982  001736  1836               	xorwf	___fladd@exp2,w,c
  5983  001738  E00D               	bz	l3718
  5984  00173A  0635               	decf	___fladd@sign,f,c
  5985  00173C  C035  F034         	movff	___fladd@sign,??___fladd
  5986  001740  0E07               	movlw	7
  5987  001742  1634               	andwf	??___fladd,f,c
  5988  001744  E007               	bz	l3718
  5989  001746  D7F0               	goto	l3710
  5990  001748                     l3716:
  5991  001748  90D8               	bcf	status,0,c
  5992  00174A  322F               	rrcf	___fladd@f1+3,f,c
  5993  00174C  322E               	rrcf	___fladd@f1+2,f,c
  5994  00174E  322D               	rrcf	___fladd@f1+1,f,c
  5995  001750  322C               	rrcf	___fladd@f1,f,c
  5996  001752  2A37               	incf	___fladd@exp1,f,c
  5997  001754                     l3718:
  5998  001754  5036               	movf	___fladd@exp2,w,c
  5999  001756  1837               	xorwf	___fladd@exp1,w,c
  6000  001758  E01D               	bz	l835
  6001  00175A  D7F6               	goto	l3716
  6002  00175C                     l3720:
  6003  00175C  5037               	movf	___fladd@exp1,w,c
  6004  00175E  5C36               	subwf	___fladd@exp2,w,c
  6005  001760  E219               	bc	l835
  6006  001762                     l3722:
  6007  001762  90D8               	bcf	status,0,c
  6008  001764  362C               	rlcf	___fladd@f1,f,c
  6009  001766  362D               	rlcf	___fladd@f1+1,f,c
  6010  001768  362E               	rlcf	___fladd@f1+2,f,c
  6011  00176A  362F               	rlcf	___fladd@f1+3,f,c
  6012  00176C  0637               	decf	___fladd@exp1,f,c
  6013  00176E  5037               	movf	___fladd@exp1,w,c
  6014  001770  1836               	xorwf	___fladd@exp2,w,c
  6015  001772  E00D               	bz	l3730
  6016  001774  0635               	decf	___fladd@sign,f,c
  6017  001776  C035  F034         	movff	___fladd@sign,??___fladd
  6018  00177A  0E07               	movlw	7
  6019  00177C  1634               	andwf	??___fladd,f,c
  6020  00177E  E007               	bz	l3730
  6021  001780  D7F0               	goto	l3722
  6022  001782                     l3728:
  6023  001782  90D8               	bcf	status,0,c
  6024  001784  3233               	rrcf	___fladd@f2+3,f,c
  6025  001786  3232               	rrcf	___fladd@f2+2,f,c
  6026  001788  3231               	rrcf	___fladd@f2+1,f,c
  6027  00178A  3230               	rrcf	___fladd@f2,f,c
  6028  00178C  2A36               	incf	___fladd@exp2,f,c
  6029  00178E                     l3730:
  6030  00178E  5036               	movf	___fladd@exp2,w,c
  6031  001790  1837               	xorwf	___fladd@exp1,w,c
  6032  001792  E1F7               	bnz	l3728
  6033  001794                     l835:
  6034  001794  AE35               	btfss	___fladd@sign,7,c
  6035  001796  D009               	goto	l3734
  6036  001798  1E2C               	comf	___fladd@f1,f,c
  6037  00179A  1E2D               	comf	___fladd@f1+1,f,c
  6038  00179C  1E2E               	comf	___fladd@f1+2,f,c
  6039  00179E  1E2F               	comf	___fladd@f1+3,f,c
  6040  0017A0  2A2C               	incf	___fladd@f1,f,c
  6041  0017A2  0E00               	movlw	0
  6042  0017A4  222D               	addwfc	___fladd@f1+1,f,c
  6043  0017A6  222E               	addwfc	___fladd@f1+2,f,c
  6044  0017A8  222F               	addwfc	___fladd@f1+3,f,c
  6045  0017AA                     l3734:
  6046  0017AA  BC35               	btfsc	___fladd@sign,6,c
  6047  0017AC  D825               	call	PL12	;call to abstracted procedure
  6048  0017AE  6A35               	clrf	___fladd@sign,c
  6049  0017B0  502C               	movf	___fladd@f1,w,c
  6050  0017B2  2630               	addwf	___fladd@f2,f,c
  6051  0017B4  502D               	movf	___fladd@f1+1,w,c
  6052  0017B6  2231               	addwfc	___fladd@f2+1,f,c
  6053  0017B8  502E               	movf	___fladd@f1+2,w,c
  6054  0017BA  2232               	addwfc	___fladd@f2+2,f,c
  6055  0017BC  502F               	movf	___fladd@f1+3,w,c
  6056  0017BE  2233               	addwfc	___fladd@f2+3,f,c
  6057  0017C0  AE33               	btfss	___fladd@f2+3,7,c
  6058  0017C2  D003               	goto	l3746
  6059  0017C4  D819               	call	PL12	;call to abstracted procedure
  6060  0017C6  0E01               	movlw	1
  6061  0017C8  6E35               	movwf	___fladd@sign,c
  6062  0017CA                     l3746:
  6063  0017CA  C030  F004         	movff	___fladd@f2,___flpack@arg
  6064  0017CE  C031  F005         	movff	___fladd@f2+1,___flpack@arg+1
  6065  0017D2  C032  F006         	movff	___fladd@f2+2,___flpack@arg+2
  6066  0017D6  C033  F007         	movff	___fladd@f2+3,___flpack@arg+3
  6067  0017DA  C037  F008         	movff	___fladd@exp1,___flpack@exp
  6068  0017DE  C035  F009         	movff	___fladd@sign,___flpack@sign
  6069  0017E2  EC57  F00F         	call	___flpack	;wreg free
  6070  0017E6  C004  F02C         	movff	?___flpack,?___fladd
  6071  0017EA  C005  F02D         	movff	?___flpack+1,?___fladd+1
  6072  0017EE  C006  F02E         	movff	?___flpack+2,?___fladd+2
  6073  0017F2  C007  F02F         	movff	?___flpack+3,?___fladd+3
  6074  0017F6  0012               	return		;funcret
  6075  0017F8                     __end_of___fladd:
  6076                           	opt stack 0
  6077  0017F8                     PL12:
  6078                           	opt stack 26
  6079  0017F8  1E30               	comf	___fladd@f2,f,c
  6080  0017FA  1E31               	comf	___fladd@f2+1,f,c
  6081  0017FC  1E32               	comf	___fladd@f2+2,f,c
  6082  0017FE  1E33               	comf	___fladd@f2+3,f,c
  6083  001800  2A30               	incf	___fladd@f2,f,c
  6084  001802  0E00               	movlw	0
  6085  001804  2231               	addwfc	___fladd@f2+1,f,c
  6086  001806  2232               	addwfc	___fladd@f2+2,f,c
  6087  001808  2233               	addwfc	___fladd@f2+3,f,c
  6088  00180A  0C00               	retlw	0
  6089  00180C                     __end_ofPL12:
  6090                           	opt stack 0
  6091                           tblptru	equ	0xFF8
  6092                           tblptrh	equ	0xFF7
  6093                           tblptrl	equ	0xFF6
  6094                           tablat	equ	0xFF5
  6095                           prodl	equ	0xFF3
  6096                           intcon	equ	0xFF2
  6097                           intcon2	equ	0xFF1
  6098                           postinc0	equ	0xFEE
  6099                           wreg	equ	0xFE8
  6100                           postdec1	equ	0xFE5
  6101                           fsr1l	equ	0xFE1
  6102                           indf2	equ	0xFDF
  6103                           postinc2	equ	0xFDE
  6104                           postdec2	equ	0xFDD
  6105                           fsr2h	equ	0xFDA
  6106                           fsr2l	equ	0xFD9
  6107                           status	equ	0xFD8
  6108                           
  6109 ;; *************** function ___awtofl *****************
  6110 ;; Defined at:
  6111 ;;		line 31 in file "/opt/microchip/xc8/v1.34/sources/common/awtofl.c"
  6112 ;; Parameters:    Size  Location     Type
  6113 ;;  c               2   13[COMRAM] int 
  6114 ;; Auto vars:     Size  Location     Type
  6115 ;;  f1              4    0        int 
  6116 ;;  sign            1   17[COMRAM] unsigned char 
  6117 ;; Return value:  Size  Location     Type
  6118 ;;                  4   13[COMRAM] unsigned char 
  6119 ;; Registers used:
  6120 ;;		wreg, status,2, status,0, cstack
  6121 ;; Tracked objects:
  6122 ;;		On entry : 0/0
  6123 ;;		On exit  : 0/0
  6124 ;;		Unchanged: 0/0
  6125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6126 ;;      Params:         4       0       0       0       0       0       0       0       0
  6127 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6128 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6129 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6130 ;;Total ram usage:        5 bytes
  6131 ;; Hardware stack levels used:    1
  6132 ;; Hardware stack levels required when called:    2
  6133 ;; This function calls:
  6134 ;;		___flpack
  6135 ;; This function is called by:
  6136 ;;		_format_double
  6137 ;;		_log
  6138 ;;		_exp
  6139 ;; This function uses a non-reentrant model
  6140 ;;
  6141                           
  6142                           	psect	text29
  6143  0026B4                     __ptext29:
  6144                           	opt stack 0
  6145  0026B4                     ___awtofl:
  6146                           	opt stack 24
  6147                           
  6148                           ;incstack = 0
  6149  0026B4  6A12               	clrf	___awtofl@sign,c
  6150  0026B6  AE0F               	btfss	___awtofl@c+1,7,c
  6151  0026B8  D005               	goto	l3904
  6152  0026BA  6C0E               	negf	___awtofl@c,c
  6153  0026BC  1E0F               	comf	___awtofl@c+1,f,c
  6154  0026BE  B0D8               	btfsc	status,0,c
  6155  0026C0  2A0F               	incf	___awtofl@c+1,f,c
  6156  0026C2  2A12               	incf	___awtofl@sign,f,c
  6157  0026C4                     l3904:
  6158  0026C4  C00E  F004         	movff	___awtofl@c,___flpack@arg
  6159  0026C8  C00F  F005         	movff	___awtofl@c+1,___flpack@arg+1
  6160  0026CC  6A06               	clrf	___flpack@arg+2,c
  6161  0026CE  6A07               	clrf	___flpack@arg+3,c
  6162  0026D0  0E96               	movlw	150
  6163  0026D2  6E08               	movwf	___flpack@exp,c
  6164  0026D4  C012  F009         	movff	___awtofl@sign,___flpack@sign
  6165  0026D8  EC57  F00F         	call	___flpack	;wreg free
  6166  0026DC  C004  F00E         	movff	?___flpack,?___awtofl
  6167  0026E0  C005  F00F         	movff	?___flpack+1,?___awtofl+1
  6168  0026E4  C006  F010         	movff	?___flpack+2,?___awtofl+2
  6169  0026E8  C007  F011         	movff	?___flpack+3,?___awtofl+3
  6170  0026EC  0012               	return		;funcret
  6171  0026EE                     __end_of___awtofl:
  6172                           	opt stack 0
  6173                           tblptru	equ	0xFF8
  6174                           tblptrh	equ	0xFF7
  6175                           tblptrl	equ	0xFF6
  6176                           tablat	equ	0xFF5
  6177                           prodl	equ	0xFF3
  6178                           intcon	equ	0xFF2
  6179                           intcon2	equ	0xFF1
  6180                           postinc0	equ	0xFEE
  6181                           wreg	equ	0xFE8
  6182                           postdec1	equ	0xFE5
  6183                           fsr1l	equ	0xFE1
  6184                           indf2	equ	0xFDF
  6185                           postinc2	equ	0xFDE
  6186                           postdec2	equ	0xFDD
  6187                           fsr2h	equ	0xFDA
  6188                           fsr2l	equ	0xFD9
  6189                           status	equ	0xFD8
  6190                           
  6191 ;; *************** function _lcd_init *****************
  6192 ;; Defined at:
  6193 ;;		line 484 in file "../../../lib/lcd44780.c"
  6194 ;; Parameters:    Size  Location     Type
  6195 ;;  fourbitmode     1    wreg     unsigned char 
  6196 ;; Auto vars:     Size  Location     Type
  6197 ;;  fourbitmode     1    3[COMRAM] unsigned char 
  6198 ;; Return value:  Size  Location     Type
  6199 ;;		None               void
  6200 ;; Registers used:
  6201 ;;		wreg, status,2, status,0
  6202 ;; Tracked objects:
  6203 ;;		On entry : 0/0
  6204 ;;		On exit  : F/0
  6205 ;;		Unchanged: 0/0
  6206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6207 ;;      Params:         0       0       0       0       0       0       0       0       0
  6208 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6209 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6210 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6211 ;;Total ram usage:        3 bytes
  6212 ;; Hardware stack levels used:    1
  6213 ;; Hardware stack levels required when called:    1
  6214 ;; This function calls:
  6215 ;;		Nothing
  6216 ;; This function is called by:
  6217 ;;		_main
  6218 ;; This function uses a non-reentrant model
  6219 ;;
  6220                           
  6221                           	psect	text30
  6222  0027B4                     __ptext30:
  6223                           	opt stack 0
  6224  0027B4                     _lcd_init:
  6225                           	opt stack 29
  6226                           
  6227                           ;incstack = 0
  6228                           ;lcd_init@fourbitmode stored from wreg
  6229  0027B4  6E04               	movwf	lcd_init@fourbitmode,c
  6230                           
  6231                           ;lcd44780.c: 486: LCD_ctrl = 0;
  6232  0027B6  0100               	movlb	0	; () banked
  6233  0027B8  6BD0               	clrf	_LCD_ctrl& (0+255),b
  6234                           
  6235                           ; BSR set to: 0
  6236                           ;lcd44780.c: 487: LCD_function = (fourbitmode ? 0x00 : 0x10);
  6237  0027BA  5004               	movf	lcd_init@fourbitmode,w,c
  6238  0027BC  E104               	bnz	l158
  6239                           
  6240                           ; BSR set to: 0
  6241  0027BE  6A06               	clrf	_lcd_init$134+1,c
  6242  0027C0  0E10               	movlw	16
  6243  0027C2  6E05               	movwf	_lcd_init$134,c
  6244  0027C4  D002               	goto	l160
  6245  0027C6                     l158:
  6246                           
  6247                           ; BSR set to: 0
  6248  0027C6  6A05               	clrf	_lcd_init$134,c
  6249  0027C8  6A06               	clrf	_lcd_init$134+1,c
  6250  0027CA                     l160:
  6251                           
  6252                           ; BSR set to: 0
  6253  0027CA  C005  F05A         	movff	_lcd_init$134,_LCD_function
  6254                           
  6255                           ;lcd44780.c: 489: LCD_lines = 0;
  6256  0027CE  6BD1               	clrf	_LCD_lines& (0+255),b
  6257                           
  6258                           ;lcd44780.c: 491: LCD_mode = 0;
  6259  0027D0  6BD2               	clrf	_LCD_mode& (0+255),b
  6260                           
  6261                           ; BSR set to: 0
  6262                           ;lcd44780.c: 493: TRISB &= ~0b0100;
  6263  0027D2  9493               	bcf	3987,2,c	;volatile
  6264                           
  6265                           ;lcd44780.c: 494: LATB &= ~0b0100;
  6266  0027D4  948A               	bcf	3978,2,c	;volatile
  6267                           
  6268                           ;lcd44780.c: 499: TRISB &= ~0b1000;
  6269  0027D6  9693               	bcf	3987,3,c	;volatile
  6270                           
  6271                           ;lcd44780.c: 500: LATB &= ~0b1000;
  6272  0027D8  968A               	bcf	3978,3,c	;volatile
  6273                           
  6274                           ; BSR set to: 0
  6275                           ;lcd44780.c: 502: LATB &= ~0b11110000;
  6276  0027DA  0E0F               	movlw	15
  6277  0027DC  168A               	andwf	3978,f,c	;volatile
  6278                           
  6279                           ; BSR set to: 0
  6280  0027DE  0C0F               	retlw	15	;funcret
  6281  0027E0                     __end_of_lcd_init:
  6282                           	opt stack 0
  6283                           tblptru	equ	0xFF8
  6284                           tblptrh	equ	0xFF7
  6285                           tblptrl	equ	0xFF6
  6286                           tablat	equ	0xFF5
  6287                           prodl	equ	0xFF3
  6288                           intcon	equ	0xFF2
  6289                           intcon2	equ	0xFF1
  6290                           postinc0	equ	0xFEE
  6291                           wreg	equ	0xFE8
  6292                           postdec1	equ	0xFE5
  6293                           fsr1l	equ	0xFE1
  6294                           indf2	equ	0xFDF
  6295                           postinc2	equ	0xFDE
  6296                           postdec2	equ	0xFDD
  6297                           fsr2h	equ	0xFDA
  6298                           fsr2l	equ	0xFD9
  6299                           status	equ	0xFD8
  6300                           
  6301 ;; *************** function _lcd_begin *****************
  6302 ;; Defined at:
  6303 ;;		line 411 in file "../../../lib/lcd44780.c"
  6304 ;; Parameters:    Size  Location     Type
  6305 ;;  lines           1    wreg     unsigned char 
  6306 ;;  dotsize         1    7[COMRAM] unsigned char 
  6307 ;; Auto vars:     Size  Location     Type
  6308 ;;  lines           1    9[COMRAM] unsigned char 
  6309 ;; Return value:  Size  Location     Type
  6310 ;;		None               void
  6311 ;; Registers used:
  6312 ;;		wreg, status,2, status,0, cstack
  6313 ;; Tracked objects:
  6314 ;;		On entry : F/0
  6315 ;;		On exit  : 0/0
  6316 ;;		Unchanged: 0/0
  6317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6318 ;;      Params:         1       0       0       0       0       0       0       0       0
  6319 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6320 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6321 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6322 ;;Total ram usage:        3 bytes
  6323 ;; Hardware stack levels used:    1
  6324 ;; Hardware stack levels required when called:    4
  6325 ;; This function calls:
  6326 ;;		_lcd_command
  6327 ;;		_lcd_write4bits
  6328 ;; This function is called by:
  6329 ;;		_main
  6330 ;; This function uses a non-reentrant model
  6331 ;;
  6332                           
  6333                           	psect	text31
  6334  001D16                     __ptext31:
  6335                           	opt stack 0
  6336  001D16                     _lcd_begin:
  6337                           	opt stack 26
  6338                           
  6339                           ; BSR set to: 0
  6340                           ;incstack = 0
  6341                           ;lcd_begin@lines stored from wreg
  6342  001D16  6E0A               	movwf	lcd_begin@lines,c
  6343                           
  6344                           ; BSR set to: 0
  6345                           ;lcd44780.c: 412: if(lines > 1)
  6346  001D18  0E01               	movlw	1
  6347  001D1A  640A               	cpfsgt	lcd_begin@lines,c
  6348  001D1C  D001               	goto	l3204
  6349                           
  6350                           ; BSR set to: 0
  6351                           ;lcd44780.c: 413: LCD_function |= 0x08;
  6352  001D1E  865A               	bsf	_LCD_function,3,c
  6353  001D20                     l3204:
  6354                           
  6355                           ; BSR set to: 0
  6356                           ;lcd44780.c: 416: LCD_lines = lines;
  6357  001D20  C00A  F0D1         	movff	lcd_begin@lines,_LCD_lines
  6358                           
  6359                           ; BSR set to: 0
  6360                           ;lcd44780.c: 420: if((dotsize != 0) && (lines == 1))
  6361  001D24  5008               	movf	lcd_begin@dotsize,w,c
  6362  001D26  E003               	bz	l3212
  6363                           
  6364                           ; BSR set to: 0
  6365  001D28  040A               	decf	lcd_begin@lines,w,c
  6366  001D2A  B4D8               	btfsc	status,2,c
  6367                           
  6368                           ; BSR set to: 0
  6369                           ;lcd44780.c: 421: LCD_function |= 0x04;
  6370  001D2C  845A               	bsf	_LCD_function,2,c
  6371  001D2E                     l3212:
  6372                           
  6373                           ; BSR set to: 0
  6374                           ;lcd44780.c: 423: _delay((unsigned long)((15)*(20000000/4000.0)));
  6375  001D2E  0E62               	movlw	98
  6376  001D30  6E09               	movwf	??_lcd_begin& (0+255),c
  6377  001D32  0E66               	movlw	102
  6378  001D34                     u3557:
  6379  001D34  2EE8               	decfsz	wreg,f,c
  6380  001D36  D7FE               	goto	u3557
  6381  001D38  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6382  001D3A  D7FC               	goto	u3557
  6383                           
  6384                           ;lcd44780.c: 426: LATB &= ~0b0100;
  6385  001D3C  948A               	bcf	3978,2,c	;volatile
  6386                           
  6387                           ;lcd44780.c: 427: LATB &= ~0b1000;
  6388  001D3E  968A               	bcf	3978,3,c	;volatile
  6389                           
  6390                           ;lcd44780.c: 430: if(!(LCD_function & 0x10)) {
  6391  001D40  B85A               	btfsc	_LCD_function,4,c
  6392  001D42  D01B               	goto	l3230
  6393                           
  6394                           ;lcd44780.c: 434: lcd_write4bits(0x03);
  6395  001D44  0E03               	movlw	3
  6396  001D46  EC7E  F014         	call	_lcd_write4bits
  6397                           
  6398                           ;lcd44780.c: 435: _delay((unsigned long)((5)*(20000000/4000.0)));
  6399  001D4A  0E21               	movlw	33
  6400  001D4C  6E09               	movwf	??_lcd_begin& (0+255),c
  6401  001D4E  0E76               	movlw	118
  6402  001D50                     u3567:
  6403  001D50  2EE8               	decfsz	wreg,f,c
  6404  001D52  D7FE               	goto	u3567
  6405  001D54  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6406  001D56  D7FC               	goto	u3567
  6407  001D58  D000               	nop2	
  6408                           
  6409                           ;lcd44780.c: 437: lcd_write4bits(0x03);
  6410  001D5A  0E03               	movlw	3
  6411  001D5C  EC7E  F014         	call	_lcd_write4bits
  6412                           
  6413                           ;lcd44780.c: 438: _delay((unsigned long)((150)*(20000000/4000000.0)));
  6414  001D60  0EFA               	movlw	250
  6415  001D62                     u3577:
  6416  001D62  2EE8               	decfsz	wreg,f,c
  6417  001D64  D7FE               	goto	u3577
  6418                           
  6419                           ;lcd44780.c: 440: lcd_write4bits(0x03);
  6420  001D66  0E03               	movlw	3
  6421  001D68  EC7E  F014         	call	_lcd_write4bits
  6422                           
  6423                           ;lcd44780.c: 441: _delay((unsigned long)((150)*(20000000/4000000.0)));
  6424  001D6C  0EFA               	movlw	250
  6425  001D6E                     u3587:
  6426  001D6E  2EE8               	decfsz	wreg,f,c
  6427  001D70  D7FE               	goto	u3587
  6428                           
  6429                           ;lcd44780.c: 443: lcd_write4bits(0x02);
  6430  001D72  0E02               	movlw	2
  6431  001D74  EC7E  F014         	call	_lcd_write4bits
  6432                           
  6433                           ;lcd44780.c: 444: }
  6434  001D78  D01C               	goto	l3238
  6435  001D7A                     l3230:
  6436                           
  6437                           ;lcd44780.c: 446: else {
  6438                           ;lcd44780.c: 450: lcd_command(0x20 | LCD_function);
  6439  001D7A  505A               	movf	_LCD_function,w,c
  6440  001D7C  0920               	iorlw	32
  6441  001D7E  ECF2  F014         	call	_lcd_command
  6442                           
  6443                           ;lcd44780.c: 451: _delay((unsigned long)((5)*(20000000/4000.0)));
  6444  001D82  0E21               	movlw	33
  6445  001D84  6E09               	movwf	??_lcd_begin& (0+255),c
  6446  001D86  0E76               	movlw	118
  6447  001D88                     u3597:
  6448  001D88  2EE8               	decfsz	wreg,f,c
  6449  001D8A  D7FE               	goto	u3597
  6450  001D8C  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6451  001D8E  D7FC               	goto	u3597
  6452  001D90  D000               	nop2	
  6453                           
  6454                           ;lcd44780.c: 454: lcd_command(0x20 | LCD_function);
  6455  001D92  505A               	movf	_LCD_function,w,c
  6456  001D94  0920               	iorlw	32
  6457  001D96  ECF2  F014         	call	_lcd_command
  6458                           
  6459                           ;lcd44780.c: 455: _delay((unsigned long)((5)*(20000000/4000.0)));
  6460  001D9A  0E21               	movlw	33
  6461  001D9C  6E09               	movwf	??_lcd_begin& (0+255),c
  6462  001D9E  0E76               	movlw	118
  6463  001DA0                     u3607:
  6464  001DA0  2EE8               	decfsz	wreg,f,c
  6465  001DA2  D7FE               	goto	u3607
  6466  001DA4  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6467  001DA6  D7FC               	goto	u3607
  6468  001DA8  D000               	nop2	
  6469                           
  6470                           ;lcd44780.c: 459: lcd_command(0x20 | LCD_function);
  6471  001DAA  505A               	movf	_LCD_function,w,c
  6472  001DAC  0920               	iorlw	32
  6473  001DAE  ECF2  F014         	call	_lcd_command
  6474  001DB2                     l3238:
  6475                           
  6476                           ;lcd44780.c: 460: }
  6477                           ;lcd44780.c: 463: lcd_command(0x20 | LCD_function);
  6478  001DB2  505A               	movf	_LCD_function,w,c
  6479  001DB4  0920               	iorlw	32
  6480  001DB6  ECF2  F014         	call	_lcd_command
  6481                           
  6482                           ;lcd44780.c: 466: LCD_ctrl = 0x04 | 0x00 | 0x00;
  6483  001DBA  0E04               	movlw	4
  6484  001DBC  0100               	movlb	0	; () banked
  6485  001DBE  6FD0               	movwf	_LCD_ctrl& (0+255),b
  6486                           
  6487                           ; BSR set to: 0
  6488                           ;lcd44780.c: 467: lcd_command(0x08 | LCD_ctrl);
  6489  001DC0  51D0               	movf	_LCD_ctrl& (0+255),w,b
  6490  001DC2  0908               	iorlw	8
  6491  001DC4  ECF2  F014         	call	_lcd_command
  6492                           
  6493                           ;lcd44780.c: 470: lcd_command(0x01);
  6494  001DC8  0E01               	movlw	1
  6495  001DCA  ECF2  F014         	call	_lcd_command
  6496                           
  6497                           ;lcd44780.c: 471: _delay((unsigned long)((2)*(20000000/4000.0)));
  6498  001DCE  0E0D               	movlw	13
  6499  001DD0  6E09               	movwf	??_lcd_begin& (0+255),c
  6500  001DD2  0EFC               	movlw	252
  6501  001DD4                     u3617:
  6502  001DD4  2EE8               	decfsz	wreg,f,c
  6503  001DD6  D7FE               	goto	u3617
  6504  001DD8  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6505  001DDA  D7FC               	goto	u3617
  6506                           
  6507                           ;lcd44780.c: 474: LCD_mode = 0x02 | 0x00;
  6508  001DDC  0E02               	movlw	2
  6509  001DDE  0100               	movlb	0	; () banked
  6510  001DE0  6FD2               	movwf	_LCD_mode& (0+255),b
  6511                           
  6512                           ; BSR set to: 0
  6513                           ;lcd44780.c: 476: lcd_command(0x04 | LCD_mode);
  6514  001DE2  51D2               	movf	_LCD_mode& (0+255),w,b
  6515  001DE4  0904               	iorlw	4
  6516  001DE6  EFF2  F014         	goto	_lcd_command
  6517  001DEA                     __end_of_lcd_begin:
  6518                           	opt stack 0
  6519                           tblptru	equ	0xFF8
  6520                           tblptrh	equ	0xFF7
  6521                           tblptrl	equ	0xFF6
  6522                           tablat	equ	0xFF5
  6523                           prodl	equ	0xFF3
  6524                           intcon	equ	0xFF2
  6525                           intcon2	equ	0xFF1
  6526                           postinc0	equ	0xFEE
  6527                           wreg	equ	0xFE8
  6528                           postdec1	equ	0xFE5
  6529                           fsr1l	equ	0xFE1
  6530                           indf2	equ	0xFDF
  6531                           postinc2	equ	0xFDE
  6532                           postdec2	equ	0xFDD
  6533                           fsr2h	equ	0xFDA
  6534                           fsr2l	equ	0xFD9
  6535                           status	equ	0xFD8
  6536                           
  6537 ;; *************** function _calibrate *****************
  6538 ;; Defined at:
  6539 ;;		line 25 in file "../../../src/measure.c"
  6540 ;; Parameters:    Size  Location     Type
  6541 ;;		None
  6542 ;; Auto vars:     Size  Location     Type
  6543 ;;  i               1   62[COMRAM] unsigned char 
  6544 ;; Return value:  Size  Location     Type
  6545 ;;		None               void
  6546 ;; Registers used:
  6547 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6548 ;; Tracked objects:
  6549 ;;		On entry : 0/0
  6550 ;;		On exit  : 0/0
  6551 ;;		Unchanged: 0/0
  6552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6553 ;;      Params:         0       0       0       0       0       0       0       0       0
  6554 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6555 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6556 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6557 ;;Total ram usage:        1 bytes
  6558 ;; Hardware stack levels used:    1
  6559 ;; Hardware stack levels required when called:    6
  6560 ;; This function calls:
  6561 ;;		___lwtofl
  6562 ;;		_delay10ms
  6563 ;;		_lcd_clear
  6564 ;;		_lcd_gotoxy
  6565 ;;		_lcd_send
  6566 ;;		_measure_freq
  6567 ;;		_put_str
  6568 ;;		_ser_puts
  6569 ;; This function is called by:
  6570 ;;		_main
  6571 ;; This function uses a non-reentrant model
  6572 ;;
  6573                           
  6574                           	psect	text32
  6575  001C34                     __ptext32:
  6576                           	opt stack 0
  6577  001C34                     _calibrate:
  6578                           	opt stack 24
  6579                           
  6580                           ;measure.c: 26: uint8_t i;
  6581                           ;measure.c: 29: lcd_clear();
  6582                           
  6583                           ;incstack = 0
  6584  001C34  ECD8  F014         	call	_lcd_clear	;wreg free
  6585                           
  6586                           ;measure.c: 31: lcd_gotoxy(0, 0);
  6587  001C38  0E00               	movlw	0
  6588  001C3A  6A08               	clrf	lcd_gotoxy@row,c
  6589  001C3C  EC77  F013         	call	_lcd_gotoxy
  6590                           
  6591                           ;measure.c: 32: put_str("Calibrating");
  6592  001C40  0E89               	movlw	STR_1& (0+255)
  6593  001C42  EC05  F014         	call	_put_str
  6594                           
  6595                           ;measure.c: 34: lcd_gotoxy(0, 1);
  6596  001C46  0E01               	movlw	1
  6597  001C48  6E08               	movwf	lcd_gotoxy@row,c
  6598  001C4A  0E00               	movlw	0
  6599  001C4C  EC77  F013         	call	_lcd_gotoxy
  6600                           
  6601                           ;measure.c: 35: ser_puts("\r\n");
  6602  001C50  0EF8               	movlw	STR_2& (0+255)
  6603  001C52  EC9F  F014         	call	_ser_puts
  6604                           
  6605                           ;measure.c: 36: put_str("please wait...");
  6606  001C56  0E6D               	movlw	STR_3& (0+255)
  6607  001C58  EC05  F014         	call	_put_str
  6608                           
  6609                           ;measure.c: 39: LATC &= ~(1 << 5);
  6610  001C5C  9A8B               	bcf	3979,5,c	;volatile
  6611                           
  6612                           ;measure.c: 41: F1 = (double)measure_freq();
  6613  001C5E  EC24  F00D         	call	_measure_freq	;wreg free
  6614  001C62  C036  F03B         	movff	?_measure_freq,___lwtofl@c
  6615  001C66  C037  F03C         	movff	?_measure_freq+1,___lwtofl@c+1
  6616  001C6A  EC1A  F014         	call	___lwtofl	;wreg free
  6617  001C6E  C03B  F0E7         	movff	?___lwtofl,_F1
  6618  001C72  C03C  F0E8         	movff	?___lwtofl+1,_F1+1
  6619  001C76  C03D  F0E9         	movff	?___lwtofl+2,_F1+2
  6620  001C7A  C03E  F0EA         	movff	?___lwtofl+3,_F1+3
  6621                           
  6622                           ;measure.c: 42: delay10ms(50);
  6623  001C7E  0E32               	movlw	50
  6624  001C80  ECFB  F014         	call	_delay10ms
  6625                           
  6626                           ;measure.c: 44: F1 = (double)measure_freq();
  6627  001C84  EC24  F00D         	call	_measure_freq	;wreg free
  6628  001C88  C036  F03B         	movff	?_measure_freq,___lwtofl@c
  6629  001C8C  C037  F03C         	movff	?_measure_freq+1,___lwtofl@c+1
  6630  001C90  EC1A  F014         	call	___lwtofl	;wreg free
  6631  001C94  C03B  F0E7         	movff	?___lwtofl,_F1
  6632  001C98  C03C  F0E8         	movff	?___lwtofl+1,_F1+1
  6633  001C9C  C03D  F0E9         	movff	?___lwtofl+2,_F1+2
  6634  001CA0  C03E  F0EA         	movff	?___lwtofl+3,_F1+3
  6635                           
  6636                           ;measure.c: 45: LATC |= (1 << 5);
  6637  001CA4  8A8B               	bsf	3979,5,c	;volatile
  6638                           
  6639                           ;measure.c: 47: F2 = (double)measure_freq();
  6640  001CA6  EC24  F00D         	call	_measure_freq	;wreg free
  6641  001CAA  C036  F03B         	movff	?_measure_freq,___lwtofl@c
  6642  001CAE  C037  F03C         	movff	?_measure_freq+1,___lwtofl@c+1
  6643  001CB2  EC1A  F014         	call	___lwtofl	;wreg free
  6644  001CB6  C03B  F0BA         	movff	?___lwtofl,_F2
  6645  001CBA  C03C  F0BB         	movff	?___lwtofl+1,_F2+1
  6646  001CBE  C03D  F0BC         	movff	?___lwtofl+2,_F2+2
  6647  001CC2  C03E  F0BD         	movff	?___lwtofl+3,_F2+3
  6648                           
  6649                           ;measure.c: 48: delay10ms(50);
  6650  001CC6  0E32               	movlw	50
  6651  001CC8  ECFB  F014         	call	_delay10ms
  6652                           
  6653                           ;measure.c: 50: F2 = (double)measure_freq();
  6654  001CCC  EC24  F00D         	call	_measure_freq	;wreg free
  6655  001CD0  C036  F03B         	movff	?_measure_freq,___lwtofl@c
  6656  001CD4  C037  F03C         	movff	?_measure_freq+1,___lwtofl@c+1
  6657  001CD8  EC1A  F014         	call	___lwtofl	;wreg free
  6658  001CDC  C03B  F0BA         	movff	?___lwtofl,_F2
  6659  001CE0  C03C  F0BB         	movff	?___lwtofl+1,_F2+1
  6660  001CE4  C03D  F0BC         	movff	?___lwtofl+2,_F2+2
  6661  001CE8  C03E  F0BD         	movff	?___lwtofl+3,_F2+3
  6662                           
  6663                           ;measure.c: 51: LATC &= ~(1 << 5);
  6664  001CEC  9A8B               	bcf	3979,5,c	;volatile
  6665                           
  6666                           ;measure.c: 54: lcd_gotoxy(11, 0);
  6667  001CEE  6A08               	clrf	lcd_gotoxy@row,c
  6668  001CF0  0E0B               	movlw	11
  6669  001CF2  EC77  F013         	call	_lcd_gotoxy
  6670                           
  6671                           ;measure.c: 55: for(i = 0; i < 6; i++) {
  6672  001CF6  6A3F               	clrf	calibrate@i,c
  6673  001CF8                     l4078:
  6674                           
  6675                           ;measure.c: 56: lcd_send(('='), 1);
  6676  001CF8  0E01               	movlw	1
  6677  001CFA  6E05               	movwf	lcd_send@mode,c
  6678  001CFC  0E3D               	movlw	61
  6679  001CFE  ECCB  F014         	call	_lcd_send
  6680                           
  6681                           ;measure.c: 58: delay10ms(28);
  6682  001D02  0E1C               	movlw	28
  6683  001D04  ECFB  F014         	call	_delay10ms
  6684  001D08  2A3F               	incf	calibrate@i,f,c
  6685  001D0A  0E05               	movlw	5
  6686  001D0C  643F               	cpfsgt	calibrate@i,c
  6687  001D0E  D7F4               	goto	l4078
  6688                           
  6689                           ;measure.c: 59: }
  6690                           ;measure.c: 61: ser_puts("\r\n");
  6691  001D10  0EF8               	movlw	STR_2& (0+255)
  6692  001D12  EF9F  F014         	goto	_ser_puts
  6693  001D16                     __end_of_calibrate:
  6694                           	opt stack 0
  6695                           tblptru	equ	0xFF8
  6696                           tblptrh	equ	0xFF7
  6697                           tblptrl	equ	0xFF6
  6698                           tablat	equ	0xFF5
  6699                           prodl	equ	0xFF3
  6700                           intcon	equ	0xFF2
  6701                           intcon2	equ	0xFF1
  6702                           postinc0	equ	0xFEE
  6703                           wreg	equ	0xFE8
  6704                           postdec1	equ	0xFE5
  6705                           fsr1l	equ	0xFE1
  6706                           indf2	equ	0xFDF
  6707                           postinc2	equ	0xFDE
  6708                           postdec2	equ	0xFDD
  6709                           fsr2h	equ	0xFDA
  6710                           fsr2l	equ	0xFD9
  6711                           status	equ	0xFD8
  6712                           
  6713 ;; *************** function _put_str *****************
  6714 ;; Defined at:
  6715 ;;		line 221 in file "../../../src/print.c"
  6716 ;; Parameters:    Size  Location     Type
  6717 ;;  s               1    wreg     PTR const unsigned char 
  6718 ;;		 -> STR_15(13), STR_6(10), STR_3(15), STR_1(12), 
  6719 ;; Auto vars:     Size  Location     Type
  6720 ;;  s               1   10[COMRAM] PTR const unsigned char 
  6721 ;;		 -> STR_15(13), STR_6(10), STR_3(15), STR_1(12), 
  6722 ;;  i               2    8[COMRAM] int 
  6723 ;; Return value:  Size  Location     Type
  6724 ;;		None               void
  6725 ;; Registers used:
  6726 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6727 ;; Tracked objects:
  6728 ;;		On entry : 0/0
  6729 ;;		On exit  : 0/0
  6730 ;;		Unchanged: 0/0
  6731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6732 ;;      Params:         0       0       0       0       0       0       0       0       0
  6733 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6734 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6735 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6736 ;;Total ram usage:        4 bytes
  6737 ;; Hardware stack levels used:    1
  6738 ;; Hardware stack levels required when called:    4
  6739 ;; This function calls:
  6740 ;;		_output_putch
  6741 ;; This function is called by:
  6742 ;;		_calibrate
  6743 ;;		_measure_capacitance
  6744 ;;		_measure_inductance
  6745 ;; This function uses a non-reentrant model
  6746 ;;
  6747                           
  6748                           	psect	text33
  6749  00280A                     __ptext33:
  6750                           	opt stack 0
  6751  00280A                     _put_str:
  6752                           	opt stack 25
  6753                           
  6754                           ;incstack = 0
  6755                           ;put_str@s stored from wreg
  6756  00280A  6E0B               	movwf	put_str@s,c
  6757                           
  6758                           ;print.c: 222: int i;
  6759                           ;print.c: 224: for(i = 0; s[i]; i++) {
  6760  00280C  6A09               	clrf	put_str@i,c
  6761  00280E  6A0A               	clrf	put_str@i+1,c
  6762  002810  D005               	goto	l3132
  6763  002812                     l3128:
  6764                           
  6765                           ;print.c: 225: output_putch(s[i]);
  6766  002812  D808               	call	PL30	;call to abstracted procedure
  6767  002814  ECE3  F014         	call	_output_putch
  6768  002818  4A09               	infsnz	put_str@i,f,c
  6769  00281A  2A0A               	incf	put_str@i+1,f,c
  6770  00281C                     l3132:
  6771  00281C  D803               	call	PL30	;call to abstracted procedure
  6772  00281E  B4D8               	btfsc	status,2,c
  6773  002820  0012               	return		;funcret
  6774  002822  D7F7               	goto	l3128
  6775  002824                     __end_of_put_str:
  6776                           	opt stack 0
  6777  002824                     PL30:
  6778                           	opt stack 25
  6779  002824  500B               	movf	put_str@s,w,c
  6780  002826  2409               	addwf	put_str@i,w,c
  6781  002828  6E08               	movwf	??_put_str& (0+255),c
  6782  00282A  C008  FFF6         	movff	??_put_str,tblptrl
  6783  00282E                     	if	0	;There is only one active tblptr byte
  6784  00282E                     	endif
  6785  00282E                     	if	0	;tblptru may be non-zero
  6786  00282E                     	endif
  6787  00282E                     	if	0	;tblptru may be non-zero
  6788  00282E                     	endif
  6789  00282E  0008               	tblrd		*
  6790  002830  50F5               	movf	tablat,w,c
  6791  002832  0012               	return	
  6792  002834                     __end_ofPL30:
  6793                           	opt stack 0
  6794                           tblptru	equ	0xFF8
  6795                           tblptrh	equ	0xFF7
  6796                           tblptrl	equ	0xFF6
  6797                           tablat	equ	0xFF5
  6798                           prodl	equ	0xFF3
  6799                           intcon	equ	0xFF2
  6800                           intcon2	equ	0xFF1
  6801                           postinc0	equ	0xFEE
  6802                           wreg	equ	0xFE8
  6803                           postdec1	equ	0xFE5
  6804                           fsr1l	equ	0xFE1
  6805                           indf2	equ	0xFDF
  6806                           postinc2	equ	0xFDE
  6807                           postdec2	equ	0xFDD
  6808                           fsr2h	equ	0xFDA
  6809                           fsr2l	equ	0xFD9
  6810                           status	equ	0xFD8
  6811                           
  6812 ;; *************** function _output_putch *****************
  6813 ;; Defined at:
  6814 ;;		line 208 in file "../../../src/print.c"
  6815 ;; Parameters:    Size  Location     Type
  6816 ;;  c               1    wreg     unsigned char 
  6817 ;; Auto vars:     Size  Location     Type
  6818 ;;  c               1    6[COMRAM] unsigned char 
  6819 ;; Return value:  Size  Location     Type
  6820 ;;		None               void
  6821 ;; Registers used:
  6822 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6823 ;; Tracked objects:
  6824 ;;		On entry : 0/0
  6825 ;;		On exit  : 0/0
  6826 ;;		Unchanged: 0/0
  6827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6828 ;;      Params:         0       0       0       0       0       0       0       0       0
  6829 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6830 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6831 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6832 ;;Total ram usage:        1 bytes
  6833 ;; Hardware stack levels used:    1
  6834 ;; Hardware stack levels required when called:    3
  6835 ;; This function calls:
  6836 ;;		_lcd_send
  6837 ;;		_ser_putch
  6838 ;; This function is called by:
  6839 ;;		_put_str
  6840 ;; This function uses a non-reentrant model
  6841 ;;
  6842                           
  6843                           	psect	text34
  6844  0029C6                     __ptext34:
  6845                           	opt stack 0
  6846  0029C6                     _output_putch:
  6847                           	opt stack 25
  6848                           
  6849                           ;incstack = 0
  6850                           ;output_putch@c stored from wreg
  6851  0029C6  6E07               	movwf	output_putch@c,c
  6852                           
  6853                           ;print.c: 210: lcd_send((c), 1);
  6854  0029C8  0E01               	movlw	1
  6855  0029CA  6E05               	movwf	lcd_send@mode,c
  6856  0029CC  5007               	movf	output_putch@c,w,c
  6857  0029CE  ECCB  F014         	call	_lcd_send
  6858                           
  6859                           ;print.c: 213: ser_putch(c);
  6860  0029D2  5007               	movf	output_putch@c,w,c
  6861  0029D4  EF57  F014         	goto	_ser_putch
  6862  0029D8                     __end_of_output_putch:
  6863                           	opt stack 0
  6864                           tblptru	equ	0xFF8
  6865                           tblptrh	equ	0xFF7
  6866                           tblptrl	equ	0xFF6
  6867                           tablat	equ	0xFF5
  6868                           prodl	equ	0xFF3
  6869                           intcon	equ	0xFF2
  6870                           intcon2	equ	0xFF1
  6871                           postinc0	equ	0xFEE
  6872                           wreg	equ	0xFE8
  6873                           postdec1	equ	0xFE5
  6874                           fsr1l	equ	0xFE1
  6875                           indf2	equ	0xFDF
  6876                           postinc2	equ	0xFDE
  6877                           postdec2	equ	0xFDD
  6878                           fsr2h	equ	0xFDA
  6879                           fsr2l	equ	0xFD9
  6880                           status	equ	0xFD8
  6881                           
  6882 ;; *************** function _measure_freq *****************
  6883 ;; Defined at:
  6884 ;;		line 68 in file "../../../src/measure.c"
  6885 ;; Parameters:    Size  Location     Type
  6886 ;;		None
  6887 ;; Auto vars:     Size  Location     Type
  6888 ;;  count           2   56[COMRAM] unsigned int 
  6889 ;; Return value:  Size  Location     Type
  6890 ;;                  2   53[COMRAM] unsigned short 
  6891 ;; Registers used:
  6892 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6893 ;; Tracked objects:
  6894 ;;		On entry : 0/0
  6895 ;;		On exit  : 0/0
  6896 ;;		Unchanged: 0/0
  6897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6898 ;;      Params:         2       0       0       0       0       0       0       0       0
  6899 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6900 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6901 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6902 ;;Total ram usage:        5 bytes
  6903 ;; Hardware stack levels used:    1
  6904 ;; Hardware stack levels required when called:    5
  6905 ;; This function calls:
  6906 ;;		_buffer_init
  6907 ;;		_buffer_puts
  6908 ;;		_format_number
  6909 ;;		_lcd_gotoxy
  6910 ;;		_print_buffer
  6911 ;;		_timer0_read_ps
  6912 ;; This function is called by:
  6913 ;;		_calibrate
  6914 ;;		_measure_capacitance
  6915 ;;		_measure_inductance
  6916 ;; This function uses a non-reentrant model
  6917 ;;
  6918                           
  6919                           	psect	text35
  6920  001A48                     __ptext35:
  6921                           	opt stack 0
  6922  001A48                     _measure_freq:
  6923                           	opt stack 24
  6924                           
  6925                           ;measure.c: 69: uint16_t count;
  6926                           ;measure.c: 71: INTCON &= ~0b100;
  6927                           
  6928                           ;incstack = 0
  6929  001A48  94F2               	bcf	intcon,2,c	;volatile
  6930                           
  6931                           ;measure.c: 75: TRISA &= ~0b00010000;
  6932  001A4A  9892               	bcf	3986,4,c	;volatile
  6933                           
  6934                           ;measure.c: 77: _delay((unsigned long)((20)*(20000000/4000.0)));
  6935  001A4C  0E82               	movlw	130
  6936  001A4E  6E38               	movwf	??_measure_freq& (0+255),c
  6937  001A50  0EDE               	movlw	222
  6938  001A52                     u3627:
  6939  001A52  2EE8               	decfsz	wreg,f,c
  6940  001A54  D7FE               	goto	u3627
  6941  001A56  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6942  001A58  D7FC               	goto	u3627
  6943                           
  6944                           ;measure.c: 80: TMR0 = 0x00;
  6945  001A5A  6AD6               	clrf	4054,c	;volatile
  6946  001A5C  6AD7               	clrf	4055,c	;volatile
  6947                           
  6948                           ;measure.c: 85: _delay((unsigned long)((10)*(20000000/4000.0)));
  6949  001A5E  0E41               	movlw	65
  6950  001A60  6E38               	movwf	??_measure_freq& (0+255),c
  6951  001A62  0EEE               	movlw	238
  6952  001A64                     u3637:
  6953  001A64  2EE8               	decfsz	wreg,f,c
  6954  001A66  D7FE               	goto	u3637
  6955  001A68  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6956  001A6A  D7FC               	goto	u3637
  6957  001A6C  D000               	nop2	
  6958                           
  6959                           ;measure.c: 86: _delay((unsigned long)((10)*(20000000/4000.0)));
  6960  001A6E  0E41               	movlw	65
  6961  001A70  6E38               	movwf	??_measure_freq& (0+255),c
  6962  001A72  0EEE               	movlw	238
  6963  001A74                     u3647:
  6964  001A74  2EE8               	decfsz	wreg,f,c
  6965  001A76  D7FE               	goto	u3647
  6966  001A78  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6967  001A7A  D7FC               	goto	u3647
  6968  001A7C  D000               	nop2	
  6969                           
  6970                           ;measure.c: 87: _delay((unsigned long)((10)*(20000000/4000.0)));
  6971  001A7E  0E41               	movlw	65
  6972  001A80  6E38               	movwf	??_measure_freq& (0+255),c
  6973  001A82  0EEE               	movlw	238
  6974  001A84                     u3657:
  6975  001A84  2EE8               	decfsz	wreg,f,c
  6976  001A86  D7FE               	goto	u3657
  6977  001A88  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6978  001A8A  D7FC               	goto	u3657
  6979  001A8C  D000               	nop2	
  6980                           
  6981                           ;measure.c: 88: _delay((unsigned long)((10)*(20000000/4000.0)));
  6982  001A8E  0E41               	movlw	65
  6983  001A90  6E38               	movwf	??_measure_freq& (0+255),c
  6984  001A92  0EEE               	movlw	238
  6985  001A94                     u3667:
  6986  001A94  2EE8               	decfsz	wreg,f,c
  6987  001A96  D7FE               	goto	u3667
  6988  001A98  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6989  001A9A  D7FC               	goto	u3667
  6990  001A9C  D000               	nop2	
  6991                           
  6992                           ;measure.c: 89: _delay((unsigned long)((10)*(20000000/4000.0)));
  6993  001A9E  0E41               	movlw	65
  6994  001AA0  6E38               	movwf	??_measure_freq& (0+255),c
  6995  001AA2  0EEE               	movlw	238
  6996  001AA4                     u3677:
  6997  001AA4  2EE8               	decfsz	wreg,f,c
  6998  001AA6  D7FE               	goto	u3677
  6999  001AA8  2E38               	decfsz	??_measure_freq& (0+255),f,c
  7000  001AAA  D7FC               	goto	u3677
  7001  001AAC  D000               	nop2	
  7002                           
  7003                           ;measure.c: 90: _delay((unsigned long)((10)*(20000000/4000.0)));
  7004  001AAE  0E41               	movlw	65
  7005  001AB0  6E38               	movwf	??_measure_freq& (0+255),c
  7006  001AB2  0EEE               	movlw	238
  7007  001AB4                     u3687:
  7008  001AB4  2EE8               	decfsz	wreg,f,c
  7009  001AB6  D7FE               	goto	u3687
  7010  001AB8  2E38               	decfsz	??_measure_freq& (0+255),f,c
  7011  001ABA  D7FC               	goto	u3687
  7012  001ABC  D000               	nop2	
  7013                           
  7014                           ;measure.c: 91: _delay((unsigned long)((10)*(20000000/4000.0)));
  7015  001ABE  0E41               	movlw	65
  7016  001AC0  6E38               	movwf	??_measure_freq& (0+255),c
  7017  001AC2  0EEE               	movlw	238
  7018  001AC4                     u3697:
  7019  001AC4  2EE8               	decfsz	wreg,f,c
  7020  001AC6  D7FE               	goto	u3697
  7021  001AC8  2E38               	decfsz	??_measure_freq& (0+255),f,c
  7022  001ACA  D7FC               	goto	u3697
  7023  001ACC  D000               	nop2	
  7024                           
  7025                           ;measure.c: 92: _delay((unsigned long)((10)*(20000000/4000.0)));
  7026  001ACE  0E41               	movlw	65
  7027  001AD0  6E38               	movwf	??_measure_freq& (0+255),c
  7028  001AD2  0EEE               	movlw	238
  7029  001AD4                     u3707:
  7030  001AD4  2EE8               	decfsz	wreg,f,c
  7031  001AD6  D7FE               	goto	u3707
  7032  001AD8  2E38               	decfsz	??_measure_freq& (0+255),f,c
  7033  001ADA  D7FC               	goto	u3707
  7034  001ADC  D000               	nop2	
  7035                           
  7036                           ;measure.c: 93: _delay((unsigned long)((10)*(20000000/4000.0)));
  7037  001ADE  0E41               	movlw	65
  7038  001AE0  6E38               	movwf	??_measure_freq& (0+255),c
  7039  001AE2  0EEE               	movlw	238
  7040  001AE4                     u3717:
  7041  001AE4  2EE8               	decfsz	wreg,f,c
  7042  001AE6  D7FE               	goto	u3717
  7043  001AE8  2E38               	decfsz	??_measure_freq& (0+255),f,c
  7044  001AEA  D7FC               	goto	u3717
  7045  001AEC  D000               	nop2	
  7046                           
  7047                           ;measure.c: 94: _delay((unsigned long)((10)*(20000000/4000.0)));
  7048  001AEE  0E41               	movlw	65
  7049  001AF0  6E38               	movwf	??_measure_freq& (0+255),c
  7050  001AF2  0EEE               	movlw	238
  7051  001AF4                     u3727:
  7052  001AF4  2EE8               	decfsz	wreg,f,c
  7053  001AF6  D7FE               	goto	u3727
  7054  001AF8  2E38               	decfsz	??_measure_freq& (0+255),f,c
  7055  001AFA  D7FC               	goto	u3727
  7056  001AFC  D000               	nop2	
  7057                           
  7058                           ;measure.c: 99: TRISA |= 0b00010000;
  7059  001AFE  8892               	bsf	3986,4,c	;volatile
  7060                           
  7061                           ;measure.c: 102: count = timer0_read_ps();
  7062  001B00  EC86  F012         	call	_timer0_read_ps	;wreg free
  7063  001B04  C004  F039         	movff	?_timer0_read_ps,measure_freq@count
  7064  001B08  C005  F03A         	movff	?_timer0_read_ps+1,measure_freq@count+1
  7065                           
  7066                           ;measure.c: 105: lcd_gotoxy(0, 1);
  7067  001B0C  0E01               	movlw	1
  7068  001B0E  6E08               	movwf	lcd_gotoxy@row,c
  7069  001B10  0E00               	movlw	0
  7070  001B12  EC77  F013         	call	_lcd_gotoxy
  7071                           
  7072                           ;measure.c: 107: buffer_init();
  7073  001B16  ECEC  F014         	call	_buffer_init	;wreg free
  7074                           
  7075                           ; BSR set to: 0
  7076                           ;measure.c: 108: buffer_puts("Freq=");
  7077  001B1A  0ECA               	movlw	STR_5& (0+255)
  7078  001B1C  ECAE  F014         	call	_buffer_puts
  7079                           
  7080                           ; BSR set to: 0
  7081                           ;measure.c: 109: format_number(count, 10, 5);
  7082  001B20  C039  F00B         	movff	measure_freq@count,format_number@n
  7083  001B24  C03A  F00C         	movff	measure_freq@count+1,format_number@n+1
  7084  001B28  0E0A               	movlw	10
  7085  001B2A  6E0D               	movwf	format_number@base,c
  7086  001B2C  0E05               	movlw	5
  7087  001B2E  6E0E               	movwf	format_number@pad,c
  7088  001B30  EC65  F010         	call	_format_number	;wreg free
  7089                           
  7090                           ;measure.c: 110: print_buffer();
  7091  001B34  EC43  F014         	call	_print_buffer	;wreg free
  7092                           
  7093                           ;measure.c: 112: return count;
  7094  001B38  C039  F036         	movff	measure_freq@count,?_measure_freq
  7095  001B3C  C03A  F037         	movff	measure_freq@count+1,?_measure_freq+1
  7096  001B40  0012               	return		;funcret
  7097  001B42                     __end_of_measure_freq:
  7098                           	opt stack 0
  7099                           tblptru	equ	0xFF8
  7100                           tblptrh	equ	0xFF7
  7101                           tblptrl	equ	0xFF6
  7102                           tablat	equ	0xFF5
  7103                           prodl	equ	0xFF3
  7104                           intcon	equ	0xFF2
  7105                           intcon2	equ	0xFF1
  7106                           postinc0	equ	0xFEE
  7107                           wreg	equ	0xFE8
  7108                           postdec1	equ	0xFE5
  7109                           fsr1l	equ	0xFE1
  7110                           indf2	equ	0xFDF
  7111                           postinc2	equ	0xFDE
  7112                           postdec2	equ	0xFDD
  7113                           fsr2h	equ	0xFDA
  7114                           fsr2l	equ	0xFD9
  7115                           status	equ	0xFD8
  7116                           
  7117 ;; *************** function _timer0_read_ps *****************
  7118 ;; Defined at:
  7119 ;;		line 64 in file "../../../lib/timer.c"
  7120 ;; Parameters:    Size  Location     Type
  7121 ;;		None
  7122 ;; Auto vars:     Size  Location     Type
  7123 ;;  count           2    8[COMRAM] unsigned int 
  7124 ;;  prev            1    7[COMRAM] unsigned char 
  7125 ;; Return value:  Size  Location     Type
  7126 ;;                  2    3[COMRAM] unsigned short 
  7127 ;; Registers used:
  7128 ;;		wreg, status,2, status,0
  7129 ;; Tracked objects:
  7130 ;;		On entry : 0/0
  7131 ;;		On exit  : 0/0
  7132 ;;		Unchanged: 0/0
  7133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7134 ;;      Params:         2       0       0       0       0       0       0       0       0
  7135 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7136 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7137 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7138 ;;Total ram usage:        7 bytes
  7139 ;; Hardware stack levels used:    1
  7140 ;; Hardware stack levels required when called:    1
  7141 ;; This function calls:
  7142 ;;		Nothing
  7143 ;; This function is called by:
  7144 ;;		_measure_freq
  7145 ;; This function uses a non-reentrant model
  7146 ;;
  7147                           
  7148                           	psect	text36
  7149  00250C                     __ptext36:
  7150                           	opt stack 0
  7151  00250C                     _timer0_read_ps:
  7152                           	opt stack 27
  7153                           
  7154                           ;timer.c: 65: uint8_t prev = TMR0;
  7155                           
  7156                           ;incstack = 0
  7157  00250C  CFD6 F008          	movff	4054,timer0_read_ps@prev	;volatile
  7158                           
  7159                           ;timer.c: 66: uint16_t count = 0;
  7160  002510  6A09               	clrf	timer0_read_ps@count,c
  7161  002512  6A0A               	clrf	timer0_read_ps@count+1,c
  7162                           
  7163                           ;timer.c: 68: T0CON |= 0x20;
  7164  002514  8AD5               	bsf	4053,5,c	;volatile
  7165  002516                     l210:
  7166                           
  7167                           ;timer.c: 72: T0CON |= 0x10;
  7168  002516  88D5               	bsf	4053,4,c	;volatile
  7169                           
  7170                           ;timer.c: 74: __nop();
  7171  002518  F000               	nop	
  7172                           
  7173                           ;timer.c: 75: __nop();
  7174  00251A  F000               	nop	
  7175                           
  7176                           ;timer.c: 77: T0CON &= ~0x10;
  7177  00251C  98D5               	bcf	4053,4,c	;volatile
  7178                           
  7179                           ;timer.c: 79: __nop();
  7180  00251E  F000               	nop	
  7181                           
  7182                           ;timer.c: 80: __nop();
  7183  002520  F000               	nop	
  7184                           
  7185                           ;timer.c: 82: ++count;
  7186  002522  4A09               	infsnz	timer0_read_ps@count,f,c
  7187  002524  2A0A               	incf	timer0_read_ps@count+1,f,c
  7188                           
  7189                           ;timer.c: 85: } while(prev == TMR0 && count <= 255);
  7190  002526  5008               	movf	timer0_read_ps@prev,w,c
  7191  002528  18D6               	xorwf	4054,w,c	;volatile
  7192  00252A  10D7               	iorwf	4055,w,c	;volatile
  7193  00252C  E102               	bnz	l3078
  7194  00252E  040A               	decf	timer0_read_ps@count+1,w,c
  7195  002530  E3F2               	bnc	l210
  7196  002532                     l3078:
  7197                           
  7198                           ;timer.c: 87: count = ((prev << 8) + (256 - count));
  7199  002532  5008               	movf	timer0_read_ps@prev,w,c
  7200  002534  6E07               	movwf	(??_timer0_read_ps+1)& (0+255),c
  7201  002536  6A06               	clrf	??_timer0_read_ps& (0+255),c
  7202  002538  5009               	movf	timer0_read_ps@count,w,c
  7203  00253A  5E06               	subwf	??_timer0_read_ps,f,c
  7204  00253C  500A               	movf	timer0_read_ps@count+1,w,c
  7205  00253E  5A07               	subwfb	??_timer0_read_ps+1,f,c
  7206  002540  0E00               	movlw	0
  7207  002542  2406               	addwf	??_timer0_read_ps,w,c
  7208  002544  6E09               	movwf	timer0_read_ps@count,c
  7209  002546  0E01               	movlw	1
  7210  002548  2007               	addwfc	??_timer0_read_ps+1,w,c
  7211  00254A  6E0A               	movwf	timer0_read_ps@count+1,c
  7212                           
  7213                           ;timer.c: 88: return count;
  7214  00254C  C009  F004         	movff	timer0_read_ps@count,?_timer0_read_ps
  7215  002550  C00A  F005         	movff	timer0_read_ps@count+1,?_timer0_read_ps+1
  7216  002554  0012               	return		;funcret
  7217  002556                     __end_of_timer0_read_ps:
  7218                           	opt stack 0
  7219                           tblptru	equ	0xFF8
  7220                           tblptrh	equ	0xFF7
  7221                           tblptrl	equ	0xFF6
  7222                           tablat	equ	0xFF5
  7223                           prodl	equ	0xFF3
  7224                           intcon	equ	0xFF2
  7225                           intcon2	equ	0xFF1
  7226                           postinc0	equ	0xFEE
  7227                           wreg	equ	0xFE8
  7228                           postdec1	equ	0xFE5
  7229                           fsr1l	equ	0xFE1
  7230                           indf2	equ	0xFDF
  7231                           postinc2	equ	0xFDE
  7232                           postdec2	equ	0xFDD
  7233                           fsr2h	equ	0xFDA
  7234                           fsr2l	equ	0xFD9
  7235                           status	equ	0xFD8
  7236                           
  7237 ;; *************** function _print_buffer *****************
  7238 ;; Defined at:
  7239 ;;		line 230 in file "../../../src/print.c"
  7240 ;; Parameters:    Size  Location     Type
  7241 ;;		None
  7242 ;; Auto vars:     Size  Location     Type
  7243 ;;  i               1    6[COMRAM] unsigned char 
  7244 ;; Return value:  Size  Location     Type
  7245 ;;		None               void
  7246 ;; Registers used:
  7247 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7248 ;; Tracked objects:
  7249 ;;		On entry : 0/0
  7250 ;;		On exit  : 0/0
  7251 ;;		Unchanged: 0/0
  7252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7253 ;;      Params:         0       0       0       0       0       0       0       0       0
  7254 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7255 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7256 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7257 ;;Total ram usage:        2 bytes
  7258 ;; Hardware stack levels used:    1
  7259 ;; Hardware stack levels required when called:    3
  7260 ;; This function calls:
  7261 ;;		_ser_putch
  7262 ;;		_ser_puts
  7263 ;; This function is called by:
  7264 ;;		_measure_freq
  7265 ;; This function uses a non-reentrant model
  7266 ;;
  7267                           
  7268                           	psect	text37
  7269  002886                     __ptext37:
  7270                           	opt stack 0
  7271  002886                     _print_buffer:
  7272                           	opt stack 25
  7273                           
  7274                           ;print.c: 231: uint8_t i;
  7275                           ;print.c: 232: for(i = 0; i < buffer.n; i++) {
  7276                           
  7277                           ;incstack = 0
  7278  002886  6A07               	clrf	print_buffer@i,c
  7279  002888  D008               	goto	l3090
  7280  00288A                     l3086:
  7281                           
  7282                           ; BSR set to: 0
  7283                           ;print.c: 233: ser_putch(buffer.x[i]);
  7284  00288A  5007               	movf	print_buffer@i,w,c
  7285  00288C  0FD6               	addlw	low _buffer
  7286  00288E  6ED9               	movwf	fsr2l,c
  7287  002890  6ADA               	clrf	fsr2h,c
  7288  002892  50DF               	movf	indf2,w,c
  7289  002894  EC57  F014         	call	_ser_putch
  7290  002898  2A07               	incf	print_buffer@i,f,c
  7291  00289A                     l3090:
  7292  00289A  0100               	movlb	0	; () banked
  7293  00289C  39E6               	swapf	(_buffer+16)& (0+255),w,b
  7294  00289E  0B0F               	andlw	15
  7295  0028A0  6E06               	movwf	??_print_buffer& (0+255),c
  7296  0028A2  5006               	movf	??_print_buffer,w,c
  7297  0028A4  5C07               	subwf	print_buffer@i,w,c
  7298  0028A6  E3F1               	bnc	l3086
  7299                           
  7300                           ; BSR set to: 0
  7301                           ;print.c: 234: }
  7302                           ;print.c: 235: ser_puts("\r\n");
  7303  0028A8  0EF8               	movlw	STR_2& (0+255)
  7304  0028AA  EF9F  F014         	goto	_ser_puts
  7305  0028AE                     __end_of_print_buffer:
  7306                           	opt stack 0
  7307                           tblptru	equ	0xFF8
  7308                           tblptrh	equ	0xFF7
  7309                           tblptrl	equ	0xFF6
  7310                           tablat	equ	0xFF5
  7311                           prodl	equ	0xFF3
  7312                           intcon	equ	0xFF2
  7313                           intcon2	equ	0xFF1
  7314                           postinc0	equ	0xFEE
  7315                           wreg	equ	0xFE8
  7316                           postdec1	equ	0xFE5
  7317                           fsr1l	equ	0xFE1
  7318                           indf2	equ	0xFDF
  7319                           postinc2	equ	0xFDE
  7320                           postdec2	equ	0xFDD
  7321                           fsr2h	equ	0xFDA
  7322                           fsr2l	equ	0xFD9
  7323                           status	equ	0xFD8
  7324                           
  7325 ;; *************** function _ser_puts *****************
  7326 ;; Defined at:
  7327 ;;		line 65 in file "../../../lib/ser.c"
  7328 ;; Parameters:    Size  Location     Type
  7329 ;;  s               1    wreg     PTR const unsigned char 
  7330 ;;		 -> STR_37(3), STR_32(3), STR_31(16), STR_30(16), 
  7331 ;;		 -> STR_28(3), STR_24(3), STR_14(3), STR_13(5), 
  7332 ;;		 -> STR_12(3), STR_11(8), STR_10(6), STR_9(6), 
  7333 ;;		 -> STR_8(6), STR_7(5), STR_4(3), STR_2(3), 
  7334 ;; Auto vars:     Size  Location     Type
  7335 ;;  s               1    4[COMRAM] PTR const unsigned char 
  7336 ;;		 -> STR_37(3), STR_32(3), STR_31(16), STR_30(16), 
  7337 ;;		 -> STR_28(3), STR_24(3), STR_14(3), STR_13(5), 
  7338 ;;		 -> STR_12(3), STR_11(8), STR_10(6), STR_9(6), 
  7339 ;;		 -> STR_8(6), STR_7(5), STR_4(3), STR_2(3), 
  7340 ;; Return value:  Size  Location     Type
  7341 ;;		None               void
  7342 ;; Registers used:
  7343 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7344 ;; Tracked objects:
  7345 ;;		On entry : 0/0
  7346 ;;		On exit  : 0/0
  7347 ;;		Unchanged: 0/0
  7348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7349 ;;      Params:         0       0       0       0       0       0       0       0       0
  7350 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7351 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7352 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7353 ;;Total ram usage:        1 bytes
  7354 ;; Hardware stack levels used:    1
  7355 ;; Hardware stack levels required when called:    2
  7356 ;; This function calls:
  7357 ;;		_ser_putch
  7358 ;; This function is called by:
  7359 ;;		_calibrate
  7360 ;;		_measure_capacitance
  7361 ;;		_print_unit
  7362 ;;		_print_buffer
  7363 ;;		_main
  7364 ;; This function uses a non-reentrant model
  7365 ;;
  7366                           
  7367                           	psect	text38
  7368  00293E                     __ptext38:
  7369                           	opt stack 0
  7370  00293E                     _ser_puts:
  7371                           	opt stack 28
  7372                           
  7373                           ;incstack = 0
  7374                           ;ser_puts@s stored from wreg
  7375  00293E  6E05               	movwf	ser_puts@s,c
  7376                           
  7377                           ;ser.c: 66: while(*s) ser_putch(*s++);
  7378  002940  D004               	goto	l2854
  7379  002942                     l2850:
  7380  002942  D807               	call	PL40	;call to abstracted procedure
  7381  002944  EC57  F014         	call	_ser_putch
  7382  002948  2A05               	incf	ser_puts@s,f,c
  7383  00294A                     l2854:
  7384  00294A  D803               	call	PL40	;call to abstracted procedure
  7385  00294C  B4D8               	btfsc	status,2,c
  7386  00294E  0012               	return		;funcret
  7387  002950  D7F8               	goto	l2850
  7388  002952                     __end_of_ser_puts:
  7389                           	opt stack 0
  7390  002952                     PL40:
  7391                           	opt stack 28
  7392  002952  C005  FFF6         	movff	ser_puts@s,tblptrl
  7393  002956                     	if	0	;There is only one active tblptr byte
  7394  002956                     	endif
  7395  002956                     	if	0	;tblptru may be non-zero
  7396  002956                     	endif
  7397  002956                     	if	0	;tblptru may be non-zero
  7398  002956                     	endif
  7399  002956  0008               	tblrd		*
  7400  002958  50F5               	movf	tablat,w,c
  7401  00295A  0012               	return	
  7402  00295C                     __end_ofPL40:
  7403                           	opt stack 0
  7404                           tblptru	equ	0xFF8
  7405                           tblptrh	equ	0xFF7
  7406                           tblptrl	equ	0xFF6
  7407                           tablat	equ	0xFF5
  7408                           prodl	equ	0xFF3
  7409                           intcon	equ	0xFF2
  7410                           intcon2	equ	0xFF1
  7411                           postinc0	equ	0xFEE
  7412                           wreg	equ	0xFE8
  7413                           postdec1	equ	0xFE5
  7414                           fsr1l	equ	0xFE1
  7415                           indf2	equ	0xFDF
  7416                           postinc2	equ	0xFDE
  7417                           postdec2	equ	0xFDD
  7418                           fsr2h	equ	0xFDA
  7419                           fsr2l	equ	0xFD9
  7420                           status	equ	0xFD8
  7421                           
  7422 ;; *************** function _ser_putch *****************
  7423 ;; Defined at:
  7424 ;;		line 55 in file "../../../lib/ser.c"
  7425 ;; Parameters:    Size  Location     Type
  7426 ;;  c               1    wreg     unsigned char 
  7427 ;; Auto vars:     Size  Location     Type
  7428 ;;  c               1    3[COMRAM] unsigned char 
  7429 ;; Return value:  Size  Location     Type
  7430 ;;		None               void
  7431 ;; Registers used:
  7432 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7433 ;; Tracked objects:
  7434 ;;		On entry : 0/0
  7435 ;;		On exit  : 0/0
  7436 ;;		Unchanged: 0/0
  7437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7438 ;;      Params:         0       0       0       0       0       0       0       0       0
  7439 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7440 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7441 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7442 ;;Total ram usage:        1 bytes
  7443 ;; Hardware stack levels used:    1
  7444 ;; Hardware stack levels required when called:    1
  7445 ;; This function calls:
  7446 ;;		Nothing
  7447 ;; This function is called by:
  7448 ;;		_ser_puts
  7449 ;;		_measure_capacitance
  7450 ;;		_output_putch
  7451 ;;		_print_buffer
  7452 ;; This function uses a non-reentrant model
  7453 ;;
  7454                           
  7455                           	psect	text39
  7456  0028AE                     __ptext39:
  7457                           	opt stack 0
  7458  0028AE                     _ser_putch:
  7459                           	opt stack 28
  7460                           
  7461                           ;incstack = 0
  7462                           ;ser_putch@c stored from wreg
  7463  0028AE  6E04               	movwf	ser_putch@c,c
  7464  0028B0                     l2728:
  7465  0028B0  285B               	incf	_txiptr,w,c	;volatile
  7466  0028B2  0B0F               	andlw	15
  7467  0028B4  185C               	xorwf	_txoptr,w,c	;volatile
  7468  0028B6  E0FC               	bz	l2728
  7469                           
  7470                           ;ser.c: 57: GIE = 0;
  7471  0028B8  9EF2               	bcf	intcon,7,c	;volatile
  7472                           
  7473                           ;ser.c: 58: txfifo[txiptr] = c;
  7474  0028BA  0E10               	movlw	low _txfifo
  7475  0028BC  245B               	addwf	_txiptr,w,c	;volatile
  7476  0028BE  6ED9               	movwf	fsr2l,c
  7477  0028C0  6ADA               	clrf	fsr2h,c
  7478  0028C2  0E01               	movlw	high _txfifo
  7479  0028C4  22DA               	addwfc	fsr2h,f,c
  7480  0028C6  C004  FFDF         	movff	ser_putch@c,indf2
  7481                           
  7482                           ;ser.c: 59: txiptr = (txiptr + 1) & ((uint8_t)16 - 1);
  7483  0028CA  285B               	incf	_txiptr,w,c	;volatile
  7484  0028CC  0B0F               	andlw	15
  7485  0028CE  6E5B               	movwf	_txiptr,c	;volatile
  7486                           
  7487                           ;ser.c: 60: TXIE = 1;
  7488  0028D0  889D               	bsf	3997,4,c	;volatile
  7489                           
  7490                           ;ser.c: 61: GIE = 1;
  7491  0028D2  8EF2               	bsf	intcon,7,c	;volatile
  7492  0028D4  0012               	return		;funcret
  7493  0028D6                     __end_of_ser_putch:
  7494                           	opt stack 0
  7495                           tblptru	equ	0xFF8
  7496                           tblptrh	equ	0xFF7
  7497                           tblptrl	equ	0xFF6
  7498                           tablat	equ	0xFF5
  7499                           prodl	equ	0xFF3
  7500                           intcon	equ	0xFF2
  7501                           intcon2	equ	0xFF1
  7502                           postinc0	equ	0xFEE
  7503                           wreg	equ	0xFE8
  7504                           postdec1	equ	0xFE5
  7505                           fsr1l	equ	0xFE1
  7506                           indf2	equ	0xFDF
  7507                           postinc2	equ	0xFDE
  7508                           postdec2	equ	0xFDD
  7509                           fsr2h	equ	0xFDA
  7510                           fsr2l	equ	0xFD9
  7511                           status	equ	0xFD8
  7512                           
  7513 ;; *************** function _lcd_gotoxy *****************
  7514 ;; Defined at:
  7515 ;;		line 135 in file "../../../lib/lcd44780.c"
  7516 ;; Parameters:    Size  Location     Type
  7517 ;;  col             1    wreg     unsigned char 
  7518 ;;  row             1    7[COMRAM] unsigned char 
  7519 ;; Auto vars:     Size  Location     Type
  7520 ;;  col             1    8[COMRAM] unsigned char 
  7521 ;;  row_offsets     4    9[COMRAM] unsigned char [4]
  7522 ;; Return value:  Size  Location     Type
  7523 ;;		None               void
  7524 ;; Registers used:
  7525 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7526 ;; Tracked objects:
  7527 ;;		On entry : 0/0
  7528 ;;		On exit  : 0/0
  7529 ;;		Unchanged: 0/0
  7530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7531 ;;      Params:         1       0       0       0       0       0       0       0       0
  7532 ;;      Locals:         5       0       0       0       0       0       0       0       0
  7533 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7534 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7535 ;;Total ram usage:        6 bytes
  7536 ;; Hardware stack levels used:    1
  7537 ;; Hardware stack levels required when called:    4
  7538 ;; This function calls:
  7539 ;;		_lcd_command
  7540 ;; This function is called by:
  7541 ;;		_calibrate
  7542 ;;		_measure_freq
  7543 ;;		_measure_capacitance
  7544 ;;		_measure_inductance
  7545 ;;		_print_unit
  7546 ;;		_print_reading
  7547 ;;		_print_indicator
  7548 ;;		_main
  7549 ;; This function uses a non-reentrant model
  7550 ;;
  7551                           
  7552                           	psect	text40
  7553  0026EE                     __ptext40:
  7554                           	opt stack 0
  7555  0026EE                     _lcd_gotoxy:
  7556                           	opt stack 25
  7557                           
  7558                           ;incstack = 0
  7559                           ;lcd_gotoxy@col stored from wreg
  7560  0026EE  6E09               	movwf	lcd_gotoxy@col,c
  7561                           
  7562                           ;lcd44780.c: 137: uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
  7563  0026F0  C0F3  F00A         	movff	lcd_gotoxy@F6470,lcd_gotoxy@row_offsets
  7564  0026F4  C0F4  F00B         	movff	lcd_gotoxy@F6470+1,lcd_gotoxy@row_offsets+1
  7565  0026F8  C0F5  F00C         	movff	lcd_gotoxy@F6470+2,lcd_gotoxy@row_offsets+2
  7566  0026FC  C0F6  F00D         	movff	lcd_gotoxy@F6470+3,lcd_gotoxy@row_offsets+3
  7567                           
  7568                           ;lcd44780.c: 146: if(LCD_lines == 1) {
  7569  002700  0100               	movlb	0	; () banked
  7570  002702  05D1               	decf	_LCD_lines& (0+255),w,b
  7571  002704  E106               	bnz	l3052
  7572                           
  7573                           ; BSR set to: 0
  7574                           ;lcd44780.c: 147: row_offsets[1] = 0x14;
  7575  002706  0E14               	movlw	20
  7576  002708  6E0B               	movwf	lcd_gotoxy@row_offsets+1,c
  7577                           
  7578                           ;lcd44780.c: 148: row_offsets[2] = 0x28;
  7579  00270A  0E28               	movlw	40
  7580  00270C  6E0C               	movwf	lcd_gotoxy@row_offsets+2,c
  7581                           
  7582                           ;lcd44780.c: 149: row_offsets[3] = 0x3C;
  7583  00270E  0E3C               	movlw	60
  7584  002710  6E0D               	movwf	lcd_gotoxy@row_offsets+3,c
  7585  002712                     l3052:
  7586                           
  7587                           ; BSR set to: 0
  7588                           ;lcd44780.c: 150: }
  7589                           ;lcd44780.c: 156: lcd_command(0x80 | (col + row_offsets[row]));
  7590  002712  5008               	movf	lcd_gotoxy@row,w,c
  7591  002714  0F0A               	addlw	low lcd_gotoxy@row_offsets
  7592  002716  6ED9               	movwf	fsr2l,c
  7593  002718  6ADA               	clrf	fsr2h,c
  7594  00271A  50DF               	movf	indf2,w,c
  7595  00271C  2409               	addwf	lcd_gotoxy@col,w,c
  7596  00271E  0980               	iorlw	128
  7597  002720  EFF2  F014         	goto	_lcd_command
  7598  002724                     __end_of_lcd_gotoxy:
  7599                           	opt stack 0
  7600                           tblptru	equ	0xFF8
  7601                           tblptrh	equ	0xFF7
  7602                           tblptrl	equ	0xFF6
  7603                           tablat	equ	0xFF5
  7604                           prodl	equ	0xFF3
  7605                           intcon	equ	0xFF2
  7606                           intcon2	equ	0xFF1
  7607                           postinc0	equ	0xFEE
  7608                           wreg	equ	0xFE8
  7609                           postdec1	equ	0xFE5
  7610                           fsr1l	equ	0xFE1
  7611                           indf2	equ	0xFDF
  7612                           postinc2	equ	0xFDE
  7613                           postdec2	equ	0xFDD
  7614                           fsr2h	equ	0xFDA
  7615                           fsr2l	equ	0xFD9
  7616                           status	equ	0xFD8
  7617                           
  7618 ;; *************** function _format_number *****************
  7619 ;; Defined at:
  7620 ;;		line 15 in file "../../../lib/format.c"
  7621 ;; Parameters:    Size  Location     Type
  7622 ;;  n               2   10[COMRAM] unsigned int 
  7623 ;;  base            1   12[COMRAM] unsigned char 
  7624 ;;  pad             1   13[COMRAM] char 
  7625 ;; Auto vars:     Size  Location     Type
  7626 ;;  buf            32   16[COMRAM] unsigned char [32]
  7627 ;;  i               1   52[COMRAM] char 
  7628 ;;  di              1   51[COMRAM] unsigned char 
  7629 ;;  padchar         1   50[COMRAM] unsigned char 
  7630 ;; Return value:  Size  Location     Type
  7631 ;;		None               void
  7632 ;; Registers used:
  7633 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7634 ;; Tracked objects:
  7635 ;;		On entry : 0/0
  7636 ;;		On exit  : 0/0
  7637 ;;		Unchanged: 0/0
  7638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7639 ;;      Params:         4       0       0       0       0       0       0       0       0
  7640 ;;      Locals:        37       0       0       0       0       0       0       0       0
  7641 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7642 ;;      Totals:        43       0       0       0       0       0       0       0       0
  7643 ;;Total ram usage:       43 bytes
  7644 ;; Hardware stack levels used:    1
  7645 ;; Hardware stack levels required when called:    2
  7646 ;; This function calls:
  7647 ;;		___lwdiv
  7648 ;;		___lwmod
  7649 ;;		_buffer_putch
  7650 ;; This function is called by:
  7651 ;;		_format_xint32
  7652 ;;		_measure_freq
  7653 ;;		_print_reading
  7654 ;; This function uses a non-reentrant model
  7655 ;;
  7656                           
  7657                           	psect	text41
  7658  0020CA                     __ptext41:
  7659                           	opt stack 0
  7660  0020CA                     _format_number:
  7661                           	opt stack 26
  7662                           
  7663                           ;format.c: 16: char buf[8 * sizeof(long)];
  7664                           ;format.c: 17: uint8_t di;
  7665                           ;format.c: 18: int8_t i = 0;
  7666                           
  7667                           ;incstack = 0
  7668  0020CA  6A35               	clrf	format_number@i,c
  7669                           
  7670                           ;format.c: 19: char padchar = ' ';
  7671  0020CC  0E20               	movlw	32
  7672  0020CE  6E33               	movwf	format_number@padchar,c
  7673                           
  7674                           ;format.c: 21: if(pad < 0) {
  7675  0020D0  AE0E               	btfss	format_number@pad,7,c
  7676  0020D2  D003               	goto	l2976
  7677                           
  7678                           ;format.c: 22: pad = -pad;
  7679  0020D4  6C0E               	negf	format_number@pad,c
  7680                           
  7681                           ;format.c: 23: padchar = '0';
  7682  0020D6  0E30               	movlw	48
  7683  0020D8  6E33               	movwf	format_number@padchar,c
  7684  0020DA                     l2976:
  7685                           
  7686                           ;format.c: 35: di = n % base;
  7687  0020DA  C00B  F004         	movff	format_number@n,___lwmod@dividend
  7688  0020DE  C00C  F005         	movff	format_number@n+1,___lwmod@dividend+1
  7689  0020E2  C00D  F006         	movff	format_number@base,___lwmod@divisor
  7690  0020E6  6A07               	clrf	___lwmod@divisor+1,c
  7691  0020E8  EC3B  F013         	call	___lwmod	;wreg free
  7692  0020EC  5004               	movf	?___lwmod,w,c
  7693  0020EE  6E34               	movwf	format_number@di,c
  7694                           
  7695                           ;format.c: 36: buf[i++] = (di < 10 ? (uint8_t)'0' + di : (uint8_t)'A' + di - 10);
  7696  0020F0  0E09               	movlw	9
  7697  0020F2  6434               	cpfsgt	format_number@di,c
  7698  0020F4  D002               	goto	l2982
  7699  0020F6  0E37               	movlw	55
  7700  0020F8  D001               	goto	L4
  7701  0020FA                     l2982:
  7702  0020FA  0E30               	movlw	48
  7703  0020FC                     L4:
  7704  0020FC  2434               	addwf	format_number@di,w,c
  7705  0020FE  6E31               	movwf	_format_number$68,c
  7706  002100  6A32               	clrf	_format_number$68+1,c
  7707  002102  0E00               	movlw	0
  7708  002104  2232               	addwfc	_format_number$68+1,f,c
  7709  002106  5035               	movf	format_number@i,w,c
  7710  002108  0F11               	addlw	low format_number@buf
  7711  00210A  6ED9               	movwf	fsr2l,c
  7712  00210C  6ADA               	clrf	fsr2h,c
  7713  00210E  C031  FFDF         	movff	_format_number$68,indf2
  7714  002112  2A35               	incf	format_number@i,f,c
  7715                           
  7716                           ;format.c: 38: n /= base;
  7717  002114  C00B  F004         	movff	format_number@n,___lwdiv@dividend
  7718  002118  C00C  F005         	movff	format_number@n+1,___lwdiv@dividend+1
  7719  00211C  C00D  F006         	movff	format_number@base,___lwdiv@divisor
  7720  002120  6A07               	clrf	___lwdiv@divisor+1,c
  7721  002122  ECAB  F012         	call	___lwdiv	;wreg free
  7722  002126  C004  F00B         	movff	?___lwdiv,format_number@n
  7723  00212A  C005  F00C         	movff	?___lwdiv+1,format_number@n+1
  7724                           
  7725                           ;format.c: 39: } while(n > 0);
  7726  00212E  500B               	movf	format_number@n,w,c
  7727  002130  100C               	iorwf	format_number@n+1,w,c
  7728  002132  E004               	bz	l2994
  7729  002134  D7D2               	goto	l2976
  7730  002136                     l2992:
  7731  002136  5033               	movf	format_number@padchar,w,c
  7732  002138  ECD0  F012         	call	_buffer_putch
  7733  00213C                     l2994:
  7734  00213C  060E               	decf	format_number@pad,f,c
  7735  00213E  280E               	incf	format_number@pad,w,c
  7736  002140  6E0F               	movwf	??_format_number& (0+255),c
  7737  002142  5035               	movf	format_number@i,w,c
  7738  002144  0A80               	xorlw	128
  7739  002146  6E10               	movwf	(??_format_number+1)& (0+255),c
  7740  002148  500F               	movf	??_format_number,w,c
  7741  00214A  0A80               	xorlw	128
  7742  00214C  5C10               	subwf	(??_format_number+1)& (0+255),w,c
  7743  00214E  E3F3               	bnc	l2992
  7744  002150                     l2996:
  7745                           
  7746                           ;format.c: 43: for(; i > 0; i--) {
  7747  002150  5035               	movf	format_number@i,w,c
  7748  002152  0A80               	xorlw	128
  7749  002154  0F7F               	addlw	-129
  7750  002156  A0D8               	btfss	status,0,c
  7751  002158  0012               	return	
  7752                           
  7753                           ;format.c: 44: buffer_putch((char)buf[(int16_t)i - 1]);
  7754  00215A  C035  F00F         	movff	format_number@i,??_format_number
  7755  00215E  060F               	decf	??_format_number,f,c
  7756  002160  500F               	movf	??_format_number,w,c
  7757  002162  0F11               	addlw	low format_number@buf
  7758  002164  6ED9               	movwf	fsr2l,c
  7759  002166  6ADA               	clrf	fsr2h,c
  7760  002168  50DF               	movf	indf2,w,c
  7761  00216A  ECD0  F012         	call	_buffer_putch
  7762                           
  7763                           ; BSR set to: 0
  7764  00216E  0635               	decf	format_number@i,f,c
  7765  002170  D7EF               	goto	l2996
  7766  002172                     __end_of_format_number:
  7767                           	opt stack 0
  7768                           tblptru	equ	0xFF8
  7769                           tblptrh	equ	0xFF7
  7770                           tblptrl	equ	0xFF6
  7771                           tablat	equ	0xFF5
  7772                           prodl	equ	0xFF3
  7773                           intcon	equ	0xFF2
  7774                           intcon2	equ	0xFF1
  7775                           postinc0	equ	0xFEE
  7776                           wreg	equ	0xFE8
  7777                           postdec1	equ	0xFE5
  7778                           fsr1l	equ	0xFE1
  7779                           indf2	equ	0xFDF
  7780                           postinc2	equ	0xFDE
  7781                           postdec2	equ	0xFDD
  7782                           fsr2h	equ	0xFDA
  7783                           fsr2l	equ	0xFD9
  7784                           status	equ	0xFD8
  7785                           
  7786 ;; *************** function ___lwmod *****************
  7787 ;; Defined at:
  7788 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lwmod.c"
  7789 ;; Parameters:    Size  Location     Type
  7790 ;;  dividend        2    3[COMRAM] unsigned int 
  7791 ;;  divisor         2    5[COMRAM] unsigned int 
  7792 ;; Auto vars:     Size  Location     Type
  7793 ;;  counter         1    7[COMRAM] unsigned char 
  7794 ;; Return value:  Size  Location     Type
  7795 ;;                  2    3[COMRAM] unsigned int 
  7796 ;; Registers used:
  7797 ;;		wreg, status,2, status,0
  7798 ;; Tracked objects:
  7799 ;;		On entry : 0/0
  7800 ;;		On exit  : 0/0
  7801 ;;		Unchanged: 0/0
  7802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7803 ;;      Params:         4       0       0       0       0       0       0       0       0
  7804 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7805 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7806 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7807 ;;Total ram usage:        5 bytes
  7808 ;; Hardware stack levels used:    1
  7809 ;; Hardware stack levels required when called:    1
  7810 ;; This function calls:
  7811 ;;		Nothing
  7812 ;; This function is called by:
  7813 ;;		_format_number
  7814 ;;		_print_reading
  7815 ;; This function uses a non-reentrant model
  7816 ;;
  7817                           
  7818                           	psect	text42
  7819  002676                     __ptext42:
  7820                           	opt stack 0
  7821  002676                     ___lwmod:
  7822                           	opt stack 26
  7823                           
  7824                           ;incstack = 0
  7825  002676  5006               	movf	___lwmod@divisor,w,c
  7826  002678  1007               	iorwf	___lwmod@divisor+1,w,c
  7827  00267A  E017               	bz	l1145
  7828  00267C  0E01               	movlw	1
  7829  00267E  6E08               	movwf	___lwmod@counter,c
  7830  002680  D004               	goto	l2906
  7831  002682                     l2904:
  7832  002682  90D8               	bcf	status,0,c
  7833  002684  3606               	rlcf	___lwmod@divisor,f,c
  7834  002686  3607               	rlcf	___lwmod@divisor+1,f,c
  7835  002688  2A08               	incf	___lwmod@counter,f,c
  7836  00268A                     l2906:
  7837  00268A  AE07               	btfss	___lwmod@divisor+1,7,c
  7838  00268C  D7FA               	goto	l2904
  7839  00268E                     l2908:
  7840  00268E  5006               	movf	___lwmod@divisor,w,c
  7841  002690  5C04               	subwf	___lwmod@dividend,w,c
  7842  002692  5007               	movf	___lwmod@divisor+1,w,c
  7843  002694  5805               	subwfb	___lwmod@dividend+1,w,c
  7844  002696  E304               	bnc	l2912
  7845  002698  5006               	movf	___lwmod@divisor,w,c
  7846  00269A  5E04               	subwf	___lwmod@dividend,f,c
  7847  00269C  5007               	movf	___lwmod@divisor+1,w,c
  7848  00269E  5A05               	subwfb	___lwmod@dividend+1,f,c
  7849  0026A0                     l2912:
  7850  0026A0  90D8               	bcf	status,0,c
  7851  0026A2  3207               	rrcf	___lwmod@divisor+1,f,c
  7852  0026A4  3206               	rrcf	___lwmod@divisor,f,c
  7853  0026A6  2E08               	decfsz	___lwmod@counter,f,c
  7854  0026A8  D7F2               	goto	l2908
  7855  0026AA                     l1145:
  7856  0026AA  C004  F004         	movff	___lwmod@dividend,?___lwmod
  7857  0026AE  C005  F005         	movff	___lwmod@dividend+1,?___lwmod+1
  7858  0026B2  0012               	return		;funcret
  7859  0026B4                     __end_of___lwmod:
  7860                           	opt stack 0
  7861                           tblptru	equ	0xFF8
  7862                           tblptrh	equ	0xFF7
  7863                           tblptrl	equ	0xFF6
  7864                           tablat	equ	0xFF5
  7865                           prodl	equ	0xFF3
  7866                           intcon	equ	0xFF2
  7867                           intcon2	equ	0xFF1
  7868                           postinc0	equ	0xFEE
  7869                           wreg	equ	0xFE8
  7870                           postdec1	equ	0xFE5
  7871                           fsr1l	equ	0xFE1
  7872                           indf2	equ	0xFDF
  7873                           postinc2	equ	0xFDE
  7874                           postdec2	equ	0xFDD
  7875                           fsr2h	equ	0xFDA
  7876                           fsr2l	equ	0xFD9
  7877                           status	equ	0xFD8
  7878                           
  7879 ;; *************** function ___lwdiv *****************
  7880 ;; Defined at:
  7881 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lwdiv.c"
  7882 ;; Parameters:    Size  Location     Type
  7883 ;;  dividend        2    3[COMRAM] unsigned int 
  7884 ;;  divisor         2    5[COMRAM] unsigned int 
  7885 ;; Auto vars:     Size  Location     Type
  7886 ;;  quotient        2    7[COMRAM] unsigned int 
  7887 ;;  counter         1    9[COMRAM] unsigned char 
  7888 ;; Return value:  Size  Location     Type
  7889 ;;                  2    3[COMRAM] unsigned int 
  7890 ;; Registers used:
  7891 ;;		wreg, status,2, status,0
  7892 ;; Tracked objects:
  7893 ;;		On entry : 0/0
  7894 ;;		On exit  : 0/0
  7895 ;;		Unchanged: 0/0
  7896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7897 ;;      Params:         4       0       0       0       0       0       0       0       0
  7898 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7899 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7900 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7901 ;;Total ram usage:        7 bytes
  7902 ;; Hardware stack levels used:    1
  7903 ;; Hardware stack levels required when called:    1
  7904 ;; This function calls:
  7905 ;;		Nothing
  7906 ;; This function is called by:
  7907 ;;		_format_number
  7908 ;;		_print_reading
  7909 ;; This function uses a non-reentrant model
  7910 ;;
  7911                           
  7912                           	psect	text43
  7913  002556                     __ptext43:
  7914                           	opt stack 0
  7915  002556                     ___lwdiv:
  7916                           	opt stack 26
  7917                           
  7918                           ;incstack = 0
  7919  002556  6A08               	clrf	___lwdiv@quotient,c
  7920  002558  6A09               	clrf	___lwdiv@quotient+1,c
  7921  00255A  5006               	movf	___lwdiv@divisor,w,c
  7922  00255C  1007               	iorwf	___lwdiv@divisor+1,w,c
  7923  00255E  E01B               	bz	l1135
  7924  002560  0E01               	movlw	1
  7925  002562  6E0A               	movwf	___lwdiv@counter,c
  7926  002564  D004               	goto	l2886
  7927  002566                     l2884:
  7928  002566  90D8               	bcf	status,0,c
  7929  002568  3606               	rlcf	___lwdiv@divisor,f,c
  7930  00256A  3607               	rlcf	___lwdiv@divisor+1,f,c
  7931  00256C  2A0A               	incf	___lwdiv@counter,f,c
  7932  00256E                     l2886:
  7933  00256E  AE07               	btfss	___lwdiv@divisor+1,7,c
  7934  002570  D7FA               	goto	l2884
  7935  002572                     l2888:
  7936  002572  90D8               	bcf	status,0,c
  7937  002574  3608               	rlcf	___lwdiv@quotient,f,c
  7938  002576  3609               	rlcf	___lwdiv@quotient+1,f,c
  7939  002578  5006               	movf	___lwdiv@divisor,w,c
  7940  00257A  5C04               	subwf	___lwdiv@dividend,w,c
  7941  00257C  5007               	movf	___lwdiv@divisor+1,w,c
  7942  00257E  5805               	subwfb	___lwdiv@dividend+1,w,c
  7943  002580  E305               	bnc	l2896
  7944  002582  5006               	movf	___lwdiv@divisor,w,c
  7945  002584  5E04               	subwf	___lwdiv@dividend,f,c
  7946  002586  5007               	movf	___lwdiv@divisor+1,w,c
  7947  002588  5A05               	subwfb	___lwdiv@dividend+1,f,c
  7948  00258A  8008               	bsf	___lwdiv@quotient,0,c
  7949  00258C                     l2896:
  7950  00258C  90D8               	bcf	status,0,c
  7951  00258E  3207               	rrcf	___lwdiv@divisor+1,f,c
  7952  002590  3206               	rrcf	___lwdiv@divisor,f,c
  7953  002592  2E0A               	decfsz	___lwdiv@counter,f,c
  7954  002594  D7EE               	goto	l2888
  7955  002596                     l1135:
  7956  002596  C008  F004         	movff	___lwdiv@quotient,?___lwdiv
  7957  00259A  C009  F005         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7958  00259E  0012               	return		;funcret
  7959  0025A0                     __end_of___lwdiv:
  7960                           	opt stack 0
  7961                           tblptru	equ	0xFF8
  7962                           tblptrh	equ	0xFF7
  7963                           tblptrl	equ	0xFF6
  7964                           tablat	equ	0xFF5
  7965                           prodl	equ	0xFF3
  7966                           intcon	equ	0xFF2
  7967                           intcon2	equ	0xFF1
  7968                           postinc0	equ	0xFEE
  7969                           wreg	equ	0xFE8
  7970                           postdec1	equ	0xFE5
  7971                           fsr1l	equ	0xFE1
  7972                           indf2	equ	0xFDF
  7973                           postinc2	equ	0xFDE
  7974                           postdec2	equ	0xFDD
  7975                           fsr2h	equ	0xFDA
  7976                           fsr2l	equ	0xFD9
  7977                           status	equ	0xFD8
  7978                           
  7979 ;; *************** function _buffer_puts *****************
  7980 ;; Defined at:
  7981 ;;		line 57 in file "../../../lib/buffer.c"
  7982 ;; Parameters:    Size  Location     Type
  7983 ;;  x               1    wreg     PTR const unsigned char 
  7984 ;;		 -> STR_5(6), 
  7985 ;; Auto vars:     Size  Location     Type
  7986 ;;  x               1    6[COMRAM] PTR const unsigned char 
  7987 ;;		 -> STR_5(6), 
  7988 ;; Return value:  Size  Location     Type
  7989 ;;                  1    wreg      unsigned char 
  7990 ;; Registers used:
  7991 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7992 ;; Tracked objects:
  7993 ;;		On entry : F/0
  7994 ;;		On exit  : F/0
  7995 ;;		Unchanged: 0/0
  7996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7997 ;;      Params:         0       0       0       0       0       0       0       0       0
  7998 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7999 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8000 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8001 ;;Total ram usage:        1 bytes
  8002 ;; Hardware stack levels used:    1
  8003 ;; Hardware stack levels required when called:    2
  8004 ;; This function calls:
  8005 ;;		_buffer_putch
  8006 ;; This function is called by:
  8007 ;;		_measure_freq
  8008 ;; This function uses a non-reentrant model
  8009 ;;
  8010                           
  8011                           	psect	text44
  8012  00295C                     __ptext44:
  8013                           	opt stack 0
  8014  00295C                     _buffer_puts:
  8015                           	opt stack 26
  8016                           
  8017                           ;incstack = 0
  8018                           ;buffer_puts@x stored from wreg
  8019  00295C  6E07               	movwf	buffer_puts@x,c
  8020                           
  8021                           ; BSR set to: 0
  8022                           ;buffer.c: 58: while(*x) {
  8023  00295E  D004               	goto	l2964
  8024  002960                     l2960:
  8025                           
  8026                           ; BSR set to: 0
  8027                           ;buffer.c: 59: buffer_putch(*x);
  8028  002960  D807               	call	PL42	;call to abstracted procedure
  8029  002962  ECD0  F012         	call	_buffer_putch
  8030                           
  8031                           ; BSR set to: 0
  8032                           ;buffer.c: 60: ++x;
  8033  002966  2A07               	incf	buffer_puts@x,f,c
  8034  002968                     l2964:
  8035                           
  8036                           ; BSR set to: 0
  8037  002968  D803               	call	PL42	;call to abstracted procedure
  8038  00296A  B4D8               	btfsc	status,2,c
  8039                           
  8040                           ; BSR set to: 0
  8041  00296C  0012               	return		;funcret
  8042  00296E  D7F8               	goto	l2960
  8043  002970                     __end_of_buffer_puts:
  8044                           	opt stack 0
  8045  002970                     PL42:
  8046                           	opt stack 26
  8047  002970  C007  FFF6         	movff	buffer_puts@x,tblptrl
  8048  002974                     	if	0	;There is only one active tblptr byte
  8049  002974                     	endif
  8050  002974                     	if	0	;tblptru may be non-zero
  8051  002974                     	endif
  8052  002974                     	if	0	;tblptru may be non-zero
  8053  002974                     	endif
  8054  002974  0008               	tblrd		*
  8055  002976  50F5               	movf	tablat,w,c
  8056  002978  0012               	return	
  8057  00297A                     __end_ofPL42:
  8058                           	opt stack 0
  8059                           tblptru	equ	0xFF8
  8060                           tblptrh	equ	0xFF7
  8061                           tblptrl	equ	0xFF6
  8062                           tablat	equ	0xFF5
  8063                           prodl	equ	0xFF3
  8064                           intcon	equ	0xFF2
  8065                           intcon2	equ	0xFF1
  8066                           postinc0	equ	0xFEE
  8067                           wreg	equ	0xFE8
  8068                           postdec1	equ	0xFE5
  8069                           fsr1l	equ	0xFE1
  8070                           indf2	equ	0xFDF
  8071                           postinc2	equ	0xFDE
  8072                           postdec2	equ	0xFDD
  8073                           fsr2h	equ	0xFDA
  8074                           fsr2l	equ	0xFD9
  8075                           status	equ	0xFD8
  8076                           
  8077 ;; *************** function _buffer_putch *****************
  8078 ;; Defined at:
  8079 ;;		line 30 in file "../../../lib/buffer.c"
  8080 ;; Parameters:    Size  Location     Type
  8081 ;;  ch              1    wreg     unsigned char 
  8082 ;; Auto vars:     Size  Location     Type
  8083 ;;  ch              1    5[COMRAM] unsigned char 
  8084 ;; Return value:  Size  Location     Type
  8085 ;;                  1    wreg      unsigned char 
  8086 ;; Registers used:
  8087 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8088 ;; Tracked objects:
  8089 ;;		On entry : 0/0
  8090 ;;		On exit  : F/0
  8091 ;;		Unchanged: 0/0
  8092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8093 ;;      Params:         0       0       0       0       0       0       0       0       0
  8094 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8095 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8096 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8097 ;;Total ram usage:        3 bytes
  8098 ;; Hardware stack levels used:    1
  8099 ;; Hardware stack levels required when called:    1
  8100 ;; This function calls:
  8101 ;;		Nothing
  8102 ;; This function is called by:
  8103 ;;		_buffer_puts
  8104 ;;		_format_number
  8105 ;;		_format_xint32
  8106 ;;		_format_double
  8107 ;; This function uses a non-reentrant model
  8108 ;;
  8109                           
  8110                           	psect	text45
  8111  0025A0                     __ptext45:
  8112                           	opt stack 0
  8113  0025A0                     _buffer_putch:
  8114                           	opt stack 26
  8115                           
  8116                           ; BSR set to: 0
  8117                           ;incstack = 0
  8118                           ;buffer_putch@ch stored from wreg
  8119  0025A0  6E06               	movwf	buffer_putch@ch,c
  8120                           
  8121                           ;buffer.c: 31: if(16 - buffer.n <= 0)
  8122  0025A2  0E10               	movlw	16
  8123  0025A4  6E04               	movwf	??_buffer_putch& (0+255),c
  8124  0025A6  6A05               	clrf	(??_buffer_putch+1)& (0+255),c
  8125  0025A8  0100               	movlb	0	; () banked
  8126  0025AA  39E6               	swapf	(_buffer+16)& (0+255),w,b
  8127  0025AC  0B0F               	andlw	15
  8128  0025AE  5E04               	subwf	??_buffer_putch,f,c
  8129  0025B0  0E00               	movlw	0
  8130  0025B2  5A05               	subwfb	??_buffer_putch+1,f,c
  8131  0025B4  BE05               	btfsc	??_buffer_putch+1,7,c
  8132  0025B6  0C00               	retlw	0
  8133  0025B8  5005               	movf	??_buffer_putch+1,w,c
  8134  0025BA  E103               	bnz	l2840
  8135  0025BC  0404               	decf	??_buffer_putch,w,c
  8136  0025BE  A0D8               	btfss	status,0,c
  8137  0025C0  0012               	return	
  8138  0025C2                     l2840:
  8139                           
  8140                           ; BSR set to: 0
  8141                           ;buffer.c: 33: buffer.x[buffer.n] = ch;
  8142  0025C2  39E6               	swapf	(_buffer+16)& (0+255),w,b
  8143  0025C4  0B0F               	andlw	15
  8144  0025C6  6E04               	movwf	??_buffer_putch& (0+255),c
  8145  0025C8  5004               	movf	??_buffer_putch,w,c
  8146  0025CA  0FD6               	addlw	low _buffer
  8147  0025CC  6ED9               	movwf	fsr2l,c
  8148  0025CE  6ADA               	clrf	fsr2h,c
  8149  0025D0  C006  FFDF         	movff	buffer_putch@ch,indf2
  8150                           
  8151                           ; BSR set to: 0
  8152                           ;buffer.c: 34: buffer.n++;
  8153  0025D4  39E6               	swapf	(_buffer+16)& (0+255),w,b
  8154  0025D6  0B0F               	andlw	15
  8155  0025D8  6E04               	movwf	??_buffer_putch& (0+255),c
  8156  0025DA  2A04               	incf	??_buffer_putch,f,c
  8157  0025DC  3A04               	swapf	??_buffer_putch& (0+255),f,c
  8158  0025DE  51E6               	movf	(_buffer+16)& (0+255),w,b
  8159  0025E0  1804               	xorwf	??_buffer_putch& (0+255),w,c
  8160  0025E2  0B0F               	andlw	-241
  8161  0025E4  1804               	xorwf	??_buffer_putch& (0+255),w,c
  8162  0025E6  6FE6               	movwf	(_buffer+16)& (0+255),b
  8163                           
  8164                           ; BSR set to: 0
  8165  0025E8  0012               	return		;funcret
  8166  0025EA                     __end_of_buffer_putch:
  8167                           	opt stack 0
  8168                           tblptru	equ	0xFF8
  8169                           tblptrh	equ	0xFF7
  8170                           tblptrl	equ	0xFF6
  8171                           tablat	equ	0xFF5
  8172                           prodl	equ	0xFF3
  8173                           intcon	equ	0xFF2
  8174                           intcon2	equ	0xFF1
  8175                           postinc0	equ	0xFEE
  8176                           wreg	equ	0xFE8
  8177                           postdec1	equ	0xFE5
  8178                           fsr1l	equ	0xFE1
  8179                           indf2	equ	0xFDF
  8180                           postinc2	equ	0xFDE
  8181                           postdec2	equ	0xFDD
  8182                           fsr2h	equ	0xFDA
  8183                           fsr2l	equ	0xFD9
  8184                           status	equ	0xFD8
  8185                           
  8186 ;; *************** function _buffer_init *****************
  8187 ;; Defined at:
  8188 ;;		line 10 in file "../../../lib/buffer.c"
  8189 ;; Parameters:    Size  Location     Type
  8190 ;;		None
  8191 ;; Auto vars:     Size  Location     Type
  8192 ;;		None
  8193 ;; Return value:  Size  Location     Type
  8194 ;;		None               void
  8195 ;; Registers used:
  8196 ;;		wreg, status,2
  8197 ;; Tracked objects:
  8198 ;;		On entry : 0/0
  8199 ;;		On exit  : F/0
  8200 ;;		Unchanged: 0/0
  8201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8202 ;;      Params:         0       0       0       0       0       0       0       0       0
  8203 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8204 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8205 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8206 ;;Total ram usage:        0 bytes
  8207 ;; Hardware stack levels used:    1
  8208 ;; Hardware stack levels required when called:    1
  8209 ;; This function calls:
  8210 ;;		Nothing
  8211 ;; This function is called by:
  8212 ;;		_measure_freq
  8213 ;; This function uses a non-reentrant model
  8214 ;;
  8215                           
  8216                           	psect	text46
  8217  0029D8                     __ptext46:
  8218                           	opt stack 0
  8219  0029D8                     _buffer_init:
  8220                           	opt stack 27
  8221                           
  8222                           ;buffer.c: 11: buffer.p = 0;
  8223                           
  8224                           ; BSR set to: 0
  8225                           ;incstack = 0
  8226  0029D8  0EF0               	movlw	-16
  8227  0029DA  0100               	movlb	0	; () banked
  8228  0029DC  17E6               	andwf	(_buffer+16)& (0+255),f,b
  8229                           
  8230                           ;buffer.c: 12: buffer.n = 0;
  8231  0029DE  0E0F               	movlw	-241
  8232  0029E0  17E6               	andwf	(_buffer+16)& (0+255),f,b
  8233                           
  8234                           ; BSR set to: 0
  8235  0029E2  0C0F               	retlw	15	;funcret
  8236  0029E4                     __end_of_buffer_init:
  8237                           	opt stack 0
  8238                           tblptru	equ	0xFF8
  8239                           tblptrh	equ	0xFF7
  8240                           tblptrl	equ	0xFF6
  8241                           tablat	equ	0xFF5
  8242                           prodl	equ	0xFF3
  8243                           intcon	equ	0xFF2
  8244                           intcon2	equ	0xFF1
  8245                           postinc0	equ	0xFEE
  8246                           wreg	equ	0xFE8
  8247                           postdec1	equ	0xFE5
  8248                           fsr1l	equ	0xFE1
  8249                           indf2	equ	0xFDF
  8250                           postinc2	equ	0xFDE
  8251                           postdec2	equ	0xFDD
  8252                           fsr2h	equ	0xFDA
  8253                           fsr2l	equ	0xFD9
  8254                           status	equ	0xFD8
  8255                           
  8256 ;; *************** function _lcd_clear *****************
  8257 ;; Defined at:
  8258 ;;		line 287 in file "../../../lib/lcd44780.c"
  8259 ;; Parameters:    Size  Location     Type
  8260 ;;		None
  8261 ;; Auto vars:     Size  Location     Type
  8262 ;;		None
  8263 ;; Return value:  Size  Location     Type
  8264 ;;		None               void
  8265 ;; Registers used:
  8266 ;;		wreg, status,2, status,0, cstack
  8267 ;; Tracked objects:
  8268 ;;		On entry : 0/0
  8269 ;;		On exit  : 0/0
  8270 ;;		Unchanged: 0/0
  8271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8272 ;;      Params:         0       0       0       0       0       0       0       0       0
  8273 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8274 ;;      Temps:          1       0       0       0       0       0       0       0       0
  8275 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8276 ;;Total ram usage:        1 bytes
  8277 ;; Hardware stack levels used:    1
  8278 ;; Hardware stack levels required when called:    4
  8279 ;; This function calls:
  8280 ;;		_lcd_command
  8281 ;; This function is called by:
  8282 ;;		_calibrate
  8283 ;;		_main
  8284 ;; This function uses a non-reentrant model
  8285 ;;
  8286                           
  8287                           	psect	text47
  8288  0029B0                     __ptext47:
  8289                           	opt stack 0
  8290  0029B0                     _lcd_clear:
  8291                           	opt stack 26
  8292                           
  8293                           ;lcd44780.c: 288: lcd_command(0x01);
  8294                           
  8295                           ; BSR set to: 0
  8296                           ;incstack = 0
  8297  0029B0  0E01               	movlw	1
  8298  0029B2  ECF2  F014         	call	_lcd_command
  8299                           
  8300                           ;lcd44780.c: 289: _delay((unsigned long)((2)*(20000000/4000.0)));
  8301  0029B6  0E0D               	movlw	13
  8302  0029B8  6E08               	movwf	??_lcd_clear& (0+255),c
  8303  0029BA  0EFC               	movlw	252
  8304  0029BC                     u3737:
  8305  0029BC  2EE8               	decfsz	wreg,f,c
  8306  0029BE  D7FE               	goto	u3737
  8307  0029C0  2E08               	decfsz	??_lcd_clear& (0+255),f,c
  8308  0029C2  D7FC               	goto	u3737
  8309  0029C4  0012               	return		;funcret
  8310  0029C6                     __end_of_lcd_clear:
  8311                           	opt stack 0
  8312                           tblptru	equ	0xFF8
  8313                           tblptrh	equ	0xFF7
  8314                           tblptrl	equ	0xFF6
  8315                           tablat	equ	0xFF5
  8316                           prodl	equ	0xFF3
  8317                           intcon	equ	0xFF2
  8318                           intcon2	equ	0xFF1
  8319                           postinc0	equ	0xFEE
  8320                           wreg	equ	0xFE8
  8321                           postdec1	equ	0xFE5
  8322                           fsr1l	equ	0xFE1
  8323                           indf2	equ	0xFDF
  8324                           postinc2	equ	0xFDE
  8325                           postdec2	equ	0xFDD
  8326                           fsr2h	equ	0xFDA
  8327                           fsr2l	equ	0xFD9
  8328                           status	equ	0xFD8
  8329                           
  8330 ;; *************** function _lcd_command *****************
  8331 ;; Defined at:
  8332 ;;		line 127 in file "../../../lib/lcd44780.c"
  8333 ;; Parameters:    Size  Location     Type
  8334 ;;  value           1    wreg     unsigned char 
  8335 ;; Auto vars:     Size  Location     Type
  8336 ;;  value           1    6[COMRAM] unsigned char 
  8337 ;; Return value:  Size  Location     Type
  8338 ;;		None               void
  8339 ;; Registers used:
  8340 ;;		wreg, status,2, status,0, cstack
  8341 ;; Tracked objects:
  8342 ;;		On entry : 0/0
  8343 ;;		On exit  : 0/0
  8344 ;;		Unchanged: 0/0
  8345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8346 ;;      Params:         0       0       0       0       0       0       0       0       0
  8347 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8348 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8349 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8350 ;;Total ram usage:        1 bytes
  8351 ;; Hardware stack levels used:    1
  8352 ;; Hardware stack levels required when called:    3
  8353 ;; This function calls:
  8354 ;;		_lcd_send
  8355 ;; This function is called by:
  8356 ;;		_lcd_gotoxy
  8357 ;;		_lcd_clear
  8358 ;;		_lcd_begin
  8359 ;; This function uses a non-reentrant model
  8360 ;;
  8361                           
  8362                           	psect	text48
  8363  0029E4                     __ptext48:
  8364                           	opt stack 0
  8365  0029E4                     _lcd_command:
  8366                           	opt stack 25
  8367                           
  8368                           ;incstack = 0
  8369                           ;lcd_command@value stored from wreg
  8370  0029E4  6E07               	movwf	lcd_command@value,c
  8371                           
  8372                           ;lcd44780.c: 128: lcd_send(value, 0);
  8373  0029E6  0E00               	movlw	0
  8374  0029E8  6E05               	movwf	lcd_send@mode,c
  8375  0029EA  5007               	movf	lcd_command@value,w,c
  8376  0029EC  EFCB  F014         	goto	_lcd_send
  8377  0029F0                     __end_of_lcd_command:
  8378                           	opt stack 0
  8379                           tblptru	equ	0xFF8
  8380                           tblptrh	equ	0xFF7
  8381                           tblptrl	equ	0xFF6
  8382                           tablat	equ	0xFF5
  8383                           prodl	equ	0xFF3
  8384                           intcon	equ	0xFF2
  8385                           intcon2	equ	0xFF1
  8386                           postinc0	equ	0xFEE
  8387                           wreg	equ	0xFE8
  8388                           postdec1	equ	0xFE5
  8389                           fsr1l	equ	0xFE1
  8390                           indf2	equ	0xFDF
  8391                           postinc2	equ	0xFDE
  8392                           postdec2	equ	0xFDD
  8393                           fsr2h	equ	0xFDA
  8394                           fsr2l	equ	0xFD9
  8395                           status	equ	0xFD8
  8396                           
  8397 ;; *************** function _lcd_send *****************
  8398 ;; Defined at:
  8399 ;;		line 103 in file "../../../lib/lcd44780.c"
  8400 ;; Parameters:    Size  Location     Type
  8401 ;;  value           1    wreg     unsigned char 
  8402 ;;  mode            1    4[COMRAM] unsigned char 
  8403 ;; Auto vars:     Size  Location     Type
  8404 ;;  value           1    5[COMRAM] unsigned char 
  8405 ;; Return value:  Size  Location     Type
  8406 ;;		None               void
  8407 ;; Registers used:
  8408 ;;		wreg, status,2, status,0, cstack
  8409 ;; Tracked objects:
  8410 ;;		On entry : 0/0
  8411 ;;		On exit  : 0/0
  8412 ;;		Unchanged: 0/0
  8413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8414 ;;      Params:         1       0       0       0       0       0       0       0       0
  8415 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8416 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8417 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8418 ;;Total ram usage:        2 bytes
  8419 ;; Hardware stack levels used:    1
  8420 ;; Hardware stack levels required when called:    2
  8421 ;; This function calls:
  8422 ;;		_lcd_write4bits
  8423 ;; This function is called by:
  8424 ;;		_lcd_command
  8425 ;;		_lcd_puts
  8426 ;;		_calibrate
  8427 ;;		_output_putch
  8428 ;; This function uses a non-reentrant model
  8429 ;;
  8430                           
  8431                           	psect	text49
  8432  002996                     __ptext49:
  8433                           	opt stack 0
  8434  002996                     _lcd_send:
  8435                           	opt stack 26
  8436                           
  8437                           ;incstack = 0
  8438                           ;lcd_send@value stored from wreg
  8439  002996  6E06               	movwf	lcd_send@value,c
  8440                           
  8441                           ;lcd44780.c: 104: if(mode) {
  8442  002998  5005               	movf	lcd_send@mode,w,c
  8443  00299A  E002               	bz	l2720
  8444                           
  8445                           ;lcd44780.c: 105: LATB |= 0b0100;
  8446  00299C  848A               	bsf	3978,2,c	;volatile
  8447                           
  8448                           ;lcd44780.c: 106: } else {
  8449  00299E  D001               	goto	l2722
  8450  0029A0                     l2720:
  8451                           
  8452                           ;lcd44780.c: 107: LATB &= ~0b0100;
  8453  0029A0  948A               	bcf	3978,2,c	;volatile
  8454  0029A2                     l2722:
  8455                           
  8456                           ;lcd44780.c: 108: }
  8457                           ;lcd44780.c: 115: {
  8458                           ;lcd44780.c: 116: lcd_write4bits(value >> 4);
  8459  0029A2  3806               	swapf	lcd_send@value,w,c
  8460  0029A4  0B0F               	andlw	15
  8461  0029A6  EC7E  F014         	call	_lcd_write4bits
  8462                           
  8463                           ;lcd44780.c: 117: lcd_write4bits(value);
  8464  0029AA  5006               	movf	lcd_send@value,w,c
  8465  0029AC  EF7E  F014         	goto	_lcd_write4bits
  8466  0029B0                     __end_of_lcd_send:
  8467                           	opt stack 0
  8468                           tblptru	equ	0xFF8
  8469                           tblptrh	equ	0xFF7
  8470                           tblptrl	equ	0xFF6
  8471                           tablat	equ	0xFF5
  8472                           prodl	equ	0xFF3
  8473                           intcon	equ	0xFF2
  8474                           intcon2	equ	0xFF1
  8475                           postinc0	equ	0xFEE
  8476                           wreg	equ	0xFE8
  8477                           postdec1	equ	0xFE5
  8478                           fsr1l	equ	0xFE1
  8479                           indf2	equ	0xFDF
  8480                           postinc2	equ	0xFDE
  8481                           postdec2	equ	0xFDD
  8482                           fsr2h	equ	0xFDA
  8483                           fsr2l	equ	0xFD9
  8484                           status	equ	0xFD8
  8485                           
  8486 ;; *************** function _lcd_write4bits *****************
  8487 ;; Defined at:
  8488 ;;		line 34 in file "../../../lib/lcd44780.c"
  8489 ;; Parameters:    Size  Location     Type
  8490 ;;  value           1    wreg     unsigned char 
  8491 ;; Auto vars:     Size  Location     Type
  8492 ;;  value           1    3[COMRAM] unsigned char 
  8493 ;; Return value:  Size  Location     Type
  8494 ;;		None               void
  8495 ;; Registers used:
  8496 ;;		wreg, status,2, status,0
  8497 ;; Tracked objects:
  8498 ;;		On entry : 0/0
  8499 ;;		On exit  : 0/0
  8500 ;;		Unchanged: 0/0
  8501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8502 ;;      Params:         0       0       0       0       0       0       0       0       0
  8503 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8504 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8505 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8506 ;;Total ram usage:        1 bytes
  8507 ;; Hardware stack levels used:    1
  8508 ;; Hardware stack levels required when called:    1
  8509 ;; This function calls:
  8510 ;;		Nothing
  8511 ;; This function is called by:
  8512 ;;		_lcd_send
  8513 ;;		_lcd_begin
  8514 ;; This function uses a non-reentrant model
  8515 ;;
  8516                           
  8517                           	psect	text50
  8518  0028FC                     __ptext50:
  8519                           	opt stack 0
  8520  0028FC                     _lcd_write4bits:
  8521                           	opt stack 26
  8522                           
  8523                           ;incstack = 0
  8524                           ;lcd_write4bits@value stored from wreg
  8525  0028FC  6E04               	movwf	lcd_write4bits@value,c
  8526                           
  8527                           ;lcd44780.c: 39: LATB &= 0b00001111;
  8528  0028FE  0E0F               	movlw	15
  8529  002900  168A               	andwf	3978,f,c	;volatile
  8530                           
  8531                           ;lcd44780.c: 40: LATB |= value << 4;
  8532  002902  3804               	swapf	lcd_write4bits@value,w,c
  8533  002904  0BF0               	andlw	240
  8534  002906  128A               	iorwf	3978,f,c	;volatile
  8535                           
  8536                           ;lcd44780.c: 55: LATB |= 0b1000; _delay((unsigned long)((4)*(20000000/4000000.0))); LATB
      +                           &= ~0b1000; _delay((unsigned long)((100)*(20000000/4000000.0)));;
  8537  002908  868A               	bsf	3978,3,c	;volatile
  8538  00290A  0E06               	movlw	6
  8539  00290C                     u3747:
  8540  00290C  2EE8               	decfsz	wreg,f,c
  8541  00290E  D7FE               	goto	u3747
  8542  002910  D000               	nop2		;nop
  8543  002912  968A               	bcf	3978,3,c	;volatile
  8544  002914  0EA6               	movlw	166
  8545  002916                     u3757:
  8546  002916  2EE8               	decfsz	wreg,f,c
  8547  002918  D7FE               	goto	u3757
  8548  00291A  D000               	nop2		;nop
  8549  00291C  0012               	return		;funcret
  8550  00291E                     __end_of_lcd_write4bits:
  8551                           	opt stack 0
  8552                           tblptru	equ	0xFF8
  8553                           tblptrh	equ	0xFF7
  8554                           tblptrl	equ	0xFF6
  8555                           tablat	equ	0xFF5
  8556                           prodl	equ	0xFF3
  8557                           intcon	equ	0xFF2
  8558                           intcon2	equ	0xFF1
  8559                           postinc0	equ	0xFEE
  8560                           wreg	equ	0xFE8
  8561                           postdec1	equ	0xFE5
  8562                           fsr1l	equ	0xFE1
  8563                           indf2	equ	0xFDF
  8564                           postinc2	equ	0xFDE
  8565                           postdec2	equ	0xFDD
  8566                           fsr2h	equ	0xFDA
  8567                           fsr2l	equ	0xFD9
  8568                           status	equ	0xFD8
  8569                           
  8570 ;; *************** function _delay10ms *****************
  8571 ;; Defined at:
  8572 ;;		line 58 in file "../../../LC-meter.c"
  8573 ;; Parameters:    Size  Location     Type
  8574 ;;  period_10ms     1    wreg     unsigned char 
  8575 ;; Auto vars:     Size  Location     Type
  8576 ;;  period_10ms     1    0[COMRAM] unsigned char 
  8577 ;; Return value:  Size  Location     Type
  8578 ;;		None               void
  8579 ;; Registers used:
  8580 ;;		wreg
  8581 ;; Tracked objects:
  8582 ;;		On entry : 0/0
  8583 ;;		On exit  : 0/0
  8584 ;;		Unchanged: 0/0
  8585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8586 ;;      Params:         0       0       0       0       0       0       0       0       0
  8587 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8588 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8589 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8590 ;;Total ram usage:        0 bytes
  8591 ;; Hardware stack levels used:    1
  8592 ;; Hardware stack levels required when called:    1
  8593 ;; This function calls:
  8594 ;;		Nothing
  8595 ;; This function is called by:
  8596 ;;		_calibrate
  8597 ;;		_main
  8598 ;; This function uses a non-reentrant model
  8599 ;;
  8600                           
  8601                           	psect	text51
  8602  0029F6                     __ptext51:
  8603                           	opt stack 0
  8604  0029F6                     _delay10ms:
  8605                           	opt stack 29
  8606                           
  8607                           ;incstack = 0
  8608  0029F6  0012               	return		;funcret
  8609  0029F8                     __end_of_delay10ms:
  8610                           	opt stack 0
  8611                           tblptru	equ	0xFF8
  8612                           tblptrh	equ	0xFF7
  8613                           tblptrl	equ	0xFF6
  8614                           tablat	equ	0xFF5
  8615                           prodl	equ	0xFF3
  8616                           intcon	equ	0xFF2
  8617                           intcon2	equ	0xFF1
  8618                           postinc0	equ	0xFEE
  8619                           wreg	equ	0xFE8
  8620                           postdec1	equ	0xFE5
  8621                           fsr1l	equ	0xFE1
  8622                           indf2	equ	0xFDF
  8623                           postinc2	equ	0xFDE
  8624                           postdec2	equ	0xFDD
  8625                           fsr2h	equ	0xFDA
  8626                           fsr2l	equ	0xFD9
  8627                           status	equ	0xFD8
  8628                           
  8629 ;; *************** function ___lwtofl *****************
  8630 ;; Defined at:
  8631 ;;		line 28 in file "/opt/microchip/xc8/v1.34/sources/common/lwtofl.c"
  8632 ;; Parameters:    Size  Location     Type
  8633 ;;  c               2   58[COMRAM] unsigned int 
  8634 ;; Auto vars:     Size  Location     Type
  8635 ;;		None
  8636 ;; Return value:  Size  Location     Type
  8637 ;;                  4   58[COMRAM] unsigned int 
  8638 ;; Registers used:
  8639 ;;		wreg, status,2, status,0, cstack
  8640 ;; Tracked objects:
  8641 ;;		On entry : 0/0
  8642 ;;		On exit  : 0/0
  8643 ;;		Unchanged: 0/0
  8644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8645 ;;      Params:         4       0       0       0       0       0       0       0       0
  8646 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8647 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8648 ;;      Totals:         4       0       0       0       0       0       0       0       0
  8649 ;;Total ram usage:        4 bytes
  8650 ;; Hardware stack levels used:    1
  8651 ;; Hardware stack levels required when called:    2
  8652 ;; This function calls:
  8653 ;;		___flpack
  8654 ;; This function is called by:
  8655 ;;		_calibrate
  8656 ;;		_measure_capacitance
  8657 ;;		_measure_inductance
  8658 ;; This function uses a non-reentrant model
  8659 ;;
  8660                           
  8661                           	psect	text52
  8662  002834                     __ptext52:
  8663                           	opt stack 0
  8664  002834                     ___lwtofl:
  8665                           	opt stack 27
  8666                           
  8667                           ;incstack = 0
  8668  002834  C03B  F004         	movff	___lwtofl@c,___flpack@arg
  8669  002838  C03C  F005         	movff	___lwtofl@c+1,___flpack@arg+1
  8670  00283C  6A06               	clrf	___flpack@arg+2,c
  8671  00283E  6A07               	clrf	___flpack@arg+3,c
  8672  002840  0E96               	movlw	150
  8673  002842  6E08               	movwf	___flpack@exp,c
  8674  002844  0E00               	movlw	0
  8675  002846  6E09               	movwf	___flpack@sign,c
  8676  002848  EC57  F00F         	call	___flpack	;wreg free
  8677  00284C  C004  F03B         	movff	?___flpack,?___lwtofl
  8678  002850  C005  F03C         	movff	?___flpack+1,?___lwtofl+1
  8679  002854  C006  F03D         	movff	?___flpack+2,?___lwtofl+2
  8680  002858  C007  F03E         	movff	?___flpack+3,?___lwtofl+3
  8681  00285C  0012               	return		;funcret
  8682  00285E                     __end_of___lwtofl:
  8683                           	opt stack 0
  8684                           tblptru	equ	0xFF8
  8685                           tblptrh	equ	0xFF7
  8686                           tblptrl	equ	0xFF6
  8687                           tablat	equ	0xFF5
  8688                           prodl	equ	0xFF3
  8689                           intcon	equ	0xFF2
  8690                           intcon2	equ	0xFF1
  8691                           postinc0	equ	0xFEE
  8692                           wreg	equ	0xFE8
  8693                           postdec1	equ	0xFE5
  8694                           fsr1l	equ	0xFE1
  8695                           indf2	equ	0xFDF
  8696                           postinc2	equ	0xFDE
  8697                           postdec2	equ	0xFDD
  8698                           fsr2h	equ	0xFDA
  8699                           fsr2l	equ	0xFD9
  8700                           status	equ	0xFD8
  8701                           
  8702 ;; *************** function ___flpack *****************
  8703 ;; Defined at:
  8704 ;;		line 63 in file "/opt/microchip/xc8/v1.34/sources/common/double.c"
  8705 ;; Parameters:    Size  Location     Type
  8706 ;;  arg             4    3[COMRAM] unsigned long 
  8707 ;;  exp             1    7[COMRAM] unsigned char 
  8708 ;;  sign            1    8[COMRAM] unsigned char 
  8709 ;; Auto vars:     Size  Location     Type
  8710 ;;		None
  8711 ;; Return value:  Size  Location     Type
  8712 ;;                  4    3[COMRAM] unsigned char 
  8713 ;; Registers used:
  8714 ;;		wreg, status,2, status,0
  8715 ;; Tracked objects:
  8716 ;;		On entry : 0/0
  8717 ;;		On exit  : 0/0
  8718 ;;		Unchanged: 0/0
  8719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8720 ;;      Params:         6       0       0       0       0       0       0       0       0
  8721 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8722 ;;      Temps:          4       0       0       0       0       0       0       0       0
  8723 ;;      Totals:        10       0       0       0       0       0       0       0       0
  8724 ;;Total ram usage:       10 bytes
  8725 ;; Hardware stack levels used:    1
  8726 ;; Hardware stack levels required when called:    1
  8727 ;; This function calls:
  8728 ;;		Nothing
  8729 ;; This function is called by:
  8730 ;;		___altofl
  8731 ;;		___awtofl
  8732 ;;		___fladd
  8733 ;;		___fldiv
  8734 ;;		___flmul
  8735 ;;		___lltofl
  8736 ;;		___lwtofl
  8737 ;; This function uses a non-reentrant model
  8738 ;;
  8739                           
  8740                           	psect	text53
  8741  001EAE                     __ptext53:
  8742                           	opt stack 0
  8743  001EAE                     ___flpack:
  8744                           	opt stack 27
  8745                           
  8746                           ;incstack = 0
  8747  001EAE  5008               	movf	___flpack@exp,w,c
  8748  001EB0  E005               	bz	l799
  8749  001EB2  5004               	movf	___flpack@arg,w,c
  8750  001EB4  1005               	iorwf	___flpack@arg+1,w,c
  8751  001EB6  1006               	iorwf	___flpack@arg+2,w,c
  8752  001EB8  1007               	iorwf	___flpack@arg+3,w,c
  8753  001EBA  E107               	bnz	l3648
  8754  001EBC                     l799:
  8755  001EBC  6A04               	clrf	?___flpack,c
  8756  001EBE  6A05               	clrf	?___flpack+1,c
  8757  001EC0  6A06               	clrf	?___flpack+2,c
  8758  001EC2  6A07               	clrf	?___flpack+3,c
  8759  001EC4  0012               	return	
  8760  001EC6                     l3646:
  8761  001EC6  2A08               	incf	___flpack@exp,f,c
  8762  001EC8  D84D               	call	PL38	;call to abstracted procedure
  8763  001ECA                     l3648:
  8764  001ECA  6A0A               	clrf	??___flpack& (0+255),c
  8765  001ECC  6A0B               	clrf	(??___flpack+1)& (0+255),c
  8766  001ECE  6A0C               	clrf	(??___flpack+2)& (0+255),c
  8767  001ED0  0EFE               	movlw	254
  8768  001ED2  1407               	andwf	___flpack@arg+3,w,c
  8769  001ED4  6E0D               	movwf	(??___flpack+3)& (0+255),c
  8770  001ED6  500A               	movf	??___flpack,w,c
  8771  001ED8  100B               	iorwf	??___flpack+1,w,c
  8772  001EDA  100C               	iorwf	??___flpack+2,w,c
  8773  001EDC  100D               	iorwf	??___flpack+3,w,c
  8774  001EDE  E008               	bz	l804
  8775  001EE0  D7F2               	goto	l3646
  8776  001EE2                     l3650:
  8777  001EE2  2A08               	incf	___flpack@exp,f,c
  8778  001EE4  2A04               	incf	___flpack@arg,f,c
  8779  001EE6  0E00               	movlw	0
  8780  001EE8  2205               	addwfc	___flpack@arg+1,f,c
  8781  001EEA  2206               	addwfc	___flpack@arg+2,f,c
  8782  001EEC  2207               	addwfc	___flpack@arg+3,f,c
  8783  001EEE  D83A               	call	PL38	;call to abstracted procedure
  8784  001EF0                     l804:
  8785  001EF0  6A0A               	clrf	??___flpack& (0+255),c
  8786  001EF2  6A0B               	clrf	(??___flpack+1)& (0+255),c
  8787  001EF4  6A0C               	clrf	(??___flpack+2)& (0+255),c
  8788  001EF6  5007               	movf	___flpack@arg+3,w,c
  8789  001EF8  6E0D               	movwf	(??___flpack+3)& (0+255),c
  8790  001EFA  500A               	movf	??___flpack,w,c
  8791  001EFC  100B               	iorwf	??___flpack+1,w,c
  8792  001EFE  100C               	iorwf	??___flpack+2,w,c
  8793  001F00  100D               	iorwf	??___flpack+3,w,c
  8794  001F02  E007               	bz	l3658
  8795  001F04  D7EE               	goto	l3650
  8796  001F06                     l3656:
  8797  001F06  0608               	decf	___flpack@exp,f,c
  8798  001F08  90D8               	bcf	status,0,c
  8799  001F0A  3604               	rlcf	___flpack@arg,f,c
  8800  001F0C  3605               	rlcf	___flpack@arg+1,f,c
  8801  001F0E  3606               	rlcf	___flpack@arg+2,f,c
  8802  001F10  3607               	rlcf	___flpack@arg+3,f,c
  8803  001F12                     l3658:
  8804  001F12  BE06               	btfsc	___flpack@arg+2,7,c
  8805  001F14  D003               	goto	l811
  8806  001F16  0E02               	movlw	2
  8807  001F18  6008               	cpfslt	___flpack@exp,c
  8808  001F1A  D7F5               	goto	l3656
  8809  001F1C                     l811:
  8810  001F1C  B008               	btfsc	___flpack@exp,0,c
  8811  001F1E  D002               	goto	l812
  8812  001F20  0E7F               	movlw	127
  8813  001F22  1606               	andwf	___flpack@arg+2,f,c
  8814  001F24                     l812:
  8815  001F24  90D8               	bcf	status,0,c
  8816  001F26  3208               	rrcf	___flpack@exp,f,c
  8817  001F28  C008  F00A         	movff	___flpack@exp,??___flpack
  8818  001F2C  6A0B               	clrf	(??___flpack+1)& (0+255),c
  8819  001F2E  6A0C               	clrf	(??___flpack+2)& (0+255),c
  8820  001F30  6A0D               	clrf	(??___flpack+3)& (0+255),c
  8821  001F32  C00A  F00D         	movff	??___flpack,??___flpack+3
  8822  001F36  6A0C               	clrf	??___flpack+2,c
  8823  001F38  6A0B               	clrf	??___flpack+1,c
  8824  001F3A  6A0A               	clrf	??___flpack,c
  8825  001F3C  500A               	movf	??___flpack,w,c
  8826  001F3E  1204               	iorwf	___flpack@arg,f,c
  8827  001F40  500B               	movf	??___flpack+1,w,c
  8828  001F42  1205               	iorwf	___flpack@arg+1,f,c
  8829  001F44  500C               	movf	??___flpack+2,w,c
  8830  001F46  1206               	iorwf	___flpack@arg+2,f,c
  8831  001F48  500D               	movf	??___flpack+3,w,c
  8832  001F4A  1207               	iorwf	___flpack@arg+3,f,c
  8833  001F4C  5009               	movf	___flpack@sign,w,c
  8834  001F4E  A4D8               	btfss	status,2,c
  8835  001F50  8E07               	bsf	___flpack@arg+3,7,c
  8836  001F52  C004  F004         	movff	___flpack@arg,?___flpack
  8837  001F56  C005  F005         	movff	___flpack@arg+1,?___flpack+1
  8838  001F5A  C006  F006         	movff	___flpack@arg+2,?___flpack+2
  8839  001F5E  C007  F007         	movff	___flpack@arg+3,?___flpack+3
  8840  001F62  0012               	return		;funcret
  8841  001F64                     __end_of___flpack:
  8842                           	opt stack 0
  8843  001F64                     PL38:
  8844                           	opt stack 27
  8845  001F64  90D8               	bcf	status,0,c
  8846  001F66  3207               	rrcf	___flpack@arg+3,f,c
  8847  001F68  3206               	rrcf	___flpack@arg+2,f,c
  8848  001F6A  3205               	rrcf	___flpack@arg+1,f,c
  8849  001F6C  3204               	rrcf	___flpack@arg,f,c
  8850  001F6E  0012               	return	
  8851  001F70                     __end_ofPL38:
  8852                           	opt stack 0
  8853                           tblptru	equ	0xFF8
  8854                           tblptrh	equ	0xFF7
  8855                           tblptrl	equ	0xFF6
  8856                           tablat	equ	0xFF5
  8857                           prodl	equ	0xFF3
  8858                           intcon	equ	0xFF2
  8859                           intcon2	equ	0xFF1
  8860                           postinc0	equ	0xFEE
  8861                           wreg	equ	0xFE8
  8862                           postdec1	equ	0xFE5
  8863                           fsr1l	equ	0xFE1
  8864                           indf2	equ	0xFDF
  8865                           postinc2	equ	0xFDE
  8866                           postdec2	equ	0xFDD
  8867                           fsr2h	equ	0xFDA
  8868                           fsr2l	equ	0xFD9
  8869                           status	equ	0xFD8
  8870                           
  8871 ;; *************** function _global_int *****************
  8872 ;; Defined at:
  8873 ;;		line 81 in file "../../../LC-meter.c"
  8874 ;; Parameters:    Size  Location     Type
  8875 ;;		None
  8876 ;; Auto vars:     Size  Location     Type
  8877 ;;		None
  8878 ;; Return value:  Size  Location     Type
  8879 ;;		None               void
  8880 ;; Registers used:
  8881 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8882 ;; Tracked objects:
  8883 ;;		On entry : 0/0
  8884 ;;		On exit  : 0/0
  8885 ;;		Unchanged: 0/0
  8886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8887 ;;      Params:         0       0       0       0       0       0       0       0       0
  8888 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8889 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8890 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8891 ;;Total ram usage:        3 bytes
  8892 ;; Hardware stack levels used:    1
  8893 ;; This function calls:
  8894 ;;		Nothing
  8895 ;; This function is called by:
  8896 ;;		Interrupt level 2
  8897 ;; This function uses a non-reentrant model
  8898 ;;
  8899                           
  8900                           	psect	intcode
  8901  000008                     __pintcode:
  8902                           	opt stack 0
  8903  000008                     _global_int:
  8904                           	opt stack 23
  8905                           
  8906                           ;incstack = 0
  8907  000008  CFD9 F002          	movff	fsr2l,??_global_int+1
  8908  00000C  CFDA F003          	movff	fsr2h,??_global_int+2
  8909                           
  8910                           ;LC-meter.c: 85: if(PIR1 & 0x02) {
  8911  000010  A29E               	btfss	3998,1,c	;volatile
  8912  000012  D02C               	goto	i2l3536
  8913                           
  8914                           ;LC-meter.c: 86: bres += 256;
  8915  000014  0100               	movlb	0	; () banked
  8916  000016  2BF0               	incf	(_bres+1)& (0+255),f,b	;volatile
  8917                           
  8918                           ;LC-meter.c: 87: if(bres >= ((unsigned long)((double)((20000000) / 4) / 1000))) {
  8919  000018  0E88               	movlw	136
  8920  00001A  5DEF               	subwf	_bres& (0+255),w,b	;volatile
  8921  00001C  0E13               	movlw	19
  8922  00001E  59F0               	subwfb	(_bres+1)& (0+255),w,b	;volatile
  8923  000020  E324               	bnc	i2l3534
  8924                           
  8925                           ; BSR set to: 0
  8926                           ;LC-meter.c: 88: bres -= ((unsigned long)((double)((20000000) / 4) / 1000));
  8927  000022  0E88               	movlw	136
  8928  000024  5FEF               	subwf	_bres& (0+255),f,b	;volatile
  8929  000026  0E13               	movlw	19
  8930  000028  5BF0               	subwfb	(_bres+1)& (0+255),f,b	;volatile
  8931                           
  8932                           ; BSR set to: 0
  8933                           ;LC-meter.c: 89: msecpart++;
  8934  00002A  4BF1               	infsnz	_msecpart& (0+255),f,b	;volatile
  8935  00002C  2BF2               	incf	(_msecpart+1)& (0+255),f,b	;volatile
  8936                           
  8937                           ; BSR set to: 0
  8938                           ;LC-meter.c: 90: LATC &= ~0b00000100; LATC |= (!!(msecpart >= 833)) << 2;;
  8939  00002E  948B               	bcf	3979,2,c	;volatile
  8940  000030  0E41               	movlw	65
  8941  000032  5DF1               	subwf	_msecpart& (0+255),w,b	;volatile
  8942  000034  0E03               	movlw	3
  8943  000036  59F2               	subwfb	(_msecpart+1)& (0+255),w,b	;volatile
  8944  000038  E303               	bnc	i2u262_40
  8945  00003A  6A01               	clrf	??_global_int& (0+255),c
  8946  00003C  2A01               	incf	??_global_int& (0+255),f,c
  8947  00003E  D001               	goto	i2u263_48
  8948  000040                     i2u262_40:
  8949  000040  6A01               	clrf	??_global_int& (0+255),c
  8950  000042                     i2u263_48:
  8951  000042  90D8               	bcf	status,0,c
  8952  000044  3601               	rlcf	??_global_int,f,c
  8953  000046  90D8               	bcf	status,0,c
  8954  000048  3401               	rlcf	??_global_int,w,c
  8955  00004A  128B               	iorwf	3979,f,c	;volatile
  8956                           
  8957                           ;LC-meter.c: 92: if(msecpart >= 1000) {
  8958  00004C  0EE8               	movlw	232
  8959  00004E  0100               	movlb	0	; () banked
  8960  000050  5DF1               	subwf	_msecpart& (0+255),w,b	;volatile
  8961  000052  0E03               	movlw	3
  8962  000054  59F2               	subwfb	(_msecpart+1)& (0+255),w,b	;volatile
  8963  000056  E309               	bnc	i2l3534
  8964                           
  8965                           ; BSR set to: 0
  8966                           ;LC-meter.c: 94: seconds++;
  8967  000058  2BC6               	incf	_seconds& (0+255),f,b	;volatile
  8968  00005A  0E00               	movlw	0
  8969  00005C  23C7               	addwfc	(_seconds+1)& (0+255),f,b	;volatile
  8970  00005E  23C8               	addwfc	(_seconds+2)& (0+255),f,b	;volatile
  8971  000060  23C9               	addwfc	(_seconds+3)& (0+255),f,b	;volatile
  8972                           
  8973                           ;LC-meter.c: 95: msecpart -= 1000;
  8974  000062  0EE8               	movlw	232
  8975  000064  5FF1               	subwf	_msecpart& (0+255),f,b	;volatile
  8976  000066  0E03               	movlw	3
  8977  000068  5BF2               	subwfb	(_msecpart+1)& (0+255),f,b	;volatile
  8978  00006A                     i2l3534:
  8979                           
  8980                           ; BSR set to: 0
  8981                           ;LC-meter.c: 96: }
  8982                           ;LC-meter.c: 97: }
  8983                           ;LC-meter.c: 99: PIR1 &= ~0b10;
  8984  00006A  929E               	bcf	3998,1,c	;volatile
  8985  00006C                     i2l3536:
  8986                           
  8987                           ;LC-meter.c: 100: }
  8988                           ;LC-meter.c: 102: if(RCIF) { rxfifo[rxiptr] = RCREG; ser_tmp = (rxiptr + 1) & ((uint8_t)
      +                          16 - 1); if(ser_tmp != rxoptr) rxiptr = ser_tmp; }; if(TXIF && TXIE) { TXREG = txfifo[tx
      +                          optr]; ++txoptr; txoptr &= ((uint8_t)16 - 1); if(txoptr == txiptr) { TXIE = 0; }; TXIF =
      +                           0; 
  8989  00006C  AA9E               	btfss	3998,5,c	;volatile
  8990  00006E  D011               	goto	i2l545
  8991  000070  0E00               	movlw	low _rxfifo
  8992  000072  0100               	movlb	0	; () banked
  8993  000074  25D3               	addwf	_rxiptr& (0+255),w,b	;volatile
  8994  000076  6ED9               	movwf	fsr2l,c
  8995  000078  6ADA               	clrf	fsr2h,c
  8996  00007A  0E01               	movlw	high _rxfifo
  8997  00007C  22DA               	addwfc	fsr2h,f,c
  8998  00007E  CFAE FFDF          	movff	4014,indf2	;volatile
  8999                           
  9000                           ; BSR set to: 0
  9001  000082  29D3               	incf	_rxiptr& (0+255),w,b	;volatile
  9002  000084  0B0F               	andlw	15
  9003  000086  6FD5               	movwf	_ser_tmp& (0+255),b
  9004                           
  9005                           ; BSR set to: 0
  9006  000088  51D4               	movf	_rxoptr& (0+255),w,b	;volatile
  9007  00008A  19D5               	xorwf	_ser_tmp& (0+255),w,b
  9008  00008C  A4D8               	btfss	status,2,c
  9009                           
  9010                           ; BSR set to: 0
  9011  00008E  C0D5  F0D3         	movff	_ser_tmp,_rxiptr	;volatile
  9012  000092                     i2l545:
  9013  000092  B89E               	btfsc	3998,4,c	;volatile
  9014  000094  A89D               	btfss	3997,4,c	;volatile
  9015  000096  D010               	goto	i2l549
  9016  000098  0E10               	movlw	low _txfifo
  9017  00009A  245C               	addwf	_txoptr,w,c	;volatile
  9018  00009C  6ED9               	movwf	fsr2l,c
  9019  00009E  6ADA               	clrf	fsr2h,c
  9020  0000A0  0E01               	movlw	high _txfifo
  9021  0000A2  22DA               	addwfc	fsr2h,f,c
  9022  0000A4  50DF               	movf	indf2,w,c
  9023  0000A6  6EAD               	movwf	4013,c	;volatile
  9024  0000A8  2A5C               	incf	_txoptr,f,c	;volatile
  9025  0000AA  0E0F               	movlw	15
  9026  0000AC  165C               	andwf	_txoptr,f,c	;volatile
  9027  0000AE  505B               	movf	_txiptr,w,c	;volatile
  9028  0000B0  185C               	xorwf	_txoptr,w,c	;volatile
  9029  0000B2  B4D8               	btfsc	status,2,c
  9030  0000B4  989D               	bcf	3997,4,c	;volatile
  9031  0000B6  989E               	bcf	3998,4,c	;volatile
  9032  0000B8                     i2l549:
  9033  0000B8  C003  FFDA         	movff	??_global_int+2,fsr2h
  9034  0000BC  C002  FFD9         	movff	??_global_int+1,fsr2l
  9035  0000C0  0011               	retfie		f
  9036  0000C2                     __end_of_global_int:
  9037                           	opt stack 0
  9038                           tblptru	equ	0xFF8
  9039                           tblptrh	equ	0xFF7
  9040                           tblptrl	equ	0xFF6
  9041                           tablat	equ	0xFF5
  9042                           prodl	equ	0xFF3
  9043                           intcon	equ	0xFF2
  9044                           intcon2	equ	0xFF1
  9045                           postinc0	equ	0xFEE
  9046                           wreg	equ	0xFE8
  9047                           postdec1	equ	0xFE5
  9048                           fsr1l	equ	0xFE1
  9049                           indf2	equ	0xFDF
  9050                           postinc2	equ	0xFDE
  9051                           postdec2	equ	0xFDD
  9052                           fsr2h	equ	0xFDA
  9053                           fsr2l	equ	0xFD9
  9054                           status	equ	0xFD8
  9055                           tblptru	equ	0xFF8
  9056                           tblptrh	equ	0xFF7
  9057                           tblptrl	equ	0xFF6
  9058                           tablat	equ	0xFF5
  9059                           prodl	equ	0xFF3
  9060                           intcon	equ	0xFF2
  9061                           intcon2	equ	0xFF1
  9062                           postinc0	equ	0xFEE
  9063                           wreg	equ	0xFE8
  9064                           postdec1	equ	0xFE5
  9065                           fsr1l	equ	0xFE1
  9066                           indf2	equ	0xFDF
  9067                           postinc2	equ	0xFDE
  9068                           postdec2	equ	0xFDD
  9069                           fsr2h	equ	0xFDA
  9070                           fsr2l	equ	0xFD9
  9071                           status	equ	0xFD8
  9072                           
  9073                           	psect	rparam
  9074  0000                     tblptru	equ	0xFF8
  9075                           tblptrh	equ	0xFF7
  9076                           tblptrl	equ	0xFF6
  9077                           tablat	equ	0xFF5
  9078                           prodl	equ	0xFF3
  9079                           intcon	equ	0xFF2
  9080                           intcon2	equ	0xFF1
  9081                           postinc0	equ	0xFEE
  9082                           wreg	equ	0xFE8
  9083                           postdec1	equ	0xFE5
  9084                           fsr1l	equ	0xFE1
  9085                           indf2	equ	0xFDF
  9086                           postinc2	equ	0xFDE
  9087                           postdec2	equ	0xFDD
  9088                           fsr2h	equ	0xFDA
  9089                           fsr2l	equ	0xFD9
  9090                           status	equ	0xFD8
  9091                           tblptru	equ	0xFF8
  9092                           tblptrh	equ	0xFF7
  9093                           tblptrl	equ	0xFF6
  9094                           tablat	equ	0xFF5
  9095                           prodl	equ	0xFF3
  9096                           intcon	equ	0xFF2
  9097                           intcon2	equ	0xFF1
  9098                           postinc0	equ	0xFEE
  9099                           wreg	equ	0xFE8
  9100                           postdec1	equ	0xFE5
  9101                           fsr1l	equ	0xFE1
  9102                           indf2	equ	0xFDF
  9103                           postinc2	equ	0xFDE
  9104                           postdec2	equ	0xFDD
  9105                           fsr2h	equ	0xFDA
  9106                           fsr2l	equ	0xFD9
  9107                           status	equ	0xFD8


Data Sizes:
    Strings     174
    Constant    76
    Data        5
    BSS         84
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     89      92
    BANK0           160     90     152
    BANK1           256      0      32
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(1) Largest target is 40
		 -> exp@coeff(CODE[40]), log@coeff(CODE[36]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(BANK0[2]), 

    main$404	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_31(CODE[16]), STR_30(CODE[16]), 

    put_str@s	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_15(CODE[13]), STR_6(CODE[10]), STR_3(CODE[15]), STR_1(CODE[12]), 

    print_unit@units	PTR const unsigned char [8] size(1) Largest target is 3
		 -> STR_23(CODE[3]), STR_22(CODE[3]), STR_21(CODE[3]), STR_20(CODE[3]), 
		 -> STR_19(CODE[3]), STR_18(CODE[3]), STR_17(CODE[3]), STR_16(CODE[2]), 

    ser_puts@s	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_37(CODE[3]), STR_32(CODE[3]), STR_31(CODE[16]), STR_30(CODE[16]), 
		 -> STR_28(CODE[3]), STR_24(CODE[3]), STR_14(CODE[3]), STR_13(CODE[5]), 
		 -> STR_12(CODE[3]), STR_11(CODE[8]), STR_10(CODE[6]), STR_9(CODE[6]), 
		 -> STR_8(CODE[6]), STR_7(CODE[5]), STR_4(CODE[3]), STR_2(CODE[3]), 

    lcd_puts@string	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_36(CODE[5]), STR_35(CODE[6]), STR_34(CODE[7]), STR_33(CODE[7]), 
		 -> STR_29(CODE[10]), STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[6]), 

    buffer_puts@x	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_5(CODE[6]), 


Critical Paths under _main in COMRAM

    _print_indicator->_lcd_gotoxy
    _measure_inductance->___fltol
    _measure_capacitance->___fltol
    _print_unit->_lcd_gotoxy
    _print_reading->_format_number
    _lcd_puts->_lcd_send
    _format_xint32->_format_number
    _format_double->___fltol
    _pow->___fltol
    _exp->___fltol
    _ldexp->_eval_poly
    _floor->___fltol
    ___fltol->_log10
    ___altofl->___fltol
    ___flsub->___fladd
    ___fldiv->___flpack
    ___lltofl->___flpack
    _log10->_log
    _log->_eval_poly
    _eval_poly->___fladd
    ___flmul->___fldiv
    ___fladd->___flmul
    ___awtofl->___flpack
    _lcd_begin->_lcd_command
    _calibrate->___lwtofl
    _put_str->_output_putch
    _output_putch->_lcd_send
    _measure_freq->_format_number
    _print_buffer->_ser_puts
    _ser_puts->_ser_putch
    _lcd_gotoxy->_lcd_command
    _format_number->___lwdiv
    _buffer_puts->_buffer_putch
    _lcd_clear->_lcd_command
    _lcd_command->_lcd_send
    _lcd_send->_lcd_write4bits
    ___lwtofl->_measure_freq

Critical Paths under _global_int in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_measure_capacitance
    _measure_inductance->___fltol
    _measure_capacitance->_format_double
    _format_double->_pow
    _pow->_exp
    _exp->_floor
    _floor->___altofl
    ___altofl->___fltol

Critical Paths under _global_int in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _global_int in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _global_int in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _global_int in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _global_int in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _global_int in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _global_int in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _global_int in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  382808
                                             88 BANK0      2     2      0
                          _calibrate
                          _delay10ms
                      _format_double
                          _lcd_begin
                          _lcd_clear
                         _lcd_gotoxy
                           _lcd_init
                           _lcd_puts
                _measure_capacitance
                 _measure_inductance
                    _print_indicator
                           _ser_init
                           _ser_puts
                        _timer0_init
                        _timer2_init
 ---------------------------------------------------------------------------------
 (1) _timer2_init                                          4     4      0      90
                                              3 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _timer0_init                                         12    12      0     297
                                              3 COMRAM    12    12      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _print_indicator                                      1     1      0    2406
                                             13 COMRAM     1     1      0
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (1) _measure_inductance                                  55    55      0   36901
                                              2 BANK0     43    43      0
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___lwtofl
                         _lcd_gotoxy
                       _measure_freq
                      _print_reading
                         _print_unit
                            _put_str
 ---------------------------------------------------------------------------------
 (1) _measure_capacitance                                 19    19      0  183661
                                             69 BANK0     19    19      0
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___lwtofl
                      _format_double
                      _format_xint32
                         _lcd_gotoxy
                       _measure_freq
                      _print_reading
                         _print_unit
                            _put_str
                          _ser_putch
                           _ser_puts
 ---------------------------------------------------------------------------------
 (2) _print_unit                                           3     3      0    2050
                                             13 COMRAM     2     2      0
                         _lcd_gotoxy
                           _ser_puts
 ---------------------------------------------------------------------------------
 (2) _print_reading                                        6     4      2    6020
                                             53 COMRAM     6     4      2
                            ___lwdiv
                            ___lwmod
                      _format_number
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (2) _lcd_puts                                             3     3      0     806
                                              6 COMRAM     3     3      0
                           _lcd_send
 ---------------------------------------------------------------------------------
 (2) _format_xint32                                        4     0      4    2920
                                             53 COMRAM     4     0      4
                       _buffer_putch
                      _format_number
 ---------------------------------------------------------------------------------
 (2) _format_double                                       20    16      4  143763
                                             49 BANK0     20    16      4
                           ___awtofl
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                       _buffer_putch
                              _floor
                              _log10
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                 21    13      8   80457
                                             28 BANK0     21    13      8
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___lltofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _exp                                                 11     7      4   43098
                                             17 BANK0     11     7      4
                           ___awtofl
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (5) _ldexp                                                8     2      6     354
                                             67 COMRAM     8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (5) _floor                                               10     6      4   10114
                                              7 BANK0     10     6      4
                           ___altofl
                            ___fladd
                            ___fldiv (ARG)
                             ___flge
                            ___fltol
                              _frexp
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     882
                                             81 COMRAM     8     4      4
                                              0 BANK0      2     2      0
                            ___fldiv (ARG)
                              _log10 (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                               8     0      8    1594
                                              3 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (6) ___altofl                                             5     1      4    2446
                                              2 BANK0      5     1      4
                           ___flpack
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    5179
                                             55 COMRAM     8     0      8
                           ___awtofl (ARG)
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4     204
                                              3 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             15     7      8    3931
                                             13 COMRAM    15     7      8
                           ___flpack
 ---------------------------------------------------------------------------------
 (4) ___lltofl                                             4     0      4    2344
                                             13 COMRAM     4     0      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (3) _log10                                                8     4      4   31773
                                             73 COMRAM     8     4      4
                            ___flmul
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  6     2      4   25256
                                             67 COMRAM     6     2      4
                           ___awtofl
                            ___fladd
                            ___flmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                7     2      5     436
                                              3 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           12     5      7   11199
                                             55 COMRAM    12     5      7
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             15     7      8    6342
                                             28 COMRAM    15     7      8
                           ___awtofl (ARG)
                            ___fldiv (ARG)
                           ___flpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             12     4      8    4213
                                             43 COMRAM    12     4      8
                           ___awtofl (ARG)
                            ___flmul (ARG)
                           ___flpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awtofl                                             9     5      4    2686
                                             13 COMRAM     5     1      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             3     3      0      46
                                              3 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcd_begin                                            3     2      1     685
                                              7 COMRAM     3     2      1
                        _lcd_command
                     _lcd_write4bits
 ---------------------------------------------------------------------------------
 (1) _calibrate                                            1     1      0   11479
                                             62 COMRAM     1     1      0
                           ___lwtofl
                          _delay10ms
                          _lcd_clear
                         _lcd_gotoxy
                           _lcd_send
                       _measure_freq
                            _put_str
                           _ser_puts
 ---------------------------------------------------------------------------------
 (2) _put_str                                              4     4      0     764
                                              7 COMRAM     4     4      0
                       _output_putch
 ---------------------------------------------------------------------------------
 (3) _output_putch                                         1     1      0     566
                                              6 COMRAM     1     1      0
                           _lcd_send
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _measure_freq                                         5     3      2    4906
                                             53 COMRAM     5     3      2
                        _buffer_init
                        _buffer_puts
                      _format_number
                         _lcd_gotoxy
                       _print_buffer
                     _timer0_read_ps
 ---------------------------------------------------------------------------------
 (3) _timer0_read_ps                                       7     5      2     114
                                              3 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (3) _print_buffer                                         2     2      0     540
                                              5 COMRAM     2     2      0
                          _ser_putch
                           _ser_puts
 ---------------------------------------------------------------------------------
 (1) _ser_puts                                             1     1      0     472
                                              4 COMRAM     1     1      0
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _ser_putch                                            1     1      0      22
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           6     5      1    1578
                                              7 COMRAM     6     5      1
                        _lcd_command
 ---------------------------------------------------------------------------------
 (3) _format_number                                       43    39      4    2535
                                             10 COMRAM    43    39      4
                            ___lwdiv
                            ___lwmod
                       _buffer_putch
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     451
                                              3 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     454
                                              3 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _buffer_puts                                          1     1      0      94
                                              6 COMRAM     1     1      0
                       _buffer_putch
 ---------------------------------------------------------------------------------
 (4) _buffer_putch                                         3     3      0      22
                                              3 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _buffer_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            1     1      0     522
                                              7 COMRAM     1     1      0
                        _lcd_command
 ---------------------------------------------------------------------------------
 (3) _lcd_command                                          1     1      0     522
                                              6 COMRAM     1     1      0
                           _lcd_send
 ---------------------------------------------------------------------------------
 (3) _lcd_send                                             2     1      1     500
                                              4 COMRAM     2     1      1
                     _lcd_write4bits
 ---------------------------------------------------------------------------------
 (4) _lcd_write4bits                                       1     1      0      22
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _delay10ms                                            1     1      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4    2669
                                             58 COMRAM     4     0      4
                           ___flpack
                       _measure_freq (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6    2248
                                              3 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _global_int                                           3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calibrate
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _buffer_init
         _buffer_puts
           _buffer_putch
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _print_buffer
           _ser_putch
           _ser_puts
             _ser_putch
         _timer0_read_ps
     _delay10ms
     _lcd_clear
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_send
       _lcd_write4bits
     _measure_freq
       _buffer_init
       _buffer_puts
         _buffer_putch
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _print_buffer
         _ser_putch
         _ser_puts
           _ser_putch
       _timer0_read_ps
     _put_str
       _output_putch
         _lcd_send
           _lcd_write4bits
         _ser_putch
     _ser_puts
       _ser_putch
   _delay10ms
   _format_double
     ___awtofl
       ___flpack
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     _buffer_putch
     _floor
       ___altofl
         ___flpack
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
       ___fladd
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___fldiv (ARG)
         ___flpack
       ___flge (ARG)
       ___fltol (ARG)
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       _frexp (ARG)
     _log10
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       _log
         ___awtofl
           ___flpack
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _frexp
     _pow
       ___flge
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       ___flneg
       ___fltol
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       ___lltofl
         ___flpack
       _exp
         ___awtofl
           ___flpack
         ___fldiv
           ___flpack
         ___flge
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         ___flsub
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _floor
           ___altofl
             ___flpack
             ___fltol (ARG)
               ___fldiv (ARG)
                 ___flpack
               _log10 (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _log
                   ___awtofl
                     ___flpack
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___fladd
                       ___awtofl (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                   _frexp
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flge (ARG)
           ___fltol (ARG)
             ___fldiv (ARG)
               ___flpack
             _log10 (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
           _frexp (ARG)
         _ldexp
           _eval_poly (ARG)
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
         _log (ARG)
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
       _log
         ___awtofl
           ___flpack
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _frexp
   _lcd_begin
     _lcd_command
       _lcd_send
         _lcd_write4bits
     _lcd_write4bits
   _lcd_clear
     _lcd_command
       _lcd_send
         _lcd_write4bits
   _lcd_gotoxy
     _lcd_command
       _lcd_send
         _lcd_write4bits
   _lcd_init
   _lcd_puts
     _lcd_send
       _lcd_write4bits
   _measure_capacitance
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _buffer_init
         _buffer_puts
           _buffer_putch
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _print_buffer
           _ser_putch
           _ser_puts
             _ser_putch
         _timer0_read_ps
     _format_double
       ___awtofl
         ___flpack
       ___fldiv
         ___flpack
       ___flge
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       ___flsub
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
       ___fltol
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       _buffer_putch
       _floor
         ___altofl
           ___flpack
           ___fltol (ARG)
             ___fldiv (ARG)
               ___flpack
             _log10 (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flge (ARG)
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
         _frexp (ARG)
       _log10
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
       _pow
         ___flge
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         ___fltol
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
         ___lltofl
           ___flpack
         _exp
           ___awtofl
             ___flpack
           ___fldiv
             ___flpack
           ___flge
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg
           ___flsub
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           ___fltol
             ___fldiv (ARG)
               ___flpack
             _log10 (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _floor
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 _log10 (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   _log
                     ___awtofl
                       ___flpack
                     ___fladd
                       ___awtofl (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     _eval_poly
                       ___fladd
                         ___awtofl (ARG)
                           ___flpack
                         ___flmul (ARG)
                           ___awtofl (ARG)
                             ___flpack
                           ___fldiv (ARG)
                             ___flpack
                           ___flpack (ARG)
                           _frexp (ARG)
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flmul
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                     _frexp
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flge (ARG)
             ___fltol (ARG)
               ___fldiv (ARG)
                 ___flpack
               _log10 (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _log
                   ___awtofl
                     ___flpack
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___fladd
                       ___awtofl (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                   _frexp
             _frexp (ARG)
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
           _log (ARG)
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     _format_xint32
       _buffer_putch
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _measure_freq
       _buffer_init
       _buffer_puts
         _buffer_putch
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _print_buffer
         _ser_putch
         _ser_puts
           _ser_putch
       _timer0_read_ps
     _print_reading
       ___lwdiv
       ___lwmod
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _lcd_puts
         _lcd_send
           _lcd_write4bits
     _print_unit
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _ser_puts
         _ser_putch
     _put_str
       _output_putch
         _lcd_send
           _lcd_write4bits
         _ser_putch
     _ser_putch
     _ser_puts
       _ser_putch
   _measure_inductance
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _buffer_init
         _buffer_puts
           _buffer_putch
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _print_buffer
           _ser_putch
           _ser_puts
             _ser_putch
         _timer0_read_ps
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _measure_freq
       _buffer_init
       _buffer_puts
         _buffer_putch
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _print_buffer
         _ser_putch
         _ser_puts
           _ser_putch
       _timer0_read_ps
     _print_reading
       ___lwdiv
       ___lwmod
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _lcd_puts
         _lcd_send
           _lcd_write4bits
     _print_unit
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _ser_puts
         _ser_putch
     _put_str
       _output_putch
         _lcd_send
           _lcd_write4bits
         _ser_putch
   _print_indicator
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_puts
       _lcd_send
         _lcd_write4bits
   _ser_init
   _ser_puts
     _ser_putch
   _timer0_init
   _timer2_init

 _global_int (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      20       8       12.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5A      98       5       95.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     59      5C       1       96.8%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     114       6        0.0%
DATA                 0      0     114       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Sep 17 13:23:05 2019

                ___altofl@sign 0066                   ___fldiv@cntr 001A                   ___fldiv@sign 001C  
                           PL2 0D26                             PL4 10BE                             PL6 10E0  
                           PL8 0D48                             _F1 00E7                             _F2 00BA  
                           _F3 00BE                   ___flpack@arg 0004                            PL10 1102  
                          PL20 112A                            PL12 17F8                            PL30 2824  
                          PL22 113C                            PL14 1118                            PL40 2952  
                          PL32 115E                            PL24 27FA                            PL16 20B8  
                          PL42 2970                            PL34 116E                            PL26 1924  
                          PL18 1E8E                            PL36 1EA0                            PL28 114E  
                          PL38 1F64                   ___flpack@exp 0008                            l210 2516  
                          l160 27CA                            l158 27C6                            l811 1F1C  
                          l812 1F24                            l804 1EF0                            l820 16D4  
                          l903 1B74                            l559 1A2E                            l824 16FC  
                          l906 1C22                            l835 1794                            l860 24EC  
                          l799 1EBC                            _GIE 007F97                 lcd_begin@lines 000A  
                          _RX9 007D5E                            _TX9 007D66                            _exp 117C  
                          _log 180C                            _pow 1398                            wreg 000FE8  
                 __CFG_FOSC$XT 000000             timer0_read_ps@prev 0008                   ___flmul@cntr 002A  
             _format_number$68 0031                   ___flmul@sign 002B         __end_of_lcd_write4bits 291E  
                ___flpack@sign 0009                   ___fltol@exp1 0061                           l1202 1230  
                         l1203 1386                           l1135 2596                           l1145 26AA  
                         l4000 1446                           l1177 1518                           l3052 2712  
                         l3132 281C                           l3212 1D2E                           l3204 1D20  
                         l4004 1470                           l3060 27F2                           l3300 231C  
                         l3230 1D7A                           l3128 2812                           l3056 27E6  
                         l4200 0CA4                           l3090 289A                           l4034 1688  
                         l4018 155C                           l3306 2328                           l4036 168E  
                         l4204 0CC8                           l3308 232E                           l3086 288A  
                         l3078 2532                           l3238 1DB2                           l4134 0E98  
                         l4206 0CCE                           l3270 22CE                           l2720 29A0  
                         l4160 103E                           l3520 2990                           l2722 29A2  
                         l2634 2508                           l2810 21B6                           l2628 24D6  
                         l2820 21CE                           l2804 2186                           l4156 1022  
                         l4164 1062                           l3292 2304                           l3284 22F0  
                         l3276 22DC                           l3268 22C8                           l4078 1CF8  
                         l3710 1728                           l2646 2354                           l3294 230A  
                         l3286 22F6                           l3278 22E2                           l2840 25C2  
                         l2912 26A0                           l2904 2682                           l2728 28B0  
                         l3720 175C                           l3800 222A                           l2824 21DA  
                         l4272 19F6                           l3650 1EE2                           l2906 268A  
                         l2850 2942                           l3730 178E                           l3722 1762  
                         l4186 094C                           l2908 268E                           l3716 1748  
                         l4196 0C86                           l4292 1A2A                           l3646 1EC6  
                         l2854 294A                           l3734 17AA                           l3718 1754  
                         l3910 203A                           l3830 22A0                           l3822 227C  
                         l3814 2264                           l3656 1F06                           l3648 1ECA  
                         l2960 2960                           l3904 26C4                           l3728 1782  
                         l3912 20A0                           l3680 2604                           l3824 2288  
                         l4288 1A1E                           l3658 1F12                           l3746 17CA  
                         l3690 16E6                           l3770 1E38                           l3754 1DFE  
                         l3922 181A                           l3826 228C                           l3818 2274  
                         l2964 2968                           l2884 2566                           l2796 292C  
                         l3844 1B7E                           l2886 256E                           l2982 20FA  
                         l3782 1E4E                           l3758 1E12                           l3926 182E  
                         l3862 1F98                           l3942 1198                           l2896 258C  
                         l2888 2572                           l2992 2136                           l2976 20DA  
                         l3696 170E                           l3848 1B9A                           l3952 11FE  
                         l2994 213C                           l3882 1FE4                           l3874 1FB6  
                         l3858 1F84                           l2996 2150                           l3972 1352  
                         l3948 11CC                           ?_exp 0071                           ?_log 0044  
                         l3894 2640                           l3798 2220                           l3994 13E6  
                         l3988 13CC                           ?_pow 007C                           STR_1 0889  
                         STR_2 08F8                           STR_3 086D                           STR_4 08F8  
                         STR_5 08CA                           STR_6 089F                           STR_7 08DA  
                         STR_8 08B8                           STR_9 08BE                           _BRGH 007D62  
                         _CREN 007D5C                           _LATB 000F8A                           _LATC 000F8B  
                         _CCal 00EB                           u3080 2248                           u3160 1B88  
                         u3085 223E                           _PIE1 000F9D                           u2480 277C  
                         u3370 143C                           u3607 1DA0                           u3617 1DD4  
                         u2498 277E                           u3707 1AD4                           u3627 1A52  
                         _PEIE 007F96                           u3717 1AE4                           u3637 1A64  
                         u3557 1D34                           u3727 1AF4                           u3647 1A74  
                         u3567 1D50                           u3737 29BC                           u3657 1A84  
                         u3577 1D62                           u3747 290C                           u3667 1A94  
                         u3587 1D6E                           _RCIF 007CF5                           u3757 2916  
                         u3677 1AA4                           u3597 1D88                           u3687 1AB4  
                         u3697 1AC4                           _PIR1 000F9E                           _TMR0 000FD6  
                         _TMR2 000FBC                           _SPEN 007D5F                           _TXIE 007CEC  
                         _TXIF 007CF4                           _TXEN 007D65                           _SYNC 007D64  
                __CFG_FCMEN$ON 000000                   __CFG_WRTB$ON 000000                   __CFG_WRTC$ON 000000  
                         _bres 00EF                           _main 1934                           _mode 00F7  
                         fsr2h 000FDA                           fsr1l 000FE1                           indf2 000FDF  
                         fsr2l 000FD9                           exp@x 0071                           log@x 0044  
        __size_of_output_putch 0012                           pow@x 007C                           pow@y 0080  
                         prodl 000FF3     __end_of_measure_inductance 0D26                           start 00C2  
          timer0_read_ps@count 0009                 ??_buffer_putch 0004                  __CFG_MCLRE$ON 000000  
                 ___param_bank 000010                _timer0_init$152 0004                _timer0_init$153 0006  
              _timer0_init$154 0008                _timer0_init$155 000A                _timer0_init$156 000C  
                 buffer_puts@x 0007            lcd_write4bits@value 0004                   lcd_send@mode 0005  
                        ??_exp 005A                          ??_log 0048                          ??_pow 005A  
                ___fltol@sign1 0060                __end_of___fladd 17F8                          ?_main 0001  
              __end_of___fldiv 2020                __end_of___flneg 293E                          STR_10 08C4  
                        STR_11 08A9                          STR_12 08F8                          STR_20 08E3  
                        STR_21 08EC                          STR_13 08D5                          STR_14 08F8  
                        STR_22 08E6                          STR_30 084D                          STR_23 08E9  
                        STR_15 087C                          STR_31 085D                          STR_32 08F8  
                        STR_24 08F8                          STR_25 08B2                          STR_17 08EF  
                        STR_33 08B1                          STR_18 08F5                          STR_26 08DF  
                        STR_27 08B4                          STR_19 08F2                          STR_28 08F8  
                        STR_36 08D0                          STR_29 0895                __end_of___flmul 1E8E  
              __end_of___flsub 2676                __end_of___fltol 22B2                          _T0CON 000FD5  
                        _T2CON 000FBA                          _LATC7 007C5F                __end_of___lwdiv 25A0  
              __end_of___lwmod 26B4                          i2l545 0092                          i2l549 00B8  
                        _RCREG 000FAE               lcd_begin@dotsize 0008                          _SPBRG 000FAF  
                        _PORTC 000F82                          _TRISA 000F92                          _TRISB 000F93  
                        _TRISC 000F94                          _TXREG 000FAD                 __CFG_EBTR0$OFF 000000  
               __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000                  ___awtofl@sign 0012  
                 main@new_mode 00B9                 __CFG_EBTR3$OFF 000000                  __CFG_WRTD$OFF 000000  
                        _log10 241A                          _blink 00CE                          _floor 1B42  
                        _ldexp 2172                          _frexp 2334                   _output_putch 29C6  
              ?_lcd_write4bits 0001                          _msecs 00C2                          tablat 000FF5  
                        pow@yi 008D                format_number@di 0034                          status 000FD8  
              __end_of_put_str 2824                ??_print_reading 0038                  print_buffer@i 0007  
                  exp@exponent 0079                    ldexp@newexp 0048                __initialization 2474  
                  log@exponent 0048                   __end_of_main 1A48               format_double@num 0091  
                lcd_gotoxy@col 0009                  lcd_gotoxy@row 0008                  ?_measure_freq 0036  
       __size_of_format_double 0188                         ??_main 005A                  lcd_send@value 0006  
          format_double@weight 009D                  __activetblptr 000001         __size_of_format_number 00A8  
       __size_of_format_xint32 0034            lcd_init@fourbitmode 0004                         ?_log10 004A  
                       ?_floor 0067                         ?_ldexp 0044                         ?_frexp 0004  
             __end_of___altofl 2632               __end_of___flpack 1F64               __end_of___awtofl 26EE  
             __end_of___lltofl 27B4                 __CFG_WDTEN$OFF 000000                         i2l3534 006A  
                       i2l3536 006C                         _INTCON 000FF2               __end_of___lwtofl 285E  
                       _TRISC6 007CA6               __end_of_lcd_init 27E0           __size_of_lcd_command 000C  
             __end_of_lcd_send 29B0                         ___flge 24C0               __end_of_lcd_puts 27FA  
                    ??___fladd 0034                      ??___fldiv 0016                      ??___flneg 0008  
               __CFG_STVREN$ON 000000                      ??___flmul 0025                      ??___flsub 0040  
                    ??___fltol 0056                   ?_timer0_init 0001           __size_of_buffer_init 000C  
               ??_measure_freq 0038                      ??___lwdiv 0008                   ?_timer2_init 0001  
                    ??___lwmod 0008                         _buffer 00D6           __size_of_buffer_puts 0014  
                       clear_0 247A                         clear_1 2486                         log10@x 004A  
                       _rxfifo 0100                         _txfifo 0110                         _rxiptr 00D3  
                       _rxoptr 00D4                         floor@i 006B                         _txiptr 005B  
                       floor@x 0067                         _txoptr 005C               __end_of_ser_init 28FC  
             __end_of_ser_puts 2952             timer2_init@ps_mode 0007                   __mediumconst 0000  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
         __end_of_buffer_putch 25EA               format_number@buf 0011               format_number@pad 000E  
      _measure_inductance$1111 006A        _measure_inductance$1112 007B        _measure_inductance$1113 007F  
      _measure_inductance$1114 0083        _measure_inductance$1115 006E        _measure_inductance$1116 0072  
      _measure_inductance$1117 0076                      ??_put_str 0008                     ___fladd@f1 002C  
                   ___fladd@f2 0030                     ___flge@ff1 0004                     ___flge@ff2 0008  
             __end_ofexp@coeff 0829                  _format_double 152A               __end_oflog@coeff 084D  
                   ___altofl@c 0062                     ___fldiv@f1 000E                     ___fldiv@f2 0012  
                   ___fldiv@f3 0016                     __accesstop 0060        __end_of__initialization 24B2  
              __CFG_PBADEN$OFF 000000                     ___flneg@f1 0004                  _format_number 20CA  
                _format_xint32 2724                     ___flmul@f1 001D                     ___flmul@f2 0021  
                 eval_poly@res 0040                  ___rparam_used 000001                     ___flsub@f1 0038  
                   ___flsub@f2 003C                     ___fltol@f1 0052                     ___awtofl@c 000E  
       measure_capacitance@Cin 00B4   __size_of_measure_capacitance 0360         measure_capacitance@var 00B2  
        lcd_gotoxy@row_offsets 000A                 __pcstackCOMRAM 0001             __size_of_calibrate 00E2  
                 __pidataBANK0 29F0                     ___lltofl@c 000E             __size_of_delay10ms 0002  
                __end_of_log10 2474                  __end_of_floor 1C34                  __end_of_ldexp 2214  
                __end_of_frexp 23AC                     __end_ofPL2 0D48                     __end_ofPL4 10E0  
                   __end_ofPL6 1102                     __end_ofPL8 0D5E                     ___lwtofl@c 003B  
               buffer_putch@ch 0006             __size_of_lcd_begin 00D4             __size_of_lcd_clear 0016  
                      ??_log10 004E                        ??_floor 005A                        ??_ldexp 004A  
                      ??_frexp 0009                     _log10$1120 004E                     __pbssBANK0 00BA  
                   __pbssBANK1 0100                 ?_format_double 0091             __size_of_eval_poly 0098  
               ?_format_number 000B                 ?_format_xint32 0036                 print_unit@unit 0001  
     __size_of_print_indicator 001C                        ?___flge 0004                      ?___altofl 0062  
      __size_of_timer0_read_ps 004A                      ?___flpack 0004                      ?___awtofl 000E  
                    ?___lltofl 000E             _measure_inductance 08FC             __size_of_ser_putch 0028  
                    ?___lwtofl 003B               ??_lcd_write4bits 0004                        _INTCON2 000FF1  
                   _lcd_gotoxy 26EE            ?_measure_inductance 0001              __end_of_calibrate 1D16  
                    ?_lcd_init 0001                      ?_lcd_send 0005              __end_of_delay10ms 29F8  
                    ?_lcd_puts 0001           __end_of_measure_freq 1B42                     _global_int 0008  
                   calibrate@i 003F                        __Hparam 0000                        __Lparam 0000  
                    ?_ser_init 0001           ??_measure_inductance 005A              __end_of_lcd_begin 1DEA  
                    ?_ser_puts 0001              __end_of_lcd_clear 29C6                __size_of___flge 004C  
                      ___fladd 16B2                        ___fldiv 1F70                        ___flneg 291E  
                      ___flmul 1DEA                        ___flsub 2632                        ___fltol 2214  
                      ___lwdiv 2556                        ___lwmod 2676                   __psmallconst 0800  
                   ??___altofl 005A                     ??___flpack 000A                        __pcinit 2474  
                   ??___awtofl 0012              __end_of_eval_poly 20B8                        __ramtop 0800  
         __size_of_timer0_init 0082                     ??___lltofl 0012                        __ptext0 1934  
                      __ptext1 2758                        __ptext2 22B2                        __ptext3 28D6  
                      __ptext4 297A                        __ptext5 08FC                        __ptext6 0D5E  
                      __ptext7 285E                        __ptext8 23AC                        __ptext9 27E0  
         __size_of_timer2_init 002E          __size_of_buffer_putch 004A                     ??___lwtofl 003F  
                 __size_of_exp 021C                   __size_of_log 0118                   __size_of_pow 0192  
                      _seconds 00C6                        _ser_tmp 00D5                ??_format_double 005A  
                      _put_str 280A                     ??_lcd_init 0004                     ??_lcd_send 0006  
                   ??_lcd_puts 0007           end_of_initialization 24B2                ??_format_number 000F  
              ??_format_xint32 003A                        exp@sign 007B                      _LCD_lines 00D1  
                 _lcd_init$134 0005                 lcd_puts@string 0009              __end_of_ser_putch 28D6  
                      pow@sign 008C  measure_inductance@denominator 0066          __end_of_print_reading 241A  
                   ??_ser_init 0004                     ??_ser_puts 0005                   _buffer_putch 25A0  
            format_number@base 000D                        postdec1 000FE5                        postdec2 000FDD  
                      postinc0 000FEE                        postinc2 000FDE              ??_print_indicator 000E  
                   _print_unit 285E                  ?_print_buffer 0001            _measure_capacitance 0D5E  
                  ?_lcd_gotoxy 0008                    ___fldiv@exp 001B                    ?_global_int 0001  
                  ___flmul@exp 0025                  ??_lcd_command 0007                  ??_buffer_init 0004  
         ?_measure_capacitance 0001                  ??_buffer_puts 0007        measure_capacitance@unit 00B1  
               format_double@m 00A3         measure_inductance@unit 007A                 __end_of___flge 250C  
               _timer0_read_ps 250C                lcd_gotoxy@F6470 00F3                     floor@expon 006F  
               ??_print_buffer 0006                 format_number@i 0035                 format_number@n 000B  
               format_xint32@x 0036                    __end_ofPL10 1118                    __end_ofPL20 113C  
                  __end_ofPL12 180C                    __end_ofPL30 2834                    __end_ofPL22 114E  
                  __end_ofPL14 112A                    __end_ofPL40 295C                    __end_ofPL32 116E  
                  __end_ofPL24 280A                    __end_ofPL16 20CA                    __end_ofPL42 297A  
                  __end_ofPL34 117C                    __end_ofPL26 1934                    __end_ofPL18 1EA0  
                  __end_ofPL36 1EAE                    __end_ofPL28 115E                    __end_ofPL38 1F70  
          start_initialization 2474                     eval_poly@d 003C                     eval_poly@n 003D  
                   eval_poly@x 0038          __size_of_measure_freq 00FA                     ldexp@value 0044  
                  __end_of_exp 1398                    __end_of_log 1924                    __end_of_pow 152A  
                 _LCD_function 005A             format_double@digit 00A1                     frexp@value 0004  
        ??_measure_capacitance 005A         __end_of_timer0_read_ps 2556                       ??___flge 000C  
          __size_of_lcd_gotoxy 0036            __end_of_lcd_command 29F0                    __pdataBANK0 00F3  
                 _measure_freq 1A48            __end_of_buffer_init 29E4            __end_of_buffer_puts 2970  
          __size_of_global_int 00BA       print_reading@measurement 0036              __size_of___altofl 0048  
            __size_of___flpack 00B6              __size_of___awtofl 003A                    ?_print_unit 0001  
            __size_of___lltofl 002E                    __pbssCOMRAM 005A              __size_of___lwtofl 002A  
                __pcstackBANK0 0060                __CFG_nPWRTEN$ON 000000                  ?_output_putch 0001  
            measure_freq@count 0039               lcd_command@value 0007              __size_of_lcd_init 002C  
            __size_of_lcd_send 001A                      _calibrate 1C34              __size_of_lcd_puts 001A  
                    _delay10ms 29F6                      __pnvBANK0 00EB               ___lwdiv@dividend 0004  
              ?_timer0_read_ps 0004                      __pintcode 0008                       ?___fladd 002C  
                     ?___fldiv 000E                       ?___flneg 0004                       ?___flmul 001D  
                     ?___flsub 0038                       ?___fltol 0052              __size_of_ser_init 0026  
                     ?___lwdiv 0004                       ?___lwmod 0004              __size_of_ser_puts 0014  
                    _lcd_begin 1D16                      _lcd_clear 29B0                    __smallconst 0800  
                    _eval_poly 2020                  output_putch@c 0007                 ??_output_putch 0007  
             ___lwdiv@quotient 0008                 __size_of_log10 005A                       ?_put_str 0001  
               __size_of_floor 00F2                 __size_of_ldexp 00A2                 __size_of_frexp 0078  
                   ?_calibrate 0001                     ser_putch@c 0004                     ?_delay10ms 0001  
                     _LCD_ctrl 00D0                       _LCD_mode 00D2                _print_indicator 297A  
                  _lcd_command 29E4           __end_of_print_buffer 28AE            __size_of_print_unit 0028  
                     i2u262_40 0040                       i2u263_48 0042                    _buffer_init 29D8  
                    _ser_putch 28AE                    _buffer_puts 295C    __size_of_measure_inductance 042A  
                ??_timer0_init 0004                  ??_timer2_init 0004                     ?_lcd_begin 0008  
                   ?_lcd_clear 0001                     ?_eval_poly 0038                      lcd_puts@i 0008  
                 ??_lcd_gotoxy 0009          measure_inductance@Lin 0089          measure_inductance@var 0087  
                    copy_data0 24A6          __end_of_format_double 16B2                   ??_global_int 0001  
         format_number@padchar 0033        __size_of_lcd_write4bits 0022          __end_of_format_number 2172  
        __end_of_format_xint32 2758                      frexp@eptr 0008                       __Hrparam 0000  
                     __Lrparam 0000                     ?_ser_putch 0001                   __Lsmallconst 0800  
           __end_of_lcd_gotoxy 2724               __size_of___fladd 0146               __size_of___fldiv 00B0  
             __size_of___flneg 0020               __size_of___flmul 00A4               __size_of___flsub 0044  
             __size_of___fltol 009E                       ___altofl 25EA                       ___flpack 1EAE  
             __size_of___lwdiv 004A               __size_of___lwmod 003E                       ___awtofl 26B4  
                     ___lltofl 2786                  timer2_init@ps 0005                       ___lwtofl 2834  
           __end_of_global_int 00C2            __end_of_timer0_init 2334                       _exp$1123 0075  
          __end_of_timer2_init 2786                       _main$404 00B8                ___lwdiv@divisor 0006  
              ___lwdiv@counter 000A         __size_of_print_reading 006E           timer0_init@prescaler 000E  
                     __ptext10 2724                       __ptext11 152A                       __ptext20 291E  
                     __ptext12 1398                       __ptext21 1F70                       __ptext13 117C  
                     __ptext30 27B4                       __ptext22 2786                       __ptext14 2172  
                     __ptext31 1D16                       __ptext23 241A                       __ptext15 1B42  
                     __ptext40 26EE                       __ptext32 1C34                       __ptext24 180C  
                     __ptext16 2214                       __ptext41 20CA                       __ptext33 280A  
                     __ptext25 2334                       __ptext17 24C0                       __ptext50 28FC  
                     __ptext42 2676                       __ptext34 29C6                       __ptext26 2020  
                     __ptext18 25EA                       __ptext51 29F6                       __ptext43 2556  
                     __ptext35 1A48                       __ptext27 1DEA                       __ptext19 2632  
                     __ptext52 2834                       __ptext44 295C                       __ptext36 250C  
                     __ptext28 16B2                       __ptext53 1EAE                       __ptext45 25A0  
                     __ptext37 2886                       __ptext29 26B4                       __ptext46 29D8  
                     __ptext38 293E                       __ptext47 29B0                       __ptext39 28AE  
                     __ptext48 29E4                       __ptext49 2996                       _lcd_init 27B4  
                     _lcd_send 2996        __end_of_print_indicator 2996                       _pow$1121 0084  
                     _pow$1122 0088                       _lcd_puts 27E0               __size_of_put_str 001A  
                  ??_calibrate 003F                  __size_of_main 0114                    ??_delay10ms 0004  
                    ser_puts@s 0005                       _msecpart 00F1                       _ser_init 28D6  
                     _ser_puts 293E                       _timer1of 00CA           __end_of_output_putch 29D8  
                  ??_lcd_begin 0009                    ??_lcd_clear 0008                       exp@coeff 0801  
        ___flmul@f3_as_product 0026                       log@coeff 0829    measure_inductance@numerator 0062  
                 ??_print_unit 000E                    ??_eval_poly 003F             _print_reading$1118 0038  
           _print_reading$1119 003A                       intlevel2 0000    __end_of_measure_capacitance 10BE  
        __size_of_print_buffer 0028               ___lwmod@dividend 0004               ??_timer0_read_ps 0006  
                  ??_ser_putch 0004             __end_of_print_unit 2886                  _print_reading 23AC  
         delay10ms@period_10ms 0001                    _timer0_init 22B2                    _timer2_init 2758  
           _format_double$1106 0095             _format_double$1107 0099       _measure_capacitance$1110 00AD  
     _measure_capacitance$1108 00A5       _measure_capacitance$1109 00A9                       put_str@i 0009  
                     put_str@s 000B             timer0_init@ps_mode 000F                ___lwmod@divisor 0006  
              ___lwmod@counter 0008                   _print_buffer 2886        print_indicator@indicate 000E  
             ?_print_indicator 0001                 _lcd_write4bits 28FC                   ___fladd@exp1 0037  
                 ___fladd@exp2 0036                   ___fladd@sign 0035                   ?_lcd_command 0001  
               ?_print_reading 0036                   ?_buffer_init 0001                   ?_buffer_puts 0001  
                ?_buffer_putch 0001  
