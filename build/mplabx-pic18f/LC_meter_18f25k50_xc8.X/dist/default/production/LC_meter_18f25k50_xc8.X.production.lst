

Microchip Technology PIC18 PRO Macro Assembler V1.34 build -361300703 
                                                                                               Tue Sep 17 02:09:19 2019

Microchip Technology Omniscient Code Generator (PRO mode) build 201502162209
     1                           	processor	18F25K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    69                           	psect	pa_nodes,global,class=CODE,delta=1
    70  0000                     tblptrl	equ	0xFF6
    71                           tablat	equ	0xFF5
    72                           prodl	equ	0xFF3
    73                           intcon	equ	0xFF2
    74                           intcon2	equ	0xFF1
    75                           wreg	equ	0xFE8
    76                           indf2	equ	0xFDF
    77                           postinc2	equ	0xFDE
    78                           postdec2	equ	0xFDD
    79                           fsr2h	equ	0xFDA
    80                           fsr2l	equ	0xFD9
    81                           status	equ	0xFD8
    82                           
    83                           	psect	idataBANK0
    84  002948                     __pidataBANK0:
    85                           	opt stack 0
    86                           
    87                           ;initializer for lcd_gotoxy@F6470
    88  002948  00                 	db	0
    89  002949  40                 	db	64
    90  00294A  14                 	db	20
    91  00294B  54                 	db	84
    92                           tblptrl	equ	0xFF6
    93                           tablat	equ	0xFF5
    94                           prodl	equ	0xFF3
    95                           intcon	equ	0xFF2
    96                           intcon2	equ	0xFF1
    97                           wreg	equ	0xFE8
    98                           indf2	equ	0xFDF
    99                           postinc2	equ	0xFDE
   100                           postdec2	equ	0xFDD
   101                           fsr2h	equ	0xFDA
   102                           fsr2l	equ	0xFD9
   103                           status	equ	0xFD8
   104                           
   105                           	psect	smallconst
   106  000800                     __psmallconst:
   107                           	opt stack 0
   108  000800  00                 	db	0
   109  000801                     exp@coeff:
   110                           	opt stack 0
   111  000801  0000               	dw	0
   112  000803  3F80               	dw	16256
   113  000805  7218               	dw	29208
   114  000807  3F31               	dw	16177
   115  000809  FDF0               	dw	65008
   116  00080B  3E75               	dw	15989
   117  00080D  5847               	dw	22599
   118  00080F  3D63               	dw	15715
   119  000811  9558               	dw	38232
   120  000813  3C1D               	dw	15389
   121  000815  C482               	dw	50306
   122  000817  3AAE               	dw	15022
   123  000819  78A8               	dw	30888
   124  00081B  3921               	dw	14625
   125  00081D  93EF               	dw	37871
   126  00081F  3780               	dw	14208
   127  000821  92A0               	dw	37536
   128  000823  35A7               	dw	13735
   129  000825  5646               	dw	22086
   130  000827  3415               	dw	13333
   131  000829                     __end_ofexp@coeff:
   132                           	opt stack 0
   133  000829                     log@coeff:
   134                           	opt stack 0
   135  000829  0000               	dw	0
   136  00082B  0000               	dw	0
   137  00082D  FFC4               	dw	65476
   138  00082F  3F7F               	dw	16255
   139  000831  EF80               	dw	61312
   140  000833  BEFF               	dw	48895
   141  000835  E190               	dw	57744
   142  000837  3EA9               	dw	16041
   143  000839  82EC               	dw	33516
   144  00083B  BE76               	dw	48758
   145  00083D  AD82               	dw	44418
   146  00083F  3E2B               	dw	15915
   147  000841  3C0E               	dw	15374
   148  000843  BDC3               	dw	48579
   149  000845  D187               	dw	53639
   150  000847  3D13               	dw	15635
   151  000849  7841               	dw	30785
   152  00084B  BBD3               	dw	48083
   153  00084D                     __end_oflog@coeff:
   154                           	opt stack 0
   155  00084D                     STR_3:
   156  00084D  70                 	db	112	;'p'
   157  00084E  6C                 	db	108	;'l'
   158  00084F  65                 	db	101	;'e'
   159  000850  61                 	db	97	;'a'
   160  000851  73                 	db	115	;'s'
   161  000852  65                 	db	101	;'e'
   162  000853  20                 	db	32
   163  000854  77                 	db	119	;'w'
   164  000855  61                 	db	97	;'a'
   165  000856  69                 	db	105	;'i'
   166  000857  74                 	db	116	;'t'
   167  000858  2E                 	db	46
   168  000859  2E                 	db	46
   169  00085A  2E                 	db	46
   170  00085B  00                 	db	0
   171  00085C                     STR_15:
   172  00085C  49                 	db	73	;'I'
   173  00085D  6E                 	db	110	;'n'
   174  00085E  64                 	db	100	;'d'
   175  00085F  75                 	db	117	;'u'
   176  000860  63                 	db	99	;'c'
   177  000861  74                 	db	116	;'t'
   178  000862  69                 	db	105	;'i'
   179  000863  76                 	db	118	;'v'
   180  000864  69                 	db	105	;'i'
   181  000865  74                 	db	116	;'t'
   182  000866  79                 	db	121	;'y'
   183  000867  20                 	db	32
   184  000868  00                 	db	0
   185  000869                     STR_1:
   186  000869  43                 	db	67	;'C'
   187  00086A  61                 	db	97	;'a'
   188  00086B  6C                 	db	108	;'l'
   189  00086C  69                 	db	105	;'i'
   190  00086D  62                 	db	98	;'b'
   191  00086E  72                 	db	114	;'r'
   192  00086F  61                 	db	97	;'a'
   193  000870  74                 	db	116	;'t'
   194  000871  69                 	db	105	;'i'
   195  000872  6E                 	db	110	;'n'
   196  000873  67                 	db	103	;'g'
   197  000874  00                 	db	0
   198  000875                     STR_28:
   199  000875  4C                 	db	76	;'L'
   200  000876  43                 	db	67	;'C'
   201  000877  2D                 	db	45
   202  000878  6D                 	db	109	;'m'
   203  000879  65                 	db	101	;'e'
   204  00087A  74                 	db	116	;'t'
   205  00087B  65                 	db	101	;'e'
   206  00087C  72                 	db	114	;'r'
   207  00087D  20                 	db	32
   208  00087E  00                 	db	0
   209  00087F                     STR_6:
   210  00087F  43                 	db	67	;'C'
   211  000880  61                 	db	97	;'a'
   212  000881  70                 	db	112	;'p'
   213  000882  61                 	db	97	;'a'
   214  000883  63                 	db	99	;'c'
   215  000884  69                 	db	105	;'i'
   216  000885  74                 	db	116	;'t'
   217  000886  79                 	db	121	;'y'
   218  000887  20                 	db	32
   219  000888  00                 	db	0
   220  000889                     STR_11:
   221  000889  0D                 	db	13
   222  00088A  0A                 	db	10
   223  00088B  43                 	db	67	;'C'
   224  00088C  43                 	db	67	;'C'
   225  00088D  61                 	db	97	;'a'
   226  00088E  6C                 	db	108	;'l'
   227  00088F  3D                 	db	61	;'='
   228  000890  00                 	db	0
   229  000891                     STR_30:
   230  000891  20                 	db	32
   231  000892  20                 	db	32
   232  000893  20                 	db	32
   233  000894  20                 	db	32
   234  000895  20                 	db	32
   235  000896  20                 	db	32
   236  000897  00                 	db	0
   237  000898                     STR_29:
   238  000898  2E                 	db	46
   239  000899  2E                 	db	46
   240  00089A  2E                 	db	46
   241  00089B  0D                 	db	13
   242  00089C  0A                 	db	10
   243  00089D  00                 	db	0
   244  00089E                     STR_8:
   245  00089E  0D                 	db	13
   246  00089F  0A                 	db	10
   247  0008A0  46                 	db	70	;'F'
   248  0008A1  31                 	db	49	;'1'
   249  0008A2  3D                 	db	61	;'='
   250  0008A3  00                 	db	0
   251  0008A4                     STR_9:
   252  0008A4  0D                 	db	13
   253  0008A5  0A                 	db	10
   254  0008A6  46                 	db	70	;'F'
   255  0008A7  32                 	db	50	;'2'
   256  0008A8  3D                 	db	61	;'='
   257  0008A9  00                 	db	0
   258  0008AA                     STR_10:
   259  0008AA  0D                 	db	13
   260  0008AB  0A                 	db	10
   261  0008AC  46                 	db	70	;'F'
   262  0008AD  33                 	db	51	;'3'
   263  0008AE  3D                 	db	61	;'='
   264  0008AF  00                 	db	0
   265  0008B0                     STR_5:
   266  0008B0  46                 	db	70	;'F'
   267  0008B1  72                 	db	114	;'r'
   268  0008B2  65                 	db	101	;'e'
   269  0008B3  71                 	db	113	;'q'
   270  0008B4  3D                 	db	61	;'='
   271  0008B5  00                 	db	0
   272  0008B6  52                 	db	82	;'R'
   273  0008B7  43                 	db	67	;'C'
   274  0008B8  34                 	db	52	;'4'
   275  0008B9  3D                 	db	61	;'='
   276  0008BA  00                 	db	0
   277  0008BB                     STR_13:
   278  0008BB  43                 	db	67	;'C'
   279  0008BC  69                 	db	105	;'i'
   280  0008BD  6E                 	db	110	;'n'
   281  0008BE  3D                 	db	61	;'='
   282  0008BF  00                 	db	0
   283  0008C0                     STR_7:
   284  0008C0  76                 	db	118	;'v'
   285  0008C1  61                 	db	97	;'a'
   286  0008C2  72                 	db	114	;'r'
   287  0008C3  3D                 	db	61	;'='
   288  0008C4  00                 	db	0
   289  0008C5                     STR_26:
   290  0008C5  2D                 	db	45
   291  0008C6  2A                 	db	42
   292  0008C7  2D                 	db	45
   293  0008C8  00                 	db	0
   294  0008C9  6D                 	db	109	;'m'
   295  0008CA  46                 	db	70	;'F'
   296  0008CB  00                 	db	0
   297  0008CC  6E                 	db	110	;'n'
   298  0008CD  46                 	db	70	;'F'
   299  0008CE  00                 	db	0
   300  0008CF  70                 	db	112	;'p'
   301  0008D0  46                 	db	70	;'F'
   302  0008D1  00                 	db	0
   303  0008D2  75                 	db	117	;'u'
   304  0008D3  46                 	db	70	;'F'
   305  0008D4  00                 	db	0
   306  0008D5                     STR_17:
   307  0008D5  6D                 	db	109	;'m'
   308  0008D6  48                 	db	72	;'H'
   309  0008D7  00                 	db	0
   310  0008D8  6E                 	db	110	;'n'
   311  0008D9  48                 	db	72	;'H'
   312  0008DA  00                 	db	0
   313  0008DB  75                 	db	117	;'u'
   314  0008DC  48                 	db	72	;'H'
   315  0008DD  00                 	db	0
   316  0000                     
   317                           ; #config settings
   318  0008DE  00                 	db	0	; dummy byte at the end
   319  0000                     tblptrl	equ	0xFF6
   320                           tablat	equ	0xFF5
   321                           prodl	equ	0xFF3
   322                           intcon	equ	0xFF2
   323                           intcon2	equ	0xFF1
   324                           wreg	equ	0xFE8
   325                           indf2	equ	0xFDF
   326                           postinc2	equ	0xFDE
   327                           postdec2	equ	0xFDD
   328                           fsr2h	equ	0xFDA
   329                           fsr2l	equ	0xFD9
   330                           status	equ	0xFD8
   331                           
   332                           	psect	nvBANK0
   333  0000E9                     __pnvBANK0:
   334                           	opt stack 0
   335  0000E9                     _CCal:
   336                           	opt stack 0
   337  0000E9                     	ds	4
   338  0000ED                     _bres:
   339                           	opt stack 0
   340  0000ED                     	ds	2
   341  0000EF                     _msecpart:
   342                           	opt stack 0
   343  0000EF                     	ds	2
   344  0000                     _TMR0	set	4054
   345  0000                     _INTCON	set	4082
   346  0000                     _INTCON2	set	4081
   347  0000                     _LATB	set	3978
   348  0000                     _LATC	set	3979
   349  0000                     _PIE1	set	3997
   350  0000                     _PIR1	set	3998
   351  0000                     _PORTC	set	3970
   352  0000                     _RCREG	set	4014
   353  0000                     _SPBRG	set	4015
   354  0000                     _T0CON	set	4053
   355  0000                     _T2CON	set	4026
   356  0000                     _TMR2	set	4028
   357  0000                     _TRISA	set	3986
   358  0000                     _TRISB	set	3987
   359  0000                     _TRISC	set	3988
   360  0000                     _TXREG	set	4013
   361  0000                     _BRGH	set	32098
   362  0000                     _CREN	set	32092
   363  0000                     _GIE	set	32663
   364  0000                     _LATC7	set	31839
   365  0000                     _PEIE	set	32662
   366  0000                     _RCIF	set	31989
   367  0000                     _RX9	set	32094
   368  0000                     _SPEN	set	32095
   369  0000                     _SYNC	set	32100
   370  0000                     _TRISC6	set	31910
   371  0000                     _TX9	set	32102
   372  0000                     _TXEN	set	32101
   373  0000                     _TXIE	set	31980
   374  0000                     _TXIF	set	31988
   375                           tblptrl	equ	0xFF6
   376                           tablat	equ	0xFF5
   377                           prodl	equ	0xFF3
   378                           intcon	equ	0xFF2
   379                           intcon2	equ	0xFF1
   380                           wreg	equ	0xFE8
   381                           indf2	equ	0xFDF
   382                           postinc2	equ	0xFDE
   383                           postdec2	equ	0xFDD
   384                           fsr2h	equ	0xFDA
   385                           fsr2l	equ	0xFD9
   386                           status	equ	0xFD8
   387                           
   388                           	psect	cinit
   389  00241E                     __pcinit:
   390                           	opt stack 0
   391  00241E                     start_initialization:
   392                           	opt stack 0
   393  00241E                     __initialization:
   394                           	opt stack 0
   395                           
   396                           ; Clear objects allocated to BANK1 (32 bytes)
   397  00241E  EE01  F000         	lfsr	0,__pbssBANK1
   398  002422  0E20               	movlw	32
   399  002424                     clear_0:
   400  002424  6AEE               	clrf	postinc0,c
   401  002426  06E8               	decf	wreg,f,c
   402  002428  E1FD               	bnz	clear_0
   403                           
   404                           ; Clear objects allocated to BANK0 (49 bytes)
   405  00242A  EE00  F0B8         	lfsr	0,__pbssBANK0
   406  00242E  0E31               	movlw	49
   407  002430                     clear_1:
   408  002430  6AEE               	clrf	postinc0,c
   409  002432  06E8               	decf	wreg,f,c
   410  002434  E1FD               	bnz	clear_1
   411                           
   412                           ; Clear objects allocated to COMRAM (3 bytes)
   413  002436  6A5C               	clrf	(__pbssCOMRAM+2)& (0+255),c
   414  002438  6A5B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   415  00243A  6A5A               	clrf	__pbssCOMRAM& (0+255),c
   416                           
   417                           ; Initialize objects allocated to BANK0 (4 bytes)
   418                           ; load TBLPTR registers with __pidataBANK0
   419  00243C  0E48               	movlw	low __pidataBANK0
   420  00243E  6EF6               	movwf	tblptrl,c
   421  002440  0E29               	movlw	high __pidataBANK0
   422  002442  6EF7               	movwf	tblptrh,c
   423  002444  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   424  002446  6EF8               	movwf	tblptru,c
   425  002448  EE00  F0F1         	lfsr	0,__pdataBANK0
   426  00244C  EE10 F004          	lfsr	1,4
   427  002450                     copy_data0:
   428  002450  0009               	tblrd		*+
   429  002452  CFF5 FFEE          	movff	tablat,postinc0
   430  002456  50E5               	movf	postdec1,w,c
   431  002458  50E1               	movf	fsr1l,w,c
   432  00245A  E1FA               	bnz	copy_data0
   433  00245C                     end_of_initialization:
   434                           	opt stack 0
   435  00245C                     __end_of__initialization:
   436                           	opt stack 0
   437  00245C  0E00               	movlw	low (__Lsmallconst shr (0+16))
   438  00245E  6EF8               	movwf	tblptru,c
   439  002460  0E08               	movlw	high __Lsmallconst
   440  002462  6EF7               	movwf	tblptrh,c
   441  002464  0100               	movlb	0
   442  002466  EF82  F00D         	goto	_main	;jump to C main() function
   443                           tblptru	equ	0xFF8
   444                           tblptrh	equ	0xFF7
   445                           tblptrl	equ	0xFF6
   446                           tablat	equ	0xFF5
   447                           prodl	equ	0xFF3
   448                           intcon	equ	0xFF2
   449                           intcon2	equ	0xFF1
   450                           postinc0	equ	0xFEE
   451                           wreg	equ	0xFE8
   452                           postdec1	equ	0xFE5
   453                           fsr1l	equ	0xFE1
   454                           indf2	equ	0xFDF
   455                           postinc2	equ	0xFDE
   456                           postdec2	equ	0xFDD
   457                           fsr2h	equ	0xFDA
   458                           fsr2l	equ	0xFD9
   459                           status	equ	0xFD8
   460                           
   461                           	psect	bssCOMRAM
   462  00005A                     __pbssCOMRAM:
   463                           	opt stack 0
   464  00005A                     _LCD_function:
   465                           	opt stack 0
   466  00005A                     	ds	1
   467  00005B                     _txiptr:
   468                           	opt stack 0
   469  00005B                     	ds	1
   470  00005C                     _txoptr:
   471                           	opt stack 0
   472  00005C                     	ds	1
   473                           tblptru	equ	0xFF8
   474                           tblptrh	equ	0xFF7
   475                           tblptrl	equ	0xFF6
   476                           tablat	equ	0xFF5
   477                           prodl	equ	0xFF3
   478                           intcon	equ	0xFF2
   479                           intcon2	equ	0xFF1
   480                           postinc0	equ	0xFEE
   481                           wreg	equ	0xFE8
   482                           postdec1	equ	0xFE5
   483                           fsr1l	equ	0xFE1
   484                           indf2	equ	0xFDF
   485                           postinc2	equ	0xFDE
   486                           postdec2	equ	0xFDD
   487                           fsr2h	equ	0xFDA
   488                           fsr2l	equ	0xFD9
   489                           status	equ	0xFD8
   490                           
   491                           	psect	bssBANK0
   492  0000B8                     __pbssBANK0:
   493                           	opt stack 0
   494  0000B8                     _F2:
   495                           	opt stack 0
   496  0000B8                     	ds	4
   497  0000BC                     _F3:
   498                           	opt stack 0
   499  0000BC                     	ds	4
   500  0000C0                     _msecs:
   501                           	opt stack 0
   502  0000C0                     	ds	4
   503  0000C4                     _seconds:
   504                           	opt stack 0
   505  0000C4                     	ds	4
   506  0000C8                     _timer1of:
   507                           	opt stack 0
   508  0000C8                     	ds	4
   509  0000CC                     _blink:
   510                           	opt stack 0
   511  0000CC                     	ds	2
   512  0000CE                     _LCD_ctrl:
   513                           	opt stack 0
   514  0000CE                     	ds	1
   515  0000CF                     _LCD_lines:
   516                           	opt stack 0
   517  0000CF                     	ds	1
   518  0000D0                     _LCD_mode:
   519                           	opt stack 0
   520  0000D0                     	ds	1
   521  0000D1                     _rxiptr:
   522                           	opt stack 0
   523  0000D1                     	ds	1
   524  0000D2                     _rxoptr:
   525                           	opt stack 0
   526  0000D2                     	ds	1
   527  0000D3                     _ser_tmp:
   528                           	opt stack 0
   529  0000D3                     	ds	1
   530  0000D4                     _buffer:
   531                           	opt stack 0
   532  0000D4                     	ds	17
   533  0000E5                     _F1:
   534                           	opt stack 0
   535  0000E5                     	ds	4
   536                           tblptru	equ	0xFF8
   537                           tblptrh	equ	0xFF7
   538                           tblptrl	equ	0xFF6
   539                           tablat	equ	0xFF5
   540                           prodl	equ	0xFF3
   541                           intcon	equ	0xFF2
   542                           intcon2	equ	0xFF1
   543                           postinc0	equ	0xFEE
   544                           wreg	equ	0xFE8
   545                           postdec1	equ	0xFE5
   546                           fsr1l	equ	0xFE1
   547                           indf2	equ	0xFDF
   548                           postinc2	equ	0xFDE
   549                           postdec2	equ	0xFDD
   550                           fsr2h	equ	0xFDA
   551                           fsr2l	equ	0xFD9
   552                           status	equ	0xFD8
   553                           
   554                           	psect	dataBANK0
   555  0000F1                     __pdataBANK0:
   556                           	opt stack 0
   557  0000F1                     lcd_gotoxy@F6470:
   558                           	opt stack 0
   559  0000F1                     	ds	4
   560                           tblptru	equ	0xFF8
   561                           tblptrh	equ	0xFF7
   562                           tblptrl	equ	0xFF6
   563                           tablat	equ	0xFF5
   564                           prodl	equ	0xFF3
   565                           intcon	equ	0xFF2
   566                           intcon2	equ	0xFF1
   567                           postinc0	equ	0xFEE
   568                           wreg	equ	0xFE8
   569                           postdec1	equ	0xFE5
   570                           fsr1l	equ	0xFE1
   571                           indf2	equ	0xFDF
   572                           postinc2	equ	0xFDE
   573                           postdec2	equ	0xFDD
   574                           fsr2h	equ	0xFDA
   575                           fsr2l	equ	0xFD9
   576                           status	equ	0xFD8
   577                           
   578                           	psect	bssBANK1
   579  000100                     __pbssBANK1:
   580                           	opt stack 0
   581  000100                     _rxfifo:
   582                           	opt stack 0
   583  000100                     	ds	16
   584  000110                     _txfifo:
   585                           	opt stack 0
   586  000110                     	ds	16
   587                           tblptru	equ	0xFF8
   588                           tblptrh	equ	0xFF7
   589                           tblptrl	equ	0xFF6
   590                           tablat	equ	0xFF5
   591                           prodl	equ	0xFF3
   592                           intcon	equ	0xFF2
   593                           intcon2	equ	0xFF1
   594                           postinc0	equ	0xFEE
   595                           wreg	equ	0xFE8
   596                           postdec1	equ	0xFE5
   597                           fsr1l	equ	0xFE1
   598                           indf2	equ	0xFDF
   599                           postinc2	equ	0xFDE
   600                           postdec2	equ	0xFDD
   601                           fsr2h	equ	0xFDA
   602                           fsr2l	equ	0xFD9
   603                           status	equ	0xFD8
   604                           
   605                           	psect	cstackBANK0
   606  000060                     __pcstackBANK0:
   607                           	opt stack 0
   608  000060                     ___fltol@sign1:
   609                           	opt stack 0
   610                           
   611                           ; 1 bytes @ 0x0
   612  000060                     	ds	1
   613  000061                     ___fltol@exp1:
   614                           	opt stack 0
   615                           
   616                           ; 1 bytes @ 0x1
   617  000061                     	ds	1
   618  000062                     ?___altofl:
   619                           	opt stack 0
   620  000062                     measure_inductance@numerator:
   621                           	opt stack 0
   622  000062                     ___altofl@c:
   623                           	opt stack 0
   624                           
   625                           ; 4 bytes @ 0x2
   626  000062                     	ds	4
   627  000066                     ___altofl@sign:
   628                           	opt stack 0
   629  000066                     measure_inductance@denominator:
   630                           	opt stack 0
   631                           
   632                           ; 4 bytes @ 0x6
   633  000066                     	ds	1
   634  000067                     ?_floor:
   635                           	opt stack 0
   636  000067                     floor@x:
   637                           	opt stack 0
   638                           
   639                           ; 4 bytes @ 0x7
   640  000067                     	ds	3
   641  00006A                     _measure_inductance$1097:
   642                           	opt stack 0
   643                           
   644                           ; 4 bytes @ 0xA
   645  00006A                     	ds	1
   646  00006B                     floor@i:
   647                           	opt stack 0
   648                           
   649                           ; 4 bytes @ 0xB
   650  00006B                     	ds	3
   651  00006E                     _measure_inductance$1101:
   652                           	opt stack 0
   653                           
   654                           ; 4 bytes @ 0xE
   655  00006E                     	ds	1
   656  00006F                     floor@expon:
   657                           	opt stack 0
   658                           
   659                           ; 2 bytes @ 0xF
   660  00006F                     	ds	2
   661  000071                     ?_exp:
   662                           	opt stack 0
   663  000071                     exp@x:
   664                           	opt stack 0
   665                           
   666                           ; 4 bytes @ 0x11
   667  000071                     	ds	1
   668  000072                     _measure_inductance$1102:
   669                           	opt stack 0
   670                           
   671                           ; 4 bytes @ 0x12
   672  000072                     	ds	3
   673  000075                     _exp$1109:
   674                           	opt stack 0
   675                           
   676                           ; 4 bytes @ 0x15
   677  000075                     	ds	1
   678  000076                     _measure_inductance$1103:
   679                           	opt stack 0
   680                           
   681                           ; 4 bytes @ 0x16
   682  000076                     	ds	3
   683  000079                     exp@exponent:
   684                           	opt stack 0
   685                           
   686                           ; 2 bytes @ 0x19
   687  000079                     	ds	1
   688  00007A                     measure_inductance@unit:
   689                           	opt stack 0
   690                           
   691                           ; 1 bytes @ 0x1A
   692  00007A                     	ds	1
   693  00007B                     exp@sign:
   694                           	opt stack 0
   695  00007B                     _measure_inductance$1098:
   696                           	opt stack 0
   697                           
   698                           ; 4 bytes @ 0x1B
   699  00007B                     	ds	1
   700  00007C                     ?_pow:
   701                           	opt stack 0
   702  00007C                     pow@x:
   703                           	opt stack 0
   704                           
   705                           ; 4 bytes @ 0x1C
   706  00007C                     	ds	3
   707  00007F                     _measure_inductance$1099:
   708                           	opt stack 0
   709                           
   710                           ; 4 bytes @ 0x1F
   711  00007F                     	ds	1
   712  000080                     pow@y:
   713                           	opt stack 0
   714                           
   715                           ; 4 bytes @ 0x20
   716  000080                     	ds	3
   717  000083                     _measure_inductance$1100:
   718                           	opt stack 0
   719                           
   720                           ; 4 bytes @ 0x23
   721  000083                     	ds	1
   722  000084                     _pow$1107:
   723                           	opt stack 0
   724                           
   725                           ; 4 bytes @ 0x24
   726  000084                     	ds	3
   727  000087                     measure_inductance@var:
   728                           	opt stack 0
   729                           
   730                           ; 2 bytes @ 0x27
   731  000087                     	ds	1
   732  000088                     _pow$1108:
   733                           	opt stack 0
   734                           
   735                           ; 4 bytes @ 0x28
   736  000088                     	ds	1
   737  000089                     measure_inductance@Lin:
   738                           	opt stack 0
   739                           
   740                           ; 4 bytes @ 0x29
   741  000089                     	ds	3
   742  00008C                     pow@sign:
   743                           	opt stack 0
   744                           
   745                           ; 1 bytes @ 0x2C
   746  00008C                     	ds	1
   747  00008D                     pow@yi:
   748                           	opt stack 0
   749                           
   750                           ; 4 bytes @ 0x2D
   751  00008D                     	ds	4
   752  000091                     format_double@num:
   753                           	opt stack 0
   754                           
   755                           ; 4 bytes @ 0x31
   756  000091                     	ds	4
   757  000095                     _format_double$1092:
   758                           	opt stack 0
   759                           
   760                           ; 4 bytes @ 0x35
   761  000095                     	ds	4
   762  000099                     _format_double$1093:
   763                           	opt stack 0
   764                           
   765                           ; 4 bytes @ 0x39
   766  000099                     	ds	4
   767  00009D                     format_double@weight:
   768                           	opt stack 0
   769                           
   770                           ; 4 bytes @ 0x3D
   771  00009D                     	ds	4
   772  0000A1                     format_double@digit:
   773                           	opt stack 0
   774                           
   775                           ; 2 bytes @ 0x41
   776  0000A1                     	ds	2
   777  0000A3                     format_double@m:
   778                           	opt stack 0
   779                           
   780                           ; 2 bytes @ 0x43
   781  0000A3                     	ds	2
   782  0000A5                     _measure_capacitance$1094:
   783                           	opt stack 0
   784                           
   785                           ; 4 bytes @ 0x45
   786  0000A5                     	ds	4
   787  0000A9                     _measure_capacitance$1095:
   788                           	opt stack 0
   789                           
   790                           ; 4 bytes @ 0x49
   791  0000A9                     	ds	4
   792  0000AD                     _measure_capacitance$1096:
   793                           	opt stack 0
   794                           
   795                           ; 4 bytes @ 0x4D
   796  0000AD                     	ds	4
   797  0000B1                     measure_capacitance@unit:
   798                           	opt stack 0
   799                           
   800                           ; 1 bytes @ 0x51
   801  0000B1                     	ds	1
   802  0000B2                     measure_capacitance@var:
   803                           	opt stack 0
   804                           
   805                           ; 2 bytes @ 0x52
   806  0000B2                     	ds	2
   807  0000B4                     measure_capacitance@Cin:
   808                           	opt stack 0
   809                           
   810                           ; 4 bytes @ 0x54
   811  0000B4                     	ds	4
   812                           tblptru	equ	0xFF8
   813                           tblptrh	equ	0xFF7
   814                           tblptrl	equ	0xFF6
   815                           tablat	equ	0xFF5
   816                           prodl	equ	0xFF3
   817                           intcon	equ	0xFF2
   818                           intcon2	equ	0xFF1
   819                           postinc0	equ	0xFEE
   820                           wreg	equ	0xFE8
   821                           postdec1	equ	0xFE5
   822                           fsr1l	equ	0xFE1
   823                           indf2	equ	0xFDF
   824                           postinc2	equ	0xFDE
   825                           postdec2	equ	0xFDD
   826                           fsr2h	equ	0xFDA
   827                           fsr2l	equ	0xFD9
   828                           status	equ	0xFD8
   829                           
   830                           	psect	cstackCOMRAM
   831  000001                     __pcstackCOMRAM:
   832                           	opt stack 0
   833  000001                     ??_global_int:
   834  000001                     
   835                           ; 1 bytes @ 0x0
   836  000001                     	ds	3
   837  000004                     ??_buffer_putch:
   838  000004                     ??_timer2_init:
   839  000004                     ?_timer0_read_ps:
   840                           	opt stack 0
   841  000004                     ?___lwdiv:
   842                           	opt stack 0
   843  000004                     ?___lwmod:
   844                           	opt stack 0
   845  000004                     ?___flpack:
   846                           	opt stack 0
   847  000004                     ?_frexp:
   848                           	opt stack 0
   849  000004                     ?___flneg:
   850                           	opt stack 0
   851  000004                     lcd_write4bits@value:
   852                           	opt stack 0
   853  000004                     lcd_init@fourbitmode:
   854                           	opt stack 0
   855  000004                     ser_putch@c:
   856                           	opt stack 0
   857  000004                     _timer0_init$152:
   858                           	opt stack 0
   859  000004                     ___lwdiv@dividend:
   860                           	opt stack 0
   861  000004                     ___lwmod@dividend:
   862                           	opt stack 0
   863  000004                     ___flpack@arg:
   864                           	opt stack 0
   865  000004                     ___flge@ff1:
   866                           	opt stack 0
   867  000004                     ___flneg@f1:
   868                           	opt stack 0
   869  000004                     frexp@value:
   870                           	opt stack 0
   871                           
   872                           ; 4 bytes @ 0x3
   873  000004                     	ds	1
   874  000005                     lcd_send@mode:
   875                           	opt stack 0
   876  000005                     timer2_init@ps:
   877                           	opt stack 0
   878  000005                     ser_puts@s:
   879                           	opt stack 0
   880  000005                     _lcd_init$134:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0x4
   884  000005                     	ds	1
   885  000006                     ??_timer0_read_ps:
   886  000006                     buffer_putch@ch:
   887                           	opt stack 0
   888  000006                     lcd_send@value:
   889                           	opt stack 0
   890  000006                     _timer0_init$153:
   891                           	opt stack 0
   892  000006                     ___lwdiv@divisor:
   893                           	opt stack 0
   894  000006                     ___lwmod@divisor:
   895                           	opt stack 0
   896                           
   897                           ; 2 bytes @ 0x5
   898  000006                     	ds	1
   899  000007                     ??_lcd_puts:
   900  000007                     lcd_command@value:
   901                           	opt stack 0
   902  000007                     timer2_init@ps_mode:
   903                           	opt stack 0
   904  000007                     output_putch@c:
   905                           	opt stack 0
   906                           
   907                           ; 1 bytes @ 0x6
   908  000007                     	ds	1
   909  000008                     ??_put_str:
   910  000008                     ??_lcd_clear:
   911  000008                     lcd_gotoxy@row:
   912                           	opt stack 0
   913  000008                     lcd_puts@i:
   914                           	opt stack 0
   915  000008                     lcd_begin@dotsize:
   916                           	opt stack 0
   917  000008                     timer0_read_ps@prev:
   918                           	opt stack 0
   919  000008                     ___flpack@exp:
   920                           	opt stack 0
   921  000008                     frexp@eptr:
   922                           	opt stack 0
   923  000008                     ___lwmod@counter:
   924                           	opt stack 0
   925  000008                     _timer0_init$154:
   926                           	opt stack 0
   927  000008                     ___lwdiv@quotient:
   928                           	opt stack 0
   929  000008                     ___flge@ff2:
   930                           	opt stack 0
   931                           
   932                           ; 4 bytes @ 0x7
   933  000008                     	ds	1
   934  000009                     ??_frexp:
   935  000009                     ??_lcd_begin:
   936  000009                     lcd_gotoxy@col:
   937                           	opt stack 0
   938  000009                     lcd_puts@string:
   939                           	opt stack 0
   940  000009                     ___flpack@sign:
   941                           	opt stack 0
   942  000009                     timer0_read_ps@count:
   943                           	opt stack 0
   944  000009                     put_str@i:
   945                           	opt stack 0
   946                           
   947                           ; 2 bytes @ 0x8
   948  000009                     	ds	1
   949  00000A                     ??___flpack:
   950  00000A                     lcd_begin@lines:
   951                           	opt stack 0
   952  00000A                     ___lwdiv@counter:
   953                           	opt stack 0
   954  00000A                     _timer0_init$155:
   955                           	opt stack 0
   956  00000A                     lcd_gotoxy@row_offsets:
   957                           	opt stack 0
   958                           
   959                           ; 4 bytes @ 0x9
   960  00000A                     	ds	1
   961  00000B                     put_str@s:
   962                           	opt stack 0
   963  00000B                     format_number@n:
   964                           	opt stack 0
   965                           
   966                           ; 2 bytes @ 0xA
   967  00000B                     	ds	1
   968  00000C                     timer0_init@prescaler:
   969                           	opt stack 0
   970                           
   971                           ; 1 bytes @ 0xB
   972  00000C                     	ds	1
   973  00000D                     format_number@base:
   974                           	opt stack 0
   975  00000D                     timer0_init@ps_mode:
   976                           	opt stack 0
   977                           
   978                           ; 1 bytes @ 0xC
   979  00000D                     	ds	1
   980  00000E                     ??_print_unit:
   981  00000E                     ?___fldiv:
   982                           	opt stack 0
   983  00000E                     ?___awtofl:
   984                           	opt stack 0
   985  00000E                     ?___lltofl:
   986                           	opt stack 0
   987  00000E                     format_number@pad:
   988                           	opt stack 0
   989  00000E                     indicator@indicate:
   990                           	opt stack 0
   991  00000E                     ___awtofl@c:
   992                           	opt stack 0
   993  00000E                     ___fldiv@f1:
   994                           	opt stack 0
   995  00000E                     ___lltofl@c:
   996                           	opt stack 0
   997                           
   998                           ; 4 bytes @ 0xD
   999  00000E                     	ds	1
  1000  00000F                     ??_format_number:
  1001                           
  1002                           ; 0 bytes @ 0xE
  1003  00000F                     	ds	2
  1004  000011                     format_number@buf:
  1005                           	opt stack 0
  1006                           
  1007                           ; 32 bytes @ 0x10
  1008  000011                     	ds	1
  1009  000012                     ___awtofl@sign:
  1010                           	opt stack 0
  1011  000012                     ___fldiv@f2:
  1012                           	opt stack 0
  1013                           
  1014                           ; 4 bytes @ 0x11
  1015  000012                     	ds	4
  1016  000016                     ___fldiv@f3:
  1017                           	opt stack 0
  1018                           
  1019                           ; 4 bytes @ 0x15
  1020  000016                     	ds	4
  1021  00001A                     ___fldiv@cntr:
  1022                           	opt stack 0
  1023                           
  1024                           ; 1 bytes @ 0x19
  1025  00001A                     	ds	1
  1026  00001B                     ___fldiv@exp:
  1027                           	opt stack 0
  1028                           
  1029                           ; 1 bytes @ 0x1A
  1030  00001B                     	ds	1
  1031  00001C                     ___fldiv@sign:
  1032                           	opt stack 0
  1033                           
  1034                           ; 1 bytes @ 0x1B
  1035  00001C                     	ds	1
  1036  00001D                     ?___flmul:
  1037                           	opt stack 0
  1038  00001D                     ___flmul@f1:
  1039                           	opt stack 0
  1040                           
  1041                           ; 4 bytes @ 0x1C
  1042  00001D                     	ds	4
  1043  000021                     ___flmul@f2:
  1044                           	opt stack 0
  1045                           
  1046                           ; 4 bytes @ 0x20
  1047  000021                     	ds	4
  1048  000025                     ___flmul@exp:
  1049                           	opt stack 0
  1050                           
  1051                           ; 1 bytes @ 0x24
  1052  000025                     	ds	1
  1053  000026                     ___flmul@f3_as_product:
  1054                           	opt stack 0
  1055                           
  1056                           ; 4 bytes @ 0x25
  1057  000026                     	ds	4
  1058  00002A                     ___flmul@cntr:
  1059                           	opt stack 0
  1060                           
  1061                           ; 1 bytes @ 0x29
  1062  00002A                     	ds	1
  1063  00002B                     ___flmul@sign:
  1064                           	opt stack 0
  1065                           
  1066                           ; 1 bytes @ 0x2A
  1067  00002B                     	ds	1
  1068  00002C                     ?___fladd:
  1069                           	opt stack 0
  1070  00002C                     ___fladd@f1:
  1071                           	opt stack 0
  1072                           
  1073                           ; 4 bytes @ 0x2B
  1074  00002C                     	ds	4
  1075  000030                     ___fladd@f2:
  1076                           	opt stack 0
  1077                           
  1078                           ; 4 bytes @ 0x2F
  1079  000030                     	ds	1
  1080  000031                     _format_number$68:
  1081                           	opt stack 0
  1082                           
  1083                           ; 2 bytes @ 0x30
  1084  000031                     	ds	2
  1085  000033                     format_number@padchar:
  1086                           	opt stack 0
  1087                           
  1088                           ; 1 bytes @ 0x32
  1089  000033                     	ds	1
  1090  000034                     ??___fladd:
  1091  000034                     format_number@di:
  1092                           	opt stack 0
  1093                           
  1094                           ; 1 bytes @ 0x33
  1095  000034                     	ds	1
  1096  000035                     format_number@i:
  1097                           	opt stack 0
  1098  000035                     ___fladd@sign:
  1099                           	opt stack 0
  1100                           
  1101                           ; 1 bytes @ 0x34
  1102  000035                     	ds	1
  1103  000036                     ?_measure_freq:
  1104                           	opt stack 0
  1105  000036                     ___fladd@exp2:
  1106                           	opt stack 0
  1107  000036                     print_reading@measurement:
  1108                           	opt stack 0
  1109  000036                     format_xint32@x:
  1110                           	opt stack 0
  1111                           
  1112                           ; 4 bytes @ 0x35
  1113  000036                     	ds	1
  1114  000037                     ___fladd@exp1:
  1115                           	opt stack 0
  1116                           
  1117                           ; 1 bytes @ 0x36
  1118  000037                     	ds	1
  1119  000038                     ??_measure_freq:
  1120  000038                     ?___flsub:
  1121                           	opt stack 0
  1122  000038                     ?_eval_poly:
  1123                           	opt stack 0
  1124  000038                     _print_reading$1104:
  1125                           	opt stack 0
  1126  000038                     ___flsub@f1:
  1127                           	opt stack 0
  1128  000038                     eval_poly@x:
  1129                           	opt stack 0
  1130                           
  1131                           ; 4 bytes @ 0x37
  1132  000038                     	ds	1
  1133  000039                     measure_freq@count:
  1134                           	opt stack 0
  1135                           
  1136                           ; 2 bytes @ 0x38
  1137  000039                     	ds	1
  1138  00003A                     _print_reading$1105:
  1139                           	opt stack 0
  1140                           
  1141                           ; 2 bytes @ 0x39
  1142  00003A                     	ds	1
  1143  00003B                     ?___lwtofl:
  1144                           	opt stack 0
  1145  00003B                     ___lwtofl@c:
  1146                           	opt stack 0
  1147                           
  1148                           ; 2 bytes @ 0x3A
  1149  00003B                     	ds	1
  1150  00003C                     eval_poly@d:
  1151                           	opt stack 0
  1152  00003C                     ___flsub@f2:
  1153                           	opt stack 0
  1154                           
  1155                           ; 4 bytes @ 0x3B
  1156  00003C                     	ds	1
  1157  00003D                     eval_poly@n:
  1158                           	opt stack 0
  1159                           
  1160                           ; 2 bytes @ 0x3C
  1161  00003D                     	ds	2
  1162  00003F                     ??_eval_poly:
  1163  00003F                     calibrate@i:
  1164                           	opt stack 0
  1165                           
  1166                           ; 1 bytes @ 0x3E
  1167  00003F                     	ds	1
  1168  000040                     eval_poly@res:
  1169                           	opt stack 0
  1170                           
  1171                           ; 4 bytes @ 0x3F
  1172  000040                     	ds	4
  1173  000044                     ?_ldexp:
  1174                           	opt stack 0
  1175  000044                     ?_log:
  1176                           	opt stack 0
  1177  000044                     ldexp@value:
  1178                           	opt stack 0
  1179  000044                     log@x:
  1180                           	opt stack 0
  1181                           
  1182                           ; 4 bytes @ 0x43
  1183  000044                     	ds	4
  1184  000048                     ldexp@newexp:
  1185                           	opt stack 0
  1186  000048                     log@exponent:
  1187                           	opt stack 0
  1188                           
  1189                           ; 2 bytes @ 0x47
  1190  000048                     	ds	2
  1191  00004A                     ??_ldexp:
  1192  00004A                     ?_log10:
  1193                           	opt stack 0
  1194  00004A                     log10@x:
  1195                           	opt stack 0
  1196                           
  1197                           ; 4 bytes @ 0x49
  1198  00004A                     	ds	4
  1199  00004E                     _log10$1106:
  1200                           	opt stack 0
  1201                           
  1202                           ; 4 bytes @ 0x4D
  1203  00004E                     	ds	4
  1204  000052                     ?___fltol:
  1205                           	opt stack 0
  1206  000052                     ___fltol@f1:
  1207                           	opt stack 0
  1208                           
  1209                           ; 4 bytes @ 0x51
  1210  000052                     	ds	4
  1211  000056                     ??___fltol:
  1212                           
  1213                           ; 0 bytes @ 0x55
  1214  000056                     	ds	4
  1215  00005A                     tblptru	equ	0xFF8
  1216                           tblptrh	equ	0xFF7
  1217                           tblptrl	equ	0xFF6
  1218                           tablat	equ	0xFF5
  1219                           prodl	equ	0xFF3
  1220                           intcon	equ	0xFF2
  1221                           intcon2	equ	0xFF1
  1222                           postinc0	equ	0xFEE
  1223                           wreg	equ	0xFE8
  1224                           postdec1	equ	0xFE5
  1225                           fsr1l	equ	0xFE1
  1226                           indf2	equ	0xFDF
  1227                           postinc2	equ	0xFDE
  1228                           postdec2	equ	0xFDD
  1229                           fsr2h	equ	0xFDA
  1230                           fsr2l	equ	0xFD9
  1231                           status	equ	0xFD8
  1232                           
  1233                           ; 0 bytes @ 0x59
  1234 ;;
  1235 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1236 ;;
  1237 ;; *************** function _main *****************
  1238 ;; Defined at:
  1239 ;;		line 115 in file "../../../LC-meter.c"
  1240 ;; Parameters:    Size  Location     Type
  1241 ;;		None
  1242 ;; Auto vars:     Size  Location     Type
  1243 ;;		None
  1244 ;; Return value:  Size  Location     Type
  1245 ;;		None               void
  1246 ;; Registers used:
  1247 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1248 ;; Tracked objects:
  1249 ;;		On entry : 0/0
  1250 ;;		On exit  : 0/0
  1251 ;;		Unchanged: 0/0
  1252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1253 ;;      Params:         0       0       0       0       0       0       0       0       0
  1254 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1255 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1256 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1257 ;;Total ram usage:        0 bytes
  1258 ;; Hardware stack levels required when called:    8
  1259 ;; This function calls:
  1260 ;;		_calibrate
  1261 ;;		_delay10ms
  1262 ;;		_format_double
  1263 ;;		_indicator
  1264 ;;		_lcd_begin
  1265 ;;		_lcd_clear
  1266 ;;		_lcd_gotoxy
  1267 ;;		_lcd_init
  1268 ;;		_lcd_puts
  1269 ;;		_measure_capacitance
  1270 ;;		_measure_inductance
  1271 ;;		_ser_init
  1272 ;;		_ser_puts
  1273 ;;		_timer0_init
  1274 ;;		_timer2_init
  1275 ;; This function is called by:
  1276 ;;		Startup code after reset
  1277 ;; This function uses a non-reentrant model
  1278 ;;
  1279                           
  1280                           	psect	text0
  1281  001B04                     __ptext0:
  1282                           	opt stack 0
  1283  001B04                     _main:
  1284                           	opt stack 23
  1285                           
  1286                           ;LC-meter.c: 116: bres = msecpart = msecs = seconds = 0;
  1287                           
  1288                           ;incstack = 0
  1289  001B04  0100               	movlb	0	; () banked
  1290  001B06  6BC4               	clrf	_seconds& (0+255),b	;volatile
  1291  001B08  6BC5               	clrf	(_seconds+1)& (0+255),b	;volatile
  1292  001B0A  6BC6               	clrf	(_seconds+2)& (0+255),b	;volatile
  1293  001B0C  6BC7               	clrf	(_seconds+3)& (0+255),b	;volatile
  1294  001B0E  C0C4  F0C0         	movff	_seconds,_msecs	;volatile
  1295  001B12  C0C5  F0C1         	movff	_seconds+1,_msecs+1	;volatile
  1296  001B16  C0C6  F0C2         	movff	_seconds+2,_msecs+2	;volatile
  1297  001B1A  C0C7  F0C3         	movff	_seconds+3,_msecs+3	;volatile
  1298  001B1E  C0C0  F0EF         	movff	_msecs,_msecpart	;volatile
  1299  001B22  C0C1  F0F0         	movff	_msecs+1,_msecpart+1	;volatile
  1300  001B26  C0EF  F0ED         	movff	_msecpart,_bres	;volatile
  1301  001B2A  C0F0  F0EE         	movff	_msecpart+1,_bres+1	;volatile
  1302                           
  1303                           ;LC-meter.c: 118: CCal = 1000;
  1304  001B2E  6BE9               	clrf	_CCal& (0+255),b
  1305  001B30  6BEA               	clrf	(_CCal+1)& (0+255),b
  1306  001B32  0E7A               	movlw	122
  1307  001B34  6FEB               	movwf	(_CCal+2)& (0+255),b
  1308  001B36  0E44               	movlw	68
  1309  001B38  6FEC               	movwf	(_CCal+3)& (0+255),b
  1310                           
  1311                           ;LC-meter.c: 127: TRISA = 0b11001111;
  1312  001B3A  0ECF               	movlw	207
  1313  001B3C  6E92               	movwf	3986,c	;volatile
  1314                           
  1315                           ; BSR set to: 0
  1316                           ;LC-meter.c: 130: timer0_init(0b100 | 0x40);
  1317  001B3E  0E44               	movlw	68
  1318  001B40  EC74  F011         	call	_timer0_init
  1319                           
  1320                           ; BSR set to: 0
  1321                           ;LC-meter.c: 146: INTCON2 &= ~0b10000000;
  1322  001B44  9EF1               	bcf	intcon2,7,c	;volatile
  1323                           
  1324                           ; BSR set to: 0
  1325                           ;LC-meter.c: 152: TRISC &= ~0b00000010;
  1326  001B46  9294               	bcf	3988,1,c	;volatile
  1327                           
  1328                           ; BSR set to: 0
  1329                           ;LC-meter.c: 153: LATC &= ~0b00000010; LATC |= (!!(1)) << 1;;
  1330  001B48  928B               	bcf	3979,1,c	;volatile
  1331                           
  1332                           ; BSR set to: 0
  1333  001B4A  828B               	bsf	3979,1,c	;volatile
  1334                           
  1335                           ; BSR set to: 0
  1336                           ;LC-meter.c: 165: timer2_init(0b000 | 0x80);
  1337  001B4C  0E80               	movlw	128
  1338  001B4E  EC81  F013         	call	_timer2_init
  1339                           
  1340                           ;LC-meter.c: 170: TRISC &= 0b10110101;
  1341  001B52  0EB5               	movlw	181
  1342  001B54  1694               	andwf	3988,f,c	;volatile
  1343                           
  1344                           ;LC-meter.c: 182: lcd_init(1);
  1345  001B56  0E01               	movlw	1
  1346  001B58  ECAF  F013         	call	_lcd_init
  1347                           
  1348                           ; BSR set to: 0
  1349                           ;LC-meter.c: 183: lcd_begin(2, 1);
  1350  001B5C  0E01               	movlw	1
  1351  001B5E  6E08               	movwf	lcd_begin@dotsize,c
  1352  001B60  0E02               	movlw	2
  1353  001B62  EC6A  F00E         	call	_lcd_begin
  1354                           
  1355                           ;LC-meter.c: 186: TRISC |= (1 << 4);
  1356  001B66  8894               	bsf	3988,4,c	;volatile
  1357                           
  1358                           ;LC-meter.c: 187: TRISC &= ~(1 << 5);
  1359  001B68  9A94               	bcf	3988,5,c	;volatile
  1360                           
  1361                           ;LC-meter.c: 189: LATC &= ~(1 << 5);
  1362  001B6A  9A8B               	bcf	3979,5,c	;volatile
  1363                           
  1364                           ;LC-meter.c: 190: delay10ms(50);
  1365  001B6C  0E32               	movlw	50
  1366  001B6E  ECA6  F014         	call	_delay10ms
  1367                           
  1368                           ;LC-meter.c: 191: LATC |= (1 << 5);
  1369  001B72  8A8B               	bsf	3979,5,c	;volatile
  1370                           
  1371                           ;LC-meter.c: 192: delay10ms(50);
  1372  001B74  0E32               	movlw	50
  1373  001B76  ECA6  F014         	call	_delay10ms
  1374                           
  1375                           ;LC-meter.c: 193: LATC &= ~(1 << 5);
  1376  001B7A  9A8B               	bcf	3979,5,c	;volatile
  1377                           
  1378                           ;LC-meter.c: 194: delay10ms(50);
  1379  001B7C  0E32               	movlw	50
  1380  001B7E  ECA6  F014         	call	_delay10ms
  1381                           
  1382                           ;LC-meter.c: 195: LATC |= (1 << 5);
  1383  001B82  8A8B               	bsf	3979,5,c	;volatile
  1384                           
  1385                           ;LC-meter.c: 196: delay10ms(50);
  1386  001B84  0E32               	movlw	50
  1387  001B86  ECA6  F014         	call	_delay10ms
  1388                           
  1389                           ;LC-meter.c: 197: LATC &= ~(1 << 5);
  1390  001B8A  9A8B               	bcf	3979,5,c	;volatile
  1391                           
  1392                           ;LC-meter.c: 200: ser_init();
  1393  001B8C  EC2C  F014         	call	_ser_init	;wreg free
  1394                           
  1395                           ; BSR set to: 0
  1396                           ;LC-meter.c: 207: INTCON |= 0xc0;
  1397  001B90  0EC0               	movlw	192
  1398  001B92  12F2               	iorwf	intcon,f,c	;volatile
  1399                           
  1400                           ; BSR set to: 0
  1401                           ;LC-meter.c: 217: lcd_gotoxy(0, 0);
  1402  001B94  0E00               	movlw	0
  1403  001B96  6A08               	clrf	lcd_gotoxy@row,c
  1404  001B98  EC4C  F013         	call	_lcd_gotoxy
  1405                           
  1406                           ;LC-meter.c: 219: lcd_puts("LC-meter ");
  1407  001B9C  0E75               	movlw	STR_28& (0+255)
  1408  001B9E  ECC5  F013         	call	_lcd_puts
  1409                           
  1410                           ;LC-meter.c: 220: format_double( CCal);
  1411  001BA2  C0E9  F091         	movff	_CCal,format_double@num
  1412  001BA6  C0EA  F092         	movff	_CCal+1,format_double@num+1
  1413  001BAA  C0EB  F093         	movff	_CCal+2,format_double@num+2
  1414  001BAE  C0EC  F094         	movff	_CCal+3,format_double@num+3
  1415  001BB2  EC87  F00A         	call	_format_double	;wreg free
  1416                           
  1417                           ;LC-meter.c: 226: delay10ms(200);
  1418  001BB6  0EC8               	movlw	200
  1419  001BB8  ECA6  F014         	call	_delay10ms
  1420                           
  1421                           ;LC-meter.c: 229: calibrate();
  1422  001BBC  ECF9  F00D         	call	_calibrate	;wreg free
  1423                           
  1424                           ;LC-meter.c: 231: lcd_clear();
  1425  001BC0  EC8A  F014         	call	_lcd_clear	;wreg free
  1426  001BC4                     l4190:
  1427                           
  1428                           ;LC-meter.c: 242: ser_puts("...\r\n");
  1429  001BC4  0E98               	movlw	STR_29& (0+255)
  1430  001BC6  EC60  F014         	call	_ser_puts
  1431                           
  1432                           ;LC-meter.c: 243: if((!!(PORTC & 0b10000)))
  1433  001BCA  A882               	btfss	3970,4,c	;volatile
  1434  001BCC  D003               	goto	l4196
  1435                           
  1436                           ;LC-meter.c: 244: measure_capacitance();
  1437  001BCE  ECA1  F006         	call	_measure_capacitance	;wreg free
  1438  001BD2  D002               	goto	l449
  1439  001BD4                     l4196:
  1440                           
  1441                           ;LC-meter.c: 245: else
  1442                           ;LC-meter.c: 246: measure_inductance();
  1443  001BD4  EC70  F004         	call	_measure_inductance	;wreg free
  1444  001BD8                     l449:
  1445                           
  1446                           ;LC-meter.c: 248: indicator(1);
  1447  001BD8  0E01               	movlw	1
  1448  001BDA  EC6F  F014         	call	_indicator
  1449                           
  1450                           ;LC-meter.c: 249: delay10ms(30);
  1451  001BDE  0E1E               	movlw	30
  1452  001BE0  ECA6  F014         	call	_delay10ms
  1453                           
  1454                           ;LC-meter.c: 250: indicator(0);
  1455  001BE4  0E00               	movlw	0
  1456  001BE6  EC6F  F014         	call	_indicator
  1457                           
  1458                           ;LC-meter.c: 251: delay10ms(20);
  1459  001BEA  0E14               	movlw	20
  1460  001BEC  ECA6  F014         	call	_delay10ms
  1461                           
  1462                           ;LC-meter.c: 252: }
  1463  001BF0  D7E9               	goto	l4190
  1464  001BF2                     __end_of_main:
  1465                           	opt stack 0
  1466                           tblptru	equ	0xFF8
  1467                           tblptrh	equ	0xFF7
  1468                           tblptrl	equ	0xFF6
  1469                           tablat	equ	0xFF5
  1470                           prodl	equ	0xFF3
  1471                           intcon	equ	0xFF2
  1472                           intcon2	equ	0xFF1
  1473                           postinc0	equ	0xFEE
  1474                           wreg	equ	0xFE8
  1475                           postdec1	equ	0xFE5
  1476                           fsr1l	equ	0xFE1
  1477                           indf2	equ	0xFDF
  1478                           postinc2	equ	0xFDE
  1479                           postdec2	equ	0xFDD
  1480                           fsr2h	equ	0xFDA
  1481                           fsr2l	equ	0xFD9
  1482                           status	equ	0xFD8
  1483                           
  1484 ;; *************** function _timer2_init *****************
  1485 ;; Defined at:
  1486 ;;		line 125 in file "../../../lib/timer.c"
  1487 ;; Parameters:    Size  Location     Type
  1488 ;;  ps_mode         1    wreg     unsigned char 
  1489 ;; Auto vars:     Size  Location     Type
  1490 ;;  ps_mode         1    6[COMRAM] unsigned char 
  1491 ;;  postscaler      1    0        unsigned char 
  1492 ;;  ps              1    4[COMRAM] unsigned char 
  1493 ;; Return value:  Size  Location     Type
  1494 ;;		None               void
  1495 ;; Registers used:
  1496 ;;		wreg, status,2, status,0
  1497 ;; Tracked objects:
  1498 ;;		On entry : F/0
  1499 ;;		On exit  : 0/0
  1500 ;;		Unchanged: 0/0
  1501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1502 ;;      Params:         0       0       0       0       0       0       0       0       0
  1503 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1504 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1505 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1506 ;;Total ram usage:        4 bytes
  1507 ;; Hardware stack levels used:    1
  1508 ;; Hardware stack levels required when called:    1
  1509 ;; This function calls:
  1510 ;;		Nothing
  1511 ;; This function is called by:
  1512 ;;		_main
  1513 ;; This function uses a non-reentrant model
  1514 ;;
  1515                           
  1516                           	psect	text1
  1517  002702                     __ptext1:
  1518                           	opt stack 0
  1519  002702                     _timer2_init:
  1520                           	opt stack 29
  1521                           
  1522                           ;incstack = 0
  1523                           ;timer2_init@ps_mode stored from wreg
  1524  002702  6E07               	movwf	timer2_init@ps_mode,c
  1525                           
  1526                           ; BSR set to: 0
  1527                           ;timer.c: 126: uint8_t ps = ps_mode & 0b1111;
  1528  002704  5007               	movf	timer2_init@ps_mode,w,c
  1529  002706  0B0F               	andlw	15
  1530  002708  6E05               	movwf	timer2_init@ps,c
  1531                           
  1532                           ; BSR set to: 0
  1533                           ;timer.c: 130: T2CON &= ~0b01111111;
  1534  00270A  0E80               	movlw	128
  1535  00270C  16BA               	andwf	4026,f,c	;volatile
  1536                           
  1537                           ;timer.c: 132: T2CON |= (postscaler & 0b1111) << 3;
  1538  00270E  50BA               	movf	4026,w,c	;volatile
  1539                           
  1540                           ;timer.c: 133: T2CON |= (ps & 0b11);
  1541  002710  5005               	movf	timer2_init@ps,w,c
  1542  002712  0B03               	andlw	3
  1543  002714  12BA               	iorwf	4026,f,c	;volatile
  1544                           
  1545                           ; BSR set to: 0
  1546                           ;timer.c: 135: TMR2 = 0;
  1547  002716  6ABC               	clrf	4028,c	;volatile
  1548                           
  1549                           ; BSR set to: 0
  1550                           ;timer.c: 137: T2CON |= 0b100;
  1551  002718  84BA               	bsf	4026,2,c	;volatile
  1552                           
  1553                           ; BSR set to: 0
  1554                           ;timer.c: 140: PIR1 &= ~0b10;
  1555  00271A  929E               	bcf	3998,1,c	;volatile
  1556                           
  1557                           ;timer.c: 141: PIE1 = (!!(ps_mode & 0x80)) << 1;
  1558  00271C  AE07               	btfss	timer2_init@ps_mode,7,c
  1559  00271E  D003               	goto	u2390
  1560  002720  6A04               	clrf	??_timer2_init& (0+255),c
  1561  002722  2A04               	incf	??_timer2_init& (0+255),f,c
  1562  002724  D001               	goto	u2408
  1563  002726                     u2390:
  1564  002726  6A04               	clrf	??_timer2_init& (0+255),c
  1565  002728                     u2408:
  1566  002728  90D8               	bcf	status,0,c
  1567  00272A  3404               	rlcf	??_timer2_init,w,c
  1568  00272C  6E9D               	movwf	3997,c	;volatile
  1569  00272E  0012               	return		;funcret
  1570  002730                     __end_of_timer2_init:
  1571                           	opt stack 0
  1572                           tblptru	equ	0xFF8
  1573                           tblptrh	equ	0xFF7
  1574                           tblptrl	equ	0xFF6
  1575                           tablat	equ	0xFF5
  1576                           prodl	equ	0xFF3
  1577                           intcon	equ	0xFF2
  1578                           intcon2	equ	0xFF1
  1579                           postinc0	equ	0xFEE
  1580                           wreg	equ	0xFE8
  1581                           postdec1	equ	0xFE5
  1582                           fsr1l	equ	0xFE1
  1583                           indf2	equ	0xFDF
  1584                           postinc2	equ	0xFDE
  1585                           postdec2	equ	0xFDD
  1586                           fsr2h	equ	0xFDA
  1587                           fsr2l	equ	0xFD9
  1588                           status	equ	0xFD8
  1589                           
  1590 ;; *************** function _timer0_init *****************
  1591 ;; Defined at:
  1592 ;;		line 27 in file "../../../lib/timer.c"
  1593 ;; Parameters:    Size  Location     Type
  1594 ;;  ps_mode         1    wreg     unsigned char 
  1595 ;; Auto vars:     Size  Location     Type
  1596 ;;  ps_mode         1   12[COMRAM] unsigned char 
  1597 ;;  prescaler       1   11[COMRAM] unsigned char 
  1598 ;; Return value:  Size  Location     Type
  1599 ;;		None               void
  1600 ;; Registers used:
  1601 ;;		wreg, status,2, status,0
  1602 ;; Tracked objects:
  1603 ;;		On entry : F/0
  1604 ;;		On exit  : F/0
  1605 ;;		Unchanged: F/0
  1606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1607 ;;      Params:         0       0       0       0       0       0       0       0       0
  1608 ;;      Locals:        10       0       0       0       0       0       0       0       0
  1609 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1610 ;;      Totals:        10       0       0       0       0       0       0       0       0
  1611 ;;Total ram usage:       10 bytes
  1612 ;; Hardware stack levels used:    1
  1613 ;; Hardware stack levels required when called:    1
  1614 ;; This function calls:
  1615 ;;		Nothing
  1616 ;; This function is called by:
  1617 ;;		_main
  1618 ;; This function uses a non-reentrant model
  1619 ;;
  1620                           
  1621                           	psect	text2
  1622  0022E8                     __ptext2:
  1623                           	opt stack 0
  1624  0022E8                     _timer0_init:
  1625                           	opt stack 29
  1626                           
  1627                           ;incstack = 0
  1628                           ;timer0_init@ps_mode stored from wreg
  1629  0022E8  6E0D               	movwf	timer0_init@ps_mode,c
  1630                           
  1631                           ; BSR set to: 0
  1632                           ;timer.c: 28: uint8_t prescaler = ps_mode & 0b1111;
  1633  0022EA  500D               	movf	timer0_init@ps_mode,w,c
  1634  0022EC  0B0F               	andlw	15
  1635  0022EE  6E0C               	movwf	timer0_init@prescaler,c
  1636                           
  1637                           ; BSR set to: 0
  1638                           ;timer.c: 30: TMR0 = 0;
  1639  0022F0  6AD6               	clrf	4054,c	;volatile
  1640  0022F2  6AD7               	clrf	4055,c	;volatile
  1641                           
  1642                           ; BSR set to: 0
  1643                           ;timer.c: 33: T0CON |= (!!(ps_mode & 0x40)) ? 0x20 : 0x00;
  1644  0022F4  BC0D               	btfsc	timer0_init@ps_mode,6,c
  1645  0022F6  D003               	goto	l3198
  1646                           
  1647                           ; BSR set to: 0
  1648  0022F8  6A04               	clrf	_timer0_init$152,c
  1649  0022FA  6A05               	clrf	_timer0_init$152+1,c
  1650  0022FC  D003               	goto	l3200
  1651  0022FE                     l3198:
  1652                           
  1653                           ; BSR set to: 0
  1654  0022FE  6A05               	clrf	_timer0_init$152+1,c
  1655  002300  0E20               	movlw	32
  1656  002302  6E04               	movwf	_timer0_init$152,c
  1657  002304                     l3200:
  1658                           
  1659                           ; BSR set to: 0
  1660  002304  5004               	movf	_timer0_init$152,w,c
  1661  002306  12D5               	iorwf	4053,f,c	;volatile
  1662                           
  1663                           ; BSR set to: 0
  1664                           ;timer.c: 36: T0CON |= (!!(ps_mode & 0x10)) ? 0x10 : 0x00;
  1665  002308  B80D               	btfsc	timer0_init@ps_mode,4,c
  1666  00230A  D003               	goto	l3206
  1667                           
  1668                           ; BSR set to: 0
  1669  00230C  6A06               	clrf	_timer0_init$153,c
  1670  00230E  6A07               	clrf	_timer0_init$153+1,c
  1671  002310  D003               	goto	l3208
  1672  002312                     l3206:
  1673                           
  1674                           ; BSR set to: 0
  1675  002312  6A07               	clrf	_timer0_init$153+1,c
  1676  002314  0E10               	movlw	16
  1677  002316  6E06               	movwf	_timer0_init$153,c
  1678  002318                     l3208:
  1679                           
  1680                           ; BSR set to: 0
  1681  002318  5006               	movf	_timer0_init$153,w,c
  1682  00231A  12D5               	iorwf	4053,f,c	;volatile
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;timer.c: 39: T0CON &= (!!prescaler) ? ~0x08 : ~0x00;
  1686  00231C  500C               	movf	timer0_init@prescaler,w,c
  1687  00231E  E103               	bnz	l3214
  1688                           
  1689                           ; BSR set to: 0
  1690  002320  6808               	setf	_timer0_init$154,c
  1691  002322  6809               	setf	_timer0_init$154+1,c
  1692  002324  D003               	goto	l3216
  1693  002326                     l3214:
  1694                           
  1695                           ; BSR set to: 0
  1696  002326  6809               	setf	_timer0_init$154+1,c
  1697  002328  0EF7               	movlw	247
  1698  00232A  6E08               	movwf	_timer0_init$154,c
  1699  00232C                     l3216:
  1700                           
  1701                           ; BSR set to: 0
  1702  00232C  5008               	movf	_timer0_init$154,w,c
  1703  00232E  16D5               	andwf	4053,f,c	;volatile
  1704                           
  1705                           ; BSR set to: 0
  1706                           ;timer.c: 41: T0CON &= ~0b111;
  1707  002330  0EF8               	movlw	248
  1708  002332  16D5               	andwf	4053,f,c	;volatile
  1709                           
  1710                           ;timer.c: 43: if(prescaler > 0) {
  1711  002334  500C               	movf	timer0_init@prescaler,w,c
  1712  002336  E003               	bz	l3222
  1713                           
  1714                           ; BSR set to: 0
  1715                           ;timer.c: 44: T0CON |= (prescaler - 1) & 0b111;
  1716  002338  040C               	decf	timer0_init@prescaler,w,c
  1717  00233A  0B07               	andlw	7
  1718  00233C  12D5               	iorwf	4053,f,c	;volatile
  1719  00233E                     l3222:
  1720                           
  1721                           ; BSR set to: 0
  1722                           ;timer.c: 50: }
  1723                           ;timer.c: 54: INTCON &= ~0x40;
  1724  00233E  9CF2               	bcf	intcon,6,c	;volatile
  1725                           
  1726                           ; BSR set to: 0
  1727                           ;timer.c: 55: INTCON |= (!!(ps_mode & 0x80)) ? 0x20 : 0x00;
  1728  002340  BE0D               	btfsc	timer0_init@ps_mode,7,c
  1729  002342  D003               	goto	l3228
  1730                           
  1731                           ; BSR set to: 0
  1732  002344  6A0A               	clrf	_timer0_init$155,c
  1733  002346  6A0B               	clrf	_timer0_init$155+1,c
  1734  002348  D003               	goto	l3230
  1735  00234A                     l3228:
  1736                           
  1737                           ; BSR set to: 0
  1738  00234A  6A0B               	clrf	_timer0_init$155+1,c
  1739  00234C  0E20               	movlw	32
  1740  00234E  6E0A               	movwf	_timer0_init$155,c
  1741  002350                     l3230:
  1742                           
  1743                           ; BSR set to: 0
  1744  002350  500A               	movf	_timer0_init$155,w,c
  1745  002352  12F2               	iorwf	intcon,f,c	;volatile
  1746                           
  1747                           ; BSR set to: 0
  1748  002354  0012               	return		;funcret
  1749  002356                     __end_of_timer0_init:
  1750                           	opt stack 0
  1751                           tblptru	equ	0xFF8
  1752                           tblptrh	equ	0xFF7
  1753                           tblptrl	equ	0xFF6
  1754                           tablat	equ	0xFF5
  1755                           prodl	equ	0xFF3
  1756                           intcon	equ	0xFF2
  1757                           intcon2	equ	0xFF1
  1758                           postinc0	equ	0xFEE
  1759                           wreg	equ	0xFE8
  1760                           postdec1	equ	0xFE5
  1761                           fsr1l	equ	0xFE1
  1762                           indf2	equ	0xFDF
  1763                           postinc2	equ	0xFDE
  1764                           postdec2	equ	0xFDD
  1765                           fsr2h	equ	0xFDA
  1766                           fsr2l	equ	0xFD9
  1767                           status	equ	0xFD8
  1768                           
  1769 ;; *************** function _ser_init *****************
  1770 ;; Defined at:
  1771 ;;		line 125 in file "../../../lib/ser.c"
  1772 ;; Parameters:    Size  Location     Type
  1773 ;;		None
  1774 ;; Auto vars:     Size  Location     Type
  1775 ;;		None
  1776 ;; Return value:  Size  Location     Type
  1777 ;;		None               void
  1778 ;; Registers used:
  1779 ;;		wreg, status,2
  1780 ;; Tracked objects:
  1781 ;;		On entry : 0/0
  1782 ;;		On exit  : F/0
  1783 ;;		Unchanged: 0/0
  1784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1785 ;;      Params:         0       0       0       0       0       0       0       0       0
  1786 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1787 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1788 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1789 ;;Total ram usage:        0 bytes
  1790 ;; Hardware stack levels used:    1
  1791 ;; Hardware stack levels required when called:    1
  1792 ;; This function calls:
  1793 ;;		Nothing
  1794 ;; This function is called by:
  1795 ;;		_main
  1796 ;; This function uses a non-reentrant model
  1797 ;;
  1798                           
  1799                           	psect	text3
  1800  002858                     __ptext3:
  1801                           	opt stack 0
  1802  002858                     _ser_init:
  1803                           	opt stack 29
  1804                           
  1805                           ;ser.c: 128: TRISC6 = 1;
  1806                           
  1807                           ; BSR set to: 0
  1808                           ;incstack = 0
  1809  002858  8C94               	bsf	3988,6,c	;volatile
  1810                           
  1811                           ;ser.c: 129: LATC7 = 1;
  1812  00285A  8E8B               	bsf	3979,7,c	;volatile
  1813                           
  1814                           ;ser.c: 131: BRGH = 1;
  1815  00285C  84AC               	bsf	4012,2,c	;volatile
  1816                           
  1817                           ;ser.c: 136: SPBRG = ser_brg;
  1818  00285E  0E1F               	movlw	31
  1819  002860  6EAF               	movwf	4015,c	;volatile
  1820                           
  1821                           ;ser.c: 139: TX9 = 0;
  1822  002862  9CAC               	bcf	4012,6,c	;volatile
  1823                           
  1824                           ;ser.c: 140: RX9 = 0;
  1825  002864  9CAB               	bcf	4011,6,c	;volatile
  1826                           
  1827                           ;ser.c: 142: SYNC = 0;
  1828  002866  98AC               	bcf	4012,4,c	;volatile
  1829                           
  1830                           ;ser.c: 143: SPEN = 1;
  1831  002868  8EAB               	bsf	4011,7,c	;volatile
  1832                           
  1833                           ;ser.c: 144: CREN = 1;
  1834  00286A  88AB               	bsf	4011,4,c	;volatile
  1835                           
  1836                           ;ser.c: 145: TXIE = 0;
  1837  00286C  989D               	bcf	3997,4,c	;volatile
  1838                           
  1839                           ;ser.c: 147: TXEN = 1;
  1840  00286E  8AAC               	bsf	4012,5,c	;volatile
  1841                           
  1842                           ;ser.c: 148: PEIE = 1;
  1843  002870  8CF2               	bsf	intcon,6,c	;volatile
  1844                           
  1845                           ;ser.c: 150: rxiptr = rxoptr = txiptr = txoptr = 0;
  1846  002872  6A5C               	clrf	_txoptr,c	;volatile
  1847  002874  6A5B               	clrf	_txiptr,c	;volatile
  1848  002876  0100               	movlb	0	; () banked
  1849  002878  6BD2               	clrf	_rxoptr& (0+255),b	;volatile
  1850  00287A  6BD1               	clrf	_rxiptr& (0+255),b	;volatile
  1851                           
  1852                           ; BSR set to: 0
  1853  00287C  0012               	return		;funcret
  1854  00287E                     __end_of_ser_init:
  1855                           	opt stack 0
  1856                           tblptru	equ	0xFF8
  1857                           tblptrh	equ	0xFF7
  1858                           tblptrl	equ	0xFF6
  1859                           tablat	equ	0xFF5
  1860                           prodl	equ	0xFF3
  1861                           intcon	equ	0xFF2
  1862                           intcon2	equ	0xFF1
  1863                           postinc0	equ	0xFEE
  1864                           wreg	equ	0xFE8
  1865                           postdec1	equ	0xFE5
  1866                           fsr1l	equ	0xFE1
  1867                           indf2	equ	0xFDF
  1868                           postinc2	equ	0xFDE
  1869                           postdec2	equ	0xFDD
  1870                           fsr2h	equ	0xFDA
  1871                           fsr2l	equ	0xFD9
  1872                           status	equ	0xFD8
  1873                           
  1874 ;; *************** function _measure_inductance *****************
  1875 ;; Defined at:
  1876 ;;		line 196 in file "../../../src/measure.c"
  1877 ;; Parameters:    Size  Location     Type
  1878 ;;		None
  1879 ;; Auto vars:     Size  Location     Type
  1880 ;;  Lin             4   41[BANK0 ] unsigned char 
  1881 ;;  denominator     4    6[BANK0 ] unsigned char 
  1882 ;;  numerator       4    2[BANK0 ] unsigned char 
  1883 ;;  var             2   39[BANK0 ] unsigned int 
  1884 ;;  unit            1   26[BANK0 ] unsigned char 
  1885 ;; Return value:  Size  Location     Type
  1886 ;;		None               void
  1887 ;; Registers used:
  1888 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1889 ;; Tracked objects:
  1890 ;;		On entry : 0/0
  1891 ;;		On exit  : 0/0
  1892 ;;		Unchanged: 0/0
  1893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1894 ;;      Params:         0       0       0       0       0       0       0       0       0
  1895 ;;      Locals:         0      43       0       0       0       0       0       0       0
  1896 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1897 ;;      Totals:         0      43       0       0       0       0       0       0       0
  1898 ;;Total ram usage:       43 bytes
  1899 ;; Hardware stack levels used:    1
  1900 ;; Hardware stack levels required when called:    6
  1901 ;; This function calls:
  1902 ;;		___fldiv
  1903 ;;		___flge
  1904 ;;		___flmul
  1905 ;;		___flsub
  1906 ;;		___fltol
  1907 ;;		___lwtofl
  1908 ;;		_lcd_gotoxy
  1909 ;;		_measure_freq
  1910 ;;		_print_reading
  1911 ;;		_print_unit
  1912 ;;		_put_str
  1913 ;; This function is called by:
  1914 ;;		_main
  1915 ;; This function uses a non-reentrant model
  1916 ;;
  1917                           
  1918                           	psect	text4
  1919  0008E0                     __ptext4:
  1920                           	opt stack 0
  1921  0008E0                     _measure_inductance:
  1922                           	opt stack 24
  1923                           
  1924                           ;measure.c: 197: uint8_t unit;
  1925                           ;measure.c: 198: uint16_t var;
  1926                           ;measure.c: 200: double Lin, numerator, denominator;
  1927                           ;measure.c: 203: lcd_gotoxy(0, 0);
  1928                           
  1929                           ; BSR set to: 0
  1930                           ;incstack = 0
  1931  0008E0  0E00               	movlw	0
  1932  0008E2  6A08               	clrf	lcd_gotoxy@row,c
  1933  0008E4  EC4C  F013         	call	_lcd_gotoxy
  1934                           
  1935                           ;measure.c: 204: put_str("Inductivity ");
  1936  0008E8  0E5C               	movlw	STR_15& (0+255)
  1937  0008EA  ECDA  F013         	call	_put_str
  1938                           
  1939                           ;measure.c: 206: var = measure_freq();
  1940  0008EE  EC8C  F00C         	call	_measure_freq	;wreg free
  1941  0008F2  C036  F087         	movff	?_measure_freq,measure_inductance@var
  1942  0008F6  C037  F088         	movff	?_measure_freq+1,measure_inductance@var+1
  1943                           
  1944                           ;measure.c: 208: F3 = (double)var;
  1945  0008FA  C087  F03B         	movff	measure_inductance@var,___lwtofl@c
  1946  0008FE  C088  F03C         	movff	measure_inductance@var+1,___lwtofl@c+1
  1947  000902  ECEF  F013         	call	___lwtofl	;wreg free
  1948  000906  C03B  F0BC         	movff	?___lwtofl,_F3
  1949  00090A  C03C  F0BD         	movff	?___lwtofl+1,_F3+1
  1950  00090E  C03D  F0BE         	movff	?___lwtofl+2,_F3+2
  1951  000912  C03E  F0BF         	movff	?___lwtofl+3,_F3+3
  1952                           
  1953                           ;measure.c: 209: if(F3 > F1)
  1954  000916  EC62  F008         	call	PL6	;call to abstracted procedure
  1955  00091A  EC35  F012         	call	___flge	;wreg free
  1956  00091E  E208               	bc	l4104
  1957                           
  1958                           ;measure.c: 210: F3 = F1;
  1959  000920  C0E5  F0BC         	movff	_F1,_F3
  1960  000924  C0E6  F0BD         	movff	_F1+1,_F3+1
  1961  000928  C0E7  F0BE         	movff	_F1+2,_F3+2
  1962  00092C  C0E8  F0BF         	movff	_F1+3,_F3+3
  1963  000930                     l4104:
  1964                           
  1965                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1966  000930  C0B8  F03C         	movff	_F2,___flsub@f2
  1967  000934  C0B9  F03D         	movff	_F2+1,___flsub@f2+1
  1968  000938  C0BA  F03E         	movff	_F2+2,___flsub@f2+2
  1969  00093C  C0BB  F03F         	movff	_F2+3,___flsub@f2+3
  1970  000940  C0B8  F038         	movff	_F2,___flsub@f1
  1971  000944  C0B9  F039         	movff	_F2+1,___flsub@f1+1
  1972  000948  C0BA  F03A         	movff	_F2+2,___flsub@f1+2
  1973  00094C  C0BB  F03B         	movff	_F2+3,___flsub@f1+3
  1974  000950  ECEE  F012         	call	___flsub	;wreg free
  1975  000954  C038  F06A         	movff	?___flsub,_measure_inductance$1097
  1976  000958  C039  F06B         	movff	?___flsub+1,_measure_inductance$1097+1
  1977  00095C  C03A  F06C         	movff	?___flsub+2,_measure_inductance$1097+2
  1978  000960  C03B  F06D         	movff	?___flsub+3,_measure_inductance$1097+3
  1979                           
  1980                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1981  000964  C06A  F03C         	movff	_measure_inductance$1097,___flsub@f2
  1982  000968  C06B  F03D         	movff	_measure_inductance$1097+1,___flsub@f2+1
  1983  00096C  C06C  F03E         	movff	_measure_inductance$1097+2,___flsub@f2+2
  1984  000970  C06D  F03F         	movff	_measure_inductance$1097+3,___flsub@f2+3
  1985  000974  D9CA               	call	PL2	;call to abstracted procedure
  1986  000976  ECD4  F00E         	call	___flmul	;wreg free
  1987  00097A  C01D  F038         	movff	?___flmul,___flsub@f1
  1988  00097E  C01E  F039         	movff	?___flmul+1,___flsub@f1+1
  1989  000982  C01F  F03A         	movff	?___flmul+2,___flsub@f1+2
  1990  000986  C020  F03B         	movff	?___flmul+3,___flsub@f1+3
  1991  00098A  ECEE  F012         	call	___flsub	;wreg free
  1992  00098E  C038  F07B         	movff	?___flsub,_measure_inductance$1098
  1993  000992  C039  F07C         	movff	?___flsub+1,_measure_inductance$1098+1
  1994  000996  C03A  F07D         	movff	?___flsub+2,_measure_inductance$1098+2
  1995  00099A  C03B  F07E         	movff	?___flsub+3,_measure_inductance$1098+3
  1996                           
  1997                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1998  00099E  EC51  F008         	call	PL4	;call to abstracted procedure
  1999  0009A2  ECD4  F00E         	call	___flmul	;wreg free
  2000  0009A6  C01D  F03C         	movff	?___flmul,___flsub@f2
  2001  0009AA  C01E  F03D         	movff	?___flmul+1,___flsub@f2+1
  2002  0009AE  C01F  F03E         	movff	?___flmul+2,___flsub@f2+2
  2003  0009B2  C020  F03F         	movff	?___flmul+3,___flsub@f2+3
  2004  0009B6  D9A9               	call	PL2	;call to abstracted procedure
  2005  0009B8  ECD4  F00E         	call	___flmul	;wreg free
  2006  0009BC  C01D  F038         	movff	?___flmul,___flsub@f1
  2007  0009C0  C01E  F039         	movff	?___flmul+1,___flsub@f1+1
  2008  0009C4  C01F  F03A         	movff	?___flmul+2,___flsub@f1+2
  2009  0009C8  C020  F03B         	movff	?___flmul+3,___flsub@f1+3
  2010  0009CC  ECEE  F012         	call	___flsub	;wreg free
  2011  0009D0  C038  F07F         	movff	?___flsub,_measure_inductance$1099
  2012  0009D4  C039  F080         	movff	?___flsub+1,_measure_inductance$1099+1
  2013  0009D8  C03A  F081         	movff	?___flsub+2,_measure_inductance$1099+2
  2014  0009DC  C03B  F082         	movff	?___flsub+3,_measure_inductance$1099+3
  2015                           
  2016                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  2017  0009E0  C07B  F021         	movff	_measure_inductance$1098,___flmul@f2
  2018  0009E4  C07C  F022         	movff	_measure_inductance$1098+1,___flmul@f2+1
  2019  0009E8  C07D  F023         	movff	_measure_inductance$1098+2,___flmul@f2+2
  2020  0009EC  C07E  F024         	movff	_measure_inductance$1098+3,___flmul@f2+3
  2021  0009F0  C07F  F01D         	movff	_measure_inductance$1099,___flmul@f1
  2022  0009F4  C080  F01E         	movff	_measure_inductance$1099+1,___flmul@f1+1
  2023  0009F8  C081  F01F         	movff	_measure_inductance$1099+2,___flmul@f1+2
  2024  0009FC  C082  F020         	movff	_measure_inductance$1099+3,___flmul@f1+3
  2025  000A00  ECD4  F00E         	call	___flmul	;wreg free
  2026  000A04  C01D  F083         	movff	?___flmul,_measure_inductance$1100
  2027  000A08  C01E  F084         	movff	?___flmul+1,_measure_inductance$1100+1
  2028  000A0C  C01F  F085         	movff	?___flmul+2,_measure_inductance$1100+2
  2029  000A10  C020  F086         	movff	?___flmul+3,_measure_inductance$1100+3
  2030                           
  2031                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  2032  000A14  C083  F01D         	movff	_measure_inductance$1100,___flmul@f1
  2033  000A18  C084  F01E         	movff	_measure_inductance$1100+1,___flmul@f1+1
  2034  000A1C  C085  F01F         	movff	_measure_inductance$1100+2,___flmul@f1+2
  2035  000A20  C086  F020         	movff	_measure_inductance$1100+3,___flmul@f1+3
  2036  000A24  0E00               	movlw	0
  2037  000A26  6E21               	movwf	___flmul@f2,c
  2038  000A28  0E40               	movlw	64
  2039  000A2A  6E22               	movwf	___flmul@f2+1,c
  2040  000A2C  0E1C               	movlw	28
  2041  000A2E  6E23               	movwf	___flmul@f2+2,c
  2042  000A30  0E46               	movlw	70
  2043  000A32  6E24               	movwf	___flmul@f2+3,c
  2044  000A34  ECD4  F00E         	call	___flmul	;wreg free
  2045  000A38  C01D  F062         	movff	?___flmul,measure_inductance@numerator
  2046  000A3C  C01E  F063         	movff	?___flmul+1,measure_inductance@numerator+1
  2047  000A40  C01F  F064         	movff	?___flmul+2,measure_inductance@numerator+2
  2048  000A44  C020  F065         	movff	?___flmul+3,measure_inductance@numerator+3
  2049                           
  2050                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2051  000A48  D960               	call	PL2	;call to abstracted procedure
  2052  000A4A  ECD4  F00E         	call	___flmul	;wreg free
  2053  000A4E  C01D  F06E         	movff	?___flmul,_measure_inductance$1101
  2054  000A52  C01E  F06F         	movff	?___flmul+1,_measure_inductance$1101+1
  2055  000A56  C01F  F070         	movff	?___flmul+2,_measure_inductance$1101+2
  2056  000A5A  C020  F071         	movff	?___flmul+3,_measure_inductance$1101+3
  2057                           
  2058                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2059  000A5E  C0B8  F021         	movff	_F2,___flmul@f2
  2060  000A62  C0B9  F022         	movff	_F2+1,___flmul@f2+1
  2061  000A66  C0BA  F023         	movff	_F2+2,___flmul@f2+2
  2062  000A6A  C0BB  F024         	movff	_F2+3,___flmul@f2+3
  2063  000A6E  C06E  F01D         	movff	_measure_inductance$1101,___flmul@f1
  2064  000A72  C06F  F01E         	movff	_measure_inductance$1101+1,___flmul@f1+1
  2065  000A76  C070  F01F         	movff	_measure_inductance$1101+2,___flmul@f1+2
  2066  000A7A  C071  F020         	movff	_measure_inductance$1101+3,___flmul@f1+3
  2067  000A7E  ECD4  F00E         	call	___flmul	;wreg free
  2068  000A82  C01D  F07B         	movff	?___flmul,_measure_inductance$1098
  2069  000A86  C01E  F07C         	movff	?___flmul+1,_measure_inductance$1098+1
  2070  000A8A  C01F  F07D         	movff	?___flmul+2,_measure_inductance$1098+2
  2071  000A8E  C020  F07E         	movff	?___flmul+3,_measure_inductance$1098+3
  2072                           
  2073                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2074  000A92  C0B8  F021         	movff	_F2,___flmul@f2
  2075  000A96  C0B9  F022         	movff	_F2+1,___flmul@f2+1
  2076  000A9A  C0BA  F023         	movff	_F2+2,___flmul@f2+2
  2077  000A9E  C0BB  F024         	movff	_F2+3,___flmul@f2+3
  2078  000AA2  C07B  F01D         	movff	_measure_inductance$1098,___flmul@f1
  2079  000AA6  C07C  F01E         	movff	_measure_inductance$1098+1,___flmul@f1+1
  2080  000AAA  C07D  F01F         	movff	_measure_inductance$1098+2,___flmul@f1+2
  2081  000AAE  C07E  F020         	movff	_measure_inductance$1098+3,___flmul@f1+3
  2082  000AB2  ECD4  F00E         	call	___flmul	;wreg free
  2083  000AB6  C01D  F07F         	movff	?___flmul,_measure_inductance$1099
  2084  000ABA  C01E  F080         	movff	?___flmul+1,_measure_inductance$1099+1
  2085  000ABE  C01F  F081         	movff	?___flmul+2,_measure_inductance$1099+2
  2086  000AC2  C020  F082         	movff	?___flmul+3,_measure_inductance$1099+3
  2087                           
  2088                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2089  000AC6  C0BC  F021         	movff	_F3,___flmul@f2
  2090  000ACA  C0BD  F022         	movff	_F3+1,___flmul@f2+1
  2091  000ACE  C0BE  F023         	movff	_F3+2,___flmul@f2+2
  2092  000AD2  C0BF  F024         	movff	_F3+3,___flmul@f2+3
  2093  000AD6  C07F  F01D         	movff	_measure_inductance$1099,___flmul@f1
  2094  000ADA  C080  F01E         	movff	_measure_inductance$1099+1,___flmul@f1+1
  2095  000ADE  C081  F01F         	movff	_measure_inductance$1099+2,___flmul@f1+2
  2096  000AE2  C082  F020         	movff	_measure_inductance$1099+3,___flmul@f1+3
  2097  000AE6  ECD4  F00E         	call	___flmul	;wreg free
  2098  000AEA  C01D  F083         	movff	?___flmul,_measure_inductance$1100
  2099  000AEE  C01E  F084         	movff	?___flmul+1,_measure_inductance$1100+1
  2100  000AF2  C01F  F085         	movff	?___flmul+2,_measure_inductance$1100+2
  2101  000AF6  C020  F086         	movff	?___flmul+3,_measure_inductance$1100+3
  2102                           
  2103                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2104  000AFA  C0BC  F021         	movff	_F3,___flmul@f2
  2105  000AFE  C0BD  F022         	movff	_F3+1,___flmul@f2+1
  2106  000B02  C0BE  F023         	movff	_F3+2,___flmul@f2+2
  2107  000B06  C0BF  F024         	movff	_F3+3,___flmul@f2+3
  2108  000B0A  C083  F01D         	movff	_measure_inductance$1100,___flmul@f1
  2109  000B0E  C084  F01E         	movff	_measure_inductance$1100+1,___flmul@f1+1
  2110  000B12  C085  F01F         	movff	_measure_inductance$1100+2,___flmul@f1+2
  2111  000B16  C086  F020         	movff	_measure_inductance$1100+3,___flmul@f1+3
  2112  000B1A  ECD4  F00E         	call	___flmul	;wreg free
  2113  000B1E  C01D  F072         	movff	?___flmul,_measure_inductance$1102
  2114  000B22  C01E  F073         	movff	?___flmul+1,_measure_inductance$1102+1
  2115  000B26  C01F  F074         	movff	?___flmul+2,_measure_inductance$1102+2
  2116  000B2A  C020  F075         	movff	?___flmul+3,_measure_inductance$1102+3
  2117                           
  2118                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2119  000B2E  C0E9  F021         	movff	_CCal,___flmul@f2
  2120  000B32  C0EA  F022         	movff	_CCal+1,___flmul@f2+1
  2121  000B36  C0EB  F023         	movff	_CCal+2,___flmul@f2+2
  2122  000B3A  C0EC  F024         	movff	_CCal+3,___flmul@f2+3
  2123  000B3E  C072  F01D         	movff	_measure_inductance$1102,___flmul@f1
  2124  000B42  C073  F01E         	movff	_measure_inductance$1102+1,___flmul@f1+1
  2125  000B46  C074  F01F         	movff	_measure_inductance$1102+2,___flmul@f1+2
  2126  000B4A  C075  F020         	movff	_measure_inductance$1102+3,___flmul@f1+3
  2127  000B4E  ECD4  F00E         	call	___flmul	;wreg free
  2128  000B52  C01D  F076         	movff	?___flmul,_measure_inductance$1103
  2129  000B56  C01E  F077         	movff	?___flmul+1,_measure_inductance$1103+1
  2130  000B5A  C01F  F078         	movff	?___flmul+2,_measure_inductance$1103+2
  2131  000B5E  C020  F079         	movff	?___flmul+3,_measure_inductance$1103+3
  2132                           
  2133                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2134  000B62  C076  F01D         	movff	_measure_inductance$1103,___flmul@f1
  2135  000B66  C077  F01E         	movff	_measure_inductance$1103+1,___flmul@f1+1
  2136  000B6A  C078  F01F         	movff	_measure_inductance$1103+2,___flmul@f1+2
  2137  000B6E  C079  F020         	movff	_measure_inductance$1103+3,___flmul@f1+3
  2138  000B72  0EE6               	movlw	230
  2139  000B74  6E21               	movwf	___flmul@f2,c
  2140  000B76  0EE9               	movlw	233
  2141  000B78  6E22               	movwf	___flmul@f2+1,c
  2142  000B7A  0E1D               	movlw	29
  2143  000B7C  6E23               	movwf	___flmul@f2+2,c
  2144  000B7E  0E42               	movlw	66
  2145  000B80  6E24               	movwf	___flmul@f2+3,c
  2146  000B82  ECD4  F00E         	call	___flmul	;wreg free
  2147  000B86  C01D  F066         	movff	?___flmul,measure_inductance@denominator
  2148  000B8A  C01E  F067         	movff	?___flmul+1,measure_inductance@denominator+1
  2149  000B8E  C01F  F068         	movff	?___flmul+2,measure_inductance@denominator+2
  2150  000B92  C020  F069         	movff	?___flmul+3,measure_inductance@denominator+3
  2151                           
  2152                           ;measure.c: 216: Lin = (numerator / denominator) * 1e+15l;
  2153  000B96  C066  F012         	movff	measure_inductance@denominator,___fldiv@f2
  2154  000B9A  C067  F013         	movff	measure_inductance@denominator+1,___fldiv@f2+1
  2155  000B9E  C068  F014         	movff	measure_inductance@denominator+2,___fldiv@f2+2
  2156  000BA2  C069  F015         	movff	measure_inductance@denominator+3,___fldiv@f2+3
  2157  000BA6  C062  F00E         	movff	measure_inductance@numerator,___fldiv@f1
  2158  000BAA  C063  F00F         	movff	measure_inductance@numerator+1,___fldiv@f1+1
  2159  000BAE  C064  F010         	movff	measure_inductance@numerator+2,___fldiv@f1+2
  2160  000BB2  C065  F011         	movff	measure_inductance@numerator+3,___fldiv@f1+3
  2161  000BB6  EC97  F00F         	call	___fldiv	;wreg free
  2162  000BBA  C00E  F01D         	movff	?___fldiv,___flmul@f1
  2163  000BBE  C00F  F01E         	movff	?___fldiv+1,___flmul@f1+1
  2164  000BC2  C010  F01F         	movff	?___fldiv+2,___flmul@f1+2
  2165  000BC6  C011  F020         	movff	?___fldiv+3,___flmul@f1+3
  2166  000BCA  0EA9               	movlw	169
  2167  000BCC  6E21               	movwf	___flmul@f2,c
  2168  000BCE  0E5F               	movlw	95
  2169  000BD0  6E22               	movwf	___flmul@f2+1,c
  2170  000BD2  0E63               	movlw	99
  2171  000BD4  6E23               	movwf	___flmul@f2+2,c
  2172  000BD6  0E58               	movlw	88
  2173  000BD8  6E24               	movwf	___flmul@f2+3,c
  2174  000BDA  ECD4  F00E         	call	___flmul	;wreg free
  2175  000BDE  C01D  F089         	movff	?___flmul,measure_inductance@Lin
  2176  000BE2  C01E  F08A         	movff	?___flmul+1,measure_inductance@Lin+1
  2177  000BE6  C01F  F08B         	movff	?___flmul+2,measure_inductance@Lin+2
  2178  000BEA  C020  F08C         	movff	?___flmul+3,measure_inductance@Lin+3
  2179                           
  2180                           ;measure.c: 218: if(Lin > 999) {
  2181  000BEE  ECA1  F008         	call	PL32	;call to abstracted procedure
  2182  000BF2  C089  F008         	movff	measure_inductance@Lin,___flge@ff2
  2183  000BF6  C08A  F009         	movff	measure_inductance@Lin+1,___flge@ff2+1
  2184  000BFA  C08B  F00A         	movff	measure_inductance@Lin+2,___flge@ff2+2
  2185  000BFE  C08C  F00B         	movff	measure_inductance@Lin+3,___flge@ff2+3
  2186  000C02  EC35  F012         	call	___flge	;wreg free
  2187  000C06  E252               	bc	l4122
  2188                           
  2189                           ;measure.c: 219: if(Lin > (999e+03l)) {
  2190  000C08  EC90  F008         	call	PL22	;call to abstracted procedure
  2191  000C0C  C089  F008         	movff	measure_inductance@Lin,___flge@ff2
  2192  000C10  C08A  F009         	movff	measure_inductance@Lin+1,___flge@ff2+1
  2193  000C14  C08B  F00A         	movff	measure_inductance@Lin+2,___flge@ff2+2
  2194  000C18  C08C  F00B         	movff	measure_inductance@Lin+3,___flge@ff2+3
  2195  000C1C  EC35  F012         	call	___flge	;wreg free
  2196  000C20  E233               	bc	l4118
  2197                           
  2198                           ;measure.c: 220: if(Lin > (999e+06l)) {
  2199  000C22  EC7E  F008         	call	PL14	;call to abstracted procedure
  2200  000C26  C089  F008         	movff	measure_inductance@Lin,___flge@ff2
  2201  000C2A  C08A  F009         	movff	measure_inductance@Lin+1,___flge@ff2+1
  2202  000C2E  C08B  F00A         	movff	measure_inductance@Lin+2,___flge@ff2+2
  2203  000C32  C08C  F00B         	movff	measure_inductance@Lin+3,___flge@ff2+3
  2204  000C36  EC35  F012         	call	___flge	;wreg free
  2205  000C3A  E217               	bc	l4114
  2206                           
  2207                           ;measure.c: 221: Lin = Lin / (1e+09l);
  2208  000C3C  C089  F00E         	movff	measure_inductance@Lin,___fldiv@f1
  2209  000C40  C08A  F00F         	movff	measure_inductance@Lin+1,___fldiv@f1+1
  2210  000C44  C08B  F010         	movff	measure_inductance@Lin+2,___fldiv@f1+2
  2211  000C48  C08C  F011         	movff	measure_inductance@Lin+3,___fldiv@f1+3
  2212  000C4C  EC87  F008         	call	PL20	;call to abstracted procedure
  2213  000C50  EC97  F00F         	call	___fldiv	;wreg free
  2214  000C54  C00E  F089         	movff	?___fldiv,measure_inductance@Lin
  2215  000C58  C00F  F08A         	movff	?___fldiv+1,measure_inductance@Lin+1
  2216  000C5C  C010  F08B         	movff	?___fldiv+2,measure_inductance@Lin+2
  2217  000C60  C011  F08C         	movff	?___fldiv+3,measure_inductance@Lin+3
  2218                           
  2219                           ;measure.c: 222: unit = 0;
  2220  000C64  0100               	movlb	0	; () banked
  2221  000C66  6B7A               	clrf	measure_inductance@unit& (0+255),b
  2222                           
  2223                           ;measure.c: 223: } else {
  2224  000C68  D024               	goto	l4124
  2225  000C6A                     l4114:
  2226                           
  2227                           ;measure.c: 224: Lin = Lin / (1e+06l);
  2228  000C6A  D860               	call	PL8	;call to abstracted procedure
  2229  000C6C  ECA9  F008         	call	PL34	;call to abstracted procedure
  2230  000C70  EC97  F00F         	call	___fldiv	;wreg free
  2231  000C74  C00E  F089         	movff	?___fldiv,measure_inductance@Lin
  2232  000C78  C00F  F08A         	movff	?___fldiv+1,measure_inductance@Lin+1
  2233  000C7C  C010  F08B         	movff	?___fldiv+2,measure_inductance@Lin+2
  2234  000C80  C011  F08C         	movff	?___fldiv+3,measure_inductance@Lin+3
  2235                           
  2236                           ;measure.c: 225: unit = 1;
  2237  000C84  0E01               	movlw	1
  2238  000C86  D013               	goto	L1
  2239  000C88                     l4118:
  2240                           
  2241                           ;measure.c: 228: Lin = Lin / 1e+03l;
  2242  000C88  D851               	call	PL8	;call to abstracted procedure
  2243  000C8A  6E13               	movwf	___fldiv@f2+1,c
  2244  000C8C  0E7A               	movlw	122
  2245  000C8E  6E14               	movwf	___fldiv@f2+2,c
  2246  000C90  0E44               	movlw	68
  2247  000C92  6E15               	movwf	___fldiv@f2+3,c
  2248  000C94  EC97  F00F         	call	___fldiv	;wreg free
  2249  000C98  C00E  F089         	movff	?___fldiv,measure_inductance@Lin
  2250  000C9C  C00F  F08A         	movff	?___fldiv+1,measure_inductance@Lin+1
  2251  000CA0  C010  F08B         	movff	?___fldiv+2,measure_inductance@Lin+2
  2252  000CA4  C011  F08C         	movff	?___fldiv+3,measure_inductance@Lin+3
  2253                           
  2254                           ;measure.c: 229: unit = 2;
  2255  000CA8  0E02               	movlw	2
  2256  000CAA  D001               	goto	L1
  2257  000CAC                     l4122:
  2258                           
  2259                           ;measure.c: 232: unit = 3;
  2260  000CAC  0E03               	movlw	3
  2261  000CAE                     L1:
  2262  000CAE  0100               	movlb	0	; () banked
  2263  000CB0  6F7A               	movwf	measure_inductance@unit& (0+255),b
  2264  000CB2                     l4124:
  2265                           
  2266                           ; BSR set to: 0
  2267                           ;measure.c: 234: Lin = Lin * 100;
  2268  000CB2  C089  F01D         	movff	measure_inductance@Lin,___flmul@f1
  2269  000CB6  C08A  F01E         	movff	measure_inductance@Lin+1,___flmul@f1+1
  2270  000CBA  C08B  F01F         	movff	measure_inductance@Lin+2,___flmul@f1+2
  2271  000CBE  C08C  F020         	movff	measure_inductance@Lin+3,___flmul@f1+3
  2272  000CC2  EC99  F008         	call	PL28	;call to abstracted procedure
  2273  000CC6  ECD4  F00E         	call	___flmul	;wreg free
  2274  000CCA  C01D  F089         	movff	?___flmul,measure_inductance@Lin
  2275  000CCE  C01E  F08A         	movff	?___flmul+1,measure_inductance@Lin+1
  2276  000CD2  C01F  F08B         	movff	?___flmul+2,measure_inductance@Lin+2
  2277  000CD6  C020  F08C         	movff	?___flmul+3,measure_inductance@Lin+3
  2278                           
  2279                           ;measure.c: 235: var = (uint16_t)Lin;
  2280  000CDA  C089  F052         	movff	measure_inductance@Lin,___fltol@f1
  2281  000CDE  C08A  F053         	movff	measure_inductance@Lin+1,___fltol@f1+1
  2282  000CE2  C08B  F054         	movff	measure_inductance@Lin+2,___fltol@f1+2
  2283  000CE6  C08C  F055         	movff	measure_inductance@Lin+3,___fltol@f1+3
  2284  000CEA  ECE9  F010         	call	___fltol	;wreg free
  2285  000CEE  C052  F087         	movff	?___fltol,measure_inductance@var
  2286  000CF2  C053  F088         	movff	?___fltol+1,measure_inductance@var+1
  2287                           
  2288                           ; BSR set to: 0
  2289                           ;measure.c: 237: print_reading(var);
  2290  000CF6  C087  F036         	movff	measure_inductance@var,print_reading@measurement
  2291  000CFA  C088  F037         	movff	measure_inductance@var+1,print_reading@measurement+1
  2292  000CFE  ECAB  F011         	call	_print_reading	;wreg free
  2293                           
  2294                           ;measure.c: 238: print_unit(unit);
  2295  000D02  0100               	movlb	0	; () banked
  2296  000D04  517A               	movf	measure_inductance@unit& (0+255),w,b
  2297  000D06  EF04  F014         	goto	_print_unit
  2298  000D0A                     __end_of_measure_inductance:
  2299                           	opt stack 0
  2300  000D0A                     PL2:
  2301                           	opt stack 24
  2302  000D0A  C0E5  F021         	movff	_F1,___flmul@f2
  2303  000D0E  C0E6  F022         	movff	_F1+1,___flmul@f2+1
  2304  000D12  C0E7  F023         	movff	_F1+2,___flmul@f2+2
  2305  000D16  C0E8  F024         	movff	_F1+3,___flmul@f2+3
  2306  000D1A  C0E5  F01D         	movff	_F1,___flmul@f1
  2307  000D1E  C0E6  F01E         	movff	_F1+1,___flmul@f1+1
  2308  000D22  C0E7  F01F         	movff	_F1+2,___flmul@f1+2
  2309  000D26  C0E8  F020         	movff	_F1+3,___flmul@f1+3
  2310  000D2A  0012               	return	
  2311  000D2C                     __end_ofPL2:
  2312                           	opt stack 0
  2313  000D2C                     PL8:
  2314                           	opt stack 24
  2315  000D2C  C089  F00E         	movff	measure_inductance@Lin,___fldiv@f1
  2316  000D30  C08A  F00F         	movff	measure_inductance@Lin+1,___fldiv@f1+1
  2317  000D34  C08B  F010         	movff	measure_inductance@Lin+2,___fldiv@f1+2
  2318  000D38  C08C  F011         	movff	measure_inductance@Lin+3,___fldiv@f1+3
  2319  000D3C  0E00               	movlw	0
  2320  000D3E  6E12               	movwf	___fldiv@f2,c
  2321  000D40  0C00               	retlw	0
  2322  000D42                     __end_ofPL8:
  2323                           	opt stack 0
  2324                           tblptru	equ	0xFF8
  2325                           tblptrh	equ	0xFF7
  2326                           tblptrl	equ	0xFF6
  2327                           tablat	equ	0xFF5
  2328                           prodl	equ	0xFF3
  2329                           intcon	equ	0xFF2
  2330                           intcon2	equ	0xFF1
  2331                           postinc0	equ	0xFEE
  2332                           wreg	equ	0xFE8
  2333                           postdec1	equ	0xFE5
  2334                           fsr1l	equ	0xFE1
  2335                           indf2	equ	0xFDF
  2336                           postinc2	equ	0xFDE
  2337                           postdec2	equ	0xFDD
  2338                           fsr2h	equ	0xFDA
  2339                           fsr2l	equ	0xFD9
  2340                           status	equ	0xFD8
  2341                           
  2342 ;; *************** function _measure_capacitance *****************
  2343 ;; Defined at:
  2344 ;;		line 118 in file "../../../src/measure.c"
  2345 ;; Parameters:    Size  Location     Type
  2346 ;;		None
  2347 ;; Auto vars:     Size  Location     Type
  2348 ;;  Cin             4   84[BANK0 ] unsigned char 
  2349 ;;  var             2   82[BANK0 ] unsigned int 
  2350 ;;  unit            1   81[BANK0 ] unsigned char 
  2351 ;; Return value:  Size  Location     Type
  2352 ;;		None               void
  2353 ;; Registers used:
  2354 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2355 ;; Tracked objects:
  2356 ;;		On entry : 0/0
  2357 ;;		On exit  : 0/0
  2358 ;;		Unchanged: 0/0
  2359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2360 ;;      Params:         0       0       0       0       0       0       0       0       0
  2361 ;;      Locals:         0      19       0       0       0       0       0       0       0
  2362 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2363 ;;      Totals:         0      19       0       0       0       0       0       0       0
  2364 ;;Total ram usage:       19 bytes
  2365 ;; Hardware stack levels used:    1
  2366 ;; Hardware stack levels required when called:    7
  2367 ;; This function calls:
  2368 ;;		___fldiv
  2369 ;;		___flge
  2370 ;;		___flmul
  2371 ;;		___flsub
  2372 ;;		___fltol
  2373 ;;		___lwtofl
  2374 ;;		_format_double
  2375 ;;		_format_xint32
  2376 ;;		_lcd_gotoxy
  2377 ;;		_measure_freq
  2378 ;;		_print_reading
  2379 ;;		_print_unit
  2380 ;;		_put_str
  2381 ;;		_ser_putch
  2382 ;;		_ser_puts
  2383 ;; This function is called by:
  2384 ;;		_main
  2385 ;; This function uses a non-reentrant model
  2386 ;;
  2387                           
  2388                           	psect	text5
  2389  000D42                     __ptext5:
  2390                           	opt stack 0
  2391  000D42                     _measure_capacitance:
  2392                           	opt stack 23
  2393                           
  2394                           ;measure.c: 119: uint8_t unit;
  2395                           ;measure.c: 120: uint16_t var;
  2396                           ;measure.c: 122: double Cin;
  2397                           ;measure.c: 126: lcd_gotoxy(0, 0);
  2398                           
  2399                           ;incstack = 0
  2400  000D42  0E00               	movlw	0
  2401  000D44  6A08               	clrf	lcd_gotoxy@row,c
  2402  000D46  EC4C  F013         	call	_lcd_gotoxy
  2403                           
  2404                           ;measure.c: 127: put_str("Capacity ");
  2405  000D4A  0E7F               	movlw	STR_6& (0+255)
  2406  000D4C  ECDA  F013         	call	_put_str
  2407                           
  2408                           ;measure.c: 129: var = measure_freq();
  2409  000D50  EC8C  F00C         	call	_measure_freq	;wreg free
  2410  000D54  C036  F0B2         	movff	?_measure_freq,measure_capacitance@var
  2411  000D58  C037  F0B3         	movff	?_measure_freq+1,measure_capacitance@var+1
  2412                           
  2413                           ;measure.c: 131: F3 = (double)var;
  2414  000D5C  C0B2  F03B         	movff	measure_capacitance@var,___lwtofl@c
  2415  000D60  C0B3  F03C         	movff	measure_capacitance@var+1,___lwtofl@c+1
  2416  000D64  ECEF  F013         	call	___lwtofl	;wreg free
  2417  000D68  C03B  F0BC         	movff	?___lwtofl,_F3
  2418  000D6C  C03C  F0BD         	movff	?___lwtofl+1,_F3+1
  2419  000D70  C03D  F0BE         	movff	?___lwtofl+2,_F3+2
  2420  000D74  C03E  F0BF         	movff	?___lwtofl+3,_F3+3
  2421                           
  2422                           ;measure.c: 134: ser_puts("var=");
  2423  000D78  0EC0               	movlw	STR_7& (0+255)
  2424  000D7A  EC60  F014         	call	_ser_puts
  2425                           
  2426                           ;measure.c: 135: format_xint32( var);
  2427  000D7E  C0B2  F036         	movff	measure_capacitance@var,format_xint32@x
  2428  000D82  C0B3  F037         	movff	measure_capacitance@var+1,format_xint32@x+1
  2429  000D86  6A38               	clrf	format_xint32@x+2,c
  2430  000D88  6A39               	clrf	format_xint32@x+3,c
  2431  000D8A  EC67  F013         	call	_format_xint32	;wreg free
  2432                           
  2433                           ;measure.c: 136: ser_puts("\r\nF1=");
  2434  000D8E  0E9E               	movlw	STR_8& (0+255)
  2435  000D90  EC60  F014         	call	_ser_puts
  2436                           
  2437                           ;measure.c: 137: format_double( F1);
  2438  000D94  C0E5  F091         	movff	_F1,format_double@num
  2439  000D98  C0E6  F092         	movff	_F1+1,format_double@num+1
  2440  000D9C  C0E7  F093         	movff	_F1+2,format_double@num+2
  2441  000DA0  C0E8  F094         	movff	_F1+3,format_double@num+3
  2442  000DA4  EC87  F00A         	call	_format_double	;wreg free
  2443                           
  2444                           ;measure.c: 138: ser_putch(' ');
  2445  000DA8  0E20               	movlw	32
  2446  000DAA  EC18  F014         	call	_ser_putch
  2447                           
  2448                           ;measure.c: 139: format_xint32( *(uint32_t*)&F1);
  2449  000DAE  C0E5  F036         	movff	_F1,format_xint32@x
  2450  000DB2  C0E6  F037         	movff	_F1+1,format_xint32@x+1
  2451  000DB6  C0E7  F038         	movff	_F1+2,format_xint32@x+2
  2452  000DBA  C0E8  F039         	movff	_F1+3,format_xint32@x+3
  2453  000DBE  EC67  F013         	call	_format_xint32	;wreg free
  2454                           
  2455                           ;measure.c: 140: ser_puts("\r\nF2=");
  2456  000DC2  0EA4               	movlw	STR_9& (0+255)
  2457  000DC4  EC60  F014         	call	_ser_puts
  2458                           
  2459                           ;measure.c: 141: format_double( F2);
  2460  000DC8  C0B8  F091         	movff	_F2,format_double@num
  2461  000DCC  C0B9  F092         	movff	_F2+1,format_double@num+1
  2462  000DD0  C0BA  F093         	movff	_F2+2,format_double@num+2
  2463  000DD4  C0BB  F094         	movff	_F2+3,format_double@num+3
  2464  000DD8  EC87  F00A         	call	_format_double	;wreg free
  2465                           
  2466                           ;measure.c: 142: ser_putch(' ');
  2467  000DDC  0E20               	movlw	32
  2468  000DDE  EC18  F014         	call	_ser_putch
  2469                           
  2470                           ;measure.c: 143: format_xint32( *(uint32_t*)&F2);
  2471  000DE2  C0B8  F036         	movff	_F2,format_xint32@x
  2472  000DE6  C0B9  F037         	movff	_F2+1,format_xint32@x+1
  2473  000DEA  C0BA  F038         	movff	_F2+2,format_xint32@x+2
  2474  000DEE  C0BB  F039         	movff	_F2+3,format_xint32@x+3
  2475  000DF2  EC67  F013         	call	_format_xint32	;wreg free
  2476                           
  2477                           ;measure.c: 144: ser_puts("\r\nF3=");
  2478  000DF6  0EAA               	movlw	STR_10& (0+255)
  2479  000DF8  EC60  F014         	call	_ser_puts
  2480                           
  2481                           ;measure.c: 145: format_double( F3);
  2482  000DFC  C0BC  F091         	movff	_F3,format_double@num
  2483  000E00  C0BD  F092         	movff	_F3+1,format_double@num+1
  2484  000E04  C0BE  F093         	movff	_F3+2,format_double@num+2
  2485  000E08  C0BF  F094         	movff	_F3+3,format_double@num+3
  2486  000E0C  EC87  F00A         	call	_format_double	;wreg free
  2487                           
  2488                           ;measure.c: 146: ser_putch(' ');
  2489  000E10  0E20               	movlw	32
  2490  000E12  EC18  F014         	call	_ser_putch
  2491                           
  2492                           ;measure.c: 147: format_xint32( *(uint32_t*)&F3);
  2493  000E16  C0BC  F036         	movff	_F3,format_xint32@x
  2494  000E1A  C0BD  F037         	movff	_F3+1,format_xint32@x+1
  2495  000E1E  C0BE  F038         	movff	_F3+2,format_xint32@x+2
  2496  000E22  C0BF  F039         	movff	_F3+3,format_xint32@x+3
  2497  000E26  EC67  F013         	call	_format_xint32	;wreg free
  2498                           
  2499                           ;measure.c: 148: ser_puts("\r\nCCal=");
  2500  000E2A  0E89               	movlw	STR_11& (0+255)
  2501  000E2C  EC60  F014         	call	_ser_puts
  2502                           
  2503                           ;measure.c: 149: format_double( CCal);
  2504  000E30  C0E9  F091         	movff	_CCal,format_double@num
  2505  000E34  C0EA  F092         	movff	_CCal+1,format_double@num+1
  2506  000E38  C0EB  F093         	movff	_CCal+2,format_double@num+2
  2507  000E3C  C0EC  F094         	movff	_CCal+3,format_double@num+3
  2508  000E40  EC87  F00A         	call	_format_double	;wreg free
  2509                           
  2510                           ;measure.c: 150: ser_putch(' ');
  2511  000E44  0E20               	movlw	32
  2512  000E46  EC18  F014         	call	_ser_putch
  2513                           
  2514                           ;measure.c: 151: format_xint32( *(uint32_t*)&CCal);
  2515  000E4A  C0E9  F036         	movff	_CCal,format_xint32@x
  2516  000E4E  C0EA  F037         	movff	_CCal+1,format_xint32@x+1
  2517  000E52  C0EB  F038         	movff	_CCal+2,format_xint32@x+2
  2518  000E56  C0EC  F039         	movff	_CCal+3,format_xint32@x+3
  2519  000E5A  EC67  F013         	call	_format_xint32	;wreg free
  2520                           
  2521                           ;measure.c: 152: ser_puts("\r\n");
  2522  000E5E  0E9B               	movlw	(STR_29+3)& (0+255)
  2523  000E60  EC60  F014         	call	_ser_puts
  2524                           
  2525                           ;measure.c: 156: if(F3 > F1)
  2526  000E64  D92F               	call	PL6	;call to abstracted procedure
  2527  000E66  EC35  F012         	call	___flge	;wreg free
  2528  000E6A  E208               	bc	l4052
  2529                           
  2530                           ;measure.c: 157: F3 = F1;
  2531  000E6C  C0E5  F0BC         	movff	_F1,_F3
  2532  000E70  C0E6  F0BD         	movff	_F1+1,_F3+1
  2533  000E74  C0E7  F0BE         	movff	_F1+2,_F3+2
  2534  000E78  C0E8  F0BF         	movff	_F1+3,_F3+3
  2535  000E7C                     l4052:
  2536                           
  2537                           ;measure.c: 159: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2538  000E7C  D912               	call	PL4	;call to abstracted procedure
  2539  000E7E  ECD4  F00E         	call	___flmul	;wreg free
  2540  000E82  C01D  F03C         	movff	?___flmul,___flsub@f2
  2541  000E86  C01E  F03D         	movff	?___flmul+1,___flsub@f2+1
  2542  000E8A  C01F  F03E         	movff	?___flmul+2,___flsub@f2+2
  2543  000E8E  C020  F03F         	movff	?___flmul+3,___flsub@f2+3
  2544  000E92  EC85  F006         	call	PL2	;call to abstracted procedure
  2545  000E96  ECD4  F00E         	call	___flmul	;wreg free
  2546  000E9A  C01D  F038         	movff	?___flmul,___flsub@f1
  2547  000E9E  C01E  F039         	movff	?___flmul+1,___flsub@f1+1
  2548  000EA2  C01F  F03A         	movff	?___flmul+2,___flsub@f1+2
  2549  000EA6  C020  F03B         	movff	?___flmul+3,___flsub@f1+3
  2550  000EAA  ECEE  F012         	call	___flsub	;wreg free
  2551  000EAE  C038  F0A5         	movff	?___flsub,_measure_capacitance$1094
  2552  000EB2  C039  F0A6         	movff	?___flsub+1,_measure_capacitance$1094+1
  2553  000EB6  C03A  F0A7         	movff	?___flsub+2,_measure_capacitance$1094+2
  2554  000EBA  C03B  F0A8         	movff	?___flsub+3,_measure_capacitance$1094+3
  2555                           
  2556                           ;measure.c: 159: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2557  000EBE  C0B8  F021         	movff	_F2,___flmul@f2
  2558  000EC2  C0B9  F022         	movff	_F2+1,___flmul@f2+1
  2559  000EC6  C0BA  F023         	movff	_F2+2,___flmul@f2+2
  2560  000ECA  C0BB  F024         	movff	_F2+3,___flmul@f2+3
  2561  000ECE  C0A5  F01D         	movff	_measure_capacitance$1094,___flmul@f1
  2562  000ED2  C0A6  F01E         	movff	_measure_capacitance$1094+1,___flmul@f1+1
  2563  000ED6  C0A7  F01F         	movff	_measure_capacitance$1094+2,___flmul@f1+2
  2564  000EDA  C0A8  F020         	movff	_measure_capacitance$1094+3,___flmul@f1+3
  2565  000EDE  ECD4  F00E         	call	___flmul	;wreg free
  2566  000EE2  C01D  F0A9         	movff	?___flmul,_measure_capacitance$1095
  2567  000EE6  C01E  F0AA         	movff	?___flmul+1,_measure_capacitance$1095+1
  2568  000EEA  C01F  F0AB         	movff	?___flmul+2,_measure_capacitance$1095+2
  2569  000EEE  C020  F0AC         	movff	?___flmul+3,_measure_capacitance$1095+3
  2570                           
  2571                           ;measure.c: 159: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2572  000EF2  C0B8  F021         	movff	_F2,___flmul@f2
  2573  000EF6  C0B9  F022         	movff	_F2+1,___flmul@f2+1
  2574  000EFA  C0BA  F023         	movff	_F2+2,___flmul@f2+2
  2575  000EFE  C0BB  F024         	movff	_F2+3,___flmul@f2+3
  2576  000F02  C0A9  F01D         	movff	_measure_capacitance$1095,___flmul@f1
  2577  000F06  C0AA  F01E         	movff	_measure_capacitance$1095+1,___flmul@f1+1
  2578  000F0A  C0AB  F01F         	movff	_measure_capacitance$1095+2,___flmul@f1+2
  2579  000F0E  C0AC  F020         	movff	_measure_capacitance$1095+3,___flmul@f1+3
  2580  000F12  ECD4  F00E         	call	___flmul	;wreg free
  2581  000F16  C01D  F0AD         	movff	?___flmul,_measure_capacitance$1096
  2582  000F1A  C01E  F0AE         	movff	?___flmul+1,_measure_capacitance$1096+1
  2583  000F1E  C01F  F0AF         	movff	?___flmul+2,_measure_capacitance$1096+2
  2584  000F22  C020  F0B0         	movff	?___flmul+3,_measure_capacitance$1096+3
  2585                           
  2586                           ;measure.c: 159: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2587  000F26  C0AD  F01D         	movff	_measure_capacitance$1096,___flmul@f1
  2588  000F2A  C0AE  F01E         	movff	_measure_capacitance$1096+1,___flmul@f1+1
  2589  000F2E  C0AF  F01F         	movff	_measure_capacitance$1096+2,___flmul@f1+2
  2590  000F32  C0B0  F020         	movff	_measure_capacitance$1096+3,___flmul@f1+3
  2591  000F36  C0E9  F021         	movff	_CCal,___flmul@f2
  2592  000F3A  C0EA  F022         	movff	_CCal+1,___flmul@f2+1
  2593  000F3E  C0EB  F023         	movff	_CCal+2,___flmul@f2+2
  2594  000F42  C0EC  F024         	movff	_CCal+3,___flmul@f2+3
  2595  000F46  ECD4  F00E         	call	___flmul	;wreg free
  2596  000F4A  C01D  F0B4         	movff	?___flmul,measure_capacitance@Cin
  2597  000F4E  C01E  F0B5         	movff	?___flmul+1,measure_capacitance@Cin+1
  2598  000F52  C01F  F0B6         	movff	?___flmul+2,measure_capacitance@Cin+2
  2599  000F56  C020  F0B7         	movff	?___flmul+3,measure_capacitance@Cin+3
  2600                           
  2601                           ;measure.c: 163: ser_puts("Cin=");
  2602  000F5A  0EBB               	movlw	STR_13& (0+255)
  2603  000F5C  EC60  F014         	call	_ser_puts
  2604                           
  2605                           ;measure.c: 164: format_double( Cin);
  2606  000F60  C0B4  F091         	movff	measure_capacitance@Cin,format_double@num
  2607  000F64  C0B5  F092         	movff	measure_capacitance@Cin+1,format_double@num+1
  2608  000F68  C0B6  F093         	movff	measure_capacitance@Cin+2,format_double@num+2
  2609  000F6C  C0B7  F094         	movff	measure_capacitance@Cin+3,format_double@num+3
  2610  000F70  EC87  F00A         	call	_format_double	;wreg free
  2611                           
  2612                           ;measure.c: 165: ser_putch(' ');
  2613  000F74  0E20               	movlw	32
  2614  000F76  EC18  F014         	call	_ser_putch
  2615                           
  2616                           ;measure.c: 166: format_xint32( *(uint32_t*)&Cin);
  2617  000F7A  C0B4  F036         	movff	measure_capacitance@Cin,format_xint32@x
  2618  000F7E  C0B5  F037         	movff	measure_capacitance@Cin+1,format_xint32@x+1
  2619  000F82  C0B6  F038         	movff	measure_capacitance@Cin+2,format_xint32@x+2
  2620  000F86  C0B7  F039         	movff	measure_capacitance@Cin+3,format_xint32@x+3
  2621  000F8A  EC67  F013         	call	_format_xint32	;wreg free
  2622                           
  2623                           ;measure.c: 167: ser_puts("\r\n");
  2624  000F8E  0E9B               	movlw	(STR_29+3)& (0+255)
  2625  000F90  EC60  F014         	call	_ser_puts
  2626                           
  2627                           ;measure.c: 169: if(Cin > 999) {
  2628  000F94  D8D6               	call	PL32	;call to abstracted procedure
  2629  000F96  C0B4  F008         	movff	measure_capacitance@Cin,___flge@ff2
  2630  000F9A  C0B5  F009         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2631  000F9E  C0B6  F00A         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2632  000FA2  C0B7  F00B         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2633  000FA6  EC35  F012         	call	___flge	;wreg free
  2634  000FAA  E24D               	bc	l4082
  2635                           
  2636                           ;measure.c: 170: if(Cin > (999e+03l)) {
  2637  000FAC  D8B9               	call	PL22	;call to abstracted procedure
  2638  000FAE  C0B4  F008         	movff	measure_capacitance@Cin,___flge@ff2
  2639  000FB2  C0B5  F009         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2640  000FB6  C0B6  F00A         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2641  000FBA  C0B7  F00B         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2642  000FBE  EC35  F012         	call	___flge	;wreg free
  2643  000FC2  E22F               	bc	l4078
  2644                           
  2645                           ;measure.c: 171: if(Cin > (999e+06l)) {
  2646  000FC4  D89B               	call	PL14	;call to abstracted procedure
  2647  000FC6  C0B4  F008         	movff	measure_capacitance@Cin,___flge@ff2
  2648  000FCA  C0B5  F009         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2649  000FCE  C0B6  F00A         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2650  000FD2  C0B7  F00B         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2651  000FD6  EC35  F012         	call	___flge	;wreg free
  2652  000FDA  E215               	bc	l4074
  2653                           
  2654                           ;measure.c: 172: Cin = Cin / (1e+09);
  2655  000FDC  C0B4  F00E         	movff	measure_capacitance@Cin,___fldiv@f1
  2656  000FE0  C0B5  F00F         	movff	measure_capacitance@Cin+1,___fldiv@f1+1
  2657  000FE4  C0B6  F010         	movff	measure_capacitance@Cin+2,___fldiv@f1+2
  2658  000FE8  C0B7  F011         	movff	measure_capacitance@Cin+3,___fldiv@f1+3
  2659  000FEC  D890               	call	PL20	;call to abstracted procedure
  2660  000FEE  EC97  F00F         	call	___fldiv	;wreg free
  2661  000FF2  C00E  F0B4         	movff	?___fldiv,measure_capacitance@Cin
  2662  000FF6  C00F  F0B5         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2663  000FFA  C010  F0B6         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2664  000FFE  C011  F0B7         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2665                           
  2666                           ;measure.c: 173: unit = 4;
  2667  001002  0E04               	movlw	4
  2668  001004  D021               	goto	L2
  2669  001006                     l4074:
  2670                           
  2671                           ;measure.c: 175: Cin = Cin / (1e+06);
  2672  001006  D86F               	call	PL10	;call to abstracted procedure
  2673  001008  D8A4               	call	PL34	;call to abstracted procedure
  2674  00100A  EC97  F00F         	call	___fldiv	;wreg free
  2675  00100E  C00E  F0B4         	movff	?___fldiv,measure_capacitance@Cin
  2676  001012  C00F  F0B5         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2677  001016  C010  F0B6         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2678  00101A  C011  F0B7         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2679                           
  2680                           ;measure.c: 176: unit = 5;
  2681  00101E  0E05               	movlw	5
  2682  001020  D013               	goto	L2
  2683  001022                     l4078:
  2684                           
  2685                           ;measure.c: 179: Cin = Cin / 1e+03;
  2686  001022  D861               	call	PL10	;call to abstracted procedure
  2687  001024  6E13               	movwf	___fldiv@f2+1,c
  2688  001026  0E7A               	movlw	122
  2689  001028  6E14               	movwf	___fldiv@f2+2,c
  2690  00102A  0E44               	movlw	68
  2691  00102C  6E15               	movwf	___fldiv@f2+3,c
  2692  00102E  EC97  F00F         	call	___fldiv	;wreg free
  2693  001032  C00E  F0B4         	movff	?___fldiv,measure_capacitance@Cin
  2694  001036  C00F  F0B5         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2695  00103A  C010  F0B6         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2696  00103E  C011  F0B7         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2697                           
  2698                           ;measure.c: 180: unit = 6;
  2699  001042  0E06               	movlw	6
  2700  001044  D001               	goto	L2
  2701  001046                     l4082:
  2702                           
  2703                           ;measure.c: 183: unit = 7;
  2704  001046  0E07               	movlw	7
  2705  001048                     L2:
  2706  001048  0100               	movlb	0	; () banked
  2707  00104A  6FB1               	movwf	measure_capacitance@unit& (0+255),b
  2708                           
  2709                           ; BSR set to: 0
  2710                           ;measure.c: 185: Cin = Cin * 100;
  2711  00104C  C0B4  F01D         	movff	measure_capacitance@Cin,___flmul@f1
  2712  001050  C0B5  F01E         	movff	measure_capacitance@Cin+1,___flmul@f1+1
  2713  001054  C0B6  F01F         	movff	measure_capacitance@Cin+2,___flmul@f1+2
  2714  001058  C0B7  F020         	movff	measure_capacitance@Cin+3,___flmul@f1+3
  2715  00105C  D86A               	call	PL28	;call to abstracted procedure
  2716  00105E  ECD4  F00E         	call	___flmul	;wreg free
  2717  001062  C01D  F0B4         	movff	?___flmul,measure_capacitance@Cin
  2718  001066  C01E  F0B5         	movff	?___flmul+1,measure_capacitance@Cin+1
  2719  00106A  C01F  F0B6         	movff	?___flmul+2,measure_capacitance@Cin+2
  2720  00106E  C020  F0B7         	movff	?___flmul+3,measure_capacitance@Cin+3
  2721                           
  2722                           ;measure.c: 186: var = (uint16_t)Cin;
  2723  001072  C0B4  F052         	movff	measure_capacitance@Cin,___fltol@f1
  2724  001076  C0B5  F053         	movff	measure_capacitance@Cin+1,___fltol@f1+1
  2725  00107A  C0B6  F054         	movff	measure_capacitance@Cin+2,___fltol@f1+2
  2726  00107E  C0B7  F055         	movff	measure_capacitance@Cin+3,___fltol@f1+3
  2727  001082  ECE9  F010         	call	___fltol	;wreg free
  2728  001086  C052  F0B2         	movff	?___fltol,measure_capacitance@var
  2729  00108A  C053  F0B3         	movff	?___fltol+1,measure_capacitance@var+1
  2730                           
  2731                           ; BSR set to: 0
  2732                           ;measure.c: 188: print_reading(var);
  2733  00108E  C0B2  F036         	movff	measure_capacitance@var,print_reading@measurement
  2734  001092  C0B3  F037         	movff	measure_capacitance@var+1,print_reading@measurement+1
  2735  001096  ECAB  F011         	call	_print_reading	;wreg free
  2736                           
  2737                           ;measure.c: 189: print_unit(unit);
  2738  00109A  0100               	movlb	0	; () banked
  2739  00109C  51B1               	movf	measure_capacitance@unit& (0+255),w,b
  2740  00109E  EF04  F014         	goto	_print_unit
  2741  0010A2                     __end_of_measure_capacitance:
  2742                           	opt stack 0
  2743  0010A2                     PL4:
  2744                           	opt stack 24
  2745  0010A2  C0BC  F021         	movff	_F3,___flmul@f2
  2746  0010A6  C0BD  F022         	movff	_F3+1,___flmul@f2+1
  2747  0010AA  C0BE  F023         	movff	_F3+2,___flmul@f2+2
  2748  0010AE  C0BF  F024         	movff	_F3+3,___flmul@f2+3
  2749  0010B2  C0BC  F01D         	movff	_F3,___flmul@f1
  2750  0010B6  C0BD  F01E         	movff	_F3+1,___flmul@f1+1
  2751  0010BA  C0BE  F01F         	movff	_F3+2,___flmul@f1+2
  2752  0010BE  C0BF  F020         	movff	_F3+3,___flmul@f1+3
  2753  0010C2  0012               	return	
  2754  0010C4                     __end_ofPL4:
  2755                           	opt stack 0
  2756  0010C4                     PL6:
  2757                           	opt stack 24
  2758  0010C4  C0E5  F004         	movff	_F1,___flge@ff1
  2759  0010C8  C0E6  F005         	movff	_F1+1,___flge@ff1+1
  2760  0010CC  C0E7  F006         	movff	_F1+2,___flge@ff1+2
  2761  0010D0  C0E8  F007         	movff	_F1+3,___flge@ff1+3
  2762  0010D4  C0BC  F008         	movff	_F3,___flge@ff2
  2763  0010D8  C0BD  F009         	movff	_F3+1,___flge@ff2+1
  2764  0010DC  C0BE  F00A         	movff	_F3+2,___flge@ff2+2
  2765  0010E0  C0BF  F00B         	movff	_F3+3,___flge@ff2+3
  2766  0010E4  0012               	return	
  2767  0010E6                     __end_ofPL6:
  2768                           	opt stack 0
  2769  0010E6                     PL10:
  2770                           	opt stack 23
  2771  0010E6  C0B4  F00E         	movff	measure_capacitance@Cin,___fldiv@f1
  2772  0010EA  C0B5  F00F         	movff	measure_capacitance@Cin+1,___fldiv@f1+1
  2773  0010EE  C0B6  F010         	movff	measure_capacitance@Cin+2,___fldiv@f1+2
  2774  0010F2  C0B7  F011         	movff	measure_capacitance@Cin+3,___fldiv@f1+3
  2775  0010F6  0E00               	movlw	0
  2776  0010F8  6E12               	movwf	___fldiv@f2,c
  2777  0010FA  0C00               	retlw	0
  2778  0010FC                     __end_ofPL10:
  2779                           	opt stack 0
  2780  0010FC                     PL14:
  2781                           	opt stack 24
  2782  0010FC  0E1F               	movlw	31
  2783  0010FE  6E04               	movwf	___flge@ff1,c
  2784  001100  0E2E               	movlw	46
  2785  001102  6E05               	movwf	___flge@ff1+1,c
  2786  001104  0E6E               	movlw	110
  2787  001106  6E06               	movwf	___flge@ff1+2,c
  2788  001108  0E4E               	movlw	78
  2789  00110A  6E07               	movwf	___flge@ff1+3,c
  2790  00110C  0C4E               	retlw	78
  2791  00110E                     __end_ofPL14:
  2792                           	opt stack 0
  2793  00110E                     PL20:
  2794                           	opt stack 24
  2795  00110E  0E28               	movlw	40
  2796  001110  6E12               	movwf	___fldiv@f2,c
  2797  001112  0E6B               	movlw	107
  2798  001114  6E13               	movwf	___fldiv@f2+1,c
  2799  001116  0E6E               	movlw	110
  2800  001118  6E14               	movwf	___fldiv@f2+2,c
  2801  00111A  0E4E               	movlw	78
  2802  00111C  6E15               	movwf	___fldiv@f2+3,c
  2803  00111E  0C4E               	retlw	78
  2804  001120                     __end_ofPL20:
  2805                           	opt stack 0
  2806  001120                     PL22:
  2807                           	opt stack 24
  2808  001120  0E80               	movlw	128
  2809  001122  6E04               	movwf	___flge@ff1,c
  2810  001124  0EE5               	movlw	229
  2811  001126  6E05               	movwf	___flge@ff1+1,c
  2812  001128  0E73               	movlw	115
  2813  00112A  6E06               	movwf	___flge@ff1+2,c
  2814  00112C  0E49               	movlw	73
  2815  00112E  6E07               	movwf	___flge@ff1+3,c
  2816  001130  0C49               	retlw	73
  2817  001132                     __end_ofPL22:
  2818                           	opt stack 0
  2819  001132                     PL28:
  2820                           	opt stack 24
  2821  001132  0E00               	movlw	0
  2822  001134  6E21               	movwf	___flmul@f2,c
  2823  001136  6E22               	movwf	___flmul@f2+1,c
  2824  001138  0EC8               	movlw	200
  2825  00113A  6E23               	movwf	___flmul@f2+2,c
  2826  00113C  0E42               	movlw	66
  2827  00113E  6E24               	movwf	___flmul@f2+3,c
  2828  001140  0C42               	retlw	66
  2829  001142                     __end_ofPL28:
  2830                           	opt stack 0
  2831  001142                     PL32:
  2832                           	opt stack 24
  2833  001142  6A04               	clrf	___flge@ff1,c
  2834  001144  0EC0               	movlw	192
  2835  001146  6E05               	movwf	___flge@ff1+1,c
  2836  001148  0E79               	movlw	121
  2837  00114A  6E06               	movwf	___flge@ff1+2,c
  2838  00114C  0E44               	movlw	68
  2839  00114E  6E07               	movwf	___flge@ff1+3,c
  2840  001150  0C44               	retlw	68
  2841  001152                     __end_ofPL32:
  2842                           	opt stack 0
  2843  001152                     PL34:
  2844                           	opt stack 24
  2845  001152  0E24               	movlw	36
  2846  001154  6E13               	movwf	___fldiv@f2+1,c
  2847  001156  0E74               	movlw	116
  2848  001158  6E14               	movwf	___fldiv@f2+2,c
  2849  00115A  0E49               	movlw	73
  2850  00115C  6E15               	movwf	___fldiv@f2+3,c
  2851  00115E  0C49               	retlw	73
  2852  001160                     __end_ofPL34:
  2853                           	opt stack 0
  2854                           tblptru	equ	0xFF8
  2855                           tblptrh	equ	0xFF7
  2856                           tblptrl	equ	0xFF6
  2857                           tablat	equ	0xFF5
  2858                           prodl	equ	0xFF3
  2859                           intcon	equ	0xFF2
  2860                           intcon2	equ	0xFF1
  2861                           postinc0	equ	0xFEE
  2862                           wreg	equ	0xFE8
  2863                           postdec1	equ	0xFE5
  2864                           fsr1l	equ	0xFE1
  2865                           indf2	equ	0xFDF
  2866                           postinc2	equ	0xFDE
  2867                           postdec2	equ	0xFDD
  2868                           fsr2h	equ	0xFDA
  2869                           fsr2l	equ	0xFD9
  2870                           status	equ	0xFD8
  2871                           
  2872 ;; *************** function _print_unit *****************
  2873 ;; Defined at:
  2874 ;;		line 412 in file "../../../src/print.c"
  2875 ;; Parameters:    Size  Location     Type
  2876 ;;  unit            1    wreg     unsigned char 
  2877 ;; Auto vars:     Size  Location     Type
  2878 ;;  unit            1    0[COMRAM] unsigned char 
  2879 ;; Return value:  Size  Location     Type
  2880 ;;		None               void
  2881 ;; Registers used:
  2882 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2883 ;; Tracked objects:
  2884 ;;		On entry : F/0
  2885 ;;		On exit  : 0/0
  2886 ;;		Unchanged: 0/0
  2887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2888 ;;      Params:         0       0       0       0       0       0       0       0       0
  2889 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2890 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2891 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2892 ;;Total ram usage:        2 bytes
  2893 ;; Hardware stack levels used:    1
  2894 ;; Hardware stack levels required when called:    5
  2895 ;; This function calls:
  2896 ;;		_lcd_gotoxy
  2897 ;;		_ser_puts
  2898 ;; This function is called by:
  2899 ;;		_measure_capacitance
  2900 ;;		_measure_inductance
  2901 ;; This function uses a non-reentrant model
  2902 ;;
  2903                           
  2904                           	psect	text6
  2905  002808                     __ptext6:
  2906                           	opt stack 0
  2907  002808                     _print_unit:
  2908                           	opt stack 24
  2909                           
  2910                           ; BSR set to: 0
  2911                           ;print.c: 420: static const char* units[8] = {"H", "mH", "uH", "nH", "mF", "uF", "nF", "
      +                          pF"};
  2912                           ;print.c: 421: lcd_gotoxy(14, 0);
  2913                           
  2914                           ;incstack = 0
  2915  002808  6A08               	clrf	lcd_gotoxy@row,c
  2916  00280A  0E0E               	movlw	14
  2917  00280C  EC4C  F013         	call	_lcd_gotoxy
  2918                           
  2919                           ;print.c: 425: lcd_gotoxy(16 - (buffer.n - buffer.p), 0);
  2920  002810  6A08               	clrf	lcd_gotoxy@row,c
  2921  002812  0100               	movlb	0	; () banked
  2922  002814  39E4               	swapf	(_buffer+16)& (0+255),w,b
  2923  002816  0B0F               	andlw	15
  2924  002818  6E0E               	movwf	??_print_unit& (0+255),c
  2925  00281A  51E4               	movf	(_buffer+16)& (0+255),w,b
  2926  00281C  0B0F               	andlw	15
  2927  00281E  6E0F               	movwf	(??_print_unit+1)& (0+255),c
  2928  002820  500E               	movf	??_print_unit,w,c
  2929  002822  5C0F               	subwf	??_print_unit+1,w,c
  2930  002824  0F10               	addlw	16
  2931  002826  EC4C  F013         	call	_lcd_gotoxy
  2932                           
  2933                           ;print.c: 428: ser_puts("\r\n");
  2934  00282A  0E9B               	movlw	(STR_29+3)& (0+255)
  2935  00282C  EF60  F014         	goto	_ser_puts
  2936  002830                     __end_of_print_unit:
  2937                           	opt stack 0
  2938                           tblptru	equ	0xFF8
  2939                           tblptrh	equ	0xFF7
  2940                           tblptrl	equ	0xFF6
  2941                           tablat	equ	0xFF5
  2942                           prodl	equ	0xFF3
  2943                           intcon	equ	0xFF2
  2944                           intcon2	equ	0xFF1
  2945                           postinc0	equ	0xFEE
  2946                           wreg	equ	0xFE8
  2947                           postdec1	equ	0xFE5
  2948                           fsr1l	equ	0xFE1
  2949                           indf2	equ	0xFDF
  2950                           postinc2	equ	0xFDE
  2951                           postdec2	equ	0xFDD
  2952                           fsr2h	equ	0xFDA
  2953                           fsr2l	equ	0xFD9
  2954                           status	equ	0xFD8
  2955                           
  2956 ;; *************** function _print_reading *****************
  2957 ;; Defined at:
  2958 ;;		line 433 in file "../../../src/print.c"
  2959 ;; Parameters:    Size  Location     Type
  2960 ;;  measurement     2   53[COMRAM] unsigned int 
  2961 ;; Auto vars:     Size  Location     Type
  2962 ;;		None
  2963 ;; Return value:  Size  Location     Type
  2964 ;;		None               void
  2965 ;; Registers used:
  2966 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2967 ;; Tracked objects:
  2968 ;;		On entry : F/0
  2969 ;;		On exit  : 0/0
  2970 ;;		Unchanged: 0/0
  2971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2972 ;;      Params:         2       0       0       0       0       0       0       0       0
  2973 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2974 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2975 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2976 ;;Total ram usage:        6 bytes
  2977 ;; Hardware stack levels used:    1
  2978 ;; Hardware stack levels required when called:    5
  2979 ;; This function calls:
  2980 ;;		___lwdiv
  2981 ;;		___lwmod
  2982 ;;		_format_number
  2983 ;;		_lcd_gotoxy
  2984 ;;		_lcd_puts
  2985 ;; This function is called by:
  2986 ;;		_measure_capacitance
  2987 ;;		_measure_inductance
  2988 ;; This function uses a non-reentrant model
  2989 ;;
  2990                           
  2991                           	psect	text7
  2992  002356                     __ptext7:
  2993                           	opt stack 0
  2994  002356                     _print_reading:
  2995                           	opt stack 24
  2996                           
  2997                           ; BSR set to: 0
  2998                           ;print.c: 460: lcd_gotoxy(9, 0);
  2999                           
  3000                           ;incstack = 0
  3001  002356  6A08               	clrf	lcd_gotoxy@row,c
  3002  002358  0E09               	movlw	9
  3003  00235A  EC4C  F013         	call	_lcd_gotoxy
  3004                           
  3005                           ;print.c: 461: lcd_puts("     ");
  3006  00235E  0E92               	movlw	(STR_30+1)& (0+255)
  3007  002360  ECC5  F013         	call	_lcd_puts
  3008                           
  3009                           ;print.c: 462: lcd_gotoxy(9, 0);
  3010  002364  6A08               	clrf	lcd_gotoxy@row,c
  3011  002366  0E09               	movlw	9
  3012  002368  EC4C  F013         	call	_lcd_gotoxy
  3013                           
  3014                           ;print.c: 464: format_number( measurement / 100, 10, 0);
  3015  00236C  C036  F004         	movff	print_reading@measurement,___lwdiv@dividend
  3016  002370  C037  F005         	movff	print_reading@measurement+1,___lwdiv@dividend+1
  3017  002374  6A07               	clrf	___lwdiv@divisor+1,c
  3018  002376  0E64               	movlw	100
  3019  002378  6E06               	movwf	___lwdiv@divisor,c
  3020  00237A  ECA5  F012         	call	___lwdiv	;wreg free
  3021  00237E  C004  F038         	movff	?___lwdiv,_print_reading$1104
  3022  002382  C005  F039         	movff	?___lwdiv+1,_print_reading$1104+1
  3023                           
  3024                           ;print.c: 464: format_number( measurement / 100, 10, 0);
  3025  002386  C038  F00B         	movff	_print_reading$1104,format_number@n
  3026  00238A  C039  F00C         	movff	_print_reading$1104+1,format_number@n+1
  3027  00238E  0E0A               	movlw	10
  3028  002390  6E0D               	movwf	format_number@base,c
  3029  002392  6A0E               	clrf	format_number@pad,c
  3030  002394  EC44  F010         	call	_format_number	;wreg free
  3031                           
  3032                           ;print.c: 466: format_number( measurement % 100, 10, 0);
  3033  002398  C036  F004         	movff	print_reading@measurement,___lwmod@dividend
  3034  00239C  C037  F005         	movff	print_reading@measurement+1,___lwmod@dividend+1
  3035  0023A0  6A07               	clrf	___lwmod@divisor+1,c
  3036  0023A2  0E64               	movlw	100
  3037  0023A4  6E06               	movwf	___lwmod@divisor,c
  3038  0023A6  EC10  F013         	call	___lwmod	;wreg free
  3039  0023AA  C004  F03A         	movff	?___lwmod,_print_reading$1105
  3040  0023AE  C005  F03B         	movff	?___lwmod+1,_print_reading$1105+1
  3041                           
  3042                           ;print.c: 466: format_number( measurement % 100, 10, 0);
  3043  0023B2  C03A  F00B         	movff	_print_reading$1105,format_number@n
  3044  0023B6  C03B  F00C         	movff	_print_reading$1105+1,format_number@n+1
  3045  0023BA  0E0A               	movlw	10
  3046  0023BC  6E0D               	movwf	format_number@base,c
  3047  0023BE  6A0E               	clrf	format_number@pad,c
  3048  0023C0  EF44  F010         	goto	_format_number	;wreg free
  3049  0023C4                     __end_of_print_reading:
  3050                           	opt stack 0
  3051                           tblptru	equ	0xFF8
  3052                           tblptrh	equ	0xFF7
  3053                           tblptrl	equ	0xFF6
  3054                           tablat	equ	0xFF5
  3055                           prodl	equ	0xFF3
  3056                           intcon	equ	0xFF2
  3057                           intcon2	equ	0xFF1
  3058                           postinc0	equ	0xFEE
  3059                           wreg	equ	0xFE8
  3060                           postdec1	equ	0xFE5
  3061                           fsr1l	equ	0xFE1
  3062                           indf2	equ	0xFDF
  3063                           postinc2	equ	0xFDE
  3064                           postdec2	equ	0xFDD
  3065                           fsr2h	equ	0xFDA
  3066                           fsr2l	equ	0xFD9
  3067                           status	equ	0xFD8
  3068                           
  3069 ;; *************** function _format_xint32 *****************
  3070 ;; Defined at:
  3071 ;;		line 49 in file "../../../lib/format.c"
  3072 ;; Parameters:    Size  Location     Type
  3073 ;;  x               4   53[COMRAM] unsigned long 
  3074 ;; Auto vars:     Size  Location     Type
  3075 ;;		None
  3076 ;; Return value:  Size  Location     Type
  3077 ;;		None               void
  3078 ;; Registers used:
  3079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3080 ;; Tracked objects:
  3081 ;;		On entry : 0/0
  3082 ;;		On exit  : 0/0
  3083 ;;		Unchanged: 0/0
  3084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3085 ;;      Params:         4       0       0       0       0       0       0       0       0
  3086 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3087 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3088 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3089 ;;Total ram usage:        4 bytes
  3090 ;; Hardware stack levels used:    1
  3091 ;; Hardware stack levels required when called:    3
  3092 ;; This function calls:
  3093 ;;		_buffer_putch
  3094 ;;		_format_number
  3095 ;; This function is called by:
  3096 ;;		_measure_capacitance
  3097 ;; This function uses a non-reentrant model
  3098 ;;
  3099                           
  3100                           	psect	text8
  3101  0026CE                     __ptext8:
  3102                           	opt stack 0
  3103  0026CE                     _format_xint32:
  3104                           	opt stack 26
  3105                           
  3106                           ;format.c: 50: buffer_putch('0');
  3107                           
  3108                           ;incstack = 0
  3109  0026CE  0E30               	movlw	48
  3110  0026D0  EC80  F012         	call	_buffer_putch
  3111                           
  3112                           ;format.c: 51: buffer_putch('x');
  3113  0026D4  0E78               	movlw	120
  3114  0026D6  EC80  F012         	call	_buffer_putch
  3115                           
  3116                           ;format.c: 52: format_number((uint16_t)(x >> 16), 16, -4);
  3117  0026DA  C038  F00B         	movff	format_xint32@x+2,format_number@n
  3118  0026DE  C039  F00C         	movff	format_xint32@x+3,format_number@n+1
  3119  0026E2  0E10               	movlw	16
  3120  0026E4  6E0D               	movwf	format_number@base,c
  3121  0026E6  0EFC               	movlw	252
  3122  0026E8  6E0E               	movwf	format_number@pad,c
  3123  0026EA  EC44  F010         	call	_format_number	;wreg free
  3124                           
  3125                           ;format.c: 53: format_number((uint16_t)(x & 0xffff), 16, -4);
  3126  0026EE  C036  F00B         	movff	format_xint32@x,format_number@n
  3127  0026F2  C037  F00C         	movff	format_xint32@x+1,format_number@n+1
  3128  0026F6  0E10               	movlw	16
  3129  0026F8  6E0D               	movwf	format_number@base,c
  3130  0026FA  0EFC               	movlw	252
  3131  0026FC  6E0E               	movwf	format_number@pad,c
  3132  0026FE  EF44  F010         	goto	_format_number	;wreg free
  3133  002702                     __end_of_format_xint32:
  3134                           	opt stack 0
  3135                           tblptru	equ	0xFF8
  3136                           tblptrh	equ	0xFF7
  3137                           tblptrl	equ	0xFF6
  3138                           tablat	equ	0xFF5
  3139                           prodl	equ	0xFF3
  3140                           intcon	equ	0xFF2
  3141                           intcon2	equ	0xFF1
  3142                           postinc0	equ	0xFEE
  3143                           wreg	equ	0xFE8
  3144                           postdec1	equ	0xFE5
  3145                           fsr1l	equ	0xFE1
  3146                           indf2	equ	0xFDF
  3147                           postinc2	equ	0xFDE
  3148                           postdec2	equ	0xFDD
  3149                           fsr2h	equ	0xFDA
  3150                           fsr2l	equ	0xFD9
  3151                           status	equ	0xFD8
  3152                           
  3153 ;; *************** function _format_double *****************
  3154 ;; Defined at:
  3155 ;;		line 75 in file "../../../lib/format.c"
  3156 ;; Parameters:    Size  Location     Type
  3157 ;;  num             4   49[BANK0 ] unsigned long 
  3158 ;; Auto vars:     Size  Location     Type
  3159 ;;  weight          4   61[BANK0 ] unsigned long 
  3160 ;;  m               2   67[BANK0 ] short 
  3161 ;;  digit           2   65[BANK0 ] short 
  3162 ;; Return value:  Size  Location     Type
  3163 ;;		None               void
  3164 ;; Registers used:
  3165 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3166 ;; Tracked objects:
  3167 ;;		On entry : 0/0
  3168 ;;		On exit  : 0/0
  3169 ;;		Unchanged: 0/0
  3170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3171 ;;      Params:         0       4       0       0       0       0       0       0       0
  3172 ;;      Locals:         0      16       0       0       0       0       0       0       0
  3173 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3174 ;;      Totals:         0      20       0       0       0       0       0       0       0
  3175 ;;Total ram usage:       20 bytes
  3176 ;; Hardware stack levels used:    1
  3177 ;; Hardware stack levels required when called:    6
  3178 ;; This function calls:
  3179 ;;		___awtofl
  3180 ;;		___fldiv
  3181 ;;		___flge
  3182 ;;		___flmul
  3183 ;;		___flsub
  3184 ;;		___fltol
  3185 ;;		_buffer_putch
  3186 ;;		_floor
  3187 ;;		_log10
  3188 ;;		_pow
  3189 ;; This function is called by:
  3190 ;;		_measure_capacitance
  3191 ;;		_main
  3192 ;; This function uses a non-reentrant model
  3193 ;;
  3194                           
  3195                           	psect	text9
  3196  00150E                     __ptext9:
  3197                           	opt stack 0
  3198  00150E                     _format_double:
  3199                           	opt stack 23
  3200                           
  3201                           ;format.c: 76: short m = (short)log10(num);
  3202                           
  3203                           ;incstack = 0
  3204  00150E  C091  F04A         	movff	format_double@num,log10@x
  3205  001512  C092  F04B         	movff	format_double@num+1,log10@x+1
  3206  001516  C093  F04C         	movff	format_double@num+2,log10@x+2
  3207  00151A  C094  F04D         	movff	format_double@num+3,log10@x+3
  3208  00151E  ECE2  F011         	call	_log10	;wreg free
  3209  001522  C04A  F052         	movff	?_log10,___fltol@f1
  3210  001526  C04B  F053         	movff	?_log10+1,___fltol@f1+1
  3211  00152A  C04C  F054         	movff	?_log10+2,___fltol@f1+2
  3212  00152E  C04D  F055         	movff	?_log10+3,___fltol@f1+3
  3213  001532  ECE9  F010         	call	___fltol	;wreg free
  3214  001536  C052  F0A3         	movff	?___fltol,format_double@m
  3215  00153A  C053  F0A4         	movff	?___fltol+1,format_double@m+1
  3216                           
  3217                           ;format.c: 77: short digit;
  3218                           ;format.c: 80: while(num > 0 + 1.19209290e-07) {
  3219  00153E  D099               	goto	l3954
  3220  001540                     l3936:
  3221                           
  3222                           ;format.c: 81: double weight = pow(10.0l, m);
  3223  001540  C0A3  F00E         	movff	format_double@m,___awtofl@c
  3224  001544  C0A4  F00F         	movff	format_double@m+1,___awtofl@c+1
  3225  001548  EC2F  F013         	call	___awtofl	;wreg free
  3226  00154C  C00E  F095         	movff	?___awtofl,_format_double$1092
  3227  001550  C00F  F096         	movff	?___awtofl+1,_format_double$1092+1
  3228  001554  C010  F097         	movff	?___awtofl+2,_format_double$1092+2
  3229  001558  C011  F098         	movff	?___awtofl+3,_format_double$1092+3
  3230                           
  3231                           ;format.c: 81: double weight = pow(10.0l, m);
  3232  00155C  0100               	movlb	0	; () banked
  3233  00155E  6B7C               	clrf	pow@x& (0+255),b
  3234  001560  6B7D               	clrf	(pow@x+1)& (0+255),b
  3235  001562  0E20               	movlw	32
  3236  001564  6F7E               	movwf	(pow@x+2)& (0+255),b
  3237  001566  0E41               	movlw	65
  3238  001568  6F7F               	movwf	(pow@x+3)& (0+255),b
  3239  00156A  C095  F080         	movff	_format_double$1092,pow@y
  3240  00156E  C096  F081         	movff	_format_double$1092+1,pow@y+1
  3241  001572  C097  F082         	movff	_format_double$1092+2,pow@y+2
  3242  001576  C098  F083         	movff	_format_double$1092+3,pow@y+3
  3243  00157A  ECBE  F009         	call	_pow	;wreg free
  3244  00157E  C07C  F09D         	movff	?_pow,format_double@weight
  3245  001582  C07D  F09E         	movff	?_pow+1,format_double@weight+1
  3246  001586  C07E  F09F         	movff	?_pow+2,format_double@weight+2
  3247  00158A  C07F  F0A0         	movff	?_pow+3,format_double@weight+3
  3248                           
  3249                           ; BSR set to: 0
  3250                           ;format.c: 82: digit = (short)floor(num / weight);
  3251  00158E  C09D  F012         	movff	format_double@weight,___fldiv@f2
  3252  001592  C09E  F013         	movff	format_double@weight+1,___fldiv@f2+1
  3253  001596  C09F  F014         	movff	format_double@weight+2,___fldiv@f2+2
  3254  00159A  C0A0  F015         	movff	format_double@weight+3,___fldiv@f2+3
  3255  00159E  C091  F00E         	movff	format_double@num,___fldiv@f1
  3256  0015A2  C092  F00F         	movff	format_double@num+1,___fldiv@f1+1
  3257  0015A6  C093  F010         	movff	format_double@num+2,___fldiv@f1+2
  3258  0015AA  C094  F011         	movff	format_double@num+3,___fldiv@f1+3
  3259  0015AE  EC97  F00F         	call	___fldiv	;wreg free
  3260  0015B2  C00E  F067         	movff	?___fldiv,floor@x
  3261  0015B6  C00F  F068         	movff	?___fldiv+1,floor@x+1
  3262  0015BA  C010  F069         	movff	?___fldiv+2,floor@x+2
  3263  0015BE  C011  F06A         	movff	?___fldiv+3,floor@x+3
  3264  0015C2  EC09  F00D         	call	_floor	;wreg free
  3265  0015C6  C067  F099         	movff	?_floor,_format_double$1093
  3266  0015CA  C068  F09A         	movff	?_floor+1,_format_double$1093+1
  3267  0015CE  C069  F09B         	movff	?_floor+2,_format_double$1093+2
  3268  0015D2  C06A  F09C         	movff	?_floor+3,_format_double$1093+3
  3269                           
  3270                           ;format.c: 82: digit = (short)floor(num / weight);
  3271  0015D6  C099  F052         	movff	_format_double$1093,___fltol@f1
  3272  0015DA  C09A  F053         	movff	_format_double$1093+1,___fltol@f1+1
  3273  0015DE  C09B  F054         	movff	_format_double$1093+2,___fltol@f1+2
  3274  0015E2  C09C  F055         	movff	_format_double$1093+3,___fltol@f1+3
  3275  0015E6  ECE9  F010         	call	___fltol	;wreg free
  3276  0015EA  C052  F0A1         	movff	?___fltol,format_double@digit
  3277  0015EE  C053  F0A2         	movff	?___fltol+1,format_double@digit+1
  3278                           
  3279                           ; BSR set to: 0
  3280                           ;format.c: 83: num -= (digit * weight);
  3281  0015F2  C091  F038         	movff	format_double@num,___flsub@f1
  3282  0015F6  C092  F039         	movff	format_double@num+1,___flsub@f1+1
  3283  0015FA  C093  F03A         	movff	format_double@num+2,___flsub@f1+2
  3284  0015FE  C094  F03B         	movff	format_double@num+3,___flsub@f1+3
  3285  001602  C09D  F021         	movff	format_double@weight,___flmul@f2
  3286  001606  C09E  F022         	movff	format_double@weight+1,___flmul@f2+1
  3287  00160A  C09F  F023         	movff	format_double@weight+2,___flmul@f2+2
  3288  00160E  C0A0  F024         	movff	format_double@weight+3,___flmul@f2+3
  3289  001612  C0A1  F00E         	movff	format_double@digit,___awtofl@c
  3290  001616  C0A2  F00F         	movff	format_double@digit+1,___awtofl@c+1
  3291  00161A  EC2F  F013         	call	___awtofl	;wreg free
  3292  00161E  C00E  F01D         	movff	?___awtofl,___flmul@f1
  3293  001622  C00F  F01E         	movff	?___awtofl+1,___flmul@f1+1
  3294  001626  C010  F01F         	movff	?___awtofl+2,___flmul@f1+2
  3295  00162A  C011  F020         	movff	?___awtofl+3,___flmul@f1+3
  3296  00162E  ECD4  F00E         	call	___flmul	;wreg free
  3297  001632  C01D  F03C         	movff	?___flmul,___flsub@f2
  3298  001636  C01E  F03D         	movff	?___flmul+1,___flsub@f2+1
  3299  00163A  C01F  F03E         	movff	?___flmul+2,___flsub@f2+2
  3300  00163E  C020  F03F         	movff	?___flmul+3,___flsub@f2+3
  3301  001642  ECEE  F012         	call	___flsub	;wreg free
  3302  001646  C038  F091         	movff	?___flsub,format_double@num
  3303  00164A  C039  F092         	movff	?___flsub+1,format_double@num+1
  3304  00164E  C03A  F093         	movff	?___flsub+2,format_double@num+2
  3305  001652  C03B  F094         	movff	?___flsub+3,format_double@num+3
  3306                           
  3307                           ;format.c: 84: buffer_putch((char)('0' + digit));
  3308  001656  0100               	movlb	0	; () banked
  3309  001658  51A1               	movf	format_double@digit& (0+255),w,b
  3310  00165A  0F30               	addlw	48
  3311  00165C  EC80  F012         	call	_buffer_putch
  3312                           
  3313                           ; BSR set to: 0
  3314                           ;format.c: 85: if(m == 0)
  3315  001660  51A3               	movf	format_double@m& (0+255),w,b
  3316  001662  11A4               	iorwf	(format_double@m+1)& (0+255),w,b
  3317  001664  E103               	bnz	l3952
  3318                           
  3319                           ; BSR set to: 0
  3320                           ;format.c: 86: buffer_putch('.');
  3321  001666  0E2E               	movlw	46
  3322  001668  EC80  F012         	call	_buffer_putch
  3323  00166C                     l3952:
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;format.c: 87: m--;
  3327  00166C  07A3               	decf	format_double@m& (0+255),f,b
  3328  00166E  A0D8               	btfss	status,0,c
  3329  001670  07A4               	decf	(format_double@m+1)& (0+255),f,b
  3330  001672                     l3954:
  3331                           
  3332                           ; BSR set to: 0
  3333  001672  6A04               	clrf	___flge@ff1,c
  3334  001674  6A05               	clrf	___flge@ff1+1,c
  3335  001676  6A06               	clrf	___flge@ff1+2,c
  3336  001678  0E34               	movlw	52
  3337  00167A  6E07               	movwf	___flge@ff1+3,c
  3338  00167C  C091  F008         	movff	format_double@num,___flge@ff2
  3339  001680  C092  F009         	movff	format_double@num+1,___flge@ff2+1
  3340  001684  C093  F00A         	movff	format_double@num+2,___flge@ff2+2
  3341  001688  C094  F00B         	movff	format_double@num+3,___flge@ff2+3
  3342  00168C  EC35  F012         	call	___flge	;wreg free
  3343  001690  B0D8               	btfsc	status,0,c
  3344  001692  0012               	return		;funcret
  3345  001694  D755               	goto	l3936
  3346  001696                     __end_of_format_double:
  3347                           	opt stack 0
  3348                           tblptru	equ	0xFF8
  3349                           tblptrh	equ	0xFF7
  3350                           tblptrl	equ	0xFF6
  3351                           tablat	equ	0xFF5
  3352                           prodl	equ	0xFF3
  3353                           intcon	equ	0xFF2
  3354                           intcon2	equ	0xFF1
  3355                           postinc0	equ	0xFEE
  3356                           wreg	equ	0xFE8
  3357                           postdec1	equ	0xFE5
  3358                           fsr1l	equ	0xFE1
  3359                           indf2	equ	0xFDF
  3360                           postinc2	equ	0xFDE
  3361                           postdec2	equ	0xFDD
  3362                           fsr2h	equ	0xFDA
  3363                           fsr2l	equ	0xFD9
  3364                           status	equ	0xFD8
  3365                           
  3366 ;; *************** function _pow *****************
  3367 ;; Defined at:
  3368 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\pow.c"
  3369 ;; Parameters:    Size  Location     Type
  3370 ;;  x               4   28[BANK0 ] short 
  3371 ;;  y               4   32[BANK0 ] short 
  3372 ;; Auto vars:     Size  Location     Type
  3373 ;;  yi              4   45[BANK0 ] unsigned long 
  3374 ;;  sign            1   44[BANK0 ] unsigned char 
  3375 ;; Return value:  Size  Location     Type
  3376 ;;                  4   28[BANK0 ] unsigned char 
  3377 ;; Registers used:
  3378 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3379 ;; Tracked objects:
  3380 ;;		On entry : F/0
  3381 ;;		On exit  : F/0
  3382 ;;		Unchanged: 0/0
  3383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3384 ;;      Params:         0       8       0       0       0       0       0       0       0
  3385 ;;      Locals:         0      13       0       0       0       0       0       0       0
  3386 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3387 ;;      Totals:         0      21       0       0       0       0       0       0       0
  3388 ;;Total ram usage:       21 bytes
  3389 ;; Hardware stack levels used:    1
  3390 ;; Hardware stack levels required when called:    5
  3391 ;; This function calls:
  3392 ;;		___flge
  3393 ;;		___flmul
  3394 ;;		___flneg
  3395 ;;		___fltol
  3396 ;;		___lltofl
  3397 ;;		_exp
  3398 ;;		_log
  3399 ;; This function is called by:
  3400 ;;		_format_double
  3401 ;; This function uses a non-reentrant model
  3402 ;;
  3403                           
  3404                           	psect	text10
  3405  00137C                     __ptext10:
  3406                           	opt stack 0
  3407  00137C                     _pow:
  3408                           	opt stack 23
  3409                           
  3410                           ; BSR set to: 0
  3411                           
  3412                           ;incstack = 0
  3413  00137C  6B8C               	clrf	pow@sign& (0+255),b
  3414                           
  3415                           ; BSR set to: 0
  3416  00137E  517C               	movf	pow@x& (0+255),w,b
  3417  001380  117D               	iorwf	(pow@x+1)& (0+255),w,b
  3418  001382  117E               	iorwf	(pow@x+2)& (0+255),w,b
  3419  001384  117F               	iorwf	(pow@x+3)& (0+255),w,b
  3420  001386  E114               	bnz	l3906
  3421                           
  3422                           ; BSR set to: 0
  3423  001388  6A04               	clrf	___flge@ff1,c
  3424  00138A  6A05               	clrf	___flge@ff1+1,c
  3425  00138C  6A06               	clrf	___flge@ff1+2,c
  3426  00138E  6A07               	clrf	___flge@ff1+3,c
  3427  001390  C080  F008         	movff	pow@y,___flge@ff2
  3428  001394  C081  F009         	movff	pow@y+1,___flge@ff2+1
  3429  001398  C082  F00A         	movff	pow@y+2,___flge@ff2+2
  3430  00139C  C083  F00B         	movff	pow@y+3,___flge@ff2+3
  3431  0013A0  EC35  F012         	call	___flge	;wreg free
  3432  0013A4  0100               	movlb	0	; () banked
  3433  0013A6  6B7C               	clrf	?_pow& (0+255),b
  3434  0013A8  6B7D               	clrf	(?_pow+1)& (0+255),b
  3435  0013AA  6B7E               	clrf	(?_pow+2)& (0+255),b
  3436  0013AC  6B7F               	clrf	(?_pow+3)& (0+255),b
  3437  0013AE  0012               	return	
  3438  0013B0                     l3906:
  3439                           
  3440                           ; BSR set to: 0
  3441  0013B0  5180               	movf	pow@y& (0+255),w,b
  3442  0013B2  1181               	iorwf	(pow@y+1)& (0+255),w,b
  3443  0013B4  1182               	iorwf	(pow@y+2)& (0+255),w,b
  3444  0013B6  1183               	iorwf	(pow@y+3)& (0+255),w,b
  3445  0013B8  E108               	bnz	l3912
  3446                           
  3447                           ; BSR set to: 0
  3448  0013BA  0E00               	movlw	0
  3449  0013BC  6F7C               	movwf	?_pow& (0+255),b
  3450  0013BE  6F7D               	movwf	(?_pow+1)& (0+255),b
  3451  0013C0  0E80               	movlw	128
  3452  0013C2  6F7E               	movwf	(?_pow+2)& (0+255),b
  3453  0013C4  0E3F               	movlw	63
  3454  0013C6  6F7F               	movwf	(?_pow+3)& (0+255),b
  3455  0013C8  0C3F               	retlw	63
  3456  0013CA                     l3912:
  3457                           
  3458                           ; BSR set to: 0
  3459  0013CA  AF7F               	btfss	(pow@x+3)& (0+255),7,b
  3460  0013CC  D043               	goto	l3922
  3461                           
  3462                           ; BSR set to: 0
  3463  0013CE  C080  F052         	movff	pow@y,___fltol@f1
  3464  0013D2  C081  F053         	movff	pow@y+1,___fltol@f1+1
  3465  0013D6  C082  F054         	movff	pow@y+2,___fltol@f1+2
  3466  0013DA  C083  F055         	movff	pow@y+3,___fltol@f1+3
  3467  0013DE  ECE9  F010         	call	___fltol	;wreg free
  3468  0013E2  C052  F08D         	movff	?___fltol,pow@yi
  3469  0013E6  C053  F08E         	movff	?___fltol+1,pow@yi+1
  3470  0013EA  C054  F08F         	movff	?___fltol+2,pow@yi+2
  3471  0013EE  C055  F090         	movff	?___fltol+3,pow@yi+3
  3472  0013F2  C08D  F00E         	movff	pow@yi,___lltofl@c
  3473  0013F6  C08E  F00F         	movff	pow@yi+1,___lltofl@c+1
  3474  0013FA  C08F  F010         	movff	pow@yi+2,___lltofl@c+2
  3475  0013FE  C090  F011         	movff	pow@yi+3,___lltofl@c+3
  3476  001402  EC98  F013         	call	___lltofl	;wreg free
  3477  001406  0100               	movlb	0	; () banked
  3478  001408  5180               	movf	pow@y& (0+255),w,b
  3479  00140A  180E               	xorwf	?___lltofl,w,c
  3480  00140C  E109               	bnz	u3250
  3481  00140E  5181               	movf	(pow@y+1)& (0+255),w,b
  3482  001410  180F               	xorwf	?___lltofl+1,w,c
  3483  001412  E106               	bnz	u3250
  3484  001414  5182               	movf	(pow@y+2)& (0+255),w,b
  3485  001416  1810               	xorwf	?___lltofl+2,w,c
  3486  001418  E103               	bnz	u3250
  3487  00141A  5183               	movf	(pow@y+3)& (0+255),w,b
  3488  00141C  1811               	xorwf	?___lltofl+3,w,c
  3489  00141E  E005               	bz	l3918
  3490  001420                     u3250:
  3491                           
  3492                           ; BSR set to: 0
  3493  001420  6B7C               	clrf	?_pow& (0+255),b
  3494  001422  6B7D               	clrf	(?_pow+1)& (0+255),b
  3495  001424  6B7E               	clrf	(?_pow+2)& (0+255),b
  3496  001426  6B7F               	clrf	(?_pow+3)& (0+255),b
  3497  001428  0012               	return	
  3498  00142A                     l3918:
  3499                           
  3500                           ; BSR set to: 0
  3501  00142A  518D               	movf	pow@yi& (0+255),w,b
  3502  00142C  0B01               	andlw	1
  3503  00142E  6F8C               	movwf	pow@sign& (0+255),b
  3504                           
  3505                           ; BSR set to: 0
  3506  001430  C07C  F004         	movff	pow@x,___flneg@f1
  3507  001434  C07D  F005         	movff	pow@x+1,___flneg@f1+1
  3508  001438  C07E  F006         	movff	pow@x+2,___flneg@f1+2
  3509  00143C  C07F  F007         	movff	pow@x+3,___flneg@f1+3
  3510  001440  EC50  F014         	call	___flneg	;wreg free
  3511  001444  C004  F07C         	movff	?___flneg,pow@x
  3512  001448  C005  F07D         	movff	?___flneg+1,pow@x+1
  3513  00144C  C006  F07E         	movff	?___flneg+2,pow@x+2
  3514  001450  C007  F07F         	movff	?___flneg+3,pow@x+3
  3515  001454                     l3922:
  3516                           
  3517                           ; BSR set to: 0
  3518  001454  C07C  F044         	movff	pow@x,log@x
  3519  001458  C07D  F045         	movff	pow@x+1,log@x+1
  3520  00145C  C07E  F046         	movff	pow@x+2,log@x+2
  3521  001460  C07F  F047         	movff	pow@x+3,log@x+3
  3522  001464  ECF8  F00B         	call	_log	;wreg free
  3523  001468  C044  F084         	movff	?_log,_pow$1107
  3524  00146C  C045  F085         	movff	?_log+1,_pow$1107+1
  3525  001470  C046  F086         	movff	?_log+2,_pow$1107+2
  3526  001474  C047  F087         	movff	?_log+3,_pow$1107+3
  3527  001478  C084  F01D         	movff	_pow$1107,___flmul@f1
  3528  00147C  C085  F01E         	movff	_pow$1107+1,___flmul@f1+1
  3529  001480  C086  F01F         	movff	_pow$1107+2,___flmul@f1+2
  3530  001484  C087  F020         	movff	_pow$1107+3,___flmul@f1+3
  3531  001488  C080  F021         	movff	pow@y,___flmul@f2
  3532  00148C  C081  F022         	movff	pow@y+1,___flmul@f2+1
  3533  001490  C082  F023         	movff	pow@y+2,___flmul@f2+2
  3534  001494  C083  F024         	movff	pow@y+3,___flmul@f2+3
  3535  001498  ECD4  F00E         	call	___flmul	;wreg free
  3536  00149C  C01D  F088         	movff	?___flmul,_pow$1108
  3537  0014A0  C01E  F089         	movff	?___flmul+1,_pow$1108+1
  3538  0014A4  C01F  F08A         	movff	?___flmul+2,_pow$1108+2
  3539  0014A8  C020  F08B         	movff	?___flmul+3,_pow$1108+3
  3540  0014AC  C088  F071         	movff	_pow$1108,exp@x
  3541  0014B0  C089  F072         	movff	_pow$1108+1,exp@x+1
  3542  0014B4  C08A  F073         	movff	_pow$1108+2,exp@x+2
  3543  0014B8  C08B  F074         	movff	_pow$1108+3,exp@x+3
  3544  0014BC  ECB0  F008         	call	_exp	;wreg free
  3545  0014C0  C071  F07C         	movff	?_exp,pow@x
  3546  0014C4  C072  F07D         	movff	?_exp+1,pow@x+1
  3547  0014C8  C073  F07E         	movff	?_exp+2,pow@x+2
  3548  0014CC  C074  F07F         	movff	?_exp+3,pow@x+3
  3549  0014D0  0100               	movlb	0	; () banked
  3550  0014D2  518C               	movf	pow@sign& (0+255),w,b
  3551  0014D4  E013               	bz	l1155
  3552                           
  3553                           ; BSR set to: 0
  3554  0014D6  C07C  F004         	movff	pow@x,___flneg@f1
  3555  0014DA  C07D  F005         	movff	pow@x+1,___flneg@f1+1
  3556  0014DE  C07E  F006         	movff	pow@x+2,___flneg@f1+2
  3557  0014E2  C07F  F007         	movff	pow@x+3,___flneg@f1+3
  3558  0014E6  EC50  F014         	call	___flneg	;wreg free
  3559  0014EA  C004  F07C         	movff	?___flneg,?_pow
  3560  0014EE  C005  F07D         	movff	?___flneg+1,?_pow+1
  3561  0014F2  C006  F07E         	movff	?___flneg+2,?_pow+2
  3562  0014F6  C007  F07F         	movff	?___flneg+3,?_pow+3
  3563  0014FA  0012               	return	
  3564  0014FC                     l1155:
  3565                           
  3566                           ; BSR set to: 0
  3567  0014FC  C07C  F07C         	movff	pow@x,?_pow
  3568  001500  C07D  F07D         	movff	pow@x+1,?_pow+1
  3569  001504  C07E  F07E         	movff	pow@x+2,?_pow+2
  3570  001508  C07F  F07F         	movff	pow@x+3,?_pow+3
  3571                           
  3572                           ; BSR set to: 0
  3573  00150C  0012               	return		;funcret
  3574  00150E                     __end_of_pow:
  3575                           	opt stack 0
  3576                           tblptru	equ	0xFF8
  3577                           tblptrh	equ	0xFF7
  3578                           tblptrl	equ	0xFF6
  3579                           tablat	equ	0xFF5
  3580                           prodl	equ	0xFF3
  3581                           intcon	equ	0xFF2
  3582                           intcon2	equ	0xFF1
  3583                           postinc0	equ	0xFEE
  3584                           wreg	equ	0xFE8
  3585                           postdec1	equ	0xFE5
  3586                           fsr1l	equ	0xFE1
  3587                           indf2	equ	0xFDF
  3588                           postinc2	equ	0xFDE
  3589                           postdec2	equ	0xFDD
  3590                           fsr2h	equ	0xFDA
  3591                           fsr2l	equ	0xFD9
  3592                           status	equ	0xFD8
  3593                           
  3594 ;; *************** function _exp *****************
  3595 ;; Defined at:
  3596 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\exp.c"
  3597 ;; Parameters:    Size  Location     Type
  3598 ;;  x               4   17[BANK0 ] unsigned char 
  3599 ;; Auto vars:     Size  Location     Type
  3600 ;;  exponent        2   25[BANK0 ] int 
  3601 ;;  sign            1   27[BANK0 ] unsigned char 
  3602 ;; Return value:  Size  Location     Type
  3603 ;;                  4   17[BANK0 ] unsigned char 
  3604 ;; Registers used:
  3605 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3606 ;; Tracked objects:
  3607 ;;		On entry : 0/0
  3608 ;;		On exit  : 0/0
  3609 ;;		Unchanged: 0/0
  3610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3611 ;;      Params:         0       4       0       0       0       0       0       0       0
  3612 ;;      Locals:         0       7       0       0       0       0       0       0       0
  3613 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3614 ;;      Totals:         0      11       0       0       0       0       0       0       0
  3615 ;;Total ram usage:       11 bytes
  3616 ;; Hardware stack levels used:    1
  3617 ;; Hardware stack levels required when called:    4
  3618 ;; This function calls:
  3619 ;;		___awtofl
  3620 ;;		___fldiv
  3621 ;;		___flge
  3622 ;;		___flmul
  3623 ;;		___flneg
  3624 ;;		___flsub
  3625 ;;		___fltol
  3626 ;;		_eval_poly
  3627 ;;		_floor
  3628 ;;		_ldexp
  3629 ;; This function is called by:
  3630 ;;		_pow
  3631 ;; This function uses a non-reentrant model
  3632 ;;
  3633                           
  3634                           	psect	text11
  3635  001160                     __ptext11:
  3636                           	opt stack 0
  3637  001160                     _exp:
  3638                           	opt stack 23
  3639                           
  3640                           ; BSR set to: 0
  3641                           ;incstack = 0
  3642  001160  0100               	movlb	0	; () banked
  3643  001162  5171               	movf	exp@x& (0+255),w,b
  3644  001164  1172               	iorwf	(exp@x+1)& (0+255),w,b
  3645  001166  1173               	iorwf	(exp@x+2)& (0+255),w,b
  3646  001168  1174               	iorwf	(exp@x+3)& (0+255),w,b
  3647  00116A  E108               	bnz	l3860
  3648                           
  3649                           ; BSR set to: 0
  3650  00116C  0E00               	movlw	0
  3651  00116E  6F71               	movwf	?_exp& (0+255),b
  3652  001170  6F72               	movwf	(?_exp+1)& (0+255),b
  3653  001172  0E80               	movlw	128
  3654  001174  6F73               	movwf	(?_exp+2)& (0+255),b
  3655  001176  0E3F               	movlw	63
  3656  001178  6F74               	movwf	(?_exp+3)& (0+255),b
  3657  00117A  0C3F               	retlw	63
  3658  00117C                     l3860:
  3659                           
  3660                           ; BSR set to: 0
  3661  00117C  0E18               	movlw	24
  3662  00117E  6E04               	movwf	___flge@ff1,c
  3663  001180  0E72               	movlw	114
  3664  001182  6E05               	movwf	___flge@ff1+1,c
  3665  001184  0E31               	movlw	49
  3666  001186  6E06               	movwf	___flge@ff1+2,c
  3667  001188  0E44               	movlw	68
  3668  00118A  6E07               	movwf	___flge@ff1+3,c
  3669  00118C  C071  F008         	movff	exp@x,___flge@ff2
  3670  001190  C072  F009         	movff	exp@x+1,___flge@ff2+1
  3671  001194  C073  F00A         	movff	exp@x+2,___flge@ff2+2
  3672  001198  C074  F00B         	movff	exp@x+3,___flge@ff2+3
  3673  00119C  EC35  F012         	call	___flge	;wreg free
  3674  0011A0  E207               	bc	l3866
  3675  0011A2  0100               	movlb	0	; () banked
  3676  0011A4  6971               	setf	?_exp& (0+255),b
  3677  0011A6  6972               	setf	(?_exp+1)& (0+255),b
  3678  0011A8  0E7F               	movlw	127
  3679  0011AA  6F73               	movwf	(?_exp+2)& (0+255),b
  3680  0011AC  6F74               	movwf	(?_exp+3)& (0+255),b
  3681  0011AE  0C7F               	retlw	127
  3682  0011B0                     l3866:
  3683  0011B0  C071  F004         	movff	exp@x,___flge@ff1
  3684  0011B4  C072  F005         	movff	exp@x+1,___flge@ff1+1
  3685  0011B8  C073  F006         	movff	exp@x+2,___flge@ff1+2
  3686  0011BC  C074  F007         	movff	exp@x+3,___flge@ff1+3
  3687  0011C0  0E87               	movlw	135
  3688  0011C2  6E08               	movwf	___flge@ff2,c
  3689  0011C4  0E48               	movlw	72
  3690  0011C6  6E09               	movwf	___flge@ff2+1,c
  3691  0011C8  0E3A               	movlw	58
  3692  0011CA  6E0A               	movwf	___flge@ff2+2,c
  3693  0011CC  0EC4               	movlw	196
  3694  0011CE  6E0B               	movwf	___flge@ff2+3,c
  3695  0011D0  EC35  F012         	call	___flge	;wreg free
  3696  0011D4  E206               	bc	l3870
  3697  0011D6  0100               	movlb	0	; () banked
  3698  0011D8  6B71               	clrf	?_exp& (0+255),b
  3699  0011DA  6B72               	clrf	(?_exp+1)& (0+255),b
  3700  0011DC  6B73               	clrf	(?_exp+2)& (0+255),b
  3701  0011DE  6B74               	clrf	(?_exp+3)& (0+255),b
  3702  0011E0  0012               	return	
  3703  0011E2                     l3870:
  3704  0011E2  0100               	movlb	0	; () banked
  3705  0011E4  0E01               	movlw	1
  3706  0011E6  AF74               	btfss	(exp@x+3)& (0+255),7,b
  3707  0011E8  0E00               	movlw	0
  3708  0011EA  6F7B               	movwf	exp@sign& (0+255),b
  3709                           
  3710                           ; BSR set to: 0
  3711  0011EC  517B               	movf	exp@sign& (0+255),w,b
  3712  0011EE  E012               	bz	l1180
  3713                           
  3714                           ; BSR set to: 0
  3715  0011F0  C071  F004         	movff	exp@x,___flneg@f1
  3716  0011F4  C072  F005         	movff	exp@x+1,___flneg@f1+1
  3717  0011F8  C073  F006         	movff	exp@x+2,___flneg@f1+2
  3718  0011FC  C074  F007         	movff	exp@x+3,___flneg@f1+3
  3719  001200  EC50  F014         	call	___flneg	;wreg free
  3720  001204  C004  F071         	movff	?___flneg,exp@x
  3721  001208  C005  F072         	movff	?___flneg+1,exp@x+1
  3722  00120C  C006  F073         	movff	?___flneg+2,exp@x+2
  3723  001210  C007  F074         	movff	?___flneg+3,exp@x+3
  3724  001214                     l1180:
  3725                           
  3726                           ; BSR set to: 0
  3727  001214  C071  F01D         	movff	exp@x,___flmul@f1
  3728  001218  C072  F01E         	movff	exp@x+1,___flmul@f1+1
  3729  00121C  C073  F01F         	movff	exp@x+2,___flmul@f1+2
  3730  001220  C074  F020         	movff	exp@x+3,___flmul@f1+3
  3731  001224  0E3B               	movlw	59
  3732  001226  6E21               	movwf	___flmul@f2,c
  3733  001228  0EAA               	movlw	170
  3734  00122A  6E22               	movwf	___flmul@f2+1,c
  3735  00122C  0EB8               	movlw	184
  3736  00122E  6E23               	movwf	___flmul@f2+2,c
  3737  001230  0E3F               	movlw	63
  3738  001232  6E24               	movwf	___flmul@f2+3,c
  3739  001234  ECD4  F00E         	call	___flmul	;wreg free
  3740  001238  C01D  F071         	movff	?___flmul,exp@x
  3741  00123C  C01E  F072         	movff	?___flmul+1,exp@x+1
  3742  001240  C01F  F073         	movff	?___flmul+2,exp@x+2
  3743  001244  C020  F074         	movff	?___flmul+3,exp@x+3
  3744  001248  C071  F067         	movff	exp@x,floor@x
  3745  00124C  C072  F068         	movff	exp@x+1,floor@x+1
  3746  001250  C073  F069         	movff	exp@x+2,floor@x+2
  3747  001254  C074  F06A         	movff	exp@x+3,floor@x+3
  3748  001258  EC09  F00D         	call	_floor	;wreg free
  3749  00125C  C067  F075         	movff	?_floor,_exp$1109
  3750  001260  C068  F076         	movff	?_floor+1,_exp$1109+1
  3751  001264  C069  F077         	movff	?_floor+2,_exp$1109+2
  3752  001268  C06A  F078         	movff	?_floor+3,_exp$1109+3
  3753  00126C  C075  F052         	movff	_exp$1109,___fltol@f1
  3754  001270  C076  F053         	movff	_exp$1109+1,___fltol@f1+1
  3755  001274  C077  F054         	movff	_exp$1109+2,___fltol@f1+2
  3756  001278  C078  F055         	movff	_exp$1109+3,___fltol@f1+3
  3757  00127C  ECE9  F010         	call	___fltol	;wreg free
  3758  001280  C052  F079         	movff	?___fltol,exp@exponent
  3759  001284  C053  F07A         	movff	?___fltol+1,exp@exponent+1
  3760                           
  3761                           ; BSR set to: 0
  3762  001288  C071  F038         	movff	exp@x,___flsub@f1
  3763  00128C  C072  F039         	movff	exp@x+1,___flsub@f1+1
  3764  001290  C073  F03A         	movff	exp@x+2,___flsub@f1+2
  3765  001294  C074  F03B         	movff	exp@x+3,___flsub@f1+3
  3766  001298  C079  F00E         	movff	exp@exponent,___awtofl@c
  3767  00129C  C07A  F00F         	movff	exp@exponent+1,___awtofl@c+1
  3768  0012A0  EC2F  F013         	call	___awtofl	;wreg free
  3769  0012A4  C00E  F03C         	movff	?___awtofl,___flsub@f2
  3770  0012A8  C00F  F03D         	movff	?___awtofl+1,___flsub@f2+1
  3771  0012AC  C010  F03E         	movff	?___awtofl+2,___flsub@f2+2
  3772  0012B0  C011  F03F         	movff	?___awtofl+3,___flsub@f2+3
  3773  0012B4  ECEE  F012         	call	___flsub	;wreg free
  3774  0012B8  C038  F071         	movff	?___flsub,exp@x
  3775  0012BC  C039  F072         	movff	?___flsub+1,exp@x+1
  3776  0012C0  C03A  F073         	movff	?___flsub+2,exp@x+2
  3777  0012C4  C03B  F074         	movff	?___flsub+3,exp@x+3
  3778  0012C8  C071  F038         	movff	exp@x,eval_poly@x
  3779  0012CC  C072  F039         	movff	exp@x+1,eval_poly@x+1
  3780  0012D0  C073  F03A         	movff	exp@x+2,eval_poly@x+2
  3781  0012D4  C074  F03B         	movff	exp@x+3,eval_poly@x+3
  3782  0012D8  0E01               	movlw	low exp@coeff
  3783  0012DA  6E3C               	movwf	eval_poly@d,c
  3784  0012DC  6A3E               	clrf	eval_poly@n+1,c
  3785  0012DE  0E09               	movlw	9
  3786  0012E0  6E3D               	movwf	eval_poly@n,c
  3787  0012E2  ECEF  F00F         	call	_eval_poly	;wreg free
  3788  0012E6  C038  F044         	movff	?_eval_poly,ldexp@value
  3789  0012EA  C039  F045         	movff	?_eval_poly+1,ldexp@value+1
  3790  0012EE  C03A  F046         	movff	?_eval_poly+2,ldexp@value+2
  3791  0012F2  C03B  F047         	movff	?_eval_poly+3,ldexp@value+3
  3792  0012F6  C079  F048         	movff	exp@exponent,ldexp@newexp
  3793  0012FA  C07A  F049         	movff	exp@exponent+1,ldexp@newexp+1
  3794  0012FE  EC98  F010         	call	_ldexp	;wreg free
  3795  001302  C044  F071         	movff	?_ldexp,exp@x
  3796  001306  C045  F072         	movff	?_ldexp+1,exp@x+1
  3797  00130A  C046  F073         	movff	?_ldexp+2,exp@x+2
  3798  00130E  C047  F074         	movff	?_ldexp+3,exp@x+3
  3799  001312  0100               	movlb	0	; () banked
  3800  001314  517B               	movf	exp@sign& (0+255),w,b
  3801  001316  E029               	bz	l1181
  3802                           
  3803                           ; BSR set to: 0
  3804  001318  2971               	incf	exp@x& (0+255),w,b
  3805  00131A  E10D               	bnz	l3890
  3806  00131C  2972               	incf	(exp@x+1)& (0+255),w,b
  3807  00131E  E10B               	bnz	l3890
  3808  001320  0E7F               	movlw	127
  3809  001322  1973               	xorwf	(exp@x+2)& (0+255),w,b
  3810  001324  E108               	bnz	l3890
  3811  001326  0E7F               	movlw	127
  3812  001328  1974               	xorwf	(exp@x+3)& (0+255),w,b
  3813  00132A  E105               	bnz	l3890
  3814                           
  3815                           ; BSR set to: 0
  3816  00132C  6B71               	clrf	?_exp& (0+255),b
  3817  00132E  6B72               	clrf	(?_exp+1)& (0+255),b
  3818  001330  6B73               	clrf	(?_exp+2)& (0+255),b
  3819  001332  6B74               	clrf	(?_exp+3)& (0+255),b
  3820  001334  0012               	return	
  3821  001336                     l3890:
  3822                           
  3823                           ; BSR set to: 0
  3824  001336  0E00               	movlw	0
  3825  001338  6E0E               	movwf	___fldiv@f1,c
  3826  00133A  6E0F               	movwf	___fldiv@f1+1,c
  3827  00133C  0E80               	movlw	128
  3828  00133E  6E10               	movwf	___fldiv@f1+2,c
  3829  001340  0E3F               	movlw	63
  3830  001342  6E11               	movwf	___fldiv@f1+3,c
  3831  001344  C071  F012         	movff	exp@x,___fldiv@f2
  3832  001348  C072  F013         	movff	exp@x+1,___fldiv@f2+1
  3833  00134C  C073  F014         	movff	exp@x+2,___fldiv@f2+2
  3834  001350  C074  F015         	movff	exp@x+3,___fldiv@f2+3
  3835  001354  EC97  F00F         	call	___fldiv	;wreg free
  3836  001358  C00E  F071         	movff	?___fldiv,?_exp
  3837  00135C  C00F  F072         	movff	?___fldiv+1,?_exp+1
  3838  001360  C010  F073         	movff	?___fldiv+2,?_exp+2
  3839  001364  C011  F074         	movff	?___fldiv+3,?_exp+3
  3840  001368  0012               	return	
  3841  00136A                     l1181:
  3842                           
  3843                           ; BSR set to: 0
  3844  00136A  C071  F071         	movff	exp@x,?_exp
  3845  00136E  C072  F072         	movff	exp@x+1,?_exp+1
  3846  001372  C073  F073         	movff	exp@x+2,?_exp+2
  3847  001376  C074  F074         	movff	exp@x+3,?_exp+3
  3848  00137A  0012               	return		;funcret
  3849  00137C                     __end_of_exp:
  3850                           	opt stack 0
  3851                           tblptru	equ	0xFF8
  3852                           tblptrh	equ	0xFF7
  3853                           tblptrl	equ	0xFF6
  3854                           tablat	equ	0xFF5
  3855                           prodl	equ	0xFF3
  3856                           intcon	equ	0xFF2
  3857                           intcon2	equ	0xFF1
  3858                           postinc0	equ	0xFEE
  3859                           wreg	equ	0xFE8
  3860                           postdec1	equ	0xFE5
  3861                           fsr1l	equ	0xFE1
  3862                           indf2	equ	0xFDF
  3863                           postinc2	equ	0xFDE
  3864                           postdec2	equ	0xFDD
  3865                           fsr2h	equ	0xFDA
  3866                           fsr2l	equ	0xFD9
  3867                           status	equ	0xFD8
  3868                           
  3869 ;; *************** function _ldexp *****************
  3870 ;; Defined at:
  3871 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  3872 ;; Parameters:    Size  Location     Type
  3873 ;;  value           4   67[COMRAM] unsigned char 
  3874 ;;  newexp          2   71[COMRAM] int 
  3875 ;; Auto vars:     Size  Location     Type
  3876 ;;		None
  3877 ;; Return value:  Size  Location     Type
  3878 ;;                  4   67[COMRAM] int 
  3879 ;; Registers used:
  3880 ;;		wreg, status,2, status,0
  3881 ;; Tracked objects:
  3882 ;;		On entry : 0/0
  3883 ;;		On exit  : 0/0
  3884 ;;		Unchanged: 0/0
  3885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3886 ;;      Params:         6       0       0       0       0       0       0       0       0
  3887 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3888 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3889 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3890 ;;Total ram usage:        8 bytes
  3891 ;; Hardware stack levels used:    1
  3892 ;; Hardware stack levels required when called:    1
  3893 ;; This function calls:
  3894 ;;		Nothing
  3895 ;; This function is called by:
  3896 ;;		_exp
  3897 ;; This function uses a non-reentrant model
  3898 ;;
  3899                           
  3900                           	psect	text12
  3901  002130                     __ptext12:
  3902                           	opt stack 0
  3903  002130                     _ldexp:
  3904                           	opt stack 25
  3905                           
  3906                           ;incstack = 0
  3907  002130  5044               	movf	ldexp@value,w,c
  3908  002132  1045               	iorwf	ldexp@value+1,w,c
  3909  002134  1046               	iorwf	ldexp@value+2,w,c
  3910  002136  1047               	iorwf	ldexp@value+3,w,c
  3911  002138  E105               	bnz	l2752
  3912  00213A  6A44               	clrf	?_ldexp,c
  3913  00213C  6A45               	clrf	?_ldexp+1,c
  3914  00213E  6A46               	clrf	?_ldexp+2,c
  3915  002140  6A47               	clrf	?_ldexp+3,c
  3916  002142  0012               	return	
  3917  002144                     l2752:
  3918  002144  5047               	movf	ldexp@value+3,w,c
  3919  002146  0B7F               	andlw	127
  3920  002148  6E4A               	movwf	??_ldexp& (0+255),c
  3921  00214A  6A4B               	clrf	(??_ldexp+1)& (0+255),c
  3922  00214C  90D8               	bcf	status,0,c
  3923  00214E  364A               	rlcf	??_ldexp,f,c
  3924  002150  364B               	rlcf	??_ldexp+1,f,c
  3925  002152  504A               	movf	??_ldexp,w,c
  3926  002154  2648               	addwf	ldexp@newexp,f,c
  3927  002156  504B               	movf	??_ldexp+1,w,c
  3928  002158  2249               	addwfc	ldexp@newexp+1,f,c
  3929  00215A  0E01               	movlw	1
  3930  00215C  AE46               	btfss	ldexp@value+2,7,c
  3931  00215E  0E00               	movlw	0
  3932  002160  2648               	addwf	ldexp@newexp,f,c
  3933  002162  0E00               	movlw	0
  3934  002164  2249               	addwfc	ldexp@newexp+1,f,c
  3935  002166  AE49               	btfss	ldexp@newexp+1,7,c
  3936  002168  D005               	goto	l2758
  3937  00216A  6A44               	clrf	?_ldexp,c
  3938  00216C  6A45               	clrf	?_ldexp+1,c
  3939  00216E  6A46               	clrf	?_ldexp+2,c
  3940  002170  6A47               	clrf	?_ldexp+3,c
  3941  002172  0012               	return	
  3942  002174                     l2758:
  3943  002174  BE49               	btfsc	ldexp@newexp+1,7,c
  3944  002176  D010               	goto	l2772
  3945  002178  0449               	decf	ldexp@newexp+1,w,c
  3946  00217A  E30E               	bnc	l2772
  3947  00217C  AE47               	btfss	ldexp@value+3,7,c
  3948  00217E  D006               	goto	l2768
  3949  002180  6844               	setf	?_ldexp,c
  3950  002182  6845               	setf	?_ldexp+1,c
  3951  002184  0E7F               	movlw	127
  3952  002186  6E46               	movwf	?_ldexp+2,c
  3953  002188  6847               	setf	?_ldexp+3,c
  3954  00218A  0CFF               	retlw	255
  3955  00218C                     l2768:
  3956  00218C  6844               	setf	?_ldexp,c
  3957  00218E  6845               	setf	?_ldexp+1,c
  3958  002190  0E7F               	movlw	127
  3959  002192  6E46               	movwf	?_ldexp+2,c
  3960  002194  6E47               	movwf	?_ldexp+3,c
  3961  002196  0C7F               	retlw	127
  3962  002198                     l2772:
  3963  002198  3449               	rlcf	ldexp@newexp+1,w,c
  3964  00219A  3049               	rrcf	ldexp@newexp+1,w,c
  3965  00219C  6E4B               	movwf	(??_ldexp+1)& (0+255),c
  3966  00219E  3048               	rrcf	ldexp@newexp,w,c
  3967  0021A0  6E4A               	movwf	??_ldexp& (0+255),c
  3968  0021A2  1847               	xorwf	ldexp@value+3,w,c
  3969  0021A4  0B80               	andlw	-128
  3970  0021A6  184A               	xorwf	??_ldexp,w,c
  3971  0021A8  6E47               	movwf	ldexp@value+3,c
  3972  0021AA  C048  F04A         	movff	ldexp@newexp,??_ldexp
  3973  0021AE  0E01               	movlw	1
  3974  0021B0  164A               	andwf	??_ldexp,f,c
  3975  0021B2  324A               	rrcf	??_ldexp,f,c
  3976  0021B4  324A               	rrcf	??_ldexp,f,c
  3977  0021B6  5046               	movf	ldexp@value+2,w,c
  3978  0021B8  184A               	xorwf	??_ldexp,w,c
  3979  0021BA  0B7F               	andlw	-129
  3980  0021BC  184A               	xorwf	??_ldexp,w,c
  3981  0021BE  6E46               	movwf	ldexp@value+2,c
  3982  0021C0  C044  F044         	movff	ldexp@value,?_ldexp
  3983  0021C4  C045  F045         	movff	ldexp@value+1,?_ldexp+1
  3984  0021C8  C046  F046         	movff	ldexp@value+2,?_ldexp+2
  3985  0021CC  C047  F047         	movff	ldexp@value+3,?_ldexp+3
  3986  0021D0  0012               	return		;funcret
  3987  0021D2                     __end_of_ldexp:
  3988                           	opt stack 0
  3989                           tblptru	equ	0xFF8
  3990                           tblptrh	equ	0xFF7
  3991                           tblptrl	equ	0xFF6
  3992                           tablat	equ	0xFF5
  3993                           prodl	equ	0xFF3
  3994                           intcon	equ	0xFF2
  3995                           intcon2	equ	0xFF1
  3996                           postinc0	equ	0xFEE
  3997                           wreg	equ	0xFE8
  3998                           postdec1	equ	0xFE5
  3999                           fsr1l	equ	0xFE1
  4000                           indf2	equ	0xFDF
  4001                           postinc2	equ	0xFDE
  4002                           postdec2	equ	0xFDD
  4003                           fsr2h	equ	0xFDA
  4004                           fsr2l	equ	0xFD9
  4005                           status	equ	0xFD8
  4006                           
  4007 ;; *************** function _floor *****************
  4008 ;; Defined at:
  4009 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\floor.c"
  4010 ;; Parameters:    Size  Location     Type
  4011 ;;  x               4    7[BANK0 ] int 
  4012 ;; Auto vars:     Size  Location     Type
  4013 ;;  i               4   11[BANK0 ] int 
  4014 ;;  expon           2   15[BANK0 ] int 
  4015 ;; Return value:  Size  Location     Type
  4016 ;;                  4    7[BANK0 ] int 
  4017 ;; Registers used:
  4018 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4019 ;; Tracked objects:
  4020 ;;		On entry : 0/0
  4021 ;;		On exit  : 0/0
  4022 ;;		Unchanged: 0/0
  4023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4024 ;;      Params:         0       4       0       0       0       0       0       0       0
  4025 ;;      Locals:         0       6       0       0       0       0       0       0       0
  4026 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4027 ;;      Totals:         0      10       0       0       0       0       0       0       0
  4028 ;;Total ram usage:       10 bytes
  4029 ;; Hardware stack levels used:    1
  4030 ;; Hardware stack levels required when called:    3
  4031 ;; This function calls:
  4032 ;;		___altofl
  4033 ;;		___fladd
  4034 ;;		___flge
  4035 ;;		___fltol
  4036 ;;		_frexp
  4037 ;; This function is called by:
  4038 ;;		_format_double
  4039 ;;		_exp
  4040 ;; This function uses a non-reentrant model
  4041 ;;
  4042                           
  4043                           	psect	text13
  4044  001A12                     __ptext13:
  4045                           	opt stack 0
  4046  001A12                     _floor:
  4047                           	opt stack 23
  4048                           
  4049                           ;incstack = 0
  4050  001A12  C067  F004         	movff	floor@x,frexp@value
  4051  001A16  C068  F005         	movff	floor@x+1,frexp@value+1
  4052  001A1A  C069  F006         	movff	floor@x+2,frexp@value+2
  4053  001A1E  C06A  F007         	movff	floor@x+3,frexp@value+3
  4054  001A22  0E6F               	movlw	low floor@expon
  4055  001A24  6E08               	movwf	frexp@eptr,c
  4056  001A26  EC38  F011         	call	_frexp	;wreg free
  4057  001A2A  0100               	movlb	0	; () banked
  4058  001A2C  AF70               	btfss	(floor@expon+1)& (0+255),7,b
  4059  001A2E  D00F               	goto	l3762
  4060                           
  4061                           ; BSR set to: 0
  4062  001A30  AF6A               	btfss	(floor@x+3)& (0+255),7,b
  4063  001A32  D008               	goto	l881
  4064                           
  4065                           ; BSR set to: 0
  4066  001A34  0E00               	movlw	0
  4067  001A36  6F67               	movwf	?_floor& (0+255),b
  4068  001A38  6F68               	movwf	(?_floor+1)& (0+255),b
  4069  001A3A  0E80               	movlw	128
  4070  001A3C  6F69               	movwf	(?_floor+2)& (0+255),b
  4071  001A3E  0EBF               	movlw	191
  4072  001A40  6F6A               	movwf	(?_floor+3)& (0+255),b
  4073  001A42  0CBF               	retlw	191
  4074  001A44                     l881:
  4075                           
  4076                           ; BSR set to: 0
  4077  001A44  6B67               	clrf	?_floor& (0+255),b
  4078  001A46  6B68               	clrf	(?_floor+1)& (0+255),b
  4079  001A48  6B69               	clrf	(?_floor+2)& (0+255),b
  4080  001A4A  6B6A               	clrf	(?_floor+3)& (0+255),b
  4081  001A4C  0012               	return	
  4082  001A4E                     l3762:
  4083                           
  4084                           ; BSR set to: 0
  4085  001A4E  5170               	movf	(floor@expon+1)& (0+255),w,b
  4086  001A50  E103               	bnz	u3040
  4087  001A52  0E1D               	movlw	29
  4088  001A54  5D6F               	subwf	floor@expon& (0+255),w,b
  4089  001A56  E309               	bnc	l3766
  4090  001A58                     u3040:
  4091                           
  4092                           ; BSR set to: 0
  4093  001A58  C067  F067         	movff	floor@x,?_floor
  4094  001A5C  C068  F068         	movff	floor@x+1,?_floor+1
  4095  001A60  C069  F069         	movff	floor@x+2,?_floor+2
  4096  001A64  C06A  F06A         	movff	floor@x+3,?_floor+3
  4097  001A68  0012               	return	
  4098  001A6A                     l3766:
  4099                           
  4100                           ; BSR set to: 0
  4101  001A6A  C067  F052         	movff	floor@x,___fltol@f1
  4102  001A6E  C068  F053         	movff	floor@x+1,___fltol@f1+1
  4103  001A72  C069  F054         	movff	floor@x+2,___fltol@f1+2
  4104  001A76  C06A  F055         	movff	floor@x+3,___fltol@f1+3
  4105  001A7A  ECE9  F010         	call	___fltol	;wreg free
  4106  001A7E  C052  F062         	movff	?___fltol,___altofl@c
  4107  001A82  C053  F063         	movff	?___fltol+1,___altofl@c+1
  4108  001A86  C054  F064         	movff	?___fltol+2,___altofl@c+2
  4109  001A8A  C055  F065         	movff	?___fltol+3,___altofl@c+3
  4110  001A8E  ECCA  F012         	call	___altofl	;wreg free
  4111  001A92  C062  F06B         	movff	?___altofl,floor@i
  4112  001A96  C063  F06C         	movff	?___altofl+1,floor@i+1
  4113  001A9A  C064  F06D         	movff	?___altofl+2,floor@i+2
  4114  001A9E  C065  F06E         	movff	?___altofl+3,floor@i+3
  4115  001AA2  C067  F004         	movff	floor@x,___flge@ff1
  4116  001AA6  C068  F005         	movff	floor@x+1,___flge@ff1+1
  4117  001AAA  C069  F006         	movff	floor@x+2,___flge@ff1+2
  4118  001AAE  C06A  F007         	movff	floor@x+3,___flge@ff1+3
  4119  001AB2  C06B  F008         	movff	floor@i,___flge@ff2
  4120  001AB6  C06C  F009         	movff	floor@i+1,___flge@ff2+1
  4121  001ABA  C06D  F00A         	movff	floor@i+2,___flge@ff2+2
  4122  001ABE  C06E  F00B         	movff	floor@i+3,___flge@ff2+3
  4123  001AC2  EC35  F012         	call	___flge	;wreg free
  4124  001AC6  E215               	bc	l884
  4125  001AC8  C06B  F02C         	movff	floor@i,___fladd@f1
  4126  001ACC  C06C  F02D         	movff	floor@i+1,___fladd@f1+1
  4127  001AD0  C06D  F02E         	movff	floor@i+2,___fladd@f1+2
  4128  001AD4  C06E  F02F         	movff	floor@i+3,___fladd@f1+3
  4129  001AD8  EC84  F00C         	call	PL26	;call to abstracted procedure
  4130  001ADC  EC4B  F00B         	call	___fladd	;wreg free
  4131  001AE0  C02C  F067         	movff	?___fladd,?_floor
  4132  001AE4  C02D  F068         	movff	?___fladd+1,?_floor+1
  4133  001AE8  C02E  F069         	movff	?___fladd+2,?_floor+2
  4134  001AEC  C02F  F06A         	movff	?___fladd+3,?_floor+3
  4135  001AF0  0012               	return	
  4136  001AF2                     l884:
  4137  001AF2  C06B  F067         	movff	floor@i,?_floor
  4138  001AF6  C06C  F068         	movff	floor@i+1,?_floor+1
  4139  001AFA  C06D  F069         	movff	floor@i+2,?_floor+2
  4140  001AFE  C06E  F06A         	movff	floor@i+3,?_floor+3
  4141  001B02  0012               	return		;funcret
  4142  001B04                     __end_of_floor:
  4143                           	opt stack 0
  4144                           tblptru	equ	0xFF8
  4145                           tblptrh	equ	0xFF7
  4146                           tblptrl	equ	0xFF6
  4147                           tablat	equ	0xFF5
  4148                           prodl	equ	0xFF3
  4149                           intcon	equ	0xFF2
  4150                           intcon2	equ	0xFF1
  4151                           postinc0	equ	0xFEE
  4152                           wreg	equ	0xFE8
  4153                           postdec1	equ	0xFE5
  4154                           fsr1l	equ	0xFE1
  4155                           indf2	equ	0xFDF
  4156                           postinc2	equ	0xFDE
  4157                           postdec2	equ	0xFDD
  4158                           fsr2h	equ	0xFDA
  4159                           fsr2l	equ	0xFD9
  4160                           status	equ	0xFD8
  4161                           
  4162 ;; *************** function ___fltol *****************
  4163 ;; Defined at:
  4164 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fltol.c"
  4165 ;; Parameters:    Size  Location     Type
  4166 ;;  f1              4   81[COMRAM] int 
  4167 ;; Auto vars:     Size  Location     Type
  4168 ;;  exp1            1    1[BANK0 ] unsigned char 
  4169 ;;  sign1           1    0[BANK0 ] unsigned char 
  4170 ;; Return value:  Size  Location     Type
  4171 ;;                  4   81[COMRAM] long 
  4172 ;; Registers used:
  4173 ;;		wreg, status,2, status,0
  4174 ;; Tracked objects:
  4175 ;;		On entry : 0/0
  4176 ;;		On exit  : F/0
  4177 ;;		Unchanged: 0/0
  4178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4179 ;;      Params:         4       0       0       0       0       0       0       0       0
  4180 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4181 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4182 ;;      Totals:         8       2       0       0       0       0       0       0       0
  4183 ;;Total ram usage:       10 bytes
  4184 ;; Hardware stack levels used:    1
  4185 ;; Hardware stack levels required when called:    1
  4186 ;; This function calls:
  4187 ;;		Nothing
  4188 ;; This function is called by:
  4189 ;;		_format_double
  4190 ;;		_measure_capacitance
  4191 ;;		_measure_inductance
  4192 ;;		_floor
  4193 ;;		_pow
  4194 ;;		_exp
  4195 ;; This function uses a non-reentrant model
  4196 ;;
  4197                           
  4198                           	psect	text14
  4199  0021D2                     __ptext14:
  4200                           	opt stack 0
  4201  0021D2                     ___fltol:
  4202                           	opt stack 28
  4203                           
  4204                           ;incstack = 0
  4205  0021D2  3454               	rlcf	___fltol@f1+2,w,c
  4206  0021D4  3455               	rlcf	___fltol@f1+3,w,c
  4207  0021D6  0100               	movlb	0	; () banked
  4208  0021D8  6F61               	movwf	___fltol@exp1& (0+255),b
  4209  0021DA  5161               	movf	___fltol@exp1& (0+255),w,b
  4210  0021DC  E105               	bnz	l3718
  4211  0021DE                     l3716:
  4212                           
  4213                           ; BSR set to: 0
  4214  0021DE  6A52               	clrf	?___fltol,c
  4215  0021E0  6A53               	clrf	?___fltol+1,c
  4216  0021E2  6A54               	clrf	?___fltol+2,c
  4217  0021E4  6A55               	clrf	?___fltol+3,c
  4218  0021E6  0012               	return	
  4219  0021E8                     l3718:
  4220                           
  4221                           ; BSR set to: 0
  4222  0021E8  C052  F056         	movff	___fltol@f1,??___fltol
  4223  0021EC  C053  F057         	movff	___fltol@f1+1,??___fltol+1
  4224  0021F0  C054  F058         	movff	___fltol@f1+2,??___fltol+2
  4225  0021F4  C055  F059         	movff	___fltol@f1+3,??___fltol+3
  4226  0021F8  0E20               	movlw	32
  4227  0021FA  D005               	goto	u2960
  4228  0021FC                     u2965:
  4229  0021FC  90D8               	bcf	status,0,c
  4230  0021FE  3259               	rrcf	??___fltol+3,f,c
  4231  002200  3258               	rrcf	??___fltol+2,f,c
  4232  002202  3257               	rrcf	??___fltol+1,f,c
  4233  002204  3256               	rrcf	??___fltol,f,c
  4234  002206                     u2960:
  4235  002206  2EE8               	decfsz	wreg,f,c
  4236  002208  D7F9               	goto	u2965
  4237  00220A  5056               	movf	??___fltol,w,c
  4238  00220C  6F60               	movwf	___fltol@sign1& (0+255),b
  4239                           
  4240                           ; BSR set to: 0
  4241  00220E  8E54               	bsf	___fltol@f1+2,7,c
  4242                           
  4243                           ; BSR set to: 0
  4244  002210  6A55               	clrf	___fltol@f1+3,c
  4245                           
  4246                           ; BSR set to: 0
  4247  002212  0E96               	movlw	150
  4248  002214  5F61               	subwf	___fltol@exp1& (0+255),f,b
  4249                           
  4250                           ; BSR set to: 0
  4251  002216  AF61               	btfss	___fltol@exp1& (0+255),7,b
  4252  002218  D00C               	goto	l3736
  4253                           
  4254                           ; BSR set to: 0
  4255  00221A  5161               	movf	___fltol@exp1& (0+255),w,b
  4256  00221C  0A80               	xorlw	128
  4257  00221E  0F97               	addlw	151
  4258  002220  E3DE               	bnc	l3716
  4259  002222                     l3732:
  4260                           
  4261                           ; BSR set to: 0
  4262  002222  90D8               	bcf	status,0,c
  4263  002224  3255               	rrcf	___fltol@f1+3,f,c
  4264  002226  3254               	rrcf	___fltol@f1+2,f,c
  4265  002228  3253               	rrcf	___fltol@f1+1,f,c
  4266  00222A  3252               	rrcf	___fltol@f1,f,c
  4267                           
  4268                           ; BSR set to: 0
  4269  00222C  3F61               	incfsz	___fltol@exp1& (0+255),f,b
  4270  00222E  D7F9               	goto	l3732
  4271  002230  D00C               	goto	l3744
  4272  002232                     l3736:
  4273                           
  4274                           ; BSR set to: 0
  4275  002232  0E1F               	movlw	31
  4276  002234  6561               	cpfsgt	___fltol@exp1& (0+255),b
  4277  002236  D007               	goto	l3742
  4278  002238  D7D2               	goto	l3716
  4279  00223A                     l3740:
  4280                           
  4281                           ; BSR set to: 0
  4282  00223A  90D8               	bcf	status,0,c
  4283  00223C  3652               	rlcf	___fltol@f1,f,c
  4284  00223E  3653               	rlcf	___fltol@f1+1,f,c
  4285  002240  3654               	rlcf	___fltol@f1+2,f,c
  4286  002242  3655               	rlcf	___fltol@f1+3,f,c
  4287  002244  0761               	decf	___fltol@exp1& (0+255),f,b
  4288  002246                     l3742:
  4289                           
  4290                           ; BSR set to: 0
  4291  002246  5161               	movf	___fltol@exp1& (0+255),w,b
  4292  002248  E1F8               	bnz	l3740
  4293  00224A                     l3744:
  4294                           
  4295                           ; BSR set to: 0
  4296  00224A  5160               	movf	___fltol@sign1& (0+255),w,b
  4297  00224C  E008               	bz	l3748
  4298                           
  4299                           ; BSR set to: 0
  4300  00224E  1E55               	comf	___fltol@f1+3,f,c
  4301  002250  1E54               	comf	___fltol@f1+2,f,c
  4302  002252  1E53               	comf	___fltol@f1+1,f,c
  4303  002254  6C52               	negf	___fltol@f1,c
  4304  002256  0E00               	movlw	0
  4305  002258  2253               	addwfc	___fltol@f1+1,f,c
  4306  00225A  2254               	addwfc	___fltol@f1+2,f,c
  4307  00225C  2255               	addwfc	___fltol@f1+3,f,c
  4308  00225E                     l3748:
  4309                           
  4310                           ; BSR set to: 0
  4311  00225E  C052  F052         	movff	___fltol@f1,?___fltol
  4312  002262  C053  F053         	movff	___fltol@f1+1,?___fltol+1
  4313  002266  C054  F054         	movff	___fltol@f1+2,?___fltol+2
  4314  00226A  C055  F055         	movff	___fltol@f1+3,?___fltol+3
  4315                           
  4316                           ; BSR set to: 0
  4317  00226E  0012               	return		;funcret
  4318  002270                     __end_of___fltol:
  4319                           	opt stack 0
  4320                           tblptru	equ	0xFF8
  4321                           tblptrh	equ	0xFF7
  4322                           tblptrl	equ	0xFF6
  4323                           tablat	equ	0xFF5
  4324                           prodl	equ	0xFF3
  4325                           intcon	equ	0xFF2
  4326                           intcon2	equ	0xFF1
  4327                           postinc0	equ	0xFEE
  4328                           wreg	equ	0xFE8
  4329                           postdec1	equ	0xFE5
  4330                           fsr1l	equ	0xFE1
  4331                           indf2	equ	0xFDF
  4332                           postinc2	equ	0xFDE
  4333                           postdec2	equ	0xFDD
  4334                           fsr2h	equ	0xFDA
  4335                           fsr2l	equ	0xFD9
  4336                           status	equ	0xFD8
  4337                           
  4338 ;; *************** function ___flge *****************
  4339 ;; Defined at:
  4340 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flge.c"
  4341 ;; Parameters:    Size  Location     Type
  4342 ;;  ff1             4    3[COMRAM] long 
  4343 ;;  ff2             4    7[COMRAM] long 
  4344 ;; Auto vars:     Size  Location     Type
  4345 ;;		None
  4346 ;; Return value:  Size  Location     Type
  4347 ;;		None               void
  4348 ;; Registers used:
  4349 ;;		wreg, status,2, status,0
  4350 ;; Tracked objects:
  4351 ;;		On entry : 0/0
  4352 ;;		On exit  : 0/0
  4353 ;;		Unchanged: 0/0
  4354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4355 ;;      Params:         8       0       0       0       0       0       0       0       0
  4356 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4357 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4358 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4359 ;;Total ram usage:        8 bytes
  4360 ;; Hardware stack levels used:    1
  4361 ;; Hardware stack levels required when called:    1
  4362 ;; This function calls:
  4363 ;;		Nothing
  4364 ;; This function is called by:
  4365 ;;		_format_double
  4366 ;;		_measure_capacitance
  4367 ;;		_measure_inductance
  4368 ;;		_floor
  4369 ;;		_pow
  4370 ;;		_exp
  4371 ;; This function uses a non-reentrant model
  4372 ;;
  4373                           
  4374                           	psect	text15
  4375  00246A                     __ptext15:
  4376                           	opt stack 0
  4377  00246A                     ___flge:
  4378                           	opt stack 28
  4379                           
  4380                           ; BSR set to: 0
  4381                           ;incstack = 0
  4382  00246A  AE07               	btfss	___flge@ff1+3,7,c
  4383  00246C  D009               	goto	l2576
  4384  00246E  6C04               	negf	___flge@ff1,c
  4385  002470  1E05               	comf	___flge@ff1+1,f,c
  4386  002472  B0D8               	btfsc	status,0,c
  4387  002474  2A05               	incf	___flge@ff1+1,f,c
  4388  002476  1E06               	comf	___flge@ff1+2,f,c
  4389  002478  B0D8               	btfsc	status,0,c
  4390  00247A  2A06               	incf	___flge@ff1+2,f,c
  4391  00247C  0E80               	movlw	128
  4392  00247E  5607               	subfwb	___flge@ff1+3,f,c
  4393  002480                     l2576:
  4394  002480  AE0B               	btfss	___flge@ff2+3,7,c
  4395  002482  D009               	goto	l838
  4396  002484  6C08               	negf	___flge@ff2,c
  4397  002486  1E09               	comf	___flge@ff2+1,f,c
  4398  002488  B0D8               	btfsc	status,0,c
  4399  00248A  2A09               	incf	___flge@ff2+1,f,c
  4400  00248C  1E0A               	comf	___flge@ff2+2,f,c
  4401  00248E  B0D8               	btfsc	status,0,c
  4402  002490  2A0A               	incf	___flge@ff2+2,f,c
  4403  002492  0E80               	movlw	128
  4404  002494  560B               	subfwb	___flge@ff2+3,f,c
  4405  002496                     l838:
  4406  002496  0E80               	movlw	128
  4407  002498  1A07               	xorwf	___flge@ff1+3,f,c
  4408  00249A  1A0B               	xorwf	___flge@ff2+3,f,c
  4409  00249C  5008               	movf	___flge@ff2,w,c
  4410  00249E  5C04               	subwf	___flge@ff1,w,c
  4411  0024A0  5009               	movf	___flge@ff2+1,w,c
  4412  0024A2  5805               	subwfb	___flge@ff1+1,w,c
  4413  0024A4  500A               	movf	___flge@ff2+2,w,c
  4414  0024A6  5806               	subwfb	___flge@ff1+2,w,c
  4415  0024A8  500B               	movf	___flge@ff2+3,w,c
  4416  0024AA  5807               	subwfb	___flge@ff1+3,w,c
  4417  0024AC  E202               	bc	l2582
  4418  0024AE  90D8               	bcf	status,0,c
  4419  0024B0  0012               	return	
  4420  0024B2                     l2582:
  4421  0024B2  80D8               	bsf	status,0,c
  4422  0024B4  0012               	return		;funcret
  4423  0024B6                     __end_of___flge:
  4424                           	opt stack 0
  4425                           tblptru	equ	0xFF8
  4426                           tblptrh	equ	0xFF7
  4427                           tblptrl	equ	0xFF6
  4428                           tablat	equ	0xFF5
  4429                           prodl	equ	0xFF3
  4430                           intcon	equ	0xFF2
  4431                           intcon2	equ	0xFF1
  4432                           postinc0	equ	0xFEE
  4433                           wreg	equ	0xFE8
  4434                           postdec1	equ	0xFE5
  4435                           fsr1l	equ	0xFE1
  4436                           indf2	equ	0xFDF
  4437                           postinc2	equ	0xFDE
  4438                           postdec2	equ	0xFDD
  4439                           fsr2h	equ	0xFDA
  4440                           fsr2l	equ	0xFD9
  4441                           status	equ	0xFD8
  4442                           
  4443 ;; *************** function ___altofl *****************
  4444 ;; Defined at:
  4445 ;;		line 36 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\altofl.c"
  4446 ;; Parameters:    Size  Location     Type
  4447 ;;  c               4    2[BANK0 ] long 
  4448 ;; Auto vars:     Size  Location     Type
  4449 ;;  sign            1    6[BANK0 ] unsigned char 
  4450 ;; Return value:  Size  Location     Type
  4451 ;;                  4    2[BANK0 ] unsigned char 
  4452 ;; Registers used:
  4453 ;;		wreg, status,2, status,0, cstack
  4454 ;; Tracked objects:
  4455 ;;		On entry : F/0
  4456 ;;		On exit  : 0/0
  4457 ;;		Unchanged: 0/0
  4458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4459 ;;      Params:         0       4       0       0       0       0       0       0       0
  4460 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4461 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4462 ;;      Totals:         0       5       0       0       0       0       0       0       0
  4463 ;;Total ram usage:        5 bytes
  4464 ;; Hardware stack levels used:    1
  4465 ;; Hardware stack levels required when called:    2
  4466 ;; This function calls:
  4467 ;;		___flpack
  4468 ;; This function is called by:
  4469 ;;		_floor
  4470 ;; This function uses a non-reentrant model
  4471 ;;
  4472                           
  4473                           	psect	text16
  4474  002594                     __ptext16:
  4475                           	opt stack 0
  4476  002594                     ___altofl:
  4477                           	opt stack 23
  4478                           
  4479                           ; BSR set to: 0
  4480                           
  4481                           ;incstack = 0
  4482  002594  6B66               	clrf	___altofl@sign& (0+255),b
  4483                           
  4484                           ; BSR set to: 0
  4485  002596  AF65               	btfss	(___altofl@c+3)& (0+255),7,b
  4486  002598  D00A               	goto	l3598
  4487                           
  4488                           ; BSR set to: 0
  4489  00259A  1F65               	comf	(___altofl@c+3)& (0+255),f,b
  4490  00259C  1F64               	comf	(___altofl@c+2)& (0+255),f,b
  4491  00259E  1F63               	comf	(___altofl@c+1)& (0+255),f,b
  4492  0025A0  6D62               	negf	___altofl@c& (0+255),b
  4493  0025A2  0E00               	movlw	0
  4494  0025A4  2363               	addwfc	(___altofl@c+1)& (0+255),f,b
  4495  0025A6  2364               	addwfc	(___altofl@c+2)& (0+255),f,b
  4496  0025A8  2365               	addwfc	(___altofl@c+3)& (0+255),f,b
  4497                           
  4498                           ; BSR set to: 0
  4499  0025AA  0E01               	movlw	1
  4500  0025AC  6F66               	movwf	___altofl@sign& (0+255),b
  4501  0025AE                     l3598:
  4502                           
  4503                           ; BSR set to: 0
  4504  0025AE  C062  F004         	movff	___altofl@c,___flpack@arg
  4505  0025B2  C063  F005         	movff	___altofl@c+1,___flpack@arg+1
  4506  0025B6  C064  F006         	movff	___altofl@c+2,___flpack@arg+2
  4507  0025BA  C065  F007         	movff	___altofl@c+3,___flpack@arg+3
  4508  0025BE  0E96               	movlw	150
  4509  0025C0  6E08               	movwf	___flpack@exp,c
  4510  0025C2  C066  F009         	movff	___altofl@sign,___flpack@sign
  4511  0025C6  EC36  F00F         	call	___flpack	;wreg free
  4512  0025CA  C004  F062         	movff	?___flpack,?___altofl
  4513  0025CE  C005  F063         	movff	?___flpack+1,?___altofl+1
  4514  0025D2  C006  F064         	movff	?___flpack+2,?___altofl+2
  4515  0025D6  C007  F065         	movff	?___flpack+3,?___altofl+3
  4516  0025DA  0012               	return		;funcret
  4517  0025DC                     __end_of___altofl:
  4518                           	opt stack 0
  4519                           tblptru	equ	0xFF8
  4520                           tblptrh	equ	0xFF7
  4521                           tblptrl	equ	0xFF6
  4522                           tablat	equ	0xFF5
  4523                           prodl	equ	0xFF3
  4524                           intcon	equ	0xFF2
  4525                           intcon2	equ	0xFF1
  4526                           postinc0	equ	0xFEE
  4527                           wreg	equ	0xFE8
  4528                           postdec1	equ	0xFE5
  4529                           fsr1l	equ	0xFE1
  4530                           indf2	equ	0xFDF
  4531                           postinc2	equ	0xFDE
  4532                           postdec2	equ	0xFDD
  4533                           fsr2h	equ	0xFDA
  4534                           fsr2l	equ	0xFD9
  4535                           status	equ	0xFD8
  4536                           
  4537 ;; *************** function ___flsub *****************
  4538 ;; Defined at:
  4539 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flsub.c"
  4540 ;; Parameters:    Size  Location     Type
  4541 ;;  f1              4   55[COMRAM] unsigned char 
  4542 ;;  f2              4   59[COMRAM] unsigned char 
  4543 ;; Auto vars:     Size  Location     Type
  4544 ;;		None
  4545 ;; Return value:  Size  Location     Type
  4546 ;;                  4   55[COMRAM] unsigned char 
  4547 ;; Registers used:
  4548 ;;		wreg, status,2, status,0, cstack
  4549 ;; Tracked objects:
  4550 ;;		On entry : 0/0
  4551 ;;		On exit  : 0/0
  4552 ;;		Unchanged: 0/0
  4553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4554 ;;      Params:         8       0       0       0       0       0       0       0       0
  4555 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4556 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4557 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4558 ;;Total ram usage:        8 bytes
  4559 ;; Hardware stack levels used:    1
  4560 ;; Hardware stack levels required when called:    3
  4561 ;; This function calls:
  4562 ;;		___fladd
  4563 ;; This function is called by:
  4564 ;;		_format_double
  4565 ;;		_measure_capacitance
  4566 ;;		_measure_inductance
  4567 ;;		_exp
  4568 ;; This function uses a non-reentrant model
  4569 ;;
  4570                           
  4571                           	psect	text17
  4572  0025DC                     __ptext17:
  4573                           	opt stack 0
  4574  0025DC                     ___flsub:
  4575                           	opt stack 26
  4576                           
  4577                           ;incstack = 0
  4578  0025DC  503C               	movf	___flsub@f2,w,c
  4579  0025DE  103D               	iorwf	___flsub@f2+1,w,c
  4580  0025E0  103E               	iorwf	___flsub@f2+2,w,c
  4581  0025E2  103F               	iorwf	___flsub@f2+3,w,c
  4582  0025E4  E002               	bz	l3812
  4583  0025E6  0E80               	movlw	128
  4584  0025E8  1A3F               	xorwf	___flsub@f2+3,f,c
  4585  0025EA                     l3812:
  4586  0025EA  C038  F02C         	movff	___flsub@f1,___fladd@f1
  4587  0025EE  C039  F02D         	movff	___flsub@f1+1,___fladd@f1+1
  4588  0025F2  C03A  F02E         	movff	___flsub@f1+2,___fladd@f1+2
  4589  0025F6  C03B  F02F         	movff	___flsub@f1+3,___fladd@f1+3
  4590  0025FA  C03C  F030         	movff	___flsub@f2,___fladd@f2
  4591  0025FE  C03D  F031         	movff	___flsub@f2+1,___fladd@f2+1
  4592  002602  C03E  F032         	movff	___flsub@f2+2,___fladd@f2+2
  4593  002606  C03F  F033         	movff	___flsub@f2+3,___fladd@f2+3
  4594  00260A  EC4B  F00B         	call	___fladd	;wreg free
  4595  00260E  C02C  F038         	movff	?___fladd,?___flsub
  4596  002612  C02D  F039         	movff	?___fladd+1,?___flsub+1
  4597  002616  C02E  F03A         	movff	?___fladd+2,?___flsub+2
  4598  00261A  C02F  F03B         	movff	?___fladd+3,?___flsub+3
  4599  00261E  0012               	return		;funcret
  4600  002620                     __end_of___flsub:
  4601                           	opt stack 0
  4602                           tblptru	equ	0xFF8
  4603                           tblptrh	equ	0xFF7
  4604                           tblptrl	equ	0xFF6
  4605                           tablat	equ	0xFF5
  4606                           prodl	equ	0xFF3
  4607                           intcon	equ	0xFF2
  4608                           intcon2	equ	0xFF1
  4609                           postinc0	equ	0xFEE
  4610                           wreg	equ	0xFE8
  4611                           postdec1	equ	0xFE5
  4612                           fsr1l	equ	0xFE1
  4613                           indf2	equ	0xFDF
  4614                           postinc2	equ	0xFDE
  4615                           postdec2	equ	0xFDD
  4616                           fsr2h	equ	0xFDA
  4617                           fsr2l	equ	0xFD9
  4618                           status	equ	0xFD8
  4619                           
  4620 ;; *************** function ___flneg *****************
  4621 ;; Defined at:
  4622 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flneg.c"
  4623 ;; Parameters:    Size  Location     Type
  4624 ;;  f1              4    3[COMRAM] unsigned char 
  4625 ;; Auto vars:     Size  Location     Type
  4626 ;;		None
  4627 ;; Return value:  Size  Location     Type
  4628 ;;                  4    3[COMRAM] unsigned char 
  4629 ;; Registers used:
  4630 ;;		wreg, status,2, status,0
  4631 ;; Tracked objects:
  4632 ;;		On entry : F/0
  4633 ;;		On exit  : F/0
  4634 ;;		Unchanged: F/0
  4635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4636 ;;      Params:         4       0       0       0       0       0       0       0       0
  4637 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4638 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4639 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4640 ;;Total ram usage:        4 bytes
  4641 ;; Hardware stack levels used:    1
  4642 ;; Hardware stack levels required when called:    1
  4643 ;; This function calls:
  4644 ;;		Nothing
  4645 ;; This function is called by:
  4646 ;;		_pow
  4647 ;;		_exp
  4648 ;; This function uses a non-reentrant model
  4649 ;;
  4650                           
  4651                           	psect	text18
  4652  0028A0                     __ptext18:
  4653                           	opt stack 0
  4654  0028A0                     ___flneg:
  4655                           	opt stack 25
  4656                           
  4657                           ; BSR set to: 0
  4658                           
  4659                           ;incstack = 0
  4660  0028A0  5004               	movf	___flneg@f1,w,c
  4661  0028A2  1005               	iorwf	___flneg@f1+1,w,c
  4662  0028A4  1006               	iorwf	___flneg@f1+2,w,c
  4663  0028A6  1007               	iorwf	___flneg@f1+3,w,c
  4664  0028A8  E002               	bz	l2744
  4665                           
  4666                           ; BSR set to: 0
  4667  0028AA  0E80               	movlw	128
  4668  0028AC  1A07               	xorwf	___flneg@f1+3,f,c
  4669  0028AE                     l2744:
  4670                           
  4671                           ; BSR set to: 0
  4672  0028AE  C004  F004         	movff	___flneg@f1,?___flneg
  4673  0028B2  C005  F005         	movff	___flneg@f1+1,?___flneg+1
  4674  0028B6  C006  F006         	movff	___flneg@f1+2,?___flneg+2
  4675  0028BA  C007  F007         	movff	___flneg@f1+3,?___flneg+3
  4676                           
  4677                           ; BSR set to: 0
  4678  0028BE  0012               	return		;funcret
  4679  0028C0                     __end_of___flneg:
  4680                           	opt stack 0
  4681                           tblptru	equ	0xFF8
  4682                           tblptrh	equ	0xFF7
  4683                           tblptrl	equ	0xFF6
  4684                           tablat	equ	0xFF5
  4685                           prodl	equ	0xFF3
  4686                           intcon	equ	0xFF2
  4687                           intcon2	equ	0xFF1
  4688                           postinc0	equ	0xFEE
  4689                           wreg	equ	0xFE8
  4690                           postdec1	equ	0xFE5
  4691                           fsr1l	equ	0xFE1
  4692                           indf2	equ	0xFDF
  4693                           postinc2	equ	0xFDE
  4694                           postdec2	equ	0xFDD
  4695                           fsr2h	equ	0xFDA
  4696                           fsr2l	equ	0xFD9
  4697                           status	equ	0xFD8
  4698                           
  4699 ;; *************** function ___fldiv *****************
  4700 ;; Defined at:
  4701 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldiv.c"
  4702 ;; Parameters:    Size  Location     Type
  4703 ;;  f1              4   13[COMRAM] unsigned char 
  4704 ;;  f2              4   17[COMRAM] unsigned char 
  4705 ;; Auto vars:     Size  Location     Type
  4706 ;;  f3              4   21[COMRAM] unsigned char 
  4707 ;;  sign            1   27[COMRAM] unsigned char 
  4708 ;;  exp             1   26[COMRAM] unsigned char 
  4709 ;;  cntr            1   25[COMRAM] unsigned char 
  4710 ;; Return value:  Size  Location     Type
  4711 ;;                  4   13[COMRAM] unsigned char 
  4712 ;; Registers used:
  4713 ;;		wreg, status,2, status,0, cstack
  4714 ;; Tracked objects:
  4715 ;;		On entry : 0/0
  4716 ;;		On exit  : 0/0
  4717 ;;		Unchanged: 0/0
  4718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4719 ;;      Params:         8       0       0       0       0       0       0       0       0
  4720 ;;      Locals:         7       0       0       0       0       0       0       0       0
  4721 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4722 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4723 ;;Total ram usage:       15 bytes
  4724 ;; Hardware stack levels used:    1
  4725 ;; Hardware stack levels required when called:    2
  4726 ;; This function calls:
  4727 ;;		___flpack
  4728 ;; This function is called by:
  4729 ;;		_format_double
  4730 ;;		_measure_capacitance
  4731 ;;		_measure_inductance
  4732 ;;		_exp
  4733 ;; This function uses a non-reentrant model
  4734 ;;
  4735                           
  4736                           	psect	text19
  4737  001F2E                     __ptext19:
  4738                           	opt stack 0
  4739  001F2E                     ___fldiv:
  4740                           	opt stack 27
  4741                           
  4742                           ; BSR set to: 0
  4743                           ;incstack = 0
  4744  001F2E  3410               	rlcf	___fldiv@f1+2,w,c
  4745  001F30  3411               	rlcf	___fldiv@f1+3,w,c
  4746  001F32  6E1B               	movwf	___fldiv@exp,c
  4747  001F34  501B               	movf	___fldiv@exp,w,c
  4748  001F36  E105               	bnz	l3776
  4749  001F38  6A0E               	clrf	?___fldiv,c
  4750  001F3A  6A0F               	clrf	?___fldiv+1,c
  4751  001F3C  6A10               	clrf	?___fldiv+2,c
  4752  001F3E  6A11               	clrf	?___fldiv+3,c
  4753  001F40  0012               	return	
  4754  001F42                     l3776:
  4755  001F42  3414               	rlcf	___fldiv@f2+2,w,c
  4756  001F44  3415               	rlcf	___fldiv@f2+3,w,c
  4757  001F46  6E1C               	movwf	___fldiv@sign,c
  4758  001F48  501C               	movf	___fldiv@sign,w,c
  4759  001F4A  E105               	bnz	l3780
  4760  001F4C  6A0E               	clrf	?___fldiv,c
  4761  001F4E  6A0F               	clrf	?___fldiv+1,c
  4762  001F50  6A10               	clrf	?___fldiv+2,c
  4763  001F52  6A11               	clrf	?___fldiv+3,c
  4764  001F54  0012               	return	
  4765  001F56                     l3780:
  4766  001F56  501C               	movf	___fldiv@sign,w,c
  4767  001F58  0F89               	addlw	137
  4768  001F5A  5E1B               	subwf	___fldiv@exp,f,c
  4769  001F5C  C011  F01C         	movff	___fldiv@f1+3,___fldiv@sign
  4770  001F60  5015               	movf	___fldiv@f2+3,w,c
  4771  001F62  1A1C               	xorwf	___fldiv@sign,f,c
  4772  001F64  0E80               	movlw	128
  4773  001F66  161C               	andwf	___fldiv@sign,f,c
  4774  001F68  8E10               	bsf	___fldiv@f1+2,7,c
  4775  001F6A  6A11               	clrf	___fldiv@f1+3,c
  4776  001F6C  8E14               	bsf	___fldiv@f2+2,7,c
  4777  001F6E  6A15               	clrf	___fldiv@f2+3,c
  4778  001F70  0E20               	movlw	32
  4779  001F72  6E1A               	movwf	___fldiv@cntr,c
  4780  001F74                     l3792:
  4781  001F74  90D8               	bcf	status,0,c
  4782  001F76  3616               	rlcf	___fldiv@f3,f,c
  4783  001F78  3617               	rlcf	___fldiv@f3+1,f,c
  4784  001F7A  3618               	rlcf	___fldiv@f3+2,f,c
  4785  001F7C  3619               	rlcf	___fldiv@f3+3,f,c
  4786  001F7E  5012               	movf	___fldiv@f2,w,c
  4787  001F80  5C0E               	subwf	___fldiv@f1,w,c
  4788  001F82  5013               	movf	___fldiv@f2+1,w,c
  4789  001F84  580F               	subwfb	___fldiv@f1+1,w,c
  4790  001F86  5014               	movf	___fldiv@f2+2,w,c
  4791  001F88  5810               	subwfb	___fldiv@f1+2,w,c
  4792  001F8A  5015               	movf	___fldiv@f2+3,w,c
  4793  001F8C  5811               	subwfb	___fldiv@f1+3,w,c
  4794  001F8E  E309               	bnc	l3800
  4795  001F90  5012               	movf	___fldiv@f2,w,c
  4796  001F92  5E0E               	subwf	___fldiv@f1,f,c
  4797  001F94  5013               	movf	___fldiv@f2+1,w,c
  4798  001F96  5A0F               	subwfb	___fldiv@f1+1,f,c
  4799  001F98  5014               	movf	___fldiv@f2+2,w,c
  4800  001F9A  5A10               	subwfb	___fldiv@f1+2,f,c
  4801  001F9C  5015               	movf	___fldiv@f2+3,w,c
  4802  001F9E  5A11               	subwfb	___fldiv@f1+3,f,c
  4803  001FA0  8016               	bsf	___fldiv@f3,0,c
  4804  001FA2                     l3800:
  4805  001FA2  90D8               	bcf	status,0,c
  4806  001FA4  360E               	rlcf	___fldiv@f1,f,c
  4807  001FA6  360F               	rlcf	___fldiv@f1+1,f,c
  4808  001FA8  3610               	rlcf	___fldiv@f1+2,f,c
  4809  001FAA  3611               	rlcf	___fldiv@f1+3,f,c
  4810  001FAC  2E1A               	decfsz	___fldiv@cntr,f,c
  4811  001FAE  D7E2               	goto	l3792
  4812  001FB0  C016  F004         	movff	___fldiv@f3,___flpack@arg
  4813  001FB4  C017  F005         	movff	___fldiv@f3+1,___flpack@arg+1
  4814  001FB8  C018  F006         	movff	___fldiv@f3+2,___flpack@arg+2
  4815  001FBC  C019  F007         	movff	___fldiv@f3+3,___flpack@arg+3
  4816  001FC0  C01B  F008         	movff	___fldiv@exp,___flpack@exp
  4817  001FC4  C01C  F009         	movff	___fldiv@sign,___flpack@sign
  4818  001FC8  EC36  F00F         	call	___flpack	;wreg free
  4819  001FCC  C004  F00E         	movff	?___flpack,?___fldiv
  4820  001FD0  C005  F00F         	movff	?___flpack+1,?___fldiv+1
  4821  001FD4  C006  F010         	movff	?___flpack+2,?___fldiv+2
  4822  001FD8  C007  F011         	movff	?___flpack+3,?___fldiv+3
  4823  001FDC  0012               	return		;funcret
  4824  001FDE                     __end_of___fldiv:
  4825                           	opt stack 0
  4826                           tblptru	equ	0xFF8
  4827                           tblptrh	equ	0xFF7
  4828                           tblptrl	equ	0xFF6
  4829                           tablat	equ	0xFF5
  4830                           prodl	equ	0xFF3
  4831                           intcon	equ	0xFF2
  4832                           intcon2	equ	0xFF1
  4833                           postinc0	equ	0xFEE
  4834                           wreg	equ	0xFE8
  4835                           postdec1	equ	0xFE5
  4836                           fsr1l	equ	0xFE1
  4837                           indf2	equ	0xFDF
  4838                           postinc2	equ	0xFDE
  4839                           postdec2	equ	0xFDD
  4840                           fsr2h	equ	0xFDA
  4841                           fsr2l	equ	0xFD9
  4842                           status	equ	0xFD8
  4843                           
  4844 ;; *************** function ___lltofl *****************
  4845 ;; Defined at:
  4846 ;;		line 30 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltofl.c"
  4847 ;; Parameters:    Size  Location     Type
  4848 ;;  c               4   13[COMRAM] unsigned long 
  4849 ;; Auto vars:     Size  Location     Type
  4850 ;;		None
  4851 ;; Return value:  Size  Location     Type
  4852 ;;                  4   13[COMRAM] unsigned long 
  4853 ;; Registers used:
  4854 ;;		wreg, status,2, status,0, cstack
  4855 ;; Tracked objects:
  4856 ;;		On entry : F/0
  4857 ;;		On exit  : 0/0
  4858 ;;		Unchanged: 0/0
  4859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4860 ;;      Params:         4       0       0       0       0       0       0       0       0
  4861 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4862 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4863 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4864 ;;Total ram usage:        4 bytes
  4865 ;; Hardware stack levels used:    1
  4866 ;; Hardware stack levels required when called:    2
  4867 ;; This function calls:
  4868 ;;		___flpack
  4869 ;; This function is called by:
  4870 ;;		_pow
  4871 ;; This function uses a non-reentrant model
  4872 ;;
  4873                           
  4874                           	psect	text20
  4875  002730                     __ptext20:
  4876                           	opt stack 0
  4877  002730                     ___lltofl:
  4878                           	opt stack 25
  4879                           
  4880                           ; BSR set to: 0
  4881                           
  4882                           ;incstack = 0
  4883  002730  C00E  F004         	movff	___lltofl@c,___flpack@arg
  4884  002734  C00F  F005         	movff	___lltofl@c+1,___flpack@arg+1
  4885  002738  C010  F006         	movff	___lltofl@c+2,___flpack@arg+2
  4886  00273C  C011  F007         	movff	___lltofl@c+3,___flpack@arg+3
  4887  002740  0E96               	movlw	150
  4888  002742  6E08               	movwf	___flpack@exp,c
  4889  002744  0E00               	movlw	0
  4890  002746  6E09               	movwf	___flpack@sign,c
  4891  002748  EC36  F00F         	call	___flpack	;wreg free
  4892  00274C  C004  F00E         	movff	?___flpack,?___lltofl
  4893  002750  C005  F00F         	movff	?___flpack+1,?___lltofl+1
  4894  002754  C006  F010         	movff	?___flpack+2,?___lltofl+2
  4895  002758  C007  F011         	movff	?___flpack+3,?___lltofl+3
  4896  00275C  0012               	return		;funcret
  4897  00275E                     __end_of___lltofl:
  4898                           	opt stack 0
  4899                           tblptru	equ	0xFF8
  4900                           tblptrh	equ	0xFF7
  4901                           tblptrl	equ	0xFF6
  4902                           tablat	equ	0xFF5
  4903                           prodl	equ	0xFF3
  4904                           intcon	equ	0xFF2
  4905                           intcon2	equ	0xFF1
  4906                           postinc0	equ	0xFEE
  4907                           wreg	equ	0xFE8
  4908                           postdec1	equ	0xFE5
  4909                           fsr1l	equ	0xFE1
  4910                           indf2	equ	0xFDF
  4911                           postinc2	equ	0xFDE
  4912                           postdec2	equ	0xFDD
  4913                           fsr2h	equ	0xFDA
  4914                           fsr2l	equ	0xFD9
  4915                           status	equ	0xFD8
  4916                           
  4917 ;; *************** function _log10 *****************
  4918 ;; Defined at:
  4919 ;;		line 39 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  4920 ;; Parameters:    Size  Location     Type
  4921 ;;  x               4   73[COMRAM] unsigned long 
  4922 ;; Auto vars:     Size  Location     Type
  4923 ;;		None
  4924 ;; Return value:  Size  Location     Type
  4925 ;;                  4   73[COMRAM] unsigned long 
  4926 ;; Registers used:
  4927 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4928 ;; Tracked objects:
  4929 ;;		On entry : 0/0
  4930 ;;		On exit  : 0/0
  4931 ;;		Unchanged: 0/0
  4932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4933 ;;      Params:         4       0       0       0       0       0       0       0       0
  4934 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4935 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4936 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4937 ;;Total ram usage:        8 bytes
  4938 ;; Hardware stack levels used:    1
  4939 ;; Hardware stack levels required when called:    5
  4940 ;; This function calls:
  4941 ;;		___flmul
  4942 ;;		_log
  4943 ;; This function is called by:
  4944 ;;		_format_double
  4945 ;; This function uses a non-reentrant model
  4946 ;;
  4947                           
  4948                           	psect	text21
  4949  0023C4                     __ptext21:
  4950                           	opt stack 0
  4951  0023C4                     _log10:
  4952                           	opt stack 23
  4953                           
  4954                           ;incstack = 0
  4955  0023C4  C04A  F044         	movff	log10@x,log@x
  4956  0023C8  C04B  F045         	movff	log10@x+1,log@x+1
  4957  0023CC  C04C  F046         	movff	log10@x+2,log@x+2
  4958  0023D0  C04D  F047         	movff	log10@x+3,log@x+3
  4959  0023D4  ECF8  F00B         	call	_log	;wreg free
  4960  0023D8  C044  F04E         	movff	?_log,_log10$1106
  4961  0023DC  C045  F04F         	movff	?_log+1,_log10$1106+1
  4962  0023E0  C046  F050         	movff	?_log+2,_log10$1106+2
  4963  0023E4  C047  F051         	movff	?_log+3,_log10$1106+3
  4964  0023E8  C04E  F01D         	movff	_log10$1106,___flmul@f1
  4965  0023EC  C04F  F01E         	movff	_log10$1106+1,___flmul@f1+1
  4966  0023F0  C050  F01F         	movff	_log10$1106+2,___flmul@f1+2
  4967  0023F4  C051  F020         	movff	_log10$1106+3,___flmul@f1+3
  4968  0023F8  0ED9               	movlw	217
  4969  0023FA  6E21               	movwf	___flmul@f2,c
  4970  0023FC  0E5B               	movlw	91
  4971  0023FE  6E22               	movwf	___flmul@f2+1,c
  4972  002400  0EDE               	movlw	222
  4973  002402  6E23               	movwf	___flmul@f2+2,c
  4974  002404  0E3E               	movlw	62
  4975  002406  6E24               	movwf	___flmul@f2+3,c
  4976  002408  ECD4  F00E         	call	___flmul	;wreg free
  4977  00240C  C01D  F04A         	movff	?___flmul,?_log10
  4978  002410  C01E  F04B         	movff	?___flmul+1,?_log10+1
  4979  002414  C01F  F04C         	movff	?___flmul+2,?_log10+2
  4980  002418  C020  F04D         	movff	?___flmul+3,?_log10+3
  4981  00241C  0012               	return		;funcret
  4982  00241E                     __end_of_log10:
  4983                           	opt stack 0
  4984                           tblptru	equ	0xFF8
  4985                           tblptrh	equ	0xFF7
  4986                           tblptrl	equ	0xFF6
  4987                           tablat	equ	0xFF5
  4988                           prodl	equ	0xFF3
  4989                           intcon	equ	0xFF2
  4990                           intcon2	equ	0xFF1
  4991                           postinc0	equ	0xFEE
  4992                           wreg	equ	0xFE8
  4993                           postdec1	equ	0xFE5
  4994                           fsr1l	equ	0xFE1
  4995                           indf2	equ	0xFDF
  4996                           postinc2	equ	0xFDE
  4997                           postdec2	equ	0xFDD
  4998                           fsr2h	equ	0xFDA
  4999                           fsr2l	equ	0xFD9
  5000                           status	equ	0xFD8
  5001                           
  5002 ;; *************** function _log *****************
  5003 ;; Defined at:
  5004 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  5005 ;; Parameters:    Size  Location     Type
  5006 ;;  x               4   67[COMRAM] unsigned long 
  5007 ;; Auto vars:     Size  Location     Type
  5008 ;;  exponent        2   71[COMRAM] int 
  5009 ;; Return value:  Size  Location     Type
  5010 ;;                  4   67[COMRAM] int 
  5011 ;; Registers used:
  5012 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5013 ;; Tracked objects:
  5014 ;;		On entry : 0/0
  5015 ;;		On exit  : 0/0
  5016 ;;		Unchanged: 0/0
  5017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5018 ;;      Params:         4       0       0       0       0       0       0       0       0
  5019 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5020 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5021 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5022 ;;Total ram usage:        6 bytes
  5023 ;; Hardware stack levels used:    1
  5024 ;; Hardware stack levels required when called:    4
  5025 ;; This function calls:
  5026 ;;		___awtofl
  5027 ;;		___fladd
  5028 ;;		___flmul
  5029 ;;		_eval_poly
  5030 ;;		_frexp
  5031 ;; This function is called by:
  5032 ;;		_log10
  5033 ;;		_pow
  5034 ;; This function uses a non-reentrant model
  5035 ;;
  5036                           
  5037                           	psect	text22
  5038  0017F0                     __ptext22:
  5039                           	opt stack 0
  5040  0017F0                     _log:
  5041                           	opt stack 23
  5042                           
  5043                           ;incstack = 0
  5044  0017F0  AE47               	btfss	log@x+3,7,c
  5045  0017F2  D005               	goto	l3840
  5046  0017F4  6A44               	clrf	?_log,c
  5047  0017F6  6A45               	clrf	?_log+1,c
  5048  0017F8  6A46               	clrf	?_log+2,c
  5049  0017FA  6A47               	clrf	?_log+3,c
  5050  0017FC  0012               	return	
  5051  0017FE                     l3840:
  5052  0017FE  5044               	movf	log@x,w,c
  5053  001800  1045               	iorwf	log@x+1,w,c
  5054  001802  1046               	iorwf	log@x+2,w,c
  5055  001804  1047               	iorwf	log@x+3,w,c
  5056  001806  E105               	bnz	l3844
  5057  001808  6A44               	clrf	?_log,c
  5058  00180A  6A45               	clrf	?_log+1,c
  5059  00180C  6A46               	clrf	?_log+2,c
  5060  00180E  6A47               	clrf	?_log+3,c
  5061  001810  0012               	return	
  5062  001812                     l3844:
  5063  001812  6A21               	clrf	___flmul@f2,c
  5064  001814  6A22               	clrf	___flmul@f2+1,c
  5065  001816  6A23               	clrf	___flmul@f2+2,c
  5066  001818  0E40               	movlw	64
  5067  00181A  6E24               	movwf	___flmul@f2+3,c
  5068  00181C  0E48               	movlw	low log@exponent
  5069  00181E  6E08               	movwf	frexp@eptr,c
  5070  001820  C044  F004         	movff	log@x,frexp@value
  5071  001824  C045  F005         	movff	log@x+1,frexp@value+1
  5072  001828  C046  F006         	movff	log@x+2,frexp@value+2
  5073  00182C  C047  F007         	movff	log@x+3,frexp@value+3
  5074  001830  EC38  F011         	call	_frexp	;wreg free
  5075  001834  C004  F01D         	movff	?_frexp,___flmul@f1
  5076  001838  C005  F01E         	movff	?_frexp+1,___flmul@f1+1
  5077  00183C  C006  F01F         	movff	?_frexp+2,___flmul@f1+2
  5078  001840  C007  F020         	movff	?_frexp+3,___flmul@f1+3
  5079  001844  ECD4  F00E         	call	___flmul	;wreg free
  5080  001848  C01D  F02C         	movff	?___flmul,___fladd@f1
  5081  00184C  C01E  F02D         	movff	?___flmul+1,___fladd@f1+1
  5082  001850  C01F  F02E         	movff	?___flmul+2,___fladd@f1+2
  5083  001854  C020  F02F         	movff	?___flmul+3,___fladd@f1+3
  5084  001858  D857               	call	PL26	;call to abstracted procedure
  5085  00185A  EC4B  F00B         	call	___fladd	;wreg free
  5086  00185E  C02C  F044         	movff	?___fladd,log@x
  5087  001862  C02D  F045         	movff	?___fladd+1,log@x+1
  5088  001866  C02E  F046         	movff	?___fladd+2,log@x+2
  5089  00186A  C02F  F047         	movff	?___fladd+3,log@x+3
  5090  00186E  0648               	decf	log@exponent,f,c
  5091  001870  A0D8               	btfss	status,0,c
  5092  001872  0649               	decf	log@exponent+1,f,c
  5093  001874  C044  F038         	movff	log@x,eval_poly@x
  5094  001878  C045  F039         	movff	log@x+1,eval_poly@x+1
  5095  00187C  C046  F03A         	movff	log@x+2,eval_poly@x+2
  5096  001880  C047  F03B         	movff	log@x+3,eval_poly@x+3
  5097  001884  0E29               	movlw	low log@coeff
  5098  001886  6E3C               	movwf	eval_poly@d,c
  5099  001888  6A3E               	clrf	eval_poly@n+1,c
  5100  00188A  0E08               	movlw	8
  5101  00188C  6E3D               	movwf	eval_poly@n,c
  5102  00188E  ECEF  F00F         	call	_eval_poly	;wreg free
  5103  001892  C038  F044         	movff	?_eval_poly,log@x
  5104  001896  C039  F045         	movff	?_eval_poly+1,log@x+1
  5105  00189A  C03A  F046         	movff	?_eval_poly+2,log@x+2
  5106  00189E  C03B  F047         	movff	?_eval_poly+3,log@x+3
  5107  0018A2  0E18               	movlw	24
  5108  0018A4  6E21               	movwf	___flmul@f2,c
  5109  0018A6  0E72               	movlw	114
  5110  0018A8  6E22               	movwf	___flmul@f2+1,c
  5111  0018AA  0E31               	movlw	49
  5112  0018AC  6E23               	movwf	___flmul@f2+2,c
  5113  0018AE  0E3F               	movlw	63
  5114  0018B0  6E24               	movwf	___flmul@f2+3,c
  5115  0018B2  C048  F00E         	movff	log@exponent,___awtofl@c
  5116  0018B6  C049  F00F         	movff	log@exponent+1,___awtofl@c+1
  5117  0018BA  EC2F  F013         	call	___awtofl	;wreg free
  5118  0018BE  C00E  F01D         	movff	?___awtofl,___flmul@f1
  5119  0018C2  C00F  F01E         	movff	?___awtofl+1,___flmul@f1+1
  5120  0018C6  C010  F01F         	movff	?___awtofl+2,___flmul@f1+2
  5121  0018CA  C011  F020         	movff	?___awtofl+3,___flmul@f1+3
  5122  0018CE  ECD4  F00E         	call	___flmul	;wreg free
  5123  0018D2  C01D  F02C         	movff	?___flmul,___fladd@f1
  5124  0018D6  C01E  F02D         	movff	?___flmul+1,___fladd@f1+1
  5125  0018DA  C01F  F02E         	movff	?___flmul+2,___fladd@f1+2
  5126  0018DE  C020  F02F         	movff	?___flmul+3,___fladd@f1+3
  5127  0018E2  C044  F030         	movff	log@x,___fladd@f2
  5128  0018E6  C045  F031         	movff	log@x+1,___fladd@f2+1
  5129  0018EA  C046  F032         	movff	log@x+2,___fladd@f2+2
  5130  0018EE  C047  F033         	movff	log@x+3,___fladd@f2+3
  5131  0018F2  EC4B  F00B         	call	___fladd	;wreg free
  5132  0018F6  C02C  F044         	movff	?___fladd,?_log
  5133  0018FA  C02D  F045         	movff	?___fladd+1,?_log+1
  5134  0018FE  C02E  F046         	movff	?___fladd+2,?_log+2
  5135  001902  C02F  F047         	movff	?___fladd+3,?_log+3
  5136  001906  0012               	return		;funcret
  5137  001908                     __end_of_log:
  5138                           	opt stack 0
  5139  001908                     PL26:
  5140                           	opt stack 23
  5141  001908  0E00               	movlw	0
  5142  00190A  6E30               	movwf	___fladd@f2,c
  5143  00190C  6E31               	movwf	___fladd@f2+1,c
  5144  00190E  0E80               	movlw	128
  5145  001910  6E32               	movwf	___fladd@f2+2,c
  5146  001912  0EBF               	movlw	191
  5147  001914  6E33               	movwf	___fladd@f2+3,c
  5148  001916  0CBF               	retlw	191
  5149  001918                     __end_ofPL26:
  5150                           	opt stack 0
  5151                           tblptru	equ	0xFF8
  5152                           tblptrh	equ	0xFF7
  5153                           tblptrl	equ	0xFF6
  5154                           tablat	equ	0xFF5
  5155                           prodl	equ	0xFF3
  5156                           intcon	equ	0xFF2
  5157                           intcon2	equ	0xFF1
  5158                           postinc0	equ	0xFEE
  5159                           wreg	equ	0xFE8
  5160                           postdec1	equ	0xFE5
  5161                           fsr1l	equ	0xFE1
  5162                           indf2	equ	0xFDF
  5163                           postinc2	equ	0xFDE
  5164                           postdec2	equ	0xFDD
  5165                           fsr2h	equ	0xFDA
  5166                           fsr2l	equ	0xFD9
  5167                           status	equ	0xFD8
  5168                           
  5169 ;; *************** function _frexp *****************
  5170 ;; Defined at:
  5171 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  5172 ;; Parameters:    Size  Location     Type
  5173 ;;  value           4    3[COMRAM] int 
  5174 ;;  eptr            1    7[COMRAM] PTR int 
  5175 ;;		 -> log@exponent(2), floor@expon(2), 
  5176 ;; Auto vars:     Size  Location     Type
  5177 ;;		None
  5178 ;; Return value:  Size  Location     Type
  5179 ;;                  4    3[COMRAM] PTR int 
  5180 ;; Registers used:
  5181 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5182 ;; Tracked objects:
  5183 ;;		On entry : 0/0
  5184 ;;		On exit  : 0/0
  5185 ;;		Unchanged: 0/0
  5186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5187 ;;      Params:         5       0       0       0       0       0       0       0       0
  5188 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5189 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5190 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5191 ;;Total ram usage:        7 bytes
  5192 ;; Hardware stack levels used:    1
  5193 ;; Hardware stack levels required when called:    1
  5194 ;; This function calls:
  5195 ;;		Nothing
  5196 ;; This function is called by:
  5197 ;;		_floor
  5198 ;;		_log
  5199 ;; This function uses a non-reentrant model
  5200 ;;
  5201                           
  5202                           	psect	text23
  5203  002270                     __ptext23:
  5204                           	opt stack 0
  5205  002270                     _frexp:
  5206                           	opt stack 25
  5207                           
  5208                           ;incstack = 0
  5209  002270  5004               	movf	frexp@value,w,c
  5210  002272  1005               	iorwf	frexp@value+1,w,c
  5211  002274  1006               	iorwf	frexp@value+2,w,c
  5212  002276  1007               	iorwf	frexp@value+3,w,c
  5213  002278  E10B               	bnz	l2594
  5214  00227A  5008               	movf	frexp@eptr,w,c
  5215  00227C  6ED9               	movwf	fsr2l,c
  5216  00227E  6ADA               	clrf	fsr2h,c
  5217  002280  0E00               	movlw	0
  5218  002282  6ADE               	clrf	postinc2,c
  5219  002284  6ADD               	clrf	postdec2,c
  5220  002286  6A04               	clrf	?_frexp,c
  5221  002288  6A05               	clrf	?_frexp+1,c
  5222  00228A  6A06               	clrf	?_frexp+2,c
  5223  00228C  6A07               	clrf	?_frexp+3,c
  5224  00228E  0012               	return	
  5225  002290                     l2594:
  5226  002290  5007               	movf	frexp@value+3,w,c
  5227  002292  0B7F               	andlw	127
  5228  002294  6E09               	movwf	??_frexp& (0+255),c
  5229  002296  6A0A               	clrf	(??_frexp+1)& (0+255),c
  5230  002298  90D8               	bcf	status,0,c
  5231  00229A  3609               	rlcf	??_frexp,f,c
  5232  00229C  360A               	rlcf	??_frexp+1,f,c
  5233  00229E  5008               	movf	frexp@eptr,w,c
  5234  0022A0  6ED9               	movwf	fsr2l,c
  5235  0022A2  6ADA               	clrf	fsr2h,c
  5236  0022A4  C009  FFDE         	movff	??_frexp,postinc2
  5237  0022A8  C00A  FFDD         	movff	??_frexp+1,postdec2
  5238  0022AC  5008               	movf	frexp@eptr,w,c
  5239  0022AE  6ED9               	movwf	fsr2l,c
  5240  0022B0  6ADA               	clrf	fsr2h,c
  5241  0022B2  0E01               	movlw	1
  5242  0022B4  AE06               	btfss	frexp@value+2,7,c
  5243  0022B6  0E00               	movlw	0
  5244  0022B8  12DE               	iorwf	postinc2,f,c
  5245  0022BA  0E00               	movlw	0
  5246  0022BC  12DD               	iorwf	postdec2,f,c
  5247  0022BE  5008               	movf	frexp@eptr,w,c
  5248  0022C0  6ED9               	movwf	fsr2l,c
  5249  0022C2  6ADA               	clrf	fsr2h,c
  5250  0022C4  0E82               	movlw	130
  5251  0022C6  26DE               	addwf	postinc2,f,c
  5252  0022C8  0EFF               	movlw	255
  5253  0022CA  22DD               	addwfc	postdec2,f,c
  5254  0022CC  5007               	movf	frexp@value+3,w,c
  5255  0022CE  0B80               	andlw	-128
  5256  0022D0  093F               	iorlw	63
  5257  0022D2  6E07               	movwf	frexp@value+3,c
  5258  0022D4  9E06               	bcf	frexp@value+2,7,c
  5259  0022D6  C004  F004         	movff	frexp@value,?_frexp
  5260  0022DA  C005  F005         	movff	frexp@value+1,?_frexp+1
  5261  0022DE  C006  F006         	movff	frexp@value+2,?_frexp+2
  5262  0022E2  C007  F007         	movff	frexp@value+3,?_frexp+3
  5263  0022E6  0012               	return		;funcret
  5264  0022E8                     __end_of_frexp:
  5265                           	opt stack 0
  5266                           tblptru	equ	0xFF8
  5267                           tblptrh	equ	0xFF7
  5268                           tblptrl	equ	0xFF6
  5269                           tablat	equ	0xFF5
  5270                           prodl	equ	0xFF3
  5271                           intcon	equ	0xFF2
  5272                           intcon2	equ	0xFF1
  5273                           postinc0	equ	0xFEE
  5274                           wreg	equ	0xFE8
  5275                           postdec1	equ	0xFE5
  5276                           fsr1l	equ	0xFE1
  5277                           indf2	equ	0xFDF
  5278                           postinc2	equ	0xFDE
  5279                           postdec2	equ	0xFDD
  5280                           fsr2h	equ	0xFDA
  5281                           fsr2l	equ	0xFD9
  5282                           status	equ	0xFD8
  5283                           
  5284 ;; *************** function _eval_poly *****************
  5285 ;; Defined at:
  5286 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  5287 ;; Parameters:    Size  Location     Type
  5288 ;;  x               4   55[COMRAM] PTR int 
  5289 ;;  d               1   59[COMRAM] PTR const 
  5290 ;;		 -> exp@coeff(40), log@coeff(36), 
  5291 ;;  n               2   60[COMRAM] int 
  5292 ;; Auto vars:     Size  Location     Type
  5293 ;;  res             4   63[COMRAM] int 
  5294 ;; Return value:  Size  Location     Type
  5295 ;;                  4   55[COMRAM] int 
  5296 ;; Registers used:
  5297 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5298 ;; Tracked objects:
  5299 ;;		On entry : 0/0
  5300 ;;		On exit  : 0/0
  5301 ;;		Unchanged: 0/0
  5302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5303 ;;      Params:         7       0       0       0       0       0       0       0       0
  5304 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5305 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5306 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5307 ;;Total ram usage:       12 bytes
  5308 ;; Hardware stack levels used:    1
  5309 ;; Hardware stack levels required when called:    3
  5310 ;; This function calls:
  5311 ;;		___fladd
  5312 ;;		___flmul
  5313 ;; This function is called by:
  5314 ;;		_log
  5315 ;;		_exp
  5316 ;; This function uses a non-reentrant model
  5317 ;;
  5318                           
  5319                           	psect	text24
  5320  001FDE                     __ptext24:
  5321                           	opt stack 0
  5322  001FDE                     _eval_poly:
  5323                           	opt stack 0
  5324                           
  5325                           ;incstack = 0
  5326  001FDE  D84B               	call	PL16	;call to abstracted procedure
  5327  001FE0  CFF5 F040          	movff	tablat,eval_poly@res
  5328  001FE4  0009               	tblrd		*+
  5329  001FE6  CFF5 F041          	movff	tablat,eval_poly@res+1
  5330  001FEA  0009               	tblrd		*+
  5331  001FEC  CFF5 F042          	movff	tablat,eval_poly@res+2
  5332  001FF0  000A               	tblrd		*-
  5333  001FF2  CFF5 F043          	movff	tablat,eval_poly@res+3
  5334  001FF6  D033               	goto	l3830
  5335  001FF8                     l3828:
  5336  001FF8  C040  F021         	movff	eval_poly@res,___flmul@f2
  5337  001FFC  C041  F022         	movff	eval_poly@res+1,___flmul@f2+1
  5338  002000  C042  F023         	movff	eval_poly@res+2,___flmul@f2+2
  5339  002004  C043  F024         	movff	eval_poly@res+3,___flmul@f2+3
  5340  002008  C038  F01D         	movff	eval_poly@x,___flmul@f1
  5341  00200C  C039  F01E         	movff	eval_poly@x+1,___flmul@f1+1
  5342  002010  C03A  F01F         	movff	eval_poly@x+2,___flmul@f1+2
  5343  002014  C03B  F020         	movff	eval_poly@x+3,___flmul@f1+3
  5344  002018  ECD4  F00E         	call	___flmul	;wreg free
  5345  00201C  C01D  F02C         	movff	?___flmul,___fladd@f1
  5346  002020  C01E  F02D         	movff	?___flmul+1,___fladd@f1+1
  5347  002024  C01F  F02E         	movff	?___flmul+2,___fladd@f1+2
  5348  002028  C020  F02F         	movff	?___flmul+3,___fladd@f1+3
  5349  00202C  063D               	decf	eval_poly@n,f,c
  5350  00202E  A0D8               	btfss	status,0,c
  5351  002030  063E               	decf	eval_poly@n+1,f,c
  5352  002032  D821               	call	PL16	;call to abstracted procedure
  5353  002034  CFF5 F030          	movff	tablat,___fladd@f2
  5354  002038  0009               	tblrd		*+
  5355  00203A  CFF5 F031          	movff	tablat,___fladd@f2+1
  5356  00203E  0009               	tblrd		*+
  5357  002040  CFF5 F032          	movff	tablat,___fladd@f2+2
  5358  002044  000A               	tblrd		*-
  5359  002046  CFF5 F033          	movff	tablat,___fladd@f2+3
  5360  00204A  EC4B  F00B         	call	___fladd	;wreg free
  5361  00204E  C02C  F040         	movff	?___fladd,eval_poly@res
  5362  002052  C02D  F041         	movff	?___fladd+1,eval_poly@res+1
  5363  002056  C02E  F042         	movff	?___fladd+2,eval_poly@res+2
  5364  00205A  C02F  F043         	movff	?___fladd+3,eval_poly@res+3
  5365  00205E                     l3830:
  5366  00205E  503D               	movf	eval_poly@n,w,c
  5367  002060  103E               	iorwf	eval_poly@n+1,w,c
  5368  002062  E1CA               	bnz	l3828
  5369  002064  C040  F038         	movff	eval_poly@res,?_eval_poly
  5370  002068  C041  F039         	movff	eval_poly@res+1,?_eval_poly+1
  5371  00206C  C042  F03A         	movff	eval_poly@res+2,?_eval_poly+2
  5372  002070  C043  F03B         	movff	eval_poly@res+3,?_eval_poly+3
  5373  002074  0012               	return		;funcret
  5374  002076                     __end_of_eval_poly:
  5375                           	opt stack 0
  5376  002076                     PL16:
  5377                           	opt stack 23
  5378  002076  503D               	movf	eval_poly@n,w,c
  5379  002078  0D04               	mullw	4
  5380  00207A  503C               	movf	eval_poly@d,w,c
  5381  00207C  24F3               	addwf	prodl,w,c
  5382  00207E  6E3F               	movwf	??_eval_poly& (0+255),c
  5383  002080  C03F  FFF6         	movff	??_eval_poly,tblptrl
  5384  002084                     	if	0	;There is only one active tblptr byte
  5385  002084                     	endif
  5386  002084                     	if	0	;tblptru may be non-zero
  5387  002084                     	endif
  5388  002084                     	if	0	;tblptru may be non-zero
  5389  002084                     	endif
  5390  002084  0009               	tblrd		*+
  5391  002086  0012               	return	
  5392  002088                     __end_ofPL16:
  5393                           	opt stack 0
  5394                           tblptru	equ	0xFF8
  5395                           tblptrh	equ	0xFF7
  5396                           tblptrl	equ	0xFF6
  5397                           tablat	equ	0xFF5
  5398                           prodl	equ	0xFF3
  5399                           intcon	equ	0xFF2
  5400                           intcon2	equ	0xFF1
  5401                           postinc0	equ	0xFEE
  5402                           wreg	equ	0xFE8
  5403                           postdec1	equ	0xFE5
  5404                           fsr1l	equ	0xFE1
  5405                           indf2	equ	0xFDF
  5406                           postinc2	equ	0xFDE
  5407                           postdec2	equ	0xFDD
  5408                           fsr2h	equ	0xFDA
  5409                           fsr2l	equ	0xFD9
  5410                           status	equ	0xFD8
  5411                           
  5412 ;; *************** function ___flmul *****************
  5413 ;; Defined at:
  5414 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flmul.c"
  5415 ;; Parameters:    Size  Location     Type
  5416 ;;  f1              4   28[COMRAM] int 
  5417 ;;  f2              4   32[COMRAM] int 
  5418 ;; Auto vars:     Size  Location     Type
  5419 ;;  f3_as_produc    4   37[COMRAM] unsigned long 
  5420 ;;  sign            1   42[COMRAM] unsigned char 
  5421 ;;  cntr            1   41[COMRAM] unsigned char 
  5422 ;;  exp             1   36[COMRAM] unsigned char 
  5423 ;; Return value:  Size  Location     Type
  5424 ;;                  4   28[COMRAM] unsigned char 
  5425 ;; Registers used:
  5426 ;;		wreg, status,2, status,0, cstack
  5427 ;; Tracked objects:
  5428 ;;		On entry : 0/0
  5429 ;;		On exit  : 0/0
  5430 ;;		Unchanged: 0/0
  5431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5432 ;;      Params:         8       0       0       0       0       0       0       0       0
  5433 ;;      Locals:         7       0       0       0       0       0       0       0       0
  5434 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5435 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5436 ;;Total ram usage:       15 bytes
  5437 ;; Hardware stack levels used:    1
  5438 ;; Hardware stack levels required when called:    2
  5439 ;; This function calls:
  5440 ;;		___flpack
  5441 ;; This function is called by:
  5442 ;;		_format_double
  5443 ;;		_measure_capacitance
  5444 ;;		_measure_inductance
  5445 ;;		_log
  5446 ;;		_log10
  5447 ;;		_pow
  5448 ;;		_eval_poly
  5449 ;;		_exp
  5450 ;; This function uses a non-reentrant model
  5451 ;;
  5452                           
  5453                           	psect	text25
  5454  001DA8                     __ptext25:
  5455                           	opt stack 0
  5456  001DA8                     ___flmul:
  5457                           	opt stack 27
  5458                           
  5459                           ;incstack = 0
  5460  001DA8  341F               	rlcf	___flmul@f1+2,w,c
  5461  001DAA  3420               	rlcf	___flmul@f1+3,w,c
  5462  001DAC  6E25               	movwf	___flmul@exp,c
  5463  001DAE  5025               	movf	___flmul@exp,w,c
  5464  001DB0  E105               	bnz	l3672
  5465  001DB2  6A1D               	clrf	?___flmul,c
  5466  001DB4  6A1E               	clrf	?___flmul+1,c
  5467  001DB6  6A1F               	clrf	?___flmul+2,c
  5468  001DB8  6A20               	clrf	?___flmul+3,c
  5469  001DBA  0012               	return	
  5470  001DBC                     l3672:
  5471  001DBC  3423               	rlcf	___flmul@f2+2,w,c
  5472  001DBE  3424               	rlcf	___flmul@f2+3,w,c
  5473  001DC0  6E2B               	movwf	___flmul@sign,c
  5474  001DC2  502B               	movf	___flmul@sign,w,c
  5475  001DC4  E105               	bnz	l3676
  5476  001DC6  6A1D               	clrf	?___flmul,c
  5477  001DC8  6A1E               	clrf	?___flmul+1,c
  5478  001DCA  6A1F               	clrf	?___flmul+2,c
  5479  001DCC  6A20               	clrf	?___flmul+3,c
  5480  001DCE  0012               	return	
  5481  001DD0                     l3676:
  5482  001DD0  502B               	movf	___flmul@sign,w,c
  5483  001DD2  0F7B               	addlw	123
  5484  001DD4  2625               	addwf	___flmul@exp,f,c
  5485  001DD6  C020  F02B         	movff	___flmul@f1+3,___flmul@sign
  5486  001DDA  5024               	movf	___flmul@f2+3,w,c
  5487  001DDC  1A2B               	xorwf	___flmul@sign,f,c
  5488  001DDE  0E80               	movlw	128
  5489  001DE0  162B               	andwf	___flmul@sign,f,c
  5490  001DE2  8E1F               	bsf	___flmul@f1+2,7,c
  5491  001DE4  8E23               	bsf	___flmul@f2+2,7,c
  5492  001DE6  0E00               	movlw	0
  5493  001DE8  1624               	andwf	___flmul@f2+3,f,c
  5494  001DEA  6A26               	clrf	___flmul@f3_as_product,c
  5495  001DEC  6A27               	clrf	___flmul@f3_as_product+1,c
  5496  001DEE  6A28               	clrf	___flmul@f3_as_product+2,c
  5497  001DF0  6A29               	clrf	___flmul@f3_as_product+3,c
  5498  001DF2  0E07               	movlw	7
  5499  001DF4  6E2A               	movwf	___flmul@cntr,c
  5500  001DF6                     l3688:
  5501  001DF6  B01D               	btfsc	___flmul@f1,0,c
  5502  001DF8  D829               	call	PL18	;call to abstracted procedure
  5503  001DFA  D831               	call	PL36	;call to abstracted procedure
  5504  001DFC  3621               	rlcf	___flmul@f2,f,c
  5505  001DFE  3622               	rlcf	___flmul@f2+1,f,c
  5506  001E00  3623               	rlcf	___flmul@f2+2,f,c
  5507  001E02  3624               	rlcf	___flmul@f2+3,f,c
  5508  001E04  2E2A               	decfsz	___flmul@cntr,f,c
  5509  001E06  D7F7               	goto	l3688
  5510  001E08  0E11               	movlw	17
  5511  001E0A  6E2A               	movwf	___flmul@cntr,c
  5512  001E0C                     l3700:
  5513  001E0C  B01D               	btfsc	___flmul@f1,0,c
  5514  001E0E  D81E               	call	PL18	;call to abstracted procedure
  5515  001E10  D826               	call	PL36	;call to abstracted procedure
  5516  001E12  3229               	rrcf	___flmul@f3_as_product+3,f,c
  5517  001E14  3228               	rrcf	___flmul@f3_as_product+2,f,c
  5518  001E16  3227               	rrcf	___flmul@f3_as_product+1,f,c
  5519  001E18  3226               	rrcf	___flmul@f3_as_product,f,c
  5520  001E1A  2E2A               	decfsz	___flmul@cntr,f,c
  5521  001E1C  D7F7               	goto	l3700
  5522  001E1E  C026  F004         	movff	___flmul@f3_as_product,___flpack@arg
  5523  001E22  C027  F005         	movff	___flmul@f3_as_product+1,___flpack@arg+1
  5524  001E26  C028  F006         	movff	___flmul@f3_as_product+2,___flpack@arg+2
  5525  001E2A  C029  F007         	movff	___flmul@f3_as_product+3,___flpack@arg+3
  5526  001E2E  C025  F008         	movff	___flmul@exp,___flpack@exp
  5527  001E32  C02B  F009         	movff	___flmul@sign,___flpack@sign
  5528  001E36  EC36  F00F         	call	___flpack	;wreg free
  5529  001E3A  C004  F01D         	movff	?___flpack,?___flmul
  5530  001E3E  C005  F01E         	movff	?___flpack+1,?___flmul+1
  5531  001E42  C006  F01F         	movff	?___flpack+2,?___flmul+2
  5532  001E46  C007  F020         	movff	?___flpack+3,?___flmul+3
  5533  001E4A  0012               	return		;funcret
  5534  001E4C                     __end_of___flmul:
  5535                           	opt stack 0
  5536  001E4C                     PL18:
  5537                           	opt stack 27
  5538  001E4C  5021               	movf	___flmul@f2,w,c
  5539  001E4E  2626               	addwf	___flmul@f3_as_product,f,c
  5540  001E50  5022               	movf	___flmul@f2+1,w,c
  5541  001E52  2227               	addwfc	___flmul@f3_as_product+1,f,c
  5542  001E54  5023               	movf	___flmul@f2+2,w,c
  5543  001E56  2228               	addwfc	___flmul@f3_as_product+2,f,c
  5544  001E58  5024               	movf	___flmul@f2+3,w,c
  5545  001E5A  2229               	addwfc	___flmul@f3_as_product+3,f,c
  5546  001E5C  0012               	return	
  5547  001E5E                     __end_ofPL18:
  5548                           	opt stack 0
  5549  001E5E                     PL36:
  5550                           	opt stack 27
  5551  001E5E  90D8               	bcf	status,0,c
  5552  001E60  3220               	rrcf	___flmul@f1+3,f,c
  5553  001E62  321F               	rrcf	___flmul@f1+2,f,c
  5554  001E64  321E               	rrcf	___flmul@f1+1,f,c
  5555  001E66  321D               	rrcf	___flmul@f1,f,c
  5556  001E68  90D8               	bcf	status,0,c
  5557  001E6A  0012               	return	
  5558  001E6C                     __end_ofPL36:
  5559                           	opt stack 0
  5560                           tblptru	equ	0xFF8
  5561                           tblptrh	equ	0xFF7
  5562                           tblptrl	equ	0xFF6
  5563                           tablat	equ	0xFF5
  5564                           prodl	equ	0xFF3
  5565                           intcon	equ	0xFF2
  5566                           intcon2	equ	0xFF1
  5567                           postinc0	equ	0xFEE
  5568                           wreg	equ	0xFE8
  5569                           postdec1	equ	0xFE5
  5570                           fsr1l	equ	0xFE1
  5571                           indf2	equ	0xFDF
  5572                           postinc2	equ	0xFDE
  5573                           postdec2	equ	0xFDD
  5574                           fsr2h	equ	0xFDA
  5575                           fsr2l	equ	0xFD9
  5576                           status	equ	0xFD8
  5577                           
  5578 ;; *************** function ___fladd *****************
  5579 ;; Defined at:
  5580 ;;		line 88 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fladd.c"
  5581 ;; Parameters:    Size  Location     Type
  5582 ;;  f1              4   43[COMRAM] unsigned char 
  5583 ;;  f2              4   47[COMRAM] unsigned char 
  5584 ;; Auto vars:     Size  Location     Type
  5585 ;;  exp1            1   54[COMRAM] unsigned char 
  5586 ;;  exp2            1   53[COMRAM] unsigned char 
  5587 ;;  sign            1   52[COMRAM] unsigned char 
  5588 ;; Return value:  Size  Location     Type
  5589 ;;                  4   43[COMRAM] unsigned char 
  5590 ;; Registers used:
  5591 ;;		wreg, status,2, status,0, cstack
  5592 ;; Tracked objects:
  5593 ;;		On entry : 0/0
  5594 ;;		On exit  : 0/0
  5595 ;;		Unchanged: 0/0
  5596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5597 ;;      Params:         8       0       0       0       0       0       0       0       0
  5598 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5599 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5600 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5601 ;;Total ram usage:       12 bytes
  5602 ;; Hardware stack levels used:    1
  5603 ;; Hardware stack levels required when called:    2
  5604 ;; This function calls:
  5605 ;;		___flpack
  5606 ;; This function is called by:
  5607 ;;		_floor
  5608 ;;		___flsub
  5609 ;;		_log
  5610 ;;		_eval_poly
  5611 ;; This function uses a non-reentrant model
  5612 ;;
  5613                           
  5614                           	psect	text26
  5615  001696                     __ptext26:
  5616                           	opt stack 0
  5617  001696                     ___fladd:
  5618                           	opt stack 26
  5619                           
  5620                           ;incstack = 0
  5621  001696  342E               	rlcf	___fladd@f1+2,w,c
  5622  001698  342F               	rlcf	___fladd@f1+3,w,c
  5623  00169A  6E37               	movwf	___fladd@exp1,c
  5624  00169C  3432               	rlcf	___fladd@f2+2,w,c
  5625  00169E  3433               	rlcf	___fladd@f2+3,w,c
  5626  0016A0  6E36               	movwf	___fladd@exp2,c
  5627  0016A2  5037               	movf	___fladd@exp1,w,c
  5628  0016A4  E009               	bz	l798
  5629  0016A6  5036               	movf	___fladd@exp2,w,c
  5630  0016A8  5C37               	subwf	___fladd@exp1,w,c
  5631  0016AA  E20F               	bc	l3608
  5632  0016AC  5037               	movf	___fladd@exp1,w,c
  5633  0016AE  5C36               	subwf	___fladd@exp2,w,c
  5634  0016B0  6E34               	movwf	??___fladd& (0+255),c
  5635  0016B2  0E20               	movlw	32
  5636  0016B4  6434               	cpfsgt	??___fladd,c
  5637  0016B6  D009               	goto	l3608
  5638  0016B8                     l798:
  5639  0016B8  C030  F02C         	movff	___fladd@f2,?___fladd
  5640  0016BC  C031  F02D         	movff	___fladd@f2+1,?___fladd+1
  5641  0016C0  C032  F02E         	movff	___fladd@f2+2,?___fladd+2
  5642  0016C4  C033  F02F         	movff	___fladd@f2+3,?___fladd+3
  5643  0016C8  0012               	return	
  5644  0016CA                     l3608:
  5645  0016CA  5036               	movf	___fladd@exp2,w,c
  5646  0016CC  E009               	bz	l802
  5647  0016CE  5037               	movf	___fladd@exp1,w,c
  5648  0016D0  5C36               	subwf	___fladd@exp2,w,c
  5649  0016D2  E20F               	bc	l3614
  5650  0016D4  5036               	movf	___fladd@exp2,w,c
  5651  0016D6  5C37               	subwf	___fladd@exp1,w,c
  5652  0016D8  6E34               	movwf	??___fladd& (0+255),c
  5653  0016DA  0E20               	movlw	32
  5654  0016DC  6434               	cpfsgt	??___fladd,c
  5655  0016DE  D009               	goto	l3614
  5656  0016E0                     l802:
  5657  0016E0  C02C  F02C         	movff	___fladd@f1,?___fladd
  5658  0016E4  C02D  F02D         	movff	___fladd@f1+1,?___fladd+1
  5659  0016E8  C02E  F02E         	movff	___fladd@f1+2,?___fladd+2
  5660  0016EC  C02F  F02F         	movff	___fladd@f1+3,?___fladd+3
  5661  0016F0  0012               	return	
  5662  0016F2                     l3614:
  5663  0016F2  0E06               	movlw	6
  5664  0016F4  6E35               	movwf	___fladd@sign,c
  5665  0016F6  BE2F               	btfsc	___fladd@f1+3,7,c
  5666  0016F8  8E35               	bsf	___fladd@sign,7,c
  5667  0016FA  BE33               	btfsc	___fladd@f2+3,7,c
  5668  0016FC  8C35               	bsf	___fladd@sign,6,c
  5669  0016FE  8E2E               	bsf	___fladd@f1+2,7,c
  5670  001700  6A2F               	clrf	___fladd@f1+3,c
  5671  001702  8E32               	bsf	___fladd@f2+2,7,c
  5672  001704  6A33               	clrf	___fladd@f2+3,c
  5673  001706  5036               	movf	___fladd@exp2,w,c
  5674  001708  5C37               	subwf	___fladd@exp1,w,c
  5675  00170A  E21A               	bc	l3638
  5676  00170C                     l3628:
  5677  00170C  90D8               	bcf	status,0,c
  5678  00170E  3630               	rlcf	___fladd@f2,f,c
  5679  001710  3631               	rlcf	___fladd@f2+1,f,c
  5680  001712  3632               	rlcf	___fladd@f2+2,f,c
  5681  001714  3633               	rlcf	___fladd@f2+3,f,c
  5682  001716  0636               	decf	___fladd@exp2,f,c
  5683  001718  5037               	movf	___fladd@exp1,w,c
  5684  00171A  1836               	xorwf	___fladd@exp2,w,c
  5685  00171C  E00D               	bz	l3636
  5686  00171E  0635               	decf	___fladd@sign,f,c
  5687  001720  C035  F034         	movff	___fladd@sign,??___fladd
  5688  001724  0E07               	movlw	7
  5689  001726  1634               	andwf	??___fladd,f,c
  5690  001728  E007               	bz	l3636
  5691  00172A  D7F0               	goto	l3628
  5692  00172C                     l3634:
  5693  00172C  90D8               	bcf	status,0,c
  5694  00172E  322F               	rrcf	___fladd@f1+3,f,c
  5695  001730  322E               	rrcf	___fladd@f1+2,f,c
  5696  001732  322D               	rrcf	___fladd@f1+1,f,c
  5697  001734  322C               	rrcf	___fladd@f1,f,c
  5698  001736  2A37               	incf	___fladd@exp1,f,c
  5699  001738                     l3636:
  5700  001738  5036               	movf	___fladd@exp2,w,c
  5701  00173A  1837               	xorwf	___fladd@exp1,w,c
  5702  00173C  E01D               	bz	l813
  5703  00173E  D7F6               	goto	l3634
  5704  001740                     l3638:
  5705  001740  5037               	movf	___fladd@exp1,w,c
  5706  001742  5C36               	subwf	___fladd@exp2,w,c
  5707  001744  E219               	bc	l813
  5708  001746                     l3640:
  5709  001746  90D8               	bcf	status,0,c
  5710  001748  362C               	rlcf	___fladd@f1,f,c
  5711  00174A  362D               	rlcf	___fladd@f1+1,f,c
  5712  00174C  362E               	rlcf	___fladd@f1+2,f,c
  5713  00174E  362F               	rlcf	___fladd@f1+3,f,c
  5714  001750  0637               	decf	___fladd@exp1,f,c
  5715  001752  5037               	movf	___fladd@exp1,w,c
  5716  001754  1836               	xorwf	___fladd@exp2,w,c
  5717  001756  E00D               	bz	l3648
  5718  001758  0635               	decf	___fladd@sign,f,c
  5719  00175A  C035  F034         	movff	___fladd@sign,??___fladd
  5720  00175E  0E07               	movlw	7
  5721  001760  1634               	andwf	??___fladd,f,c
  5722  001762  E007               	bz	l3648
  5723  001764  D7F0               	goto	l3640
  5724  001766                     l3646:
  5725  001766  90D8               	bcf	status,0,c
  5726  001768  3233               	rrcf	___fladd@f2+3,f,c
  5727  00176A  3232               	rrcf	___fladd@f2+2,f,c
  5728  00176C  3231               	rrcf	___fladd@f2+1,f,c
  5729  00176E  3230               	rrcf	___fladd@f2,f,c
  5730  001770  2A36               	incf	___fladd@exp2,f,c
  5731  001772                     l3648:
  5732  001772  5036               	movf	___fladd@exp2,w,c
  5733  001774  1837               	xorwf	___fladd@exp1,w,c
  5734  001776  E1F7               	bnz	l3646
  5735  001778                     l813:
  5736  001778  AE35               	btfss	___fladd@sign,7,c
  5737  00177A  D009               	goto	l3652
  5738  00177C  1E2C               	comf	___fladd@f1,f,c
  5739  00177E  1E2D               	comf	___fladd@f1+1,f,c
  5740  001780  1E2E               	comf	___fladd@f1+2,f,c
  5741  001782  1E2F               	comf	___fladd@f1+3,f,c
  5742  001784  2A2C               	incf	___fladd@f1,f,c
  5743  001786  0E00               	movlw	0
  5744  001788  222D               	addwfc	___fladd@f1+1,f,c
  5745  00178A  222E               	addwfc	___fladd@f1+2,f,c
  5746  00178C  222F               	addwfc	___fladd@f1+3,f,c
  5747  00178E                     l3652:
  5748  00178E  BC35               	btfsc	___fladd@sign,6,c
  5749  001790  D825               	call	PL12	;call to abstracted procedure
  5750  001792  6A35               	clrf	___fladd@sign,c
  5751  001794  502C               	movf	___fladd@f1,w,c
  5752  001796  2630               	addwf	___fladd@f2,f,c
  5753  001798  502D               	movf	___fladd@f1+1,w,c
  5754  00179A  2231               	addwfc	___fladd@f2+1,f,c
  5755  00179C  502E               	movf	___fladd@f1+2,w,c
  5756  00179E  2232               	addwfc	___fladd@f2+2,f,c
  5757  0017A0  502F               	movf	___fladd@f1+3,w,c
  5758  0017A2  2233               	addwfc	___fladd@f2+3,f,c
  5759  0017A4  AE33               	btfss	___fladd@f2+3,7,c
  5760  0017A6  D003               	goto	l3664
  5761  0017A8  D819               	call	PL12	;call to abstracted procedure
  5762  0017AA  0E01               	movlw	1
  5763  0017AC  6E35               	movwf	___fladd@sign,c
  5764  0017AE                     l3664:
  5765  0017AE  C030  F004         	movff	___fladd@f2,___flpack@arg
  5766  0017B2  C031  F005         	movff	___fladd@f2+1,___flpack@arg+1
  5767  0017B6  C032  F006         	movff	___fladd@f2+2,___flpack@arg+2
  5768  0017BA  C033  F007         	movff	___fladd@f2+3,___flpack@arg+3
  5769  0017BE  C037  F008         	movff	___fladd@exp1,___flpack@exp
  5770  0017C2  C035  F009         	movff	___fladd@sign,___flpack@sign
  5771  0017C6  EC36  F00F         	call	___flpack	;wreg free
  5772  0017CA  C004  F02C         	movff	?___flpack,?___fladd
  5773  0017CE  C005  F02D         	movff	?___flpack+1,?___fladd+1
  5774  0017D2  C006  F02E         	movff	?___flpack+2,?___fladd+2
  5775  0017D6  C007  F02F         	movff	?___flpack+3,?___fladd+3
  5776  0017DA  0012               	return		;funcret
  5777  0017DC                     __end_of___fladd:
  5778                           	opt stack 0
  5779  0017DC                     PL12:
  5780                           	opt stack 26
  5781  0017DC  1E30               	comf	___fladd@f2,f,c
  5782  0017DE  1E31               	comf	___fladd@f2+1,f,c
  5783  0017E0  1E32               	comf	___fladd@f2+2,f,c
  5784  0017E2  1E33               	comf	___fladd@f2+3,f,c
  5785  0017E4  2A30               	incf	___fladd@f2,f,c
  5786  0017E6  0E00               	movlw	0
  5787  0017E8  2231               	addwfc	___fladd@f2+1,f,c
  5788  0017EA  2232               	addwfc	___fladd@f2+2,f,c
  5789  0017EC  2233               	addwfc	___fladd@f2+3,f,c
  5790  0017EE  0C00               	retlw	0
  5791  0017F0                     __end_ofPL12:
  5792                           	opt stack 0
  5793                           tblptru	equ	0xFF8
  5794                           tblptrh	equ	0xFF7
  5795                           tblptrl	equ	0xFF6
  5796                           tablat	equ	0xFF5
  5797                           prodl	equ	0xFF3
  5798                           intcon	equ	0xFF2
  5799                           intcon2	equ	0xFF1
  5800                           postinc0	equ	0xFEE
  5801                           wreg	equ	0xFE8
  5802                           postdec1	equ	0xFE5
  5803                           fsr1l	equ	0xFE1
  5804                           indf2	equ	0xFDF
  5805                           postinc2	equ	0xFDE
  5806                           postdec2	equ	0xFDD
  5807                           fsr2h	equ	0xFDA
  5808                           fsr2l	equ	0xFD9
  5809                           status	equ	0xFD8
  5810                           
  5811 ;; *************** function ___awtofl *****************
  5812 ;; Defined at:
  5813 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtofl.c"
  5814 ;; Parameters:    Size  Location     Type
  5815 ;;  c               2   13[COMRAM] int 
  5816 ;; Auto vars:     Size  Location     Type
  5817 ;;  f1              4    0        int 
  5818 ;;  sign            1   17[COMRAM] unsigned char 
  5819 ;; Return value:  Size  Location     Type
  5820 ;;                  4   13[COMRAM] unsigned char 
  5821 ;; Registers used:
  5822 ;;		wreg, status,2, status,0, cstack
  5823 ;; Tracked objects:
  5824 ;;		On entry : 0/0
  5825 ;;		On exit  : 0/0
  5826 ;;		Unchanged: 0/0
  5827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5828 ;;      Params:         4       0       0       0       0       0       0       0       0
  5829 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5830 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5831 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5832 ;;Total ram usage:        5 bytes
  5833 ;; Hardware stack levels used:    1
  5834 ;; Hardware stack levels required when called:    2
  5835 ;; This function calls:
  5836 ;;		___flpack
  5837 ;; This function is called by:
  5838 ;;		_format_double
  5839 ;;		_log
  5840 ;;		_exp
  5841 ;; This function uses a non-reentrant model
  5842 ;;
  5843                           
  5844                           	psect	text27
  5845  00265E                     __ptext27:
  5846                           	opt stack 0
  5847  00265E                     ___awtofl:
  5848                           	opt stack 24
  5849                           
  5850                           ;incstack = 0
  5851  00265E  6A12               	clrf	___awtofl@sign,c
  5852  002660  AE0F               	btfss	___awtofl@c+1,7,c
  5853  002662  D005               	goto	l3822
  5854  002664  6C0E               	negf	___awtofl@c,c
  5855  002666  1E0F               	comf	___awtofl@c+1,f,c
  5856  002668  B0D8               	btfsc	status,0,c
  5857  00266A  2A0F               	incf	___awtofl@c+1,f,c
  5858  00266C  2A12               	incf	___awtofl@sign,f,c
  5859  00266E                     l3822:
  5860  00266E  C00E  F004         	movff	___awtofl@c,___flpack@arg
  5861  002672  C00F  F005         	movff	___awtofl@c+1,___flpack@arg+1
  5862  002676  6A06               	clrf	___flpack@arg+2,c
  5863  002678  6A07               	clrf	___flpack@arg+3,c
  5864  00267A  0E96               	movlw	150
  5865  00267C  6E08               	movwf	___flpack@exp,c
  5866  00267E  C012  F009         	movff	___awtofl@sign,___flpack@sign
  5867  002682  EC36  F00F         	call	___flpack	;wreg free
  5868  002686  C004  F00E         	movff	?___flpack,?___awtofl
  5869  00268A  C005  F00F         	movff	?___flpack+1,?___awtofl+1
  5870  00268E  C006  F010         	movff	?___flpack+2,?___awtofl+2
  5871  002692  C007  F011         	movff	?___flpack+3,?___awtofl+3
  5872  002696  0012               	return		;funcret
  5873  002698                     __end_of___awtofl:
  5874                           	opt stack 0
  5875                           tblptru	equ	0xFF8
  5876                           tblptrh	equ	0xFF7
  5877                           tblptrl	equ	0xFF6
  5878                           tablat	equ	0xFF5
  5879                           prodl	equ	0xFF3
  5880                           intcon	equ	0xFF2
  5881                           intcon2	equ	0xFF1
  5882                           postinc0	equ	0xFEE
  5883                           wreg	equ	0xFE8
  5884                           postdec1	equ	0xFE5
  5885                           fsr1l	equ	0xFE1
  5886                           indf2	equ	0xFDF
  5887                           postinc2	equ	0xFDE
  5888                           postdec2	equ	0xFDD
  5889                           fsr2h	equ	0xFDA
  5890                           fsr2l	equ	0xFD9
  5891                           status	equ	0xFD8
  5892                           
  5893 ;; *************** function _lcd_init *****************
  5894 ;; Defined at:
  5895 ;;		line 506 in file "../../../lib/lcd44780.c"
  5896 ;; Parameters:    Size  Location     Type
  5897 ;;  fourbitmode     1    wreg     unsigned char 
  5898 ;; Auto vars:     Size  Location     Type
  5899 ;;  fourbitmode     1    3[COMRAM] unsigned char 
  5900 ;; Return value:  Size  Location     Type
  5901 ;;		None               void
  5902 ;; Registers used:
  5903 ;;		wreg, status,2, status,0
  5904 ;; Tracked objects:
  5905 ;;		On entry : 0/0
  5906 ;;		On exit  : F/0
  5907 ;;		Unchanged: 0/0
  5908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5909 ;;      Params:         0       0       0       0       0       0       0       0       0
  5910 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5911 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5912 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5913 ;;Total ram usage:        3 bytes
  5914 ;; Hardware stack levels used:    1
  5915 ;; Hardware stack levels required when called:    1
  5916 ;; This function calls:
  5917 ;;		Nothing
  5918 ;; This function is called by:
  5919 ;;		_main
  5920 ;; This function uses a non-reentrant model
  5921 ;;
  5922                           
  5923                           	psect	text28
  5924  00275E                     __ptext28:
  5925                           	opt stack 0
  5926  00275E                     _lcd_init:
  5927                           	opt stack 29
  5928                           
  5929                           ;incstack = 0
  5930                           ;lcd_init@fourbitmode stored from wreg
  5931  00275E  6E04               	movwf	lcd_init@fourbitmode,c
  5932                           
  5933                           ;lcd44780.c: 508: LCD_ctrl = 0;
  5934  002760  0100               	movlb	0	; () banked
  5935  002762  6BCE               	clrf	_LCD_ctrl& (0+255),b
  5936                           
  5937                           ; BSR set to: 0
  5938                           ;lcd44780.c: 509: LCD_function = (fourbitmode ? 0x00 : 0x10);
  5939  002764  5004               	movf	lcd_init@fourbitmode,w,c
  5940  002766  E104               	bnz	l158
  5941                           
  5942                           ; BSR set to: 0
  5943  002768  6A06               	clrf	_lcd_init$134+1,c
  5944  00276A  0E10               	movlw	16
  5945  00276C  6E05               	movwf	_lcd_init$134,c
  5946  00276E  D002               	goto	l160
  5947  002770                     l158:
  5948                           
  5949                           ; BSR set to: 0
  5950  002770  6A05               	clrf	_lcd_init$134,c
  5951  002772  6A06               	clrf	_lcd_init$134+1,c
  5952  002774                     l160:
  5953                           
  5954                           ; BSR set to: 0
  5955  002774  C005  F05A         	movff	_lcd_init$134,_LCD_function
  5956                           
  5957                           ;lcd44780.c: 511: LCD_lines = 0;
  5958  002778  6BCF               	clrf	_LCD_lines& (0+255),b
  5959                           
  5960                           ;lcd44780.c: 513: LCD_mode = 0;
  5961  00277A  6BD0               	clrf	_LCD_mode& (0+255),b
  5962                           
  5963                           ; BSR set to: 0
  5964                           ;lcd44780.c: 515: TRISB &= ~0b0100;
  5965  00277C  9493               	bcf	3987,2,c	;volatile
  5966                           
  5967                           ;lcd44780.c: 516: LATB &= ~0b0100;
  5968  00277E  948A               	bcf	3978,2,c	;volatile
  5969                           
  5970                           ;lcd44780.c: 521: TRISB &= ~0b1000;
  5971  002780  9693               	bcf	3987,3,c	;volatile
  5972                           
  5973                           ;lcd44780.c: 522: LATB &= ~0b1000;
  5974  002782  968A               	bcf	3978,3,c	;volatile
  5975                           
  5976                           ; BSR set to: 0
  5977                           ;lcd44780.c: 524: LATB &= ~0b11110000;
  5978  002784  0E0F               	movlw	15
  5979  002786  168A               	andwf	3978,f,c	;volatile
  5980                           
  5981                           ; BSR set to: 0
  5982  002788  0C0F               	retlw	15	;funcret
  5983  00278A                     __end_of_lcd_init:
  5984                           	opt stack 0
  5985                           tblptru	equ	0xFF8
  5986                           tblptrh	equ	0xFF7
  5987                           tblptrl	equ	0xFF6
  5988                           tablat	equ	0xFF5
  5989                           prodl	equ	0xFF3
  5990                           intcon	equ	0xFF2
  5991                           intcon2	equ	0xFF1
  5992                           postinc0	equ	0xFEE
  5993                           wreg	equ	0xFE8
  5994                           postdec1	equ	0xFE5
  5995                           fsr1l	equ	0xFE1
  5996                           indf2	equ	0xFDF
  5997                           postinc2	equ	0xFDE
  5998                           postdec2	equ	0xFDD
  5999                           fsr2h	equ	0xFDA
  6000                           fsr2l	equ	0xFD9
  6001                           status	equ	0xFD8
  6002                           
  6003 ;; *************** function _lcd_begin *****************
  6004 ;; Defined at:
  6005 ;;		line 433 in file "../../../lib/lcd44780.c"
  6006 ;; Parameters:    Size  Location     Type
  6007 ;;  lines           1    wreg     unsigned char 
  6008 ;;  dotsize         1    7[COMRAM] unsigned char 
  6009 ;; Auto vars:     Size  Location     Type
  6010 ;;  lines           1    9[COMRAM] unsigned char 
  6011 ;; Return value:  Size  Location     Type
  6012 ;;		None               void
  6013 ;; Registers used:
  6014 ;;		wreg, status,2, status,0, cstack
  6015 ;; Tracked objects:
  6016 ;;		On entry : F/0
  6017 ;;		On exit  : 0/0
  6018 ;;		Unchanged: 0/0
  6019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6020 ;;      Params:         1       0       0       0       0       0       0       0       0
  6021 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6022 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6023 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6024 ;;Total ram usage:        3 bytes
  6025 ;; Hardware stack levels used:    1
  6026 ;; Hardware stack levels required when called:    4
  6027 ;; This function calls:
  6028 ;;		_lcd_command
  6029 ;;		_lcd_write4bits
  6030 ;; This function is called by:
  6031 ;;		_main
  6032 ;; This function uses a non-reentrant model
  6033 ;;
  6034                           
  6035                           	psect	text29
  6036  001CD4                     __ptext29:
  6037                           	opt stack 0
  6038  001CD4                     _lcd_begin:
  6039                           	opt stack 26
  6040                           
  6041                           ; BSR set to: 0
  6042                           ;incstack = 0
  6043                           ;lcd_begin@lines stored from wreg
  6044  001CD4  6E0A               	movwf	lcd_begin@lines,c
  6045                           
  6046                           ; BSR set to: 0
  6047                           ;lcd44780.c: 434: if(lines > 1)
  6048  001CD6  0E01               	movlw	1
  6049  001CD8  640A               	cpfsgt	lcd_begin@lines,c
  6050  001CDA  D001               	goto	l3134
  6051                           
  6052                           ; BSR set to: 0
  6053                           ;lcd44780.c: 435: LCD_function |= 0x08;
  6054  001CDC  865A               	bsf	_LCD_function,3,c
  6055  001CDE                     l3134:
  6056                           
  6057                           ; BSR set to: 0
  6058                           ;lcd44780.c: 438: LCD_lines = lines;
  6059  001CDE  C00A  F0CF         	movff	lcd_begin@lines,_LCD_lines
  6060                           
  6061                           ; BSR set to: 0
  6062                           ;lcd44780.c: 442: if((dotsize != 0) && (lines == 1))
  6063  001CE2  5008               	movf	lcd_begin@dotsize,w,c
  6064  001CE4  E003               	bz	l3142
  6065                           
  6066                           ; BSR set to: 0
  6067  001CE6  040A               	decf	lcd_begin@lines,w,c
  6068  001CE8  B4D8               	btfsc	status,2,c
  6069                           
  6070                           ; BSR set to: 0
  6071                           ;lcd44780.c: 443: LCD_function |= 0x04;
  6072  001CEA  845A               	bsf	_LCD_function,2,c
  6073  001CEC                     l3142:
  6074                           
  6075                           ; BSR set to: 0
  6076                           ;lcd44780.c: 445: _delay((unsigned long)((15)*(20000000/4000.0)));
  6077  001CEC  0E62               	movlw	98
  6078  001CEE  6E09               	movwf	??_lcd_begin& (0+255),c
  6079  001CF0  0E66               	movlw	102
  6080  001CF2                     u3397:
  6081  001CF2  2EE8               	decfsz	wreg,f,c
  6082  001CF4  D7FE               	goto	u3397
  6083  001CF6  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6084  001CF8  D7FC               	goto	u3397
  6085                           
  6086                           ;lcd44780.c: 448: LATB &= ~0b0100;
  6087  001CFA  948A               	bcf	3978,2,c	;volatile
  6088                           
  6089                           ;lcd44780.c: 449: LATB &= ~0b1000;
  6090  001CFC  968A               	bcf	3978,3,c	;volatile
  6091                           
  6092                           ;lcd44780.c: 452: if(!(LCD_function & 0x10)) {
  6093  001CFE  B85A               	btfsc	_LCD_function,4,c
  6094  001D00  D01B               	goto	l3160
  6095                           
  6096                           ;lcd44780.c: 456: lcd_write4bits(0x03);
  6097  001D02  0E03               	movlw	3
  6098  001D04  EC3F  F014         	call	_lcd_write4bits
  6099                           
  6100                           ;lcd44780.c: 457: _delay((unsigned long)((5)*(20000000/4000.0)));
  6101  001D08  0E21               	movlw	33
  6102  001D0A  6E09               	movwf	??_lcd_begin& (0+255),c
  6103  001D0C  0E76               	movlw	118
  6104  001D0E                     u3407:
  6105  001D0E  2EE8               	decfsz	wreg,f,c
  6106  001D10  D7FE               	goto	u3407
  6107  001D12  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6108  001D14  D7FC               	goto	u3407
  6109  001D16  D000               	nop2	
  6110                           
  6111                           ;lcd44780.c: 459: lcd_write4bits(0x03);
  6112  001D18  0E03               	movlw	3
  6113  001D1A  EC3F  F014         	call	_lcd_write4bits
  6114                           
  6115                           ;lcd44780.c: 460: _delay((unsigned long)((150)*(20000000/4000000.0)));
  6116  001D1E  0EFA               	movlw	250
  6117  001D20                     u3417:
  6118  001D20  2EE8               	decfsz	wreg,f,c
  6119  001D22  D7FE               	goto	u3417
  6120                           
  6121                           ;lcd44780.c: 462: lcd_write4bits(0x03);
  6122  001D24  0E03               	movlw	3
  6123  001D26  EC3F  F014         	call	_lcd_write4bits
  6124                           
  6125                           ;lcd44780.c: 463: _delay((unsigned long)((150)*(20000000/4000000.0)));
  6126  001D2A  0EFA               	movlw	250
  6127  001D2C                     u3427:
  6128  001D2C  2EE8               	decfsz	wreg,f,c
  6129  001D2E  D7FE               	goto	u3427
  6130                           
  6131                           ;lcd44780.c: 465: lcd_write4bits(0x02);
  6132  001D30  0E02               	movlw	2
  6133  001D32  EC3F  F014         	call	_lcd_write4bits
  6134                           
  6135                           ;lcd44780.c: 466: }
  6136  001D36  D01C               	goto	l3168
  6137  001D38                     l3160:
  6138                           
  6139                           ;lcd44780.c: 468: else {
  6140                           ;lcd44780.c: 472: lcd_command(0x20 | LCD_function);
  6141  001D38  505A               	movf	_LCD_function,w,c
  6142  001D3A  0920               	iorlw	32
  6143  001D3C  EC9E  F014         	call	_lcd_command
  6144                           
  6145                           ;lcd44780.c: 473: _delay((unsigned long)((5)*(20000000/4000.0)));
  6146  001D40  0E21               	movlw	33
  6147  001D42  6E09               	movwf	??_lcd_begin& (0+255),c
  6148  001D44  0E76               	movlw	118
  6149  001D46                     u3437:
  6150  001D46  2EE8               	decfsz	wreg,f,c
  6151  001D48  D7FE               	goto	u3437
  6152  001D4A  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6153  001D4C  D7FC               	goto	u3437
  6154  001D4E  D000               	nop2	
  6155                           
  6156                           ;lcd44780.c: 476: lcd_command(0x20 | LCD_function);
  6157  001D50  505A               	movf	_LCD_function,w,c
  6158  001D52  0920               	iorlw	32
  6159  001D54  EC9E  F014         	call	_lcd_command
  6160                           
  6161                           ;lcd44780.c: 477: _delay((unsigned long)((5)*(20000000/4000.0)));
  6162  001D58  0E21               	movlw	33
  6163  001D5A  6E09               	movwf	??_lcd_begin& (0+255),c
  6164  001D5C  0E76               	movlw	118
  6165  001D5E                     u3447:
  6166  001D5E  2EE8               	decfsz	wreg,f,c
  6167  001D60  D7FE               	goto	u3447
  6168  001D62  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6169  001D64  D7FC               	goto	u3447
  6170  001D66  D000               	nop2	
  6171                           
  6172                           ;lcd44780.c: 481: lcd_command(0x20 | LCD_function);
  6173  001D68  505A               	movf	_LCD_function,w,c
  6174  001D6A  0920               	iorlw	32
  6175  001D6C  EC9E  F014         	call	_lcd_command
  6176  001D70                     l3168:
  6177                           
  6178                           ;lcd44780.c: 482: }
  6179                           ;lcd44780.c: 485: lcd_command(0x20 | LCD_function);
  6180  001D70  505A               	movf	_LCD_function,w,c
  6181  001D72  0920               	iorlw	32
  6182  001D74  EC9E  F014         	call	_lcd_command
  6183                           
  6184                           ;lcd44780.c: 488: LCD_ctrl = 0x04 | 0x00 | 0x00;
  6185  001D78  0E04               	movlw	4
  6186  001D7A  0100               	movlb	0	; () banked
  6187  001D7C  6FCE               	movwf	_LCD_ctrl& (0+255),b
  6188                           
  6189                           ; BSR set to: 0
  6190                           ;lcd44780.c: 489: lcd_command(0x08 | LCD_ctrl);
  6191  001D7E  51CE               	movf	_LCD_ctrl& (0+255),w,b
  6192  001D80  0908               	iorlw	8
  6193  001D82  EC9E  F014         	call	_lcd_command
  6194                           
  6195                           ;lcd44780.c: 492: lcd_command(0x01);
  6196  001D86  0E01               	movlw	1
  6197  001D88  EC9E  F014         	call	_lcd_command
  6198                           
  6199                           ;lcd44780.c: 493: _delay((unsigned long)((2)*(20000000/4000.0)));
  6200  001D8C  0E0D               	movlw	13
  6201  001D8E  6E09               	movwf	??_lcd_begin& (0+255),c
  6202  001D90  0EFC               	movlw	252
  6203  001D92                     u3457:
  6204  001D92  2EE8               	decfsz	wreg,f,c
  6205  001D94  D7FE               	goto	u3457
  6206  001D96  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6207  001D98  D7FC               	goto	u3457
  6208                           
  6209                           ;lcd44780.c: 496: LCD_mode = 0x02 | 0x00;
  6210  001D9A  0E02               	movlw	2
  6211  001D9C  0100               	movlb	0	; () banked
  6212  001D9E  6FD0               	movwf	_LCD_mode& (0+255),b
  6213                           
  6214                           ; BSR set to: 0
  6215                           ;lcd44780.c: 498: lcd_command(0x04 | LCD_mode);
  6216  001DA0  51D0               	movf	_LCD_mode& (0+255),w,b
  6217  001DA2  0904               	iorlw	4
  6218  001DA4  EF9E  F014         	goto	_lcd_command
  6219  001DA8                     __end_of_lcd_begin:
  6220                           	opt stack 0
  6221                           tblptru	equ	0xFF8
  6222                           tblptrh	equ	0xFF7
  6223                           tblptrl	equ	0xFF6
  6224                           tablat	equ	0xFF5
  6225                           prodl	equ	0xFF3
  6226                           intcon	equ	0xFF2
  6227                           intcon2	equ	0xFF1
  6228                           postinc0	equ	0xFEE
  6229                           wreg	equ	0xFE8
  6230                           postdec1	equ	0xFE5
  6231                           fsr1l	equ	0xFE1
  6232                           indf2	equ	0xFDF
  6233                           postinc2	equ	0xFDE
  6234                           postdec2	equ	0xFDD
  6235                           fsr2h	equ	0xFDA
  6236                           fsr2l	equ	0xFD9
  6237                           status	equ	0xFD8
  6238                           
  6239 ;; *************** function _indicator *****************
  6240 ;; Defined at:
  6241 ;;		line 473 in file "../../../src/print.c"
  6242 ;; Parameters:    Size  Location     Type
  6243 ;;  indicate        1    wreg     unsigned char 
  6244 ;; Auto vars:     Size  Location     Type
  6245 ;;  indicate        1   13[COMRAM] unsigned char 
  6246 ;; Return value:  Size  Location     Type
  6247 ;;		None               void
  6248 ;; Registers used:
  6249 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6250 ;; Tracked objects:
  6251 ;;		On entry : 0/0
  6252 ;;		On exit  : 0/0
  6253 ;;		Unchanged: 0/0
  6254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6255 ;;      Params:         0       0       0       0       0       0       0       0       0
  6256 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6257 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6258 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6259 ;;Total ram usage:        1 bytes
  6260 ;; Hardware stack levels used:    1
  6261 ;; Hardware stack levels required when called:    5
  6262 ;; This function calls:
  6263 ;;		_lcd_gotoxy
  6264 ;;		_lcd_puts
  6265 ;; This function is called by:
  6266 ;;		_main
  6267 ;; This function uses a non-reentrant model
  6268 ;;
  6269                           
  6270                           	psect	text30
  6271  0028DE                     __ptext30:
  6272                           	opt stack 0
  6273  0028DE                     _indicator:
  6274                           	opt stack 25
  6275                           
  6276                           ;incstack = 0
  6277                           ;indicator@indicate stored from wreg
  6278  0028DE  6E0E               	movwf	indicator@indicate,c
  6279                           
  6280                           ;print.c: 487: lcd_gotoxy(0, 1);
  6281  0028E0  0E01               	movlw	1
  6282  0028E2  6E08               	movwf	lcd_gotoxy@row,c
  6283  0028E4  0E00               	movlw	0
  6284  0028E6  EC4C  F013         	call	_lcd_gotoxy
  6285                           
  6286                           ;print.c: 488: if(indicate) {
  6287  0028EA  500E               	movf	indicator@indicate,w,c
  6288  0028EC  E003               	bz	l3420
  6289                           
  6290                           ;print.c: 489: lcd_puts("-*-");
  6291  0028EE  0EC5               	movlw	STR_26& (0+255)
  6292  0028F0  EFC5  F013         	goto	_lcd_puts
  6293  0028F4                     l3420:
  6294                           
  6295                           ;print.c: 491: lcd_puts("   ");
  6296  0028F4  0E94               	movlw	(STR_30+3)& (0+255)
  6297  0028F6  EFC5  F013         	goto	_lcd_puts
  6298  0028FA                     __end_of_indicator:
  6299                           	opt stack 0
  6300                           tblptru	equ	0xFF8
  6301                           tblptrh	equ	0xFF7
  6302                           tblptrl	equ	0xFF6
  6303                           tablat	equ	0xFF5
  6304                           prodl	equ	0xFF3
  6305                           intcon	equ	0xFF2
  6306                           intcon2	equ	0xFF1
  6307                           postinc0	equ	0xFEE
  6308                           wreg	equ	0xFE8
  6309                           postdec1	equ	0xFE5
  6310                           fsr1l	equ	0xFE1
  6311                           indf2	equ	0xFDF
  6312                           postinc2	equ	0xFDE
  6313                           postdec2	equ	0xFDD
  6314                           fsr2h	equ	0xFDA
  6315                           fsr2l	equ	0xFD9
  6316                           status	equ	0xFD8
  6317                           
  6318 ;; *************** function _lcd_puts *****************
  6319 ;; Defined at:
  6320 ;;		line 185 in file "../../../lib/lcd44780.c"
  6321 ;; Parameters:    Size  Location     Type
  6322 ;;  string          1    wreg     PTR const unsigned char 
  6323 ;;		 -> STR_33(5), STR_32(6), STR_31(7), STR_30(7), 
  6324 ;;		 -> STR_28(10), STR_27(4), STR_26(4), STR_25(6), 
  6325 ;; Auto vars:     Size  Location     Type
  6326 ;;  string          1    8[COMRAM] PTR const unsigned char 
  6327 ;;		 -> STR_33(5), STR_32(6), STR_31(7), STR_30(7), 
  6328 ;;		 -> STR_28(10), STR_27(4), STR_26(4), STR_25(6), 
  6329 ;;  i               1    7[COMRAM] unsigned char 
  6330 ;; Return value:  Size  Location     Type
  6331 ;;		None               void
  6332 ;; Registers used:
  6333 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6334 ;; Tracked objects:
  6335 ;;		On entry : 0/0
  6336 ;;		On exit  : 0/0
  6337 ;;		Unchanged: 0/0
  6338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6339 ;;      Params:         0       0       0       0       0       0       0       0       0
  6340 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6341 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6342 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6343 ;;Total ram usage:        3 bytes
  6344 ;; Hardware stack levels used:    1
  6345 ;; Hardware stack levels required when called:    3
  6346 ;; This function calls:
  6347 ;;		_lcd_send
  6348 ;; This function is called by:
  6349 ;;		_print_reading
  6350 ;;		_indicator
  6351 ;;		_main
  6352 ;; This function uses a non-reentrant model
  6353 ;;
  6354                           
  6355                           	psect	text31
  6356  00278A                     __ptext31:
  6357                           	opt stack 0
  6358  00278A                     _lcd_puts:
  6359                           	opt stack 25
  6360                           
  6361                           ;incstack = 0
  6362                           ;lcd_puts@string stored from wreg
  6363  00278A  6E09               	movwf	lcd_puts@string,c
  6364                           
  6365                           ;lcd44780.c: 186: uint8_t i;
  6366                           ;lcd44780.c: 187: for(i = 0; string[i]; i++) lcd_send((string[i]), 1);
  6367  00278C  6A08               	clrf	lcd_puts@i,c
  6368  00278E  D006               	goto	l2994
  6369  002790                     l2990:
  6370  002790  0E01               	movlw	1
  6371  002792  6E05               	movwf	lcd_send@mode,c
  6372  002794  D807               	call	PL24	;call to abstracted procedure
  6373  002796  EC7D  F014         	call	_lcd_send
  6374  00279A  2A08               	incf	lcd_puts@i,f,c
  6375  00279C                     l2994:
  6376  00279C  D803               	call	PL24	;call to abstracted procedure
  6377  00279E  B4D8               	btfsc	status,2,c
  6378  0027A0  0012               	return		;funcret
  6379  0027A2  D7F6               	goto	l2990
  6380  0027A4                     __end_of_lcd_puts:
  6381                           	opt stack 0
  6382  0027A4                     PL24:
  6383                           	opt stack 25
  6384  0027A4  5009               	movf	lcd_puts@string,w,c
  6385  0027A6  2408               	addwf	lcd_puts@i,w,c
  6386  0027A8  6E07               	movwf	??_lcd_puts& (0+255),c
  6387  0027AA  C007  FFF6         	movff	??_lcd_puts,tblptrl
  6388  0027AE                     	if	0	;There is only one active tblptr byte
  6389  0027AE                     	endif
  6390  0027AE                     	if	0	;tblptru may be non-zero
  6391  0027AE                     	endif
  6392  0027AE                     	if	0	;tblptru may be non-zero
  6393  0027AE                     	endif
  6394  0027AE  0008               	tblrd		*
  6395  0027B0  50F5               	movf	tablat,w,c
  6396  0027B2  0012               	return	
  6397  0027B4                     __end_ofPL24:
  6398                           	opt stack 0
  6399                           tblptru	equ	0xFF8
  6400                           tblptrh	equ	0xFF7
  6401                           tblptrl	equ	0xFF6
  6402                           tablat	equ	0xFF5
  6403                           prodl	equ	0xFF3
  6404                           intcon	equ	0xFF2
  6405                           intcon2	equ	0xFF1
  6406                           postinc0	equ	0xFEE
  6407                           wreg	equ	0xFE8
  6408                           postdec1	equ	0xFE5
  6409                           fsr1l	equ	0xFE1
  6410                           indf2	equ	0xFDF
  6411                           postinc2	equ	0xFDE
  6412                           postdec2	equ	0xFDD
  6413                           fsr2h	equ	0xFDA
  6414                           fsr2l	equ	0xFD9
  6415                           status	equ	0xFD8
  6416                           
  6417 ;; *************** function _calibrate *****************
  6418 ;; Defined at:
  6419 ;;		line 24 in file "../../../src/measure.c"
  6420 ;; Parameters:    Size  Location     Type
  6421 ;;		None
  6422 ;; Auto vars:     Size  Location     Type
  6423 ;;  i               1   62[COMRAM] unsigned char 
  6424 ;; Return value:  Size  Location     Type
  6425 ;;		None               void
  6426 ;; Registers used:
  6427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6428 ;; Tracked objects:
  6429 ;;		On entry : 0/0
  6430 ;;		On exit  : 0/0
  6431 ;;		Unchanged: 0/0
  6432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6433 ;;      Params:         0       0       0       0       0       0       0       0       0
  6434 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6435 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6436 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6437 ;;Total ram usage:        1 bytes
  6438 ;; Hardware stack levels used:    1
  6439 ;; Hardware stack levels required when called:    6
  6440 ;; This function calls:
  6441 ;;		___lwtofl
  6442 ;;		_delay10ms
  6443 ;;		_lcd_clear
  6444 ;;		_lcd_gotoxy
  6445 ;;		_lcd_send
  6446 ;;		_measure_freq
  6447 ;;		_put_str
  6448 ;;		_ser_puts
  6449 ;; This function is called by:
  6450 ;;		_main
  6451 ;; This function uses a non-reentrant model
  6452 ;;
  6453                           
  6454                           	psect	text32
  6455  001BF2                     __ptext32:
  6456                           	opt stack 0
  6457  001BF2                     _calibrate:
  6458                           	opt stack 24
  6459                           
  6460                           ;measure.c: 25: uint8_t i;
  6461                           ;measure.c: 28: lcd_clear();
  6462                           
  6463                           ;incstack = 0
  6464  001BF2  EC8A  F014         	call	_lcd_clear	;wreg free
  6465                           
  6466                           ;measure.c: 30: lcd_gotoxy(0, 0);
  6467  001BF6  0E00               	movlw	0
  6468  001BF8  6A08               	clrf	lcd_gotoxy@row,c
  6469  001BFA  EC4C  F013         	call	_lcd_gotoxy
  6470                           
  6471                           ;measure.c: 31: put_str("Calibrating");
  6472  001BFE  0E69               	movlw	STR_1& (0+255)
  6473  001C00  ECDA  F013         	call	_put_str
  6474                           
  6475                           ;measure.c: 33: lcd_gotoxy(0, 1);
  6476  001C04  0E01               	movlw	1
  6477  001C06  6E08               	movwf	lcd_gotoxy@row,c
  6478  001C08  0E00               	movlw	0
  6479  001C0A  EC4C  F013         	call	_lcd_gotoxy
  6480                           
  6481                           ;measure.c: 34: ser_puts("\r\n");
  6482  001C0E  0E9B               	movlw	(STR_29+3)& (0+255)
  6483  001C10  EC60  F014         	call	_ser_puts
  6484                           
  6485                           ;measure.c: 35: put_str("please wait...");
  6486  001C14  0E4D               	movlw	STR_3& (0+255)
  6487  001C16  ECDA  F013         	call	_put_str
  6488                           
  6489                           ;measure.c: 38: LATC &= ~(1 << 5);
  6490  001C1A  9A8B               	bcf	3979,5,c	;volatile
  6491                           
  6492                           ;measure.c: 40: F1 = (double)measure_freq();
  6493  001C1C  EC8C  F00C         	call	_measure_freq	;wreg free
  6494  001C20  C036  F03B         	movff	?_measure_freq,___lwtofl@c
  6495  001C24  C037  F03C         	movff	?_measure_freq+1,___lwtofl@c+1
  6496  001C28  ECEF  F013         	call	___lwtofl	;wreg free
  6497  001C2C  C03B  F0E5         	movff	?___lwtofl,_F1
  6498  001C30  C03C  F0E6         	movff	?___lwtofl+1,_F1+1
  6499  001C34  C03D  F0E7         	movff	?___lwtofl+2,_F1+2
  6500  001C38  C03E  F0E8         	movff	?___lwtofl+3,_F1+3
  6501                           
  6502                           ;measure.c: 41: delay10ms(50);
  6503  001C3C  0E32               	movlw	50
  6504  001C3E  ECA6  F014         	call	_delay10ms
  6505                           
  6506                           ;measure.c: 43: F1 = (double)measure_freq();
  6507  001C42  EC8C  F00C         	call	_measure_freq	;wreg free
  6508  001C46  C036  F03B         	movff	?_measure_freq,___lwtofl@c
  6509  001C4A  C037  F03C         	movff	?_measure_freq+1,___lwtofl@c+1
  6510  001C4E  ECEF  F013         	call	___lwtofl	;wreg free
  6511  001C52  C03B  F0E5         	movff	?___lwtofl,_F1
  6512  001C56  C03C  F0E6         	movff	?___lwtofl+1,_F1+1
  6513  001C5A  C03D  F0E7         	movff	?___lwtofl+2,_F1+2
  6514  001C5E  C03E  F0E8         	movff	?___lwtofl+3,_F1+3
  6515                           
  6516                           ;measure.c: 44: LATC |= (1 << 5);
  6517  001C62  8A8B               	bsf	3979,5,c	;volatile
  6518                           
  6519                           ;measure.c: 46: F2 = (double)measure_freq();
  6520  001C64  EC8C  F00C         	call	_measure_freq	;wreg free
  6521  001C68  C036  F03B         	movff	?_measure_freq,___lwtofl@c
  6522  001C6C  C037  F03C         	movff	?_measure_freq+1,___lwtofl@c+1
  6523  001C70  ECEF  F013         	call	___lwtofl	;wreg free
  6524  001C74  C03B  F0B8         	movff	?___lwtofl,_F2
  6525  001C78  C03C  F0B9         	movff	?___lwtofl+1,_F2+1
  6526  001C7C  C03D  F0BA         	movff	?___lwtofl+2,_F2+2
  6527  001C80  C03E  F0BB         	movff	?___lwtofl+3,_F2+3
  6528                           
  6529                           ;measure.c: 47: delay10ms(50);
  6530  001C84  0E32               	movlw	50
  6531  001C86  ECA6  F014         	call	_delay10ms
  6532                           
  6533                           ;measure.c: 49: F2 = (double)measure_freq();
  6534  001C8A  EC8C  F00C         	call	_measure_freq	;wreg free
  6535  001C8E  C036  F03B         	movff	?_measure_freq,___lwtofl@c
  6536  001C92  C037  F03C         	movff	?_measure_freq+1,___lwtofl@c+1
  6537  001C96  ECEF  F013         	call	___lwtofl	;wreg free
  6538  001C9A  C03B  F0B8         	movff	?___lwtofl,_F2
  6539  001C9E  C03C  F0B9         	movff	?___lwtofl+1,_F2+1
  6540  001CA2  C03D  F0BA         	movff	?___lwtofl+2,_F2+2
  6541  001CA6  C03E  F0BB         	movff	?___lwtofl+3,_F2+3
  6542                           
  6543                           ;measure.c: 50: LATC &= ~(1 << 5);
  6544  001CAA  9A8B               	bcf	3979,5,c	;volatile
  6545                           
  6546                           ;measure.c: 54: lcd_gotoxy(11, 0);
  6547  001CAC  6A08               	clrf	lcd_gotoxy@row,c
  6548  001CAE  0E0B               	movlw	11
  6549  001CB0  EC4C  F013         	call	_lcd_gotoxy
  6550                           
  6551                           ;measure.c: 56: for(i = 0; i < 6; i++) {
  6552  001CB4  6A3F               	clrf	calibrate@i,c
  6553  001CB6                     l3996:
  6554                           
  6555                           ;measure.c: 57: lcd_send(('='), 1);
  6556  001CB6  0E01               	movlw	1
  6557  001CB8  6E05               	movwf	lcd_send@mode,c
  6558  001CBA  0E3D               	movlw	61
  6559  001CBC  EC7D  F014         	call	_lcd_send
  6560                           
  6561                           ;measure.c: 59: delay10ms(28);
  6562  001CC0  0E1C               	movlw	28
  6563  001CC2  ECA6  F014         	call	_delay10ms
  6564  001CC6  2A3F               	incf	calibrate@i,f,c
  6565  001CC8  0E05               	movlw	5
  6566  001CCA  643F               	cpfsgt	calibrate@i,c
  6567  001CCC  D7F4               	goto	l3996
  6568                           
  6569                           ;measure.c: 60: }
  6570                           ;measure.c: 62: ser_puts("\r\n");
  6571  001CCE  0E9B               	movlw	(STR_29+3)& (0+255)
  6572  001CD0  EF60  F014         	goto	_ser_puts
  6573  001CD4                     __end_of_calibrate:
  6574                           	opt stack 0
  6575                           tblptru	equ	0xFF8
  6576                           tblptrh	equ	0xFF7
  6577                           tblptrl	equ	0xFF6
  6578                           tablat	equ	0xFF5
  6579                           prodl	equ	0xFF3
  6580                           intcon	equ	0xFF2
  6581                           intcon2	equ	0xFF1
  6582                           postinc0	equ	0xFEE
  6583                           wreg	equ	0xFE8
  6584                           postdec1	equ	0xFE5
  6585                           fsr1l	equ	0xFE1
  6586                           indf2	equ	0xFDF
  6587                           postinc2	equ	0xFDE
  6588                           postdec2	equ	0xFDD
  6589                           fsr2h	equ	0xFDA
  6590                           fsr2l	equ	0xFD9
  6591                           status	equ	0xFD8
  6592                           
  6593 ;; *************** function _ser_puts *****************
  6594 ;; Defined at:
  6595 ;;		line 92 in file "../../../lib/ser.c"
  6596 ;; Parameters:    Size  Location     Type
  6597 ;;  s               1    wreg     PTR const unsigned char 
  6598 ;;		 -> STR_34(3), STR_29(6), STR_24(3), STR_14(3), 
  6599 ;;		 -> STR_13(5), STR_12(3), STR_11(8), STR_10(6), 
  6600 ;;		 -> STR_9(6), STR_8(6), STR_7(5), STR_4(3), 
  6601 ;;		 -> STR_2(3), 
  6602 ;; Auto vars:     Size  Location     Type
  6603 ;;  s               1    4[COMRAM] PTR const unsigned char 
  6604 ;;		 -> STR_34(3), STR_29(6), STR_24(3), STR_14(3), 
  6605 ;;		 -> STR_13(5), STR_12(3), STR_11(8), STR_10(6), 
  6606 ;;		 -> STR_9(6), STR_8(6), STR_7(5), STR_4(3), 
  6607 ;;		 -> STR_2(3), 
  6608 ;; Return value:  Size  Location     Type
  6609 ;;		None               void
  6610 ;; Registers used:
  6611 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6612 ;; Tracked objects:
  6613 ;;		On entry : 0/0
  6614 ;;		On exit  : 0/0
  6615 ;;		Unchanged: 0/0
  6616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6617 ;;      Params:         0       0       0       0       0       0       0       0       0
  6618 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6619 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6620 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6621 ;;Total ram usage:        1 bytes
  6622 ;; Hardware stack levels used:    1
  6623 ;; Hardware stack levels required when called:    2
  6624 ;; This function calls:
  6625 ;;		_ser_putch
  6626 ;; This function is called by:
  6627 ;;		_calibrate
  6628 ;;		_measure_capacitance
  6629 ;;		_print_unit
  6630 ;;		_main
  6631 ;; This function uses a non-reentrant model
  6632 ;;
  6633                           
  6634                           	psect	text33
  6635  0028C0                     __ptext33:
  6636                           	opt stack 0
  6637  0028C0                     _ser_puts:
  6638                           	opt stack 28
  6639                           
  6640                           ;incstack = 0
  6641                           ;ser_puts@s stored from wreg
  6642  0028C0  6E05               	movwf	ser_puts@s,c
  6643                           
  6644                           ;ser.c: 93: while(*s) ser_putch(*s++);
  6645  0028C2  D004               	goto	l3032
  6646  0028C4                     l3028:
  6647  0028C4  D807               	call	PL40	;call to abstracted procedure
  6648  0028C6  EC18  F014         	call	_ser_putch
  6649  0028CA  2A05               	incf	ser_puts@s,f,c
  6650  0028CC                     l3032:
  6651  0028CC  D803               	call	PL40	;call to abstracted procedure
  6652  0028CE  B4D8               	btfsc	status,2,c
  6653  0028D0  0012               	return		;funcret
  6654  0028D2  D7F8               	goto	l3028
  6655  0028D4                     __end_of_ser_puts:
  6656                           	opt stack 0
  6657  0028D4                     PL40:
  6658                           	opt stack 28
  6659  0028D4  C005  FFF6         	movff	ser_puts@s,tblptrl
  6660  0028D8                     	if	0	;There is only one active tblptr byte
  6661  0028D8                     	endif
  6662  0028D8                     	if	0	;tblptru may be non-zero
  6663  0028D8                     	endif
  6664  0028D8                     	if	0	;tblptru may be non-zero
  6665  0028D8                     	endif
  6666  0028D8  0008               	tblrd		*
  6667  0028DA  50F5               	movf	tablat,w,c
  6668  0028DC  0012               	return	
  6669  0028DE                     __end_ofPL40:
  6670                           	opt stack 0
  6671                           tblptru	equ	0xFF8
  6672                           tblptrh	equ	0xFF7
  6673                           tblptrl	equ	0xFF6
  6674                           tablat	equ	0xFF5
  6675                           prodl	equ	0xFF3
  6676                           intcon	equ	0xFF2
  6677                           intcon2	equ	0xFF1
  6678                           postinc0	equ	0xFEE
  6679                           wreg	equ	0xFE8
  6680                           postdec1	equ	0xFE5
  6681                           fsr1l	equ	0xFE1
  6682                           indf2	equ	0xFDF
  6683                           postinc2	equ	0xFDE
  6684                           postdec2	equ	0xFDD
  6685                           fsr2h	equ	0xFDA
  6686                           fsr2l	equ	0xFD9
  6687                           status	equ	0xFD8
  6688                           
  6689 ;; *************** function _measure_freq *****************
  6690 ;; Defined at:
  6691 ;;		line 69 in file "../../../src/measure.c"
  6692 ;; Parameters:    Size  Location     Type
  6693 ;;		None
  6694 ;; Auto vars:     Size  Location     Type
  6695 ;;  count           2   56[COMRAM] unsigned int 
  6696 ;; Return value:  Size  Location     Type
  6697 ;;                  2   53[COMRAM] unsigned short 
  6698 ;; Registers used:
  6699 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6700 ;; Tracked objects:
  6701 ;;		On entry : 0/0
  6702 ;;		On exit  : 0/0
  6703 ;;		Unchanged: 0/0
  6704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6705 ;;      Params:         2       0       0       0       0       0       0       0       0
  6706 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6707 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6708 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6709 ;;Total ram usage:        5 bytes
  6710 ;; Hardware stack levels used:    1
  6711 ;; Hardware stack levels required when called:    5
  6712 ;; This function calls:
  6713 ;;		_format_number
  6714 ;;		_lcd_gotoxy
  6715 ;;		_put_str
  6716 ;;		_timer0_read_ps
  6717 ;; This function is called by:
  6718 ;;		_calibrate
  6719 ;;		_measure_capacitance
  6720 ;;		_measure_inductance
  6721 ;; This function uses a non-reentrant model
  6722 ;;
  6723                           
  6724                           	psect	text34
  6725  001918                     __ptext34:
  6726                           	opt stack 0
  6727  001918                     _measure_freq:
  6728                           	opt stack 24
  6729                           
  6730                           ;measure.c: 70: uint16_t count;
  6731                           ;measure.c: 72: INTCON &= ~0b100;
  6732                           
  6733                           ;incstack = 0
  6734  001918  94F2               	bcf	intcon,2,c	;volatile
  6735                           
  6736                           ;measure.c: 76: TRISA &= ~0b00010000;
  6737  00191A  9892               	bcf	3986,4,c	;volatile
  6738                           
  6739                           ;measure.c: 78: _delay((unsigned long)((20)*(20000000/4000.0)));
  6740  00191C  0E82               	movlw	130
  6741  00191E  6E38               	movwf	??_measure_freq& (0+255),c
  6742  001920  0EDE               	movlw	222
  6743  001922                     u3467:
  6744  001922  2EE8               	decfsz	wreg,f,c
  6745  001924  D7FE               	goto	u3467
  6746  001926  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6747  001928  D7FC               	goto	u3467
  6748                           
  6749                           ;measure.c: 81: TMR0 = 0x00;
  6750  00192A  6AD6               	clrf	4054,c	;volatile
  6751  00192C  6AD7               	clrf	4055,c	;volatile
  6752                           
  6753                           ;measure.c: 83: LATC &= ~0b00000010; LATC |= (!!(1)) << 1;;
  6754  00192E  928B               	bcf	3979,1,c	;volatile
  6755  001930  828B               	bsf	3979,1,c	;volatile
  6756                           
  6757                           ;measure.c: 86: _delay((unsigned long)((10)*(20000000/4000.0)));
  6758  001932  0E41               	movlw	65
  6759  001934  6E38               	movwf	??_measure_freq& (0+255),c
  6760  001936  0EEE               	movlw	238
  6761  001938                     u3477:
  6762  001938  2EE8               	decfsz	wreg,f,c
  6763  00193A  D7FE               	goto	u3477
  6764  00193C  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6765  00193E  D7FC               	goto	u3477
  6766  001940  D000               	nop2	
  6767                           
  6768                           ;measure.c: 87: _delay((unsigned long)((10)*(20000000/4000.0)));
  6769  001942  0E41               	movlw	65
  6770  001944  6E38               	movwf	??_measure_freq& (0+255),c
  6771  001946  0EEE               	movlw	238
  6772  001948                     u3487:
  6773  001948  2EE8               	decfsz	wreg,f,c
  6774  00194A  D7FE               	goto	u3487
  6775  00194C  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6776  00194E  D7FC               	goto	u3487
  6777  001950  D000               	nop2	
  6778                           
  6779                           ;measure.c: 88: _delay((unsigned long)((10)*(20000000/4000.0)));
  6780  001952  0E41               	movlw	65
  6781  001954  6E38               	movwf	??_measure_freq& (0+255),c
  6782  001956  0EEE               	movlw	238
  6783  001958                     u3497:
  6784  001958  2EE8               	decfsz	wreg,f,c
  6785  00195A  D7FE               	goto	u3497
  6786  00195C  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6787  00195E  D7FC               	goto	u3497
  6788  001960  D000               	nop2	
  6789                           
  6790                           ;measure.c: 89: _delay((unsigned long)((10)*(20000000/4000.0)));
  6791  001962  0E41               	movlw	65
  6792  001964  6E38               	movwf	??_measure_freq& (0+255),c
  6793  001966  0EEE               	movlw	238
  6794  001968                     u3507:
  6795  001968  2EE8               	decfsz	wreg,f,c
  6796  00196A  D7FE               	goto	u3507
  6797  00196C  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6798  00196E  D7FC               	goto	u3507
  6799  001970  D000               	nop2	
  6800                           
  6801                           ;measure.c: 90: _delay((unsigned long)((10)*(20000000/4000.0)));
  6802  001972  0E41               	movlw	65
  6803  001974  6E38               	movwf	??_measure_freq& (0+255),c
  6804  001976  0EEE               	movlw	238
  6805  001978                     u3517:
  6806  001978  2EE8               	decfsz	wreg,f,c
  6807  00197A  D7FE               	goto	u3517
  6808  00197C  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6809  00197E  D7FC               	goto	u3517
  6810  001980  D000               	nop2	
  6811                           
  6812                           ;measure.c: 91: _delay((unsigned long)((10)*(20000000/4000.0)));
  6813  001982  0E41               	movlw	65
  6814  001984  6E38               	movwf	??_measure_freq& (0+255),c
  6815  001986  0EEE               	movlw	238
  6816  001988                     u3527:
  6817  001988  2EE8               	decfsz	wreg,f,c
  6818  00198A  D7FE               	goto	u3527
  6819  00198C  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6820  00198E  D7FC               	goto	u3527
  6821  001990  D000               	nop2	
  6822                           
  6823                           ;measure.c: 92: _delay((unsigned long)((10)*(20000000/4000.0)));
  6824  001992  0E41               	movlw	65
  6825  001994  6E38               	movwf	??_measure_freq& (0+255),c
  6826  001996  0EEE               	movlw	238
  6827  001998                     u3537:
  6828  001998  2EE8               	decfsz	wreg,f,c
  6829  00199A  D7FE               	goto	u3537
  6830  00199C  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6831  00199E  D7FC               	goto	u3537
  6832  0019A0  D000               	nop2	
  6833                           
  6834                           ;measure.c: 93: _delay((unsigned long)((10)*(20000000/4000.0)));
  6835  0019A2  0E41               	movlw	65
  6836  0019A4  6E38               	movwf	??_measure_freq& (0+255),c
  6837  0019A6  0EEE               	movlw	238
  6838  0019A8                     u3547:
  6839  0019A8  2EE8               	decfsz	wreg,f,c
  6840  0019AA  D7FE               	goto	u3547
  6841  0019AC  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6842  0019AE  D7FC               	goto	u3547
  6843  0019B0  D000               	nop2	
  6844                           
  6845                           ;measure.c: 94: _delay((unsigned long)((10)*(20000000/4000.0)));
  6846  0019B2  0E41               	movlw	65
  6847  0019B4  6E38               	movwf	??_measure_freq& (0+255),c
  6848  0019B6  0EEE               	movlw	238
  6849  0019B8                     u3557:
  6850  0019B8  2EE8               	decfsz	wreg,f,c
  6851  0019BA  D7FE               	goto	u3557
  6852  0019BC  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6853  0019BE  D7FC               	goto	u3557
  6854  0019C0  D000               	nop2	
  6855                           
  6856                           ;measure.c: 95: _delay((unsigned long)((10)*(20000000/4000.0)));
  6857  0019C2  0E41               	movlw	65
  6858  0019C4  6E38               	movwf	??_measure_freq& (0+255),c
  6859  0019C6  0EEE               	movlw	238
  6860  0019C8                     u3567:
  6861  0019C8  2EE8               	decfsz	wreg,f,c
  6862  0019CA  D7FE               	goto	u3567
  6863  0019CC  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6864  0019CE  D7FC               	goto	u3567
  6865  0019D0  D000               	nop2	
  6866                           
  6867                           ;measure.c: 97: LATC &= ~0b00000010; LATC |= (!!(0)) << 1;;
  6868  0019D2  928B               	bcf	3979,1,c	;volatile
  6869  0019D4  508B               	movf	3979,w,c	;volatile
  6870                           
  6871                           ;measure.c: 100: TRISA |= 0b00010000;
  6872  0019D6  8892               	bsf	3986,4,c	;volatile
  6873                           
  6874                           ;measure.c: 103: count = timer0_read_ps();
  6875  0019D8  EC5B  F012         	call	_timer0_read_ps	;wreg free
  6876  0019DC  C004  F039         	movff	?_timer0_read_ps,measure_freq@count
  6877  0019E0  C005  F03A         	movff	?_timer0_read_ps+1,measure_freq@count+1
  6878                           
  6879                           ;measure.c: 106: lcd_gotoxy(0, 1);
  6880  0019E4  0E01               	movlw	1
  6881  0019E6  6E08               	movwf	lcd_gotoxy@row,c
  6882  0019E8  0E00               	movlw	0
  6883  0019EA  EC4C  F013         	call	_lcd_gotoxy
  6884                           
  6885                           ;measure.c: 107: put_str("Freq=");
  6886  0019EE  0EB0               	movlw	STR_5& (0+255)
  6887  0019F0  ECDA  F013         	call	_put_str
  6888                           
  6889                           ;measure.c: 108: format_number( count, 10, 5);
  6890  0019F4  C039  F00B         	movff	measure_freq@count,format_number@n
  6891  0019F8  C03A  F00C         	movff	measure_freq@count+1,format_number@n+1
  6892  0019FC  0E0A               	movlw	10
  6893  0019FE  6E0D               	movwf	format_number@base,c
  6894  001A00  0E05               	movlw	5
  6895  001A02  6E0E               	movwf	format_number@pad,c
  6896  001A04  EC44  F010         	call	_format_number	;wreg free
  6897                           
  6898                           ;measure.c: 111: return count;
  6899  001A08  C039  F036         	movff	measure_freq@count,?_measure_freq
  6900  001A0C  C03A  F037         	movff	measure_freq@count+1,?_measure_freq+1
  6901  001A10  0012               	return		;funcret
  6902  001A12                     __end_of_measure_freq:
  6903                           	opt stack 0
  6904                           tblptru	equ	0xFF8
  6905                           tblptrh	equ	0xFF7
  6906                           tblptrl	equ	0xFF6
  6907                           tablat	equ	0xFF5
  6908                           prodl	equ	0xFF3
  6909                           intcon	equ	0xFF2
  6910                           intcon2	equ	0xFF1
  6911                           postinc0	equ	0xFEE
  6912                           wreg	equ	0xFE8
  6913                           postdec1	equ	0xFE5
  6914                           fsr1l	equ	0xFE1
  6915                           indf2	equ	0xFDF
  6916                           postinc2	equ	0xFDE
  6917                           postdec2	equ	0xFDD
  6918                           fsr2h	equ	0xFDA
  6919                           fsr2l	equ	0xFD9
  6920                           status	equ	0xFD8
  6921                           
  6922 ;; *************** function _timer0_read_ps *****************
  6923 ;; Defined at:
  6924 ;;		line 59 in file "../../../lib/timer.c"
  6925 ;; Parameters:    Size  Location     Type
  6926 ;;		None
  6927 ;; Auto vars:     Size  Location     Type
  6928 ;;  count           2    8[COMRAM] unsigned int 
  6929 ;;  prev            1    7[COMRAM] unsigned char 
  6930 ;; Return value:  Size  Location     Type
  6931 ;;                  2    3[COMRAM] unsigned short 
  6932 ;; Registers used:
  6933 ;;		wreg, status,2, status,0
  6934 ;; Tracked objects:
  6935 ;;		On entry : 0/0
  6936 ;;		On exit  : 0/0
  6937 ;;		Unchanged: 0/0
  6938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6939 ;;      Params:         2       0       0       0       0       0       0       0       0
  6940 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6941 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6942 ;;      Totals:         7       0       0       0       0       0       0       0       0
  6943 ;;Total ram usage:        7 bytes
  6944 ;; Hardware stack levels used:    1
  6945 ;; Hardware stack levels required when called:    1
  6946 ;; This function calls:
  6947 ;;		Nothing
  6948 ;; This function is called by:
  6949 ;;		_measure_freq
  6950 ;; This function uses a non-reentrant model
  6951 ;;
  6952                           
  6953                           	psect	text35
  6954  0024B6                     __ptext35:
  6955                           	opt stack 0
  6956  0024B6                     _timer0_read_ps:
  6957                           	opt stack 27
  6958                           
  6959                           ;timer.c: 60: uint8_t prev = TMR0;
  6960                           
  6961                           ;incstack = 0
  6962  0024B6  CFD6 F008          	movff	4054,timer0_read_ps@prev	;volatile
  6963                           
  6964                           ;timer.c: 61: uint16_t count = 0;
  6965  0024BA  6A09               	clrf	timer0_read_ps@count,c
  6966  0024BC  6A0A               	clrf	timer0_read_ps@count+1,c
  6967                           
  6968                           ;timer.c: 63: T0CON |= 0x20;
  6969  0024BE  8AD5               	bsf	4053,5,c	;volatile
  6970  0024C0                     l206:
  6971                           
  6972                           ;timer.c: 67: T0CON |= 0x10;
  6973  0024C0  88D5               	bsf	4053,4,c	;volatile
  6974                           
  6975                           ;timer.c: 69: __nop();
  6976  0024C2  F000               	nop	
  6977                           
  6978                           ;timer.c: 70: __nop();
  6979  0024C4  F000               	nop	
  6980                           
  6981                           ;timer.c: 72: T0CON &= ~0x10;
  6982  0024C6  98D5               	bcf	4053,4,c	;volatile
  6983                           
  6984                           ;timer.c: 74: __nop();
  6985  0024C8  F000               	nop	
  6986                           
  6987                           ;timer.c: 75: __nop();
  6988  0024CA  F000               	nop	
  6989                           
  6990                           ;timer.c: 77: ++count;
  6991  0024CC  4A09               	infsnz	timer0_read_ps@count,f,c
  6992  0024CE  2A0A               	incf	timer0_read_ps@count+1,f,c
  6993                           
  6994                           ;timer.c: 80: } while(prev == TMR0 && count <= 255);
  6995  0024D0  5008               	movf	timer0_read_ps@prev,w,c
  6996  0024D2  18D6               	xorwf	4054,w,c	;volatile
  6997  0024D4  10D7               	iorwf	4055,w,c	;volatile
  6998  0024D6  E102               	bnz	l3012
  6999  0024D8  040A               	decf	timer0_read_ps@count+1,w,c
  7000  0024DA  E3F2               	bnc	l206
  7001  0024DC                     l3012:
  7002                           
  7003                           ;timer.c: 82: count = ((prev << 8) + (256 - count));
  7004  0024DC  5008               	movf	timer0_read_ps@prev,w,c
  7005  0024DE  6E07               	movwf	(??_timer0_read_ps+1)& (0+255),c
  7006  0024E0  6A06               	clrf	??_timer0_read_ps& (0+255),c
  7007  0024E2  5009               	movf	timer0_read_ps@count,w,c
  7008  0024E4  5E06               	subwf	??_timer0_read_ps,f,c
  7009  0024E6  500A               	movf	timer0_read_ps@count+1,w,c
  7010  0024E8  5A07               	subwfb	??_timer0_read_ps+1,f,c
  7011  0024EA  0E00               	movlw	0
  7012  0024EC  2406               	addwf	??_timer0_read_ps,w,c
  7013  0024EE  6E09               	movwf	timer0_read_ps@count,c
  7014  0024F0  0E01               	movlw	1
  7015  0024F2  2007               	addwfc	??_timer0_read_ps+1,w,c
  7016  0024F4  6E0A               	movwf	timer0_read_ps@count+1,c
  7017                           
  7018                           ;timer.c: 83: return count;
  7019  0024F6  C009  F004         	movff	timer0_read_ps@count,?_timer0_read_ps
  7020  0024FA  C00A  F005         	movff	timer0_read_ps@count+1,?_timer0_read_ps+1
  7021  0024FE  0012               	return		;funcret
  7022  002500                     __end_of_timer0_read_ps:
  7023                           	opt stack 0
  7024                           tblptru	equ	0xFF8
  7025                           tblptrh	equ	0xFF7
  7026                           tblptrl	equ	0xFF6
  7027                           tablat	equ	0xFF5
  7028                           prodl	equ	0xFF3
  7029                           intcon	equ	0xFF2
  7030                           intcon2	equ	0xFF1
  7031                           postinc0	equ	0xFEE
  7032                           wreg	equ	0xFE8
  7033                           postdec1	equ	0xFE5
  7034                           fsr1l	equ	0xFE1
  7035                           indf2	equ	0xFDF
  7036                           postinc2	equ	0xFDE
  7037                           postdec2	equ	0xFDD
  7038                           fsr2h	equ	0xFDA
  7039                           fsr2l	equ	0xFD9
  7040                           status	equ	0xFD8
  7041                           
  7042 ;; *************** function _put_str *****************
  7043 ;; Defined at:
  7044 ;;		line 510 in file "../../../src/print.c"
  7045 ;; Parameters:    Size  Location     Type
  7046 ;;  s               1    wreg     PTR const unsigned char 
  7047 ;;		 -> STR_15(13), STR_6(10), STR_5(6), STR_3(15), 
  7048 ;;		 -> STR_1(12), 
  7049 ;; Auto vars:     Size  Location     Type
  7050 ;;  s               1   10[COMRAM] PTR const unsigned char 
  7051 ;;		 -> STR_15(13), STR_6(10), STR_5(6), STR_3(15), 
  7052 ;;		 -> STR_1(12), 
  7053 ;;  i               2    8[COMRAM] int 
  7054 ;; Return value:  Size  Location     Type
  7055 ;;		None               void
  7056 ;; Registers used:
  7057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7058 ;; Tracked objects:
  7059 ;;		On entry : 0/0
  7060 ;;		On exit  : 0/0
  7061 ;;		Unchanged: 0/0
  7062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7063 ;;      Params:         0       0       0       0       0       0       0       0       0
  7064 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7065 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7066 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7067 ;;Total ram usage:        4 bytes
  7068 ;; Hardware stack levels used:    1
  7069 ;; Hardware stack levels required when called:    4
  7070 ;; This function calls:
  7071 ;;		_output_putch
  7072 ;; This function is called by:
  7073 ;;		_calibrate
  7074 ;;		_measure_freq
  7075 ;;		_measure_capacitance
  7076 ;;		_measure_inductance
  7077 ;; This function uses a non-reentrant model
  7078 ;;
  7079                           
  7080                           	psect	text36
  7081  0027B4                     __ptext36:
  7082                           	opt stack 0
  7083  0027B4                     _put_str:
  7084                           	opt stack 25
  7085                           
  7086                           ;incstack = 0
  7087                           ;put_str@s stored from wreg
  7088  0027B4  6E0B               	movwf	put_str@s,c
  7089                           
  7090                           ;print.c: 511: int i;
  7091                           ;print.c: 513: for(i = 0; s[i]; i++) {
  7092  0027B6  6A09               	clrf	put_str@i,c
  7093  0027B8  6A0A               	clrf	put_str@i+1,c
  7094  0027BA  D005               	goto	l3024
  7095  0027BC                     l3020:
  7096                           
  7097                           ;print.c: 514: output_putch(s[i]);
  7098  0027BC  D808               	call	PL30	;call to abstracted procedure
  7099  0027BE  EC95  F014         	call	_output_putch
  7100  0027C2  4A09               	infsnz	put_str@i,f,c
  7101  0027C4  2A0A               	incf	put_str@i+1,f,c
  7102  0027C6                     l3024:
  7103  0027C6  D803               	call	PL30	;call to abstracted procedure
  7104  0027C8  B4D8               	btfsc	status,2,c
  7105  0027CA  0012               	return		;funcret
  7106  0027CC  D7F7               	goto	l3020
  7107  0027CE                     __end_of_put_str:
  7108                           	opt stack 0
  7109  0027CE                     PL30:
  7110                           	opt stack 25
  7111  0027CE  500B               	movf	put_str@s,w,c
  7112  0027D0  2409               	addwf	put_str@i,w,c
  7113  0027D2  6E08               	movwf	??_put_str& (0+255),c
  7114  0027D4  C008  FFF6         	movff	??_put_str,tblptrl
  7115  0027D8                     	if	0	;There is only one active tblptr byte
  7116  0027D8                     	endif
  7117  0027D8                     	if	0	;tblptru may be non-zero
  7118  0027D8                     	endif
  7119  0027D8                     	if	0	;tblptru may be non-zero
  7120  0027D8                     	endif
  7121  0027D8  0008               	tblrd		*
  7122  0027DA  50F5               	movf	tablat,w,c
  7123  0027DC  0012               	return	
  7124  0027DE                     __end_ofPL30:
  7125                           	opt stack 0
  7126                           tblptru	equ	0xFF8
  7127                           tblptrh	equ	0xFF7
  7128                           tblptrl	equ	0xFF6
  7129                           tablat	equ	0xFF5
  7130                           prodl	equ	0xFF3
  7131                           intcon	equ	0xFF2
  7132                           intcon2	equ	0xFF1
  7133                           postinc0	equ	0xFEE
  7134                           wreg	equ	0xFE8
  7135                           postdec1	equ	0xFE5
  7136                           fsr1l	equ	0xFE1
  7137                           indf2	equ	0xFDF
  7138                           postinc2	equ	0xFDE
  7139                           postdec2	equ	0xFDD
  7140                           fsr2h	equ	0xFDA
  7141                           fsr2l	equ	0xFD9
  7142                           status	equ	0xFD8
  7143                           
  7144 ;; *************** function _output_putch *****************
  7145 ;; Defined at:
  7146 ;;		line 497 in file "../../../src/print.c"
  7147 ;; Parameters:    Size  Location     Type
  7148 ;;  c               1    wreg     unsigned char 
  7149 ;; Auto vars:     Size  Location     Type
  7150 ;;  c               1    6[COMRAM] unsigned char 
  7151 ;; Return value:  Size  Location     Type
  7152 ;;		None               void
  7153 ;; Registers used:
  7154 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7155 ;; Tracked objects:
  7156 ;;		On entry : 0/0
  7157 ;;		On exit  : 0/0
  7158 ;;		Unchanged: 0/0
  7159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7160 ;;      Params:         0       0       0       0       0       0       0       0       0
  7161 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7162 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7163 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7164 ;;Total ram usage:        1 bytes
  7165 ;; Hardware stack levels used:    1
  7166 ;; Hardware stack levels required when called:    3
  7167 ;; This function calls:
  7168 ;;		_lcd_send
  7169 ;;		_ser_putch
  7170 ;; This function is called by:
  7171 ;;		_put_str
  7172 ;; This function uses a non-reentrant model
  7173 ;;
  7174                           
  7175                           	psect	text37
  7176  00292A                     __ptext37:
  7177                           	opt stack 0
  7178  00292A                     _output_putch:
  7179                           	opt stack 25
  7180                           
  7181                           ;incstack = 0
  7182                           ;output_putch@c stored from wreg
  7183  00292A  6E07               	movwf	output_putch@c,c
  7184                           
  7185                           ;print.c: 499: lcd_send((c), 1);
  7186  00292C  0E01               	movlw	1
  7187  00292E  6E05               	movwf	lcd_send@mode,c
  7188  002930  5007               	movf	output_putch@c,w,c
  7189  002932  EC7D  F014         	call	_lcd_send
  7190                           
  7191                           ;print.c: 502: ser_putch(c);
  7192  002936  5007               	movf	output_putch@c,w,c
  7193  002938  EF18  F014         	goto	_ser_putch
  7194  00293C                     __end_of_output_putch:
  7195                           	opt stack 0
  7196                           tblptru	equ	0xFF8
  7197                           tblptrh	equ	0xFF7
  7198                           tblptrl	equ	0xFF6
  7199                           tablat	equ	0xFF5
  7200                           prodl	equ	0xFF3
  7201                           intcon	equ	0xFF2
  7202                           intcon2	equ	0xFF1
  7203                           postinc0	equ	0xFEE
  7204                           wreg	equ	0xFE8
  7205                           postdec1	equ	0xFE5
  7206                           fsr1l	equ	0xFE1
  7207                           indf2	equ	0xFDF
  7208                           postinc2	equ	0xFDE
  7209                           postdec2	equ	0xFDD
  7210                           fsr2h	equ	0xFDA
  7211                           fsr2l	equ	0xFD9
  7212                           status	equ	0xFD8
  7213                           
  7214 ;; *************** function _ser_putch *****************
  7215 ;; Defined at:
  7216 ;;		line 82 in file "../../../lib/ser.c"
  7217 ;; Parameters:    Size  Location     Type
  7218 ;;  c               1    wreg     unsigned char 
  7219 ;; Auto vars:     Size  Location     Type
  7220 ;;  c               1    3[COMRAM] unsigned char 
  7221 ;; Return value:  Size  Location     Type
  7222 ;;		None               void
  7223 ;; Registers used:
  7224 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7225 ;; Tracked objects:
  7226 ;;		On entry : 0/0
  7227 ;;		On exit  : 0/0
  7228 ;;		Unchanged: 0/0
  7229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7230 ;;      Params:         0       0       0       0       0       0       0       0       0
  7231 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7232 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7233 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7234 ;;Total ram usage:        1 bytes
  7235 ;; Hardware stack levels used:    1
  7236 ;; Hardware stack levels required when called:    1
  7237 ;; This function calls:
  7238 ;;		Nothing
  7239 ;; This function is called by:
  7240 ;;		_measure_capacitance
  7241 ;;		_output_putch
  7242 ;;		_ser_puts
  7243 ;; This function uses a non-reentrant model
  7244 ;;
  7245                           
  7246                           	psect	text38
  7247  002830                     __ptext38:
  7248                           	opt stack 0
  7249  002830                     _ser_putch:
  7250                           	opt stack 28
  7251                           
  7252                           ;incstack = 0
  7253                           ;ser_putch@c stored from wreg
  7254  002830  6E04               	movwf	ser_putch@c,c
  7255  002832                     l2676:
  7256  002832  285B               	incf	_txiptr,w,c	;volatile
  7257  002834  0B0F               	andlw	15
  7258  002836  185C               	xorwf	_txoptr,w,c	;volatile
  7259  002838  E0FC               	bz	l2676
  7260                           
  7261                           ;ser.c: 84: GIE = 0;
  7262  00283A  9EF2               	bcf	intcon,7,c	;volatile
  7263                           
  7264                           ;ser.c: 85: txfifo[txiptr] = c;
  7265  00283C  0E10               	movlw	low _txfifo
  7266  00283E  245B               	addwf	_txiptr,w,c	;volatile
  7267  002840  6ED9               	movwf	fsr2l,c
  7268  002842  6ADA               	clrf	fsr2h,c
  7269  002844  0E01               	movlw	high _txfifo
  7270  002846  22DA               	addwfc	fsr2h,f,c
  7271  002848  C004  FFDF         	movff	ser_putch@c,indf2
  7272                           
  7273                           ;ser.c: 86: txiptr = (txiptr + 1) & ((uint8_t)16 - 1);
  7274  00284C  285B               	incf	_txiptr,w,c	;volatile
  7275  00284E  0B0F               	andlw	15
  7276  002850  6E5B               	movwf	_txiptr,c	;volatile
  7277                           
  7278                           ;ser.c: 87: TXIE = 1;
  7279  002852  889D               	bsf	3997,4,c	;volatile
  7280                           
  7281                           ;ser.c: 88: GIE = 1;
  7282  002854  8EF2               	bsf	intcon,7,c	;volatile
  7283  002856  0012               	return		;funcret
  7284  002858                     __end_of_ser_putch:
  7285                           	opt stack 0
  7286                           tblptru	equ	0xFF8
  7287                           tblptrh	equ	0xFF7
  7288                           tblptrl	equ	0xFF6
  7289                           tablat	equ	0xFF5
  7290                           prodl	equ	0xFF3
  7291                           intcon	equ	0xFF2
  7292                           intcon2	equ	0xFF1
  7293                           postinc0	equ	0xFEE
  7294                           wreg	equ	0xFE8
  7295                           postdec1	equ	0xFE5
  7296                           fsr1l	equ	0xFE1
  7297                           indf2	equ	0xFDF
  7298                           postinc2	equ	0xFDE
  7299                           postdec2	equ	0xFDD
  7300                           fsr2h	equ	0xFDA
  7301                           fsr2l	equ	0xFD9
  7302                           status	equ	0xFD8
  7303                           
  7304 ;; *************** function _lcd_gotoxy *****************
  7305 ;; Defined at:
  7306 ;;		line 157 in file "../../../lib/lcd44780.c"
  7307 ;; Parameters:    Size  Location     Type
  7308 ;;  col             1    wreg     unsigned char 
  7309 ;;  row             1    7[COMRAM] unsigned char 
  7310 ;; Auto vars:     Size  Location     Type
  7311 ;;  col             1    8[COMRAM] unsigned char 
  7312 ;;  row_offsets     4    9[COMRAM] unsigned char [4]
  7313 ;; Return value:  Size  Location     Type
  7314 ;;		None               void
  7315 ;; Registers used:
  7316 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7317 ;; Tracked objects:
  7318 ;;		On entry : 0/0
  7319 ;;		On exit  : 0/0
  7320 ;;		Unchanged: 0/0
  7321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7322 ;;      Params:         1       0       0       0       0       0       0       0       0
  7323 ;;      Locals:         5       0       0       0       0       0       0       0       0
  7324 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7325 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7326 ;;Total ram usage:        6 bytes
  7327 ;; Hardware stack levels used:    1
  7328 ;; Hardware stack levels required when called:    4
  7329 ;; This function calls:
  7330 ;;		_lcd_command
  7331 ;; This function is called by:
  7332 ;;		_calibrate
  7333 ;;		_measure_freq
  7334 ;;		_measure_capacitance
  7335 ;;		_measure_inductance
  7336 ;;		_print_unit
  7337 ;;		_print_reading
  7338 ;;		_indicator
  7339 ;;		_main
  7340 ;; This function uses a non-reentrant model
  7341 ;;
  7342                           
  7343                           	psect	text39
  7344  002698                     __ptext39:
  7345                           	opt stack 0
  7346  002698                     _lcd_gotoxy:
  7347                           	opt stack 24
  7348                           
  7349                           ;incstack = 0
  7350                           ;lcd_gotoxy@col stored from wreg
  7351  002698  6E09               	movwf	lcd_gotoxy@col,c
  7352                           
  7353                           ;lcd44780.c: 159: uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
  7354  00269A  C0F1  F00A         	movff	lcd_gotoxy@F6470,lcd_gotoxy@row_offsets
  7355  00269E  C0F2  F00B         	movff	lcd_gotoxy@F6470+1,lcd_gotoxy@row_offsets+1
  7356  0026A2  C0F3  F00C         	movff	lcd_gotoxy@F6470+2,lcd_gotoxy@row_offsets+2
  7357  0026A6  C0F4  F00D         	movff	lcd_gotoxy@F6470+3,lcd_gotoxy@row_offsets+3
  7358                           
  7359                           ;lcd44780.c: 168: if(LCD_lines == 1) {
  7360  0026AA  0100               	movlb	0	; () banked
  7361  0026AC  05CF               	decf	_LCD_lines& (0+255),w,b
  7362  0026AE  E106               	bnz	l2986
  7363                           
  7364                           ; BSR set to: 0
  7365                           ;lcd44780.c: 169: row_offsets[1] = 0x14;
  7366  0026B0  0E14               	movlw	20
  7367  0026B2  6E0B               	movwf	lcd_gotoxy@row_offsets+1,c
  7368                           
  7369                           ;lcd44780.c: 170: row_offsets[2] = 0x28;
  7370  0026B4  0E28               	movlw	40
  7371  0026B6  6E0C               	movwf	lcd_gotoxy@row_offsets+2,c
  7372                           
  7373                           ;lcd44780.c: 171: row_offsets[3] = 0x3C;
  7374  0026B8  0E3C               	movlw	60
  7375  0026BA  6E0D               	movwf	lcd_gotoxy@row_offsets+3,c
  7376  0026BC                     l2986:
  7377                           
  7378                           ; BSR set to: 0
  7379                           ;lcd44780.c: 172: }
  7380                           ;lcd44780.c: 178: lcd_command(0x80 | (col + row_offsets[row]));
  7381  0026BC  5008               	movf	lcd_gotoxy@row,w,c
  7382  0026BE  0F0A               	addlw	low lcd_gotoxy@row_offsets
  7383  0026C0  6ED9               	movwf	fsr2l,c
  7384  0026C2  6ADA               	clrf	fsr2h,c
  7385  0026C4  50DF               	movf	indf2,w,c
  7386  0026C6  2409               	addwf	lcd_gotoxy@col,w,c
  7387  0026C8  0980               	iorlw	128
  7388  0026CA  EF9E  F014         	goto	_lcd_command
  7389  0026CE                     __end_of_lcd_gotoxy:
  7390                           	opt stack 0
  7391                           tblptru	equ	0xFF8
  7392                           tblptrh	equ	0xFF7
  7393                           tblptrl	equ	0xFF6
  7394                           tablat	equ	0xFF5
  7395                           prodl	equ	0xFF3
  7396                           intcon	equ	0xFF2
  7397                           intcon2	equ	0xFF1
  7398                           postinc0	equ	0xFEE
  7399                           wreg	equ	0xFE8
  7400                           postdec1	equ	0xFE5
  7401                           fsr1l	equ	0xFE1
  7402                           indf2	equ	0xFDF
  7403                           postinc2	equ	0xFDE
  7404                           postdec2	equ	0xFDD
  7405                           fsr2h	equ	0xFDA
  7406                           fsr2l	equ	0xFD9
  7407                           status	equ	0xFD8
  7408                           
  7409 ;; *************** function _format_number *****************
  7410 ;; Defined at:
  7411 ;;		line 15 in file "../../../lib/format.c"
  7412 ;; Parameters:    Size  Location     Type
  7413 ;;  n               2   10[COMRAM] unsigned int 
  7414 ;;  base            1   12[COMRAM] unsigned char 
  7415 ;;  pad             1   13[COMRAM] char 
  7416 ;; Auto vars:     Size  Location     Type
  7417 ;;  buf            32   16[COMRAM] unsigned char [32]
  7418 ;;  i               1   52[COMRAM] char 
  7419 ;;  di              1   51[COMRAM] unsigned char 
  7420 ;;  padchar         1   50[COMRAM] unsigned char 
  7421 ;; Return value:  Size  Location     Type
  7422 ;;		None               void
  7423 ;; Registers used:
  7424 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7425 ;; Tracked objects:
  7426 ;;		On entry : 0/0
  7427 ;;		On exit  : 0/0
  7428 ;;		Unchanged: 0/0
  7429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7430 ;;      Params:         4       0       0       0       0       0       0       0       0
  7431 ;;      Locals:        37       0       0       0       0       0       0       0       0
  7432 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7433 ;;      Totals:        43       0       0       0       0       0       0       0       0
  7434 ;;Total ram usage:       43 bytes
  7435 ;; Hardware stack levels used:    1
  7436 ;; Hardware stack levels required when called:    2
  7437 ;; This function calls:
  7438 ;;		___lwdiv
  7439 ;;		___lwmod
  7440 ;;		_buffer_putch
  7441 ;; This function is called by:
  7442 ;;		_format_xint32
  7443 ;;		_measure_freq
  7444 ;;		_print_reading
  7445 ;; This function uses a non-reentrant model
  7446 ;;
  7447                           
  7448                           	psect	text40
  7449  002088                     __ptext40:
  7450                           	opt stack 0
  7451  002088                     _format_number:
  7452                           	opt stack 26
  7453                           
  7454                           ;format.c: 16: char buf[8 * sizeof(long)];
  7455                           ;format.c: 17: uint8_t di;
  7456                           ;format.c: 18: int8_t i = 0;
  7457                           
  7458                           ;incstack = 0
  7459  002088  6A35               	clrf	format_number@i,c
  7460                           
  7461                           ;format.c: 19: char padchar = ' ';
  7462  00208A  0E20               	movlw	32
  7463  00208C  6E33               	movwf	format_number@padchar,c
  7464                           
  7465                           ;format.c: 21: if(pad < 0) {
  7466  00208E  AE0E               	btfss	format_number@pad,7,c
  7467  002090  D003               	goto	l2910
  7468                           
  7469                           ;format.c: 22: pad = -pad;
  7470  002092  6C0E               	negf	format_number@pad,c
  7471                           
  7472                           ;format.c: 23: padchar = '0';
  7473  002094  0E30               	movlw	48
  7474  002096  6E33               	movwf	format_number@padchar,c
  7475  002098                     l2910:
  7476                           
  7477                           ;format.c: 35: di = n % base;
  7478  002098  C00B  F004         	movff	format_number@n,___lwmod@dividend
  7479  00209C  C00C  F005         	movff	format_number@n+1,___lwmod@dividend+1
  7480  0020A0  C00D  F006         	movff	format_number@base,___lwmod@divisor
  7481  0020A4  6A07               	clrf	___lwmod@divisor+1,c
  7482  0020A6  EC10  F013         	call	___lwmod	;wreg free
  7483  0020AA  5004               	movf	?___lwmod,w,c
  7484  0020AC  6E34               	movwf	format_number@di,c
  7485                           
  7486                           ;format.c: 36: buf[i++] = (di < 10 ? (uint8_t)'0' + di : (uint8_t)'A' + di - 10);
  7487  0020AE  0E09               	movlw	9
  7488  0020B0  6434               	cpfsgt	format_number@di,c
  7489  0020B2  D002               	goto	l2916
  7490  0020B4  0E37               	movlw	55
  7491  0020B6  D001               	goto	L3
  7492  0020B8                     l2916:
  7493  0020B8  0E30               	movlw	48
  7494  0020BA                     L3:
  7495  0020BA  2434               	addwf	format_number@di,w,c
  7496  0020BC  6E31               	movwf	_format_number$68,c
  7497  0020BE  6A32               	clrf	_format_number$68+1,c
  7498  0020C0  0E00               	movlw	0
  7499  0020C2  2232               	addwfc	_format_number$68+1,f,c
  7500  0020C4  5035               	movf	format_number@i,w,c
  7501  0020C6  0F11               	addlw	low format_number@buf
  7502  0020C8  6ED9               	movwf	fsr2l,c
  7503  0020CA  6ADA               	clrf	fsr2h,c
  7504  0020CC  C031  FFDF         	movff	_format_number$68,indf2
  7505  0020D0  2A35               	incf	format_number@i,f,c
  7506                           
  7507                           ;format.c: 38: n /= base;
  7508  0020D2  C00B  F004         	movff	format_number@n,___lwdiv@dividend
  7509  0020D6  C00C  F005         	movff	format_number@n+1,___lwdiv@dividend+1
  7510  0020DA  C00D  F006         	movff	format_number@base,___lwdiv@divisor
  7511  0020DE  6A07               	clrf	___lwdiv@divisor+1,c
  7512  0020E0  ECA5  F012         	call	___lwdiv	;wreg free
  7513  0020E4  C004  F00B         	movff	?___lwdiv,format_number@n
  7514  0020E8  C005  F00C         	movff	?___lwdiv+1,format_number@n+1
  7515                           
  7516                           ;format.c: 39: } while(n > 0);
  7517  0020EC  500B               	movf	format_number@n,w,c
  7518  0020EE  100C               	iorwf	format_number@n+1,w,c
  7519  0020F0  E004               	bz	l2928
  7520  0020F2  D7D2               	goto	l2910
  7521  0020F4                     l2926:
  7522  0020F4  5033               	movf	format_number@padchar,w,c
  7523  0020F6  EC80  F012         	call	_buffer_putch
  7524  0020FA                     l2928:
  7525  0020FA  060E               	decf	format_number@pad,f,c
  7526  0020FC  280E               	incf	format_number@pad,w,c
  7527  0020FE  6E0F               	movwf	??_format_number& (0+255),c
  7528  002100  5035               	movf	format_number@i,w,c
  7529  002102  0A80               	xorlw	128
  7530  002104  6E10               	movwf	(??_format_number+1)& (0+255),c
  7531  002106  500F               	movf	??_format_number,w,c
  7532  002108  0A80               	xorlw	128
  7533  00210A  5C10               	subwf	(??_format_number+1)& (0+255),w,c
  7534  00210C  E3F3               	bnc	l2926
  7535  00210E                     l2930:
  7536                           
  7537                           ;format.c: 43: for(; i > 0; i--) buffer_putch((char)buf[(int16_t)i - 1]);
  7538  00210E  5035               	movf	format_number@i,w,c
  7539  002110  0A80               	xorlw	128
  7540  002112  0F7F               	addlw	-129
  7541  002114  A0D8               	btfss	status,0,c
  7542  002116  0012               	return	
  7543  002118  C035  F00F         	movff	format_number@i,??_format_number
  7544  00211C  060F               	decf	??_format_number,f,c
  7545  00211E  500F               	movf	??_format_number,w,c
  7546  002120  0F11               	addlw	low format_number@buf
  7547  002122  6ED9               	movwf	fsr2l,c
  7548  002124  6ADA               	clrf	fsr2h,c
  7549  002126  50DF               	movf	indf2,w,c
  7550  002128  EC80  F012         	call	_buffer_putch
  7551                           
  7552                           ; BSR set to: 0
  7553  00212C  0635               	decf	format_number@i,f,c
  7554  00212E  D7EF               	goto	l2930
  7555  002130                     __end_of_format_number:
  7556                           	opt stack 0
  7557                           tblptru	equ	0xFF8
  7558                           tblptrh	equ	0xFF7
  7559                           tblptrl	equ	0xFF6
  7560                           tablat	equ	0xFF5
  7561                           prodl	equ	0xFF3
  7562                           intcon	equ	0xFF2
  7563                           intcon2	equ	0xFF1
  7564                           postinc0	equ	0xFEE
  7565                           wreg	equ	0xFE8
  7566                           postdec1	equ	0xFE5
  7567                           fsr1l	equ	0xFE1
  7568                           indf2	equ	0xFDF
  7569                           postinc2	equ	0xFDE
  7570                           postdec2	equ	0xFDD
  7571                           fsr2h	equ	0xFDA
  7572                           fsr2l	equ	0xFD9
  7573                           status	equ	0xFD8
  7574                           
  7575 ;; *************** function _buffer_putch *****************
  7576 ;; Defined at:
  7577 ;;		line 22 in file "../../../lib/buffer.c"
  7578 ;; Parameters:    Size  Location     Type
  7579 ;;  ch              1    wreg     unsigned char 
  7580 ;; Auto vars:     Size  Location     Type
  7581 ;;  ch              1    5[COMRAM] unsigned char 
  7582 ;; Return value:  Size  Location     Type
  7583 ;;                  1    wreg      unsigned char 
  7584 ;; Registers used:
  7585 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7586 ;; Tracked objects:
  7587 ;;		On entry : 0/0
  7588 ;;		On exit  : F/0
  7589 ;;		Unchanged: 0/0
  7590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7591 ;;      Params:         0       0       0       0       0       0       0       0       0
  7592 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7593 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7594 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7595 ;;Total ram usage:        3 bytes
  7596 ;; Hardware stack levels used:    1
  7597 ;; Hardware stack levels required when called:    1
  7598 ;; This function calls:
  7599 ;;		Nothing
  7600 ;; This function is called by:
  7601 ;;		_format_number
  7602 ;;		_format_xint32
  7603 ;;		_format_double
  7604 ;; This function uses a non-reentrant model
  7605 ;;
  7606                           
  7607                           	psect	text41
  7608  002500                     __ptext41:
  7609                           	opt stack 0
  7610  002500                     _buffer_putch:
  7611                           	opt stack 26
  7612                           
  7613                           ;incstack = 0
  7614                           ;buffer_putch@ch stored from wreg
  7615  002500  6E06               	movwf	buffer_putch@ch,c
  7616                           
  7617                           ;buffer.c: 23: if(16 - buffer.n <= 0) {
  7618  002502  0E10               	movlw	16
  7619  002504  6E04               	movwf	??_buffer_putch& (0+255),c
  7620  002506  6A05               	clrf	(??_buffer_putch+1)& (0+255),c
  7621  002508  0100               	movlb	0	; () banked
  7622  00250A  39E4               	swapf	(_buffer+16)& (0+255),w,b
  7623  00250C  0B0F               	andlw	15
  7624  00250E  5E04               	subwf	??_buffer_putch,f,c
  7625  002510  0E00               	movlw	0
  7626  002512  5A05               	subwfb	??_buffer_putch+1,f,c
  7627  002514  BE05               	btfsc	??_buffer_putch+1,7,c
  7628  002516  0C00               	retlw	0
  7629  002518  5005               	movf	??_buffer_putch+1,w,c
  7630  00251A  E103               	bnz	l2788
  7631  00251C  0404               	decf	??_buffer_putch,w,c
  7632  00251E  A0D8               	btfss	status,0,c
  7633  002520  0012               	return	
  7634  002522                     l2788:
  7635                           
  7636                           ; BSR set to: 0
  7637                           ;buffer.c: 25: }
  7638                           ;buffer.c: 26: buffer.x[buffer.n] = ch;
  7639  002522  39E4               	swapf	(_buffer+16)& (0+255),w,b
  7640  002524  0B0F               	andlw	15
  7641  002526  6E04               	movwf	??_buffer_putch& (0+255),c
  7642  002528  5004               	movf	??_buffer_putch,w,c
  7643  00252A  0FD4               	addlw	low _buffer
  7644  00252C  6ED9               	movwf	fsr2l,c
  7645  00252E  6ADA               	clrf	fsr2h,c
  7646  002530  C006  FFDF         	movff	buffer_putch@ch,indf2
  7647                           
  7648                           ; BSR set to: 0
  7649                           ;buffer.c: 27: buffer.n++;
  7650  002534  39E4               	swapf	(_buffer+16)& (0+255),w,b
  7651  002536  0B0F               	andlw	15
  7652  002538  6E04               	movwf	??_buffer_putch& (0+255),c
  7653  00253A  2A04               	incf	??_buffer_putch,f,c
  7654  00253C  3A04               	swapf	??_buffer_putch& (0+255),f,c
  7655  00253E  51E4               	movf	(_buffer+16)& (0+255),w,b
  7656  002540  1804               	xorwf	??_buffer_putch& (0+255),w,c
  7657  002542  0B0F               	andlw	-241
  7658  002544  1804               	xorwf	??_buffer_putch& (0+255),w,c
  7659  002546  6FE4               	movwf	(_buffer+16)& (0+255),b
  7660                           
  7661                           ; BSR set to: 0
  7662  002548  0012               	return		;funcret
  7663  00254A                     __end_of_buffer_putch:
  7664                           	opt stack 0
  7665                           tblptru	equ	0xFF8
  7666                           tblptrh	equ	0xFF7
  7667                           tblptrl	equ	0xFF6
  7668                           tablat	equ	0xFF5
  7669                           prodl	equ	0xFF3
  7670                           intcon	equ	0xFF2
  7671                           intcon2	equ	0xFF1
  7672                           postinc0	equ	0xFEE
  7673                           wreg	equ	0xFE8
  7674                           postdec1	equ	0xFE5
  7675                           fsr1l	equ	0xFE1
  7676                           indf2	equ	0xFDF
  7677                           postinc2	equ	0xFDE
  7678                           postdec2	equ	0xFDD
  7679                           fsr2h	equ	0xFDA
  7680                           fsr2l	equ	0xFD9
  7681                           status	equ	0xFD8
  7682                           
  7683 ;; *************** function ___lwmod *****************
  7684 ;; Defined at:
  7685 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  7686 ;; Parameters:    Size  Location     Type
  7687 ;;  dividend        2    3[COMRAM] unsigned int 
  7688 ;;  divisor         2    5[COMRAM] unsigned int 
  7689 ;; Auto vars:     Size  Location     Type
  7690 ;;  counter         1    7[COMRAM] unsigned char 
  7691 ;; Return value:  Size  Location     Type
  7692 ;;                  2    3[COMRAM] unsigned int 
  7693 ;; Registers used:
  7694 ;;		wreg, status,2, status,0
  7695 ;; Tracked objects:
  7696 ;;		On entry : 0/0
  7697 ;;		On exit  : 0/0
  7698 ;;		Unchanged: 0/0
  7699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7700 ;;      Params:         4       0       0       0       0       0       0       0       0
  7701 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7702 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7703 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7704 ;;Total ram usage:        5 bytes
  7705 ;; Hardware stack levels used:    1
  7706 ;; Hardware stack levels required when called:    1
  7707 ;; This function calls:
  7708 ;;		Nothing
  7709 ;; This function is called by:
  7710 ;;		_format_number
  7711 ;;		_print_reading
  7712 ;; This function uses a non-reentrant model
  7713 ;;
  7714                           
  7715                           	psect	text42
  7716  002620                     __ptext42:
  7717                           	opt stack 0
  7718  002620                     ___lwmod:
  7719                           	opt stack 26
  7720                           
  7721                           ; BSR set to: 0
  7722                           ;incstack = 0
  7723  002620  5006               	movf	___lwmod@divisor,w,c
  7724  002622  1007               	iorwf	___lwmod@divisor+1,w,c
  7725  002624  E017               	bz	l1123
  7726  002626  0E01               	movlw	1
  7727  002628  6E08               	movwf	___lwmod@counter,c
  7728  00262A  D004               	goto	l2850
  7729  00262C                     l2848:
  7730  00262C  90D8               	bcf	status,0,c
  7731  00262E  3606               	rlcf	___lwmod@divisor,f,c
  7732  002630  3607               	rlcf	___lwmod@divisor+1,f,c
  7733  002632  2A08               	incf	___lwmod@counter,f,c
  7734  002634                     l2850:
  7735  002634  AE07               	btfss	___lwmod@divisor+1,7,c
  7736  002636  D7FA               	goto	l2848
  7737  002638                     l2852:
  7738  002638  5006               	movf	___lwmod@divisor,w,c
  7739  00263A  5C04               	subwf	___lwmod@dividend,w,c
  7740  00263C  5007               	movf	___lwmod@divisor+1,w,c
  7741  00263E  5805               	subwfb	___lwmod@dividend+1,w,c
  7742  002640  E304               	bnc	l2856
  7743  002642  5006               	movf	___lwmod@divisor,w,c
  7744  002644  5E04               	subwf	___lwmod@dividend,f,c
  7745  002646  5007               	movf	___lwmod@divisor+1,w,c
  7746  002648  5A05               	subwfb	___lwmod@dividend+1,f,c
  7747  00264A                     l2856:
  7748  00264A  90D8               	bcf	status,0,c
  7749  00264C  3207               	rrcf	___lwmod@divisor+1,f,c
  7750  00264E  3206               	rrcf	___lwmod@divisor,f,c
  7751  002650  2E08               	decfsz	___lwmod@counter,f,c
  7752  002652  D7F2               	goto	l2852
  7753  002654                     l1123:
  7754  002654  C004  F004         	movff	___lwmod@dividend,?___lwmod
  7755  002658  C005  F005         	movff	___lwmod@dividend+1,?___lwmod+1
  7756  00265C  0012               	return		;funcret
  7757  00265E                     __end_of___lwmod:
  7758                           	opt stack 0
  7759                           tblptru	equ	0xFF8
  7760                           tblptrh	equ	0xFF7
  7761                           tblptrl	equ	0xFF6
  7762                           tablat	equ	0xFF5
  7763                           prodl	equ	0xFF3
  7764                           intcon	equ	0xFF2
  7765                           intcon2	equ	0xFF1
  7766                           postinc0	equ	0xFEE
  7767                           wreg	equ	0xFE8
  7768                           postdec1	equ	0xFE5
  7769                           fsr1l	equ	0xFE1
  7770                           indf2	equ	0xFDF
  7771                           postinc2	equ	0xFDE
  7772                           postdec2	equ	0xFDD
  7773                           fsr2h	equ	0xFDA
  7774                           fsr2l	equ	0xFD9
  7775                           status	equ	0xFD8
  7776                           
  7777 ;; *************** function ___lwdiv *****************
  7778 ;; Defined at:
  7779 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  7780 ;; Parameters:    Size  Location     Type
  7781 ;;  dividend        2    3[COMRAM] unsigned int 
  7782 ;;  divisor         2    5[COMRAM] unsigned int 
  7783 ;; Auto vars:     Size  Location     Type
  7784 ;;  quotient        2    7[COMRAM] unsigned int 
  7785 ;;  counter         1    9[COMRAM] unsigned char 
  7786 ;; Return value:  Size  Location     Type
  7787 ;;                  2    3[COMRAM] unsigned int 
  7788 ;; Registers used:
  7789 ;;		wreg, status,2, status,0
  7790 ;; Tracked objects:
  7791 ;;		On entry : 0/0
  7792 ;;		On exit  : 0/0
  7793 ;;		Unchanged: 0/0
  7794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7795 ;;      Params:         4       0       0       0       0       0       0       0       0
  7796 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7797 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7798 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7799 ;;Total ram usage:        7 bytes
  7800 ;; Hardware stack levels used:    1
  7801 ;; Hardware stack levels required when called:    1
  7802 ;; This function calls:
  7803 ;;		Nothing
  7804 ;; This function is called by:
  7805 ;;		_format_number
  7806 ;;		_print_reading
  7807 ;; This function uses a non-reentrant model
  7808 ;;
  7809                           
  7810                           	psect	text43
  7811  00254A                     __ptext43:
  7812                           	opt stack 0
  7813  00254A                     ___lwdiv:
  7814                           	opt stack 26
  7815                           
  7816                           ;incstack = 0
  7817  00254A  6A08               	clrf	___lwdiv@quotient,c
  7818  00254C  6A09               	clrf	___lwdiv@quotient+1,c
  7819  00254E  5006               	movf	___lwdiv@divisor,w,c
  7820  002550  1007               	iorwf	___lwdiv@divisor+1,w,c
  7821  002552  E01B               	bz	l1113
  7822  002554  0E01               	movlw	1
  7823  002556  6E0A               	movwf	___lwdiv@counter,c
  7824  002558  D004               	goto	l2830
  7825  00255A                     l2828:
  7826  00255A  90D8               	bcf	status,0,c
  7827  00255C  3606               	rlcf	___lwdiv@divisor,f,c
  7828  00255E  3607               	rlcf	___lwdiv@divisor+1,f,c
  7829  002560  2A0A               	incf	___lwdiv@counter,f,c
  7830  002562                     l2830:
  7831  002562  AE07               	btfss	___lwdiv@divisor+1,7,c
  7832  002564  D7FA               	goto	l2828
  7833  002566                     l2832:
  7834  002566  90D8               	bcf	status,0,c
  7835  002568  3608               	rlcf	___lwdiv@quotient,f,c
  7836  00256A  3609               	rlcf	___lwdiv@quotient+1,f,c
  7837  00256C  5006               	movf	___lwdiv@divisor,w,c
  7838  00256E  5C04               	subwf	___lwdiv@dividend,w,c
  7839  002570  5007               	movf	___lwdiv@divisor+1,w,c
  7840  002572  5805               	subwfb	___lwdiv@dividend+1,w,c
  7841  002574  E305               	bnc	l2840
  7842  002576  5006               	movf	___lwdiv@divisor,w,c
  7843  002578  5E04               	subwf	___lwdiv@dividend,f,c
  7844  00257A  5007               	movf	___lwdiv@divisor+1,w,c
  7845  00257C  5A05               	subwfb	___lwdiv@dividend+1,f,c
  7846  00257E  8008               	bsf	___lwdiv@quotient,0,c
  7847  002580                     l2840:
  7848  002580  90D8               	bcf	status,0,c
  7849  002582  3207               	rrcf	___lwdiv@divisor+1,f,c
  7850  002584  3206               	rrcf	___lwdiv@divisor,f,c
  7851  002586  2E0A               	decfsz	___lwdiv@counter,f,c
  7852  002588  D7EE               	goto	l2832
  7853  00258A                     l1113:
  7854  00258A  C008  F004         	movff	___lwdiv@quotient,?___lwdiv
  7855  00258E  C009  F005         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7856  002592  0012               	return		;funcret
  7857  002594                     __end_of___lwdiv:
  7858                           	opt stack 0
  7859                           tblptru	equ	0xFF8
  7860                           tblptrh	equ	0xFF7
  7861                           tblptrl	equ	0xFF6
  7862                           tablat	equ	0xFF5
  7863                           prodl	equ	0xFF3
  7864                           intcon	equ	0xFF2
  7865                           intcon2	equ	0xFF1
  7866                           postinc0	equ	0xFEE
  7867                           wreg	equ	0xFE8
  7868                           postdec1	equ	0xFE5
  7869                           fsr1l	equ	0xFE1
  7870                           indf2	equ	0xFDF
  7871                           postinc2	equ	0xFDE
  7872                           postdec2	equ	0xFDD
  7873                           fsr2h	equ	0xFDA
  7874                           fsr2l	equ	0xFD9
  7875                           status	equ	0xFD8
  7876                           
  7877 ;; *************** function _lcd_clear *****************
  7878 ;; Defined at:
  7879 ;;		line 309 in file "../../../lib/lcd44780.c"
  7880 ;; Parameters:    Size  Location     Type
  7881 ;;		None
  7882 ;; Auto vars:     Size  Location     Type
  7883 ;;		None
  7884 ;; Return value:  Size  Location     Type
  7885 ;;		None               void
  7886 ;; Registers used:
  7887 ;;		wreg, status,2, status,0, cstack
  7888 ;; Tracked objects:
  7889 ;;		On entry : 0/0
  7890 ;;		On exit  : 0/0
  7891 ;;		Unchanged: 0/0
  7892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7893 ;;      Params:         0       0       0       0       0       0       0       0       0
  7894 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7895 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7896 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7897 ;;Total ram usage:        1 bytes
  7898 ;; Hardware stack levels used:    1
  7899 ;; Hardware stack levels required when called:    4
  7900 ;; This function calls:
  7901 ;;		_lcd_command
  7902 ;; This function is called by:
  7903 ;;		_calibrate
  7904 ;;		_main
  7905 ;; This function uses a non-reentrant model
  7906 ;;
  7907                           
  7908                           	psect	text44
  7909  002914                     __ptext44:
  7910                           	opt stack 0
  7911  002914                     _lcd_clear:
  7912                           	opt stack 26
  7913                           
  7914                           ;lcd44780.c: 310: lcd_command(0x01);
  7915                           
  7916                           ;incstack = 0
  7917  002914  0E01               	movlw	1
  7918  002916  EC9E  F014         	call	_lcd_command
  7919                           
  7920                           ;lcd44780.c: 311: _delay((unsigned long)((2)*(20000000/4000.0)));
  7921  00291A  0E0D               	movlw	13
  7922  00291C  6E08               	movwf	??_lcd_clear& (0+255),c
  7923  00291E  0EFC               	movlw	252
  7924  002920                     u3577:
  7925  002920  2EE8               	decfsz	wreg,f,c
  7926  002922  D7FE               	goto	u3577
  7927  002924  2E08               	decfsz	??_lcd_clear& (0+255),f,c
  7928  002926  D7FC               	goto	u3577
  7929  002928  0012               	return		;funcret
  7930  00292A                     __end_of_lcd_clear:
  7931                           	opt stack 0
  7932                           tblptru	equ	0xFF8
  7933                           tblptrh	equ	0xFF7
  7934                           tblptrl	equ	0xFF6
  7935                           tablat	equ	0xFF5
  7936                           prodl	equ	0xFF3
  7937                           intcon	equ	0xFF2
  7938                           intcon2	equ	0xFF1
  7939                           postinc0	equ	0xFEE
  7940                           wreg	equ	0xFE8
  7941                           postdec1	equ	0xFE5
  7942                           fsr1l	equ	0xFE1
  7943                           indf2	equ	0xFDF
  7944                           postinc2	equ	0xFDE
  7945                           postdec2	equ	0xFDD
  7946                           fsr2h	equ	0xFDA
  7947                           fsr2l	equ	0xFD9
  7948                           status	equ	0xFD8
  7949                           
  7950 ;; *************** function _lcd_command *****************
  7951 ;; Defined at:
  7952 ;;		line 149 in file "../../../lib/lcd44780.c"
  7953 ;; Parameters:    Size  Location     Type
  7954 ;;  value           1    wreg     unsigned char 
  7955 ;; Auto vars:     Size  Location     Type
  7956 ;;  value           1    6[COMRAM] unsigned char 
  7957 ;; Return value:  Size  Location     Type
  7958 ;;		None               void
  7959 ;; Registers used:
  7960 ;;		wreg, status,2, status,0, cstack
  7961 ;; Tracked objects:
  7962 ;;		On entry : 0/0
  7963 ;;		On exit  : 0/0
  7964 ;;		Unchanged: 0/0
  7965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7966 ;;      Params:         0       0       0       0       0       0       0       0       0
  7967 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7968 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7969 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7970 ;;Total ram usage:        1 bytes
  7971 ;; Hardware stack levels used:    1
  7972 ;; Hardware stack levels required when called:    3
  7973 ;; This function calls:
  7974 ;;		_lcd_send
  7975 ;; This function is called by:
  7976 ;;		_lcd_gotoxy
  7977 ;;		_lcd_clear
  7978 ;;		_lcd_begin
  7979 ;; This function uses a non-reentrant model
  7980 ;;
  7981                           
  7982                           	psect	text45
  7983  00293C                     __ptext45:
  7984                           	opt stack 0
  7985  00293C                     _lcd_command:
  7986                           	opt stack 24
  7987                           
  7988                           ;incstack = 0
  7989                           ;lcd_command@value stored from wreg
  7990  00293C  6E07               	movwf	lcd_command@value,c
  7991                           
  7992                           ;lcd44780.c: 150: lcd_send(value, 0);
  7993  00293E  0E00               	movlw	0
  7994  002940  6E05               	movwf	lcd_send@mode,c
  7995  002942  5007               	movf	lcd_command@value,w,c
  7996  002944  EF7D  F014         	goto	_lcd_send
  7997  002948                     __end_of_lcd_command:
  7998                           	opt stack 0
  7999                           tblptru	equ	0xFF8
  8000                           tblptrh	equ	0xFF7
  8001                           tblptrl	equ	0xFF6
  8002                           tablat	equ	0xFF5
  8003                           prodl	equ	0xFF3
  8004                           intcon	equ	0xFF2
  8005                           intcon2	equ	0xFF1
  8006                           postinc0	equ	0xFEE
  8007                           wreg	equ	0xFE8
  8008                           postdec1	equ	0xFE5
  8009                           fsr1l	equ	0xFE1
  8010                           indf2	equ	0xFDF
  8011                           postinc2	equ	0xFDE
  8012                           postdec2	equ	0xFDD
  8013                           fsr2h	equ	0xFDA
  8014                           fsr2l	equ	0xFD9
  8015                           status	equ	0xFD8
  8016                           
  8017 ;; *************** function _lcd_send *****************
  8018 ;; Defined at:
  8019 ;;		line 125 in file "../../../lib/lcd44780.c"
  8020 ;; Parameters:    Size  Location     Type
  8021 ;;  value           1    wreg     unsigned char 
  8022 ;;  mode            1    4[COMRAM] unsigned char 
  8023 ;; Auto vars:     Size  Location     Type
  8024 ;;  value           1    5[COMRAM] unsigned char 
  8025 ;; Return value:  Size  Location     Type
  8026 ;;		None               void
  8027 ;; Registers used:
  8028 ;;		wreg, status,2, status,0, cstack
  8029 ;; Tracked objects:
  8030 ;;		On entry : 0/0
  8031 ;;		On exit  : 0/0
  8032 ;;		Unchanged: 0/0
  8033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8034 ;;      Params:         1       0       0       0       0       0       0       0       0
  8035 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8036 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8037 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8038 ;;Total ram usage:        2 bytes
  8039 ;; Hardware stack levels used:    1
  8040 ;; Hardware stack levels required when called:    2
  8041 ;; This function calls:
  8042 ;;		_lcd_write4bits
  8043 ;; This function is called by:
  8044 ;;		_lcd_command
  8045 ;;		_lcd_puts
  8046 ;;		_calibrate
  8047 ;;		_output_putch
  8048 ;; This function uses a non-reentrant model
  8049 ;;
  8050                           
  8051                           	psect	text46
  8052  0028FA                     __ptext46:
  8053                           	opt stack 0
  8054  0028FA                     _lcd_send:
  8055                           	opt stack 25
  8056                           
  8057                           ;incstack = 0
  8058                           ;lcd_send@value stored from wreg
  8059  0028FA  6E06               	movwf	lcd_send@value,c
  8060                           
  8061                           ;lcd44780.c: 126: if(mode) {
  8062  0028FC  5005               	movf	lcd_send@mode,w,c
  8063  0028FE  E002               	bz	l2668
  8064                           
  8065                           ;lcd44780.c: 127: LATB |= 0b0100;
  8066  002900  848A               	bsf	3978,2,c	;volatile
  8067                           
  8068                           ;lcd44780.c: 128: } else {
  8069  002902  D001               	goto	l2670
  8070  002904                     l2668:
  8071                           
  8072                           ;lcd44780.c: 129: LATB &= ~0b0100;
  8073  002904  948A               	bcf	3978,2,c	;volatile
  8074  002906                     l2670:
  8075                           
  8076                           ;lcd44780.c: 130: }
  8077                           ;lcd44780.c: 137: {
  8078                           ;lcd44780.c: 138: lcd_write4bits(value >> 4);
  8079  002906  3806               	swapf	lcd_send@value,w,c
  8080  002908  0B0F               	andlw	15
  8081  00290A  EC3F  F014         	call	_lcd_write4bits
  8082                           
  8083                           ;lcd44780.c: 139: lcd_write4bits(value);
  8084  00290E  5006               	movf	lcd_send@value,w,c
  8085  002910  EF3F  F014         	goto	_lcd_write4bits
  8086  002914                     __end_of_lcd_send:
  8087                           	opt stack 0
  8088                           tblptru	equ	0xFF8
  8089                           tblptrh	equ	0xFF7
  8090                           tblptrl	equ	0xFF6
  8091                           tablat	equ	0xFF5
  8092                           prodl	equ	0xFF3
  8093                           intcon	equ	0xFF2
  8094                           intcon2	equ	0xFF1
  8095                           postinc0	equ	0xFEE
  8096                           wreg	equ	0xFE8
  8097                           postdec1	equ	0xFE5
  8098                           fsr1l	equ	0xFE1
  8099                           indf2	equ	0xFDF
  8100                           postinc2	equ	0xFDE
  8101                           postdec2	equ	0xFDD
  8102                           fsr2h	equ	0xFDA
  8103                           fsr2l	equ	0xFD9
  8104                           status	equ	0xFD8
  8105                           
  8106 ;; *************** function _lcd_write4bits *****************
  8107 ;; Defined at:
  8108 ;;		line 56 in file "../../../lib/lcd44780.c"
  8109 ;; Parameters:    Size  Location     Type
  8110 ;;  value           1    wreg     unsigned char 
  8111 ;; Auto vars:     Size  Location     Type
  8112 ;;  value           1    3[COMRAM] unsigned char 
  8113 ;; Return value:  Size  Location     Type
  8114 ;;		None               void
  8115 ;; Registers used:
  8116 ;;		wreg, status,2, status,0
  8117 ;; Tracked objects:
  8118 ;;		On entry : 0/0
  8119 ;;		On exit  : 0/0
  8120 ;;		Unchanged: 0/0
  8121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8122 ;;      Params:         0       0       0       0       0       0       0       0       0
  8123 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8124 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8125 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8126 ;;Total ram usage:        1 bytes
  8127 ;; Hardware stack levels used:    1
  8128 ;; Hardware stack levels required when called:    1
  8129 ;; This function calls:
  8130 ;;		Nothing
  8131 ;; This function is called by:
  8132 ;;		_lcd_send
  8133 ;;		_lcd_begin
  8134 ;; This function uses a non-reentrant model
  8135 ;;
  8136                           
  8137                           	psect	text47
  8138  00287E                     __ptext47:
  8139                           	opt stack 0
  8140  00287E                     _lcd_write4bits:
  8141                           	opt stack 25
  8142                           
  8143                           ;incstack = 0
  8144                           ;lcd_write4bits@value stored from wreg
  8145  00287E  6E04               	movwf	lcd_write4bits@value,c
  8146                           
  8147                           ;lcd44780.c: 61: LATB &= 0b00001111;
  8148  002880  0E0F               	movlw	15
  8149  002882  168A               	andwf	3978,f,c	;volatile
  8150                           
  8151                           ;lcd44780.c: 62: LATB |= value << 4;
  8152  002884  3804               	swapf	lcd_write4bits@value,w,c
  8153  002886  0BF0               	andlw	240
  8154  002888  128A               	iorwf	3978,f,c	;volatile
  8155                           
  8156                           ;lcd44780.c: 77: LATB |= 0b1000; _delay((unsigned long)((4)*(20000000/4000000.0))); LATB
      +                           &= ~0b1000; _delay((unsigned long)((100)*(20000000/4000000.0)));;
  8157  00288A  868A               	bsf	3978,3,c	;volatile
  8158  00288C  0E06               	movlw	6
  8159  00288E                     u3587:
  8160  00288E  2EE8               	decfsz	wreg,f,c
  8161  002890  D7FE               	goto	u3587
  8162  002892  D000               	nop2		;nop
  8163  002894  968A               	bcf	3978,3,c	;volatile
  8164  002896  0EA6               	movlw	166
  8165  002898                     u3597:
  8166  002898  2EE8               	decfsz	wreg,f,c
  8167  00289A  D7FE               	goto	u3597
  8168  00289C  D000               	nop2		;nop
  8169  00289E  0012               	return		;funcret
  8170  0028A0                     __end_of_lcd_write4bits:
  8171                           	opt stack 0
  8172                           tblptru	equ	0xFF8
  8173                           tblptrh	equ	0xFF7
  8174                           tblptrl	equ	0xFF6
  8175                           tablat	equ	0xFF5
  8176                           prodl	equ	0xFF3
  8177                           intcon	equ	0xFF2
  8178                           intcon2	equ	0xFF1
  8179                           postinc0	equ	0xFEE
  8180                           wreg	equ	0xFE8
  8181                           postdec1	equ	0xFE5
  8182                           fsr1l	equ	0xFE1
  8183                           indf2	equ	0xFDF
  8184                           postinc2	equ	0xFDE
  8185                           postdec2	equ	0xFDD
  8186                           fsr2h	equ	0xFDA
  8187                           fsr2l	equ	0xFD9
  8188                           status	equ	0xFD8
  8189                           
  8190 ;; *************** function _delay10ms *****************
  8191 ;; Defined at:
  8192 ;;		line 54 in file "../../../LC-meter.c"
  8193 ;; Parameters:    Size  Location     Type
  8194 ;;  period_10ms     1    wreg     unsigned char 
  8195 ;; Auto vars:     Size  Location     Type
  8196 ;;  period_10ms     1    0[COMRAM] unsigned char 
  8197 ;; Return value:  Size  Location     Type
  8198 ;;		None               void
  8199 ;; Registers used:
  8200 ;;		wreg
  8201 ;; Tracked objects:
  8202 ;;		On entry : 0/0
  8203 ;;		On exit  : 0/0
  8204 ;;		Unchanged: 0/0
  8205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8206 ;;      Params:         0       0       0       0       0       0       0       0       0
  8207 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8208 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8209 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8210 ;;Total ram usage:        0 bytes
  8211 ;; Hardware stack levels used:    1
  8212 ;; Hardware stack levels required when called:    1
  8213 ;; This function calls:
  8214 ;;		Nothing
  8215 ;; This function is called by:
  8216 ;;		_calibrate
  8217 ;;		_main
  8218 ;; This function uses a non-reentrant model
  8219 ;;
  8220                           
  8221                           	psect	text48
  8222  00294C                     __ptext48:
  8223                           	opt stack 0
  8224  00294C                     _delay10ms:
  8225                           	opt stack 29
  8226                           
  8227                           ;incstack = 0
  8228  00294C  0012               	return		;funcret
  8229  00294E                     __end_of_delay10ms:
  8230                           	opt stack 0
  8231                           tblptru	equ	0xFF8
  8232                           tblptrh	equ	0xFF7
  8233                           tblptrl	equ	0xFF6
  8234                           tablat	equ	0xFF5
  8235                           prodl	equ	0xFF3
  8236                           intcon	equ	0xFF2
  8237                           intcon2	equ	0xFF1
  8238                           postinc0	equ	0xFEE
  8239                           wreg	equ	0xFE8
  8240                           postdec1	equ	0xFE5
  8241                           fsr1l	equ	0xFE1
  8242                           indf2	equ	0xFDF
  8243                           postinc2	equ	0xFDE
  8244                           postdec2	equ	0xFDD
  8245                           fsr2h	equ	0xFDA
  8246                           fsr2l	equ	0xFD9
  8247                           status	equ	0xFD8
  8248                           
  8249 ;; *************** function ___lwtofl *****************
  8250 ;; Defined at:
  8251 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtofl.c"
  8252 ;; Parameters:    Size  Location     Type
  8253 ;;  c               2   58[COMRAM] unsigned int 
  8254 ;; Auto vars:     Size  Location     Type
  8255 ;;		None
  8256 ;; Return value:  Size  Location     Type
  8257 ;;                  4   58[COMRAM] unsigned int 
  8258 ;; Registers used:
  8259 ;;		wreg, status,2, status,0, cstack
  8260 ;; Tracked objects:
  8261 ;;		On entry : 0/0
  8262 ;;		On exit  : 0/0
  8263 ;;		Unchanged: 0/0
  8264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8265 ;;      Params:         4       0       0       0       0       0       0       0       0
  8266 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8267 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8268 ;;      Totals:         4       0       0       0       0       0       0       0       0
  8269 ;;Total ram usage:        4 bytes
  8270 ;; Hardware stack levels used:    1
  8271 ;; Hardware stack levels required when called:    2
  8272 ;; This function calls:
  8273 ;;		___flpack
  8274 ;; This function is called by:
  8275 ;;		_calibrate
  8276 ;;		_measure_capacitance
  8277 ;;		_measure_inductance
  8278 ;; This function uses a non-reentrant model
  8279 ;;
  8280                           
  8281                           	psect	text49
  8282  0027DE                     __ptext49:
  8283                           	opt stack 0
  8284  0027DE                     ___lwtofl:
  8285                           	opt stack 27
  8286                           
  8287                           ;incstack = 0
  8288  0027DE  C03B  F004         	movff	___lwtofl@c,___flpack@arg
  8289  0027E2  C03C  F005         	movff	___lwtofl@c+1,___flpack@arg+1
  8290  0027E6  6A06               	clrf	___flpack@arg+2,c
  8291  0027E8  6A07               	clrf	___flpack@arg+3,c
  8292  0027EA  0E96               	movlw	150
  8293  0027EC  6E08               	movwf	___flpack@exp,c
  8294  0027EE  0E00               	movlw	0
  8295  0027F0  6E09               	movwf	___flpack@sign,c
  8296  0027F2  EC36  F00F         	call	___flpack	;wreg free
  8297  0027F6  C004  F03B         	movff	?___flpack,?___lwtofl
  8298  0027FA  C005  F03C         	movff	?___flpack+1,?___lwtofl+1
  8299  0027FE  C006  F03D         	movff	?___flpack+2,?___lwtofl+2
  8300  002802  C007  F03E         	movff	?___flpack+3,?___lwtofl+3
  8301  002806  0012               	return		;funcret
  8302  002808                     __end_of___lwtofl:
  8303                           	opt stack 0
  8304                           tblptru	equ	0xFF8
  8305                           tblptrh	equ	0xFF7
  8306                           tblptrl	equ	0xFF6
  8307                           tablat	equ	0xFF5
  8308                           prodl	equ	0xFF3
  8309                           intcon	equ	0xFF2
  8310                           intcon2	equ	0xFF1
  8311                           postinc0	equ	0xFEE
  8312                           wreg	equ	0xFE8
  8313                           postdec1	equ	0xFE5
  8314                           fsr1l	equ	0xFE1
  8315                           indf2	equ	0xFDF
  8316                           postinc2	equ	0xFDE
  8317                           postdec2	equ	0xFDD
  8318                           fsr2h	equ	0xFDA
  8319                           fsr2l	equ	0xFD9
  8320                           status	equ	0xFD8
  8321                           
  8322 ;; *************** function ___flpack *****************
  8323 ;; Defined at:
  8324 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\double.c"
  8325 ;; Parameters:    Size  Location     Type
  8326 ;;  arg             4    3[COMRAM] unsigned long 
  8327 ;;  exp             1    7[COMRAM] unsigned char 
  8328 ;;  sign            1    8[COMRAM] unsigned char 
  8329 ;; Auto vars:     Size  Location     Type
  8330 ;;		None
  8331 ;; Return value:  Size  Location     Type
  8332 ;;                  4    3[COMRAM] unsigned char 
  8333 ;; Registers used:
  8334 ;;		wreg, status,2, status,0
  8335 ;; Tracked objects:
  8336 ;;		On entry : 0/0
  8337 ;;		On exit  : 0/0
  8338 ;;		Unchanged: 0/0
  8339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8340 ;;      Params:         6       0       0       0       0       0       0       0       0
  8341 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8342 ;;      Temps:          4       0       0       0       0       0       0       0       0
  8343 ;;      Totals:        10       0       0       0       0       0       0       0       0
  8344 ;;Total ram usage:       10 bytes
  8345 ;; Hardware stack levels used:    1
  8346 ;; Hardware stack levels required when called:    1
  8347 ;; This function calls:
  8348 ;;		Nothing
  8349 ;; This function is called by:
  8350 ;;		___altofl
  8351 ;;		___awtofl
  8352 ;;		___fladd
  8353 ;;		___fldiv
  8354 ;;		___flmul
  8355 ;;		___lltofl
  8356 ;;		___lwtofl
  8357 ;; This function uses a non-reentrant model
  8358 ;;
  8359                           
  8360                           	psect	text50
  8361  001E6C                     __ptext50:
  8362                           	opt stack 0
  8363  001E6C                     ___flpack:
  8364                           	opt stack 27
  8365                           
  8366                           ;incstack = 0
  8367  001E6C  5008               	movf	___flpack@exp,w,c
  8368  001E6E  E005               	bz	l777
  8369  001E70  5004               	movf	___flpack@arg,w,c
  8370  001E72  1005               	iorwf	___flpack@arg+1,w,c
  8371  001E74  1006               	iorwf	___flpack@arg+2,w,c
  8372  001E76  1007               	iorwf	___flpack@arg+3,w,c
  8373  001E78  E107               	bnz	l3566
  8374  001E7A                     l777:
  8375  001E7A  6A04               	clrf	?___flpack,c
  8376  001E7C  6A05               	clrf	?___flpack+1,c
  8377  001E7E  6A06               	clrf	?___flpack+2,c
  8378  001E80  6A07               	clrf	?___flpack+3,c
  8379  001E82  0012               	return	
  8380  001E84                     l3564:
  8381  001E84  2A08               	incf	___flpack@exp,f,c
  8382  001E86  D84D               	call	PL38	;call to abstracted procedure
  8383  001E88                     l3566:
  8384  001E88  6A0A               	clrf	??___flpack& (0+255),c
  8385  001E8A  6A0B               	clrf	(??___flpack+1)& (0+255),c
  8386  001E8C  6A0C               	clrf	(??___flpack+2)& (0+255),c
  8387  001E8E  0EFE               	movlw	254
  8388  001E90  1407               	andwf	___flpack@arg+3,w,c
  8389  001E92  6E0D               	movwf	(??___flpack+3)& (0+255),c
  8390  001E94  500A               	movf	??___flpack,w,c
  8391  001E96  100B               	iorwf	??___flpack+1,w,c
  8392  001E98  100C               	iorwf	??___flpack+2,w,c
  8393  001E9A  100D               	iorwf	??___flpack+3,w,c
  8394  001E9C  E008               	bz	l782
  8395  001E9E  D7F2               	goto	l3564
  8396  001EA0                     l3568:
  8397  001EA0  2A08               	incf	___flpack@exp,f,c
  8398  001EA2  2A04               	incf	___flpack@arg,f,c
  8399  001EA4  0E00               	movlw	0
  8400  001EA6  2205               	addwfc	___flpack@arg+1,f,c
  8401  001EA8  2206               	addwfc	___flpack@arg+2,f,c
  8402  001EAA  2207               	addwfc	___flpack@arg+3,f,c
  8403  001EAC  D83A               	call	PL38	;call to abstracted procedure
  8404  001EAE                     l782:
  8405  001EAE  6A0A               	clrf	??___flpack& (0+255),c
  8406  001EB0  6A0B               	clrf	(??___flpack+1)& (0+255),c
  8407  001EB2  6A0C               	clrf	(??___flpack+2)& (0+255),c
  8408  001EB4  5007               	movf	___flpack@arg+3,w,c
  8409  001EB6  6E0D               	movwf	(??___flpack+3)& (0+255),c
  8410  001EB8  500A               	movf	??___flpack,w,c
  8411  001EBA  100B               	iorwf	??___flpack+1,w,c
  8412  001EBC  100C               	iorwf	??___flpack+2,w,c
  8413  001EBE  100D               	iorwf	??___flpack+3,w,c
  8414  001EC0  E007               	bz	l3576
  8415  001EC2  D7EE               	goto	l3568
  8416  001EC4                     l3574:
  8417  001EC4  0608               	decf	___flpack@exp,f,c
  8418  001EC6  90D8               	bcf	status,0,c
  8419  001EC8  3604               	rlcf	___flpack@arg,f,c
  8420  001ECA  3605               	rlcf	___flpack@arg+1,f,c
  8421  001ECC  3606               	rlcf	___flpack@arg+2,f,c
  8422  001ECE  3607               	rlcf	___flpack@arg+3,f,c
  8423  001ED0                     l3576:
  8424  001ED0  BE06               	btfsc	___flpack@arg+2,7,c
  8425  001ED2  D003               	goto	l789
  8426  001ED4  0E02               	movlw	2
  8427  001ED6  6008               	cpfslt	___flpack@exp,c
  8428  001ED8  D7F5               	goto	l3574
  8429  001EDA                     l789:
  8430  001EDA  B008               	btfsc	___flpack@exp,0,c
  8431  001EDC  D002               	goto	l790
  8432  001EDE  0E7F               	movlw	127
  8433  001EE0  1606               	andwf	___flpack@arg+2,f,c
  8434  001EE2                     l790:
  8435  001EE2  90D8               	bcf	status,0,c
  8436  001EE4  3208               	rrcf	___flpack@exp,f,c
  8437  001EE6  C008  F00A         	movff	___flpack@exp,??___flpack
  8438  001EEA  6A0B               	clrf	(??___flpack+1)& (0+255),c
  8439  001EEC  6A0C               	clrf	(??___flpack+2)& (0+255),c
  8440  001EEE  6A0D               	clrf	(??___flpack+3)& (0+255),c
  8441  001EF0  C00A  F00D         	movff	??___flpack,??___flpack+3
  8442  001EF4  6A0C               	clrf	??___flpack+2,c
  8443  001EF6  6A0B               	clrf	??___flpack+1,c
  8444  001EF8  6A0A               	clrf	??___flpack,c
  8445  001EFA  500A               	movf	??___flpack,w,c
  8446  001EFC  1204               	iorwf	___flpack@arg,f,c
  8447  001EFE  500B               	movf	??___flpack+1,w,c
  8448  001F00  1205               	iorwf	___flpack@arg+1,f,c
  8449  001F02  500C               	movf	??___flpack+2,w,c
  8450  001F04  1206               	iorwf	___flpack@arg+2,f,c
  8451  001F06  500D               	movf	??___flpack+3,w,c
  8452  001F08  1207               	iorwf	___flpack@arg+3,f,c
  8453  001F0A  5009               	movf	___flpack@sign,w,c
  8454  001F0C  A4D8               	btfss	status,2,c
  8455  001F0E  8E07               	bsf	___flpack@arg+3,7,c
  8456  001F10  C004  F004         	movff	___flpack@arg,?___flpack
  8457  001F14  C005  F005         	movff	___flpack@arg+1,?___flpack+1
  8458  001F18  C006  F006         	movff	___flpack@arg+2,?___flpack+2
  8459  001F1C  C007  F007         	movff	___flpack@arg+3,?___flpack+3
  8460  001F20  0012               	return		;funcret
  8461  001F22                     __end_of___flpack:
  8462                           	opt stack 0
  8463  001F22                     PL38:
  8464                           	opt stack 27
  8465  001F22  90D8               	bcf	status,0,c
  8466  001F24  3207               	rrcf	___flpack@arg+3,f,c
  8467  001F26  3206               	rrcf	___flpack@arg+2,f,c
  8468  001F28  3205               	rrcf	___flpack@arg+1,f,c
  8469  001F2A  3204               	rrcf	___flpack@arg,f,c
  8470  001F2C  0012               	return	
  8471  001F2E                     __end_ofPL38:
  8472                           	opt stack 0
  8473                           tblptru	equ	0xFF8
  8474                           tblptrh	equ	0xFF7
  8475                           tblptrl	equ	0xFF6
  8476                           tablat	equ	0xFF5
  8477                           prodl	equ	0xFF3
  8478                           intcon	equ	0xFF2
  8479                           intcon2	equ	0xFF1
  8480                           postinc0	equ	0xFEE
  8481                           wreg	equ	0xFE8
  8482                           postdec1	equ	0xFE5
  8483                           fsr1l	equ	0xFE1
  8484                           indf2	equ	0xFDF
  8485                           postinc2	equ	0xFDE
  8486                           postdec2	equ	0xFDD
  8487                           fsr2h	equ	0xFDA
  8488                           fsr2l	equ	0xFD9
  8489                           status	equ	0xFD8
  8490                           
  8491 ;; *************** function _global_int *****************
  8492 ;; Defined at:
  8493 ;;		line 76 in file "../../../LC-meter.c"
  8494 ;; Parameters:    Size  Location     Type
  8495 ;;		None
  8496 ;; Auto vars:     Size  Location     Type
  8497 ;;		None
  8498 ;; Return value:  Size  Location     Type
  8499 ;;		None               void
  8500 ;; Registers used:
  8501 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8502 ;; Tracked objects:
  8503 ;;		On entry : 0/0
  8504 ;;		On exit  : 0/0
  8505 ;;		Unchanged: 0/0
  8506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8507 ;;      Params:         0       0       0       0       0       0       0       0       0
  8508 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8509 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8510 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8511 ;;Total ram usage:        3 bytes
  8512 ;; Hardware stack levels used:    1
  8513 ;; This function calls:
  8514 ;;		Nothing
  8515 ;; This function is called by:
  8516 ;;		Interrupt level 2
  8517 ;; This function uses a non-reentrant model
  8518 ;;
  8519                           
  8520                           	psect	intcode
  8521  000008                     __pintcode:
  8522                           	opt stack 0
  8523  000008                     _global_int:
  8524                           	opt stack 23
  8525                           
  8526                           ;incstack = 0
  8527  000008  CFD9 F002          	movff	fsr2l,??_global_int+1
  8528  00000C  CFDA F003          	movff	fsr2h,??_global_int+2
  8529                           
  8530                           ;LC-meter.c: 81: if(PIR1 & 0x02) {
  8531  000010  A29E               	btfss	3998,1,c	;volatile
  8532  000012  D03A               	goto	i2l3468
  8533                           
  8534                           ;LC-meter.c: 83: bres += 256;
  8535  000014  0100               	movlb	0	; () banked
  8536  000016  2BEE               	incf	(_bres+1)& (0+255),f,b	;volatile
  8537                           
  8538                           ;LC-meter.c: 85: if(bres >= 5000) {
  8539  000018  0E88               	movlw	136
  8540  00001A  5DED               	subwf	_bres& (0+255),w,b	;volatile
  8541  00001C  0E13               	movlw	19
  8542  00001E  59EE               	subwfb	(_bres+1)& (0+255),w,b	;volatile
  8543  000020  E332               	bnc	i2l3466
  8544                           
  8545                           ; BSR set to: 0
  8546                           ;LC-meter.c: 86: bres -= 5000;
  8547  000022  0E88               	movlw	136
  8548  000024  5FED               	subwf	_bres& (0+255),f,b	;volatile
  8549  000026  0E13               	movlw	19
  8550  000028  5BEE               	subwfb	(_bres+1)& (0+255),f,b	;volatile
  8551                           
  8552                           ; BSR set to: 0
  8553                           ;LC-meter.c: 87: msecpart++;
  8554  00002A  4BEF               	infsnz	_msecpart& (0+255),f,b	;volatile
  8555  00002C  2BF0               	incf	(_msecpart+1)& (0+255),f,b	;volatile
  8556                           
  8557                           ; BSR set to: 0
  8558                           ;LC-meter.c: 88: msecs++;
  8559  00002E  2BC0               	incf	_msecs& (0+255),f,b	;volatile
  8560  000030  0E00               	movlw	0
  8561  000032  23C1               	addwfc	(_msecs+1)& (0+255),f,b	;volatile
  8562  000034  23C2               	addwfc	(_msecs+2)& (0+255),f,b	;volatile
  8563  000036  23C3               	addwfc	(_msecs+3)& (0+255),f,b	;volatile
  8564                           
  8565                           ;LC-meter.c: 90: LATC &= ~0b00000010; LATC |= (!!((blink > 200))) << 1;;
  8566  000038  928B               	bcf	3979,1,c	;volatile
  8567                           
  8568                           ; BSR set to: 0
  8569  00003A  51CD               	movf	(_blink+1)& (0+255),w,b	;volatile
  8570  00003C  E103               	bnz	i2u253_41
  8571  00003E  0EC9               	movlw	201
  8572  000040  5DCC               	subwf	_blink& (0+255),w,b	;volatile
  8573  000042  E303               	bnc	i2u253_40
  8574  000044                     i2u253_41:
  8575  000044  6A01               	clrf	??_global_int& (0+255),c
  8576  000046  2A01               	incf	??_global_int& (0+255),f,c
  8577  000048  D001               	goto	i2u254_48
  8578  00004A                     i2u253_40:
  8579  00004A  6A01               	clrf	??_global_int& (0+255),c
  8580  00004C                     i2u254_48:
  8581  00004C  90D8               	bcf	status,0,c
  8582  00004E  3401               	rlcf	??_global_int,w,c
  8583  000050  128B               	iorwf	3979,f,c	;volatile
  8584                           
  8585                           ;LC-meter.c: 91: if(blink >= 400)
  8586  000052  0E90               	movlw	144
  8587  000054  0100               	movlb	0	; () banked
  8588  000056  5DCC               	subwf	_blink& (0+255),w,b	;volatile
  8589  000058  0E01               	movlw	1
  8590  00005A  59CD               	subwfb	(_blink+1)& (0+255),w,b	;volatile
  8591  00005C  E304               	bnc	i2l3460
  8592                           
  8593                           ; BSR set to: 0
  8594                           ;LC-meter.c: 92: blink -= 400;
  8595  00005E  0E90               	movlw	144
  8596  000060  5FCC               	subwf	_blink& (0+255),f,b	;volatile
  8597  000062  0E01               	movlw	1
  8598  000064  5BCD               	subwfb	(_blink+1)& (0+255),f,b	;volatile
  8599  000066                     i2l3460:
  8600                           
  8601                           ; BSR set to: 0
  8602                           ;LC-meter.c: 93: ++blink;
  8603  000066  4BCC               	infsnz	_blink& (0+255),f,b	;volatile
  8604  000068  2BCD               	incf	(_blink+1)& (0+255),f,b	;volatile
  8605                           
  8606                           ; BSR set to: 0
  8607                           ;LC-meter.c: 96: if(msecpart >= 1000) {
  8608  00006A  0EE8               	movlw	232
  8609  00006C  5DEF               	subwf	_msecpart& (0+255),w,b	;volatile
  8610  00006E  0E03               	movlw	3
  8611  000070  59F0               	subwfb	(_msecpart+1)& (0+255),w,b	;volatile
  8612  000072  E309               	bnc	i2l3466
  8613                           
  8614                           ; BSR set to: 0
  8615                           ;LC-meter.c: 98: seconds++;
  8616  000074  2BC4               	incf	_seconds& (0+255),f,b	;volatile
  8617  000076  0E00               	movlw	0
  8618  000078  23C5               	addwfc	(_seconds+1)& (0+255),f,b	;volatile
  8619  00007A  23C6               	addwfc	(_seconds+2)& (0+255),f,b	;volatile
  8620  00007C  23C7               	addwfc	(_seconds+3)& (0+255),f,b	;volatile
  8621                           
  8622                           ;LC-meter.c: 99: msecpart -= 1000;
  8623  00007E  0EE8               	movlw	232
  8624  000080  5FEF               	subwf	_msecpart& (0+255),f,b	;volatile
  8625  000082  0E03               	movlw	3
  8626  000084  5BF0               	subwfb	(_msecpart+1)& (0+255),f,b	;volatile
  8627  000086                     i2l3466:
  8628                           
  8629                           ; BSR set to: 0
  8630                           ;LC-meter.c: 100: }
  8631                           ;LC-meter.c: 101: }
  8632                           ;LC-meter.c: 103: PIR1 &= ~0b10;
  8633  000086  929E               	bcf	3998,1,c	;volatile
  8634  000088                     i2l3468:
  8635                           
  8636                           ;LC-meter.c: 104: }
  8637                           ;LC-meter.c: 106: if(RCIF) { rxfifo[rxiptr] = RCREG; ser_tmp = (rxiptr + 1) & ((uint8_t)
      +                          16 - 1); if(ser_tmp != rxoptr) rxiptr = ser_tmp; }; if(TXIF && TXIE) { TXREG = txfifo[tx
      +                          optr]; ++txoptr; txoptr &= ((uint8_t)16 - 1); if(txoptr == txiptr) { TXIE = 0; }; TXIF =
      +                           0; 
  8638  000088  AA9E               	btfss	3998,5,c	;volatile
  8639  00008A  D011               	goto	i2l440
  8640  00008C  0E00               	movlw	low _rxfifo
  8641  00008E  0100               	movlb	0	; () banked
  8642  000090  25D1               	addwf	_rxiptr& (0+255),w,b	;volatile
  8643  000092  6ED9               	movwf	fsr2l,c
  8644  000094  6ADA               	clrf	fsr2h,c
  8645  000096  0E01               	movlw	high _rxfifo
  8646  000098  22DA               	addwfc	fsr2h,f,c
  8647  00009A  CFAE FFDF          	movff	4014,indf2	;volatile
  8648                           
  8649                           ; BSR set to: 0
  8650  00009E  29D1               	incf	_rxiptr& (0+255),w,b	;volatile
  8651  0000A0  0B0F               	andlw	15
  8652  0000A2  6FD3               	movwf	_ser_tmp& (0+255),b
  8653                           
  8654                           ; BSR set to: 0
  8655  0000A4  51D2               	movf	_rxoptr& (0+255),w,b	;volatile
  8656  0000A6  19D3               	xorwf	_ser_tmp& (0+255),w,b
  8657  0000A8  A4D8               	btfss	status,2,c
  8658                           
  8659                           ; BSR set to: 0
  8660  0000AA  C0D3  F0D1         	movff	_ser_tmp,_rxiptr	;volatile
  8661  0000AE                     i2l440:
  8662  0000AE  B89E               	btfsc	3998,4,c	;volatile
  8663  0000B0  A89D               	btfss	3997,4,c	;volatile
  8664  0000B2  D010               	goto	i2l444
  8665  0000B4  0E10               	movlw	low _txfifo
  8666  0000B6  245C               	addwf	_txoptr,w,c	;volatile
  8667  0000B8  6ED9               	movwf	fsr2l,c
  8668  0000BA  6ADA               	clrf	fsr2h,c
  8669  0000BC  0E01               	movlw	high _txfifo
  8670  0000BE  22DA               	addwfc	fsr2h,f,c
  8671  0000C0  50DF               	movf	indf2,w,c
  8672  0000C2  6EAD               	movwf	4013,c	;volatile
  8673  0000C4  2A5C               	incf	_txoptr,f,c	;volatile
  8674  0000C6  0E0F               	movlw	15
  8675  0000C8  165C               	andwf	_txoptr,f,c	;volatile
  8676  0000CA  505B               	movf	_txiptr,w,c	;volatile
  8677  0000CC  185C               	xorwf	_txoptr,w,c	;volatile
  8678  0000CE  B4D8               	btfsc	status,2,c
  8679  0000D0  989D               	bcf	3997,4,c	;volatile
  8680  0000D2  989E               	bcf	3998,4,c	;volatile
  8681  0000D4                     i2l444:
  8682  0000D4  C003  FFDA         	movff	??_global_int+2,fsr2h
  8683  0000D8  C002  FFD9         	movff	??_global_int+1,fsr2l
  8684  0000DC  0011               	retfie		f
  8685  0000DE                     __end_of_global_int:
  8686                           	opt stack 0
  8687                           tblptru	equ	0xFF8
  8688                           tblptrh	equ	0xFF7
  8689                           tblptrl	equ	0xFF6
  8690                           tablat	equ	0xFF5
  8691                           prodl	equ	0xFF3
  8692                           intcon	equ	0xFF2
  8693                           intcon2	equ	0xFF1
  8694                           postinc0	equ	0xFEE
  8695                           wreg	equ	0xFE8
  8696                           postdec1	equ	0xFE5
  8697                           fsr1l	equ	0xFE1
  8698                           indf2	equ	0xFDF
  8699                           postinc2	equ	0xFDE
  8700                           postdec2	equ	0xFDD
  8701                           fsr2h	equ	0xFDA
  8702                           fsr2l	equ	0xFD9
  8703                           status	equ	0xFD8
  8704                           tblptru	equ	0xFF8
  8705                           tblptrh	equ	0xFF7
  8706                           tblptrl	equ	0xFF6
  8707                           tablat	equ	0xFF5
  8708                           prodl	equ	0xFF3
  8709                           intcon	equ	0xFF2
  8710                           intcon2	equ	0xFF1
  8711                           postinc0	equ	0xFEE
  8712                           wreg	equ	0xFE8
  8713                           postdec1	equ	0xFE5
  8714                           fsr1l	equ	0xFE1
  8715                           indf2	equ	0xFDF
  8716                           postinc2	equ	0xFDE
  8717                           postdec2	equ	0xFDD
  8718                           fsr2h	equ	0xFDA
  8719                           fsr2l	equ	0xFD9
  8720                           status	equ	0xFD8
  8721                           
  8722                           	psect	rparam
  8723  0000                     tblptru	equ	0xFF8
  8724                           tblptrh	equ	0xFF7
  8725                           tblptrl	equ	0xFF6
  8726                           tablat	equ	0xFF5
  8727                           prodl	equ	0xFF3
  8728                           intcon	equ	0xFF2
  8729                           intcon2	equ	0xFF1
  8730                           postinc0	equ	0xFEE
  8731                           wreg	equ	0xFE8
  8732                           postdec1	equ	0xFE5
  8733                           fsr1l	equ	0xFE1
  8734                           indf2	equ	0xFDF
  8735                           postinc2	equ	0xFDE
  8736                           postdec2	equ	0xFDD
  8737                           fsr2h	equ	0xFDA
  8738                           fsr2l	equ	0xFD9
  8739                           status	equ	0xFD8
  8740                           tblptru	equ	0xFF8
  8741                           tblptrh	equ	0xFF7
  8742                           tblptrl	equ	0xFF6
  8743                           tablat	equ	0xFF5
  8744                           prodl	equ	0xFF3
  8745                           intcon	equ	0xFF2
  8746                           intcon2	equ	0xFF1
  8747                           postinc0	equ	0xFEE
  8748                           wreg	equ	0xFE8
  8749                           postdec1	equ	0xFE5
  8750                           fsr1l	equ	0xFE1
  8751                           indf2	equ	0xFDF
  8752                           postinc2	equ	0xFDE
  8753                           postdec2	equ	0xFDD
  8754                           fsr2h	equ	0xFDA
  8755                           fsr2l	equ	0xFD9
  8756                           status	equ	0xFD8


Data Sizes:
    Strings     145
    Constant    76
    Data        4
    BSS         84
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     89      92
    BANK0           160     88     149
    BANK1           256      0      32
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(1) Largest target is 40
		 -> exp@coeff(CODE[40]), log@coeff(CODE[36]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(BANK0[2]), 

    ser_puts@s	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_34(CODE[3]), STR_29(CODE[6]), STR_24(CODE[3]), STR_14(CODE[3]), 
		 -> STR_13(CODE[5]), STR_12(CODE[3]), STR_11(CODE[8]), STR_10(CODE[6]), 
		 -> STR_9(CODE[6]), STR_8(CODE[6]), STR_7(CODE[5]), STR_4(CODE[3]), 
		 -> STR_2(CODE[3]), 

    put_str@s	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_15(CODE[13]), STR_6(CODE[10]), STR_5(CODE[6]), STR_3(CODE[15]), 
		 -> STR_1(CODE[12]), 

    print_unit@units	PTR const unsigned char [8] size(1) Largest target is 3
		 -> STR_23(CODE[3]), STR_22(CODE[3]), STR_21(CODE[3]), STR_20(CODE[3]), 
		 -> STR_19(CODE[3]), STR_18(CODE[3]), STR_17(CODE[3]), STR_16(CODE[2]), 

    lcd_puts@string	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_33(CODE[5]), STR_32(CODE[6]), STR_31(CODE[7]), STR_30(CODE[7]), 
		 -> STR_28(CODE[10]), STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[6]), 


Critical Paths under _main in COMRAM

    _measure_inductance->___fltol
    _measure_capacitance->___fltol
    _print_unit->_lcd_gotoxy
    _print_reading->_format_number
    _format_xint32->_format_number
    _format_double->___fltol
    _pow->___fltol
    _exp->___fltol
    _ldexp->_eval_poly
    _floor->___fltol
    ___fltol->_log10
    ___altofl->___fltol
    ___flsub->___fladd
    ___fldiv->___flpack
    ___lltofl->___flpack
    _log10->_log
    _log->_eval_poly
    _eval_poly->___fladd
    ___flmul->___fldiv
    ___fladd->___flmul
    ___awtofl->___flpack
    _lcd_begin->_lcd_command
    _indicator->_lcd_gotoxy
    _lcd_puts->_lcd_send
    _calibrate->___lwtofl
    _ser_puts->_ser_putch
    _measure_freq->_format_number
    _put_str->_output_putch
    _output_putch->_lcd_send
    _lcd_gotoxy->_lcd_command
    _format_number->___lwdiv
    _lcd_clear->_lcd_command
    _lcd_command->_lcd_send
    _lcd_send->_lcd_write4bits
    ___lwtofl->_measure_freq

Critical Paths under _global_int in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_measure_capacitance
    _measure_inductance->___fltol
    _measure_capacitance->_format_double
    _format_double->_pow
    _pow->_exp
    _exp->_floor
    _floor->___altofl
    ___altofl->___fltol

Critical Paths under _global_int in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _global_int in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _global_int in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _global_int in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _global_int in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _global_int in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _global_int in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _global_int in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  382942
                          _calibrate
                          _delay10ms
                      _format_double
                          _indicator
                          _lcd_begin
                          _lcd_clear
                         _lcd_gotoxy
                           _lcd_init
                           _lcd_puts
                _measure_capacitance
                 _measure_inductance
                           _ser_init
                           _ser_puts
                        _timer0_init
                        _timer2_init
 ---------------------------------------------------------------------------------
 (1) _timer2_init                                          4     4      0      90
                                              3 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _timer0_init                                         10    10      0     251
                                              3 COMRAM    10    10      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _measure_inductance                                  55    55      0   37031
                                              2 BANK0     43    43      0
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___lwtofl
                         _lcd_gotoxy
                       _measure_freq
                      _print_reading
                         _print_unit
                            _put_str
 ---------------------------------------------------------------------------------
 (1) _measure_capacitance                                 19    19      0  183737
                                             69 BANK0     19    19      0
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___lwtofl
                      _format_double
                      _format_xint32
                         _lcd_gotoxy
                       _measure_freq
                      _print_reading
                         _print_unit
                            _put_str
                          _ser_putch
                           _ser_puts
 ---------------------------------------------------------------------------------
 (2) _print_unit                                           3     3      0    1996
                                             13 COMRAM     2     2      0
                         _lcd_gotoxy
                           _ser_puts
 ---------------------------------------------------------------------------------
 (2) _print_reading                                        6     4      2    6020
                                             53 COMRAM     6     4      2
                            ___lwdiv
                            ___lwmod
                      _format_number
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (2) _format_xint32                                        4     0      4    2920
                                             53 COMRAM     4     0      4
                       _buffer_putch
                      _format_number
 ---------------------------------------------------------------------------------
 (2) _format_double                                       20    16      4  143763
                                             49 BANK0     20    16      4
                           ___awtofl
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                       _buffer_putch
                              _floor
                              _log10
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                 21    13      8   80457
                                             28 BANK0     21    13      8
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___lltofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _exp                                                 11     7      4   43098
                                             17 BANK0     11     7      4
                           ___awtofl
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (5) _ldexp                                                8     2      6     354
                                             67 COMRAM     8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (5) _floor                                               10     6      4   10114
                                              7 BANK0     10     6      4
                           ___altofl
                            ___fladd
                            ___fldiv (ARG)
                             ___flge
                            ___fltol
                              _frexp
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     882
                                             81 COMRAM     8     4      4
                                              0 BANK0      2     2      0
                            ___fldiv (ARG)
                              _log10 (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                               8     0      8    1594
                                              3 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (6) ___altofl                                             5     1      4    2446
                                              2 BANK0      5     1      4
                           ___flpack
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    5179
                                             55 COMRAM     8     0      8
                           ___awtofl (ARG)
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4     204
                                              3 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             15     7      8    3931
                                             13 COMRAM    15     7      8
                           ___flpack
 ---------------------------------------------------------------------------------
 (4) ___lltofl                                             4     0      4    2344
                                             13 COMRAM     4     0      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (3) _log10                                                8     4      4   31773
                                             73 COMRAM     8     4      4
                            ___flmul
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  6     2      4   25256
                                             67 COMRAM     6     2      4
                           ___awtofl
                            ___fladd
                            ___flmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                7     2      5     436
                                              3 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           12     5      7   11199
                                             55 COMRAM    12     5      7
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             15     7      8    6342
                                             28 COMRAM    15     7      8
                           ___awtofl (ARG)
                            ___fldiv (ARG)
                           ___flpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             12     4      8    4213
                                             43 COMRAM    12     4      8
                           ___awtofl (ARG)
                            ___flmul (ARG)
                           ___flpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awtofl                                             9     5      4    2686
                                             13 COMRAM     5     1      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             3     3      0      46
                                              3 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcd_begin                                            3     2      1     685
                                              7 COMRAM     3     2      1
                        _lcd_command
                     _lcd_write4bits
 ---------------------------------------------------------------------------------
 (1) _indicator                                            1     1      0    2406
                                             13 COMRAM     1     1      0
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (3) _lcd_puts                                             3     3      0     806
                                              6 COMRAM     3     3      0
                           _lcd_send
 ---------------------------------------------------------------------------------
 (1) _calibrate                                            1     1      0   11609
                                             62 COMRAM     1     1      0
                           ___lwtofl
                          _delay10ms
                          _lcd_clear
                         _lcd_gotoxy
                           _lcd_send
                       _measure_freq
                            _put_str
                           _ser_puts
 ---------------------------------------------------------------------------------
 (1) _ser_puts                                             1     1      0     418
                                              4 COMRAM     1     1      0
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _measure_freq                                         5     3      2    5063
                                             53 COMRAM     5     3      2
                      _format_number
                         _lcd_gotoxy
                            _put_str
                     _timer0_read_ps
 ---------------------------------------------------------------------------------
 (3) _timer0_read_ps                                       7     5      2     114
                                              3 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _put_str                                              4     4      0     791
                                              7 COMRAM     4     4      0
                       _output_putch
 ---------------------------------------------------------------------------------
 (3) _output_putch                                         1     1      0     566
                                              6 COMRAM     1     1      0
                           _lcd_send
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _ser_putch                                            1     1      0      22
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _lcd_gotoxy                                           6     5      1    1578
                                              7 COMRAM     6     5      1
                        _lcd_command
 ---------------------------------------------------------------------------------
 (3) _format_number                                       43    39      4    2535
                                             10 COMRAM    43    39      4
                            ___lwdiv
                            ___lwmod
                       _buffer_putch
 ---------------------------------------------------------------------------------
 (4) _buffer_putch                                         3     3      0      22
                                              3 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     451
                                              3 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     454
                                              3 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            1     1      0     522
                                              7 COMRAM     1     1      0
                        _lcd_command
 ---------------------------------------------------------------------------------
 (4) _lcd_command                                          1     1      0     522
                                              6 COMRAM     1     1      0
                           _lcd_send
 ---------------------------------------------------------------------------------
 (4) _lcd_send                                             2     1      1     500
                                              4 COMRAM     2     1      1
                     _lcd_write4bits
 ---------------------------------------------------------------------------------
 (5) _lcd_write4bits                                       1     1      0      22
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _delay10ms                                            1     1      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4    2669
                                             58 COMRAM     4     0      4
                           ___flpack
                       _measure_freq (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6    2248
                                              3 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _global_int                                           3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calibrate
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _put_str
           _output_putch
             _lcd_send
               _lcd_write4bits
             _ser_putch
         _timer0_read_ps
     _delay10ms
     _lcd_clear
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_send
       _lcd_write4bits
     _measure_freq
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _put_str
         _output_putch
           _lcd_send
             _lcd_write4bits
           _ser_putch
       _timer0_read_ps
     _put_str
       _output_putch
         _lcd_send
           _lcd_write4bits
         _ser_putch
     _ser_puts
       _ser_putch
   _delay10ms
   _format_double
     ___awtofl
       ___flpack
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     _buffer_putch
     _floor
       ___altofl
         ___flpack
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
       ___fladd
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___fldiv (ARG)
         ___flpack
       ___flge (ARG)
       ___fltol (ARG)
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       _frexp (ARG)
     _log10
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       _log
         ___awtofl
           ___flpack
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _frexp
     _pow
       ___flge
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       ___flneg
       ___fltol
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       ___lltofl
         ___flpack
       _exp
         ___awtofl
           ___flpack
         ___fldiv
           ___flpack
         ___flge
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         ___flsub
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _floor
           ___altofl
             ___flpack
             ___fltol (ARG)
               ___fldiv (ARG)
                 ___flpack
               _log10 (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _log
                   ___awtofl
                     ___flpack
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___fladd
                       ___awtofl (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                   _frexp
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flge (ARG)
           ___fltol (ARG)
             ___fldiv (ARG)
               ___flpack
             _log10 (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
           _frexp (ARG)
         _ldexp
           _eval_poly (ARG)
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
         _log (ARG)
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
       _log
         ___awtofl
           ___flpack
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _frexp
   _indicator
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_puts
       _lcd_send
         _lcd_write4bits
   _lcd_begin
     _lcd_command
       _lcd_send
         _lcd_write4bits
     _lcd_write4bits
   _lcd_clear
     _lcd_command
       _lcd_send
         _lcd_write4bits
   _lcd_gotoxy
     _lcd_command
       _lcd_send
         _lcd_write4bits
   _lcd_init
   _lcd_puts
     _lcd_send
       _lcd_write4bits
   _measure_capacitance
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _put_str
           _output_putch
             _lcd_send
               _lcd_write4bits
             _ser_putch
         _timer0_read_ps
     _format_double
       ___awtofl
         ___flpack
       ___fldiv
         ___flpack
       ___flge
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       ___flsub
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
       ___fltol
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       _buffer_putch
       _floor
         ___altofl
           ___flpack
           ___fltol (ARG)
             ___fldiv (ARG)
               ___flpack
             _log10 (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flge (ARG)
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
         _frexp (ARG)
       _log10
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
       _pow
         ___flge
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         ___fltol
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
         ___lltofl
           ___flpack
         _exp
           ___awtofl
             ___flpack
           ___fldiv
             ___flpack
           ___flge
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg
           ___flsub
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           ___fltol
             ___fldiv (ARG)
               ___flpack
             _log10 (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _floor
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 _log10 (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   _log
                     ___awtofl
                       ___flpack
                     ___fladd
                       ___awtofl (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     _eval_poly
                       ___fladd
                         ___awtofl (ARG)
                           ___flpack
                         ___flmul (ARG)
                           ___awtofl (ARG)
                             ___flpack
                           ___fldiv (ARG)
                             ___flpack
                           ___flpack (ARG)
                           _frexp (ARG)
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flmul
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                     _frexp
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flge (ARG)
             ___fltol (ARG)
               ___fldiv (ARG)
                 ___flpack
               _log10 (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _log
                   ___awtofl
                     ___flpack
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___fladd
                       ___awtofl (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                   _frexp
             _frexp (ARG)
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
           _log (ARG)
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     _format_xint32
       _buffer_putch
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _measure_freq
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _put_str
         _output_putch
           _lcd_send
             _lcd_write4bits
           _ser_putch
       _timer0_read_ps
     _print_reading
       ___lwdiv
       ___lwmod
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _lcd_puts
         _lcd_send
           _lcd_write4bits
     _print_unit
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _ser_puts
         _ser_putch
     _put_str
       _output_putch
         _lcd_send
           _lcd_write4bits
         _ser_putch
     _ser_putch
     _ser_puts
       _ser_putch
   _measure_inductance
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _put_str
           _output_putch
             _lcd_send
               _lcd_write4bits
             _ser_putch
         _timer0_read_ps
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _measure_freq
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _put_str
         _output_putch
           _lcd_send
             _lcd_write4bits
           _ser_putch
       _timer0_read_ps
     _print_reading
       ___lwdiv
       ___lwmod
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _lcd_puts
         _lcd_send
           _lcd_write4bits
     _print_unit
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _ser_puts
         _ser_putch
     _put_str
       _output_putch
         _lcd_send
           _lcd_write4bits
         _ser_putch
   _ser_init
   _ser_puts
     _ser_putch
   _timer0_init
   _timer2_init

 _global_int (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      20       8       12.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     58      95       5       93.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     59      5C       1       96.8%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     111       6        0.0%
DATA                 0      0     111       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Sep 17 02:09:19 2019

                ___altofl@sign 0066                   ___fldiv@cntr 001A                   ___fldiv@sign 001C  
                           PL2 0D0A                             PL4 10A2                             PL6 10C4  
                           PL8 0D2C                             _F1 00E5                             _F2 00B8  
                           _F3 00BC                   ___flpack@arg 0004                            PL10 10E6  
                          PL20 110E                            PL12 17DC                            PL30 27CE  
                          PL22 1120                            PL14 10FC                            PL40 28D4  
                          PL32 1142                            PL24 27A4                            PL16 2076  
                          PL34 1152                            PL26 1908                            PL18 1E4C  
                          PL36 1E5E                            PL28 1132                            PL38 1F22  
                 ___flpack@exp 0008                            l206 24C0                            l160 2774  
                          l158 2770                            l449 1BD8                            l802 16E0  
                          l813 1778                            l790 1EE2                            l782 1EAE  
                          l838 2496                            l777 1E7A                            l881 1A44  
                          l884 1AF2                            l789 1EDA                            l798 16B8  
                          _GIE 007F97                 lcd_begin@lines 000A                            _RX9 007D5E  
                          _TX9 007D66                            _exp 1160                            _log 17F0  
                          _pow 137C                            wreg 000FE8                   __CFG_FOSC$XT 000000  
           timer0_read_ps@prev 0008                   ___flmul@cntr 002A               _format_number$68 0031  
                 ___flmul@sign 002B         __end_of_lcd_write4bits 28A0                  ___flpack@sign 0009  
                 ___fltol@exp1 0061                           l1113 258A                           l1123 2654  
                         l1155 14FC                           l3020 27BC                           l3012 24DC  
                         l1180 1214                           l1181 136A                           l3024 27C6  
                         l3032 28CC                           l3200 2304                           l3028 28C4  
                         l3142 1CEC                           l3134 1CDE                           l3230 2350  
                         l3222 233E                           l3214 2326                           l3206 2312  
                         l3160 1D38                           l4104 0930                           l3216 232C  
                         l3208 2318                           l4114 0C6A                           l4122 0CAC  
                         l3420 28F4                           l4052 0E7C                           l4124 0CB2  
                         l3228 234A                           l4118 0C88                           l3168 1D70  
                         l4074 1006                           l4082 1046                           l3700 1E0C  
                         l2670 2906                           l2830 2562                           l2910 2098  
                         l3614 16F2                           l2582 24B2                           l4078 1022  
                         l3198 22FE                           l4190 1BC4                           l2840 2580  
                         l2832 2566                           l3640 1746                           l3608 16CA  
                         l3800 1FA2                           l2744 28AE                           l2576 2480  
                         l2752 2144                           l2850 2634                           l2930 210E  
                         l3634 172C                           l2594 2290                           l3564 1E84  
                         l2668 2904                           l2828 255A                           l2852 2638  
                         l2916 20B8                           l2676 2832                           l3652 178E  
                         l3636 1738                           l3628 170C                           l3812 25EA  
                         l3740 223A                           l3732 2222                           l3716 21DE  
                         l2772 2198                           l4196 1BD4                           l3574 1EC4  
                         l3566 1E88                           l2926 20F4                           l3822 266E  
                         l3646 1766                           l3638 1740                           l3830 205E  
                         l3742 2246                           l3718 21E8                           l2758 2174  
                         l3576 1ED0                           l3568 1EA0                           l2856 264A  
                         l2848 262C                           l2928 20FA                           l3664 17AE  
                         l3648 1772                           l3672 1DBC                           l3840 17FE  
                         l3744 224A                           l3736 2232                           l2768 218C  
                         l3912 13CA                           l3762 1A4E                           l3922 1454  
                         l3906 13B0                           l2788 2522                           l3676 1DD0  
                         l3828 1FF8                           l3844 1812                           l3780 1F56  
                         l3748 225E                           l3860 117C                           l2990 2790  
                         l3598 25AE                           l3766 1A6A                           l3870 11E2  
                         l3918 142A                           l3688 1DF6                           l3792 1F74  
                         l3776 1F42                           l3952 166C                           l3936 1540  
                         l2986 26BC                           l2994 279C                           l3890 1336  
                         l3866 11B0                           l3954 1672                           ?_exp 0071  
                         ?_log 0044                           l3996 1CB6                           ?_pow 007C  
                         STR_1 0869                           STR_2 089B                           STR_3 084D  
                         STR_4 089B                           STR_5 08B0                           STR_6 087F  
                         STR_7 08C0                           STR_8 089E                           STR_9 08A4  
                         _BRGH 007D62                           _CREN 007D5C                           _LATB 000F8A  
                         _LATC 000F8B                           u3040 1A58                           _CCal 00E9  
                         u2408 2728                           u3250 1420                           u2390 2726  
                         u3407 1D0E                           _PIE1 000F9D                           u3417 1D20  
                         u3507 1968                           u3427 1D2C                           u3517 1978  
                         u3437 1D46                           u3527 1988                           u3447 1D5E  
                         u3537 1998                           u3457 1D92                           u3547 19A8  
                         u3467 1922                           _PEIE 007F96                           u3557 19B8  
                         u3477 1938                           u3397 1CF2                           u3567 19C8  
                         u3487 1948                           u2960 2206                           u3577 2920  
                         u3497 1958                           u3587 288E                           _RCIF 007CF5  
                         u3597 2898                           u2965 21FC                           _PIR1 000F9E  
                         _TMR0 000FD6                           _TMR2 000FBC                           _SPEN 007D5F  
                         _TXIE 007CEC                           _TXIF 007CF4                           _TXEN 007D65  
                         _SYNC 007D64                  __CFG_FCMEN$ON 000000                   __CFG_WRTB$ON 000000  
                 __CFG_WRTC$ON 000000                           _bres 00ED                           _main 1B04  
                         fsr2h 000FDA                           fsr1l 000FE1                           indf2 000FDF  
                         fsr2l 000FD9                           exp@x 0071                           log@x 0044  
        __size_of_output_putch 0012                           pow@x 007C                           pow@y 0080  
                         prodl 000FF3     __end_of_measure_inductance 0D0A                           start 00DE  
          timer0_read_ps@count 0009                 ??_buffer_putch 0004                  __CFG_MCLRE$ON 000000  
                 ___param_bank 000010                _timer0_init$152 0004                _timer0_init$153 0006  
              _timer0_init$154 0008                _timer0_init$155 000A            lcd_write4bits@value 0004  
                 lcd_send@mode 0005                          ??_exp 005A                          ??_log 0048  
                        ??_pow 005A                  ___fltol@sign1 0060                __end_of___fladd 17DC  
                        ?_main 0001                __end_of___fldiv 1FDE                __end_of___flneg 28C0  
                        STR_10 08AA                          STR_11 0889                          STR_12 089B  
                        STR_20 08C9                          STR_21 08D2                          STR_13 08BB  
                        STR_14 089B                          STR_22 08CC                          STR_30 0891  
                        STR_23 08CF                          STR_15 085C                          STR_24 089B  
                        STR_25 0892                          STR_17 08D5                          STR_33 08B6  
                        STR_18 08DB                          STR_26 08C5                          STR_27 0894  
                        STR_19 08D8                          STR_28 0875                          STR_29 0898  
              __end_of___flmul 1E4C                __end_of___flsub 2620                __end_of___fltol 2270  
                        _T0CON 000FD5                          _T2CON 000FBA                          _LATC7 007C5F  
              __end_of___lwdiv 2594                __end_of___lwmod 265E                          i2l440 00AE  
                        i2l444 00D4                          _RCREG 000FAE               lcd_begin@dotsize 0008  
                        _SPBRG 000FAF                          _PORTC 000F82                          _TRISA 000F92  
                        _TRISB 000F93                          _TRISC 000F94                          _TXREG 000FAD  
               __CFG_EBTR0$OFF 000000                 __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000  
                ___awtofl@sign 0012                 __CFG_EBTR3$OFF 000000                  __CFG_WRTD$OFF 000000  
                        _log10 23C4                          _blink 00CC                          _floor 1A12  
                        _ldexp 2130                          _frexp 2270                   _output_putch 292A  
              ?_lcd_write4bits 0001                          _msecs 00C0                          tablat 000FF5  
                        pow@yi 008D                format_number@di 0034                          status 000FD8  
              __end_of_put_str 27CE                ??_print_reading 0038                    exp@exponent 0079  
                  ldexp@newexp 0048                __initialization 241E                    log@exponent 0048  
                 __end_of_main 1BF2               format_double@num 0091                  lcd_gotoxy@col 0009  
                lcd_gotoxy@row 0008                  ?_measure_freq 0036         __size_of_format_double 0188  
                       ??_main 005A                  lcd_send@value 0006            format_double@weight 009D  
                __activetblptr 000001         __size_of_format_number 00A8         __size_of_format_xint32 0034  
          lcd_init@fourbitmode 0004                         ?_log10 004A                         ?_floor 0067  
                       ?_ldexp 0044                         ?_frexp 0004               __end_of___altofl 25DC  
             __end_of___flpack 1F22               __end_of___awtofl 2698               __end_of___lltofl 275E  
               __CFG_WDTEN$OFF 000000                         i2l3460 0066                         i2l3466 0086  
                       i2l3468 0088                         _INTCON 000FF2               __end_of___lwtofl 2808  
                       _TRISC6 007CA6               __end_of_lcd_init 278A           __size_of_lcd_command 000C  
             __end_of_lcd_send 2914                         ___flge 246A               __end_of_lcd_puts 27A4  
                    ??___fladd 0034                      ??___fldiv 0016                      ??___flneg 0008  
               __CFG_STVREN$ON 000000                      ??___flmul 0025                      ??___flsub 0040  
                    ??___fltol 0056                   ?_timer0_init 0001                 ??_measure_freq 0038  
                    ??___lwdiv 0008                   ?_timer2_init 0001                      ??___lwmod 0008  
                       _buffer 00D4                         clear_0 2424                         clear_1 2430  
                       log10@x 004A                         _rxfifo 0100                         _txfifo 0110  
                       _rxiptr 00D1                         _rxoptr 00D2                         floor@i 006B  
                       _txiptr 005B                         floor@x 0067                         _txoptr 005C  
             __end_of_ser_init 287E               __end_of_ser_puts 28D4             timer2_init@ps_mode 0007  
                 __mediumconst 0000                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8           __end_of_buffer_putch 254A               format_number@buf 0011  
             format_number@pad 000E        _measure_inductance$1100 0083        _measure_inductance$1101 006E  
      _measure_inductance$1102 0072        _measure_inductance$1103 0076        _measure_inductance$1097 006A  
      _measure_inductance$1098 007B        _measure_inductance$1099 007F                      ??_put_str 0008  
                   ___fladd@f1 002C                     ___fladd@f2 0030                     ___flge@ff1 0004  
                   ___flge@ff2 0008               __end_ofexp@coeff 0829                  _format_double 150E  
             __end_oflog@coeff 084D                     ___altofl@c 0062                     ___fldiv@f1 000E  
                   ___fldiv@f2 0012                     ___fldiv@f3 0016                     __accesstop 0060  
      __end_of__initialization 245C                __CFG_PBADEN$OFF 000000                     ___flneg@f1 0004  
                _format_number 2088                  _format_xint32 26CE                     ___flmul@f1 001D  
                   ___flmul@f2 0021                   eval_poly@res 0040                  ___rparam_used 000001  
                   ___flsub@f1 0038                     ___flsub@f2 003C                     ___fltol@f1 0052  
                   ___awtofl@c 000E         measure_capacitance@Cin 00B4   __size_of_measure_capacitance 0360  
       measure_capacitance@var 00B2          lcd_gotoxy@row_offsets 000A                 __pcstackCOMRAM 0001  
           __size_of_calibrate 00E2                   __pidataBANK0 2948                     ___lltofl@c 000E  
           __size_of_delay10ms 0002                  __end_of_log10 241E                  __end_of_floor 1B04  
                __end_of_ldexp 21D2                  __end_of_frexp 22E8                     __end_ofPL2 0D2C  
                   __end_ofPL4 10C4                     __end_ofPL6 10E6                     __end_ofPL8 0D42  
                   ___lwtofl@c 003B                 buffer_putch@ch 0006             __size_of_lcd_begin 00D4  
           __size_of_lcd_clear 0016                        ??_log10 004E                        ??_floor 005A  
                      ??_ldexp 004A                        ??_frexp 0009                     _log10$1106 004E  
                   __pbssBANK0 00B8                     __pbssBANK1 0100                 ?_format_double 0091  
           __size_of_eval_poly 0098             __size_of_indicator 001C                 ?_format_number 000B  
               ?_format_xint32 0036                 print_unit@unit 0001                        ?___flge 0004  
                    ?___altofl 0062        __size_of_timer0_read_ps 004A                      ?___flpack 0004  
                    ?___awtofl 000E                      ?___lltofl 000E             _measure_inductance 08E0  
           __size_of_ser_putch 0028                      ?___lwtofl 003B               ??_lcd_write4bits 0004  
                      _INTCON2 000FF1                     _lcd_gotoxy 2698            ?_measure_inductance 0001  
            __end_of_calibrate 1CD4                      ?_lcd_init 0001                      ?_lcd_send 0005  
            __end_of_delay10ms 294E                      ?_lcd_puts 0001           __end_of_measure_freq 1A12  
                   _global_int 0008                     calibrate@i 003F                        __Hparam 0000  
                      __Lparam 0000                      ?_ser_init 0001           ??_measure_inductance 005A  
            __end_of_lcd_begin 1DA8                      ?_ser_puts 0001              __end_of_lcd_clear 292A  
              __size_of___flge 004C                        ___fladd 1696                        ___fldiv 1F2E  
                      ___flneg 28A0                        ___flmul 1DA8                        ___flsub 25DC  
                      ___fltol 21D2                        ___lwdiv 254A                        ___lwmod 2620  
                 __psmallconst 0800                     ??___altofl 005A                     ??___flpack 000A  
                      __pcinit 241E                     ??___awtofl 0012              __end_of_eval_poly 2076  
                      __ramtop 0800              __end_of_indicator 28FA           __size_of_timer0_init 006E  
                   ??___lltofl 0012                        __ptext0 1B04                        __ptext1 2702  
                      __ptext2 22E8                        __ptext3 2858                        __ptext4 08E0  
                      __ptext5 0D42                        __ptext6 2808                        __ptext7 2356  
                      __ptext8 26CE                        __ptext9 150E           __size_of_timer2_init 002E  
        __size_of_buffer_putch 004A                     ??___lwtofl 003F                   __size_of_exp 021C  
                 __size_of_log 0118                   __size_of_pow 0192                        _seconds 00C4  
                      _ser_tmp 00D3                ??_format_double 005A                        _put_str 27B4  
                   ??_lcd_init 0004                     ??_lcd_send 0006                     ??_lcd_puts 0007  
         end_of_initialization 245C                ??_format_number 000F                ??_format_xint32 003A  
                      exp@sign 007B                      _LCD_lines 00CF                   _lcd_init$134 0005  
               lcd_puts@string 0009              __end_of_ser_putch 2858                        pow@sign 008C  
measure_inductance@denominator 0066          __end_of_print_reading 23C4                     ??_ser_init 0004  
                   ??_ser_puts 0005                   _buffer_putch 2500              format_number@base 000D  
                      postdec1 000FE5                        postdec2 000FDD                        postinc0 000FEE  
                      postinc2 000FDE                     _print_unit 2808            _measure_capacitance 0D42  
                  ?_lcd_gotoxy 0008                    ___fldiv@exp 001B                    ?_global_int 0001  
                  ___flmul@exp 0025                  ??_lcd_command 0007           ?_measure_capacitance 0001  
      measure_capacitance@unit 00B1                 format_double@m 00A3         measure_inductance@unit 007A  
               __end_of___flge 24B6                 _timer0_read_ps 24B6                lcd_gotoxy@F6470 00F1  
                   floor@expon 006F                 format_number@i 0035                 format_number@n 000B  
               format_xint32@x 0036                    __end_ofPL10 10FC                    __end_ofPL20 1120  
                  __end_ofPL12 17F0                    __end_ofPL30 27DE                    __end_ofPL22 1132  
                  __end_ofPL14 110E                    __end_ofPL40 28DE                    __end_ofPL32 1152  
                  __end_ofPL24 27B4                    __end_ofPL16 2088                    __end_ofPL34 1160  
                  __end_ofPL26 1918                    __end_ofPL18 1E5E                    __end_ofPL36 1E6C  
                  __end_ofPL28 1142                    __end_ofPL38 1F2E            start_initialization 241E  
                   eval_poly@d 003C                     eval_poly@n 003D                     eval_poly@x 0038  
        __size_of_measure_freq 00FA                     ldexp@value 0044                    __end_of_exp 137C  
                  __end_of_log 1908                    __end_of_pow 150E                   _LCD_function 005A  
           format_double@digit 00A1                     frexp@value 0004          ??_measure_capacitance 005A  
       __end_of_timer0_read_ps 2500                       ??___flge 000C            __size_of_lcd_gotoxy 0036  
          __end_of_lcd_command 2948                    __pdataBANK0 00F1                   _measure_freq 1918  
          __size_of_global_int 00D6       print_reading@measurement 0036              __size_of___altofl 0048  
            __size_of___flpack 00B6              __size_of___awtofl 003A                    ?_print_unit 0001  
            __size_of___lltofl 002E                    __pbssCOMRAM 005A              __size_of___lwtofl 002A  
                __pcstackBANK0 0060                __CFG_nPWRTEN$ON 000000                  ?_output_putch 0001  
            measure_freq@count 0039               lcd_command@value 0007              __size_of_lcd_init 002C  
            __size_of_lcd_send 001A                      _calibrate 1BF2              __size_of_lcd_puts 001A  
                    _delay10ms 294C                      __pnvBANK0 00E9               ___lwdiv@dividend 0004  
              ?_timer0_read_ps 0004                      __pintcode 0008                       ?___fladd 002C  
                     ?___fldiv 000E                       ?___flneg 0004                       ?___flmul 001D  
                     ?___flsub 0038                       ?___fltol 0052              __size_of_ser_init 0026  
                     ?___lwdiv 0004                       ?___lwmod 0004              __size_of_ser_puts 0014  
                    _lcd_begin 1CD4                      _lcd_clear 2914                    __smallconst 0800  
                    _eval_poly 1FDE                  output_putch@c 0007                      _indicator 28DE  
               ??_output_putch 0007               ___lwdiv@quotient 0008                 __size_of_log10 005A  
                     ?_put_str 0001                 __size_of_floor 00F2                 __size_of_ldexp 00A2  
               __size_of_frexp 0078                     ?_calibrate 0001                     ser_putch@c 0004  
                   ?_delay10ms 0001                       _LCD_ctrl 00CE                       _LCD_mode 00D0  
                  _lcd_command 293C            __size_of_print_unit 0028                       i2u253_40 004A  
                     i2u253_41 0044                       i2u254_48 004C                      _ser_putch 2830  
  __size_of_measure_inductance 042A                  ??_timer0_init 0004                  ??_timer2_init 0004  
            indicator@indicate 000E                     ?_lcd_begin 0008                     ?_lcd_clear 0001  
                   ?_eval_poly 0038                     ?_indicator 0001                      lcd_puts@i 0008  
                 ??_lcd_gotoxy 0009          measure_inductance@Lin 0089          measure_inductance@var 0087  
                    copy_data0 2450          __end_of_format_double 1696                   ??_global_int 0001  
         format_number@padchar 0033        __size_of_lcd_write4bits 0022          __end_of_format_number 2130  
        __end_of_format_xint32 2702                      frexp@eptr 0008                       __Hrparam 0000  
                     __Lrparam 0000                     ?_ser_putch 0001                   __Lsmallconst 0800  
           __end_of_lcd_gotoxy 26CE               __size_of___fladd 0146               __size_of___fldiv 00B0  
             __size_of___flneg 0020               __size_of___flmul 00A4               __size_of___flsub 0044  
             __size_of___fltol 009E                       ___altofl 2594                       ___flpack 1E6C  
             __size_of___lwdiv 004A               __size_of___lwmod 003E                       ___awtofl 265E  
                     ___lltofl 2730                  timer2_init@ps 0005                       ___lwtofl 27DE  
           __end_of_global_int 00DE            __end_of_timer0_init 2356                       _exp$1109 0075  
          __end_of_timer2_init 2730                ___lwdiv@divisor 0006                ___lwdiv@counter 000A  
       __size_of_print_reading 006E           timer0_init@prescaler 000C                       __ptext10 137C  
                     __ptext11 1160                       __ptext20 2730                       __ptext12 2130  
                     __ptext21 23C4                       __ptext13 1A12                       __ptext30 28DE  
                     __ptext22 17F0                       __ptext14 21D2                       __ptext31 278A  
                     __ptext23 2270                       __ptext15 246A                       __ptext40 2088  
                     __ptext32 1BF2                       __ptext24 1FDE                       __ptext16 2594  
                     __ptext41 2500                       __ptext33 28C0                       __ptext25 1DA8  
                     __ptext17 25DC                       __ptext50 1E6C                       __ptext42 2620  
                     __ptext34 1918                       __ptext26 1696                       __ptext18 28A0  
                     __ptext43 254A                       __ptext35 24B6                       __ptext27 265E  
                     __ptext19 1F2E                       __ptext44 2914                       __ptext36 27B4  
                     __ptext28 275E                       __ptext45 293C                       __ptext37 292A  
                     __ptext29 1CD4                       __ptext46 28FA                       __ptext38 2830  
                     __ptext47 287E                       __ptext39 2698                       __ptext48 294C  
                     __ptext49 27DE                       _lcd_init 275E                       _lcd_send 28FA  
                     _pow$1107 0084                       _pow$1108 0088                       _lcd_puts 278A  
             __size_of_put_str 001A                    ??_calibrate 003F                  __size_of_main 00EE  
                  ??_delay10ms 0004                      ser_puts@s 0005                       _msecpart 00EF  
                     _ser_init 2858                       _ser_puts 28C0                       _timer1of 00C8  
         __end_of_output_putch 293C                    ??_lcd_begin 0009                    ??_lcd_clear 0008  
                     exp@coeff 0801          ___flmul@f3_as_product 0026                       log@coeff 0829  
  measure_inductance@numerator 0062                   ??_print_unit 000E                    ??_eval_poly 003F  
                  ??_indicator 000E             _print_reading$1104 0038             _print_reading$1105 003A  
                     intlevel2 0000    __end_of_measure_capacitance 10A2               ___lwmod@dividend 0004  
             ??_timer0_read_ps 0006                    ??_ser_putch 0004             __end_of_print_unit 2830  
                _print_reading 2356           delay10ms@period_10ms 0001                    _timer0_init 22E8  
                  _timer2_init 2702             _format_double$1092 0095             _format_double$1093 0099  
     _measure_capacitance$1094 00A5       _measure_capacitance$1095 00A9       _measure_capacitance$1096 00AD  
                     put_str@i 0009                       put_str@s 000B             timer0_init@ps_mode 000D  
              ___lwmod@divisor 0006                ___lwmod@counter 0008                 _lcd_write4bits 287E  
                 ___fladd@exp1 0037                   ___fladd@exp2 0036                   ___fladd@sign 0035  
                 ?_lcd_command 0001                 ?_print_reading 0036                  ?_buffer_putch 0001  
