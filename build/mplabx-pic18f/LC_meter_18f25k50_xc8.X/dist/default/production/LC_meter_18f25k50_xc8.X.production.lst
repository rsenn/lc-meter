

Microchip Technology PIC18 PRO Macro Assembler V1.34 build -361300703 
                                                                                               Tue Sep 17 06:34:24 2019

Microchip Technology Omniscient Code Generator (PRO mode) build 201502162209
     1                           	processor	18F25K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    65                           	psect	pa_nodes,global,class=CODE,delta=1
    66  0000                     tblptrl	equ	0xFF6
    67                           tablat	equ	0xFF5
    68                           prodl	equ	0xFF3
    69                           intcon	equ	0xFF2
    70                           intcon2	equ	0xFF1
    71                           wreg	equ	0xFE8
    72                           indf2	equ	0xFDF
    73                           postinc2	equ	0xFDE
    74                           postdec2	equ	0xFDD
    75                           fsr2h	equ	0xFDA
    76                           fsr2l	equ	0xFD9
    77                           status	equ	0xFD8
    78                           
    79                           	psect	idataBANK0
    80  0000'                    __pidataBANK0:
    81                           	opt stack 0
    82                           
    83                           ;initializer for lcd_gotoxy@F6470
    84  0000' 00                 	db	0
    85  0001' 40                 	db	64
    86  0002' 14                 	db	20
    87  0003' 54                 	db	84
    88                           tblptrl	equ	0xFF6
    89                           tablat	equ	0xFF5
    90                           prodl	equ	0xFF3
    91                           intcon	equ	0xFF2
    92                           intcon2	equ	0xFF1
    93                           wreg	equ	0xFE8
    94                           indf2	equ	0xFDF
    95                           postinc2	equ	0xFDE
    96                           postdec2	equ	0xFDD
    97                           fsr2h	equ	0xFDA
    98                           fsr2l	equ	0xFD9
    99                           status	equ	0xFD8
   100                           
   101                           	psect	smallconst
   102  0000'                    __psmallconst:
   103                           	opt stack 0
   104  0000' 00                 	db	0
   105  0001'                    exp@coeff:
   106                           	opt stack 0
   107  0001' 0000               	dw	0
   108  0003' 3F80               	dw	16256
   109  0005' 7218               	dw	29208
   110  0007' 3F31               	dw	16177
   111  0009' FDF0               	dw	65008
   112  000B' 3E75               	dw	15989
   113  000D' 5847               	dw	22599
   114  000F' 3D63               	dw	15715
   115  0011' 9558               	dw	38232
   116  0013' 3C1D               	dw	15389
   117  0015' C482               	dw	50306
   118  0017' 3AAE               	dw	15022
   119  0019' 78A8               	dw	30888
   120  001B' 3921               	dw	14625
   121  001D' 93EF               	dw	37871
   122  001F' 3780               	dw	14208
   123  0021' 92A0               	dw	37536
   124  0023' 35A7               	dw	13735
   125  0025' 5646               	dw	22086
   126  0027' 3415               	dw	13333
   127  0029'                    __end_ofexp@coeff:
   128                           	opt stack 0
   129  0029'                    log@coeff:
   130                           	opt stack 0
   131  0029' 0000               	dw	0
   132  002B' 0000               	dw	0
   133  002D' FFC4               	dw	65476
   134  002F' 3F7F               	dw	16255
   135  0031' EF80               	dw	61312
   136  0033' BEFF               	dw	48895
   137  0035' E190               	dw	57744
   138  0037' 3EA9               	dw	16041
   139  0039' 82EC               	dw	33516
   140  003B' BE76               	dw	48758
   141  003D' AD82               	dw	44418
   142  003F' 3E2B               	dw	15915
   143  0041' 3C0E               	dw	15374
   144  0043' BDC3               	dw	48579
   145  0045' D187               	dw	53639
   146  0047' 3D13               	dw	15635
   147  0049' 7841               	dw	30785
   148  004B' BBD3               	dw	48083
   149  004D'                    __end_oflog@coeff:
   150                           	opt stack 0
   151  004D'                    STR_3:
   152  004D' 70                 	db	112	;'p'
   153  004E' 6C                 	db	108	;'l'
   154  004F' 65                 	db	101	;'e'
   155  0050' 61                 	db	97	;'a'
   156  0051' 73                 	db	115	;'s'
   157  0052' 65                 	db	101	;'e'
   158  0053' 20                 	db	32
   159  0054' 77                 	db	119	;'w'
   160  0055' 61                 	db	97	;'a'
   161  0056' 69                 	db	105	;'i'
   162  0057' 74                 	db	116	;'t'
   163  0058' 2E                 	db	46
   164  0059' 2E                 	db	46
   165  005A' 2E                 	db	46
   166  005B' 00                 	db	0
   167  005C'                    STR_15:
   168  005C' 49                 	db	73	;'I'
   169  005D' 6E                 	db	110	;'n'
   170  005E' 64                 	db	100	;'d'
   171  005F' 75                 	db	117	;'u'
   172  0060' 63                 	db	99	;'c'
   173  0061' 74                 	db	116	;'t'
   174  0062' 69                 	db	105	;'i'
   175  0063' 76                 	db	118	;'v'
   176  0064' 69                 	db	105	;'i'
   177  0065' 74                 	db	116	;'t'
   178  0066' 79                 	db	121	;'y'
   179  0067' 20                 	db	32
   180  0068' 00                 	db	0
   181  0069'                    STR_1:
   182  0069' 43                 	db	67	;'C'
   183  006A' 61                 	db	97	;'a'
   184  006B' 6C                 	db	108	;'l'
   185  006C' 69                 	db	105	;'i'
   186  006D' 62                 	db	98	;'b'
   187  006E' 72                 	db	114	;'r'
   188  006F' 61                 	db	97	;'a'
   189  0070' 74                 	db	116	;'t'
   190  0071' 69                 	db	105	;'i'
   191  0072' 6E                 	db	110	;'n'
   192  0073' 67                 	db	103	;'g'
   193  0074' 00                 	db	0
   194  0075'                    STR_28:
   195  0075' 4C                 	db	76	;'L'
   196  0076' 43                 	db	67	;'C'
   197  0077' 2D                 	db	45
   198  0078' 6D                 	db	109	;'m'
   199  0079' 65                 	db	101	;'e'
   200  007A' 74                 	db	116	;'t'
   201  007B' 65                 	db	101	;'e'
   202  007C' 72                 	db	114	;'r'
   203  007D' 20                 	db	32
   204  007E' 00                 	db	0
   205  007F'                    STR_6:
   206  007F' 43                 	db	67	;'C'
   207  0080' 61                 	db	97	;'a'
   208  0081' 70                 	db	112	;'p'
   209  0082' 61                 	db	97	;'a'
   210  0083' 63                 	db	99	;'c'
   211  0084' 69                 	db	105	;'i'
   212  0085' 74                 	db	116	;'t'
   213  0086' 79                 	db	121	;'y'
   214  0087' 20                 	db	32
   215  0088' 00                 	db	0
   216  0089'                    STR_11:
   217  0089' 0D                 	db	13
   218  008A' 0A                 	db	10
   219  008B' 43                 	db	67	;'C'
   220  008C' 43                 	db	67	;'C'
   221  008D' 61                 	db	97	;'a'
   222  008E' 6C                 	db	108	;'l'
   223  008F' 3D                 	db	61	;'='
   224  0090' 00                 	db	0
   225  0091'                    STR_30:
   226  0091' 20                 	db	32
   227  0092' 20                 	db	32
   228  0093' 20                 	db	32
   229  0094' 20                 	db	32
   230  0095' 20                 	db	32
   231  0096' 20                 	db	32
   232  0097' 00                 	db	0
   233  0098'                    STR_29:
   234  0098' 2E                 	db	46
   235  0099' 2E                 	db	46
   236  009A' 2E                 	db	46
   237  009B' 0D                 	db	13
   238  009C' 0A                 	db	10
   239  009D' 00                 	db	0
   240  009E'                    STR_8:
   241  009E' 0D                 	db	13
   242  009F' 0A                 	db	10
   243  00A0' 46                 	db	70	;'F'
   244  00A1' 31                 	db	49	;'1'
   245  00A2' 3D                 	db	61	;'='
   246  00A3' 00                 	db	0
   247  00A4'                    STR_9:
   248  00A4' 0D                 	db	13
   249  00A5' 0A                 	db	10
   250  00A6' 46                 	db	70	;'F'
   251  00A7' 32                 	db	50	;'2'
   252  00A8' 3D                 	db	61	;'='
   253  00A9' 00                 	db	0
   254  00AA'                    STR_10:
   255  00AA' 0D                 	db	13
   256  00AB' 0A                 	db	10
   257  00AC' 46                 	db	70	;'F'
   258  00AD' 33                 	db	51	;'3'
   259  00AE' 3D                 	db	61	;'='
   260  00AF' 00                 	db	0
   261  00B0'                    STR_5:
   262  00B0' 46                 	db	70	;'F'
   263  00B1' 72                 	db	114	;'r'
   264  00B2' 65                 	db	101	;'e'
   265  00B3' 71                 	db	113	;'q'
   266  00B4' 3D                 	db	61	;'='
   267  00B5' 00                 	db	0
   268  00B6' 52                 	db	82	;'R'
   269  00B7' 43                 	db	67	;'C'
   270  00B8' 34                 	db	52	;'4'
   271  00B9' 3D                 	db	61	;'='
   272  00BA' 00                 	db	0
   273  00BB'                    STR_13:
   274  00BB' 43                 	db	67	;'C'
   275  00BC' 69                 	db	105	;'i'
   276  00BD' 6E                 	db	110	;'n'
   277  00BE' 3D                 	db	61	;'='
   278  00BF' 00                 	db	0
   279  00C0'                    STR_7:
   280  00C0' 76                 	db	118	;'v'
   281  00C1' 61                 	db	97	;'a'
   282  00C2' 72                 	db	114	;'r'
   283  00C3' 3D                 	db	61	;'='
   284  00C4' 00                 	db	0
   285  00C5'                    STR_26:
   286  00C5' 2D                 	db	45
   287  00C6' 2A                 	db	42
   288  00C7' 2D                 	db	45
   289  00C8' 00                 	db	0
   290  00C9' 6D                 	db	109	;'m'
   291  00CA' 46                 	db	70	;'F'
   292  00CB' 00                 	db	0
   293  00CC' 6E                 	db	110	;'n'
   294  00CD' 46                 	db	70	;'F'
   295  00CE' 00                 	db	0
   296  00CF' 70                 	db	112	;'p'
   297  00D0' 46                 	db	70	;'F'
   298  00D1' 00                 	db	0
   299  00D2' 75                 	db	117	;'u'
   300  00D3' 46                 	db	70	;'F'
   301  00D4' 00                 	db	0
   302  00D5'                    STR_17:
   303  00D5' 6D                 	db	109	;'m'
   304  00D6' 48                 	db	72	;'H'
   305  00D7' 00                 	db	0
   306  00D8' 6E                 	db	110	;'n'
   307  00D9' 48                 	db	72	;'H'
   308  00DA' 00                 	db	0
   309  00DB' 75                 	db	117	;'u'
   310  00DC' 48                 	db	72	;'H'
   311  00DD' 00                 	db	0
   312  0000                     
   313                           ; #config settings
   314  00DE' 00                 	db	0	; dummy byte at the end
   315  0000                     tblptrl	equ	0xFF6
   316                           tablat	equ	0xFF5
   317                           prodl	equ	0xFF3
   318                           intcon	equ	0xFF2
   319                           intcon2	equ	0xFF1
   320                           wreg	equ	0xFE8
   321                           indf2	equ	0xFDF
   322                           postinc2	equ	0xFDE
   323                           postdec2	equ	0xFDD
   324                           fsr2h	equ	0xFDA
   325                           fsr2l	equ	0xFD9
   326                           status	equ	0xFD8
   327                           
   328                           	psect	nvBANK0
   329  0000'                    __pnvBANK0:
   330                           	opt stack 0
   331  0000'                    _CCal:
   332                           	opt stack 0
   333  0000'                    	ds	4
   334  0004'                    _bres:
   335                           	opt stack 0
   336  0004'                    	ds	2
   337  0006'                    _msecpart:
   338                           	opt stack 0
   339  0006'                    	ds	2
   340  0000                     _TMR0	set	4054
   341  0000                     _CM1CON0	set	3992
   342  0000                     _INTCON	set	4082
   343  0000                     _INTCON2	set	4081
   344  0000                     _LATB	set	3978
   345  0000                     _LATC	set	3979
   346  0000                     _PIE1	set	3997
   347  0000                     _PIR1	set	3998
   348  0000                     _PORTC	set	3970
   349  0000                     _RCREG	set	4014
   350  0000                     _T0CON	set	4053
   351  0000                     _T2CON	set	4026
   352  0000                     _TMR2	set	4028
   353  0000                     _TRISA	set	3986
   354  0000                     _TRISB	set	3987
   355  0000                     _TRISC	set	3988
   356  0000                     _TXREG	set	4013
   357  0000                     _RCIF	set	31989
   358  0000                     _TXIE	set	31980
   359  0000                     _TXIF	set	31988
   360                           tblptrl	equ	0xFF6
   361                           tablat	equ	0xFF5
   362                           prodl	equ	0xFF3
   363                           intcon	equ	0xFF2
   364                           intcon2	equ	0xFF1
   365                           wreg	equ	0xFE8
   366                           indf2	equ	0xFDF
   367                           postinc2	equ	0xFDE
   368                           postdec2	equ	0xFDD
   369                           fsr2h	equ	0xFDA
   370                           fsr2l	equ	0xFD9
   371                           status	equ	0xFD8
   372                           
   373                           	psect	cinit
   374  0000'                    __pcinit:
   375                           	opt stack 0
   376  0000'                    start_initialization:
   377                           	opt stack 0
   378  0000'                    __initialization:
   379                           	opt stack 0
   380                           
   381                           ; Clear objects allocated to BANK0 (41 bytes)
   382  0000' EE00' F000'        	lfsr	0,__pbssBANK0
   383  0004' 0E29               	movlw	41
   384  0006'                    clear_0:
   385  0006' 6AEE               	clrf	postinc0,c
   386  0008' 06E8               	decf	wreg,f,c
   387  000A' E1FD               	bnz	clear_0
   388                           
   389                           ; Clear objects allocated to COMRAM (6 bytes)
   390  000C' 6A00'              	clrf	(__pbssCOMRAM+5)& (0+255),c
   391  000E' 6A00'              	clrf	(__pbssCOMRAM+4)& (0+255),c
   392  0010' 6A00'              	clrf	(__pbssCOMRAM+3)& (0+255),c
   393  0012' 6A00'              	clrf	(__pbssCOMRAM+2)& (0+255),c
   394  0014' 6A00'              	clrf	(__pbssCOMRAM+1)& (0+255),c
   395  0016' 6A00'              	clrf	__pbssCOMRAM& (0+255),c
   396                           
   397                           ; Initialize objects allocated to BANK0 (4 bytes)
   398                           ; load TBLPTR registers with __pidataBANK0
   399  0018' 0E00'              	movlw	low __pidataBANK0
   400  001A' 6EF6               	movwf	tblptrl,c
   401  001C' 0E00'              	movlw	high __pidataBANK0
   402  001E' 6EF7               	movwf	tblptrh,c
   403  0020' 0E00'              	movlw	low (__pidataBANK0 shr (0+16))
   404  0022' 6EF8               	movwf	tblptru,c
   405  0024' EE00' F000'        	lfsr	0,__pdataBANK0
   406  0028' EE10 F004          	lfsr	1,4
   407  002C'                    copy_data0:
   408  002C' 0009               	tblrd		*+
   409  002E' CFF5 FFEE          	movff	tablat,postinc0
   410  0032' 50E5               	movf	postdec1,w,c
   411  0034' 50E1               	movf	fsr1l,w,c
   412  0036' E1FA               	bnz	copy_data0
   413  0038'                    end_of_initialization:
   414                           	opt stack 0
   415  0038'                    __end_of__initialization:
   416                           	opt stack 0
   417  0038' 0E00'              	movlw	low (__Lsmallconst shr (0+16))
   418  003A' 6EF8               	movwf	tblptru,c
   419  003C' 0E00'              	movlw	high __Lsmallconst
   420  003E' 6EF7               	movwf	tblptrh,c
   421  0040' 0100               	movlb	0
   422  0042' EF00' F000'        	goto	_main	;jump to C main() function
   423                           tblptru	equ	0xFF8
   424                           tblptrh	equ	0xFF7
   425                           tblptrl	equ	0xFF6
   426                           tablat	equ	0xFF5
   427                           prodl	equ	0xFF3
   428                           intcon	equ	0xFF2
   429                           intcon2	equ	0xFF1
   430                           postinc0	equ	0xFEE
   431                           wreg	equ	0xFE8
   432                           postdec1	equ	0xFE5
   433                           fsr1l	equ	0xFE1
   434                           indf2	equ	0xFDF
   435                           postinc2	equ	0xFDE
   436                           postdec2	equ	0xFDD
   437                           fsr2h	equ	0xFDA
   438                           fsr2l	equ	0xFD9
   439                           status	equ	0xFD8
   440                           
   441                           	psect	bssCOMRAM
   442  0000'                    __pbssCOMRAM:
   443                           	opt stack 0
   444  0000'                    _blink:
   445                           	opt stack 0
   446  0000'                    	ds	2
   447  0002'                    _LCD_ctrl:
   448                           	opt stack 0
   449  0002'                    	ds	1
   450  0003'                    _LCD_function:
   451                           	opt stack 0
   452  0003'                    	ds	1
   453  0004'                    _LCD_lines:
   454                           	opt stack 0
   455  0004'                    	ds	1
   456  0005'                    _LCD_mode:
   457                           	opt stack 0
   458  0005'                    	ds	1
   459                           tblptru	equ	0xFF8
   460                           tblptrh	equ	0xFF7
   461                           tblptrl	equ	0xFF6
   462                           tablat	equ	0xFF5
   463                           prodl	equ	0xFF3
   464                           intcon	equ	0xFF2
   465                           intcon2	equ	0xFF1
   466                           postinc0	equ	0xFEE
   467                           wreg	equ	0xFE8
   468                           postdec1	equ	0xFE5
   469                           fsr1l	equ	0xFE1
   470                           indf2	equ	0xFDF
   471                           postinc2	equ	0xFDE
   472                           postdec2	equ	0xFDD
   473                           fsr2h	equ	0xFDA
   474                           fsr2l	equ	0xFD9
   475                           status	equ	0xFD8
   476                           
   477                           	psect	bssBANK0
   478  0000'                    __pbssBANK0:
   479                           	opt stack 0
   480  0000'                    _F2:
   481                           	opt stack 0
   482  0000'                    	ds	4
   483  0004'                    _F3:
   484                           	opt stack 0
   485  0004'                    	ds	4
   486  0008'                    _msecs:
   487                           	opt stack 0
   488  0008'                    	ds	4
   489  000C'                    _seconds:
   490                           	opt stack 0
   491  000C'                    	ds	4
   492  0010'                    _timer1of:
   493                           	opt stack 0
   494  0010'                    	ds	4
   495  0014'                    _buffer:
   496                           	opt stack 0
   497  0014'                    	ds	17
   498  0025'                    _F1:
   499                           	opt stack 0
   500  0025'                    	ds	4
   501                           tblptru	equ	0xFF8
   502                           tblptrh	equ	0xFF7
   503                           tblptrl	equ	0xFF6
   504                           tablat	equ	0xFF5
   505                           prodl	equ	0xFF3
   506                           intcon	equ	0xFF2
   507                           intcon2	equ	0xFF1
   508                           postinc0	equ	0xFEE
   509                           wreg	equ	0xFE8
   510                           postdec1	equ	0xFE5
   511                           fsr1l	equ	0xFE1
   512                           indf2	equ	0xFDF
   513                           postinc2	equ	0xFDE
   514                           postdec2	equ	0xFDD
   515                           fsr2h	equ	0xFDA
   516                           fsr2l	equ	0xFD9
   517                           status	equ	0xFD8
   518                           
   519                           	psect	dataBANK0
   520  0000'                    __pdataBANK0:
   521                           	opt stack 0
   522  0000'                    lcd_gotoxy@F6470:
   523                           	opt stack 0
   524  0000'                    	ds	4
   525                           tblptru	equ	0xFF8
   526                           tblptrh	equ	0xFF7
   527                           tblptrl	equ	0xFF6
   528                           tablat	equ	0xFF5
   529                           prodl	equ	0xFF3
   530                           intcon	equ	0xFF2
   531                           intcon2	equ	0xFF1
   532                           postinc0	equ	0xFEE
   533                           wreg	equ	0xFE8
   534                           postdec1	equ	0xFE5
   535                           fsr1l	equ	0xFE1
   536                           indf2	equ	0xFDF
   537                           postinc2	equ	0xFDE
   538                           postdec2	equ	0xFDD
   539                           fsr2h	equ	0xFDA
   540                           fsr2l	equ	0xFD9
   541                           status	equ	0xFD8
   542                           
   543                           	psect	cstackBANK0
   544  0000'                    __pcstackBANK0:
   545                           	opt stack 0
   546  0000'                    _log10$1054:
   547                           	opt stack 0
   548                           
   549                           ; 4 bytes @ 0x0
   550  0000'                    	ds	4
   551  0004'                    ?___fltol:
   552                           	opt stack 0
   553  0004'                    ___fltol@f1:
   554                           	opt stack 0
   555                           
   556                           ; 4 bytes @ 0x4
   557  0004'                    	ds	4
   558  0008'                    ??___fltol:
   559                           
   560                           ; 0 bytes @ 0x8
   561  0008'                    	ds	4
   562  000C'                    ?___altofl:
   563                           	opt stack 0
   564  000C'                    measure_inductance@numerator:
   565                           	opt stack 0
   566  000C'                    ___altofl@c:
   567                           	opt stack 0
   568                           
   569                           ; 4 bytes @ 0xC
   570  000C'                    	ds	4
   571  0010'                    ?_floor:
   572                           	opt stack 0
   573  0010'                    measure_inductance@denominator:
   574                           	opt stack 0
   575  0010'                    floor@x:
   576                           	opt stack 0
   577                           
   578                           ; 4 bytes @ 0x10
   579  0010'                    	ds	4
   580  0014'                    floor@i:
   581                           	opt stack 0
   582  0014'                    _measure_inductance$1045:
   583                           	opt stack 0
   584                           
   585                           ; 4 bytes @ 0x14
   586  0014'                    	ds	4
   587  0018'                    floor@expon:
   588                           	opt stack 0
   589  0018'                    _measure_inductance$1049:
   590                           	opt stack 0
   591                           
   592                           ; 4 bytes @ 0x18
   593  0018'                    	ds	2
   594  001A'                    ?_exp:
   595                           	opt stack 0
   596  001A'                    exp@x:
   597                           	opt stack 0
   598                           
   599                           ; 4 bytes @ 0x1A
   600  001A'                    	ds	2
   601  001C'                    _measure_inductance$1050:
   602                           	opt stack 0
   603                           
   604                           ; 4 bytes @ 0x1C
   605  001C'                    	ds	2
   606  001E'                    _exp$1057:
   607                           	opt stack 0
   608                           
   609                           ; 4 bytes @ 0x1E
   610  001E'                    	ds	2
   611  0020'                    _measure_inductance$1051:
   612                           	opt stack 0
   613                           
   614                           ; 4 bytes @ 0x20
   615  0020'                    	ds	2
   616  0022'                    exp@exponent:
   617                           	opt stack 0
   618                           
   619                           ; 2 bytes @ 0x22
   620  0022'                    	ds	2
   621  0024'                    measure_inductance@unit:
   622                           	opt stack 0
   623  0024'                    exp@sign:
   624                           	opt stack 0
   625                           
   626                           ; 1 bytes @ 0x24
   627  0024'                    	ds	1
   628  0025'                    ?_pow:
   629                           	opt stack 0
   630  0025'                    pow@x:
   631                           	opt stack 0
   632  0025'                    _measure_inductance$1046:
   633                           	opt stack 0
   634                           
   635                           ; 4 bytes @ 0x25
   636  0025'                    	ds	4
   637  0029'                    pow@y:
   638                           	opt stack 0
   639  0029'                    _measure_inductance$1047:
   640                           	opt stack 0
   641                           
   642                           ; 4 bytes @ 0x29
   643  0029'                    	ds	4
   644  002D'                    _measure_inductance$1048:
   645                           	opt stack 0
   646  002D'                    _pow$1055:
   647                           	opt stack 0
   648                           
   649                           ; 4 bytes @ 0x2D
   650  002D'                    	ds	4
   651  0031'                    measure_inductance@var:
   652                           	opt stack 0
   653  0031'                    _pow$1056:
   654                           	opt stack 0
   655                           
   656                           ; 4 bytes @ 0x31
   657  0031'                    	ds	2
   658  0033'                    measure_inductance@Lin:
   659                           	opt stack 0
   660                           
   661                           ; 4 bytes @ 0x33
   662  0033'                    	ds	2
   663  0035'                    pow@sign:
   664                           	opt stack 0
   665                           
   666                           ; 1 bytes @ 0x35
   667  0035'                    	ds	1
   668  0036'                    pow@yi:
   669                           	opt stack 0
   670                           
   671                           ; 4 bytes @ 0x36
   672  0036'                    	ds	4
   673  003A'                    format_double@num:
   674                           	opt stack 0
   675                           
   676                           ; 4 bytes @ 0x3A
   677  003A'                    	ds	4
   678  003E'                    _format_double$1040:
   679                           	opt stack 0
   680                           
   681                           ; 4 bytes @ 0x3E
   682  003E'                    	ds	4
   683  0042'                    _format_double$1041:
   684                           	opt stack 0
   685                           
   686                           ; 4 bytes @ 0x42
   687  0042'                    	ds	4
   688  0046'                    format_double@weight:
   689                           	opt stack 0
   690                           
   691                           ; 4 bytes @ 0x46
   692  0046'                    	ds	4
   693  004A'                    format_double@digit:
   694                           	opt stack 0
   695                           
   696                           ; 2 bytes @ 0x4A
   697  004A'                    	ds	2
   698  004C'                    format_double@m:
   699                           	opt stack 0
   700                           
   701                           ; 2 bytes @ 0x4C
   702  004C'                    	ds	2
   703  004E'                    _measure_capacitance$1042:
   704                           	opt stack 0
   705                           
   706                           ; 4 bytes @ 0x4E
   707  004E'                    	ds	4
   708  0052'                    _measure_capacitance$1043:
   709                           	opt stack 0
   710                           
   711                           ; 4 bytes @ 0x52
   712  0052'                    	ds	4
   713  0056'                    _measure_capacitance$1044:
   714                           	opt stack 0
   715                           
   716                           ; 4 bytes @ 0x56
   717  0056'                    	ds	4
   718  005A'                    measure_capacitance@unit:
   719                           	opt stack 0
   720                           
   721                           ; 1 bytes @ 0x5A
   722  005A'                    	ds	1
   723  005B'                    measure_capacitance@var:
   724                           	opt stack 0
   725                           
   726                           ; 2 bytes @ 0x5B
   727  005B'                    	ds	2
   728  005D'                    measure_capacitance@Cin:
   729                           	opt stack 0
   730                           
   731                           ; 4 bytes @ 0x5D
   732  005D'                    	ds	4
   733                           tblptru	equ	0xFF8
   734                           tblptrh	equ	0xFF7
   735                           tblptrl	equ	0xFF6
   736                           tablat	equ	0xFF5
   737                           prodl	equ	0xFF3
   738                           intcon	equ	0xFF2
   739                           intcon2	equ	0xFF1
   740                           postinc0	equ	0xFEE
   741                           wreg	equ	0xFE8
   742                           postdec1	equ	0xFE5
   743                           fsr1l	equ	0xFE1
   744                           indf2	equ	0xFDF
   745                           postinc2	equ	0xFDE
   746                           postdec2	equ	0xFDD
   747                           fsr2h	equ	0xFDA
   748                           fsr2l	equ	0xFD9
   749                           status	equ	0xFD8
   750                           
   751                           	psect	cstackCOMRAM
   752  0000'                    __pcstackCOMRAM:
   753                           	opt stack 0
   754  0000'                    ??_global_int:
   755  0000'                    
   756                           ; 1 bytes @ 0x0
   757  0000'                    	ds	6
   758  0006'                    ??_buffer_putch:
   759  0006'                    ??_timer2_init:
   760  0006'                    ?_timer0_read_ps:
   761                           	opt stack 0
   762  0006'                    ?___lwdiv:
   763                           	opt stack 0
   764  0006'                    ?___lwmod:
   765                           	opt stack 0
   766  0006'                    ?___flpack:
   767                           	opt stack 0
   768  0006'                    ?_frexp:
   769                           	opt stack 0
   770  0006'                    ?___flneg:
   771                           	opt stack 0
   772  0006'                    lcd_write4bits@value:
   773                           	opt stack 0
   774  0006'                    lcd_init@fourbitmode:
   775                           	opt stack 0
   776  0006'                    _ser_puts$0:
   777                           	opt stack 0
   778  0006'                    _timer0_init$152:
   779                           	opt stack 0
   780  0006'                    ___lwdiv@dividend:
   781                           	opt stack 0
   782  0006'                    ___lwmod@dividend:
   783                           	opt stack 0
   784  0006'                    ___flpack@arg:
   785                           	opt stack 0
   786  0006'                    ___flge@ff1:
   787                           	opt stack 0
   788  0006'                    ___flneg@f1:
   789                           	opt stack 0
   790  0006'                    frexp@value:
   791                           	opt stack 0
   792                           
   793                           ; 4 bytes @ 0x6
   794  0006'                    	ds	1
   795  0007'                    lcd_send@mode:
   796                           	opt stack 0
   797  0007'                    timer2_init@ps:
   798                           	opt stack 0
   799  0007'                    _lcd_init$134:
   800                           	opt stack 0
   801                           
   802                           ; 2 bytes @ 0x7
   803  0007'                    	ds	1
   804  0008'                    ??_timer0_read_ps:
   805  0008'                    buffer_putch@ch:
   806                           	opt stack 0
   807  0008'                    lcd_send@value:
   808                           	opt stack 0
   809  0008'                    _timer0_init$153:
   810                           	opt stack 0
   811  0008'                    ___lwdiv@divisor:
   812                           	opt stack 0
   813  0008'                    ___lwmod@divisor:
   814                           	opt stack 0
   815                           
   816                           ; 2 bytes @ 0x8
   817  0008'                    	ds	1
   818  0009'                    ??_lcd_puts:
   819  0009'                    lcd_command@value:
   820                           	opt stack 0
   821  0009'                    timer2_init@ps_mode:
   822                           	opt stack 0
   823  0009'                    output_putch@c:
   824                           	opt stack 0
   825                           
   826                           ; 1 bytes @ 0x9
   827  0009'                    	ds	1
   828  000A'                    ??_put_str:
   829  000A'                    ??_lcd_clear:
   830  000A'                    lcd_gotoxy@row:
   831                           	opt stack 0
   832  000A'                    lcd_puts@i:
   833                           	opt stack 0
   834  000A'                    lcd_begin@dotsize:
   835                           	opt stack 0
   836  000A'                    timer0_read_ps@prev:
   837                           	opt stack 0
   838  000A'                    ___flpack@exp:
   839                           	opt stack 0
   840  000A'                    frexp@eptr:
   841                           	opt stack 0
   842  000A'                    ___lwmod@counter:
   843                           	opt stack 0
   844  000A'                    _timer0_init$154:
   845                           	opt stack 0
   846  000A'                    ___lwdiv@quotient:
   847                           	opt stack 0
   848  000A'                    ___flge@ff2:
   849                           	opt stack 0
   850                           
   851                           ; 4 bytes @ 0xA
   852  000A'                    	ds	1
   853  000B'                    ??_frexp:
   854  000B'                    ??_lcd_begin:
   855  000B'                    lcd_gotoxy@col:
   856                           	opt stack 0
   857  000B'                    lcd_puts@string:
   858                           	opt stack 0
   859  000B'                    ___flpack@sign:
   860                           	opt stack 0
   861  000B'                    timer0_read_ps@count:
   862                           	opt stack 0
   863  000B'                    put_str@i:
   864                           	opt stack 0
   865                           
   866                           ; 2 bytes @ 0xB
   867  000B'                    	ds	1
   868  000C'                    ??___flpack:
   869  000C'                    lcd_begin@lines:
   870                           	opt stack 0
   871  000C'                    ___lwdiv@counter:
   872                           	opt stack 0
   873  000C'                    _timer0_init$155:
   874                           	opt stack 0
   875  000C'                    lcd_gotoxy@row_offsets:
   876                           	opt stack 0
   877                           
   878                           ; 4 bytes @ 0xC
   879  000C'                    	ds	1
   880  000D'                    put_str@s:
   881                           	opt stack 0
   882  000D'                    format_number@n:
   883                           	opt stack 0
   884                           
   885                           ; 2 bytes @ 0xD
   886  000D'                    	ds	1
   887  000E'                    timer0_init@prescaler:
   888                           	opt stack 0
   889                           
   890                           ; 1 bytes @ 0xE
   891  000E'                    	ds	1
   892  000F'                    format_number@base:
   893                           	opt stack 0
   894  000F'                    timer0_init@ps_mode:
   895                           	opt stack 0
   896                           
   897                           ; 1 bytes @ 0xF
   898  000F'                    	ds	1
   899  0010'                    ??_print_unit:
   900  0010'                    ?___fldiv:
   901                           	opt stack 0
   902  0010'                    ?___awtofl:
   903                           	opt stack 0
   904  0010'                    ?___lltofl:
   905                           	opt stack 0
   906  0010'                    format_number@pad:
   907                           	opt stack 0
   908  0010'                    indicator@indicate:
   909                           	opt stack 0
   910  0010'                    ___awtofl@c:
   911                           	opt stack 0
   912  0010'                    ___fldiv@f1:
   913                           	opt stack 0
   914  0010'                    ___lltofl@c:
   915                           	opt stack 0
   916                           
   917                           ; 4 bytes @ 0x10
   918  0010'                    	ds	1
   919  0011'                    ??_format_number:
   920                           
   921                           ; 0 bytes @ 0x11
   922  0011'                    	ds	2
   923  0013'                    format_number@buf:
   924                           	opt stack 0
   925                           
   926                           ; 32 bytes @ 0x13
   927  0013'                    	ds	1
   928  0014'                    ___awtofl@sign:
   929                           	opt stack 0
   930  0014'                    ___fldiv@f2:
   931                           	opt stack 0
   932                           
   933                           ; 4 bytes @ 0x14
   934  0014'                    	ds	4
   935  0018'                    ___fldiv@f3:
   936                           	opt stack 0
   937                           
   938                           ; 4 bytes @ 0x18
   939  0018'                    	ds	4
   940  001C'                    ___fldiv@cntr:
   941                           	opt stack 0
   942                           
   943                           ; 1 bytes @ 0x1C
   944  001C'                    	ds	1
   945  001D'                    ___fldiv@exp:
   946                           	opt stack 0
   947                           
   948                           ; 1 bytes @ 0x1D
   949  001D'                    	ds	1
   950  001E'                    ___fldiv@sign:
   951                           	opt stack 0
   952                           
   953                           ; 1 bytes @ 0x1E
   954  001E'                    	ds	1
   955  001F'                    ?___flmul:
   956                           	opt stack 0
   957  001F'                    ___flmul@f1:
   958                           	opt stack 0
   959                           
   960                           ; 4 bytes @ 0x1F
   961  001F'                    	ds	4
   962  0023'                    ___flmul@f2:
   963                           	opt stack 0
   964                           
   965                           ; 4 bytes @ 0x23
   966  0023'                    	ds	4
   967  0027'                    ___flmul@exp:
   968                           	opt stack 0
   969                           
   970                           ; 1 bytes @ 0x27
   971  0027'                    	ds	1
   972  0028'                    ___flmul@f3_as_product:
   973                           	opt stack 0
   974                           
   975                           ; 4 bytes @ 0x28
   976  0028'                    	ds	4
   977  002C'                    ___flmul@cntr:
   978                           	opt stack 0
   979                           
   980                           ; 1 bytes @ 0x2C
   981  002C'                    	ds	1
   982  002D'                    ___flmul@sign:
   983                           	opt stack 0
   984                           
   985                           ; 1 bytes @ 0x2D
   986  002D'                    	ds	1
   987  002E'                    ?___fladd:
   988                           	opt stack 0
   989  002E'                    ___fladd@f1:
   990                           	opt stack 0
   991                           
   992                           ; 4 bytes @ 0x2E
   993  002E'                    	ds	4
   994  0032'                    ___fladd@f2:
   995                           	opt stack 0
   996                           
   997                           ; 4 bytes @ 0x32
   998  0032'                    	ds	1
   999  0033'                    _format_number$68:
  1000                           	opt stack 0
  1001                           
  1002                           ; 2 bytes @ 0x33
  1003  0033'                    	ds	2
  1004  0035'                    format_number@padchar:
  1005                           	opt stack 0
  1006                           
  1007                           ; 1 bytes @ 0x35
  1008  0035'                    	ds	1
  1009  0036'                    ??___fladd:
  1010  0036'                    format_number@di:
  1011                           	opt stack 0
  1012                           
  1013                           ; 1 bytes @ 0x36
  1014  0036'                    	ds	1
  1015  0037'                    format_number@i:
  1016                           	opt stack 0
  1017  0037'                    ___fladd@sign:
  1018                           	opt stack 0
  1019                           
  1020                           ; 1 bytes @ 0x37
  1021  0037'                    	ds	1
  1022  0038'                    ?_measure_freq:
  1023                           	opt stack 0
  1024  0038'                    ___fladd@exp2:
  1025                           	opt stack 0
  1026  0038'                    print_reading@measurement:
  1027                           	opt stack 0
  1028  0038'                    format_xint32@x:
  1029                           	opt stack 0
  1030                           
  1031                           ; 4 bytes @ 0x38
  1032  0038'                    	ds	1
  1033  0039'                    ___fladd@exp1:
  1034                           	opt stack 0
  1035                           
  1036                           ; 1 bytes @ 0x39
  1037  0039'                    	ds	1
  1038  003A'                    ??_measure_freq:
  1039  003A'                    ?___flsub:
  1040                           	opt stack 0
  1041  003A'                    ?_eval_poly:
  1042                           	opt stack 0
  1043  003A'                    _print_reading$1052:
  1044                           	opt stack 0
  1045  003A'                    ___flsub@f1:
  1046                           	opt stack 0
  1047  003A'                    eval_poly@x:
  1048                           	opt stack 0
  1049                           
  1050                           ; 4 bytes @ 0x3A
  1051  003A'                    	ds	1
  1052  003B'                    measure_freq@count:
  1053                           	opt stack 0
  1054                           
  1055                           ; 2 bytes @ 0x3B
  1056  003B'                    	ds	1
  1057  003C'                    _print_reading$1053:
  1058                           	opt stack 0
  1059                           
  1060                           ; 2 bytes @ 0x3C
  1061  003C'                    	ds	1
  1062  003D'                    ?___lwtofl:
  1063                           	opt stack 0
  1064  003D'                    ___lwtofl@c:
  1065                           	opt stack 0
  1066                           
  1067                           ; 2 bytes @ 0x3D
  1068  003D'                    	ds	1
  1069  003E'                    eval_poly@d:
  1070                           	opt stack 0
  1071  003E'                    ___flsub@f2:
  1072                           	opt stack 0
  1073                           
  1074                           ; 4 bytes @ 0x3E
  1075  003E'                    	ds	1
  1076  003F'                    eval_poly@n:
  1077                           	opt stack 0
  1078                           
  1079                           ; 2 bytes @ 0x3F
  1080  003F'                    	ds	2
  1081  0041'                    ??_eval_poly:
  1082  0041'                    calibrate@i:
  1083                           	opt stack 0
  1084                           
  1085                           ; 1 bytes @ 0x41
  1086  0041'                    	ds	1
  1087  0042'                    eval_poly@res:
  1088                           	opt stack 0
  1089                           
  1090                           ; 4 bytes @ 0x42
  1091  0042'                    	ds	4
  1092  0046'                    ?_ldexp:
  1093                           	opt stack 0
  1094  0046'                    ?_log:
  1095                           	opt stack 0
  1096  0046'                    ldexp@value:
  1097                           	opt stack 0
  1098  0046'                    log@x:
  1099                           	opt stack 0
  1100                           
  1101                           ; 4 bytes @ 0x46
  1102  0046'                    	ds	4
  1103  004A'                    ldexp@newexp:
  1104                           	opt stack 0
  1105  004A'                    log@exponent:
  1106                           	opt stack 0
  1107                           
  1108                           ; 2 bytes @ 0x4A
  1109  004A'                    	ds	2
  1110  004C'                    ??_ldexp:
  1111  004C'                    ?_log10:
  1112                           	opt stack 0
  1113  004C'                    log10@x:
  1114                           	opt stack 0
  1115                           
  1116                           ; 4 bytes @ 0x4C
  1117  004C'                    	ds	4
  1118  0050'                    ___fltol@sign1:
  1119                           	opt stack 0
  1120                           
  1121                           ; 1 bytes @ 0x50
  1122  0050'                    	ds	1
  1123  0051'                    ___fltol@exp1:
  1124                           	opt stack 0
  1125                           
  1126                           ; 1 bytes @ 0x51
  1127  0051'                    	ds	1
  1128  0052'                    ___altofl@sign:
  1129                           	opt stack 0
  1130                           
  1131                           ; 1 bytes @ 0x52
  1132  0052'                    	ds	1
  1133  0053'                    tblptru	equ	0xFF8
  1134                           tblptrh	equ	0xFF7
  1135                           tblptrl	equ	0xFF6
  1136                           tablat	equ	0xFF5
  1137                           prodl	equ	0xFF3
  1138                           intcon	equ	0xFF2
  1139                           intcon2	equ	0xFF1
  1140                           postinc0	equ	0xFEE
  1141                           wreg	equ	0xFE8
  1142                           postdec1	equ	0xFE5
  1143                           fsr1l	equ	0xFE1
  1144                           indf2	equ	0xFDF
  1145                           postinc2	equ	0xFDE
  1146                           postdec2	equ	0xFDD
  1147                           fsr2h	equ	0xFDA
  1148                           fsr2l	equ	0xFD9
  1149                           status	equ	0xFD8
  1150                           
  1151                           ; 0 bytes @ 0x53
  1152 ;;
  1153 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1154 ;;
  1155 ;; *************** function _main *****************
  1156 ;; Defined at:
  1157 ;;		line 116 in file "../../../LC-meter.c"
  1158 ;; Parameters:    Size  Location     Type
  1159 ;;		None
  1160 ;; Auto vars:     Size  Location     Type
  1161 ;;		None
  1162 ;; Return value:  Size  Location     Type
  1163 ;;		None               void
  1164 ;; Registers used:
  1165 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblp
      +tru, prodl, prodh, bsr, cstack
  1166 ;; Tracked objects:
  1167 ;;		On entry : 0/0
  1168 ;;		On exit  : 0/0
  1169 ;;		Unchanged: 0/0
  1170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1171 ;;      Params:         0       0       0       0       0       0       0       0       0
  1172 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1173 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1174 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1175 ;;Total ram usage:        0 bytes
  1176 ;; Hardware stack levels required when called:    8
  1177 ;; This function calls:
  1178 ;;		_calibrate
  1179 ;;		_delay10ms
  1180 ;;		_format_double
  1181 ;;		_indicator
  1182 ;;		_lcd_begin
  1183 ;;		_lcd_clear
  1184 ;;		_lcd_gotoxy
  1185 ;;		_lcd_init
  1186 ;;		_lcd_puts
  1187 ;;		_measure_capacitance
  1188 ;;		_measure_inductance
  1189 ;;		_ser_init
  1190 ;;		_ser_puts
  1191 ;;		_timer0_init
  1192 ;;		_timer2_init
  1193 ;; This function is called by:
  1194 ;;		Startup code after reset
  1195 ;; This function uses a non-reentrant model
  1196 ;;
  1197                           
  1198                           	psect	text0
  1199  0000'                    __ptext0:
  1200                           	opt stack 0
  1201  0000'                    _main:
  1202                           	opt stack 23
  1203                           
  1204                           ;LC-meter.c: 117: bres = msecpart = msecs = seconds = 0;
  1205                           
  1206                           ;incstack = 0
  1207  0000' 0100               	movlb	0	; () banked
  1208  0002' 6B00'              	clrf	_seconds& (0+255),b	;volatile
  1209  0004' 6B00'              	clrf	(_seconds+1)& (0+255),b	;volatile
  1210  0006' 6B00'              	clrf	(_seconds+2)& (0+255),b	;volatile
  1211  0008' 6B00'              	clrf	(_seconds+3)& (0+255),b	;volatile
  1212  000A' C00C' F008'        	movff	_seconds,_msecs	;volatile
  1213  000E' C00D' F009'        	movff	_seconds+1,_msecs+1	;volatile
  1214  0012' C00E' F00A'        	movff	_seconds+2,_msecs+2	;volatile
  1215  0016' C00F' F00B'        	movff	_seconds+3,_msecs+3	;volatile
  1216  001A' C008' F006'        	movff	_msecs,_msecpart	;volatile
  1217  001E' C009' F007'        	movff	_msecs+1,_msecpart+1	;volatile
  1218  0022' C006' F004'        	movff	_msecpart,_bres	;volatile
  1219  0026' C007' F005'        	movff	_msecpart+1,_bres+1	;volatile
  1220                           
  1221                           ;LC-meter.c: 119: CCal = 1000;
  1222  002A' 6B00'              	clrf	_CCal& (0+255),b
  1223  002C' 6B00'              	clrf	(_CCal+1)& (0+255),b
  1224  002E' 0E7A               	movlw	122
  1225  0030' 6F00'              	movwf	(_CCal+2)& (0+255),b
  1226  0032' 0E44               	movlw	68
  1227  0034' 6F00'              	movwf	(_CCal+3)& (0+255),b
  1228                           
  1229                           ; BSR set to: 0
  1230                           ;LC-meter.c: 122: CM1CON0 &= 0b11111000;
  1231  0036' 0EF8               	movlw	248
  1232  0038' 1698               	andwf	3992,f,c	;volatile
  1233                           
  1234                           ; BSR set to: 0
  1235                           ;LC-meter.c: 123: CM1CON0 |= 0b00000101;
  1236  003A' 0E05               	movlw	5
  1237  003C' 1298               	iorwf	3992,f,c	;volatile
  1238                           
  1239                           ;LC-meter.c: 128: TRISA = 0b11001111;
  1240  003E' 0ECF               	movlw	207
  1241  0040' 6E92               	movwf	3986,c	;volatile
  1242                           
  1243                           ; BSR set to: 0
  1244                           ;LC-meter.c: 131: timer0_init(0b100 | 0x40);
  1245  0042' 0E44               	movlw	68
  1246  0044' EC00' F000'        	call	_timer0_init
  1247                           
  1248                           ; BSR set to: 0
  1249                           ;LC-meter.c: 138: INTCON2 &= ~0b10000000;
  1250  0048' 9EF1               	bcf	intcon2,7,c	;volatile
  1251                           
  1252                           ; BSR set to: 0
  1253                           ;LC-meter.c: 144: TRISC &= ~0b00000100;
  1254  004A' 9494               	bcf	3988,2,c	;volatile
  1255                           
  1256                           ; BSR set to: 0
  1257                           ;LC-meter.c: 145: LATC &= ~0b00000100; LATC |= (!!(1)) << 2;;
  1258  004C' 948B               	bcf	3979,2,c	;volatile
  1259                           
  1260                           ; BSR set to: 0
  1261  004E' 848B               	bsf	3979,2,c	;volatile
  1262                           
  1263                           ; BSR set to: 0
  1264                           ;LC-meter.c: 150: timer2_init(0b000 | 0x80);
  1265  0050' 0E80               	movlw	128
  1266  0052' EC00' F000'        	call	_timer2_init
  1267                           
  1268                           ;LC-meter.c: 155: TRISC &= 0b10110101;
  1269  0056' 0EB5               	movlw	181
  1270  0058' 1694               	andwf	3988,f,c	;volatile
  1271                           
  1272                           ;LC-meter.c: 167: lcd_init(1);
  1273  005A' 0E01               	movlw	1
  1274  005C' EC00' F000'        	call	_lcd_init
  1275                           
  1276                           ;LC-meter.c: 168: lcd_begin(2, 1);
  1277  0060' 0E01               	movlw	1
  1278  0062' 6E0A'              	movwf	lcd_begin@dotsize,c
  1279  0064' 0E02               	movlw	2
  1280  0066' EC00' F000'        	call	_lcd_begin
  1281                           
  1282                           ;LC-meter.c: 171: TRISC |= (1 << 4);
  1283  006A' 8894               	bsf	3988,4,c	;volatile
  1284                           
  1285                           ;LC-meter.c: 172: TRISC &= ~(1 << 5);
  1286  006C' 9A94               	bcf	3988,5,c	;volatile
  1287                           
  1288                           ;LC-meter.c: 174: LATC &= ~(1 << 5);
  1289  006E' 9A8B               	bcf	3979,5,c	;volatile
  1290                           
  1291                           ;LC-meter.c: 175: delay10ms(50);
  1292  0070' 0E32               	movlw	50
  1293  0072' EC00' F000'        	call	_delay10ms
  1294                           
  1295                           ;LC-meter.c: 176: LATC |= (1 << 5);
  1296  0076' 8A8B               	bsf	3979,5,c	;volatile
  1297                           
  1298                           ;LC-meter.c: 177: delay10ms(50);
  1299  0078' 0E32               	movlw	50
  1300  007A' EC00' F000'        	call	_delay10ms
  1301                           
  1302                           ;LC-meter.c: 178: LATC &= ~(1 << 5);
  1303  007E' 9A8B               	bcf	3979,5,c	;volatile
  1304                           
  1305                           ;LC-meter.c: 179: delay10ms(50);
  1306  0080' 0E32               	movlw	50
  1307  0082' EC00' F000'        	call	_delay10ms
  1308                           
  1309                           ;LC-meter.c: 180: LATC |= (1 << 5);
  1310  0086' 8A8B               	bsf	3979,5,c	;volatile
  1311                           
  1312                           ;LC-meter.c: 181: delay10ms(50);
  1313  0088' 0E32               	movlw	50
  1314  008A' EC00' F000'        	call	_delay10ms
  1315                           
  1316                           ;LC-meter.c: 182: LATC &= ~(1 << 5);
  1317  008E' 9A8B               	bcf	3979,5,c	;volatile
  1318                           
  1319                           ;LC-meter.c: 185: ser_init();
  1320  0090' EC00' F000'        	call	_ser_init	;wreg free
  1321                           
  1322                           ;LC-meter.c: 192: INTCON |= 0xc0;
  1323  0094' 0EC0               	movlw	192
  1324  0096' 12F2               	iorwf	intcon,f,c	;volatile
  1325                           
  1326                           ;LC-meter.c: 202: lcd_gotoxy(0, 0);
  1327  0098' 0E00               	movlw	0
  1328  009A' 6A0A'              	clrf	lcd_gotoxy@row,c
  1329  009C' EC00' F000'        	call	_lcd_gotoxy
  1330                           
  1331                           ;LC-meter.c: 204: lcd_puts("LC-meter ");
  1332  00A0' 0E00'              	movlw	STR_28& (0+255)
  1333  00A2' EC00' F000'        	call	_lcd_puts
  1334                           
  1335                           ;LC-meter.c: 205: format_double( CCal);
  1336  00A6' C000' F03A'        	movff	_CCal,format_double@num
  1337  00AA' C001' F03B'        	movff	_CCal+1,format_double@num+1
  1338  00AE' C002' F03C'        	movff	_CCal+2,format_double@num+2
  1339  00B2' C003' F03D'        	movff	_CCal+3,format_double@num+3
  1340  00B6' EC00' F000'        	call	_format_double	;wreg free
  1341                           
  1342                           ;LC-meter.c: 211: delay10ms(200);
  1343  00BA' 0EC8               	movlw	200
  1344  00BC' EC00' F000'        	call	_delay10ms
  1345                           
  1346                           ;LC-meter.c: 214: calibrate();
  1347  00C0' EC00' F000'        	call	_calibrate	;wreg free
  1348                           
  1349                           ;LC-meter.c: 216: lcd_clear();
  1350  00C4' EC00' F000'        	call	_lcd_clear	;wreg free
  1351  00C8'                    l4040:
  1352                           
  1353                           ;LC-meter.c: 227: ser_puts("...\r\n");
  1354  00C8' 0E00'              	movlw	STR_29& (0+255)
  1355  00CA' EC00' F000'        	call	_ser_puts
  1356                           
  1357                           ;LC-meter.c: 228: if((!!(PORTC & 0b10000)))
  1358  00CE' A882               	btfss	3970,4,c	;volatile
  1359  00D0' D003               	goto	l4046
  1360                           
  1361                           ;LC-meter.c: 229: measure_capacitance();
  1362  00D2' EC00' F000'        	call	_measure_capacitance	;wreg free
  1363  00D6' D002               	goto	l4048
  1364  00D8'                    l4046:
  1365                           
  1366                           ;LC-meter.c: 230: else
  1367                           ;LC-meter.c: 231: measure_inductance();
  1368  00D8' EC00' F000'        	call	_measure_inductance	;wreg free
  1369  00DC'                    l4048:
  1370                           
  1371                           ;LC-meter.c: 233: indicator(1);
  1372  00DC' 0E01               	movlw	1
  1373  00DE' EC00' F000'        	call	_indicator
  1374                           
  1375                           ;LC-meter.c: 234: delay10ms(30);
  1376  00E2' 0E1E               	movlw	30
  1377  00E4' EC00' F000'        	call	_delay10ms
  1378                           
  1379                           ;LC-meter.c: 235: indicator(0);
  1380  00E8' 0E00               	movlw	0
  1381  00EA' EC00' F000'        	call	_indicator
  1382                           
  1383                           ;LC-meter.c: 236: delay10ms(20);
  1384  00EE' 0E14               	movlw	20
  1385  00F0' EC00' F000'        	call	_delay10ms
  1386                           
  1387                           ;LC-meter.c: 237: }
  1388  00F4' D7E9               	goto	l4040
  1389  00F6'                    __end_of_main:
  1390                           	opt stack 0
  1391                           tblptru	equ	0xFF8
  1392                           tblptrh	equ	0xFF7
  1393                           tblptrl	equ	0xFF6
  1394                           tablat	equ	0xFF5
  1395                           prodl	equ	0xFF3
  1396                           intcon	equ	0xFF2
  1397                           intcon2	equ	0xFF1
  1398                           postinc0	equ	0xFEE
  1399                           wreg	equ	0xFE8
  1400                           postdec1	equ	0xFE5
  1401                           fsr1l	equ	0xFE1
  1402                           indf2	equ	0xFDF
  1403                           postinc2	equ	0xFDE
  1404                           postdec2	equ	0xFDD
  1405                           fsr2h	equ	0xFDA
  1406                           fsr2l	equ	0xFD9
  1407                           status	equ	0xFD8
  1408                           
  1409 ;; *************** function _timer2_init *****************
  1410 ;; Defined at:
  1411 ;;		line 125 in file "../../../lib/timer.c"
  1412 ;; Parameters:    Size  Location     Type
  1413 ;;  ps_mode         1    wreg     unsigned char 
  1414 ;; Auto vars:     Size  Location     Type
  1415 ;;  ps_mode         1    9[COMRAM] unsigned char 
  1416 ;;  postscaler      1    0        unsigned char 
  1417 ;;  ps              1    7[COMRAM] unsigned char 
  1418 ;; Return value:  Size  Location     Type
  1419 ;;		None               void
  1420 ;; Registers used:
  1421 ;;		wreg, status,2, status,0
  1422 ;; Tracked objects:
  1423 ;;		On entry : F/0
  1424 ;;		On exit  : 0/0
  1425 ;;		Unchanged: 0/0
  1426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1427 ;;      Params:         0       0       0       0       0       0       0       0       0
  1428 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1429 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1430 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1431 ;;Total ram usage:        4 bytes
  1432 ;; Hardware stack levels used:    1
  1433 ;; Hardware stack levels required when called:    1
  1434 ;; This function calls:
  1435 ;;		Nothing
  1436 ;; This function is called by:
  1437 ;;		_main
  1438 ;; This function uses a non-reentrant model
  1439 ;;
  1440                           
  1441                           	psect	text1
  1442  0000'                    __ptext1:
  1443                           	opt stack 0
  1444  0000'                    _timer2_init:
  1445                           	opt stack 29
  1446                           
  1447                           ;incstack = 0
  1448                           ;timer2_init@ps_mode stored from wreg
  1449  0000' 6E09'              	movwf	timer2_init@ps_mode,c
  1450                           
  1451                           ; BSR set to: 0
  1452                           ;timer.c: 126: uint8_t ps = ps_mode & 0b1111;
  1453  0002' 5009'              	movf	timer2_init@ps_mode,w,c
  1454  0004' 0B0F               	andlw	15
  1455  0006' 6E07'              	movwf	timer2_init@ps,c
  1456                           
  1457                           ; BSR set to: 0
  1458                           ;timer.c: 130: T2CON &= ~0b01111111;
  1459  0008' 0E80               	movlw	128
  1460  000A' 16BA               	andwf	4026,f,c	;volatile
  1461                           
  1462                           ;timer.c: 132: T2CON |= (postscaler & 0b1111) << 3;
  1463  000C' 50BA               	movf	4026,w,c	;volatile
  1464                           
  1465                           ;timer.c: 133: T2CON |= (ps & 0b11);
  1466  000E' 5007'              	movf	timer2_init@ps,w,c
  1467  0010' 0B03               	andlw	3
  1468  0012' 12BA               	iorwf	4026,f,c	;volatile
  1469                           
  1470                           ; BSR set to: 0
  1471                           ;timer.c: 135: TMR2 = 0;
  1472  0014' 6ABC               	clrf	4028,c	;volatile
  1473                           
  1474                           ; BSR set to: 0
  1475                           ;timer.c: 137: T2CON |= 0b100;
  1476  0016' 84BA               	bsf	4026,2,c	;volatile
  1477                           
  1478                           ; BSR set to: 0
  1479                           ;timer.c: 140: PIR1 &= ~0b10;
  1480  0018' 929E               	bcf	3998,1,c	;volatile
  1481                           
  1482                           ;timer.c: 141: PIE1 = (!!(ps_mode & 0x80)) << 1;
  1483  001A' AE09'              	btfss	timer2_init@ps_mode,7,c
  1484  001C' D003               	goto	u2350
  1485  001E' 6A00'              	clrf	??_timer2_init& (0+255),c
  1486  0020' 2A00'              	incf	??_timer2_init& (0+255),f,c
  1487  0022' D001               	goto	u2368
  1488  0024'                    u2350:
  1489  0024' 6A00'              	clrf	??_timer2_init& (0+255),c
  1490  0026'                    u2368:
  1491  0026' 90D8               	bcf	status,0,c
  1492  0028' 3406'              	rlcf	??_timer2_init,w,c
  1493  002A' 6E9D               	movwf	3997,c	;volatile
  1494  002C' 0012               	return		;funcret
  1495  002E'                    __end_of_timer2_init:
  1496                           	opt stack 0
  1497                           tblptru	equ	0xFF8
  1498                           tblptrh	equ	0xFF7
  1499                           tblptrl	equ	0xFF6
  1500                           tablat	equ	0xFF5
  1501                           prodl	equ	0xFF3
  1502                           intcon	equ	0xFF2
  1503                           intcon2	equ	0xFF1
  1504                           postinc0	equ	0xFEE
  1505                           wreg	equ	0xFE8
  1506                           postdec1	equ	0xFE5
  1507                           fsr1l	equ	0xFE1
  1508                           indf2	equ	0xFDF
  1509                           postinc2	equ	0xFDE
  1510                           postdec2	equ	0xFDD
  1511                           fsr2h	equ	0xFDA
  1512                           fsr2l	equ	0xFD9
  1513                           status	equ	0xFD8
  1514                           
  1515 ;; *************** function _timer0_init *****************
  1516 ;; Defined at:
  1517 ;;		line 27 in file "../../../lib/timer.c"
  1518 ;; Parameters:    Size  Location     Type
  1519 ;;  ps_mode         1    wreg     unsigned char 
  1520 ;; Auto vars:     Size  Location     Type
  1521 ;;  ps_mode         1   15[COMRAM] unsigned char 
  1522 ;;  prescaler       1   14[COMRAM] unsigned char 
  1523 ;; Return value:  Size  Location     Type
  1524 ;;		None               void
  1525 ;; Registers used:
  1526 ;;		wreg, status,2, status,0
  1527 ;; Tracked objects:
  1528 ;;		On entry : F/0
  1529 ;;		On exit  : F/0
  1530 ;;		Unchanged: F/0
  1531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1532 ;;      Params:         0       0       0       0       0       0       0       0       0
  1533 ;;      Locals:        10       0       0       0       0       0       0       0       0
  1534 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1535 ;;      Totals:        10       0       0       0       0       0       0       0       0
  1536 ;;Total ram usage:       10 bytes
  1537 ;; Hardware stack levels used:    1
  1538 ;; Hardware stack levels required when called:    1
  1539 ;; This function calls:
  1540 ;;		Nothing
  1541 ;; This function is called by:
  1542 ;;		_main
  1543 ;; This function uses a non-reentrant model
  1544 ;;
  1545                           
  1546                           	psect	text2
  1547  0000'                    __ptext2:
  1548                           	opt stack 0
  1549  0000'                    _timer0_init:
  1550                           	opt stack 29
  1551                           
  1552                           ;incstack = 0
  1553                           ;timer0_init@ps_mode stored from wreg
  1554  0000' 6E0F'              	movwf	timer0_init@ps_mode,c
  1555                           
  1556                           ; BSR set to: 0
  1557                           ;timer.c: 28: uint8_t prescaler = ps_mode & 0b1111;
  1558  0002' 500F'              	movf	timer0_init@ps_mode,w,c
  1559  0004' 0B0F               	andlw	15
  1560  0006' 6E0E'              	movwf	timer0_init@prescaler,c
  1561                           
  1562                           ; BSR set to: 0
  1563                           ;timer.c: 30: TMR0 = 0;
  1564  0008' 6AD6               	clrf	4054,c	;volatile
  1565  000A' 6AD7               	clrf	4055,c	;volatile
  1566                           
  1567                           ; BSR set to: 0
  1568                           ;timer.c: 33: T0CON |= (!!(ps_mode & 0x40)) ? 0x20 : 0x00;
  1569  000C' BC0F'              	btfsc	timer0_init@ps_mode,6,c
  1570  000E' D003               	goto	l3038
  1571                           
  1572                           ; BSR set to: 0
  1573  0010' 6A06'              	clrf	_timer0_init$152,c
  1574  0012' 6A07'              	clrf	_timer0_init$152+1,c
  1575  0014' D003               	goto	l3040
  1576  0016'                    l3038:
  1577                           
  1578                           ; BSR set to: 0
  1579  0016' 6A07'              	clrf	_timer0_init$152+1,c
  1580  0018' 0E20               	movlw	32
  1581  001A' 6E06'              	movwf	_timer0_init$152,c
  1582  001C'                    l3040:
  1583                           
  1584                           ; BSR set to: 0
  1585  001C' 5006'              	movf	_timer0_init$152,w,c
  1586  001E' 12D5               	iorwf	4053,f,c	;volatile
  1587                           
  1588                           ; BSR set to: 0
  1589                           ;timer.c: 36: T0CON |= (!!(ps_mode & 0x10)) ? 0x10 : 0x00;
  1590  0020' B80F'              	btfsc	timer0_init@ps_mode,4,c
  1591  0022' D003               	goto	l3046
  1592                           
  1593                           ; BSR set to: 0
  1594  0024' 6A08'              	clrf	_timer0_init$153,c
  1595  0026' 6A09'              	clrf	_timer0_init$153+1,c
  1596  0028' D003               	goto	l3048
  1597  002A'                    l3046:
  1598                           
  1599                           ; BSR set to: 0
  1600  002A' 6A09'              	clrf	_timer0_init$153+1,c
  1601  002C' 0E10               	movlw	16
  1602  002E' 6E08'              	movwf	_timer0_init$153,c
  1603  0030'                    l3048:
  1604                           
  1605                           ; BSR set to: 0
  1606  0030' 5008'              	movf	_timer0_init$153,w,c
  1607  0032' 12D5               	iorwf	4053,f,c	;volatile
  1608                           
  1609                           ; BSR set to: 0
  1610                           ;timer.c: 39: T0CON &= (!!prescaler) ? ~0x08 : ~0x00;
  1611  0034' 500E'              	movf	timer0_init@prescaler,w,c
  1612  0036' E103               	bnz	l3054
  1613                           
  1614                           ; BSR set to: 0
  1615  0038' 680A'              	setf	_timer0_init$154,c
  1616  003A' 680B'              	setf	_timer0_init$154+1,c
  1617  003C' D003               	goto	l3056
  1618  003E'                    l3054:
  1619                           
  1620                           ; BSR set to: 0
  1621  003E' 680B'              	setf	_timer0_init$154+1,c
  1622  0040' 0EF7               	movlw	247
  1623  0042' 6E0A'              	movwf	_timer0_init$154,c
  1624  0044'                    l3056:
  1625                           
  1626                           ; BSR set to: 0
  1627  0044' 500A'              	movf	_timer0_init$154,w,c
  1628  0046' 16D5               	andwf	4053,f,c	;volatile
  1629                           
  1630                           ; BSR set to: 0
  1631                           ;timer.c: 41: T0CON &= ~0b111;
  1632  0048' 0EF8               	movlw	248
  1633  004A' 16D5               	andwf	4053,f,c	;volatile
  1634                           
  1635                           ;timer.c: 43: if(prescaler > 0) {
  1636  004C' 500E'              	movf	timer0_init@prescaler,w,c
  1637  004E' E003               	bz	l3062
  1638                           
  1639                           ; BSR set to: 0
  1640                           ;timer.c: 44: T0CON |= (prescaler - 1) & 0b111;
  1641  0050' 040E'              	decf	timer0_init@prescaler,w,c
  1642  0052' 0B07               	andlw	7
  1643  0054' 12D5               	iorwf	4053,f,c	;volatile
  1644  0056'                    l3062:
  1645                           
  1646                           ; BSR set to: 0
  1647                           ;timer.c: 50: }
  1648                           ;timer.c: 54: INTCON &= ~0x40;
  1649  0056' 9CF2               	bcf	intcon,6,c	;volatile
  1650                           
  1651                           ; BSR set to: 0
  1652                           ;timer.c: 55: INTCON |= (!!(ps_mode & 0x80)) ? 0x20 : 0x00;
  1653  0058' BE0F'              	btfsc	timer0_init@ps_mode,7,c
  1654  005A' D003               	goto	l3068
  1655                           
  1656                           ; BSR set to: 0
  1657  005C' 6A0C'              	clrf	_timer0_init$155,c
  1658  005E' 6A0D'              	clrf	_timer0_init$155+1,c
  1659  0060' D003               	goto	l3070
  1660  0062'                    l3068:
  1661                           
  1662                           ; BSR set to: 0
  1663  0062' 6A0D'              	clrf	_timer0_init$155+1,c
  1664  0064' 0E20               	movlw	32
  1665  0066' 6E0C'              	movwf	_timer0_init$155,c
  1666  0068'                    l3070:
  1667                           
  1668                           ; BSR set to: 0
  1669  0068' 500C'              	movf	_timer0_init$155,w,c
  1670  006A' 12F2               	iorwf	intcon,f,c	;volatile
  1671                           
  1672                           ; BSR set to: 0
  1673  006C' 0012               	return		;funcret
  1674  006E'                    __end_of_timer0_init:
  1675                           	opt stack 0
  1676                           tblptru	equ	0xFF8
  1677                           tblptrh	equ	0xFF7
  1678                           tblptrl	equ	0xFF6
  1679                           tablat	equ	0xFF5
  1680                           prodl	equ	0xFF3
  1681                           intcon	equ	0xFF2
  1682                           intcon2	equ	0xFF1
  1683                           postinc0	equ	0xFEE
  1684                           wreg	equ	0xFE8
  1685                           postdec1	equ	0xFE5
  1686                           fsr1l	equ	0xFE1
  1687                           indf2	equ	0xFDF
  1688                           postinc2	equ	0xFDE
  1689                           postdec2	equ	0xFDD
  1690                           fsr2h	equ	0xFDA
  1691                           fsr2l	equ	0xFD9
  1692                           status	equ	0xFD8
  1693                           
  1694 ;; *************** function _measure_inductance *****************
  1695 ;; Defined at:
  1696 ;;		line 196 in file "../../../src/measure.c"
  1697 ;; Parameters:    Size  Location     Type
  1698 ;;		None
  1699 ;; Auto vars:     Size  Location     Type
  1700 ;;  Lin             4   51[BANK0 ] unsigned char 
  1701 ;;  denominator     4   16[BANK0 ] unsigned char 
  1702 ;;  numerator       4   12[BANK0 ] unsigned char 
  1703 ;;  var             2   49[BANK0 ] unsigned int 
  1704 ;;  unit            1   36[BANK0 ] unsigned char 
  1705 ;; Return value:  Size  Location     Type
  1706 ;;		None               void
  1707 ;; Registers used:
  1708 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblp
      +tru, prodl, prodh, bsr, cstack
  1709 ;; Tracked objects:
  1710 ;;		On entry : 0/0
  1711 ;;		On exit  : 0/0
  1712 ;;		Unchanged: 0/0
  1713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1714 ;;      Params:         0       0       0       0       0       0       0       0       0
  1715 ;;      Locals:         0      43       0       0       0       0       0       0       0
  1716 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1717 ;;      Totals:         0      43       0       0       0       0       0       0       0
  1718 ;;Total ram usage:       43 bytes
  1719 ;; Hardware stack levels used:    1
  1720 ;; Hardware stack levels required when called:    6
  1721 ;; This function calls:
  1722 ;;		___fldiv
  1723 ;;		___flge
  1724 ;;		___flmul
  1725 ;;		___flsub
  1726 ;;		___fltol
  1727 ;;		___lwtofl
  1728 ;;		_lcd_gotoxy
  1729 ;;		_measure_freq
  1730 ;;		_print_reading
  1731 ;;		_print_unit
  1732 ;;		_put_str
  1733 ;; This function is called by:
  1734 ;;		_main
  1735 ;; This function uses a non-reentrant model
  1736 ;;
  1737                           
  1738                           	psect	text3
  1739  0000'                    __ptext3:
  1740                           	opt stack 0
  1741  0000'                    _measure_inductance:
  1742                           	opt stack 24
  1743                           
  1744                           ;measure.c: 197: uint8_t unit;
  1745                           ;measure.c: 198: uint16_t var;
  1746                           ;measure.c: 200: double Lin, numerator, denominator;
  1747                           ;measure.c: 203: lcd_gotoxy(0, 0);
  1748                           
  1749                           ; BSR set to: 0
  1750                           ;incstack = 0
  1751  0000' 0E00               	movlw	0
  1752  0002' 6A0A'              	clrf	lcd_gotoxy@row,c
  1753  0004' EC00' F000'        	call	_lcd_gotoxy
  1754                           
  1755                           ;measure.c: 204: put_str("Inductivity ");
  1756  0008' 0E00'              	movlw	STR_15& (0+255)
  1757  000A' EC00' F000'        	call	_put_str
  1758                           
  1759                           ;measure.c: 206: var = measure_freq();
  1760  000E' EC00' F000'        	call	_measure_freq	;wreg free
  1761  0012' C038' F031'        	movff	?_measure_freq,measure_inductance@var
  1762  0016' C039' F032'        	movff	?_measure_freq+1,measure_inductance@var+1
  1763                           
  1764                           ;measure.c: 208: F3 = (double)var;
  1765  001A' C031' F03D'        	movff	measure_inductance@var,___lwtofl@c
  1766  001E' C032' F03E'        	movff	measure_inductance@var+1,___lwtofl@c+1
  1767  0022' EC00' F000'        	call	___lwtofl	;wreg free
  1768  0026' C03D' F004'        	movff	?___lwtofl,_F3
  1769  002A' C03E' F005'        	movff	?___lwtofl+1,_F3+1
  1770  002E' C03F' F006'        	movff	?___lwtofl+2,_F3+2
  1771  0032' C040' F007'        	movff	?___lwtofl+3,_F3+3
  1772                           
  1773                           ;measure.c: 209: if(F3 > F1)
  1774  0036' EC00' F000'        	call	PL6	;call to abstracted procedure
  1775  003A' EC00' F000'        	call	___flge	;wreg free
  1776  003E' E208               	bc	l3950
  1777                           
  1778                           ;measure.c: 210: F3 = F1;
  1779  0040' C025' F004'        	movff	_F1,_F3
  1780  0044' C026' F005'        	movff	_F1+1,_F3+1
  1781  0048' C027' F006'        	movff	_F1+2,_F3+2
  1782  004C' C028' F007'        	movff	_F1+3,_F3+3
  1783  0050'                    l3950:
  1784                           
  1785                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1786  0050' C000' F03E'        	movff	_F2,___flsub@f2
  1787  0054' C001' F03F'        	movff	_F2+1,___flsub@f2+1
  1788  0058' C002' F040'        	movff	_F2+2,___flsub@f2+2
  1789  005C' C003' F041'        	movff	_F2+3,___flsub@f2+3
  1790  0060' C000' F03A'        	movff	_F2,___flsub@f1
  1791  0064' C001' F03B'        	movff	_F2+1,___flsub@f1+1
  1792  0068' C002' F03C'        	movff	_F2+2,___flsub@f1+2
  1793  006C' C003' F03D'        	movff	_F2+3,___flsub@f1+3
  1794  0070' EC00' F000'        	call	___flsub	;wreg free
  1795  0074' C03A' F014'        	movff	?___flsub,_measure_inductance$1045
  1796  0078' C03B' F015'        	movff	?___flsub+1,_measure_inductance$1045+1
  1797  007C' C03C' F016'        	movff	?___flsub+2,_measure_inductance$1045+2
  1798  0080' C03D' F017'        	movff	?___flsub+3,_measure_inductance$1045+3
  1799                           
  1800                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1801  0084' C014' F03E'        	movff	_measure_inductance$1045,___flsub@f2
  1802  0088' C015' F03F'        	movff	_measure_inductance$1045+1,___flsub@f2+1
  1803  008C' C016' F040'        	movff	_measure_inductance$1045+2,___flsub@f2+2
  1804  0090' C017' F041'        	movff	_measure_inductance$1045+3,___flsub@f2+3
  1805  0094' D9CA               	call	PL2	;call to abstracted procedure
  1806  0096' EC00' F000'        	call	___flmul	;wreg free
  1807  009A' C01F' F03A'        	movff	?___flmul,___flsub@f1
  1808  009E' C020' F03B'        	movff	?___flmul+1,___flsub@f1+1
  1809  00A2' C021' F03C'        	movff	?___flmul+2,___flsub@f1+2
  1810  00A6' C022' F03D'        	movff	?___flmul+3,___flsub@f1+3
  1811  00AA' EC00' F000'        	call	___flsub	;wreg free
  1812  00AE' C03A' F025'        	movff	?___flsub,_measure_inductance$1046
  1813  00B2' C03B' F026'        	movff	?___flsub+1,_measure_inductance$1046+1
  1814  00B6' C03C' F027'        	movff	?___flsub+2,_measure_inductance$1046+2
  1815  00BA' C03D' F028'        	movff	?___flsub+3,_measure_inductance$1046+3
  1816                           
  1817                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1818  00BE' EC00' F000'        	call	PL4	;call to abstracted procedure
  1819  00C2' EC00' F000'        	call	___flmul	;wreg free
  1820  00C6' C01F' F03E'        	movff	?___flmul,___flsub@f2
  1821  00CA' C020' F03F'        	movff	?___flmul+1,___flsub@f2+1
  1822  00CE' C021' F040'        	movff	?___flmul+2,___flsub@f2+2
  1823  00D2' C022' F041'        	movff	?___flmul+3,___flsub@f2+3
  1824  00D6' D9A9               	call	PL2	;call to abstracted procedure
  1825  00D8' EC00' F000'        	call	___flmul	;wreg free
  1826  00DC' C01F' F03A'        	movff	?___flmul,___flsub@f1
  1827  00E0' C020' F03B'        	movff	?___flmul+1,___flsub@f1+1
  1828  00E4' C021' F03C'        	movff	?___flmul+2,___flsub@f1+2
  1829  00E8' C022' F03D'        	movff	?___flmul+3,___flsub@f1+3
  1830  00EC' EC00' F000'        	call	___flsub	;wreg free
  1831  00F0' C03A' F029'        	movff	?___flsub,_measure_inductance$1047
  1832  00F4' C03B' F02A'        	movff	?___flsub+1,_measure_inductance$1047+1
  1833  00F8' C03C' F02B'        	movff	?___flsub+2,_measure_inductance$1047+2
  1834  00FC' C03D' F02C'        	movff	?___flsub+3,_measure_inductance$1047+3
  1835                           
  1836                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1837  0100' C025' F023'        	movff	_measure_inductance$1046,___flmul@f2
  1838  0104' C026' F024'        	movff	_measure_inductance$1046+1,___flmul@f2+1
  1839  0108' C027' F025'        	movff	_measure_inductance$1046+2,___flmul@f2+2
  1840  010C' C028' F026'        	movff	_measure_inductance$1046+3,___flmul@f2+3
  1841  0110' C029' F01F'        	movff	_measure_inductance$1047,___flmul@f1
  1842  0114' C02A' F020'        	movff	_measure_inductance$1047+1,___flmul@f1+1
  1843  0118' C02B' F021'        	movff	_measure_inductance$1047+2,___flmul@f1+2
  1844  011C' C02C' F022'        	movff	_measure_inductance$1047+3,___flmul@f1+3
  1845  0120' EC00' F000'        	call	___flmul	;wreg free
  1846  0124' C01F' F02D'        	movff	?___flmul,_measure_inductance$1048
  1847  0128' C020' F02E'        	movff	?___flmul+1,_measure_inductance$1048+1
  1848  012C' C021' F02F'        	movff	?___flmul+2,_measure_inductance$1048+2
  1849  0130' C022' F030'        	movff	?___flmul+3,_measure_inductance$1048+3
  1850                           
  1851                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1852  0134' C02D' F01F'        	movff	_measure_inductance$1048,___flmul@f1
  1853  0138' C02E' F020'        	movff	_measure_inductance$1048+1,___flmul@f1+1
  1854  013C' C02F' F021'        	movff	_measure_inductance$1048+2,___flmul@f1+2
  1855  0140' C030' F022'        	movff	_measure_inductance$1048+3,___flmul@f1+3
  1856  0144' 0E00               	movlw	0
  1857  0146' 6E23'              	movwf	___flmul@f2,c
  1858  0148' 0E40               	movlw	64
  1859  014A' 6E24'              	movwf	___flmul@f2+1,c
  1860  014C' 0E1C               	movlw	28
  1861  014E' 6E25'              	movwf	___flmul@f2+2,c
  1862  0150' 0E46               	movlw	70
  1863  0152' 6E26'              	movwf	___flmul@f2+3,c
  1864  0154' EC00' F000'        	call	___flmul	;wreg free
  1865  0158' C01F' F00C'        	movff	?___flmul,measure_inductance@numerator
  1866  015C' C020' F00D'        	movff	?___flmul+1,measure_inductance@numerator+1
  1867  0160' C021' F00E'        	movff	?___flmul+2,measure_inductance@numerator+2
  1868  0164' C022' F00F'        	movff	?___flmul+3,measure_inductance@numerator+3
  1869                           
  1870                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1871  0168' D960               	call	PL2	;call to abstracted procedure
  1872  016A' EC00' F000'        	call	___flmul	;wreg free
  1873  016E' C01F' F018'        	movff	?___flmul,_measure_inductance$1049
  1874  0172' C020' F019'        	movff	?___flmul+1,_measure_inductance$1049+1
  1875  0176' C021' F01A'        	movff	?___flmul+2,_measure_inductance$1049+2
  1876  017A' C022' F01B'        	movff	?___flmul+3,_measure_inductance$1049+3
  1877                           
  1878                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1879  017E' C000' F023'        	movff	_F2,___flmul@f2
  1880  0182' C001' F024'        	movff	_F2+1,___flmul@f2+1
  1881  0186' C002' F025'        	movff	_F2+2,___flmul@f2+2
  1882  018A' C003' F026'        	movff	_F2+3,___flmul@f2+3
  1883  018E' C018' F01F'        	movff	_measure_inductance$1049,___flmul@f1
  1884  0192' C019' F020'        	movff	_measure_inductance$1049+1,___flmul@f1+1
  1885  0196' C01A' F021'        	movff	_measure_inductance$1049+2,___flmul@f1+2
  1886  019A' C01B' F022'        	movff	_measure_inductance$1049+3,___flmul@f1+3
  1887  019E' EC00' F000'        	call	___flmul	;wreg free
  1888  01A2' C01F' F025'        	movff	?___flmul,_measure_inductance$1046
  1889  01A6' C020' F026'        	movff	?___flmul+1,_measure_inductance$1046+1
  1890  01AA' C021' F027'        	movff	?___flmul+2,_measure_inductance$1046+2
  1891  01AE' C022' F028'        	movff	?___flmul+3,_measure_inductance$1046+3
  1892                           
  1893                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1894  01B2' C000' F023'        	movff	_F2,___flmul@f2
  1895  01B6' C001' F024'        	movff	_F2+1,___flmul@f2+1
  1896  01BA' C002' F025'        	movff	_F2+2,___flmul@f2+2
  1897  01BE' C003' F026'        	movff	_F2+3,___flmul@f2+3
  1898  01C2' C025' F01F'        	movff	_measure_inductance$1046,___flmul@f1
  1899  01C6' C026' F020'        	movff	_measure_inductance$1046+1,___flmul@f1+1
  1900  01CA' C027' F021'        	movff	_measure_inductance$1046+2,___flmul@f1+2
  1901  01CE' C028' F022'        	movff	_measure_inductance$1046+3,___flmul@f1+3
  1902  01D2' EC00' F000'        	call	___flmul	;wreg free
  1903  01D6' C01F' F029'        	movff	?___flmul,_measure_inductance$1047
  1904  01DA' C020' F02A'        	movff	?___flmul+1,_measure_inductance$1047+1
  1905  01DE' C021' F02B'        	movff	?___flmul+2,_measure_inductance$1047+2
  1906  01E2' C022' F02C'        	movff	?___flmul+3,_measure_inductance$1047+3
  1907                           
  1908                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1909  01E6' C004' F023'        	movff	_F3,___flmul@f2
  1910  01EA' C005' F024'        	movff	_F3+1,___flmul@f2+1
  1911  01EE' C006' F025'        	movff	_F3+2,___flmul@f2+2
  1912  01F2' C007' F026'        	movff	_F3+3,___flmul@f2+3
  1913  01F6' C029' F01F'        	movff	_measure_inductance$1047,___flmul@f1
  1914  01FA' C02A' F020'        	movff	_measure_inductance$1047+1,___flmul@f1+1
  1915  01FE' C02B' F021'        	movff	_measure_inductance$1047+2,___flmul@f1+2
  1916  0202' C02C' F022'        	movff	_measure_inductance$1047+3,___flmul@f1+3
  1917  0206' EC00' F000'        	call	___flmul	;wreg free
  1918  020A' C01F' F02D'        	movff	?___flmul,_measure_inductance$1048
  1919  020E' C020' F02E'        	movff	?___flmul+1,_measure_inductance$1048+1
  1920  0212' C021' F02F'        	movff	?___flmul+2,_measure_inductance$1048+2
  1921  0216' C022' F030'        	movff	?___flmul+3,_measure_inductance$1048+3
  1922                           
  1923                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1924  021A' C004' F023'        	movff	_F3,___flmul@f2
  1925  021E' C005' F024'        	movff	_F3+1,___flmul@f2+1
  1926  0222' C006' F025'        	movff	_F3+2,___flmul@f2+2
  1927  0226' C007' F026'        	movff	_F3+3,___flmul@f2+3
  1928  022A' C02D' F01F'        	movff	_measure_inductance$1048,___flmul@f1
  1929  022E' C02E' F020'        	movff	_measure_inductance$1048+1,___flmul@f1+1
  1930  0232' C02F' F021'        	movff	_measure_inductance$1048+2,___flmul@f1+2
  1931  0236' C030' F022'        	movff	_measure_inductance$1048+3,___flmul@f1+3
  1932  023A' EC00' F000'        	call	___flmul	;wreg free
  1933  023E' C01F' F01C'        	movff	?___flmul,_measure_inductance$1050
  1934  0242' C020' F01D'        	movff	?___flmul+1,_measure_inductance$1050+1
  1935  0246' C021' F01E'        	movff	?___flmul+2,_measure_inductance$1050+2
  1936  024A' C022' F01F'        	movff	?___flmul+3,_measure_inductance$1050+3
  1937                           
  1938                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1939  024E' C000' F023'        	movff	_CCal,___flmul@f2
  1940  0252' C001' F024'        	movff	_CCal+1,___flmul@f2+1
  1941  0256' C002' F025'        	movff	_CCal+2,___flmul@f2+2
  1942  025A' C003' F026'        	movff	_CCal+3,___flmul@f2+3
  1943  025E' C01C' F01F'        	movff	_measure_inductance$1050,___flmul@f1
  1944  0262' C01D' F020'        	movff	_measure_inductance$1050+1,___flmul@f1+1
  1945  0266' C01E' F021'        	movff	_measure_inductance$1050+2,___flmul@f1+2
  1946  026A' C01F' F022'        	movff	_measure_inductance$1050+3,___flmul@f1+3
  1947  026E' EC00' F000'        	call	___flmul	;wreg free
  1948  0272' C01F' F020'        	movff	?___flmul,_measure_inductance$1051
  1949  0276' C020' F021'        	movff	?___flmul+1,_measure_inductance$1051+1
  1950  027A' C021' F022'        	movff	?___flmul+2,_measure_inductance$1051+2
  1951  027E' C022' F023'        	movff	?___flmul+3,_measure_inductance$1051+3
  1952                           
  1953                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1954  0282' C020' F01F'        	movff	_measure_inductance$1051,___flmul@f1
  1955  0286' C021' F020'        	movff	_measure_inductance$1051+1,___flmul@f1+1
  1956  028A' C022' F021'        	movff	_measure_inductance$1051+2,___flmul@f1+2
  1957  028E' C023' F022'        	movff	_measure_inductance$1051+3,___flmul@f1+3
  1958  0292' 0EE6               	movlw	230
  1959  0294' 6E23'              	movwf	___flmul@f2,c
  1960  0296' 0EE9               	movlw	233
  1961  0298' 6E24'              	movwf	___flmul@f2+1,c
  1962  029A' 0E1D               	movlw	29
  1963  029C' 6E25'              	movwf	___flmul@f2+2,c
  1964  029E' 0E42               	movlw	66
  1965  02A0' 6E26'              	movwf	___flmul@f2+3,c
  1966  02A2' EC00' F000'        	call	___flmul	;wreg free
  1967  02A6' C01F' F010'        	movff	?___flmul,measure_inductance@denominator
  1968  02AA' C020' F011'        	movff	?___flmul+1,measure_inductance@denominator+1
  1969  02AE' C021' F012'        	movff	?___flmul+2,measure_inductance@denominator+2
  1970  02B2' C022' F013'        	movff	?___flmul+3,measure_inductance@denominator+3
  1971                           
  1972                           ;measure.c: 216: Lin = (numerator / denominator) * 1e+15l;
  1973  02B6' C010' F014'        	movff	measure_inductance@denominator,___fldiv@f2
  1974  02BA' C011' F015'        	movff	measure_inductance@denominator+1,___fldiv@f2+1
  1975  02BE' C012' F016'        	movff	measure_inductance@denominator+2,___fldiv@f2+2
  1976  02C2' C013' F017'        	movff	measure_inductance@denominator+3,___fldiv@f2+3
  1977  02C6' C00C' F010'        	movff	measure_inductance@numerator,___fldiv@f1
  1978  02CA' C00D' F011'        	movff	measure_inductance@numerator+1,___fldiv@f1+1
  1979  02CE' C00E' F012'        	movff	measure_inductance@numerator+2,___fldiv@f1+2
  1980  02D2' C00F' F013'        	movff	measure_inductance@numerator+3,___fldiv@f1+3
  1981  02D6' EC00' F000'        	call	___fldiv	;wreg free
  1982  02DA' C010' F01F'        	movff	?___fldiv,___flmul@f1
  1983  02DE' C011' F020'        	movff	?___fldiv+1,___flmul@f1+1
  1984  02E2' C012' F021'        	movff	?___fldiv+2,___flmul@f1+2
  1985  02E6' C013' F022'        	movff	?___fldiv+3,___flmul@f1+3
  1986  02EA' 0EA9               	movlw	169
  1987  02EC' 6E23'              	movwf	___flmul@f2,c
  1988  02EE' 0E5F               	movlw	95
  1989  02F0' 6E24'              	movwf	___flmul@f2+1,c
  1990  02F2' 0E63               	movlw	99
  1991  02F4' 6E25'              	movwf	___flmul@f2+2,c
  1992  02F6' 0E58               	movlw	88
  1993  02F8' 6E26'              	movwf	___flmul@f2+3,c
  1994  02FA' EC00' F000'        	call	___flmul	;wreg free
  1995  02FE' C01F' F033'        	movff	?___flmul,measure_inductance@Lin
  1996  0302' C020' F034'        	movff	?___flmul+1,measure_inductance@Lin+1
  1997  0306' C021' F035'        	movff	?___flmul+2,measure_inductance@Lin+2
  1998  030A' C022' F036'        	movff	?___flmul+3,measure_inductance@Lin+3
  1999                           
  2000                           ;measure.c: 218: if(Lin > 999) {
  2001  030E' EC00' F000'        	call	PL32	;call to abstracted procedure
  2002  0312' C033' F00A'        	movff	measure_inductance@Lin,___flge@ff2
  2003  0316' C034' F00B'        	movff	measure_inductance@Lin+1,___flge@ff2+1
  2004  031A' C035' F00C'        	movff	measure_inductance@Lin+2,___flge@ff2+2
  2005  031E' C036' F00D'        	movff	measure_inductance@Lin+3,___flge@ff2+3
  2006  0322' EC00' F000'        	call	___flge	;wreg free
  2007  0326' E252               	bc	l3968
  2008                           
  2009                           ;measure.c: 219: if(Lin > (999e+03l)) {
  2010  0328' EC00' F000'        	call	PL22	;call to abstracted procedure
  2011  032C' C033' F00A'        	movff	measure_inductance@Lin,___flge@ff2
  2012  0330' C034' F00B'        	movff	measure_inductance@Lin+1,___flge@ff2+1
  2013  0334' C035' F00C'        	movff	measure_inductance@Lin+2,___flge@ff2+2
  2014  0338' C036' F00D'        	movff	measure_inductance@Lin+3,___flge@ff2+3
  2015  033C' EC00' F000'        	call	___flge	;wreg free
  2016  0340' E233               	bc	l3964
  2017                           
  2018                           ;measure.c: 220: if(Lin > (999e+06l)) {
  2019  0342' EC00' F000'        	call	PL14	;call to abstracted procedure
  2020  0346' C033' F00A'        	movff	measure_inductance@Lin,___flge@ff2
  2021  034A' C034' F00B'        	movff	measure_inductance@Lin+1,___flge@ff2+1
  2022  034E' C035' F00C'        	movff	measure_inductance@Lin+2,___flge@ff2+2
  2023  0352' C036' F00D'        	movff	measure_inductance@Lin+3,___flge@ff2+3
  2024  0356' EC00' F000'        	call	___flge	;wreg free
  2025  035A' E217               	bc	l3960
  2026                           
  2027                           ;measure.c: 221: Lin = Lin / (1e+09l);
  2028  035C' C033' F010'        	movff	measure_inductance@Lin,___fldiv@f1
  2029  0360' C034' F011'        	movff	measure_inductance@Lin+1,___fldiv@f1+1
  2030  0364' C035' F012'        	movff	measure_inductance@Lin+2,___fldiv@f1+2
  2031  0368' C036' F013'        	movff	measure_inductance@Lin+3,___fldiv@f1+3
  2032  036C' EC00' F000'        	call	PL20	;call to abstracted procedure
  2033  0370' EC00' F000'        	call	___fldiv	;wreg free
  2034  0374' C010' F033'        	movff	?___fldiv,measure_inductance@Lin
  2035  0378' C011' F034'        	movff	?___fldiv+1,measure_inductance@Lin+1
  2036  037C' C012' F035'        	movff	?___fldiv+2,measure_inductance@Lin+2
  2037  0380' C013' F036'        	movff	?___fldiv+3,measure_inductance@Lin+3
  2038                           
  2039                           ;measure.c: 222: unit = 0;
  2040  0384' 0100               	movlb	0	; () banked
  2041  0386' 6B00'              	clrf	measure_inductance@unit& (0+255),b
  2042                           
  2043                           ;measure.c: 223: } else {
  2044  0388' D024               	goto	l3970
  2045  038A'                    l3960:
  2046                           
  2047                           ;measure.c: 224: Lin = Lin / (1e+06l);
  2048  038A' D860               	call	PL8	;call to abstracted procedure
  2049  038C' EC00' F000'        	call	PL34	;call to abstracted procedure
  2050  0390' EC00' F000'        	call	___fldiv	;wreg free
  2051  0394' C010' F033'        	movff	?___fldiv,measure_inductance@Lin
  2052  0398' C011' F034'        	movff	?___fldiv+1,measure_inductance@Lin+1
  2053  039C' C012' F035'        	movff	?___fldiv+2,measure_inductance@Lin+2
  2054  03A0' C013' F036'        	movff	?___fldiv+3,measure_inductance@Lin+3
  2055                           
  2056                           ;measure.c: 225: unit = 1;
  2057  03A4' 0E01               	movlw	1
  2058  03A6' D013               	goto	L1
  2059  03A8'                    l3964:
  2060                           
  2061                           ;measure.c: 228: Lin = Lin / 1e+03l;
  2062  03A8' D851               	call	PL8	;call to abstracted procedure
  2063  03AA' 6E15'              	movwf	___fldiv@f2+1,c
  2064  03AC' 0E7A               	movlw	122
  2065  03AE' 6E16'              	movwf	___fldiv@f2+2,c
  2066  03B0' 0E44               	movlw	68
  2067  03B2' 6E17'              	movwf	___fldiv@f2+3,c
  2068  03B4' EC00' F000'        	call	___fldiv	;wreg free
  2069  03B8' C010' F033'        	movff	?___fldiv,measure_inductance@Lin
  2070  03BC' C011' F034'        	movff	?___fldiv+1,measure_inductance@Lin+1
  2071  03C0' C012' F035'        	movff	?___fldiv+2,measure_inductance@Lin+2
  2072  03C4' C013' F036'        	movff	?___fldiv+3,measure_inductance@Lin+3
  2073                           
  2074                           ;measure.c: 229: unit = 2;
  2075  03C8' 0E02               	movlw	2
  2076  03CA' D001               	goto	L1
  2077  03CC'                    l3968:
  2078                           
  2079                           ;measure.c: 232: unit = 3;
  2080  03CC' 0E03               	movlw	3
  2081  03CE'                    L1:
  2082  03CE' 0100               	movlb	0	; () banked
  2083  03D0' 6F00'              	movwf	measure_inductance@unit& (0+255),b
  2084  03D2'                    l3970:
  2085                           
  2086                           ; BSR set to: 0
  2087                           ;measure.c: 234: Lin = Lin * 100;
  2088  03D2' C033' F01F'        	movff	measure_inductance@Lin,___flmul@f1
  2089  03D6' C034' F020'        	movff	measure_inductance@Lin+1,___flmul@f1+1
  2090  03DA' C035' F021'        	movff	measure_inductance@Lin+2,___flmul@f1+2
  2091  03DE' C036' F022'        	movff	measure_inductance@Lin+3,___flmul@f1+3
  2092  03E2' EC00' F000'        	call	PL28	;call to abstracted procedure
  2093  03E6' EC00' F000'        	call	___flmul	;wreg free
  2094  03EA' C01F' F033'        	movff	?___flmul,measure_inductance@Lin
  2095  03EE' C020' F034'        	movff	?___flmul+1,measure_inductance@Lin+1
  2096  03F2' C021' F035'        	movff	?___flmul+2,measure_inductance@Lin+2
  2097  03F6' C022' F036'        	movff	?___flmul+3,measure_inductance@Lin+3
  2098                           
  2099                           ;measure.c: 235: var = (uint16_t)Lin;
  2100  03FA' C033' F004'        	movff	measure_inductance@Lin,___fltol@f1
  2101  03FE' C034' F005'        	movff	measure_inductance@Lin+1,___fltol@f1+1
  2102  0402' C035' F006'        	movff	measure_inductance@Lin+2,___fltol@f1+2
  2103  0406' C036' F007'        	movff	measure_inductance@Lin+3,___fltol@f1+3
  2104  040A' EC00' F000'        	call	___fltol	;wreg free
  2105  040E' C004' F031'        	movff	?___fltol,measure_inductance@var
  2106  0412' C005' F032'        	movff	?___fltol+1,measure_inductance@var+1
  2107                           
  2108                           ; BSR set to: 0
  2109                           ;measure.c: 237: print_reading(var);
  2110  0416' C031' F038'        	movff	measure_inductance@var,print_reading@measurement
  2111  041A' C032' F039'        	movff	measure_inductance@var+1,print_reading@measurement+1
  2112  041E' EC00' F000'        	call	_print_reading	;wreg free
  2113                           
  2114                           ;measure.c: 238: print_unit(unit);
  2115  0422' 0100               	movlb	0	; () banked
  2116  0424' 5100'              	movf	measure_inductance@unit& (0+255),w,b
  2117  0426' EF00' F000'        	goto	_print_unit
  2118  042A'                    __end_of_measure_inductance:
  2119                           	opt stack 0
  2120  042A'                    PL2:
  2121                           	opt stack 24
  2122  042A' C025' F023'        	movff	_F1,___flmul@f2
  2123  042E' C026' F024'        	movff	_F1+1,___flmul@f2+1
  2124  0432' C027' F025'        	movff	_F1+2,___flmul@f2+2
  2125  0436' C028' F026'        	movff	_F1+3,___flmul@f2+3
  2126  043A' C025' F01F'        	movff	_F1,___flmul@f1
  2127  043E' C026' F020'        	movff	_F1+1,___flmul@f1+1
  2128  0442' C027' F021'        	movff	_F1+2,___flmul@f1+2
  2129  0446' C028' F022'        	movff	_F1+3,___flmul@f1+3
  2130  044A' 0012               	return	
  2131  044C'                    __end_ofPL2:
  2132                           	opt stack 0
  2133  044C'                    PL8:
  2134                           	opt stack 24
  2135  044C' C033' F010'        	movff	measure_inductance@Lin,___fldiv@f1
  2136  0450' C034' F011'        	movff	measure_inductance@Lin+1,___fldiv@f1+1
  2137  0454' C035' F012'        	movff	measure_inductance@Lin+2,___fldiv@f1+2
  2138  0458' C036' F013'        	movff	measure_inductance@Lin+3,___fldiv@f1+3
  2139  045C' 0E00               	movlw	0
  2140  045E' 6E14'              	movwf	___fldiv@f2,c
  2141  0460' 0C00               	retlw	0
  2142  0462'                    __end_ofPL8:
  2143                           	opt stack 0
  2144                           tblptru	equ	0xFF8
  2145                           tblptrh	equ	0xFF7
  2146                           tblptrl	equ	0xFF6
  2147                           tablat	equ	0xFF5
  2148                           prodl	equ	0xFF3
  2149                           intcon	equ	0xFF2
  2150                           intcon2	equ	0xFF1
  2151                           postinc0	equ	0xFEE
  2152                           wreg	equ	0xFE8
  2153                           postdec1	equ	0xFE5
  2154                           fsr1l	equ	0xFE1
  2155                           indf2	equ	0xFDF
  2156                           postinc2	equ	0xFDE
  2157                           postdec2	equ	0xFDD
  2158                           fsr2h	equ	0xFDA
  2159                           fsr2l	equ	0xFD9
  2160                           status	equ	0xFD8
  2161                           
  2162 ;; *************** function _measure_capacitance *****************
  2163 ;; Defined at:
  2164 ;;		line 118 in file "../../../src/measure.c"
  2165 ;; Parameters:    Size  Location     Type
  2166 ;;		None
  2167 ;; Auto vars:     Size  Location     Type
  2168 ;;  Cin             4   93[BANK0 ] unsigned char 
  2169 ;;  var             2   91[BANK0 ] unsigned int 
  2170 ;;  unit            1   90[BANK0 ] unsigned char 
  2171 ;; Return value:  Size  Location     Type
  2172 ;;		None               void
  2173 ;; Registers used:
  2174 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblp
      +tru, prodl, prodh, bsr, cstack
  2175 ;; Tracked objects:
  2176 ;;		On entry : 0/0
  2177 ;;		On exit  : 0/0
  2178 ;;		Unchanged: 0/0
  2179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2180 ;;      Params:         0       0       0       0       0       0       0       0       0
  2181 ;;      Locals:         0      19       0       0       0       0       0       0       0
  2182 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2183 ;;      Totals:         0      19       0       0       0       0       0       0       0
  2184 ;;Total ram usage:       19 bytes
  2185 ;; Hardware stack levels used:    1
  2186 ;; Hardware stack levels required when called:    7
  2187 ;; This function calls:
  2188 ;;		___fldiv
  2189 ;;		___flge
  2190 ;;		___flmul
  2191 ;;		___flsub
  2192 ;;		___fltol
  2193 ;;		___lwtofl
  2194 ;;		_format_double
  2195 ;;		_format_xint32
  2196 ;;		_lcd_gotoxy
  2197 ;;		_measure_freq
  2198 ;;		_print_reading
  2199 ;;		_print_unit
  2200 ;;		_put_str
  2201 ;;		_ser_putch
  2202 ;;		_ser_puts
  2203 ;; This function is called by:
  2204 ;;		_main
  2205 ;; This function uses a non-reentrant model
  2206 ;;
  2207                           
  2208                           	psect	text4
  2209  0000'                    __ptext4:
  2210                           	opt stack 0
  2211  0000'                    _measure_capacitance:
  2212                           	opt stack 23
  2213                           
  2214                           ;measure.c: 119: uint8_t unit;
  2215                           ;measure.c: 120: uint16_t var;
  2216                           ;measure.c: 122: double Cin;
  2217                           ;measure.c: 126: lcd_gotoxy(0, 0);
  2218                           
  2219                           ;incstack = 0
  2220  0000' 0E00               	movlw	0
  2221  0002' 6A0A'              	clrf	lcd_gotoxy@row,c
  2222  0004' EC00' F000'        	call	_lcd_gotoxy
  2223                           
  2224                           ;measure.c: 127: put_str("Capacity ");
  2225  0008' 0E00'              	movlw	STR_6& (0+255)
  2226  000A' EC00' F000'        	call	_put_str
  2227                           
  2228                           ;measure.c: 129: var = measure_freq();
  2229  000E' EC00' F000'        	call	_measure_freq	;wreg free
  2230  0012' C038' F05B'        	movff	?_measure_freq,measure_capacitance@var
  2231  0016' C039' F05C'        	movff	?_measure_freq+1,measure_capacitance@var+1
  2232                           
  2233                           ;measure.c: 131: F3 = (double)var;
  2234  001A' C05B' F03D'        	movff	measure_capacitance@var,___lwtofl@c
  2235  001E' C05C' F03E'        	movff	measure_capacitance@var+1,___lwtofl@c+1
  2236  0022' EC00' F000'        	call	___lwtofl	;wreg free
  2237  0026' C03D' F004'        	movff	?___lwtofl,_F3
  2238  002A' C03E' F005'        	movff	?___lwtofl+1,_F3+1
  2239  002E' C03F' F006'        	movff	?___lwtofl+2,_F3+2
  2240  0032' C040' F007'        	movff	?___lwtofl+3,_F3+3
  2241                           
  2242                           ;measure.c: 134: ser_puts("var=");
  2243  0036' 0E00'              	movlw	STR_7& (0+255)
  2244  0038' EC00' F000'        	call	_ser_puts
  2245                           
  2246                           ;measure.c: 135: format_xint32( var);
  2247  003C' C05B' F038'        	movff	measure_capacitance@var,format_xint32@x
  2248  0040' C05C' F039'        	movff	measure_capacitance@var+1,format_xint32@x+1
  2249  0044' 6A3A'              	clrf	format_xint32@x+2,c
  2250  0046' 6A3B'              	clrf	format_xint32@x+3,c
  2251  0048' EC00' F000'        	call	_format_xint32	;wreg free
  2252                           
  2253                           ;measure.c: 136: ser_puts("\r\nF1=");
  2254  004C' 0E00'              	movlw	STR_8& (0+255)
  2255  004E' EC00' F000'        	call	_ser_puts
  2256                           
  2257                           ;measure.c: 137: format_double( F1);
  2258  0052' C025' F03A'        	movff	_F1,format_double@num
  2259  0056' C026' F03B'        	movff	_F1+1,format_double@num+1
  2260  005A' C027' F03C'        	movff	_F1+2,format_double@num+2
  2261  005E' C028' F03D'        	movff	_F1+3,format_double@num+3
  2262  0062' EC00' F000'        	call	_format_double	;wreg free
  2263                           
  2264                           ;measure.c: 138: ser_putch(' ');
  2265  0066' 0E20               	movlw	32
  2266  0068' EC00' F000'        	call	_ser_putch
  2267                           
  2268                           ;measure.c: 139: format_xint32( *(uint32_t*)&F1);
  2269  006C' C025' F038'        	movff	_F1,format_xint32@x
  2270  0070' C026' F039'        	movff	_F1+1,format_xint32@x+1
  2271  0074' C027' F03A'        	movff	_F1+2,format_xint32@x+2
  2272  0078' C028' F03B'        	movff	_F1+3,format_xint32@x+3
  2273  007C' EC00' F000'        	call	_format_xint32	;wreg free
  2274                           
  2275                           ;measure.c: 140: ser_puts("\r\nF2=");
  2276  0080' 0E00'              	movlw	STR_9& (0+255)
  2277  0082' EC00' F000'        	call	_ser_puts
  2278                           
  2279                           ;measure.c: 141: format_double( F2);
  2280  0086' C000' F03A'        	movff	_F2,format_double@num
  2281  008A' C001' F03B'        	movff	_F2+1,format_double@num+1
  2282  008E' C002' F03C'        	movff	_F2+2,format_double@num+2
  2283  0092' C003' F03D'        	movff	_F2+3,format_double@num+3
  2284  0096' EC00' F000'        	call	_format_double	;wreg free
  2285                           
  2286                           ;measure.c: 142: ser_putch(' ');
  2287  009A' 0E20               	movlw	32
  2288  009C' EC00' F000'        	call	_ser_putch
  2289                           
  2290                           ;measure.c: 143: format_xint32( *(uint32_t*)&F2);
  2291  00A0' C000' F038'        	movff	_F2,format_xint32@x
  2292  00A4' C001' F039'        	movff	_F2+1,format_xint32@x+1
  2293  00A8' C002' F03A'        	movff	_F2+2,format_xint32@x+2
  2294  00AC' C003' F03B'        	movff	_F2+3,format_xint32@x+3
  2295  00B0' EC00' F000'        	call	_format_xint32	;wreg free
  2296                           
  2297                           ;measure.c: 144: ser_puts("\r\nF3=");
  2298  00B4' 0E00'              	movlw	STR_10& (0+255)
  2299  00B6' EC00' F000'        	call	_ser_puts
  2300                           
  2301                           ;measure.c: 145: format_double( F3);
  2302  00BA' C004' F03A'        	movff	_F3,format_double@num
  2303  00BE' C005' F03B'        	movff	_F3+1,format_double@num+1
  2304  00C2' C006' F03C'        	movff	_F3+2,format_double@num+2
  2305  00C6' C007' F03D'        	movff	_F3+3,format_double@num+3
  2306  00CA' EC00' F000'        	call	_format_double	;wreg free
  2307                           
  2308                           ;measure.c: 146: ser_putch(' ');
  2309  00CE' 0E20               	movlw	32
  2310  00D0' EC00' F000'        	call	_ser_putch
  2311                           
  2312                           ;measure.c: 147: format_xint32( *(uint32_t*)&F3);
  2313  00D4' C004' F038'        	movff	_F3,format_xint32@x
  2314  00D8' C005' F039'        	movff	_F3+1,format_xint32@x+1
  2315  00DC' C006' F03A'        	movff	_F3+2,format_xint32@x+2
  2316  00E0' C007' F03B'        	movff	_F3+3,format_xint32@x+3
  2317  00E4' EC00' F000'        	call	_format_xint32	;wreg free
  2318                           
  2319                           ;measure.c: 148: ser_puts("\r\nCCal=");
  2320  00E8' 0E00'              	movlw	STR_11& (0+255)
  2321  00EA' EC00' F000'        	call	_ser_puts
  2322                           
  2323                           ;measure.c: 149: format_double( CCal);
  2324  00EE' C000' F03A'        	movff	_CCal,format_double@num
  2325  00F2' C001' F03B'        	movff	_CCal+1,format_double@num+1
  2326  00F6' C002' F03C'        	movff	_CCal+2,format_double@num+2
  2327  00FA' C003' F03D'        	movff	_CCal+3,format_double@num+3
  2328  00FE' EC00' F000'        	call	_format_double	;wreg free
  2329                           
  2330                           ;measure.c: 150: ser_putch(' ');
  2331  0102' 0E20               	movlw	32
  2332  0104' EC00' F000'        	call	_ser_putch
  2333                           
  2334                           ;measure.c: 151: format_xint32( *(uint32_t*)&CCal);
  2335  0108' C000' F038'        	movff	_CCal,format_xint32@x
  2336  010C' C001' F039'        	movff	_CCal+1,format_xint32@x+1
  2337  0110' C002' F03A'        	movff	_CCal+2,format_xint32@x+2
  2338  0114' C003' F03B'        	movff	_CCal+3,format_xint32@x+3
  2339  0118' EC00' F000'        	call	_format_xint32	;wreg free
  2340                           
  2341                           ;measure.c: 152: ser_puts("\r\n");
  2342  011C' 0E00'              	movlw	(STR_29+3)& (0+255)
  2343  011E' EC00' F000'        	call	_ser_puts
  2344                           
  2345                           ;measure.c: 156: if(F3 > F1)
  2346  0122' D92F               	call	PL6	;call to abstracted procedure
  2347  0124' EC00' F000'        	call	___flge	;wreg free
  2348  0128' E208               	bc	l3898
  2349                           
  2350                           ;measure.c: 157: F3 = F1;
  2351  012A' C025' F004'        	movff	_F1,_F3
  2352  012E' C026' F005'        	movff	_F1+1,_F3+1
  2353  0132' C027' F006'        	movff	_F1+2,_F3+2
  2354  0136' C028' F007'        	movff	_F1+3,_F3+3
  2355  013A'                    l3898:
  2356                           
  2357                           ;measure.c: 159: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2358  013A' D912               	call	PL4	;call to abstracted procedure
  2359  013C' EC00' F000'        	call	___flmul	;wreg free
  2360  0140' C01F' F03E'        	movff	?___flmul,___flsub@f2
  2361  0144' C020' F03F'        	movff	?___flmul+1,___flsub@f2+1
  2362  0148' C021' F040'        	movff	?___flmul+2,___flsub@f2+2
  2363  014C' C022' F041'        	movff	?___flmul+3,___flsub@f2+3
  2364  0150' EC00' F000'        	call	PL2	;call to abstracted procedure
  2365  0154' EC00' F000'        	call	___flmul	;wreg free
  2366  0158' C01F' F03A'        	movff	?___flmul,___flsub@f1
  2367  015C' C020' F03B'        	movff	?___flmul+1,___flsub@f1+1
  2368  0160' C021' F03C'        	movff	?___flmul+2,___flsub@f1+2
  2369  0164' C022' F03D'        	movff	?___flmul+3,___flsub@f1+3
  2370  0168' EC00' F000'        	call	___flsub	;wreg free
  2371  016C' C03A' F04E'        	movff	?___flsub,_measure_capacitance$1042
  2372  0170' C03B' F04F'        	movff	?___flsub+1,_measure_capacitance$1042+1
  2373  0174' C03C' F050'        	movff	?___flsub+2,_measure_capacitance$1042+2
  2374  0178' C03D' F051'        	movff	?___flsub+3,_measure_capacitance$1042+3
  2375                           
  2376                           ;measure.c: 159: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2377  017C' C000' F023'        	movff	_F2,___flmul@f2
  2378  0180' C001' F024'        	movff	_F2+1,___flmul@f2+1
  2379  0184' C002' F025'        	movff	_F2+2,___flmul@f2+2
  2380  0188' C003' F026'        	movff	_F2+3,___flmul@f2+3
  2381  018C' C04E' F01F'        	movff	_measure_capacitance$1042,___flmul@f1
  2382  0190' C04F' F020'        	movff	_measure_capacitance$1042+1,___flmul@f1+1
  2383  0194' C050' F021'        	movff	_measure_capacitance$1042+2,___flmul@f1+2
  2384  0198' C051' F022'        	movff	_measure_capacitance$1042+3,___flmul@f1+3
  2385  019C' EC00' F000'        	call	___flmul	;wreg free
  2386  01A0' C01F' F052'        	movff	?___flmul,_measure_capacitance$1043
  2387  01A4' C020' F053'        	movff	?___flmul+1,_measure_capacitance$1043+1
  2388  01A8' C021' F054'        	movff	?___flmul+2,_measure_capacitance$1043+2
  2389  01AC' C022' F055'        	movff	?___flmul+3,_measure_capacitance$1043+3
  2390                           
  2391                           ;measure.c: 159: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2392  01B0' C000' F023'        	movff	_F2,___flmul@f2
  2393  01B4' C001' F024'        	movff	_F2+1,___flmul@f2+1
  2394  01B8' C002' F025'        	movff	_F2+2,___flmul@f2+2
  2395  01BC' C003' F026'        	movff	_F2+3,___flmul@f2+3
  2396  01C0' C052' F01F'        	movff	_measure_capacitance$1043,___flmul@f1
  2397  01C4' C053' F020'        	movff	_measure_capacitance$1043+1,___flmul@f1+1
  2398  01C8' C054' F021'        	movff	_measure_capacitance$1043+2,___flmul@f1+2
  2399  01CC' C055' F022'        	movff	_measure_capacitance$1043+3,___flmul@f1+3
  2400  01D0' EC00' F000'        	call	___flmul	;wreg free
  2401  01D4' C01F' F056'        	movff	?___flmul,_measure_capacitance$1044
  2402  01D8' C020' F057'        	movff	?___flmul+1,_measure_capacitance$1044+1
  2403  01DC' C021' F058'        	movff	?___flmul+2,_measure_capacitance$1044+2
  2404  01E0' C022' F059'        	movff	?___flmul+3,_measure_capacitance$1044+3
  2405                           
  2406                           ;measure.c: 159: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2407  01E4' C056' F01F'        	movff	_measure_capacitance$1044,___flmul@f1
  2408  01E8' C057' F020'        	movff	_measure_capacitance$1044+1,___flmul@f1+1
  2409  01EC' C058' F021'        	movff	_measure_capacitance$1044+2,___flmul@f1+2
  2410  01F0' C059' F022'        	movff	_measure_capacitance$1044+3,___flmul@f1+3
  2411  01F4' C000' F023'        	movff	_CCal,___flmul@f2
  2412  01F8' C001' F024'        	movff	_CCal+1,___flmul@f2+1
  2413  01FC' C002' F025'        	movff	_CCal+2,___flmul@f2+2
  2414  0200' C003' F026'        	movff	_CCal+3,___flmul@f2+3
  2415  0204' EC00' F000'        	call	___flmul	;wreg free
  2416  0208' C01F' F05D'        	movff	?___flmul,measure_capacitance@Cin
  2417  020C' C020' F05E'        	movff	?___flmul+1,measure_capacitance@Cin+1
  2418  0210' C021' F05F'        	movff	?___flmul+2,measure_capacitance@Cin+2
  2419  0214' C022' F060'        	movff	?___flmul+3,measure_capacitance@Cin+3
  2420                           
  2421                           ;measure.c: 163: ser_puts("Cin=");
  2422  0218' 0E00'              	movlw	STR_13& (0+255)
  2423  021A' EC00' F000'        	call	_ser_puts
  2424                           
  2425                           ;measure.c: 164: format_double( Cin);
  2426  021E' C05D' F03A'        	movff	measure_capacitance@Cin,format_double@num
  2427  0222' C05E' F03B'        	movff	measure_capacitance@Cin+1,format_double@num+1
  2428  0226' C05F' F03C'        	movff	measure_capacitance@Cin+2,format_double@num+2
  2429  022A' C060' F03D'        	movff	measure_capacitance@Cin+3,format_double@num+3
  2430  022E' EC00' F000'        	call	_format_double	;wreg free
  2431                           
  2432                           ;measure.c: 165: ser_putch(' ');
  2433  0232' 0E20               	movlw	32
  2434  0234' EC00' F000'        	call	_ser_putch
  2435                           
  2436                           ;measure.c: 166: format_xint32( *(uint32_t*)&Cin);
  2437  0238' C05D' F038'        	movff	measure_capacitance@Cin,format_xint32@x
  2438  023C' C05E' F039'        	movff	measure_capacitance@Cin+1,format_xint32@x+1
  2439  0240' C05F' F03A'        	movff	measure_capacitance@Cin+2,format_xint32@x+2
  2440  0244' C060' F03B'        	movff	measure_capacitance@Cin+3,format_xint32@x+3
  2441  0248' EC00' F000'        	call	_format_xint32	;wreg free
  2442                           
  2443                           ;measure.c: 167: ser_puts("\r\n");
  2444  024C' 0E00'              	movlw	(STR_29+3)& (0+255)
  2445  024E' EC00' F000'        	call	_ser_puts
  2446                           
  2447                           ;measure.c: 169: if(Cin > 999) {
  2448  0252' D8D6               	call	PL32	;call to abstracted procedure
  2449  0254' C05D' F00A'        	movff	measure_capacitance@Cin,___flge@ff2
  2450  0258' C05E' F00B'        	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2451  025C' C05F' F00C'        	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2452  0260' C060' F00D'        	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2453  0264' EC00' F000'        	call	___flge	;wreg free
  2454  0268' E24D               	bc	l3928
  2455                           
  2456                           ;measure.c: 170: if(Cin > (999e+03l)) {
  2457  026A' D8B9               	call	PL22	;call to abstracted procedure
  2458  026C' C05D' F00A'        	movff	measure_capacitance@Cin,___flge@ff2
  2459  0270' C05E' F00B'        	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2460  0274' C05F' F00C'        	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2461  0278' C060' F00D'        	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2462  027C' EC00' F000'        	call	___flge	;wreg free
  2463  0280' E22F               	bc	l3924
  2464                           
  2465                           ;measure.c: 171: if(Cin > (999e+06l)) {
  2466  0282' D89B               	call	PL14	;call to abstracted procedure
  2467  0284' C05D' F00A'        	movff	measure_capacitance@Cin,___flge@ff2
  2468  0288' C05E' F00B'        	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2469  028C' C05F' F00C'        	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2470  0290' C060' F00D'        	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2471  0294' EC00' F000'        	call	___flge	;wreg free
  2472  0298' E215               	bc	l3920
  2473                           
  2474                           ;measure.c: 172: Cin = Cin / (1e+09);
  2475  029A' C05D' F010'        	movff	measure_capacitance@Cin,___fldiv@f1
  2476  029E' C05E' F011'        	movff	measure_capacitance@Cin+1,___fldiv@f1+1
  2477  02A2' C05F' F012'        	movff	measure_capacitance@Cin+2,___fldiv@f1+2
  2478  02A6' C060' F013'        	movff	measure_capacitance@Cin+3,___fldiv@f1+3
  2479  02AA' D890               	call	PL20	;call to abstracted procedure
  2480  02AC' EC00' F000'        	call	___fldiv	;wreg free
  2481  02B0' C010' F05D'        	movff	?___fldiv,measure_capacitance@Cin
  2482  02B4' C011' F05E'        	movff	?___fldiv+1,measure_capacitance@Cin+1
  2483  02B8' C012' F05F'        	movff	?___fldiv+2,measure_capacitance@Cin+2
  2484  02BC' C013' F060'        	movff	?___fldiv+3,measure_capacitance@Cin+3
  2485                           
  2486                           ;measure.c: 173: unit = 4;
  2487  02C0' 0E04               	movlw	4
  2488  02C2' D021               	goto	L2
  2489  02C4'                    l3920:
  2490                           
  2491                           ;measure.c: 175: Cin = Cin / (1e+06);
  2492  02C4' D86F               	call	PL10	;call to abstracted procedure
  2493  02C6' D8A4               	call	PL34	;call to abstracted procedure
  2494  02C8' EC00' F000'        	call	___fldiv	;wreg free
  2495  02CC' C010' F05D'        	movff	?___fldiv,measure_capacitance@Cin
  2496  02D0' C011' F05E'        	movff	?___fldiv+1,measure_capacitance@Cin+1
  2497  02D4' C012' F05F'        	movff	?___fldiv+2,measure_capacitance@Cin+2
  2498  02D8' C013' F060'        	movff	?___fldiv+3,measure_capacitance@Cin+3
  2499                           
  2500                           ;measure.c: 176: unit = 5;
  2501  02DC' 0E05               	movlw	5
  2502  02DE' D013               	goto	L2
  2503  02E0'                    l3924:
  2504                           
  2505                           ;measure.c: 179: Cin = Cin / 1e+03;
  2506  02E0' D861               	call	PL10	;call to abstracted procedure
  2507  02E2' 6E15'              	movwf	___fldiv@f2+1,c
  2508  02E4' 0E7A               	movlw	122
  2509  02E6' 6E16'              	movwf	___fldiv@f2+2,c
  2510  02E8' 0E44               	movlw	68
  2511  02EA' 6E17'              	movwf	___fldiv@f2+3,c
  2512  02EC' EC00' F000'        	call	___fldiv	;wreg free
  2513  02F0' C010' F05D'        	movff	?___fldiv,measure_capacitance@Cin
  2514  02F4' C011' F05E'        	movff	?___fldiv+1,measure_capacitance@Cin+1
  2515  02F8' C012' F05F'        	movff	?___fldiv+2,measure_capacitance@Cin+2
  2516  02FC' C013' F060'        	movff	?___fldiv+3,measure_capacitance@Cin+3
  2517                           
  2518                           ;measure.c: 180: unit = 6;
  2519  0300' 0E06               	movlw	6
  2520  0302' D001               	goto	L2
  2521  0304'                    l3928:
  2522                           
  2523                           ;measure.c: 183: unit = 7;
  2524  0304' 0E07               	movlw	7
  2525  0306'                    L2:
  2526  0306' 0100               	movlb	0	; () banked
  2527  0308' 6F00'              	movwf	measure_capacitance@unit& (0+255),b
  2528                           
  2529                           ; BSR set to: 0
  2530                           ;measure.c: 185: Cin = Cin * 100;
  2531  030A' C05D' F01F'        	movff	measure_capacitance@Cin,___flmul@f1
  2532  030E' C05E' F020'        	movff	measure_capacitance@Cin+1,___flmul@f1+1
  2533  0312' C05F' F021'        	movff	measure_capacitance@Cin+2,___flmul@f1+2
  2534  0316' C060' F022'        	movff	measure_capacitance@Cin+3,___flmul@f1+3
  2535  031A' D86A               	call	PL28	;call to abstracted procedure
  2536  031C' EC00' F000'        	call	___flmul	;wreg free
  2537  0320' C01F' F05D'        	movff	?___flmul,measure_capacitance@Cin
  2538  0324' C020' F05E'        	movff	?___flmul+1,measure_capacitance@Cin+1
  2539  0328' C021' F05F'        	movff	?___flmul+2,measure_capacitance@Cin+2
  2540  032C' C022' F060'        	movff	?___flmul+3,measure_capacitance@Cin+3
  2541                           
  2542                           ;measure.c: 186: var = (uint16_t)Cin;
  2543  0330' C05D' F004'        	movff	measure_capacitance@Cin,___fltol@f1
  2544  0334' C05E' F005'        	movff	measure_capacitance@Cin+1,___fltol@f1+1
  2545  0338' C05F' F006'        	movff	measure_capacitance@Cin+2,___fltol@f1+2
  2546  033C' C060' F007'        	movff	measure_capacitance@Cin+3,___fltol@f1+3
  2547  0340' EC00' F000'        	call	___fltol	;wreg free
  2548  0344' C004' F05B'        	movff	?___fltol,measure_capacitance@var
  2549  0348' C005' F05C'        	movff	?___fltol+1,measure_capacitance@var+1
  2550                           
  2551                           ; BSR set to: 0
  2552                           ;measure.c: 188: print_reading(var);
  2553  034C' C05B' F038'        	movff	measure_capacitance@var,print_reading@measurement
  2554  0350' C05C' F039'        	movff	measure_capacitance@var+1,print_reading@measurement+1
  2555  0354' EC00' F000'        	call	_print_reading	;wreg free
  2556                           
  2557                           ;measure.c: 189: print_unit(unit);
  2558  0358' 0100               	movlb	0	; () banked
  2559  035A' 5100'              	movf	measure_capacitance@unit& (0+255),w,b
  2560  035C' EF00' F000'        	goto	_print_unit
  2561  0360'                    __end_of_measure_capacitance:
  2562                           	opt stack 0
  2563  0360'                    PL4:
  2564                           	opt stack 24
  2565  0360' C004' F023'        	movff	_F3,___flmul@f2
  2566  0364' C005' F024'        	movff	_F3+1,___flmul@f2+1
  2567  0368' C006' F025'        	movff	_F3+2,___flmul@f2+2
  2568  036C' C007' F026'        	movff	_F3+3,___flmul@f2+3
  2569  0370' C004' F01F'        	movff	_F3,___flmul@f1
  2570  0374' C005' F020'        	movff	_F3+1,___flmul@f1+1
  2571  0378' C006' F021'        	movff	_F3+2,___flmul@f1+2
  2572  037C' C007' F022'        	movff	_F3+3,___flmul@f1+3
  2573  0380' 0012               	return	
  2574  0382'                    __end_ofPL4:
  2575                           	opt stack 0
  2576  0382'                    PL6:
  2577                           	opt stack 24
  2578  0382' C025' F006'        	movff	_F1,___flge@ff1
  2579  0386' C026' F007'        	movff	_F1+1,___flge@ff1+1
  2580  038A' C027' F008'        	movff	_F1+2,___flge@ff1+2
  2581  038E' C028' F009'        	movff	_F1+3,___flge@ff1+3
  2582  0392' C004' F00A'        	movff	_F3,___flge@ff2
  2583  0396' C005' F00B'        	movff	_F3+1,___flge@ff2+1
  2584  039A' C006' F00C'        	movff	_F3+2,___flge@ff2+2
  2585  039E' C007' F00D'        	movff	_F3+3,___flge@ff2+3
  2586  03A2' 0012               	return	
  2587  03A4'                    __end_ofPL6:
  2588                           	opt stack 0
  2589  03A4'                    PL10:
  2590                           	opt stack 23
  2591  03A4' C05D' F010'        	movff	measure_capacitance@Cin,___fldiv@f1
  2592  03A8' C05E' F011'        	movff	measure_capacitance@Cin+1,___fldiv@f1+1
  2593  03AC' C05F' F012'        	movff	measure_capacitance@Cin+2,___fldiv@f1+2
  2594  03B0' C060' F013'        	movff	measure_capacitance@Cin+3,___fldiv@f1+3
  2595  03B4' 0E00               	movlw	0
  2596  03B6' 6E14'              	movwf	___fldiv@f2,c
  2597  03B8' 0C00               	retlw	0
  2598  03BA'                    __end_ofPL10:
  2599                           	opt stack 0
  2600  03BA'                    PL14:
  2601                           	opt stack 24
  2602  03BA' 0E1F               	movlw	31
  2603  03BC' 6E06'              	movwf	___flge@ff1,c
  2604  03BE' 0E2E               	movlw	46
  2605  03C0' 6E07'              	movwf	___flge@ff1+1,c
  2606  03C2' 0E6E               	movlw	110
  2607  03C4' 6E08'              	movwf	___flge@ff1+2,c
  2608  03C6' 0E4E               	movlw	78
  2609  03C8' 6E09'              	movwf	___flge@ff1+3,c
  2610  03CA' 0C4E               	retlw	78
  2611  03CC'                    __end_ofPL14:
  2612                           	opt stack 0
  2613  03CC'                    PL20:
  2614                           	opt stack 24
  2615  03CC' 0E28               	movlw	40
  2616  03CE' 6E14'              	movwf	___fldiv@f2,c
  2617  03D0' 0E6B               	movlw	107
  2618  03D2' 6E15'              	movwf	___fldiv@f2+1,c
  2619  03D4' 0E6E               	movlw	110
  2620  03D6' 6E16'              	movwf	___fldiv@f2+2,c
  2621  03D8' 0E4E               	movlw	78
  2622  03DA' 6E17'              	movwf	___fldiv@f2+3,c
  2623  03DC' 0C4E               	retlw	78
  2624  03DE'                    __end_ofPL20:
  2625                           	opt stack 0
  2626  03DE'                    PL22:
  2627                           	opt stack 24
  2628  03DE' 0E80               	movlw	128
  2629  03E0' 6E06'              	movwf	___flge@ff1,c
  2630  03E2' 0EE5               	movlw	229
  2631  03E4' 6E07'              	movwf	___flge@ff1+1,c
  2632  03E6' 0E73               	movlw	115
  2633  03E8' 6E08'              	movwf	___flge@ff1+2,c
  2634  03EA' 0E49               	movlw	73
  2635  03EC' 6E09'              	movwf	___flge@ff1+3,c
  2636  03EE' 0C49               	retlw	73
  2637  03F0'                    __end_ofPL22:
  2638                           	opt stack 0
  2639  03F0'                    PL28:
  2640                           	opt stack 24
  2641  03F0' 0E00               	movlw	0
  2642  03F2' 6E23'              	movwf	___flmul@f2,c
  2643  03F4' 6E24'              	movwf	___flmul@f2+1,c
  2644  03F6' 0EC8               	movlw	200
  2645  03F8' 6E25'              	movwf	___flmul@f2+2,c
  2646  03FA' 0E42               	movlw	66
  2647  03FC' 6E26'              	movwf	___flmul@f2+3,c
  2648  03FE' 0C42               	retlw	66
  2649  0400'                    __end_ofPL28:
  2650                           	opt stack 0
  2651  0400'                    PL32:
  2652                           	opt stack 24
  2653  0400' 6A06'              	clrf	___flge@ff1,c
  2654  0402' 0EC0               	movlw	192
  2655  0404' 6E07'              	movwf	___flge@ff1+1,c
  2656  0406' 0E79               	movlw	121
  2657  0408' 6E08'              	movwf	___flge@ff1+2,c
  2658  040A' 0E44               	movlw	68
  2659  040C' 6E09'              	movwf	___flge@ff1+3,c
  2660  040E' 0C44               	retlw	68
  2661  0410'                    __end_ofPL32:
  2662                           	opt stack 0
  2663  0410'                    PL34:
  2664                           	opt stack 24
  2665  0410' 0E24               	movlw	36
  2666  0412' 6E15'              	movwf	___fldiv@f2+1,c
  2667  0414' 0E74               	movlw	116
  2668  0416' 6E16'              	movwf	___fldiv@f2+2,c
  2669  0418' 0E49               	movlw	73
  2670  041A' 6E17'              	movwf	___fldiv@f2+3,c
  2671  041C' 0C49               	retlw	73
  2672  041E'                    __end_ofPL34:
  2673                           	opt stack 0
  2674                           tblptru	equ	0xFF8
  2675                           tblptrh	equ	0xFF7
  2676                           tblptrl	equ	0xFF6
  2677                           tablat	equ	0xFF5
  2678                           prodl	equ	0xFF3
  2679                           intcon	equ	0xFF2
  2680                           intcon2	equ	0xFF1
  2681                           postinc0	equ	0xFEE
  2682                           wreg	equ	0xFE8
  2683                           postdec1	equ	0xFE5
  2684                           fsr1l	equ	0xFE1
  2685                           indf2	equ	0xFDF
  2686                           postinc2	equ	0xFDE
  2687                           postdec2	equ	0xFDD
  2688                           fsr2h	equ	0xFDA
  2689                           fsr2l	equ	0xFD9
  2690                           status	equ	0xFD8
  2691                           
  2692 ;; *************** function _print_unit *****************
  2693 ;; Defined at:
  2694 ;;		line 412 in file "../../../src/print.c"
  2695 ;; Parameters:    Size  Location     Type
  2696 ;;  unit            1    wreg     unsigned char 
  2697 ;; Auto vars:     Size  Location     Type
  2698 ;;  unit            1    0[COMRAM] unsigned char 
  2699 ;; Return value:  Size  Location     Type
  2700 ;;		None               void
  2701 ;; Registers used:
  2702 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblp
      +tru, prodl, prodh, bsr, cstack
  2703 ;; Tracked objects:
  2704 ;;		On entry : F/0
  2705 ;;		On exit  : 0/0
  2706 ;;		Unchanged: 0/0
  2707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2708 ;;      Params:         0       0       0       0       0       0       0       0       0
  2709 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2710 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2711 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2712 ;;Total ram usage:        2 bytes
  2713 ;; Hardware stack levels used:    1
  2714 ;; Hardware stack levels required when called:    5
  2715 ;; This function calls:
  2716 ;;		_lcd_gotoxy
  2717 ;;		_ser_puts
  2718 ;; This function is called by:
  2719 ;;		_measure_capacitance
  2720 ;;		_measure_inductance
  2721 ;; This function uses a non-reentrant model
  2722 ;;
  2723                           
  2724                           	psect	text5
  2725  0000'                    __ptext5:
  2726                           	opt stack 0
  2727  0000'                    _print_unit:
  2728                           	opt stack 24
  2729                           
  2730                           ; BSR set to: 0
  2731                           ;print.c: 420: static const char* units[8] = {"H", "mH", "uH", "nH", "mF", "uF", "nF", "
      +                          pF"};
  2732                           ;print.c: 421: lcd_gotoxy(14, 0);
  2733                           
  2734                           ;incstack = 0
  2735  0000' 6A0A'              	clrf	lcd_gotoxy@row,c
  2736  0002' 0E0E               	movlw	14
  2737  0004' EC00' F000'        	call	_lcd_gotoxy
  2738                           
  2739                           ;print.c: 425: lcd_gotoxy(16 - (buffer.n - buffer.p), 0);
  2740  0008' 6A0A'              	clrf	lcd_gotoxy@row,c
  2741  000A' 0100               	movlb	0	; () banked
  2742  000C' 3900'              	swapf	(_buffer+16)& (0+255),w,b
  2743  000E' 0B0F               	andlw	15
  2744  0010' 6E00'              	movwf	??_print_unit& (0+255),c
  2745  0012' 5100'              	movf	(_buffer+16)& (0+255),w,b
  2746  0014' 0B0F               	andlw	15
  2747  0016' 6E00'              	movwf	(??_print_unit+1)& (0+255),c
  2748  0018' 5010'              	movf	??_print_unit,w,c
  2749  001A' 5C11'              	subwf	??_print_unit+1,w,c
  2750  001C' 0F10               	addlw	16
  2751  001E' EC00' F000'        	call	_lcd_gotoxy
  2752                           
  2753                           ;print.c: 428: ser_puts("\r\n");
  2754  0022' 0E00'              	movlw	(STR_29+3)& (0+255)
  2755  0024' EF00' F000'        	goto	_ser_puts
  2756  0028'                    __end_of_print_unit:
  2757                           	opt stack 0
  2758                           tblptru	equ	0xFF8
  2759                           tblptrh	equ	0xFF7
  2760                           tblptrl	equ	0xFF6
  2761                           tablat	equ	0xFF5
  2762                           prodl	equ	0xFF3
  2763                           intcon	equ	0xFF2
  2764                           intcon2	equ	0xFF1
  2765                           postinc0	equ	0xFEE
  2766                           wreg	equ	0xFE8
  2767                           postdec1	equ	0xFE5
  2768                           fsr1l	equ	0xFE1
  2769                           indf2	equ	0xFDF
  2770                           postinc2	equ	0xFDE
  2771                           postdec2	equ	0xFDD
  2772                           fsr2h	equ	0xFDA
  2773                           fsr2l	equ	0xFD9
  2774                           status	equ	0xFD8
  2775                           
  2776 ;; *************** function _print_reading *****************
  2777 ;; Defined at:
  2778 ;;		line 433 in file "../../../src/print.c"
  2779 ;; Parameters:    Size  Location     Type
  2780 ;;  measurement     2   56[COMRAM] unsigned int 
  2781 ;; Auto vars:     Size  Location     Type
  2782 ;;		None
  2783 ;; Return value:  Size  Location     Type
  2784 ;;		None               void
  2785 ;; Registers used:
  2786 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2787 ;; Tracked objects:
  2788 ;;		On entry : F/0
  2789 ;;		On exit  : 0/0
  2790 ;;		Unchanged: 0/0
  2791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2792 ;;      Params:         2       0       0       0       0       0       0       0       0
  2793 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2794 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2795 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2796 ;;Total ram usage:        6 bytes
  2797 ;; Hardware stack levels used:    1
  2798 ;; Hardware stack levels required when called:    5
  2799 ;; This function calls:
  2800 ;;		___lwdiv
  2801 ;;		___lwmod
  2802 ;;		_format_number
  2803 ;;		_lcd_gotoxy
  2804 ;;		_lcd_puts
  2805 ;; This function is called by:
  2806 ;;		_measure_capacitance
  2807 ;;		_measure_inductance
  2808 ;; This function uses a non-reentrant model
  2809 ;;
  2810                           
  2811                           	psect	text6
  2812  0000'                    __ptext6:
  2813                           	opt stack 0
  2814  0000'                    _print_reading:
  2815                           	opt stack 24
  2816                           
  2817                           ; BSR set to: 0
  2818                           ;print.c: 460: lcd_gotoxy(9, 0);
  2819                           
  2820                           ;incstack = 0
  2821  0000' 6A0A'              	clrf	lcd_gotoxy@row,c
  2822  0002' 0E09               	movlw	9
  2823  0004' EC00' F000'        	call	_lcd_gotoxy
  2824                           
  2825                           ;print.c: 461: lcd_puts("     ");
  2826  0008' 0E00'              	movlw	(STR_30+1)& (0+255)
  2827  000A' EC00' F000'        	call	_lcd_puts
  2828                           
  2829                           ;print.c: 462: lcd_gotoxy(9, 0);
  2830  000E' 6A0A'              	clrf	lcd_gotoxy@row,c
  2831  0010' 0E09               	movlw	9
  2832  0012' EC00' F000'        	call	_lcd_gotoxy
  2833                           
  2834                           ;print.c: 464: format_number( measurement / 100, 10, 0);
  2835  0016' C038' F006'        	movff	print_reading@measurement,___lwdiv@dividend
  2836  001A' C039' F007'        	movff	print_reading@measurement+1,___lwdiv@dividend+1
  2837  001E' 6A09'              	clrf	___lwdiv@divisor+1,c
  2838  0020' 0E64               	movlw	100
  2839  0022' 6E08'              	movwf	___lwdiv@divisor,c
  2840  0024' EC00' F000'        	call	___lwdiv	;wreg free
  2841  0028' C006' F03A'        	movff	?___lwdiv,_print_reading$1052
  2842  002C' C007' F03B'        	movff	?___lwdiv+1,_print_reading$1052+1
  2843                           
  2844                           ;print.c: 464: format_number( measurement / 100, 10, 0);
  2845  0030' C03A' F00D'        	movff	_print_reading$1052,format_number@n
  2846  0034' C03B' F00E'        	movff	_print_reading$1052+1,format_number@n+1
  2847  0038' 0E0A               	movlw	10
  2848  003A' 6E0F'              	movwf	format_number@base,c
  2849  003C' 6A10'              	clrf	format_number@pad,c
  2850  003E' EC00' F000'        	call	_format_number	;wreg free
  2851                           
  2852                           ;print.c: 466: format_number( measurement % 100, 10, 0);
  2853  0042' C038' F006'        	movff	print_reading@measurement,___lwmod@dividend
  2854  0046' C039' F007'        	movff	print_reading@measurement+1,___lwmod@dividend+1
  2855  004A' 6A09'              	clrf	___lwmod@divisor+1,c
  2856  004C' 0E64               	movlw	100
  2857  004E' 6E08'              	movwf	___lwmod@divisor,c
  2858  0050' EC00' F000'        	call	___lwmod	;wreg free
  2859  0054' C006' F03C'        	movff	?___lwmod,_print_reading$1053
  2860  0058' C007' F03D'        	movff	?___lwmod+1,_print_reading$1053+1
  2861                           
  2862                           ;print.c: 466: format_number( measurement % 100, 10, 0);
  2863  005C' C03C' F00D'        	movff	_print_reading$1053,format_number@n
  2864  0060' C03D' F00E'        	movff	_print_reading$1053+1,format_number@n+1
  2865  0064' 0E0A               	movlw	10
  2866  0066' 6E0F'              	movwf	format_number@base,c
  2867  0068' 6A10'              	clrf	format_number@pad,c
  2868  006A' EF00' F000'        	goto	_format_number	;wreg free
  2869  006E'                    __end_of_print_reading:
  2870                           	opt stack 0
  2871                           tblptru	equ	0xFF8
  2872                           tblptrh	equ	0xFF7
  2873                           tblptrl	equ	0xFF6
  2874                           tablat	equ	0xFF5
  2875                           prodl	equ	0xFF3
  2876                           intcon	equ	0xFF2
  2877                           intcon2	equ	0xFF1
  2878                           postinc0	equ	0xFEE
  2879                           wreg	equ	0xFE8
  2880                           postdec1	equ	0xFE5
  2881                           fsr1l	equ	0xFE1
  2882                           indf2	equ	0xFDF
  2883                           postinc2	equ	0xFDE
  2884                           postdec2	equ	0xFDD
  2885                           fsr2h	equ	0xFDA
  2886                           fsr2l	equ	0xFD9
  2887                           status	equ	0xFD8
  2888                           
  2889 ;; *************** function _format_xint32 *****************
  2890 ;; Defined at:
  2891 ;;		line 49 in file "../../../lib/format.c"
  2892 ;; Parameters:    Size  Location     Type
  2893 ;;  x               4   56[COMRAM] unsigned long 
  2894 ;; Auto vars:     Size  Location     Type
  2895 ;;		None
  2896 ;; Return value:  Size  Location     Type
  2897 ;;		None               void
  2898 ;; Registers used:
  2899 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2900 ;; Tracked objects:
  2901 ;;		On entry : 0/0
  2902 ;;		On exit  : 0/0
  2903 ;;		Unchanged: 0/0
  2904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2905 ;;      Params:         4       0       0       0       0       0       0       0       0
  2906 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2907 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2908 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2909 ;;Total ram usage:        4 bytes
  2910 ;; Hardware stack levels used:    1
  2911 ;; Hardware stack levels required when called:    3
  2912 ;; This function calls:
  2913 ;;		_buffer_putch
  2914 ;;		_format_number
  2915 ;; This function is called by:
  2916 ;;		_measure_capacitance
  2917 ;; This function uses a non-reentrant model
  2918 ;;
  2919                           
  2920                           	psect	text7
  2921  0000'                    __ptext7:
  2922                           	opt stack 0
  2923  0000'                    _format_xint32:
  2924                           	opt stack 26
  2925                           
  2926                           ;format.c: 50: buffer_putch('0');
  2927                           
  2928                           ;incstack = 0
  2929  0000' 0E30               	movlw	48
  2930  0002' EC00' F000'        	call	_buffer_putch
  2931                           
  2932                           ;format.c: 51: buffer_putch('x');
  2933  0006' 0E78               	movlw	120
  2934  0008' EC00' F000'        	call	_buffer_putch
  2935                           
  2936                           ;format.c: 52: format_number((uint16_t)(x >> 16), 16, -4);
  2937  000C' C03A' F00D'        	movff	format_xint32@x+2,format_number@n
  2938  0010' C03B' F00E'        	movff	format_xint32@x+3,format_number@n+1
  2939  0014' 0E10               	movlw	16
  2940  0016' 6E0F'              	movwf	format_number@base,c
  2941  0018' 0EFC               	movlw	252
  2942  001A' 6E10'              	movwf	format_number@pad,c
  2943  001C' EC00' F000'        	call	_format_number	;wreg free
  2944                           
  2945                           ;format.c: 53: format_number((uint16_t)(x & 0xffff), 16, -4);
  2946  0020' C038' F00D'        	movff	format_xint32@x,format_number@n
  2947  0024' C039' F00E'        	movff	format_xint32@x+1,format_number@n+1
  2948  0028' 0E10               	movlw	16
  2949  002A' 6E0F'              	movwf	format_number@base,c
  2950  002C' 0EFC               	movlw	252
  2951  002E' 6E10'              	movwf	format_number@pad,c
  2952  0030' EF00' F000'        	goto	_format_number	;wreg free
  2953  0034'                    __end_of_format_xint32:
  2954                           	opt stack 0
  2955                           tblptru	equ	0xFF8
  2956                           tblptrh	equ	0xFF7
  2957                           tblptrl	equ	0xFF6
  2958                           tablat	equ	0xFF5
  2959                           prodl	equ	0xFF3
  2960                           intcon	equ	0xFF2
  2961                           intcon2	equ	0xFF1
  2962                           postinc0	equ	0xFEE
  2963                           wreg	equ	0xFE8
  2964                           postdec1	equ	0xFE5
  2965                           fsr1l	equ	0xFE1
  2966                           indf2	equ	0xFDF
  2967                           postinc2	equ	0xFDE
  2968                           postdec2	equ	0xFDD
  2969                           fsr2h	equ	0xFDA
  2970                           fsr2l	equ	0xFD9
  2971                           status	equ	0xFD8
  2972                           
  2973 ;; *************** function _format_double *****************
  2974 ;; Defined at:
  2975 ;;		line 75 in file "../../../lib/format.c"
  2976 ;; Parameters:    Size  Location     Type
  2977 ;;  num             4   58[BANK0 ] unsigned long 
  2978 ;; Auto vars:     Size  Location     Type
  2979 ;;  weight          4   70[BANK0 ] unsigned long 
  2980 ;;  m               2   76[BANK0 ] short 
  2981 ;;  digit           2   74[BANK0 ] short 
  2982 ;; Return value:  Size  Location     Type
  2983 ;;		None               void
  2984 ;; Registers used:
  2985 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2986 ;; Tracked objects:
  2987 ;;		On entry : 0/0
  2988 ;;		On exit  : 0/0
  2989 ;;		Unchanged: 0/0
  2990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2991 ;;      Params:         0       4       0       0       0       0       0       0       0
  2992 ;;      Locals:         0      16       0       0       0       0       0       0       0
  2993 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2994 ;;      Totals:         0      20       0       0       0       0       0       0       0
  2995 ;;Total ram usage:       20 bytes
  2996 ;; Hardware stack levels used:    1
  2997 ;; Hardware stack levels required when called:    6
  2998 ;; This function calls:
  2999 ;;		___awtofl
  3000 ;;		___fldiv
  3001 ;;		___flge
  3002 ;;		___flmul
  3003 ;;		___flsub
  3004 ;;		___fltol
  3005 ;;		_buffer_putch
  3006 ;;		_floor
  3007 ;;		_log10
  3008 ;;		_pow
  3009 ;; This function is called by:
  3010 ;;		_measure_capacitance
  3011 ;;		_main
  3012 ;; This function uses a non-reentrant model
  3013 ;;
  3014                           
  3015                           	psect	text8
  3016  0000'                    __ptext8:
  3017                           	opt stack 0
  3018  0000'                    _format_double:
  3019                           	opt stack 23
  3020                           
  3021                           ;format.c: 76: short m = (short)log10(num);
  3022                           
  3023                           ;incstack = 0
  3024  0000' C03A' F04C'        	movff	format_double@num,log10@x
  3025  0004' C03B' F04D'        	movff	format_double@num+1,log10@x+1
  3026  0008' C03C' F04E'        	movff	format_double@num+2,log10@x+2
  3027  000C' C03D' F04F'        	movff	format_double@num+3,log10@x+3
  3028  0010' EC00' F000'        	call	_log10	;wreg free
  3029  0014' C04C' F004'        	movff	?_log10,___fltol@f1
  3030  0018' C04D' F005'        	movff	?_log10+1,___fltol@f1+1
  3031  001C' C04E' F006'        	movff	?_log10+2,___fltol@f1+2
  3032  0020' C04F' F007'        	movff	?_log10+3,___fltol@f1+3
  3033  0024' EC00' F000'        	call	___fltol	;wreg free
  3034  0028' C004' F04C'        	movff	?___fltol,format_double@m
  3035  002C' C005' F04D'        	movff	?___fltol+1,format_double@m+1
  3036                           
  3037                           ;format.c: 77: short digit;
  3038                           ;format.c: 80: while(num > 0 + 1.19209290e-07) {
  3039  0030' D099               	goto	l3800
  3040  0032'                    l3782:
  3041                           
  3042                           ;format.c: 81: double weight = pow(10.0l, m);
  3043  0032' C04C' F010'        	movff	format_double@m,___awtofl@c
  3044  0036' C04D' F011'        	movff	format_double@m+1,___awtofl@c+1
  3045  003A' EC00' F000'        	call	___awtofl	;wreg free
  3046  003E' C010' F03E'        	movff	?___awtofl,_format_double$1040
  3047  0042' C011' F03F'        	movff	?___awtofl+1,_format_double$1040+1
  3048  0046' C012' F040'        	movff	?___awtofl+2,_format_double$1040+2
  3049  004A' C013' F041'        	movff	?___awtofl+3,_format_double$1040+3
  3050                           
  3051                           ;format.c: 81: double weight = pow(10.0l, m);
  3052  004E' 0100               	movlb	0	; () banked
  3053  0050' 6B00'              	clrf	pow@x& (0+255),b
  3054  0052' 6B00'              	clrf	(pow@x+1)& (0+255),b
  3055  0054' 0E20               	movlw	32
  3056  0056' 6F00'              	movwf	(pow@x+2)& (0+255),b
  3057  0058' 0E41               	movlw	65
  3058  005A' 6F00'              	movwf	(pow@x+3)& (0+255),b
  3059  005C' C03E' F029'        	movff	_format_double$1040,pow@y
  3060  0060' C03F' F02A'        	movff	_format_double$1040+1,pow@y+1
  3061  0064' C040' F02B'        	movff	_format_double$1040+2,pow@y+2
  3062  0068' C041' F02C'        	movff	_format_double$1040+3,pow@y+3
  3063  006C' EC00' F000'        	call	_pow	;wreg free
  3064  0070' C025' F046'        	movff	?_pow,format_double@weight
  3065  0074' C026' F047'        	movff	?_pow+1,format_double@weight+1
  3066  0078' C027' F048'        	movff	?_pow+2,format_double@weight+2
  3067  007C' C028' F049'        	movff	?_pow+3,format_double@weight+3
  3068                           
  3069                           ; BSR set to: 0
  3070                           ;format.c: 82: digit = (short)floor(num / weight);
  3071  0080' C046' F014'        	movff	format_double@weight,___fldiv@f2
  3072  0084' C047' F015'        	movff	format_double@weight+1,___fldiv@f2+1
  3073  0088' C048' F016'        	movff	format_double@weight+2,___fldiv@f2+2
  3074  008C' C049' F017'        	movff	format_double@weight+3,___fldiv@f2+3
  3075  0090' C03A' F010'        	movff	format_double@num,___fldiv@f1
  3076  0094' C03B' F011'        	movff	format_double@num+1,___fldiv@f1+1
  3077  0098' C03C' F012'        	movff	format_double@num+2,___fldiv@f1+2
  3078  009C' C03D' F013'        	movff	format_double@num+3,___fldiv@f1+3
  3079  00A0' EC00' F000'        	call	___fldiv	;wreg free
  3080  00A4' C010' F010'        	movff	?___fldiv,floor@x
  3081  00A8' C011' F011'        	movff	?___fldiv+1,floor@x+1
  3082  00AC' C012' F012'        	movff	?___fldiv+2,floor@x+2
  3083  00B0' C013' F013'        	movff	?___fldiv+3,floor@x+3
  3084  00B4' EC00' F000'        	call	_floor	;wreg free
  3085  00B8' C010' F042'        	movff	?_floor,_format_double$1041
  3086  00BC' C011' F043'        	movff	?_floor+1,_format_double$1041+1
  3087  00C0' C012' F044'        	movff	?_floor+2,_format_double$1041+2
  3088  00C4' C013' F045'        	movff	?_floor+3,_format_double$1041+3
  3089                           
  3090                           ;format.c: 82: digit = (short)floor(num / weight);
  3091  00C8' C042' F004'        	movff	_format_double$1041,___fltol@f1
  3092  00CC' C043' F005'        	movff	_format_double$1041+1,___fltol@f1+1
  3093  00D0' C044' F006'        	movff	_format_double$1041+2,___fltol@f1+2
  3094  00D4' C045' F007'        	movff	_format_double$1041+3,___fltol@f1+3
  3095  00D8' EC00' F000'        	call	___fltol	;wreg free
  3096  00DC' C004' F04A'        	movff	?___fltol,format_double@digit
  3097  00E0' C005' F04B'        	movff	?___fltol+1,format_double@digit+1
  3098                           
  3099                           ; BSR set to: 0
  3100                           ;format.c: 83: num -= (digit * weight);
  3101  00E4' C03A' F03A'        	movff	format_double@num,___flsub@f1
  3102  00E8' C03B' F03B'        	movff	format_double@num+1,___flsub@f1+1
  3103  00EC' C03C' F03C'        	movff	format_double@num+2,___flsub@f1+2
  3104  00F0' C03D' F03D'        	movff	format_double@num+3,___flsub@f1+3
  3105  00F4' C046' F023'        	movff	format_double@weight,___flmul@f2
  3106  00F8' C047' F024'        	movff	format_double@weight+1,___flmul@f2+1
  3107  00FC' C048' F025'        	movff	format_double@weight+2,___flmul@f2+2
  3108  0100' C049' F026'        	movff	format_double@weight+3,___flmul@f2+3
  3109  0104' C04A' F010'        	movff	format_double@digit,___awtofl@c
  3110  0108' C04B' F011'        	movff	format_double@digit+1,___awtofl@c+1
  3111  010C' EC00' F000'        	call	___awtofl	;wreg free
  3112  0110' C010' F01F'        	movff	?___awtofl,___flmul@f1
  3113  0114' C011' F020'        	movff	?___awtofl+1,___flmul@f1+1
  3114  0118' C012' F021'        	movff	?___awtofl+2,___flmul@f1+2
  3115  011C' C013' F022'        	movff	?___awtofl+3,___flmul@f1+3
  3116  0120' EC00' F000'        	call	___flmul	;wreg free
  3117  0124' C01F' F03E'        	movff	?___flmul,___flsub@f2
  3118  0128' C020' F03F'        	movff	?___flmul+1,___flsub@f2+1
  3119  012C' C021' F040'        	movff	?___flmul+2,___flsub@f2+2
  3120  0130' C022' F041'        	movff	?___flmul+3,___flsub@f2+3
  3121  0134' EC00' F000'        	call	___flsub	;wreg free
  3122  0138' C03A' F03A'        	movff	?___flsub,format_double@num
  3123  013C' C03B' F03B'        	movff	?___flsub+1,format_double@num+1
  3124  0140' C03C' F03C'        	movff	?___flsub+2,format_double@num+2
  3125  0144' C03D' F03D'        	movff	?___flsub+3,format_double@num+3
  3126                           
  3127                           ;format.c: 84: buffer_putch((char)('0' + digit));
  3128  0148' 0100               	movlb	0	; () banked
  3129  014A' 5100'              	movf	format_double@digit& (0+255),w,b
  3130  014C' 0F30               	addlw	48
  3131  014E' EC00' F000'        	call	_buffer_putch
  3132                           
  3133                           ; BSR set to: 0
  3134                           ;format.c: 85: if(m == 0)
  3135  0152' 5100'              	movf	format_double@m& (0+255),w,b
  3136  0154' 1100'              	iorwf	(format_double@m+1)& (0+255),w,b
  3137  0156' E103               	bnz	l3798
  3138                           
  3139                           ; BSR set to: 0
  3140                           ;format.c: 86: buffer_putch('.');
  3141  0158' 0E2E               	movlw	46
  3142  015A' EC00' F000'        	call	_buffer_putch
  3143  015E'                    l3798:
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;format.c: 87: m--;
  3147  015E' 0700'              	decf	format_double@m& (0+255),f,b
  3148  0160' A0D8               	btfss	status,0,c
  3149  0162' 0700'              	decf	(format_double@m+1)& (0+255),f,b
  3150  0164'                    l3800:
  3151                           
  3152                           ; BSR set to: 0
  3153  0164' 6A06'              	clrf	___flge@ff1,c
  3154  0166' 6A07'              	clrf	___flge@ff1+1,c
  3155  0168' 6A08'              	clrf	___flge@ff1+2,c
  3156  016A' 0E34               	movlw	52
  3157  016C' 6E09'              	movwf	___flge@ff1+3,c
  3158  016E' C03A' F00A'        	movff	format_double@num,___flge@ff2
  3159  0172' C03B' F00B'        	movff	format_double@num+1,___flge@ff2+1
  3160  0176' C03C' F00C'        	movff	format_double@num+2,___flge@ff2+2
  3161  017A' C03D' F00D'        	movff	format_double@num+3,___flge@ff2+3
  3162  017E' EC00' F000'        	call	___flge	;wreg free
  3163  0182' B0D8               	btfsc	status,0,c
  3164  0184' 0012               	return		;funcret
  3165  0186' D755               	goto	l3782
  3166  0188'                    __end_of_format_double:
  3167                           	opt stack 0
  3168                           tblptru	equ	0xFF8
  3169                           tblptrh	equ	0xFF7
  3170                           tblptrl	equ	0xFF6
  3171                           tablat	equ	0xFF5
  3172                           prodl	equ	0xFF3
  3173                           intcon	equ	0xFF2
  3174                           intcon2	equ	0xFF1
  3175                           postinc0	equ	0xFEE
  3176                           wreg	equ	0xFE8
  3177                           postdec1	equ	0xFE5
  3178                           fsr1l	equ	0xFE1
  3179                           indf2	equ	0xFDF
  3180                           postinc2	equ	0xFDE
  3181                           postdec2	equ	0xFDD
  3182                           fsr2h	equ	0xFDA
  3183                           fsr2l	equ	0xFD9
  3184                           status	equ	0xFD8
  3185                           
  3186 ;; *************** function _pow *****************
  3187 ;; Defined at:
  3188 ;;		line 5 in file "/opt/microchip/xc8/v1.34/sources/common/pow.c"
  3189 ;; Parameters:    Size  Location     Type
  3190 ;;  x               4   37[BANK0 ] short 
  3191 ;;  y               4   41[BANK0 ] short 
  3192 ;; Auto vars:     Size  Location     Type
  3193 ;;  yi              4   54[BANK0 ] unsigned long 
  3194 ;;  sign            1   53[BANK0 ] unsigned char 
  3195 ;; Return value:  Size  Location     Type
  3196 ;;                  4   37[BANK0 ] unsigned char 
  3197 ;; Registers used:
  3198 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3199 ;; Tracked objects:
  3200 ;;		On entry : F/0
  3201 ;;		On exit  : F/0
  3202 ;;		Unchanged: 0/0
  3203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3204 ;;      Params:         0       8       0       0       0       0       0       0       0
  3205 ;;      Locals:         0      13       0       0       0       0       0       0       0
  3206 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3207 ;;      Totals:         0      21       0       0       0       0       0       0       0
  3208 ;;Total ram usage:       21 bytes
  3209 ;; Hardware stack levels used:    1
  3210 ;; Hardware stack levels required when called:    5
  3211 ;; This function calls:
  3212 ;;		___flge
  3213 ;;		___flmul
  3214 ;;		___flneg
  3215 ;;		___fltol
  3216 ;;		___lltofl
  3217 ;;		_exp
  3218 ;;		_log
  3219 ;; This function is called by:
  3220 ;;		_format_double
  3221 ;; This function uses a non-reentrant model
  3222 ;;
  3223                           
  3224                           	psect	text9
  3225  0000'                    __ptext9:
  3226                           	opt stack 0
  3227  0000'                    _pow:
  3228                           	opt stack 23
  3229                           
  3230                           ; BSR set to: 0
  3231                           
  3232                           ;incstack = 0
  3233  0000' 6B00'              	clrf	pow@sign& (0+255),b
  3234                           
  3235                           ; BSR set to: 0
  3236  0002' 5100'              	movf	pow@x& (0+255),w,b
  3237  0004' 1100'              	iorwf	(pow@x+1)& (0+255),w,b
  3238  0006' 1100'              	iorwf	(pow@x+2)& (0+255),w,b
  3239  0008' 1100'              	iorwf	(pow@x+3)& (0+255),w,b
  3240  000A' E114               	bnz	l3752
  3241                           
  3242                           ; BSR set to: 0
  3243  000C' 6A06'              	clrf	___flge@ff1,c
  3244  000E' 6A07'              	clrf	___flge@ff1+1,c
  3245  0010' 6A08'              	clrf	___flge@ff1+2,c
  3246  0012' 6A09'              	clrf	___flge@ff1+3,c
  3247  0014' C029' F00A'        	movff	pow@y,___flge@ff2
  3248  0018' C02A' F00B'        	movff	pow@y+1,___flge@ff2+1
  3249  001C' C02B' F00C'        	movff	pow@y+2,___flge@ff2+2
  3250  0020' C02C' F00D'        	movff	pow@y+3,___flge@ff2+3
  3251  0024' EC00' F000'        	call	___flge	;wreg free
  3252  0028' 0100               	movlb	0	; () banked
  3253  002A' 6B00'              	clrf	?_pow& (0+255),b
  3254  002C' 6B00'              	clrf	(?_pow+1)& (0+255),b
  3255  002E' 6B00'              	clrf	(?_pow+2)& (0+255),b
  3256  0030' 6B00'              	clrf	(?_pow+3)& (0+255),b
  3257  0032' 0012               	return	
  3258  0034'                    l3752:
  3259                           
  3260                           ; BSR set to: 0
  3261  0034' 5100'              	movf	pow@y& (0+255),w,b
  3262  0036' 1100'              	iorwf	(pow@y+1)& (0+255),w,b
  3263  0038' 1100'              	iorwf	(pow@y+2)& (0+255),w,b
  3264  003A' 1100'              	iorwf	(pow@y+3)& (0+255),w,b
  3265  003C' E108               	bnz	l3758
  3266                           
  3267                           ; BSR set to: 0
  3268  003E' 0E00               	movlw	0
  3269  0040' 6F00'              	movwf	?_pow& (0+255),b
  3270  0042' 6F00'              	movwf	(?_pow+1)& (0+255),b
  3271  0044' 0E80               	movlw	128
  3272  0046' 6F00'              	movwf	(?_pow+2)& (0+255),b
  3273  0048' 0E3F               	movlw	63
  3274  004A' 6F00'              	movwf	(?_pow+3)& (0+255),b
  3275  004C' 0C3F               	retlw	63
  3276  004E'                    l3758:
  3277                           
  3278                           ; BSR set to: 0
  3279  004E' AF00'              	btfss	(pow@x+3)& (0+255),7,b
  3280  0050' D043               	goto	l3768
  3281                           
  3282                           ; BSR set to: 0
  3283  0052' C029' F004'        	movff	pow@y,___fltol@f1
  3284  0056' C02A' F005'        	movff	pow@y+1,___fltol@f1+1
  3285  005A' C02B' F006'        	movff	pow@y+2,___fltol@f1+2
  3286  005E' C02C' F007'        	movff	pow@y+3,___fltol@f1+3
  3287  0062' EC00' F000'        	call	___fltol	;wreg free
  3288  0066' C004' F036'        	movff	?___fltol,pow@yi
  3289  006A' C005' F037'        	movff	?___fltol+1,pow@yi+1
  3290  006E' C006' F038'        	movff	?___fltol+2,pow@yi+2
  3291  0072' C007' F039'        	movff	?___fltol+3,pow@yi+3
  3292  0076' C036' F010'        	movff	pow@yi,___lltofl@c
  3293  007A' C037' F011'        	movff	pow@yi+1,___lltofl@c+1
  3294  007E' C038' F012'        	movff	pow@yi+2,___lltofl@c+2
  3295  0082' C039' F013'        	movff	pow@yi+3,___lltofl@c+3
  3296  0086' EC00' F000'        	call	___lltofl	;wreg free
  3297  008A' 0100               	movlb	0	; () banked
  3298  008C' 5100'              	movf	pow@y& (0+255),w,b
  3299  008E' 1810'              	xorwf	?___lltofl,w,c
  3300  0090' E109               	bnz	u3230
  3301  0092' 5100'              	movf	(pow@y+1)& (0+255),w,b
  3302  0094' 1811'              	xorwf	?___lltofl+1,w,c
  3303  0096' E106               	bnz	u3230
  3304  0098' 5100'              	movf	(pow@y+2)& (0+255),w,b
  3305  009A' 1812'              	xorwf	?___lltofl+2,w,c
  3306  009C' E103               	bnz	u3230
  3307  009E' 5100'              	movf	(pow@y+3)& (0+255),w,b
  3308  00A0' 1813'              	xorwf	?___lltofl+3,w,c
  3309  00A2' E005               	bz	l3764
  3310  00A4'                    u3230:
  3311                           
  3312                           ; BSR set to: 0
  3313  00A4' 6B00'              	clrf	?_pow& (0+255),b
  3314  00A6' 6B00'              	clrf	(?_pow+1)& (0+255),b
  3315  00A8' 6B00'              	clrf	(?_pow+2)& (0+255),b
  3316  00AA' 6B00'              	clrf	(?_pow+3)& (0+255),b
  3317  00AC' 0012               	return	
  3318  00AE'                    l3764:
  3319                           
  3320                           ; BSR set to: 0
  3321  00AE' 5100'              	movf	pow@yi& (0+255),w,b
  3322  00B0' 0B01               	andlw	1
  3323  00B2' 6F00'              	movwf	pow@sign& (0+255),b
  3324                           
  3325                           ; BSR set to: 0
  3326  00B4' C025' F006'        	movff	pow@x,___flneg@f1
  3327  00B8' C026' F007'        	movff	pow@x+1,___flneg@f1+1
  3328  00BC' C027' F008'        	movff	pow@x+2,___flneg@f1+2
  3329  00C0' C028' F009'        	movff	pow@x+3,___flneg@f1+3
  3330  00C4' EC00' F000'        	call	___flneg	;wreg free
  3331  00C8' C006' F025'        	movff	?___flneg,pow@x
  3332  00CC' C007' F026'        	movff	?___flneg+1,pow@x+1
  3333  00D0' C008' F027'        	movff	?___flneg+2,pow@x+2
  3334  00D4' C009' F028'        	movff	?___flneg+3,pow@x+3
  3335  00D8'                    l3768:
  3336                           
  3337                           ; BSR set to: 0
  3338  00D8' C025' F046'        	movff	pow@x,log@x
  3339  00DC' C026' F047'        	movff	pow@x+1,log@x+1
  3340  00E0' C027' F048'        	movff	pow@x+2,log@x+2
  3341  00E4' C028' F049'        	movff	pow@x+3,log@x+3
  3342  00E8' EC00' F000'        	call	_log	;wreg free
  3343  00EC' C046' F02D'        	movff	?_log,_pow$1055
  3344  00F0' C047' F02E'        	movff	?_log+1,_pow$1055+1
  3345  00F4' C048' F02F'        	movff	?_log+2,_pow$1055+2
  3346  00F8' C049' F030'        	movff	?_log+3,_pow$1055+3
  3347  00FC' C02D' F01F'        	movff	_pow$1055,___flmul@f1
  3348  0100' C02E' F020'        	movff	_pow$1055+1,___flmul@f1+1
  3349  0104' C02F' F021'        	movff	_pow$1055+2,___flmul@f1+2
  3350  0108' C030' F022'        	movff	_pow$1055+3,___flmul@f1+3
  3351  010C' C029' F023'        	movff	pow@y,___flmul@f2
  3352  0110' C02A' F024'        	movff	pow@y+1,___flmul@f2+1
  3353  0114' C02B' F025'        	movff	pow@y+2,___flmul@f2+2
  3354  0118' C02C' F026'        	movff	pow@y+3,___flmul@f2+3
  3355  011C' EC00' F000'        	call	___flmul	;wreg free
  3356  0120' C01F' F031'        	movff	?___flmul,_pow$1056
  3357  0124' C020' F032'        	movff	?___flmul+1,_pow$1056+1
  3358  0128' C021' F033'        	movff	?___flmul+2,_pow$1056+2
  3359  012C' C022' F034'        	movff	?___flmul+3,_pow$1056+3
  3360  0130' C031' F01A'        	movff	_pow$1056,exp@x
  3361  0134' C032' F01B'        	movff	_pow$1056+1,exp@x+1
  3362  0138' C033' F01C'        	movff	_pow$1056+2,exp@x+2
  3363  013C' C034' F01D'        	movff	_pow$1056+3,exp@x+3
  3364  0140' EC00' F000'        	call	_exp	;wreg free
  3365  0144' C01A' F025'        	movff	?_exp,pow@x
  3366  0148' C01B' F026'        	movff	?_exp+1,pow@x+1
  3367  014C' C01C' F027'        	movff	?_exp+2,pow@x+2
  3368  0150' C01D' F028'        	movff	?_exp+3,pow@x+3
  3369  0154' 0100               	movlb	0	; () banked
  3370  0156' 5100'              	movf	pow@sign& (0+255),w,b
  3371  0158' E013               	bz	l1069
  3372                           
  3373                           ; BSR set to: 0
  3374  015A' C025' F006'        	movff	pow@x,___flneg@f1
  3375  015E' C026' F007'        	movff	pow@x+1,___flneg@f1+1
  3376  0162' C027' F008'        	movff	pow@x+2,___flneg@f1+2
  3377  0166' C028' F009'        	movff	pow@x+3,___flneg@f1+3
  3378  016A' EC00' F000'        	call	___flneg	;wreg free
  3379  016E' C006' F025'        	movff	?___flneg,?_pow
  3380  0172' C007' F026'        	movff	?___flneg+1,?_pow+1
  3381  0176' C008' F027'        	movff	?___flneg+2,?_pow+2
  3382  017A' C009' F028'        	movff	?___flneg+3,?_pow+3
  3383  017E' 0012               	return	
  3384  0180'                    l1069:
  3385                           
  3386                           ; BSR set to: 0
  3387  0180' C025' F025'        	movff	pow@x,?_pow
  3388  0184' C026' F026'        	movff	pow@x+1,?_pow+1
  3389  0188' C027' F027'        	movff	pow@x+2,?_pow+2
  3390  018C' C028' F028'        	movff	pow@x+3,?_pow+3
  3391                           
  3392                           ; BSR set to: 0
  3393  0190' 0012               	return		;funcret
  3394  0192'                    __end_of_pow:
  3395                           	opt stack 0
  3396                           tblptru	equ	0xFF8
  3397                           tblptrh	equ	0xFF7
  3398                           tblptrl	equ	0xFF6
  3399                           tablat	equ	0xFF5
  3400                           prodl	equ	0xFF3
  3401                           intcon	equ	0xFF2
  3402                           intcon2	equ	0xFF1
  3403                           postinc0	equ	0xFEE
  3404                           wreg	equ	0xFE8
  3405                           postdec1	equ	0xFE5
  3406                           fsr1l	equ	0xFE1
  3407                           indf2	equ	0xFDF
  3408                           postinc2	equ	0xFDE
  3409                           postdec2	equ	0xFDD
  3410                           fsr2h	equ	0xFDA
  3411                           fsr2l	equ	0xFD9
  3412                           status	equ	0xFD8
  3413                           
  3414 ;; *************** function _exp *****************
  3415 ;; Defined at:
  3416 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/common/exp.c"
  3417 ;; Parameters:    Size  Location     Type
  3418 ;;  x               4   26[BANK0 ] unsigned char 
  3419 ;; Auto vars:     Size  Location     Type
  3420 ;;  exponent        2   34[BANK0 ] int 
  3421 ;;  sign            1   36[BANK0 ] unsigned char 
  3422 ;; Return value:  Size  Location     Type
  3423 ;;                  4   26[BANK0 ] unsigned char 
  3424 ;; Registers used:
  3425 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3426 ;; Tracked objects:
  3427 ;;		On entry : 0/0
  3428 ;;		On exit  : 0/0
  3429 ;;		Unchanged: 0/0
  3430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3431 ;;      Params:         0       4       0       0       0       0       0       0       0
  3432 ;;      Locals:         0       7       0       0       0       0       0       0       0
  3433 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3434 ;;      Totals:         0      11       0       0       0       0       0       0       0
  3435 ;;Total ram usage:       11 bytes
  3436 ;; Hardware stack levels used:    1
  3437 ;; Hardware stack levels required when called:    4
  3438 ;; This function calls:
  3439 ;;		___awtofl
  3440 ;;		___fldiv
  3441 ;;		___flge
  3442 ;;		___flmul
  3443 ;;		___flneg
  3444 ;;		___flsub
  3445 ;;		___fltol
  3446 ;;		_eval_poly
  3447 ;;		_floor
  3448 ;;		_ldexp
  3449 ;; This function is called by:
  3450 ;;		_pow
  3451 ;; This function uses a non-reentrant model
  3452 ;;
  3453                           
  3454                           	psect	text10
  3455  0000'                    __ptext10:
  3456                           	opt stack 0
  3457  0000'                    _exp:
  3458                           	opt stack 23
  3459                           
  3460                           ; BSR set to: 0
  3461                           ;incstack = 0
  3462  0000' 0100               	movlb	0	; () banked
  3463  0002' 5100'              	movf	exp@x& (0+255),w,b
  3464  0004' 1100'              	iorwf	(exp@x+1)& (0+255),w,b
  3465  0006' 1100'              	iorwf	(exp@x+2)& (0+255),w,b
  3466  0008' 1100'              	iorwf	(exp@x+3)& (0+255),w,b
  3467  000A' E108               	bnz	l3706
  3468                           
  3469                           ; BSR set to: 0
  3470  000C' 0E00               	movlw	0
  3471  000E' 6F00'              	movwf	?_exp& (0+255),b
  3472  0010' 6F00'              	movwf	(?_exp+1)& (0+255),b
  3473  0012' 0E80               	movlw	128
  3474  0014' 6F00'              	movwf	(?_exp+2)& (0+255),b
  3475  0016' 0E3F               	movlw	63
  3476  0018' 6F00'              	movwf	(?_exp+3)& (0+255),b
  3477  001A' 0C3F               	retlw	63
  3478  001C'                    l3706:
  3479                           
  3480                           ; BSR set to: 0
  3481  001C' 0E18               	movlw	24
  3482  001E' 6E06'              	movwf	___flge@ff1,c
  3483  0020' 0E72               	movlw	114
  3484  0022' 6E07'              	movwf	___flge@ff1+1,c
  3485  0024' 0E31               	movlw	49
  3486  0026' 6E08'              	movwf	___flge@ff1+2,c
  3487  0028' 0E44               	movlw	68
  3488  002A' 6E09'              	movwf	___flge@ff1+3,c
  3489  002C' C01A' F00A'        	movff	exp@x,___flge@ff2
  3490  0030' C01B' F00B'        	movff	exp@x+1,___flge@ff2+1
  3491  0034' C01C' F00C'        	movff	exp@x+2,___flge@ff2+2
  3492  0038' C01D' F00D'        	movff	exp@x+3,___flge@ff2+3
  3493  003C' EC00' F000'        	call	___flge	;wreg free
  3494  0040' E207               	bc	l3712
  3495  0042' 0100               	movlb	0	; () banked
  3496  0044' 6900'              	setf	?_exp& (0+255),b
  3497  0046' 6900'              	setf	(?_exp+1)& (0+255),b
  3498  0048' 0E7F               	movlw	127
  3499  004A' 6F00'              	movwf	(?_exp+2)& (0+255),b
  3500  004C' 6F00'              	movwf	(?_exp+3)& (0+255),b
  3501  004E' 0C7F               	retlw	127
  3502  0050'                    l3712:
  3503  0050' C01A' F006'        	movff	exp@x,___flge@ff1
  3504  0054' C01B' F007'        	movff	exp@x+1,___flge@ff1+1
  3505  0058' C01C' F008'        	movff	exp@x+2,___flge@ff1+2
  3506  005C' C01D' F009'        	movff	exp@x+3,___flge@ff1+3
  3507  0060' 0E87               	movlw	135
  3508  0062' 6E0A'              	movwf	___flge@ff2,c
  3509  0064' 0E48               	movlw	72
  3510  0066' 6E0B'              	movwf	___flge@ff2+1,c
  3511  0068' 0E3A               	movlw	58
  3512  006A' 6E0C'              	movwf	___flge@ff2+2,c
  3513  006C' 0EC4               	movlw	196
  3514  006E' 6E0D'              	movwf	___flge@ff2+3,c
  3515  0070' EC00' F000'        	call	___flge	;wreg free
  3516  0074' E206               	bc	l3716
  3517  0076' 0100               	movlb	0	; () banked
  3518  0078' 6B00'              	clrf	?_exp& (0+255),b
  3519  007A' 6B00'              	clrf	(?_exp+1)& (0+255),b
  3520  007C' 6B00'              	clrf	(?_exp+2)& (0+255),b
  3521  007E' 6B00'              	clrf	(?_exp+3)& (0+255),b
  3522  0080' 0012               	return	
  3523  0082'                    l3716:
  3524  0082' 0100               	movlb	0	; () banked
  3525  0084' 0E01               	movlw	1
  3526  0086' AF00'              	btfss	(exp@x+3)& (0+255),7,b
  3527  0088' 0E00               	movlw	0
  3528  008A' 6F00'              	movwf	exp@sign& (0+255),b
  3529                           
  3530                           ; BSR set to: 0
  3531  008C' 5100'              	movf	exp@sign& (0+255),w,b
  3532  008E' E012               	bz	l1094
  3533                           
  3534                           ; BSR set to: 0
  3535  0090' C01A' F006'        	movff	exp@x,___flneg@f1
  3536  0094' C01B' F007'        	movff	exp@x+1,___flneg@f1+1
  3537  0098' C01C' F008'        	movff	exp@x+2,___flneg@f1+2
  3538  009C' C01D' F009'        	movff	exp@x+3,___flneg@f1+3
  3539  00A0' EC00' F000'        	call	___flneg	;wreg free
  3540  00A4' C006' F01A'        	movff	?___flneg,exp@x
  3541  00A8' C007' F01B'        	movff	?___flneg+1,exp@x+1
  3542  00AC' C008' F01C'        	movff	?___flneg+2,exp@x+2
  3543  00B0' C009' F01D'        	movff	?___flneg+3,exp@x+3
  3544  00B4'                    l1094:
  3545                           
  3546                           ; BSR set to: 0
  3547  00B4' C01A' F01F'        	movff	exp@x,___flmul@f1
  3548  00B8' C01B' F020'        	movff	exp@x+1,___flmul@f1+1
  3549  00BC' C01C' F021'        	movff	exp@x+2,___flmul@f1+2
  3550  00C0' C01D' F022'        	movff	exp@x+3,___flmul@f1+3
  3551  00C4' 0E3B               	movlw	59
  3552  00C6' 6E23'              	movwf	___flmul@f2,c
  3553  00C8' 0EAA               	movlw	170
  3554  00CA' 6E24'              	movwf	___flmul@f2+1,c
  3555  00CC' 0EB8               	movlw	184
  3556  00CE' 6E25'              	movwf	___flmul@f2+2,c
  3557  00D0' 0E3F               	movlw	63
  3558  00D2' 6E26'              	movwf	___flmul@f2+3,c
  3559  00D4' EC00' F000'        	call	___flmul	;wreg free
  3560  00D8' C01F' F01A'        	movff	?___flmul,exp@x
  3561  00DC' C020' F01B'        	movff	?___flmul+1,exp@x+1
  3562  00E0' C021' F01C'        	movff	?___flmul+2,exp@x+2
  3563  00E4' C022' F01D'        	movff	?___flmul+3,exp@x+3
  3564  00E8' C01A' F010'        	movff	exp@x,floor@x
  3565  00EC' C01B' F011'        	movff	exp@x+1,floor@x+1
  3566  00F0' C01C' F012'        	movff	exp@x+2,floor@x+2
  3567  00F4' C01D' F013'        	movff	exp@x+3,floor@x+3
  3568  00F8' EC00' F000'        	call	_floor	;wreg free
  3569  00FC' C010' F01E'        	movff	?_floor,_exp$1057
  3570  0100' C011' F01F'        	movff	?_floor+1,_exp$1057+1
  3571  0104' C012' F020'        	movff	?_floor+2,_exp$1057+2
  3572  0108' C013' F021'        	movff	?_floor+3,_exp$1057+3
  3573  010C' C01E' F004'        	movff	_exp$1057,___fltol@f1
  3574  0110' C01F' F005'        	movff	_exp$1057+1,___fltol@f1+1
  3575  0114' C020' F006'        	movff	_exp$1057+2,___fltol@f1+2
  3576  0118' C021' F007'        	movff	_exp$1057+3,___fltol@f1+3
  3577  011C' EC00' F000'        	call	___fltol	;wreg free
  3578  0120' C004' F022'        	movff	?___fltol,exp@exponent
  3579  0124' C005' F023'        	movff	?___fltol+1,exp@exponent+1
  3580                           
  3581                           ; BSR set to: 0
  3582  0128' C01A' F03A'        	movff	exp@x,___flsub@f1
  3583  012C' C01B' F03B'        	movff	exp@x+1,___flsub@f1+1
  3584  0130' C01C' F03C'        	movff	exp@x+2,___flsub@f1+2
  3585  0134' C01D' F03D'        	movff	exp@x+3,___flsub@f1+3
  3586  0138' C022' F010'        	movff	exp@exponent,___awtofl@c
  3587  013C' C023' F011'        	movff	exp@exponent+1,___awtofl@c+1
  3588  0140' EC00' F000'        	call	___awtofl	;wreg free
  3589  0144' C010' F03E'        	movff	?___awtofl,___flsub@f2
  3590  0148' C011' F03F'        	movff	?___awtofl+1,___flsub@f2+1
  3591  014C' C012' F040'        	movff	?___awtofl+2,___flsub@f2+2
  3592  0150' C013' F041'        	movff	?___awtofl+3,___flsub@f2+3
  3593  0154' EC00' F000'        	call	___flsub	;wreg free
  3594  0158' C03A' F01A'        	movff	?___flsub,exp@x
  3595  015C' C03B' F01B'        	movff	?___flsub+1,exp@x+1
  3596  0160' C03C' F01C'        	movff	?___flsub+2,exp@x+2
  3597  0164' C03D' F01D'        	movff	?___flsub+3,exp@x+3
  3598  0168' C01A' F03A'        	movff	exp@x,eval_poly@x
  3599  016C' C01B' F03B'        	movff	exp@x+1,eval_poly@x+1
  3600  0170' C01C' F03C'        	movff	exp@x+2,eval_poly@x+2
  3601  0174' C01D' F03D'        	movff	exp@x+3,eval_poly@x+3
  3602  0178' 0E00'              	movlw	low exp@coeff
  3603  017A' 6E3E'              	movwf	eval_poly@d,c
  3604  017C' 6A40'              	clrf	eval_poly@n+1,c
  3605  017E' 0E09               	movlw	9
  3606  0180' 6E3F'              	movwf	eval_poly@n,c
  3607  0182' EC00' F000'        	call	_eval_poly	;wreg free
  3608  0186' C03A' F046'        	movff	?_eval_poly,ldexp@value
  3609  018A' C03B' F047'        	movff	?_eval_poly+1,ldexp@value+1
  3610  018E' C03C' F048'        	movff	?_eval_poly+2,ldexp@value+2
  3611  0192' C03D' F049'        	movff	?_eval_poly+3,ldexp@value+3
  3612  0196' C022' F04A'        	movff	exp@exponent,ldexp@newexp
  3613  019A' C023' F04B'        	movff	exp@exponent+1,ldexp@newexp+1
  3614  019E' EC00' F000'        	call	_ldexp	;wreg free
  3615  01A2' C046' F01A'        	movff	?_ldexp,exp@x
  3616  01A6' C047' F01B'        	movff	?_ldexp+1,exp@x+1
  3617  01AA' C048' F01C'        	movff	?_ldexp+2,exp@x+2
  3618  01AE' C049' F01D'        	movff	?_ldexp+3,exp@x+3
  3619  01B2' 0100               	movlb	0	; () banked
  3620  01B4' 5100'              	movf	exp@sign& (0+255),w,b
  3621  01B6' E029               	bz	l1095
  3622                           
  3623                           ; BSR set to: 0
  3624  01B8' 2900'              	incf	exp@x& (0+255),w,b
  3625  01BA' E10D               	bnz	l3736
  3626  01BC' 2900'              	incf	(exp@x+1)& (0+255),w,b
  3627  01BE' E10B               	bnz	l3736
  3628  01C0' 0E7F               	movlw	127
  3629  01C2' 1900'              	xorwf	(exp@x+2)& (0+255),w,b
  3630  01C4' E108               	bnz	l3736
  3631  01C6' 0E7F               	movlw	127
  3632  01C8' 1900'              	xorwf	(exp@x+3)& (0+255),w,b
  3633  01CA' E105               	bnz	l3736
  3634                           
  3635                           ; BSR set to: 0
  3636  01CC' 6B00'              	clrf	?_exp& (0+255),b
  3637  01CE' 6B00'              	clrf	(?_exp+1)& (0+255),b
  3638  01D0' 6B00'              	clrf	(?_exp+2)& (0+255),b
  3639  01D2' 6B00'              	clrf	(?_exp+3)& (0+255),b
  3640  01D4' 0012               	return	
  3641  01D6'                    l3736:
  3642                           
  3643                           ; BSR set to: 0
  3644  01D6' 0E00               	movlw	0
  3645  01D8' 6E10'              	movwf	___fldiv@f1,c
  3646  01DA' 6E11'              	movwf	___fldiv@f1+1,c
  3647  01DC' 0E80               	movlw	128
  3648  01DE' 6E12'              	movwf	___fldiv@f1+2,c
  3649  01E0' 0E3F               	movlw	63
  3650  01E2' 6E13'              	movwf	___fldiv@f1+3,c
  3651  01E4' C01A' F014'        	movff	exp@x,___fldiv@f2
  3652  01E8' C01B' F015'        	movff	exp@x+1,___fldiv@f2+1
  3653  01EC' C01C' F016'        	movff	exp@x+2,___fldiv@f2+2
  3654  01F0' C01D' F017'        	movff	exp@x+3,___fldiv@f2+3
  3655  01F4' EC00' F000'        	call	___fldiv	;wreg free
  3656  01F8' C010' F01A'        	movff	?___fldiv,?_exp
  3657  01FC' C011' F01B'        	movff	?___fldiv+1,?_exp+1
  3658  0200' C012' F01C'        	movff	?___fldiv+2,?_exp+2
  3659  0204' C013' F01D'        	movff	?___fldiv+3,?_exp+3
  3660  0208' 0012               	return	
  3661  020A'                    l1095:
  3662                           
  3663                           ; BSR set to: 0
  3664  020A' C01A' F01A'        	movff	exp@x,?_exp
  3665  020E' C01B' F01B'        	movff	exp@x+1,?_exp+1
  3666  0212' C01C' F01C'        	movff	exp@x+2,?_exp+2
  3667  0216' C01D' F01D'        	movff	exp@x+3,?_exp+3
  3668  021A' 0012               	return		;funcret
  3669  021C'                    __end_of_exp:
  3670                           	opt stack 0
  3671                           tblptru	equ	0xFF8
  3672                           tblptrh	equ	0xFF7
  3673                           tblptrl	equ	0xFF6
  3674                           tablat	equ	0xFF5
  3675                           prodl	equ	0xFF3
  3676                           intcon	equ	0xFF2
  3677                           intcon2	equ	0xFF1
  3678                           postinc0	equ	0xFEE
  3679                           wreg	equ	0xFE8
  3680                           postdec1	equ	0xFE5
  3681                           fsr1l	equ	0xFE1
  3682                           indf2	equ	0xFDF
  3683                           postinc2	equ	0xFDE
  3684                           postdec2	equ	0xFDD
  3685                           fsr2h	equ	0xFDA
  3686                           fsr2l	equ	0xFD9
  3687                           status	equ	0xFD8
  3688                           
  3689 ;; *************** function _ldexp *****************
  3690 ;; Defined at:
  3691 ;;		line 277 in file "/opt/microchip/xc8/v1.34/sources/common/frexp.c"
  3692 ;; Parameters:    Size  Location     Type
  3693 ;;  value           4   70[COMRAM] unsigned char 
  3694 ;;  newexp          2   74[COMRAM] int 
  3695 ;; Auto vars:     Size  Location     Type
  3696 ;;		None
  3697 ;; Return value:  Size  Location     Type
  3698 ;;                  4   70[COMRAM] int 
  3699 ;; Registers used:
  3700 ;;		wreg, status,2, status,0
  3701 ;; Tracked objects:
  3702 ;;		On entry : 0/0
  3703 ;;		On exit  : 0/0
  3704 ;;		Unchanged: 0/0
  3705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3706 ;;      Params:         6       0       0       0       0       0       0       0       0
  3707 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3708 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3709 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3710 ;;Total ram usage:        8 bytes
  3711 ;; Hardware stack levels used:    1
  3712 ;; Hardware stack levels required when called:    1
  3713 ;; This function calls:
  3714 ;;		Nothing
  3715 ;; This function is called by:
  3716 ;;		_exp
  3717 ;; This function uses a non-reentrant model
  3718 ;;
  3719                           
  3720                           	psect	text11
  3721  0000'                    __ptext11:
  3722                           	opt stack 0
  3723  0000'                    _ldexp:
  3724                           	opt stack 25
  3725                           
  3726                           ;incstack = 0
  3727  0000' 5046'              	movf	ldexp@value,w,c
  3728  0002' 1047'              	iorwf	ldexp@value+1,w,c
  3729  0004' 1048'              	iorwf	ldexp@value+2,w,c
  3730  0006' 1049'              	iorwf	ldexp@value+3,w,c
  3731  0008' E105               	bnz	l2600
  3732  000A' 6A46'              	clrf	?_ldexp,c
  3733  000C' 6A47'              	clrf	?_ldexp+1,c
  3734  000E' 6A48'              	clrf	?_ldexp+2,c
  3735  0010' 6A49'              	clrf	?_ldexp+3,c
  3736  0012' 0012               	return	
  3737  0014'                    l2600:
  3738  0014' 5049'              	movf	ldexp@value+3,w,c
  3739  0016' 0B7F               	andlw	127
  3740  0018' 6E00'              	movwf	??_ldexp& (0+255),c
  3741  001A' 6A00'              	clrf	(??_ldexp+1)& (0+255),c
  3742  001C' 90D8               	bcf	status,0,c
  3743  001E' 364C'              	rlcf	??_ldexp,f,c
  3744  0020' 364D'              	rlcf	??_ldexp+1,f,c
  3745  0022' 504C'              	movf	??_ldexp,w,c
  3746  0024' 264A'              	addwf	ldexp@newexp,f,c
  3747  0026' 504D'              	movf	??_ldexp+1,w,c
  3748  0028' 224B'              	addwfc	ldexp@newexp+1,f,c
  3749  002A' 0E01               	movlw	1
  3750  002C' AE48'              	btfss	ldexp@value+2,7,c
  3751  002E' 0E00               	movlw	0
  3752  0030' 264A'              	addwf	ldexp@newexp,f,c
  3753  0032' 0E00               	movlw	0
  3754  0034' 224B'              	addwfc	ldexp@newexp+1,f,c
  3755  0036' AE4B'              	btfss	ldexp@newexp+1,7,c
  3756  0038' D005               	goto	l2606
  3757  003A' 6A46'              	clrf	?_ldexp,c
  3758  003C' 6A47'              	clrf	?_ldexp+1,c
  3759  003E' 6A48'              	clrf	?_ldexp+2,c
  3760  0040' 6A49'              	clrf	?_ldexp+3,c
  3761  0042' 0012               	return	
  3762  0044'                    l2606:
  3763  0044' BE4B'              	btfsc	ldexp@newexp+1,7,c
  3764  0046' D010               	goto	l2620
  3765  0048' 044B'              	decf	ldexp@newexp+1,w,c
  3766  004A' E30E               	bnc	l2620
  3767  004C' AE49'              	btfss	ldexp@value+3,7,c
  3768  004E' D006               	goto	l2616
  3769  0050' 6846'              	setf	?_ldexp,c
  3770  0052' 6847'              	setf	?_ldexp+1,c
  3771  0054' 0E7F               	movlw	127
  3772  0056' 6E48'              	movwf	?_ldexp+2,c
  3773  0058' 6849'              	setf	?_ldexp+3,c
  3774  005A' 0CFF               	retlw	255
  3775  005C'                    l2616:
  3776  005C' 6846'              	setf	?_ldexp,c
  3777  005E' 6847'              	setf	?_ldexp+1,c
  3778  0060' 0E7F               	movlw	127
  3779  0062' 6E48'              	movwf	?_ldexp+2,c
  3780  0064' 6E49'              	movwf	?_ldexp+3,c
  3781  0066' 0C7F               	retlw	127
  3782  0068'                    l2620:
  3783  0068' 344B'              	rlcf	ldexp@newexp+1,w,c
  3784  006A' 304B'              	rrcf	ldexp@newexp+1,w,c
  3785  006C' 6E00'              	movwf	(??_ldexp+1)& (0+255),c
  3786  006E' 304A'              	rrcf	ldexp@newexp,w,c
  3787  0070' 6E00'              	movwf	??_ldexp& (0+255),c
  3788  0072' 1849'              	xorwf	ldexp@value+3,w,c
  3789  0074' 0B80               	andlw	-128
  3790  0076' 184C'              	xorwf	??_ldexp,w,c
  3791  0078' 6E49'              	movwf	ldexp@value+3,c
  3792  007A' C04A' F04C'        	movff	ldexp@newexp,??_ldexp
  3793  007E' 0E01               	movlw	1
  3794  0080' 164C'              	andwf	??_ldexp,f,c
  3795  0082' 324C'              	rrcf	??_ldexp,f,c
  3796  0084' 324C'              	rrcf	??_ldexp,f,c
  3797  0086' 5048'              	movf	ldexp@value+2,w,c
  3798  0088' 184C'              	xorwf	??_ldexp,w,c
  3799  008A' 0B7F               	andlw	-129
  3800  008C' 184C'              	xorwf	??_ldexp,w,c
  3801  008E' 6E48'              	movwf	ldexp@value+2,c
  3802  0090' C046' F046'        	movff	ldexp@value,?_ldexp
  3803  0094' C047' F047'        	movff	ldexp@value+1,?_ldexp+1
  3804  0098' C048' F048'        	movff	ldexp@value+2,?_ldexp+2
  3805  009C' C049' F049'        	movff	ldexp@value+3,?_ldexp+3
  3806  00A0' 0012               	return		;funcret
  3807  00A2'                    __end_of_ldexp:
  3808                           	opt stack 0
  3809                           tblptru	equ	0xFF8
  3810                           tblptrh	equ	0xFF7
  3811                           tblptrl	equ	0xFF6
  3812                           tablat	equ	0xFF5
  3813                           prodl	equ	0xFF3
  3814                           intcon	equ	0xFF2
  3815                           intcon2	equ	0xFF1
  3816                           postinc0	equ	0xFEE
  3817                           wreg	equ	0xFE8
  3818                           postdec1	equ	0xFE5
  3819                           fsr1l	equ	0xFE1
  3820                           indf2	equ	0xFDF
  3821                           postinc2	equ	0xFDE
  3822                           postdec2	equ	0xFDD
  3823                           fsr2h	equ	0xFDA
  3824                           fsr2l	equ	0xFD9
  3825                           status	equ	0xFD8
  3826                           
  3827 ;; *************** function _floor *****************
  3828 ;; Defined at:
  3829 ;;		line 13 in file "/opt/microchip/xc8/v1.34/sources/common/floor.c"
  3830 ;; Parameters:    Size  Location     Type
  3831 ;;  x               4   16[BANK0 ] int 
  3832 ;; Auto vars:     Size  Location     Type
  3833 ;;  i               4   20[BANK0 ] int 
  3834 ;;  expon           2   24[BANK0 ] int 
  3835 ;; Return value:  Size  Location     Type
  3836 ;;                  4   16[BANK0 ] int 
  3837 ;; Registers used:
  3838 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3839 ;; Tracked objects:
  3840 ;;		On entry : 0/0
  3841 ;;		On exit  : 0/0
  3842 ;;		Unchanged: 0/0
  3843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3844 ;;      Params:         0       4       0       0       0       0       0       0       0
  3845 ;;      Locals:         0       6       0       0       0       0       0       0       0
  3846 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3847 ;;      Totals:         0      10       0       0       0       0       0       0       0
  3848 ;;Total ram usage:       10 bytes
  3849 ;; Hardware stack levels used:    1
  3850 ;; Hardware stack levels required when called:    3
  3851 ;; This function calls:
  3852 ;;		___altofl
  3853 ;;		___fladd
  3854 ;;		___flge
  3855 ;;		___fltol
  3856 ;;		_frexp
  3857 ;; This function is called by:
  3858 ;;		_format_double
  3859 ;;		_exp
  3860 ;; This function uses a non-reentrant model
  3861 ;;
  3862                           
  3863                           	psect	text12
  3864  0000'                    __ptext12:
  3865                           	opt stack 0
  3866  0000'                    _floor:
  3867                           	opt stack 23
  3868                           
  3869                           ;incstack = 0
  3870  0000' C010' F006'        	movff	floor@x,frexp@value
  3871  0004' C011' F007'        	movff	floor@x+1,frexp@value+1
  3872  0008' C012' F008'        	movff	floor@x+2,frexp@value+2
  3873  000C' C013' F009'        	movff	floor@x+3,frexp@value+3
  3874  0010' 0E00'              	movlw	low floor@expon
  3875  0012' 6E0A'              	movwf	frexp@eptr,c
  3876  0014' EC00' F000'        	call	_frexp	;wreg free
  3877  0018' 0100               	movlb	0	; () banked
  3878  001A' AF00'              	btfss	(floor@expon+1)& (0+255),7,b
  3879  001C' D00F               	goto	l3608
  3880                           
  3881                           ; BSR set to: 0
  3882  001E' AF00'              	btfss	(floor@x+3)& (0+255),7,b
  3883  0020' D008               	goto	l795
  3884                           
  3885                           ; BSR set to: 0
  3886  0022' 0E00               	movlw	0
  3887  0024' 6F00'              	movwf	?_floor& (0+255),b
  3888  0026' 6F00'              	movwf	(?_floor+1)& (0+255),b
  3889  0028' 0E80               	movlw	128
  3890  002A' 6F00'              	movwf	(?_floor+2)& (0+255),b
  3891  002C' 0EBF               	movlw	191
  3892  002E' 6F00'              	movwf	(?_floor+3)& (0+255),b
  3893  0030' 0CBF               	retlw	191
  3894  0032'                    l795:
  3895                           
  3896                           ; BSR set to: 0
  3897  0032' 6B00'              	clrf	?_floor& (0+255),b
  3898  0034' 6B00'              	clrf	(?_floor+1)& (0+255),b
  3899  0036' 6B00'              	clrf	(?_floor+2)& (0+255),b
  3900  0038' 6B00'              	clrf	(?_floor+3)& (0+255),b
  3901  003A' 0012               	return	
  3902  003C'                    l3608:
  3903                           
  3904                           ; BSR set to: 0
  3905  003C' 5100'              	movf	(floor@expon+1)& (0+255),w,b
  3906  003E' E103               	bnz	u3020
  3907  0040' 0E1D               	movlw	29
  3908  0042' 5D00'              	subwf	floor@expon& (0+255),w,b
  3909  0044' E309               	bnc	l3612
  3910  0046'                    u3020:
  3911                           
  3912                           ; BSR set to: 0
  3913  0046' C010' F010'        	movff	floor@x,?_floor
  3914  004A' C011' F011'        	movff	floor@x+1,?_floor+1
  3915  004E' C012' F012'        	movff	floor@x+2,?_floor+2
  3916  0052' C013' F013'        	movff	floor@x+3,?_floor+3
  3917  0056' 0012               	return	
  3918  0058'                    l3612:
  3919                           
  3920                           ; BSR set to: 0
  3921  0058' C010' F004'        	movff	floor@x,___fltol@f1
  3922  005C' C011' F005'        	movff	floor@x+1,___fltol@f1+1
  3923  0060' C012' F006'        	movff	floor@x+2,___fltol@f1+2
  3924  0064' C013' F007'        	movff	floor@x+3,___fltol@f1+3
  3925  0068' EC00' F000'        	call	___fltol	;wreg free
  3926  006C' C004' F00C'        	movff	?___fltol,___altofl@c
  3927  0070' C005' F00D'        	movff	?___fltol+1,___altofl@c+1
  3928  0074' C006' F00E'        	movff	?___fltol+2,___altofl@c+2
  3929  0078' C007' F00F'        	movff	?___fltol+3,___altofl@c+3
  3930  007C' EC00' F000'        	call	___altofl	;wreg free
  3931  0080' C00C' F014'        	movff	?___altofl,floor@i
  3932  0084' C00D' F015'        	movff	?___altofl+1,floor@i+1
  3933  0088' C00E' F016'        	movff	?___altofl+2,floor@i+2
  3934  008C' C00F' F017'        	movff	?___altofl+3,floor@i+3
  3935  0090' C010' F006'        	movff	floor@x,___flge@ff1
  3936  0094' C011' F007'        	movff	floor@x+1,___flge@ff1+1
  3937  0098' C012' F008'        	movff	floor@x+2,___flge@ff1+2
  3938  009C' C013' F009'        	movff	floor@x+3,___flge@ff1+3
  3939  00A0' C014' F00A'        	movff	floor@i,___flge@ff2
  3940  00A4' C015' F00B'        	movff	floor@i+1,___flge@ff2+1
  3941  00A8' C016' F00C'        	movff	floor@i+2,___flge@ff2+2
  3942  00AC' C017' F00D'        	movff	floor@i+3,___flge@ff2+3
  3943  00B0' EC00' F000'        	call	___flge	;wreg free
  3944  00B4' E215               	bc	l798
  3945  00B6' C014' F02E'        	movff	floor@i,___fladd@f1
  3946  00BA' C015' F02F'        	movff	floor@i+1,___fladd@f1+1
  3947  00BE' C016' F030'        	movff	floor@i+2,___fladd@f1+2
  3948  00C2' C017' F031'        	movff	floor@i+3,___fladd@f1+3
  3949  00C6' EC00' F000'        	call	PL26	;call to abstracted procedure
  3950  00CA' EC00' F000'        	call	___fladd	;wreg free
  3951  00CE' C02E' F010'        	movff	?___fladd,?_floor
  3952  00D2' C02F' F011'        	movff	?___fladd+1,?_floor+1
  3953  00D6' C030' F012'        	movff	?___fladd+2,?_floor+2
  3954  00DA' C031' F013'        	movff	?___fladd+3,?_floor+3
  3955  00DE' 0012               	return	
  3956  00E0'                    l798:
  3957  00E0' C014' F010'        	movff	floor@i,?_floor
  3958  00E4' C015' F011'        	movff	floor@i+1,?_floor+1
  3959  00E8' C016' F012'        	movff	floor@i+2,?_floor+2
  3960  00EC' C017' F013'        	movff	floor@i+3,?_floor+3
  3961  00F0' 0012               	return		;funcret
  3962  00F2'                    __end_of_floor:
  3963                           	opt stack 0
  3964                           tblptru	equ	0xFF8
  3965                           tblptrh	equ	0xFF7
  3966                           tblptrl	equ	0xFF6
  3967                           tablat	equ	0xFF5
  3968                           prodl	equ	0xFF3
  3969                           intcon	equ	0xFF2
  3970                           intcon2	equ	0xFF1
  3971                           postinc0	equ	0xFEE
  3972                           wreg	equ	0xFE8
  3973                           postdec1	equ	0xFE5
  3974                           fsr1l	equ	0xFE1
  3975                           indf2	equ	0xFDF
  3976                           postinc2	equ	0xFDE
  3977                           postdec2	equ	0xFDD
  3978                           fsr2h	equ	0xFDA
  3979                           fsr2l	equ	0xFD9
  3980                           status	equ	0xFD8
  3981                           
  3982 ;; *************** function ___fltol *****************
  3983 ;; Defined at:
  3984 ;;		line 43 in file "/opt/microchip/xc8/v1.34/sources/common/fltol.c"
  3985 ;; Parameters:    Size  Location     Type
  3986 ;;  f1              4    4[BANK0 ] int 
  3987 ;; Auto vars:     Size  Location     Type
  3988 ;;  exp1            1   81[COMRAM] unsigned char 
  3989 ;;  sign1           1   80[COMRAM] unsigned char 
  3990 ;; Return value:  Size  Location     Type
  3991 ;;                  4    4[BANK0 ] long 
  3992 ;; Registers used:
  3993 ;;		wreg, status,2, status,0
  3994 ;; Tracked objects:
  3995 ;;		On entry : 0/0
  3996 ;;		On exit  : F/0
  3997 ;;		Unchanged: 0/0
  3998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3999 ;;      Params:         0       4       0       0       0       0       0       0       0
  4000 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4001 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4002 ;;      Totals:         2       8       0       0       0       0       0       0       0
  4003 ;;Total ram usage:       10 bytes
  4004 ;; Hardware stack levels used:    1
  4005 ;; Hardware stack levels required when called:    1
  4006 ;; This function calls:
  4007 ;;		Nothing
  4008 ;; This function is called by:
  4009 ;;		_format_double
  4010 ;;		_measure_capacitance
  4011 ;;		_measure_inductance
  4012 ;;		_floor
  4013 ;;		_pow
  4014 ;;		_exp
  4015 ;; This function uses a non-reentrant model
  4016 ;;
  4017                           
  4018                           	psect	text13
  4019  0000'                    __ptext13:
  4020                           	opt stack 0
  4021  0000'                    ___fltol:
  4022                           	opt stack 28
  4023                           
  4024                           ;incstack = 0
  4025  0000' 0100               	movlb	0	; () banked
  4026  0002' 3500'              	rlcf	(___fltol@f1+2)& (0+255),w,b
  4027  0004' 3500'              	rlcf	(___fltol@f1+3)& (0+255),w,b
  4028  0006' 6E51'              	movwf	___fltol@exp1,c
  4029  0008' 5051'              	movf	___fltol@exp1,w,c
  4030  000A' E105               	bnz	l3564
  4031  000C'                    l3562:
  4032                           
  4033                           ; BSR set to: 0
  4034  000C' 6B00'              	clrf	?___fltol& (0+255),b
  4035  000E' 6B00'              	clrf	(?___fltol+1)& (0+255),b
  4036  0010' 6B00'              	clrf	(?___fltol+2)& (0+255),b
  4037  0012' 6B00'              	clrf	(?___fltol+3)& (0+255),b
  4038  0014' 0012               	return	
  4039  0016'                    l3564:
  4040                           
  4041                           ; BSR set to: 0
  4042  0016' C004' F008'        	movff	___fltol@f1,??___fltol
  4043  001A' C005' F009'        	movff	___fltol@f1+1,??___fltol+1
  4044  001E' C006' F00A'        	movff	___fltol@f1+2,??___fltol+2
  4045  0022' C007' F00B'        	movff	___fltol@f1+3,??___fltol+3
  4046  0026' 0E20               	movlw	32
  4047  0028' D005               	goto	u2940
  4048  002A'                    u2945:
  4049  002A' 90D8               	bcf	status,0,c
  4050  002C' 3300'              	rrcf	(??___fltol+3)& (0+255),f,b
  4051  002E' 3300'              	rrcf	(??___fltol+2)& (0+255),f,b
  4052  0030' 3300'              	rrcf	(??___fltol+1)& (0+255),f,b
  4053  0032' 3300'              	rrcf	??___fltol& (0+255),f,b
  4054  0034'                    u2940:
  4055  0034' 2EE8               	decfsz	wreg,f,c
  4056  0036' D7F9               	goto	u2945
  4057  0038' 5100'              	movf	??___fltol& (0+255),w,b
  4058  003A' 6E50'              	movwf	___fltol@sign1,c
  4059                           
  4060                           ; BSR set to: 0
  4061  003C' 8F00'              	bsf	(___fltol@f1+2)& (0+255),7,b
  4062                           
  4063                           ; BSR set to: 0
  4064  003E' 6B00'              	clrf	(___fltol@f1+3)& (0+255),b
  4065                           
  4066                           ; BSR set to: 0
  4067  0040' 0E96               	movlw	150
  4068  0042' 5E51'              	subwf	___fltol@exp1,f,c
  4069                           
  4070                           ; BSR set to: 0
  4071  0044' AE51'              	btfss	___fltol@exp1,7,c
  4072  0046' D00C               	goto	l3582
  4073                           
  4074                           ; BSR set to: 0
  4075  0048' 5051'              	movf	___fltol@exp1,w,c
  4076  004A' 0A80               	xorlw	128
  4077  004C' 0F97               	addlw	151
  4078  004E' E3DE               	bnc	l3562
  4079  0050'                    l3578:
  4080                           
  4081                           ; BSR set to: 0
  4082  0050' 90D8               	bcf	status,0,c
  4083  0052' 3300'              	rrcf	(___fltol@f1+3)& (0+255),f,b
  4084  0054' 3300'              	rrcf	(___fltol@f1+2)& (0+255),f,b
  4085  0056' 3300'              	rrcf	(___fltol@f1+1)& (0+255),f,b
  4086  0058' 3300'              	rrcf	___fltol@f1& (0+255),f,b
  4087                           
  4088                           ; BSR set to: 0
  4089  005A' 3E51'              	incfsz	___fltol@exp1,f,c
  4090  005C' D7F9               	goto	l3578
  4091  005E' D00C               	goto	l3590
  4092  0060'                    l3582:
  4093                           
  4094                           ; BSR set to: 0
  4095  0060' 0E1F               	movlw	31
  4096  0062' 6451'              	cpfsgt	___fltol@exp1,c
  4097  0064' D007               	goto	l3588
  4098  0066' D7D2               	goto	l3562
  4099  0068'                    l3586:
  4100                           
  4101                           ; BSR set to: 0
  4102  0068' 90D8               	bcf	status,0,c
  4103  006A' 3700'              	rlcf	___fltol@f1& (0+255),f,b
  4104  006C' 3700'              	rlcf	(___fltol@f1+1)& (0+255),f,b
  4105  006E' 3700'              	rlcf	(___fltol@f1+2)& (0+255),f,b
  4106  0070' 3700'              	rlcf	(___fltol@f1+3)& (0+255),f,b
  4107  0072' 0651'              	decf	___fltol@exp1,f,c
  4108  0074'                    l3588:
  4109                           
  4110                           ; BSR set to: 0
  4111  0074' 5051'              	movf	___fltol@exp1,w,c
  4112  0076' E1F8               	bnz	l3586
  4113  0078'                    l3590:
  4114                           
  4115                           ; BSR set to: 0
  4116  0078' 5050'              	movf	___fltol@sign1,w,c
  4117  007A' E008               	bz	l3594
  4118                           
  4119                           ; BSR set to: 0
  4120  007C' 1F00'              	comf	(___fltol@f1+3)& (0+255),f,b
  4121  007E' 1F00'              	comf	(___fltol@f1+2)& (0+255),f,b
  4122  0080' 1F00'              	comf	(___fltol@f1+1)& (0+255),f,b
  4123  0082' 6D00'              	negf	___fltol@f1& (0+255),b
  4124  0084' 0E00               	movlw	0
  4125  0086' 2300'              	addwfc	(___fltol@f1+1)& (0+255),f,b
  4126  0088' 2300'              	addwfc	(___fltol@f1+2)& (0+255),f,b
  4127  008A' 2300'              	addwfc	(___fltol@f1+3)& (0+255),f,b
  4128  008C'                    l3594:
  4129                           
  4130                           ; BSR set to: 0
  4131  008C' C004' F004'        	movff	___fltol@f1,?___fltol
  4132  0090' C005' F005'        	movff	___fltol@f1+1,?___fltol+1
  4133  0094' C006' F006'        	movff	___fltol@f1+2,?___fltol+2
  4134  0098' C007' F007'        	movff	___fltol@f1+3,?___fltol+3
  4135                           
  4136                           ; BSR set to: 0
  4137  009C' 0012               	return		;funcret
  4138  009E'                    __end_of___fltol:
  4139                           	opt stack 0
  4140                           tblptru	equ	0xFF8
  4141                           tblptrh	equ	0xFF7
  4142                           tblptrl	equ	0xFF6
  4143                           tablat	equ	0xFF5
  4144                           prodl	equ	0xFF3
  4145                           intcon	equ	0xFF2
  4146                           intcon2	equ	0xFF1
  4147                           postinc0	equ	0xFEE
  4148                           wreg	equ	0xFE8
  4149                           postdec1	equ	0xFE5
  4150                           fsr1l	equ	0xFE1
  4151                           indf2	equ	0xFDF
  4152                           postinc2	equ	0xFDE
  4153                           postdec2	equ	0xFDD
  4154                           fsr2h	equ	0xFDA
  4155                           fsr2l	equ	0xFD9
  4156                           status	equ	0xFD8
  4157                           
  4158 ;; *************** function ___flge *****************
  4159 ;; Defined at:
  4160 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/flge.c"
  4161 ;; Parameters:    Size  Location     Type
  4162 ;;  ff1             4    6[COMRAM] long 
  4163 ;;  ff2             4   10[COMRAM] long 
  4164 ;; Auto vars:     Size  Location     Type
  4165 ;;		None
  4166 ;; Return value:  Size  Location     Type
  4167 ;;		None               void
  4168 ;; Registers used:
  4169 ;;		wreg, status,2, status,0
  4170 ;; Tracked objects:
  4171 ;;		On entry : 0/0
  4172 ;;		On exit  : 0/0
  4173 ;;		Unchanged: 0/0
  4174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4175 ;;      Params:         8       0       0       0       0       0       0       0       0
  4176 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4177 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4178 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4179 ;;Total ram usage:        8 bytes
  4180 ;; Hardware stack levels used:    1
  4181 ;; Hardware stack levels required when called:    1
  4182 ;; This function calls:
  4183 ;;		Nothing
  4184 ;; This function is called by:
  4185 ;;		_format_double
  4186 ;;		_measure_capacitance
  4187 ;;		_measure_inductance
  4188 ;;		_floor
  4189 ;;		_pow
  4190 ;;		_exp
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194                           	psect	text14
  4195  0000'                    __ptext14:
  4196                           	opt stack 0
  4197  0000'                    ___flge:
  4198                           	opt stack 28
  4199                           
  4200                           ; BSR set to: 0
  4201                           ;incstack = 0
  4202  0000' AE09'              	btfss	___flge@ff1+3,7,c
  4203  0002' D009               	goto	l2436
  4204  0004' 6C06'              	negf	___flge@ff1,c
  4205  0006' 1E07'              	comf	___flge@ff1+1,f,c
  4206  0008' B0D8               	btfsc	status,0,c
  4207  000A' 2A07'              	incf	___flge@ff1+1,f,c
  4208  000C' 1E08'              	comf	___flge@ff1+2,f,c
  4209  000E' B0D8               	btfsc	status,0,c
  4210  0010' 2A08'              	incf	___flge@ff1+2,f,c
  4211  0012' 0E80               	movlw	128
  4212  0014' 5609'              	subfwb	___flge@ff1+3,f,c
  4213  0016'                    l2436:
  4214  0016' AE0D'              	btfss	___flge@ff2+3,7,c
  4215  0018' D009               	goto	l752
  4216  001A' 6C0A'              	negf	___flge@ff2,c
  4217  001C' 1E0B'              	comf	___flge@ff2+1,f,c
  4218  001E' B0D8               	btfsc	status,0,c
  4219  0020' 2A0B'              	incf	___flge@ff2+1,f,c
  4220  0022' 1E0C'              	comf	___flge@ff2+2,f,c
  4221  0024' B0D8               	btfsc	status,0,c
  4222  0026' 2A0C'              	incf	___flge@ff2+2,f,c
  4223  0028' 0E80               	movlw	128
  4224  002A' 560D'              	subfwb	___flge@ff2+3,f,c
  4225  002C'                    l752:
  4226  002C' 0E80               	movlw	128
  4227  002E' 1A09'              	xorwf	___flge@ff1+3,f,c
  4228  0030' 1A0D'              	xorwf	___flge@ff2+3,f,c
  4229  0032' 500A'              	movf	___flge@ff2,w,c
  4230  0034' 5C06'              	subwf	___flge@ff1,w,c
  4231  0036' 500B'              	movf	___flge@ff2+1,w,c
  4232  0038' 5807'              	subwfb	___flge@ff1+1,w,c
  4233  003A' 500C'              	movf	___flge@ff2+2,w,c
  4234  003C' 5808'              	subwfb	___flge@ff1+2,w,c
  4235  003E' 500D'              	movf	___flge@ff2+3,w,c
  4236  0040' 5809'              	subwfb	___flge@ff1+3,w,c
  4237  0042' E202               	bc	l2442
  4238  0044' 90D8               	bcf	status,0,c
  4239  0046' 0012               	return	
  4240  0048'                    l2442:
  4241  0048' 80D8               	bsf	status,0,c
  4242  004A' 0012               	return		;funcret
  4243  004C'                    __end_of___flge:
  4244                           	opt stack 0
  4245                           tblptru	equ	0xFF8
  4246                           tblptrh	equ	0xFF7
  4247                           tblptrl	equ	0xFF6
  4248                           tablat	equ	0xFF5
  4249                           prodl	equ	0xFF3
  4250                           intcon	equ	0xFF2
  4251                           intcon2	equ	0xFF1
  4252                           postinc0	equ	0xFEE
  4253                           wreg	equ	0xFE8
  4254                           postdec1	equ	0xFE5
  4255                           fsr1l	equ	0xFE1
  4256                           indf2	equ	0xFDF
  4257                           postinc2	equ	0xFDE
  4258                           postdec2	equ	0xFDD
  4259                           fsr2h	equ	0xFDA
  4260                           fsr2l	equ	0xFD9
  4261                           status	equ	0xFD8
  4262                           
  4263 ;; *************** function ___altofl *****************
  4264 ;; Defined at:
  4265 ;;		line 36 in file "/opt/microchip/xc8/v1.34/sources/common/altofl.c"
  4266 ;; Parameters:    Size  Location     Type
  4267 ;;  c               4   12[BANK0 ] long 
  4268 ;; Auto vars:     Size  Location     Type
  4269 ;;  sign            1   82[COMRAM] unsigned char 
  4270 ;; Return value:  Size  Location     Type
  4271 ;;                  4   12[BANK0 ] unsigned char 
  4272 ;; Registers used:
  4273 ;;		wreg, status,2, status,0, cstack
  4274 ;; Tracked objects:
  4275 ;;		On entry : F/0
  4276 ;;		On exit  : 0/0
  4277 ;;		Unchanged: 0/0
  4278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4279 ;;      Params:         0       4       0       0       0       0       0       0       0
  4280 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4281 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4282 ;;      Totals:         1       4       0       0       0       0       0       0       0
  4283 ;;Total ram usage:        5 bytes
  4284 ;; Hardware stack levels used:    1
  4285 ;; Hardware stack levels required when called:    2
  4286 ;; This function calls:
  4287 ;;		___flpack
  4288 ;; This function is called by:
  4289 ;;		_floor
  4290 ;; This function uses a non-reentrant model
  4291 ;;
  4292                           
  4293                           	psect	text15
  4294  0000'                    __ptext15:
  4295                           	opt stack 0
  4296  0000'                    ___altofl:
  4297                           	opt stack 23
  4298                           
  4299                           ; BSR set to: 0
  4300                           
  4301                           ;incstack = 0
  4302  0000' 6A52'              	clrf	___altofl@sign,c
  4303                           
  4304                           ; BSR set to: 0
  4305  0002' AF00'              	btfss	(___altofl@c+3)& (0+255),7,b
  4306  0004' D00A               	goto	l3424
  4307                           
  4308                           ; BSR set to: 0
  4309  0006' 1F00'              	comf	(___altofl@c+3)& (0+255),f,b
  4310  0008' 1F00'              	comf	(___altofl@c+2)& (0+255),f,b
  4311  000A' 1F00'              	comf	(___altofl@c+1)& (0+255),f,b
  4312  000C' 6D00'              	negf	___altofl@c& (0+255),b
  4313  000E' 0E00               	movlw	0
  4314  0010' 2300'              	addwfc	(___altofl@c+1)& (0+255),f,b
  4315  0012' 2300'              	addwfc	(___altofl@c+2)& (0+255),f,b
  4316  0014' 2300'              	addwfc	(___altofl@c+3)& (0+255),f,b
  4317                           
  4318                           ; BSR set to: 0
  4319  0016' 0E01               	movlw	1
  4320  0018' 6E52'              	movwf	___altofl@sign,c
  4321  001A'                    l3424:
  4322                           
  4323                           ; BSR set to: 0
  4324  001A' C00C' F006'        	movff	___altofl@c,___flpack@arg
  4325  001E' C00D' F007'        	movff	___altofl@c+1,___flpack@arg+1
  4326  0022' C00E' F008'        	movff	___altofl@c+2,___flpack@arg+2
  4327  0026' C00F' F009'        	movff	___altofl@c+3,___flpack@arg+3
  4328  002A' 0E96               	movlw	150
  4329  002C' 6E0A'              	movwf	___flpack@exp,c
  4330  002E' C052' F00B'        	movff	___altofl@sign,___flpack@sign
  4331  0032' EC00' F000'        	call	___flpack	;wreg free
  4332  0036' C006' F00C'        	movff	?___flpack,?___altofl
  4333  003A' C007' F00D'        	movff	?___flpack+1,?___altofl+1
  4334  003E' C008' F00E'        	movff	?___flpack+2,?___altofl+2
  4335  0042' C009' F00F'        	movff	?___flpack+3,?___altofl+3
  4336  0046' 0012               	return		;funcret
  4337  0048'                    __end_of___altofl:
  4338                           	opt stack 0
  4339                           tblptru	equ	0xFF8
  4340                           tblptrh	equ	0xFF7
  4341                           tblptrl	equ	0xFF6
  4342                           tablat	equ	0xFF5
  4343                           prodl	equ	0xFF3
  4344                           intcon	equ	0xFF2
  4345                           intcon2	equ	0xFF1
  4346                           postinc0	equ	0xFEE
  4347                           wreg	equ	0xFE8
  4348                           postdec1	equ	0xFE5
  4349                           fsr1l	equ	0xFE1
  4350                           indf2	equ	0xFDF
  4351                           postinc2	equ	0xFDE
  4352                           postdec2	equ	0xFDD
  4353                           fsr2h	equ	0xFDA
  4354                           fsr2l	equ	0xFD9
  4355                           status	equ	0xFD8
  4356                           
  4357 ;; *************** function ___flsub *****************
  4358 ;; Defined at:
  4359 ;;		line 20 in file "/opt/microchip/xc8/v1.34/sources/common/flsub.c"
  4360 ;; Parameters:    Size  Location     Type
  4361 ;;  f1              4   58[COMRAM] unsigned char 
  4362 ;;  f2              4   62[COMRAM] unsigned char 
  4363 ;; Auto vars:     Size  Location     Type
  4364 ;;		None
  4365 ;; Return value:  Size  Location     Type
  4366 ;;                  4   58[COMRAM] unsigned char 
  4367 ;; Registers used:
  4368 ;;		wreg, status,2, status,0, cstack
  4369 ;; Tracked objects:
  4370 ;;		On entry : 0/0
  4371 ;;		On exit  : 0/0
  4372 ;;		Unchanged: 0/0
  4373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4374 ;;      Params:         8       0       0       0       0       0       0       0       0
  4375 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4376 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4377 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4378 ;;Total ram usage:        8 bytes
  4379 ;; Hardware stack levels used:    1
  4380 ;; Hardware stack levels required when called:    3
  4381 ;; This function calls:
  4382 ;;		___fladd
  4383 ;; This function is called by:
  4384 ;;		_format_double
  4385 ;;		_measure_capacitance
  4386 ;;		_measure_inductance
  4387 ;;		_exp
  4388 ;; This function uses a non-reentrant model
  4389 ;;
  4390                           
  4391                           	psect	text16
  4392  0000'                    __ptext16:
  4393                           	opt stack 0
  4394  0000'                    ___flsub:
  4395                           	opt stack 26
  4396                           
  4397                           ;incstack = 0
  4398  0000' 503E'              	movf	___flsub@f2,w,c
  4399  0002' 103F'              	iorwf	___flsub@f2+1,w,c
  4400  0004' 1040'              	iorwf	___flsub@f2+2,w,c
  4401  0006' 1041'              	iorwf	___flsub@f2+3,w,c
  4402  0008' E002               	bz	l3658
  4403  000A' 0E80               	movlw	128
  4404  000C' 1A41'              	xorwf	___flsub@f2+3,f,c
  4405  000E'                    l3658:
  4406  000E' C03A' F02E'        	movff	___flsub@f1,___fladd@f1
  4407  0012' C03B' F02F'        	movff	___flsub@f1+1,___fladd@f1+1
  4408  0016' C03C' F030'        	movff	___flsub@f1+2,___fladd@f1+2
  4409  001A' C03D' F031'        	movff	___flsub@f1+3,___fladd@f1+3
  4410  001E' C03E' F032'        	movff	___flsub@f2,___fladd@f2
  4411  0022' C03F' F033'        	movff	___flsub@f2+1,___fladd@f2+1
  4412  0026' C040' F034'        	movff	___flsub@f2+2,___fladd@f2+2
  4413  002A' C041' F035'        	movff	___flsub@f2+3,___fladd@f2+3
  4414  002E' EC00' F000'        	call	___fladd	;wreg free
  4415  0032' C02E' F03A'        	movff	?___fladd,?___flsub
  4416  0036' C02F' F03B'        	movff	?___fladd+1,?___flsub+1
  4417  003A' C030' F03C'        	movff	?___fladd+2,?___flsub+2
  4418  003E' C031' F03D'        	movff	?___fladd+3,?___flsub+3
  4419  0042' 0012               	return		;funcret
  4420  0044'                    __end_of___flsub:
  4421                           	opt stack 0
  4422                           tblptru	equ	0xFF8
  4423                           tblptrh	equ	0xFF7
  4424                           tblptrl	equ	0xFF6
  4425                           tablat	equ	0xFF5
  4426                           prodl	equ	0xFF3
  4427                           intcon	equ	0xFF2
  4428                           intcon2	equ	0xFF1
  4429                           postinc0	equ	0xFEE
  4430                           wreg	equ	0xFE8
  4431                           postdec1	equ	0xFE5
  4432                           fsr1l	equ	0xFE1
  4433                           indf2	equ	0xFDF
  4434                           postinc2	equ	0xFDE
  4435                           postdec2	equ	0xFDD
  4436                           fsr2h	equ	0xFDA
  4437                           fsr2l	equ	0xFD9
  4438                           status	equ	0xFD8
  4439                           
  4440 ;; *************** function ___flneg *****************
  4441 ;; Defined at:
  4442 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/flneg.c"
  4443 ;; Parameters:    Size  Location     Type
  4444 ;;  f1              4    6[COMRAM] unsigned char 
  4445 ;; Auto vars:     Size  Location     Type
  4446 ;;		None
  4447 ;; Return value:  Size  Location     Type
  4448 ;;                  4    6[COMRAM] unsigned char 
  4449 ;; Registers used:
  4450 ;;		wreg, status,2, status,0
  4451 ;; Tracked objects:
  4452 ;;		On entry : F/0
  4453 ;;		On exit  : F/0
  4454 ;;		Unchanged: F/0
  4455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4456 ;;      Params:         4       0       0       0       0       0       0       0       0
  4457 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4458 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4459 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4460 ;;Total ram usage:        4 bytes
  4461 ;; Hardware stack levels used:    1
  4462 ;; Hardware stack levels required when called:    1
  4463 ;; This function calls:
  4464 ;;		Nothing
  4465 ;; This function is called by:
  4466 ;;		_pow
  4467 ;;		_exp
  4468 ;; This function uses a non-reentrant model
  4469 ;;
  4470                           
  4471                           	psect	text17
  4472  0000'                    __ptext17:
  4473                           	opt stack 0
  4474  0000'                    ___flneg:
  4475                           	opt stack 25
  4476                           
  4477                           ; BSR set to: 0
  4478                           
  4479                           ;incstack = 0
  4480  0000' 5006'              	movf	___flneg@f1,w,c
  4481  0002' 1007'              	iorwf	___flneg@f1+1,w,c
  4482  0004' 1008'              	iorwf	___flneg@f1+2,w,c
  4483  0006' 1009'              	iorwf	___flneg@f1+3,w,c
  4484  0008' E002               	bz	l2592
  4485                           
  4486                           ; BSR set to: 0
  4487  000A' 0E80               	movlw	128
  4488  000C' 1A09'              	xorwf	___flneg@f1+3,f,c
  4489  000E'                    l2592:
  4490                           
  4491                           ; BSR set to: 0
  4492  000E' C006' F006'        	movff	___flneg@f1,?___flneg
  4493  0012' C007' F007'        	movff	___flneg@f1+1,?___flneg+1
  4494  0016' C008' F008'        	movff	___flneg@f1+2,?___flneg+2
  4495  001A' C009' F009'        	movff	___flneg@f1+3,?___flneg+3
  4496                           
  4497                           ; BSR set to: 0
  4498  001E' 0012               	return		;funcret
  4499  0020'                    __end_of___flneg:
  4500                           	opt stack 0
  4501                           tblptru	equ	0xFF8
  4502                           tblptrh	equ	0xFF7
  4503                           tblptrl	equ	0xFF6
  4504                           tablat	equ	0xFF5
  4505                           prodl	equ	0xFF3
  4506                           intcon	equ	0xFF2
  4507                           intcon2	equ	0xFF1
  4508                           postinc0	equ	0xFEE
  4509                           wreg	equ	0xFE8
  4510                           postdec1	equ	0xFE5
  4511                           fsr1l	equ	0xFE1
  4512                           indf2	equ	0xFDF
  4513                           postinc2	equ	0xFDE
  4514                           postdec2	equ	0xFDD
  4515                           fsr2h	equ	0xFDA
  4516                           fsr2l	equ	0xFD9
  4517                           status	equ	0xFD8
  4518                           
  4519 ;; *************** function ___fldiv *****************
  4520 ;; Defined at:
  4521 ;;		line 54 in file "/opt/microchip/xc8/v1.34/sources/common/fldiv.c"
  4522 ;; Parameters:    Size  Location     Type
  4523 ;;  f1              4   16[COMRAM] unsigned char 
  4524 ;;  f2              4   20[COMRAM] unsigned char 
  4525 ;; Auto vars:     Size  Location     Type
  4526 ;;  f3              4   24[COMRAM] unsigned char 
  4527 ;;  sign            1   30[COMRAM] unsigned char 
  4528 ;;  exp             1   29[COMRAM] unsigned char 
  4529 ;;  cntr            1   28[COMRAM] unsigned char 
  4530 ;; Return value:  Size  Location     Type
  4531 ;;                  4   16[COMRAM] unsigned char 
  4532 ;; Registers used:
  4533 ;;		wreg, status,2, status,0, cstack
  4534 ;; Tracked objects:
  4535 ;;		On entry : 0/0
  4536 ;;		On exit  : 0/0
  4537 ;;		Unchanged: 0/0
  4538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4539 ;;      Params:         8       0       0       0       0       0       0       0       0
  4540 ;;      Locals:         7       0       0       0       0       0       0       0       0
  4541 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4542 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4543 ;;Total ram usage:       15 bytes
  4544 ;; Hardware stack levels used:    1
  4545 ;; Hardware stack levels required when called:    2
  4546 ;; This function calls:
  4547 ;;		___flpack
  4548 ;; This function is called by:
  4549 ;;		_format_double
  4550 ;;		_measure_capacitance
  4551 ;;		_measure_inductance
  4552 ;;		_exp
  4553 ;; This function uses a non-reentrant model
  4554 ;;
  4555                           
  4556                           	psect	text18
  4557  0000'                    __ptext18:
  4558                           	opt stack 0
  4559  0000'                    ___fldiv:
  4560                           	opt stack 27
  4561                           
  4562                           ; BSR set to: 0
  4563                           ;incstack = 0
  4564  0000' 3412'              	rlcf	___fldiv@f1+2,w,c
  4565  0002' 3413'              	rlcf	___fldiv@f1+3,w,c
  4566  0004' 6E1D'              	movwf	___fldiv@exp,c
  4567  0006' 501D'              	movf	___fldiv@exp,w,c
  4568  0008' E105               	bnz	l3622
  4569  000A' 6A10'              	clrf	?___fldiv,c
  4570  000C' 6A11'              	clrf	?___fldiv+1,c
  4571  000E' 6A12'              	clrf	?___fldiv+2,c
  4572  0010' 6A13'              	clrf	?___fldiv+3,c
  4573  0012' 0012               	return	
  4574  0014'                    l3622:
  4575  0014' 3416'              	rlcf	___fldiv@f2+2,w,c
  4576  0016' 3417'              	rlcf	___fldiv@f2+3,w,c
  4577  0018' 6E1E'              	movwf	___fldiv@sign,c
  4578  001A' 501E'              	movf	___fldiv@sign,w,c
  4579  001C' E105               	bnz	l3626
  4580  001E' 6A10'              	clrf	?___fldiv,c
  4581  0020' 6A11'              	clrf	?___fldiv+1,c
  4582  0022' 6A12'              	clrf	?___fldiv+2,c
  4583  0024' 6A13'              	clrf	?___fldiv+3,c
  4584  0026' 0012               	return	
  4585  0028'                    l3626:
  4586  0028' 501E'              	movf	___fldiv@sign,w,c
  4587  002A' 0F89               	addlw	137
  4588  002C' 5E1D'              	subwf	___fldiv@exp,f,c
  4589  002E' C013' F01E'        	movff	___fldiv@f1+3,___fldiv@sign
  4590  0032' 5017'              	movf	___fldiv@f2+3,w,c
  4591  0034' 1A1E'              	xorwf	___fldiv@sign,f,c
  4592  0036' 0E80               	movlw	128
  4593  0038' 161E'              	andwf	___fldiv@sign,f,c
  4594  003A' 8E12'              	bsf	___fldiv@f1+2,7,c
  4595  003C' 6A13'              	clrf	___fldiv@f1+3,c
  4596  003E' 8E16'              	bsf	___fldiv@f2+2,7,c
  4597  0040' 6A17'              	clrf	___fldiv@f2+3,c
  4598  0042' 0E20               	movlw	32
  4599  0044' 6E1C'              	movwf	___fldiv@cntr,c
  4600  0046'                    l3638:
  4601  0046' 90D8               	bcf	status,0,c
  4602  0048' 3618'              	rlcf	___fldiv@f3,f,c
  4603  004A' 3619'              	rlcf	___fldiv@f3+1,f,c
  4604  004C' 361A'              	rlcf	___fldiv@f3+2,f,c
  4605  004E' 361B'              	rlcf	___fldiv@f3+3,f,c
  4606  0050' 5014'              	movf	___fldiv@f2,w,c
  4607  0052' 5C10'              	subwf	___fldiv@f1,w,c
  4608  0054' 5015'              	movf	___fldiv@f2+1,w,c
  4609  0056' 5811'              	subwfb	___fldiv@f1+1,w,c
  4610  0058' 5016'              	movf	___fldiv@f2+2,w,c
  4611  005A' 5812'              	subwfb	___fldiv@f1+2,w,c
  4612  005C' 5017'              	movf	___fldiv@f2+3,w,c
  4613  005E' 5813'              	subwfb	___fldiv@f1+3,w,c
  4614  0060' E309               	bnc	l3646
  4615  0062' 5014'              	movf	___fldiv@f2,w,c
  4616  0064' 5E10'              	subwf	___fldiv@f1,f,c
  4617  0066' 5015'              	movf	___fldiv@f2+1,w,c
  4618  0068' 5A11'              	subwfb	___fldiv@f1+1,f,c
  4619  006A' 5016'              	movf	___fldiv@f2+2,w,c
  4620  006C' 5A12'              	subwfb	___fldiv@f1+2,f,c
  4621  006E' 5017'              	movf	___fldiv@f2+3,w,c
  4622  0070' 5A13'              	subwfb	___fldiv@f1+3,f,c
  4623  0072' 8018'              	bsf	___fldiv@f3,0,c
  4624  0074'                    l3646:
  4625  0074' 90D8               	bcf	status,0,c
  4626  0076' 3610'              	rlcf	___fldiv@f1,f,c
  4627  0078' 3611'              	rlcf	___fldiv@f1+1,f,c
  4628  007A' 3612'              	rlcf	___fldiv@f1+2,f,c
  4629  007C' 3613'              	rlcf	___fldiv@f1+3,f,c
  4630  007E' 2E1C'              	decfsz	___fldiv@cntr,f,c
  4631  0080' D7E2               	goto	l3638
  4632  0082' C018' F006'        	movff	___fldiv@f3,___flpack@arg
  4633  0086' C019' F007'        	movff	___fldiv@f3+1,___flpack@arg+1
  4634  008A' C01A' F008'        	movff	___fldiv@f3+2,___flpack@arg+2
  4635  008E' C01B' F009'        	movff	___fldiv@f3+3,___flpack@arg+3
  4636  0092' C01D' F00A'        	movff	___fldiv@exp,___flpack@exp
  4637  0096' C01E' F00B'        	movff	___fldiv@sign,___flpack@sign
  4638  009A' EC00' F000'        	call	___flpack	;wreg free
  4639  009E' C006' F010'        	movff	?___flpack,?___fldiv
  4640  00A2' C007' F011'        	movff	?___flpack+1,?___fldiv+1
  4641  00A6' C008' F012'        	movff	?___flpack+2,?___fldiv+2
  4642  00AA' C009' F013'        	movff	?___flpack+3,?___fldiv+3
  4643  00AE' 0012               	return		;funcret
  4644  00B0'                    __end_of___fldiv:
  4645                           	opt stack 0
  4646                           tblptru	equ	0xFF8
  4647                           tblptrh	equ	0xFF7
  4648                           tblptrl	equ	0xFF6
  4649                           tablat	equ	0xFF5
  4650                           prodl	equ	0xFF3
  4651                           intcon	equ	0xFF2
  4652                           intcon2	equ	0xFF1
  4653                           postinc0	equ	0xFEE
  4654                           wreg	equ	0xFE8
  4655                           postdec1	equ	0xFE5
  4656                           fsr1l	equ	0xFE1
  4657                           indf2	equ	0xFDF
  4658                           postinc2	equ	0xFDE
  4659                           postdec2	equ	0xFDD
  4660                           fsr2h	equ	0xFDA
  4661                           fsr2l	equ	0xFD9
  4662                           status	equ	0xFD8
  4663                           
  4664 ;; *************** function ___lltofl *****************
  4665 ;; Defined at:
  4666 ;;		line 30 in file "/opt/microchip/xc8/v1.34/sources/common/lltofl.c"
  4667 ;; Parameters:    Size  Location     Type
  4668 ;;  c               4   16[COMRAM] unsigned long 
  4669 ;; Auto vars:     Size  Location     Type
  4670 ;;		None
  4671 ;; Return value:  Size  Location     Type
  4672 ;;                  4   16[COMRAM] unsigned long 
  4673 ;; Registers used:
  4674 ;;		wreg, status,2, status,0, cstack
  4675 ;; Tracked objects:
  4676 ;;		On entry : F/0
  4677 ;;		On exit  : 0/0
  4678 ;;		Unchanged: 0/0
  4679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4680 ;;      Params:         4       0       0       0       0       0       0       0       0
  4681 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4682 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4683 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4684 ;;Total ram usage:        4 bytes
  4685 ;; Hardware stack levels used:    1
  4686 ;; Hardware stack levels required when called:    2
  4687 ;; This function calls:
  4688 ;;		___flpack
  4689 ;; This function is called by:
  4690 ;;		_pow
  4691 ;; This function uses a non-reentrant model
  4692 ;;
  4693                           
  4694                           	psect	text19
  4695  0000'                    __ptext19:
  4696                           	opt stack 0
  4697  0000'                    ___lltofl:
  4698                           	opt stack 25
  4699                           
  4700                           ; BSR set to: 0
  4701                           
  4702                           ;incstack = 0
  4703  0000' C010' F006'        	movff	___lltofl@c,___flpack@arg
  4704  0004' C011' F007'        	movff	___lltofl@c+1,___flpack@arg+1
  4705  0008' C012' F008'        	movff	___lltofl@c+2,___flpack@arg+2
  4706  000C' C013' F009'        	movff	___lltofl@c+3,___flpack@arg+3
  4707  0010' 0E96               	movlw	150
  4708  0012' 6E0A'              	movwf	___flpack@exp,c
  4709  0014' 0E00               	movlw	0
  4710  0016' 6E0B'              	movwf	___flpack@sign,c
  4711  0018' EC00' F000'        	call	___flpack	;wreg free
  4712  001C' C006' F010'        	movff	?___flpack,?___lltofl
  4713  0020' C007' F011'        	movff	?___flpack+1,?___lltofl+1
  4714  0024' C008' F012'        	movff	?___flpack+2,?___lltofl+2
  4715  0028' C009' F013'        	movff	?___flpack+3,?___lltofl+3
  4716  002C' 0012               	return		;funcret
  4717  002E'                    __end_of___lltofl:
  4718                           	opt stack 0
  4719                           tblptru	equ	0xFF8
  4720                           tblptrh	equ	0xFF7
  4721                           tblptrl	equ	0xFF6
  4722                           tablat	equ	0xFF5
  4723                           prodl	equ	0xFF3
  4724                           intcon	equ	0xFF2
  4725                           intcon2	equ	0xFF1
  4726                           postinc0	equ	0xFEE
  4727                           wreg	equ	0xFE8
  4728                           postdec1	equ	0xFE5
  4729                           fsr1l	equ	0xFE1
  4730                           indf2	equ	0xFDF
  4731                           postinc2	equ	0xFDE
  4732                           postdec2	equ	0xFDD
  4733                           fsr2h	equ	0xFDA
  4734                           fsr2l	equ	0xFD9
  4735                           status	equ	0xFD8
  4736                           
  4737 ;; *************** function _log10 *****************
  4738 ;; Defined at:
  4739 ;;		line 39 in file "/opt/microchip/xc8/v1.34/sources/common/log.c"
  4740 ;; Parameters:    Size  Location     Type
  4741 ;;  x               4   76[COMRAM] unsigned long 
  4742 ;; Auto vars:     Size  Location     Type
  4743 ;;		None
  4744 ;; Return value:  Size  Location     Type
  4745 ;;                  4   76[COMRAM] unsigned long 
  4746 ;; Registers used:
  4747 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4748 ;; Tracked objects:
  4749 ;;		On entry : 0/0
  4750 ;;		On exit  : 0/0
  4751 ;;		Unchanged: 0/0
  4752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4753 ;;      Params:         4       0       0       0       0       0       0       0       0
  4754 ;;      Locals:         0       4       0       0       0       0       0       0       0
  4755 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4756 ;;      Totals:         4       4       0       0       0       0       0       0       0
  4757 ;;Total ram usage:        8 bytes
  4758 ;; Hardware stack levels used:    1
  4759 ;; Hardware stack levels required when called:    5
  4760 ;; This function calls:
  4761 ;;		___flmul
  4762 ;;		_log
  4763 ;; This function is called by:
  4764 ;;		_format_double
  4765 ;; This function uses a non-reentrant model
  4766 ;;
  4767                           
  4768                           	psect	text20
  4769  0000'                    __ptext20:
  4770                           	opt stack 0
  4771  0000'                    _log10:
  4772                           	opt stack 23
  4773                           
  4774                           ;incstack = 0
  4775  0000' C04C' F046'        	movff	log10@x,log@x
  4776  0004' C04D' F047'        	movff	log10@x+1,log@x+1
  4777  0008' C04E' F048'        	movff	log10@x+2,log@x+2
  4778  000C' C04F' F049'        	movff	log10@x+3,log@x+3
  4779  0010' EC00' F000'        	call	_log	;wreg free
  4780  0014' C046' F000'        	movff	?_log,_log10$1054
  4781  0018' C047' F001'        	movff	?_log+1,_log10$1054+1
  4782  001C' C048' F002'        	movff	?_log+2,_log10$1054+2
  4783  0020' C049' F003'        	movff	?_log+3,_log10$1054+3
  4784  0024' C000' F01F'        	movff	_log10$1054,___flmul@f1
  4785  0028' C001' F020'        	movff	_log10$1054+1,___flmul@f1+1
  4786  002C' C002' F021'        	movff	_log10$1054+2,___flmul@f1+2
  4787  0030' C003' F022'        	movff	_log10$1054+3,___flmul@f1+3
  4788  0034' 0ED9               	movlw	217
  4789  0036' 6E23'              	movwf	___flmul@f2,c
  4790  0038' 0E5B               	movlw	91
  4791  003A' 6E24'              	movwf	___flmul@f2+1,c
  4792  003C' 0EDE               	movlw	222
  4793  003E' 6E25'              	movwf	___flmul@f2+2,c
  4794  0040' 0E3E               	movlw	62
  4795  0042' 6E26'              	movwf	___flmul@f2+3,c
  4796  0044' EC00' F000'        	call	___flmul	;wreg free
  4797  0048' C01F' F04C'        	movff	?___flmul,?_log10
  4798  004C' C020' F04D'        	movff	?___flmul+1,?_log10+1
  4799  0050' C021' F04E'        	movff	?___flmul+2,?_log10+2
  4800  0054' C022' F04F'        	movff	?___flmul+3,?_log10+3
  4801  0058' 0012               	return		;funcret
  4802  005A'                    __end_of_log10:
  4803                           	opt stack 0
  4804                           tblptru	equ	0xFF8
  4805                           tblptrh	equ	0xFF7
  4806                           tblptrl	equ	0xFF6
  4807                           tablat	equ	0xFF5
  4808                           prodl	equ	0xFF3
  4809                           intcon	equ	0xFF2
  4810                           intcon2	equ	0xFF1
  4811                           postinc0	equ	0xFEE
  4812                           wreg	equ	0xFE8
  4813                           postdec1	equ	0xFE5
  4814                           fsr1l	equ	0xFE1
  4815                           indf2	equ	0xFDF
  4816                           postinc2	equ	0xFDE
  4817                           postdec2	equ	0xFDD
  4818                           fsr2h	equ	0xFDA
  4819                           fsr2l	equ	0xFD9
  4820                           status	equ	0xFD8
  4821                           
  4822 ;; *************** function _log *****************
  4823 ;; Defined at:
  4824 ;;		line 5 in file "/opt/microchip/xc8/v1.34/sources/common/log.c"
  4825 ;; Parameters:    Size  Location     Type
  4826 ;;  x               4   70[COMRAM] unsigned long 
  4827 ;; Auto vars:     Size  Location     Type
  4828 ;;  exponent        2   74[COMRAM] int 
  4829 ;; Return value:  Size  Location     Type
  4830 ;;                  4   70[COMRAM] int 
  4831 ;; Registers used:
  4832 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4833 ;; Tracked objects:
  4834 ;;		On entry : 0/0
  4835 ;;		On exit  : 0/0
  4836 ;;		Unchanged: 0/0
  4837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4838 ;;      Params:         4       0       0       0       0       0       0       0       0
  4839 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4840 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4841 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4842 ;;Total ram usage:        6 bytes
  4843 ;; Hardware stack levels used:    1
  4844 ;; Hardware stack levels required when called:    4
  4845 ;; This function calls:
  4846 ;;		___awtofl
  4847 ;;		___fladd
  4848 ;;		___flmul
  4849 ;;		_eval_poly
  4850 ;;		_frexp
  4851 ;; This function is called by:
  4852 ;;		_log10
  4853 ;;		_pow
  4854 ;; This function uses a non-reentrant model
  4855 ;;
  4856                           
  4857                           	psect	text21
  4858  0000'                    __ptext21:
  4859                           	opt stack 0
  4860  0000'                    _log:
  4861                           	opt stack 23
  4862                           
  4863                           ;incstack = 0
  4864  0000' AE49'              	btfss	log@x+3,7,c
  4865  0002' D005               	goto	l3686
  4866  0004' 6A46'              	clrf	?_log,c
  4867  0006' 6A47'              	clrf	?_log+1,c
  4868  0008' 6A48'              	clrf	?_log+2,c
  4869  000A' 6A49'              	clrf	?_log+3,c
  4870  000C' 0012               	return	
  4871  000E'                    l3686:
  4872  000E' 5046'              	movf	log@x,w,c
  4873  0010' 1047'              	iorwf	log@x+1,w,c
  4874  0012' 1048'              	iorwf	log@x+2,w,c
  4875  0014' 1049'              	iorwf	log@x+3,w,c
  4876  0016' E105               	bnz	l3690
  4877  0018' 6A46'              	clrf	?_log,c
  4878  001A' 6A47'              	clrf	?_log+1,c
  4879  001C' 6A48'              	clrf	?_log+2,c
  4880  001E' 6A49'              	clrf	?_log+3,c
  4881  0020' 0012               	return	
  4882  0022'                    l3690:
  4883  0022' 6A23'              	clrf	___flmul@f2,c
  4884  0024' 6A24'              	clrf	___flmul@f2+1,c
  4885  0026' 6A25'              	clrf	___flmul@f2+2,c
  4886  0028' 0E40               	movlw	64
  4887  002A' 6E26'              	movwf	___flmul@f2+3,c
  4888  002C' 0E00'              	movlw	low log@exponent
  4889  002E' 6E0A'              	movwf	frexp@eptr,c
  4890  0030' C046' F006'        	movff	log@x,frexp@value
  4891  0034' C047' F007'        	movff	log@x+1,frexp@value+1
  4892  0038' C048' F008'        	movff	log@x+2,frexp@value+2
  4893  003C' C049' F009'        	movff	log@x+3,frexp@value+3
  4894  0040' EC00' F000'        	call	_frexp	;wreg free
  4895  0044' C006' F01F'        	movff	?_frexp,___flmul@f1
  4896  0048' C007' F020'        	movff	?_frexp+1,___flmul@f1+1
  4897  004C' C008' F021'        	movff	?_frexp+2,___flmul@f1+2
  4898  0050' C009' F022'        	movff	?_frexp+3,___flmul@f1+3
  4899  0054' EC00' F000'        	call	___flmul	;wreg free
  4900  0058' C01F' F02E'        	movff	?___flmul,___fladd@f1
  4901  005C' C020' F02F'        	movff	?___flmul+1,___fladd@f1+1
  4902  0060' C021' F030'        	movff	?___flmul+2,___fladd@f1+2
  4903  0064' C022' F031'        	movff	?___flmul+3,___fladd@f1+3
  4904  0068' D857               	call	PL26	;call to abstracted procedure
  4905  006A' EC00' F000'        	call	___fladd	;wreg free
  4906  006E' C02E' F046'        	movff	?___fladd,log@x
  4907  0072' C02F' F047'        	movff	?___fladd+1,log@x+1
  4908  0076' C030' F048'        	movff	?___fladd+2,log@x+2
  4909  007A' C031' F049'        	movff	?___fladd+3,log@x+3
  4910  007E' 064A'              	decf	log@exponent,f,c
  4911  0080' A0D8               	btfss	status,0,c
  4912  0082' 064B'              	decf	log@exponent+1,f,c
  4913  0084' C046' F03A'        	movff	log@x,eval_poly@x
  4914  0088' C047' F03B'        	movff	log@x+1,eval_poly@x+1
  4915  008C' C048' F03C'        	movff	log@x+2,eval_poly@x+2
  4916  0090' C049' F03D'        	movff	log@x+3,eval_poly@x+3
  4917  0094' 0E00'              	movlw	low log@coeff
  4918  0096' 6E3E'              	movwf	eval_poly@d,c
  4919  0098' 6A40'              	clrf	eval_poly@n+1,c
  4920  009A' 0E08               	movlw	8
  4921  009C' 6E3F'              	movwf	eval_poly@n,c
  4922  009E' EC00' F000'        	call	_eval_poly	;wreg free
  4923  00A2' C03A' F046'        	movff	?_eval_poly,log@x
  4924  00A6' C03B' F047'        	movff	?_eval_poly+1,log@x+1
  4925  00AA' C03C' F048'        	movff	?_eval_poly+2,log@x+2
  4926  00AE' C03D' F049'        	movff	?_eval_poly+3,log@x+3
  4927  00B2' 0E18               	movlw	24
  4928  00B4' 6E23'              	movwf	___flmul@f2,c
  4929  00B6' 0E72               	movlw	114
  4930  00B8' 6E24'              	movwf	___flmul@f2+1,c
  4931  00BA' 0E31               	movlw	49
  4932  00BC' 6E25'              	movwf	___flmul@f2+2,c
  4933  00BE' 0E3F               	movlw	63
  4934  00C0' 6E26'              	movwf	___flmul@f2+3,c
  4935  00C2' C04A' F010'        	movff	log@exponent,___awtofl@c
  4936  00C6' C04B' F011'        	movff	log@exponent+1,___awtofl@c+1
  4937  00CA' EC00' F000'        	call	___awtofl	;wreg free
  4938  00CE' C010' F01F'        	movff	?___awtofl,___flmul@f1
  4939  00D2' C011' F020'        	movff	?___awtofl+1,___flmul@f1+1
  4940  00D6' C012' F021'        	movff	?___awtofl+2,___flmul@f1+2
  4941  00DA' C013' F022'        	movff	?___awtofl+3,___flmul@f1+3
  4942  00DE' EC00' F000'        	call	___flmul	;wreg free
  4943  00E2' C01F' F02E'        	movff	?___flmul,___fladd@f1
  4944  00E6' C020' F02F'        	movff	?___flmul+1,___fladd@f1+1
  4945  00EA' C021' F030'        	movff	?___flmul+2,___fladd@f1+2
  4946  00EE' C022' F031'        	movff	?___flmul+3,___fladd@f1+3
  4947  00F2' C046' F032'        	movff	log@x,___fladd@f2
  4948  00F6' C047' F033'        	movff	log@x+1,___fladd@f2+1
  4949  00FA' C048' F034'        	movff	log@x+2,___fladd@f2+2
  4950  00FE' C049' F035'        	movff	log@x+3,___fladd@f2+3
  4951  0102' EC00' F000'        	call	___fladd	;wreg free
  4952  0106' C02E' F046'        	movff	?___fladd,?_log
  4953  010A' C02F' F047'        	movff	?___fladd+1,?_log+1
  4954  010E' C030' F048'        	movff	?___fladd+2,?_log+2
  4955  0112' C031' F049'        	movff	?___fladd+3,?_log+3
  4956  0116' 0012               	return		;funcret
  4957  0118'                    __end_of_log:
  4958                           	opt stack 0
  4959  0118'                    PL26:
  4960                           	opt stack 23
  4961  0118' 0E00               	movlw	0
  4962  011A' 6E32'              	movwf	___fladd@f2,c
  4963  011C' 6E33'              	movwf	___fladd@f2+1,c
  4964  011E' 0E80               	movlw	128
  4965  0120' 6E34'              	movwf	___fladd@f2+2,c
  4966  0122' 0EBF               	movlw	191
  4967  0124' 6E35'              	movwf	___fladd@f2+3,c
  4968  0126' 0CBF               	retlw	191
  4969  0128'                    __end_ofPL26:
  4970                           	opt stack 0
  4971                           tblptru	equ	0xFF8
  4972                           tblptrh	equ	0xFF7
  4973                           tblptrl	equ	0xFF6
  4974                           tablat	equ	0xFF5
  4975                           prodl	equ	0xFF3
  4976                           intcon	equ	0xFF2
  4977                           intcon2	equ	0xFF1
  4978                           postinc0	equ	0xFEE
  4979                           wreg	equ	0xFE8
  4980                           postdec1	equ	0xFE5
  4981                           fsr1l	equ	0xFE1
  4982                           indf2	equ	0xFDF
  4983                           postinc2	equ	0xFDE
  4984                           postdec2	equ	0xFDD
  4985                           fsr2h	equ	0xFDA
  4986                           fsr2l	equ	0xFD9
  4987                           status	equ	0xFD8
  4988                           
  4989 ;; *************** function _frexp *****************
  4990 ;; Defined at:
  4991 ;;		line 254 in file "/opt/microchip/xc8/v1.34/sources/common/frexp.c"
  4992 ;; Parameters:    Size  Location     Type
  4993 ;;  value           4    6[COMRAM] int 
  4994 ;;  eptr            1   10[COMRAM] PTR int 
  4995 ;;		 -> log@exponent(2), floor@expon(2), 
  4996 ;; Auto vars:     Size  Location     Type
  4997 ;;		None
  4998 ;; Return value:  Size  Location     Type
  4999 ;;                  4    6[COMRAM] PTR int 
  5000 ;; Registers used:
  5001 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5002 ;; Tracked objects:
  5003 ;;		On entry : 0/0
  5004 ;;		On exit  : 0/0
  5005 ;;		Unchanged: 0/0
  5006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5007 ;;      Params:         5       0       0       0       0       0       0       0       0
  5008 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5009 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5010 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5011 ;;Total ram usage:        7 bytes
  5012 ;; Hardware stack levels used:    1
  5013 ;; Hardware stack levels required when called:    1
  5014 ;; This function calls:
  5015 ;;		Nothing
  5016 ;; This function is called by:
  5017 ;;		_floor
  5018 ;;		_log
  5019 ;; This function uses a non-reentrant model
  5020 ;;
  5021                           
  5022                           	psect	text22
  5023  0000'                    __ptext22:
  5024                           	opt stack 0
  5025  0000'                    _frexp:
  5026                           	opt stack 25
  5027                           
  5028                           ;incstack = 0
  5029  0000' 5006'              	movf	frexp@value,w,c
  5030  0002' 1007'              	iorwf	frexp@value+1,w,c
  5031  0004' 1008'              	iorwf	frexp@value+2,w,c
  5032  0006' 1009'              	iorwf	frexp@value+3,w,c
  5033  0008' E10B               	bnz	l3548
  5034  000A' 500A'              	movf	frexp@eptr,w,c
  5035  000C' 6ED9               	movwf	fsr2l,c
  5036  000E' 6ADA               	clrf	fsr2h,c
  5037  0010' 0E00               	movlw	0
  5038  0012' 6ADE               	clrf	postinc2,c
  5039  0014' 6ADD               	clrf	postdec2,c
  5040  0016' 6A06'              	clrf	?_frexp,c
  5041  0018' 6A07'              	clrf	?_frexp+1,c
  5042  001A' 6A08'              	clrf	?_frexp+2,c
  5043  001C' 6A09'              	clrf	?_frexp+3,c
  5044  001E' 0012               	return	
  5045  0020'                    l3548:
  5046  0020' 5009'              	movf	frexp@value+3,w,c
  5047  0022' 0B7F               	andlw	127
  5048  0024' 6E00'              	movwf	??_frexp& (0+255),c
  5049  0026' 6A00'              	clrf	(??_frexp+1)& (0+255),c
  5050  0028' 90D8               	bcf	status,0,c
  5051  002A' 360B'              	rlcf	??_frexp,f,c
  5052  002C' 360C'              	rlcf	??_frexp+1,f,c
  5053  002E' 500A'              	movf	frexp@eptr,w,c
  5054  0030' 6ED9               	movwf	fsr2l,c
  5055  0032' 6ADA               	clrf	fsr2h,c
  5056  0034' C00B' FFDE         	movff	??_frexp,postinc2
  5057  0038' C00C' FFDD         	movff	??_frexp+1,postdec2
  5058  003C' 500A'              	movf	frexp@eptr,w,c
  5059  003E' 6ED9               	movwf	fsr2l,c
  5060  0040' 6ADA               	clrf	fsr2h,c
  5061  0042' 0E01               	movlw	1
  5062  0044' AE08'              	btfss	frexp@value+2,7,c
  5063  0046' 0E00               	movlw	0
  5064  0048' 12DE               	iorwf	postinc2,f,c
  5065  004A' 0E00               	movlw	0
  5066  004C' 12DD               	iorwf	postdec2,f,c
  5067  004E' 500A'              	movf	frexp@eptr,w,c
  5068  0050' 6ED9               	movwf	fsr2l,c
  5069  0052' 6ADA               	clrf	fsr2h,c
  5070  0054' 0E82               	movlw	130
  5071  0056' 26DE               	addwf	postinc2,f,c
  5072  0058' 0EFF               	movlw	255
  5073  005A' 22DD               	addwfc	postdec2,f,c
  5074  005C' 5009'              	movf	frexp@value+3,w,c
  5075  005E' 0B80               	andlw	-128
  5076  0060' 093F               	iorlw	63
  5077  0062' 6E09'              	movwf	frexp@value+3,c
  5078  0064' 9E08'              	bcf	frexp@value+2,7,c
  5079  0066' C006' F006'        	movff	frexp@value,?_frexp
  5080  006A' C007' F007'        	movff	frexp@value+1,?_frexp+1
  5081  006E' C008' F008'        	movff	frexp@value+2,?_frexp+2
  5082  0072' C009' F009'        	movff	frexp@value+3,?_frexp+3
  5083  0076' 0012               	return		;funcret
  5084  0078'                    __end_of_frexp:
  5085                           	opt stack 0
  5086                           tblptru	equ	0xFF8
  5087                           tblptrh	equ	0xFF7
  5088                           tblptrl	equ	0xFF6
  5089                           tablat	equ	0xFF5
  5090                           prodl	equ	0xFF3
  5091                           intcon	equ	0xFF2
  5092                           intcon2	equ	0xFF1
  5093                           postinc0	equ	0xFEE
  5094                           wreg	equ	0xFE8
  5095                           postdec1	equ	0xFE5
  5096                           fsr1l	equ	0xFE1
  5097                           indf2	equ	0xFDF
  5098                           postinc2	equ	0xFDE
  5099                           postdec2	equ	0xFDD
  5100                           fsr2h	equ	0xFDA
  5101                           fsr2l	equ	0xFD9
  5102                           status	equ	0xFD8
  5103                           
  5104 ;; *************** function _eval_poly *****************
  5105 ;; Defined at:
  5106 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/evalpoly.c"
  5107 ;; Parameters:    Size  Location     Type
  5108 ;;  x               4   58[COMRAM] PTR int 
  5109 ;;  d               1   62[COMRAM] PTR const 
  5110 ;;		 -> exp@coeff(40), log@coeff(36), 
  5111 ;;  n               2   63[COMRAM] int 
  5112 ;; Auto vars:     Size  Location     Type
  5113 ;;  res             4   66[COMRAM] int 
  5114 ;; Return value:  Size  Location     Type
  5115 ;;                  4   58[COMRAM] int 
  5116 ;; Registers used:
  5117 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5118 ;; Tracked objects:
  5119 ;;		On entry : 0/0
  5120 ;;		On exit  : 0/0
  5121 ;;		Unchanged: 0/0
  5122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5123 ;;      Params:         7       0       0       0       0       0       0       0       0
  5124 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5125 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5126 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5127 ;;Total ram usage:       12 bytes
  5128 ;; Hardware stack levels used:    1
  5129 ;; Hardware stack levels required when called:    3
  5130 ;; This function calls:
  5131 ;;		___fladd
  5132 ;;		___flmul
  5133 ;; This function is called by:
  5134 ;;		_log
  5135 ;;		_exp
  5136 ;; This function uses a non-reentrant model
  5137 ;;
  5138                           
  5139                           	psect	text23
  5140  0000'                    __ptext23:
  5141                           	opt stack 0
  5142  0000'                    _eval_poly:
  5143                           	opt stack 0
  5144                           
  5145                           ;incstack = 0
  5146  0000' D84B               	call	PL16	;call to abstracted procedure
  5147  0002' CFF5 F042'         	movff	tablat,eval_poly@res
  5148  0006' 0009               	tblrd		*+
  5149  0008' CFF5 F043'         	movff	tablat,eval_poly@res+1
  5150  000C' 0009               	tblrd		*+
  5151  000E' CFF5 F044'         	movff	tablat,eval_poly@res+2
  5152  0012' 000A               	tblrd		*-
  5153  0014' CFF5 F045'         	movff	tablat,eval_poly@res+3
  5154  0018' D033               	goto	l3676
  5155  001A'                    l3674:
  5156  001A' C042' F023'        	movff	eval_poly@res,___flmul@f2
  5157  001E' C043' F024'        	movff	eval_poly@res+1,___flmul@f2+1
  5158  0022' C044' F025'        	movff	eval_poly@res+2,___flmul@f2+2
  5159  0026' C045' F026'        	movff	eval_poly@res+3,___flmul@f2+3
  5160  002A' C03A' F01F'        	movff	eval_poly@x,___flmul@f1
  5161  002E' C03B' F020'        	movff	eval_poly@x+1,___flmul@f1+1
  5162  0032' C03C' F021'        	movff	eval_poly@x+2,___flmul@f1+2
  5163  0036' C03D' F022'        	movff	eval_poly@x+3,___flmul@f1+3
  5164  003A' EC00' F000'        	call	___flmul	;wreg free
  5165  003E' C01F' F02E'        	movff	?___flmul,___fladd@f1
  5166  0042' C020' F02F'        	movff	?___flmul+1,___fladd@f1+1
  5167  0046' C021' F030'        	movff	?___flmul+2,___fladd@f1+2
  5168  004A' C022' F031'        	movff	?___flmul+3,___fladd@f1+3
  5169  004E' 063F'              	decf	eval_poly@n,f,c
  5170  0050' A0D8               	btfss	status,0,c
  5171  0052' 0640'              	decf	eval_poly@n+1,f,c
  5172  0054' D821               	call	PL16	;call to abstracted procedure
  5173  0056' CFF5 F032'         	movff	tablat,___fladd@f2
  5174  005A' 0009               	tblrd		*+
  5175  005C' CFF5 F033'         	movff	tablat,___fladd@f2+1
  5176  0060' 0009               	tblrd		*+
  5177  0062' CFF5 F034'         	movff	tablat,___fladd@f2+2
  5178  0066' 000A               	tblrd		*-
  5179  0068' CFF5 F035'         	movff	tablat,___fladd@f2+3
  5180  006C' EC00' F000'        	call	___fladd	;wreg free
  5181  0070' C02E' F042'        	movff	?___fladd,eval_poly@res
  5182  0074' C02F' F043'        	movff	?___fladd+1,eval_poly@res+1
  5183  0078' C030' F044'        	movff	?___fladd+2,eval_poly@res+2
  5184  007C' C031' F045'        	movff	?___fladd+3,eval_poly@res+3
  5185  0080'                    l3676:
  5186  0080' 503F'              	movf	eval_poly@n,w,c
  5187  0082' 1040'              	iorwf	eval_poly@n+1,w,c
  5188  0084' E1CA               	bnz	l3674
  5189  0086' C042' F03A'        	movff	eval_poly@res,?_eval_poly
  5190  008A' C043' F03B'        	movff	eval_poly@res+1,?_eval_poly+1
  5191  008E' C044' F03C'        	movff	eval_poly@res+2,?_eval_poly+2
  5192  0092' C045' F03D'        	movff	eval_poly@res+3,?_eval_poly+3
  5193  0096' 0012               	return		;funcret
  5194  0098'                    __end_of_eval_poly:
  5195                           	opt stack 0
  5196  0098'                    PL16:
  5197                           	opt stack 23
  5198  0098' 503F'              	movf	eval_poly@n,w,c
  5199  009A' 0D04               	mullw	4
  5200  009C' 503E'              	movf	eval_poly@d,w,c
  5201  009E' 24F3               	addwf	prodl,w,c
  5202  00A0' 6E00'              	movwf	??_eval_poly& (0+255),c
  5203  00A2' C041' FFF6         	movff	??_eval_poly,tblptrl
  5204  00A6'                    	if	0	;There is only one active tblptr byte
  5205  00A6'                    	endif
  5206  00A6'                    	if	0	;tblptru may be non-zero
  5207  00A6'                    	endif
  5208  00A6'                    	if	0	;tblptru may be non-zero
  5209  00A6'                    	endif
  5210  00A6' 0009               	tblrd		*+
  5211  00A8' 0012               	return	
  5212  00AA'                    __end_ofPL16:
  5213                           	opt stack 0
  5214                           tblptru	equ	0xFF8
  5215                           tblptrh	equ	0xFF7
  5216                           tblptrl	equ	0xFF6
  5217                           tablat	equ	0xFF5
  5218                           prodl	equ	0xFF3
  5219                           intcon	equ	0xFF2
  5220                           intcon2	equ	0xFF1
  5221                           postinc0	equ	0xFEE
  5222                           wreg	equ	0xFE8
  5223                           postdec1	equ	0xFE5
  5224                           fsr1l	equ	0xFE1
  5225                           indf2	equ	0xFDF
  5226                           postinc2	equ	0xFDE
  5227                           postdec2	equ	0xFDD
  5228                           fsr2h	equ	0xFDA
  5229                           fsr2l	equ	0xFD9
  5230                           status	equ	0xFD8
  5231                           
  5232 ;; *************** function ___flmul *****************
  5233 ;; Defined at:
  5234 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/flmul.c"
  5235 ;; Parameters:    Size  Location     Type
  5236 ;;  f1              4   31[COMRAM] int 
  5237 ;;  f2              4   35[COMRAM] int 
  5238 ;; Auto vars:     Size  Location     Type
  5239 ;;  f3_as_produc    4   40[COMRAM] unsigned long 
  5240 ;;  sign            1   45[COMRAM] unsigned char 
  5241 ;;  cntr            1   44[COMRAM] unsigned char 
  5242 ;;  exp             1   39[COMRAM] unsigned char 
  5243 ;; Return value:  Size  Location     Type
  5244 ;;                  4   31[COMRAM] unsigned char 
  5245 ;; Registers used:
  5246 ;;		wreg, status,2, status,0, cstack
  5247 ;; Tracked objects:
  5248 ;;		On entry : 0/0
  5249 ;;		On exit  : 0/0
  5250 ;;		Unchanged: 0/0
  5251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5252 ;;      Params:         8       0       0       0       0       0       0       0       0
  5253 ;;      Locals:         7       0       0       0       0       0       0       0       0
  5254 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5255 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5256 ;;Total ram usage:       15 bytes
  5257 ;; Hardware stack levels used:    1
  5258 ;; Hardware stack levels required when called:    2
  5259 ;; This function calls:
  5260 ;;		___flpack
  5261 ;; This function is called by:
  5262 ;;		_format_double
  5263 ;;		_measure_capacitance
  5264 ;;		_measure_inductance
  5265 ;;		_log
  5266 ;;		_log10
  5267 ;;		_pow
  5268 ;;		_eval_poly
  5269 ;;		_exp
  5270 ;; This function uses a non-reentrant model
  5271 ;;
  5272                           
  5273                           	psect	text24
  5274  0000'                    __ptext24:
  5275                           	opt stack 0
  5276  0000'                    ___flmul:
  5277                           	opt stack 27
  5278                           
  5279                           ;incstack = 0
  5280  0000' 3421'              	rlcf	___flmul@f1+2,w,c
  5281  0002' 3422'              	rlcf	___flmul@f1+3,w,c
  5282  0004' 6E27'              	movwf	___flmul@exp,c
  5283  0006' 5027'              	movf	___flmul@exp,w,c
  5284  0008' E105               	bnz	l3498
  5285  000A' 6A1F'              	clrf	?___flmul,c
  5286  000C' 6A20'              	clrf	?___flmul+1,c
  5287  000E' 6A21'              	clrf	?___flmul+2,c
  5288  0010' 6A22'              	clrf	?___flmul+3,c
  5289  0012' 0012               	return	
  5290  0014'                    l3498:
  5291  0014' 3425'              	rlcf	___flmul@f2+2,w,c
  5292  0016' 3426'              	rlcf	___flmul@f2+3,w,c
  5293  0018' 6E2D'              	movwf	___flmul@sign,c
  5294  001A' 502D'              	movf	___flmul@sign,w,c
  5295  001C' E105               	bnz	l3502
  5296  001E' 6A1F'              	clrf	?___flmul,c
  5297  0020' 6A20'              	clrf	?___flmul+1,c
  5298  0022' 6A21'              	clrf	?___flmul+2,c
  5299  0024' 6A22'              	clrf	?___flmul+3,c
  5300  0026' 0012               	return	
  5301  0028'                    l3502:
  5302  0028' 502D'              	movf	___flmul@sign,w,c
  5303  002A' 0F7B               	addlw	123
  5304  002C' 2627'              	addwf	___flmul@exp,f,c
  5305  002E' C022' F02D'        	movff	___flmul@f1+3,___flmul@sign
  5306  0032' 5026'              	movf	___flmul@f2+3,w,c
  5307  0034' 1A2D'              	xorwf	___flmul@sign,f,c
  5308  0036' 0E80               	movlw	128
  5309  0038' 162D'              	andwf	___flmul@sign,f,c
  5310  003A' 8E21'              	bsf	___flmul@f1+2,7,c
  5311  003C' 8E25'              	bsf	___flmul@f2+2,7,c
  5312  003E' 0E00               	movlw	0
  5313  0040' 1626'              	andwf	___flmul@f2+3,f,c
  5314  0042' 6A28'              	clrf	___flmul@f3_as_product,c
  5315  0044' 6A29'              	clrf	___flmul@f3_as_product+1,c
  5316  0046' 6A2A'              	clrf	___flmul@f3_as_product+2,c
  5317  0048' 6A2B'              	clrf	___flmul@f3_as_product+3,c
  5318  004A' 0E07               	movlw	7
  5319  004C' 6E2C'              	movwf	___flmul@cntr,c
  5320  004E'                    l3514:
  5321  004E' B01F'              	btfsc	___flmul@f1,0,c
  5322  0050' D829               	call	PL18	;call to abstracted procedure
  5323  0052' D831               	call	PL36	;call to abstracted procedure
  5324  0054' 3623'              	rlcf	___flmul@f2,f,c
  5325  0056' 3624'              	rlcf	___flmul@f2+1,f,c
  5326  0058' 3625'              	rlcf	___flmul@f2+2,f,c
  5327  005A' 3626'              	rlcf	___flmul@f2+3,f,c
  5328  005C' 2E2C'              	decfsz	___flmul@cntr,f,c
  5329  005E' D7F7               	goto	l3514
  5330  0060' 0E11               	movlw	17
  5331  0062' 6E2C'              	movwf	___flmul@cntr,c
  5332  0064'                    l3526:
  5333  0064' B01F'              	btfsc	___flmul@f1,0,c
  5334  0066' D81E               	call	PL18	;call to abstracted procedure
  5335  0068' D826               	call	PL36	;call to abstracted procedure
  5336  006A' 322B'              	rrcf	___flmul@f3_as_product+3,f,c
  5337  006C' 322A'              	rrcf	___flmul@f3_as_product+2,f,c
  5338  006E' 3229'              	rrcf	___flmul@f3_as_product+1,f,c
  5339  0070' 3228'              	rrcf	___flmul@f3_as_product,f,c
  5340  0072' 2E2C'              	decfsz	___flmul@cntr,f,c
  5341  0074' D7F7               	goto	l3526
  5342  0076' C028' F006'        	movff	___flmul@f3_as_product,___flpack@arg
  5343  007A' C029' F007'        	movff	___flmul@f3_as_product+1,___flpack@arg+1
  5344  007E' C02A' F008'        	movff	___flmul@f3_as_product+2,___flpack@arg+2
  5345  0082' C02B' F009'        	movff	___flmul@f3_as_product+3,___flpack@arg+3
  5346  0086' C027' F00A'        	movff	___flmul@exp,___flpack@exp
  5347  008A' C02D' F00B'        	movff	___flmul@sign,___flpack@sign
  5348  008E' EC00' F000'        	call	___flpack	;wreg free
  5349  0092' C006' F01F'        	movff	?___flpack,?___flmul
  5350  0096' C007' F020'        	movff	?___flpack+1,?___flmul+1
  5351  009A' C008' F021'        	movff	?___flpack+2,?___flmul+2
  5352  009E' C009' F022'        	movff	?___flpack+3,?___flmul+3
  5353  00A2' 0012               	return		;funcret
  5354  00A4'                    __end_of___flmul:
  5355                           	opt stack 0
  5356  00A4'                    PL18:
  5357                           	opt stack 27
  5358  00A4' 5023'              	movf	___flmul@f2,w,c
  5359  00A6' 2628'              	addwf	___flmul@f3_as_product,f,c
  5360  00A8' 5024'              	movf	___flmul@f2+1,w,c
  5361  00AA' 2229'              	addwfc	___flmul@f3_as_product+1,f,c
  5362  00AC' 5025'              	movf	___flmul@f2+2,w,c
  5363  00AE' 222A'              	addwfc	___flmul@f3_as_product+2,f,c
  5364  00B0' 5026'              	movf	___flmul@f2+3,w,c
  5365  00B2' 222B'              	addwfc	___flmul@f3_as_product+3,f,c
  5366  00B4' 0012               	return	
  5367  00B6'                    __end_ofPL18:
  5368                           	opt stack 0
  5369  00B6'                    PL36:
  5370                           	opt stack 27
  5371  00B6' 90D8               	bcf	status,0,c
  5372  00B8' 3222'              	rrcf	___flmul@f1+3,f,c
  5373  00BA' 3221'              	rrcf	___flmul@f1+2,f,c
  5374  00BC' 3220'              	rrcf	___flmul@f1+1,f,c
  5375  00BE' 321F'              	rrcf	___flmul@f1,f,c
  5376  00C0' 90D8               	bcf	status,0,c
  5377  00C2' 0012               	return	
  5378  00C4'                    __end_ofPL36:
  5379                           	opt stack 0
  5380                           tblptru	equ	0xFF8
  5381                           tblptrh	equ	0xFF7
  5382                           tblptrl	equ	0xFF6
  5383                           tablat	equ	0xFF5
  5384                           prodl	equ	0xFF3
  5385                           intcon	equ	0xFF2
  5386                           intcon2	equ	0xFF1
  5387                           postinc0	equ	0xFEE
  5388                           wreg	equ	0xFE8
  5389                           postdec1	equ	0xFE5
  5390                           fsr1l	equ	0xFE1
  5391                           indf2	equ	0xFDF
  5392                           postinc2	equ	0xFDE
  5393                           postdec2	equ	0xFDD
  5394                           fsr2h	equ	0xFDA
  5395                           fsr2l	equ	0xFD9
  5396                           status	equ	0xFD8
  5397                           
  5398 ;; *************** function ___fladd *****************
  5399 ;; Defined at:
  5400 ;;		line 88 in file "/opt/microchip/xc8/v1.34/sources/common/fladd.c"
  5401 ;; Parameters:    Size  Location     Type
  5402 ;;  f1              4   46[COMRAM] unsigned char 
  5403 ;;  f2              4   50[COMRAM] unsigned char 
  5404 ;; Auto vars:     Size  Location     Type
  5405 ;;  exp1            1   57[COMRAM] unsigned char 
  5406 ;;  exp2            1   56[COMRAM] unsigned char 
  5407 ;;  sign            1   55[COMRAM] unsigned char 
  5408 ;; Return value:  Size  Location     Type
  5409 ;;                  4   46[COMRAM] unsigned char 
  5410 ;; Registers used:
  5411 ;;		wreg, status,2, status,0, cstack
  5412 ;; Tracked objects:
  5413 ;;		On entry : 0/0
  5414 ;;		On exit  : 0/0
  5415 ;;		Unchanged: 0/0
  5416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5417 ;;      Params:         8       0       0       0       0       0       0       0       0
  5418 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5419 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5420 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5421 ;;Total ram usage:       12 bytes
  5422 ;; Hardware stack levels used:    1
  5423 ;; Hardware stack levels required when called:    2
  5424 ;; This function calls:
  5425 ;;		___flpack
  5426 ;; This function is called by:
  5427 ;;		_floor
  5428 ;;		___flsub
  5429 ;;		_log
  5430 ;;		_eval_poly
  5431 ;; This function uses a non-reentrant model
  5432 ;;
  5433                           
  5434                           	psect	text25
  5435  0000'                    __ptext25:
  5436                           	opt stack 0
  5437  0000'                    ___fladd:
  5438                           	opt stack 26
  5439                           
  5440                           ;incstack = 0
  5441  0000' 3430'              	rlcf	___fladd@f1+2,w,c
  5442  0002' 3431'              	rlcf	___fladd@f1+3,w,c
  5443  0004' 6E39'              	movwf	___fladd@exp1,c
  5444  0006' 3434'              	rlcf	___fladd@f2+2,w,c
  5445  0008' 3435'              	rlcf	___fladd@f2+3,w,c
  5446  000A' 6E38'              	movwf	___fladd@exp2,c
  5447  000C' 5039'              	movf	___fladd@exp1,w,c
  5448  000E' E009               	bz	l712
  5449  0010' 5038'              	movf	___fladd@exp2,w,c
  5450  0012' 5C39'              	subwf	___fladd@exp1,w,c
  5451  0014' E20F               	bc	l3434
  5452  0016' 5039'              	movf	___fladd@exp1,w,c
  5453  0018' 5C38'              	subwf	___fladd@exp2,w,c
  5454  001A' 6E00'              	movwf	??___fladd& (0+255),c
  5455  001C' 0E20               	movlw	32
  5456  001E' 6436'              	cpfsgt	??___fladd,c
  5457  0020' D009               	goto	l3434
  5458  0022'                    l712:
  5459  0022' C032' F02E'        	movff	___fladd@f2,?___fladd
  5460  0026' C033' F02F'        	movff	___fladd@f2+1,?___fladd+1
  5461  002A' C034' F030'        	movff	___fladd@f2+2,?___fladd+2
  5462  002E' C035' F031'        	movff	___fladd@f2+3,?___fladd+3
  5463  0032' 0012               	return	
  5464  0034'                    l3434:
  5465  0034' 5038'              	movf	___fladd@exp2,w,c
  5466  0036' E009               	bz	l716
  5467  0038' 5039'              	movf	___fladd@exp1,w,c
  5468  003A' 5C38'              	subwf	___fladd@exp2,w,c
  5469  003C' E20F               	bc	l3440
  5470  003E' 5038'              	movf	___fladd@exp2,w,c
  5471  0040' 5C39'              	subwf	___fladd@exp1,w,c
  5472  0042' 6E00'              	movwf	??___fladd& (0+255),c
  5473  0044' 0E20               	movlw	32
  5474  0046' 6436'              	cpfsgt	??___fladd,c
  5475  0048' D009               	goto	l3440
  5476  004A'                    l716:
  5477  004A' C02E' F02E'        	movff	___fladd@f1,?___fladd
  5478  004E' C02F' F02F'        	movff	___fladd@f1+1,?___fladd+1
  5479  0052' C030' F030'        	movff	___fladd@f1+2,?___fladd+2
  5480  0056' C031' F031'        	movff	___fladd@f1+3,?___fladd+3
  5481  005A' 0012               	return	
  5482  005C'                    l3440:
  5483  005C' 0E06               	movlw	6
  5484  005E' 6E37'              	movwf	___fladd@sign,c
  5485  0060' BE31'              	btfsc	___fladd@f1+3,7,c
  5486  0062' 8E37'              	bsf	___fladd@sign,7,c
  5487  0064' BE35'              	btfsc	___fladd@f2+3,7,c
  5488  0066' 8C37'              	bsf	___fladd@sign,6,c
  5489  0068' 8E30'              	bsf	___fladd@f1+2,7,c
  5490  006A' 6A31'              	clrf	___fladd@f1+3,c
  5491  006C' 8E34'              	bsf	___fladd@f2+2,7,c
  5492  006E' 6A35'              	clrf	___fladd@f2+3,c
  5493  0070' 5038'              	movf	___fladd@exp2,w,c
  5494  0072' 5C39'              	subwf	___fladd@exp1,w,c
  5495  0074' E21A               	bc	l3464
  5496  0076'                    l3454:
  5497  0076' 90D8               	bcf	status,0,c
  5498  0078' 3632'              	rlcf	___fladd@f2,f,c
  5499  007A' 3633'              	rlcf	___fladd@f2+1,f,c
  5500  007C' 3634'              	rlcf	___fladd@f2+2,f,c
  5501  007E' 3635'              	rlcf	___fladd@f2+3,f,c
  5502  0080' 0638'              	decf	___fladd@exp2,f,c
  5503  0082' 5039'              	movf	___fladd@exp1,w,c
  5504  0084' 1838'              	xorwf	___fladd@exp2,w,c
  5505  0086' E00D               	bz	l3462
  5506  0088' 0637'              	decf	___fladd@sign,f,c
  5507  008A' C037' F036'        	movff	___fladd@sign,??___fladd
  5508  008E' 0E07               	movlw	7
  5509  0090' 1636'              	andwf	??___fladd,f,c
  5510  0092' E007               	bz	l3462
  5511  0094' D7F0               	goto	l3454
  5512  0096'                    l3460:
  5513  0096' 90D8               	bcf	status,0,c
  5514  0098' 3231'              	rrcf	___fladd@f1+3,f,c
  5515  009A' 3230'              	rrcf	___fladd@f1+2,f,c
  5516  009C' 322F'              	rrcf	___fladd@f1+1,f,c
  5517  009E' 322E'              	rrcf	___fladd@f1,f,c
  5518  00A0' 2A39'              	incf	___fladd@exp1,f,c
  5519  00A2'                    l3462:
  5520  00A2' 5038'              	movf	___fladd@exp2,w,c
  5521  00A4' 1839'              	xorwf	___fladd@exp1,w,c
  5522  00A6' E01D               	bz	l727
  5523  00A8' D7F6               	goto	l3460
  5524  00AA'                    l3464:
  5525  00AA' 5039'              	movf	___fladd@exp1,w,c
  5526  00AC' 5C38'              	subwf	___fladd@exp2,w,c
  5527  00AE' E219               	bc	l727
  5528  00B0'                    l3466:
  5529  00B0' 90D8               	bcf	status,0,c
  5530  00B2' 362E'              	rlcf	___fladd@f1,f,c
  5531  00B4' 362F'              	rlcf	___fladd@f1+1,f,c
  5532  00B6' 3630'              	rlcf	___fladd@f1+2,f,c
  5533  00B8' 3631'              	rlcf	___fladd@f1+3,f,c
  5534  00BA' 0639'              	decf	___fladd@exp1,f,c
  5535  00BC' 5039'              	movf	___fladd@exp1,w,c
  5536  00BE' 1838'              	xorwf	___fladd@exp2,w,c
  5537  00C0' E00D               	bz	l3474
  5538  00C2' 0637'              	decf	___fladd@sign,f,c
  5539  00C4' C037' F036'        	movff	___fladd@sign,??___fladd
  5540  00C8' 0E07               	movlw	7
  5541  00CA' 1636'              	andwf	??___fladd,f,c
  5542  00CC' E007               	bz	l3474
  5543  00CE' D7F0               	goto	l3466
  5544  00D0'                    l3472:
  5545  00D0' 90D8               	bcf	status,0,c
  5546  00D2' 3235'              	rrcf	___fladd@f2+3,f,c
  5547  00D4' 3234'              	rrcf	___fladd@f2+2,f,c
  5548  00D6' 3233'              	rrcf	___fladd@f2+1,f,c
  5549  00D8' 3232'              	rrcf	___fladd@f2,f,c
  5550  00DA' 2A38'              	incf	___fladd@exp2,f,c
  5551  00DC'                    l3474:
  5552  00DC' 5038'              	movf	___fladd@exp2,w,c
  5553  00DE' 1839'              	xorwf	___fladd@exp1,w,c
  5554  00E0' E1F7               	bnz	l3472
  5555  00E2'                    l727:
  5556  00E2' AE37'              	btfss	___fladd@sign,7,c
  5557  00E4' D009               	goto	l3478
  5558  00E6' 1E2E'              	comf	___fladd@f1,f,c
  5559  00E8' 1E2F'              	comf	___fladd@f1+1,f,c
  5560  00EA' 1E30'              	comf	___fladd@f1+2,f,c
  5561  00EC' 1E31'              	comf	___fladd@f1+3,f,c
  5562  00EE' 2A2E'              	incf	___fladd@f1,f,c
  5563  00F0' 0E00               	movlw	0
  5564  00F2' 222F'              	addwfc	___fladd@f1+1,f,c
  5565  00F4' 2230'              	addwfc	___fladd@f1+2,f,c
  5566  00F6' 2231'              	addwfc	___fladd@f1+3,f,c
  5567  00F8'                    l3478:
  5568  00F8' BC37'              	btfsc	___fladd@sign,6,c
  5569  00FA' D825               	call	PL12	;call to abstracted procedure
  5570  00FC' 6A37'              	clrf	___fladd@sign,c
  5571  00FE' 502E'              	movf	___fladd@f1,w,c
  5572  0100' 2632'              	addwf	___fladd@f2,f,c
  5573  0102' 502F'              	movf	___fladd@f1+1,w,c
  5574  0104' 2233'              	addwfc	___fladd@f2+1,f,c
  5575  0106' 5030'              	movf	___fladd@f1+2,w,c
  5576  0108' 2234'              	addwfc	___fladd@f2+2,f,c
  5577  010A' 5031'              	movf	___fladd@f1+3,w,c
  5578  010C' 2235'              	addwfc	___fladd@f2+3,f,c
  5579  010E' AE35'              	btfss	___fladd@f2+3,7,c
  5580  0110' D003               	goto	l3490
  5581  0112' D819               	call	PL12	;call to abstracted procedure
  5582  0114' 0E01               	movlw	1
  5583  0116' 6E37'              	movwf	___fladd@sign,c
  5584  0118'                    l3490:
  5585  0118' C032' F006'        	movff	___fladd@f2,___flpack@arg
  5586  011C' C033' F007'        	movff	___fladd@f2+1,___flpack@arg+1
  5587  0120' C034' F008'        	movff	___fladd@f2+2,___flpack@arg+2
  5588  0124' C035' F009'        	movff	___fladd@f2+3,___flpack@arg+3
  5589  0128' C039' F00A'        	movff	___fladd@exp1,___flpack@exp
  5590  012C' C037' F00B'        	movff	___fladd@sign,___flpack@sign
  5591  0130' EC00' F000'        	call	___flpack	;wreg free
  5592  0134' C006' F02E'        	movff	?___flpack,?___fladd
  5593  0138' C007' F02F'        	movff	?___flpack+1,?___fladd+1
  5594  013C' C008' F030'        	movff	?___flpack+2,?___fladd+2
  5595  0140' C009' F031'        	movff	?___flpack+3,?___fladd+3
  5596  0144' 0012               	return		;funcret
  5597  0146'                    __end_of___fladd:
  5598                           	opt stack 0
  5599  0146'                    PL12:
  5600                           	opt stack 26
  5601  0146' 1E32'              	comf	___fladd@f2,f,c
  5602  0148' 1E33'              	comf	___fladd@f2+1,f,c
  5603  014A' 1E34'              	comf	___fladd@f2+2,f,c
  5604  014C' 1E35'              	comf	___fladd@f2+3,f,c
  5605  014E' 2A32'              	incf	___fladd@f2,f,c
  5606  0150' 0E00               	movlw	0
  5607  0152' 2233'              	addwfc	___fladd@f2+1,f,c
  5608  0154' 2234'              	addwfc	___fladd@f2+2,f,c
  5609  0156' 2235'              	addwfc	___fladd@f2+3,f,c
  5610  0158' 0C00               	retlw	0
  5611  015A'                    __end_ofPL12:
  5612                           	opt stack 0
  5613                           tblptru	equ	0xFF8
  5614                           tblptrh	equ	0xFF7
  5615                           tblptrl	equ	0xFF6
  5616                           tablat	equ	0xFF5
  5617                           prodl	equ	0xFF3
  5618                           intcon	equ	0xFF2
  5619                           intcon2	equ	0xFF1
  5620                           postinc0	equ	0xFEE
  5621                           wreg	equ	0xFE8
  5622                           postdec1	equ	0xFE5
  5623                           fsr1l	equ	0xFE1
  5624                           indf2	equ	0xFDF
  5625                           postinc2	equ	0xFDE
  5626                           postdec2	equ	0xFDD
  5627                           fsr2h	equ	0xFDA
  5628                           fsr2l	equ	0xFD9
  5629                           status	equ	0xFD8
  5630                           
  5631 ;; *************** function ___awtofl *****************
  5632 ;; Defined at:
  5633 ;;		line 31 in file "/opt/microchip/xc8/v1.34/sources/common/awtofl.c"
  5634 ;; Parameters:    Size  Location     Type
  5635 ;;  c               2   16[COMRAM] int 
  5636 ;; Auto vars:     Size  Location     Type
  5637 ;;  f1              4    0        int 
  5638 ;;  sign            1   20[COMRAM] unsigned char 
  5639 ;; Return value:  Size  Location     Type
  5640 ;;                  4   16[COMRAM] unsigned char 
  5641 ;; Registers used:
  5642 ;;		wreg, status,2, status,0, cstack
  5643 ;; Tracked objects:
  5644 ;;		On entry : 0/0
  5645 ;;		On exit  : 0/0
  5646 ;;		Unchanged: 0/0
  5647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5648 ;;      Params:         4       0       0       0       0       0       0       0       0
  5649 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5650 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5651 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5652 ;;Total ram usage:        5 bytes
  5653 ;; Hardware stack levels used:    1
  5654 ;; Hardware stack levels required when called:    2
  5655 ;; This function calls:
  5656 ;;		___flpack
  5657 ;; This function is called by:
  5658 ;;		_format_double
  5659 ;;		_log
  5660 ;;		_exp
  5661 ;; This function uses a non-reentrant model
  5662 ;;
  5663                           
  5664                           	psect	text26
  5665  0000'                    __ptext26:
  5666                           	opt stack 0
  5667  0000'                    ___awtofl:
  5668                           	opt stack 24
  5669                           
  5670                           ;incstack = 0
  5671  0000' 6A14'              	clrf	___awtofl@sign,c
  5672  0002' AE11'              	btfss	___awtofl@c+1,7,c
  5673  0004' D005               	goto	l3668
  5674  0006' 6C10'              	negf	___awtofl@c,c
  5675  0008' 1E11'              	comf	___awtofl@c+1,f,c
  5676  000A' B0D8               	btfsc	status,0,c
  5677  000C' 2A11'              	incf	___awtofl@c+1,f,c
  5678  000E' 2A14'              	incf	___awtofl@sign,f,c
  5679  0010'                    l3668:
  5680  0010' C010' F006'        	movff	___awtofl@c,___flpack@arg
  5681  0014' C011' F007'        	movff	___awtofl@c+1,___flpack@arg+1
  5682  0018' 6A08'              	clrf	___flpack@arg+2,c
  5683  001A' 6A09'              	clrf	___flpack@arg+3,c
  5684  001C' 0E96               	movlw	150
  5685  001E' 6E0A'              	movwf	___flpack@exp,c
  5686  0020' C014' F00B'        	movff	___awtofl@sign,___flpack@sign
  5687  0024' EC00' F000'        	call	___flpack	;wreg free
  5688  0028' C006' F010'        	movff	?___flpack,?___awtofl
  5689  002C' C007' F011'        	movff	?___flpack+1,?___awtofl+1
  5690  0030' C008' F012'        	movff	?___flpack+2,?___awtofl+2
  5691  0034' C009' F013'        	movff	?___flpack+3,?___awtofl+3
  5692  0038' 0012               	return		;funcret
  5693  003A'                    __end_of___awtofl:
  5694                           	opt stack 0
  5695                           tblptru	equ	0xFF8
  5696                           tblptrh	equ	0xFF7
  5697                           tblptrl	equ	0xFF6
  5698                           tablat	equ	0xFF5
  5699                           prodl	equ	0xFF3
  5700                           intcon	equ	0xFF2
  5701                           intcon2	equ	0xFF1
  5702                           postinc0	equ	0xFEE
  5703                           wreg	equ	0xFE8
  5704                           postdec1	equ	0xFE5
  5705                           fsr1l	equ	0xFE1
  5706                           indf2	equ	0xFDF
  5707                           postinc2	equ	0xFDE
  5708                           postdec2	equ	0xFDD
  5709                           fsr2h	equ	0xFDA
  5710                           fsr2l	equ	0xFD9
  5711                           status	equ	0xFD8
  5712                           
  5713 ;; *************** function _lcd_init *****************
  5714 ;; Defined at:
  5715 ;;		line 506 in file "../../../lib/lcd44780.c"
  5716 ;; Parameters:    Size  Location     Type
  5717 ;;  fourbitmode     1    wreg     unsigned char 
  5718 ;; Auto vars:     Size  Location     Type
  5719 ;;  fourbitmode     1    6[COMRAM] unsigned char 
  5720 ;; Return value:  Size  Location     Type
  5721 ;;		None               void
  5722 ;; Registers used:
  5723 ;;		wreg, status,2, status,0
  5724 ;; Tracked objects:
  5725 ;;		On entry : 0/0
  5726 ;;		On exit  : 0/0
  5727 ;;		Unchanged: 0/0
  5728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5729 ;;      Params:         0       0       0       0       0       0       0       0       0
  5730 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5731 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5732 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5733 ;;Total ram usage:        3 bytes
  5734 ;; Hardware stack levels used:    1
  5735 ;; Hardware stack levels required when called:    1
  5736 ;; This function calls:
  5737 ;;		Nothing
  5738 ;; This function is called by:
  5739 ;;		_main
  5740 ;; This function uses a non-reentrant model
  5741 ;;
  5742                           
  5743                           	psect	text27
  5744  0000'                    __ptext27:
  5745                           	opt stack 0
  5746  0000'                    _lcd_init:
  5747                           	opt stack 29
  5748                           
  5749                           ;incstack = 0
  5750                           ;lcd_init@fourbitmode stored from wreg
  5751  0000' 6E06'              	movwf	lcd_init@fourbitmode,c
  5752                           
  5753                           ;lcd44780.c: 508: LCD_ctrl = 0;
  5754  0002' 6A02'              	clrf	_LCD_ctrl,c
  5755                           
  5756                           ;lcd44780.c: 509: LCD_function = (fourbitmode ? 0x00 : 0x10);
  5757  0004' 5006'              	movf	lcd_init@fourbitmode,w,c
  5758  0006' E104               	bnz	l158
  5759  0008' 6A08'              	clrf	_lcd_init$134+1,c
  5760  000A' 0E10               	movlw	16
  5761  000C' 6E07'              	movwf	_lcd_init$134,c
  5762  000E' D002               	goto	l160
  5763  0010'                    l158:
  5764  0010' 6A07'              	clrf	_lcd_init$134,c
  5765  0012' 6A08'              	clrf	_lcd_init$134+1,c
  5766  0014'                    l160:
  5767  0014' C007' F003'        	movff	_lcd_init$134,_LCD_function
  5768                           
  5769                           ;lcd44780.c: 511: LCD_lines = 0;
  5770  0018' 6A04'              	clrf	_LCD_lines,c
  5771                           
  5772                           ;lcd44780.c: 513: LCD_mode = 0;
  5773  001A' 6A05'              	clrf	_LCD_mode,c
  5774                           
  5775                           ;lcd44780.c: 515: TRISB &= ~0b0100;
  5776  001C' 9493               	bcf	3987,2,c	;volatile
  5777                           
  5778                           ;lcd44780.c: 516: LATB &= ~0b0100;
  5779  001E' 948A               	bcf	3978,2,c	;volatile
  5780                           
  5781                           ;lcd44780.c: 521: TRISB &= ~0b1000;
  5782  0020' 9693               	bcf	3987,3,c	;volatile
  5783                           
  5784                           ;lcd44780.c: 522: LATB &= ~0b1000;
  5785  0022' 968A               	bcf	3978,3,c	;volatile
  5786                           
  5787                           ;lcd44780.c: 524: LATB &= ~0b11110000;
  5788  0024' 0E0F               	movlw	15
  5789  0026' 168A               	andwf	3978,f,c	;volatile
  5790  0028' 0C0F               	retlw	15	;funcret
  5791  002A'                    __end_of_lcd_init:
  5792                           	opt stack 0
  5793                           tblptru	equ	0xFF8
  5794                           tblptrh	equ	0xFF7
  5795                           tblptrl	equ	0xFF6
  5796                           tablat	equ	0xFF5
  5797                           prodl	equ	0xFF3
  5798                           intcon	equ	0xFF2
  5799                           intcon2	equ	0xFF1
  5800                           postinc0	equ	0xFEE
  5801                           wreg	equ	0xFE8
  5802                           postdec1	equ	0xFE5
  5803                           fsr1l	equ	0xFE1
  5804                           indf2	equ	0xFDF
  5805                           postinc2	equ	0xFDE
  5806                           postdec2	equ	0xFDD
  5807                           fsr2h	equ	0xFDA
  5808                           fsr2l	equ	0xFD9
  5809                           status	equ	0xFD8
  5810                           
  5811 ;; *************** function _lcd_begin *****************
  5812 ;; Defined at:
  5813 ;;		line 433 in file "../../../lib/lcd44780.c"
  5814 ;; Parameters:    Size  Location     Type
  5815 ;;  lines           1    wreg     unsigned char 
  5816 ;;  dotsize         1   10[COMRAM] unsigned char 
  5817 ;; Auto vars:     Size  Location     Type
  5818 ;;  lines           1   12[COMRAM] unsigned char 
  5819 ;; Return value:  Size  Location     Type
  5820 ;;		None               void
  5821 ;; Registers used:
  5822 ;;		wreg, status,2, status,0, cstack
  5823 ;; Tracked objects:
  5824 ;;		On entry : 0/0
  5825 ;;		On exit  : 0/0
  5826 ;;		Unchanged: 0/0
  5827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5828 ;;      Params:         1       0       0       0       0       0       0       0       0
  5829 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5830 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5831 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5832 ;;Total ram usage:        3 bytes
  5833 ;; Hardware stack levels used:    1
  5834 ;; Hardware stack levels required when called:    4
  5835 ;; This function calls:
  5836 ;;		_lcd_command
  5837 ;;		_lcd_write4bits
  5838 ;; This function is called by:
  5839 ;;		_main
  5840 ;; This function uses a non-reentrant model
  5841 ;;
  5842                           
  5843                           	psect	text28
  5844  0000'                    __ptext28:
  5845                           	opt stack 0
  5846  0000'                    _lcd_begin:
  5847                           	opt stack 26
  5848                           
  5849                           ;incstack = 0
  5850                           ;lcd_begin@lines stored from wreg
  5851  0000' 6E0C'              	movwf	lcd_begin@lines,c
  5852                           
  5853                           ;lcd44780.c: 434: if(lines > 1)
  5854  0002' 0E01               	movlw	1
  5855  0004' 640C'              	cpfsgt	lcd_begin@lines,c
  5856  0006' D001               	goto	l2974
  5857                           
  5858                           ;lcd44780.c: 435: LCD_function |= 0x08;
  5859  0008' 8603'              	bsf	_LCD_function,3,c
  5860  000A'                    l2974:
  5861                           
  5862                           ;lcd44780.c: 438: LCD_lines = lines;
  5863  000A' C00C' F004'        	movff	lcd_begin@lines,_LCD_lines
  5864                           
  5865                           ;lcd44780.c: 442: if((dotsize != 0) && (lines == 1))
  5866  000E' 500A'              	movf	lcd_begin@dotsize,w,c
  5867  0010' E003               	bz	l2982
  5868  0012' 040C'              	decf	lcd_begin@lines,w,c
  5869  0014' B4D8               	btfsc	status,2,c
  5870                           
  5871                           ;lcd44780.c: 443: LCD_function |= 0x04;
  5872  0016' 8403'              	bsf	_LCD_function,2,c
  5873  0018'                    l2982:
  5874                           
  5875                           ;lcd44780.c: 445: _delay((unsigned long)((15)*(20000000/4000.0)));
  5876  0018' 0E62               	movlw	98
  5877  001A' 6E00'              	movwf	??_lcd_begin& (0+255),c
  5878  001C' 0E66               	movlw	102
  5879  001E'                    u3377:
  5880  001E' 2EE8               	decfsz	wreg,f,c
  5881  0020' D7FE               	goto	u3377
  5882  0022' 2E00'              	decfsz	??_lcd_begin& (0+255),f,c
  5883  0024' D7FC               	goto	u3377
  5884                           
  5885                           ;lcd44780.c: 448: LATB &= ~0b0100;
  5886  0026' 948A               	bcf	3978,2,c	;volatile
  5887                           
  5888                           ;lcd44780.c: 449: LATB &= ~0b1000;
  5889  0028' 968A               	bcf	3978,3,c	;volatile
  5890                           
  5891                           ;lcd44780.c: 452: if(!(LCD_function & 0x10)) {
  5892  002A' B803'              	btfsc	_LCD_function,4,c
  5893  002C' D01B               	goto	l3000
  5894                           
  5895                           ;lcd44780.c: 456: lcd_write4bits(0x03);
  5896  002E' 0E03               	movlw	3
  5897  0030' EC00' F000'        	call	_lcd_write4bits
  5898                           
  5899                           ;lcd44780.c: 457: _delay((unsigned long)((5)*(20000000/4000.0)));
  5900  0034' 0E21               	movlw	33
  5901  0036' 6E00'              	movwf	??_lcd_begin& (0+255),c
  5902  0038' 0E76               	movlw	118
  5903  003A'                    u3387:
  5904  003A' 2EE8               	decfsz	wreg,f,c
  5905  003C' D7FE               	goto	u3387
  5906  003E' 2E00'              	decfsz	??_lcd_begin& (0+255),f,c
  5907  0040' D7FC               	goto	u3387
  5908  0042' D000               	nop2	
  5909                           
  5910                           ;lcd44780.c: 459: lcd_write4bits(0x03);
  5911  0044' 0E03               	movlw	3
  5912  0046' EC00' F000'        	call	_lcd_write4bits
  5913                           
  5914                           ;lcd44780.c: 460: _delay((unsigned long)((150)*(20000000/4000000.0)));
  5915  004A' 0EFA               	movlw	250
  5916  004C'                    u3397:
  5917  004C' 2EE8               	decfsz	wreg,f,c
  5918  004E' D7FE               	goto	u3397
  5919                           
  5920                           ;lcd44780.c: 462: lcd_write4bits(0x03);
  5921  0050' 0E03               	movlw	3
  5922  0052' EC00' F000'        	call	_lcd_write4bits
  5923                           
  5924                           ;lcd44780.c: 463: _delay((unsigned long)((150)*(20000000/4000000.0)));
  5925  0056' 0EFA               	movlw	250
  5926  0058'                    u3407:
  5927  0058' 2EE8               	decfsz	wreg,f,c
  5928  005A' D7FE               	goto	u3407
  5929                           
  5930                           ;lcd44780.c: 465: lcd_write4bits(0x02);
  5931  005C' 0E02               	movlw	2
  5932  005E' EC00' F000'        	call	_lcd_write4bits
  5933                           
  5934                           ;lcd44780.c: 466: }
  5935  0062' D01C               	goto	l3008
  5936  0064'                    l3000:
  5937                           
  5938                           ;lcd44780.c: 468: else {
  5939                           ;lcd44780.c: 472: lcd_command(0x20 | LCD_function);
  5940  0064' 5003'              	movf	_LCD_function,w,c
  5941  0066' 0920               	iorlw	32
  5942  0068' EC00' F000'        	call	_lcd_command
  5943                           
  5944                           ;lcd44780.c: 473: _delay((unsigned long)((5)*(20000000/4000.0)));
  5945  006C' 0E21               	movlw	33
  5946  006E' 6E00'              	movwf	??_lcd_begin& (0+255),c
  5947  0070' 0E76               	movlw	118
  5948  0072'                    u3417:
  5949  0072' 2EE8               	decfsz	wreg,f,c
  5950  0074' D7FE               	goto	u3417
  5951  0076' 2E00'              	decfsz	??_lcd_begin& (0+255),f,c
  5952  0078' D7FC               	goto	u3417
  5953  007A' D000               	nop2	
  5954                           
  5955                           ;lcd44780.c: 476: lcd_command(0x20 | LCD_function);
  5956  007C' 5003'              	movf	_LCD_function,w,c
  5957  007E' 0920               	iorlw	32
  5958  0080' EC00' F000'        	call	_lcd_command
  5959                           
  5960                           ;lcd44780.c: 477: _delay((unsigned long)((5)*(20000000/4000.0)));
  5961  0084' 0E21               	movlw	33
  5962  0086' 6E00'              	movwf	??_lcd_begin& (0+255),c
  5963  0088' 0E76               	movlw	118
  5964  008A'                    u3427:
  5965  008A' 2EE8               	decfsz	wreg,f,c
  5966  008C' D7FE               	goto	u3427
  5967  008E' 2E00'              	decfsz	??_lcd_begin& (0+255),f,c
  5968  0090' D7FC               	goto	u3427
  5969  0092' D000               	nop2	
  5970                           
  5971                           ;lcd44780.c: 481: lcd_command(0x20 | LCD_function);
  5972  0094' 5003'              	movf	_LCD_function,w,c
  5973  0096' 0920               	iorlw	32
  5974  0098' EC00' F000'        	call	_lcd_command
  5975  009C'                    l3008:
  5976                           
  5977                           ;lcd44780.c: 482: }
  5978                           ;lcd44780.c: 485: lcd_command(0x20 | LCD_function);
  5979  009C' 5003'              	movf	_LCD_function,w,c
  5980  009E' 0920               	iorlw	32
  5981  00A0' EC00' F000'        	call	_lcd_command
  5982                           
  5983                           ;lcd44780.c: 488: LCD_ctrl = 0x04 | 0x00 | 0x00;
  5984  00A4' 0E04               	movlw	4
  5985  00A6' 6E02'              	movwf	_LCD_ctrl,c
  5986                           
  5987                           ;lcd44780.c: 489: lcd_command(0x08 | LCD_ctrl);
  5988  00A8' 5002'              	movf	_LCD_ctrl,w,c
  5989  00AA' 0908               	iorlw	8
  5990  00AC' EC00' F000'        	call	_lcd_command
  5991                           
  5992                           ;lcd44780.c: 492: lcd_command(0x01);
  5993  00B0' 0E01               	movlw	1
  5994  00B2' EC00' F000'        	call	_lcd_command
  5995                           
  5996                           ;lcd44780.c: 493: _delay((unsigned long)((2)*(20000000/4000.0)));
  5997  00B6' 0E0D               	movlw	13
  5998  00B8' 6E00'              	movwf	??_lcd_begin& (0+255),c
  5999  00BA' 0EFC               	movlw	252
  6000  00BC'                    u3437:
  6001  00BC' 2EE8               	decfsz	wreg,f,c
  6002  00BE' D7FE               	goto	u3437
  6003  00C0' 2E00'              	decfsz	??_lcd_begin& (0+255),f,c
  6004  00C2' D7FC               	goto	u3437
  6005                           
  6006                           ;lcd44780.c: 496: LCD_mode = 0x02 | 0x00;
  6007  00C4' 0E02               	movlw	2
  6008  00C6' 6E05'              	movwf	_LCD_mode,c
  6009                           
  6010                           ;lcd44780.c: 498: lcd_command(0x04 | LCD_mode);
  6011  00C8' 5005'              	movf	_LCD_mode,w,c
  6012  00CA' 0904               	iorlw	4
  6013  00CC' EF00' F000'        	goto	_lcd_command
  6014  00D0'                    __end_of_lcd_begin:
  6015                           	opt stack 0
  6016                           tblptru	equ	0xFF8
  6017                           tblptrh	equ	0xFF7
  6018                           tblptrl	equ	0xFF6
  6019                           tablat	equ	0xFF5
  6020                           prodl	equ	0xFF3
  6021                           intcon	equ	0xFF2
  6022                           intcon2	equ	0xFF1
  6023                           postinc0	equ	0xFEE
  6024                           wreg	equ	0xFE8
  6025                           postdec1	equ	0xFE5
  6026                           fsr1l	equ	0xFE1
  6027                           indf2	equ	0xFDF
  6028                           postinc2	equ	0xFDE
  6029                           postdec2	equ	0xFDD
  6030                           fsr2h	equ	0xFDA
  6031                           fsr2l	equ	0xFD9
  6032                           status	equ	0xFD8
  6033                           
  6034 ;; *************** function _indicator *****************
  6035 ;; Defined at:
  6036 ;;		line 473 in file "../../../src/print.c"
  6037 ;; Parameters:    Size  Location     Type
  6038 ;;  indicate        1    wreg     unsigned char 
  6039 ;; Auto vars:     Size  Location     Type
  6040 ;;  indicate        1   16[COMRAM] unsigned char 
  6041 ;; Return value:  Size  Location     Type
  6042 ;;		None               void
  6043 ;; Registers used:
  6044 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6045 ;; Tracked objects:
  6046 ;;		On entry : 0/0
  6047 ;;		On exit  : 0/0
  6048 ;;		Unchanged: 0/0
  6049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6050 ;;      Params:         0       0       0       0       0       0       0       0       0
  6051 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6052 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6053 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6054 ;;Total ram usage:        1 bytes
  6055 ;; Hardware stack levels used:    1
  6056 ;; Hardware stack levels required when called:    5
  6057 ;; This function calls:
  6058 ;;		_lcd_gotoxy
  6059 ;;		_lcd_puts
  6060 ;; This function is called by:
  6061 ;;		_main
  6062 ;; This function uses a non-reentrant model
  6063 ;;
  6064                           
  6065                           	psect	text29
  6066  0000'                    __ptext29:
  6067                           	opt stack 0
  6068  0000'                    _indicator:
  6069                           	opt stack 25
  6070                           
  6071                           ;incstack = 0
  6072                           ;indicator@indicate stored from wreg
  6073  0000' 6E10'              	movwf	indicator@indicate,c
  6074                           
  6075                           ;print.c: 487: lcd_gotoxy(0, 1);
  6076  0002' 0E01               	movlw	1
  6077  0004' 6E0A'              	movwf	lcd_gotoxy@row,c
  6078  0006' 0E00               	movlw	0
  6079  0008' EC00' F000'        	call	_lcd_gotoxy
  6080                           
  6081                           ;print.c: 488: if(indicate) {
  6082  000C' 5010'              	movf	indicator@indicate,w,c
  6083  000E' E003               	bz	l3260
  6084                           
  6085                           ;print.c: 489: lcd_puts("-*-");
  6086  0010' 0E00'              	movlw	STR_26& (0+255)
  6087  0012' EF00' F000'        	goto	_lcd_puts
  6088  0016'                    l3260:
  6089                           
  6090                           ;print.c: 491: lcd_puts("   ");
  6091  0016' 0E00'              	movlw	(STR_30+3)& (0+255)
  6092  0018' EF00' F000'        	goto	_lcd_puts
  6093  001C'                    __end_of_indicator:
  6094                           	opt stack 0
  6095                           tblptru	equ	0xFF8
  6096                           tblptrh	equ	0xFF7
  6097                           tblptrl	equ	0xFF6
  6098                           tablat	equ	0xFF5
  6099                           prodl	equ	0xFF3
  6100                           intcon	equ	0xFF2
  6101                           intcon2	equ	0xFF1
  6102                           postinc0	equ	0xFEE
  6103                           wreg	equ	0xFE8
  6104                           postdec1	equ	0xFE5
  6105                           fsr1l	equ	0xFE1
  6106                           indf2	equ	0xFDF
  6107                           postinc2	equ	0xFDE
  6108                           postdec2	equ	0xFDD
  6109                           fsr2h	equ	0xFDA
  6110                           fsr2l	equ	0xFD9
  6111                           status	equ	0xFD8
  6112                           
  6113 ;; *************** function _lcd_puts *****************
  6114 ;; Defined at:
  6115 ;;		line 185 in file "../../../lib/lcd44780.c"
  6116 ;; Parameters:    Size  Location     Type
  6117 ;;  string          1    wreg     PTR const unsigned char 
  6118 ;;		 -> STR_33(5), STR_32(6), STR_31(7), STR_30(7), 
  6119 ;;		 -> STR_28(10), STR_27(4), STR_26(4), STR_25(6), 
  6120 ;; Auto vars:     Size  Location     Type
  6121 ;;  string          1   11[COMRAM] PTR const unsigned char 
  6122 ;;		 -> STR_33(5), STR_32(6), STR_31(7), STR_30(7), 
  6123 ;;		 -> STR_28(10), STR_27(4), STR_26(4), STR_25(6), 
  6124 ;;  i               1   10[COMRAM] unsigned char 
  6125 ;; Return value:  Size  Location     Type
  6126 ;;		None               void
  6127 ;; Registers used:
  6128 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6129 ;; Tracked objects:
  6130 ;;		On entry : 0/0
  6131 ;;		On exit  : 0/0
  6132 ;;		Unchanged: 0/0
  6133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6134 ;;      Params:         0       0       0       0       0       0       0       0       0
  6135 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6136 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6137 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6138 ;;Total ram usage:        3 bytes
  6139 ;; Hardware stack levels used:    1
  6140 ;; Hardware stack levels required when called:    3
  6141 ;; This function calls:
  6142 ;;		_lcd_send
  6143 ;; This function is called by:
  6144 ;;		_print_reading
  6145 ;;		_indicator
  6146 ;;		_main
  6147 ;; This function uses a non-reentrant model
  6148 ;;
  6149                           
  6150                           	psect	text30
  6151  0000'                    __ptext30:
  6152                           	opt stack 0
  6153  0000'                    _lcd_puts:
  6154                           	opt stack 25
  6155                           
  6156                           ;incstack = 0
  6157                           ;lcd_puts@string stored from wreg
  6158  0000' 6E0B'              	movwf	lcd_puts@string,c
  6159                           
  6160                           ;lcd44780.c: 186: uint8_t i;
  6161                           ;lcd44780.c: 187: for(i = 0; string[i]; i++) lcd_send((string[i]), 1);
  6162  0002' 6A0A'              	clrf	lcd_puts@i,c
  6163  0004' D006               	goto	l2842
  6164  0006'                    l2838:
  6165  0006' 0E01               	movlw	1
  6166  0008' 6E07'              	movwf	lcd_send@mode,c
  6167  000A' D807               	call	PL24	;call to abstracted procedure
  6168  000C' EC00' F000'        	call	_lcd_send
  6169  0010' 2A0A'              	incf	lcd_puts@i,f,c
  6170  0012'                    l2842:
  6171  0012' D803               	call	PL24	;call to abstracted procedure
  6172  0014' B4D8               	btfsc	status,2,c
  6173  0016' 0012               	return		;funcret
  6174  0018' D7F6               	goto	l2838
  6175  001A'                    __end_of_lcd_puts:
  6176                           	opt stack 0
  6177  001A'                    PL24:
  6178                           	opt stack 25
  6179  001A' 500B'              	movf	lcd_puts@string,w,c
  6180  001C' 240A'              	addwf	lcd_puts@i,w,c
  6181  001E' 6E00'              	movwf	??_lcd_puts& (0+255),c
  6182  0020' C009' FFF6         	movff	??_lcd_puts,tblptrl
  6183  0024'                    	if	0	;There is only one active tblptr byte
  6184  0024'                    	endif
  6185  0024'                    	if	0	;tblptru may be non-zero
  6186  0024'                    	endif
  6187  0024'                    	if	0	;tblptru may be non-zero
  6188  0024'                    	endif
  6189  0024' 0008               	tblrd		*
  6190  0026' 50F5               	movf	tablat,w,c
  6191  0028' 0012               	return	
  6192  002A'                    __end_ofPL24:
  6193                           	opt stack 0
  6194                           tblptru	equ	0xFF8
  6195                           tblptrh	equ	0xFF7
  6196                           tblptrl	equ	0xFF6
  6197                           tablat	equ	0xFF5
  6198                           prodl	equ	0xFF3
  6199                           intcon	equ	0xFF2
  6200                           intcon2	equ	0xFF1
  6201                           postinc0	equ	0xFEE
  6202                           wreg	equ	0xFE8
  6203                           postdec1	equ	0xFE5
  6204                           fsr1l	equ	0xFE1
  6205                           indf2	equ	0xFDF
  6206                           postinc2	equ	0xFDE
  6207                           postdec2	equ	0xFDD
  6208                           fsr2h	equ	0xFDA
  6209                           fsr2l	equ	0xFD9
  6210                           status	equ	0xFD8
  6211                           
  6212 ;; *************** function _calibrate *****************
  6213 ;; Defined at:
  6214 ;;		line 24 in file "../../../src/measure.c"
  6215 ;; Parameters:    Size  Location     Type
  6216 ;;		None
  6217 ;; Auto vars:     Size  Location     Type
  6218 ;;  i               1   65[COMRAM] unsigned char 
  6219 ;; Return value:  Size  Location     Type
  6220 ;;		None               void
  6221 ;; Registers used:
  6222 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblp
      +tru, prodl, prodh, bsr, cstack
  6223 ;; Tracked objects:
  6224 ;;		On entry : 0/0
  6225 ;;		On exit  : 0/0
  6226 ;;		Unchanged: 0/0
  6227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6228 ;;      Params:         0       0       0       0       0       0       0       0       0
  6229 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6230 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6231 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6232 ;;Total ram usage:        1 bytes
  6233 ;; Hardware stack levels used:    1
  6234 ;; Hardware stack levels required when called:    6
  6235 ;; This function calls:
  6236 ;;		___lwtofl
  6237 ;;		_delay10ms
  6238 ;;		_lcd_clear
  6239 ;;		_lcd_gotoxy
  6240 ;;		_lcd_send
  6241 ;;		_measure_freq
  6242 ;;		_put_str
  6243 ;;		_ser_puts
  6244 ;; This function is called by:
  6245 ;;		_main
  6246 ;; This function uses a non-reentrant model
  6247 ;;
  6248                           
  6249                           	psect	text31
  6250  0000'                    __ptext31:
  6251                           	opt stack 0
  6252  0000'                    _calibrate:
  6253                           	opt stack 24
  6254                           
  6255                           ;measure.c: 25: uint8_t i;
  6256                           ;measure.c: 28: lcd_clear();
  6257                           
  6258                           ;incstack = 0
  6259  0000' EC00' F000'        	call	_lcd_clear	;wreg free
  6260                           
  6261                           ;measure.c: 30: lcd_gotoxy(0, 0);
  6262  0004' 0E00               	movlw	0
  6263  0006' 6A0A'              	clrf	lcd_gotoxy@row,c
  6264  0008' EC00' F000'        	call	_lcd_gotoxy
  6265                           
  6266                           ;measure.c: 31: put_str("Calibrating");
  6267  000C' 0E00'              	movlw	STR_1& (0+255)
  6268  000E' EC00' F000'        	call	_put_str
  6269                           
  6270                           ;measure.c: 33: lcd_gotoxy(0, 1);
  6271  0012' 0E01               	movlw	1
  6272  0014' 6E0A'              	movwf	lcd_gotoxy@row,c
  6273  0016' 0E00               	movlw	0
  6274  0018' EC00' F000'        	call	_lcd_gotoxy
  6275                           
  6276                           ;measure.c: 34: ser_puts("\r\n");
  6277  001C' 0E00'              	movlw	(STR_29+3)& (0+255)
  6278  001E' EC00' F000'        	call	_ser_puts
  6279                           
  6280                           ;measure.c: 35: put_str("please wait...");
  6281  0022' 0E00'              	movlw	STR_3& (0+255)
  6282  0024' EC00' F000'        	call	_put_str
  6283                           
  6284                           ;measure.c: 38: LATC &= ~(1 << 5);
  6285  0028' 9A8B               	bcf	3979,5,c	;volatile
  6286                           
  6287                           ;measure.c: 40: F1 = (double)measure_freq();
  6288  002A' EC00' F000'        	call	_measure_freq	;wreg free
  6289  002E' C038' F03D'        	movff	?_measure_freq,___lwtofl@c
  6290  0032' C039' F03E'        	movff	?_measure_freq+1,___lwtofl@c+1
  6291  0036' EC00' F000'        	call	___lwtofl	;wreg free
  6292  003A' C03D' F025'        	movff	?___lwtofl,_F1
  6293  003E' C03E' F026'        	movff	?___lwtofl+1,_F1+1
  6294  0042' C03F' F027'        	movff	?___lwtofl+2,_F1+2
  6295  0046' C040' F028'        	movff	?___lwtofl+3,_F1+3
  6296                           
  6297                           ;measure.c: 41: delay10ms(50);
  6298  004A' 0E32               	movlw	50
  6299  004C' EC00' F000'        	call	_delay10ms
  6300                           
  6301                           ;measure.c: 43: F1 = (double)measure_freq();
  6302  0050' EC00' F000'        	call	_measure_freq	;wreg free
  6303  0054' C038' F03D'        	movff	?_measure_freq,___lwtofl@c
  6304  0058' C039' F03E'        	movff	?_measure_freq+1,___lwtofl@c+1
  6305  005C' EC00' F000'        	call	___lwtofl	;wreg free
  6306  0060' C03D' F025'        	movff	?___lwtofl,_F1
  6307  0064' C03E' F026'        	movff	?___lwtofl+1,_F1+1
  6308  0068' C03F' F027'        	movff	?___lwtofl+2,_F1+2
  6309  006C' C040' F028'        	movff	?___lwtofl+3,_F1+3
  6310                           
  6311                           ;measure.c: 44: LATC |= (1 << 5);
  6312  0070' 8A8B               	bsf	3979,5,c	;volatile
  6313                           
  6314                           ;measure.c: 46: F2 = (double)measure_freq();
  6315  0072' EC00' F000'        	call	_measure_freq	;wreg free
  6316  0076' C038' F03D'        	movff	?_measure_freq,___lwtofl@c
  6317  007A' C039' F03E'        	movff	?_measure_freq+1,___lwtofl@c+1
  6318  007E' EC00' F000'        	call	___lwtofl	;wreg free
  6319  0082' C03D' F000'        	movff	?___lwtofl,_F2
  6320  0086' C03E' F001'        	movff	?___lwtofl+1,_F2+1
  6321  008A' C03F' F002'        	movff	?___lwtofl+2,_F2+2
  6322  008E' C040' F003'        	movff	?___lwtofl+3,_F2+3
  6323                           
  6324                           ;measure.c: 47: delay10ms(50);
  6325  0092' 0E32               	movlw	50
  6326  0094' EC00' F000'        	call	_delay10ms
  6327                           
  6328                           ;measure.c: 49: F2 = (double)measure_freq();
  6329  0098' EC00' F000'        	call	_measure_freq	;wreg free
  6330  009C' C038' F03D'        	movff	?_measure_freq,___lwtofl@c
  6331  00A0' C039' F03E'        	movff	?_measure_freq+1,___lwtofl@c+1
  6332  00A4' EC00' F000'        	call	___lwtofl	;wreg free
  6333  00A8' C03D' F000'        	movff	?___lwtofl,_F2
  6334  00AC' C03E' F001'        	movff	?___lwtofl+1,_F2+1
  6335  00B0' C03F' F002'        	movff	?___lwtofl+2,_F2+2
  6336  00B4' C040' F003'        	movff	?___lwtofl+3,_F2+3
  6337                           
  6338                           ;measure.c: 50: LATC &= ~(1 << 5);
  6339  00B8' 9A8B               	bcf	3979,5,c	;volatile
  6340                           
  6341                           ;measure.c: 54: lcd_gotoxy(11, 0);
  6342  00BA' 6A0A'              	clrf	lcd_gotoxy@row,c
  6343  00BC' 0E0B               	movlw	11
  6344  00BE' EC00' F000'        	call	_lcd_gotoxy
  6345                           
  6346                           ;measure.c: 56: for(i = 0; i < 6; i++) {
  6347  00C2' 6A41'              	clrf	calibrate@i,c
  6348  00C4'                    l3842:
  6349                           
  6350                           ;measure.c: 57: lcd_send(('='), 1);
  6351  00C4' 0E01               	movlw	1
  6352  00C6' 6E07'              	movwf	lcd_send@mode,c
  6353  00C8' 0E3D               	movlw	61
  6354  00CA' EC00' F000'        	call	_lcd_send
  6355                           
  6356                           ;measure.c: 59: delay10ms(28);
  6357  00CE' 0E1C               	movlw	28
  6358  00D0' EC00' F000'        	call	_delay10ms
  6359  00D4' 2A41'              	incf	calibrate@i,f,c
  6360  00D6' 0E05               	movlw	5
  6361  00D8' 6441'              	cpfsgt	calibrate@i,c
  6362  00DA' D7F4               	goto	l3842
  6363                           
  6364                           ;measure.c: 60: }
  6365                           ;measure.c: 62: ser_puts("\r\n");
  6366  00DC' 0E00'              	movlw	(STR_29+3)& (0+255)
  6367  00DE' EF00' F000'        	goto	_ser_puts
  6368  00E2'                    __end_of_calibrate:
  6369                           	opt stack 0
  6370                           tblptru	equ	0xFF8
  6371                           tblptrh	equ	0xFF7
  6372                           tblptrl	equ	0xFF6
  6373                           tablat	equ	0xFF5
  6374                           prodl	equ	0xFF3
  6375                           intcon	equ	0xFF2
  6376                           intcon2	equ	0xFF1
  6377                           postinc0	equ	0xFEE
  6378                           wreg	equ	0xFE8
  6379                           postdec1	equ	0xFE5
  6380                           fsr1l	equ	0xFE1
  6381                           indf2	equ	0xFDF
  6382                           postinc2	equ	0xFDE
  6383                           postdec2	equ	0xFDD
  6384                           fsr2h	equ	0xFDA
  6385                           fsr2l	equ	0xFD9
  6386                           status	equ	0xFD8
  6387                           
  6388 ;; *************** function _measure_freq *****************
  6389 ;; Defined at:
  6390 ;;		line 69 in file "../../../src/measure.c"
  6391 ;; Parameters:    Size  Location     Type
  6392 ;;		None
  6393 ;; Auto vars:     Size  Location     Type
  6394 ;;  count           2   59[COMRAM] unsigned int 
  6395 ;; Return value:  Size  Location     Type
  6396 ;;                  2   56[COMRAM] unsigned short 
  6397 ;; Registers used:
  6398 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblp
      +tru, prodl, prodh, bsr, cstack
  6399 ;; Tracked objects:
  6400 ;;		On entry : 0/0
  6401 ;;		On exit  : 0/0
  6402 ;;		Unchanged: 0/0
  6403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6404 ;;      Params:         2       0       0       0       0       0       0       0       0
  6405 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6406 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6407 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6408 ;;Total ram usage:        5 bytes
  6409 ;; Hardware stack levels used:    1
  6410 ;; Hardware stack levels required when called:    5
  6411 ;; This function calls:
  6412 ;;		_format_number
  6413 ;;		_lcd_gotoxy
  6414 ;;		_put_str
  6415 ;;		_timer0_read_ps
  6416 ;; This function is called by:
  6417 ;;		_calibrate
  6418 ;;		_measure_capacitance
  6419 ;;		_measure_inductance
  6420 ;; This function uses a non-reentrant model
  6421 ;;
  6422                           
  6423                           	psect	text32
  6424  0000'                    __ptext32:
  6425                           	opt stack 0
  6426  0000'                    _measure_freq:
  6427                           	opt stack 24
  6428                           
  6429                           ;measure.c: 70: uint16_t count;
  6430                           ;measure.c: 72: INTCON &= ~0b100;
  6431                           
  6432                           ;incstack = 0
  6433  0000' 94F2               	bcf	intcon,2,c	;volatile
  6434                           
  6435                           ;measure.c: 76: TRISA &= ~0b00010000;
  6436  0002' 9892               	bcf	3986,4,c	;volatile
  6437                           
  6438                           ;measure.c: 78: _delay((unsigned long)((20)*(20000000/4000.0)));
  6439  0004' 0E82               	movlw	130
  6440  0006' 6E00'              	movwf	??_measure_freq& (0+255),c
  6441  0008' 0EDE               	movlw	222
  6442  000A'                    u3447:
  6443  000A' 2EE8               	decfsz	wreg,f,c
  6444  000C' D7FE               	goto	u3447
  6445  000E' 2E00'              	decfsz	??_measure_freq& (0+255),f,c
  6446  0010' D7FC               	goto	u3447
  6447                           
  6448                           ;measure.c: 81: TMR0 = 0x00;
  6449  0012' 6AD6               	clrf	4054,c	;volatile
  6450  0014' 6AD7               	clrf	4055,c	;volatile
  6451                           
  6452                           ;measure.c: 83: LATC &= ~0b00000100; LATC |= (!!(1)) << 2;;
  6453  0016' 948B               	bcf	3979,2,c	;volatile
  6454  0018' 848B               	bsf	3979,2,c	;volatile
  6455                           
  6456                           ;measure.c: 86: _delay((unsigned long)((10)*(20000000/4000.0)));
  6457  001A' 0E41               	movlw	65
  6458  001C' 6E00'              	movwf	??_measure_freq& (0+255),c
  6459  001E' 0EEE               	movlw	238
  6460  0020'                    u3457:
  6461  0020' 2EE8               	decfsz	wreg,f,c
  6462  0022' D7FE               	goto	u3457
  6463  0024' 2E00'              	decfsz	??_measure_freq& (0+255),f,c
  6464  0026' D7FC               	goto	u3457
  6465  0028' D000               	nop2	
  6466                           
  6467                           ;measure.c: 87: _delay((unsigned long)((10)*(20000000/4000.0)));
  6468  002A' 0E41               	movlw	65
  6469  002C' 6E00'              	movwf	??_measure_freq& (0+255),c
  6470  002E' 0EEE               	movlw	238
  6471  0030'                    u3467:
  6472  0030' 2EE8               	decfsz	wreg,f,c
  6473  0032' D7FE               	goto	u3467
  6474  0034' 2E00'              	decfsz	??_measure_freq& (0+255),f,c
  6475  0036' D7FC               	goto	u3467
  6476  0038' D000               	nop2	
  6477                           
  6478                           ;measure.c: 88: _delay((unsigned long)((10)*(20000000/4000.0)));
  6479  003A' 0E41               	movlw	65
  6480  003C' 6E00'              	movwf	??_measure_freq& (0+255),c
  6481  003E' 0EEE               	movlw	238
  6482  0040'                    u3477:
  6483  0040' 2EE8               	decfsz	wreg,f,c
  6484  0042' D7FE               	goto	u3477
  6485  0044' 2E00'              	decfsz	??_measure_freq& (0+255),f,c
  6486  0046' D7FC               	goto	u3477
  6487  0048' D000               	nop2	
  6488                           
  6489                           ;measure.c: 89: _delay((unsigned long)((10)*(20000000/4000.0)));
  6490  004A' 0E41               	movlw	65
  6491  004C' 6E00'              	movwf	??_measure_freq& (0+255),c
  6492  004E' 0EEE               	movlw	238
  6493  0050'                    u3487:
  6494  0050' 2EE8               	decfsz	wreg,f,c
  6495  0052' D7FE               	goto	u3487
  6496  0054' 2E00'              	decfsz	??_measure_freq& (0+255),f,c
  6497  0056' D7FC               	goto	u3487
  6498  0058' D000               	nop2	
  6499                           
  6500                           ;measure.c: 90: _delay((unsigned long)((10)*(20000000/4000.0)));
  6501  005A' 0E41               	movlw	65
  6502  005C' 6E00'              	movwf	??_measure_freq& (0+255),c
  6503  005E' 0EEE               	movlw	238
  6504  0060'                    u3497:
  6505  0060' 2EE8               	decfsz	wreg,f,c
  6506  0062' D7FE               	goto	u3497
  6507  0064' 2E00'              	decfsz	??_measure_freq& (0+255),f,c
  6508  0066' D7FC               	goto	u3497
  6509  0068' D000               	nop2	
  6510                           
  6511                           ;measure.c: 91: _delay((unsigned long)((10)*(20000000/4000.0)));
  6512  006A' 0E41               	movlw	65
  6513  006C' 6E00'              	movwf	??_measure_freq& (0+255),c
  6514  006E' 0EEE               	movlw	238
  6515  0070'                    u3507:
  6516  0070' 2EE8               	decfsz	wreg,f,c
  6517  0072' D7FE               	goto	u3507
  6518  0074' 2E00'              	decfsz	??_measure_freq& (0+255),f,c
  6519  0076' D7FC               	goto	u3507
  6520  0078' D000               	nop2	
  6521                           
  6522                           ;measure.c: 92: _delay((unsigned long)((10)*(20000000/4000.0)));
  6523  007A' 0E41               	movlw	65
  6524  007C' 6E00'              	movwf	??_measure_freq& (0+255),c
  6525  007E' 0EEE               	movlw	238
  6526  0080'                    u3517:
  6527  0080' 2EE8               	decfsz	wreg,f,c
  6528  0082' D7FE               	goto	u3517
  6529  0084' 2E00'              	decfsz	??_measure_freq& (0+255),f,c
  6530  0086' D7FC               	goto	u3517
  6531  0088' D000               	nop2	
  6532                           
  6533                           ;measure.c: 93: _delay((unsigned long)((10)*(20000000/4000.0)));
  6534  008A' 0E41               	movlw	65
  6535  008C' 6E00'              	movwf	??_measure_freq& (0+255),c
  6536  008E' 0EEE               	movlw	238
  6537  0090'                    u3527:
  6538  0090' 2EE8               	decfsz	wreg,f,c
  6539  0092' D7FE               	goto	u3527
  6540  0094' 2E00'              	decfsz	??_measure_freq& (0+255),f,c
  6541  0096' D7FC               	goto	u3527
  6542  0098' D000               	nop2	
  6543                           
  6544                           ;measure.c: 94: _delay((unsigned long)((10)*(20000000/4000.0)));
  6545  009A' 0E41               	movlw	65
  6546  009C' 6E00'              	movwf	??_measure_freq& (0+255),c
  6547  009E' 0EEE               	movlw	238
  6548  00A0'                    u3537:
  6549  00A0' 2EE8               	decfsz	wreg,f,c
  6550  00A2' D7FE               	goto	u3537
  6551  00A4' 2E00'              	decfsz	??_measure_freq& (0+255),f,c
  6552  00A6' D7FC               	goto	u3537
  6553  00A8' D000               	nop2	
  6554                           
  6555                           ;measure.c: 95: _delay((unsigned long)((10)*(20000000/4000.0)));
  6556  00AA' 0E41               	movlw	65
  6557  00AC' 6E00'              	movwf	??_measure_freq& (0+255),c
  6558  00AE' 0EEE               	movlw	238
  6559  00B0'                    u3547:
  6560  00B0' 2EE8               	decfsz	wreg,f,c
  6561  00B2' D7FE               	goto	u3547
  6562  00B4' 2E00'              	decfsz	??_measure_freq& (0+255),f,c
  6563  00B6' D7FC               	goto	u3547
  6564  00B8' D000               	nop2	
  6565                           
  6566                           ;measure.c: 97: LATC &= ~0b00000100; LATC |= (!!(0)) << 2;;
  6567  00BA' 948B               	bcf	3979,2,c	;volatile
  6568  00BC' 508B               	movf	3979,w,c	;volatile
  6569                           
  6570                           ;measure.c: 100: TRISA |= 0b00010000;
  6571  00BE' 8892               	bsf	3986,4,c	;volatile
  6572                           
  6573                           ;measure.c: 103: count = timer0_read_ps();
  6574  00C0' EC00' F000'        	call	_timer0_read_ps	;wreg free
  6575  00C4' C006' F03B'        	movff	?_timer0_read_ps,measure_freq@count
  6576  00C8' C007' F03C'        	movff	?_timer0_read_ps+1,measure_freq@count+1
  6577                           
  6578                           ;measure.c: 106: lcd_gotoxy(0, 1);
  6579  00CC' 0E01               	movlw	1
  6580  00CE' 6E0A'              	movwf	lcd_gotoxy@row,c
  6581  00D0' 0E00               	movlw	0
  6582  00D2' EC00' F000'        	call	_lcd_gotoxy
  6583                           
  6584                           ;measure.c: 107: put_str("Freq=");
  6585  00D6' 0E00'              	movlw	STR_5& (0+255)
  6586  00D8' EC00' F000'        	call	_put_str
  6587                           
  6588                           ;measure.c: 108: format_number( count, 10, 5);
  6589  00DC' C03B' F00D'        	movff	measure_freq@count,format_number@n
  6590  00E0' C03C' F00E'        	movff	measure_freq@count+1,format_number@n+1
  6591  00E4' 0E0A               	movlw	10
  6592  00E6' 6E0F'              	movwf	format_number@base,c
  6593  00E8' 0E05               	movlw	5
  6594  00EA' 6E10'              	movwf	format_number@pad,c
  6595  00EC' EC00' F000'        	call	_format_number	;wreg free
  6596                           
  6597                           ;measure.c: 111: return count;
  6598  00F0' C03B' F038'        	movff	measure_freq@count,?_measure_freq
  6599  00F4' C03C' F039'        	movff	measure_freq@count+1,?_measure_freq+1
  6600  00F8' 0012               	return		;funcret
  6601  00FA'                    __end_of_measure_freq:
  6602                           	opt stack 0
  6603                           tblptru	equ	0xFF8
  6604                           tblptrh	equ	0xFF7
  6605                           tblptrl	equ	0xFF6
  6606                           tablat	equ	0xFF5
  6607                           prodl	equ	0xFF3
  6608                           intcon	equ	0xFF2
  6609                           intcon2	equ	0xFF1
  6610                           postinc0	equ	0xFEE
  6611                           wreg	equ	0xFE8
  6612                           postdec1	equ	0xFE5
  6613                           fsr1l	equ	0xFE1
  6614                           indf2	equ	0xFDF
  6615                           postinc2	equ	0xFDE
  6616                           postdec2	equ	0xFDD
  6617                           fsr2h	equ	0xFDA
  6618                           fsr2l	equ	0xFD9
  6619                           status	equ	0xFD8
  6620                           
  6621 ;; *************** function _timer0_read_ps *****************
  6622 ;; Defined at:
  6623 ;;		line 59 in file "../../../lib/timer.c"
  6624 ;; Parameters:    Size  Location     Type
  6625 ;;		None
  6626 ;; Auto vars:     Size  Location     Type
  6627 ;;  count           2   11[COMRAM] unsigned int 
  6628 ;;  prev            1   10[COMRAM] unsigned char 
  6629 ;; Return value:  Size  Location     Type
  6630 ;;                  2    6[COMRAM] unsigned short 
  6631 ;; Registers used:
  6632 ;;		wreg, status,2, status,0
  6633 ;; Tracked objects:
  6634 ;;		On entry : 0/0
  6635 ;;		On exit  : 0/0
  6636 ;;		Unchanged: 0/0
  6637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6638 ;;      Params:         2       0       0       0       0       0       0       0       0
  6639 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6640 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6641 ;;      Totals:         7       0       0       0       0       0       0       0       0
  6642 ;;Total ram usage:        7 bytes
  6643 ;; Hardware stack levels used:    1
  6644 ;; Hardware stack levels required when called:    1
  6645 ;; This function calls:
  6646 ;;		Nothing
  6647 ;; This function is called by:
  6648 ;;		_measure_freq
  6649 ;; This function uses a non-reentrant model
  6650 ;;
  6651                           
  6652                           	psect	text33
  6653  0000'                    __ptext33:
  6654                           	opt stack 0
  6655  0000'                    _timer0_read_ps:
  6656                           	opt stack 27
  6657                           
  6658                           ;timer.c: 60: uint8_t prev = TMR0;
  6659                           
  6660                           ;incstack = 0
  6661  0000' CFD6 F00A'         	movff	4054,timer0_read_ps@prev	;volatile
  6662                           
  6663                           ;timer.c: 61: uint16_t count = 0;
  6664  0004' 6A0B'              	clrf	timer0_read_ps@count,c
  6665  0006' 6A0C'              	clrf	timer0_read_ps@count+1,c
  6666                           
  6667                           ;timer.c: 63: T0CON |= 0x20;
  6668  0008' 8AD5               	bsf	4053,5,c	;volatile
  6669  000A'                    l206:
  6670                           
  6671                           ;timer.c: 67: T0CON |= 0x10;
  6672  000A' 88D5               	bsf	4053,4,c	;volatile
  6673                           
  6674                           ;timer.c: 69: __nop();
  6675  000C' F000               	nop	
  6676                           
  6677                           ;timer.c: 70: __nop();
  6678  000E' F000               	nop	
  6679                           
  6680                           ;timer.c: 72: T0CON &= ~0x10;
  6681  0010' 98D5               	bcf	4053,4,c	;volatile
  6682                           
  6683                           ;timer.c: 74: __nop();
  6684  0012' F000               	nop	
  6685                           
  6686                           ;timer.c: 75: __nop();
  6687  0014' F000               	nop	
  6688                           
  6689                           ;timer.c: 77: ++count;
  6690  0016' 4A0B'              	infsnz	timer0_read_ps@count,f,c
  6691  0018' 2A0C'              	incf	timer0_read_ps@count+1,f,c
  6692                           
  6693                           ;timer.c: 80: } while(prev == TMR0 && count <= 255);
  6694  001A' 500A'              	movf	timer0_read_ps@prev,w,c
  6695  001C' 18D6               	xorwf	4054,w,c	;volatile
  6696  001E' 10D7               	iorwf	4055,w,c	;volatile
  6697  0020' E102               	bnz	l2860
  6698  0022' 040C'              	decf	timer0_read_ps@count+1,w,c
  6699  0024' E3F2               	bnc	l206
  6700  0026'                    l2860:
  6701                           
  6702                           ;timer.c: 82: count = ((prev << 8) + (256 - count));
  6703  0026' 500A'              	movf	timer0_read_ps@prev,w,c
  6704  0028' 6E00'              	movwf	(??_timer0_read_ps+1)& (0+255),c
  6705  002A' 6A00'              	clrf	??_timer0_read_ps& (0+255),c
  6706  002C' 500B'              	movf	timer0_read_ps@count,w,c
  6707  002E' 5E08'              	subwf	??_timer0_read_ps,f,c
  6708  0030' 500C'              	movf	timer0_read_ps@count+1,w,c
  6709  0032' 5A09'              	subwfb	??_timer0_read_ps+1,f,c
  6710  0034' 0E00               	movlw	0
  6711  0036' 2408'              	addwf	??_timer0_read_ps,w,c
  6712  0038' 6E0B'              	movwf	timer0_read_ps@count,c
  6713  003A' 0E01               	movlw	1
  6714  003C' 2009'              	addwfc	??_timer0_read_ps+1,w,c
  6715  003E' 6E0C'              	movwf	timer0_read_ps@count+1,c
  6716                           
  6717                           ;timer.c: 83: return count;
  6718  0040' C00B' F006'        	movff	timer0_read_ps@count,?_timer0_read_ps
  6719  0044' C00C' F007'        	movff	timer0_read_ps@count+1,?_timer0_read_ps+1
  6720  0048' 0012               	return		;funcret
  6721  004A'                    __end_of_timer0_read_ps:
  6722                           	opt stack 0
  6723                           tblptru	equ	0xFF8
  6724                           tblptrh	equ	0xFF7
  6725                           tblptrl	equ	0xFF6
  6726                           tablat	equ	0xFF5
  6727                           prodl	equ	0xFF3
  6728                           intcon	equ	0xFF2
  6729                           intcon2	equ	0xFF1
  6730                           postinc0	equ	0xFEE
  6731                           wreg	equ	0xFE8
  6732                           postdec1	equ	0xFE5
  6733                           fsr1l	equ	0xFE1
  6734                           indf2	equ	0xFDF
  6735                           postinc2	equ	0xFDE
  6736                           postdec2	equ	0xFDD
  6737                           fsr2h	equ	0xFDA
  6738                           fsr2l	equ	0xFD9
  6739                           status	equ	0xFD8
  6740                           
  6741 ;; *************** function _put_str *****************
  6742 ;; Defined at:
  6743 ;;		line 510 in file "../../../src/print.c"
  6744 ;; Parameters:    Size  Location     Type
  6745 ;;  s               1    wreg     PTR const unsigned char 
  6746 ;;		 -> STR_15(13), STR_6(10), STR_5(6), STR_3(15), 
  6747 ;;		 -> STR_1(12), 
  6748 ;; Auto vars:     Size  Location     Type
  6749 ;;  s               1   13[COMRAM] PTR const unsigned char 
  6750 ;;		 -> STR_15(13), STR_6(10), STR_5(6), STR_3(15), 
  6751 ;;		 -> STR_1(12), 
  6752 ;;  i               2   11[COMRAM] int 
  6753 ;; Return value:  Size  Location     Type
  6754 ;;		None               void
  6755 ;; Registers used:
  6756 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblp
      +tru, prodl, prodh, bsr, cstack
  6757 ;; Tracked objects:
  6758 ;;		On entry : 0/0
  6759 ;;		On exit  : 0/0
  6760 ;;		Unchanged: 0/0
  6761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6762 ;;      Params:         0       0       0       0       0       0       0       0       0
  6763 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6764 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6765 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6766 ;;Total ram usage:        4 bytes
  6767 ;; Hardware stack levels used:    1
  6768 ;; Hardware stack levels required when called:    4
  6769 ;; This function calls:
  6770 ;;		_output_putch
  6771 ;; This function is called by:
  6772 ;;		_calibrate
  6773 ;;		_measure_freq
  6774 ;;		_measure_capacitance
  6775 ;;		_measure_inductance
  6776 ;; This function uses a non-reentrant model
  6777 ;;
  6778                           
  6779                           	psect	text34
  6780  0000'                    __ptext34:
  6781                           	opt stack 0
  6782  0000'                    _put_str:
  6783                           	opt stack 25
  6784                           
  6785                           ;incstack = 0
  6786                           ;put_str@s stored from wreg
  6787  0000' 6E0D'              	movwf	put_str@s,c
  6788                           
  6789                           ;print.c: 511: int i;
  6790                           ;print.c: 513: for(i = 0; s[i]; i++) {
  6791  0002' 6A0B'              	clrf	put_str@i,c
  6792  0004' 6A0C'              	clrf	put_str@i+1,c
  6793  0006' D005               	goto	l2872
  6794  0008'                    l2868:
  6795                           
  6796                           ;print.c: 514: output_putch(s[i]);
  6797  0008' D808               	call	PL30	;call to abstracted procedure
  6798  000A' EC00' F000'        	call	_output_putch
  6799  000E' 4A0B'              	infsnz	put_str@i,f,c
  6800  0010' 2A0C'              	incf	put_str@i+1,f,c
  6801  0012'                    l2872:
  6802  0012' D803               	call	PL30	;call to abstracted procedure
  6803  0014' B4D8               	btfsc	status,2,c
  6804  0016' 0012               	return		;funcret
  6805  0018' D7F7               	goto	l2868
  6806  001A'                    __end_of_put_str:
  6807                           	opt stack 0
  6808  001A'                    PL30:
  6809                           	opt stack 25
  6810  001A' 500D'              	movf	put_str@s,w,c
  6811  001C' 240B'              	addwf	put_str@i,w,c
  6812  001E' 6E00'              	movwf	??_put_str& (0+255),c
  6813  0020' C00A' FFF6         	movff	??_put_str,tblptrl
  6814  0024'                    	if	0	;There is only one active tblptr byte
  6815  0024'                    	endif
  6816  0024'                    	if	0	;tblptru may be non-zero
  6817  0024'                    	endif
  6818  0024'                    	if	0	;tblptru may be non-zero
  6819  0024'                    	endif
  6820  0024' 0008               	tblrd		*
  6821  0026' 50F5               	movf	tablat,w,c
  6822  0028' 0012               	return	
  6823  002A'                    __end_ofPL30:
  6824                           	opt stack 0
  6825                           tblptru	equ	0xFF8
  6826                           tblptrh	equ	0xFF7
  6827                           tblptrl	equ	0xFF6
  6828                           tablat	equ	0xFF5
  6829                           prodl	equ	0xFF3
  6830                           intcon	equ	0xFF2
  6831                           intcon2	equ	0xFF1
  6832                           postinc0	equ	0xFEE
  6833                           wreg	equ	0xFE8
  6834                           postdec1	equ	0xFE5
  6835                           fsr1l	equ	0xFE1
  6836                           indf2	equ	0xFDF
  6837                           postinc2	equ	0xFDE
  6838                           postdec2	equ	0xFDD
  6839                           fsr2h	equ	0xFDA
  6840                           fsr2l	equ	0xFD9
  6841                           status	equ	0xFD8
  6842                           
  6843 ;; *************** function _output_putch *****************
  6844 ;; Defined at:
  6845 ;;		line 497 in file "../../../src/print.c"
  6846 ;; Parameters:    Size  Location     Type
  6847 ;;  c               1    wreg     unsigned char 
  6848 ;; Auto vars:     Size  Location     Type
  6849 ;;  c               1    9[COMRAM] unsigned char 
  6850 ;; Return value:  Size  Location     Type
  6851 ;;		None               void
  6852 ;; Registers used:
  6853 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblp
      +tru, prodl, prodh, bsr, cstack
  6854 ;; Tracked objects:
  6855 ;;		On entry : 0/0
  6856 ;;		On exit  : 0/0
  6857 ;;		Unchanged: 0/0
  6858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6859 ;;      Params:         0       0       0       0       0       0       0       0       0
  6860 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6861 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6862 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6863 ;;Total ram usage:        1 bytes
  6864 ;; Hardware stack levels used:    1
  6865 ;; Hardware stack levels required when called:    3
  6866 ;; This function calls:
  6867 ;;		_lcd_send
  6868 ;;		_ser_putch
  6869 ;; This function is called by:
  6870 ;;		_put_str
  6871 ;; This function uses a non-reentrant model
  6872 ;;
  6873                           
  6874                           	psect	text35
  6875  0000'                    __ptext35:
  6876                           	opt stack 0
  6877  0000'                    _output_putch:
  6878                           	opt stack 25
  6879                           
  6880                           ;incstack = 0
  6881                           ;output_putch@c stored from wreg
  6882  0000' 6E09'              	movwf	output_putch@c,c
  6883                           
  6884                           ;print.c: 499: lcd_send((c), 1);
  6885  0002' 0E01               	movlw	1
  6886  0004' 6E07'              	movwf	lcd_send@mode,c
  6887  0006' 5009'              	movf	output_putch@c,w,c
  6888  0008' EC00' F000'        	call	_lcd_send
  6889                           
  6890                           ;print.c: 502: ser_putch(c);
  6891  000C' 5009'              	movf	output_putch@c,w,c
  6892  000E' EF00' F000'        	goto	_ser_putch
  6893  0012'                    __end_of_output_putch:
  6894                           	opt stack 0
  6895                           tblptru	equ	0xFF8
  6896                           tblptrh	equ	0xFF7
  6897                           tblptrl	equ	0xFF6
  6898                           tablat	equ	0xFF5
  6899                           prodl	equ	0xFF3
  6900                           intcon	equ	0xFF2
  6901                           intcon2	equ	0xFF1
  6902                           postinc0	equ	0xFEE
  6903                           wreg	equ	0xFE8
  6904                           postdec1	equ	0xFE5
  6905                           fsr1l	equ	0xFE1
  6906                           indf2	equ	0xFDF
  6907                           postinc2	equ	0xFDE
  6908                           postdec2	equ	0xFDD
  6909                           fsr2h	equ	0xFDA
  6910                           fsr2l	equ	0xFD9
  6911                           status	equ	0xFD8
  6912                           
  6913 ;; *************** function _lcd_gotoxy *****************
  6914 ;; Defined at:
  6915 ;;		line 157 in file "../../../lib/lcd44780.c"
  6916 ;; Parameters:    Size  Location     Type
  6917 ;;  col             1    wreg     unsigned char 
  6918 ;;  row             1   10[COMRAM] unsigned char 
  6919 ;; Auto vars:     Size  Location     Type
  6920 ;;  col             1   11[COMRAM] unsigned char 
  6921 ;;  row_offsets     4   12[COMRAM] unsigned char [4]
  6922 ;; Return value:  Size  Location     Type
  6923 ;;		None               void
  6924 ;; Registers used:
  6925 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6926 ;; Tracked objects:
  6927 ;;		On entry : 0/0
  6928 ;;		On exit  : 0/0
  6929 ;;		Unchanged: 0/0
  6930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6931 ;;      Params:         1       0       0       0       0       0       0       0       0
  6932 ;;      Locals:         5       0       0       0       0       0       0       0       0
  6933 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6934 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6935 ;;Total ram usage:        6 bytes
  6936 ;; Hardware stack levels used:    1
  6937 ;; Hardware stack levels required when called:    4
  6938 ;; This function calls:
  6939 ;;		_lcd_command
  6940 ;; This function is called by:
  6941 ;;		_calibrate
  6942 ;;		_measure_freq
  6943 ;;		_measure_capacitance
  6944 ;;		_measure_inductance
  6945 ;;		_print_unit
  6946 ;;		_print_reading
  6947 ;;		_indicator
  6948 ;;		_main
  6949 ;; This function uses a non-reentrant model
  6950 ;;
  6951                           
  6952                           	psect	text36
  6953  0000'                    __ptext36:
  6954                           	opt stack 0
  6955  0000'                    _lcd_gotoxy:
  6956                           	opt stack 24
  6957                           
  6958                           ;incstack = 0
  6959                           ;lcd_gotoxy@col stored from wreg
  6960  0000' 6E0B'              	movwf	lcd_gotoxy@col,c
  6961                           
  6962                           ;lcd44780.c: 159: uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
  6963  0002' C000' F00C'        	movff	lcd_gotoxy@F6470,lcd_gotoxy@row_offsets
  6964  0006' C001' F00D'        	movff	lcd_gotoxy@F6470+1,lcd_gotoxy@row_offsets+1
  6965  000A' C002' F00E'        	movff	lcd_gotoxy@F6470+2,lcd_gotoxy@row_offsets+2
  6966  000E' C003' F00F'        	movff	lcd_gotoxy@F6470+3,lcd_gotoxy@row_offsets+3
  6967                           
  6968                           ;lcd44780.c: 168: if(LCD_lines == 1) {
  6969  0012' 0404'              	decf	_LCD_lines,w,c
  6970  0014' E106               	bnz	l2834
  6971                           
  6972                           ;lcd44780.c: 169: row_offsets[1] = 0x14;
  6973  0016' 0E14               	movlw	20
  6974  0018' 6E0D'              	movwf	lcd_gotoxy@row_offsets+1,c
  6975                           
  6976                           ;lcd44780.c: 170: row_offsets[2] = 0x28;
  6977  001A' 0E28               	movlw	40
  6978  001C' 6E0E'              	movwf	lcd_gotoxy@row_offsets+2,c
  6979                           
  6980                           ;lcd44780.c: 171: row_offsets[3] = 0x3C;
  6981  001E' 0E3C               	movlw	60
  6982  0020' 6E0F'              	movwf	lcd_gotoxy@row_offsets+3,c
  6983  0022'                    l2834:
  6984                           
  6985                           ;lcd44780.c: 172: }
  6986                           ;lcd44780.c: 178: lcd_command(0x80 | (col + row_offsets[row]));
  6987  0022' 500A'              	movf	lcd_gotoxy@row,w,c
  6988  0024' 0F00'              	addlw	low lcd_gotoxy@row_offsets
  6989  0026' 6ED9               	movwf	fsr2l,c
  6990  0028' 6ADA               	clrf	fsr2h,c
  6991  002A' 50DF               	movf	indf2,w,c
  6992  002C' 240B'              	addwf	lcd_gotoxy@col,w,c
  6993  002E' 0980               	iorlw	128
  6994  0030' EF00' F000'        	goto	_lcd_command
  6995  0034'                    __end_of_lcd_gotoxy:
  6996                           	opt stack 0
  6997                           tblptru	equ	0xFF8
  6998                           tblptrh	equ	0xFF7
  6999                           tblptrl	equ	0xFF6
  7000                           tablat	equ	0xFF5
  7001                           prodl	equ	0xFF3
  7002                           intcon	equ	0xFF2
  7003                           intcon2	equ	0xFF1
  7004                           postinc0	equ	0xFEE
  7005                           wreg	equ	0xFE8
  7006                           postdec1	equ	0xFE5
  7007                           fsr1l	equ	0xFE1
  7008                           indf2	equ	0xFDF
  7009                           postinc2	equ	0xFDE
  7010                           postdec2	equ	0xFDD
  7011                           fsr2h	equ	0xFDA
  7012                           fsr2l	equ	0xFD9
  7013                           status	equ	0xFD8
  7014                           
  7015 ;; *************** function _format_number *****************
  7016 ;; Defined at:
  7017 ;;		line 15 in file "../../../lib/format.c"
  7018 ;; Parameters:    Size  Location     Type
  7019 ;;  n               2   13[COMRAM] unsigned int 
  7020 ;;  base            1   15[COMRAM] unsigned char 
  7021 ;;  pad             1   16[COMRAM] char 
  7022 ;; Auto vars:     Size  Location     Type
  7023 ;;  buf            32   19[COMRAM] unsigned char [32]
  7024 ;;  i               1   55[COMRAM] char 
  7025 ;;  di              1   54[COMRAM] unsigned char 
  7026 ;;  padchar         1   53[COMRAM] unsigned char 
  7027 ;; Return value:  Size  Location     Type
  7028 ;;		None               void
  7029 ;; Registers used:
  7030 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7031 ;; Tracked objects:
  7032 ;;		On entry : 0/0
  7033 ;;		On exit  : 0/0
  7034 ;;		Unchanged: 0/0
  7035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7036 ;;      Params:         4       0       0       0       0       0       0       0       0
  7037 ;;      Locals:        37       0       0       0       0       0       0       0       0
  7038 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7039 ;;      Totals:        43       0       0       0       0       0       0       0       0
  7040 ;;Total ram usage:       43 bytes
  7041 ;; Hardware stack levels used:    1
  7042 ;; Hardware stack levels required when called:    2
  7043 ;; This function calls:
  7044 ;;		___lwdiv
  7045 ;;		___lwmod
  7046 ;;		_buffer_putch
  7047 ;; This function is called by:
  7048 ;;		_format_xint32
  7049 ;;		_measure_freq
  7050 ;;		_print_reading
  7051 ;; This function uses a non-reentrant model
  7052 ;;
  7053                           
  7054                           	psect	text37
  7055  0000'                    __ptext37:
  7056                           	opt stack 0
  7057  0000'                    _format_number:
  7058                           	opt stack 26
  7059                           
  7060                           ;format.c: 16: char buf[8 * sizeof(long)];
  7061                           ;format.c: 17: uint8_t di;
  7062                           ;format.c: 18: int8_t i = 0;
  7063                           
  7064                           ;incstack = 0
  7065  0000' 6A37'              	clrf	format_number@i,c
  7066                           
  7067                           ;format.c: 19: char padchar = ' ';
  7068  0002' 0E20               	movlw	32
  7069  0004' 6E35'              	movwf	format_number@padchar,c
  7070                           
  7071                           ;format.c: 21: if(pad < 0) {
  7072  0006' AE10'              	btfss	format_number@pad,7,c
  7073  0008' D003               	goto	l2758
  7074                           
  7075                           ;format.c: 22: pad = -pad;
  7076  000A' 6C10'              	negf	format_number@pad,c
  7077                           
  7078                           ;format.c: 23: padchar = '0';
  7079  000C' 0E30               	movlw	48
  7080  000E' 6E35'              	movwf	format_number@padchar,c
  7081  0010'                    l2758:
  7082                           
  7083                           ;format.c: 35: di = n % base;
  7084  0010' C00D' F006'        	movff	format_number@n,___lwmod@dividend
  7085  0014' C00E' F007'        	movff	format_number@n+1,___lwmod@dividend+1
  7086  0018' C00F' F008'        	movff	format_number@base,___lwmod@divisor
  7087  001C' 6A09'              	clrf	___lwmod@divisor+1,c
  7088  001E' EC00' F000'        	call	___lwmod	;wreg free
  7089  0022' 5006'              	movf	?___lwmod,w,c
  7090  0024' 6E36'              	movwf	format_number@di,c
  7091                           
  7092                           ;format.c: 36: buf[i++] = (di < 10 ? (uint8_t)'0' + di : (uint8_t)'A' + di - 10);
  7093  0026' 0E09               	movlw	9
  7094  0028' 6436'              	cpfsgt	format_number@di,c
  7095  002A' D002               	goto	l2764
  7096  002C' 0E37               	movlw	55
  7097  002E' D001               	goto	L3
  7098  0030'                    l2764:
  7099  0030' 0E30               	movlw	48
  7100  0032'                    L3:
  7101  0032' 2436'              	addwf	format_number@di,w,c
  7102  0034' 6E33'              	movwf	_format_number$68,c
  7103  0036' 6A34'              	clrf	_format_number$68+1,c
  7104  0038' 0E00               	movlw	0
  7105  003A' 2234'              	addwfc	_format_number$68+1,f,c
  7106  003C' 5037'              	movf	format_number@i,w,c
  7107  003E' 0F00'              	addlw	low format_number@buf
  7108  0040' 6ED9               	movwf	fsr2l,c
  7109  0042' 6ADA               	clrf	fsr2h,c
  7110  0044' C033' FFDF         	movff	_format_number$68,indf2
  7111  0048' 2A37'              	incf	format_number@i,f,c
  7112                           
  7113                           ;format.c: 38: n /= base;
  7114  004A' C00D' F006'        	movff	format_number@n,___lwdiv@dividend
  7115  004E' C00E' F007'        	movff	format_number@n+1,___lwdiv@dividend+1
  7116  0052' C00F' F008'        	movff	format_number@base,___lwdiv@divisor
  7117  0056' 6A09'              	clrf	___lwdiv@divisor+1,c
  7118  0058' EC00' F000'        	call	___lwdiv	;wreg free
  7119  005C' C006' F00D'        	movff	?___lwdiv,format_number@n
  7120  0060' C007' F00E'        	movff	?___lwdiv+1,format_number@n+1
  7121                           
  7122                           ;format.c: 39: } while(n > 0);
  7123  0064' 500D'              	movf	format_number@n,w,c
  7124  0066' 100E'              	iorwf	format_number@n+1,w,c
  7125  0068' E004               	bz	l2776
  7126  006A' D7D2               	goto	l2758
  7127  006C'                    l2774:
  7128  006C' 5035'              	movf	format_number@padchar,w,c
  7129  006E' EC00' F000'        	call	_buffer_putch
  7130  0072'                    l2776:
  7131  0072' 0610'              	decf	format_number@pad,f,c
  7132  0074' 2810'              	incf	format_number@pad,w,c
  7133  0076' 6E00'              	movwf	??_format_number& (0+255),c
  7134  0078' 5037'              	movf	format_number@i,w,c
  7135  007A' 0A80               	xorlw	128
  7136  007C' 6E00'              	movwf	(??_format_number+1)& (0+255),c
  7137  007E' 5011'              	movf	??_format_number,w,c
  7138  0080' 0A80               	xorlw	128
  7139  0082' 5C00'              	subwf	(??_format_number+1)& (0+255),w,c
  7140  0084' E3F3               	bnc	l2774
  7141  0086'                    l2778:
  7142                           
  7143                           ;format.c: 43: for(; i > 0; i--) buffer_putch((char)buf[(int16_t)i - 1]);
  7144  0086' 5037'              	movf	format_number@i,w,c
  7145  0088' 0A80               	xorlw	128
  7146  008A' 0F7F               	addlw	-129
  7147  008C' A0D8               	btfss	status,0,c
  7148  008E' 0012               	return	
  7149  0090' C037' F011'        	movff	format_number@i,??_format_number
  7150  0094' 0611'              	decf	??_format_number,f,c
  7151  0096' 5011'              	movf	??_format_number,w,c
  7152  0098' 0F00'              	addlw	low format_number@buf
  7153  009A' 6ED9               	movwf	fsr2l,c
  7154  009C' 6ADA               	clrf	fsr2h,c
  7155  009E' 50DF               	movf	indf2,w,c
  7156  00A0' EC00' F000'        	call	_buffer_putch
  7157                           
  7158                           ; BSR set to: 0
  7159  00A4' 0637'              	decf	format_number@i,f,c
  7160  00A6' D7EF               	goto	l2778
  7161  00A8'                    __end_of_format_number:
  7162                           	opt stack 0
  7163                           tblptru	equ	0xFF8
  7164                           tblptrh	equ	0xFF7
  7165                           tblptrl	equ	0xFF6
  7166                           tablat	equ	0xFF5
  7167                           prodl	equ	0xFF3
  7168                           intcon	equ	0xFF2
  7169                           intcon2	equ	0xFF1
  7170                           postinc0	equ	0xFEE
  7171                           wreg	equ	0xFE8
  7172                           postdec1	equ	0xFE5
  7173                           fsr1l	equ	0xFE1
  7174                           indf2	equ	0xFDF
  7175                           postinc2	equ	0xFDE
  7176                           postdec2	equ	0xFDD
  7177                           fsr2h	equ	0xFDA
  7178                           fsr2l	equ	0xFD9
  7179                           status	equ	0xFD8
  7180                           
  7181 ;; *************** function _buffer_putch *****************
  7182 ;; Defined at:
  7183 ;;		line 22 in file "../../../lib/buffer.c"
  7184 ;; Parameters:    Size  Location     Type
  7185 ;;  ch              1    wreg     unsigned char 
  7186 ;; Auto vars:     Size  Location     Type
  7187 ;;  ch              1    8[COMRAM] unsigned char 
  7188 ;; Return value:  Size  Location     Type
  7189 ;;                  1    wreg      unsigned char 
  7190 ;; Registers used:
  7191 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7192 ;; Tracked objects:
  7193 ;;		On entry : 0/0
  7194 ;;		On exit  : F/0
  7195 ;;		Unchanged: 0/0
  7196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7197 ;;      Params:         0       0       0       0       0       0       0       0       0
  7198 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7199 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7200 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7201 ;;Total ram usage:        3 bytes
  7202 ;; Hardware stack levels used:    1
  7203 ;; Hardware stack levels required when called:    1
  7204 ;; This function calls:
  7205 ;;		Nothing
  7206 ;; This function is called by:
  7207 ;;		_format_number
  7208 ;;		_format_xint32
  7209 ;;		_format_double
  7210 ;; This function uses a non-reentrant model
  7211 ;;
  7212                           
  7213                           	psect	text38
  7214  0000'                    __ptext38:
  7215                           	opt stack 0
  7216  0000'                    _buffer_putch:
  7217                           	opt stack 26
  7218                           
  7219                           ;incstack = 0
  7220                           ;buffer_putch@ch stored from wreg
  7221  0000' 6E08'              	movwf	buffer_putch@ch,c
  7222                           
  7223                           ;buffer.c: 23: if(16 - buffer.n <= 0) {
  7224  0002' 0E10               	movlw	16
  7225  0004' 6E00'              	movwf	??_buffer_putch& (0+255),c
  7226  0006' 6A00'              	clrf	(??_buffer_putch+1)& (0+255),c
  7227  0008' 0100               	movlb	0	; () banked
  7228  000A' 3900'              	swapf	(_buffer+16)& (0+255),w,b
  7229  000C' 0B0F               	andlw	15
  7230  000E' 5E06'              	subwf	??_buffer_putch,f,c
  7231  0010' 0E00               	movlw	0
  7232  0012' 5A07'              	subwfb	??_buffer_putch+1,f,c
  7233  0014' BE07'              	btfsc	??_buffer_putch+1,7,c
  7234  0016' 0C00               	retlw	0
  7235  0018' 5007'              	movf	??_buffer_putch+1,w,c
  7236  001A' E103               	bnz	l2636
  7237  001C' 0406'              	decf	??_buffer_putch,w,c
  7238  001E' A0D8               	btfss	status,0,c
  7239  0020' 0012               	return	
  7240  0022'                    l2636:
  7241                           
  7242                           ; BSR set to: 0
  7243                           ;buffer.c: 25: }
  7244                           ;buffer.c: 26: buffer.x[buffer.n] = ch;
  7245  0022' 3900'              	swapf	(_buffer+16)& (0+255),w,b
  7246  0024' 0B0F               	andlw	15
  7247  0026' 6E00'              	movwf	??_buffer_putch& (0+255),c
  7248  0028' 5006'              	movf	??_buffer_putch,w,c
  7249  002A' 0F00'              	addlw	low _buffer
  7250  002C' 6ED9               	movwf	fsr2l,c
  7251  002E' 6ADA               	clrf	fsr2h,c
  7252  0030' C008' FFDF         	movff	buffer_putch@ch,indf2
  7253                           
  7254                           ; BSR set to: 0
  7255                           ;buffer.c: 27: buffer.n++;
  7256  0034' 3900'              	swapf	(_buffer+16)& (0+255),w,b
  7257  0036' 0B0F               	andlw	15
  7258  0038' 6E00'              	movwf	??_buffer_putch& (0+255),c
  7259  003A' 2A06'              	incf	??_buffer_putch,f,c
  7260  003C' 3A00'              	swapf	??_buffer_putch& (0+255),f,c
  7261  003E' 5100'              	movf	(_buffer+16)& (0+255),w,b
  7262  0040' 1800'              	xorwf	??_buffer_putch& (0+255),w,c
  7263  0042' 0B0F               	andlw	-241
  7264  0044' 1800'              	xorwf	??_buffer_putch& (0+255),w,c
  7265  0046' 6F00'              	movwf	(_buffer+16)& (0+255),b
  7266                           
  7267                           ; BSR set to: 0
  7268  0048' 0012               	return		;funcret
  7269  004A'                    __end_of_buffer_putch:
  7270                           	opt stack 0
  7271                           tblptru	equ	0xFF8
  7272                           tblptrh	equ	0xFF7
  7273                           tblptrl	equ	0xFF6
  7274                           tablat	equ	0xFF5
  7275                           prodl	equ	0xFF3
  7276                           intcon	equ	0xFF2
  7277                           intcon2	equ	0xFF1
  7278                           postinc0	equ	0xFEE
  7279                           wreg	equ	0xFE8
  7280                           postdec1	equ	0xFE5
  7281                           fsr1l	equ	0xFE1
  7282                           indf2	equ	0xFDF
  7283                           postinc2	equ	0xFDE
  7284                           postdec2	equ	0xFDD
  7285                           fsr2h	equ	0xFDA
  7286                           fsr2l	equ	0xFD9
  7287                           status	equ	0xFD8
  7288                           
  7289 ;; *************** function ___lwmod *****************
  7290 ;; Defined at:
  7291 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lwmod.c"
  7292 ;; Parameters:    Size  Location     Type
  7293 ;;  dividend        2    6[COMRAM] unsigned int 
  7294 ;;  divisor         2    8[COMRAM] unsigned int 
  7295 ;; Auto vars:     Size  Location     Type
  7296 ;;  counter         1   10[COMRAM] unsigned char 
  7297 ;; Return value:  Size  Location     Type
  7298 ;;                  2    6[COMRAM] unsigned int 
  7299 ;; Registers used:
  7300 ;;		wreg, status,2, status,0
  7301 ;; Tracked objects:
  7302 ;;		On entry : 0/0
  7303 ;;		On exit  : 0/0
  7304 ;;		Unchanged: 0/0
  7305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7306 ;;      Params:         4       0       0       0       0       0       0       0       0
  7307 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7308 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7309 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7310 ;;Total ram usage:        5 bytes
  7311 ;; Hardware stack levels used:    1
  7312 ;; Hardware stack levels required when called:    1
  7313 ;; This function calls:
  7314 ;;		Nothing
  7315 ;; This function is called by:
  7316 ;;		_format_number
  7317 ;;		_print_reading
  7318 ;; This function uses a non-reentrant model
  7319 ;;
  7320                           
  7321                           	psect	text39
  7322  0000'                    __ptext39:
  7323                           	opt stack 0
  7324  0000'                    ___lwmod:
  7325                           	opt stack 26
  7326                           
  7327                           ; BSR set to: 0
  7328                           ;incstack = 0
  7329  0000' 5008'              	movf	___lwmod@divisor,w,c
  7330  0002' 1009'              	iorwf	___lwmod@divisor+1,w,c
  7331  0004' E017               	bz	l1037
  7332  0006' 0E01               	movlw	1
  7333  0008' 6E0A'              	movwf	___lwmod@counter,c
  7334  000A' D004               	goto	l2698
  7335  000C'                    l2696:
  7336  000C' 90D8               	bcf	status,0,c
  7337  000E' 3608'              	rlcf	___lwmod@divisor,f,c
  7338  0010' 3609'              	rlcf	___lwmod@divisor+1,f,c
  7339  0012' 2A0A'              	incf	___lwmod@counter,f,c
  7340  0014'                    l2698:
  7341  0014' AE09'              	btfss	___lwmod@divisor+1,7,c
  7342  0016' D7FA               	goto	l2696
  7343  0018'                    l2700:
  7344  0018' 5008'              	movf	___lwmod@divisor,w,c
  7345  001A' 5C06'              	subwf	___lwmod@dividend,w,c
  7346  001C' 5009'              	movf	___lwmod@divisor+1,w,c
  7347  001E' 5807'              	subwfb	___lwmod@dividend+1,w,c
  7348  0020' E304               	bnc	l2704
  7349  0022' 5008'              	movf	___lwmod@divisor,w,c
  7350  0024' 5E06'              	subwf	___lwmod@dividend,f,c
  7351  0026' 5009'              	movf	___lwmod@divisor+1,w,c
  7352  0028' 5A07'              	subwfb	___lwmod@dividend+1,f,c
  7353  002A'                    l2704:
  7354  002A' 90D8               	bcf	status,0,c
  7355  002C' 3209'              	rrcf	___lwmod@divisor+1,f,c
  7356  002E' 3208'              	rrcf	___lwmod@divisor,f,c
  7357  0030' 2E0A'              	decfsz	___lwmod@counter,f,c
  7358  0032' D7F2               	goto	l2700
  7359  0034'                    l1037:
  7360  0034' C006' F006'        	movff	___lwmod@dividend,?___lwmod
  7361  0038' C007' F007'        	movff	___lwmod@dividend+1,?___lwmod+1
  7362  003C' 0012               	return		;funcret
  7363  003E'                    __end_of___lwmod:
  7364                           	opt stack 0
  7365                           tblptru	equ	0xFF8
  7366                           tblptrh	equ	0xFF7
  7367                           tblptrl	equ	0xFF6
  7368                           tablat	equ	0xFF5
  7369                           prodl	equ	0xFF3
  7370                           intcon	equ	0xFF2
  7371                           intcon2	equ	0xFF1
  7372                           postinc0	equ	0xFEE
  7373                           wreg	equ	0xFE8
  7374                           postdec1	equ	0xFE5
  7375                           fsr1l	equ	0xFE1
  7376                           indf2	equ	0xFDF
  7377                           postinc2	equ	0xFDE
  7378                           postdec2	equ	0xFDD
  7379                           fsr2h	equ	0xFDA
  7380                           fsr2l	equ	0xFD9
  7381                           status	equ	0xFD8
  7382                           
  7383 ;; *************** function ___lwdiv *****************
  7384 ;; Defined at:
  7385 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lwdiv.c"
  7386 ;; Parameters:    Size  Location     Type
  7387 ;;  dividend        2    6[COMRAM] unsigned int 
  7388 ;;  divisor         2    8[COMRAM] unsigned int 
  7389 ;; Auto vars:     Size  Location     Type
  7390 ;;  quotient        2   10[COMRAM] unsigned int 
  7391 ;;  counter         1   12[COMRAM] unsigned char 
  7392 ;; Return value:  Size  Location     Type
  7393 ;;                  2    6[COMRAM] unsigned int 
  7394 ;; Registers used:
  7395 ;;		wreg, status,2, status,0
  7396 ;; Tracked objects:
  7397 ;;		On entry : 0/0
  7398 ;;		On exit  : 0/0
  7399 ;;		Unchanged: 0/0
  7400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7401 ;;      Params:         4       0       0       0       0       0       0       0       0
  7402 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7403 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7404 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7405 ;;Total ram usage:        7 bytes
  7406 ;; Hardware stack levels used:    1
  7407 ;; Hardware stack levels required when called:    1
  7408 ;; This function calls:
  7409 ;;		Nothing
  7410 ;; This function is called by:
  7411 ;;		_format_number
  7412 ;;		_print_reading
  7413 ;; This function uses a non-reentrant model
  7414 ;;
  7415                           
  7416                           	psect	text40
  7417  0000'                    __ptext40:
  7418                           	opt stack 0
  7419  0000'                    ___lwdiv:
  7420                           	opt stack 26
  7421                           
  7422                           ;incstack = 0
  7423  0000' 6A0A'              	clrf	___lwdiv@quotient,c
  7424  0002' 6A0B'              	clrf	___lwdiv@quotient+1,c
  7425  0004' 5008'              	movf	___lwdiv@divisor,w,c
  7426  0006' 1009'              	iorwf	___lwdiv@divisor+1,w,c
  7427  0008' E01B               	bz	l1027
  7428  000A' 0E01               	movlw	1
  7429  000C' 6E0C'              	movwf	___lwdiv@counter,c
  7430  000E' D004               	goto	l2678
  7431  0010'                    l2676:
  7432  0010' 90D8               	bcf	status,0,c
  7433  0012' 3608'              	rlcf	___lwdiv@divisor,f,c
  7434  0014' 3609'              	rlcf	___lwdiv@divisor+1,f,c
  7435  0016' 2A0C'              	incf	___lwdiv@counter,f,c
  7436  0018'                    l2678:
  7437  0018' AE09'              	btfss	___lwdiv@divisor+1,7,c
  7438  001A' D7FA               	goto	l2676
  7439  001C'                    l2680:
  7440  001C' 90D8               	bcf	status,0,c
  7441  001E' 360A'              	rlcf	___lwdiv@quotient,f,c
  7442  0020' 360B'              	rlcf	___lwdiv@quotient+1,f,c
  7443  0022' 5008'              	movf	___lwdiv@divisor,w,c
  7444  0024' 5C06'              	subwf	___lwdiv@dividend,w,c
  7445  0026' 5009'              	movf	___lwdiv@divisor+1,w,c
  7446  0028' 5807'              	subwfb	___lwdiv@dividend+1,w,c
  7447  002A' E305               	bnc	l2688
  7448  002C' 5008'              	movf	___lwdiv@divisor,w,c
  7449  002E' 5E06'              	subwf	___lwdiv@dividend,f,c
  7450  0030' 5009'              	movf	___lwdiv@divisor+1,w,c
  7451  0032' 5A07'              	subwfb	___lwdiv@dividend+1,f,c
  7452  0034' 800A'              	bsf	___lwdiv@quotient,0,c
  7453  0036'                    l2688:
  7454  0036' 90D8               	bcf	status,0,c
  7455  0038' 3209'              	rrcf	___lwdiv@divisor+1,f,c
  7456  003A' 3208'              	rrcf	___lwdiv@divisor,f,c
  7457  003C' 2E0C'              	decfsz	___lwdiv@counter,f,c
  7458  003E' D7EE               	goto	l2680
  7459  0040'                    l1027:
  7460  0040' C00A' F006'        	movff	___lwdiv@quotient,?___lwdiv
  7461  0044' C00B' F007'        	movff	___lwdiv@quotient+1,?___lwdiv+1
  7462  0048' 0012               	return		;funcret
  7463  004A'                    __end_of___lwdiv:
  7464                           	opt stack 0
  7465                           tblptru	equ	0xFF8
  7466                           tblptrh	equ	0xFF7
  7467                           tblptrl	equ	0xFF6
  7468                           tablat	equ	0xFF5
  7469                           prodl	equ	0xFF3
  7470                           intcon	equ	0xFF2
  7471                           intcon2	equ	0xFF1
  7472                           postinc0	equ	0xFEE
  7473                           wreg	equ	0xFE8
  7474                           postdec1	equ	0xFE5
  7475                           fsr1l	equ	0xFE1
  7476                           indf2	equ	0xFDF
  7477                           postinc2	equ	0xFDE
  7478                           postdec2	equ	0xFDD
  7479                           fsr2h	equ	0xFDA
  7480                           fsr2l	equ	0xFD9
  7481                           status	equ	0xFD8
  7482                           
  7483 ;; *************** function _lcd_clear *****************
  7484 ;; Defined at:
  7485 ;;		line 309 in file "../../../lib/lcd44780.c"
  7486 ;; Parameters:    Size  Location     Type
  7487 ;;		None
  7488 ;; Auto vars:     Size  Location     Type
  7489 ;;		None
  7490 ;; Return value:  Size  Location     Type
  7491 ;;		None               void
  7492 ;; Registers used:
  7493 ;;		wreg, status,2, status,0, cstack
  7494 ;; Tracked objects:
  7495 ;;		On entry : 0/0
  7496 ;;		On exit  : 0/0
  7497 ;;		Unchanged: 0/0
  7498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7499 ;;      Params:         0       0       0       0       0       0       0       0       0
  7500 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7501 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7502 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7503 ;;Total ram usage:        1 bytes
  7504 ;; Hardware stack levels used:    1
  7505 ;; Hardware stack levels required when called:    4
  7506 ;; This function calls:
  7507 ;;		_lcd_command
  7508 ;; This function is called by:
  7509 ;;		_calibrate
  7510 ;;		_main
  7511 ;; This function uses a non-reentrant model
  7512 ;;
  7513                           
  7514                           	psect	text41
  7515  0000'                    __ptext41:
  7516                           	opt stack 0
  7517  0000'                    _lcd_clear:
  7518                           	opt stack 26
  7519                           
  7520                           ;lcd44780.c: 310: lcd_command(0x01);
  7521                           
  7522                           ;incstack = 0
  7523  0000' 0E01               	movlw	1
  7524  0002' EC00' F000'        	call	_lcd_command
  7525                           
  7526                           ;lcd44780.c: 311: _delay((unsigned long)((2)*(20000000/4000.0)));
  7527  0006' 0E0D               	movlw	13
  7528  0008' 6E00'              	movwf	??_lcd_clear& (0+255),c
  7529  000A' 0EFC               	movlw	252
  7530  000C'                    u3557:
  7531  000C' 2EE8               	decfsz	wreg,f,c
  7532  000E' D7FE               	goto	u3557
  7533  0010' 2E00'              	decfsz	??_lcd_clear& (0+255),f,c
  7534  0012' D7FC               	goto	u3557
  7535  0014' 0012               	return		;funcret
  7536  0016'                    __end_of_lcd_clear:
  7537                           	opt stack 0
  7538                           tblptru	equ	0xFF8
  7539                           tblptrh	equ	0xFF7
  7540                           tblptrl	equ	0xFF6
  7541                           tablat	equ	0xFF5
  7542                           prodl	equ	0xFF3
  7543                           intcon	equ	0xFF2
  7544                           intcon2	equ	0xFF1
  7545                           postinc0	equ	0xFEE
  7546                           wreg	equ	0xFE8
  7547                           postdec1	equ	0xFE5
  7548                           fsr1l	equ	0xFE1
  7549                           indf2	equ	0xFDF
  7550                           postinc2	equ	0xFDE
  7551                           postdec2	equ	0xFDD
  7552                           fsr2h	equ	0xFDA
  7553                           fsr2l	equ	0xFD9
  7554                           status	equ	0xFD8
  7555                           
  7556 ;; *************** function _lcd_command *****************
  7557 ;; Defined at:
  7558 ;;		line 149 in file "../../../lib/lcd44780.c"
  7559 ;; Parameters:    Size  Location     Type
  7560 ;;  value           1    wreg     unsigned char 
  7561 ;; Auto vars:     Size  Location     Type
  7562 ;;  value           1    9[COMRAM] unsigned char 
  7563 ;; Return value:  Size  Location     Type
  7564 ;;		None               void
  7565 ;; Registers used:
  7566 ;;		wreg, status,2, status,0, cstack
  7567 ;; Tracked objects:
  7568 ;;		On entry : 0/0
  7569 ;;		On exit  : 0/0
  7570 ;;		Unchanged: 0/0
  7571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7572 ;;      Params:         0       0       0       0       0       0       0       0       0
  7573 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7574 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7575 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7576 ;;Total ram usage:        1 bytes
  7577 ;; Hardware stack levels used:    1
  7578 ;; Hardware stack levels required when called:    3
  7579 ;; This function calls:
  7580 ;;		_lcd_send
  7581 ;; This function is called by:
  7582 ;;		_lcd_gotoxy
  7583 ;;		_lcd_clear
  7584 ;;		_lcd_begin
  7585 ;; This function uses a non-reentrant model
  7586 ;;
  7587                           
  7588                           	psect	text42
  7589  0000'                    __ptext42:
  7590                           	opt stack 0
  7591  0000'                    _lcd_command:
  7592                           	opt stack 24
  7593                           
  7594                           ;incstack = 0
  7595                           ;lcd_command@value stored from wreg
  7596  0000' 6E09'              	movwf	lcd_command@value,c
  7597                           
  7598                           ;lcd44780.c: 150: lcd_send(value, 0);
  7599  0002' 0E00               	movlw	0
  7600  0004' 6E07'              	movwf	lcd_send@mode,c
  7601  0006' 5009'              	movf	lcd_command@value,w,c
  7602  0008' EF00' F000'        	goto	_lcd_send
  7603  000C'                    __end_of_lcd_command:
  7604                           	opt stack 0
  7605                           tblptru	equ	0xFF8
  7606                           tblptrh	equ	0xFF7
  7607                           tblptrl	equ	0xFF6
  7608                           tablat	equ	0xFF5
  7609                           prodl	equ	0xFF3
  7610                           intcon	equ	0xFF2
  7611                           intcon2	equ	0xFF1
  7612                           postinc0	equ	0xFEE
  7613                           wreg	equ	0xFE8
  7614                           postdec1	equ	0xFE5
  7615                           fsr1l	equ	0xFE1
  7616                           indf2	equ	0xFDF
  7617                           postinc2	equ	0xFDE
  7618                           postdec2	equ	0xFDD
  7619                           fsr2h	equ	0xFDA
  7620                           fsr2l	equ	0xFD9
  7621                           status	equ	0xFD8
  7622                           
  7623 ;; *************** function _lcd_send *****************
  7624 ;; Defined at:
  7625 ;;		line 125 in file "../../../lib/lcd44780.c"
  7626 ;; Parameters:    Size  Location     Type
  7627 ;;  value           1    wreg     unsigned char 
  7628 ;;  mode            1    7[COMRAM] unsigned char 
  7629 ;; Auto vars:     Size  Location     Type
  7630 ;;  value           1    8[COMRAM] unsigned char 
  7631 ;; Return value:  Size  Location     Type
  7632 ;;		None               void
  7633 ;; Registers used:
  7634 ;;		wreg, status,2, status,0, cstack
  7635 ;; Tracked objects:
  7636 ;;		On entry : 0/0
  7637 ;;		On exit  : 0/0
  7638 ;;		Unchanged: 0/0
  7639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7640 ;;      Params:         1       0       0       0       0       0       0       0       0
  7641 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7642 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7643 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7644 ;;Total ram usage:        2 bytes
  7645 ;; Hardware stack levels used:    1
  7646 ;; Hardware stack levels required when called:    2
  7647 ;; This function calls:
  7648 ;;		_lcd_write4bits
  7649 ;; This function is called by:
  7650 ;;		_lcd_command
  7651 ;;		_lcd_puts
  7652 ;;		_calibrate
  7653 ;;		_output_putch
  7654 ;; This function uses a non-reentrant model
  7655 ;;
  7656                           
  7657                           	psect	text43
  7658  0000'                    __ptext43:
  7659                           	opt stack 0
  7660  0000'                    _lcd_send:
  7661                           	opt stack 25
  7662                           
  7663                           ;incstack = 0
  7664                           ;lcd_send@value stored from wreg
  7665  0000' 6E08'              	movwf	lcd_send@value,c
  7666                           
  7667                           ;lcd44780.c: 126: if(mode) {
  7668  0002' 5007'              	movf	lcd_send@mode,w,c
  7669  0004' E002               	bz	l2528
  7670                           
  7671                           ;lcd44780.c: 127: LATB |= 0b0100;
  7672  0006' 848A               	bsf	3978,2,c	;volatile
  7673                           
  7674                           ;lcd44780.c: 128: } else {
  7675  0008' D001               	goto	l2530
  7676  000A'                    l2528:
  7677                           
  7678                           ;lcd44780.c: 129: LATB &= ~0b0100;
  7679  000A' 948A               	bcf	3978,2,c	;volatile
  7680  000C'                    l2530:
  7681                           
  7682                           ;lcd44780.c: 130: }
  7683                           ;lcd44780.c: 137: {
  7684                           ;lcd44780.c: 138: lcd_write4bits(value >> 4);
  7685  000C' 3808'              	swapf	lcd_send@value,w,c
  7686  000E' 0B0F               	andlw	15
  7687  0010' EC00' F000'        	call	_lcd_write4bits
  7688                           
  7689                           ;lcd44780.c: 139: lcd_write4bits(value);
  7690  0014' 5008'              	movf	lcd_send@value,w,c
  7691  0016' EF00' F000'        	goto	_lcd_write4bits
  7692  001A'                    __end_of_lcd_send:
  7693                           	opt stack 0
  7694                           tblptru	equ	0xFF8
  7695                           tblptrh	equ	0xFF7
  7696                           tblptrl	equ	0xFF6
  7697                           tablat	equ	0xFF5
  7698                           prodl	equ	0xFF3
  7699                           intcon	equ	0xFF2
  7700                           intcon2	equ	0xFF1
  7701                           postinc0	equ	0xFEE
  7702                           wreg	equ	0xFE8
  7703                           postdec1	equ	0xFE5
  7704                           fsr1l	equ	0xFE1
  7705                           indf2	equ	0xFDF
  7706                           postinc2	equ	0xFDE
  7707                           postdec2	equ	0xFDD
  7708                           fsr2h	equ	0xFDA
  7709                           fsr2l	equ	0xFD9
  7710                           status	equ	0xFD8
  7711                           
  7712 ;; *************** function _lcd_write4bits *****************
  7713 ;; Defined at:
  7714 ;;		line 56 in file "../../../lib/lcd44780.c"
  7715 ;; Parameters:    Size  Location     Type
  7716 ;;  value           1    wreg     unsigned char 
  7717 ;; Auto vars:     Size  Location     Type
  7718 ;;  value           1    6[COMRAM] unsigned char 
  7719 ;; Return value:  Size  Location     Type
  7720 ;;		None               void
  7721 ;; Registers used:
  7722 ;;		wreg, status,2, status,0
  7723 ;; Tracked objects:
  7724 ;;		On entry : 0/0
  7725 ;;		On exit  : 0/0
  7726 ;;		Unchanged: 0/0
  7727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7728 ;;      Params:         0       0       0       0       0       0       0       0       0
  7729 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7730 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7731 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7732 ;;Total ram usage:        1 bytes
  7733 ;; Hardware stack levels used:    1
  7734 ;; Hardware stack levels required when called:    1
  7735 ;; This function calls:
  7736 ;;		Nothing
  7737 ;; This function is called by:
  7738 ;;		_lcd_send
  7739 ;;		_lcd_begin
  7740 ;; This function uses a non-reentrant model
  7741 ;;
  7742                           
  7743                           	psect	text44
  7744  0000'                    __ptext44:
  7745                           	opt stack 0
  7746  0000'                    _lcd_write4bits:
  7747                           	opt stack 25
  7748                           
  7749                           ;incstack = 0
  7750                           ;lcd_write4bits@value stored from wreg
  7751  0000' 6E06'              	movwf	lcd_write4bits@value,c
  7752                           
  7753                           ;lcd44780.c: 61: LATB &= 0b00001111;
  7754  0002' 0E0F               	movlw	15
  7755  0004' 168A               	andwf	3978,f,c	;volatile
  7756                           
  7757                           ;lcd44780.c: 62: LATB |= value << 4;
  7758  0006' 3806'              	swapf	lcd_write4bits@value,w,c
  7759  0008' 0BF0               	andlw	240
  7760  000A' 128A               	iorwf	3978,f,c	;volatile
  7761                           
  7762                           ;lcd44780.c: 77: LATB |= 0b1000; _delay((unsigned long)((4)*(20000000/4000000.0))); LATB
      +                           &= ~0b1000; _delay((unsigned long)((100)*(20000000/4000000.0)));;
  7763  000C' 868A               	bsf	3978,3,c	;volatile
  7764  000E' 0E06               	movlw	6
  7765  0010'                    u3567:
  7766  0010' 2EE8               	decfsz	wreg,f,c
  7767  0012' D7FE               	goto	u3567
  7768  0014' D000               	nop2		;nop
  7769  0016' 968A               	bcf	3978,3,c	;volatile
  7770  0018' 0EA6               	movlw	166
  7771  001A'                    u3577:
  7772  001A' 2EE8               	decfsz	wreg,f,c
  7773  001C' D7FE               	goto	u3577
  7774  001E' D000               	nop2		;nop
  7775  0020' 0012               	return		;funcret
  7776  0022'                    __end_of_lcd_write4bits:
  7777                           	opt stack 0
  7778                           tblptru	equ	0xFF8
  7779                           tblptrh	equ	0xFF7
  7780                           tblptrl	equ	0xFF6
  7781                           tablat	equ	0xFF5
  7782                           prodl	equ	0xFF3
  7783                           intcon	equ	0xFF2
  7784                           intcon2	equ	0xFF1
  7785                           postinc0	equ	0xFEE
  7786                           wreg	equ	0xFE8
  7787                           postdec1	equ	0xFE5
  7788                           fsr1l	equ	0xFE1
  7789                           indf2	equ	0xFDF
  7790                           postinc2	equ	0xFDE
  7791                           postdec2	equ	0xFDD
  7792                           fsr2h	equ	0xFDA
  7793                           fsr2l	equ	0xFD9
  7794                           status	equ	0xFD8
  7795                           
  7796 ;; *************** function _delay10ms *****************
  7797 ;; Defined at:
  7798 ;;		line 54 in file "../../../LC-meter.c"
  7799 ;; Parameters:    Size  Location     Type
  7800 ;;  period_10ms     1    wreg     unsigned char 
  7801 ;; Auto vars:     Size  Location     Type
  7802 ;;  period_10ms     1    0[COMRAM] unsigned char 
  7803 ;; Return value:  Size  Location     Type
  7804 ;;		None               void
  7805 ;; Registers used:
  7806 ;;		wreg
  7807 ;; Tracked objects:
  7808 ;;		On entry : 0/0
  7809 ;;		On exit  : 0/0
  7810 ;;		Unchanged: 0/0
  7811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7812 ;;      Params:         0       0       0       0       0       0       0       0       0
  7813 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7814 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7815 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7816 ;;Total ram usage:        0 bytes
  7817 ;; Hardware stack levels used:    1
  7818 ;; Hardware stack levels required when called:    1
  7819 ;; This function calls:
  7820 ;;		Nothing
  7821 ;; This function is called by:
  7822 ;;		_calibrate
  7823 ;;		_main
  7824 ;; This function uses a non-reentrant model
  7825 ;;
  7826                           
  7827                           	psect	text45
  7828  0000'                    __ptext45:
  7829                           	opt stack 0
  7830  0000'                    _delay10ms:
  7831                           	opt stack 29
  7832                           
  7833                           ;incstack = 0
  7834  0000' 0012               	return		;funcret
  7835  0002'                    __end_of_delay10ms:
  7836                           	opt stack 0
  7837                           tblptru	equ	0xFF8
  7838                           tblptrh	equ	0xFF7
  7839                           tblptrl	equ	0xFF6
  7840                           tablat	equ	0xFF5
  7841                           prodl	equ	0xFF3
  7842                           intcon	equ	0xFF2
  7843                           intcon2	equ	0xFF1
  7844                           postinc0	equ	0xFEE
  7845                           wreg	equ	0xFE8
  7846                           postdec1	equ	0xFE5
  7847                           fsr1l	equ	0xFE1
  7848                           indf2	equ	0xFDF
  7849                           postinc2	equ	0xFDE
  7850                           postdec2	equ	0xFDD
  7851                           fsr2h	equ	0xFDA
  7852                           fsr2l	equ	0xFD9
  7853                           status	equ	0xFD8
  7854                           
  7855 ;; *************** function ___lwtofl *****************
  7856 ;; Defined at:
  7857 ;;		line 28 in file "/opt/microchip/xc8/v1.34/sources/common/lwtofl.c"
  7858 ;; Parameters:    Size  Location     Type
  7859 ;;  c               2   61[COMRAM] unsigned int 
  7860 ;; Auto vars:     Size  Location     Type
  7861 ;;		None
  7862 ;; Return value:  Size  Location     Type
  7863 ;;                  4   61[COMRAM] unsigned int 
  7864 ;; Registers used:
  7865 ;;		wreg, status,2, status,0, cstack
  7866 ;; Tracked objects:
  7867 ;;		On entry : 0/0
  7868 ;;		On exit  : 0/0
  7869 ;;		Unchanged: 0/0
  7870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7871 ;;      Params:         4       0       0       0       0       0       0       0       0
  7872 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7873 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7874 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7875 ;;Total ram usage:        4 bytes
  7876 ;; Hardware stack levels used:    1
  7877 ;; Hardware stack levels required when called:    2
  7878 ;; This function calls:
  7879 ;;		___flpack
  7880 ;; This function is called by:
  7881 ;;		_calibrate
  7882 ;;		_measure_capacitance
  7883 ;;		_measure_inductance
  7884 ;; This function uses a non-reentrant model
  7885 ;;
  7886                           
  7887                           	psect	text46
  7888  0000'                    __ptext46:
  7889                           	opt stack 0
  7890  0000'                    ___lwtofl:
  7891                           	opt stack 27
  7892                           
  7893                           ;incstack = 0
  7894  0000' C03D' F006'        	movff	___lwtofl@c,___flpack@arg
  7895  0004' C03E' F007'        	movff	___lwtofl@c+1,___flpack@arg+1
  7896  0008' 6A08'              	clrf	___flpack@arg+2,c
  7897  000A' 6A09'              	clrf	___flpack@arg+3,c
  7898  000C' 0E96               	movlw	150
  7899  000E' 6E0A'              	movwf	___flpack@exp,c
  7900  0010' 0E00               	movlw	0
  7901  0012' 6E0B'              	movwf	___flpack@sign,c
  7902  0014' EC00' F000'        	call	___flpack	;wreg free
  7903  0018' C006' F03D'        	movff	?___flpack,?___lwtofl
  7904  001C' C007' F03E'        	movff	?___flpack+1,?___lwtofl+1
  7905  0020' C008' F03F'        	movff	?___flpack+2,?___lwtofl+2
  7906  0024' C009' F040'        	movff	?___flpack+3,?___lwtofl+3
  7907  0028' 0012               	return		;funcret
  7908  002A'                    __end_of___lwtofl:
  7909                           	opt stack 0
  7910                           tblptru	equ	0xFF8
  7911                           tblptrh	equ	0xFF7
  7912                           tblptrl	equ	0xFF6
  7913                           tablat	equ	0xFF5
  7914                           prodl	equ	0xFF3
  7915                           intcon	equ	0xFF2
  7916                           intcon2	equ	0xFF1
  7917                           postinc0	equ	0xFEE
  7918                           wreg	equ	0xFE8
  7919                           postdec1	equ	0xFE5
  7920                           fsr1l	equ	0xFE1
  7921                           indf2	equ	0xFDF
  7922                           postinc2	equ	0xFDE
  7923                           postdec2	equ	0xFDD
  7924                           fsr2h	equ	0xFDA
  7925                           fsr2l	equ	0xFD9
  7926                           status	equ	0xFD8
  7927                           
  7928 ;; *************** function ___flpack *****************
  7929 ;; Defined at:
  7930 ;;		line 63 in file "/opt/microchip/xc8/v1.34/sources/common/double.c"
  7931 ;; Parameters:    Size  Location     Type
  7932 ;;  arg             4    6[COMRAM] unsigned long 
  7933 ;;  exp             1   10[COMRAM] unsigned char 
  7934 ;;  sign            1   11[COMRAM] unsigned char 
  7935 ;; Auto vars:     Size  Location     Type
  7936 ;;		None
  7937 ;; Return value:  Size  Location     Type
  7938 ;;                  4    6[COMRAM] unsigned char 
  7939 ;; Registers used:
  7940 ;;		wreg, status,2, status,0
  7941 ;; Tracked objects:
  7942 ;;		On entry : 0/0
  7943 ;;		On exit  : 0/0
  7944 ;;		Unchanged: 0/0
  7945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7946 ;;      Params:         6       0       0       0       0       0       0       0       0
  7947 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7948 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7949 ;;      Totals:        10       0       0       0       0       0       0       0       0
  7950 ;;Total ram usage:       10 bytes
  7951 ;; Hardware stack levels used:    1
  7952 ;; Hardware stack levels required when called:    1
  7953 ;; This function calls:
  7954 ;;		Nothing
  7955 ;; This function is called by:
  7956 ;;		___altofl
  7957 ;;		___awtofl
  7958 ;;		___fladd
  7959 ;;		___fldiv
  7960 ;;		___flmul
  7961 ;;		___lltofl
  7962 ;;		___lwtofl
  7963 ;; This function uses a non-reentrant model
  7964 ;;
  7965                           
  7966                           	psect	text47
  7967  0000'                    __ptext47:
  7968                           	opt stack 0
  7969  0000'                    ___flpack:
  7970                           	opt stack 27
  7971                           
  7972                           ;incstack = 0
  7973  0000' 500A'              	movf	___flpack@exp,w,c
  7974  0002' E005               	bz	l691
  7975  0004' 5006'              	movf	___flpack@arg,w,c
  7976  0006' 1007'              	iorwf	___flpack@arg+1,w,c
  7977  0008' 1008'              	iorwf	___flpack@arg+2,w,c
  7978  000A' 1009'              	iorwf	___flpack@arg+3,w,c
  7979  000C' E107               	bnz	l3392
  7980  000E'                    l691:
  7981  000E' 6A06'              	clrf	?___flpack,c
  7982  0010' 6A07'              	clrf	?___flpack+1,c
  7983  0012' 6A08'              	clrf	?___flpack+2,c
  7984  0014' 6A09'              	clrf	?___flpack+3,c
  7985  0016' 0012               	return	
  7986  0018'                    l3390:
  7987  0018' 2A0A'              	incf	___flpack@exp,f,c
  7988  001A' D84D               	call	PL38	;call to abstracted procedure
  7989  001C'                    l3392:
  7990  001C' 6A00'              	clrf	??___flpack& (0+255),c
  7991  001E' 6A00'              	clrf	(??___flpack+1)& (0+255),c
  7992  0020' 6A00'              	clrf	(??___flpack+2)& (0+255),c
  7993  0022' 0EFE               	movlw	254
  7994  0024' 1409'              	andwf	___flpack@arg+3,w,c
  7995  0026' 6E00'              	movwf	(??___flpack+3)& (0+255),c
  7996  0028' 500C'              	movf	??___flpack,w,c
  7997  002A' 100D'              	iorwf	??___flpack+1,w,c
  7998  002C' 100E'              	iorwf	??___flpack+2,w,c
  7999  002E' 100F'              	iorwf	??___flpack+3,w,c
  8000  0030' E008               	bz	l696
  8001  0032' D7F2               	goto	l3390
  8002  0034'                    l3394:
  8003  0034' 2A0A'              	incf	___flpack@exp,f,c
  8004  0036' 2A06'              	incf	___flpack@arg,f,c
  8005  0038' 0E00               	movlw	0
  8006  003A' 2207'              	addwfc	___flpack@arg+1,f,c
  8007  003C' 2208'              	addwfc	___flpack@arg+2,f,c
  8008  003E' 2209'              	addwfc	___flpack@arg+3,f,c
  8009  0040' D83A               	call	PL38	;call to abstracted procedure
  8010  0042'                    l696:
  8011  0042' 6A00'              	clrf	??___flpack& (0+255),c
  8012  0044' 6A00'              	clrf	(??___flpack+1)& (0+255),c
  8013  0046' 6A00'              	clrf	(??___flpack+2)& (0+255),c
  8014  0048' 5009'              	movf	___flpack@arg+3,w,c
  8015  004A' 6E00'              	movwf	(??___flpack+3)& (0+255),c
  8016  004C' 500C'              	movf	??___flpack,w,c
  8017  004E' 100D'              	iorwf	??___flpack+1,w,c
  8018  0050' 100E'              	iorwf	??___flpack+2,w,c
  8019  0052' 100F'              	iorwf	??___flpack+3,w,c
  8020  0054' E007               	bz	l3402
  8021  0056' D7EE               	goto	l3394
  8022  0058'                    l3400:
  8023  0058' 060A'              	decf	___flpack@exp,f,c
  8024  005A' 90D8               	bcf	status,0,c
  8025  005C' 3606'              	rlcf	___flpack@arg,f,c
  8026  005E' 3607'              	rlcf	___flpack@arg+1,f,c
  8027  0060' 3608'              	rlcf	___flpack@arg+2,f,c
  8028  0062' 3609'              	rlcf	___flpack@arg+3,f,c
  8029  0064'                    l3402:
  8030  0064' BE08'              	btfsc	___flpack@arg+2,7,c
  8031  0066' D003               	goto	l703
  8032  0068' 0E02               	movlw	2
  8033  006A' 600A'              	cpfslt	___flpack@exp,c
  8034  006C' D7F5               	goto	l3400
  8035  006E'                    l703:
  8036  006E' B00A'              	btfsc	___flpack@exp,0,c
  8037  0070' D002               	goto	l704
  8038  0072' 0E7F               	movlw	127
  8039  0074' 1608'              	andwf	___flpack@arg+2,f,c
  8040  0076'                    l704:
  8041  0076' 90D8               	bcf	status,0,c
  8042  0078' 320A'              	rrcf	___flpack@exp,f,c
  8043  007A' C00A' F00C'        	movff	___flpack@exp,??___flpack
  8044  007E' 6A00'              	clrf	(??___flpack+1)& (0+255),c
  8045  0080' 6A00'              	clrf	(??___flpack+2)& (0+255),c
  8046  0082' 6A00'              	clrf	(??___flpack+3)& (0+255),c
  8047  0084' C00C' F00F'        	movff	??___flpack,??___flpack+3
  8048  0088' 6A0E'              	clrf	??___flpack+2,c
  8049  008A' 6A0D'              	clrf	??___flpack+1,c
  8050  008C' 6A0C'              	clrf	??___flpack,c
  8051  008E' 500C'              	movf	??___flpack,w,c
  8052  0090' 1206'              	iorwf	___flpack@arg,f,c
  8053  0092' 500D'              	movf	??___flpack+1,w,c
  8054  0094' 1207'              	iorwf	___flpack@arg+1,f,c
  8055  0096' 500E'              	movf	??___flpack+2,w,c
  8056  0098' 1208'              	iorwf	___flpack@arg+2,f,c
  8057  009A' 500F'              	movf	??___flpack+3,w,c
  8058  009C' 1209'              	iorwf	___flpack@arg+3,f,c
  8059  009E' 500B'              	movf	___flpack@sign,w,c
  8060  00A0' A4D8               	btfss	status,2,c
  8061  00A2' 8E09'              	bsf	___flpack@arg+3,7,c
  8062  00A4' C006' F006'        	movff	___flpack@arg,?___flpack
  8063  00A8' C007' F007'        	movff	___flpack@arg+1,?___flpack+1
  8064  00AC' C008' F008'        	movff	___flpack@arg+2,?___flpack+2
  8065  00B0' C009' F009'        	movff	___flpack@arg+3,?___flpack+3
  8066  00B4' 0012               	return		;funcret
  8067  00B6'                    __end_of___flpack:
  8068                           	opt stack 0
  8069  00B6'                    PL38:
  8070                           	opt stack 27
  8071  00B6' 90D8               	bcf	status,0,c
  8072  00B8' 3209'              	rrcf	___flpack@arg+3,f,c
  8073  00BA' 3208'              	rrcf	___flpack@arg+2,f,c
  8074  00BC' 3207'              	rrcf	___flpack@arg+1,f,c
  8075  00BE' 3206'              	rrcf	___flpack@arg,f,c
  8076  00C0' 0012               	return	
  8077  00C2'                    __end_ofPL38:
  8078                           	opt stack 0
  8079                           tblptru	equ	0xFF8
  8080                           tblptrh	equ	0xFF7
  8081                           tblptrl	equ	0xFF6
  8082                           tablat	equ	0xFF5
  8083                           prodl	equ	0xFF3
  8084                           intcon	equ	0xFF2
  8085                           intcon2	equ	0xFF1
  8086                           postinc0	equ	0xFEE
  8087                           wreg	equ	0xFE8
  8088                           postdec1	equ	0xFE5
  8089                           fsr1l	equ	0xFE1
  8090                           indf2	equ	0xFDF
  8091                           postinc2	equ	0xFDE
  8092                           postdec2	equ	0xFDD
  8093                           fsr2h	equ	0xFDA
  8094                           fsr2l	equ	0xFD9
  8095                           status	equ	0xFD8
  8096                           
  8097 ;; *************** function _global_int *****************
  8098 ;; Defined at:
  8099 ;;		line 77 in file "../../../LC-meter.c"
  8100 ;; Parameters:    Size  Location     Type
  8101 ;;		None
  8102 ;; Auto vars:     Size  Location     Type
  8103 ;;		None
  8104 ;; Return value:  Size  Location     Type
  8105 ;;		None               void
  8106 ;; Registers used:
  8107 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  8108 ;; Tracked objects:
  8109 ;;		On entry : 0/0
  8110 ;;		On exit  : 0/0
  8111 ;;		Unchanged: 0/0
  8112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8113 ;;      Params:         0       0       0       0       0       0       0       0       0
  8114 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8115 ;;      Temps:          6       0       0       0       0       0       0       0       0
  8116 ;;      Totals:         6       0       0       0       0       0       0       0       0
  8117 ;;Total ram usage:        6 bytes
  8118 ;; Hardware stack levels used:    1
  8119 ;; This function calls:
  8120 ;;		Nothing
  8121 ;; This function is called by:
  8122 ;;		Interrupt level 2
  8123 ;; This function uses a non-reentrant model
  8124 ;;
  8125                           
  8126                           	psect	intcode
  8127  0000'                    __pintcode:
  8128                           	opt stack 0
  8129  0000'                    _global_int:
  8130                           	opt stack 23
  8131                           
  8132                           ;incstack = 0
  8133  0000' CFE1 F002'         	movff	fsr1l,??_global_int+2
  8134  0004' CFE2 F003'         	movff	fsr1h,??_global_int+3
  8135  0008' CFD9 F004'         	movff	fsr2l,??_global_int+4
  8136  000C' CFDA F005'         	movff	fsr2h,??_global_int+5
  8137                           
  8138                           ;LC-meter.c: 82: if(PIR1 & 0x02) {
  8139  0010' A29E               	btfss	3998,1,c	;volatile
  8140  0012' D03C               	goto	i2l3286
  8141                           
  8142                           ;LC-meter.c: 84: bres += 256;
  8143  0014' 0100               	movlb	0	; () banked
  8144  0016' 2B00'              	incf	(_bres+1)& (0+255),f,b	;volatile
  8145                           
  8146                           ;LC-meter.c: 86: if(bres >= 5000) {
  8147  0018' 0E88               	movlw	136
  8148  001A' 5D00'              	subwf	_bres& (0+255),w,b	;volatile
  8149  001C' 0E13               	movlw	19
  8150  001E' 5900'              	subwfb	(_bres+1)& (0+255),w,b	;volatile
  8151  0020' E334               	bnc	i2l3284
  8152                           
  8153                           ; BSR set to: 0
  8154                           ;LC-meter.c: 87: bres -= 5000;
  8155  0022' 0E88               	movlw	136
  8156  0024' 5F00'              	subwf	_bres& (0+255),f,b	;volatile
  8157  0026' 0E13               	movlw	19
  8158  0028' 5B00'              	subwfb	(_bres+1)& (0+255),f,b	;volatile
  8159                           
  8160                           ; BSR set to: 0
  8161                           ;LC-meter.c: 88: msecpart++;
  8162  002A' 4B00'              	infsnz	_msecpart& (0+255),f,b	;volatile
  8163  002C' 2B00'              	incf	(_msecpart+1)& (0+255),f,b	;volatile
  8164                           
  8165                           ; BSR set to: 0
  8166                           ;LC-meter.c: 89: msecs++;
  8167  002E' 2B00'              	incf	_msecs& (0+255),f,b	;volatile
  8168  0030' 0E00               	movlw	0
  8169  0032' 2300'              	addwfc	(_msecs+1)& (0+255),f,b	;volatile
  8170  0034' 2300'              	addwfc	(_msecs+2)& (0+255),f,b	;volatile
  8171  0036' 2300'              	addwfc	(_msecs+3)& (0+255),f,b	;volatile
  8172                           
  8173                           ;LC-meter.c: 91: LATC &= ~0b00000100; LATC |= (!!((blink > 200))) << 2;;
  8174  0038' 948B               	bcf	3979,2,c	;volatile
  8175                           
  8176                           ; BSR set to: 0
  8177  003A' 5001'              	movf	_blink+1,w,c	;volatile
  8178  003C' E103               	bnz	i2u249_41
  8179  003E' 0EC9               	movlw	201
  8180  0040' 5C00'              	subwf	_blink,w,c	;volatile
  8181  0042' E303               	bnc	i2u249_40
  8182  0044'                    i2u249_41:
  8183  0044' 6A00'              	clrf	??_global_int& (0+255),c
  8184  0046' 2A00'              	incf	??_global_int& (0+255),f,c
  8185  0048' D001               	goto	i2u250_48
  8186  004A'                    i2u249_40:
  8187  004A' 6A00'              	clrf	??_global_int& (0+255),c
  8188  004C'                    i2u250_48:
  8189  004C' 90D8               	bcf	status,0,c
  8190  004E' 3600'              	rlcf	??_global_int,f,c
  8191  0050' 90D8               	bcf	status,0,c
  8192  0052' 3400'              	rlcf	??_global_int,w,c
  8193  0054' 128B               	iorwf	3979,f,c	;volatile
  8194                           
  8195                           ;LC-meter.c: 92: if(blink >= 400)
  8196  0056' 0E90               	movlw	144
  8197  0058' 5C00'              	subwf	_blink,w,c	;volatile
  8198  005A' 0E01               	movlw	1
  8199  005C' 5801'              	subwfb	_blink+1,w,c	;volatile
  8200  005E' E304               	bnc	i2l3278
  8201                           
  8202                           ;LC-meter.c: 93: blink -= 400;
  8203  0060' 0E90               	movlw	144
  8204  0062' 5E00'              	subwf	_blink,f,c	;volatile
  8205  0064' 0E01               	movlw	1
  8206  0066' 5A01'              	subwfb	_blink+1,f,c	;volatile
  8207  0068'                    i2l3278:
  8208                           
  8209                           ;LC-meter.c: 94: ++blink;
  8210  0068' 4A00'              	infsnz	_blink,f,c	;volatile
  8211  006A' 2A01'              	incf	_blink+1,f,c	;volatile
  8212                           
  8213                           ;LC-meter.c: 97: if(msecpart >= 1000) {
  8214  006C' 0EE8               	movlw	232
  8215  006E' 0100               	movlb	0	; () banked
  8216  0070' 5D00'              	subwf	_msecpart& (0+255),w,b	;volatile
  8217  0072' 0E03               	movlw	3
  8218  0074' 5900'              	subwfb	(_msecpart+1)& (0+255),w,b	;volatile
  8219  0076' E309               	bnc	i2l3284
  8220                           
  8221                           ; BSR set to: 0
  8222                           ;LC-meter.c: 99: seconds++;
  8223  0078' 2B00'              	incf	_seconds& (0+255),f,b	;volatile
  8224  007A' 0E00               	movlw	0
  8225  007C' 2300'              	addwfc	(_seconds+1)& (0+255),f,b	;volatile
  8226  007E' 2300'              	addwfc	(_seconds+2)& (0+255),f,b	;volatile
  8227  0080' 2300'              	addwfc	(_seconds+3)& (0+255),f,b	;volatile
  8228                           
  8229                           ;LC-meter.c: 100: msecpart -= 1000;
  8230  0082' 0EE8               	movlw	232
  8231  0084' 5F00'              	subwf	_msecpart& (0+255),f,b	;volatile
  8232  0086' 0E03               	movlw	3
  8233  0088' 5B00'              	subwfb	(_msecpart+1)& (0+255),f,b	;volatile
  8234  008A'                    i2l3284:
  8235                           
  8236                           ; BSR set to: 0
  8237                           ;LC-meter.c: 101: }
  8238                           ;LC-meter.c: 102: }
  8239                           ;LC-meter.c: 104: PIR1 &= ~0b10;
  8240  008A' 929E               	bcf	3998,1,c	;volatile
  8241  008C'                    i2l3286:
  8242                           
  8243                           ;LC-meter.c: 105: }
  8244                           ;LC-meter.c: 107: if(RCIF) { rxfifo[rxiptr] = RCREG; ser_tmp = (rxiptr + 1) & ((uint8_t)
      +                          16 - 1); if(ser_tmp != rxoptr) rxiptr = ser_tmp; }; if(TXIF && TXIE) { TXREG = txfifo[tx
      +                          optr]; ++txoptr; txoptr &= ((uint8_t)16 - 1); if(txoptr == txiptr) { TXIE = 0; }; TXIF =
      +                           0; 
  8245  008C' AA9E               	btfss	3998,5,c	;volatile
  8246  008E' D01D               	goto	i2l442
  8247  0090' EE20' F000'        	lfsr	2,_rxiptr
  8248  0094' 50DF               	movf	indf2,w,c
  8249  0096' 6E00'              	movwf	??_global_int& (0+255),c
  8250  0098' 6A00'              	clrf	(??_global_int+1)& (0+255),c
  8251  009A' 0E00'              	movlw	low _rxfifo
  8252  009C' 2400'              	addwf	??_global_int,w,c
  8253  009E' 6ED9               	movwf	fsr2l,c
  8254  00A0' 0E00'              	movlw	high _rxfifo
  8255  00A2' 2001'              	addwfc	??_global_int+1,w,c
  8256  00A4' 6EDA               	movwf	fsr2h,c
  8257  00A6' CFAE FFDF          	movff	4014,indf2	;volatile
  8258  00AA' C000' F000'        	movff	_rxiptr,??_global_int
  8259  00AE' 2A00'              	incf	??_global_int,f,c
  8260  00B0' 0E0F               	movlw	15
  8261  00B2' 1600'              	andwf	??_global_int,f,c
  8262  00B4' C000' F000'        	movff	??_global_int,_ser_tmp
  8263  00B8' EE20' F000'        	lfsr	2,_rxoptr
  8264  00BC' EE10' F000'        	lfsr	1,_ser_tmp
  8265  00C0' 50DE               	movf	postinc2,w,c
  8266  00C2' 18E6               	xorwf	postinc1,w,c
  8267  00C4' A4D8               	btfss	status,2,c
  8268  00C6' C000' F000'        	movff	_ser_tmp,_rxiptr
  8269  00CA'                    i2l442:
  8270  00CA' B89E               	btfsc	3998,4,c	;volatile
  8271  00CC' A89D               	btfss	3997,4,c	;volatile
  8272  00CE' D020               	goto	i2l446
  8273  00D0' EE20' F000'        	lfsr	2,_txoptr
  8274  00D4' 50DF               	movf	indf2,w,c
  8275  00D6' 6E00'              	movwf	??_global_int& (0+255),c
  8276  00D8' 6A00'              	clrf	(??_global_int+1)& (0+255),c
  8277  00DA' 0E00'              	movlw	low _txfifo
  8278  00DC' 2400'              	addwf	??_global_int,w,c
  8279  00DE' 6ED9               	movwf	fsr2l,c
  8280  00E0' 0E00'              	movlw	high _txfifo
  8281  00E2' 2001'              	addwfc	??_global_int+1,w,c
  8282  00E4' 6EDA               	movwf	fsr2h,c
  8283  00E6' 50DF               	movf	indf2,w,c
  8284  00E8' 6EAD               	movwf	4013,c	;volatile
  8285  00EA' C000' FFE8         	movff	_txoptr,wreg
  8286  00EE' 0F01               	addlw	1
  8287  00F0' CFE8 F000'         	movff	wreg,_txoptr
  8288  00F4' C000' FFE8         	movff	_txoptr,wreg
  8289  00F8' 0B0F               	andlw	15
  8290  00FA' CFE8 F000'         	movff	wreg,_txoptr
  8291  00FE' EE20' F000'        	lfsr	2,_txiptr
  8292  0102' EE10' F000'        	lfsr	1,_txoptr
  8293  0106' 50DE               	movf	postinc2,w,c
  8294  0108' 18E6               	xorwf	postinc1,w,c
  8295  010A' B4D8               	btfsc	status,2,c
  8296  010C' 989D               	bcf	3997,4,c	;volatile
  8297  010E' 989E               	bcf	3998,4,c	;volatile
  8298  0110'                    i2l446:
  8299  0110' C005' FFDA         	movff	??_global_int+5,fsr2h
  8300  0114' C004' FFD9         	movff	??_global_int+4,fsr2l
  8301  0118' C003' FFE2         	movff	??_global_int+3,fsr1h
  8302  011C' C002' FFE1         	movff	??_global_int+2,fsr1l
  8303  0120' 0011               	retfie		f
  8304  0122'                    __end_of_global_int:
  8305                           	opt stack 0
  8306                           tblptru	equ	0xFF8
  8307                           tblptrh	equ	0xFF7
  8308                           tblptrl	equ	0xFF6
  8309                           tablat	equ	0xFF5
  8310                           prodl	equ	0xFF3
  8311                           intcon	equ	0xFF2
  8312                           intcon2	equ	0xFF1
  8313                           postinc0	equ	0xFEE
  8314                           wreg	equ	0xFE8
  8315                           postinc1	equ	0xFE6
  8316                           postdec1	equ	0xFE5
  8317                           fsr1h	equ	0xFE2
  8318                           fsr1l	equ	0xFE1
  8319                           indf2	equ	0xFDF
  8320                           postinc2	equ	0xFDE
  8321                           postdec2	equ	0xFDD
  8322                           fsr2h	equ	0xFDA
  8323                           fsr2l	equ	0xFD9
  8324                           status	equ	0xFD8
  8325                           tblptru	equ	0xFF8
  8326                           tblptrh	equ	0xFF7
  8327                           tblptrl	equ	0xFF6
  8328                           tablat	equ	0xFF5
  8329                           prodl	equ	0xFF3
  8330                           intcon	equ	0xFF2
  8331                           intcon2	equ	0xFF1
  8332                           postinc0	equ	0xFEE
  8333                           wreg	equ	0xFE8
  8334                           postinc1	equ	0xFE6
  8335                           postdec1	equ	0xFE5
  8336                           fsr1h	equ	0xFE2
  8337                           fsr1l	equ	0xFE1
  8338                           indf2	equ	0xFDF
  8339                           postinc2	equ	0xFDE
  8340                           postdec2	equ	0xFDD
  8341                           fsr2h	equ	0xFDA
  8342                           fsr2l	equ	0xFD9
  8343                           status	equ	0xFD8
  8344                           
  8345                           	psect	rparam
  8346  0000                     tblptru	equ	0xFF8
  8347                           tblptrh	equ	0xFF7
  8348                           tblptrl	equ	0xFF6
  8349                           tablat	equ	0xFF5
  8350                           prodl	equ	0xFF3
  8351                           intcon	equ	0xFF2
  8352                           intcon2	equ	0xFF1
  8353                           postinc0	equ	0xFEE
  8354                           wreg	equ	0xFE8
  8355                           postinc1	equ	0xFE6
  8356                           postdec1	equ	0xFE5
  8357                           fsr1h	equ	0xFE2
  8358                           fsr1l	equ	0xFE1
  8359                           indf2	equ	0xFDF
  8360                           postinc2	equ	0xFDE
  8361                           postdec2	equ	0xFDD
  8362                           fsr2h	equ	0xFDA
  8363                           fsr2l	equ	0xFD9
  8364                           status	equ	0xFD8
  8365                           tblptru	equ	0xFF8
  8366                           tblptrh	equ	0xFF7
  8367                           tblptrl	equ	0xFF6
  8368                           tablat	equ	0xFF5
  8369                           prodl	equ	0xFF3
  8370                           intcon	equ	0xFF2
  8371                           intcon2	equ	0xFF1
  8372                           postinc0	equ	0xFEE
  8373                           wreg	equ	0xFE8
  8374                           postinc1	equ	0xFE6
  8375                           postdec1	equ	0xFE5
  8376                           fsr1h	equ	0xFE2
  8377                           fsr1l	equ	0xFE1
  8378                           indf2	equ	0xFDF
  8379                           postinc2	equ	0xFDE
  8380                           postdec2	equ	0xFDD
  8381                           fsr2h	equ	0xFDA
  8382                           fsr2l	equ	0xFD9
  8383                           status	equ	0xFD8


Data Sizes:
    Strings     145
    Constant    76
    Data        4
    BSS         52
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     83      89
    BANK0           160     97     150
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ser_puts$0	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_34(CODE[3]), STR_29(CODE[6]), STR_24(CODE[3]), STR_14(CODE[3]), 
		 -> STR_13(CODE[5]), STR_12(CODE[3]), STR_11(CODE[8]), STR_10(CODE[6]), 
		 -> STR_9(CODE[6]), STR_8(CODE[6]), STR_7(CODE[5]), STR_4(CODE[3]), 
		 -> STR_2(CODE[3]), 

    eval_poly@d	PTR const  size(1) Largest target is 40
		 -> exp@coeff(CODE[40]), log@coeff(CODE[36]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(BANK0[2]), 

    put_str@s	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_15(CODE[13]), STR_6(CODE[10]), STR_5(CODE[6]), STR_3(CODE[15]), 
		 -> STR_1(CODE[12]), 

    print_unit@units	PTR const unsigned char [8] size(1) Largest target is 3
		 -> STR_23(CODE[3]), STR_22(CODE[3]), STR_21(CODE[3]), STR_20(CODE[3]), 
		 -> STR_19(CODE[3]), STR_18(CODE[3]), STR_17(CODE[3]), STR_16(CODE[2]), 

    lcd_puts@string	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_33(CODE[5]), STR_32(CODE[6]), STR_31(CODE[7]), STR_30(CODE[7]), 
		 -> STR_28(CODE[10]), STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[6]), 


Critical Paths under _main in COMRAM

    _measure_inductance->___fltol
    _print_unit->_lcd_gotoxy
    _print_reading->_format_number
    _format_xint32->_format_number
    _ldexp->_eval_poly
    _floor->___altofl
    ___fltol->_log10
    ___altofl->___fltol
    ___flsub->___fladd
    ___fldiv->___flpack
    ___lltofl->___flpack
    _log10->_log
    _log->_eval_poly
    _eval_poly->___fladd
    ___flmul->___fldiv
    ___fladd->___flmul
    ___awtofl->___flpack
    _lcd_begin->_lcd_command
    _indicator->_lcd_gotoxy
    _lcd_puts->_lcd_send
    _calibrate->___lwtofl
    _measure_freq->_format_number
    _put_str->_output_putch
    _output_putch->_lcd_send
    _lcd_gotoxy->_lcd_command
    _format_number->___lwdiv
    _lcd_clear->_lcd_command
    _lcd_command->_lcd_send
    _lcd_send->_lcd_write4bits
    ___lwtofl->_measure_freq

Critical Paths under _global_int in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_measure_capacitance
    _measure_inductance->___fltol
    _measure_capacitance->_format_double
    _format_double->_pow
    _pow->_exp
    _exp->_floor
    _floor->___altofl
    ___fltol->_log10
    ___altofl->___fltol

Critical Paths under _global_int in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _global_int in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _global_int in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _global_int in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _global_int in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _global_int in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _global_int in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _global_int in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  382311
                          _calibrate
                          _delay10ms
                      _format_double
                          _indicator
                          _lcd_begin
                          _lcd_clear
                         _lcd_gotoxy
                           _lcd_init
                           _lcd_puts
                _measure_capacitance
                 _measure_inductance
                           _ser_init
                           _ser_puts
                        _timer0_init
                        _timer2_init
 ---------------------------------------------------------------------------------
 (1) _timer2_init                                          4     4      0      90
                                              6 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _timer0_init                                         10    10      0     251
                                              6 COMRAM    10    10      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _measure_inductance                                  55    55      0   36658
                                             12 BANK0     43    43      0
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___lwtofl
                         _lcd_gotoxy
                       _measure_freq
                      _print_reading
                         _print_unit
                            _put_str
 ---------------------------------------------------------------------------------
 (1) _measure_capacitance                                 19    19      0  183597
                                             78 BANK0     19    19      0
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___lwtofl
                      _format_double
                      _format_xint32
                         _lcd_gotoxy
                       _measure_freq
                      _print_reading
                         _print_unit
                            _put_str
                          _ser_putch
                           _ser_puts
 ---------------------------------------------------------------------------------
 (2) _print_unit                                           3     3      0    1667
                                             16 COMRAM     2     2      0
                         _lcd_gotoxy
                           _ser_puts
 ---------------------------------------------------------------------------------
 (2) _print_reading                                        6     4      2    6020
                                             56 COMRAM     6     4      2
                            ___lwdiv
                            ___lwmod
                      _format_number
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (2) _format_xint32                                        4     0      4    2920
                                             56 COMRAM     4     0      4
                       _buffer_putch
                      _format_number
 ---------------------------------------------------------------------------------
 (2) _format_double                                       20    16      4  144347
                                             58 BANK0     20    16      4
                           ___awtofl
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                       _buffer_putch
                              _floor
                              _log10
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                 21    13      8   80749
                                             37 BANK0     21    13      8
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___lltofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _exp                                                 11     7      4   43244
                                             26 BANK0     11     7      4
                           ___awtofl
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (5) _ldexp                                                8     2      6     354
                                             70 COMRAM     8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (5) _floor                                               10     6      4   10260
                                             16 BANK0     10     6      4
                           ___altofl
                            ___fladd
                            ___fldiv (ARG)
                             ___flge
                            ___fltol
                              _frexp
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     882
                                             80 COMRAM     2     2      0
                                              4 BANK0      8     4      4
                            ___fldiv (ARG)
                              _log10 (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                               8     0      8    1594
                                              6 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (6) ___altofl                                             5     1      4    2446
                                             82 COMRAM     1     1      0
                                             12 BANK0      4     0      4
                           ___flpack
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    5179
                                             58 COMRAM     8     0      8
                           ___awtofl (ARG)
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4     204
                                              6 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             15     7      8    3931
                                             16 COMRAM    15     7      8
                           ___flpack
 ---------------------------------------------------------------------------------
 (4) ___lltofl                                             4     0      4    2344
                                             16 COMRAM     4     0      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (3) _log10                                                8     4      4   31919
                                             76 COMRAM     4     0      4
                                              0 BANK0      4     4      0
                            ___flmul
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  6     2      4   25402
                                             70 COMRAM     6     2      4
                           ___awtofl
                            ___fladd
                            ___flmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                7     2      5     582
                                              6 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           12     5      7   11199
                                             58 COMRAM    12     5      7
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             15     7      8    6342
                                             31 COMRAM    15     7      8
                           ___awtofl (ARG)
                            ___fldiv (ARG)
                           ___flpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             12     4      8    4213
                                             46 COMRAM    12     4      8
                           ___awtofl (ARG)
                            ___flmul (ARG)
                           ___flpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awtofl                                             9     5      4    2686
                                             16 COMRAM     5     1      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             3     3      0      46
                                              6 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcd_begin                                            3     2      1     685
                                             10 COMRAM     3     2      1
                        _lcd_command
                     _lcd_write4bits
 ---------------------------------------------------------------------------------
 (1) _indicator                                            1     1      0    2406
                                             16 COMRAM     1     1      0
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (3) _lcd_puts                                             3     3      0     806
                                              9 COMRAM     3     3      0
                           _lcd_send
 ---------------------------------------------------------------------------------
 (1) _calibrate                                            1     1      0   11236
                                             65 COMRAM     1     1      0
                           ___lwtofl
                          _delay10ms
                          _lcd_clear
                         _lcd_gotoxy
                           _lcd_send
                       _measure_freq
                            _put_str
                           _ser_puts
 ---------------------------------------------------------------------------------
 (1) _ser_puts                                             0     0      0      89
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _measure_freq                                         5     3      2    5041
                                             56 COMRAM     5     3      2
                      _format_number
                         _lcd_gotoxy
                            _put_str
                     _timer0_read_ps
 ---------------------------------------------------------------------------------
 (3) _timer0_read_ps                                       7     5      2     114
                                              6 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _put_str                                              4     4      0     769
                                             10 COMRAM     4     4      0
                       _output_putch
 ---------------------------------------------------------------------------------
 (3) _output_putch                                         1     1      0     544
                                              9 COMRAM     1     1      0
                           _lcd_send
                          _ser_putch
 ---------------------------------------------------------------------------------
 (4) _ser_putch                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _lcd_gotoxy                                           6     5      1    1578
                                             10 COMRAM     6     5      1
                        _lcd_command
 ---------------------------------------------------------------------------------
 (3) _format_number                                       43    39      4    2535
                                             13 COMRAM    43    39      4
                            ___lwdiv
                            ___lwmod
                       _buffer_putch
 ---------------------------------------------------------------------------------
 (4) _buffer_putch                                         3     3      0      22
                                              6 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     451
                                              6 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     454
                                              6 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            1     1      0     522
                                             10 COMRAM     1     1      0
                        _lcd_command
 ---------------------------------------------------------------------------------
 (4) _lcd_command                                          1     1      0     522
                                              9 COMRAM     1     1      0
                           _lcd_send
 ---------------------------------------------------------------------------------
 (4) _lcd_send                                             2     1      1     500
                                              7 COMRAM     2     1      1
                     _lcd_write4bits
 ---------------------------------------------------------------------------------
 (5) _lcd_write4bits                                       1     1      0      22
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _delay10ms                                            1     1      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4    2669
                                             61 COMRAM     4     0      4
                           ___flpack
                       _measure_freq (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6    2248
                                              6 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _global_int                                           6     6      0       0
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calibrate
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _put_str
           _output_putch
             _lcd_send
               _lcd_write4bits
             _ser_putch
         _timer0_read_ps
     _delay10ms
     _lcd_clear
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_send
       _lcd_write4bits
     _measure_freq
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _put_str
         _output_putch
           _lcd_send
             _lcd_write4bits
           _ser_putch
       _timer0_read_ps
     _put_str
       _output_putch
         _lcd_send
           _lcd_write4bits
         _ser_putch
     _ser_puts
   _delay10ms
   _format_double
     ___awtofl
       ___flpack
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     _buffer_putch
     _floor
       ___altofl
         ___flpack
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
       ___fladd
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___fldiv (ARG)
         ___flpack
       ___flge (ARG)
       ___fltol (ARG)
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       _frexp (ARG)
     _log10
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       _log
         ___awtofl
           ___flpack
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _frexp
     _pow
       ___flge
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       ___flneg
       ___fltol
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       ___lltofl
         ___flpack
       _exp
         ___awtofl
           ___flpack
         ___fldiv
           ___flpack
         ___flge
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         ___flsub
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _floor
           ___altofl
             ___flpack
             ___fltol (ARG)
               ___fldiv (ARG)
                 ___flpack
               _log10 (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _log
                   ___awtofl
                     ___flpack
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___fladd
                       ___awtofl (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                   _frexp
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flge (ARG)
           ___fltol (ARG)
             ___fldiv (ARG)
               ___flpack
             _log10 (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
           _frexp (ARG)
         _ldexp
           _eval_poly (ARG)
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
         _log (ARG)
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
       _log
         ___awtofl
           ___flpack
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _frexp
   _indicator
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_puts
       _lcd_send
         _lcd_write4bits
   _lcd_begin
     _lcd_command
       _lcd_send
         _lcd_write4bits
     _lcd_write4bits
   _lcd_clear
     _lcd_command
       _lcd_send
         _lcd_write4bits
   _lcd_gotoxy
     _lcd_command
       _lcd_send
         _lcd_write4bits
   _lcd_init
   _lcd_puts
     _lcd_send
       _lcd_write4bits
   _measure_capacitance
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _put_str
           _output_putch
             _lcd_send
               _lcd_write4bits
             _ser_putch
         _timer0_read_ps
     _format_double
       ___awtofl
         ___flpack
       ___fldiv
         ___flpack
       ___flge
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       ___flsub
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
       ___fltol
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       _buffer_putch
       _floor
         ___altofl
           ___flpack
           ___fltol (ARG)
             ___fldiv (ARG)
               ___flpack
             _log10 (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flge (ARG)
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
         _frexp (ARG)
       _log10
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
       _pow
         ___flge
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         ___fltol
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
         ___lltofl
           ___flpack
         _exp
           ___awtofl
             ___flpack
           ___fldiv
             ___flpack
           ___flge
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg
           ___flsub
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           ___fltol
             ___fldiv (ARG)
               ___flpack
             _log10 (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _floor
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 _log10 (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   _log
                     ___awtofl
                       ___flpack
                     ___fladd
                       ___awtofl (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     _eval_poly
                       ___fladd
                         ___awtofl (ARG)
                           ___flpack
                         ___flmul (ARG)
                           ___awtofl (ARG)
                             ___flpack
                           ___fldiv (ARG)
                             ___flpack
                           ___flpack (ARG)
                           _frexp (ARG)
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flmul
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                     _frexp
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flge (ARG)
             ___fltol (ARG)
               ___fldiv (ARG)
                 ___flpack
               _log10 (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _log
                   ___awtofl
                     ___flpack
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___fladd
                       ___awtofl (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                   _frexp
             _frexp (ARG)
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
           _log (ARG)
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     _format_xint32
       _buffer_putch
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _measure_freq
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _put_str
         _output_putch
           _lcd_send
             _lcd_write4bits
           _ser_putch
       _timer0_read_ps
     _print_reading
       ___lwdiv
       ___lwmod
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _lcd_puts
         _lcd_send
           _lcd_write4bits
     _print_unit
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _ser_puts
     _put_str
       _output_putch
         _lcd_send
           _lcd_write4bits
         _ser_putch
     _ser_putch
     _ser_puts
   _measure_inductance
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _put_str
           _output_putch
             _lcd_send
               _lcd_write4bits
             _ser_putch
         _timer0_read_ps
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _measure_freq
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _put_str
         _output_putch
           _lcd_send
             _lcd_write4bits
           _ser_putch
       _timer0_read_ps
     _print_reading
       ___lwdiv
       ___lwmod
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _lcd_puts
         _lcd_send
           _lcd_write4bits
     _print_unit
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _ser_puts
     _put_str
       _output_putch
         _lcd_send
           _lcd_write4bits
         _ser_putch
   _ser_init
   _ser_puts
   _timer0_init
   _timer2_init

 _global_int (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     61      96       5       93.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     53      59       1       93.7%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      EF       6        0.0%
DATA                 0      0      EF       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Sep 17 06:34:24 2019

                ___altofl@sign 000052                   ___fldiv@cntr 00001C                   ___fldiv@sign 00001E  
                           PL2 00042A                             PL4 000360                             PL6 000382  
                           PL8 00044C                             _F1 000025                             _F2 000000  
                           _F3 000004                   ___flpack@arg 000006                            PL10 0003A4  
                          PL20 0003CC                            PL12 000146                            PL30 00001A  
                          PL22 0003DE                            PL14 0003BA                            PL32 000400  
                          PL24 00001A                            PL16 000098                            PL34 000410  
                          PL26 000118                            PL18 0000A4                            PL36 0000B6  
                          PL28 0003F0                            PL38 0000B6                   ___flpack@exp 00000A  
                          l206 00000A                            l160 000014                            l158 000010  
                          l703 00006E                            l704 000076                            l712 000022  
                          l716 00004A                            l727 0000E2                            l752 00002C  
                          l691 00000E                            l696 000042                            l795 000032  
                          l798 0000E0                 lcd_begin@lines 00000C                            _exp 000000  
                          _log 000000                            _pow 000000                            wreg 000FE8  
                 __CFG_FOSC$XT 000000             timer0_read_ps@prev 00000A                   ___flmul@cntr 00002C  
             _format_number$68 000033                   ___flmul@sign 00002D         __end_of_lcd_write4bits 000022  
                ___flpack@sign 00000B                   ___fltol@exp1 000051                           l1027 000040  
                         l1037 000034                           l3000 000064                           l1069 000180  
                         l1094 0000B4                           l1095 00020A                           l3008 00009C  
                         l3040 00001C                           l3070 000068                           l3062 000056  
                         l3054 00003E                           l3046 00002A                           l3038 000016  
                         l3400 000058                           l2600 000014                           l3056 000044  
                         l3048 000030                           l4040 0000C8                           l3402 000064  
                         l2530 00000C                           l2442 000048                           l2700 000018  
                         l3260 000016                           l2436 000016                           l2620 000068  
                         l3068 000062                           l3502 000028                           l2606 000044  
                         l4046 0000D8                           l2528 00000A                           l2704 00002A  
                         l3440 00005C                           l3424 00001A                           l2616 00005C  
                         l4048 0000DC                           l3434 000034                           l3514 00004E  
                         l2636 000022                           l3460 000096                           l3612 000058  
                         l3390 000018                           l3462 0000A2                           l3454 000076  
                         l3526 000064                           l3622 000014                           l3392 00001C  
                         l2680 00001C                           l3472 0000D0                           l3464 0000AA  
                         l2592 00000E                           l3608 00003C                           l3712 000050  
                         l3800 000164                           l3394 000034                           l2834 000022  
                         l2842 000012                           l3490 000118                           l3474 0000DC  
                         l3466 0000B0                           l3626 000028                           l3562 00000C  
                         l3706 00001C                           l2676 000010                           l2764 000030  
                         l2860 000026                           l3548 000020                           l3564 000016  
                         l3716 000082                           l2678 000018                           l2774 00006C  
                         l2758 000010                           l2838 000006                           l3478 0000F8  
                         l3646 000074                           l3638 000046                           l3590 000078  
                         l3582 000060                           l2688 000036                           l2696 00000C  
                         l2776 000072                           l2872 000012                           l3736 0001D6  
                         l3752 000034                           l3920 0002C4                           l2698 000014  
                         l2778 000086                           l3842 0000C4                           l3498 000014  
                         l3674 00001A                           l3690 000022                           l3658 00000E  
                         l3594 00008C                           l3586 000068                           l3578 000050  
                         l2868 000008                           l3668 000010                           l3676 000080  
                         l3588 000074                           l3764 0000AE                           l3924 0002E0  
                         l2982 000018                           l2974 00000A                           l3686 00000E  
                         l3758 00004E                           l3782 000032                           l3950 000050  
                         l3768 0000D8                           l3928 000304                           l3960 00038A  
                         l3970 0003D2                           l3964 0003A8                           ?_exp 00001A  
                         ?_log 000046                           l3798 00015E                           l3968 0003CC  
                         l3898 00013A                           ?_pow 000025                           STR_1 000069  
                         STR_2 000003                           STR_3 00004D                           STR_4 000003  
                         STR_5 0000B0                           STR_6 00007F                           STR_7 0000C0  
                         STR_8 00009E                           STR_9 0000A4                           u3020 000046  
                         _LATB 000F8A                           _LATC 000F8B                           _CCal 000000  
                         u3230 0000A4                           u2350 000024                           u3407 000058  
                         _PIE1 000F9D                           u2368 000026                           u3417 000072  
                         u3507 000070                           u3427 00008A                           u3517 000080  
                         u3437 0000BC                           u3527 000090                           u3447 00000A  
                         u3537 0000A0                           u3457 000020                           u3377 00001E  
                         u3547 0000B0                           u3467 000030                           u3387 00003A  
                         u2940 000034                           u3557 00000C                           u3477 000040  
                         u3397 00004C                           u3567 000010                           u3487 000050  
                         u3577 00001A                           u3497 000060                           u2945 00002A  
                         _RCIF 007CF5                           _PIR1 000F9E                           _TMR0 000FD6  
                         _TMR2 000FBC                           _TXIE 007CEC                           _TXIF 007CF4  
                __CFG_FCMEN$ON 000000                   __CFG_WRTB$ON 000000                   __CFG_WRTC$ON 000000  
                         _bres 000004                           _main 000000                           fsr1h 000FE2  
                         fsr2h 000FDA                           fsr1l 000FE1                           indf2 000FDF  
                         fsr2l 000FD9                           exp@x 00001A                           log@x 000046  
        __size_of_output_putch 000000                           pow@x 000025                           pow@y 000029  
                         prodl 000FF3     __end_of_measure_inductance 00042A                           start 000000* 
          timer0_read_ps@count 00000B                 ??_buffer_putch 000006                  __CFG_MCLRE$ON 000000  
                 ___param_bank 000010                _timer0_init$152 000006                _timer0_init$153 000008  
              _timer0_init$154 00000A                _timer0_init$155 00000C            lcd_write4bits@value 000006  
                 lcd_send@mode 000007                          ??_exp 000053                          ??_log 00004A  
                        ??_pow 000053                  ___fltol@sign1 000050                __end_of___fladd 000146  
                        ?_main 000000                __end_of___fldiv 0000B0                __end_of___flneg 000020  
                        STR_10 0000AA                          STR_11 000089                          STR_12 000003  
                        STR_20 0000C9                          STR_21 0000D2                          STR_13 0000BB  
                        STR_14 000003                          STR_22 0000CC                          STR_30 000091  
                        STR_23 0000CF                          STR_15 00005C                          STR_24 000003  
                        STR_25 000001                          STR_17 0000D5                          STR_33 0000B6  
                        STR_18 0000DB                          STR_26 0000C5                          STR_27 000003  
                        STR_19 0000D8                          STR_28 000075                          STR_29 000098  
              __end_of___flmul 0000A4                __end_of___flsub 000044                __end_of___fltol 00009E  
                        _T0CON 000FD5                          _T2CON 000FBA                __end_of___lwdiv 00004A  
              __end_of___lwmod 00003E                          i2l442 0000CA                          i2l446 000110  
                        _RCREG 000FAE               lcd_begin@dotsize 00000A                          _PORTC 000F82  
                        _TRISA 000F92                          _TRISB 000F93                          _TRISC 000F94  
                        _TXREG 000FAD                 __CFG_EBTR0$OFF 000000                 __CFG_EBTR1$OFF 000000  
               __CFG_EBTR2$OFF 000000                  ___awtofl@sign 000014                 __CFG_EBTR3$OFF 000000  
                __CFG_WRTD$OFF 000000                          _log10 000000                          _blink 000000  
                        _floor 000000                          _ldexp 000000                          _frexp 000000  
                 _output_putch 000000                ?_lcd_write4bits 000000                          _msecs 000008  
                        tablat 000FF5                          pow@yi 000036                format_number@di 000036  
                        status 000FD8                __end_of_put_str 00001A                ??_print_reading 00003A  
                  exp@exponent 000022                    ldexp@newexp 00004A                __initialization 000000  
                  log@exponent 00004A                   __end_of_main 0000F6               format_double@num 00003A  
                lcd_gotoxy@col 00000B                  lcd_gotoxy@row 00000A                  ?_measure_freq 000038  
       __size_of_format_double 000000                         ??_main 000053                  lcd_send@value 000008  
          format_double@weight 000046                  __activetblptr 000001         __size_of_format_number 000000  
       __size_of_format_xint32 000000            lcd_init@fourbitmode 000006                         ?_log10 00004C  
                       ?_floor 000010                         ?_ldexp 000046                         ?_frexp 000006  
             __end_of___altofl 000048               __end_of___flpack 0000B6               __end_of___awtofl 00003A  
             __end_of___lltofl 00002E                 __CFG_WDTEN$OFF 000000                         i2l3284 00008A  
                       i2l3278 000068                         i2l3286 00008C                         _INTCON 000FF2  
             __end_of___lwtofl 00002A               __end_of_lcd_init 00002A           __size_of_lcd_command 000000  
             __end_of_lcd_send 00001A                         ___flge 000000               __end_of_lcd_puts 00001A  
                    ??___fladd 000036                      ??___fldiv 000018                      ??___flneg 00000A  
               __CFG_STVREN$ON 000000                      ??___flmul 000027                      ??___flsub 000042  
                    ??___fltol 000008                   ?_timer0_init 000000                 ??_measure_freq 00003A  
                    ??___lwdiv 00000A                   ?_timer2_init 000000                      ??___lwmod 00000A  
                       _buffer 000014                         clear_0 000006                         log10@x 00004C  
                       _rxfifo 000000*                        _txfifo 000000*                        _rxiptr 000000* 
                       _rxoptr 000000*                        floor@i 000014                         _txiptr 000000* 
                       floor@x 000010                         _txoptr 000000*            timer2_init@ps_mode 000009  
                 __mediumconst 000000*                        tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8           __end_of_buffer_putch 00004A               format_number@buf 000013  
             format_number@pad 000010        _measure_inductance$1050 00001C        _measure_inductance$1051 000020  
      _measure_inductance$1045 000014        _measure_inductance$1046 000025        _measure_inductance$1047 000029  
      _measure_inductance$1048 00002D        _measure_inductance$1049 000018                      ??_put_str 00000A  
                   ___fladd@f1 00002E                     ___fladd@f2 000032                     ___flge@ff1 000006  
                   ___flge@ff2 00000A               __end_ofexp@coeff 000029                  _format_double 000000  
             __end_oflog@coeff 00004D                     ___altofl@c 00000C                     ___fldiv@f1 000010  
                   ___fldiv@f2 000014                     ___fldiv@f3 000018                     __accesstop 000000* 
      __end_of__initialization 000038                __CFG_PBADEN$OFF 000000                     ___flneg@f1 000006  
                _format_number 000000                  _format_xint32 000000                     ___flmul@f1 00001F  
                   ___flmul@f2 000023                   eval_poly@res 000042                  ___rparam_used 000001  
                   ___flsub@f1 00003A                     ___flsub@f2 00003E                     ___fltol@f1 000004  
                   ___awtofl@c 000010         measure_capacitance@Cin 00005D   __size_of_measure_capacitance 000000  
       measure_capacitance@var 00005B          lcd_gotoxy@row_offsets 00000C                 __pcstackCOMRAM 000000  
           __size_of_calibrate 000000                   __pidataBANK0 000000                     ___lltofl@c 000010  
           __size_of_delay10ms 000000                  __end_of_log10 00005A                  __end_of_floor 0000F2  
                __end_of_ldexp 0000A2                  __end_of_frexp 000078                     __end_ofPL2 00044C  
                   __end_ofPL4 000382                     __end_ofPL6 0003A4                     __end_ofPL8 000462  
                   ___lwtofl@c 00003D                 buffer_putch@ch 000008             __size_of_lcd_begin 000000  
           __size_of_lcd_clear 000000                        ??_log10 000050                        ??_floor 000053  
                      ??_ldexp 00004C                        ??_frexp 00000B                     _log10$1054 000000  
                   __pbssBANK0 000000                 ?_format_double 00003A             __size_of_eval_poly 000000  
           __size_of_indicator 000000                 ?_format_number 00000D                 ?_format_xint32 000038  
               print_unit@unit 000000                        ?___flge 000006                        _CM1CON0 000F98  
                    ?___altofl 00000C        __size_of_timer0_read_ps 000000                      ?___flpack 000006  
                    ?___awtofl 000010                      ?___lltofl 000010             _measure_inductance 000000  
                    ?___lwtofl 00003D               ??_lcd_write4bits 000006                        _INTCON2 000FF1  
                   _lcd_gotoxy 000000            ?_measure_inductance 000000              __end_of_calibrate 0000E2  
                    ?_lcd_init 000000                      ?_lcd_send 000007              __end_of_delay10ms 000002  
                    ?_lcd_puts 000000           __end_of_measure_freq 0000FA                     _global_int 000000  
                   calibrate@i 000041                        __Hparam 000000                        __Lparam 000000  
                    ?_ser_init 000000           ??_measure_inductance 000052              __end_of_lcd_begin 0000D0  
                    ?_ser_puts 000006              __end_of_lcd_clear 000016                __size_of___flge 000000  
                      ___fladd 000000                        ___fldiv 000000                        ___flneg 000000  
                      ___flmul 000000                        ___flsub 000000                        ___fltol 000000  
                      ___lwdiv 000000                        ___lwmod 000000                   __psmallconst 000000  
                   ??___altofl 000052                     ??___flpack 00000C                        __pcinit 000000  
                   ??___awtofl 000014              __end_of_eval_poly 000098                        __ramtop 000000* 
            __end_of_indicator 00001C           __size_of_timer0_init 000000                     ??___lltofl 000014  
                      __ptext0 000000                        __ptext1 000000                        __ptext2 000000  
                      __ptext3 000000                        __ptext4 000000                        __ptext5 000000  
                      __ptext6 000000                        __ptext7 000000                        __ptext8 000000  
                      __ptext9 000000           __size_of_timer2_init 000000          __size_of_buffer_putch 000000  
                   ??___lwtofl 000041                   __size_of_exp 000000                   __size_of_log 000000  
                 __size_of_pow 000000                        _seconds 00000C                        _ser_tmp 000000* 
              ??_format_double 000053                        _put_str 000000                     ??_lcd_init 000006  
                   ??_lcd_send 000008                     ??_lcd_puts 000009           end_of_initialization 000038  
              ??_format_number 000011                ??_format_xint32 00003C                        exp@sign 000024  
                    _LCD_lines 000004                   _lcd_init$134 000007                 lcd_puts@string 00000B  
                      pow@sign 000035  measure_inductance@denominator 000010          __end_of_print_reading 00006E  
                   ??_ser_init 000006                     ??_ser_puts 000006                     _ser_puts$0 000006  
                 _buffer_putch 000000              format_number@base 00000F                        postdec1 000FE5  
                      postdec2 000FDD                        postinc0 000FEE                        postinc1 000FE6  
                      postinc2 000FDE                     _print_unit 000000            _measure_capacitance 000000  
                  ?_lcd_gotoxy 00000A                    ___fldiv@exp 00001D                    ?_global_int 000000  
                  ___flmul@exp 000027                  ??_lcd_command 000009           ?_measure_capacitance 000000  
      measure_capacitance@unit 00005A                 format_double@m 00004C         measure_inductance@unit 000024  
               __end_of___flge 00004C                 _timer0_read_ps 000000                lcd_gotoxy@F6470 000000  
                   floor@expon 000018                 format_number@i 000037                 format_number@n 00000D  
               format_xint32@x 000038                    __end_ofPL10 0003BA                    __end_ofPL20 0003DE  
                  __end_ofPL12 00015A                    __end_ofPL30 00002A                    __end_ofPL22 0003F0  
                  __end_ofPL14 0003CC                    __end_ofPL32 000410                    __end_ofPL24 00002A  
                  __end_ofPL16 0000AA                    __end_ofPL34 00041E                    __end_ofPL26 000128  
                  __end_ofPL18 0000B6                    __end_ofPL36 0000C4                    __end_ofPL28 000400  
                  __end_ofPL38 0000C2            start_initialization 000000                     eval_poly@d 00003E  
                   eval_poly@n 00003F                     eval_poly@x 00003A          __size_of_measure_freq 000000  
                   ldexp@value 000046                    __end_of_exp 00021C                    __end_of_log 000118  
                  __end_of_pow 000192                   _LCD_function 000003             format_double@digit 00004A  
                   frexp@value 000006          ??_measure_capacitance 000053         __end_of_timer0_read_ps 00004A  
                     ??___flge 00000E            __size_of_lcd_gotoxy 000000            __end_of_lcd_command 00000C  
                  __pdataBANK0 000000                   _measure_freq 000000            __size_of_global_int 000000  
     print_reading@measurement 000038              __size_of___altofl 000000              __size_of___flpack 000000  
            __size_of___awtofl 000000                    ?_print_unit 000000              __size_of___lltofl 000000  
                  __pbssCOMRAM 000000              __size_of___lwtofl 000000                  __pcstackBANK0 000000  
              __CFG_nPWRTEN$ON 000000                  ?_output_putch 000000              measure_freq@count 00003B  
             lcd_command@value 000009              __size_of_lcd_init 000000              __size_of_lcd_send 000000  
                    _calibrate 000000              __size_of_lcd_puts 000000                      _delay10ms 000000  
                    __pnvBANK0 000000               ___lwdiv@dividend 000006                ?_timer0_read_ps 000006  
                    __pintcode 000000                       ?___fladd 00002E                       ?___fldiv 000010  
                     ?___flneg 000006                       ?___flmul 00001F                       ?___flsub 00003A  
                     ?___fltol 000004                       ?___lwdiv 000006                       ?___lwmod 000006  
                    _lcd_begin 000000                      _lcd_clear 000000                    __smallconst 000000* 
                    _eval_poly 000000                  output_putch@c 000009                      _indicator 000000  
               ??_output_putch 000009               ___lwdiv@quotient 00000A                 __size_of_log10 000000  
                     ?_put_str 000000                 __size_of_floor 000000                 __size_of_ldexp 000000  
               __size_of_frexp 000000                     ?_calibrate 000000                     ?_delay10ms 000000  
                     _LCD_ctrl 000002                       _LCD_mode 000005                    _lcd_command 000000  
          __size_of_print_unit 000000                       i2u250_48 00004C                       i2u249_40 00004A  
                     i2u249_41 000044                      _ser_putch 000000*   __size_of_measure_inductance 000000  
                ??_timer0_init 000006                  ??_timer2_init 000006              indicator@indicate 000010  
                   ?_lcd_begin 00000A                     ?_lcd_clear 000000                     ?_eval_poly 00003A  
                   ?_indicator 000000                      lcd_puts@i 00000A                   ??_lcd_gotoxy 00000B  
        measure_inductance@Lin 000033          measure_inductance@var 000031                      copy_data0 00002C  
        __end_of_format_double 000188                   ??_global_int 000000           format_number@padchar 000035  
      __size_of_lcd_write4bits 000000          __end_of_format_number 0000A8          __end_of_format_xint32 000034  
                    frexp@eptr 00000A                       __Hrparam 000000*                      __Lrparam 000000* 
                   ?_ser_putch 000000                   __Lsmallconst 000000*            __end_of_lcd_gotoxy 000034  
             __size_of___fladd 000000               __size_of___fldiv 000000               __size_of___flneg 000000  
             __size_of___flmul 000000               __size_of___flsub 000000               __size_of___fltol 000000  
                     ___altofl 000000                       ___flpack 000000               __size_of___lwdiv 000000  
             __size_of___lwmod 000000                       ___awtofl 000000                       ___lltofl 000000  
                timer2_init@ps 000007                       ___lwtofl 000000             __end_of_global_int 000122  
          __end_of_timer0_init 00006E                       _exp$1057 00001E            __end_of_timer2_init 00002E  
              ___lwdiv@divisor 000008                ___lwdiv@counter 00000C         __size_of_print_reading 000000  
         timer0_init@prescaler 00000E                       __ptext10 000000                       __ptext11 000000  
                     __ptext20 000000                       __ptext12 000000                       __ptext21 000000  
                     __ptext13 000000                       __ptext30 000000                       __ptext22 000000  
                     __ptext14 000000                       __ptext31 000000                       __ptext23 000000  
                     __ptext15 000000                       __ptext40 000000                       __ptext32 000000  
                     __ptext24 000000                       __ptext16 000000                       __ptext41 000000  
                     __ptext33 000000                       __ptext25 000000                       __ptext17 000000  
                     __ptext42 000000                       __ptext34 000000                       __ptext26 000000  
                     __ptext18 000000                       __ptext43 000000                       __ptext35 000000  
                     __ptext27 000000                       __ptext19 000000                       __ptext44 000000  
                     __ptext36 000000                       __ptext28 000000                       __ptext45 000000  
                     __ptext37 000000                       __ptext29 000000                       __ptext46 000000  
                     __ptext38 000000                       __ptext47 000000                       __ptext39 000000  
                     _lcd_init 000000                       _lcd_send 000000                       _pow$1055 00002D  
                     _pow$1056 000031                       _lcd_puts 000000               __size_of_put_str 000000  
                  ??_calibrate 000041                  __size_of_main 000000                    ??_delay10ms 000006  
                     _msecpart 000006                       _ser_init 000000*                      _ser_puts 000000* 
                     _timer1of 000010           __end_of_output_putch 000012                    ??_lcd_begin 00000B  
                  ??_lcd_clear 00000A                       exp@coeff 000001          ___flmul@f3_as_product 000028  
                     log@coeff 000029    measure_inductance@numerator 00000C                   ??_print_unit 000010  
                  ??_eval_poly 000041                    ??_indicator 000010             _print_reading$1052 00003A  
           _print_reading$1053 00003C                       intlevel2 000000*   __end_of_measure_capacitance 000360  
             ___lwmod@dividend 000006               ??_timer0_read_ps 000008                    ??_ser_putch 000006  
           __end_of_print_unit 000028                  _print_reading 000000           delay10ms@period_10ms 000000  
                  _timer0_init 000000                    _timer2_init 000000             _format_double$1040 00003E  
           _format_double$1041 000042       _measure_capacitance$1042 00004E       _measure_capacitance$1043 000052  
     _measure_capacitance$1044 000056                       put_str@i 00000B                       put_str@s 00000D  
           timer0_init@ps_mode 00000F                ___lwmod@divisor 000008                ___lwmod@counter 00000A  
               _lcd_write4bits 000000                   ___fladd@exp1 000039                   ___fladd@exp2 000038  
                 ___fladd@sign 000037                   ?_lcd_command 000000                 ?_print_reading 000038  
                ?_buffer_putch 000000  
