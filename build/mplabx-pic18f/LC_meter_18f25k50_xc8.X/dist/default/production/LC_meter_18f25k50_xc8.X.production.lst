

Microchip Technology PIC18 PRO Macro Assembler V1.34 build -361300703 
                                                                                               Thu Sep 26 08:23:08 2019

Microchip Technology Omniscient Code Generator (PRO mode) build 201502162209
     1                           	processor	18F25K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    72                           	psect	pa_nodes,global,class=CODE,delta=1
    73  0000                     tblptrl	equ	0xFF6
    74                           tablat	equ	0xFF5
    75                           prodl	equ	0xFF3
    76                           intcon	equ	0xFF2
    77                           intcon2	equ	0xFF1
    78                           wreg	equ	0xFE8
    79                           indf2	equ	0xFDF
    80                           postinc2	equ	0xFDE
    81                           postdec2	equ	0xFDD
    82                           fsr2h	equ	0xFDA
    83                           fsr2l	equ	0xFD9
    84                           status	equ	0xFD8
    85                           
    86                           	psect	idataBANK0
    87  0029F0                     __pidataBANK0:
    88                           	opt stack 0
    89                           
    90                           ;initializer for lcd_gotoxy@F6470
    91  0029F0  00                 	db	0
    92  0029F1  40                 	db	64
    93  0029F2  14                 	db	20
    94  0029F3  54                 	db	84
    95                           
    96                           ;initializer for _mode
    97  0029F4  FF                 	db	255
    98                           tblptrl	equ	0xFF6
    99                           tablat	equ	0xFF5
   100                           prodl	equ	0xFF3
   101                           intcon	equ	0xFF2
   102                           intcon2	equ	0xFF1
   103                           wreg	equ	0xFE8
   104                           indf2	equ	0xFDF
   105                           postinc2	equ	0xFDE
   106                           postdec2	equ	0xFDD
   107                           fsr2h	equ	0xFDA
   108                           fsr2l	equ	0xFD9
   109                           status	equ	0xFD8
   110                           
   111                           	psect	smallconst
   112  000800                     __psmallconst:
   113                           	opt stack 0
   114  000800  00                 	db	0
   115  000801                     exp@coeff:
   116                           	opt stack 0
   117  000801  0000               	dw	0
   118  000803  3F80               	dw	16256
   119  000805  7218               	dw	29208
   120  000807  3F31               	dw	16177
   121  000809  FDF0               	dw	65008
   122  00080B  3E75               	dw	15989
   123  00080D  5847               	dw	22599
   124  00080F  3D63               	dw	15715
   125  000811  9558               	dw	38232
   126  000813  3C1D               	dw	15389
   127  000815  C482               	dw	50306
   128  000817  3AAE               	dw	15022
   129  000819  78A8               	dw	30888
   130  00081B  3921               	dw	14625
   131  00081D  93EF               	dw	37871
   132  00081F  3780               	dw	14208
   133  000821  92A0               	dw	37536
   134  000823  35A7               	dw	13735
   135  000825  5646               	dw	22086
   136  000827  3415               	dw	13333
   137  000829                     __end_ofexp@coeff:
   138                           	opt stack 0
   139  000829                     log@coeff:
   140                           	opt stack 0
   141  000829  0000               	dw	0
   142  00082B  0000               	dw	0
   143  00082D  FFC4               	dw	65476
   144  00082F  3F7F               	dw	16255
   145  000831  EF80               	dw	61312
   146  000833  BEFF               	dw	48895
   147  000835  E190               	dw	57744
   148  000837  3EA9               	dw	16041
   149  000839  82EC               	dw	33516
   150  00083B  BE76               	dw	48758
   151  00083D  AD82               	dw	44418
   152  00083F  3E2B               	dw	15915
   153  000841  3C0E               	dw	15374
   154  000843  BDC3               	dw	48579
   155  000845  D187               	dw	53639
   156  000847  3D13               	dw	15635
   157  000849  7841               	dw	30785
   158  00084B  BBD3               	dw	48083
   159  00084D                     __end_oflog@coeff:
   160                           	opt stack 0
   161  00084D                     STR_30:
   162  00084D  2D                 	db	45
   163  00084E  20                 	db	32
   164  00084F  43                 	db	67	;'C'
   165  000850  20                 	db	32
   166  000851  28                 	db	40
   167  000852  55                 	db	85	;'U'
   168  000853  6E                 	db	110	;'n'
   169  000854  69                 	db	105	;'i'
   170  000855  74                 	db	116	;'t'
   171  000856  3A                 	db	58	;':'
   172  000857  20                 	db	32
   173  000858  46                 	db	70	;'F'
   174  000859  29                 	db	41
   175  00085A  20                 	db	32
   176  00085B  2D                 	db	45
   177  00085C  00                 	db	0
   178  00085D                     STR_31:
   179  00085D  2D                 	db	45
   180  00085E  20                 	db	32
   181  00085F  4C                 	db	76	;'L'
   182  000860  20                 	db	32
   183  000861  28                 	db	40
   184  000862  55                 	db	85	;'U'
   185  000863  6E                 	db	110	;'n'
   186  000864  69                 	db	105	;'i'
   187  000865  74                 	db	116	;'t'
   188  000866  3A                 	db	58	;':'
   189  000867  20                 	db	32
   190  000868  48                 	db	72	;'H'
   191  000869  29                 	db	41
   192  00086A  20                 	db	32
   193  00086B  2D                 	db	45
   194  00086C  00                 	db	0
   195  00086D                     STR_3:
   196  00086D  70                 	db	112	;'p'
   197  00086E  6C                 	db	108	;'l'
   198  00086F  65                 	db	101	;'e'
   199  000870  61                 	db	97	;'a'
   200  000871  73                 	db	115	;'s'
   201  000872  65                 	db	101	;'e'
   202  000873  20                 	db	32
   203  000874  77                 	db	119	;'w'
   204  000875  61                 	db	97	;'a'
   205  000876  69                 	db	105	;'i'
   206  000877  74                 	db	116	;'t'
   207  000878  2E                 	db	46
   208  000879  2E                 	db	46
   209  00087A  2E                 	db	46
   210  00087B  00                 	db	0
   211  00087C                     STR_15:
   212  00087C  49                 	db	73	;'I'
   213  00087D  6E                 	db	110	;'n'
   214  00087E  64                 	db	100	;'d'
   215  00087F  75                 	db	117	;'u'
   216  000880  63                 	db	99	;'c'
   217  000881  74                 	db	116	;'t'
   218  000882  69                 	db	105	;'i'
   219  000883  76                 	db	118	;'v'
   220  000884  69                 	db	105	;'i'
   221  000885  74                 	db	116	;'t'
   222  000886  79                 	db	121	;'y'
   223  000887  20                 	db	32
   224  000888  00                 	db	0
   225  000889                     STR_1:
   226  000889  43                 	db	67	;'C'
   227  00088A  61                 	db	97	;'a'
   228  00088B  6C                 	db	108	;'l'
   229  00088C  69                 	db	105	;'i'
   230  00088D  62                 	db	98	;'b'
   231  00088E  72                 	db	114	;'r'
   232  00088F  61                 	db	97	;'a'
   233  000890  74                 	db	116	;'t'
   234  000891  69                 	db	105	;'i'
   235  000892  6E                 	db	110	;'n'
   236  000893  67                 	db	103	;'g'
   237  000894  00                 	db	0
   238  000895                     STR_29:
   239  000895  4C                 	db	76	;'L'
   240  000896  43                 	db	67	;'C'
   241  000897  2D                 	db	45
   242  000898  6D                 	db	109	;'m'
   243  000899  65                 	db	101	;'e'
   244  00089A  74                 	db	116	;'t'
   245  00089B  65                 	db	101	;'e'
   246  00089C  72                 	db	114	;'r'
   247  00089D  20                 	db	32
   248  00089E  00                 	db	0
   249  00089F                     STR_6:
   250  00089F  43                 	db	67	;'C'
   251  0008A0  61                 	db	97	;'a'
   252  0008A1  70                 	db	112	;'p'
   253  0008A2  61                 	db	97	;'a'
   254  0008A3  63                 	db	99	;'c'
   255  0008A4  69                 	db	105	;'i'
   256  0008A5  74                 	db	116	;'t'
   257  0008A6  79                 	db	121	;'y'
   258  0008A7  20                 	db	32
   259  0008A8  00                 	db	0
   260  0008A9                     STR_11:
   261  0008A9  0D                 	db	13
   262  0008AA  0A                 	db	10
   263  0008AB  43                 	db	67	;'C'
   264  0008AC  43                 	db	67	;'C'
   265  0008AD  61                 	db	97	;'a'
   266  0008AE  6C                 	db	108	;'l'
   267  0008AF  3D                 	db	61	;'='
   268  0008B0  00                 	db	0
   269  0008B1                     STR_33:
   270  0008B1  20                 	db	32
   271  0008B2  20                 	db	32
   272  0008B3  20                 	db	32
   273  0008B4  20                 	db	32
   274  0008B5  20                 	db	32
   275  0008B6  20                 	db	32
   276  0008B7  00                 	db	0
   277  0008B8                     STR_8:
   278  0008B8  0D                 	db	13
   279  0008B9  0A                 	db	10
   280  0008BA  46                 	db	70	;'F'
   281  0008BB  31                 	db	49	;'1'
   282  0008BC  3D                 	db	61	;'='
   283  0008BD  00                 	db	0
   284  0008BE                     STR_9:
   285  0008BE  0D                 	db	13
   286  0008BF  0A                 	db	10
   287  0008C0  46                 	db	70	;'F'
   288  0008C1  32                 	db	50	;'2'
   289  0008C2  3D                 	db	61	;'='
   290  0008C3  00                 	db	0
   291  0008C4                     STR_10:
   292  0008C4  0D                 	db	13
   293  0008C5  0A                 	db	10
   294  0008C6  46                 	db	70	;'F'
   295  0008C7  33                 	db	51	;'3'
   296  0008C8  3D                 	db	61	;'='
   297  0008C9  00                 	db	0
   298  0008CA                     STR_5:
   299  0008CA  46                 	db	70	;'F'
   300  0008CB  72                 	db	114	;'r'
   301  0008CC  65                 	db	101	;'e'
   302  0008CD  71                 	db	113	;'q'
   303  0008CE  3D                 	db	61	;'='
   304  0008CF  00                 	db	0
   305  0008D0  52                 	db	82	;'R'
   306  0008D1  43                 	db	67	;'C'
   307  0008D2  34                 	db	52	;'4'
   308  0008D3  3D                 	db	61	;'='
   309  0008D4  00                 	db	0
   310  0008D5                     STR_13:
   311  0008D5  43                 	db	67	;'C'
   312  0008D6  69                 	db	105	;'i'
   313  0008D7  6E                 	db	110	;'n'
   314  0008D8  3D                 	db	61	;'='
   315  0008D9  00                 	db	0
   316  0008DA                     STR_7:
   317  0008DA  76                 	db	118	;'v'
   318  0008DB  61                 	db	97	;'a'
   319  0008DC  72                 	db	114	;'r'
   320  0008DD  3D                 	db	61	;'='
   321  0008DE  00                 	db	0
   322  0008DF                     STR_26:
   323  0008DF  2D                 	db	45
   324  0008E0  2A                 	db	42
   325  0008E1  2D                 	db	45
   326  0008E2  00                 	db	0
   327  0008E3  6D                 	db	109	;'m'
   328  0008E4  46                 	db	70	;'F'
   329  0008E5  00                 	db	0
   330  0008E6  6E                 	db	110	;'n'
   331  0008E7  46                 	db	70	;'F'
   332  0008E8  00                 	db	0
   333  0008E9  70                 	db	112	;'p'
   334  0008EA  46                 	db	70	;'F'
   335  0008EB  00                 	db	0
   336  0008EC  75                 	db	117	;'u'
   337  0008ED  46                 	db	70	;'F'
   338  0008EE  00                 	db	0
   339  0008EF                     STR_17:
   340  0008EF  6D                 	db	109	;'m'
   341  0008F0  48                 	db	72	;'H'
   342  0008F1  00                 	db	0
   343  0008F2  6E                 	db	110	;'n'
   344  0008F3  48                 	db	72	;'H'
   345  0008F4  00                 	db	0
   346  0008F5  75                 	db	117	;'u'
   347  0008F6  48                 	db	72	;'H'
   348  0008F7  00                 	db	0
   349  0008F8                     STR_2:
   350  0008F8  0D                 	db	13
   351  0008F9  0A                 	db	10
   352  0008FA  00                 	db	0
   353  0000                     
   354                           ; #config settings
   355  0008FB  00                 	db	0	; dummy byte at the end
   356  0000                     tblptrl	equ	0xFF6
   357                           tablat	equ	0xFF5
   358                           prodl	equ	0xFF3
   359                           intcon	equ	0xFF2
   360                           intcon2	equ	0xFF1
   361                           wreg	equ	0xFE8
   362                           indf2	equ	0xFDF
   363                           postinc2	equ	0xFDE
   364                           postdec2	equ	0xFDD
   365                           fsr2h	equ	0xFDA
   366                           fsr2l	equ	0xFD9
   367                           status	equ	0xFD8
   368                           
   369                           	psect	nvBANK0
   370  0000EB                     __pnvBANK0:
   371                           	opt stack 0
   372  0000EB                     _CCal:
   373                           	opt stack 0
   374  0000EB                     	ds	4
   375  0000EF                     _bres:
   376                           	opt stack 0
   377  0000EF                     	ds	2
   378  0000F1                     _msecpart:
   379                           	opt stack 0
   380  0000F1                     	ds	2
   381  0000                     _TMR0	set	4054
   382  0000                     _INTCON	set	4082
   383  0000                     _INTCON2	set	4081
   384  0000                     _LATB	set	3978
   385  0000                     _LATC	set	3979
   386  0000                     _PIE1	set	3997
   387  0000                     _PIR1	set	3998
   388  0000                     _PORTC	set	3970
   389  0000                     _RCREG	set	4014
   390  0000                     _SPBRG	set	4015
   391  0000                     _T0CON	set	4053
   392  0000                     _T2CON	set	4026
   393  0000                     _TMR2	set	4028
   394  0000                     _TRISA	set	3986
   395  0000                     _TRISB	set	3987
   396  0000                     _TRISC	set	3988
   397  0000                     _TXREG	set	4013
   398  0000                     _BRGH	set	32098
   399  0000                     _CREN	set	32092
   400  0000                     _GIE	set	32663
   401  0000                     _PEIE	set	32662
   402  0000                     _RCIF	set	31989
   403  0000                     _RX9	set	32094
   404  0000                     _SPEN	set	32095
   405  0000                     _SYNC	set	32100
   406  0000                     _TX9	set	32102
   407  0000                     _TXEN	set	32101
   408  0000                     _TXIE	set	31980
   409  0000                     _TXIF	set	31988
   410                           tblptrl	equ	0xFF6
   411                           tablat	equ	0xFF5
   412                           prodl	equ	0xFF3
   413                           intcon	equ	0xFF2
   414                           intcon2	equ	0xFF1
   415                           wreg	equ	0xFE8
   416                           indf2	equ	0xFDF
   417                           postinc2	equ	0xFDE
   418                           postdec2	equ	0xFDD
   419                           fsr2h	equ	0xFDA
   420                           fsr2l	equ	0xFD9
   421                           status	equ	0xFD8
   422                           
   423                           	psect	cinit
   424  002474                     __pcinit:
   425                           	opt stack 0
   426  002474                     start_initialization:
   427                           	opt stack 0
   428  002474                     __initialization:
   429                           	opt stack 0
   430                           
   431                           ; Clear objects allocated to BANK1 (32 bytes)
   432  002474  EE01  F000         	lfsr	0,__pbssBANK1
   433  002478  0E20               	movlw	32
   434  00247A                     clear_0:
   435  00247A  6AEE               	clrf	postinc0,c
   436  00247C  06E8               	decf	wreg,f,c
   437  00247E  E1FD               	bnz	clear_0
   438                           
   439                           ; Clear objects allocated to BANK0 (49 bytes)
   440  002480  EE00  F0BA         	lfsr	0,__pbssBANK0
   441  002484  0E31               	movlw	49
   442  002486                     clear_1:
   443  002486  6AEE               	clrf	postinc0,c
   444  002488  06E8               	decf	wreg,f,c
   445  00248A  E1FD               	bnz	clear_1
   446                           
   447                           ; Clear objects allocated to COMRAM (3 bytes)
   448  00248C  6A5C               	clrf	(__pbssCOMRAM+2)& (0+255),c
   449  00248E  6A5B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   450  002490  6A5A               	clrf	__pbssCOMRAM& (0+255),c
   451                           
   452                           ; Initialize objects allocated to BANK0 (5 bytes)
   453                           ; load TBLPTR registers with __pidataBANK0
   454  002492  0EF0               	movlw	low __pidataBANK0
   455  002494  6EF6               	movwf	tblptrl,c
   456  002496  0E29               	movlw	high __pidataBANK0
   457  002498  6EF7               	movwf	tblptrh,c
   458  00249A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   459  00249C  6EF8               	movwf	tblptru,c
   460  00249E  EE00  F0F3         	lfsr	0,__pdataBANK0
   461  0024A2  EE10 F005          	lfsr	1,5
   462  0024A6                     copy_data0:
   463  0024A6  0009               	tblrd		*+
   464  0024A8  CFF5 FFEE          	movff	tablat,postinc0
   465  0024AC  50E5               	movf	postdec1,w,c
   466  0024AE  50E1               	movf	fsr1l,w,c
   467  0024B0  E1FA               	bnz	copy_data0
   468  0024B2                     end_of_initialization:
   469                           	opt stack 0
   470  0024B2                     __end_of__initialization:
   471                           	opt stack 0
   472  0024B2  0E00               	movlw	low (__Lsmallconst shr (0+16))
   473  0024B4  6EF8               	movwf	tblptru,c
   474  0024B6  0E08               	movlw	high __Lsmallconst
   475  0024B8  6EF7               	movwf	tblptrh,c
   476  0024BA  0100               	movlb	0
   477  0024BC  EF9A  F00C         	goto	_main	;jump to C main() function
   478                           tblptru	equ	0xFF8
   479                           tblptrh	equ	0xFF7
   480                           tblptrl	equ	0xFF6
   481                           tablat	equ	0xFF5
   482                           prodl	equ	0xFF3
   483                           intcon	equ	0xFF2
   484                           intcon2	equ	0xFF1
   485                           postinc0	equ	0xFEE
   486                           wreg	equ	0xFE8
   487                           postdec1	equ	0xFE5
   488                           fsr1l	equ	0xFE1
   489                           indf2	equ	0xFDF
   490                           postinc2	equ	0xFDE
   491                           postdec2	equ	0xFDD
   492                           fsr2h	equ	0xFDA
   493                           fsr2l	equ	0xFD9
   494                           status	equ	0xFD8
   495                           
   496                           	psect	bssCOMRAM
   497  00005A                     __pbssCOMRAM:
   498                           	opt stack 0
   499  00005A                     _LCD_function:
   500                           	opt stack 0
   501  00005A                     	ds	1
   502  00005B                     _txiptr:
   503                           	opt stack 0
   504  00005B                     	ds	1
   505  00005C                     _txoptr:
   506                           	opt stack 0
   507  00005C                     	ds	1
   508                           tblptru	equ	0xFF8
   509                           tblptrh	equ	0xFF7
   510                           tblptrl	equ	0xFF6
   511                           tablat	equ	0xFF5
   512                           prodl	equ	0xFF3
   513                           intcon	equ	0xFF2
   514                           intcon2	equ	0xFF1
   515                           postinc0	equ	0xFEE
   516                           wreg	equ	0xFE8
   517                           postdec1	equ	0xFE5
   518                           fsr1l	equ	0xFE1
   519                           indf2	equ	0xFDF
   520                           postinc2	equ	0xFDE
   521                           postdec2	equ	0xFDD
   522                           fsr2h	equ	0xFDA
   523                           fsr2l	equ	0xFD9
   524                           status	equ	0xFD8
   525                           
   526                           	psect	bssBANK0
   527  0000BA                     __pbssBANK0:
   528                           	opt stack 0
   529  0000BA                     _F2:
   530                           	opt stack 0
   531  0000BA                     	ds	4
   532  0000BE                     _F3:
   533                           	opt stack 0
   534  0000BE                     	ds	4
   535  0000C2                     _msecs:
   536                           	opt stack 0
   537  0000C2                     	ds	4
   538  0000C6                     _seconds:
   539                           	opt stack 0
   540  0000C6                     	ds	4
   541  0000CA                     _timer1of:
   542                           	opt stack 0
   543  0000CA                     	ds	4
   544  0000CE                     _blink:
   545                           	opt stack 0
   546  0000CE                     	ds	2
   547  0000D0                     _LCD_ctrl:
   548                           	opt stack 0
   549  0000D0                     	ds	1
   550  0000D1                     _LCD_lines:
   551                           	opt stack 0
   552  0000D1                     	ds	1
   553  0000D2                     _LCD_mode:
   554                           	opt stack 0
   555  0000D2                     	ds	1
   556  0000D3                     _rxiptr:
   557                           	opt stack 0
   558  0000D3                     	ds	1
   559  0000D4                     _rxoptr:
   560                           	opt stack 0
   561  0000D4                     	ds	1
   562  0000D5                     _ser_tmp:
   563                           	opt stack 0
   564  0000D5                     	ds	1
   565  0000D6                     _buffer:
   566                           	opt stack 0
   567  0000D6                     	ds	17
   568  0000E7                     _F1:
   569                           	opt stack 0
   570  0000E7                     	ds	4
   571                           tblptru	equ	0xFF8
   572                           tblptrh	equ	0xFF7
   573                           tblptrl	equ	0xFF6
   574                           tablat	equ	0xFF5
   575                           prodl	equ	0xFF3
   576                           intcon	equ	0xFF2
   577                           intcon2	equ	0xFF1
   578                           postinc0	equ	0xFEE
   579                           wreg	equ	0xFE8
   580                           postdec1	equ	0xFE5
   581                           fsr1l	equ	0xFE1
   582                           indf2	equ	0xFDF
   583                           postinc2	equ	0xFDE
   584                           postdec2	equ	0xFDD
   585                           fsr2h	equ	0xFDA
   586                           fsr2l	equ	0xFD9
   587                           status	equ	0xFD8
   588                           
   589                           	psect	dataBANK0
   590  0000F3                     __pdataBANK0:
   591                           	opt stack 0
   592  0000F3                     lcd_gotoxy@F6470:
   593                           	opt stack 0
   594  0000F3                     	ds	4
   595  0000F7                     _mode:
   596                           	opt stack 0
   597  0000F7                     	ds	1
   598                           tblptru	equ	0xFF8
   599                           tblptrh	equ	0xFF7
   600                           tblptrl	equ	0xFF6
   601                           tablat	equ	0xFF5
   602                           prodl	equ	0xFF3
   603                           intcon	equ	0xFF2
   604                           intcon2	equ	0xFF1
   605                           postinc0	equ	0xFEE
   606                           wreg	equ	0xFE8
   607                           postdec1	equ	0xFE5
   608                           fsr1l	equ	0xFE1
   609                           indf2	equ	0xFDF
   610                           postinc2	equ	0xFDE
   611                           postdec2	equ	0xFDD
   612                           fsr2h	equ	0xFDA
   613                           fsr2l	equ	0xFD9
   614                           status	equ	0xFD8
   615                           
   616                           	psect	bssBANK1
   617  000100                     __pbssBANK1:
   618                           	opt stack 0
   619  000100                     _rxfifo:
   620                           	opt stack 0
   621  000100                     	ds	16
   622  000110                     _txfifo:
   623                           	opt stack 0
   624  000110                     	ds	16
   625                           tblptru	equ	0xFF8
   626                           tblptrh	equ	0xFF7
   627                           tblptrl	equ	0xFF6
   628                           tablat	equ	0xFF5
   629                           prodl	equ	0xFF3
   630                           intcon	equ	0xFF2
   631                           intcon2	equ	0xFF1
   632                           postinc0	equ	0xFEE
   633                           wreg	equ	0xFE8
   634                           postdec1	equ	0xFE5
   635                           fsr1l	equ	0xFE1
   636                           indf2	equ	0xFDF
   637                           postinc2	equ	0xFDE
   638                           postdec2	equ	0xFDD
   639                           fsr2h	equ	0xFDA
   640                           fsr2l	equ	0xFD9
   641                           status	equ	0xFD8
   642                           
   643                           	psect	cstackBANK0
   644  000060                     __pcstackBANK0:
   645                           	opt stack 0
   646  000060                     ___fltol@sign1:
   647                           	opt stack 0
   648                           
   649                           ; 1 bytes @ 0x0
   650  000060                     	ds	1
   651  000061                     ___fltol@exp1:
   652                           	opt stack 0
   653                           
   654                           ; 1 bytes @ 0x1
   655  000061                     	ds	1
   656  000062                     ?___altofl:
   657                           	opt stack 0
   658  000062                     measure_inductance@numerator:
   659                           	opt stack 0
   660  000062                     ___altofl@c:
   661                           	opt stack 0
   662                           
   663                           ; 4 bytes @ 0x2
   664  000062                     	ds	4
   665  000066                     ___altofl@sign:
   666                           	opt stack 0
   667  000066                     measure_inductance@denominator:
   668                           	opt stack 0
   669                           
   670                           ; 4 bytes @ 0x6
   671  000066                     	ds	1
   672  000067                     ?_floor:
   673                           	opt stack 0
   674  000067                     floor@x:
   675                           	opt stack 0
   676                           
   677                           ; 4 bytes @ 0x7
   678  000067                     	ds	3
   679  00006A                     _measure_inductance$1110:
   680                           	opt stack 0
   681                           
   682                           ; 4 bytes @ 0xA
   683  00006A                     	ds	1
   684  00006B                     floor@i:
   685                           	opt stack 0
   686                           
   687                           ; 4 bytes @ 0xB
   688  00006B                     	ds	3
   689  00006E                     _measure_inductance$1114:
   690                           	opt stack 0
   691                           
   692                           ; 4 bytes @ 0xE
   693  00006E                     	ds	1
   694  00006F                     floor@expon:
   695                           	opt stack 0
   696                           
   697                           ; 2 bytes @ 0xF
   698  00006F                     	ds	2
   699  000071                     ?_exp:
   700                           	opt stack 0
   701  000071                     exp@x:
   702                           	opt stack 0
   703                           
   704                           ; 4 bytes @ 0x11
   705  000071                     	ds	1
   706  000072                     _measure_inductance$1115:
   707                           	opt stack 0
   708                           
   709                           ; 4 bytes @ 0x12
   710  000072                     	ds	3
   711  000075                     _exp$1122:
   712                           	opt stack 0
   713                           
   714                           ; 4 bytes @ 0x15
   715  000075                     	ds	1
   716  000076                     _measure_inductance$1116:
   717                           	opt stack 0
   718                           
   719                           ; 4 bytes @ 0x16
   720  000076                     	ds	3
   721  000079                     exp@exponent:
   722                           	opt stack 0
   723                           
   724                           ; 2 bytes @ 0x19
   725  000079                     	ds	1
   726  00007A                     measure_inductance@unit:
   727                           	opt stack 0
   728                           
   729                           ; 1 bytes @ 0x1A
   730  00007A                     	ds	1
   731  00007B                     exp@sign:
   732                           	opt stack 0
   733  00007B                     _measure_inductance$1111:
   734                           	opt stack 0
   735                           
   736                           ; 4 bytes @ 0x1B
   737  00007B                     	ds	1
   738  00007C                     ?_pow:
   739                           	opt stack 0
   740  00007C                     pow@x:
   741                           	opt stack 0
   742                           
   743                           ; 4 bytes @ 0x1C
   744  00007C                     	ds	3
   745  00007F                     _measure_inductance$1112:
   746                           	opt stack 0
   747                           
   748                           ; 4 bytes @ 0x1F
   749  00007F                     	ds	1
   750  000080                     pow@y:
   751                           	opt stack 0
   752                           
   753                           ; 4 bytes @ 0x20
   754  000080                     	ds	3
   755  000083                     _measure_inductance$1113:
   756                           	opt stack 0
   757                           
   758                           ; 4 bytes @ 0x23
   759  000083                     	ds	1
   760  000084                     _pow$1120:
   761                           	opt stack 0
   762                           
   763                           ; 4 bytes @ 0x24
   764  000084                     	ds	3
   765  000087                     measure_inductance@var:
   766                           	opt stack 0
   767                           
   768                           ; 2 bytes @ 0x27
   769  000087                     	ds	1
   770  000088                     _pow$1121:
   771                           	opt stack 0
   772                           
   773                           ; 4 bytes @ 0x28
   774  000088                     	ds	1
   775  000089                     measure_inductance@Lin:
   776                           	opt stack 0
   777                           
   778                           ; 4 bytes @ 0x29
   779  000089                     	ds	3
   780  00008C                     pow@sign:
   781                           	opt stack 0
   782                           
   783                           ; 1 bytes @ 0x2C
   784  00008C                     	ds	1
   785  00008D                     pow@yi:
   786                           	opt stack 0
   787                           
   788                           ; 4 bytes @ 0x2D
   789  00008D                     	ds	4
   790  000091                     format_double@num:
   791                           	opt stack 0
   792                           
   793                           ; 4 bytes @ 0x31
   794  000091                     	ds	4
   795  000095                     _format_double$1105:
   796                           	opt stack 0
   797                           
   798                           ; 4 bytes @ 0x35
   799  000095                     	ds	4
   800  000099                     _format_double$1106:
   801                           	opt stack 0
   802                           
   803                           ; 4 bytes @ 0x39
   804  000099                     	ds	4
   805  00009D                     format_double@weight:
   806                           	opt stack 0
   807                           
   808                           ; 4 bytes @ 0x3D
   809  00009D                     	ds	4
   810  0000A1                     format_double@digit:
   811                           	opt stack 0
   812                           
   813                           ; 2 bytes @ 0x41
   814  0000A1                     	ds	2
   815  0000A3                     format_double@m:
   816                           	opt stack 0
   817                           
   818                           ; 2 bytes @ 0x43
   819  0000A3                     	ds	2
   820  0000A5                     _measure_capacitance$1107:
   821                           	opt stack 0
   822                           
   823                           ; 4 bytes @ 0x45
   824  0000A5                     	ds	4
   825  0000A9                     _measure_capacitance$1108:
   826                           	opt stack 0
   827                           
   828                           ; 4 bytes @ 0x49
   829  0000A9                     	ds	4
   830  0000AD                     _measure_capacitance$1109:
   831                           	opt stack 0
   832                           
   833                           ; 4 bytes @ 0x4D
   834  0000AD                     	ds	4
   835  0000B1                     measure_capacitance@unit:
   836                           	opt stack 0
   837                           
   838                           ; 1 bytes @ 0x51
   839  0000B1                     	ds	1
   840  0000B2                     measure_capacitance@var:
   841                           	opt stack 0
   842                           
   843                           ; 2 bytes @ 0x52
   844  0000B2                     	ds	2
   845  0000B4                     measure_capacitance@Cin:
   846                           	opt stack 0
   847                           
   848                           ; 4 bytes @ 0x54
   849  0000B4                     	ds	4
   850  0000B8                     _main$403:
   851                           	opt stack 0
   852                           
   853                           ; 1 bytes @ 0x58
   854  0000B8                     	ds	1
   855  0000B9                     main@new_mode:
   856                           	opt stack 0
   857                           
   858                           ; 1 bytes @ 0x59
   859  0000B9                     	ds	1
   860                           tblptru	equ	0xFF8
   861                           tblptrh	equ	0xFF7
   862                           tblptrl	equ	0xFF6
   863                           tablat	equ	0xFF5
   864                           prodl	equ	0xFF3
   865                           intcon	equ	0xFF2
   866                           intcon2	equ	0xFF1
   867                           postinc0	equ	0xFEE
   868                           wreg	equ	0xFE8
   869                           postdec1	equ	0xFE5
   870                           fsr1l	equ	0xFE1
   871                           indf2	equ	0xFDF
   872                           postinc2	equ	0xFDE
   873                           postdec2	equ	0xFDD
   874                           fsr2h	equ	0xFDA
   875                           fsr2l	equ	0xFD9
   876                           status	equ	0xFD8
   877                           
   878                           	psect	cstackCOMRAM
   879  000001                     __pcstackCOMRAM:
   880                           	opt stack 0
   881  000001                     ??_global_int:
   882  000001                     
   883                           ; 1 bytes @ 0x0
   884  000001                     	ds	3
   885  000004                     ??_buffer_putch:
   886  000004                     ??_timer2_init:
   887  000004                     ?_timer0_read_ps:
   888                           	opt stack 0
   889  000004                     ?___lwdiv:
   890                           	opt stack 0
   891  000004                     ?___lwmod:
   892                           	opt stack 0
   893  000004                     ?___flpack:
   894                           	opt stack 0
   895  000004                     ?_frexp:
   896                           	opt stack 0
   897  000004                     ?___flneg:
   898                           	opt stack 0
   899  000004                     lcd_write4bits@value:
   900                           	opt stack 0
   901  000004                     lcd_init@fourbitmode:
   902                           	opt stack 0
   903  000004                     ser_putch@c:
   904                           	opt stack 0
   905  000004                     _timer0_init$152:
   906                           	opt stack 0
   907  000004                     ___lwdiv@dividend:
   908                           	opt stack 0
   909  000004                     ___lwmod@dividend:
   910                           	opt stack 0
   911  000004                     ___flpack@arg:
   912                           	opt stack 0
   913  000004                     ___flge@ff1:
   914                           	opt stack 0
   915  000004                     ___flneg@f1:
   916                           	opt stack 0
   917  000004                     frexp@value:
   918                           	opt stack 0
   919                           
   920                           ; 4 bytes @ 0x3
   921  000004                     	ds	1
   922  000005                     lcd_send@mode:
   923                           	opt stack 0
   924  000005                     timer2_init@ps:
   925                           	opt stack 0
   926  000005                     ser_puts@s:
   927                           	opt stack 0
   928  000005                     _lcd_init$134:
   929                           	opt stack 0
   930                           
   931                           ; 2 bytes @ 0x4
   932  000005                     	ds	1
   933  000006                     ??_print_buffer:
   934  000006                     ??_timer0_read_ps:
   935  000006                     buffer_putch@ch:
   936                           	opt stack 0
   937  000006                     lcd_send@value:
   938                           	opt stack 0
   939  000006                     _timer0_init$153:
   940                           	opt stack 0
   941  000006                     ___lwdiv@divisor:
   942                           	opt stack 0
   943  000006                     ___lwmod@divisor:
   944                           	opt stack 0
   945                           
   946                           ; 2 bytes @ 0x5
   947  000006                     	ds	1
   948  000007                     ??_lcd_puts:
   949  000007                     buffer_puts@x:
   950                           	opt stack 0
   951  000007                     lcd_command@value:
   952                           	opt stack 0
   953  000007                     timer2_init@ps_mode:
   954                           	opt stack 0
   955  000007                     output_putch@c:
   956                           	opt stack 0
   957  000007                     print_buffer@i:
   958                           	opt stack 0
   959                           
   960                           ; 1 bytes @ 0x6
   961  000007                     	ds	1
   962  000008                     ??_put_str:
   963  000008                     ??_lcd_clear:
   964  000008                     lcd_gotoxy@row:
   965                           	opt stack 0
   966  000008                     lcd_puts@i:
   967                           	opt stack 0
   968  000008                     lcd_begin@dotsize:
   969                           	opt stack 0
   970  000008                     timer0_read_ps@prev:
   971                           	opt stack 0
   972  000008                     ___flpack@exp:
   973                           	opt stack 0
   974  000008                     frexp@eptr:
   975                           	opt stack 0
   976  000008                     ___lwmod@counter:
   977                           	opt stack 0
   978  000008                     _timer0_init$154:
   979                           	opt stack 0
   980  000008                     ___lwdiv@quotient:
   981                           	opt stack 0
   982  000008                     ___flge@ff2:
   983                           	opt stack 0
   984                           
   985                           ; 4 bytes @ 0x7
   986  000008                     	ds	1
   987  000009                     ??_frexp:
   988  000009                     ??_lcd_begin:
   989  000009                     lcd_gotoxy@col:
   990                           	opt stack 0
   991  000009                     lcd_puts@string:
   992                           	opt stack 0
   993  000009                     ___flpack@sign:
   994                           	opt stack 0
   995  000009                     timer0_read_ps@count:
   996                           	opt stack 0
   997  000009                     put_str@i:
   998                           	opt stack 0
   999                           
  1000                           ; 2 bytes @ 0x8
  1001  000009                     	ds	1
  1002  00000A                     ??___flpack:
  1003  00000A                     lcd_begin@lines:
  1004                           	opt stack 0
  1005  00000A                     ___lwdiv@counter:
  1006                           	opt stack 0
  1007  00000A                     _timer0_init$155:
  1008                           	opt stack 0
  1009  00000A                     lcd_gotoxy@row_offsets:
  1010                           	opt stack 0
  1011                           
  1012                           ; 4 bytes @ 0x9
  1013  00000A                     	ds	1
  1014  00000B                     put_str@s:
  1015                           	opt stack 0
  1016  00000B                     format_number@n:
  1017                           	opt stack 0
  1018                           
  1019                           ; 2 bytes @ 0xA
  1020  00000B                     	ds	1
  1021  00000C                     _timer0_init$156:
  1022                           	opt stack 0
  1023                           
  1024                           ; 2 bytes @ 0xB
  1025  00000C                     	ds	1
  1026  00000D                     format_number@base:
  1027                           	opt stack 0
  1028                           
  1029                           ; 1 bytes @ 0xC
  1030  00000D                     	ds	1
  1031  00000E                     ??_print_unit:
  1032  00000E                     ?___fldiv:
  1033                           	opt stack 0
  1034  00000E                     ?___awtofl:
  1035                           	opt stack 0
  1036  00000E                     ?___lltofl:
  1037                           	opt stack 0
  1038  00000E                     format_number@pad:
  1039                           	opt stack 0
  1040  00000E                     timer0_init@prescaler:
  1041                           	opt stack 0
  1042  00000E                     print_indicator@indicate:
  1043                           	opt stack 0
  1044  00000E                     ___awtofl@c:
  1045                           	opt stack 0
  1046  00000E                     ___fldiv@f1:
  1047                           	opt stack 0
  1048  00000E                     ___lltofl@c:
  1049                           	opt stack 0
  1050                           
  1051                           ; 4 bytes @ 0xD
  1052  00000E                     	ds	1
  1053  00000F                     ??_format_number:
  1054  00000F                     timer0_init@ps_mode:
  1055                           	opt stack 0
  1056                           
  1057                           ; 1 bytes @ 0xE
  1058  00000F                     	ds	2
  1059  000011                     format_number@buf:
  1060                           	opt stack 0
  1061                           
  1062                           ; 32 bytes @ 0x10
  1063  000011                     	ds	1
  1064  000012                     ___awtofl@sign:
  1065                           	opt stack 0
  1066  000012                     ___fldiv@f2:
  1067                           	opt stack 0
  1068                           
  1069                           ; 4 bytes @ 0x11
  1070  000012                     	ds	4
  1071  000016                     ___fldiv@f3:
  1072                           	opt stack 0
  1073                           
  1074                           ; 4 bytes @ 0x15
  1075  000016                     	ds	4
  1076  00001A                     ___fldiv@cntr:
  1077                           	opt stack 0
  1078                           
  1079                           ; 1 bytes @ 0x19
  1080  00001A                     	ds	1
  1081  00001B                     ___fldiv@exp:
  1082                           	opt stack 0
  1083                           
  1084                           ; 1 bytes @ 0x1A
  1085  00001B                     	ds	1
  1086  00001C                     ___fldiv@sign:
  1087                           	opt stack 0
  1088                           
  1089                           ; 1 bytes @ 0x1B
  1090  00001C                     	ds	1
  1091  00001D                     ?___flmul:
  1092                           	opt stack 0
  1093  00001D                     ___flmul@f1:
  1094                           	opt stack 0
  1095                           
  1096                           ; 4 bytes @ 0x1C
  1097  00001D                     	ds	4
  1098  000021                     ___flmul@f2:
  1099                           	opt stack 0
  1100                           
  1101                           ; 4 bytes @ 0x20
  1102  000021                     	ds	4
  1103  000025                     ___flmul@exp:
  1104                           	opt stack 0
  1105                           
  1106                           ; 1 bytes @ 0x24
  1107  000025                     	ds	1
  1108  000026                     ___flmul@f3_as_product:
  1109                           	opt stack 0
  1110                           
  1111                           ; 4 bytes @ 0x25
  1112  000026                     	ds	4
  1113  00002A                     ___flmul@cntr:
  1114                           	opt stack 0
  1115                           
  1116                           ; 1 bytes @ 0x29
  1117  00002A                     	ds	1
  1118  00002B                     ___flmul@sign:
  1119                           	opt stack 0
  1120                           
  1121                           ; 1 bytes @ 0x2A
  1122  00002B                     	ds	1
  1123  00002C                     ?___fladd:
  1124                           	opt stack 0
  1125  00002C                     ___fladd@f1:
  1126                           	opt stack 0
  1127                           
  1128                           ; 4 bytes @ 0x2B
  1129  00002C                     	ds	4
  1130  000030                     ___fladd@f2:
  1131                           	opt stack 0
  1132                           
  1133                           ; 4 bytes @ 0x2F
  1134  000030                     	ds	1
  1135  000031                     _format_number$68:
  1136                           	opt stack 0
  1137                           
  1138                           ; 2 bytes @ 0x30
  1139  000031                     	ds	2
  1140  000033                     format_number@padchar:
  1141                           	opt stack 0
  1142                           
  1143                           ; 1 bytes @ 0x32
  1144  000033                     	ds	1
  1145  000034                     ??___fladd:
  1146  000034                     format_number@di:
  1147                           	opt stack 0
  1148                           
  1149                           ; 1 bytes @ 0x33
  1150  000034                     	ds	1
  1151  000035                     format_number@i:
  1152                           	opt stack 0
  1153  000035                     ___fladd@sign:
  1154                           	opt stack 0
  1155                           
  1156                           ; 1 bytes @ 0x34
  1157  000035                     	ds	1
  1158  000036                     ?_measure_freq:
  1159                           	opt stack 0
  1160  000036                     ___fladd@exp2:
  1161                           	opt stack 0
  1162  000036                     print_reading@measurement:
  1163                           	opt stack 0
  1164  000036                     format_xint32@x:
  1165                           	opt stack 0
  1166                           
  1167                           ; 4 bytes @ 0x35
  1168  000036                     	ds	1
  1169  000037                     ___fladd@exp1:
  1170                           	opt stack 0
  1171                           
  1172                           ; 1 bytes @ 0x36
  1173  000037                     	ds	1
  1174  000038                     ??_measure_freq:
  1175  000038                     ?___flsub:
  1176                           	opt stack 0
  1177  000038                     ?_eval_poly:
  1178                           	opt stack 0
  1179  000038                     _print_reading$1117:
  1180                           	opt stack 0
  1181  000038                     ___flsub@f1:
  1182                           	opt stack 0
  1183  000038                     eval_poly@x:
  1184                           	opt stack 0
  1185                           
  1186                           ; 4 bytes @ 0x37
  1187  000038                     	ds	1
  1188  000039                     measure_freq@count:
  1189                           	opt stack 0
  1190                           
  1191                           ; 2 bytes @ 0x38
  1192  000039                     	ds	1
  1193  00003A                     _print_reading$1118:
  1194                           	opt stack 0
  1195                           
  1196                           ; 2 bytes @ 0x39
  1197  00003A                     	ds	1
  1198  00003B                     ?___lwtofl:
  1199                           	opt stack 0
  1200  00003B                     ___lwtofl@c:
  1201                           	opt stack 0
  1202                           
  1203                           ; 2 bytes @ 0x3A
  1204  00003B                     	ds	1
  1205  00003C                     eval_poly@d:
  1206                           	opt stack 0
  1207  00003C                     ___flsub@f2:
  1208                           	opt stack 0
  1209                           
  1210                           ; 4 bytes @ 0x3B
  1211  00003C                     	ds	1
  1212  00003D                     eval_poly@n:
  1213                           	opt stack 0
  1214                           
  1215                           ; 2 bytes @ 0x3C
  1216  00003D                     	ds	2
  1217  00003F                     ??_eval_poly:
  1218  00003F                     calibrate@i:
  1219                           	opt stack 0
  1220                           
  1221                           ; 1 bytes @ 0x3E
  1222  00003F                     	ds	1
  1223  000040                     eval_poly@res:
  1224                           	opt stack 0
  1225                           
  1226                           ; 4 bytes @ 0x3F
  1227  000040                     	ds	4
  1228  000044                     ?_ldexp:
  1229                           	opt stack 0
  1230  000044                     ?_log:
  1231                           	opt stack 0
  1232  000044                     ldexp@value:
  1233                           	opt stack 0
  1234  000044                     log@x:
  1235                           	opt stack 0
  1236                           
  1237                           ; 4 bytes @ 0x43
  1238  000044                     	ds	4
  1239  000048                     ldexp@newexp:
  1240                           	opt stack 0
  1241  000048                     log@exponent:
  1242                           	opt stack 0
  1243                           
  1244                           ; 2 bytes @ 0x47
  1245  000048                     	ds	2
  1246  00004A                     ??_ldexp:
  1247  00004A                     ?_log10:
  1248                           	opt stack 0
  1249  00004A                     log10@x:
  1250                           	opt stack 0
  1251                           
  1252                           ; 4 bytes @ 0x49
  1253  00004A                     	ds	4
  1254  00004E                     _log10$1119:
  1255                           	opt stack 0
  1256                           
  1257                           ; 4 bytes @ 0x4D
  1258  00004E                     	ds	4
  1259  000052                     ?___fltol:
  1260                           	opt stack 0
  1261  000052                     ___fltol@f1:
  1262                           	opt stack 0
  1263                           
  1264                           ; 4 bytes @ 0x51
  1265  000052                     	ds	4
  1266  000056                     ??___fltol:
  1267                           
  1268                           ; 0 bytes @ 0x55
  1269  000056                     	ds	4
  1270  00005A                     tblptru	equ	0xFF8
  1271                           tblptrh	equ	0xFF7
  1272                           tblptrl	equ	0xFF6
  1273                           tablat	equ	0xFF5
  1274                           prodl	equ	0xFF3
  1275                           intcon	equ	0xFF2
  1276                           intcon2	equ	0xFF1
  1277                           postinc0	equ	0xFEE
  1278                           wreg	equ	0xFE8
  1279                           postdec1	equ	0xFE5
  1280                           fsr1l	equ	0xFE1
  1281                           indf2	equ	0xFDF
  1282                           postinc2	equ	0xFDE
  1283                           postdec2	equ	0xFDD
  1284                           fsr2h	equ	0xFDA
  1285                           fsr2l	equ	0xFD9
  1286                           status	equ	0xFD8
  1287                           
  1288                           ; 0 bytes @ 0x59
  1289 ;;
  1290 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1291 ;;
  1292 ;; *************** function _main *****************
  1293 ;; Defined at:
  1294 ;;		line 113 in file "../../../LC-meter.c"
  1295 ;; Parameters:    Size  Location     Type
  1296 ;;		None
  1297 ;; Auto vars:     Size  Location     Type
  1298 ;;  new_mode        1   89[BANK0 ] unsigned char 
  1299 ;; Return value:  Size  Location     Type
  1300 ;;		None               void
  1301 ;; Registers used:
  1302 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1303 ;; Tracked objects:
  1304 ;;		On entry : 0/0
  1305 ;;		On exit  : 0/0
  1306 ;;		Unchanged: 0/0
  1307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1308 ;;      Params:         0       0       0       0       0       0       0       0       0
  1309 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1310 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1311 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1312 ;;Total ram usage:        2 bytes
  1313 ;; Hardware stack levels required when called:    8
  1314 ;; This function calls:
  1315 ;;		_calibrate
  1316 ;;		_delay10ms
  1317 ;;		_format_double
  1318 ;;		_lcd_begin
  1319 ;;		_lcd_clear
  1320 ;;		_lcd_gotoxy
  1321 ;;		_lcd_init
  1322 ;;		_lcd_puts
  1323 ;;		_measure_capacitance
  1324 ;;		_measure_inductance
  1325 ;;		_print_indicator
  1326 ;;		_ser_init
  1327 ;;		_ser_puts
  1328 ;;		_timer0_init
  1329 ;;		_timer2_init
  1330 ;; This function is called by:
  1331 ;;		Startup code after reset
  1332 ;; This function uses a non-reentrant model
  1333 ;;
  1334                           
  1335                           	psect	text0
  1336  001934                     __ptext0:
  1337                           	opt stack 0
  1338  001934                     _main:
  1339                           	opt stack 23
  1340                           
  1341                           ;LC-meter.c: 114: bres = msecpart = msecs = seconds = 0;
  1342                           
  1343                           ;incstack = 0
  1344  001934  0100               	movlb	0	; () banked
  1345  001936  6BC6               	clrf	_seconds& (0+255),b	;volatile
  1346  001938  6BC7               	clrf	(_seconds+1)& (0+255),b	;volatile
  1347  00193A  6BC8               	clrf	(_seconds+2)& (0+255),b	;volatile
  1348  00193C  6BC9               	clrf	(_seconds+3)& (0+255),b	;volatile
  1349  00193E  C0C6  F0C2         	movff	_seconds,_msecs	;volatile
  1350  001942  C0C7  F0C3         	movff	_seconds+1,_msecs+1	;volatile
  1351  001946  C0C8  F0C4         	movff	_seconds+2,_msecs+2	;volatile
  1352  00194A  C0C9  F0C5         	movff	_seconds+3,_msecs+3	;volatile
  1353  00194E  C0C2  F0F1         	movff	_msecs,_msecpart	;volatile
  1354  001952  C0C3  F0F2         	movff	_msecs+1,_msecpart+1	;volatile
  1355  001956  C0F1  F0EF         	movff	_msecpart,_bres	;volatile
  1356  00195A  C0F2  F0F0         	movff	_msecpart+1,_bres+1	;volatile
  1357                           
  1358                           ; BSR set to: 0
  1359                           ;LC-meter.c: 115: mode = -1;
  1360  00195E  69F7               	setf	_mode& (0+255),b
  1361                           
  1362                           ;LC-meter.c: 117: CCal = 1000;
  1363  001960  6BEB               	clrf	_CCal& (0+255),b
  1364  001962  6BEC               	clrf	(_CCal+1)& (0+255),b
  1365  001964  0E7A               	movlw	122
  1366  001966  6FED               	movwf	(_CCal+2)& (0+255),b
  1367  001968  0E44               	movlw	68
  1368  00196A  6FEE               	movwf	(_CCal+3)& (0+255),b
  1369                           
  1370                           ;LC-meter.c: 127: TRISA = 0b11001111;
  1371  00196C  0ECF               	movlw	207
  1372  00196E  6E92               	movwf	3986,c	;volatile
  1373                           
  1374                           ; BSR set to: 0
  1375                           ;LC-meter.c: 130: timer0_init(0b1000 | 0x20 | 0x40);
  1376  001970  0E68               	movlw	104
  1377  001972  EC59  F011         	call	_timer0_init
  1378                           
  1379                           ; BSR set to: 0
  1380                           ;LC-meter.c: 137: INTCON2 &= ~0b10000000;
  1381  001976  9EF1               	bcf	intcon2,7,c	;volatile
  1382                           
  1383                           ; BSR set to: 0
  1384                           ;LC-meter.c: 145: TRISC = 0b10111011;
  1385  001978  0EBB               	movlw	187
  1386  00197A  6E94               	movwf	3988,c	;volatile
  1387                           
  1388                           ; BSR set to: 0
  1389                           ;LC-meter.c: 149: TRISC &= ~0b00000100;
  1390  00197C  9494               	bcf	3988,2,c	;volatile
  1391                           
  1392                           ; BSR set to: 0
  1393                           ;LC-meter.c: 150: LATC &= ~0b00000100; LATC |= (!!(1)) << 2;;
  1394  00197E  948B               	bcf	3979,2,c	;volatile
  1395                           
  1396                           ; BSR set to: 0
  1397  001980  848B               	bsf	3979,2,c	;volatile
  1398                           
  1399                           ;LC-meter.c: 152: timer2_init(0b000 | 0x80);
  1400  001982  0E80               	movlw	128
  1401  001984  ECAC  F013         	call	_timer2_init
  1402                           
  1403                           ;LC-meter.c: 160: lcd_init(1);
  1404  001988  0E01               	movlw	1
  1405  00198A  ECDA  F013         	call	_lcd_init
  1406                           
  1407                           ;LC-meter.c: 161: lcd_begin(2, 1);
  1408  00198E  0E01               	movlw	1
  1409  001990  6E08               	movwf	lcd_begin@dotsize,c
  1410  001992  0E02               	movlw	2
  1411  001994  EC8B  F00E         	call	_lcd_begin
  1412                           
  1413                           ;LC-meter.c: 164: TRISC |= (1 << 4);
  1414  001998  8894               	bsf	3988,4,c	;volatile
  1415                           
  1416                           ;LC-meter.c: 165: TRISC &= ~(1 << 5);
  1417  00199A  9A94               	bcf	3988,5,c	;volatile
  1418                           
  1419                           ;LC-meter.c: 167: LATC &= ~(1 << 5);
  1420  00199C  9A8B               	bcf	3979,5,c	;volatile
  1421                           
  1422                           ;LC-meter.c: 168: delay10ms(50);
  1423  00199E  0E32               	movlw	50
  1424  0019A0  ECFB  F014         	call	_delay10ms
  1425                           
  1426                           ;LC-meter.c: 169: LATC |= (1 << 5);
  1427  0019A4  8A8B               	bsf	3979,5,c	;volatile
  1428                           
  1429                           ;LC-meter.c: 170: delay10ms(50);
  1430  0019A6  0E32               	movlw	50
  1431  0019A8  ECFB  F014         	call	_delay10ms
  1432                           
  1433                           ;LC-meter.c: 171: LATC &= ~(1 << 5);
  1434  0019AC  9A8B               	bcf	3979,5,c	;volatile
  1435                           
  1436                           ;LC-meter.c: 172: delay10ms(50);
  1437  0019AE  0E32               	movlw	50
  1438  0019B0  ECFB  F014         	call	_delay10ms
  1439                           
  1440                           ;LC-meter.c: 173: LATC |= (1 << 5);
  1441  0019B4  8A8B               	bsf	3979,5,c	;volatile
  1442                           
  1443                           ;LC-meter.c: 174: delay10ms(50);
  1444  0019B6  0E32               	movlw	50
  1445  0019B8  ECFB  F014         	call	_delay10ms
  1446                           
  1447                           ;LC-meter.c: 175: LATC &= ~(1 << 5);
  1448  0019BC  9A8B               	bcf	3979,5,c	;volatile
  1449                           
  1450                           ;LC-meter.c: 178: ser_init();
  1451  0019BE  EC6B  F014         	call	_ser_init	;wreg free
  1452                           
  1453                           ; BSR set to: 0
  1454                           ;LC-meter.c: 185: INTCON |= 0xc0;
  1455  0019C2  0EC0               	movlw	192
  1456  0019C4  12F2               	iorwf	intcon,f,c	;volatile
  1457                           
  1458                           ; BSR set to: 0
  1459                           ;LC-meter.c: 191: lcd_gotoxy(0, 0);
  1460  0019C6  0E00               	movlw	0
  1461  0019C8  6A08               	clrf	lcd_gotoxy@row,c
  1462  0019CA  EC77  F013         	call	_lcd_gotoxy
  1463                           
  1464                           ;LC-meter.c: 193: lcd_puts("LC-meter ");
  1465  0019CE  0E95               	movlw	STR_29& (0+255)
  1466  0019D0  ECF0  F013         	call	_lcd_puts
  1467                           
  1468                           ;LC-meter.c: 194: format_double( CCal);
  1469  0019D4  C0EB  F091         	movff	_CCal,format_double@num
  1470  0019D8  C0EC  F092         	movff	_CCal+1,format_double@num+1
  1471  0019DC  C0ED  F093         	movff	_CCal+2,format_double@num+2
  1472  0019E0  C0EE  F094         	movff	_CCal+3,format_double@num+3
  1473  0019E4  EC95  F00A         	call	_format_double	;wreg free
  1474                           
  1475                           ;LC-meter.c: 200: delay10ms(200);
  1476  0019E8  0EC8               	movlw	200
  1477  0019EA  ECFB  F014         	call	_delay10ms
  1478                           
  1479                           ;LC-meter.c: 203: calibrate();
  1480  0019EE  EC1A  F00E         	call	_calibrate	;wreg free
  1481                           
  1482                           ;LC-meter.c: 206: lcd_clear();
  1483  0019F2  ECD8  F014         	call	_lcd_clear	;wreg free
  1484  0019F6                     l4238:
  1485  0019F6  0E01               	movlw	1
  1486                           
  1487                           ;LC-meter.c: 215: char new_mode = (!!(PORTC & 0b10000));
  1488  0019F8  A882               	btfss	3970,4,c	;volatile
  1489  0019FA  0E00               	movlw	0
  1490  0019FC  0100               	movlb	0	; () banked
  1491  0019FE  6FB9               	movwf	main@new_mode& (0+255),b
  1492                           
  1493                           ; BSR set to: 0
  1494                           ;LC-meter.c: 217: if(new_mode != mode) {
  1495  001A00  19F7               	xorwf	_mode& (0+255),w,b
  1496  001A02  E00D               	bz	l4254
  1497                           
  1498                           ; BSR set to: 0
  1499                           ;LC-meter.c: 218: ser_puts(mode ? "- C (Unit: F) -" : "- L (Unit: H) -");
  1500  001A04  51F7               	movf	_mode& (0+255),w,b
  1501                           
  1502                           ; BSR set to: 0
  1503  001A06  0E5D               	movlw	low STR_31
  1504  001A08  A4D8               	btfss	status,2,c
  1505                           
  1506                           ; BSR set to: 0
  1507  001A0A  0E4D               	movlw	low STR_30
  1508  001A0C  6FB8               	movwf	_main$403& (0+255),b
  1509                           
  1510                           ; BSR set to: 0
  1511  001A0E  51B8               	movf	_main$403& (0+255),w,b
  1512  001A10  EC9F  F014         	call	_ser_puts
  1513                           
  1514                           ;LC-meter.c: 219: ser_puts("\r\n");
  1515  001A14  0EF8               	movlw	STR_2& (0+255)
  1516  001A16  EC9F  F014         	call	_ser_puts
  1517                           
  1518                           ;LC-meter.c: 221: mode = new_mode;
  1519  001A1A  C0B9  F0F7         	movff	main@new_mode,_mode
  1520  001A1E                     l4254:
  1521                           
  1522                           ;LC-meter.c: 222: }
  1523                           ;LC-meter.c: 224: if(mode)
  1524  001A1E  0100               	movlb	0	; () banked
  1525  001A20  51F7               	movf	_mode& (0+255),w,b
  1526  001A22  E003               	bz	l4258
  1527                           
  1528                           ; BSR set to: 0
  1529                           ;LC-meter.c: 225: measure_capacitance();
  1530  001A24  ECAF  F006         	call	_measure_capacitance	;wreg free
  1531  001A28  D002               	goto	l557
  1532  001A2A                     l4258:
  1533                           
  1534                           ; BSR set to: 0
  1535                           ;LC-meter.c: 226: else
  1536                           ;LC-meter.c: 227: measure_inductance();
  1537  001A2A  EC7E  F004         	call	_measure_inductance	;wreg free
  1538  001A2E                     l557:
  1539                           
  1540                           ;LC-meter.c: 229: print_indicator(1);
  1541  001A2E  0E01               	movlw	1
  1542  001A30  ECBD  F014         	call	_print_indicator
  1543                           
  1544                           ;LC-meter.c: 230: delay10ms(30);
  1545  001A34  0E1E               	movlw	30
  1546  001A36  ECFB  F014         	call	_delay10ms
  1547                           
  1548                           ;LC-meter.c: 232: print_indicator(0);
  1549  001A3A  0E00               	movlw	0
  1550  001A3C  ECBD  F014         	call	_print_indicator
  1551                           
  1552                           ;LC-meter.c: 233: delay10ms(20);
  1553  001A40  0E14               	movlw	20
  1554  001A42  ECFB  F014         	call	_delay10ms
  1555                           
  1556                           ;LC-meter.c: 234: }
  1557  001A46  D7D7               	goto	l4238
  1558  001A48                     __end_of_main:
  1559                           	opt stack 0
  1560                           tblptru	equ	0xFF8
  1561                           tblptrh	equ	0xFF7
  1562                           tblptrl	equ	0xFF6
  1563                           tablat	equ	0xFF5
  1564                           prodl	equ	0xFF3
  1565                           intcon	equ	0xFF2
  1566                           intcon2	equ	0xFF1
  1567                           postinc0	equ	0xFEE
  1568                           wreg	equ	0xFE8
  1569                           postdec1	equ	0xFE5
  1570                           fsr1l	equ	0xFE1
  1571                           indf2	equ	0xFDF
  1572                           postinc2	equ	0xFDE
  1573                           postdec2	equ	0xFDD
  1574                           fsr2h	equ	0xFDA
  1575                           fsr2l	equ	0xFD9
  1576                           status	equ	0xFD8
  1577                           
  1578 ;; *************** function _timer2_init *****************
  1579 ;; Defined at:
  1580 ;;		line 130 in file "../../../lib/timer.c"
  1581 ;; Parameters:    Size  Location     Type
  1582 ;;  ps_mode         1    wreg     unsigned char 
  1583 ;; Auto vars:     Size  Location     Type
  1584 ;;  ps_mode         1    6[COMRAM] unsigned char 
  1585 ;;  postscaler      1    0        unsigned char 
  1586 ;;  ps              1    4[COMRAM] unsigned char 
  1587 ;; Return value:  Size  Location     Type
  1588 ;;		None               void
  1589 ;; Registers used:
  1590 ;;		wreg, status,2, status,0
  1591 ;; Tracked objects:
  1592 ;;		On entry : F/0
  1593 ;;		On exit  : 0/0
  1594 ;;		Unchanged: 0/0
  1595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1596 ;;      Params:         0       0       0       0       0       0       0       0       0
  1597 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1598 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1599 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1600 ;;Total ram usage:        4 bytes
  1601 ;; Hardware stack levels used:    1
  1602 ;; Hardware stack levels required when called:    1
  1603 ;; This function calls:
  1604 ;;		Nothing
  1605 ;; This function is called by:
  1606 ;;		_main
  1607 ;; This function uses a non-reentrant model
  1608 ;;
  1609                           
  1610                           	psect	text1
  1611  002758                     __ptext1:
  1612                           	opt stack 0
  1613  002758                     _timer2_init:
  1614                           	opt stack 29
  1615                           
  1616                           ;incstack = 0
  1617                           ;timer2_init@ps_mode stored from wreg
  1618  002758  6E07               	movwf	timer2_init@ps_mode,c
  1619                           
  1620                           ; BSR set to: 0
  1621                           ;timer.c: 131: uint8_t ps = ps_mode & 0b1111;
  1622  00275A  5007               	movf	timer2_init@ps_mode,w,c
  1623  00275C  0B0F               	andlw	15
  1624  00275E  6E05               	movwf	timer2_init@ps,c
  1625                           
  1626                           ; BSR set to: 0
  1627                           ;timer.c: 135: T2CON &= ~0b01111111;
  1628  002760  0E80               	movlw	128
  1629  002762  16BA               	andwf	4026,f,c	;volatile
  1630                           
  1631                           ;timer.c: 137: T2CON |= (postscaler & 0b1111) << 3;
  1632  002764  50BA               	movf	4026,w,c	;volatile
  1633                           
  1634                           ;timer.c: 138: T2CON |= (ps & 0b11);
  1635  002766  5005               	movf	timer2_init@ps,w,c
  1636  002768  0B03               	andlw	3
  1637  00276A  12BA               	iorwf	4026,f,c	;volatile
  1638                           
  1639                           ; BSR set to: 0
  1640                           ;timer.c: 140: TMR2 = 0;
  1641  00276C  6ABC               	clrf	4028,c	;volatile
  1642                           
  1643                           ; BSR set to: 0
  1644                           ;timer.c: 142: T2CON |= 0b100;
  1645  00276E  84BA               	bsf	4026,2,c	;volatile
  1646                           
  1647                           ; BSR set to: 0
  1648                           ;timer.c: 145: PIR1 &= ~0b10;
  1649  002770  929E               	bcf	3998,1,c	;volatile
  1650                           
  1651                           ;timer.c: 146: PIE1 = (!!(ps_mode & 0x80)) << 1;
  1652  002772  AE07               	btfss	timer2_init@ps_mode,7,c
  1653  002774  D003               	goto	u2480
  1654  002776  6A04               	clrf	??_timer2_init& (0+255),c
  1655  002778  2A04               	incf	??_timer2_init& (0+255),f,c
  1656  00277A  D001               	goto	u2498
  1657  00277C                     u2480:
  1658  00277C  6A04               	clrf	??_timer2_init& (0+255),c
  1659  00277E                     u2498:
  1660  00277E  90D8               	bcf	status,0,c
  1661  002780  3404               	rlcf	??_timer2_init,w,c
  1662  002782  6E9D               	movwf	3997,c	;volatile
  1663  002784  0012               	return		;funcret
  1664  002786                     __end_of_timer2_init:
  1665                           	opt stack 0
  1666                           tblptru	equ	0xFF8
  1667                           tblptrh	equ	0xFF7
  1668                           tblptrl	equ	0xFF6
  1669                           tablat	equ	0xFF5
  1670                           prodl	equ	0xFF3
  1671                           intcon	equ	0xFF2
  1672                           intcon2	equ	0xFF1
  1673                           postinc0	equ	0xFEE
  1674                           wreg	equ	0xFE8
  1675                           postdec1	equ	0xFE5
  1676                           fsr1l	equ	0xFE1
  1677                           indf2	equ	0xFDF
  1678                           postinc2	equ	0xFDE
  1679                           postdec2	equ	0xFDD
  1680                           fsr2h	equ	0xFDA
  1681                           fsr2l	equ	0xFD9
  1682                           status	equ	0xFD8
  1683                           
  1684 ;; *************** function _timer0_init *****************
  1685 ;; Defined at:
  1686 ;;		line 27 in file "../../../lib/timer.c"
  1687 ;; Parameters:    Size  Location     Type
  1688 ;;  ps_mode         1    wreg     unsigned char 
  1689 ;; Auto vars:     Size  Location     Type
  1690 ;;  ps_mode         1   14[COMRAM] unsigned char 
  1691 ;;  prescaler       1   13[COMRAM] unsigned char 
  1692 ;; Return value:  Size  Location     Type
  1693 ;;		None               void
  1694 ;; Registers used:
  1695 ;;		wreg, status,2, status,0
  1696 ;; Tracked objects:
  1697 ;;		On entry : F/0
  1698 ;;		On exit  : F/0
  1699 ;;		Unchanged: F/0
  1700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1701 ;;      Params:         0       0       0       0       0       0       0       0       0
  1702 ;;      Locals:        12       0       0       0       0       0       0       0       0
  1703 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1704 ;;      Totals:        12       0       0       0       0       0       0       0       0
  1705 ;;Total ram usage:       12 bytes
  1706 ;; Hardware stack levels used:    1
  1707 ;; Hardware stack levels required when called:    1
  1708 ;; This function calls:
  1709 ;;		Nothing
  1710 ;; This function is called by:
  1711 ;;		_main
  1712 ;; This function uses a non-reentrant model
  1713 ;;
  1714                           
  1715                           	psect	text2
  1716  0022B2                     __ptext2:
  1717                           	opt stack 0
  1718  0022B2                     _timer0_init:
  1719                           	opt stack 29
  1720                           
  1721                           ;incstack = 0
  1722                           ;timer0_init@ps_mode stored from wreg
  1723  0022B2  6E0F               	movwf	timer0_init@ps_mode,c
  1724                           
  1725                           ; BSR set to: 0
  1726                           ;timer.c: 28: uint8_t prescaler = ps_mode & 0b1111;
  1727  0022B4  500F               	movf	timer0_init@ps_mode,w,c
  1728  0022B6  0B0F               	andlw	15
  1729  0022B8  6E0E               	movwf	timer0_init@prescaler,c
  1730                           
  1731                           ; BSR set to: 0
  1732                           ;timer.c: 30: TMR0 = 0;
  1733  0022BA  6AD6               	clrf	4054,c	;volatile
  1734  0022BC  6AD7               	clrf	4055,c	;volatile
  1735                           
  1736                           ; BSR set to: 0
  1737                           ;timer.c: 33: T0CON |= (!!(ps_mode & 0x20)) ? 0x20 : 0x00;
  1738  0022BE  BA0F               	btfsc	timer0_init@ps_mode,5,c
  1739  0022C0  D003               	goto	l3256
  1740                           
  1741                           ; BSR set to: 0
  1742  0022C2  6A04               	clrf	_timer0_init$152,c
  1743  0022C4  6A05               	clrf	_timer0_init$152+1,c
  1744  0022C6  D003               	goto	l3258
  1745  0022C8                     l3256:
  1746                           
  1747                           ; BSR set to: 0
  1748  0022C8  6A05               	clrf	_timer0_init$152+1,c
  1749  0022CA  0E20               	movlw	32
  1750  0022CC  6E04               	movwf	_timer0_init$152,c
  1751  0022CE                     l3258:
  1752                           
  1753                           ; BSR set to: 0
  1754  0022CE  5004               	movf	_timer0_init$152,w,c
  1755  0022D0  12D5               	iorwf	4053,f,c	;volatile
  1756                           
  1757                           ; BSR set to: 0
  1758                           ;timer.c: 36: T0CON |= (!!(ps_mode & 0x10)) ? 0x10 : 0x00;
  1759  0022D2  B80F               	btfsc	timer0_init@ps_mode,4,c
  1760  0022D4  D003               	goto	l3264
  1761                           
  1762                           ; BSR set to: 0
  1763  0022D6  6A06               	clrf	_timer0_init$153,c
  1764  0022D8  6A07               	clrf	_timer0_init$153+1,c
  1765  0022DA  D003               	goto	l3266
  1766  0022DC                     l3264:
  1767                           
  1768                           ; BSR set to: 0
  1769  0022DC  6A07               	clrf	_timer0_init$153+1,c
  1770  0022DE  0E10               	movlw	16
  1771  0022E0  6E06               	movwf	_timer0_init$153,c
  1772  0022E2                     l3266:
  1773                           
  1774                           ; BSR set to: 0
  1775  0022E2  5006               	movf	_timer0_init$153,w,c
  1776  0022E4  12D5               	iorwf	4053,f,c	;volatile
  1777                           
  1778                           ; BSR set to: 0
  1779                           ;timer.c: 39: T0CON |= (!!(ps_mode & 0x40)) ? 0x40 : 0x00;
  1780  0022E6  BC0F               	btfsc	timer0_init@ps_mode,6,c
  1781  0022E8  D003               	goto	l3272
  1782                           
  1783                           ; BSR set to: 0
  1784  0022EA  6A08               	clrf	_timer0_init$154,c
  1785  0022EC  6A09               	clrf	_timer0_init$154+1,c
  1786  0022EE  D003               	goto	l3274
  1787  0022F0                     l3272:
  1788                           
  1789                           ; BSR set to: 0
  1790  0022F0  6A09               	clrf	_timer0_init$154+1,c
  1791  0022F2  0E40               	movlw	64
  1792  0022F4  6E08               	movwf	_timer0_init$154,c
  1793  0022F6                     l3274:
  1794                           
  1795                           ; BSR set to: 0
  1796  0022F6  5008               	movf	_timer0_init$154,w,c
  1797  0022F8  12D5               	iorwf	4053,f,c	;volatile
  1798                           
  1799                           ; BSR set to: 0
  1800                           ;timer.c: 44: T0CON &= (!!prescaler) ? ~0x08 : ~0x00;
  1801  0022FA  500E               	movf	timer0_init@prescaler,w,c
  1802  0022FC  E103               	bnz	l3280
  1803                           
  1804                           ; BSR set to: 0
  1805  0022FE  680A               	setf	_timer0_init$155,c
  1806  002300  680B               	setf	_timer0_init$155+1,c
  1807  002302  D003               	goto	l3282
  1808  002304                     l3280:
  1809                           
  1810                           ; BSR set to: 0
  1811  002304  680B               	setf	_timer0_init$155+1,c
  1812  002306  0EF7               	movlw	247
  1813  002308  6E0A               	movwf	_timer0_init$155,c
  1814  00230A                     l3282:
  1815                           
  1816                           ; BSR set to: 0
  1817  00230A  500A               	movf	_timer0_init$155,w,c
  1818  00230C  16D5               	andwf	4053,f,c	;volatile
  1819                           
  1820                           ; BSR set to: 0
  1821                           ;timer.c: 46: T0CON &= ~0b111;
  1822  00230E  0EF8               	movlw	248
  1823  002310  16D5               	andwf	4053,f,c	;volatile
  1824                           
  1825                           ;timer.c: 48: if(prescaler > 0) {
  1826  002312  500E               	movf	timer0_init@prescaler,w,c
  1827  002314  E003               	bz	l3288
  1828                           
  1829                           ; BSR set to: 0
  1830                           ;timer.c: 49: T0CON |= (prescaler - 1) & 0b111;
  1831  002316  040E               	decf	timer0_init@prescaler,w,c
  1832  002318  0B07               	andlw	7
  1833  00231A  12D5               	iorwf	4053,f,c	;volatile
  1834  00231C                     l3288:
  1835                           
  1836                           ; BSR set to: 0
  1837                           ;timer.c: 55: }
  1838                           ;timer.c: 59: INTCON &= ~0x40;
  1839  00231C  9CF2               	bcf	intcon,6,c	;volatile
  1840                           
  1841                           ; BSR set to: 0
  1842                           ;timer.c: 60: INTCON |= (!!(ps_mode & 0x80)) ? 0x20 : 0x00;
  1843  00231E  BE0F               	btfsc	timer0_init@ps_mode,7,c
  1844  002320  D003               	goto	l3294
  1845                           
  1846                           ; BSR set to: 0
  1847  002322  6A0C               	clrf	_timer0_init$156,c
  1848  002324  6A0D               	clrf	_timer0_init$156+1,c
  1849  002326  D003               	goto	l3296
  1850  002328                     l3294:
  1851                           
  1852                           ; BSR set to: 0
  1853  002328  6A0D               	clrf	_timer0_init$156+1,c
  1854  00232A  0E20               	movlw	32
  1855  00232C  6E0C               	movwf	_timer0_init$156,c
  1856  00232E                     l3296:
  1857                           
  1858                           ; BSR set to: 0
  1859  00232E  500C               	movf	_timer0_init$156,w,c
  1860  002330  12F2               	iorwf	intcon,f,c	;volatile
  1861                           
  1862                           ; BSR set to: 0
  1863  002332  0012               	return		;funcret
  1864  002334                     __end_of_timer0_init:
  1865                           	opt stack 0
  1866                           tblptru	equ	0xFF8
  1867                           tblptrh	equ	0xFF7
  1868                           tblptrl	equ	0xFF6
  1869                           tablat	equ	0xFF5
  1870                           prodl	equ	0xFF3
  1871                           intcon	equ	0xFF2
  1872                           intcon2	equ	0xFF1
  1873                           postinc0	equ	0xFEE
  1874                           wreg	equ	0xFE8
  1875                           postdec1	equ	0xFE5
  1876                           fsr1l	equ	0xFE1
  1877                           indf2	equ	0xFDF
  1878                           postinc2	equ	0xFDE
  1879                           postdec2	equ	0xFDD
  1880                           fsr2h	equ	0xFDA
  1881                           fsr2l	equ	0xFD9
  1882                           status	equ	0xFD8
  1883                           
  1884 ;; *************** function _ser_init *****************
  1885 ;; Defined at:
  1886 ;;		line 98 in file "../../../lib/ser.c"
  1887 ;; Parameters:    Size  Location     Type
  1888 ;;		None
  1889 ;; Auto vars:     Size  Location     Type
  1890 ;;		None
  1891 ;; Return value:  Size  Location     Type
  1892 ;;		None               void
  1893 ;; Registers used:
  1894 ;;		wreg, status,2, status,0
  1895 ;; Tracked objects:
  1896 ;;		On entry : 0/0
  1897 ;;		On exit  : F/0
  1898 ;;		Unchanged: 0/0
  1899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1900 ;;      Params:         0       0       0       0       0       0       0       0       0
  1901 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1902 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1903 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1904 ;;Total ram usage:        0 bytes
  1905 ;; Hardware stack levels used:    1
  1906 ;; Hardware stack levels required when called:    1
  1907 ;; This function calls:
  1908 ;;		Nothing
  1909 ;; This function is called by:
  1910 ;;		_main
  1911 ;; This function uses a non-reentrant model
  1912 ;;
  1913                           
  1914                           	psect	text3
  1915  0028D6                     __ptext3:
  1916                           	opt stack 0
  1917  0028D6                     _ser_init:
  1918                           	opt stack 29
  1919                           
  1920                           ;ser.c: 99: TRISC &= ~0x40;
  1921                           
  1922                           ; BSR set to: 0
  1923                           ;incstack = 0
  1924  0028D6  9C94               	bcf	3988,6,c	;volatile
  1925                           
  1926                           ;ser.c: 101: TRISC |= 0x80;
  1927  0028D8  8E94               	bsf	3988,7,c	;volatile
  1928                           
  1929                           ;ser.c: 103: BRGH = 1;
  1930  0028DA  84AC               	bsf	4012,2,c	;volatile
  1931                           
  1932                           ;ser.c: 109: SPBRG = ser_brg;
  1933  0028DC  0E1F               	movlw	31
  1934  0028DE  6EAF               	movwf	4015,c	;volatile
  1935                           
  1936                           ;ser.c: 112: TX9 = 0;
  1937  0028E0  9CAC               	bcf	4012,6,c	;volatile
  1938                           
  1939                           ;ser.c: 113: RX9 = 0;
  1940  0028E2  9CAB               	bcf	4011,6,c	;volatile
  1941                           
  1942                           ;ser.c: 115: SYNC = 0;
  1943  0028E4  98AC               	bcf	4012,4,c	;volatile
  1944                           
  1945                           ;ser.c: 116: SPEN = 1;
  1946  0028E6  8EAB               	bsf	4011,7,c	;volatile
  1947                           
  1948                           ;ser.c: 117: CREN = 1;
  1949  0028E8  88AB               	bsf	4011,4,c	;volatile
  1950                           
  1951                           ;ser.c: 118: TXIE = 0;
  1952  0028EA  989D               	bcf	3997,4,c	;volatile
  1953                           
  1954                           ;ser.c: 120: TXEN = 1;
  1955  0028EC  8AAC               	bsf	4012,5,c	;volatile
  1956                           
  1957                           ;ser.c: 121: PEIE = 1;
  1958  0028EE  8CF2               	bsf	intcon,6,c	;volatile
  1959                           
  1960                           ;ser.c: 123: rxiptr = rxoptr = txiptr = txoptr = 0;
  1961  0028F0  6A5C               	clrf	_txoptr,c	;volatile
  1962  0028F2  6A5B               	clrf	_txiptr,c	;volatile
  1963  0028F4  0100               	movlb	0	; () banked
  1964  0028F6  6BD4               	clrf	_rxoptr& (0+255),b	;volatile
  1965  0028F8  6BD3               	clrf	_rxiptr& (0+255),b	;volatile
  1966                           
  1967                           ; BSR set to: 0
  1968  0028FA  0012               	return		;funcret
  1969  0028FC                     __end_of_ser_init:
  1970                           	opt stack 0
  1971                           tblptru	equ	0xFF8
  1972                           tblptrh	equ	0xFF7
  1973                           tblptrl	equ	0xFF6
  1974                           tablat	equ	0xFF5
  1975                           prodl	equ	0xFF3
  1976                           intcon	equ	0xFF2
  1977                           intcon2	equ	0xFF1
  1978                           postinc0	equ	0xFEE
  1979                           wreg	equ	0xFE8
  1980                           postdec1	equ	0xFE5
  1981                           fsr1l	equ	0xFE1
  1982                           indf2	equ	0xFDF
  1983                           postinc2	equ	0xFDE
  1984                           postdec2	equ	0xFDD
  1985                           fsr2h	equ	0xFDA
  1986                           fsr2l	equ	0xFD9
  1987                           status	equ	0xFD8
  1988                           
  1989 ;; *************** function _print_indicator *****************
  1990 ;; Defined at:
  1991 ;;		line 184 in file "../../../src/print.c"
  1992 ;; Parameters:    Size  Location     Type
  1993 ;;  indicate        1    wreg     unsigned char 
  1994 ;; Auto vars:     Size  Location     Type
  1995 ;;  indicate        1   13[COMRAM] unsigned char 
  1996 ;; Return value:  Size  Location     Type
  1997 ;;		None               void
  1998 ;; Registers used:
  1999 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2000 ;; Tracked objects:
  2001 ;;		On entry : 0/0
  2002 ;;		On exit  : 0/0
  2003 ;;		Unchanged: 0/0
  2004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2005 ;;      Params:         0       0       0       0       0       0       0       0       0
  2006 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2007 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2008 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2009 ;;Total ram usage:        1 bytes
  2010 ;; Hardware stack levels used:    1
  2011 ;; Hardware stack levels required when called:    5
  2012 ;; This function calls:
  2013 ;;		_lcd_gotoxy
  2014 ;;		_lcd_puts
  2015 ;; This function is called by:
  2016 ;;		_main
  2017 ;; This function uses a non-reentrant model
  2018 ;;
  2019                           
  2020                           	psect	text4
  2021  00297A                     __ptext4:
  2022                           	opt stack 0
  2023  00297A                     _print_indicator:
  2024                           	opt stack 25
  2025                           
  2026                           ; BSR set to: 0
  2027                           ;incstack = 0
  2028                           ;print_indicator@indicate stored from wreg
  2029  00297A  6E0E               	movwf	print_indicator@indicate,c
  2030                           
  2031                           ;print.c: 198: lcd_gotoxy(0, 1);
  2032  00297C  0E01               	movlw	1
  2033  00297E  6E08               	movwf	lcd_gotoxy@row,c
  2034  002980  0E00               	movlw	0
  2035  002982  EC77  F013         	call	_lcd_gotoxy
  2036                           
  2037                           ;print.c: 199: if(indicate) {
  2038  002986  500E               	movf	print_indicator@indicate,w,c
  2039  002988  E003               	bz	l3510
  2040                           
  2041                           ;print.c: 200: lcd_puts("-*-");
  2042  00298A  0EDF               	movlw	STR_26& (0+255)
  2043  00298C  EFF0  F013         	goto	_lcd_puts
  2044  002990                     l3510:
  2045                           
  2046                           ;print.c: 202: lcd_puts("   ");
  2047  002990  0EB4               	movlw	(STR_33+3)& (0+255)
  2048  002992  EFF0  F013         	goto	_lcd_puts
  2049  002996                     __end_of_print_indicator:
  2050                           	opt stack 0
  2051                           tblptru	equ	0xFF8
  2052                           tblptrh	equ	0xFF7
  2053                           tblptrl	equ	0xFF6
  2054                           tablat	equ	0xFF5
  2055                           prodl	equ	0xFF3
  2056                           intcon	equ	0xFF2
  2057                           intcon2	equ	0xFF1
  2058                           postinc0	equ	0xFEE
  2059                           wreg	equ	0xFE8
  2060                           postdec1	equ	0xFE5
  2061                           fsr1l	equ	0xFE1
  2062                           indf2	equ	0xFDF
  2063                           postinc2	equ	0xFDE
  2064                           postdec2	equ	0xFDD
  2065                           fsr2h	equ	0xFDA
  2066                           fsr2l	equ	0xFD9
  2067                           status	equ	0xFD8
  2068                           
  2069 ;; *************** function _measure_inductance *****************
  2070 ;; Defined at:
  2071 ;;		line 197 in file "../../../src/measure.c"
  2072 ;; Parameters:    Size  Location     Type
  2073 ;;		None
  2074 ;; Auto vars:     Size  Location     Type
  2075 ;;  Lin             4   41[BANK0 ] unsigned char 
  2076 ;;  denominator     4    6[BANK0 ] unsigned char 
  2077 ;;  numerator       4    2[BANK0 ] unsigned char 
  2078 ;;  var             2   39[BANK0 ] unsigned int 
  2079 ;;  unit            1   26[BANK0 ] unsigned char 
  2080 ;; Return value:  Size  Location     Type
  2081 ;;		None               void
  2082 ;; Registers used:
  2083 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2084 ;; Tracked objects:
  2085 ;;		On entry : F/0
  2086 ;;		On exit  : 0/0
  2087 ;;		Unchanged: 0/0
  2088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2089 ;;      Params:         0       0       0       0       0       0       0       0       0
  2090 ;;      Locals:         0      43       0       0       0       0       0       0       0
  2091 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2092 ;;      Totals:         0      43       0       0       0       0       0       0       0
  2093 ;;Total ram usage:       43 bytes
  2094 ;; Hardware stack levels used:    1
  2095 ;; Hardware stack levels required when called:    6
  2096 ;; This function calls:
  2097 ;;		___fldiv
  2098 ;;		___flge
  2099 ;;		___flmul
  2100 ;;		___flsub
  2101 ;;		___fltol
  2102 ;;		___lwtofl
  2103 ;;		_lcd_gotoxy
  2104 ;;		_measure_freq
  2105 ;;		_print_reading
  2106 ;;		_print_unit
  2107 ;;		_put_str
  2108 ;; This function is called by:
  2109 ;;		_main
  2110 ;; This function uses a non-reentrant model
  2111 ;;
  2112                           
  2113                           	psect	text5
  2114  0008FC                     __ptext5:
  2115                           	opt stack 0
  2116  0008FC                     _measure_inductance:
  2117                           	opt stack 24
  2118                           
  2119                           ; BSR set to: 0
  2120                           ;measure.c: 198: uint8_t unit;
  2121                           ;measure.c: 199: uint16_t var;
  2122                           ;measure.c: 201: double Lin, numerator, denominator;
  2123                           ;measure.c: 204: lcd_gotoxy(0, 0);
  2124                           
  2125                           ;incstack = 0
  2126  0008FC  0E00               	movlw	0
  2127  0008FE  6A08               	clrf	lcd_gotoxy@row,c
  2128  000900  EC77  F013         	call	_lcd_gotoxy
  2129                           
  2130                           ;measure.c: 205: put_str("Inductivity ");
  2131  000904  0E7C               	movlw	STR_15& (0+255)
  2132  000906  EC05  F014         	call	_put_str
  2133                           
  2134                           ;measure.c: 207: var = measure_freq();
  2135  00090A  EC24  F00D         	call	_measure_freq	;wreg free
  2136  00090E  C036  F087         	movff	?_measure_freq,measure_inductance@var
  2137  000912  C037  F088         	movff	?_measure_freq+1,measure_inductance@var+1
  2138                           
  2139                           ;measure.c: 209: F3 = (double)var;
  2140  000916  C087  F03B         	movff	measure_inductance@var,___lwtofl@c
  2141  00091A  C088  F03C         	movff	measure_inductance@var+1,___lwtofl@c+1
  2142  00091E  EC1A  F014         	call	___lwtofl	;wreg free
  2143  000922  C03B  F0BE         	movff	?___lwtofl,_F3
  2144  000926  C03C  F0BF         	movff	?___lwtofl+1,_F3+1
  2145  00092A  C03D  F0C0         	movff	?___lwtofl+2,_F3+2
  2146  00092E  C03E  F0C1         	movff	?___lwtofl+3,_F3+3
  2147                           
  2148                           ;measure.c: 210: if(F3 > F1)
  2149  000932  EC70  F008         	call	PL6	;call to abstracted procedure
  2150  000936  EC60  F012         	call	___flge	;wreg free
  2151  00093A  E208               	bc	l4164
  2152                           
  2153                           ;measure.c: 211: F3 = F1;
  2154  00093C  C0E7  F0BE         	movff	_F1,_F3
  2155  000940  C0E8  F0BF         	movff	_F1+1,_F3+1
  2156  000944  C0E9  F0C0         	movff	_F1+2,_F3+2
  2157  000948  C0EA  F0C1         	movff	_F1+3,_F3+3
  2158  00094C                     l4164:
  2159                           
  2160                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  2161  00094C  C0BA  F03C         	movff	_F2,___flsub@f2
  2162  000950  C0BB  F03D         	movff	_F2+1,___flsub@f2+1
  2163  000954  C0BC  F03E         	movff	_F2+2,___flsub@f2+2
  2164  000958  C0BD  F03F         	movff	_F2+3,___flsub@f2+3
  2165  00095C  C0BA  F038         	movff	_F2,___flsub@f1
  2166  000960  C0BB  F039         	movff	_F2+1,___flsub@f1+1
  2167  000964  C0BC  F03A         	movff	_F2+2,___flsub@f1+2
  2168  000968  C0BD  F03B         	movff	_F2+3,___flsub@f1+3
  2169  00096C  EC19  F013         	call	___flsub	;wreg free
  2170  000970  C038  F06A         	movff	?___flsub,_measure_inductance$1110
  2171  000974  C039  F06B         	movff	?___flsub+1,_measure_inductance$1110+1
  2172  000978  C03A  F06C         	movff	?___flsub+2,_measure_inductance$1110+2
  2173  00097C  C03B  F06D         	movff	?___flsub+3,_measure_inductance$1110+3
  2174                           
  2175                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  2176  000980  C06A  F03C         	movff	_measure_inductance$1110,___flsub@f2
  2177  000984  C06B  F03D         	movff	_measure_inductance$1110+1,___flsub@f2+1
  2178  000988  C06C  F03E         	movff	_measure_inductance$1110+2,___flsub@f2+2
  2179  00098C  C06D  F03F         	movff	_measure_inductance$1110+3,___flsub@f2+3
  2180  000990  D9CA               	call	PL2	;call to abstracted procedure
  2181  000992  ECF5  F00E         	call	___flmul	;wreg free
  2182  000996  C01D  F038         	movff	?___flmul,___flsub@f1
  2183  00099A  C01E  F039         	movff	?___flmul+1,___flsub@f1+1
  2184  00099E  C01F  F03A         	movff	?___flmul+2,___flsub@f1+2
  2185  0009A2  C020  F03B         	movff	?___flmul+3,___flsub@f1+3
  2186  0009A6  EC19  F013         	call	___flsub	;wreg free
  2187  0009AA  C038  F07B         	movff	?___flsub,_measure_inductance$1111
  2188  0009AE  C039  F07C         	movff	?___flsub+1,_measure_inductance$1111+1
  2189  0009B2  C03A  F07D         	movff	?___flsub+2,_measure_inductance$1111+2
  2190  0009B6  C03B  F07E         	movff	?___flsub+3,_measure_inductance$1111+3
  2191                           
  2192                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  2193  0009BA  EC5F  F008         	call	PL4	;call to abstracted procedure
  2194  0009BE  ECF5  F00E         	call	___flmul	;wreg free
  2195  0009C2  C01D  F03C         	movff	?___flmul,___flsub@f2
  2196  0009C6  C01E  F03D         	movff	?___flmul+1,___flsub@f2+1
  2197  0009CA  C01F  F03E         	movff	?___flmul+2,___flsub@f2+2
  2198  0009CE  C020  F03F         	movff	?___flmul+3,___flsub@f2+3
  2199  0009D2  D9A9               	call	PL2	;call to abstracted procedure
  2200  0009D4  ECF5  F00E         	call	___flmul	;wreg free
  2201  0009D8  C01D  F038         	movff	?___flmul,___flsub@f1
  2202  0009DC  C01E  F039         	movff	?___flmul+1,___flsub@f1+1
  2203  0009E0  C01F  F03A         	movff	?___flmul+2,___flsub@f1+2
  2204  0009E4  C020  F03B         	movff	?___flmul+3,___flsub@f1+3
  2205  0009E8  EC19  F013         	call	___flsub	;wreg free
  2206  0009EC  C038  F07F         	movff	?___flsub,_measure_inductance$1112
  2207  0009F0  C039  F080         	movff	?___flsub+1,_measure_inductance$1112+1
  2208  0009F4  C03A  F081         	movff	?___flsub+2,_measure_inductance$1112+2
  2209  0009F8  C03B  F082         	movff	?___flsub+3,_measure_inductance$1112+3
  2210                           
  2211                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  2212  0009FC  C07B  F021         	movff	_measure_inductance$1111,___flmul@f2
  2213  000A00  C07C  F022         	movff	_measure_inductance$1111+1,___flmul@f2+1
  2214  000A04  C07D  F023         	movff	_measure_inductance$1111+2,___flmul@f2+2
  2215  000A08  C07E  F024         	movff	_measure_inductance$1111+3,___flmul@f2+3
  2216  000A0C  C07F  F01D         	movff	_measure_inductance$1112,___flmul@f1
  2217  000A10  C080  F01E         	movff	_measure_inductance$1112+1,___flmul@f1+1
  2218  000A14  C081  F01F         	movff	_measure_inductance$1112+2,___flmul@f1+2
  2219  000A18  C082  F020         	movff	_measure_inductance$1112+3,___flmul@f1+3
  2220  000A1C  ECF5  F00E         	call	___flmul	;wreg free
  2221  000A20  C01D  F083         	movff	?___flmul,_measure_inductance$1113
  2222  000A24  C01E  F084         	movff	?___flmul+1,_measure_inductance$1113+1
  2223  000A28  C01F  F085         	movff	?___flmul+2,_measure_inductance$1113+2
  2224  000A2C  C020  F086         	movff	?___flmul+3,_measure_inductance$1113+3
  2225                           
  2226                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  2227  000A30  C083  F01D         	movff	_measure_inductance$1113,___flmul@f1
  2228  000A34  C084  F01E         	movff	_measure_inductance$1113+1,___flmul@f1+1
  2229  000A38  C085  F01F         	movff	_measure_inductance$1113+2,___flmul@f1+2
  2230  000A3C  C086  F020         	movff	_measure_inductance$1113+3,___flmul@f1+3
  2231  000A40  0E00               	movlw	0
  2232  000A42  6E21               	movwf	___flmul@f2,c
  2233  000A44  0E40               	movlw	64
  2234  000A46  6E22               	movwf	___flmul@f2+1,c
  2235  000A48  0E1C               	movlw	28
  2236  000A4A  6E23               	movwf	___flmul@f2+2,c
  2237  000A4C  0E46               	movlw	70
  2238  000A4E  6E24               	movwf	___flmul@f2+3,c
  2239  000A50  ECF5  F00E         	call	___flmul	;wreg free
  2240  000A54  C01D  F062         	movff	?___flmul,measure_inductance@numerator
  2241  000A58  C01E  F063         	movff	?___flmul+1,measure_inductance@numerator+1
  2242  000A5C  C01F  F064         	movff	?___flmul+2,measure_inductance@numerator+2
  2243  000A60  C020  F065         	movff	?___flmul+3,measure_inductance@numerator+3
  2244                           
  2245                           ;measure.c: 213: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2246  000A64  D960               	call	PL2	;call to abstracted procedure
  2247  000A66  ECF5  F00E         	call	___flmul	;wreg free
  2248  000A6A  C01D  F06E         	movff	?___flmul,_measure_inductance$1114
  2249  000A6E  C01E  F06F         	movff	?___flmul+1,_measure_inductance$1114+1
  2250  000A72  C01F  F070         	movff	?___flmul+2,_measure_inductance$1114+2
  2251  000A76  C020  F071         	movff	?___flmul+3,_measure_inductance$1114+3
  2252                           
  2253                           ;measure.c: 213: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2254  000A7A  C0BA  F021         	movff	_F2,___flmul@f2
  2255  000A7E  C0BB  F022         	movff	_F2+1,___flmul@f2+1
  2256  000A82  C0BC  F023         	movff	_F2+2,___flmul@f2+2
  2257  000A86  C0BD  F024         	movff	_F2+3,___flmul@f2+3
  2258  000A8A  C06E  F01D         	movff	_measure_inductance$1114,___flmul@f1
  2259  000A8E  C06F  F01E         	movff	_measure_inductance$1114+1,___flmul@f1+1
  2260  000A92  C070  F01F         	movff	_measure_inductance$1114+2,___flmul@f1+2
  2261  000A96  C071  F020         	movff	_measure_inductance$1114+3,___flmul@f1+3
  2262  000A9A  ECF5  F00E         	call	___flmul	;wreg free
  2263  000A9E  C01D  F07B         	movff	?___flmul,_measure_inductance$1111
  2264  000AA2  C01E  F07C         	movff	?___flmul+1,_measure_inductance$1111+1
  2265  000AA6  C01F  F07D         	movff	?___flmul+2,_measure_inductance$1111+2
  2266  000AAA  C020  F07E         	movff	?___flmul+3,_measure_inductance$1111+3
  2267                           
  2268                           ;measure.c: 213: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2269  000AAE  C0BA  F021         	movff	_F2,___flmul@f2
  2270  000AB2  C0BB  F022         	movff	_F2+1,___flmul@f2+1
  2271  000AB6  C0BC  F023         	movff	_F2+2,___flmul@f2+2
  2272  000ABA  C0BD  F024         	movff	_F2+3,___flmul@f2+3
  2273  000ABE  C07B  F01D         	movff	_measure_inductance$1111,___flmul@f1
  2274  000AC2  C07C  F01E         	movff	_measure_inductance$1111+1,___flmul@f1+1
  2275  000AC6  C07D  F01F         	movff	_measure_inductance$1111+2,___flmul@f1+2
  2276  000ACA  C07E  F020         	movff	_measure_inductance$1111+3,___flmul@f1+3
  2277  000ACE  ECF5  F00E         	call	___flmul	;wreg free
  2278  000AD2  C01D  F07F         	movff	?___flmul,_measure_inductance$1112
  2279  000AD6  C01E  F080         	movff	?___flmul+1,_measure_inductance$1112+1
  2280  000ADA  C01F  F081         	movff	?___flmul+2,_measure_inductance$1112+2
  2281  000ADE  C020  F082         	movff	?___flmul+3,_measure_inductance$1112+3
  2282                           
  2283                           ;measure.c: 213: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2284  000AE2  C0BE  F021         	movff	_F3,___flmul@f2
  2285  000AE6  C0BF  F022         	movff	_F3+1,___flmul@f2+1
  2286  000AEA  C0C0  F023         	movff	_F3+2,___flmul@f2+2
  2287  000AEE  C0C1  F024         	movff	_F3+3,___flmul@f2+3
  2288  000AF2  C07F  F01D         	movff	_measure_inductance$1112,___flmul@f1
  2289  000AF6  C080  F01E         	movff	_measure_inductance$1112+1,___flmul@f1+1
  2290  000AFA  C081  F01F         	movff	_measure_inductance$1112+2,___flmul@f1+2
  2291  000AFE  C082  F020         	movff	_measure_inductance$1112+3,___flmul@f1+3
  2292  000B02  ECF5  F00E         	call	___flmul	;wreg free
  2293  000B06  C01D  F083         	movff	?___flmul,_measure_inductance$1113
  2294  000B0A  C01E  F084         	movff	?___flmul+1,_measure_inductance$1113+1
  2295  000B0E  C01F  F085         	movff	?___flmul+2,_measure_inductance$1113+2
  2296  000B12  C020  F086         	movff	?___flmul+3,_measure_inductance$1113+3
  2297                           
  2298                           ;measure.c: 213: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2299  000B16  C0BE  F021         	movff	_F3,___flmul@f2
  2300  000B1A  C0BF  F022         	movff	_F3+1,___flmul@f2+1
  2301  000B1E  C0C0  F023         	movff	_F3+2,___flmul@f2+2
  2302  000B22  C0C1  F024         	movff	_F3+3,___flmul@f2+3
  2303  000B26  C083  F01D         	movff	_measure_inductance$1113,___flmul@f1
  2304  000B2A  C084  F01E         	movff	_measure_inductance$1113+1,___flmul@f1+1
  2305  000B2E  C085  F01F         	movff	_measure_inductance$1113+2,___flmul@f1+2
  2306  000B32  C086  F020         	movff	_measure_inductance$1113+3,___flmul@f1+3
  2307  000B36  ECF5  F00E         	call	___flmul	;wreg free
  2308  000B3A  C01D  F072         	movff	?___flmul,_measure_inductance$1115
  2309  000B3E  C01E  F073         	movff	?___flmul+1,_measure_inductance$1115+1
  2310  000B42  C01F  F074         	movff	?___flmul+2,_measure_inductance$1115+2
  2311  000B46  C020  F075         	movff	?___flmul+3,_measure_inductance$1115+3
  2312                           
  2313                           ;measure.c: 213: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2314  000B4A  C0EB  F021         	movff	_CCal,___flmul@f2
  2315  000B4E  C0EC  F022         	movff	_CCal+1,___flmul@f2+1
  2316  000B52  C0ED  F023         	movff	_CCal+2,___flmul@f2+2
  2317  000B56  C0EE  F024         	movff	_CCal+3,___flmul@f2+3
  2318  000B5A  C072  F01D         	movff	_measure_inductance$1115,___flmul@f1
  2319  000B5E  C073  F01E         	movff	_measure_inductance$1115+1,___flmul@f1+1
  2320  000B62  C074  F01F         	movff	_measure_inductance$1115+2,___flmul@f1+2
  2321  000B66  C075  F020         	movff	_measure_inductance$1115+3,___flmul@f1+3
  2322  000B6A  ECF5  F00E         	call	___flmul	;wreg free
  2323  000B6E  C01D  F076         	movff	?___flmul,_measure_inductance$1116
  2324  000B72  C01E  F077         	movff	?___flmul+1,_measure_inductance$1116+1
  2325  000B76  C01F  F078         	movff	?___flmul+2,_measure_inductance$1116+2
  2326  000B7A  C020  F079         	movff	?___flmul+3,_measure_inductance$1116+3
  2327                           
  2328                           ;measure.c: 213: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2329  000B7E  C076  F01D         	movff	_measure_inductance$1116,___flmul@f1
  2330  000B82  C077  F01E         	movff	_measure_inductance$1116+1,___flmul@f1+1
  2331  000B86  C078  F01F         	movff	_measure_inductance$1116+2,___flmul@f1+2
  2332  000B8A  C079  F020         	movff	_measure_inductance$1116+3,___flmul@f1+3
  2333  000B8E  0EE6               	movlw	230
  2334  000B90  6E21               	movwf	___flmul@f2,c
  2335  000B92  0EE9               	movlw	233
  2336  000B94  6E22               	movwf	___flmul@f2+1,c
  2337  000B96  0E1D               	movlw	29
  2338  000B98  6E23               	movwf	___flmul@f2+2,c
  2339  000B9A  0E42               	movlw	66
  2340  000B9C  6E24               	movwf	___flmul@f2+3,c
  2341  000B9E  ECF5  F00E         	call	___flmul	;wreg free
  2342  000BA2  C01D  F066         	movff	?___flmul,measure_inductance@denominator
  2343  000BA6  C01E  F067         	movff	?___flmul+1,measure_inductance@denominator+1
  2344  000BAA  C01F  F068         	movff	?___flmul+2,measure_inductance@denominator+2
  2345  000BAE  C020  F069         	movff	?___flmul+3,measure_inductance@denominator+3
  2346                           
  2347                           ;measure.c: 214: Lin = (numerator / denominator) * 1e+15l;
  2348  000BB2  C066  F012         	movff	measure_inductance@denominator,___fldiv@f2
  2349  000BB6  C067  F013         	movff	measure_inductance@denominator+1,___fldiv@f2+1
  2350  000BBA  C068  F014         	movff	measure_inductance@denominator+2,___fldiv@f2+2
  2351  000BBE  C069  F015         	movff	measure_inductance@denominator+3,___fldiv@f2+3
  2352  000BC2  C062  F00E         	movff	measure_inductance@numerator,___fldiv@f1
  2353  000BC6  C063  F00F         	movff	measure_inductance@numerator+1,___fldiv@f1+1
  2354  000BCA  C064  F010         	movff	measure_inductance@numerator+2,___fldiv@f1+2
  2355  000BCE  C065  F011         	movff	measure_inductance@numerator+3,___fldiv@f1+3
  2356  000BD2  ECB8  F00F         	call	___fldiv	;wreg free
  2357  000BD6  C00E  F01D         	movff	?___fldiv,___flmul@f1
  2358  000BDA  C00F  F01E         	movff	?___fldiv+1,___flmul@f1+1
  2359  000BDE  C010  F01F         	movff	?___fldiv+2,___flmul@f1+2
  2360  000BE2  C011  F020         	movff	?___fldiv+3,___flmul@f1+3
  2361  000BE6  0EA9               	movlw	169
  2362  000BE8  6E21               	movwf	___flmul@f2,c
  2363  000BEA  0E5F               	movlw	95
  2364  000BEC  6E22               	movwf	___flmul@f2+1,c
  2365  000BEE  0E63               	movlw	99
  2366  000BF0  6E23               	movwf	___flmul@f2+2,c
  2367  000BF2  0E58               	movlw	88
  2368  000BF4  6E24               	movwf	___flmul@f2+3,c
  2369  000BF6  ECF5  F00E         	call	___flmul	;wreg free
  2370  000BFA  C01D  F089         	movff	?___flmul,measure_inductance@Lin
  2371  000BFE  C01E  F08A         	movff	?___flmul+1,measure_inductance@Lin+1
  2372  000C02  C01F  F08B         	movff	?___flmul+2,measure_inductance@Lin+2
  2373  000C06  C020  F08C         	movff	?___flmul+3,measure_inductance@Lin+3
  2374                           
  2375                           ;measure.c: 216: if(Lin > 999) {
  2376  000C0A  ECAF  F008         	call	PL30	;call to abstracted procedure
  2377  000C0E  C089  F008         	movff	measure_inductance@Lin,___flge@ff2
  2378  000C12  C08A  F009         	movff	measure_inductance@Lin+1,___flge@ff2+1
  2379  000C16  C08B  F00A         	movff	measure_inductance@Lin+2,___flge@ff2+2
  2380  000C1A  C08C  F00B         	movff	measure_inductance@Lin+3,___flge@ff2+3
  2381  000C1E  EC60  F012         	call	___flge	;wreg free
  2382  000C22  E252               	bc	l4182
  2383                           
  2384                           ;measure.c: 217: if(Lin > (999e+03l)) {
  2385  000C24  EC95  F008         	call	PL20	;call to abstracted procedure
  2386  000C28  C089  F008         	movff	measure_inductance@Lin,___flge@ff2
  2387  000C2C  C08A  F009         	movff	measure_inductance@Lin+1,___flge@ff2+1
  2388  000C30  C08B  F00A         	movff	measure_inductance@Lin+2,___flge@ff2+2
  2389  000C34  C08C  F00B         	movff	measure_inductance@Lin+3,___flge@ff2+3
  2390  000C38  EC60  F012         	call	___flge	;wreg free
  2391  000C3C  E233               	bc	l4178
  2392                           
  2393                           ;measure.c: 218: if(Lin > (999e+06l)) {
  2394  000C3E  EC9E  F008         	call	PL22	;call to abstracted procedure
  2395  000C42  C089  F008         	movff	measure_inductance@Lin,___flge@ff2
  2396  000C46  C08A  F009         	movff	measure_inductance@Lin+1,___flge@ff2+1
  2397  000C4A  C08B  F00A         	movff	measure_inductance@Lin+2,___flge@ff2+2
  2398  000C4E  C08C  F00B         	movff	measure_inductance@Lin+3,___flge@ff2+3
  2399  000C52  EC60  F012         	call	___flge	;wreg free
  2400  000C56  E217               	bc	l4174
  2401                           
  2402                           ;measure.c: 219: Lin = Lin / (1e+09l);
  2403  000C58  C089  F00E         	movff	measure_inductance@Lin,___fldiv@f1
  2404  000C5C  C08A  F00F         	movff	measure_inductance@Lin+1,___fldiv@f1+1
  2405  000C60  C08B  F010         	movff	measure_inductance@Lin+2,___fldiv@f1+2
  2406  000C64  C08C  F011         	movff	measure_inductance@Lin+3,___fldiv@f1+3
  2407  000C68  EC8C  F008         	call	PL18	;call to abstracted procedure
  2408  000C6C  ECB8  F00F         	call	___fldiv	;wreg free
  2409  000C70  C00E  F089         	movff	?___fldiv,measure_inductance@Lin
  2410  000C74  C00F  F08A         	movff	?___fldiv+1,measure_inductance@Lin+1
  2411  000C78  C010  F08B         	movff	?___fldiv+2,measure_inductance@Lin+2
  2412  000C7C  C011  F08C         	movff	?___fldiv+3,measure_inductance@Lin+3
  2413                           
  2414                           ;measure.c: 220: unit = 0;
  2415  000C80  0100               	movlb	0	; () banked
  2416  000C82  6B7A               	clrf	measure_inductance@unit& (0+255),b
  2417                           
  2418                           ;measure.c: 221: } else {
  2419  000C84  D024               	goto	l4184
  2420  000C86                     l4174:
  2421                           
  2422                           ;measure.c: 222: Lin = Lin / (1e+06l);
  2423  000C86  D860               	call	PL8	;call to abstracted procedure
  2424  000C88  ECB7  F008         	call	PL34	;call to abstracted procedure
  2425  000C8C  ECB8  F00F         	call	___fldiv	;wreg free
  2426  000C90  C00E  F089         	movff	?___fldiv,measure_inductance@Lin
  2427  000C94  C00F  F08A         	movff	?___fldiv+1,measure_inductance@Lin+1
  2428  000C98  C010  F08B         	movff	?___fldiv+2,measure_inductance@Lin+2
  2429  000C9C  C011  F08C         	movff	?___fldiv+3,measure_inductance@Lin+3
  2430                           
  2431                           ;measure.c: 223: unit = 1;
  2432  000CA0  0E01               	movlw	1
  2433  000CA2  D013               	goto	L2
  2434  000CA4                     l4178:
  2435                           
  2436                           ;measure.c: 226: Lin = Lin / 1e+03l;
  2437  000CA4  D851               	call	PL8	;call to abstracted procedure
  2438  000CA6  6E13               	movwf	___fldiv@f2+1,c
  2439  000CA8  0E7A               	movlw	122
  2440  000CAA  6E14               	movwf	___fldiv@f2+2,c
  2441  000CAC  0E44               	movlw	68
  2442  000CAE  6E15               	movwf	___fldiv@f2+3,c
  2443  000CB0  ECB8  F00F         	call	___fldiv	;wreg free
  2444  000CB4  C00E  F089         	movff	?___fldiv,measure_inductance@Lin
  2445  000CB8  C00F  F08A         	movff	?___fldiv+1,measure_inductance@Lin+1
  2446  000CBC  C010  F08B         	movff	?___fldiv+2,measure_inductance@Lin+2
  2447  000CC0  C011  F08C         	movff	?___fldiv+3,measure_inductance@Lin+3
  2448                           
  2449                           ;measure.c: 227: unit = 2;
  2450  000CC4  0E02               	movlw	2
  2451  000CC6  D001               	goto	L2
  2452  000CC8                     l4182:
  2453                           
  2454                           ;measure.c: 230: unit = 3;
  2455  000CC8  0E03               	movlw	3
  2456  000CCA                     L2:
  2457  000CCA  0100               	movlb	0	; () banked
  2458  000CCC  6F7A               	movwf	measure_inductance@unit& (0+255),b
  2459  000CCE                     l4184:
  2460                           
  2461                           ; BSR set to: 0
  2462                           ;measure.c: 232: Lin = Lin * 100;
  2463  000CCE  C089  F01D         	movff	measure_inductance@Lin,___flmul@f1
  2464  000CD2  C08A  F01E         	movff	measure_inductance@Lin+1,___flmul@f1+1
  2465  000CD6  C08B  F01F         	movff	measure_inductance@Lin+2,___flmul@f1+2
  2466  000CDA  C08C  F020         	movff	measure_inductance@Lin+3,___flmul@f1+3
  2467  000CDE  ECA7  F008         	call	PL26	;call to abstracted procedure
  2468  000CE2  ECF5  F00E         	call	___flmul	;wreg free
  2469  000CE6  C01D  F089         	movff	?___flmul,measure_inductance@Lin
  2470  000CEA  C01E  F08A         	movff	?___flmul+1,measure_inductance@Lin+1
  2471  000CEE  C01F  F08B         	movff	?___flmul+2,measure_inductance@Lin+2
  2472  000CF2  C020  F08C         	movff	?___flmul+3,measure_inductance@Lin+3
  2473                           
  2474                           ;measure.c: 233: var = (uint16_t)Lin;
  2475  000CF6  C089  F052         	movff	measure_inductance@Lin,___fltol@f1
  2476  000CFA  C08A  F053         	movff	measure_inductance@Lin+1,___fltol@f1+1
  2477  000CFE  C08B  F054         	movff	measure_inductance@Lin+2,___fltol@f1+2
  2478  000D02  C08C  F055         	movff	measure_inductance@Lin+3,___fltol@f1+3
  2479  000D06  EC0A  F011         	call	___fltol	;wreg free
  2480  000D0A  C052  F087         	movff	?___fltol,measure_inductance@var
  2481  000D0E  C053  F088         	movff	?___fltol+1,measure_inductance@var+1
  2482                           
  2483                           ; BSR set to: 0
  2484                           ;measure.c: 235: print_reading(var);
  2485  000D12  C087  F036         	movff	measure_inductance@var,print_reading@measurement
  2486  000D16  C088  F037         	movff	measure_inductance@var+1,print_reading@measurement+1
  2487  000D1A  ECD6  F011         	call	_print_reading	;wreg free
  2488                           
  2489                           ;measure.c: 236: print_unit(unit);
  2490  000D1E  0100               	movlb	0	; () banked
  2491  000D20  517A               	movf	measure_inductance@unit& (0+255),w,b
  2492  000D22  EF2F  F014         	goto	_print_unit
  2493  000D26                     __end_of_measure_inductance:
  2494                           	opt stack 0
  2495  000D26                     PL2:
  2496                           	opt stack 24
  2497  000D26  C0E7  F021         	movff	_F1,___flmul@f2
  2498  000D2A  C0E8  F022         	movff	_F1+1,___flmul@f2+1
  2499  000D2E  C0E9  F023         	movff	_F1+2,___flmul@f2+2
  2500  000D32  C0EA  F024         	movff	_F1+3,___flmul@f2+3
  2501  000D36  C0E7  F01D         	movff	_F1,___flmul@f1
  2502  000D3A  C0E8  F01E         	movff	_F1+1,___flmul@f1+1
  2503  000D3E  C0E9  F01F         	movff	_F1+2,___flmul@f1+2
  2504  000D42  C0EA  F020         	movff	_F1+3,___flmul@f1+3
  2505  000D46  0012               	return	
  2506  000D48                     __end_ofPL2:
  2507                           	opt stack 0
  2508  000D48                     PL8:
  2509                           	opt stack 24
  2510  000D48  C089  F00E         	movff	measure_inductance@Lin,___fldiv@f1
  2511  000D4C  C08A  F00F         	movff	measure_inductance@Lin+1,___fldiv@f1+1
  2512  000D50  C08B  F010         	movff	measure_inductance@Lin+2,___fldiv@f1+2
  2513  000D54  C08C  F011         	movff	measure_inductance@Lin+3,___fldiv@f1+3
  2514  000D58  0E00               	movlw	0
  2515  000D5A  6E12               	movwf	___fldiv@f2,c
  2516  000D5C  0C00               	retlw	0
  2517  000D5E                     __end_ofPL8:
  2518                           	opt stack 0
  2519                           tblptru	equ	0xFF8
  2520                           tblptrh	equ	0xFF7
  2521                           tblptrl	equ	0xFF6
  2522                           tablat	equ	0xFF5
  2523                           prodl	equ	0xFF3
  2524                           intcon	equ	0xFF2
  2525                           intcon2	equ	0xFF1
  2526                           postinc0	equ	0xFEE
  2527                           wreg	equ	0xFE8
  2528                           postdec1	equ	0xFE5
  2529                           fsr1l	equ	0xFE1
  2530                           indf2	equ	0xFDF
  2531                           postinc2	equ	0xFDE
  2532                           postdec2	equ	0xFDD
  2533                           fsr2h	equ	0xFDA
  2534                           fsr2l	equ	0xFD9
  2535                           status	equ	0xFD8
  2536                           
  2537 ;; *************** function _measure_capacitance *****************
  2538 ;; Defined at:
  2539 ;;		line 119 in file "../../../src/measure.c"
  2540 ;; Parameters:    Size  Location     Type
  2541 ;;		None
  2542 ;; Auto vars:     Size  Location     Type
  2543 ;;  Cin             4   84[BANK0 ] unsigned char 
  2544 ;;  var             2   82[BANK0 ] unsigned int 
  2545 ;;  unit            1   81[BANK0 ] unsigned char 
  2546 ;; Return value:  Size  Location     Type
  2547 ;;		None               void
  2548 ;; Registers used:
  2549 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2550 ;; Tracked objects:
  2551 ;;		On entry : F/0
  2552 ;;		On exit  : 0/0
  2553 ;;		Unchanged: 0/0
  2554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2555 ;;      Params:         0       0       0       0       0       0       0       0       0
  2556 ;;      Locals:         0      19       0       0       0       0       0       0       0
  2557 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2558 ;;      Totals:         0      19       0       0       0       0       0       0       0
  2559 ;;Total ram usage:       19 bytes
  2560 ;; Hardware stack levels used:    1
  2561 ;; Hardware stack levels required when called:    7
  2562 ;; This function calls:
  2563 ;;		___fldiv
  2564 ;;		___flge
  2565 ;;		___flmul
  2566 ;;		___flsub
  2567 ;;		___fltol
  2568 ;;		___lwtofl
  2569 ;;		_format_double
  2570 ;;		_format_xint32
  2571 ;;		_lcd_gotoxy
  2572 ;;		_measure_freq
  2573 ;;		_print_reading
  2574 ;;		_print_unit
  2575 ;;		_put_str
  2576 ;;		_ser_putch
  2577 ;;		_ser_puts
  2578 ;; This function is called by:
  2579 ;;		_main
  2580 ;; This function uses a non-reentrant model
  2581 ;;
  2582                           
  2583                           	psect	text6
  2584  000D5E                     __ptext6:
  2585                           	opt stack 0
  2586  000D5E                     _measure_capacitance:
  2587                           	opt stack 23
  2588                           
  2589                           ; BSR set to: 0
  2590                           ;measure.c: 120: uint8_t unit;
  2591                           ;measure.c: 121: uint16_t var;
  2592                           ;measure.c: 123: double Cin;
  2593                           ;measure.c: 127: lcd_gotoxy(0, 0);
  2594                           
  2595                           ;incstack = 0
  2596  000D5E  0E00               	movlw	0
  2597  000D60  6A08               	clrf	lcd_gotoxy@row,c
  2598  000D62  EC77  F013         	call	_lcd_gotoxy
  2599                           
  2600                           ;measure.c: 128: put_str("Capacity ");
  2601  000D66  0E9F               	movlw	STR_6& (0+255)
  2602  000D68  EC05  F014         	call	_put_str
  2603                           
  2604                           ;measure.c: 130: var = measure_freq();
  2605  000D6C  EC24  F00D         	call	_measure_freq	;wreg free
  2606  000D70  C036  F0B2         	movff	?_measure_freq,measure_capacitance@var
  2607  000D74  C037  F0B3         	movff	?_measure_freq+1,measure_capacitance@var+1
  2608                           
  2609                           ;measure.c: 132: F3 = (double)var;
  2610  000D78  C0B2  F03B         	movff	measure_capacitance@var,___lwtofl@c
  2611  000D7C  C0B3  F03C         	movff	measure_capacitance@var+1,___lwtofl@c+1
  2612  000D80  EC1A  F014         	call	___lwtofl	;wreg free
  2613  000D84  C03B  F0BE         	movff	?___lwtofl,_F3
  2614  000D88  C03C  F0BF         	movff	?___lwtofl+1,_F3+1
  2615  000D8C  C03D  F0C0         	movff	?___lwtofl+2,_F3+2
  2616  000D90  C03E  F0C1         	movff	?___lwtofl+3,_F3+3
  2617                           
  2618                           ;measure.c: 135: ser_puts("var=");
  2619  000D94  0EDA               	movlw	STR_7& (0+255)
  2620  000D96  EC9F  F014         	call	_ser_puts
  2621                           
  2622                           ;measure.c: 136: format_xint32(var);
  2623  000D9A  C0B2  F036         	movff	measure_capacitance@var,format_xint32@x
  2624  000D9E  C0B3  F037         	movff	measure_capacitance@var+1,format_xint32@x+1
  2625  000DA2  6A38               	clrf	format_xint32@x+2,c
  2626  000DA4  6A39               	clrf	format_xint32@x+3,c
  2627  000DA6  EC92  F013         	call	_format_xint32	;wreg free
  2628                           
  2629                           ;measure.c: 137: ser_puts("\r\nF1=");
  2630  000DAA  0EB8               	movlw	STR_8& (0+255)
  2631  000DAC  EC9F  F014         	call	_ser_puts
  2632                           
  2633                           ;measure.c: 138: format_double(F1);
  2634  000DB0  C0E7  F091         	movff	_F1,format_double@num
  2635  000DB4  C0E8  F092         	movff	_F1+1,format_double@num+1
  2636  000DB8  C0E9  F093         	movff	_F1+2,format_double@num+2
  2637  000DBC  C0EA  F094         	movff	_F1+3,format_double@num+3
  2638  000DC0  EC95  F00A         	call	_format_double	;wreg free
  2639                           
  2640                           ;measure.c: 139: ser_putch(' ');
  2641  000DC4  0E20               	movlw	32
  2642  000DC6  EC57  F014         	call	_ser_putch
  2643                           
  2644                           ;measure.c: 140: format_xint32(*(uint32_t*)&F1);
  2645  000DCA  C0E7  F036         	movff	_F1,format_xint32@x
  2646  000DCE  C0E8  F037         	movff	_F1+1,format_xint32@x+1
  2647  000DD2  C0E9  F038         	movff	_F1+2,format_xint32@x+2
  2648  000DD6  C0EA  F039         	movff	_F1+3,format_xint32@x+3
  2649  000DDA  EC92  F013         	call	_format_xint32	;wreg free
  2650                           
  2651                           ;measure.c: 141: ser_puts("\r\nF2=");
  2652  000DDE  0EBE               	movlw	STR_9& (0+255)
  2653  000DE0  EC9F  F014         	call	_ser_puts
  2654                           
  2655                           ;measure.c: 142: format_double(F2);
  2656  000DE4  C0BA  F091         	movff	_F2,format_double@num
  2657  000DE8  C0BB  F092         	movff	_F2+1,format_double@num+1
  2658  000DEC  C0BC  F093         	movff	_F2+2,format_double@num+2
  2659  000DF0  C0BD  F094         	movff	_F2+3,format_double@num+3
  2660  000DF4  EC95  F00A         	call	_format_double	;wreg free
  2661                           
  2662                           ;measure.c: 143: ser_putch(' ');
  2663  000DF8  0E20               	movlw	32
  2664  000DFA  EC57  F014         	call	_ser_putch
  2665                           
  2666                           ;measure.c: 144: format_xint32(*(uint32_t*)&F2);
  2667  000DFE  C0BA  F036         	movff	_F2,format_xint32@x
  2668  000E02  C0BB  F037         	movff	_F2+1,format_xint32@x+1
  2669  000E06  C0BC  F038         	movff	_F2+2,format_xint32@x+2
  2670  000E0A  C0BD  F039         	movff	_F2+3,format_xint32@x+3
  2671  000E0E  EC92  F013         	call	_format_xint32	;wreg free
  2672                           
  2673                           ;measure.c: 145: ser_puts("\r\nF3=");
  2674  000E12  0EC4               	movlw	STR_10& (0+255)
  2675  000E14  EC9F  F014         	call	_ser_puts
  2676                           
  2677                           ;measure.c: 146: format_double(F3);
  2678  000E18  C0BE  F091         	movff	_F3,format_double@num
  2679  000E1C  C0BF  F092         	movff	_F3+1,format_double@num+1
  2680  000E20  C0C0  F093         	movff	_F3+2,format_double@num+2
  2681  000E24  C0C1  F094         	movff	_F3+3,format_double@num+3
  2682  000E28  EC95  F00A         	call	_format_double	;wreg free
  2683                           
  2684                           ;measure.c: 147: ser_putch(' ');
  2685  000E2C  0E20               	movlw	32
  2686  000E2E  EC57  F014         	call	_ser_putch
  2687                           
  2688                           ;measure.c: 148: format_xint32(*(uint32_t*)&F3);
  2689  000E32  C0BE  F036         	movff	_F3,format_xint32@x
  2690  000E36  C0BF  F037         	movff	_F3+1,format_xint32@x+1
  2691  000E3A  C0C0  F038         	movff	_F3+2,format_xint32@x+2
  2692  000E3E  C0C1  F039         	movff	_F3+3,format_xint32@x+3
  2693  000E42  EC92  F013         	call	_format_xint32	;wreg free
  2694                           
  2695                           ;measure.c: 149: ser_puts("\r\nCCal=");
  2696  000E46  0EA9               	movlw	STR_11& (0+255)
  2697  000E48  EC9F  F014         	call	_ser_puts
  2698                           
  2699                           ;measure.c: 150: format_double(CCal);
  2700  000E4C  C0EB  F091         	movff	_CCal,format_double@num
  2701  000E50  C0EC  F092         	movff	_CCal+1,format_double@num+1
  2702  000E54  C0ED  F093         	movff	_CCal+2,format_double@num+2
  2703  000E58  C0EE  F094         	movff	_CCal+3,format_double@num+3
  2704  000E5C  EC95  F00A         	call	_format_double	;wreg free
  2705                           
  2706                           ;measure.c: 151: ser_putch(' ');
  2707  000E60  0E20               	movlw	32
  2708  000E62  EC57  F014         	call	_ser_putch
  2709                           
  2710                           ;measure.c: 152: format_xint32(*(uint32_t*)&CCal);
  2711  000E66  C0EB  F036         	movff	_CCal,format_xint32@x
  2712  000E6A  C0EC  F037         	movff	_CCal+1,format_xint32@x+1
  2713  000E6E  C0ED  F038         	movff	_CCal+2,format_xint32@x+2
  2714  000E72  C0EE  F039         	movff	_CCal+3,format_xint32@x+3
  2715  000E76  EC92  F013         	call	_format_xint32	;wreg free
  2716                           
  2717                           ;measure.c: 153: ser_puts("\r\n");
  2718  000E7A  0EF8               	movlw	STR_2& (0+255)
  2719  000E7C  EC9F  F014         	call	_ser_puts
  2720                           
  2721                           ;measure.c: 157: if(F3 > F1)
  2722  000E80  D92F               	call	PL6	;call to abstracted procedure
  2723  000E82  EC60  F012         	call	___flge	;wreg free
  2724  000E86  E208               	bc	l4112
  2725                           
  2726                           ;measure.c: 158: F3 = F1;
  2727  000E88  C0E7  F0BE         	movff	_F1,_F3
  2728  000E8C  C0E8  F0BF         	movff	_F1+1,_F3+1
  2729  000E90  C0E9  F0C0         	movff	_F1+2,_F3+2
  2730  000E94  C0EA  F0C1         	movff	_F1+3,_F3+3
  2731  000E98                     l4112:
  2732                           
  2733                           ;measure.c: 160: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2734  000E98  D912               	call	PL4	;call to abstracted procedure
  2735  000E9A  ECF5  F00E         	call	___flmul	;wreg free
  2736  000E9E  C01D  F03C         	movff	?___flmul,___flsub@f2
  2737  000EA2  C01E  F03D         	movff	?___flmul+1,___flsub@f2+1
  2738  000EA6  C01F  F03E         	movff	?___flmul+2,___flsub@f2+2
  2739  000EAA  C020  F03F         	movff	?___flmul+3,___flsub@f2+3
  2740  000EAE  EC93  F006         	call	PL2	;call to abstracted procedure
  2741  000EB2  ECF5  F00E         	call	___flmul	;wreg free
  2742  000EB6  C01D  F038         	movff	?___flmul,___flsub@f1
  2743  000EBA  C01E  F039         	movff	?___flmul+1,___flsub@f1+1
  2744  000EBE  C01F  F03A         	movff	?___flmul+2,___flsub@f1+2
  2745  000EC2  C020  F03B         	movff	?___flmul+3,___flsub@f1+3
  2746  000EC6  EC19  F013         	call	___flsub	;wreg free
  2747  000ECA  C038  F0A5         	movff	?___flsub,_measure_capacitance$1107
  2748  000ECE  C039  F0A6         	movff	?___flsub+1,_measure_capacitance$1107+1
  2749  000ED2  C03A  F0A7         	movff	?___flsub+2,_measure_capacitance$1107+2
  2750  000ED6  C03B  F0A8         	movff	?___flsub+3,_measure_capacitance$1107+3
  2751                           
  2752                           ;measure.c: 160: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2753  000EDA  C0BA  F021         	movff	_F2,___flmul@f2
  2754  000EDE  C0BB  F022         	movff	_F2+1,___flmul@f2+1
  2755  000EE2  C0BC  F023         	movff	_F2+2,___flmul@f2+2
  2756  000EE6  C0BD  F024         	movff	_F2+3,___flmul@f2+3
  2757  000EEA  C0A5  F01D         	movff	_measure_capacitance$1107,___flmul@f1
  2758  000EEE  C0A6  F01E         	movff	_measure_capacitance$1107+1,___flmul@f1+1
  2759  000EF2  C0A7  F01F         	movff	_measure_capacitance$1107+2,___flmul@f1+2
  2760  000EF6  C0A8  F020         	movff	_measure_capacitance$1107+3,___flmul@f1+3
  2761  000EFA  ECF5  F00E         	call	___flmul	;wreg free
  2762  000EFE  C01D  F0A9         	movff	?___flmul,_measure_capacitance$1108
  2763  000F02  C01E  F0AA         	movff	?___flmul+1,_measure_capacitance$1108+1
  2764  000F06  C01F  F0AB         	movff	?___flmul+2,_measure_capacitance$1108+2
  2765  000F0A  C020  F0AC         	movff	?___flmul+3,_measure_capacitance$1108+3
  2766                           
  2767                           ;measure.c: 160: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2768  000F0E  C0BA  F021         	movff	_F2,___flmul@f2
  2769  000F12  C0BB  F022         	movff	_F2+1,___flmul@f2+1
  2770  000F16  C0BC  F023         	movff	_F2+2,___flmul@f2+2
  2771  000F1A  C0BD  F024         	movff	_F2+3,___flmul@f2+3
  2772  000F1E  C0A9  F01D         	movff	_measure_capacitance$1108,___flmul@f1
  2773  000F22  C0AA  F01E         	movff	_measure_capacitance$1108+1,___flmul@f1+1
  2774  000F26  C0AB  F01F         	movff	_measure_capacitance$1108+2,___flmul@f1+2
  2775  000F2A  C0AC  F020         	movff	_measure_capacitance$1108+3,___flmul@f1+3
  2776  000F2E  ECF5  F00E         	call	___flmul	;wreg free
  2777  000F32  C01D  F0AD         	movff	?___flmul,_measure_capacitance$1109
  2778  000F36  C01E  F0AE         	movff	?___flmul+1,_measure_capacitance$1109+1
  2779  000F3A  C01F  F0AF         	movff	?___flmul+2,_measure_capacitance$1109+2
  2780  000F3E  C020  F0B0         	movff	?___flmul+3,_measure_capacitance$1109+3
  2781                           
  2782                           ;measure.c: 160: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2783  000F42  C0AD  F01D         	movff	_measure_capacitance$1109,___flmul@f1
  2784  000F46  C0AE  F01E         	movff	_measure_capacitance$1109+1,___flmul@f1+1
  2785  000F4A  C0AF  F01F         	movff	_measure_capacitance$1109+2,___flmul@f1+2
  2786  000F4E  C0B0  F020         	movff	_measure_capacitance$1109+3,___flmul@f1+3
  2787  000F52  C0EB  F021         	movff	_CCal,___flmul@f2
  2788  000F56  C0EC  F022         	movff	_CCal+1,___flmul@f2+1
  2789  000F5A  C0ED  F023         	movff	_CCal+2,___flmul@f2+2
  2790  000F5E  C0EE  F024         	movff	_CCal+3,___flmul@f2+3
  2791  000F62  ECF5  F00E         	call	___flmul	;wreg free
  2792  000F66  C01D  F0B4         	movff	?___flmul,measure_capacitance@Cin
  2793  000F6A  C01E  F0B5         	movff	?___flmul+1,measure_capacitance@Cin+1
  2794  000F6E  C01F  F0B6         	movff	?___flmul+2,measure_capacitance@Cin+2
  2795  000F72  C020  F0B7         	movff	?___flmul+3,measure_capacitance@Cin+3
  2796                           
  2797                           ;measure.c: 164: ser_puts("Cin=");
  2798  000F76  0ED5               	movlw	STR_13& (0+255)
  2799  000F78  EC9F  F014         	call	_ser_puts
  2800                           
  2801                           ;measure.c: 165: format_double(Cin);
  2802  000F7C  C0B4  F091         	movff	measure_capacitance@Cin,format_double@num
  2803  000F80  C0B5  F092         	movff	measure_capacitance@Cin+1,format_double@num+1
  2804  000F84  C0B6  F093         	movff	measure_capacitance@Cin+2,format_double@num+2
  2805  000F88  C0B7  F094         	movff	measure_capacitance@Cin+3,format_double@num+3
  2806  000F8C  EC95  F00A         	call	_format_double	;wreg free
  2807                           
  2808                           ;measure.c: 166: ser_putch(' ');
  2809  000F90  0E20               	movlw	32
  2810  000F92  EC57  F014         	call	_ser_putch
  2811                           
  2812                           ;measure.c: 167: format_xint32(*(uint32_t*)&Cin);
  2813  000F96  C0B4  F036         	movff	measure_capacitance@Cin,format_xint32@x
  2814  000F9A  C0B5  F037         	movff	measure_capacitance@Cin+1,format_xint32@x+1
  2815  000F9E  C0B6  F038         	movff	measure_capacitance@Cin+2,format_xint32@x+2
  2816  000FA2  C0B7  F039         	movff	measure_capacitance@Cin+3,format_xint32@x+3
  2817  000FA6  EC92  F013         	call	_format_xint32	;wreg free
  2818                           
  2819                           ;measure.c: 168: ser_puts("\r\n");
  2820  000FAA  0EF8               	movlw	STR_2& (0+255)
  2821  000FAC  EC9F  F014         	call	_ser_puts
  2822                           
  2823                           ;measure.c: 170: if(Cin > 999) {
  2824  000FB0  D8D6               	call	PL30	;call to abstracted procedure
  2825  000FB2  C0B4  F008         	movff	measure_capacitance@Cin,___flge@ff2
  2826  000FB6  C0B5  F009         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2827  000FBA  C0B6  F00A         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2828  000FBE  C0B7  F00B         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2829  000FC2  EC60  F012         	call	___flge	;wreg free
  2830  000FC6  E24D               	bc	l4142
  2831                           
  2832                           ;measure.c: 171: if(Cin > (999e+03l)) {
  2833  000FC8  D8B0               	call	PL20	;call to abstracted procedure
  2834  000FCA  C0B4  F008         	movff	measure_capacitance@Cin,___flge@ff2
  2835  000FCE  C0B5  F009         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2836  000FD2  C0B6  F00A         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2837  000FD6  C0B7  F00B         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2838  000FDA  EC60  F012         	call	___flge	;wreg free
  2839  000FDE  E22F               	bc	l4138
  2840                           
  2841                           ;measure.c: 172: if(Cin > (999e+06l)) {
  2842  000FE0  D8AD               	call	PL22	;call to abstracted procedure
  2843  000FE2  C0B4  F008         	movff	measure_capacitance@Cin,___flge@ff2
  2844  000FE6  C0B5  F009         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2845  000FEA  C0B6  F00A         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2846  000FEE  C0B7  F00B         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2847  000FF2  EC60  F012         	call	___flge	;wreg free
  2848  000FF6  E215               	bc	l4134
  2849                           
  2850                           ;measure.c: 173: Cin = Cin / (1e+09);
  2851  000FF8  C0B4  F00E         	movff	measure_capacitance@Cin,___fldiv@f1
  2852  000FFC  C0B5  F00F         	movff	measure_capacitance@Cin+1,___fldiv@f1+1
  2853  001000  C0B6  F010         	movff	measure_capacitance@Cin+2,___fldiv@f1+2
  2854  001004  C0B7  F011         	movff	measure_capacitance@Cin+3,___fldiv@f1+3
  2855  001008  D887               	call	PL18	;call to abstracted procedure
  2856  00100A  ECB8  F00F         	call	___fldiv	;wreg free
  2857  00100E  C00E  F0B4         	movff	?___fldiv,measure_capacitance@Cin
  2858  001012  C00F  F0B5         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2859  001016  C010  F0B6         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2860  00101A  C011  F0B7         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2861                           
  2862                           ;measure.c: 174: unit = 4;
  2863  00101E  0E04               	movlw	4
  2864  001020  D021               	goto	L3
  2865  001022                     l4134:
  2866                           
  2867                           ;measure.c: 176: Cin = Cin / (1e+06);
  2868  001022  D86F               	call	PL10	;call to abstracted procedure
  2869  001024  D8A4               	call	PL34	;call to abstracted procedure
  2870  001026  ECB8  F00F         	call	___fldiv	;wreg free
  2871  00102A  C00E  F0B4         	movff	?___fldiv,measure_capacitance@Cin
  2872  00102E  C00F  F0B5         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2873  001032  C010  F0B6         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2874  001036  C011  F0B7         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2875                           
  2876                           ;measure.c: 177: unit = 5;
  2877  00103A  0E05               	movlw	5
  2878  00103C  D013               	goto	L3
  2879  00103E                     l4138:
  2880                           
  2881                           ;measure.c: 180: Cin = Cin / 1e+03;
  2882  00103E  D861               	call	PL10	;call to abstracted procedure
  2883  001040  6E13               	movwf	___fldiv@f2+1,c
  2884  001042  0E7A               	movlw	122
  2885  001044  6E14               	movwf	___fldiv@f2+2,c
  2886  001046  0E44               	movlw	68
  2887  001048  6E15               	movwf	___fldiv@f2+3,c
  2888  00104A  ECB8  F00F         	call	___fldiv	;wreg free
  2889  00104E  C00E  F0B4         	movff	?___fldiv,measure_capacitance@Cin
  2890  001052  C00F  F0B5         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2891  001056  C010  F0B6         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2892  00105A  C011  F0B7         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2893                           
  2894                           ;measure.c: 181: unit = 6;
  2895  00105E  0E06               	movlw	6
  2896  001060  D001               	goto	L3
  2897  001062                     l4142:
  2898                           
  2899                           ;measure.c: 184: unit = 7;
  2900  001062  0E07               	movlw	7
  2901  001064                     L3:
  2902  001064  0100               	movlb	0	; () banked
  2903  001066  6FB1               	movwf	measure_capacitance@unit& (0+255),b
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;measure.c: 186: Cin = Cin * 100;
  2907  001068  C0B4  F01D         	movff	measure_capacitance@Cin,___flmul@f1
  2908  00106C  C0B5  F01E         	movff	measure_capacitance@Cin+1,___flmul@f1+1
  2909  001070  C0B6  F01F         	movff	measure_capacitance@Cin+2,___flmul@f1+2
  2910  001074  C0B7  F020         	movff	measure_capacitance@Cin+3,___flmul@f1+3
  2911  001078  D86A               	call	PL26	;call to abstracted procedure
  2912  00107A  ECF5  F00E         	call	___flmul	;wreg free
  2913  00107E  C01D  F0B4         	movff	?___flmul,measure_capacitance@Cin
  2914  001082  C01E  F0B5         	movff	?___flmul+1,measure_capacitance@Cin+1
  2915  001086  C01F  F0B6         	movff	?___flmul+2,measure_capacitance@Cin+2
  2916  00108A  C020  F0B7         	movff	?___flmul+3,measure_capacitance@Cin+3
  2917                           
  2918                           ;measure.c: 187: var = (uint16_t)Cin;
  2919  00108E  C0B4  F052         	movff	measure_capacitance@Cin,___fltol@f1
  2920  001092  C0B5  F053         	movff	measure_capacitance@Cin+1,___fltol@f1+1
  2921  001096  C0B6  F054         	movff	measure_capacitance@Cin+2,___fltol@f1+2
  2922  00109A  C0B7  F055         	movff	measure_capacitance@Cin+3,___fltol@f1+3
  2923  00109E  EC0A  F011         	call	___fltol	;wreg free
  2924  0010A2  C052  F0B2         	movff	?___fltol,measure_capacitance@var
  2925  0010A6  C053  F0B3         	movff	?___fltol+1,measure_capacitance@var+1
  2926                           
  2927                           ; BSR set to: 0
  2928                           ;measure.c: 189: print_reading(var);
  2929  0010AA  C0B2  F036         	movff	measure_capacitance@var,print_reading@measurement
  2930  0010AE  C0B3  F037         	movff	measure_capacitance@var+1,print_reading@measurement+1
  2931  0010B2  ECD6  F011         	call	_print_reading	;wreg free
  2932                           
  2933                           ;measure.c: 190: print_unit(unit);
  2934  0010B6  0100               	movlb	0	; () banked
  2935  0010B8  51B1               	movf	measure_capacitance@unit& (0+255),w,b
  2936  0010BA  EF2F  F014         	goto	_print_unit
  2937  0010BE                     __end_of_measure_capacitance:
  2938                           	opt stack 0
  2939  0010BE                     PL4:
  2940                           	opt stack 24
  2941  0010BE  C0BE  F021         	movff	_F3,___flmul@f2
  2942  0010C2  C0BF  F022         	movff	_F3+1,___flmul@f2+1
  2943  0010C6  C0C0  F023         	movff	_F3+2,___flmul@f2+2
  2944  0010CA  C0C1  F024         	movff	_F3+3,___flmul@f2+3
  2945  0010CE  C0BE  F01D         	movff	_F3,___flmul@f1
  2946  0010D2  C0BF  F01E         	movff	_F3+1,___flmul@f1+1
  2947  0010D6  C0C0  F01F         	movff	_F3+2,___flmul@f1+2
  2948  0010DA  C0C1  F020         	movff	_F3+3,___flmul@f1+3
  2949  0010DE  0012               	return	
  2950  0010E0                     __end_ofPL4:
  2951                           	opt stack 0
  2952  0010E0                     PL6:
  2953                           	opt stack 24
  2954  0010E0  C0E7  F004         	movff	_F1,___flge@ff1
  2955  0010E4  C0E8  F005         	movff	_F1+1,___flge@ff1+1
  2956  0010E8  C0E9  F006         	movff	_F1+2,___flge@ff1+2
  2957  0010EC  C0EA  F007         	movff	_F1+3,___flge@ff1+3
  2958  0010F0  C0BE  F008         	movff	_F3,___flge@ff2
  2959  0010F4  C0BF  F009         	movff	_F3+1,___flge@ff2+1
  2960  0010F8  C0C0  F00A         	movff	_F3+2,___flge@ff2+2
  2961  0010FC  C0C1  F00B         	movff	_F3+3,___flge@ff2+3
  2962  001100  0012               	return	
  2963  001102                     __end_ofPL6:
  2964                           	opt stack 0
  2965  001102                     PL10:
  2966                           	opt stack 23
  2967  001102  C0B4  F00E         	movff	measure_capacitance@Cin,___fldiv@f1
  2968  001106  C0B5  F00F         	movff	measure_capacitance@Cin+1,___fldiv@f1+1
  2969  00110A  C0B6  F010         	movff	measure_capacitance@Cin+2,___fldiv@f1+2
  2970  00110E  C0B7  F011         	movff	measure_capacitance@Cin+3,___fldiv@f1+3
  2971  001112  0E00               	movlw	0
  2972  001114  6E12               	movwf	___fldiv@f2,c
  2973  001116  0C00               	retlw	0
  2974  001118                     __end_ofPL10:
  2975                           	opt stack 0
  2976  001118                     PL18:
  2977                           	opt stack 24
  2978  001118  0E28               	movlw	40
  2979  00111A  6E12               	movwf	___fldiv@f2,c
  2980  00111C  0E6B               	movlw	107
  2981  00111E  6E13               	movwf	___fldiv@f2+1,c
  2982  001120  0E6E               	movlw	110
  2983  001122  6E14               	movwf	___fldiv@f2+2,c
  2984  001124  0E4E               	movlw	78
  2985  001126  6E15               	movwf	___fldiv@f2+3,c
  2986  001128  0C4E               	retlw	78
  2987  00112A                     __end_ofPL18:
  2988                           	opt stack 0
  2989  00112A                     PL20:
  2990                           	opt stack 24
  2991  00112A  0E80               	movlw	128
  2992  00112C  6E04               	movwf	___flge@ff1,c
  2993  00112E  0EE5               	movlw	229
  2994  001130  6E05               	movwf	___flge@ff1+1,c
  2995  001132  0E73               	movlw	115
  2996  001134  6E06               	movwf	___flge@ff1+2,c
  2997  001136  0E49               	movlw	73
  2998  001138  6E07               	movwf	___flge@ff1+3,c
  2999  00113A  0C49               	retlw	73
  3000  00113C                     __end_ofPL20:
  3001                           	opt stack 0
  3002  00113C                     PL22:
  3003                           	opt stack 24
  3004  00113C  0E1F               	movlw	31
  3005  00113E  6E04               	movwf	___flge@ff1,c
  3006  001140  0E2E               	movlw	46
  3007  001142  6E05               	movwf	___flge@ff1+1,c
  3008  001144  0E6E               	movlw	110
  3009  001146  6E06               	movwf	___flge@ff1+2,c
  3010  001148  0E4E               	movlw	78
  3011  00114A  6E07               	movwf	___flge@ff1+3,c
  3012  00114C  0C4E               	retlw	78
  3013  00114E                     __end_ofPL22:
  3014                           	opt stack 0
  3015  00114E                     PL26:
  3016                           	opt stack 24
  3017  00114E  0E00               	movlw	0
  3018  001150  6E21               	movwf	___flmul@f2,c
  3019  001152  6E22               	movwf	___flmul@f2+1,c
  3020  001154  0EC8               	movlw	200
  3021  001156  6E23               	movwf	___flmul@f2+2,c
  3022  001158  0E42               	movlw	66
  3023  00115A  6E24               	movwf	___flmul@f2+3,c
  3024  00115C  0C42               	retlw	66
  3025  00115E                     __end_ofPL26:
  3026                           	opt stack 0
  3027  00115E                     PL30:
  3028                           	opt stack 24
  3029  00115E  6A04               	clrf	___flge@ff1,c
  3030  001160  0EC0               	movlw	192
  3031  001162  6E05               	movwf	___flge@ff1+1,c
  3032  001164  0E79               	movlw	121
  3033  001166  6E06               	movwf	___flge@ff1+2,c
  3034  001168  0E44               	movlw	68
  3035  00116A  6E07               	movwf	___flge@ff1+3,c
  3036  00116C  0C44               	retlw	68
  3037  00116E                     __end_ofPL30:
  3038                           	opt stack 0
  3039  00116E                     PL34:
  3040                           	opt stack 24
  3041  00116E  0E24               	movlw	36
  3042  001170  6E13               	movwf	___fldiv@f2+1,c
  3043  001172  0E74               	movlw	116
  3044  001174  6E14               	movwf	___fldiv@f2+2,c
  3045  001176  0E49               	movlw	73
  3046  001178  6E15               	movwf	___fldiv@f2+3,c
  3047  00117A  0C49               	retlw	73
  3048  00117C                     __end_ofPL34:
  3049                           	opt stack 0
  3050                           tblptru	equ	0xFF8
  3051                           tblptrh	equ	0xFF7
  3052                           tblptrl	equ	0xFF6
  3053                           tablat	equ	0xFF5
  3054                           prodl	equ	0xFF3
  3055                           intcon	equ	0xFF2
  3056                           intcon2	equ	0xFF1
  3057                           postinc0	equ	0xFEE
  3058                           wreg	equ	0xFE8
  3059                           postdec1	equ	0xFE5
  3060                           fsr1l	equ	0xFE1
  3061                           indf2	equ	0xFDF
  3062                           postinc2	equ	0xFDE
  3063                           postdec2	equ	0xFDD
  3064                           fsr2h	equ	0xFDA
  3065                           fsr2l	equ	0xFD9
  3066                           status	equ	0xFD8
  3067                           
  3068 ;; *************** function _print_unit *****************
  3069 ;; Defined at:
  3070 ;;		line 123 in file "../../../src/print.c"
  3071 ;; Parameters:    Size  Location     Type
  3072 ;;  unit            1    wreg     unsigned char 
  3073 ;; Auto vars:     Size  Location     Type
  3074 ;;  unit            1    0[COMRAM] unsigned char 
  3075 ;; Return value:  Size  Location     Type
  3076 ;;		None               void
  3077 ;; Registers used:
  3078 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3079 ;; Tracked objects:
  3080 ;;		On entry : F/0
  3081 ;;		On exit  : 0/0
  3082 ;;		Unchanged: 0/0
  3083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3084 ;;      Params:         0       0       0       0       0       0       0       0       0
  3085 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3086 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3087 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3088 ;;Total ram usage:        2 bytes
  3089 ;; Hardware stack levels used:    1
  3090 ;; Hardware stack levels required when called:    5
  3091 ;; This function calls:
  3092 ;;		_lcd_gotoxy
  3093 ;;		_ser_puts
  3094 ;; This function is called by:
  3095 ;;		_measure_capacitance
  3096 ;;		_measure_inductance
  3097 ;; This function uses a non-reentrant model
  3098 ;;
  3099                           
  3100                           	psect	text7
  3101  00285E                     __ptext7:
  3102                           	opt stack 0
  3103  00285E                     _print_unit:
  3104                           	opt stack 24
  3105                           
  3106                           ; BSR set to: 0
  3107                           ;print.c: 131: static const char* units[8] = {"H", "mH", "uH", "nH", "mF", "uF", "nF", "
      +                          pF"};
  3108                           ;print.c: 132: lcd_gotoxy(14, 0);
  3109                           
  3110                           ;incstack = 0
  3111  00285E  6A08               	clrf	lcd_gotoxy@row,c
  3112  002860  0E0E               	movlw	14
  3113  002862  EC77  F013         	call	_lcd_gotoxy
  3114                           
  3115                           ;print.c: 136: lcd_gotoxy(16 - (buffer.n - buffer.p), 0);
  3116  002866  6A08               	clrf	lcd_gotoxy@row,c
  3117  002868  0100               	movlb	0	; () banked
  3118  00286A  39E6               	swapf	(_buffer+16)& (0+255),w,b
  3119  00286C  0B0F               	andlw	15
  3120  00286E  6E0E               	movwf	??_print_unit& (0+255),c
  3121  002870  51E6               	movf	(_buffer+16)& (0+255),w,b
  3122  002872  0B0F               	andlw	15
  3123  002874  6E0F               	movwf	(??_print_unit+1)& (0+255),c
  3124  002876  500E               	movf	??_print_unit,w,c
  3125  002878  5C0F               	subwf	??_print_unit+1,w,c
  3126  00287A  0F10               	addlw	16
  3127  00287C  EC77  F013         	call	_lcd_gotoxy
  3128                           
  3129                           ;print.c: 139: ser_puts("\r\n");
  3130  002880  0EF8               	movlw	STR_2& (0+255)
  3131  002882  EF9F  F014         	goto	_ser_puts
  3132  002886                     __end_of_print_unit:
  3133                           	opt stack 0
  3134                           tblptru	equ	0xFF8
  3135                           tblptrh	equ	0xFF7
  3136                           tblptrl	equ	0xFF6
  3137                           tablat	equ	0xFF5
  3138                           prodl	equ	0xFF3
  3139                           intcon	equ	0xFF2
  3140                           intcon2	equ	0xFF1
  3141                           postinc0	equ	0xFEE
  3142                           wreg	equ	0xFE8
  3143                           postdec1	equ	0xFE5
  3144                           fsr1l	equ	0xFE1
  3145                           indf2	equ	0xFDF
  3146                           postinc2	equ	0xFDE
  3147                           postdec2	equ	0xFDD
  3148                           fsr2h	equ	0xFDA
  3149                           fsr2l	equ	0xFD9
  3150                           status	equ	0xFD8
  3151                           
  3152 ;; *************** function _print_reading *****************
  3153 ;; Defined at:
  3154 ;;		line 144 in file "../../../src/print.c"
  3155 ;; Parameters:    Size  Location     Type
  3156 ;;  measurement     2   53[COMRAM] unsigned int 
  3157 ;; Auto vars:     Size  Location     Type
  3158 ;;		None
  3159 ;; Return value:  Size  Location     Type
  3160 ;;		None               void
  3161 ;; Registers used:
  3162 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3163 ;; Tracked objects:
  3164 ;;		On entry : F/0
  3165 ;;		On exit  : 0/0
  3166 ;;		Unchanged: 0/0
  3167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3168 ;;      Params:         2       0       0       0       0       0       0       0       0
  3169 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3170 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3171 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3172 ;;Total ram usage:        6 bytes
  3173 ;; Hardware stack levels used:    1
  3174 ;; Hardware stack levels required when called:    5
  3175 ;; This function calls:
  3176 ;;		___lwdiv
  3177 ;;		___lwmod
  3178 ;;		_format_number
  3179 ;;		_lcd_gotoxy
  3180 ;;		_lcd_puts
  3181 ;; This function is called by:
  3182 ;;		_measure_capacitance
  3183 ;;		_measure_inductance
  3184 ;; This function uses a non-reentrant model
  3185 ;;
  3186                           
  3187                           	psect	text8
  3188  0023AC                     __ptext8:
  3189                           	opt stack 0
  3190  0023AC                     _print_reading:
  3191                           	opt stack 24
  3192                           
  3193                           ; BSR set to: 0
  3194                           ;print.c: 171: lcd_gotoxy(9, 0);
  3195                           
  3196                           ;incstack = 0
  3197  0023AC  6A08               	clrf	lcd_gotoxy@row,c
  3198  0023AE  0E09               	movlw	9
  3199  0023B0  EC77  F013         	call	_lcd_gotoxy
  3200                           
  3201                           ;print.c: 172: lcd_puts("     ");
  3202  0023B4  0EB2               	movlw	(STR_33+1)& (0+255)
  3203  0023B6  ECF0  F013         	call	_lcd_puts
  3204                           
  3205                           ;print.c: 173: lcd_gotoxy(9, 0);
  3206  0023BA  6A08               	clrf	lcd_gotoxy@row,c
  3207  0023BC  0E09               	movlw	9
  3208  0023BE  EC77  F013         	call	_lcd_gotoxy
  3209                           
  3210                           ;print.c: 175: format_number(measurement / 100, 10, 0);
  3211  0023C2  C036  F004         	movff	print_reading@measurement,___lwdiv@dividend
  3212  0023C6  C037  F005         	movff	print_reading@measurement+1,___lwdiv@dividend+1
  3213  0023CA  6A07               	clrf	___lwdiv@divisor+1,c
  3214  0023CC  0E64               	movlw	100
  3215  0023CE  6E06               	movwf	___lwdiv@divisor,c
  3216  0023D0  ECAB  F012         	call	___lwdiv	;wreg free
  3217  0023D4  C004  F038         	movff	?___lwdiv,_print_reading$1117
  3218  0023D8  C005  F039         	movff	?___lwdiv+1,_print_reading$1117+1
  3219                           
  3220                           ;print.c: 175: format_number(measurement / 100, 10, 0);
  3221  0023DC  C038  F00B         	movff	_print_reading$1117,format_number@n
  3222  0023E0  C039  F00C         	movff	_print_reading$1117+1,format_number@n+1
  3223  0023E4  0E0A               	movlw	10
  3224  0023E6  6E0D               	movwf	format_number@base,c
  3225  0023E8  6A0E               	clrf	format_number@pad,c
  3226  0023EA  EC65  F010         	call	_format_number	;wreg free
  3227                           
  3228                           ;print.c: 177: format_number(measurement % 100, 10, 0);
  3229  0023EE  C036  F004         	movff	print_reading@measurement,___lwmod@dividend
  3230  0023F2  C037  F005         	movff	print_reading@measurement+1,___lwmod@dividend+1
  3231  0023F6  6A07               	clrf	___lwmod@divisor+1,c
  3232  0023F8  0E64               	movlw	100
  3233  0023FA  6E06               	movwf	___lwmod@divisor,c
  3234  0023FC  EC3B  F013         	call	___lwmod	;wreg free
  3235  002400  C004  F03A         	movff	?___lwmod,_print_reading$1118
  3236  002404  C005  F03B         	movff	?___lwmod+1,_print_reading$1118+1
  3237                           
  3238                           ;print.c: 177: format_number(measurement % 100, 10, 0);
  3239  002408  C03A  F00B         	movff	_print_reading$1118,format_number@n
  3240  00240C  C03B  F00C         	movff	_print_reading$1118+1,format_number@n+1
  3241  002410  0E0A               	movlw	10
  3242  002412  6E0D               	movwf	format_number@base,c
  3243  002414  6A0E               	clrf	format_number@pad,c
  3244  002416  EF65  F010         	goto	_format_number	;wreg free
  3245  00241A                     __end_of_print_reading:
  3246                           	opt stack 0
  3247                           tblptru	equ	0xFF8
  3248                           tblptrh	equ	0xFF7
  3249                           tblptrl	equ	0xFF6
  3250                           tablat	equ	0xFF5
  3251                           prodl	equ	0xFF3
  3252                           intcon	equ	0xFF2
  3253                           intcon2	equ	0xFF1
  3254                           postinc0	equ	0xFEE
  3255                           wreg	equ	0xFE8
  3256                           postdec1	equ	0xFE5
  3257                           fsr1l	equ	0xFE1
  3258                           indf2	equ	0xFDF
  3259                           postinc2	equ	0xFDE
  3260                           postdec2	equ	0xFDD
  3261                           fsr2h	equ	0xFDA
  3262                           fsr2l	equ	0xFD9
  3263                           status	equ	0xFD8
  3264                           
  3265 ;; *************** function _lcd_puts *****************
  3266 ;; Defined at:
  3267 ;;		line 163 in file "../../../lib/lcd44780.c"
  3268 ;; Parameters:    Size  Location     Type
  3269 ;;  string          1    wreg     PTR const unsigned char 
  3270 ;;		 -> STR_36(5), STR_35(6), STR_34(7), STR_33(7), 
  3271 ;;		 -> STR_29(10), STR_27(4), STR_26(4), STR_25(6), 
  3272 ;; Auto vars:     Size  Location     Type
  3273 ;;  string          1    8[COMRAM] PTR const unsigned char 
  3274 ;;		 -> STR_36(5), STR_35(6), STR_34(7), STR_33(7), 
  3275 ;;		 -> STR_29(10), STR_27(4), STR_26(4), STR_25(6), 
  3276 ;;  i               1    7[COMRAM] unsigned char 
  3277 ;; Return value:  Size  Location     Type
  3278 ;;		None               void
  3279 ;; Registers used:
  3280 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3281 ;; Tracked objects:
  3282 ;;		On entry : 0/0
  3283 ;;		On exit  : 0/0
  3284 ;;		Unchanged: 0/0
  3285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3286 ;;      Params:         0       0       0       0       0       0       0       0       0
  3287 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3288 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3289 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3290 ;;Total ram usage:        3 bytes
  3291 ;; Hardware stack levels used:    1
  3292 ;; Hardware stack levels required when called:    3
  3293 ;; This function calls:
  3294 ;;		_lcd_send
  3295 ;; This function is called by:
  3296 ;;		_print_reading
  3297 ;;		_print_indicator
  3298 ;;		_main
  3299 ;; This function uses a non-reentrant model
  3300 ;;
  3301                           
  3302                           	psect	text9
  3303  0027E0                     __ptext9:
  3304                           	opt stack 0
  3305  0027E0                     _lcd_puts:
  3306                           	opt stack 26
  3307                           
  3308                           ;incstack = 0
  3309                           ;lcd_puts@string stored from wreg
  3310  0027E0  6E09               	movwf	lcd_puts@string,c
  3311                           
  3312                           ;lcd44780.c: 164: uint8_t i;
  3313                           ;lcd44780.c: 165: for(i = 0; string[i]; i++) lcd_send((string[i]), 1);
  3314  0027E2  6A08               	clrf	lcd_puts@i,c
  3315  0027E4  D006               	goto	l3048
  3316  0027E6                     l3044:
  3317  0027E6  0E01               	movlw	1
  3318  0027E8  6E05               	movwf	lcd_send@mode,c
  3319  0027EA  D807               	call	PL32	;call to abstracted procedure
  3320  0027EC  ECCB  F014         	call	_lcd_send
  3321  0027F0  2A08               	incf	lcd_puts@i,f,c
  3322  0027F2                     l3048:
  3323  0027F2  D803               	call	PL32	;call to abstracted procedure
  3324  0027F4  B4D8               	btfsc	status,2,c
  3325  0027F6  0012               	return		;funcret
  3326  0027F8  D7F6               	goto	l3044
  3327  0027FA                     __end_of_lcd_puts:
  3328                           	opt stack 0
  3329  0027FA                     PL32:
  3330                           	opt stack 26
  3331  0027FA  5009               	movf	lcd_puts@string,w,c
  3332  0027FC  2408               	addwf	lcd_puts@i,w,c
  3333  0027FE  6E07               	movwf	??_lcd_puts& (0+255),c
  3334  002800  C007  FFF6         	movff	??_lcd_puts,tblptrl
  3335  002804                     	if	0	;There is only one active tblptr byte
  3336  002804                     	endif
  3337  002804                     	if	0	;tblptru may be non-zero
  3338  002804                     	endif
  3339  002804                     	if	0	;tblptru may be non-zero
  3340  002804                     	endif
  3341  002804  0008               	tblrd		*
  3342  002806  50F5               	movf	tablat,w,c
  3343  002808  0012               	return	
  3344  00280A                     __end_ofPL32:
  3345                           	opt stack 0
  3346                           tblptru	equ	0xFF8
  3347                           tblptrh	equ	0xFF7
  3348                           tblptrl	equ	0xFF6
  3349                           tablat	equ	0xFF5
  3350                           prodl	equ	0xFF3
  3351                           intcon	equ	0xFF2
  3352                           intcon2	equ	0xFF1
  3353                           postinc0	equ	0xFEE
  3354                           wreg	equ	0xFE8
  3355                           postdec1	equ	0xFE5
  3356                           fsr1l	equ	0xFE1
  3357                           indf2	equ	0xFDF
  3358                           postinc2	equ	0xFDE
  3359                           postdec2	equ	0xFDD
  3360                           fsr2h	equ	0xFDA
  3361                           fsr2l	equ	0xFD9
  3362                           status	equ	0xFD8
  3363                           
  3364 ;; *************** function _format_xint32 *****************
  3365 ;; Defined at:
  3366 ;;		line 51 in file "../../../lib/format.c"
  3367 ;; Parameters:    Size  Location     Type
  3368 ;;  x               4   53[COMRAM] unsigned long 
  3369 ;; Auto vars:     Size  Location     Type
  3370 ;;		None
  3371 ;; Return value:  Size  Location     Type
  3372 ;;		None               void
  3373 ;; Registers used:
  3374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3375 ;; Tracked objects:
  3376 ;;		On entry : 0/0
  3377 ;;		On exit  : 0/0
  3378 ;;		Unchanged: 0/0
  3379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3380 ;;      Params:         4       0       0       0       0       0       0       0       0
  3381 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3382 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3383 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3384 ;;Total ram usage:        4 bytes
  3385 ;; Hardware stack levels used:    1
  3386 ;; Hardware stack levels required when called:    3
  3387 ;; This function calls:
  3388 ;;		_buffer_putch
  3389 ;;		_format_number
  3390 ;; This function is called by:
  3391 ;;		_measure_capacitance
  3392 ;; This function uses a non-reentrant model
  3393 ;;
  3394                           
  3395                           	psect	text10
  3396  002724                     __ptext10:
  3397                           	opt stack 0
  3398  002724                     _format_xint32:
  3399                           	opt stack 26
  3400                           
  3401                           ;format.c: 52: buffer_putch('0');
  3402                           
  3403                           ;incstack = 0
  3404  002724  0E30               	movlw	48
  3405  002726  ECD0  F012         	call	_buffer_putch
  3406                           
  3407                           ;format.c: 53: buffer_putch('x');
  3408  00272A  0E78               	movlw	120
  3409  00272C  ECD0  F012         	call	_buffer_putch
  3410                           
  3411                           ;format.c: 54: format_number((uint16_t)(x >> 16), 16, -4);
  3412  002730  C038  F00B         	movff	format_xint32@x+2,format_number@n
  3413  002734  C039  F00C         	movff	format_xint32@x+3,format_number@n+1
  3414  002738  0E10               	movlw	16
  3415  00273A  6E0D               	movwf	format_number@base,c
  3416  00273C  0EFC               	movlw	252
  3417  00273E  6E0E               	movwf	format_number@pad,c
  3418  002740  EC65  F010         	call	_format_number	;wreg free
  3419                           
  3420                           ;format.c: 55: format_number((uint16_t)(x & 0xffff), 16, -4);
  3421  002744  C036  F00B         	movff	format_xint32@x,format_number@n
  3422  002748  C037  F00C         	movff	format_xint32@x+1,format_number@n+1
  3423  00274C  0E10               	movlw	16
  3424  00274E  6E0D               	movwf	format_number@base,c
  3425  002750  0EFC               	movlw	252
  3426  002752  6E0E               	movwf	format_number@pad,c
  3427  002754  EF65  F010         	goto	_format_number	;wreg free
  3428  002758                     __end_of_format_xint32:
  3429                           	opt stack 0
  3430                           tblptru	equ	0xFF8
  3431                           tblptrh	equ	0xFF7
  3432                           tblptrl	equ	0xFF6
  3433                           tablat	equ	0xFF5
  3434                           prodl	equ	0xFF3
  3435                           intcon	equ	0xFF2
  3436                           intcon2	equ	0xFF1
  3437                           postinc0	equ	0xFEE
  3438                           wreg	equ	0xFE8
  3439                           postdec1	equ	0xFE5
  3440                           fsr1l	equ	0xFE1
  3441                           indf2	equ	0xFDF
  3442                           postinc2	equ	0xFDE
  3443                           postdec2	equ	0xFDD
  3444                           fsr2h	equ	0xFDA
  3445                           fsr2l	equ	0xFD9
  3446                           status	equ	0xFD8
  3447                           
  3448 ;; *************** function _format_double *****************
  3449 ;; Defined at:
  3450 ;;		line 77 in file "../../../lib/format.c"
  3451 ;; Parameters:    Size  Location     Type
  3452 ;;  num             4   49[BANK0 ] unsigned long 
  3453 ;; Auto vars:     Size  Location     Type
  3454 ;;  weight          4   61[BANK0 ] unsigned long 
  3455 ;;  m               2   67[BANK0 ] short 
  3456 ;;  digit           2   65[BANK0 ] short 
  3457 ;; Return value:  Size  Location     Type
  3458 ;;		None               void
  3459 ;; Registers used:
  3460 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3461 ;; Tracked objects:
  3462 ;;		On entry : 0/0
  3463 ;;		On exit  : 0/0
  3464 ;;		Unchanged: 0/0
  3465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3466 ;;      Params:         0       4       0       0       0       0       0       0       0
  3467 ;;      Locals:         0      16       0       0       0       0       0       0       0
  3468 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3469 ;;      Totals:         0      20       0       0       0       0       0       0       0
  3470 ;;Total ram usage:       20 bytes
  3471 ;; Hardware stack levels used:    1
  3472 ;; Hardware stack levels required when called:    6
  3473 ;; This function calls:
  3474 ;;		___awtofl
  3475 ;;		___fldiv
  3476 ;;		___flge
  3477 ;;		___flmul
  3478 ;;		___flsub
  3479 ;;		___fltol
  3480 ;;		_buffer_putch
  3481 ;;		_floor
  3482 ;;		_log10
  3483 ;;		_pow
  3484 ;; This function is called by:
  3485 ;;		_measure_capacitance
  3486 ;;		_main
  3487 ;; This function uses a non-reentrant model
  3488 ;;
  3489                           
  3490                           	psect	text11
  3491  00152A                     __ptext11:
  3492                           	opt stack 0
  3493  00152A                     _format_double:
  3494                           	opt stack 23
  3495                           
  3496                           ;format.c: 78: short m = (short)log10(num);
  3497                           
  3498                           ;incstack = 0
  3499  00152A  C091  F04A         	movff	format_double@num,log10@x
  3500  00152E  C092  F04B         	movff	format_double@num+1,log10@x+1
  3501  001532  C093  F04C         	movff	format_double@num+2,log10@x+2
  3502  001536  C094  F04D         	movff	format_double@num+3,log10@x+3
  3503  00153A  EC0D  F012         	call	_log10	;wreg free
  3504  00153E  C04A  F052         	movff	?_log10,___fltol@f1
  3505  001542  C04B  F053         	movff	?_log10+1,___fltol@f1+1
  3506  001546  C04C  F054         	movff	?_log10+2,___fltol@f1+2
  3507  00154A  C04D  F055         	movff	?_log10+3,___fltol@f1+3
  3508  00154E  EC0A  F011         	call	___fltol	;wreg free
  3509  001552  C052  F0A3         	movff	?___fltol,format_double@m
  3510  001556  C053  F0A4         	movff	?___fltol+1,format_double@m+1
  3511                           
  3512                           ;format.c: 79: short digit;
  3513                           ;format.c: 82: while(num > 0 + 1.19209290e-07) {
  3514  00155A  D099               	goto	l4014
  3515  00155C                     l3996:
  3516                           
  3517                           ;format.c: 83: double weight = pow(10.0l, m);
  3518  00155C  C0A3  F00E         	movff	format_double@m,___awtofl@c
  3519  001560  C0A4  F00F         	movff	format_double@m+1,___awtofl@c+1
  3520  001564  EC5A  F013         	call	___awtofl	;wreg free
  3521  001568  C00E  F095         	movff	?___awtofl,_format_double$1105
  3522  00156C  C00F  F096         	movff	?___awtofl+1,_format_double$1105+1
  3523  001570  C010  F097         	movff	?___awtofl+2,_format_double$1105+2
  3524  001574  C011  F098         	movff	?___awtofl+3,_format_double$1105+3
  3525                           
  3526                           ;format.c: 83: double weight = pow(10.0l, m);
  3527  001578  0100               	movlb	0	; () banked
  3528  00157A  6B7C               	clrf	pow@x& (0+255),b
  3529  00157C  6B7D               	clrf	(pow@x+1)& (0+255),b
  3530  00157E  0E20               	movlw	32
  3531  001580  6F7E               	movwf	(pow@x+2)& (0+255),b
  3532  001582  0E41               	movlw	65
  3533  001584  6F7F               	movwf	(pow@x+3)& (0+255),b
  3534  001586  C095  F080         	movff	_format_double$1105,pow@y
  3535  00158A  C096  F081         	movff	_format_double$1105+1,pow@y+1
  3536  00158E  C097  F082         	movff	_format_double$1105+2,pow@y+2
  3537  001592  C098  F083         	movff	_format_double$1105+3,pow@y+3
  3538  001596  ECCC  F009         	call	_pow	;wreg free
  3539  00159A  C07C  F09D         	movff	?_pow,format_double@weight
  3540  00159E  C07D  F09E         	movff	?_pow+1,format_double@weight+1
  3541  0015A2  C07E  F09F         	movff	?_pow+2,format_double@weight+2
  3542  0015A6  C07F  F0A0         	movff	?_pow+3,format_double@weight+3
  3543                           
  3544                           ; BSR set to: 0
  3545                           ;format.c: 84: digit = (short)floor(num / weight);
  3546  0015AA  C09D  F012         	movff	format_double@weight,___fldiv@f2
  3547  0015AE  C09E  F013         	movff	format_double@weight+1,___fldiv@f2+1
  3548  0015B2  C09F  F014         	movff	format_double@weight+2,___fldiv@f2+2
  3549  0015B6  C0A0  F015         	movff	format_double@weight+3,___fldiv@f2+3
  3550  0015BA  C091  F00E         	movff	format_double@num,___fldiv@f1
  3551  0015BE  C092  F00F         	movff	format_double@num+1,___fldiv@f1+1
  3552  0015C2  C093  F010         	movff	format_double@num+2,___fldiv@f1+2
  3553  0015C6  C094  F011         	movff	format_double@num+3,___fldiv@f1+3
  3554  0015CA  ECB8  F00F         	call	___fldiv	;wreg free
  3555  0015CE  C00E  F067         	movff	?___fldiv,floor@x
  3556  0015D2  C00F  F068         	movff	?___fldiv+1,floor@x+1
  3557  0015D6  C010  F069         	movff	?___fldiv+2,floor@x+2
  3558  0015DA  C011  F06A         	movff	?___fldiv+3,floor@x+3
  3559  0015DE  ECA1  F00D         	call	_floor	;wreg free
  3560  0015E2  C067  F099         	movff	?_floor,_format_double$1106
  3561  0015E6  C068  F09A         	movff	?_floor+1,_format_double$1106+1
  3562  0015EA  C069  F09B         	movff	?_floor+2,_format_double$1106+2
  3563  0015EE  C06A  F09C         	movff	?_floor+3,_format_double$1106+3
  3564                           
  3565                           ;format.c: 84: digit = (short)floor(num / weight);
  3566  0015F2  C099  F052         	movff	_format_double$1106,___fltol@f1
  3567  0015F6  C09A  F053         	movff	_format_double$1106+1,___fltol@f1+1
  3568  0015FA  C09B  F054         	movff	_format_double$1106+2,___fltol@f1+2
  3569  0015FE  C09C  F055         	movff	_format_double$1106+3,___fltol@f1+3
  3570  001602  EC0A  F011         	call	___fltol	;wreg free
  3571  001606  C052  F0A1         	movff	?___fltol,format_double@digit
  3572  00160A  C053  F0A2         	movff	?___fltol+1,format_double@digit+1
  3573                           
  3574                           ; BSR set to: 0
  3575                           ;format.c: 85: num -= (digit * weight);
  3576  00160E  C091  F038         	movff	format_double@num,___flsub@f1
  3577  001612  C092  F039         	movff	format_double@num+1,___flsub@f1+1
  3578  001616  C093  F03A         	movff	format_double@num+2,___flsub@f1+2
  3579  00161A  C094  F03B         	movff	format_double@num+3,___flsub@f1+3
  3580  00161E  C09D  F021         	movff	format_double@weight,___flmul@f2
  3581  001622  C09E  F022         	movff	format_double@weight+1,___flmul@f2+1
  3582  001626  C09F  F023         	movff	format_double@weight+2,___flmul@f2+2
  3583  00162A  C0A0  F024         	movff	format_double@weight+3,___flmul@f2+3
  3584  00162E  C0A1  F00E         	movff	format_double@digit,___awtofl@c
  3585  001632  C0A2  F00F         	movff	format_double@digit+1,___awtofl@c+1
  3586  001636  EC5A  F013         	call	___awtofl	;wreg free
  3587  00163A  C00E  F01D         	movff	?___awtofl,___flmul@f1
  3588  00163E  C00F  F01E         	movff	?___awtofl+1,___flmul@f1+1
  3589  001642  C010  F01F         	movff	?___awtofl+2,___flmul@f1+2
  3590  001646  C011  F020         	movff	?___awtofl+3,___flmul@f1+3
  3591  00164A  ECF5  F00E         	call	___flmul	;wreg free
  3592  00164E  C01D  F03C         	movff	?___flmul,___flsub@f2
  3593  001652  C01E  F03D         	movff	?___flmul+1,___flsub@f2+1
  3594  001656  C01F  F03E         	movff	?___flmul+2,___flsub@f2+2
  3595  00165A  C020  F03F         	movff	?___flmul+3,___flsub@f2+3
  3596  00165E  EC19  F013         	call	___flsub	;wreg free
  3597  001662  C038  F091         	movff	?___flsub,format_double@num
  3598  001666  C039  F092         	movff	?___flsub+1,format_double@num+1
  3599  00166A  C03A  F093         	movff	?___flsub+2,format_double@num+2
  3600  00166E  C03B  F094         	movff	?___flsub+3,format_double@num+3
  3601                           
  3602                           ;format.c: 86: buffer_putch((char)('0' + digit));
  3603  001672  0100               	movlb	0	; () banked
  3604  001674  51A1               	movf	format_double@digit& (0+255),w,b
  3605  001676  0F30               	addlw	48
  3606  001678  ECD0  F012         	call	_buffer_putch
  3607                           
  3608                           ; BSR set to: 0
  3609                           ;format.c: 87: if(m == 0)
  3610  00167C  51A3               	movf	format_double@m& (0+255),w,b
  3611  00167E  11A4               	iorwf	(format_double@m+1)& (0+255),w,b
  3612  001680  E103               	bnz	l4012
  3613                           
  3614                           ; BSR set to: 0
  3615                           ;format.c: 88: buffer_putch('.');
  3616  001682  0E2E               	movlw	46
  3617  001684  ECD0  F012         	call	_buffer_putch
  3618  001688                     l4012:
  3619                           
  3620                           ; BSR set to: 0
  3621                           ;format.c: 89: m--;
  3622  001688  07A3               	decf	format_double@m& (0+255),f,b
  3623  00168A  A0D8               	btfss	status,0,c
  3624  00168C  07A4               	decf	(format_double@m+1)& (0+255),f,b
  3625  00168E                     l4014:
  3626                           
  3627                           ; BSR set to: 0
  3628  00168E  6A04               	clrf	___flge@ff1,c
  3629  001690  6A05               	clrf	___flge@ff1+1,c
  3630  001692  6A06               	clrf	___flge@ff1+2,c
  3631  001694  0E34               	movlw	52
  3632  001696  6E07               	movwf	___flge@ff1+3,c
  3633  001698  C091  F008         	movff	format_double@num,___flge@ff2
  3634  00169C  C092  F009         	movff	format_double@num+1,___flge@ff2+1
  3635  0016A0  C093  F00A         	movff	format_double@num+2,___flge@ff2+2
  3636  0016A4  C094  F00B         	movff	format_double@num+3,___flge@ff2+3
  3637  0016A8  EC60  F012         	call	___flge	;wreg free
  3638  0016AC  B0D8               	btfsc	status,0,c
  3639  0016AE  0012               	return		;funcret
  3640  0016B0  D755               	goto	l3996
  3641  0016B2                     __end_of_format_double:
  3642                           	opt stack 0
  3643                           tblptru	equ	0xFF8
  3644                           tblptrh	equ	0xFF7
  3645                           tblptrl	equ	0xFF6
  3646                           tablat	equ	0xFF5
  3647                           prodl	equ	0xFF3
  3648                           intcon	equ	0xFF2
  3649                           intcon2	equ	0xFF1
  3650                           postinc0	equ	0xFEE
  3651                           wreg	equ	0xFE8
  3652                           postdec1	equ	0xFE5
  3653                           fsr1l	equ	0xFE1
  3654                           indf2	equ	0xFDF
  3655                           postinc2	equ	0xFDE
  3656                           postdec2	equ	0xFDD
  3657                           fsr2h	equ	0xFDA
  3658                           fsr2l	equ	0xFD9
  3659                           status	equ	0xFD8
  3660                           
  3661 ;; *************** function _pow *****************
  3662 ;; Defined at:
  3663 ;;		line 5 in file "/opt/microchip/xc8/v1.34/sources/common/pow.c"
  3664 ;; Parameters:    Size  Location     Type
  3665 ;;  x               4   28[BANK0 ] short 
  3666 ;;  y               4   32[BANK0 ] short 
  3667 ;; Auto vars:     Size  Location     Type
  3668 ;;  yi              4   45[BANK0 ] unsigned long 
  3669 ;;  sign            1   44[BANK0 ] unsigned char 
  3670 ;; Return value:  Size  Location     Type
  3671 ;;                  4   28[BANK0 ] unsigned char 
  3672 ;; Registers used:
  3673 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3674 ;; Tracked objects:
  3675 ;;		On entry : F/0
  3676 ;;		On exit  : F/0
  3677 ;;		Unchanged: 0/0
  3678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3679 ;;      Params:         0       8       0       0       0       0       0       0       0
  3680 ;;      Locals:         0      13       0       0       0       0       0       0       0
  3681 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3682 ;;      Totals:         0      21       0       0       0       0       0       0       0
  3683 ;;Total ram usage:       21 bytes
  3684 ;; Hardware stack levels used:    1
  3685 ;; Hardware stack levels required when called:    5
  3686 ;; This function calls:
  3687 ;;		___flge
  3688 ;;		___flmul
  3689 ;;		___flneg
  3690 ;;		___fltol
  3691 ;;		___lltofl
  3692 ;;		_exp
  3693 ;;		_log
  3694 ;; This function is called by:
  3695 ;;		_format_double
  3696 ;; This function uses a non-reentrant model
  3697 ;;
  3698                           
  3699                           	psect	text12
  3700  001398                     __ptext12:
  3701                           	opt stack 0
  3702  001398                     _pow:
  3703                           	opt stack 23
  3704                           
  3705                           ; BSR set to: 0
  3706                           
  3707                           ;incstack = 0
  3708  001398  6B8C               	clrf	pow@sign& (0+255),b
  3709                           
  3710                           ; BSR set to: 0
  3711  00139A  517C               	movf	pow@x& (0+255),w,b
  3712  00139C  117D               	iorwf	(pow@x+1)& (0+255),w,b
  3713  00139E  117E               	iorwf	(pow@x+2)& (0+255),w,b
  3714  0013A0  117F               	iorwf	(pow@x+3)& (0+255),w,b
  3715  0013A2  E114               	bnz	l3966
  3716                           
  3717                           ; BSR set to: 0
  3718  0013A4  6A04               	clrf	___flge@ff1,c
  3719  0013A6  6A05               	clrf	___flge@ff1+1,c
  3720  0013A8  6A06               	clrf	___flge@ff1+2,c
  3721  0013AA  6A07               	clrf	___flge@ff1+3,c
  3722  0013AC  C080  F008         	movff	pow@y,___flge@ff2
  3723  0013B0  C081  F009         	movff	pow@y+1,___flge@ff2+1
  3724  0013B4  C082  F00A         	movff	pow@y+2,___flge@ff2+2
  3725  0013B8  C083  F00B         	movff	pow@y+3,___flge@ff2+3
  3726  0013BC  EC60  F012         	call	___flge	;wreg free
  3727  0013C0  0100               	movlb	0	; () banked
  3728  0013C2  6B7C               	clrf	?_pow& (0+255),b
  3729  0013C4  6B7D               	clrf	(?_pow+1)& (0+255),b
  3730  0013C6  6B7E               	clrf	(?_pow+2)& (0+255),b
  3731  0013C8  6B7F               	clrf	(?_pow+3)& (0+255),b
  3732  0013CA  0012               	return	
  3733  0013CC                     l3966:
  3734                           
  3735                           ; BSR set to: 0
  3736  0013CC  5180               	movf	pow@y& (0+255),w,b
  3737  0013CE  1181               	iorwf	(pow@y+1)& (0+255),w,b
  3738  0013D0  1182               	iorwf	(pow@y+2)& (0+255),w,b
  3739  0013D2  1183               	iorwf	(pow@y+3)& (0+255),w,b
  3740  0013D4  E108               	bnz	l3972
  3741                           
  3742                           ; BSR set to: 0
  3743  0013D6  0E00               	movlw	0
  3744  0013D8  6F7C               	movwf	?_pow& (0+255),b
  3745  0013DA  6F7D               	movwf	(?_pow+1)& (0+255),b
  3746  0013DC  0E80               	movlw	128
  3747  0013DE  6F7E               	movwf	(?_pow+2)& (0+255),b
  3748  0013E0  0E3F               	movlw	63
  3749  0013E2  6F7F               	movwf	(?_pow+3)& (0+255),b
  3750  0013E4  0C3F               	retlw	63
  3751  0013E6                     l3972:
  3752                           
  3753                           ; BSR set to: 0
  3754  0013E6  AF7F               	btfss	(pow@x+3)& (0+255),7,b
  3755  0013E8  D043               	goto	l3982
  3756                           
  3757                           ; BSR set to: 0
  3758  0013EA  C080  F052         	movff	pow@y,___fltol@f1
  3759  0013EE  C081  F053         	movff	pow@y+1,___fltol@f1+1
  3760  0013F2  C082  F054         	movff	pow@y+2,___fltol@f1+2
  3761  0013F6  C083  F055         	movff	pow@y+3,___fltol@f1+3
  3762  0013FA  EC0A  F011         	call	___fltol	;wreg free
  3763  0013FE  C052  F08D         	movff	?___fltol,pow@yi
  3764  001402  C053  F08E         	movff	?___fltol+1,pow@yi+1
  3765  001406  C054  F08F         	movff	?___fltol+2,pow@yi+2
  3766  00140A  C055  F090         	movff	?___fltol+3,pow@yi+3
  3767  00140E  C08D  F00E         	movff	pow@yi,___lltofl@c
  3768  001412  C08E  F00F         	movff	pow@yi+1,___lltofl@c+1
  3769  001416  C08F  F010         	movff	pow@yi+2,___lltofl@c+2
  3770  00141A  C090  F011         	movff	pow@yi+3,___lltofl@c+3
  3771  00141E  ECC3  F013         	call	___lltofl	;wreg free
  3772  001422  0100               	movlb	0	; () banked
  3773  001424  5180               	movf	pow@y& (0+255),w,b
  3774  001426  180E               	xorwf	?___lltofl,w,c
  3775  001428  E109               	bnz	u3370
  3776  00142A  5181               	movf	(pow@y+1)& (0+255),w,b
  3777  00142C  180F               	xorwf	?___lltofl+1,w,c
  3778  00142E  E106               	bnz	u3370
  3779  001430  5182               	movf	(pow@y+2)& (0+255),w,b
  3780  001432  1810               	xorwf	?___lltofl+2,w,c
  3781  001434  E103               	bnz	u3370
  3782  001436  5183               	movf	(pow@y+3)& (0+255),w,b
  3783  001438  1811               	xorwf	?___lltofl+3,w,c
  3784  00143A  E005               	bz	l3978
  3785  00143C                     u3370:
  3786                           
  3787                           ; BSR set to: 0
  3788  00143C  6B7C               	clrf	?_pow& (0+255),b
  3789  00143E  6B7D               	clrf	(?_pow+1)& (0+255),b
  3790  001440  6B7E               	clrf	(?_pow+2)& (0+255),b
  3791  001442  6B7F               	clrf	(?_pow+3)& (0+255),b
  3792  001444  0012               	return	
  3793  001446                     l3978:
  3794                           
  3795                           ; BSR set to: 0
  3796  001446  518D               	movf	pow@yi& (0+255),w,b
  3797  001448  0B01               	andlw	1
  3798  00144A  6F8C               	movwf	pow@sign& (0+255),b
  3799                           
  3800                           ; BSR set to: 0
  3801  00144C  C07C  F004         	movff	pow@x,___flneg@f1
  3802  001450  C07D  F005         	movff	pow@x+1,___flneg@f1+1
  3803  001454  C07E  F006         	movff	pow@x+2,___flneg@f1+2
  3804  001458  C07F  F007         	movff	pow@x+3,___flneg@f1+3
  3805  00145C  EC8F  F014         	call	___flneg	;wreg free
  3806  001460  C004  F07C         	movff	?___flneg,pow@x
  3807  001464  C005  F07D         	movff	?___flneg+1,pow@x+1
  3808  001468  C006  F07E         	movff	?___flneg+2,pow@x+2
  3809  00146C  C007  F07F         	movff	?___flneg+3,pow@x+3
  3810  001470                     l3982:
  3811                           
  3812                           ; BSR set to: 0
  3813  001470  C07C  F044         	movff	pow@x,log@x
  3814  001474  C07D  F045         	movff	pow@x+1,log@x+1
  3815  001478  C07E  F046         	movff	pow@x+2,log@x+2
  3816  00147C  C07F  F047         	movff	pow@x+3,log@x+3
  3817  001480  EC06  F00C         	call	_log	;wreg free
  3818  001484  C044  F084         	movff	?_log,_pow$1120
  3819  001488  C045  F085         	movff	?_log+1,_pow$1120+1
  3820  00148C  C046  F086         	movff	?_log+2,_pow$1120+2
  3821  001490  C047  F087         	movff	?_log+3,_pow$1120+3
  3822  001494  C084  F01D         	movff	_pow$1120,___flmul@f1
  3823  001498  C085  F01E         	movff	_pow$1120+1,___flmul@f1+1
  3824  00149C  C086  F01F         	movff	_pow$1120+2,___flmul@f1+2
  3825  0014A0  C087  F020         	movff	_pow$1120+3,___flmul@f1+3
  3826  0014A4  C080  F021         	movff	pow@y,___flmul@f2
  3827  0014A8  C081  F022         	movff	pow@y+1,___flmul@f2+1
  3828  0014AC  C082  F023         	movff	pow@y+2,___flmul@f2+2
  3829  0014B0  C083  F024         	movff	pow@y+3,___flmul@f2+3
  3830  0014B4  ECF5  F00E         	call	___flmul	;wreg free
  3831  0014B8  C01D  F088         	movff	?___flmul,_pow$1121
  3832  0014BC  C01E  F089         	movff	?___flmul+1,_pow$1121+1
  3833  0014C0  C01F  F08A         	movff	?___flmul+2,_pow$1121+2
  3834  0014C4  C020  F08B         	movff	?___flmul+3,_pow$1121+3
  3835  0014C8  C088  F071         	movff	_pow$1121,exp@x
  3836  0014CC  C089  F072         	movff	_pow$1121+1,exp@x+1
  3837  0014D0  C08A  F073         	movff	_pow$1121+2,exp@x+2
  3838  0014D4  C08B  F074         	movff	_pow$1121+3,exp@x+3
  3839  0014D8  ECBE  F008         	call	_exp	;wreg free
  3840  0014DC  C071  F07C         	movff	?_exp,pow@x
  3841  0014E0  C072  F07D         	movff	?_exp+1,pow@x+1
  3842  0014E4  C073  F07E         	movff	?_exp+2,pow@x+2
  3843  0014E8  C074  F07F         	movff	?_exp+3,pow@x+3
  3844  0014EC  0100               	movlb	0	; () banked
  3845  0014EE  518C               	movf	pow@sign& (0+255),w,b
  3846  0014F0  E013               	bz	l1175
  3847                           
  3848                           ; BSR set to: 0
  3849  0014F2  C07C  F004         	movff	pow@x,___flneg@f1
  3850  0014F6  C07D  F005         	movff	pow@x+1,___flneg@f1+1
  3851  0014FA  C07E  F006         	movff	pow@x+2,___flneg@f1+2
  3852  0014FE  C07F  F007         	movff	pow@x+3,___flneg@f1+3
  3853  001502  EC8F  F014         	call	___flneg	;wreg free
  3854  001506  C004  F07C         	movff	?___flneg,?_pow
  3855  00150A  C005  F07D         	movff	?___flneg+1,?_pow+1
  3856  00150E  C006  F07E         	movff	?___flneg+2,?_pow+2
  3857  001512  C007  F07F         	movff	?___flneg+3,?_pow+3
  3858  001516  0012               	return	
  3859  001518                     l1175:
  3860                           
  3861                           ; BSR set to: 0
  3862  001518  C07C  F07C         	movff	pow@x,?_pow
  3863  00151C  C07D  F07D         	movff	pow@x+1,?_pow+1
  3864  001520  C07E  F07E         	movff	pow@x+2,?_pow+2
  3865  001524  C07F  F07F         	movff	pow@x+3,?_pow+3
  3866                           
  3867                           ; BSR set to: 0
  3868  001528  0012               	return		;funcret
  3869  00152A                     __end_of_pow:
  3870                           	opt stack 0
  3871                           tblptru	equ	0xFF8
  3872                           tblptrh	equ	0xFF7
  3873                           tblptrl	equ	0xFF6
  3874                           tablat	equ	0xFF5
  3875                           prodl	equ	0xFF3
  3876                           intcon	equ	0xFF2
  3877                           intcon2	equ	0xFF1
  3878                           postinc0	equ	0xFEE
  3879                           wreg	equ	0xFE8
  3880                           postdec1	equ	0xFE5
  3881                           fsr1l	equ	0xFE1
  3882                           indf2	equ	0xFDF
  3883                           postinc2	equ	0xFDE
  3884                           postdec2	equ	0xFDD
  3885                           fsr2h	equ	0xFDA
  3886                           fsr2l	equ	0xFD9
  3887                           status	equ	0xFD8
  3888                           
  3889 ;; *************** function _exp *****************
  3890 ;; Defined at:
  3891 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/common/exp.c"
  3892 ;; Parameters:    Size  Location     Type
  3893 ;;  x               4   17[BANK0 ] unsigned char 
  3894 ;; Auto vars:     Size  Location     Type
  3895 ;;  exponent        2   25[BANK0 ] int 
  3896 ;;  sign            1   27[BANK0 ] unsigned char 
  3897 ;; Return value:  Size  Location     Type
  3898 ;;                  4   17[BANK0 ] unsigned char 
  3899 ;; Registers used:
  3900 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3901 ;; Tracked objects:
  3902 ;;		On entry : 0/0
  3903 ;;		On exit  : 0/0
  3904 ;;		Unchanged: 0/0
  3905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3906 ;;      Params:         0       4       0       0       0       0       0       0       0
  3907 ;;      Locals:         0       7       0       0       0       0       0       0       0
  3908 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3909 ;;      Totals:         0      11       0       0       0       0       0       0       0
  3910 ;;Total ram usage:       11 bytes
  3911 ;; Hardware stack levels used:    1
  3912 ;; Hardware stack levels required when called:    4
  3913 ;; This function calls:
  3914 ;;		___awtofl
  3915 ;;		___fldiv
  3916 ;;		___flge
  3917 ;;		___flmul
  3918 ;;		___flneg
  3919 ;;		___flsub
  3920 ;;		___fltol
  3921 ;;		_eval_poly
  3922 ;;		_floor
  3923 ;;		_ldexp
  3924 ;; This function is called by:
  3925 ;;		_pow
  3926 ;; This function uses a non-reentrant model
  3927 ;;
  3928                           
  3929                           	psect	text13
  3930  00117C                     __ptext13:
  3931                           	opt stack 0
  3932  00117C                     _exp:
  3933                           	opt stack 23
  3934                           
  3935                           ; BSR set to: 0
  3936                           ;incstack = 0
  3937  00117C  0100               	movlb	0	; () banked
  3938  00117E  5171               	movf	exp@x& (0+255),w,b
  3939  001180  1172               	iorwf	(exp@x+1)& (0+255),w,b
  3940  001182  1173               	iorwf	(exp@x+2)& (0+255),w,b
  3941  001184  1174               	iorwf	(exp@x+3)& (0+255),w,b
  3942  001186  E108               	bnz	l3920
  3943                           
  3944                           ; BSR set to: 0
  3945  001188  0E00               	movlw	0
  3946  00118A  6F71               	movwf	?_exp& (0+255),b
  3947  00118C  6F72               	movwf	(?_exp+1)& (0+255),b
  3948  00118E  0E80               	movlw	128
  3949  001190  6F73               	movwf	(?_exp+2)& (0+255),b
  3950  001192  0E3F               	movlw	63
  3951  001194  6F74               	movwf	(?_exp+3)& (0+255),b
  3952  001196  0C3F               	retlw	63
  3953  001198                     l3920:
  3954                           
  3955                           ; BSR set to: 0
  3956  001198  0E18               	movlw	24
  3957  00119A  6E04               	movwf	___flge@ff1,c
  3958  00119C  0E72               	movlw	114
  3959  00119E  6E05               	movwf	___flge@ff1+1,c
  3960  0011A0  0E31               	movlw	49
  3961  0011A2  6E06               	movwf	___flge@ff1+2,c
  3962  0011A4  0E44               	movlw	68
  3963  0011A6  6E07               	movwf	___flge@ff1+3,c
  3964  0011A8  C071  F008         	movff	exp@x,___flge@ff2
  3965  0011AC  C072  F009         	movff	exp@x+1,___flge@ff2+1
  3966  0011B0  C073  F00A         	movff	exp@x+2,___flge@ff2+2
  3967  0011B4  C074  F00B         	movff	exp@x+3,___flge@ff2+3
  3968  0011B8  EC60  F012         	call	___flge	;wreg free
  3969  0011BC  E207               	bc	l3926
  3970  0011BE  0100               	movlb	0	; () banked
  3971  0011C0  6971               	setf	?_exp& (0+255),b
  3972  0011C2  6972               	setf	(?_exp+1)& (0+255),b
  3973  0011C4  0E7F               	movlw	127
  3974  0011C6  6F73               	movwf	(?_exp+2)& (0+255),b
  3975  0011C8  6F74               	movwf	(?_exp+3)& (0+255),b
  3976  0011CA  0C7F               	retlw	127
  3977  0011CC                     l3926:
  3978  0011CC  C071  F004         	movff	exp@x,___flge@ff1
  3979  0011D0  C072  F005         	movff	exp@x+1,___flge@ff1+1
  3980  0011D4  C073  F006         	movff	exp@x+2,___flge@ff1+2
  3981  0011D8  C074  F007         	movff	exp@x+3,___flge@ff1+3
  3982  0011DC  0E87               	movlw	135
  3983  0011DE  6E08               	movwf	___flge@ff2,c
  3984  0011E0  0E48               	movlw	72
  3985  0011E2  6E09               	movwf	___flge@ff2+1,c
  3986  0011E4  0E3A               	movlw	58
  3987  0011E6  6E0A               	movwf	___flge@ff2+2,c
  3988  0011E8  0EC4               	movlw	196
  3989  0011EA  6E0B               	movwf	___flge@ff2+3,c
  3990  0011EC  EC60  F012         	call	___flge	;wreg free
  3991  0011F0  E206               	bc	l3930
  3992  0011F2  0100               	movlb	0	; () banked
  3993  0011F4  6B71               	clrf	?_exp& (0+255),b
  3994  0011F6  6B72               	clrf	(?_exp+1)& (0+255),b
  3995  0011F8  6B73               	clrf	(?_exp+2)& (0+255),b
  3996  0011FA  6B74               	clrf	(?_exp+3)& (0+255),b
  3997  0011FC  0012               	return	
  3998  0011FE                     l3930:
  3999  0011FE  0100               	movlb	0	; () banked
  4000  001200  0E01               	movlw	1
  4001  001202  AF74               	btfss	(exp@x+3)& (0+255),7,b
  4002  001204  0E00               	movlw	0
  4003  001206  6F7B               	movwf	exp@sign& (0+255),b
  4004                           
  4005                           ; BSR set to: 0
  4006  001208  517B               	movf	exp@sign& (0+255),w,b
  4007  00120A  E012               	bz	l1200
  4008                           
  4009                           ; BSR set to: 0
  4010  00120C  C071  F004         	movff	exp@x,___flneg@f1
  4011  001210  C072  F005         	movff	exp@x+1,___flneg@f1+1
  4012  001214  C073  F006         	movff	exp@x+2,___flneg@f1+2
  4013  001218  C074  F007         	movff	exp@x+3,___flneg@f1+3
  4014  00121C  EC8F  F014         	call	___flneg	;wreg free
  4015  001220  C004  F071         	movff	?___flneg,exp@x
  4016  001224  C005  F072         	movff	?___flneg+1,exp@x+1
  4017  001228  C006  F073         	movff	?___flneg+2,exp@x+2
  4018  00122C  C007  F074         	movff	?___flneg+3,exp@x+3
  4019  001230                     l1200:
  4020                           
  4021                           ; BSR set to: 0
  4022  001230  C071  F01D         	movff	exp@x,___flmul@f1
  4023  001234  C072  F01E         	movff	exp@x+1,___flmul@f1+1
  4024  001238  C073  F01F         	movff	exp@x+2,___flmul@f1+2
  4025  00123C  C074  F020         	movff	exp@x+3,___flmul@f1+3
  4026  001240  0E3B               	movlw	59
  4027  001242  6E21               	movwf	___flmul@f2,c
  4028  001244  0EAA               	movlw	170
  4029  001246  6E22               	movwf	___flmul@f2+1,c
  4030  001248  0EB8               	movlw	184
  4031  00124A  6E23               	movwf	___flmul@f2+2,c
  4032  00124C  0E3F               	movlw	63
  4033  00124E  6E24               	movwf	___flmul@f2+3,c
  4034  001250  ECF5  F00E         	call	___flmul	;wreg free
  4035  001254  C01D  F071         	movff	?___flmul,exp@x
  4036  001258  C01E  F072         	movff	?___flmul+1,exp@x+1
  4037  00125C  C01F  F073         	movff	?___flmul+2,exp@x+2
  4038  001260  C020  F074         	movff	?___flmul+3,exp@x+3
  4039  001264  C071  F067         	movff	exp@x,floor@x
  4040  001268  C072  F068         	movff	exp@x+1,floor@x+1
  4041  00126C  C073  F069         	movff	exp@x+2,floor@x+2
  4042  001270  C074  F06A         	movff	exp@x+3,floor@x+3
  4043  001274  ECA1  F00D         	call	_floor	;wreg free
  4044  001278  C067  F075         	movff	?_floor,_exp$1122
  4045  00127C  C068  F076         	movff	?_floor+1,_exp$1122+1
  4046  001280  C069  F077         	movff	?_floor+2,_exp$1122+2
  4047  001284  C06A  F078         	movff	?_floor+3,_exp$1122+3
  4048  001288  C075  F052         	movff	_exp$1122,___fltol@f1
  4049  00128C  C076  F053         	movff	_exp$1122+1,___fltol@f1+1
  4050  001290  C077  F054         	movff	_exp$1122+2,___fltol@f1+2
  4051  001294  C078  F055         	movff	_exp$1122+3,___fltol@f1+3
  4052  001298  EC0A  F011         	call	___fltol	;wreg free
  4053  00129C  C052  F079         	movff	?___fltol,exp@exponent
  4054  0012A0  C053  F07A         	movff	?___fltol+1,exp@exponent+1
  4055                           
  4056                           ; BSR set to: 0
  4057  0012A4  C071  F038         	movff	exp@x,___flsub@f1
  4058  0012A8  C072  F039         	movff	exp@x+1,___flsub@f1+1
  4059  0012AC  C073  F03A         	movff	exp@x+2,___flsub@f1+2
  4060  0012B0  C074  F03B         	movff	exp@x+3,___flsub@f1+3
  4061  0012B4  C079  F00E         	movff	exp@exponent,___awtofl@c
  4062  0012B8  C07A  F00F         	movff	exp@exponent+1,___awtofl@c+1
  4063  0012BC  EC5A  F013         	call	___awtofl	;wreg free
  4064  0012C0  C00E  F03C         	movff	?___awtofl,___flsub@f2
  4065  0012C4  C00F  F03D         	movff	?___awtofl+1,___flsub@f2+1
  4066  0012C8  C010  F03E         	movff	?___awtofl+2,___flsub@f2+2
  4067  0012CC  C011  F03F         	movff	?___awtofl+3,___flsub@f2+3
  4068  0012D0  EC19  F013         	call	___flsub	;wreg free
  4069  0012D4  C038  F071         	movff	?___flsub,exp@x
  4070  0012D8  C039  F072         	movff	?___flsub+1,exp@x+1
  4071  0012DC  C03A  F073         	movff	?___flsub+2,exp@x+2
  4072  0012E0  C03B  F074         	movff	?___flsub+3,exp@x+3
  4073  0012E4  C071  F038         	movff	exp@x,eval_poly@x
  4074  0012E8  C072  F039         	movff	exp@x+1,eval_poly@x+1
  4075  0012EC  C073  F03A         	movff	exp@x+2,eval_poly@x+2
  4076  0012F0  C074  F03B         	movff	exp@x+3,eval_poly@x+3
  4077  0012F4  0E01               	movlw	low exp@coeff
  4078  0012F6  6E3C               	movwf	eval_poly@d,c
  4079  0012F8  6A3E               	clrf	eval_poly@n+1,c
  4080  0012FA  0E09               	movlw	9
  4081  0012FC  6E3D               	movwf	eval_poly@n,c
  4082  0012FE  EC10  F010         	call	_eval_poly	;wreg free
  4083  001302  C038  F044         	movff	?_eval_poly,ldexp@value
  4084  001306  C039  F045         	movff	?_eval_poly+1,ldexp@value+1
  4085  00130A  C03A  F046         	movff	?_eval_poly+2,ldexp@value+2
  4086  00130E  C03B  F047         	movff	?_eval_poly+3,ldexp@value+3
  4087  001312  C079  F048         	movff	exp@exponent,ldexp@newexp
  4088  001316  C07A  F049         	movff	exp@exponent+1,ldexp@newexp+1
  4089  00131A  ECB9  F010         	call	_ldexp	;wreg free
  4090  00131E  C044  F071         	movff	?_ldexp,exp@x
  4091  001322  C045  F072         	movff	?_ldexp+1,exp@x+1
  4092  001326  C046  F073         	movff	?_ldexp+2,exp@x+2
  4093  00132A  C047  F074         	movff	?_ldexp+3,exp@x+3
  4094  00132E  0100               	movlb	0	; () banked
  4095  001330  517B               	movf	exp@sign& (0+255),w,b
  4096  001332  E029               	bz	l1201
  4097                           
  4098                           ; BSR set to: 0
  4099  001334  2971               	incf	exp@x& (0+255),w,b
  4100  001336  E10D               	bnz	l3950
  4101  001338  2972               	incf	(exp@x+1)& (0+255),w,b
  4102  00133A  E10B               	bnz	l3950
  4103  00133C  0E7F               	movlw	127
  4104  00133E  1973               	xorwf	(exp@x+2)& (0+255),w,b
  4105  001340  E108               	bnz	l3950
  4106  001342  0E7F               	movlw	127
  4107  001344  1974               	xorwf	(exp@x+3)& (0+255),w,b
  4108  001346  E105               	bnz	l3950
  4109                           
  4110                           ; BSR set to: 0
  4111  001348  6B71               	clrf	?_exp& (0+255),b
  4112  00134A  6B72               	clrf	(?_exp+1)& (0+255),b
  4113  00134C  6B73               	clrf	(?_exp+2)& (0+255),b
  4114  00134E  6B74               	clrf	(?_exp+3)& (0+255),b
  4115  001350  0012               	return	
  4116  001352                     l3950:
  4117                           
  4118                           ; BSR set to: 0
  4119  001352  0E00               	movlw	0
  4120  001354  6E0E               	movwf	___fldiv@f1,c
  4121  001356  6E0F               	movwf	___fldiv@f1+1,c
  4122  001358  0E80               	movlw	128
  4123  00135A  6E10               	movwf	___fldiv@f1+2,c
  4124  00135C  0E3F               	movlw	63
  4125  00135E  6E11               	movwf	___fldiv@f1+3,c
  4126  001360  C071  F012         	movff	exp@x,___fldiv@f2
  4127  001364  C072  F013         	movff	exp@x+1,___fldiv@f2+1
  4128  001368  C073  F014         	movff	exp@x+2,___fldiv@f2+2
  4129  00136C  C074  F015         	movff	exp@x+3,___fldiv@f2+3
  4130  001370  ECB8  F00F         	call	___fldiv	;wreg free
  4131  001374  C00E  F071         	movff	?___fldiv,?_exp
  4132  001378  C00F  F072         	movff	?___fldiv+1,?_exp+1
  4133  00137C  C010  F073         	movff	?___fldiv+2,?_exp+2
  4134  001380  C011  F074         	movff	?___fldiv+3,?_exp+3
  4135  001384  0012               	return	
  4136  001386                     l1201:
  4137                           
  4138                           ; BSR set to: 0
  4139  001386  C071  F071         	movff	exp@x,?_exp
  4140  00138A  C072  F072         	movff	exp@x+1,?_exp+1
  4141  00138E  C073  F073         	movff	exp@x+2,?_exp+2
  4142  001392  C074  F074         	movff	exp@x+3,?_exp+3
  4143  001396  0012               	return		;funcret
  4144  001398                     __end_of_exp:
  4145                           	opt stack 0
  4146                           tblptru	equ	0xFF8
  4147                           tblptrh	equ	0xFF7
  4148                           tblptrl	equ	0xFF6
  4149                           tablat	equ	0xFF5
  4150                           prodl	equ	0xFF3
  4151                           intcon	equ	0xFF2
  4152                           intcon2	equ	0xFF1
  4153                           postinc0	equ	0xFEE
  4154                           wreg	equ	0xFE8
  4155                           postdec1	equ	0xFE5
  4156                           fsr1l	equ	0xFE1
  4157                           indf2	equ	0xFDF
  4158                           postinc2	equ	0xFDE
  4159                           postdec2	equ	0xFDD
  4160                           fsr2h	equ	0xFDA
  4161                           fsr2l	equ	0xFD9
  4162                           status	equ	0xFD8
  4163                           
  4164 ;; *************** function _ldexp *****************
  4165 ;; Defined at:
  4166 ;;		line 277 in file "/opt/microchip/xc8/v1.34/sources/common/frexp.c"
  4167 ;; Parameters:    Size  Location     Type
  4168 ;;  value           4   67[COMRAM] unsigned char 
  4169 ;;  newexp          2   71[COMRAM] int 
  4170 ;; Auto vars:     Size  Location     Type
  4171 ;;		None
  4172 ;; Return value:  Size  Location     Type
  4173 ;;                  4   67[COMRAM] int 
  4174 ;; Registers used:
  4175 ;;		wreg, status,2, status,0
  4176 ;; Tracked objects:
  4177 ;;		On entry : 0/0
  4178 ;;		On exit  : 0/0
  4179 ;;		Unchanged: 0/0
  4180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4181 ;;      Params:         6       0       0       0       0       0       0       0       0
  4182 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4183 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4184 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4185 ;;Total ram usage:        8 bytes
  4186 ;; Hardware stack levels used:    1
  4187 ;; Hardware stack levels required when called:    1
  4188 ;; This function calls:
  4189 ;;		Nothing
  4190 ;; This function is called by:
  4191 ;;		_exp
  4192 ;; This function uses a non-reentrant model
  4193 ;;
  4194                           
  4195                           	psect	text14
  4196  002172                     __ptext14:
  4197                           	opt stack 0
  4198  002172                     _ldexp:
  4199                           	opt stack 25
  4200                           
  4201                           ;incstack = 0
  4202  002172  5044               	movf	ldexp@value,w,c
  4203  002174  1045               	iorwf	ldexp@value+1,w,c
  4204  002176  1046               	iorwf	ldexp@value+2,w,c
  4205  002178  1047               	iorwf	ldexp@value+3,w,c
  4206  00217A  E105               	bnz	l2792
  4207  00217C  6A44               	clrf	?_ldexp,c
  4208  00217E  6A45               	clrf	?_ldexp+1,c
  4209  002180  6A46               	clrf	?_ldexp+2,c
  4210  002182  6A47               	clrf	?_ldexp+3,c
  4211  002184  0012               	return	
  4212  002186                     l2792:
  4213  002186  5047               	movf	ldexp@value+3,w,c
  4214  002188  0B7F               	andlw	127
  4215  00218A  6E4A               	movwf	??_ldexp& (0+255),c
  4216  00218C  6A4B               	clrf	(??_ldexp+1)& (0+255),c
  4217  00218E  90D8               	bcf	status,0,c
  4218  002190  364A               	rlcf	??_ldexp,f,c
  4219  002192  364B               	rlcf	??_ldexp+1,f,c
  4220  002194  504A               	movf	??_ldexp,w,c
  4221  002196  2648               	addwf	ldexp@newexp,f,c
  4222  002198  504B               	movf	??_ldexp+1,w,c
  4223  00219A  2249               	addwfc	ldexp@newexp+1,f,c
  4224  00219C  0E01               	movlw	1
  4225  00219E  AE46               	btfss	ldexp@value+2,7,c
  4226  0021A0  0E00               	movlw	0
  4227  0021A2  2648               	addwf	ldexp@newexp,f,c
  4228  0021A4  0E00               	movlw	0
  4229  0021A6  2249               	addwfc	ldexp@newexp+1,f,c
  4230  0021A8  AE49               	btfss	ldexp@newexp+1,7,c
  4231  0021AA  D005               	goto	l2798
  4232  0021AC  6A44               	clrf	?_ldexp,c
  4233  0021AE  6A45               	clrf	?_ldexp+1,c
  4234  0021B0  6A46               	clrf	?_ldexp+2,c
  4235  0021B2  6A47               	clrf	?_ldexp+3,c
  4236  0021B4  0012               	return	
  4237  0021B6                     l2798:
  4238  0021B6  BE49               	btfsc	ldexp@newexp+1,7,c
  4239  0021B8  D010               	goto	l2812
  4240  0021BA  0449               	decf	ldexp@newexp+1,w,c
  4241  0021BC  E30E               	bnc	l2812
  4242  0021BE  AE47               	btfss	ldexp@value+3,7,c
  4243  0021C0  D006               	goto	l2808
  4244  0021C2  6844               	setf	?_ldexp,c
  4245  0021C4  6845               	setf	?_ldexp+1,c
  4246  0021C6  0E7F               	movlw	127
  4247  0021C8  6E46               	movwf	?_ldexp+2,c
  4248  0021CA  6847               	setf	?_ldexp+3,c
  4249  0021CC  0CFF               	retlw	255
  4250  0021CE                     l2808:
  4251  0021CE  6844               	setf	?_ldexp,c
  4252  0021D0  6845               	setf	?_ldexp+1,c
  4253  0021D2  0E7F               	movlw	127
  4254  0021D4  6E46               	movwf	?_ldexp+2,c
  4255  0021D6  6E47               	movwf	?_ldexp+3,c
  4256  0021D8  0C7F               	retlw	127
  4257  0021DA                     l2812:
  4258  0021DA  3449               	rlcf	ldexp@newexp+1,w,c
  4259  0021DC  3049               	rrcf	ldexp@newexp+1,w,c
  4260  0021DE  6E4B               	movwf	(??_ldexp+1)& (0+255),c
  4261  0021E0  3048               	rrcf	ldexp@newexp,w,c
  4262  0021E2  6E4A               	movwf	??_ldexp& (0+255),c
  4263  0021E4  1847               	xorwf	ldexp@value+3,w,c
  4264  0021E6  0B80               	andlw	-128
  4265  0021E8  184A               	xorwf	??_ldexp,w,c
  4266  0021EA  6E47               	movwf	ldexp@value+3,c
  4267  0021EC  C048  F04A         	movff	ldexp@newexp,??_ldexp
  4268  0021F0  0E01               	movlw	1
  4269  0021F2  164A               	andwf	??_ldexp,f,c
  4270  0021F4  324A               	rrcf	??_ldexp,f,c
  4271  0021F6  324A               	rrcf	??_ldexp,f,c
  4272  0021F8  5046               	movf	ldexp@value+2,w,c
  4273  0021FA  184A               	xorwf	??_ldexp,w,c
  4274  0021FC  0B7F               	andlw	-129
  4275  0021FE  184A               	xorwf	??_ldexp,w,c
  4276  002200  6E46               	movwf	ldexp@value+2,c
  4277  002202  C044  F044         	movff	ldexp@value,?_ldexp
  4278  002206  C045  F045         	movff	ldexp@value+1,?_ldexp+1
  4279  00220A  C046  F046         	movff	ldexp@value+2,?_ldexp+2
  4280  00220E  C047  F047         	movff	ldexp@value+3,?_ldexp+3
  4281  002212  0012               	return		;funcret
  4282  002214                     __end_of_ldexp:
  4283                           	opt stack 0
  4284                           tblptru	equ	0xFF8
  4285                           tblptrh	equ	0xFF7
  4286                           tblptrl	equ	0xFF6
  4287                           tablat	equ	0xFF5
  4288                           prodl	equ	0xFF3
  4289                           intcon	equ	0xFF2
  4290                           intcon2	equ	0xFF1
  4291                           postinc0	equ	0xFEE
  4292                           wreg	equ	0xFE8
  4293                           postdec1	equ	0xFE5
  4294                           fsr1l	equ	0xFE1
  4295                           indf2	equ	0xFDF
  4296                           postinc2	equ	0xFDE
  4297                           postdec2	equ	0xFDD
  4298                           fsr2h	equ	0xFDA
  4299                           fsr2l	equ	0xFD9
  4300                           status	equ	0xFD8
  4301                           
  4302 ;; *************** function _floor *****************
  4303 ;; Defined at:
  4304 ;;		line 13 in file "/opt/microchip/xc8/v1.34/sources/common/floor.c"
  4305 ;; Parameters:    Size  Location     Type
  4306 ;;  x               4    7[BANK0 ] int 
  4307 ;; Auto vars:     Size  Location     Type
  4308 ;;  i               4   11[BANK0 ] int 
  4309 ;;  expon           2   15[BANK0 ] int 
  4310 ;; Return value:  Size  Location     Type
  4311 ;;                  4    7[BANK0 ] int 
  4312 ;; Registers used:
  4313 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4314 ;; Tracked objects:
  4315 ;;		On entry : 0/0
  4316 ;;		On exit  : 0/0
  4317 ;;		Unchanged: 0/0
  4318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4319 ;;      Params:         0       4       0       0       0       0       0       0       0
  4320 ;;      Locals:         0       6       0       0       0       0       0       0       0
  4321 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4322 ;;      Totals:         0      10       0       0       0       0       0       0       0
  4323 ;;Total ram usage:       10 bytes
  4324 ;; Hardware stack levels used:    1
  4325 ;; Hardware stack levels required when called:    3
  4326 ;; This function calls:
  4327 ;;		___altofl
  4328 ;;		___fladd
  4329 ;;		___flge
  4330 ;;		___fltol
  4331 ;;		_frexp
  4332 ;; This function is called by:
  4333 ;;		_format_double
  4334 ;;		_exp
  4335 ;; This function uses a non-reentrant model
  4336 ;;
  4337                           
  4338                           	psect	text15
  4339  001B42                     __ptext15:
  4340                           	opt stack 0
  4341  001B42                     _floor:
  4342                           	opt stack 23
  4343                           
  4344                           ;incstack = 0
  4345  001B42  C067  F004         	movff	floor@x,frexp@value
  4346  001B46  C068  F005         	movff	floor@x+1,frexp@value+1
  4347  001B4A  C069  F006         	movff	floor@x+2,frexp@value+2
  4348  001B4E  C06A  F007         	movff	floor@x+3,frexp@value+3
  4349  001B52  0E6F               	movlw	low floor@expon
  4350  001B54  6E08               	movwf	frexp@eptr,c
  4351  001B56  EC9A  F011         	call	_frexp	;wreg free
  4352  001B5A  0100               	movlb	0	; () banked
  4353  001B5C  AF70               	btfss	(floor@expon+1)& (0+255),7,b
  4354  001B5E  D00F               	goto	l3822
  4355                           
  4356                           ; BSR set to: 0
  4357  001B60  AF6A               	btfss	(floor@x+3)& (0+255),7,b
  4358  001B62  D008               	goto	l901
  4359                           
  4360                           ; BSR set to: 0
  4361  001B64  0E00               	movlw	0
  4362  001B66  6F67               	movwf	?_floor& (0+255),b
  4363  001B68  6F68               	movwf	(?_floor+1)& (0+255),b
  4364  001B6A  0E80               	movlw	128
  4365  001B6C  6F69               	movwf	(?_floor+2)& (0+255),b
  4366  001B6E  0EBF               	movlw	191
  4367  001B70  6F6A               	movwf	(?_floor+3)& (0+255),b
  4368  001B72  0CBF               	retlw	191
  4369  001B74                     l901:
  4370                           
  4371                           ; BSR set to: 0
  4372  001B74  6B67               	clrf	?_floor& (0+255),b
  4373  001B76  6B68               	clrf	(?_floor+1)& (0+255),b
  4374  001B78  6B69               	clrf	(?_floor+2)& (0+255),b
  4375  001B7A  6B6A               	clrf	(?_floor+3)& (0+255),b
  4376  001B7C  0012               	return	
  4377  001B7E                     l3822:
  4378                           
  4379                           ; BSR set to: 0
  4380  001B7E  5170               	movf	(floor@expon+1)& (0+255),w,b
  4381  001B80  E103               	bnz	u3160
  4382  001B82  0E1D               	movlw	29
  4383  001B84  5D6F               	subwf	floor@expon& (0+255),w,b
  4384  001B86  E309               	bnc	l3826
  4385  001B88                     u3160:
  4386                           
  4387                           ; BSR set to: 0
  4388  001B88  C067  F067         	movff	floor@x,?_floor
  4389  001B8C  C068  F068         	movff	floor@x+1,?_floor+1
  4390  001B90  C069  F069         	movff	floor@x+2,?_floor+2
  4391  001B94  C06A  F06A         	movff	floor@x+3,?_floor+3
  4392  001B98  0012               	return	
  4393  001B9A                     l3826:
  4394                           
  4395                           ; BSR set to: 0
  4396  001B9A  C067  F052         	movff	floor@x,___fltol@f1
  4397  001B9E  C068  F053         	movff	floor@x+1,___fltol@f1+1
  4398  001BA2  C069  F054         	movff	floor@x+2,___fltol@f1+2
  4399  001BA6  C06A  F055         	movff	floor@x+3,___fltol@f1+3
  4400  001BAA  EC0A  F011         	call	___fltol	;wreg free
  4401  001BAE  C052  F062         	movff	?___fltol,___altofl@c
  4402  001BB2  C053  F063         	movff	?___fltol+1,___altofl@c+1
  4403  001BB6  C054  F064         	movff	?___fltol+2,___altofl@c+2
  4404  001BBA  C055  F065         	movff	?___fltol+3,___altofl@c+3
  4405  001BBE  ECF5  F012         	call	___altofl	;wreg free
  4406  001BC2  C062  F06B         	movff	?___altofl,floor@i
  4407  001BC6  C063  F06C         	movff	?___altofl+1,floor@i+1
  4408  001BCA  C064  F06D         	movff	?___altofl+2,floor@i+2
  4409  001BCE  C065  F06E         	movff	?___altofl+3,floor@i+3
  4410  001BD2  C067  F004         	movff	floor@x,___flge@ff1
  4411  001BD6  C068  F005         	movff	floor@x+1,___flge@ff1+1
  4412  001BDA  C069  F006         	movff	floor@x+2,___flge@ff1+2
  4413  001BDE  C06A  F007         	movff	floor@x+3,___flge@ff1+3
  4414  001BE2  C06B  F008         	movff	floor@i,___flge@ff2
  4415  001BE6  C06C  F009         	movff	floor@i+1,___flge@ff2+1
  4416  001BEA  C06D  F00A         	movff	floor@i+2,___flge@ff2+2
  4417  001BEE  C06E  F00B         	movff	floor@i+3,___flge@ff2+3
  4418  001BF2  EC60  F012         	call	___flge	;wreg free
  4419  001BF6  E215               	bc	l904
  4420  001BF8  C06B  F02C         	movff	floor@i,___fladd@f1
  4421  001BFC  C06C  F02D         	movff	floor@i+1,___fladd@f1+1
  4422  001C00  C06D  F02E         	movff	floor@i+2,___fladd@f1+2
  4423  001C04  C06E  F02F         	movff	floor@i+3,___fladd@f1+3
  4424  001C08  EC92  F00C         	call	PL24	;call to abstracted procedure
  4425  001C0C  EC59  F00B         	call	___fladd	;wreg free
  4426  001C10  C02C  F067         	movff	?___fladd,?_floor
  4427  001C14  C02D  F068         	movff	?___fladd+1,?_floor+1
  4428  001C18  C02E  F069         	movff	?___fladd+2,?_floor+2
  4429  001C1C  C02F  F06A         	movff	?___fladd+3,?_floor+3
  4430  001C20  0012               	return	
  4431  001C22                     l904:
  4432  001C22  C06B  F067         	movff	floor@i,?_floor
  4433  001C26  C06C  F068         	movff	floor@i+1,?_floor+1
  4434  001C2A  C06D  F069         	movff	floor@i+2,?_floor+2
  4435  001C2E  C06E  F06A         	movff	floor@i+3,?_floor+3
  4436  001C32  0012               	return		;funcret
  4437  001C34                     __end_of_floor:
  4438                           	opt stack 0
  4439                           tblptru	equ	0xFF8
  4440                           tblptrh	equ	0xFF7
  4441                           tblptrl	equ	0xFF6
  4442                           tablat	equ	0xFF5
  4443                           prodl	equ	0xFF3
  4444                           intcon	equ	0xFF2
  4445                           intcon2	equ	0xFF1
  4446                           postinc0	equ	0xFEE
  4447                           wreg	equ	0xFE8
  4448                           postdec1	equ	0xFE5
  4449                           fsr1l	equ	0xFE1
  4450                           indf2	equ	0xFDF
  4451                           postinc2	equ	0xFDE
  4452                           postdec2	equ	0xFDD
  4453                           fsr2h	equ	0xFDA
  4454                           fsr2l	equ	0xFD9
  4455                           status	equ	0xFD8
  4456                           
  4457 ;; *************** function ___fltol *****************
  4458 ;; Defined at:
  4459 ;;		line 43 in file "/opt/microchip/xc8/v1.34/sources/common/fltol.c"
  4460 ;; Parameters:    Size  Location     Type
  4461 ;;  f1              4   81[COMRAM] int 
  4462 ;; Auto vars:     Size  Location     Type
  4463 ;;  exp1            1    1[BANK0 ] unsigned char 
  4464 ;;  sign1           1    0[BANK0 ] unsigned char 
  4465 ;; Return value:  Size  Location     Type
  4466 ;;                  4   81[COMRAM] long 
  4467 ;; Registers used:
  4468 ;;		wreg, status,2, status,0
  4469 ;; Tracked objects:
  4470 ;;		On entry : 0/0
  4471 ;;		On exit  : F/0
  4472 ;;		Unchanged: 0/0
  4473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4474 ;;      Params:         4       0       0       0       0       0       0       0       0
  4475 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4476 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4477 ;;      Totals:         8       2       0       0       0       0       0       0       0
  4478 ;;Total ram usage:       10 bytes
  4479 ;; Hardware stack levels used:    1
  4480 ;; Hardware stack levels required when called:    1
  4481 ;; This function calls:
  4482 ;;		Nothing
  4483 ;; This function is called by:
  4484 ;;		_format_double
  4485 ;;		_measure_capacitance
  4486 ;;		_measure_inductance
  4487 ;;		_floor
  4488 ;;		_pow
  4489 ;;		_exp
  4490 ;; This function uses a non-reentrant model
  4491 ;;
  4492                           
  4493                           	psect	text16
  4494  002214                     __ptext16:
  4495                           	opt stack 0
  4496  002214                     ___fltol:
  4497                           	opt stack 28
  4498                           
  4499                           ;incstack = 0
  4500  002214  3454               	rlcf	___fltol@f1+2,w,c
  4501  002216  3455               	rlcf	___fltol@f1+3,w,c
  4502  002218  0100               	movlb	0	; () banked
  4503  00221A  6F61               	movwf	___fltol@exp1& (0+255),b
  4504  00221C  5161               	movf	___fltol@exp1& (0+255),w,b
  4505  00221E  E105               	bnz	l3778
  4506  002220                     l3776:
  4507                           
  4508                           ; BSR set to: 0
  4509  002220  6A52               	clrf	?___fltol,c
  4510  002222  6A53               	clrf	?___fltol+1,c
  4511  002224  6A54               	clrf	?___fltol+2,c
  4512  002226  6A55               	clrf	?___fltol+3,c
  4513  002228  0012               	return	
  4514  00222A                     l3778:
  4515                           
  4516                           ; BSR set to: 0
  4517  00222A  C052  F056         	movff	___fltol@f1,??___fltol
  4518  00222E  C053  F057         	movff	___fltol@f1+1,??___fltol+1
  4519  002232  C054  F058         	movff	___fltol@f1+2,??___fltol+2
  4520  002236  C055  F059         	movff	___fltol@f1+3,??___fltol+3
  4521  00223A  0E20               	movlw	32
  4522  00223C  D005               	goto	u3080
  4523  00223E                     u3085:
  4524  00223E  90D8               	bcf	status,0,c
  4525  002240  3259               	rrcf	??___fltol+3,f,c
  4526  002242  3258               	rrcf	??___fltol+2,f,c
  4527  002244  3257               	rrcf	??___fltol+1,f,c
  4528  002246  3256               	rrcf	??___fltol,f,c
  4529  002248                     u3080:
  4530  002248  2EE8               	decfsz	wreg,f,c
  4531  00224A  D7F9               	goto	u3085
  4532  00224C  5056               	movf	??___fltol,w,c
  4533  00224E  6F60               	movwf	___fltol@sign1& (0+255),b
  4534                           
  4535                           ; BSR set to: 0
  4536  002250  8E54               	bsf	___fltol@f1+2,7,c
  4537                           
  4538                           ; BSR set to: 0
  4539  002252  6A55               	clrf	___fltol@f1+3,c
  4540                           
  4541                           ; BSR set to: 0
  4542  002254  0E96               	movlw	150
  4543  002256  5F61               	subwf	___fltol@exp1& (0+255),f,b
  4544                           
  4545                           ; BSR set to: 0
  4546  002258  AF61               	btfss	___fltol@exp1& (0+255),7,b
  4547  00225A  D00C               	goto	l3796
  4548                           
  4549                           ; BSR set to: 0
  4550  00225C  5161               	movf	___fltol@exp1& (0+255),w,b
  4551  00225E  0A80               	xorlw	128
  4552  002260  0F97               	addlw	151
  4553  002262  E3DE               	bnc	l3776
  4554  002264                     l3792:
  4555                           
  4556                           ; BSR set to: 0
  4557  002264  90D8               	bcf	status,0,c
  4558  002266  3255               	rrcf	___fltol@f1+3,f,c
  4559  002268  3254               	rrcf	___fltol@f1+2,f,c
  4560  00226A  3253               	rrcf	___fltol@f1+1,f,c
  4561  00226C  3252               	rrcf	___fltol@f1,f,c
  4562                           
  4563                           ; BSR set to: 0
  4564  00226E  3F61               	incfsz	___fltol@exp1& (0+255),f,b
  4565  002270  D7F9               	goto	l3792
  4566  002272  D00C               	goto	l3804
  4567  002274                     l3796:
  4568                           
  4569                           ; BSR set to: 0
  4570  002274  0E1F               	movlw	31
  4571  002276  6561               	cpfsgt	___fltol@exp1& (0+255),b
  4572  002278  D007               	goto	l3802
  4573  00227A  D7D2               	goto	l3776
  4574  00227C                     l3800:
  4575                           
  4576                           ; BSR set to: 0
  4577  00227C  90D8               	bcf	status,0,c
  4578  00227E  3652               	rlcf	___fltol@f1,f,c
  4579  002280  3653               	rlcf	___fltol@f1+1,f,c
  4580  002282  3654               	rlcf	___fltol@f1+2,f,c
  4581  002284  3655               	rlcf	___fltol@f1+3,f,c
  4582  002286  0761               	decf	___fltol@exp1& (0+255),f,b
  4583  002288                     l3802:
  4584                           
  4585                           ; BSR set to: 0
  4586  002288  5161               	movf	___fltol@exp1& (0+255),w,b
  4587  00228A  E1F8               	bnz	l3800
  4588  00228C                     l3804:
  4589                           
  4590                           ; BSR set to: 0
  4591  00228C  5160               	movf	___fltol@sign1& (0+255),w,b
  4592  00228E  E008               	bz	l3808
  4593                           
  4594                           ; BSR set to: 0
  4595  002290  1E55               	comf	___fltol@f1+3,f,c
  4596  002292  1E54               	comf	___fltol@f1+2,f,c
  4597  002294  1E53               	comf	___fltol@f1+1,f,c
  4598  002296  6C52               	negf	___fltol@f1,c
  4599  002298  0E00               	movlw	0
  4600  00229A  2253               	addwfc	___fltol@f1+1,f,c
  4601  00229C  2254               	addwfc	___fltol@f1+2,f,c
  4602  00229E  2255               	addwfc	___fltol@f1+3,f,c
  4603  0022A0                     l3808:
  4604                           
  4605                           ; BSR set to: 0
  4606  0022A0  C052  F052         	movff	___fltol@f1,?___fltol
  4607  0022A4  C053  F053         	movff	___fltol@f1+1,?___fltol+1
  4608  0022A8  C054  F054         	movff	___fltol@f1+2,?___fltol+2
  4609  0022AC  C055  F055         	movff	___fltol@f1+3,?___fltol+3
  4610                           
  4611                           ; BSR set to: 0
  4612  0022B0  0012               	return		;funcret
  4613  0022B2                     __end_of___fltol:
  4614                           	opt stack 0
  4615                           tblptru	equ	0xFF8
  4616                           tblptrh	equ	0xFF7
  4617                           tblptrl	equ	0xFF6
  4618                           tablat	equ	0xFF5
  4619                           prodl	equ	0xFF3
  4620                           intcon	equ	0xFF2
  4621                           intcon2	equ	0xFF1
  4622                           postinc0	equ	0xFEE
  4623                           wreg	equ	0xFE8
  4624                           postdec1	equ	0xFE5
  4625                           fsr1l	equ	0xFE1
  4626                           indf2	equ	0xFDF
  4627                           postinc2	equ	0xFDE
  4628                           postdec2	equ	0xFDD
  4629                           fsr2h	equ	0xFDA
  4630                           fsr2l	equ	0xFD9
  4631                           status	equ	0xFD8
  4632                           
  4633 ;; *************** function ___flge *****************
  4634 ;; Defined at:
  4635 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/flge.c"
  4636 ;; Parameters:    Size  Location     Type
  4637 ;;  ff1             4    3[COMRAM] long 
  4638 ;;  ff2             4    7[COMRAM] long 
  4639 ;; Auto vars:     Size  Location     Type
  4640 ;;		None
  4641 ;; Return value:  Size  Location     Type
  4642 ;;		None               void
  4643 ;; Registers used:
  4644 ;;		wreg, status,2, status,0
  4645 ;; Tracked objects:
  4646 ;;		On entry : 0/0
  4647 ;;		On exit  : 0/0
  4648 ;;		Unchanged: 0/0
  4649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4650 ;;      Params:         8       0       0       0       0       0       0       0       0
  4651 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4652 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4653 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4654 ;;Total ram usage:        8 bytes
  4655 ;; Hardware stack levels used:    1
  4656 ;; Hardware stack levels required when called:    1
  4657 ;; This function calls:
  4658 ;;		Nothing
  4659 ;; This function is called by:
  4660 ;;		_format_double
  4661 ;;		_measure_capacitance
  4662 ;;		_measure_inductance
  4663 ;;		_floor
  4664 ;;		_pow
  4665 ;;		_exp
  4666 ;; This function uses a non-reentrant model
  4667 ;;
  4668                           
  4669                           	psect	text17
  4670  0024C0                     __ptext17:
  4671                           	opt stack 0
  4672  0024C0                     ___flge:
  4673                           	opt stack 28
  4674                           
  4675                           ; BSR set to: 0
  4676                           ;incstack = 0
  4677  0024C0  AE07               	btfss	___flge@ff1+3,7,c
  4678  0024C2  D009               	goto	l2616
  4679  0024C4  6C04               	negf	___flge@ff1,c
  4680  0024C6  1E05               	comf	___flge@ff1+1,f,c
  4681  0024C8  B0D8               	btfsc	status,0,c
  4682  0024CA  2A05               	incf	___flge@ff1+1,f,c
  4683  0024CC  1E06               	comf	___flge@ff1+2,f,c
  4684  0024CE  B0D8               	btfsc	status,0,c
  4685  0024D0  2A06               	incf	___flge@ff1+2,f,c
  4686  0024D2  0E80               	movlw	128
  4687  0024D4  5607               	subfwb	___flge@ff1+3,f,c
  4688  0024D6                     l2616:
  4689  0024D6  AE0B               	btfss	___flge@ff2+3,7,c
  4690  0024D8  D009               	goto	l858
  4691  0024DA  6C08               	negf	___flge@ff2,c
  4692  0024DC  1E09               	comf	___flge@ff2+1,f,c
  4693  0024DE  B0D8               	btfsc	status,0,c
  4694  0024E0  2A09               	incf	___flge@ff2+1,f,c
  4695  0024E2  1E0A               	comf	___flge@ff2+2,f,c
  4696  0024E4  B0D8               	btfsc	status,0,c
  4697  0024E6  2A0A               	incf	___flge@ff2+2,f,c
  4698  0024E8  0E80               	movlw	128
  4699  0024EA  560B               	subfwb	___flge@ff2+3,f,c
  4700  0024EC                     l858:
  4701  0024EC  0E80               	movlw	128
  4702  0024EE  1A07               	xorwf	___flge@ff1+3,f,c
  4703  0024F0  1A0B               	xorwf	___flge@ff2+3,f,c
  4704  0024F2  5008               	movf	___flge@ff2,w,c
  4705  0024F4  5C04               	subwf	___flge@ff1,w,c
  4706  0024F6  5009               	movf	___flge@ff2+1,w,c
  4707  0024F8  5805               	subwfb	___flge@ff1+1,w,c
  4708  0024FA  500A               	movf	___flge@ff2+2,w,c
  4709  0024FC  5806               	subwfb	___flge@ff1+2,w,c
  4710  0024FE  500B               	movf	___flge@ff2+3,w,c
  4711  002500  5807               	subwfb	___flge@ff1+3,w,c
  4712  002502  E202               	bc	l2622
  4713  002504  90D8               	bcf	status,0,c
  4714  002506  0012               	return	
  4715  002508                     l2622:
  4716  002508  80D8               	bsf	status,0,c
  4717  00250A  0012               	return		;funcret
  4718  00250C                     __end_of___flge:
  4719                           	opt stack 0
  4720                           tblptru	equ	0xFF8
  4721                           tblptrh	equ	0xFF7
  4722                           tblptrl	equ	0xFF6
  4723                           tablat	equ	0xFF5
  4724                           prodl	equ	0xFF3
  4725                           intcon	equ	0xFF2
  4726                           intcon2	equ	0xFF1
  4727                           postinc0	equ	0xFEE
  4728                           wreg	equ	0xFE8
  4729                           postdec1	equ	0xFE5
  4730                           fsr1l	equ	0xFE1
  4731                           indf2	equ	0xFDF
  4732                           postinc2	equ	0xFDE
  4733                           postdec2	equ	0xFDD
  4734                           fsr2h	equ	0xFDA
  4735                           fsr2l	equ	0xFD9
  4736                           status	equ	0xFD8
  4737                           
  4738 ;; *************** function ___altofl *****************
  4739 ;; Defined at:
  4740 ;;		line 36 in file "/opt/microchip/xc8/v1.34/sources/common/altofl.c"
  4741 ;; Parameters:    Size  Location     Type
  4742 ;;  c               4    2[BANK0 ] long 
  4743 ;; Auto vars:     Size  Location     Type
  4744 ;;  sign            1    6[BANK0 ] unsigned char 
  4745 ;; Return value:  Size  Location     Type
  4746 ;;                  4    2[BANK0 ] unsigned char 
  4747 ;; Registers used:
  4748 ;;		wreg, status,2, status,0, cstack
  4749 ;; Tracked objects:
  4750 ;;		On entry : F/0
  4751 ;;		On exit  : 0/0
  4752 ;;		Unchanged: 0/0
  4753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4754 ;;      Params:         0       4       0       0       0       0       0       0       0
  4755 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4756 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4757 ;;      Totals:         0       5       0       0       0       0       0       0       0
  4758 ;;Total ram usage:        5 bytes
  4759 ;; Hardware stack levels used:    1
  4760 ;; Hardware stack levels required when called:    2
  4761 ;; This function calls:
  4762 ;;		___flpack
  4763 ;; This function is called by:
  4764 ;;		_floor
  4765 ;; This function uses a non-reentrant model
  4766 ;;
  4767                           
  4768                           	psect	text18
  4769  0025EA                     __ptext18:
  4770                           	opt stack 0
  4771  0025EA                     ___altofl:
  4772                           	opt stack 23
  4773                           
  4774                           ; BSR set to: 0
  4775                           
  4776                           ;incstack = 0
  4777  0025EA  6B66               	clrf	___altofl@sign& (0+255),b
  4778                           
  4779                           ; BSR set to: 0
  4780  0025EC  AF65               	btfss	(___altofl@c+3)& (0+255),7,b
  4781  0025EE  D00A               	goto	l3658
  4782                           
  4783                           ; BSR set to: 0
  4784  0025F0  1F65               	comf	(___altofl@c+3)& (0+255),f,b
  4785  0025F2  1F64               	comf	(___altofl@c+2)& (0+255),f,b
  4786  0025F4  1F63               	comf	(___altofl@c+1)& (0+255),f,b
  4787  0025F6  6D62               	negf	___altofl@c& (0+255),b
  4788  0025F8  0E00               	movlw	0
  4789  0025FA  2363               	addwfc	(___altofl@c+1)& (0+255),f,b
  4790  0025FC  2364               	addwfc	(___altofl@c+2)& (0+255),f,b
  4791  0025FE  2365               	addwfc	(___altofl@c+3)& (0+255),f,b
  4792                           
  4793                           ; BSR set to: 0
  4794  002600  0E01               	movlw	1
  4795  002602  6F66               	movwf	___altofl@sign& (0+255),b
  4796  002604                     l3658:
  4797                           
  4798                           ; BSR set to: 0
  4799  002604  C062  F004         	movff	___altofl@c,___flpack@arg
  4800  002608  C063  F005         	movff	___altofl@c+1,___flpack@arg+1
  4801  00260C  C064  F006         	movff	___altofl@c+2,___flpack@arg+2
  4802  002610  C065  F007         	movff	___altofl@c+3,___flpack@arg+3
  4803  002614  0E96               	movlw	150
  4804  002616  6E08               	movwf	___flpack@exp,c
  4805  002618  C066  F009         	movff	___altofl@sign,___flpack@sign
  4806  00261C  EC57  F00F         	call	___flpack	;wreg free
  4807  002620  C004  F062         	movff	?___flpack,?___altofl
  4808  002624  C005  F063         	movff	?___flpack+1,?___altofl+1
  4809  002628  C006  F064         	movff	?___flpack+2,?___altofl+2
  4810  00262C  C007  F065         	movff	?___flpack+3,?___altofl+3
  4811  002630  0012               	return		;funcret
  4812  002632                     __end_of___altofl:
  4813                           	opt stack 0
  4814                           tblptru	equ	0xFF8
  4815                           tblptrh	equ	0xFF7
  4816                           tblptrl	equ	0xFF6
  4817                           tablat	equ	0xFF5
  4818                           prodl	equ	0xFF3
  4819                           intcon	equ	0xFF2
  4820                           intcon2	equ	0xFF1
  4821                           postinc0	equ	0xFEE
  4822                           wreg	equ	0xFE8
  4823                           postdec1	equ	0xFE5
  4824                           fsr1l	equ	0xFE1
  4825                           indf2	equ	0xFDF
  4826                           postinc2	equ	0xFDE
  4827                           postdec2	equ	0xFDD
  4828                           fsr2h	equ	0xFDA
  4829                           fsr2l	equ	0xFD9
  4830                           status	equ	0xFD8
  4831                           
  4832 ;; *************** function ___flsub *****************
  4833 ;; Defined at:
  4834 ;;		line 20 in file "/opt/microchip/xc8/v1.34/sources/common/flsub.c"
  4835 ;; Parameters:    Size  Location     Type
  4836 ;;  f1              4   55[COMRAM] unsigned char 
  4837 ;;  f2              4   59[COMRAM] unsigned char 
  4838 ;; Auto vars:     Size  Location     Type
  4839 ;;		None
  4840 ;; Return value:  Size  Location     Type
  4841 ;;                  4   55[COMRAM] unsigned char 
  4842 ;; Registers used:
  4843 ;;		wreg, status,2, status,0, cstack
  4844 ;; Tracked objects:
  4845 ;;		On entry : 0/0
  4846 ;;		On exit  : 0/0
  4847 ;;		Unchanged: 0/0
  4848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4849 ;;      Params:         8       0       0       0       0       0       0       0       0
  4850 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4851 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4852 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4853 ;;Total ram usage:        8 bytes
  4854 ;; Hardware stack levels used:    1
  4855 ;; Hardware stack levels required when called:    3
  4856 ;; This function calls:
  4857 ;;		___fladd
  4858 ;; This function is called by:
  4859 ;;		_format_double
  4860 ;;		_measure_capacitance
  4861 ;;		_measure_inductance
  4862 ;;		_exp
  4863 ;; This function uses a non-reentrant model
  4864 ;;
  4865                           
  4866                           	psect	text19
  4867  002632                     __ptext19:
  4868                           	opt stack 0
  4869  002632                     ___flsub:
  4870                           	opt stack 26
  4871                           
  4872                           ;incstack = 0
  4873  002632  503C               	movf	___flsub@f2,w,c
  4874  002634  103D               	iorwf	___flsub@f2+1,w,c
  4875  002636  103E               	iorwf	___flsub@f2+2,w,c
  4876  002638  103F               	iorwf	___flsub@f2+3,w,c
  4877  00263A  E002               	bz	l3872
  4878  00263C  0E80               	movlw	128
  4879  00263E  1A3F               	xorwf	___flsub@f2+3,f,c
  4880  002640                     l3872:
  4881  002640  C038  F02C         	movff	___flsub@f1,___fladd@f1
  4882  002644  C039  F02D         	movff	___flsub@f1+1,___fladd@f1+1
  4883  002648  C03A  F02E         	movff	___flsub@f1+2,___fladd@f1+2
  4884  00264C  C03B  F02F         	movff	___flsub@f1+3,___fladd@f1+3
  4885  002650  C03C  F030         	movff	___flsub@f2,___fladd@f2
  4886  002654  C03D  F031         	movff	___flsub@f2+1,___fladd@f2+1
  4887  002658  C03E  F032         	movff	___flsub@f2+2,___fladd@f2+2
  4888  00265C  C03F  F033         	movff	___flsub@f2+3,___fladd@f2+3
  4889  002660  EC59  F00B         	call	___fladd	;wreg free
  4890  002664  C02C  F038         	movff	?___fladd,?___flsub
  4891  002668  C02D  F039         	movff	?___fladd+1,?___flsub+1
  4892  00266C  C02E  F03A         	movff	?___fladd+2,?___flsub+2
  4893  002670  C02F  F03B         	movff	?___fladd+3,?___flsub+3
  4894  002674  0012               	return		;funcret
  4895  002676                     __end_of___flsub:
  4896                           	opt stack 0
  4897                           tblptru	equ	0xFF8
  4898                           tblptrh	equ	0xFF7
  4899                           tblptrl	equ	0xFF6
  4900                           tablat	equ	0xFF5
  4901                           prodl	equ	0xFF3
  4902                           intcon	equ	0xFF2
  4903                           intcon2	equ	0xFF1
  4904                           postinc0	equ	0xFEE
  4905                           wreg	equ	0xFE8
  4906                           postdec1	equ	0xFE5
  4907                           fsr1l	equ	0xFE1
  4908                           indf2	equ	0xFDF
  4909                           postinc2	equ	0xFDE
  4910                           postdec2	equ	0xFDD
  4911                           fsr2h	equ	0xFDA
  4912                           fsr2l	equ	0xFD9
  4913                           status	equ	0xFD8
  4914                           
  4915 ;; *************** function ___flneg *****************
  4916 ;; Defined at:
  4917 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/flneg.c"
  4918 ;; Parameters:    Size  Location     Type
  4919 ;;  f1              4    3[COMRAM] unsigned char 
  4920 ;; Auto vars:     Size  Location     Type
  4921 ;;		None
  4922 ;; Return value:  Size  Location     Type
  4923 ;;                  4    3[COMRAM] unsigned char 
  4924 ;; Registers used:
  4925 ;;		wreg, status,2, status,0
  4926 ;; Tracked objects:
  4927 ;;		On entry : F/0
  4928 ;;		On exit  : F/0
  4929 ;;		Unchanged: F/0
  4930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4931 ;;      Params:         4       0       0       0       0       0       0       0       0
  4932 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4933 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4934 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4935 ;;Total ram usage:        4 bytes
  4936 ;; Hardware stack levels used:    1
  4937 ;; Hardware stack levels required when called:    1
  4938 ;; This function calls:
  4939 ;;		Nothing
  4940 ;; This function is called by:
  4941 ;;		_pow
  4942 ;;		_exp
  4943 ;; This function uses a non-reentrant model
  4944 ;;
  4945                           
  4946                           	psect	text20
  4947  00291E                     __ptext20:
  4948                           	opt stack 0
  4949  00291E                     ___flneg:
  4950                           	opt stack 25
  4951                           
  4952                           ; BSR set to: 0
  4953                           
  4954                           ;incstack = 0
  4955  00291E  5004               	movf	___flneg@f1,w,c
  4956  002920  1005               	iorwf	___flneg@f1+1,w,c
  4957  002922  1006               	iorwf	___flneg@f1+2,w,c
  4958  002924  1007               	iorwf	___flneg@f1+3,w,c
  4959  002926  E002               	bz	l2784
  4960                           
  4961                           ; BSR set to: 0
  4962  002928  0E80               	movlw	128
  4963  00292A  1A07               	xorwf	___flneg@f1+3,f,c
  4964  00292C                     l2784:
  4965                           
  4966                           ; BSR set to: 0
  4967  00292C  C004  F004         	movff	___flneg@f1,?___flneg
  4968  002930  C005  F005         	movff	___flneg@f1+1,?___flneg+1
  4969  002934  C006  F006         	movff	___flneg@f1+2,?___flneg+2
  4970  002938  C007  F007         	movff	___flneg@f1+3,?___flneg+3
  4971                           
  4972                           ; BSR set to: 0
  4973  00293C  0012               	return		;funcret
  4974  00293E                     __end_of___flneg:
  4975                           	opt stack 0
  4976                           tblptru	equ	0xFF8
  4977                           tblptrh	equ	0xFF7
  4978                           tblptrl	equ	0xFF6
  4979                           tablat	equ	0xFF5
  4980                           prodl	equ	0xFF3
  4981                           intcon	equ	0xFF2
  4982                           intcon2	equ	0xFF1
  4983                           postinc0	equ	0xFEE
  4984                           wreg	equ	0xFE8
  4985                           postdec1	equ	0xFE5
  4986                           fsr1l	equ	0xFE1
  4987                           indf2	equ	0xFDF
  4988                           postinc2	equ	0xFDE
  4989                           postdec2	equ	0xFDD
  4990                           fsr2h	equ	0xFDA
  4991                           fsr2l	equ	0xFD9
  4992                           status	equ	0xFD8
  4993                           
  4994 ;; *************** function ___fldiv *****************
  4995 ;; Defined at:
  4996 ;;		line 54 in file "/opt/microchip/xc8/v1.34/sources/common/fldiv.c"
  4997 ;; Parameters:    Size  Location     Type
  4998 ;;  f1              4   13[COMRAM] unsigned char 
  4999 ;;  f2              4   17[COMRAM] unsigned char 
  5000 ;; Auto vars:     Size  Location     Type
  5001 ;;  f3              4   21[COMRAM] unsigned char 
  5002 ;;  sign            1   27[COMRAM] unsigned char 
  5003 ;;  exp             1   26[COMRAM] unsigned char 
  5004 ;;  cntr            1   25[COMRAM] unsigned char 
  5005 ;; Return value:  Size  Location     Type
  5006 ;;                  4   13[COMRAM] unsigned char 
  5007 ;; Registers used:
  5008 ;;		wreg, status,2, status,0, cstack
  5009 ;; Tracked objects:
  5010 ;;		On entry : 0/0
  5011 ;;		On exit  : 0/0
  5012 ;;		Unchanged: 0/0
  5013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5014 ;;      Params:         8       0       0       0       0       0       0       0       0
  5015 ;;      Locals:         7       0       0       0       0       0       0       0       0
  5016 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5017 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5018 ;;Total ram usage:       15 bytes
  5019 ;; Hardware stack levels used:    1
  5020 ;; Hardware stack levels required when called:    2
  5021 ;; This function calls:
  5022 ;;		___flpack
  5023 ;; This function is called by:
  5024 ;;		_format_double
  5025 ;;		_measure_capacitance
  5026 ;;		_measure_inductance
  5027 ;;		_exp
  5028 ;; This function uses a non-reentrant model
  5029 ;;
  5030                           
  5031                           	psect	text21
  5032  001F70                     __ptext21:
  5033                           	opt stack 0
  5034  001F70                     ___fldiv:
  5035                           	opt stack 27
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;incstack = 0
  5039  001F70  3410               	rlcf	___fldiv@f1+2,w,c
  5040  001F72  3411               	rlcf	___fldiv@f1+3,w,c
  5041  001F74  6E1B               	movwf	___fldiv@exp,c
  5042  001F76  501B               	movf	___fldiv@exp,w,c
  5043  001F78  E105               	bnz	l3836
  5044  001F7A  6A0E               	clrf	?___fldiv,c
  5045  001F7C  6A0F               	clrf	?___fldiv+1,c
  5046  001F7E  6A10               	clrf	?___fldiv+2,c
  5047  001F80  6A11               	clrf	?___fldiv+3,c
  5048  001F82  0012               	return	
  5049  001F84                     l3836:
  5050  001F84  3414               	rlcf	___fldiv@f2+2,w,c
  5051  001F86  3415               	rlcf	___fldiv@f2+3,w,c
  5052  001F88  6E1C               	movwf	___fldiv@sign,c
  5053  001F8A  501C               	movf	___fldiv@sign,w,c
  5054  001F8C  E105               	bnz	l3840
  5055  001F8E  6A0E               	clrf	?___fldiv,c
  5056  001F90  6A0F               	clrf	?___fldiv+1,c
  5057  001F92  6A10               	clrf	?___fldiv+2,c
  5058  001F94  6A11               	clrf	?___fldiv+3,c
  5059  001F96  0012               	return	
  5060  001F98                     l3840:
  5061  001F98  501C               	movf	___fldiv@sign,w,c
  5062  001F9A  0F89               	addlw	137
  5063  001F9C  5E1B               	subwf	___fldiv@exp,f,c
  5064  001F9E  C011  F01C         	movff	___fldiv@f1+3,___fldiv@sign
  5065  001FA2  5015               	movf	___fldiv@f2+3,w,c
  5066  001FA4  1A1C               	xorwf	___fldiv@sign,f,c
  5067  001FA6  0E80               	movlw	128
  5068  001FA8  161C               	andwf	___fldiv@sign,f,c
  5069  001FAA  8E10               	bsf	___fldiv@f1+2,7,c
  5070  001FAC  6A11               	clrf	___fldiv@f1+3,c
  5071  001FAE  8E14               	bsf	___fldiv@f2+2,7,c
  5072  001FB0  6A15               	clrf	___fldiv@f2+3,c
  5073  001FB2  0E20               	movlw	32
  5074  001FB4  6E1A               	movwf	___fldiv@cntr,c
  5075  001FB6                     l3852:
  5076  001FB6  90D8               	bcf	status,0,c
  5077  001FB8  3616               	rlcf	___fldiv@f3,f,c
  5078  001FBA  3617               	rlcf	___fldiv@f3+1,f,c
  5079  001FBC  3618               	rlcf	___fldiv@f3+2,f,c
  5080  001FBE  3619               	rlcf	___fldiv@f3+3,f,c
  5081  001FC0  5012               	movf	___fldiv@f2,w,c
  5082  001FC2  5C0E               	subwf	___fldiv@f1,w,c
  5083  001FC4  5013               	movf	___fldiv@f2+1,w,c
  5084  001FC6  580F               	subwfb	___fldiv@f1+1,w,c
  5085  001FC8  5014               	movf	___fldiv@f2+2,w,c
  5086  001FCA  5810               	subwfb	___fldiv@f1+2,w,c
  5087  001FCC  5015               	movf	___fldiv@f2+3,w,c
  5088  001FCE  5811               	subwfb	___fldiv@f1+3,w,c
  5089  001FD0  E309               	bnc	l3860
  5090  001FD2  5012               	movf	___fldiv@f2,w,c
  5091  001FD4  5E0E               	subwf	___fldiv@f1,f,c
  5092  001FD6  5013               	movf	___fldiv@f2+1,w,c
  5093  001FD8  5A0F               	subwfb	___fldiv@f1+1,f,c
  5094  001FDA  5014               	movf	___fldiv@f2+2,w,c
  5095  001FDC  5A10               	subwfb	___fldiv@f1+2,f,c
  5096  001FDE  5015               	movf	___fldiv@f2+3,w,c
  5097  001FE0  5A11               	subwfb	___fldiv@f1+3,f,c
  5098  001FE2  8016               	bsf	___fldiv@f3,0,c
  5099  001FE4                     l3860:
  5100  001FE4  90D8               	bcf	status,0,c
  5101  001FE6  360E               	rlcf	___fldiv@f1,f,c
  5102  001FE8  360F               	rlcf	___fldiv@f1+1,f,c
  5103  001FEA  3610               	rlcf	___fldiv@f1+2,f,c
  5104  001FEC  3611               	rlcf	___fldiv@f1+3,f,c
  5105  001FEE  2E1A               	decfsz	___fldiv@cntr,f,c
  5106  001FF0  D7E2               	goto	l3852
  5107  001FF2  C016  F004         	movff	___fldiv@f3,___flpack@arg
  5108  001FF6  C017  F005         	movff	___fldiv@f3+1,___flpack@arg+1
  5109  001FFA  C018  F006         	movff	___fldiv@f3+2,___flpack@arg+2
  5110  001FFE  C019  F007         	movff	___fldiv@f3+3,___flpack@arg+3
  5111  002002  C01B  F008         	movff	___fldiv@exp,___flpack@exp
  5112  002006  C01C  F009         	movff	___fldiv@sign,___flpack@sign
  5113  00200A  EC57  F00F         	call	___flpack	;wreg free
  5114  00200E  C004  F00E         	movff	?___flpack,?___fldiv
  5115  002012  C005  F00F         	movff	?___flpack+1,?___fldiv+1
  5116  002016  C006  F010         	movff	?___flpack+2,?___fldiv+2
  5117  00201A  C007  F011         	movff	?___flpack+3,?___fldiv+3
  5118  00201E  0012               	return		;funcret
  5119  002020                     __end_of___fldiv:
  5120                           	opt stack 0
  5121                           tblptru	equ	0xFF8
  5122                           tblptrh	equ	0xFF7
  5123                           tblptrl	equ	0xFF6
  5124                           tablat	equ	0xFF5
  5125                           prodl	equ	0xFF3
  5126                           intcon	equ	0xFF2
  5127                           intcon2	equ	0xFF1
  5128                           postinc0	equ	0xFEE
  5129                           wreg	equ	0xFE8
  5130                           postdec1	equ	0xFE5
  5131                           fsr1l	equ	0xFE1
  5132                           indf2	equ	0xFDF
  5133                           postinc2	equ	0xFDE
  5134                           postdec2	equ	0xFDD
  5135                           fsr2h	equ	0xFDA
  5136                           fsr2l	equ	0xFD9
  5137                           status	equ	0xFD8
  5138                           
  5139 ;; *************** function ___lltofl *****************
  5140 ;; Defined at:
  5141 ;;		line 30 in file "/opt/microchip/xc8/v1.34/sources/common/lltofl.c"
  5142 ;; Parameters:    Size  Location     Type
  5143 ;;  c               4   13[COMRAM] unsigned long 
  5144 ;; Auto vars:     Size  Location     Type
  5145 ;;		None
  5146 ;; Return value:  Size  Location     Type
  5147 ;;                  4   13[COMRAM] unsigned long 
  5148 ;; Registers used:
  5149 ;;		wreg, status,2, status,0, cstack
  5150 ;; Tracked objects:
  5151 ;;		On entry : F/0
  5152 ;;		On exit  : 0/0
  5153 ;;		Unchanged: 0/0
  5154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5155 ;;      Params:         4       0       0       0       0       0       0       0       0
  5156 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5157 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5158 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5159 ;;Total ram usage:        4 bytes
  5160 ;; Hardware stack levels used:    1
  5161 ;; Hardware stack levels required when called:    2
  5162 ;; This function calls:
  5163 ;;		___flpack
  5164 ;; This function is called by:
  5165 ;;		_pow
  5166 ;; This function uses a non-reentrant model
  5167 ;;
  5168                           
  5169                           	psect	text22
  5170  002786                     __ptext22:
  5171                           	opt stack 0
  5172  002786                     ___lltofl:
  5173                           	opt stack 25
  5174                           
  5175                           ; BSR set to: 0
  5176                           
  5177                           ;incstack = 0
  5178  002786  C00E  F004         	movff	___lltofl@c,___flpack@arg
  5179  00278A  C00F  F005         	movff	___lltofl@c+1,___flpack@arg+1
  5180  00278E  C010  F006         	movff	___lltofl@c+2,___flpack@arg+2
  5181  002792  C011  F007         	movff	___lltofl@c+3,___flpack@arg+3
  5182  002796  0E96               	movlw	150
  5183  002798  6E08               	movwf	___flpack@exp,c
  5184  00279A  0E00               	movlw	0
  5185  00279C  6E09               	movwf	___flpack@sign,c
  5186  00279E  EC57  F00F         	call	___flpack	;wreg free
  5187  0027A2  C004  F00E         	movff	?___flpack,?___lltofl
  5188  0027A6  C005  F00F         	movff	?___flpack+1,?___lltofl+1
  5189  0027AA  C006  F010         	movff	?___flpack+2,?___lltofl+2
  5190  0027AE  C007  F011         	movff	?___flpack+3,?___lltofl+3
  5191  0027B2  0012               	return		;funcret
  5192  0027B4                     __end_of___lltofl:
  5193                           	opt stack 0
  5194                           tblptru	equ	0xFF8
  5195                           tblptrh	equ	0xFF7
  5196                           tblptrl	equ	0xFF6
  5197                           tablat	equ	0xFF5
  5198                           prodl	equ	0xFF3
  5199                           intcon	equ	0xFF2
  5200                           intcon2	equ	0xFF1
  5201                           postinc0	equ	0xFEE
  5202                           wreg	equ	0xFE8
  5203                           postdec1	equ	0xFE5
  5204                           fsr1l	equ	0xFE1
  5205                           indf2	equ	0xFDF
  5206                           postinc2	equ	0xFDE
  5207                           postdec2	equ	0xFDD
  5208                           fsr2h	equ	0xFDA
  5209                           fsr2l	equ	0xFD9
  5210                           status	equ	0xFD8
  5211                           
  5212 ;; *************** function _log10 *****************
  5213 ;; Defined at:
  5214 ;;		line 39 in file "/opt/microchip/xc8/v1.34/sources/common/log.c"
  5215 ;; Parameters:    Size  Location     Type
  5216 ;;  x               4   73[COMRAM] unsigned long 
  5217 ;; Auto vars:     Size  Location     Type
  5218 ;;		None
  5219 ;; Return value:  Size  Location     Type
  5220 ;;                  4   73[COMRAM] unsigned long 
  5221 ;; Registers used:
  5222 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5223 ;; Tracked objects:
  5224 ;;		On entry : 0/0
  5225 ;;		On exit  : 0/0
  5226 ;;		Unchanged: 0/0
  5227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5228 ;;      Params:         4       0       0       0       0       0       0       0       0
  5229 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5230 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5231 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5232 ;;Total ram usage:        8 bytes
  5233 ;; Hardware stack levels used:    1
  5234 ;; Hardware stack levels required when called:    5
  5235 ;; This function calls:
  5236 ;;		___flmul
  5237 ;;		_log
  5238 ;; This function is called by:
  5239 ;;		_format_double
  5240 ;; This function uses a non-reentrant model
  5241 ;;
  5242                           
  5243                           	psect	text23
  5244  00241A                     __ptext23:
  5245                           	opt stack 0
  5246  00241A                     _log10:
  5247                           	opt stack 23
  5248                           
  5249                           ;incstack = 0
  5250  00241A  C04A  F044         	movff	log10@x,log@x
  5251  00241E  C04B  F045         	movff	log10@x+1,log@x+1
  5252  002422  C04C  F046         	movff	log10@x+2,log@x+2
  5253  002426  C04D  F047         	movff	log10@x+3,log@x+3
  5254  00242A  EC06  F00C         	call	_log	;wreg free
  5255  00242E  C044  F04E         	movff	?_log,_log10$1119
  5256  002432  C045  F04F         	movff	?_log+1,_log10$1119+1
  5257  002436  C046  F050         	movff	?_log+2,_log10$1119+2
  5258  00243A  C047  F051         	movff	?_log+3,_log10$1119+3
  5259  00243E  C04E  F01D         	movff	_log10$1119,___flmul@f1
  5260  002442  C04F  F01E         	movff	_log10$1119+1,___flmul@f1+1
  5261  002446  C050  F01F         	movff	_log10$1119+2,___flmul@f1+2
  5262  00244A  C051  F020         	movff	_log10$1119+3,___flmul@f1+3
  5263  00244E  0ED9               	movlw	217
  5264  002450  6E21               	movwf	___flmul@f2,c
  5265  002452  0E5B               	movlw	91
  5266  002454  6E22               	movwf	___flmul@f2+1,c
  5267  002456  0EDE               	movlw	222
  5268  002458  6E23               	movwf	___flmul@f2+2,c
  5269  00245A  0E3E               	movlw	62
  5270  00245C  6E24               	movwf	___flmul@f2+3,c
  5271  00245E  ECF5  F00E         	call	___flmul	;wreg free
  5272  002462  C01D  F04A         	movff	?___flmul,?_log10
  5273  002466  C01E  F04B         	movff	?___flmul+1,?_log10+1
  5274  00246A  C01F  F04C         	movff	?___flmul+2,?_log10+2
  5275  00246E  C020  F04D         	movff	?___flmul+3,?_log10+3
  5276  002472  0012               	return		;funcret
  5277  002474                     __end_of_log10:
  5278                           	opt stack 0
  5279                           tblptru	equ	0xFF8
  5280                           tblptrh	equ	0xFF7
  5281                           tblptrl	equ	0xFF6
  5282                           tablat	equ	0xFF5
  5283                           prodl	equ	0xFF3
  5284                           intcon	equ	0xFF2
  5285                           intcon2	equ	0xFF1
  5286                           postinc0	equ	0xFEE
  5287                           wreg	equ	0xFE8
  5288                           postdec1	equ	0xFE5
  5289                           fsr1l	equ	0xFE1
  5290                           indf2	equ	0xFDF
  5291                           postinc2	equ	0xFDE
  5292                           postdec2	equ	0xFDD
  5293                           fsr2h	equ	0xFDA
  5294                           fsr2l	equ	0xFD9
  5295                           status	equ	0xFD8
  5296                           
  5297 ;; *************** function _log *****************
  5298 ;; Defined at:
  5299 ;;		line 5 in file "/opt/microchip/xc8/v1.34/sources/common/log.c"
  5300 ;; Parameters:    Size  Location     Type
  5301 ;;  x               4   67[COMRAM] unsigned long 
  5302 ;; Auto vars:     Size  Location     Type
  5303 ;;  exponent        2   71[COMRAM] int 
  5304 ;; Return value:  Size  Location     Type
  5305 ;;                  4   67[COMRAM] int 
  5306 ;; Registers used:
  5307 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5308 ;; Tracked objects:
  5309 ;;		On entry : 0/0
  5310 ;;		On exit  : 0/0
  5311 ;;		Unchanged: 0/0
  5312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5313 ;;      Params:         4       0       0       0       0       0       0       0       0
  5314 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5315 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5316 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5317 ;;Total ram usage:        6 bytes
  5318 ;; Hardware stack levels used:    1
  5319 ;; Hardware stack levels required when called:    4
  5320 ;; This function calls:
  5321 ;;		___awtofl
  5322 ;;		___fladd
  5323 ;;		___flmul
  5324 ;;		_eval_poly
  5325 ;;		_frexp
  5326 ;; This function is called by:
  5327 ;;		_log10
  5328 ;;		_pow
  5329 ;; This function uses a non-reentrant model
  5330 ;;
  5331                           
  5332                           	psect	text24
  5333  00180C                     __ptext24:
  5334                           	opt stack 0
  5335  00180C                     _log:
  5336                           	opt stack 23
  5337                           
  5338                           ;incstack = 0
  5339  00180C  AE47               	btfss	log@x+3,7,c
  5340  00180E  D005               	goto	l3900
  5341  001810  6A44               	clrf	?_log,c
  5342  001812  6A45               	clrf	?_log+1,c
  5343  001814  6A46               	clrf	?_log+2,c
  5344  001816  6A47               	clrf	?_log+3,c
  5345  001818  0012               	return	
  5346  00181A                     l3900:
  5347  00181A  5044               	movf	log@x,w,c
  5348  00181C  1045               	iorwf	log@x+1,w,c
  5349  00181E  1046               	iorwf	log@x+2,w,c
  5350  001820  1047               	iorwf	log@x+3,w,c
  5351  001822  E105               	bnz	l3904
  5352  001824  6A44               	clrf	?_log,c
  5353  001826  6A45               	clrf	?_log+1,c
  5354  001828  6A46               	clrf	?_log+2,c
  5355  00182A  6A47               	clrf	?_log+3,c
  5356  00182C  0012               	return	
  5357  00182E                     l3904:
  5358  00182E  6A21               	clrf	___flmul@f2,c
  5359  001830  6A22               	clrf	___flmul@f2+1,c
  5360  001832  6A23               	clrf	___flmul@f2+2,c
  5361  001834  0E40               	movlw	64
  5362  001836  6E24               	movwf	___flmul@f2+3,c
  5363  001838  0E48               	movlw	low log@exponent
  5364  00183A  6E08               	movwf	frexp@eptr,c
  5365  00183C  C044  F004         	movff	log@x,frexp@value
  5366  001840  C045  F005         	movff	log@x+1,frexp@value+1
  5367  001844  C046  F006         	movff	log@x+2,frexp@value+2
  5368  001848  C047  F007         	movff	log@x+3,frexp@value+3
  5369  00184C  EC9A  F011         	call	_frexp	;wreg free
  5370  001850  C004  F01D         	movff	?_frexp,___flmul@f1
  5371  001854  C005  F01E         	movff	?_frexp+1,___flmul@f1+1
  5372  001858  C006  F01F         	movff	?_frexp+2,___flmul@f1+2
  5373  00185C  C007  F020         	movff	?_frexp+3,___flmul@f1+3
  5374  001860  ECF5  F00E         	call	___flmul	;wreg free
  5375  001864  C01D  F02C         	movff	?___flmul,___fladd@f1
  5376  001868  C01E  F02D         	movff	?___flmul+1,___fladd@f1+1
  5377  00186C  C01F  F02E         	movff	?___flmul+2,___fladd@f1+2
  5378  001870  C020  F02F         	movff	?___flmul+3,___fladd@f1+3
  5379  001874  D857               	call	PL24	;call to abstracted procedure
  5380  001876  EC59  F00B         	call	___fladd	;wreg free
  5381  00187A  C02C  F044         	movff	?___fladd,log@x
  5382  00187E  C02D  F045         	movff	?___fladd+1,log@x+1
  5383  001882  C02E  F046         	movff	?___fladd+2,log@x+2
  5384  001886  C02F  F047         	movff	?___fladd+3,log@x+3
  5385  00188A  0648               	decf	log@exponent,f,c
  5386  00188C  A0D8               	btfss	status,0,c
  5387  00188E  0649               	decf	log@exponent+1,f,c
  5388  001890  C044  F038         	movff	log@x,eval_poly@x
  5389  001894  C045  F039         	movff	log@x+1,eval_poly@x+1
  5390  001898  C046  F03A         	movff	log@x+2,eval_poly@x+2
  5391  00189C  C047  F03B         	movff	log@x+3,eval_poly@x+3
  5392  0018A0  0E29               	movlw	low log@coeff
  5393  0018A2  6E3C               	movwf	eval_poly@d,c
  5394  0018A4  6A3E               	clrf	eval_poly@n+1,c
  5395  0018A6  0E08               	movlw	8
  5396  0018A8  6E3D               	movwf	eval_poly@n,c
  5397  0018AA  EC10  F010         	call	_eval_poly	;wreg free
  5398  0018AE  C038  F044         	movff	?_eval_poly,log@x
  5399  0018B2  C039  F045         	movff	?_eval_poly+1,log@x+1
  5400  0018B6  C03A  F046         	movff	?_eval_poly+2,log@x+2
  5401  0018BA  C03B  F047         	movff	?_eval_poly+3,log@x+3
  5402  0018BE  0E18               	movlw	24
  5403  0018C0  6E21               	movwf	___flmul@f2,c
  5404  0018C2  0E72               	movlw	114
  5405  0018C4  6E22               	movwf	___flmul@f2+1,c
  5406  0018C6  0E31               	movlw	49
  5407  0018C8  6E23               	movwf	___flmul@f2+2,c
  5408  0018CA  0E3F               	movlw	63
  5409  0018CC  6E24               	movwf	___flmul@f2+3,c
  5410  0018CE  C048  F00E         	movff	log@exponent,___awtofl@c
  5411  0018D2  C049  F00F         	movff	log@exponent+1,___awtofl@c+1
  5412  0018D6  EC5A  F013         	call	___awtofl	;wreg free
  5413  0018DA  C00E  F01D         	movff	?___awtofl,___flmul@f1
  5414  0018DE  C00F  F01E         	movff	?___awtofl+1,___flmul@f1+1
  5415  0018E2  C010  F01F         	movff	?___awtofl+2,___flmul@f1+2
  5416  0018E6  C011  F020         	movff	?___awtofl+3,___flmul@f1+3
  5417  0018EA  ECF5  F00E         	call	___flmul	;wreg free
  5418  0018EE  C01D  F02C         	movff	?___flmul,___fladd@f1
  5419  0018F2  C01E  F02D         	movff	?___flmul+1,___fladd@f1+1
  5420  0018F6  C01F  F02E         	movff	?___flmul+2,___fladd@f1+2
  5421  0018FA  C020  F02F         	movff	?___flmul+3,___fladd@f1+3
  5422  0018FE  C044  F030         	movff	log@x,___fladd@f2
  5423  001902  C045  F031         	movff	log@x+1,___fladd@f2+1
  5424  001906  C046  F032         	movff	log@x+2,___fladd@f2+2
  5425  00190A  C047  F033         	movff	log@x+3,___fladd@f2+3
  5426  00190E  EC59  F00B         	call	___fladd	;wreg free
  5427  001912  C02C  F044         	movff	?___fladd,?_log
  5428  001916  C02D  F045         	movff	?___fladd+1,?_log+1
  5429  00191A  C02E  F046         	movff	?___fladd+2,?_log+2
  5430  00191E  C02F  F047         	movff	?___fladd+3,?_log+3
  5431  001922  0012               	return		;funcret
  5432  001924                     __end_of_log:
  5433                           	opt stack 0
  5434  001924                     PL24:
  5435                           	opt stack 23
  5436  001924  0E00               	movlw	0
  5437  001926  6E30               	movwf	___fladd@f2,c
  5438  001928  6E31               	movwf	___fladd@f2+1,c
  5439  00192A  0E80               	movlw	128
  5440  00192C  6E32               	movwf	___fladd@f2+2,c
  5441  00192E  0EBF               	movlw	191
  5442  001930  6E33               	movwf	___fladd@f2+3,c
  5443  001932  0CBF               	retlw	191
  5444  001934                     __end_ofPL24:
  5445                           	opt stack 0
  5446                           tblptru	equ	0xFF8
  5447                           tblptrh	equ	0xFF7
  5448                           tblptrl	equ	0xFF6
  5449                           tablat	equ	0xFF5
  5450                           prodl	equ	0xFF3
  5451                           intcon	equ	0xFF2
  5452                           intcon2	equ	0xFF1
  5453                           postinc0	equ	0xFEE
  5454                           wreg	equ	0xFE8
  5455                           postdec1	equ	0xFE5
  5456                           fsr1l	equ	0xFE1
  5457                           indf2	equ	0xFDF
  5458                           postinc2	equ	0xFDE
  5459                           postdec2	equ	0xFDD
  5460                           fsr2h	equ	0xFDA
  5461                           fsr2l	equ	0xFD9
  5462                           status	equ	0xFD8
  5463                           
  5464 ;; *************** function _frexp *****************
  5465 ;; Defined at:
  5466 ;;		line 254 in file "/opt/microchip/xc8/v1.34/sources/common/frexp.c"
  5467 ;; Parameters:    Size  Location     Type
  5468 ;;  value           4    3[COMRAM] int 
  5469 ;;  eptr            1    7[COMRAM] PTR int 
  5470 ;;		 -> log@exponent(2), floor@expon(2), 
  5471 ;; Auto vars:     Size  Location     Type
  5472 ;;		None
  5473 ;; Return value:  Size  Location     Type
  5474 ;;                  4    3[COMRAM] PTR int 
  5475 ;; Registers used:
  5476 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5477 ;; Tracked objects:
  5478 ;;		On entry : 0/0
  5479 ;;		On exit  : 0/0
  5480 ;;		Unchanged: 0/0
  5481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5482 ;;      Params:         5       0       0       0       0       0       0       0       0
  5483 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5484 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5485 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5486 ;;Total ram usage:        7 bytes
  5487 ;; Hardware stack levels used:    1
  5488 ;; Hardware stack levels required when called:    1
  5489 ;; This function calls:
  5490 ;;		Nothing
  5491 ;; This function is called by:
  5492 ;;		_floor
  5493 ;;		_log
  5494 ;; This function uses a non-reentrant model
  5495 ;;
  5496                           
  5497                           	psect	text25
  5498  002334                     __ptext25:
  5499                           	opt stack 0
  5500  002334                     _frexp:
  5501                           	opt stack 25
  5502                           
  5503                           ;incstack = 0
  5504  002334  5004               	movf	frexp@value,w,c
  5505  002336  1005               	iorwf	frexp@value+1,w,c
  5506  002338  1006               	iorwf	frexp@value+2,w,c
  5507  00233A  1007               	iorwf	frexp@value+3,w,c
  5508  00233C  E10B               	bnz	l2634
  5509  00233E  5008               	movf	frexp@eptr,w,c
  5510  002340  6ED9               	movwf	fsr2l,c
  5511  002342  6ADA               	clrf	fsr2h,c
  5512  002344  0E00               	movlw	0
  5513  002346  6ADE               	clrf	postinc2,c
  5514  002348  6ADD               	clrf	postdec2,c
  5515  00234A  6A04               	clrf	?_frexp,c
  5516  00234C  6A05               	clrf	?_frexp+1,c
  5517  00234E  6A06               	clrf	?_frexp+2,c
  5518  002350  6A07               	clrf	?_frexp+3,c
  5519  002352  0012               	return	
  5520  002354                     l2634:
  5521  002354  5007               	movf	frexp@value+3,w,c
  5522  002356  0B7F               	andlw	127
  5523  002358  6E09               	movwf	??_frexp& (0+255),c
  5524  00235A  6A0A               	clrf	(??_frexp+1)& (0+255),c
  5525  00235C  90D8               	bcf	status,0,c
  5526  00235E  3609               	rlcf	??_frexp,f,c
  5527  002360  360A               	rlcf	??_frexp+1,f,c
  5528  002362  5008               	movf	frexp@eptr,w,c
  5529  002364  6ED9               	movwf	fsr2l,c
  5530  002366  6ADA               	clrf	fsr2h,c
  5531  002368  C009  FFDE         	movff	??_frexp,postinc2
  5532  00236C  C00A  FFDD         	movff	??_frexp+1,postdec2
  5533  002370  5008               	movf	frexp@eptr,w,c
  5534  002372  6ED9               	movwf	fsr2l,c
  5535  002374  6ADA               	clrf	fsr2h,c
  5536  002376  0E01               	movlw	1
  5537  002378  AE06               	btfss	frexp@value+2,7,c
  5538  00237A  0E00               	movlw	0
  5539  00237C  12DE               	iorwf	postinc2,f,c
  5540  00237E  0E00               	movlw	0
  5541  002380  12DD               	iorwf	postdec2,f,c
  5542  002382  5008               	movf	frexp@eptr,w,c
  5543  002384  6ED9               	movwf	fsr2l,c
  5544  002386  6ADA               	clrf	fsr2h,c
  5545  002388  0E82               	movlw	130
  5546  00238A  26DE               	addwf	postinc2,f,c
  5547  00238C  0EFF               	movlw	255
  5548  00238E  22DD               	addwfc	postdec2,f,c
  5549  002390  5007               	movf	frexp@value+3,w,c
  5550  002392  0B80               	andlw	-128
  5551  002394  093F               	iorlw	63
  5552  002396  6E07               	movwf	frexp@value+3,c
  5553  002398  9E06               	bcf	frexp@value+2,7,c
  5554  00239A  C004  F004         	movff	frexp@value,?_frexp
  5555  00239E  C005  F005         	movff	frexp@value+1,?_frexp+1
  5556  0023A2  C006  F006         	movff	frexp@value+2,?_frexp+2
  5557  0023A6  C007  F007         	movff	frexp@value+3,?_frexp+3
  5558  0023AA  0012               	return		;funcret
  5559  0023AC                     __end_of_frexp:
  5560                           	opt stack 0
  5561                           tblptru	equ	0xFF8
  5562                           tblptrh	equ	0xFF7
  5563                           tblptrl	equ	0xFF6
  5564                           tablat	equ	0xFF5
  5565                           prodl	equ	0xFF3
  5566                           intcon	equ	0xFF2
  5567                           intcon2	equ	0xFF1
  5568                           postinc0	equ	0xFEE
  5569                           wreg	equ	0xFE8
  5570                           postdec1	equ	0xFE5
  5571                           fsr1l	equ	0xFE1
  5572                           indf2	equ	0xFDF
  5573                           postinc2	equ	0xFDE
  5574                           postdec2	equ	0xFDD
  5575                           fsr2h	equ	0xFDA
  5576                           fsr2l	equ	0xFD9
  5577                           status	equ	0xFD8
  5578                           
  5579 ;; *************** function _eval_poly *****************
  5580 ;; Defined at:
  5581 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/evalpoly.c"
  5582 ;; Parameters:    Size  Location     Type
  5583 ;;  x               4   55[COMRAM] PTR int 
  5584 ;;  d               1   59[COMRAM] PTR const 
  5585 ;;		 -> exp@coeff(40), log@coeff(36), 
  5586 ;;  n               2   60[COMRAM] int 
  5587 ;; Auto vars:     Size  Location     Type
  5588 ;;  res             4   63[COMRAM] int 
  5589 ;; Return value:  Size  Location     Type
  5590 ;;                  4   55[COMRAM] int 
  5591 ;; Registers used:
  5592 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5593 ;; Tracked objects:
  5594 ;;		On entry : 0/0
  5595 ;;		On exit  : 0/0
  5596 ;;		Unchanged: 0/0
  5597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5598 ;;      Params:         7       0       0       0       0       0       0       0       0
  5599 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5600 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5601 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5602 ;;Total ram usage:       12 bytes
  5603 ;; Hardware stack levels used:    1
  5604 ;; Hardware stack levels required when called:    3
  5605 ;; This function calls:
  5606 ;;		___fladd
  5607 ;;		___flmul
  5608 ;; This function is called by:
  5609 ;;		_log
  5610 ;;		_exp
  5611 ;; This function uses a non-reentrant model
  5612 ;;
  5613                           
  5614                           	psect	text26
  5615  002020                     __ptext26:
  5616                           	opt stack 0
  5617  002020                     _eval_poly:
  5618                           	opt stack 0
  5619                           
  5620                           ;incstack = 0
  5621  002020  D84B               	call	PL14	;call to abstracted procedure
  5622  002022  CFF5 F040          	movff	tablat,eval_poly@res
  5623  002026  0009               	tblrd		*+
  5624  002028  CFF5 F041          	movff	tablat,eval_poly@res+1
  5625  00202C  0009               	tblrd		*+
  5626  00202E  CFF5 F042          	movff	tablat,eval_poly@res+2
  5627  002032  000A               	tblrd		*-
  5628  002034  CFF5 F043          	movff	tablat,eval_poly@res+3
  5629  002038  D033               	goto	l3890
  5630  00203A                     l3888:
  5631  00203A  C040  F021         	movff	eval_poly@res,___flmul@f2
  5632  00203E  C041  F022         	movff	eval_poly@res+1,___flmul@f2+1
  5633  002042  C042  F023         	movff	eval_poly@res+2,___flmul@f2+2
  5634  002046  C043  F024         	movff	eval_poly@res+3,___flmul@f2+3
  5635  00204A  C038  F01D         	movff	eval_poly@x,___flmul@f1
  5636  00204E  C039  F01E         	movff	eval_poly@x+1,___flmul@f1+1
  5637  002052  C03A  F01F         	movff	eval_poly@x+2,___flmul@f1+2
  5638  002056  C03B  F020         	movff	eval_poly@x+3,___flmul@f1+3
  5639  00205A  ECF5  F00E         	call	___flmul	;wreg free
  5640  00205E  C01D  F02C         	movff	?___flmul,___fladd@f1
  5641  002062  C01E  F02D         	movff	?___flmul+1,___fladd@f1+1
  5642  002066  C01F  F02E         	movff	?___flmul+2,___fladd@f1+2
  5643  00206A  C020  F02F         	movff	?___flmul+3,___fladd@f1+3
  5644  00206E  063D               	decf	eval_poly@n,f,c
  5645  002070  A0D8               	btfss	status,0,c
  5646  002072  063E               	decf	eval_poly@n+1,f,c
  5647  002074  D821               	call	PL14	;call to abstracted procedure
  5648  002076  CFF5 F030          	movff	tablat,___fladd@f2
  5649  00207A  0009               	tblrd		*+
  5650  00207C  CFF5 F031          	movff	tablat,___fladd@f2+1
  5651  002080  0009               	tblrd		*+
  5652  002082  CFF5 F032          	movff	tablat,___fladd@f2+2
  5653  002086  000A               	tblrd		*-
  5654  002088  CFF5 F033          	movff	tablat,___fladd@f2+3
  5655  00208C  EC59  F00B         	call	___fladd	;wreg free
  5656  002090  C02C  F040         	movff	?___fladd,eval_poly@res
  5657  002094  C02D  F041         	movff	?___fladd+1,eval_poly@res+1
  5658  002098  C02E  F042         	movff	?___fladd+2,eval_poly@res+2
  5659  00209C  C02F  F043         	movff	?___fladd+3,eval_poly@res+3
  5660  0020A0                     l3890:
  5661  0020A0  503D               	movf	eval_poly@n,w,c
  5662  0020A2  103E               	iorwf	eval_poly@n+1,w,c
  5663  0020A4  E1CA               	bnz	l3888
  5664  0020A6  C040  F038         	movff	eval_poly@res,?_eval_poly
  5665  0020AA  C041  F039         	movff	eval_poly@res+1,?_eval_poly+1
  5666  0020AE  C042  F03A         	movff	eval_poly@res+2,?_eval_poly+2
  5667  0020B2  C043  F03B         	movff	eval_poly@res+3,?_eval_poly+3
  5668  0020B6  0012               	return		;funcret
  5669  0020B8                     __end_of_eval_poly:
  5670                           	opt stack 0
  5671  0020B8                     PL14:
  5672                           	opt stack 23
  5673  0020B8  503D               	movf	eval_poly@n,w,c
  5674  0020BA  0D04               	mullw	4
  5675  0020BC  503C               	movf	eval_poly@d,w,c
  5676  0020BE  24F3               	addwf	prodl,w,c
  5677  0020C0  6E3F               	movwf	??_eval_poly& (0+255),c
  5678  0020C2  C03F  FFF6         	movff	??_eval_poly,tblptrl
  5679  0020C6                     	if	0	;There is only one active tblptr byte
  5680  0020C6                     	endif
  5681  0020C6                     	if	0	;tblptru may be non-zero
  5682  0020C6                     	endif
  5683  0020C6                     	if	0	;tblptru may be non-zero
  5684  0020C6                     	endif
  5685  0020C6  0009               	tblrd		*+
  5686  0020C8  0012               	return	
  5687  0020CA                     __end_ofPL14:
  5688                           	opt stack 0
  5689                           tblptru	equ	0xFF8
  5690                           tblptrh	equ	0xFF7
  5691                           tblptrl	equ	0xFF6
  5692                           tablat	equ	0xFF5
  5693                           prodl	equ	0xFF3
  5694                           intcon	equ	0xFF2
  5695                           intcon2	equ	0xFF1
  5696                           postinc0	equ	0xFEE
  5697                           wreg	equ	0xFE8
  5698                           postdec1	equ	0xFE5
  5699                           fsr1l	equ	0xFE1
  5700                           indf2	equ	0xFDF
  5701                           postinc2	equ	0xFDE
  5702                           postdec2	equ	0xFDD
  5703                           fsr2h	equ	0xFDA
  5704                           fsr2l	equ	0xFD9
  5705                           status	equ	0xFD8
  5706                           
  5707 ;; *************** function ___flmul *****************
  5708 ;; Defined at:
  5709 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/flmul.c"
  5710 ;; Parameters:    Size  Location     Type
  5711 ;;  f1              4   28[COMRAM] int 
  5712 ;;  f2              4   32[COMRAM] int 
  5713 ;; Auto vars:     Size  Location     Type
  5714 ;;  f3_as_produc    4   37[COMRAM] unsigned long 
  5715 ;;  sign            1   42[COMRAM] unsigned char 
  5716 ;;  cntr            1   41[COMRAM] unsigned char 
  5717 ;;  exp             1   36[COMRAM] unsigned char 
  5718 ;; Return value:  Size  Location     Type
  5719 ;;                  4   28[COMRAM] unsigned char 
  5720 ;; Registers used:
  5721 ;;		wreg, status,2, status,0, cstack
  5722 ;; Tracked objects:
  5723 ;;		On entry : 0/0
  5724 ;;		On exit  : 0/0
  5725 ;;		Unchanged: 0/0
  5726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5727 ;;      Params:         8       0       0       0       0       0       0       0       0
  5728 ;;      Locals:         7       0       0       0       0       0       0       0       0
  5729 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5730 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5731 ;;Total ram usage:       15 bytes
  5732 ;; Hardware stack levels used:    1
  5733 ;; Hardware stack levels required when called:    2
  5734 ;; This function calls:
  5735 ;;		___flpack
  5736 ;; This function is called by:
  5737 ;;		_format_double
  5738 ;;		_measure_capacitance
  5739 ;;		_measure_inductance
  5740 ;;		_log
  5741 ;;		_log10
  5742 ;;		_pow
  5743 ;;		_eval_poly
  5744 ;;		_exp
  5745 ;; This function uses a non-reentrant model
  5746 ;;
  5747                           
  5748                           	psect	text27
  5749  001DEA                     __ptext27:
  5750                           	opt stack 0
  5751  001DEA                     ___flmul:
  5752                           	opt stack 27
  5753                           
  5754                           ;incstack = 0
  5755  001DEA  341F               	rlcf	___flmul@f1+2,w,c
  5756  001DEC  3420               	rlcf	___flmul@f1+3,w,c
  5757  001DEE  6E25               	movwf	___flmul@exp,c
  5758  001DF0  5025               	movf	___flmul@exp,w,c
  5759  001DF2  E105               	bnz	l3732
  5760  001DF4  6A1D               	clrf	?___flmul,c
  5761  001DF6  6A1E               	clrf	?___flmul+1,c
  5762  001DF8  6A1F               	clrf	?___flmul+2,c
  5763  001DFA  6A20               	clrf	?___flmul+3,c
  5764  001DFC  0012               	return	
  5765  001DFE                     l3732:
  5766  001DFE  3423               	rlcf	___flmul@f2+2,w,c
  5767  001E00  3424               	rlcf	___flmul@f2+3,w,c
  5768  001E02  6E2B               	movwf	___flmul@sign,c
  5769  001E04  502B               	movf	___flmul@sign,w,c
  5770  001E06  E105               	bnz	l3736
  5771  001E08  6A1D               	clrf	?___flmul,c
  5772  001E0A  6A1E               	clrf	?___flmul+1,c
  5773  001E0C  6A1F               	clrf	?___flmul+2,c
  5774  001E0E  6A20               	clrf	?___flmul+3,c
  5775  001E10  0012               	return	
  5776  001E12                     l3736:
  5777  001E12  502B               	movf	___flmul@sign,w,c
  5778  001E14  0F7B               	addlw	123
  5779  001E16  2625               	addwf	___flmul@exp,f,c
  5780  001E18  C020  F02B         	movff	___flmul@f1+3,___flmul@sign
  5781  001E1C  5024               	movf	___flmul@f2+3,w,c
  5782  001E1E  1A2B               	xorwf	___flmul@sign,f,c
  5783  001E20  0E80               	movlw	128
  5784  001E22  162B               	andwf	___flmul@sign,f,c
  5785  001E24  8E1F               	bsf	___flmul@f1+2,7,c
  5786  001E26  8E23               	bsf	___flmul@f2+2,7,c
  5787  001E28  0E00               	movlw	0
  5788  001E2A  1624               	andwf	___flmul@f2+3,f,c
  5789  001E2C  6A26               	clrf	___flmul@f3_as_product,c
  5790  001E2E  6A27               	clrf	___flmul@f3_as_product+1,c
  5791  001E30  6A28               	clrf	___flmul@f3_as_product+2,c
  5792  001E32  6A29               	clrf	___flmul@f3_as_product+3,c
  5793  001E34  0E07               	movlw	7
  5794  001E36  6E2A               	movwf	___flmul@cntr,c
  5795  001E38                     l3748:
  5796  001E38  B01D               	btfsc	___flmul@f1,0,c
  5797  001E3A  D829               	call	PL16	;call to abstracted procedure
  5798  001E3C  D831               	call	PL36	;call to abstracted procedure
  5799  001E3E  3621               	rlcf	___flmul@f2,f,c
  5800  001E40  3622               	rlcf	___flmul@f2+1,f,c
  5801  001E42  3623               	rlcf	___flmul@f2+2,f,c
  5802  001E44  3624               	rlcf	___flmul@f2+3,f,c
  5803  001E46  2E2A               	decfsz	___flmul@cntr,f,c
  5804  001E48  D7F7               	goto	l3748
  5805  001E4A  0E11               	movlw	17
  5806  001E4C  6E2A               	movwf	___flmul@cntr,c
  5807  001E4E                     l3760:
  5808  001E4E  B01D               	btfsc	___flmul@f1,0,c
  5809  001E50  D81E               	call	PL16	;call to abstracted procedure
  5810  001E52  D826               	call	PL36	;call to abstracted procedure
  5811  001E54  3229               	rrcf	___flmul@f3_as_product+3,f,c
  5812  001E56  3228               	rrcf	___flmul@f3_as_product+2,f,c
  5813  001E58  3227               	rrcf	___flmul@f3_as_product+1,f,c
  5814  001E5A  3226               	rrcf	___flmul@f3_as_product,f,c
  5815  001E5C  2E2A               	decfsz	___flmul@cntr,f,c
  5816  001E5E  D7F7               	goto	l3760
  5817  001E60  C026  F004         	movff	___flmul@f3_as_product,___flpack@arg
  5818  001E64  C027  F005         	movff	___flmul@f3_as_product+1,___flpack@arg+1
  5819  001E68  C028  F006         	movff	___flmul@f3_as_product+2,___flpack@arg+2
  5820  001E6C  C029  F007         	movff	___flmul@f3_as_product+3,___flpack@arg+3
  5821  001E70  C025  F008         	movff	___flmul@exp,___flpack@exp
  5822  001E74  C02B  F009         	movff	___flmul@sign,___flpack@sign
  5823  001E78  EC57  F00F         	call	___flpack	;wreg free
  5824  001E7C  C004  F01D         	movff	?___flpack,?___flmul
  5825  001E80  C005  F01E         	movff	?___flpack+1,?___flmul+1
  5826  001E84  C006  F01F         	movff	?___flpack+2,?___flmul+2
  5827  001E88  C007  F020         	movff	?___flpack+3,?___flmul+3
  5828  001E8C  0012               	return		;funcret
  5829  001E8E                     __end_of___flmul:
  5830                           	opt stack 0
  5831  001E8E                     PL16:
  5832                           	opt stack 27
  5833  001E8E  5021               	movf	___flmul@f2,w,c
  5834  001E90  2626               	addwf	___flmul@f3_as_product,f,c
  5835  001E92  5022               	movf	___flmul@f2+1,w,c
  5836  001E94  2227               	addwfc	___flmul@f3_as_product+1,f,c
  5837  001E96  5023               	movf	___flmul@f2+2,w,c
  5838  001E98  2228               	addwfc	___flmul@f3_as_product+2,f,c
  5839  001E9A  5024               	movf	___flmul@f2+3,w,c
  5840  001E9C  2229               	addwfc	___flmul@f3_as_product+3,f,c
  5841  001E9E  0012               	return	
  5842  001EA0                     __end_ofPL16:
  5843                           	opt stack 0
  5844  001EA0                     PL36:
  5845                           	opt stack 27
  5846  001EA0  90D8               	bcf	status,0,c
  5847  001EA2  3220               	rrcf	___flmul@f1+3,f,c
  5848  001EA4  321F               	rrcf	___flmul@f1+2,f,c
  5849  001EA6  321E               	rrcf	___flmul@f1+1,f,c
  5850  001EA8  321D               	rrcf	___flmul@f1,f,c
  5851  001EAA  90D8               	bcf	status,0,c
  5852  001EAC  0012               	return	
  5853  001EAE                     __end_ofPL36:
  5854                           	opt stack 0
  5855                           tblptru	equ	0xFF8
  5856                           tblptrh	equ	0xFF7
  5857                           tblptrl	equ	0xFF6
  5858                           tablat	equ	0xFF5
  5859                           prodl	equ	0xFF3
  5860                           intcon	equ	0xFF2
  5861                           intcon2	equ	0xFF1
  5862                           postinc0	equ	0xFEE
  5863                           wreg	equ	0xFE8
  5864                           postdec1	equ	0xFE5
  5865                           fsr1l	equ	0xFE1
  5866                           indf2	equ	0xFDF
  5867                           postinc2	equ	0xFDE
  5868                           postdec2	equ	0xFDD
  5869                           fsr2h	equ	0xFDA
  5870                           fsr2l	equ	0xFD9
  5871                           status	equ	0xFD8
  5872                           
  5873 ;; *************** function ___fladd *****************
  5874 ;; Defined at:
  5875 ;;		line 88 in file "/opt/microchip/xc8/v1.34/sources/common/fladd.c"
  5876 ;; Parameters:    Size  Location     Type
  5877 ;;  f1              4   43[COMRAM] unsigned char 
  5878 ;;  f2              4   47[COMRAM] unsigned char 
  5879 ;; Auto vars:     Size  Location     Type
  5880 ;;  exp1            1   54[COMRAM] unsigned char 
  5881 ;;  exp2            1   53[COMRAM] unsigned char 
  5882 ;;  sign            1   52[COMRAM] unsigned char 
  5883 ;; Return value:  Size  Location     Type
  5884 ;;                  4   43[COMRAM] unsigned char 
  5885 ;; Registers used:
  5886 ;;		wreg, status,2, status,0, cstack
  5887 ;; Tracked objects:
  5888 ;;		On entry : 0/0
  5889 ;;		On exit  : 0/0
  5890 ;;		Unchanged: 0/0
  5891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5892 ;;      Params:         8       0       0       0       0       0       0       0       0
  5893 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5894 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5895 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5896 ;;Total ram usage:       12 bytes
  5897 ;; Hardware stack levels used:    1
  5898 ;; Hardware stack levels required when called:    2
  5899 ;; This function calls:
  5900 ;;		___flpack
  5901 ;; This function is called by:
  5902 ;;		_floor
  5903 ;;		___flsub
  5904 ;;		_log
  5905 ;;		_eval_poly
  5906 ;; This function uses a non-reentrant model
  5907 ;;
  5908                           
  5909                           	psect	text28
  5910  0016B2                     __ptext28:
  5911                           	opt stack 0
  5912  0016B2                     ___fladd:
  5913                           	opt stack 26
  5914                           
  5915                           ;incstack = 0
  5916  0016B2  342E               	rlcf	___fladd@f1+2,w,c
  5917  0016B4  342F               	rlcf	___fladd@f1+3,w,c
  5918  0016B6  6E37               	movwf	___fladd@exp1,c
  5919  0016B8  3432               	rlcf	___fladd@f2+2,w,c
  5920  0016BA  3433               	rlcf	___fladd@f2+3,w,c
  5921  0016BC  6E36               	movwf	___fladd@exp2,c
  5922  0016BE  5037               	movf	___fladd@exp1,w,c
  5923  0016C0  E009               	bz	l818
  5924  0016C2  5036               	movf	___fladd@exp2,w,c
  5925  0016C4  5C37               	subwf	___fladd@exp1,w,c
  5926  0016C6  E20F               	bc	l3668
  5927  0016C8  5037               	movf	___fladd@exp1,w,c
  5928  0016CA  5C36               	subwf	___fladd@exp2,w,c
  5929  0016CC  6E34               	movwf	??___fladd& (0+255),c
  5930  0016CE  0E20               	movlw	32
  5931  0016D0  6434               	cpfsgt	??___fladd,c
  5932  0016D2  D009               	goto	l3668
  5933  0016D4                     l818:
  5934  0016D4  C030  F02C         	movff	___fladd@f2,?___fladd
  5935  0016D8  C031  F02D         	movff	___fladd@f2+1,?___fladd+1
  5936  0016DC  C032  F02E         	movff	___fladd@f2+2,?___fladd+2
  5937  0016E0  C033  F02F         	movff	___fladd@f2+3,?___fladd+3
  5938  0016E4  0012               	return	
  5939  0016E6                     l3668:
  5940  0016E6  5036               	movf	___fladd@exp2,w,c
  5941  0016E8  E009               	bz	l822
  5942  0016EA  5037               	movf	___fladd@exp1,w,c
  5943  0016EC  5C36               	subwf	___fladd@exp2,w,c
  5944  0016EE  E20F               	bc	l3674
  5945  0016F0  5036               	movf	___fladd@exp2,w,c
  5946  0016F2  5C37               	subwf	___fladd@exp1,w,c
  5947  0016F4  6E34               	movwf	??___fladd& (0+255),c
  5948  0016F6  0E20               	movlw	32
  5949  0016F8  6434               	cpfsgt	??___fladd,c
  5950  0016FA  D009               	goto	l3674
  5951  0016FC                     l822:
  5952  0016FC  C02C  F02C         	movff	___fladd@f1,?___fladd
  5953  001700  C02D  F02D         	movff	___fladd@f1+1,?___fladd+1
  5954  001704  C02E  F02E         	movff	___fladd@f1+2,?___fladd+2
  5955  001708  C02F  F02F         	movff	___fladd@f1+3,?___fladd+3
  5956  00170C  0012               	return	
  5957  00170E                     l3674:
  5958  00170E  0E06               	movlw	6
  5959  001710  6E35               	movwf	___fladd@sign,c
  5960  001712  BE2F               	btfsc	___fladd@f1+3,7,c
  5961  001714  8E35               	bsf	___fladd@sign,7,c
  5962  001716  BE33               	btfsc	___fladd@f2+3,7,c
  5963  001718  8C35               	bsf	___fladd@sign,6,c
  5964  00171A  8E2E               	bsf	___fladd@f1+2,7,c
  5965  00171C  6A2F               	clrf	___fladd@f1+3,c
  5966  00171E  8E32               	bsf	___fladd@f2+2,7,c
  5967  001720  6A33               	clrf	___fladd@f2+3,c
  5968  001722  5036               	movf	___fladd@exp2,w,c
  5969  001724  5C37               	subwf	___fladd@exp1,w,c
  5970  001726  E21A               	bc	l3698
  5971  001728                     l3688:
  5972  001728  90D8               	bcf	status,0,c
  5973  00172A  3630               	rlcf	___fladd@f2,f,c
  5974  00172C  3631               	rlcf	___fladd@f2+1,f,c
  5975  00172E  3632               	rlcf	___fladd@f2+2,f,c
  5976  001730  3633               	rlcf	___fladd@f2+3,f,c
  5977  001732  0636               	decf	___fladd@exp2,f,c
  5978  001734  5037               	movf	___fladd@exp1,w,c
  5979  001736  1836               	xorwf	___fladd@exp2,w,c
  5980  001738  E00D               	bz	l3696
  5981  00173A  0635               	decf	___fladd@sign,f,c
  5982  00173C  C035  F034         	movff	___fladd@sign,??___fladd
  5983  001740  0E07               	movlw	7
  5984  001742  1634               	andwf	??___fladd,f,c
  5985  001744  E007               	bz	l3696
  5986  001746  D7F0               	goto	l3688
  5987  001748                     l3694:
  5988  001748  90D8               	bcf	status,0,c
  5989  00174A  322F               	rrcf	___fladd@f1+3,f,c
  5990  00174C  322E               	rrcf	___fladd@f1+2,f,c
  5991  00174E  322D               	rrcf	___fladd@f1+1,f,c
  5992  001750  322C               	rrcf	___fladd@f1,f,c
  5993  001752  2A37               	incf	___fladd@exp1,f,c
  5994  001754                     l3696:
  5995  001754  5036               	movf	___fladd@exp2,w,c
  5996  001756  1837               	xorwf	___fladd@exp1,w,c
  5997  001758  E01D               	bz	l833
  5998  00175A  D7F6               	goto	l3694
  5999  00175C                     l3698:
  6000  00175C  5037               	movf	___fladd@exp1,w,c
  6001  00175E  5C36               	subwf	___fladd@exp2,w,c
  6002  001760  E219               	bc	l833
  6003  001762                     l3700:
  6004  001762  90D8               	bcf	status,0,c
  6005  001764  362C               	rlcf	___fladd@f1,f,c
  6006  001766  362D               	rlcf	___fladd@f1+1,f,c
  6007  001768  362E               	rlcf	___fladd@f1+2,f,c
  6008  00176A  362F               	rlcf	___fladd@f1+3,f,c
  6009  00176C  0637               	decf	___fladd@exp1,f,c
  6010  00176E  5037               	movf	___fladd@exp1,w,c
  6011  001770  1836               	xorwf	___fladd@exp2,w,c
  6012  001772  E00D               	bz	l3708
  6013  001774  0635               	decf	___fladd@sign,f,c
  6014  001776  C035  F034         	movff	___fladd@sign,??___fladd
  6015  00177A  0E07               	movlw	7
  6016  00177C  1634               	andwf	??___fladd,f,c
  6017  00177E  E007               	bz	l3708
  6018  001780  D7F0               	goto	l3700
  6019  001782                     l3706:
  6020  001782  90D8               	bcf	status,0,c
  6021  001784  3233               	rrcf	___fladd@f2+3,f,c
  6022  001786  3232               	rrcf	___fladd@f2+2,f,c
  6023  001788  3231               	rrcf	___fladd@f2+1,f,c
  6024  00178A  3230               	rrcf	___fladd@f2,f,c
  6025  00178C  2A36               	incf	___fladd@exp2,f,c
  6026  00178E                     l3708:
  6027  00178E  5036               	movf	___fladd@exp2,w,c
  6028  001790  1837               	xorwf	___fladd@exp1,w,c
  6029  001792  E1F7               	bnz	l3706
  6030  001794                     l833:
  6031  001794  AE35               	btfss	___fladd@sign,7,c
  6032  001796  D009               	goto	l3712
  6033  001798  1E2C               	comf	___fladd@f1,f,c
  6034  00179A  1E2D               	comf	___fladd@f1+1,f,c
  6035  00179C  1E2E               	comf	___fladd@f1+2,f,c
  6036  00179E  1E2F               	comf	___fladd@f1+3,f,c
  6037  0017A0  2A2C               	incf	___fladd@f1,f,c
  6038  0017A2  0E00               	movlw	0
  6039  0017A4  222D               	addwfc	___fladd@f1+1,f,c
  6040  0017A6  222E               	addwfc	___fladd@f1+2,f,c
  6041  0017A8  222F               	addwfc	___fladd@f1+3,f,c
  6042  0017AA                     l3712:
  6043  0017AA  BC35               	btfsc	___fladd@sign,6,c
  6044  0017AC  D825               	call	PL12	;call to abstracted procedure
  6045  0017AE  6A35               	clrf	___fladd@sign,c
  6046  0017B0  502C               	movf	___fladd@f1,w,c
  6047  0017B2  2630               	addwf	___fladd@f2,f,c
  6048  0017B4  502D               	movf	___fladd@f1+1,w,c
  6049  0017B6  2231               	addwfc	___fladd@f2+1,f,c
  6050  0017B8  502E               	movf	___fladd@f1+2,w,c
  6051  0017BA  2232               	addwfc	___fladd@f2+2,f,c
  6052  0017BC  502F               	movf	___fladd@f1+3,w,c
  6053  0017BE  2233               	addwfc	___fladd@f2+3,f,c
  6054  0017C0  AE33               	btfss	___fladd@f2+3,7,c
  6055  0017C2  D003               	goto	l3724
  6056  0017C4  D819               	call	PL12	;call to abstracted procedure
  6057  0017C6  0E01               	movlw	1
  6058  0017C8  6E35               	movwf	___fladd@sign,c
  6059  0017CA                     l3724:
  6060  0017CA  C030  F004         	movff	___fladd@f2,___flpack@arg
  6061  0017CE  C031  F005         	movff	___fladd@f2+1,___flpack@arg+1
  6062  0017D2  C032  F006         	movff	___fladd@f2+2,___flpack@arg+2
  6063  0017D6  C033  F007         	movff	___fladd@f2+3,___flpack@arg+3
  6064  0017DA  C037  F008         	movff	___fladd@exp1,___flpack@exp
  6065  0017DE  C035  F009         	movff	___fladd@sign,___flpack@sign
  6066  0017E2  EC57  F00F         	call	___flpack	;wreg free
  6067  0017E6  C004  F02C         	movff	?___flpack,?___fladd
  6068  0017EA  C005  F02D         	movff	?___flpack+1,?___fladd+1
  6069  0017EE  C006  F02E         	movff	?___flpack+2,?___fladd+2
  6070  0017F2  C007  F02F         	movff	?___flpack+3,?___fladd+3
  6071  0017F6  0012               	return		;funcret
  6072  0017F8                     __end_of___fladd:
  6073                           	opt stack 0
  6074  0017F8                     PL12:
  6075                           	opt stack 26
  6076  0017F8  1E30               	comf	___fladd@f2,f,c
  6077  0017FA  1E31               	comf	___fladd@f2+1,f,c
  6078  0017FC  1E32               	comf	___fladd@f2+2,f,c
  6079  0017FE  1E33               	comf	___fladd@f2+3,f,c
  6080  001800  2A30               	incf	___fladd@f2,f,c
  6081  001802  0E00               	movlw	0
  6082  001804  2231               	addwfc	___fladd@f2+1,f,c
  6083  001806  2232               	addwfc	___fladd@f2+2,f,c
  6084  001808  2233               	addwfc	___fladd@f2+3,f,c
  6085  00180A  0C00               	retlw	0
  6086  00180C                     __end_ofPL12:
  6087                           	opt stack 0
  6088                           tblptru	equ	0xFF8
  6089                           tblptrh	equ	0xFF7
  6090                           tblptrl	equ	0xFF6
  6091                           tablat	equ	0xFF5
  6092                           prodl	equ	0xFF3
  6093                           intcon	equ	0xFF2
  6094                           intcon2	equ	0xFF1
  6095                           postinc0	equ	0xFEE
  6096                           wreg	equ	0xFE8
  6097                           postdec1	equ	0xFE5
  6098                           fsr1l	equ	0xFE1
  6099                           indf2	equ	0xFDF
  6100                           postinc2	equ	0xFDE
  6101                           postdec2	equ	0xFDD
  6102                           fsr2h	equ	0xFDA
  6103                           fsr2l	equ	0xFD9
  6104                           status	equ	0xFD8
  6105                           
  6106 ;; *************** function ___awtofl *****************
  6107 ;; Defined at:
  6108 ;;		line 31 in file "/opt/microchip/xc8/v1.34/sources/common/awtofl.c"
  6109 ;; Parameters:    Size  Location     Type
  6110 ;;  c               2   13[COMRAM] int 
  6111 ;; Auto vars:     Size  Location     Type
  6112 ;;  f1              4    0        int 
  6113 ;;  sign            1   17[COMRAM] unsigned char 
  6114 ;; Return value:  Size  Location     Type
  6115 ;;                  4   13[COMRAM] unsigned char 
  6116 ;; Registers used:
  6117 ;;		wreg, status,2, status,0, cstack
  6118 ;; Tracked objects:
  6119 ;;		On entry : 0/0
  6120 ;;		On exit  : 0/0
  6121 ;;		Unchanged: 0/0
  6122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6123 ;;      Params:         4       0       0       0       0       0       0       0       0
  6124 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6125 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6126 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6127 ;;Total ram usage:        5 bytes
  6128 ;; Hardware stack levels used:    1
  6129 ;; Hardware stack levels required when called:    2
  6130 ;; This function calls:
  6131 ;;		___flpack
  6132 ;; This function is called by:
  6133 ;;		_format_double
  6134 ;;		_log
  6135 ;;		_exp
  6136 ;; This function uses a non-reentrant model
  6137 ;;
  6138                           
  6139                           	psect	text29
  6140  0026B4                     __ptext29:
  6141                           	opt stack 0
  6142  0026B4                     ___awtofl:
  6143                           	opt stack 24
  6144                           
  6145                           ;incstack = 0
  6146  0026B4  6A12               	clrf	___awtofl@sign,c
  6147  0026B6  AE0F               	btfss	___awtofl@c+1,7,c
  6148  0026B8  D005               	goto	l3882
  6149  0026BA  6C0E               	negf	___awtofl@c,c
  6150  0026BC  1E0F               	comf	___awtofl@c+1,f,c
  6151  0026BE  B0D8               	btfsc	status,0,c
  6152  0026C0  2A0F               	incf	___awtofl@c+1,f,c
  6153  0026C2  2A12               	incf	___awtofl@sign,f,c
  6154  0026C4                     l3882:
  6155  0026C4  C00E  F004         	movff	___awtofl@c,___flpack@arg
  6156  0026C8  C00F  F005         	movff	___awtofl@c+1,___flpack@arg+1
  6157  0026CC  6A06               	clrf	___flpack@arg+2,c
  6158  0026CE  6A07               	clrf	___flpack@arg+3,c
  6159  0026D0  0E96               	movlw	150
  6160  0026D2  6E08               	movwf	___flpack@exp,c
  6161  0026D4  C012  F009         	movff	___awtofl@sign,___flpack@sign
  6162  0026D8  EC57  F00F         	call	___flpack	;wreg free
  6163  0026DC  C004  F00E         	movff	?___flpack,?___awtofl
  6164  0026E0  C005  F00F         	movff	?___flpack+1,?___awtofl+1
  6165  0026E4  C006  F010         	movff	?___flpack+2,?___awtofl+2
  6166  0026E8  C007  F011         	movff	?___flpack+3,?___awtofl+3
  6167  0026EC  0012               	return		;funcret
  6168  0026EE                     __end_of___awtofl:
  6169                           	opt stack 0
  6170                           tblptru	equ	0xFF8
  6171                           tblptrh	equ	0xFF7
  6172                           tblptrl	equ	0xFF6
  6173                           tablat	equ	0xFF5
  6174                           prodl	equ	0xFF3
  6175                           intcon	equ	0xFF2
  6176                           intcon2	equ	0xFF1
  6177                           postinc0	equ	0xFEE
  6178                           wreg	equ	0xFE8
  6179                           postdec1	equ	0xFE5
  6180                           fsr1l	equ	0xFE1
  6181                           indf2	equ	0xFDF
  6182                           postinc2	equ	0xFDE
  6183                           postdec2	equ	0xFDD
  6184                           fsr2h	equ	0xFDA
  6185                           fsr2l	equ	0xFD9
  6186                           status	equ	0xFD8
  6187                           
  6188 ;; *************** function _lcd_init *****************
  6189 ;; Defined at:
  6190 ;;		line 484 in file "../../../lib/lcd44780.c"
  6191 ;; Parameters:    Size  Location     Type
  6192 ;;  fourbitmode     1    wreg     unsigned char 
  6193 ;; Auto vars:     Size  Location     Type
  6194 ;;  fourbitmode     1    3[COMRAM] unsigned char 
  6195 ;; Return value:  Size  Location     Type
  6196 ;;		None               void
  6197 ;; Registers used:
  6198 ;;		wreg, status,2, status,0
  6199 ;; Tracked objects:
  6200 ;;		On entry : 0/0
  6201 ;;		On exit  : F/0
  6202 ;;		Unchanged: 0/0
  6203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6204 ;;      Params:         0       0       0       0       0       0       0       0       0
  6205 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6206 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6207 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6208 ;;Total ram usage:        3 bytes
  6209 ;; Hardware stack levels used:    1
  6210 ;; Hardware stack levels required when called:    1
  6211 ;; This function calls:
  6212 ;;		Nothing
  6213 ;; This function is called by:
  6214 ;;		_main
  6215 ;; This function uses a non-reentrant model
  6216 ;;
  6217                           
  6218                           	psect	text30
  6219  0027B4                     __ptext30:
  6220                           	opt stack 0
  6221  0027B4                     _lcd_init:
  6222                           	opt stack 29
  6223                           
  6224                           ;incstack = 0
  6225                           ;lcd_init@fourbitmode stored from wreg
  6226  0027B4  6E04               	movwf	lcd_init@fourbitmode,c
  6227                           
  6228                           ;lcd44780.c: 486: LCD_ctrl = 0;
  6229  0027B6  0100               	movlb	0	; () banked
  6230  0027B8  6BD0               	clrf	_LCD_ctrl& (0+255),b
  6231                           
  6232                           ; BSR set to: 0
  6233                           ;lcd44780.c: 487: LCD_function = (fourbitmode ? 0x00 : 0x10);
  6234  0027BA  5004               	movf	lcd_init@fourbitmode,w,c
  6235  0027BC  E104               	bnz	l158
  6236                           
  6237                           ; BSR set to: 0
  6238  0027BE  6A06               	clrf	_lcd_init$134+1,c
  6239  0027C0  0E10               	movlw	16
  6240  0027C2  6E05               	movwf	_lcd_init$134,c
  6241  0027C4  D002               	goto	l160
  6242  0027C6                     l158:
  6243                           
  6244                           ; BSR set to: 0
  6245  0027C6  6A05               	clrf	_lcd_init$134,c
  6246  0027C8  6A06               	clrf	_lcd_init$134+1,c
  6247  0027CA                     l160:
  6248                           
  6249                           ; BSR set to: 0
  6250  0027CA  C005  F05A         	movff	_lcd_init$134,_LCD_function
  6251                           
  6252                           ;lcd44780.c: 489: LCD_lines = 0;
  6253  0027CE  6BD1               	clrf	_LCD_lines& (0+255),b
  6254                           
  6255                           ;lcd44780.c: 491: LCD_mode = 0;
  6256  0027D0  6BD2               	clrf	_LCD_mode& (0+255),b
  6257                           
  6258                           ; BSR set to: 0
  6259                           ;lcd44780.c: 493: TRISB &= ~0b0100;
  6260  0027D2  9493               	bcf	3987,2,c	;volatile
  6261                           
  6262                           ;lcd44780.c: 494: LATB &= ~0b0100;
  6263  0027D4  948A               	bcf	3978,2,c	;volatile
  6264                           
  6265                           ;lcd44780.c: 499: TRISB &= ~0b1000;
  6266  0027D6  9693               	bcf	3987,3,c	;volatile
  6267                           
  6268                           ;lcd44780.c: 500: LATB &= ~0b1000;
  6269  0027D8  968A               	bcf	3978,3,c	;volatile
  6270                           
  6271                           ; BSR set to: 0
  6272                           ;lcd44780.c: 502: LATB &= ~0b11110000;
  6273  0027DA  0E0F               	movlw	15
  6274  0027DC  168A               	andwf	3978,f,c	;volatile
  6275                           
  6276                           ; BSR set to: 0
  6277  0027DE  0C0F               	retlw	15	;funcret
  6278  0027E0                     __end_of_lcd_init:
  6279                           	opt stack 0
  6280                           tblptru	equ	0xFF8
  6281                           tblptrh	equ	0xFF7
  6282                           tblptrl	equ	0xFF6
  6283                           tablat	equ	0xFF5
  6284                           prodl	equ	0xFF3
  6285                           intcon	equ	0xFF2
  6286                           intcon2	equ	0xFF1
  6287                           postinc0	equ	0xFEE
  6288                           wreg	equ	0xFE8
  6289                           postdec1	equ	0xFE5
  6290                           fsr1l	equ	0xFE1
  6291                           indf2	equ	0xFDF
  6292                           postinc2	equ	0xFDE
  6293                           postdec2	equ	0xFDD
  6294                           fsr2h	equ	0xFDA
  6295                           fsr2l	equ	0xFD9
  6296                           status	equ	0xFD8
  6297                           
  6298 ;; *************** function _lcd_begin *****************
  6299 ;; Defined at:
  6300 ;;		line 411 in file "../../../lib/lcd44780.c"
  6301 ;; Parameters:    Size  Location     Type
  6302 ;;  lines           1    wreg     unsigned char 
  6303 ;;  dotsize         1    7[COMRAM] unsigned char 
  6304 ;; Auto vars:     Size  Location     Type
  6305 ;;  lines           1    9[COMRAM] unsigned char 
  6306 ;; Return value:  Size  Location     Type
  6307 ;;		None               void
  6308 ;; Registers used:
  6309 ;;		wreg, status,2, status,0, cstack
  6310 ;; Tracked objects:
  6311 ;;		On entry : F/0
  6312 ;;		On exit  : 0/0
  6313 ;;		Unchanged: 0/0
  6314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6315 ;;      Params:         1       0       0       0       0       0       0       0       0
  6316 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6317 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6318 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6319 ;;Total ram usage:        3 bytes
  6320 ;; Hardware stack levels used:    1
  6321 ;; Hardware stack levels required when called:    4
  6322 ;; This function calls:
  6323 ;;		_lcd_command
  6324 ;;		_lcd_write4bits
  6325 ;; This function is called by:
  6326 ;;		_main
  6327 ;; This function uses a non-reentrant model
  6328 ;;
  6329                           
  6330                           	psect	text31
  6331  001D16                     __ptext31:
  6332                           	opt stack 0
  6333  001D16                     _lcd_begin:
  6334                           	opt stack 26
  6335                           
  6336                           ; BSR set to: 0
  6337                           ;incstack = 0
  6338                           ;lcd_begin@lines stored from wreg
  6339  001D16  6E0A               	movwf	lcd_begin@lines,c
  6340                           
  6341                           ; BSR set to: 0
  6342                           ;lcd44780.c: 412: if(lines > 1)
  6343  001D18  0E01               	movlw	1
  6344  001D1A  640A               	cpfsgt	lcd_begin@lines,c
  6345  001D1C  D001               	goto	l3192
  6346                           
  6347                           ; BSR set to: 0
  6348                           ;lcd44780.c: 413: LCD_function |= 0x08;
  6349  001D1E  865A               	bsf	_LCD_function,3,c
  6350  001D20                     l3192:
  6351                           
  6352                           ; BSR set to: 0
  6353                           ;lcd44780.c: 416: LCD_lines = lines;
  6354  001D20  C00A  F0D1         	movff	lcd_begin@lines,_LCD_lines
  6355                           
  6356                           ; BSR set to: 0
  6357                           ;lcd44780.c: 420: if((dotsize != 0) && (lines == 1))
  6358  001D24  5008               	movf	lcd_begin@dotsize,w,c
  6359  001D26  E003               	bz	l3200
  6360                           
  6361                           ; BSR set to: 0
  6362  001D28  040A               	decf	lcd_begin@lines,w,c
  6363  001D2A  B4D8               	btfsc	status,2,c
  6364                           
  6365                           ; BSR set to: 0
  6366                           ;lcd44780.c: 421: LCD_function |= 0x04;
  6367  001D2C  845A               	bsf	_LCD_function,2,c
  6368  001D2E                     l3200:
  6369                           
  6370                           ; BSR set to: 0
  6371                           ;lcd44780.c: 423: _delay((unsigned long)((15)*(20000000/4000.0)));
  6372  001D2E  0E62               	movlw	98
  6373  001D30  6E09               	movwf	??_lcd_begin& (0+255),c
  6374  001D32  0E66               	movlw	102
  6375  001D34                     u3557:
  6376  001D34  2EE8               	decfsz	wreg,f,c
  6377  001D36  D7FE               	goto	u3557
  6378  001D38  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6379  001D3A  D7FC               	goto	u3557
  6380                           
  6381                           ;lcd44780.c: 426: LATB &= ~0b0100;
  6382  001D3C  948A               	bcf	3978,2,c	;volatile
  6383                           
  6384                           ;lcd44780.c: 427: LATB &= ~0b1000;
  6385  001D3E  968A               	bcf	3978,3,c	;volatile
  6386                           
  6387                           ;lcd44780.c: 430: if(!(LCD_function & 0x10)) {
  6388  001D40  B85A               	btfsc	_LCD_function,4,c
  6389  001D42  D01B               	goto	l3218
  6390                           
  6391                           ;lcd44780.c: 434: lcd_write4bits(0x03);
  6392  001D44  0E03               	movlw	3
  6393  001D46  EC7E  F014         	call	_lcd_write4bits
  6394                           
  6395                           ;lcd44780.c: 435: _delay((unsigned long)((5)*(20000000/4000.0)));
  6396  001D4A  0E21               	movlw	33
  6397  001D4C  6E09               	movwf	??_lcd_begin& (0+255),c
  6398  001D4E  0E76               	movlw	118
  6399  001D50                     u3567:
  6400  001D50  2EE8               	decfsz	wreg,f,c
  6401  001D52  D7FE               	goto	u3567
  6402  001D54  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6403  001D56  D7FC               	goto	u3567
  6404  001D58  D000               	nop2	
  6405                           
  6406                           ;lcd44780.c: 437: lcd_write4bits(0x03);
  6407  001D5A  0E03               	movlw	3
  6408  001D5C  EC7E  F014         	call	_lcd_write4bits
  6409                           
  6410                           ;lcd44780.c: 438: _delay((unsigned long)((150)*(20000000/4000000.0)));
  6411  001D60  0EFA               	movlw	250
  6412  001D62                     u3577:
  6413  001D62  2EE8               	decfsz	wreg,f,c
  6414  001D64  D7FE               	goto	u3577
  6415                           
  6416                           ;lcd44780.c: 440: lcd_write4bits(0x03);
  6417  001D66  0E03               	movlw	3
  6418  001D68  EC7E  F014         	call	_lcd_write4bits
  6419                           
  6420                           ;lcd44780.c: 441: _delay((unsigned long)((150)*(20000000/4000000.0)));
  6421  001D6C  0EFA               	movlw	250
  6422  001D6E                     u3587:
  6423  001D6E  2EE8               	decfsz	wreg,f,c
  6424  001D70  D7FE               	goto	u3587
  6425                           
  6426                           ;lcd44780.c: 443: lcd_write4bits(0x02);
  6427  001D72  0E02               	movlw	2
  6428  001D74  EC7E  F014         	call	_lcd_write4bits
  6429                           
  6430                           ;lcd44780.c: 444: }
  6431  001D78  D01C               	goto	l3226
  6432  001D7A                     l3218:
  6433                           
  6434                           ;lcd44780.c: 446: else {
  6435                           ;lcd44780.c: 450: lcd_command(0x20 | LCD_function);
  6436  001D7A  505A               	movf	_LCD_function,w,c
  6437  001D7C  0920               	iorlw	32
  6438  001D7E  ECF2  F014         	call	_lcd_command
  6439                           
  6440                           ;lcd44780.c: 451: _delay((unsigned long)((5)*(20000000/4000.0)));
  6441  001D82  0E21               	movlw	33
  6442  001D84  6E09               	movwf	??_lcd_begin& (0+255),c
  6443  001D86  0E76               	movlw	118
  6444  001D88                     u3597:
  6445  001D88  2EE8               	decfsz	wreg,f,c
  6446  001D8A  D7FE               	goto	u3597
  6447  001D8C  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6448  001D8E  D7FC               	goto	u3597
  6449  001D90  D000               	nop2	
  6450                           
  6451                           ;lcd44780.c: 454: lcd_command(0x20 | LCD_function);
  6452  001D92  505A               	movf	_LCD_function,w,c
  6453  001D94  0920               	iorlw	32
  6454  001D96  ECF2  F014         	call	_lcd_command
  6455                           
  6456                           ;lcd44780.c: 455: _delay((unsigned long)((5)*(20000000/4000.0)));
  6457  001D9A  0E21               	movlw	33
  6458  001D9C  6E09               	movwf	??_lcd_begin& (0+255),c
  6459  001D9E  0E76               	movlw	118
  6460  001DA0                     u3607:
  6461  001DA0  2EE8               	decfsz	wreg,f,c
  6462  001DA2  D7FE               	goto	u3607
  6463  001DA4  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6464  001DA6  D7FC               	goto	u3607
  6465  001DA8  D000               	nop2	
  6466                           
  6467                           ;lcd44780.c: 459: lcd_command(0x20 | LCD_function);
  6468  001DAA  505A               	movf	_LCD_function,w,c
  6469  001DAC  0920               	iorlw	32
  6470  001DAE  ECF2  F014         	call	_lcd_command
  6471  001DB2                     l3226:
  6472                           
  6473                           ;lcd44780.c: 460: }
  6474                           ;lcd44780.c: 463: lcd_command(0x20 | LCD_function);
  6475  001DB2  505A               	movf	_LCD_function,w,c
  6476  001DB4  0920               	iorlw	32
  6477  001DB6  ECF2  F014         	call	_lcd_command
  6478                           
  6479                           ;lcd44780.c: 466: LCD_ctrl = 0x04 | 0x00 | 0x00;
  6480  001DBA  0E04               	movlw	4
  6481  001DBC  0100               	movlb	0	; () banked
  6482  001DBE  6FD0               	movwf	_LCD_ctrl& (0+255),b
  6483                           
  6484                           ; BSR set to: 0
  6485                           ;lcd44780.c: 467: lcd_command(0x08 | LCD_ctrl);
  6486  001DC0  51D0               	movf	_LCD_ctrl& (0+255),w,b
  6487  001DC2  0908               	iorlw	8
  6488  001DC4  ECF2  F014         	call	_lcd_command
  6489                           
  6490                           ;lcd44780.c: 470: lcd_command(0x01);
  6491  001DC8  0E01               	movlw	1
  6492  001DCA  ECF2  F014         	call	_lcd_command
  6493                           
  6494                           ;lcd44780.c: 471: _delay((unsigned long)((2)*(20000000/4000.0)));
  6495  001DCE  0E0D               	movlw	13
  6496  001DD0  6E09               	movwf	??_lcd_begin& (0+255),c
  6497  001DD2  0EFC               	movlw	252
  6498  001DD4                     u3617:
  6499  001DD4  2EE8               	decfsz	wreg,f,c
  6500  001DD6  D7FE               	goto	u3617
  6501  001DD8  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6502  001DDA  D7FC               	goto	u3617
  6503                           
  6504                           ;lcd44780.c: 474: LCD_mode = 0x02 | 0x00;
  6505  001DDC  0E02               	movlw	2
  6506  001DDE  0100               	movlb	0	; () banked
  6507  001DE0  6FD2               	movwf	_LCD_mode& (0+255),b
  6508                           
  6509                           ; BSR set to: 0
  6510                           ;lcd44780.c: 476: lcd_command(0x04 | LCD_mode);
  6511  001DE2  51D2               	movf	_LCD_mode& (0+255),w,b
  6512  001DE4  0904               	iorlw	4
  6513  001DE6  EFF2  F014         	goto	_lcd_command
  6514  001DEA                     __end_of_lcd_begin:
  6515                           	opt stack 0
  6516                           tblptru	equ	0xFF8
  6517                           tblptrh	equ	0xFF7
  6518                           tblptrl	equ	0xFF6
  6519                           tablat	equ	0xFF5
  6520                           prodl	equ	0xFF3
  6521                           intcon	equ	0xFF2
  6522                           intcon2	equ	0xFF1
  6523                           postinc0	equ	0xFEE
  6524                           wreg	equ	0xFE8
  6525                           postdec1	equ	0xFE5
  6526                           fsr1l	equ	0xFE1
  6527                           indf2	equ	0xFDF
  6528                           postinc2	equ	0xFDE
  6529                           postdec2	equ	0xFDD
  6530                           fsr2h	equ	0xFDA
  6531                           fsr2l	equ	0xFD9
  6532                           status	equ	0xFD8
  6533                           
  6534 ;; *************** function _calibrate *****************
  6535 ;; Defined at:
  6536 ;;		line 25 in file "../../../src/measure.c"
  6537 ;; Parameters:    Size  Location     Type
  6538 ;;		None
  6539 ;; Auto vars:     Size  Location     Type
  6540 ;;  i               1   62[COMRAM] unsigned char 
  6541 ;; Return value:  Size  Location     Type
  6542 ;;		None               void
  6543 ;; Registers used:
  6544 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6545 ;; Tracked objects:
  6546 ;;		On entry : 0/0
  6547 ;;		On exit  : 0/0
  6548 ;;		Unchanged: 0/0
  6549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6550 ;;      Params:         0       0       0       0       0       0       0       0       0
  6551 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6552 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6553 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6554 ;;Total ram usage:        1 bytes
  6555 ;; Hardware stack levels used:    1
  6556 ;; Hardware stack levels required when called:    6
  6557 ;; This function calls:
  6558 ;;		___lwtofl
  6559 ;;		_delay10ms
  6560 ;;		_lcd_clear
  6561 ;;		_lcd_gotoxy
  6562 ;;		_lcd_send
  6563 ;;		_measure_freq
  6564 ;;		_put_str
  6565 ;;		_ser_puts
  6566 ;; This function is called by:
  6567 ;;		_main
  6568 ;; This function uses a non-reentrant model
  6569 ;;
  6570                           
  6571                           	psect	text32
  6572  001C34                     __ptext32:
  6573                           	opt stack 0
  6574  001C34                     _calibrate:
  6575                           	opt stack 24
  6576                           
  6577                           ;measure.c: 26: uint8_t i;
  6578                           ;measure.c: 29: lcd_clear();
  6579                           
  6580                           ;incstack = 0
  6581  001C34  ECD8  F014         	call	_lcd_clear	;wreg free
  6582                           
  6583                           ;measure.c: 31: lcd_gotoxy(0, 0);
  6584  001C38  0E00               	movlw	0
  6585  001C3A  6A08               	clrf	lcd_gotoxy@row,c
  6586  001C3C  EC77  F013         	call	_lcd_gotoxy
  6587                           
  6588                           ;measure.c: 32: put_str("Calibrating");
  6589  001C40  0E89               	movlw	STR_1& (0+255)
  6590  001C42  EC05  F014         	call	_put_str
  6591                           
  6592                           ;measure.c: 34: lcd_gotoxy(0, 1);
  6593  001C46  0E01               	movlw	1
  6594  001C48  6E08               	movwf	lcd_gotoxy@row,c
  6595  001C4A  0E00               	movlw	0
  6596  001C4C  EC77  F013         	call	_lcd_gotoxy
  6597                           
  6598                           ;measure.c: 35: ser_puts("\r\n");
  6599  001C50  0EF8               	movlw	STR_2& (0+255)
  6600  001C52  EC9F  F014         	call	_ser_puts
  6601                           
  6602                           ;measure.c: 36: put_str("please wait...");
  6603  001C56  0E6D               	movlw	STR_3& (0+255)
  6604  001C58  EC05  F014         	call	_put_str
  6605                           
  6606                           ;measure.c: 39: LATC &= ~(1 << 5);
  6607  001C5C  9A8B               	bcf	3979,5,c	;volatile
  6608                           
  6609                           ;measure.c: 41: F1 = (double)measure_freq();
  6610  001C5E  EC24  F00D         	call	_measure_freq	;wreg free
  6611  001C62  C036  F03B         	movff	?_measure_freq,___lwtofl@c
  6612  001C66  C037  F03C         	movff	?_measure_freq+1,___lwtofl@c+1
  6613  001C6A  EC1A  F014         	call	___lwtofl	;wreg free
  6614  001C6E  C03B  F0E7         	movff	?___lwtofl,_F1
  6615  001C72  C03C  F0E8         	movff	?___lwtofl+1,_F1+1
  6616  001C76  C03D  F0E9         	movff	?___lwtofl+2,_F1+2
  6617  001C7A  C03E  F0EA         	movff	?___lwtofl+3,_F1+3
  6618                           
  6619                           ;measure.c: 42: delay10ms(50);
  6620  001C7E  0E32               	movlw	50
  6621  001C80  ECFB  F014         	call	_delay10ms
  6622                           
  6623                           ;measure.c: 44: F1 = (double)measure_freq();
  6624  001C84  EC24  F00D         	call	_measure_freq	;wreg free
  6625  001C88  C036  F03B         	movff	?_measure_freq,___lwtofl@c
  6626  001C8C  C037  F03C         	movff	?_measure_freq+1,___lwtofl@c+1
  6627  001C90  EC1A  F014         	call	___lwtofl	;wreg free
  6628  001C94  C03B  F0E7         	movff	?___lwtofl,_F1
  6629  001C98  C03C  F0E8         	movff	?___lwtofl+1,_F1+1
  6630  001C9C  C03D  F0E9         	movff	?___lwtofl+2,_F1+2
  6631  001CA0  C03E  F0EA         	movff	?___lwtofl+3,_F1+3
  6632                           
  6633                           ;measure.c: 45: LATC |= (1 << 5);
  6634  001CA4  8A8B               	bsf	3979,5,c	;volatile
  6635                           
  6636                           ;measure.c: 47: F2 = (double)measure_freq();
  6637  001CA6  EC24  F00D         	call	_measure_freq	;wreg free
  6638  001CAA  C036  F03B         	movff	?_measure_freq,___lwtofl@c
  6639  001CAE  C037  F03C         	movff	?_measure_freq+1,___lwtofl@c+1
  6640  001CB2  EC1A  F014         	call	___lwtofl	;wreg free
  6641  001CB6  C03B  F0BA         	movff	?___lwtofl,_F2
  6642  001CBA  C03C  F0BB         	movff	?___lwtofl+1,_F2+1
  6643  001CBE  C03D  F0BC         	movff	?___lwtofl+2,_F2+2
  6644  001CC2  C03E  F0BD         	movff	?___lwtofl+3,_F2+3
  6645                           
  6646                           ;measure.c: 48: delay10ms(50);
  6647  001CC6  0E32               	movlw	50
  6648  001CC8  ECFB  F014         	call	_delay10ms
  6649                           
  6650                           ;measure.c: 50: F2 = (double)measure_freq();
  6651  001CCC  EC24  F00D         	call	_measure_freq	;wreg free
  6652  001CD0  C036  F03B         	movff	?_measure_freq,___lwtofl@c
  6653  001CD4  C037  F03C         	movff	?_measure_freq+1,___lwtofl@c+1
  6654  001CD8  EC1A  F014         	call	___lwtofl	;wreg free
  6655  001CDC  C03B  F0BA         	movff	?___lwtofl,_F2
  6656  001CE0  C03C  F0BB         	movff	?___lwtofl+1,_F2+1
  6657  001CE4  C03D  F0BC         	movff	?___lwtofl+2,_F2+2
  6658  001CE8  C03E  F0BD         	movff	?___lwtofl+3,_F2+3
  6659                           
  6660                           ;measure.c: 51: LATC &= ~(1 << 5);
  6661  001CEC  9A8B               	bcf	3979,5,c	;volatile
  6662                           
  6663                           ;measure.c: 54: lcd_gotoxy(11, 0);
  6664  001CEE  6A08               	clrf	lcd_gotoxy@row,c
  6665  001CF0  0E0B               	movlw	11
  6666  001CF2  EC77  F013         	call	_lcd_gotoxy
  6667                           
  6668                           ;measure.c: 55: for(i = 0; i < 6; i++) {
  6669  001CF6  6A3F               	clrf	calibrate@i,c
  6670  001CF8                     l4056:
  6671                           
  6672                           ;measure.c: 56: lcd_send(('='), 1);
  6673  001CF8  0E01               	movlw	1
  6674  001CFA  6E05               	movwf	lcd_send@mode,c
  6675  001CFC  0E3D               	movlw	61
  6676  001CFE  ECCB  F014         	call	_lcd_send
  6677                           
  6678                           ;measure.c: 58: delay10ms(28);
  6679  001D02  0E1C               	movlw	28
  6680  001D04  ECFB  F014         	call	_delay10ms
  6681  001D08  2A3F               	incf	calibrate@i,f,c
  6682  001D0A  0E05               	movlw	5
  6683  001D0C  643F               	cpfsgt	calibrate@i,c
  6684  001D0E  D7F4               	goto	l4056
  6685                           
  6686                           ;measure.c: 59: }
  6687                           ;measure.c: 61: ser_puts("\r\n");
  6688  001D10  0EF8               	movlw	STR_2& (0+255)
  6689  001D12  EF9F  F014         	goto	_ser_puts
  6690  001D16                     __end_of_calibrate:
  6691                           	opt stack 0
  6692                           tblptru	equ	0xFF8
  6693                           tblptrh	equ	0xFF7
  6694                           tblptrl	equ	0xFF6
  6695                           tablat	equ	0xFF5
  6696                           prodl	equ	0xFF3
  6697                           intcon	equ	0xFF2
  6698                           intcon2	equ	0xFF1
  6699                           postinc0	equ	0xFEE
  6700                           wreg	equ	0xFE8
  6701                           postdec1	equ	0xFE5
  6702                           fsr1l	equ	0xFE1
  6703                           indf2	equ	0xFDF
  6704                           postinc2	equ	0xFDE
  6705                           postdec2	equ	0xFDD
  6706                           fsr2h	equ	0xFDA
  6707                           fsr2l	equ	0xFD9
  6708                           status	equ	0xFD8
  6709                           
  6710 ;; *************** function _put_str *****************
  6711 ;; Defined at:
  6712 ;;		line 221 in file "../../../src/print.c"
  6713 ;; Parameters:    Size  Location     Type
  6714 ;;  s               1    wreg     PTR const unsigned char 
  6715 ;;		 -> STR_15(13), STR_6(10), STR_3(15), STR_1(12), 
  6716 ;; Auto vars:     Size  Location     Type
  6717 ;;  s               1   10[COMRAM] PTR const unsigned char 
  6718 ;;		 -> STR_15(13), STR_6(10), STR_3(15), STR_1(12), 
  6719 ;;  i               2    8[COMRAM] int 
  6720 ;; Return value:  Size  Location     Type
  6721 ;;		None               void
  6722 ;; Registers used:
  6723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6724 ;; Tracked objects:
  6725 ;;		On entry : 0/0
  6726 ;;		On exit  : 0/0
  6727 ;;		Unchanged: 0/0
  6728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6729 ;;      Params:         0       0       0       0       0       0       0       0       0
  6730 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6731 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6732 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6733 ;;Total ram usage:        4 bytes
  6734 ;; Hardware stack levels used:    1
  6735 ;; Hardware stack levels required when called:    4
  6736 ;; This function calls:
  6737 ;;		_output_putch
  6738 ;; This function is called by:
  6739 ;;		_calibrate
  6740 ;;		_measure_capacitance
  6741 ;;		_measure_inductance
  6742 ;; This function uses a non-reentrant model
  6743 ;;
  6744                           
  6745                           	psect	text33
  6746  00280A                     __ptext33:
  6747                           	opt stack 0
  6748  00280A                     _put_str:
  6749                           	opt stack 25
  6750                           
  6751                           ;incstack = 0
  6752                           ;put_str@s stored from wreg
  6753  00280A  6E0B               	movwf	put_str@s,c
  6754                           
  6755                           ;print.c: 222: int i;
  6756                           ;print.c: 224: for(i = 0; s[i]; i++) {
  6757  00280C  6A09               	clrf	put_str@i,c
  6758  00280E  6A0A               	clrf	put_str@i+1,c
  6759  002810  D005               	goto	l3120
  6760  002812                     l3116:
  6761                           
  6762                           ;print.c: 225: output_putch(s[i]);
  6763  002812  D808               	call	PL28	;call to abstracted procedure
  6764  002814  ECE3  F014         	call	_output_putch
  6765  002818  4A09               	infsnz	put_str@i,f,c
  6766  00281A  2A0A               	incf	put_str@i+1,f,c
  6767  00281C                     l3120:
  6768  00281C  D803               	call	PL28	;call to abstracted procedure
  6769  00281E  B4D8               	btfsc	status,2,c
  6770  002820  0012               	return		;funcret
  6771  002822  D7F7               	goto	l3116
  6772  002824                     __end_of_put_str:
  6773                           	opt stack 0
  6774  002824                     PL28:
  6775                           	opt stack 25
  6776  002824  500B               	movf	put_str@s,w,c
  6777  002826  2409               	addwf	put_str@i,w,c
  6778  002828  6E08               	movwf	??_put_str& (0+255),c
  6779  00282A  C008  FFF6         	movff	??_put_str,tblptrl
  6780  00282E                     	if	0	;There is only one active tblptr byte
  6781  00282E                     	endif
  6782  00282E                     	if	0	;tblptru may be non-zero
  6783  00282E                     	endif
  6784  00282E                     	if	0	;tblptru may be non-zero
  6785  00282E                     	endif
  6786  00282E  0008               	tblrd		*
  6787  002830  50F5               	movf	tablat,w,c
  6788  002832  0012               	return	
  6789  002834                     __end_ofPL28:
  6790                           	opt stack 0
  6791                           tblptru	equ	0xFF8
  6792                           tblptrh	equ	0xFF7
  6793                           tblptrl	equ	0xFF6
  6794                           tablat	equ	0xFF5
  6795                           prodl	equ	0xFF3
  6796                           intcon	equ	0xFF2
  6797                           intcon2	equ	0xFF1
  6798                           postinc0	equ	0xFEE
  6799                           wreg	equ	0xFE8
  6800                           postdec1	equ	0xFE5
  6801                           fsr1l	equ	0xFE1
  6802                           indf2	equ	0xFDF
  6803                           postinc2	equ	0xFDE
  6804                           postdec2	equ	0xFDD
  6805                           fsr2h	equ	0xFDA
  6806                           fsr2l	equ	0xFD9
  6807                           status	equ	0xFD8
  6808                           
  6809 ;; *************** function _output_putch *****************
  6810 ;; Defined at:
  6811 ;;		line 208 in file "../../../src/print.c"
  6812 ;; Parameters:    Size  Location     Type
  6813 ;;  c               1    wreg     unsigned char 
  6814 ;; Auto vars:     Size  Location     Type
  6815 ;;  c               1    6[COMRAM] unsigned char 
  6816 ;; Return value:  Size  Location     Type
  6817 ;;		None               void
  6818 ;; Registers used:
  6819 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6820 ;; Tracked objects:
  6821 ;;		On entry : 0/0
  6822 ;;		On exit  : 0/0
  6823 ;;		Unchanged: 0/0
  6824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6825 ;;      Params:         0       0       0       0       0       0       0       0       0
  6826 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6827 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6828 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6829 ;;Total ram usage:        1 bytes
  6830 ;; Hardware stack levels used:    1
  6831 ;; Hardware stack levels required when called:    3
  6832 ;; This function calls:
  6833 ;;		_lcd_send
  6834 ;;		_ser_putch
  6835 ;; This function is called by:
  6836 ;;		_put_str
  6837 ;; This function uses a non-reentrant model
  6838 ;;
  6839                           
  6840                           	psect	text34
  6841  0029C6                     __ptext34:
  6842                           	opt stack 0
  6843  0029C6                     _output_putch:
  6844                           	opt stack 25
  6845                           
  6846                           ;incstack = 0
  6847                           ;output_putch@c stored from wreg
  6848  0029C6  6E07               	movwf	output_putch@c,c
  6849                           
  6850                           ;print.c: 210: lcd_send((c), 1);
  6851  0029C8  0E01               	movlw	1
  6852  0029CA  6E05               	movwf	lcd_send@mode,c
  6853  0029CC  5007               	movf	output_putch@c,w,c
  6854  0029CE  ECCB  F014         	call	_lcd_send
  6855                           
  6856                           ;print.c: 213: ser_putch(c);
  6857  0029D2  5007               	movf	output_putch@c,w,c
  6858  0029D4  EF57  F014         	goto	_ser_putch
  6859  0029D8                     __end_of_output_putch:
  6860                           	opt stack 0
  6861                           tblptru	equ	0xFF8
  6862                           tblptrh	equ	0xFF7
  6863                           tblptrl	equ	0xFF6
  6864                           tablat	equ	0xFF5
  6865                           prodl	equ	0xFF3
  6866                           intcon	equ	0xFF2
  6867                           intcon2	equ	0xFF1
  6868                           postinc0	equ	0xFEE
  6869                           wreg	equ	0xFE8
  6870                           postdec1	equ	0xFE5
  6871                           fsr1l	equ	0xFE1
  6872                           indf2	equ	0xFDF
  6873                           postinc2	equ	0xFDE
  6874                           postdec2	equ	0xFDD
  6875                           fsr2h	equ	0xFDA
  6876                           fsr2l	equ	0xFD9
  6877                           status	equ	0xFD8
  6878                           
  6879 ;; *************** function _measure_freq *****************
  6880 ;; Defined at:
  6881 ;;		line 68 in file "../../../src/measure.c"
  6882 ;; Parameters:    Size  Location     Type
  6883 ;;		None
  6884 ;; Auto vars:     Size  Location     Type
  6885 ;;  count           2   56[COMRAM] unsigned int 
  6886 ;; Return value:  Size  Location     Type
  6887 ;;                  2   53[COMRAM] unsigned short 
  6888 ;; Registers used:
  6889 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6890 ;; Tracked objects:
  6891 ;;		On entry : 0/0
  6892 ;;		On exit  : 0/0
  6893 ;;		Unchanged: 0/0
  6894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6895 ;;      Params:         2       0       0       0       0       0       0       0       0
  6896 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6897 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6898 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6899 ;;Total ram usage:        5 bytes
  6900 ;; Hardware stack levels used:    1
  6901 ;; Hardware stack levels required when called:    5
  6902 ;; This function calls:
  6903 ;;		_buffer_init
  6904 ;;		_buffer_puts
  6905 ;;		_format_number
  6906 ;;		_lcd_gotoxy
  6907 ;;		_print_buffer
  6908 ;;		_timer0_read_ps
  6909 ;; This function is called by:
  6910 ;;		_calibrate
  6911 ;;		_measure_capacitance
  6912 ;;		_measure_inductance
  6913 ;; This function uses a non-reentrant model
  6914 ;;
  6915                           
  6916                           	psect	text35
  6917  001A48                     __ptext35:
  6918                           	opt stack 0
  6919  001A48                     _measure_freq:
  6920                           	opt stack 24
  6921                           
  6922                           ;measure.c: 69: uint16_t count;
  6923                           ;measure.c: 71: INTCON &= ~0b100;
  6924                           
  6925                           ;incstack = 0
  6926  001A48  94F2               	bcf	intcon,2,c	;volatile
  6927                           
  6928                           ;measure.c: 75: TRISA &= ~0b00010000;
  6929  001A4A  9892               	bcf	3986,4,c	;volatile
  6930                           
  6931                           ;measure.c: 77: _delay((unsigned long)((20)*(20000000/4000.0)));
  6932  001A4C  0E82               	movlw	130
  6933  001A4E  6E38               	movwf	??_measure_freq& (0+255),c
  6934  001A50  0EDE               	movlw	222
  6935  001A52                     u3627:
  6936  001A52  2EE8               	decfsz	wreg,f,c
  6937  001A54  D7FE               	goto	u3627
  6938  001A56  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6939  001A58  D7FC               	goto	u3627
  6940                           
  6941                           ;measure.c: 80: TMR0 = 0x00;
  6942  001A5A  6AD6               	clrf	4054,c	;volatile
  6943  001A5C  6AD7               	clrf	4055,c	;volatile
  6944                           
  6945                           ;measure.c: 85: _delay((unsigned long)((10)*(20000000/4000.0)));
  6946  001A5E  0E41               	movlw	65
  6947  001A60  6E38               	movwf	??_measure_freq& (0+255),c
  6948  001A62  0EEE               	movlw	238
  6949  001A64                     u3637:
  6950  001A64  2EE8               	decfsz	wreg,f,c
  6951  001A66  D7FE               	goto	u3637
  6952  001A68  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6953  001A6A  D7FC               	goto	u3637
  6954  001A6C  D000               	nop2	
  6955                           
  6956                           ;measure.c: 86: _delay((unsigned long)((10)*(20000000/4000.0)));
  6957  001A6E  0E41               	movlw	65
  6958  001A70  6E38               	movwf	??_measure_freq& (0+255),c
  6959  001A72  0EEE               	movlw	238
  6960  001A74                     u3647:
  6961  001A74  2EE8               	decfsz	wreg,f,c
  6962  001A76  D7FE               	goto	u3647
  6963  001A78  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6964  001A7A  D7FC               	goto	u3647
  6965  001A7C  D000               	nop2	
  6966                           
  6967                           ;measure.c: 87: _delay((unsigned long)((10)*(20000000/4000.0)));
  6968  001A7E  0E41               	movlw	65
  6969  001A80  6E38               	movwf	??_measure_freq& (0+255),c
  6970  001A82  0EEE               	movlw	238
  6971  001A84                     u3657:
  6972  001A84  2EE8               	decfsz	wreg,f,c
  6973  001A86  D7FE               	goto	u3657
  6974  001A88  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6975  001A8A  D7FC               	goto	u3657
  6976  001A8C  D000               	nop2	
  6977                           
  6978                           ;measure.c: 88: _delay((unsigned long)((10)*(20000000/4000.0)));
  6979  001A8E  0E41               	movlw	65
  6980  001A90  6E38               	movwf	??_measure_freq& (0+255),c
  6981  001A92  0EEE               	movlw	238
  6982  001A94                     u3667:
  6983  001A94  2EE8               	decfsz	wreg,f,c
  6984  001A96  D7FE               	goto	u3667
  6985  001A98  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6986  001A9A  D7FC               	goto	u3667
  6987  001A9C  D000               	nop2	
  6988                           
  6989                           ;measure.c: 89: _delay((unsigned long)((10)*(20000000/4000.0)));
  6990  001A9E  0E41               	movlw	65
  6991  001AA0  6E38               	movwf	??_measure_freq& (0+255),c
  6992  001AA2  0EEE               	movlw	238
  6993  001AA4                     u3677:
  6994  001AA4  2EE8               	decfsz	wreg,f,c
  6995  001AA6  D7FE               	goto	u3677
  6996  001AA8  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6997  001AAA  D7FC               	goto	u3677
  6998  001AAC  D000               	nop2	
  6999                           
  7000                           ;measure.c: 90: _delay((unsigned long)((10)*(20000000/4000.0)));
  7001  001AAE  0E41               	movlw	65
  7002  001AB0  6E38               	movwf	??_measure_freq& (0+255),c
  7003  001AB2  0EEE               	movlw	238
  7004  001AB4                     u3687:
  7005  001AB4  2EE8               	decfsz	wreg,f,c
  7006  001AB6  D7FE               	goto	u3687
  7007  001AB8  2E38               	decfsz	??_measure_freq& (0+255),f,c
  7008  001ABA  D7FC               	goto	u3687
  7009  001ABC  D000               	nop2	
  7010                           
  7011                           ;measure.c: 91: _delay((unsigned long)((10)*(20000000/4000.0)));
  7012  001ABE  0E41               	movlw	65
  7013  001AC0  6E38               	movwf	??_measure_freq& (0+255),c
  7014  001AC2  0EEE               	movlw	238
  7015  001AC4                     u3697:
  7016  001AC4  2EE8               	decfsz	wreg,f,c
  7017  001AC6  D7FE               	goto	u3697
  7018  001AC8  2E38               	decfsz	??_measure_freq& (0+255),f,c
  7019  001ACA  D7FC               	goto	u3697
  7020  001ACC  D000               	nop2	
  7021                           
  7022                           ;measure.c: 92: _delay((unsigned long)((10)*(20000000/4000.0)));
  7023  001ACE  0E41               	movlw	65
  7024  001AD0  6E38               	movwf	??_measure_freq& (0+255),c
  7025  001AD2  0EEE               	movlw	238
  7026  001AD4                     u3707:
  7027  001AD4  2EE8               	decfsz	wreg,f,c
  7028  001AD6  D7FE               	goto	u3707
  7029  001AD8  2E38               	decfsz	??_measure_freq& (0+255),f,c
  7030  001ADA  D7FC               	goto	u3707
  7031  001ADC  D000               	nop2	
  7032                           
  7033                           ;measure.c: 93: _delay((unsigned long)((10)*(20000000/4000.0)));
  7034  001ADE  0E41               	movlw	65
  7035  001AE0  6E38               	movwf	??_measure_freq& (0+255),c
  7036  001AE2  0EEE               	movlw	238
  7037  001AE4                     u3717:
  7038  001AE4  2EE8               	decfsz	wreg,f,c
  7039  001AE6  D7FE               	goto	u3717
  7040  001AE8  2E38               	decfsz	??_measure_freq& (0+255),f,c
  7041  001AEA  D7FC               	goto	u3717
  7042  001AEC  D000               	nop2	
  7043                           
  7044                           ;measure.c: 94: _delay((unsigned long)((10)*(20000000/4000.0)));
  7045  001AEE  0E41               	movlw	65
  7046  001AF0  6E38               	movwf	??_measure_freq& (0+255),c
  7047  001AF2  0EEE               	movlw	238
  7048  001AF4                     u3727:
  7049  001AF4  2EE8               	decfsz	wreg,f,c
  7050  001AF6  D7FE               	goto	u3727
  7051  001AF8  2E38               	decfsz	??_measure_freq& (0+255),f,c
  7052  001AFA  D7FC               	goto	u3727
  7053  001AFC  D000               	nop2	
  7054                           
  7055                           ;measure.c: 99: TRISA |= 0b00010000;
  7056  001AFE  8892               	bsf	3986,4,c	;volatile
  7057                           
  7058                           ;measure.c: 102: count = timer0_read_ps();
  7059  001B00  EC86  F012         	call	_timer0_read_ps	;wreg free
  7060  001B04  C004  F039         	movff	?_timer0_read_ps,measure_freq@count
  7061  001B08  C005  F03A         	movff	?_timer0_read_ps+1,measure_freq@count+1
  7062                           
  7063                           ;measure.c: 105: lcd_gotoxy(0, 1);
  7064  001B0C  0E01               	movlw	1
  7065  001B0E  6E08               	movwf	lcd_gotoxy@row,c
  7066  001B10  0E00               	movlw	0
  7067  001B12  EC77  F013         	call	_lcd_gotoxy
  7068                           
  7069                           ;measure.c: 107: buffer_init();
  7070  001B16  ECEC  F014         	call	_buffer_init	;wreg free
  7071                           
  7072                           ; BSR set to: 0
  7073                           ;measure.c: 108: buffer_puts("Freq=");
  7074  001B1A  0ECA               	movlw	STR_5& (0+255)
  7075  001B1C  ECAE  F014         	call	_buffer_puts
  7076                           
  7077                           ; BSR set to: 0
  7078                           ;measure.c: 109: format_number(count, 10, 5);
  7079  001B20  C039  F00B         	movff	measure_freq@count,format_number@n
  7080  001B24  C03A  F00C         	movff	measure_freq@count+1,format_number@n+1
  7081  001B28  0E0A               	movlw	10
  7082  001B2A  6E0D               	movwf	format_number@base,c
  7083  001B2C  0E05               	movlw	5
  7084  001B2E  6E0E               	movwf	format_number@pad,c
  7085  001B30  EC65  F010         	call	_format_number	;wreg free
  7086                           
  7087                           ;measure.c: 110: print_buffer();
  7088  001B34  EC43  F014         	call	_print_buffer	;wreg free
  7089                           
  7090                           ;measure.c: 112: return count;
  7091  001B38  C039  F036         	movff	measure_freq@count,?_measure_freq
  7092  001B3C  C03A  F037         	movff	measure_freq@count+1,?_measure_freq+1
  7093  001B40  0012               	return		;funcret
  7094  001B42                     __end_of_measure_freq:
  7095                           	opt stack 0
  7096                           tblptru	equ	0xFF8
  7097                           tblptrh	equ	0xFF7
  7098                           tblptrl	equ	0xFF6
  7099                           tablat	equ	0xFF5
  7100                           prodl	equ	0xFF3
  7101                           intcon	equ	0xFF2
  7102                           intcon2	equ	0xFF1
  7103                           postinc0	equ	0xFEE
  7104                           wreg	equ	0xFE8
  7105                           postdec1	equ	0xFE5
  7106                           fsr1l	equ	0xFE1
  7107                           indf2	equ	0xFDF
  7108                           postinc2	equ	0xFDE
  7109                           postdec2	equ	0xFDD
  7110                           fsr2h	equ	0xFDA
  7111                           fsr2l	equ	0xFD9
  7112                           status	equ	0xFD8
  7113                           
  7114 ;; *************** function _timer0_read_ps *****************
  7115 ;; Defined at:
  7116 ;;		line 64 in file "../../../lib/timer.c"
  7117 ;; Parameters:    Size  Location     Type
  7118 ;;		None
  7119 ;; Auto vars:     Size  Location     Type
  7120 ;;  count           2    8[COMRAM] unsigned int 
  7121 ;;  prev            1    7[COMRAM] unsigned char 
  7122 ;; Return value:  Size  Location     Type
  7123 ;;                  2    3[COMRAM] unsigned short 
  7124 ;; Registers used:
  7125 ;;		wreg, status,2, status,0
  7126 ;; Tracked objects:
  7127 ;;		On entry : 0/0
  7128 ;;		On exit  : 0/0
  7129 ;;		Unchanged: 0/0
  7130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7131 ;;      Params:         2       0       0       0       0       0       0       0       0
  7132 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7133 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7134 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7135 ;;Total ram usage:        7 bytes
  7136 ;; Hardware stack levels used:    1
  7137 ;; Hardware stack levels required when called:    1
  7138 ;; This function calls:
  7139 ;;		Nothing
  7140 ;; This function is called by:
  7141 ;;		_measure_freq
  7142 ;; This function uses a non-reentrant model
  7143 ;;
  7144                           
  7145                           	psect	text36
  7146  00250C                     __ptext36:
  7147                           	opt stack 0
  7148  00250C                     _timer0_read_ps:
  7149                           	opt stack 27
  7150                           
  7151                           ;timer.c: 65: uint8_t prev = TMR0;
  7152                           
  7153                           ;incstack = 0
  7154  00250C  CFD6 F008          	movff	4054,timer0_read_ps@prev	;volatile
  7155                           
  7156                           ;timer.c: 66: uint16_t count = 0;
  7157  002510  6A09               	clrf	timer0_read_ps@count,c
  7158  002512  6A0A               	clrf	timer0_read_ps@count+1,c
  7159                           
  7160                           ;timer.c: 68: T0CON |= 0x20;
  7161  002514  8AD5               	bsf	4053,5,c	;volatile
  7162  002516                     l210:
  7163                           
  7164                           ;timer.c: 72: T0CON |= 0x10;
  7165  002516  88D5               	bsf	4053,4,c	;volatile
  7166                           
  7167                           ;timer.c: 74: __nop();
  7168  002518  F000               	nop	
  7169                           
  7170                           ;timer.c: 75: __nop();
  7171  00251A  F000               	nop	
  7172                           
  7173                           ;timer.c: 77: T0CON &= ~0x10;
  7174  00251C  98D5               	bcf	4053,4,c	;volatile
  7175                           
  7176                           ;timer.c: 79: __nop();
  7177  00251E  F000               	nop	
  7178                           
  7179                           ;timer.c: 80: __nop();
  7180  002520  F000               	nop	
  7181                           
  7182                           ;timer.c: 82: ++count;
  7183  002522  4A09               	infsnz	timer0_read_ps@count,f,c
  7184  002524  2A0A               	incf	timer0_read_ps@count+1,f,c
  7185                           
  7186                           ;timer.c: 85: } while(prev == TMR0 && count <= 255);
  7187  002526  5008               	movf	timer0_read_ps@prev,w,c
  7188  002528  18D6               	xorwf	4054,w,c	;volatile
  7189  00252A  10D7               	iorwf	4055,w,c	;volatile
  7190  00252C  E102               	bnz	l3066
  7191  00252E  040A               	decf	timer0_read_ps@count+1,w,c
  7192  002530  E3F2               	bnc	l210
  7193  002532                     l3066:
  7194                           
  7195                           ;timer.c: 87: count = ((prev << 8) + (256 - count));
  7196  002532  5008               	movf	timer0_read_ps@prev,w,c
  7197  002534  6E07               	movwf	(??_timer0_read_ps+1)& (0+255),c
  7198  002536  6A06               	clrf	??_timer0_read_ps& (0+255),c
  7199  002538  5009               	movf	timer0_read_ps@count,w,c
  7200  00253A  5E06               	subwf	??_timer0_read_ps,f,c
  7201  00253C  500A               	movf	timer0_read_ps@count+1,w,c
  7202  00253E  5A07               	subwfb	??_timer0_read_ps+1,f,c
  7203  002540  0E00               	movlw	0
  7204  002542  2406               	addwf	??_timer0_read_ps,w,c
  7205  002544  6E09               	movwf	timer0_read_ps@count,c
  7206  002546  0E01               	movlw	1
  7207  002548  2007               	addwfc	??_timer0_read_ps+1,w,c
  7208  00254A  6E0A               	movwf	timer0_read_ps@count+1,c
  7209                           
  7210                           ;timer.c: 88: return count;
  7211  00254C  C009  F004         	movff	timer0_read_ps@count,?_timer0_read_ps
  7212  002550  C00A  F005         	movff	timer0_read_ps@count+1,?_timer0_read_ps+1
  7213  002554  0012               	return		;funcret
  7214  002556                     __end_of_timer0_read_ps:
  7215                           	opt stack 0
  7216                           tblptru	equ	0xFF8
  7217                           tblptrh	equ	0xFF7
  7218                           tblptrl	equ	0xFF6
  7219                           tablat	equ	0xFF5
  7220                           prodl	equ	0xFF3
  7221                           intcon	equ	0xFF2
  7222                           intcon2	equ	0xFF1
  7223                           postinc0	equ	0xFEE
  7224                           wreg	equ	0xFE8
  7225                           postdec1	equ	0xFE5
  7226                           fsr1l	equ	0xFE1
  7227                           indf2	equ	0xFDF
  7228                           postinc2	equ	0xFDE
  7229                           postdec2	equ	0xFDD
  7230                           fsr2h	equ	0xFDA
  7231                           fsr2l	equ	0xFD9
  7232                           status	equ	0xFD8
  7233                           
  7234 ;; *************** function _print_buffer *****************
  7235 ;; Defined at:
  7236 ;;		line 230 in file "../../../src/print.c"
  7237 ;; Parameters:    Size  Location     Type
  7238 ;;		None
  7239 ;; Auto vars:     Size  Location     Type
  7240 ;;  i               1    6[COMRAM] unsigned char 
  7241 ;; Return value:  Size  Location     Type
  7242 ;;		None               void
  7243 ;; Registers used:
  7244 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7245 ;; Tracked objects:
  7246 ;;		On entry : 0/0
  7247 ;;		On exit  : 0/0
  7248 ;;		Unchanged: 0/0
  7249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7250 ;;      Params:         0       0       0       0       0       0       0       0       0
  7251 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7252 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7253 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7254 ;;Total ram usage:        2 bytes
  7255 ;; Hardware stack levels used:    1
  7256 ;; Hardware stack levels required when called:    3
  7257 ;; This function calls:
  7258 ;;		_ser_putch
  7259 ;;		_ser_puts
  7260 ;; This function is called by:
  7261 ;;		_measure_freq
  7262 ;; This function uses a non-reentrant model
  7263 ;;
  7264                           
  7265                           	psect	text37
  7266  002886                     __ptext37:
  7267                           	opt stack 0
  7268  002886                     _print_buffer:
  7269                           	opt stack 25
  7270                           
  7271                           ;print.c: 231: uint8_t i;
  7272                           ;print.c: 232: for(i = 0; i < buffer.n; i++) {
  7273                           
  7274                           ;incstack = 0
  7275  002886  6A07               	clrf	print_buffer@i,c
  7276  002888  D008               	goto	l3078
  7277  00288A                     l3074:
  7278                           
  7279                           ; BSR set to: 0
  7280                           ;print.c: 233: ser_putch(buffer.x[i]);
  7281  00288A  5007               	movf	print_buffer@i,w,c
  7282  00288C  0FD6               	addlw	low _buffer
  7283  00288E  6ED9               	movwf	fsr2l,c
  7284  002890  6ADA               	clrf	fsr2h,c
  7285  002892  50DF               	movf	indf2,w,c
  7286  002894  EC57  F014         	call	_ser_putch
  7287  002898  2A07               	incf	print_buffer@i,f,c
  7288  00289A                     l3078:
  7289  00289A  0100               	movlb	0	; () banked
  7290  00289C  39E6               	swapf	(_buffer+16)& (0+255),w,b
  7291  00289E  0B0F               	andlw	15
  7292  0028A0  6E06               	movwf	??_print_buffer& (0+255),c
  7293  0028A2  5006               	movf	??_print_buffer,w,c
  7294  0028A4  5C07               	subwf	print_buffer@i,w,c
  7295  0028A6  E3F1               	bnc	l3074
  7296                           
  7297                           ; BSR set to: 0
  7298                           ;print.c: 234: }
  7299                           ;print.c: 235: ser_puts("\r\n");
  7300  0028A8  0EF8               	movlw	STR_2& (0+255)
  7301  0028AA  EF9F  F014         	goto	_ser_puts
  7302  0028AE                     __end_of_print_buffer:
  7303                           	opt stack 0
  7304                           tblptru	equ	0xFF8
  7305                           tblptrh	equ	0xFF7
  7306                           tblptrl	equ	0xFF6
  7307                           tablat	equ	0xFF5
  7308                           prodl	equ	0xFF3
  7309                           intcon	equ	0xFF2
  7310                           intcon2	equ	0xFF1
  7311                           postinc0	equ	0xFEE
  7312                           wreg	equ	0xFE8
  7313                           postdec1	equ	0xFE5
  7314                           fsr1l	equ	0xFE1
  7315                           indf2	equ	0xFDF
  7316                           postinc2	equ	0xFDE
  7317                           postdec2	equ	0xFDD
  7318                           fsr2h	equ	0xFDA
  7319                           fsr2l	equ	0xFD9
  7320                           status	equ	0xFD8
  7321                           
  7322 ;; *************** function _ser_puts *****************
  7323 ;; Defined at:
  7324 ;;		line 65 in file "../../../lib/ser.c"
  7325 ;; Parameters:    Size  Location     Type
  7326 ;;  s               1    wreg     PTR const unsigned char 
  7327 ;;		 -> STR_37(3), STR_32(3), STR_31(16), STR_30(16), 
  7328 ;;		 -> STR_28(3), STR_24(3), STR_14(3), STR_13(5), 
  7329 ;;		 -> STR_12(3), STR_11(8), STR_10(6), STR_9(6), 
  7330 ;;		 -> STR_8(6), STR_7(5), STR_4(3), STR_2(3), 
  7331 ;; Auto vars:     Size  Location     Type
  7332 ;;  s               1    4[COMRAM] PTR const unsigned char 
  7333 ;;		 -> STR_37(3), STR_32(3), STR_31(16), STR_30(16), 
  7334 ;;		 -> STR_28(3), STR_24(3), STR_14(3), STR_13(5), 
  7335 ;;		 -> STR_12(3), STR_11(8), STR_10(6), STR_9(6), 
  7336 ;;		 -> STR_8(6), STR_7(5), STR_4(3), STR_2(3), 
  7337 ;; Return value:  Size  Location     Type
  7338 ;;		None               void
  7339 ;; Registers used:
  7340 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7341 ;; Tracked objects:
  7342 ;;		On entry : 0/0
  7343 ;;		On exit  : 0/0
  7344 ;;		Unchanged: 0/0
  7345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7346 ;;      Params:         0       0       0       0       0       0       0       0       0
  7347 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7348 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7349 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7350 ;;Total ram usage:        1 bytes
  7351 ;; Hardware stack levels used:    1
  7352 ;; Hardware stack levels required when called:    2
  7353 ;; This function calls:
  7354 ;;		_ser_putch
  7355 ;; This function is called by:
  7356 ;;		_calibrate
  7357 ;;		_measure_capacitance
  7358 ;;		_print_unit
  7359 ;;		_print_buffer
  7360 ;;		_main
  7361 ;; This function uses a non-reentrant model
  7362 ;;
  7363                           
  7364                           	psect	text38
  7365  00293E                     __ptext38:
  7366                           	opt stack 0
  7367  00293E                     _ser_puts:
  7368                           	opt stack 28
  7369                           
  7370                           ;incstack = 0
  7371                           ;ser_puts@s stored from wreg
  7372  00293E  6E05               	movwf	ser_puts@s,c
  7373                           
  7374                           ;ser.c: 66: while(*s) ser_putch(*s++);
  7375  002940  D004               	goto	l2842
  7376  002942                     l2838:
  7377  002942  D807               	call	PL42	;call to abstracted procedure
  7378  002944  EC57  F014         	call	_ser_putch
  7379  002948  2A05               	incf	ser_puts@s,f,c
  7380  00294A                     l2842:
  7381  00294A  D803               	call	PL42	;call to abstracted procedure
  7382  00294C  B4D8               	btfsc	status,2,c
  7383  00294E  0012               	return		;funcret
  7384  002950  D7F8               	goto	l2838
  7385  002952                     __end_of_ser_puts:
  7386                           	opt stack 0
  7387  002952                     PL42:
  7388                           	opt stack 28
  7389  002952  C005  FFF6         	movff	ser_puts@s,tblptrl
  7390  002956                     	if	0	;There is only one active tblptr byte
  7391  002956                     	endif
  7392  002956                     	if	0	;tblptru may be non-zero
  7393  002956                     	endif
  7394  002956                     	if	0	;tblptru may be non-zero
  7395  002956                     	endif
  7396  002956  0008               	tblrd		*
  7397  002958  50F5               	movf	tablat,w,c
  7398  00295A  0012               	return	
  7399  00295C                     __end_ofPL42:
  7400                           	opt stack 0
  7401                           tblptru	equ	0xFF8
  7402                           tblptrh	equ	0xFF7
  7403                           tblptrl	equ	0xFF6
  7404                           tablat	equ	0xFF5
  7405                           prodl	equ	0xFF3
  7406                           intcon	equ	0xFF2
  7407                           intcon2	equ	0xFF1
  7408                           postinc0	equ	0xFEE
  7409                           wreg	equ	0xFE8
  7410                           postdec1	equ	0xFE5
  7411                           fsr1l	equ	0xFE1
  7412                           indf2	equ	0xFDF
  7413                           postinc2	equ	0xFDE
  7414                           postdec2	equ	0xFDD
  7415                           fsr2h	equ	0xFDA
  7416                           fsr2l	equ	0xFD9
  7417                           status	equ	0xFD8
  7418                           
  7419 ;; *************** function _ser_putch *****************
  7420 ;; Defined at:
  7421 ;;		line 55 in file "../../../lib/ser.c"
  7422 ;; Parameters:    Size  Location     Type
  7423 ;;  c               1    wreg     unsigned char 
  7424 ;; Auto vars:     Size  Location     Type
  7425 ;;  c               1    3[COMRAM] unsigned char 
  7426 ;; Return value:  Size  Location     Type
  7427 ;;		None               void
  7428 ;; Registers used:
  7429 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7430 ;; Tracked objects:
  7431 ;;		On entry : 0/0
  7432 ;;		On exit  : 0/0
  7433 ;;		Unchanged: 0/0
  7434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7435 ;;      Params:         0       0       0       0       0       0       0       0       0
  7436 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7437 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7438 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7439 ;;Total ram usage:        1 bytes
  7440 ;; Hardware stack levels used:    1
  7441 ;; Hardware stack levels required when called:    1
  7442 ;; This function calls:
  7443 ;;		Nothing
  7444 ;; This function is called by:
  7445 ;;		_ser_puts
  7446 ;;		_measure_capacitance
  7447 ;;		_output_putch
  7448 ;;		_print_buffer
  7449 ;; This function uses a non-reentrant model
  7450 ;;
  7451                           
  7452                           	psect	text39
  7453  0028AE                     __ptext39:
  7454                           	opt stack 0
  7455  0028AE                     _ser_putch:
  7456                           	opt stack 28
  7457                           
  7458                           ;incstack = 0
  7459                           ;ser_putch@c stored from wreg
  7460  0028AE  6E04               	movwf	ser_putch@c,c
  7461  0028B0                     l2716:
  7462  0028B0  285B               	incf	_txiptr,w,c	;volatile
  7463  0028B2  0B0F               	andlw	15
  7464  0028B4  185C               	xorwf	_txoptr,w,c	;volatile
  7465  0028B6  E0FC               	bz	l2716
  7466                           
  7467                           ;ser.c: 57: GIE = 0;
  7468  0028B8  9EF2               	bcf	intcon,7,c	;volatile
  7469                           
  7470                           ;ser.c: 58: txfifo[txiptr] = c;
  7471  0028BA  0E10               	movlw	low _txfifo
  7472  0028BC  245B               	addwf	_txiptr,w,c	;volatile
  7473  0028BE  6ED9               	movwf	fsr2l,c
  7474  0028C0  6ADA               	clrf	fsr2h,c
  7475  0028C2  0E01               	movlw	high _txfifo
  7476  0028C4  22DA               	addwfc	fsr2h,f,c
  7477  0028C6  C004  FFDF         	movff	ser_putch@c,indf2
  7478                           
  7479                           ;ser.c: 59: txiptr = (txiptr + 1) & ((uint8_t)16 - 1);
  7480  0028CA  285B               	incf	_txiptr,w,c	;volatile
  7481  0028CC  0B0F               	andlw	15
  7482  0028CE  6E5B               	movwf	_txiptr,c	;volatile
  7483                           
  7484                           ;ser.c: 60: TXIE = 1;
  7485  0028D0  889D               	bsf	3997,4,c	;volatile
  7486                           
  7487                           ;ser.c: 61: GIE = 1;
  7488  0028D2  8EF2               	bsf	intcon,7,c	;volatile
  7489  0028D4  0012               	return		;funcret
  7490  0028D6                     __end_of_ser_putch:
  7491                           	opt stack 0
  7492                           tblptru	equ	0xFF8
  7493                           tblptrh	equ	0xFF7
  7494                           tblptrl	equ	0xFF6
  7495                           tablat	equ	0xFF5
  7496                           prodl	equ	0xFF3
  7497                           intcon	equ	0xFF2
  7498                           intcon2	equ	0xFF1
  7499                           postinc0	equ	0xFEE
  7500                           wreg	equ	0xFE8
  7501                           postdec1	equ	0xFE5
  7502                           fsr1l	equ	0xFE1
  7503                           indf2	equ	0xFDF
  7504                           postinc2	equ	0xFDE
  7505                           postdec2	equ	0xFDD
  7506                           fsr2h	equ	0xFDA
  7507                           fsr2l	equ	0xFD9
  7508                           status	equ	0xFD8
  7509                           
  7510 ;; *************** function _lcd_gotoxy *****************
  7511 ;; Defined at:
  7512 ;;		line 135 in file "../../../lib/lcd44780.c"
  7513 ;; Parameters:    Size  Location     Type
  7514 ;;  col             1    wreg     unsigned char 
  7515 ;;  row             1    7[COMRAM] unsigned char 
  7516 ;; Auto vars:     Size  Location     Type
  7517 ;;  col             1    8[COMRAM] unsigned char 
  7518 ;;  row_offsets     4    9[COMRAM] unsigned char [4]
  7519 ;; Return value:  Size  Location     Type
  7520 ;;		None               void
  7521 ;; Registers used:
  7522 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7523 ;; Tracked objects:
  7524 ;;		On entry : 0/0
  7525 ;;		On exit  : 0/0
  7526 ;;		Unchanged: 0/0
  7527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7528 ;;      Params:         1       0       0       0       0       0       0       0       0
  7529 ;;      Locals:         5       0       0       0       0       0       0       0       0
  7530 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7531 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7532 ;;Total ram usage:        6 bytes
  7533 ;; Hardware stack levels used:    1
  7534 ;; Hardware stack levels required when called:    4
  7535 ;; This function calls:
  7536 ;;		_lcd_command
  7537 ;; This function is called by:
  7538 ;;		_calibrate
  7539 ;;		_measure_freq
  7540 ;;		_measure_capacitance
  7541 ;;		_measure_inductance
  7542 ;;		_print_unit
  7543 ;;		_print_reading
  7544 ;;		_print_indicator
  7545 ;;		_main
  7546 ;; This function uses a non-reentrant model
  7547 ;;
  7548                           
  7549                           	psect	text40
  7550  0026EE                     __ptext40:
  7551                           	opt stack 0
  7552  0026EE                     _lcd_gotoxy:
  7553                           	opt stack 25
  7554                           
  7555                           ;incstack = 0
  7556                           ;lcd_gotoxy@col stored from wreg
  7557  0026EE  6E09               	movwf	lcd_gotoxy@col,c
  7558                           
  7559                           ;lcd44780.c: 137: uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
  7560  0026F0  C0F3  F00A         	movff	lcd_gotoxy@F6470,lcd_gotoxy@row_offsets
  7561  0026F4  C0F4  F00B         	movff	lcd_gotoxy@F6470+1,lcd_gotoxy@row_offsets+1
  7562  0026F8  C0F5  F00C         	movff	lcd_gotoxy@F6470+2,lcd_gotoxy@row_offsets+2
  7563  0026FC  C0F6  F00D         	movff	lcd_gotoxy@F6470+3,lcd_gotoxy@row_offsets+3
  7564                           
  7565                           ;lcd44780.c: 146: if(LCD_lines == 1) {
  7566  002700  0100               	movlb	0	; () banked
  7567  002702  05D1               	decf	_LCD_lines& (0+255),w,b
  7568  002704  E106               	bnz	l3040
  7569                           
  7570                           ; BSR set to: 0
  7571                           ;lcd44780.c: 147: row_offsets[1] = 0x14;
  7572  002706  0E14               	movlw	20
  7573  002708  6E0B               	movwf	lcd_gotoxy@row_offsets+1,c
  7574                           
  7575                           ;lcd44780.c: 148: row_offsets[2] = 0x28;
  7576  00270A  0E28               	movlw	40
  7577  00270C  6E0C               	movwf	lcd_gotoxy@row_offsets+2,c
  7578                           
  7579                           ;lcd44780.c: 149: row_offsets[3] = 0x3C;
  7580  00270E  0E3C               	movlw	60
  7581  002710  6E0D               	movwf	lcd_gotoxy@row_offsets+3,c
  7582  002712                     l3040:
  7583                           
  7584                           ; BSR set to: 0
  7585                           ;lcd44780.c: 150: }
  7586                           ;lcd44780.c: 156: lcd_command(0x80 | (col + row_offsets[row]));
  7587  002712  5008               	movf	lcd_gotoxy@row,w,c
  7588  002714  0F0A               	addlw	low lcd_gotoxy@row_offsets
  7589  002716  6ED9               	movwf	fsr2l,c
  7590  002718  6ADA               	clrf	fsr2h,c
  7591  00271A  50DF               	movf	indf2,w,c
  7592  00271C  2409               	addwf	lcd_gotoxy@col,w,c
  7593  00271E  0980               	iorlw	128
  7594  002720  EFF2  F014         	goto	_lcd_command
  7595  002724                     __end_of_lcd_gotoxy:
  7596                           	opt stack 0
  7597                           tblptru	equ	0xFF8
  7598                           tblptrh	equ	0xFF7
  7599                           tblptrl	equ	0xFF6
  7600                           tablat	equ	0xFF5
  7601                           prodl	equ	0xFF3
  7602                           intcon	equ	0xFF2
  7603                           intcon2	equ	0xFF1
  7604                           postinc0	equ	0xFEE
  7605                           wreg	equ	0xFE8
  7606                           postdec1	equ	0xFE5
  7607                           fsr1l	equ	0xFE1
  7608                           indf2	equ	0xFDF
  7609                           postinc2	equ	0xFDE
  7610                           postdec2	equ	0xFDD
  7611                           fsr2h	equ	0xFDA
  7612                           fsr2l	equ	0xFD9
  7613                           status	equ	0xFD8
  7614                           
  7615 ;; *************** function _format_number *****************
  7616 ;; Defined at:
  7617 ;;		line 15 in file "../../../lib/format.c"
  7618 ;; Parameters:    Size  Location     Type
  7619 ;;  n               2   10[COMRAM] unsigned int 
  7620 ;;  base            1   12[COMRAM] unsigned char 
  7621 ;;  pad             1   13[COMRAM] char 
  7622 ;; Auto vars:     Size  Location     Type
  7623 ;;  buf            32   16[COMRAM] unsigned char [32]
  7624 ;;  i               1   52[COMRAM] char 
  7625 ;;  di              1   51[COMRAM] unsigned char 
  7626 ;;  padchar         1   50[COMRAM] unsigned char 
  7627 ;; Return value:  Size  Location     Type
  7628 ;;		None               void
  7629 ;; Registers used:
  7630 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7631 ;; Tracked objects:
  7632 ;;		On entry : 0/0
  7633 ;;		On exit  : 0/0
  7634 ;;		Unchanged: 0/0
  7635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7636 ;;      Params:         4       0       0       0       0       0       0       0       0
  7637 ;;      Locals:        37       0       0       0       0       0       0       0       0
  7638 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7639 ;;      Totals:        43       0       0       0       0       0       0       0       0
  7640 ;;Total ram usage:       43 bytes
  7641 ;; Hardware stack levels used:    1
  7642 ;; Hardware stack levels required when called:    2
  7643 ;; This function calls:
  7644 ;;		___lwdiv
  7645 ;;		___lwmod
  7646 ;;		_buffer_putch
  7647 ;; This function is called by:
  7648 ;;		_format_xint32
  7649 ;;		_measure_freq
  7650 ;;		_print_reading
  7651 ;; This function uses a non-reentrant model
  7652 ;;
  7653                           
  7654                           	psect	text41
  7655  0020CA                     __ptext41:
  7656                           	opt stack 0
  7657  0020CA                     _format_number:
  7658                           	opt stack 26
  7659                           
  7660                           ;format.c: 16: char buf[8 * sizeof(long)];
  7661                           ;format.c: 17: uint8_t di;
  7662                           ;format.c: 18: int8_t i = 0;
  7663                           
  7664                           ;incstack = 0
  7665  0020CA  6A35               	clrf	format_number@i,c
  7666                           
  7667                           ;format.c: 19: char padchar = ' ';
  7668  0020CC  0E20               	movlw	32
  7669  0020CE  6E33               	movwf	format_number@padchar,c
  7670                           
  7671                           ;format.c: 21: if(pad < 0) {
  7672  0020D0  AE0E               	btfss	format_number@pad,7,c
  7673  0020D2  D003               	goto	l2964
  7674                           
  7675                           ;format.c: 22: pad = -pad;
  7676  0020D4  6C0E               	negf	format_number@pad,c
  7677                           
  7678                           ;format.c: 23: padchar = '0';
  7679  0020D6  0E30               	movlw	48
  7680  0020D8  6E33               	movwf	format_number@padchar,c
  7681  0020DA                     l2964:
  7682                           
  7683                           ;format.c: 35: di = n % base;
  7684  0020DA  C00B  F004         	movff	format_number@n,___lwmod@dividend
  7685  0020DE  C00C  F005         	movff	format_number@n+1,___lwmod@dividend+1
  7686  0020E2  C00D  F006         	movff	format_number@base,___lwmod@divisor
  7687  0020E6  6A07               	clrf	___lwmod@divisor+1,c
  7688  0020E8  EC3B  F013         	call	___lwmod	;wreg free
  7689  0020EC  5004               	movf	?___lwmod,w,c
  7690  0020EE  6E34               	movwf	format_number@di,c
  7691                           
  7692                           ;format.c: 36: buf[i++] = (di < 10 ? (uint8_t)'0' + di : (uint8_t)'A' + di - 10);
  7693  0020F0  0E09               	movlw	9
  7694  0020F2  6434               	cpfsgt	format_number@di,c
  7695  0020F4  D002               	goto	l2970
  7696  0020F6  0E37               	movlw	55
  7697  0020F8  D001               	goto	L4
  7698  0020FA                     l2970:
  7699  0020FA  0E30               	movlw	48
  7700  0020FC                     L4:
  7701  0020FC  2434               	addwf	format_number@di,w,c
  7702  0020FE  6E31               	movwf	_format_number$68,c
  7703  002100  6A32               	clrf	_format_number$68+1,c
  7704  002102  0E00               	movlw	0
  7705  002104  2232               	addwfc	_format_number$68+1,f,c
  7706  002106  5035               	movf	format_number@i,w,c
  7707  002108  0F11               	addlw	low format_number@buf
  7708  00210A  6ED9               	movwf	fsr2l,c
  7709  00210C  6ADA               	clrf	fsr2h,c
  7710  00210E  C031  FFDF         	movff	_format_number$68,indf2
  7711  002112  2A35               	incf	format_number@i,f,c
  7712                           
  7713                           ;format.c: 38: n /= base;
  7714  002114  C00B  F004         	movff	format_number@n,___lwdiv@dividend
  7715  002118  C00C  F005         	movff	format_number@n+1,___lwdiv@dividend+1
  7716  00211C  C00D  F006         	movff	format_number@base,___lwdiv@divisor
  7717  002120  6A07               	clrf	___lwdiv@divisor+1,c
  7718  002122  ECAB  F012         	call	___lwdiv	;wreg free
  7719  002126  C004  F00B         	movff	?___lwdiv,format_number@n
  7720  00212A  C005  F00C         	movff	?___lwdiv+1,format_number@n+1
  7721                           
  7722                           ;format.c: 39: } while(n > 0);
  7723  00212E  500B               	movf	format_number@n,w,c
  7724  002130  100C               	iorwf	format_number@n+1,w,c
  7725  002132  E004               	bz	l2982
  7726  002134  D7D2               	goto	l2964
  7727  002136                     l2980:
  7728  002136  5033               	movf	format_number@padchar,w,c
  7729  002138  ECD0  F012         	call	_buffer_putch
  7730  00213C                     l2982:
  7731  00213C  060E               	decf	format_number@pad,f,c
  7732  00213E  280E               	incf	format_number@pad,w,c
  7733  002140  6E0F               	movwf	??_format_number& (0+255),c
  7734  002142  5035               	movf	format_number@i,w,c
  7735  002144  0A80               	xorlw	128
  7736  002146  6E10               	movwf	(??_format_number+1)& (0+255),c
  7737  002148  500F               	movf	??_format_number,w,c
  7738  00214A  0A80               	xorlw	128
  7739  00214C  5C10               	subwf	(??_format_number+1)& (0+255),w,c
  7740  00214E  E3F3               	bnc	l2980
  7741  002150                     l2984:
  7742                           
  7743                           ;format.c: 43: for(; i > 0; i--) {
  7744  002150  5035               	movf	format_number@i,w,c
  7745  002152  0A80               	xorlw	128
  7746  002154  0F7F               	addlw	-129
  7747  002156  A0D8               	btfss	status,0,c
  7748  002158  0012               	return	
  7749                           
  7750                           ;format.c: 44: buffer_putch((char)buf[(int16_t)i - 1]);
  7751  00215A  C035  F00F         	movff	format_number@i,??_format_number
  7752  00215E  060F               	decf	??_format_number,f,c
  7753  002160  500F               	movf	??_format_number,w,c
  7754  002162  0F11               	addlw	low format_number@buf
  7755  002164  6ED9               	movwf	fsr2l,c
  7756  002166  6ADA               	clrf	fsr2h,c
  7757  002168  50DF               	movf	indf2,w,c
  7758  00216A  ECD0  F012         	call	_buffer_putch
  7759                           
  7760                           ; BSR set to: 0
  7761  00216E  0635               	decf	format_number@i,f,c
  7762  002170  D7EF               	goto	l2984
  7763  002172                     __end_of_format_number:
  7764                           	opt stack 0
  7765                           tblptru	equ	0xFF8
  7766                           tblptrh	equ	0xFF7
  7767                           tblptrl	equ	0xFF6
  7768                           tablat	equ	0xFF5
  7769                           prodl	equ	0xFF3
  7770                           intcon	equ	0xFF2
  7771                           intcon2	equ	0xFF1
  7772                           postinc0	equ	0xFEE
  7773                           wreg	equ	0xFE8
  7774                           postdec1	equ	0xFE5
  7775                           fsr1l	equ	0xFE1
  7776                           indf2	equ	0xFDF
  7777                           postinc2	equ	0xFDE
  7778                           postdec2	equ	0xFDD
  7779                           fsr2h	equ	0xFDA
  7780                           fsr2l	equ	0xFD9
  7781                           status	equ	0xFD8
  7782                           
  7783 ;; *************** function ___lwmod *****************
  7784 ;; Defined at:
  7785 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lwmod.c"
  7786 ;; Parameters:    Size  Location     Type
  7787 ;;  dividend        2    3[COMRAM] unsigned int 
  7788 ;;  divisor         2    5[COMRAM] unsigned int 
  7789 ;; Auto vars:     Size  Location     Type
  7790 ;;  counter         1    7[COMRAM] unsigned char 
  7791 ;; Return value:  Size  Location     Type
  7792 ;;                  2    3[COMRAM] unsigned int 
  7793 ;; Registers used:
  7794 ;;		wreg, status,2, status,0
  7795 ;; Tracked objects:
  7796 ;;		On entry : 0/0
  7797 ;;		On exit  : 0/0
  7798 ;;		Unchanged: 0/0
  7799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7800 ;;      Params:         4       0       0       0       0       0       0       0       0
  7801 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7802 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7803 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7804 ;;Total ram usage:        5 bytes
  7805 ;; Hardware stack levels used:    1
  7806 ;; Hardware stack levels required when called:    1
  7807 ;; This function calls:
  7808 ;;		Nothing
  7809 ;; This function is called by:
  7810 ;;		_format_number
  7811 ;;		_print_reading
  7812 ;; This function uses a non-reentrant model
  7813 ;;
  7814                           
  7815                           	psect	text42
  7816  002676                     __ptext42:
  7817                           	opt stack 0
  7818  002676                     ___lwmod:
  7819                           	opt stack 26
  7820                           
  7821                           ;incstack = 0
  7822  002676  5006               	movf	___lwmod@divisor,w,c
  7823  002678  1007               	iorwf	___lwmod@divisor+1,w,c
  7824  00267A  E017               	bz	l1143
  7825  00267C  0E01               	movlw	1
  7826  00267E  6E08               	movwf	___lwmod@counter,c
  7827  002680  D004               	goto	l2894
  7828  002682                     l2892:
  7829  002682  90D8               	bcf	status,0,c
  7830  002684  3606               	rlcf	___lwmod@divisor,f,c
  7831  002686  3607               	rlcf	___lwmod@divisor+1,f,c
  7832  002688  2A08               	incf	___lwmod@counter,f,c
  7833  00268A                     l2894:
  7834  00268A  AE07               	btfss	___lwmod@divisor+1,7,c
  7835  00268C  D7FA               	goto	l2892
  7836  00268E                     l2896:
  7837  00268E  5006               	movf	___lwmod@divisor,w,c
  7838  002690  5C04               	subwf	___lwmod@dividend,w,c
  7839  002692  5007               	movf	___lwmod@divisor+1,w,c
  7840  002694  5805               	subwfb	___lwmod@dividend+1,w,c
  7841  002696  E304               	bnc	l2900
  7842  002698  5006               	movf	___lwmod@divisor,w,c
  7843  00269A  5E04               	subwf	___lwmod@dividend,f,c
  7844  00269C  5007               	movf	___lwmod@divisor+1,w,c
  7845  00269E  5A05               	subwfb	___lwmod@dividend+1,f,c
  7846  0026A0                     l2900:
  7847  0026A0  90D8               	bcf	status,0,c
  7848  0026A2  3207               	rrcf	___lwmod@divisor+1,f,c
  7849  0026A4  3206               	rrcf	___lwmod@divisor,f,c
  7850  0026A6  2E08               	decfsz	___lwmod@counter,f,c
  7851  0026A8  D7F2               	goto	l2896
  7852  0026AA                     l1143:
  7853  0026AA  C004  F004         	movff	___lwmod@dividend,?___lwmod
  7854  0026AE  C005  F005         	movff	___lwmod@dividend+1,?___lwmod+1
  7855  0026B2  0012               	return		;funcret
  7856  0026B4                     __end_of___lwmod:
  7857                           	opt stack 0
  7858                           tblptru	equ	0xFF8
  7859                           tblptrh	equ	0xFF7
  7860                           tblptrl	equ	0xFF6
  7861                           tablat	equ	0xFF5
  7862                           prodl	equ	0xFF3
  7863                           intcon	equ	0xFF2
  7864                           intcon2	equ	0xFF1
  7865                           postinc0	equ	0xFEE
  7866                           wreg	equ	0xFE8
  7867                           postdec1	equ	0xFE5
  7868                           fsr1l	equ	0xFE1
  7869                           indf2	equ	0xFDF
  7870                           postinc2	equ	0xFDE
  7871                           postdec2	equ	0xFDD
  7872                           fsr2h	equ	0xFDA
  7873                           fsr2l	equ	0xFD9
  7874                           status	equ	0xFD8
  7875                           
  7876 ;; *************** function ___lwdiv *****************
  7877 ;; Defined at:
  7878 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lwdiv.c"
  7879 ;; Parameters:    Size  Location     Type
  7880 ;;  dividend        2    3[COMRAM] unsigned int 
  7881 ;;  divisor         2    5[COMRAM] unsigned int 
  7882 ;; Auto vars:     Size  Location     Type
  7883 ;;  quotient        2    7[COMRAM] unsigned int 
  7884 ;;  counter         1    9[COMRAM] unsigned char 
  7885 ;; Return value:  Size  Location     Type
  7886 ;;                  2    3[COMRAM] unsigned int 
  7887 ;; Registers used:
  7888 ;;		wreg, status,2, status,0
  7889 ;; Tracked objects:
  7890 ;;		On entry : 0/0
  7891 ;;		On exit  : 0/0
  7892 ;;		Unchanged: 0/0
  7893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7894 ;;      Params:         4       0       0       0       0       0       0       0       0
  7895 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7896 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7897 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7898 ;;Total ram usage:        7 bytes
  7899 ;; Hardware stack levels used:    1
  7900 ;; Hardware stack levels required when called:    1
  7901 ;; This function calls:
  7902 ;;		Nothing
  7903 ;; This function is called by:
  7904 ;;		_format_number
  7905 ;;		_print_reading
  7906 ;; This function uses a non-reentrant model
  7907 ;;
  7908                           
  7909                           	psect	text43
  7910  002556                     __ptext43:
  7911                           	opt stack 0
  7912  002556                     ___lwdiv:
  7913                           	opt stack 26
  7914                           
  7915                           ;incstack = 0
  7916  002556  6A08               	clrf	___lwdiv@quotient,c
  7917  002558  6A09               	clrf	___lwdiv@quotient+1,c
  7918  00255A  5006               	movf	___lwdiv@divisor,w,c
  7919  00255C  1007               	iorwf	___lwdiv@divisor+1,w,c
  7920  00255E  E01B               	bz	l1133
  7921  002560  0E01               	movlw	1
  7922  002562  6E0A               	movwf	___lwdiv@counter,c
  7923  002564  D004               	goto	l2874
  7924  002566                     l2872:
  7925  002566  90D8               	bcf	status,0,c
  7926  002568  3606               	rlcf	___lwdiv@divisor,f,c
  7927  00256A  3607               	rlcf	___lwdiv@divisor+1,f,c
  7928  00256C  2A0A               	incf	___lwdiv@counter,f,c
  7929  00256E                     l2874:
  7930  00256E  AE07               	btfss	___lwdiv@divisor+1,7,c
  7931  002570  D7FA               	goto	l2872
  7932  002572                     l2876:
  7933  002572  90D8               	bcf	status,0,c
  7934  002574  3608               	rlcf	___lwdiv@quotient,f,c
  7935  002576  3609               	rlcf	___lwdiv@quotient+1,f,c
  7936  002578  5006               	movf	___lwdiv@divisor,w,c
  7937  00257A  5C04               	subwf	___lwdiv@dividend,w,c
  7938  00257C  5007               	movf	___lwdiv@divisor+1,w,c
  7939  00257E  5805               	subwfb	___lwdiv@dividend+1,w,c
  7940  002580  E305               	bnc	l2884
  7941  002582  5006               	movf	___lwdiv@divisor,w,c
  7942  002584  5E04               	subwf	___lwdiv@dividend,f,c
  7943  002586  5007               	movf	___lwdiv@divisor+1,w,c
  7944  002588  5A05               	subwfb	___lwdiv@dividend+1,f,c
  7945  00258A  8008               	bsf	___lwdiv@quotient,0,c
  7946  00258C                     l2884:
  7947  00258C  90D8               	bcf	status,0,c
  7948  00258E  3207               	rrcf	___lwdiv@divisor+1,f,c
  7949  002590  3206               	rrcf	___lwdiv@divisor,f,c
  7950  002592  2E0A               	decfsz	___lwdiv@counter,f,c
  7951  002594  D7EE               	goto	l2876
  7952  002596                     l1133:
  7953  002596  C008  F004         	movff	___lwdiv@quotient,?___lwdiv
  7954  00259A  C009  F005         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7955  00259E  0012               	return		;funcret
  7956  0025A0                     __end_of___lwdiv:
  7957                           	opt stack 0
  7958                           tblptru	equ	0xFF8
  7959                           tblptrh	equ	0xFF7
  7960                           tblptrl	equ	0xFF6
  7961                           tablat	equ	0xFF5
  7962                           prodl	equ	0xFF3
  7963                           intcon	equ	0xFF2
  7964                           intcon2	equ	0xFF1
  7965                           postinc0	equ	0xFEE
  7966                           wreg	equ	0xFE8
  7967                           postdec1	equ	0xFE5
  7968                           fsr1l	equ	0xFE1
  7969                           indf2	equ	0xFDF
  7970                           postinc2	equ	0xFDE
  7971                           postdec2	equ	0xFDD
  7972                           fsr2h	equ	0xFDA
  7973                           fsr2l	equ	0xFD9
  7974                           status	equ	0xFD8
  7975                           
  7976 ;; *************** function _buffer_puts *****************
  7977 ;; Defined at:
  7978 ;;		line 57 in file "../../../lib/buffer.c"
  7979 ;; Parameters:    Size  Location     Type
  7980 ;;  x               1    wreg     PTR const unsigned char 
  7981 ;;		 -> STR_5(6), 
  7982 ;; Auto vars:     Size  Location     Type
  7983 ;;  x               1    6[COMRAM] PTR const unsigned char 
  7984 ;;		 -> STR_5(6), 
  7985 ;; Return value:  Size  Location     Type
  7986 ;;                  1    wreg      unsigned char 
  7987 ;; Registers used:
  7988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7989 ;; Tracked objects:
  7990 ;;		On entry : F/0
  7991 ;;		On exit  : F/0
  7992 ;;		Unchanged: 0/0
  7993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7994 ;;      Params:         0       0       0       0       0       0       0       0       0
  7995 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7996 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7997 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7998 ;;Total ram usage:        1 bytes
  7999 ;; Hardware stack levels used:    1
  8000 ;; Hardware stack levels required when called:    2
  8001 ;; This function calls:
  8002 ;;		_buffer_putch
  8003 ;; This function is called by:
  8004 ;;		_measure_freq
  8005 ;; This function uses a non-reentrant model
  8006 ;;
  8007                           
  8008                           	psect	text44
  8009  00295C                     __ptext44:
  8010                           	opt stack 0
  8011  00295C                     _buffer_puts:
  8012                           	opt stack 26
  8013                           
  8014                           ;incstack = 0
  8015                           ;buffer_puts@x stored from wreg
  8016  00295C  6E07               	movwf	buffer_puts@x,c
  8017                           
  8018                           ; BSR set to: 0
  8019                           ;buffer.c: 58: while(*x) {
  8020  00295E  D004               	goto	l2952
  8021  002960                     l2948:
  8022                           
  8023                           ; BSR set to: 0
  8024                           ;buffer.c: 59: buffer_putch(*x);
  8025  002960  D807               	call	PL40	;call to abstracted procedure
  8026  002962  ECD0  F012         	call	_buffer_putch
  8027                           
  8028                           ; BSR set to: 0
  8029                           ;buffer.c: 60: ++x;
  8030  002966  2A07               	incf	buffer_puts@x,f,c
  8031  002968                     l2952:
  8032                           
  8033                           ; BSR set to: 0
  8034  002968  D803               	call	PL40	;call to abstracted procedure
  8035  00296A  B4D8               	btfsc	status,2,c
  8036                           
  8037                           ; BSR set to: 0
  8038  00296C  0012               	return		;funcret
  8039  00296E  D7F8               	goto	l2948
  8040  002970                     __end_of_buffer_puts:
  8041                           	opt stack 0
  8042  002970                     PL40:
  8043                           	opt stack 26
  8044  002970  C007  FFF6         	movff	buffer_puts@x,tblptrl
  8045  002974                     	if	0	;There is only one active tblptr byte
  8046  002974                     	endif
  8047  002974                     	if	0	;tblptru may be non-zero
  8048  002974                     	endif
  8049  002974                     	if	0	;tblptru may be non-zero
  8050  002974                     	endif
  8051  002974  0008               	tblrd		*
  8052  002976  50F5               	movf	tablat,w,c
  8053  002978  0012               	return	
  8054  00297A                     __end_ofPL40:
  8055                           	opt stack 0
  8056                           tblptru	equ	0xFF8
  8057                           tblptrh	equ	0xFF7
  8058                           tblptrl	equ	0xFF6
  8059                           tablat	equ	0xFF5
  8060                           prodl	equ	0xFF3
  8061                           intcon	equ	0xFF2
  8062                           intcon2	equ	0xFF1
  8063                           postinc0	equ	0xFEE
  8064                           wreg	equ	0xFE8
  8065                           postdec1	equ	0xFE5
  8066                           fsr1l	equ	0xFE1
  8067                           indf2	equ	0xFDF
  8068                           postinc2	equ	0xFDE
  8069                           postdec2	equ	0xFDD
  8070                           fsr2h	equ	0xFDA
  8071                           fsr2l	equ	0xFD9
  8072                           status	equ	0xFD8
  8073                           
  8074 ;; *************** function _buffer_putch *****************
  8075 ;; Defined at:
  8076 ;;		line 30 in file "../../../lib/buffer.c"
  8077 ;; Parameters:    Size  Location     Type
  8078 ;;  ch              1    wreg     unsigned char 
  8079 ;; Auto vars:     Size  Location     Type
  8080 ;;  ch              1    5[COMRAM] unsigned char 
  8081 ;; Return value:  Size  Location     Type
  8082 ;;                  1    wreg      unsigned char 
  8083 ;; Registers used:
  8084 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8085 ;; Tracked objects:
  8086 ;;		On entry : 0/0
  8087 ;;		On exit  : F/0
  8088 ;;		Unchanged: 0/0
  8089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8090 ;;      Params:         0       0       0       0       0       0       0       0       0
  8091 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8092 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8093 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8094 ;;Total ram usage:        3 bytes
  8095 ;; Hardware stack levels used:    1
  8096 ;; Hardware stack levels required when called:    1
  8097 ;; This function calls:
  8098 ;;		Nothing
  8099 ;; This function is called by:
  8100 ;;		_buffer_puts
  8101 ;;		_format_number
  8102 ;;		_format_xint32
  8103 ;;		_format_double
  8104 ;; This function uses a non-reentrant model
  8105 ;;
  8106                           
  8107                           	psect	text45
  8108  0025A0                     __ptext45:
  8109                           	opt stack 0
  8110  0025A0                     _buffer_putch:
  8111                           	opt stack 26
  8112                           
  8113                           ; BSR set to: 0
  8114                           ;incstack = 0
  8115                           ;buffer_putch@ch stored from wreg
  8116  0025A0  6E06               	movwf	buffer_putch@ch,c
  8117                           
  8118                           ;buffer.c: 31: if(16 - buffer.n <= 0)
  8119  0025A2  0E10               	movlw	16
  8120  0025A4  6E04               	movwf	??_buffer_putch& (0+255),c
  8121  0025A6  6A05               	clrf	(??_buffer_putch+1)& (0+255),c
  8122  0025A8  0100               	movlb	0	; () banked
  8123  0025AA  39E6               	swapf	(_buffer+16)& (0+255),w,b
  8124  0025AC  0B0F               	andlw	15
  8125  0025AE  5E04               	subwf	??_buffer_putch,f,c
  8126  0025B0  0E00               	movlw	0
  8127  0025B2  5A05               	subwfb	??_buffer_putch+1,f,c
  8128  0025B4  BE05               	btfsc	??_buffer_putch+1,7,c
  8129  0025B6  0C00               	retlw	0
  8130  0025B8  5005               	movf	??_buffer_putch+1,w,c
  8131  0025BA  E103               	bnz	l2828
  8132  0025BC  0404               	decf	??_buffer_putch,w,c
  8133  0025BE  A0D8               	btfss	status,0,c
  8134  0025C0  0012               	return	
  8135  0025C2                     l2828:
  8136                           
  8137                           ; BSR set to: 0
  8138                           ;buffer.c: 33: buffer.x[buffer.n] = ch;
  8139  0025C2  39E6               	swapf	(_buffer+16)& (0+255),w,b
  8140  0025C4  0B0F               	andlw	15
  8141  0025C6  6E04               	movwf	??_buffer_putch& (0+255),c
  8142  0025C8  5004               	movf	??_buffer_putch,w,c
  8143  0025CA  0FD6               	addlw	low _buffer
  8144  0025CC  6ED9               	movwf	fsr2l,c
  8145  0025CE  6ADA               	clrf	fsr2h,c
  8146  0025D0  C006  FFDF         	movff	buffer_putch@ch,indf2
  8147                           
  8148                           ; BSR set to: 0
  8149                           ;buffer.c: 34: buffer.n++;
  8150  0025D4  39E6               	swapf	(_buffer+16)& (0+255),w,b
  8151  0025D6  0B0F               	andlw	15
  8152  0025D8  6E04               	movwf	??_buffer_putch& (0+255),c
  8153  0025DA  2A04               	incf	??_buffer_putch,f,c
  8154  0025DC  3A04               	swapf	??_buffer_putch& (0+255),f,c
  8155  0025DE  51E6               	movf	(_buffer+16)& (0+255),w,b
  8156  0025E0  1804               	xorwf	??_buffer_putch& (0+255),w,c
  8157  0025E2  0B0F               	andlw	-241
  8158  0025E4  1804               	xorwf	??_buffer_putch& (0+255),w,c
  8159  0025E6  6FE6               	movwf	(_buffer+16)& (0+255),b
  8160                           
  8161                           ; BSR set to: 0
  8162  0025E8  0012               	return		;funcret
  8163  0025EA                     __end_of_buffer_putch:
  8164                           	opt stack 0
  8165                           tblptru	equ	0xFF8
  8166                           tblptrh	equ	0xFF7
  8167                           tblptrl	equ	0xFF6
  8168                           tablat	equ	0xFF5
  8169                           prodl	equ	0xFF3
  8170                           intcon	equ	0xFF2
  8171                           intcon2	equ	0xFF1
  8172                           postinc0	equ	0xFEE
  8173                           wreg	equ	0xFE8
  8174                           postdec1	equ	0xFE5
  8175                           fsr1l	equ	0xFE1
  8176                           indf2	equ	0xFDF
  8177                           postinc2	equ	0xFDE
  8178                           postdec2	equ	0xFDD
  8179                           fsr2h	equ	0xFDA
  8180                           fsr2l	equ	0xFD9
  8181                           status	equ	0xFD8
  8182                           
  8183 ;; *************** function _buffer_init *****************
  8184 ;; Defined at:
  8185 ;;		line 10 in file "../../../lib/buffer.c"
  8186 ;; Parameters:    Size  Location     Type
  8187 ;;		None
  8188 ;; Auto vars:     Size  Location     Type
  8189 ;;		None
  8190 ;; Return value:  Size  Location     Type
  8191 ;;		None               void
  8192 ;; Registers used:
  8193 ;;		wreg, status,2
  8194 ;; Tracked objects:
  8195 ;;		On entry : 0/0
  8196 ;;		On exit  : F/0
  8197 ;;		Unchanged: 0/0
  8198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8199 ;;      Params:         0       0       0       0       0       0       0       0       0
  8200 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8201 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8202 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8203 ;;Total ram usage:        0 bytes
  8204 ;; Hardware stack levels used:    1
  8205 ;; Hardware stack levels required when called:    1
  8206 ;; This function calls:
  8207 ;;		Nothing
  8208 ;; This function is called by:
  8209 ;;		_measure_freq
  8210 ;; This function uses a non-reentrant model
  8211 ;;
  8212                           
  8213                           	psect	text46
  8214  0029D8                     __ptext46:
  8215                           	opt stack 0
  8216  0029D8                     _buffer_init:
  8217                           	opt stack 27
  8218                           
  8219                           ;buffer.c: 11: buffer.p = 0;
  8220                           
  8221                           ; BSR set to: 0
  8222                           ;incstack = 0
  8223  0029D8  0EF0               	movlw	-16
  8224  0029DA  0100               	movlb	0	; () banked
  8225  0029DC  17E6               	andwf	(_buffer+16)& (0+255),f,b
  8226                           
  8227                           ;buffer.c: 12: buffer.n = 0;
  8228  0029DE  0E0F               	movlw	-241
  8229  0029E0  17E6               	andwf	(_buffer+16)& (0+255),f,b
  8230                           
  8231                           ; BSR set to: 0
  8232  0029E2  0C0F               	retlw	15	;funcret
  8233  0029E4                     __end_of_buffer_init:
  8234                           	opt stack 0
  8235                           tblptru	equ	0xFF8
  8236                           tblptrh	equ	0xFF7
  8237                           tblptrl	equ	0xFF6
  8238                           tablat	equ	0xFF5
  8239                           prodl	equ	0xFF3
  8240                           intcon	equ	0xFF2
  8241                           intcon2	equ	0xFF1
  8242                           postinc0	equ	0xFEE
  8243                           wreg	equ	0xFE8
  8244                           postdec1	equ	0xFE5
  8245                           fsr1l	equ	0xFE1
  8246                           indf2	equ	0xFDF
  8247                           postinc2	equ	0xFDE
  8248                           postdec2	equ	0xFDD
  8249                           fsr2h	equ	0xFDA
  8250                           fsr2l	equ	0xFD9
  8251                           status	equ	0xFD8
  8252                           
  8253 ;; *************** function _lcd_clear *****************
  8254 ;; Defined at:
  8255 ;;		line 287 in file "../../../lib/lcd44780.c"
  8256 ;; Parameters:    Size  Location     Type
  8257 ;;		None
  8258 ;; Auto vars:     Size  Location     Type
  8259 ;;		None
  8260 ;; Return value:  Size  Location     Type
  8261 ;;		None               void
  8262 ;; Registers used:
  8263 ;;		wreg, status,2, status,0, cstack
  8264 ;; Tracked objects:
  8265 ;;		On entry : 0/0
  8266 ;;		On exit  : 0/0
  8267 ;;		Unchanged: 0/0
  8268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8269 ;;      Params:         0       0       0       0       0       0       0       0       0
  8270 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8271 ;;      Temps:          1       0       0       0       0       0       0       0       0
  8272 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8273 ;;Total ram usage:        1 bytes
  8274 ;; Hardware stack levels used:    1
  8275 ;; Hardware stack levels required when called:    4
  8276 ;; This function calls:
  8277 ;;		_lcd_command
  8278 ;; This function is called by:
  8279 ;;		_calibrate
  8280 ;;		_main
  8281 ;; This function uses a non-reentrant model
  8282 ;;
  8283                           
  8284                           	psect	text47
  8285  0029B0                     __ptext47:
  8286                           	opt stack 0
  8287  0029B0                     _lcd_clear:
  8288                           	opt stack 26
  8289                           
  8290                           ;lcd44780.c: 288: lcd_command(0x01);
  8291                           
  8292                           ; BSR set to: 0
  8293                           ;incstack = 0
  8294  0029B0  0E01               	movlw	1
  8295  0029B2  ECF2  F014         	call	_lcd_command
  8296                           
  8297                           ;lcd44780.c: 289: _delay((unsigned long)((2)*(20000000/4000.0)));
  8298  0029B6  0E0D               	movlw	13
  8299  0029B8  6E08               	movwf	??_lcd_clear& (0+255),c
  8300  0029BA  0EFC               	movlw	252
  8301  0029BC                     u3737:
  8302  0029BC  2EE8               	decfsz	wreg,f,c
  8303  0029BE  D7FE               	goto	u3737
  8304  0029C0  2E08               	decfsz	??_lcd_clear& (0+255),f,c
  8305  0029C2  D7FC               	goto	u3737
  8306  0029C4  0012               	return		;funcret
  8307  0029C6                     __end_of_lcd_clear:
  8308                           	opt stack 0
  8309                           tblptru	equ	0xFF8
  8310                           tblptrh	equ	0xFF7
  8311                           tblptrl	equ	0xFF6
  8312                           tablat	equ	0xFF5
  8313                           prodl	equ	0xFF3
  8314                           intcon	equ	0xFF2
  8315                           intcon2	equ	0xFF1
  8316                           postinc0	equ	0xFEE
  8317                           wreg	equ	0xFE8
  8318                           postdec1	equ	0xFE5
  8319                           fsr1l	equ	0xFE1
  8320                           indf2	equ	0xFDF
  8321                           postinc2	equ	0xFDE
  8322                           postdec2	equ	0xFDD
  8323                           fsr2h	equ	0xFDA
  8324                           fsr2l	equ	0xFD9
  8325                           status	equ	0xFD8
  8326                           
  8327 ;; *************** function _lcd_command *****************
  8328 ;; Defined at:
  8329 ;;		line 127 in file "../../../lib/lcd44780.c"
  8330 ;; Parameters:    Size  Location     Type
  8331 ;;  value           1    wreg     unsigned char 
  8332 ;; Auto vars:     Size  Location     Type
  8333 ;;  value           1    6[COMRAM] unsigned char 
  8334 ;; Return value:  Size  Location     Type
  8335 ;;		None               void
  8336 ;; Registers used:
  8337 ;;		wreg, status,2, status,0, cstack
  8338 ;; Tracked objects:
  8339 ;;		On entry : 0/0
  8340 ;;		On exit  : 0/0
  8341 ;;		Unchanged: 0/0
  8342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8343 ;;      Params:         0       0       0       0       0       0       0       0       0
  8344 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8345 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8346 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8347 ;;Total ram usage:        1 bytes
  8348 ;; Hardware stack levels used:    1
  8349 ;; Hardware stack levels required when called:    3
  8350 ;; This function calls:
  8351 ;;		_lcd_send
  8352 ;; This function is called by:
  8353 ;;		_lcd_gotoxy
  8354 ;;		_lcd_clear
  8355 ;;		_lcd_begin
  8356 ;; This function uses a non-reentrant model
  8357 ;;
  8358                           
  8359                           	psect	text48
  8360  0029E4                     __ptext48:
  8361                           	opt stack 0
  8362  0029E4                     _lcd_command:
  8363                           	opt stack 25
  8364                           
  8365                           ;incstack = 0
  8366                           ;lcd_command@value stored from wreg
  8367  0029E4  6E07               	movwf	lcd_command@value,c
  8368                           
  8369                           ;lcd44780.c: 128: lcd_send(value, 0);
  8370  0029E6  0E00               	movlw	0
  8371  0029E8  6E05               	movwf	lcd_send@mode,c
  8372  0029EA  5007               	movf	lcd_command@value,w,c
  8373  0029EC  EFCB  F014         	goto	_lcd_send
  8374  0029F0                     __end_of_lcd_command:
  8375                           	opt stack 0
  8376                           tblptru	equ	0xFF8
  8377                           tblptrh	equ	0xFF7
  8378                           tblptrl	equ	0xFF6
  8379                           tablat	equ	0xFF5
  8380                           prodl	equ	0xFF3
  8381                           intcon	equ	0xFF2
  8382                           intcon2	equ	0xFF1
  8383                           postinc0	equ	0xFEE
  8384                           wreg	equ	0xFE8
  8385                           postdec1	equ	0xFE5
  8386                           fsr1l	equ	0xFE1
  8387                           indf2	equ	0xFDF
  8388                           postinc2	equ	0xFDE
  8389                           postdec2	equ	0xFDD
  8390                           fsr2h	equ	0xFDA
  8391                           fsr2l	equ	0xFD9
  8392                           status	equ	0xFD8
  8393                           
  8394 ;; *************** function _lcd_send *****************
  8395 ;; Defined at:
  8396 ;;		line 103 in file "../../../lib/lcd44780.c"
  8397 ;; Parameters:    Size  Location     Type
  8398 ;;  value           1    wreg     unsigned char 
  8399 ;;  mode            1    4[COMRAM] unsigned char 
  8400 ;; Auto vars:     Size  Location     Type
  8401 ;;  value           1    5[COMRAM] unsigned char 
  8402 ;; Return value:  Size  Location     Type
  8403 ;;		None               void
  8404 ;; Registers used:
  8405 ;;		wreg, status,2, status,0, cstack
  8406 ;; Tracked objects:
  8407 ;;		On entry : 0/0
  8408 ;;		On exit  : 0/0
  8409 ;;		Unchanged: 0/0
  8410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8411 ;;      Params:         1       0       0       0       0       0       0       0       0
  8412 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8413 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8414 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8415 ;;Total ram usage:        2 bytes
  8416 ;; Hardware stack levels used:    1
  8417 ;; Hardware stack levels required when called:    2
  8418 ;; This function calls:
  8419 ;;		_lcd_write4bits
  8420 ;; This function is called by:
  8421 ;;		_lcd_command
  8422 ;;		_lcd_puts
  8423 ;;		_calibrate
  8424 ;;		_output_putch
  8425 ;; This function uses a non-reentrant model
  8426 ;;
  8427                           
  8428                           	psect	text49
  8429  002996                     __ptext49:
  8430                           	opt stack 0
  8431  002996                     _lcd_send:
  8432                           	opt stack 26
  8433                           
  8434                           ;incstack = 0
  8435                           ;lcd_send@value stored from wreg
  8436  002996  6E06               	movwf	lcd_send@value,c
  8437                           
  8438                           ;lcd44780.c: 104: if(mode) {
  8439  002998  5005               	movf	lcd_send@mode,w,c
  8440  00299A  E002               	bz	l2708
  8441                           
  8442                           ;lcd44780.c: 105: LATB |= 0b0100;
  8443  00299C  848A               	bsf	3978,2,c	;volatile
  8444                           
  8445                           ;lcd44780.c: 106: } else {
  8446  00299E  D001               	goto	l2710
  8447  0029A0                     l2708:
  8448                           
  8449                           ;lcd44780.c: 107: LATB &= ~0b0100;
  8450  0029A0  948A               	bcf	3978,2,c	;volatile
  8451  0029A2                     l2710:
  8452                           
  8453                           ;lcd44780.c: 108: }
  8454                           ;lcd44780.c: 115: {
  8455                           ;lcd44780.c: 116: lcd_write4bits(value >> 4);
  8456  0029A2  3806               	swapf	lcd_send@value,w,c
  8457  0029A4  0B0F               	andlw	15
  8458  0029A6  EC7E  F014         	call	_lcd_write4bits
  8459                           
  8460                           ;lcd44780.c: 117: lcd_write4bits(value);
  8461  0029AA  5006               	movf	lcd_send@value,w,c
  8462  0029AC  EF7E  F014         	goto	_lcd_write4bits
  8463  0029B0                     __end_of_lcd_send:
  8464                           	opt stack 0
  8465                           tblptru	equ	0xFF8
  8466                           tblptrh	equ	0xFF7
  8467                           tblptrl	equ	0xFF6
  8468                           tablat	equ	0xFF5
  8469                           prodl	equ	0xFF3
  8470                           intcon	equ	0xFF2
  8471                           intcon2	equ	0xFF1
  8472                           postinc0	equ	0xFEE
  8473                           wreg	equ	0xFE8
  8474                           postdec1	equ	0xFE5
  8475                           fsr1l	equ	0xFE1
  8476                           indf2	equ	0xFDF
  8477                           postinc2	equ	0xFDE
  8478                           postdec2	equ	0xFDD
  8479                           fsr2h	equ	0xFDA
  8480                           fsr2l	equ	0xFD9
  8481                           status	equ	0xFD8
  8482                           
  8483 ;; *************** function _lcd_write4bits *****************
  8484 ;; Defined at:
  8485 ;;		line 34 in file "../../../lib/lcd44780.c"
  8486 ;; Parameters:    Size  Location     Type
  8487 ;;  value           1    wreg     unsigned char 
  8488 ;; Auto vars:     Size  Location     Type
  8489 ;;  value           1    3[COMRAM] unsigned char 
  8490 ;; Return value:  Size  Location     Type
  8491 ;;		None               void
  8492 ;; Registers used:
  8493 ;;		wreg, status,2, status,0
  8494 ;; Tracked objects:
  8495 ;;		On entry : 0/0
  8496 ;;		On exit  : 0/0
  8497 ;;		Unchanged: 0/0
  8498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8499 ;;      Params:         0       0       0       0       0       0       0       0       0
  8500 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8501 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8502 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8503 ;;Total ram usage:        1 bytes
  8504 ;; Hardware stack levels used:    1
  8505 ;; Hardware stack levels required when called:    1
  8506 ;; This function calls:
  8507 ;;		Nothing
  8508 ;; This function is called by:
  8509 ;;		_lcd_send
  8510 ;;		_lcd_begin
  8511 ;; This function uses a non-reentrant model
  8512 ;;
  8513                           
  8514                           	psect	text50
  8515  0028FC                     __ptext50:
  8516                           	opt stack 0
  8517  0028FC                     _lcd_write4bits:
  8518                           	opt stack 26
  8519                           
  8520                           ;incstack = 0
  8521                           ;lcd_write4bits@value stored from wreg
  8522  0028FC  6E04               	movwf	lcd_write4bits@value,c
  8523                           
  8524                           ;lcd44780.c: 39: LATB &= 0b00001111;
  8525  0028FE  0E0F               	movlw	15
  8526  002900  168A               	andwf	3978,f,c	;volatile
  8527                           
  8528                           ;lcd44780.c: 40: LATB |= value << 4;
  8529  002902  3804               	swapf	lcd_write4bits@value,w,c
  8530  002904  0BF0               	andlw	240
  8531  002906  128A               	iorwf	3978,f,c	;volatile
  8532                           
  8533                           ;lcd44780.c: 55: LATB |= 0b1000; _delay((unsigned long)((4)*(20000000/4000000.0))); LATB
      +                           &= ~0b1000; _delay((unsigned long)((100)*(20000000/4000000.0)));;
  8534  002908  868A               	bsf	3978,3,c	;volatile
  8535  00290A  0E06               	movlw	6
  8536  00290C                     u3747:
  8537  00290C  2EE8               	decfsz	wreg,f,c
  8538  00290E  D7FE               	goto	u3747
  8539  002910  D000               	nop2		;nop
  8540  002912  968A               	bcf	3978,3,c	;volatile
  8541  002914  0EA6               	movlw	166
  8542  002916                     u3757:
  8543  002916  2EE8               	decfsz	wreg,f,c
  8544  002918  D7FE               	goto	u3757
  8545  00291A  D000               	nop2		;nop
  8546  00291C  0012               	return		;funcret
  8547  00291E                     __end_of_lcd_write4bits:
  8548                           	opt stack 0
  8549                           tblptru	equ	0xFF8
  8550                           tblptrh	equ	0xFF7
  8551                           tblptrl	equ	0xFF6
  8552                           tablat	equ	0xFF5
  8553                           prodl	equ	0xFF3
  8554                           intcon	equ	0xFF2
  8555                           intcon2	equ	0xFF1
  8556                           postinc0	equ	0xFEE
  8557                           wreg	equ	0xFE8
  8558                           postdec1	equ	0xFE5
  8559                           fsr1l	equ	0xFE1
  8560                           indf2	equ	0xFDF
  8561                           postinc2	equ	0xFDE
  8562                           postdec2	equ	0xFDD
  8563                           fsr2h	equ	0xFDA
  8564                           fsr2l	equ	0xFD9
  8565                           status	equ	0xFD8
  8566                           
  8567 ;; *************** function _delay10ms *****************
  8568 ;; Defined at:
  8569 ;;		line 58 in file "../../../LC-meter.c"
  8570 ;; Parameters:    Size  Location     Type
  8571 ;;  period_10ms     1    wreg     unsigned char 
  8572 ;; Auto vars:     Size  Location     Type
  8573 ;;  period_10ms     1    0[COMRAM] unsigned char 
  8574 ;; Return value:  Size  Location     Type
  8575 ;;		None               void
  8576 ;; Registers used:
  8577 ;;		wreg
  8578 ;; Tracked objects:
  8579 ;;		On entry : 0/0
  8580 ;;		On exit  : 0/0
  8581 ;;		Unchanged: 0/0
  8582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8583 ;;      Params:         0       0       0       0       0       0       0       0       0
  8584 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8585 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8586 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8587 ;;Total ram usage:        0 bytes
  8588 ;; Hardware stack levels used:    1
  8589 ;; Hardware stack levels required when called:    1
  8590 ;; This function calls:
  8591 ;;		Nothing
  8592 ;; This function is called by:
  8593 ;;		_calibrate
  8594 ;;		_main
  8595 ;; This function uses a non-reentrant model
  8596 ;;
  8597                           
  8598                           	psect	text51
  8599  0029F6                     __ptext51:
  8600                           	opt stack 0
  8601  0029F6                     _delay10ms:
  8602                           	opt stack 29
  8603                           
  8604                           ;incstack = 0
  8605  0029F6  0012               	return		;funcret
  8606  0029F8                     __end_of_delay10ms:
  8607                           	opt stack 0
  8608                           tblptru	equ	0xFF8
  8609                           tblptrh	equ	0xFF7
  8610                           tblptrl	equ	0xFF6
  8611                           tablat	equ	0xFF5
  8612                           prodl	equ	0xFF3
  8613                           intcon	equ	0xFF2
  8614                           intcon2	equ	0xFF1
  8615                           postinc0	equ	0xFEE
  8616                           wreg	equ	0xFE8
  8617                           postdec1	equ	0xFE5
  8618                           fsr1l	equ	0xFE1
  8619                           indf2	equ	0xFDF
  8620                           postinc2	equ	0xFDE
  8621                           postdec2	equ	0xFDD
  8622                           fsr2h	equ	0xFDA
  8623                           fsr2l	equ	0xFD9
  8624                           status	equ	0xFD8
  8625                           
  8626 ;; *************** function ___lwtofl *****************
  8627 ;; Defined at:
  8628 ;;		line 28 in file "/opt/microchip/xc8/v1.34/sources/common/lwtofl.c"
  8629 ;; Parameters:    Size  Location     Type
  8630 ;;  c               2   58[COMRAM] unsigned int 
  8631 ;; Auto vars:     Size  Location     Type
  8632 ;;		None
  8633 ;; Return value:  Size  Location     Type
  8634 ;;                  4   58[COMRAM] unsigned int 
  8635 ;; Registers used:
  8636 ;;		wreg, status,2, status,0, cstack
  8637 ;; Tracked objects:
  8638 ;;		On entry : 0/0
  8639 ;;		On exit  : 0/0
  8640 ;;		Unchanged: 0/0
  8641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8642 ;;      Params:         4       0       0       0       0       0       0       0       0
  8643 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8644 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8645 ;;      Totals:         4       0       0       0       0       0       0       0       0
  8646 ;;Total ram usage:        4 bytes
  8647 ;; Hardware stack levels used:    1
  8648 ;; Hardware stack levels required when called:    2
  8649 ;; This function calls:
  8650 ;;		___flpack
  8651 ;; This function is called by:
  8652 ;;		_calibrate
  8653 ;;		_measure_capacitance
  8654 ;;		_measure_inductance
  8655 ;; This function uses a non-reentrant model
  8656 ;;
  8657                           
  8658                           	psect	text52
  8659  002834                     __ptext52:
  8660                           	opt stack 0
  8661  002834                     ___lwtofl:
  8662                           	opt stack 27
  8663                           
  8664                           ;incstack = 0
  8665  002834  C03B  F004         	movff	___lwtofl@c,___flpack@arg
  8666  002838  C03C  F005         	movff	___lwtofl@c+1,___flpack@arg+1
  8667  00283C  6A06               	clrf	___flpack@arg+2,c
  8668  00283E  6A07               	clrf	___flpack@arg+3,c
  8669  002840  0E96               	movlw	150
  8670  002842  6E08               	movwf	___flpack@exp,c
  8671  002844  0E00               	movlw	0
  8672  002846  6E09               	movwf	___flpack@sign,c
  8673  002848  EC57  F00F         	call	___flpack	;wreg free
  8674  00284C  C004  F03B         	movff	?___flpack,?___lwtofl
  8675  002850  C005  F03C         	movff	?___flpack+1,?___lwtofl+1
  8676  002854  C006  F03D         	movff	?___flpack+2,?___lwtofl+2
  8677  002858  C007  F03E         	movff	?___flpack+3,?___lwtofl+3
  8678  00285C  0012               	return		;funcret
  8679  00285E                     __end_of___lwtofl:
  8680                           	opt stack 0
  8681                           tblptru	equ	0xFF8
  8682                           tblptrh	equ	0xFF7
  8683                           tblptrl	equ	0xFF6
  8684                           tablat	equ	0xFF5
  8685                           prodl	equ	0xFF3
  8686                           intcon	equ	0xFF2
  8687                           intcon2	equ	0xFF1
  8688                           postinc0	equ	0xFEE
  8689                           wreg	equ	0xFE8
  8690                           postdec1	equ	0xFE5
  8691                           fsr1l	equ	0xFE1
  8692                           indf2	equ	0xFDF
  8693                           postinc2	equ	0xFDE
  8694                           postdec2	equ	0xFDD
  8695                           fsr2h	equ	0xFDA
  8696                           fsr2l	equ	0xFD9
  8697                           status	equ	0xFD8
  8698                           
  8699 ;; *************** function ___flpack *****************
  8700 ;; Defined at:
  8701 ;;		line 63 in file "/opt/microchip/xc8/v1.34/sources/common/double.c"
  8702 ;; Parameters:    Size  Location     Type
  8703 ;;  arg             4    3[COMRAM] unsigned long 
  8704 ;;  exp             1    7[COMRAM] unsigned char 
  8705 ;;  sign            1    8[COMRAM] unsigned char 
  8706 ;; Auto vars:     Size  Location     Type
  8707 ;;		None
  8708 ;; Return value:  Size  Location     Type
  8709 ;;                  4    3[COMRAM] unsigned char 
  8710 ;; Registers used:
  8711 ;;		wreg, status,2, status,0
  8712 ;; Tracked objects:
  8713 ;;		On entry : 0/0
  8714 ;;		On exit  : 0/0
  8715 ;;		Unchanged: 0/0
  8716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8717 ;;      Params:         6       0       0       0       0       0       0       0       0
  8718 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8719 ;;      Temps:          4       0       0       0       0       0       0       0       0
  8720 ;;      Totals:        10       0       0       0       0       0       0       0       0
  8721 ;;Total ram usage:       10 bytes
  8722 ;; Hardware stack levels used:    1
  8723 ;; Hardware stack levels required when called:    1
  8724 ;; This function calls:
  8725 ;;		Nothing
  8726 ;; This function is called by:
  8727 ;;		___altofl
  8728 ;;		___awtofl
  8729 ;;		___fladd
  8730 ;;		___fldiv
  8731 ;;		___flmul
  8732 ;;		___lltofl
  8733 ;;		___lwtofl
  8734 ;; This function uses a non-reentrant model
  8735 ;;
  8736                           
  8737                           	psect	text53
  8738  001EAE                     __ptext53:
  8739                           	opt stack 0
  8740  001EAE                     ___flpack:
  8741                           	opt stack 27
  8742                           
  8743                           ;incstack = 0
  8744  001EAE  5008               	movf	___flpack@exp,w,c
  8745  001EB0  E005               	bz	l797
  8746  001EB2  5004               	movf	___flpack@arg,w,c
  8747  001EB4  1005               	iorwf	___flpack@arg+1,w,c
  8748  001EB6  1006               	iorwf	___flpack@arg+2,w,c
  8749  001EB8  1007               	iorwf	___flpack@arg+3,w,c
  8750  001EBA  E107               	bnz	l3626
  8751  001EBC                     l797:
  8752  001EBC  6A04               	clrf	?___flpack,c
  8753  001EBE  6A05               	clrf	?___flpack+1,c
  8754  001EC0  6A06               	clrf	?___flpack+2,c
  8755  001EC2  6A07               	clrf	?___flpack+3,c
  8756  001EC4  0012               	return	
  8757  001EC6                     l3624:
  8758  001EC6  2A08               	incf	___flpack@exp,f,c
  8759  001EC8  D84D               	call	PL38	;call to abstracted procedure
  8760  001ECA                     l3626:
  8761  001ECA  6A0A               	clrf	??___flpack& (0+255),c
  8762  001ECC  6A0B               	clrf	(??___flpack+1)& (0+255),c
  8763  001ECE  6A0C               	clrf	(??___flpack+2)& (0+255),c
  8764  001ED0  0EFE               	movlw	254
  8765  001ED2  1407               	andwf	___flpack@arg+3,w,c
  8766  001ED4  6E0D               	movwf	(??___flpack+3)& (0+255),c
  8767  001ED6  500A               	movf	??___flpack,w,c
  8768  001ED8  100B               	iorwf	??___flpack+1,w,c
  8769  001EDA  100C               	iorwf	??___flpack+2,w,c
  8770  001EDC  100D               	iorwf	??___flpack+3,w,c
  8771  001EDE  E008               	bz	l802
  8772  001EE0  D7F2               	goto	l3624
  8773  001EE2                     l3628:
  8774  001EE2  2A08               	incf	___flpack@exp,f,c
  8775  001EE4  2A04               	incf	___flpack@arg,f,c
  8776  001EE6  0E00               	movlw	0
  8777  001EE8  2205               	addwfc	___flpack@arg+1,f,c
  8778  001EEA  2206               	addwfc	___flpack@arg+2,f,c
  8779  001EEC  2207               	addwfc	___flpack@arg+3,f,c
  8780  001EEE  D83A               	call	PL38	;call to abstracted procedure
  8781  001EF0                     l802:
  8782  001EF0  6A0A               	clrf	??___flpack& (0+255),c
  8783  001EF2  6A0B               	clrf	(??___flpack+1)& (0+255),c
  8784  001EF4  6A0C               	clrf	(??___flpack+2)& (0+255),c
  8785  001EF6  5007               	movf	___flpack@arg+3,w,c
  8786  001EF8  6E0D               	movwf	(??___flpack+3)& (0+255),c
  8787  001EFA  500A               	movf	??___flpack,w,c
  8788  001EFC  100B               	iorwf	??___flpack+1,w,c
  8789  001EFE  100C               	iorwf	??___flpack+2,w,c
  8790  001F00  100D               	iorwf	??___flpack+3,w,c
  8791  001F02  E007               	bz	l3636
  8792  001F04  D7EE               	goto	l3628
  8793  001F06                     l3634:
  8794  001F06  0608               	decf	___flpack@exp,f,c
  8795  001F08  90D8               	bcf	status,0,c
  8796  001F0A  3604               	rlcf	___flpack@arg,f,c
  8797  001F0C  3605               	rlcf	___flpack@arg+1,f,c
  8798  001F0E  3606               	rlcf	___flpack@arg+2,f,c
  8799  001F10  3607               	rlcf	___flpack@arg+3,f,c
  8800  001F12                     l3636:
  8801  001F12  BE06               	btfsc	___flpack@arg+2,7,c
  8802  001F14  D003               	goto	l809
  8803  001F16  0E02               	movlw	2
  8804  001F18  6008               	cpfslt	___flpack@exp,c
  8805  001F1A  D7F5               	goto	l3634
  8806  001F1C                     l809:
  8807  001F1C  B008               	btfsc	___flpack@exp,0,c
  8808  001F1E  D002               	goto	l810
  8809  001F20  0E7F               	movlw	127
  8810  001F22  1606               	andwf	___flpack@arg+2,f,c
  8811  001F24                     l810:
  8812  001F24  90D8               	bcf	status,0,c
  8813  001F26  3208               	rrcf	___flpack@exp,f,c
  8814  001F28  C008  F00A         	movff	___flpack@exp,??___flpack
  8815  001F2C  6A0B               	clrf	(??___flpack+1)& (0+255),c
  8816  001F2E  6A0C               	clrf	(??___flpack+2)& (0+255),c
  8817  001F30  6A0D               	clrf	(??___flpack+3)& (0+255),c
  8818  001F32  C00A  F00D         	movff	??___flpack,??___flpack+3
  8819  001F36  6A0C               	clrf	??___flpack+2,c
  8820  001F38  6A0B               	clrf	??___flpack+1,c
  8821  001F3A  6A0A               	clrf	??___flpack,c
  8822  001F3C  500A               	movf	??___flpack,w,c
  8823  001F3E  1204               	iorwf	___flpack@arg,f,c
  8824  001F40  500B               	movf	??___flpack+1,w,c
  8825  001F42  1205               	iorwf	___flpack@arg+1,f,c
  8826  001F44  500C               	movf	??___flpack+2,w,c
  8827  001F46  1206               	iorwf	___flpack@arg+2,f,c
  8828  001F48  500D               	movf	??___flpack+3,w,c
  8829  001F4A  1207               	iorwf	___flpack@arg+3,f,c
  8830  001F4C  5009               	movf	___flpack@sign,w,c
  8831  001F4E  A4D8               	btfss	status,2,c
  8832  001F50  8E07               	bsf	___flpack@arg+3,7,c
  8833  001F52  C004  F004         	movff	___flpack@arg,?___flpack
  8834  001F56  C005  F005         	movff	___flpack@arg+1,?___flpack+1
  8835  001F5A  C006  F006         	movff	___flpack@arg+2,?___flpack+2
  8836  001F5E  C007  F007         	movff	___flpack@arg+3,?___flpack+3
  8837  001F62  0012               	return		;funcret
  8838  001F64                     __end_of___flpack:
  8839                           	opt stack 0
  8840  001F64                     PL38:
  8841                           	opt stack 27
  8842  001F64  90D8               	bcf	status,0,c
  8843  001F66  3207               	rrcf	___flpack@arg+3,f,c
  8844  001F68  3206               	rrcf	___flpack@arg+2,f,c
  8845  001F6A  3205               	rrcf	___flpack@arg+1,f,c
  8846  001F6C  3204               	rrcf	___flpack@arg,f,c
  8847  001F6E  0012               	return	
  8848  001F70                     __end_ofPL38:
  8849                           	opt stack 0
  8850                           tblptru	equ	0xFF8
  8851                           tblptrh	equ	0xFF7
  8852                           tblptrl	equ	0xFF6
  8853                           tablat	equ	0xFF5
  8854                           prodl	equ	0xFF3
  8855                           intcon	equ	0xFF2
  8856                           intcon2	equ	0xFF1
  8857                           postinc0	equ	0xFEE
  8858                           wreg	equ	0xFE8
  8859                           postdec1	equ	0xFE5
  8860                           fsr1l	equ	0xFE1
  8861                           indf2	equ	0xFDF
  8862                           postinc2	equ	0xFDE
  8863                           postdec2	equ	0xFDD
  8864                           fsr2h	equ	0xFDA
  8865                           fsr2l	equ	0xFD9
  8866                           status	equ	0xFD8
  8867                           
  8868 ;; *************** function _global_int *****************
  8869 ;; Defined at:
  8870 ;;		line 81 in file "../../../LC-meter.c"
  8871 ;; Parameters:    Size  Location     Type
  8872 ;;		None
  8873 ;; Auto vars:     Size  Location     Type
  8874 ;;		None
  8875 ;; Return value:  Size  Location     Type
  8876 ;;		None               void
  8877 ;; Registers used:
  8878 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8879 ;; Tracked objects:
  8880 ;;		On entry : 0/0
  8881 ;;		On exit  : 0/0
  8882 ;;		Unchanged: 0/0
  8883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8884 ;;      Params:         0       0       0       0       0       0       0       0       0
  8885 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8886 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8887 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8888 ;;Total ram usage:        3 bytes
  8889 ;; Hardware stack levels used:    1
  8890 ;; This function calls:
  8891 ;;		Nothing
  8892 ;; This function is called by:
  8893 ;;		Interrupt level 2
  8894 ;; This function uses a non-reentrant model
  8895 ;;
  8896                           
  8897                           	psect	intcode
  8898  000008                     __pintcode:
  8899                           	opt stack 0
  8900  000008                     _global_int:
  8901                           	opt stack 23
  8902                           
  8903                           ;incstack = 0
  8904  000008  CFD9 F002          	movff	fsr2l,??_global_int+1
  8905  00000C  CFDA F003          	movff	fsr2h,??_global_int+2
  8906                           
  8907                           ;LC-meter.c: 85: if(PIR1 & 0x02) {
  8908  000010  A29E               	btfss	3998,1,c	;volatile
  8909  000012  D02C               	goto	i2l3526
  8910                           
  8911                           ;LC-meter.c: 86: bres += 256;
  8912  000014  0100               	movlb	0	; () banked
  8913  000016  2BF0               	incf	(_bres+1)& (0+255),f,b	;volatile
  8914                           
  8915                           ;LC-meter.c: 87: if(bres >= ((unsigned long)((double)((20000000) / 4) / 1000))) {
  8916  000018  0E88               	movlw	136
  8917  00001A  5DEF               	subwf	_bres& (0+255),w,b	;volatile
  8918  00001C  0E13               	movlw	19
  8919  00001E  59F0               	subwfb	(_bres+1)& (0+255),w,b	;volatile
  8920  000020  E324               	bnc	i2l3524
  8921                           
  8922                           ; BSR set to: 0
  8923                           ;LC-meter.c: 88: bres -= ((unsigned long)((double)((20000000) / 4) / 1000));
  8924  000022  0E88               	movlw	136
  8925  000024  5FEF               	subwf	_bres& (0+255),f,b	;volatile
  8926  000026  0E13               	movlw	19
  8927  000028  5BF0               	subwfb	(_bres+1)& (0+255),f,b	;volatile
  8928                           
  8929                           ; BSR set to: 0
  8930                           ;LC-meter.c: 89: msecpart++;
  8931  00002A  4BF1               	infsnz	_msecpart& (0+255),f,b	;volatile
  8932  00002C  2BF2               	incf	(_msecpart+1)& (0+255),f,b	;volatile
  8933                           
  8934                           ; BSR set to: 0
  8935                           ;LC-meter.c: 90: LATC &= ~0b00000100; LATC |= (!!(msecpart >= 833)) << 2;;
  8936  00002E  948B               	bcf	3979,2,c	;volatile
  8937  000030  0E41               	movlw	65
  8938  000032  5DF1               	subwf	_msecpart& (0+255),w,b	;volatile
  8939  000034  0E03               	movlw	3
  8940  000036  59F2               	subwfb	(_msecpart+1)& (0+255),w,b	;volatile
  8941  000038  E303               	bnc	i2u262_40
  8942  00003A  6A01               	clrf	??_global_int& (0+255),c
  8943  00003C  2A01               	incf	??_global_int& (0+255),f,c
  8944  00003E  D001               	goto	i2u263_48
  8945  000040                     i2u262_40:
  8946  000040  6A01               	clrf	??_global_int& (0+255),c
  8947  000042                     i2u263_48:
  8948  000042  90D8               	bcf	status,0,c
  8949  000044  3601               	rlcf	??_global_int,f,c
  8950  000046  90D8               	bcf	status,0,c
  8951  000048  3401               	rlcf	??_global_int,w,c
  8952  00004A  128B               	iorwf	3979,f,c	;volatile
  8953                           
  8954                           ;LC-meter.c: 92: if(msecpart >= 1000) {
  8955  00004C  0EE8               	movlw	232
  8956  00004E  0100               	movlb	0	; () banked
  8957  000050  5DF1               	subwf	_msecpart& (0+255),w,b	;volatile
  8958  000052  0E03               	movlw	3
  8959  000054  59F2               	subwfb	(_msecpart+1)& (0+255),w,b	;volatile
  8960  000056  E309               	bnc	i2l3524
  8961                           
  8962                           ; BSR set to: 0
  8963                           ;LC-meter.c: 94: seconds++;
  8964  000058  2BC6               	incf	_seconds& (0+255),f,b	;volatile
  8965  00005A  0E00               	movlw	0
  8966  00005C  23C7               	addwfc	(_seconds+1)& (0+255),f,b	;volatile
  8967  00005E  23C8               	addwfc	(_seconds+2)& (0+255),f,b	;volatile
  8968  000060  23C9               	addwfc	(_seconds+3)& (0+255),f,b	;volatile
  8969                           
  8970                           ;LC-meter.c: 95: msecpart -= 1000;
  8971  000062  0EE8               	movlw	232
  8972  000064  5FF1               	subwf	_msecpart& (0+255),f,b	;volatile
  8973  000066  0E03               	movlw	3
  8974  000068  5BF2               	subwfb	(_msecpart+1)& (0+255),f,b	;volatile
  8975  00006A                     i2l3524:
  8976                           
  8977                           ; BSR set to: 0
  8978                           ;LC-meter.c: 96: }
  8979                           ;LC-meter.c: 97: }
  8980                           ;LC-meter.c: 99: PIR1 &= ~0b10;
  8981  00006A  929E               	bcf	3998,1,c	;volatile
  8982  00006C                     i2l3526:
  8983                           
  8984                           ;LC-meter.c: 100: }
  8985                           ;LC-meter.c: 102: if(RCIF) { rxfifo[rxiptr] = RCREG; ser_tmp = (rxiptr + 1) & ((uint8_t)
      +                          16 - 1); if(ser_tmp != rxoptr) rxiptr = ser_tmp; }; if(TXIF && TXIE) { TXREG = txfifo[tx
      +                          optr]; ++txoptr; txoptr &= ((uint8_t)16 - 1); if(txoptr == txiptr) { TXIE = 0; }; TXIF =
      +                           0; 
  8986  00006C  AA9E               	btfss	3998,5,c	;volatile
  8987  00006E  D011               	goto	i2l543
  8988  000070  0E00               	movlw	low _rxfifo
  8989  000072  0100               	movlb	0	; () banked
  8990  000074  25D3               	addwf	_rxiptr& (0+255),w,b	;volatile
  8991  000076  6ED9               	movwf	fsr2l,c
  8992  000078  6ADA               	clrf	fsr2h,c
  8993  00007A  0E01               	movlw	high _rxfifo
  8994  00007C  22DA               	addwfc	fsr2h,f,c
  8995  00007E  CFAE FFDF          	movff	4014,indf2	;volatile
  8996                           
  8997                           ; BSR set to: 0
  8998  000082  29D3               	incf	_rxiptr& (0+255),w,b	;volatile
  8999  000084  0B0F               	andlw	15
  9000  000086  6FD5               	movwf	_ser_tmp& (0+255),b
  9001                           
  9002                           ; BSR set to: 0
  9003  000088  51D4               	movf	_rxoptr& (0+255),w,b	;volatile
  9004  00008A  19D5               	xorwf	_ser_tmp& (0+255),w,b
  9005  00008C  A4D8               	btfss	status,2,c
  9006                           
  9007                           ; BSR set to: 0
  9008  00008E  C0D5  F0D3         	movff	_ser_tmp,_rxiptr	;volatile
  9009  000092                     i2l543:
  9010  000092  B89E               	btfsc	3998,4,c	;volatile
  9011  000094  A89D               	btfss	3997,4,c	;volatile
  9012  000096  D010               	goto	i2l547
  9013  000098  0E10               	movlw	low _txfifo
  9014  00009A  245C               	addwf	_txoptr,w,c	;volatile
  9015  00009C  6ED9               	movwf	fsr2l,c
  9016  00009E  6ADA               	clrf	fsr2h,c
  9017  0000A0  0E01               	movlw	high _txfifo
  9018  0000A2  22DA               	addwfc	fsr2h,f,c
  9019  0000A4  50DF               	movf	indf2,w,c
  9020  0000A6  6EAD               	movwf	4013,c	;volatile
  9021  0000A8  2A5C               	incf	_txoptr,f,c	;volatile
  9022  0000AA  0E0F               	movlw	15
  9023  0000AC  165C               	andwf	_txoptr,f,c	;volatile
  9024  0000AE  505B               	movf	_txiptr,w,c	;volatile
  9025  0000B0  185C               	xorwf	_txoptr,w,c	;volatile
  9026  0000B2  B4D8               	btfsc	status,2,c
  9027  0000B4  989D               	bcf	3997,4,c	;volatile
  9028  0000B6  989E               	bcf	3998,4,c	;volatile
  9029  0000B8                     i2l547:
  9030  0000B8  C003  FFDA         	movff	??_global_int+2,fsr2h
  9031  0000BC  C002  FFD9         	movff	??_global_int+1,fsr2l
  9032  0000C0  0011               	retfie		f
  9033  0000C2                     __end_of_global_int:
  9034                           	opt stack 0
  9035                           tblptru	equ	0xFF8
  9036                           tblptrh	equ	0xFF7
  9037                           tblptrl	equ	0xFF6
  9038                           tablat	equ	0xFF5
  9039                           prodl	equ	0xFF3
  9040                           intcon	equ	0xFF2
  9041                           intcon2	equ	0xFF1
  9042                           postinc0	equ	0xFEE
  9043                           wreg	equ	0xFE8
  9044                           postdec1	equ	0xFE5
  9045                           fsr1l	equ	0xFE1
  9046                           indf2	equ	0xFDF
  9047                           postinc2	equ	0xFDE
  9048                           postdec2	equ	0xFDD
  9049                           fsr2h	equ	0xFDA
  9050                           fsr2l	equ	0xFD9
  9051                           status	equ	0xFD8
  9052                           tblptru	equ	0xFF8
  9053                           tblptrh	equ	0xFF7
  9054                           tblptrl	equ	0xFF6
  9055                           tablat	equ	0xFF5
  9056                           prodl	equ	0xFF3
  9057                           intcon	equ	0xFF2
  9058                           intcon2	equ	0xFF1
  9059                           postinc0	equ	0xFEE
  9060                           wreg	equ	0xFE8
  9061                           postdec1	equ	0xFE5
  9062                           fsr1l	equ	0xFE1
  9063                           indf2	equ	0xFDF
  9064                           postinc2	equ	0xFDE
  9065                           postdec2	equ	0xFDD
  9066                           fsr2h	equ	0xFDA
  9067                           fsr2l	equ	0xFD9
  9068                           status	equ	0xFD8
  9069                           
  9070                           	psect	rparam
  9071  0000                     tblptru	equ	0xFF8
  9072                           tblptrh	equ	0xFF7
  9073                           tblptrl	equ	0xFF6
  9074                           tablat	equ	0xFF5
  9075                           prodl	equ	0xFF3
  9076                           intcon	equ	0xFF2
  9077                           intcon2	equ	0xFF1
  9078                           postinc0	equ	0xFEE
  9079                           wreg	equ	0xFE8
  9080                           postdec1	equ	0xFE5
  9081                           fsr1l	equ	0xFE1
  9082                           indf2	equ	0xFDF
  9083                           postinc2	equ	0xFDE
  9084                           postdec2	equ	0xFDD
  9085                           fsr2h	equ	0xFDA
  9086                           fsr2l	equ	0xFD9
  9087                           status	equ	0xFD8
  9088                           tblptru	equ	0xFF8
  9089                           tblptrh	equ	0xFF7
  9090                           tblptrl	equ	0xFF6
  9091                           tablat	equ	0xFF5
  9092                           prodl	equ	0xFF3
  9093                           intcon	equ	0xFF2
  9094                           intcon2	equ	0xFF1
  9095                           postinc0	equ	0xFEE
  9096                           wreg	equ	0xFE8
  9097                           postdec1	equ	0xFE5
  9098                           fsr1l	equ	0xFE1
  9099                           indf2	equ	0xFDF
  9100                           postinc2	equ	0xFDE
  9101                           postdec2	equ	0xFDD
  9102                           fsr2h	equ	0xFDA
  9103                           fsr2l	equ	0xFD9
  9104                           status	equ	0xFD8


Data Sizes:
    Strings     174
    Constant    76
    Data        5
    BSS         84
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     89      92
    BANK0           160     90     152
    BANK1           256      0      32
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(1) Largest target is 40
		 -> exp@coeff(CODE[40]), log@coeff(CODE[36]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(BANK0[2]), 

    main$403	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_31(CODE[16]), STR_30(CODE[16]), 

    put_str@s	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_15(CODE[13]), STR_6(CODE[10]), STR_3(CODE[15]), STR_1(CODE[12]), 

    print_unit@units	PTR const unsigned char [8] size(1) Largest target is 3
		 -> STR_23(CODE[3]), STR_22(CODE[3]), STR_21(CODE[3]), STR_20(CODE[3]), 
		 -> STR_19(CODE[3]), STR_18(CODE[3]), STR_17(CODE[3]), STR_16(CODE[2]), 

    ser_puts@s	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_37(CODE[3]), STR_32(CODE[3]), STR_31(CODE[16]), STR_30(CODE[16]), 
		 -> STR_28(CODE[3]), STR_24(CODE[3]), STR_14(CODE[3]), STR_13(CODE[5]), 
		 -> STR_12(CODE[3]), STR_11(CODE[8]), STR_10(CODE[6]), STR_9(CODE[6]), 
		 -> STR_8(CODE[6]), STR_7(CODE[5]), STR_4(CODE[3]), STR_2(CODE[3]), 

    lcd_puts@string	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_36(CODE[5]), STR_35(CODE[6]), STR_34(CODE[7]), STR_33(CODE[7]), 
		 -> STR_29(CODE[10]), STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[6]), 

    buffer_puts@x	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_5(CODE[6]), 


Critical Paths under _main in COMRAM

    _print_indicator->_lcd_gotoxy
    _measure_inductance->___fltol
    _measure_capacitance->___fltol
    _print_unit->_lcd_gotoxy
    _print_reading->_format_number
    _lcd_puts->_lcd_send
    _format_xint32->_format_number
    _format_double->___fltol
    _pow->___fltol
    _exp->___fltol
    _ldexp->_eval_poly
    _floor->___fltol
    ___fltol->_log10
    ___altofl->___fltol
    ___flsub->___fladd
    ___fldiv->___flpack
    ___lltofl->___flpack
    _log10->_log
    _log->_eval_poly
    _eval_poly->___fladd
    ___flmul->___fldiv
    ___fladd->___flmul
    ___awtofl->___flpack
    _lcd_begin->_lcd_command
    _calibrate->___lwtofl
    _put_str->_output_putch
    _output_putch->_lcd_send
    _measure_freq->_format_number
    _print_buffer->_ser_puts
    _ser_puts->_ser_putch
    _lcd_gotoxy->_lcd_command
    _format_number->___lwdiv
    _buffer_puts->_buffer_putch
    _lcd_clear->_lcd_command
    _lcd_command->_lcd_send
    _lcd_send->_lcd_write4bits
    ___lwtofl->_measure_freq

Critical Paths under _global_int in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_measure_capacitance
    _measure_inductance->___fltol
    _measure_capacitance->_format_double
    _format_double->_pow
    _pow->_exp
    _exp->_floor
    _floor->___altofl
    ___altofl->___fltol

Critical Paths under _global_int in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _global_int in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _global_int in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _global_int in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _global_int in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _global_int in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _global_int in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _global_int in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  382808
                                             88 BANK0      2     2      0
                          _calibrate
                          _delay10ms
                      _format_double
                          _lcd_begin
                          _lcd_clear
                         _lcd_gotoxy
                           _lcd_init
                           _lcd_puts
                _measure_capacitance
                 _measure_inductance
                    _print_indicator
                           _ser_init
                           _ser_puts
                        _timer0_init
                        _timer2_init
 ---------------------------------------------------------------------------------
 (1) _timer2_init                                          4     4      0      90
                                              3 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _timer0_init                                         12    12      0     297
                                              3 COMRAM    12    12      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _print_indicator                                      1     1      0    2406
                                             13 COMRAM     1     1      0
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (1) _measure_inductance                                  55    55      0   36901
                                              2 BANK0     43    43      0
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___lwtofl
                         _lcd_gotoxy
                       _measure_freq
                      _print_reading
                         _print_unit
                            _put_str
 ---------------------------------------------------------------------------------
 (1) _measure_capacitance                                 19    19      0  183661
                                             69 BANK0     19    19      0
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___lwtofl
                      _format_double
                      _format_xint32
                         _lcd_gotoxy
                       _measure_freq
                      _print_reading
                         _print_unit
                            _put_str
                          _ser_putch
                           _ser_puts
 ---------------------------------------------------------------------------------
 (2) _print_unit                                           3     3      0    2050
                                             13 COMRAM     2     2      0
                         _lcd_gotoxy
                           _ser_puts
 ---------------------------------------------------------------------------------
 (2) _print_reading                                        6     4      2    6020
                                             53 COMRAM     6     4      2
                            ___lwdiv
                            ___lwmod
                      _format_number
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (2) _lcd_puts                                             3     3      0     806
                                              6 COMRAM     3     3      0
                           _lcd_send
 ---------------------------------------------------------------------------------
 (2) _format_xint32                                        4     0      4    2920
                                             53 COMRAM     4     0      4
                       _buffer_putch
                      _format_number
 ---------------------------------------------------------------------------------
 (2) _format_double                                       20    16      4  143763
                                             49 BANK0     20    16      4
                           ___awtofl
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                       _buffer_putch
                              _floor
                              _log10
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                 21    13      8   80457
                                             28 BANK0     21    13      8
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___lltofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _exp                                                 11     7      4   43098
                                             17 BANK0     11     7      4
                           ___awtofl
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (5) _ldexp                                                8     2      6     354
                                             67 COMRAM     8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (5) _floor                                               10     6      4   10114
                                              7 BANK0     10     6      4
                           ___altofl
                            ___fladd
                            ___fldiv (ARG)
                             ___flge
                            ___fltol
                              _frexp
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     882
                                             81 COMRAM     8     4      4
                                              0 BANK0      2     2      0
                            ___fldiv (ARG)
                              _log10 (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                               8     0      8    1594
                                              3 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (6) ___altofl                                             5     1      4    2446
                                              2 BANK0      5     1      4
                           ___flpack
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    5179
                                             55 COMRAM     8     0      8
                           ___awtofl (ARG)
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4     204
                                              3 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             15     7      8    3931
                                             13 COMRAM    15     7      8
                           ___flpack
 ---------------------------------------------------------------------------------
 (4) ___lltofl                                             4     0      4    2344
                                             13 COMRAM     4     0      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (3) _log10                                                8     4      4   31773
                                             73 COMRAM     8     4      4
                            ___flmul
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  6     2      4   25256
                                             67 COMRAM     6     2      4
                           ___awtofl
                            ___fladd
                            ___flmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                7     2      5     436
                                              3 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           12     5      7   11199
                                             55 COMRAM    12     5      7
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             15     7      8    6342
                                             28 COMRAM    15     7      8
                           ___awtofl (ARG)
                            ___fldiv (ARG)
                           ___flpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             12     4      8    4213
                                             43 COMRAM    12     4      8
                           ___awtofl (ARG)
                            ___flmul (ARG)
                           ___flpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awtofl                                             9     5      4    2686
                                             13 COMRAM     5     1      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             3     3      0      46
                                              3 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcd_begin                                            3     2      1     685
                                              7 COMRAM     3     2      1
                        _lcd_command
                     _lcd_write4bits
 ---------------------------------------------------------------------------------
 (1) _calibrate                                            1     1      0   11479
                                             62 COMRAM     1     1      0
                           ___lwtofl
                          _delay10ms
                          _lcd_clear
                         _lcd_gotoxy
                           _lcd_send
                       _measure_freq
                            _put_str
                           _ser_puts
 ---------------------------------------------------------------------------------
 (2) _put_str                                              4     4      0     764
                                              7 COMRAM     4     4      0
                       _output_putch
 ---------------------------------------------------------------------------------
 (3) _output_putch                                         1     1      0     566
                                              6 COMRAM     1     1      0
                           _lcd_send
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _measure_freq                                         5     3      2    4906
                                             53 COMRAM     5     3      2
                        _buffer_init
                        _buffer_puts
                      _format_number
                         _lcd_gotoxy
                       _print_buffer
                     _timer0_read_ps
 ---------------------------------------------------------------------------------
 (3) _timer0_read_ps                                       7     5      2     114
                                              3 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (3) _print_buffer                                         2     2      0     540
                                              5 COMRAM     2     2      0
                          _ser_putch
                           _ser_puts
 ---------------------------------------------------------------------------------
 (1) _ser_puts                                             1     1      0     472
                                              4 COMRAM     1     1      0
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _ser_putch                                            1     1      0      22
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           6     5      1    1578
                                              7 COMRAM     6     5      1
                        _lcd_command
 ---------------------------------------------------------------------------------
 (3) _format_number                                       43    39      4    2535
                                             10 COMRAM    43    39      4
                            ___lwdiv
                            ___lwmod
                       _buffer_putch
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     451
                                              3 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     454
                                              3 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _buffer_puts                                          1     1      0      94
                                              6 COMRAM     1     1      0
                       _buffer_putch
 ---------------------------------------------------------------------------------
 (4) _buffer_putch                                         3     3      0      22
                                              3 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _buffer_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            1     1      0     522
                                              7 COMRAM     1     1      0
                        _lcd_command
 ---------------------------------------------------------------------------------
 (3) _lcd_command                                          1     1      0     522
                                              6 COMRAM     1     1      0
                           _lcd_send
 ---------------------------------------------------------------------------------
 (3) _lcd_send                                             2     1      1     500
                                              4 COMRAM     2     1      1
                     _lcd_write4bits
 ---------------------------------------------------------------------------------
 (4) _lcd_write4bits                                       1     1      0      22
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _delay10ms                                            1     1      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4    2669
                                             58 COMRAM     4     0      4
                           ___flpack
                       _measure_freq (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6    2248
                                              3 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _global_int                                           3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calibrate
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _buffer_init
         _buffer_puts
           _buffer_putch
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _print_buffer
           _ser_putch
           _ser_puts
             _ser_putch
         _timer0_read_ps
     _delay10ms
     _lcd_clear
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_send
       _lcd_write4bits
     _measure_freq
       _buffer_init
       _buffer_puts
         _buffer_putch
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _print_buffer
         _ser_putch
         _ser_puts
           _ser_putch
       _timer0_read_ps
     _put_str
       _output_putch
         _lcd_send
           _lcd_write4bits
         _ser_putch
     _ser_puts
       _ser_putch
   _delay10ms
   _format_double
     ___awtofl
       ___flpack
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     _buffer_putch
     _floor
       ___altofl
         ___flpack
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
       ___fladd
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___fldiv (ARG)
         ___flpack
       ___flge (ARG)
       ___fltol (ARG)
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       _frexp (ARG)
     _log10
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       _log
         ___awtofl
           ___flpack
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _frexp
     _pow
       ___flge
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       ___flneg
       ___fltol
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       ___lltofl
         ___flpack
       _exp
         ___awtofl
           ___flpack
         ___fldiv
           ___flpack
         ___flge
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         ___flsub
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _floor
           ___altofl
             ___flpack
             ___fltol (ARG)
               ___fldiv (ARG)
                 ___flpack
               _log10 (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _log
                   ___awtofl
                     ___flpack
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___fladd
                       ___awtofl (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                   _frexp
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flge (ARG)
           ___fltol (ARG)
             ___fldiv (ARG)
               ___flpack
             _log10 (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
           _frexp (ARG)
         _ldexp
           _eval_poly (ARG)
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
         _log (ARG)
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
       _log
         ___awtofl
           ___flpack
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _frexp
   _lcd_begin
     _lcd_command
       _lcd_send
         _lcd_write4bits
     _lcd_write4bits
   _lcd_clear
     _lcd_command
       _lcd_send
         _lcd_write4bits
   _lcd_gotoxy
     _lcd_command
       _lcd_send
         _lcd_write4bits
   _lcd_init
   _lcd_puts
     _lcd_send
       _lcd_write4bits
   _measure_capacitance
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _buffer_init
         _buffer_puts
           _buffer_putch
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _print_buffer
           _ser_putch
           _ser_puts
             _ser_putch
         _timer0_read_ps
     _format_double
       ___awtofl
         ___flpack
       ___fldiv
         ___flpack
       ___flge
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       ___flsub
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
       ___fltol
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       _buffer_putch
       _floor
         ___altofl
           ___flpack
           ___fltol (ARG)
             ___fldiv (ARG)
               ___flpack
             _log10 (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flge (ARG)
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
         _frexp (ARG)
       _log10
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
       _pow
         ___flge
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         ___fltol
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
         ___lltofl
           ___flpack
         _exp
           ___awtofl
             ___flpack
           ___fldiv
             ___flpack
           ___flge
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg
           ___flsub
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           ___fltol
             ___fldiv (ARG)
               ___flpack
             _log10 (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _floor
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 _log10 (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   _log
                     ___awtofl
                       ___flpack
                     ___fladd
                       ___awtofl (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     _eval_poly
                       ___fladd
                         ___awtofl (ARG)
                           ___flpack
                         ___flmul (ARG)
                           ___awtofl (ARG)
                             ___flpack
                           ___fldiv (ARG)
                             ___flpack
                           ___flpack (ARG)
                           _frexp (ARG)
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flmul
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                     _frexp
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flge (ARG)
             ___fltol (ARG)
               ___fldiv (ARG)
                 ___flpack
               _log10 (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _log
                   ___awtofl
                     ___flpack
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___fladd
                       ___awtofl (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                   _frexp
             _frexp (ARG)
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
           _log (ARG)
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     _format_xint32
       _buffer_putch
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _measure_freq
       _buffer_init
       _buffer_puts
         _buffer_putch
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _print_buffer
         _ser_putch
         _ser_puts
           _ser_putch
       _timer0_read_ps
     _print_reading
       ___lwdiv
       ___lwmod
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _lcd_puts
         _lcd_send
           _lcd_write4bits
     _print_unit
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _ser_puts
         _ser_putch
     _put_str
       _output_putch
         _lcd_send
           _lcd_write4bits
         _ser_putch
     _ser_putch
     _ser_puts
       _ser_putch
   _measure_inductance
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _buffer_init
         _buffer_puts
           _buffer_putch
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _print_buffer
           _ser_putch
           _ser_puts
             _ser_putch
         _timer0_read_ps
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _measure_freq
       _buffer_init
       _buffer_puts
         _buffer_putch
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _print_buffer
         _ser_putch
         _ser_puts
           _ser_putch
       _timer0_read_ps
     _print_reading
       ___lwdiv
       ___lwmod
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _lcd_puts
         _lcd_send
           _lcd_write4bits
     _print_unit
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _ser_puts
         _ser_putch
     _put_str
       _output_putch
         _lcd_send
           _lcd_write4bits
         _ser_putch
   _print_indicator
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_puts
       _lcd_send
         _lcd_write4bits
   _ser_init
   _ser_puts
     _ser_putch
   _timer0_init
   _timer2_init

 _global_int (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      20       8       12.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5A      98       5       95.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     59      5C       1       96.8%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     114       6        0.0%
DATA                 0      0     114       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Sep 26 08:23:08 2019

                ___altofl@sign 0066                   ___fldiv@cntr 001A                   ___fldiv@sign 001C  
                           PL2 0D26                             PL4 10BE                             PL6 10E0  
                           PL8 0D48                             _F1 00E7                             _F2 00BA  
                           _F3 00BE                   ___flpack@arg 0004                            PL10 1102  
                          PL20 112A                            PL12 17F8                            PL30 115E  
                          PL22 113C                            PL14 20B8                            PL40 2970  
                          PL32 27FA                            PL24 1924                            PL16 1E8E  
                          PL42 2952                            PL34 116E                            PL26 114E  
                          PL18 1118                            PL36 1EA0                            PL28 2824  
                          PL38 1F64                   ___flpack@exp 0008                            l210 2516  
                          l160 27CA                            l158 27C6                            l810 1F24  
                          l802 1EF0                            l901 1B74                            l557 1A2E  
                          l822 16FC                            l904 1C22                            l809 1F1C  
                          l833 1794                            l818 16D4                            l858 24EC  
                          l797 1EBC                            _GIE 007F97                 lcd_begin@lines 000A  
                          _RX9 007D5E                            _TX9 007D66                            _exp 117C  
                          _log 180C                            _pow 1398                            wreg 000FE8  
                 __CFG_FOSC$XT 000000             timer0_read_ps@prev 0008                   ___flmul@cntr 002A  
             _format_number$68 0031                   ___flmul@sign 002B         __end_of_lcd_write4bits 291E  
                ___flpack@sign 0009                   ___fltol@exp1 0061                           l1200 1230  
                         l1201 1386                           l1133 2596                           l1143 26AA  
                         l1175 1518                           l3040 2712                           l3120 281C  
                         l3200 1D2E                           l3116 2812                           l4012 1688  
                         l3044 27E6                           l4014 168E                           l3048 27F2  
                         l4112 0E98                           l3074 288A                           l3066 2532  
                         l3226 1DB2                           l3218 1D7A                           l2710 29A2  
                         l3078 289A                           l2622 2508                           l4134 1022  
                         l4142 1062                           l3510 2990                           l4056 1CF8  
                         l3192 1D20                           l2616 24D6                           l3280 2304  
                         l3272 22F0                           l3264 22DC                           l3256 22C8  
                         l2634 2354                           l4138 103E                           l3282 230A  
                         l3274 22F6                           l3266 22E2                           l3258 22CE  
                         l2708 29A0                           l2900 26A0                           l2716 28B0  
                         l3700 1762                           l2812 21DA                           l4164 094C  
                         l4174 0C86                           l4182 0CC8                           l3294 2328  
                         l4254 1A1E                           l4238 19F6                           l3624 1EC6  
                         l3712 17AA                           l3800 227C                           l2808 21CE  
                         l4184 0CCE                           l3296 232E                           l3288 231C  
                         l3634 1F06                           l3626 1ECA                           l2842 294A  
                         l3706 1782                           l3802 2288                           l4178 0CA4  
                         l4258 1A2A                           l3636 1F12                           l3628 1EE2  
                         l2828 25C2                           l3724 17CA                           l3708 178E  
                         l3732 1DFE                           l3900 181A                           l3804 228C  
                         l2838 2942                           l3822 1B7E                           l2952 2968  
                         l2872 2566                           l3760 1E4E                           l3736 1E12  
                         l3904 182E                           l3840 1F98                           l2784 292C  
                         l3808 22A0                           l2792 2186                           l3920 1198  
                         l2874 256E                           l2970 20FA                           l3674 170E  
                         l3658 2604                           l3826 1B9A                           l3930 11FE  
                         l2948 2960                           l2884 258C                           l2876 2572  
                         l2892 2682                           l2980 2136                           l2964 20DA  
                         l3668 16E6                           l3748 1E38                           l3860 1FE4  
                         l3852 1FB6                           l3836 1F84                           l2894 268A  
                         l2982 213C                           l3694 1748                           l2798 21B6  
                         l3950 1352                           l3926 11CC                           l2896 268E  
                         l2984 2150                           l3696 1754                           l3688 1728  
                         l3872 2640                           l3792 2264                           l3776 2220  
                         l3882 26C4                           l3698 175C                           l3890 20A0  
                         l3778 222A                           l3796 2274                           l3972 13E6  
                         ?_exp 0071                           ?_log 0044                           l3982 1470  
                         l3966 13CC                           l3888 203A                           l3978 1446  
                         l3996 155C                           ?_pow 007C                           STR_1 0889  
                         STR_2 08F8                           STR_3 086D                           STR_4 08F8  
                         STR_5 08CA                           STR_6 089F                           STR_7 08DA  
                         STR_8 08B8                           STR_9 08BE                           _BRGH 007D62  
                         _CREN 007D5C                           _LATB 000F8A                           _LATC 000F8B  
                         _CCal 00EB                           u3080 2248                           u3160 1B88  
                         u3085 223E                           _PIE1 000F9D                           u2480 277C  
                         u3370 143C                           u3607 1DA0                           u3617 1DD4  
                         u2498 277E                           u3707 1AD4                           u3627 1A52  
                         _PEIE 007F96                           u3717 1AE4                           u3637 1A64  
                         u3557 1D34                           u3727 1AF4                           u3647 1A74  
                         u3567 1D50                           u3737 29BC                           u3657 1A84  
                         u3577 1D62                           u3747 290C                           u3667 1A94  
                         u3587 1D6E                           _RCIF 007CF5                           u3757 2916  
                         u3677 1AA4                           u3597 1D88                           u3687 1AB4  
                         u3697 1AC4                           _PIR1 000F9E                           _TMR0 000FD6  
                         _TMR2 000FBC                           _SPEN 007D5F                           _TXIE 007CEC  
                         _TXIF 007CF4                           _TXEN 007D65                           _SYNC 007D64  
                __CFG_FCMEN$ON 000000                   __CFG_WRTB$ON 000000                   __CFG_WRTC$ON 000000  
                         _bres 00EF                           _main 1934                           _mode 00F7  
                         fsr2h 000FDA                           fsr1l 000FE1                           indf2 000FDF  
                         fsr2l 000FD9                           exp@x 0071                           log@x 0044  
        __size_of_output_putch 0012                           pow@x 007C                           pow@y 0080  
                         prodl 000FF3     __end_of_measure_inductance 0D26                           start 00C2  
          timer0_read_ps@count 0009                 ??_buffer_putch 0004                  __CFG_MCLRE$ON 000000  
                 ___param_bank 000010                _timer0_init$152 0004                _timer0_init$153 0006  
              _timer0_init$154 0008                _timer0_init$155 000A                _timer0_init$156 000C  
                 buffer_puts@x 0007            lcd_write4bits@value 0004                   lcd_send@mode 0005  
                        ??_exp 005A                          ??_log 0048                          ??_pow 005A  
                ___fltol@sign1 0060                __end_of___fladd 17F8                          ?_main 0001  
              __end_of___fldiv 2020                __end_of___flneg 293E                          STR_10 08C4  
                        STR_11 08A9                          STR_12 08F8                          STR_20 08E3  
                        STR_21 08EC                          STR_13 08D5                          STR_14 08F8  
                        STR_22 08E6                          STR_30 084D                          STR_23 08E9  
                        STR_15 087C                          STR_31 085D                          STR_32 08F8  
                        STR_24 08F8                          STR_25 08B2                          STR_17 08EF  
                        STR_33 08B1                          STR_18 08F5                          STR_26 08DF  
                        STR_27 08B4                          STR_19 08F2                          STR_28 08F8  
                        STR_36 08D0                          STR_29 0895                __end_of___flmul 1E8E  
              __end_of___flsub 2676                __end_of___fltol 22B2                          _T0CON 000FD5  
                        _T2CON 000FBA                __end_of___lwdiv 25A0                __end_of___lwmod 26B4  
                        i2l543 0092                          i2l547 00B8                          _RCREG 000FAE  
             lcd_begin@dotsize 0008                          _SPBRG 000FAF                          _PORTC 000F82  
                        _TRISA 000F92                          _TRISB 000F93                          _TRISC 000F94  
                        _TXREG 000FAD                 __CFG_EBTR0$OFF 000000                 __CFG_EBTR1$OFF 000000  
               __CFG_EBTR2$OFF 000000                  ___awtofl@sign 0012                   main@new_mode 00B9  
               __CFG_EBTR3$OFF 000000                  __CFG_WRTD$OFF 000000                          _log10 241A  
                        _blink 00CE                          _floor 1B42                          _ldexp 2172  
                        _frexp 2334                   _output_putch 29C6                ?_lcd_write4bits 0001  
                        _msecs 00C2                          tablat 000FF5                          pow@yi 008D  
              format_number@di 0034                          status 000FD8                __end_of_put_str 2824  
              ??_print_reading 0038                  print_buffer@i 0007                    exp@exponent 0079  
                  ldexp@newexp 0048                __initialization 2474                    log@exponent 0048  
                 __end_of_main 1A48               format_double@num 0091                  lcd_gotoxy@col 0009  
                lcd_gotoxy@row 0008                  ?_measure_freq 0036         __size_of_format_double 0188  
                       ??_main 005A                  lcd_send@value 0006            format_double@weight 009D  
                __activetblptr 000001         __size_of_format_number 00A8         __size_of_format_xint32 0034  
          lcd_init@fourbitmode 0004                         ?_log10 004A                         ?_floor 0067  
                       ?_ldexp 0044                         ?_frexp 0004               __end_of___altofl 2632  
             __end_of___flpack 1F64               __end_of___awtofl 26EE               __end_of___lltofl 27B4  
               __CFG_WDTEN$OFF 000000                         i2l3524 006A                         i2l3526 006C  
                       _INTCON 000FF2               __end_of___lwtofl 285E               __end_of_lcd_init 27E0  
         __size_of_lcd_command 000C               __end_of_lcd_send 29B0                         ___flge 24C0  
             __end_of_lcd_puts 27FA                      ??___fladd 0034                      ??___fldiv 0016  
                    ??___flneg 0008                 __CFG_STVREN$ON 000000                      ??___flmul 0025  
                    ??___flsub 0040                      ??___fltol 0056                   ?_timer0_init 0001  
         __size_of_buffer_init 000C                 ??_measure_freq 0038                      ??___lwdiv 0008  
                 ?_timer2_init 0001                      ??___lwmod 0008                         _buffer 00D6  
         __size_of_buffer_puts 0014                         clear_0 247A                         clear_1 2486  
                       log10@x 004A                         _rxfifo 0100                         _txfifo 0110  
                       _rxiptr 00D3                         _rxoptr 00D4                         floor@i 006B  
                       _txiptr 005B                         floor@x 0067                         _txoptr 005C  
             __end_of_ser_init 28FC               __end_of_ser_puts 2952             timer2_init@ps_mode 0007  
                 __mediumconst 0000                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8           __end_of_buffer_putch 25EA               format_number@buf 0011  
             format_number@pad 000E        _measure_inductance$1110 006A        _measure_inductance$1111 007B  
      _measure_inductance$1112 007F        _measure_inductance$1113 0083        _measure_inductance$1114 006E  
      _measure_inductance$1115 0072        _measure_inductance$1116 0076                      ??_put_str 0008  
                   ___fladd@f1 002C                     ___fladd@f2 0030                     ___flge@ff1 0004  
                   ___flge@ff2 0008               __end_ofexp@coeff 0829                  _format_double 152A  
             __end_oflog@coeff 084D                     ___altofl@c 0062                     ___fldiv@f1 000E  
                   ___fldiv@f2 0012                     ___fldiv@f3 0016                     __accesstop 0060  
      __end_of__initialization 24B2                __CFG_PBADEN$OFF 000000                     ___flneg@f1 0004  
                _format_number 20CA                  _format_xint32 2724                     ___flmul@f1 001D  
                   ___flmul@f2 0021                   eval_poly@res 0040                  ___rparam_used 000001  
                   ___flsub@f1 0038                     ___flsub@f2 003C                     ___fltol@f1 0052  
                   ___awtofl@c 000E         measure_capacitance@Cin 00B4   __size_of_measure_capacitance 0360  
       measure_capacitance@var 00B2          lcd_gotoxy@row_offsets 000A                 __pcstackCOMRAM 0001  
           __size_of_calibrate 00E2                   __pidataBANK0 29F0                     ___lltofl@c 000E  
           __size_of_delay10ms 0002                  __end_of_log10 2474                  __end_of_floor 1C34  
                __end_of_ldexp 2214                  __end_of_frexp 23AC                     __end_ofPL2 0D48  
                   __end_ofPL4 10E0                     __end_ofPL6 1102                     __end_ofPL8 0D5E  
                   ___lwtofl@c 003B                 buffer_putch@ch 0006             __size_of_lcd_begin 00D4  
           __size_of_lcd_clear 0016                        ??_log10 004E                        ??_floor 005A  
                      ??_ldexp 004A                        ??_frexp 0009                     _log10$1119 004E  
                   __pbssBANK0 00BA                     __pbssBANK1 0100                 ?_format_double 0091  
           __size_of_eval_poly 0098                 ?_format_number 000B                 ?_format_xint32 0036  
               print_unit@unit 0001       __size_of_print_indicator 001C                        ?___flge 0004  
                    ?___altofl 0062        __size_of_timer0_read_ps 004A                      ?___flpack 0004  
                    ?___awtofl 000E                      ?___lltofl 000E             _measure_inductance 08FC  
           __size_of_ser_putch 0028                      ?___lwtofl 003B               ??_lcd_write4bits 0004  
                      _INTCON2 000FF1                     _lcd_gotoxy 26EE            ?_measure_inductance 0001  
            __end_of_calibrate 1D16                      ?_lcd_init 0001                      ?_lcd_send 0005  
            __end_of_delay10ms 29F8                      ?_lcd_puts 0001           __end_of_measure_freq 1B42  
                   _global_int 0008                     calibrate@i 003F                        __Hparam 0000  
                      __Lparam 0000                      ?_ser_init 0001           ??_measure_inductance 005A  
            __end_of_lcd_begin 1DEA                      ?_ser_puts 0001              __end_of_lcd_clear 29C6  
              __size_of___flge 004C                        ___fladd 16B2                        ___fldiv 1F70  
                      ___flneg 291E                        ___flmul 1DEA                        ___flsub 2632  
                      ___fltol 2214                        ___lwdiv 2556                        ___lwmod 2676  
                 __psmallconst 0800                     ??___altofl 005A                     ??___flpack 000A  
                      __pcinit 2474                     ??___awtofl 0012              __end_of_eval_poly 20B8  
                      __ramtop 0800           __size_of_timer0_init 0082                     ??___lltofl 0012  
                      __ptext0 1934                        __ptext1 2758                        __ptext2 22B2  
                      __ptext3 28D6                        __ptext4 297A                        __ptext5 08FC  
                      __ptext6 0D5E                        __ptext7 285E                        __ptext8 23AC  
                      __ptext9 27E0           __size_of_timer2_init 002E          __size_of_buffer_putch 004A  
                   ??___lwtofl 003F                   __size_of_exp 021C                   __size_of_log 0118  
                 __size_of_pow 0192                        _seconds 00C6                        _ser_tmp 00D5  
              ??_format_double 005A                        _put_str 280A                     ??_lcd_init 0004  
                   ??_lcd_send 0006                     ??_lcd_puts 0007           end_of_initialization 24B2  
              ??_format_number 000F                ??_format_xint32 003A                        exp@sign 007B  
                    _LCD_lines 00D1                   _lcd_init$134 0005                 lcd_puts@string 0009  
            __end_of_ser_putch 28D6                        pow@sign 008C  measure_inductance@denominator 0066  
        __end_of_print_reading 241A                     ??_ser_init 0004                     ??_ser_puts 0005  
                 _buffer_putch 25A0              format_number@base 000D                        postdec1 000FE5  
                      postdec2 000FDD                        postinc0 000FEE                        postinc2 000FDE  
            ??_print_indicator 000E                     _print_unit 285E                  ?_print_buffer 0001  
          _measure_capacitance 0D5E                    ?_lcd_gotoxy 0008                    ___fldiv@exp 001B  
                  ?_global_int 0001                    ___flmul@exp 0025                  ??_lcd_command 0007  
                ??_buffer_init 0004           ?_measure_capacitance 0001                  ??_buffer_puts 0007  
      measure_capacitance@unit 00B1                 format_double@m 00A3         measure_inductance@unit 007A  
               __end_of___flge 250C                 _timer0_read_ps 250C                lcd_gotoxy@F6470 00F3  
                   floor@expon 006F                 ??_print_buffer 0006                 format_number@i 0035  
               format_number@n 000B                 format_xint32@x 0036                    __end_ofPL10 1118  
                  __end_ofPL20 113C                    __end_ofPL12 180C                    __end_ofPL30 116E  
                  __end_ofPL22 114E                    __end_ofPL14 20CA                    __end_ofPL40 297A  
                  __end_ofPL32 280A                    __end_ofPL24 1934                    __end_ofPL16 1EA0  
                  __end_ofPL42 295C                    __end_ofPL34 117C                    __end_ofPL26 115E  
                  __end_ofPL18 112A                    __end_ofPL36 1EAE                    __end_ofPL28 2834  
                  __end_ofPL38 1F70            start_initialization 2474                     eval_poly@d 003C  
                   eval_poly@n 003D                     eval_poly@x 0038          __size_of_measure_freq 00FA  
                   ldexp@value 0044                    __end_of_exp 1398                    __end_of_log 1924  
                  __end_of_pow 152A                   _LCD_function 005A             format_double@digit 00A1  
                   frexp@value 0004          ??_measure_capacitance 005A         __end_of_timer0_read_ps 2556  
                     ??___flge 000C            __size_of_lcd_gotoxy 0036            __end_of_lcd_command 29F0  
                  __pdataBANK0 00F3                   _measure_freq 1A48            __end_of_buffer_init 29E4  
          __end_of_buffer_puts 2970            __size_of_global_int 00BA       print_reading@measurement 0036  
            __size_of___altofl 0048              __size_of___flpack 00B6              __size_of___awtofl 003A  
                  ?_print_unit 0001              __size_of___lltofl 002E                    __pbssCOMRAM 005A  
            __size_of___lwtofl 002A                  __pcstackBANK0 0060                __CFG_nPWRTEN$ON 000000  
                ?_output_putch 0001              measure_freq@count 0039               lcd_command@value 0007  
            __size_of_lcd_init 002C              __size_of_lcd_send 001A                      _calibrate 1C34  
            __size_of_lcd_puts 001A                      _delay10ms 29F6                      __pnvBANK0 00EB  
             ___lwdiv@dividend 0004                ?_timer0_read_ps 0004                      __pintcode 0008  
                     ?___fladd 002C                       ?___fldiv 000E                       ?___flneg 0004  
                     ?___flmul 001D                       ?___flsub 0038                       ?___fltol 0052  
            __size_of_ser_init 0026                       ?___lwdiv 0004                       ?___lwmod 0004  
            __size_of_ser_puts 0014                      _lcd_begin 1D16                      _lcd_clear 29B0  
                  __smallconst 0800                      _eval_poly 2020                  output_putch@c 0007  
               ??_output_putch 0007               ___lwdiv@quotient 0008                 __size_of_log10 005A  
                     ?_put_str 0001                 __size_of_floor 00F2                 __size_of_ldexp 00A2  
               __size_of_frexp 0078                     ?_calibrate 0001                     ser_putch@c 0004  
                   ?_delay10ms 0001                       _LCD_ctrl 00D0                       _LCD_mode 00D2  
              _print_indicator 297A                    _lcd_command 29E4           __end_of_print_buffer 28AE  
          __size_of_print_unit 0028                       i2u262_40 0040                       i2u263_48 0042  
                  _buffer_init 29D8                      _ser_putch 28AE                    _buffer_puts 295C  
  __size_of_measure_inductance 042A                  ??_timer0_init 0004                  ??_timer2_init 0004  
                   ?_lcd_begin 0008                     ?_lcd_clear 0001                     ?_eval_poly 0038  
                    lcd_puts@i 0008                   ??_lcd_gotoxy 0009          measure_inductance@Lin 0089  
        measure_inductance@var 0087                      copy_data0 24A6          __end_of_format_double 16B2  
                 ??_global_int 0001           format_number@padchar 0033        __size_of_lcd_write4bits 0022  
        __end_of_format_number 2172          __end_of_format_xint32 2758                      frexp@eptr 0008  
                     __Hrparam 0000                       __Lrparam 0000                     ?_ser_putch 0001  
                 __Lsmallconst 0800             __end_of_lcd_gotoxy 2724               __size_of___fladd 0146  
             __size_of___fldiv 00B0               __size_of___flneg 0020               __size_of___flmul 00A4  
             __size_of___flsub 0044               __size_of___fltol 009E                       ___altofl 25EA  
                     ___flpack 1EAE               __size_of___lwdiv 004A               __size_of___lwmod 003E  
                     ___awtofl 26B4                       ___lltofl 2786                  timer2_init@ps 0005  
                     ___lwtofl 2834             __end_of_global_int 00C2            __end_of_timer0_init 2334  
                     _exp$1122 0075            __end_of_timer2_init 2786                       _main$403 00B8  
              ___lwdiv@divisor 0006                ___lwdiv@counter 000A         __size_of_print_reading 006E  
         timer0_init@prescaler 000E                       __ptext10 2724                       __ptext11 152A  
                     __ptext20 291E                       __ptext12 1398                       __ptext21 1F70  
                     __ptext13 117C                       __ptext30 27B4                       __ptext22 2786  
                     __ptext14 2172                       __ptext31 1D16                       __ptext23 241A  
                     __ptext15 1B42                       __ptext40 26EE                       __ptext32 1C34  
                     __ptext24 180C                       __ptext16 2214                       __ptext41 20CA  
                     __ptext33 280A                       __ptext25 2334                       __ptext17 24C0  
                     __ptext50 28FC                       __ptext42 2676                       __ptext34 29C6  
                     __ptext26 2020                       __ptext18 25EA                       __ptext51 29F6  
                     __ptext43 2556                       __ptext35 1A48                       __ptext27 1DEA  
                     __ptext19 2632                       __ptext52 2834                       __ptext44 295C  
                     __ptext36 250C                       __ptext28 16B2                       __ptext53 1EAE  
                     __ptext45 25A0                       __ptext37 2886                       __ptext29 26B4  
                     __ptext46 29D8                       __ptext38 293E                       __ptext47 29B0  
                     __ptext39 28AE                       __ptext48 29E4                       __ptext49 2996  
                     _lcd_init 27B4                       _lcd_send 2996        __end_of_print_indicator 2996  
                     _pow$1120 0084                       _pow$1121 0088                       _lcd_puts 27E0  
             __size_of_put_str 001A                    ??_calibrate 003F                  __size_of_main 0114  
                  ??_delay10ms 0004                      ser_puts@s 0005                       _msecpart 00F1  
                     _ser_init 28D6                       _ser_puts 293E                       _timer1of 00CA  
         __end_of_output_putch 29D8                    ??_lcd_begin 0009                    ??_lcd_clear 0008  
                     exp@coeff 0801          ___flmul@f3_as_product 0026                       log@coeff 0829  
  measure_inductance@numerator 0062                   ??_print_unit 000E                    ??_eval_poly 003F  
           _print_reading$1117 0038             _print_reading$1118 003A                       intlevel2 0000  
  __end_of_measure_capacitance 10BE          __size_of_print_buffer 0028               ___lwmod@dividend 0004  
             ??_timer0_read_ps 0006                    ??_ser_putch 0004             __end_of_print_unit 2886  
                _print_reading 23AC           delay10ms@period_10ms 0001                    _timer0_init 22B2  
                  _timer2_init 2758             _format_double$1105 0095             _format_double$1106 0099  
     _measure_capacitance$1107 00A5       _measure_capacitance$1108 00A9       _measure_capacitance$1109 00AD  
                     put_str@i 0009                       put_str@s 000B             timer0_init@ps_mode 000F  
              ___lwmod@divisor 0006                ___lwmod@counter 0008                   _print_buffer 2886  
      print_indicator@indicate 000E               ?_print_indicator 0001                 _lcd_write4bits 28FC  
                 ___fladd@exp1 0037                   ___fladd@exp2 0036                   ___fladd@sign 0035  
                 ?_lcd_command 0001                 ?_print_reading 0036                   ?_buffer_init 0001  
                 ?_buffer_puts 0001                  ?_buffer_putch 0001  
