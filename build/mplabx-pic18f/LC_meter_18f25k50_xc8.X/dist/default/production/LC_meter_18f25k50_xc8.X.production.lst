

Microchip Technology PIC18 PRO Macro Assembler V1.34 build -361300703 
                                                                                               Mon Sep 16 13:00:27 2019

Microchip Technology Omniscient Code Generator (PRO mode) build 201502162209
     1                           	processor	18F25K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    66                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    67                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    68                           	psect	pa_nodes,global,class=CODE,delta=1
    69  0000                     tosu	equ	0xFFF
    70                           tosh	equ	0xFFE
    71                           tosl	equ	0xFFD
    72                           pclath	equ	0xFFA
    73                           tblptru	equ	0xFF8
    74                           tblptrh	equ	0xFF7
    75                           tblptrl	equ	0xFF6
    76                           tablat	equ	0xFF5
    77                           prodl	equ	0xFF3
    78                           intcon	equ	0xFF2
    79                           intcon2	equ	0xFF1
    80                           wreg	equ	0xFE8
    81                           indf2	equ	0xFDF
    82                           postinc2	equ	0xFDE
    83                           postdec2	equ	0xFDD
    84                           fsr2h	equ	0xFDA
    85                           fsr2l	equ	0xFD9
    86                           status	equ	0xFD8
    87                           
    88                           	psect	idataBANK0
    89  0027C8                     __pidataBANK0:
    90                           	opt stack 0
    91                           
    92                           ;initializer for lcd_gotoxy@F6446
    93  0027C8  00                 	db	0
    94  0027C9  40                 	db	64
    95  0027CA  14                 	db	20
    96  0027CB  54                 	db	84
    97                           
    98                           ;initializer for _putchar_ptr
    99  0027CC  CE                 	db	low _format_putchar
   100  0027CD  27                 	db	high _format_putchar
   101                           tosu	equ	0xFFF
   102                           tosh	equ	0xFFE
   103                           tosl	equ	0xFFD
   104                           pclath	equ	0xFFA
   105                           tblptru	equ	0xFF8
   106                           tblptrh	equ	0xFF7
   107                           tblptrl	equ	0xFF6
   108                           tablat	equ	0xFF5
   109                           prodl	equ	0xFF3
   110                           intcon	equ	0xFF2
   111                           intcon2	equ	0xFF1
   112                           wreg	equ	0xFE8
   113                           indf2	equ	0xFDF
   114                           postinc2	equ	0xFDE
   115                           postdec2	equ	0xFDD
   116                           fsr2h	equ	0xFDA
   117                           fsr2l	equ	0xFD9
   118                           status	equ	0xFD8
   119                           
   120                           	psect	smallconst
   121  000800                     __psmallconst:
   122                           	opt stack 0
   123  000800  00                 	db	0
   124  000801                     exp@coeff:
   125                           	opt stack 0
   126  000801  0000               	dw	0
   127  000803  3F80               	dw	16256
   128  000805  7218               	dw	29208
   129  000807  3F31               	dw	16177
   130  000809  FDF0               	dw	65008
   131  00080B  3E75               	dw	15989
   132  00080D  5847               	dw	22599
   133  00080F  3D63               	dw	15715
   134  000811  9558               	dw	38232
   135  000813  3C1D               	dw	15389
   136  000815  C482               	dw	50306
   137  000817  3AAE               	dw	15022
   138  000819  78A8               	dw	30888
   139  00081B  3921               	dw	14625
   140  00081D  93EF               	dw	37871
   141  00081F  3780               	dw	14208
   142  000821  92A0               	dw	37536
   143  000823  35A7               	dw	13735
   144  000825  5646               	dw	22086
   145  000827  3415               	dw	13333
   146  000829                     __end_ofexp@coeff:
   147                           	opt stack 0
   148  000829                     log@coeff:
   149                           	opt stack 0
   150  000829  0000               	dw	0
   151  00082B  0000               	dw	0
   152  00082D  FFC4               	dw	65476
   153  00082F  3F7F               	dw	16255
   154  000831  EF80               	dw	61312
   155  000833  BEFF               	dw	48895
   156  000835  E190               	dw	57744
   157  000837  3EA9               	dw	16041
   158  000839  82EC               	dw	33516
   159  00083B  BE76               	dw	48758
   160  00083D  AD82               	dw	44418
   161  00083F  3E2B               	dw	15915
   162  000841  3C0E               	dw	15374
   163  000843  BDC3               	dw	48579
   164  000845  D187               	dw	53639
   165  000847  3D13               	dw	15635
   166  000849  7841               	dw	30785
   167  00084B  BBD3               	dw	48083
   168  00084D                     __end_oflog@coeff:
   169                           	opt stack 0
   170  00084D                     STR_3:
   171  00084D  70                 	db	112	;'p'
   172  00084E  6C                 	db	108	;'l'
   173  00084F  65                 	db	101	;'e'
   174  000850  61                 	db	97	;'a'
   175  000851  73                 	db	115	;'s'
   176  000852  65                 	db	101	;'e'
   177  000853  20                 	db	32
   178  000854  77                 	db	119	;'w'
   179  000855  61                 	db	97	;'a'
   180  000856  69                 	db	105	;'i'
   181  000857  74                 	db	116	;'t'
   182  000858  2E                 	db	46
   183  000859  2E                 	db	46
   184  00085A  2E                 	db	46
   185  00085B  00                 	db	0
   186  00085C                     STR_7:
   187  00085C  49                 	db	73	;'I'
   188  00085D  6E                 	db	110	;'n'
   189  00085E  64                 	db	100	;'d'
   190  00085F  75                 	db	117	;'u'
   191  000860  63                 	db	99	;'c'
   192  000861  74                 	db	116	;'t'
   193  000862  69                 	db	105	;'i'
   194  000863  76                 	db	118	;'v'
   195  000864  69                 	db	105	;'i'
   196  000865  74                 	db	116	;'t'
   197  000866  79                 	db	121	;'y'
   198  000867  20                 	db	32
   199  000868  00                 	db	0
   200  000869                     STR_1:
   201  000869  43                 	db	67	;'C'
   202  00086A  61                 	db	97	;'a'
   203  00086B  6C                 	db	108	;'l'
   204  00086C  69                 	db	105	;'i'
   205  00086D  62                 	db	98	;'b'
   206  00086E  72                 	db	114	;'r'
   207  00086F  61                 	db	97	;'a'
   208  000870  74                 	db	116	;'t'
   209  000871  69                 	db	105	;'i'
   210  000872  6E                 	db	110	;'n'
   211  000873  67                 	db	103	;'g'
   212  000874  00                 	db	0
   213  000875                     STR_20:
   214  000875  4C                 	db	76	;'L'
   215  000876  43                 	db	67	;'C'
   216  000877  2D                 	db	45
   217  000878  6D                 	db	109	;'m'
   218  000879  65                 	db	101	;'e'
   219  00087A  74                 	db	116	;'t'
   220  00087B  65                 	db	101	;'e'
   221  00087C  72                 	db	114	;'r'
   222  00087D  20                 	db	32
   223  00087E  00                 	db	0
   224  00087F                     STR_6:
   225  00087F  43                 	db	67	;'C'
   226  000880  61                 	db	97	;'a'
   227  000881  70                 	db	112	;'p'
   228  000882  61                 	db	97	;'a'
   229  000883  63                 	db	99	;'c'
   230  000884  69                 	db	105	;'i'
   231  000885  74                 	db	116	;'t'
   232  000886  79                 	db	121	;'y'
   233  000887  20                 	db	32
   234  000888  00                 	db	0
   235  000889                     STR_22:
   236  000889  20                 	db	32
   237  00088A  20                 	db	32
   238  00088B  20                 	db	32
   239  00088C  20                 	db	32
   240  00088D  20                 	db	32
   241  00088E  20                 	db	32
   242  00088F  00                 	db	0
   243  000890                     STR_21:
   244  000890  2E                 	db	46
   245  000891  2E                 	db	46
   246  000892  2E                 	db	46
   247  000893  0D                 	db	13
   248  000894  0A                 	db	10
   249  000895  00                 	db	0
   250  000896                     STR_5:
   251  000896  46                 	db	70	;'F'
   252  000897  72                 	db	114	;'r'
   253  000898  65                 	db	101	;'e'
   254  000899  71                 	db	113	;'q'
   255  00089A  3D                 	db	61	;'='
   256  00089B  00                 	db	0
   257  00089C  52                 	db	82	;'R'
   258  00089D  43                 	db	67	;'C'
   259  00089E  34                 	db	52	;'4'
   260  00089F  3D                 	db	61	;'='
   261  0008A0  00                 	db	0
   262  0008A1                     STR_18:
   263  0008A1  2D                 	db	45
   264  0008A2  2A                 	db	42
   265  0008A3  2D                 	db	45
   266  0008A4  00                 	db	0
   267  0008A5  6D                 	db	109	;'m'
   268  0008A6  46                 	db	70	;'F'
   269  0008A7  00                 	db	0
   270  0008A8  6E                 	db	110	;'n'
   271  0008A9  46                 	db	70	;'F'
   272  0008AA  00                 	db	0
   273  0008AB  70                 	db	112	;'p'
   274  0008AC  46                 	db	70	;'F'
   275  0008AD  00                 	db	0
   276  0008AE  75                 	db	117	;'u'
   277  0008AF  46                 	db	70	;'F'
   278  0008B0  00                 	db	0
   279  0008B1                     STR_9:
   280  0008B1  6D                 	db	109	;'m'
   281  0008B2  48                 	db	72	;'H'
   282  0008B3  00                 	db	0
   283  0008B4  6E                 	db	110	;'n'
   284  0008B5  48                 	db	72	;'H'
   285  0008B6  00                 	db	0
   286  0008B7  75                 	db	117	;'u'
   287  0008B8  48                 	db	72	;'H'
   288  0008B9  00                 	db	0
   289  0000                     
   290                           ; #config settings
   291  0008BA  00                 	db	0	; dummy byte at the end
   292  0000                     tosu	equ	0xFFF
   293                           tosh	equ	0xFFE
   294                           tosl	equ	0xFFD
   295                           pclath	equ	0xFFA
   296                           tblptru	equ	0xFF8
   297                           tblptrh	equ	0xFF7
   298                           tblptrl	equ	0xFF6
   299                           tablat	equ	0xFF5
   300                           prodl	equ	0xFF3
   301                           intcon	equ	0xFF2
   302                           intcon2	equ	0xFF1
   303                           wreg	equ	0xFE8
   304                           indf2	equ	0xFDF
   305                           postinc2	equ	0xFDE
   306                           postdec2	equ	0xFDD
   307                           fsr2h	equ	0xFDA
   308                           fsr2l	equ	0xFD9
   309                           status	equ	0xFD8
   310                           
   311                           	psect	nvBANK0
   312  0000CF                     __pnvBANK0:
   313                           	opt stack 0
   314  0000CF                     _CCal:
   315                           	opt stack 0
   316  0000CF                     	ds	4
   317  0000D3                     _bres:
   318                           	opt stack 0
   319  0000D3                     	ds	2
   320  0000D5                     _msecpart:
   321                           	opt stack 0
   322  0000D5                     	ds	2
   323  0000                     _TMR0	set	4054
   324  0000                     _INTCON	set	4082
   325  0000                     _INTCON2	set	4081
   326  0000                     _LATB	set	3978
   327  0000                     _LATC	set	3979
   328  0000                     _PIE1	set	3997
   329  0000                     _PIR1	set	3998
   330  0000                     _PORTC	set	3970
   331  0000                     _RCSTA	set	4011
   332  0000                     _SPBRG	set	4015
   333  0000                     _T0CON	set	4053
   334  0000                     _T2CON	set	4026
   335  0000                     _TMR2	set	4028
   336  0000                     _TRISA	set	3986
   337  0000                     _TRISB	set	3987
   338  0000                     _TRISC	set	3988
   339  0000                     _TXREG	set	4013
   340  0000                     _TXSTA	set	4012
   341                           tosu	equ	0xFFF
   342                           tosh	equ	0xFFE
   343                           tosl	equ	0xFFD
   344                           pclath	equ	0xFFA
   345                           tblptru	equ	0xFF8
   346                           tblptrh	equ	0xFF7
   347                           tblptrl	equ	0xFF6
   348                           tablat	equ	0xFF5
   349                           prodl	equ	0xFF3
   350                           intcon	equ	0xFF2
   351                           intcon2	equ	0xFF1
   352                           wreg	equ	0xFE8
   353                           indf2	equ	0xFDF
   354                           postinc2	equ	0xFDE
   355                           postdec2	equ	0xFDD
   356                           fsr2h	equ	0xFDA
   357                           fsr2l	equ	0xFD9
   358                           status	equ	0xFD8
   359                           
   360                           	psect	cinit
   361  00251C                     __pcinit:
   362                           	opt stack 0
   363  00251C                     start_initialization:
   364                           	opt stack 0
   365  00251C                     __initialization:
   366                           	opt stack 0
   367                           
   368                           ; Clear objects allocated to BANK0 (48 bytes)
   369  00251C  EE00  F09F         	lfsr	0,__pbssBANK0
   370  002520  0E30               	movlw	48
   371  002522                     clear_0:
   372  002522  6AEE               	clrf	postinc0,c
   373  002524  06E8               	decf	wreg,f,c
   374  002526  E1FD               	bnz	clear_0
   375                           
   376                           ; Clear objects allocated to COMRAM (1 bytes)
   377  002528  6A5E               	clrf	__pbssCOMRAM& (0+255),c
   378                           
   379                           ; Initialize objects allocated to BANK0 (6 bytes)
   380                           ; load TBLPTR registers with __pidataBANK0
   381  00252A  0EC8               	movlw	low __pidataBANK0
   382  00252C  6EF6               	movwf	tblptrl,c
   383  00252E  0E27               	movlw	high __pidataBANK0
   384  002530  6EF7               	movwf	tblptrh,c
   385  002532  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   386  002534  6EF8               	movwf	tblptru,c
   387  002536  EE00  F0D7         	lfsr	0,__pdataBANK0
   388  00253A  EE10 F006          	lfsr	1,6
   389  00253E                     copy_data0:
   390  00253E  0009               	tblrd		*+
   391  002540  CFF5 FFEE          	movff	tablat,postinc0
   392  002544  50E5               	movf	postdec1,w,c
   393  002546  50E1               	movf	fsr1l,w,c
   394  002548  E1FA               	bnz	copy_data0
   395  00254A                     end_of_initialization:
   396                           	opt stack 0
   397  00254A                     __end_of__initialization:
   398                           	opt stack 0
   399  00254A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   400  00254C  6EF8               	movwf	tblptru,c
   401  00254E  0100               	movlb	0
   402  002550  EFF7  F00C         	goto	_main	;jump to C main() function
   403                           tosu	equ	0xFFF
   404                           tosh	equ	0xFFE
   405                           tosl	equ	0xFFD
   406                           pclath	equ	0xFFA
   407                           tblptru	equ	0xFF8
   408                           tblptrh	equ	0xFF7
   409                           tblptrl	equ	0xFF6
   410                           tablat	equ	0xFF5
   411                           prodl	equ	0xFF3
   412                           intcon	equ	0xFF2
   413                           intcon2	equ	0xFF1
   414                           postinc0	equ	0xFEE
   415                           wreg	equ	0xFE8
   416                           postdec1	equ	0xFE5
   417                           fsr1l	equ	0xFE1
   418                           indf2	equ	0xFDF
   419                           postinc2	equ	0xFDE
   420                           postdec2	equ	0xFDD
   421                           fsr2h	equ	0xFDA
   422                           fsr2l	equ	0xFD9
   423                           status	equ	0xFD8
   424                           
   425                           	psect	bssCOMRAM
   426  00005E                     __pbssCOMRAM:
   427                           	opt stack 0
   428  00005E                     _LCD_function:
   429                           	opt stack 0
   430  00005E                     	ds	1
   431                           tosu	equ	0xFFF
   432                           tosh	equ	0xFFE
   433                           tosl	equ	0xFFD
   434                           pclath	equ	0xFFA
   435                           tblptru	equ	0xFF8
   436                           tblptrh	equ	0xFF7
   437                           tblptrl	equ	0xFF6
   438                           tablat	equ	0xFF5
   439                           prodl	equ	0xFF3
   440                           intcon	equ	0xFF2
   441                           intcon2	equ	0xFF1
   442                           postinc0	equ	0xFEE
   443                           wreg	equ	0xFE8
   444                           postdec1	equ	0xFE5
   445                           fsr1l	equ	0xFE1
   446                           indf2	equ	0xFDF
   447                           postinc2	equ	0xFDE
   448                           postdec2	equ	0xFDD
   449                           fsr2h	equ	0xFDA
   450                           fsr2l	equ	0xFD9
   451                           status	equ	0xFD8
   452                           
   453                           	psect	bssBANK0
   454  00009F                     __pbssBANK0:
   455                           	opt stack 0
   456  00009F                     _F2:
   457                           	opt stack 0
   458  00009F                     	ds	4
   459  0000A3                     _F3:
   460                           	opt stack 0
   461  0000A3                     	ds	4
   462  0000A7                     _msecs:
   463                           	opt stack 0
   464  0000A7                     	ds	4
   465  0000AB                     _seconds:
   466                           	opt stack 0
   467  0000AB                     	ds	4
   468  0000AF                     _timer1of:
   469                           	opt stack 0
   470  0000AF                     	ds	4
   471  0000B3                     _blink:
   472                           	opt stack 0
   473  0000B3                     	ds	2
   474  0000B5                     _LCD_ctrl:
   475                           	opt stack 0
   476  0000B5                     	ds	1
   477  0000B6                     _LCD_lines:
   478                           	opt stack 0
   479  0000B6                     	ds	1
   480  0000B7                     _LCD_mode:
   481                           	opt stack 0
   482  0000B7                     	ds	1
   483  0000B8                     _buffer:
   484                           	opt stack 0
   485  0000B8                     	ds	19
   486  0000CB                     _F1:
   487                           	opt stack 0
   488  0000CB                     	ds	4
   489                           tosu	equ	0xFFF
   490                           tosh	equ	0xFFE
   491                           tosl	equ	0xFFD
   492                           pclath	equ	0xFFA
   493                           tblptru	equ	0xFF8
   494                           tblptrh	equ	0xFF7
   495                           tblptrl	equ	0xFF6
   496                           tablat	equ	0xFF5
   497                           prodl	equ	0xFF3
   498                           intcon	equ	0xFF2
   499                           intcon2	equ	0xFF1
   500                           postinc0	equ	0xFEE
   501                           wreg	equ	0xFE8
   502                           postdec1	equ	0xFE5
   503                           fsr1l	equ	0xFE1
   504                           indf2	equ	0xFDF
   505                           postinc2	equ	0xFDE
   506                           postdec2	equ	0xFDD
   507                           fsr2h	equ	0xFDA
   508                           fsr2l	equ	0xFD9
   509                           status	equ	0xFD8
   510                           
   511                           	psect	dataBANK0
   512  0000D7                     __pdataBANK0:
   513                           	opt stack 0
   514  0000D7                     lcd_gotoxy@F6446:
   515                           	opt stack 0
   516  0000D7                     	ds	4
   517  0000DB                     _putchar_ptr:
   518                           	opt stack 0
   519  0000DB                     	ds	2
   520                           tosu	equ	0xFFF
   521                           tosh	equ	0xFFE
   522                           tosl	equ	0xFFD
   523                           pclath	equ	0xFFA
   524                           tblptru	equ	0xFF8
   525                           tblptrh	equ	0xFF7
   526                           tblptrl	equ	0xFF6
   527                           tablat	equ	0xFF5
   528                           prodl	equ	0xFF3
   529                           intcon	equ	0xFF2
   530                           intcon2	equ	0xFF1
   531                           postinc0	equ	0xFEE
   532                           wreg	equ	0xFE8
   533                           postdec1	equ	0xFE5
   534                           fsr1l	equ	0xFE1
   535                           indf2	equ	0xFDF
   536                           postinc2	equ	0xFDE
   537                           postdec2	equ	0xFDD
   538                           fsr2h	equ	0xFDA
   539                           fsr2l	equ	0xFD9
   540                           status	equ	0xFD8
   541                           
   542                           	psect	cstackBANK0
   543  000060                     __pcstackBANK0:
   544                           	opt stack 0
   545  000060                     ___altofl@sign:
   546                           	opt stack 0
   547  000060                     measure_inductance@numerator:
   548                           	opt stack 0
   549  000060                     _measure_capacitance$1092:
   550                           	opt stack 0
   551                           
   552                           ; 4 bytes @ 0x0
   553  000060                     	ds	1
   554  000061                     ?_floor:
   555                           	opt stack 0
   556  000061                     floor@x:
   557                           	opt stack 0
   558                           
   559                           ; 4 bytes @ 0x1
   560  000061                     	ds	3
   561  000064                     measure_inductance@denominator:
   562                           	opt stack 0
   563  000064                     _measure_capacitance$1093:
   564                           	opt stack 0
   565                           
   566                           ; 4 bytes @ 0x4
   567  000064                     	ds	1
   568  000065                     floor@i:
   569                           	opt stack 0
   570                           
   571                           ; 4 bytes @ 0x5
   572  000065                     	ds	3
   573  000068                     _measure_capacitance$1094:
   574                           	opt stack 0
   575  000068                     _measure_inductance$1095:
   576                           	opt stack 0
   577                           
   578                           ; 4 bytes @ 0x8
   579  000068                     	ds	1
   580  000069                     floor@expon:
   581                           	opt stack 0
   582                           
   583                           ; 2 bytes @ 0x9
   584  000069                     	ds	2
   585  00006B                     ?_exp:
   586                           	opt stack 0
   587  00006B                     exp@x:
   588                           	opt stack 0
   589                           
   590                           ; 4 bytes @ 0xB
   591  00006B                     	ds	1
   592  00006C                     measure_capacitance@unit:
   593                           	opt stack 0
   594  00006C                     _measure_inductance$1099:
   595                           	opt stack 0
   596                           
   597                           ; 4 bytes @ 0xC
   598  00006C                     	ds	1
   599  00006D                     measure_capacitance@var:
   600                           	opt stack 0
   601                           
   602                           ; 2 bytes @ 0xD
   603  00006D                     	ds	2
   604  00006F                     measure_capacitance@Cin:
   605                           	opt stack 0
   606  00006F                     _exp$1107:
   607                           	opt stack 0
   608                           
   609                           ; 4 bytes @ 0xF
   610  00006F                     	ds	1
   611  000070                     _measure_inductance$1100:
   612                           	opt stack 0
   613                           
   614                           ; 4 bytes @ 0x10
   615  000070                     	ds	3
   616  000073                     exp@exponent:
   617                           	opt stack 0
   618                           
   619                           ; 2 bytes @ 0x13
   620  000073                     	ds	1
   621  000074                     _measure_inductance$1101:
   622                           	opt stack 0
   623                           
   624                           ; 4 bytes @ 0x14
   625  000074                     	ds	1
   626  000075                     exp@sign:
   627                           	opt stack 0
   628                           
   629                           ; 1 bytes @ 0x15
   630  000075                     	ds	1
   631  000076                     ?_pow:
   632                           	opt stack 0
   633  000076                     pow@x:
   634                           	opt stack 0
   635                           
   636                           ; 4 bytes @ 0x16
   637  000076                     	ds	2
   638  000078                     measure_inductance@unit:
   639                           	opt stack 0
   640                           
   641                           ; 1 bytes @ 0x18
   642  000078                     	ds	1
   643  000079                     _measure_inductance$1096:
   644                           	opt stack 0
   645                           
   646                           ; 4 bytes @ 0x19
   647  000079                     	ds	1
   648  00007A                     pow@y:
   649                           	opt stack 0
   650                           
   651                           ; 4 bytes @ 0x1A
   652  00007A                     	ds	3
   653  00007D                     _measure_inductance$1097:
   654                           	opt stack 0
   655                           
   656                           ; 4 bytes @ 0x1D
   657  00007D                     	ds	1
   658  00007E                     _pow$1105:
   659                           	opt stack 0
   660                           
   661                           ; 4 bytes @ 0x1E
   662  00007E                     	ds	3
   663  000081                     _measure_inductance$1098:
   664                           	opt stack 0
   665                           
   666                           ; 4 bytes @ 0x21
   667  000081                     	ds	1
   668  000082                     _pow$1106:
   669                           	opt stack 0
   670                           
   671                           ; 4 bytes @ 0x22
   672  000082                     	ds	3
   673  000085                     measure_inductance@var:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0x25
   677  000085                     	ds	1
   678  000086                     pow@sign:
   679                           	opt stack 0
   680                           
   681                           ; 1 bytes @ 0x26
   682  000086                     	ds	1
   683  000087                     measure_inductance@Lin:
   684                           	opt stack 0
   685  000087                     pow@yi:
   686                           	opt stack 0
   687                           
   688                           ; 4 bytes @ 0x27
   689  000087                     	ds	4
   690  00008B                     format_double@num:
   691                           	opt stack 0
   692                           
   693                           ; 4 bytes @ 0x2B
   694  00008B                     	ds	4
   695  00008F                     _format_double$1090:
   696                           	opt stack 0
   697                           
   698                           ; 4 bytes @ 0x2F
   699  00008F                     	ds	4
   700  000093                     _format_double$1091:
   701                           	opt stack 0
   702                           
   703                           ; 4 bytes @ 0x33
   704  000093                     	ds	4
   705  000097                     format_double@weight:
   706                           	opt stack 0
   707                           
   708                           ; 4 bytes @ 0x37
   709  000097                     	ds	4
   710  00009B                     format_double@digit:
   711                           	opt stack 0
   712                           
   713                           ; 2 bytes @ 0x3B
   714  00009B                     	ds	2
   715  00009D                     format_double@m:
   716                           	opt stack 0
   717                           
   718                           ; 2 bytes @ 0x3D
   719  00009D                     	ds	2
   720                           tosu	equ	0xFFF
   721                           tosh	equ	0xFFE
   722                           tosl	equ	0xFFD
   723                           pclath	equ	0xFFA
   724                           tblptru	equ	0xFF8
   725                           tblptrh	equ	0xFF7
   726                           tblptrl	equ	0xFF6
   727                           tablat	equ	0xFF5
   728                           prodl	equ	0xFF3
   729                           intcon	equ	0xFF2
   730                           intcon2	equ	0xFF1
   731                           postinc0	equ	0xFEE
   732                           wreg	equ	0xFE8
   733                           postdec1	equ	0xFE5
   734                           fsr1l	equ	0xFE1
   735                           indf2	equ	0xFDF
   736                           postinc2	equ	0xFDE
   737                           postdec2	equ	0xFDD
   738                           fsr2h	equ	0xFDA
   739                           fsr2l	equ	0xFD9
   740                           status	equ	0xFD8
   741                           
   742                           	psect	cstackCOMRAM
   743  000001                     __pcstackCOMRAM:
   744                           	opt stack 0
   745  000001                     ??_isr:
   746  000001                     
   747                           ; 1 bytes @ 0x0
   748  000001                     	ds	1
   749  000002                     ??_timer2_init:
   750  000002                     ?_timer0_read_ps:
   751                           	opt stack 0
   752  000002                     ?___lwdiv:
   753                           	opt stack 0
   754  000002                     ?___lwmod:
   755                           	opt stack 0
   756  000002                     ?___flpack:
   757                           	opt stack 0
   758  000002                     ?_frexp:
   759                           	opt stack 0
   760  000002                     ?___flneg:
   761                           	opt stack 0
   762  000002                     lcd_write4bits@value:
   763                           	opt stack 0
   764  000002                     lcd_init@fourbitmode:
   765                           	opt stack 0
   766  000002                     uart_putch@byte:
   767                           	opt stack 0
   768  000002                     _timer0_init$169:
   769                           	opt stack 0
   770  000002                     ___lwdiv@dividend:
   771                           	opt stack 0
   772  000002                     ___lwmod@dividend:
   773                           	opt stack 0
   774  000002                     ___flpack@arg:
   775                           	opt stack 0
   776  000002                     ___flge@ff1:
   777                           	opt stack 0
   778  000002                     ___flneg@f1:
   779                           	opt stack 0
   780  000002                     frexp@value:
   781                           	opt stack 0
   782                           
   783                           ; 4 bytes @ 0x1
   784  000002                     	ds	1
   785  000003                     lcd_send@mode:
   786                           	opt stack 0
   787  000003                     timer2_init@ps:
   788                           	opt stack 0
   789  000003                     uart_puts@s:
   790                           	opt stack 0
   791  000003                     _lcd_init$151:
   792                           	opt stack 0
   793                           
   794                           ; 2 bytes @ 0x2
   795  000003                     	ds	1
   796  000004                     ??_timer0_read_ps:
   797  000004                     lcd_send@value:
   798                           	opt stack 0
   799  000004                     _timer0_init$170:
   800                           	opt stack 0
   801  000004                     ___lwdiv@divisor:
   802                           	opt stack 0
   803  000004                     ___lwmod@divisor:
   804                           	opt stack 0
   805                           
   806                           ; 2 bytes @ 0x3
   807  000004                     	ds	1
   808  000005                     ??_lcd_puts:
   809  000005                     lcd_command@value:
   810                           	opt stack 0
   811  000005                     timer2_init@ps_mode:
   812                           	opt stack 0
   813  000005                     output_putch@c:
   814                           	opt stack 0
   815                           
   816                           ; 1 bytes @ 0x4
   817  000005                     	ds	1
   818  000006                     ??_put_str:
   819  000006                     ??_lcd_clear:
   820  000006                     lcd_gotoxy@row:
   821                           	opt stack 0
   822  000006                     lcd_puts@i:
   823                           	opt stack 0
   824  000006                     lcd_begin@dotsize:
   825                           	opt stack 0
   826  000006                     timer0_read_ps@prev:
   827                           	opt stack 0
   828  000006                     ___flpack@exp:
   829                           	opt stack 0
   830  000006                     frexp@eptr:
   831                           	opt stack 0
   832  000006                     ___lwmod@counter:
   833                           	opt stack 0
   834  000006                     _timer0_init$171:
   835                           	opt stack 0
   836  000006                     ___lwdiv@quotient:
   837                           	opt stack 0
   838  000006                     ___flge@ff2:
   839                           	opt stack 0
   840                           
   841                           ; 4 bytes @ 0x5
   842  000006                     	ds	1
   843  000007                     ??_frexp:
   844  000007                     ??_lcd_begin:
   845  000007                     lcd_gotoxy@col:
   846                           	opt stack 0
   847  000007                     lcd_puts@string:
   848                           	opt stack 0
   849  000007                     ___flpack@sign:
   850                           	opt stack 0
   851  000007                     timer0_read_ps@count:
   852                           	opt stack 0
   853  000007                     put_str@i:
   854                           	opt stack 0
   855                           
   856                           ; 2 bytes @ 0x6
   857  000007                     	ds	1
   858  000008                     ??___flpack:
   859  000008                     lcd_begin@lines:
   860                           	opt stack 0
   861  000008                     ___lwdiv@counter:
   862                           	opt stack 0
   863  000008                     _timer0_init$172:
   864                           	opt stack 0
   865  000008                     lcd_gotoxy@row_offsets:
   866                           	opt stack 0
   867                           
   868                           ; 4 bytes @ 0x7
   869  000008                     	ds	1
   870  000009                     put_str@s:
   871                           	opt stack 0
   872  000009                     format_number@n:
   873                           	opt stack 0
   874                           
   875                           ; 2 bytes @ 0x8
   876  000009                     	ds	1
   877  00000A                     timer0_init@prescaler:
   878                           	opt stack 0
   879                           
   880                           ; 1 bytes @ 0x9
   881  00000A                     	ds	1
   882  00000B                     format_number@base:
   883                           	opt stack 0
   884  00000B                     timer0_init@ps_mode:
   885                           	opt stack 0
   886                           
   887                           ; 1 bytes @ 0xA
   888  00000B                     	ds	1
   889  00000C                     ??_print_unit:
   890  00000C                     ?___fldiv:
   891                           	opt stack 0
   892  00000C                     ?___awtofl:
   893                           	opt stack 0
   894  00000C                     ?___lltofl:
   895                           	opt stack 0
   896  00000C                     format_number@pad:
   897                           	opt stack 0
   898  00000C                     indicator@indicate:
   899                           	opt stack 0
   900  00000C                     ___awtofl@c:
   901                           	opt stack 0
   902  00000C                     ___fldiv@f1:
   903                           	opt stack 0
   904  00000C                     ___lltofl@c:
   905                           	opt stack 0
   906                           
   907                           ; 4 bytes @ 0xB
   908  00000C                     	ds	1
   909  00000D                     ??_format_number:
   910                           
   911                           ; 0 bytes @ 0xC
   912  00000D                     	ds	2
   913  00000F                     format_number@buf:
   914                           	opt stack 0
   915                           
   916                           ; 32 bytes @ 0xE
   917  00000F                     	ds	1
   918  000010                     ___awtofl@sign:
   919                           	opt stack 0
   920  000010                     ___fldiv@f2:
   921                           	opt stack 0
   922                           
   923                           ; 4 bytes @ 0xF
   924  000010                     	ds	4
   925  000014                     ___fldiv@f3:
   926                           	opt stack 0
   927                           
   928                           ; 4 bytes @ 0x13
   929  000014                     	ds	4
   930  000018                     ___fldiv@cntr:
   931                           	opt stack 0
   932                           
   933                           ; 1 bytes @ 0x17
   934  000018                     	ds	1
   935  000019                     ___fldiv@exp:
   936                           	opt stack 0
   937                           
   938                           ; 1 bytes @ 0x18
   939  000019                     	ds	1
   940  00001A                     ___fldiv@sign:
   941                           	opt stack 0
   942                           
   943                           ; 1 bytes @ 0x19
   944  00001A                     	ds	1
   945  00001B                     ?___flmul:
   946                           	opt stack 0
   947  00001B                     ___flmul@f1:
   948                           	opt stack 0
   949                           
   950                           ; 4 bytes @ 0x1A
   951  00001B                     	ds	4
   952  00001F                     ___flmul@f2:
   953                           	opt stack 0
   954                           
   955                           ; 4 bytes @ 0x1E
   956  00001F                     	ds	4
   957  000023                     ___flmul@exp:
   958                           	opt stack 0
   959                           
   960                           ; 1 bytes @ 0x22
   961  000023                     	ds	1
   962  000024                     ___flmul@f3_as_product:
   963                           	opt stack 0
   964                           
   965                           ; 4 bytes @ 0x23
   966  000024                     	ds	4
   967  000028                     ___flmul@cntr:
   968                           	opt stack 0
   969                           
   970                           ; 1 bytes @ 0x27
   971  000028                     	ds	1
   972  000029                     ___flmul@sign:
   973                           	opt stack 0
   974                           
   975                           ; 1 bytes @ 0x28
   976  000029                     	ds	1
   977  00002A                     ?___fladd:
   978                           	opt stack 0
   979  00002A                     ___fladd@f1:
   980                           	opt stack 0
   981                           
   982                           ; 4 bytes @ 0x29
   983  00002A                     	ds	4
   984  00002E                     ___fladd@f2:
   985                           	opt stack 0
   986                           
   987                           ; 4 bytes @ 0x2D
   988  00002E                     	ds	1
   989  00002F                     _format_number$85:
   990                           	opt stack 0
   991                           
   992                           ; 2 bytes @ 0x2E
   993  00002F                     	ds	2
   994  000031                     format_number@padchar:
   995                           	opt stack 0
   996                           
   997                           ; 1 bytes @ 0x30
   998  000031                     	ds	1
   999  000032                     ??___fladd:
  1000  000032                     format_number@di:
  1001                           	opt stack 0
  1002                           
  1003                           ; 1 bytes @ 0x31
  1004  000032                     	ds	1
  1005  000033                     format_number@i:
  1006                           	opt stack 0
  1007  000033                     ___fladd@sign:
  1008                           	opt stack 0
  1009                           
  1010                           ; 1 bytes @ 0x32
  1011  000033                     	ds	1
  1012  000034                     ?_measure_freq:
  1013                           	opt stack 0
  1014  000034                     ___fladd@exp2:
  1015                           	opt stack 0
  1016  000034                     print_reading@measurement:
  1017                           	opt stack 0
  1018                           
  1019                           ; 2 bytes @ 0x33
  1020  000034                     	ds	1
  1021  000035                     ___fladd@exp1:
  1022                           	opt stack 0
  1023                           
  1024                           ; 1 bytes @ 0x34
  1025  000035                     	ds	1
  1026  000036                     ??_measure_freq:
  1027  000036                     ?___flsub:
  1028                           	opt stack 0
  1029  000036                     ?_eval_poly:
  1030                           	opt stack 0
  1031  000036                     _print_reading$1102:
  1032                           	opt stack 0
  1033  000036                     ___flsub@f1:
  1034                           	opt stack 0
  1035  000036                     eval_poly@x:
  1036                           	opt stack 0
  1037                           
  1038                           ; 4 bytes @ 0x35
  1039  000036                     	ds	1
  1040  000037                     measure_freq@count:
  1041                           	opt stack 0
  1042                           
  1043                           ; 2 bytes @ 0x36
  1044  000037                     	ds	1
  1045  000038                     _print_reading$1103:
  1046                           	opt stack 0
  1047                           
  1048                           ; 2 bytes @ 0x37
  1049  000038                     	ds	1
  1050  000039                     ?___lwtofl:
  1051                           	opt stack 0
  1052  000039                     ___lwtofl@c:
  1053                           	opt stack 0
  1054                           
  1055                           ; 2 bytes @ 0x38
  1056  000039                     	ds	1
  1057  00003A                     eval_poly@d:
  1058                           	opt stack 0
  1059  00003A                     ___flsub@f2:
  1060                           	opt stack 0
  1061                           
  1062                           ; 4 bytes @ 0x39
  1063  00003A                     	ds	1
  1064  00003B                     eval_poly@n:
  1065                           	opt stack 0
  1066                           
  1067                           ; 2 bytes @ 0x3A
  1068  00003B                     	ds	2
  1069  00003D                     ??_eval_poly:
  1070  00003D                     calibrate@i:
  1071                           	opt stack 0
  1072                           
  1073                           ; 1 bytes @ 0x3C
  1074  00003D                     	ds	1
  1075  00003E                     eval_poly@res:
  1076                           	opt stack 0
  1077                           
  1078                           ; 4 bytes @ 0x3D
  1079  00003E                     	ds	4
  1080  000042                     ?_ldexp:
  1081                           	opt stack 0
  1082  000042                     ?_log:
  1083                           	opt stack 0
  1084  000042                     ldexp@value:
  1085                           	opt stack 0
  1086  000042                     log@x:
  1087                           	opt stack 0
  1088                           
  1089                           ; 4 bytes @ 0x41
  1090  000042                     	ds	4
  1091  000046                     ldexp@newexp:
  1092                           	opt stack 0
  1093  000046                     log@exponent:
  1094                           	opt stack 0
  1095                           
  1096                           ; 2 bytes @ 0x45
  1097  000046                     	ds	2
  1098  000048                     ??_ldexp:
  1099  000048                     ?_log10:
  1100                           	opt stack 0
  1101  000048                     log10@x:
  1102                           	opt stack 0
  1103                           
  1104                           ; 4 bytes @ 0x47
  1105  000048                     	ds	4
  1106  00004C                     _log10$1104:
  1107                           	opt stack 0
  1108                           
  1109                           ; 4 bytes @ 0x4B
  1110  00004C                     	ds	4
  1111  000050                     ?___fltol:
  1112                           	opt stack 0
  1113  000050                     ___fltol@f1:
  1114                           	opt stack 0
  1115                           
  1116                           ; 4 bytes @ 0x4F
  1117  000050                     	ds	4
  1118  000054                     ??___fltol:
  1119                           
  1120                           ; 0 bytes @ 0x53
  1121  000054                     	ds	4
  1122  000058                     ___fltol@sign1:
  1123                           	opt stack 0
  1124                           
  1125                           ; 1 bytes @ 0x57
  1126  000058                     	ds	1
  1127  000059                     ___fltol@exp1:
  1128                           	opt stack 0
  1129                           
  1130                           ; 1 bytes @ 0x58
  1131  000059                     	ds	1
  1132  00005A                     ?___altofl:
  1133                           	opt stack 0
  1134  00005A                     ___altofl@c:
  1135                           	opt stack 0
  1136                           
  1137                           ; 4 bytes @ 0x59
  1138  00005A                     	ds	4
  1139  00005E                     tosu	equ	0xFFF
  1140                           tosh	equ	0xFFE
  1141                           tosl	equ	0xFFD
  1142                           pclath	equ	0xFFA
  1143                           tblptru	equ	0xFF8
  1144                           tblptrh	equ	0xFF7
  1145                           tblptrl	equ	0xFF6
  1146                           tablat	equ	0xFF5
  1147                           prodl	equ	0xFF3
  1148                           intcon	equ	0xFF2
  1149                           intcon2	equ	0xFF1
  1150                           postinc0	equ	0xFEE
  1151                           wreg	equ	0xFE8
  1152                           postdec1	equ	0xFE5
  1153                           fsr1l	equ	0xFE1
  1154                           indf2	equ	0xFDF
  1155                           postinc2	equ	0xFDE
  1156                           postdec2	equ	0xFDD
  1157                           fsr2h	equ	0xFDA
  1158                           fsr2l	equ	0xFD9
  1159                           status	equ	0xFD8
  1160                           
  1161                           ; 0 bytes @ 0x5D
  1162 ;;
  1163 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1164 ;;
  1165 ;; *************** function _main *****************
  1166 ;; Defined at:
  1167 ;;		line 111 in file "../../../LC-meter.c"
  1168 ;; Parameters:    Size  Location     Type
  1169 ;;		None
  1170 ;; Auto vars:     Size  Location     Type
  1171 ;;		None
  1172 ;; Return value:  Size  Location     Type
  1173 ;;		None               void
  1174 ;; Registers used:
  1175 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1176 ;; Tracked objects:
  1177 ;;		On entry : 0/0
  1178 ;;		On exit  : 0/0
  1179 ;;		Unchanged: 0/0
  1180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1181 ;;      Params:         0       0       0       0       0       0       0       0       0
  1182 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1183 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1184 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1185 ;;Total ram usage:        0 bytes
  1186 ;; Hardware stack levels required when called:    7
  1187 ;; This function calls:
  1188 ;;		_calibrate
  1189 ;;		_delay10ms
  1190 ;;		_format_double
  1191 ;;		_indicator
  1192 ;;		_lcd_begin
  1193 ;;		_lcd_clear
  1194 ;;		_lcd_gotoxy
  1195 ;;		_lcd_init
  1196 ;;		_lcd_puts
  1197 ;;		_measure_capacitance
  1198 ;;		_measure_inductance
  1199 ;;		_timer0_init
  1200 ;;		_timer2_init
  1201 ;;		_uart_init
  1202 ;;		_uart_puts
  1203 ;; This function is called by:
  1204 ;;		Startup code after reset
  1205 ;; This function uses a non-reentrant model
  1206 ;;
  1207                           
  1208                           	psect	text0
  1209  0019EE                     __ptext0:
  1210                           	opt stack 0
  1211  0019EE                     _main:
  1212                           	opt stack 24
  1213                           
  1214                           ;LC-meter.c: 112: bres = msecpart = msecs = seconds = 0;
  1215                           
  1216                           ;incstack = 0
  1217  0019EE  0100               	movlb	0	; () banked
  1218  0019F0  6BAB               	clrf	_seconds& (0+255),b	;volatile
  1219  0019F2  6BAC               	clrf	(_seconds+1)& (0+255),b	;volatile
  1220  0019F4  6BAD               	clrf	(_seconds+2)& (0+255),b	;volatile
  1221  0019F6  6BAE               	clrf	(_seconds+3)& (0+255),b	;volatile
  1222  0019F8  C0AB  F0A7         	movff	_seconds,_msecs	;volatile
  1223  0019FC  C0AC  F0A8         	movff	_seconds+1,_msecs+1	;volatile
  1224  001A00  C0AD  F0A9         	movff	_seconds+2,_msecs+2	;volatile
  1225  001A04  C0AE  F0AA         	movff	_seconds+3,_msecs+3	;volatile
  1226  001A08  C0A7  F0D5         	movff	_msecs,_msecpart	;volatile
  1227  001A0C  C0A8  F0D6         	movff	_msecs+1,_msecpart+1	;volatile
  1228  001A10  C0D5  F0D3         	movff	_msecpart,_bres	;volatile
  1229  001A14  C0D6  F0D4         	movff	_msecpart+1,_bres+1	;volatile
  1230                           
  1231                           ;LC-meter.c: 114: CCal = 1000;
  1232  001A18  6BCF               	clrf	_CCal& (0+255),b
  1233  001A1A  6BD0               	clrf	(_CCal+1)& (0+255),b
  1234  001A1C  0E7A               	movlw	122
  1235  001A1E  6FD1               	movwf	(_CCal+2)& (0+255),b
  1236  001A20  0E44               	movlw	68
  1237  001A22  6FD2               	movwf	(_CCal+3)& (0+255),b
  1238                           
  1239                           ;LC-meter.c: 123: TRISA = 0b11001111;
  1240  001A24  0ECF               	movlw	207
  1241  001A26  6E92               	movwf	3986,c	;volatile
  1242                           
  1243                           ; BSR set to: 0
  1244                           ;LC-meter.c: 126: timer0_init(0b100 | 0x40);
  1245  001A28  0E44               	movlw	68
  1246  001A2A  EC00  F011         	call	_timer0_init
  1247                           
  1248                           ; BSR set to: 0
  1249                           ;LC-meter.c: 142: INTCON2 &= ~0b10000000;
  1250  001A2E  9EF1               	bcf	intcon2,7,c	;volatile
  1251                           
  1252                           ; BSR set to: 0
  1253                           ;LC-meter.c: 148: TRISC &= ~0b00000010;
  1254  001A30  9294               	bcf	3988,1,c	;volatile
  1255                           
  1256                           ; BSR set to: 0
  1257                           ;LC-meter.c: 149: LATC &= ~0b00000010; LATC |= (!!(1)) << 1;;
  1258  001A32  928B               	bcf	3979,1,c	;volatile
  1259                           
  1260                           ; BSR set to: 0
  1261  001A34  828B               	bsf	3979,1,c	;volatile
  1262                           
  1263                           ; BSR set to: 0
  1264                           ;LC-meter.c: 161: timer2_init(0b000 | 0x80);
  1265  001A36  0E80               	movlw	128
  1266  001A38  ECF7  F012         	call	_timer2_init
  1267                           
  1268                           ;LC-meter.c: 166: TRISC &= 0b10110101;
  1269  001A3C  0EB5               	movlw	181
  1270  001A3E  1694               	andwf	3988,f,c	;volatile
  1271                           
  1272                           ;LC-meter.c: 178: lcd_init(1);
  1273  001A40  0E01               	movlw	1
  1274  001A42  EC25  F013         	call	_lcd_init
  1275                           
  1276                           ; BSR set to: 0
  1277                           ;LC-meter.c: 179: lcd_begin(2, 1);
  1278  001A46  0E01               	movlw	1
  1279  001A48  6E06               	movwf	lcd_begin@dotsize,c
  1280  001A4A  0E02               	movlw	2
  1281  001A4C  ECDF  F00D         	call	_lcd_begin
  1282                           
  1283                           ;LC-meter.c: 182: TRISC |= (1 << 4);
  1284  001A50  8894               	bsf	3988,4,c	;volatile
  1285                           
  1286                           ;LC-meter.c: 183: TRISC &= ~(1 << 5);
  1287  001A52  9A94               	bcf	3988,5,c	;volatile
  1288                           
  1289                           ;LC-meter.c: 185: LATC &= ~(1 << 5);
  1290  001A54  9A8B               	bcf	3979,5,c	;volatile
  1291                           
  1292                           ;LC-meter.c: 186: delay10ms(50);
  1293  001A56  0E32               	movlw	50
  1294  001A58  ECE8  F013         	call	_delay10ms
  1295                           
  1296                           ;LC-meter.c: 187: LATC |= (1 << 5);
  1297  001A5C  8A8B               	bsf	3979,5,c	;volatile
  1298                           
  1299                           ;LC-meter.c: 188: delay10ms(50);
  1300  001A5E  0E32               	movlw	50
  1301  001A60  ECE8  F013         	call	_delay10ms
  1302                           
  1303                           ;LC-meter.c: 189: LATC &= ~(1 << 5);
  1304  001A64  9A8B               	bcf	3979,5,c	;volatile
  1305                           
  1306                           ;LC-meter.c: 190: delay10ms(50);
  1307  001A66  0E32               	movlw	50
  1308  001A68  ECE8  F013         	call	_delay10ms
  1309                           
  1310                           ;LC-meter.c: 191: LATC |= (1 << 5);
  1311  001A6C  8A8B               	bsf	3979,5,c	;volatile
  1312                           
  1313                           ;LC-meter.c: 192: delay10ms(50);
  1314  001A6E  0E32               	movlw	50
  1315  001A70  ECE8  F013         	call	_delay10ms
  1316                           
  1317                           ;LC-meter.c: 193: LATC &= ~(1 << 5);
  1318  001A74  9A8B               	bcf	3979,5,c	;volatile
  1319                           
  1320                           ;LC-meter.c: 199: uart_init();
  1321  001A76  ECB3  F013         	call	_uart_init	;wreg free
  1322                           
  1323                           ;LC-meter.c: 203: INTCON |= 0xc0;
  1324  001A7A  0EC0               	movlw	192
  1325  001A7C  12F2               	iorwf	intcon,f,c	;volatile
  1326                           
  1327                           ;LC-meter.c: 213: lcd_gotoxy(0, 0);
  1328  001A7E  0E00               	movlw	0
  1329  001A80  6A06               	clrf	lcd_gotoxy@row,c
  1330  001A82  ECAA  F012         	call	_lcd_gotoxy
  1331                           
  1332                           ;LC-meter.c: 215: lcd_puts("LC-meter ");
  1333  001A86  0E75               	movlw	STR_20& (0+255)
  1334  001A88  ECC5  F012         	call	_lcd_puts
  1335                           
  1336                           ;LC-meter.c: 216: format_double( CCal);
  1337  001A8C  C0CF  F08B         	movff	_CCal,format_double@num
  1338  001A90  C0D0  F08C         	movff	_CCal+1,format_double@num+1
  1339  001A94  C0D1  F08D         	movff	_CCal+2,format_double@num+2
  1340  001A98  C0D2  F08E         	movff	_CCal+3,format_double@num+3
  1341  001A9C  EC1E  F009         	call	_format_double	;wreg free
  1342                           
  1343                           ;LC-meter.c: 222: delay10ms(200);
  1344  001AA0  0EC8               	movlw	200
  1345  001AA2  ECE8  F013         	call	_delay10ms
  1346                           
  1347                           ;LC-meter.c: 225: calibrate();
  1348  001AA6  EC6E  F00D         	call	_calibrate	;wreg free
  1349                           
  1350                           ;LC-meter.c: 227: lcd_clear();
  1351  001AAA  ECBF  F013         	call	_lcd_clear	;wreg free
  1352  001AAE                     l3915:
  1353                           
  1354                           ;LC-meter.c: 238: uart_puts("...\r\n");
  1355  001AAE  0E90               	movlw	STR_21& (0+255)
  1356  001AB0  EC64  F013         	call	_uart_puts
  1357                           
  1358                           ;LC-meter.c: 239: if((!!(PORTC & 0b10000)))
  1359  001AB4  A882               	btfss	3970,4,c	;volatile
  1360  001AB6  D003               	goto	l3921
  1361                           
  1362                           ;LC-meter.c: 240: measure_capacitance();
  1363  001AB8  EC8F  F006         	call	_measure_capacitance	;wreg free
  1364  001ABC  D002               	goto	l3923
  1365  001ABE                     l3921:
  1366                           
  1367                           ;LC-meter.c: 241: else
  1368                           ;LC-meter.c: 242: measure_inductance();
  1369  001ABE  EC5E  F004         	call	_measure_inductance	;wreg free
  1370  001AC2                     l3923:
  1371                           
  1372                           ;LC-meter.c: 244: indicator(1);
  1373  001AC2  0E01               	movlw	1
  1374  001AC4  EC98  F013         	call	_indicator
  1375                           
  1376                           ;LC-meter.c: 245: delay10ms(30);
  1377  001AC8  0E1E               	movlw	30
  1378  001ACA  ECE8  F013         	call	_delay10ms
  1379                           
  1380                           ;LC-meter.c: 246: indicator(0);
  1381  001ACE  0E00               	movlw	0
  1382  001AD0  EC98  F013         	call	_indicator
  1383                           
  1384                           ;LC-meter.c: 247: delay10ms(20);
  1385  001AD4  0E14               	movlw	20
  1386  001AD6  ECE8  F013         	call	_delay10ms
  1387                           
  1388                           ;LC-meter.c: 248: }
  1389  001ADA  D7E9               	goto	l3915
  1390  001ADC                     __end_of_main:
  1391                           	opt stack 0
  1392                           tosu	equ	0xFFF
  1393                           tosh	equ	0xFFE
  1394                           tosl	equ	0xFFD
  1395                           pclath	equ	0xFFA
  1396                           tblptru	equ	0xFF8
  1397                           tblptrh	equ	0xFF7
  1398                           tblptrl	equ	0xFF6
  1399                           tablat	equ	0xFF5
  1400                           prodl	equ	0xFF3
  1401                           intcon	equ	0xFF2
  1402                           intcon2	equ	0xFF1
  1403                           postinc0	equ	0xFEE
  1404                           wreg	equ	0xFE8
  1405                           postdec1	equ	0xFE5
  1406                           fsr1l	equ	0xFE1
  1407                           indf2	equ	0xFDF
  1408                           postinc2	equ	0xFDE
  1409                           postdec2	equ	0xFDD
  1410                           fsr2h	equ	0xFDA
  1411                           fsr2l	equ	0xFD9
  1412                           status	equ	0xFD8
  1413                           
  1414 ;; *************** function _uart_init *****************
  1415 ;; Defined at:
  1416 ;;		line 94 in file "../../../lib/uart.c"
  1417 ;; Parameters:    Size  Location     Type
  1418 ;;		None
  1419 ;; Auto vars:     Size  Location     Type
  1420 ;;		None
  1421 ;; Return value:  Size  Location     Type
  1422 ;;		None               void
  1423 ;; Registers used:
  1424 ;;		wreg, status,2, status,0, cstack
  1425 ;; Tracked objects:
  1426 ;;		On entry : 0/0
  1427 ;;		On exit  : 0/0
  1428 ;;		Unchanged: 0/0
  1429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1430 ;;      Params:         0       0       0       0       0       0       0       0       0
  1431 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1432 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1433 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1434 ;;Total ram usage:        4 bytes
  1435 ;; Hardware stack levels used:    1
  1436 ;; Hardware stack levels required when called:    2
  1437 ;; This function calls:
  1438 ;;		_uart_enable
  1439 ;; This function is called by:
  1440 ;;		_main
  1441 ;; This function uses a non-reentrant model
  1442 ;;
  1443                           
  1444                           	psect	text1
  1445  002766                     __ptext1:
  1446                           	opt stack 0
  1447  002766                     _uart_init:
  1448                           	opt stack 28
  1449                           
  1450                           ;uart.c: 97: TRISC |= 0b10000000;
  1451                           
  1452                           ;incstack = 0
  1453  002766  8E94               	bsf	3988,7,c	;volatile
  1454                           
  1455                           ;uart.c: 98: TRISC &= ~0b01000000;
  1456  002768  9C94               	bcf	3988,6,c	;volatile
  1457                           
  1458                           ;uart.c: 99: if(0) LATC |= 0b01000000; else LATC &= 0b01000000;;
  1459  00276A  0E40               	movlw	64
  1460  00276C  168B               	andwf	3979,f,c	;volatile
  1461                           
  1462                           ;uart.c: 100: SPBRG = 0x41;
  1463  00276E  0E41               	movlw	65
  1464  002770  6EAF               	movwf	4015,c	;volatile
  1465                           
  1466                           ;uart.c: 102: RCSTA |= 0x90
  1467                           ;uart.c: 103: | (0 == 1 ? 0b1 : 0);
  1468  002772  0E90               	movlw	144
  1469  002774  12AB               	iorwf	4011,f,c	;volatile
  1470                           
  1471                           ;uart.c: 109: TXSTA |= (0 == 1) ? 0b01000000 : 0;
  1472                           
  1473                           ;uart.c: 105: TXSTA |= (1 == 1)
  1474                           ;uart.c: 107: ? 0b100
  1475                           ;uart.c: 108: : 0b000;
  1476  002776  84AC               	bsf	4012,2,c	;volatile
  1477  002778  50AC               	movf	4012,w,c	;volatile
  1478                           
  1479                           ;uart.c: 111: uart_enable();
  1480  00277A  EFCA  F013         	goto	_uart_enable	;wreg free
  1481  00277E                     __end_of_uart_init:
  1482                           	opt stack 0
  1483                           tosu	equ	0xFFF
  1484                           tosh	equ	0xFFE
  1485                           tosl	equ	0xFFD
  1486                           pclath	equ	0xFFA
  1487                           tblptru	equ	0xFF8
  1488                           tblptrh	equ	0xFF7
  1489                           tblptrl	equ	0xFF6
  1490                           tablat	equ	0xFF5
  1491                           prodl	equ	0xFF3
  1492                           intcon	equ	0xFF2
  1493                           intcon2	equ	0xFF1
  1494                           postinc0	equ	0xFEE
  1495                           wreg	equ	0xFE8
  1496                           postdec1	equ	0xFE5
  1497                           fsr1l	equ	0xFE1
  1498                           indf2	equ	0xFDF
  1499                           postinc2	equ	0xFDE
  1500                           postdec2	equ	0xFDD
  1501                           fsr2h	equ	0xFDA
  1502                           fsr2l	equ	0xFD9
  1503                           status	equ	0xFD8
  1504                           
  1505 ;; *************** function _uart_enable *****************
  1506 ;; Defined at:
  1507 ;;		line 74 in file "../../../lib/uart.c"
  1508 ;; Parameters:    Size  Location     Type
  1509 ;;		None
  1510 ;; Auto vars:     Size  Location     Type
  1511 ;;		None
  1512 ;; Return value:  Size  Location     Type
  1513 ;;		None               void
  1514 ;; Registers used:
  1515 ;;		wreg, status,2, status,0
  1516 ;; Tracked objects:
  1517 ;;		On entry : 0/0
  1518 ;;		On exit  : 0/0
  1519 ;;		Unchanged: 0/0
  1520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1521 ;;      Params:         0       0       0       0       0       0       0       0       0
  1522 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1523 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1524 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1525 ;;Total ram usage:        0 bytes
  1526 ;; Hardware stack levels used:    1
  1527 ;; Hardware stack levels required when called:    1
  1528 ;; This function calls:
  1529 ;;		Nothing
  1530 ;; This function is called by:
  1531 ;;		_uart_init
  1532 ;; This function uses a non-reentrant model
  1533 ;;
  1534                           
  1535                           	psect	text2
  1536  002794                     __ptext2:
  1537                           	opt stack 0
  1538  002794                     _uart_enable:
  1539                           	opt stack 28
  1540                           
  1541                           ;uart.c: 75: TRISC |= 0b10000000;
  1542                           
  1543                           ;incstack = 0
  1544  002794  8E94               	bsf	3988,7,c	;volatile
  1545                           
  1546                           ;uart.c: 76: TRISC &= ~0b01000000;
  1547  002796  9C94               	bcf	3988,6,c	;volatile
  1548                           
  1549                           ;uart.c: 77: if(0) LATC |= 0b01000000; else LATC &= 0b01000000;;
  1550  002798  0E40               	movlw	64
  1551  00279A  168B               	andwf	3979,f,c	;volatile
  1552                           
  1553                           ;uart.c: 78: TXSTA |= 0b00100000;
  1554  00279C  8AAC               	bsf	4012,5,c	;volatile
  1555                           
  1556                           ;uart.c: 79: RCSTA |= 0x80;
  1557  00279E  8EAB               	bsf	4011,7,c	;volatile
  1558                           
  1559                           ;uart.c: 80: PIE1 &= ~0b100000;
  1560  0027A0  9A9D               	bcf	3997,5,c	;volatile
  1561  0027A2  0C40               	retlw	64	;funcret
  1562  0027A4                     __end_of_uart_enable:
  1563                           	opt stack 0
  1564                           tosu	equ	0xFFF
  1565                           tosh	equ	0xFFE
  1566                           tosl	equ	0xFFD
  1567                           pclath	equ	0xFFA
  1568                           tblptru	equ	0xFF8
  1569                           tblptrh	equ	0xFF7
  1570                           tblptrl	equ	0xFF6
  1571                           tablat	equ	0xFF5
  1572                           prodl	equ	0xFF3
  1573                           intcon	equ	0xFF2
  1574                           intcon2	equ	0xFF1
  1575                           postinc0	equ	0xFEE
  1576                           wreg	equ	0xFE8
  1577                           postdec1	equ	0xFE5
  1578                           fsr1l	equ	0xFE1
  1579                           indf2	equ	0xFDF
  1580                           postinc2	equ	0xFDE
  1581                           postdec2	equ	0xFDD
  1582                           fsr2h	equ	0xFDA
  1583                           fsr2l	equ	0xFD9
  1584                           status	equ	0xFD8
  1585                           
  1586 ;; *************** function _timer2_init *****************
  1587 ;; Defined at:
  1588 ;;		line 125 in file "../../../lib/timer.c"
  1589 ;; Parameters:    Size  Location     Type
  1590 ;;  ps_mode         1    wreg     unsigned char 
  1591 ;; Auto vars:     Size  Location     Type
  1592 ;;  ps_mode         1    4[COMRAM] unsigned char 
  1593 ;;  postscaler      1    0        unsigned char 
  1594 ;;  ps              1    2[COMRAM] unsigned char 
  1595 ;; Return value:  Size  Location     Type
  1596 ;;		None               void
  1597 ;; Registers used:
  1598 ;;		wreg, status,2, status,0
  1599 ;; Tracked objects:
  1600 ;;		On entry : F/0
  1601 ;;		On exit  : 0/0
  1602 ;;		Unchanged: 0/0
  1603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1604 ;;      Params:         0       0       0       0       0       0       0       0       0
  1605 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1606 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1607 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1608 ;;Total ram usage:        4 bytes
  1609 ;; Hardware stack levels used:    1
  1610 ;; Hardware stack levels required when called:    1
  1611 ;; This function calls:
  1612 ;;		Nothing
  1613 ;; This function is called by:
  1614 ;;		_main
  1615 ;; This function uses a non-reentrant model
  1616 ;;
  1617                           
  1618                           	psect	text3
  1619  0025EE                     __ptext3:
  1620                           	opt stack 0
  1621  0025EE                     _timer2_init:
  1622                           	opt stack 29
  1623                           
  1624                           ;incstack = 0
  1625                           ;timer2_init@ps_mode stored from wreg
  1626  0025EE  6E05               	movwf	timer2_init@ps_mode,c
  1627                           
  1628                           ; BSR set to: 0
  1629                           ;timer.c: 126: unsigned char ps = ps_mode & 0b1111;
  1630  0025F0  5005               	movf	timer2_init@ps_mode,w,c
  1631  0025F2  0B0F               	andlw	15
  1632  0025F4  6E03               	movwf	timer2_init@ps,c
  1633                           
  1634                           ; BSR set to: 0
  1635                           ;timer.c: 130: T2CON &= ~0b01111111;
  1636  0025F6  0E80               	movlw	128
  1637  0025F8  16BA               	andwf	4026,f,c	;volatile
  1638                           
  1639                           ;timer.c: 132: T2CON |= (postscaler & 0b1111) << 3;
  1640  0025FA  50BA               	movf	4026,w,c	;volatile
  1641                           
  1642                           ;timer.c: 133: T2CON |= (ps & 0b11);
  1643  0025FC  5003               	movf	timer2_init@ps,w,c
  1644  0025FE  0B03               	andlw	3
  1645  002600  12BA               	iorwf	4026,f,c	;volatile
  1646                           
  1647                           ; BSR set to: 0
  1648                           ;timer.c: 135: TMR2 = 0;
  1649  002602  6ABC               	clrf	4028,c	;volatile
  1650                           
  1651                           ; BSR set to: 0
  1652                           ;timer.c: 137: T2CON |= 0b100;
  1653  002604  84BA               	bsf	4026,2,c	;volatile
  1654                           
  1655                           ; BSR set to: 0
  1656                           ;timer.c: 140: PIR1 &= ~0b10;
  1657  002606  929E               	bcf	3998,1,c	;volatile
  1658                           
  1659                           ;timer.c: 141: PIE1 = (!!(ps_mode & 0x80)) << 1;
  1660  002608  AE05               	btfss	timer2_init@ps_mode,7,c
  1661  00260A  D003               	goto	u2400
  1662  00260C  6A02               	clrf	??_timer2_init& (0+255),c
  1663  00260E  2A02               	incf	??_timer2_init& (0+255),f,c
  1664  002610  D001               	goto	u2418
  1665  002612                     u2400:
  1666  002612  6A02               	clrf	??_timer2_init& (0+255),c
  1667  002614                     u2418:
  1668  002614  90D8               	bcf	status,0,c
  1669  002616  3402               	rlcf	??_timer2_init,w,c
  1670  002618  6E9D               	movwf	3997,c	;volatile
  1671  00261A  0012               	return		;funcret
  1672  00261C                     __end_of_timer2_init:
  1673                           	opt stack 0
  1674                           tosu	equ	0xFFF
  1675                           tosh	equ	0xFFE
  1676                           tosl	equ	0xFFD
  1677                           pclath	equ	0xFFA
  1678                           tblptru	equ	0xFF8
  1679                           tblptrh	equ	0xFF7
  1680                           tblptrl	equ	0xFF6
  1681                           tablat	equ	0xFF5
  1682                           prodl	equ	0xFF3
  1683                           intcon	equ	0xFF2
  1684                           intcon2	equ	0xFF1
  1685                           postinc0	equ	0xFEE
  1686                           wreg	equ	0xFE8
  1687                           postdec1	equ	0xFE5
  1688                           fsr1l	equ	0xFE1
  1689                           indf2	equ	0xFDF
  1690                           postinc2	equ	0xFDE
  1691                           postdec2	equ	0xFDD
  1692                           fsr2h	equ	0xFDA
  1693                           fsr2l	equ	0xFD9
  1694                           status	equ	0xFD8
  1695                           
  1696 ;; *************** function _timer0_init *****************
  1697 ;; Defined at:
  1698 ;;		line 27 in file "../../../lib/timer.c"
  1699 ;; Parameters:    Size  Location     Type
  1700 ;;  ps_mode         1    wreg     unsigned char 
  1701 ;; Auto vars:     Size  Location     Type
  1702 ;;  ps_mode         1   10[COMRAM] unsigned char 
  1703 ;;  prescaler       1    9[COMRAM] unsigned char 
  1704 ;; Return value:  Size  Location     Type
  1705 ;;		None               void
  1706 ;; Registers used:
  1707 ;;		wreg, status,2, status,0
  1708 ;; Tracked objects:
  1709 ;;		On entry : F/0
  1710 ;;		On exit  : F/0
  1711 ;;		Unchanged: F/0
  1712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1713 ;;      Params:         0       0       0       0       0       0       0       0       0
  1714 ;;      Locals:        10       0       0       0       0       0       0       0       0
  1715 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1716 ;;      Totals:        10       0       0       0       0       0       0       0       0
  1717 ;;Total ram usage:       10 bytes
  1718 ;; Hardware stack levels used:    1
  1719 ;; Hardware stack levels required when called:    1
  1720 ;; This function calls:
  1721 ;;		Nothing
  1722 ;; This function is called by:
  1723 ;;		_main
  1724 ;; This function uses a non-reentrant model
  1725 ;;
  1726                           
  1727                           	psect	text4
  1728  002200                     __ptext4:
  1729                           	opt stack 0
  1730  002200                     _timer0_init:
  1731                           	opt stack 29
  1732                           
  1733                           ;incstack = 0
  1734                           ;timer0_init@ps_mode stored from wreg
  1735  002200  6E0B               	movwf	timer0_init@ps_mode,c
  1736                           
  1737                           ; BSR set to: 0
  1738                           ;timer.c: 28: unsigned char prescaler = ps_mode & 0b1111;
  1739  002202  500B               	movf	timer0_init@ps_mode,w,c
  1740  002204  0B0F               	andlw	15
  1741  002206  6E0A               	movwf	timer0_init@prescaler,c
  1742                           
  1743                           ; BSR set to: 0
  1744                           ;timer.c: 30: TMR0 = 0;
  1745  002208  6AD6               	clrf	4054,c	;volatile
  1746  00220A  6AD7               	clrf	4055,c	;volatile
  1747                           
  1748                           ; BSR set to: 0
  1749                           ;timer.c: 33: T0CON |= (!!(ps_mode & 0x40)) ? 0x20 : 0x00;
  1750  00220C  BC0B               	btfsc	timer0_init@ps_mode,6,c
  1751  00220E  D003               	goto	l3065
  1752                           
  1753                           ; BSR set to: 0
  1754  002210  6A02               	clrf	_timer0_init$169,c
  1755  002212  6A03               	clrf	_timer0_init$169+1,c
  1756  002214  D003               	goto	l3067
  1757  002216                     l3065:
  1758                           
  1759                           ; BSR set to: 0
  1760  002216  6A03               	clrf	_timer0_init$169+1,c
  1761  002218  0E20               	movlw	32
  1762  00221A  6E02               	movwf	_timer0_init$169,c
  1763  00221C                     l3067:
  1764                           
  1765                           ; BSR set to: 0
  1766  00221C  5002               	movf	_timer0_init$169,w,c
  1767  00221E  12D5               	iorwf	4053,f,c	;volatile
  1768                           
  1769                           ; BSR set to: 0
  1770                           ;timer.c: 36: T0CON |= (!!(ps_mode & 0x10)) ? 0x10 : 0x00;
  1771  002220  B80B               	btfsc	timer0_init@ps_mode,4,c
  1772  002222  D003               	goto	l3073
  1773                           
  1774                           ; BSR set to: 0
  1775  002224  6A04               	clrf	_timer0_init$170,c
  1776  002226  6A05               	clrf	_timer0_init$170+1,c
  1777  002228  D003               	goto	l3075
  1778  00222A                     l3073:
  1779                           
  1780                           ; BSR set to: 0
  1781  00222A  6A05               	clrf	_timer0_init$170+1,c
  1782  00222C  0E10               	movlw	16
  1783  00222E  6E04               	movwf	_timer0_init$170,c
  1784  002230                     l3075:
  1785                           
  1786                           ; BSR set to: 0
  1787  002230  5004               	movf	_timer0_init$170,w,c
  1788  002232  12D5               	iorwf	4053,f,c	;volatile
  1789                           
  1790                           ; BSR set to: 0
  1791                           ;timer.c: 39: T0CON &= (!!prescaler) ? ~0x08 : ~0x00;
  1792  002234  500A               	movf	timer0_init@prescaler,w,c
  1793  002236  E103               	bnz	l3081
  1794                           
  1795                           ; BSR set to: 0
  1796  002238  6806               	setf	_timer0_init$171,c
  1797  00223A  6807               	setf	_timer0_init$171+1,c
  1798  00223C  D003               	goto	l3083
  1799  00223E                     l3081:
  1800                           
  1801                           ; BSR set to: 0
  1802  00223E  6807               	setf	_timer0_init$171+1,c
  1803  002240  0EF7               	movlw	247
  1804  002242  6E06               	movwf	_timer0_init$171,c
  1805  002244                     l3083:
  1806                           
  1807                           ; BSR set to: 0
  1808  002244  5006               	movf	_timer0_init$171,w,c
  1809  002246  16D5               	andwf	4053,f,c	;volatile
  1810                           
  1811                           ; BSR set to: 0
  1812                           ;timer.c: 41: T0CON &= ~0b111;
  1813  002248  0EF8               	movlw	248
  1814  00224A  16D5               	andwf	4053,f,c	;volatile
  1815                           
  1816                           ;timer.c: 43: if(prescaler > 0) {
  1817  00224C  500A               	movf	timer0_init@prescaler,w,c
  1818  00224E  E003               	bz	l3089
  1819                           
  1820                           ; BSR set to: 0
  1821                           ;timer.c: 44: T0CON |= (prescaler - 1) & 0b111;
  1822  002250  040A               	decf	timer0_init@prescaler,w,c
  1823  002252  0B07               	andlw	7
  1824  002254  12D5               	iorwf	4053,f,c	;volatile
  1825  002256                     l3089:
  1826                           
  1827                           ; BSR set to: 0
  1828                           ;timer.c: 50: }
  1829                           ;timer.c: 54: INTCON &= ~0x40;
  1830  002256  9CF2               	bcf	intcon,6,c	;volatile
  1831                           
  1832                           ; BSR set to: 0
  1833                           ;timer.c: 55: INTCON |= (!!(ps_mode & 0x80)) ? 0x20 : 0x00;
  1834  002258  BE0B               	btfsc	timer0_init@ps_mode,7,c
  1835  00225A  D003               	goto	l3095
  1836                           
  1837                           ; BSR set to: 0
  1838  00225C  6A08               	clrf	_timer0_init$172,c
  1839  00225E  6A09               	clrf	_timer0_init$172+1,c
  1840  002260  D003               	goto	l3097
  1841  002262                     l3095:
  1842                           
  1843                           ; BSR set to: 0
  1844  002262  6A09               	clrf	_timer0_init$172+1,c
  1845  002264  0E20               	movlw	32
  1846  002266  6E08               	movwf	_timer0_init$172,c
  1847  002268                     l3097:
  1848                           
  1849                           ; BSR set to: 0
  1850  002268  5008               	movf	_timer0_init$172,w,c
  1851  00226A  12F2               	iorwf	intcon,f,c	;volatile
  1852                           
  1853                           ; BSR set to: 0
  1854  00226C  0012               	return		;funcret
  1855  00226E                     __end_of_timer0_init:
  1856                           	opt stack 0
  1857                           tosu	equ	0xFFF
  1858                           tosh	equ	0xFFE
  1859                           tosl	equ	0xFFD
  1860                           pclath	equ	0xFFA
  1861                           tblptru	equ	0xFF8
  1862                           tblptrh	equ	0xFF7
  1863                           tblptrl	equ	0xFF6
  1864                           tablat	equ	0xFF5
  1865                           prodl	equ	0xFF3
  1866                           intcon	equ	0xFF2
  1867                           intcon2	equ	0xFF1
  1868                           postinc0	equ	0xFEE
  1869                           wreg	equ	0xFE8
  1870                           postdec1	equ	0xFE5
  1871                           fsr1l	equ	0xFE1
  1872                           indf2	equ	0xFDF
  1873                           postinc2	equ	0xFDE
  1874                           postdec2	equ	0xFDD
  1875                           fsr2h	equ	0xFDA
  1876                           fsr2l	equ	0xFD9
  1877                           status	equ	0xFD8
  1878                           
  1879 ;; *************** function _measure_inductance *****************
  1880 ;; Defined at:
  1881 ;;		line 196 in file "../../../src/measure.c"
  1882 ;; Parameters:    Size  Location     Type
  1883 ;;		None
  1884 ;; Auto vars:     Size  Location     Type
  1885 ;;  Lin             4   39[BANK0 ] unsigned char 
  1886 ;;  denominator     4    4[BANK0 ] unsigned char 
  1887 ;;  numerator       4    0[BANK0 ] unsigned char 
  1888 ;;  var             2   37[BANK0 ] unsigned short 
  1889 ;;  unit            1   24[BANK0 ] unsigned char 
  1890 ;; Return value:  Size  Location     Type
  1891 ;;		None               void
  1892 ;; Registers used:
  1893 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, cstack
  1894 ;; Tracked objects:
  1895 ;;		On entry : 0/0
  1896 ;;		On exit  : 0/0
  1897 ;;		Unchanged: 0/0
  1898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1899 ;;      Params:         0       0       0       0       0       0       0       0       0
  1900 ;;      Locals:         0      43       0       0       0       0       0       0       0
  1901 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1902 ;;      Totals:         0      43       0       0       0       0       0       0       0
  1903 ;;Total ram usage:       43 bytes
  1904 ;; Hardware stack levels used:    1
  1905 ;; Hardware stack levels required when called:    6
  1906 ;; This function calls:
  1907 ;;		___fldiv
  1908 ;;		___flge
  1909 ;;		___flmul
  1910 ;;		___flsub
  1911 ;;		___fltol
  1912 ;;		___lwtofl
  1913 ;;		_lcd_gotoxy
  1914 ;;		_measure_freq
  1915 ;;		_print_reading
  1916 ;;		_print_unit
  1917 ;;		_put_str
  1918 ;; This function is called by:
  1919 ;;		_main
  1920 ;; This function uses a non-reentrant model
  1921 ;;
  1922                           
  1923                           	psect	text5
  1924  0008BC                     __ptext5:
  1925                           	opt stack 0
  1926  0008BC                     _measure_inductance:
  1927                           	opt stack 24
  1928                           
  1929                           ;measure.c: 197: unsigned char unit;
  1930                           ;measure.c: 198: unsigned short int var;
  1931                           ;measure.c: 200: double Lin, numerator, denominator;
  1932                           ;measure.c: 203: lcd_gotoxy(0, 0);
  1933                           
  1934                           ; BSR set to: 0
  1935                           ;incstack = 0
  1936  0008BC  0E00               	movlw	0
  1937  0008BE  6A06               	clrf	lcd_gotoxy@row,c
  1938  0008C0  ECAA  F012         	call	_lcd_gotoxy
  1939                           
  1940                           ;measure.c: 204: put_str("Inductivity ");
  1941  0008C4  0E5C               	movlw	STR_7& (0+255)
  1942  0008C6  ECDE  F012         	call	_put_str
  1943                           
  1944                           ;measure.c: 206: var = measure_freq();
  1945  0008CA  EC01  F00C         	call	_measure_freq	;wreg free
  1946  0008CE  C034  F085         	movff	?_measure_freq,measure_inductance@var
  1947  0008D2  C035  F086         	movff	?_measure_freq+1,measure_inductance@var+1
  1948                           
  1949                           ;measure.c: 208: F3 = (double)var;
  1950  0008D6  C085  F039         	movff	measure_inductance@var,___lwtofl@c
  1951  0008DA  C086  F03A         	movff	measure_inductance@var+1,___lwtofl@c+1
  1952  0008DE  EC3B  F013         	call	___lwtofl	;wreg free
  1953  0008E2  C039  F0A3         	movff	?___lwtofl,_F3
  1954  0008E6  C03A  F0A4         	movff	?___lwtofl+1,_F3+1
  1955  0008EA  C03B  F0A5         	movff	?___lwtofl+2,_F3+2
  1956  0008EE  C03C  F0A6         	movff	?___lwtofl+3,_F3+3
  1957                           
  1958                           ;measure.c: 209: if(F3 > F1)
  1959  0008F2  ECC2  F007         	call	PL6	;call to abstracted procedure
  1960  0008F6  EC9B  F011         	call	___flge	;wreg free
  1961  0008FA  E208               	bc	l3829
  1962                           
  1963                           ;measure.c: 210: F3 = F1;
  1964  0008FC  C0CB  F0A3         	movff	_F1,_F3
  1965  000900  C0CC  F0A4         	movff	_F1+1,_F3+1
  1966  000904  C0CD  F0A5         	movff	_F1+2,_F3+2
  1967  000908  C0CE  F0A6         	movff	_F1+3,_F3+3
  1968  00090C                     l3829:
  1969                           
  1970                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1971  00090C  C09F  F03A         	movff	_F2,___flsub@f2
  1972  000910  C0A0  F03B         	movff	_F2+1,___flsub@f2+1
  1973  000914  C0A1  F03C         	movff	_F2+2,___flsub@f2+2
  1974  000918  C0A2  F03D         	movff	_F2+3,___flsub@f2+3
  1975  00091C  C09F  F036         	movff	_F2,___flsub@f1
  1976  000920  C0A0  F037         	movff	_F2+1,___flsub@f1+1
  1977  000924  C0A1  F038         	movff	_F2+2,___flsub@f1+2
  1978  000928  C0A2  F039         	movff	_F2+3,___flsub@f1+3
  1979  00092C  EC30  F012         	call	___flsub	;wreg free
  1980  000930  C036  F068         	movff	?___flsub,_measure_inductance$1095
  1981  000934  C037  F069         	movff	?___flsub+1,_measure_inductance$1095+1
  1982  000938  C038  F06A         	movff	?___flsub+2,_measure_inductance$1095+2
  1983  00093C  C039  F06B         	movff	?___flsub+3,_measure_inductance$1095+3
  1984                           
  1985                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1986  000940  C068  F03A         	movff	_measure_inductance$1095,___flsub@f2
  1987  000944  C069  F03B         	movff	_measure_inductance$1095+1,___flsub@f2+1
  1988  000948  C06A  F03C         	movff	_measure_inductance$1095+2,___flsub@f2+2
  1989  00094C  C06B  F03D         	movff	_measure_inductance$1095+3,___flsub@f2+3
  1990  000950  D9CA               	call	PL2	;call to abstracted procedure
  1991  000952  ECB3  F00E         	call	___flmul	;wreg free
  1992  000956  C01B  F036         	movff	?___flmul,___flsub@f1
  1993  00095A  C01C  F037         	movff	?___flmul+1,___flsub@f1+1
  1994  00095E  C01D  F038         	movff	?___flmul+2,___flsub@f1+2
  1995  000962  C01E  F039         	movff	?___flmul+3,___flsub@f1+3
  1996  000966  EC30  F012         	call	___flsub	;wreg free
  1997  00096A  C036  F079         	movff	?___flsub,_measure_inductance$1096
  1998  00096E  C037  F07A         	movff	?___flsub+1,_measure_inductance$1096+1
  1999  000972  C038  F07B         	movff	?___flsub+2,_measure_inductance$1096+2
  2000  000976  C039  F07C         	movff	?___flsub+3,_measure_inductance$1096+3
  2001                           
  2002                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  2003  00097A  ECB1  F007         	call	PL4	;call to abstracted procedure
  2004  00097E  ECB3  F00E         	call	___flmul	;wreg free
  2005  000982  C01B  F03A         	movff	?___flmul,___flsub@f2
  2006  000986  C01C  F03B         	movff	?___flmul+1,___flsub@f2+1
  2007  00098A  C01D  F03C         	movff	?___flmul+2,___flsub@f2+2
  2008  00098E  C01E  F03D         	movff	?___flmul+3,___flsub@f2+3
  2009  000992  D9A9               	call	PL2	;call to abstracted procedure
  2010  000994  ECB3  F00E         	call	___flmul	;wreg free
  2011  000998  C01B  F036         	movff	?___flmul,___flsub@f1
  2012  00099C  C01C  F037         	movff	?___flmul+1,___flsub@f1+1
  2013  0009A0  C01D  F038         	movff	?___flmul+2,___flsub@f1+2
  2014  0009A4  C01E  F039         	movff	?___flmul+3,___flsub@f1+3
  2015  0009A8  EC30  F012         	call	___flsub	;wreg free
  2016  0009AC  C036  F07D         	movff	?___flsub,_measure_inductance$1097
  2017  0009B0  C037  F07E         	movff	?___flsub+1,_measure_inductance$1097+1
  2018  0009B4  C038  F07F         	movff	?___flsub+2,_measure_inductance$1097+2
  2019  0009B8  C039  F080         	movff	?___flsub+3,_measure_inductance$1097+3
  2020                           
  2021                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  2022  0009BC  C079  F01F         	movff	_measure_inductance$1096,___flmul@f2
  2023  0009C0  C07A  F020         	movff	_measure_inductance$1096+1,___flmul@f2+1
  2024  0009C4  C07B  F021         	movff	_measure_inductance$1096+2,___flmul@f2+2
  2025  0009C8  C07C  F022         	movff	_measure_inductance$1096+3,___flmul@f2+3
  2026  0009CC  C07D  F01B         	movff	_measure_inductance$1097,___flmul@f1
  2027  0009D0  C07E  F01C         	movff	_measure_inductance$1097+1,___flmul@f1+1
  2028  0009D4  C07F  F01D         	movff	_measure_inductance$1097+2,___flmul@f1+2
  2029  0009D8  C080  F01E         	movff	_measure_inductance$1097+3,___flmul@f1+3
  2030  0009DC  ECB3  F00E         	call	___flmul	;wreg free
  2031  0009E0  C01B  F081         	movff	?___flmul,_measure_inductance$1098
  2032  0009E4  C01C  F082         	movff	?___flmul+1,_measure_inductance$1098+1
  2033  0009E8  C01D  F083         	movff	?___flmul+2,_measure_inductance$1098+2
  2034  0009EC  C01E  F084         	movff	?___flmul+3,_measure_inductance$1098+3
  2035                           
  2036                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  2037  0009F0  C081  F01B         	movff	_measure_inductance$1098,___flmul@f1
  2038  0009F4  C082  F01C         	movff	_measure_inductance$1098+1,___flmul@f1+1
  2039  0009F8  C083  F01D         	movff	_measure_inductance$1098+2,___flmul@f1+2
  2040  0009FC  C084  F01E         	movff	_measure_inductance$1098+3,___flmul@f1+3
  2041  000A00  0E00               	movlw	0
  2042  000A02  6E1F               	movwf	___flmul@f2,c
  2043  000A04  0E40               	movlw	64
  2044  000A06  6E20               	movwf	___flmul@f2+1,c
  2045  000A08  0E1C               	movlw	28
  2046  000A0A  6E21               	movwf	___flmul@f2+2,c
  2047  000A0C  0E46               	movlw	70
  2048  000A0E  6E22               	movwf	___flmul@f2+3,c
  2049  000A10  ECB3  F00E         	call	___flmul	;wreg free
  2050  000A14  C01B  F060         	movff	?___flmul,measure_inductance@numerator
  2051  000A18  C01C  F061         	movff	?___flmul+1,measure_inductance@numerator+1
  2052  000A1C  C01D  F062         	movff	?___flmul+2,measure_inductance@numerator+2
  2053  000A20  C01E  F063         	movff	?___flmul+3,measure_inductance@numerator+3
  2054                           
  2055                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2056  000A24  D960               	call	PL2	;call to abstracted procedure
  2057  000A26  ECB3  F00E         	call	___flmul	;wreg free
  2058  000A2A  C01B  F06C         	movff	?___flmul,_measure_inductance$1099
  2059  000A2E  C01C  F06D         	movff	?___flmul+1,_measure_inductance$1099+1
  2060  000A32  C01D  F06E         	movff	?___flmul+2,_measure_inductance$1099+2
  2061  000A36  C01E  F06F         	movff	?___flmul+3,_measure_inductance$1099+3
  2062                           
  2063                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2064  000A3A  C09F  F01F         	movff	_F2,___flmul@f2
  2065  000A3E  C0A0  F020         	movff	_F2+1,___flmul@f2+1
  2066  000A42  C0A1  F021         	movff	_F2+2,___flmul@f2+2
  2067  000A46  C0A2  F022         	movff	_F2+3,___flmul@f2+3
  2068  000A4A  C06C  F01B         	movff	_measure_inductance$1099,___flmul@f1
  2069  000A4E  C06D  F01C         	movff	_measure_inductance$1099+1,___flmul@f1+1
  2070  000A52  C06E  F01D         	movff	_measure_inductance$1099+2,___flmul@f1+2
  2071  000A56  C06F  F01E         	movff	_measure_inductance$1099+3,___flmul@f1+3
  2072  000A5A  ECB3  F00E         	call	___flmul	;wreg free
  2073  000A5E  C01B  F079         	movff	?___flmul,_measure_inductance$1096
  2074  000A62  C01C  F07A         	movff	?___flmul+1,_measure_inductance$1096+1
  2075  000A66  C01D  F07B         	movff	?___flmul+2,_measure_inductance$1096+2
  2076  000A6A  C01E  F07C         	movff	?___flmul+3,_measure_inductance$1096+3
  2077                           
  2078                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2079  000A6E  C09F  F01F         	movff	_F2,___flmul@f2
  2080  000A72  C0A0  F020         	movff	_F2+1,___flmul@f2+1
  2081  000A76  C0A1  F021         	movff	_F2+2,___flmul@f2+2
  2082  000A7A  C0A2  F022         	movff	_F2+3,___flmul@f2+3
  2083  000A7E  C079  F01B         	movff	_measure_inductance$1096,___flmul@f1
  2084  000A82  C07A  F01C         	movff	_measure_inductance$1096+1,___flmul@f1+1
  2085  000A86  C07B  F01D         	movff	_measure_inductance$1096+2,___flmul@f1+2
  2086  000A8A  C07C  F01E         	movff	_measure_inductance$1096+3,___flmul@f1+3
  2087  000A8E  ECB3  F00E         	call	___flmul	;wreg free
  2088  000A92  C01B  F07D         	movff	?___flmul,_measure_inductance$1097
  2089  000A96  C01C  F07E         	movff	?___flmul+1,_measure_inductance$1097+1
  2090  000A9A  C01D  F07F         	movff	?___flmul+2,_measure_inductance$1097+2
  2091  000A9E  C01E  F080         	movff	?___flmul+3,_measure_inductance$1097+3
  2092                           
  2093                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2094  000AA2  C0A3  F01F         	movff	_F3,___flmul@f2
  2095  000AA6  C0A4  F020         	movff	_F3+1,___flmul@f2+1
  2096  000AAA  C0A5  F021         	movff	_F3+2,___flmul@f2+2
  2097  000AAE  C0A6  F022         	movff	_F3+3,___flmul@f2+3
  2098  000AB2  C07D  F01B         	movff	_measure_inductance$1097,___flmul@f1
  2099  000AB6  C07E  F01C         	movff	_measure_inductance$1097+1,___flmul@f1+1
  2100  000ABA  C07F  F01D         	movff	_measure_inductance$1097+2,___flmul@f1+2
  2101  000ABE  C080  F01E         	movff	_measure_inductance$1097+3,___flmul@f1+3
  2102  000AC2  ECB3  F00E         	call	___flmul	;wreg free
  2103  000AC6  C01B  F081         	movff	?___flmul,_measure_inductance$1098
  2104  000ACA  C01C  F082         	movff	?___flmul+1,_measure_inductance$1098+1
  2105  000ACE  C01D  F083         	movff	?___flmul+2,_measure_inductance$1098+2
  2106  000AD2  C01E  F084         	movff	?___flmul+3,_measure_inductance$1098+3
  2107                           
  2108                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2109  000AD6  C0A3  F01F         	movff	_F3,___flmul@f2
  2110  000ADA  C0A4  F020         	movff	_F3+1,___flmul@f2+1
  2111  000ADE  C0A5  F021         	movff	_F3+2,___flmul@f2+2
  2112  000AE2  C0A6  F022         	movff	_F3+3,___flmul@f2+3
  2113  000AE6  C081  F01B         	movff	_measure_inductance$1098,___flmul@f1
  2114  000AEA  C082  F01C         	movff	_measure_inductance$1098+1,___flmul@f1+1
  2115  000AEE  C083  F01D         	movff	_measure_inductance$1098+2,___flmul@f1+2
  2116  000AF2  C084  F01E         	movff	_measure_inductance$1098+3,___flmul@f1+3
  2117  000AF6  ECB3  F00E         	call	___flmul	;wreg free
  2118  000AFA  C01B  F070         	movff	?___flmul,_measure_inductance$1100
  2119  000AFE  C01C  F071         	movff	?___flmul+1,_measure_inductance$1100+1
  2120  000B02  C01D  F072         	movff	?___flmul+2,_measure_inductance$1100+2
  2121  000B06  C01E  F073         	movff	?___flmul+3,_measure_inductance$1100+3
  2122                           
  2123                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2124  000B0A  C0CF  F01F         	movff	_CCal,___flmul@f2
  2125  000B0E  C0D0  F020         	movff	_CCal+1,___flmul@f2+1
  2126  000B12  C0D1  F021         	movff	_CCal+2,___flmul@f2+2
  2127  000B16  C0D2  F022         	movff	_CCal+3,___flmul@f2+3
  2128  000B1A  C070  F01B         	movff	_measure_inductance$1100,___flmul@f1
  2129  000B1E  C071  F01C         	movff	_measure_inductance$1100+1,___flmul@f1+1
  2130  000B22  C072  F01D         	movff	_measure_inductance$1100+2,___flmul@f1+2
  2131  000B26  C073  F01E         	movff	_measure_inductance$1100+3,___flmul@f1+3
  2132  000B2A  ECB3  F00E         	call	___flmul	;wreg free
  2133  000B2E  C01B  F074         	movff	?___flmul,_measure_inductance$1101
  2134  000B32  C01C  F075         	movff	?___flmul+1,_measure_inductance$1101+1
  2135  000B36  C01D  F076         	movff	?___flmul+2,_measure_inductance$1101+2
  2136  000B3A  C01E  F077         	movff	?___flmul+3,_measure_inductance$1101+3
  2137                           
  2138                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2139  000B3E  C074  F01B         	movff	_measure_inductance$1101,___flmul@f1
  2140  000B42  C075  F01C         	movff	_measure_inductance$1101+1,___flmul@f1+1
  2141  000B46  C076  F01D         	movff	_measure_inductance$1101+2,___flmul@f1+2
  2142  000B4A  C077  F01E         	movff	_measure_inductance$1101+3,___flmul@f1+3
  2143  000B4E  0EE6               	movlw	230
  2144  000B50  6E1F               	movwf	___flmul@f2,c
  2145  000B52  0EE9               	movlw	233
  2146  000B54  6E20               	movwf	___flmul@f2+1,c
  2147  000B56  0E1D               	movlw	29
  2148  000B58  6E21               	movwf	___flmul@f2+2,c
  2149  000B5A  0E42               	movlw	66
  2150  000B5C  6E22               	movwf	___flmul@f2+3,c
  2151  000B5E  ECB3  F00E         	call	___flmul	;wreg free
  2152  000B62  C01B  F064         	movff	?___flmul,measure_inductance@denominator
  2153  000B66  C01C  F065         	movff	?___flmul+1,measure_inductance@denominator+1
  2154  000B6A  C01D  F066         	movff	?___flmul+2,measure_inductance@denominator+2
  2155  000B6E  C01E  F067         	movff	?___flmul+3,measure_inductance@denominator+3
  2156                           
  2157                           ;measure.c: 216: Lin = (numerator / denominator) * 1e+15l;
  2158  000B72  C064  F010         	movff	measure_inductance@denominator,___fldiv@f2
  2159  000B76  C065  F011         	movff	measure_inductance@denominator+1,___fldiv@f2+1
  2160  000B7A  C066  F012         	movff	measure_inductance@denominator+2,___fldiv@f2+2
  2161  000B7E  C067  F013         	movff	measure_inductance@denominator+3,___fldiv@f2+3
  2162  000B82  C060  F00C         	movff	measure_inductance@numerator,___fldiv@f1
  2163  000B86  C061  F00D         	movff	measure_inductance@numerator+1,___fldiv@f1+1
  2164  000B8A  C062  F00E         	movff	measure_inductance@numerator+2,___fldiv@f1+2
  2165  000B8E  C063  F00F         	movff	measure_inductance@numerator+3,___fldiv@f1+3
  2166  000B92  EC76  F00F         	call	___fldiv	;wreg free
  2167  000B96  C00C  F01B         	movff	?___fldiv,___flmul@f1
  2168  000B9A  C00D  F01C         	movff	?___fldiv+1,___flmul@f1+1
  2169  000B9E  C00E  F01D         	movff	?___fldiv+2,___flmul@f1+2
  2170  000BA2  C00F  F01E         	movff	?___fldiv+3,___flmul@f1+3
  2171  000BA6  0EA9               	movlw	169
  2172  000BA8  6E1F               	movwf	___flmul@f2,c
  2173  000BAA  0E5F               	movlw	95
  2174  000BAC  6E20               	movwf	___flmul@f2+1,c
  2175  000BAE  0E63               	movlw	99
  2176  000BB0  6E21               	movwf	___flmul@f2+2,c
  2177  000BB2  0E58               	movlw	88
  2178  000BB4  6E22               	movwf	___flmul@f2+3,c
  2179  000BB6  ECB3  F00E         	call	___flmul	;wreg free
  2180  000BBA  C01B  F087         	movff	?___flmul,measure_inductance@Lin
  2181  000BBE  C01C  F088         	movff	?___flmul+1,measure_inductance@Lin+1
  2182  000BC2  C01D  F089         	movff	?___flmul+2,measure_inductance@Lin+2
  2183  000BC6  C01E  F08A         	movff	?___flmul+3,measure_inductance@Lin+3
  2184                           
  2185                           ;measure.c: 218: if(Lin > 999) {
  2186  000BCA  ECF9  F007         	call	PL26	;call to abstracted procedure
  2187  000BCE  C087  F006         	movff	measure_inductance@Lin,___flge@ff2
  2188  000BD2  C088  F007         	movff	measure_inductance@Lin+1,___flge@ff2+1
  2189  000BD6  C089  F008         	movff	measure_inductance@Lin+2,___flge@ff2+2
  2190  000BDA  C08A  F009         	movff	measure_inductance@Lin+3,___flge@ff2+3
  2191  000BDE  EC9B  F011         	call	___flge	;wreg free
  2192  000BE2  E252               	bc	l3847
  2193                           
  2194                           ;measure.c: 219: if(Lin > (999e+03l)) {
  2195  000BE4  ECF0  F007         	call	PL24	;call to abstracted procedure
  2196  000BE8  C087  F006         	movff	measure_inductance@Lin,___flge@ff2
  2197  000BEC  C088  F007         	movff	measure_inductance@Lin+1,___flge@ff2+1
  2198  000BF0  C089  F008         	movff	measure_inductance@Lin+2,___flge@ff2+2
  2199  000BF4  C08A  F009         	movff	measure_inductance@Lin+3,___flge@ff2+3
  2200  000BF8  EC9B  F011         	call	___flge	;wreg free
  2201  000BFC  E233               	bc	l3843
  2202                           
  2203                           ;measure.c: 220: if(Lin > (999e+06l)) {
  2204  000BFE  ECDE  F007         	call	PL18	;call to abstracted procedure
  2205  000C02  C087  F006         	movff	measure_inductance@Lin,___flge@ff2
  2206  000C06  C088  F007         	movff	measure_inductance@Lin+1,___flge@ff2+1
  2207  000C0A  C089  F008         	movff	measure_inductance@Lin+2,___flge@ff2+2
  2208  000C0E  C08A  F009         	movff	measure_inductance@Lin+3,___flge@ff2+3
  2209  000C12  EC9B  F011         	call	___flge	;wreg free
  2210  000C16  E217               	bc	l3839
  2211                           
  2212                           ;measure.c: 221: Lin = Lin / (1e+09l);
  2213  000C18  C087  F00C         	movff	measure_inductance@Lin,___fldiv@f1
  2214  000C1C  C088  F00D         	movff	measure_inductance@Lin+1,___fldiv@f1+1
  2215  000C20  C089  F00E         	movff	measure_inductance@Lin+2,___fldiv@f1+2
  2216  000C24  C08A  F00F         	movff	measure_inductance@Lin+3,___fldiv@f1+3
  2217  000C28  ECE7  F007         	call	PL22	;call to abstracted procedure
  2218  000C2C  EC76  F00F         	call	___fldiv	;wreg free
  2219  000C30  C00C  F087         	movff	?___fldiv,measure_inductance@Lin
  2220  000C34  C00D  F088         	movff	?___fldiv+1,measure_inductance@Lin+1
  2221  000C38  C00E  F089         	movff	?___fldiv+2,measure_inductance@Lin+2
  2222  000C3C  C00F  F08A         	movff	?___fldiv+3,measure_inductance@Lin+3
  2223                           
  2224                           ;measure.c: 222: unit = 0;
  2225  000C40  0100               	movlb	0	; () banked
  2226  000C42  6B78               	clrf	measure_inductance@unit& (0+255),b
  2227                           
  2228                           ;measure.c: 223: } else {
  2229  000C44  D024               	goto	l3849
  2230  000C46                     l3839:
  2231                           
  2232                           ;measure.c: 224: Lin = Lin / (1e+06l);
  2233  000C46  D860               	call	PL8	;call to abstracted procedure
  2234  000C48  EC09  F008         	call	PL32	;call to abstracted procedure
  2235  000C4C  EC76  F00F         	call	___fldiv	;wreg free
  2236  000C50  C00C  F087         	movff	?___fldiv,measure_inductance@Lin
  2237  000C54  C00D  F088         	movff	?___fldiv+1,measure_inductance@Lin+1
  2238  000C58  C00E  F089         	movff	?___fldiv+2,measure_inductance@Lin+2
  2239  000C5C  C00F  F08A         	movff	?___fldiv+3,measure_inductance@Lin+3
  2240                           
  2241                           ;measure.c: 225: unit = 1;
  2242  000C60  0E01               	movlw	1
  2243  000C62  D013               	goto	L1
  2244  000C64                     l3843:
  2245                           
  2246                           ;measure.c: 228: Lin = Lin / 1e+03l;
  2247  000C64  D851               	call	PL8	;call to abstracted procedure
  2248  000C66  6E11               	movwf	___fldiv@f2+1,c
  2249  000C68  0E7A               	movlw	122
  2250  000C6A  6E12               	movwf	___fldiv@f2+2,c
  2251  000C6C  0E44               	movlw	68
  2252  000C6E  6E13               	movwf	___fldiv@f2+3,c
  2253  000C70  EC76  F00F         	call	___fldiv	;wreg free
  2254  000C74  C00C  F087         	movff	?___fldiv,measure_inductance@Lin
  2255  000C78  C00D  F088         	movff	?___fldiv+1,measure_inductance@Lin+1
  2256  000C7C  C00E  F089         	movff	?___fldiv+2,measure_inductance@Lin+2
  2257  000C80  C00F  F08A         	movff	?___fldiv+3,measure_inductance@Lin+3
  2258                           
  2259                           ;measure.c: 229: unit = 2;
  2260  000C84  0E02               	movlw	2
  2261  000C86  D001               	goto	L1
  2262  000C88                     l3847:
  2263                           
  2264                           ;measure.c: 232: unit = 3;
  2265  000C88  0E03               	movlw	3
  2266  000C8A                     L1:
  2267  000C8A  0100               	movlb	0	; () banked
  2268  000C8C  6F78               	movwf	measure_inductance@unit& (0+255),b
  2269  000C8E                     l3849:
  2270                           
  2271                           ; BSR set to: 0
  2272                           ;measure.c: 234: Lin = Lin * 100;
  2273  000C8E  C087  F01B         	movff	measure_inductance@Lin,___flmul@f1
  2274  000C92  C088  F01C         	movff	measure_inductance@Lin+1,___flmul@f1+1
  2275  000C96  C089  F01D         	movff	measure_inductance@Lin+2,___flmul@f1+2
  2276  000C9A  C08A  F01E         	movff	measure_inductance@Lin+3,___flmul@f1+3
  2277  000C9E  EC01  F008         	call	PL30	;call to abstracted procedure
  2278  000CA2  ECB3  F00E         	call	___flmul	;wreg free
  2279  000CA6  C01B  F087         	movff	?___flmul,measure_inductance@Lin
  2280  000CAA  C01C  F088         	movff	?___flmul+1,measure_inductance@Lin+1
  2281  000CAE  C01D  F089         	movff	?___flmul+2,measure_inductance@Lin+2
  2282  000CB2  C01E  F08A         	movff	?___flmul+3,measure_inductance@Lin+3
  2283                           
  2284                           ;measure.c: 235: var = (unsigned short int)Lin;
  2285  000CB6  C087  F050         	movff	measure_inductance@Lin,___fltol@f1
  2286  000CBA  C088  F051         	movff	measure_inductance@Lin+1,___fltol@f1+1
  2287  000CBE  C089  F052         	movff	measure_inductance@Lin+2,___fltol@f1+2
  2288  000CC2  C08A  F053         	movff	measure_inductance@Lin+3,___fltol@f1+3
  2289  000CC6  EC76  F010         	call	___fltol	;wreg free
  2290  000CCA  C050  F085         	movff	?___fltol,measure_inductance@var
  2291  000CCE  C051  F086         	movff	?___fltol+1,measure_inductance@var+1
  2292                           
  2293                           ;measure.c: 237: print_reading(var);
  2294  000CD2  C085  F034         	movff	measure_inductance@var,print_reading@measurement
  2295  000CD6  C086  F035         	movff	measure_inductance@var+1,print_reading@measurement+1
  2296  000CDA  EC37  F011         	call	_print_reading	;wreg free
  2297                           
  2298                           ;measure.c: 238: print_unit(unit);
  2299  000CDE  0100               	movlb	0	; () banked
  2300  000CE0  5178               	movf	measure_inductance@unit& (0+255),w,b
  2301  000CE2  EF50  F013         	goto	_print_unit
  2302  000CE6                     __end_of_measure_inductance:
  2303                           	opt stack 0
  2304  000CE6                     PL2:
  2305                           	opt stack 24
  2306  000CE6  C0CB  F01F         	movff	_F1,___flmul@f2
  2307  000CEA  C0CC  F020         	movff	_F1+1,___flmul@f2+1
  2308  000CEE  C0CD  F021         	movff	_F1+2,___flmul@f2+2
  2309  000CF2  C0CE  F022         	movff	_F1+3,___flmul@f2+3
  2310  000CF6  C0CB  F01B         	movff	_F1,___flmul@f1
  2311  000CFA  C0CC  F01C         	movff	_F1+1,___flmul@f1+1
  2312  000CFE  C0CD  F01D         	movff	_F1+2,___flmul@f1+2
  2313  000D02  C0CE  F01E         	movff	_F1+3,___flmul@f1+3
  2314  000D06  0012               	return	
  2315  000D08                     __end_ofPL2:
  2316                           	opt stack 0
  2317  000D08                     PL8:
  2318                           	opt stack 24
  2319  000D08  C087  F00C         	movff	measure_inductance@Lin,___fldiv@f1
  2320  000D0C  C088  F00D         	movff	measure_inductance@Lin+1,___fldiv@f1+1
  2321  000D10  C089  F00E         	movff	measure_inductance@Lin+2,___fldiv@f1+2
  2322  000D14  C08A  F00F         	movff	measure_inductance@Lin+3,___fldiv@f1+3
  2323  000D18  0E00               	movlw	0
  2324  000D1A  6E10               	movwf	___fldiv@f2,c
  2325  000D1C  0C00               	retlw	0
  2326  000D1E                     __end_ofPL8:
  2327                           	opt stack 0
  2328                           tosu	equ	0xFFF
  2329                           tosh	equ	0xFFE
  2330                           tosl	equ	0xFFD
  2331                           pclath	equ	0xFFA
  2332                           tblptru	equ	0xFF8
  2333                           tblptrh	equ	0xFF7
  2334                           tblptrl	equ	0xFF6
  2335                           tablat	equ	0xFF5
  2336                           prodl	equ	0xFF3
  2337                           intcon	equ	0xFF2
  2338                           intcon2	equ	0xFF1
  2339                           postinc0	equ	0xFEE
  2340                           wreg	equ	0xFE8
  2341                           postdec1	equ	0xFE5
  2342                           fsr1l	equ	0xFE1
  2343                           indf2	equ	0xFDF
  2344                           postinc2	equ	0xFDE
  2345                           postdec2	equ	0xFDD
  2346                           fsr2h	equ	0xFDA
  2347                           fsr2l	equ	0xFD9
  2348                           status	equ	0xFD8
  2349                           
  2350 ;; *************** function _measure_capacitance *****************
  2351 ;; Defined at:
  2352 ;;		line 118 in file "../../../src/measure.c"
  2353 ;; Parameters:    Size  Location     Type
  2354 ;;		None
  2355 ;; Auto vars:     Size  Location     Type
  2356 ;;  Cin             4   15[BANK0 ] unsigned char 
  2357 ;;  var             2   13[BANK0 ] unsigned short 
  2358 ;;  unit            1   12[BANK0 ] unsigned char 
  2359 ;; Return value:  Size  Location     Type
  2360 ;;		None               void
  2361 ;; Registers used:
  2362 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, cstack
  2363 ;; Tracked objects:
  2364 ;;		On entry : 0/0
  2365 ;;		On exit  : 0/0
  2366 ;;		Unchanged: 0/0
  2367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2368 ;;      Params:         0       0       0       0       0       0       0       0       0
  2369 ;;      Locals:         0      19       0       0       0       0       0       0       0
  2370 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2371 ;;      Totals:         0      19       0       0       0       0       0       0       0
  2372 ;;Total ram usage:       19 bytes
  2373 ;; Hardware stack levels used:    1
  2374 ;; Hardware stack levels required when called:    6
  2375 ;; This function calls:
  2376 ;;		___fldiv
  2377 ;;		___flge
  2378 ;;		___flmul
  2379 ;;		___flsub
  2380 ;;		___fltol
  2381 ;;		___lwtofl
  2382 ;;		_lcd_gotoxy
  2383 ;;		_measure_freq
  2384 ;;		_print_reading
  2385 ;;		_print_unit
  2386 ;;		_put_str
  2387 ;; This function is called by:
  2388 ;;		_main
  2389 ;; This function uses a non-reentrant model
  2390 ;;
  2391                           
  2392                           	psect	text6
  2393  000D1E                     __ptext6:
  2394                           	opt stack 0
  2395  000D1E                     _measure_capacitance:
  2396                           	opt stack 24
  2397                           
  2398                           ;measure.c: 119: unsigned char unit;
  2399                           ;measure.c: 120: unsigned short int var;
  2400                           ;measure.c: 122: double Cin;
  2401                           ;measure.c: 126: lcd_gotoxy(0, 0);
  2402                           
  2403                           ;incstack = 0
  2404  000D1E  0E00               	movlw	0
  2405  000D20  6A06               	clrf	lcd_gotoxy@row,c
  2406  000D22  ECAA  F012         	call	_lcd_gotoxy
  2407                           
  2408                           ;measure.c: 127: put_str("Capacity ");
  2409  000D26  0E7F               	movlw	STR_6& (0+255)
  2410  000D28  ECDE  F012         	call	_put_str
  2411                           
  2412                           ;measure.c: 129: var = measure_freq();
  2413  000D2C  EC01  F00C         	call	_measure_freq	;wreg free
  2414  000D30  C034  F06D         	movff	?_measure_freq,measure_capacitance@var
  2415  000D34  C035  F06E         	movff	?_measure_freq+1,measure_capacitance@var+1
  2416                           
  2417                           ;measure.c: 131: F3 = (double)var;
  2418  000D38  C06D  F039         	movff	measure_capacitance@var,___lwtofl@c
  2419  000D3C  C06E  F03A         	movff	measure_capacitance@var+1,___lwtofl@c+1
  2420  000D40  EC3B  F013         	call	___lwtofl	;wreg free
  2421  000D44  C039  F0A3         	movff	?___lwtofl,_F3
  2422  000D48  C03A  F0A4         	movff	?___lwtofl+1,_F3+1
  2423  000D4C  C03B  F0A5         	movff	?___lwtofl+2,_F3+2
  2424  000D50  C03C  F0A6         	movff	?___lwtofl+3,_F3+3
  2425                           
  2426                           ;measure.c: 154: putchar_ptr = &output_putch;
  2427  000D54  0EB0               	movlw	low _output_putch
  2428  000D56  0100               	movlb	0	; () banked
  2429  000D58  6FDB               	movwf	_putchar_ptr& (0+255),b
  2430  000D5A  0E27               	movlw	high _output_putch
  2431  000D5C  6FDC               	movwf	(_putchar_ptr+1)& (0+255),b
  2432                           
  2433                           ; BSR set to: 0
  2434                           ;measure.c: 156: if(F3 > F1)
  2435  000D5E  D912               	call	PL6	;call to abstracted procedure
  2436  000D60  EC9B  F011         	call	___flge	;wreg free
  2437  000D64  E208               	bc	l3789
  2438                           
  2439                           ;measure.c: 157: F3 = F1;
  2440  000D66  C0CB  F0A3         	movff	_F1,_F3
  2441  000D6A  C0CC  F0A4         	movff	_F1+1,_F3+1
  2442  000D6E  C0CD  F0A5         	movff	_F1+2,_F3+2
  2443  000D72  C0CE  F0A6         	movff	_F1+3,_F3+3
  2444  000D76                     l3789:
  2445                           
  2446                           ;measure.c: 159: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2447  000D76  D8F5               	call	PL4	;call to abstracted procedure
  2448  000D78  ECB3  F00E         	call	___flmul	;wreg free
  2449  000D7C  C01B  F03A         	movff	?___flmul,___flsub@f2
  2450  000D80  C01C  F03B         	movff	?___flmul+1,___flsub@f2+1
  2451  000D84  C01D  F03C         	movff	?___flmul+2,___flsub@f2+2
  2452  000D88  C01E  F03D         	movff	?___flmul+3,___flsub@f2+3
  2453  000D8C  EC73  F006         	call	PL2	;call to abstracted procedure
  2454  000D90  ECB3  F00E         	call	___flmul	;wreg free
  2455  000D94  C01B  F036         	movff	?___flmul,___flsub@f1
  2456  000D98  C01C  F037         	movff	?___flmul+1,___flsub@f1+1
  2457  000D9C  C01D  F038         	movff	?___flmul+2,___flsub@f1+2
  2458  000DA0  C01E  F039         	movff	?___flmul+3,___flsub@f1+3
  2459  000DA4  EC30  F012         	call	___flsub	;wreg free
  2460  000DA8  C036  F060         	movff	?___flsub,_measure_capacitance$1092
  2461  000DAC  C037  F061         	movff	?___flsub+1,_measure_capacitance$1092+1
  2462  000DB0  C038  F062         	movff	?___flsub+2,_measure_capacitance$1092+2
  2463  000DB4  C039  F063         	movff	?___flsub+3,_measure_capacitance$1092+3
  2464                           
  2465                           ;measure.c: 159: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2466  000DB8  C09F  F01F         	movff	_F2,___flmul@f2
  2467  000DBC  C0A0  F020         	movff	_F2+1,___flmul@f2+1
  2468  000DC0  C0A1  F021         	movff	_F2+2,___flmul@f2+2
  2469  000DC4  C0A2  F022         	movff	_F2+3,___flmul@f2+3
  2470  000DC8  C060  F01B         	movff	_measure_capacitance$1092,___flmul@f1
  2471  000DCC  C061  F01C         	movff	_measure_capacitance$1092+1,___flmul@f1+1
  2472  000DD0  C062  F01D         	movff	_measure_capacitance$1092+2,___flmul@f1+2
  2473  000DD4  C063  F01E         	movff	_measure_capacitance$1092+3,___flmul@f1+3
  2474  000DD8  ECB3  F00E         	call	___flmul	;wreg free
  2475  000DDC  C01B  F064         	movff	?___flmul,_measure_capacitance$1093
  2476  000DE0  C01C  F065         	movff	?___flmul+1,_measure_capacitance$1093+1
  2477  000DE4  C01D  F066         	movff	?___flmul+2,_measure_capacitance$1093+2
  2478  000DE8  C01E  F067         	movff	?___flmul+3,_measure_capacitance$1093+3
  2479                           
  2480                           ;measure.c: 159: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2481  000DEC  C09F  F01F         	movff	_F2,___flmul@f2
  2482  000DF0  C0A0  F020         	movff	_F2+1,___flmul@f2+1
  2483  000DF4  C0A1  F021         	movff	_F2+2,___flmul@f2+2
  2484  000DF8  C0A2  F022         	movff	_F2+3,___flmul@f2+3
  2485  000DFC  C064  F01B         	movff	_measure_capacitance$1093,___flmul@f1
  2486  000E00  C065  F01C         	movff	_measure_capacitance$1093+1,___flmul@f1+1
  2487  000E04  C066  F01D         	movff	_measure_capacitance$1093+2,___flmul@f1+2
  2488  000E08  C067  F01E         	movff	_measure_capacitance$1093+3,___flmul@f1+3
  2489  000E0C  ECB3  F00E         	call	___flmul	;wreg free
  2490  000E10  C01B  F068         	movff	?___flmul,_measure_capacitance$1094
  2491  000E14  C01C  F069         	movff	?___flmul+1,_measure_capacitance$1094+1
  2492  000E18  C01D  F06A         	movff	?___flmul+2,_measure_capacitance$1094+2
  2493  000E1C  C01E  F06B         	movff	?___flmul+3,_measure_capacitance$1094+3
  2494                           
  2495                           ;measure.c: 159: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2496  000E20  C068  F01B         	movff	_measure_capacitance$1094,___flmul@f1
  2497  000E24  C069  F01C         	movff	_measure_capacitance$1094+1,___flmul@f1+1
  2498  000E28  C06A  F01D         	movff	_measure_capacitance$1094+2,___flmul@f1+2
  2499  000E2C  C06B  F01E         	movff	_measure_capacitance$1094+3,___flmul@f1+3
  2500  000E30  C0CF  F01F         	movff	_CCal,___flmul@f2
  2501  000E34  C0D0  F020         	movff	_CCal+1,___flmul@f2+1
  2502  000E38  C0D1  F021         	movff	_CCal+2,___flmul@f2+2
  2503  000E3C  C0D2  F022         	movff	_CCal+3,___flmul@f2+3
  2504  000E40  ECB3  F00E         	call	___flmul	;wreg free
  2505  000E44  C01B  F06F         	movff	?___flmul,measure_capacitance@Cin
  2506  000E48  C01C  F070         	movff	?___flmul+1,measure_capacitance@Cin+1
  2507  000E4C  C01D  F071         	movff	?___flmul+2,measure_capacitance@Cin+2
  2508  000E50  C01E  F072         	movff	?___flmul+3,measure_capacitance@Cin+3
  2509                           
  2510                           ;measure.c: 169: if(Cin > 999) {
  2511  000E54  D8CE               	call	PL26	;call to abstracted procedure
  2512  000E56  C06F  F006         	movff	measure_capacitance@Cin,___flge@ff2
  2513  000E5A  C070  F007         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2514  000E5E  C071  F008         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2515  000E62  C072  F009         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2516  000E66  EC9B  F011         	call	___flge	;wreg free
  2517  000E6A  E24D               	bc	l3807
  2518                           
  2519                           ;measure.c: 170: if(Cin > (999e+03l)) {
  2520  000E6C  D8B9               	call	PL24	;call to abstracted procedure
  2521  000E6E  C06F  F006         	movff	measure_capacitance@Cin,___flge@ff2
  2522  000E72  C070  F007         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2523  000E76  C071  F008         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2524  000E7A  C072  F009         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2525  000E7E  EC9B  F011         	call	___flge	;wreg free
  2526  000E82  E22F               	bc	l3803
  2527                           
  2528                           ;measure.c: 171: if(Cin > (999e+06l)) {
  2529  000E84  D89B               	call	PL18	;call to abstracted procedure
  2530  000E86  C06F  F006         	movff	measure_capacitance@Cin,___flge@ff2
  2531  000E8A  C070  F007         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2532  000E8E  C071  F008         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2533  000E92  C072  F009         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2534  000E96  EC9B  F011         	call	___flge	;wreg free
  2535  000E9A  E215               	bc	l3799
  2536                           
  2537                           ;measure.c: 172: Cin = Cin / (1e+09);
  2538  000E9C  C06F  F00C         	movff	measure_capacitance@Cin,___fldiv@f1
  2539  000EA0  C070  F00D         	movff	measure_capacitance@Cin+1,___fldiv@f1+1
  2540  000EA4  C071  F00E         	movff	measure_capacitance@Cin+2,___fldiv@f1+2
  2541  000EA8  C072  F00F         	movff	measure_capacitance@Cin+3,___fldiv@f1+3
  2542  000EAC  D890               	call	PL22	;call to abstracted procedure
  2543  000EAE  EC76  F00F         	call	___fldiv	;wreg free
  2544  000EB2  C00C  F06F         	movff	?___fldiv,measure_capacitance@Cin
  2545  000EB6  C00D  F070         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2546  000EBA  C00E  F071         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2547  000EBE  C00F  F072         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2548                           
  2549                           ;measure.c: 173: unit = 4;
  2550  000EC2  0E04               	movlw	4
  2551  000EC4  D021               	goto	L2
  2552  000EC6                     l3799:
  2553                           
  2554                           ;measure.c: 175: Cin = Cin / (1e+06);
  2555  000EC6  D86F               	call	PL12	;call to abstracted procedure
  2556  000EC8  D8A4               	call	PL32	;call to abstracted procedure
  2557  000ECA  EC76  F00F         	call	___fldiv	;wreg free
  2558  000ECE  C00C  F06F         	movff	?___fldiv,measure_capacitance@Cin
  2559  000ED2  C00D  F070         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2560  000ED6  C00E  F071         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2561  000EDA  C00F  F072         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2562                           
  2563                           ;measure.c: 176: unit = 5;
  2564  000EDE  0E05               	movlw	5
  2565  000EE0  D013               	goto	L2
  2566  000EE2                     l3803:
  2567                           
  2568                           ;measure.c: 179: Cin = Cin / 1e+03;
  2569  000EE2  D861               	call	PL12	;call to abstracted procedure
  2570  000EE4  6E11               	movwf	___fldiv@f2+1,c
  2571  000EE6  0E7A               	movlw	122
  2572  000EE8  6E12               	movwf	___fldiv@f2+2,c
  2573  000EEA  0E44               	movlw	68
  2574  000EEC  6E13               	movwf	___fldiv@f2+3,c
  2575  000EEE  EC76  F00F         	call	___fldiv	;wreg free
  2576  000EF2  C00C  F06F         	movff	?___fldiv,measure_capacitance@Cin
  2577  000EF6  C00D  F070         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2578  000EFA  C00E  F071         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2579  000EFE  C00F  F072         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2580                           
  2581                           ;measure.c: 180: unit = 6;
  2582  000F02  0E06               	movlw	6
  2583  000F04  D001               	goto	L2
  2584  000F06                     l3807:
  2585                           
  2586                           ;measure.c: 183: unit = 7;
  2587  000F06  0E07               	movlw	7
  2588  000F08                     L2:
  2589  000F08  0100               	movlb	0	; () banked
  2590  000F0A  6F6C               	movwf	measure_capacitance@unit& (0+255),b
  2591                           
  2592                           ; BSR set to: 0
  2593                           ;measure.c: 185: Cin = Cin * 100;
  2594  000F0C  C06F  F01B         	movff	measure_capacitance@Cin,___flmul@f1
  2595  000F10  C070  F01C         	movff	measure_capacitance@Cin+1,___flmul@f1+1
  2596  000F14  C071  F01D         	movff	measure_capacitance@Cin+2,___flmul@f1+2
  2597  000F18  C072  F01E         	movff	measure_capacitance@Cin+3,___flmul@f1+3
  2598  000F1C  D872               	call	PL30	;call to abstracted procedure
  2599  000F1E  ECB3  F00E         	call	___flmul	;wreg free
  2600  000F22  C01B  F06F         	movff	?___flmul,measure_capacitance@Cin
  2601  000F26  C01C  F070         	movff	?___flmul+1,measure_capacitance@Cin+1
  2602  000F2A  C01D  F071         	movff	?___flmul+2,measure_capacitance@Cin+2
  2603  000F2E  C01E  F072         	movff	?___flmul+3,measure_capacitance@Cin+3
  2604                           
  2605                           ;measure.c: 186: var = (unsigned short int)Cin;
  2606  000F32  C06F  F050         	movff	measure_capacitance@Cin,___fltol@f1
  2607  000F36  C070  F051         	movff	measure_capacitance@Cin+1,___fltol@f1+1
  2608  000F3A  C071  F052         	movff	measure_capacitance@Cin+2,___fltol@f1+2
  2609  000F3E  C072  F053         	movff	measure_capacitance@Cin+3,___fltol@f1+3
  2610  000F42  EC76  F010         	call	___fltol	;wreg free
  2611  000F46  C050  F06D         	movff	?___fltol,measure_capacitance@var
  2612  000F4A  C051  F06E         	movff	?___fltol+1,measure_capacitance@var+1
  2613                           
  2614                           ;measure.c: 188: print_reading(var);
  2615  000F4E  C06D  F034         	movff	measure_capacitance@var,print_reading@measurement
  2616  000F52  C06E  F035         	movff	measure_capacitance@var+1,print_reading@measurement+1
  2617  000F56  EC37  F011         	call	_print_reading	;wreg free
  2618                           
  2619                           ;measure.c: 189: print_unit(unit);
  2620  000F5A  0100               	movlb	0	; () banked
  2621  000F5C  516C               	movf	measure_capacitance@unit& (0+255),w,b
  2622  000F5E  EF50  F013         	goto	_print_unit
  2623  000F62                     __end_of_measure_capacitance:
  2624                           	opt stack 0
  2625  000F62                     PL4:
  2626                           	opt stack 24
  2627  000F62  C0A3  F01F         	movff	_F3,___flmul@f2
  2628  000F66  C0A4  F020         	movff	_F3+1,___flmul@f2+1
  2629  000F6A  C0A5  F021         	movff	_F3+2,___flmul@f2+2
  2630  000F6E  C0A6  F022         	movff	_F3+3,___flmul@f2+3
  2631  000F72  C0A3  F01B         	movff	_F3,___flmul@f1
  2632  000F76  C0A4  F01C         	movff	_F3+1,___flmul@f1+1
  2633  000F7A  C0A5  F01D         	movff	_F3+2,___flmul@f1+2
  2634  000F7E  C0A6  F01E         	movff	_F3+3,___flmul@f1+3
  2635  000F82  0012               	return	
  2636  000F84                     __end_ofPL4:
  2637                           	opt stack 0
  2638  000F84                     PL6:
  2639                           	opt stack 24
  2640  000F84  C0CB  F002         	movff	_F1,___flge@ff1
  2641  000F88  C0CC  F003         	movff	_F1+1,___flge@ff1+1
  2642  000F8C  C0CD  F004         	movff	_F1+2,___flge@ff1+2
  2643  000F90  C0CE  F005         	movff	_F1+3,___flge@ff1+3
  2644  000F94  C0A3  F006         	movff	_F3,___flge@ff2
  2645  000F98  C0A4  F007         	movff	_F3+1,___flge@ff2+1
  2646  000F9C  C0A5  F008         	movff	_F3+2,___flge@ff2+2
  2647  000FA0  C0A6  F009         	movff	_F3+3,___flge@ff2+3
  2648  000FA4  0012               	return	
  2649  000FA6                     __end_ofPL6:
  2650                           	opt stack 0
  2651  000FA6                     PL12:
  2652                           	opt stack 24
  2653  000FA6  C06F  F00C         	movff	measure_capacitance@Cin,___fldiv@f1
  2654  000FAA  C070  F00D         	movff	measure_capacitance@Cin+1,___fldiv@f1+1
  2655  000FAE  C071  F00E         	movff	measure_capacitance@Cin+2,___fldiv@f1+2
  2656  000FB2  C072  F00F         	movff	measure_capacitance@Cin+3,___fldiv@f1+3
  2657  000FB6  0E00               	movlw	0
  2658  000FB8  6E10               	movwf	___fldiv@f2,c
  2659  000FBA  0C00               	retlw	0
  2660  000FBC                     __end_ofPL12:
  2661                           	opt stack 0
  2662  000FBC                     PL18:
  2663                           	opt stack 24
  2664  000FBC  0E1F               	movlw	31
  2665  000FBE  6E02               	movwf	___flge@ff1,c
  2666  000FC0  0E2E               	movlw	46
  2667  000FC2  6E03               	movwf	___flge@ff1+1,c
  2668  000FC4  0E6E               	movlw	110
  2669  000FC6  6E04               	movwf	___flge@ff1+2,c
  2670  000FC8  0E4E               	movlw	78
  2671  000FCA  6E05               	movwf	___flge@ff1+3,c
  2672  000FCC  0C4E               	retlw	78
  2673  000FCE                     __end_ofPL18:
  2674                           	opt stack 0
  2675  000FCE                     PL22:
  2676                           	opt stack 24
  2677  000FCE  0E28               	movlw	40
  2678  000FD0  6E10               	movwf	___fldiv@f2,c
  2679  000FD2  0E6B               	movlw	107
  2680  000FD4  6E11               	movwf	___fldiv@f2+1,c
  2681  000FD6  0E6E               	movlw	110
  2682  000FD8  6E12               	movwf	___fldiv@f2+2,c
  2683  000FDA  0E4E               	movlw	78
  2684  000FDC  6E13               	movwf	___fldiv@f2+3,c
  2685  000FDE  0C4E               	retlw	78
  2686  000FE0                     __end_ofPL22:
  2687                           	opt stack 0
  2688  000FE0                     PL24:
  2689                           	opt stack 24
  2690  000FE0  0E80               	movlw	128
  2691  000FE2  6E02               	movwf	___flge@ff1,c
  2692  000FE4  0EE5               	movlw	229
  2693  000FE6  6E03               	movwf	___flge@ff1+1,c
  2694  000FE8  0E73               	movlw	115
  2695  000FEA  6E04               	movwf	___flge@ff1+2,c
  2696  000FEC  0E49               	movlw	73
  2697  000FEE  6E05               	movwf	___flge@ff1+3,c
  2698  000FF0  0C49               	retlw	73
  2699  000FF2                     __end_ofPL24:
  2700                           	opt stack 0
  2701  000FF2                     PL26:
  2702                           	opt stack 24
  2703  000FF2  6A02               	clrf	___flge@ff1,c
  2704  000FF4  0EC0               	movlw	192
  2705  000FF6  6E03               	movwf	___flge@ff1+1,c
  2706  000FF8  0E79               	movlw	121
  2707  000FFA  6E04               	movwf	___flge@ff1+2,c
  2708  000FFC  0E44               	movlw	68
  2709  000FFE  6E05               	movwf	___flge@ff1+3,c
  2710  001000  0C44               	retlw	68
  2711  001002                     __end_ofPL26:
  2712                           	opt stack 0
  2713  001002                     PL30:
  2714                           	opt stack 24
  2715  001002  0E00               	movlw	0
  2716  001004  6E1F               	movwf	___flmul@f2,c
  2717  001006  6E20               	movwf	___flmul@f2+1,c
  2718  001008  0EC8               	movlw	200
  2719  00100A  6E21               	movwf	___flmul@f2+2,c
  2720  00100C  0E42               	movlw	66
  2721  00100E  6E22               	movwf	___flmul@f2+3,c
  2722  001010  0C42               	retlw	66
  2723  001012                     __end_ofPL30:
  2724                           	opt stack 0
  2725  001012                     PL32:
  2726                           	opt stack 24
  2727  001012  0E24               	movlw	36
  2728  001014  6E11               	movwf	___fldiv@f2+1,c
  2729  001016  0E74               	movlw	116
  2730  001018  6E12               	movwf	___fldiv@f2+2,c
  2731  00101A  0E49               	movlw	73
  2732  00101C  6E13               	movwf	___fldiv@f2+3,c
  2733  00101E  0C49               	retlw	73
  2734  001020                     __end_ofPL32:
  2735                           	opt stack 0
  2736                           tosu	equ	0xFFF
  2737                           tosh	equ	0xFFE
  2738                           tosl	equ	0xFFD
  2739                           pclath	equ	0xFFA
  2740                           tblptru	equ	0xFF8
  2741                           tblptrh	equ	0xFF7
  2742                           tblptrl	equ	0xFF6
  2743                           tablat	equ	0xFF5
  2744                           prodl	equ	0xFF3
  2745                           intcon	equ	0xFF2
  2746                           intcon2	equ	0xFF1
  2747                           postinc0	equ	0xFEE
  2748                           wreg	equ	0xFE8
  2749                           postdec1	equ	0xFE5
  2750                           fsr1l	equ	0xFE1
  2751                           indf2	equ	0xFDF
  2752                           postinc2	equ	0xFDE
  2753                           postdec2	equ	0xFDD
  2754                           fsr2h	equ	0xFDA
  2755                           fsr2l	equ	0xFD9
  2756                           status	equ	0xFD8
  2757                           
  2758 ;; *************** function _print_unit *****************
  2759 ;; Defined at:
  2760 ;;		line 412 in file "../../../src/print.c"
  2761 ;; Parameters:    Size  Location     Type
  2762 ;;  unit            1    wreg     unsigned char 
  2763 ;; Auto vars:     Size  Location     Type
  2764 ;;  unit            1    0[COMRAM] unsigned char 
  2765 ;; Return value:  Size  Location     Type
  2766 ;;		None               void
  2767 ;; Registers used:
  2768 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2769 ;; Tracked objects:
  2770 ;;		On entry : F/0
  2771 ;;		On exit  : 0/0
  2772 ;;		Unchanged: 0/0
  2773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2774 ;;      Params:         0       0       0       0       0       0       0       0       0
  2775 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2776 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2777 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2778 ;;Total ram usage:        2 bytes
  2779 ;; Hardware stack levels used:    1
  2780 ;; Hardware stack levels required when called:    5
  2781 ;; This function calls:
  2782 ;;		_lcd_gotoxy
  2783 ;;		_uart_puts
  2784 ;; This function is called by:
  2785 ;;		_measure_capacitance
  2786 ;;		_measure_inductance
  2787 ;; This function uses a non-reentrant model
  2788 ;;
  2789                           
  2790                           	psect	text7
  2791  0026A0                     __ptext7:
  2792                           	opt stack 0
  2793  0026A0                     _print_unit:
  2794                           	opt stack 24
  2795                           
  2796                           ; BSR set to: 0
  2797                           ;print.c: 420: static const char* units[8] = {"H", "mH", "uH", "nH", "mF", "uF", "nF", "
      +                          pF"};
  2798                           ;print.c: 421: lcd_gotoxy(14, 0);
  2799                           
  2800                           ;incstack = 0
  2801  0026A0  6A06               	clrf	lcd_gotoxy@row,c
  2802  0026A2  0E0E               	movlw	14
  2803  0026A4  ECAA  F012         	call	_lcd_gotoxy
  2804                           
  2805                           ;print.c: 425: lcd_gotoxy(16 - (buffer.n - buffer.p), 0);
  2806  0026A8  6A06               	clrf	lcd_gotoxy@row,c
  2807  0026AA  0100               	movlb	0	; () banked
  2808  0026AC  39C8               	swapf	(_buffer+16)& (0+255),w,b
  2809  0026AE  0B0F               	andlw	15
  2810  0026B0  6E0C               	movwf	??_print_unit& (0+255),c
  2811  0026B2  51C8               	movf	(_buffer+16)& (0+255),w,b
  2812  0026B4  0B0F               	andlw	15
  2813  0026B6  6E0D               	movwf	(??_print_unit+1)& (0+255),c
  2814  0026B8  500C               	movf	??_print_unit,w,c
  2815  0026BA  5C0D               	subwf	??_print_unit+1,w,c
  2816  0026BC  0F10               	addlw	16
  2817  0026BE  ECAA  F012         	call	_lcd_gotoxy
  2818                           
  2819                           ;print.c: 428: uart_puts("\r\n");
  2820  0026C2  0E93               	movlw	(STR_21+3)& (0+255)
  2821  0026C4  EF64  F013         	goto	_uart_puts
  2822  0026C8                     __end_of_print_unit:
  2823                           	opt stack 0
  2824                           tosu	equ	0xFFF
  2825                           tosh	equ	0xFFE
  2826                           tosl	equ	0xFFD
  2827                           pclath	equ	0xFFA
  2828                           tblptru	equ	0xFF8
  2829                           tblptrh	equ	0xFF7
  2830                           tblptrl	equ	0xFF6
  2831                           tablat	equ	0xFF5
  2832                           prodl	equ	0xFF3
  2833                           intcon	equ	0xFF2
  2834                           intcon2	equ	0xFF1
  2835                           postinc0	equ	0xFEE
  2836                           wreg	equ	0xFE8
  2837                           postdec1	equ	0xFE5
  2838                           fsr1l	equ	0xFE1
  2839                           indf2	equ	0xFDF
  2840                           postinc2	equ	0xFDE
  2841                           postdec2	equ	0xFDD
  2842                           fsr2h	equ	0xFDA
  2843                           fsr2l	equ	0xFD9
  2844                           status	equ	0xFD8
  2845                           
  2846 ;; *************** function _print_reading *****************
  2847 ;; Defined at:
  2848 ;;		line 433 in file "../../../src/print.c"
  2849 ;; Parameters:    Size  Location     Type
  2850 ;;  measurement     2   51[COMRAM] unsigned short 
  2851 ;; Auto vars:     Size  Location     Type
  2852 ;;		None
  2853 ;; Return value:  Size  Location     Type
  2854 ;;		None               void
  2855 ;; Registers used:
  2856 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, cstack
  2857 ;; Tracked objects:
  2858 ;;		On entry : 0/0
  2859 ;;		On exit  : 0/0
  2860 ;;		Unchanged: 0/0
  2861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2862 ;;      Params:         2       0       0       0       0       0       0       0       0
  2863 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2864 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2865 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2866 ;;Total ram usage:        6 bytes
  2867 ;; Hardware stack levels used:    1
  2868 ;; Hardware stack levels required when called:    5
  2869 ;; This function calls:
  2870 ;;		___lwdiv
  2871 ;;		___lwmod
  2872 ;;		_format_number
  2873 ;;		_lcd_gotoxy
  2874 ;;		_lcd_puts
  2875 ;; This function is called by:
  2876 ;;		_measure_capacitance
  2877 ;;		_measure_inductance
  2878 ;; This function uses a non-reentrant model
  2879 ;;
  2880                           
  2881                           	psect	text8
  2882  00226E                     __ptext8:
  2883                           	opt stack 0
  2884  00226E                     _print_reading:
  2885                           	opt stack 24
  2886                           
  2887                           ;print.c: 460: lcd_gotoxy(9, 0);
  2888                           
  2889                           ;incstack = 0
  2890  00226E  6A06               	clrf	lcd_gotoxy@row,c
  2891  002270  0E09               	movlw	9
  2892  002272  ECAA  F012         	call	_lcd_gotoxy
  2893                           
  2894                           ;print.c: 461: lcd_puts("     ");
  2895  002276  0E8A               	movlw	(STR_22+1)& (0+255)
  2896  002278  ECC5  F012         	call	_lcd_puts
  2897                           
  2898                           ;print.c: 462: lcd_gotoxy(9, 0);
  2899  00227C  6A06               	clrf	lcd_gotoxy@row,c
  2900  00227E  0E09               	movlw	9
  2901  002280  ECAA  F012         	call	_lcd_gotoxy
  2902                           
  2903                           ;print.c: 464: format_number( measurement / 100, 10, 0);
  2904  002284  C034  F002         	movff	print_reading@measurement,___lwdiv@dividend
  2905  002288  C035  F003         	movff	print_reading@measurement+1,___lwdiv@dividend+1
  2906  00228C  6A05               	clrf	___lwdiv@divisor+1,c
  2907  00228E  0E64               	movlw	100
  2908  002290  6E04               	movwf	___lwdiv@divisor,c
  2909  002292  EC0B  F012         	call	___lwdiv	;wreg free
  2910  002296  C002  F036         	movff	?___lwdiv,_print_reading$1102
  2911  00229A  C003  F037         	movff	?___lwdiv+1,_print_reading$1102+1
  2912                           
  2913                           ;print.c: 464: format_number( measurement / 100, 10, 0);
  2914  00229E  C036  F009         	movff	_print_reading$1102,format_number@n
  2915  0022A2  C037  F00A         	movff	_print_reading$1102+1,format_number@n+1
  2916  0022A6  0E0A               	movlw	10
  2917  0022A8  6E0B               	movwf	format_number@base,c
  2918  0022AA  6A0C               	clrf	format_number@pad,c
  2919  0022AC  EC49  F00E         	call	_format_number	;wreg free
  2920                           
  2921                           ;print.c: 466: format_number( measurement % 100, 10, 0);
  2922  0022B0  C034  F002         	movff	print_reading@measurement,___lwmod@dividend
  2923  0022B4  C035  F003         	movff	print_reading@measurement+1,___lwmod@dividend+1
  2924  0022B8  6A05               	clrf	___lwmod@divisor+1,c
  2925  0022BA  0E64               	movlw	100
  2926  0022BC  6E04               	movwf	___lwmod@divisor,c
  2927  0022BE  EC52  F012         	call	___lwmod	;wreg free
  2928  0022C2  C002  F038         	movff	?___lwmod,_print_reading$1103
  2929  0022C6  C003  F039         	movff	?___lwmod+1,_print_reading$1103+1
  2930                           
  2931                           ;print.c: 466: format_number( measurement % 100, 10, 0);
  2932  0022CA  C038  F009         	movff	_print_reading$1103,format_number@n
  2933  0022CE  C039  F00A         	movff	_print_reading$1103+1,format_number@n+1
  2934  0022D2  0E0A               	movlw	10
  2935  0022D4  6E0B               	movwf	format_number@base,c
  2936  0022D6  6A0C               	clrf	format_number@pad,c
  2937  0022D8  EF49  F00E         	goto	_format_number	;wreg free
  2938  0022DC                     __end_of_print_reading:
  2939                           	opt stack 0
  2940                           tosu	equ	0xFFF
  2941                           tosh	equ	0xFFE
  2942                           tosl	equ	0xFFD
  2943                           pclath	equ	0xFFA
  2944                           tblptru	equ	0xFF8
  2945                           tblptrh	equ	0xFF7
  2946                           tblptrl	equ	0xFF6
  2947                           tablat	equ	0xFF5
  2948                           prodl	equ	0xFF3
  2949                           intcon	equ	0xFF2
  2950                           intcon2	equ	0xFF1
  2951                           postinc0	equ	0xFEE
  2952                           wreg	equ	0xFE8
  2953                           postdec1	equ	0xFE5
  2954                           fsr1l	equ	0xFE1
  2955                           indf2	equ	0xFDF
  2956                           postinc2	equ	0xFDE
  2957                           postdec2	equ	0xFDD
  2958                           fsr2h	equ	0xFDA
  2959                           fsr2l	equ	0xFD9
  2960                           status	equ	0xFD8
  2961                           
  2962 ;; *************** function _lcd_init *****************
  2963 ;; Defined at:
  2964 ;;		line 506 in file "../../../lib/lcd44780.c"
  2965 ;; Parameters:    Size  Location     Type
  2966 ;;  fourbitmode     1    wreg     unsigned char 
  2967 ;; Auto vars:     Size  Location     Type
  2968 ;;  fourbitmode     1    1[COMRAM] unsigned char 
  2969 ;; Return value:  Size  Location     Type
  2970 ;;		None               void
  2971 ;; Registers used:
  2972 ;;		wreg, status,2, status,0
  2973 ;; Tracked objects:
  2974 ;;		On entry : 0/0
  2975 ;;		On exit  : F/0
  2976 ;;		Unchanged: 0/0
  2977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2978 ;;      Params:         0       0       0       0       0       0       0       0       0
  2979 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2980 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2981 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2982 ;;Total ram usage:        3 bytes
  2983 ;; Hardware stack levels used:    1
  2984 ;; Hardware stack levels required when called:    1
  2985 ;; This function calls:
  2986 ;;		Nothing
  2987 ;; This function is called by:
  2988 ;;		_main
  2989 ;; This function uses a non-reentrant model
  2990 ;;
  2991                           
  2992                           	psect	text9
  2993  00264A                     __ptext9:
  2994                           	opt stack 0
  2995  00264A                     _lcd_init:
  2996                           	opt stack 29
  2997                           
  2998                           ;incstack = 0
  2999                           ;lcd_init@fourbitmode stored from wreg
  3000  00264A  6E02               	movwf	lcd_init@fourbitmode,c
  3001                           
  3002                           ;lcd44780.c: 508: LCD_ctrl = 0;
  3003  00264C  0100               	movlb	0	; () banked
  3004  00264E  6BB5               	clrf	_LCD_ctrl& (0+255),b
  3005                           
  3006                           ; BSR set to: 0
  3007                           ;lcd44780.c: 509: LCD_function = (fourbitmode ? 0x00 : 0x10);
  3008  002650  5002               	movf	lcd_init@fourbitmode,w,c
  3009  002652  E104               	bnz	l161
  3010                           
  3011                           ; BSR set to: 0
  3012  002654  6A04               	clrf	_lcd_init$151+1,c
  3013  002656  0E10               	movlw	16
  3014  002658  6E03               	movwf	_lcd_init$151,c
  3015  00265A  D002               	goto	l163
  3016  00265C                     l161:
  3017                           
  3018                           ; BSR set to: 0
  3019  00265C  6A03               	clrf	_lcd_init$151,c
  3020  00265E  6A04               	clrf	_lcd_init$151+1,c
  3021  002660                     l163:
  3022                           
  3023                           ; BSR set to: 0
  3024  002660  C003  F05E         	movff	_lcd_init$151,_LCD_function
  3025                           
  3026                           ;lcd44780.c: 511: LCD_lines = 0;
  3027  002664  6BB6               	clrf	_LCD_lines& (0+255),b
  3028                           
  3029                           ;lcd44780.c: 513: LCD_mode = 0;
  3030  002666  6BB7               	clrf	_LCD_mode& (0+255),b
  3031                           
  3032                           ; BSR set to: 0
  3033                           ;lcd44780.c: 515: TRISB &= ~0b0100;
  3034  002668  9493               	bcf	3987,2,c	;volatile
  3035                           
  3036                           ;lcd44780.c: 516: LATB &= ~0b0100;
  3037  00266A  948A               	bcf	3978,2,c	;volatile
  3038                           
  3039                           ;lcd44780.c: 521: TRISB &= ~0b1000;
  3040  00266C  9693               	bcf	3987,3,c	;volatile
  3041                           
  3042                           ;lcd44780.c: 522: LATB &= ~0b1000;
  3043  00266E  968A               	bcf	3978,3,c	;volatile
  3044                           
  3045                           ; BSR set to: 0
  3046                           ;lcd44780.c: 524: LATB &= ~0b11110000;
  3047  002670  0E0F               	movlw	15
  3048  002672  168A               	andwf	3978,f,c	;volatile
  3049                           
  3050                           ; BSR set to: 0
  3051  002674  0C0F               	retlw	15	;funcret
  3052  002676                     __end_of_lcd_init:
  3053                           	opt stack 0
  3054                           tosu	equ	0xFFF
  3055                           tosh	equ	0xFFE
  3056                           tosl	equ	0xFFD
  3057                           pclath	equ	0xFFA
  3058                           tblptru	equ	0xFF8
  3059                           tblptrh	equ	0xFF7
  3060                           tblptrl	equ	0xFF6
  3061                           tablat	equ	0xFF5
  3062                           prodl	equ	0xFF3
  3063                           intcon	equ	0xFF2
  3064                           intcon2	equ	0xFF1
  3065                           postinc0	equ	0xFEE
  3066                           wreg	equ	0xFE8
  3067                           postdec1	equ	0xFE5
  3068                           fsr1l	equ	0xFE1
  3069                           indf2	equ	0xFDF
  3070                           postinc2	equ	0xFDE
  3071                           postdec2	equ	0xFDD
  3072                           fsr2h	equ	0xFDA
  3073                           fsr2l	equ	0xFD9
  3074                           status	equ	0xFD8
  3075                           
  3076 ;; *************** function _lcd_begin *****************
  3077 ;; Defined at:
  3078 ;;		line 433 in file "../../../lib/lcd44780.c"
  3079 ;; Parameters:    Size  Location     Type
  3080 ;;  lines           1    wreg     unsigned char 
  3081 ;;  dotsize         1    5[COMRAM] unsigned char 
  3082 ;; Auto vars:     Size  Location     Type
  3083 ;;  lines           1    7[COMRAM] unsigned char 
  3084 ;; Return value:  Size  Location     Type
  3085 ;;		None               void
  3086 ;; Registers used:
  3087 ;;		wreg, status,2, status,0, cstack
  3088 ;; Tracked objects:
  3089 ;;		On entry : F/0
  3090 ;;		On exit  : 0/0
  3091 ;;		Unchanged: 0/0
  3092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3093 ;;      Params:         1       0       0       0       0       0       0       0       0
  3094 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3095 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3096 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3097 ;;Total ram usage:        3 bytes
  3098 ;; Hardware stack levels used:    1
  3099 ;; Hardware stack levels required when called:    4
  3100 ;; This function calls:
  3101 ;;		_lcd_command
  3102 ;;		_lcd_write4bits
  3103 ;; This function is called by:
  3104 ;;		_main
  3105 ;; This function uses a non-reentrant model
  3106 ;;
  3107                           
  3108                           	psect	text10
  3109  001BBE                     __ptext10:
  3110                           	opt stack 0
  3111  001BBE                     _lcd_begin:
  3112                           	opt stack 26
  3113                           
  3114                           ; BSR set to: 0
  3115                           ;incstack = 0
  3116                           ;lcd_begin@lines stored from wreg
  3117  001BBE  6E08               	movwf	lcd_begin@lines,c
  3118                           
  3119                           ; BSR set to: 0
  3120                           ;lcd44780.c: 434: if(lines > 1)
  3121  001BC0  0E01               	movlw	1
  3122  001BC2  6408               	cpfsgt	lcd_begin@lines,c
  3123  001BC4  D001               	goto	l3001
  3124                           
  3125                           ; BSR set to: 0
  3126                           ;lcd44780.c: 435: LCD_function |= 0x08;
  3127  001BC6  865E               	bsf	_LCD_function,3,c
  3128  001BC8                     l3001:
  3129                           
  3130                           ; BSR set to: 0
  3131                           ;lcd44780.c: 438: LCD_lines = lines;
  3132  001BC8  C008  F0B6         	movff	lcd_begin@lines,_LCD_lines
  3133                           
  3134                           ; BSR set to: 0
  3135                           ;lcd44780.c: 442: if((dotsize != 0) && (lines == 1))
  3136  001BCC  5006               	movf	lcd_begin@dotsize,w,c
  3137  001BCE  E003               	bz	l3009
  3138                           
  3139                           ; BSR set to: 0
  3140  001BD0  0408               	decf	lcd_begin@lines,w,c
  3141  001BD2  B4D8               	btfsc	status,2,c
  3142                           
  3143                           ; BSR set to: 0
  3144                           ;lcd44780.c: 443: LCD_function |= 0x04;
  3145  001BD4  845E               	bsf	_LCD_function,2,c
  3146  001BD6                     l3009:
  3147                           
  3148                           ; BSR set to: 0
  3149                           ;lcd44780.c: 445: _delay((unsigned long)((15)*(20000000/4000.0)));
  3150  001BD6  0E62               	movlw	98
  3151  001BD8  6E07               	movwf	??_lcd_begin& (0+255),c
  3152  001BDA  0E66               	movlw	102
  3153  001BDC                     u3307:
  3154  001BDC  2EE8               	decfsz	wreg,f,c
  3155  001BDE  D7FE               	goto	u3307
  3156  001BE0  2E07               	decfsz	??_lcd_begin& (0+255),f,c
  3157  001BE2  D7FC               	goto	u3307
  3158                           
  3159                           ;lcd44780.c: 448: LATB &= ~0b0100;
  3160  001BE4  948A               	bcf	3978,2,c	;volatile
  3161                           
  3162                           ;lcd44780.c: 449: LATB &= ~0b1000;
  3163  001BE6  968A               	bcf	3978,3,c	;volatile
  3164                           
  3165                           ;lcd44780.c: 452: if(!(LCD_function & 0x10)) {
  3166  001BE8  B85E               	btfsc	_LCD_function,4,c
  3167  001BEA  D01B               	goto	l3027
  3168                           
  3169                           ;lcd44780.c: 456: lcd_write4bits(0x03);
  3170  001BEC  0E03               	movlw	3
  3171  001BEE  EC77  F013         	call	_lcd_write4bits
  3172                           
  3173                           ;lcd44780.c: 457: _delay((unsigned long)((5)*(20000000/4000.0)));
  3174  001BF2  0E21               	movlw	33
  3175  001BF4  6E07               	movwf	??_lcd_begin& (0+255),c
  3176  001BF6  0E76               	movlw	118
  3177  001BF8                     u3317:
  3178  001BF8  2EE8               	decfsz	wreg,f,c
  3179  001BFA  D7FE               	goto	u3317
  3180  001BFC  2E07               	decfsz	??_lcd_begin& (0+255),f,c
  3181  001BFE  D7FC               	goto	u3317
  3182  001C00  D000               	nop2	
  3183                           
  3184                           ;lcd44780.c: 459: lcd_write4bits(0x03);
  3185  001C02  0E03               	movlw	3
  3186  001C04  EC77  F013         	call	_lcd_write4bits
  3187                           
  3188                           ;lcd44780.c: 460: _delay((unsigned long)((150)*(20000000/4000000.0)));
  3189  001C08  0EFA               	movlw	250
  3190  001C0A                     u3327:
  3191  001C0A  2EE8               	decfsz	wreg,f,c
  3192  001C0C  D7FE               	goto	u3327
  3193                           
  3194                           ;lcd44780.c: 462: lcd_write4bits(0x03);
  3195  001C0E  0E03               	movlw	3
  3196  001C10  EC77  F013         	call	_lcd_write4bits
  3197                           
  3198                           ;lcd44780.c: 463: _delay((unsigned long)((150)*(20000000/4000000.0)));
  3199  001C14  0EFA               	movlw	250
  3200  001C16                     u3337:
  3201  001C16  2EE8               	decfsz	wreg,f,c
  3202  001C18  D7FE               	goto	u3337
  3203                           
  3204                           ;lcd44780.c: 465: lcd_write4bits(0x02);
  3205  001C1A  0E02               	movlw	2
  3206  001C1C  EC77  F013         	call	_lcd_write4bits
  3207                           
  3208                           ;lcd44780.c: 466: }
  3209  001C20  D01C               	goto	l3035
  3210  001C22                     l3027:
  3211                           
  3212                           ;lcd44780.c: 468: else {
  3213                           ;lcd44780.c: 472: lcd_command(0x20 | LCD_function);
  3214  001C22  505E               	movf	_LCD_function,w,c
  3215  001C24  0920               	iorlw	32
  3216  001C26  ECDE  F013         	call	_lcd_command
  3217                           
  3218                           ;lcd44780.c: 473: _delay((unsigned long)((5)*(20000000/4000.0)));
  3219  001C2A  0E21               	movlw	33
  3220  001C2C  6E07               	movwf	??_lcd_begin& (0+255),c
  3221  001C2E  0E76               	movlw	118
  3222  001C30                     u3347:
  3223  001C30  2EE8               	decfsz	wreg,f,c
  3224  001C32  D7FE               	goto	u3347
  3225  001C34  2E07               	decfsz	??_lcd_begin& (0+255),f,c
  3226  001C36  D7FC               	goto	u3347
  3227  001C38  D000               	nop2	
  3228                           
  3229                           ;lcd44780.c: 476: lcd_command(0x20 | LCD_function);
  3230  001C3A  505E               	movf	_LCD_function,w,c
  3231  001C3C  0920               	iorlw	32
  3232  001C3E  ECDE  F013         	call	_lcd_command
  3233                           
  3234                           ;lcd44780.c: 477: _delay((unsigned long)((5)*(20000000/4000.0)));
  3235  001C42  0E21               	movlw	33
  3236  001C44  6E07               	movwf	??_lcd_begin& (0+255),c
  3237  001C46  0E76               	movlw	118
  3238  001C48                     u3357:
  3239  001C48  2EE8               	decfsz	wreg,f,c
  3240  001C4A  D7FE               	goto	u3357
  3241  001C4C  2E07               	decfsz	??_lcd_begin& (0+255),f,c
  3242  001C4E  D7FC               	goto	u3357
  3243  001C50  D000               	nop2	
  3244                           
  3245                           ;lcd44780.c: 481: lcd_command(0x20 | LCD_function);
  3246  001C52  505E               	movf	_LCD_function,w,c
  3247  001C54  0920               	iorlw	32
  3248  001C56  ECDE  F013         	call	_lcd_command
  3249  001C5A                     l3035:
  3250                           
  3251                           ;lcd44780.c: 482: }
  3252                           ;lcd44780.c: 485: lcd_command(0x20 | LCD_function);
  3253  001C5A  505E               	movf	_LCD_function,w,c
  3254  001C5C  0920               	iorlw	32
  3255  001C5E  ECDE  F013         	call	_lcd_command
  3256                           
  3257                           ;lcd44780.c: 488: LCD_ctrl = 0x04 | 0x00 | 0x00;
  3258  001C62  0E04               	movlw	4
  3259  001C64  0100               	movlb	0	; () banked
  3260  001C66  6FB5               	movwf	_LCD_ctrl& (0+255),b
  3261                           
  3262                           ; BSR set to: 0
  3263                           ;lcd44780.c: 489: lcd_command(0x08 | LCD_ctrl);
  3264  001C68  51B5               	movf	_LCD_ctrl& (0+255),w,b
  3265  001C6A  0908               	iorlw	8
  3266  001C6C  ECDE  F013         	call	_lcd_command
  3267                           
  3268                           ;lcd44780.c: 492: lcd_command(0x01);
  3269  001C70  0E01               	movlw	1
  3270  001C72  ECDE  F013         	call	_lcd_command
  3271                           
  3272                           ;lcd44780.c: 493: _delay((unsigned long)((2)*(20000000/4000.0)));
  3273  001C76  0E0D               	movlw	13
  3274  001C78  6E07               	movwf	??_lcd_begin& (0+255),c
  3275  001C7A  0EFC               	movlw	252
  3276  001C7C                     u3367:
  3277  001C7C  2EE8               	decfsz	wreg,f,c
  3278  001C7E  D7FE               	goto	u3367
  3279  001C80  2E07               	decfsz	??_lcd_begin& (0+255),f,c
  3280  001C82  D7FC               	goto	u3367
  3281                           
  3282                           ;lcd44780.c: 496: LCD_mode = 0x02 | 0x00;
  3283  001C84  0E02               	movlw	2
  3284  001C86  0100               	movlb	0	; () banked
  3285  001C88  6FB7               	movwf	_LCD_mode& (0+255),b
  3286                           
  3287                           ; BSR set to: 0
  3288                           ;lcd44780.c: 498: lcd_command(0x04 | LCD_mode);
  3289  001C8A  51B7               	movf	_LCD_mode& (0+255),w,b
  3290  001C8C  0904               	iorlw	4
  3291  001C8E  EFDE  F013         	goto	_lcd_command
  3292  001C92                     __end_of_lcd_begin:
  3293                           	opt stack 0
  3294                           tosu	equ	0xFFF
  3295                           tosh	equ	0xFFE
  3296                           tosl	equ	0xFFD
  3297                           pclath	equ	0xFFA
  3298                           tblptru	equ	0xFF8
  3299                           tblptrh	equ	0xFF7
  3300                           tblptrl	equ	0xFF6
  3301                           tablat	equ	0xFF5
  3302                           prodl	equ	0xFF3
  3303                           intcon	equ	0xFF2
  3304                           intcon2	equ	0xFF1
  3305                           postinc0	equ	0xFEE
  3306                           wreg	equ	0xFE8
  3307                           postdec1	equ	0xFE5
  3308                           fsr1l	equ	0xFE1
  3309                           indf2	equ	0xFDF
  3310                           postinc2	equ	0xFDE
  3311                           postdec2	equ	0xFDD
  3312                           fsr2h	equ	0xFDA
  3313                           fsr2l	equ	0xFD9
  3314                           status	equ	0xFD8
  3315                           
  3316 ;; *************** function _indicator *****************
  3317 ;; Defined at:
  3318 ;;		line 473 in file "../../../src/print.c"
  3319 ;; Parameters:    Size  Location     Type
  3320 ;;  indicate        1    wreg     unsigned char 
  3321 ;; Auto vars:     Size  Location     Type
  3322 ;;  indicate        1   11[COMRAM] unsigned char 
  3323 ;; Return value:  Size  Location     Type
  3324 ;;		None               void
  3325 ;; Registers used:
  3326 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3327 ;; Tracked objects:
  3328 ;;		On entry : 0/0
  3329 ;;		On exit  : 0/0
  3330 ;;		Unchanged: 0/0
  3331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3332 ;;      Params:         0       0       0       0       0       0       0       0       0
  3333 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3334 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3335 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3336 ;;Total ram usage:        1 bytes
  3337 ;; Hardware stack levels used:    1
  3338 ;; Hardware stack levels required when called:    5
  3339 ;; This function calls:
  3340 ;;		_lcd_gotoxy
  3341 ;;		_lcd_puts
  3342 ;; This function is called by:
  3343 ;;		_main
  3344 ;; This function uses a non-reentrant model
  3345 ;;
  3346                           
  3347                           	psect	text11
  3348  002730                     __ptext11:
  3349                           	opt stack 0
  3350  002730                     _indicator:
  3351                           	opt stack 25
  3352                           
  3353                           ;incstack = 0
  3354                           ;indicator@indicate stored from wreg
  3355  002730  6E0C               	movwf	indicator@indicate,c
  3356                           
  3357                           ;print.c: 487: lcd_gotoxy(0, 1);
  3358  002732  0E01               	movlw	1
  3359  002734  6E06               	movwf	lcd_gotoxy@row,c
  3360  002736  0E00               	movlw	0
  3361  002738  ECAA  F012         	call	_lcd_gotoxy
  3362                           
  3363                           ;print.c: 488: if(indicate) {
  3364  00273C  500C               	movf	indicator@indicate,w,c
  3365  00273E  E003               	bz	l3267
  3366                           
  3367                           ;print.c: 489: lcd_puts("-*-");
  3368  002740  0EA1               	movlw	STR_18& (0+255)
  3369  002742  EFC5  F012         	goto	_lcd_puts
  3370  002746                     l3267:
  3371                           
  3372                           ;print.c: 491: lcd_puts("   ");
  3373  002746  0E8C               	movlw	(STR_22+3)& (0+255)
  3374  002748  EFC5  F012         	goto	_lcd_puts
  3375  00274C                     __end_of_indicator:
  3376                           	opt stack 0
  3377                           tosu	equ	0xFFF
  3378                           tosh	equ	0xFFE
  3379                           tosl	equ	0xFFD
  3380                           pclath	equ	0xFFA
  3381                           tblptru	equ	0xFF8
  3382                           tblptrh	equ	0xFF7
  3383                           tblptrl	equ	0xFF6
  3384                           tablat	equ	0xFF5
  3385                           prodl	equ	0xFF3
  3386                           intcon	equ	0xFF2
  3387                           intcon2	equ	0xFF1
  3388                           postinc0	equ	0xFEE
  3389                           wreg	equ	0xFE8
  3390                           postdec1	equ	0xFE5
  3391                           fsr1l	equ	0xFE1
  3392                           indf2	equ	0xFDF
  3393                           postinc2	equ	0xFDE
  3394                           postdec2	equ	0xFDD
  3395                           fsr2h	equ	0xFDA
  3396                           fsr2l	equ	0xFD9
  3397                           status	equ	0xFD8
  3398                           
  3399 ;; *************** function _lcd_puts *****************
  3400 ;; Defined at:
  3401 ;;		line 185 in file "../../../lib/lcd44780.c"
  3402 ;; Parameters:    Size  Location     Type
  3403 ;;  string          1    wreg     PTR const unsigned char 
  3404 ;;		 -> STR_25(5), STR_24(6), STR_23(7), STR_22(7), 
  3405 ;;		 -> STR_20(10), STR_19(4), STR_18(4), STR_17(6), 
  3406 ;; Auto vars:     Size  Location     Type
  3407 ;;  string          1    6[COMRAM] PTR const unsigned char 
  3408 ;;		 -> STR_25(5), STR_24(6), STR_23(7), STR_22(7), 
  3409 ;;		 -> STR_20(10), STR_19(4), STR_18(4), STR_17(6), 
  3410 ;;  i               1    5[COMRAM] unsigned char 
  3411 ;; Return value:  Size  Location     Type
  3412 ;;		None               void
  3413 ;; Registers used:
  3414 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3415 ;; Tracked objects:
  3416 ;;		On entry : 0/0
  3417 ;;		On exit  : 0/0
  3418 ;;		Unchanged: 0/0
  3419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3420 ;;      Params:         0       0       0       0       0       0       0       0       0
  3421 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3422 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3423 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3424 ;;Total ram usage:        3 bytes
  3425 ;; Hardware stack levels used:    1
  3426 ;; Hardware stack levels required when called:    3
  3427 ;; This function calls:
  3428 ;;		_lcd_send
  3429 ;; This function is called by:
  3430 ;;		_print_reading
  3431 ;;		_indicator
  3432 ;;		_main
  3433 ;; This function uses a non-reentrant model
  3434 ;;
  3435                           
  3436                           	psect	text12
  3437  00258A                     __ptext12:
  3438                           	opt stack 0
  3439  00258A                     _lcd_puts:
  3440                           	opt stack 25
  3441                           
  3442                           ;incstack = 0
  3443                           ;lcd_puts@string stored from wreg
  3444  00258A  6E07               	movwf	lcd_puts@string,c
  3445                           
  3446                           ;lcd44780.c: 186: unsigned char i;
  3447                           ;lcd44780.c: 187: for(i = 0; string[i]; i++) lcd_send((string[i]), 1);
  3448  00258C  6A06               	clrf	lcd_puts@i,c
  3449  00258E  D00C               	goto	l2749
  3450  002590                     l2745:
  3451  002590  0E01               	movlw	1
  3452  002592  6E03               	movwf	lcd_send@mode,c
  3453  002594  5007               	movf	lcd_puts@string,w,c
  3454  002596  2406               	addwf	lcd_puts@i,w,c
  3455  002598  6E05               	movwf	??_lcd_puts& (0+255),c
  3456  00259A  C005  FFF6         	movff	??_lcd_puts,tblptrl
  3457  00259E  EC72  F013         	call	PL10	;call to abstracted procedure
  3458  0025A2  ECA6  F013         	call	_lcd_send
  3459  0025A6  2A06               	incf	lcd_puts@i,f,c
  3460  0025A8                     l2749:
  3461  0025A8  5007               	movf	lcd_puts@string,w,c
  3462  0025AA  2406               	addwf	lcd_puts@i,w,c
  3463  0025AC  6E05               	movwf	??_lcd_puts& (0+255),c
  3464  0025AE  C005  FFF6         	movff	??_lcd_puts,tblptrl
  3465  0025B2  EC72  F013         	call	PL10	;call to abstracted procedure
  3466  0025B6  B4D8               	btfsc	status,2,c
  3467  0025B8  0012               	return		;funcret
  3468  0025BA  D7EA               	goto	l2745
  3469  0025BC                     __end_of_lcd_puts:
  3470                           	opt stack 0
  3471                           tosu	equ	0xFFF
  3472                           tosh	equ	0xFFE
  3473                           tosl	equ	0xFFD
  3474                           pclath	equ	0xFFA
  3475                           tblptru	equ	0xFF8
  3476                           tblptrh	equ	0xFF7
  3477                           tblptrl	equ	0xFF6
  3478                           tablat	equ	0xFF5
  3479                           prodl	equ	0xFF3
  3480                           intcon	equ	0xFF2
  3481                           intcon2	equ	0xFF1
  3482                           postinc0	equ	0xFEE
  3483                           wreg	equ	0xFE8
  3484                           postdec1	equ	0xFE5
  3485                           fsr1l	equ	0xFE1
  3486                           indf2	equ	0xFDF
  3487                           postinc2	equ	0xFDE
  3488                           postdec2	equ	0xFDD
  3489                           fsr2h	equ	0xFDA
  3490                           fsr2l	equ	0xFD9
  3491                           status	equ	0xFD8
  3492                           
  3493 ;; *************** function _format_double *****************
  3494 ;; Defined at:
  3495 ;;		line 74 in file "../../../lib/format.c"
  3496 ;; Parameters:    Size  Location     Type
  3497 ;;  num             4   43[BANK0 ] unsigned char 
  3498 ;; Auto vars:     Size  Location     Type
  3499 ;;  weight          4   55[BANK0 ] unsigned char 
  3500 ;;  m               2   61[BANK0 ] short 
  3501 ;;  digit           2   59[BANK0 ] short 
  3502 ;; Return value:  Size  Location     Type
  3503 ;;		None               void
  3504 ;; Registers used:
  3505 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3506 ;; Tracked objects:
  3507 ;;		On entry : 0/0
  3508 ;;		On exit  : 0/0
  3509 ;;		Unchanged: 0/0
  3510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3511 ;;      Params:         0       4       0       0       0       0       0       0       0
  3512 ;;      Locals:         0      16       0       0       0       0       0       0       0
  3513 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3514 ;;      Totals:         0      20       0       0       0       0       0       0       0
  3515 ;;Total ram usage:       20 bytes
  3516 ;; Hardware stack levels used:    1
  3517 ;; Hardware stack levels required when called:    6
  3518 ;; This function calls:
  3519 ;;		___awtofl
  3520 ;;		___fldiv
  3521 ;;		___flge
  3522 ;;		___flmul
  3523 ;;		___flsub
  3524 ;;		___fltol
  3525 ;;		_floor
  3526 ;;		_format_putchar
  3527 ;;		_log10
  3528 ;;		_output_putch
  3529 ;;		_pow
  3530 ;; This function is called by:
  3531 ;;		_main
  3532 ;; This function uses a non-reentrant model
  3533 ;;
  3534                           
  3535                           	psect	text13
  3536  00123C                     __ptext13:
  3537                           	opt stack 0
  3538  00123C                     _format_double:
  3539                           	opt stack 24
  3540                           
  3541                           ;format.c: 75: short m = (short)log10(num);
  3542                           
  3543                           ;incstack = 0
  3544  00123C  C08B  F048         	movff	format_double@num,log10@x
  3545  001240  C08C  F049         	movff	format_double@num+1,log10@x+1
  3546  001244  C08D  F04A         	movff	format_double@num+2,log10@x+2
  3547  001248  C08E  F04B         	movff	format_double@num+3,log10@x+3
  3548  00124C  EC6E  F011         	call	_log10	;wreg free
  3549  001250  C048  F050         	movff	?_log10,___fltol@f1
  3550  001254  C049  F051         	movff	?_log10+1,___fltol@f1+1
  3551  001258  C04A  F052         	movff	?_log10+2,___fltol@f1+2
  3552  00125C  C04B  F053         	movff	?_log10+3,___fltol@f1+3
  3553  001260  EC76  F010         	call	___fltol	;wreg free
  3554  001264  C050  F09D         	movff	?___fltol,format_double@m
  3555  001268  C051  F09E         	movff	?___fltol+1,format_double@m+1
  3556                           
  3557                           ;format.c: 76: short digit;
  3558                           ;format.c: 79: while(num > 0 + 1.19209290e-07) {
  3559  00126C  D0AE               	goto	l3727
  3560  00126E                     l3709:
  3561                           
  3562                           ;format.c: 80: double weight = pow(10.0l, m);
  3563  00126E  C09D  F00C         	movff	format_double@m,___awtofl@c
  3564  001272  C09E  F00D         	movff	format_double@m+1,___awtofl@c+1
  3565  001276  EC71  F012         	call	___awtofl	;wreg free
  3566  00127A  C00C  F08F         	movff	?___awtofl,_format_double$1090
  3567  00127E  C00D  F090         	movff	?___awtofl+1,_format_double$1090+1
  3568  001282  C00E  F091         	movff	?___awtofl+2,_format_double$1090+2
  3569  001286  C00F  F092         	movff	?___awtofl+3,_format_double$1090+3
  3570                           
  3571                           ;format.c: 80: double weight = pow(10.0l, m);
  3572  00128A  0100               	movlb	0	; () banked
  3573  00128C  6B76               	clrf	pow@x& (0+255),b
  3574  00128E  6B77               	clrf	(pow@x+1)& (0+255),b
  3575  001290  0E20               	movlw	32
  3576  001292  6F78               	movwf	(pow@x+2)& (0+255),b
  3577  001294  0E41               	movlw	65
  3578  001296  6F79               	movwf	(pow@x+3)& (0+255),b
  3579  001298  C08F  F07A         	movff	_format_double$1090,pow@y
  3580  00129C  C090  F07B         	movff	_format_double$1090+1,pow@y+1
  3581  0012A0  C091  F07C         	movff	_format_double$1090+2,pow@y+2
  3582  0012A4  C092  F07D         	movff	_format_double$1090+3,pow@y+3
  3583  0012A8  ECF7  F009         	call	_pow	;wreg free
  3584  0012AC  C076  F097         	movff	?_pow,format_double@weight
  3585  0012B0  C077  F098         	movff	?_pow+1,format_double@weight+1
  3586  0012B4  C078  F099         	movff	?_pow+2,format_double@weight+2
  3587  0012B8  C079  F09A         	movff	?_pow+3,format_double@weight+3
  3588                           
  3589                           ; BSR set to: 0
  3590                           ;format.c: 81: digit = (short)floor(num / weight);
  3591  0012BC  C097  F010         	movff	format_double@weight,___fldiv@f2
  3592  0012C0  C098  F011         	movff	format_double@weight+1,___fldiv@f2+1
  3593  0012C4  C099  F012         	movff	format_double@weight+2,___fldiv@f2+2
  3594  0012C8  C09A  F013         	movff	format_double@weight+3,___fldiv@f2+3
  3595  0012CC  C08B  F00C         	movff	format_double@num,___fldiv@f1
  3596  0012D0  C08C  F00D         	movff	format_double@num+1,___fldiv@f1+1
  3597  0012D4  C08D  F00E         	movff	format_double@num+2,___fldiv@f1+2
  3598  0012D8  C08E  F00F         	movff	format_double@num+3,___fldiv@f1+3
  3599  0012DC  EC76  F00F         	call	___fldiv	;wreg free
  3600  0012E0  C00C  F061         	movff	?___fldiv,floor@x
  3601  0012E4  C00D  F062         	movff	?___fldiv+1,floor@x+1
  3602  0012E8  C00E  F063         	movff	?___fldiv+2,floor@x+2
  3603  0012EC  C00F  F064         	movff	?___fldiv+3,floor@x+3
  3604  0012F0  EC7E  F00C         	call	_floor	;wreg free
  3605  0012F4  C061  F093         	movff	?_floor,_format_double$1091
  3606  0012F8  C062  F094         	movff	?_floor+1,_format_double$1091+1
  3607  0012FC  C063  F095         	movff	?_floor+2,_format_double$1091+2
  3608  001300  C064  F096         	movff	?_floor+3,_format_double$1091+3
  3609                           
  3610                           ;format.c: 81: digit = (short)floor(num / weight);
  3611  001304  C093  F050         	movff	_format_double$1091,___fltol@f1
  3612  001308  C094  F051         	movff	_format_double$1091+1,___fltol@f1+1
  3613  00130C  C095  F052         	movff	_format_double$1091+2,___fltol@f1+2
  3614  001310  C096  F053         	movff	_format_double$1091+3,___fltol@f1+3
  3615  001314  EC76  F010         	call	___fltol	;wreg free
  3616  001318  C050  F09B         	movff	?___fltol,format_double@digit
  3617  00131C  C051  F09C         	movff	?___fltol+1,format_double@digit+1
  3618                           
  3619                           ;format.c: 82: num -= (digit * weight);
  3620  001320  C08B  F036         	movff	format_double@num,___flsub@f1
  3621  001324  C08C  F037         	movff	format_double@num+1,___flsub@f1+1
  3622  001328  C08D  F038         	movff	format_double@num+2,___flsub@f1+2
  3623  00132C  C08E  F039         	movff	format_double@num+3,___flsub@f1+3
  3624  001330  C097  F01F         	movff	format_double@weight,___flmul@f2
  3625  001334  C098  F020         	movff	format_double@weight+1,___flmul@f2+1
  3626  001338  C099  F021         	movff	format_double@weight+2,___flmul@f2+2
  3627  00133C  C09A  F022         	movff	format_double@weight+3,___flmul@f2+3
  3628  001340  C09B  F00C         	movff	format_double@digit,___awtofl@c
  3629  001344  C09C  F00D         	movff	format_double@digit+1,___awtofl@c+1
  3630  001348  EC71  F012         	call	___awtofl	;wreg free
  3631  00134C  C00C  F01B         	movff	?___awtofl,___flmul@f1
  3632  001350  C00D  F01C         	movff	?___awtofl+1,___flmul@f1+1
  3633  001354  C00E  F01D         	movff	?___awtofl+2,___flmul@f1+2
  3634  001358  C00F  F01E         	movff	?___awtofl+3,___flmul@f1+3
  3635  00135C  ECB3  F00E         	call	___flmul	;wreg free
  3636  001360  C01B  F03A         	movff	?___flmul,___flsub@f2
  3637  001364  C01C  F03B         	movff	?___flmul+1,___flsub@f2+1
  3638  001368  C01D  F03C         	movff	?___flmul+2,___flsub@f2+2
  3639  00136C  C01E  F03D         	movff	?___flmul+3,___flsub@f2+3
  3640  001370  EC30  F012         	call	___flsub	;wreg free
  3641  001374  C036  F08B         	movff	?___flsub,format_double@num
  3642  001378  C037  F08C         	movff	?___flsub+1,format_double@num+1
  3643  00137C  C038  F08D         	movff	?___flsub+2,format_double@num+2
  3644  001380  C039  F08E         	movff	?___flsub+3,format_double@num+3
  3645                           
  3646                           ;format.c: 83: putchar_ptr((char)('0' + digit));
  3647  001384  D801               	call	u3168
  3648  001386  D00D               	goto	l3721
  3649  001388                     u3168:
  3650  001388  0005               	push	
  3651  00138A  0100               	movlb	0	; () banked
  3652  00138C  6EFA               	movwf	pclath,c
  3653  00138E  51DB               	movf	_putchar_ptr& (0+255),w,b
  3654  001390  6EFD               	movwf	tosl,c
  3655  001392  51DC               	movf	(_putchar_ptr+1)& (0+255),w,b
  3656  001394  6EFE               	movwf	tosh,c
  3657  001396  50F8               	movf	tblptru,w,c
  3658  001398  6EFF               	movwf	tosu,c
  3659  00139A  50FA               	movf	pclath,w,c
  3660  00139C  519B               	movf	format_double@digit& (0+255),w,b
  3661  00139E  0F30               	addlw	48
  3662  0013A0  0012               	return		;indir
  3663  0013A2                     l3721:
  3664                           
  3665                           ;format.c: 84: if(m == 0)
  3666  0013A2  0100               	movlb	0	; () banked
  3667  0013A4  519D               	movf	format_double@m& (0+255),w,b
  3668  0013A6  119E               	iorwf	(format_double@m+1)& (0+255),w,b
  3669  0013A8  E10C               	bnz	l3725
  3670                           
  3671                           ; BSR set to: 0
  3672                           ;format.c: 85: putchar_ptr('.');
  3673  0013AA  D801               	call	u3188
  3674  0013AC  D00A               	goto	l3725
  3675  0013AE                     u3188:
  3676  0013AE  0005               	push	
  3677  0013B0  6EFA               	movwf	pclath,c
  3678  0013B2  51DB               	movf	_putchar_ptr& (0+255),w,b
  3679  0013B4  6EFD               	movwf	tosl,c
  3680  0013B6  51DC               	movf	(_putchar_ptr+1)& (0+255),w,b
  3681  0013B8  6EFE               	movwf	tosh,c
  3682  0013BA  50F8               	movf	tblptru,w,c
  3683  0013BC  6EFF               	movwf	tosu,c
  3684  0013BE  50FA               	movf	pclath,w,c
  3685  0013C0  0C2E               	retlw	46	;indir
  3686  0013C2                     l3725:
  3687                           
  3688                           ;format.c: 86: m--;
  3689  0013C2  0100               	movlb	0	; () banked
  3690  0013C4  079D               	decf	format_double@m& (0+255),f,b
  3691  0013C6  A0D8               	btfss	status,0,c
  3692  0013C8  079E               	decf	(format_double@m+1)& (0+255),f,b
  3693  0013CA                     l3727:
  3694  0013CA  6A02               	clrf	___flge@ff1,c
  3695  0013CC  6A03               	clrf	___flge@ff1+1,c
  3696  0013CE  6A04               	clrf	___flge@ff1+2,c
  3697  0013D0  0E34               	movlw	52
  3698  0013D2  6E05               	movwf	___flge@ff1+3,c
  3699  0013D4  C08B  F006         	movff	format_double@num,___flge@ff2
  3700  0013D8  C08C  F007         	movff	format_double@num+1,___flge@ff2+1
  3701  0013DC  C08D  F008         	movff	format_double@num+2,___flge@ff2+2
  3702  0013E0  C08E  F009         	movff	format_double@num+3,___flge@ff2+3
  3703  0013E4  EC9B  F011         	call	___flge
  3704  0013E8  B0D8               	btfsc	status,0,c
  3705  0013EA  0012               	return		;funcret
  3706  0013EC  D740               	goto	l3709
  3707  0013EE                     __end_of_format_double:
  3708                           	opt stack 0
  3709                           tosu	equ	0xFFF
  3710                           tosh	equ	0xFFE
  3711                           tosl	equ	0xFFD
  3712                           pclath	equ	0xFFA
  3713                           tblptru	equ	0xFF8
  3714                           tblptrh	equ	0xFF7
  3715                           tblptrl	equ	0xFF6
  3716                           tablat	equ	0xFF5
  3717                           prodl	equ	0xFF3
  3718                           intcon	equ	0xFF2
  3719                           intcon2	equ	0xFF1
  3720                           postinc0	equ	0xFEE
  3721                           wreg	equ	0xFE8
  3722                           postdec1	equ	0xFE5
  3723                           fsr1l	equ	0xFE1
  3724                           indf2	equ	0xFDF
  3725                           postinc2	equ	0xFDE
  3726                           postdec2	equ	0xFDD
  3727                           fsr2h	equ	0xFDA
  3728                           fsr2l	equ	0xFD9
  3729                           status	equ	0xFD8
  3730                           
  3731 ;; *************** function _pow *****************
  3732 ;; Defined at:
  3733 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\pow.c"
  3734 ;; Parameters:    Size  Location     Type
  3735 ;;  x               4   22[BANK0 ] short 
  3736 ;;  y               4   26[BANK0 ] short 
  3737 ;; Auto vars:     Size  Location     Type
  3738 ;;  yi              4   39[BANK0 ] unsigned long 
  3739 ;;  sign            1   38[BANK0 ] unsigned char 
  3740 ;; Return value:  Size  Location     Type
  3741 ;;                  4   22[BANK0 ] unsigned char 
  3742 ;; Registers used:
  3743 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3744 ;; Tracked objects:
  3745 ;;		On entry : F/0
  3746 ;;		On exit  : F/0
  3747 ;;		Unchanged: 0/0
  3748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3749 ;;      Params:         0       8       0       0       0       0       0       0       0
  3750 ;;      Locals:         0      13       0       0       0       0       0       0       0
  3751 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3752 ;;      Totals:         0      21       0       0       0       0       0       0       0
  3753 ;;Total ram usage:       21 bytes
  3754 ;; Hardware stack levels used:    1
  3755 ;; Hardware stack levels required when called:    5
  3756 ;; This function calls:
  3757 ;;		___flge
  3758 ;;		___flmul
  3759 ;;		___flneg
  3760 ;;		___fltol
  3761 ;;		___lltofl
  3762 ;;		_exp
  3763 ;;		_log
  3764 ;; This function is called by:
  3765 ;;		_format_double
  3766 ;; This function uses a non-reentrant model
  3767 ;;
  3768                           
  3769                           	psect	text14
  3770  0013EE                     __ptext14:
  3771                           	opt stack 0
  3772  0013EE                     _pow:
  3773                           	opt stack 24
  3774                           
  3775                           ; BSR set to: 0
  3776                           
  3777                           ;incstack = 0
  3778  0013EE  6B86               	clrf	pow@sign& (0+255),b
  3779                           
  3780                           ; BSR set to: 0
  3781  0013F0  5176               	movf	pow@x& (0+255),w,b
  3782  0013F2  1177               	iorwf	(pow@x+1)& (0+255),w,b
  3783  0013F4  1178               	iorwf	(pow@x+2)& (0+255),w,b
  3784  0013F6  1179               	iorwf	(pow@x+3)& (0+255),w,b
  3785  0013F8  E114               	bnz	l3675
  3786                           
  3787                           ; BSR set to: 0
  3788  0013FA  6A02               	clrf	___flge@ff1,c
  3789  0013FC  6A03               	clrf	___flge@ff1+1,c
  3790  0013FE  6A04               	clrf	___flge@ff1+2,c
  3791  001400  6A05               	clrf	___flge@ff1+3,c
  3792  001402  C07A  F006         	movff	pow@y,___flge@ff2
  3793  001406  C07B  F007         	movff	pow@y+1,___flge@ff2+1
  3794  00140A  C07C  F008         	movff	pow@y+2,___flge@ff2+2
  3795  00140E  C07D  F009         	movff	pow@y+3,___flge@ff2+3
  3796  001412  EC9B  F011         	call	___flge	;wreg free
  3797  001416  0100               	movlb	0	; () banked
  3798  001418  6B76               	clrf	?_pow& (0+255),b
  3799  00141A  6B77               	clrf	(?_pow+1)& (0+255),b
  3800  00141C  6B78               	clrf	(?_pow+2)& (0+255),b
  3801  00141E  6B79               	clrf	(?_pow+3)& (0+255),b
  3802  001420  0012               	return	
  3803  001422                     l3675:
  3804                           
  3805                           ; BSR set to: 0
  3806  001422  517A               	movf	pow@y& (0+255),w,b
  3807  001424  117B               	iorwf	(pow@y+1)& (0+255),w,b
  3808  001426  117C               	iorwf	(pow@y+2)& (0+255),w,b
  3809  001428  117D               	iorwf	(pow@y+3)& (0+255),w,b
  3810  00142A  E108               	bnz	l3681
  3811                           
  3812                           ; BSR set to: 0
  3813  00142C  0E00               	movlw	0
  3814  00142E  6F76               	movwf	?_pow& (0+255),b
  3815  001430  6F77               	movwf	(?_pow+1)& (0+255),b
  3816  001432  0E80               	movlw	128
  3817  001434  6F78               	movwf	(?_pow+2)& (0+255),b
  3818  001436  0E3F               	movlw	63
  3819  001438  6F79               	movwf	(?_pow+3)& (0+255),b
  3820  00143A  0C3F               	retlw	63
  3821  00143C                     l3681:
  3822                           
  3823                           ; BSR set to: 0
  3824  00143C  AF79               	btfss	(pow@x+3)& (0+255),7,b
  3825  00143E  D043               	goto	l3691
  3826                           
  3827                           ; BSR set to: 0
  3828  001440  C07A  F050         	movff	pow@y,___fltol@f1
  3829  001444  C07B  F051         	movff	pow@y+1,___fltol@f1+1
  3830  001448  C07C  F052         	movff	pow@y+2,___fltol@f1+2
  3831  00144C  C07D  F053         	movff	pow@y+3,___fltol@f1+3
  3832  001450  EC76  F010         	call	___fltol	;wreg free
  3833  001454  C050  F087         	movff	?___fltol,pow@yi
  3834  001458  C051  F088         	movff	?___fltol+1,pow@yi+1
  3835  00145C  C052  F089         	movff	?___fltol+2,pow@yi+2
  3836  001460  C053  F08A         	movff	?___fltol+3,pow@yi+3
  3837  001464  C087  F00C         	movff	pow@yi,___lltofl@c
  3838  001468  C088  F00D         	movff	pow@yi+1,___lltofl@c+1
  3839  00146C  C089  F00E         	movff	pow@yi+2,___lltofl@c+2
  3840  001470  C08A  F00F         	movff	pow@yi+3,___lltofl@c+3
  3841  001474  EC0E  F013         	call	___lltofl	;wreg free
  3842  001478  0100               	movlb	0	; () banked
  3843  00147A  517A               	movf	pow@y& (0+255),w,b
  3844  00147C  180C               	xorwf	?___lltofl,w,c
  3845  00147E  E109               	bnz	u3140
  3846  001480  517B               	movf	(pow@y+1)& (0+255),w,b
  3847  001482  180D               	xorwf	?___lltofl+1,w,c
  3848  001484  E106               	bnz	u3140
  3849  001486  517C               	movf	(pow@y+2)& (0+255),w,b
  3850  001488  180E               	xorwf	?___lltofl+2,w,c
  3851  00148A  E103               	bnz	u3140
  3852  00148C  517D               	movf	(pow@y+3)& (0+255),w,b
  3853  00148E  180F               	xorwf	?___lltofl+3,w,c
  3854  001490  E005               	bz	l3687
  3855  001492                     u3140:
  3856                           
  3857                           ; BSR set to: 0
  3858  001492  6B76               	clrf	?_pow& (0+255),b
  3859  001494  6B77               	clrf	(?_pow+1)& (0+255),b
  3860  001496  6B78               	clrf	(?_pow+2)& (0+255),b
  3861  001498  6B79               	clrf	(?_pow+3)& (0+255),b
  3862  00149A  0012               	return	
  3863  00149C                     l3687:
  3864                           
  3865                           ; BSR set to: 0
  3866  00149C  5187               	movf	pow@yi& (0+255),w,b
  3867  00149E  0B01               	andlw	1
  3868  0014A0  6F86               	movwf	pow@sign& (0+255),b
  3869                           
  3870                           ; BSR set to: 0
  3871  0014A2  C076  F002         	movff	pow@x,___flneg@f1
  3872  0014A6  C077  F003         	movff	pow@x+1,___flneg@f1+1
  3873  0014AA  C078  F004         	movff	pow@x+2,___flneg@f1+2
  3874  0014AE  C079  F005         	movff	pow@x+3,___flneg@f1+3
  3875  0014B2  EC88  F013         	call	___flneg	;wreg free
  3876  0014B6  C002  F076         	movff	?___flneg,pow@x
  3877  0014BA  C003  F077         	movff	?___flneg+1,pow@x+1
  3878  0014BE  C004  F078         	movff	?___flneg+2,pow@x+2
  3879  0014C2  C005  F079         	movff	?___flneg+3,pow@x+3
  3880  0014C6                     l3691:
  3881                           
  3882                           ; BSR set to: 0
  3883  0014C6  C076  F042         	movff	pow@x,log@x
  3884  0014CA  C077  F043         	movff	pow@x+1,log@x+1
  3885  0014CE  C078  F044         	movff	pow@x+2,log@x+2
  3886  0014D2  C079  F045         	movff	pow@x+3,log@x+3
  3887  0014D6  EC6D  F00B         	call	_log	;wreg free
  3888  0014DA  C042  F07E         	movff	?_log,_pow$1105
  3889  0014DE  C043  F07F         	movff	?_log+1,_pow$1105+1
  3890  0014E2  C044  F080         	movff	?_log+2,_pow$1105+2
  3891  0014E6  C045  F081         	movff	?_log+3,_pow$1105+3
  3892  0014EA  C07E  F01B         	movff	_pow$1105,___flmul@f1
  3893  0014EE  C07F  F01C         	movff	_pow$1105+1,___flmul@f1+1
  3894  0014F2  C080  F01D         	movff	_pow$1105+2,___flmul@f1+2
  3895  0014F6  C081  F01E         	movff	_pow$1105+3,___flmul@f1+3
  3896  0014FA  C07A  F01F         	movff	pow@y,___flmul@f2
  3897  0014FE  C07B  F020         	movff	pow@y+1,___flmul@f2+1
  3898  001502  C07C  F021         	movff	pow@y+2,___flmul@f2+2
  3899  001506  C07D  F022         	movff	pow@y+3,___flmul@f2+3
  3900  00150A  ECB3  F00E         	call	___flmul	;wreg free
  3901  00150E  C01B  F082         	movff	?___flmul,_pow$1106
  3902  001512  C01C  F083         	movff	?___flmul+1,_pow$1106+1
  3903  001516  C01D  F084         	movff	?___flmul+2,_pow$1106+2
  3904  00151A  C01E  F085         	movff	?___flmul+3,_pow$1106+3
  3905  00151E  C082  F06B         	movff	_pow$1106,exp@x
  3906  001522  C083  F06C         	movff	_pow$1106+1,exp@x+1
  3907  001526  C084  F06D         	movff	_pow$1106+2,exp@x+2
  3908  00152A  C085  F06E         	movff	_pow$1106+3,exp@x+3
  3909  00152E  EC10  F008         	call	_exp	;wreg free
  3910  001532  C06B  F076         	movff	?_exp,pow@x
  3911  001536  C06C  F077         	movff	?_exp+1,pow@x+1
  3912  00153A  C06D  F078         	movff	?_exp+2,pow@x+2
  3913  00153E  C06E  F079         	movff	?_exp+3,pow@x+3
  3914  001542  0100               	movlb	0	; () banked
  3915  001544  5186               	movf	pow@sign& (0+255),w,b
  3916  001546  E013               	bz	l1118
  3917                           
  3918                           ; BSR set to: 0
  3919  001548  C076  F002         	movff	pow@x,___flneg@f1
  3920  00154C  C077  F003         	movff	pow@x+1,___flneg@f1+1
  3921  001550  C078  F004         	movff	pow@x+2,___flneg@f1+2
  3922  001554  C079  F005         	movff	pow@x+3,___flneg@f1+3
  3923  001558  EC88  F013         	call	___flneg	;wreg free
  3924  00155C  C002  F076         	movff	?___flneg,?_pow
  3925  001560  C003  F077         	movff	?___flneg+1,?_pow+1
  3926  001564  C004  F078         	movff	?___flneg+2,?_pow+2
  3927  001568  C005  F079         	movff	?___flneg+3,?_pow+3
  3928  00156C  0012               	return	
  3929  00156E                     l1118:
  3930                           
  3931                           ; BSR set to: 0
  3932  00156E  C076  F076         	movff	pow@x,?_pow
  3933  001572  C077  F077         	movff	pow@x+1,?_pow+1
  3934  001576  C078  F078         	movff	pow@x+2,?_pow+2
  3935  00157A  C079  F079         	movff	pow@x+3,?_pow+3
  3936                           
  3937                           ; BSR set to: 0
  3938  00157E  0012               	return		;funcret
  3939  001580                     __end_of_pow:
  3940                           	opt stack 0
  3941                           tosu	equ	0xFFF
  3942                           tosh	equ	0xFFE
  3943                           tosl	equ	0xFFD
  3944                           pclath	equ	0xFFA
  3945                           tblptru	equ	0xFF8
  3946                           tblptrh	equ	0xFF7
  3947                           tblptrl	equ	0xFF6
  3948                           tablat	equ	0xFF5
  3949                           prodl	equ	0xFF3
  3950                           intcon	equ	0xFF2
  3951                           intcon2	equ	0xFF1
  3952                           postinc0	equ	0xFEE
  3953                           wreg	equ	0xFE8
  3954                           postdec1	equ	0xFE5
  3955                           fsr1l	equ	0xFE1
  3956                           indf2	equ	0xFDF
  3957                           postinc2	equ	0xFDE
  3958                           postdec2	equ	0xFDD
  3959                           fsr2h	equ	0xFDA
  3960                           fsr2l	equ	0xFD9
  3961                           status	equ	0xFD8
  3962                           
  3963 ;; *************** function _exp *****************
  3964 ;; Defined at:
  3965 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\exp.c"
  3966 ;; Parameters:    Size  Location     Type
  3967 ;;  x               4   11[BANK0 ] unsigned char 
  3968 ;; Auto vars:     Size  Location     Type
  3969 ;;  exponent        2   19[BANK0 ] int 
  3970 ;;  sign            1   21[BANK0 ] unsigned char 
  3971 ;; Return value:  Size  Location     Type
  3972 ;;                  4   11[BANK0 ] unsigned char 
  3973 ;; Registers used:
  3974 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3975 ;; Tracked objects:
  3976 ;;		On entry : 0/0
  3977 ;;		On exit  : 0/0
  3978 ;;		Unchanged: 0/0
  3979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3980 ;;      Params:         0       4       0       0       0       0       0       0       0
  3981 ;;      Locals:         0       7       0       0       0       0       0       0       0
  3982 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3983 ;;      Totals:         0      11       0       0       0       0       0       0       0
  3984 ;;Total ram usage:       11 bytes
  3985 ;; Hardware stack levels used:    1
  3986 ;; Hardware stack levels required when called:    4
  3987 ;; This function calls:
  3988 ;;		___awtofl
  3989 ;;		___fldiv
  3990 ;;		___flge
  3991 ;;		___flmul
  3992 ;;		___flneg
  3993 ;;		___flsub
  3994 ;;		___fltol
  3995 ;;		_eval_poly
  3996 ;;		_floor
  3997 ;;		_ldexp
  3998 ;; This function is called by:
  3999 ;;		_pow
  4000 ;; This function uses a non-reentrant model
  4001 ;;
  4002                           
  4003                           	psect	text15
  4004  001020                     __ptext15:
  4005                           	opt stack 0
  4006  001020                     _exp:
  4007                           	opt stack 24
  4008                           
  4009                           ; BSR set to: 0
  4010                           ;incstack = 0
  4011  001020  0100               	movlb	0	; () banked
  4012  001022  516B               	movf	exp@x& (0+255),w,b
  4013  001024  116C               	iorwf	(exp@x+1)& (0+255),w,b
  4014  001026  116D               	iorwf	(exp@x+2)& (0+255),w,b
  4015  001028  116E               	iorwf	(exp@x+3)& (0+255),w,b
  4016  00102A  E108               	bnz	l3629
  4017                           
  4018                           ; BSR set to: 0
  4019  00102C  0E00               	movlw	0
  4020  00102E  6F6B               	movwf	?_exp& (0+255),b
  4021  001030  6F6C               	movwf	(?_exp+1)& (0+255),b
  4022  001032  0E80               	movlw	128
  4023  001034  6F6D               	movwf	(?_exp+2)& (0+255),b
  4024  001036  0E3F               	movlw	63
  4025  001038  6F6E               	movwf	(?_exp+3)& (0+255),b
  4026  00103A  0C3F               	retlw	63
  4027  00103C                     l3629:
  4028                           
  4029                           ; BSR set to: 0
  4030  00103C  0E18               	movlw	24
  4031  00103E  6E02               	movwf	___flge@ff1,c
  4032  001040  0E72               	movlw	114
  4033  001042  6E03               	movwf	___flge@ff1+1,c
  4034  001044  0E31               	movlw	49
  4035  001046  6E04               	movwf	___flge@ff1+2,c
  4036  001048  0E44               	movlw	68
  4037  00104A  6E05               	movwf	___flge@ff1+3,c
  4038  00104C  C06B  F006         	movff	exp@x,___flge@ff2
  4039  001050  C06C  F007         	movff	exp@x+1,___flge@ff2+1
  4040  001054  C06D  F008         	movff	exp@x+2,___flge@ff2+2
  4041  001058  C06E  F009         	movff	exp@x+3,___flge@ff2+3
  4042  00105C  EC9B  F011         	call	___flge	;wreg free
  4043  001060  E207               	bc	l3635
  4044  001062  0100               	movlb	0	; () banked
  4045  001064  696B               	setf	?_exp& (0+255),b
  4046  001066  696C               	setf	(?_exp+1)& (0+255),b
  4047  001068  0E7F               	movlw	127
  4048  00106A  6F6D               	movwf	(?_exp+2)& (0+255),b
  4049  00106C  6F6E               	movwf	(?_exp+3)& (0+255),b
  4050  00106E  0C7F               	retlw	127
  4051  001070                     l3635:
  4052  001070  C06B  F002         	movff	exp@x,___flge@ff1
  4053  001074  C06C  F003         	movff	exp@x+1,___flge@ff1+1
  4054  001078  C06D  F004         	movff	exp@x+2,___flge@ff1+2
  4055  00107C  C06E  F005         	movff	exp@x+3,___flge@ff1+3
  4056  001080  0E87               	movlw	135
  4057  001082  6E06               	movwf	___flge@ff2,c
  4058  001084  0E48               	movlw	72
  4059  001086  6E07               	movwf	___flge@ff2+1,c
  4060  001088  0E3A               	movlw	58
  4061  00108A  6E08               	movwf	___flge@ff2+2,c
  4062  00108C  0EC4               	movlw	196
  4063  00108E  6E09               	movwf	___flge@ff2+3,c
  4064  001090  EC9B  F011         	call	___flge	;wreg free
  4065  001094  E206               	bc	l3639
  4066  001096  0100               	movlb	0	; () banked
  4067  001098  6B6B               	clrf	?_exp& (0+255),b
  4068  00109A  6B6C               	clrf	(?_exp+1)& (0+255),b
  4069  00109C  6B6D               	clrf	(?_exp+2)& (0+255),b
  4070  00109E  6B6E               	clrf	(?_exp+3)& (0+255),b
  4071  0010A0  0012               	return	
  4072  0010A2                     l3639:
  4073  0010A2  0100               	movlb	0	; () banked
  4074  0010A4  0E01               	movlw	1
  4075  0010A6  AF6E               	btfss	(exp@x+3)& (0+255),7,b
  4076  0010A8  0E00               	movlw	0
  4077  0010AA  6F75               	movwf	exp@sign& (0+255),b
  4078                           
  4079                           ; BSR set to: 0
  4080  0010AC  5175               	movf	exp@sign& (0+255),w,b
  4081  0010AE  E012               	bz	l1143
  4082                           
  4083                           ; BSR set to: 0
  4084  0010B0  C06B  F002         	movff	exp@x,___flneg@f1
  4085  0010B4  C06C  F003         	movff	exp@x+1,___flneg@f1+1
  4086  0010B8  C06D  F004         	movff	exp@x+2,___flneg@f1+2
  4087  0010BC  C06E  F005         	movff	exp@x+3,___flneg@f1+3
  4088  0010C0  EC88  F013         	call	___flneg	;wreg free
  4089  0010C4  C002  F06B         	movff	?___flneg,exp@x
  4090  0010C8  C003  F06C         	movff	?___flneg+1,exp@x+1
  4091  0010CC  C004  F06D         	movff	?___flneg+2,exp@x+2
  4092  0010D0  C005  F06E         	movff	?___flneg+3,exp@x+3
  4093  0010D4                     l1143:
  4094                           
  4095                           ; BSR set to: 0
  4096  0010D4  C06B  F01B         	movff	exp@x,___flmul@f1
  4097  0010D8  C06C  F01C         	movff	exp@x+1,___flmul@f1+1
  4098  0010DC  C06D  F01D         	movff	exp@x+2,___flmul@f1+2
  4099  0010E0  C06E  F01E         	movff	exp@x+3,___flmul@f1+3
  4100  0010E4  0E3B               	movlw	59
  4101  0010E6  6E1F               	movwf	___flmul@f2,c
  4102  0010E8  0EAA               	movlw	170
  4103  0010EA  6E20               	movwf	___flmul@f2+1,c
  4104  0010EC  0EB8               	movlw	184
  4105  0010EE  6E21               	movwf	___flmul@f2+2,c
  4106  0010F0  0E3F               	movlw	63
  4107  0010F2  6E22               	movwf	___flmul@f2+3,c
  4108  0010F4  ECB3  F00E         	call	___flmul	;wreg free
  4109  0010F8  C01B  F06B         	movff	?___flmul,exp@x
  4110  0010FC  C01C  F06C         	movff	?___flmul+1,exp@x+1
  4111  001100  C01D  F06D         	movff	?___flmul+2,exp@x+2
  4112  001104  C01E  F06E         	movff	?___flmul+3,exp@x+3
  4113  001108  C06B  F061         	movff	exp@x,floor@x
  4114  00110C  C06C  F062         	movff	exp@x+1,floor@x+1
  4115  001110  C06D  F063         	movff	exp@x+2,floor@x+2
  4116  001114  C06E  F064         	movff	exp@x+3,floor@x+3
  4117  001118  EC7E  F00C         	call	_floor	;wreg free
  4118  00111C  C061  F06F         	movff	?_floor,_exp$1107
  4119  001120  C062  F070         	movff	?_floor+1,_exp$1107+1
  4120  001124  C063  F071         	movff	?_floor+2,_exp$1107+2
  4121  001128  C064  F072         	movff	?_floor+3,_exp$1107+3
  4122  00112C  C06F  F050         	movff	_exp$1107,___fltol@f1
  4123  001130  C070  F051         	movff	_exp$1107+1,___fltol@f1+1
  4124  001134  C071  F052         	movff	_exp$1107+2,___fltol@f1+2
  4125  001138  C072  F053         	movff	_exp$1107+3,___fltol@f1+3
  4126  00113C  EC76  F010         	call	___fltol	;wreg free
  4127  001140  C050  F073         	movff	?___fltol,exp@exponent
  4128  001144  C051  F074         	movff	?___fltol+1,exp@exponent+1
  4129  001148  C06B  F036         	movff	exp@x,___flsub@f1
  4130  00114C  C06C  F037         	movff	exp@x+1,___flsub@f1+1
  4131  001150  C06D  F038         	movff	exp@x+2,___flsub@f1+2
  4132  001154  C06E  F039         	movff	exp@x+3,___flsub@f1+3
  4133  001158  C073  F00C         	movff	exp@exponent,___awtofl@c
  4134  00115C  C074  F00D         	movff	exp@exponent+1,___awtofl@c+1
  4135  001160  EC71  F012         	call	___awtofl	;wreg free
  4136  001164  C00C  F03A         	movff	?___awtofl,___flsub@f2
  4137  001168  C00D  F03B         	movff	?___awtofl+1,___flsub@f2+1
  4138  00116C  C00E  F03C         	movff	?___awtofl+2,___flsub@f2+2
  4139  001170  C00F  F03D         	movff	?___awtofl+3,___flsub@f2+3
  4140  001174  EC30  F012         	call	___flsub	;wreg free
  4141  001178  C036  F06B         	movff	?___flsub,exp@x
  4142  00117C  C037  F06C         	movff	?___flsub+1,exp@x+1
  4143  001180  C038  F06D         	movff	?___flsub+2,exp@x+2
  4144  001184  C039  F06E         	movff	?___flsub+3,exp@x+3
  4145  001188  C06B  F036         	movff	exp@x,eval_poly@x
  4146  00118C  C06C  F037         	movff	exp@x+1,eval_poly@x+1
  4147  001190  C06D  F038         	movff	exp@x+2,eval_poly@x+2
  4148  001194  C06E  F039         	movff	exp@x+3,eval_poly@x+3
  4149  001198  0E01               	movlw	low exp@coeff
  4150  00119A  6E3A               	movwf	eval_poly@d,c
  4151  00119C  6A3C               	clrf	eval_poly@n+1,c
  4152  00119E  0E09               	movlw	9
  4153  0011A0  6E3B               	movwf	eval_poly@n,c
  4154  0011A2  ECCE  F00F         	call	_eval_poly	;wreg free
  4155  0011A6  C036  F042         	movff	?_eval_poly,ldexp@value
  4156  0011AA  C037  F043         	movff	?_eval_poly+1,ldexp@value+1
  4157  0011AE  C038  F044         	movff	?_eval_poly+2,ldexp@value+2
  4158  0011B2  C039  F045         	movff	?_eval_poly+3,ldexp@value+3
  4159  0011B6  C073  F046         	movff	exp@exponent,ldexp@newexp
  4160  0011BA  C074  F047         	movff	exp@exponent+1,ldexp@newexp+1
  4161  0011BE  EC25  F010         	call	_ldexp	;wreg free
  4162  0011C2  C042  F06B         	movff	?_ldexp,exp@x
  4163  0011C6  C043  F06C         	movff	?_ldexp+1,exp@x+1
  4164  0011CA  C044  F06D         	movff	?_ldexp+2,exp@x+2
  4165  0011CE  C045  F06E         	movff	?_ldexp+3,exp@x+3
  4166  0011D2  0100               	movlb	0	; () banked
  4167  0011D4  5175               	movf	exp@sign& (0+255),w,b
  4168  0011D6  E029               	bz	l1144
  4169                           
  4170                           ; BSR set to: 0
  4171  0011D8  296B               	incf	exp@x& (0+255),w,b
  4172  0011DA  E10D               	bnz	l3659
  4173  0011DC  296C               	incf	(exp@x+1)& (0+255),w,b
  4174  0011DE  E10B               	bnz	l3659
  4175  0011E0  0E7F               	movlw	127
  4176  0011E2  196D               	xorwf	(exp@x+2)& (0+255),w,b
  4177  0011E4  E108               	bnz	l3659
  4178  0011E6  0E7F               	movlw	127
  4179  0011E8  196E               	xorwf	(exp@x+3)& (0+255),w,b
  4180  0011EA  E105               	bnz	l3659
  4181                           
  4182                           ; BSR set to: 0
  4183  0011EC  6B6B               	clrf	?_exp& (0+255),b
  4184  0011EE  6B6C               	clrf	(?_exp+1)& (0+255),b
  4185  0011F0  6B6D               	clrf	(?_exp+2)& (0+255),b
  4186  0011F2  6B6E               	clrf	(?_exp+3)& (0+255),b
  4187  0011F4  0012               	return	
  4188  0011F6                     l3659:
  4189                           
  4190                           ; BSR set to: 0
  4191  0011F6  0E00               	movlw	0
  4192  0011F8  6E0C               	movwf	___fldiv@f1,c
  4193  0011FA  6E0D               	movwf	___fldiv@f1+1,c
  4194  0011FC  0E80               	movlw	128
  4195  0011FE  6E0E               	movwf	___fldiv@f1+2,c
  4196  001200  0E3F               	movlw	63
  4197  001202  6E0F               	movwf	___fldiv@f1+3,c
  4198  001204  C06B  F010         	movff	exp@x,___fldiv@f2
  4199  001208  C06C  F011         	movff	exp@x+1,___fldiv@f2+1
  4200  00120C  C06D  F012         	movff	exp@x+2,___fldiv@f2+2
  4201  001210  C06E  F013         	movff	exp@x+3,___fldiv@f2+3
  4202  001214  EC76  F00F         	call	___fldiv	;wreg free
  4203  001218  C00C  F06B         	movff	?___fldiv,?_exp
  4204  00121C  C00D  F06C         	movff	?___fldiv+1,?_exp+1
  4205  001220  C00E  F06D         	movff	?___fldiv+2,?_exp+2
  4206  001224  C00F  F06E         	movff	?___fldiv+3,?_exp+3
  4207  001228  0012               	return	
  4208  00122A                     l1144:
  4209                           
  4210                           ; BSR set to: 0
  4211  00122A  C06B  F06B         	movff	exp@x,?_exp
  4212  00122E  C06C  F06C         	movff	exp@x+1,?_exp+1
  4213  001232  C06D  F06D         	movff	exp@x+2,?_exp+2
  4214  001236  C06E  F06E         	movff	exp@x+3,?_exp+3
  4215  00123A  0012               	return		;funcret
  4216  00123C                     __end_of_exp:
  4217                           	opt stack 0
  4218                           tosu	equ	0xFFF
  4219                           tosh	equ	0xFFE
  4220                           tosl	equ	0xFFD
  4221                           pclath	equ	0xFFA
  4222                           tblptru	equ	0xFF8
  4223                           tblptrh	equ	0xFF7
  4224                           tblptrl	equ	0xFF6
  4225                           tablat	equ	0xFF5
  4226                           prodl	equ	0xFF3
  4227                           intcon	equ	0xFF2
  4228                           intcon2	equ	0xFF1
  4229                           postinc0	equ	0xFEE
  4230                           wreg	equ	0xFE8
  4231                           postdec1	equ	0xFE5
  4232                           fsr1l	equ	0xFE1
  4233                           indf2	equ	0xFDF
  4234                           postinc2	equ	0xFDE
  4235                           postdec2	equ	0xFDD
  4236                           fsr2h	equ	0xFDA
  4237                           fsr2l	equ	0xFD9
  4238                           status	equ	0xFD8
  4239                           
  4240 ;; *************** function _ldexp *****************
  4241 ;; Defined at:
  4242 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  4243 ;; Parameters:    Size  Location     Type
  4244 ;;  value           4   65[COMRAM] unsigned char 
  4245 ;;  newexp          2   69[COMRAM] int 
  4246 ;; Auto vars:     Size  Location     Type
  4247 ;;		None
  4248 ;; Return value:  Size  Location     Type
  4249 ;;                  4   65[COMRAM] int 
  4250 ;; Registers used:
  4251 ;;		wreg, status,2, status,0
  4252 ;; Tracked objects:
  4253 ;;		On entry : 0/0
  4254 ;;		On exit  : 0/0
  4255 ;;		Unchanged: 0/0
  4256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4257 ;;      Params:         6       0       0       0       0       0       0       0       0
  4258 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4259 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4260 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4261 ;;Total ram usage:        8 bytes
  4262 ;; Hardware stack levels used:    1
  4263 ;; Hardware stack levels required when called:    1
  4264 ;; This function calls:
  4265 ;;		Nothing
  4266 ;; This function is called by:
  4267 ;;		_exp
  4268 ;; This function uses a non-reentrant model
  4269 ;;
  4270                           
  4271                           	psect	text16
  4272  00204A                     __ptext16:
  4273                           	opt stack 0
  4274  00204A                     _ldexp:
  4275                           	opt stack 26
  4276                           
  4277                           ;incstack = 0
  4278  00204A  5042               	movf	ldexp@value,w,c
  4279  00204C  1043               	iorwf	ldexp@value+1,w,c
  4280  00204E  1044               	iorwf	ldexp@value+2,w,c
  4281  002050  1045               	iorwf	ldexp@value+3,w,c
  4282  002052  E105               	bnz	l2625
  4283  002054  6A42               	clrf	?_ldexp,c
  4284  002056  6A43               	clrf	?_ldexp+1,c
  4285  002058  6A44               	clrf	?_ldexp+2,c
  4286  00205A  6A45               	clrf	?_ldexp+3,c
  4287  00205C  0012               	return	
  4288  00205E                     l2625:
  4289  00205E  5045               	movf	ldexp@value+3,w,c
  4290  002060  0B7F               	andlw	127
  4291  002062  6E48               	movwf	??_ldexp& (0+255),c
  4292  002064  6A49               	clrf	(??_ldexp+1)& (0+255),c
  4293  002066  90D8               	bcf	status,0,c
  4294  002068  3648               	rlcf	??_ldexp,f,c
  4295  00206A  3649               	rlcf	??_ldexp+1,f,c
  4296  00206C  5048               	movf	??_ldexp,w,c
  4297  00206E  2646               	addwf	ldexp@newexp,f,c
  4298  002070  5049               	movf	??_ldexp+1,w,c
  4299  002072  2247               	addwfc	ldexp@newexp+1,f,c
  4300  002074  0E01               	movlw	1
  4301  002076  AE44               	btfss	ldexp@value+2,7,c
  4302  002078  0E00               	movlw	0
  4303  00207A  2646               	addwf	ldexp@newexp,f,c
  4304  00207C  0E00               	movlw	0
  4305  00207E  2247               	addwfc	ldexp@newexp+1,f,c
  4306  002080  AE47               	btfss	ldexp@newexp+1,7,c
  4307  002082  D005               	goto	l2631
  4308  002084  6A42               	clrf	?_ldexp,c
  4309  002086  6A43               	clrf	?_ldexp+1,c
  4310  002088  6A44               	clrf	?_ldexp+2,c
  4311  00208A  6A45               	clrf	?_ldexp+3,c
  4312  00208C  0012               	return	
  4313  00208E                     l2631:
  4314  00208E  BE47               	btfsc	ldexp@newexp+1,7,c
  4315  002090  D010               	goto	l2645
  4316  002092  0447               	decf	ldexp@newexp+1,w,c
  4317  002094  E30E               	bnc	l2645
  4318  002096  AE45               	btfss	ldexp@value+3,7,c
  4319  002098  D006               	goto	l2641
  4320  00209A  6842               	setf	?_ldexp,c
  4321  00209C  6843               	setf	?_ldexp+1,c
  4322  00209E  0E7F               	movlw	127
  4323  0020A0  6E44               	movwf	?_ldexp+2,c
  4324  0020A2  6845               	setf	?_ldexp+3,c
  4325  0020A4  0CFF               	retlw	255
  4326  0020A6                     l2641:
  4327  0020A6  6842               	setf	?_ldexp,c
  4328  0020A8  6843               	setf	?_ldexp+1,c
  4329  0020AA  0E7F               	movlw	127
  4330  0020AC  6E44               	movwf	?_ldexp+2,c
  4331  0020AE  6E45               	movwf	?_ldexp+3,c
  4332  0020B0  0C7F               	retlw	127
  4333  0020B2                     l2645:
  4334  0020B2  3447               	rlcf	ldexp@newexp+1,w,c
  4335  0020B4  3047               	rrcf	ldexp@newexp+1,w,c
  4336  0020B6  6E49               	movwf	(??_ldexp+1)& (0+255),c
  4337  0020B8  3046               	rrcf	ldexp@newexp,w,c
  4338  0020BA  6E48               	movwf	??_ldexp& (0+255),c
  4339  0020BC  1845               	xorwf	ldexp@value+3,w,c
  4340  0020BE  0B80               	andlw	-128
  4341  0020C0  1848               	xorwf	??_ldexp,w,c
  4342  0020C2  6E45               	movwf	ldexp@value+3,c
  4343  0020C4  C046  F048         	movff	ldexp@newexp,??_ldexp
  4344  0020C8  0E01               	movlw	1
  4345  0020CA  1648               	andwf	??_ldexp,f,c
  4346  0020CC  3248               	rrcf	??_ldexp,f,c
  4347  0020CE  3248               	rrcf	??_ldexp,f,c
  4348  0020D0  5044               	movf	ldexp@value+2,w,c
  4349  0020D2  1848               	xorwf	??_ldexp,w,c
  4350  0020D4  0B7F               	andlw	-129
  4351  0020D6  1848               	xorwf	??_ldexp,w,c
  4352  0020D8  6E44               	movwf	ldexp@value+2,c
  4353  0020DA  C042  F042         	movff	ldexp@value,?_ldexp
  4354  0020DE  C043  F043         	movff	ldexp@value+1,?_ldexp+1
  4355  0020E2  C044  F044         	movff	ldexp@value+2,?_ldexp+2
  4356  0020E6  C045  F045         	movff	ldexp@value+3,?_ldexp+3
  4357  0020EA  0012               	return		;funcret
  4358  0020EC                     __end_of_ldexp:
  4359                           	opt stack 0
  4360                           tosu	equ	0xFFF
  4361                           tosh	equ	0xFFE
  4362                           tosl	equ	0xFFD
  4363                           pclath	equ	0xFFA
  4364                           tblptru	equ	0xFF8
  4365                           tblptrh	equ	0xFF7
  4366                           tblptrl	equ	0xFF6
  4367                           tablat	equ	0xFF5
  4368                           prodl	equ	0xFF3
  4369                           intcon	equ	0xFF2
  4370                           intcon2	equ	0xFF1
  4371                           postinc0	equ	0xFEE
  4372                           wreg	equ	0xFE8
  4373                           postdec1	equ	0xFE5
  4374                           fsr1l	equ	0xFE1
  4375                           indf2	equ	0xFDF
  4376                           postinc2	equ	0xFDE
  4377                           postdec2	equ	0xFDD
  4378                           fsr2h	equ	0xFDA
  4379                           fsr2l	equ	0xFD9
  4380                           status	equ	0xFD8
  4381                           
  4382 ;; *************** function _floor *****************
  4383 ;; Defined at:
  4384 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\floor.c"
  4385 ;; Parameters:    Size  Location     Type
  4386 ;;  x               4    1[BANK0 ] int 
  4387 ;; Auto vars:     Size  Location     Type
  4388 ;;  i               4    5[BANK0 ] int 
  4389 ;;  expon           2    9[BANK0 ] int 
  4390 ;; Return value:  Size  Location     Type
  4391 ;;                  4    1[BANK0 ] int 
  4392 ;; Registers used:
  4393 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4394 ;; Tracked objects:
  4395 ;;		On entry : 0/0
  4396 ;;		On exit  : 0/0
  4397 ;;		Unchanged: 0/0
  4398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4399 ;;      Params:         0       4       0       0       0       0       0       0       0
  4400 ;;      Locals:         0       6       0       0       0       0       0       0       0
  4401 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4402 ;;      Totals:         0      10       0       0       0       0       0       0       0
  4403 ;;Total ram usage:       10 bytes
  4404 ;; Hardware stack levels used:    1
  4405 ;; Hardware stack levels required when called:    3
  4406 ;; This function calls:
  4407 ;;		___altofl
  4408 ;;		___fladd
  4409 ;;		___flge
  4410 ;;		___fltol
  4411 ;;		_frexp
  4412 ;; This function is called by:
  4413 ;;		_format_double
  4414 ;;		_exp
  4415 ;; This function uses a non-reentrant model
  4416 ;;
  4417                           
  4418                           	psect	text17
  4419  0018FC                     __ptext17:
  4420                           	opt stack 0
  4421  0018FC                     _floor:
  4422                           	opt stack 24
  4423                           
  4424                           ;incstack = 0
  4425  0018FC  C061  F002         	movff	floor@x,frexp@value
  4426  001900  C062  F003         	movff	floor@x+1,frexp@value+1
  4427  001904  C063  F004         	movff	floor@x+2,frexp@value+2
  4428  001908  C064  F005         	movff	floor@x+3,frexp@value+3
  4429  00190C  0E69               	movlw	low floor@expon
  4430  00190E  6E06               	movwf	frexp@eptr,c
  4431  001910  ECC4  F010         	call	_frexp	;wreg free
  4432  001914  0100               	movlb	0	; () banked
  4433  001916  AF6A               	btfss	(floor@expon+1)& (0+255),7,b
  4434  001918  D00F               	goto	l3531
  4435                           
  4436                           ; BSR set to: 0
  4437  00191A  AF64               	btfss	(floor@x+3)& (0+255),7,b
  4438  00191C  D008               	goto	l844
  4439                           
  4440                           ; BSR set to: 0
  4441  00191E  0E00               	movlw	0
  4442  001920  6F61               	movwf	?_floor& (0+255),b
  4443  001922  6F62               	movwf	(?_floor+1)& (0+255),b
  4444  001924  0E80               	movlw	128
  4445  001926  6F63               	movwf	(?_floor+2)& (0+255),b
  4446  001928  0EBF               	movlw	191
  4447  00192A  6F64               	movwf	(?_floor+3)& (0+255),b
  4448  00192C  0CBF               	retlw	191
  4449  00192E                     l844:
  4450                           
  4451                           ; BSR set to: 0
  4452  00192E  6B61               	clrf	?_floor& (0+255),b
  4453  001930  6B62               	clrf	(?_floor+1)& (0+255),b
  4454  001932  6B63               	clrf	(?_floor+2)& (0+255),b
  4455  001934  6B64               	clrf	(?_floor+3)& (0+255),b
  4456  001936  0012               	return	
  4457  001938                     l3531:
  4458                           
  4459                           ; BSR set to: 0
  4460  001938  516A               	movf	(floor@expon+1)& (0+255),w,b
  4461  00193A  E103               	bnz	u2930
  4462  00193C  0E1D               	movlw	29
  4463  00193E  5D69               	subwf	floor@expon& (0+255),w,b
  4464  001940  E309               	bnc	l3535
  4465  001942                     u2930:
  4466                           
  4467                           ; BSR set to: 0
  4468  001942  C061  F061         	movff	floor@x,?_floor
  4469  001946  C062  F062         	movff	floor@x+1,?_floor+1
  4470  00194A  C063  F063         	movff	floor@x+2,?_floor+2
  4471  00194E  C064  F064         	movff	floor@x+3,?_floor+3
  4472  001952  0012               	return	
  4473  001954                     l3535:
  4474                           
  4475                           ; BSR set to: 0
  4476  001954  C061  F050         	movff	floor@x,___fltol@f1
  4477  001958  C062  F051         	movff	floor@x+1,___fltol@f1+1
  4478  00195C  C063  F052         	movff	floor@x+2,___fltol@f1+2
  4479  001960  C064  F053         	movff	floor@x+3,___fltol@f1+3
  4480  001964  EC76  F010         	call	___fltol	;wreg free
  4481  001968  C050  F05A         	movff	?___fltol,___altofl@c
  4482  00196C  C051  F05B         	movff	?___fltol+1,___altofl@c+1
  4483  001970  C052  F05C         	movff	?___fltol+2,___altofl@c+2
  4484  001974  C053  F05D         	movff	?___fltol+3,___altofl@c+3
  4485  001978  ECC1  F011         	call	___altofl	;wreg free
  4486  00197C  C05A  F065         	movff	?___altofl,floor@i
  4487  001980  C05B  F066         	movff	?___altofl+1,floor@i+1
  4488  001984  C05C  F067         	movff	?___altofl+2,floor@i+2
  4489  001988  C05D  F068         	movff	?___altofl+3,floor@i+3
  4490  00198C  C061  F002         	movff	floor@x,___flge@ff1
  4491  001990  C062  F003         	movff	floor@x+1,___flge@ff1+1
  4492  001994  C063  F004         	movff	floor@x+2,___flge@ff1+2
  4493  001998  C064  F005         	movff	floor@x+3,___flge@ff1+3
  4494  00199C  C065  F006         	movff	floor@i,___flge@ff2
  4495  0019A0  C066  F007         	movff	floor@i+1,___flge@ff2+1
  4496  0019A4  C067  F008         	movff	floor@i+2,___flge@ff2+2
  4497  0019A8  C068  F009         	movff	floor@i+3,___flge@ff2+3
  4498  0019AC  EC9B  F011         	call	___flge	;wreg free
  4499  0019B0  E215               	bc	l847
  4500  0019B2  C065  F02A         	movff	floor@i,___fladd@f1
  4501  0019B6  C066  F02B         	movff	floor@i+1,___fladd@f1+1
  4502  0019BA  C067  F02C         	movff	floor@i+2,___fladd@f1+2
  4503  0019BE  C068  F02D         	movff	floor@i+3,___fladd@f1+3
  4504  0019C2  ECF9  F00B         	call	PL28	;call to abstracted procedure
  4505  0019C6  ECC0  F00A         	call	___fladd	;wreg free
  4506  0019CA  C02A  F061         	movff	?___fladd,?_floor
  4507  0019CE  C02B  F062         	movff	?___fladd+1,?_floor+1
  4508  0019D2  C02C  F063         	movff	?___fladd+2,?_floor+2
  4509  0019D6  C02D  F064         	movff	?___fladd+3,?_floor+3
  4510  0019DA  0012               	return	
  4511  0019DC                     l847:
  4512  0019DC  C065  F061         	movff	floor@i,?_floor
  4513  0019E0  C066  F062         	movff	floor@i+1,?_floor+1
  4514  0019E4  C067  F063         	movff	floor@i+2,?_floor+2
  4515  0019E8  C068  F064         	movff	floor@i+3,?_floor+3
  4516  0019EC  0012               	return		;funcret
  4517  0019EE                     __end_of_floor:
  4518                           	opt stack 0
  4519                           tosu	equ	0xFFF
  4520                           tosh	equ	0xFFE
  4521                           tosl	equ	0xFFD
  4522                           pclath	equ	0xFFA
  4523                           tblptru	equ	0xFF8
  4524                           tblptrh	equ	0xFF7
  4525                           tblptrl	equ	0xFF6
  4526                           tablat	equ	0xFF5
  4527                           prodl	equ	0xFF3
  4528                           intcon	equ	0xFF2
  4529                           intcon2	equ	0xFF1
  4530                           postinc0	equ	0xFEE
  4531                           wreg	equ	0xFE8
  4532                           postdec1	equ	0xFE5
  4533                           fsr1l	equ	0xFE1
  4534                           indf2	equ	0xFDF
  4535                           postinc2	equ	0xFDE
  4536                           postdec2	equ	0xFDD
  4537                           fsr2h	equ	0xFDA
  4538                           fsr2l	equ	0xFD9
  4539                           status	equ	0xFD8
  4540                           
  4541 ;; *************** function ___fltol *****************
  4542 ;; Defined at:
  4543 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fltol.c"
  4544 ;; Parameters:    Size  Location     Type
  4545 ;;  f1              4   79[COMRAM] int 
  4546 ;; Auto vars:     Size  Location     Type
  4547 ;;  exp1            1   88[COMRAM] unsigned char 
  4548 ;;  sign1           1   87[COMRAM] unsigned char 
  4549 ;; Return value:  Size  Location     Type
  4550 ;;                  4   79[COMRAM] long 
  4551 ;; Registers used:
  4552 ;;		wreg, status,2, status,0
  4553 ;; Tracked objects:
  4554 ;;		On entry : 0/0
  4555 ;;		On exit  : 0/0
  4556 ;;		Unchanged: 0/0
  4557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4558 ;;      Params:         4       0       0       0       0       0       0       0       0
  4559 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4560 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4561 ;;      Totals:        10       0       0       0       0       0       0       0       0
  4562 ;;Total ram usage:       10 bytes
  4563 ;; Hardware stack levels used:    1
  4564 ;; Hardware stack levels required when called:    1
  4565 ;; This function calls:
  4566 ;;		Nothing
  4567 ;; This function is called by:
  4568 ;;		_format_double
  4569 ;;		_measure_capacitance
  4570 ;;		_measure_inductance
  4571 ;;		_floor
  4572 ;;		_pow
  4573 ;;		_exp
  4574 ;; This function uses a non-reentrant model
  4575 ;;
  4576                           
  4577                           	psect	text18
  4578  0020EC                     __ptext18:
  4579                           	opt stack 0
  4580  0020EC                     ___fltol:
  4581                           	opt stack 28
  4582                           
  4583                           ;incstack = 0
  4584  0020EC  3452               	rlcf	___fltol@f1+2,w,c
  4585  0020EE  3453               	rlcf	___fltol@f1+3,w,c
  4586  0020F0  6E59               	movwf	___fltol@exp1,c
  4587  0020F2  5059               	movf	___fltol@exp1,w,c
  4588  0020F4  E105               	bnz	l2495
  4589  0020F6                     l2493:
  4590  0020F6  6A50               	clrf	?___fltol,c
  4591  0020F8  6A51               	clrf	?___fltol+1,c
  4592  0020FA  6A52               	clrf	?___fltol+2,c
  4593  0020FC  6A53               	clrf	?___fltol+3,c
  4594  0020FE  0012               	return	
  4595  002100                     l2495:
  4596  002100  C050  F054         	movff	___fltol@f1,??___fltol
  4597  002104  C051  F055         	movff	___fltol@f1+1,??___fltol+1
  4598  002108  C052  F056         	movff	___fltol@f1+2,??___fltol+2
  4599  00210C  C053  F057         	movff	___fltol@f1+3,??___fltol+3
  4600  002110  0E20               	movlw	32
  4601  002112  D005               	goto	u1690
  4602  002114                     u1695:
  4603  002114  90D8               	bcf	status,0,c
  4604  002116  3257               	rrcf	??___fltol+3,f,c
  4605  002118  3256               	rrcf	??___fltol+2,f,c
  4606  00211A  3255               	rrcf	??___fltol+1,f,c
  4607  00211C  3254               	rrcf	??___fltol,f,c
  4608  00211E                     u1690:
  4609  00211E  2EE8               	decfsz	wreg,f,c
  4610  002120  D7F9               	goto	u1695
  4611  002122  5054               	movf	??___fltol,w,c
  4612  002124  6E58               	movwf	___fltol@sign1,c
  4613  002126  8E52               	bsf	___fltol@f1+2,7,c
  4614  002128  6A53               	clrf	___fltol@f1+3,c
  4615  00212A  0E96               	movlw	150
  4616  00212C  5E59               	subwf	___fltol@exp1,f,c
  4617  00212E  AE59               	btfss	___fltol@exp1,7,c
  4618  002130  D00C               	goto	l2513
  4619  002132  5059               	movf	___fltol@exp1,w,c
  4620  002134  0A80               	xorlw	128
  4621  002136  0F97               	addlw	151
  4622  002138  E3DE               	bnc	l2493
  4623  00213A                     l2509:
  4624  00213A  90D8               	bcf	status,0,c
  4625  00213C  3253               	rrcf	___fltol@f1+3,f,c
  4626  00213E  3252               	rrcf	___fltol@f1+2,f,c
  4627  002140  3251               	rrcf	___fltol@f1+1,f,c
  4628  002142  3250               	rrcf	___fltol@f1,f,c
  4629  002144  3E59               	incfsz	___fltol@exp1,f,c
  4630  002146  D7F9               	goto	l2509
  4631  002148  D00C               	goto	l2521
  4632  00214A                     l2513:
  4633  00214A  0E1F               	movlw	31
  4634  00214C  6459               	cpfsgt	___fltol@exp1,c
  4635  00214E  D007               	goto	l2519
  4636  002150  D7D2               	goto	l2493
  4637  002152                     l2517:
  4638  002152  90D8               	bcf	status,0,c
  4639  002154  3650               	rlcf	___fltol@f1,f,c
  4640  002156  3651               	rlcf	___fltol@f1+1,f,c
  4641  002158  3652               	rlcf	___fltol@f1+2,f,c
  4642  00215A  3653               	rlcf	___fltol@f1+3,f,c
  4643  00215C  0659               	decf	___fltol@exp1,f,c
  4644  00215E                     l2519:
  4645  00215E  5059               	movf	___fltol@exp1,w,c
  4646  002160  E1F8               	bnz	l2517
  4647  002162                     l2521:
  4648  002162  5058               	movf	___fltol@sign1,w,c
  4649  002164  E008               	bz	l2525
  4650  002166  1E53               	comf	___fltol@f1+3,f,c
  4651  002168  1E52               	comf	___fltol@f1+2,f,c
  4652  00216A  1E51               	comf	___fltol@f1+1,f,c
  4653  00216C  6C50               	negf	___fltol@f1,c
  4654  00216E  0E00               	movlw	0
  4655  002170  2251               	addwfc	___fltol@f1+1,f,c
  4656  002172  2252               	addwfc	___fltol@f1+2,f,c
  4657  002174  2253               	addwfc	___fltol@f1+3,f,c
  4658  002176                     l2525:
  4659  002176  C050  F050         	movff	___fltol@f1,?___fltol
  4660  00217A  C051  F051         	movff	___fltol@f1+1,?___fltol+1
  4661  00217E  C052  F052         	movff	___fltol@f1+2,?___fltol+2
  4662  002182  C053  F053         	movff	___fltol@f1+3,?___fltol+3
  4663  002186  0012               	return		;funcret
  4664  002188                     __end_of___fltol:
  4665                           	opt stack 0
  4666                           tosu	equ	0xFFF
  4667                           tosh	equ	0xFFE
  4668                           tosl	equ	0xFFD
  4669                           pclath	equ	0xFFA
  4670                           tblptru	equ	0xFF8
  4671                           tblptrh	equ	0xFF7
  4672                           tblptrl	equ	0xFF6
  4673                           tablat	equ	0xFF5
  4674                           prodl	equ	0xFF3
  4675                           intcon	equ	0xFF2
  4676                           intcon2	equ	0xFF1
  4677                           postinc0	equ	0xFEE
  4678                           wreg	equ	0xFE8
  4679                           postdec1	equ	0xFE5
  4680                           fsr1l	equ	0xFE1
  4681                           indf2	equ	0xFDF
  4682                           postinc2	equ	0xFDE
  4683                           postdec2	equ	0xFDD
  4684                           fsr2h	equ	0xFDA
  4685                           fsr2l	equ	0xFD9
  4686                           status	equ	0xFD8
  4687                           
  4688 ;; *************** function ___flge *****************
  4689 ;; Defined at:
  4690 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flge.c"
  4691 ;; Parameters:    Size  Location     Type
  4692 ;;  ff1             4    1[COMRAM] long 
  4693 ;;  ff2             4    5[COMRAM] long 
  4694 ;; Auto vars:     Size  Location     Type
  4695 ;;		None
  4696 ;; Return value:  Size  Location     Type
  4697 ;;		None               void
  4698 ;; Registers used:
  4699 ;;		wreg, status,2, status,0
  4700 ;; Tracked objects:
  4701 ;;		On entry : 0/0
  4702 ;;		On exit  : 0/0
  4703 ;;		Unchanged: 0/0
  4704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4705 ;;      Params:         8       0       0       0       0       0       0       0       0
  4706 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4707 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4708 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4709 ;;Total ram usage:        8 bytes
  4710 ;; Hardware stack levels used:    1
  4711 ;; Hardware stack levels required when called:    1
  4712 ;; This function calls:
  4713 ;;		Nothing
  4714 ;; This function is called by:
  4715 ;;		_format_double
  4716 ;;		_measure_capacitance
  4717 ;;		_measure_inductance
  4718 ;;		_floor
  4719 ;;		_pow
  4720 ;;		_exp
  4721 ;; This function uses a non-reentrant model
  4722 ;;
  4723                           
  4724                           	psect	text19
  4725  002336                     __ptext19:
  4726                           	opt stack 0
  4727  002336                     ___flge:
  4728                           	opt stack 28
  4729                           
  4730                           ;incstack = 0
  4731  002336  AE05               	btfss	___flge@ff1+3,7,c
  4732  002338  D009               	goto	l2461
  4733  00233A  6C02               	negf	___flge@ff1,c
  4734  00233C  1E03               	comf	___flge@ff1+1,f,c
  4735  00233E  B0D8               	btfsc	status,0,c
  4736  002340  2A03               	incf	___flge@ff1+1,f,c
  4737  002342  1E04               	comf	___flge@ff1+2,f,c
  4738  002344  B0D8               	btfsc	status,0,c
  4739  002346  2A04               	incf	___flge@ff1+2,f,c
  4740  002348  0E80               	movlw	128
  4741  00234A  5605               	subfwb	___flge@ff1+3,f,c
  4742  00234C                     l2461:
  4743  00234C  AE09               	btfss	___flge@ff2+3,7,c
  4744  00234E  D009               	goto	l801
  4745  002350  6C06               	negf	___flge@ff2,c
  4746  002352  1E07               	comf	___flge@ff2+1,f,c
  4747  002354  B0D8               	btfsc	status,0,c
  4748  002356  2A07               	incf	___flge@ff2+1,f,c
  4749  002358  1E08               	comf	___flge@ff2+2,f,c
  4750  00235A  B0D8               	btfsc	status,0,c
  4751  00235C  2A08               	incf	___flge@ff2+2,f,c
  4752  00235E  0E80               	movlw	128
  4753  002360  5609               	subfwb	___flge@ff2+3,f,c
  4754  002362                     l801:
  4755  002362  0E80               	movlw	128
  4756  002364  1A05               	xorwf	___flge@ff1+3,f,c
  4757  002366  1A09               	xorwf	___flge@ff2+3,f,c
  4758  002368  5006               	movf	___flge@ff2,w,c
  4759  00236A  5C02               	subwf	___flge@ff1,w,c
  4760  00236C  5007               	movf	___flge@ff2+1,w,c
  4761  00236E  5803               	subwfb	___flge@ff1+1,w,c
  4762  002370  5008               	movf	___flge@ff2+2,w,c
  4763  002372  5804               	subwfb	___flge@ff1+2,w,c
  4764  002374  5009               	movf	___flge@ff2+3,w,c
  4765  002376  5805               	subwfb	___flge@ff1+3,w,c
  4766  002378  E202               	bc	l2467
  4767  00237A  90D8               	bcf	status,0,c
  4768  00237C  0012               	return	
  4769  00237E                     l2467:
  4770  00237E  80D8               	bsf	status,0,c
  4771  002380  0012               	return		;funcret
  4772  002382                     __end_of___flge:
  4773                           	opt stack 0
  4774                           tosu	equ	0xFFF
  4775                           tosh	equ	0xFFE
  4776                           tosl	equ	0xFFD
  4777                           pclath	equ	0xFFA
  4778                           tblptru	equ	0xFF8
  4779                           tblptrh	equ	0xFF7
  4780                           tblptrl	equ	0xFF6
  4781                           tablat	equ	0xFF5
  4782                           prodl	equ	0xFF3
  4783                           intcon	equ	0xFF2
  4784                           intcon2	equ	0xFF1
  4785                           postinc0	equ	0xFEE
  4786                           wreg	equ	0xFE8
  4787                           postdec1	equ	0xFE5
  4788                           fsr1l	equ	0xFE1
  4789                           indf2	equ	0xFDF
  4790                           postinc2	equ	0xFDE
  4791                           postdec2	equ	0xFDD
  4792                           fsr2h	equ	0xFDA
  4793                           fsr2l	equ	0xFD9
  4794                           status	equ	0xFD8
  4795                           
  4796 ;; *************** function ___altofl *****************
  4797 ;; Defined at:
  4798 ;;		line 36 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\altofl.c"
  4799 ;; Parameters:    Size  Location     Type
  4800 ;;  c               4   89[COMRAM] long 
  4801 ;; Auto vars:     Size  Location     Type
  4802 ;;  sign            1    0[BANK0 ] unsigned char 
  4803 ;; Return value:  Size  Location     Type
  4804 ;;                  4   89[COMRAM] unsigned char 
  4805 ;; Registers used:
  4806 ;;		wreg, status,2, status,0, cstack
  4807 ;; Tracked objects:
  4808 ;;		On entry : 0/0
  4809 ;;		On exit  : 0/0
  4810 ;;		Unchanged: 0/0
  4811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4812 ;;      Params:         4       0       0       0       0       0       0       0       0
  4813 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4814 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4815 ;;      Totals:         4       1       0       0       0       0       0       0       0
  4816 ;;Total ram usage:        5 bytes
  4817 ;; Hardware stack levels used:    1
  4818 ;; Hardware stack levels required when called:    2
  4819 ;; This function calls:
  4820 ;;		___flpack
  4821 ;; This function is called by:
  4822 ;;		_floor
  4823 ;; This function uses a non-reentrant model
  4824 ;;
  4825                           
  4826                           	psect	text20
  4827  002382                     __ptext20:
  4828                           	opt stack 0
  4829  002382                     ___altofl:
  4830                           	opt stack 24
  4831                           
  4832                           ;incstack = 0
  4833  002382  0100               	movlb	0	; () banked
  4834  002384  6B60               	clrf	___altofl@sign& (0+255),b
  4835                           
  4836                           ; BSR set to: 0
  4837  002386  AE5D               	btfss	___altofl@c+3,7,c
  4838  002388  D00A               	goto	l3405
  4839                           
  4840                           ; BSR set to: 0
  4841  00238A  1E5D               	comf	___altofl@c+3,f,c
  4842  00238C  1E5C               	comf	___altofl@c+2,f,c
  4843  00238E  1E5B               	comf	___altofl@c+1,f,c
  4844  002390  6C5A               	negf	___altofl@c,c
  4845  002392  0E00               	movlw	0
  4846  002394  225B               	addwfc	___altofl@c+1,f,c
  4847  002396  225C               	addwfc	___altofl@c+2,f,c
  4848  002398  225D               	addwfc	___altofl@c+3,f,c
  4849                           
  4850                           ; BSR set to: 0
  4851  00239A  0E01               	movlw	1
  4852  00239C  6F60               	movwf	___altofl@sign& (0+255),b
  4853  00239E                     l3405:
  4854                           
  4855                           ; BSR set to: 0
  4856  00239E  C05A  F002         	movff	___altofl@c,___flpack@arg
  4857  0023A2  C05B  F003         	movff	___altofl@c+1,___flpack@arg+1
  4858  0023A6  C05C  F004         	movff	___altofl@c+2,___flpack@arg+2
  4859  0023AA  C05D  F005         	movff	___altofl@c+3,___flpack@arg+3
  4860  0023AE  0E96               	movlw	150
  4861  0023B0  6E06               	movwf	___flpack@exp,c
  4862  0023B2  C060  F007         	movff	___altofl@sign,___flpack@sign
  4863  0023B6  EC15  F00F         	call	___flpack	;wreg free
  4864  0023BA  C002  F05A         	movff	?___flpack,?___altofl
  4865  0023BE  C003  F05B         	movff	?___flpack+1,?___altofl+1
  4866  0023C2  C004  F05C         	movff	?___flpack+2,?___altofl+2
  4867  0023C6  C005  F05D         	movff	?___flpack+3,?___altofl+3
  4868  0023CA  0012               	return		;funcret
  4869  0023CC                     __end_of___altofl:
  4870                           	opt stack 0
  4871                           tosu	equ	0xFFF
  4872                           tosh	equ	0xFFE
  4873                           tosl	equ	0xFFD
  4874                           pclath	equ	0xFFA
  4875                           tblptru	equ	0xFF8
  4876                           tblptrh	equ	0xFF7
  4877                           tblptrl	equ	0xFF6
  4878                           tablat	equ	0xFF5
  4879                           prodl	equ	0xFF3
  4880                           intcon	equ	0xFF2
  4881                           intcon2	equ	0xFF1
  4882                           postinc0	equ	0xFEE
  4883                           wreg	equ	0xFE8
  4884                           postdec1	equ	0xFE5
  4885                           fsr1l	equ	0xFE1
  4886                           indf2	equ	0xFDF
  4887                           postinc2	equ	0xFDE
  4888                           postdec2	equ	0xFDD
  4889                           fsr2h	equ	0xFDA
  4890                           fsr2l	equ	0xFD9
  4891                           status	equ	0xFD8
  4892                           
  4893 ;; *************** function ___flsub *****************
  4894 ;; Defined at:
  4895 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flsub.c"
  4896 ;; Parameters:    Size  Location     Type
  4897 ;;  f1              4   53[COMRAM] unsigned char 
  4898 ;;  f2              4   57[COMRAM] unsigned char 
  4899 ;; Auto vars:     Size  Location     Type
  4900 ;;		None
  4901 ;; Return value:  Size  Location     Type
  4902 ;;                  4   53[COMRAM] unsigned char 
  4903 ;; Registers used:
  4904 ;;		wreg, status,2, status,0, cstack
  4905 ;; Tracked objects:
  4906 ;;		On entry : 0/0
  4907 ;;		On exit  : 0/0
  4908 ;;		Unchanged: 0/0
  4909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4910 ;;      Params:         8       0       0       0       0       0       0       0       0
  4911 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4912 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4913 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4914 ;;Total ram usage:        8 bytes
  4915 ;; Hardware stack levels used:    1
  4916 ;; Hardware stack levels required when called:    3
  4917 ;; This function calls:
  4918 ;;		___fladd
  4919 ;; This function is called by:
  4920 ;;		_format_double
  4921 ;;		_measure_capacitance
  4922 ;;		_measure_inductance
  4923 ;;		_exp
  4924 ;; This function uses a non-reentrant model
  4925 ;;
  4926                           
  4927                           	psect	text21
  4928  002460                     __ptext21:
  4929                           	opt stack 0
  4930  002460                     ___flsub:
  4931                           	opt stack 26
  4932                           
  4933                           ;incstack = 0
  4934  002460  503A               	movf	___flsub@f2,w,c
  4935  002462  103B               	iorwf	___flsub@f2+1,w,c
  4936  002464  103C               	iorwf	___flsub@f2+2,w,c
  4937  002466  103D               	iorwf	___flsub@f2+3,w,c
  4938  002468  E002               	bz	l3581
  4939  00246A  0E80               	movlw	128
  4940  00246C  1A3D               	xorwf	___flsub@f2+3,f,c
  4941  00246E                     l3581:
  4942  00246E  C036  F02A         	movff	___flsub@f1,___fladd@f1
  4943  002472  C037  F02B         	movff	___flsub@f1+1,___fladd@f1+1
  4944  002476  C038  F02C         	movff	___flsub@f1+2,___fladd@f1+2
  4945  00247A  C039  F02D         	movff	___flsub@f1+3,___fladd@f1+3
  4946  00247E  C03A  F02E         	movff	___flsub@f2,___fladd@f2
  4947  002482  C03B  F02F         	movff	___flsub@f2+1,___fladd@f2+1
  4948  002486  C03C  F030         	movff	___flsub@f2+2,___fladd@f2+2
  4949  00248A  C03D  F031         	movff	___flsub@f2+3,___fladd@f2+3
  4950  00248E  ECC0  F00A         	call	___fladd	;wreg free
  4951  002492  C02A  F036         	movff	?___fladd,?___flsub
  4952  002496  C02B  F037         	movff	?___fladd+1,?___flsub+1
  4953  00249A  C02C  F038         	movff	?___fladd+2,?___flsub+2
  4954  00249E  C02D  F039         	movff	?___fladd+3,?___flsub+3
  4955  0024A2  0012               	return		;funcret
  4956  0024A4                     __end_of___flsub:
  4957                           	opt stack 0
  4958                           tosu	equ	0xFFF
  4959                           tosh	equ	0xFFE
  4960                           tosl	equ	0xFFD
  4961                           pclath	equ	0xFFA
  4962                           tblptru	equ	0xFF8
  4963                           tblptrh	equ	0xFF7
  4964                           tblptrl	equ	0xFF6
  4965                           tablat	equ	0xFF5
  4966                           prodl	equ	0xFF3
  4967                           intcon	equ	0xFF2
  4968                           intcon2	equ	0xFF1
  4969                           postinc0	equ	0xFEE
  4970                           wreg	equ	0xFE8
  4971                           postdec1	equ	0xFE5
  4972                           fsr1l	equ	0xFE1
  4973                           indf2	equ	0xFDF
  4974                           postinc2	equ	0xFDE
  4975                           postdec2	equ	0xFDD
  4976                           fsr2h	equ	0xFDA
  4977                           fsr2l	equ	0xFD9
  4978                           status	equ	0xFD8
  4979                           
  4980 ;; *************** function ___flneg *****************
  4981 ;; Defined at:
  4982 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flneg.c"
  4983 ;; Parameters:    Size  Location     Type
  4984 ;;  f1              4    1[COMRAM] unsigned char 
  4985 ;; Auto vars:     Size  Location     Type
  4986 ;;		None
  4987 ;; Return value:  Size  Location     Type
  4988 ;;                  4    1[COMRAM] unsigned char 
  4989 ;; Registers used:
  4990 ;;		wreg, status,2, status,0
  4991 ;; Tracked objects:
  4992 ;;		On entry : F/0
  4993 ;;		On exit  : F/0
  4994 ;;		Unchanged: F/0
  4995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4996 ;;      Params:         4       0       0       0       0       0       0       0       0
  4997 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4998 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4999 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5000 ;;Total ram usage:        4 bytes
  5001 ;; Hardware stack levels used:    1
  5002 ;; Hardware stack levels required when called:    1
  5003 ;; This function calls:
  5004 ;;		Nothing
  5005 ;; This function is called by:
  5006 ;;		_pow
  5007 ;;		_exp
  5008 ;; This function uses a non-reentrant model
  5009 ;;
  5010                           
  5011                           	psect	text22
  5012  002710                     __ptext22:
  5013                           	opt stack 0
  5014  002710                     ___flneg:
  5015                           	opt stack 26
  5016                           
  5017                           ; BSR set to: 0
  5018                           
  5019                           ;incstack = 0
  5020  002710  5002               	movf	___flneg@f1,w,c
  5021  002712  1003               	iorwf	___flneg@f1+1,w,c
  5022  002714  1004               	iorwf	___flneg@f1+2,w,c
  5023  002716  1005               	iorwf	___flneg@f1+3,w,c
  5024  002718  E002               	bz	l2617
  5025                           
  5026                           ; BSR set to: 0
  5027  00271A  0E80               	movlw	128
  5028  00271C  1A05               	xorwf	___flneg@f1+3,f,c
  5029  00271E                     l2617:
  5030                           
  5031                           ; BSR set to: 0
  5032  00271E  C002  F002         	movff	___flneg@f1,?___flneg
  5033  002722  C003  F003         	movff	___flneg@f1+1,?___flneg+1
  5034  002726  C004  F004         	movff	___flneg@f1+2,?___flneg+2
  5035  00272A  C005  F005         	movff	___flneg@f1+3,?___flneg+3
  5036                           
  5037                           ; BSR set to: 0
  5038  00272E  0012               	return		;funcret
  5039  002730                     __end_of___flneg:
  5040                           	opt stack 0
  5041                           tosu	equ	0xFFF
  5042                           tosh	equ	0xFFE
  5043                           tosl	equ	0xFFD
  5044                           pclath	equ	0xFFA
  5045                           tblptru	equ	0xFF8
  5046                           tblptrh	equ	0xFF7
  5047                           tblptrl	equ	0xFF6
  5048                           tablat	equ	0xFF5
  5049                           prodl	equ	0xFF3
  5050                           intcon	equ	0xFF2
  5051                           intcon2	equ	0xFF1
  5052                           postinc0	equ	0xFEE
  5053                           wreg	equ	0xFE8
  5054                           postdec1	equ	0xFE5
  5055                           fsr1l	equ	0xFE1
  5056                           indf2	equ	0xFDF
  5057                           postinc2	equ	0xFDE
  5058                           postdec2	equ	0xFDD
  5059                           fsr2h	equ	0xFDA
  5060                           fsr2l	equ	0xFD9
  5061                           status	equ	0xFD8
  5062                           
  5063 ;; *************** function ___fldiv *****************
  5064 ;; Defined at:
  5065 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldiv.c"
  5066 ;; Parameters:    Size  Location     Type
  5067 ;;  f1              4   11[COMRAM] unsigned char 
  5068 ;;  f2              4   15[COMRAM] unsigned char 
  5069 ;; Auto vars:     Size  Location     Type
  5070 ;;  f3              4   19[COMRAM] unsigned char 
  5071 ;;  sign            1   25[COMRAM] unsigned char 
  5072 ;;  exp             1   24[COMRAM] unsigned char 
  5073 ;;  cntr            1   23[COMRAM] unsigned char 
  5074 ;; Return value:  Size  Location     Type
  5075 ;;                  4   11[COMRAM] unsigned char 
  5076 ;; Registers used:
  5077 ;;		wreg, status,2, status,0, cstack
  5078 ;; Tracked objects:
  5079 ;;		On entry : 0/0
  5080 ;;		On exit  : 0/0
  5081 ;;		Unchanged: 0/0
  5082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5083 ;;      Params:         8       0       0       0       0       0       0       0       0
  5084 ;;      Locals:         7       0       0       0       0       0       0       0       0
  5085 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5086 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5087 ;;Total ram usage:       15 bytes
  5088 ;; Hardware stack levels used:    1
  5089 ;; Hardware stack levels required when called:    2
  5090 ;; This function calls:
  5091 ;;		___flpack
  5092 ;; This function is called by:
  5093 ;;		_format_double
  5094 ;;		_measure_capacitance
  5095 ;;		_measure_inductance
  5096 ;;		_exp
  5097 ;; This function uses a non-reentrant model
  5098 ;;
  5099                           
  5100                           	psect	text23
  5101  001EEC                     __ptext23:
  5102                           	opt stack 0
  5103  001EEC                     ___fldiv:
  5104                           	opt stack 27
  5105                           
  5106                           ; BSR set to: 0
  5107                           ;incstack = 0
  5108  001EEC  340E               	rlcf	___fldiv@f1+2,w,c
  5109  001EEE  340F               	rlcf	___fldiv@f1+3,w,c
  5110  001EF0  6E19               	movwf	___fldiv@exp,c
  5111  001EF2  5019               	movf	___fldiv@exp,w,c
  5112  001EF4  E105               	bnz	l3545
  5113  001EF6  6A0C               	clrf	?___fldiv,c
  5114  001EF8  6A0D               	clrf	?___fldiv+1,c
  5115  001EFA  6A0E               	clrf	?___fldiv+2,c
  5116  001EFC  6A0F               	clrf	?___fldiv+3,c
  5117  001EFE  0012               	return	
  5118  001F00                     l3545:
  5119  001F00  3412               	rlcf	___fldiv@f2+2,w,c
  5120  001F02  3413               	rlcf	___fldiv@f2+3,w,c
  5121  001F04  6E1A               	movwf	___fldiv@sign,c
  5122  001F06  501A               	movf	___fldiv@sign,w,c
  5123  001F08  E105               	bnz	l3549
  5124  001F0A  6A0C               	clrf	?___fldiv,c
  5125  001F0C  6A0D               	clrf	?___fldiv+1,c
  5126  001F0E  6A0E               	clrf	?___fldiv+2,c
  5127  001F10  6A0F               	clrf	?___fldiv+3,c
  5128  001F12  0012               	return	
  5129  001F14                     l3549:
  5130  001F14  501A               	movf	___fldiv@sign,w,c
  5131  001F16  0F89               	addlw	137
  5132  001F18  5E19               	subwf	___fldiv@exp,f,c
  5133  001F1A  C00F  F01A         	movff	___fldiv@f1+3,___fldiv@sign
  5134  001F1E  5013               	movf	___fldiv@f2+3,w,c
  5135  001F20  1A1A               	xorwf	___fldiv@sign,f,c
  5136  001F22  0E80               	movlw	128
  5137  001F24  161A               	andwf	___fldiv@sign,f,c
  5138  001F26  8E0E               	bsf	___fldiv@f1+2,7,c
  5139  001F28  6A0F               	clrf	___fldiv@f1+3,c
  5140  001F2A  8E12               	bsf	___fldiv@f2+2,7,c
  5141  001F2C  6A13               	clrf	___fldiv@f2+3,c
  5142  001F2E  0E20               	movlw	32
  5143  001F30  6E18               	movwf	___fldiv@cntr,c
  5144  001F32                     l3561:
  5145  001F32  90D8               	bcf	status,0,c
  5146  001F34  3614               	rlcf	___fldiv@f3,f,c
  5147  001F36  3615               	rlcf	___fldiv@f3+1,f,c
  5148  001F38  3616               	rlcf	___fldiv@f3+2,f,c
  5149  001F3A  3617               	rlcf	___fldiv@f3+3,f,c
  5150  001F3C  5010               	movf	___fldiv@f2,w,c
  5151  001F3E  5C0C               	subwf	___fldiv@f1,w,c
  5152  001F40  5011               	movf	___fldiv@f2+1,w,c
  5153  001F42  580D               	subwfb	___fldiv@f1+1,w,c
  5154  001F44  5012               	movf	___fldiv@f2+2,w,c
  5155  001F46  580E               	subwfb	___fldiv@f1+2,w,c
  5156  001F48  5013               	movf	___fldiv@f2+3,w,c
  5157  001F4A  580F               	subwfb	___fldiv@f1+3,w,c
  5158  001F4C  E309               	bnc	l3569
  5159  001F4E  5010               	movf	___fldiv@f2,w,c
  5160  001F50  5E0C               	subwf	___fldiv@f1,f,c
  5161  001F52  5011               	movf	___fldiv@f2+1,w,c
  5162  001F54  5A0D               	subwfb	___fldiv@f1+1,f,c
  5163  001F56  5012               	movf	___fldiv@f2+2,w,c
  5164  001F58  5A0E               	subwfb	___fldiv@f1+2,f,c
  5165  001F5A  5013               	movf	___fldiv@f2+3,w,c
  5166  001F5C  5A0F               	subwfb	___fldiv@f1+3,f,c
  5167  001F5E  8014               	bsf	___fldiv@f3,0,c
  5168  001F60                     l3569:
  5169  001F60  90D8               	bcf	status,0,c
  5170  001F62  360C               	rlcf	___fldiv@f1,f,c
  5171  001F64  360D               	rlcf	___fldiv@f1+1,f,c
  5172  001F66  360E               	rlcf	___fldiv@f1+2,f,c
  5173  001F68  360F               	rlcf	___fldiv@f1+3,f,c
  5174  001F6A  2E18               	decfsz	___fldiv@cntr,f,c
  5175  001F6C  D7E2               	goto	l3561
  5176  001F6E  C014  F002         	movff	___fldiv@f3,___flpack@arg
  5177  001F72  C015  F003         	movff	___fldiv@f3+1,___flpack@arg+1
  5178  001F76  C016  F004         	movff	___fldiv@f3+2,___flpack@arg+2
  5179  001F7A  C017  F005         	movff	___fldiv@f3+3,___flpack@arg+3
  5180  001F7E  C019  F006         	movff	___fldiv@exp,___flpack@exp
  5181  001F82  C01A  F007         	movff	___fldiv@sign,___flpack@sign
  5182  001F86  EC15  F00F         	call	___flpack	;wreg free
  5183  001F8A  C002  F00C         	movff	?___flpack,?___fldiv
  5184  001F8E  C003  F00D         	movff	?___flpack+1,?___fldiv+1
  5185  001F92  C004  F00E         	movff	?___flpack+2,?___fldiv+2
  5186  001F96  C005  F00F         	movff	?___flpack+3,?___fldiv+3
  5187  001F9A  0012               	return		;funcret
  5188  001F9C                     __end_of___fldiv:
  5189                           	opt stack 0
  5190                           tosu	equ	0xFFF
  5191                           tosh	equ	0xFFE
  5192                           tosl	equ	0xFFD
  5193                           pclath	equ	0xFFA
  5194                           tblptru	equ	0xFF8
  5195                           tblptrh	equ	0xFF7
  5196                           tblptrl	equ	0xFF6
  5197                           tablat	equ	0xFF5
  5198                           prodl	equ	0xFF3
  5199                           intcon	equ	0xFF2
  5200                           intcon2	equ	0xFF1
  5201                           postinc0	equ	0xFEE
  5202                           wreg	equ	0xFE8
  5203                           postdec1	equ	0xFE5
  5204                           fsr1l	equ	0xFE1
  5205                           indf2	equ	0xFDF
  5206                           postinc2	equ	0xFDE
  5207                           postdec2	equ	0xFDD
  5208                           fsr2h	equ	0xFDA
  5209                           fsr2l	equ	0xFD9
  5210                           status	equ	0xFD8
  5211                           
  5212 ;; *************** function ___lltofl *****************
  5213 ;; Defined at:
  5214 ;;		line 30 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltofl.c"
  5215 ;; Parameters:    Size  Location     Type
  5216 ;;  c               4   11[COMRAM] unsigned long 
  5217 ;; Auto vars:     Size  Location     Type
  5218 ;;		None
  5219 ;; Return value:  Size  Location     Type
  5220 ;;                  4   11[COMRAM] unsigned long 
  5221 ;; Registers used:
  5222 ;;		wreg, status,2, status,0, cstack
  5223 ;; Tracked objects:
  5224 ;;		On entry : 0/0
  5225 ;;		On exit  : 0/0
  5226 ;;		Unchanged: 0/0
  5227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5228 ;;      Params:         4       0       0       0       0       0       0       0       0
  5229 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5230 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5231 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5232 ;;Total ram usage:        4 bytes
  5233 ;; Hardware stack levels used:    1
  5234 ;; Hardware stack levels required when called:    2
  5235 ;; This function calls:
  5236 ;;		___flpack
  5237 ;; This function is called by:
  5238 ;;		_pow
  5239 ;; This function uses a non-reentrant model
  5240 ;;
  5241                           
  5242                           	psect	text24
  5243  00261C                     __ptext24:
  5244                           	opt stack 0
  5245  00261C                     ___lltofl:
  5246                           	opt stack 26
  5247                           
  5248                           ;incstack = 0
  5249  00261C  C00C  F002         	movff	___lltofl@c,___flpack@arg
  5250  002620  C00D  F003         	movff	___lltofl@c+1,___flpack@arg+1
  5251  002624  C00E  F004         	movff	___lltofl@c+2,___flpack@arg+2
  5252  002628  C00F  F005         	movff	___lltofl@c+3,___flpack@arg+3
  5253  00262C  0E96               	movlw	150
  5254  00262E  6E06               	movwf	___flpack@exp,c
  5255  002630  0E00               	movlw	0
  5256  002632  6E07               	movwf	___flpack@sign,c
  5257  002634  EC15  F00F         	call	___flpack	;wreg free
  5258  002638  C002  F00C         	movff	?___flpack,?___lltofl
  5259  00263C  C003  F00D         	movff	?___flpack+1,?___lltofl+1
  5260  002640  C004  F00E         	movff	?___flpack+2,?___lltofl+2
  5261  002644  C005  F00F         	movff	?___flpack+3,?___lltofl+3
  5262  002648  0012               	return		;funcret
  5263  00264A                     __end_of___lltofl:
  5264                           	opt stack 0
  5265                           tosu	equ	0xFFF
  5266                           tosh	equ	0xFFE
  5267                           tosl	equ	0xFFD
  5268                           pclath	equ	0xFFA
  5269                           tblptru	equ	0xFF8
  5270                           tblptrh	equ	0xFF7
  5271                           tblptrl	equ	0xFF6
  5272                           tablat	equ	0xFF5
  5273                           prodl	equ	0xFF3
  5274                           intcon	equ	0xFF2
  5275                           intcon2	equ	0xFF1
  5276                           postinc0	equ	0xFEE
  5277                           wreg	equ	0xFE8
  5278                           postdec1	equ	0xFE5
  5279                           fsr1l	equ	0xFE1
  5280                           indf2	equ	0xFDF
  5281                           postinc2	equ	0xFDE
  5282                           postdec2	equ	0xFDD
  5283                           fsr2h	equ	0xFDA
  5284                           fsr2l	equ	0xFD9
  5285                           status	equ	0xFD8
  5286                           
  5287 ;; *************** function _log10 *****************
  5288 ;; Defined at:
  5289 ;;		line 39 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  5290 ;; Parameters:    Size  Location     Type
  5291 ;;  x               4   71[COMRAM] unsigned long 
  5292 ;; Auto vars:     Size  Location     Type
  5293 ;;		None
  5294 ;; Return value:  Size  Location     Type
  5295 ;;                  4   71[COMRAM] unsigned long 
  5296 ;; Registers used:
  5297 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5298 ;; Tracked objects:
  5299 ;;		On entry : 0/0
  5300 ;;		On exit  : 0/0
  5301 ;;		Unchanged: 0/0
  5302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5303 ;;      Params:         4       0       0       0       0       0       0       0       0
  5304 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5305 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5306 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5307 ;;Total ram usage:        8 bytes
  5308 ;; Hardware stack levels used:    1
  5309 ;; Hardware stack levels required when called:    5
  5310 ;; This function calls:
  5311 ;;		___flmul
  5312 ;;		_log
  5313 ;; This function is called by:
  5314 ;;		_format_double
  5315 ;; This function uses a non-reentrant model
  5316 ;;
  5317                           
  5318                           	psect	text25
  5319  0022DC                     __ptext25:
  5320                           	opt stack 0
  5321  0022DC                     _log10:
  5322                           	opt stack 24
  5323                           
  5324                           ;incstack = 0
  5325  0022DC  C048  F042         	movff	log10@x,log@x
  5326  0022E0  C049  F043         	movff	log10@x+1,log@x+1
  5327  0022E4  C04A  F044         	movff	log10@x+2,log@x+2
  5328  0022E8  C04B  F045         	movff	log10@x+3,log@x+3
  5329  0022EC  EC6D  F00B         	call	_log	;wreg free
  5330  0022F0  C042  F04C         	movff	?_log,_log10$1104
  5331  0022F4  C043  F04D         	movff	?_log+1,_log10$1104+1
  5332  0022F8  C044  F04E         	movff	?_log+2,_log10$1104+2
  5333  0022FC  C045  F04F         	movff	?_log+3,_log10$1104+3
  5334  002300  C04C  F01B         	movff	_log10$1104,___flmul@f1
  5335  002304  C04D  F01C         	movff	_log10$1104+1,___flmul@f1+1
  5336  002308  C04E  F01D         	movff	_log10$1104+2,___flmul@f1+2
  5337  00230C  C04F  F01E         	movff	_log10$1104+3,___flmul@f1+3
  5338  002310  0ED9               	movlw	217
  5339  002312  6E1F               	movwf	___flmul@f2,c
  5340  002314  0E5B               	movlw	91
  5341  002316  6E20               	movwf	___flmul@f2+1,c
  5342  002318  0EDE               	movlw	222
  5343  00231A  6E21               	movwf	___flmul@f2+2,c
  5344  00231C  0E3E               	movlw	62
  5345  00231E  6E22               	movwf	___flmul@f2+3,c
  5346  002320  ECB3  F00E         	call	___flmul	;wreg free
  5347  002324  C01B  F048         	movff	?___flmul,?_log10
  5348  002328  C01C  F049         	movff	?___flmul+1,?_log10+1
  5349  00232C  C01D  F04A         	movff	?___flmul+2,?_log10+2
  5350  002330  C01E  F04B         	movff	?___flmul+3,?_log10+3
  5351  002334  0012               	return		;funcret
  5352  002336                     __end_of_log10:
  5353                           	opt stack 0
  5354                           tosu	equ	0xFFF
  5355                           tosh	equ	0xFFE
  5356                           tosl	equ	0xFFD
  5357                           pclath	equ	0xFFA
  5358                           tblptru	equ	0xFF8
  5359                           tblptrh	equ	0xFF7
  5360                           tblptrl	equ	0xFF6
  5361                           tablat	equ	0xFF5
  5362                           prodl	equ	0xFF3
  5363                           intcon	equ	0xFF2
  5364                           intcon2	equ	0xFF1
  5365                           postinc0	equ	0xFEE
  5366                           wreg	equ	0xFE8
  5367                           postdec1	equ	0xFE5
  5368                           fsr1l	equ	0xFE1
  5369                           indf2	equ	0xFDF
  5370                           postinc2	equ	0xFDE
  5371                           postdec2	equ	0xFDD
  5372                           fsr2h	equ	0xFDA
  5373                           fsr2l	equ	0xFD9
  5374                           status	equ	0xFD8
  5375                           
  5376 ;; *************** function _log *****************
  5377 ;; Defined at:
  5378 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  5379 ;; Parameters:    Size  Location     Type
  5380 ;;  x               4   65[COMRAM] unsigned long 
  5381 ;; Auto vars:     Size  Location     Type
  5382 ;;  exponent        2   69[COMRAM] int 
  5383 ;; Return value:  Size  Location     Type
  5384 ;;                  4   65[COMRAM] int 
  5385 ;; Registers used:
  5386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5387 ;; Tracked objects:
  5388 ;;		On entry : 0/0
  5389 ;;		On exit  : 0/0
  5390 ;;		Unchanged: 0/0
  5391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5392 ;;      Params:         4       0       0       0       0       0       0       0       0
  5393 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5394 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5395 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5396 ;;Total ram usage:        6 bytes
  5397 ;; Hardware stack levels used:    1
  5398 ;; Hardware stack levels required when called:    4
  5399 ;; This function calls:
  5400 ;;		___awtofl
  5401 ;;		___fladd
  5402 ;;		___flmul
  5403 ;;		_eval_poly
  5404 ;;		_frexp
  5405 ;; This function is called by:
  5406 ;;		_log10
  5407 ;;		_pow
  5408 ;; This function uses a non-reentrant model
  5409 ;;
  5410                           
  5411                           	psect	text26
  5412  0016DA                     __ptext26:
  5413                           	opt stack 0
  5414  0016DA                     _log:
  5415                           	opt stack 24
  5416                           
  5417                           ;incstack = 0
  5418  0016DA  AE45               	btfss	log@x+3,7,c
  5419  0016DC  D005               	goto	l3609
  5420  0016DE  6A42               	clrf	?_log,c
  5421  0016E0  6A43               	clrf	?_log+1,c
  5422  0016E2  6A44               	clrf	?_log+2,c
  5423  0016E4  6A45               	clrf	?_log+3,c
  5424  0016E6  0012               	return	
  5425  0016E8                     l3609:
  5426  0016E8  5042               	movf	log@x,w,c
  5427  0016EA  1043               	iorwf	log@x+1,w,c
  5428  0016EC  1044               	iorwf	log@x+2,w,c
  5429  0016EE  1045               	iorwf	log@x+3,w,c
  5430  0016F0  E105               	bnz	l3613
  5431  0016F2  6A42               	clrf	?_log,c
  5432  0016F4  6A43               	clrf	?_log+1,c
  5433  0016F6  6A44               	clrf	?_log+2,c
  5434  0016F8  6A45               	clrf	?_log+3,c
  5435  0016FA  0012               	return	
  5436  0016FC                     l3613:
  5437  0016FC  6A1F               	clrf	___flmul@f2,c
  5438  0016FE  6A20               	clrf	___flmul@f2+1,c
  5439  001700  6A21               	clrf	___flmul@f2+2,c
  5440  001702  0E40               	movlw	64
  5441  001704  6E22               	movwf	___flmul@f2+3,c
  5442  001706  0E46               	movlw	low log@exponent
  5443  001708  6E06               	movwf	frexp@eptr,c
  5444  00170A  C042  F002         	movff	log@x,frexp@value
  5445  00170E  C043  F003         	movff	log@x+1,frexp@value+1
  5446  001712  C044  F004         	movff	log@x+2,frexp@value+2
  5447  001716  C045  F005         	movff	log@x+3,frexp@value+3
  5448  00171A  ECC4  F010         	call	_frexp	;wreg free
  5449  00171E  C002  F01B         	movff	?_frexp,___flmul@f1
  5450  001722  C003  F01C         	movff	?_frexp+1,___flmul@f1+1
  5451  001726  C004  F01D         	movff	?_frexp+2,___flmul@f1+2
  5452  00172A  C005  F01E         	movff	?_frexp+3,___flmul@f1+3
  5453  00172E  ECB3  F00E         	call	___flmul	;wreg free
  5454  001732  C01B  F02A         	movff	?___flmul,___fladd@f1
  5455  001736  C01C  F02B         	movff	?___flmul+1,___fladd@f1+1
  5456  00173A  C01D  F02C         	movff	?___flmul+2,___fladd@f1+2
  5457  00173E  C01E  F02D         	movff	?___flmul+3,___fladd@f1+3
  5458  001742  D857               	call	PL28	;call to abstracted procedure
  5459  001744  ECC0  F00A         	call	___fladd	;wreg free
  5460  001748  C02A  F042         	movff	?___fladd,log@x
  5461  00174C  C02B  F043         	movff	?___fladd+1,log@x+1
  5462  001750  C02C  F044         	movff	?___fladd+2,log@x+2
  5463  001754  C02D  F045         	movff	?___fladd+3,log@x+3
  5464  001758  0646               	decf	log@exponent,f,c
  5465  00175A  A0D8               	btfss	status,0,c
  5466  00175C  0647               	decf	log@exponent+1,f,c
  5467  00175E  C042  F036         	movff	log@x,eval_poly@x
  5468  001762  C043  F037         	movff	log@x+1,eval_poly@x+1
  5469  001766  C044  F038         	movff	log@x+2,eval_poly@x+2
  5470  00176A  C045  F039         	movff	log@x+3,eval_poly@x+3
  5471  00176E  0E29               	movlw	low log@coeff
  5472  001770  6E3A               	movwf	eval_poly@d,c
  5473  001772  6A3C               	clrf	eval_poly@n+1,c
  5474  001774  0E08               	movlw	8
  5475  001776  6E3B               	movwf	eval_poly@n,c
  5476  001778  ECCE  F00F         	call	_eval_poly	;wreg free
  5477  00177C  C036  F042         	movff	?_eval_poly,log@x
  5478  001780  C037  F043         	movff	?_eval_poly+1,log@x+1
  5479  001784  C038  F044         	movff	?_eval_poly+2,log@x+2
  5480  001788  C039  F045         	movff	?_eval_poly+3,log@x+3
  5481  00178C  0E18               	movlw	24
  5482  00178E  6E1F               	movwf	___flmul@f2,c
  5483  001790  0E72               	movlw	114
  5484  001792  6E20               	movwf	___flmul@f2+1,c
  5485  001794  0E31               	movlw	49
  5486  001796  6E21               	movwf	___flmul@f2+2,c
  5487  001798  0E3F               	movlw	63
  5488  00179A  6E22               	movwf	___flmul@f2+3,c
  5489  00179C  C046  F00C         	movff	log@exponent,___awtofl@c
  5490  0017A0  C047  F00D         	movff	log@exponent+1,___awtofl@c+1
  5491  0017A4  EC71  F012         	call	___awtofl	;wreg free
  5492  0017A8  C00C  F01B         	movff	?___awtofl,___flmul@f1
  5493  0017AC  C00D  F01C         	movff	?___awtofl+1,___flmul@f1+1
  5494  0017B0  C00E  F01D         	movff	?___awtofl+2,___flmul@f1+2
  5495  0017B4  C00F  F01E         	movff	?___awtofl+3,___flmul@f1+3
  5496  0017B8  ECB3  F00E         	call	___flmul	;wreg free
  5497  0017BC  C01B  F02A         	movff	?___flmul,___fladd@f1
  5498  0017C0  C01C  F02B         	movff	?___flmul+1,___fladd@f1+1
  5499  0017C4  C01D  F02C         	movff	?___flmul+2,___fladd@f1+2
  5500  0017C8  C01E  F02D         	movff	?___flmul+3,___fladd@f1+3
  5501  0017CC  C042  F02E         	movff	log@x,___fladd@f2
  5502  0017D0  C043  F02F         	movff	log@x+1,___fladd@f2+1
  5503  0017D4  C044  F030         	movff	log@x+2,___fladd@f2+2
  5504  0017D8  C045  F031         	movff	log@x+3,___fladd@f2+3
  5505  0017DC  ECC0  F00A         	call	___fladd	;wreg free
  5506  0017E0  C02A  F042         	movff	?___fladd,?_log
  5507  0017E4  C02B  F043         	movff	?___fladd+1,?_log+1
  5508  0017E8  C02C  F044         	movff	?___fladd+2,?_log+2
  5509  0017EC  C02D  F045         	movff	?___fladd+3,?_log+3
  5510  0017F0  0012               	return		;funcret
  5511  0017F2                     __end_of_log:
  5512                           	opt stack 0
  5513  0017F2                     PL28:
  5514                           	opt stack 24
  5515  0017F2  0E00               	movlw	0
  5516  0017F4  6E2E               	movwf	___fladd@f2,c
  5517  0017F6  6E2F               	movwf	___fladd@f2+1,c
  5518  0017F8  0E80               	movlw	128
  5519  0017FA  6E30               	movwf	___fladd@f2+2,c
  5520  0017FC  0EBF               	movlw	191
  5521  0017FE  6E31               	movwf	___fladd@f2+3,c
  5522  001800  0CBF               	retlw	191
  5523  001802                     __end_ofPL28:
  5524                           	opt stack 0
  5525                           tosu	equ	0xFFF
  5526                           tosh	equ	0xFFE
  5527                           tosl	equ	0xFFD
  5528                           pclath	equ	0xFFA
  5529                           tblptru	equ	0xFF8
  5530                           tblptrh	equ	0xFF7
  5531                           tblptrl	equ	0xFF6
  5532                           tablat	equ	0xFF5
  5533                           prodl	equ	0xFF3
  5534                           intcon	equ	0xFF2
  5535                           intcon2	equ	0xFF1
  5536                           postinc0	equ	0xFEE
  5537                           wreg	equ	0xFE8
  5538                           postdec1	equ	0xFE5
  5539                           fsr1l	equ	0xFE1
  5540                           indf2	equ	0xFDF
  5541                           postinc2	equ	0xFDE
  5542                           postdec2	equ	0xFDD
  5543                           fsr2h	equ	0xFDA
  5544                           fsr2l	equ	0xFD9
  5545                           status	equ	0xFD8
  5546                           
  5547 ;; *************** function _frexp *****************
  5548 ;; Defined at:
  5549 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  5550 ;; Parameters:    Size  Location     Type
  5551 ;;  value           4    1[COMRAM] int 
  5552 ;;  eptr            1    5[COMRAM] PTR int 
  5553 ;;		 -> log@exponent(2), floor@expon(2), 
  5554 ;; Auto vars:     Size  Location     Type
  5555 ;;		None
  5556 ;; Return value:  Size  Location     Type
  5557 ;;                  4    1[COMRAM] PTR int 
  5558 ;; Registers used:
  5559 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5560 ;; Tracked objects:
  5561 ;;		On entry : 0/0
  5562 ;;		On exit  : 0/0
  5563 ;;		Unchanged: 0/0
  5564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5565 ;;      Params:         5       0       0       0       0       0       0       0       0
  5566 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5567 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5568 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5569 ;;Total ram usage:        7 bytes
  5570 ;; Hardware stack levels used:    1
  5571 ;; Hardware stack levels required when called:    1
  5572 ;; This function calls:
  5573 ;;		Nothing
  5574 ;; This function is called by:
  5575 ;;		_floor
  5576 ;;		_log
  5577 ;; This function uses a non-reentrant model
  5578 ;;
  5579                           
  5580                           	psect	text27
  5581  002188                     __ptext27:
  5582                           	opt stack 0
  5583  002188                     _frexp:
  5584                           	opt stack 26
  5585                           
  5586                           ;incstack = 0
  5587  002188  5002               	movf	frexp@value,w,c
  5588  00218A  1003               	iorwf	frexp@value+1,w,c
  5589  00218C  1004               	iorwf	frexp@value+2,w,c
  5590  00218E  1005               	iorwf	frexp@value+3,w,c
  5591  002190  E10B               	bnz	l2479
  5592  002192  5006               	movf	frexp@eptr,w,c
  5593  002194  6ED9               	movwf	fsr2l,c
  5594  002196  6ADA               	clrf	fsr2h,c
  5595  002198  0E00               	movlw	0
  5596  00219A  6ADE               	clrf	postinc2,c
  5597  00219C  6ADD               	clrf	postdec2,c
  5598  00219E  6A02               	clrf	?_frexp,c
  5599  0021A0  6A03               	clrf	?_frexp+1,c
  5600  0021A2  6A04               	clrf	?_frexp+2,c
  5601  0021A4  6A05               	clrf	?_frexp+3,c
  5602  0021A6  0012               	return	
  5603  0021A8                     l2479:
  5604  0021A8  5005               	movf	frexp@value+3,w,c
  5605  0021AA  0B7F               	andlw	127
  5606  0021AC  6E07               	movwf	??_frexp& (0+255),c
  5607  0021AE  6A08               	clrf	(??_frexp+1)& (0+255),c
  5608  0021B0  90D8               	bcf	status,0,c
  5609  0021B2  3607               	rlcf	??_frexp,f,c
  5610  0021B4  3608               	rlcf	??_frexp+1,f,c
  5611  0021B6  5006               	movf	frexp@eptr,w,c
  5612  0021B8  6ED9               	movwf	fsr2l,c
  5613  0021BA  6ADA               	clrf	fsr2h,c
  5614  0021BC  C007  FFDE         	movff	??_frexp,postinc2
  5615  0021C0  C008  FFDD         	movff	??_frexp+1,postdec2
  5616  0021C4  5006               	movf	frexp@eptr,w,c
  5617  0021C6  6ED9               	movwf	fsr2l,c
  5618  0021C8  6ADA               	clrf	fsr2h,c
  5619  0021CA  0E01               	movlw	1
  5620  0021CC  AE04               	btfss	frexp@value+2,7,c
  5621  0021CE  0E00               	movlw	0
  5622  0021D0  12DE               	iorwf	postinc2,f,c
  5623  0021D2  0E00               	movlw	0
  5624  0021D4  12DD               	iorwf	postdec2,f,c
  5625  0021D6  5006               	movf	frexp@eptr,w,c
  5626  0021D8  6ED9               	movwf	fsr2l,c
  5627  0021DA  6ADA               	clrf	fsr2h,c
  5628  0021DC  0E82               	movlw	130
  5629  0021DE  26DE               	addwf	postinc2,f,c
  5630  0021E0  0EFF               	movlw	255
  5631  0021E2  22DD               	addwfc	postdec2,f,c
  5632  0021E4  5005               	movf	frexp@value+3,w,c
  5633  0021E6  0B80               	andlw	-128
  5634  0021E8  093F               	iorlw	63
  5635  0021EA  6E05               	movwf	frexp@value+3,c
  5636  0021EC  9E04               	bcf	frexp@value+2,7,c
  5637  0021EE  C002  F002         	movff	frexp@value,?_frexp
  5638  0021F2  C003  F003         	movff	frexp@value+1,?_frexp+1
  5639  0021F6  C004  F004         	movff	frexp@value+2,?_frexp+2
  5640  0021FA  C005  F005         	movff	frexp@value+3,?_frexp+3
  5641  0021FE  0012               	return		;funcret
  5642  002200                     __end_of_frexp:
  5643                           	opt stack 0
  5644                           tosu	equ	0xFFF
  5645                           tosh	equ	0xFFE
  5646                           tosl	equ	0xFFD
  5647                           pclath	equ	0xFFA
  5648                           tblptru	equ	0xFF8
  5649                           tblptrh	equ	0xFF7
  5650                           tblptrl	equ	0xFF6
  5651                           tablat	equ	0xFF5
  5652                           prodl	equ	0xFF3
  5653                           intcon	equ	0xFF2
  5654                           intcon2	equ	0xFF1
  5655                           postinc0	equ	0xFEE
  5656                           wreg	equ	0xFE8
  5657                           postdec1	equ	0xFE5
  5658                           fsr1l	equ	0xFE1
  5659                           indf2	equ	0xFDF
  5660                           postinc2	equ	0xFDE
  5661                           postdec2	equ	0xFDD
  5662                           fsr2h	equ	0xFDA
  5663                           fsr2l	equ	0xFD9
  5664                           status	equ	0xFD8
  5665                           
  5666 ;; *************** function _eval_poly *****************
  5667 ;; Defined at:
  5668 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  5669 ;; Parameters:    Size  Location     Type
  5670 ;;  x               4   53[COMRAM] PTR int 
  5671 ;;  d               1   57[COMRAM] PTR const 
  5672 ;;		 -> exp@coeff(40), log@coeff(36), 
  5673 ;;  n               2   58[COMRAM] int 
  5674 ;; Auto vars:     Size  Location     Type
  5675 ;;  res             4   61[COMRAM] int 
  5676 ;; Return value:  Size  Location     Type
  5677 ;;                  4   53[COMRAM] int 
  5678 ;; Registers used:
  5679 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5680 ;; Tracked objects:
  5681 ;;		On entry : 0/0
  5682 ;;		On exit  : 0/0
  5683 ;;		Unchanged: 0/0
  5684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5685 ;;      Params:         7       0       0       0       0       0       0       0       0
  5686 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5687 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5688 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5689 ;;Total ram usage:       12 bytes
  5690 ;; Hardware stack levels used:    1
  5691 ;; Hardware stack levels required when called:    3
  5692 ;; This function calls:
  5693 ;;		___fladd
  5694 ;;		___flmul
  5695 ;; This function is called by:
  5696 ;;		_log
  5697 ;;		_exp
  5698 ;; This function uses a non-reentrant model
  5699 ;;
  5700                           
  5701                           	psect	text28
  5702  001F9C                     __ptext28:
  5703                           	opt stack 0
  5704  001F9C                     _eval_poly:
  5705                           	opt stack 0
  5706                           
  5707                           ;incstack = 0
  5708  001F9C  D84B               	call	PL14	;call to abstracted procedure
  5709  001F9E  CFF5 F03E          	movff	tablat,eval_poly@res
  5710  001FA2  0009               	tblrd		*+
  5711  001FA4  CFF5 F03F          	movff	tablat,eval_poly@res+1
  5712  001FA8  0009               	tblrd		*+
  5713  001FAA  CFF5 F040          	movff	tablat,eval_poly@res+2
  5714  001FAE  000A               	tblrd		*-
  5715  001FB0  CFF5 F041          	movff	tablat,eval_poly@res+3
  5716  001FB4  D033               	goto	l3599
  5717  001FB6                     l3597:
  5718  001FB6  C03E  F01F         	movff	eval_poly@res,___flmul@f2
  5719  001FBA  C03F  F020         	movff	eval_poly@res+1,___flmul@f2+1
  5720  001FBE  C040  F021         	movff	eval_poly@res+2,___flmul@f2+2
  5721  001FC2  C041  F022         	movff	eval_poly@res+3,___flmul@f2+3
  5722  001FC6  C036  F01B         	movff	eval_poly@x,___flmul@f1
  5723  001FCA  C037  F01C         	movff	eval_poly@x+1,___flmul@f1+1
  5724  001FCE  C038  F01D         	movff	eval_poly@x+2,___flmul@f1+2
  5725  001FD2  C039  F01E         	movff	eval_poly@x+3,___flmul@f1+3
  5726  001FD6  ECB3  F00E         	call	___flmul	;wreg free
  5727  001FDA  C01B  F02A         	movff	?___flmul,___fladd@f1
  5728  001FDE  C01C  F02B         	movff	?___flmul+1,___fladd@f1+1
  5729  001FE2  C01D  F02C         	movff	?___flmul+2,___fladd@f1+2
  5730  001FE6  C01E  F02D         	movff	?___flmul+3,___fladd@f1+3
  5731  001FEA  063B               	decf	eval_poly@n,f,c
  5732  001FEC  A0D8               	btfss	status,0,c
  5733  001FEE  063C               	decf	eval_poly@n+1,f,c
  5734  001FF0  D821               	call	PL14	;call to abstracted procedure
  5735  001FF2  CFF5 F02E          	movff	tablat,___fladd@f2
  5736  001FF6  0009               	tblrd		*+
  5737  001FF8  CFF5 F02F          	movff	tablat,___fladd@f2+1
  5738  001FFC  0009               	tblrd		*+
  5739  001FFE  CFF5 F030          	movff	tablat,___fladd@f2+2
  5740  002002  000A               	tblrd		*-
  5741  002004  CFF5 F031          	movff	tablat,___fladd@f2+3
  5742  002008  ECC0  F00A         	call	___fladd	;wreg free
  5743  00200C  C02A  F03E         	movff	?___fladd,eval_poly@res
  5744  002010  C02B  F03F         	movff	?___fladd+1,eval_poly@res+1
  5745  002014  C02C  F040         	movff	?___fladd+2,eval_poly@res+2
  5746  002018  C02D  F041         	movff	?___fladd+3,eval_poly@res+3
  5747  00201C                     l3599:
  5748  00201C  503B               	movf	eval_poly@n,w,c
  5749  00201E  103C               	iorwf	eval_poly@n+1,w,c
  5750  002020  E1CA               	bnz	l3597
  5751  002022  C03E  F036         	movff	eval_poly@res,?_eval_poly
  5752  002026  C03F  F037         	movff	eval_poly@res+1,?_eval_poly+1
  5753  00202A  C040  F038         	movff	eval_poly@res+2,?_eval_poly+2
  5754  00202E  C041  F039         	movff	eval_poly@res+3,?_eval_poly+3
  5755  002032  0012               	return		;funcret
  5756  002034                     __end_of_eval_poly:
  5757                           	opt stack 0
  5758  002034                     PL14:
  5759                           	opt stack 24
  5760  002034  503B               	movf	eval_poly@n,w,c
  5761  002036  0D04               	mullw	4
  5762  002038  503A               	movf	eval_poly@d,w,c
  5763  00203A  24F3               	addwf	prodl,w,c
  5764  00203C  6E3D               	movwf	??_eval_poly& (0+255),c
  5765  00203E  C03D  FFF6         	movff	??_eval_poly,tblptrl
  5766  002042                     	if	1	;There is more than 1 active tblptr byte
  5767  002042  0E08               	movlw	high __smallconst
  5768  002044  6EF7               	movwf	tblptrh,c
  5769  002046                     	endif
  5770  002046                     	if	0	;tblptru may be non-zero
  5771  002046                     	endif
  5772  002046                     	if	0	;tblptru may be non-zero
  5773  002046                     	endif
  5774  002046  0009               	tblrd		*+
  5775  002048  0012               	return	
  5776  00204A                     __end_ofPL14:
  5777                           	opt stack 0
  5778                           tosu	equ	0xFFF
  5779                           tosh	equ	0xFFE
  5780                           tosl	equ	0xFFD
  5781                           pclath	equ	0xFFA
  5782                           tblptru	equ	0xFF8
  5783                           tblptrh	equ	0xFF7
  5784                           tblptrl	equ	0xFF6
  5785                           tablat	equ	0xFF5
  5786                           prodl	equ	0xFF3
  5787                           intcon	equ	0xFF2
  5788                           intcon2	equ	0xFF1
  5789                           postinc0	equ	0xFEE
  5790                           wreg	equ	0xFE8
  5791                           postdec1	equ	0xFE5
  5792                           fsr1l	equ	0xFE1
  5793                           indf2	equ	0xFDF
  5794                           postinc2	equ	0xFDE
  5795                           postdec2	equ	0xFDD
  5796                           fsr2h	equ	0xFDA
  5797                           fsr2l	equ	0xFD9
  5798                           status	equ	0xFD8
  5799                           
  5800 ;; *************** function ___flmul *****************
  5801 ;; Defined at:
  5802 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flmul.c"
  5803 ;; Parameters:    Size  Location     Type
  5804 ;;  f1              4   26[COMRAM] int 
  5805 ;;  f2              4   30[COMRAM] int 
  5806 ;; Auto vars:     Size  Location     Type
  5807 ;;  f3_as_produc    4   35[COMRAM] unsigned long 
  5808 ;;  sign            1   40[COMRAM] unsigned char 
  5809 ;;  cntr            1   39[COMRAM] unsigned char 
  5810 ;;  exp             1   34[COMRAM] unsigned char 
  5811 ;; Return value:  Size  Location     Type
  5812 ;;                  4   26[COMRAM] unsigned char 
  5813 ;; Registers used:
  5814 ;;		wreg, status,2, status,0, cstack
  5815 ;; Tracked objects:
  5816 ;;		On entry : 0/0
  5817 ;;		On exit  : 0/0
  5818 ;;		Unchanged: 0/0
  5819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5820 ;;      Params:         8       0       0       0       0       0       0       0       0
  5821 ;;      Locals:         7       0       0       0       0       0       0       0       0
  5822 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5823 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5824 ;;Total ram usage:       15 bytes
  5825 ;; Hardware stack levels used:    1
  5826 ;; Hardware stack levels required when called:    2
  5827 ;; This function calls:
  5828 ;;		___flpack
  5829 ;; This function is called by:
  5830 ;;		_format_double
  5831 ;;		_measure_capacitance
  5832 ;;		_measure_inductance
  5833 ;;		_log
  5834 ;;		_log10
  5835 ;;		_pow
  5836 ;;		_eval_poly
  5837 ;;		_exp
  5838 ;; This function uses a non-reentrant model
  5839 ;;
  5840                           
  5841                           	psect	text29
  5842  001D66                     __ptext29:
  5843                           	opt stack 0
  5844  001D66                     ___flmul:
  5845                           	opt stack 27
  5846                           
  5847                           ;incstack = 0
  5848  001D66  341D               	rlcf	___flmul@f1+2,w,c
  5849  001D68  341E               	rlcf	___flmul@f1+3,w,c
  5850  001D6A  6E23               	movwf	___flmul@exp,c
  5851  001D6C  5023               	movf	___flmul@exp,w,c
  5852  001D6E  E105               	bnz	l3479
  5853  001D70  6A1B               	clrf	?___flmul,c
  5854  001D72  6A1C               	clrf	?___flmul+1,c
  5855  001D74  6A1D               	clrf	?___flmul+2,c
  5856  001D76  6A1E               	clrf	?___flmul+3,c
  5857  001D78  0012               	return	
  5858  001D7A                     l3479:
  5859  001D7A  3421               	rlcf	___flmul@f2+2,w,c
  5860  001D7C  3422               	rlcf	___flmul@f2+3,w,c
  5861  001D7E  6E29               	movwf	___flmul@sign,c
  5862  001D80  5029               	movf	___flmul@sign,w,c
  5863  001D82  E105               	bnz	l3483
  5864  001D84  6A1B               	clrf	?___flmul,c
  5865  001D86  6A1C               	clrf	?___flmul+1,c
  5866  001D88  6A1D               	clrf	?___flmul+2,c
  5867  001D8A  6A1E               	clrf	?___flmul+3,c
  5868  001D8C  0012               	return	
  5869  001D8E                     l3483:
  5870  001D8E  5029               	movf	___flmul@sign,w,c
  5871  001D90  0F7B               	addlw	123
  5872  001D92  2623               	addwf	___flmul@exp,f,c
  5873  001D94  C01E  F029         	movff	___flmul@f1+3,___flmul@sign
  5874  001D98  5022               	movf	___flmul@f2+3,w,c
  5875  001D9A  1A29               	xorwf	___flmul@sign,f,c
  5876  001D9C  0E80               	movlw	128
  5877  001D9E  1629               	andwf	___flmul@sign,f,c
  5878  001DA0  8E1D               	bsf	___flmul@f1+2,7,c
  5879  001DA2  8E21               	bsf	___flmul@f2+2,7,c
  5880  001DA4  0E00               	movlw	0
  5881  001DA6  1622               	andwf	___flmul@f2+3,f,c
  5882  001DA8  6A24               	clrf	___flmul@f3_as_product,c
  5883  001DAA  6A25               	clrf	___flmul@f3_as_product+1,c
  5884  001DAC  6A26               	clrf	___flmul@f3_as_product+2,c
  5885  001DAE  6A27               	clrf	___flmul@f3_as_product+3,c
  5886  001DB0  0E07               	movlw	7
  5887  001DB2  6E28               	movwf	___flmul@cntr,c
  5888  001DB4                     l3495:
  5889  001DB4  B01B               	btfsc	___flmul@f1,0,c
  5890  001DB6  D829               	call	PL20	;call to abstracted procedure
  5891  001DB8  D831               	call	PL34	;call to abstracted procedure
  5892  001DBA  361F               	rlcf	___flmul@f2,f,c
  5893  001DBC  3620               	rlcf	___flmul@f2+1,f,c
  5894  001DBE  3621               	rlcf	___flmul@f2+2,f,c
  5895  001DC0  3622               	rlcf	___flmul@f2+3,f,c
  5896  001DC2  2E28               	decfsz	___flmul@cntr,f,c
  5897  001DC4  D7F7               	goto	l3495
  5898  001DC6  0E11               	movlw	17
  5899  001DC8  6E28               	movwf	___flmul@cntr,c
  5900  001DCA                     l3507:
  5901  001DCA  B01B               	btfsc	___flmul@f1,0,c
  5902  001DCC  D81E               	call	PL20	;call to abstracted procedure
  5903  001DCE  D826               	call	PL34	;call to abstracted procedure
  5904  001DD0  3227               	rrcf	___flmul@f3_as_product+3,f,c
  5905  001DD2  3226               	rrcf	___flmul@f3_as_product+2,f,c
  5906  001DD4  3225               	rrcf	___flmul@f3_as_product+1,f,c
  5907  001DD6  3224               	rrcf	___flmul@f3_as_product,f,c
  5908  001DD8  2E28               	decfsz	___flmul@cntr,f,c
  5909  001DDA  D7F7               	goto	l3507
  5910  001DDC  C024  F002         	movff	___flmul@f3_as_product,___flpack@arg
  5911  001DE0  C025  F003         	movff	___flmul@f3_as_product+1,___flpack@arg+1
  5912  001DE4  C026  F004         	movff	___flmul@f3_as_product+2,___flpack@arg+2
  5913  001DE8  C027  F005         	movff	___flmul@f3_as_product+3,___flpack@arg+3
  5914  001DEC  C023  F006         	movff	___flmul@exp,___flpack@exp
  5915  001DF0  C029  F007         	movff	___flmul@sign,___flpack@sign
  5916  001DF4  EC15  F00F         	call	___flpack	;wreg free
  5917  001DF8  C002  F01B         	movff	?___flpack,?___flmul
  5918  001DFC  C003  F01C         	movff	?___flpack+1,?___flmul+1
  5919  001E00  C004  F01D         	movff	?___flpack+2,?___flmul+2
  5920  001E04  C005  F01E         	movff	?___flpack+3,?___flmul+3
  5921  001E08  0012               	return		;funcret
  5922  001E0A                     __end_of___flmul:
  5923                           	opt stack 0
  5924  001E0A                     PL20:
  5925                           	opt stack 27
  5926  001E0A  501F               	movf	___flmul@f2,w,c
  5927  001E0C  2624               	addwf	___flmul@f3_as_product,f,c
  5928  001E0E  5020               	movf	___flmul@f2+1,w,c
  5929  001E10  2225               	addwfc	___flmul@f3_as_product+1,f,c
  5930  001E12  5021               	movf	___flmul@f2+2,w,c
  5931  001E14  2226               	addwfc	___flmul@f3_as_product+2,f,c
  5932  001E16  5022               	movf	___flmul@f2+3,w,c
  5933  001E18  2227               	addwfc	___flmul@f3_as_product+3,f,c
  5934  001E1A  0012               	return	
  5935  001E1C                     __end_ofPL20:
  5936                           	opt stack 0
  5937  001E1C                     PL34:
  5938                           	opt stack 27
  5939  001E1C  90D8               	bcf	status,0,c
  5940  001E1E  321E               	rrcf	___flmul@f1+3,f,c
  5941  001E20  321D               	rrcf	___flmul@f1+2,f,c
  5942  001E22  321C               	rrcf	___flmul@f1+1,f,c
  5943  001E24  321B               	rrcf	___flmul@f1,f,c
  5944  001E26  90D8               	bcf	status,0,c
  5945  001E28  0012               	return	
  5946  001E2A                     __end_ofPL34:
  5947                           	opt stack 0
  5948                           tosu	equ	0xFFF
  5949                           tosh	equ	0xFFE
  5950                           tosl	equ	0xFFD
  5951                           pclath	equ	0xFFA
  5952                           tblptru	equ	0xFF8
  5953                           tblptrh	equ	0xFF7
  5954                           tblptrl	equ	0xFF6
  5955                           tablat	equ	0xFF5
  5956                           prodl	equ	0xFF3
  5957                           intcon	equ	0xFF2
  5958                           intcon2	equ	0xFF1
  5959                           postinc0	equ	0xFEE
  5960                           wreg	equ	0xFE8
  5961                           postdec1	equ	0xFE5
  5962                           fsr1l	equ	0xFE1
  5963                           indf2	equ	0xFDF
  5964                           postinc2	equ	0xFDE
  5965                           postdec2	equ	0xFDD
  5966                           fsr2h	equ	0xFDA
  5967                           fsr2l	equ	0xFD9
  5968                           status	equ	0xFD8
  5969                           
  5970 ;; *************** function ___fladd *****************
  5971 ;; Defined at:
  5972 ;;		line 88 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fladd.c"
  5973 ;; Parameters:    Size  Location     Type
  5974 ;;  f1              4   41[COMRAM] unsigned char 
  5975 ;;  f2              4   45[COMRAM] unsigned char 
  5976 ;; Auto vars:     Size  Location     Type
  5977 ;;  exp1            1   52[COMRAM] unsigned char 
  5978 ;;  exp2            1   51[COMRAM] unsigned char 
  5979 ;;  sign            1   50[COMRAM] unsigned char 
  5980 ;; Return value:  Size  Location     Type
  5981 ;;                  4   41[COMRAM] unsigned char 
  5982 ;; Registers used:
  5983 ;;		wreg, status,2, status,0, cstack
  5984 ;; Tracked objects:
  5985 ;;		On entry : 0/0
  5986 ;;		On exit  : 0/0
  5987 ;;		Unchanged: 0/0
  5988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5989 ;;      Params:         8       0       0       0       0       0       0       0       0
  5990 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5991 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5992 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5993 ;;Total ram usage:       12 bytes
  5994 ;; Hardware stack levels used:    1
  5995 ;; Hardware stack levels required when called:    2
  5996 ;; This function calls:
  5997 ;;		___flpack
  5998 ;; This function is called by:
  5999 ;;		_floor
  6000 ;;		___flsub
  6001 ;;		_log
  6002 ;;		_eval_poly
  6003 ;; This function uses a non-reentrant model
  6004 ;;
  6005                           
  6006                           	psect	text30
  6007  001580                     __ptext30:
  6008                           	opt stack 0
  6009  001580                     ___fladd:
  6010                           	opt stack 26
  6011                           
  6012                           ;incstack = 0
  6013  001580  342C               	rlcf	___fladd@f1+2,w,c
  6014  001582  342D               	rlcf	___fladd@f1+3,w,c
  6015  001584  6E35               	movwf	___fladd@exp1,c
  6016  001586  3430               	rlcf	___fladd@f2+2,w,c
  6017  001588  3431               	rlcf	___fladd@f2+3,w,c
  6018  00158A  6E34               	movwf	___fladd@exp2,c
  6019  00158C  5035               	movf	___fladd@exp1,w,c
  6020  00158E  E009               	bz	l761
  6021  001590  5034               	movf	___fladd@exp2,w,c
  6022  001592  5C35               	subwf	___fladd@exp1,w,c
  6023  001594  E20F               	bc	l3415
  6024  001596  5035               	movf	___fladd@exp1,w,c
  6025  001598  5C34               	subwf	___fladd@exp2,w,c
  6026  00159A  6E32               	movwf	??___fladd& (0+255),c
  6027  00159C  0E20               	movlw	32
  6028  00159E  6432               	cpfsgt	??___fladd,c
  6029  0015A0  D009               	goto	l3415
  6030  0015A2                     l761:
  6031  0015A2  C02E  F02A         	movff	___fladd@f2,?___fladd
  6032  0015A6  C02F  F02B         	movff	___fladd@f2+1,?___fladd+1
  6033  0015AA  C030  F02C         	movff	___fladd@f2+2,?___fladd+2
  6034  0015AE  C031  F02D         	movff	___fladd@f2+3,?___fladd+3
  6035  0015B2  0012               	return	
  6036  0015B4                     l3415:
  6037  0015B4  5034               	movf	___fladd@exp2,w,c
  6038  0015B6  E009               	bz	l765
  6039  0015B8  5035               	movf	___fladd@exp1,w,c
  6040  0015BA  5C34               	subwf	___fladd@exp2,w,c
  6041  0015BC  E20F               	bc	l3421
  6042  0015BE  5034               	movf	___fladd@exp2,w,c
  6043  0015C0  5C35               	subwf	___fladd@exp1,w,c
  6044  0015C2  6E32               	movwf	??___fladd& (0+255),c
  6045  0015C4  0E20               	movlw	32
  6046  0015C6  6432               	cpfsgt	??___fladd,c
  6047  0015C8  D009               	goto	l3421
  6048  0015CA                     l765:
  6049  0015CA  C02A  F02A         	movff	___fladd@f1,?___fladd
  6050  0015CE  C02B  F02B         	movff	___fladd@f1+1,?___fladd+1
  6051  0015D2  C02C  F02C         	movff	___fladd@f1+2,?___fladd+2
  6052  0015D6  C02D  F02D         	movff	___fladd@f1+3,?___fladd+3
  6053  0015DA  0012               	return	
  6054  0015DC                     l3421:
  6055  0015DC  0E06               	movlw	6
  6056  0015DE  6E33               	movwf	___fladd@sign,c
  6057  0015E0  BE2D               	btfsc	___fladd@f1+3,7,c
  6058  0015E2  8E33               	bsf	___fladd@sign,7,c
  6059  0015E4  BE31               	btfsc	___fladd@f2+3,7,c
  6060  0015E6  8C33               	bsf	___fladd@sign,6,c
  6061  0015E8  8E2C               	bsf	___fladd@f1+2,7,c
  6062  0015EA  6A2D               	clrf	___fladd@f1+3,c
  6063  0015EC  8E30               	bsf	___fladd@f2+2,7,c
  6064  0015EE  6A31               	clrf	___fladd@f2+3,c
  6065  0015F0  5034               	movf	___fladd@exp2,w,c
  6066  0015F2  5C35               	subwf	___fladd@exp1,w,c
  6067  0015F4  E21A               	bc	l3445
  6068  0015F6                     l3435:
  6069  0015F6  90D8               	bcf	status,0,c
  6070  0015F8  362E               	rlcf	___fladd@f2,f,c
  6071  0015FA  362F               	rlcf	___fladd@f2+1,f,c
  6072  0015FC  3630               	rlcf	___fladd@f2+2,f,c
  6073  0015FE  3631               	rlcf	___fladd@f2+3,f,c
  6074  001600  0634               	decf	___fladd@exp2,f,c
  6075  001602  5035               	movf	___fladd@exp1,w,c
  6076  001604  1834               	xorwf	___fladd@exp2,w,c
  6077  001606  E00D               	bz	l3443
  6078  001608  0633               	decf	___fladd@sign,f,c
  6079  00160A  C033  F032         	movff	___fladd@sign,??___fladd
  6080  00160E  0E07               	movlw	7
  6081  001610  1632               	andwf	??___fladd,f,c
  6082  001612  E007               	bz	l3443
  6083  001614  D7F0               	goto	l3435
  6084  001616                     l3441:
  6085  001616  90D8               	bcf	status,0,c
  6086  001618  322D               	rrcf	___fladd@f1+3,f,c
  6087  00161A  322C               	rrcf	___fladd@f1+2,f,c
  6088  00161C  322B               	rrcf	___fladd@f1+1,f,c
  6089  00161E  322A               	rrcf	___fladd@f1,f,c
  6090  001620  2A35               	incf	___fladd@exp1,f,c
  6091  001622                     l3443:
  6092  001622  5034               	movf	___fladd@exp2,w,c
  6093  001624  1835               	xorwf	___fladd@exp1,w,c
  6094  001626  E01D               	bz	l776
  6095  001628  D7F6               	goto	l3441
  6096  00162A                     l3445:
  6097  00162A  5035               	movf	___fladd@exp1,w,c
  6098  00162C  5C34               	subwf	___fladd@exp2,w,c
  6099  00162E  E219               	bc	l776
  6100  001630                     l3447:
  6101  001630  90D8               	bcf	status,0,c
  6102  001632  362A               	rlcf	___fladd@f1,f,c
  6103  001634  362B               	rlcf	___fladd@f1+1,f,c
  6104  001636  362C               	rlcf	___fladd@f1+2,f,c
  6105  001638  362D               	rlcf	___fladd@f1+3,f,c
  6106  00163A  0635               	decf	___fladd@exp1,f,c
  6107  00163C  5035               	movf	___fladd@exp1,w,c
  6108  00163E  1834               	xorwf	___fladd@exp2,w,c
  6109  001640  E00D               	bz	l3455
  6110  001642  0633               	decf	___fladd@sign,f,c
  6111  001644  C033  F032         	movff	___fladd@sign,??___fladd
  6112  001648  0E07               	movlw	7
  6113  00164A  1632               	andwf	??___fladd,f,c
  6114  00164C  E007               	bz	l3455
  6115  00164E  D7F0               	goto	l3447
  6116  001650                     l3453:
  6117  001650  90D8               	bcf	status,0,c
  6118  001652  3231               	rrcf	___fladd@f2+3,f,c
  6119  001654  3230               	rrcf	___fladd@f2+2,f,c
  6120  001656  322F               	rrcf	___fladd@f2+1,f,c
  6121  001658  322E               	rrcf	___fladd@f2,f,c
  6122  00165A  2A34               	incf	___fladd@exp2,f,c
  6123  00165C                     l3455:
  6124  00165C  5034               	movf	___fladd@exp2,w,c
  6125  00165E  1835               	xorwf	___fladd@exp1,w,c
  6126  001660  E1F7               	bnz	l3453
  6127  001662                     l776:
  6128  001662  AE33               	btfss	___fladd@sign,7,c
  6129  001664  D009               	goto	l3459
  6130  001666  1E2A               	comf	___fladd@f1,f,c
  6131  001668  1E2B               	comf	___fladd@f1+1,f,c
  6132  00166A  1E2C               	comf	___fladd@f1+2,f,c
  6133  00166C  1E2D               	comf	___fladd@f1+3,f,c
  6134  00166E  2A2A               	incf	___fladd@f1,f,c
  6135  001670  0E00               	movlw	0
  6136  001672  222B               	addwfc	___fladd@f1+1,f,c
  6137  001674  222C               	addwfc	___fladd@f1+2,f,c
  6138  001676  222D               	addwfc	___fladd@f1+3,f,c
  6139  001678                     l3459:
  6140  001678  BC33               	btfsc	___fladd@sign,6,c
  6141  00167A  D825               	call	PL16	;call to abstracted procedure
  6142  00167C  6A33               	clrf	___fladd@sign,c
  6143  00167E  502A               	movf	___fladd@f1,w,c
  6144  001680  262E               	addwf	___fladd@f2,f,c
  6145  001682  502B               	movf	___fladd@f1+1,w,c
  6146  001684  222F               	addwfc	___fladd@f2+1,f,c
  6147  001686  502C               	movf	___fladd@f1+2,w,c
  6148  001688  2230               	addwfc	___fladd@f2+2,f,c
  6149  00168A  502D               	movf	___fladd@f1+3,w,c
  6150  00168C  2231               	addwfc	___fladd@f2+3,f,c
  6151  00168E  AE31               	btfss	___fladd@f2+3,7,c
  6152  001690  D003               	goto	l3471
  6153  001692  D819               	call	PL16	;call to abstracted procedure
  6154  001694  0E01               	movlw	1
  6155  001696  6E33               	movwf	___fladd@sign,c
  6156  001698                     l3471:
  6157  001698  C02E  F002         	movff	___fladd@f2,___flpack@arg
  6158  00169C  C02F  F003         	movff	___fladd@f2+1,___flpack@arg+1
  6159  0016A0  C030  F004         	movff	___fladd@f2+2,___flpack@arg+2
  6160  0016A4  C031  F005         	movff	___fladd@f2+3,___flpack@arg+3
  6161  0016A8  C035  F006         	movff	___fladd@exp1,___flpack@exp
  6162  0016AC  C033  F007         	movff	___fladd@sign,___flpack@sign
  6163  0016B0  EC15  F00F         	call	___flpack	;wreg free
  6164  0016B4  C002  F02A         	movff	?___flpack,?___fladd
  6165  0016B8  C003  F02B         	movff	?___flpack+1,?___fladd+1
  6166  0016BC  C004  F02C         	movff	?___flpack+2,?___fladd+2
  6167  0016C0  C005  F02D         	movff	?___flpack+3,?___fladd+3
  6168  0016C4  0012               	return		;funcret
  6169  0016C6                     __end_of___fladd:
  6170                           	opt stack 0
  6171  0016C6                     PL16:
  6172                           	opt stack 26
  6173  0016C6  1E2E               	comf	___fladd@f2,f,c
  6174  0016C8  1E2F               	comf	___fladd@f2+1,f,c
  6175  0016CA  1E30               	comf	___fladd@f2+2,f,c
  6176  0016CC  1E31               	comf	___fladd@f2+3,f,c
  6177  0016CE  2A2E               	incf	___fladd@f2,f,c
  6178  0016D0  0E00               	movlw	0
  6179  0016D2  222F               	addwfc	___fladd@f2+1,f,c
  6180  0016D4  2230               	addwfc	___fladd@f2+2,f,c
  6181  0016D6  2231               	addwfc	___fladd@f2+3,f,c
  6182  0016D8  0C00               	retlw	0
  6183  0016DA                     __end_ofPL16:
  6184                           	opt stack 0
  6185                           tosu	equ	0xFFF
  6186                           tosh	equ	0xFFE
  6187                           tosl	equ	0xFFD
  6188                           pclath	equ	0xFFA
  6189                           tblptru	equ	0xFF8
  6190                           tblptrh	equ	0xFF7
  6191                           tblptrl	equ	0xFF6
  6192                           tablat	equ	0xFF5
  6193                           prodl	equ	0xFF3
  6194                           intcon	equ	0xFF2
  6195                           intcon2	equ	0xFF1
  6196                           postinc0	equ	0xFEE
  6197                           wreg	equ	0xFE8
  6198                           postdec1	equ	0xFE5
  6199                           fsr1l	equ	0xFE1
  6200                           indf2	equ	0xFDF
  6201                           postinc2	equ	0xFDE
  6202                           postdec2	equ	0xFDD
  6203                           fsr2h	equ	0xFDA
  6204                           fsr2l	equ	0xFD9
  6205                           status	equ	0xFD8
  6206                           
  6207 ;; *************** function ___awtofl *****************
  6208 ;; Defined at:
  6209 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtofl.c"
  6210 ;; Parameters:    Size  Location     Type
  6211 ;;  c               2   11[COMRAM] int 
  6212 ;; Auto vars:     Size  Location     Type
  6213 ;;  f1              4    0        int 
  6214 ;;  sign            1   15[COMRAM] unsigned char 
  6215 ;; Return value:  Size  Location     Type
  6216 ;;                  4   11[COMRAM] unsigned char 
  6217 ;; Registers used:
  6218 ;;		wreg, status,2, status,0, cstack
  6219 ;; Tracked objects:
  6220 ;;		On entry : 0/0
  6221 ;;		On exit  : 0/0
  6222 ;;		Unchanged: 0/0
  6223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6224 ;;      Params:         4       0       0       0       0       0       0       0       0
  6225 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6226 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6227 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6228 ;;Total ram usage:        5 bytes
  6229 ;; Hardware stack levels used:    1
  6230 ;; Hardware stack levels required when called:    2
  6231 ;; This function calls:
  6232 ;;		___flpack
  6233 ;; This function is called by:
  6234 ;;		_format_double
  6235 ;;		_log
  6236 ;;		_exp
  6237 ;; This function uses a non-reentrant model
  6238 ;;
  6239                           
  6240                           	psect	text31
  6241  0024E2                     __ptext31:
  6242                           	opt stack 0
  6243  0024E2                     ___awtofl:
  6244                           	opt stack 25
  6245                           
  6246                           ;incstack = 0
  6247  0024E2  6A10               	clrf	___awtofl@sign,c
  6248  0024E4  AE0D               	btfss	___awtofl@c+1,7,c
  6249  0024E6  D005               	goto	l3591
  6250  0024E8  6C0C               	negf	___awtofl@c,c
  6251  0024EA  1E0D               	comf	___awtofl@c+1,f,c
  6252  0024EC  B0D8               	btfsc	status,0,c
  6253  0024EE  2A0D               	incf	___awtofl@c+1,f,c
  6254  0024F0  2A10               	incf	___awtofl@sign,f,c
  6255  0024F2                     l3591:
  6256  0024F2  C00C  F002         	movff	___awtofl@c,___flpack@arg
  6257  0024F6  C00D  F003         	movff	___awtofl@c+1,___flpack@arg+1
  6258  0024FA  6A04               	clrf	___flpack@arg+2,c
  6259  0024FC  6A05               	clrf	___flpack@arg+3,c
  6260  0024FE  0E96               	movlw	150
  6261  002500  6E06               	movwf	___flpack@exp,c
  6262  002502  C010  F007         	movff	___awtofl@sign,___flpack@sign
  6263  002506  EC15  F00F         	call	___flpack	;wreg free
  6264  00250A  C002  F00C         	movff	?___flpack,?___awtofl
  6265  00250E  C003  F00D         	movff	?___flpack+1,?___awtofl+1
  6266  002512  C004  F00E         	movff	?___flpack+2,?___awtofl+2
  6267  002516  C005  F00F         	movff	?___flpack+3,?___awtofl+3
  6268  00251A  0012               	return		;funcret
  6269  00251C                     __end_of___awtofl:
  6270                           	opt stack 0
  6271                           tosu	equ	0xFFF
  6272                           tosh	equ	0xFFE
  6273                           tosl	equ	0xFFD
  6274                           pclath	equ	0xFFA
  6275                           tblptru	equ	0xFF8
  6276                           tblptrh	equ	0xFF7
  6277                           tblptrl	equ	0xFF6
  6278                           tablat	equ	0xFF5
  6279                           prodl	equ	0xFF3
  6280                           intcon	equ	0xFF2
  6281                           intcon2	equ	0xFF1
  6282                           postinc0	equ	0xFEE
  6283                           wreg	equ	0xFE8
  6284                           postdec1	equ	0xFE5
  6285                           fsr1l	equ	0xFE1
  6286                           indf2	equ	0xFDF
  6287                           postinc2	equ	0xFDE
  6288                           postdec2	equ	0xFDD
  6289                           fsr2h	equ	0xFDA
  6290                           fsr2l	equ	0xFD9
  6291                           status	equ	0xFD8
  6292                           
  6293 ;; *************** function _calibrate *****************
  6294 ;; Defined at:
  6295 ;;		line 24 in file "../../../src/measure.c"
  6296 ;; Parameters:    Size  Location     Type
  6297 ;;		None
  6298 ;; Auto vars:     Size  Location     Type
  6299 ;;  i               1   60[COMRAM] unsigned char 
  6300 ;; Return value:  Size  Location     Type
  6301 ;;		None               void
  6302 ;; Registers used:
  6303 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, cstack
  6304 ;; Tracked objects:
  6305 ;;		On entry : 0/0
  6306 ;;		On exit  : 0/0
  6307 ;;		Unchanged: 0/0
  6308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6309 ;;      Params:         0       0       0       0       0       0       0       0       0
  6310 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6311 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6312 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6313 ;;Total ram usage:        1 bytes
  6314 ;; Hardware stack levels used:    1
  6315 ;; Hardware stack levels required when called:    6
  6316 ;; This function calls:
  6317 ;;		___lwtofl
  6318 ;;		_delay10ms
  6319 ;;		_lcd_clear
  6320 ;;		_lcd_gotoxy
  6321 ;;		_lcd_send
  6322 ;;		_measure_freq
  6323 ;;		_put_str
  6324 ;;		_uart_puts
  6325 ;; This function is called by:
  6326 ;;		_main
  6327 ;; This function uses a non-reentrant model
  6328 ;;
  6329                           
  6330                           	psect	text32
  6331  001ADC                     __ptext32:
  6332                           	opt stack 0
  6333  001ADC                     _calibrate:
  6334                           	opt stack 24
  6335                           
  6336                           ;measure.c: 25: unsigned char i;
  6337                           ;measure.c: 28: lcd_clear();
  6338                           
  6339                           ;incstack = 0
  6340  001ADC  ECBF  F013         	call	_lcd_clear	;wreg free
  6341                           
  6342                           ;measure.c: 30: lcd_gotoxy(0, 0);
  6343  001AE0  0E00               	movlw	0
  6344  001AE2  6A06               	clrf	lcd_gotoxy@row,c
  6345  001AE4  ECAA  F012         	call	_lcd_gotoxy
  6346                           
  6347                           ;measure.c: 31: put_str("Calibrating");
  6348  001AE8  0E69               	movlw	STR_1& (0+255)
  6349  001AEA  ECDE  F012         	call	_put_str
  6350                           
  6351                           ;measure.c: 33: lcd_gotoxy(0, 1);
  6352  001AEE  0E01               	movlw	1
  6353  001AF0  6E06               	movwf	lcd_gotoxy@row,c
  6354  001AF2  0E00               	movlw	0
  6355  001AF4  ECAA  F012         	call	_lcd_gotoxy
  6356                           
  6357                           ;measure.c: 34: uart_puts("\r\n");
  6358  001AF8  0E93               	movlw	(STR_21+3)& (0+255)
  6359  001AFA  EC64  F013         	call	_uart_puts
  6360                           
  6361                           ;measure.c: 35: put_str("please wait...");
  6362  001AFE  0E4D               	movlw	STR_3& (0+255)
  6363  001B00  ECDE  F012         	call	_put_str
  6364                           
  6365                           ;measure.c: 38: LATC &= ~(1 << 5);
  6366  001B04  9A8B               	bcf	3979,5,c	;volatile
  6367                           
  6368                           ;measure.c: 40: F1 = (double)measure_freq();
  6369  001B06  EC01  F00C         	call	_measure_freq	;wreg free
  6370  001B0A  C034  F039         	movff	?_measure_freq,___lwtofl@c
  6371  001B0E  C035  F03A         	movff	?_measure_freq+1,___lwtofl@c+1
  6372  001B12  EC3B  F013         	call	___lwtofl	;wreg free
  6373  001B16  C039  F0CB         	movff	?___lwtofl,_F1
  6374  001B1A  C03A  F0CC         	movff	?___lwtofl+1,_F1+1
  6375  001B1E  C03B  F0CD         	movff	?___lwtofl+2,_F1+2
  6376  001B22  C03C  F0CE         	movff	?___lwtofl+3,_F1+3
  6377                           
  6378                           ;measure.c: 41: delay10ms(50);
  6379  001B26  0E32               	movlw	50
  6380  001B28  ECE8  F013         	call	_delay10ms
  6381                           
  6382                           ;measure.c: 43: F1 = (double)measure_freq();
  6383  001B2C  EC01  F00C         	call	_measure_freq	;wreg free
  6384  001B30  C034  F039         	movff	?_measure_freq,___lwtofl@c
  6385  001B34  C035  F03A         	movff	?_measure_freq+1,___lwtofl@c+1
  6386  001B38  EC3B  F013         	call	___lwtofl	;wreg free
  6387  001B3C  C039  F0CB         	movff	?___lwtofl,_F1
  6388  001B40  C03A  F0CC         	movff	?___lwtofl+1,_F1+1
  6389  001B44  C03B  F0CD         	movff	?___lwtofl+2,_F1+2
  6390  001B48  C03C  F0CE         	movff	?___lwtofl+3,_F1+3
  6391                           
  6392                           ;measure.c: 44: LATC |= (1 << 5);
  6393  001B4C  8A8B               	bsf	3979,5,c	;volatile
  6394                           
  6395                           ;measure.c: 46: F2 = (double)measure_freq();
  6396  001B4E  EC01  F00C         	call	_measure_freq	;wreg free
  6397  001B52  C034  F039         	movff	?_measure_freq,___lwtofl@c
  6398  001B56  C035  F03A         	movff	?_measure_freq+1,___lwtofl@c+1
  6399  001B5A  EC3B  F013         	call	___lwtofl	;wreg free
  6400  001B5E  C039  F09F         	movff	?___lwtofl,_F2
  6401  001B62  C03A  F0A0         	movff	?___lwtofl+1,_F2+1
  6402  001B66  C03B  F0A1         	movff	?___lwtofl+2,_F2+2
  6403  001B6A  C03C  F0A2         	movff	?___lwtofl+3,_F2+3
  6404                           
  6405                           ;measure.c: 47: delay10ms(50);
  6406  001B6E  0E32               	movlw	50
  6407  001B70  ECE8  F013         	call	_delay10ms
  6408                           
  6409                           ;measure.c: 49: F2 = (double)measure_freq();
  6410  001B74  EC01  F00C         	call	_measure_freq	;wreg free
  6411  001B78  C034  F039         	movff	?_measure_freq,___lwtofl@c
  6412  001B7C  C035  F03A         	movff	?_measure_freq+1,___lwtofl@c+1
  6413  001B80  EC3B  F013         	call	___lwtofl	;wreg free
  6414  001B84  C039  F09F         	movff	?___lwtofl,_F2
  6415  001B88  C03A  F0A0         	movff	?___lwtofl+1,_F2+1
  6416  001B8C  C03B  F0A1         	movff	?___lwtofl+2,_F2+2
  6417  001B90  C03C  F0A2         	movff	?___lwtofl+3,_F2+3
  6418                           
  6419                           ;measure.c: 50: LATC &= ~(1 << 5);
  6420  001B94  9A8B               	bcf	3979,5,c	;volatile
  6421                           
  6422                           ;measure.c: 54: lcd_gotoxy(11, 0);
  6423  001B96  6A06               	clrf	lcd_gotoxy@row,c
  6424  001B98  0E0B               	movlw	11
  6425  001B9A  ECAA  F012         	call	_lcd_gotoxy
  6426                           
  6427                           ;measure.c: 56: for(i = 0; i < 6; i++) {
  6428  001B9E  6A3D               	clrf	calibrate@i,c
  6429  001BA0                     l3767:
  6430                           
  6431                           ;measure.c: 57: lcd_send(('='), 1);
  6432  001BA0  0E01               	movlw	1
  6433  001BA2  6E03               	movwf	lcd_send@mode,c
  6434  001BA4  0E3D               	movlw	61
  6435  001BA6  ECA6  F013         	call	_lcd_send
  6436                           
  6437                           ;measure.c: 59: delay10ms(28);
  6438  001BAA  0E1C               	movlw	28
  6439  001BAC  ECE8  F013         	call	_delay10ms
  6440  001BB0  2A3D               	incf	calibrate@i,f,c
  6441  001BB2  0E05               	movlw	5
  6442  001BB4  643D               	cpfsgt	calibrate@i,c
  6443  001BB6  D7F4               	goto	l3767
  6444                           
  6445                           ;measure.c: 60: }
  6446                           ;measure.c: 62: uart_puts("\r\n");
  6447  001BB8  0E93               	movlw	(STR_21+3)& (0+255)
  6448  001BBA  EF64  F013         	goto	_uart_puts
  6449  001BBE                     __end_of_calibrate:
  6450                           	opt stack 0
  6451                           tosu	equ	0xFFF
  6452                           tosh	equ	0xFFE
  6453                           tosl	equ	0xFFD
  6454                           pclath	equ	0xFFA
  6455                           tblptru	equ	0xFF8
  6456                           tblptrh	equ	0xFF7
  6457                           tblptrl	equ	0xFF6
  6458                           tablat	equ	0xFF5
  6459                           prodl	equ	0xFF3
  6460                           intcon	equ	0xFF2
  6461                           intcon2	equ	0xFF1
  6462                           postinc0	equ	0xFEE
  6463                           wreg	equ	0xFE8
  6464                           postdec1	equ	0xFE5
  6465                           fsr1l	equ	0xFE1
  6466                           indf2	equ	0xFDF
  6467                           postinc2	equ	0xFDE
  6468                           postdec2	equ	0xFDD
  6469                           fsr2h	equ	0xFDA
  6470                           fsr2l	equ	0xFD9
  6471                           status	equ	0xFD8
  6472                           
  6473 ;; *************** function _uart_puts *****************
  6474 ;; Defined at:
  6475 ;;		line 115 in file "../../../lib/uart.c"
  6476 ;; Parameters:    Size  Location     Type
  6477 ;;  s               1    wreg     PTR const unsigned char 
  6478 ;;		 -> STR_21(6), STR_16(3), STR_4(3), STR_2(3), 
  6479 ;; Auto vars:     Size  Location     Type
  6480 ;;  s               1    2[COMRAM] PTR const unsigned char 
  6481 ;;		 -> STR_21(6), STR_16(3), STR_4(3), STR_2(3), 
  6482 ;; Return value:  Size  Location     Type
  6483 ;;		None               void
  6484 ;; Registers used:
  6485 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6486 ;; Tracked objects:
  6487 ;;		On entry : 0/0
  6488 ;;		On exit  : 0/0
  6489 ;;		Unchanged: 0/0
  6490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6491 ;;      Params:         0       0       0       0       0       0       0       0       0
  6492 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6493 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6494 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6495 ;;Total ram usage:        1 bytes
  6496 ;; Hardware stack levels used:    1
  6497 ;; Hardware stack levels required when called:    2
  6498 ;; This function calls:
  6499 ;;		_uart_putch
  6500 ;; This function is called by:
  6501 ;;		_calibrate
  6502 ;;		_print_unit
  6503 ;;		_main
  6504 ;; This function uses a non-reentrant model
  6505 ;;
  6506                           
  6507                           	psect	text33
  6508  0026C8                     __ptext33:
  6509                           	opt stack 0
  6510  0026C8                     _uart_puts:
  6511                           	opt stack 28
  6512                           
  6513                           ;incstack = 0
  6514                           ;uart_puts@s stored from wreg
  6515  0026C8  6E03               	movwf	uart_puts@s,c
  6516                           
  6517                           ;uart.c: 116: while(*s) uart_putch(*s++);
  6518  0026CA  D006               	goto	l2779
  6519  0026CC                     l2775:
  6520  0026CC  C003  FFF6         	movff	uart_puts@s,tblptrl
  6521  0026D0  D809               	call	PL10	;call to abstracted procedure
  6522  0026D2  ECD2  F013         	call	_uart_putch
  6523  0026D6  2A03               	incf	uart_puts@s,f,c
  6524  0026D8                     l2779:
  6525  0026D8  C003  FFF6         	movff	uart_puts@s,tblptrl
  6526  0026DC  D803               	call	PL10	;call to abstracted procedure
  6527  0026DE  B4D8               	btfsc	status,2,c
  6528  0026E0  0012               	return		;funcret
  6529  0026E2  D7F4               	goto	l2775
  6530  0026E4                     __end_of_uart_puts:
  6531                           	opt stack 0
  6532  0026E4                     PL10:
  6533                           	opt stack 25
  6534  0026E4                     	if	1	;There is more than 1 active tblptr byte
  6535  0026E4  0E08               	movlw	high __smallconst
  6536  0026E6  6EF7               	movwf	tblptrh,c
  6537  0026E8                     	endif
  6538  0026E8                     	if	0	;tblptru may be non-zero
  6539  0026E8                     	endif
  6540  0026E8                     	if	0	;tblptru may be non-zero
  6541  0026E8                     	endif
  6542  0026E8  0008               	tblrd		*
  6543  0026EA  50F5               	movf	tablat,w,c
  6544  0026EC  0012               	return	
  6545  0026EE                     __end_ofPL10:
  6546                           	opt stack 0
  6547                           tosu	equ	0xFFF
  6548                           tosh	equ	0xFFE
  6549                           tosl	equ	0xFFD
  6550                           pclath	equ	0xFFA
  6551                           tblptru	equ	0xFF8
  6552                           tblptrh	equ	0xFF7
  6553                           tblptrl	equ	0xFF6
  6554                           tablat	equ	0xFF5
  6555                           prodl	equ	0xFF3
  6556                           intcon	equ	0xFF2
  6557                           intcon2	equ	0xFF1
  6558                           postinc0	equ	0xFEE
  6559                           wreg	equ	0xFE8
  6560                           postdec1	equ	0xFE5
  6561                           fsr1l	equ	0xFE1
  6562                           indf2	equ	0xFDF
  6563                           postinc2	equ	0xFDE
  6564                           postdec2	equ	0xFDD
  6565                           fsr2h	equ	0xFDA
  6566                           fsr2l	equ	0xFD9
  6567                           status	equ	0xFD8
  6568                           
  6569 ;; *************** function _uart_putch *****************
  6570 ;; Defined at:
  6571 ;;		line 22 in file "../../../lib/uart.c"
  6572 ;; Parameters:    Size  Location     Type
  6573 ;;  byte            1    wreg     unsigned char 
  6574 ;; Auto vars:     Size  Location     Type
  6575 ;;  byte            1    1[COMRAM] unsigned char 
  6576 ;; Return value:  Size  Location     Type
  6577 ;;		None               void
  6578 ;; Registers used:
  6579 ;;		wreg
  6580 ;; Tracked objects:
  6581 ;;		On entry : 0/0
  6582 ;;		On exit  : 0/0
  6583 ;;		Unchanged: 0/0
  6584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6585 ;;      Params:         0       0       0       0       0       0       0       0       0
  6586 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6587 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6588 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6589 ;;Total ram usage:        1 bytes
  6590 ;; Hardware stack levels used:    1
  6591 ;; Hardware stack levels required when called:    1
  6592 ;; This function calls:
  6593 ;;		Nothing
  6594 ;; This function is called by:
  6595 ;;		_uart_puts
  6596 ;; This function uses a non-reentrant model
  6597 ;;
  6598                           
  6599                           	psect	text34
  6600  0027A4                     __ptext34:
  6601                           	opt stack 0
  6602  0027A4                     _uart_putch:
  6603                           	opt stack 28
  6604                           
  6605                           ;incstack = 0
  6606                           ;uart_putch@byte stored from wreg
  6607  0027A4  6E02               	movwf	uart_putch@byte,c
  6608  0027A6                     l247:
  6609  0027A6  A89E               	btfss	3998,4,c	;volatile
  6610  0027A8  D7FE               	goto	l247
  6611                           
  6612                           ;uart.c: 27: }
  6613                           ;uart.c: 28: TXREG = (unsigned char)byte;
  6614  0027AA  C002  FFAD         	movff	uart_putch@byte,4013	;volatile
  6615  0027AE  0012               	return		;funcret
  6616  0027B0                     __end_of_uart_putch:
  6617                           	opt stack 0
  6618                           tosu	equ	0xFFF
  6619                           tosh	equ	0xFFE
  6620                           tosl	equ	0xFFD
  6621                           pclath	equ	0xFFA
  6622                           tblptru	equ	0xFF8
  6623                           tblptrh	equ	0xFF7
  6624                           tblptrl	equ	0xFF6
  6625                           tablat	equ	0xFF5
  6626                           prodl	equ	0xFF3
  6627                           intcon	equ	0xFF2
  6628                           intcon2	equ	0xFF1
  6629                           postinc0	equ	0xFEE
  6630                           wreg	equ	0xFE8
  6631                           postdec1	equ	0xFE5
  6632                           fsr1l	equ	0xFE1
  6633                           indf2	equ	0xFDF
  6634                           postinc2	equ	0xFDE
  6635                           postdec2	equ	0xFDD
  6636                           fsr2h	equ	0xFDA
  6637                           fsr2l	equ	0xFD9
  6638                           status	equ	0xFD8
  6639                           
  6640 ;; *************** function _measure_freq *****************
  6641 ;; Defined at:
  6642 ;;		line 69 in file "../../../src/measure.c"
  6643 ;; Parameters:    Size  Location     Type
  6644 ;;		None
  6645 ;; Auto vars:     Size  Location     Type
  6646 ;;  count           2   54[COMRAM] unsigned short 
  6647 ;; Return value:  Size  Location     Type
  6648 ;;                  2   51[COMRAM] unsigned short 
  6649 ;; Registers used:
  6650 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, cstack
  6651 ;; Tracked objects:
  6652 ;;		On entry : 0/0
  6653 ;;		On exit  : 0/0
  6654 ;;		Unchanged: 0/0
  6655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6656 ;;      Params:         2       0       0       0       0       0       0       0       0
  6657 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6658 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6659 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6660 ;;Total ram usage:        5 bytes
  6661 ;; Hardware stack levels used:    1
  6662 ;; Hardware stack levels required when called:    5
  6663 ;; This function calls:
  6664 ;;		_format_number
  6665 ;;		_lcd_gotoxy
  6666 ;;		_put_str
  6667 ;;		_timer0_read_ps
  6668 ;; This function is called by:
  6669 ;;		_calibrate
  6670 ;;		_measure_capacitance
  6671 ;;		_measure_inductance
  6672 ;; This function uses a non-reentrant model
  6673 ;;
  6674                           
  6675                           	psect	text35
  6676  001802                     __ptext35:
  6677                           	opt stack 0
  6678  001802                     _measure_freq:
  6679                           	opt stack 24
  6680                           
  6681                           ;measure.c: 70: unsigned short int count;
  6682                           ;measure.c: 72: INTCON &= ~0b100;
  6683                           
  6684                           ;incstack = 0
  6685  001802  94F2               	bcf	intcon,2,c	;volatile
  6686                           
  6687                           ;measure.c: 76: TRISA &= ~0b00010000;
  6688  001804  9892               	bcf	3986,4,c	;volatile
  6689                           
  6690                           ;measure.c: 78: _delay((unsigned long)((20)*(20000000/4000.0)));
  6691  001806  0E82               	movlw	130
  6692  001808  6E36               	movwf	??_measure_freq& (0+255),c
  6693  00180A  0EDE               	movlw	222
  6694  00180C                     u3377:
  6695  00180C  2EE8               	decfsz	wreg,f,c
  6696  00180E  D7FE               	goto	u3377
  6697  001810  2E36               	decfsz	??_measure_freq& (0+255),f,c
  6698  001812  D7FC               	goto	u3377
  6699                           
  6700                           ;measure.c: 81: TMR0 = 0x00;
  6701  001814  6AD6               	clrf	4054,c	;volatile
  6702  001816  6AD7               	clrf	4055,c	;volatile
  6703                           
  6704                           ;measure.c: 83: LATC &= ~0b00000010; LATC |= (!!(1)) << 1;;
  6705  001818  928B               	bcf	3979,1,c	;volatile
  6706  00181A  828B               	bsf	3979,1,c	;volatile
  6707                           
  6708                           ;measure.c: 86: _delay((unsigned long)((10)*(20000000/4000.0)));
  6709  00181C  0E41               	movlw	65
  6710  00181E  6E36               	movwf	??_measure_freq& (0+255),c
  6711  001820  0EEE               	movlw	238
  6712  001822                     u3387:
  6713  001822  2EE8               	decfsz	wreg,f,c
  6714  001824  D7FE               	goto	u3387
  6715  001826  2E36               	decfsz	??_measure_freq& (0+255),f,c
  6716  001828  D7FC               	goto	u3387
  6717  00182A  D000               	nop2	
  6718                           
  6719                           ;measure.c: 87: _delay((unsigned long)((10)*(20000000/4000.0)));
  6720  00182C  0E41               	movlw	65
  6721  00182E  6E36               	movwf	??_measure_freq& (0+255),c
  6722  001830  0EEE               	movlw	238
  6723  001832                     u3397:
  6724  001832  2EE8               	decfsz	wreg,f,c
  6725  001834  D7FE               	goto	u3397
  6726  001836  2E36               	decfsz	??_measure_freq& (0+255),f,c
  6727  001838  D7FC               	goto	u3397
  6728  00183A  D000               	nop2	
  6729                           
  6730                           ;measure.c: 88: _delay((unsigned long)((10)*(20000000/4000.0)));
  6731  00183C  0E41               	movlw	65
  6732  00183E  6E36               	movwf	??_measure_freq& (0+255),c
  6733  001840  0EEE               	movlw	238
  6734  001842                     u3407:
  6735  001842  2EE8               	decfsz	wreg,f,c
  6736  001844  D7FE               	goto	u3407
  6737  001846  2E36               	decfsz	??_measure_freq& (0+255),f,c
  6738  001848  D7FC               	goto	u3407
  6739  00184A  D000               	nop2	
  6740                           
  6741                           ;measure.c: 89: _delay((unsigned long)((10)*(20000000/4000.0)));
  6742  00184C  0E41               	movlw	65
  6743  00184E  6E36               	movwf	??_measure_freq& (0+255),c
  6744  001850  0EEE               	movlw	238
  6745  001852                     u3417:
  6746  001852  2EE8               	decfsz	wreg,f,c
  6747  001854  D7FE               	goto	u3417
  6748  001856  2E36               	decfsz	??_measure_freq& (0+255),f,c
  6749  001858  D7FC               	goto	u3417
  6750  00185A  D000               	nop2	
  6751                           
  6752                           ;measure.c: 90: _delay((unsigned long)((10)*(20000000/4000.0)));
  6753  00185C  0E41               	movlw	65
  6754  00185E  6E36               	movwf	??_measure_freq& (0+255),c
  6755  001860  0EEE               	movlw	238
  6756  001862                     u3427:
  6757  001862  2EE8               	decfsz	wreg,f,c
  6758  001864  D7FE               	goto	u3427
  6759  001866  2E36               	decfsz	??_measure_freq& (0+255),f,c
  6760  001868  D7FC               	goto	u3427
  6761  00186A  D000               	nop2	
  6762                           
  6763                           ;measure.c: 91: _delay((unsigned long)((10)*(20000000/4000.0)));
  6764  00186C  0E41               	movlw	65
  6765  00186E  6E36               	movwf	??_measure_freq& (0+255),c
  6766  001870  0EEE               	movlw	238
  6767  001872                     u3437:
  6768  001872  2EE8               	decfsz	wreg,f,c
  6769  001874  D7FE               	goto	u3437
  6770  001876  2E36               	decfsz	??_measure_freq& (0+255),f,c
  6771  001878  D7FC               	goto	u3437
  6772  00187A  D000               	nop2	
  6773                           
  6774                           ;measure.c: 92: _delay((unsigned long)((10)*(20000000/4000.0)));
  6775  00187C  0E41               	movlw	65
  6776  00187E  6E36               	movwf	??_measure_freq& (0+255),c
  6777  001880  0EEE               	movlw	238
  6778  001882                     u3447:
  6779  001882  2EE8               	decfsz	wreg,f,c
  6780  001884  D7FE               	goto	u3447
  6781  001886  2E36               	decfsz	??_measure_freq& (0+255),f,c
  6782  001888  D7FC               	goto	u3447
  6783  00188A  D000               	nop2	
  6784                           
  6785                           ;measure.c: 93: _delay((unsigned long)((10)*(20000000/4000.0)));
  6786  00188C  0E41               	movlw	65
  6787  00188E  6E36               	movwf	??_measure_freq& (0+255),c
  6788  001890  0EEE               	movlw	238
  6789  001892                     u3457:
  6790  001892  2EE8               	decfsz	wreg,f,c
  6791  001894  D7FE               	goto	u3457
  6792  001896  2E36               	decfsz	??_measure_freq& (0+255),f,c
  6793  001898  D7FC               	goto	u3457
  6794  00189A  D000               	nop2	
  6795                           
  6796                           ;measure.c: 94: _delay((unsigned long)((10)*(20000000/4000.0)));
  6797  00189C  0E41               	movlw	65
  6798  00189E  6E36               	movwf	??_measure_freq& (0+255),c
  6799  0018A0  0EEE               	movlw	238
  6800  0018A2                     u3467:
  6801  0018A2  2EE8               	decfsz	wreg,f,c
  6802  0018A4  D7FE               	goto	u3467
  6803  0018A6  2E36               	decfsz	??_measure_freq& (0+255),f,c
  6804  0018A8  D7FC               	goto	u3467
  6805  0018AA  D000               	nop2	
  6806                           
  6807                           ;measure.c: 95: _delay((unsigned long)((10)*(20000000/4000.0)));
  6808  0018AC  0E41               	movlw	65
  6809  0018AE  6E36               	movwf	??_measure_freq& (0+255),c
  6810  0018B0  0EEE               	movlw	238
  6811  0018B2                     u3477:
  6812  0018B2  2EE8               	decfsz	wreg,f,c
  6813  0018B4  D7FE               	goto	u3477
  6814  0018B6  2E36               	decfsz	??_measure_freq& (0+255),f,c
  6815  0018B8  D7FC               	goto	u3477
  6816  0018BA  D000               	nop2	
  6817                           
  6818                           ;measure.c: 97: LATC &= ~0b00000010; LATC |= (!!(0)) << 1;;
  6819  0018BC  928B               	bcf	3979,1,c	;volatile
  6820  0018BE  508B               	movf	3979,w,c	;volatile
  6821                           
  6822                           ;measure.c: 100: TRISA |= 0b00010000;
  6823  0018C0  8892               	bsf	3986,4,c	;volatile
  6824                           
  6825                           ;measure.c: 103: count = timer0_read_ps();
  6826  0018C2  ECE6  F011         	call	_timer0_read_ps	;wreg free
  6827  0018C6  C002  F037         	movff	?_timer0_read_ps,measure_freq@count
  6828  0018CA  C003  F038         	movff	?_timer0_read_ps+1,measure_freq@count+1
  6829                           
  6830                           ;measure.c: 106: lcd_gotoxy(0, 1);
  6831  0018CE  0E01               	movlw	1
  6832  0018D0  6E06               	movwf	lcd_gotoxy@row,c
  6833  0018D2  0E00               	movlw	0
  6834  0018D4  ECAA  F012         	call	_lcd_gotoxy
  6835                           
  6836                           ;measure.c: 107: put_str("Freq=");
  6837  0018D8  0E96               	movlw	STR_5& (0+255)
  6838  0018DA  ECDE  F012         	call	_put_str
  6839                           
  6840                           ;measure.c: 108: format_number( count, 10, 5);
  6841  0018DE  C037  F009         	movff	measure_freq@count,format_number@n
  6842  0018E2  C038  F00A         	movff	measure_freq@count+1,format_number@n+1
  6843  0018E6  0E0A               	movlw	10
  6844  0018E8  6E0B               	movwf	format_number@base,c
  6845  0018EA  0E05               	movlw	5
  6846  0018EC  6E0C               	movwf	format_number@pad,c
  6847  0018EE  EC49  F00E         	call	_format_number	;wreg free
  6848                           
  6849                           ;measure.c: 111: return count;
  6850  0018F2  C037  F034         	movff	measure_freq@count,?_measure_freq
  6851  0018F6  C038  F035         	movff	measure_freq@count+1,?_measure_freq+1
  6852  0018FA  0012               	return		;funcret
  6853  0018FC                     __end_of_measure_freq:
  6854                           	opt stack 0
  6855                           tosu	equ	0xFFF
  6856                           tosh	equ	0xFFE
  6857                           tosl	equ	0xFFD
  6858                           pclath	equ	0xFFA
  6859                           tblptru	equ	0xFF8
  6860                           tblptrh	equ	0xFF7
  6861                           tblptrl	equ	0xFF6
  6862                           tablat	equ	0xFF5
  6863                           prodl	equ	0xFF3
  6864                           intcon	equ	0xFF2
  6865                           intcon2	equ	0xFF1
  6866                           postinc0	equ	0xFEE
  6867                           wreg	equ	0xFE8
  6868                           postdec1	equ	0xFE5
  6869                           fsr1l	equ	0xFE1
  6870                           indf2	equ	0xFDF
  6871                           postinc2	equ	0xFDE
  6872                           postdec2	equ	0xFDD
  6873                           fsr2h	equ	0xFDA
  6874                           fsr2l	equ	0xFD9
  6875                           status	equ	0xFD8
  6876                           
  6877 ;; *************** function _timer0_read_ps *****************
  6878 ;; Defined at:
  6879 ;;		line 59 in file "../../../lib/timer.c"
  6880 ;; Parameters:    Size  Location     Type
  6881 ;;		None
  6882 ;; Auto vars:     Size  Location     Type
  6883 ;;  count           2    6[COMRAM] unsigned short 
  6884 ;;  prev            1    5[COMRAM] unsigned char 
  6885 ;; Return value:  Size  Location     Type
  6886 ;;                  2    1[COMRAM] unsigned short 
  6887 ;; Registers used:
  6888 ;;		wreg, status,2, status,0
  6889 ;; Tracked objects:
  6890 ;;		On entry : 0/0
  6891 ;;		On exit  : 0/0
  6892 ;;		Unchanged: 0/0
  6893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6894 ;;      Params:         2       0       0       0       0       0       0       0       0
  6895 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6896 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6897 ;;      Totals:         7       0       0       0       0       0       0       0       0
  6898 ;;Total ram usage:        7 bytes
  6899 ;; Hardware stack levels used:    1
  6900 ;; Hardware stack levels required when called:    1
  6901 ;; This function calls:
  6902 ;;		Nothing
  6903 ;; This function is called by:
  6904 ;;		_measure_freq
  6905 ;; This function uses a non-reentrant model
  6906 ;;
  6907                           
  6908                           	psect	text36
  6909  0023CC                     __ptext36:
  6910                           	opt stack 0
  6911  0023CC                     _timer0_read_ps:
  6912                           	opt stack 27
  6913                           
  6914                           ;timer.c: 60: unsigned char prev = TMR0;
  6915                           
  6916                           ;incstack = 0
  6917  0023CC  CFD6 F006          	movff	4054,timer0_read_ps@prev	;volatile
  6918                           
  6919                           ;timer.c: 61: unsigned short int count = 0;
  6920  0023D0  6A07               	clrf	timer0_read_ps@count,c
  6921  0023D2  6A08               	clrf	timer0_read_ps@count+1,c
  6922                           
  6923                           ;timer.c: 63: T0CON |= 0x20;
  6924  0023D4  8AD5               	bsf	4053,5,c	;volatile
  6925  0023D6                     l209:
  6926                           
  6927                           ;timer.c: 67: T0CON |= 0x10;
  6928  0023D6  88D5               	bsf	4053,4,c	;volatile
  6929                           
  6930                           ;timer.c: 69: __nop();
  6931  0023D8  F000               	nop	
  6932                           
  6933                           ;timer.c: 70: __nop();
  6934  0023DA  F000               	nop	
  6935                           
  6936                           ;timer.c: 72: T0CON &= ~0x10;
  6937  0023DC  98D5               	bcf	4053,4,c	;volatile
  6938                           
  6939                           ;timer.c: 74: __nop();
  6940  0023DE  F000               	nop	
  6941                           
  6942                           ;timer.c: 75: __nop();
  6943  0023E0  F000               	nop	
  6944                           
  6945                           ;timer.c: 77: ++count;
  6946  0023E2  4A07               	infsnz	timer0_read_ps@count,f,c
  6947  0023E4  2A08               	incf	timer0_read_ps@count+1,f,c
  6948                           
  6949                           ;timer.c: 80: } while(prev == TMR0 && count <= 255);
  6950  0023E6  5006               	movf	timer0_read_ps@prev,w,c
  6951  0023E8  18D6               	xorwf	4054,w,c	;volatile
  6952  0023EA  10D7               	iorwf	4055,w,c	;volatile
  6953  0023EC  E102               	bnz	l2767
  6954  0023EE  0408               	decf	timer0_read_ps@count+1,w,c
  6955  0023F0  E3F2               	bnc	l209
  6956  0023F2                     l2767:
  6957                           
  6958                           ;timer.c: 82: count = ((prev << 8) + (256 - count));
  6959  0023F2  5006               	movf	timer0_read_ps@prev,w,c
  6960  0023F4  6E05               	movwf	(??_timer0_read_ps+1)& (0+255),c
  6961  0023F6  6A04               	clrf	??_timer0_read_ps& (0+255),c
  6962  0023F8  5007               	movf	timer0_read_ps@count,w,c
  6963  0023FA  5E04               	subwf	??_timer0_read_ps,f,c
  6964  0023FC  5008               	movf	timer0_read_ps@count+1,w,c
  6965  0023FE  5A05               	subwfb	??_timer0_read_ps+1,f,c
  6966  002400  0E00               	movlw	0
  6967  002402  2404               	addwf	??_timer0_read_ps,w,c
  6968  002404  6E07               	movwf	timer0_read_ps@count,c
  6969  002406  0E01               	movlw	1
  6970  002408  2005               	addwfc	??_timer0_read_ps+1,w,c
  6971  00240A  6E08               	movwf	timer0_read_ps@count+1,c
  6972                           
  6973                           ;timer.c: 83: return count;
  6974  00240C  C007  F002         	movff	timer0_read_ps@count,?_timer0_read_ps
  6975  002410  C008  F003         	movff	timer0_read_ps@count+1,?_timer0_read_ps+1
  6976  002414  0012               	return		;funcret
  6977  002416                     __end_of_timer0_read_ps:
  6978                           	opt stack 0
  6979                           tosu	equ	0xFFF
  6980                           tosh	equ	0xFFE
  6981                           tosl	equ	0xFFD
  6982                           pclath	equ	0xFFA
  6983                           tblptru	equ	0xFF8
  6984                           tblptrh	equ	0xFF7
  6985                           tblptrl	equ	0xFF6
  6986                           tablat	equ	0xFF5
  6987                           prodl	equ	0xFF3
  6988                           intcon	equ	0xFF2
  6989                           intcon2	equ	0xFF1
  6990                           postinc0	equ	0xFEE
  6991                           wreg	equ	0xFE8
  6992                           postdec1	equ	0xFE5
  6993                           fsr1l	equ	0xFE1
  6994                           indf2	equ	0xFDF
  6995                           postinc2	equ	0xFDE
  6996                           postdec2	equ	0xFDD
  6997                           fsr2h	equ	0xFDA
  6998                           fsr2l	equ	0xFD9
  6999                           status	equ	0xFD8
  7000                           
  7001 ;; *************** function _put_str *****************
  7002 ;; Defined at:
  7003 ;;		line 510 in file "../../../src/print.c"
  7004 ;; Parameters:    Size  Location     Type
  7005 ;;  s               1    wreg     PTR const unsigned char 
  7006 ;;		 -> STR_7(13), STR_6(10), STR_5(6), STR_3(15), 
  7007 ;;		 -> STR_1(12), 
  7008 ;; Auto vars:     Size  Location     Type
  7009 ;;  s               1    8[COMRAM] PTR const unsigned char 
  7010 ;;		 -> STR_7(13), STR_6(10), STR_5(6), STR_3(15), 
  7011 ;;		 -> STR_1(12), 
  7012 ;;  i               2    6[COMRAM] int 
  7013 ;; Return value:  Size  Location     Type
  7014 ;;		None               void
  7015 ;; Registers used:
  7016 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7017 ;; Tracked objects:
  7018 ;;		On entry : 0/0
  7019 ;;		On exit  : 0/0
  7020 ;;		Unchanged: 0/0
  7021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7022 ;;      Params:         0       0       0       0       0       0       0       0       0
  7023 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7024 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7025 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7026 ;;Total ram usage:        4 bytes
  7027 ;; Hardware stack levels used:    1
  7028 ;; Hardware stack levels required when called:    4
  7029 ;; This function calls:
  7030 ;;		_output_putch
  7031 ;; This function is called by:
  7032 ;;		_calibrate
  7033 ;;		_measure_freq
  7034 ;;		_measure_capacitance
  7035 ;;		_measure_inductance
  7036 ;; This function uses a non-reentrant model
  7037 ;;
  7038                           
  7039                           	psect	text37
  7040  0025BC                     __ptext37:
  7041                           	opt stack 0
  7042  0025BC                     _put_str:
  7043                           	opt stack 25
  7044                           
  7045                           ;incstack = 0
  7046                           ;put_str@s stored from wreg
  7047  0025BC  6E09               	movwf	put_str@s,c
  7048                           
  7049                           ;print.c: 511: int i;
  7050                           ;print.c: 513: for(i = 0; s[i]; i++) {
  7051  0025BE  6A07               	clrf	put_str@i,c
  7052  0025C0  6A08               	clrf	put_str@i+1,c
  7053  0025C2  D00B               	goto	l2787
  7054  0025C4                     l2783:
  7055                           
  7056                           ;print.c: 514: output_putch(s[i]);
  7057  0025C4  5009               	movf	put_str@s,w,c
  7058  0025C6  2407               	addwf	put_str@i,w,c
  7059  0025C8  6E06               	movwf	??_put_str& (0+255),c
  7060  0025CA  C006  FFF6         	movff	??_put_str,tblptrl
  7061  0025CE  EC72  F013         	call	PL10	;call to abstracted procedure
  7062  0025D2  ECD8  F013         	call	_output_putch
  7063  0025D6  4A07               	infsnz	put_str@i,f,c
  7064  0025D8  2A08               	incf	put_str@i+1,f,c
  7065  0025DA                     l2787:
  7066  0025DA  5009               	movf	put_str@s,w,c
  7067  0025DC  2407               	addwf	put_str@i,w,c
  7068  0025DE  6E06               	movwf	??_put_str& (0+255),c
  7069  0025E0  C006  FFF6         	movff	??_put_str,tblptrl
  7070  0025E4  EC72  F013         	call	PL10	;call to abstracted procedure
  7071  0025E8  B4D8               	btfsc	status,2,c
  7072  0025EA  0012               	return		;funcret
  7073  0025EC  D7EB               	goto	l2783
  7074  0025EE                     __end_of_put_str:
  7075                           	opt stack 0
  7076                           tosu	equ	0xFFF
  7077                           tosh	equ	0xFFE
  7078                           tosl	equ	0xFFD
  7079                           pclath	equ	0xFFA
  7080                           tblptru	equ	0xFF8
  7081                           tblptrh	equ	0xFF7
  7082                           tblptrl	equ	0xFF6
  7083                           tablat	equ	0xFF5
  7084                           prodl	equ	0xFF3
  7085                           intcon	equ	0xFF2
  7086                           intcon2	equ	0xFF1
  7087                           postinc0	equ	0xFEE
  7088                           wreg	equ	0xFE8
  7089                           postdec1	equ	0xFE5
  7090                           fsr1l	equ	0xFE1
  7091                           indf2	equ	0xFDF
  7092                           postinc2	equ	0xFDE
  7093                           postdec2	equ	0xFDD
  7094                           fsr2h	equ	0xFDA
  7095                           fsr2l	equ	0xFD9
  7096                           status	equ	0xFD8
  7097                           
  7098 ;; *************** function _lcd_gotoxy *****************
  7099 ;; Defined at:
  7100 ;;		line 157 in file "../../../lib/lcd44780.c"
  7101 ;; Parameters:    Size  Location     Type
  7102 ;;  col             1    wreg     unsigned char 
  7103 ;;  row             1    5[COMRAM] unsigned char 
  7104 ;; Auto vars:     Size  Location     Type
  7105 ;;  col             1    6[COMRAM] unsigned char 
  7106 ;;  row_offsets     4    7[COMRAM] unsigned char [4]
  7107 ;; Return value:  Size  Location     Type
  7108 ;;		None               void
  7109 ;; Registers used:
  7110 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7111 ;; Tracked objects:
  7112 ;;		On entry : 0/0
  7113 ;;		On exit  : 0/0
  7114 ;;		Unchanged: 0/0
  7115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7116 ;;      Params:         1       0       0       0       0       0       0       0       0
  7117 ;;      Locals:         5       0       0       0       0       0       0       0       0
  7118 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7119 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7120 ;;Total ram usage:        6 bytes
  7121 ;; Hardware stack levels used:    1
  7122 ;; Hardware stack levels required when called:    4
  7123 ;; This function calls:
  7124 ;;		_lcd_command
  7125 ;; This function is called by:
  7126 ;;		_calibrate
  7127 ;;		_measure_freq
  7128 ;;		_measure_capacitance
  7129 ;;		_measure_inductance
  7130 ;;		_print_unit
  7131 ;;		_print_reading
  7132 ;;		_indicator
  7133 ;;		_main
  7134 ;; This function uses a non-reentrant model
  7135 ;;
  7136                           
  7137                           	psect	text38
  7138  002554                     __ptext38:
  7139                           	opt stack 0
  7140  002554                     _lcd_gotoxy:
  7141                           	opt stack 24
  7142                           
  7143                           ;incstack = 0
  7144                           ;lcd_gotoxy@col stored from wreg
  7145  002554  6E07               	movwf	lcd_gotoxy@col,c
  7146                           
  7147                           ;lcd44780.c: 159: unsigned char row_offsets[] = {0x00, 0x40, 0x14, 0x54};
  7148  002556  C0D7  F008         	movff	lcd_gotoxy@F6446,lcd_gotoxy@row_offsets
  7149  00255A  C0D8  F009         	movff	lcd_gotoxy@F6446+1,lcd_gotoxy@row_offsets+1
  7150  00255E  C0D9  F00A         	movff	lcd_gotoxy@F6446+2,lcd_gotoxy@row_offsets+2
  7151  002562  C0DA  F00B         	movff	lcd_gotoxy@F6446+3,lcd_gotoxy@row_offsets+3
  7152                           
  7153                           ;lcd44780.c: 168: if(LCD_lines == 1) {
  7154  002566  0100               	movlb	0	; () banked
  7155  002568  05B6               	decf	_LCD_lines& (0+255),w,b
  7156  00256A  E106               	bnz	l2741
  7157                           
  7158                           ; BSR set to: 0
  7159                           ;lcd44780.c: 169: row_offsets[1] = 0x14;
  7160  00256C  0E14               	movlw	20
  7161  00256E  6E09               	movwf	lcd_gotoxy@row_offsets+1,c
  7162                           
  7163                           ;lcd44780.c: 170: row_offsets[2] = 0x28;
  7164  002570  0E28               	movlw	40
  7165  002572  6E0A               	movwf	lcd_gotoxy@row_offsets+2,c
  7166                           
  7167                           ;lcd44780.c: 171: row_offsets[3] = 0x3C;
  7168  002574  0E3C               	movlw	60
  7169  002576  6E0B               	movwf	lcd_gotoxy@row_offsets+3,c
  7170  002578                     l2741:
  7171                           
  7172                           ; BSR set to: 0
  7173                           ;lcd44780.c: 172: }
  7174                           ;lcd44780.c: 178: lcd_command(0x80 | (col + row_offsets[row]));
  7175  002578  5006               	movf	lcd_gotoxy@row,w,c
  7176  00257A  0F08               	addlw	low lcd_gotoxy@row_offsets
  7177  00257C  6ED9               	movwf	fsr2l,c
  7178  00257E  6ADA               	clrf	fsr2h,c
  7179  002580  50DF               	movf	indf2,w,c
  7180  002582  2407               	addwf	lcd_gotoxy@col,w,c
  7181  002584  0980               	iorlw	128
  7182  002586  EFDE  F013         	goto	_lcd_command
  7183  00258A                     __end_of_lcd_gotoxy:
  7184                           	opt stack 0
  7185                           tosu	equ	0xFFF
  7186                           tosh	equ	0xFFE
  7187                           tosl	equ	0xFFD
  7188                           pclath	equ	0xFFA
  7189                           tblptru	equ	0xFF8
  7190                           tblptrh	equ	0xFF7
  7191                           tblptrl	equ	0xFF6
  7192                           tablat	equ	0xFF5
  7193                           prodl	equ	0xFF3
  7194                           intcon	equ	0xFF2
  7195                           intcon2	equ	0xFF1
  7196                           postinc0	equ	0xFEE
  7197                           wreg	equ	0xFE8
  7198                           postdec1	equ	0xFE5
  7199                           fsr1l	equ	0xFE1
  7200                           indf2	equ	0xFDF
  7201                           postinc2	equ	0xFDE
  7202                           postdec2	equ	0xFDD
  7203                           fsr2h	equ	0xFDA
  7204                           fsr2l	equ	0xFD9
  7205                           status	equ	0xFD8
  7206                           
  7207 ;; *************** function _format_number *****************
  7208 ;; Defined at:
  7209 ;;		line 14 in file "../../../lib/format.c"
  7210 ;; Parameters:    Size  Location     Type
  7211 ;;  n               2    8[COMRAM] unsigned short 
  7212 ;;  base            1   10[COMRAM] unsigned char 
  7213 ;;  pad             1   11[COMRAM] char 
  7214 ;; Auto vars:     Size  Location     Type
  7215 ;;  buf            32   14[COMRAM] unsigned char [32]
  7216 ;;  i               1   50[COMRAM] char 
  7217 ;;  di              1   49[COMRAM] unsigned char 
  7218 ;;  padchar         1   48[COMRAM] unsigned char 
  7219 ;; Return value:  Size  Location     Type
  7220 ;;		None               void
  7221 ;; Registers used:
  7222 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
  7223 ;; Tracked objects:
  7224 ;;		On entry : 0/0
  7225 ;;		On exit  : 0/0
  7226 ;;		Unchanged: 0/0
  7227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7228 ;;      Params:         4       0       0       0       0       0       0       0       0
  7229 ;;      Locals:        37       0       0       0       0       0       0       0       0
  7230 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7231 ;;      Totals:        43       0       0       0       0       0       0       0       0
  7232 ;;Total ram usage:       43 bytes
  7233 ;; Hardware stack levels used:    1
  7234 ;; Hardware stack levels required when called:    4
  7235 ;; This function calls:
  7236 ;;		___lwdiv
  7237 ;;		___lwmod
  7238 ;;		_format_putchar
  7239 ;;		_output_putch
  7240 ;; This function is called by:
  7241 ;;		_measure_freq
  7242 ;;		_print_reading
  7243 ;; This function uses a non-reentrant model
  7244 ;;
  7245                           
  7246                           	psect	text39
  7247  001C92                     __ptext39:
  7248                           	opt stack 0
  7249  001C92                     _format_number:
  7250                           	opt stack 24
  7251                           
  7252                           ;format.c: 15: char buf[8 * sizeof(long)];
  7253                           ;format.c: 16: unsigned char di;
  7254                           ;format.c: 17: signed char i = 0;
  7255                           
  7256                           ;incstack = 0
  7257  001C92  6A33               	clrf	format_number@i,c
  7258                           
  7259                           ;format.c: 18: char padchar = ' ';
  7260  001C94  0E20               	movlw	32
  7261  001C96  6E31               	movwf	format_number@padchar,c
  7262                           
  7263                           ;format.c: 20: if(pad < 0) {
  7264  001C98  AE0C               	btfss	format_number@pad,7,c
  7265  001C9A  D003               	goto	l2705
  7266                           
  7267                           ;format.c: 21: pad = -pad;
  7268  001C9C  6C0C               	negf	format_number@pad,c
  7269                           
  7270                           ;format.c: 22: padchar = '0';
  7271  001C9E  0E30               	movlw	48
  7272  001CA0  6E31               	movwf	format_number@padchar,c
  7273  001CA2                     l2705:
  7274                           
  7275                           ;format.c: 34: di = n % base;
  7276  001CA2  C009  F002         	movff	format_number@n,___lwmod@dividend
  7277  001CA6  C00A  F003         	movff	format_number@n+1,___lwmod@dividend+1
  7278  001CAA  C00B  F004         	movff	format_number@base,___lwmod@divisor
  7279  001CAE  6A05               	clrf	___lwmod@divisor+1,c
  7280  001CB0  EC52  F012         	call	___lwmod	;wreg free
  7281  001CB4  5002               	movf	?___lwmod,w,c
  7282  001CB6  6E32               	movwf	format_number@di,c
  7283                           
  7284                           ;format.c: 35: buf[i++] = (di < 10 ? (unsigned char)'0' + di : (unsigned char)'A' + di -
      +                           10);
  7285  001CB8  0E09               	movlw	9
  7286  001CBA  6432               	cpfsgt	format_number@di,c
  7287  001CBC  D002               	goto	l2711
  7288  001CBE  0E37               	movlw	55
  7289  001CC0  D001               	goto	L3
  7290  001CC2                     l2711:
  7291  001CC2  0E30               	movlw	48
  7292  001CC4                     L3:
  7293  001CC4  2432               	addwf	format_number@di,w,c
  7294  001CC6  6E2F               	movwf	_format_number$85,c
  7295  001CC8  6A30               	clrf	_format_number$85+1,c
  7296  001CCA  0E00               	movlw	0
  7297  001CCC  2230               	addwfc	_format_number$85+1,f,c
  7298  001CCE  5033               	movf	format_number@i,w,c
  7299  001CD0  0F0F               	addlw	low format_number@buf
  7300  001CD2  6ED9               	movwf	fsr2l,c
  7301  001CD4  6ADA               	clrf	fsr2h,c
  7302  001CD6  C02F  FFDF         	movff	_format_number$85,indf2
  7303  001CDA  2A33               	incf	format_number@i,f,c
  7304                           
  7305                           ;format.c: 37: n /= base;
  7306  001CDC  C009  F002         	movff	format_number@n,___lwdiv@dividend
  7307  001CE0  C00A  F003         	movff	format_number@n+1,___lwdiv@dividend+1
  7308  001CE4  C00B  F004         	movff	format_number@base,___lwdiv@divisor
  7309  001CE8  6A05               	clrf	___lwdiv@divisor+1,c
  7310  001CEA  EC0B  F012         	call	___lwdiv	;wreg free
  7311  001CEE  C002  F009         	movff	?___lwdiv,format_number@n
  7312  001CF2  C003  F00A         	movff	?___lwdiv+1,format_number@n+1
  7313                           
  7314                           ;format.c: 38: } while(n > 0);
  7315  001CF6  5009               	movf	format_number@n,w,c
  7316  001CF8  100A               	iorwf	format_number@n+1,w,c
  7317  001CFA  E00F               	bz	l2723
  7318  001CFC  D7D2               	goto	l2705
  7319  001CFE                     l2721:
  7320  001CFE  D801               	call	u2018
  7321  001D00  D00C               	goto	l2723
  7322  001D02                     u2018:
  7323  001D02  0005               	push	
  7324  001D04  0100               	movlb	0	; () banked
  7325  001D06  6EFA               	movwf	pclath,c
  7326  001D08  51DB               	movf	_putchar_ptr& (0+255),w,b
  7327  001D0A  6EFD               	movwf	tosl,c
  7328  001D0C  51DC               	movf	(_putchar_ptr+1)& (0+255),w,b
  7329  001D0E  6EFE               	movwf	tosh,c
  7330  001D10  50F8               	movf	tblptru,w,c
  7331  001D12  6EFF               	movwf	tosu,c
  7332  001D14  50FA               	movf	pclath,w,c
  7333  001D16  5031               	movf	format_number@padchar,w,c
  7334  001D18  0012               	return		;indir
  7335  001D1A                     l2723:
  7336  001D1A  060C               	decf	format_number@pad,f,c
  7337  001D1C  280C               	incf	format_number@pad,w,c
  7338  001D1E  6E0D               	movwf	??_format_number& (0+255),c
  7339  001D20  5033               	movf	format_number@i,w,c
  7340  001D22  0A80               	xorlw	128
  7341  001D24  6E0E               	movwf	(??_format_number+1)& (0+255),c
  7342  001D26  500D               	movf	??_format_number,w,c
  7343  001D28  0A80               	xorlw	128
  7344  001D2A  5C0E               	subwf	(??_format_number+1)& (0+255),w,c
  7345  001D2C  E3E8               	bnc	l2721
  7346  001D2E                     l2725:
  7347                           
  7348                           ;format.c: 42: for(; i > 0; i--) putchar_ptr((char)buf[(signed short int)i - 1]);
  7349  001D2E  5033               	movf	format_number@i,w,c
  7350  001D30  0A80               	xorlw	128
  7351  001D32  0F7F               	addlw	-129
  7352  001D34  A0D8               	btfss	status,0,c
  7353  001D36  0012               	return	
  7354  001D38  D801               	call	u2048
  7355  001D3A  D013               	goto	l2731
  7356  001D3C                     u2048:
  7357  001D3C  0005               	push	
  7358  001D3E  0100               	movlb	0	; () banked
  7359  001D40  6EFA               	movwf	pclath,c
  7360  001D42  51DB               	movf	_putchar_ptr& (0+255),w,b
  7361  001D44  6EFD               	movwf	tosl,c
  7362  001D46  51DC               	movf	(_putchar_ptr+1)& (0+255),w,b
  7363  001D48  6EFE               	movwf	tosh,c
  7364  001D4A  50F8               	movf	tblptru,w,c
  7365  001D4C  6EFF               	movwf	tosu,c
  7366  001D4E  50FA               	movf	pclath,w,c
  7367  001D50  C033  F00D         	movff	format_number@i,??_format_number
  7368  001D54  060D               	decf	??_format_number,f,c
  7369  001D56  500D               	movf	??_format_number,w,c
  7370  001D58  0F0F               	addlw	low format_number@buf
  7371  001D5A  6ED9               	movwf	fsr2l,c
  7372  001D5C  6ADA               	clrf	fsr2h,c
  7373  001D5E  50DF               	movf	indf2,w,c
  7374  001D60  0012               	return		;indir
  7375  001D62                     l2731:
  7376  001D62  0633               	decf	format_number@i,f,c
  7377  001D64  D7E4               	goto	l2725
  7378  001D66                     __end_of_format_number:
  7379                           	opt stack 0
  7380                           tosu	equ	0xFFF
  7381                           tosh	equ	0xFFE
  7382                           tosl	equ	0xFFD
  7383                           pclath	equ	0xFFA
  7384                           tblptru	equ	0xFF8
  7385                           tblptrh	equ	0xFF7
  7386                           tblptrl	equ	0xFF6
  7387                           tablat	equ	0xFF5
  7388                           prodl	equ	0xFF3
  7389                           intcon	equ	0xFF2
  7390                           intcon2	equ	0xFF1
  7391                           postinc0	equ	0xFEE
  7392                           wreg	equ	0xFE8
  7393                           postdec1	equ	0xFE5
  7394                           fsr1l	equ	0xFE1
  7395                           indf2	equ	0xFDF
  7396                           postinc2	equ	0xFDE
  7397                           postdec2	equ	0xFDD
  7398                           fsr2h	equ	0xFDA
  7399                           fsr2l	equ	0xFD9
  7400                           status	equ	0xFD8
  7401                           
  7402 ;; *************** function _format_putchar *****************
  7403 ;; Defined at:
  7404 ;;		line 6 in file "../../../lib/format.c"
  7405 ;; Parameters:    Size  Location     Type
  7406 ;;  c               1    wreg     unsigned char 
  7407 ;; Auto vars:     Size  Location     Type
  7408 ;;  c               1    0[COMRAM] unsigned char 
  7409 ;; Return value:  Size  Location     Type
  7410 ;;		None               void
  7411 ;; Registers used:
  7412 ;;		wreg
  7413 ;; Tracked objects:
  7414 ;;		On entry : F/0
  7415 ;;		On exit  : F/0
  7416 ;;		Unchanged: F/0
  7417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7418 ;;      Params:         0       0       0       0       0       0       0       0       0
  7419 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7420 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7421 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7422 ;;Total ram usage:        0 bytes
  7423 ;; Hardware stack levels used:    1
  7424 ;; Hardware stack levels required when called:    1
  7425 ;; This function calls:
  7426 ;;		Nothing
  7427 ;; This function is called by:
  7428 ;;		_format_number
  7429 ;;		_format_double
  7430 ;; This function uses a non-reentrant model
  7431 ;;
  7432                           
  7433                           	psect	text40
  7434  0027CE                     __ptext40:
  7435                           	opt stack 0
  7436  0027CE                     _format_putchar:
  7437                           	opt stack 26
  7438                           
  7439                           ; BSR set to: 0
  7440                           
  7441                           ; BSR set to: 0
  7442                           ;format.c: 7: return;
  7443                           
  7444                           ;incstack = 0
  7445  0027CE  0012               	return		;funcret
  7446  0027D0                     __end_of_format_putchar:
  7447                           	opt stack 0
  7448                           tosu	equ	0xFFF
  7449                           tosh	equ	0xFFE
  7450                           tosl	equ	0xFFD
  7451                           pclath	equ	0xFFA
  7452                           tblptru	equ	0xFF8
  7453                           tblptrh	equ	0xFF7
  7454                           tblptrl	equ	0xFF6
  7455                           tablat	equ	0xFF5
  7456                           prodl	equ	0xFF3
  7457                           intcon	equ	0xFF2
  7458                           intcon2	equ	0xFF1
  7459                           postinc0	equ	0xFEE
  7460                           wreg	equ	0xFE8
  7461                           postdec1	equ	0xFE5
  7462                           fsr1l	equ	0xFE1
  7463                           indf2	equ	0xFDF
  7464                           postinc2	equ	0xFDE
  7465                           postdec2	equ	0xFDD
  7466                           fsr2h	equ	0xFDA
  7467                           fsr2l	equ	0xFD9
  7468                           status	equ	0xFD8
  7469                           
  7470 ;; *************** function _output_putch *****************
  7471 ;; Defined at:
  7472 ;;		line 497 in file "../../../src/print.c"
  7473 ;; Parameters:    Size  Location     Type
  7474 ;;  c               1    wreg     unsigned char 
  7475 ;; Auto vars:     Size  Location     Type
  7476 ;;  c               1    4[COMRAM] unsigned char 
  7477 ;; Return value:  Size  Location     Type
  7478 ;;		None               void
  7479 ;; Registers used:
  7480 ;;		wreg, status,2, status,0, cstack
  7481 ;; Tracked objects:
  7482 ;;		On entry : 0/0
  7483 ;;		On exit  : 0/0
  7484 ;;		Unchanged: 0/0
  7485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7486 ;;      Params:         0       0       0       0       0       0       0       0       0
  7487 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7488 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7489 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7490 ;;Total ram usage:        1 bytes
  7491 ;; Hardware stack levels used:    1
  7492 ;; Hardware stack levels required when called:    3
  7493 ;; This function calls:
  7494 ;;		_lcd_send
  7495 ;; This function is called by:
  7496 ;;		_measure_capacitance
  7497 ;;		_put_str
  7498 ;;		_format_number
  7499 ;;		_format_double
  7500 ;; This function uses a non-reentrant model
  7501 ;;
  7502                           
  7503                           	psect	text41
  7504  0027B0                     __ptext41:
  7505                           	opt stack 0
  7506  0027B0                     _output_putch:
  7507                           	opt stack 25
  7508                           
  7509                           ; BSR set to: 0
  7510                           ;incstack = 0
  7511                           ;output_putch@c stored from wreg
  7512  0027B0  6E05               	movwf	output_putch@c,c
  7513                           
  7514                           ;print.c: 499: lcd_send((c), 1);
  7515  0027B2  0E01               	movlw	1
  7516  0027B4  6E03               	movwf	lcd_send@mode,c
  7517  0027B6  5005               	movf	output_putch@c,w,c
  7518  0027B8  EFA6  F013         	goto	_lcd_send
  7519  0027BC                     __end_of_output_putch:
  7520                           	opt stack 0
  7521                           tosu	equ	0xFFF
  7522                           tosh	equ	0xFFE
  7523                           tosl	equ	0xFFD
  7524                           pclath	equ	0xFFA
  7525                           tblptru	equ	0xFF8
  7526                           tblptrh	equ	0xFF7
  7527                           tblptrl	equ	0xFF6
  7528                           tablat	equ	0xFF5
  7529                           prodl	equ	0xFF3
  7530                           intcon	equ	0xFF2
  7531                           intcon2	equ	0xFF1
  7532                           postinc0	equ	0xFEE
  7533                           wreg	equ	0xFE8
  7534                           postdec1	equ	0xFE5
  7535                           fsr1l	equ	0xFE1
  7536                           indf2	equ	0xFDF
  7537                           postinc2	equ	0xFDE
  7538                           postdec2	equ	0xFDD
  7539                           fsr2h	equ	0xFDA
  7540                           fsr2l	equ	0xFD9
  7541                           status	equ	0xFD8
  7542                           
  7543 ;; *************** function ___lwmod *****************
  7544 ;; Defined at:
  7545 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  7546 ;; Parameters:    Size  Location     Type
  7547 ;;  dividend        2    1[COMRAM] unsigned int 
  7548 ;;  divisor         2    3[COMRAM] unsigned int 
  7549 ;; Auto vars:     Size  Location     Type
  7550 ;;  counter         1    5[COMRAM] unsigned char 
  7551 ;; Return value:  Size  Location     Type
  7552 ;;                  2    1[COMRAM] unsigned int 
  7553 ;; Registers used:
  7554 ;;		wreg, status,2, status,0
  7555 ;; Tracked objects:
  7556 ;;		On entry : 0/0
  7557 ;;		On exit  : 0/0
  7558 ;;		Unchanged: 0/0
  7559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7560 ;;      Params:         4       0       0       0       0       0       0       0       0
  7561 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7562 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7563 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7564 ;;Total ram usage:        5 bytes
  7565 ;; Hardware stack levels used:    1
  7566 ;; Hardware stack levels required when called:    1
  7567 ;; This function calls:
  7568 ;;		Nothing
  7569 ;; This function is called by:
  7570 ;;		_format_number
  7571 ;;		_print_reading
  7572 ;; This function uses a non-reentrant model
  7573 ;;
  7574                           
  7575                           	psect	text42
  7576  0024A4                     __ptext42:
  7577                           	opt stack 0
  7578  0024A4                     ___lwmod:
  7579                           	opt stack 26
  7580                           
  7581                           ;incstack = 0
  7582  0024A4  5004               	movf	___lwmod@divisor,w,c
  7583  0024A6  1005               	iorwf	___lwmod@divisor+1,w,c
  7584  0024A8  E017               	bz	l1086
  7585  0024AA  0E01               	movlw	1
  7586  0024AC  6E06               	movwf	___lwmod@counter,c
  7587  0024AE  D004               	goto	l2685
  7588  0024B0                     l2683:
  7589  0024B0  90D8               	bcf	status,0,c
  7590  0024B2  3604               	rlcf	___lwmod@divisor,f,c
  7591  0024B4  3605               	rlcf	___lwmod@divisor+1,f,c
  7592  0024B6  2A06               	incf	___lwmod@counter,f,c
  7593  0024B8                     l2685:
  7594  0024B8  AE05               	btfss	___lwmod@divisor+1,7,c
  7595  0024BA  D7FA               	goto	l2683
  7596  0024BC                     l2687:
  7597  0024BC  5004               	movf	___lwmod@divisor,w,c
  7598  0024BE  5C02               	subwf	___lwmod@dividend,w,c
  7599  0024C0  5005               	movf	___lwmod@divisor+1,w,c
  7600  0024C2  5803               	subwfb	___lwmod@dividend+1,w,c
  7601  0024C4  E304               	bnc	l2691
  7602  0024C6  5004               	movf	___lwmod@divisor,w,c
  7603  0024C8  5E02               	subwf	___lwmod@dividend,f,c
  7604  0024CA  5005               	movf	___lwmod@divisor+1,w,c
  7605  0024CC  5A03               	subwfb	___lwmod@dividend+1,f,c
  7606  0024CE                     l2691:
  7607  0024CE  90D8               	bcf	status,0,c
  7608  0024D0  3205               	rrcf	___lwmod@divisor+1,f,c
  7609  0024D2  3204               	rrcf	___lwmod@divisor,f,c
  7610  0024D4  2E06               	decfsz	___lwmod@counter,f,c
  7611  0024D6  D7F2               	goto	l2687
  7612  0024D8                     l1086:
  7613  0024D8  C002  F002         	movff	___lwmod@dividend,?___lwmod
  7614  0024DC  C003  F003         	movff	___lwmod@dividend+1,?___lwmod+1
  7615  0024E0  0012               	return		;funcret
  7616  0024E2                     __end_of___lwmod:
  7617                           	opt stack 0
  7618                           tosu	equ	0xFFF
  7619                           tosh	equ	0xFFE
  7620                           tosl	equ	0xFFD
  7621                           pclath	equ	0xFFA
  7622                           tblptru	equ	0xFF8
  7623                           tblptrh	equ	0xFF7
  7624                           tblptrl	equ	0xFF6
  7625                           tablat	equ	0xFF5
  7626                           prodl	equ	0xFF3
  7627                           intcon	equ	0xFF2
  7628                           intcon2	equ	0xFF1
  7629                           postinc0	equ	0xFEE
  7630                           wreg	equ	0xFE8
  7631                           postdec1	equ	0xFE5
  7632                           fsr1l	equ	0xFE1
  7633                           indf2	equ	0xFDF
  7634                           postinc2	equ	0xFDE
  7635                           postdec2	equ	0xFDD
  7636                           fsr2h	equ	0xFDA
  7637                           fsr2l	equ	0xFD9
  7638                           status	equ	0xFD8
  7639                           
  7640 ;; *************** function ___lwdiv *****************
  7641 ;; Defined at:
  7642 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  7643 ;; Parameters:    Size  Location     Type
  7644 ;;  dividend        2    1[COMRAM] unsigned int 
  7645 ;;  divisor         2    3[COMRAM] unsigned int 
  7646 ;; Auto vars:     Size  Location     Type
  7647 ;;  quotient        2    5[COMRAM] unsigned int 
  7648 ;;  counter         1    7[COMRAM] unsigned char 
  7649 ;; Return value:  Size  Location     Type
  7650 ;;                  2    1[COMRAM] unsigned int 
  7651 ;; Registers used:
  7652 ;;		wreg, status,2, status,0
  7653 ;; Tracked objects:
  7654 ;;		On entry : 0/0
  7655 ;;		On exit  : 0/0
  7656 ;;		Unchanged: 0/0
  7657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7658 ;;      Params:         4       0       0       0       0       0       0       0       0
  7659 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7660 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7661 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7662 ;;Total ram usage:        7 bytes
  7663 ;; Hardware stack levels used:    1
  7664 ;; Hardware stack levels required when called:    1
  7665 ;; This function calls:
  7666 ;;		Nothing
  7667 ;; This function is called by:
  7668 ;;		_format_number
  7669 ;;		_print_reading
  7670 ;; This function uses a non-reentrant model
  7671 ;;
  7672                           
  7673                           	psect	text43
  7674  002416                     __ptext43:
  7675                           	opt stack 0
  7676  002416                     ___lwdiv:
  7677                           	opt stack 26
  7678                           
  7679                           ;incstack = 0
  7680  002416  6A06               	clrf	___lwdiv@quotient,c
  7681  002418  6A07               	clrf	___lwdiv@quotient+1,c
  7682  00241A  5004               	movf	___lwdiv@divisor,w,c
  7683  00241C  1005               	iorwf	___lwdiv@divisor+1,w,c
  7684  00241E  E01B               	bz	l1076
  7685  002420  0E01               	movlw	1
  7686  002422  6E08               	movwf	___lwdiv@counter,c
  7687  002424  D004               	goto	l2665
  7688  002426                     l2663:
  7689  002426  90D8               	bcf	status,0,c
  7690  002428  3604               	rlcf	___lwdiv@divisor,f,c
  7691  00242A  3605               	rlcf	___lwdiv@divisor+1,f,c
  7692  00242C  2A08               	incf	___lwdiv@counter,f,c
  7693  00242E                     l2665:
  7694  00242E  AE05               	btfss	___lwdiv@divisor+1,7,c
  7695  002430  D7FA               	goto	l2663
  7696  002432                     l2667:
  7697  002432  90D8               	bcf	status,0,c
  7698  002434  3606               	rlcf	___lwdiv@quotient,f,c
  7699  002436  3607               	rlcf	___lwdiv@quotient+1,f,c
  7700  002438  5004               	movf	___lwdiv@divisor,w,c
  7701  00243A  5C02               	subwf	___lwdiv@dividend,w,c
  7702  00243C  5005               	movf	___lwdiv@divisor+1,w,c
  7703  00243E  5803               	subwfb	___lwdiv@dividend+1,w,c
  7704  002440  E305               	bnc	l2675
  7705  002442  5004               	movf	___lwdiv@divisor,w,c
  7706  002444  5E02               	subwf	___lwdiv@dividend,f,c
  7707  002446  5005               	movf	___lwdiv@divisor+1,w,c
  7708  002448  5A03               	subwfb	___lwdiv@dividend+1,f,c
  7709  00244A  8006               	bsf	___lwdiv@quotient,0,c
  7710  00244C                     l2675:
  7711  00244C  90D8               	bcf	status,0,c
  7712  00244E  3205               	rrcf	___lwdiv@divisor+1,f,c
  7713  002450  3204               	rrcf	___lwdiv@divisor,f,c
  7714  002452  2E08               	decfsz	___lwdiv@counter,f,c
  7715  002454  D7EE               	goto	l2667
  7716  002456                     l1076:
  7717  002456  C006  F002         	movff	___lwdiv@quotient,?___lwdiv
  7718  00245A  C007  F003         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7719  00245E  0012               	return		;funcret
  7720  002460                     __end_of___lwdiv:
  7721                           	opt stack 0
  7722                           tosu	equ	0xFFF
  7723                           tosh	equ	0xFFE
  7724                           tosl	equ	0xFFD
  7725                           pclath	equ	0xFFA
  7726                           tblptru	equ	0xFF8
  7727                           tblptrh	equ	0xFF7
  7728                           tblptrl	equ	0xFF6
  7729                           tablat	equ	0xFF5
  7730                           prodl	equ	0xFF3
  7731                           intcon	equ	0xFF2
  7732                           intcon2	equ	0xFF1
  7733                           postinc0	equ	0xFEE
  7734                           wreg	equ	0xFE8
  7735                           postdec1	equ	0xFE5
  7736                           fsr1l	equ	0xFE1
  7737                           indf2	equ	0xFDF
  7738                           postinc2	equ	0xFDE
  7739                           postdec2	equ	0xFDD
  7740                           fsr2h	equ	0xFDA
  7741                           fsr2l	equ	0xFD9
  7742                           status	equ	0xFD8
  7743                           
  7744 ;; *************** function _lcd_clear *****************
  7745 ;; Defined at:
  7746 ;;		line 309 in file "../../../lib/lcd44780.c"
  7747 ;; Parameters:    Size  Location     Type
  7748 ;;		None
  7749 ;; Auto vars:     Size  Location     Type
  7750 ;;		None
  7751 ;; Return value:  Size  Location     Type
  7752 ;;		None               void
  7753 ;; Registers used:
  7754 ;;		wreg, status,2, status,0, cstack
  7755 ;; Tracked objects:
  7756 ;;		On entry : 0/0
  7757 ;;		On exit  : 0/0
  7758 ;;		Unchanged: 0/0
  7759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7760 ;;      Params:         0       0       0       0       0       0       0       0       0
  7761 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7762 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7763 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7764 ;;Total ram usage:        1 bytes
  7765 ;; Hardware stack levels used:    1
  7766 ;; Hardware stack levels required when called:    4
  7767 ;; This function calls:
  7768 ;;		_lcd_command
  7769 ;; This function is called by:
  7770 ;;		_calibrate
  7771 ;;		_main
  7772 ;; This function uses a non-reentrant model
  7773 ;;
  7774                           
  7775                           	psect	text44
  7776  00277E                     __ptext44:
  7777                           	opt stack 0
  7778  00277E                     _lcd_clear:
  7779                           	opt stack 26
  7780                           
  7781                           ;lcd44780.c: 310: lcd_command(0x01);
  7782                           
  7783                           ;incstack = 0
  7784  00277E  0E01               	movlw	1
  7785  002780  ECDE  F013         	call	_lcd_command
  7786                           
  7787                           ;lcd44780.c: 311: _delay((unsigned long)((2)*(20000000/4000.0)));
  7788  002784  0E0D               	movlw	13
  7789  002786  6E06               	movwf	??_lcd_clear& (0+255),c
  7790  002788  0EFC               	movlw	252
  7791  00278A                     u3487:
  7792  00278A  2EE8               	decfsz	wreg,f,c
  7793  00278C  D7FE               	goto	u3487
  7794  00278E  2E06               	decfsz	??_lcd_clear& (0+255),f,c
  7795  002790  D7FC               	goto	u3487
  7796  002792  0012               	return		;funcret
  7797  002794                     __end_of_lcd_clear:
  7798                           	opt stack 0
  7799                           tosu	equ	0xFFF
  7800                           tosh	equ	0xFFE
  7801                           tosl	equ	0xFFD
  7802                           pclath	equ	0xFFA
  7803                           tblptru	equ	0xFF8
  7804                           tblptrh	equ	0xFF7
  7805                           tblptrl	equ	0xFF6
  7806                           tablat	equ	0xFF5
  7807                           prodl	equ	0xFF3
  7808                           intcon	equ	0xFF2
  7809                           intcon2	equ	0xFF1
  7810                           postinc0	equ	0xFEE
  7811                           wreg	equ	0xFE8
  7812                           postdec1	equ	0xFE5
  7813                           fsr1l	equ	0xFE1
  7814                           indf2	equ	0xFDF
  7815                           postinc2	equ	0xFDE
  7816                           postdec2	equ	0xFDD
  7817                           fsr2h	equ	0xFDA
  7818                           fsr2l	equ	0xFD9
  7819                           status	equ	0xFD8
  7820                           
  7821 ;; *************** function _lcd_command *****************
  7822 ;; Defined at:
  7823 ;;		line 149 in file "../../../lib/lcd44780.c"
  7824 ;; Parameters:    Size  Location     Type
  7825 ;;  value           1    wreg     unsigned char 
  7826 ;; Auto vars:     Size  Location     Type
  7827 ;;  value           1    4[COMRAM] unsigned char 
  7828 ;; Return value:  Size  Location     Type
  7829 ;;		None               void
  7830 ;; Registers used:
  7831 ;;		wreg, status,2, status,0, cstack
  7832 ;; Tracked objects:
  7833 ;;		On entry : 0/0
  7834 ;;		On exit  : 0/0
  7835 ;;		Unchanged: 0/0
  7836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7837 ;;      Params:         0       0       0       0       0       0       0       0       0
  7838 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7839 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7840 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7841 ;;Total ram usage:        1 bytes
  7842 ;; Hardware stack levels used:    1
  7843 ;; Hardware stack levels required when called:    3
  7844 ;; This function calls:
  7845 ;;		_lcd_send
  7846 ;; This function is called by:
  7847 ;;		_lcd_gotoxy
  7848 ;;		_lcd_clear
  7849 ;;		_lcd_begin
  7850 ;; This function uses a non-reentrant model
  7851 ;;
  7852                           
  7853                           	psect	text45
  7854  0027BC                     __ptext45:
  7855                           	opt stack 0
  7856  0027BC                     _lcd_command:
  7857                           	opt stack 24
  7858                           
  7859                           ;incstack = 0
  7860                           ;lcd_command@value stored from wreg
  7861  0027BC  6E05               	movwf	lcd_command@value,c
  7862                           
  7863                           ;lcd44780.c: 150: lcd_send(value, 0);
  7864  0027BE  0E00               	movlw	0
  7865  0027C0  6E03               	movwf	lcd_send@mode,c
  7866  0027C2  5005               	movf	lcd_command@value,w,c
  7867  0027C4  EFA6  F013         	goto	_lcd_send
  7868  0027C8                     __end_of_lcd_command:
  7869                           	opt stack 0
  7870                           tosu	equ	0xFFF
  7871                           tosh	equ	0xFFE
  7872                           tosl	equ	0xFFD
  7873                           pclath	equ	0xFFA
  7874                           tblptru	equ	0xFF8
  7875                           tblptrh	equ	0xFF7
  7876                           tblptrl	equ	0xFF6
  7877                           tablat	equ	0xFF5
  7878                           prodl	equ	0xFF3
  7879                           intcon	equ	0xFF2
  7880                           intcon2	equ	0xFF1
  7881                           postinc0	equ	0xFEE
  7882                           wreg	equ	0xFE8
  7883                           postdec1	equ	0xFE5
  7884                           fsr1l	equ	0xFE1
  7885                           indf2	equ	0xFDF
  7886                           postinc2	equ	0xFDE
  7887                           postdec2	equ	0xFDD
  7888                           fsr2h	equ	0xFDA
  7889                           fsr2l	equ	0xFD9
  7890                           status	equ	0xFD8
  7891                           
  7892 ;; *************** function _lcd_send *****************
  7893 ;; Defined at:
  7894 ;;		line 125 in file "../../../lib/lcd44780.c"
  7895 ;; Parameters:    Size  Location     Type
  7896 ;;  value           1    wreg     unsigned char 
  7897 ;;  mode            1    2[COMRAM] unsigned char 
  7898 ;; Auto vars:     Size  Location     Type
  7899 ;;  value           1    3[COMRAM] unsigned char 
  7900 ;; Return value:  Size  Location     Type
  7901 ;;		None               void
  7902 ;; Registers used:
  7903 ;;		wreg, status,2, status,0, cstack
  7904 ;; Tracked objects:
  7905 ;;		On entry : 0/0
  7906 ;;		On exit  : 0/0
  7907 ;;		Unchanged: 0/0
  7908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7909 ;;      Params:         1       0       0       0       0       0       0       0       0
  7910 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7911 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7912 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7913 ;;Total ram usage:        2 bytes
  7914 ;; Hardware stack levels used:    1
  7915 ;; Hardware stack levels required when called:    2
  7916 ;; This function calls:
  7917 ;;		_lcd_write4bits
  7918 ;; This function is called by:
  7919 ;;		_lcd_command
  7920 ;;		_lcd_puts
  7921 ;;		_calibrate
  7922 ;;		_output_putch
  7923 ;; This function uses a non-reentrant model
  7924 ;;
  7925                           
  7926                           	psect	text46
  7927  00274C                     __ptext46:
  7928                           	opt stack 0
  7929  00274C                     _lcd_send:
  7930                           	opt stack 25
  7931                           
  7932                           ;incstack = 0
  7933                           ;lcd_send@value stored from wreg
  7934  00274C  6E04               	movwf	lcd_send@value,c
  7935                           
  7936                           ;lcd44780.c: 126: if(mode) {
  7937  00274E  5003               	movf	lcd_send@mode,w,c
  7938  002750  E002               	bz	l2327
  7939                           
  7940                           ;lcd44780.c: 127: LATB |= 0b0100;
  7941  002752  848A               	bsf	3978,2,c	;volatile
  7942                           
  7943                           ;lcd44780.c: 128: } else {
  7944  002754  D001               	goto	l2329
  7945  002756                     l2327:
  7946                           
  7947                           ;lcd44780.c: 129: LATB &= ~0b0100;
  7948  002756  948A               	bcf	3978,2,c	;volatile
  7949  002758                     l2329:
  7950                           
  7951                           ;lcd44780.c: 130: }
  7952                           ;lcd44780.c: 137: {
  7953                           ;lcd44780.c: 138: lcd_write4bits(value >> 4);
  7954  002758  3804               	swapf	lcd_send@value,w,c
  7955  00275A  0B0F               	andlw	15
  7956  00275C  EC77  F013         	call	_lcd_write4bits
  7957                           
  7958                           ;lcd44780.c: 139: lcd_write4bits(value);
  7959  002760  5004               	movf	lcd_send@value,w,c
  7960  002762  EF77  F013         	goto	_lcd_write4bits
  7961  002766                     __end_of_lcd_send:
  7962                           	opt stack 0
  7963                           tosu	equ	0xFFF
  7964                           tosh	equ	0xFFE
  7965                           tosl	equ	0xFFD
  7966                           pclath	equ	0xFFA
  7967                           tblptru	equ	0xFF8
  7968                           tblptrh	equ	0xFF7
  7969                           tblptrl	equ	0xFF6
  7970                           tablat	equ	0xFF5
  7971                           prodl	equ	0xFF3
  7972                           intcon	equ	0xFF2
  7973                           intcon2	equ	0xFF1
  7974                           postinc0	equ	0xFEE
  7975                           wreg	equ	0xFE8
  7976                           postdec1	equ	0xFE5
  7977                           fsr1l	equ	0xFE1
  7978                           indf2	equ	0xFDF
  7979                           postinc2	equ	0xFDE
  7980                           postdec2	equ	0xFDD
  7981                           fsr2h	equ	0xFDA
  7982                           fsr2l	equ	0xFD9
  7983                           status	equ	0xFD8
  7984                           
  7985 ;; *************** function _lcd_write4bits *****************
  7986 ;; Defined at:
  7987 ;;		line 56 in file "../../../lib/lcd44780.c"
  7988 ;; Parameters:    Size  Location     Type
  7989 ;;  value           1    wreg     unsigned char 
  7990 ;; Auto vars:     Size  Location     Type
  7991 ;;  value           1    1[COMRAM] unsigned char 
  7992 ;; Return value:  Size  Location     Type
  7993 ;;		None               void
  7994 ;; Registers used:
  7995 ;;		wreg, status,2, status,0
  7996 ;; Tracked objects:
  7997 ;;		On entry : 0/0
  7998 ;;		On exit  : 0/0
  7999 ;;		Unchanged: 0/0
  8000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8001 ;;      Params:         0       0       0       0       0       0       0       0       0
  8002 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8003 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8004 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8005 ;;Total ram usage:        1 bytes
  8006 ;; Hardware stack levels used:    1
  8007 ;; Hardware stack levels required when called:    1
  8008 ;; This function calls:
  8009 ;;		Nothing
  8010 ;; This function is called by:
  8011 ;;		_lcd_send
  8012 ;;		_lcd_begin
  8013 ;; This function uses a non-reentrant model
  8014 ;;
  8015                           
  8016                           	psect	text47
  8017  0026EE                     __ptext47:
  8018                           	opt stack 0
  8019  0026EE                     _lcd_write4bits:
  8020                           	opt stack 25
  8021                           
  8022                           ;incstack = 0
  8023                           ;lcd_write4bits@value stored from wreg
  8024  0026EE  6E02               	movwf	lcd_write4bits@value,c
  8025                           
  8026                           ;lcd44780.c: 61: LATB &= 0b00001111;
  8027  0026F0  0E0F               	movlw	15
  8028  0026F2  168A               	andwf	3978,f,c	;volatile
  8029                           
  8030                           ;lcd44780.c: 62: LATB |= value << 4;
  8031  0026F4  3802               	swapf	lcd_write4bits@value,w,c
  8032  0026F6  0BF0               	andlw	240
  8033  0026F8  128A               	iorwf	3978,f,c	;volatile
  8034                           
  8035                           ;lcd44780.c: 77: LATB |= 0b1000; _delay((unsigned long)((4)*(20000000/4000000.0))); LATB
      +                           &= ~0b1000; _delay((unsigned long)((100)*(20000000/4000000.0)));;
  8036  0026FA  868A               	bsf	3978,3,c	;volatile
  8037  0026FC  0E06               	movlw	6
  8038  0026FE                     u3497:
  8039  0026FE  2EE8               	decfsz	wreg,f,c
  8040  002700  D7FE               	goto	u3497
  8041  002702  D000               	nop2		;nop
  8042  002704  968A               	bcf	3978,3,c	;volatile
  8043  002706  0EA6               	movlw	166
  8044  002708                     u3507:
  8045  002708  2EE8               	decfsz	wreg,f,c
  8046  00270A  D7FE               	goto	u3507
  8047  00270C  D000               	nop2		;nop
  8048  00270E  0012               	return		;funcret
  8049  002710                     __end_of_lcd_write4bits:
  8050                           	opt stack 0
  8051                           tosu	equ	0xFFF
  8052                           tosh	equ	0xFFE
  8053                           tosl	equ	0xFFD
  8054                           pclath	equ	0xFFA
  8055                           tblptru	equ	0xFF8
  8056                           tblptrh	equ	0xFF7
  8057                           tblptrl	equ	0xFF6
  8058                           tablat	equ	0xFF5
  8059                           prodl	equ	0xFF3
  8060                           intcon	equ	0xFF2
  8061                           intcon2	equ	0xFF1
  8062                           postinc0	equ	0xFEE
  8063                           wreg	equ	0xFE8
  8064                           postdec1	equ	0xFE5
  8065                           fsr1l	equ	0xFE1
  8066                           indf2	equ	0xFDF
  8067                           postinc2	equ	0xFDE
  8068                           postdec2	equ	0xFDD
  8069                           fsr2h	equ	0xFDA
  8070                           fsr2l	equ	0xFD9
  8071                           status	equ	0xFD8
  8072                           
  8073 ;; *************** function _delay10ms *****************
  8074 ;; Defined at:
  8075 ;;		line 54 in file "../../../LC-meter.c"
  8076 ;; Parameters:    Size  Location     Type
  8077 ;;  period_10ms     1    wreg     unsigned char 
  8078 ;; Auto vars:     Size  Location     Type
  8079 ;;  period_10ms     1    0[COMRAM] unsigned char 
  8080 ;; Return value:  Size  Location     Type
  8081 ;;		None               void
  8082 ;; Registers used:
  8083 ;;		wreg
  8084 ;; Tracked objects:
  8085 ;;		On entry : 0/0
  8086 ;;		On exit  : 0/0
  8087 ;;		Unchanged: 0/0
  8088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8089 ;;      Params:         0       0       0       0       0       0       0       0       0
  8090 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8091 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8092 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8093 ;;Total ram usage:        0 bytes
  8094 ;; Hardware stack levels used:    1
  8095 ;; Hardware stack levels required when called:    1
  8096 ;; This function calls:
  8097 ;;		Nothing
  8098 ;; This function is called by:
  8099 ;;		_calibrate
  8100 ;;		_main
  8101 ;; This function uses a non-reentrant model
  8102 ;;
  8103                           
  8104                           	psect	text48
  8105  0027D0                     __ptext48:
  8106                           	opt stack 0
  8107  0027D0                     _delay10ms:
  8108                           	opt stack 29
  8109                           
  8110                           ;incstack = 0
  8111  0027D0  0012               	return		;funcret
  8112  0027D2                     __end_of_delay10ms:
  8113                           	opt stack 0
  8114                           tosu	equ	0xFFF
  8115                           tosh	equ	0xFFE
  8116                           tosl	equ	0xFFD
  8117                           pclath	equ	0xFFA
  8118                           tblptru	equ	0xFF8
  8119                           tblptrh	equ	0xFF7
  8120                           tblptrl	equ	0xFF6
  8121                           tablat	equ	0xFF5
  8122                           prodl	equ	0xFF3
  8123                           intcon	equ	0xFF2
  8124                           intcon2	equ	0xFF1
  8125                           postinc0	equ	0xFEE
  8126                           wreg	equ	0xFE8
  8127                           postdec1	equ	0xFE5
  8128                           fsr1l	equ	0xFE1
  8129                           indf2	equ	0xFDF
  8130                           postinc2	equ	0xFDE
  8131                           postdec2	equ	0xFDD
  8132                           fsr2h	equ	0xFDA
  8133                           fsr2l	equ	0xFD9
  8134                           status	equ	0xFD8
  8135                           
  8136 ;; *************** function ___lwtofl *****************
  8137 ;; Defined at:
  8138 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtofl.c"
  8139 ;; Parameters:    Size  Location     Type
  8140 ;;  c               2   56[COMRAM] unsigned int 
  8141 ;; Auto vars:     Size  Location     Type
  8142 ;;		None
  8143 ;; Return value:  Size  Location     Type
  8144 ;;                  4   56[COMRAM] unsigned int 
  8145 ;; Registers used:
  8146 ;;		wreg, status,2, status,0, cstack
  8147 ;; Tracked objects:
  8148 ;;		On entry : 0/0
  8149 ;;		On exit  : 0/0
  8150 ;;		Unchanged: 0/0
  8151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8152 ;;      Params:         4       0       0       0       0       0       0       0       0
  8153 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8154 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8155 ;;      Totals:         4       0       0       0       0       0       0       0       0
  8156 ;;Total ram usage:        4 bytes
  8157 ;; Hardware stack levels used:    1
  8158 ;; Hardware stack levels required when called:    2
  8159 ;; This function calls:
  8160 ;;		___flpack
  8161 ;; This function is called by:
  8162 ;;		_calibrate
  8163 ;;		_measure_capacitance
  8164 ;;		_measure_inductance
  8165 ;; This function uses a non-reentrant model
  8166 ;;
  8167                           
  8168                           	psect	text49
  8169  002676                     __ptext49:
  8170                           	opt stack 0
  8171  002676                     ___lwtofl:
  8172                           	opt stack 27
  8173                           
  8174                           ;incstack = 0
  8175  002676  C039  F002         	movff	___lwtofl@c,___flpack@arg
  8176  00267A  C03A  F003         	movff	___lwtofl@c+1,___flpack@arg+1
  8177  00267E  6A04               	clrf	___flpack@arg+2,c
  8178  002680  6A05               	clrf	___flpack@arg+3,c
  8179  002682  0E96               	movlw	150
  8180  002684  6E06               	movwf	___flpack@exp,c
  8181  002686  0E00               	movlw	0
  8182  002688  6E07               	movwf	___flpack@sign,c
  8183  00268A  EC15  F00F         	call	___flpack	;wreg free
  8184  00268E  C002  F039         	movff	?___flpack,?___lwtofl
  8185  002692  C003  F03A         	movff	?___flpack+1,?___lwtofl+1
  8186  002696  C004  F03B         	movff	?___flpack+2,?___lwtofl+2
  8187  00269A  C005  F03C         	movff	?___flpack+3,?___lwtofl+3
  8188  00269E  0012               	return		;funcret
  8189  0026A0                     __end_of___lwtofl:
  8190                           	opt stack 0
  8191                           tosu	equ	0xFFF
  8192                           tosh	equ	0xFFE
  8193                           tosl	equ	0xFFD
  8194                           pclath	equ	0xFFA
  8195                           tblptru	equ	0xFF8
  8196                           tblptrh	equ	0xFF7
  8197                           tblptrl	equ	0xFF6
  8198                           tablat	equ	0xFF5
  8199                           prodl	equ	0xFF3
  8200                           intcon	equ	0xFF2
  8201                           intcon2	equ	0xFF1
  8202                           postinc0	equ	0xFEE
  8203                           wreg	equ	0xFE8
  8204                           postdec1	equ	0xFE5
  8205                           fsr1l	equ	0xFE1
  8206                           indf2	equ	0xFDF
  8207                           postinc2	equ	0xFDE
  8208                           postdec2	equ	0xFDD
  8209                           fsr2h	equ	0xFDA
  8210                           fsr2l	equ	0xFD9
  8211                           status	equ	0xFD8
  8212                           
  8213 ;; *************** function ___flpack *****************
  8214 ;; Defined at:
  8215 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\double.c"
  8216 ;; Parameters:    Size  Location     Type
  8217 ;;  arg             4    1[COMRAM] unsigned long 
  8218 ;;  exp             1    5[COMRAM] unsigned char 
  8219 ;;  sign            1    6[COMRAM] unsigned char 
  8220 ;; Auto vars:     Size  Location     Type
  8221 ;;		None
  8222 ;; Return value:  Size  Location     Type
  8223 ;;                  4    1[COMRAM] unsigned char 
  8224 ;; Registers used:
  8225 ;;		wreg, status,2, status,0
  8226 ;; Tracked objects:
  8227 ;;		On entry : 0/0
  8228 ;;		On exit  : 0/0
  8229 ;;		Unchanged: 0/0
  8230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8231 ;;      Params:         6       0       0       0       0       0       0       0       0
  8232 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8233 ;;      Temps:          4       0       0       0       0       0       0       0       0
  8234 ;;      Totals:        10       0       0       0       0       0       0       0       0
  8235 ;;Total ram usage:       10 bytes
  8236 ;; Hardware stack levels used:    1
  8237 ;; Hardware stack levels required when called:    1
  8238 ;; This function calls:
  8239 ;;		Nothing
  8240 ;; This function is called by:
  8241 ;;		___altofl
  8242 ;;		___awtofl
  8243 ;;		___fladd
  8244 ;;		___fldiv
  8245 ;;		___flmul
  8246 ;;		___lltofl
  8247 ;;		___lwtofl
  8248 ;; This function uses a non-reentrant model
  8249 ;;
  8250                           
  8251                           	psect	text50
  8252  001E2A                     __ptext50:
  8253                           	opt stack 0
  8254  001E2A                     ___flpack:
  8255                           	opt stack 27
  8256                           
  8257                           ;incstack = 0
  8258  001E2A  5006               	movf	___flpack@exp,w,c
  8259  001E2C  E005               	bz	l740
  8260  001E2E  5002               	movf	___flpack@arg,w,c
  8261  001E30  1003               	iorwf	___flpack@arg+1,w,c
  8262  001E32  1004               	iorwf	___flpack@arg+2,w,c
  8263  001E34  1005               	iorwf	___flpack@arg+3,w,c
  8264  001E36  E107               	bnz	l3373
  8265  001E38                     l740:
  8266  001E38  6A02               	clrf	?___flpack,c
  8267  001E3A  6A03               	clrf	?___flpack+1,c
  8268  001E3C  6A04               	clrf	?___flpack+2,c
  8269  001E3E  6A05               	clrf	?___flpack+3,c
  8270  001E40  0012               	return	
  8271  001E42                     l3371:
  8272  001E42  2A06               	incf	___flpack@exp,f,c
  8273  001E44  D84D               	call	PL36	;call to abstracted procedure
  8274  001E46                     l3373:
  8275  001E46  6A08               	clrf	??___flpack& (0+255),c
  8276  001E48  6A09               	clrf	(??___flpack+1)& (0+255),c
  8277  001E4A  6A0A               	clrf	(??___flpack+2)& (0+255),c
  8278  001E4C  0EFE               	movlw	254
  8279  001E4E  1405               	andwf	___flpack@arg+3,w,c
  8280  001E50  6E0B               	movwf	(??___flpack+3)& (0+255),c
  8281  001E52  5008               	movf	??___flpack,w,c
  8282  001E54  1009               	iorwf	??___flpack+1,w,c
  8283  001E56  100A               	iorwf	??___flpack+2,w,c
  8284  001E58  100B               	iorwf	??___flpack+3,w,c
  8285  001E5A  E008               	bz	l745
  8286  001E5C  D7F2               	goto	l3371
  8287  001E5E                     l3375:
  8288  001E5E  2A06               	incf	___flpack@exp,f,c
  8289  001E60  2A02               	incf	___flpack@arg,f,c
  8290  001E62  0E00               	movlw	0
  8291  001E64  2203               	addwfc	___flpack@arg+1,f,c
  8292  001E66  2204               	addwfc	___flpack@arg+2,f,c
  8293  001E68  2205               	addwfc	___flpack@arg+3,f,c
  8294  001E6A  D83A               	call	PL36	;call to abstracted procedure
  8295  001E6C                     l745:
  8296  001E6C  6A08               	clrf	??___flpack& (0+255),c
  8297  001E6E  6A09               	clrf	(??___flpack+1)& (0+255),c
  8298  001E70  6A0A               	clrf	(??___flpack+2)& (0+255),c
  8299  001E72  5005               	movf	___flpack@arg+3,w,c
  8300  001E74  6E0B               	movwf	(??___flpack+3)& (0+255),c
  8301  001E76  5008               	movf	??___flpack,w,c
  8302  001E78  1009               	iorwf	??___flpack+1,w,c
  8303  001E7A  100A               	iorwf	??___flpack+2,w,c
  8304  001E7C  100B               	iorwf	??___flpack+3,w,c
  8305  001E7E  E007               	bz	l3383
  8306  001E80  D7EE               	goto	l3375
  8307  001E82                     l3381:
  8308  001E82  0606               	decf	___flpack@exp,f,c
  8309  001E84  90D8               	bcf	status,0,c
  8310  001E86  3602               	rlcf	___flpack@arg,f,c
  8311  001E88  3603               	rlcf	___flpack@arg+1,f,c
  8312  001E8A  3604               	rlcf	___flpack@arg+2,f,c
  8313  001E8C  3605               	rlcf	___flpack@arg+3,f,c
  8314  001E8E                     l3383:
  8315  001E8E  BE04               	btfsc	___flpack@arg+2,7,c
  8316  001E90  D003               	goto	l752
  8317  001E92  0E02               	movlw	2
  8318  001E94  6006               	cpfslt	___flpack@exp,c
  8319  001E96  D7F5               	goto	l3381
  8320  001E98                     l752:
  8321  001E98  B006               	btfsc	___flpack@exp,0,c
  8322  001E9A  D002               	goto	l753
  8323  001E9C  0E7F               	movlw	127
  8324  001E9E  1604               	andwf	___flpack@arg+2,f,c
  8325  001EA0                     l753:
  8326  001EA0  90D8               	bcf	status,0,c
  8327  001EA2  3206               	rrcf	___flpack@exp,f,c
  8328  001EA4  C006  F008         	movff	___flpack@exp,??___flpack
  8329  001EA8  6A09               	clrf	(??___flpack+1)& (0+255),c
  8330  001EAA  6A0A               	clrf	(??___flpack+2)& (0+255),c
  8331  001EAC  6A0B               	clrf	(??___flpack+3)& (0+255),c
  8332  001EAE  C008  F00B         	movff	??___flpack,??___flpack+3
  8333  001EB2  6A0A               	clrf	??___flpack+2,c
  8334  001EB4  6A09               	clrf	??___flpack+1,c
  8335  001EB6  6A08               	clrf	??___flpack,c
  8336  001EB8  5008               	movf	??___flpack,w,c
  8337  001EBA  1202               	iorwf	___flpack@arg,f,c
  8338  001EBC  5009               	movf	??___flpack+1,w,c
  8339  001EBE  1203               	iorwf	___flpack@arg+1,f,c
  8340  001EC0  500A               	movf	??___flpack+2,w,c
  8341  001EC2  1204               	iorwf	___flpack@arg+2,f,c
  8342  001EC4  500B               	movf	??___flpack+3,w,c
  8343  001EC6  1205               	iorwf	___flpack@arg+3,f,c
  8344  001EC8  5007               	movf	___flpack@sign,w,c
  8345  001ECA  A4D8               	btfss	status,2,c
  8346  001ECC  8E05               	bsf	___flpack@arg+3,7,c
  8347  001ECE  C002  F002         	movff	___flpack@arg,?___flpack
  8348  001ED2  C003  F003         	movff	___flpack@arg+1,?___flpack+1
  8349  001ED6  C004  F004         	movff	___flpack@arg+2,?___flpack+2
  8350  001EDA  C005  F005         	movff	___flpack@arg+3,?___flpack+3
  8351  001EDE  0012               	return		;funcret
  8352  001EE0                     __end_of___flpack:
  8353                           	opt stack 0
  8354  001EE0                     PL36:
  8355                           	opt stack 27
  8356  001EE0  90D8               	bcf	status,0,c
  8357  001EE2  3205               	rrcf	___flpack@arg+3,f,c
  8358  001EE4  3204               	rrcf	___flpack@arg+2,f,c
  8359  001EE6  3203               	rrcf	___flpack@arg+1,f,c
  8360  001EE8  3202               	rrcf	___flpack@arg,f,c
  8361  001EEA  0012               	return	
  8362  001EEC                     __end_ofPL36:
  8363                           	opt stack 0
  8364                           tosu	equ	0xFFF
  8365                           tosh	equ	0xFFE
  8366                           tosl	equ	0xFFD
  8367                           pclath	equ	0xFFA
  8368                           tblptru	equ	0xFF8
  8369                           tblptrh	equ	0xFF7
  8370                           tblptrl	equ	0xFF6
  8371                           tablat	equ	0xFF5
  8372                           prodl	equ	0xFF3
  8373                           intcon	equ	0xFF2
  8374                           intcon2	equ	0xFF1
  8375                           postinc0	equ	0xFEE
  8376                           wreg	equ	0xFE8
  8377                           postdec1	equ	0xFE5
  8378                           fsr1l	equ	0xFE1
  8379                           indf2	equ	0xFDF
  8380                           postinc2	equ	0xFDE
  8381                           postdec2	equ	0xFDD
  8382                           fsr2h	equ	0xFDA
  8383                           fsr2l	equ	0xFD9
  8384                           status	equ	0xFD8
  8385                           
  8386 ;; *************** function _isr *****************
  8387 ;; Defined at:
  8388 ;;		line 75 in file "../../../LC-meter.c"
  8389 ;; Parameters:    Size  Location     Type
  8390 ;;		None
  8391 ;; Auto vars:     Size  Location     Type
  8392 ;;		None
  8393 ;; Return value:  Size  Location     Type
  8394 ;;                  2  490[None  ] int 
  8395 ;; Registers used:
  8396 ;;		wreg, status,2, status,0
  8397 ;; Tracked objects:
  8398 ;;		On entry : 0/0
  8399 ;;		On exit  : 0/0
  8400 ;;		Unchanged: 0/0
  8401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8402 ;;      Params:         0       0       0       0       0       0       0       0       0
  8403 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8404 ;;      Temps:          1       0       0       0       0       0       0       0       0
  8405 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8406 ;;Total ram usage:        1 bytes
  8407 ;; Hardware stack levels used:    1
  8408 ;; This function calls:
  8409 ;;		Nothing
  8410 ;; This function is called by:
  8411 ;;		Interrupt level 2
  8412 ;; This function uses a non-reentrant model
  8413 ;;
  8414                           
  8415                           	psect	intcode
  8416  000008                     __pintcode:
  8417                           	opt stack 0
  8418  000008                     _isr:
  8419                           	opt stack 24
  8420                           
  8421                           ;LC-meter.c: 77: if(PIR1 & 0b10) {
  8422                           
  8423                           ;incstack = 0
  8424  000008  A29E               	btfss	3998,1,c	;volatile
  8425  00000A  0011               	retfie		f
  8426                           
  8427                           ;LC-meter.c: 79: bres += 256;
  8428  00000C  0100               	movlb	0	; () banked
  8429  00000E  2BD4               	incf	(_bres+1)& (0+255),f,b	;volatile
  8430                           
  8431                           ;LC-meter.c: 81: if(bres >= 5000) {
  8432  000010  0E88               	movlw	136
  8433  000012  5DD3               	subwf	_bres& (0+255),w,b	;volatile
  8434  000014  0E13               	movlw	19
  8435  000016  59D4               	subwfb	(_bres+1)& (0+255),w,b	;volatile
  8436  000018  E332               	bnc	i2l3291
  8437                           
  8438                           ; BSR set to: 0
  8439                           ;LC-meter.c: 82: bres -= 5000;
  8440  00001A  0E88               	movlw	136
  8441  00001C  5FD3               	subwf	_bres& (0+255),f,b	;volatile
  8442  00001E  0E13               	movlw	19
  8443  000020  5BD4               	subwfb	(_bres+1)& (0+255),f,b	;volatile
  8444                           
  8445                           ; BSR set to: 0
  8446                           ;LC-meter.c: 83: msecpart++;
  8447  000022  4BD5               	infsnz	_msecpart& (0+255),f,b	;volatile
  8448  000024  2BD6               	incf	(_msecpart+1)& (0+255),f,b	;volatile
  8449                           
  8450                           ; BSR set to: 0
  8451                           ;LC-meter.c: 84: msecs++;
  8452  000026  2BA7               	incf	_msecs& (0+255),f,b	;volatile
  8453  000028  0E00               	movlw	0
  8454  00002A  23A8               	addwfc	(_msecs+1)& (0+255),f,b	;volatile
  8455  00002C  23A9               	addwfc	(_msecs+2)& (0+255),f,b	;volatile
  8456  00002E  23AA               	addwfc	(_msecs+3)& (0+255),f,b	;volatile
  8457                           
  8458                           ;LC-meter.c: 86: LATC &= ~0b00000010; LATC |= (!!((blink > 200))) << 1;;
  8459  000030  928B               	bcf	3979,1,c	;volatile
  8460                           
  8461                           ; BSR set to: 0
  8462  000032  51B4               	movf	(_blink+1)& (0+255),w,b	;volatile
  8463  000034  E103               	bnz	i2u254_41
  8464  000036  0EC9               	movlw	201
  8465  000038  5DB3               	subwf	_blink& (0+255),w,b	;volatile
  8466  00003A  E303               	bnc	i2u254_40
  8467  00003C                     i2u254_41:
  8468  00003C  6A01               	clrf	??_isr& (0+255),c
  8469  00003E  2A01               	incf	??_isr& (0+255),f,c
  8470  000040  D001               	goto	i2u255_48
  8471  000042                     i2u254_40:
  8472  000042  6A01               	clrf	??_isr& (0+255),c
  8473  000044                     i2u255_48:
  8474  000044  90D8               	bcf	status,0,c
  8475  000046  3401               	rlcf	??_isr,w,c
  8476  000048  128B               	iorwf	3979,f,c	;volatile
  8477                           
  8478                           ;LC-meter.c: 87: if(blink >= 400)
  8479  00004A  0E90               	movlw	144
  8480  00004C  0100               	movlb	0	; () banked
  8481  00004E  5DB3               	subwf	_blink& (0+255),w,b	;volatile
  8482  000050  0E01               	movlw	1
  8483  000052  59B4               	subwfb	(_blink+1)& (0+255),w,b	;volatile
  8484  000054  E304               	bnc	i2l3285
  8485                           
  8486                           ; BSR set to: 0
  8487                           ;LC-meter.c: 88: blink -= 400;
  8488  000056  0E90               	movlw	144
  8489  000058  5FB3               	subwf	_blink& (0+255),f,b	;volatile
  8490  00005A  0E01               	movlw	1
  8491  00005C  5BB4               	subwfb	(_blink+1)& (0+255),f,b	;volatile
  8492  00005E                     i2l3285:
  8493                           
  8494                           ; BSR set to: 0
  8495                           ;LC-meter.c: 89: ++blink;
  8496  00005E  4BB3               	infsnz	_blink& (0+255),f,b	;volatile
  8497  000060  2BB4               	incf	(_blink+1)& (0+255),f,b	;volatile
  8498                           
  8499                           ; BSR set to: 0
  8500                           ;LC-meter.c: 92: if(msecpart >= 1000) {
  8501  000062  0EE8               	movlw	232
  8502  000064  5DD5               	subwf	_msecpart& (0+255),w,b	;volatile
  8503  000066  0E03               	movlw	3
  8504  000068  59D6               	subwfb	(_msecpart+1)& (0+255),w,b	;volatile
  8505  00006A  E309               	bnc	i2l3291
  8506                           
  8507                           ; BSR set to: 0
  8508                           ;LC-meter.c: 94: seconds++;
  8509  00006C  2BAB               	incf	_seconds& (0+255),f,b	;volatile
  8510  00006E  0E00               	movlw	0
  8511  000070  23AC               	addwfc	(_seconds+1)& (0+255),f,b	;volatile
  8512  000072  23AD               	addwfc	(_seconds+2)& (0+255),f,b	;volatile
  8513  000074  23AE               	addwfc	(_seconds+3)& (0+255),f,b	;volatile
  8514                           
  8515                           ;LC-meter.c: 95: msecpart -= 1000;
  8516  000076  0EE8               	movlw	232
  8517  000078  5FD5               	subwf	_msecpart& (0+255),f,b	;volatile
  8518  00007A  0E03               	movlw	3
  8519  00007C  5BD6               	subwfb	(_msecpart+1)& (0+255),f,b	;volatile
  8520  00007E                     i2l3291:
  8521                           
  8522                           ; BSR set to: 0
  8523                           ;LC-meter.c: 96: }
  8524                           ;LC-meter.c: 97: }
  8525                           ;LC-meter.c: 99: PIR1 &= ~0b10;
  8526  00007E  929E               	bcf	3998,1,c	;volatile
  8527  000080  0011               	retfie		f
  8528  000082                     __end_of_isr:
  8529                           	opt stack 0
  8530                           tosu	equ	0xFFF
  8531                           tosh	equ	0xFFE
  8532                           tosl	equ	0xFFD
  8533                           pclath	equ	0xFFA
  8534                           tblptru	equ	0xFF8
  8535                           tblptrh	equ	0xFF7
  8536                           tblptrl	equ	0xFF6
  8537                           tablat	equ	0xFF5
  8538                           prodl	equ	0xFF3
  8539                           intcon	equ	0xFF2
  8540                           intcon2	equ	0xFF1
  8541                           postinc0	equ	0xFEE
  8542                           wreg	equ	0xFE8
  8543                           postdec1	equ	0xFE5
  8544                           fsr1l	equ	0xFE1
  8545                           indf2	equ	0xFDF
  8546                           postinc2	equ	0xFDE
  8547                           postdec2	equ	0xFDD
  8548                           fsr2h	equ	0xFDA
  8549                           fsr2l	equ	0xFD9
  8550                           status	equ	0xFD8
  8551                           tosu	equ	0xFFF
  8552                           tosh	equ	0xFFE
  8553                           tosl	equ	0xFFD
  8554                           pclath	equ	0xFFA
  8555                           tblptru	equ	0xFF8
  8556                           tblptrh	equ	0xFF7
  8557                           tblptrl	equ	0xFF6
  8558                           tablat	equ	0xFF5
  8559                           prodl	equ	0xFF3
  8560                           intcon	equ	0xFF2
  8561                           intcon2	equ	0xFF1
  8562                           postinc0	equ	0xFEE
  8563                           wreg	equ	0xFE8
  8564                           postdec1	equ	0xFE5
  8565                           fsr1l	equ	0xFE1
  8566                           indf2	equ	0xFDF
  8567                           postinc2	equ	0xFDE
  8568                           postdec2	equ	0xFDD
  8569                           fsr2h	equ	0xFDA
  8570                           fsr2l	equ	0xFD9
  8571                           status	equ	0xFD8
  8572                           
  8573                           	psect	rparam
  8574  0000                     tosu	equ	0xFFF
  8575                           tosh	equ	0xFFE
  8576                           tosl	equ	0xFFD
  8577                           pclath	equ	0xFFA
  8578                           tblptru	equ	0xFF8
  8579                           tblptrh	equ	0xFF7
  8580                           tblptrl	equ	0xFF6
  8581                           tablat	equ	0xFF5
  8582                           prodl	equ	0xFF3
  8583                           intcon	equ	0xFF2
  8584                           intcon2	equ	0xFF1
  8585                           postinc0	equ	0xFEE
  8586                           wreg	equ	0xFE8
  8587                           postdec1	equ	0xFE5
  8588                           fsr1l	equ	0xFE1
  8589                           indf2	equ	0xFDF
  8590                           postinc2	equ	0xFDE
  8591                           postdec2	equ	0xFDD
  8592                           fsr2h	equ	0xFDA
  8593                           fsr2l	equ	0xFD9
  8594                           status	equ	0xFD8
  8595                           tosu	equ	0xFFF
  8596                           tosh	equ	0xFFE
  8597                           tosl	equ	0xFFD
  8598                           pclath	equ	0xFFA
  8599                           tblptru	equ	0xFF8
  8600                           tblptrh	equ	0xFF7
  8601                           tblptrl	equ	0xFF6
  8602                           tablat	equ	0xFF5
  8603                           prodl	equ	0xFF3
  8604                           intcon	equ	0xFF2
  8605                           intcon2	equ	0xFF1
  8606                           postinc0	equ	0xFEE
  8607                           wreg	equ	0xFE8
  8608                           postdec1	equ	0xFE5
  8609                           fsr1l	equ	0xFE1
  8610                           indf2	equ	0xFDF
  8611                           postinc2	equ	0xFDE
  8612                           postdec2	equ	0xFDD
  8613                           fsr2h	equ	0xFDA
  8614                           fsr2l	equ	0xFD9
  8615                           status	equ	0xFD8


Data Sizes:
    Strings     109
    Constant    76
    Data        6
    BSS         49
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     93      94
    BANK0           160     63     125
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(1) Largest target is 40
		 -> exp@coeff(CODE[40]), log@coeff(CODE[36]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(BANK0[2]), 

    put_str@s	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_7(CODE[13]), STR_6(CODE[10]), STR_5(CODE[6]), STR_3(CODE[15]), 
		 -> STR_1(CODE[12]), 

    print_unit@units	PTR const unsigned char [8] size(1) Largest target is 3
		 -> STR_15(CODE[3]), STR_14(CODE[3]), STR_13(CODE[3]), STR_12(CODE[3]), 
		 -> STR_11(CODE[3]), STR_10(CODE[3]), STR_9(CODE[3]), STR_8(CODE[2]), 

    uart_puts@s	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_21(CODE[6]), STR_16(CODE[3]), STR_4(CODE[3]), STR_2(CODE[3]), 

    lcd_puts@string	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_25(CODE[5]), STR_24(CODE[6]), STR_23(CODE[7]), STR_22(CODE[7]), 
		 -> STR_20(CODE[10]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[6]), 

    putchar_ptr	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> output_putch(), format_putchar(), 

    S22$op	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    buffer.op	PTR FTN(unsigned char ,)void  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _measure_inductance->___fltol
    _measure_capacitance->___fltol
    _print_unit->_lcd_gotoxy
    _print_reading->_format_number
    _lcd_begin->_lcd_command
    _indicator->_lcd_gotoxy
    _lcd_puts->_lcd_send
    _ldexp->_eval_poly
    _floor->___altofl
    ___fltol->_log10
    ___altofl->___fltol
    ___flsub->___fladd
    ___fldiv->___flpack
    ___lltofl->___flpack
    _log10->_log
    _log->_eval_poly
    _eval_poly->___fladd
    ___flmul->___fldiv
    ___fladd->___flmul
    ___awtofl->___flpack
    _calibrate->___lwtofl
    _uart_puts->_uart_putch
    _measure_freq->_format_number
    _put_str->_output_putch
    _lcd_gotoxy->_lcd_command
    _format_number->___lwdiv
    _output_putch->_lcd_send
    _lcd_clear->_lcd_command
    _lcd_command->_lcd_send
    _lcd_send->_lcd_write4bits
    ___lwtofl->_measure_freq

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_format_double
    _format_double->_pow
    _pow->_exp
    _exp->_floor
    _floor->___altofl

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  234809
                          _calibrate
                          _delay10ms
                      _format_double
                          _indicator
                          _lcd_begin
                          _lcd_clear
                         _lcd_gotoxy
                           _lcd_init
                           _lcd_puts
                _measure_capacitance
                 _measure_inductance
                        _timer0_init
                        _timer2_init
                          _uart_init
                          _uart_puts
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            4     4      0      48
                                              1 COMRAM     4     4      0
                        _uart_enable
 ---------------------------------------------------------------------------------
 (2) _uart_enable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer2_init                                          4     4      0      90
                                              1 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _timer0_init                                         10    10      0     251
                                              1 COMRAM    10    10      0
 ---------------------------------------------------------------------------------
 (1) _measure_inductance                                  55    55      0   37102
                                              0 BANK0     43    43      0
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___lwtofl
                         _lcd_gotoxy
                       _measure_freq
                      _print_reading
                         _print_unit
                            _put_str
 ---------------------------------------------------------------------------------
 (1) _measure_capacitance                                 19    19      0   36592
                                              0 BANK0     19    19      0
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___lwtofl
                         _lcd_gotoxy
                       _measure_freq
                      _print_reading
                         _print_unit
                            _put_str
 ---------------------------------------------------------------------------------
 (2) _print_unit                                           3     3      0    1753
                                             11 COMRAM     2     2      0
                         _lcd_gotoxy
                          _uart_puts
 ---------------------------------------------------------------------------------
 (2) _print_reading                                        6     4      2    6322
                                             51 COMRAM     6     4      2
                            ___lwdiv
                            ___lwmod
                      _format_number
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             3     3      0      46
                                              1 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcd_begin                                            3     2      1     685
                                              5 COMRAM     3     2      1
                        _lcd_command
                     _lcd_write4bits
 ---------------------------------------------------------------------------------
 (1) _indicator                                            1     1      0    2406
                                             11 COMRAM     1     1      0
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (3) _lcd_puts                                             3     3      0     806
                                              4 COMRAM     3     3      0
                           _lcd_send
 ---------------------------------------------------------------------------------
 (1) _format_double                                       20    16      4  142928
                                             43 BANK0     20    16      4
                           ___awtofl
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                              _floor
                     _format_putchar *
                              _log10
                       _output_putch *
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 21    13      8   79851
                                             22 BANK0     21    13      8
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___lltofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _exp                                                 11     7      4   42694
                                             11 BANK0     11     7      4
                           ___awtofl
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                8     2      6     354
                                             65 COMRAM     8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                               10     6      4    9912
                                              1 BANK0     10     6      4
                           ___altofl
                            ___fladd
                            ___fldiv (ARG)
                             ___flge
                            ___fltol
                              _frexp
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     680
                                             79 COMRAM    10     6      4
                            ___fldiv (ARG)
                              _log10 (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                               8     0      8    1594
                                              1 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (5) ___altofl                                             5     1      4    2446
                                             89 COMRAM     4     0      4
                                              0 BANK0      1     1      0
                           ___flpack
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    5179
                                             53 COMRAM     8     0      8
                           ___awtofl (ARG)
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flneg                                              4     0      4     204
                                              1 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             15     7      8    3931
                                             11 COMRAM    15     7      8
                           ___flpack
 ---------------------------------------------------------------------------------
 (3) ___lltofl                                             4     0      4    2344
                                             11 COMRAM     4     0      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) _log10                                                8     4      4   31773
                                             71 COMRAM     8     4      4
                            ___flmul
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  6     2      4   25256
                                             65 COMRAM     6     2      4
                           ___awtofl
                            ___fladd
                            ___flmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     436
                                              1 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   11199
                                             53 COMRAM    12     5      7
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             15     7      8    6342
                                             26 COMRAM    15     7      8
                           ___awtofl (ARG)
                            ___fldiv (ARG)
                           ___flpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             12     4      8    4213
                                             41 COMRAM    12     4      8
                           ___awtofl (ARG)
                            ___flmul (ARG)
                           ___flpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtofl                                             9     5      4    2686
                                             11 COMRAM     5     1      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (1) _calibrate                                            1     1      0   11580
                                             60 COMRAM     1     1      0
                           ___lwtofl
                          _delay10ms
                          _lcd_clear
                         _lcd_gotoxy
                           _lcd_send
                       _measure_freq
                            _put_str
                          _uart_puts
 ---------------------------------------------------------------------------------
 (1) _uart_puts                                            1     1      0     175
                                              2 COMRAM     1     1      0
                         _uart_putch
 ---------------------------------------------------------------------------------
 (2) _uart_putch                                           1     1      0      22
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _measure_freq                                         5     3      2    5321
                                             51 COMRAM     5     3      2
                      _format_number
                         _lcd_gotoxy
                            _put_str
                     _timer0_read_ps
 ---------------------------------------------------------------------------------
 (3) _timer0_read_ps                                       7     5      2     114
                                              1 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _put_str                                              4     4      0     747
                                              5 COMRAM     4     4      0
                       _output_putch
 ---------------------------------------------------------------------------------
 (3) _lcd_gotoxy                                           6     5      1    1578
                                              5 COMRAM     6     5      1
                        _lcd_command
 ---------------------------------------------------------------------------------
 (3) _format_number                                       43    39      4    2837
                                              8 COMRAM    43    39      4
                            ___lwdiv
                            ___lwmod
                     _format_putchar *
                       _output_putch *
 ---------------------------------------------------------------------------------
 (3) _output_putch                                         1     1      0     522
                                              4 COMRAM     1     1      0
                           _lcd_send
 ---------------------------------------------------------------------------------
 (4) _format_putchar                                       1     1      0       0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     451
                                              1 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     454
                                              1 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            1     1      0     522
                                              5 COMRAM     1     1      0
                        _lcd_command
 ---------------------------------------------------------------------------------
 (4) _lcd_command                                          1     1      0     522
                                              4 COMRAM     1     1      0
                           _lcd_send
 ---------------------------------------------------------------------------------
 (4) _lcd_send                                             2     1      1     500
                                              2 COMRAM     2     1      1
                     _lcd_write4bits
 ---------------------------------------------------------------------------------
 (5) _lcd_write4bits                                       1     1      0      22
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _delay10ms                                            1     1      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4    2669
                                             56 COMRAM     4     0      4
                           ___flpack
                       _measure_freq (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6    2248
                                              1 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calibrate
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _format_number
           ___lwdiv
           ___lwmod
           _format_putchar *
           _output_putch *
             _lcd_send
               _lcd_write4bits
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _put_str
           _output_putch
             _lcd_send
               _lcd_write4bits
         _timer0_read_ps
     _delay10ms
     _lcd_clear
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_send
       _lcd_write4bits
     _measure_freq
       _format_number
         ___lwdiv
         ___lwmod
         _format_putchar *
         _output_putch *
           _lcd_send
             _lcd_write4bits
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _put_str
         _output_putch
           _lcd_send
             _lcd_write4bits
       _timer0_read_ps
     _put_str
       _output_putch
         _lcd_send
           _lcd_write4bits
     _uart_puts
       _uart_putch
   _delay10ms
   _format_double
     ___awtofl
       ___flpack
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     _floor
       ___altofl
         ___flpack
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
       ___fladd
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___fldiv (ARG)
         ___flpack
       ___flge (ARG)
       ___fltol (ARG)
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       _frexp (ARG)
     _format_putchar *
     _log10 *
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       _log
         ___awtofl
           ___flpack
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _frexp
     _output_putch *
       _lcd_send
         _lcd_write4bits
     _pow *
       ___flge
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       ___flneg
       ___fltol
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       ___lltofl
         ___flpack
       _exp
         ___awtofl
           ___flpack
         ___fldiv
           ___flpack
         ___flge
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         ___flsub
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _floor
           ___altofl
             ___flpack
             ___fltol (ARG)
               ___fldiv (ARG)
                 ___flpack
               _log10 (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _log
                   ___awtofl
                     ___flpack
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___fladd
                       ___awtofl (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                   _frexp
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flge (ARG)
           ___fltol (ARG)
             ___fldiv (ARG)
               ___flpack
             _log10 (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
           _frexp (ARG)
         _ldexp
           _eval_poly (ARG)
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
         _log (ARG)
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
       _log
         ___awtofl
           ___flpack
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _frexp
   _indicator
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_puts
       _lcd_send
         _lcd_write4bits
   _lcd_begin
     _lcd_command
       _lcd_send
         _lcd_write4bits
     _lcd_write4bits
   _lcd_clear
     _lcd_command
       _lcd_send
         _lcd_write4bits
   _lcd_gotoxy
     _lcd_command
       _lcd_send
         _lcd_write4bits
   _lcd_init
   _lcd_puts
     _lcd_send
       _lcd_write4bits
   _measure_capacitance
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _format_number
           ___lwdiv
           ___lwmod
           _format_putchar *
           _output_putch *
             _lcd_send
               _lcd_write4bits
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _put_str
           _output_putch
             _lcd_send
               _lcd_write4bits
         _timer0_read_ps
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _measure_freq
       _format_number
         ___lwdiv
         ___lwmod
         _format_putchar *
         _output_putch *
           _lcd_send
             _lcd_write4bits
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _put_str
         _output_putch
           _lcd_send
             _lcd_write4bits
       _timer0_read_ps
     _print_reading
       ___lwdiv
       ___lwmod
       _format_number
         ___lwdiv
         ___lwmod
         _format_putchar *
         _output_putch *
           _lcd_send
             _lcd_write4bits
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _lcd_puts
         _lcd_send
           _lcd_write4bits
     _print_unit
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _uart_puts
         _uart_putch
     _put_str
       _output_putch
         _lcd_send
           _lcd_write4bits
   _measure_inductance
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _format_number
           ___lwdiv
           ___lwmod
           _format_putchar *
           _output_putch *
             _lcd_send
               _lcd_write4bits
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _put_str
           _output_putch
             _lcd_send
               _lcd_write4bits
         _timer0_read_ps
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _measure_freq
       _format_number
         ___lwdiv
         ___lwmod
         _format_putchar *
         _output_putch *
           _lcd_send
             _lcd_write4bits
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _put_str
         _output_putch
           _lcd_send
             _lcd_write4bits
       _timer0_read_ps
     _print_reading
       ___lwdiv
       ___lwmod
       _format_number
         ___lwdiv
         ___lwmod
         _format_putchar *
         _output_putch *
           _lcd_send
             _lcd_write4bits
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _lcd_puts
         _lcd_send
           _lcd_write4bits
     _print_unit
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _uart_puts
         _uart_putch
     _put_str
       _output_putch
         _lcd_send
           _lcd_write4bits
   _timer0_init
   _timer2_init
   _uart_init
     _uart_enable
   _uart_puts
     _uart_putch

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3F      7D       5       78.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5D      5E       1       98.9%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      DB       6        0.0%
DATA                 0      0      DB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Mon Sep 16 13:00:27 2019

                ___altofl@sign 0060                   ___fldiv@cntr 0018                   ___fldiv@sign 001A  
                           PL2 0CE6                             PL4 0F62                             PL6 0F84  
                           PL8 0D08                             _F1 00CB                             _F2 009F  
                           _F3 00A3                   ___flpack@arg 0002                            PL10 26E4  
                          PL20 1E0A                            PL12 0FA6                            PL30 1002  
                          PL22 0FCE                            PL14 2034                            PL32 1012  
                          PL24 0FE0                            PL16 16C6                            PL34 1E1C  
                          PL26 0FF2                            PL18 0FBC                            PL36 1EE0  
                          PL28 17F2                   ___flpack@exp 0006                    _putchar_ptr 00DB  
                          l209 23D6                            l161 265C                            l163 2660  
                          l247 27A6                            l801 2362                            l740 1E38  
                          l752 1E98                            l753 1EA0                            l745 1E6C  
                          l761 15A2                            l844 192E                            l765 15CA  
                          l847 19DC                            l776 1662                 lcd_begin@lines 0008  
                          _exp 1020                            _log 16DA                            _isr 0008  
                          _pow 13EE                            tosl 000FFD                            wreg 000FE8  
                 __CFG_FOSC$XT 000000             timer0_read_ps@prev 0006                   ___flmul@cntr 0028  
             _format_number$85 002F                   ___flmul@sign 0029         __end_of_lcd_write4bits 2710  
                ___flpack@sign 0007                   ___fltol@exp1 0059                           l1118 156E  
                         l1143 10D4                           l1144 122A                           l3001 1BC8  
                         l1076 2456                           l1086 24D8                           l3009 1BD6  
                         l3035 1C5A                           l3027 1C22                           l2327 2756  
                         l2329 2758                           l2521 2162                           l2513 214A  
                         l3081 223E                           l3073 222A                           l3065 2216  
                         l3083 2244                           l3075 2230                           l3067 221C  
                         l3421 15DC                           l3405 239E                           l2461 234C  
                         l2525 2176                           l2517 2152                           l2509 213A  
                         l2711 1CC2                           l3415 15B4                           l2519 215E  
                         l2631 208E                           l3095 2262                           l2721 1CFE  
                         l2705 1CA2                           l3441 1616                           l2617 271E  
                         l2641 20A6                           l2625 205E                           l3097 2268  
                         l3089 2256                           l3371 1E42                           l2731 1D62  
                         l2723 1D1A                           l3443 1622                           l3435 15F6  
                         l3507 1DCA                           l2467 237E                           l3531 1938  
                         l3267 2746                           l3381 1E82                           l3373 1E46  
                         l2725 1D2E                           l2741 2578                           l3453 1650  
                         l3445 162A                           l3613 16FC                           l2493 20F6  
                         l2645 20B2                           l3383 1E8E                           l3375 1E5E  
                         l2663 2426                           l3471 1698                           l3455 165C  
                         l3447 1630                           l2479 21A8                           l2495 2100  
                         l3535 1954                           l2665 242E                           l3609 16E8  
                         l3561 1F32                           l3545 1F00                           l3721 13A2  
                         l2745 2590                           l2675 244C                           l2667 2432  
                         l2691 24CE                           l2683 24B0                           l3459 1678  
                         l3483 1D8E                           l3635 1070                           l3803 0EE2  
                         l2685 24B8                           l3549 1F14                           l3581 246E  
                         l3629 103C                           l3725 13C2                           l3709 126E  
                         l2749 25A8                           l2687 24BC                           l2783 25C4  
                         l2767 23F2                           l2775 26CC                           l3591 24F2  
                         l3495 1DB4                           l3479 1D7A                           l3639 10A2  
                         l3727 13CA                           l3807 0F06                           l3569 1F60  
                         l3681 143C                           l3921 1ABE                           l2787 25DA  
                         l2779 26D8                           l3659 11F6                           l3691 14C6  
                         l3675 1422                           l3843 0C64                           l3923 1AC2  
                         l3915 1AAE                           l3597 1FB6                           l3829 090C  
                         l3767 1BA0                           l3599 201C                           l3687 149C  
                         l3839 0C46                           l3847 0C88                           l3849 0C8E  
                         ?_exp 006B                           l3789 0D76                           ?_log 0042  
                         l3799 0EC6                           ?_isr 0001                           ?_pow 0076  
                         STR_1 0869                           STR_2 0893                           STR_3 084D  
                         STR_4 0893                           STR_5 0896                           STR_6 087F  
                         STR_7 085C                           STR_9 08B1                           u2018 1D02  
                         _LATB 000F8A                           _LATC 000F8B                           u2048 1D3C  
                         u2400 2612                           _CCal 00CF                           u3140 1492  
                         u2418 2614                           u3307 1BDC                           u3317 1BF8  
                         u3407 1842                           u3327 1C0A                           _PIE1 000F9D  
                         u3168 1388                           u3417 1852                           u3337 1C16  
                         u1690 211E                           u3507 2708                           u3427 1862  
                         u3347 1C30                           u3188 13AE                           u3437 1872  
                         u3357 1C48                           u3447 1882                           u1695 2114  
                         u3367 1C7C                           u3457 1892                           u3377 180C  
                         u2930 1942                           u3467 18A2                           u3387 1822  
                         u3477 18B2                           u3397 1832                           u3487 278A  
                         u3497 26FE                           _PIR1 000F9E                           _TMR0 000FD6  
                         _TMR2 000FBC                  __CFG_FCMEN$ON 000000                   __CFG_WRTB$ON 000000  
                 __CFG_WRTC$ON 000000                           _bres 00D3                           _main 19EE  
                         fsr2h 000FDA                           fsr1l 000FE1                           indf2 000FDF  
                         fsr2l 000FD9                           exp@x 006B                           log@x 0042  
        __size_of_output_putch 000C                           pow@x 0076                           pow@y 007A  
                         prodl 000FF3     __end_of_measure_inductance 0CE6                           start 0082  
          timer0_read_ps@count 0007                  __CFG_MCLRE$ON 000000                   ___param_bank 000010  
              _timer0_init$170 0004                _timer0_init$171 0006                _timer0_init$172 0008  
              _timer0_init$169 0002            lcd_write4bits@value 0002                   lcd_send@mode 0003  
                        ??_exp 005E                          ??_log 0046                          ??_isr 0001  
                        ??_pow 005E                  ___fltol@sign1 0058                __end_of___fladd 16C6  
                        ?_main 0001                __end_of___fldiv 1F9C                __end_of___flneg 2730  
                        STR_10 08B7                          STR_11 08B4                          STR_12 08A5  
                        STR_20 0875                          STR_13 08AE                          STR_21 0890  
                        STR_14 08A8                          STR_22 0889                          STR_15 08AB  
                        STR_16 0893                          STR_17 088A                          STR_25 089C  
                        STR_18 08A1                          STR_19 088C                __end_of___flmul 1E0A  
              __end_of___flsub 24A4                __end_of___fltol 2188                          _T0CON 000FD5  
                        _T2CON 000FBA                __end_of___lwdiv 2460                __end_of___lwmod 24E2  
                        _RCSTA 000FAB               lcd_begin@dotsize 0006                          _SPBRG 000FAF  
                        _PORTC 000F82                          _TRISA 000F92                          _TRISB 000F93  
                        _TRISC 000F94                          _TXREG 000FAD                          _TXSTA 000FAC  
               __CFG_EBTR0$OFF 000000                 __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000  
                ___awtofl@sign 0010                 __CFG_EBTR3$OFF 000000                  __CFG_WRTD$OFF 000000  
                        _log10 22DC                          _blink 00B3                          _floor 18FC  
                        _ldexp 204A                          _frexp 2188                   _output_putch 27B0  
              ?_lcd_write4bits 0001                          _msecs 00A7                          pclath 000FFA  
                        tablat 000FF5                          pow@yi 0087                format_number@di 0032  
                        status 000FD8                __end_of_put_str 25EE                ??_print_reading 0036  
                  exp@exponent 0073                    ldexp@newexp 0046                __initialization 251C  
              format_putchar@c 0001                    log@exponent 0046                   __end_of_main 1ADC  
             format_double@num 008B                  lcd_gotoxy@col 0007                  lcd_gotoxy@row 0006  
                ?_measure_freq 0034         __size_of_format_double 01B2                         ??_main 005E  
                lcd_send@value 0004            format_double@weight 0097                  __activetblptr 000002  
       __size_of_format_number 00D4            lcd_init@fourbitmode 0002                         ?_log10 0048  
                       ?_floor 0061                         ?_ldexp 0042                         ?_frexp 0002  
             __end_of___altofl 23CC               __end_of___flpack 1EE0               __end_of___awtofl 251C  
             __end_of___lltofl 264A                 __CFG_WDTEN$OFF 000000                         i2l3291 007E  
                       i2l3285 005E                         _INTCON 000FF2               __end_of___lwtofl 26A0  
             __end_of_lcd_init 2676           __size_of_lcd_command 000C               __end_of_lcd_send 2766  
                       ___flge 2336               __end_of_lcd_puts 25BC                      ??___fladd 0032  
                    ??___fldiv 0014                      ??___flneg 0006                 __CFG_STVREN$ON 000000  
                    ??___flmul 0023                      ??___flsub 003E                      ??___fltol 0054  
                 ?_timer0_init 0001                 ??_measure_freq 0036                      ??___lwdiv 0006  
                 ?_timer2_init 0001                      ??___lwmod 0006                         _buffer 00B8  
                       clear_0 2522                         log10@x 0048                   ?_uart_enable 0001  
                       floor@i 0065                         floor@x 0061             timer2_init@ps_mode 0005  
                 __mediumconst 0000                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8               format_number@buf 000F               format_number@pad 000C  
      _measure_inductance$1100 0070        _measure_inductance$1101 0074        _measure_inductance$1095 0068  
      _measure_inductance$1096 0079        _measure_inductance$1097 007D        _measure_inductance$1098 0081  
      _measure_inductance$1099 006C                      ??_put_str 0006                     ___fladd@f1 002A  
                   ___fladd@f2 002E                     ___flge@ff1 0002                     ___flge@ff2 0006  
             __end_ofexp@coeff 0829                  _format_double 123C               __end_oflog@coeff 084D  
                   ___altofl@c 005A                     ___fldiv@f1 000C                     ___fldiv@f2 0010  
                   ___fldiv@f3 0014                     __accesstop 0060        __end_of__initialization 254A  
              __CFG_PBADEN$OFF 000000                     ___flneg@f1 0002                  _format_number 1C92  
                   ___flmul@f1 001B                     ___flmul@f2 001F                   eval_poly@res 003E  
                ___rparam_used 000001                     ___flsub@f1 0036                     ___flsub@f2 003A  
                   ___fltol@f1 0050                     ___awtofl@c 000C         measure_capacitance@Cin 006F  
 __size_of_measure_capacitance 0244         measure_capacitance@var 006D          lcd_gotoxy@row_offsets 0008  
               __pcstackCOMRAM 0001             __size_of_calibrate 00E2                   __pidataBANK0 27C8  
                   ___lltofl@c 000C             __size_of_delay10ms 0002                  __end_of_log10 2336  
                __end_of_floor 19EE                  __end_of_ldexp 20EC                  __end_of_frexp 2200  
                   __end_ofPL2 0D08                     __end_ofPL4 0F84                     __end_ofPL6 0FA6  
                   __end_ofPL8 0D1E                     ___lwtofl@c 0039             __size_of_lcd_begin 00D4  
           __size_of_lcd_clear 0016                        ??_log10 004C                        ??_floor 005E  
                      ??_ldexp 0048                        ??_frexp 0007                     _log10$1104 004C  
                   __pbssBANK0 009F                 ?_format_double 008B             __size_of_eval_poly 0098  
           __size_of_indicator 001C        __size_of_format_putchar 0002                 ?_format_number 0009  
               print_unit@unit 0001                        ?___flge 0002                      ?___altofl 005A  
      __size_of_timer0_read_ps 004A                      ?___flpack 0002                      ?___awtofl 000C  
                    ?___lltofl 000C             _measure_inductance 08BC                      ?___lwtofl 0039  
           __size_of_uart_init 0018               ??_lcd_write4bits 0002             __size_of_uart_puts 001C  
                      _INTCON2 000FF1                     _lcd_gotoxy 2554            ?_measure_inductance 0001  
            __end_of_calibrate 1BBE                      ?_lcd_init 0001                      ?_lcd_send 0003  
            __end_of_delay10ms 27D2                      ?_lcd_puts 0001           __end_of_measure_freq 18FC  
                   calibrate@i 003D                        __Hparam 0000                        __Lparam 0000  
         ??_measure_inductance 005A              __end_of_lcd_begin 1C92              __end_of_lcd_clear 2794  
              __size_of___flge 004C                        ___fladd 1580                        ___fldiv 1EEC  
                      ___flneg 2710                        ___flmul 1D66                        ___flsub 2460  
                      ___fltol 20EC                        ___lwdiv 2416                        ___lwmod 24A4  
                 __psmallconst 0800                     ??___altofl 005E                     ??___flpack 0008  
                      __pcinit 251C                     ??___awtofl 0010              __end_of_eval_poly 2034  
                      __ramtop 0800              __end_of_indicator 274C           __size_of_timer0_init 006E  
                   ??___lltofl 0010                        __ptext0 19EE                        __ptext1 2766  
                      __ptext2 2794                        __ptext3 25EE                        __ptext4 2200  
                      __ptext5 08BC                        __ptext6 0D1E                        __ptext7 26A0  
                      __ptext8 226E                        __ptext9 264A           __size_of_timer2_init 002E  
                   ??___lwtofl 003D                   __size_of_exp 021C                   __size_of_log 0118  
                 __size_of_isr 007A                   __size_of_pow 0192           __size_of_uart_enable 0010  
                      _seconds 00AB                ??_format_double 005E                        _put_str 25BC  
                   ??_lcd_init 0002                     ??_lcd_send 0004                     ??_lcd_puts 0005  
         end_of_initialization 254A                ??_format_number 000D                        exp@sign 0075  
                    _LCD_lines 00B6                   _lcd_init$151 0003                  __Lmediumconst 0000  
               lcd_puts@string 0007              __end_of_uart_init 277E              __end_of_uart_puts 26E4  
                      pow@sign 0086  measure_inductance@denominator 0064          __end_of_print_reading 22DC  
            format_number@base 000B                        postdec1 000FE5                        postdec2 000FDD  
                      postinc0 000FEE                        postinc2 000FDE                     _uart_putch 27A4  
                   _print_unit 26A0            _measure_capacitance 0D1E                    ?_lcd_gotoxy 0006  
                  ___fldiv@exp 0019                 _format_putchar 27CE                    ___flmul@exp 0023  
                ??_lcd_command 0005           ?_measure_capacitance 0001        measure_capacitance@unit 006C  
               format_double@m 009D         measure_inductance@unit 0078                 __end_of___flge 2382  
               _timer0_read_ps 23CC                lcd_gotoxy@F6446 00D7                     floor@expon 0069  
               format_number@i 0033                 format_number@n 0009                    __end_ofPL10 26EE  
                  __end_ofPL20 1E1C                    __end_ofPL12 0FBC                    __end_ofPL30 1012  
                  __end_ofPL22 0FE0                    __end_ofPL14 204A                    __end_ofPL32 1020  
                  __end_ofPL24 0FF2                    __end_ofPL16 16DA                    __end_ofPL34 1E2A  
                  __end_ofPL26 1002                    __end_ofPL18 0FCE                    __end_ofPL36 1EEC  
                  __end_ofPL28 1802            start_initialization 251C                     eval_poly@d 003A  
                   eval_poly@n 003B                     eval_poly@x 0036          __size_of_measure_freq 00FA  
                   ldexp@value 0042                    __end_of_exp 123C                    __end_of_log 17F2  
                  __end_of_isr 0082                    __end_of_pow 1580                   _LCD_function 005E  
       __end_of_format_putchar 27D0             format_double@digit 009B                     frexp@value 0002  
        ??_measure_capacitance 005A         __end_of_timer0_read_ps 2416                       ??___flge 000A  
          __size_of_lcd_gotoxy 0036            __end_of_lcd_command 27C8                    __pdataBANK0 00D7  
                 _measure_freq 1802                    ?_uart_putch 0001       print_reading@measurement 0034  
            __size_of___altofl 004A              __size_of___flpack 00B6              __size_of___awtofl 003A  
                  ?_print_unit 0001              __size_of___lltofl 002E                    __pbssCOMRAM 005E  
            __size_of___lwtofl 002A                  __pcstackBANK0 0060                __CFG_nPWRTEN$ON 000000  
                ?_output_putch 0001                ?_format_putchar 0001              measure_freq@count 0037  
             lcd_command@value 0005              __size_of_lcd_init 002C              __size_of_lcd_send 001A  
                    _calibrate 1ADC              __size_of_lcd_puts 0032                      _delay10ms 27D0  
                    __pnvBANK0 00CF               ___lwdiv@dividend 0002                ?_timer0_read_ps 0002  
                    __pintcode 0008                       ?___fladd 002A                       ?___fldiv 000C  
                     ?___flneg 0002                       ?___flmul 001B                       ?___flsub 0036  
                     ?___fltol 0050                       ?___lwdiv 0002                       ?___lwmod 0002  
                    _lcd_begin 1BBE                      _lcd_clear 277E                    __smallconst 0800  
                    _eval_poly 1F9C                  output_putch@c 0005                      _indicator 2730  
               ??_output_putch 0005               ___lwdiv@quotient 0006                 __size_of_log10 005A  
                     ?_put_str 0001                 __size_of_floor 00F2                 __size_of_ldexp 00A2  
               __size_of_frexp 0078                     ?_calibrate 0001            __size_of_uart_putch 000C  
                   ?_delay10ms 0001                       _LCD_ctrl 00B5                       _LCD_mode 00B7  
                  _lcd_command 27BC            __size_of_print_unit 0028                       i2u254_40 0042  
                     i2u254_41 003C                       i2u255_48 0044    __size_of_measure_inductance 042A  
                    _uart_init 2766                  ??_timer0_init 0002                  ??_timer2_init 0002  
                    _uart_puts 26C8              indicator@indicate 000C                     ?_lcd_begin 0006  
                   ?_lcd_clear 0001                     uart_puts@s 0003                  ??_uart_enable 0002  
                   ?_eval_poly 0036                     ?_indicator 0001                      lcd_puts@i 0006  
                 ??_lcd_gotoxy 0007          measure_inductance@Lin 0087          measure_inductance@var 0085  
                    copy_data0 253E          __end_of_format_double 13EE           format_number@padchar 0031  
      __size_of_lcd_write4bits 0022          __end_of_format_number 1D66                      frexp@eptr 0006  
                     __Hrparam 0000                       __Lrparam 0000                     ?_uart_init 0001  
                   ?_uart_puts 0001             __end_of_lcd_gotoxy 258A               __size_of___fladd 0146  
             __size_of___fldiv 00B0               __size_of___flneg 0020               __size_of___flmul 00A4  
             __size_of___flsub 0044               __size_of___fltol 009C                       ___altofl 2382  
                     ___flpack 1E2A               __size_of___lwdiv 004A               __size_of___lwmod 003E  
                     ___awtofl 24E2                       ___lltofl 261C                  timer2_init@ps 0003  
                     ___lwtofl 2676            __end_of_timer0_init 226E                       _exp$1107 006F  
          __end_of_timer2_init 261C                ___lwdiv@divisor 0004                ___lwdiv@counter 0008  
       __size_of_print_reading 006E           timer0_init@prescaler 000A            __end_of_uart_enable 27A4  
                     __ptext10 1BBE                       __ptext11 2730                       __ptext20 2382  
                     __ptext12 258A                       __ptext21 2460                       __ptext13 123C  
                     __ptext30 1580                       __ptext22 2710                       __ptext14 13EE  
                     __ptext31 24E2                       __ptext23 1EEC                       __ptext15 1020  
                     __ptext40 27CE                       __ptext32 1ADC                       __ptext24 261C  
                     __ptext16 204A                       __ptext41 27B0                       __ptext33 26C8  
                     __ptext25 22DC                       __ptext17 18FC                       __ptext50 1E2A  
                     __ptext42 24A4                       __ptext34 27A4                       __ptext26 16DA  
                     __ptext18 20EC                       __ptext43 2416                       __ptext35 1802  
                     __ptext27 2188                       __ptext19 2336                       __ptext44 277E  
                     __ptext36 23CC                       __ptext28 1F9C                       __ptext45 27BC  
                     __ptext37 25BC                       __ptext29 1D66                       __ptext46 274C  
                     __ptext38 2554                       __ptext47 26EE                       __ptext39 1C92  
                     __ptext48 27D0                       __ptext49 2676                       _lcd_init 264A  
                     _lcd_send 274C                       _pow$1105 007E                       _pow$1106 0082  
                     _lcd_puts 258A               __size_of_put_str 0032                    ??_calibrate 003D  
                __size_of_main 00EE                    ??_delay10ms 0002                       _msecpart 00D5  
                     _timer1of 00AF           __end_of_output_putch 27BC                    ??_lcd_begin 0007  
                  ??_lcd_clear 0006                   ??_uart_putch 0002                       exp@coeff 0801  
        ___flmul@f3_as_product 0024                       log@coeff 0829    measure_inductance@numerator 0060  
             ??_format_putchar 0002                   ??_print_unit 000C                    ??_eval_poly 003D  
                  ??_indicator 000C             _print_reading$1102 0036             _print_reading$1103 0038  
                     intlevel2 0000    __end_of_measure_capacitance 0F62               ___lwmod@dividend 0002  
             ??_timer0_read_ps 0004             __end_of_uart_putch 27B0             __end_of_print_unit 26C8  
                _print_reading 226E                    ??_uart_init 0002                    ??_uart_puts 0003  
         delay10ms@period_10ms 0001                    _timer0_init 2200                    _timer2_init 25EE  
           _format_double$1090 008F             _format_double$1091 0093       _measure_capacitance$1092 0060  
     _measure_capacitance$1093 0064       _measure_capacitance$1094 0068                       put_str@i 0007  
                     put_str@s 0009                    _uart_enable 2794             timer0_init@ps_mode 000B  
              ___lwmod@divisor 0004                ___lwmod@counter 0006                 uart_putch@byte 0002  
               _lcd_write4bits 26EE                   ___fladd@exp1 0035                   ___fladd@exp2 0034  
                 ___fladd@sign 0033                   ?_lcd_command 0001                 ?_print_reading 0034  
