

Microchip Technology PIC18 PRO Macro Assembler V1.34 build -361300703 
                                                                                               Tue Sep 17 06:45:00 2019

Microchip Technology Omniscient Code Generator (PRO mode) build 201502162209
     1                           	processor	18F25K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    69                           	psect	pa_nodes,global,class=CODE,delta=1
    70  0000                     tblptrl	equ	0xFF6
    71                           tablat	equ	0xFF5
    72                           prodl	equ	0xFF3
    73                           intcon	equ	0xFF2
    74                           intcon2	equ	0xFF1
    75                           wreg	equ	0xFE8
    76                           indf2	equ	0xFDF
    77                           postinc2	equ	0xFDE
    78                           postdec2	equ	0xFDD
    79                           fsr2h	equ	0xFDA
    80                           fsr2l	equ	0xFD9
    81                           status	equ	0xFD8
    82                           
    83                           	psect	idataBANK0
    84  002950                     __pidataBANK0:
    85                           	opt stack 0
    86                           
    87                           ;initializer for lcd_gotoxy@F6470
    88  002950  00                 	db	0
    89  002951  40                 	db	64
    90  002952  14                 	db	20
    91  002953  54                 	db	84
    92                           tblptrl	equ	0xFF6
    93                           tablat	equ	0xFF5
    94                           prodl	equ	0xFF3
    95                           intcon	equ	0xFF2
    96                           intcon2	equ	0xFF1
    97                           wreg	equ	0xFE8
    98                           indf2	equ	0xFDF
    99                           postinc2	equ	0xFDE
   100                           postdec2	equ	0xFDD
   101                           fsr2h	equ	0xFDA
   102                           fsr2l	equ	0xFD9
   103                           status	equ	0xFD8
   104                           
   105                           	psect	smallconst
   106  000800                     __psmallconst:
   107                           	opt stack 0
   108  000800  00                 	db	0
   109  000801                     exp@coeff:
   110                           	opt stack 0
   111  000801  0000               	dw	0
   112  000803  3F80               	dw	16256
   113  000805  7218               	dw	29208
   114  000807  3F31               	dw	16177
   115  000809  FDF0               	dw	65008
   116  00080B  3E75               	dw	15989
   117  00080D  5847               	dw	22599
   118  00080F  3D63               	dw	15715
   119  000811  9558               	dw	38232
   120  000813  3C1D               	dw	15389
   121  000815  C482               	dw	50306
   122  000817  3AAE               	dw	15022
   123  000819  78A8               	dw	30888
   124  00081B  3921               	dw	14625
   125  00081D  93EF               	dw	37871
   126  00081F  3780               	dw	14208
   127  000821  92A0               	dw	37536
   128  000823  35A7               	dw	13735
   129  000825  5646               	dw	22086
   130  000827  3415               	dw	13333
   131  000829                     __end_ofexp@coeff:
   132                           	opt stack 0
   133  000829                     log@coeff:
   134                           	opt stack 0
   135  000829  0000               	dw	0
   136  00082B  0000               	dw	0
   137  00082D  FFC4               	dw	65476
   138  00082F  3F7F               	dw	16255
   139  000831  EF80               	dw	61312
   140  000833  BEFF               	dw	48895
   141  000835  E190               	dw	57744
   142  000837  3EA9               	dw	16041
   143  000839  82EC               	dw	33516
   144  00083B  BE76               	dw	48758
   145  00083D  AD82               	dw	44418
   146  00083F  3E2B               	dw	15915
   147  000841  3C0E               	dw	15374
   148  000843  BDC3               	dw	48579
   149  000845  D187               	dw	53639
   150  000847  3D13               	dw	15635
   151  000849  7841               	dw	30785
   152  00084B  BBD3               	dw	48083
   153  00084D                     __end_oflog@coeff:
   154                           	opt stack 0
   155  00084D                     STR_3:
   156  00084D  70                 	db	112	;'p'
   157  00084E  6C                 	db	108	;'l'
   158  00084F  65                 	db	101	;'e'
   159  000850  61                 	db	97	;'a'
   160  000851  73                 	db	115	;'s'
   161  000852  65                 	db	101	;'e'
   162  000853  20                 	db	32
   163  000854  77                 	db	119	;'w'
   164  000855  61                 	db	97	;'a'
   165  000856  69                 	db	105	;'i'
   166  000857  74                 	db	116	;'t'
   167  000858  2E                 	db	46
   168  000859  2E                 	db	46
   169  00085A  2E                 	db	46
   170  00085B  00                 	db	0
   171  00085C                     STR_15:
   172  00085C  49                 	db	73	;'I'
   173  00085D  6E                 	db	110	;'n'
   174  00085E  64                 	db	100	;'d'
   175  00085F  75                 	db	117	;'u'
   176  000860  63                 	db	99	;'c'
   177  000861  74                 	db	116	;'t'
   178  000862  69                 	db	105	;'i'
   179  000863  76                 	db	118	;'v'
   180  000864  69                 	db	105	;'i'
   181  000865  74                 	db	116	;'t'
   182  000866  79                 	db	121	;'y'
   183  000867  20                 	db	32
   184  000868  00                 	db	0
   185  000869                     STR_1:
   186  000869  43                 	db	67	;'C'
   187  00086A  61                 	db	97	;'a'
   188  00086B  6C                 	db	108	;'l'
   189  00086C  69                 	db	105	;'i'
   190  00086D  62                 	db	98	;'b'
   191  00086E  72                 	db	114	;'r'
   192  00086F  61                 	db	97	;'a'
   193  000870  74                 	db	116	;'t'
   194  000871  69                 	db	105	;'i'
   195  000872  6E                 	db	110	;'n'
   196  000873  67                 	db	103	;'g'
   197  000874  00                 	db	0
   198  000875                     STR_28:
   199  000875  4C                 	db	76	;'L'
   200  000876  43                 	db	67	;'C'
   201  000877  2D                 	db	45
   202  000878  6D                 	db	109	;'m'
   203  000879  65                 	db	101	;'e'
   204  00087A  74                 	db	116	;'t'
   205  00087B  65                 	db	101	;'e'
   206  00087C  72                 	db	114	;'r'
   207  00087D  20                 	db	32
   208  00087E  00                 	db	0
   209  00087F                     STR_6:
   210  00087F  43                 	db	67	;'C'
   211  000880  61                 	db	97	;'a'
   212  000881  70                 	db	112	;'p'
   213  000882  61                 	db	97	;'a'
   214  000883  63                 	db	99	;'c'
   215  000884  69                 	db	105	;'i'
   216  000885  74                 	db	116	;'t'
   217  000886  79                 	db	121	;'y'
   218  000887  20                 	db	32
   219  000888  00                 	db	0
   220  000889                     STR_11:
   221  000889  0D                 	db	13
   222  00088A  0A                 	db	10
   223  00088B  43                 	db	67	;'C'
   224  00088C  43                 	db	67	;'C'
   225  00088D  61                 	db	97	;'a'
   226  00088E  6C                 	db	108	;'l'
   227  00088F  3D                 	db	61	;'='
   228  000890  00                 	db	0
   229  000891                     STR_30:
   230  000891  20                 	db	32
   231  000892  20                 	db	32
   232  000893  20                 	db	32
   233  000894  20                 	db	32
   234  000895  20                 	db	32
   235  000896  20                 	db	32
   236  000897  00                 	db	0
   237  000898                     STR_29:
   238  000898  2E                 	db	46
   239  000899  2E                 	db	46
   240  00089A  2E                 	db	46
   241  00089B  0D                 	db	13
   242  00089C  0A                 	db	10
   243  00089D  00                 	db	0
   244  00089E                     STR_8:
   245  00089E  0D                 	db	13
   246  00089F  0A                 	db	10
   247  0008A0  46                 	db	70	;'F'
   248  0008A1  31                 	db	49	;'1'
   249  0008A2  3D                 	db	61	;'='
   250  0008A3  00                 	db	0
   251  0008A4                     STR_9:
   252  0008A4  0D                 	db	13
   253  0008A5  0A                 	db	10
   254  0008A6  46                 	db	70	;'F'
   255  0008A7  32                 	db	50	;'2'
   256  0008A8  3D                 	db	61	;'='
   257  0008A9  00                 	db	0
   258  0008AA                     STR_10:
   259  0008AA  0D                 	db	13
   260  0008AB  0A                 	db	10
   261  0008AC  46                 	db	70	;'F'
   262  0008AD  33                 	db	51	;'3'
   263  0008AE  3D                 	db	61	;'='
   264  0008AF  00                 	db	0
   265  0008B0                     STR_5:
   266  0008B0  46                 	db	70	;'F'
   267  0008B1  72                 	db	114	;'r'
   268  0008B2  65                 	db	101	;'e'
   269  0008B3  71                 	db	113	;'q'
   270  0008B4  3D                 	db	61	;'='
   271  0008B5  00                 	db	0
   272  0008B6  52                 	db	82	;'R'
   273  0008B7  43                 	db	67	;'C'
   274  0008B8  34                 	db	52	;'4'
   275  0008B9  3D                 	db	61	;'='
   276  0008BA  00                 	db	0
   277  0008BB                     STR_13:
   278  0008BB  43                 	db	67	;'C'
   279  0008BC  69                 	db	105	;'i'
   280  0008BD  6E                 	db	110	;'n'
   281  0008BE  3D                 	db	61	;'='
   282  0008BF  00                 	db	0
   283  0008C0                     STR_7:
   284  0008C0  76                 	db	118	;'v'
   285  0008C1  61                 	db	97	;'a'
   286  0008C2  72                 	db	114	;'r'
   287  0008C3  3D                 	db	61	;'='
   288  0008C4  00                 	db	0
   289  0008C5                     STR_26:
   290  0008C5  2D                 	db	45
   291  0008C6  2A                 	db	42
   292  0008C7  2D                 	db	45
   293  0008C8  00                 	db	0
   294  0008C9  6D                 	db	109	;'m'
   295  0008CA  46                 	db	70	;'F'
   296  0008CB  00                 	db	0
   297  0008CC  6E                 	db	110	;'n'
   298  0008CD  46                 	db	70	;'F'
   299  0008CE  00                 	db	0
   300  0008CF  70                 	db	112	;'p'
   301  0008D0  46                 	db	70	;'F'
   302  0008D1  00                 	db	0
   303  0008D2  75                 	db	117	;'u'
   304  0008D3  46                 	db	70	;'F'
   305  0008D4  00                 	db	0
   306  0008D5                     STR_17:
   307  0008D5  6D                 	db	109	;'m'
   308  0008D6  48                 	db	72	;'H'
   309  0008D7  00                 	db	0
   310  0008D8  6E                 	db	110	;'n'
   311  0008D9  48                 	db	72	;'H'
   312  0008DA  00                 	db	0
   313  0008DB  75                 	db	117	;'u'
   314  0008DC  48                 	db	72	;'H'
   315  0008DD  00                 	db	0
   316  0000                     
   317                           ; #config settings
   318  0008DE  00                 	db	0	; dummy byte at the end
   319  0000                     tblptrl	equ	0xFF6
   320                           tablat	equ	0xFF5
   321                           prodl	equ	0xFF3
   322                           intcon	equ	0xFF2
   323                           intcon2	equ	0xFF1
   324                           wreg	equ	0xFE8
   325                           indf2	equ	0xFDF
   326                           postinc2	equ	0xFDE
   327                           postdec2	equ	0xFDD
   328                           fsr2h	equ	0xFDA
   329                           fsr2l	equ	0xFD9
   330                           status	equ	0xFD8
   331                           
   332                           	psect	nvBANK0
   333  0000E9                     __pnvBANK0:
   334                           	opt stack 0
   335  0000E9                     _CCal:
   336                           	opt stack 0
   337  0000E9                     	ds	4
   338  0000ED                     _bres:
   339                           	opt stack 0
   340  0000ED                     	ds	2
   341  0000EF                     _msecpart:
   342                           	opt stack 0
   343  0000EF                     	ds	2
   344  0000                     _TMR0	set	4054
   345  0000                     _CM1CON0	set	3992
   346  0000                     _INTCON	set	4082
   347  0000                     _INTCON2	set	4081
   348  0000                     _LATB	set	3978
   349  0000                     _LATC	set	3979
   350  0000                     _PIE1	set	3997
   351  0000                     _PIR1	set	3998
   352  0000                     _PORTC	set	3970
   353  0000                     _RCREG	set	4014
   354  0000                     _SPBRG	set	4015
   355  0000                     _T0CON	set	4053
   356  0000                     _T2CON	set	4026
   357  0000                     _TMR2	set	4028
   358  0000                     _TRISA	set	3986
   359  0000                     _TRISB	set	3987
   360  0000                     _TRISC	set	3988
   361  0000                     _TXREG	set	4013
   362  0000                     _BRGH	set	32098
   363  0000                     _CREN	set	32092
   364  0000                     _GIE	set	32663
   365  0000                     _LATC7	set	31839
   366  0000                     _PEIE	set	32662
   367  0000                     _RCIF	set	31989
   368  0000                     _RX9	set	32094
   369  0000                     _SPEN	set	32095
   370  0000                     _SYNC	set	32100
   371  0000                     _TRISC6	set	31910
   372  0000                     _TX9	set	32102
   373  0000                     _TXEN	set	32101
   374  0000                     _TXIE	set	31980
   375  0000                     _TXIF	set	31988
   376                           tblptrl	equ	0xFF6
   377                           tablat	equ	0xFF5
   378                           prodl	equ	0xFF3
   379                           intcon	equ	0xFF2
   380                           intcon2	equ	0xFF1
   381                           wreg	equ	0xFE8
   382                           indf2	equ	0xFDF
   383                           postinc2	equ	0xFDE
   384                           postdec2	equ	0xFDD
   385                           fsr2h	equ	0xFDA
   386                           fsr2l	equ	0xFD9
   387                           status	equ	0xFD8
   388                           
   389                           	psect	cinit
   390  002426                     __pcinit:
   391                           	opt stack 0
   392  002426                     start_initialization:
   393                           	opt stack 0
   394  002426                     __initialization:
   395                           	opt stack 0
   396                           
   397                           ; Clear objects allocated to BANK1 (32 bytes)
   398  002426  EE01  F000         	lfsr	0,__pbssBANK1
   399  00242A  0E20               	movlw	32
   400  00242C                     clear_0:
   401  00242C  6AEE               	clrf	postinc0,c
   402  00242E  06E8               	decf	wreg,f,c
   403  002430  E1FD               	bnz	clear_0
   404                           
   405                           ; Clear objects allocated to BANK0 (49 bytes)
   406  002432  EE00  F0B8         	lfsr	0,__pbssBANK0
   407  002436  0E31               	movlw	49
   408  002438                     clear_1:
   409  002438  6AEE               	clrf	postinc0,c
   410  00243A  06E8               	decf	wreg,f,c
   411  00243C  E1FD               	bnz	clear_1
   412                           
   413                           ; Clear objects allocated to COMRAM (3 bytes)
   414  00243E  6A5C               	clrf	(__pbssCOMRAM+2)& (0+255),c
   415  002440  6A5B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   416  002442  6A5A               	clrf	__pbssCOMRAM& (0+255),c
   417                           
   418                           ; Initialize objects allocated to BANK0 (4 bytes)
   419                           ; load TBLPTR registers with __pidataBANK0
   420  002444  0E50               	movlw	low __pidataBANK0
   421  002446  6EF6               	movwf	tblptrl,c
   422  002448  0E29               	movlw	high __pidataBANK0
   423  00244A  6EF7               	movwf	tblptrh,c
   424  00244C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   425  00244E  6EF8               	movwf	tblptru,c
   426  002450  EE00  F0F1         	lfsr	0,__pdataBANK0
   427  002454  EE10 F004          	lfsr	1,4
   428  002458                     copy_data0:
   429  002458  0009               	tblrd		*+
   430  00245A  CFF5 FFEE          	movff	tablat,postinc0
   431  00245E  50E5               	movf	postdec1,w,c
   432  002460  50E1               	movf	fsr1l,w,c
   433  002462  E1FA               	bnz	copy_data0
   434  002464                     end_of_initialization:
   435                           	opt stack 0
   436  002464                     __end_of__initialization:
   437                           	opt stack 0
   438  002464  0E00               	movlw	low (__Lsmallconst shr (0+16))
   439  002466  6EF8               	movwf	tblptru,c
   440  002468  0E08               	movlw	high __Lsmallconst
   441  00246A  6EF7               	movwf	tblptrh,c
   442  00246C  0100               	movlb	0
   443  00246E  EF09  F00D         	goto	_main	;jump to C main() function
   444                           tblptru	equ	0xFF8
   445                           tblptrh	equ	0xFF7
   446                           tblptrl	equ	0xFF6
   447                           tablat	equ	0xFF5
   448                           prodl	equ	0xFF3
   449                           intcon	equ	0xFF2
   450                           intcon2	equ	0xFF1
   451                           postinc0	equ	0xFEE
   452                           wreg	equ	0xFE8
   453                           postdec1	equ	0xFE5
   454                           fsr1l	equ	0xFE1
   455                           indf2	equ	0xFDF
   456                           postinc2	equ	0xFDE
   457                           postdec2	equ	0xFDD
   458                           fsr2h	equ	0xFDA
   459                           fsr2l	equ	0xFD9
   460                           status	equ	0xFD8
   461                           
   462                           	psect	bssCOMRAM
   463  00005A                     __pbssCOMRAM:
   464                           	opt stack 0
   465  00005A                     _LCD_function:
   466                           	opt stack 0
   467  00005A                     	ds	1
   468  00005B                     _txiptr:
   469                           	opt stack 0
   470  00005B                     	ds	1
   471  00005C                     _txoptr:
   472                           	opt stack 0
   473  00005C                     	ds	1
   474                           tblptru	equ	0xFF8
   475                           tblptrh	equ	0xFF7
   476                           tblptrl	equ	0xFF6
   477                           tablat	equ	0xFF5
   478                           prodl	equ	0xFF3
   479                           intcon	equ	0xFF2
   480                           intcon2	equ	0xFF1
   481                           postinc0	equ	0xFEE
   482                           wreg	equ	0xFE8
   483                           postdec1	equ	0xFE5
   484                           fsr1l	equ	0xFE1
   485                           indf2	equ	0xFDF
   486                           postinc2	equ	0xFDE
   487                           postdec2	equ	0xFDD
   488                           fsr2h	equ	0xFDA
   489                           fsr2l	equ	0xFD9
   490                           status	equ	0xFD8
   491                           
   492                           	psect	bssBANK0
   493  0000B8                     __pbssBANK0:
   494                           	opt stack 0
   495  0000B8                     _F2:
   496                           	opt stack 0
   497  0000B8                     	ds	4
   498  0000BC                     _F3:
   499                           	opt stack 0
   500  0000BC                     	ds	4
   501  0000C0                     _msecs:
   502                           	opt stack 0
   503  0000C0                     	ds	4
   504  0000C4                     _seconds:
   505                           	opt stack 0
   506  0000C4                     	ds	4
   507  0000C8                     _timer1of:
   508                           	opt stack 0
   509  0000C8                     	ds	4
   510  0000CC                     _blink:
   511                           	opt stack 0
   512  0000CC                     	ds	2
   513  0000CE                     _LCD_ctrl:
   514                           	opt stack 0
   515  0000CE                     	ds	1
   516  0000CF                     _LCD_lines:
   517                           	opt stack 0
   518  0000CF                     	ds	1
   519  0000D0                     _LCD_mode:
   520                           	opt stack 0
   521  0000D0                     	ds	1
   522  0000D1                     _rxiptr:
   523                           	opt stack 0
   524  0000D1                     	ds	1
   525  0000D2                     _rxoptr:
   526                           	opt stack 0
   527  0000D2                     	ds	1
   528  0000D3                     _ser_tmp:
   529                           	opt stack 0
   530  0000D3                     	ds	1
   531  0000D4                     _buffer:
   532                           	opt stack 0
   533  0000D4                     	ds	17
   534  0000E5                     _F1:
   535                           	opt stack 0
   536  0000E5                     	ds	4
   537                           tblptru	equ	0xFF8
   538                           tblptrh	equ	0xFF7
   539                           tblptrl	equ	0xFF6
   540                           tablat	equ	0xFF5
   541                           prodl	equ	0xFF3
   542                           intcon	equ	0xFF2
   543                           intcon2	equ	0xFF1
   544                           postinc0	equ	0xFEE
   545                           wreg	equ	0xFE8
   546                           postdec1	equ	0xFE5
   547                           fsr1l	equ	0xFE1
   548                           indf2	equ	0xFDF
   549                           postinc2	equ	0xFDE
   550                           postdec2	equ	0xFDD
   551                           fsr2h	equ	0xFDA
   552                           fsr2l	equ	0xFD9
   553                           status	equ	0xFD8
   554                           
   555                           	psect	dataBANK0
   556  0000F1                     __pdataBANK0:
   557                           	opt stack 0
   558  0000F1                     lcd_gotoxy@F6470:
   559                           	opt stack 0
   560  0000F1                     	ds	4
   561                           tblptru	equ	0xFF8
   562                           tblptrh	equ	0xFF7
   563                           tblptrl	equ	0xFF6
   564                           tablat	equ	0xFF5
   565                           prodl	equ	0xFF3
   566                           intcon	equ	0xFF2
   567                           intcon2	equ	0xFF1
   568                           postinc0	equ	0xFEE
   569                           wreg	equ	0xFE8
   570                           postdec1	equ	0xFE5
   571                           fsr1l	equ	0xFE1
   572                           indf2	equ	0xFDF
   573                           postinc2	equ	0xFDE
   574                           postdec2	equ	0xFDD
   575                           fsr2h	equ	0xFDA
   576                           fsr2l	equ	0xFD9
   577                           status	equ	0xFD8
   578                           
   579                           	psect	bssBANK1
   580  000100                     __pbssBANK1:
   581                           	opt stack 0
   582  000100                     _rxfifo:
   583                           	opt stack 0
   584  000100                     	ds	16
   585  000110                     _txfifo:
   586                           	opt stack 0
   587  000110                     	ds	16
   588                           tblptru	equ	0xFF8
   589                           tblptrh	equ	0xFF7
   590                           tblptrl	equ	0xFF6
   591                           tablat	equ	0xFF5
   592                           prodl	equ	0xFF3
   593                           intcon	equ	0xFF2
   594                           intcon2	equ	0xFF1
   595                           postinc0	equ	0xFEE
   596                           wreg	equ	0xFE8
   597                           postdec1	equ	0xFE5
   598                           fsr1l	equ	0xFE1
   599                           indf2	equ	0xFDF
   600                           postinc2	equ	0xFDE
   601                           postdec2	equ	0xFDD
   602                           fsr2h	equ	0xFDA
   603                           fsr2l	equ	0xFD9
   604                           status	equ	0xFD8
   605                           
   606                           	psect	cstackBANK0
   607  000060                     __pcstackBANK0:
   608                           	opt stack 0
   609  000060                     ___fltol@sign1:
   610                           	opt stack 0
   611                           
   612                           ; 1 bytes @ 0x0
   613  000060                     	ds	1
   614  000061                     ___fltol@exp1:
   615                           	opt stack 0
   616                           
   617                           ; 1 bytes @ 0x1
   618  000061                     	ds	1
   619  000062                     ?___altofl:
   620                           	opt stack 0
   621  000062                     measure_inductance@numerator:
   622                           	opt stack 0
   623  000062                     ___altofl@c:
   624                           	opt stack 0
   625                           
   626                           ; 4 bytes @ 0x2
   627  000062                     	ds	4
   628  000066                     ___altofl@sign:
   629                           	opt stack 0
   630  000066                     measure_inductance@denominator:
   631                           	opt stack 0
   632                           
   633                           ; 4 bytes @ 0x6
   634  000066                     	ds	1
   635  000067                     ?_floor:
   636                           	opt stack 0
   637  000067                     floor@x:
   638                           	opt stack 0
   639                           
   640                           ; 4 bytes @ 0x7
   641  000067                     	ds	3
   642  00006A                     _measure_inductance$1096:
   643                           	opt stack 0
   644                           
   645                           ; 4 bytes @ 0xA
   646  00006A                     	ds	1
   647  00006B                     floor@i:
   648                           	opt stack 0
   649                           
   650                           ; 4 bytes @ 0xB
   651  00006B                     	ds	3
   652  00006E                     _measure_inductance$1100:
   653                           	opt stack 0
   654                           
   655                           ; 4 bytes @ 0xE
   656  00006E                     	ds	1
   657  00006F                     floor@expon:
   658                           	opt stack 0
   659                           
   660                           ; 2 bytes @ 0xF
   661  00006F                     	ds	2
   662  000071                     ?_exp:
   663                           	opt stack 0
   664  000071                     exp@x:
   665                           	opt stack 0
   666                           
   667                           ; 4 bytes @ 0x11
   668  000071                     	ds	1
   669  000072                     _measure_inductance$1101:
   670                           	opt stack 0
   671                           
   672                           ; 4 bytes @ 0x12
   673  000072                     	ds	3
   674  000075                     _exp$1108:
   675                           	opt stack 0
   676                           
   677                           ; 4 bytes @ 0x15
   678  000075                     	ds	1
   679  000076                     _measure_inductance$1102:
   680                           	opt stack 0
   681                           
   682                           ; 4 bytes @ 0x16
   683  000076                     	ds	3
   684  000079                     exp@exponent:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0x19
   688  000079                     	ds	1
   689  00007A                     measure_inductance@unit:
   690                           	opt stack 0
   691                           
   692                           ; 1 bytes @ 0x1A
   693  00007A                     	ds	1
   694  00007B                     exp@sign:
   695                           	opt stack 0
   696  00007B                     _measure_inductance$1097:
   697                           	opt stack 0
   698                           
   699                           ; 4 bytes @ 0x1B
   700  00007B                     	ds	1
   701  00007C                     ?_pow:
   702                           	opt stack 0
   703  00007C                     pow@x:
   704                           	opt stack 0
   705                           
   706                           ; 4 bytes @ 0x1C
   707  00007C                     	ds	3
   708  00007F                     _measure_inductance$1098:
   709                           	opt stack 0
   710                           
   711                           ; 4 bytes @ 0x1F
   712  00007F                     	ds	1
   713  000080                     pow@y:
   714                           	opt stack 0
   715                           
   716                           ; 4 bytes @ 0x20
   717  000080                     	ds	3
   718  000083                     _measure_inductance$1099:
   719                           	opt stack 0
   720                           
   721                           ; 4 bytes @ 0x23
   722  000083                     	ds	1
   723  000084                     _pow$1106:
   724                           	opt stack 0
   725                           
   726                           ; 4 bytes @ 0x24
   727  000084                     	ds	3
   728  000087                     measure_inductance@var:
   729                           	opt stack 0
   730                           
   731                           ; 2 bytes @ 0x27
   732  000087                     	ds	1
   733  000088                     _pow$1107:
   734                           	opt stack 0
   735                           
   736                           ; 4 bytes @ 0x28
   737  000088                     	ds	1
   738  000089                     measure_inductance@Lin:
   739                           	opt stack 0
   740                           
   741                           ; 4 bytes @ 0x29
   742  000089                     	ds	3
   743  00008C                     pow@sign:
   744                           	opt stack 0
   745                           
   746                           ; 1 bytes @ 0x2C
   747  00008C                     	ds	1
   748  00008D                     pow@yi:
   749                           	opt stack 0
   750                           
   751                           ; 4 bytes @ 0x2D
   752  00008D                     	ds	4
   753  000091                     format_double@num:
   754                           	opt stack 0
   755                           
   756                           ; 4 bytes @ 0x31
   757  000091                     	ds	4
   758  000095                     _format_double$1091:
   759                           	opt stack 0
   760                           
   761                           ; 4 bytes @ 0x35
   762  000095                     	ds	4
   763  000099                     _format_double$1092:
   764                           	opt stack 0
   765                           
   766                           ; 4 bytes @ 0x39
   767  000099                     	ds	4
   768  00009D                     format_double@weight:
   769                           	opt stack 0
   770                           
   771                           ; 4 bytes @ 0x3D
   772  00009D                     	ds	4
   773  0000A1                     format_double@digit:
   774                           	opt stack 0
   775                           
   776                           ; 2 bytes @ 0x41
   777  0000A1                     	ds	2
   778  0000A3                     format_double@m:
   779                           	opt stack 0
   780                           
   781                           ; 2 bytes @ 0x43
   782  0000A3                     	ds	2
   783  0000A5                     _measure_capacitance$1093:
   784                           	opt stack 0
   785                           
   786                           ; 4 bytes @ 0x45
   787  0000A5                     	ds	4
   788  0000A9                     _measure_capacitance$1094:
   789                           	opt stack 0
   790                           
   791                           ; 4 bytes @ 0x49
   792  0000A9                     	ds	4
   793  0000AD                     _measure_capacitance$1095:
   794                           	opt stack 0
   795                           
   796                           ; 4 bytes @ 0x4D
   797  0000AD                     	ds	4
   798  0000B1                     measure_capacitance@unit:
   799                           	opt stack 0
   800                           
   801                           ; 1 bytes @ 0x51
   802  0000B1                     	ds	1
   803  0000B2                     measure_capacitance@var:
   804                           	opt stack 0
   805                           
   806                           ; 2 bytes @ 0x52
   807  0000B2                     	ds	2
   808  0000B4                     measure_capacitance@Cin:
   809                           	opt stack 0
   810                           
   811                           ; 4 bytes @ 0x54
   812  0000B4                     	ds	4
   813                           tblptru	equ	0xFF8
   814                           tblptrh	equ	0xFF7
   815                           tblptrl	equ	0xFF6
   816                           tablat	equ	0xFF5
   817                           prodl	equ	0xFF3
   818                           intcon	equ	0xFF2
   819                           intcon2	equ	0xFF1
   820                           postinc0	equ	0xFEE
   821                           wreg	equ	0xFE8
   822                           postdec1	equ	0xFE5
   823                           fsr1l	equ	0xFE1
   824                           indf2	equ	0xFDF
   825                           postinc2	equ	0xFDE
   826                           postdec2	equ	0xFDD
   827                           fsr2h	equ	0xFDA
   828                           fsr2l	equ	0xFD9
   829                           status	equ	0xFD8
   830                           
   831                           	psect	cstackCOMRAM
   832  000001                     __pcstackCOMRAM:
   833                           	opt stack 0
   834  000001                     ??_global_int:
   835  000001                     
   836                           ; 1 bytes @ 0x0
   837  000001                     	ds	3
   838  000004                     ??_buffer_putch:
   839  000004                     ??_timer2_init:
   840  000004                     ?_timer0_read_ps:
   841                           	opt stack 0
   842  000004                     ?___lwdiv:
   843                           	opt stack 0
   844  000004                     ?___lwmod:
   845                           	opt stack 0
   846  000004                     ?___flpack:
   847                           	opt stack 0
   848  000004                     ?_frexp:
   849                           	opt stack 0
   850  000004                     ?___flneg:
   851                           	opt stack 0
   852  000004                     lcd_write4bits@value:
   853                           	opt stack 0
   854  000004                     lcd_init@fourbitmode:
   855                           	opt stack 0
   856  000004                     ser_putch@c:
   857                           	opt stack 0
   858  000004                     _timer0_init$152:
   859                           	opt stack 0
   860  000004                     ___lwdiv@dividend:
   861                           	opt stack 0
   862  000004                     ___lwmod@dividend:
   863                           	opt stack 0
   864  000004                     ___flpack@arg:
   865                           	opt stack 0
   866  000004                     ___flge@ff1:
   867                           	opt stack 0
   868  000004                     ___flneg@f1:
   869                           	opt stack 0
   870  000004                     frexp@value:
   871                           	opt stack 0
   872                           
   873                           ; 4 bytes @ 0x3
   874  000004                     	ds	1
   875  000005                     lcd_send@mode:
   876                           	opt stack 0
   877  000005                     timer2_init@ps:
   878                           	opt stack 0
   879  000005                     ser_puts@s:
   880                           	opt stack 0
   881  000005                     _lcd_init$134:
   882                           	opt stack 0
   883                           
   884                           ; 2 bytes @ 0x4
   885  000005                     	ds	1
   886  000006                     ??_timer0_read_ps:
   887  000006                     buffer_putch@ch:
   888                           	opt stack 0
   889  000006                     lcd_send@value:
   890                           	opt stack 0
   891  000006                     _timer0_init$153:
   892                           	opt stack 0
   893  000006                     ___lwdiv@divisor:
   894                           	opt stack 0
   895  000006                     ___lwmod@divisor:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x5
   899  000006                     	ds	1
   900  000007                     ??_lcd_puts:
   901  000007                     lcd_command@value:
   902                           	opt stack 0
   903  000007                     timer2_init@ps_mode:
   904                           	opt stack 0
   905  000007                     output_putch@c:
   906                           	opt stack 0
   907                           
   908                           ; 1 bytes @ 0x6
   909  000007                     	ds	1
   910  000008                     ??_put_str:
   911  000008                     ??_lcd_clear:
   912  000008                     lcd_gotoxy@row:
   913                           	opt stack 0
   914  000008                     lcd_puts@i:
   915                           	opt stack 0
   916  000008                     lcd_begin@dotsize:
   917                           	opt stack 0
   918  000008                     timer0_read_ps@prev:
   919                           	opt stack 0
   920  000008                     ___flpack@exp:
   921                           	opt stack 0
   922  000008                     frexp@eptr:
   923                           	opt stack 0
   924  000008                     ___lwmod@counter:
   925                           	opt stack 0
   926  000008                     _timer0_init$154:
   927                           	opt stack 0
   928  000008                     ___lwdiv@quotient:
   929                           	opt stack 0
   930  000008                     ___flge@ff2:
   931                           	opt stack 0
   932                           
   933                           ; 4 bytes @ 0x7
   934  000008                     	ds	1
   935  000009                     ??_frexp:
   936  000009                     ??_lcd_begin:
   937  000009                     lcd_gotoxy@col:
   938                           	opt stack 0
   939  000009                     lcd_puts@string:
   940                           	opt stack 0
   941  000009                     ___flpack@sign:
   942                           	opt stack 0
   943  000009                     timer0_read_ps@count:
   944                           	opt stack 0
   945  000009                     put_str@i:
   946                           	opt stack 0
   947                           
   948                           ; 2 bytes @ 0x8
   949  000009                     	ds	1
   950  00000A                     ??___flpack:
   951  00000A                     lcd_begin@lines:
   952                           	opt stack 0
   953  00000A                     ___lwdiv@counter:
   954                           	opt stack 0
   955  00000A                     _timer0_init$155:
   956                           	opt stack 0
   957  00000A                     lcd_gotoxy@row_offsets:
   958                           	opt stack 0
   959                           
   960                           ; 4 bytes @ 0x9
   961  00000A                     	ds	1
   962  00000B                     put_str@s:
   963                           	opt stack 0
   964  00000B                     format_number@n:
   965                           	opt stack 0
   966                           
   967                           ; 2 bytes @ 0xA
   968  00000B                     	ds	1
   969  00000C                     timer0_init@prescaler:
   970                           	opt stack 0
   971                           
   972                           ; 1 bytes @ 0xB
   973  00000C                     	ds	1
   974  00000D                     format_number@base:
   975                           	opt stack 0
   976  00000D                     timer0_init@ps_mode:
   977                           	opt stack 0
   978                           
   979                           ; 1 bytes @ 0xC
   980  00000D                     	ds	1
   981  00000E                     ??_print_unit:
   982  00000E                     ?___fldiv:
   983                           	opt stack 0
   984  00000E                     ?___awtofl:
   985                           	opt stack 0
   986  00000E                     ?___lltofl:
   987                           	opt stack 0
   988  00000E                     format_number@pad:
   989                           	opt stack 0
   990  00000E                     indicator@indicate:
   991                           	opt stack 0
   992  00000E                     ___awtofl@c:
   993                           	opt stack 0
   994  00000E                     ___fldiv@f1:
   995                           	opt stack 0
   996  00000E                     ___lltofl@c:
   997                           	opt stack 0
   998                           
   999                           ; 4 bytes @ 0xD
  1000  00000E                     	ds	1
  1001  00000F                     ??_format_number:
  1002                           
  1003                           ; 0 bytes @ 0xE
  1004  00000F                     	ds	2
  1005  000011                     format_number@buf:
  1006                           	opt stack 0
  1007                           
  1008                           ; 32 bytes @ 0x10
  1009  000011                     	ds	1
  1010  000012                     ___awtofl@sign:
  1011                           	opt stack 0
  1012  000012                     ___fldiv@f2:
  1013                           	opt stack 0
  1014                           
  1015                           ; 4 bytes @ 0x11
  1016  000012                     	ds	4
  1017  000016                     ___fldiv@f3:
  1018                           	opt stack 0
  1019                           
  1020                           ; 4 bytes @ 0x15
  1021  000016                     	ds	4
  1022  00001A                     ___fldiv@cntr:
  1023                           	opt stack 0
  1024                           
  1025                           ; 1 bytes @ 0x19
  1026  00001A                     	ds	1
  1027  00001B                     ___fldiv@exp:
  1028                           	opt stack 0
  1029                           
  1030                           ; 1 bytes @ 0x1A
  1031  00001B                     	ds	1
  1032  00001C                     ___fldiv@sign:
  1033                           	opt stack 0
  1034                           
  1035                           ; 1 bytes @ 0x1B
  1036  00001C                     	ds	1
  1037  00001D                     ?___flmul:
  1038                           	opt stack 0
  1039  00001D                     ___flmul@f1:
  1040                           	opt stack 0
  1041                           
  1042                           ; 4 bytes @ 0x1C
  1043  00001D                     	ds	4
  1044  000021                     ___flmul@f2:
  1045                           	opt stack 0
  1046                           
  1047                           ; 4 bytes @ 0x20
  1048  000021                     	ds	4
  1049  000025                     ___flmul@exp:
  1050                           	opt stack 0
  1051                           
  1052                           ; 1 bytes @ 0x24
  1053  000025                     	ds	1
  1054  000026                     ___flmul@f3_as_product:
  1055                           	opt stack 0
  1056                           
  1057                           ; 4 bytes @ 0x25
  1058  000026                     	ds	4
  1059  00002A                     ___flmul@cntr:
  1060                           	opt stack 0
  1061                           
  1062                           ; 1 bytes @ 0x29
  1063  00002A                     	ds	1
  1064  00002B                     ___flmul@sign:
  1065                           	opt stack 0
  1066                           
  1067                           ; 1 bytes @ 0x2A
  1068  00002B                     	ds	1
  1069  00002C                     ?___fladd:
  1070                           	opt stack 0
  1071  00002C                     ___fladd@f1:
  1072                           	opt stack 0
  1073                           
  1074                           ; 4 bytes @ 0x2B
  1075  00002C                     	ds	4
  1076  000030                     ___fladd@f2:
  1077                           	opt stack 0
  1078                           
  1079                           ; 4 bytes @ 0x2F
  1080  000030                     	ds	1
  1081  000031                     _format_number$68:
  1082                           	opt stack 0
  1083                           
  1084                           ; 2 bytes @ 0x30
  1085  000031                     	ds	2
  1086  000033                     format_number@padchar:
  1087                           	opt stack 0
  1088                           
  1089                           ; 1 bytes @ 0x32
  1090  000033                     	ds	1
  1091  000034                     ??___fladd:
  1092  000034                     format_number@di:
  1093                           	opt stack 0
  1094                           
  1095                           ; 1 bytes @ 0x33
  1096  000034                     	ds	1
  1097  000035                     format_number@i:
  1098                           	opt stack 0
  1099  000035                     ___fladd@sign:
  1100                           	opt stack 0
  1101                           
  1102                           ; 1 bytes @ 0x34
  1103  000035                     	ds	1
  1104  000036                     ?_measure_freq:
  1105                           	opt stack 0
  1106  000036                     ___fladd@exp2:
  1107                           	opt stack 0
  1108  000036                     print_reading@measurement:
  1109                           	opt stack 0
  1110  000036                     format_xint32@x:
  1111                           	opt stack 0
  1112                           
  1113                           ; 4 bytes @ 0x35
  1114  000036                     	ds	1
  1115  000037                     ___fladd@exp1:
  1116                           	opt stack 0
  1117                           
  1118                           ; 1 bytes @ 0x36
  1119  000037                     	ds	1
  1120  000038                     ??_measure_freq:
  1121  000038                     ?___flsub:
  1122                           	opt stack 0
  1123  000038                     ?_eval_poly:
  1124                           	opt stack 0
  1125  000038                     _print_reading$1103:
  1126                           	opt stack 0
  1127  000038                     ___flsub@f1:
  1128                           	opt stack 0
  1129  000038                     eval_poly@x:
  1130                           	opt stack 0
  1131                           
  1132                           ; 4 bytes @ 0x37
  1133  000038                     	ds	1
  1134  000039                     measure_freq@count:
  1135                           	opt stack 0
  1136                           
  1137                           ; 2 bytes @ 0x38
  1138  000039                     	ds	1
  1139  00003A                     _print_reading$1104:
  1140                           	opt stack 0
  1141                           
  1142                           ; 2 bytes @ 0x39
  1143  00003A                     	ds	1
  1144  00003B                     ?___lwtofl:
  1145                           	opt stack 0
  1146  00003B                     ___lwtofl@c:
  1147                           	opt stack 0
  1148                           
  1149                           ; 2 bytes @ 0x3A
  1150  00003B                     	ds	1
  1151  00003C                     eval_poly@d:
  1152                           	opt stack 0
  1153  00003C                     ___flsub@f2:
  1154                           	opt stack 0
  1155                           
  1156                           ; 4 bytes @ 0x3B
  1157  00003C                     	ds	1
  1158  00003D                     eval_poly@n:
  1159                           	opt stack 0
  1160                           
  1161                           ; 2 bytes @ 0x3C
  1162  00003D                     	ds	2
  1163  00003F                     ??_eval_poly:
  1164  00003F                     calibrate@i:
  1165                           	opt stack 0
  1166                           
  1167                           ; 1 bytes @ 0x3E
  1168  00003F                     	ds	1
  1169  000040                     eval_poly@res:
  1170                           	opt stack 0
  1171                           
  1172                           ; 4 bytes @ 0x3F
  1173  000040                     	ds	4
  1174  000044                     ?_ldexp:
  1175                           	opt stack 0
  1176  000044                     ?_log:
  1177                           	opt stack 0
  1178  000044                     ldexp@value:
  1179                           	opt stack 0
  1180  000044                     log@x:
  1181                           	opt stack 0
  1182                           
  1183                           ; 4 bytes @ 0x43
  1184  000044                     	ds	4
  1185  000048                     ldexp@newexp:
  1186                           	opt stack 0
  1187  000048                     log@exponent:
  1188                           	opt stack 0
  1189                           
  1190                           ; 2 bytes @ 0x47
  1191  000048                     	ds	2
  1192  00004A                     ??_ldexp:
  1193  00004A                     ?_log10:
  1194                           	opt stack 0
  1195  00004A                     log10@x:
  1196                           	opt stack 0
  1197                           
  1198                           ; 4 bytes @ 0x49
  1199  00004A                     	ds	4
  1200  00004E                     _log10$1105:
  1201                           	opt stack 0
  1202                           
  1203                           ; 4 bytes @ 0x4D
  1204  00004E                     	ds	4
  1205  000052                     ?___fltol:
  1206                           	opt stack 0
  1207  000052                     ___fltol@f1:
  1208                           	opt stack 0
  1209                           
  1210                           ; 4 bytes @ 0x51
  1211  000052                     	ds	4
  1212  000056                     ??___fltol:
  1213                           
  1214                           ; 0 bytes @ 0x55
  1215  000056                     	ds	4
  1216  00005A                     tblptru	equ	0xFF8
  1217                           tblptrh	equ	0xFF7
  1218                           tblptrl	equ	0xFF6
  1219                           tablat	equ	0xFF5
  1220                           prodl	equ	0xFF3
  1221                           intcon	equ	0xFF2
  1222                           intcon2	equ	0xFF1
  1223                           postinc0	equ	0xFEE
  1224                           wreg	equ	0xFE8
  1225                           postdec1	equ	0xFE5
  1226                           fsr1l	equ	0xFE1
  1227                           indf2	equ	0xFDF
  1228                           postinc2	equ	0xFDE
  1229                           postdec2	equ	0xFDD
  1230                           fsr2h	equ	0xFDA
  1231                           fsr2l	equ	0xFD9
  1232                           status	equ	0xFD8
  1233                           
  1234                           ; 0 bytes @ 0x59
  1235 ;;
  1236 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1237 ;;
  1238 ;; *************** function _main *****************
  1239 ;; Defined at:
  1240 ;;		line 116 in file "../../../LC-meter.c"
  1241 ;; Parameters:    Size  Location     Type
  1242 ;;		None
  1243 ;; Auto vars:     Size  Location     Type
  1244 ;;		None
  1245 ;; Return value:  Size  Location     Type
  1246 ;;		None               void
  1247 ;; Registers used:
  1248 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1249 ;; Tracked objects:
  1250 ;;		On entry : 0/0
  1251 ;;		On exit  : 0/0
  1252 ;;		Unchanged: 0/0
  1253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1254 ;;      Params:         0       0       0       0       0       0       0       0       0
  1255 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1256 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1257 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1258 ;;Total ram usage:        0 bytes
  1259 ;; Hardware stack levels required when called:    8
  1260 ;; This function calls:
  1261 ;;		_calibrate
  1262 ;;		_delay10ms
  1263 ;;		_format_double
  1264 ;;		_indicator
  1265 ;;		_lcd_begin
  1266 ;;		_lcd_clear
  1267 ;;		_lcd_gotoxy
  1268 ;;		_lcd_init
  1269 ;;		_lcd_puts
  1270 ;;		_measure_capacitance
  1271 ;;		_measure_inductance
  1272 ;;		_ser_init
  1273 ;;		_ser_puts
  1274 ;;		_timer0_init
  1275 ;;		_timer2_init
  1276 ;; This function is called by:
  1277 ;;		Startup code after reset
  1278 ;; This function uses a non-reentrant model
  1279 ;;
  1280                           
  1281                           	psect	text0
  1282  001A12                     __ptext0:
  1283                           	opt stack 0
  1284  001A12                     _main:
  1285                           	opt stack 23
  1286                           
  1287                           ;LC-meter.c: 117: bres = msecpart = msecs = seconds = 0;
  1288                           
  1289                           ;incstack = 0
  1290  001A12  0100               	movlb	0	; () banked
  1291  001A14  6BC4               	clrf	_seconds& (0+255),b	;volatile
  1292  001A16  6BC5               	clrf	(_seconds+1)& (0+255),b	;volatile
  1293  001A18  6BC6               	clrf	(_seconds+2)& (0+255),b	;volatile
  1294  001A1A  6BC7               	clrf	(_seconds+3)& (0+255),b	;volatile
  1295  001A1C  C0C4  F0C0         	movff	_seconds,_msecs	;volatile
  1296  001A20  C0C5  F0C1         	movff	_seconds+1,_msecs+1	;volatile
  1297  001A24  C0C6  F0C2         	movff	_seconds+2,_msecs+2	;volatile
  1298  001A28  C0C7  F0C3         	movff	_seconds+3,_msecs+3	;volatile
  1299  001A2C  C0C0  F0EF         	movff	_msecs,_msecpart	;volatile
  1300  001A30  C0C1  F0F0         	movff	_msecs+1,_msecpart+1	;volatile
  1301  001A34  C0EF  F0ED         	movff	_msecpart,_bres	;volatile
  1302  001A38  C0F0  F0EE         	movff	_msecpart+1,_bres+1	;volatile
  1303                           
  1304                           ;LC-meter.c: 119: CCal = 1000;
  1305  001A3C  6BE9               	clrf	_CCal& (0+255),b
  1306  001A3E  6BEA               	clrf	(_CCal+1)& (0+255),b
  1307  001A40  0E7A               	movlw	122
  1308  001A42  6FEB               	movwf	(_CCal+2)& (0+255),b
  1309  001A44  0E44               	movlw	68
  1310  001A46  6FEC               	movwf	(_CCal+3)& (0+255),b
  1311                           
  1312                           ; BSR set to: 0
  1313                           ;LC-meter.c: 122: CM1CON0 &= 0b11111000;
  1314  001A48  0EF8               	movlw	248
  1315  001A4A  1698               	andwf	3992,f,c	;volatile
  1316                           
  1317                           ; BSR set to: 0
  1318                           ;LC-meter.c: 123: CM1CON0 |= 0b00000101;
  1319  001A4C  0E05               	movlw	5
  1320  001A4E  1298               	iorwf	3992,f,c	;volatile
  1321                           
  1322                           ;LC-meter.c: 128: TRISA = 0b11001111;
  1323  001A50  0ECF               	movlw	207
  1324  001A52  6E92               	movwf	3986,c	;volatile
  1325                           
  1326                           ; BSR set to: 0
  1327                           ;LC-meter.c: 131: timer0_init(0b100 | 0x40);
  1328  001A54  0E44               	movlw	68
  1329  001A56  EC78  F011         	call	_timer0_init
  1330                           
  1331                           ; BSR set to: 0
  1332                           ;LC-meter.c: 138: INTCON2 &= ~0b10000000;
  1333  001A5A  9EF1               	bcf	intcon2,7,c	;volatile
  1334                           
  1335                           ; BSR set to: 0
  1336                           ;LC-meter.c: 144: TRISC &= ~0b00000100;
  1337  001A5C  9494               	bcf	3988,2,c	;volatile
  1338                           
  1339                           ; BSR set to: 0
  1340                           ;LC-meter.c: 145: LATC &= ~0b00000100; LATC |= (!!(1)) << 2;;
  1341  001A5E  948B               	bcf	3979,2,c	;volatile
  1342                           
  1343                           ; BSR set to: 0
  1344  001A60  848B               	bsf	3979,2,c	;volatile
  1345                           
  1346                           ; BSR set to: 0
  1347                           ;LC-meter.c: 150: timer2_init(0b000 | 0x80);
  1348  001A62  0E80               	movlw	128
  1349  001A64  EC85  F013         	call	_timer2_init
  1350                           
  1351                           ;LC-meter.c: 155: TRISC &= 0b10110101;
  1352  001A68  0EB5               	movlw	181
  1353  001A6A  1694               	andwf	3988,f,c	;volatile
  1354                           
  1355                           ;LC-meter.c: 167: lcd_init(1);
  1356  001A6C  0E01               	movlw	1
  1357  001A6E  ECB3  F013         	call	_lcd_init
  1358                           
  1359                           ; BSR set to: 0
  1360                           ;LC-meter.c: 168: lcd_begin(2, 1);
  1361  001A72  0E01               	movlw	1
  1362  001A74  6E08               	movwf	lcd_begin@dotsize,c
  1363  001A76  0E02               	movlw	2
  1364  001A78  EC6E  F00E         	call	_lcd_begin
  1365                           
  1366                           ;LC-meter.c: 171: TRISC |= (1 << 4);
  1367  001A7C  8894               	bsf	3988,4,c	;volatile
  1368                           
  1369                           ;LC-meter.c: 172: TRISC &= ~(1 << 5);
  1370  001A7E  9A94               	bcf	3988,5,c	;volatile
  1371                           
  1372                           ;LC-meter.c: 174: LATC &= ~(1 << 5);
  1373  001A80  9A8B               	bcf	3979,5,c	;volatile
  1374                           
  1375                           ;LC-meter.c: 175: delay10ms(50);
  1376  001A82  0E32               	movlw	50
  1377  001A84  ECAA  F014         	call	_delay10ms
  1378                           
  1379                           ;LC-meter.c: 176: LATC |= (1 << 5);
  1380  001A88  8A8B               	bsf	3979,5,c	;volatile
  1381                           
  1382                           ;LC-meter.c: 177: delay10ms(50);
  1383  001A8A  0E32               	movlw	50
  1384  001A8C  ECAA  F014         	call	_delay10ms
  1385                           
  1386                           ;LC-meter.c: 178: LATC &= ~(1 << 5);
  1387  001A90  9A8B               	bcf	3979,5,c	;volatile
  1388                           
  1389                           ;LC-meter.c: 179: delay10ms(50);
  1390  001A92  0E32               	movlw	50
  1391  001A94  ECAA  F014         	call	_delay10ms
  1392                           
  1393                           ;LC-meter.c: 180: LATC |= (1 << 5);
  1394  001A98  8A8B               	bsf	3979,5,c	;volatile
  1395                           
  1396                           ;LC-meter.c: 181: delay10ms(50);
  1397  001A9A  0E32               	movlw	50
  1398  001A9C  ECAA  F014         	call	_delay10ms
  1399                           
  1400                           ;LC-meter.c: 182: LATC &= ~(1 << 5);
  1401  001AA0  9A8B               	bcf	3979,5,c	;volatile
  1402                           
  1403                           ;LC-meter.c: 185: ser_init();
  1404  001AA2  EC30  F014         	call	_ser_init	;wreg free
  1405                           
  1406                           ; BSR set to: 0
  1407                           ;LC-meter.c: 192: INTCON |= 0xc0;
  1408  001AA6  0EC0               	movlw	192
  1409  001AA8  12F2               	iorwf	intcon,f,c	;volatile
  1410                           
  1411                           ; BSR set to: 0
  1412                           ;LC-meter.c: 202: lcd_gotoxy(0, 0);
  1413  001AAA  0E00               	movlw	0
  1414  001AAC  6A08               	clrf	lcd_gotoxy@row,c
  1415  001AAE  EC50  F013         	call	_lcd_gotoxy
  1416                           
  1417                           ;LC-meter.c: 204: lcd_puts("LC-meter ");
  1418  001AB2  0E75               	movlw	STR_28& (0+255)
  1419  001AB4  ECC9  F013         	call	_lcd_puts
  1420                           
  1421                           ;LC-meter.c: 205: format_double( CCal);
  1422  001AB8  C0E9  F091         	movff	_CCal,format_double@num
  1423  001ABC  C0EA  F092         	movff	_CCal+1,format_double@num+1
  1424  001AC0  C0EB  F093         	movff	_CCal+2,format_double@num+2
  1425  001AC4  C0EC  F094         	movff	_CCal+3,format_double@num+3
  1426  001AC8  EC87  F00A         	call	_format_double	;wreg free
  1427                           
  1428                           ;LC-meter.c: 211: delay10ms(200);
  1429  001ACC  0EC8               	movlw	200
  1430  001ACE  ECAA  F014         	call	_delay10ms
  1431                           
  1432                           ;LC-meter.c: 214: calibrate();
  1433  001AD2  ECFD  F00D         	call	_calibrate	;wreg free
  1434                           
  1435                           ;LC-meter.c: 216: lcd_clear();
  1436  001AD6  EC8E  F014         	call	_lcd_clear	;wreg free
  1437  001ADA                     l4204:
  1438                           
  1439                           ;LC-meter.c: 227: ser_puts("...\r\n");
  1440  001ADA  0E98               	movlw	STR_29& (0+255)
  1441  001ADC  EC64  F014         	call	_ser_puts
  1442                           
  1443                           ;LC-meter.c: 228: if((!!(PORTC & 0b10000)))
  1444  001AE0  A882               	btfss	3970,4,c	;volatile
  1445  001AE2  D003               	goto	l4210
  1446                           
  1447                           ;LC-meter.c: 229: measure_capacitance();
  1448  001AE4  ECA1  F006         	call	_measure_capacitance	;wreg free
  1449  001AE8  D002               	goto	l539
  1450  001AEA                     l4210:
  1451                           
  1452                           ;LC-meter.c: 230: else
  1453                           ;LC-meter.c: 231: measure_inductance();
  1454  001AEA  EC70  F004         	call	_measure_inductance	;wreg free
  1455  001AEE                     l539:
  1456                           
  1457                           ;LC-meter.c: 233: indicator(1);
  1458  001AEE  0E01               	movlw	1
  1459  001AF0  EC73  F014         	call	_indicator
  1460                           
  1461                           ;LC-meter.c: 234: delay10ms(30);
  1462  001AF4  0E1E               	movlw	30
  1463  001AF6  ECAA  F014         	call	_delay10ms
  1464                           
  1465                           ;LC-meter.c: 235: indicator(0);
  1466  001AFA  0E00               	movlw	0
  1467  001AFC  EC73  F014         	call	_indicator
  1468                           
  1469                           ;LC-meter.c: 236: delay10ms(20);
  1470  001B00  0E14               	movlw	20
  1471  001B02  ECAA  F014         	call	_delay10ms
  1472                           
  1473                           ;LC-meter.c: 237: }
  1474  001B06  D7E9               	goto	l4204
  1475  001B08                     __end_of_main:
  1476                           	opt stack 0
  1477                           tblptru	equ	0xFF8
  1478                           tblptrh	equ	0xFF7
  1479                           tblptrl	equ	0xFF6
  1480                           tablat	equ	0xFF5
  1481                           prodl	equ	0xFF3
  1482                           intcon	equ	0xFF2
  1483                           intcon2	equ	0xFF1
  1484                           postinc0	equ	0xFEE
  1485                           wreg	equ	0xFE8
  1486                           postdec1	equ	0xFE5
  1487                           fsr1l	equ	0xFE1
  1488                           indf2	equ	0xFDF
  1489                           postinc2	equ	0xFDE
  1490                           postdec2	equ	0xFDD
  1491                           fsr2h	equ	0xFDA
  1492                           fsr2l	equ	0xFD9
  1493                           status	equ	0xFD8
  1494                           
  1495 ;; *************** function _timer2_init *****************
  1496 ;; Defined at:
  1497 ;;		line 125 in file "../../../lib/timer.c"
  1498 ;; Parameters:    Size  Location     Type
  1499 ;;  ps_mode         1    wreg     unsigned char 
  1500 ;; Auto vars:     Size  Location     Type
  1501 ;;  ps_mode         1    6[COMRAM] unsigned char 
  1502 ;;  postscaler      1    0        unsigned char 
  1503 ;;  ps              1    4[COMRAM] unsigned char 
  1504 ;; Return value:  Size  Location     Type
  1505 ;;		None               void
  1506 ;; Registers used:
  1507 ;;		wreg, status,2, status,0
  1508 ;; Tracked objects:
  1509 ;;		On entry : F/0
  1510 ;;		On exit  : 0/0
  1511 ;;		Unchanged: 0/0
  1512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1513 ;;      Params:         0       0       0       0       0       0       0       0       0
  1514 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1515 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1516 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1517 ;;Total ram usage:        4 bytes
  1518 ;; Hardware stack levels used:    1
  1519 ;; Hardware stack levels required when called:    1
  1520 ;; This function calls:
  1521 ;;		Nothing
  1522 ;; This function is called by:
  1523 ;;		_main
  1524 ;; This function uses a non-reentrant model
  1525 ;;
  1526                           
  1527                           	psect	text1
  1528  00270A                     __ptext1:
  1529                           	opt stack 0
  1530  00270A                     _timer2_init:
  1531                           	opt stack 29
  1532                           
  1533                           ;incstack = 0
  1534                           ;timer2_init@ps_mode stored from wreg
  1535  00270A  6E07               	movwf	timer2_init@ps_mode,c
  1536                           
  1537                           ; BSR set to: 0
  1538                           ;timer.c: 126: uint8_t ps = ps_mode & 0b1111;
  1539  00270C  5007               	movf	timer2_init@ps_mode,w,c
  1540  00270E  0B0F               	andlw	15
  1541  002710  6E05               	movwf	timer2_init@ps,c
  1542                           
  1543                           ; BSR set to: 0
  1544                           ;timer.c: 130: T2CON &= ~0b01111111;
  1545  002712  0E80               	movlw	128
  1546  002714  16BA               	andwf	4026,f,c	;volatile
  1547                           
  1548                           ;timer.c: 132: T2CON |= (postscaler & 0b1111) << 3;
  1549  002716  50BA               	movf	4026,w,c	;volatile
  1550                           
  1551                           ;timer.c: 133: T2CON |= (ps & 0b11);
  1552  002718  5005               	movf	timer2_init@ps,w,c
  1553  00271A  0B03               	andlw	3
  1554  00271C  12BA               	iorwf	4026,f,c	;volatile
  1555                           
  1556                           ; BSR set to: 0
  1557                           ;timer.c: 135: TMR2 = 0;
  1558  00271E  6ABC               	clrf	4028,c	;volatile
  1559                           
  1560                           ; BSR set to: 0
  1561                           ;timer.c: 137: T2CON |= 0b100;
  1562  002720  84BA               	bsf	4026,2,c	;volatile
  1563                           
  1564                           ; BSR set to: 0
  1565                           ;timer.c: 140: PIR1 &= ~0b10;
  1566  002722  929E               	bcf	3998,1,c	;volatile
  1567                           
  1568                           ;timer.c: 141: PIE1 = (!!(ps_mode & 0x80)) << 1;
  1569  002724  AE07               	btfss	timer2_init@ps_mode,7,c
  1570  002726  D003               	goto	u2390
  1571  002728  6A04               	clrf	??_timer2_init& (0+255),c
  1572  00272A  2A04               	incf	??_timer2_init& (0+255),f,c
  1573  00272C  D001               	goto	u2408
  1574  00272E                     u2390:
  1575  00272E  6A04               	clrf	??_timer2_init& (0+255),c
  1576  002730                     u2408:
  1577  002730  90D8               	bcf	status,0,c
  1578  002732  3404               	rlcf	??_timer2_init,w,c
  1579  002734  6E9D               	movwf	3997,c	;volatile
  1580  002736  0012               	return		;funcret
  1581  002738                     __end_of_timer2_init:
  1582                           	opt stack 0
  1583                           tblptru	equ	0xFF8
  1584                           tblptrh	equ	0xFF7
  1585                           tblptrl	equ	0xFF6
  1586                           tablat	equ	0xFF5
  1587                           prodl	equ	0xFF3
  1588                           intcon	equ	0xFF2
  1589                           intcon2	equ	0xFF1
  1590                           postinc0	equ	0xFEE
  1591                           wreg	equ	0xFE8
  1592                           postdec1	equ	0xFE5
  1593                           fsr1l	equ	0xFE1
  1594                           indf2	equ	0xFDF
  1595                           postinc2	equ	0xFDE
  1596                           postdec2	equ	0xFDD
  1597                           fsr2h	equ	0xFDA
  1598                           fsr2l	equ	0xFD9
  1599                           status	equ	0xFD8
  1600                           
  1601 ;; *************** function _timer0_init *****************
  1602 ;; Defined at:
  1603 ;;		line 27 in file "../../../lib/timer.c"
  1604 ;; Parameters:    Size  Location     Type
  1605 ;;  ps_mode         1    wreg     unsigned char 
  1606 ;; Auto vars:     Size  Location     Type
  1607 ;;  ps_mode         1   12[COMRAM] unsigned char 
  1608 ;;  prescaler       1   11[COMRAM] unsigned char 
  1609 ;; Return value:  Size  Location     Type
  1610 ;;		None               void
  1611 ;; Registers used:
  1612 ;;		wreg, status,2, status,0
  1613 ;; Tracked objects:
  1614 ;;		On entry : F/0
  1615 ;;		On exit  : F/0
  1616 ;;		Unchanged: F/0
  1617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1618 ;;      Params:         0       0       0       0       0       0       0       0       0
  1619 ;;      Locals:        10       0       0       0       0       0       0       0       0
  1620 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1621 ;;      Totals:        10       0       0       0       0       0       0       0       0
  1622 ;;Total ram usage:       10 bytes
  1623 ;; Hardware stack levels used:    1
  1624 ;; Hardware stack levels required when called:    1
  1625 ;; This function calls:
  1626 ;;		Nothing
  1627 ;; This function is called by:
  1628 ;;		_main
  1629 ;; This function uses a non-reentrant model
  1630 ;;
  1631                           
  1632                           	psect	text2
  1633  0022F0                     __ptext2:
  1634                           	opt stack 0
  1635  0022F0                     _timer0_init:
  1636                           	opt stack 29
  1637                           
  1638                           ;incstack = 0
  1639                           ;timer0_init@ps_mode stored from wreg
  1640  0022F0  6E0D               	movwf	timer0_init@ps_mode,c
  1641                           
  1642                           ; BSR set to: 0
  1643                           ;timer.c: 28: uint8_t prescaler = ps_mode & 0b1111;
  1644  0022F2  500D               	movf	timer0_init@ps_mode,w,c
  1645  0022F4  0B0F               	andlw	15
  1646  0022F6  6E0C               	movwf	timer0_init@prescaler,c
  1647                           
  1648                           ; BSR set to: 0
  1649                           ;timer.c: 30: TMR0 = 0;
  1650  0022F8  6AD6               	clrf	4054,c	;volatile
  1651  0022FA  6AD7               	clrf	4055,c	;volatile
  1652                           
  1653                           ; BSR set to: 0
  1654                           ;timer.c: 33: T0CON |= (!!(ps_mode & 0x40)) ? 0x20 : 0x00;
  1655  0022FC  BC0D               	btfsc	timer0_init@ps_mode,6,c
  1656  0022FE  D003               	goto	l3204
  1657                           
  1658                           ; BSR set to: 0
  1659  002300  6A04               	clrf	_timer0_init$152,c
  1660  002302  6A05               	clrf	_timer0_init$152+1,c
  1661  002304  D003               	goto	l3206
  1662  002306                     l3204:
  1663                           
  1664                           ; BSR set to: 0
  1665  002306  6A05               	clrf	_timer0_init$152+1,c
  1666  002308  0E20               	movlw	32
  1667  00230A  6E04               	movwf	_timer0_init$152,c
  1668  00230C                     l3206:
  1669                           
  1670                           ; BSR set to: 0
  1671  00230C  5004               	movf	_timer0_init$152,w,c
  1672  00230E  12D5               	iorwf	4053,f,c	;volatile
  1673                           
  1674                           ; BSR set to: 0
  1675                           ;timer.c: 36: T0CON |= (!!(ps_mode & 0x10)) ? 0x10 : 0x00;
  1676  002310  B80D               	btfsc	timer0_init@ps_mode,4,c
  1677  002312  D003               	goto	l3212
  1678                           
  1679                           ; BSR set to: 0
  1680  002314  6A06               	clrf	_timer0_init$153,c
  1681  002316  6A07               	clrf	_timer0_init$153+1,c
  1682  002318  D003               	goto	l3214
  1683  00231A                     l3212:
  1684                           
  1685                           ; BSR set to: 0
  1686  00231A  6A07               	clrf	_timer0_init$153+1,c
  1687  00231C  0E10               	movlw	16
  1688  00231E  6E06               	movwf	_timer0_init$153,c
  1689  002320                     l3214:
  1690                           
  1691                           ; BSR set to: 0
  1692  002320  5006               	movf	_timer0_init$153,w,c
  1693  002322  12D5               	iorwf	4053,f,c	;volatile
  1694                           
  1695                           ; BSR set to: 0
  1696                           ;timer.c: 39: T0CON &= (!!prescaler) ? ~0x08 : ~0x00;
  1697  002324  500C               	movf	timer0_init@prescaler,w,c
  1698  002326  E103               	bnz	l3220
  1699                           
  1700                           ; BSR set to: 0
  1701  002328  6808               	setf	_timer0_init$154,c
  1702  00232A  6809               	setf	_timer0_init$154+1,c
  1703  00232C  D003               	goto	l3222
  1704  00232E                     l3220:
  1705                           
  1706                           ; BSR set to: 0
  1707  00232E  6809               	setf	_timer0_init$154+1,c
  1708  002330  0EF7               	movlw	247
  1709  002332  6E08               	movwf	_timer0_init$154,c
  1710  002334                     l3222:
  1711                           
  1712                           ; BSR set to: 0
  1713  002334  5008               	movf	_timer0_init$154,w,c
  1714  002336  16D5               	andwf	4053,f,c	;volatile
  1715                           
  1716                           ; BSR set to: 0
  1717                           ;timer.c: 41: T0CON &= ~0b111;
  1718  002338  0EF8               	movlw	248
  1719  00233A  16D5               	andwf	4053,f,c	;volatile
  1720                           
  1721                           ;timer.c: 43: if(prescaler > 0) {
  1722  00233C  500C               	movf	timer0_init@prescaler,w,c
  1723  00233E  E003               	bz	l3228
  1724                           
  1725                           ; BSR set to: 0
  1726                           ;timer.c: 44: T0CON |= (prescaler - 1) & 0b111;
  1727  002340  040C               	decf	timer0_init@prescaler,w,c
  1728  002342  0B07               	andlw	7
  1729  002344  12D5               	iorwf	4053,f,c	;volatile
  1730  002346                     l3228:
  1731                           
  1732                           ; BSR set to: 0
  1733                           ;timer.c: 50: }
  1734                           ;timer.c: 54: INTCON &= ~0x40;
  1735  002346  9CF2               	bcf	intcon,6,c	;volatile
  1736                           
  1737                           ; BSR set to: 0
  1738                           ;timer.c: 55: INTCON |= (!!(ps_mode & 0x80)) ? 0x20 : 0x00;
  1739  002348  BE0D               	btfsc	timer0_init@ps_mode,7,c
  1740  00234A  D003               	goto	l3234
  1741                           
  1742                           ; BSR set to: 0
  1743  00234C  6A0A               	clrf	_timer0_init$155,c
  1744  00234E  6A0B               	clrf	_timer0_init$155+1,c
  1745  002350  D003               	goto	l3236
  1746  002352                     l3234:
  1747                           
  1748                           ; BSR set to: 0
  1749  002352  6A0B               	clrf	_timer0_init$155+1,c
  1750  002354  0E20               	movlw	32
  1751  002356  6E0A               	movwf	_timer0_init$155,c
  1752  002358                     l3236:
  1753                           
  1754                           ; BSR set to: 0
  1755  002358  500A               	movf	_timer0_init$155,w,c
  1756  00235A  12F2               	iorwf	intcon,f,c	;volatile
  1757                           
  1758                           ; BSR set to: 0
  1759  00235C  0012               	return		;funcret
  1760  00235E                     __end_of_timer0_init:
  1761                           	opt stack 0
  1762                           tblptru	equ	0xFF8
  1763                           tblptrh	equ	0xFF7
  1764                           tblptrl	equ	0xFF6
  1765                           tablat	equ	0xFF5
  1766                           prodl	equ	0xFF3
  1767                           intcon	equ	0xFF2
  1768                           intcon2	equ	0xFF1
  1769                           postinc0	equ	0xFEE
  1770                           wreg	equ	0xFE8
  1771                           postdec1	equ	0xFE5
  1772                           fsr1l	equ	0xFE1
  1773                           indf2	equ	0xFDF
  1774                           postinc2	equ	0xFDE
  1775                           postdec2	equ	0xFDD
  1776                           fsr2h	equ	0xFDA
  1777                           fsr2l	equ	0xFD9
  1778                           status	equ	0xFD8
  1779                           
  1780 ;; *************** function _ser_init *****************
  1781 ;; Defined at:
  1782 ;;		line 130 in file "../../../lib/ser.c"
  1783 ;; Parameters:    Size  Location     Type
  1784 ;;		None
  1785 ;; Auto vars:     Size  Location     Type
  1786 ;;		None
  1787 ;; Return value:  Size  Location     Type
  1788 ;;		None               void
  1789 ;; Registers used:
  1790 ;;		wreg, status,2
  1791 ;; Tracked objects:
  1792 ;;		On entry : 0/0
  1793 ;;		On exit  : F/0
  1794 ;;		Unchanged: 0/0
  1795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1796 ;;      Params:         0       0       0       0       0       0       0       0       0
  1797 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1798 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1799 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1800 ;;Total ram usage:        0 bytes
  1801 ;; Hardware stack levels used:    1
  1802 ;; Hardware stack levels required when called:    1
  1803 ;; This function calls:
  1804 ;;		Nothing
  1805 ;; This function is called by:
  1806 ;;		_main
  1807 ;; This function uses a non-reentrant model
  1808 ;;
  1809                           
  1810                           	psect	text3
  1811  002860                     __ptext3:
  1812                           	opt stack 0
  1813  002860                     _ser_init:
  1814                           	opt stack 29
  1815                           
  1816                           ;ser.c: 133: TRISC6 = 1;
  1817                           
  1818                           ; BSR set to: 0
  1819                           ;incstack = 0
  1820  002860  8C94               	bsf	3988,6,c	;volatile
  1821                           
  1822                           ;ser.c: 134: LATC7 = 1;
  1823  002862  8E8B               	bsf	3979,7,c	;volatile
  1824                           
  1825                           ;ser.c: 136: BRGH = 1;
  1826  002864  84AC               	bsf	4012,2,c	;volatile
  1827                           
  1828                           ;ser.c: 142: SPBRG = ser_brg;
  1829  002866  0E1F               	movlw	31
  1830  002868  6EAF               	movwf	4015,c	;volatile
  1831                           
  1832                           ;ser.c: 145: TX9 = 0;
  1833  00286A  9CAC               	bcf	4012,6,c	;volatile
  1834                           
  1835                           ;ser.c: 146: RX9 = 0;
  1836  00286C  9CAB               	bcf	4011,6,c	;volatile
  1837                           
  1838                           ;ser.c: 148: SYNC = 0;
  1839  00286E  98AC               	bcf	4012,4,c	;volatile
  1840                           
  1841                           ;ser.c: 149: SPEN = 1;
  1842  002870  8EAB               	bsf	4011,7,c	;volatile
  1843                           
  1844                           ;ser.c: 150: CREN = 1;
  1845  002872  88AB               	bsf	4011,4,c	;volatile
  1846                           
  1847                           ;ser.c: 151: TXIE = 0;
  1848  002874  989D               	bcf	3997,4,c	;volatile
  1849                           
  1850                           ;ser.c: 153: TXEN = 1;
  1851  002876  8AAC               	bsf	4012,5,c	;volatile
  1852                           
  1853                           ;ser.c: 154: PEIE = 1;
  1854  002878  8CF2               	bsf	intcon,6,c	;volatile
  1855                           
  1856                           ;ser.c: 156: rxiptr = rxoptr = txiptr = txoptr = 0;
  1857  00287A  6A5C               	clrf	_txoptr,c	;volatile
  1858  00287C  6A5B               	clrf	_txiptr,c	;volatile
  1859  00287E  0100               	movlb	0	; () banked
  1860  002880  6BD2               	clrf	_rxoptr& (0+255),b	;volatile
  1861  002882  6BD1               	clrf	_rxiptr& (0+255),b	;volatile
  1862                           
  1863                           ; BSR set to: 0
  1864  002884  0012               	return		;funcret
  1865  002886                     __end_of_ser_init:
  1866                           	opt stack 0
  1867                           tblptru	equ	0xFF8
  1868                           tblptrh	equ	0xFF7
  1869                           tblptrl	equ	0xFF6
  1870                           tablat	equ	0xFF5
  1871                           prodl	equ	0xFF3
  1872                           intcon	equ	0xFF2
  1873                           intcon2	equ	0xFF1
  1874                           postinc0	equ	0xFEE
  1875                           wreg	equ	0xFE8
  1876                           postdec1	equ	0xFE5
  1877                           fsr1l	equ	0xFE1
  1878                           indf2	equ	0xFDF
  1879                           postinc2	equ	0xFDE
  1880                           postdec2	equ	0xFDD
  1881                           fsr2h	equ	0xFDA
  1882                           fsr2l	equ	0xFD9
  1883                           status	equ	0xFD8
  1884                           
  1885 ;; *************** function _measure_inductance *****************
  1886 ;; Defined at:
  1887 ;;		line 196 in file "../../../src/measure.c"
  1888 ;; Parameters:    Size  Location     Type
  1889 ;;		None
  1890 ;; Auto vars:     Size  Location     Type
  1891 ;;  Lin             4   41[BANK0 ] unsigned char 
  1892 ;;  denominator     4    6[BANK0 ] unsigned char 
  1893 ;;  numerator       4    2[BANK0 ] unsigned char 
  1894 ;;  var             2   39[BANK0 ] unsigned int 
  1895 ;;  unit            1   26[BANK0 ] unsigned char 
  1896 ;; Return value:  Size  Location     Type
  1897 ;;		None               void
  1898 ;; Registers used:
  1899 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1900 ;; Tracked objects:
  1901 ;;		On entry : 0/0
  1902 ;;		On exit  : 0/0
  1903 ;;		Unchanged: 0/0
  1904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1905 ;;      Params:         0       0       0       0       0       0       0       0       0
  1906 ;;      Locals:         0      43       0       0       0       0       0       0       0
  1907 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1908 ;;      Totals:         0      43       0       0       0       0       0       0       0
  1909 ;;Total ram usage:       43 bytes
  1910 ;; Hardware stack levels used:    1
  1911 ;; Hardware stack levels required when called:    6
  1912 ;; This function calls:
  1913 ;;		___fldiv
  1914 ;;		___flge
  1915 ;;		___flmul
  1916 ;;		___flsub
  1917 ;;		___fltol
  1918 ;;		___lwtofl
  1919 ;;		_lcd_gotoxy
  1920 ;;		_measure_freq
  1921 ;;		_print_reading
  1922 ;;		_print_unit
  1923 ;;		_put_str
  1924 ;; This function is called by:
  1925 ;;		_main
  1926 ;; This function uses a non-reentrant model
  1927 ;;
  1928                           
  1929                           	psect	text4
  1930  0008E0                     __ptext4:
  1931                           	opt stack 0
  1932  0008E0                     _measure_inductance:
  1933                           	opt stack 24
  1934                           
  1935                           ;measure.c: 197: uint8_t unit;
  1936                           ;measure.c: 198: uint16_t var;
  1937                           ;measure.c: 200: double Lin, numerator, denominator;
  1938                           ;measure.c: 203: lcd_gotoxy(0, 0);
  1939                           
  1940                           ; BSR set to: 0
  1941                           ;incstack = 0
  1942  0008E0  0E00               	movlw	0
  1943  0008E2  6A08               	clrf	lcd_gotoxy@row,c
  1944  0008E4  EC50  F013         	call	_lcd_gotoxy
  1945                           
  1946                           ;measure.c: 204: put_str("Inductivity ");
  1947  0008E8  0E5C               	movlw	STR_15& (0+255)
  1948  0008EA  ECDE  F013         	call	_put_str
  1949                           
  1950                           ;measure.c: 206: var = measure_freq();
  1951  0008EE  EC8C  F00C         	call	_measure_freq	;wreg free
  1952  0008F2  C036  F087         	movff	?_measure_freq,measure_inductance@var
  1953  0008F6  C037  F088         	movff	?_measure_freq+1,measure_inductance@var+1
  1954                           
  1955                           ;measure.c: 208: F3 = (double)var;
  1956  0008FA  C087  F03B         	movff	measure_inductance@var,___lwtofl@c
  1957  0008FE  C088  F03C         	movff	measure_inductance@var+1,___lwtofl@c+1
  1958  000902  ECF3  F013         	call	___lwtofl	;wreg free
  1959  000906  C03B  F0BC         	movff	?___lwtofl,_F3
  1960  00090A  C03C  F0BD         	movff	?___lwtofl+1,_F3+1
  1961  00090E  C03D  F0BE         	movff	?___lwtofl+2,_F3+2
  1962  000912  C03E  F0BF         	movff	?___lwtofl+3,_F3+3
  1963                           
  1964                           ;measure.c: 209: if(F3 > F1)
  1965  000916  EC62  F008         	call	PL6	;call to abstracted procedure
  1966  00091A  EC39  F012         	call	___flge	;wreg free
  1967  00091E  E208               	bc	l4114
  1968                           
  1969                           ;measure.c: 210: F3 = F1;
  1970  000920  C0E5  F0BC         	movff	_F1,_F3
  1971  000924  C0E6  F0BD         	movff	_F1+1,_F3+1
  1972  000928  C0E7  F0BE         	movff	_F1+2,_F3+2
  1973  00092C  C0E8  F0BF         	movff	_F1+3,_F3+3
  1974  000930                     l4114:
  1975                           
  1976                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1977  000930  C0B8  F03C         	movff	_F2,___flsub@f2
  1978  000934  C0B9  F03D         	movff	_F2+1,___flsub@f2+1
  1979  000938  C0BA  F03E         	movff	_F2+2,___flsub@f2+2
  1980  00093C  C0BB  F03F         	movff	_F2+3,___flsub@f2+3
  1981  000940  C0B8  F038         	movff	_F2,___flsub@f1
  1982  000944  C0B9  F039         	movff	_F2+1,___flsub@f1+1
  1983  000948  C0BA  F03A         	movff	_F2+2,___flsub@f1+2
  1984  00094C  C0BB  F03B         	movff	_F2+3,___flsub@f1+3
  1985  000950  ECF2  F012         	call	___flsub	;wreg free
  1986  000954  C038  F06A         	movff	?___flsub,_measure_inductance$1096
  1987  000958  C039  F06B         	movff	?___flsub+1,_measure_inductance$1096+1
  1988  00095C  C03A  F06C         	movff	?___flsub+2,_measure_inductance$1096+2
  1989  000960  C03B  F06D         	movff	?___flsub+3,_measure_inductance$1096+3
  1990                           
  1991                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1992  000964  C06A  F03C         	movff	_measure_inductance$1096,___flsub@f2
  1993  000968  C06B  F03D         	movff	_measure_inductance$1096+1,___flsub@f2+1
  1994  00096C  C06C  F03E         	movff	_measure_inductance$1096+2,___flsub@f2+2
  1995  000970  C06D  F03F         	movff	_measure_inductance$1096+3,___flsub@f2+3
  1996  000974  D9CA               	call	PL2	;call to abstracted procedure
  1997  000976  ECD8  F00E         	call	___flmul	;wreg free
  1998  00097A  C01D  F038         	movff	?___flmul,___flsub@f1
  1999  00097E  C01E  F039         	movff	?___flmul+1,___flsub@f1+1
  2000  000982  C01F  F03A         	movff	?___flmul+2,___flsub@f1+2
  2001  000986  C020  F03B         	movff	?___flmul+3,___flsub@f1+3
  2002  00098A  ECF2  F012         	call	___flsub	;wreg free
  2003  00098E  C038  F07B         	movff	?___flsub,_measure_inductance$1097
  2004  000992  C039  F07C         	movff	?___flsub+1,_measure_inductance$1097+1
  2005  000996  C03A  F07D         	movff	?___flsub+2,_measure_inductance$1097+2
  2006  00099A  C03B  F07E         	movff	?___flsub+3,_measure_inductance$1097+3
  2007                           
  2008                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  2009  00099E  EC51  F008         	call	PL4	;call to abstracted procedure
  2010  0009A2  ECD8  F00E         	call	___flmul	;wreg free
  2011  0009A6  C01D  F03C         	movff	?___flmul,___flsub@f2
  2012  0009AA  C01E  F03D         	movff	?___flmul+1,___flsub@f2+1
  2013  0009AE  C01F  F03E         	movff	?___flmul+2,___flsub@f2+2
  2014  0009B2  C020  F03F         	movff	?___flmul+3,___flsub@f2+3
  2015  0009B6  D9A9               	call	PL2	;call to abstracted procedure
  2016  0009B8  ECD8  F00E         	call	___flmul	;wreg free
  2017  0009BC  C01D  F038         	movff	?___flmul,___flsub@f1
  2018  0009C0  C01E  F039         	movff	?___flmul+1,___flsub@f1+1
  2019  0009C4  C01F  F03A         	movff	?___flmul+2,___flsub@f1+2
  2020  0009C8  C020  F03B         	movff	?___flmul+3,___flsub@f1+3
  2021  0009CC  ECF2  F012         	call	___flsub	;wreg free
  2022  0009D0  C038  F07F         	movff	?___flsub,_measure_inductance$1098
  2023  0009D4  C039  F080         	movff	?___flsub+1,_measure_inductance$1098+1
  2024  0009D8  C03A  F081         	movff	?___flsub+2,_measure_inductance$1098+2
  2025  0009DC  C03B  F082         	movff	?___flsub+3,_measure_inductance$1098+3
  2026                           
  2027                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  2028  0009E0  C07B  F021         	movff	_measure_inductance$1097,___flmul@f2
  2029  0009E4  C07C  F022         	movff	_measure_inductance$1097+1,___flmul@f2+1
  2030  0009E8  C07D  F023         	movff	_measure_inductance$1097+2,___flmul@f2+2
  2031  0009EC  C07E  F024         	movff	_measure_inductance$1097+3,___flmul@f2+3
  2032  0009F0  C07F  F01D         	movff	_measure_inductance$1098,___flmul@f1
  2033  0009F4  C080  F01E         	movff	_measure_inductance$1098+1,___flmul@f1+1
  2034  0009F8  C081  F01F         	movff	_measure_inductance$1098+2,___flmul@f1+2
  2035  0009FC  C082  F020         	movff	_measure_inductance$1098+3,___flmul@f1+3
  2036  000A00  ECD8  F00E         	call	___flmul	;wreg free
  2037  000A04  C01D  F083         	movff	?___flmul,_measure_inductance$1099
  2038  000A08  C01E  F084         	movff	?___flmul+1,_measure_inductance$1099+1
  2039  000A0C  C01F  F085         	movff	?___flmul+2,_measure_inductance$1099+2
  2040  000A10  C020  F086         	movff	?___flmul+3,_measure_inductance$1099+3
  2041                           
  2042                           ;measure.c: 212: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  2043  000A14  C083  F01D         	movff	_measure_inductance$1099,___flmul@f1
  2044  000A18  C084  F01E         	movff	_measure_inductance$1099+1,___flmul@f1+1
  2045  000A1C  C085  F01F         	movff	_measure_inductance$1099+2,___flmul@f1+2
  2046  000A20  C086  F020         	movff	_measure_inductance$1099+3,___flmul@f1+3
  2047  000A24  0E00               	movlw	0
  2048  000A26  6E21               	movwf	___flmul@f2,c
  2049  000A28  0E40               	movlw	64
  2050  000A2A  6E22               	movwf	___flmul@f2+1,c
  2051  000A2C  0E1C               	movlw	28
  2052  000A2E  6E23               	movwf	___flmul@f2+2,c
  2053  000A30  0E46               	movlw	70
  2054  000A32  6E24               	movwf	___flmul@f2+3,c
  2055  000A34  ECD8  F00E         	call	___flmul	;wreg free
  2056  000A38  C01D  F062         	movff	?___flmul,measure_inductance@numerator
  2057  000A3C  C01E  F063         	movff	?___flmul+1,measure_inductance@numerator+1
  2058  000A40  C01F  F064         	movff	?___flmul+2,measure_inductance@numerator+2
  2059  000A44  C020  F065         	movff	?___flmul+3,measure_inductance@numerator+3
  2060                           
  2061                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2062  000A48  D960               	call	PL2	;call to abstracted procedure
  2063  000A4A  ECD8  F00E         	call	___flmul	;wreg free
  2064  000A4E  C01D  F06E         	movff	?___flmul,_measure_inductance$1100
  2065  000A52  C01E  F06F         	movff	?___flmul+1,_measure_inductance$1100+1
  2066  000A56  C01F  F070         	movff	?___flmul+2,_measure_inductance$1100+2
  2067  000A5A  C020  F071         	movff	?___flmul+3,_measure_inductance$1100+3
  2068                           
  2069                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2070  000A5E  C0B8  F021         	movff	_F2,___flmul@f2
  2071  000A62  C0B9  F022         	movff	_F2+1,___flmul@f2+1
  2072  000A66  C0BA  F023         	movff	_F2+2,___flmul@f2+2
  2073  000A6A  C0BB  F024         	movff	_F2+3,___flmul@f2+3
  2074  000A6E  C06E  F01D         	movff	_measure_inductance$1100,___flmul@f1
  2075  000A72  C06F  F01E         	movff	_measure_inductance$1100+1,___flmul@f1+1
  2076  000A76  C070  F01F         	movff	_measure_inductance$1100+2,___flmul@f1+2
  2077  000A7A  C071  F020         	movff	_measure_inductance$1100+3,___flmul@f1+3
  2078  000A7E  ECD8  F00E         	call	___flmul	;wreg free
  2079  000A82  C01D  F07B         	movff	?___flmul,_measure_inductance$1097
  2080  000A86  C01E  F07C         	movff	?___flmul+1,_measure_inductance$1097+1
  2081  000A8A  C01F  F07D         	movff	?___flmul+2,_measure_inductance$1097+2
  2082  000A8E  C020  F07E         	movff	?___flmul+3,_measure_inductance$1097+3
  2083                           
  2084                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2085  000A92  C0B8  F021         	movff	_F2,___flmul@f2
  2086  000A96  C0B9  F022         	movff	_F2+1,___flmul@f2+1
  2087  000A9A  C0BA  F023         	movff	_F2+2,___flmul@f2+2
  2088  000A9E  C0BB  F024         	movff	_F2+3,___flmul@f2+3
  2089  000AA2  C07B  F01D         	movff	_measure_inductance$1097,___flmul@f1
  2090  000AA6  C07C  F01E         	movff	_measure_inductance$1097+1,___flmul@f1+1
  2091  000AAA  C07D  F01F         	movff	_measure_inductance$1097+2,___flmul@f1+2
  2092  000AAE  C07E  F020         	movff	_measure_inductance$1097+3,___flmul@f1+3
  2093  000AB2  ECD8  F00E         	call	___flmul	;wreg free
  2094  000AB6  C01D  F07F         	movff	?___flmul,_measure_inductance$1098
  2095  000ABA  C01E  F080         	movff	?___flmul+1,_measure_inductance$1098+1
  2096  000ABE  C01F  F081         	movff	?___flmul+2,_measure_inductance$1098+2
  2097  000AC2  C020  F082         	movff	?___flmul+3,_measure_inductance$1098+3
  2098                           
  2099                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2100  000AC6  C0BC  F021         	movff	_F3,___flmul@f2
  2101  000ACA  C0BD  F022         	movff	_F3+1,___flmul@f2+1
  2102  000ACE  C0BE  F023         	movff	_F3+2,___flmul@f2+2
  2103  000AD2  C0BF  F024         	movff	_F3+3,___flmul@f2+3
  2104  000AD6  C07F  F01D         	movff	_measure_inductance$1098,___flmul@f1
  2105  000ADA  C080  F01E         	movff	_measure_inductance$1098+1,___flmul@f1+1
  2106  000ADE  C081  F01F         	movff	_measure_inductance$1098+2,___flmul@f1+2
  2107  000AE2  C082  F020         	movff	_measure_inductance$1098+3,___flmul@f1+3
  2108  000AE6  ECD8  F00E         	call	___flmul	;wreg free
  2109  000AEA  C01D  F083         	movff	?___flmul,_measure_inductance$1099
  2110  000AEE  C01E  F084         	movff	?___flmul+1,_measure_inductance$1099+1
  2111  000AF2  C01F  F085         	movff	?___flmul+2,_measure_inductance$1099+2
  2112  000AF6  C020  F086         	movff	?___flmul+3,_measure_inductance$1099+3
  2113                           
  2114                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2115  000AFA  C0BC  F021         	movff	_F3,___flmul@f2
  2116  000AFE  C0BD  F022         	movff	_F3+1,___flmul@f2+1
  2117  000B02  C0BE  F023         	movff	_F3+2,___flmul@f2+2
  2118  000B06  C0BF  F024         	movff	_F3+3,___flmul@f2+3
  2119  000B0A  C083  F01D         	movff	_measure_inductance$1099,___flmul@f1
  2120  000B0E  C084  F01E         	movff	_measure_inductance$1099+1,___flmul@f1+1
  2121  000B12  C085  F01F         	movff	_measure_inductance$1099+2,___flmul@f1+2
  2122  000B16  C086  F020         	movff	_measure_inductance$1099+3,___flmul@f1+3
  2123  000B1A  ECD8  F00E         	call	___flmul	;wreg free
  2124  000B1E  C01D  F072         	movff	?___flmul,_measure_inductance$1101
  2125  000B22  C01E  F073         	movff	?___flmul+1,_measure_inductance$1101+1
  2126  000B26  C01F  F074         	movff	?___flmul+2,_measure_inductance$1101+2
  2127  000B2A  C020  F075         	movff	?___flmul+3,_measure_inductance$1101+3
  2128                           
  2129                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2130  000B2E  C0E9  F021         	movff	_CCal,___flmul@f2
  2131  000B32  C0EA  F022         	movff	_CCal+1,___flmul@f2+1
  2132  000B36  C0EB  F023         	movff	_CCal+2,___flmul@f2+2
  2133  000B3A  C0EC  F024         	movff	_CCal+3,___flmul@f2+3
  2134  000B3E  C072  F01D         	movff	_measure_inductance$1101,___flmul@f1
  2135  000B42  C073  F01E         	movff	_measure_inductance$1101+1,___flmul@f1+1
  2136  000B46  C074  F01F         	movff	_measure_inductance$1101+2,___flmul@f1+2
  2137  000B4A  C075  F020         	movff	_measure_inductance$1101+3,___flmul@f1+3
  2138  000B4E  ECD8  F00E         	call	___flmul	;wreg free
  2139  000B52  C01D  F076         	movff	?___flmul,_measure_inductance$1102
  2140  000B56  C01E  F077         	movff	?___flmul+1,_measure_inductance$1102+1
  2141  000B5A  C01F  F078         	movff	?___flmul+2,_measure_inductance$1102+2
  2142  000B5E  C020  F079         	movff	?___flmul+3,_measure_inductance$1102+3
  2143                           
  2144                           ;measure.c: 214: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2145  000B62  C076  F01D         	movff	_measure_inductance$1102,___flmul@f1
  2146  000B66  C077  F01E         	movff	_measure_inductance$1102+1,___flmul@f1+1
  2147  000B6A  C078  F01F         	movff	_measure_inductance$1102+2,___flmul@f1+2
  2148  000B6E  C079  F020         	movff	_measure_inductance$1102+3,___flmul@f1+3
  2149  000B72  0EE6               	movlw	230
  2150  000B74  6E21               	movwf	___flmul@f2,c
  2151  000B76  0EE9               	movlw	233
  2152  000B78  6E22               	movwf	___flmul@f2+1,c
  2153  000B7A  0E1D               	movlw	29
  2154  000B7C  6E23               	movwf	___flmul@f2+2,c
  2155  000B7E  0E42               	movlw	66
  2156  000B80  6E24               	movwf	___flmul@f2+3,c
  2157  000B82  ECD8  F00E         	call	___flmul	;wreg free
  2158  000B86  C01D  F066         	movff	?___flmul,measure_inductance@denominator
  2159  000B8A  C01E  F067         	movff	?___flmul+1,measure_inductance@denominator+1
  2160  000B8E  C01F  F068         	movff	?___flmul+2,measure_inductance@denominator+2
  2161  000B92  C020  F069         	movff	?___flmul+3,measure_inductance@denominator+3
  2162                           
  2163                           ;measure.c: 216: Lin = (numerator / denominator) * 1e+15l;
  2164  000B96  C066  F012         	movff	measure_inductance@denominator,___fldiv@f2
  2165  000B9A  C067  F013         	movff	measure_inductance@denominator+1,___fldiv@f2+1
  2166  000B9E  C068  F014         	movff	measure_inductance@denominator+2,___fldiv@f2+2
  2167  000BA2  C069  F015         	movff	measure_inductance@denominator+3,___fldiv@f2+3
  2168  000BA6  C062  F00E         	movff	measure_inductance@numerator,___fldiv@f1
  2169  000BAA  C063  F00F         	movff	measure_inductance@numerator+1,___fldiv@f1+1
  2170  000BAE  C064  F010         	movff	measure_inductance@numerator+2,___fldiv@f1+2
  2171  000BB2  C065  F011         	movff	measure_inductance@numerator+3,___fldiv@f1+3
  2172  000BB6  EC9B  F00F         	call	___fldiv	;wreg free
  2173  000BBA  C00E  F01D         	movff	?___fldiv,___flmul@f1
  2174  000BBE  C00F  F01E         	movff	?___fldiv+1,___flmul@f1+1
  2175  000BC2  C010  F01F         	movff	?___fldiv+2,___flmul@f1+2
  2176  000BC6  C011  F020         	movff	?___fldiv+3,___flmul@f1+3
  2177  000BCA  0EA9               	movlw	169
  2178  000BCC  6E21               	movwf	___flmul@f2,c
  2179  000BCE  0E5F               	movlw	95
  2180  000BD0  6E22               	movwf	___flmul@f2+1,c
  2181  000BD2  0E63               	movlw	99
  2182  000BD4  6E23               	movwf	___flmul@f2+2,c
  2183  000BD6  0E58               	movlw	88
  2184  000BD8  6E24               	movwf	___flmul@f2+3,c
  2185  000BDA  ECD8  F00E         	call	___flmul	;wreg free
  2186  000BDE  C01D  F089         	movff	?___flmul,measure_inductance@Lin
  2187  000BE2  C01E  F08A         	movff	?___flmul+1,measure_inductance@Lin+1
  2188  000BE6  C01F  F08B         	movff	?___flmul+2,measure_inductance@Lin+2
  2189  000BEA  C020  F08C         	movff	?___flmul+3,measure_inductance@Lin+3
  2190                           
  2191                           ;measure.c: 218: if(Lin > 999) {
  2192  000BEE  ECA1  F008         	call	PL30	;call to abstracted procedure
  2193  000BF2  C089  F008         	movff	measure_inductance@Lin,___flge@ff2
  2194  000BF6  C08A  F009         	movff	measure_inductance@Lin+1,___flge@ff2+1
  2195  000BFA  C08B  F00A         	movff	measure_inductance@Lin+2,___flge@ff2+2
  2196  000BFE  C08C  F00B         	movff	measure_inductance@Lin+3,___flge@ff2+3
  2197  000C02  EC39  F012         	call	___flge	;wreg free
  2198  000C06  E252               	bc	l4132
  2199                           
  2200                           ;measure.c: 219: if(Lin > (999e+03l)) {
  2201  000C08  EC87  F008         	call	PL20	;call to abstracted procedure
  2202  000C0C  C089  F008         	movff	measure_inductance@Lin,___flge@ff2
  2203  000C10  C08A  F009         	movff	measure_inductance@Lin+1,___flge@ff2+1
  2204  000C14  C08B  F00A         	movff	measure_inductance@Lin+2,___flge@ff2+2
  2205  000C18  C08C  F00B         	movff	measure_inductance@Lin+3,___flge@ff2+3
  2206  000C1C  EC39  F012         	call	___flge	;wreg free
  2207  000C20  E233               	bc	l4128
  2208                           
  2209                           ;measure.c: 220: if(Lin > (999e+06l)) {
  2210  000C22  EC90  F008         	call	PL22	;call to abstracted procedure
  2211  000C26  C089  F008         	movff	measure_inductance@Lin,___flge@ff2
  2212  000C2A  C08A  F009         	movff	measure_inductance@Lin+1,___flge@ff2+1
  2213  000C2E  C08B  F00A         	movff	measure_inductance@Lin+2,___flge@ff2+2
  2214  000C32  C08C  F00B         	movff	measure_inductance@Lin+3,___flge@ff2+3
  2215  000C36  EC39  F012         	call	___flge	;wreg free
  2216  000C3A  E217               	bc	l4124
  2217                           
  2218                           ;measure.c: 221: Lin = Lin / (1e+09l);
  2219  000C3C  C089  F00E         	movff	measure_inductance@Lin,___fldiv@f1
  2220  000C40  C08A  F00F         	movff	measure_inductance@Lin+1,___fldiv@f1+1
  2221  000C44  C08B  F010         	movff	measure_inductance@Lin+2,___fldiv@f1+2
  2222  000C48  C08C  F011         	movff	measure_inductance@Lin+3,___fldiv@f1+3
  2223  000C4C  EC7E  F008         	call	PL18	;call to abstracted procedure
  2224  000C50  EC9B  F00F         	call	___fldiv	;wreg free
  2225  000C54  C00E  F089         	movff	?___fldiv,measure_inductance@Lin
  2226  000C58  C00F  F08A         	movff	?___fldiv+1,measure_inductance@Lin+1
  2227  000C5C  C010  F08B         	movff	?___fldiv+2,measure_inductance@Lin+2
  2228  000C60  C011  F08C         	movff	?___fldiv+3,measure_inductance@Lin+3
  2229                           
  2230                           ;measure.c: 222: unit = 0;
  2231  000C64  0100               	movlb	0	; () banked
  2232  000C66  6B7A               	clrf	measure_inductance@unit& (0+255),b
  2233                           
  2234                           ;measure.c: 223: } else {
  2235  000C68  D024               	goto	l4134
  2236  000C6A                     l4124:
  2237                           
  2238                           ;measure.c: 224: Lin = Lin / (1e+06l);
  2239  000C6A  D860               	call	PL8	;call to abstracted procedure
  2240  000C6C  ECA9  F008         	call	PL34	;call to abstracted procedure
  2241  000C70  EC9B  F00F         	call	___fldiv	;wreg free
  2242  000C74  C00E  F089         	movff	?___fldiv,measure_inductance@Lin
  2243  000C78  C00F  F08A         	movff	?___fldiv+1,measure_inductance@Lin+1
  2244  000C7C  C010  F08B         	movff	?___fldiv+2,measure_inductance@Lin+2
  2245  000C80  C011  F08C         	movff	?___fldiv+3,measure_inductance@Lin+3
  2246                           
  2247                           ;measure.c: 225: unit = 1;
  2248  000C84  0E01               	movlw	1
  2249  000C86  D013               	goto	L1
  2250  000C88                     l4128:
  2251                           
  2252                           ;measure.c: 228: Lin = Lin / 1e+03l;
  2253  000C88  D851               	call	PL8	;call to abstracted procedure
  2254  000C8A  6E13               	movwf	___fldiv@f2+1,c
  2255  000C8C  0E7A               	movlw	122
  2256  000C8E  6E14               	movwf	___fldiv@f2+2,c
  2257  000C90  0E44               	movlw	68
  2258  000C92  6E15               	movwf	___fldiv@f2+3,c
  2259  000C94  EC9B  F00F         	call	___fldiv	;wreg free
  2260  000C98  C00E  F089         	movff	?___fldiv,measure_inductance@Lin
  2261  000C9C  C00F  F08A         	movff	?___fldiv+1,measure_inductance@Lin+1
  2262  000CA0  C010  F08B         	movff	?___fldiv+2,measure_inductance@Lin+2
  2263  000CA4  C011  F08C         	movff	?___fldiv+3,measure_inductance@Lin+3
  2264                           
  2265                           ;measure.c: 229: unit = 2;
  2266  000CA8  0E02               	movlw	2
  2267  000CAA  D001               	goto	L1
  2268  000CAC                     l4132:
  2269                           
  2270                           ;measure.c: 232: unit = 3;
  2271  000CAC  0E03               	movlw	3
  2272  000CAE                     L1:
  2273  000CAE  0100               	movlb	0	; () banked
  2274  000CB0  6F7A               	movwf	measure_inductance@unit& (0+255),b
  2275  000CB2                     l4134:
  2276                           
  2277                           ; BSR set to: 0
  2278                           ;measure.c: 234: Lin = Lin * 100;
  2279  000CB2  C089  F01D         	movff	measure_inductance@Lin,___flmul@f1
  2280  000CB6  C08A  F01E         	movff	measure_inductance@Lin+1,___flmul@f1+1
  2281  000CBA  C08B  F01F         	movff	measure_inductance@Lin+2,___flmul@f1+2
  2282  000CBE  C08C  F020         	movff	measure_inductance@Lin+3,___flmul@f1+3
  2283  000CC2  EC99  F008         	call	PL26	;call to abstracted procedure
  2284  000CC6  ECD8  F00E         	call	___flmul	;wreg free
  2285  000CCA  C01D  F089         	movff	?___flmul,measure_inductance@Lin
  2286  000CCE  C01E  F08A         	movff	?___flmul+1,measure_inductance@Lin+1
  2287  000CD2  C01F  F08B         	movff	?___flmul+2,measure_inductance@Lin+2
  2288  000CD6  C020  F08C         	movff	?___flmul+3,measure_inductance@Lin+3
  2289                           
  2290                           ;measure.c: 235: var = (uint16_t)Lin;
  2291  000CDA  C089  F052         	movff	measure_inductance@Lin,___fltol@f1
  2292  000CDE  C08A  F053         	movff	measure_inductance@Lin+1,___fltol@f1+1
  2293  000CE2  C08B  F054         	movff	measure_inductance@Lin+2,___fltol@f1+2
  2294  000CE6  C08C  F055         	movff	measure_inductance@Lin+3,___fltol@f1+3
  2295  000CEA  ECED  F010         	call	___fltol	;wreg free
  2296  000CEE  C052  F087         	movff	?___fltol,measure_inductance@var
  2297  000CF2  C053  F088         	movff	?___fltol+1,measure_inductance@var+1
  2298                           
  2299                           ; BSR set to: 0
  2300                           ;measure.c: 237: print_reading(var);
  2301  000CF6  C087  F036         	movff	measure_inductance@var,print_reading@measurement
  2302  000CFA  C088  F037         	movff	measure_inductance@var+1,print_reading@measurement+1
  2303  000CFE  ECAF  F011         	call	_print_reading	;wreg free
  2304                           
  2305                           ;measure.c: 238: print_unit(unit);
  2306  000D02  0100               	movlb	0	; () banked
  2307  000D04  517A               	movf	measure_inductance@unit& (0+255),w,b
  2308  000D06  EF08  F014         	goto	_print_unit
  2309  000D0A                     __end_of_measure_inductance:
  2310                           	opt stack 0
  2311  000D0A                     PL2:
  2312                           	opt stack 24
  2313  000D0A  C0E5  F021         	movff	_F1,___flmul@f2
  2314  000D0E  C0E6  F022         	movff	_F1+1,___flmul@f2+1
  2315  000D12  C0E7  F023         	movff	_F1+2,___flmul@f2+2
  2316  000D16  C0E8  F024         	movff	_F1+3,___flmul@f2+3
  2317  000D1A  C0E5  F01D         	movff	_F1,___flmul@f1
  2318  000D1E  C0E6  F01E         	movff	_F1+1,___flmul@f1+1
  2319  000D22  C0E7  F01F         	movff	_F1+2,___flmul@f1+2
  2320  000D26  C0E8  F020         	movff	_F1+3,___flmul@f1+3
  2321  000D2A  0012               	return	
  2322  000D2C                     __end_ofPL2:
  2323                           	opt stack 0
  2324  000D2C                     PL8:
  2325                           	opt stack 24
  2326  000D2C  C089  F00E         	movff	measure_inductance@Lin,___fldiv@f1
  2327  000D30  C08A  F00F         	movff	measure_inductance@Lin+1,___fldiv@f1+1
  2328  000D34  C08B  F010         	movff	measure_inductance@Lin+2,___fldiv@f1+2
  2329  000D38  C08C  F011         	movff	measure_inductance@Lin+3,___fldiv@f1+3
  2330  000D3C  0E00               	movlw	0
  2331  000D3E  6E12               	movwf	___fldiv@f2,c
  2332  000D40  0C00               	retlw	0
  2333  000D42                     __end_ofPL8:
  2334                           	opt stack 0
  2335                           tblptru	equ	0xFF8
  2336                           tblptrh	equ	0xFF7
  2337                           tblptrl	equ	0xFF6
  2338                           tablat	equ	0xFF5
  2339                           prodl	equ	0xFF3
  2340                           intcon	equ	0xFF2
  2341                           intcon2	equ	0xFF1
  2342                           postinc0	equ	0xFEE
  2343                           wreg	equ	0xFE8
  2344                           postdec1	equ	0xFE5
  2345                           fsr1l	equ	0xFE1
  2346                           indf2	equ	0xFDF
  2347                           postinc2	equ	0xFDE
  2348                           postdec2	equ	0xFDD
  2349                           fsr2h	equ	0xFDA
  2350                           fsr2l	equ	0xFD9
  2351                           status	equ	0xFD8
  2352                           
  2353 ;; *************** function _measure_capacitance *****************
  2354 ;; Defined at:
  2355 ;;		line 118 in file "../../../src/measure.c"
  2356 ;; Parameters:    Size  Location     Type
  2357 ;;		None
  2358 ;; Auto vars:     Size  Location     Type
  2359 ;;  Cin             4   84[BANK0 ] unsigned char 
  2360 ;;  var             2   82[BANK0 ] unsigned int 
  2361 ;;  unit            1   81[BANK0 ] unsigned char 
  2362 ;; Return value:  Size  Location     Type
  2363 ;;		None               void
  2364 ;; Registers used:
  2365 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2366 ;; Tracked objects:
  2367 ;;		On entry : 0/0
  2368 ;;		On exit  : 0/0
  2369 ;;		Unchanged: 0/0
  2370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2371 ;;      Params:         0       0       0       0       0       0       0       0       0
  2372 ;;      Locals:         0      19       0       0       0       0       0       0       0
  2373 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2374 ;;      Totals:         0      19       0       0       0       0       0       0       0
  2375 ;;Total ram usage:       19 bytes
  2376 ;; Hardware stack levels used:    1
  2377 ;; Hardware stack levels required when called:    7
  2378 ;; This function calls:
  2379 ;;		___fldiv
  2380 ;;		___flge
  2381 ;;		___flmul
  2382 ;;		___flsub
  2383 ;;		___fltol
  2384 ;;		___lwtofl
  2385 ;;		_format_double
  2386 ;;		_format_xint32
  2387 ;;		_lcd_gotoxy
  2388 ;;		_measure_freq
  2389 ;;		_print_reading
  2390 ;;		_print_unit
  2391 ;;		_put_str
  2392 ;;		_ser_putch
  2393 ;;		_ser_puts
  2394 ;; This function is called by:
  2395 ;;		_main
  2396 ;; This function uses a non-reentrant model
  2397 ;;
  2398                           
  2399                           	psect	text5
  2400  000D42                     __ptext5:
  2401                           	opt stack 0
  2402  000D42                     _measure_capacitance:
  2403                           	opt stack 23
  2404                           
  2405                           ;measure.c: 119: uint8_t unit;
  2406                           ;measure.c: 120: uint16_t var;
  2407                           ;measure.c: 122: double Cin;
  2408                           ;measure.c: 126: lcd_gotoxy(0, 0);
  2409                           
  2410                           ;incstack = 0
  2411  000D42  0E00               	movlw	0
  2412  000D44  6A08               	clrf	lcd_gotoxy@row,c
  2413  000D46  EC50  F013         	call	_lcd_gotoxy
  2414                           
  2415                           ;measure.c: 127: put_str("Capacity ");
  2416  000D4A  0E7F               	movlw	STR_6& (0+255)
  2417  000D4C  ECDE  F013         	call	_put_str
  2418                           
  2419                           ;measure.c: 129: var = measure_freq();
  2420  000D50  EC8C  F00C         	call	_measure_freq	;wreg free
  2421  000D54  C036  F0B2         	movff	?_measure_freq,measure_capacitance@var
  2422  000D58  C037  F0B3         	movff	?_measure_freq+1,measure_capacitance@var+1
  2423                           
  2424                           ;measure.c: 131: F3 = (double)var;
  2425  000D5C  C0B2  F03B         	movff	measure_capacitance@var,___lwtofl@c
  2426  000D60  C0B3  F03C         	movff	measure_capacitance@var+1,___lwtofl@c+1
  2427  000D64  ECF3  F013         	call	___lwtofl	;wreg free
  2428  000D68  C03B  F0BC         	movff	?___lwtofl,_F3
  2429  000D6C  C03C  F0BD         	movff	?___lwtofl+1,_F3+1
  2430  000D70  C03D  F0BE         	movff	?___lwtofl+2,_F3+2
  2431  000D74  C03E  F0BF         	movff	?___lwtofl+3,_F3+3
  2432                           
  2433                           ;measure.c: 134: ser_puts("var=");
  2434  000D78  0EC0               	movlw	STR_7& (0+255)
  2435  000D7A  EC64  F014         	call	_ser_puts
  2436                           
  2437                           ;measure.c: 135: format_xint32( var);
  2438  000D7E  C0B2  F036         	movff	measure_capacitance@var,format_xint32@x
  2439  000D82  C0B3  F037         	movff	measure_capacitance@var+1,format_xint32@x+1
  2440  000D86  6A38               	clrf	format_xint32@x+2,c
  2441  000D88  6A39               	clrf	format_xint32@x+3,c
  2442  000D8A  EC6B  F013         	call	_format_xint32	;wreg free
  2443                           
  2444                           ;measure.c: 136: ser_puts("\r\nF1=");
  2445  000D8E  0E9E               	movlw	STR_8& (0+255)
  2446  000D90  EC64  F014         	call	_ser_puts
  2447                           
  2448                           ;measure.c: 137: format_double( F1);
  2449  000D94  C0E5  F091         	movff	_F1,format_double@num
  2450  000D98  C0E6  F092         	movff	_F1+1,format_double@num+1
  2451  000D9C  C0E7  F093         	movff	_F1+2,format_double@num+2
  2452  000DA0  C0E8  F094         	movff	_F1+3,format_double@num+3
  2453  000DA4  EC87  F00A         	call	_format_double	;wreg free
  2454                           
  2455                           ;measure.c: 138: ser_putch(' ');
  2456  000DA8  0E20               	movlw	32
  2457  000DAA  EC1C  F014         	call	_ser_putch
  2458                           
  2459                           ;measure.c: 139: format_xint32( *(uint32_t*)&F1);
  2460  000DAE  C0E5  F036         	movff	_F1,format_xint32@x
  2461  000DB2  C0E6  F037         	movff	_F1+1,format_xint32@x+1
  2462  000DB6  C0E7  F038         	movff	_F1+2,format_xint32@x+2
  2463  000DBA  C0E8  F039         	movff	_F1+3,format_xint32@x+3
  2464  000DBE  EC6B  F013         	call	_format_xint32	;wreg free
  2465                           
  2466                           ;measure.c: 140: ser_puts("\r\nF2=");
  2467  000DC2  0EA4               	movlw	STR_9& (0+255)
  2468  000DC4  EC64  F014         	call	_ser_puts
  2469                           
  2470                           ;measure.c: 141: format_double( F2);
  2471  000DC8  C0B8  F091         	movff	_F2,format_double@num
  2472  000DCC  C0B9  F092         	movff	_F2+1,format_double@num+1
  2473  000DD0  C0BA  F093         	movff	_F2+2,format_double@num+2
  2474  000DD4  C0BB  F094         	movff	_F2+3,format_double@num+3
  2475  000DD8  EC87  F00A         	call	_format_double	;wreg free
  2476                           
  2477                           ;measure.c: 142: ser_putch(' ');
  2478  000DDC  0E20               	movlw	32
  2479  000DDE  EC1C  F014         	call	_ser_putch
  2480                           
  2481                           ;measure.c: 143: format_xint32( *(uint32_t*)&F2);
  2482  000DE2  C0B8  F036         	movff	_F2,format_xint32@x
  2483  000DE6  C0B9  F037         	movff	_F2+1,format_xint32@x+1
  2484  000DEA  C0BA  F038         	movff	_F2+2,format_xint32@x+2
  2485  000DEE  C0BB  F039         	movff	_F2+3,format_xint32@x+3
  2486  000DF2  EC6B  F013         	call	_format_xint32	;wreg free
  2487                           
  2488                           ;measure.c: 144: ser_puts("\r\nF3=");
  2489  000DF6  0EAA               	movlw	STR_10& (0+255)
  2490  000DF8  EC64  F014         	call	_ser_puts
  2491                           
  2492                           ;measure.c: 145: format_double( F3);
  2493  000DFC  C0BC  F091         	movff	_F3,format_double@num
  2494  000E00  C0BD  F092         	movff	_F3+1,format_double@num+1
  2495  000E04  C0BE  F093         	movff	_F3+2,format_double@num+2
  2496  000E08  C0BF  F094         	movff	_F3+3,format_double@num+3
  2497  000E0C  EC87  F00A         	call	_format_double	;wreg free
  2498                           
  2499                           ;measure.c: 146: ser_putch(' ');
  2500  000E10  0E20               	movlw	32
  2501  000E12  EC1C  F014         	call	_ser_putch
  2502                           
  2503                           ;measure.c: 147: format_xint32( *(uint32_t*)&F3);
  2504  000E16  C0BC  F036         	movff	_F3,format_xint32@x
  2505  000E1A  C0BD  F037         	movff	_F3+1,format_xint32@x+1
  2506  000E1E  C0BE  F038         	movff	_F3+2,format_xint32@x+2
  2507  000E22  C0BF  F039         	movff	_F3+3,format_xint32@x+3
  2508  000E26  EC6B  F013         	call	_format_xint32	;wreg free
  2509                           
  2510                           ;measure.c: 148: ser_puts("\r\nCCal=");
  2511  000E2A  0E89               	movlw	STR_11& (0+255)
  2512  000E2C  EC64  F014         	call	_ser_puts
  2513                           
  2514                           ;measure.c: 149: format_double( CCal);
  2515  000E30  C0E9  F091         	movff	_CCal,format_double@num
  2516  000E34  C0EA  F092         	movff	_CCal+1,format_double@num+1
  2517  000E38  C0EB  F093         	movff	_CCal+2,format_double@num+2
  2518  000E3C  C0EC  F094         	movff	_CCal+3,format_double@num+3
  2519  000E40  EC87  F00A         	call	_format_double	;wreg free
  2520                           
  2521                           ;measure.c: 150: ser_putch(' ');
  2522  000E44  0E20               	movlw	32
  2523  000E46  EC1C  F014         	call	_ser_putch
  2524                           
  2525                           ;measure.c: 151: format_xint32( *(uint32_t*)&CCal);
  2526  000E4A  C0E9  F036         	movff	_CCal,format_xint32@x
  2527  000E4E  C0EA  F037         	movff	_CCal+1,format_xint32@x+1
  2528  000E52  C0EB  F038         	movff	_CCal+2,format_xint32@x+2
  2529  000E56  C0EC  F039         	movff	_CCal+3,format_xint32@x+3
  2530  000E5A  EC6B  F013         	call	_format_xint32	;wreg free
  2531                           
  2532                           ;measure.c: 152: ser_puts("\r\n");
  2533  000E5E  0E9B               	movlw	(STR_29+3)& (0+255)
  2534  000E60  EC64  F014         	call	_ser_puts
  2535                           
  2536                           ;measure.c: 156: if(F3 > F1)
  2537  000E64  D92F               	call	PL6	;call to abstracted procedure
  2538  000E66  EC39  F012         	call	___flge	;wreg free
  2539  000E6A  E208               	bc	l4062
  2540                           
  2541                           ;measure.c: 157: F3 = F1;
  2542  000E6C  C0E5  F0BC         	movff	_F1,_F3
  2543  000E70  C0E6  F0BD         	movff	_F1+1,_F3+1
  2544  000E74  C0E7  F0BE         	movff	_F1+2,_F3+2
  2545  000E78  C0E8  F0BF         	movff	_F1+3,_F3+3
  2546  000E7C                     l4062:
  2547                           
  2548                           ;measure.c: 159: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2549  000E7C  D912               	call	PL4	;call to abstracted procedure
  2550  000E7E  ECD8  F00E         	call	___flmul	;wreg free
  2551  000E82  C01D  F03C         	movff	?___flmul,___flsub@f2
  2552  000E86  C01E  F03D         	movff	?___flmul+1,___flsub@f2+1
  2553  000E8A  C01F  F03E         	movff	?___flmul+2,___flsub@f2+2
  2554  000E8E  C020  F03F         	movff	?___flmul+3,___flsub@f2+3
  2555  000E92  EC85  F006         	call	PL2	;call to abstracted procedure
  2556  000E96  ECD8  F00E         	call	___flmul	;wreg free
  2557  000E9A  C01D  F038         	movff	?___flmul,___flsub@f1
  2558  000E9E  C01E  F039         	movff	?___flmul+1,___flsub@f1+1
  2559  000EA2  C01F  F03A         	movff	?___flmul+2,___flsub@f1+2
  2560  000EA6  C020  F03B         	movff	?___flmul+3,___flsub@f1+3
  2561  000EAA  ECF2  F012         	call	___flsub	;wreg free
  2562  000EAE  C038  F0A5         	movff	?___flsub,_measure_capacitance$1093
  2563  000EB2  C039  F0A6         	movff	?___flsub+1,_measure_capacitance$1093+1
  2564  000EB6  C03A  F0A7         	movff	?___flsub+2,_measure_capacitance$1093+2
  2565  000EBA  C03B  F0A8         	movff	?___flsub+3,_measure_capacitance$1093+3
  2566                           
  2567                           ;measure.c: 159: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2568  000EBE  C0B8  F021         	movff	_F2,___flmul@f2
  2569  000EC2  C0B9  F022         	movff	_F2+1,___flmul@f2+1
  2570  000EC6  C0BA  F023         	movff	_F2+2,___flmul@f2+2
  2571  000ECA  C0BB  F024         	movff	_F2+3,___flmul@f2+3
  2572  000ECE  C0A5  F01D         	movff	_measure_capacitance$1093,___flmul@f1
  2573  000ED2  C0A6  F01E         	movff	_measure_capacitance$1093+1,___flmul@f1+1
  2574  000ED6  C0A7  F01F         	movff	_measure_capacitance$1093+2,___flmul@f1+2
  2575  000EDA  C0A8  F020         	movff	_measure_capacitance$1093+3,___flmul@f1+3
  2576  000EDE  ECD8  F00E         	call	___flmul	;wreg free
  2577  000EE2  C01D  F0A9         	movff	?___flmul,_measure_capacitance$1094
  2578  000EE6  C01E  F0AA         	movff	?___flmul+1,_measure_capacitance$1094+1
  2579  000EEA  C01F  F0AB         	movff	?___flmul+2,_measure_capacitance$1094+2
  2580  000EEE  C020  F0AC         	movff	?___flmul+3,_measure_capacitance$1094+3
  2581                           
  2582                           ;measure.c: 159: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2583  000EF2  C0B8  F021         	movff	_F2,___flmul@f2
  2584  000EF6  C0B9  F022         	movff	_F2+1,___flmul@f2+1
  2585  000EFA  C0BA  F023         	movff	_F2+2,___flmul@f2+2
  2586  000EFE  C0BB  F024         	movff	_F2+3,___flmul@f2+3
  2587  000F02  C0A9  F01D         	movff	_measure_capacitance$1094,___flmul@f1
  2588  000F06  C0AA  F01E         	movff	_measure_capacitance$1094+1,___flmul@f1+1
  2589  000F0A  C0AB  F01F         	movff	_measure_capacitance$1094+2,___flmul@f1+2
  2590  000F0E  C0AC  F020         	movff	_measure_capacitance$1094+3,___flmul@f1+3
  2591  000F12  ECD8  F00E         	call	___flmul	;wreg free
  2592  000F16  C01D  F0AD         	movff	?___flmul,_measure_capacitance$1095
  2593  000F1A  C01E  F0AE         	movff	?___flmul+1,_measure_capacitance$1095+1
  2594  000F1E  C01F  F0AF         	movff	?___flmul+2,_measure_capacitance$1095+2
  2595  000F22  C020  F0B0         	movff	?___flmul+3,_measure_capacitance$1095+3
  2596                           
  2597                           ;measure.c: 159: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2598  000F26  C0AD  F01D         	movff	_measure_capacitance$1095,___flmul@f1
  2599  000F2A  C0AE  F01E         	movff	_measure_capacitance$1095+1,___flmul@f1+1
  2600  000F2E  C0AF  F01F         	movff	_measure_capacitance$1095+2,___flmul@f1+2
  2601  000F32  C0B0  F020         	movff	_measure_capacitance$1095+3,___flmul@f1+3
  2602  000F36  C0E9  F021         	movff	_CCal,___flmul@f2
  2603  000F3A  C0EA  F022         	movff	_CCal+1,___flmul@f2+1
  2604  000F3E  C0EB  F023         	movff	_CCal+2,___flmul@f2+2
  2605  000F42  C0EC  F024         	movff	_CCal+3,___flmul@f2+3
  2606  000F46  ECD8  F00E         	call	___flmul	;wreg free
  2607  000F4A  C01D  F0B4         	movff	?___flmul,measure_capacitance@Cin
  2608  000F4E  C01E  F0B5         	movff	?___flmul+1,measure_capacitance@Cin+1
  2609  000F52  C01F  F0B6         	movff	?___flmul+2,measure_capacitance@Cin+2
  2610  000F56  C020  F0B7         	movff	?___flmul+3,measure_capacitance@Cin+3
  2611                           
  2612                           ;measure.c: 163: ser_puts("Cin=");
  2613  000F5A  0EBB               	movlw	STR_13& (0+255)
  2614  000F5C  EC64  F014         	call	_ser_puts
  2615                           
  2616                           ;measure.c: 164: format_double( Cin);
  2617  000F60  C0B4  F091         	movff	measure_capacitance@Cin,format_double@num
  2618  000F64  C0B5  F092         	movff	measure_capacitance@Cin+1,format_double@num+1
  2619  000F68  C0B6  F093         	movff	measure_capacitance@Cin+2,format_double@num+2
  2620  000F6C  C0B7  F094         	movff	measure_capacitance@Cin+3,format_double@num+3
  2621  000F70  EC87  F00A         	call	_format_double	;wreg free
  2622                           
  2623                           ;measure.c: 165: ser_putch(' ');
  2624  000F74  0E20               	movlw	32
  2625  000F76  EC1C  F014         	call	_ser_putch
  2626                           
  2627                           ;measure.c: 166: format_xint32( *(uint32_t*)&Cin);
  2628  000F7A  C0B4  F036         	movff	measure_capacitance@Cin,format_xint32@x
  2629  000F7E  C0B5  F037         	movff	measure_capacitance@Cin+1,format_xint32@x+1
  2630  000F82  C0B6  F038         	movff	measure_capacitance@Cin+2,format_xint32@x+2
  2631  000F86  C0B7  F039         	movff	measure_capacitance@Cin+3,format_xint32@x+3
  2632  000F8A  EC6B  F013         	call	_format_xint32	;wreg free
  2633                           
  2634                           ;measure.c: 167: ser_puts("\r\n");
  2635  000F8E  0E9B               	movlw	(STR_29+3)& (0+255)
  2636  000F90  EC64  F014         	call	_ser_puts
  2637                           
  2638                           ;measure.c: 169: if(Cin > 999) {
  2639  000F94  D8D6               	call	PL30	;call to abstracted procedure
  2640  000F96  C0B4  F008         	movff	measure_capacitance@Cin,___flge@ff2
  2641  000F9A  C0B5  F009         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2642  000F9E  C0B6  F00A         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2643  000FA2  C0B7  F00B         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2644  000FA6  EC39  F012         	call	___flge	;wreg free
  2645  000FAA  E24D               	bc	l4092
  2646                           
  2647                           ;measure.c: 170: if(Cin > (999e+03l)) {
  2648  000FAC  D8B0               	call	PL20	;call to abstracted procedure
  2649  000FAE  C0B4  F008         	movff	measure_capacitance@Cin,___flge@ff2
  2650  000FB2  C0B5  F009         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2651  000FB6  C0B6  F00A         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2652  000FBA  C0B7  F00B         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2653  000FBE  EC39  F012         	call	___flge	;wreg free
  2654  000FC2  E22F               	bc	l4088
  2655                           
  2656                           ;measure.c: 171: if(Cin > (999e+06l)) {
  2657  000FC4  D8AD               	call	PL22	;call to abstracted procedure
  2658  000FC6  C0B4  F008         	movff	measure_capacitance@Cin,___flge@ff2
  2659  000FCA  C0B5  F009         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2660  000FCE  C0B6  F00A         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2661  000FD2  C0B7  F00B         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2662  000FD6  EC39  F012         	call	___flge	;wreg free
  2663  000FDA  E215               	bc	l4084
  2664                           
  2665                           ;measure.c: 172: Cin = Cin / (1e+09);
  2666  000FDC  C0B4  F00E         	movff	measure_capacitance@Cin,___fldiv@f1
  2667  000FE0  C0B5  F00F         	movff	measure_capacitance@Cin+1,___fldiv@f1+1
  2668  000FE4  C0B6  F010         	movff	measure_capacitance@Cin+2,___fldiv@f1+2
  2669  000FE8  C0B7  F011         	movff	measure_capacitance@Cin+3,___fldiv@f1+3
  2670  000FEC  D887               	call	PL18	;call to abstracted procedure
  2671  000FEE  EC9B  F00F         	call	___fldiv	;wreg free
  2672  000FF2  C00E  F0B4         	movff	?___fldiv,measure_capacitance@Cin
  2673  000FF6  C00F  F0B5         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2674  000FFA  C010  F0B6         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2675  000FFE  C011  F0B7         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2676                           
  2677                           ;measure.c: 173: unit = 4;
  2678  001002  0E04               	movlw	4
  2679  001004  D021               	goto	L2
  2680  001006                     l4084:
  2681                           
  2682                           ;measure.c: 175: Cin = Cin / (1e+06);
  2683  001006  D86F               	call	PL10	;call to abstracted procedure
  2684  001008  D8A4               	call	PL34	;call to abstracted procedure
  2685  00100A  EC9B  F00F         	call	___fldiv	;wreg free
  2686  00100E  C00E  F0B4         	movff	?___fldiv,measure_capacitance@Cin
  2687  001012  C00F  F0B5         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2688  001016  C010  F0B6         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2689  00101A  C011  F0B7         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2690                           
  2691                           ;measure.c: 176: unit = 5;
  2692  00101E  0E05               	movlw	5
  2693  001020  D013               	goto	L2
  2694  001022                     l4088:
  2695                           
  2696                           ;measure.c: 179: Cin = Cin / 1e+03;
  2697  001022  D861               	call	PL10	;call to abstracted procedure
  2698  001024  6E13               	movwf	___fldiv@f2+1,c
  2699  001026  0E7A               	movlw	122
  2700  001028  6E14               	movwf	___fldiv@f2+2,c
  2701  00102A  0E44               	movlw	68
  2702  00102C  6E15               	movwf	___fldiv@f2+3,c
  2703  00102E  EC9B  F00F         	call	___fldiv	;wreg free
  2704  001032  C00E  F0B4         	movff	?___fldiv,measure_capacitance@Cin
  2705  001036  C00F  F0B5         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2706  00103A  C010  F0B6         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2707  00103E  C011  F0B7         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2708                           
  2709                           ;measure.c: 180: unit = 6;
  2710  001042  0E06               	movlw	6
  2711  001044  D001               	goto	L2
  2712  001046                     l4092:
  2713                           
  2714                           ;measure.c: 183: unit = 7;
  2715  001046  0E07               	movlw	7
  2716  001048                     L2:
  2717  001048  0100               	movlb	0	; () banked
  2718  00104A  6FB1               	movwf	measure_capacitance@unit& (0+255),b
  2719                           
  2720                           ; BSR set to: 0
  2721                           ;measure.c: 185: Cin = Cin * 100;
  2722  00104C  C0B4  F01D         	movff	measure_capacitance@Cin,___flmul@f1
  2723  001050  C0B5  F01E         	movff	measure_capacitance@Cin+1,___flmul@f1+1
  2724  001054  C0B6  F01F         	movff	measure_capacitance@Cin+2,___flmul@f1+2
  2725  001058  C0B7  F020         	movff	measure_capacitance@Cin+3,___flmul@f1+3
  2726  00105C  D86A               	call	PL26	;call to abstracted procedure
  2727  00105E  ECD8  F00E         	call	___flmul	;wreg free
  2728  001062  C01D  F0B4         	movff	?___flmul,measure_capacitance@Cin
  2729  001066  C01E  F0B5         	movff	?___flmul+1,measure_capacitance@Cin+1
  2730  00106A  C01F  F0B6         	movff	?___flmul+2,measure_capacitance@Cin+2
  2731  00106E  C020  F0B7         	movff	?___flmul+3,measure_capacitance@Cin+3
  2732                           
  2733                           ;measure.c: 186: var = (uint16_t)Cin;
  2734  001072  C0B4  F052         	movff	measure_capacitance@Cin,___fltol@f1
  2735  001076  C0B5  F053         	movff	measure_capacitance@Cin+1,___fltol@f1+1
  2736  00107A  C0B6  F054         	movff	measure_capacitance@Cin+2,___fltol@f1+2
  2737  00107E  C0B7  F055         	movff	measure_capacitance@Cin+3,___fltol@f1+3
  2738  001082  ECED  F010         	call	___fltol	;wreg free
  2739  001086  C052  F0B2         	movff	?___fltol,measure_capacitance@var
  2740  00108A  C053  F0B3         	movff	?___fltol+1,measure_capacitance@var+1
  2741                           
  2742                           ; BSR set to: 0
  2743                           ;measure.c: 188: print_reading(var);
  2744  00108E  C0B2  F036         	movff	measure_capacitance@var,print_reading@measurement
  2745  001092  C0B3  F037         	movff	measure_capacitance@var+1,print_reading@measurement+1
  2746  001096  ECAF  F011         	call	_print_reading	;wreg free
  2747                           
  2748                           ;measure.c: 189: print_unit(unit);
  2749  00109A  0100               	movlb	0	; () banked
  2750  00109C  51B1               	movf	measure_capacitance@unit& (0+255),w,b
  2751  00109E  EF08  F014         	goto	_print_unit
  2752  0010A2                     __end_of_measure_capacitance:
  2753                           	opt stack 0
  2754  0010A2                     PL4:
  2755                           	opt stack 24
  2756  0010A2  C0BC  F021         	movff	_F3,___flmul@f2
  2757  0010A6  C0BD  F022         	movff	_F3+1,___flmul@f2+1
  2758  0010AA  C0BE  F023         	movff	_F3+2,___flmul@f2+2
  2759  0010AE  C0BF  F024         	movff	_F3+3,___flmul@f2+3
  2760  0010B2  C0BC  F01D         	movff	_F3,___flmul@f1
  2761  0010B6  C0BD  F01E         	movff	_F3+1,___flmul@f1+1
  2762  0010BA  C0BE  F01F         	movff	_F3+2,___flmul@f1+2
  2763  0010BE  C0BF  F020         	movff	_F3+3,___flmul@f1+3
  2764  0010C2  0012               	return	
  2765  0010C4                     __end_ofPL4:
  2766                           	opt stack 0
  2767  0010C4                     PL6:
  2768                           	opt stack 24
  2769  0010C4  C0E5  F004         	movff	_F1,___flge@ff1
  2770  0010C8  C0E6  F005         	movff	_F1+1,___flge@ff1+1
  2771  0010CC  C0E7  F006         	movff	_F1+2,___flge@ff1+2
  2772  0010D0  C0E8  F007         	movff	_F1+3,___flge@ff1+3
  2773  0010D4  C0BC  F008         	movff	_F3,___flge@ff2
  2774  0010D8  C0BD  F009         	movff	_F3+1,___flge@ff2+1
  2775  0010DC  C0BE  F00A         	movff	_F3+2,___flge@ff2+2
  2776  0010E0  C0BF  F00B         	movff	_F3+3,___flge@ff2+3
  2777  0010E4  0012               	return	
  2778  0010E6                     __end_ofPL6:
  2779                           	opt stack 0
  2780  0010E6                     PL10:
  2781                           	opt stack 23
  2782  0010E6  C0B4  F00E         	movff	measure_capacitance@Cin,___fldiv@f1
  2783  0010EA  C0B5  F00F         	movff	measure_capacitance@Cin+1,___fldiv@f1+1
  2784  0010EE  C0B6  F010         	movff	measure_capacitance@Cin+2,___fldiv@f1+2
  2785  0010F2  C0B7  F011         	movff	measure_capacitance@Cin+3,___fldiv@f1+3
  2786  0010F6  0E00               	movlw	0
  2787  0010F8  6E12               	movwf	___fldiv@f2,c
  2788  0010FA  0C00               	retlw	0
  2789  0010FC                     __end_ofPL10:
  2790                           	opt stack 0
  2791  0010FC                     PL18:
  2792                           	opt stack 24
  2793  0010FC  0E28               	movlw	40
  2794  0010FE  6E12               	movwf	___fldiv@f2,c
  2795  001100  0E6B               	movlw	107
  2796  001102  6E13               	movwf	___fldiv@f2+1,c
  2797  001104  0E6E               	movlw	110
  2798  001106  6E14               	movwf	___fldiv@f2+2,c
  2799  001108  0E4E               	movlw	78
  2800  00110A  6E15               	movwf	___fldiv@f2+3,c
  2801  00110C  0C4E               	retlw	78
  2802  00110E                     __end_ofPL18:
  2803                           	opt stack 0
  2804  00110E                     PL20:
  2805                           	opt stack 24
  2806  00110E  0E80               	movlw	128
  2807  001110  6E04               	movwf	___flge@ff1,c
  2808  001112  0EE5               	movlw	229
  2809  001114  6E05               	movwf	___flge@ff1+1,c
  2810  001116  0E73               	movlw	115
  2811  001118  6E06               	movwf	___flge@ff1+2,c
  2812  00111A  0E49               	movlw	73
  2813  00111C  6E07               	movwf	___flge@ff1+3,c
  2814  00111E  0C49               	retlw	73
  2815  001120                     __end_ofPL20:
  2816                           	opt stack 0
  2817  001120                     PL22:
  2818                           	opt stack 24
  2819  001120  0E1F               	movlw	31
  2820  001122  6E04               	movwf	___flge@ff1,c
  2821  001124  0E2E               	movlw	46
  2822  001126  6E05               	movwf	___flge@ff1+1,c
  2823  001128  0E6E               	movlw	110
  2824  00112A  6E06               	movwf	___flge@ff1+2,c
  2825  00112C  0E4E               	movlw	78
  2826  00112E  6E07               	movwf	___flge@ff1+3,c
  2827  001130  0C4E               	retlw	78
  2828  001132                     __end_ofPL22:
  2829                           	opt stack 0
  2830  001132                     PL26:
  2831                           	opt stack 24
  2832  001132  0E00               	movlw	0
  2833  001134  6E21               	movwf	___flmul@f2,c
  2834  001136  6E22               	movwf	___flmul@f2+1,c
  2835  001138  0EC8               	movlw	200
  2836  00113A  6E23               	movwf	___flmul@f2+2,c
  2837  00113C  0E42               	movlw	66
  2838  00113E  6E24               	movwf	___flmul@f2+3,c
  2839  001140  0C42               	retlw	66
  2840  001142                     __end_ofPL26:
  2841                           	opt stack 0
  2842  001142                     PL30:
  2843                           	opt stack 24
  2844  001142  6A04               	clrf	___flge@ff1,c
  2845  001144  0EC0               	movlw	192
  2846  001146  6E05               	movwf	___flge@ff1+1,c
  2847  001148  0E79               	movlw	121
  2848  00114A  6E06               	movwf	___flge@ff1+2,c
  2849  00114C  0E44               	movlw	68
  2850  00114E  6E07               	movwf	___flge@ff1+3,c
  2851  001150  0C44               	retlw	68
  2852  001152                     __end_ofPL30:
  2853                           	opt stack 0
  2854  001152                     PL34:
  2855                           	opt stack 24
  2856  001152  0E24               	movlw	36
  2857  001154  6E13               	movwf	___fldiv@f2+1,c
  2858  001156  0E74               	movlw	116
  2859  001158  6E14               	movwf	___fldiv@f2+2,c
  2860  00115A  0E49               	movlw	73
  2861  00115C  6E15               	movwf	___fldiv@f2+3,c
  2862  00115E  0C49               	retlw	73
  2863  001160                     __end_ofPL34:
  2864                           	opt stack 0
  2865                           tblptru	equ	0xFF8
  2866                           tblptrh	equ	0xFF7
  2867                           tblptrl	equ	0xFF6
  2868                           tablat	equ	0xFF5
  2869                           prodl	equ	0xFF3
  2870                           intcon	equ	0xFF2
  2871                           intcon2	equ	0xFF1
  2872                           postinc0	equ	0xFEE
  2873                           wreg	equ	0xFE8
  2874                           postdec1	equ	0xFE5
  2875                           fsr1l	equ	0xFE1
  2876                           indf2	equ	0xFDF
  2877                           postinc2	equ	0xFDE
  2878                           postdec2	equ	0xFDD
  2879                           fsr2h	equ	0xFDA
  2880                           fsr2l	equ	0xFD9
  2881                           status	equ	0xFD8
  2882                           
  2883 ;; *************** function _print_unit *****************
  2884 ;; Defined at:
  2885 ;;		line 412 in file "../../../src/print.c"
  2886 ;; Parameters:    Size  Location     Type
  2887 ;;  unit            1    wreg     unsigned char 
  2888 ;; Auto vars:     Size  Location     Type
  2889 ;;  unit            1    0[COMRAM] unsigned char 
  2890 ;; Return value:  Size  Location     Type
  2891 ;;		None               void
  2892 ;; Registers used:
  2893 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2894 ;; Tracked objects:
  2895 ;;		On entry : F/0
  2896 ;;		On exit  : 0/0
  2897 ;;		Unchanged: 0/0
  2898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2899 ;;      Params:         0       0       0       0       0       0       0       0       0
  2900 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2901 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2902 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2903 ;;Total ram usage:        2 bytes
  2904 ;; Hardware stack levels used:    1
  2905 ;; Hardware stack levels required when called:    5
  2906 ;; This function calls:
  2907 ;;		_lcd_gotoxy
  2908 ;;		_ser_puts
  2909 ;; This function is called by:
  2910 ;;		_measure_capacitance
  2911 ;;		_measure_inductance
  2912 ;; This function uses a non-reentrant model
  2913 ;;
  2914                           
  2915                           	psect	text6
  2916  002810                     __ptext6:
  2917                           	opt stack 0
  2918  002810                     _print_unit:
  2919                           	opt stack 24
  2920                           
  2921                           ; BSR set to: 0
  2922                           ;print.c: 420: static const char* units[8] = {"H", "mH", "uH", "nH", "mF", "uF", "nF", "
      +                          pF"};
  2923                           ;print.c: 421: lcd_gotoxy(14, 0);
  2924                           
  2925                           ;incstack = 0
  2926  002810  6A08               	clrf	lcd_gotoxy@row,c
  2927  002812  0E0E               	movlw	14
  2928  002814  EC50  F013         	call	_lcd_gotoxy
  2929                           
  2930                           ;print.c: 425: lcd_gotoxy(16 - (buffer.n - buffer.p), 0);
  2931  002818  6A08               	clrf	lcd_gotoxy@row,c
  2932  00281A  0100               	movlb	0	; () banked
  2933  00281C  39E4               	swapf	(_buffer+16)& (0+255),w,b
  2934  00281E  0B0F               	andlw	15
  2935  002820  6E0E               	movwf	??_print_unit& (0+255),c
  2936  002822  51E4               	movf	(_buffer+16)& (0+255),w,b
  2937  002824  0B0F               	andlw	15
  2938  002826  6E0F               	movwf	(??_print_unit+1)& (0+255),c
  2939  002828  500E               	movf	??_print_unit,w,c
  2940  00282A  5C0F               	subwf	??_print_unit+1,w,c
  2941  00282C  0F10               	addlw	16
  2942  00282E  EC50  F013         	call	_lcd_gotoxy
  2943                           
  2944                           ;print.c: 428: ser_puts("\r\n");
  2945  002832  0E9B               	movlw	(STR_29+3)& (0+255)
  2946  002834  EF64  F014         	goto	_ser_puts
  2947  002838                     __end_of_print_unit:
  2948                           	opt stack 0
  2949                           tblptru	equ	0xFF8
  2950                           tblptrh	equ	0xFF7
  2951                           tblptrl	equ	0xFF6
  2952                           tablat	equ	0xFF5
  2953                           prodl	equ	0xFF3
  2954                           intcon	equ	0xFF2
  2955                           intcon2	equ	0xFF1
  2956                           postinc0	equ	0xFEE
  2957                           wreg	equ	0xFE8
  2958                           postdec1	equ	0xFE5
  2959                           fsr1l	equ	0xFE1
  2960                           indf2	equ	0xFDF
  2961                           postinc2	equ	0xFDE
  2962                           postdec2	equ	0xFDD
  2963                           fsr2h	equ	0xFDA
  2964                           fsr2l	equ	0xFD9
  2965                           status	equ	0xFD8
  2966                           
  2967 ;; *************** function _print_reading *****************
  2968 ;; Defined at:
  2969 ;;		line 433 in file "../../../src/print.c"
  2970 ;; Parameters:    Size  Location     Type
  2971 ;;  measurement     2   53[COMRAM] unsigned int 
  2972 ;; Auto vars:     Size  Location     Type
  2973 ;;		None
  2974 ;; Return value:  Size  Location     Type
  2975 ;;		None               void
  2976 ;; Registers used:
  2977 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2978 ;; Tracked objects:
  2979 ;;		On entry : F/0
  2980 ;;		On exit  : 0/0
  2981 ;;		Unchanged: 0/0
  2982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2983 ;;      Params:         2       0       0       0       0       0       0       0       0
  2984 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2985 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2986 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2987 ;;Total ram usage:        6 bytes
  2988 ;; Hardware stack levels used:    1
  2989 ;; Hardware stack levels required when called:    5
  2990 ;; This function calls:
  2991 ;;		___lwdiv
  2992 ;;		___lwmod
  2993 ;;		_format_number
  2994 ;;		_lcd_gotoxy
  2995 ;;		_lcd_puts
  2996 ;; This function is called by:
  2997 ;;		_measure_capacitance
  2998 ;;		_measure_inductance
  2999 ;; This function uses a non-reentrant model
  3000 ;;
  3001                           
  3002                           	psect	text7
  3003  00235E                     __ptext7:
  3004                           	opt stack 0
  3005  00235E                     _print_reading:
  3006                           	opt stack 24
  3007                           
  3008                           ; BSR set to: 0
  3009                           ;print.c: 460: lcd_gotoxy(9, 0);
  3010                           
  3011                           ;incstack = 0
  3012  00235E  6A08               	clrf	lcd_gotoxy@row,c
  3013  002360  0E09               	movlw	9
  3014  002362  EC50  F013         	call	_lcd_gotoxy
  3015                           
  3016                           ;print.c: 461: lcd_puts("     ");
  3017  002366  0E92               	movlw	(STR_30+1)& (0+255)
  3018  002368  ECC9  F013         	call	_lcd_puts
  3019                           
  3020                           ;print.c: 462: lcd_gotoxy(9, 0);
  3021  00236C  6A08               	clrf	lcd_gotoxy@row,c
  3022  00236E  0E09               	movlw	9
  3023  002370  EC50  F013         	call	_lcd_gotoxy
  3024                           
  3025                           ;print.c: 464: format_number( measurement / 100, 10, 0);
  3026  002374  C036  F004         	movff	print_reading@measurement,___lwdiv@dividend
  3027  002378  C037  F005         	movff	print_reading@measurement+1,___lwdiv@dividend+1
  3028  00237C  6A07               	clrf	___lwdiv@divisor+1,c
  3029  00237E  0E64               	movlw	100
  3030  002380  6E06               	movwf	___lwdiv@divisor,c
  3031  002382  ECA9  F012         	call	___lwdiv	;wreg free
  3032  002386  C004  F038         	movff	?___lwdiv,_print_reading$1103
  3033  00238A  C005  F039         	movff	?___lwdiv+1,_print_reading$1103+1
  3034                           
  3035                           ;print.c: 464: format_number( measurement / 100, 10, 0);
  3036  00238E  C038  F00B         	movff	_print_reading$1103,format_number@n
  3037  002392  C039  F00C         	movff	_print_reading$1103+1,format_number@n+1
  3038  002396  0E0A               	movlw	10
  3039  002398  6E0D               	movwf	format_number@base,c
  3040  00239A  6A0E               	clrf	format_number@pad,c
  3041  00239C  EC48  F010         	call	_format_number	;wreg free
  3042                           
  3043                           ;print.c: 466: format_number( measurement % 100, 10, 0);
  3044  0023A0  C036  F004         	movff	print_reading@measurement,___lwmod@dividend
  3045  0023A4  C037  F005         	movff	print_reading@measurement+1,___lwmod@dividend+1
  3046  0023A8  6A07               	clrf	___lwmod@divisor+1,c
  3047  0023AA  0E64               	movlw	100
  3048  0023AC  6E06               	movwf	___lwmod@divisor,c
  3049  0023AE  EC14  F013         	call	___lwmod	;wreg free
  3050  0023B2  C004  F03A         	movff	?___lwmod,_print_reading$1104
  3051  0023B6  C005  F03B         	movff	?___lwmod+1,_print_reading$1104+1
  3052                           
  3053                           ;print.c: 466: format_number( measurement % 100, 10, 0);
  3054  0023BA  C03A  F00B         	movff	_print_reading$1104,format_number@n
  3055  0023BE  C03B  F00C         	movff	_print_reading$1104+1,format_number@n+1
  3056  0023C2  0E0A               	movlw	10
  3057  0023C4  6E0D               	movwf	format_number@base,c
  3058  0023C6  6A0E               	clrf	format_number@pad,c
  3059  0023C8  EF48  F010         	goto	_format_number	;wreg free
  3060  0023CC                     __end_of_print_reading:
  3061                           	opt stack 0
  3062                           tblptru	equ	0xFF8
  3063                           tblptrh	equ	0xFF7
  3064                           tblptrl	equ	0xFF6
  3065                           tablat	equ	0xFF5
  3066                           prodl	equ	0xFF3
  3067                           intcon	equ	0xFF2
  3068                           intcon2	equ	0xFF1
  3069                           postinc0	equ	0xFEE
  3070                           wreg	equ	0xFE8
  3071                           postdec1	equ	0xFE5
  3072                           fsr1l	equ	0xFE1
  3073                           indf2	equ	0xFDF
  3074                           postinc2	equ	0xFDE
  3075                           postdec2	equ	0xFDD
  3076                           fsr2h	equ	0xFDA
  3077                           fsr2l	equ	0xFD9
  3078                           status	equ	0xFD8
  3079                           
  3080 ;; *************** function _format_xint32 *****************
  3081 ;; Defined at:
  3082 ;;		line 49 in file "../../../lib/format.c"
  3083 ;; Parameters:    Size  Location     Type
  3084 ;;  x               4   53[COMRAM] unsigned long 
  3085 ;; Auto vars:     Size  Location     Type
  3086 ;;		None
  3087 ;; Return value:  Size  Location     Type
  3088 ;;		None               void
  3089 ;; Registers used:
  3090 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3091 ;; Tracked objects:
  3092 ;;		On entry : 0/0
  3093 ;;		On exit  : 0/0
  3094 ;;		Unchanged: 0/0
  3095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3096 ;;      Params:         4       0       0       0       0       0       0       0       0
  3097 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3098 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3099 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3100 ;;Total ram usage:        4 bytes
  3101 ;; Hardware stack levels used:    1
  3102 ;; Hardware stack levels required when called:    3
  3103 ;; This function calls:
  3104 ;;		_buffer_putch
  3105 ;;		_format_number
  3106 ;; This function is called by:
  3107 ;;		_measure_capacitance
  3108 ;; This function uses a non-reentrant model
  3109 ;;
  3110                           
  3111                           	psect	text8
  3112  0026D6                     __ptext8:
  3113                           	opt stack 0
  3114  0026D6                     _format_xint32:
  3115                           	opt stack 26
  3116                           
  3117                           ;format.c: 50: buffer_putch('0');
  3118                           
  3119                           ;incstack = 0
  3120  0026D6  0E30               	movlw	48
  3121  0026D8  EC84  F012         	call	_buffer_putch
  3122                           
  3123                           ;format.c: 51: buffer_putch('x');
  3124  0026DC  0E78               	movlw	120
  3125  0026DE  EC84  F012         	call	_buffer_putch
  3126                           
  3127                           ;format.c: 52: format_number((uint16_t)(x >> 16), 16, -4);
  3128  0026E2  C038  F00B         	movff	format_xint32@x+2,format_number@n
  3129  0026E6  C039  F00C         	movff	format_xint32@x+3,format_number@n+1
  3130  0026EA  0E10               	movlw	16
  3131  0026EC  6E0D               	movwf	format_number@base,c
  3132  0026EE  0EFC               	movlw	252
  3133  0026F0  6E0E               	movwf	format_number@pad,c
  3134  0026F2  EC48  F010         	call	_format_number	;wreg free
  3135                           
  3136                           ;format.c: 53: format_number((uint16_t)(x & 0xffff), 16, -4);
  3137  0026F6  C036  F00B         	movff	format_xint32@x,format_number@n
  3138  0026FA  C037  F00C         	movff	format_xint32@x+1,format_number@n+1
  3139  0026FE  0E10               	movlw	16
  3140  002700  6E0D               	movwf	format_number@base,c
  3141  002702  0EFC               	movlw	252
  3142  002704  6E0E               	movwf	format_number@pad,c
  3143  002706  EF48  F010         	goto	_format_number	;wreg free
  3144  00270A                     __end_of_format_xint32:
  3145                           	opt stack 0
  3146                           tblptru	equ	0xFF8
  3147                           tblptrh	equ	0xFF7
  3148                           tblptrl	equ	0xFF6
  3149                           tablat	equ	0xFF5
  3150                           prodl	equ	0xFF3
  3151                           intcon	equ	0xFF2
  3152                           intcon2	equ	0xFF1
  3153                           postinc0	equ	0xFEE
  3154                           wreg	equ	0xFE8
  3155                           postdec1	equ	0xFE5
  3156                           fsr1l	equ	0xFE1
  3157                           indf2	equ	0xFDF
  3158                           postinc2	equ	0xFDE
  3159                           postdec2	equ	0xFDD
  3160                           fsr2h	equ	0xFDA
  3161                           fsr2l	equ	0xFD9
  3162                           status	equ	0xFD8
  3163                           
  3164 ;; *************** function _format_double *****************
  3165 ;; Defined at:
  3166 ;;		line 75 in file "../../../lib/format.c"
  3167 ;; Parameters:    Size  Location     Type
  3168 ;;  num             4   49[BANK0 ] unsigned long 
  3169 ;; Auto vars:     Size  Location     Type
  3170 ;;  weight          4   61[BANK0 ] unsigned long 
  3171 ;;  m               2   67[BANK0 ] short 
  3172 ;;  digit           2   65[BANK0 ] short 
  3173 ;; Return value:  Size  Location     Type
  3174 ;;		None               void
  3175 ;; Registers used:
  3176 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3177 ;; Tracked objects:
  3178 ;;		On entry : 0/0
  3179 ;;		On exit  : 0/0
  3180 ;;		Unchanged: 0/0
  3181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3182 ;;      Params:         0       4       0       0       0       0       0       0       0
  3183 ;;      Locals:         0      16       0       0       0       0       0       0       0
  3184 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3185 ;;      Totals:         0      20       0       0       0       0       0       0       0
  3186 ;;Total ram usage:       20 bytes
  3187 ;; Hardware stack levels used:    1
  3188 ;; Hardware stack levels required when called:    6
  3189 ;; This function calls:
  3190 ;;		___awtofl
  3191 ;;		___fldiv
  3192 ;;		___flge
  3193 ;;		___flmul
  3194 ;;		___flsub
  3195 ;;		___fltol
  3196 ;;		_buffer_putch
  3197 ;;		_floor
  3198 ;;		_log10
  3199 ;;		_pow
  3200 ;; This function is called by:
  3201 ;;		_measure_capacitance
  3202 ;;		_main
  3203 ;; This function uses a non-reentrant model
  3204 ;;
  3205                           
  3206                           	psect	text9
  3207  00150E                     __ptext9:
  3208                           	opt stack 0
  3209  00150E                     _format_double:
  3210                           	opt stack 23
  3211                           
  3212                           ;format.c: 76: short m = (short)log10(num);
  3213                           
  3214                           ;incstack = 0
  3215  00150E  C091  F04A         	movff	format_double@num,log10@x
  3216  001512  C092  F04B         	movff	format_double@num+1,log10@x+1
  3217  001516  C093  F04C         	movff	format_double@num+2,log10@x+2
  3218  00151A  C094  F04D         	movff	format_double@num+3,log10@x+3
  3219  00151E  ECE6  F011         	call	_log10	;wreg free
  3220  001522  C04A  F052         	movff	?_log10,___fltol@f1
  3221  001526  C04B  F053         	movff	?_log10+1,___fltol@f1+1
  3222  00152A  C04C  F054         	movff	?_log10+2,___fltol@f1+2
  3223  00152E  C04D  F055         	movff	?_log10+3,___fltol@f1+3
  3224  001532  ECED  F010         	call	___fltol	;wreg free
  3225  001536  C052  F0A3         	movff	?___fltol,format_double@m
  3226  00153A  C053  F0A4         	movff	?___fltol+1,format_double@m+1
  3227                           
  3228                           ;format.c: 77: short digit;
  3229                           ;format.c: 80: while(num > 0 + 1.19209290e-07) {
  3230  00153E  D099               	goto	l3964
  3231  001540                     l3946:
  3232                           
  3233                           ;format.c: 81: double weight = pow(10.0l, m);
  3234  001540  C0A3  F00E         	movff	format_double@m,___awtofl@c
  3235  001544  C0A4  F00F         	movff	format_double@m+1,___awtofl@c+1
  3236  001548  EC33  F013         	call	___awtofl	;wreg free
  3237  00154C  C00E  F095         	movff	?___awtofl,_format_double$1091
  3238  001550  C00F  F096         	movff	?___awtofl+1,_format_double$1091+1
  3239  001554  C010  F097         	movff	?___awtofl+2,_format_double$1091+2
  3240  001558  C011  F098         	movff	?___awtofl+3,_format_double$1091+3
  3241                           
  3242                           ;format.c: 81: double weight = pow(10.0l, m);
  3243  00155C  0100               	movlb	0	; () banked
  3244  00155E  6B7C               	clrf	pow@x& (0+255),b
  3245  001560  6B7D               	clrf	(pow@x+1)& (0+255),b
  3246  001562  0E20               	movlw	32
  3247  001564  6F7E               	movwf	(pow@x+2)& (0+255),b
  3248  001566  0E41               	movlw	65
  3249  001568  6F7F               	movwf	(pow@x+3)& (0+255),b
  3250  00156A  C095  F080         	movff	_format_double$1091,pow@y
  3251  00156E  C096  F081         	movff	_format_double$1091+1,pow@y+1
  3252  001572  C097  F082         	movff	_format_double$1091+2,pow@y+2
  3253  001576  C098  F083         	movff	_format_double$1091+3,pow@y+3
  3254  00157A  ECBE  F009         	call	_pow	;wreg free
  3255  00157E  C07C  F09D         	movff	?_pow,format_double@weight
  3256  001582  C07D  F09E         	movff	?_pow+1,format_double@weight+1
  3257  001586  C07E  F09F         	movff	?_pow+2,format_double@weight+2
  3258  00158A  C07F  F0A0         	movff	?_pow+3,format_double@weight+3
  3259                           
  3260                           ; BSR set to: 0
  3261                           ;format.c: 82: digit = (short)floor(num / weight);
  3262  00158E  C09D  F012         	movff	format_double@weight,___fldiv@f2
  3263  001592  C09E  F013         	movff	format_double@weight+1,___fldiv@f2+1
  3264  001596  C09F  F014         	movff	format_double@weight+2,___fldiv@f2+2
  3265  00159A  C0A0  F015         	movff	format_double@weight+3,___fldiv@f2+3
  3266  00159E  C091  F00E         	movff	format_double@num,___fldiv@f1
  3267  0015A2  C092  F00F         	movff	format_double@num+1,___fldiv@f1+1
  3268  0015A6  C093  F010         	movff	format_double@num+2,___fldiv@f1+2
  3269  0015AA  C094  F011         	movff	format_double@num+3,___fldiv@f1+3
  3270  0015AE  EC9B  F00F         	call	___fldiv	;wreg free
  3271  0015B2  C00E  F067         	movff	?___fldiv,floor@x
  3272  0015B6  C00F  F068         	movff	?___fldiv+1,floor@x+1
  3273  0015BA  C010  F069         	movff	?___fldiv+2,floor@x+2
  3274  0015BE  C011  F06A         	movff	?___fldiv+3,floor@x+3
  3275  0015C2  EC84  F00D         	call	_floor	;wreg free
  3276  0015C6  C067  F099         	movff	?_floor,_format_double$1092
  3277  0015CA  C068  F09A         	movff	?_floor+1,_format_double$1092+1
  3278  0015CE  C069  F09B         	movff	?_floor+2,_format_double$1092+2
  3279  0015D2  C06A  F09C         	movff	?_floor+3,_format_double$1092+3
  3280                           
  3281                           ;format.c: 82: digit = (short)floor(num / weight);
  3282  0015D6  C099  F052         	movff	_format_double$1092,___fltol@f1
  3283  0015DA  C09A  F053         	movff	_format_double$1092+1,___fltol@f1+1
  3284  0015DE  C09B  F054         	movff	_format_double$1092+2,___fltol@f1+2
  3285  0015E2  C09C  F055         	movff	_format_double$1092+3,___fltol@f1+3
  3286  0015E6  ECED  F010         	call	___fltol	;wreg free
  3287  0015EA  C052  F0A1         	movff	?___fltol,format_double@digit
  3288  0015EE  C053  F0A2         	movff	?___fltol+1,format_double@digit+1
  3289                           
  3290                           ; BSR set to: 0
  3291                           ;format.c: 83: num -= (digit * weight);
  3292  0015F2  C091  F038         	movff	format_double@num,___flsub@f1
  3293  0015F6  C092  F039         	movff	format_double@num+1,___flsub@f1+1
  3294  0015FA  C093  F03A         	movff	format_double@num+2,___flsub@f1+2
  3295  0015FE  C094  F03B         	movff	format_double@num+3,___flsub@f1+3
  3296  001602  C09D  F021         	movff	format_double@weight,___flmul@f2
  3297  001606  C09E  F022         	movff	format_double@weight+1,___flmul@f2+1
  3298  00160A  C09F  F023         	movff	format_double@weight+2,___flmul@f2+2
  3299  00160E  C0A0  F024         	movff	format_double@weight+3,___flmul@f2+3
  3300  001612  C0A1  F00E         	movff	format_double@digit,___awtofl@c
  3301  001616  C0A2  F00F         	movff	format_double@digit+1,___awtofl@c+1
  3302  00161A  EC33  F013         	call	___awtofl	;wreg free
  3303  00161E  C00E  F01D         	movff	?___awtofl,___flmul@f1
  3304  001622  C00F  F01E         	movff	?___awtofl+1,___flmul@f1+1
  3305  001626  C010  F01F         	movff	?___awtofl+2,___flmul@f1+2
  3306  00162A  C011  F020         	movff	?___awtofl+3,___flmul@f1+3
  3307  00162E  ECD8  F00E         	call	___flmul	;wreg free
  3308  001632  C01D  F03C         	movff	?___flmul,___flsub@f2
  3309  001636  C01E  F03D         	movff	?___flmul+1,___flsub@f2+1
  3310  00163A  C01F  F03E         	movff	?___flmul+2,___flsub@f2+2
  3311  00163E  C020  F03F         	movff	?___flmul+3,___flsub@f2+3
  3312  001642  ECF2  F012         	call	___flsub	;wreg free
  3313  001646  C038  F091         	movff	?___flsub,format_double@num
  3314  00164A  C039  F092         	movff	?___flsub+1,format_double@num+1
  3315  00164E  C03A  F093         	movff	?___flsub+2,format_double@num+2
  3316  001652  C03B  F094         	movff	?___flsub+3,format_double@num+3
  3317                           
  3318                           ;format.c: 84: buffer_putch((char)('0' + digit));
  3319  001656  0100               	movlb	0	; () banked
  3320  001658  51A1               	movf	format_double@digit& (0+255),w,b
  3321  00165A  0F30               	addlw	48
  3322  00165C  EC84  F012         	call	_buffer_putch
  3323                           
  3324                           ; BSR set to: 0
  3325                           ;format.c: 85: if(m == 0)
  3326  001660  51A3               	movf	format_double@m& (0+255),w,b
  3327  001662  11A4               	iorwf	(format_double@m+1)& (0+255),w,b
  3328  001664  E103               	bnz	l3962
  3329                           
  3330                           ; BSR set to: 0
  3331                           ;format.c: 86: buffer_putch('.');
  3332  001666  0E2E               	movlw	46
  3333  001668  EC84  F012         	call	_buffer_putch
  3334  00166C                     l3962:
  3335                           
  3336                           ; BSR set to: 0
  3337                           ;format.c: 87: m--;
  3338  00166C  07A3               	decf	format_double@m& (0+255),f,b
  3339  00166E  A0D8               	btfss	status,0,c
  3340  001670  07A4               	decf	(format_double@m+1)& (0+255),f,b
  3341  001672                     l3964:
  3342                           
  3343                           ; BSR set to: 0
  3344  001672  6A04               	clrf	___flge@ff1,c
  3345  001674  6A05               	clrf	___flge@ff1+1,c
  3346  001676  6A06               	clrf	___flge@ff1+2,c
  3347  001678  0E34               	movlw	52
  3348  00167A  6E07               	movwf	___flge@ff1+3,c
  3349  00167C  C091  F008         	movff	format_double@num,___flge@ff2
  3350  001680  C092  F009         	movff	format_double@num+1,___flge@ff2+1
  3351  001684  C093  F00A         	movff	format_double@num+2,___flge@ff2+2
  3352  001688  C094  F00B         	movff	format_double@num+3,___flge@ff2+3
  3353  00168C  EC39  F012         	call	___flge	;wreg free
  3354  001690  B0D8               	btfsc	status,0,c
  3355  001692  0012               	return		;funcret
  3356  001694  D755               	goto	l3946
  3357  001696                     __end_of_format_double:
  3358                           	opt stack 0
  3359                           tblptru	equ	0xFF8
  3360                           tblptrh	equ	0xFF7
  3361                           tblptrl	equ	0xFF6
  3362                           tablat	equ	0xFF5
  3363                           prodl	equ	0xFF3
  3364                           intcon	equ	0xFF2
  3365                           intcon2	equ	0xFF1
  3366                           postinc0	equ	0xFEE
  3367                           wreg	equ	0xFE8
  3368                           postdec1	equ	0xFE5
  3369                           fsr1l	equ	0xFE1
  3370                           indf2	equ	0xFDF
  3371                           postinc2	equ	0xFDE
  3372                           postdec2	equ	0xFDD
  3373                           fsr2h	equ	0xFDA
  3374                           fsr2l	equ	0xFD9
  3375                           status	equ	0xFD8
  3376                           
  3377 ;; *************** function _pow *****************
  3378 ;; Defined at:
  3379 ;;		line 5 in file "/opt/microchip/xc8/v1.34/sources/common/pow.c"
  3380 ;; Parameters:    Size  Location     Type
  3381 ;;  x               4   28[BANK0 ] short 
  3382 ;;  y               4   32[BANK0 ] short 
  3383 ;; Auto vars:     Size  Location     Type
  3384 ;;  yi              4   45[BANK0 ] unsigned long 
  3385 ;;  sign            1   44[BANK0 ] unsigned char 
  3386 ;; Return value:  Size  Location     Type
  3387 ;;                  4   28[BANK0 ] unsigned char 
  3388 ;; Registers used:
  3389 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3390 ;; Tracked objects:
  3391 ;;		On entry : F/0
  3392 ;;		On exit  : F/0
  3393 ;;		Unchanged: 0/0
  3394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3395 ;;      Params:         0       8       0       0       0       0       0       0       0
  3396 ;;      Locals:         0      13       0       0       0       0       0       0       0
  3397 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3398 ;;      Totals:         0      21       0       0       0       0       0       0       0
  3399 ;;Total ram usage:       21 bytes
  3400 ;; Hardware stack levels used:    1
  3401 ;; Hardware stack levels required when called:    5
  3402 ;; This function calls:
  3403 ;;		___flge
  3404 ;;		___flmul
  3405 ;;		___flneg
  3406 ;;		___fltol
  3407 ;;		___lltofl
  3408 ;;		_exp
  3409 ;;		_log
  3410 ;; This function is called by:
  3411 ;;		_format_double
  3412 ;; This function uses a non-reentrant model
  3413 ;;
  3414                           
  3415                           	psect	text10
  3416  00137C                     __ptext10:
  3417                           	opt stack 0
  3418  00137C                     _pow:
  3419                           	opt stack 23
  3420                           
  3421                           ; BSR set to: 0
  3422                           
  3423                           ;incstack = 0
  3424  00137C  6B8C               	clrf	pow@sign& (0+255),b
  3425                           
  3426                           ; BSR set to: 0
  3427  00137E  517C               	movf	pow@x& (0+255),w,b
  3428  001380  117D               	iorwf	(pow@x+1)& (0+255),w,b
  3429  001382  117E               	iorwf	(pow@x+2)& (0+255),w,b
  3430  001384  117F               	iorwf	(pow@x+3)& (0+255),w,b
  3431  001386  E114               	bnz	l3916
  3432                           
  3433                           ; BSR set to: 0
  3434  001388  6A04               	clrf	___flge@ff1,c
  3435  00138A  6A05               	clrf	___flge@ff1+1,c
  3436  00138C  6A06               	clrf	___flge@ff1+2,c
  3437  00138E  6A07               	clrf	___flge@ff1+3,c
  3438  001390  C080  F008         	movff	pow@y,___flge@ff2
  3439  001394  C081  F009         	movff	pow@y+1,___flge@ff2+1
  3440  001398  C082  F00A         	movff	pow@y+2,___flge@ff2+2
  3441  00139C  C083  F00B         	movff	pow@y+3,___flge@ff2+3
  3442  0013A0  EC39  F012         	call	___flge	;wreg free
  3443  0013A4  0100               	movlb	0	; () banked
  3444  0013A6  6B7C               	clrf	?_pow& (0+255),b
  3445  0013A8  6B7D               	clrf	(?_pow+1)& (0+255),b
  3446  0013AA  6B7E               	clrf	(?_pow+2)& (0+255),b
  3447  0013AC  6B7F               	clrf	(?_pow+3)& (0+255),b
  3448  0013AE  0012               	return	
  3449  0013B0                     l3916:
  3450                           
  3451                           ; BSR set to: 0
  3452  0013B0  5180               	movf	pow@y& (0+255),w,b
  3453  0013B2  1181               	iorwf	(pow@y+1)& (0+255),w,b
  3454  0013B4  1182               	iorwf	(pow@y+2)& (0+255),w,b
  3455  0013B6  1183               	iorwf	(pow@y+3)& (0+255),w,b
  3456  0013B8  E108               	bnz	l3922
  3457                           
  3458                           ; BSR set to: 0
  3459  0013BA  0E00               	movlw	0
  3460  0013BC  6F7C               	movwf	?_pow& (0+255),b
  3461  0013BE  6F7D               	movwf	(?_pow+1)& (0+255),b
  3462  0013C0  0E80               	movlw	128
  3463  0013C2  6F7E               	movwf	(?_pow+2)& (0+255),b
  3464  0013C4  0E3F               	movlw	63
  3465  0013C6  6F7F               	movwf	(?_pow+3)& (0+255),b
  3466  0013C8  0C3F               	retlw	63
  3467  0013CA                     l3922:
  3468                           
  3469                           ; BSR set to: 0
  3470  0013CA  AF7F               	btfss	(pow@x+3)& (0+255),7,b
  3471  0013CC  D043               	goto	l3932
  3472                           
  3473                           ; BSR set to: 0
  3474  0013CE  C080  F052         	movff	pow@y,___fltol@f1
  3475  0013D2  C081  F053         	movff	pow@y+1,___fltol@f1+1
  3476  0013D6  C082  F054         	movff	pow@y+2,___fltol@f1+2
  3477  0013DA  C083  F055         	movff	pow@y+3,___fltol@f1+3
  3478  0013DE  ECED  F010         	call	___fltol	;wreg free
  3479  0013E2  C052  F08D         	movff	?___fltol,pow@yi
  3480  0013E6  C053  F08E         	movff	?___fltol+1,pow@yi+1
  3481  0013EA  C054  F08F         	movff	?___fltol+2,pow@yi+2
  3482  0013EE  C055  F090         	movff	?___fltol+3,pow@yi+3
  3483  0013F2  C08D  F00E         	movff	pow@yi,___lltofl@c
  3484  0013F6  C08E  F00F         	movff	pow@yi+1,___lltofl@c+1
  3485  0013FA  C08F  F010         	movff	pow@yi+2,___lltofl@c+2
  3486  0013FE  C090  F011         	movff	pow@yi+3,___lltofl@c+3
  3487  001402  EC9C  F013         	call	___lltofl	;wreg free
  3488  001406  0100               	movlb	0	; () banked
  3489  001408  5180               	movf	pow@y& (0+255),w,b
  3490  00140A  180E               	xorwf	?___lltofl,w,c
  3491  00140C  E109               	bnz	u3250
  3492  00140E  5181               	movf	(pow@y+1)& (0+255),w,b
  3493  001410  180F               	xorwf	?___lltofl+1,w,c
  3494  001412  E106               	bnz	u3250
  3495  001414  5182               	movf	(pow@y+2)& (0+255),w,b
  3496  001416  1810               	xorwf	?___lltofl+2,w,c
  3497  001418  E103               	bnz	u3250
  3498  00141A  5183               	movf	(pow@y+3)& (0+255),w,b
  3499  00141C  1811               	xorwf	?___lltofl+3,w,c
  3500  00141E  E005               	bz	l3928
  3501  001420                     u3250:
  3502                           
  3503                           ; BSR set to: 0
  3504  001420  6B7C               	clrf	?_pow& (0+255),b
  3505  001422  6B7D               	clrf	(?_pow+1)& (0+255),b
  3506  001424  6B7E               	clrf	(?_pow+2)& (0+255),b
  3507  001426  6B7F               	clrf	(?_pow+3)& (0+255),b
  3508  001428  0012               	return	
  3509  00142A                     l3928:
  3510                           
  3511                           ; BSR set to: 0
  3512  00142A  518D               	movf	pow@yi& (0+255),w,b
  3513  00142C  0B01               	andlw	1
  3514  00142E  6F8C               	movwf	pow@sign& (0+255),b
  3515                           
  3516                           ; BSR set to: 0
  3517  001430  C07C  F004         	movff	pow@x,___flneg@f1
  3518  001434  C07D  F005         	movff	pow@x+1,___flneg@f1+1
  3519  001438  C07E  F006         	movff	pow@x+2,___flneg@f1+2
  3520  00143C  C07F  F007         	movff	pow@x+3,___flneg@f1+3
  3521  001440  EC54  F014         	call	___flneg	;wreg free
  3522  001444  C004  F07C         	movff	?___flneg,pow@x
  3523  001448  C005  F07D         	movff	?___flneg+1,pow@x+1
  3524  00144C  C006  F07E         	movff	?___flneg+2,pow@x+2
  3525  001450  C007  F07F         	movff	?___flneg+3,pow@x+3
  3526  001454                     l3932:
  3527                           
  3528                           ; BSR set to: 0
  3529  001454  C07C  F044         	movff	pow@x,log@x
  3530  001458  C07D  F045         	movff	pow@x+1,log@x+1
  3531  00145C  C07E  F046         	movff	pow@x+2,log@x+2
  3532  001460  C07F  F047         	movff	pow@x+3,log@x+3
  3533  001464  ECF8  F00B         	call	_log	;wreg free
  3534  001468  C044  F084         	movff	?_log,_pow$1106
  3535  00146C  C045  F085         	movff	?_log+1,_pow$1106+1
  3536  001470  C046  F086         	movff	?_log+2,_pow$1106+2
  3537  001474  C047  F087         	movff	?_log+3,_pow$1106+3
  3538  001478  C084  F01D         	movff	_pow$1106,___flmul@f1
  3539  00147C  C085  F01E         	movff	_pow$1106+1,___flmul@f1+1
  3540  001480  C086  F01F         	movff	_pow$1106+2,___flmul@f1+2
  3541  001484  C087  F020         	movff	_pow$1106+3,___flmul@f1+3
  3542  001488  C080  F021         	movff	pow@y,___flmul@f2
  3543  00148C  C081  F022         	movff	pow@y+1,___flmul@f2+1
  3544  001490  C082  F023         	movff	pow@y+2,___flmul@f2+2
  3545  001494  C083  F024         	movff	pow@y+3,___flmul@f2+3
  3546  001498  ECD8  F00E         	call	___flmul	;wreg free
  3547  00149C  C01D  F088         	movff	?___flmul,_pow$1107
  3548  0014A0  C01E  F089         	movff	?___flmul+1,_pow$1107+1
  3549  0014A4  C01F  F08A         	movff	?___flmul+2,_pow$1107+2
  3550  0014A8  C020  F08B         	movff	?___flmul+3,_pow$1107+3
  3551  0014AC  C088  F071         	movff	_pow$1107,exp@x
  3552  0014B0  C089  F072         	movff	_pow$1107+1,exp@x+1
  3553  0014B4  C08A  F073         	movff	_pow$1107+2,exp@x+2
  3554  0014B8  C08B  F074         	movff	_pow$1107+3,exp@x+3
  3555  0014BC  ECB0  F008         	call	_exp	;wreg free
  3556  0014C0  C071  F07C         	movff	?_exp,pow@x
  3557  0014C4  C072  F07D         	movff	?_exp+1,pow@x+1
  3558  0014C8  C073  F07E         	movff	?_exp+2,pow@x+2
  3559  0014CC  C074  F07F         	movff	?_exp+3,pow@x+3
  3560  0014D0  0100               	movlb	0	; () banked
  3561  0014D2  518C               	movf	pow@sign& (0+255),w,b
  3562  0014D4  E013               	bz	l1157
  3563                           
  3564                           ; BSR set to: 0
  3565  0014D6  C07C  F004         	movff	pow@x,___flneg@f1
  3566  0014DA  C07D  F005         	movff	pow@x+1,___flneg@f1+1
  3567  0014DE  C07E  F006         	movff	pow@x+2,___flneg@f1+2
  3568  0014E2  C07F  F007         	movff	pow@x+3,___flneg@f1+3
  3569  0014E6  EC54  F014         	call	___flneg	;wreg free
  3570  0014EA  C004  F07C         	movff	?___flneg,?_pow
  3571  0014EE  C005  F07D         	movff	?___flneg+1,?_pow+1
  3572  0014F2  C006  F07E         	movff	?___flneg+2,?_pow+2
  3573  0014F6  C007  F07F         	movff	?___flneg+3,?_pow+3
  3574  0014FA  0012               	return	
  3575  0014FC                     l1157:
  3576                           
  3577                           ; BSR set to: 0
  3578  0014FC  C07C  F07C         	movff	pow@x,?_pow
  3579  001500  C07D  F07D         	movff	pow@x+1,?_pow+1
  3580  001504  C07E  F07E         	movff	pow@x+2,?_pow+2
  3581  001508  C07F  F07F         	movff	pow@x+3,?_pow+3
  3582                           
  3583                           ; BSR set to: 0
  3584  00150C  0012               	return		;funcret
  3585  00150E                     __end_of_pow:
  3586                           	opt stack 0
  3587                           tblptru	equ	0xFF8
  3588                           tblptrh	equ	0xFF7
  3589                           tblptrl	equ	0xFF6
  3590                           tablat	equ	0xFF5
  3591                           prodl	equ	0xFF3
  3592                           intcon	equ	0xFF2
  3593                           intcon2	equ	0xFF1
  3594                           postinc0	equ	0xFEE
  3595                           wreg	equ	0xFE8
  3596                           postdec1	equ	0xFE5
  3597                           fsr1l	equ	0xFE1
  3598                           indf2	equ	0xFDF
  3599                           postinc2	equ	0xFDE
  3600                           postdec2	equ	0xFDD
  3601                           fsr2h	equ	0xFDA
  3602                           fsr2l	equ	0xFD9
  3603                           status	equ	0xFD8
  3604                           
  3605 ;; *************** function _exp *****************
  3606 ;; Defined at:
  3607 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/common/exp.c"
  3608 ;; Parameters:    Size  Location     Type
  3609 ;;  x               4   17[BANK0 ] unsigned char 
  3610 ;; Auto vars:     Size  Location     Type
  3611 ;;  exponent        2   25[BANK0 ] int 
  3612 ;;  sign            1   27[BANK0 ] unsigned char 
  3613 ;; Return value:  Size  Location     Type
  3614 ;;                  4   17[BANK0 ] unsigned char 
  3615 ;; Registers used:
  3616 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3617 ;; Tracked objects:
  3618 ;;		On entry : 0/0
  3619 ;;		On exit  : 0/0
  3620 ;;		Unchanged: 0/0
  3621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3622 ;;      Params:         0       4       0       0       0       0       0       0       0
  3623 ;;      Locals:         0       7       0       0       0       0       0       0       0
  3624 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3625 ;;      Totals:         0      11       0       0       0       0       0       0       0
  3626 ;;Total ram usage:       11 bytes
  3627 ;; Hardware stack levels used:    1
  3628 ;; Hardware stack levels required when called:    4
  3629 ;; This function calls:
  3630 ;;		___awtofl
  3631 ;;		___fldiv
  3632 ;;		___flge
  3633 ;;		___flmul
  3634 ;;		___flneg
  3635 ;;		___flsub
  3636 ;;		___fltol
  3637 ;;		_eval_poly
  3638 ;;		_floor
  3639 ;;		_ldexp
  3640 ;; This function is called by:
  3641 ;;		_pow
  3642 ;; This function uses a non-reentrant model
  3643 ;;
  3644                           
  3645                           	psect	text11
  3646  001160                     __ptext11:
  3647                           	opt stack 0
  3648  001160                     _exp:
  3649                           	opt stack 23
  3650                           
  3651                           ; BSR set to: 0
  3652                           ;incstack = 0
  3653  001160  0100               	movlb	0	; () banked
  3654  001162  5171               	movf	exp@x& (0+255),w,b
  3655  001164  1172               	iorwf	(exp@x+1)& (0+255),w,b
  3656  001166  1173               	iorwf	(exp@x+2)& (0+255),w,b
  3657  001168  1174               	iorwf	(exp@x+3)& (0+255),w,b
  3658  00116A  E108               	bnz	l3870
  3659                           
  3660                           ; BSR set to: 0
  3661  00116C  0E00               	movlw	0
  3662  00116E  6F71               	movwf	?_exp& (0+255),b
  3663  001170  6F72               	movwf	(?_exp+1)& (0+255),b
  3664  001172  0E80               	movlw	128
  3665  001174  6F73               	movwf	(?_exp+2)& (0+255),b
  3666  001176  0E3F               	movlw	63
  3667  001178  6F74               	movwf	(?_exp+3)& (0+255),b
  3668  00117A  0C3F               	retlw	63
  3669  00117C                     l3870:
  3670                           
  3671                           ; BSR set to: 0
  3672  00117C  0E18               	movlw	24
  3673  00117E  6E04               	movwf	___flge@ff1,c
  3674  001180  0E72               	movlw	114
  3675  001182  6E05               	movwf	___flge@ff1+1,c
  3676  001184  0E31               	movlw	49
  3677  001186  6E06               	movwf	___flge@ff1+2,c
  3678  001188  0E44               	movlw	68
  3679  00118A  6E07               	movwf	___flge@ff1+3,c
  3680  00118C  C071  F008         	movff	exp@x,___flge@ff2
  3681  001190  C072  F009         	movff	exp@x+1,___flge@ff2+1
  3682  001194  C073  F00A         	movff	exp@x+2,___flge@ff2+2
  3683  001198  C074  F00B         	movff	exp@x+3,___flge@ff2+3
  3684  00119C  EC39  F012         	call	___flge	;wreg free
  3685  0011A0  E207               	bc	l3876
  3686  0011A2  0100               	movlb	0	; () banked
  3687  0011A4  6971               	setf	?_exp& (0+255),b
  3688  0011A6  6972               	setf	(?_exp+1)& (0+255),b
  3689  0011A8  0E7F               	movlw	127
  3690  0011AA  6F73               	movwf	(?_exp+2)& (0+255),b
  3691  0011AC  6F74               	movwf	(?_exp+3)& (0+255),b
  3692  0011AE  0C7F               	retlw	127
  3693  0011B0                     l3876:
  3694  0011B0  C071  F004         	movff	exp@x,___flge@ff1
  3695  0011B4  C072  F005         	movff	exp@x+1,___flge@ff1+1
  3696  0011B8  C073  F006         	movff	exp@x+2,___flge@ff1+2
  3697  0011BC  C074  F007         	movff	exp@x+3,___flge@ff1+3
  3698  0011C0  0E87               	movlw	135
  3699  0011C2  6E08               	movwf	___flge@ff2,c
  3700  0011C4  0E48               	movlw	72
  3701  0011C6  6E09               	movwf	___flge@ff2+1,c
  3702  0011C8  0E3A               	movlw	58
  3703  0011CA  6E0A               	movwf	___flge@ff2+2,c
  3704  0011CC  0EC4               	movlw	196
  3705  0011CE  6E0B               	movwf	___flge@ff2+3,c
  3706  0011D0  EC39  F012         	call	___flge	;wreg free
  3707  0011D4  E206               	bc	l3880
  3708  0011D6  0100               	movlb	0	; () banked
  3709  0011D8  6B71               	clrf	?_exp& (0+255),b
  3710  0011DA  6B72               	clrf	(?_exp+1)& (0+255),b
  3711  0011DC  6B73               	clrf	(?_exp+2)& (0+255),b
  3712  0011DE  6B74               	clrf	(?_exp+3)& (0+255),b
  3713  0011E0  0012               	return	
  3714  0011E2                     l3880:
  3715  0011E2  0100               	movlb	0	; () banked
  3716  0011E4  0E01               	movlw	1
  3717  0011E6  AF74               	btfss	(exp@x+3)& (0+255),7,b
  3718  0011E8  0E00               	movlw	0
  3719  0011EA  6F7B               	movwf	exp@sign& (0+255),b
  3720                           
  3721                           ; BSR set to: 0
  3722  0011EC  517B               	movf	exp@sign& (0+255),w,b
  3723  0011EE  E012               	bz	l1182
  3724                           
  3725                           ; BSR set to: 0
  3726  0011F0  C071  F004         	movff	exp@x,___flneg@f1
  3727  0011F4  C072  F005         	movff	exp@x+1,___flneg@f1+1
  3728  0011F8  C073  F006         	movff	exp@x+2,___flneg@f1+2
  3729  0011FC  C074  F007         	movff	exp@x+3,___flneg@f1+3
  3730  001200  EC54  F014         	call	___flneg	;wreg free
  3731  001204  C004  F071         	movff	?___flneg,exp@x
  3732  001208  C005  F072         	movff	?___flneg+1,exp@x+1
  3733  00120C  C006  F073         	movff	?___flneg+2,exp@x+2
  3734  001210  C007  F074         	movff	?___flneg+3,exp@x+3
  3735  001214                     l1182:
  3736                           
  3737                           ; BSR set to: 0
  3738  001214  C071  F01D         	movff	exp@x,___flmul@f1
  3739  001218  C072  F01E         	movff	exp@x+1,___flmul@f1+1
  3740  00121C  C073  F01F         	movff	exp@x+2,___flmul@f1+2
  3741  001220  C074  F020         	movff	exp@x+3,___flmul@f1+3
  3742  001224  0E3B               	movlw	59
  3743  001226  6E21               	movwf	___flmul@f2,c
  3744  001228  0EAA               	movlw	170
  3745  00122A  6E22               	movwf	___flmul@f2+1,c
  3746  00122C  0EB8               	movlw	184
  3747  00122E  6E23               	movwf	___flmul@f2+2,c
  3748  001230  0E3F               	movlw	63
  3749  001232  6E24               	movwf	___flmul@f2+3,c
  3750  001234  ECD8  F00E         	call	___flmul	;wreg free
  3751  001238  C01D  F071         	movff	?___flmul,exp@x
  3752  00123C  C01E  F072         	movff	?___flmul+1,exp@x+1
  3753  001240  C01F  F073         	movff	?___flmul+2,exp@x+2
  3754  001244  C020  F074         	movff	?___flmul+3,exp@x+3
  3755  001248  C071  F067         	movff	exp@x,floor@x
  3756  00124C  C072  F068         	movff	exp@x+1,floor@x+1
  3757  001250  C073  F069         	movff	exp@x+2,floor@x+2
  3758  001254  C074  F06A         	movff	exp@x+3,floor@x+3
  3759  001258  EC84  F00D         	call	_floor	;wreg free
  3760  00125C  C067  F075         	movff	?_floor,_exp$1108
  3761  001260  C068  F076         	movff	?_floor+1,_exp$1108+1
  3762  001264  C069  F077         	movff	?_floor+2,_exp$1108+2
  3763  001268  C06A  F078         	movff	?_floor+3,_exp$1108+3
  3764  00126C  C075  F052         	movff	_exp$1108,___fltol@f1
  3765  001270  C076  F053         	movff	_exp$1108+1,___fltol@f1+1
  3766  001274  C077  F054         	movff	_exp$1108+2,___fltol@f1+2
  3767  001278  C078  F055         	movff	_exp$1108+3,___fltol@f1+3
  3768  00127C  ECED  F010         	call	___fltol	;wreg free
  3769  001280  C052  F079         	movff	?___fltol,exp@exponent
  3770  001284  C053  F07A         	movff	?___fltol+1,exp@exponent+1
  3771                           
  3772                           ; BSR set to: 0
  3773  001288  C071  F038         	movff	exp@x,___flsub@f1
  3774  00128C  C072  F039         	movff	exp@x+1,___flsub@f1+1
  3775  001290  C073  F03A         	movff	exp@x+2,___flsub@f1+2
  3776  001294  C074  F03B         	movff	exp@x+3,___flsub@f1+3
  3777  001298  C079  F00E         	movff	exp@exponent,___awtofl@c
  3778  00129C  C07A  F00F         	movff	exp@exponent+1,___awtofl@c+1
  3779  0012A0  EC33  F013         	call	___awtofl	;wreg free
  3780  0012A4  C00E  F03C         	movff	?___awtofl,___flsub@f2
  3781  0012A8  C00F  F03D         	movff	?___awtofl+1,___flsub@f2+1
  3782  0012AC  C010  F03E         	movff	?___awtofl+2,___flsub@f2+2
  3783  0012B0  C011  F03F         	movff	?___awtofl+3,___flsub@f2+3
  3784  0012B4  ECF2  F012         	call	___flsub	;wreg free
  3785  0012B8  C038  F071         	movff	?___flsub,exp@x
  3786  0012BC  C039  F072         	movff	?___flsub+1,exp@x+1
  3787  0012C0  C03A  F073         	movff	?___flsub+2,exp@x+2
  3788  0012C4  C03B  F074         	movff	?___flsub+3,exp@x+3
  3789  0012C8  C071  F038         	movff	exp@x,eval_poly@x
  3790  0012CC  C072  F039         	movff	exp@x+1,eval_poly@x+1
  3791  0012D0  C073  F03A         	movff	exp@x+2,eval_poly@x+2
  3792  0012D4  C074  F03B         	movff	exp@x+3,eval_poly@x+3
  3793  0012D8  0E01               	movlw	low exp@coeff
  3794  0012DA  6E3C               	movwf	eval_poly@d,c
  3795  0012DC  6A3E               	clrf	eval_poly@n+1,c
  3796  0012DE  0E09               	movlw	9
  3797  0012E0  6E3D               	movwf	eval_poly@n,c
  3798  0012E2  ECF3  F00F         	call	_eval_poly	;wreg free
  3799  0012E6  C038  F044         	movff	?_eval_poly,ldexp@value
  3800  0012EA  C039  F045         	movff	?_eval_poly+1,ldexp@value+1
  3801  0012EE  C03A  F046         	movff	?_eval_poly+2,ldexp@value+2
  3802  0012F2  C03B  F047         	movff	?_eval_poly+3,ldexp@value+3
  3803  0012F6  C079  F048         	movff	exp@exponent,ldexp@newexp
  3804  0012FA  C07A  F049         	movff	exp@exponent+1,ldexp@newexp+1
  3805  0012FE  EC9C  F010         	call	_ldexp	;wreg free
  3806  001302  C044  F071         	movff	?_ldexp,exp@x
  3807  001306  C045  F072         	movff	?_ldexp+1,exp@x+1
  3808  00130A  C046  F073         	movff	?_ldexp+2,exp@x+2
  3809  00130E  C047  F074         	movff	?_ldexp+3,exp@x+3
  3810  001312  0100               	movlb	0	; () banked
  3811  001314  517B               	movf	exp@sign& (0+255),w,b
  3812  001316  E029               	bz	l1183
  3813                           
  3814                           ; BSR set to: 0
  3815  001318  2971               	incf	exp@x& (0+255),w,b
  3816  00131A  E10D               	bnz	l3900
  3817  00131C  2972               	incf	(exp@x+1)& (0+255),w,b
  3818  00131E  E10B               	bnz	l3900
  3819  001320  0E7F               	movlw	127
  3820  001322  1973               	xorwf	(exp@x+2)& (0+255),w,b
  3821  001324  E108               	bnz	l3900
  3822  001326  0E7F               	movlw	127
  3823  001328  1974               	xorwf	(exp@x+3)& (0+255),w,b
  3824  00132A  E105               	bnz	l3900
  3825                           
  3826                           ; BSR set to: 0
  3827  00132C  6B71               	clrf	?_exp& (0+255),b
  3828  00132E  6B72               	clrf	(?_exp+1)& (0+255),b
  3829  001330  6B73               	clrf	(?_exp+2)& (0+255),b
  3830  001332  6B74               	clrf	(?_exp+3)& (0+255),b
  3831  001334  0012               	return	
  3832  001336                     l3900:
  3833                           
  3834                           ; BSR set to: 0
  3835  001336  0E00               	movlw	0
  3836  001338  6E0E               	movwf	___fldiv@f1,c
  3837  00133A  6E0F               	movwf	___fldiv@f1+1,c
  3838  00133C  0E80               	movlw	128
  3839  00133E  6E10               	movwf	___fldiv@f1+2,c
  3840  001340  0E3F               	movlw	63
  3841  001342  6E11               	movwf	___fldiv@f1+3,c
  3842  001344  C071  F012         	movff	exp@x,___fldiv@f2
  3843  001348  C072  F013         	movff	exp@x+1,___fldiv@f2+1
  3844  00134C  C073  F014         	movff	exp@x+2,___fldiv@f2+2
  3845  001350  C074  F015         	movff	exp@x+3,___fldiv@f2+3
  3846  001354  EC9B  F00F         	call	___fldiv	;wreg free
  3847  001358  C00E  F071         	movff	?___fldiv,?_exp
  3848  00135C  C00F  F072         	movff	?___fldiv+1,?_exp+1
  3849  001360  C010  F073         	movff	?___fldiv+2,?_exp+2
  3850  001364  C011  F074         	movff	?___fldiv+3,?_exp+3
  3851  001368  0012               	return	
  3852  00136A                     l1183:
  3853                           
  3854                           ; BSR set to: 0
  3855  00136A  C071  F071         	movff	exp@x,?_exp
  3856  00136E  C072  F072         	movff	exp@x+1,?_exp+1
  3857  001372  C073  F073         	movff	exp@x+2,?_exp+2
  3858  001376  C074  F074         	movff	exp@x+3,?_exp+3
  3859  00137A  0012               	return		;funcret
  3860  00137C                     __end_of_exp:
  3861                           	opt stack 0
  3862                           tblptru	equ	0xFF8
  3863                           tblptrh	equ	0xFF7
  3864                           tblptrl	equ	0xFF6
  3865                           tablat	equ	0xFF5
  3866                           prodl	equ	0xFF3
  3867                           intcon	equ	0xFF2
  3868                           intcon2	equ	0xFF1
  3869                           postinc0	equ	0xFEE
  3870                           wreg	equ	0xFE8
  3871                           postdec1	equ	0xFE5
  3872                           fsr1l	equ	0xFE1
  3873                           indf2	equ	0xFDF
  3874                           postinc2	equ	0xFDE
  3875                           postdec2	equ	0xFDD
  3876                           fsr2h	equ	0xFDA
  3877                           fsr2l	equ	0xFD9
  3878                           status	equ	0xFD8
  3879                           
  3880 ;; *************** function _ldexp *****************
  3881 ;; Defined at:
  3882 ;;		line 277 in file "/opt/microchip/xc8/v1.34/sources/common/frexp.c"
  3883 ;; Parameters:    Size  Location     Type
  3884 ;;  value           4   67[COMRAM] unsigned char 
  3885 ;;  newexp          2   71[COMRAM] int 
  3886 ;; Auto vars:     Size  Location     Type
  3887 ;;		None
  3888 ;; Return value:  Size  Location     Type
  3889 ;;                  4   67[COMRAM] int 
  3890 ;; Registers used:
  3891 ;;		wreg, status,2, status,0
  3892 ;; Tracked objects:
  3893 ;;		On entry : 0/0
  3894 ;;		On exit  : 0/0
  3895 ;;		Unchanged: 0/0
  3896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3897 ;;      Params:         6       0       0       0       0       0       0       0       0
  3898 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3899 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3900 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3901 ;;Total ram usage:        8 bytes
  3902 ;; Hardware stack levels used:    1
  3903 ;; Hardware stack levels required when called:    1
  3904 ;; This function calls:
  3905 ;;		Nothing
  3906 ;; This function is called by:
  3907 ;;		_exp
  3908 ;; This function uses a non-reentrant model
  3909 ;;
  3910                           
  3911                           	psect	text12
  3912  002138                     __ptext12:
  3913                           	opt stack 0
  3914  002138                     _ldexp:
  3915                           	opt stack 25
  3916                           
  3917                           ;incstack = 0
  3918  002138  5044               	movf	ldexp@value,w,c
  3919  00213A  1045               	iorwf	ldexp@value+1,w,c
  3920  00213C  1046               	iorwf	ldexp@value+2,w,c
  3921  00213E  1047               	iorwf	ldexp@value+3,w,c
  3922  002140  E105               	bnz	l2758
  3923  002142  6A44               	clrf	?_ldexp,c
  3924  002144  6A45               	clrf	?_ldexp+1,c
  3925  002146  6A46               	clrf	?_ldexp+2,c
  3926  002148  6A47               	clrf	?_ldexp+3,c
  3927  00214A  0012               	return	
  3928  00214C                     l2758:
  3929  00214C  5047               	movf	ldexp@value+3,w,c
  3930  00214E  0B7F               	andlw	127
  3931  002150  6E4A               	movwf	??_ldexp& (0+255),c
  3932  002152  6A4B               	clrf	(??_ldexp+1)& (0+255),c
  3933  002154  90D8               	bcf	status,0,c
  3934  002156  364A               	rlcf	??_ldexp,f,c
  3935  002158  364B               	rlcf	??_ldexp+1,f,c
  3936  00215A  504A               	movf	??_ldexp,w,c
  3937  00215C  2648               	addwf	ldexp@newexp,f,c
  3938  00215E  504B               	movf	??_ldexp+1,w,c
  3939  002160  2249               	addwfc	ldexp@newexp+1,f,c
  3940  002162  0E01               	movlw	1
  3941  002164  AE46               	btfss	ldexp@value+2,7,c
  3942  002166  0E00               	movlw	0
  3943  002168  2648               	addwf	ldexp@newexp,f,c
  3944  00216A  0E00               	movlw	0
  3945  00216C  2249               	addwfc	ldexp@newexp+1,f,c
  3946  00216E  AE49               	btfss	ldexp@newexp+1,7,c
  3947  002170  D005               	goto	l2764
  3948  002172  6A44               	clrf	?_ldexp,c
  3949  002174  6A45               	clrf	?_ldexp+1,c
  3950  002176  6A46               	clrf	?_ldexp+2,c
  3951  002178  6A47               	clrf	?_ldexp+3,c
  3952  00217A  0012               	return	
  3953  00217C                     l2764:
  3954  00217C  BE49               	btfsc	ldexp@newexp+1,7,c
  3955  00217E  D010               	goto	l2778
  3956  002180  0449               	decf	ldexp@newexp+1,w,c
  3957  002182  E30E               	bnc	l2778
  3958  002184  AE47               	btfss	ldexp@value+3,7,c
  3959  002186  D006               	goto	l2774
  3960  002188  6844               	setf	?_ldexp,c
  3961  00218A  6845               	setf	?_ldexp+1,c
  3962  00218C  0E7F               	movlw	127
  3963  00218E  6E46               	movwf	?_ldexp+2,c
  3964  002190  6847               	setf	?_ldexp+3,c
  3965  002192  0CFF               	retlw	255
  3966  002194                     l2774:
  3967  002194  6844               	setf	?_ldexp,c
  3968  002196  6845               	setf	?_ldexp+1,c
  3969  002198  0E7F               	movlw	127
  3970  00219A  6E46               	movwf	?_ldexp+2,c
  3971  00219C  6E47               	movwf	?_ldexp+3,c
  3972  00219E  0C7F               	retlw	127
  3973  0021A0                     l2778:
  3974  0021A0  3449               	rlcf	ldexp@newexp+1,w,c
  3975  0021A2  3049               	rrcf	ldexp@newexp+1,w,c
  3976  0021A4  6E4B               	movwf	(??_ldexp+1)& (0+255),c
  3977  0021A6  3048               	rrcf	ldexp@newexp,w,c
  3978  0021A8  6E4A               	movwf	??_ldexp& (0+255),c
  3979  0021AA  1847               	xorwf	ldexp@value+3,w,c
  3980  0021AC  0B80               	andlw	-128
  3981  0021AE  184A               	xorwf	??_ldexp,w,c
  3982  0021B0  6E47               	movwf	ldexp@value+3,c
  3983  0021B2  C048  F04A         	movff	ldexp@newexp,??_ldexp
  3984  0021B6  0E01               	movlw	1
  3985  0021B8  164A               	andwf	??_ldexp,f,c
  3986  0021BA  324A               	rrcf	??_ldexp,f,c
  3987  0021BC  324A               	rrcf	??_ldexp,f,c
  3988  0021BE  5046               	movf	ldexp@value+2,w,c
  3989  0021C0  184A               	xorwf	??_ldexp,w,c
  3990  0021C2  0B7F               	andlw	-129
  3991  0021C4  184A               	xorwf	??_ldexp,w,c
  3992  0021C6  6E46               	movwf	ldexp@value+2,c
  3993  0021C8  C044  F044         	movff	ldexp@value,?_ldexp
  3994  0021CC  C045  F045         	movff	ldexp@value+1,?_ldexp+1
  3995  0021D0  C046  F046         	movff	ldexp@value+2,?_ldexp+2
  3996  0021D4  C047  F047         	movff	ldexp@value+3,?_ldexp+3
  3997  0021D8  0012               	return		;funcret
  3998  0021DA                     __end_of_ldexp:
  3999                           	opt stack 0
  4000                           tblptru	equ	0xFF8
  4001                           tblptrh	equ	0xFF7
  4002                           tblptrl	equ	0xFF6
  4003                           tablat	equ	0xFF5
  4004                           prodl	equ	0xFF3
  4005                           intcon	equ	0xFF2
  4006                           intcon2	equ	0xFF1
  4007                           postinc0	equ	0xFEE
  4008                           wreg	equ	0xFE8
  4009                           postdec1	equ	0xFE5
  4010                           fsr1l	equ	0xFE1
  4011                           indf2	equ	0xFDF
  4012                           postinc2	equ	0xFDE
  4013                           postdec2	equ	0xFDD
  4014                           fsr2h	equ	0xFDA
  4015                           fsr2l	equ	0xFD9
  4016                           status	equ	0xFD8
  4017                           
  4018 ;; *************** function _floor *****************
  4019 ;; Defined at:
  4020 ;;		line 13 in file "/opt/microchip/xc8/v1.34/sources/common/floor.c"
  4021 ;; Parameters:    Size  Location     Type
  4022 ;;  x               4    7[BANK0 ] int 
  4023 ;; Auto vars:     Size  Location     Type
  4024 ;;  i               4   11[BANK0 ] int 
  4025 ;;  expon           2   15[BANK0 ] int 
  4026 ;; Return value:  Size  Location     Type
  4027 ;;                  4    7[BANK0 ] int 
  4028 ;; Registers used:
  4029 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4030 ;; Tracked objects:
  4031 ;;		On entry : 0/0
  4032 ;;		On exit  : 0/0
  4033 ;;		Unchanged: 0/0
  4034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4035 ;;      Params:         0       4       0       0       0       0       0       0       0
  4036 ;;      Locals:         0       6       0       0       0       0       0       0       0
  4037 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4038 ;;      Totals:         0      10       0       0       0       0       0       0       0
  4039 ;;Total ram usage:       10 bytes
  4040 ;; Hardware stack levels used:    1
  4041 ;; Hardware stack levels required when called:    3
  4042 ;; This function calls:
  4043 ;;		___altofl
  4044 ;;		___fladd
  4045 ;;		___flge
  4046 ;;		___fltol
  4047 ;;		_frexp
  4048 ;; This function is called by:
  4049 ;;		_format_double
  4050 ;;		_exp
  4051 ;; This function uses a non-reentrant model
  4052 ;;
  4053                           
  4054                           	psect	text13
  4055  001B08                     __ptext13:
  4056                           	opt stack 0
  4057  001B08                     _floor:
  4058                           	opt stack 23
  4059                           
  4060                           ;incstack = 0
  4061  001B08  C067  F004         	movff	floor@x,frexp@value
  4062  001B0C  C068  F005         	movff	floor@x+1,frexp@value+1
  4063  001B10  C069  F006         	movff	floor@x+2,frexp@value+2
  4064  001B14  C06A  F007         	movff	floor@x+3,frexp@value+3
  4065  001B18  0E6F               	movlw	low floor@expon
  4066  001B1A  6E08               	movwf	frexp@eptr,c
  4067  001B1C  EC3C  F011         	call	_frexp	;wreg free
  4068  001B20  0100               	movlb	0	; () banked
  4069  001B22  AF70               	btfss	(floor@expon+1)& (0+255),7,b
  4070  001B24  D00F               	goto	l3772
  4071                           
  4072                           ; BSR set to: 0
  4073  001B26  AF6A               	btfss	(floor@x+3)& (0+255),7,b
  4074  001B28  D008               	goto	l883
  4075                           
  4076                           ; BSR set to: 0
  4077  001B2A  0E00               	movlw	0
  4078  001B2C  6F67               	movwf	?_floor& (0+255),b
  4079  001B2E  6F68               	movwf	(?_floor+1)& (0+255),b
  4080  001B30  0E80               	movlw	128
  4081  001B32  6F69               	movwf	(?_floor+2)& (0+255),b
  4082  001B34  0EBF               	movlw	191
  4083  001B36  6F6A               	movwf	(?_floor+3)& (0+255),b
  4084  001B38  0CBF               	retlw	191
  4085  001B3A                     l883:
  4086                           
  4087                           ; BSR set to: 0
  4088  001B3A  6B67               	clrf	?_floor& (0+255),b
  4089  001B3C  6B68               	clrf	(?_floor+1)& (0+255),b
  4090  001B3E  6B69               	clrf	(?_floor+2)& (0+255),b
  4091  001B40  6B6A               	clrf	(?_floor+3)& (0+255),b
  4092  001B42  0012               	return	
  4093  001B44                     l3772:
  4094                           
  4095                           ; BSR set to: 0
  4096  001B44  5170               	movf	(floor@expon+1)& (0+255),w,b
  4097  001B46  E103               	bnz	u3040
  4098  001B48  0E1D               	movlw	29
  4099  001B4A  5D6F               	subwf	floor@expon& (0+255),w,b
  4100  001B4C  E309               	bnc	l3776
  4101  001B4E                     u3040:
  4102                           
  4103                           ; BSR set to: 0
  4104  001B4E  C067  F067         	movff	floor@x,?_floor
  4105  001B52  C068  F068         	movff	floor@x+1,?_floor+1
  4106  001B56  C069  F069         	movff	floor@x+2,?_floor+2
  4107  001B5A  C06A  F06A         	movff	floor@x+3,?_floor+3
  4108  001B5E  0012               	return	
  4109  001B60                     l3776:
  4110                           
  4111                           ; BSR set to: 0
  4112  001B60  C067  F052         	movff	floor@x,___fltol@f1
  4113  001B64  C068  F053         	movff	floor@x+1,___fltol@f1+1
  4114  001B68  C069  F054         	movff	floor@x+2,___fltol@f1+2
  4115  001B6C  C06A  F055         	movff	floor@x+3,___fltol@f1+3
  4116  001B70  ECED  F010         	call	___fltol	;wreg free
  4117  001B74  C052  F062         	movff	?___fltol,___altofl@c
  4118  001B78  C053  F063         	movff	?___fltol+1,___altofl@c+1
  4119  001B7C  C054  F064         	movff	?___fltol+2,___altofl@c+2
  4120  001B80  C055  F065         	movff	?___fltol+3,___altofl@c+3
  4121  001B84  ECCE  F012         	call	___altofl	;wreg free
  4122  001B88  C062  F06B         	movff	?___altofl,floor@i
  4123  001B8C  C063  F06C         	movff	?___altofl+1,floor@i+1
  4124  001B90  C064  F06D         	movff	?___altofl+2,floor@i+2
  4125  001B94  C065  F06E         	movff	?___altofl+3,floor@i+3
  4126  001B98  C067  F004         	movff	floor@x,___flge@ff1
  4127  001B9C  C068  F005         	movff	floor@x+1,___flge@ff1+1
  4128  001BA0  C069  F006         	movff	floor@x+2,___flge@ff1+2
  4129  001BA4  C06A  F007         	movff	floor@x+3,___flge@ff1+3
  4130  001BA8  C06B  F008         	movff	floor@i,___flge@ff2
  4131  001BAC  C06C  F009         	movff	floor@i+1,___flge@ff2+1
  4132  001BB0  C06D  F00A         	movff	floor@i+2,___flge@ff2+2
  4133  001BB4  C06E  F00B         	movff	floor@i+3,___flge@ff2+3
  4134  001BB8  EC39  F012         	call	___flge	;wreg free
  4135  001BBC  E215               	bc	l886
  4136  001BBE  C06B  F02C         	movff	floor@i,___fladd@f1
  4137  001BC2  C06C  F02D         	movff	floor@i+1,___fladd@f1+1
  4138  001BC6  C06D  F02E         	movff	floor@i+2,___fladd@f1+2
  4139  001BCA  C06E  F02F         	movff	floor@i+3,___fladd@f1+3
  4140  001BCE  EC84  F00C         	call	PL24	;call to abstracted procedure
  4141  001BD2  EC4B  F00B         	call	___fladd	;wreg free
  4142  001BD6  C02C  F067         	movff	?___fladd,?_floor
  4143  001BDA  C02D  F068         	movff	?___fladd+1,?_floor+1
  4144  001BDE  C02E  F069         	movff	?___fladd+2,?_floor+2
  4145  001BE2  C02F  F06A         	movff	?___fladd+3,?_floor+3
  4146  001BE6  0012               	return	
  4147  001BE8                     l886:
  4148  001BE8  C06B  F067         	movff	floor@i,?_floor
  4149  001BEC  C06C  F068         	movff	floor@i+1,?_floor+1
  4150  001BF0  C06D  F069         	movff	floor@i+2,?_floor+2
  4151  001BF4  C06E  F06A         	movff	floor@i+3,?_floor+3
  4152  001BF8  0012               	return		;funcret
  4153  001BFA                     __end_of_floor:
  4154                           	opt stack 0
  4155                           tblptru	equ	0xFF8
  4156                           tblptrh	equ	0xFF7
  4157                           tblptrl	equ	0xFF6
  4158                           tablat	equ	0xFF5
  4159                           prodl	equ	0xFF3
  4160                           intcon	equ	0xFF2
  4161                           intcon2	equ	0xFF1
  4162                           postinc0	equ	0xFEE
  4163                           wreg	equ	0xFE8
  4164                           postdec1	equ	0xFE5
  4165                           fsr1l	equ	0xFE1
  4166                           indf2	equ	0xFDF
  4167                           postinc2	equ	0xFDE
  4168                           postdec2	equ	0xFDD
  4169                           fsr2h	equ	0xFDA
  4170                           fsr2l	equ	0xFD9
  4171                           status	equ	0xFD8
  4172                           
  4173 ;; *************** function ___fltol *****************
  4174 ;; Defined at:
  4175 ;;		line 43 in file "/opt/microchip/xc8/v1.34/sources/common/fltol.c"
  4176 ;; Parameters:    Size  Location     Type
  4177 ;;  f1              4   81[COMRAM] int 
  4178 ;; Auto vars:     Size  Location     Type
  4179 ;;  exp1            1    1[BANK0 ] unsigned char 
  4180 ;;  sign1           1    0[BANK0 ] unsigned char 
  4181 ;; Return value:  Size  Location     Type
  4182 ;;                  4   81[COMRAM] long 
  4183 ;; Registers used:
  4184 ;;		wreg, status,2, status,0
  4185 ;; Tracked objects:
  4186 ;;		On entry : 0/0
  4187 ;;		On exit  : F/0
  4188 ;;		Unchanged: 0/0
  4189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4190 ;;      Params:         4       0       0       0       0       0       0       0       0
  4191 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4192 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4193 ;;      Totals:         8       2       0       0       0       0       0       0       0
  4194 ;;Total ram usage:       10 bytes
  4195 ;; Hardware stack levels used:    1
  4196 ;; Hardware stack levels required when called:    1
  4197 ;; This function calls:
  4198 ;;		Nothing
  4199 ;; This function is called by:
  4200 ;;		_format_double
  4201 ;;		_measure_capacitance
  4202 ;;		_measure_inductance
  4203 ;;		_floor
  4204 ;;		_pow
  4205 ;;		_exp
  4206 ;; This function uses a non-reentrant model
  4207 ;;
  4208                           
  4209                           	psect	text14
  4210  0021DA                     __ptext14:
  4211                           	opt stack 0
  4212  0021DA                     ___fltol:
  4213                           	opt stack 28
  4214                           
  4215                           ;incstack = 0
  4216  0021DA  3454               	rlcf	___fltol@f1+2,w,c
  4217  0021DC  3455               	rlcf	___fltol@f1+3,w,c
  4218  0021DE  0100               	movlb	0	; () banked
  4219  0021E0  6F61               	movwf	___fltol@exp1& (0+255),b
  4220  0021E2  5161               	movf	___fltol@exp1& (0+255),w,b
  4221  0021E4  E105               	bnz	l3728
  4222  0021E6                     l3726:
  4223                           
  4224                           ; BSR set to: 0
  4225  0021E6  6A52               	clrf	?___fltol,c
  4226  0021E8  6A53               	clrf	?___fltol+1,c
  4227  0021EA  6A54               	clrf	?___fltol+2,c
  4228  0021EC  6A55               	clrf	?___fltol+3,c
  4229  0021EE  0012               	return	
  4230  0021F0                     l3728:
  4231                           
  4232                           ; BSR set to: 0
  4233  0021F0  C052  F056         	movff	___fltol@f1,??___fltol
  4234  0021F4  C053  F057         	movff	___fltol@f1+1,??___fltol+1
  4235  0021F8  C054  F058         	movff	___fltol@f1+2,??___fltol+2
  4236  0021FC  C055  F059         	movff	___fltol@f1+3,??___fltol+3
  4237  002200  0E20               	movlw	32
  4238  002202  D005               	goto	u2960
  4239  002204                     u2965:
  4240  002204  90D8               	bcf	status,0,c
  4241  002206  3259               	rrcf	??___fltol+3,f,c
  4242  002208  3258               	rrcf	??___fltol+2,f,c
  4243  00220A  3257               	rrcf	??___fltol+1,f,c
  4244  00220C  3256               	rrcf	??___fltol,f,c
  4245  00220E                     u2960:
  4246  00220E  2EE8               	decfsz	wreg,f,c
  4247  002210  D7F9               	goto	u2965
  4248  002212  5056               	movf	??___fltol,w,c
  4249  002214  6F60               	movwf	___fltol@sign1& (0+255),b
  4250                           
  4251                           ; BSR set to: 0
  4252  002216  8E54               	bsf	___fltol@f1+2,7,c
  4253                           
  4254                           ; BSR set to: 0
  4255  002218  6A55               	clrf	___fltol@f1+3,c
  4256                           
  4257                           ; BSR set to: 0
  4258  00221A  0E96               	movlw	150
  4259  00221C  5F61               	subwf	___fltol@exp1& (0+255),f,b
  4260                           
  4261                           ; BSR set to: 0
  4262  00221E  AF61               	btfss	___fltol@exp1& (0+255),7,b
  4263  002220  D00C               	goto	l3746
  4264                           
  4265                           ; BSR set to: 0
  4266  002222  5161               	movf	___fltol@exp1& (0+255),w,b
  4267  002224  0A80               	xorlw	128
  4268  002226  0F97               	addlw	151
  4269  002228  E3DE               	bnc	l3726
  4270  00222A                     l3742:
  4271                           
  4272                           ; BSR set to: 0
  4273  00222A  90D8               	bcf	status,0,c
  4274  00222C  3255               	rrcf	___fltol@f1+3,f,c
  4275  00222E  3254               	rrcf	___fltol@f1+2,f,c
  4276  002230  3253               	rrcf	___fltol@f1+1,f,c
  4277  002232  3252               	rrcf	___fltol@f1,f,c
  4278                           
  4279                           ; BSR set to: 0
  4280  002234  3F61               	incfsz	___fltol@exp1& (0+255),f,b
  4281  002236  D7F9               	goto	l3742
  4282  002238  D00C               	goto	l3754
  4283  00223A                     l3746:
  4284                           
  4285                           ; BSR set to: 0
  4286  00223A  0E1F               	movlw	31
  4287  00223C  6561               	cpfsgt	___fltol@exp1& (0+255),b
  4288  00223E  D007               	goto	l3752
  4289  002240  D7D2               	goto	l3726
  4290  002242                     l3750:
  4291                           
  4292                           ; BSR set to: 0
  4293  002242  90D8               	bcf	status,0,c
  4294  002244  3652               	rlcf	___fltol@f1,f,c
  4295  002246  3653               	rlcf	___fltol@f1+1,f,c
  4296  002248  3654               	rlcf	___fltol@f1+2,f,c
  4297  00224A  3655               	rlcf	___fltol@f1+3,f,c
  4298  00224C  0761               	decf	___fltol@exp1& (0+255),f,b
  4299  00224E                     l3752:
  4300                           
  4301                           ; BSR set to: 0
  4302  00224E  5161               	movf	___fltol@exp1& (0+255),w,b
  4303  002250  E1F8               	bnz	l3750
  4304  002252                     l3754:
  4305                           
  4306                           ; BSR set to: 0
  4307  002252  5160               	movf	___fltol@sign1& (0+255),w,b
  4308  002254  E008               	bz	l3758
  4309                           
  4310                           ; BSR set to: 0
  4311  002256  1E55               	comf	___fltol@f1+3,f,c
  4312  002258  1E54               	comf	___fltol@f1+2,f,c
  4313  00225A  1E53               	comf	___fltol@f1+1,f,c
  4314  00225C  6C52               	negf	___fltol@f1,c
  4315  00225E  0E00               	movlw	0
  4316  002260  2253               	addwfc	___fltol@f1+1,f,c
  4317  002262  2254               	addwfc	___fltol@f1+2,f,c
  4318  002264  2255               	addwfc	___fltol@f1+3,f,c
  4319  002266                     l3758:
  4320                           
  4321                           ; BSR set to: 0
  4322  002266  C052  F052         	movff	___fltol@f1,?___fltol
  4323  00226A  C053  F053         	movff	___fltol@f1+1,?___fltol+1
  4324  00226E  C054  F054         	movff	___fltol@f1+2,?___fltol+2
  4325  002272  C055  F055         	movff	___fltol@f1+3,?___fltol+3
  4326                           
  4327                           ; BSR set to: 0
  4328  002276  0012               	return		;funcret
  4329  002278                     __end_of___fltol:
  4330                           	opt stack 0
  4331                           tblptru	equ	0xFF8
  4332                           tblptrh	equ	0xFF7
  4333                           tblptrl	equ	0xFF6
  4334                           tablat	equ	0xFF5
  4335                           prodl	equ	0xFF3
  4336                           intcon	equ	0xFF2
  4337                           intcon2	equ	0xFF1
  4338                           postinc0	equ	0xFEE
  4339                           wreg	equ	0xFE8
  4340                           postdec1	equ	0xFE5
  4341                           fsr1l	equ	0xFE1
  4342                           indf2	equ	0xFDF
  4343                           postinc2	equ	0xFDE
  4344                           postdec2	equ	0xFDD
  4345                           fsr2h	equ	0xFDA
  4346                           fsr2l	equ	0xFD9
  4347                           status	equ	0xFD8
  4348                           
  4349 ;; *************** function ___flge *****************
  4350 ;; Defined at:
  4351 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/flge.c"
  4352 ;; Parameters:    Size  Location     Type
  4353 ;;  ff1             4    3[COMRAM] long 
  4354 ;;  ff2             4    7[COMRAM] long 
  4355 ;; Auto vars:     Size  Location     Type
  4356 ;;		None
  4357 ;; Return value:  Size  Location     Type
  4358 ;;		None               void
  4359 ;; Registers used:
  4360 ;;		wreg, status,2, status,0
  4361 ;; Tracked objects:
  4362 ;;		On entry : 0/0
  4363 ;;		On exit  : 0/0
  4364 ;;		Unchanged: 0/0
  4365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4366 ;;      Params:         8       0       0       0       0       0       0       0       0
  4367 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4368 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4369 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4370 ;;Total ram usage:        8 bytes
  4371 ;; Hardware stack levels used:    1
  4372 ;; Hardware stack levels required when called:    1
  4373 ;; This function calls:
  4374 ;;		Nothing
  4375 ;; This function is called by:
  4376 ;;		_format_double
  4377 ;;		_measure_capacitance
  4378 ;;		_measure_inductance
  4379 ;;		_floor
  4380 ;;		_pow
  4381 ;;		_exp
  4382 ;; This function uses a non-reentrant model
  4383 ;;
  4384                           
  4385                           	psect	text15
  4386  002472                     __ptext15:
  4387                           	opt stack 0
  4388  002472                     ___flge:
  4389                           	opt stack 28
  4390                           
  4391                           ; BSR set to: 0
  4392                           ;incstack = 0
  4393  002472  AE07               	btfss	___flge@ff1+3,7,c
  4394  002474  D009               	goto	l2582
  4395  002476  6C04               	negf	___flge@ff1,c
  4396  002478  1E05               	comf	___flge@ff1+1,f,c
  4397  00247A  B0D8               	btfsc	status,0,c
  4398  00247C  2A05               	incf	___flge@ff1+1,f,c
  4399  00247E  1E06               	comf	___flge@ff1+2,f,c
  4400  002480  B0D8               	btfsc	status,0,c
  4401  002482  2A06               	incf	___flge@ff1+2,f,c
  4402  002484  0E80               	movlw	128
  4403  002486  5607               	subfwb	___flge@ff1+3,f,c
  4404  002488                     l2582:
  4405  002488  AE0B               	btfss	___flge@ff2+3,7,c
  4406  00248A  D009               	goto	l840
  4407  00248C  6C08               	negf	___flge@ff2,c
  4408  00248E  1E09               	comf	___flge@ff2+1,f,c
  4409  002490  B0D8               	btfsc	status,0,c
  4410  002492  2A09               	incf	___flge@ff2+1,f,c
  4411  002494  1E0A               	comf	___flge@ff2+2,f,c
  4412  002496  B0D8               	btfsc	status,0,c
  4413  002498  2A0A               	incf	___flge@ff2+2,f,c
  4414  00249A  0E80               	movlw	128
  4415  00249C  560B               	subfwb	___flge@ff2+3,f,c
  4416  00249E                     l840:
  4417  00249E  0E80               	movlw	128
  4418  0024A0  1A07               	xorwf	___flge@ff1+3,f,c
  4419  0024A2  1A0B               	xorwf	___flge@ff2+3,f,c
  4420  0024A4  5008               	movf	___flge@ff2,w,c
  4421  0024A6  5C04               	subwf	___flge@ff1,w,c
  4422  0024A8  5009               	movf	___flge@ff2+1,w,c
  4423  0024AA  5805               	subwfb	___flge@ff1+1,w,c
  4424  0024AC  500A               	movf	___flge@ff2+2,w,c
  4425  0024AE  5806               	subwfb	___flge@ff1+2,w,c
  4426  0024B0  500B               	movf	___flge@ff2+3,w,c
  4427  0024B2  5807               	subwfb	___flge@ff1+3,w,c
  4428  0024B4  E202               	bc	l2588
  4429  0024B6  90D8               	bcf	status,0,c
  4430  0024B8  0012               	return	
  4431  0024BA                     l2588:
  4432  0024BA  80D8               	bsf	status,0,c
  4433  0024BC  0012               	return		;funcret
  4434  0024BE                     __end_of___flge:
  4435                           	opt stack 0
  4436                           tblptru	equ	0xFF8
  4437                           tblptrh	equ	0xFF7
  4438                           tblptrl	equ	0xFF6
  4439                           tablat	equ	0xFF5
  4440                           prodl	equ	0xFF3
  4441                           intcon	equ	0xFF2
  4442                           intcon2	equ	0xFF1
  4443                           postinc0	equ	0xFEE
  4444                           wreg	equ	0xFE8
  4445                           postdec1	equ	0xFE5
  4446                           fsr1l	equ	0xFE1
  4447                           indf2	equ	0xFDF
  4448                           postinc2	equ	0xFDE
  4449                           postdec2	equ	0xFDD
  4450                           fsr2h	equ	0xFDA
  4451                           fsr2l	equ	0xFD9
  4452                           status	equ	0xFD8
  4453                           
  4454 ;; *************** function ___altofl *****************
  4455 ;; Defined at:
  4456 ;;		line 36 in file "/opt/microchip/xc8/v1.34/sources/common/altofl.c"
  4457 ;; Parameters:    Size  Location     Type
  4458 ;;  c               4    2[BANK0 ] long 
  4459 ;; Auto vars:     Size  Location     Type
  4460 ;;  sign            1    6[BANK0 ] unsigned char 
  4461 ;; Return value:  Size  Location     Type
  4462 ;;                  4    2[BANK0 ] unsigned char 
  4463 ;; Registers used:
  4464 ;;		wreg, status,2, status,0, cstack
  4465 ;; Tracked objects:
  4466 ;;		On entry : F/0
  4467 ;;		On exit  : 0/0
  4468 ;;		Unchanged: 0/0
  4469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4470 ;;      Params:         0       4       0       0       0       0       0       0       0
  4471 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4472 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4473 ;;      Totals:         0       5       0       0       0       0       0       0       0
  4474 ;;Total ram usage:        5 bytes
  4475 ;; Hardware stack levels used:    1
  4476 ;; Hardware stack levels required when called:    2
  4477 ;; This function calls:
  4478 ;;		___flpack
  4479 ;; This function is called by:
  4480 ;;		_floor
  4481 ;; This function uses a non-reentrant model
  4482 ;;
  4483                           
  4484                           	psect	text16
  4485  00259C                     __ptext16:
  4486                           	opt stack 0
  4487  00259C                     ___altofl:
  4488                           	opt stack 23
  4489                           
  4490                           ; BSR set to: 0
  4491                           
  4492                           ;incstack = 0
  4493  00259C  6B66               	clrf	___altofl@sign& (0+255),b
  4494                           
  4495                           ; BSR set to: 0
  4496  00259E  AF65               	btfss	(___altofl@c+3)& (0+255),7,b
  4497  0025A0  D00A               	goto	l3608
  4498                           
  4499                           ; BSR set to: 0
  4500  0025A2  1F65               	comf	(___altofl@c+3)& (0+255),f,b
  4501  0025A4  1F64               	comf	(___altofl@c+2)& (0+255),f,b
  4502  0025A6  1F63               	comf	(___altofl@c+1)& (0+255),f,b
  4503  0025A8  6D62               	negf	___altofl@c& (0+255),b
  4504  0025AA  0E00               	movlw	0
  4505  0025AC  2363               	addwfc	(___altofl@c+1)& (0+255),f,b
  4506  0025AE  2364               	addwfc	(___altofl@c+2)& (0+255),f,b
  4507  0025B0  2365               	addwfc	(___altofl@c+3)& (0+255),f,b
  4508                           
  4509                           ; BSR set to: 0
  4510  0025B2  0E01               	movlw	1
  4511  0025B4  6F66               	movwf	___altofl@sign& (0+255),b
  4512  0025B6                     l3608:
  4513                           
  4514                           ; BSR set to: 0
  4515  0025B6  C062  F004         	movff	___altofl@c,___flpack@arg
  4516  0025BA  C063  F005         	movff	___altofl@c+1,___flpack@arg+1
  4517  0025BE  C064  F006         	movff	___altofl@c+2,___flpack@arg+2
  4518  0025C2  C065  F007         	movff	___altofl@c+3,___flpack@arg+3
  4519  0025C6  0E96               	movlw	150
  4520  0025C8  6E08               	movwf	___flpack@exp,c
  4521  0025CA  C066  F009         	movff	___altofl@sign,___flpack@sign
  4522  0025CE  EC3A  F00F         	call	___flpack	;wreg free
  4523  0025D2  C004  F062         	movff	?___flpack,?___altofl
  4524  0025D6  C005  F063         	movff	?___flpack+1,?___altofl+1
  4525  0025DA  C006  F064         	movff	?___flpack+2,?___altofl+2
  4526  0025DE  C007  F065         	movff	?___flpack+3,?___altofl+3
  4527  0025E2  0012               	return		;funcret
  4528  0025E4                     __end_of___altofl:
  4529                           	opt stack 0
  4530                           tblptru	equ	0xFF8
  4531                           tblptrh	equ	0xFF7
  4532                           tblptrl	equ	0xFF6
  4533                           tablat	equ	0xFF5
  4534                           prodl	equ	0xFF3
  4535                           intcon	equ	0xFF2
  4536                           intcon2	equ	0xFF1
  4537                           postinc0	equ	0xFEE
  4538                           wreg	equ	0xFE8
  4539                           postdec1	equ	0xFE5
  4540                           fsr1l	equ	0xFE1
  4541                           indf2	equ	0xFDF
  4542                           postinc2	equ	0xFDE
  4543                           postdec2	equ	0xFDD
  4544                           fsr2h	equ	0xFDA
  4545                           fsr2l	equ	0xFD9
  4546                           status	equ	0xFD8
  4547                           
  4548 ;; *************** function ___flsub *****************
  4549 ;; Defined at:
  4550 ;;		line 20 in file "/opt/microchip/xc8/v1.34/sources/common/flsub.c"
  4551 ;; Parameters:    Size  Location     Type
  4552 ;;  f1              4   55[COMRAM] unsigned char 
  4553 ;;  f2              4   59[COMRAM] unsigned char 
  4554 ;; Auto vars:     Size  Location     Type
  4555 ;;		None
  4556 ;; Return value:  Size  Location     Type
  4557 ;;                  4   55[COMRAM] unsigned char 
  4558 ;; Registers used:
  4559 ;;		wreg, status,2, status,0, cstack
  4560 ;; Tracked objects:
  4561 ;;		On entry : 0/0
  4562 ;;		On exit  : 0/0
  4563 ;;		Unchanged: 0/0
  4564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4565 ;;      Params:         8       0       0       0       0       0       0       0       0
  4566 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4567 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4568 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4569 ;;Total ram usage:        8 bytes
  4570 ;; Hardware stack levels used:    1
  4571 ;; Hardware stack levels required when called:    3
  4572 ;; This function calls:
  4573 ;;		___fladd
  4574 ;; This function is called by:
  4575 ;;		_format_double
  4576 ;;		_measure_capacitance
  4577 ;;		_measure_inductance
  4578 ;;		_exp
  4579 ;; This function uses a non-reentrant model
  4580 ;;
  4581                           
  4582                           	psect	text17
  4583  0025E4                     __ptext17:
  4584                           	opt stack 0
  4585  0025E4                     ___flsub:
  4586                           	opt stack 26
  4587                           
  4588                           ;incstack = 0
  4589  0025E4  503C               	movf	___flsub@f2,w,c
  4590  0025E6  103D               	iorwf	___flsub@f2+1,w,c
  4591  0025E8  103E               	iorwf	___flsub@f2+2,w,c
  4592  0025EA  103F               	iorwf	___flsub@f2+3,w,c
  4593  0025EC  E002               	bz	l3822
  4594  0025EE  0E80               	movlw	128
  4595  0025F0  1A3F               	xorwf	___flsub@f2+3,f,c
  4596  0025F2                     l3822:
  4597  0025F2  C038  F02C         	movff	___flsub@f1,___fladd@f1
  4598  0025F6  C039  F02D         	movff	___flsub@f1+1,___fladd@f1+1
  4599  0025FA  C03A  F02E         	movff	___flsub@f1+2,___fladd@f1+2
  4600  0025FE  C03B  F02F         	movff	___flsub@f1+3,___fladd@f1+3
  4601  002602  C03C  F030         	movff	___flsub@f2,___fladd@f2
  4602  002606  C03D  F031         	movff	___flsub@f2+1,___fladd@f2+1
  4603  00260A  C03E  F032         	movff	___flsub@f2+2,___fladd@f2+2
  4604  00260E  C03F  F033         	movff	___flsub@f2+3,___fladd@f2+3
  4605  002612  EC4B  F00B         	call	___fladd	;wreg free
  4606  002616  C02C  F038         	movff	?___fladd,?___flsub
  4607  00261A  C02D  F039         	movff	?___fladd+1,?___flsub+1
  4608  00261E  C02E  F03A         	movff	?___fladd+2,?___flsub+2
  4609  002622  C02F  F03B         	movff	?___fladd+3,?___flsub+3
  4610  002626  0012               	return		;funcret
  4611  002628                     __end_of___flsub:
  4612                           	opt stack 0
  4613                           tblptru	equ	0xFF8
  4614                           tblptrh	equ	0xFF7
  4615                           tblptrl	equ	0xFF6
  4616                           tablat	equ	0xFF5
  4617                           prodl	equ	0xFF3
  4618                           intcon	equ	0xFF2
  4619                           intcon2	equ	0xFF1
  4620                           postinc0	equ	0xFEE
  4621                           wreg	equ	0xFE8
  4622                           postdec1	equ	0xFE5
  4623                           fsr1l	equ	0xFE1
  4624                           indf2	equ	0xFDF
  4625                           postinc2	equ	0xFDE
  4626                           postdec2	equ	0xFDD
  4627                           fsr2h	equ	0xFDA
  4628                           fsr2l	equ	0xFD9
  4629                           status	equ	0xFD8
  4630                           
  4631 ;; *************** function ___flneg *****************
  4632 ;; Defined at:
  4633 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/flneg.c"
  4634 ;; Parameters:    Size  Location     Type
  4635 ;;  f1              4    3[COMRAM] unsigned char 
  4636 ;; Auto vars:     Size  Location     Type
  4637 ;;		None
  4638 ;; Return value:  Size  Location     Type
  4639 ;;                  4    3[COMRAM] unsigned char 
  4640 ;; Registers used:
  4641 ;;		wreg, status,2, status,0
  4642 ;; Tracked objects:
  4643 ;;		On entry : F/0
  4644 ;;		On exit  : F/0
  4645 ;;		Unchanged: F/0
  4646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4647 ;;      Params:         4       0       0       0       0       0       0       0       0
  4648 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4649 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4650 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4651 ;;Total ram usage:        4 bytes
  4652 ;; Hardware stack levels used:    1
  4653 ;; Hardware stack levels required when called:    1
  4654 ;; This function calls:
  4655 ;;		Nothing
  4656 ;; This function is called by:
  4657 ;;		_pow
  4658 ;;		_exp
  4659 ;; This function uses a non-reentrant model
  4660 ;;
  4661                           
  4662                           	psect	text18
  4663  0028A8                     __ptext18:
  4664                           	opt stack 0
  4665  0028A8                     ___flneg:
  4666                           	opt stack 25
  4667                           
  4668                           ; BSR set to: 0
  4669                           
  4670                           ;incstack = 0
  4671  0028A8  5004               	movf	___flneg@f1,w,c
  4672  0028AA  1005               	iorwf	___flneg@f1+1,w,c
  4673  0028AC  1006               	iorwf	___flneg@f1+2,w,c
  4674  0028AE  1007               	iorwf	___flneg@f1+3,w,c
  4675  0028B0  E002               	bz	l2750
  4676                           
  4677                           ; BSR set to: 0
  4678  0028B2  0E80               	movlw	128
  4679  0028B4  1A07               	xorwf	___flneg@f1+3,f,c
  4680  0028B6                     l2750:
  4681                           
  4682                           ; BSR set to: 0
  4683  0028B6  C004  F004         	movff	___flneg@f1,?___flneg
  4684  0028BA  C005  F005         	movff	___flneg@f1+1,?___flneg+1
  4685  0028BE  C006  F006         	movff	___flneg@f1+2,?___flneg+2
  4686  0028C2  C007  F007         	movff	___flneg@f1+3,?___flneg+3
  4687                           
  4688                           ; BSR set to: 0
  4689  0028C6  0012               	return		;funcret
  4690  0028C8                     __end_of___flneg:
  4691                           	opt stack 0
  4692                           tblptru	equ	0xFF8
  4693                           tblptrh	equ	0xFF7
  4694                           tblptrl	equ	0xFF6
  4695                           tablat	equ	0xFF5
  4696                           prodl	equ	0xFF3
  4697                           intcon	equ	0xFF2
  4698                           intcon2	equ	0xFF1
  4699                           postinc0	equ	0xFEE
  4700                           wreg	equ	0xFE8
  4701                           postdec1	equ	0xFE5
  4702                           fsr1l	equ	0xFE1
  4703                           indf2	equ	0xFDF
  4704                           postinc2	equ	0xFDE
  4705                           postdec2	equ	0xFDD
  4706                           fsr2h	equ	0xFDA
  4707                           fsr2l	equ	0xFD9
  4708                           status	equ	0xFD8
  4709                           
  4710 ;; *************** function ___fldiv *****************
  4711 ;; Defined at:
  4712 ;;		line 54 in file "/opt/microchip/xc8/v1.34/sources/common/fldiv.c"
  4713 ;; Parameters:    Size  Location     Type
  4714 ;;  f1              4   13[COMRAM] unsigned char 
  4715 ;;  f2              4   17[COMRAM] unsigned char 
  4716 ;; Auto vars:     Size  Location     Type
  4717 ;;  f3              4   21[COMRAM] unsigned char 
  4718 ;;  sign            1   27[COMRAM] unsigned char 
  4719 ;;  exp             1   26[COMRAM] unsigned char 
  4720 ;;  cntr            1   25[COMRAM] unsigned char 
  4721 ;; Return value:  Size  Location     Type
  4722 ;;                  4   13[COMRAM] unsigned char 
  4723 ;; Registers used:
  4724 ;;		wreg, status,2, status,0, cstack
  4725 ;; Tracked objects:
  4726 ;;		On entry : 0/0
  4727 ;;		On exit  : 0/0
  4728 ;;		Unchanged: 0/0
  4729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4730 ;;      Params:         8       0       0       0       0       0       0       0       0
  4731 ;;      Locals:         7       0       0       0       0       0       0       0       0
  4732 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4733 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4734 ;;Total ram usage:       15 bytes
  4735 ;; Hardware stack levels used:    1
  4736 ;; Hardware stack levels required when called:    2
  4737 ;; This function calls:
  4738 ;;		___flpack
  4739 ;; This function is called by:
  4740 ;;		_format_double
  4741 ;;		_measure_capacitance
  4742 ;;		_measure_inductance
  4743 ;;		_exp
  4744 ;; This function uses a non-reentrant model
  4745 ;;
  4746                           
  4747                           	psect	text19
  4748  001F36                     __ptext19:
  4749                           	opt stack 0
  4750  001F36                     ___fldiv:
  4751                           	opt stack 27
  4752                           
  4753                           ; BSR set to: 0
  4754                           ;incstack = 0
  4755  001F36  3410               	rlcf	___fldiv@f1+2,w,c
  4756  001F38  3411               	rlcf	___fldiv@f1+3,w,c
  4757  001F3A  6E1B               	movwf	___fldiv@exp,c
  4758  001F3C  501B               	movf	___fldiv@exp,w,c
  4759  001F3E  E105               	bnz	l3786
  4760  001F40  6A0E               	clrf	?___fldiv,c
  4761  001F42  6A0F               	clrf	?___fldiv+1,c
  4762  001F44  6A10               	clrf	?___fldiv+2,c
  4763  001F46  6A11               	clrf	?___fldiv+3,c
  4764  001F48  0012               	return	
  4765  001F4A                     l3786:
  4766  001F4A  3414               	rlcf	___fldiv@f2+2,w,c
  4767  001F4C  3415               	rlcf	___fldiv@f2+3,w,c
  4768  001F4E  6E1C               	movwf	___fldiv@sign,c
  4769  001F50  501C               	movf	___fldiv@sign,w,c
  4770  001F52  E105               	bnz	l3790
  4771  001F54  6A0E               	clrf	?___fldiv,c
  4772  001F56  6A0F               	clrf	?___fldiv+1,c
  4773  001F58  6A10               	clrf	?___fldiv+2,c
  4774  001F5A  6A11               	clrf	?___fldiv+3,c
  4775  001F5C  0012               	return	
  4776  001F5E                     l3790:
  4777  001F5E  501C               	movf	___fldiv@sign,w,c
  4778  001F60  0F89               	addlw	137
  4779  001F62  5E1B               	subwf	___fldiv@exp,f,c
  4780  001F64  C011  F01C         	movff	___fldiv@f1+3,___fldiv@sign
  4781  001F68  5015               	movf	___fldiv@f2+3,w,c
  4782  001F6A  1A1C               	xorwf	___fldiv@sign,f,c
  4783  001F6C  0E80               	movlw	128
  4784  001F6E  161C               	andwf	___fldiv@sign,f,c
  4785  001F70  8E10               	bsf	___fldiv@f1+2,7,c
  4786  001F72  6A11               	clrf	___fldiv@f1+3,c
  4787  001F74  8E14               	bsf	___fldiv@f2+2,7,c
  4788  001F76  6A15               	clrf	___fldiv@f2+3,c
  4789  001F78  0E20               	movlw	32
  4790  001F7A  6E1A               	movwf	___fldiv@cntr,c
  4791  001F7C                     l3802:
  4792  001F7C  90D8               	bcf	status,0,c
  4793  001F7E  3616               	rlcf	___fldiv@f3,f,c
  4794  001F80  3617               	rlcf	___fldiv@f3+1,f,c
  4795  001F82  3618               	rlcf	___fldiv@f3+2,f,c
  4796  001F84  3619               	rlcf	___fldiv@f3+3,f,c
  4797  001F86  5012               	movf	___fldiv@f2,w,c
  4798  001F88  5C0E               	subwf	___fldiv@f1,w,c
  4799  001F8A  5013               	movf	___fldiv@f2+1,w,c
  4800  001F8C  580F               	subwfb	___fldiv@f1+1,w,c
  4801  001F8E  5014               	movf	___fldiv@f2+2,w,c
  4802  001F90  5810               	subwfb	___fldiv@f1+2,w,c
  4803  001F92  5015               	movf	___fldiv@f2+3,w,c
  4804  001F94  5811               	subwfb	___fldiv@f1+3,w,c
  4805  001F96  E309               	bnc	l3810
  4806  001F98  5012               	movf	___fldiv@f2,w,c
  4807  001F9A  5E0E               	subwf	___fldiv@f1,f,c
  4808  001F9C  5013               	movf	___fldiv@f2+1,w,c
  4809  001F9E  5A0F               	subwfb	___fldiv@f1+1,f,c
  4810  001FA0  5014               	movf	___fldiv@f2+2,w,c
  4811  001FA2  5A10               	subwfb	___fldiv@f1+2,f,c
  4812  001FA4  5015               	movf	___fldiv@f2+3,w,c
  4813  001FA6  5A11               	subwfb	___fldiv@f1+3,f,c
  4814  001FA8  8016               	bsf	___fldiv@f3,0,c
  4815  001FAA                     l3810:
  4816  001FAA  90D8               	bcf	status,0,c
  4817  001FAC  360E               	rlcf	___fldiv@f1,f,c
  4818  001FAE  360F               	rlcf	___fldiv@f1+1,f,c
  4819  001FB0  3610               	rlcf	___fldiv@f1+2,f,c
  4820  001FB2  3611               	rlcf	___fldiv@f1+3,f,c
  4821  001FB4  2E1A               	decfsz	___fldiv@cntr,f,c
  4822  001FB6  D7E2               	goto	l3802
  4823  001FB8  C016  F004         	movff	___fldiv@f3,___flpack@arg
  4824  001FBC  C017  F005         	movff	___fldiv@f3+1,___flpack@arg+1
  4825  001FC0  C018  F006         	movff	___fldiv@f3+2,___flpack@arg+2
  4826  001FC4  C019  F007         	movff	___fldiv@f3+3,___flpack@arg+3
  4827  001FC8  C01B  F008         	movff	___fldiv@exp,___flpack@exp
  4828  001FCC  C01C  F009         	movff	___fldiv@sign,___flpack@sign
  4829  001FD0  EC3A  F00F         	call	___flpack	;wreg free
  4830  001FD4  C004  F00E         	movff	?___flpack,?___fldiv
  4831  001FD8  C005  F00F         	movff	?___flpack+1,?___fldiv+1
  4832  001FDC  C006  F010         	movff	?___flpack+2,?___fldiv+2
  4833  001FE0  C007  F011         	movff	?___flpack+3,?___fldiv+3
  4834  001FE4  0012               	return		;funcret
  4835  001FE6                     __end_of___fldiv:
  4836                           	opt stack 0
  4837                           tblptru	equ	0xFF8
  4838                           tblptrh	equ	0xFF7
  4839                           tblptrl	equ	0xFF6
  4840                           tablat	equ	0xFF5
  4841                           prodl	equ	0xFF3
  4842                           intcon	equ	0xFF2
  4843                           intcon2	equ	0xFF1
  4844                           postinc0	equ	0xFEE
  4845                           wreg	equ	0xFE8
  4846                           postdec1	equ	0xFE5
  4847                           fsr1l	equ	0xFE1
  4848                           indf2	equ	0xFDF
  4849                           postinc2	equ	0xFDE
  4850                           postdec2	equ	0xFDD
  4851                           fsr2h	equ	0xFDA
  4852                           fsr2l	equ	0xFD9
  4853                           status	equ	0xFD8
  4854                           
  4855 ;; *************** function ___lltofl *****************
  4856 ;; Defined at:
  4857 ;;		line 30 in file "/opt/microchip/xc8/v1.34/sources/common/lltofl.c"
  4858 ;; Parameters:    Size  Location     Type
  4859 ;;  c               4   13[COMRAM] unsigned long 
  4860 ;; Auto vars:     Size  Location     Type
  4861 ;;		None
  4862 ;; Return value:  Size  Location     Type
  4863 ;;                  4   13[COMRAM] unsigned long 
  4864 ;; Registers used:
  4865 ;;		wreg, status,2, status,0, cstack
  4866 ;; Tracked objects:
  4867 ;;		On entry : F/0
  4868 ;;		On exit  : 0/0
  4869 ;;		Unchanged: 0/0
  4870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4871 ;;      Params:         4       0       0       0       0       0       0       0       0
  4872 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4873 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4874 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4875 ;;Total ram usage:        4 bytes
  4876 ;; Hardware stack levels used:    1
  4877 ;; Hardware stack levels required when called:    2
  4878 ;; This function calls:
  4879 ;;		___flpack
  4880 ;; This function is called by:
  4881 ;;		_pow
  4882 ;; This function uses a non-reentrant model
  4883 ;;
  4884                           
  4885                           	psect	text20
  4886  002738                     __ptext20:
  4887                           	opt stack 0
  4888  002738                     ___lltofl:
  4889                           	opt stack 25
  4890                           
  4891                           ; BSR set to: 0
  4892                           
  4893                           ;incstack = 0
  4894  002738  C00E  F004         	movff	___lltofl@c,___flpack@arg
  4895  00273C  C00F  F005         	movff	___lltofl@c+1,___flpack@arg+1
  4896  002740  C010  F006         	movff	___lltofl@c+2,___flpack@arg+2
  4897  002744  C011  F007         	movff	___lltofl@c+3,___flpack@arg+3
  4898  002748  0E96               	movlw	150
  4899  00274A  6E08               	movwf	___flpack@exp,c
  4900  00274C  0E00               	movlw	0
  4901  00274E  6E09               	movwf	___flpack@sign,c
  4902  002750  EC3A  F00F         	call	___flpack	;wreg free
  4903  002754  C004  F00E         	movff	?___flpack,?___lltofl
  4904  002758  C005  F00F         	movff	?___flpack+1,?___lltofl+1
  4905  00275C  C006  F010         	movff	?___flpack+2,?___lltofl+2
  4906  002760  C007  F011         	movff	?___flpack+3,?___lltofl+3
  4907  002764  0012               	return		;funcret
  4908  002766                     __end_of___lltofl:
  4909                           	opt stack 0
  4910                           tblptru	equ	0xFF8
  4911                           tblptrh	equ	0xFF7
  4912                           tblptrl	equ	0xFF6
  4913                           tablat	equ	0xFF5
  4914                           prodl	equ	0xFF3
  4915                           intcon	equ	0xFF2
  4916                           intcon2	equ	0xFF1
  4917                           postinc0	equ	0xFEE
  4918                           wreg	equ	0xFE8
  4919                           postdec1	equ	0xFE5
  4920                           fsr1l	equ	0xFE1
  4921                           indf2	equ	0xFDF
  4922                           postinc2	equ	0xFDE
  4923                           postdec2	equ	0xFDD
  4924                           fsr2h	equ	0xFDA
  4925                           fsr2l	equ	0xFD9
  4926                           status	equ	0xFD8
  4927                           
  4928 ;; *************** function _log10 *****************
  4929 ;; Defined at:
  4930 ;;		line 39 in file "/opt/microchip/xc8/v1.34/sources/common/log.c"
  4931 ;; Parameters:    Size  Location     Type
  4932 ;;  x               4   73[COMRAM] unsigned long 
  4933 ;; Auto vars:     Size  Location     Type
  4934 ;;		None
  4935 ;; Return value:  Size  Location     Type
  4936 ;;                  4   73[COMRAM] unsigned long 
  4937 ;; Registers used:
  4938 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4939 ;; Tracked objects:
  4940 ;;		On entry : 0/0
  4941 ;;		On exit  : 0/0
  4942 ;;		Unchanged: 0/0
  4943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4944 ;;      Params:         4       0       0       0       0       0       0       0       0
  4945 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4946 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4947 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4948 ;;Total ram usage:        8 bytes
  4949 ;; Hardware stack levels used:    1
  4950 ;; Hardware stack levels required when called:    5
  4951 ;; This function calls:
  4952 ;;		___flmul
  4953 ;;		_log
  4954 ;; This function is called by:
  4955 ;;		_format_double
  4956 ;; This function uses a non-reentrant model
  4957 ;;
  4958                           
  4959                           	psect	text21
  4960  0023CC                     __ptext21:
  4961                           	opt stack 0
  4962  0023CC                     _log10:
  4963                           	opt stack 23
  4964                           
  4965                           ;incstack = 0
  4966  0023CC  C04A  F044         	movff	log10@x,log@x
  4967  0023D0  C04B  F045         	movff	log10@x+1,log@x+1
  4968  0023D4  C04C  F046         	movff	log10@x+2,log@x+2
  4969  0023D8  C04D  F047         	movff	log10@x+3,log@x+3
  4970  0023DC  ECF8  F00B         	call	_log	;wreg free
  4971  0023E0  C044  F04E         	movff	?_log,_log10$1105
  4972  0023E4  C045  F04F         	movff	?_log+1,_log10$1105+1
  4973  0023E8  C046  F050         	movff	?_log+2,_log10$1105+2
  4974  0023EC  C047  F051         	movff	?_log+3,_log10$1105+3
  4975  0023F0  C04E  F01D         	movff	_log10$1105,___flmul@f1
  4976  0023F4  C04F  F01E         	movff	_log10$1105+1,___flmul@f1+1
  4977  0023F8  C050  F01F         	movff	_log10$1105+2,___flmul@f1+2
  4978  0023FC  C051  F020         	movff	_log10$1105+3,___flmul@f1+3
  4979  002400  0ED9               	movlw	217
  4980  002402  6E21               	movwf	___flmul@f2,c
  4981  002404  0E5B               	movlw	91
  4982  002406  6E22               	movwf	___flmul@f2+1,c
  4983  002408  0EDE               	movlw	222
  4984  00240A  6E23               	movwf	___flmul@f2+2,c
  4985  00240C  0E3E               	movlw	62
  4986  00240E  6E24               	movwf	___flmul@f2+3,c
  4987  002410  ECD8  F00E         	call	___flmul	;wreg free
  4988  002414  C01D  F04A         	movff	?___flmul,?_log10
  4989  002418  C01E  F04B         	movff	?___flmul+1,?_log10+1
  4990  00241C  C01F  F04C         	movff	?___flmul+2,?_log10+2
  4991  002420  C020  F04D         	movff	?___flmul+3,?_log10+3
  4992  002424  0012               	return		;funcret
  4993  002426                     __end_of_log10:
  4994                           	opt stack 0
  4995                           tblptru	equ	0xFF8
  4996                           tblptrh	equ	0xFF7
  4997                           tblptrl	equ	0xFF6
  4998                           tablat	equ	0xFF5
  4999                           prodl	equ	0xFF3
  5000                           intcon	equ	0xFF2
  5001                           intcon2	equ	0xFF1
  5002                           postinc0	equ	0xFEE
  5003                           wreg	equ	0xFE8
  5004                           postdec1	equ	0xFE5
  5005                           fsr1l	equ	0xFE1
  5006                           indf2	equ	0xFDF
  5007                           postinc2	equ	0xFDE
  5008                           postdec2	equ	0xFDD
  5009                           fsr2h	equ	0xFDA
  5010                           fsr2l	equ	0xFD9
  5011                           status	equ	0xFD8
  5012                           
  5013 ;; *************** function _log *****************
  5014 ;; Defined at:
  5015 ;;		line 5 in file "/opt/microchip/xc8/v1.34/sources/common/log.c"
  5016 ;; Parameters:    Size  Location     Type
  5017 ;;  x               4   67[COMRAM] unsigned long 
  5018 ;; Auto vars:     Size  Location     Type
  5019 ;;  exponent        2   71[COMRAM] int 
  5020 ;; Return value:  Size  Location     Type
  5021 ;;                  4   67[COMRAM] int 
  5022 ;; Registers used:
  5023 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5024 ;; Tracked objects:
  5025 ;;		On entry : 0/0
  5026 ;;		On exit  : 0/0
  5027 ;;		Unchanged: 0/0
  5028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5029 ;;      Params:         4       0       0       0       0       0       0       0       0
  5030 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5031 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5032 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5033 ;;Total ram usage:        6 bytes
  5034 ;; Hardware stack levels used:    1
  5035 ;; Hardware stack levels required when called:    4
  5036 ;; This function calls:
  5037 ;;		___awtofl
  5038 ;;		___fladd
  5039 ;;		___flmul
  5040 ;;		_eval_poly
  5041 ;;		_frexp
  5042 ;; This function is called by:
  5043 ;;		_log10
  5044 ;;		_pow
  5045 ;; This function uses a non-reentrant model
  5046 ;;
  5047                           
  5048                           	psect	text22
  5049  0017F0                     __ptext22:
  5050                           	opt stack 0
  5051  0017F0                     _log:
  5052                           	opt stack 23
  5053                           
  5054                           ;incstack = 0
  5055  0017F0  AE47               	btfss	log@x+3,7,c
  5056  0017F2  D005               	goto	l3850
  5057  0017F4  6A44               	clrf	?_log,c
  5058  0017F6  6A45               	clrf	?_log+1,c
  5059  0017F8  6A46               	clrf	?_log+2,c
  5060  0017FA  6A47               	clrf	?_log+3,c
  5061  0017FC  0012               	return	
  5062  0017FE                     l3850:
  5063  0017FE  5044               	movf	log@x,w,c
  5064  001800  1045               	iorwf	log@x+1,w,c
  5065  001802  1046               	iorwf	log@x+2,w,c
  5066  001804  1047               	iorwf	log@x+3,w,c
  5067  001806  E105               	bnz	l3854
  5068  001808  6A44               	clrf	?_log,c
  5069  00180A  6A45               	clrf	?_log+1,c
  5070  00180C  6A46               	clrf	?_log+2,c
  5071  00180E  6A47               	clrf	?_log+3,c
  5072  001810  0012               	return	
  5073  001812                     l3854:
  5074  001812  6A21               	clrf	___flmul@f2,c
  5075  001814  6A22               	clrf	___flmul@f2+1,c
  5076  001816  6A23               	clrf	___flmul@f2+2,c
  5077  001818  0E40               	movlw	64
  5078  00181A  6E24               	movwf	___flmul@f2+3,c
  5079  00181C  0E48               	movlw	low log@exponent
  5080  00181E  6E08               	movwf	frexp@eptr,c
  5081  001820  C044  F004         	movff	log@x,frexp@value
  5082  001824  C045  F005         	movff	log@x+1,frexp@value+1
  5083  001828  C046  F006         	movff	log@x+2,frexp@value+2
  5084  00182C  C047  F007         	movff	log@x+3,frexp@value+3
  5085  001830  EC3C  F011         	call	_frexp	;wreg free
  5086  001834  C004  F01D         	movff	?_frexp,___flmul@f1
  5087  001838  C005  F01E         	movff	?_frexp+1,___flmul@f1+1
  5088  00183C  C006  F01F         	movff	?_frexp+2,___flmul@f1+2
  5089  001840  C007  F020         	movff	?_frexp+3,___flmul@f1+3
  5090  001844  ECD8  F00E         	call	___flmul	;wreg free
  5091  001848  C01D  F02C         	movff	?___flmul,___fladd@f1
  5092  00184C  C01E  F02D         	movff	?___flmul+1,___fladd@f1+1
  5093  001850  C01F  F02E         	movff	?___flmul+2,___fladd@f1+2
  5094  001854  C020  F02F         	movff	?___flmul+3,___fladd@f1+3
  5095  001858  D857               	call	PL24	;call to abstracted procedure
  5096  00185A  EC4B  F00B         	call	___fladd	;wreg free
  5097  00185E  C02C  F044         	movff	?___fladd,log@x
  5098  001862  C02D  F045         	movff	?___fladd+1,log@x+1
  5099  001866  C02E  F046         	movff	?___fladd+2,log@x+2
  5100  00186A  C02F  F047         	movff	?___fladd+3,log@x+3
  5101  00186E  0648               	decf	log@exponent,f,c
  5102  001870  A0D8               	btfss	status,0,c
  5103  001872  0649               	decf	log@exponent+1,f,c
  5104  001874  C044  F038         	movff	log@x,eval_poly@x
  5105  001878  C045  F039         	movff	log@x+1,eval_poly@x+1
  5106  00187C  C046  F03A         	movff	log@x+2,eval_poly@x+2
  5107  001880  C047  F03B         	movff	log@x+3,eval_poly@x+3
  5108  001884  0E29               	movlw	low log@coeff
  5109  001886  6E3C               	movwf	eval_poly@d,c
  5110  001888  6A3E               	clrf	eval_poly@n+1,c
  5111  00188A  0E08               	movlw	8
  5112  00188C  6E3D               	movwf	eval_poly@n,c
  5113  00188E  ECF3  F00F         	call	_eval_poly	;wreg free
  5114  001892  C038  F044         	movff	?_eval_poly,log@x
  5115  001896  C039  F045         	movff	?_eval_poly+1,log@x+1
  5116  00189A  C03A  F046         	movff	?_eval_poly+2,log@x+2
  5117  00189E  C03B  F047         	movff	?_eval_poly+3,log@x+3
  5118  0018A2  0E18               	movlw	24
  5119  0018A4  6E21               	movwf	___flmul@f2,c
  5120  0018A6  0E72               	movlw	114
  5121  0018A8  6E22               	movwf	___flmul@f2+1,c
  5122  0018AA  0E31               	movlw	49
  5123  0018AC  6E23               	movwf	___flmul@f2+2,c
  5124  0018AE  0E3F               	movlw	63
  5125  0018B0  6E24               	movwf	___flmul@f2+3,c
  5126  0018B2  C048  F00E         	movff	log@exponent,___awtofl@c
  5127  0018B6  C049  F00F         	movff	log@exponent+1,___awtofl@c+1
  5128  0018BA  EC33  F013         	call	___awtofl	;wreg free
  5129  0018BE  C00E  F01D         	movff	?___awtofl,___flmul@f1
  5130  0018C2  C00F  F01E         	movff	?___awtofl+1,___flmul@f1+1
  5131  0018C6  C010  F01F         	movff	?___awtofl+2,___flmul@f1+2
  5132  0018CA  C011  F020         	movff	?___awtofl+3,___flmul@f1+3
  5133  0018CE  ECD8  F00E         	call	___flmul	;wreg free
  5134  0018D2  C01D  F02C         	movff	?___flmul,___fladd@f1
  5135  0018D6  C01E  F02D         	movff	?___flmul+1,___fladd@f1+1
  5136  0018DA  C01F  F02E         	movff	?___flmul+2,___fladd@f1+2
  5137  0018DE  C020  F02F         	movff	?___flmul+3,___fladd@f1+3
  5138  0018E2  C044  F030         	movff	log@x,___fladd@f2
  5139  0018E6  C045  F031         	movff	log@x+1,___fladd@f2+1
  5140  0018EA  C046  F032         	movff	log@x+2,___fladd@f2+2
  5141  0018EE  C047  F033         	movff	log@x+3,___fladd@f2+3
  5142  0018F2  EC4B  F00B         	call	___fladd	;wreg free
  5143  0018F6  C02C  F044         	movff	?___fladd,?_log
  5144  0018FA  C02D  F045         	movff	?___fladd+1,?_log+1
  5145  0018FE  C02E  F046         	movff	?___fladd+2,?_log+2
  5146  001902  C02F  F047         	movff	?___fladd+3,?_log+3
  5147  001906  0012               	return		;funcret
  5148  001908                     __end_of_log:
  5149                           	opt stack 0
  5150  001908                     PL24:
  5151                           	opt stack 23
  5152  001908  0E00               	movlw	0
  5153  00190A  6E30               	movwf	___fladd@f2,c
  5154  00190C  6E31               	movwf	___fladd@f2+1,c
  5155  00190E  0E80               	movlw	128
  5156  001910  6E32               	movwf	___fladd@f2+2,c
  5157  001912  0EBF               	movlw	191
  5158  001914  6E33               	movwf	___fladd@f2+3,c
  5159  001916  0CBF               	retlw	191
  5160  001918                     __end_ofPL24:
  5161                           	opt stack 0
  5162                           tblptru	equ	0xFF8
  5163                           tblptrh	equ	0xFF7
  5164                           tblptrl	equ	0xFF6
  5165                           tablat	equ	0xFF5
  5166                           prodl	equ	0xFF3
  5167                           intcon	equ	0xFF2
  5168                           intcon2	equ	0xFF1
  5169                           postinc0	equ	0xFEE
  5170                           wreg	equ	0xFE8
  5171                           postdec1	equ	0xFE5
  5172                           fsr1l	equ	0xFE1
  5173                           indf2	equ	0xFDF
  5174                           postinc2	equ	0xFDE
  5175                           postdec2	equ	0xFDD
  5176                           fsr2h	equ	0xFDA
  5177                           fsr2l	equ	0xFD9
  5178                           status	equ	0xFD8
  5179                           
  5180 ;; *************** function _frexp *****************
  5181 ;; Defined at:
  5182 ;;		line 254 in file "/opt/microchip/xc8/v1.34/sources/common/frexp.c"
  5183 ;; Parameters:    Size  Location     Type
  5184 ;;  value           4    3[COMRAM] int 
  5185 ;;  eptr            1    7[COMRAM] PTR int 
  5186 ;;		 -> log@exponent(2), floor@expon(2), 
  5187 ;; Auto vars:     Size  Location     Type
  5188 ;;		None
  5189 ;; Return value:  Size  Location     Type
  5190 ;;                  4    3[COMRAM] PTR int 
  5191 ;; Registers used:
  5192 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5193 ;; Tracked objects:
  5194 ;;		On entry : 0/0
  5195 ;;		On exit  : 0/0
  5196 ;;		Unchanged: 0/0
  5197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5198 ;;      Params:         5       0       0       0       0       0       0       0       0
  5199 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5200 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5201 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5202 ;;Total ram usage:        7 bytes
  5203 ;; Hardware stack levels used:    1
  5204 ;; Hardware stack levels required when called:    1
  5205 ;; This function calls:
  5206 ;;		Nothing
  5207 ;; This function is called by:
  5208 ;;		_floor
  5209 ;;		_log
  5210 ;; This function uses a non-reentrant model
  5211 ;;
  5212                           
  5213                           	psect	text23
  5214  002278                     __ptext23:
  5215                           	opt stack 0
  5216  002278                     _frexp:
  5217                           	opt stack 25
  5218                           
  5219                           ;incstack = 0
  5220  002278  5004               	movf	frexp@value,w,c
  5221  00227A  1005               	iorwf	frexp@value+1,w,c
  5222  00227C  1006               	iorwf	frexp@value+2,w,c
  5223  00227E  1007               	iorwf	frexp@value+3,w,c
  5224  002280  E10B               	bnz	l2600
  5225  002282  5008               	movf	frexp@eptr,w,c
  5226  002284  6ED9               	movwf	fsr2l,c
  5227  002286  6ADA               	clrf	fsr2h,c
  5228  002288  0E00               	movlw	0
  5229  00228A  6ADE               	clrf	postinc2,c
  5230  00228C  6ADD               	clrf	postdec2,c
  5231  00228E  6A04               	clrf	?_frexp,c
  5232  002290  6A05               	clrf	?_frexp+1,c
  5233  002292  6A06               	clrf	?_frexp+2,c
  5234  002294  6A07               	clrf	?_frexp+3,c
  5235  002296  0012               	return	
  5236  002298                     l2600:
  5237  002298  5007               	movf	frexp@value+3,w,c
  5238  00229A  0B7F               	andlw	127
  5239  00229C  6E09               	movwf	??_frexp& (0+255),c
  5240  00229E  6A0A               	clrf	(??_frexp+1)& (0+255),c
  5241  0022A0  90D8               	bcf	status,0,c
  5242  0022A2  3609               	rlcf	??_frexp,f,c
  5243  0022A4  360A               	rlcf	??_frexp+1,f,c
  5244  0022A6  5008               	movf	frexp@eptr,w,c
  5245  0022A8  6ED9               	movwf	fsr2l,c
  5246  0022AA  6ADA               	clrf	fsr2h,c
  5247  0022AC  C009  FFDE         	movff	??_frexp,postinc2
  5248  0022B0  C00A  FFDD         	movff	??_frexp+1,postdec2
  5249  0022B4  5008               	movf	frexp@eptr,w,c
  5250  0022B6  6ED9               	movwf	fsr2l,c
  5251  0022B8  6ADA               	clrf	fsr2h,c
  5252  0022BA  0E01               	movlw	1
  5253  0022BC  AE06               	btfss	frexp@value+2,7,c
  5254  0022BE  0E00               	movlw	0
  5255  0022C0  12DE               	iorwf	postinc2,f,c
  5256  0022C2  0E00               	movlw	0
  5257  0022C4  12DD               	iorwf	postdec2,f,c
  5258  0022C6  5008               	movf	frexp@eptr,w,c
  5259  0022C8  6ED9               	movwf	fsr2l,c
  5260  0022CA  6ADA               	clrf	fsr2h,c
  5261  0022CC  0E82               	movlw	130
  5262  0022CE  26DE               	addwf	postinc2,f,c
  5263  0022D0  0EFF               	movlw	255
  5264  0022D2  22DD               	addwfc	postdec2,f,c
  5265  0022D4  5007               	movf	frexp@value+3,w,c
  5266  0022D6  0B80               	andlw	-128
  5267  0022D8  093F               	iorlw	63
  5268  0022DA  6E07               	movwf	frexp@value+3,c
  5269  0022DC  9E06               	bcf	frexp@value+2,7,c
  5270  0022DE  C004  F004         	movff	frexp@value,?_frexp
  5271  0022E2  C005  F005         	movff	frexp@value+1,?_frexp+1
  5272  0022E6  C006  F006         	movff	frexp@value+2,?_frexp+2
  5273  0022EA  C007  F007         	movff	frexp@value+3,?_frexp+3
  5274  0022EE  0012               	return		;funcret
  5275  0022F0                     __end_of_frexp:
  5276                           	opt stack 0
  5277                           tblptru	equ	0xFF8
  5278                           tblptrh	equ	0xFF7
  5279                           tblptrl	equ	0xFF6
  5280                           tablat	equ	0xFF5
  5281                           prodl	equ	0xFF3
  5282                           intcon	equ	0xFF2
  5283                           intcon2	equ	0xFF1
  5284                           postinc0	equ	0xFEE
  5285                           wreg	equ	0xFE8
  5286                           postdec1	equ	0xFE5
  5287                           fsr1l	equ	0xFE1
  5288                           indf2	equ	0xFDF
  5289                           postinc2	equ	0xFDE
  5290                           postdec2	equ	0xFDD
  5291                           fsr2h	equ	0xFDA
  5292                           fsr2l	equ	0xFD9
  5293                           status	equ	0xFD8
  5294                           
  5295 ;; *************** function _eval_poly *****************
  5296 ;; Defined at:
  5297 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/evalpoly.c"
  5298 ;; Parameters:    Size  Location     Type
  5299 ;;  x               4   55[COMRAM] PTR int 
  5300 ;;  d               1   59[COMRAM] PTR const 
  5301 ;;		 -> exp@coeff(40), log@coeff(36), 
  5302 ;;  n               2   60[COMRAM] int 
  5303 ;; Auto vars:     Size  Location     Type
  5304 ;;  res             4   63[COMRAM] int 
  5305 ;; Return value:  Size  Location     Type
  5306 ;;                  4   55[COMRAM] int 
  5307 ;; Registers used:
  5308 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5309 ;; Tracked objects:
  5310 ;;		On entry : 0/0
  5311 ;;		On exit  : 0/0
  5312 ;;		Unchanged: 0/0
  5313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5314 ;;      Params:         7       0       0       0       0       0       0       0       0
  5315 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5316 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5317 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5318 ;;Total ram usage:       12 bytes
  5319 ;; Hardware stack levels used:    1
  5320 ;; Hardware stack levels required when called:    3
  5321 ;; This function calls:
  5322 ;;		___fladd
  5323 ;;		___flmul
  5324 ;; This function is called by:
  5325 ;;		_log
  5326 ;;		_exp
  5327 ;; This function uses a non-reentrant model
  5328 ;;
  5329                           
  5330                           	psect	text24
  5331  001FE6                     __ptext24:
  5332                           	opt stack 0
  5333  001FE6                     _eval_poly:
  5334                           	opt stack 0
  5335                           
  5336                           ;incstack = 0
  5337  001FE6  D84B               	call	PL14	;call to abstracted procedure
  5338  001FE8  CFF5 F040          	movff	tablat,eval_poly@res
  5339  001FEC  0009               	tblrd		*+
  5340  001FEE  CFF5 F041          	movff	tablat,eval_poly@res+1
  5341  001FF2  0009               	tblrd		*+
  5342  001FF4  CFF5 F042          	movff	tablat,eval_poly@res+2
  5343  001FF8  000A               	tblrd		*-
  5344  001FFA  CFF5 F043          	movff	tablat,eval_poly@res+3
  5345  001FFE  D033               	goto	l3840
  5346  002000                     l3838:
  5347  002000  C040  F021         	movff	eval_poly@res,___flmul@f2
  5348  002004  C041  F022         	movff	eval_poly@res+1,___flmul@f2+1
  5349  002008  C042  F023         	movff	eval_poly@res+2,___flmul@f2+2
  5350  00200C  C043  F024         	movff	eval_poly@res+3,___flmul@f2+3
  5351  002010  C038  F01D         	movff	eval_poly@x,___flmul@f1
  5352  002014  C039  F01E         	movff	eval_poly@x+1,___flmul@f1+1
  5353  002018  C03A  F01F         	movff	eval_poly@x+2,___flmul@f1+2
  5354  00201C  C03B  F020         	movff	eval_poly@x+3,___flmul@f1+3
  5355  002020  ECD8  F00E         	call	___flmul	;wreg free
  5356  002024  C01D  F02C         	movff	?___flmul,___fladd@f1
  5357  002028  C01E  F02D         	movff	?___flmul+1,___fladd@f1+1
  5358  00202C  C01F  F02E         	movff	?___flmul+2,___fladd@f1+2
  5359  002030  C020  F02F         	movff	?___flmul+3,___fladd@f1+3
  5360  002034  063D               	decf	eval_poly@n,f,c
  5361  002036  A0D8               	btfss	status,0,c
  5362  002038  063E               	decf	eval_poly@n+1,f,c
  5363  00203A  D821               	call	PL14	;call to abstracted procedure
  5364  00203C  CFF5 F030          	movff	tablat,___fladd@f2
  5365  002040  0009               	tblrd		*+
  5366  002042  CFF5 F031          	movff	tablat,___fladd@f2+1
  5367  002046  0009               	tblrd		*+
  5368  002048  CFF5 F032          	movff	tablat,___fladd@f2+2
  5369  00204C  000A               	tblrd		*-
  5370  00204E  CFF5 F033          	movff	tablat,___fladd@f2+3
  5371  002052  EC4B  F00B         	call	___fladd	;wreg free
  5372  002056  C02C  F040         	movff	?___fladd,eval_poly@res
  5373  00205A  C02D  F041         	movff	?___fladd+1,eval_poly@res+1
  5374  00205E  C02E  F042         	movff	?___fladd+2,eval_poly@res+2
  5375  002062  C02F  F043         	movff	?___fladd+3,eval_poly@res+3
  5376  002066                     l3840:
  5377  002066  503D               	movf	eval_poly@n,w,c
  5378  002068  103E               	iorwf	eval_poly@n+1,w,c
  5379  00206A  E1CA               	bnz	l3838
  5380  00206C  C040  F038         	movff	eval_poly@res,?_eval_poly
  5381  002070  C041  F039         	movff	eval_poly@res+1,?_eval_poly+1
  5382  002074  C042  F03A         	movff	eval_poly@res+2,?_eval_poly+2
  5383  002078  C043  F03B         	movff	eval_poly@res+3,?_eval_poly+3
  5384  00207C  0012               	return		;funcret
  5385  00207E                     __end_of_eval_poly:
  5386                           	opt stack 0
  5387  00207E                     PL14:
  5388                           	opt stack 23
  5389  00207E  503D               	movf	eval_poly@n,w,c
  5390  002080  0D04               	mullw	4
  5391  002082  503C               	movf	eval_poly@d,w,c
  5392  002084  24F3               	addwf	prodl,w,c
  5393  002086  6E3F               	movwf	??_eval_poly& (0+255),c
  5394  002088  C03F  FFF6         	movff	??_eval_poly,tblptrl
  5395  00208C                     	if	0	;There is only one active tblptr byte
  5396  00208C                     	endif
  5397  00208C                     	if	0	;tblptru may be non-zero
  5398  00208C                     	endif
  5399  00208C                     	if	0	;tblptru may be non-zero
  5400  00208C                     	endif
  5401  00208C  0009               	tblrd		*+
  5402  00208E  0012               	return	
  5403  002090                     __end_ofPL14:
  5404                           	opt stack 0
  5405                           tblptru	equ	0xFF8
  5406                           tblptrh	equ	0xFF7
  5407                           tblptrl	equ	0xFF6
  5408                           tablat	equ	0xFF5
  5409                           prodl	equ	0xFF3
  5410                           intcon	equ	0xFF2
  5411                           intcon2	equ	0xFF1
  5412                           postinc0	equ	0xFEE
  5413                           wreg	equ	0xFE8
  5414                           postdec1	equ	0xFE5
  5415                           fsr1l	equ	0xFE1
  5416                           indf2	equ	0xFDF
  5417                           postinc2	equ	0xFDE
  5418                           postdec2	equ	0xFDD
  5419                           fsr2h	equ	0xFDA
  5420                           fsr2l	equ	0xFD9
  5421                           status	equ	0xFD8
  5422                           
  5423 ;; *************** function ___flmul *****************
  5424 ;; Defined at:
  5425 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/flmul.c"
  5426 ;; Parameters:    Size  Location     Type
  5427 ;;  f1              4   28[COMRAM] int 
  5428 ;;  f2              4   32[COMRAM] int 
  5429 ;; Auto vars:     Size  Location     Type
  5430 ;;  f3_as_produc    4   37[COMRAM] unsigned long 
  5431 ;;  sign            1   42[COMRAM] unsigned char 
  5432 ;;  cntr            1   41[COMRAM] unsigned char 
  5433 ;;  exp             1   36[COMRAM] unsigned char 
  5434 ;; Return value:  Size  Location     Type
  5435 ;;                  4   28[COMRAM] unsigned char 
  5436 ;; Registers used:
  5437 ;;		wreg, status,2, status,0, cstack
  5438 ;; Tracked objects:
  5439 ;;		On entry : 0/0
  5440 ;;		On exit  : 0/0
  5441 ;;		Unchanged: 0/0
  5442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5443 ;;      Params:         8       0       0       0       0       0       0       0       0
  5444 ;;      Locals:         7       0       0       0       0       0       0       0       0
  5445 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5446 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5447 ;;Total ram usage:       15 bytes
  5448 ;; Hardware stack levels used:    1
  5449 ;; Hardware stack levels required when called:    2
  5450 ;; This function calls:
  5451 ;;		___flpack
  5452 ;; This function is called by:
  5453 ;;		_format_double
  5454 ;;		_measure_capacitance
  5455 ;;		_measure_inductance
  5456 ;;		_log
  5457 ;;		_log10
  5458 ;;		_pow
  5459 ;;		_eval_poly
  5460 ;;		_exp
  5461 ;; This function uses a non-reentrant model
  5462 ;;
  5463                           
  5464                           	psect	text25
  5465  001DB0                     __ptext25:
  5466                           	opt stack 0
  5467  001DB0                     ___flmul:
  5468                           	opt stack 27
  5469                           
  5470                           ;incstack = 0
  5471  001DB0  341F               	rlcf	___flmul@f1+2,w,c
  5472  001DB2  3420               	rlcf	___flmul@f1+3,w,c
  5473  001DB4  6E25               	movwf	___flmul@exp,c
  5474  001DB6  5025               	movf	___flmul@exp,w,c
  5475  001DB8  E105               	bnz	l3682
  5476  001DBA  6A1D               	clrf	?___flmul,c
  5477  001DBC  6A1E               	clrf	?___flmul+1,c
  5478  001DBE  6A1F               	clrf	?___flmul+2,c
  5479  001DC0  6A20               	clrf	?___flmul+3,c
  5480  001DC2  0012               	return	
  5481  001DC4                     l3682:
  5482  001DC4  3423               	rlcf	___flmul@f2+2,w,c
  5483  001DC6  3424               	rlcf	___flmul@f2+3,w,c
  5484  001DC8  6E2B               	movwf	___flmul@sign,c
  5485  001DCA  502B               	movf	___flmul@sign,w,c
  5486  001DCC  E105               	bnz	l3686
  5487  001DCE  6A1D               	clrf	?___flmul,c
  5488  001DD0  6A1E               	clrf	?___flmul+1,c
  5489  001DD2  6A1F               	clrf	?___flmul+2,c
  5490  001DD4  6A20               	clrf	?___flmul+3,c
  5491  001DD6  0012               	return	
  5492  001DD8                     l3686:
  5493  001DD8  502B               	movf	___flmul@sign,w,c
  5494  001DDA  0F7B               	addlw	123
  5495  001DDC  2625               	addwf	___flmul@exp,f,c
  5496  001DDE  C020  F02B         	movff	___flmul@f1+3,___flmul@sign
  5497  001DE2  5024               	movf	___flmul@f2+3,w,c
  5498  001DE4  1A2B               	xorwf	___flmul@sign,f,c
  5499  001DE6  0E80               	movlw	128
  5500  001DE8  162B               	andwf	___flmul@sign,f,c
  5501  001DEA  8E1F               	bsf	___flmul@f1+2,7,c
  5502  001DEC  8E23               	bsf	___flmul@f2+2,7,c
  5503  001DEE  0E00               	movlw	0
  5504  001DF0  1624               	andwf	___flmul@f2+3,f,c
  5505  001DF2  6A26               	clrf	___flmul@f3_as_product,c
  5506  001DF4  6A27               	clrf	___flmul@f3_as_product+1,c
  5507  001DF6  6A28               	clrf	___flmul@f3_as_product+2,c
  5508  001DF8  6A29               	clrf	___flmul@f3_as_product+3,c
  5509  001DFA  0E07               	movlw	7
  5510  001DFC  6E2A               	movwf	___flmul@cntr,c
  5511  001DFE                     l3698:
  5512  001DFE  B01D               	btfsc	___flmul@f1,0,c
  5513  001E00  D829               	call	PL16	;call to abstracted procedure
  5514  001E02  D831               	call	PL36	;call to abstracted procedure
  5515  001E04  3621               	rlcf	___flmul@f2,f,c
  5516  001E06  3622               	rlcf	___flmul@f2+1,f,c
  5517  001E08  3623               	rlcf	___flmul@f2+2,f,c
  5518  001E0A  3624               	rlcf	___flmul@f2+3,f,c
  5519  001E0C  2E2A               	decfsz	___flmul@cntr,f,c
  5520  001E0E  D7F7               	goto	l3698
  5521  001E10  0E11               	movlw	17
  5522  001E12  6E2A               	movwf	___flmul@cntr,c
  5523  001E14                     l3710:
  5524  001E14  B01D               	btfsc	___flmul@f1,0,c
  5525  001E16  D81E               	call	PL16	;call to abstracted procedure
  5526  001E18  D826               	call	PL36	;call to abstracted procedure
  5527  001E1A  3229               	rrcf	___flmul@f3_as_product+3,f,c
  5528  001E1C  3228               	rrcf	___flmul@f3_as_product+2,f,c
  5529  001E1E  3227               	rrcf	___flmul@f3_as_product+1,f,c
  5530  001E20  3226               	rrcf	___flmul@f3_as_product,f,c
  5531  001E22  2E2A               	decfsz	___flmul@cntr,f,c
  5532  001E24  D7F7               	goto	l3710
  5533  001E26  C026  F004         	movff	___flmul@f3_as_product,___flpack@arg
  5534  001E2A  C027  F005         	movff	___flmul@f3_as_product+1,___flpack@arg+1
  5535  001E2E  C028  F006         	movff	___flmul@f3_as_product+2,___flpack@arg+2
  5536  001E32  C029  F007         	movff	___flmul@f3_as_product+3,___flpack@arg+3
  5537  001E36  C025  F008         	movff	___flmul@exp,___flpack@exp
  5538  001E3A  C02B  F009         	movff	___flmul@sign,___flpack@sign
  5539  001E3E  EC3A  F00F         	call	___flpack	;wreg free
  5540  001E42  C004  F01D         	movff	?___flpack,?___flmul
  5541  001E46  C005  F01E         	movff	?___flpack+1,?___flmul+1
  5542  001E4A  C006  F01F         	movff	?___flpack+2,?___flmul+2
  5543  001E4E  C007  F020         	movff	?___flpack+3,?___flmul+3
  5544  001E52  0012               	return		;funcret
  5545  001E54                     __end_of___flmul:
  5546                           	opt stack 0
  5547  001E54                     PL16:
  5548                           	opt stack 27
  5549  001E54  5021               	movf	___flmul@f2,w,c
  5550  001E56  2626               	addwf	___flmul@f3_as_product,f,c
  5551  001E58  5022               	movf	___flmul@f2+1,w,c
  5552  001E5A  2227               	addwfc	___flmul@f3_as_product+1,f,c
  5553  001E5C  5023               	movf	___flmul@f2+2,w,c
  5554  001E5E  2228               	addwfc	___flmul@f3_as_product+2,f,c
  5555  001E60  5024               	movf	___flmul@f2+3,w,c
  5556  001E62  2229               	addwfc	___flmul@f3_as_product+3,f,c
  5557  001E64  0012               	return	
  5558  001E66                     __end_ofPL16:
  5559                           	opt stack 0
  5560  001E66                     PL36:
  5561                           	opt stack 27
  5562  001E66  90D8               	bcf	status,0,c
  5563  001E68  3220               	rrcf	___flmul@f1+3,f,c
  5564  001E6A  321F               	rrcf	___flmul@f1+2,f,c
  5565  001E6C  321E               	rrcf	___flmul@f1+1,f,c
  5566  001E6E  321D               	rrcf	___flmul@f1,f,c
  5567  001E70  90D8               	bcf	status,0,c
  5568  001E72  0012               	return	
  5569  001E74                     __end_ofPL36:
  5570                           	opt stack 0
  5571                           tblptru	equ	0xFF8
  5572                           tblptrh	equ	0xFF7
  5573                           tblptrl	equ	0xFF6
  5574                           tablat	equ	0xFF5
  5575                           prodl	equ	0xFF3
  5576                           intcon	equ	0xFF2
  5577                           intcon2	equ	0xFF1
  5578                           postinc0	equ	0xFEE
  5579                           wreg	equ	0xFE8
  5580                           postdec1	equ	0xFE5
  5581                           fsr1l	equ	0xFE1
  5582                           indf2	equ	0xFDF
  5583                           postinc2	equ	0xFDE
  5584                           postdec2	equ	0xFDD
  5585                           fsr2h	equ	0xFDA
  5586                           fsr2l	equ	0xFD9
  5587                           status	equ	0xFD8
  5588                           
  5589 ;; *************** function ___fladd *****************
  5590 ;; Defined at:
  5591 ;;		line 88 in file "/opt/microchip/xc8/v1.34/sources/common/fladd.c"
  5592 ;; Parameters:    Size  Location     Type
  5593 ;;  f1              4   43[COMRAM] unsigned char 
  5594 ;;  f2              4   47[COMRAM] unsigned char 
  5595 ;; Auto vars:     Size  Location     Type
  5596 ;;  exp1            1   54[COMRAM] unsigned char 
  5597 ;;  exp2            1   53[COMRAM] unsigned char 
  5598 ;;  sign            1   52[COMRAM] unsigned char 
  5599 ;; Return value:  Size  Location     Type
  5600 ;;                  4   43[COMRAM] unsigned char 
  5601 ;; Registers used:
  5602 ;;		wreg, status,2, status,0, cstack
  5603 ;; Tracked objects:
  5604 ;;		On entry : 0/0
  5605 ;;		On exit  : 0/0
  5606 ;;		Unchanged: 0/0
  5607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5608 ;;      Params:         8       0       0       0       0       0       0       0       0
  5609 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5610 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5611 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5612 ;;Total ram usage:       12 bytes
  5613 ;; Hardware stack levels used:    1
  5614 ;; Hardware stack levels required when called:    2
  5615 ;; This function calls:
  5616 ;;		___flpack
  5617 ;; This function is called by:
  5618 ;;		_floor
  5619 ;;		___flsub
  5620 ;;		_log
  5621 ;;		_eval_poly
  5622 ;; This function uses a non-reentrant model
  5623 ;;
  5624                           
  5625                           	psect	text26
  5626  001696                     __ptext26:
  5627                           	opt stack 0
  5628  001696                     ___fladd:
  5629                           	opt stack 26
  5630                           
  5631                           ;incstack = 0
  5632  001696  342E               	rlcf	___fladd@f1+2,w,c
  5633  001698  342F               	rlcf	___fladd@f1+3,w,c
  5634  00169A  6E37               	movwf	___fladd@exp1,c
  5635  00169C  3432               	rlcf	___fladd@f2+2,w,c
  5636  00169E  3433               	rlcf	___fladd@f2+3,w,c
  5637  0016A0  6E36               	movwf	___fladd@exp2,c
  5638  0016A2  5037               	movf	___fladd@exp1,w,c
  5639  0016A4  E009               	bz	l800
  5640  0016A6  5036               	movf	___fladd@exp2,w,c
  5641  0016A8  5C37               	subwf	___fladd@exp1,w,c
  5642  0016AA  E20F               	bc	l3618
  5643  0016AC  5037               	movf	___fladd@exp1,w,c
  5644  0016AE  5C36               	subwf	___fladd@exp2,w,c
  5645  0016B0  6E34               	movwf	??___fladd& (0+255),c
  5646  0016B2  0E20               	movlw	32
  5647  0016B4  6434               	cpfsgt	??___fladd,c
  5648  0016B6  D009               	goto	l3618
  5649  0016B8                     l800:
  5650  0016B8  C030  F02C         	movff	___fladd@f2,?___fladd
  5651  0016BC  C031  F02D         	movff	___fladd@f2+1,?___fladd+1
  5652  0016C0  C032  F02E         	movff	___fladd@f2+2,?___fladd+2
  5653  0016C4  C033  F02F         	movff	___fladd@f2+3,?___fladd+3
  5654  0016C8  0012               	return	
  5655  0016CA                     l3618:
  5656  0016CA  5036               	movf	___fladd@exp2,w,c
  5657  0016CC  E009               	bz	l804
  5658  0016CE  5037               	movf	___fladd@exp1,w,c
  5659  0016D0  5C36               	subwf	___fladd@exp2,w,c
  5660  0016D2  E20F               	bc	l3624
  5661  0016D4  5036               	movf	___fladd@exp2,w,c
  5662  0016D6  5C37               	subwf	___fladd@exp1,w,c
  5663  0016D8  6E34               	movwf	??___fladd& (0+255),c
  5664  0016DA  0E20               	movlw	32
  5665  0016DC  6434               	cpfsgt	??___fladd,c
  5666  0016DE  D009               	goto	l3624
  5667  0016E0                     l804:
  5668  0016E0  C02C  F02C         	movff	___fladd@f1,?___fladd
  5669  0016E4  C02D  F02D         	movff	___fladd@f1+1,?___fladd+1
  5670  0016E8  C02E  F02E         	movff	___fladd@f1+2,?___fladd+2
  5671  0016EC  C02F  F02F         	movff	___fladd@f1+3,?___fladd+3
  5672  0016F0  0012               	return	
  5673  0016F2                     l3624:
  5674  0016F2  0E06               	movlw	6
  5675  0016F4  6E35               	movwf	___fladd@sign,c
  5676  0016F6  BE2F               	btfsc	___fladd@f1+3,7,c
  5677  0016F8  8E35               	bsf	___fladd@sign,7,c
  5678  0016FA  BE33               	btfsc	___fladd@f2+3,7,c
  5679  0016FC  8C35               	bsf	___fladd@sign,6,c
  5680  0016FE  8E2E               	bsf	___fladd@f1+2,7,c
  5681  001700  6A2F               	clrf	___fladd@f1+3,c
  5682  001702  8E32               	bsf	___fladd@f2+2,7,c
  5683  001704  6A33               	clrf	___fladd@f2+3,c
  5684  001706  5036               	movf	___fladd@exp2,w,c
  5685  001708  5C37               	subwf	___fladd@exp1,w,c
  5686  00170A  E21A               	bc	l3648
  5687  00170C                     l3638:
  5688  00170C  90D8               	bcf	status,0,c
  5689  00170E  3630               	rlcf	___fladd@f2,f,c
  5690  001710  3631               	rlcf	___fladd@f2+1,f,c
  5691  001712  3632               	rlcf	___fladd@f2+2,f,c
  5692  001714  3633               	rlcf	___fladd@f2+3,f,c
  5693  001716  0636               	decf	___fladd@exp2,f,c
  5694  001718  5037               	movf	___fladd@exp1,w,c
  5695  00171A  1836               	xorwf	___fladd@exp2,w,c
  5696  00171C  E00D               	bz	l3646
  5697  00171E  0635               	decf	___fladd@sign,f,c
  5698  001720  C035  F034         	movff	___fladd@sign,??___fladd
  5699  001724  0E07               	movlw	7
  5700  001726  1634               	andwf	??___fladd,f,c
  5701  001728  E007               	bz	l3646
  5702  00172A  D7F0               	goto	l3638
  5703  00172C                     l3644:
  5704  00172C  90D8               	bcf	status,0,c
  5705  00172E  322F               	rrcf	___fladd@f1+3,f,c
  5706  001730  322E               	rrcf	___fladd@f1+2,f,c
  5707  001732  322D               	rrcf	___fladd@f1+1,f,c
  5708  001734  322C               	rrcf	___fladd@f1,f,c
  5709  001736  2A37               	incf	___fladd@exp1,f,c
  5710  001738                     l3646:
  5711  001738  5036               	movf	___fladd@exp2,w,c
  5712  00173A  1837               	xorwf	___fladd@exp1,w,c
  5713  00173C  E01D               	bz	l815
  5714  00173E  D7F6               	goto	l3644
  5715  001740                     l3648:
  5716  001740  5037               	movf	___fladd@exp1,w,c
  5717  001742  5C36               	subwf	___fladd@exp2,w,c
  5718  001744  E219               	bc	l815
  5719  001746                     l3650:
  5720  001746  90D8               	bcf	status,0,c
  5721  001748  362C               	rlcf	___fladd@f1,f,c
  5722  00174A  362D               	rlcf	___fladd@f1+1,f,c
  5723  00174C  362E               	rlcf	___fladd@f1+2,f,c
  5724  00174E  362F               	rlcf	___fladd@f1+3,f,c
  5725  001750  0637               	decf	___fladd@exp1,f,c
  5726  001752  5037               	movf	___fladd@exp1,w,c
  5727  001754  1836               	xorwf	___fladd@exp2,w,c
  5728  001756  E00D               	bz	l3658
  5729  001758  0635               	decf	___fladd@sign,f,c
  5730  00175A  C035  F034         	movff	___fladd@sign,??___fladd
  5731  00175E  0E07               	movlw	7
  5732  001760  1634               	andwf	??___fladd,f,c
  5733  001762  E007               	bz	l3658
  5734  001764  D7F0               	goto	l3650
  5735  001766                     l3656:
  5736  001766  90D8               	bcf	status,0,c
  5737  001768  3233               	rrcf	___fladd@f2+3,f,c
  5738  00176A  3232               	rrcf	___fladd@f2+2,f,c
  5739  00176C  3231               	rrcf	___fladd@f2+1,f,c
  5740  00176E  3230               	rrcf	___fladd@f2,f,c
  5741  001770  2A36               	incf	___fladd@exp2,f,c
  5742  001772                     l3658:
  5743  001772  5036               	movf	___fladd@exp2,w,c
  5744  001774  1837               	xorwf	___fladd@exp1,w,c
  5745  001776  E1F7               	bnz	l3656
  5746  001778                     l815:
  5747  001778  AE35               	btfss	___fladd@sign,7,c
  5748  00177A  D009               	goto	l3662
  5749  00177C  1E2C               	comf	___fladd@f1,f,c
  5750  00177E  1E2D               	comf	___fladd@f1+1,f,c
  5751  001780  1E2E               	comf	___fladd@f1+2,f,c
  5752  001782  1E2F               	comf	___fladd@f1+3,f,c
  5753  001784  2A2C               	incf	___fladd@f1,f,c
  5754  001786  0E00               	movlw	0
  5755  001788  222D               	addwfc	___fladd@f1+1,f,c
  5756  00178A  222E               	addwfc	___fladd@f1+2,f,c
  5757  00178C  222F               	addwfc	___fladd@f1+3,f,c
  5758  00178E                     l3662:
  5759  00178E  BC35               	btfsc	___fladd@sign,6,c
  5760  001790  D825               	call	PL12	;call to abstracted procedure
  5761  001792  6A35               	clrf	___fladd@sign,c
  5762  001794  502C               	movf	___fladd@f1,w,c
  5763  001796  2630               	addwf	___fladd@f2,f,c
  5764  001798  502D               	movf	___fladd@f1+1,w,c
  5765  00179A  2231               	addwfc	___fladd@f2+1,f,c
  5766  00179C  502E               	movf	___fladd@f1+2,w,c
  5767  00179E  2232               	addwfc	___fladd@f2+2,f,c
  5768  0017A0  502F               	movf	___fladd@f1+3,w,c
  5769  0017A2  2233               	addwfc	___fladd@f2+3,f,c
  5770  0017A4  AE33               	btfss	___fladd@f2+3,7,c
  5771  0017A6  D003               	goto	l3674
  5772  0017A8  D819               	call	PL12	;call to abstracted procedure
  5773  0017AA  0E01               	movlw	1
  5774  0017AC  6E35               	movwf	___fladd@sign,c
  5775  0017AE                     l3674:
  5776  0017AE  C030  F004         	movff	___fladd@f2,___flpack@arg
  5777  0017B2  C031  F005         	movff	___fladd@f2+1,___flpack@arg+1
  5778  0017B6  C032  F006         	movff	___fladd@f2+2,___flpack@arg+2
  5779  0017BA  C033  F007         	movff	___fladd@f2+3,___flpack@arg+3
  5780  0017BE  C037  F008         	movff	___fladd@exp1,___flpack@exp
  5781  0017C2  C035  F009         	movff	___fladd@sign,___flpack@sign
  5782  0017C6  EC3A  F00F         	call	___flpack	;wreg free
  5783  0017CA  C004  F02C         	movff	?___flpack,?___fladd
  5784  0017CE  C005  F02D         	movff	?___flpack+1,?___fladd+1
  5785  0017D2  C006  F02E         	movff	?___flpack+2,?___fladd+2
  5786  0017D6  C007  F02F         	movff	?___flpack+3,?___fladd+3
  5787  0017DA  0012               	return		;funcret
  5788  0017DC                     __end_of___fladd:
  5789                           	opt stack 0
  5790  0017DC                     PL12:
  5791                           	opt stack 26
  5792  0017DC  1E30               	comf	___fladd@f2,f,c
  5793  0017DE  1E31               	comf	___fladd@f2+1,f,c
  5794  0017E0  1E32               	comf	___fladd@f2+2,f,c
  5795  0017E2  1E33               	comf	___fladd@f2+3,f,c
  5796  0017E4  2A30               	incf	___fladd@f2,f,c
  5797  0017E6  0E00               	movlw	0
  5798  0017E8  2231               	addwfc	___fladd@f2+1,f,c
  5799  0017EA  2232               	addwfc	___fladd@f2+2,f,c
  5800  0017EC  2233               	addwfc	___fladd@f2+3,f,c
  5801  0017EE  0C00               	retlw	0
  5802  0017F0                     __end_ofPL12:
  5803                           	opt stack 0
  5804                           tblptru	equ	0xFF8
  5805                           tblptrh	equ	0xFF7
  5806                           tblptrl	equ	0xFF6
  5807                           tablat	equ	0xFF5
  5808                           prodl	equ	0xFF3
  5809                           intcon	equ	0xFF2
  5810                           intcon2	equ	0xFF1
  5811                           postinc0	equ	0xFEE
  5812                           wreg	equ	0xFE8
  5813                           postdec1	equ	0xFE5
  5814                           fsr1l	equ	0xFE1
  5815                           indf2	equ	0xFDF
  5816                           postinc2	equ	0xFDE
  5817                           postdec2	equ	0xFDD
  5818                           fsr2h	equ	0xFDA
  5819                           fsr2l	equ	0xFD9
  5820                           status	equ	0xFD8
  5821                           
  5822 ;; *************** function ___awtofl *****************
  5823 ;; Defined at:
  5824 ;;		line 31 in file "/opt/microchip/xc8/v1.34/sources/common/awtofl.c"
  5825 ;; Parameters:    Size  Location     Type
  5826 ;;  c               2   13[COMRAM] int 
  5827 ;; Auto vars:     Size  Location     Type
  5828 ;;  f1              4    0        int 
  5829 ;;  sign            1   17[COMRAM] unsigned char 
  5830 ;; Return value:  Size  Location     Type
  5831 ;;                  4   13[COMRAM] unsigned char 
  5832 ;; Registers used:
  5833 ;;		wreg, status,2, status,0, cstack
  5834 ;; Tracked objects:
  5835 ;;		On entry : 0/0
  5836 ;;		On exit  : 0/0
  5837 ;;		Unchanged: 0/0
  5838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5839 ;;      Params:         4       0       0       0       0       0       0       0       0
  5840 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5841 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5842 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5843 ;;Total ram usage:        5 bytes
  5844 ;; Hardware stack levels used:    1
  5845 ;; Hardware stack levels required when called:    2
  5846 ;; This function calls:
  5847 ;;		___flpack
  5848 ;; This function is called by:
  5849 ;;		_format_double
  5850 ;;		_log
  5851 ;;		_exp
  5852 ;; This function uses a non-reentrant model
  5853 ;;
  5854                           
  5855                           	psect	text27
  5856  002666                     __ptext27:
  5857                           	opt stack 0
  5858  002666                     ___awtofl:
  5859                           	opt stack 24
  5860                           
  5861                           ;incstack = 0
  5862  002666  6A12               	clrf	___awtofl@sign,c
  5863  002668  AE0F               	btfss	___awtofl@c+1,7,c
  5864  00266A  D005               	goto	l3832
  5865  00266C  6C0E               	negf	___awtofl@c,c
  5866  00266E  1E0F               	comf	___awtofl@c+1,f,c
  5867  002670  B0D8               	btfsc	status,0,c
  5868  002672  2A0F               	incf	___awtofl@c+1,f,c
  5869  002674  2A12               	incf	___awtofl@sign,f,c
  5870  002676                     l3832:
  5871  002676  C00E  F004         	movff	___awtofl@c,___flpack@arg
  5872  00267A  C00F  F005         	movff	___awtofl@c+1,___flpack@arg+1
  5873  00267E  6A06               	clrf	___flpack@arg+2,c
  5874  002680  6A07               	clrf	___flpack@arg+3,c
  5875  002682  0E96               	movlw	150
  5876  002684  6E08               	movwf	___flpack@exp,c
  5877  002686  C012  F009         	movff	___awtofl@sign,___flpack@sign
  5878  00268A  EC3A  F00F         	call	___flpack	;wreg free
  5879  00268E  C004  F00E         	movff	?___flpack,?___awtofl
  5880  002692  C005  F00F         	movff	?___flpack+1,?___awtofl+1
  5881  002696  C006  F010         	movff	?___flpack+2,?___awtofl+2
  5882  00269A  C007  F011         	movff	?___flpack+3,?___awtofl+3
  5883  00269E  0012               	return		;funcret
  5884  0026A0                     __end_of___awtofl:
  5885                           	opt stack 0
  5886                           tblptru	equ	0xFF8
  5887                           tblptrh	equ	0xFF7
  5888                           tblptrl	equ	0xFF6
  5889                           tablat	equ	0xFF5
  5890                           prodl	equ	0xFF3
  5891                           intcon	equ	0xFF2
  5892                           intcon2	equ	0xFF1
  5893                           postinc0	equ	0xFEE
  5894                           wreg	equ	0xFE8
  5895                           postdec1	equ	0xFE5
  5896                           fsr1l	equ	0xFE1
  5897                           indf2	equ	0xFDF
  5898                           postinc2	equ	0xFDE
  5899                           postdec2	equ	0xFDD
  5900                           fsr2h	equ	0xFDA
  5901                           fsr2l	equ	0xFD9
  5902                           status	equ	0xFD8
  5903                           
  5904 ;; *************** function _lcd_init *****************
  5905 ;; Defined at:
  5906 ;;		line 506 in file "../../../lib/lcd44780.c"
  5907 ;; Parameters:    Size  Location     Type
  5908 ;;  fourbitmode     1    wreg     unsigned char 
  5909 ;; Auto vars:     Size  Location     Type
  5910 ;;  fourbitmode     1    3[COMRAM] unsigned char 
  5911 ;; Return value:  Size  Location     Type
  5912 ;;		None               void
  5913 ;; Registers used:
  5914 ;;		wreg, status,2, status,0
  5915 ;; Tracked objects:
  5916 ;;		On entry : 0/0
  5917 ;;		On exit  : F/0
  5918 ;;		Unchanged: 0/0
  5919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5920 ;;      Params:         0       0       0       0       0       0       0       0       0
  5921 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5922 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5923 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5924 ;;Total ram usage:        3 bytes
  5925 ;; Hardware stack levels used:    1
  5926 ;; Hardware stack levels required when called:    1
  5927 ;; This function calls:
  5928 ;;		Nothing
  5929 ;; This function is called by:
  5930 ;;		_main
  5931 ;; This function uses a non-reentrant model
  5932 ;;
  5933                           
  5934                           	psect	text28
  5935  002766                     __ptext28:
  5936                           	opt stack 0
  5937  002766                     _lcd_init:
  5938                           	opt stack 29
  5939                           
  5940                           ;incstack = 0
  5941                           ;lcd_init@fourbitmode stored from wreg
  5942  002766  6E04               	movwf	lcd_init@fourbitmode,c
  5943                           
  5944                           ;lcd44780.c: 508: LCD_ctrl = 0;
  5945  002768  0100               	movlb	0	; () banked
  5946  00276A  6BCE               	clrf	_LCD_ctrl& (0+255),b
  5947                           
  5948                           ; BSR set to: 0
  5949                           ;lcd44780.c: 509: LCD_function = (fourbitmode ? 0x00 : 0x10);
  5950  00276C  5004               	movf	lcd_init@fourbitmode,w,c
  5951  00276E  E104               	bnz	l158
  5952                           
  5953                           ; BSR set to: 0
  5954  002770  6A06               	clrf	_lcd_init$134+1,c
  5955  002772  0E10               	movlw	16
  5956  002774  6E05               	movwf	_lcd_init$134,c
  5957  002776  D002               	goto	l160
  5958  002778                     l158:
  5959                           
  5960                           ; BSR set to: 0
  5961  002778  6A05               	clrf	_lcd_init$134,c
  5962  00277A  6A06               	clrf	_lcd_init$134+1,c
  5963  00277C                     l160:
  5964                           
  5965                           ; BSR set to: 0
  5966  00277C  C005  F05A         	movff	_lcd_init$134,_LCD_function
  5967                           
  5968                           ;lcd44780.c: 511: LCD_lines = 0;
  5969  002780  6BCF               	clrf	_LCD_lines& (0+255),b
  5970                           
  5971                           ;lcd44780.c: 513: LCD_mode = 0;
  5972  002782  6BD0               	clrf	_LCD_mode& (0+255),b
  5973                           
  5974                           ; BSR set to: 0
  5975                           ;lcd44780.c: 515: TRISB &= ~0b0100;
  5976  002784  9493               	bcf	3987,2,c	;volatile
  5977                           
  5978                           ;lcd44780.c: 516: LATB &= ~0b0100;
  5979  002786  948A               	bcf	3978,2,c	;volatile
  5980                           
  5981                           ;lcd44780.c: 521: TRISB &= ~0b1000;
  5982  002788  9693               	bcf	3987,3,c	;volatile
  5983                           
  5984                           ;lcd44780.c: 522: LATB &= ~0b1000;
  5985  00278A  968A               	bcf	3978,3,c	;volatile
  5986                           
  5987                           ; BSR set to: 0
  5988                           ;lcd44780.c: 524: LATB &= ~0b11110000;
  5989  00278C  0E0F               	movlw	15
  5990  00278E  168A               	andwf	3978,f,c	;volatile
  5991                           
  5992                           ; BSR set to: 0
  5993  002790  0C0F               	retlw	15	;funcret
  5994  002792                     __end_of_lcd_init:
  5995                           	opt stack 0
  5996                           tblptru	equ	0xFF8
  5997                           tblptrh	equ	0xFF7
  5998                           tblptrl	equ	0xFF6
  5999                           tablat	equ	0xFF5
  6000                           prodl	equ	0xFF3
  6001                           intcon	equ	0xFF2
  6002                           intcon2	equ	0xFF1
  6003                           postinc0	equ	0xFEE
  6004                           wreg	equ	0xFE8
  6005                           postdec1	equ	0xFE5
  6006                           fsr1l	equ	0xFE1
  6007                           indf2	equ	0xFDF
  6008                           postinc2	equ	0xFDE
  6009                           postdec2	equ	0xFDD
  6010                           fsr2h	equ	0xFDA
  6011                           fsr2l	equ	0xFD9
  6012                           status	equ	0xFD8
  6013                           
  6014 ;; *************** function _lcd_begin *****************
  6015 ;; Defined at:
  6016 ;;		line 433 in file "../../../lib/lcd44780.c"
  6017 ;; Parameters:    Size  Location     Type
  6018 ;;  lines           1    wreg     unsigned char 
  6019 ;;  dotsize         1    7[COMRAM] unsigned char 
  6020 ;; Auto vars:     Size  Location     Type
  6021 ;;  lines           1    9[COMRAM] unsigned char 
  6022 ;; Return value:  Size  Location     Type
  6023 ;;		None               void
  6024 ;; Registers used:
  6025 ;;		wreg, status,2, status,0, cstack
  6026 ;; Tracked objects:
  6027 ;;		On entry : F/0
  6028 ;;		On exit  : 0/0
  6029 ;;		Unchanged: 0/0
  6030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6031 ;;      Params:         1       0       0       0       0       0       0       0       0
  6032 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6033 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6034 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6035 ;;Total ram usage:        3 bytes
  6036 ;; Hardware stack levels used:    1
  6037 ;; Hardware stack levels required when called:    4
  6038 ;; This function calls:
  6039 ;;		_lcd_command
  6040 ;;		_lcd_write4bits
  6041 ;; This function is called by:
  6042 ;;		_main
  6043 ;; This function uses a non-reentrant model
  6044 ;;
  6045                           
  6046                           	psect	text29
  6047  001CDC                     __ptext29:
  6048                           	opt stack 0
  6049  001CDC                     _lcd_begin:
  6050                           	opt stack 26
  6051                           
  6052                           ; BSR set to: 0
  6053                           ;incstack = 0
  6054                           ;lcd_begin@lines stored from wreg
  6055  001CDC  6E0A               	movwf	lcd_begin@lines,c
  6056                           
  6057                           ; BSR set to: 0
  6058                           ;lcd44780.c: 434: if(lines > 1)
  6059  001CDE  0E01               	movlw	1
  6060  001CE0  640A               	cpfsgt	lcd_begin@lines,c
  6061  001CE2  D001               	goto	l3140
  6062                           
  6063                           ; BSR set to: 0
  6064                           ;lcd44780.c: 435: LCD_function |= 0x08;
  6065  001CE4  865A               	bsf	_LCD_function,3,c
  6066  001CE6                     l3140:
  6067                           
  6068                           ; BSR set to: 0
  6069                           ;lcd44780.c: 438: LCD_lines = lines;
  6070  001CE6  C00A  F0CF         	movff	lcd_begin@lines,_LCD_lines
  6071                           
  6072                           ; BSR set to: 0
  6073                           ;lcd44780.c: 442: if((dotsize != 0) && (lines == 1))
  6074  001CEA  5008               	movf	lcd_begin@dotsize,w,c
  6075  001CEC  E003               	bz	l3148
  6076                           
  6077                           ; BSR set to: 0
  6078  001CEE  040A               	decf	lcd_begin@lines,w,c
  6079  001CF0  B4D8               	btfsc	status,2,c
  6080                           
  6081                           ; BSR set to: 0
  6082                           ;lcd44780.c: 443: LCD_function |= 0x04;
  6083  001CF2  845A               	bsf	_LCD_function,2,c
  6084  001CF4                     l3148:
  6085                           
  6086                           ; BSR set to: 0
  6087                           ;lcd44780.c: 445: _delay((unsigned long)((15)*(20000000/4000.0)));
  6088  001CF4  0E62               	movlw	98
  6089  001CF6  6E09               	movwf	??_lcd_begin& (0+255),c
  6090  001CF8  0E66               	movlw	102
  6091  001CFA                     u3397:
  6092  001CFA  2EE8               	decfsz	wreg,f,c
  6093  001CFC  D7FE               	goto	u3397
  6094  001CFE  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6095  001D00  D7FC               	goto	u3397
  6096                           
  6097                           ;lcd44780.c: 448: LATB &= ~0b0100;
  6098  001D02  948A               	bcf	3978,2,c	;volatile
  6099                           
  6100                           ;lcd44780.c: 449: LATB &= ~0b1000;
  6101  001D04  968A               	bcf	3978,3,c	;volatile
  6102                           
  6103                           ;lcd44780.c: 452: if(!(LCD_function & 0x10)) {
  6104  001D06  B85A               	btfsc	_LCD_function,4,c
  6105  001D08  D01B               	goto	l3166
  6106                           
  6107                           ;lcd44780.c: 456: lcd_write4bits(0x03);
  6108  001D0A  0E03               	movlw	3
  6109  001D0C  EC43  F014         	call	_lcd_write4bits
  6110                           
  6111                           ;lcd44780.c: 457: _delay((unsigned long)((5)*(20000000/4000.0)));
  6112  001D10  0E21               	movlw	33
  6113  001D12  6E09               	movwf	??_lcd_begin& (0+255),c
  6114  001D14  0E76               	movlw	118
  6115  001D16                     u3407:
  6116  001D16  2EE8               	decfsz	wreg,f,c
  6117  001D18  D7FE               	goto	u3407
  6118  001D1A  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6119  001D1C  D7FC               	goto	u3407
  6120  001D1E  D000               	nop2	
  6121                           
  6122                           ;lcd44780.c: 459: lcd_write4bits(0x03);
  6123  001D20  0E03               	movlw	3
  6124  001D22  EC43  F014         	call	_lcd_write4bits
  6125                           
  6126                           ;lcd44780.c: 460: _delay((unsigned long)((150)*(20000000/4000000.0)));
  6127  001D26  0EFA               	movlw	250
  6128  001D28                     u3417:
  6129  001D28  2EE8               	decfsz	wreg,f,c
  6130  001D2A  D7FE               	goto	u3417
  6131                           
  6132                           ;lcd44780.c: 462: lcd_write4bits(0x03);
  6133  001D2C  0E03               	movlw	3
  6134  001D2E  EC43  F014         	call	_lcd_write4bits
  6135                           
  6136                           ;lcd44780.c: 463: _delay((unsigned long)((150)*(20000000/4000000.0)));
  6137  001D32  0EFA               	movlw	250
  6138  001D34                     u3427:
  6139  001D34  2EE8               	decfsz	wreg,f,c
  6140  001D36  D7FE               	goto	u3427
  6141                           
  6142                           ;lcd44780.c: 465: lcd_write4bits(0x02);
  6143  001D38  0E02               	movlw	2
  6144  001D3A  EC43  F014         	call	_lcd_write4bits
  6145                           
  6146                           ;lcd44780.c: 466: }
  6147  001D3E  D01C               	goto	l3174
  6148  001D40                     l3166:
  6149                           
  6150                           ;lcd44780.c: 468: else {
  6151                           ;lcd44780.c: 472: lcd_command(0x20 | LCD_function);
  6152  001D40  505A               	movf	_LCD_function,w,c
  6153  001D42  0920               	iorlw	32
  6154  001D44  ECA2  F014         	call	_lcd_command
  6155                           
  6156                           ;lcd44780.c: 473: _delay((unsigned long)((5)*(20000000/4000.0)));
  6157  001D48  0E21               	movlw	33
  6158  001D4A  6E09               	movwf	??_lcd_begin& (0+255),c
  6159  001D4C  0E76               	movlw	118
  6160  001D4E                     u3437:
  6161  001D4E  2EE8               	decfsz	wreg,f,c
  6162  001D50  D7FE               	goto	u3437
  6163  001D52  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6164  001D54  D7FC               	goto	u3437
  6165  001D56  D000               	nop2	
  6166                           
  6167                           ;lcd44780.c: 476: lcd_command(0x20 | LCD_function);
  6168  001D58  505A               	movf	_LCD_function,w,c
  6169  001D5A  0920               	iorlw	32
  6170  001D5C  ECA2  F014         	call	_lcd_command
  6171                           
  6172                           ;lcd44780.c: 477: _delay((unsigned long)((5)*(20000000/4000.0)));
  6173  001D60  0E21               	movlw	33
  6174  001D62  6E09               	movwf	??_lcd_begin& (0+255),c
  6175  001D64  0E76               	movlw	118
  6176  001D66                     u3447:
  6177  001D66  2EE8               	decfsz	wreg,f,c
  6178  001D68  D7FE               	goto	u3447
  6179  001D6A  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6180  001D6C  D7FC               	goto	u3447
  6181  001D6E  D000               	nop2	
  6182                           
  6183                           ;lcd44780.c: 481: lcd_command(0x20 | LCD_function);
  6184  001D70  505A               	movf	_LCD_function,w,c
  6185  001D72  0920               	iorlw	32
  6186  001D74  ECA2  F014         	call	_lcd_command
  6187  001D78                     l3174:
  6188                           
  6189                           ;lcd44780.c: 482: }
  6190                           ;lcd44780.c: 485: lcd_command(0x20 | LCD_function);
  6191  001D78  505A               	movf	_LCD_function,w,c
  6192  001D7A  0920               	iorlw	32
  6193  001D7C  ECA2  F014         	call	_lcd_command
  6194                           
  6195                           ;lcd44780.c: 488: LCD_ctrl = 0x04 | 0x00 | 0x00;
  6196  001D80  0E04               	movlw	4
  6197  001D82  0100               	movlb	0	; () banked
  6198  001D84  6FCE               	movwf	_LCD_ctrl& (0+255),b
  6199                           
  6200                           ; BSR set to: 0
  6201                           ;lcd44780.c: 489: lcd_command(0x08 | LCD_ctrl);
  6202  001D86  51CE               	movf	_LCD_ctrl& (0+255),w,b
  6203  001D88  0908               	iorlw	8
  6204  001D8A  ECA2  F014         	call	_lcd_command
  6205                           
  6206                           ;lcd44780.c: 492: lcd_command(0x01);
  6207  001D8E  0E01               	movlw	1
  6208  001D90  ECA2  F014         	call	_lcd_command
  6209                           
  6210                           ;lcd44780.c: 493: _delay((unsigned long)((2)*(20000000/4000.0)));
  6211  001D94  0E0D               	movlw	13
  6212  001D96  6E09               	movwf	??_lcd_begin& (0+255),c
  6213  001D98  0EFC               	movlw	252
  6214  001D9A                     u3457:
  6215  001D9A  2EE8               	decfsz	wreg,f,c
  6216  001D9C  D7FE               	goto	u3457
  6217  001D9E  2E09               	decfsz	??_lcd_begin& (0+255),f,c
  6218  001DA0  D7FC               	goto	u3457
  6219                           
  6220                           ;lcd44780.c: 496: LCD_mode = 0x02 | 0x00;
  6221  001DA2  0E02               	movlw	2
  6222  001DA4  0100               	movlb	0	; () banked
  6223  001DA6  6FD0               	movwf	_LCD_mode& (0+255),b
  6224                           
  6225                           ; BSR set to: 0
  6226                           ;lcd44780.c: 498: lcd_command(0x04 | LCD_mode);
  6227  001DA8  51D0               	movf	_LCD_mode& (0+255),w,b
  6228  001DAA  0904               	iorlw	4
  6229  001DAC  EFA2  F014         	goto	_lcd_command
  6230  001DB0                     __end_of_lcd_begin:
  6231                           	opt stack 0
  6232                           tblptru	equ	0xFF8
  6233                           tblptrh	equ	0xFF7
  6234                           tblptrl	equ	0xFF6
  6235                           tablat	equ	0xFF5
  6236                           prodl	equ	0xFF3
  6237                           intcon	equ	0xFF2
  6238                           intcon2	equ	0xFF1
  6239                           postinc0	equ	0xFEE
  6240                           wreg	equ	0xFE8
  6241                           postdec1	equ	0xFE5
  6242                           fsr1l	equ	0xFE1
  6243                           indf2	equ	0xFDF
  6244                           postinc2	equ	0xFDE
  6245                           postdec2	equ	0xFDD
  6246                           fsr2h	equ	0xFDA
  6247                           fsr2l	equ	0xFD9
  6248                           status	equ	0xFD8
  6249                           
  6250 ;; *************** function _indicator *****************
  6251 ;; Defined at:
  6252 ;;		line 473 in file "../../../src/print.c"
  6253 ;; Parameters:    Size  Location     Type
  6254 ;;  indicate        1    wreg     unsigned char 
  6255 ;; Auto vars:     Size  Location     Type
  6256 ;;  indicate        1   13[COMRAM] unsigned char 
  6257 ;; Return value:  Size  Location     Type
  6258 ;;		None               void
  6259 ;; Registers used:
  6260 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6261 ;; Tracked objects:
  6262 ;;		On entry : 0/0
  6263 ;;		On exit  : 0/0
  6264 ;;		Unchanged: 0/0
  6265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6266 ;;      Params:         0       0       0       0       0       0       0       0       0
  6267 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6268 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6269 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6270 ;;Total ram usage:        1 bytes
  6271 ;; Hardware stack levels used:    1
  6272 ;; Hardware stack levels required when called:    5
  6273 ;; This function calls:
  6274 ;;		_lcd_gotoxy
  6275 ;;		_lcd_puts
  6276 ;; This function is called by:
  6277 ;;		_main
  6278 ;; This function uses a non-reentrant model
  6279 ;;
  6280                           
  6281                           	psect	text30
  6282  0028E6                     __ptext30:
  6283                           	opt stack 0
  6284  0028E6                     _indicator:
  6285                           	opt stack 25
  6286                           
  6287                           ;incstack = 0
  6288                           ;indicator@indicate stored from wreg
  6289  0028E6  6E0E               	movwf	indicator@indicate,c
  6290                           
  6291                           ;print.c: 487: lcd_gotoxy(0, 1);
  6292  0028E8  0E01               	movlw	1
  6293  0028EA  6E08               	movwf	lcd_gotoxy@row,c
  6294  0028EC  0E00               	movlw	0
  6295  0028EE  EC50  F013         	call	_lcd_gotoxy
  6296                           
  6297                           ;print.c: 488: if(indicate) {
  6298  0028F2  500E               	movf	indicator@indicate,w,c
  6299  0028F4  E003               	bz	l3448
  6300                           
  6301                           ;print.c: 489: lcd_puts("-*-");
  6302  0028F6  0EC5               	movlw	STR_26& (0+255)
  6303  0028F8  EFC9  F013         	goto	_lcd_puts
  6304  0028FC                     l3448:
  6305                           
  6306                           ;print.c: 491: lcd_puts("   ");
  6307  0028FC  0E94               	movlw	(STR_30+3)& (0+255)
  6308  0028FE  EFC9  F013         	goto	_lcd_puts
  6309  002902                     __end_of_indicator:
  6310                           	opt stack 0
  6311                           tblptru	equ	0xFF8
  6312                           tblptrh	equ	0xFF7
  6313                           tblptrl	equ	0xFF6
  6314                           tablat	equ	0xFF5
  6315                           prodl	equ	0xFF3
  6316                           intcon	equ	0xFF2
  6317                           intcon2	equ	0xFF1
  6318                           postinc0	equ	0xFEE
  6319                           wreg	equ	0xFE8
  6320                           postdec1	equ	0xFE5
  6321                           fsr1l	equ	0xFE1
  6322                           indf2	equ	0xFDF
  6323                           postinc2	equ	0xFDE
  6324                           postdec2	equ	0xFDD
  6325                           fsr2h	equ	0xFDA
  6326                           fsr2l	equ	0xFD9
  6327                           status	equ	0xFD8
  6328                           
  6329 ;; *************** function _lcd_puts *****************
  6330 ;; Defined at:
  6331 ;;		line 185 in file "../../../lib/lcd44780.c"
  6332 ;; Parameters:    Size  Location     Type
  6333 ;;  string          1    wreg     PTR const unsigned char 
  6334 ;;		 -> STR_33(5), STR_32(6), STR_31(7), STR_30(7), 
  6335 ;;		 -> STR_28(10), STR_27(4), STR_26(4), STR_25(6), 
  6336 ;; Auto vars:     Size  Location     Type
  6337 ;;  string          1    8[COMRAM] PTR const unsigned char 
  6338 ;;		 -> STR_33(5), STR_32(6), STR_31(7), STR_30(7), 
  6339 ;;		 -> STR_28(10), STR_27(4), STR_26(4), STR_25(6), 
  6340 ;;  i               1    7[COMRAM] unsigned char 
  6341 ;; Return value:  Size  Location     Type
  6342 ;;		None               void
  6343 ;; Registers used:
  6344 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6345 ;; Tracked objects:
  6346 ;;		On entry : 0/0
  6347 ;;		On exit  : 0/0
  6348 ;;		Unchanged: 0/0
  6349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6350 ;;      Params:         0       0       0       0       0       0       0       0       0
  6351 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6352 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6353 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6354 ;;Total ram usage:        3 bytes
  6355 ;; Hardware stack levels used:    1
  6356 ;; Hardware stack levels required when called:    3
  6357 ;; This function calls:
  6358 ;;		_lcd_send
  6359 ;; This function is called by:
  6360 ;;		_print_reading
  6361 ;;		_indicator
  6362 ;;		_main
  6363 ;; This function uses a non-reentrant model
  6364 ;;
  6365                           
  6366                           	psect	text31
  6367  002792                     __ptext31:
  6368                           	opt stack 0
  6369  002792                     _lcd_puts:
  6370                           	opt stack 25
  6371                           
  6372                           ;incstack = 0
  6373                           ;lcd_puts@string stored from wreg
  6374  002792  6E09               	movwf	lcd_puts@string,c
  6375                           
  6376                           ;lcd44780.c: 186: uint8_t i;
  6377                           ;lcd44780.c: 187: for(i = 0; string[i]; i++) lcd_send((string[i]), 1);
  6378  002794  6A08               	clrf	lcd_puts@i,c
  6379  002796  D006               	goto	l3000
  6380  002798                     l2996:
  6381  002798  0E01               	movlw	1
  6382  00279A  6E05               	movwf	lcd_send@mode,c
  6383  00279C  D807               	call	PL32	;call to abstracted procedure
  6384  00279E  EC81  F014         	call	_lcd_send
  6385  0027A2  2A08               	incf	lcd_puts@i,f,c
  6386  0027A4                     l3000:
  6387  0027A4  D803               	call	PL32	;call to abstracted procedure
  6388  0027A6  B4D8               	btfsc	status,2,c
  6389  0027A8  0012               	return		;funcret
  6390  0027AA  D7F6               	goto	l2996
  6391  0027AC                     __end_of_lcd_puts:
  6392                           	opt stack 0
  6393  0027AC                     PL32:
  6394                           	opt stack 25
  6395  0027AC  5009               	movf	lcd_puts@string,w,c
  6396  0027AE  2408               	addwf	lcd_puts@i,w,c
  6397  0027B0  6E07               	movwf	??_lcd_puts& (0+255),c
  6398  0027B2  C007  FFF6         	movff	??_lcd_puts,tblptrl
  6399  0027B6                     	if	0	;There is only one active tblptr byte
  6400  0027B6                     	endif
  6401  0027B6                     	if	0	;tblptru may be non-zero
  6402  0027B6                     	endif
  6403  0027B6                     	if	0	;tblptru may be non-zero
  6404  0027B6                     	endif
  6405  0027B6  0008               	tblrd		*
  6406  0027B8  50F5               	movf	tablat,w,c
  6407  0027BA  0012               	return	
  6408  0027BC                     __end_ofPL32:
  6409                           	opt stack 0
  6410                           tblptru	equ	0xFF8
  6411                           tblptrh	equ	0xFF7
  6412                           tblptrl	equ	0xFF6
  6413                           tablat	equ	0xFF5
  6414                           prodl	equ	0xFF3
  6415                           intcon	equ	0xFF2
  6416                           intcon2	equ	0xFF1
  6417                           postinc0	equ	0xFEE
  6418                           wreg	equ	0xFE8
  6419                           postdec1	equ	0xFE5
  6420                           fsr1l	equ	0xFE1
  6421                           indf2	equ	0xFDF
  6422                           postinc2	equ	0xFDE
  6423                           postdec2	equ	0xFDD
  6424                           fsr2h	equ	0xFDA
  6425                           fsr2l	equ	0xFD9
  6426                           status	equ	0xFD8
  6427                           
  6428 ;; *************** function _calibrate *****************
  6429 ;; Defined at:
  6430 ;;		line 24 in file "../../../src/measure.c"
  6431 ;; Parameters:    Size  Location     Type
  6432 ;;		None
  6433 ;; Auto vars:     Size  Location     Type
  6434 ;;  i               1   62[COMRAM] unsigned char 
  6435 ;; Return value:  Size  Location     Type
  6436 ;;		None               void
  6437 ;; Registers used:
  6438 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6439 ;; Tracked objects:
  6440 ;;		On entry : 0/0
  6441 ;;		On exit  : 0/0
  6442 ;;		Unchanged: 0/0
  6443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6444 ;;      Params:         0       0       0       0       0       0       0       0       0
  6445 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6446 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6447 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6448 ;;Total ram usage:        1 bytes
  6449 ;; Hardware stack levels used:    1
  6450 ;; Hardware stack levels required when called:    6
  6451 ;; This function calls:
  6452 ;;		___lwtofl
  6453 ;;		_delay10ms
  6454 ;;		_lcd_clear
  6455 ;;		_lcd_gotoxy
  6456 ;;		_lcd_send
  6457 ;;		_measure_freq
  6458 ;;		_put_str
  6459 ;;		_ser_puts
  6460 ;; This function is called by:
  6461 ;;		_main
  6462 ;; This function uses a non-reentrant model
  6463 ;;
  6464                           
  6465                           	psect	text32
  6466  001BFA                     __ptext32:
  6467                           	opt stack 0
  6468  001BFA                     _calibrate:
  6469                           	opt stack 24
  6470                           
  6471                           ;measure.c: 25: uint8_t i;
  6472                           ;measure.c: 28: lcd_clear();
  6473                           
  6474                           ;incstack = 0
  6475  001BFA  EC8E  F014         	call	_lcd_clear	;wreg free
  6476                           
  6477                           ;measure.c: 30: lcd_gotoxy(0, 0);
  6478  001BFE  0E00               	movlw	0
  6479  001C00  6A08               	clrf	lcd_gotoxy@row,c
  6480  001C02  EC50  F013         	call	_lcd_gotoxy
  6481                           
  6482                           ;measure.c: 31: put_str("Calibrating");
  6483  001C06  0E69               	movlw	STR_1& (0+255)
  6484  001C08  ECDE  F013         	call	_put_str
  6485                           
  6486                           ;measure.c: 33: lcd_gotoxy(0, 1);
  6487  001C0C  0E01               	movlw	1
  6488  001C0E  6E08               	movwf	lcd_gotoxy@row,c
  6489  001C10  0E00               	movlw	0
  6490  001C12  EC50  F013         	call	_lcd_gotoxy
  6491                           
  6492                           ;measure.c: 34: ser_puts("\r\n");
  6493  001C16  0E9B               	movlw	(STR_29+3)& (0+255)
  6494  001C18  EC64  F014         	call	_ser_puts
  6495                           
  6496                           ;measure.c: 35: put_str("please wait...");
  6497  001C1C  0E4D               	movlw	STR_3& (0+255)
  6498  001C1E  ECDE  F013         	call	_put_str
  6499                           
  6500                           ;measure.c: 38: LATC &= ~(1 << 5);
  6501  001C22  9A8B               	bcf	3979,5,c	;volatile
  6502                           
  6503                           ;measure.c: 40: F1 = (double)measure_freq();
  6504  001C24  EC8C  F00C         	call	_measure_freq	;wreg free
  6505  001C28  C036  F03B         	movff	?_measure_freq,___lwtofl@c
  6506  001C2C  C037  F03C         	movff	?_measure_freq+1,___lwtofl@c+1
  6507  001C30  ECF3  F013         	call	___lwtofl	;wreg free
  6508  001C34  C03B  F0E5         	movff	?___lwtofl,_F1
  6509  001C38  C03C  F0E6         	movff	?___lwtofl+1,_F1+1
  6510  001C3C  C03D  F0E7         	movff	?___lwtofl+2,_F1+2
  6511  001C40  C03E  F0E8         	movff	?___lwtofl+3,_F1+3
  6512                           
  6513                           ;measure.c: 41: delay10ms(50);
  6514  001C44  0E32               	movlw	50
  6515  001C46  ECAA  F014         	call	_delay10ms
  6516                           
  6517                           ;measure.c: 43: F1 = (double)measure_freq();
  6518  001C4A  EC8C  F00C         	call	_measure_freq	;wreg free
  6519  001C4E  C036  F03B         	movff	?_measure_freq,___lwtofl@c
  6520  001C52  C037  F03C         	movff	?_measure_freq+1,___lwtofl@c+1
  6521  001C56  ECF3  F013         	call	___lwtofl	;wreg free
  6522  001C5A  C03B  F0E5         	movff	?___lwtofl,_F1
  6523  001C5E  C03C  F0E6         	movff	?___lwtofl+1,_F1+1
  6524  001C62  C03D  F0E7         	movff	?___lwtofl+2,_F1+2
  6525  001C66  C03E  F0E8         	movff	?___lwtofl+3,_F1+3
  6526                           
  6527                           ;measure.c: 44: LATC |= (1 << 5);
  6528  001C6A  8A8B               	bsf	3979,5,c	;volatile
  6529                           
  6530                           ;measure.c: 46: F2 = (double)measure_freq();
  6531  001C6C  EC8C  F00C         	call	_measure_freq	;wreg free
  6532  001C70  C036  F03B         	movff	?_measure_freq,___lwtofl@c
  6533  001C74  C037  F03C         	movff	?_measure_freq+1,___lwtofl@c+1
  6534  001C78  ECF3  F013         	call	___lwtofl	;wreg free
  6535  001C7C  C03B  F0B8         	movff	?___lwtofl,_F2
  6536  001C80  C03C  F0B9         	movff	?___lwtofl+1,_F2+1
  6537  001C84  C03D  F0BA         	movff	?___lwtofl+2,_F2+2
  6538  001C88  C03E  F0BB         	movff	?___lwtofl+3,_F2+3
  6539                           
  6540                           ;measure.c: 47: delay10ms(50);
  6541  001C8C  0E32               	movlw	50
  6542  001C8E  ECAA  F014         	call	_delay10ms
  6543                           
  6544                           ;measure.c: 49: F2 = (double)measure_freq();
  6545  001C92  EC8C  F00C         	call	_measure_freq	;wreg free
  6546  001C96  C036  F03B         	movff	?_measure_freq,___lwtofl@c
  6547  001C9A  C037  F03C         	movff	?_measure_freq+1,___lwtofl@c+1
  6548  001C9E  ECF3  F013         	call	___lwtofl	;wreg free
  6549  001CA2  C03B  F0B8         	movff	?___lwtofl,_F2
  6550  001CA6  C03C  F0B9         	movff	?___lwtofl+1,_F2+1
  6551  001CAA  C03D  F0BA         	movff	?___lwtofl+2,_F2+2
  6552  001CAE  C03E  F0BB         	movff	?___lwtofl+3,_F2+3
  6553                           
  6554                           ;measure.c: 50: LATC &= ~(1 << 5);
  6555  001CB2  9A8B               	bcf	3979,5,c	;volatile
  6556                           
  6557                           ;measure.c: 54: lcd_gotoxy(11, 0);
  6558  001CB4  6A08               	clrf	lcd_gotoxy@row,c
  6559  001CB6  0E0B               	movlw	11
  6560  001CB8  EC50  F013         	call	_lcd_gotoxy
  6561                           
  6562                           ;measure.c: 56: for(i = 0; i < 6; i++) {
  6563  001CBC  6A3F               	clrf	calibrate@i,c
  6564  001CBE                     l4006:
  6565                           
  6566                           ;measure.c: 57: lcd_send(('='), 1);
  6567  001CBE  0E01               	movlw	1
  6568  001CC0  6E05               	movwf	lcd_send@mode,c
  6569  001CC2  0E3D               	movlw	61
  6570  001CC4  EC81  F014         	call	_lcd_send
  6571                           
  6572                           ;measure.c: 59: delay10ms(28);
  6573  001CC8  0E1C               	movlw	28
  6574  001CCA  ECAA  F014         	call	_delay10ms
  6575  001CCE  2A3F               	incf	calibrate@i,f,c
  6576  001CD0  0E05               	movlw	5
  6577  001CD2  643F               	cpfsgt	calibrate@i,c
  6578  001CD4  D7F4               	goto	l4006
  6579                           
  6580                           ;measure.c: 60: }
  6581                           ;measure.c: 62: ser_puts("\r\n");
  6582  001CD6  0E9B               	movlw	(STR_29+3)& (0+255)
  6583  001CD8  EF64  F014         	goto	_ser_puts
  6584  001CDC                     __end_of_calibrate:
  6585                           	opt stack 0
  6586                           tblptru	equ	0xFF8
  6587                           tblptrh	equ	0xFF7
  6588                           tblptrl	equ	0xFF6
  6589                           tablat	equ	0xFF5
  6590                           prodl	equ	0xFF3
  6591                           intcon	equ	0xFF2
  6592                           intcon2	equ	0xFF1
  6593                           postinc0	equ	0xFEE
  6594                           wreg	equ	0xFE8
  6595                           postdec1	equ	0xFE5
  6596                           fsr1l	equ	0xFE1
  6597                           indf2	equ	0xFDF
  6598                           postinc2	equ	0xFDE
  6599                           postdec2	equ	0xFDD
  6600                           fsr2h	equ	0xFDA
  6601                           fsr2l	equ	0xFD9
  6602                           status	equ	0xFD8
  6603                           
  6604 ;; *************** function _ser_puts *****************
  6605 ;; Defined at:
  6606 ;;		line 97 in file "../../../lib/ser.c"
  6607 ;; Parameters:    Size  Location     Type
  6608 ;;  s               1    wreg     PTR const unsigned char 
  6609 ;;		 -> STR_34(3), STR_29(6), STR_24(3), STR_14(3), 
  6610 ;;		 -> STR_13(5), STR_12(3), STR_11(8), STR_10(6), 
  6611 ;;		 -> STR_9(6), STR_8(6), STR_7(5), STR_4(3), 
  6612 ;;		 -> STR_2(3), 
  6613 ;; Auto vars:     Size  Location     Type
  6614 ;;  s               1    4[COMRAM] PTR const unsigned char 
  6615 ;;		 -> STR_34(3), STR_29(6), STR_24(3), STR_14(3), 
  6616 ;;		 -> STR_13(5), STR_12(3), STR_11(8), STR_10(6), 
  6617 ;;		 -> STR_9(6), STR_8(6), STR_7(5), STR_4(3), 
  6618 ;;		 -> STR_2(3), 
  6619 ;; Return value:  Size  Location     Type
  6620 ;;		None               void
  6621 ;; Registers used:
  6622 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6623 ;; Tracked objects:
  6624 ;;		On entry : 0/0
  6625 ;;		On exit  : 0/0
  6626 ;;		Unchanged: 0/0
  6627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6628 ;;      Params:         0       0       0       0       0       0       0       0       0
  6629 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6630 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6631 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6632 ;;Total ram usage:        1 bytes
  6633 ;; Hardware stack levels used:    1
  6634 ;; Hardware stack levels required when called:    2
  6635 ;; This function calls:
  6636 ;;		_ser_putch
  6637 ;; This function is called by:
  6638 ;;		_calibrate
  6639 ;;		_measure_capacitance
  6640 ;;		_print_unit
  6641 ;;		_main
  6642 ;; This function uses a non-reentrant model
  6643 ;;
  6644                           
  6645                           	psect	text33
  6646  0028C8                     __ptext33:
  6647                           	opt stack 0
  6648  0028C8                     _ser_puts:
  6649                           	opt stack 28
  6650                           
  6651                           ;incstack = 0
  6652                           ;ser_puts@s stored from wreg
  6653  0028C8  6E05               	movwf	ser_puts@s,c
  6654                           
  6655                           ;ser.c: 98: while(*s) ser_putch(*s++);
  6656  0028CA  D004               	goto	l3030
  6657  0028CC                     l3026:
  6658  0028CC  D807               	call	PL40	;call to abstracted procedure
  6659  0028CE  EC1C  F014         	call	_ser_putch
  6660  0028D2  2A05               	incf	ser_puts@s,f,c
  6661  0028D4                     l3030:
  6662  0028D4  D803               	call	PL40	;call to abstracted procedure
  6663  0028D6  B4D8               	btfsc	status,2,c
  6664  0028D8  0012               	return		;funcret
  6665  0028DA  D7F8               	goto	l3026
  6666  0028DC                     __end_of_ser_puts:
  6667                           	opt stack 0
  6668  0028DC                     PL40:
  6669                           	opt stack 28
  6670  0028DC  C005  FFF6         	movff	ser_puts@s,tblptrl
  6671  0028E0                     	if	0	;There is only one active tblptr byte
  6672  0028E0                     	endif
  6673  0028E0                     	if	0	;tblptru may be non-zero
  6674  0028E0                     	endif
  6675  0028E0                     	if	0	;tblptru may be non-zero
  6676  0028E0                     	endif
  6677  0028E0  0008               	tblrd		*
  6678  0028E2  50F5               	movf	tablat,w,c
  6679  0028E4  0012               	return	
  6680  0028E6                     __end_ofPL40:
  6681                           	opt stack 0
  6682                           tblptru	equ	0xFF8
  6683                           tblptrh	equ	0xFF7
  6684                           tblptrl	equ	0xFF6
  6685                           tablat	equ	0xFF5
  6686                           prodl	equ	0xFF3
  6687                           intcon	equ	0xFF2
  6688                           intcon2	equ	0xFF1
  6689                           postinc0	equ	0xFEE
  6690                           wreg	equ	0xFE8
  6691                           postdec1	equ	0xFE5
  6692                           fsr1l	equ	0xFE1
  6693                           indf2	equ	0xFDF
  6694                           postinc2	equ	0xFDE
  6695                           postdec2	equ	0xFDD
  6696                           fsr2h	equ	0xFDA
  6697                           fsr2l	equ	0xFD9
  6698                           status	equ	0xFD8
  6699                           
  6700 ;; *************** function _measure_freq *****************
  6701 ;; Defined at:
  6702 ;;		line 69 in file "../../../src/measure.c"
  6703 ;; Parameters:    Size  Location     Type
  6704 ;;		None
  6705 ;; Auto vars:     Size  Location     Type
  6706 ;;  count           2   56[COMRAM] unsigned int 
  6707 ;; Return value:  Size  Location     Type
  6708 ;;                  2   53[COMRAM] unsigned short 
  6709 ;; Registers used:
  6710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6711 ;; Tracked objects:
  6712 ;;		On entry : 0/0
  6713 ;;		On exit  : 0/0
  6714 ;;		Unchanged: 0/0
  6715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6716 ;;      Params:         2       0       0       0       0       0       0       0       0
  6717 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6718 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6719 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6720 ;;Total ram usage:        5 bytes
  6721 ;; Hardware stack levels used:    1
  6722 ;; Hardware stack levels required when called:    5
  6723 ;; This function calls:
  6724 ;;		_format_number
  6725 ;;		_lcd_gotoxy
  6726 ;;		_put_str
  6727 ;;		_timer0_read_ps
  6728 ;; This function is called by:
  6729 ;;		_calibrate
  6730 ;;		_measure_capacitance
  6731 ;;		_measure_inductance
  6732 ;; This function uses a non-reentrant model
  6733 ;;
  6734                           
  6735                           	psect	text34
  6736  001918                     __ptext34:
  6737                           	opt stack 0
  6738  001918                     _measure_freq:
  6739                           	opt stack 24
  6740                           
  6741                           ;measure.c: 70: uint16_t count;
  6742                           ;measure.c: 72: INTCON &= ~0b100;
  6743                           
  6744                           ;incstack = 0
  6745  001918  94F2               	bcf	intcon,2,c	;volatile
  6746                           
  6747                           ;measure.c: 76: TRISA &= ~0b00010000;
  6748  00191A  9892               	bcf	3986,4,c	;volatile
  6749                           
  6750                           ;measure.c: 78: _delay((unsigned long)((20)*(20000000/4000.0)));
  6751  00191C  0E82               	movlw	130
  6752  00191E  6E38               	movwf	??_measure_freq& (0+255),c
  6753  001920  0EDE               	movlw	222
  6754  001922                     u3467:
  6755  001922  2EE8               	decfsz	wreg,f,c
  6756  001924  D7FE               	goto	u3467
  6757  001926  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6758  001928  D7FC               	goto	u3467
  6759                           
  6760                           ;measure.c: 81: TMR0 = 0x00;
  6761  00192A  6AD6               	clrf	4054,c	;volatile
  6762  00192C  6AD7               	clrf	4055,c	;volatile
  6763                           
  6764                           ;measure.c: 83: LATC &= ~0b00000100; LATC |= (!!(1)) << 2;;
  6765  00192E  948B               	bcf	3979,2,c	;volatile
  6766  001930  848B               	bsf	3979,2,c	;volatile
  6767                           
  6768                           ;measure.c: 86: _delay((unsigned long)((10)*(20000000/4000.0)));
  6769  001932  0E41               	movlw	65
  6770  001934  6E38               	movwf	??_measure_freq& (0+255),c
  6771  001936  0EEE               	movlw	238
  6772  001938                     u3477:
  6773  001938  2EE8               	decfsz	wreg,f,c
  6774  00193A  D7FE               	goto	u3477
  6775  00193C  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6776  00193E  D7FC               	goto	u3477
  6777  001940  D000               	nop2	
  6778                           
  6779                           ;measure.c: 87: _delay((unsigned long)((10)*(20000000/4000.0)));
  6780  001942  0E41               	movlw	65
  6781  001944  6E38               	movwf	??_measure_freq& (0+255),c
  6782  001946  0EEE               	movlw	238
  6783  001948                     u3487:
  6784  001948  2EE8               	decfsz	wreg,f,c
  6785  00194A  D7FE               	goto	u3487
  6786  00194C  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6787  00194E  D7FC               	goto	u3487
  6788  001950  D000               	nop2	
  6789                           
  6790                           ;measure.c: 88: _delay((unsigned long)((10)*(20000000/4000.0)));
  6791  001952  0E41               	movlw	65
  6792  001954  6E38               	movwf	??_measure_freq& (0+255),c
  6793  001956  0EEE               	movlw	238
  6794  001958                     u3497:
  6795  001958  2EE8               	decfsz	wreg,f,c
  6796  00195A  D7FE               	goto	u3497
  6797  00195C  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6798  00195E  D7FC               	goto	u3497
  6799  001960  D000               	nop2	
  6800                           
  6801                           ;measure.c: 89: _delay((unsigned long)((10)*(20000000/4000.0)));
  6802  001962  0E41               	movlw	65
  6803  001964  6E38               	movwf	??_measure_freq& (0+255),c
  6804  001966  0EEE               	movlw	238
  6805  001968                     u3507:
  6806  001968  2EE8               	decfsz	wreg,f,c
  6807  00196A  D7FE               	goto	u3507
  6808  00196C  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6809  00196E  D7FC               	goto	u3507
  6810  001970  D000               	nop2	
  6811                           
  6812                           ;measure.c: 90: _delay((unsigned long)((10)*(20000000/4000.0)));
  6813  001972  0E41               	movlw	65
  6814  001974  6E38               	movwf	??_measure_freq& (0+255),c
  6815  001976  0EEE               	movlw	238
  6816  001978                     u3517:
  6817  001978  2EE8               	decfsz	wreg,f,c
  6818  00197A  D7FE               	goto	u3517
  6819  00197C  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6820  00197E  D7FC               	goto	u3517
  6821  001980  D000               	nop2	
  6822                           
  6823                           ;measure.c: 91: _delay((unsigned long)((10)*(20000000/4000.0)));
  6824  001982  0E41               	movlw	65
  6825  001984  6E38               	movwf	??_measure_freq& (0+255),c
  6826  001986  0EEE               	movlw	238
  6827  001988                     u3527:
  6828  001988  2EE8               	decfsz	wreg,f,c
  6829  00198A  D7FE               	goto	u3527
  6830  00198C  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6831  00198E  D7FC               	goto	u3527
  6832  001990  D000               	nop2	
  6833                           
  6834                           ;measure.c: 92: _delay((unsigned long)((10)*(20000000/4000.0)));
  6835  001992  0E41               	movlw	65
  6836  001994  6E38               	movwf	??_measure_freq& (0+255),c
  6837  001996  0EEE               	movlw	238
  6838  001998                     u3537:
  6839  001998  2EE8               	decfsz	wreg,f,c
  6840  00199A  D7FE               	goto	u3537
  6841  00199C  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6842  00199E  D7FC               	goto	u3537
  6843  0019A0  D000               	nop2	
  6844                           
  6845                           ;measure.c: 93: _delay((unsigned long)((10)*(20000000/4000.0)));
  6846  0019A2  0E41               	movlw	65
  6847  0019A4  6E38               	movwf	??_measure_freq& (0+255),c
  6848  0019A6  0EEE               	movlw	238
  6849  0019A8                     u3547:
  6850  0019A8  2EE8               	decfsz	wreg,f,c
  6851  0019AA  D7FE               	goto	u3547
  6852  0019AC  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6853  0019AE  D7FC               	goto	u3547
  6854  0019B0  D000               	nop2	
  6855                           
  6856                           ;measure.c: 94: _delay((unsigned long)((10)*(20000000/4000.0)));
  6857  0019B2  0E41               	movlw	65
  6858  0019B4  6E38               	movwf	??_measure_freq& (0+255),c
  6859  0019B6  0EEE               	movlw	238
  6860  0019B8                     u3557:
  6861  0019B8  2EE8               	decfsz	wreg,f,c
  6862  0019BA  D7FE               	goto	u3557
  6863  0019BC  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6864  0019BE  D7FC               	goto	u3557
  6865  0019C0  D000               	nop2	
  6866                           
  6867                           ;measure.c: 95: _delay((unsigned long)((10)*(20000000/4000.0)));
  6868  0019C2  0E41               	movlw	65
  6869  0019C4  6E38               	movwf	??_measure_freq& (0+255),c
  6870  0019C6  0EEE               	movlw	238
  6871  0019C8                     u3567:
  6872  0019C8  2EE8               	decfsz	wreg,f,c
  6873  0019CA  D7FE               	goto	u3567
  6874  0019CC  2E38               	decfsz	??_measure_freq& (0+255),f,c
  6875  0019CE  D7FC               	goto	u3567
  6876  0019D0  D000               	nop2	
  6877                           
  6878                           ;measure.c: 97: LATC &= ~0b00000100; LATC |= (!!(0)) << 2;;
  6879  0019D2  948B               	bcf	3979,2,c	;volatile
  6880  0019D4  508B               	movf	3979,w,c	;volatile
  6881                           
  6882                           ;measure.c: 100: TRISA |= 0b00010000;
  6883  0019D6  8892               	bsf	3986,4,c	;volatile
  6884                           
  6885                           ;measure.c: 103: count = timer0_read_ps();
  6886  0019D8  EC5F  F012         	call	_timer0_read_ps	;wreg free
  6887  0019DC  C004  F039         	movff	?_timer0_read_ps,measure_freq@count
  6888  0019E0  C005  F03A         	movff	?_timer0_read_ps+1,measure_freq@count+1
  6889                           
  6890                           ;measure.c: 106: lcd_gotoxy(0, 1);
  6891  0019E4  0E01               	movlw	1
  6892  0019E6  6E08               	movwf	lcd_gotoxy@row,c
  6893  0019E8  0E00               	movlw	0
  6894  0019EA  EC50  F013         	call	_lcd_gotoxy
  6895                           
  6896                           ;measure.c: 107: put_str("Freq=");
  6897  0019EE  0EB0               	movlw	STR_5& (0+255)
  6898  0019F0  ECDE  F013         	call	_put_str
  6899                           
  6900                           ;measure.c: 108: format_number( count, 10, 5);
  6901  0019F4  C039  F00B         	movff	measure_freq@count,format_number@n
  6902  0019F8  C03A  F00C         	movff	measure_freq@count+1,format_number@n+1
  6903  0019FC  0E0A               	movlw	10
  6904  0019FE  6E0D               	movwf	format_number@base,c
  6905  001A00  0E05               	movlw	5
  6906  001A02  6E0E               	movwf	format_number@pad,c
  6907  001A04  EC48  F010         	call	_format_number	;wreg free
  6908                           
  6909                           ;measure.c: 111: return count;
  6910  001A08  C039  F036         	movff	measure_freq@count,?_measure_freq
  6911  001A0C  C03A  F037         	movff	measure_freq@count+1,?_measure_freq+1
  6912  001A10  0012               	return		;funcret
  6913  001A12                     __end_of_measure_freq:
  6914                           	opt stack 0
  6915                           tblptru	equ	0xFF8
  6916                           tblptrh	equ	0xFF7
  6917                           tblptrl	equ	0xFF6
  6918                           tablat	equ	0xFF5
  6919                           prodl	equ	0xFF3
  6920                           intcon	equ	0xFF2
  6921                           intcon2	equ	0xFF1
  6922                           postinc0	equ	0xFEE
  6923                           wreg	equ	0xFE8
  6924                           postdec1	equ	0xFE5
  6925                           fsr1l	equ	0xFE1
  6926                           indf2	equ	0xFDF
  6927                           postinc2	equ	0xFDE
  6928                           postdec2	equ	0xFDD
  6929                           fsr2h	equ	0xFDA
  6930                           fsr2l	equ	0xFD9
  6931                           status	equ	0xFD8
  6932                           
  6933 ;; *************** function _timer0_read_ps *****************
  6934 ;; Defined at:
  6935 ;;		line 59 in file "../../../lib/timer.c"
  6936 ;; Parameters:    Size  Location     Type
  6937 ;;		None
  6938 ;; Auto vars:     Size  Location     Type
  6939 ;;  count           2    8[COMRAM] unsigned int 
  6940 ;;  prev            1    7[COMRAM] unsigned char 
  6941 ;; Return value:  Size  Location     Type
  6942 ;;                  2    3[COMRAM] unsigned short 
  6943 ;; Registers used:
  6944 ;;		wreg, status,2, status,0
  6945 ;; Tracked objects:
  6946 ;;		On entry : 0/0
  6947 ;;		On exit  : 0/0
  6948 ;;		Unchanged: 0/0
  6949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6950 ;;      Params:         2       0       0       0       0       0       0       0       0
  6951 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6952 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6953 ;;      Totals:         7       0       0       0       0       0       0       0       0
  6954 ;;Total ram usage:        7 bytes
  6955 ;; Hardware stack levels used:    1
  6956 ;; Hardware stack levels required when called:    1
  6957 ;; This function calls:
  6958 ;;		Nothing
  6959 ;; This function is called by:
  6960 ;;		_measure_freq
  6961 ;; This function uses a non-reentrant model
  6962 ;;
  6963                           
  6964                           	psect	text35
  6965  0024BE                     __ptext35:
  6966                           	opt stack 0
  6967  0024BE                     _timer0_read_ps:
  6968                           	opt stack 27
  6969                           
  6970                           ;timer.c: 60: uint8_t prev = TMR0;
  6971                           
  6972                           ;incstack = 0
  6973  0024BE  CFD6 F008          	movff	4054,timer0_read_ps@prev	;volatile
  6974                           
  6975                           ;timer.c: 61: uint16_t count = 0;
  6976  0024C2  6A09               	clrf	timer0_read_ps@count,c
  6977  0024C4  6A0A               	clrf	timer0_read_ps@count+1,c
  6978                           
  6979                           ;timer.c: 63: T0CON |= 0x20;
  6980  0024C6  8AD5               	bsf	4053,5,c	;volatile
  6981  0024C8                     l206:
  6982                           
  6983                           ;timer.c: 67: T0CON |= 0x10;
  6984  0024C8  88D5               	bsf	4053,4,c	;volatile
  6985                           
  6986                           ;timer.c: 69: __nop();
  6987  0024CA  F000               	nop	
  6988                           
  6989                           ;timer.c: 70: __nop();
  6990  0024CC  F000               	nop	
  6991                           
  6992                           ;timer.c: 72: T0CON &= ~0x10;
  6993  0024CE  98D5               	bcf	4053,4,c	;volatile
  6994                           
  6995                           ;timer.c: 74: __nop();
  6996  0024D0  F000               	nop	
  6997                           
  6998                           ;timer.c: 75: __nop();
  6999  0024D2  F000               	nop	
  7000                           
  7001                           ;timer.c: 77: ++count;
  7002  0024D4  4A09               	infsnz	timer0_read_ps@count,f,c
  7003  0024D6  2A0A               	incf	timer0_read_ps@count+1,f,c
  7004                           
  7005                           ;timer.c: 80: } while(prev == TMR0 && count <= 255);
  7006  0024D8  5008               	movf	timer0_read_ps@prev,w,c
  7007  0024DA  18D6               	xorwf	4054,w,c	;volatile
  7008  0024DC  10D7               	iorwf	4055,w,c	;volatile
  7009  0024DE  E102               	bnz	l3018
  7010  0024E0  040A               	decf	timer0_read_ps@count+1,w,c
  7011  0024E2  E3F2               	bnc	l206
  7012  0024E4                     l3018:
  7013                           
  7014                           ;timer.c: 82: count = ((prev << 8) + (256 - count));
  7015  0024E4  5008               	movf	timer0_read_ps@prev,w,c
  7016  0024E6  6E07               	movwf	(??_timer0_read_ps+1)& (0+255),c
  7017  0024E8  6A06               	clrf	??_timer0_read_ps& (0+255),c
  7018  0024EA  5009               	movf	timer0_read_ps@count,w,c
  7019  0024EC  5E06               	subwf	??_timer0_read_ps,f,c
  7020  0024EE  500A               	movf	timer0_read_ps@count+1,w,c
  7021  0024F0  5A07               	subwfb	??_timer0_read_ps+1,f,c
  7022  0024F2  0E00               	movlw	0
  7023  0024F4  2406               	addwf	??_timer0_read_ps,w,c
  7024  0024F6  6E09               	movwf	timer0_read_ps@count,c
  7025  0024F8  0E01               	movlw	1
  7026  0024FA  2007               	addwfc	??_timer0_read_ps+1,w,c
  7027  0024FC  6E0A               	movwf	timer0_read_ps@count+1,c
  7028                           
  7029                           ;timer.c: 83: return count;
  7030  0024FE  C009  F004         	movff	timer0_read_ps@count,?_timer0_read_ps
  7031  002502  C00A  F005         	movff	timer0_read_ps@count+1,?_timer0_read_ps+1
  7032  002506  0012               	return		;funcret
  7033  002508                     __end_of_timer0_read_ps:
  7034                           	opt stack 0
  7035                           tblptru	equ	0xFF8
  7036                           tblptrh	equ	0xFF7
  7037                           tblptrl	equ	0xFF6
  7038                           tablat	equ	0xFF5
  7039                           prodl	equ	0xFF3
  7040                           intcon	equ	0xFF2
  7041                           intcon2	equ	0xFF1
  7042                           postinc0	equ	0xFEE
  7043                           wreg	equ	0xFE8
  7044                           postdec1	equ	0xFE5
  7045                           fsr1l	equ	0xFE1
  7046                           indf2	equ	0xFDF
  7047                           postinc2	equ	0xFDE
  7048                           postdec2	equ	0xFDD
  7049                           fsr2h	equ	0xFDA
  7050                           fsr2l	equ	0xFD9
  7051                           status	equ	0xFD8
  7052                           
  7053 ;; *************** function _put_str *****************
  7054 ;; Defined at:
  7055 ;;		line 510 in file "../../../src/print.c"
  7056 ;; Parameters:    Size  Location     Type
  7057 ;;  s               1    wreg     PTR const unsigned char 
  7058 ;;		 -> STR_15(13), STR_6(10), STR_5(6), STR_3(15), 
  7059 ;;		 -> STR_1(12), 
  7060 ;; Auto vars:     Size  Location     Type
  7061 ;;  s               1   10[COMRAM] PTR const unsigned char 
  7062 ;;		 -> STR_15(13), STR_6(10), STR_5(6), STR_3(15), 
  7063 ;;		 -> STR_1(12), 
  7064 ;;  i               2    8[COMRAM] int 
  7065 ;; Return value:  Size  Location     Type
  7066 ;;		None               void
  7067 ;; Registers used:
  7068 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7069 ;; Tracked objects:
  7070 ;;		On entry : 0/0
  7071 ;;		On exit  : 0/0
  7072 ;;		Unchanged: 0/0
  7073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7074 ;;      Params:         0       0       0       0       0       0       0       0       0
  7075 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7076 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7077 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7078 ;;Total ram usage:        4 bytes
  7079 ;; Hardware stack levels used:    1
  7080 ;; Hardware stack levels required when called:    4
  7081 ;; This function calls:
  7082 ;;		_output_putch
  7083 ;; This function is called by:
  7084 ;;		_calibrate
  7085 ;;		_measure_freq
  7086 ;;		_measure_capacitance
  7087 ;;		_measure_inductance
  7088 ;; This function uses a non-reentrant model
  7089 ;;
  7090                           
  7091                           	psect	text36
  7092  0027BC                     __ptext36:
  7093                           	opt stack 0
  7094  0027BC                     _put_str:
  7095                           	opt stack 25
  7096                           
  7097                           ;incstack = 0
  7098                           ;put_str@s stored from wreg
  7099  0027BC  6E0B               	movwf	put_str@s,c
  7100                           
  7101                           ;print.c: 511: int i;
  7102                           ;print.c: 513: for(i = 0; s[i]; i++) {
  7103  0027BE  6A09               	clrf	put_str@i,c
  7104  0027C0  6A0A               	clrf	put_str@i+1,c
  7105  0027C2  D005               	goto	l3038
  7106  0027C4                     l3034:
  7107                           
  7108                           ;print.c: 514: output_putch(s[i]);
  7109  0027C4  D808               	call	PL28	;call to abstracted procedure
  7110  0027C6  EC99  F014         	call	_output_putch
  7111  0027CA  4A09               	infsnz	put_str@i,f,c
  7112  0027CC  2A0A               	incf	put_str@i+1,f,c
  7113  0027CE                     l3038:
  7114  0027CE  D803               	call	PL28	;call to abstracted procedure
  7115  0027D0  B4D8               	btfsc	status,2,c
  7116  0027D2  0012               	return		;funcret
  7117  0027D4  D7F7               	goto	l3034
  7118  0027D6                     __end_of_put_str:
  7119                           	opt stack 0
  7120  0027D6                     PL28:
  7121                           	opt stack 25
  7122  0027D6  500B               	movf	put_str@s,w,c
  7123  0027D8  2409               	addwf	put_str@i,w,c
  7124  0027DA  6E08               	movwf	??_put_str& (0+255),c
  7125  0027DC  C008  FFF6         	movff	??_put_str,tblptrl
  7126  0027E0                     	if	0	;There is only one active tblptr byte
  7127  0027E0                     	endif
  7128  0027E0                     	if	0	;tblptru may be non-zero
  7129  0027E0                     	endif
  7130  0027E0                     	if	0	;tblptru may be non-zero
  7131  0027E0                     	endif
  7132  0027E0  0008               	tblrd		*
  7133  0027E2  50F5               	movf	tablat,w,c
  7134  0027E4  0012               	return	
  7135  0027E6                     __end_ofPL28:
  7136                           	opt stack 0
  7137                           tblptru	equ	0xFF8
  7138                           tblptrh	equ	0xFF7
  7139                           tblptrl	equ	0xFF6
  7140                           tablat	equ	0xFF5
  7141                           prodl	equ	0xFF3
  7142                           intcon	equ	0xFF2
  7143                           intcon2	equ	0xFF1
  7144                           postinc0	equ	0xFEE
  7145                           wreg	equ	0xFE8
  7146                           postdec1	equ	0xFE5
  7147                           fsr1l	equ	0xFE1
  7148                           indf2	equ	0xFDF
  7149                           postinc2	equ	0xFDE
  7150                           postdec2	equ	0xFDD
  7151                           fsr2h	equ	0xFDA
  7152                           fsr2l	equ	0xFD9
  7153                           status	equ	0xFD8
  7154                           
  7155 ;; *************** function _output_putch *****************
  7156 ;; Defined at:
  7157 ;;		line 497 in file "../../../src/print.c"
  7158 ;; Parameters:    Size  Location     Type
  7159 ;;  c               1    wreg     unsigned char 
  7160 ;; Auto vars:     Size  Location     Type
  7161 ;;  c               1    6[COMRAM] unsigned char 
  7162 ;; Return value:  Size  Location     Type
  7163 ;;		None               void
  7164 ;; Registers used:
  7165 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7166 ;; Tracked objects:
  7167 ;;		On entry : 0/0
  7168 ;;		On exit  : 0/0
  7169 ;;		Unchanged: 0/0
  7170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7171 ;;      Params:         0       0       0       0       0       0       0       0       0
  7172 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7173 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7174 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7175 ;;Total ram usage:        1 bytes
  7176 ;; Hardware stack levels used:    1
  7177 ;; Hardware stack levels required when called:    3
  7178 ;; This function calls:
  7179 ;;		_lcd_send
  7180 ;;		_ser_putch
  7181 ;; This function is called by:
  7182 ;;		_put_str
  7183 ;; This function uses a non-reentrant model
  7184 ;;
  7185                           
  7186                           	psect	text37
  7187  002932                     __ptext37:
  7188                           	opt stack 0
  7189  002932                     _output_putch:
  7190                           	opt stack 25
  7191                           
  7192                           ;incstack = 0
  7193                           ;output_putch@c stored from wreg
  7194  002932  6E07               	movwf	output_putch@c,c
  7195                           
  7196                           ;print.c: 499: lcd_send((c), 1);
  7197  002934  0E01               	movlw	1
  7198  002936  6E05               	movwf	lcd_send@mode,c
  7199  002938  5007               	movf	output_putch@c,w,c
  7200  00293A  EC81  F014         	call	_lcd_send
  7201                           
  7202                           ;print.c: 502: ser_putch(c);
  7203  00293E  5007               	movf	output_putch@c,w,c
  7204  002940  EF1C  F014         	goto	_ser_putch
  7205  002944                     __end_of_output_putch:
  7206                           	opt stack 0
  7207                           tblptru	equ	0xFF8
  7208                           tblptrh	equ	0xFF7
  7209                           tblptrl	equ	0xFF6
  7210                           tablat	equ	0xFF5
  7211                           prodl	equ	0xFF3
  7212                           intcon	equ	0xFF2
  7213                           intcon2	equ	0xFF1
  7214                           postinc0	equ	0xFEE
  7215                           wreg	equ	0xFE8
  7216                           postdec1	equ	0xFE5
  7217                           fsr1l	equ	0xFE1
  7218                           indf2	equ	0xFDF
  7219                           postinc2	equ	0xFDE
  7220                           postdec2	equ	0xFDD
  7221                           fsr2h	equ	0xFDA
  7222                           fsr2l	equ	0xFD9
  7223                           status	equ	0xFD8
  7224                           
  7225 ;; *************** function _ser_putch *****************
  7226 ;; Defined at:
  7227 ;;		line 87 in file "../../../lib/ser.c"
  7228 ;; Parameters:    Size  Location     Type
  7229 ;;  c               1    wreg     unsigned char 
  7230 ;; Auto vars:     Size  Location     Type
  7231 ;;  c               1    3[COMRAM] unsigned char 
  7232 ;; Return value:  Size  Location     Type
  7233 ;;		None               void
  7234 ;; Registers used:
  7235 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7236 ;; Tracked objects:
  7237 ;;		On entry : 0/0
  7238 ;;		On exit  : 0/0
  7239 ;;		Unchanged: 0/0
  7240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7241 ;;      Params:         0       0       0       0       0       0       0       0       0
  7242 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7243 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7244 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7245 ;;Total ram usage:        1 bytes
  7246 ;; Hardware stack levels used:    1
  7247 ;; Hardware stack levels required when called:    1
  7248 ;; This function calls:
  7249 ;;		Nothing
  7250 ;; This function is called by:
  7251 ;;		_ser_puts
  7252 ;;		_measure_capacitance
  7253 ;;		_output_putch
  7254 ;; This function uses a non-reentrant model
  7255 ;;
  7256                           
  7257                           	psect	text38
  7258  002838                     __ptext38:
  7259                           	opt stack 0
  7260  002838                     _ser_putch:
  7261                           	opt stack 28
  7262                           
  7263                           ;incstack = 0
  7264                           ;ser_putch@c stored from wreg
  7265  002838  6E04               	movwf	ser_putch@c,c
  7266  00283A                     l2682:
  7267  00283A  285B               	incf	_txiptr,w,c	;volatile
  7268  00283C  0B0F               	andlw	15
  7269  00283E  185C               	xorwf	_txoptr,w,c	;volatile
  7270  002840  E0FC               	bz	l2682
  7271                           
  7272                           ;ser.c: 89: GIE = 0;
  7273  002842  9EF2               	bcf	intcon,7,c	;volatile
  7274                           
  7275                           ;ser.c: 90: txfifo[txiptr] = c;
  7276  002844  0E10               	movlw	low _txfifo
  7277  002846  245B               	addwf	_txiptr,w,c	;volatile
  7278  002848  6ED9               	movwf	fsr2l,c
  7279  00284A  6ADA               	clrf	fsr2h,c
  7280  00284C  0E01               	movlw	high _txfifo
  7281  00284E  22DA               	addwfc	fsr2h,f,c
  7282  002850  C004  FFDF         	movff	ser_putch@c,indf2
  7283                           
  7284                           ;ser.c: 91: txiptr = (txiptr + 1) & ((uint8_t)16 - 1);
  7285  002854  285B               	incf	_txiptr,w,c	;volatile
  7286  002856  0B0F               	andlw	15
  7287  002858  6E5B               	movwf	_txiptr,c	;volatile
  7288                           
  7289                           ;ser.c: 92: TXIE = 1;
  7290  00285A  889D               	bsf	3997,4,c	;volatile
  7291                           
  7292                           ;ser.c: 93: GIE = 1;
  7293  00285C  8EF2               	bsf	intcon,7,c	;volatile
  7294  00285E  0012               	return		;funcret
  7295  002860                     __end_of_ser_putch:
  7296                           	opt stack 0
  7297                           tblptru	equ	0xFF8
  7298                           tblptrh	equ	0xFF7
  7299                           tblptrl	equ	0xFF6
  7300                           tablat	equ	0xFF5
  7301                           prodl	equ	0xFF3
  7302                           intcon	equ	0xFF2
  7303                           intcon2	equ	0xFF1
  7304                           postinc0	equ	0xFEE
  7305                           wreg	equ	0xFE8
  7306                           postdec1	equ	0xFE5
  7307                           fsr1l	equ	0xFE1
  7308                           indf2	equ	0xFDF
  7309                           postinc2	equ	0xFDE
  7310                           postdec2	equ	0xFDD
  7311                           fsr2h	equ	0xFDA
  7312                           fsr2l	equ	0xFD9
  7313                           status	equ	0xFD8
  7314                           
  7315 ;; *************** function _lcd_gotoxy *****************
  7316 ;; Defined at:
  7317 ;;		line 157 in file "../../../lib/lcd44780.c"
  7318 ;; Parameters:    Size  Location     Type
  7319 ;;  col             1    wreg     unsigned char 
  7320 ;;  row             1    7[COMRAM] unsigned char 
  7321 ;; Auto vars:     Size  Location     Type
  7322 ;;  col             1    8[COMRAM] unsigned char 
  7323 ;;  row_offsets     4    9[COMRAM] unsigned char [4]
  7324 ;; Return value:  Size  Location     Type
  7325 ;;		None               void
  7326 ;; Registers used:
  7327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7328 ;; Tracked objects:
  7329 ;;		On entry : 0/0
  7330 ;;		On exit  : 0/0
  7331 ;;		Unchanged: 0/0
  7332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7333 ;;      Params:         1       0       0       0       0       0       0       0       0
  7334 ;;      Locals:         5       0       0       0       0       0       0       0       0
  7335 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7336 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7337 ;;Total ram usage:        6 bytes
  7338 ;; Hardware stack levels used:    1
  7339 ;; Hardware stack levels required when called:    4
  7340 ;; This function calls:
  7341 ;;		_lcd_command
  7342 ;; This function is called by:
  7343 ;;		_calibrate
  7344 ;;		_measure_freq
  7345 ;;		_measure_capacitance
  7346 ;;		_measure_inductance
  7347 ;;		_print_unit
  7348 ;;		_print_reading
  7349 ;;		_indicator
  7350 ;;		_main
  7351 ;; This function uses a non-reentrant model
  7352 ;;
  7353                           
  7354                           	psect	text39
  7355  0026A0                     __ptext39:
  7356                           	opt stack 0
  7357  0026A0                     _lcd_gotoxy:
  7358                           	opt stack 24
  7359                           
  7360                           ;incstack = 0
  7361                           ;lcd_gotoxy@col stored from wreg
  7362  0026A0  6E09               	movwf	lcd_gotoxy@col,c
  7363                           
  7364                           ;lcd44780.c: 159: uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
  7365  0026A2  C0F1  F00A         	movff	lcd_gotoxy@F6470,lcd_gotoxy@row_offsets
  7366  0026A6  C0F2  F00B         	movff	lcd_gotoxy@F6470+1,lcd_gotoxy@row_offsets+1
  7367  0026AA  C0F3  F00C         	movff	lcd_gotoxy@F6470+2,lcd_gotoxy@row_offsets+2
  7368  0026AE  C0F4  F00D         	movff	lcd_gotoxy@F6470+3,lcd_gotoxy@row_offsets+3
  7369                           
  7370                           ;lcd44780.c: 168: if(LCD_lines == 1) {
  7371  0026B2  0100               	movlb	0	; () banked
  7372  0026B4  05CF               	decf	_LCD_lines& (0+255),w,b
  7373  0026B6  E106               	bnz	l2992
  7374                           
  7375                           ; BSR set to: 0
  7376                           ;lcd44780.c: 169: row_offsets[1] = 0x14;
  7377  0026B8  0E14               	movlw	20
  7378  0026BA  6E0B               	movwf	lcd_gotoxy@row_offsets+1,c
  7379                           
  7380                           ;lcd44780.c: 170: row_offsets[2] = 0x28;
  7381  0026BC  0E28               	movlw	40
  7382  0026BE  6E0C               	movwf	lcd_gotoxy@row_offsets+2,c
  7383                           
  7384                           ;lcd44780.c: 171: row_offsets[3] = 0x3C;
  7385  0026C0  0E3C               	movlw	60
  7386  0026C2  6E0D               	movwf	lcd_gotoxy@row_offsets+3,c
  7387  0026C4                     l2992:
  7388                           
  7389                           ; BSR set to: 0
  7390                           ;lcd44780.c: 172: }
  7391                           ;lcd44780.c: 178: lcd_command(0x80 | (col + row_offsets[row]));
  7392  0026C4  5008               	movf	lcd_gotoxy@row,w,c
  7393  0026C6  0F0A               	addlw	low lcd_gotoxy@row_offsets
  7394  0026C8  6ED9               	movwf	fsr2l,c
  7395  0026CA  6ADA               	clrf	fsr2h,c
  7396  0026CC  50DF               	movf	indf2,w,c
  7397  0026CE  2409               	addwf	lcd_gotoxy@col,w,c
  7398  0026D0  0980               	iorlw	128
  7399  0026D2  EFA2  F014         	goto	_lcd_command
  7400  0026D6                     __end_of_lcd_gotoxy:
  7401                           	opt stack 0
  7402                           tblptru	equ	0xFF8
  7403                           tblptrh	equ	0xFF7
  7404                           tblptrl	equ	0xFF6
  7405                           tablat	equ	0xFF5
  7406                           prodl	equ	0xFF3
  7407                           intcon	equ	0xFF2
  7408                           intcon2	equ	0xFF1
  7409                           postinc0	equ	0xFEE
  7410                           wreg	equ	0xFE8
  7411                           postdec1	equ	0xFE5
  7412                           fsr1l	equ	0xFE1
  7413                           indf2	equ	0xFDF
  7414                           postinc2	equ	0xFDE
  7415                           postdec2	equ	0xFDD
  7416                           fsr2h	equ	0xFDA
  7417                           fsr2l	equ	0xFD9
  7418                           status	equ	0xFD8
  7419                           
  7420 ;; *************** function _format_number *****************
  7421 ;; Defined at:
  7422 ;;		line 15 in file "../../../lib/format.c"
  7423 ;; Parameters:    Size  Location     Type
  7424 ;;  n               2   10[COMRAM] unsigned int 
  7425 ;;  base            1   12[COMRAM] unsigned char 
  7426 ;;  pad             1   13[COMRAM] char 
  7427 ;; Auto vars:     Size  Location     Type
  7428 ;;  buf            32   16[COMRAM] unsigned char [32]
  7429 ;;  i               1   52[COMRAM] char 
  7430 ;;  di              1   51[COMRAM] unsigned char 
  7431 ;;  padchar         1   50[COMRAM] unsigned char 
  7432 ;; Return value:  Size  Location     Type
  7433 ;;		None               void
  7434 ;; Registers used:
  7435 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7436 ;; Tracked objects:
  7437 ;;		On entry : 0/0
  7438 ;;		On exit  : 0/0
  7439 ;;		Unchanged: 0/0
  7440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7441 ;;      Params:         4       0       0       0       0       0       0       0       0
  7442 ;;      Locals:        37       0       0       0       0       0       0       0       0
  7443 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7444 ;;      Totals:        43       0       0       0       0       0       0       0       0
  7445 ;;Total ram usage:       43 bytes
  7446 ;; Hardware stack levels used:    1
  7447 ;; Hardware stack levels required when called:    2
  7448 ;; This function calls:
  7449 ;;		___lwdiv
  7450 ;;		___lwmod
  7451 ;;		_buffer_putch
  7452 ;; This function is called by:
  7453 ;;		_format_xint32
  7454 ;;		_measure_freq
  7455 ;;		_print_reading
  7456 ;; This function uses a non-reentrant model
  7457 ;;
  7458                           
  7459                           	psect	text40
  7460  002090                     __ptext40:
  7461                           	opt stack 0
  7462  002090                     _format_number:
  7463                           	opt stack 26
  7464                           
  7465                           ;format.c: 16: char buf[8 * sizeof(long)];
  7466                           ;format.c: 17: uint8_t di;
  7467                           ;format.c: 18: int8_t i = 0;
  7468                           
  7469                           ;incstack = 0
  7470  002090  6A35               	clrf	format_number@i,c
  7471                           
  7472                           ;format.c: 19: char padchar = ' ';
  7473  002092  0E20               	movlw	32
  7474  002094  6E33               	movwf	format_number@padchar,c
  7475                           
  7476                           ;format.c: 21: if(pad < 0) {
  7477  002096  AE0E               	btfss	format_number@pad,7,c
  7478  002098  D003               	goto	l2916
  7479                           
  7480                           ;format.c: 22: pad = -pad;
  7481  00209A  6C0E               	negf	format_number@pad,c
  7482                           
  7483                           ;format.c: 23: padchar = '0';
  7484  00209C  0E30               	movlw	48
  7485  00209E  6E33               	movwf	format_number@padchar,c
  7486  0020A0                     l2916:
  7487                           
  7488                           ;format.c: 35: di = n % base;
  7489  0020A0  C00B  F004         	movff	format_number@n,___lwmod@dividend
  7490  0020A4  C00C  F005         	movff	format_number@n+1,___lwmod@dividend+1
  7491  0020A8  C00D  F006         	movff	format_number@base,___lwmod@divisor
  7492  0020AC  6A07               	clrf	___lwmod@divisor+1,c
  7493  0020AE  EC14  F013         	call	___lwmod	;wreg free
  7494  0020B2  5004               	movf	?___lwmod,w,c
  7495  0020B4  6E34               	movwf	format_number@di,c
  7496                           
  7497                           ;format.c: 36: buf[i++] = (di < 10 ? (uint8_t)'0' + di : (uint8_t)'A' + di - 10);
  7498  0020B6  0E09               	movlw	9
  7499  0020B8  6434               	cpfsgt	format_number@di,c
  7500  0020BA  D002               	goto	l2922
  7501  0020BC  0E37               	movlw	55
  7502  0020BE  D001               	goto	L3
  7503  0020C0                     l2922:
  7504  0020C0  0E30               	movlw	48
  7505  0020C2                     L3:
  7506  0020C2  2434               	addwf	format_number@di,w,c
  7507  0020C4  6E31               	movwf	_format_number$68,c
  7508  0020C6  6A32               	clrf	_format_number$68+1,c
  7509  0020C8  0E00               	movlw	0
  7510  0020CA  2232               	addwfc	_format_number$68+1,f,c
  7511  0020CC  5035               	movf	format_number@i,w,c
  7512  0020CE  0F11               	addlw	low format_number@buf
  7513  0020D0  6ED9               	movwf	fsr2l,c
  7514  0020D2  6ADA               	clrf	fsr2h,c
  7515  0020D4  C031  FFDF         	movff	_format_number$68,indf2
  7516  0020D8  2A35               	incf	format_number@i,f,c
  7517                           
  7518                           ;format.c: 38: n /= base;
  7519  0020DA  C00B  F004         	movff	format_number@n,___lwdiv@dividend
  7520  0020DE  C00C  F005         	movff	format_number@n+1,___lwdiv@dividend+1
  7521  0020E2  C00D  F006         	movff	format_number@base,___lwdiv@divisor
  7522  0020E6  6A07               	clrf	___lwdiv@divisor+1,c
  7523  0020E8  ECA9  F012         	call	___lwdiv	;wreg free
  7524  0020EC  C004  F00B         	movff	?___lwdiv,format_number@n
  7525  0020F0  C005  F00C         	movff	?___lwdiv+1,format_number@n+1
  7526                           
  7527                           ;format.c: 39: } while(n > 0);
  7528  0020F4  500B               	movf	format_number@n,w,c
  7529  0020F6  100C               	iorwf	format_number@n+1,w,c
  7530  0020F8  E004               	bz	l2934
  7531  0020FA  D7D2               	goto	l2916
  7532  0020FC                     l2932:
  7533  0020FC  5033               	movf	format_number@padchar,w,c
  7534  0020FE  EC84  F012         	call	_buffer_putch
  7535  002102                     l2934:
  7536  002102  060E               	decf	format_number@pad,f,c
  7537  002104  280E               	incf	format_number@pad,w,c
  7538  002106  6E0F               	movwf	??_format_number& (0+255),c
  7539  002108  5035               	movf	format_number@i,w,c
  7540  00210A  0A80               	xorlw	128
  7541  00210C  6E10               	movwf	(??_format_number+1)& (0+255),c
  7542  00210E  500F               	movf	??_format_number,w,c
  7543  002110  0A80               	xorlw	128
  7544  002112  5C10               	subwf	(??_format_number+1)& (0+255),w,c
  7545  002114  E3F3               	bnc	l2932
  7546  002116                     l2936:
  7547                           
  7548                           ;format.c: 43: for(; i > 0; i--) buffer_putch((char)buf[(int16_t)i - 1]);
  7549  002116  5035               	movf	format_number@i,w,c
  7550  002118  0A80               	xorlw	128
  7551  00211A  0F7F               	addlw	-129
  7552  00211C  A0D8               	btfss	status,0,c
  7553  00211E  0012               	return	
  7554  002120  C035  F00F         	movff	format_number@i,??_format_number
  7555  002124  060F               	decf	??_format_number,f,c
  7556  002126  500F               	movf	??_format_number,w,c
  7557  002128  0F11               	addlw	low format_number@buf
  7558  00212A  6ED9               	movwf	fsr2l,c
  7559  00212C  6ADA               	clrf	fsr2h,c
  7560  00212E  50DF               	movf	indf2,w,c
  7561  002130  EC84  F012         	call	_buffer_putch
  7562                           
  7563                           ; BSR set to: 0
  7564  002134  0635               	decf	format_number@i,f,c
  7565  002136  D7EF               	goto	l2936
  7566  002138                     __end_of_format_number:
  7567                           	opt stack 0
  7568                           tblptru	equ	0xFF8
  7569                           tblptrh	equ	0xFF7
  7570                           tblptrl	equ	0xFF6
  7571                           tablat	equ	0xFF5
  7572                           prodl	equ	0xFF3
  7573                           intcon	equ	0xFF2
  7574                           intcon2	equ	0xFF1
  7575                           postinc0	equ	0xFEE
  7576                           wreg	equ	0xFE8
  7577                           postdec1	equ	0xFE5
  7578                           fsr1l	equ	0xFE1
  7579                           indf2	equ	0xFDF
  7580                           postinc2	equ	0xFDE
  7581                           postdec2	equ	0xFDD
  7582                           fsr2h	equ	0xFDA
  7583                           fsr2l	equ	0xFD9
  7584                           status	equ	0xFD8
  7585                           
  7586 ;; *************** function _buffer_putch *****************
  7587 ;; Defined at:
  7588 ;;		line 22 in file "../../../lib/buffer.c"
  7589 ;; Parameters:    Size  Location     Type
  7590 ;;  ch              1    wreg     unsigned char 
  7591 ;; Auto vars:     Size  Location     Type
  7592 ;;  ch              1    5[COMRAM] unsigned char 
  7593 ;; Return value:  Size  Location     Type
  7594 ;;                  1    wreg      unsigned char 
  7595 ;; Registers used:
  7596 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7597 ;; Tracked objects:
  7598 ;;		On entry : 0/0
  7599 ;;		On exit  : F/0
  7600 ;;		Unchanged: 0/0
  7601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7602 ;;      Params:         0       0       0       0       0       0       0       0       0
  7603 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7604 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7605 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7606 ;;Total ram usage:        3 bytes
  7607 ;; Hardware stack levels used:    1
  7608 ;; Hardware stack levels required when called:    1
  7609 ;; This function calls:
  7610 ;;		Nothing
  7611 ;; This function is called by:
  7612 ;;		_format_number
  7613 ;;		_format_xint32
  7614 ;;		_format_double
  7615 ;; This function uses a non-reentrant model
  7616 ;;
  7617                           
  7618                           	psect	text41
  7619  002508                     __ptext41:
  7620                           	opt stack 0
  7621  002508                     _buffer_putch:
  7622                           	opt stack 26
  7623                           
  7624                           ;incstack = 0
  7625                           ;buffer_putch@ch stored from wreg
  7626  002508  6E06               	movwf	buffer_putch@ch,c
  7627                           
  7628                           ;buffer.c: 23: if(16 - buffer.n <= 0) {
  7629  00250A  0E10               	movlw	16
  7630  00250C  6E04               	movwf	??_buffer_putch& (0+255),c
  7631  00250E  6A05               	clrf	(??_buffer_putch+1)& (0+255),c
  7632  002510  0100               	movlb	0	; () banked
  7633  002512  39E4               	swapf	(_buffer+16)& (0+255),w,b
  7634  002514  0B0F               	andlw	15
  7635  002516  5E04               	subwf	??_buffer_putch,f,c
  7636  002518  0E00               	movlw	0
  7637  00251A  5A05               	subwfb	??_buffer_putch+1,f,c
  7638  00251C  BE05               	btfsc	??_buffer_putch+1,7,c
  7639  00251E  0C00               	retlw	0
  7640  002520  5005               	movf	??_buffer_putch+1,w,c
  7641  002522  E103               	bnz	l2794
  7642  002524  0404               	decf	??_buffer_putch,w,c
  7643  002526  A0D8               	btfss	status,0,c
  7644  002528  0012               	return	
  7645  00252A                     l2794:
  7646                           
  7647                           ; BSR set to: 0
  7648                           ;buffer.c: 25: }
  7649                           ;buffer.c: 26: buffer.x[buffer.n] = ch;
  7650  00252A  39E4               	swapf	(_buffer+16)& (0+255),w,b
  7651  00252C  0B0F               	andlw	15
  7652  00252E  6E04               	movwf	??_buffer_putch& (0+255),c
  7653  002530  5004               	movf	??_buffer_putch,w,c
  7654  002532  0FD4               	addlw	low _buffer
  7655  002534  6ED9               	movwf	fsr2l,c
  7656  002536  6ADA               	clrf	fsr2h,c
  7657  002538  C006  FFDF         	movff	buffer_putch@ch,indf2
  7658                           
  7659                           ; BSR set to: 0
  7660                           ;buffer.c: 27: buffer.n++;
  7661  00253C  39E4               	swapf	(_buffer+16)& (0+255),w,b
  7662  00253E  0B0F               	andlw	15
  7663  002540  6E04               	movwf	??_buffer_putch& (0+255),c
  7664  002542  2A04               	incf	??_buffer_putch,f,c
  7665  002544  3A04               	swapf	??_buffer_putch& (0+255),f,c
  7666  002546  51E4               	movf	(_buffer+16)& (0+255),w,b
  7667  002548  1804               	xorwf	??_buffer_putch& (0+255),w,c
  7668  00254A  0B0F               	andlw	-241
  7669  00254C  1804               	xorwf	??_buffer_putch& (0+255),w,c
  7670  00254E  6FE4               	movwf	(_buffer+16)& (0+255),b
  7671                           
  7672                           ; BSR set to: 0
  7673  002550  0012               	return		;funcret
  7674  002552                     __end_of_buffer_putch:
  7675                           	opt stack 0
  7676                           tblptru	equ	0xFF8
  7677                           tblptrh	equ	0xFF7
  7678                           tblptrl	equ	0xFF6
  7679                           tablat	equ	0xFF5
  7680                           prodl	equ	0xFF3
  7681                           intcon	equ	0xFF2
  7682                           intcon2	equ	0xFF1
  7683                           postinc0	equ	0xFEE
  7684                           wreg	equ	0xFE8
  7685                           postdec1	equ	0xFE5
  7686                           fsr1l	equ	0xFE1
  7687                           indf2	equ	0xFDF
  7688                           postinc2	equ	0xFDE
  7689                           postdec2	equ	0xFDD
  7690                           fsr2h	equ	0xFDA
  7691                           fsr2l	equ	0xFD9
  7692                           status	equ	0xFD8
  7693                           
  7694 ;; *************** function ___lwmod *****************
  7695 ;; Defined at:
  7696 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lwmod.c"
  7697 ;; Parameters:    Size  Location     Type
  7698 ;;  dividend        2    3[COMRAM] unsigned int 
  7699 ;;  divisor         2    5[COMRAM] unsigned int 
  7700 ;; Auto vars:     Size  Location     Type
  7701 ;;  counter         1    7[COMRAM] unsigned char 
  7702 ;; Return value:  Size  Location     Type
  7703 ;;                  2    3[COMRAM] unsigned int 
  7704 ;; Registers used:
  7705 ;;		wreg, status,2, status,0
  7706 ;; Tracked objects:
  7707 ;;		On entry : 0/0
  7708 ;;		On exit  : 0/0
  7709 ;;		Unchanged: 0/0
  7710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7711 ;;      Params:         4       0       0       0       0       0       0       0       0
  7712 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7713 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7714 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7715 ;;Total ram usage:        5 bytes
  7716 ;; Hardware stack levels used:    1
  7717 ;; Hardware stack levels required when called:    1
  7718 ;; This function calls:
  7719 ;;		Nothing
  7720 ;; This function is called by:
  7721 ;;		_format_number
  7722 ;;		_print_reading
  7723 ;; This function uses a non-reentrant model
  7724 ;;
  7725                           
  7726                           	psect	text42
  7727  002628                     __ptext42:
  7728                           	opt stack 0
  7729  002628                     ___lwmod:
  7730                           	opt stack 26
  7731                           
  7732                           ; BSR set to: 0
  7733                           ;incstack = 0
  7734  002628  5006               	movf	___lwmod@divisor,w,c
  7735  00262A  1007               	iorwf	___lwmod@divisor+1,w,c
  7736  00262C  E017               	bz	l1125
  7737  00262E  0E01               	movlw	1
  7738  002630  6E08               	movwf	___lwmod@counter,c
  7739  002632  D004               	goto	l2856
  7740  002634                     l2854:
  7741  002634  90D8               	bcf	status,0,c
  7742  002636  3606               	rlcf	___lwmod@divisor,f,c
  7743  002638  3607               	rlcf	___lwmod@divisor+1,f,c
  7744  00263A  2A08               	incf	___lwmod@counter,f,c
  7745  00263C                     l2856:
  7746  00263C  AE07               	btfss	___lwmod@divisor+1,7,c
  7747  00263E  D7FA               	goto	l2854
  7748  002640                     l2858:
  7749  002640  5006               	movf	___lwmod@divisor,w,c
  7750  002642  5C04               	subwf	___lwmod@dividend,w,c
  7751  002644  5007               	movf	___lwmod@divisor+1,w,c
  7752  002646  5805               	subwfb	___lwmod@dividend+1,w,c
  7753  002648  E304               	bnc	l2862
  7754  00264A  5006               	movf	___lwmod@divisor,w,c
  7755  00264C  5E04               	subwf	___lwmod@dividend,f,c
  7756  00264E  5007               	movf	___lwmod@divisor+1,w,c
  7757  002650  5A05               	subwfb	___lwmod@dividend+1,f,c
  7758  002652                     l2862:
  7759  002652  90D8               	bcf	status,0,c
  7760  002654  3207               	rrcf	___lwmod@divisor+1,f,c
  7761  002656  3206               	rrcf	___lwmod@divisor,f,c
  7762  002658  2E08               	decfsz	___lwmod@counter,f,c
  7763  00265A  D7F2               	goto	l2858
  7764  00265C                     l1125:
  7765  00265C  C004  F004         	movff	___lwmod@dividend,?___lwmod
  7766  002660  C005  F005         	movff	___lwmod@dividend+1,?___lwmod+1
  7767  002664  0012               	return		;funcret
  7768  002666                     __end_of___lwmod:
  7769                           	opt stack 0
  7770                           tblptru	equ	0xFF8
  7771                           tblptrh	equ	0xFF7
  7772                           tblptrl	equ	0xFF6
  7773                           tablat	equ	0xFF5
  7774                           prodl	equ	0xFF3
  7775                           intcon	equ	0xFF2
  7776                           intcon2	equ	0xFF1
  7777                           postinc0	equ	0xFEE
  7778                           wreg	equ	0xFE8
  7779                           postdec1	equ	0xFE5
  7780                           fsr1l	equ	0xFE1
  7781                           indf2	equ	0xFDF
  7782                           postinc2	equ	0xFDE
  7783                           postdec2	equ	0xFDD
  7784                           fsr2h	equ	0xFDA
  7785                           fsr2l	equ	0xFD9
  7786                           status	equ	0xFD8
  7787                           
  7788 ;; *************** function ___lwdiv *****************
  7789 ;; Defined at:
  7790 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lwdiv.c"
  7791 ;; Parameters:    Size  Location     Type
  7792 ;;  dividend        2    3[COMRAM] unsigned int 
  7793 ;;  divisor         2    5[COMRAM] unsigned int 
  7794 ;; Auto vars:     Size  Location     Type
  7795 ;;  quotient        2    7[COMRAM] unsigned int 
  7796 ;;  counter         1    9[COMRAM] unsigned char 
  7797 ;; Return value:  Size  Location     Type
  7798 ;;                  2    3[COMRAM] unsigned int 
  7799 ;; Registers used:
  7800 ;;		wreg, status,2, status,0
  7801 ;; Tracked objects:
  7802 ;;		On entry : 0/0
  7803 ;;		On exit  : 0/0
  7804 ;;		Unchanged: 0/0
  7805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7806 ;;      Params:         4       0       0       0       0       0       0       0       0
  7807 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7808 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7809 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7810 ;;Total ram usage:        7 bytes
  7811 ;; Hardware stack levels used:    1
  7812 ;; Hardware stack levels required when called:    1
  7813 ;; This function calls:
  7814 ;;		Nothing
  7815 ;; This function is called by:
  7816 ;;		_format_number
  7817 ;;		_print_reading
  7818 ;; This function uses a non-reentrant model
  7819 ;;
  7820                           
  7821                           	psect	text43
  7822  002552                     __ptext43:
  7823                           	opt stack 0
  7824  002552                     ___lwdiv:
  7825                           	opt stack 26
  7826                           
  7827                           ;incstack = 0
  7828  002552  6A08               	clrf	___lwdiv@quotient,c
  7829  002554  6A09               	clrf	___lwdiv@quotient+1,c
  7830  002556  5006               	movf	___lwdiv@divisor,w,c
  7831  002558  1007               	iorwf	___lwdiv@divisor+1,w,c
  7832  00255A  E01B               	bz	l1115
  7833  00255C  0E01               	movlw	1
  7834  00255E  6E0A               	movwf	___lwdiv@counter,c
  7835  002560  D004               	goto	l2836
  7836  002562                     l2834:
  7837  002562  90D8               	bcf	status,0,c
  7838  002564  3606               	rlcf	___lwdiv@divisor,f,c
  7839  002566  3607               	rlcf	___lwdiv@divisor+1,f,c
  7840  002568  2A0A               	incf	___lwdiv@counter,f,c
  7841  00256A                     l2836:
  7842  00256A  AE07               	btfss	___lwdiv@divisor+1,7,c
  7843  00256C  D7FA               	goto	l2834
  7844  00256E                     l2838:
  7845  00256E  90D8               	bcf	status,0,c
  7846  002570  3608               	rlcf	___lwdiv@quotient,f,c
  7847  002572  3609               	rlcf	___lwdiv@quotient+1,f,c
  7848  002574  5006               	movf	___lwdiv@divisor,w,c
  7849  002576  5C04               	subwf	___lwdiv@dividend,w,c
  7850  002578  5007               	movf	___lwdiv@divisor+1,w,c
  7851  00257A  5805               	subwfb	___lwdiv@dividend+1,w,c
  7852  00257C  E305               	bnc	l2846
  7853  00257E  5006               	movf	___lwdiv@divisor,w,c
  7854  002580  5E04               	subwf	___lwdiv@dividend,f,c
  7855  002582  5007               	movf	___lwdiv@divisor+1,w,c
  7856  002584  5A05               	subwfb	___lwdiv@dividend+1,f,c
  7857  002586  8008               	bsf	___lwdiv@quotient,0,c
  7858  002588                     l2846:
  7859  002588  90D8               	bcf	status,0,c
  7860  00258A  3207               	rrcf	___lwdiv@divisor+1,f,c
  7861  00258C  3206               	rrcf	___lwdiv@divisor,f,c
  7862  00258E  2E0A               	decfsz	___lwdiv@counter,f,c
  7863  002590  D7EE               	goto	l2838
  7864  002592                     l1115:
  7865  002592  C008  F004         	movff	___lwdiv@quotient,?___lwdiv
  7866  002596  C009  F005         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7867  00259A  0012               	return		;funcret
  7868  00259C                     __end_of___lwdiv:
  7869                           	opt stack 0
  7870                           tblptru	equ	0xFF8
  7871                           tblptrh	equ	0xFF7
  7872                           tblptrl	equ	0xFF6
  7873                           tablat	equ	0xFF5
  7874                           prodl	equ	0xFF3
  7875                           intcon	equ	0xFF2
  7876                           intcon2	equ	0xFF1
  7877                           postinc0	equ	0xFEE
  7878                           wreg	equ	0xFE8
  7879                           postdec1	equ	0xFE5
  7880                           fsr1l	equ	0xFE1
  7881                           indf2	equ	0xFDF
  7882                           postinc2	equ	0xFDE
  7883                           postdec2	equ	0xFDD
  7884                           fsr2h	equ	0xFDA
  7885                           fsr2l	equ	0xFD9
  7886                           status	equ	0xFD8
  7887                           
  7888 ;; *************** function _lcd_clear *****************
  7889 ;; Defined at:
  7890 ;;		line 309 in file "../../../lib/lcd44780.c"
  7891 ;; Parameters:    Size  Location     Type
  7892 ;;		None
  7893 ;; Auto vars:     Size  Location     Type
  7894 ;;		None
  7895 ;; Return value:  Size  Location     Type
  7896 ;;		None               void
  7897 ;; Registers used:
  7898 ;;		wreg, status,2, status,0, cstack
  7899 ;; Tracked objects:
  7900 ;;		On entry : 0/0
  7901 ;;		On exit  : 0/0
  7902 ;;		Unchanged: 0/0
  7903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7904 ;;      Params:         0       0       0       0       0       0       0       0       0
  7905 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7906 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7907 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7908 ;;Total ram usage:        1 bytes
  7909 ;; Hardware stack levels used:    1
  7910 ;; Hardware stack levels required when called:    4
  7911 ;; This function calls:
  7912 ;;		_lcd_command
  7913 ;; This function is called by:
  7914 ;;		_calibrate
  7915 ;;		_main
  7916 ;; This function uses a non-reentrant model
  7917 ;;
  7918                           
  7919                           	psect	text44
  7920  00291C                     __ptext44:
  7921                           	opt stack 0
  7922  00291C                     _lcd_clear:
  7923                           	opt stack 26
  7924                           
  7925                           ;lcd44780.c: 310: lcd_command(0x01);
  7926                           
  7927                           ;incstack = 0
  7928  00291C  0E01               	movlw	1
  7929  00291E  ECA2  F014         	call	_lcd_command
  7930                           
  7931                           ;lcd44780.c: 311: _delay((unsigned long)((2)*(20000000/4000.0)));
  7932  002922  0E0D               	movlw	13
  7933  002924  6E08               	movwf	??_lcd_clear& (0+255),c
  7934  002926  0EFC               	movlw	252
  7935  002928                     u3577:
  7936  002928  2EE8               	decfsz	wreg,f,c
  7937  00292A  D7FE               	goto	u3577
  7938  00292C  2E08               	decfsz	??_lcd_clear& (0+255),f,c
  7939  00292E  D7FC               	goto	u3577
  7940  002930  0012               	return		;funcret
  7941  002932                     __end_of_lcd_clear:
  7942                           	opt stack 0
  7943                           tblptru	equ	0xFF8
  7944                           tblptrh	equ	0xFF7
  7945                           tblptrl	equ	0xFF6
  7946                           tablat	equ	0xFF5
  7947                           prodl	equ	0xFF3
  7948                           intcon	equ	0xFF2
  7949                           intcon2	equ	0xFF1
  7950                           postinc0	equ	0xFEE
  7951                           wreg	equ	0xFE8
  7952                           postdec1	equ	0xFE5
  7953                           fsr1l	equ	0xFE1
  7954                           indf2	equ	0xFDF
  7955                           postinc2	equ	0xFDE
  7956                           postdec2	equ	0xFDD
  7957                           fsr2h	equ	0xFDA
  7958                           fsr2l	equ	0xFD9
  7959                           status	equ	0xFD8
  7960                           
  7961 ;; *************** function _lcd_command *****************
  7962 ;; Defined at:
  7963 ;;		line 149 in file "../../../lib/lcd44780.c"
  7964 ;; Parameters:    Size  Location     Type
  7965 ;;  value           1    wreg     unsigned char 
  7966 ;; Auto vars:     Size  Location     Type
  7967 ;;  value           1    6[COMRAM] unsigned char 
  7968 ;; Return value:  Size  Location     Type
  7969 ;;		None               void
  7970 ;; Registers used:
  7971 ;;		wreg, status,2, status,0, cstack
  7972 ;; Tracked objects:
  7973 ;;		On entry : 0/0
  7974 ;;		On exit  : 0/0
  7975 ;;		Unchanged: 0/0
  7976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7977 ;;      Params:         0       0       0       0       0       0       0       0       0
  7978 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7979 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7980 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7981 ;;Total ram usage:        1 bytes
  7982 ;; Hardware stack levels used:    1
  7983 ;; Hardware stack levels required when called:    3
  7984 ;; This function calls:
  7985 ;;		_lcd_send
  7986 ;; This function is called by:
  7987 ;;		_lcd_gotoxy
  7988 ;;		_lcd_clear
  7989 ;;		_lcd_begin
  7990 ;; This function uses a non-reentrant model
  7991 ;;
  7992                           
  7993                           	psect	text45
  7994  002944                     __ptext45:
  7995                           	opt stack 0
  7996  002944                     _lcd_command:
  7997                           	opt stack 24
  7998                           
  7999                           ;incstack = 0
  8000                           ;lcd_command@value stored from wreg
  8001  002944  6E07               	movwf	lcd_command@value,c
  8002                           
  8003                           ;lcd44780.c: 150: lcd_send(value, 0);
  8004  002946  0E00               	movlw	0
  8005  002948  6E05               	movwf	lcd_send@mode,c
  8006  00294A  5007               	movf	lcd_command@value,w,c
  8007  00294C  EF81  F014         	goto	_lcd_send
  8008  002950                     __end_of_lcd_command:
  8009                           	opt stack 0
  8010                           tblptru	equ	0xFF8
  8011                           tblptrh	equ	0xFF7
  8012                           tblptrl	equ	0xFF6
  8013                           tablat	equ	0xFF5
  8014                           prodl	equ	0xFF3
  8015                           intcon	equ	0xFF2
  8016                           intcon2	equ	0xFF1
  8017                           postinc0	equ	0xFEE
  8018                           wreg	equ	0xFE8
  8019                           postdec1	equ	0xFE5
  8020                           fsr1l	equ	0xFE1
  8021                           indf2	equ	0xFDF
  8022                           postinc2	equ	0xFDE
  8023                           postdec2	equ	0xFDD
  8024                           fsr2h	equ	0xFDA
  8025                           fsr2l	equ	0xFD9
  8026                           status	equ	0xFD8
  8027                           
  8028 ;; *************** function _lcd_send *****************
  8029 ;; Defined at:
  8030 ;;		line 125 in file "../../../lib/lcd44780.c"
  8031 ;; Parameters:    Size  Location     Type
  8032 ;;  value           1    wreg     unsigned char 
  8033 ;;  mode            1    4[COMRAM] unsigned char 
  8034 ;; Auto vars:     Size  Location     Type
  8035 ;;  value           1    5[COMRAM] unsigned char 
  8036 ;; Return value:  Size  Location     Type
  8037 ;;		None               void
  8038 ;; Registers used:
  8039 ;;		wreg, status,2, status,0, cstack
  8040 ;; Tracked objects:
  8041 ;;		On entry : 0/0
  8042 ;;		On exit  : 0/0
  8043 ;;		Unchanged: 0/0
  8044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8045 ;;      Params:         1       0       0       0       0       0       0       0       0
  8046 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8047 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8048 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8049 ;;Total ram usage:        2 bytes
  8050 ;; Hardware stack levels used:    1
  8051 ;; Hardware stack levels required when called:    2
  8052 ;; This function calls:
  8053 ;;		_lcd_write4bits
  8054 ;; This function is called by:
  8055 ;;		_lcd_command
  8056 ;;		_lcd_puts
  8057 ;;		_calibrate
  8058 ;;		_output_putch
  8059 ;; This function uses a non-reentrant model
  8060 ;;
  8061                           
  8062                           	psect	text46
  8063  002902                     __ptext46:
  8064                           	opt stack 0
  8065  002902                     _lcd_send:
  8066                           	opt stack 25
  8067                           
  8068                           ;incstack = 0
  8069                           ;lcd_send@value stored from wreg
  8070  002902  6E06               	movwf	lcd_send@value,c
  8071                           
  8072                           ;lcd44780.c: 126: if(mode) {
  8073  002904  5005               	movf	lcd_send@mode,w,c
  8074  002906  E002               	bz	l2674
  8075                           
  8076                           ;lcd44780.c: 127: LATB |= 0b0100;
  8077  002908  848A               	bsf	3978,2,c	;volatile
  8078                           
  8079                           ;lcd44780.c: 128: } else {
  8080  00290A  D001               	goto	l2676
  8081  00290C                     l2674:
  8082                           
  8083                           ;lcd44780.c: 129: LATB &= ~0b0100;
  8084  00290C  948A               	bcf	3978,2,c	;volatile
  8085  00290E                     l2676:
  8086                           
  8087                           ;lcd44780.c: 130: }
  8088                           ;lcd44780.c: 137: {
  8089                           ;lcd44780.c: 138: lcd_write4bits(value >> 4);
  8090  00290E  3806               	swapf	lcd_send@value,w,c
  8091  002910  0B0F               	andlw	15
  8092  002912  EC43  F014         	call	_lcd_write4bits
  8093                           
  8094                           ;lcd44780.c: 139: lcd_write4bits(value);
  8095  002916  5006               	movf	lcd_send@value,w,c
  8096  002918  EF43  F014         	goto	_lcd_write4bits
  8097  00291C                     __end_of_lcd_send:
  8098                           	opt stack 0
  8099                           tblptru	equ	0xFF8
  8100                           tblptrh	equ	0xFF7
  8101                           tblptrl	equ	0xFF6
  8102                           tablat	equ	0xFF5
  8103                           prodl	equ	0xFF3
  8104                           intcon	equ	0xFF2
  8105                           intcon2	equ	0xFF1
  8106                           postinc0	equ	0xFEE
  8107                           wreg	equ	0xFE8
  8108                           postdec1	equ	0xFE5
  8109                           fsr1l	equ	0xFE1
  8110                           indf2	equ	0xFDF
  8111                           postinc2	equ	0xFDE
  8112                           postdec2	equ	0xFDD
  8113                           fsr2h	equ	0xFDA
  8114                           fsr2l	equ	0xFD9
  8115                           status	equ	0xFD8
  8116                           
  8117 ;; *************** function _lcd_write4bits *****************
  8118 ;; Defined at:
  8119 ;;		line 56 in file "../../../lib/lcd44780.c"
  8120 ;; Parameters:    Size  Location     Type
  8121 ;;  value           1    wreg     unsigned char 
  8122 ;; Auto vars:     Size  Location     Type
  8123 ;;  value           1    3[COMRAM] unsigned char 
  8124 ;; Return value:  Size  Location     Type
  8125 ;;		None               void
  8126 ;; Registers used:
  8127 ;;		wreg, status,2, status,0
  8128 ;; Tracked objects:
  8129 ;;		On entry : 0/0
  8130 ;;		On exit  : 0/0
  8131 ;;		Unchanged: 0/0
  8132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8133 ;;      Params:         0       0       0       0       0       0       0       0       0
  8134 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8135 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8136 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8137 ;;Total ram usage:        1 bytes
  8138 ;; Hardware stack levels used:    1
  8139 ;; Hardware stack levels required when called:    1
  8140 ;; This function calls:
  8141 ;;		Nothing
  8142 ;; This function is called by:
  8143 ;;		_lcd_send
  8144 ;;		_lcd_begin
  8145 ;; This function uses a non-reentrant model
  8146 ;;
  8147                           
  8148                           	psect	text47
  8149  002886                     __ptext47:
  8150                           	opt stack 0
  8151  002886                     _lcd_write4bits:
  8152                           	opt stack 25
  8153                           
  8154                           ;incstack = 0
  8155                           ;lcd_write4bits@value stored from wreg
  8156  002886  6E04               	movwf	lcd_write4bits@value,c
  8157                           
  8158                           ;lcd44780.c: 61: LATB &= 0b00001111;
  8159  002888  0E0F               	movlw	15
  8160  00288A  168A               	andwf	3978,f,c	;volatile
  8161                           
  8162                           ;lcd44780.c: 62: LATB |= value << 4;
  8163  00288C  3804               	swapf	lcd_write4bits@value,w,c
  8164  00288E  0BF0               	andlw	240
  8165  002890  128A               	iorwf	3978,f,c	;volatile
  8166                           
  8167                           ;lcd44780.c: 77: LATB |= 0b1000; _delay((unsigned long)((4)*(20000000/4000000.0))); LATB
      +                           &= ~0b1000; _delay((unsigned long)((100)*(20000000/4000000.0)));;
  8168  002892  868A               	bsf	3978,3,c	;volatile
  8169  002894  0E06               	movlw	6
  8170  002896                     u3587:
  8171  002896  2EE8               	decfsz	wreg,f,c
  8172  002898  D7FE               	goto	u3587
  8173  00289A  D000               	nop2		;nop
  8174  00289C  968A               	bcf	3978,3,c	;volatile
  8175  00289E  0EA6               	movlw	166
  8176  0028A0                     u3597:
  8177  0028A0  2EE8               	decfsz	wreg,f,c
  8178  0028A2  D7FE               	goto	u3597
  8179  0028A4  D000               	nop2		;nop
  8180  0028A6  0012               	return		;funcret
  8181  0028A8                     __end_of_lcd_write4bits:
  8182                           	opt stack 0
  8183                           tblptru	equ	0xFF8
  8184                           tblptrh	equ	0xFF7
  8185                           tblptrl	equ	0xFF6
  8186                           tablat	equ	0xFF5
  8187                           prodl	equ	0xFF3
  8188                           intcon	equ	0xFF2
  8189                           intcon2	equ	0xFF1
  8190                           postinc0	equ	0xFEE
  8191                           wreg	equ	0xFE8
  8192                           postdec1	equ	0xFE5
  8193                           fsr1l	equ	0xFE1
  8194                           indf2	equ	0xFDF
  8195                           postinc2	equ	0xFDE
  8196                           postdec2	equ	0xFDD
  8197                           fsr2h	equ	0xFDA
  8198                           fsr2l	equ	0xFD9
  8199                           status	equ	0xFD8
  8200                           
  8201 ;; *************** function _delay10ms *****************
  8202 ;; Defined at:
  8203 ;;		line 54 in file "../../../LC-meter.c"
  8204 ;; Parameters:    Size  Location     Type
  8205 ;;  period_10ms     1    wreg     unsigned char 
  8206 ;; Auto vars:     Size  Location     Type
  8207 ;;  period_10ms     1    0[COMRAM] unsigned char 
  8208 ;; Return value:  Size  Location     Type
  8209 ;;		None               void
  8210 ;; Registers used:
  8211 ;;		wreg
  8212 ;; Tracked objects:
  8213 ;;		On entry : 0/0
  8214 ;;		On exit  : 0/0
  8215 ;;		Unchanged: 0/0
  8216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8217 ;;      Params:         0       0       0       0       0       0       0       0       0
  8218 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8219 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8220 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8221 ;;Total ram usage:        0 bytes
  8222 ;; Hardware stack levels used:    1
  8223 ;; Hardware stack levels required when called:    1
  8224 ;; This function calls:
  8225 ;;		Nothing
  8226 ;; This function is called by:
  8227 ;;		_calibrate
  8228 ;;		_main
  8229 ;; This function uses a non-reentrant model
  8230 ;;
  8231                           
  8232                           	psect	text48
  8233  002954                     __ptext48:
  8234                           	opt stack 0
  8235  002954                     _delay10ms:
  8236                           	opt stack 29
  8237                           
  8238                           ;incstack = 0
  8239  002954  0012               	return		;funcret
  8240  002956                     __end_of_delay10ms:
  8241                           	opt stack 0
  8242                           tblptru	equ	0xFF8
  8243                           tblptrh	equ	0xFF7
  8244                           tblptrl	equ	0xFF6
  8245                           tablat	equ	0xFF5
  8246                           prodl	equ	0xFF3
  8247                           intcon	equ	0xFF2
  8248                           intcon2	equ	0xFF1
  8249                           postinc0	equ	0xFEE
  8250                           wreg	equ	0xFE8
  8251                           postdec1	equ	0xFE5
  8252                           fsr1l	equ	0xFE1
  8253                           indf2	equ	0xFDF
  8254                           postinc2	equ	0xFDE
  8255                           postdec2	equ	0xFDD
  8256                           fsr2h	equ	0xFDA
  8257                           fsr2l	equ	0xFD9
  8258                           status	equ	0xFD8
  8259                           
  8260 ;; *************** function ___lwtofl *****************
  8261 ;; Defined at:
  8262 ;;		line 28 in file "/opt/microchip/xc8/v1.34/sources/common/lwtofl.c"
  8263 ;; Parameters:    Size  Location     Type
  8264 ;;  c               2   58[COMRAM] unsigned int 
  8265 ;; Auto vars:     Size  Location     Type
  8266 ;;		None
  8267 ;; Return value:  Size  Location     Type
  8268 ;;                  4   58[COMRAM] unsigned int 
  8269 ;; Registers used:
  8270 ;;		wreg, status,2, status,0, cstack
  8271 ;; Tracked objects:
  8272 ;;		On entry : 0/0
  8273 ;;		On exit  : 0/0
  8274 ;;		Unchanged: 0/0
  8275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8276 ;;      Params:         4       0       0       0       0       0       0       0       0
  8277 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8278 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8279 ;;      Totals:         4       0       0       0       0       0       0       0       0
  8280 ;;Total ram usage:        4 bytes
  8281 ;; Hardware stack levels used:    1
  8282 ;; Hardware stack levels required when called:    2
  8283 ;; This function calls:
  8284 ;;		___flpack
  8285 ;; This function is called by:
  8286 ;;		_calibrate
  8287 ;;		_measure_capacitance
  8288 ;;		_measure_inductance
  8289 ;; This function uses a non-reentrant model
  8290 ;;
  8291                           
  8292                           	psect	text49
  8293  0027E6                     __ptext49:
  8294                           	opt stack 0
  8295  0027E6                     ___lwtofl:
  8296                           	opt stack 27
  8297                           
  8298                           ;incstack = 0
  8299  0027E6  C03B  F004         	movff	___lwtofl@c,___flpack@arg
  8300  0027EA  C03C  F005         	movff	___lwtofl@c+1,___flpack@arg+1
  8301  0027EE  6A06               	clrf	___flpack@arg+2,c
  8302  0027F0  6A07               	clrf	___flpack@arg+3,c
  8303  0027F2  0E96               	movlw	150
  8304  0027F4  6E08               	movwf	___flpack@exp,c
  8305  0027F6  0E00               	movlw	0
  8306  0027F8  6E09               	movwf	___flpack@sign,c
  8307  0027FA  EC3A  F00F         	call	___flpack	;wreg free
  8308  0027FE  C004  F03B         	movff	?___flpack,?___lwtofl
  8309  002802  C005  F03C         	movff	?___flpack+1,?___lwtofl+1
  8310  002806  C006  F03D         	movff	?___flpack+2,?___lwtofl+2
  8311  00280A  C007  F03E         	movff	?___flpack+3,?___lwtofl+3
  8312  00280E  0012               	return		;funcret
  8313  002810                     __end_of___lwtofl:
  8314                           	opt stack 0
  8315                           tblptru	equ	0xFF8
  8316                           tblptrh	equ	0xFF7
  8317                           tblptrl	equ	0xFF6
  8318                           tablat	equ	0xFF5
  8319                           prodl	equ	0xFF3
  8320                           intcon	equ	0xFF2
  8321                           intcon2	equ	0xFF1
  8322                           postinc0	equ	0xFEE
  8323                           wreg	equ	0xFE8
  8324                           postdec1	equ	0xFE5
  8325                           fsr1l	equ	0xFE1
  8326                           indf2	equ	0xFDF
  8327                           postinc2	equ	0xFDE
  8328                           postdec2	equ	0xFDD
  8329                           fsr2h	equ	0xFDA
  8330                           fsr2l	equ	0xFD9
  8331                           status	equ	0xFD8
  8332                           
  8333 ;; *************** function ___flpack *****************
  8334 ;; Defined at:
  8335 ;;		line 63 in file "/opt/microchip/xc8/v1.34/sources/common/double.c"
  8336 ;; Parameters:    Size  Location     Type
  8337 ;;  arg             4    3[COMRAM] unsigned long 
  8338 ;;  exp             1    7[COMRAM] unsigned char 
  8339 ;;  sign            1    8[COMRAM] unsigned char 
  8340 ;; Auto vars:     Size  Location     Type
  8341 ;;		None
  8342 ;; Return value:  Size  Location     Type
  8343 ;;                  4    3[COMRAM] unsigned char 
  8344 ;; Registers used:
  8345 ;;		wreg, status,2, status,0
  8346 ;; Tracked objects:
  8347 ;;		On entry : 0/0
  8348 ;;		On exit  : 0/0
  8349 ;;		Unchanged: 0/0
  8350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8351 ;;      Params:         6       0       0       0       0       0       0       0       0
  8352 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8353 ;;      Temps:          4       0       0       0       0       0       0       0       0
  8354 ;;      Totals:        10       0       0       0       0       0       0       0       0
  8355 ;;Total ram usage:       10 bytes
  8356 ;; Hardware stack levels used:    1
  8357 ;; Hardware stack levels required when called:    1
  8358 ;; This function calls:
  8359 ;;		Nothing
  8360 ;; This function is called by:
  8361 ;;		___altofl
  8362 ;;		___awtofl
  8363 ;;		___fladd
  8364 ;;		___fldiv
  8365 ;;		___flmul
  8366 ;;		___lltofl
  8367 ;;		___lwtofl
  8368 ;; This function uses a non-reentrant model
  8369 ;;
  8370                           
  8371                           	psect	text50
  8372  001E74                     __ptext50:
  8373                           	opt stack 0
  8374  001E74                     ___flpack:
  8375                           	opt stack 27
  8376                           
  8377                           ;incstack = 0
  8378  001E74  5008               	movf	___flpack@exp,w,c
  8379  001E76  E005               	bz	l779
  8380  001E78  5004               	movf	___flpack@arg,w,c
  8381  001E7A  1005               	iorwf	___flpack@arg+1,w,c
  8382  001E7C  1006               	iorwf	___flpack@arg+2,w,c
  8383  001E7E  1007               	iorwf	___flpack@arg+3,w,c
  8384  001E80  E107               	bnz	l3576
  8385  001E82                     l779:
  8386  001E82  6A04               	clrf	?___flpack,c
  8387  001E84  6A05               	clrf	?___flpack+1,c
  8388  001E86  6A06               	clrf	?___flpack+2,c
  8389  001E88  6A07               	clrf	?___flpack+3,c
  8390  001E8A  0012               	return	
  8391  001E8C                     l3574:
  8392  001E8C  2A08               	incf	___flpack@exp,f,c
  8393  001E8E  D84D               	call	PL38	;call to abstracted procedure
  8394  001E90                     l3576:
  8395  001E90  6A0A               	clrf	??___flpack& (0+255),c
  8396  001E92  6A0B               	clrf	(??___flpack+1)& (0+255),c
  8397  001E94  6A0C               	clrf	(??___flpack+2)& (0+255),c
  8398  001E96  0EFE               	movlw	254
  8399  001E98  1407               	andwf	___flpack@arg+3,w,c
  8400  001E9A  6E0D               	movwf	(??___flpack+3)& (0+255),c
  8401  001E9C  500A               	movf	??___flpack,w,c
  8402  001E9E  100B               	iorwf	??___flpack+1,w,c
  8403  001EA0  100C               	iorwf	??___flpack+2,w,c
  8404  001EA2  100D               	iorwf	??___flpack+3,w,c
  8405  001EA4  E008               	bz	l784
  8406  001EA6  D7F2               	goto	l3574
  8407  001EA8                     l3578:
  8408  001EA8  2A08               	incf	___flpack@exp,f,c
  8409  001EAA  2A04               	incf	___flpack@arg,f,c
  8410  001EAC  0E00               	movlw	0
  8411  001EAE  2205               	addwfc	___flpack@arg+1,f,c
  8412  001EB0  2206               	addwfc	___flpack@arg+2,f,c
  8413  001EB2  2207               	addwfc	___flpack@arg+3,f,c
  8414  001EB4  D83A               	call	PL38	;call to abstracted procedure
  8415  001EB6                     l784:
  8416  001EB6  6A0A               	clrf	??___flpack& (0+255),c
  8417  001EB8  6A0B               	clrf	(??___flpack+1)& (0+255),c
  8418  001EBA  6A0C               	clrf	(??___flpack+2)& (0+255),c
  8419  001EBC  5007               	movf	___flpack@arg+3,w,c
  8420  001EBE  6E0D               	movwf	(??___flpack+3)& (0+255),c
  8421  001EC0  500A               	movf	??___flpack,w,c
  8422  001EC2  100B               	iorwf	??___flpack+1,w,c
  8423  001EC4  100C               	iorwf	??___flpack+2,w,c
  8424  001EC6  100D               	iorwf	??___flpack+3,w,c
  8425  001EC8  E007               	bz	l3586
  8426  001ECA  D7EE               	goto	l3578
  8427  001ECC                     l3584:
  8428  001ECC  0608               	decf	___flpack@exp,f,c
  8429  001ECE  90D8               	bcf	status,0,c
  8430  001ED0  3604               	rlcf	___flpack@arg,f,c
  8431  001ED2  3605               	rlcf	___flpack@arg+1,f,c
  8432  001ED4  3606               	rlcf	___flpack@arg+2,f,c
  8433  001ED6  3607               	rlcf	___flpack@arg+3,f,c
  8434  001ED8                     l3586:
  8435  001ED8  BE06               	btfsc	___flpack@arg+2,7,c
  8436  001EDA  D003               	goto	l791
  8437  001EDC  0E02               	movlw	2
  8438  001EDE  6008               	cpfslt	___flpack@exp,c
  8439  001EE0  D7F5               	goto	l3584
  8440  001EE2                     l791:
  8441  001EE2  B008               	btfsc	___flpack@exp,0,c
  8442  001EE4  D002               	goto	l792
  8443  001EE6  0E7F               	movlw	127
  8444  001EE8  1606               	andwf	___flpack@arg+2,f,c
  8445  001EEA                     l792:
  8446  001EEA  90D8               	bcf	status,0,c
  8447  001EEC  3208               	rrcf	___flpack@exp,f,c
  8448  001EEE  C008  F00A         	movff	___flpack@exp,??___flpack
  8449  001EF2  6A0B               	clrf	(??___flpack+1)& (0+255),c
  8450  001EF4  6A0C               	clrf	(??___flpack+2)& (0+255),c
  8451  001EF6  6A0D               	clrf	(??___flpack+3)& (0+255),c
  8452  001EF8  C00A  F00D         	movff	??___flpack,??___flpack+3
  8453  001EFC  6A0C               	clrf	??___flpack+2,c
  8454  001EFE  6A0B               	clrf	??___flpack+1,c
  8455  001F00  6A0A               	clrf	??___flpack,c
  8456  001F02  500A               	movf	??___flpack,w,c
  8457  001F04  1204               	iorwf	___flpack@arg,f,c
  8458  001F06  500B               	movf	??___flpack+1,w,c
  8459  001F08  1205               	iorwf	___flpack@arg+1,f,c
  8460  001F0A  500C               	movf	??___flpack+2,w,c
  8461  001F0C  1206               	iorwf	___flpack@arg+2,f,c
  8462  001F0E  500D               	movf	??___flpack+3,w,c
  8463  001F10  1207               	iorwf	___flpack@arg+3,f,c
  8464  001F12  5009               	movf	___flpack@sign,w,c
  8465  001F14  A4D8               	btfss	status,2,c
  8466  001F16  8E07               	bsf	___flpack@arg+3,7,c
  8467  001F18  C004  F004         	movff	___flpack@arg,?___flpack
  8468  001F1C  C005  F005         	movff	___flpack@arg+1,?___flpack+1
  8469  001F20  C006  F006         	movff	___flpack@arg+2,?___flpack+2
  8470  001F24  C007  F007         	movff	___flpack@arg+3,?___flpack+3
  8471  001F28  0012               	return		;funcret
  8472  001F2A                     __end_of___flpack:
  8473                           	opt stack 0
  8474  001F2A                     PL38:
  8475                           	opt stack 27
  8476  001F2A  90D8               	bcf	status,0,c
  8477  001F2C  3207               	rrcf	___flpack@arg+3,f,c
  8478  001F2E  3206               	rrcf	___flpack@arg+2,f,c
  8479  001F30  3205               	rrcf	___flpack@arg+1,f,c
  8480  001F32  3204               	rrcf	___flpack@arg,f,c
  8481  001F34  0012               	return	
  8482  001F36                     __end_ofPL38:
  8483                           	opt stack 0
  8484                           tblptru	equ	0xFF8
  8485                           tblptrh	equ	0xFF7
  8486                           tblptrl	equ	0xFF6
  8487                           tablat	equ	0xFF5
  8488                           prodl	equ	0xFF3
  8489                           intcon	equ	0xFF2
  8490                           intcon2	equ	0xFF1
  8491                           postinc0	equ	0xFEE
  8492                           wreg	equ	0xFE8
  8493                           postdec1	equ	0xFE5
  8494                           fsr1l	equ	0xFE1
  8495                           indf2	equ	0xFDF
  8496                           postinc2	equ	0xFDE
  8497                           postdec2	equ	0xFDD
  8498                           fsr2h	equ	0xFDA
  8499                           fsr2l	equ	0xFD9
  8500                           status	equ	0xFD8
  8501                           
  8502 ;; *************** function _global_int *****************
  8503 ;; Defined at:
  8504 ;;		line 77 in file "../../../LC-meter.c"
  8505 ;; Parameters:    Size  Location     Type
  8506 ;;		None
  8507 ;; Auto vars:     Size  Location     Type
  8508 ;;		None
  8509 ;; Return value:  Size  Location     Type
  8510 ;;		None               void
  8511 ;; Registers used:
  8512 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8513 ;; Tracked objects:
  8514 ;;		On entry : 0/0
  8515 ;;		On exit  : 0/0
  8516 ;;		Unchanged: 0/0
  8517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8518 ;;      Params:         0       0       0       0       0       0       0       0       0
  8519 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8520 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8521 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8522 ;;Total ram usage:        3 bytes
  8523 ;; Hardware stack levels used:    1
  8524 ;; This function calls:
  8525 ;;		Nothing
  8526 ;; This function is called by:
  8527 ;;		Interrupt level 2
  8528 ;; This function uses a non-reentrant model
  8529 ;;
  8530                           
  8531                           	psect	intcode
  8532  000008                     __pintcode:
  8533                           	opt stack 0
  8534  000008                     _global_int:
  8535                           	opt stack 23
  8536                           
  8537                           ;incstack = 0
  8538  000008  CFD9 F002          	movff	fsr2l,??_global_int+1
  8539  00000C  CFDA F003          	movff	fsr2h,??_global_int+2
  8540                           
  8541                           ;LC-meter.c: 82: if(PIR1 & 0x02) {
  8542  000010  A29E               	btfss	3998,1,c	;volatile
  8543  000012  D03C               	goto	i2l3474
  8544                           
  8545                           ;LC-meter.c: 84: bres += 256;
  8546  000014  0100               	movlb	0	; () banked
  8547  000016  2BEE               	incf	(_bres+1)& (0+255),f,b	;volatile
  8548                           
  8549                           ;LC-meter.c: 86: if(bres >= 5000) {
  8550  000018  0E88               	movlw	136
  8551  00001A  5DED               	subwf	_bres& (0+255),w,b	;volatile
  8552  00001C  0E13               	movlw	19
  8553  00001E  59EE               	subwfb	(_bres+1)& (0+255),w,b	;volatile
  8554  000020  E334               	bnc	i2l3472
  8555                           
  8556                           ; BSR set to: 0
  8557                           ;LC-meter.c: 87: bres -= 5000;
  8558  000022  0E88               	movlw	136
  8559  000024  5FED               	subwf	_bres& (0+255),f,b	;volatile
  8560  000026  0E13               	movlw	19
  8561  000028  5BEE               	subwfb	(_bres+1)& (0+255),f,b	;volatile
  8562                           
  8563                           ; BSR set to: 0
  8564                           ;LC-meter.c: 88: msecpart++;
  8565  00002A  4BEF               	infsnz	_msecpart& (0+255),f,b	;volatile
  8566  00002C  2BF0               	incf	(_msecpart+1)& (0+255),f,b	;volatile
  8567                           
  8568                           ; BSR set to: 0
  8569                           ;LC-meter.c: 89: msecs++;
  8570  00002E  2BC0               	incf	_msecs& (0+255),f,b	;volatile
  8571  000030  0E00               	movlw	0
  8572  000032  23C1               	addwfc	(_msecs+1)& (0+255),f,b	;volatile
  8573  000034  23C2               	addwfc	(_msecs+2)& (0+255),f,b	;volatile
  8574  000036  23C3               	addwfc	(_msecs+3)& (0+255),f,b	;volatile
  8575                           
  8576                           ;LC-meter.c: 91: LATC &= ~0b00000100; LATC |= (!!((blink > 200))) << 2;;
  8577  000038  948B               	bcf	3979,2,c	;volatile
  8578                           
  8579                           ; BSR set to: 0
  8580  00003A  51CD               	movf	(_blink+1)& (0+255),w,b	;volatile
  8581  00003C  E103               	bnz	i2u253_41
  8582  00003E  0EC9               	movlw	201
  8583  000040  5DCC               	subwf	_blink& (0+255),w,b	;volatile
  8584  000042  E303               	bnc	i2u253_40
  8585  000044                     i2u253_41:
  8586  000044  6A01               	clrf	??_global_int& (0+255),c
  8587  000046  2A01               	incf	??_global_int& (0+255),f,c
  8588  000048  D001               	goto	i2u254_48
  8589  00004A                     i2u253_40:
  8590  00004A  6A01               	clrf	??_global_int& (0+255),c
  8591  00004C                     i2u254_48:
  8592  00004C  90D8               	bcf	status,0,c
  8593  00004E  3601               	rlcf	??_global_int,f,c
  8594  000050  90D8               	bcf	status,0,c
  8595  000052  3401               	rlcf	??_global_int,w,c
  8596  000054  128B               	iorwf	3979,f,c	;volatile
  8597                           
  8598                           ;LC-meter.c: 92: if(blink >= 400)
  8599  000056  0E90               	movlw	144
  8600  000058  0100               	movlb	0	; () banked
  8601  00005A  5DCC               	subwf	_blink& (0+255),w,b	;volatile
  8602  00005C  0E01               	movlw	1
  8603  00005E  59CD               	subwfb	(_blink+1)& (0+255),w,b	;volatile
  8604  000060  E304               	bnc	i2l3466
  8605                           
  8606                           ; BSR set to: 0
  8607                           ;LC-meter.c: 93: blink -= 400;
  8608  000062  0E90               	movlw	144
  8609  000064  5FCC               	subwf	_blink& (0+255),f,b	;volatile
  8610  000066  0E01               	movlw	1
  8611  000068  5BCD               	subwfb	(_blink+1)& (0+255),f,b	;volatile
  8612  00006A                     i2l3466:
  8613                           
  8614                           ; BSR set to: 0
  8615                           ;LC-meter.c: 94: ++blink;
  8616  00006A  4BCC               	infsnz	_blink& (0+255),f,b	;volatile
  8617  00006C  2BCD               	incf	(_blink+1)& (0+255),f,b	;volatile
  8618                           
  8619                           ; BSR set to: 0
  8620                           ;LC-meter.c: 97: if(msecpart >= 1000) {
  8621  00006E  0EE8               	movlw	232
  8622  000070  5DEF               	subwf	_msecpart& (0+255),w,b	;volatile
  8623  000072  0E03               	movlw	3
  8624  000074  59F0               	subwfb	(_msecpart+1)& (0+255),w,b	;volatile
  8625  000076  E309               	bnc	i2l3472
  8626                           
  8627                           ; BSR set to: 0
  8628                           ;LC-meter.c: 99: seconds++;
  8629  000078  2BC4               	incf	_seconds& (0+255),f,b	;volatile
  8630  00007A  0E00               	movlw	0
  8631  00007C  23C5               	addwfc	(_seconds+1)& (0+255),f,b	;volatile
  8632  00007E  23C6               	addwfc	(_seconds+2)& (0+255),f,b	;volatile
  8633  000080  23C7               	addwfc	(_seconds+3)& (0+255),f,b	;volatile
  8634                           
  8635                           ;LC-meter.c: 100: msecpart -= 1000;
  8636  000082  0EE8               	movlw	232
  8637  000084  5FEF               	subwf	_msecpart& (0+255),f,b	;volatile
  8638  000086  0E03               	movlw	3
  8639  000088  5BF0               	subwfb	(_msecpart+1)& (0+255),f,b	;volatile
  8640  00008A                     i2l3472:
  8641                           
  8642                           ; BSR set to: 0
  8643                           ;LC-meter.c: 101: }
  8644                           ;LC-meter.c: 102: }
  8645                           ;LC-meter.c: 104: PIR1 &= ~0b10;
  8646  00008A  929E               	bcf	3998,1,c	;volatile
  8647  00008C                     i2l3474:
  8648                           
  8649                           ;LC-meter.c: 105: }
  8650                           ;LC-meter.c: 107: if(RCIF) { rxfifo[rxiptr] = RCREG; ser_tmp = (rxiptr + 1) & ((uint8_t)
      +                          16 - 1); if(ser_tmp != rxoptr) rxiptr = ser_tmp; }; if(TXIF && TXIE) { TXREG = txfifo[tx
      +                          optr]; ++txoptr; txoptr &= ((uint8_t)16 - 1); if(txoptr == txiptr) { TXIE = 0; }; TXIF =
      +                           0; 
  8651  00008C  AA9E               	btfss	3998,5,c	;volatile
  8652  00008E  D011               	goto	i2l530
  8653  000090  0E00               	movlw	low _rxfifo
  8654  000092  0100               	movlb	0	; () banked
  8655  000094  25D1               	addwf	_rxiptr& (0+255),w,b	;volatile
  8656  000096  6ED9               	movwf	fsr2l,c
  8657  000098  6ADA               	clrf	fsr2h,c
  8658  00009A  0E01               	movlw	high _rxfifo
  8659  00009C  22DA               	addwfc	fsr2h,f,c
  8660  00009E  CFAE FFDF          	movff	4014,indf2	;volatile
  8661                           
  8662                           ; BSR set to: 0
  8663  0000A2  29D1               	incf	_rxiptr& (0+255),w,b	;volatile
  8664  0000A4  0B0F               	andlw	15
  8665  0000A6  6FD3               	movwf	_ser_tmp& (0+255),b
  8666                           
  8667                           ; BSR set to: 0
  8668  0000A8  51D2               	movf	_rxoptr& (0+255),w,b	;volatile
  8669  0000AA  19D3               	xorwf	_ser_tmp& (0+255),w,b
  8670  0000AC  A4D8               	btfss	status,2,c
  8671                           
  8672                           ; BSR set to: 0
  8673  0000AE  C0D3  F0D1         	movff	_ser_tmp,_rxiptr	;volatile
  8674  0000B2                     i2l530:
  8675  0000B2  B89E               	btfsc	3998,4,c	;volatile
  8676  0000B4  A89D               	btfss	3997,4,c	;volatile
  8677  0000B6  D010               	goto	i2l534
  8678  0000B8  0E10               	movlw	low _txfifo
  8679  0000BA  245C               	addwf	_txoptr,w,c	;volatile
  8680  0000BC  6ED9               	movwf	fsr2l,c
  8681  0000BE  6ADA               	clrf	fsr2h,c
  8682  0000C0  0E01               	movlw	high _txfifo
  8683  0000C2  22DA               	addwfc	fsr2h,f,c
  8684  0000C4  50DF               	movf	indf2,w,c
  8685  0000C6  6EAD               	movwf	4013,c	;volatile
  8686  0000C8  2A5C               	incf	_txoptr,f,c	;volatile
  8687  0000CA  0E0F               	movlw	15
  8688  0000CC  165C               	andwf	_txoptr,f,c	;volatile
  8689  0000CE  505B               	movf	_txiptr,w,c	;volatile
  8690  0000D0  185C               	xorwf	_txoptr,w,c	;volatile
  8691  0000D2  B4D8               	btfsc	status,2,c
  8692  0000D4  989D               	bcf	3997,4,c	;volatile
  8693  0000D6  989E               	bcf	3998,4,c	;volatile
  8694  0000D8                     i2l534:
  8695  0000D8  C003  FFDA         	movff	??_global_int+2,fsr2h
  8696  0000DC  C002  FFD9         	movff	??_global_int+1,fsr2l
  8697  0000E0  0011               	retfie		f
  8698  0000E2                     __end_of_global_int:
  8699                           	opt stack 0
  8700                           tblptru	equ	0xFF8
  8701                           tblptrh	equ	0xFF7
  8702                           tblptrl	equ	0xFF6
  8703                           tablat	equ	0xFF5
  8704                           prodl	equ	0xFF3
  8705                           intcon	equ	0xFF2
  8706                           intcon2	equ	0xFF1
  8707                           postinc0	equ	0xFEE
  8708                           wreg	equ	0xFE8
  8709                           postdec1	equ	0xFE5
  8710                           fsr1l	equ	0xFE1
  8711                           indf2	equ	0xFDF
  8712                           postinc2	equ	0xFDE
  8713                           postdec2	equ	0xFDD
  8714                           fsr2h	equ	0xFDA
  8715                           fsr2l	equ	0xFD9
  8716                           status	equ	0xFD8
  8717                           tblptru	equ	0xFF8
  8718                           tblptrh	equ	0xFF7
  8719                           tblptrl	equ	0xFF6
  8720                           tablat	equ	0xFF5
  8721                           prodl	equ	0xFF3
  8722                           intcon	equ	0xFF2
  8723                           intcon2	equ	0xFF1
  8724                           postinc0	equ	0xFEE
  8725                           wreg	equ	0xFE8
  8726                           postdec1	equ	0xFE5
  8727                           fsr1l	equ	0xFE1
  8728                           indf2	equ	0xFDF
  8729                           postinc2	equ	0xFDE
  8730                           postdec2	equ	0xFDD
  8731                           fsr2h	equ	0xFDA
  8732                           fsr2l	equ	0xFD9
  8733                           status	equ	0xFD8
  8734                           
  8735                           	psect	rparam
  8736  0000                     tblptru	equ	0xFF8
  8737                           tblptrh	equ	0xFF7
  8738                           tblptrl	equ	0xFF6
  8739                           tablat	equ	0xFF5
  8740                           prodl	equ	0xFF3
  8741                           intcon	equ	0xFF2
  8742                           intcon2	equ	0xFF1
  8743                           postinc0	equ	0xFEE
  8744                           wreg	equ	0xFE8
  8745                           postdec1	equ	0xFE5
  8746                           fsr1l	equ	0xFE1
  8747                           indf2	equ	0xFDF
  8748                           postinc2	equ	0xFDE
  8749                           postdec2	equ	0xFDD
  8750                           fsr2h	equ	0xFDA
  8751                           fsr2l	equ	0xFD9
  8752                           status	equ	0xFD8
  8753                           tblptru	equ	0xFF8
  8754                           tblptrh	equ	0xFF7
  8755                           tblptrl	equ	0xFF6
  8756                           tablat	equ	0xFF5
  8757                           prodl	equ	0xFF3
  8758                           intcon	equ	0xFF2
  8759                           intcon2	equ	0xFF1
  8760                           postinc0	equ	0xFEE
  8761                           wreg	equ	0xFE8
  8762                           postdec1	equ	0xFE5
  8763                           fsr1l	equ	0xFE1
  8764                           indf2	equ	0xFDF
  8765                           postinc2	equ	0xFDE
  8766                           postdec2	equ	0xFDD
  8767                           fsr2h	equ	0xFDA
  8768                           fsr2l	equ	0xFD9
  8769                           status	equ	0xFD8


Data Sizes:
    Strings     145
    Constant    76
    Data        4
    BSS         84
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     89      92
    BANK0           160     88     149
    BANK1           256      0      32
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(1) Largest target is 40
		 -> exp@coeff(CODE[40]), log@coeff(CODE[36]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(BANK0[2]), 

    put_str@s	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_15(CODE[13]), STR_6(CODE[10]), STR_5(CODE[6]), STR_3(CODE[15]), 
		 -> STR_1(CODE[12]), 

    print_unit@units	PTR const unsigned char [8] size(1) Largest target is 3
		 -> STR_23(CODE[3]), STR_22(CODE[3]), STR_21(CODE[3]), STR_20(CODE[3]), 
		 -> STR_19(CODE[3]), STR_18(CODE[3]), STR_17(CODE[3]), STR_16(CODE[2]), 

    ser_puts@s	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_34(CODE[3]), STR_29(CODE[6]), STR_24(CODE[3]), STR_14(CODE[3]), 
		 -> STR_13(CODE[5]), STR_12(CODE[3]), STR_11(CODE[8]), STR_10(CODE[6]), 
		 -> STR_9(CODE[6]), STR_8(CODE[6]), STR_7(CODE[5]), STR_4(CODE[3]), 
		 -> STR_2(CODE[3]), 

    lcd_puts@string	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_33(CODE[5]), STR_32(CODE[6]), STR_31(CODE[7]), STR_30(CODE[7]), 
		 -> STR_28(CODE[10]), STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[6]), 


Critical Paths under _main in COMRAM

    _measure_inductance->___fltol
    _measure_capacitance->___fltol
    _print_unit->_lcd_gotoxy
    _print_reading->_format_number
    _format_xint32->_format_number
    _format_double->___fltol
    _pow->___fltol
    _exp->___fltol
    _ldexp->_eval_poly
    _floor->___fltol
    ___fltol->_log10
    ___altofl->___fltol
    ___flsub->___fladd
    ___fldiv->___flpack
    ___lltofl->___flpack
    _log10->_log
    _log->_eval_poly
    _eval_poly->___fladd
    ___flmul->___fldiv
    ___fladd->___flmul
    ___awtofl->___flpack
    _lcd_begin->_lcd_command
    _indicator->_lcd_gotoxy
    _lcd_puts->_lcd_send
    _calibrate->___lwtofl
    _ser_puts->_ser_putch
    _measure_freq->_format_number
    _put_str->_output_putch
    _output_putch->_lcd_send
    _lcd_gotoxy->_lcd_command
    _format_number->___lwdiv
    _lcd_clear->_lcd_command
    _lcd_command->_lcd_send
    _lcd_send->_lcd_write4bits
    ___lwtofl->_measure_freq

Critical Paths under _global_int in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_measure_capacitance
    _measure_inductance->___fltol
    _measure_capacitance->_format_double
    _format_double->_pow
    _pow->_exp
    _exp->_floor
    _floor->___altofl
    ___altofl->___fltol

Critical Paths under _global_int in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _global_int in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _global_int in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _global_int in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _global_int in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _global_int in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _global_int in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _global_int in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  382942
                          _calibrate
                          _delay10ms
                      _format_double
                          _indicator
                          _lcd_begin
                          _lcd_clear
                         _lcd_gotoxy
                           _lcd_init
                           _lcd_puts
                _measure_capacitance
                 _measure_inductance
                           _ser_init
                           _ser_puts
                        _timer0_init
                        _timer2_init
 ---------------------------------------------------------------------------------
 (1) _timer2_init                                          4     4      0      90
                                              3 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _timer0_init                                         10    10      0     251
                                              3 COMRAM    10    10      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _measure_inductance                                  55    55      0   37031
                                              2 BANK0     43    43      0
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___lwtofl
                         _lcd_gotoxy
                       _measure_freq
                      _print_reading
                         _print_unit
                            _put_str
 ---------------------------------------------------------------------------------
 (1) _measure_capacitance                                 19    19      0  183737
                                             69 BANK0     19    19      0
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___lwtofl
                      _format_double
                      _format_xint32
                         _lcd_gotoxy
                       _measure_freq
                      _print_reading
                         _print_unit
                            _put_str
                          _ser_putch
                           _ser_puts
 ---------------------------------------------------------------------------------
 (2) _print_unit                                           3     3      0    1996
                                             13 COMRAM     2     2      0
                         _lcd_gotoxy
                           _ser_puts
 ---------------------------------------------------------------------------------
 (2) _print_reading                                        6     4      2    6020
                                             53 COMRAM     6     4      2
                            ___lwdiv
                            ___lwmod
                      _format_number
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (2) _format_xint32                                        4     0      4    2920
                                             53 COMRAM     4     0      4
                       _buffer_putch
                      _format_number
 ---------------------------------------------------------------------------------
 (2) _format_double                                       20    16      4  143763
                                             49 BANK0     20    16      4
                           ___awtofl
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                       _buffer_putch
                              _floor
                              _log10
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                 21    13      8   80457
                                             28 BANK0     21    13      8
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___lltofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _exp                                                 11     7      4   43098
                                             17 BANK0     11     7      4
                           ___awtofl
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (5) _ldexp                                                8     2      6     354
                                             67 COMRAM     8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (5) _floor                                               10     6      4   10114
                                              7 BANK0     10     6      4
                           ___altofl
                            ___fladd
                            ___fldiv (ARG)
                             ___flge
                            ___fltol
                              _frexp
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     882
                                             81 COMRAM     8     4      4
                                              0 BANK0      2     2      0
                            ___fldiv (ARG)
                              _log10 (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                               8     0      8    1594
                                              3 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (6) ___altofl                                             5     1      4    2446
                                              2 BANK0      5     1      4
                           ___flpack
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    5179
                                             55 COMRAM     8     0      8
                           ___awtofl (ARG)
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4     204
                                              3 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             15     7      8    3931
                                             13 COMRAM    15     7      8
                           ___flpack
 ---------------------------------------------------------------------------------
 (4) ___lltofl                                             4     0      4    2344
                                             13 COMRAM     4     0      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (3) _log10                                                8     4      4   31773
                                             73 COMRAM     8     4      4
                            ___flmul
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  6     2      4   25256
                                             67 COMRAM     6     2      4
                           ___awtofl
                            ___fladd
                            ___flmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                7     2      5     436
                                              3 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           12     5      7   11199
                                             55 COMRAM    12     5      7
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             15     7      8    6342
                                             28 COMRAM    15     7      8
                           ___awtofl (ARG)
                            ___fldiv (ARG)
                           ___flpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             12     4      8    4213
                                             43 COMRAM    12     4      8
                           ___awtofl (ARG)
                            ___flmul (ARG)
                           ___flpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awtofl                                             9     5      4    2686
                                             13 COMRAM     5     1      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             3     3      0      46
                                              3 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcd_begin                                            3     2      1     685
                                              7 COMRAM     3     2      1
                        _lcd_command
                     _lcd_write4bits
 ---------------------------------------------------------------------------------
 (1) _indicator                                            1     1      0    2406
                                             13 COMRAM     1     1      0
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (3) _lcd_puts                                             3     3      0     806
                                              6 COMRAM     3     3      0
                           _lcd_send
 ---------------------------------------------------------------------------------
 (1) _calibrate                                            1     1      0   11609
                                             62 COMRAM     1     1      0
                           ___lwtofl
                          _delay10ms
                          _lcd_clear
                         _lcd_gotoxy
                           _lcd_send
                       _measure_freq
                            _put_str
                           _ser_puts
 ---------------------------------------------------------------------------------
 (1) _ser_puts                                             1     1      0     418
                                              4 COMRAM     1     1      0
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _measure_freq                                         5     3      2    5063
                                             53 COMRAM     5     3      2
                      _format_number
                         _lcd_gotoxy
                            _put_str
                     _timer0_read_ps
 ---------------------------------------------------------------------------------
 (3) _timer0_read_ps                                       7     5      2     114
                                              3 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _put_str                                              4     4      0     791
                                              7 COMRAM     4     4      0
                       _output_putch
 ---------------------------------------------------------------------------------
 (3) _output_putch                                         1     1      0     566
                                              6 COMRAM     1     1      0
                           _lcd_send
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _ser_putch                                            1     1      0      22
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _lcd_gotoxy                                           6     5      1    1578
                                              7 COMRAM     6     5      1
                        _lcd_command
 ---------------------------------------------------------------------------------
 (3) _format_number                                       43    39      4    2535
                                             10 COMRAM    43    39      4
                            ___lwdiv
                            ___lwmod
                       _buffer_putch
 ---------------------------------------------------------------------------------
 (4) _buffer_putch                                         3     3      0      22
                                              3 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     451
                                              3 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     454
                                              3 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            1     1      0     522
                                              7 COMRAM     1     1      0
                        _lcd_command
 ---------------------------------------------------------------------------------
 (4) _lcd_command                                          1     1      0     522
                                              6 COMRAM     1     1      0
                           _lcd_send
 ---------------------------------------------------------------------------------
 (4) _lcd_send                                             2     1      1     500
                                              4 COMRAM     2     1      1
                     _lcd_write4bits
 ---------------------------------------------------------------------------------
 (5) _lcd_write4bits                                       1     1      0      22
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _delay10ms                                            1     1      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4    2669
                                             58 COMRAM     4     0      4
                           ___flpack
                       _measure_freq (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6    2248
                                              3 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _global_int                                           3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calibrate
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _put_str
           _output_putch
             _lcd_send
               _lcd_write4bits
             _ser_putch
         _timer0_read_ps
     _delay10ms
     _lcd_clear
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_send
       _lcd_write4bits
     _measure_freq
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _put_str
         _output_putch
           _lcd_send
             _lcd_write4bits
           _ser_putch
       _timer0_read_ps
     _put_str
       _output_putch
         _lcd_send
           _lcd_write4bits
         _ser_putch
     _ser_puts
       _ser_putch
   _delay10ms
   _format_double
     ___awtofl
       ___flpack
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     _buffer_putch
     _floor
       ___altofl
         ___flpack
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
       ___fladd
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___fldiv (ARG)
         ___flpack
       ___flge (ARG)
       ___fltol (ARG)
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       _frexp (ARG)
     _log10
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       _log
         ___awtofl
           ___flpack
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _frexp
     _pow
       ___flge
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       ___flneg
       ___fltol
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       ___lltofl
         ___flpack
       _exp
         ___awtofl
           ___flpack
         ___fldiv
           ___flpack
         ___flge
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         ___flsub
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _floor
           ___altofl
             ___flpack
             ___fltol (ARG)
               ___fldiv (ARG)
                 ___flpack
               _log10 (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _log
                   ___awtofl
                     ___flpack
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___fladd
                       ___awtofl (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                   _frexp
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flge (ARG)
           ___fltol (ARG)
             ___fldiv (ARG)
               ___flpack
             _log10 (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
           _frexp (ARG)
         _ldexp
           _eval_poly (ARG)
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
         _log (ARG)
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
       _log
         ___awtofl
           ___flpack
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _frexp
   _indicator
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_puts
       _lcd_send
         _lcd_write4bits
   _lcd_begin
     _lcd_command
       _lcd_send
         _lcd_write4bits
     _lcd_write4bits
   _lcd_clear
     _lcd_command
       _lcd_send
         _lcd_write4bits
   _lcd_gotoxy
     _lcd_command
       _lcd_send
         _lcd_write4bits
   _lcd_init
   _lcd_puts
     _lcd_send
       _lcd_write4bits
   _measure_capacitance
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _put_str
           _output_putch
             _lcd_send
               _lcd_write4bits
             _ser_putch
         _timer0_read_ps
     _format_double
       ___awtofl
         ___flpack
       ___fldiv
         ___flpack
       ___flge
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       ___flsub
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
       ___fltol
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       _buffer_putch
       _floor
         ___altofl
           ___flpack
           ___fltol (ARG)
             ___fldiv (ARG)
               ___flpack
             _log10 (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flge (ARG)
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
         _frexp (ARG)
       _log10
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
       _pow
         ___flge
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         ___fltol
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
         ___lltofl
           ___flpack
         _exp
           ___awtofl
             ___flpack
           ___fldiv
             ___flpack
           ___flge
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg
           ___flsub
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           ___fltol
             ___fldiv (ARG)
               ___flpack
             _log10 (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _floor
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 _log10 (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   _log
                     ___awtofl
                       ___flpack
                     ___fladd
                       ___awtofl (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     _eval_poly
                       ___fladd
                         ___awtofl (ARG)
                           ___flpack
                         ___flmul (ARG)
                           ___awtofl (ARG)
                             ___flpack
                           ___fldiv (ARG)
                             ___flpack
                           ___flpack (ARG)
                           _frexp (ARG)
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flmul
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                     _frexp
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flge (ARG)
             ___fltol (ARG)
               ___fldiv (ARG)
                 ___flpack
               _log10 (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _log
                   ___awtofl
                     ___flpack
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___fladd
                       ___awtofl (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                   _frexp
             _frexp (ARG)
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
           _log (ARG)
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     _format_xint32
       _buffer_putch
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _measure_freq
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _put_str
         _output_putch
           _lcd_send
             _lcd_write4bits
           _ser_putch
       _timer0_read_ps
     _print_reading
       ___lwdiv
       ___lwmod
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _lcd_puts
         _lcd_send
           _lcd_write4bits
     _print_unit
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _ser_puts
         _ser_putch
     _put_str
       _output_putch
         _lcd_send
           _lcd_write4bits
         _ser_putch
     _ser_putch
     _ser_puts
       _ser_putch
   _measure_inductance
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _put_str
           _output_putch
             _lcd_send
               _lcd_write4bits
             _ser_putch
         _timer0_read_ps
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _measure_freq
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _put_str
         _output_putch
           _lcd_send
             _lcd_write4bits
           _ser_putch
       _timer0_read_ps
     _print_reading
       ___lwdiv
       ___lwmod
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _lcd_puts
         _lcd_send
           _lcd_write4bits
     _print_unit
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _ser_puts
         _ser_putch
     _put_str
       _output_putch
         _lcd_send
           _lcd_write4bits
         _ser_putch
   _ser_init
   _ser_puts
     _ser_putch
   _timer0_init
   _timer2_init

 _global_int (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      20       8       12.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     58      95       5       93.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     59      5C       1       96.8%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     111       6        0.0%
DATA                 0      0     111       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Sep 17 06:45:00 2019

                ___altofl@sign 0066                   ___fldiv@cntr 001A                   ___fldiv@sign 001C  
                           PL2 0D0A                             PL4 10A2                             PL6 10C4  
                           PL8 0D2C                             _F1 00E5                             _F2 00B8  
                           _F3 00BC                   ___flpack@arg 0004                            PL10 10E6  
                          PL20 110E                            PL12 17DC                            PL30 1142  
                          PL22 1120                            PL14 207E                            PL40 28DC  
                          PL32 27AC                            PL24 1908                            PL16 1E54  
                          PL34 1152                            PL26 1132                            PL18 10FC  
                          PL36 1E66                            PL28 27D6                            PL38 1F2A  
                 ___flpack@exp 0008                            l206 24C8                            l160 277C  
                          l158 2778                            l800 16B8                            l539 1AEE  
                          l804 16E0                            l815 1778                            l840 249E  
                          l791 1EE2                            l792 1EEA                            l784 1EB6  
                          l779 1E82                            l883 1B3A                            l886 1BE8  
                          _GIE 007F97                 lcd_begin@lines 000A                            _RX9 007D5E  
                          _TX9 007D66                            _exp 1160                            _log 17F0  
                          _pow 137C                            wreg 000FE8                   __CFG_FOSC$XT 000000  
           timer0_read_ps@prev 0008                   ___flmul@cntr 002A               _format_number$68 0031  
                 ___flmul@sign 002B         __end_of_lcd_write4bits 28A8                  ___flpack@sign 0009  
                 ___fltol@exp1 0061                           l1115 2592                           l1125 265C  
                         l3000 27A4                           l1157 14FC                           l3030 28D4  
                         l1182 1214                           l1183 136A                           l3034 27C4  
                         l3018 24E4                           l3026 28CC                           l3140 1CE6  
                         l3220 232E                           l3212 231A                           l3204 2306  
                         l3038 27CE                           l4006 1CBE                           l3222 2334  
                         l3214 2320                           l3206 230C                           l2600 2298  
                         l4114 0930                           l3234 2352                           l4210 1AEA  
                         l3148 1CF4                           l4124 0C6A                           l4132 0CAC  
                         l3236 2358                           l3228 2346                           l4204 1ADA  
                         l3174 1D78                           l3166 1D40                           l4062 0E7C  
                         l4134 0CB2                           l4128 0C88                           l4084 1006  
                         l4092 1046                           l3710 1E14                           l2750 28B6  
                         l2582 2488                           l3448 28FC                           l3624 16F2  
                         l3608 25B6                           l4088 1022                           l2674 290C  
                         l2834 2562                           l2922 20C0                           l2682 283A  
                         l3650 1746                           l3618 16CA                           l3810 1FAA  
                         l3802 1F7C                           l2676 290E                           l2836 256A  
                         l2932 20FC                           l2916 20A0                           l3644 172C  
                         l2588 24BA                           l2764 217C                           l3900 1336  
                         l3574 1E8C                           l2846 2588                           l2838 256E  
                         l2862 2652                           l2854 2634                           l2934 2102  
                         l3662 178E                           l3646 1738                           l3638 170C  
                         l3822 25F2                           l3750 2242                           l3742 222A  
                         l3726 21E6                           l2774 2194                           l2758 214C  
                         l3584 1ECC                           l3576 1E90                           l2856 263C  
                         l2936 2116                           l3832 2676                           l3656 1766  
                         l3648 1740                           l3840 2066                           l3752 224E  
                         l3728 21F0                           l3586 1ED8                           l3578 1EA8  
                         l2858 2640                           l2794 252A                           l3674 17AE  
                         l3658 1772                           l3682 1DC4                           l3850 17FE  
                         l3754 2252                           l3746 223A                           l2778 21A0  
                         l3922 13CA                           l3772 1B44                           l3932 1454  
                         l3916 13B0                           l3686 1DD8                           l3838 2000  
                         l3854 1812                           l3790 1F5E                           l3758 2266  
                         l3870 117C                           l2992 26C4                           l3776 1B60  
                         l3880 11E2                           l3928 142A                           l3698 1DFE  
                         l3786 1F4A                           l3962 166C                           l3946 1540  
                         l2996 2798                           l3876 11B0                           l3964 1672  
                         ?_exp 0071                           ?_log 0044                           ?_pow 007C  
                         STR_1 0869                           STR_2 089B                           STR_3 084D  
                         STR_4 089B                           STR_5 08B0                           STR_6 087F  
                         STR_7 08C0                           STR_8 089E                           STR_9 08A4  
                         _BRGH 007D62                           _CREN 007D5C                           _LATB 000F8A  
                         _LATC 000F8B                           u3040 1B4E                           _CCal 00E9  
                         u2408 2730                           u3250 1420                           u2390 272E  
                         u3407 1D16                           _PIE1 000F9D                           u3417 1D28  
                         u3507 1968                           u3427 1D34                           u3517 1978  
                         u3437 1D4E                           u3527 1988                           u3447 1D66  
                         u3537 1998                           u3457 1D9A                           u3547 19A8  
                         u3467 1922                           _PEIE 007F96                           u3557 19B8  
                         u3477 1938                           u3397 1CFA                           u3567 19C8  
                         u3487 1948                           u2960 220E                           u3577 2928  
                         u3497 1958                           u3587 2896                           _RCIF 007CF5  
                         u3597 28A0                           u2965 2204                           _PIR1 000F9E  
                         _TMR0 000FD6                           _TMR2 000FBC                           _SPEN 007D5F  
                         _TXIE 007CEC                           _TXIF 007CF4                           _TXEN 007D65  
                         _SYNC 007D64                  __CFG_FCMEN$ON 000000                   __CFG_WRTB$ON 000000  
                 __CFG_WRTC$ON 000000                           _bres 00ED                           _main 1A12  
                         fsr2h 000FDA                           fsr1l 000FE1                           indf2 000FDF  
                         fsr2l 000FD9                           exp@x 0071                           log@x 0044  
        __size_of_output_putch 0012                           pow@x 007C                           pow@y 0080  
                         prodl 000FF3     __end_of_measure_inductance 0D0A                           start 00E2  
          timer0_read_ps@count 0009                 ??_buffer_putch 0004                  __CFG_MCLRE$ON 000000  
                 ___param_bank 000010                _timer0_init$152 0004                _timer0_init$153 0006  
              _timer0_init$154 0008                _timer0_init$155 000A            lcd_write4bits@value 0004  
                 lcd_send@mode 0005                          ??_exp 005A                          ??_log 0048  
                        ??_pow 005A                  ___fltol@sign1 0060                __end_of___fladd 17DC  
                        ?_main 0001                __end_of___fldiv 1FE6                __end_of___flneg 28C8  
                        STR_10 08AA                          STR_11 0889                          STR_12 089B  
                        STR_20 08C9                          STR_21 08D2                          STR_13 08BB  
                        STR_14 089B                          STR_22 08CC                          STR_30 0891  
                        STR_23 08CF                          STR_15 085C                          STR_24 089B  
                        STR_25 0892                          STR_17 08D5                          STR_33 08B6  
                        STR_18 08DB                          STR_26 08C5                          STR_27 0894  
                        STR_19 08D8                          STR_28 0875                          STR_29 0898  
              __end_of___flmul 1E54                __end_of___flsub 2628                __end_of___fltol 2278  
                        _T0CON 000FD5                          _T2CON 000FBA                          _LATC7 007C5F  
              __end_of___lwdiv 259C                __end_of___lwmod 2666                          i2l530 00B2  
                        i2l534 00D8                          _RCREG 000FAE               lcd_begin@dotsize 0008  
                        _SPBRG 000FAF                          _PORTC 000F82                          _TRISA 000F92  
                        _TRISB 000F93                          _TRISC 000F94                          _TXREG 000FAD  
               __CFG_EBTR0$OFF 000000                 __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000  
                ___awtofl@sign 0012                 __CFG_EBTR3$OFF 000000                  __CFG_WRTD$OFF 000000  
                        _log10 23CC                          _blink 00CC                          _floor 1B08  
                        _ldexp 2138                          _frexp 2278                   _output_putch 2932  
              ?_lcd_write4bits 0001                          _msecs 00C0                          tablat 000FF5  
                        pow@yi 008D                format_number@di 0034                          status 000FD8  
              __end_of_put_str 27D6                ??_print_reading 0038                    exp@exponent 0079  
                  ldexp@newexp 0048                __initialization 2426                    log@exponent 0048  
                 __end_of_main 1B08               format_double@num 0091                  lcd_gotoxy@col 0009  
                lcd_gotoxy@row 0008                  ?_measure_freq 0036         __size_of_format_double 0188  
                       ??_main 005A                  lcd_send@value 0006            format_double@weight 009D  
                __activetblptr 000001         __size_of_format_number 00A8         __size_of_format_xint32 0034  
          lcd_init@fourbitmode 0004                         ?_log10 004A                         ?_floor 0067  
                       ?_ldexp 0044                         ?_frexp 0004               __end_of___altofl 25E4  
             __end_of___flpack 1F2A               __end_of___awtofl 26A0               __end_of___lltofl 2766  
               __CFG_WDTEN$OFF 000000                         i2l3472 008A                         i2l3466 006A  
                       i2l3474 008C                         _INTCON 000FF2               __end_of___lwtofl 2810  
                       _TRISC6 007CA6               __end_of_lcd_init 2792           __size_of_lcd_command 000C  
             __end_of_lcd_send 291C                         ___flge 2472               __end_of_lcd_puts 27AC  
                    ??___fladd 0034                      ??___fldiv 0016                      ??___flneg 0008  
               __CFG_STVREN$ON 000000                      ??___flmul 0025                      ??___flsub 0040  
                    ??___fltol 0056                   ?_timer0_init 0001                 ??_measure_freq 0038  
                    ??___lwdiv 0008                   ?_timer2_init 0001                      ??___lwmod 0008  
                       _buffer 00D4                         clear_0 242C                         clear_1 2438  
                       log10@x 004A                         _rxfifo 0100                         _txfifo 0110  
                       _rxiptr 00D1                         _rxoptr 00D2                         floor@i 006B  
                       _txiptr 005B                         floor@x 0067                         _txoptr 005C  
             __end_of_ser_init 2886               __end_of_ser_puts 28DC             timer2_init@ps_mode 0007  
                 __mediumconst 0000                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8           __end_of_buffer_putch 2552               format_number@buf 0011  
             format_number@pad 000E        _measure_inductance$1100 006E        _measure_inductance$1101 0072  
      _measure_inductance$1102 0076        _measure_inductance$1096 006A        _measure_inductance$1097 007B  
      _measure_inductance$1098 007F        _measure_inductance$1099 0083                      ??_put_str 0008  
                   ___fladd@f1 002C                     ___fladd@f2 0030                     ___flge@ff1 0004  
                   ___flge@ff2 0008               __end_ofexp@coeff 0829                  _format_double 150E  
             __end_oflog@coeff 084D                     ___altofl@c 0062                     ___fldiv@f1 000E  
                   ___fldiv@f2 0012                     ___fldiv@f3 0016                     __accesstop 0060  
      __end_of__initialization 2464                __CFG_PBADEN$OFF 000000                     ___flneg@f1 0004  
                _format_number 2090                  _format_xint32 26D6                     ___flmul@f1 001D  
                   ___flmul@f2 0021                   eval_poly@res 0040                  ___rparam_used 000001  
                   ___flsub@f1 0038                     ___flsub@f2 003C                     ___fltol@f1 0052  
                   ___awtofl@c 000E         measure_capacitance@Cin 00B4   __size_of_measure_capacitance 0360  
       measure_capacitance@var 00B2          lcd_gotoxy@row_offsets 000A                 __pcstackCOMRAM 0001  
           __size_of_calibrate 00E2                   __pidataBANK0 2950                     ___lltofl@c 000E  
           __size_of_delay10ms 0002                  __end_of_log10 2426                  __end_of_floor 1BFA  
                __end_of_ldexp 21DA                  __end_of_frexp 22F0                     __end_ofPL2 0D2C  
                   __end_ofPL4 10C4                     __end_ofPL6 10E6                     __end_ofPL8 0D42  
                   ___lwtofl@c 003B                 buffer_putch@ch 0006             __size_of_lcd_begin 00D4  
           __size_of_lcd_clear 0016                        ??_log10 004E                        ??_floor 005A  
                      ??_ldexp 004A                        ??_frexp 0009                     _log10$1105 004E  
                   __pbssBANK0 00B8                     __pbssBANK1 0100                 ?_format_double 0091  
           __size_of_eval_poly 0098             __size_of_indicator 001C                 ?_format_number 000B  
               ?_format_xint32 0036                 print_unit@unit 0001                        ?___flge 0004  
                      _CM1CON0 000F98                      ?___altofl 0062        __size_of_timer0_read_ps 004A  
                    ?___flpack 0004                      ?___awtofl 000E                      ?___lltofl 000E  
           _measure_inductance 08E0             __size_of_ser_putch 0028                      ?___lwtofl 003B  
             ??_lcd_write4bits 0004                        _INTCON2 000FF1                     _lcd_gotoxy 26A0  
          ?_measure_inductance 0001              __end_of_calibrate 1CDC                      ?_lcd_init 0001  
                    ?_lcd_send 0005              __end_of_delay10ms 2956                      ?_lcd_puts 0001  
         __end_of_measure_freq 1A12                     _global_int 0008                     calibrate@i 003F  
                      __Hparam 0000                        __Lparam 0000                      ?_ser_init 0001  
         ??_measure_inductance 005A              __end_of_lcd_begin 1DB0                      ?_ser_puts 0001  
            __end_of_lcd_clear 2932                __size_of___flge 004C                        ___fladd 1696  
                      ___fldiv 1F36                        ___flneg 28A8                        ___flmul 1DB0  
                      ___flsub 25E4                        ___fltol 21DA                        ___lwdiv 2552  
                      ___lwmod 2628                   __psmallconst 0800                     ??___altofl 005A  
                   ??___flpack 000A                        __pcinit 2426                     ??___awtofl 0012  
            __end_of_eval_poly 207E                        __ramtop 0800              __end_of_indicator 2902  
         __size_of_timer0_init 006E                     ??___lltofl 0012                        __ptext0 1A12  
                      __ptext1 270A                        __ptext2 22F0                        __ptext3 2860  
                      __ptext4 08E0                        __ptext5 0D42                        __ptext6 2810  
                      __ptext7 235E                        __ptext8 26D6                        __ptext9 150E  
         __size_of_timer2_init 002E          __size_of_buffer_putch 004A                     ??___lwtofl 003F  
                 __size_of_exp 021C                   __size_of_log 0118                   __size_of_pow 0192  
                      _seconds 00C4                        _ser_tmp 00D3                ??_format_double 005A  
                      _put_str 27BC                     ??_lcd_init 0004                     ??_lcd_send 0006  
                   ??_lcd_puts 0007           end_of_initialization 2464                ??_format_number 000F  
              ??_format_xint32 003A                        exp@sign 007B                      _LCD_lines 00CF  
                 _lcd_init$134 0005                 lcd_puts@string 0009              __end_of_ser_putch 2860  
                      pow@sign 008C  measure_inductance@denominator 0066          __end_of_print_reading 23CC  
                   ??_ser_init 0004                     ??_ser_puts 0005                   _buffer_putch 2508  
            format_number@base 000D                        postdec1 000FE5                        postdec2 000FDD  
                      postinc0 000FEE                        postinc2 000FDE                     _print_unit 2810  
          _measure_capacitance 0D42                    ?_lcd_gotoxy 0008                    ___fldiv@exp 001B  
                  ?_global_int 0001                    ___flmul@exp 0025                  ??_lcd_command 0007  
         ?_measure_capacitance 0001        measure_capacitance@unit 00B1                 format_double@m 00A3  
       measure_inductance@unit 007A                 __end_of___flge 24BE                 _timer0_read_ps 24BE  
              lcd_gotoxy@F6470 00F1                     floor@expon 006F                 format_number@i 0035  
               format_number@n 000B                 format_xint32@x 0036                    __end_ofPL10 10FC  
                  __end_ofPL20 1120                    __end_ofPL12 17F0                    __end_ofPL30 1152  
                  __end_ofPL22 1132                    __end_ofPL14 2090                    __end_ofPL40 28E6  
                  __end_ofPL32 27BC                    __end_ofPL24 1918                    __end_ofPL16 1E66  
                  __end_ofPL34 1160                    __end_ofPL26 1142                    __end_ofPL18 110E  
                  __end_ofPL36 1E74                    __end_ofPL28 27E6                    __end_ofPL38 1F36  
          start_initialization 2426                     eval_poly@d 003C                     eval_poly@n 003D  
                   eval_poly@x 0038          __size_of_measure_freq 00FA                     ldexp@value 0044  
                  __end_of_exp 137C                    __end_of_log 1908                    __end_of_pow 150E  
                 _LCD_function 005A             format_double@digit 00A1                     frexp@value 0004  
        ??_measure_capacitance 005A         __end_of_timer0_read_ps 2508                       ??___flge 000C  
          __size_of_lcd_gotoxy 0036            __end_of_lcd_command 2950                    __pdataBANK0 00F1  
                 _measure_freq 1918            __size_of_global_int 00DA       print_reading@measurement 0036  
            __size_of___altofl 0048              __size_of___flpack 00B6              __size_of___awtofl 003A  
                  ?_print_unit 0001              __size_of___lltofl 002E                    __pbssCOMRAM 005A  
            __size_of___lwtofl 002A                  __pcstackBANK0 0060                __CFG_nPWRTEN$ON 000000  
                ?_output_putch 0001              measure_freq@count 0039               lcd_command@value 0007  
            __size_of_lcd_init 002C              __size_of_lcd_send 001A                      _calibrate 1BFA  
            __size_of_lcd_puts 001A                      _delay10ms 2954                      __pnvBANK0 00E9  
             ___lwdiv@dividend 0004                ?_timer0_read_ps 0004                      __pintcode 0008  
                     ?___fladd 002C                       ?___fldiv 000E                       ?___flneg 0004  
                     ?___flmul 001D                       ?___flsub 0038                       ?___fltol 0052  
            __size_of_ser_init 0026                       ?___lwdiv 0004                       ?___lwmod 0004  
            __size_of_ser_puts 0014                      _lcd_begin 1CDC                      _lcd_clear 291C  
                  __smallconst 0800                      _eval_poly 1FE6                  output_putch@c 0007  
                    _indicator 28E6                 ??_output_putch 0007               ___lwdiv@quotient 0008  
               __size_of_log10 005A                       ?_put_str 0001                 __size_of_floor 00F2  
               __size_of_ldexp 00A2                 __size_of_frexp 0078                     ?_calibrate 0001  
                   ser_putch@c 0004                     ?_delay10ms 0001                       _LCD_ctrl 00CE  
                     _LCD_mode 00D0                    _lcd_command 2944            __size_of_print_unit 0028  
                     i2u253_40 004A                       i2u253_41 0044                       i2u254_48 004C  
                    _ser_putch 2838    __size_of_measure_inductance 042A                  ??_timer0_init 0004  
                ??_timer2_init 0004              indicator@indicate 000E                     ?_lcd_begin 0008  
                   ?_lcd_clear 0001                     ?_eval_poly 0038                     ?_indicator 0001  
                    lcd_puts@i 0008                   ??_lcd_gotoxy 0009          measure_inductance@Lin 0089  
        measure_inductance@var 0087                      copy_data0 2458          __end_of_format_double 1696  
                 ??_global_int 0001           format_number@padchar 0033        __size_of_lcd_write4bits 0022  
        __end_of_format_number 2138          __end_of_format_xint32 270A                      frexp@eptr 0008  
                     __Hrparam 0000                       __Lrparam 0000                     ?_ser_putch 0001  
                 __Lsmallconst 0800             __end_of_lcd_gotoxy 26D6               __size_of___fladd 0146  
             __size_of___fldiv 00B0               __size_of___flneg 0020               __size_of___flmul 00A4  
             __size_of___flsub 0044               __size_of___fltol 009E                       ___altofl 259C  
                     ___flpack 1E74               __size_of___lwdiv 004A               __size_of___lwmod 003E  
                     ___awtofl 2666                       ___lltofl 2738                  timer2_init@ps 0005  
                     ___lwtofl 27E6             __end_of_global_int 00E2            __end_of_timer0_init 235E  
                     _exp$1108 0075            __end_of_timer2_init 2738                ___lwdiv@divisor 0006  
              ___lwdiv@counter 000A         __size_of_print_reading 006E           timer0_init@prescaler 000C  
                     __ptext10 137C                       __ptext11 1160                       __ptext20 2738  
                     __ptext12 2138                       __ptext21 23CC                       __ptext13 1B08  
                     __ptext30 28E6                       __ptext22 17F0                       __ptext14 21DA  
                     __ptext31 2792                       __ptext23 2278                       __ptext15 2472  
                     __ptext40 2090                       __ptext32 1BFA                       __ptext24 1FE6  
                     __ptext16 259C                       __ptext41 2508                       __ptext33 28C8  
                     __ptext25 1DB0                       __ptext17 25E4                       __ptext50 1E74  
                     __ptext42 2628                       __ptext34 1918                       __ptext26 1696  
                     __ptext18 28A8                       __ptext43 2552                       __ptext35 24BE  
                     __ptext27 2666                       __ptext19 1F36                       __ptext44 291C  
                     __ptext36 27BC                       __ptext28 2766                       __ptext45 2944  
                     __ptext37 2932                       __ptext29 1CDC                       __ptext46 2902  
                     __ptext38 2838                       __ptext47 2886                       __ptext39 26A0  
                     __ptext48 2954                       __ptext49 27E6                       _lcd_init 2766  
                     _lcd_send 2902                       _pow$1106 0084                       _pow$1107 0088  
                     _lcd_puts 2792               __size_of_put_str 001A                    ??_calibrate 003F  
                __size_of_main 00F6                    ??_delay10ms 0004                      ser_puts@s 0005  
                     _msecpart 00EF                       _ser_init 2860                       _ser_puts 28C8  
                     _timer1of 00C8           __end_of_output_putch 2944                    ??_lcd_begin 0009  
                  ??_lcd_clear 0008                       exp@coeff 0801          ___flmul@f3_as_product 0026  
                     log@coeff 0829    measure_inductance@numerator 0062                   ??_print_unit 000E  
                  ??_eval_poly 003F                    ??_indicator 000E             _print_reading$1103 0038  
           _print_reading$1104 003A                       intlevel2 0000    __end_of_measure_capacitance 10A2  
             ___lwmod@dividend 0004               ??_timer0_read_ps 0006                    ??_ser_putch 0004  
           __end_of_print_unit 2838                  _print_reading 235E           delay10ms@period_10ms 0001  
                  _timer0_init 22F0                    _timer2_init 270A             _format_double$1091 0095  
           _format_double$1092 0099       _measure_capacitance$1093 00A5       _measure_capacitance$1094 00A9  
     _measure_capacitance$1095 00AD                       put_str@i 0009                       put_str@s 000B  
           timer0_init@ps_mode 000D                ___lwmod@divisor 0006                ___lwmod@counter 0008  
               _lcd_write4bits 2886                   ___fladd@exp1 0037                   ___fladd@exp2 0036  
                 ___fladd@sign 0035                   ?_lcd_command 0001                 ?_print_reading 0036  
                ?_buffer_putch 0001  
