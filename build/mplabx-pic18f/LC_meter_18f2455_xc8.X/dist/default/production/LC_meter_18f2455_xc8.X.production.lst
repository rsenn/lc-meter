

Microchip Technology PIC18 PRO Macro Assembler V1.34 build -361300703 
                                                                                               Thu Sep 05 11:51:18 2019

Microchip Technology Omniscient Code Generator (PRO mode) build 201502162209
     1                           	processor	18F2455
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    69  0000                     
    70                           	psect	idataBANK0
    71  002C0C                     __pidataBANK0:
    72                           	opt stack 0
    73                           
    74                           ;initializer for lcd_gotoxy@F4094
    75  002C0C  00                 	db	0
    76  002C0D  40                 	db	64
    77  002C0E  14                 	db	20
    78  002C0F  54                 	db	84
    79                           
    80                           ;initializer for _putchar_ptr
    81  002C10  12                 	db	low _format_putchar
    82  002C11  2C                 	db	high _format_putchar
    83                           
    84                           	psect	smallconst
    85  000800                     __psmallconst:
    86                           	opt stack 0
    87  000800  00                 	db	0
    88  000801                     exp@coeff:
    89                           	opt stack 0
    90  000801  0000               	dw	0
    91  000803  3F80               	dw	16256
    92  000805  7218               	dw	29208
    93  000807  3F31               	dw	16177
    94  000809  FDF0               	dw	65008
    95  00080B  3E75               	dw	15989
    96  00080D  5847               	dw	22599
    97  00080F  3D63               	dw	15715
    98  000811  9558               	dw	38232
    99  000813  3C1D               	dw	15389
   100  000815  C482               	dw	50306
   101  000817  3AAE               	dw	15022
   102  000819  78A8               	dw	30888
   103  00081B  3921               	dw	14625
   104  00081D  93EF               	dw	37871
   105  00081F  3780               	dw	14208
   106  000821  92A0               	dw	37536
   107  000823  35A7               	dw	13735
   108  000825  5646               	dw	22086
   109  000827  3415               	dw	13333
   110  000829                     __end_ofexp@coeff:
   111                           	opt stack 0
   112  000829                     log@coeff:
   113                           	opt stack 0
   114  000829  0000               	dw	0
   115  00082B  0000               	dw	0
   116  00082D  FFC4               	dw	65476
   117  00082F  3F7F               	dw	16255
   118  000831  EF80               	dw	61312
   119  000833  BEFF               	dw	48895
   120  000835  E190               	dw	57744
   121  000837  3EA9               	dw	16041
   122  000839  82EC               	dw	33516
   123  00083B  BE76               	dw	48758
   124  00083D  AD82               	dw	44418
   125  00083F  3E2B               	dw	15915
   126  000841  3C0E               	dw	15374
   127  000843  BDC3               	dw	48579
   128  000845  D187               	dw	53639
   129  000847  3D13               	dw	15635
   130  000849  7841               	dw	30785
   131  00084B  BBD3               	dw	48083
   132  00084D                     __end_oflog@coeff:
   133                           	opt stack 0
   134  00084D                     STR_23:
   135  00084D  70                 	db	112	;'p'
   136  00084E  6C                 	db	108	;'l'
   137  00084F  65                 	db	101	;'e'
   138  000850  61                 	db	97	;'a'
   139  000851  73                 	db	115	;'s'
   140  000852  65                 	db	101	;'e'
   141  000853  20                 	db	32
   142  000854  77                 	db	119	;'w'
   143  000855  61                 	db	97	;'a'
   144  000856  69                 	db	105	;'i'
   145  000857  74                 	db	116	;'t'
   146  000858  2E                 	db	46
   147  000859  2E                 	db	46
   148  00085A  2E                 	db	46
   149  00085B  00                 	db	0
   150  00085C                     STR_34:
   151  00085C  49                 	db	73	;'I'
   152  00085D  6E                 	db	110	;'n'
   153  00085E  64                 	db	100	;'d'
   154  00085F  75                 	db	117	;'u'
   155  000860  63                 	db	99	;'c'
   156  000861  74                 	db	116	;'t'
   157  000862  69                 	db	105	;'i'
   158  000863  76                 	db	118	;'v'
   159  000864  69                 	db	105	;'i'
   160  000865  74                 	db	116	;'t'
   161  000866  79                 	db	121	;'y'
   162  000867  20                 	db	32
   163  000868  00                 	db	0
   164  000869                     STR_21:
   165  000869  43                 	db	67	;'C'
   166  00086A  61                 	db	97	;'a'
   167  00086B  6C                 	db	108	;'l'
   168  00086C  69                 	db	105	;'i'
   169  00086D  62                 	db	98	;'b'
   170  00086E  72                 	db	114	;'r'
   171  00086F  61                 	db	97	;'a'
   172  000870  74                 	db	116	;'t'
   173  000871  69                 	db	105	;'i'
   174  000872  6E                 	db	110	;'n'
   175  000873  67                 	db	103	;'g'
   176  000874  00                 	db	0
   177  000875                     STR_13:
   178  000875  4C                 	db	76	;'L'
   179  000876  43                 	db	67	;'C'
   180  000877  2D                 	db	45
   181  000878  6D                 	db	109	;'m'
   182  000879  65                 	db	101	;'e'
   183  00087A  74                 	db	116	;'t'
   184  00087B  65                 	db	101	;'e'
   185  00087C  72                 	db	114	;'r'
   186  00087D  20                 	db	32
   187  00087E  00                 	db	0
   188  00087F                     STR_25:
   189  00087F  43                 	db	67	;'C'
   190  000880  61                 	db	97	;'a'
   191  000881  70                 	db	112	;'p'
   192  000882  61                 	db	97	;'a'
   193  000883  63                 	db	99	;'c'
   194  000884  69                 	db	105	;'i'
   195  000885  74                 	db	116	;'t'
   196  000886  79                 	db	121	;'y'
   197  000887  20                 	db	32
   198  000888  00                 	db	0
   199  000889                     STR_30:
   200  000889  0D                 	db	13
   201  00088A  0A                 	db	10
   202  00088B  43                 	db	67	;'C'
   203  00088C  43                 	db	67	;'C'
   204  00088D  61                 	db	97	;'a'
   205  00088E  6C                 	db	108	;'l'
   206  00088F  3D                 	db	61	;'='
   207  000890  00                 	db	0
   208  000891                     STR_15:
   209  000891  20                 	db	32
   210  000892  20                 	db	32
   211  000893  20                 	db	32
   212  000894  20                 	db	32
   213  000895  20                 	db	32
   214  000896  20                 	db	32
   215  000897  00                 	db	0
   216  000898                     STR_14:
   217  000898  2E                 	db	46
   218  000899  2E                 	db	46
   219  00089A  2E                 	db	46
   220  00089B  0D                 	db	13
   221  00089C  0A                 	db	10
   222  00089D  00                 	db	0
   223  00089E                     STR_27:
   224  00089E  0D                 	db	13
   225  00089F  0A                 	db	10
   226  0008A0  46                 	db	70	;'F'
   227  0008A1  31                 	db	49	;'1'
   228  0008A2  3D                 	db	61	;'='
   229  0008A3  00                 	db	0
   230  0008A4                     STR_28:
   231  0008A4  0D                 	db	13
   232  0008A5  0A                 	db	10
   233  0008A6  46                 	db	70	;'F'
   234  0008A7  32                 	db	50	;'2'
   235  0008A8  3D                 	db	61	;'='
   236  0008A9  00                 	db	0
   237  0008AA                     STR_29:
   238  0008AA  0D                 	db	13
   239  0008AB  0A                 	db	10
   240  0008AC  46                 	db	70	;'F'
   241  0008AD  33                 	db	51	;'3'
   242  0008AE  3D                 	db	61	;'='
   243  0008AF  00                 	db	0
   244  0008B0                     STR_20:
   245  0008B0  46                 	db	70	;'F'
   246  0008B1  72                 	db	114	;'r'
   247  0008B2  65                 	db	101	;'e'
   248  0008B3  71                 	db	113	;'q'
   249  0008B4  3D                 	db	61	;'='
   250  0008B5  00                 	db	0
   251  0008B6  52                 	db	82	;'R'
   252  0008B7  43                 	db	67	;'C'
   253  0008B8  34                 	db	52	;'4'
   254  0008B9  3D                 	db	61	;'='
   255  0008BA  00                 	db	0
   256  0008BB                     STR_32:
   257  0008BB  43                 	db	67	;'C'
   258  0008BC  69                 	db	105	;'i'
   259  0008BD  6E                 	db	110	;'n'
   260  0008BE  3D                 	db	61	;'='
   261  0008BF  00                 	db	0
   262  0008C0                     STR_26:
   263  0008C0  76                 	db	118	;'v'
   264  0008C1  61                 	db	97	;'a'
   265  0008C2  72                 	db	114	;'r'
   266  0008C3  3D                 	db	61	;'='
   267  0008C4  00                 	db	0
   268  0008C5                     STR_11:
   269  0008C5  2D                 	db	45
   270  0008C6  2A                 	db	42
   271  0008C7  2D                 	db	45
   272  0008C8  00                 	db	0
   273  0008C9  6D                 	db	109	;'m'
   274  0008CA  46                 	db	70	;'F'
   275  0008CB  00                 	db	0
   276  0008CC  6E                 	db	110	;'n'
   277  0008CD  46                 	db	70	;'F'
   278  0008CE  00                 	db	0
   279  0008CF  70                 	db	112	;'p'
   280  0008D0  46                 	db	70	;'F'
   281  0008D1  00                 	db	0
   282  0008D2  75                 	db	117	;'u'
   283  0008D3  46                 	db	70	;'F'
   284  0008D4  00                 	db	0
   285  0008D5                     STR_2:
   286  0008D5  6D                 	db	109	;'m'
   287  0008D6  48                 	db	72	;'H'
   288  0008D7  00                 	db	0
   289  0008D8  6E                 	db	110	;'n'
   290  0008D9  48                 	db	72	;'H'
   291  0008DA  00                 	db	0
   292  0008DB  75                 	db	117	;'u'
   293  0008DC  48                 	db	72	;'H'
   294  0008DD  00                 	db	0
   295  0008DE  00                 	db	0	; dummy byte at the end
   296  0000                     
   297                           	psect	nvBANK0
   298  0000F2                     __pnvBANK0:
   299                           	opt stack 0
   300  0000F2                     _CCal:
   301                           	opt stack 0
   302  0000F2                     	ds	4
   303  0000F6                     _bres:
   304                           	opt stack 0
   305  0000F6                     	ds	2
   306  0000F8                     _msecpart:
   307                           	opt stack 0
   308  0000F8                     	ds	2
   309  0000                     _TMR0	set	4054
   310  0000                     _PORTC	set	3970
   311  0000                     _RCREG	set	4014
   312  0000                     _SPBRG	set	4015
   313  0000                     _TMR2	set	4044
   314  0000                     _TRISA	set	3986
   315  0000                     _TRISC	set	3988
   316  0000                     _TXREG	set	4013
   317  0000                     _BRGH	set	32098
   318  0000                     _CREN	set	32092
   319  0000                     _GIE	set	32663
   320  0000                     _PEIE	set	32662
   321  0000                     _RB2	set	31754
   322  0000                     _RB3	set	31755
   323  0000                     _RB4	set	31756
   324  0000                     _RB5	set	31757
   325  0000                     _RB6	set	31758
   326  0000                     _RB7	set	31759
   327  0000                     _RC3	set	31763
   328  0000                     _RC4	set	31764
   329  0000                     _RC7	set	31767
   330  0000                     _RCIF	set	31989
   331  0000                     _RX9	set	32094
   332  0000                     _SPEN	set	32095
   333  0000                     _SSPEN	set	32309
   334  0000                     _SYNC	set	32100
   335  0000                     _T0CS	set	32429
   336  0000                     _T0SE	set	32428
   337  0000                     _T2CKPS0	set	32336
   338  0000                     _T2CKPS1	set	32337
   339  0000                     _TMR0IF	set	32658
   340  0000                     _TMR2IE	set	31977
   341  0000                     _TMR2IF	set	31985
   342  0000                     _TMR2ON	set	32338
   343  0000                     _TOUTPS0	set	32339
   344  0000                     _TOUTPS1	set	32340
   345  0000                     _TOUTPS2	set	32341
   346  0000                     _TRISB2	set	31898
   347  0000                     _TRISB3	set	31899
   348  0000                     _TRISB4	set	31900
   349  0000                     _TRISB5	set	31901
   350  0000                     _TRISB6	set	31902
   351  0000                     _TRISB7	set	31903
   352  0000                     _TRISC0	set	31904
   353  0000                     _TRISC1	set	31905
   354  0000                     _TRISC2	set	31906
   355  0000                     _TRISC3	set	31907
   356  0000                     _TRISC6	set	31910
   357  0000                     _TX9	set	32102
   358  0000                     _TXEN	set	32101
   359  0000                     _TXIE	set	31980
   360  0000                     _TXIF	set	31988
   361  0000                     _nRBPU	set	32655
   362                           
   363                           ; #config settings
   364                           
   365                           	psect	cinit
   366  0028A8                     __pcinit:
   367                           	opt stack 0
   368  0028A8                     start_initialization:
   369                           	opt stack 0
   370  0028A8                     __initialization:
   371                           	opt stack 0
   372                           
   373                           ; Clear objects allocated to BANK1 (35 bytes)
   374  0028A8  EE01  F000         	lfsr	0,__pbssBANK1
   375  0028AC  0E23               	movlw	35
   376  0028AE                     clear_0:
   377  0028AE  6AEE               	clrf	postinc0,c
   378  0028B0  06E8               	decf	wreg,f,c
   379  0028B2  E1FD               	bnz	clear_0
   380                           
   381                           ; Clear objects allocated to BANK0 (49 bytes)
   382  0028B4  EE00  F0C1         	lfsr	0,__pbssBANK0
   383  0028B8  0E31               	movlw	49
   384  0028BA                     clear_1:
   385  0028BA  6AEE               	clrf	postinc0,c
   386  0028BC  06E8               	decf	wreg,f,c
   387  0028BE  E1FD               	bnz	clear_1
   388                           
   389                           ; Clear objects allocated to COMRAM (2 bytes)
   390  0028C0  6A5D               	clrf	(__pbssCOMRAM+1)& (0+255),c
   391  0028C2  6A5C               	clrf	__pbssCOMRAM& (0+255),c
   392                           
   393                           ; Initialize objects allocated to BANK0 (6 bytes)
   394                           ; load TBLPTR registers with __pidataBANK0
   395  0028C4  0E0C               	movlw	low __pidataBANK0
   396  0028C6  6EF6               	movwf	tblptrl,c
   397  0028C8  0E2C               	movlw	high __pidataBANK0
   398  0028CA  6EF7               	movwf	tblptrh,c
   399  0028CC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   400  0028CE  6EF8               	movwf	tblptru,c
   401  0028D0  EE00  F0FA         	lfsr	0,__pdataBANK0
   402  0028D4  EE10 F006          	lfsr	1,6
   403  0028D8                     copy_data0:
   404  0028D8  0009               	tblrd		*+
   405  0028DA  CFF5 FFEE          	movff	tablat,postinc0
   406  0028DE  50E5               	movf	postdec1,w,c
   407  0028E0  50E1               	movf	fsr1l,w,c
   408  0028E2  E1FA               	bnz	copy_data0
   409  0028E4                     end_of_initialization:
   410                           	opt stack 0
   411  0028E4                     __end_of__initialization:
   412                           	opt stack 0
   413  0028E4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   414  0028E6  6EF8               	movwf	tblptru,c
   415  0028E8  0100               	movlb	0
   416  0028EA  EFE6  F00D         	goto	_main	;jump to C main() function
   417                           tblptru	equ	0xFF8
   418                           tblptrh	equ	0xFF7
   419                           tblptrl	equ	0xFF6
   420                           tablat	equ	0xFF5
   421                           postinc0	equ	0xFEE
   422                           wreg	equ	0xFE8
   423                           postdec1	equ	0xFE5
   424                           fsr1l	equ	0xFE1
   425                           
   426                           	psect	bssCOMRAM
   427  00005C                     __pbssCOMRAM:
   428                           	opt stack 0
   429  00005C                     _txiptr:
   430                           	opt stack 0
   431  00005C                     	ds	1
   432  00005D                     _txoptr:
   433                           	opt stack 0
   434  00005D                     	ds	1
   435                           tblptru	equ	0xFF8
   436                           tblptrh	equ	0xFF7
   437                           tblptrl	equ	0xFF6
   438                           tablat	equ	0xFF5
   439                           postinc0	equ	0xFEE
   440                           wreg	equ	0xFE8
   441                           postdec1	equ	0xFE5
   442                           fsr1l	equ	0xFE1
   443                           
   444                           	psect	bssBANK0
   445  0000C1                     __pbssBANK0:
   446                           	opt stack 0
   447  0000C1                     _txfifo:
   448                           	opt stack 0
   449  0000C1                     	ds	16
   450  0000D1                     _F2:
   451                           	opt stack 0
   452  0000D1                     	ds	4
   453  0000D5                     _F3:
   454                           	opt stack 0
   455  0000D5                     	ds	4
   456  0000D9                     _msecs:
   457                           	opt stack 0
   458  0000D9                     	ds	4
   459  0000DD                     _seconds:
   460                           	opt stack 0
   461  0000DD                     	ds	4
   462  0000E1                     _timer1of:
   463                           	opt stack 0
   464  0000E1                     	ds	4
   465  0000E5                     _blink:
   466                           	opt stack 0
   467  0000E5                     	ds	2
   468  0000E7                     _LCD_ctrl:
   469                           	opt stack 0
   470  0000E7                     	ds	1
   471  0000E8                     _LCD_function:
   472                           	opt stack 0
   473  0000E8                     	ds	1
   474  0000E9                     _LCD_lines:
   475                           	opt stack 0
   476  0000E9                     	ds	1
   477  0000EA                     _LCD_mode:
   478                           	opt stack 0
   479  0000EA                     	ds	1
   480  0000EB                     _rxiptr:
   481                           	opt stack 0
   482  0000EB                     	ds	1
   483  0000EC                     _rxoptr:
   484                           	opt stack 0
   485  0000EC                     	ds	1
   486  0000ED                     _ser_tmp:
   487                           	opt stack 0
   488  0000ED                     	ds	1
   489  0000EE                     _F1:
   490                           	opt stack 0
   491  0000EE                     	ds	4
   492                           tblptru	equ	0xFF8
   493                           tblptrh	equ	0xFF7
   494                           tblptrl	equ	0xFF6
   495                           tablat	equ	0xFF5
   496                           postinc0	equ	0xFEE
   497                           wreg	equ	0xFE8
   498                           postdec1	equ	0xFE5
   499                           fsr1l	equ	0xFE1
   500                           
   501                           	psect	dataBANK0
   502  0000FA                     __pdataBANK0:
   503                           	opt stack 0
   504  0000FA                     lcd_gotoxy@F4094:
   505                           	opt stack 0
   506  0000FA                     	ds	4
   507  0000FE                     _putchar_ptr:
   508                           	opt stack 0
   509  0000FE                     	ds	2
   510                           tblptru	equ	0xFF8
   511                           tblptrh	equ	0xFF7
   512                           tblptrl	equ	0xFF6
   513                           tablat	equ	0xFF5
   514                           postinc0	equ	0xFEE
   515                           wreg	equ	0xFE8
   516                           postdec1	equ	0xFE5
   517                           fsr1l	equ	0xFE1
   518                           
   519                           	psect	bssBANK1
   520  000100                     __pbssBANK1:
   521                           	opt stack 0
   522  000100                     _rxfifo:
   523                           	opt stack 0
   524  000100                     	ds	16
   525  000110                     _buffer:
   526                           	opt stack 0
   527  000110                     	ds	19
   528                           tblptru	equ	0xFF8
   529                           tblptrh	equ	0xFF7
   530                           tblptrl	equ	0xFF6
   531                           tablat	equ	0xFF5
   532                           postinc0	equ	0xFEE
   533                           wreg	equ	0xFE8
   534                           postdec1	equ	0xFE5
   535                           fsr1l	equ	0xFE1
   536                           
   537                           	psect	cstackBANK0
   538  000060                     __pcstackBANK0:
   539                           	opt stack 0
   540  000060                     _log10$1162:
   541                           	opt stack 0
   542                           
   543                           ; 4 bytes @ 0x0
   544  000060                     	ds	4
   545  000064                     ?___fltol:
   546                           	opt stack 0
   547  000064                     ___fltol@f1:
   548                           	opt stack 0
   549                           
   550                           ; 4 bytes @ 0x4
   551  000064                     	ds	4
   552  000068                     ??___fltol:
   553                           
   554                           ; 0 bytes @ 0x8
   555  000068                     	ds	4
   556  00006C                     ?___altofl:
   557                           	opt stack 0
   558  00006C                     measure_inductance@numerator:
   559                           	opt stack 0
   560  00006C                     ___altofl@c:
   561                           	opt stack 0
   562                           
   563                           ; 4 bytes @ 0xC
   564  00006C                     	ds	4
   565  000070                     ?_floor:
   566                           	opt stack 0
   567  000070                     measure_inductance@denominator:
   568                           	opt stack 0
   569  000070                     floor@x:
   570                           	opt stack 0
   571                           
   572                           ; 4 bytes @ 0x10
   573  000070                     	ds	4
   574  000074                     floor@i:
   575                           	opt stack 0
   576  000074                     _measure_inductance$1155:
   577                           	opt stack 0
   578                           
   579                           ; 4 bytes @ 0x14
   580  000074                     	ds	4
   581  000078                     floor@expon:
   582                           	opt stack 0
   583  000078                     _measure_inductance$1159:
   584                           	opt stack 0
   585                           
   586                           ; 4 bytes @ 0x18
   587  000078                     	ds	2
   588  00007A                     ?_exp:
   589                           	opt stack 0
   590  00007A                     exp@x:
   591                           	opt stack 0
   592                           
   593                           ; 4 bytes @ 0x1A
   594  00007A                     	ds	2
   595  00007C                     _measure_inductance$1160:
   596                           	opt stack 0
   597                           
   598                           ; 4 bytes @ 0x1C
   599  00007C                     	ds	2
   600  00007E                     _exp$1165:
   601                           	opt stack 0
   602                           
   603                           ; 4 bytes @ 0x1E
   604  00007E                     	ds	2
   605  000080                     _measure_inductance$1161:
   606                           	opt stack 0
   607                           
   608                           ; 4 bytes @ 0x20
   609  000080                     	ds	2
   610  000082                     exp@exponent:
   611                           	opt stack 0
   612                           
   613                           ; 2 bytes @ 0x22
   614  000082                     	ds	2
   615  000084                     measure_inductance@unit:
   616                           	opt stack 0
   617  000084                     exp@sign:
   618                           	opt stack 0
   619                           
   620                           ; 1 bytes @ 0x24
   621  000084                     	ds	1
   622  000085                     ?_pow:
   623                           	opt stack 0
   624  000085                     pow@x:
   625                           	opt stack 0
   626  000085                     _measure_inductance$1156:
   627                           	opt stack 0
   628                           
   629                           ; 4 bytes @ 0x25
   630  000085                     	ds	4
   631  000089                     pow@y:
   632                           	opt stack 0
   633  000089                     _measure_inductance$1157:
   634                           	opt stack 0
   635                           
   636                           ; 4 bytes @ 0x29
   637  000089                     	ds	4
   638  00008D                     _measure_inductance$1158:
   639                           	opt stack 0
   640  00008D                     _pow$1163:
   641                           	opt stack 0
   642                           
   643                           ; 4 bytes @ 0x2D
   644  00008D                     	ds	4
   645  000091                     measure_inductance@var:
   646                           	opt stack 0
   647  000091                     _pow$1164:
   648                           	opt stack 0
   649                           
   650                           ; 4 bytes @ 0x31
   651  000091                     	ds	2
   652  000093                     measure_inductance@Lin:
   653                           	opt stack 0
   654                           
   655                           ; 4 bytes @ 0x33
   656  000093                     	ds	2
   657  000095                     pow@sign:
   658                           	opt stack 0
   659                           
   660                           ; 1 bytes @ 0x35
   661  000095                     	ds	1
   662  000096                     pow@yi:
   663                           	opt stack 0
   664                           
   665                           ; 4 bytes @ 0x36
   666  000096                     	ds	4
   667  00009A                     format_double@num:
   668                           	opt stack 0
   669                           
   670                           ; 4 bytes @ 0x3A
   671  00009A                     	ds	4
   672  00009E                     _format_double$1150:
   673                           	opt stack 0
   674                           
   675                           ; 4 bytes @ 0x3E
   676  00009E                     	ds	4
   677  0000A2                     _format_double$1151:
   678                           	opt stack 0
   679                           
   680                           ; 4 bytes @ 0x42
   681  0000A2                     	ds	4
   682  0000A6                     format_double@weight:
   683                           	opt stack 0
   684                           
   685                           ; 4 bytes @ 0x46
   686  0000A6                     	ds	4
   687  0000AA                     format_double@digit:
   688                           	opt stack 0
   689                           
   690                           ; 2 bytes @ 0x4A
   691  0000AA                     	ds	2
   692  0000AC                     format_double@m:
   693                           	opt stack 0
   694                           
   695                           ; 2 bytes @ 0x4C
   696  0000AC                     	ds	2
   697  0000AE                     _measure_capacitance$1152:
   698                           	opt stack 0
   699                           
   700                           ; 4 bytes @ 0x4E
   701  0000AE                     	ds	4
   702  0000B2                     _measure_capacitance$1153:
   703                           	opt stack 0
   704                           
   705                           ; 4 bytes @ 0x52
   706  0000B2                     	ds	4
   707  0000B6                     _measure_capacitance$1154:
   708                           	opt stack 0
   709                           
   710                           ; 4 bytes @ 0x56
   711  0000B6                     	ds	4
   712  0000BA                     measure_capacitance@unit:
   713                           	opt stack 0
   714                           
   715                           ; 1 bytes @ 0x5A
   716  0000BA                     	ds	1
   717  0000BB                     measure_capacitance@var:
   718                           	opt stack 0
   719                           
   720                           ; 2 bytes @ 0x5B
   721  0000BB                     	ds	2
   722  0000BD                     measure_capacitance@Cin:
   723                           	opt stack 0
   724                           
   725                           ; 4 bytes @ 0x5D
   726  0000BD                     	ds	4
   727                           tblptru	equ	0xFF8
   728                           tblptrh	equ	0xFF7
   729                           tblptrl	equ	0xFF6
   730                           tablat	equ	0xFF5
   731                           postinc0	equ	0xFEE
   732                           wreg	equ	0xFE8
   733                           postdec1	equ	0xFE5
   734                           fsr1l	equ	0xFE1
   735                           
   736                           	psect	cstackCOMRAM
   737  000001                     __pcstackCOMRAM:
   738                           	opt stack 0
   739  000001                     ??_isr:
   740  000001                     
   741                           ; 1 bytes @ 0x0
   742  000001                     	ds	2
   743  000003                     ??_timer2_init:
   744  000003                     ?___lwdiv:
   745                           	opt stack 0
   746  000003                     ?___lwmod:
   747                           	opt stack 0
   748  000003                     ?___flpack:
   749                           	opt stack 0
   750  000003                     ?_frexp:
   751                           	opt stack 0
   752  000003                     ?___flneg:
   753                           	opt stack 0
   754  000003                     ser_putch@c:
   755                           	opt stack 0
   756  000003                     lcd_write4bits@value:
   757                           	opt stack 0
   758  000003                     lcd_init@fourbitmode:
   759                           	opt stack 0
   760  000003                     delay10ms@period_10ms:
   761                           	opt stack 0
   762  000003                     ___lwdiv@dividend:
   763                           	opt stack 0
   764  000003                     ___lwmod@dividend:
   765                           	opt stack 0
   766  000003                     ___flpack@arg:
   767                           	opt stack 0
   768  000003                     ___flge@ff1:
   769                           	opt stack 0
   770  000003                     ___flneg@f1:
   771                           	opt stack 0
   772  000003                     frexp@value:
   773                           	opt stack 0
   774                           
   775                           ; 4 bytes @ 0x2
   776  000003                     	ds	1
   777  000004                     ser_puts@s:
   778                           	opt stack 0
   779  000004                     timer2_init@ps_mode:
   780                           	opt stack 0
   781  000004                     lcd_send@mode:
   782                           	opt stack 0
   783  000004                     _lcd_init$265:
   784                           	opt stack 0
   785                           
   786                           ; 2 bytes @ 0x3
   787  000004                     	ds	1
   788  000005                     ??_delay10ms:
   789  000005                     timer2_init@ps:
   790                           	opt stack 0
   791  000005                     lcd_send@value:
   792                           	opt stack 0
   793  000005                     ___lwdiv@divisor:
   794                           	opt stack 0
   795  000005                     ___lwmod@divisor:
   796                           	opt stack 0
   797                           
   798                           ; 2 bytes @ 0x4
   799  000005                     	ds	1
   800  000006                     lcd_putch@value:
   801                           	opt stack 0
   802  000006                     lcd_command@value:
   803                           	opt stack 0
   804                           
   805                           ; 1 bytes @ 0x5
   806  000006                     	ds	1
   807  000007                     ??_lcd_puts:
   808  000007                     ??_lcd_clear:
   809  000007                     lcd_gotoxy@row:
   810                           	opt stack 0
   811  000007                     lcd_begin@dotsize:
   812                           	opt stack 0
   813  000007                     output_putch@c:
   814                           	opt stack 0
   815  000007                     ___flpack@exp:
   816                           	opt stack 0
   817  000007                     frexp@eptr:
   818                           	opt stack 0
   819  000007                     ___lwmod@counter:
   820                           	opt stack 0
   821  000007                     ___lwdiv@quotient:
   822                           	opt stack 0
   823  000007                     delay10ms@ms:
   824                           	opt stack 0
   825  000007                     ___flge@ff2:
   826                           	opt stack 0
   827                           
   828                           ; 4 bytes @ 0x6
   829  000007                     	ds	1
   830  000008                     ??_put_str:
   831  000008                     ??_frexp:
   832  000008                     ??_lcd_begin:
   833  000008                     lcd_gotoxy@col:
   834                           	opt stack 0
   835  000008                     lcd_puts@i:
   836                           	opt stack 0
   837  000008                     ___flpack@sign:
   838                           	opt stack 0
   839                           
   840                           ; 1 bytes @ 0x7
   841  000008                     	ds	1
   842  000009                     ??___flpack:
   843  000009                     lcd_puts@string:
   844                           	opt stack 0
   845  000009                     lcd_begin@lines:
   846                           	opt stack 0
   847  000009                     put_str@i:
   848                           	opt stack 0
   849  000009                     ___lwdiv@counter:
   850                           	opt stack 0
   851  000009                     lcd_gotoxy@row_offsets:
   852                           	opt stack 0
   853                           
   854                           ; 4 bytes @ 0x8
   855  000009                     	ds	1
   856  00000A                     put_str@s:
   857                           	opt stack 0
   858  00000A                     format_number@n:
   859                           	opt stack 0
   860                           
   861                           ; 2 bytes @ 0x9
   862  00000A                     	ds	1
   863  00000B                     delay10ms@run:
   864                           	opt stack 0
   865                           
   866                           ; 1 bytes @ 0xA
   867  00000B                     	ds	1
   868  00000C                     format_number@base:
   869                           	opt stack 0
   870                           
   871                           ; 1 bytes @ 0xB
   872  00000C                     	ds	1
   873  00000D                     ??_print_unit:
   874  00000D                     ?___fldiv:
   875                           	opt stack 0
   876  00000D                     ?___awtofl:
   877                           	opt stack 0
   878  00000D                     ?___lltofl:
   879                           	opt stack 0
   880  00000D                     indicator@indicate:
   881                           	opt stack 0
   882  00000D                     format_number@pad:
   883                           	opt stack 0
   884  00000D                     ___awtofl@c:
   885                           	opt stack 0
   886  00000D                     ___fldiv@f1:
   887                           	opt stack 0
   888  00000D                     ___lltofl@c:
   889                           	opt stack 0
   890                           
   891                           ; 4 bytes @ 0xC
   892  00000D                     	ds	1
   893  00000E                     ??_format_number:
   894                           
   895                           ; 0 bytes @ 0xD
   896  00000E                     	ds	2
   897  000010                     format_number@buf:
   898                           	opt stack 0
   899                           
   900                           ; 32 bytes @ 0xF
   901  000010                     	ds	1
   902  000011                     ___awtofl@sign:
   903                           	opt stack 0
   904  000011                     ___fldiv@f2:
   905                           	opt stack 0
   906                           
   907                           ; 4 bytes @ 0x10
   908  000011                     	ds	4
   909  000015                     ___fldiv@f3:
   910                           	opt stack 0
   911                           
   912                           ; 4 bytes @ 0x14
   913  000015                     	ds	4
   914  000019                     ___fldiv@cntr:
   915                           	opt stack 0
   916                           
   917                           ; 1 bytes @ 0x18
   918  000019                     	ds	1
   919  00001A                     ___fldiv@exp:
   920                           	opt stack 0
   921                           
   922                           ; 1 bytes @ 0x19
   923  00001A                     	ds	1
   924  00001B                     ___fldiv@sign:
   925                           	opt stack 0
   926                           
   927                           ; 1 bytes @ 0x1A
   928  00001B                     	ds	1
   929  00001C                     ?___flmul:
   930                           	opt stack 0
   931  00001C                     ___flmul@f1:
   932                           	opt stack 0
   933                           
   934                           ; 4 bytes @ 0x1B
   935  00001C                     	ds	4
   936  000020                     ___flmul@f2:
   937                           	opt stack 0
   938                           
   939                           ; 4 bytes @ 0x1F
   940  000020                     	ds	4
   941  000024                     ??___flmul:
   942                           
   943                           ; 0 bytes @ 0x23
   944  000024                     	ds	12
   945  000030                     _format_number$188:
   946                           	opt stack 0
   947                           
   948                           ; 2 bytes @ 0x2F
   949  000030                     	ds	1
   950  000031                     ___flmul@exp:
   951                           	opt stack 0
   952                           
   953                           ; 1 bytes @ 0x30
   954  000031                     	ds	1
   955  000032                     format_number@padchar:
   956                           	opt stack 0
   957  000032                     ___flmul@sign:
   958                           	opt stack 0
   959                           
   960                           ; 1 bytes @ 0x31
   961  000032                     	ds	1
   962  000033                     format_number@di:
   963                           	opt stack 0
   964  000033                     ___flmul@f3_as_product:
   965                           	opt stack 0
   966                           
   967                           ; 4 bytes @ 0x32
   968  000033                     	ds	1
   969  000034                     format_number@i:
   970                           	opt stack 0
   971                           
   972                           ; 1 bytes @ 0x33
   973  000034                     	ds	1
   974  000035                     ?_measure_freq:
   975                           	opt stack 0
   976  000035                     print_reading@measurement:
   977                           	opt stack 0
   978  000035                     format_xint32@x:
   979                           	opt stack 0
   980                           
   981                           ; 4 bytes @ 0x34
   982  000035                     	ds	2
   983  000037                     ??_measure_freq:
   984  000037                     ?___fladd:
   985                           	opt stack 0
   986  000037                     _print_reading$1146:
   987                           	opt stack 0
   988  000037                     ___fladd@f1:
   989                           	opt stack 0
   990                           
   991                           ; 4 bytes @ 0x36
   992  000037                     	ds	2
   993  000039                     measure_freq@prev:
   994                           	opt stack 0
   995  000039                     _print_reading$1147:
   996                           	opt stack 0
   997                           
   998                           ; 2 bytes @ 0x38
   999  000039                     	ds	1
  1000  00003A                     measure_freq@i:
  1001                           	opt stack 0
  1002                           
  1003                           ; 1 bytes @ 0x39
  1004  00003A                     	ds	1
  1005  00003B                     measure_freq@count:
  1006                           	opt stack 0
  1007  00003B                     ___fladd@f2:
  1008                           	opt stack 0
  1009                           
  1010                           ; 4 bytes @ 0x3A
  1011  00003B                     	ds	2
  1012  00003D                     ?___lwtofl:
  1013                           	opt stack 0
  1014  00003D                     ___lwtofl@c:
  1015                           	opt stack 0
  1016                           
  1017                           ; 2 bytes @ 0x3C
  1018  00003D                     	ds	2
  1019  00003F                     ??___fladd:
  1020                           
  1021                           ; 0 bytes @ 0x3E
  1022  00003F                     	ds	1
  1023  000040                     ___fladd@sign:
  1024                           	opt stack 0
  1025                           
  1026                           ; 1 bytes @ 0x3F
  1027  000040                     	ds	1
  1028  000041                     calibrate@i:
  1029                           	opt stack 0
  1030  000041                     ___fladd@exp2:
  1031                           	opt stack 0
  1032                           
  1033                           ; 1 bytes @ 0x40
  1034  000041                     	ds	1
  1035  000042                     ___fladd@exp1:
  1036                           	opt stack 0
  1037                           
  1038                           ; 1 bytes @ 0x41
  1039  000042                     	ds	1
  1040  000043                     ?___flsub:
  1041                           	opt stack 0
  1042  000043                     ?_eval_poly:
  1043                           	opt stack 0
  1044  000043                     ___flsub@f1:
  1045                           	opt stack 0
  1046  000043                     eval_poly@x:
  1047                           	opt stack 0
  1048                           
  1049                           ; 4 bytes @ 0x42
  1050  000043                     	ds	4
  1051  000047                     eval_poly@d:
  1052                           	opt stack 0
  1053  000047                     ___flsub@f2:
  1054                           	opt stack 0
  1055                           
  1056                           ; 4 bytes @ 0x46
  1057  000047                     	ds	1
  1058  000048                     eval_poly@n:
  1059                           	opt stack 0
  1060                           
  1061                           ; 2 bytes @ 0x47
  1062  000048                     	ds	2
  1063  00004A                     ??_eval_poly:
  1064                           
  1065                           ; 0 bytes @ 0x49
  1066  00004A                     	ds	1
  1067  00004B                     eval_poly@res:
  1068                           	opt stack 0
  1069                           
  1070                           ; 4 bytes @ 0x4A
  1071  00004B                     	ds	4
  1072  00004F                     ?_ldexp:
  1073                           	opt stack 0
  1074  00004F                     ?_log:
  1075                           	opt stack 0
  1076  00004F                     ldexp@value:
  1077                           	opt stack 0
  1078  00004F                     log@x:
  1079                           	opt stack 0
  1080                           
  1081                           ; 4 bytes @ 0x4E
  1082  00004F                     	ds	4
  1083  000053                     ldexp@newexp:
  1084                           	opt stack 0
  1085  000053                     log@exponent:
  1086                           	opt stack 0
  1087                           
  1088                           ; 2 bytes @ 0x52
  1089  000053                     	ds	2
  1090  000055                     ??_ldexp:
  1091  000055                     ?_log10:
  1092                           	opt stack 0
  1093  000055                     log10@x:
  1094                           	opt stack 0
  1095                           
  1096                           ; 4 bytes @ 0x54
  1097  000055                     	ds	4
  1098  000059                     ___fltol@sign1:
  1099                           	opt stack 0
  1100                           
  1101                           ; 1 bytes @ 0x58
  1102  000059                     	ds	1
  1103  00005A                     ___fltol@exp1:
  1104                           	opt stack 0
  1105                           
  1106                           ; 1 bytes @ 0x59
  1107  00005A                     	ds	1
  1108  00005B                     ___altofl@sign:
  1109                           	opt stack 0
  1110                           
  1111                           ; 1 bytes @ 0x5A
  1112  00005B                     	ds	1
  1113  00005C                     tblptru	equ	0xFF8
  1114                           tblptrh	equ	0xFF7
  1115                           tblptrl	equ	0xFF6
  1116                           tablat	equ	0xFF5
  1117                           postinc0	equ	0xFEE
  1118                           wreg	equ	0xFE8
  1119                           postdec1	equ	0xFE5
  1120                           fsr1l	equ	0xFE1
  1121                           
  1122                           ; 0 bytes @ 0x5B
  1123 ;;
  1124 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1125 ;;
  1126 ;; *************** function _main *****************
  1127 ;; Defined at:
  1128 ;;		line 115 in file "../../../src/LC-meter.c"
  1129 ;; Parameters:    Size  Location     Type
  1130 ;;		None
  1131 ;; Auto vars:     Size  Location     Type
  1132 ;;		None
  1133 ;; Return value:  Size  Location     Type
  1134 ;;		None               void
  1135 ;; Registers used:
  1136 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1137 ;; Tracked objects:
  1138 ;;		On entry : 0/0
  1139 ;;		On exit  : F/0
  1140 ;;		Unchanged: 0/0
  1141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1142 ;;      Params:         0       0       0       0       0       0       0       0       0
  1143 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1144 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1145 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1146 ;;Total ram usage:        0 bytes
  1147 ;; Hardware stack levels required when called:    8
  1148 ;; This function calls:
  1149 ;;		_calibrate
  1150 ;;		_delay10ms
  1151 ;;		_format_double
  1152 ;;		_indicator
  1153 ;;		_lcd_begin
  1154 ;;		_lcd_clear
  1155 ;;		_lcd_gotoxy
  1156 ;;		_lcd_init
  1157 ;;		_lcd_puts
  1158 ;;		_measure_capacitance
  1159 ;;		_measure_inductance
  1160 ;;		_ser_init
  1161 ;;		_ser_puts
  1162 ;;		_timer2_init
  1163 ;; This function is called by:
  1164 ;;		Startup code after reset
  1165 ;; This function uses a non-reentrant model
  1166 ;;
  1167                           
  1168                           	psect	text0
  1169  001BCC                     __ptext0:
  1170                           	opt stack 0
  1171  001BCC                     _main:
  1172                           	opt stack 23
  1173                           
  1174                           ;LC-meter.c: 116: bres = msecpart = msecs = seconds = 0;
  1175                           
  1176                           ;incstack = 0
  1177  001BCC  0100               	movlb	0	; () banked
  1178  001BCE  6BDD               	clrf	_seconds& (0+255),b	;volatile
  1179  001BD0  6BDE               	clrf	(_seconds+1)& (0+255),b	;volatile
  1180  001BD2  6BDF               	clrf	(_seconds+2)& (0+255),b	;volatile
  1181  001BD4  6BE0               	clrf	(_seconds+3)& (0+255),b	;volatile
  1182  001BD6  C0DD  F0D9         	movff	_seconds,_msecs	;volatile
  1183  001BDA  C0DE  F0DA         	movff	_seconds+1,_msecs+1	;volatile
  1184  001BDE  C0DF  F0DB         	movff	_seconds+2,_msecs+2	;volatile
  1185  001BE2  C0E0  F0DC         	movff	_seconds+3,_msecs+3	;volatile
  1186  001BE6  C0D9  F0F8         	movff	_msecs,_msecpart	;volatile
  1187  001BEA  C0DA  F0F9         	movff	_msecs+1,_msecpart+1	;volatile
  1188  001BEE  C0F8  F0F6         	movff	_msecpart,_bres	;volatile
  1189  001BF2  C0F9  F0F7         	movff	_msecpart+1,_bres+1	;volatile
  1190                           
  1191                           ;LC-meter.c: 118: CCal = 1000;
  1192  001BF6  6BF2               	clrf	_CCal& (0+255),b
  1193  001BF8  6BF3               	clrf	(_CCal+1)& (0+255),b
  1194  001BFA  0E7A               	movlw	122
  1195  001BFC  6FF4               	movwf	(_CCal+2)& (0+255),b
  1196  001BFE  0E44               	movlw	68
  1197  001C00  6FF5               	movwf	(_CCal+3)& (0+255),b
  1198                           
  1199                           ;LC-meter.c: 127: TRISA = 0b11001111;
  1200  001C02  0ECF               	movlw	207
  1201  001C04  6E92               	movwf	3986,c	;volatile
  1202                           
  1203                           ; BSR set to: 0
  1204                           ;LC-meter.c: 129: T0CS = 1;
  1205  001C06  8AD5               	bsf	4053,5,c	;volatile
  1206                           
  1207                           ; BSR set to: 0
  1208                           ;LC-meter.c: 130: T0SE = 1;
  1209  001C08  88D5               	bsf	4053,4,c	;volatile
  1210                           
  1211                           ; BSR set to: 0
  1212                           ;LC-meter.c: 141: nRBPU = 0;
  1213  001C0A  9EF1               	bcf	intcon2,7,c	;volatile
  1214                           
  1215                           ; BSR set to: 0
  1216                           ;LC-meter.c: 144: TRISC3 = 0;
  1217  001C0C  9694               	bcf	3988,3,c	;volatile
  1218                           
  1219                           ; BSR set to: 0
  1220                           ;LC-meter.c: 145: RC3 = ((1) == 0);
  1221  001C0E  9682               	bcf	3970,3,c	;volatile
  1222                           
  1223                           ; BSR set to: 0
  1224                           ;LC-meter.c: 147: SSPEN = 0;
  1225  001C10  9AC6               	bcf	4038,5,c	;volatile
  1226                           
  1227                           ; BSR set to: 0
  1228                           ;LC-meter.c: 152: timer2_init(0b000 | 0x80);
  1229  001C12  0E80               	movlw	128
  1230  001C14  EC99  F013         	call	_timer2_init
  1231                           
  1232                           ;LC-meter.c: 157: TRISC1 = 0;
  1233  001C18  9294               	bcf	3988,1,c	;volatile
  1234                           
  1235                           ;LC-meter.c: 160: TRISC3 = 0;
  1236  001C1A  9694               	bcf	3988,3,c	;volatile
  1237                           
  1238                           ;LC-meter.c: 162: TRISC0 = 1;
  1239  001C1C  8094               	bsf	3988,0,c	;volatile
  1240                           
  1241                           ;LC-meter.c: 163: TRISC2 = 1;
  1242  001C1E  8494               	bsf	3988,2,c	;volatile
  1243                           
  1244                           ;LC-meter.c: 169: lcd_init(!0);
  1245  001C20  0E01               	movlw	1
  1246  001C22  EC27  F015         	call	_lcd_init
  1247                           
  1248                           ; BSR set to: 0
  1249                           ;LC-meter.c: 170: lcd_begin(2, 1);
  1250  001C26  0E01               	movlw	1
  1251  001C28  6E07               	movwf	lcd_begin@dotsize,c
  1252  001C2A  0E02               	movlw	2
  1253  001C2C  EC64  F00F         	call	_lcd_begin
  1254                           
  1255                           ;LC-meter.c: 173: TRISC |= (1 << 4);
  1256  001C30  8894               	bsf	3988,4,c	;volatile
  1257                           
  1258                           ;LC-meter.c: 174: TRISC &= ~(1 << 5);
  1259  001C32  9A94               	bcf	3988,5,c	;volatile
  1260                           
  1261                           ;LC-meter.c: 176: PORTC &= ~(1 << 5);
  1262  001C34  9A82               	bcf	3970,5,c	;volatile
  1263                           
  1264                           ;LC-meter.c: 177: delay10ms(50);
  1265  001C36  6A04               	clrf	delay10ms@period_10ms+1,c
  1266  001C38  0E32               	movlw	50
  1267  001C3A  6E03               	movwf	delay10ms@period_10ms,c
  1268  001C3C  EC6C  F013         	call	_delay10ms	;wreg free
  1269                           
  1270                           ; BSR set to: 0
  1271                           ;LC-meter.c: 178: PORTC |= (1 << 5);
  1272  001C40  8A82               	bsf	3970,5,c	;volatile
  1273                           
  1274                           ; BSR set to: 0
  1275                           ;LC-meter.c: 179: delay10ms(50);
  1276  001C42  6A04               	clrf	delay10ms@period_10ms+1,c
  1277  001C44  0E32               	movlw	50
  1278  001C46  6E03               	movwf	delay10ms@period_10ms,c
  1279  001C48  EC6C  F013         	call	_delay10ms	;wreg free
  1280                           
  1281                           ; BSR set to: 0
  1282                           ;LC-meter.c: 180: PORTC &= ~(1 << 5);
  1283  001C4C  9A82               	bcf	3970,5,c	;volatile
  1284                           
  1285                           ; BSR set to: 0
  1286                           ;LC-meter.c: 181: delay10ms(50);
  1287  001C4E  6A04               	clrf	delay10ms@period_10ms+1,c
  1288  001C50  0E32               	movlw	50
  1289  001C52  6E03               	movwf	delay10ms@period_10ms,c
  1290  001C54  EC6C  F013         	call	_delay10ms	;wreg free
  1291                           
  1292                           ; BSR set to: 0
  1293                           ;LC-meter.c: 182: PORTC |= (1 << 5);
  1294  001C58  8A82               	bsf	3970,5,c	;volatile
  1295                           
  1296                           ; BSR set to: 0
  1297                           ;LC-meter.c: 183: delay10ms(50);
  1298  001C5A  6A04               	clrf	delay10ms@period_10ms+1,c
  1299  001C5C  0E32               	movlw	50
  1300  001C5E  6E03               	movwf	delay10ms@period_10ms,c
  1301  001C60  EC6C  F013         	call	_delay10ms	;wreg free
  1302                           
  1303                           ; BSR set to: 0
  1304                           ;LC-meter.c: 184: PORTC &= ~(1 << 5);
  1305  001C64  9A82               	bcf	3970,5,c	;volatile
  1306                           
  1307                           ; BSR set to: 0
  1308                           ;LC-meter.c: 187: ser_init();
  1309  001C66  EC94  F015         	call	_ser_init	;wreg free
  1310                           
  1311                           ; BSR set to: 0
  1312                           ;LC-meter.c: 192: TRISC &= ~0b01000000;
  1313  001C6A  9C94               	bcf	3988,6,c	;volatile
  1314                           
  1315                           ; BSR set to: 0
  1316                           ;LC-meter.c: 194: PEIE = 1;
  1317  001C6C  8CF2               	bsf	intcon,6,c	;volatile
  1318                           
  1319                           ; BSR set to: 0
  1320                           ;LC-meter.c: 195: GIE = 1;
  1321  001C6E  8EF2               	bsf	intcon,7,c	;volatile
  1322                           
  1323                           ; BSR set to: 0
  1324                           ;LC-meter.c: 198: putchar_ptr = &lcd_putch;
  1325  001C70  0EF2               	movlw	low _lcd_putch
  1326  001C72  6FFE               	movwf	_putchar_ptr& (0+255),b
  1327  001C74  0E2B               	movlw	high _lcd_putch
  1328  001C76  6FFF               	movwf	(_putchar_ptr+1)& (0+255),b
  1329                           
  1330                           ; BSR set to: 0
  1331                           ;LC-meter.c: 205: lcd_gotoxy(0, 0);
  1332  001C78  0E00               	movlw	0
  1333  001C7A  6A07               	clrf	lcd_gotoxy@row,c
  1334  001C7C  ECD5  F014         	call	_lcd_gotoxy
  1335                           
  1336                           ;LC-meter.c: 207: lcd_puts("LC-meter ");
  1337  001C80  0E75               	movlw	STR_13& (0+255)
  1338  001C82  ECF1  F014         	call	_lcd_puts
  1339                           
  1340                           ;LC-meter.c: 208: format_double( CCal);
  1341  001C86  C0F2  F09A         	movff	_CCal,format_double@num
  1342  001C8A  C0F3  F09B         	movff	_CCal+1,format_double@num+1
  1343  001C8E  C0F4  F09C         	movff	_CCal+2,format_double@num+2
  1344  001C92  C0F5  F09D         	movff	_CCal+3,format_double@num+3
  1345  001C96  EC08  F00B         	call	_format_double	;wreg free
  1346                           
  1347                           ;LC-meter.c: 214: delay10ms(200);
  1348  001C9A  6A04               	clrf	delay10ms@period_10ms+1,c
  1349  001C9C  0EC8               	movlw	200
  1350  001C9E  6E03               	movwf	delay10ms@period_10ms,c
  1351  001CA0  EC6C  F013         	call	_delay10ms	;wreg free
  1352                           
  1353                           ; BSR set to: 0
  1354                           ;LC-meter.c: 217: calibrate();
  1355  001CA4  ECEE  F00E         	call	_calibrate	;wreg free
  1356                           
  1357                           ;LC-meter.c: 219: lcd_clear();
  1358  001CA8  ECE6  F015         	call	_lcd_clear	;wreg free
  1359  001CAC                     l4277:
  1360                           
  1361                           ;LC-meter.c: 230: ser_puts("...\r\n");
  1362  001CAC  0E98               	movlw	STR_14& (0+255)
  1363  001CAE  EC80  F015         	call	_ser_puts
  1364                           
  1365                           ;LC-meter.c: 231: if(RC4)
  1366  001CB2  A882               	btfss	3970,4,c	;volatile
  1367  001CB4  D003               	goto	l4283
  1368                           
  1369                           ;LC-meter.c: 232: measure_capacitance();
  1370  001CB6  EC01  F007         	call	_measure_capacitance	;wreg free
  1371  001CBA  D002               	goto	l4285
  1372  001CBC                     l4283:
  1373                           
  1374                           ;LC-meter.c: 233: else
  1375                           ;LC-meter.c: 234: measure_inductance();
  1376  001CBC  EC70  F004         	call	_measure_inductance	;wreg free
  1377  001CC0                     l4285:
  1378                           
  1379                           ;LC-meter.c: 236: indicator(1);
  1380  001CC0  0E01               	movlw	1
  1381  001CC2  ECC8  F015         	call	_indicator
  1382                           
  1383                           ;LC-meter.c: 237: delay10ms(30);
  1384  001CC6  6A04               	clrf	delay10ms@period_10ms+1,c
  1385  001CC8  0E1E               	movlw	30
  1386  001CCA  6E03               	movwf	delay10ms@period_10ms,c
  1387  001CCC  EC6C  F013         	call	_delay10ms	;wreg free
  1388                           
  1389                           ; BSR set to: 0
  1390                           ;LC-meter.c: 238: indicator(0);
  1391  001CD0  0E00               	movlw	0
  1392  001CD2  ECC8  F015         	call	_indicator
  1393                           
  1394                           ;LC-meter.c: 239: delay10ms(20);
  1395  001CD6  6A04               	clrf	delay10ms@period_10ms+1,c
  1396  001CD8  0E14               	movlw	20
  1397  001CDA  6E03               	movwf	delay10ms@period_10ms,c
  1398  001CDC  EC6C  F013         	call	_delay10ms	;wreg free
  1399                           
  1400                           ;LC-meter.c: 240: }
  1401  001CE0  D7E5               	goto	l4277
  1402  001CE2                     __end_of_main:
  1403                           	opt stack 0
  1404                           tblptru	equ	0xFF8
  1405                           tblptrh	equ	0xFF7
  1406                           tblptrl	equ	0xFF6
  1407                           tablat	equ	0xFF5
  1408                           intcon	equ	0xFF2
  1409                           intcon2	equ	0xFF1
  1410                           postinc0	equ	0xFEE
  1411                           wreg	equ	0xFE8
  1412                           postdec1	equ	0xFE5
  1413                           fsr1l	equ	0xFE1
  1414                           
  1415 ;; *************** function _timer2_init *****************
  1416 ;; Defined at:
  1417 ;;		line 81 in file "../../../lib/timer.c"
  1418 ;; Parameters:    Size  Location     Type
  1419 ;;  ps_mode         1    wreg     unsigned char 
  1420 ;; Auto vars:     Size  Location     Type
  1421 ;;  ps_mode         1    3[COMRAM] unsigned char 
  1422 ;;  postscaler      1    0        unsigned char 
  1423 ;;  ps              1    4[COMRAM] unsigned char 
  1424 ;; Return value:  Size  Location     Type
  1425 ;;		None               void
  1426 ;; Registers used:
  1427 ;;		wreg, status,2, status,0
  1428 ;; Tracked objects:
  1429 ;;		On entry : F/0
  1430 ;;		On exit  : 0/0
  1431 ;;		Unchanged: 0/0
  1432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1433 ;;      Params:         0       0       0       0       0       0       0       0       0
  1434 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1435 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1436 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1437 ;;Total ram usage:        4 bytes
  1438 ;; Hardware stack levels used:    1
  1439 ;; Hardware stack levels required when called:    1
  1440 ;; This function calls:
  1441 ;;		Nothing
  1442 ;; This function is called by:
  1443 ;;		_main
  1444 ;; This function uses a non-reentrant model
  1445 ;;
  1446                           
  1447                           	psect	text1
  1448  002732                     __ptext1:
  1449                           	opt stack 0
  1450  002732                     _timer2_init:
  1451                           	opt stack 29
  1452                           
  1453                           ; BSR set to: 0
  1454                           ;incstack = 0
  1455                           ;timer2_init@ps_mode stored from wreg
  1456  002732  6E04               	movwf	timer2_init@ps_mode,c
  1457                           
  1458                           ; BSR set to: 0
  1459                           ;timer.c: 82: unsigned char ps = ps_mode & 0b1111;
  1460  002734  5004               	movf	timer2_init@ps_mode,w,c
  1461  002736  0B0F               	andlw	15
  1462  002738  6E05               	movwf	timer2_init@ps,c
  1463                           
  1464                           ; BSR set to: 0
  1465                           ;timer.c: 86: TOUTPS0 = postscaler & 1;
  1466                           
  1467                           ; BSR set to: 0
  1468  00273A  96CA               	bcf	4042,3,c	;volatile
  1469                           
  1470                           ;timer.c: 87: TOUTPS1 = (postscaler >> 1) & 1;
  1471  00273C  98CA               	bcf	4042,4,c	;volatile
  1472                           
  1473                           ;timer.c: 88: TOUTPS2 = (postscaler >> 2) & 1;
  1474  00273E  9ACA               	bcf	4042,5,c	;volatile
  1475                           
  1476                           ;timer.c: 90: T2CKPS0 = (ps >> 1) & 1;
  1477  002740  C005  F003         	movff	timer2_init@ps,??_timer2_init
  1478  002744  90D8               	bcf	status,0,c
  1479  002746  3203               	rrcf	??_timer2_init,f,c
  1480  002748  3003               	rrcf	??_timer2_init,w,c
  1481  00274A  B0D8               	btfsc	status,0,c
  1482  00274C  D002               	bra	u2495
  1483  00274E  90CA               	bcf	4042,0,c	;volatile
  1484  002750  D001               	bra	u2496
  1485  002752                     u2495:
  1486  002752  80CA               	bsf	4042,0,c	;volatile
  1487  002754                     u2496:
  1488                           
  1489                           ;timer.c: 91: T2CKPS1 = (ps >> 2) & 1;
  1490  002754  C005  F003         	movff	timer2_init@ps,??_timer2_init
  1491  002758  90D8               	bcf	status,0,c
  1492  00275A  3203               	rrcf	??_timer2_init,f,c
  1493  00275C  90D8               	bcf	status,0,c
  1494  00275E  3203               	rrcf	??_timer2_init,f,c
  1495  002760  3003               	rrcf	??_timer2_init,w,c
  1496  002762  B0D8               	btfsc	status,0,c
  1497  002764  D002               	bra	u2505
  1498  002766  92CA               	bcf	4042,1,c	;volatile
  1499  002768  D001               	bra	u2506
  1500  00276A                     u2505:
  1501  00276A  82CA               	bsf	4042,1,c	;volatile
  1502  00276C                     u2506:
  1503                           
  1504                           ;timer.c: 93: TMR2 = 0;
  1505  00276C  6ACC               	clrf	4044,c	;volatile
  1506                           
  1507                           ;timer.c: 95: TMR2ON = 1;
  1508  00276E  84CA               	bsf	4042,2,c	;volatile
  1509                           
  1510                           ;timer.c: 97: TMR2IF = 0;
  1511  002770  929E               	bcf	3998,1,c	;volatile
  1512                           
  1513                           ;timer.c: 98: TMR2IE = !!(ps_mode & 0x80);
  1514  002772  AE04               	btfss	timer2_init@ps_mode,7,c
  1515  002774  D002               	goto	u2510
  1516  002776  829D               	bsf	3997,1,c	;volatile
  1517  002778  D001               	goto	l167
  1518  00277A                     u2510:
  1519  00277A  929D               	bcf	3997,1,c	;volatile
  1520  00277C                     l167:
  1521  00277C  0012               	return		;funcret
  1522  00277E                     __end_of_timer2_init:
  1523                           	opt stack 0
  1524                           tblptru	equ	0xFF8
  1525                           tblptrh	equ	0xFF7
  1526                           tblptrl	equ	0xFF6
  1527                           tablat	equ	0xFF5
  1528                           intcon	equ	0xFF2
  1529                           intcon2	equ	0xFF1
  1530                           postinc0	equ	0xFEE
  1531                           wreg	equ	0xFE8
  1532                           postdec1	equ	0xFE5
  1533                           fsr1l	equ	0xFE1
  1534                           status	equ	0xFD8
  1535                           
  1536 ;; *************** function _ser_init *****************
  1537 ;; Defined at:
  1538 ;;		line 125 in file "../../../lib/ser.c"
  1539 ;; Parameters:    Size  Location     Type
  1540 ;;		None
  1541 ;; Auto vars:     Size  Location     Type
  1542 ;;		None
  1543 ;; Return value:  Size  Location     Type
  1544 ;;		None               void
  1545 ;; Registers used:
  1546 ;;		wreg, status,2
  1547 ;; Tracked objects:
  1548 ;;		On entry : F/0
  1549 ;;		On exit  : F/0
  1550 ;;		Unchanged: 0/0
  1551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1552 ;;      Params:         0       0       0       0       0       0       0       0       0
  1553 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1554 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1555 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1556 ;;Total ram usage:        0 bytes
  1557 ;; Hardware stack levels used:    1
  1558 ;; Hardware stack levels required when called:    1
  1559 ;; This function calls:
  1560 ;;		Nothing
  1561 ;; This function is called by:
  1562 ;;		_main
  1563 ;; This function uses a non-reentrant model
  1564 ;;
  1565                           
  1566                           	psect	text2
  1567  002B28                     __ptext2:
  1568                           	opt stack 0
  1569  002B28                     _ser_init:
  1570                           	opt stack 29
  1571                           
  1572                           ; BSR set to: 0
  1573                           ;ser.c: 128: TRISC6 = 1;
  1574                           
  1575                           ;incstack = 0
  1576  002B28  8C94               	bsf	3988,6,c	;volatile
  1577                           
  1578                           ;ser.c: 129: RC7 = 1;
  1579  002B2A  8E82               	bsf	3970,7,c	;volatile
  1580                           
  1581                           ;ser.c: 131: BRGH = 1;
  1582  002B2C  84AC               	bsf	4012,2,c	;volatile
  1583                           
  1584                           ; BSR set to: 0
  1585                           ;ser.c: 136: SPBRG = ser_brg;
  1586  002B2E  0E1F               	movlw	31
  1587  002B30  6EAF               	movwf	4015,c	;volatile
  1588                           
  1589                           ; BSR set to: 0
  1590                           ;ser.c: 139: TX9 = 0;
  1591  002B32  9CAC               	bcf	4012,6,c	;volatile
  1592                           
  1593                           ; BSR set to: 0
  1594                           ;ser.c: 140: RX9 = 0;
  1595  002B34  9CAB               	bcf	4011,6,c	;volatile
  1596                           
  1597                           ; BSR set to: 0
  1598                           ;ser.c: 142: SYNC = 0;
  1599  002B36  98AC               	bcf	4012,4,c	;volatile
  1600                           
  1601                           ; BSR set to: 0
  1602                           ;ser.c: 143: SPEN = 1;
  1603  002B38  8EAB               	bsf	4011,7,c	;volatile
  1604                           
  1605                           ; BSR set to: 0
  1606                           ;ser.c: 144: CREN = 1;
  1607  002B3A  88AB               	bsf	4011,4,c	;volatile
  1608                           
  1609                           ; BSR set to: 0
  1610                           ;ser.c: 145: TXIE = 0;
  1611  002B3C  989D               	bcf	3997,4,c	;volatile
  1612                           
  1613                           ; BSR set to: 0
  1614                           ;ser.c: 147: TXEN = 1;
  1615  002B3E  8AAC               	bsf	4012,5,c	;volatile
  1616                           
  1617                           ; BSR set to: 0
  1618                           ;ser.c: 148: PEIE = 1;
  1619  002B40  8CF2               	bsf	intcon,6,c	;volatile
  1620                           
  1621                           ; BSR set to: 0
  1622                           ;ser.c: 150: rxiptr = rxoptr = txiptr = txoptr = 0;
  1623  002B42  6A5D               	clrf	_txoptr,c	;volatile
  1624  002B44  6A5C               	clrf	_txiptr,c	;volatile
  1625  002B46  6BEC               	clrf	_rxoptr& (0+255),b	;volatile
  1626  002B48  6BEB               	clrf	_rxiptr& (0+255),b	;volatile
  1627                           
  1628                           ; BSR set to: 0
  1629  002B4A  0012               	return		;funcret
  1630  002B4C                     __end_of_ser_init:
  1631                           	opt stack 0
  1632                           tblptru	equ	0xFF8
  1633                           tblptrh	equ	0xFF7
  1634                           tblptrl	equ	0xFF6
  1635                           tablat	equ	0xFF5
  1636                           intcon	equ	0xFF2
  1637                           intcon2	equ	0xFF1
  1638                           postinc0	equ	0xFEE
  1639                           wreg	equ	0xFE8
  1640                           postdec1	equ	0xFE5
  1641                           fsr1l	equ	0xFE1
  1642                           status	equ	0xFD8
  1643                           
  1644 ;; *************** function _measure_inductance *****************
  1645 ;; Defined at:
  1646 ;;		line 469 in file "../../../src/LC-meter.c"
  1647 ;; Parameters:    Size  Location     Type
  1648 ;;		None
  1649 ;; Auto vars:     Size  Location     Type
  1650 ;;  Lin             4   51[BANK0 ] unsigned char 
  1651 ;;  denominator     4   16[BANK0 ] unsigned char 
  1652 ;;  numerator       4   12[BANK0 ] unsigned char 
  1653 ;;  var             2   49[BANK0 ] unsigned short 
  1654 ;;  unit            1   36[BANK0 ] unsigned char 
  1655 ;; Return value:  Size  Location     Type
  1656 ;;		None               void
  1657 ;; Registers used:
  1658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1659 ;; Tracked objects:
  1660 ;;		On entry : 0/0
  1661 ;;		On exit  : 0/0
  1662 ;;		Unchanged: 0/0
  1663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1664 ;;      Params:         0       0       0       0       0       0       0       0       0
  1665 ;;      Locals:         0      43       0       0       0       0       0       0       0
  1666 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1667 ;;      Totals:         0      43       0       0       0       0       0       0       0
  1668 ;;Total ram usage:       43 bytes
  1669 ;; Hardware stack levels used:    1
  1670 ;; Hardware stack levels required when called:    7
  1671 ;; This function calls:
  1672 ;;		___fldiv
  1673 ;;		___flge
  1674 ;;		___flmul
  1675 ;;		___flsub
  1676 ;;		___fltol
  1677 ;;		___lwtofl
  1678 ;;		_lcd_gotoxy
  1679 ;;		_measure_freq
  1680 ;;		_print_reading
  1681 ;;		_print_unit
  1682 ;;		_put_str
  1683 ;; This function is called by:
  1684 ;;		_main
  1685 ;; This function uses a non-reentrant model
  1686 ;;
  1687                           
  1688                           	psect	text3
  1689  0008E0                     __ptext3:
  1690                           	opt stack 0
  1691  0008E0                     _measure_inductance:
  1692                           	opt stack 23
  1693                           
  1694                           ;LC-meter.c: 470: unsigned char unit;
  1695                           ;LC-meter.c: 471: unsigned short int var;
  1696                           ;LC-meter.c: 473: double Lin, numerator, denominator;
  1697                           ;LC-meter.c: 476: lcd_gotoxy(0, 0);
  1698                           
  1699                           ; BSR set to: 0
  1700                           ;incstack = 0
  1701  0008E0  0E00               	movlw	0
  1702  0008E2  6A07               	clrf	lcd_gotoxy@row,c
  1703  0008E4  ECD5  F014         	call	_lcd_gotoxy
  1704                           
  1705                           ;LC-meter.c: 477: put_str("Inductivity ");
  1706  0008E8  0E5C               	movlw	STR_34& (0+255)
  1707  0008EA  EC0C  F015         	call	_put_str
  1708                           
  1709                           ;LC-meter.c: 479: var = measure_freq();
  1710  0008EE  EC01  F012         	call	_measure_freq	;wreg free
  1711  0008F2  C035  F091         	movff	?_measure_freq,measure_inductance@var
  1712  0008F6  C036  F092         	movff	?_measure_freq+1,measure_inductance@var+1
  1713                           
  1714                           ;LC-meter.c: 481: F3 = (double)var;
  1715  0008FA  C091  F03D         	movff	measure_inductance@var,___lwtofl@c
  1716  0008FE  C092  F03E         	movff	measure_inductance@var+1,___lwtofl@c+1
  1717  000902  EC6B  F015         	call	___lwtofl	;wreg free
  1718  000906  C03D  F0D5         	movff	?___lwtofl,_F3
  1719  00090A  C03E  F0D6         	movff	?___lwtofl+1,_F3+1
  1720  00090E  C03F  F0D7         	movff	?___lwtofl+2,_F3+2
  1721  000912  C040  F0D8         	movff	?___lwtofl+3,_F3+3
  1722                           
  1723                           ;LC-meter.c: 482: if(F3 > F1)
  1724  000916  C0EE  F003         	movff	_F1,___flge@ff1
  1725  00091A  C0EF  F004         	movff	_F1+1,___flge@ff1+1
  1726  00091E  C0F0  F005         	movff	_F1+2,___flge@ff1+2
  1727  000922  C0F1  F006         	movff	_F1+3,___flge@ff1+3
  1728  000926  C0D5  F007         	movff	_F3,___flge@ff2
  1729  00092A  C0D6  F008         	movff	_F3+1,___flge@ff2+1
  1730  00092E  C0D7  F009         	movff	_F3+2,___flge@ff2+2
  1731  000932  C0D8  F00A         	movff	_F3+3,___flge@ff2+3
  1732  000936  ECBF  F013         	call	___flge	;wreg free
  1733  00093A  E208               	bc	l4153
  1734                           
  1735                           ;LC-meter.c: 483: F3 = F1;
  1736  00093C  C0EE  F0D5         	movff	_F1,_F3
  1737  000940  C0EF  F0D6         	movff	_F1+1,_F3+1
  1738  000944  C0F0  F0D7         	movff	_F1+2,_F3+2
  1739  000948  C0F1  F0D8         	movff	_F1+3,_F3+3
  1740  00094C                     l4153:
  1741                           
  1742                           ;LC-meter.c: 485: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 *
      +                           100);
  1743  00094C  C0D1  F047         	movff	_F2,___flsub@f2
  1744  000950  C0D2  F048         	movff	_F2+1,___flsub@f2+1
  1745  000954  C0D3  F049         	movff	_F2+2,___flsub@f2+2
  1746  000958  C0D4  F04A         	movff	_F2+3,___flsub@f2+3
  1747  00095C  C0D1  F043         	movff	_F2,___flsub@f1
  1748  000960  C0D2  F044         	movff	_F2+1,___flsub@f1+1
  1749  000964  C0D3  F045         	movff	_F2+2,___flsub@f1+2
  1750  000968  C0D4  F046         	movff	_F2+3,___flsub@f1+3
  1751  00096C  EC77  F014         	call	___flsub	;wreg free
  1752  000970  C043  F074         	movff	?___flsub,_measure_inductance$1155
  1753  000974  C044  F075         	movff	?___flsub+1,_measure_inductance$1155+1
  1754  000978  C045  F076         	movff	?___flsub+2,_measure_inductance$1155+2
  1755  00097C  C046  F077         	movff	?___flsub+3,_measure_inductance$1155+3
  1756                           
  1757                           ;LC-meter.c: 485: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 *
      +                           100);
  1758  000980  C074  F047         	movff	_measure_inductance$1155,___flsub@f2
  1759  000984  C075  F048         	movff	_measure_inductance$1155+1,___flsub@f2+1
  1760  000988  C076  F049         	movff	_measure_inductance$1155+2,___flsub@f2+2
  1761  00098C  C077  F04A         	movff	_measure_inductance$1155+3,___flsub@f2+3
  1762  000990  C0EE  F020         	movff	_F1,___flmul@f2
  1763  000994  C0EF  F021         	movff	_F1+1,___flmul@f2+1
  1764  000998  C0F0  F022         	movff	_F1+2,___flmul@f2+2
  1765  00099C  C0F1  F023         	movff	_F1+3,___flmul@f2+3
  1766  0009A0  C0EE  F01C         	movff	_F1,___flmul@f1
  1767  0009A4  C0EF  F01D         	movff	_F1+1,___flmul@f1+1
  1768  0009A8  C0F0  F01E         	movff	_F1+2,___flmul@f1+2
  1769  0009AC  C0F1  F01F         	movff	_F1+3,___flmul@f1+3
  1770  0009B0  EC29  F00A         	call	___flmul	;wreg free
  1771  0009B4  C01C  F043         	movff	?___flmul,___flsub@f1
  1772  0009B8  C01D  F044         	movff	?___flmul+1,___flsub@f1+1
  1773  0009BC  C01E  F045         	movff	?___flmul+2,___flsub@f1+2
  1774  0009C0  C01F  F046         	movff	?___flmul+3,___flsub@f1+3
  1775  0009C4  EC77  F014         	call	___flsub	;wreg free
  1776  0009C8  C043  F085         	movff	?___flsub,_measure_inductance$1156
  1777  0009CC  C044  F086         	movff	?___flsub+1,_measure_inductance$1156+1
  1778  0009D0  C045  F087         	movff	?___flsub+2,_measure_inductance$1156+2
  1779  0009D4  C046  F088         	movff	?___flsub+3,_measure_inductance$1156+3
  1780                           
  1781                           ;LC-meter.c: 485: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 *
      +                           100);
  1782  0009D8  C0D5  F020         	movff	_F3,___flmul@f2
  1783  0009DC  C0D6  F021         	movff	_F3+1,___flmul@f2+1
  1784  0009E0  C0D7  F022         	movff	_F3+2,___flmul@f2+2
  1785  0009E4  C0D8  F023         	movff	_F3+3,___flmul@f2+3
  1786  0009E8  C0D5  F01C         	movff	_F3,___flmul@f1
  1787  0009EC  C0D6  F01D         	movff	_F3+1,___flmul@f1+1
  1788  0009F0  C0D7  F01E         	movff	_F3+2,___flmul@f1+2
  1789  0009F4  C0D8  F01F         	movff	_F3+3,___flmul@f1+3
  1790  0009F8  EC29  F00A         	call	___flmul	;wreg free
  1791  0009FC  C01C  F047         	movff	?___flmul,___flsub@f2
  1792  000A00  C01D  F048         	movff	?___flmul+1,___flsub@f2+1
  1793  000A04  C01E  F049         	movff	?___flmul+2,___flsub@f2+2
  1794  000A08  C01F  F04A         	movff	?___flmul+3,___flsub@f2+3
  1795  000A0C  C0EE  F020         	movff	_F1,___flmul@f2
  1796  000A10  C0EF  F021         	movff	_F1+1,___flmul@f2+1
  1797  000A14  C0F0  F022         	movff	_F1+2,___flmul@f2+2
  1798  000A18  C0F1  F023         	movff	_F1+3,___flmul@f2+3
  1799  000A1C  C0EE  F01C         	movff	_F1,___flmul@f1
  1800  000A20  C0EF  F01D         	movff	_F1+1,___flmul@f1+1
  1801  000A24  C0F0  F01E         	movff	_F1+2,___flmul@f1+2
  1802  000A28  C0F1  F01F         	movff	_F1+3,___flmul@f1+3
  1803  000A2C  EC29  F00A         	call	___flmul	;wreg free
  1804  000A30  C01C  F043         	movff	?___flmul,___flsub@f1
  1805  000A34  C01D  F044         	movff	?___flmul+1,___flsub@f1+1
  1806  000A38  C01E  F045         	movff	?___flmul+2,___flsub@f1+2
  1807  000A3C  C01F  F046         	movff	?___flmul+3,___flsub@f1+3
  1808  000A40  EC77  F014         	call	___flsub	;wreg free
  1809  000A44  C043  F089         	movff	?___flsub,_measure_inductance$1157
  1810  000A48  C044  F08A         	movff	?___flsub+1,_measure_inductance$1157+1
  1811  000A4C  C045  F08B         	movff	?___flsub+2,_measure_inductance$1157+2
  1812  000A50  C046  F08C         	movff	?___flsub+3,_measure_inductance$1157+3
  1813                           
  1814                           ;LC-meter.c: 485: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 *
      +                           100);
  1815  000A54  C085  F020         	movff	_measure_inductance$1156,___flmul@f2
  1816  000A58  C086  F021         	movff	_measure_inductance$1156+1,___flmul@f2+1
  1817  000A5C  C087  F022         	movff	_measure_inductance$1156+2,___flmul@f2+2
  1818  000A60  C088  F023         	movff	_measure_inductance$1156+3,___flmul@f2+3
  1819  000A64  C089  F01C         	movff	_measure_inductance$1157,___flmul@f1
  1820  000A68  C08A  F01D         	movff	_measure_inductance$1157+1,___flmul@f1+1
  1821  000A6C  C08B  F01E         	movff	_measure_inductance$1157+2,___flmul@f1+2
  1822  000A70  C08C  F01F         	movff	_measure_inductance$1157+3,___flmul@f1+3
  1823  000A74  EC29  F00A         	call	___flmul	;wreg free
  1824  000A78  C01C  F08D         	movff	?___flmul,_measure_inductance$1158
  1825  000A7C  C01D  F08E         	movff	?___flmul+1,_measure_inductance$1158+1
  1826  000A80  C01E  F08F         	movff	?___flmul+2,_measure_inductance$1158+2
  1827  000A84  C01F  F090         	movff	?___flmul+3,_measure_inductance$1158+3
  1828                           
  1829                           ;LC-meter.c: 485: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 *
      +                           100);
  1830  000A88  C08D  F01C         	movff	_measure_inductance$1158,___flmul@f1
  1831  000A8C  C08E  F01D         	movff	_measure_inductance$1158+1,___flmul@f1+1
  1832  000A90  C08F  F01E         	movff	_measure_inductance$1158+2,___flmul@f1+2
  1833  000A94  C090  F01F         	movff	_measure_inductance$1158+3,___flmul@f1+3
  1834  000A98  0E00               	movlw	0
  1835  000A9A  6E20               	movwf	___flmul@f2,c
  1836  000A9C  0E40               	movlw	64
  1837  000A9E  6E21               	movwf	___flmul@f2+1,c
  1838  000AA0  0E1C               	movlw	28
  1839  000AA2  6E22               	movwf	___flmul@f2+2,c
  1840  000AA4  0E46               	movlw	70
  1841  000AA6  6E23               	movwf	___flmul@f2+3,c
  1842  000AA8  EC29  F00A         	call	___flmul	;wreg free
  1843  000AAC  C01C  F06C         	movff	?___flmul,measure_inductance@numerator
  1844  000AB0  C01D  F06D         	movff	?___flmul+1,measure_inductance@numerator+1
  1845  000AB4  C01E  F06E         	movff	?___flmul+2,measure_inductance@numerator+2
  1846  000AB8  C01F  F06F         	movff	?___flmul+3,measure_inductance@numerator+3
  1847                           
  1848                           ;LC-meter.c: 487: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * 
      +                          F1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1849  000ABC  C0EE  F020         	movff	_F1,___flmul@f2
  1850  000AC0  C0EF  F021         	movff	_F1+1,___flmul@f2+1
  1851  000AC4  C0F0  F022         	movff	_F1+2,___flmul@f2+2
  1852  000AC8  C0F1  F023         	movff	_F1+3,___flmul@f2+3
  1853  000ACC  C0EE  F01C         	movff	_F1,___flmul@f1
  1854  000AD0  C0EF  F01D         	movff	_F1+1,___flmul@f1+1
  1855  000AD4  C0F0  F01E         	movff	_F1+2,___flmul@f1+2
  1856  000AD8  C0F1  F01F         	movff	_F1+3,___flmul@f1+3
  1857  000ADC  EC29  F00A         	call	___flmul	;wreg free
  1858  000AE0  C01C  F078         	movff	?___flmul,_measure_inductance$1159
  1859  000AE4  C01D  F079         	movff	?___flmul+1,_measure_inductance$1159+1
  1860  000AE8  C01E  F07A         	movff	?___flmul+2,_measure_inductance$1159+2
  1861  000AEC  C01F  F07B         	movff	?___flmul+3,_measure_inductance$1159+3
  1862                           
  1863                           ;LC-meter.c: 487: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * 
      +                          F1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1864  000AF0  C0D1  F020         	movff	_F2,___flmul@f2
  1865  000AF4  C0D2  F021         	movff	_F2+1,___flmul@f2+1
  1866  000AF8  C0D3  F022         	movff	_F2+2,___flmul@f2+2
  1867  000AFC  C0D4  F023         	movff	_F2+3,___flmul@f2+3
  1868  000B00  C078  F01C         	movff	_measure_inductance$1159,___flmul@f1
  1869  000B04  C079  F01D         	movff	_measure_inductance$1159+1,___flmul@f1+1
  1870  000B08  C07A  F01E         	movff	_measure_inductance$1159+2,___flmul@f1+2
  1871  000B0C  C07B  F01F         	movff	_measure_inductance$1159+3,___flmul@f1+3
  1872  000B10  EC29  F00A         	call	___flmul	;wreg free
  1873  000B14  C01C  F085         	movff	?___flmul,_measure_inductance$1156
  1874  000B18  C01D  F086         	movff	?___flmul+1,_measure_inductance$1156+1
  1875  000B1C  C01E  F087         	movff	?___flmul+2,_measure_inductance$1156+2
  1876  000B20  C01F  F088         	movff	?___flmul+3,_measure_inductance$1156+3
  1877                           
  1878                           ;LC-meter.c: 487: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * 
      +                          F1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1879  000B24  C0D1  F020         	movff	_F2,___flmul@f2
  1880  000B28  C0D2  F021         	movff	_F2+1,___flmul@f2+1
  1881  000B2C  C0D3  F022         	movff	_F2+2,___flmul@f2+2
  1882  000B30  C0D4  F023         	movff	_F2+3,___flmul@f2+3
  1883  000B34  C085  F01C         	movff	_measure_inductance$1156,___flmul@f1
  1884  000B38  C086  F01D         	movff	_measure_inductance$1156+1,___flmul@f1+1
  1885  000B3C  C087  F01E         	movff	_measure_inductance$1156+2,___flmul@f1+2
  1886  000B40  C088  F01F         	movff	_measure_inductance$1156+3,___flmul@f1+3
  1887  000B44  EC29  F00A         	call	___flmul	;wreg free
  1888  000B48  C01C  F089         	movff	?___flmul,_measure_inductance$1157
  1889  000B4C  C01D  F08A         	movff	?___flmul+1,_measure_inductance$1157+1
  1890  000B50  C01E  F08B         	movff	?___flmul+2,_measure_inductance$1157+2
  1891  000B54  C01F  F08C         	movff	?___flmul+3,_measure_inductance$1157+3
  1892                           
  1893                           ;LC-meter.c: 487: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * 
      +                          F1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1894  000B58  C0D5  F020         	movff	_F3,___flmul@f2
  1895  000B5C  C0D6  F021         	movff	_F3+1,___flmul@f2+1
  1896  000B60  C0D7  F022         	movff	_F3+2,___flmul@f2+2
  1897  000B64  C0D8  F023         	movff	_F3+3,___flmul@f2+3
  1898  000B68  C089  F01C         	movff	_measure_inductance$1157,___flmul@f1
  1899  000B6C  C08A  F01D         	movff	_measure_inductance$1157+1,___flmul@f1+1
  1900  000B70  C08B  F01E         	movff	_measure_inductance$1157+2,___flmul@f1+2
  1901  000B74  C08C  F01F         	movff	_measure_inductance$1157+3,___flmul@f1+3
  1902  000B78  EC29  F00A         	call	___flmul	;wreg free
  1903  000B7C  C01C  F08D         	movff	?___flmul,_measure_inductance$1158
  1904  000B80  C01D  F08E         	movff	?___flmul+1,_measure_inductance$1158+1
  1905  000B84  C01E  F08F         	movff	?___flmul+2,_measure_inductance$1158+2
  1906  000B88  C01F  F090         	movff	?___flmul+3,_measure_inductance$1158+3
  1907                           
  1908                           ;LC-meter.c: 487: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * 
      +                          F1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1909  000B8C  C0D5  F020         	movff	_F3,___flmul@f2
  1910  000B90  C0D6  F021         	movff	_F3+1,___flmul@f2+1
  1911  000B94  C0D7  F022         	movff	_F3+2,___flmul@f2+2
  1912  000B98  C0D8  F023         	movff	_F3+3,___flmul@f2+3
  1913  000B9C  C08D  F01C         	movff	_measure_inductance$1158,___flmul@f1
  1914  000BA0  C08E  F01D         	movff	_measure_inductance$1158+1,___flmul@f1+1
  1915  000BA4  C08F  F01E         	movff	_measure_inductance$1158+2,___flmul@f1+2
  1916  000BA8  C090  F01F         	movff	_measure_inductance$1158+3,___flmul@f1+3
  1917  000BAC  EC29  F00A         	call	___flmul	;wreg free
  1918  000BB0  C01C  F07C         	movff	?___flmul,_measure_inductance$1160
  1919  000BB4  C01D  F07D         	movff	?___flmul+1,_measure_inductance$1160+1
  1920  000BB8  C01E  F07E         	movff	?___flmul+2,_measure_inductance$1160+2
  1921  000BBC  C01F  F07F         	movff	?___flmul+3,_measure_inductance$1160+3
  1922                           
  1923                           ;LC-meter.c: 487: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * 
      +                          F1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1924  000BC0  C0F2  F020         	movff	_CCal,___flmul@f2
  1925  000BC4  C0F3  F021         	movff	_CCal+1,___flmul@f2+1
  1926  000BC8  C0F4  F022         	movff	_CCal+2,___flmul@f2+2
  1927  000BCC  C0F5  F023         	movff	_CCal+3,___flmul@f2+3
  1928  000BD0  C07C  F01C         	movff	_measure_inductance$1160,___flmul@f1
  1929  000BD4  C07D  F01D         	movff	_measure_inductance$1160+1,___flmul@f1+1
  1930  000BD8  C07E  F01E         	movff	_measure_inductance$1160+2,___flmul@f1+2
  1931  000BDC  C07F  F01F         	movff	_measure_inductance$1160+3,___flmul@f1+3
  1932  000BE0  EC29  F00A         	call	___flmul	;wreg free
  1933  000BE4  C01C  F080         	movff	?___flmul,_measure_inductance$1161
  1934  000BE8  C01D  F081         	movff	?___flmul+1,_measure_inductance$1161+1
  1935  000BEC  C01E  F082         	movff	?___flmul+2,_measure_inductance$1161+2
  1936  000BF0  C01F  F083         	movff	?___flmul+3,_measure_inductance$1161+3
  1937                           
  1938                           ;LC-meter.c: 487: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * 
      +                          F1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1939  000BF4  C080  F01C         	movff	_measure_inductance$1161,___flmul@f1
  1940  000BF8  C081  F01D         	movff	_measure_inductance$1161+1,___flmul@f1+1
  1941  000BFC  C082  F01E         	movff	_measure_inductance$1161+2,___flmul@f1+2
  1942  000C00  C083  F01F         	movff	_measure_inductance$1161+3,___flmul@f1+3
  1943  000C04  0EE6               	movlw	230
  1944  000C06  6E20               	movwf	___flmul@f2,c
  1945  000C08  0EE9               	movlw	233
  1946  000C0A  6E21               	movwf	___flmul@f2+1,c
  1947  000C0C  0E1D               	movlw	29
  1948  000C0E  6E22               	movwf	___flmul@f2+2,c
  1949  000C10  0E42               	movlw	66
  1950  000C12  6E23               	movwf	___flmul@f2+3,c
  1951  000C14  EC29  F00A         	call	___flmul	;wreg free
  1952  000C18  C01C  F070         	movff	?___flmul,measure_inductance@denominator
  1953  000C1C  C01D  F071         	movff	?___flmul+1,measure_inductance@denominator+1
  1954  000C20  C01E  F072         	movff	?___flmul+2,measure_inductance@denominator+2
  1955  000C24  C01F  F073         	movff	?___flmul+3,measure_inductance@denominator+3
  1956                           
  1957                           ;LC-meter.c: 489: Lin = (numerator / denominator) * 1e+15l;
  1958  000C28  C070  F011         	movff	measure_inductance@denominator,___fldiv@f2
  1959  000C2C  C071  F012         	movff	measure_inductance@denominator+1,___fldiv@f2+1
  1960  000C30  C072  F013         	movff	measure_inductance@denominator+2,___fldiv@f2+2
  1961  000C34  C073  F014         	movff	measure_inductance@denominator+3,___fldiv@f2+3
  1962  000C38  C06C  F00D         	movff	measure_inductance@numerator,___fldiv@f1
  1963  000C3C  C06D  F00E         	movff	measure_inductance@numerator+1,___fldiv@f1+1
  1964  000C40  C06E  F00F         	movff	measure_inductance@numerator+2,___fldiv@f1+2
  1965  000C44  C06F  F010         	movff	measure_inductance@numerator+3,___fldiv@f1+3
  1966  000C48  EC5F  F011         	call	___fldiv	;wreg free
  1967  000C4C  C00D  F01C         	movff	?___fldiv,___flmul@f1
  1968  000C50  C00E  F01D         	movff	?___fldiv+1,___flmul@f1+1
  1969  000C54  C00F  F01E         	movff	?___fldiv+2,___flmul@f1+2
  1970  000C58  C010  F01F         	movff	?___fldiv+3,___flmul@f1+3
  1971  000C5C  0EA9               	movlw	169
  1972  000C5E  6E20               	movwf	___flmul@f2,c
  1973  000C60  0E5F               	movlw	95
  1974  000C62  6E21               	movwf	___flmul@f2+1,c
  1975  000C64  0E63               	movlw	99
  1976  000C66  6E22               	movwf	___flmul@f2+2,c
  1977  000C68  0E58               	movlw	88
  1978  000C6A  6E23               	movwf	___flmul@f2+3,c
  1979  000C6C  EC29  F00A         	call	___flmul	;wreg free
  1980  000C70  C01C  F093         	movff	?___flmul,measure_inductance@Lin
  1981  000C74  C01D  F094         	movff	?___flmul+1,measure_inductance@Lin+1
  1982  000C78  C01E  F095         	movff	?___flmul+2,measure_inductance@Lin+2
  1983  000C7C  C01F  F096         	movff	?___flmul+3,measure_inductance@Lin+3
  1984                           
  1985                           ;LC-meter.c: 491: if(Lin > 999) {
  1986  000C80  6A03               	clrf	___flge@ff1,c
  1987  000C82  0EC0               	movlw	192
  1988  000C84  6E04               	movwf	___flge@ff1+1,c
  1989  000C86  0E79               	movlw	121
  1990  000C88  6E05               	movwf	___flge@ff1+2,c
  1991  000C8A  0E44               	movlw	68
  1992  000C8C  6E06               	movwf	___flge@ff1+3,c
  1993  000C8E  C093  F007         	movff	measure_inductance@Lin,___flge@ff2
  1994  000C92  C094  F008         	movff	measure_inductance@Lin+1,___flge@ff2+1
  1995  000C96  C095  F009         	movff	measure_inductance@Lin+2,___flge@ff2+2
  1996  000C9A  C096  F00A         	movff	measure_inductance@Lin+3,___flge@ff2+3
  1997  000C9E  ECBF  F013         	call	___flge	;wreg free
  1998  000CA2  E27A               	bc	l4195
  1999                           
  2000                           ;LC-meter.c: 492: if(Lin > (999e+03l)) {
  2001  000CA4  0E80               	movlw	128
  2002  000CA6  6E03               	movwf	___flge@ff1,c
  2003  000CA8  0EE5               	movlw	229
  2004  000CAA  6E04               	movwf	___flge@ff1+1,c
  2005  000CAC  0E73               	movlw	115
  2006  000CAE  6E05               	movwf	___flge@ff1+2,c
  2007  000CB0  0E49               	movlw	73
  2008  000CB2  6E06               	movwf	___flge@ff1+3,c
  2009  000CB4  C093  F007         	movff	measure_inductance@Lin,___flge@ff2
  2010  000CB8  C094  F008         	movff	measure_inductance@Lin+1,___flge@ff2+1
  2011  000CBC  C095  F009         	movff	measure_inductance@Lin+2,___flge@ff2+2
  2012  000CC0  C096  F00A         	movff	measure_inductance@Lin+3,___flge@ff2+3
  2013  000CC4  ECBF  F013         	call	___flge	;wreg free
  2014  000CC8  E24C               	bc	l4191
  2015                           
  2016                           ;LC-meter.c: 493: if(Lin > (999e+06l)) {
  2017  000CCA  0E1F               	movlw	31
  2018  000CCC  6E03               	movwf	___flge@ff1,c
  2019  000CCE  0E2E               	movlw	46
  2020  000CD0  6E04               	movwf	___flge@ff1+1,c
  2021  000CD2  0E6E               	movlw	110
  2022  000CD4  6E05               	movwf	___flge@ff1+2,c
  2023  000CD6  0E4E               	movlw	78
  2024  000CD8  6E06               	movwf	___flge@ff1+3,c
  2025  000CDA  C093  F007         	movff	measure_inductance@Lin,___flge@ff2
  2026  000CDE  C094  F008         	movff	measure_inductance@Lin+1,___flge@ff2+1
  2027  000CE2  C095  F009         	movff	measure_inductance@Lin+2,___flge@ff2+2
  2028  000CE6  C096  F00A         	movff	measure_inductance@Lin+3,___flge@ff2+3
  2029  000CEA  ECBF  F013         	call	___flge	;wreg free
  2030  000CEE  E21D               	bc	l4187
  2031                           
  2032                           ;LC-meter.c: 494: Lin = Lin / (1e+09l);
  2033  000CF0  C093  F00D         	movff	measure_inductance@Lin,___fldiv@f1
  2034  000CF4  C094  F00E         	movff	measure_inductance@Lin+1,___fldiv@f1+1
  2035  000CF8  C095  F00F         	movff	measure_inductance@Lin+2,___fldiv@f1+2
  2036  000CFC  C096  F010         	movff	measure_inductance@Lin+3,___fldiv@f1+3
  2037  000D00  0E28               	movlw	40
  2038  000D02  6E11               	movwf	___fldiv@f2,c
  2039  000D04  0E6B               	movlw	107
  2040  000D06  6E12               	movwf	___fldiv@f2+1,c
  2041  000D08  0E6E               	movlw	110
  2042  000D0A  6E13               	movwf	___fldiv@f2+2,c
  2043  000D0C  0E4E               	movlw	78
  2044  000D0E  6E14               	movwf	___fldiv@f2+3,c
  2045  000D10  EC5F  F011         	call	___fldiv	;wreg free
  2046  000D14  C00D  F093         	movff	?___fldiv,measure_inductance@Lin
  2047  000D18  C00E  F094         	movff	?___fldiv+1,measure_inductance@Lin+1
  2048  000D1C  C00F  F095         	movff	?___fldiv+2,measure_inductance@Lin+2
  2049  000D20  C010  F096         	movff	?___fldiv+3,measure_inductance@Lin+3
  2050                           
  2051                           ;LC-meter.c: 495: unit = 0;
  2052  000D24  0100               	movlb	0	; () banked
  2053  000D26  6B84               	clrf	measure_inductance@unit& (0+255),b
  2054                           
  2055                           ;LC-meter.c: 496: } else {
  2056  000D28  D03A               	goto	l4197
  2057  000D2A                     l4187:
  2058                           
  2059                           ;LC-meter.c: 497: Lin = Lin / (1e+06l);
  2060  000D2A  C093  F00D         	movff	measure_inductance@Lin,___fldiv@f1
  2061  000D2E  C094  F00E         	movff	measure_inductance@Lin+1,___fldiv@f1+1
  2062  000D32  C095  F00F         	movff	measure_inductance@Lin+2,___fldiv@f1+2
  2063  000D36  C096  F010         	movff	measure_inductance@Lin+3,___fldiv@f1+3
  2064  000D3A  0E00               	movlw	0
  2065  000D3C  6E11               	movwf	___fldiv@f2,c
  2066  000D3E  0E24               	movlw	36
  2067  000D40  6E12               	movwf	___fldiv@f2+1,c
  2068  000D42  0E74               	movlw	116
  2069  000D44  6E13               	movwf	___fldiv@f2+2,c
  2070  000D46  0E49               	movlw	73
  2071  000D48  6E14               	movwf	___fldiv@f2+3,c
  2072  000D4A  EC5F  F011         	call	___fldiv	;wreg free
  2073  000D4E  C00D  F093         	movff	?___fldiv,measure_inductance@Lin
  2074  000D52  C00E  F094         	movff	?___fldiv+1,measure_inductance@Lin+1
  2075  000D56  C00F  F095         	movff	?___fldiv+2,measure_inductance@Lin+2
  2076  000D5A  C010  F096         	movff	?___fldiv+3,measure_inductance@Lin+3
  2077                           
  2078                           ;LC-meter.c: 498: unit = 1;
  2079  000D5E  0E01               	movlw	1
  2080  000D60  D01C               	goto	L1
  2081  000D62                     l4191:
  2082                           
  2083                           ;LC-meter.c: 501: Lin = Lin / 1e+03l;
  2084  000D62  C093  F00D         	movff	measure_inductance@Lin,___fldiv@f1
  2085  000D66  C094  F00E         	movff	measure_inductance@Lin+1,___fldiv@f1+1
  2086  000D6A  C095  F00F         	movff	measure_inductance@Lin+2,___fldiv@f1+2
  2087  000D6E  C096  F010         	movff	measure_inductance@Lin+3,___fldiv@f1+3
  2088  000D72  0E00               	movlw	0
  2089  000D74  6E11               	movwf	___fldiv@f2,c
  2090  000D76  6E12               	movwf	___fldiv@f2+1,c
  2091  000D78  0E7A               	movlw	122
  2092  000D7A  6E13               	movwf	___fldiv@f2+2,c
  2093  000D7C  0E44               	movlw	68
  2094  000D7E  6E14               	movwf	___fldiv@f2+3,c
  2095  000D80  EC5F  F011         	call	___fldiv	;wreg free
  2096  000D84  C00D  F093         	movff	?___fldiv,measure_inductance@Lin
  2097  000D88  C00E  F094         	movff	?___fldiv+1,measure_inductance@Lin+1
  2098  000D8C  C00F  F095         	movff	?___fldiv+2,measure_inductance@Lin+2
  2099  000D90  C010  F096         	movff	?___fldiv+3,measure_inductance@Lin+3
  2100                           
  2101                           ;LC-meter.c: 502: unit = 2;
  2102  000D94  0E02               	movlw	2
  2103  000D96  D001               	goto	L1
  2104  000D98                     l4195:
  2105                           
  2106                           ;LC-meter.c: 505: unit = 3;
  2107  000D98  0E03               	movlw	3
  2108  000D9A                     L1:
  2109  000D9A  0100               	movlb	0	; () banked
  2110  000D9C  6F84               	movwf	measure_inductance@unit& (0+255),b
  2111  000D9E                     l4197:
  2112                           
  2113                           ; BSR set to: 0
  2114                           ;LC-meter.c: 507: Lin = Lin * 100;
  2115  000D9E  C093  F01C         	movff	measure_inductance@Lin,___flmul@f1
  2116  000DA2  C094  F01D         	movff	measure_inductance@Lin+1,___flmul@f1+1
  2117  000DA6  C095  F01E         	movff	measure_inductance@Lin+2,___flmul@f1+2
  2118  000DAA  C096  F01F         	movff	measure_inductance@Lin+3,___flmul@f1+3
  2119  000DAE  0E00               	movlw	0
  2120  000DB0  6E20               	movwf	___flmul@f2,c
  2121  000DB2  6E21               	movwf	___flmul@f2+1,c
  2122  000DB4  0EC8               	movlw	200
  2123  000DB6  6E22               	movwf	___flmul@f2+2,c
  2124  000DB8  0E42               	movlw	66
  2125  000DBA  6E23               	movwf	___flmul@f2+3,c
  2126  000DBC  EC29  F00A         	call	___flmul	;wreg free
  2127  000DC0  C01C  F093         	movff	?___flmul,measure_inductance@Lin
  2128  000DC4  C01D  F094         	movff	?___flmul+1,measure_inductance@Lin+1
  2129  000DC8  C01E  F095         	movff	?___flmul+2,measure_inductance@Lin+2
  2130  000DCC  C01F  F096         	movff	?___flmul+3,measure_inductance@Lin+3
  2131                           
  2132                           ;LC-meter.c: 508: var = (unsigned short int)Lin;
  2133  000DD0  C093  F064         	movff	measure_inductance@Lin,___fltol@f1
  2134  000DD4  C094  F065         	movff	measure_inductance@Lin+1,___fltol@f1+1
  2135  000DD8  C095  F066         	movff	measure_inductance@Lin+2,___fltol@f1+2
  2136  000DDC  C096  F067         	movff	measure_inductance@Lin+3,___fltol@f1+3
  2137  000DE0  ECB2  F011         	call	___fltol	;wreg free
  2138  000DE4  C064  F091         	movff	?___fltol,measure_inductance@var
  2139  000DE8  C065  F092         	movff	?___fltol+1,measure_inductance@var+1
  2140                           
  2141                           ; BSR set to: 0
  2142                           ;LC-meter.c: 510: print_reading(var);
  2143  000DEC  C091  F035         	movff	measure_inductance@var,print_reading@measurement
  2144  000DF0  C092  F036         	movff	measure_inductance@var+1,print_reading@measurement+1
  2145  000DF4  ECD8  F012         	call	_print_reading	;wreg free
  2146                           
  2147                           ;LC-meter.c: 511: print_unit(unit);
  2148  000DF8  0100               	movlb	0	; () banked
  2149  000DFA  5184               	movf	measure_inductance@unit& (0+255),w,b
  2150  000DFC  EC56  F015         	call	_print_unit
  2151  000E00  0012               	return		;funcret
  2152  000E02                     __end_of_measure_inductance:
  2153                           	opt stack 0
  2154                           tblptru	equ	0xFF8
  2155                           tblptrh	equ	0xFF7
  2156                           tblptrl	equ	0xFF6
  2157                           tablat	equ	0xFF5
  2158                           intcon	equ	0xFF2
  2159                           intcon2	equ	0xFF1
  2160                           postinc0	equ	0xFEE
  2161                           wreg	equ	0xFE8
  2162                           postdec1	equ	0xFE5
  2163                           fsr1l	equ	0xFE1
  2164                           status	equ	0xFD8
  2165                           
  2166 ;; *************** function _measure_capacitance *****************
  2167 ;; Defined at:
  2168 ;;		line 391 in file "../../../src/LC-meter.c"
  2169 ;; Parameters:    Size  Location     Type
  2170 ;;		None
  2171 ;; Auto vars:     Size  Location     Type
  2172 ;;  Cin             4   93[BANK0 ] unsigned char 
  2173 ;;  var             2   91[BANK0 ] unsigned short 
  2174 ;;  unit            1   90[BANK0 ] unsigned char 
  2175 ;; Return value:  Size  Location     Type
  2176 ;;		None               void
  2177 ;; Registers used:
  2178 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2179 ;; Tracked objects:
  2180 ;;		On entry : 0/0
  2181 ;;		On exit  : 0/0
  2182 ;;		Unchanged: 0/0
  2183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2184 ;;      Params:         0       0       0       0       0       0       0       0       0
  2185 ;;      Locals:         0      19       0       0       0       0       0       0       0
  2186 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2187 ;;      Totals:         0      19       0       0       0       0       0       0       0
  2188 ;;Total ram usage:       19 bytes
  2189 ;; Hardware stack levels used:    1
  2190 ;; Hardware stack levels required when called:    7
  2191 ;; This function calls:
  2192 ;;		___fldiv
  2193 ;;		___flge
  2194 ;;		___flmul
  2195 ;;		___flsub
  2196 ;;		___fltol
  2197 ;;		___lwtofl
  2198 ;;		_format_double
  2199 ;;		_format_xint32
  2200 ;;		_lcd_gotoxy
  2201 ;;		_measure_freq
  2202 ;;		_print_reading
  2203 ;;		_print_unit
  2204 ;;		_put_str
  2205 ;;		_ser_putch
  2206 ;;		_ser_puts
  2207 ;; This function is called by:
  2208 ;;		_main
  2209 ;; This function uses a non-reentrant model
  2210 ;;
  2211                           
  2212                           	psect	text4
  2213  000E02                     __ptext4:
  2214                           	opt stack 0
  2215  000E02                     _measure_capacitance:
  2216                           	opt stack 23
  2217                           
  2218                           ;LC-meter.c: 392: unsigned char unit;
  2219                           ;LC-meter.c: 393: unsigned short int var;
  2220                           ;LC-meter.c: 395: double Cin;
  2221                           ;LC-meter.c: 399: lcd_gotoxy(0, 0);
  2222                           
  2223                           ;incstack = 0
  2224  000E02  0E00               	movlw	0
  2225  000E04  6A07               	clrf	lcd_gotoxy@row,c
  2226  000E06  ECD5  F014         	call	_lcd_gotoxy
  2227                           
  2228                           ;LC-meter.c: 400: put_str("Capacity ");
  2229  000E0A  0E7F               	movlw	STR_25& (0+255)
  2230  000E0C  EC0C  F015         	call	_put_str
  2231                           
  2232                           ;LC-meter.c: 402: var = measure_freq();
  2233  000E10  EC01  F012         	call	_measure_freq	;wreg free
  2234  000E14  C035  F0BB         	movff	?_measure_freq,measure_capacitance@var
  2235  000E18  C036  F0BC         	movff	?_measure_freq+1,measure_capacitance@var+1
  2236                           
  2237                           ;LC-meter.c: 404: F3 = (double)var;
  2238  000E1C  C0BB  F03D         	movff	measure_capacitance@var,___lwtofl@c
  2239  000E20  C0BC  F03E         	movff	measure_capacitance@var+1,___lwtofl@c+1
  2240  000E24  EC6B  F015         	call	___lwtofl	;wreg free
  2241  000E28  C03D  F0D5         	movff	?___lwtofl,_F3
  2242  000E2C  C03E  F0D6         	movff	?___lwtofl+1,_F3+1
  2243  000E30  C03F  F0D7         	movff	?___lwtofl+2,_F3+2
  2244  000E34  C040  F0D8         	movff	?___lwtofl+3,_F3+3
  2245                           
  2246                           ;LC-meter.c: 406: putchar_ptr = &ser_putch;
  2247  000E38  0E4C               	movlw	low _ser_putch
  2248  000E3A  0100               	movlb	0	; () banked
  2249  000E3C  6FFE               	movwf	_putchar_ptr& (0+255),b
  2250  000E3E  0E2B               	movlw	high _ser_putch
  2251  000E40  6FFF               	movwf	(_putchar_ptr+1)& (0+255),b
  2252                           
  2253                           ; BSR set to: 0
  2254                           ;LC-meter.c: 407: ser_puts("var=");
  2255  000E42  0EC0               	movlw	STR_26& (0+255)
  2256  000E44  EC80  F015         	call	_ser_puts
  2257                           
  2258                           ;LC-meter.c: 408: format_xint32( var);
  2259  000E48  C0BB  F035         	movff	measure_capacitance@var,format_xint32@x
  2260  000E4C  C0BC  F036         	movff	measure_capacitance@var+1,format_xint32@x+1
  2261  000E50  6A37               	clrf	format_xint32@x+2,c
  2262  000E52  6A38               	clrf	format_xint32@x+3,c
  2263  000E54  EC10  F013         	call	_format_xint32	;wreg free
  2264                           
  2265                           ;LC-meter.c: 409: ser_puts("\r\nF1=");
  2266  000E58  0E9E               	movlw	STR_27& (0+255)
  2267  000E5A  EC80  F015         	call	_ser_puts
  2268                           
  2269                           ;LC-meter.c: 410: format_double( F1);
  2270  000E5E  C0EE  F09A         	movff	_F1,format_double@num
  2271  000E62  C0EF  F09B         	movff	_F1+1,format_double@num+1
  2272  000E66  C0F0  F09C         	movff	_F1+2,format_double@num+2
  2273  000E6A  C0F1  F09D         	movff	_F1+3,format_double@num+3
  2274  000E6E  EC08  F00B         	call	_format_double	;wreg free
  2275                           
  2276                           ;LC-meter.c: 411: ser_putch(' ');
  2277  000E72  0E20               	movlw	32
  2278  000E74  ECA6  F015         	call	_ser_putch
  2279                           
  2280                           ;LC-meter.c: 412: format_xint32( *(unsigned long int*)&F1);
  2281  000E78  C0EE  F035         	movff	_F1,format_xint32@x
  2282  000E7C  C0EF  F036         	movff	_F1+1,format_xint32@x+1
  2283  000E80  C0F0  F037         	movff	_F1+2,format_xint32@x+2
  2284  000E84  C0F1  F038         	movff	_F1+3,format_xint32@x+3
  2285  000E88  EC10  F013         	call	_format_xint32	;wreg free
  2286                           
  2287                           ;LC-meter.c: 413: ser_puts("\r\nF2=");
  2288  000E8C  0EA4               	movlw	STR_28& (0+255)
  2289  000E8E  EC80  F015         	call	_ser_puts
  2290                           
  2291                           ;LC-meter.c: 414: format_double( F2);
  2292  000E92  C0D1  F09A         	movff	_F2,format_double@num
  2293  000E96  C0D2  F09B         	movff	_F2+1,format_double@num+1
  2294  000E9A  C0D3  F09C         	movff	_F2+2,format_double@num+2
  2295  000E9E  C0D4  F09D         	movff	_F2+3,format_double@num+3
  2296  000EA2  EC08  F00B         	call	_format_double	;wreg free
  2297                           
  2298                           ;LC-meter.c: 415: ser_putch(' ');
  2299  000EA6  0E20               	movlw	32
  2300  000EA8  ECA6  F015         	call	_ser_putch
  2301                           
  2302                           ;LC-meter.c: 416: format_xint32( *(unsigned long int*)&F2);
  2303  000EAC  C0D1  F035         	movff	_F2,format_xint32@x
  2304  000EB0  C0D2  F036         	movff	_F2+1,format_xint32@x+1
  2305  000EB4  C0D3  F037         	movff	_F2+2,format_xint32@x+2
  2306  000EB8  C0D4  F038         	movff	_F2+3,format_xint32@x+3
  2307  000EBC  EC10  F013         	call	_format_xint32	;wreg free
  2308                           
  2309                           ;LC-meter.c: 417: ser_puts("\r\nF3=");
  2310  000EC0  0EAA               	movlw	STR_29& (0+255)
  2311  000EC2  EC80  F015         	call	_ser_puts
  2312                           
  2313                           ;LC-meter.c: 418: format_double( F3);
  2314  000EC6  C0D5  F09A         	movff	_F3,format_double@num
  2315  000ECA  C0D6  F09B         	movff	_F3+1,format_double@num+1
  2316  000ECE  C0D7  F09C         	movff	_F3+2,format_double@num+2
  2317  000ED2  C0D8  F09D         	movff	_F3+3,format_double@num+3
  2318  000ED6  EC08  F00B         	call	_format_double	;wreg free
  2319                           
  2320                           ;LC-meter.c: 419: ser_putch(' ');
  2321  000EDA  0E20               	movlw	32
  2322  000EDC  ECA6  F015         	call	_ser_putch
  2323                           
  2324                           ;LC-meter.c: 420: format_xint32( *(unsigned long int*)&F3);
  2325  000EE0  C0D5  F035         	movff	_F3,format_xint32@x
  2326  000EE4  C0D6  F036         	movff	_F3+1,format_xint32@x+1
  2327  000EE8  C0D7  F037         	movff	_F3+2,format_xint32@x+2
  2328  000EEC  C0D8  F038         	movff	_F3+3,format_xint32@x+3
  2329  000EF0  EC10  F013         	call	_format_xint32	;wreg free
  2330                           
  2331                           ;LC-meter.c: 421: ser_puts("\r\nCCal=");
  2332  000EF4  0E89               	movlw	STR_30& (0+255)
  2333  000EF6  EC80  F015         	call	_ser_puts
  2334                           
  2335                           ;LC-meter.c: 422: format_double( CCal);
  2336  000EFA  C0F2  F09A         	movff	_CCal,format_double@num
  2337  000EFE  C0F3  F09B         	movff	_CCal+1,format_double@num+1
  2338  000F02  C0F4  F09C         	movff	_CCal+2,format_double@num+2
  2339  000F06  C0F5  F09D         	movff	_CCal+3,format_double@num+3
  2340  000F0A  EC08  F00B         	call	_format_double	;wreg free
  2341                           
  2342                           ;LC-meter.c: 423: ser_putch(' ');
  2343  000F0E  0E20               	movlw	32
  2344  000F10  ECA6  F015         	call	_ser_putch
  2345                           
  2346                           ;LC-meter.c: 424: format_xint32( *(unsigned long int*)&CCal);
  2347  000F14  C0F2  F035         	movff	_CCal,format_xint32@x
  2348  000F18  C0F3  F036         	movff	_CCal+1,format_xint32@x+1
  2349  000F1C  C0F4  F037         	movff	_CCal+2,format_xint32@x+2
  2350  000F20  C0F5  F038         	movff	_CCal+3,format_xint32@x+3
  2351  000F24  EC10  F013         	call	_format_xint32	;wreg free
  2352                           
  2353                           ;LC-meter.c: 425: ser_puts("\r\n");
  2354  000F28  0E9B               	movlw	(STR_14+3)& (0+255)
  2355  000F2A  EC80  F015         	call	_ser_puts
  2356                           
  2357                           ;LC-meter.c: 427: putchar_ptr = &output_putch;
  2358  000F2E  0EE2               	movlw	low _output_putch
  2359  000F30  0100               	movlb	0	; () banked
  2360  000F32  6FFE               	movwf	_putchar_ptr& (0+255),b
  2361  000F34  0E2B               	movlw	high _output_putch
  2362  000F36  6FFF               	movwf	(_putchar_ptr+1)& (0+255),b
  2363                           
  2364                           ;LC-meter.c: 429: if(F3 > F1)
  2365  000F38  C0EE  F003         	movff	_F1,___flge@ff1
  2366  000F3C  C0EF  F004         	movff	_F1+1,___flge@ff1+1
  2367  000F40  C0F0  F005         	movff	_F1+2,___flge@ff1+2
  2368  000F44  C0F1  F006         	movff	_F1+3,___flge@ff1+3
  2369  000F48  C0D5  F007         	movff	_F3,___flge@ff2
  2370  000F4C  C0D6  F008         	movff	_F3+1,___flge@ff2+1
  2371  000F50  C0D7  F009         	movff	_F3+2,___flge@ff2+2
  2372  000F54  C0D8  F00A         	movff	_F3+3,___flge@ff2+3
  2373  000F58  ECBF  F013         	call	___flge	;wreg free
  2374  000F5C  E208               	bc	l4101
  2375                           
  2376                           ;LC-meter.c: 430: F3 = F1;
  2377  000F5E  C0EE  F0D5         	movff	_F1,_F3
  2378  000F62  C0EF  F0D6         	movff	_F1+1,_F3+1
  2379  000F66  C0F0  F0D7         	movff	_F1+2,_F3+2
  2380  000F6A  C0F1  F0D8         	movff	_F1+3,_F3+3
  2381  000F6E                     l4101:
  2382                           
  2383                           ;LC-meter.c: 432: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2384  000F6E  C0D5  F020         	movff	_F3,___flmul@f2
  2385  000F72  C0D6  F021         	movff	_F3+1,___flmul@f2+1
  2386  000F76  C0D7  F022         	movff	_F3+2,___flmul@f2+2
  2387  000F7A  C0D8  F023         	movff	_F3+3,___flmul@f2+3
  2388  000F7E  C0D5  F01C         	movff	_F3,___flmul@f1
  2389  000F82  C0D6  F01D         	movff	_F3+1,___flmul@f1+1
  2390  000F86  C0D7  F01E         	movff	_F3+2,___flmul@f1+2
  2391  000F8A  C0D8  F01F         	movff	_F3+3,___flmul@f1+3
  2392  000F8E  EC29  F00A         	call	___flmul	;wreg free
  2393  000F92  C01C  F047         	movff	?___flmul,___flsub@f2
  2394  000F96  C01D  F048         	movff	?___flmul+1,___flsub@f2+1
  2395  000F9A  C01E  F049         	movff	?___flmul+2,___flsub@f2+2
  2396  000F9E  C01F  F04A         	movff	?___flmul+3,___flsub@f2+3
  2397  000FA2  C0EE  F020         	movff	_F1,___flmul@f2
  2398  000FA6  C0EF  F021         	movff	_F1+1,___flmul@f2+1
  2399  000FAA  C0F0  F022         	movff	_F1+2,___flmul@f2+2
  2400  000FAE  C0F1  F023         	movff	_F1+3,___flmul@f2+3
  2401  000FB2  C0EE  F01C         	movff	_F1,___flmul@f1
  2402  000FB6  C0EF  F01D         	movff	_F1+1,___flmul@f1+1
  2403  000FBA  C0F0  F01E         	movff	_F1+2,___flmul@f1+2
  2404  000FBE  C0F1  F01F         	movff	_F1+3,___flmul@f1+3
  2405  000FC2  EC29  F00A         	call	___flmul	;wreg free
  2406  000FC6  C01C  F043         	movff	?___flmul,___flsub@f1
  2407  000FCA  C01D  F044         	movff	?___flmul+1,___flsub@f1+1
  2408  000FCE  C01E  F045         	movff	?___flmul+2,___flsub@f1+2
  2409  000FD2  C01F  F046         	movff	?___flmul+3,___flsub@f1+3
  2410  000FD6  EC77  F014         	call	___flsub	;wreg free
  2411  000FDA  C043  F0AE         	movff	?___flsub,_measure_capacitance$1152
  2412  000FDE  C044  F0AF         	movff	?___flsub+1,_measure_capacitance$1152+1
  2413  000FE2  C045  F0B0         	movff	?___flsub+2,_measure_capacitance$1152+2
  2414  000FE6  C046  F0B1         	movff	?___flsub+3,_measure_capacitance$1152+3
  2415                           
  2416                           ;LC-meter.c: 432: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2417  000FEA  C0D1  F020         	movff	_F2,___flmul@f2
  2418  000FEE  C0D2  F021         	movff	_F2+1,___flmul@f2+1
  2419  000FF2  C0D3  F022         	movff	_F2+2,___flmul@f2+2
  2420  000FF6  C0D4  F023         	movff	_F2+3,___flmul@f2+3
  2421  000FFA  C0AE  F01C         	movff	_measure_capacitance$1152,___flmul@f1
  2422  000FFE  C0AF  F01D         	movff	_measure_capacitance$1152+1,___flmul@f1+1
  2423  001002  C0B0  F01E         	movff	_measure_capacitance$1152+2,___flmul@f1+2
  2424  001006  C0B1  F01F         	movff	_measure_capacitance$1152+3,___flmul@f1+3
  2425  00100A  EC29  F00A         	call	___flmul	;wreg free
  2426  00100E  C01C  F0B2         	movff	?___flmul,_measure_capacitance$1153
  2427  001012  C01D  F0B3         	movff	?___flmul+1,_measure_capacitance$1153+1
  2428  001016  C01E  F0B4         	movff	?___flmul+2,_measure_capacitance$1153+2
  2429  00101A  C01F  F0B5         	movff	?___flmul+3,_measure_capacitance$1153+3
  2430                           
  2431                           ;LC-meter.c: 432: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2432  00101E  C0D1  F020         	movff	_F2,___flmul@f2
  2433  001022  C0D2  F021         	movff	_F2+1,___flmul@f2+1
  2434  001026  C0D3  F022         	movff	_F2+2,___flmul@f2+2
  2435  00102A  C0D4  F023         	movff	_F2+3,___flmul@f2+3
  2436  00102E  C0B2  F01C         	movff	_measure_capacitance$1153,___flmul@f1
  2437  001032  C0B3  F01D         	movff	_measure_capacitance$1153+1,___flmul@f1+1
  2438  001036  C0B4  F01E         	movff	_measure_capacitance$1153+2,___flmul@f1+2
  2439  00103A  C0B5  F01F         	movff	_measure_capacitance$1153+3,___flmul@f1+3
  2440  00103E  EC29  F00A         	call	___flmul	;wreg free
  2441  001042  C01C  F0B6         	movff	?___flmul,_measure_capacitance$1154
  2442  001046  C01D  F0B7         	movff	?___flmul+1,_measure_capacitance$1154+1
  2443  00104A  C01E  F0B8         	movff	?___flmul+2,_measure_capacitance$1154+2
  2444  00104E  C01F  F0B9         	movff	?___flmul+3,_measure_capacitance$1154+3
  2445                           
  2446                           ;LC-meter.c: 432: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2447  001052  C0B6  F01C         	movff	_measure_capacitance$1154,___flmul@f1
  2448  001056  C0B7  F01D         	movff	_measure_capacitance$1154+1,___flmul@f1+1
  2449  00105A  C0B8  F01E         	movff	_measure_capacitance$1154+2,___flmul@f1+2
  2450  00105E  C0B9  F01F         	movff	_measure_capacitance$1154+3,___flmul@f1+3
  2451  001062  C0F2  F020         	movff	_CCal,___flmul@f2
  2452  001066  C0F3  F021         	movff	_CCal+1,___flmul@f2+1
  2453  00106A  C0F4  F022         	movff	_CCal+2,___flmul@f2+2
  2454  00106E  C0F5  F023         	movff	_CCal+3,___flmul@f2+3
  2455  001072  EC29  F00A         	call	___flmul	;wreg free
  2456  001076  C01C  F0BD         	movff	?___flmul,measure_capacitance@Cin
  2457  00107A  C01D  F0BE         	movff	?___flmul+1,measure_capacitance@Cin+1
  2458  00107E  C01E  F0BF         	movff	?___flmul+2,measure_capacitance@Cin+2
  2459  001082  C01F  F0C0         	movff	?___flmul+3,measure_capacitance@Cin+3
  2460                           
  2461                           ;LC-meter.c: 436: ser_puts("Cin=");
  2462  001086  0EBB               	movlw	STR_32& (0+255)
  2463  001088  EC80  F015         	call	_ser_puts
  2464                           
  2465                           ;LC-meter.c: 437: format_double( Cin);
  2466  00108C  C0BD  F09A         	movff	measure_capacitance@Cin,format_double@num
  2467  001090  C0BE  F09B         	movff	measure_capacitance@Cin+1,format_double@num+1
  2468  001094  C0BF  F09C         	movff	measure_capacitance@Cin+2,format_double@num+2
  2469  001098  C0C0  F09D         	movff	measure_capacitance@Cin+3,format_double@num+3
  2470  00109C  EC08  F00B         	call	_format_double	;wreg free
  2471                           
  2472                           ;LC-meter.c: 438: ser_putch(' ');
  2473  0010A0  0E20               	movlw	32
  2474  0010A2  ECA6  F015         	call	_ser_putch
  2475                           
  2476                           ;LC-meter.c: 439: format_xint32( *(unsigned long int*)&Cin);
  2477  0010A6  C0BD  F035         	movff	measure_capacitance@Cin,format_xint32@x
  2478  0010AA  C0BE  F036         	movff	measure_capacitance@Cin+1,format_xint32@x+1
  2479  0010AE  C0BF  F037         	movff	measure_capacitance@Cin+2,format_xint32@x+2
  2480  0010B2  C0C0  F038         	movff	measure_capacitance@Cin+3,format_xint32@x+3
  2481  0010B6  EC10  F013         	call	_format_xint32	;wreg free
  2482                           
  2483                           ;LC-meter.c: 440: ser_puts("\r\n");
  2484  0010BA  0E9B               	movlw	(STR_14+3)& (0+255)
  2485  0010BC  EC80  F015         	call	_ser_puts
  2486                           
  2487                           ;LC-meter.c: 442: if(Cin > 999) {
  2488  0010C0  6A03               	clrf	___flge@ff1,c
  2489  0010C2  0EC0               	movlw	192
  2490  0010C4  6E04               	movwf	___flge@ff1+1,c
  2491  0010C6  0E79               	movlw	121
  2492  0010C8  6E05               	movwf	___flge@ff1+2,c
  2493  0010CA  0E44               	movlw	68
  2494  0010CC  6E06               	movwf	___flge@ff1+3,c
  2495  0010CE  C0BD  F007         	movff	measure_capacitance@Cin,___flge@ff2
  2496  0010D2  C0BE  F008         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2497  0010D6  C0BF  F009         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2498  0010DA  C0C0  F00A         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2499  0010DE  ECBF  F013         	call	___flge	;wreg free
  2500  0010E2  E279               	bc	l4131
  2501                           
  2502                           ;LC-meter.c: 443: if(Cin > (999e+03l)) {
  2503  0010E4  0E80               	movlw	128
  2504  0010E6  6E03               	movwf	___flge@ff1,c
  2505  0010E8  0EE5               	movlw	229
  2506  0010EA  6E04               	movwf	___flge@ff1+1,c
  2507  0010EC  0E73               	movlw	115
  2508  0010EE  6E05               	movwf	___flge@ff1+2,c
  2509  0010F0  0E49               	movlw	73
  2510  0010F2  6E06               	movwf	___flge@ff1+3,c
  2511  0010F4  C0BD  F007         	movff	measure_capacitance@Cin,___flge@ff2
  2512  0010F8  C0BE  F008         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2513  0010FC  C0BF  F009         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2514  001100  C0C0  F00A         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2515  001104  ECBF  F013         	call	___flge	;wreg free
  2516  001108  E24B               	bc	l4127
  2517                           
  2518                           ;LC-meter.c: 444: if(Cin > (999e+06l)) {
  2519  00110A  0E1F               	movlw	31
  2520  00110C  6E03               	movwf	___flge@ff1,c
  2521  00110E  0E2E               	movlw	46
  2522  001110  6E04               	movwf	___flge@ff1+1,c
  2523  001112  0E6E               	movlw	110
  2524  001114  6E05               	movwf	___flge@ff1+2,c
  2525  001116  0E4E               	movlw	78
  2526  001118  6E06               	movwf	___flge@ff1+3,c
  2527  00111A  C0BD  F007         	movff	measure_capacitance@Cin,___flge@ff2
  2528  00111E  C0BE  F008         	movff	measure_capacitance@Cin+1,___flge@ff2+1
  2529  001122  C0BF  F009         	movff	measure_capacitance@Cin+2,___flge@ff2+2
  2530  001126  C0C0  F00A         	movff	measure_capacitance@Cin+3,___flge@ff2+3
  2531  00112A  ECBF  F013         	call	___flge	;wreg free
  2532  00112E  E21C               	bc	l4123
  2533                           
  2534                           ;LC-meter.c: 445: Cin = Cin / (1e+09l);
  2535  001130  C0BD  F00D         	movff	measure_capacitance@Cin,___fldiv@f1
  2536  001134  C0BE  F00E         	movff	measure_capacitance@Cin+1,___fldiv@f1+1
  2537  001138  C0BF  F00F         	movff	measure_capacitance@Cin+2,___fldiv@f1+2
  2538  00113C  C0C0  F010         	movff	measure_capacitance@Cin+3,___fldiv@f1+3
  2539  001140  0E28               	movlw	40
  2540  001142  6E11               	movwf	___fldiv@f2,c
  2541  001144  0E6B               	movlw	107
  2542  001146  6E12               	movwf	___fldiv@f2+1,c
  2543  001148  0E6E               	movlw	110
  2544  00114A  6E13               	movwf	___fldiv@f2+2,c
  2545  00114C  0E4E               	movlw	78
  2546  00114E  6E14               	movwf	___fldiv@f2+3,c
  2547  001150  EC5F  F011         	call	___fldiv	;wreg free
  2548  001154  C00D  F0BD         	movff	?___fldiv,measure_capacitance@Cin
  2549  001158  C00E  F0BE         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2550  00115C  C00F  F0BF         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2551  001160  C010  F0C0         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2552                           
  2553                           ;LC-meter.c: 446: unit = 4;
  2554  001164  0E04               	movlw	4
  2555  001166  D038               	goto	L2
  2556  001168                     l4123:
  2557                           
  2558                           ;LC-meter.c: 448: Cin = Cin / (1e+06l);
  2559  001168  C0BD  F00D         	movff	measure_capacitance@Cin,___fldiv@f1
  2560  00116C  C0BE  F00E         	movff	measure_capacitance@Cin+1,___fldiv@f1+1
  2561  001170  C0BF  F00F         	movff	measure_capacitance@Cin+2,___fldiv@f1+2
  2562  001174  C0C0  F010         	movff	measure_capacitance@Cin+3,___fldiv@f1+3
  2563  001178  0E00               	movlw	0
  2564  00117A  6E11               	movwf	___fldiv@f2,c
  2565  00117C  0E24               	movlw	36
  2566  00117E  6E12               	movwf	___fldiv@f2+1,c
  2567  001180  0E74               	movlw	116
  2568  001182  6E13               	movwf	___fldiv@f2+2,c
  2569  001184  0E49               	movlw	73
  2570  001186  6E14               	movwf	___fldiv@f2+3,c
  2571  001188  EC5F  F011         	call	___fldiv	;wreg free
  2572  00118C  C00D  F0BD         	movff	?___fldiv,measure_capacitance@Cin
  2573  001190  C00E  F0BE         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2574  001194  C00F  F0BF         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2575  001198  C010  F0C0         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2576                           
  2577                           ;LC-meter.c: 449: unit = 5;
  2578  00119C  0E05               	movlw	5
  2579  00119E  D01C               	goto	L2
  2580  0011A0                     l4127:
  2581                           
  2582                           ;LC-meter.c: 452: Cin = Cin / 1e+03l;
  2583  0011A0  C0BD  F00D         	movff	measure_capacitance@Cin,___fldiv@f1
  2584  0011A4  C0BE  F00E         	movff	measure_capacitance@Cin+1,___fldiv@f1+1
  2585  0011A8  C0BF  F00F         	movff	measure_capacitance@Cin+2,___fldiv@f1+2
  2586  0011AC  C0C0  F010         	movff	measure_capacitance@Cin+3,___fldiv@f1+3
  2587  0011B0  0E00               	movlw	0
  2588  0011B2  6E11               	movwf	___fldiv@f2,c
  2589  0011B4  6E12               	movwf	___fldiv@f2+1,c
  2590  0011B6  0E7A               	movlw	122
  2591  0011B8  6E13               	movwf	___fldiv@f2+2,c
  2592  0011BA  0E44               	movlw	68
  2593  0011BC  6E14               	movwf	___fldiv@f2+3,c
  2594  0011BE  EC5F  F011         	call	___fldiv	;wreg free
  2595  0011C2  C00D  F0BD         	movff	?___fldiv,measure_capacitance@Cin
  2596  0011C6  C00E  F0BE         	movff	?___fldiv+1,measure_capacitance@Cin+1
  2597  0011CA  C00F  F0BF         	movff	?___fldiv+2,measure_capacitance@Cin+2
  2598  0011CE  C010  F0C0         	movff	?___fldiv+3,measure_capacitance@Cin+3
  2599                           
  2600                           ;LC-meter.c: 453: unit = 6;
  2601  0011D2  0E06               	movlw	6
  2602  0011D4  D001               	goto	L2
  2603  0011D6                     l4131:
  2604                           
  2605                           ;LC-meter.c: 456: unit = 7;
  2606  0011D6  0E07               	movlw	7
  2607  0011D8                     L2:
  2608  0011D8  0100               	movlb	0	; () banked
  2609  0011DA  6FBA               	movwf	measure_capacitance@unit& (0+255),b
  2610                           
  2611                           ; BSR set to: 0
  2612                           ;LC-meter.c: 458: Cin = Cin * 100;
  2613  0011DC  C0BD  F01C         	movff	measure_capacitance@Cin,___flmul@f1
  2614  0011E0  C0BE  F01D         	movff	measure_capacitance@Cin+1,___flmul@f1+1
  2615  0011E4  C0BF  F01E         	movff	measure_capacitance@Cin+2,___flmul@f1+2
  2616  0011E8  C0C0  F01F         	movff	measure_capacitance@Cin+3,___flmul@f1+3
  2617  0011EC  0E00               	movlw	0
  2618  0011EE  6E20               	movwf	___flmul@f2,c
  2619  0011F0  6E21               	movwf	___flmul@f2+1,c
  2620  0011F2  0EC8               	movlw	200
  2621  0011F4  6E22               	movwf	___flmul@f2+2,c
  2622  0011F6  0E42               	movlw	66
  2623  0011F8  6E23               	movwf	___flmul@f2+3,c
  2624  0011FA  EC29  F00A         	call	___flmul	;wreg free
  2625  0011FE  C01C  F0BD         	movff	?___flmul,measure_capacitance@Cin
  2626  001202  C01D  F0BE         	movff	?___flmul+1,measure_capacitance@Cin+1
  2627  001206  C01E  F0BF         	movff	?___flmul+2,measure_capacitance@Cin+2
  2628  00120A  C01F  F0C0         	movff	?___flmul+3,measure_capacitance@Cin+3
  2629                           
  2630                           ;LC-meter.c: 459: var = (unsigned short int)Cin;
  2631  00120E  C0BD  F064         	movff	measure_capacitance@Cin,___fltol@f1
  2632  001212  C0BE  F065         	movff	measure_capacitance@Cin+1,___fltol@f1+1
  2633  001216  C0BF  F066         	movff	measure_capacitance@Cin+2,___fltol@f1+2
  2634  00121A  C0C0  F067         	movff	measure_capacitance@Cin+3,___fltol@f1+3
  2635  00121E  ECB2  F011         	call	___fltol	;wreg free
  2636  001222  C064  F0BB         	movff	?___fltol,measure_capacitance@var
  2637  001226  C065  F0BC         	movff	?___fltol+1,measure_capacitance@var+1
  2638                           
  2639                           ; BSR set to: 0
  2640                           ;LC-meter.c: 461: print_reading(var);
  2641  00122A  C0BB  F035         	movff	measure_capacitance@var,print_reading@measurement
  2642  00122E  C0BC  F036         	movff	measure_capacitance@var+1,print_reading@measurement+1
  2643  001232  ECD8  F012         	call	_print_reading	;wreg free
  2644                           
  2645                           ;LC-meter.c: 462: print_unit(unit);
  2646  001236  0100               	movlb	0	; () banked
  2647  001238  51BA               	movf	measure_capacitance@unit& (0+255),w,b
  2648  00123A  EC56  F015         	call	_print_unit
  2649  00123E  0012               	return		;funcret
  2650  001240                     __end_of_measure_capacitance:
  2651                           	opt stack 0
  2652                           tblptru	equ	0xFF8
  2653                           tblptrh	equ	0xFF7
  2654                           tblptrl	equ	0xFF6
  2655                           tablat	equ	0xFF5
  2656                           intcon	equ	0xFF2
  2657                           intcon2	equ	0xFF1
  2658                           postinc0	equ	0xFEE
  2659                           wreg	equ	0xFE8
  2660                           postdec1	equ	0xFE5
  2661                           fsr1l	equ	0xFE1
  2662                           status	equ	0xFD8
  2663                           
  2664 ;; *************** function _print_unit *****************
  2665 ;; Defined at:
  2666 ;;		line 408 in file "../../../src/print.c"
  2667 ;; Parameters:    Size  Location     Type
  2668 ;;  unit            1    wreg     unsigned char 
  2669 ;; Auto vars:     Size  Location     Type
  2670 ;;  unit            1    0[COMRAM] unsigned char 
  2671 ;; Return value:  Size  Location     Type
  2672 ;;		None               void
  2673 ;; Registers used:
  2674 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2675 ;; Tracked objects:
  2676 ;;		On entry : F/0
  2677 ;;		On exit  : 0/0
  2678 ;;		Unchanged: 0/0
  2679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2680 ;;      Params:         0       0       0       0       0       0       0       0       0
  2681 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2682 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2683 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2684 ;;Total ram usage:        2 bytes
  2685 ;; Hardware stack levels used:    1
  2686 ;; Hardware stack levels required when called:    5
  2687 ;; This function calls:
  2688 ;;		_lcd_gotoxy
  2689 ;;		_ser_puts
  2690 ;; This function is called by:
  2691 ;;		_measure_capacitance
  2692 ;;		_measure_inductance
  2693 ;; This function uses a non-reentrant model
  2694 ;;
  2695                           
  2696                           	psect	text5
  2697  002AAC                     __ptext5:
  2698                           	opt stack 0
  2699  002AAC                     _print_unit:
  2700                           	opt stack 24
  2701                           
  2702                           ; BSR set to: 0
  2703                           ;print.c: 416: static const char* units[8] = {"H", "mH", "uH", "nH", "mF", "uF", "nF", "
      +                          pF"};
  2704                           ;print.c: 417: lcd_gotoxy(14, 0);
  2705                           
  2706                           ;incstack = 0
  2707  002AAC  6A07               	clrf	lcd_gotoxy@row,c
  2708  002AAE  0E0E               	movlw	14
  2709  002AB0  ECD5  F014         	call	_lcd_gotoxy
  2710                           
  2711                           ;print.c: 421: lcd_gotoxy(16 - (buffer.n - buffer.p), 0);
  2712  002AB4  6A07               	clrf	lcd_gotoxy@row,c
  2713  002AB6  0101               	movlb	1	; () banked
  2714  002AB8  3920               	swapf	(_buffer+16)& (0+255),w,b
  2715  002ABA  0B0F               	andlw	15
  2716  002ABC  6E0D               	movwf	??_print_unit& (0+255),c
  2717  002ABE  5120               	movf	(_buffer+16)& (0+255),w,b
  2718  002AC0  0B0F               	andlw	15
  2719  002AC2  6E0E               	movwf	(??_print_unit+1)& (0+255),c
  2720  002AC4  500D               	movf	??_print_unit,w,c
  2721  002AC6  5C0E               	subwf	??_print_unit+1,w,c
  2722  002AC8  0F10               	addlw	16
  2723  002ACA  ECD5  F014         	call	_lcd_gotoxy
  2724                           
  2725                           ;print.c: 424: ser_puts("\r\n");
  2726  002ACE  0E9B               	movlw	(STR_14+3)& (0+255)
  2727  002AD0  EC80  F015         	call	_ser_puts
  2728  002AD4  0012               	return		;funcret
  2729  002AD6                     __end_of_print_unit:
  2730                           	opt stack 0
  2731                           tblptru	equ	0xFF8
  2732                           tblptrh	equ	0xFF7
  2733                           tblptrl	equ	0xFF6
  2734                           tablat	equ	0xFF5
  2735                           intcon	equ	0xFF2
  2736                           intcon2	equ	0xFF1
  2737                           postinc0	equ	0xFEE
  2738                           wreg	equ	0xFE8
  2739                           postdec1	equ	0xFE5
  2740                           fsr1l	equ	0xFE1
  2741                           status	equ	0xFD8
  2742                           
  2743 ;; *************** function _print_reading *****************
  2744 ;; Defined at:
  2745 ;;		line 429 in file "../../../src/print.c"
  2746 ;; Parameters:    Size  Location     Type
  2747 ;;  measurement     2   52[COMRAM] unsigned short 
  2748 ;; Auto vars:     Size  Location     Type
  2749 ;;		None
  2750 ;; Return value:  Size  Location     Type
  2751 ;;		None               void
  2752 ;; Registers used:
  2753 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, cstack
  2754 ;; Tracked objects:
  2755 ;;		On entry : F/0
  2756 ;;		On exit  : 0/0
  2757 ;;		Unchanged: 0/0
  2758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2759 ;;      Params:         2       0       0       0       0       0       0       0       0
  2760 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2761 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2762 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2763 ;;Total ram usage:        6 bytes
  2764 ;; Hardware stack levels used:    1
  2765 ;; Hardware stack levels required when called:    6
  2766 ;; This function calls:
  2767 ;;		___lwdiv
  2768 ;;		___lwmod
  2769 ;;		_format_number
  2770 ;;		_lcd_gotoxy
  2771 ;;		_lcd_puts
  2772 ;; This function is called by:
  2773 ;;		_measure_capacitance
  2774 ;;		_measure_inductance
  2775 ;; This function uses a non-reentrant model
  2776 ;;
  2777                           
  2778                           	psect	text6
  2779  0025B0                     __ptext6:
  2780                           	opt stack 0
  2781  0025B0                     _print_reading:
  2782                           	opt stack 23
  2783                           
  2784                           ; BSR set to: 0
  2785                           ;print.c: 456: lcd_gotoxy(9, 0);
  2786                           
  2787                           ;incstack = 0
  2788  0025B0  6A07               	clrf	lcd_gotoxy@row,c
  2789  0025B2  0E09               	movlw	9
  2790  0025B4  ECD5  F014         	call	_lcd_gotoxy
  2791                           
  2792                           ;print.c: 457: lcd_puts("     ");
  2793  0025B8  0E92               	movlw	(STR_15+1)& (0+255)
  2794  0025BA  ECF1  F014         	call	_lcd_puts
  2795                           
  2796                           ;print.c: 458: lcd_gotoxy(9, 0);
  2797  0025BE  6A07               	clrf	lcd_gotoxy@row,c
  2798  0025C0  0E09               	movlw	9
  2799  0025C2  ECD5  F014         	call	_lcd_gotoxy
  2800                           
  2801                           ;print.c: 460: format_number( measurement / 100, 10, 0);
  2802  0025C6  C035  F003         	movff	print_reading@measurement,___lwdiv@dividend
  2803  0025CA  C036  F004         	movff	print_reading@measurement+1,___lwdiv@dividend+1
  2804  0025CE  6A06               	clrf	___lwdiv@divisor+1,c
  2805  0025D0  0E64               	movlw	100
  2806  0025D2  6E05               	movwf	___lwdiv@divisor,c
  2807  0025D4  EC0B  F014         	call	___lwdiv	;wreg free
  2808  0025D8  C003  F037         	movff	?___lwdiv,_print_reading$1146
  2809  0025DC  C004  F038         	movff	?___lwdiv+1,_print_reading$1146+1
  2810                           
  2811                           ;print.c: 460: format_number( measurement / 100, 10, 0);
  2812  0025E0  C037  F00A         	movff	_print_reading$1146,format_number@n
  2813  0025E4  C038  F00B         	movff	_print_reading$1146+1,format_number@n+1
  2814  0025E8  0E0A               	movlw	10
  2815  0025EA  6E0C               	movwf	format_number@base,c
  2816  0025EC  6A0D               	clrf	format_number@pad,c
  2817  0025EE  ECD3  F00F         	call	_format_number	;wreg free
  2818                           
  2819                           ;print.c: 462: format_number( measurement % 100, 10, 0);
  2820  0025F2  C035  F003         	movff	print_reading@measurement,___lwmod@dividend
  2821  0025F6  C036  F004         	movff	print_reading@measurement+1,___lwmod@dividend+1
  2822  0025FA  6A06               	clrf	___lwmod@divisor+1,c
  2823  0025FC  0E64               	movlw	100
  2824  0025FE  6E05               	movwf	___lwmod@divisor,c
  2825  002600  EC99  F014         	call	___lwmod	;wreg free
  2826  002604  C003  F039         	movff	?___lwmod,_print_reading$1147
  2827  002608  C004  F03A         	movff	?___lwmod+1,_print_reading$1147+1
  2828                           
  2829                           ;print.c: 462: format_number( measurement % 100, 10, 0);
  2830  00260C  C039  F00A         	movff	_print_reading$1147,format_number@n
  2831  002610  C03A  F00B         	movff	_print_reading$1147+1,format_number@n+1
  2832  002614  0E0A               	movlw	10
  2833  002616  6E0C               	movwf	format_number@base,c
  2834  002618  6A0D               	clrf	format_number@pad,c
  2835  00261A  ECD3  F00F         	call	_format_number	;wreg free
  2836  00261E  0012               	return		;funcret
  2837  002620                     __end_of_print_reading:
  2838                           	opt stack 0
  2839                           tblptru	equ	0xFF8
  2840                           tblptrh	equ	0xFF7
  2841                           tblptrl	equ	0xFF6
  2842                           tablat	equ	0xFF5
  2843                           intcon	equ	0xFF2
  2844                           intcon2	equ	0xFF1
  2845                           postinc0	equ	0xFEE
  2846                           wreg	equ	0xFE8
  2847                           postdec1	equ	0xFE5
  2848                           fsr1l	equ	0xFE1
  2849                           status	equ	0xFD8
  2850                           
  2851 ;; *************** function _format_xint32 *****************
  2852 ;; Defined at:
  2853 ;;		line 48 in file "../../../lib/format.c"
  2854 ;; Parameters:    Size  Location     Type
  2855 ;;  x               4   52[COMRAM] unsigned long 
  2856 ;; Auto vars:     Size  Location     Type
  2857 ;;		None
  2858 ;; Return value:  Size  Location     Type
  2859 ;;		None               void
  2860 ;; Registers used:
  2861 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
  2862 ;; Tracked objects:
  2863 ;;		On entry : 0/0
  2864 ;;		On exit  : 0/0
  2865 ;;		Unchanged: 0/0
  2866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2867 ;;      Params:         4       0       0       0       0       0       0       0       0
  2868 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2869 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2870 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2871 ;;Total ram usage:        4 bytes
  2872 ;; Hardware stack levels used:    1
  2873 ;; Hardware stack levels required when called:    6
  2874 ;; This function calls:
  2875 ;;		_format_number
  2876 ;;		_format_putchar
  2877 ;;		_lcd_putch
  2878 ;;		_output_putch
  2879 ;;		_ser_putch
  2880 ;; This function is called by:
  2881 ;;		_measure_capacitance
  2882 ;; This function uses a non-reentrant model
  2883 ;;
  2884                           
  2885                           	psect	text7
  2886  002620                     __ptext7:
  2887                           	opt stack 0
  2888  002620                     _format_xint32:
  2889                           	opt stack 23
  2890                           
  2891                           ;format.c: 49: putchar_ptr('0');
  2892                           
  2893                           ;incstack = 0
  2894  002620  D801               	call	u2378
  2895  002622  D00B               	goto	u2379
  2896  002624                     u2378:
  2897  002624  0005               	push	
  2898  002626  0100               	movlb	0	; () banked
  2899  002628  6EFA               	movwf	pclath,c
  2900  00262A  51FE               	movf	_putchar_ptr& (0+255),w,b
  2901  00262C  6EFD               	movwf	tosl,c
  2902  00262E  51FF               	movf	(_putchar_ptr+1)& (0+255),w,b
  2903  002630  6EFE               	movwf	tosh,c
  2904  002632  50F8               	movf	tblptru,w,c
  2905  002634  6EFF               	movwf	tosu,c
  2906  002636  50FA               	movf	pclath,w,c
  2907  002638  0C30               	retlw	48	;indir
  2908  00263A                     u2379:
  2909                           
  2910                           ;format.c: 50: putchar_ptr('x');
  2911  00263A  D801               	call	u2388
  2912  00263C  D00B               	goto	u2389
  2913  00263E                     u2388:
  2914  00263E  0005               	push	
  2915  002640  0100               	movlb	0	; () banked
  2916  002642  6EFA               	movwf	pclath,c
  2917  002644  51FE               	movf	_putchar_ptr& (0+255),w,b
  2918  002646  6EFD               	movwf	tosl,c
  2919  002648  51FF               	movf	(_putchar_ptr+1)& (0+255),w,b
  2920  00264A  6EFE               	movwf	tosh,c
  2921  00264C  50F8               	movf	tblptru,w,c
  2922  00264E  6EFF               	movwf	tosu,c
  2923  002650  50FA               	movf	pclath,w,c
  2924  002652  0C78               	retlw	120	;indir
  2925  002654                     u2389:
  2926                           
  2927                           ;format.c: 51: format_number((unsigned short int)(x >> 16), 16, -4);
  2928  002654  C037  F00A         	movff	format_xint32@x+2,format_number@n
  2929  002658  C038  F00B         	movff	format_xint32@x+3,format_number@n+1
  2930  00265C  0E10               	movlw	16
  2931  00265E  6E0C               	movwf	format_number@base,c
  2932  002660  0EFC               	movlw	252
  2933  002662  6E0D               	movwf	format_number@pad,c
  2934  002664  ECD3  F00F         	call	_format_number
  2935                           
  2936                           ;format.c: 52: format_number((unsigned short int)(x & 0xffff), 16, -4);
  2937  002668  C035  F00A         	movff	format_xint32@x,format_number@n
  2938  00266C  C036  F00B         	movff	format_xint32@x+1,format_number@n+1
  2939  002670  0E10               	movlw	16
  2940  002672  6E0C               	movwf	format_number@base,c
  2941  002674  0EFC               	movlw	252
  2942  002676  6E0D               	movwf	format_number@pad,c
  2943  002678  ECD3  F00F         	call	_format_number	;wreg free
  2944  00267C  0012               	return		;funcret
  2945  00267E                     __end_of_format_xint32:
  2946                           	opt stack 0
  2947                           tosu	equ	0xFFF
  2948                           tosh	equ	0xFFE
  2949                           tosl	equ	0xFFD
  2950                           pclath	equ	0xFFA
  2951                           tblptru	equ	0xFF8
  2952                           tblptrh	equ	0xFF7
  2953                           tblptrl	equ	0xFF6
  2954                           tablat	equ	0xFF5
  2955                           intcon	equ	0xFF2
  2956                           intcon2	equ	0xFF1
  2957                           postinc0	equ	0xFEE
  2958                           wreg	equ	0xFE8
  2959                           postdec1	equ	0xFE5
  2960                           fsr1l	equ	0xFE1
  2961                           status	equ	0xFD8
  2962                           
  2963 ;; *************** function _format_double *****************
  2964 ;; Defined at:
  2965 ;;		line 74 in file "../../../lib/format.c"
  2966 ;; Parameters:    Size  Location     Type
  2967 ;;  num             4   58[BANK0 ] unsigned long 
  2968 ;; Auto vars:     Size  Location     Type
  2969 ;;  weight          4   70[BANK0 ] unsigned long 
  2970 ;;  m               2   76[BANK0 ] short 
  2971 ;;  digit           2   74[BANK0 ] short 
  2972 ;; Return value:  Size  Location     Type
  2973 ;;		None               void
  2974 ;; Registers used:
  2975 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2976 ;; Tracked objects:
  2977 ;;		On entry : 0/0
  2978 ;;		On exit  : 0/0
  2979 ;;		Unchanged: 0/0
  2980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2981 ;;      Params:         0       4       0       0       0       0       0       0       0
  2982 ;;      Locals:         0      16       0       0       0       0       0       0       0
  2983 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2984 ;;      Totals:         0      20       0       0       0       0       0       0       0
  2985 ;;Total ram usage:       20 bytes
  2986 ;; Hardware stack levels used:    1
  2987 ;; Hardware stack levels required when called:    6
  2988 ;; This function calls:
  2989 ;;		___awtofl
  2990 ;;		___fldiv
  2991 ;;		___flge
  2992 ;;		___flmul
  2993 ;;		___flsub
  2994 ;;		___fltol
  2995 ;;		_floor
  2996 ;;		_format_putchar
  2997 ;;		_lcd_putch
  2998 ;;		_log10
  2999 ;;		_output_putch
  3000 ;;		_pow
  3001 ;;		_ser_putch
  3002 ;; This function is called by:
  3003 ;;		_main
  3004 ;;		_measure_capacitance
  3005 ;; This function uses a non-reentrant model
  3006 ;;
  3007                           
  3008                           	psect	text8
  3009  001610                     __ptext8:
  3010                           	opt stack 0
  3011  001610                     _format_double:
  3012                           	opt stack 23
  3013                           
  3014                           ;format.c: 75: short m = (short)log10(num);
  3015                           
  3016                           ;incstack = 0
  3017  001610  C09A  F055         	movff	format_double@num,log10@x
  3018  001614  C09B  F056         	movff	format_double@num+1,log10@x+1
  3019  001618  C09C  F057         	movff	format_double@num+2,log10@x+2
  3020  00161C  C09D  F058         	movff	format_double@num+3,log10@x+3
  3021  001620  EC3F  F013         	call	_log10	;wreg free
  3022  001624  C055  F064         	movff	?_log10,___fltol@f1
  3023  001628  C056  F065         	movff	?_log10+1,___fltol@f1+1
  3024  00162C  C057  F066         	movff	?_log10+2,___fltol@f1+2
  3025  001630  C058  F067         	movff	?_log10+3,___fltol@f1+3
  3026  001634  ECB2  F011         	call	___fltol	;wreg free
  3027  001638  C064  F0AC         	movff	?___fltol,format_double@m
  3028  00163C  C065  F0AD         	movff	?___fltol+1,format_double@m+1
  3029                           
  3030                           ;format.c: 76: short digit;
  3031                           ;format.c: 79: while(num > 0 + 1.19209290e-07) {
  3032  001640  D0AE               	goto	l3995
  3033  001642                     l3977:
  3034                           
  3035                           ;format.c: 80: double weight = pow(10.0l, m);
  3036  001642  C0AC  F00D         	movff	format_double@m,___awtofl@c
  3037  001646  C0AD  F00E         	movff	format_double@m+1,___awtofl@c+1
  3038  00164A  ECB8  F014         	call	___awtofl	;wreg free
  3039  00164E  C00D  F09E         	movff	?___awtofl,_format_double$1150
  3040  001652  C00E  F09F         	movff	?___awtofl+1,_format_double$1150+1
  3041  001656  C00F  F0A0         	movff	?___awtofl+2,_format_double$1150+2
  3042  00165A  C010  F0A1         	movff	?___awtofl+3,_format_double$1150+3
  3043                           
  3044                           ;format.c: 80: double weight = pow(10.0l, m);
  3045  00165E  0100               	movlb	0	; () banked
  3046  001660  6B85               	clrf	pow@x& (0+255),b
  3047  001662  6B86               	clrf	(pow@x+1)& (0+255),b
  3048  001664  0E20               	movlw	32
  3049  001666  6F87               	movwf	(pow@x+2)& (0+255),b
  3050  001668  0E41               	movlw	65
  3051  00166A  6F88               	movwf	(pow@x+3)& (0+255),b
  3052  00166C  C09E  F089         	movff	_format_double$1150,pow@y
  3053  001670  C09F  F08A         	movff	_format_double$1150+1,pow@y+1
  3054  001674  C0A0  F08B         	movff	_format_double$1150+2,pow@y+2
  3055  001678  C0A1  F08C         	movff	_format_double$1150+3,pow@y+3
  3056  00167C  ECE1  F00B         	call	_pow	;wreg free
  3057  001680  C085  F0A6         	movff	?_pow,format_double@weight
  3058  001684  C086  F0A7         	movff	?_pow+1,format_double@weight+1
  3059  001688  C087  F0A8         	movff	?_pow+2,format_double@weight+2
  3060  00168C  C088  F0A9         	movff	?_pow+3,format_double@weight+3
  3061                           
  3062                           ; BSR set to: 0
  3063                           ;format.c: 81: digit = (short)floor(num / weight);
  3064  001690  C0A6  F011         	movff	format_double@weight,___fldiv@f2
  3065  001694  C0A7  F012         	movff	format_double@weight+1,___fldiv@f2+1
  3066  001698  C0A8  F013         	movff	format_double@weight+2,___fldiv@f2+2
  3067  00169C  C0A9  F014         	movff	format_double@weight+3,___fldiv@f2+3
  3068  0016A0  C09A  F00D         	movff	format_double@num,___fldiv@f1
  3069  0016A4  C09B  F00E         	movff	format_double@num+1,___fldiv@f1+1
  3070  0016A8  C09C  F00F         	movff	format_double@num+2,___fldiv@f1+2
  3071  0016AC  C09D  F010         	movff	format_double@num+3,___fldiv@f1+3
  3072  0016B0  EC5F  F011         	call	___fldiv	;wreg free
  3073  0016B4  C00D  F070         	movff	?___fldiv,floor@x
  3074  0016B8  C00E  F071         	movff	?___fldiv+1,floor@x+1
  3075  0016BC  C00F  F072         	movff	?___fldiv+2,floor@x+2
  3076  0016C0  C010  F073         	movff	?___fldiv+3,floor@x+3
  3077  0016C4  EC71  F00E         	call	_floor	;wreg free
  3078  0016C8  C070  F0A2         	movff	?_floor,_format_double$1151
  3079  0016CC  C071  F0A3         	movff	?_floor+1,_format_double$1151+1
  3080  0016D0  C072  F0A4         	movff	?_floor+2,_format_double$1151+2
  3081  0016D4  C073  F0A5         	movff	?_floor+3,_format_double$1151+3
  3082                           
  3083                           ;format.c: 81: digit = (short)floor(num / weight);
  3084  0016D8  C0A2  F064         	movff	_format_double$1151,___fltol@f1
  3085  0016DC  C0A3  F065         	movff	_format_double$1151+1,___fltol@f1+1
  3086  0016E0  C0A4  F066         	movff	_format_double$1151+2,___fltol@f1+2
  3087  0016E4  C0A5  F067         	movff	_format_double$1151+3,___fltol@f1+3
  3088  0016E8  ECB2  F011         	call	___fltol	;wreg free
  3089  0016EC  C064  F0AA         	movff	?___fltol,format_double@digit
  3090  0016F0  C065  F0AB         	movff	?___fltol+1,format_double@digit+1
  3091                           
  3092                           ; BSR set to: 0
  3093                           ;format.c: 82: num -= (digit * weight);
  3094  0016F4  C09A  F043         	movff	format_double@num,___flsub@f1
  3095  0016F8  C09B  F044         	movff	format_double@num+1,___flsub@f1+1
  3096  0016FC  C09C  F045         	movff	format_double@num+2,___flsub@f1+2
  3097  001700  C09D  F046         	movff	format_double@num+3,___flsub@f1+3
  3098  001704  C0A6  F020         	movff	format_double@weight,___flmul@f2
  3099  001708  C0A7  F021         	movff	format_double@weight+1,___flmul@f2+1
  3100  00170C  C0A8  F022         	movff	format_double@weight+2,___flmul@f2+2
  3101  001710  C0A9  F023         	movff	format_double@weight+3,___flmul@f2+3
  3102  001714  C0AA  F00D         	movff	format_double@digit,___awtofl@c
  3103  001718  C0AB  F00E         	movff	format_double@digit+1,___awtofl@c+1
  3104  00171C  ECB8  F014         	call	___awtofl	;wreg free
  3105  001720  C00D  F01C         	movff	?___awtofl,___flmul@f1
  3106  001724  C00E  F01D         	movff	?___awtofl+1,___flmul@f1+1
  3107  001728  C00F  F01E         	movff	?___awtofl+2,___flmul@f1+2
  3108  00172C  C010  F01F         	movff	?___awtofl+3,___flmul@f1+3
  3109  001730  EC29  F00A         	call	___flmul	;wreg free
  3110  001734  C01C  F047         	movff	?___flmul,___flsub@f2
  3111  001738  C01D  F048         	movff	?___flmul+1,___flsub@f2+1
  3112  00173C  C01E  F049         	movff	?___flmul+2,___flsub@f2+2
  3113  001740  C01F  F04A         	movff	?___flmul+3,___flsub@f2+3
  3114  001744  EC77  F014         	call	___flsub	;wreg free
  3115  001748  C043  F09A         	movff	?___flsub,format_double@num
  3116  00174C  C044  F09B         	movff	?___flsub+1,format_double@num+1
  3117  001750  C045  F09C         	movff	?___flsub+2,format_double@num+2
  3118  001754  C046  F09D         	movff	?___flsub+3,format_double@num+3
  3119                           
  3120                           ;format.c: 83: putchar_ptr((char)('0' + digit));
  3121  001758  D801               	call	u3458
  3122  00175A  D00D               	goto	l3989
  3123  00175C                     u3458:
  3124  00175C  0005               	push	
  3125  00175E  0100               	movlb	0	; () banked
  3126  001760  6EFA               	movwf	pclath,c
  3127  001762  51FE               	movf	_putchar_ptr& (0+255),w,b
  3128  001764  6EFD               	movwf	tosl,c
  3129  001766  51FF               	movf	(_putchar_ptr+1)& (0+255),w,b
  3130  001768  6EFE               	movwf	tosh,c
  3131  00176A  50F8               	movf	tblptru,w,c
  3132  00176C  6EFF               	movwf	tosu,c
  3133  00176E  50FA               	movf	pclath,w,c
  3134  001770  51AA               	movf	format_double@digit& (0+255),w,b
  3135  001772  0F30               	addlw	48
  3136  001774  0012               	return		;indir
  3137  001776                     l3989:
  3138                           
  3139                           ;format.c: 84: if(m == 0)
  3140  001776  0100               	movlb	0	; () banked
  3141  001778  51AC               	movf	format_double@m& (0+255),w,b
  3142  00177A  11AD               	iorwf	(format_double@m+1)& (0+255),w,b
  3143  00177C  E10C               	bnz	l3993
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;format.c: 85: putchar_ptr('.');
  3147  00177E  D801               	call	u3478
  3148  001780  D00A               	goto	l3993
  3149  001782                     u3478:
  3150  001782  0005               	push	
  3151  001784  6EFA               	movwf	pclath,c
  3152  001786  51FE               	movf	_putchar_ptr& (0+255),w,b
  3153  001788  6EFD               	movwf	tosl,c
  3154  00178A  51FF               	movf	(_putchar_ptr+1)& (0+255),w,b
  3155  00178C  6EFE               	movwf	tosh,c
  3156  00178E  50F8               	movf	tblptru,w,c
  3157  001790  6EFF               	movwf	tosu,c
  3158  001792  50FA               	movf	pclath,w,c
  3159  001794  0C2E               	retlw	46	;indir
  3160  001796                     l3993:
  3161                           
  3162                           ;format.c: 86: m--;
  3163  001796  0100               	movlb	0	; () banked
  3164  001798  07AC               	decf	format_double@m& (0+255),f,b
  3165  00179A  A0D8               	btfss	status,0,c
  3166  00179C  07AD               	decf	(format_double@m+1)& (0+255),f,b
  3167  00179E                     l3995:
  3168                           
  3169                           ; BSR set to: 0
  3170  00179E  6A03               	clrf	___flge@ff1,c
  3171  0017A0  6A04               	clrf	___flge@ff1+1,c
  3172  0017A2  6A05               	clrf	___flge@ff1+2,c
  3173  0017A4  0E34               	movlw	52
  3174  0017A6  6E06               	movwf	___flge@ff1+3,c
  3175  0017A8  C09A  F007         	movff	format_double@num,___flge@ff2
  3176  0017AC  C09B  F008         	movff	format_double@num+1,___flge@ff2+1
  3177  0017B0  C09C  F009         	movff	format_double@num+2,___flge@ff2+2
  3178  0017B4  C09D  F00A         	movff	format_double@num+3,___flge@ff2+3
  3179  0017B8  ECBF  F013         	call	___flge
  3180  0017BC  B0D8               	btfsc	status,0,c
  3181  0017BE  0012               	return		;funcret
  3182  0017C0  D740               	goto	l3977
  3183  0017C2                     __end_of_format_double:
  3184                           	opt stack 0
  3185                           tosu	equ	0xFFF
  3186                           tosh	equ	0xFFE
  3187                           tosl	equ	0xFFD
  3188                           pclath	equ	0xFFA
  3189                           tblptru	equ	0xFF8
  3190                           tblptrh	equ	0xFF7
  3191                           tblptrl	equ	0xFF6
  3192                           tablat	equ	0xFF5
  3193                           intcon	equ	0xFF2
  3194                           intcon2	equ	0xFF1
  3195                           postinc0	equ	0xFEE
  3196                           wreg	equ	0xFE8
  3197                           postdec1	equ	0xFE5
  3198                           fsr1l	equ	0xFE1
  3199                           status	equ	0xFD8
  3200                           
  3201 ;; *************** function _pow *****************
  3202 ;; Defined at:
  3203 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\pow.c"
  3204 ;; Parameters:    Size  Location     Type
  3205 ;;  x               4   37[BANK0 ] short 
  3206 ;;  y               4   41[BANK0 ] short 
  3207 ;; Auto vars:     Size  Location     Type
  3208 ;;  yi              4   54[BANK0 ] unsigned long 
  3209 ;;  sign            1   53[BANK0 ] unsigned char 
  3210 ;; Return value:  Size  Location     Type
  3211 ;;                  4   37[BANK0 ] unsigned char 
  3212 ;; Registers used:
  3213 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3214 ;; Tracked objects:
  3215 ;;		On entry : F/0
  3216 ;;		On exit  : F/0
  3217 ;;		Unchanged: 0/0
  3218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3219 ;;      Params:         0       8       0       0       0       0       0       0       0
  3220 ;;      Locals:         0      13       0       0       0       0       0       0       0
  3221 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3222 ;;      Totals:         0      21       0       0       0       0       0       0       0
  3223 ;;Total ram usage:       21 bytes
  3224 ;; Hardware stack levels used:    1
  3225 ;; Hardware stack levels required when called:    5
  3226 ;; This function calls:
  3227 ;;		___flge
  3228 ;;		___flmul
  3229 ;;		___flneg
  3230 ;;		___fltol
  3231 ;;		___lltofl
  3232 ;;		_exp
  3233 ;;		_log
  3234 ;; This function is called by:
  3235 ;;		_format_double
  3236 ;; This function uses a non-reentrant model
  3237 ;;
  3238                           
  3239                           	psect	text9
  3240  0017C2                     __ptext9:
  3241                           	opt stack 0
  3242  0017C2                     _pow:
  3243                           	opt stack 23
  3244                           
  3245                           ; BSR set to: 0
  3246                           
  3247                           ;incstack = 0
  3248  0017C2  6B95               	clrf	pow@sign& (0+255),b
  3249                           
  3250                           ; BSR set to: 0
  3251  0017C4  5185               	movf	pow@x& (0+255),w,b
  3252  0017C6  1186               	iorwf	(pow@x+1)& (0+255),w,b
  3253  0017C8  1187               	iorwf	(pow@x+2)& (0+255),w,b
  3254  0017CA  1188               	iorwf	(pow@x+3)& (0+255),w,b
  3255  0017CC  E110               	bnz	l3947
  3256                           
  3257                           ; BSR set to: 0
  3258  0017CE  6A03               	clrf	___flge@ff1,c
  3259  0017D0  6A04               	clrf	___flge@ff1+1,c
  3260  0017D2  6A05               	clrf	___flge@ff1+2,c
  3261  0017D4  6A06               	clrf	___flge@ff1+3,c
  3262  0017D6  C089  F007         	movff	pow@y,___flge@ff2
  3263  0017DA  C08A  F008         	movff	pow@y+1,___flge@ff2+1
  3264  0017DE  C08B  F009         	movff	pow@y+2,___flge@ff2+2
  3265  0017E2  C08C  F00A         	movff	pow@y+3,___flge@ff2+3
  3266  0017E6  ECBF  F013         	call	___flge	;wreg free
  3267  0017EA  0100               	movlb	0	; () banked
  3268  0017EC  D037               	goto	l3957
  3269  0017EE                     l3947:
  3270                           
  3271                           ; BSR set to: 0
  3272  0017EE  5189               	movf	pow@y& (0+255),w,b
  3273  0017F0  118A               	iorwf	(pow@y+1)& (0+255),w,b
  3274  0017F2  118B               	iorwf	(pow@y+2)& (0+255),w,b
  3275  0017F4  118C               	iorwf	(pow@y+3)& (0+255),w,b
  3276  0017F6  E107               	bnz	l3953
  3277                           
  3278                           ; BSR set to: 0
  3279  0017F8  6B85               	clrf	?_pow& (0+255),b
  3280  0017FA  6B86               	clrf	(?_pow+1)& (0+255),b
  3281  0017FC  0E80               	movlw	128
  3282  0017FE  6F87               	movwf	(?_pow+2)& (0+255),b
  3283  001800  0E3F               	movlw	63
  3284  001802  6F88               	movwf	(?_pow+3)& (0+255),b
  3285  001804  D0A1               	goto	l1154
  3286  001806                     l3953:
  3287                           
  3288                           ; BSR set to: 0
  3289  001806  AF88               	btfss	(pow@x+3)& (0+255),7,b
  3290  001808  D043               	goto	l3963
  3291                           
  3292                           ; BSR set to: 0
  3293  00180A  C089  F064         	movff	pow@y,___fltol@f1
  3294  00180E  C08A  F065         	movff	pow@y+1,___fltol@f1+1
  3295  001812  C08B  F066         	movff	pow@y+2,___fltol@f1+2
  3296  001816  C08C  F067         	movff	pow@y+3,___fltol@f1+3
  3297  00181A  ECB2  F011         	call	___fltol	;wreg free
  3298  00181E  C064  F096         	movff	?___fltol,pow@yi
  3299  001822  C065  F097         	movff	?___fltol+1,pow@yi+1
  3300  001826  C066  F098         	movff	?___fltol+2,pow@yi+2
  3301  00182A  C067  F099         	movff	?___fltol+3,pow@yi+3
  3302  00182E  C096  F00D         	movff	pow@yi,___lltofl@c
  3303  001832  C097  F00E         	movff	pow@yi+1,___lltofl@c+1
  3304  001836  C098  F00F         	movff	pow@yi+2,___lltofl@c+2
  3305  00183A  C099  F010         	movff	pow@yi+3,___lltofl@c+3
  3306  00183E  EC3F  F015         	call	___lltofl	;wreg free
  3307  001842  0100               	movlb	0	; () banked
  3308  001844  5189               	movf	pow@y& (0+255),w,b
  3309  001846  180D               	xorwf	?___lltofl,w,c
  3310  001848  E109               	bnz	u3430
  3311  00184A  518A               	movf	(pow@y+1)& (0+255),w,b
  3312  00184C  180E               	xorwf	?___lltofl+1,w,c
  3313  00184E  E106               	bnz	u3430
  3314  001850  518B               	movf	(pow@y+2)& (0+255),w,b
  3315  001852  180F               	xorwf	?___lltofl+2,w,c
  3316  001854  E103               	bnz	u3430
  3317  001856  518C               	movf	(pow@y+3)& (0+255),w,b
  3318  001858  1810               	xorwf	?___lltofl+3,w,c
  3319  00185A  E005               	bz	l3959
  3320  00185C                     u3430:
  3321  00185C                     l3957:
  3322                           
  3323                           ; BSR set to: 0
  3324  00185C  6B85               	clrf	?_pow& (0+255),b
  3325  00185E  6B86               	clrf	(?_pow+1)& (0+255),b
  3326  001860  6B87               	clrf	(?_pow+2)& (0+255),b
  3327  001862  6B88               	clrf	(?_pow+3)& (0+255),b
  3328  001864  D071               	goto	l1154
  3329  001866                     l3959:
  3330                           
  3331                           ; BSR set to: 0
  3332  001866  5196               	movf	pow@yi& (0+255),w,b
  3333  001868  0B01               	andlw	1
  3334  00186A  6F95               	movwf	pow@sign& (0+255),b
  3335                           
  3336                           ; BSR set to: 0
  3337  00186C  C085  F003         	movff	pow@x,___flneg@f1
  3338  001870  C086  F004         	movff	pow@x+1,___flneg@f1+1
  3339  001874  C087  F005         	movff	pow@x+2,___flneg@f1+2
  3340  001878  C088  F006         	movff	pow@x+3,___flneg@f1+3
  3341  00187C  ECB8  F015         	call	___flneg	;wreg free
  3342  001880  C003  F085         	movff	?___flneg,pow@x
  3343  001884  C004  F086         	movff	?___flneg+1,pow@x+1
  3344  001888  C005  F087         	movff	?___flneg+2,pow@x+2
  3345  00188C  C006  F088         	movff	?___flneg+3,pow@x+3
  3346  001890                     l3963:
  3347                           
  3348                           ; BSR set to: 0
  3349  001890  C085  F04F         	movff	pow@x,log@x
  3350  001894  C086  F050         	movff	pow@x+1,log@x+1
  3351  001898  C087  F051         	movff	pow@x+2,log@x+2
  3352  00189C  C088  F052         	movff	pow@x+3,log@x+3
  3353  0018A0  EC59  F00D         	call	_log	;wreg free
  3354  0018A4  C04F  F08D         	movff	?_log,_pow$1163
  3355  0018A8  C050  F08E         	movff	?_log+1,_pow$1163+1
  3356  0018AC  C051  F08F         	movff	?_log+2,_pow$1163+2
  3357  0018B0  C052  F090         	movff	?_log+3,_pow$1163+3
  3358  0018B4  C08D  F01C         	movff	_pow$1163,___flmul@f1
  3359  0018B8  C08E  F01D         	movff	_pow$1163+1,___flmul@f1+1
  3360  0018BC  C08F  F01E         	movff	_pow$1163+2,___flmul@f1+2
  3361  0018C0  C090  F01F         	movff	_pow$1163+3,___flmul@f1+3
  3362  0018C4  C089  F020         	movff	pow@y,___flmul@f2
  3363  0018C8  C08A  F021         	movff	pow@y+1,___flmul@f2+1
  3364  0018CC  C08B  F022         	movff	pow@y+2,___flmul@f2+2
  3365  0018D0  C08C  F023         	movff	pow@y+3,___flmul@f2+3
  3366  0018D4  EC29  F00A         	call	___flmul	;wreg free
  3367  0018D8  C01C  F091         	movff	?___flmul,_pow$1164
  3368  0018DC  C01D  F092         	movff	?___flmul+1,_pow$1164+1
  3369  0018E0  C01E  F093         	movff	?___flmul+2,_pow$1164+2
  3370  0018E4  C01F  F094         	movff	?___flmul+3,_pow$1164+3
  3371  0018E8  C091  F07A         	movff	_pow$1164,exp@x
  3372  0018EC  C092  F07B         	movff	_pow$1164+1,exp@x+1
  3373  0018F0  C093  F07C         	movff	_pow$1164+2,exp@x+2
  3374  0018F4  C094  F07D         	movff	_pow$1164+3,exp@x+3
  3375  0018F8  EC20  F009         	call	_exp	;wreg free
  3376  0018FC  C07A  F085         	movff	?_exp,pow@x
  3377  001900  C07B  F086         	movff	?_exp+1,pow@x+1
  3378  001904  C07C  F087         	movff	?_exp+2,pow@x+2
  3379  001908  C07D  F088         	movff	?_exp+3,pow@x+3
  3380  00190C  0100               	movlb	0	; () banked
  3381  00190E  5195               	movf	pow@sign& (0+255),w,b
  3382  001910  E013               	bz	l1158
  3383                           
  3384                           ; BSR set to: 0
  3385  001912  C085  F003         	movff	pow@x,___flneg@f1
  3386  001916  C086  F004         	movff	pow@x+1,___flneg@f1+1
  3387  00191A  C087  F005         	movff	pow@x+2,___flneg@f1+2
  3388  00191E  C088  F006         	movff	pow@x+3,___flneg@f1+3
  3389  001922  ECB8  F015         	call	___flneg	;wreg free
  3390  001926  C003  F085         	movff	?___flneg,?_pow
  3391  00192A  C004  F086         	movff	?___flneg+1,?_pow+1
  3392  00192E  C005  F087         	movff	?___flneg+2,?_pow+2
  3393  001932  C006  F088         	movff	?___flneg+3,?_pow+3
  3394  001936  D008               	goto	l1154
  3395  001938                     l1158:
  3396                           
  3397                           ; BSR set to: 0
  3398  001938  C085  F085         	movff	pow@x,?_pow
  3399  00193C  C086  F086         	movff	pow@x+1,?_pow+1
  3400  001940  C087  F087         	movff	pow@x+2,?_pow+2
  3401  001944  C088  F088         	movff	pow@x+3,?_pow+3
  3402  001948                     l1154:
  3403                           
  3404                           ; BSR set to: 0
  3405  001948  0012               	return		;funcret
  3406  00194A                     __end_of_pow:
  3407                           	opt stack 0
  3408                           tosu	equ	0xFFF
  3409                           tosh	equ	0xFFE
  3410                           tosl	equ	0xFFD
  3411                           pclath	equ	0xFFA
  3412                           tblptru	equ	0xFF8
  3413                           tblptrh	equ	0xFF7
  3414                           tblptrl	equ	0xFF6
  3415                           tablat	equ	0xFF5
  3416                           intcon	equ	0xFF2
  3417                           intcon2	equ	0xFF1
  3418                           postinc0	equ	0xFEE
  3419                           wreg	equ	0xFE8
  3420                           postdec1	equ	0xFE5
  3421                           fsr1l	equ	0xFE1
  3422                           status	equ	0xFD8
  3423                           
  3424 ;; *************** function _exp *****************
  3425 ;; Defined at:
  3426 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\exp.c"
  3427 ;; Parameters:    Size  Location     Type
  3428 ;;  x               4   26[BANK0 ] unsigned char 
  3429 ;; Auto vars:     Size  Location     Type
  3430 ;;  exponent        2   34[BANK0 ] int 
  3431 ;;  sign            1   36[BANK0 ] unsigned char 
  3432 ;; Return value:  Size  Location     Type
  3433 ;;                  4   26[BANK0 ] unsigned char 
  3434 ;; Registers used:
  3435 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3436 ;; Tracked objects:
  3437 ;;		On entry : 0/0
  3438 ;;		On exit  : 0/0
  3439 ;;		Unchanged: 0/0
  3440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3441 ;;      Params:         0       4       0       0       0       0       0       0       0
  3442 ;;      Locals:         0       7       0       0       0       0       0       0       0
  3443 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3444 ;;      Totals:         0      11       0       0       0       0       0       0       0
  3445 ;;Total ram usage:       11 bytes
  3446 ;; Hardware stack levels used:    1
  3447 ;; Hardware stack levels required when called:    4
  3448 ;; This function calls:
  3449 ;;		___awtofl
  3450 ;;		___fldiv
  3451 ;;		___flge
  3452 ;;		___flmul
  3453 ;;		___flneg
  3454 ;;		___flsub
  3455 ;;		___fltol
  3456 ;;		_eval_poly
  3457 ;;		_floor
  3458 ;;		_ldexp
  3459 ;; This function is called by:
  3460 ;;		_pow
  3461 ;; This function uses a non-reentrant model
  3462 ;;
  3463                           
  3464                           	psect	text10
  3465  001240                     __ptext10:
  3466                           	opt stack 0
  3467  001240                     _exp:
  3468                           	opt stack 23
  3469                           
  3470                           ; BSR set to: 0
  3471                           ;incstack = 0
  3472  001240  0100               	movlb	0	; () banked
  3473  001242  517A               	movf	exp@x& (0+255),w,b
  3474  001244  117B               	iorwf	(exp@x+1)& (0+255),w,b
  3475  001246  117C               	iorwf	(exp@x+2)& (0+255),w,b
  3476  001248  117D               	iorwf	(exp@x+3)& (0+255),w,b
  3477  00124A  E106               	bnz	l3899
  3478                           
  3479                           ; BSR set to: 0
  3480  00124C  6B7A               	clrf	?_exp& (0+255),b
  3481  00124E  6B7B               	clrf	(?_exp+1)& (0+255),b
  3482  001250  0E80               	movlw	128
  3483  001252  6F7C               	movwf	(?_exp+2)& (0+255),b
  3484  001254  0E3F               	movlw	63
  3485  001256  D018               	goto	L3
  3486  001258                     l3899:
  3487                           
  3488                           ; BSR set to: 0
  3489  001258  0E18               	movlw	24
  3490  00125A  6E03               	movwf	___flge@ff1,c
  3491  00125C  0E72               	movlw	114
  3492  00125E  6E04               	movwf	___flge@ff1+1,c
  3493  001260  0E31               	movlw	49
  3494  001262  6E05               	movwf	___flge@ff1+2,c
  3495  001264  0E44               	movlw	68
  3496  001266  6E06               	movwf	___flge@ff1+3,c
  3497  001268  C07A  F007         	movff	exp@x,___flge@ff2
  3498  00126C  C07B  F008         	movff	exp@x+1,___flge@ff2+1
  3499  001270  C07C  F009         	movff	exp@x+2,___flge@ff2+2
  3500  001274  C07D  F00A         	movff	exp@x+3,___flge@ff2+3
  3501  001278  ECBF  F013         	call	___flge	;wreg free
  3502  00127C  E207               	bc	l3905
  3503  00127E  0100               	movlb	0	; () banked
  3504  001280  697A               	setf	?_exp& (0+255),b
  3505  001282  697B               	setf	(?_exp+1)& (0+255),b
  3506  001284  0E7F               	movlw	127
  3507  001286  6F7C               	movwf	(?_exp+2)& (0+255),b
  3508  001288                     L3:
  3509  001288  6F7D               	movwf	(?_exp+3)& (0+255),b
  3510  00128A  D0E2               	goto	l1180
  3511  00128C                     l3905:
  3512  00128C  C07A  F003         	movff	exp@x,___flge@ff1
  3513  001290  C07B  F004         	movff	exp@x+1,___flge@ff1+1
  3514  001294  C07C  F005         	movff	exp@x+2,___flge@ff1+2
  3515  001298  C07D  F006         	movff	exp@x+3,___flge@ff1+3
  3516  00129C  0E87               	movlw	135
  3517  00129E  6E07               	movwf	___flge@ff2,c
  3518  0012A0  0E48               	movlw	72
  3519  0012A2  6E08               	movwf	___flge@ff2+1,c
  3520  0012A4  0E3A               	movlw	58
  3521  0012A6  6E09               	movwf	___flge@ff2+2,c
  3522  0012A8  0EC4               	movlw	196
  3523  0012AA  6E0A               	movwf	___flge@ff2+3,c
  3524  0012AC  ECBF  F013         	call	___flge	;wreg free
  3525  0012B0  E202               	bc	l3909
  3526  0012B2  0100               	movlb	0	; () banked
  3527  0012B4  D0A6               	goto	l3929
  3528  0012B6                     l3909:
  3529  0012B6  0100               	movlb	0	; () banked
  3530  0012B8  0E01               	movlw	1
  3531  0012BA  AF7D               	btfss	(exp@x+3)& (0+255),7,b
  3532  0012BC  0E00               	movlw	0
  3533  0012BE  6F84               	movwf	exp@sign& (0+255),b
  3534                           
  3535                           ; BSR set to: 0
  3536  0012C0  5184               	movf	exp@sign& (0+255),w,b
  3537  0012C2  E012               	bz	l3915
  3538                           
  3539                           ; BSR set to: 0
  3540  0012C4  C07A  F003         	movff	exp@x,___flneg@f1
  3541  0012C8  C07B  F004         	movff	exp@x+1,___flneg@f1+1
  3542  0012CC  C07C  F005         	movff	exp@x+2,___flneg@f1+2
  3543  0012D0  C07D  F006         	movff	exp@x+3,___flneg@f1+3
  3544  0012D4  ECB8  F015         	call	___flneg	;wreg free
  3545  0012D8  C003  F07A         	movff	?___flneg,exp@x
  3546  0012DC  C004  F07B         	movff	?___flneg+1,exp@x+1
  3547  0012E0  C005  F07C         	movff	?___flneg+2,exp@x+2
  3548  0012E4  C006  F07D         	movff	?___flneg+3,exp@x+3
  3549  0012E8                     l3915:
  3550                           
  3551                           ; BSR set to: 0
  3552  0012E8  C07A  F01C         	movff	exp@x,___flmul@f1
  3553  0012EC  C07B  F01D         	movff	exp@x+1,___flmul@f1+1
  3554  0012F0  C07C  F01E         	movff	exp@x+2,___flmul@f1+2
  3555  0012F4  C07D  F01F         	movff	exp@x+3,___flmul@f1+3
  3556  0012F8  0E3B               	movlw	59
  3557  0012FA  6E20               	movwf	___flmul@f2,c
  3558  0012FC  0EAA               	movlw	170
  3559  0012FE  6E21               	movwf	___flmul@f2+1,c
  3560  001300  0EB8               	movlw	184
  3561  001302  6E22               	movwf	___flmul@f2+2,c
  3562  001304  0E3F               	movlw	63
  3563  001306  6E23               	movwf	___flmul@f2+3,c
  3564  001308  EC29  F00A         	call	___flmul	;wreg free
  3565  00130C  C01C  F07A         	movff	?___flmul,exp@x
  3566  001310  C01D  F07B         	movff	?___flmul+1,exp@x+1
  3567  001314  C01E  F07C         	movff	?___flmul+2,exp@x+2
  3568  001318  C01F  F07D         	movff	?___flmul+3,exp@x+3
  3569  00131C  C07A  F070         	movff	exp@x,floor@x
  3570  001320  C07B  F071         	movff	exp@x+1,floor@x+1
  3571  001324  C07C  F072         	movff	exp@x+2,floor@x+2
  3572  001328  C07D  F073         	movff	exp@x+3,floor@x+3
  3573  00132C  EC71  F00E         	call	_floor	;wreg free
  3574  001330  C070  F07E         	movff	?_floor,_exp$1165
  3575  001334  C071  F07F         	movff	?_floor+1,_exp$1165+1
  3576  001338  C072  F080         	movff	?_floor+2,_exp$1165+2
  3577  00133C  C073  F081         	movff	?_floor+3,_exp$1165+3
  3578  001340  C07E  F064         	movff	_exp$1165,___fltol@f1
  3579  001344  C07F  F065         	movff	_exp$1165+1,___fltol@f1+1
  3580  001348  C080  F066         	movff	_exp$1165+2,___fltol@f1+2
  3581  00134C  C081  F067         	movff	_exp$1165+3,___fltol@f1+3
  3582  001350  ECB2  F011         	call	___fltol	;wreg free
  3583  001354  C064  F082         	movff	?___fltol,exp@exponent
  3584  001358  C065  F083         	movff	?___fltol+1,exp@exponent+1
  3585                           
  3586                           ; BSR set to: 0
  3587  00135C  C07A  F043         	movff	exp@x,___flsub@f1
  3588  001360  C07B  F044         	movff	exp@x+1,___flsub@f1+1
  3589  001364  C07C  F045         	movff	exp@x+2,___flsub@f1+2
  3590  001368  C07D  F046         	movff	exp@x+3,___flsub@f1+3
  3591  00136C  C082  F00D         	movff	exp@exponent,___awtofl@c
  3592  001370  C083  F00E         	movff	exp@exponent+1,___awtofl@c+1
  3593  001374  ECB8  F014         	call	___awtofl	;wreg free
  3594  001378  C00D  F047         	movff	?___awtofl,___flsub@f2
  3595  00137C  C00E  F048         	movff	?___awtofl+1,___flsub@f2+1
  3596  001380  C00F  F049         	movff	?___awtofl+2,___flsub@f2+2
  3597  001384  C010  F04A         	movff	?___awtofl+3,___flsub@f2+3
  3598  001388  EC77  F014         	call	___flsub	;wreg free
  3599  00138C  C043  F07A         	movff	?___flsub,exp@x
  3600  001390  C044  F07B         	movff	?___flsub+1,exp@x+1
  3601  001394  C045  F07C         	movff	?___flsub+2,exp@x+2
  3602  001398  C046  F07D         	movff	?___flsub+3,exp@x+3
  3603  00139C  C07A  F043         	movff	exp@x,eval_poly@x
  3604  0013A0  C07B  F044         	movff	exp@x+1,eval_poly@x+1
  3605  0013A4  C07C  F045         	movff	exp@x+2,eval_poly@x+2
  3606  0013A8  C07D  F046         	movff	exp@x+3,eval_poly@x+3
  3607  0013AC  0E01               	movlw	low exp@coeff
  3608  0013AE  6E47               	movwf	eval_poly@d,c
  3609  0013B0  6A49               	clrf	eval_poly@n+1,c
  3610  0013B2  0E09               	movlw	9
  3611  0013B4  6E48               	movwf	eval_poly@n,c
  3612  0013B6  EC01  F011         	call	_eval_poly	;wreg free
  3613  0013BA  C043  F04F         	movff	?_eval_poly,ldexp@value
  3614  0013BE  C044  F050         	movff	?_eval_poly+1,ldexp@value+1
  3615  0013C2  C045  F051         	movff	?_eval_poly+2,ldexp@value+2
  3616  0013C6  C046  F052         	movff	?_eval_poly+3,ldexp@value+3
  3617  0013CA  C082  F053         	movff	exp@exponent,ldexp@newexp
  3618  0013CE  C083  F054         	movff	exp@exponent+1,ldexp@newexp+1
  3619  0013D2  EC50  F012         	call	_ldexp	;wreg free
  3620  0013D6  C04F  F07A         	movff	?_ldexp,exp@x
  3621  0013DA  C050  F07B         	movff	?_ldexp+1,exp@x+1
  3622  0013DE  C051  F07C         	movff	?_ldexp+2,exp@x+2
  3623  0013E2  C052  F07D         	movff	?_ldexp+3,exp@x+3
  3624  0013E6  0100               	movlb	0	; () banked
  3625  0013E8  5184               	movf	exp@sign& (0+255),w,b
  3626  0013EA  E02A               	bz	l1184
  3627                           
  3628                           ; BSR set to: 0
  3629  0013EC  297A               	incf	exp@x& (0+255),w,b
  3630  0013EE  E10E               	bnz	l3931
  3631  0013F0  297B               	incf	(exp@x+1)& (0+255),w,b
  3632  0013F2  E10C               	bnz	l3931
  3633  0013F4  0E7F               	movlw	127
  3634  0013F6  197C               	xorwf	(exp@x+2)& (0+255),w,b
  3635  0013F8  E109               	bnz	l3931
  3636  0013FA  0E7F               	movlw	127
  3637  0013FC  197D               	xorwf	(exp@x+3)& (0+255),w,b
  3638  0013FE  A4D8               	btfss	status,2,c
  3639  001400  D005               	goto	l3931
  3640  001402                     l3929:
  3641                           
  3642                           ; BSR set to: 0
  3643  001402  6B7A               	clrf	?_exp& (0+255),b
  3644  001404  6B7B               	clrf	(?_exp+1)& (0+255),b
  3645  001406  6B7C               	clrf	(?_exp+2)& (0+255),b
  3646  001408  6B7D               	clrf	(?_exp+3)& (0+255),b
  3647  00140A  D022               	goto	l1180
  3648  00140C                     l3931:
  3649                           
  3650                           ; BSR set to: 0
  3651  00140C  0E00               	movlw	0
  3652  00140E  6E0D               	movwf	___fldiv@f1,c
  3653  001410  6E0E               	movwf	___fldiv@f1+1,c
  3654  001412  0E80               	movlw	128
  3655  001414  6E0F               	movwf	___fldiv@f1+2,c
  3656  001416  0E3F               	movlw	63
  3657  001418  6E10               	movwf	___fldiv@f1+3,c
  3658  00141A  C07A  F011         	movff	exp@x,___fldiv@f2
  3659  00141E  C07B  F012         	movff	exp@x+1,___fldiv@f2+1
  3660  001422  C07C  F013         	movff	exp@x+2,___fldiv@f2+2
  3661  001426  C07D  F014         	movff	exp@x+3,___fldiv@f2+3
  3662  00142A  EC5F  F011         	call	___fldiv	;wreg free
  3663  00142E  C00D  F07A         	movff	?___fldiv,?_exp
  3664  001432  C00E  F07B         	movff	?___fldiv+1,?_exp+1
  3665  001436  C00F  F07C         	movff	?___fldiv+2,?_exp+2
  3666  00143A  C010  F07D         	movff	?___fldiv+3,?_exp+3
  3667  00143E  D008               	goto	l1180
  3668  001440                     l1184:
  3669                           
  3670                           ; BSR set to: 0
  3671  001440  C07A  F07A         	movff	exp@x,?_exp
  3672  001444  C07B  F07B         	movff	exp@x+1,?_exp+1
  3673  001448  C07C  F07C         	movff	exp@x+2,?_exp+2
  3674  00144C  C07D  F07D         	movff	exp@x+3,?_exp+3
  3675  001450                     l1180:
  3676  001450  0012               	return		;funcret
  3677  001452                     __end_of_exp:
  3678                           	opt stack 0
  3679                           tosu	equ	0xFFF
  3680                           tosh	equ	0xFFE
  3681                           tosl	equ	0xFFD
  3682                           pclath	equ	0xFFA
  3683                           tblptru	equ	0xFF8
  3684                           tblptrh	equ	0xFF7
  3685                           tblptrl	equ	0xFF6
  3686                           tablat	equ	0xFF5
  3687                           intcon	equ	0xFF2
  3688                           intcon2	equ	0xFF1
  3689                           postinc0	equ	0xFEE
  3690                           wreg	equ	0xFE8
  3691                           postdec1	equ	0xFE5
  3692                           fsr1l	equ	0xFE1
  3693                           status	equ	0xFD8
  3694                           
  3695 ;; *************** function _ldexp *****************
  3696 ;; Defined at:
  3697 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  3698 ;; Parameters:    Size  Location     Type
  3699 ;;  value           4   78[COMRAM] unsigned char 
  3700 ;;  newexp          2   82[COMRAM] int 
  3701 ;; Auto vars:     Size  Location     Type
  3702 ;;		None
  3703 ;; Return value:  Size  Location     Type
  3704 ;;                  4   78[COMRAM] int 
  3705 ;; Registers used:
  3706 ;;		wreg, status,2, status,0
  3707 ;; Tracked objects:
  3708 ;;		On entry : 0/0
  3709 ;;		On exit  : 0/0
  3710 ;;		Unchanged: 0/0
  3711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3712 ;;      Params:         6       0       0       0       0       0       0       0       0
  3713 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3714 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3715 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3716 ;;Total ram usage:        8 bytes
  3717 ;; Hardware stack levels used:    1
  3718 ;; Hardware stack levels required when called:    1
  3719 ;; This function calls:
  3720 ;;		Nothing
  3721 ;; This function is called by:
  3722 ;;		_exp
  3723 ;; This function uses a non-reentrant model
  3724 ;;
  3725                           
  3726                           	psect	text11
  3727  0024A0                     __ptext11:
  3728                           	opt stack 0
  3729  0024A0                     _ldexp:
  3730                           	opt stack 25
  3731                           
  3732                           ;incstack = 0
  3733  0024A0  504F               	movf	ldexp@value,w,c
  3734  0024A2  1050               	iorwf	ldexp@value+1,w,c
  3735  0024A4  1051               	iorwf	ldexp@value+2,w,c
  3736  0024A6  1052               	iorwf	ldexp@value+3,w,c
  3737  0024A8  E013               	bz	l2767
  3738  0024AA  5052               	movf	ldexp@value+3,w,c
  3739  0024AC  0B7F               	andlw	127
  3740  0024AE  6E55               	movwf	??_ldexp& (0+255),c
  3741  0024B0  6A56               	clrf	(??_ldexp+1)& (0+255),c
  3742  0024B2  90D8               	bcf	status,0,c
  3743  0024B4  3655               	rlcf	??_ldexp,f,c
  3744  0024B6  3656               	rlcf	??_ldexp+1,f,c
  3745  0024B8  5055               	movf	??_ldexp,w,c
  3746  0024BA  2653               	addwf	ldexp@newexp,f,c
  3747  0024BC  5056               	movf	??_ldexp+1,w,c
  3748  0024BE  2254               	addwfc	ldexp@newexp+1,f,c
  3749  0024C0  0E01               	movlw	1
  3750  0024C2  AE51               	btfss	ldexp@value+2,7,c
  3751  0024C4  0E00               	movlw	0
  3752  0024C6  2653               	addwf	ldexp@newexp,f,c
  3753  0024C8  0E00               	movlw	0
  3754  0024CA  2254               	addwfc	ldexp@newexp+1,f,c
  3755  0024CC  AE54               	btfss	ldexp@newexp+1,7,c
  3756  0024CE  D005               	goto	l2771
  3757  0024D0                     l2767:
  3758  0024D0  6A4F               	clrf	?_ldexp,c
  3759  0024D2  6A50               	clrf	?_ldexp+1,c
  3760  0024D4  6A51               	clrf	?_ldexp+2,c
  3761  0024D6  6A52               	clrf	?_ldexp+3,c
  3762  0024D8  D02E               	goto	l916
  3763  0024DA                     l2771:
  3764  0024DA  BE54               	btfsc	ldexp@newexp+1,7,c
  3765  0024DC  D010               	goto	l2785
  3766  0024DE  0454               	decf	ldexp@newexp+1,w,c
  3767  0024E0  E30E               	bnc	l2785
  3768  0024E2  AE52               	btfss	ldexp@value+3,7,c
  3769  0024E4  D006               	goto	l2781
  3770  0024E6  684F               	setf	?_ldexp,c
  3771  0024E8  6850               	setf	?_ldexp+1,c
  3772  0024EA  0E7F               	movlw	127
  3773  0024EC  6E51               	movwf	?_ldexp+2,c
  3774  0024EE  0EFF               	movlw	255
  3775  0024F0  D004               	goto	L4
  3776  0024F2                     l2781:
  3777  0024F2  684F               	setf	?_ldexp,c
  3778  0024F4  6850               	setf	?_ldexp+1,c
  3779  0024F6  0E7F               	movlw	127
  3780  0024F8  6E51               	movwf	?_ldexp+2,c
  3781  0024FA                     L4:
  3782  0024FA  6E52               	movwf	?_ldexp+3,c
  3783  0024FC  D01C               	goto	l916
  3784  0024FE                     l2785:
  3785  0024FE  3454               	rlcf	ldexp@newexp+1,w,c
  3786  002500  3054               	rrcf	ldexp@newexp+1,w,c
  3787  002502  6E56               	movwf	(??_ldexp+1)& (0+255),c
  3788  002504  3053               	rrcf	ldexp@newexp,w,c
  3789  002506  6E55               	movwf	??_ldexp& (0+255),c
  3790  002508  1852               	xorwf	ldexp@value+3,w,c
  3791  00250A  0B80               	andlw	-128
  3792  00250C  1855               	xorwf	??_ldexp,w,c
  3793  00250E  6E52               	movwf	ldexp@value+3,c
  3794  002510  C053  F055         	movff	ldexp@newexp,??_ldexp
  3795  002514  0E01               	movlw	1
  3796  002516  1655               	andwf	??_ldexp,f,c
  3797  002518  3255               	rrcf	??_ldexp,f,c
  3798  00251A  3255               	rrcf	??_ldexp,f,c
  3799  00251C  5051               	movf	ldexp@value+2,w,c
  3800  00251E  1855               	xorwf	??_ldexp,w,c
  3801  002520  0B7F               	andlw	-129
  3802  002522  1855               	xorwf	??_ldexp,w,c
  3803  002524  6E51               	movwf	ldexp@value+2,c
  3804  002526  C04F  F04F         	movff	ldexp@value,?_ldexp
  3805  00252A  C050  F050         	movff	ldexp@value+1,?_ldexp+1
  3806  00252E  C051  F051         	movff	ldexp@value+2,?_ldexp+2
  3807  002532  C052  F052         	movff	ldexp@value+3,?_ldexp+3
  3808  002536                     l916:
  3809  002536  0012               	return		;funcret
  3810  002538                     __end_of_ldexp:
  3811                           	opt stack 0
  3812                           tosu	equ	0xFFF
  3813                           tosh	equ	0xFFE
  3814                           tosl	equ	0xFFD
  3815                           pclath	equ	0xFFA
  3816                           tblptru	equ	0xFF8
  3817                           tblptrh	equ	0xFF7
  3818                           tblptrl	equ	0xFF6
  3819                           tablat	equ	0xFF5
  3820                           intcon	equ	0xFF2
  3821                           intcon2	equ	0xFF1
  3822                           postinc0	equ	0xFEE
  3823                           wreg	equ	0xFE8
  3824                           postdec1	equ	0xFE5
  3825                           fsr1l	equ	0xFE1
  3826                           status	equ	0xFD8
  3827                           
  3828 ;; *************** function _floor *****************
  3829 ;; Defined at:
  3830 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\floor.c"
  3831 ;; Parameters:    Size  Location     Type
  3832 ;;  x               4   16[BANK0 ] int 
  3833 ;; Auto vars:     Size  Location     Type
  3834 ;;  i               4   20[BANK0 ] int 
  3835 ;;  expon           2   24[BANK0 ] int 
  3836 ;; Return value:  Size  Location     Type
  3837 ;;                  4   16[BANK0 ] int 
  3838 ;; Registers used:
  3839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3840 ;; Tracked objects:
  3841 ;;		On entry : 0/0
  3842 ;;		On exit  : 0/0
  3843 ;;		Unchanged: 0/0
  3844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3845 ;;      Params:         0       4       0       0       0       0       0       0       0
  3846 ;;      Locals:         0       6       0       0       0       0       0       0       0
  3847 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3848 ;;      Totals:         0      10       0       0       0       0       0       0       0
  3849 ;;Total ram usage:       10 bytes
  3850 ;; Hardware stack levels used:    1
  3851 ;; Hardware stack levels required when called:    3
  3852 ;; This function calls:
  3853 ;;		___altofl
  3854 ;;		___fladd
  3855 ;;		___flge
  3856 ;;		___fltol
  3857 ;;		_frexp
  3858 ;; This function is called by:
  3859 ;;		_format_double
  3860 ;;		_exp
  3861 ;; This function uses a non-reentrant model
  3862 ;;
  3863                           
  3864                           	psect	text12
  3865  001CE2                     __ptext12:
  3866                           	opt stack 0
  3867  001CE2                     _floor:
  3868                           	opt stack 23
  3869                           
  3870                           ;incstack = 0
  3871  001CE2  C070  F003         	movff	floor@x,frexp@value
  3872  001CE6  C071  F004         	movff	floor@x+1,frexp@value+1
  3873  001CEA  C072  F005         	movff	floor@x+2,frexp@value+2
  3874  001CEE  C073  F006         	movff	floor@x+3,frexp@value+3
  3875  001CF2  0E78               	movlw	low floor@expon
  3876  001CF4  6E07               	movwf	frexp@eptr,c
  3877  001CF6  EC9C  F012         	call	_frexp	;wreg free
  3878  001CFA  0100               	movlb	0	; () banked
  3879  001CFC  AF79               	btfss	(floor@expon+1)& (0+255),7,b
  3880  001CFE  D00E               	goto	l3801
  3881                           
  3882                           ; BSR set to: 0
  3883  001D00  AF73               	btfss	(floor@x+3)& (0+255),7,b
  3884  001D02  D007               	goto	l883
  3885                           
  3886                           ; BSR set to: 0
  3887  001D04  6B70               	clrf	?_floor& (0+255),b
  3888  001D06  6B71               	clrf	(?_floor+1)& (0+255),b
  3889  001D08  0E80               	movlw	128
  3890  001D0A  6F72               	movwf	(?_floor+2)& (0+255),b
  3891  001D0C  0EBF               	movlw	191
  3892  001D0E  6F73               	movwf	(?_floor+3)& (0+255),b
  3893  001D10  D064               	goto	l884
  3894  001D12                     l883:
  3895                           
  3896                           ; BSR set to: 0
  3897  001D12  6B70               	clrf	?_floor& (0+255),b
  3898  001D14  6B71               	clrf	(?_floor+1)& (0+255),b
  3899  001D16  6B72               	clrf	(?_floor+2)& (0+255),b
  3900  001D18  6B73               	clrf	(?_floor+3)& (0+255),b
  3901  001D1A  D05F               	goto	l884
  3902  001D1C                     l3801:
  3903                           
  3904                           ; BSR set to: 0
  3905  001D1C  5179               	movf	(floor@expon+1)& (0+255),w,b
  3906  001D1E  E103               	bnz	u3220
  3907  001D20  0E1D               	movlw	29
  3908  001D22  5D78               	subwf	floor@expon& (0+255),w,b
  3909  001D24  E309               	bnc	l3805
  3910  001D26                     u3220:
  3911                           
  3912                           ; BSR set to: 0
  3913  001D26  C070  F070         	movff	floor@x,?_floor
  3914  001D2A  C071  F071         	movff	floor@x+1,?_floor+1
  3915  001D2E  C072  F072         	movff	floor@x+2,?_floor+2
  3916  001D32  C073  F073         	movff	floor@x+3,?_floor+3
  3917  001D36  D051               	goto	l884
  3918  001D38                     l3805:
  3919                           
  3920                           ; BSR set to: 0
  3921  001D38  C070  F064         	movff	floor@x,___fltol@f1
  3922  001D3C  C071  F065         	movff	floor@x+1,___fltol@f1+1
  3923  001D40  C072  F066         	movff	floor@x+2,___fltol@f1+2
  3924  001D44  C073  F067         	movff	floor@x+3,___fltol@f1+3
  3925  001D48  ECB2  F011         	call	___fltol	;wreg free
  3926  001D4C  C064  F06C         	movff	?___fltol,___altofl@c
  3927  001D50  C065  F06D         	movff	?___fltol+1,___altofl@c+1
  3928  001D54  C066  F06E         	movff	?___fltol+2,___altofl@c+2
  3929  001D58  C067  F06F         	movff	?___fltol+3,___altofl@c+3
  3930  001D5C  EC30  F014         	call	___altofl	;wreg free
  3931  001D60  C06C  F074         	movff	?___altofl,floor@i
  3932  001D64  C06D  F075         	movff	?___altofl+1,floor@i+1
  3933  001D68  C06E  F076         	movff	?___altofl+2,floor@i+2
  3934  001D6C  C06F  F077         	movff	?___altofl+3,floor@i+3
  3935  001D70  C070  F003         	movff	floor@x,___flge@ff1
  3936  001D74  C071  F004         	movff	floor@x+1,___flge@ff1+1
  3937  001D78  C072  F005         	movff	floor@x+2,___flge@ff1+2
  3938  001D7C  C073  F006         	movff	floor@x+3,___flge@ff1+3
  3939  001D80  C074  F007         	movff	floor@i,___flge@ff2
  3940  001D84  C075  F008         	movff	floor@i+1,___flge@ff2+1
  3941  001D88  C076  F009         	movff	floor@i+2,___flge@ff2+2
  3942  001D8C  C077  F00A         	movff	floor@i+3,___flge@ff2+3
  3943  001D90  ECBF  F013         	call	___flge	;wreg free
  3944  001D94  E21A               	bc	l886
  3945  001D96  C074  F037         	movff	floor@i,___fladd@f1
  3946  001D9A  C075  F038         	movff	floor@i+1,___fladd@f1+1
  3947  001D9E  C076  F039         	movff	floor@i+2,___fladd@f1+2
  3948  001DA2  C077  F03A         	movff	floor@i+3,___fladd@f1+3
  3949  001DA6  0E00               	movlw	0
  3950  001DA8  6E3B               	movwf	___fladd@f2,c
  3951  001DAA  6E3C               	movwf	___fladd@f2+1,c
  3952  001DAC  0E80               	movlw	128
  3953  001DAE  6E3D               	movwf	___fladd@f2+2,c
  3954  001DB0  0EBF               	movlw	191
  3955  001DB2  6E3E               	movwf	___fladd@f2+3,c
  3956  001DB4  ECA5  F00C         	call	___fladd	;wreg free
  3957  001DB8  C037  F070         	movff	?___fladd,?_floor
  3958  001DBC  C038  F071         	movff	?___fladd+1,?_floor+1
  3959  001DC0  C039  F072         	movff	?___fladd+2,?_floor+2
  3960  001DC4  C03A  F073         	movff	?___fladd+3,?_floor+3
  3961  001DC8  D008               	goto	l884
  3962  001DCA                     l886:
  3963  001DCA  C074  F070         	movff	floor@i,?_floor
  3964  001DCE  C075  F071         	movff	floor@i+1,?_floor+1
  3965  001DD2  C076  F072         	movff	floor@i+2,?_floor+2
  3966  001DD6  C077  F073         	movff	floor@i+3,?_floor+3
  3967  001DDA                     l884:
  3968  001DDA  0012               	return		;funcret
  3969  001DDC                     __end_of_floor:
  3970                           	opt stack 0
  3971                           tosu	equ	0xFFF
  3972                           tosh	equ	0xFFE
  3973                           tosl	equ	0xFFD
  3974                           pclath	equ	0xFFA
  3975                           tblptru	equ	0xFF8
  3976                           tblptrh	equ	0xFF7
  3977                           tblptrl	equ	0xFF6
  3978                           tablat	equ	0xFF5
  3979                           intcon	equ	0xFF2
  3980                           intcon2	equ	0xFF1
  3981                           postinc0	equ	0xFEE
  3982                           wreg	equ	0xFE8
  3983                           postdec1	equ	0xFE5
  3984                           fsr1l	equ	0xFE1
  3985                           status	equ	0xFD8
  3986                           
  3987 ;; *************** function ___fltol *****************
  3988 ;; Defined at:
  3989 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fltol.c"
  3990 ;; Parameters:    Size  Location     Type
  3991 ;;  f1              4    4[BANK0 ] int 
  3992 ;; Auto vars:     Size  Location     Type
  3993 ;;  exp1            1   89[COMRAM] unsigned char 
  3994 ;;  sign1           1   88[COMRAM] unsigned char 
  3995 ;; Return value:  Size  Location     Type
  3996 ;;                  4    4[BANK0 ] long 
  3997 ;; Registers used:
  3998 ;;		wreg, status,2, status,0
  3999 ;; Tracked objects:
  4000 ;;		On entry : 0/0
  4001 ;;		On exit  : F/0
  4002 ;;		Unchanged: 0/0
  4003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4004 ;;      Params:         0       4       0       0       0       0       0       0       0
  4005 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4006 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4007 ;;      Totals:         2       8       0       0       0       0       0       0       0
  4008 ;;Total ram usage:       10 bytes
  4009 ;; Hardware stack levels used:    1
  4010 ;; Hardware stack levels required when called:    1
  4011 ;; This function calls:
  4012 ;;		Nothing
  4013 ;; This function is called by:
  4014 ;;		_format_double
  4015 ;;		_measure_capacitance
  4016 ;;		_measure_inductance
  4017 ;;		_floor
  4018 ;;		_pow
  4019 ;;		_exp
  4020 ;; This function uses a non-reentrant model
  4021 ;;
  4022                           
  4023                           	psect	text13
  4024  002364                     __ptext13:
  4025                           	opt stack 0
  4026  002364                     ___fltol:
  4027                           	opt stack 28
  4028                           
  4029                           ;incstack = 0
  4030  002364  0100               	movlb	0	; () banked
  4031  002366  3566               	rlcf	(___fltol@f1+2)& (0+255),w,b
  4032  002368  3567               	rlcf	(___fltol@f1+3)& (0+255),w,b
  4033  00236A  6E5A               	movwf	___fltol@exp1,c
  4034  00236C  505A               	movf	___fltol@exp1,w,c
  4035  00236E  E105               	bnz	l3757
  4036  002370                     l3755:
  4037                           
  4038                           ; BSR set to: 0
  4039  002370  6B64               	clrf	?___fltol& (0+255),b
  4040  002372  6B65               	clrf	(?___fltol+1)& (0+255),b
  4041  002374  6B66               	clrf	(?___fltol+2)& (0+255),b
  4042  002376  6B67               	clrf	(?___fltol+3)& (0+255),b
  4043  002378  D043               	goto	l896
  4044  00237A                     l3757:
  4045                           
  4046                           ; BSR set to: 0
  4047  00237A  C064  F068         	movff	___fltol@f1,??___fltol
  4048  00237E  C065  F069         	movff	___fltol@f1+1,??___fltol+1
  4049  002382  C066  F06A         	movff	___fltol@f1+2,??___fltol+2
  4050  002386  C067  F06B         	movff	___fltol@f1+3,??___fltol+3
  4051  00238A  0E20               	movlw	32
  4052  00238C  D005               	goto	u3140
  4053  00238E                     u3145:
  4054  00238E  90D8               	bcf	status,0,c
  4055  002390  336B               	rrcf	(??___fltol+3)& (0+255),f,b
  4056  002392  336A               	rrcf	(??___fltol+2)& (0+255),f,b
  4057  002394  3369               	rrcf	(??___fltol+1)& (0+255),f,b
  4058  002396  3368               	rrcf	??___fltol& (0+255),f,b
  4059  002398                     u3140:
  4060  002398  2EE8               	decfsz	wreg,f,c
  4061  00239A  D7F9               	goto	u3145
  4062  00239C  5168               	movf	??___fltol& (0+255),w,b
  4063  00239E  6E59               	movwf	___fltol@sign1,c
  4064                           
  4065                           ; BSR set to: 0
  4066  0023A0  8F66               	bsf	(___fltol@f1+2)& (0+255),7,b
  4067                           
  4068                           ; BSR set to: 0
  4069  0023A2  6B67               	clrf	(___fltol@f1+3)& (0+255),b
  4070                           
  4071                           ; BSR set to: 0
  4072  0023A4  0E96               	movlw	150
  4073  0023A6  5E5A               	subwf	___fltol@exp1,f,c
  4074                           
  4075                           ; BSR set to: 0
  4076  0023A8  AE5A               	btfss	___fltol@exp1,7,c
  4077  0023AA  D00C               	goto	l3775
  4078                           
  4079                           ; BSR set to: 0
  4080  0023AC  505A               	movf	___fltol@exp1,w,c
  4081  0023AE  0A80               	xorlw	128
  4082  0023B0  0F97               	addlw	151
  4083  0023B2  E3DE               	bnc	l3755
  4084  0023B4                     l3771:
  4085                           
  4086                           ; BSR set to: 0
  4087  0023B4  90D8               	bcf	status,0,c
  4088  0023B6  3367               	rrcf	(___fltol@f1+3)& (0+255),f,b
  4089  0023B8  3366               	rrcf	(___fltol@f1+2)& (0+255),f,b
  4090  0023BA  3365               	rrcf	(___fltol@f1+1)& (0+255),f,b
  4091  0023BC  3364               	rrcf	___fltol@f1& (0+255),f,b
  4092                           
  4093                           ; BSR set to: 0
  4094  0023BE  3E5A               	incfsz	___fltol@exp1,f,c
  4095  0023C0  D7F9               	goto	l3771
  4096  0023C2  D00C               	goto	l3783
  4097  0023C4                     l3775:
  4098                           
  4099                           ; BSR set to: 0
  4100  0023C4  0E1F               	movlw	31
  4101  0023C6  645A               	cpfsgt	___fltol@exp1,c
  4102  0023C8  D007               	goto	l3781
  4103  0023CA  D7D2               	goto	l3755
  4104  0023CC                     l3779:
  4105                           
  4106                           ; BSR set to: 0
  4107  0023CC  90D8               	bcf	status,0,c
  4108  0023CE  3764               	rlcf	___fltol@f1& (0+255),f,b
  4109  0023D0  3765               	rlcf	(___fltol@f1+1)& (0+255),f,b
  4110  0023D2  3766               	rlcf	(___fltol@f1+2)& (0+255),f,b
  4111  0023D4  3767               	rlcf	(___fltol@f1+3)& (0+255),f,b
  4112  0023D6  065A               	decf	___fltol@exp1,f,c
  4113  0023D8                     l3781:
  4114                           
  4115                           ; BSR set to: 0
  4116  0023D8  505A               	movf	___fltol@exp1,w,c
  4117  0023DA  E1F8               	bnz	l3779
  4118  0023DC                     l3783:
  4119                           
  4120                           ; BSR set to: 0
  4121  0023DC  5059               	movf	___fltol@sign1,w,c
  4122  0023DE  E008               	bz	l3787
  4123                           
  4124                           ; BSR set to: 0
  4125  0023E0  1F67               	comf	(___fltol@f1+3)& (0+255),f,b
  4126  0023E2  1F66               	comf	(___fltol@f1+2)& (0+255),f,b
  4127  0023E4  1F65               	comf	(___fltol@f1+1)& (0+255),f,b
  4128  0023E6  6D64               	negf	___fltol@f1& (0+255),b
  4129  0023E8  0E00               	movlw	0
  4130  0023EA  2365               	addwfc	(___fltol@f1+1)& (0+255),f,b
  4131  0023EC  2366               	addwfc	(___fltol@f1+2)& (0+255),f,b
  4132  0023EE  2367               	addwfc	(___fltol@f1+3)& (0+255),f,b
  4133  0023F0                     l3787:
  4134                           
  4135                           ; BSR set to: 0
  4136  0023F0  C064  F064         	movff	___fltol@f1,?___fltol
  4137  0023F4  C065  F065         	movff	___fltol@f1+1,?___fltol+1
  4138  0023F8  C066  F066         	movff	___fltol@f1+2,?___fltol+2
  4139  0023FC  C067  F067         	movff	___fltol@f1+3,?___fltol+3
  4140  002400                     l896:
  4141                           
  4142                           ; BSR set to: 0
  4143  002400  0012               	return		;funcret
  4144  002402                     __end_of___fltol:
  4145                           	opt stack 0
  4146                           tosu	equ	0xFFF
  4147                           tosh	equ	0xFFE
  4148                           tosl	equ	0xFFD
  4149                           pclath	equ	0xFFA
  4150                           tblptru	equ	0xFF8
  4151                           tblptrh	equ	0xFF7
  4152                           tblptrl	equ	0xFF6
  4153                           tablat	equ	0xFF5
  4154                           intcon	equ	0xFF2
  4155                           intcon2	equ	0xFF1
  4156                           postinc0	equ	0xFEE
  4157                           wreg	equ	0xFE8
  4158                           postdec1	equ	0xFE5
  4159                           fsr1l	equ	0xFE1
  4160                           status	equ	0xFD8
  4161                           
  4162 ;; *************** function ___flge *****************
  4163 ;; Defined at:
  4164 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flge.c"
  4165 ;; Parameters:    Size  Location     Type
  4166 ;;  ff1             4    2[COMRAM] long 
  4167 ;;  ff2             4    6[COMRAM] long 
  4168 ;; Auto vars:     Size  Location     Type
  4169 ;;		None
  4170 ;; Return value:  Size  Location     Type
  4171 ;;		None               void
  4172 ;; Registers used:
  4173 ;;		wreg, status,2, status,0
  4174 ;; Tracked objects:
  4175 ;;		On entry : 0/0
  4176 ;;		On exit  : 0/0
  4177 ;;		Unchanged: 0/0
  4178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4179 ;;      Params:         8       0       0       0       0       0       0       0       0
  4180 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4181 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4182 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4183 ;;Total ram usage:        8 bytes
  4184 ;; Hardware stack levels used:    1
  4185 ;; Hardware stack levels required when called:    1
  4186 ;; This function calls:
  4187 ;;		Nothing
  4188 ;; This function is called by:
  4189 ;;		_format_double
  4190 ;;		_measure_capacitance
  4191 ;;		_measure_inductance
  4192 ;;		_floor
  4193 ;;		_pow
  4194 ;;		_exp
  4195 ;; This function uses a non-reentrant model
  4196 ;;
  4197                           
  4198                           	psect	text14
  4199  00277E                     __ptext14:
  4200                           	opt stack 0
  4201  00277E                     ___flge:
  4202                           	opt stack 28
  4203                           
  4204                           ; BSR set to: 0
  4205                           ;incstack = 0
  4206  00277E  AE06               	btfss	___flge@ff1+3,7,c
  4207  002780  D009               	goto	l2597
  4208  002782  6C03               	negf	___flge@ff1,c
  4209  002784  1E04               	comf	___flge@ff1+1,f,c
  4210  002786  B0D8               	btfsc	status,0,c
  4211  002788  2A04               	incf	___flge@ff1+1,f,c
  4212  00278A  1E05               	comf	___flge@ff1+2,f,c
  4213  00278C  B0D8               	btfsc	status,0,c
  4214  00278E  2A05               	incf	___flge@ff1+2,f,c
  4215  002790  0E80               	movlw	128
  4216  002792  5606               	subfwb	___flge@ff1+3,f,c
  4217  002794                     l2597:
  4218  002794  AE0A               	btfss	___flge@ff2+3,7,c
  4219  002796  D009               	goto	l845
  4220  002798  6C07               	negf	___flge@ff2,c
  4221  00279A  1E08               	comf	___flge@ff2+1,f,c
  4222  00279C  B0D8               	btfsc	status,0,c
  4223  00279E  2A08               	incf	___flge@ff2+1,f,c
  4224  0027A0  1E09               	comf	___flge@ff2+2,f,c
  4225  0027A2  B0D8               	btfsc	status,0,c
  4226  0027A4  2A09               	incf	___flge@ff2+2,f,c
  4227  0027A6  0E80               	movlw	128
  4228  0027A8  560A               	subfwb	___flge@ff2+3,f,c
  4229  0027AA                     l845:
  4230  0027AA  0E80               	movlw	128
  4231  0027AC  1A06               	xorwf	___flge@ff1+3,f,c
  4232  0027AE  1A0A               	xorwf	___flge@ff2+3,f,c
  4233  0027B0  5007               	movf	___flge@ff2,w,c
  4234  0027B2  5C03               	subwf	___flge@ff1,w,c
  4235  0027B4  5008               	movf	___flge@ff2+1,w,c
  4236  0027B6  5804               	subwfb	___flge@ff1+1,w,c
  4237  0027B8  5009               	movf	___flge@ff2+2,w,c
  4238  0027BA  5805               	subwfb	___flge@ff1+2,w,c
  4239  0027BC  500A               	movf	___flge@ff2+3,w,c
  4240  0027BE  5806               	subwfb	___flge@ff1+3,w,c
  4241  0027C0  E202               	bc	l2603
  4242  0027C2  90D8               	bcf	status,0,c
  4243  0027C4  D001               	goto	l846
  4244  0027C6                     l2603:
  4245  0027C6  80D8               	bsf	status,0,c
  4246  0027C8                     l846:
  4247  0027C8  0012               	return		;funcret
  4248  0027CA                     __end_of___flge:
  4249                           	opt stack 0
  4250                           tosu	equ	0xFFF
  4251                           tosh	equ	0xFFE
  4252                           tosl	equ	0xFFD
  4253                           pclath	equ	0xFFA
  4254                           tblptru	equ	0xFF8
  4255                           tblptrh	equ	0xFF7
  4256                           tblptrl	equ	0xFF6
  4257                           tablat	equ	0xFF5
  4258                           intcon	equ	0xFF2
  4259                           intcon2	equ	0xFF1
  4260                           postinc0	equ	0xFEE
  4261                           wreg	equ	0xFE8
  4262                           postdec1	equ	0xFE5
  4263                           fsr1l	equ	0xFE1
  4264                           status	equ	0xFD8
  4265                           
  4266 ;; *************** function ___altofl *****************
  4267 ;; Defined at:
  4268 ;;		line 36 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\altofl.c"
  4269 ;; Parameters:    Size  Location     Type
  4270 ;;  c               4   12[BANK0 ] long 
  4271 ;; Auto vars:     Size  Location     Type
  4272 ;;  sign            1   90[COMRAM] unsigned char 
  4273 ;; Return value:  Size  Location     Type
  4274 ;;                  4   12[BANK0 ] unsigned char 
  4275 ;; Registers used:
  4276 ;;		wreg, status,2, status,0, cstack
  4277 ;; Tracked objects:
  4278 ;;		On entry : F/0
  4279 ;;		On exit  : 0/0
  4280 ;;		Unchanged: 0/0
  4281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4282 ;;      Params:         0       4       0       0       0       0       0       0       0
  4283 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4284 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4285 ;;      Totals:         1       4       0       0       0       0       0       0       0
  4286 ;;Total ram usage:        5 bytes
  4287 ;; Hardware stack levels used:    1
  4288 ;; Hardware stack levels required when called:    2
  4289 ;; This function calls:
  4290 ;;		___flpack
  4291 ;; This function is called by:
  4292 ;;		_floor
  4293 ;; This function uses a non-reentrant model
  4294 ;;
  4295                           
  4296                           	psect	text15
  4297  002860                     __ptext15:
  4298                           	opt stack 0
  4299  002860                     ___altofl:
  4300                           	opt stack 23
  4301                           
  4302                           ; BSR set to: 0
  4303                           
  4304                           ;incstack = 0
  4305  002860  6A5B               	clrf	___altofl@sign,c
  4306                           
  4307                           ; BSR set to: 0
  4308  002862  AF6F               	btfss	(___altofl@c+3)& (0+255),7,b
  4309  002864  D00A               	goto	l3623
  4310                           
  4311                           ; BSR set to: 0
  4312  002866  1F6F               	comf	(___altofl@c+3)& (0+255),f,b
  4313  002868  1F6E               	comf	(___altofl@c+2)& (0+255),f,b
  4314  00286A  1F6D               	comf	(___altofl@c+1)& (0+255),f,b
  4315  00286C  6D6C               	negf	___altofl@c& (0+255),b
  4316  00286E  0E00               	movlw	0
  4317  002870  236D               	addwfc	(___altofl@c+1)& (0+255),f,b
  4318  002872  236E               	addwfc	(___altofl@c+2)& (0+255),f,b
  4319  002874  236F               	addwfc	(___altofl@c+3)& (0+255),f,b
  4320                           
  4321                           ; BSR set to: 0
  4322  002876  0E01               	movlw	1
  4323  002878  6E5B               	movwf	___altofl@sign,c
  4324  00287A                     l3623:
  4325                           
  4326                           ; BSR set to: 0
  4327  00287A  C06C  F003         	movff	___altofl@c,___flpack@arg
  4328  00287E  C06D  F004         	movff	___altofl@c+1,___flpack@arg+1
  4329  002882  C06E  F005         	movff	___altofl@c+2,___flpack@arg+2
  4330  002886  C06F  F006         	movff	___altofl@c+3,___flpack@arg+3
  4331  00288A  0E96               	movlw	150
  4332  00288C  6E07               	movwf	___flpack@exp,c
  4333  00288E  C05B  F008         	movff	___altofl@sign,___flpack@sign
  4334  002892  EC3D  F010         	call	___flpack	;wreg free
  4335  002896  C003  F06C         	movff	?___flpack,?___altofl
  4336  00289A  C004  F06D         	movff	?___flpack+1,?___altofl+1
  4337  00289E  C005  F06E         	movff	?___flpack+2,?___altofl+2
  4338  0028A2  C006  F06F         	movff	?___flpack+3,?___altofl+3
  4339  0028A6  0012               	return		;funcret
  4340  0028A8                     __end_of___altofl:
  4341                           	opt stack 0
  4342                           tosu	equ	0xFFF
  4343                           tosh	equ	0xFFE
  4344                           tosl	equ	0xFFD
  4345                           pclath	equ	0xFFA
  4346                           tblptru	equ	0xFF8
  4347                           tblptrh	equ	0xFF7
  4348                           tblptrl	equ	0xFF6
  4349                           tablat	equ	0xFF5
  4350                           intcon	equ	0xFF2
  4351                           intcon2	equ	0xFF1
  4352                           postinc0	equ	0xFEE
  4353                           wreg	equ	0xFE8
  4354                           postdec1	equ	0xFE5
  4355                           fsr1l	equ	0xFE1
  4356                           status	equ	0xFD8
  4357                           
  4358 ;; *************** function ___flsub *****************
  4359 ;; Defined at:
  4360 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flsub.c"
  4361 ;; Parameters:    Size  Location     Type
  4362 ;;  f1              4   66[COMRAM] unsigned char 
  4363 ;;  f2              4   70[COMRAM] unsigned char 
  4364 ;; Auto vars:     Size  Location     Type
  4365 ;;		None
  4366 ;; Return value:  Size  Location     Type
  4367 ;;                  4   66[COMRAM] unsigned char 
  4368 ;; Registers used:
  4369 ;;		wreg, status,2, status,0, cstack
  4370 ;; Tracked objects:
  4371 ;;		On entry : 0/0
  4372 ;;		On exit  : 0/0
  4373 ;;		Unchanged: 0/0
  4374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4375 ;;      Params:         8       0       0       0       0       0       0       0       0
  4376 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4377 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4378 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4379 ;;Total ram usage:        8 bytes
  4380 ;; Hardware stack levels used:    1
  4381 ;; Hardware stack levels required when called:    3
  4382 ;; This function calls:
  4383 ;;		___fladd
  4384 ;; This function is called by:
  4385 ;;		_format_double
  4386 ;;		_measure_capacitance
  4387 ;;		_measure_inductance
  4388 ;;		_exp
  4389 ;; This function uses a non-reentrant model
  4390 ;;
  4391                           
  4392                           	psect	text16
  4393  0028EE                     __ptext16:
  4394                           	opt stack 0
  4395  0028EE                     ___flsub:
  4396                           	opt stack 26
  4397                           
  4398                           ;incstack = 0
  4399  0028EE  5047               	movf	___flsub@f2,w,c
  4400  0028F0  1048               	iorwf	___flsub@f2+1,w,c
  4401  0028F2  1049               	iorwf	___flsub@f2+2,w,c
  4402  0028F4  104A               	iorwf	___flsub@f2+3,w,c
  4403  0028F6  E002               	bz	l3851
  4404  0028F8  0E80               	movlw	128
  4405  0028FA  1A4A               	xorwf	___flsub@f2+3,f,c
  4406  0028FC                     l3851:
  4407  0028FC  C043  F037         	movff	___flsub@f1,___fladd@f1
  4408  002900  C044  F038         	movff	___flsub@f1+1,___fladd@f1+1
  4409  002904  C045  F039         	movff	___flsub@f1+2,___fladd@f1+2
  4410  002908  C046  F03A         	movff	___flsub@f1+3,___fladd@f1+3
  4411  00290C  C047  F03B         	movff	___flsub@f2,___fladd@f2
  4412  002910  C048  F03C         	movff	___flsub@f2+1,___fladd@f2+1
  4413  002914  C049  F03D         	movff	___flsub@f2+2,___fladd@f2+2
  4414  002918  C04A  F03E         	movff	___flsub@f2+3,___fladd@f2+3
  4415  00291C  ECA5  F00C         	call	___fladd	;wreg free
  4416  002920  C037  F043         	movff	?___fladd,?___flsub
  4417  002924  C038  F044         	movff	?___fladd+1,?___flsub+1
  4418  002928  C039  F045         	movff	?___fladd+2,?___flsub+2
  4419  00292C  C03A  F046         	movff	?___fladd+3,?___flsub+3
  4420  002930  0012               	return		;funcret
  4421  002932                     __end_of___flsub:
  4422                           	opt stack 0
  4423                           tosu	equ	0xFFF
  4424                           tosh	equ	0xFFE
  4425                           tosl	equ	0xFFD
  4426                           pclath	equ	0xFFA
  4427                           tblptru	equ	0xFF8
  4428                           tblptrh	equ	0xFF7
  4429                           tblptrl	equ	0xFF6
  4430                           tablat	equ	0xFF5
  4431                           intcon	equ	0xFF2
  4432                           intcon2	equ	0xFF1
  4433                           postinc0	equ	0xFEE
  4434                           wreg	equ	0xFE8
  4435                           postdec1	equ	0xFE5
  4436                           fsr1l	equ	0xFE1
  4437                           status	equ	0xFD8
  4438                           
  4439 ;; *************** function ___flneg *****************
  4440 ;; Defined at:
  4441 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flneg.c"
  4442 ;; Parameters:    Size  Location     Type
  4443 ;;  f1              4    2[COMRAM] unsigned char 
  4444 ;; Auto vars:     Size  Location     Type
  4445 ;;		None
  4446 ;; Return value:  Size  Location     Type
  4447 ;;                  4    2[COMRAM] unsigned char 
  4448 ;; Registers used:
  4449 ;;		wreg, status,2, status,0
  4450 ;; Tracked objects:
  4451 ;;		On entry : F/0
  4452 ;;		On exit  : F/0
  4453 ;;		Unchanged: F/0
  4454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4455 ;;      Params:         4       0       0       0       0       0       0       0       0
  4456 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4457 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4458 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4459 ;;Total ram usage:        4 bytes
  4460 ;; Hardware stack levels used:    1
  4461 ;; Hardware stack levels required when called:    1
  4462 ;; This function calls:
  4463 ;;		Nothing
  4464 ;; This function is called by:
  4465 ;;		_pow
  4466 ;;		_exp
  4467 ;; This function uses a non-reentrant model
  4468 ;;
  4469                           
  4470                           	psect	text17
  4471  002B70                     __ptext17:
  4472                           	opt stack 0
  4473  002B70                     ___flneg:
  4474                           	opt stack 25
  4475                           
  4476                           ; BSR set to: 0
  4477                           
  4478                           ;incstack = 0
  4479  002B70  5003               	movf	___flneg@f1,w,c
  4480  002B72  1004               	iorwf	___flneg@f1+1,w,c
  4481  002B74  1005               	iorwf	___flneg@f1+2,w,c
  4482  002B76  1006               	iorwf	___flneg@f1+3,w,c
  4483  002B78  E002               	bz	l2757
  4484                           
  4485                           ; BSR set to: 0
  4486  002B7A  0E80               	movlw	128
  4487  002B7C  1A06               	xorwf	___flneg@f1+3,f,c
  4488  002B7E                     l2757:
  4489                           
  4490                           ; BSR set to: 0
  4491  002B7E  C003  F003         	movff	___flneg@f1,?___flneg
  4492  002B82  C004  F004         	movff	___flneg@f1+1,?___flneg+1
  4493  002B86  C005  F005         	movff	___flneg@f1+2,?___flneg+2
  4494  002B8A  C006  F006         	movff	___flneg@f1+3,?___flneg+3
  4495                           
  4496                           ; BSR set to: 0
  4497  002B8E  0012               	return		;funcret
  4498  002B90                     __end_of___flneg:
  4499                           	opt stack 0
  4500                           tosu	equ	0xFFF
  4501                           tosh	equ	0xFFE
  4502                           tosl	equ	0xFFD
  4503                           pclath	equ	0xFFA
  4504                           tblptru	equ	0xFF8
  4505                           tblptrh	equ	0xFF7
  4506                           tblptrl	equ	0xFF6
  4507                           tablat	equ	0xFF5
  4508                           intcon	equ	0xFF2
  4509                           intcon2	equ	0xFF1
  4510                           postinc0	equ	0xFEE
  4511                           wreg	equ	0xFE8
  4512                           postdec1	equ	0xFE5
  4513                           fsr1l	equ	0xFE1
  4514                           status	equ	0xFD8
  4515                           
  4516 ;; *************** function ___fldiv *****************
  4517 ;; Defined at:
  4518 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldiv.c"
  4519 ;; Parameters:    Size  Location     Type
  4520 ;;  f1              4   12[COMRAM] unsigned char 
  4521 ;;  f2              4   16[COMRAM] unsigned char 
  4522 ;; Auto vars:     Size  Location     Type
  4523 ;;  f3              4   20[COMRAM] unsigned char 
  4524 ;;  sign            1   26[COMRAM] unsigned char 
  4525 ;;  exp             1   25[COMRAM] unsigned char 
  4526 ;;  cntr            1   24[COMRAM] unsigned char 
  4527 ;; Return value:  Size  Location     Type
  4528 ;;                  4   12[COMRAM] unsigned char 
  4529 ;; Registers used:
  4530 ;;		wreg, status,2, status,0, cstack
  4531 ;; Tracked objects:
  4532 ;;		On entry : 0/0
  4533 ;;		On exit  : 0/0
  4534 ;;		Unchanged: 0/0
  4535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4536 ;;      Params:         8       0       0       0       0       0       0       0       0
  4537 ;;      Locals:         7       0       0       0       0       0       0       0       0
  4538 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4539 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4540 ;;Total ram usage:       15 bytes
  4541 ;; Hardware stack levels used:    1
  4542 ;; Hardware stack levels required when called:    2
  4543 ;; This function calls:
  4544 ;;		___flpack
  4545 ;; This function is called by:
  4546 ;;		_format_double
  4547 ;;		_measure_capacitance
  4548 ;;		_measure_inductance
  4549 ;;		_exp
  4550 ;; This function uses a non-reentrant model
  4551 ;;
  4552                           
  4553                           	psect	text18
  4554  0022BE                     __ptext18:
  4555                           	opt stack 0
  4556  0022BE                     ___fldiv:
  4557                           	opt stack 27
  4558                           
  4559                           ; BSR set to: 0
  4560                           ;incstack = 0
  4561  0022BE  340F               	rlcf	___fldiv@f1+2,w,c
  4562  0022C0  3410               	rlcf	___fldiv@f1+3,w,c
  4563  0022C2  6E1A               	movwf	___fldiv@exp,c
  4564  0022C4  501A               	movf	___fldiv@exp,w,c
  4565  0022C6  E005               	bz	l3817
  4566  0022C8  3413               	rlcf	___fldiv@f2+2,w,c
  4567  0022CA  3414               	rlcf	___fldiv@f2+3,w,c
  4568  0022CC  6E1B               	movwf	___fldiv@sign,c
  4569  0022CE  501B               	movf	___fldiv@sign,w,c
  4570  0022D0  E105               	bnz	l3819
  4571  0022D2                     l3817:
  4572  0022D2  6A0D               	clrf	?___fldiv,c
  4573  0022D4  6A0E               	clrf	?___fldiv+1,c
  4574  0022D6  6A0F               	clrf	?___fldiv+2,c
  4575  0022D8  6A10               	clrf	?___fldiv+3,c
  4576  0022DA  D043               	goto	l837
  4577  0022DC                     l3819:
  4578  0022DC  501B               	movf	___fldiv@sign,w,c
  4579  0022DE  0F89               	addlw	137
  4580  0022E0  5E1A               	subwf	___fldiv@exp,f,c
  4581  0022E2  C010  F01B         	movff	___fldiv@f1+3,___fldiv@sign
  4582  0022E6  5014               	movf	___fldiv@f2+3,w,c
  4583  0022E8  1A1B               	xorwf	___fldiv@sign,f,c
  4584  0022EA  0E80               	movlw	128
  4585  0022EC  161B               	andwf	___fldiv@sign,f,c
  4586  0022EE  8E0F               	bsf	___fldiv@f1+2,7,c
  4587  0022F0  6A10               	clrf	___fldiv@f1+3,c
  4588  0022F2  8E13               	bsf	___fldiv@f2+2,7,c
  4589  0022F4  6A14               	clrf	___fldiv@f2+3,c
  4590  0022F6  0E20               	movlw	32
  4591  0022F8  6E19               	movwf	___fldiv@cntr,c
  4592  0022FA                     l3831:
  4593  0022FA  90D8               	bcf	status,0,c
  4594  0022FC  3615               	rlcf	___fldiv@f3,f,c
  4595  0022FE  3616               	rlcf	___fldiv@f3+1,f,c
  4596  002300  3617               	rlcf	___fldiv@f3+2,f,c
  4597  002302  3618               	rlcf	___fldiv@f3+3,f,c
  4598  002304  5011               	movf	___fldiv@f2,w,c
  4599  002306  5C0D               	subwf	___fldiv@f1,w,c
  4600  002308  5012               	movf	___fldiv@f2+1,w,c
  4601  00230A  580E               	subwfb	___fldiv@f1+1,w,c
  4602  00230C  5013               	movf	___fldiv@f2+2,w,c
  4603  00230E  580F               	subwfb	___fldiv@f1+2,w,c
  4604  002310  5014               	movf	___fldiv@f2+3,w,c
  4605  002312  5810               	subwfb	___fldiv@f1+3,w,c
  4606  002314  E309               	bnc	l3839
  4607  002316  5011               	movf	___fldiv@f2,w,c
  4608  002318  5E0D               	subwf	___fldiv@f1,f,c
  4609  00231A  5012               	movf	___fldiv@f2+1,w,c
  4610  00231C  5A0E               	subwfb	___fldiv@f1+1,f,c
  4611  00231E  5013               	movf	___fldiv@f2+2,w,c
  4612  002320  5A0F               	subwfb	___fldiv@f1+2,f,c
  4613  002322  5014               	movf	___fldiv@f2+3,w,c
  4614  002324  5A10               	subwfb	___fldiv@f1+3,f,c
  4615  002326  8015               	bsf	___fldiv@f3,0,c
  4616  002328                     l3839:
  4617  002328  90D8               	bcf	status,0,c
  4618  00232A  360D               	rlcf	___fldiv@f1,f,c
  4619  00232C  360E               	rlcf	___fldiv@f1+1,f,c
  4620  00232E  360F               	rlcf	___fldiv@f1+2,f,c
  4621  002330  3610               	rlcf	___fldiv@f1+3,f,c
  4622  002332  2E19               	decfsz	___fldiv@cntr,f,c
  4623  002334  D7E2               	goto	l3831
  4624  002336  C015  F003         	movff	___fldiv@f3,___flpack@arg
  4625  00233A  C016  F004         	movff	___fldiv@f3+1,___flpack@arg+1
  4626  00233E  C017  F005         	movff	___fldiv@f3+2,___flpack@arg+2
  4627  002342  C018  F006         	movff	___fldiv@f3+3,___flpack@arg+3
  4628  002346  C01A  F007         	movff	___fldiv@exp,___flpack@exp
  4629  00234A  C01B  F008         	movff	___fldiv@sign,___flpack@sign
  4630  00234E  EC3D  F010         	call	___flpack	;wreg free
  4631  002352  C003  F00D         	movff	?___flpack,?___fldiv
  4632  002356  C004  F00E         	movff	?___flpack+1,?___fldiv+1
  4633  00235A  C005  F00F         	movff	?___flpack+2,?___fldiv+2
  4634  00235E  C006  F010         	movff	?___flpack+3,?___fldiv+3
  4635  002362                     l837:
  4636  002362  0012               	return		;funcret
  4637  002364                     __end_of___fldiv:
  4638                           	opt stack 0
  4639                           tosu	equ	0xFFF
  4640                           tosh	equ	0xFFE
  4641                           tosl	equ	0xFFD
  4642                           pclath	equ	0xFFA
  4643                           tblptru	equ	0xFF8
  4644                           tblptrh	equ	0xFF7
  4645                           tblptrl	equ	0xFF6
  4646                           tablat	equ	0xFF5
  4647                           intcon	equ	0xFF2
  4648                           intcon2	equ	0xFF1
  4649                           postinc0	equ	0xFEE
  4650                           wreg	equ	0xFE8
  4651                           postdec1	equ	0xFE5
  4652                           fsr1l	equ	0xFE1
  4653                           status	equ	0xFD8
  4654                           
  4655 ;; *************** function ___lltofl *****************
  4656 ;; Defined at:
  4657 ;;		line 30 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltofl.c"
  4658 ;; Parameters:    Size  Location     Type
  4659 ;;  c               4   12[COMRAM] unsigned long 
  4660 ;; Auto vars:     Size  Location     Type
  4661 ;;		None
  4662 ;; Return value:  Size  Location     Type
  4663 ;;                  4   12[COMRAM] unsigned long 
  4664 ;; Registers used:
  4665 ;;		wreg, status,2, status,0, cstack
  4666 ;; Tracked objects:
  4667 ;;		On entry : F/0
  4668 ;;		On exit  : 0/0
  4669 ;;		Unchanged: 0/0
  4670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4671 ;;      Params:         4       0       0       0       0       0       0       0       0
  4672 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4673 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4674 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4675 ;;Total ram usage:        4 bytes
  4676 ;; Hardware stack levels used:    1
  4677 ;; Hardware stack levels required when called:    2
  4678 ;; This function calls:
  4679 ;;		___flpack
  4680 ;; This function is called by:
  4681 ;;		_pow
  4682 ;; This function uses a non-reentrant model
  4683 ;;
  4684                           
  4685                           	psect	text19
  4686  002A7E                     __ptext19:
  4687                           	opt stack 0
  4688  002A7E                     ___lltofl:
  4689                           	opt stack 25
  4690                           
  4691                           ; BSR set to: 0
  4692                           
  4693                           ;incstack = 0
  4694  002A7E  C00D  F003         	movff	___lltofl@c,___flpack@arg
  4695  002A82  C00E  F004         	movff	___lltofl@c+1,___flpack@arg+1
  4696  002A86  C00F  F005         	movff	___lltofl@c+2,___flpack@arg+2
  4697  002A8A  C010  F006         	movff	___lltofl@c+3,___flpack@arg+3
  4698  002A8E  0E96               	movlw	150
  4699  002A90  6E07               	movwf	___flpack@exp,c
  4700  002A92  0E00               	movlw	0
  4701  002A94  6E08               	movwf	___flpack@sign,c
  4702  002A96  EC3D  F010         	call	___flpack	;wreg free
  4703  002A9A  C003  F00D         	movff	?___flpack,?___lltofl
  4704  002A9E  C004  F00E         	movff	?___flpack+1,?___lltofl+1
  4705  002AA2  C005  F00F         	movff	?___flpack+2,?___lltofl+2
  4706  002AA6  C006  F010         	movff	?___flpack+3,?___lltofl+3
  4707  002AAA  0012               	return		;funcret
  4708  002AAC                     __end_of___lltofl:
  4709                           	opt stack 0
  4710                           tosu	equ	0xFFF
  4711                           tosh	equ	0xFFE
  4712                           tosl	equ	0xFFD
  4713                           pclath	equ	0xFFA
  4714                           tblptru	equ	0xFF8
  4715                           tblptrh	equ	0xFF7
  4716                           tblptrl	equ	0xFF6
  4717                           tablat	equ	0xFF5
  4718                           intcon	equ	0xFF2
  4719                           intcon2	equ	0xFF1
  4720                           postinc0	equ	0xFEE
  4721                           wreg	equ	0xFE8
  4722                           postdec1	equ	0xFE5
  4723                           fsr1l	equ	0xFE1
  4724                           status	equ	0xFD8
  4725                           
  4726 ;; *************** function _log10 *****************
  4727 ;; Defined at:
  4728 ;;		line 39 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  4729 ;; Parameters:    Size  Location     Type
  4730 ;;  x               4   84[COMRAM] unsigned long 
  4731 ;; Auto vars:     Size  Location     Type
  4732 ;;		None
  4733 ;; Return value:  Size  Location     Type
  4734 ;;                  4   84[COMRAM] unsigned long 
  4735 ;; Registers used:
  4736 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4737 ;; Tracked objects:
  4738 ;;		On entry : 0/0
  4739 ;;		On exit  : 0/0
  4740 ;;		Unchanged: 0/0
  4741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4742 ;;      Params:         4       0       0       0       0       0       0       0       0
  4743 ;;      Locals:         0       4       0       0       0       0       0       0       0
  4744 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4745 ;;      Totals:         4       4       0       0       0       0       0       0       0
  4746 ;;Total ram usage:        8 bytes
  4747 ;; Hardware stack levels used:    1
  4748 ;; Hardware stack levels required when called:    5
  4749 ;; This function calls:
  4750 ;;		___flmul
  4751 ;;		_log
  4752 ;; This function is called by:
  4753 ;;		_format_double
  4754 ;; This function uses a non-reentrant model
  4755 ;;
  4756                           
  4757                           	psect	text20
  4758  00267E                     __ptext20:
  4759                           	opt stack 0
  4760  00267E                     _log10:
  4761                           	opt stack 23
  4762                           
  4763                           ;incstack = 0
  4764  00267E  C055  F04F         	movff	log10@x,log@x
  4765  002682  C056  F050         	movff	log10@x+1,log@x+1
  4766  002686  C057  F051         	movff	log10@x+2,log@x+2
  4767  00268A  C058  F052         	movff	log10@x+3,log@x+3
  4768  00268E  EC59  F00D         	call	_log	;wreg free
  4769  002692  C04F  F060         	movff	?_log,_log10$1162
  4770  002696  C050  F061         	movff	?_log+1,_log10$1162+1
  4771  00269A  C051  F062         	movff	?_log+2,_log10$1162+2
  4772  00269E  C052  F063         	movff	?_log+3,_log10$1162+3
  4773  0026A2  C060  F01C         	movff	_log10$1162,___flmul@f1
  4774  0026A6  C061  F01D         	movff	_log10$1162+1,___flmul@f1+1
  4775  0026AA  C062  F01E         	movff	_log10$1162+2,___flmul@f1+2
  4776  0026AE  C063  F01F         	movff	_log10$1162+3,___flmul@f1+3
  4777  0026B2  0ED9               	movlw	217
  4778  0026B4  6E20               	movwf	___flmul@f2,c
  4779  0026B6  0E5B               	movlw	91
  4780  0026B8  6E21               	movwf	___flmul@f2+1,c
  4781  0026BA  0EDE               	movlw	222
  4782  0026BC  6E22               	movwf	___flmul@f2+2,c
  4783  0026BE  0E3E               	movlw	62
  4784  0026C0  6E23               	movwf	___flmul@f2+3,c
  4785  0026C2  EC29  F00A         	call	___flmul	;wreg free
  4786  0026C6  C01C  F055         	movff	?___flmul,?_log10
  4787  0026CA  C01D  F056         	movff	?___flmul+1,?_log10+1
  4788  0026CE  C01E  F057         	movff	?___flmul+2,?_log10+2
  4789  0026D2  C01F  F058         	movff	?___flmul+3,?_log10+3
  4790  0026D6  0012               	return		;funcret
  4791  0026D8                     __end_of_log10:
  4792                           	opt stack 0
  4793                           tosu	equ	0xFFF
  4794                           tosh	equ	0xFFE
  4795                           tosl	equ	0xFFD
  4796                           pclath	equ	0xFFA
  4797                           tblptru	equ	0xFF8
  4798                           tblptrh	equ	0xFF7
  4799                           tblptrl	equ	0xFF6
  4800                           tablat	equ	0xFF5
  4801                           intcon	equ	0xFF2
  4802                           intcon2	equ	0xFF1
  4803                           postinc0	equ	0xFEE
  4804                           wreg	equ	0xFE8
  4805                           postdec1	equ	0xFE5
  4806                           fsr1l	equ	0xFE1
  4807                           status	equ	0xFD8
  4808                           
  4809 ;; *************** function _log *****************
  4810 ;; Defined at:
  4811 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  4812 ;; Parameters:    Size  Location     Type
  4813 ;;  x               4   78[COMRAM] unsigned long 
  4814 ;; Auto vars:     Size  Location     Type
  4815 ;;  exponent        2   82[COMRAM] int 
  4816 ;; Return value:  Size  Location     Type
  4817 ;;                  4   78[COMRAM] int 
  4818 ;; Registers used:
  4819 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4820 ;; Tracked objects:
  4821 ;;		On entry : 0/0
  4822 ;;		On exit  : 0/0
  4823 ;;		Unchanged: 0/0
  4824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4825 ;;      Params:         4       0       0       0       0       0       0       0       0
  4826 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4827 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4828 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4829 ;;Total ram usage:        6 bytes
  4830 ;; Hardware stack levels used:    1
  4831 ;; Hardware stack levels required when called:    4
  4832 ;; This function calls:
  4833 ;;		___awtofl
  4834 ;;		___fladd
  4835 ;;		___flmul
  4836 ;;		_eval_poly
  4837 ;;		_frexp
  4838 ;; This function is called by:
  4839 ;;		_log10
  4840 ;;		_pow
  4841 ;; This function uses a non-reentrant model
  4842 ;;
  4843                           
  4844                           	psect	text21
  4845  001AB2                     __ptext21:
  4846                           	opt stack 0
  4847  001AB2                     _log:
  4848                           	opt stack 23
  4849                           
  4850                           ;incstack = 0
  4851  001AB2  BE52               	btfsc	log@x+3,7,c
  4852  001AB4  D005               	goto	l3881
  4853  001AB6  504F               	movf	log@x,w,c
  4854  001AB8  1050               	iorwf	log@x+1,w,c
  4855  001ABA  1051               	iorwf	log@x+2,w,c
  4856  001ABC  1052               	iorwf	log@x+3,w,c
  4857  001ABE  E105               	bnz	l3883
  4858  001AC0                     l3881:
  4859  001AC0  6A4F               	clrf	?_log,c
  4860  001AC2  6A50               	clrf	?_log+1,c
  4861  001AC4  6A51               	clrf	?_log+2,c
  4862  001AC6  6A52               	clrf	?_log+3,c
  4863  001AC8  D080               	goto	l1073
  4864  001ACA                     l3883:
  4865  001ACA  6A20               	clrf	___flmul@f2,c
  4866  001ACC  6A21               	clrf	___flmul@f2+1,c
  4867  001ACE  6A22               	clrf	___flmul@f2+2,c
  4868  001AD0  0E40               	movlw	64
  4869  001AD2  6E23               	movwf	___flmul@f2+3,c
  4870  001AD4  0E53               	movlw	low log@exponent
  4871  001AD6  6E07               	movwf	frexp@eptr,c
  4872  001AD8  C04F  F003         	movff	log@x,frexp@value
  4873  001ADC  C050  F004         	movff	log@x+1,frexp@value+1
  4874  001AE0  C051  F005         	movff	log@x+2,frexp@value+2
  4875  001AE4  C052  F006         	movff	log@x+3,frexp@value+3
  4876  001AE8  EC9C  F012         	call	_frexp	;wreg free
  4877  001AEC  C003  F01C         	movff	?_frexp,___flmul@f1
  4878  001AF0  C004  F01D         	movff	?_frexp+1,___flmul@f1+1
  4879  001AF4  C005  F01E         	movff	?_frexp+2,___flmul@f1+2
  4880  001AF8  C006  F01F         	movff	?_frexp+3,___flmul@f1+3
  4881  001AFC  EC29  F00A         	call	___flmul	;wreg free
  4882  001B00  C01C  F037         	movff	?___flmul,___fladd@f1
  4883  001B04  C01D  F038         	movff	?___flmul+1,___fladd@f1+1
  4884  001B08  C01E  F039         	movff	?___flmul+2,___fladd@f1+2
  4885  001B0C  C01F  F03A         	movff	?___flmul+3,___fladd@f1+3
  4886  001B10  0E00               	movlw	0
  4887  001B12  6E3B               	movwf	___fladd@f2,c
  4888  001B14  6E3C               	movwf	___fladd@f2+1,c
  4889  001B16  0E80               	movlw	128
  4890  001B18  6E3D               	movwf	___fladd@f2+2,c
  4891  001B1A  0EBF               	movlw	191
  4892  001B1C  6E3E               	movwf	___fladd@f2+3,c
  4893  001B1E  ECA5  F00C         	call	___fladd	;wreg free
  4894  001B22  C037  F04F         	movff	?___fladd,log@x
  4895  001B26  C038  F050         	movff	?___fladd+1,log@x+1
  4896  001B2A  C039  F051         	movff	?___fladd+2,log@x+2
  4897  001B2E  C03A  F052         	movff	?___fladd+3,log@x+3
  4898  001B32  0653               	decf	log@exponent,f,c
  4899  001B34  A0D8               	btfss	status,0,c
  4900  001B36  0654               	decf	log@exponent+1,f,c
  4901  001B38  C04F  F043         	movff	log@x,eval_poly@x
  4902  001B3C  C050  F044         	movff	log@x+1,eval_poly@x+1
  4903  001B40  C051  F045         	movff	log@x+2,eval_poly@x+2
  4904  001B44  C052  F046         	movff	log@x+3,eval_poly@x+3
  4905  001B48  0E29               	movlw	low log@coeff
  4906  001B4A  6E47               	movwf	eval_poly@d,c
  4907  001B4C  6A49               	clrf	eval_poly@n+1,c
  4908  001B4E  0E08               	movlw	8
  4909  001B50  6E48               	movwf	eval_poly@n,c
  4910  001B52  EC01  F011         	call	_eval_poly	;wreg free
  4911  001B56  C043  F04F         	movff	?_eval_poly,log@x
  4912  001B5A  C044  F050         	movff	?_eval_poly+1,log@x+1
  4913  001B5E  C045  F051         	movff	?_eval_poly+2,log@x+2
  4914  001B62  C046  F052         	movff	?_eval_poly+3,log@x+3
  4915  001B66  0E18               	movlw	24
  4916  001B68  6E20               	movwf	___flmul@f2,c
  4917  001B6A  0E72               	movlw	114
  4918  001B6C  6E21               	movwf	___flmul@f2+1,c
  4919  001B6E  0E31               	movlw	49
  4920  001B70  6E22               	movwf	___flmul@f2+2,c
  4921  001B72  0E3F               	movlw	63
  4922  001B74  6E23               	movwf	___flmul@f2+3,c
  4923  001B76  C053  F00D         	movff	log@exponent,___awtofl@c
  4924  001B7A  C054  F00E         	movff	log@exponent+1,___awtofl@c+1
  4925  001B7E  ECB8  F014         	call	___awtofl	;wreg free
  4926  001B82  C00D  F01C         	movff	?___awtofl,___flmul@f1
  4927  001B86  C00E  F01D         	movff	?___awtofl+1,___flmul@f1+1
  4928  001B8A  C00F  F01E         	movff	?___awtofl+2,___flmul@f1+2
  4929  001B8E  C010  F01F         	movff	?___awtofl+3,___flmul@f1+3
  4930  001B92  EC29  F00A         	call	___flmul	;wreg free
  4931  001B96  C01C  F037         	movff	?___flmul,___fladd@f1
  4932  001B9A  C01D  F038         	movff	?___flmul+1,___fladd@f1+1
  4933  001B9E  C01E  F039         	movff	?___flmul+2,___fladd@f1+2
  4934  001BA2  C01F  F03A         	movff	?___flmul+3,___fladd@f1+3
  4935  001BA6  C04F  F03B         	movff	log@x,___fladd@f2
  4936  001BAA  C050  F03C         	movff	log@x+1,___fladd@f2+1
  4937  001BAE  C051  F03D         	movff	log@x+2,___fladd@f2+2
  4938  001BB2  C052  F03E         	movff	log@x+3,___fladd@f2+3
  4939  001BB6  ECA5  F00C         	call	___fladd	;wreg free
  4940  001BBA  C037  F04F         	movff	?___fladd,?_log
  4941  001BBE  C038  F050         	movff	?___fladd+1,?_log+1
  4942  001BC2  C039  F051         	movff	?___fladd+2,?_log+2
  4943  001BC6  C03A  F052         	movff	?___fladd+3,?_log+3
  4944  001BCA                     l1073:
  4945  001BCA  0012               	return		;funcret
  4946  001BCC                     __end_of_log:
  4947                           	opt stack 0
  4948                           tosu	equ	0xFFF
  4949                           tosh	equ	0xFFE
  4950                           tosl	equ	0xFFD
  4951                           pclath	equ	0xFFA
  4952                           tblptru	equ	0xFF8
  4953                           tblptrh	equ	0xFF7
  4954                           tblptrl	equ	0xFF6
  4955                           tablat	equ	0xFF5
  4956                           intcon	equ	0xFF2
  4957                           intcon2	equ	0xFF1
  4958                           postinc0	equ	0xFEE
  4959                           wreg	equ	0xFE8
  4960                           postdec1	equ	0xFE5
  4961                           fsr1l	equ	0xFE1
  4962                           status	equ	0xFD8
  4963                           
  4964 ;; *************** function _frexp *****************
  4965 ;; Defined at:
  4966 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  4967 ;; Parameters:    Size  Location     Type
  4968 ;;  value           4    2[COMRAM] int 
  4969 ;;  eptr            1    6[COMRAM] PTR int 
  4970 ;;		 -> log@exponent(2), floor@expon(2), 
  4971 ;; Auto vars:     Size  Location     Type
  4972 ;;		None
  4973 ;; Return value:  Size  Location     Type
  4974 ;;                  4    2[COMRAM] PTR int 
  4975 ;; Registers used:
  4976 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4977 ;; Tracked objects:
  4978 ;;		On entry : 0/0
  4979 ;;		On exit  : 0/0
  4980 ;;		Unchanged: 0/0
  4981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4982 ;;      Params:         5       0       0       0       0       0       0       0       0
  4983 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4984 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4985 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4986 ;;Total ram usage:        7 bytes
  4987 ;; Hardware stack levels used:    1
  4988 ;; Hardware stack levels required when called:    1
  4989 ;; This function calls:
  4990 ;;		Nothing
  4991 ;; This function is called by:
  4992 ;;		_floor
  4993 ;;		_log
  4994 ;; This function uses a non-reentrant model
  4995 ;;
  4996                           
  4997                           	psect	text22
  4998  002538                     __ptext22:
  4999                           	opt stack 0
  5000  002538                     _frexp:
  5001                           	opt stack 25
  5002                           
  5003                           ;incstack = 0
  5004  002538  5003               	movf	frexp@value,w,c
  5005  00253A  1004               	iorwf	frexp@value+1,w,c
  5006  00253C  1005               	iorwf	frexp@value+2,w,c
  5007  00253E  1006               	iorwf	frexp@value+3,w,c
  5008  002540  E10B               	bnz	l3741
  5009  002542  5007               	movf	frexp@eptr,w,c
  5010  002544  6ED9               	movwf	fsr2l,c
  5011  002546  6ADA               	clrf	fsr2h,c
  5012  002548  0E00               	movlw	0
  5013  00254A  6ADE               	clrf	postinc2,c
  5014  00254C  6ADD               	clrf	postdec2,c
  5015  00254E  6A03               	clrf	?_frexp,c
  5016  002550  6A04               	clrf	?_frexp+1,c
  5017  002552  6A05               	clrf	?_frexp+2,c
  5018  002554  6A06               	clrf	?_frexp+3,c
  5019  002556  D02B               	goto	l912
  5020  002558                     l3741:
  5021  002558  5006               	movf	frexp@value+3,w,c
  5022  00255A  0B7F               	andlw	127
  5023  00255C  6E08               	movwf	??_frexp& (0+255),c
  5024  00255E  6A09               	clrf	(??_frexp+1)& (0+255),c
  5025  002560  90D8               	bcf	status,0,c
  5026  002562  3608               	rlcf	??_frexp,f,c
  5027  002564  3609               	rlcf	??_frexp+1,f,c
  5028  002566  5007               	movf	frexp@eptr,w,c
  5029  002568  6ED9               	movwf	fsr2l,c
  5030  00256A  6ADA               	clrf	fsr2h,c
  5031  00256C  C008  FFDE         	movff	??_frexp,postinc2
  5032  002570  C009  FFDD         	movff	??_frexp+1,postdec2
  5033  002574  5007               	movf	frexp@eptr,w,c
  5034  002576  6ED9               	movwf	fsr2l,c
  5035  002578  6ADA               	clrf	fsr2h,c
  5036  00257A  0E01               	movlw	1
  5037  00257C  AE05               	btfss	frexp@value+2,7,c
  5038  00257E  0E00               	movlw	0
  5039  002580  12DE               	iorwf	postinc2,f,c
  5040  002582  0E00               	movlw	0
  5041  002584  12DD               	iorwf	postdec2,f,c
  5042  002586  5007               	movf	frexp@eptr,w,c
  5043  002588  6ED9               	movwf	fsr2l,c
  5044  00258A  6ADA               	clrf	fsr2h,c
  5045  00258C  0E82               	movlw	130
  5046  00258E  26DE               	addwf	postinc2,f,c
  5047  002590  0EFF               	movlw	255
  5048  002592  22DD               	addwfc	postdec2,f,c
  5049  002594  5006               	movf	frexp@value+3,w,c
  5050  002596  0B80               	andlw	-128
  5051  002598  093F               	iorlw	63
  5052  00259A  6E06               	movwf	frexp@value+3,c
  5053  00259C  9E05               	bcf	frexp@value+2,7,c
  5054  00259E  C003  F003         	movff	frexp@value,?_frexp
  5055  0025A2  C004  F004         	movff	frexp@value+1,?_frexp+1
  5056  0025A6  C005  F005         	movff	frexp@value+2,?_frexp+2
  5057  0025AA  C006  F006         	movff	frexp@value+3,?_frexp+3
  5058  0025AE                     l912:
  5059  0025AE  0012               	return		;funcret
  5060  0025B0                     __end_of_frexp:
  5061                           	opt stack 0
  5062                           tosu	equ	0xFFF
  5063                           tosh	equ	0xFFE
  5064                           tosl	equ	0xFFD
  5065                           pclath	equ	0xFFA
  5066                           tblptru	equ	0xFF8
  5067                           tblptrh	equ	0xFF7
  5068                           tblptrl	equ	0xFF6
  5069                           tablat	equ	0xFF5
  5070                           intcon	equ	0xFF2
  5071                           intcon2	equ	0xFF1
  5072                           postinc0	equ	0xFEE
  5073                           wreg	equ	0xFE8
  5074                           postdec1	equ	0xFE5
  5075                           fsr1l	equ	0xFE1
  5076                           postinc2	equ	0xFDE
  5077                           postdec2	equ	0xFDD
  5078                           fsr2h	equ	0xFDA
  5079                           fsr2l	equ	0xFD9
  5080                           status	equ	0xFD8
  5081                           
  5082 ;; *************** function _eval_poly *****************
  5083 ;; Defined at:
  5084 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  5085 ;; Parameters:    Size  Location     Type
  5086 ;;  x               4   66[COMRAM] PTR int 
  5087 ;;  d               1   70[COMRAM] PTR const 
  5088 ;;		 -> exp@coeff(40), log@coeff(36), 
  5089 ;;  n               2   71[COMRAM] int 
  5090 ;; Auto vars:     Size  Location     Type
  5091 ;;  res             4   74[COMRAM] int 
  5092 ;; Return value:  Size  Location     Type
  5093 ;;                  4   66[COMRAM] int 
  5094 ;; Registers used:
  5095 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5096 ;; Tracked objects:
  5097 ;;		On entry : 0/0
  5098 ;;		On exit  : 0/0
  5099 ;;		Unchanged: 0/0
  5100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5101 ;;      Params:         7       0       0       0       0       0       0       0       0
  5102 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5103 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5104 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5105 ;;Total ram usage:       12 bytes
  5106 ;; Hardware stack levels used:    1
  5107 ;; Hardware stack levels required when called:    3
  5108 ;; This function calls:
  5109 ;;		___fladd
  5110 ;;		___flmul
  5111 ;; This function is called by:
  5112 ;;		_log
  5113 ;;		_exp
  5114 ;; This function uses a non-reentrant model
  5115 ;;
  5116                           
  5117                           	psect	text23
  5118  002202                     __ptext23:
  5119                           	opt stack 0
  5120  002202                     _eval_poly:
  5121                           	opt stack 23
  5122                           
  5123                           ;incstack = 0
  5124  002202  5048               	movf	eval_poly@n,w,c
  5125  002204  0D04               	mullw	4
  5126  002206  5047               	movf	eval_poly@d,w,c
  5127  002208  24F3               	addwf	prodl,w,c
  5128  00220A  6E4A               	movwf	??_eval_poly& (0+255),c
  5129  00220C  C04A  FFF6         	movff	??_eval_poly,tblptrl
  5130  002210                     	if	1	;There is more than 1 active tblptr byte
  5131  002210  0E08               	movlw	high __smallconst
  5132  002212  6EF7               	movwf	tblptrh,c
  5133  002214                     	endif
  5134  002214                     	if	0	;tblptru may be non-zero
  5135  002214                     	endif
  5136  002214                     	if	0	;tblptru may be non-zero
  5137  002214                     	endif
  5138  002214  0009               	tblrd		*+
  5139  002216  CFF5 F04B          	movff	tablat,eval_poly@res
  5140  00221A  0009               	tblrd		*+
  5141  00221C  CFF5 F04C          	movff	tablat,eval_poly@res+1
  5142  002220  0009               	tblrd		*+
  5143  002222  CFF5 F04D          	movff	tablat,eval_poly@res+2
  5144  002226  000A               	tblrd		*-
  5145  002228  CFF5 F04E          	movff	tablat,eval_poly@res+3
  5146  00222C  D03C               	goto	l3869
  5147  00222E                     l3867:
  5148  00222E  C04B  F020         	movff	eval_poly@res,___flmul@f2
  5149  002232  C04C  F021         	movff	eval_poly@res+1,___flmul@f2+1
  5150  002236  C04D  F022         	movff	eval_poly@res+2,___flmul@f2+2
  5151  00223A  C04E  F023         	movff	eval_poly@res+3,___flmul@f2+3
  5152  00223E  C043  F01C         	movff	eval_poly@x,___flmul@f1
  5153  002242  C044  F01D         	movff	eval_poly@x+1,___flmul@f1+1
  5154  002246  C045  F01E         	movff	eval_poly@x+2,___flmul@f1+2
  5155  00224A  C046  F01F         	movff	eval_poly@x+3,___flmul@f1+3
  5156  00224E  EC29  F00A         	call	___flmul	;wreg free
  5157  002252  C01C  F037         	movff	?___flmul,___fladd@f1
  5158  002256  C01D  F038         	movff	?___flmul+1,___fladd@f1+1
  5159  00225A  C01E  F039         	movff	?___flmul+2,___fladd@f1+2
  5160  00225E  C01F  F03A         	movff	?___flmul+3,___fladd@f1+3
  5161  002262  0648               	decf	eval_poly@n,f,c
  5162  002264  A0D8               	btfss	status,0,c
  5163  002266  0649               	decf	eval_poly@n+1,f,c
  5164  002268  5048               	movf	eval_poly@n,w,c
  5165  00226A  0D04               	mullw	4
  5166  00226C  5047               	movf	eval_poly@d,w,c
  5167  00226E  24F3               	addwf	prodl,w,c
  5168  002270  6E4A               	movwf	??_eval_poly& (0+255),c
  5169  002272  C04A  FFF6         	movff	??_eval_poly,tblptrl
  5170  002276                     	if	1	;There is more than 1 active tblptr byte
  5171  002276  0E08               	movlw	high __smallconst
  5172  002278  6EF7               	movwf	tblptrh,c
  5173  00227A                     	endif
  5174  00227A                     	if	0	;tblptru may be non-zero
  5175  00227A                     	endif
  5176  00227A                     	if	0	;tblptru may be non-zero
  5177  00227A                     	endif
  5178  00227A  0009               	tblrd		*+
  5179  00227C  CFF5 F03B          	movff	tablat,___fladd@f2
  5180  002280  0009               	tblrd		*+
  5181  002282  CFF5 F03C          	movff	tablat,___fladd@f2+1
  5182  002286  0009               	tblrd		*+
  5183  002288  CFF5 F03D          	movff	tablat,___fladd@f2+2
  5184  00228C  000A               	tblrd		*-
  5185  00228E  CFF5 F03E          	movff	tablat,___fladd@f2+3
  5186  002292  ECA5  F00C         	call	___fladd	;wreg free
  5187  002296  C037  F04B         	movff	?___fladd,eval_poly@res
  5188  00229A  C038  F04C         	movff	?___fladd+1,eval_poly@res+1
  5189  00229E  C039  F04D         	movff	?___fladd+2,eval_poly@res+2
  5190  0022A2  C03A  F04E         	movff	?___fladd+3,eval_poly@res+3
  5191  0022A6                     l3869:
  5192  0022A6  5048               	movf	eval_poly@n,w,c
  5193  0022A8  1049               	iorwf	eval_poly@n+1,w,c
  5194  0022AA  E1C1               	bnz	l3867
  5195  0022AC  C04B  F043         	movff	eval_poly@res,?_eval_poly
  5196  0022B0  C04C  F044         	movff	eval_poly@res+1,?_eval_poly+1
  5197  0022B4  C04D  F045         	movff	eval_poly@res+2,?_eval_poly+2
  5198  0022B8  C04E  F046         	movff	eval_poly@res+3,?_eval_poly+3
  5199  0022BC  0012               	return		;funcret
  5200  0022BE                     __end_of_eval_poly:
  5201                           	opt stack 0
  5202                           tosu	equ	0xFFF
  5203                           tosh	equ	0xFFE
  5204                           tosl	equ	0xFFD
  5205                           pclath	equ	0xFFA
  5206                           tblptru	equ	0xFF8
  5207                           tblptrh	equ	0xFF7
  5208                           tblptrl	equ	0xFF6
  5209                           tablat	equ	0xFF5
  5210                           prodl	equ	0xFF3
  5211                           intcon	equ	0xFF2
  5212                           intcon2	equ	0xFF1
  5213                           postinc0	equ	0xFEE
  5214                           wreg	equ	0xFE8
  5215                           postdec1	equ	0xFE5
  5216                           fsr1l	equ	0xFE1
  5217                           postinc2	equ	0xFDE
  5218                           postdec2	equ	0xFDD
  5219                           fsr2h	equ	0xFDA
  5220                           fsr2l	equ	0xFD9
  5221                           status	equ	0xFD8
  5222                           
  5223 ;; *************** function ___flmul *****************
  5224 ;; Defined at:
  5225 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\flmul.c"
  5226 ;; Parameters:    Size  Location     Type
  5227 ;;  f1              4   27[COMRAM] int 
  5228 ;;  f2              4   31[COMRAM] int 
  5229 ;; Auto vars:     Size  Location     Type
  5230 ;;  f3_as_produc    4   50[COMRAM] unsigned long 
  5231 ;;  sign            1   49[COMRAM] unsigned char 
  5232 ;;  exp             1   48[COMRAM] unsigned char 
  5233 ;;  cntr            1    0        unsigned char 
  5234 ;; Return value:  Size  Location     Type
  5235 ;;                  4   27[COMRAM] unsigned char 
  5236 ;; Registers used:
  5237 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5238 ;; Tracked objects:
  5239 ;;		On entry : 0/0
  5240 ;;		On exit  : 0/0
  5241 ;;		Unchanged: 0/0
  5242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5243 ;;      Params:         8       0       0       0       0       0       0       0       0
  5244 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5245 ;;      Temps:         13       0       0       0       0       0       0       0       0
  5246 ;;      Totals:        27       0       0       0       0       0       0       0       0
  5247 ;;Total ram usage:       27 bytes
  5248 ;; Hardware stack levels used:    1
  5249 ;; Hardware stack levels required when called:    2
  5250 ;; This function calls:
  5251 ;;		___flpack
  5252 ;; This function is called by:
  5253 ;;		_format_double
  5254 ;;		_measure_capacitance
  5255 ;;		_measure_inductance
  5256 ;;		_log
  5257 ;;		_log10
  5258 ;;		_pow
  5259 ;;		_eval_poly
  5260 ;;		_exp
  5261 ;; This function uses a non-reentrant model
  5262 ;;
  5263                           
  5264                           	psect	text24
  5265  001452                     __ptext24:
  5266                           	opt stack 0
  5267  001452                     ___flmul:
  5268                           	opt stack 27
  5269                           
  5270                           ;incstack = 0
  5271  001452  341E               	rlcf	___flmul@f1+2,w,c
  5272  001454  341F               	rlcf	___flmul@f1+3,w,c
  5273  001456  6E31               	movwf	___flmul@exp,c
  5274  001458  5031               	movf	___flmul@exp,w,c
  5275  00145A  E005               	bz	l3699
  5276  00145C  3422               	rlcf	___flmul@f2+2,w,c
  5277  00145E  3423               	rlcf	___flmul@f2+3,w,c
  5278  001460  6E32               	movwf	___flmul@sign,c
  5279  001462  5032               	movf	___flmul@sign,w,c
  5280  001464  E105               	bnz	l3701
  5281  001466                     l3699:
  5282  001466  6A1C               	clrf	?___flmul,c
  5283  001468  6A1D               	clrf	?___flmul+1,c
  5284  00146A  6A1E               	clrf	?___flmul+2,c
  5285  00146C  6A1F               	clrf	?___flmul+3,c
  5286  00146E  D0CF               	goto	l852
  5287  001470                     l3701:
  5288  001470  5032               	movf	___flmul@sign,w,c
  5289  001472  0F7B               	addlw	123
  5290  001474  2631               	addwf	___flmul@exp,f,c
  5291  001476  C01F  F032         	movff	___flmul@f1+3,___flmul@sign
  5292  00147A  5023               	movf	___flmul@f2+3,w,c
  5293  00147C  1A32               	xorwf	___flmul@sign,f,c
  5294  00147E  0E80               	movlw	128
  5295  001480  1632               	andwf	___flmul@sign,f,c
  5296  001482  8E1E               	bsf	___flmul@f1+2,7,c
  5297  001484  8E22               	bsf	___flmul@f2+2,7,c
  5298  001486  6A23               	clrf	___flmul@f2+3,c
  5299  001488  6A1F               	clrf	___flmul@f1+3,c
  5300  00148A  501C               	movf	___flmul@f1,w,c
  5301  00148C  0220               	mulwf	___flmul@f2,c
  5302  00148E  CFF4 FFF3          	movff	prodh,prodl
  5303  001492  6AF4               	clrf	prodh,c
  5304  001494  CFF3 F033          	movff	prodl,___flmul@f3_as_product
  5305  001498  CFF4 F034          	movff	prodh,___flmul@f3_as_product+1
  5306  00149C  6A35               	clrf	___flmul@f3_as_product+2,c
  5307  00149E  6A36               	clrf	___flmul@f3_as_product+3,c
  5308  0014A0  501C               	movf	___flmul@f1,w,c
  5309  0014A2  0221               	mulwf	___flmul@f2+1,c
  5310  0014A4  CFF3 F024          	movff	prodl,??___flmul
  5311  0014A8  CFF4 F025          	movff	prodh,??___flmul+1
  5312  0014AC  6A26               	clrf	(??___flmul+2)& (0+255),c
  5313  0014AE  501D               	movf	___flmul@f1+1,w,c
  5314  0014B0  0220               	mulwf	___flmul@f2,c
  5315  0014B2  50F3               	movf	prodl,w,c
  5316  0014B4  2424               	addwf	??___flmul,w,c
  5317  0014B6  6E27               	movwf	(??___flmul+3)& (0+255),c
  5318  0014B8  50F4               	movf	prodh,w,c
  5319  0014BA  2025               	addwfc	??___flmul+1,w,c
  5320  0014BC  6E28               	movwf	(??___flmul+4)& (0+255),c
  5321  0014BE  0E00               	movlw	0
  5322  0014C0  2026               	addwfc	??___flmul+2,w,c
  5323  0014C2  6E29               	movwf	(??___flmul+5)& (0+255),c
  5324  0014C4  5027               	movf	??___flmul+3,w,c
  5325  0014C6  6E2A               	movwf	(??___flmul+6)& (0+255),c
  5326  0014C8  5028               	movf	??___flmul+4,w,c
  5327  0014CA  6E2B               	movwf	(??___flmul+7)& (0+255),c
  5328  0014CC  5029               	movf	??___flmul+5,w,c
  5329  0014CE  6E2C               	movwf	(??___flmul+8)& (0+255),c
  5330  0014D0  6A2D               	clrf	(??___flmul+9)& (0+255),c
  5331  0014D2  502A               	movf	??___flmul+6,w,c
  5332  0014D4  2633               	addwf	___flmul@f3_as_product,f,c
  5333  0014D6  502B               	movf	??___flmul+7,w,c
  5334  0014D8  2234               	addwfc	___flmul@f3_as_product+1,f,c
  5335  0014DA  502C               	movf	??___flmul+8,w,c
  5336  0014DC  2235               	addwfc	___flmul@f3_as_product+2,f,c
  5337  0014DE  502D               	movf	??___flmul+9,w,c
  5338  0014E0  2236               	addwfc	___flmul@f3_as_product+3,f,c
  5339  0014E2  5034               	movf	___flmul@f3_as_product+1,w,c
  5340  0014E4  6E33               	movwf	___flmul@f3_as_product,c
  5341  0014E6  5035               	movf	___flmul@f3_as_product+2,w,c
  5342  0014E8  6E34               	movwf	___flmul@f3_as_product+1,c
  5343  0014EA  5036               	movf	___flmul@f3_as_product+3,w,c
  5344  0014EC  6E35               	movwf	___flmul@f3_as_product+2,c
  5345  0014EE  6A36               	clrf	___flmul@f3_as_product+3,c
  5346  0014F0  501C               	movf	___flmul@f1,w,c
  5347  0014F2  0222               	mulwf	___flmul@f2+2,c
  5348  0014F4  CFF3 F024          	movff	prodl,??___flmul
  5349  0014F8  CFF4 F025          	movff	prodh,??___flmul+1
  5350  0014FC  6A26               	clrf	(??___flmul+2)& (0+255),c
  5351  0014FE  501D               	movf	___flmul@f1+1,w,c
  5352  001500  0221               	mulwf	___flmul@f2+1,c
  5353  001502  50F3               	movf	prodl,w,c
  5354  001504  2424               	addwf	??___flmul,w,c
  5355  001506  6E27               	movwf	(??___flmul+3)& (0+255),c
  5356  001508  50F4               	movf	prodh,w,c
  5357  00150A  2025               	addwfc	??___flmul+1,w,c
  5358  00150C  6E28               	movwf	(??___flmul+4)& (0+255),c
  5359  00150E  0E00               	movlw	0
  5360  001510  2026               	addwfc	??___flmul+2,w,c
  5361  001512  6E29               	movwf	(??___flmul+5)& (0+255),c
  5362  001514  501E               	movf	___flmul@f1+2,w,c
  5363  001516  0220               	mulwf	___flmul@f2,c
  5364  001518  50F3               	movf	prodl,w,c
  5365  00151A  2427               	addwf	??___flmul+3,w,c
  5366  00151C  6E2A               	movwf	(??___flmul+6)& (0+255),c
  5367  00151E  50F4               	movf	prodh,w,c
  5368  001520  2028               	addwfc	??___flmul+4,w,c
  5369  001522  6E2B               	movwf	(??___flmul+7)& (0+255),c
  5370  001524  0E00               	movlw	0
  5371  001526  2029               	addwfc	??___flmul+5,w,c
  5372  001528  6E2C               	movwf	(??___flmul+8)& (0+255),c
  5373  00152A  502A               	movf	??___flmul+6,w,c
  5374  00152C  6E2D               	movwf	(??___flmul+9)& (0+255),c
  5375  00152E  502B               	movf	??___flmul+7,w,c
  5376  001530  6E2E               	movwf	(??___flmul+10)& (0+255),c
  5377  001532  502C               	movf	??___flmul+8,w,c
  5378  001534  6E2F               	movwf	(??___flmul+11)& (0+255),c
  5379  001536  6A30               	clrf	(??___flmul+12)& (0+255),c
  5380  001538  502D               	movf	??___flmul+9,w,c
  5381  00153A  2633               	addwf	___flmul@f3_as_product,f,c
  5382  00153C  502E               	movf	??___flmul+10,w,c
  5383  00153E  2234               	addwfc	___flmul@f3_as_product+1,f,c
  5384  001540  502F               	movf	??___flmul+11,w,c
  5385  001542  2235               	addwfc	___flmul@f3_as_product+2,f,c
  5386  001544  5030               	movf	??___flmul+12,w,c
  5387  001546  2236               	addwfc	___flmul@f3_as_product+3,f,c
  5388  001548  501E               	movf	___flmul@f1+2,w,c
  5389  00154A  0221               	mulwf	___flmul@f2+1,c
  5390  00154C  CFF3 F024          	movff	prodl,??___flmul
  5391  001550  CFF4 F025          	movff	prodh,??___flmul+1
  5392  001554  6A26               	clrf	(??___flmul+2)& (0+255),c
  5393  001556  0E33               	movlw	___flmul@f3_as_product& (0+255)
  5394  001558  6E27               	movwf	(??___flmul+3)& (0+255),c
  5395  00155A  6A28               	clrf	(??___flmul+4)& (0+255),c
  5396  00155C  2827               	incf	??___flmul+3,w,c
  5397  00155E  6ED9               	movwf	fsr2l,c
  5398  001560  0E00               	movlw	0
  5399  001562  2028               	addwfc	??___flmul+4,w,c
  5400  001564  6EDA               	movwf	fsr2h,c
  5401  001566  5024               	movf	??___flmul,w,c
  5402  001568  26DE               	addwf	postinc2,f,c
  5403  00156A  5025               	movf	??___flmul+1,w,c
  5404  00156C  22DE               	addwfc	postinc2,f,c
  5405  00156E  5026               	movf	??___flmul+2,w,c
  5406  001570  22DE               	addwfc	postinc2,f,c
  5407  001572  501D               	movf	___flmul@f1+1,w,c
  5408  001574  0222               	mulwf	___flmul@f2+2,c
  5409  001576  CFF3 F024          	movff	prodl,??___flmul
  5410  00157A  CFF4 F025          	movff	prodh,??___flmul+1
  5411  00157E  6A26               	clrf	(??___flmul+2)& (0+255),c
  5412  001580  0E33               	movlw	___flmul@f3_as_product& (0+255)
  5413  001582  6E27               	movwf	(??___flmul+3)& (0+255),c
  5414  001584  6A28               	clrf	(??___flmul+4)& (0+255),c
  5415  001586  2827               	incf	??___flmul+3,w,c
  5416  001588  6ED9               	movwf	fsr2l,c
  5417  00158A  0E00               	movlw	0
  5418  00158C  2028               	addwfc	??___flmul+4,w,c
  5419  00158E  6EDA               	movwf	fsr2h,c
  5420  001590  5024               	movf	??___flmul,w,c
  5421  001592  26DE               	addwf	postinc2,f,c
  5422  001594  5025               	movf	??___flmul+1,w,c
  5423  001596  22DE               	addwfc	postinc2,f,c
  5424  001598  5026               	movf	??___flmul+2,w,c
  5425  00159A  22DE               	addwfc	postinc2,f,c
  5426  00159C  501E               	movf	___flmul@f1+2,w,c
  5427  00159E  0222               	mulwf	___flmul@f2+2,c
  5428  0015A0  CFF3 F024          	movff	prodl,??___flmul
  5429  0015A4  CFF4 F025          	movff	prodh,??___flmul+1
  5430  0015A8  6A26               	clrf	(??___flmul+2)& (0+255),c
  5431  0015AA  0E33               	movlw	___flmul@f3_as_product& (0+255)
  5432  0015AC  6E27               	movwf	(??___flmul+3)& (0+255),c
  5433  0015AE  6A28               	clrf	(??___flmul+4)& (0+255),c
  5434  0015B0  0E02               	movlw	2
  5435  0015B2  2427               	addwf	??___flmul+3,w,c
  5436  0015B4  6ED9               	movwf	fsr2l,c
  5437  0015B6  0E00               	movlw	0
  5438  0015B8  2028               	addwfc	??___flmul+4,w,c
  5439  0015BA  6EDA               	movwf	fsr2h,c
  5440  0015BC  5024               	movf	??___flmul,w,c
  5441  0015BE  26DE               	addwf	postinc2,f,c
  5442  0015C0  5025               	movf	??___flmul+1,w,c
  5443  0015C2  22DE               	addwfc	postinc2,f,c
  5444  0015C4  5026               	movf	??___flmul+2,w,c
  5445  0015C6  22DE               	addwfc	postinc2,f,c
  5446  0015C8  AE36               	btfss	___flmul@f3_as_product+3,7,c
  5447  0015CA  D006               	goto	l854
  5448  0015CC  90D8               	bcf	status,0,c
  5449  0015CE  3236               	rrcf	___flmul@f3_as_product+3,f,c
  5450  0015D0  3235               	rrcf	___flmul@f3_as_product+2,f,c
  5451  0015D2  3234               	rrcf	___flmul@f3_as_product+1,f,c
  5452  0015D4  3233               	rrcf	___flmul@f3_as_product,f,c
  5453  0015D6  2A31               	incf	___flmul@exp,f,c
  5454  0015D8                     l854:
  5455  0015D8  90D8               	bcf	status,0,c
  5456  0015DA  3236               	rrcf	___flmul@f3_as_product+3,f,c
  5457  0015DC  3235               	rrcf	___flmul@f3_as_product+2,f,c
  5458  0015DE  3234               	rrcf	___flmul@f3_as_product+1,f,c
  5459  0015E0  3233               	rrcf	___flmul@f3_as_product,f,c
  5460  0015E2  C033  F003         	movff	___flmul@f3_as_product,___flpack@arg
  5461  0015E6  C034  F004         	movff	___flmul@f3_as_product+1,___flpack@arg+1
  5462  0015EA  C035  F005         	movff	___flmul@f3_as_product+2,___flpack@arg+2
  5463  0015EE  C036  F006         	movff	___flmul@f3_as_product+3,___flpack@arg+3
  5464  0015F2  C031  F007         	movff	___flmul@exp,___flpack@exp
  5465  0015F6  C032  F008         	movff	___flmul@sign,___flpack@sign
  5466  0015FA  EC3D  F010         	call	___flpack	;wreg free
  5467  0015FE  C003  F01C         	movff	?___flpack,?___flmul
  5468  001602  C004  F01D         	movff	?___flpack+1,?___flmul+1
  5469  001606  C005  F01E         	movff	?___flpack+2,?___flmul+2
  5470  00160A  C006  F01F         	movff	?___flpack+3,?___flmul+3
  5471  00160E                     l852:
  5472  00160E  0012               	return		;funcret
  5473  001610                     __end_of___flmul:
  5474                           	opt stack 0
  5475                           tosu	equ	0xFFF
  5476                           tosh	equ	0xFFE
  5477                           tosl	equ	0xFFD
  5478                           pclath	equ	0xFFA
  5479                           tblptru	equ	0xFF8
  5480                           tblptrh	equ	0xFF7
  5481                           tblptrl	equ	0xFF6
  5482                           tablat	equ	0xFF5
  5483                           prodh	equ	0xFF4
  5484                           prodl	equ	0xFF3
  5485                           intcon	equ	0xFF2
  5486                           intcon2	equ	0xFF1
  5487                           postinc0	equ	0xFEE
  5488                           wreg	equ	0xFE8
  5489                           postdec1	equ	0xFE5
  5490                           fsr1l	equ	0xFE1
  5491                           postinc2	equ	0xFDE
  5492                           postdec2	equ	0xFDD
  5493                           fsr2h	equ	0xFDA
  5494                           fsr2l	equ	0xFD9
  5495                           status	equ	0xFD8
  5496                           
  5497 ;; *************** function ___fladd *****************
  5498 ;; Defined at:
  5499 ;;		line 88 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fladd.c"
  5500 ;; Parameters:    Size  Location     Type
  5501 ;;  f1              4   54[COMRAM] unsigned char 
  5502 ;;  f2              4   58[COMRAM] unsigned char 
  5503 ;; Auto vars:     Size  Location     Type
  5504 ;;  exp1            1   65[COMRAM] unsigned char 
  5505 ;;  exp2            1   64[COMRAM] unsigned char 
  5506 ;;  sign            1   63[COMRAM] unsigned char 
  5507 ;; Return value:  Size  Location     Type
  5508 ;;                  4   54[COMRAM] unsigned char 
  5509 ;; Registers used:
  5510 ;;		wreg, status,2, status,0, cstack
  5511 ;; Tracked objects:
  5512 ;;		On entry : 0/0
  5513 ;;		On exit  : 0/0
  5514 ;;		Unchanged: 0/0
  5515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5516 ;;      Params:         8       0       0       0       0       0       0       0       0
  5517 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5518 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5519 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5520 ;;Total ram usage:       12 bytes
  5521 ;; Hardware stack levels used:    1
  5522 ;; Hardware stack levels required when called:    2
  5523 ;; This function calls:
  5524 ;;		___flpack
  5525 ;; This function is called by:
  5526 ;;		_floor
  5527 ;;		___flsub
  5528 ;;		_log
  5529 ;;		_eval_poly
  5530 ;; This function uses a non-reentrant model
  5531 ;;
  5532                           
  5533                           	psect	text25
  5534  00194A                     __ptext25:
  5535                           	opt stack 0
  5536  00194A                     ___fladd:
  5537                           	opt stack 26
  5538                           
  5539                           ;incstack = 0
  5540  00194A  3439               	rlcf	___fladd@f1+2,w,c
  5541  00194C  343A               	rlcf	___fladd@f1+3,w,c
  5542  00194E  6E42               	movwf	___fladd@exp1,c
  5543  001950  343D               	rlcf	___fladd@f2+2,w,c
  5544  001952  343E               	rlcf	___fladd@f2+3,w,c
  5545  001954  6E41               	movwf	___fladd@exp2,c
  5546  001956  5042               	movf	___fladd@exp1,w,c
  5547  001958  E009               	bz	l805
  5548  00195A  5041               	movf	___fladd@exp2,w,c
  5549  00195C  5C42               	subwf	___fladd@exp1,w,c
  5550  00195E  E20F               	bc	l3633
  5551  001960  5042               	movf	___fladd@exp1,w,c
  5552  001962  5C41               	subwf	___fladd@exp2,w,c
  5553  001964  6E3F               	movwf	??___fladd& (0+255),c
  5554  001966  0E20               	movlw	32
  5555  001968  643F               	cpfsgt	??___fladd,c
  5556  00196A  D009               	goto	l3633
  5557  00196C                     l805:
  5558  00196C  C03B  F037         	movff	___fladd@f2,?___fladd
  5559  001970  C03C  F038         	movff	___fladd@f2+1,?___fladd+1
  5560  001974  C03D  F039         	movff	___fladd@f2+2,?___fladd+2
  5561  001978  C03E  F03A         	movff	___fladd@f2+3,?___fladd+3
  5562  00197C  D099               	goto	l806
  5563  00197E                     l3633:
  5564  00197E  5041               	movf	___fladd@exp2,w,c
  5565  001980  E009               	bz	l809
  5566  001982  5042               	movf	___fladd@exp1,w,c
  5567  001984  5C41               	subwf	___fladd@exp2,w,c
  5568  001986  E20F               	bc	l3639
  5569  001988  5041               	movf	___fladd@exp2,w,c
  5570  00198A  5C42               	subwf	___fladd@exp1,w,c
  5571  00198C  6E3F               	movwf	??___fladd& (0+255),c
  5572  00198E  0E20               	movlw	32
  5573  001990  643F               	cpfsgt	??___fladd,c
  5574  001992  D009               	goto	l3639
  5575  001994                     l809:
  5576  001994  C037  F037         	movff	___fladd@f1,?___fladd
  5577  001998  C038  F038         	movff	___fladd@f1+1,?___fladd+1
  5578  00199C  C039  F039         	movff	___fladd@f1+2,?___fladd+2
  5579  0019A0  C03A  F03A         	movff	___fladd@f1+3,?___fladd+3
  5580  0019A4  D085               	goto	l806
  5581  0019A6                     l3639:
  5582  0019A6  0E06               	movlw	6
  5583  0019A8  6E40               	movwf	___fladd@sign,c
  5584  0019AA  BE3A               	btfsc	___fladd@f1+3,7,c
  5585  0019AC  8E40               	bsf	___fladd@sign,7,c
  5586  0019AE  BE3E               	btfsc	___fladd@f2+3,7,c
  5587  0019B0  8C40               	bsf	___fladd@sign,6,c
  5588  0019B2  8E39               	bsf	___fladd@f1+2,7,c
  5589  0019B4  6A3A               	clrf	___fladd@f1+3,c
  5590  0019B6  8E3D               	bsf	___fladd@f2+2,7,c
  5591  0019B8  6A3E               	clrf	___fladd@f2+3,c
  5592  0019BA  5041               	movf	___fladd@exp2,w,c
  5593  0019BC  5C42               	subwf	___fladd@exp1,w,c
  5594  0019BE  E21A               	bc	l3663
  5595  0019C0                     l3653:
  5596  0019C0  90D8               	bcf	status,0,c
  5597  0019C2  363B               	rlcf	___fladd@f2,f,c
  5598  0019C4  363C               	rlcf	___fladd@f2+1,f,c
  5599  0019C6  363D               	rlcf	___fladd@f2+2,f,c
  5600  0019C8  363E               	rlcf	___fladd@f2+3,f,c
  5601  0019CA  0641               	decf	___fladd@exp2,f,c
  5602  0019CC  5042               	movf	___fladd@exp1,w,c
  5603  0019CE  1841               	xorwf	___fladd@exp2,w,c
  5604  0019D0  E00D               	bz	l3661
  5605  0019D2  0640               	decf	___fladd@sign,f,c
  5606  0019D4  C040  F03F         	movff	___fladd@sign,??___fladd
  5607  0019D8  0E07               	movlw	7
  5608  0019DA  163F               	andwf	??___fladd,f,c
  5609  0019DC  E007               	bz	l3661
  5610  0019DE  D7F0               	goto	l3653
  5611  0019E0                     l3659:
  5612  0019E0  90D8               	bcf	status,0,c
  5613  0019E2  323A               	rrcf	___fladd@f1+3,f,c
  5614  0019E4  3239               	rrcf	___fladd@f1+2,f,c
  5615  0019E6  3238               	rrcf	___fladd@f1+1,f,c
  5616  0019E8  3237               	rrcf	___fladd@f1,f,c
  5617  0019EA  2A42               	incf	___fladd@exp1,f,c
  5618  0019EC                     l3661:
  5619  0019EC  5041               	movf	___fladd@exp2,w,c
  5620  0019EE  1842               	xorwf	___fladd@exp1,w,c
  5621  0019F0  E01D               	bz	l820
  5622  0019F2  D7F6               	goto	l3659
  5623  0019F4                     l3663:
  5624  0019F4  5042               	movf	___fladd@exp1,w,c
  5625  0019F6  5C41               	subwf	___fladd@exp2,w,c
  5626  0019F8  E219               	bc	l820
  5627  0019FA                     l3665:
  5628  0019FA  90D8               	bcf	status,0,c
  5629  0019FC  3637               	rlcf	___fladd@f1,f,c
  5630  0019FE  3638               	rlcf	___fladd@f1+1,f,c
  5631  001A00  3639               	rlcf	___fladd@f1+2,f,c
  5632  001A02  363A               	rlcf	___fladd@f1+3,f,c
  5633  001A04  0642               	decf	___fladd@exp1,f,c
  5634  001A06  5042               	movf	___fladd@exp1,w,c
  5635  001A08  1841               	xorwf	___fladd@exp2,w,c
  5636  001A0A  E00D               	bz	l3673
  5637  001A0C  0640               	decf	___fladd@sign,f,c
  5638  001A0E  C040  F03F         	movff	___fladd@sign,??___fladd
  5639  001A12  0E07               	movlw	7
  5640  001A14  163F               	andwf	??___fladd,f,c
  5641  001A16  E007               	bz	l3673
  5642  001A18  D7F0               	goto	l3665
  5643  001A1A                     l3671:
  5644  001A1A  90D8               	bcf	status,0,c
  5645  001A1C  323E               	rrcf	___fladd@f2+3,f,c
  5646  001A1E  323D               	rrcf	___fladd@f2+2,f,c
  5647  001A20  323C               	rrcf	___fladd@f2+1,f,c
  5648  001A22  323B               	rrcf	___fladd@f2,f,c
  5649  001A24  2A41               	incf	___fladd@exp2,f,c
  5650  001A26                     l3673:
  5651  001A26  5041               	movf	___fladd@exp2,w,c
  5652  001A28  1842               	xorwf	___fladd@exp1,w,c
  5653  001A2A  E1F7               	bnz	l3671
  5654  001A2C                     l820:
  5655  001A2C  AE40               	btfss	___fladd@sign,7,c
  5656  001A2E  D009               	goto	l3677
  5657  001A30  1E37               	comf	___fladd@f1,f,c
  5658  001A32  1E38               	comf	___fladd@f1+1,f,c
  5659  001A34  1E39               	comf	___fladd@f1+2,f,c
  5660  001A36  1E3A               	comf	___fladd@f1+3,f,c
  5661  001A38  2A37               	incf	___fladd@f1,f,c
  5662  001A3A  0E00               	movlw	0
  5663  001A3C  2238               	addwfc	___fladd@f1+1,f,c
  5664  001A3E  2239               	addwfc	___fladd@f1+2,f,c
  5665  001A40  223A               	addwfc	___fladd@f1+3,f,c
  5666  001A42                     l3677:
  5667  001A42  AC40               	btfss	___fladd@sign,6,c
  5668  001A44  D009               	goto	l3681
  5669  001A46  1E3B               	comf	___fladd@f2,f,c
  5670  001A48  1E3C               	comf	___fladd@f2+1,f,c
  5671  001A4A  1E3D               	comf	___fladd@f2+2,f,c
  5672  001A4C  1E3E               	comf	___fladd@f2+3,f,c
  5673  001A4E  2A3B               	incf	___fladd@f2,f,c
  5674  001A50  0E00               	movlw	0
  5675  001A52  223C               	addwfc	___fladd@f2+1,f,c
  5676  001A54  223D               	addwfc	___fladd@f2+2,f,c
  5677  001A56  223E               	addwfc	___fladd@f2+3,f,c
  5678  001A58                     l3681:
  5679  001A58  6A40               	clrf	___fladd@sign,c
  5680  001A5A  5037               	movf	___fladd@f1,w,c
  5681  001A5C  263B               	addwf	___fladd@f2,f,c
  5682  001A5E  5038               	movf	___fladd@f1+1,w,c
  5683  001A60  223C               	addwfc	___fladd@f2+1,f,c
  5684  001A62  5039               	movf	___fladd@f1+2,w,c
  5685  001A64  223D               	addwfc	___fladd@f2+2,f,c
  5686  001A66  503A               	movf	___fladd@f1+3,w,c
  5687  001A68  223E               	addwfc	___fladd@f2+3,f,c
  5688  001A6A  AE3E               	btfss	___fladd@f2+3,7,c
  5689  001A6C  D00B               	goto	l3689
  5690  001A6E  1E3B               	comf	___fladd@f2,f,c
  5691  001A70  1E3C               	comf	___fladd@f2+1,f,c
  5692  001A72  1E3D               	comf	___fladd@f2+2,f,c
  5693  001A74  1E3E               	comf	___fladd@f2+3,f,c
  5694  001A76  2A3B               	incf	___fladd@f2,f,c
  5695  001A78  0E00               	movlw	0
  5696  001A7A  223C               	addwfc	___fladd@f2+1,f,c
  5697  001A7C  223D               	addwfc	___fladd@f2+2,f,c
  5698  001A7E  223E               	addwfc	___fladd@f2+3,f,c
  5699  001A80  0E01               	movlw	1
  5700  001A82  6E40               	movwf	___fladd@sign,c
  5701  001A84                     l3689:
  5702  001A84  C03B  F003         	movff	___fladd@f2,___flpack@arg
  5703  001A88  C03C  F004         	movff	___fladd@f2+1,___flpack@arg+1
  5704  001A8C  C03D  F005         	movff	___fladd@f2+2,___flpack@arg+2
  5705  001A90  C03E  F006         	movff	___fladd@f2+3,___flpack@arg+3
  5706  001A94  C042  F007         	movff	___fladd@exp1,___flpack@exp
  5707  001A98  C040  F008         	movff	___fladd@sign,___flpack@sign
  5708  001A9C  EC3D  F010         	call	___flpack	;wreg free
  5709  001AA0  C003  F037         	movff	?___flpack,?___fladd
  5710  001AA4  C004  F038         	movff	?___flpack+1,?___fladd+1
  5711  001AA8  C005  F039         	movff	?___flpack+2,?___fladd+2
  5712  001AAC  C006  F03A         	movff	?___flpack+3,?___fladd+3
  5713  001AB0                     l806:
  5714  001AB0  0012               	return		;funcret
  5715  001AB2                     __end_of___fladd:
  5716                           	opt stack 0
  5717                           tosu	equ	0xFFF
  5718                           tosh	equ	0xFFE
  5719                           tosl	equ	0xFFD
  5720                           pclath	equ	0xFFA
  5721                           tblptru	equ	0xFF8
  5722                           tblptrh	equ	0xFF7
  5723                           tblptrl	equ	0xFF6
  5724                           tablat	equ	0xFF5
  5725                           prodh	equ	0xFF4
  5726                           prodl	equ	0xFF3
  5727                           intcon	equ	0xFF2
  5728                           intcon2	equ	0xFF1
  5729                           postinc0	equ	0xFEE
  5730                           wreg	equ	0xFE8
  5731                           postdec1	equ	0xFE5
  5732                           fsr1l	equ	0xFE1
  5733                           postinc2	equ	0xFDE
  5734                           postdec2	equ	0xFDD
  5735                           fsr2h	equ	0xFDA
  5736                           fsr2l	equ	0xFD9
  5737                           status	equ	0xFD8
  5738                           
  5739 ;; *************** function ___awtofl *****************
  5740 ;; Defined at:
  5741 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtofl.c"
  5742 ;; Parameters:    Size  Location     Type
  5743 ;;  c               2   12[COMRAM] int 
  5744 ;; Auto vars:     Size  Location     Type
  5745 ;;  f1              4    0        int 
  5746 ;;  sign            1   16[COMRAM] unsigned char 
  5747 ;; Return value:  Size  Location     Type
  5748 ;;                  4   12[COMRAM] unsigned char 
  5749 ;; Registers used:
  5750 ;;		wreg, status,2, status,0, cstack
  5751 ;; Tracked objects:
  5752 ;;		On entry : 0/0
  5753 ;;		On exit  : 0/0
  5754 ;;		Unchanged: 0/0
  5755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5756 ;;      Params:         4       0       0       0       0       0       0       0       0
  5757 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5758 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5759 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5760 ;;Total ram usage:        5 bytes
  5761 ;; Hardware stack levels used:    1
  5762 ;; Hardware stack levels required when called:    2
  5763 ;; This function calls:
  5764 ;;		___flpack
  5765 ;; This function is called by:
  5766 ;;		_format_double
  5767 ;;		_log
  5768 ;;		_exp
  5769 ;; This function uses a non-reentrant model
  5770 ;;
  5771                           
  5772                           	psect	text26
  5773  002970                     __ptext26:
  5774                           	opt stack 0
  5775  002970                     ___awtofl:
  5776                           	opt stack 24
  5777                           
  5778                           ;incstack = 0
  5779  002970  6A11               	clrf	___awtofl@sign,c
  5780  002972  AE0E               	btfss	___awtofl@c+1,7,c
  5781  002974  D005               	goto	l3861
  5782  002976  6C0D               	negf	___awtofl@c,c
  5783  002978  1E0E               	comf	___awtofl@c+1,f,c
  5784  00297A  B0D8               	btfsc	status,0,c
  5785  00297C  2A0E               	incf	___awtofl@c+1,f,c
  5786  00297E  2A11               	incf	___awtofl@sign,f,c
  5787  002980                     l3861:
  5788  002980  C00D  F003         	movff	___awtofl@c,___flpack@arg
  5789  002984  C00E  F004         	movff	___awtofl@c+1,___flpack@arg+1
  5790  002988  6A05               	clrf	___flpack@arg+2,c
  5791  00298A  6A06               	clrf	___flpack@arg+3,c
  5792  00298C  0E96               	movlw	150
  5793  00298E  6E07               	movwf	___flpack@exp,c
  5794  002990  C011  F008         	movff	___awtofl@sign,___flpack@sign
  5795  002994  EC3D  F010         	call	___flpack	;wreg free
  5796  002998  C003  F00D         	movff	?___flpack,?___awtofl
  5797  00299C  C004  F00E         	movff	?___flpack+1,?___awtofl+1
  5798  0029A0  C005  F00F         	movff	?___flpack+2,?___awtofl+2
  5799  0029A4  C006  F010         	movff	?___flpack+3,?___awtofl+3
  5800  0029A8  0012               	return		;funcret
  5801  0029AA                     __end_of___awtofl:
  5802                           	opt stack 0
  5803                           tosu	equ	0xFFF
  5804                           tosh	equ	0xFFE
  5805                           tosl	equ	0xFFD
  5806                           pclath	equ	0xFFA
  5807                           tblptru	equ	0xFF8
  5808                           tblptrh	equ	0xFF7
  5809                           tblptrl	equ	0xFF6
  5810                           tablat	equ	0xFF5
  5811                           prodh	equ	0xFF4
  5812                           prodl	equ	0xFF3
  5813                           intcon	equ	0xFF2
  5814                           intcon2	equ	0xFF1
  5815                           postinc0	equ	0xFEE
  5816                           wreg	equ	0xFE8
  5817                           postdec1	equ	0xFE5
  5818                           fsr1l	equ	0xFE1
  5819                           postinc2	equ	0xFDE
  5820                           postdec2	equ	0xFDD
  5821                           fsr2h	equ	0xFDA
  5822                           fsr2l	equ	0xFD9
  5823                           status	equ	0xFD8
  5824                           
  5825 ;; *************** function _lcd_init *****************
  5826 ;; Defined at:
  5827 ;;		line 503 in file "../../../lib/lcd44780.c"
  5828 ;; Parameters:    Size  Location     Type
  5829 ;;  fourbitmode     1    wreg     unsigned char 
  5830 ;; Auto vars:     Size  Location     Type
  5831 ;;  fourbitmode     1    2[COMRAM] unsigned char 
  5832 ;; Return value:  Size  Location     Type
  5833 ;;		None               void
  5834 ;; Registers used:
  5835 ;;		wreg, status,2
  5836 ;; Tracked objects:
  5837 ;;		On entry : 0/0
  5838 ;;		On exit  : F/0
  5839 ;;		Unchanged: 0/0
  5840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5841 ;;      Params:         0       0       0       0       0       0       0       0       0
  5842 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5843 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5844 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5845 ;;Total ram usage:        3 bytes
  5846 ;; Hardware stack levels used:    1
  5847 ;; Hardware stack levels required when called:    1
  5848 ;; This function calls:
  5849 ;;		Nothing
  5850 ;; This function is called by:
  5851 ;;		_main
  5852 ;; This function uses a non-reentrant model
  5853 ;;
  5854                           
  5855                           	psect	text27
  5856  002A4E                     __ptext27:
  5857                           	opt stack 0
  5858  002A4E                     _lcd_init:
  5859                           	opt stack 29
  5860                           
  5861                           ;incstack = 0
  5862                           ;lcd_init@fourbitmode stored from wreg
  5863  002A4E  6E03               	movwf	lcd_init@fourbitmode,c
  5864                           
  5865                           ;lcd44780.c: 505: LCD_ctrl = 0;
  5866  002A50  0100               	movlb	0	; () banked
  5867  002A52  6BE7               	clrf	_LCD_ctrl& (0+255),b
  5868                           
  5869                           ; BSR set to: 0
  5870                           ;lcd44780.c: 506: LCD_function = (fourbitmode ? 0x00 : 0x10);
  5871  002A54  5003               	movf	lcd_init@fourbitmode,w,c
  5872  002A56  E104               	bnz	l318
  5873                           
  5874                           ; BSR set to: 0
  5875  002A58  6A05               	clrf	_lcd_init$265+1,c
  5876  002A5A  0E10               	movlw	16
  5877  002A5C  6E04               	movwf	_lcd_init$265,c
  5878  002A5E  D002               	goto	l320
  5879  002A60                     l318:
  5880                           
  5881                           ; BSR set to: 0
  5882  002A60  6A04               	clrf	_lcd_init$265,c
  5883  002A62  6A05               	clrf	_lcd_init$265+1,c
  5884  002A64                     l320:
  5885                           
  5886                           ; BSR set to: 0
  5887  002A64  C004  F0E8         	movff	_lcd_init$265,_LCD_function
  5888                           
  5889                           ;lcd44780.c: 508: LCD_lines = 0;
  5890  002A68  6BE9               	clrf	_LCD_lines& (0+255),b
  5891                           
  5892                           ;lcd44780.c: 510: LCD_mode = 0;
  5893  002A6A  6BEA               	clrf	_LCD_mode& (0+255),b
  5894                           
  5895                           ;lcd44780.c: 512: TRISB2 = 0;
  5896  002A6C  9493               	bcf	3987,2,c	;volatile
  5897                           
  5898                           ;lcd44780.c: 513: RB2 = 0;
  5899  002A6E  9481               	bcf	3969,2,c	;volatile
  5900                           
  5901                           ;lcd44780.c: 518: TRISB3 = 0;
  5902  002A70  9693               	bcf	3987,3,c	;volatile
  5903                           
  5904                           ;lcd44780.c: 519: RB3 = 0;
  5905  002A72  9681               	bcf	3969,3,c	;volatile
  5906                           
  5907                           ;lcd44780.c: 521: TRISB4 = 0;
  5908  002A74  9893               	bcf	3987,4,c	;volatile
  5909                           
  5910                           ;lcd44780.c: 522: TRISB5 = 0;
  5911  002A76  9A93               	bcf	3987,5,c	;volatile
  5912                           
  5913                           ;lcd44780.c: 523: TRISB6 = 0;
  5914  002A78  9C93               	bcf	3987,6,c	;volatile
  5915                           
  5916                           ;lcd44780.c: 524: TRISB7 = 0;
  5917  002A7A  9E93               	bcf	3987,7,c	;volatile
  5918                           
  5919                           ; BSR set to: 0
  5920  002A7C  0012               	return		;funcret
  5921  002A7E                     __end_of_lcd_init:
  5922                           	opt stack 0
  5923                           tosu	equ	0xFFF
  5924                           tosh	equ	0xFFE
  5925                           tosl	equ	0xFFD
  5926                           pclath	equ	0xFFA
  5927                           tblptru	equ	0xFF8
  5928                           tblptrh	equ	0xFF7
  5929                           tblptrl	equ	0xFF6
  5930                           tablat	equ	0xFF5
  5931                           prodh	equ	0xFF4
  5932                           prodl	equ	0xFF3
  5933                           intcon	equ	0xFF2
  5934                           intcon2	equ	0xFF1
  5935                           postinc0	equ	0xFEE
  5936                           wreg	equ	0xFE8
  5937                           postdec1	equ	0xFE5
  5938                           fsr1l	equ	0xFE1
  5939                           postinc2	equ	0xFDE
  5940                           postdec2	equ	0xFDD
  5941                           fsr2h	equ	0xFDA
  5942                           fsr2l	equ	0xFD9
  5943                           status	equ	0xFD8
  5944                           
  5945 ;; *************** function _lcd_begin *****************
  5946 ;; Defined at:
  5947 ;;		line 430 in file "../../../lib/lcd44780.c"
  5948 ;; Parameters:    Size  Location     Type
  5949 ;;  lines           1    wreg     unsigned char 
  5950 ;;  dotsize         1    6[COMRAM] unsigned char 
  5951 ;; Auto vars:     Size  Location     Type
  5952 ;;  lines           1    8[COMRAM] unsigned char 
  5953 ;; Return value:  Size  Location     Type
  5954 ;;		None               void
  5955 ;; Registers used:
  5956 ;;		wreg, status,2, status,0, cstack
  5957 ;; Tracked objects:
  5958 ;;		On entry : F/0
  5959 ;;		On exit  : 0/0
  5960 ;;		Unchanged: 0/0
  5961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5962 ;;      Params:         1       0       0       0       0       0       0       0       0
  5963 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5964 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5965 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5966 ;;Total ram usage:        3 bytes
  5967 ;; Hardware stack levels used:    1
  5968 ;; Hardware stack levels required when called:    4
  5969 ;; This function calls:
  5970 ;;		_lcd_command
  5971 ;;		_lcd_write4bits
  5972 ;; This function is called by:
  5973 ;;		_main
  5974 ;; This function uses a non-reentrant model
  5975 ;;
  5976                           
  5977                           	psect	text28
  5978  001EC8                     __ptext28:
  5979                           	opt stack 0
  5980  001EC8                     _lcd_begin:
  5981                           	opt stack 26
  5982                           
  5983                           ; BSR set to: 0
  5984                           ;incstack = 0
  5985                           ;lcd_begin@lines stored from wreg
  5986  001EC8  6E09               	movwf	lcd_begin@lines,c
  5987                           
  5988                           ; BSR set to: 0
  5989                           ;lcd44780.c: 431: if(lines > 1)
  5990  001ECA  0E01               	movlw	1
  5991  001ECC  6409               	cpfsgt	lcd_begin@lines,c
  5992  001ECE  D001               	goto	l3185
  5993                           
  5994                           ; BSR set to: 0
  5995                           ;lcd44780.c: 432: LCD_function |= 0x08;
  5996  001ED0  87E8               	bsf	_LCD_function& (0+255),3,b
  5997  001ED2                     l3185:
  5998                           
  5999                           ; BSR set to: 0
  6000                           ;lcd44780.c: 435: LCD_lines = lines;
  6001  001ED2  C009  F0E9         	movff	lcd_begin@lines,_LCD_lines
  6002                           
  6003                           ; BSR set to: 0
  6004                           ;lcd44780.c: 439: if((dotsize != 0) && (lines == 1))
  6005  001ED6  5007               	movf	lcd_begin@dotsize,w,c
  6006  001ED8  E003               	bz	l3193
  6007                           
  6008                           ; BSR set to: 0
  6009  001EDA  0409               	decf	lcd_begin@lines,w,c
  6010  001EDC  B4D8               	btfsc	status,2,c
  6011                           
  6012                           ; BSR set to: 0
  6013                           ;lcd44780.c: 440: LCD_function |= 0x04;
  6014  001EDE  85E8               	bsf	_LCD_function& (0+255),2,b
  6015  001EE0                     l3193:
  6016                           
  6017                           ; BSR set to: 0
  6018                           ;lcd44780.c: 442: _delay((unsigned long)((15)*(20000000/4000.0)));
  6019  001EE0  0E62               	movlw	98
  6020  001EE2  6E08               	movwf	??_lcd_begin& (0+255),c
  6021  001EE4  0E66               	movlw	102
  6022  001EE6                     u3597:
  6023  001EE6  2EE8               	decfsz	wreg,f,c
  6024  001EE8  D7FE               	goto	u3597
  6025  001EEA  2E08               	decfsz	??_lcd_begin& (0+255),f,c
  6026  001EEC  D7FC               	goto	u3597
  6027                           
  6028                           ;lcd44780.c: 445: RB2 = 0;
  6029  001EEE  9481               	bcf	3969,2,c	;volatile
  6030                           
  6031                           ;lcd44780.c: 446: RB3 = 0;
  6032  001EF0  9681               	bcf	3969,3,c	;volatile
  6033                           
  6034                           ;lcd44780.c: 449: if(!(LCD_function & 0x10)) {
  6035  001EF2  0100               	movlb	0	; () banked
  6036  001EF4  B9E8               	btfsc	_LCD_function& (0+255),4,b
  6037  001EF6  D01B               	goto	l3211
  6038                           
  6039                           ; BSR set to: 0
  6040                           ;lcd44780.c: 453: lcd_write4bits(0x03);
  6041  001EF8  0E03               	movlw	3
  6042  001EFA  ECE5  F013         	call	_lcd_write4bits
  6043                           
  6044                           ;lcd44780.c: 454: _delay((unsigned long)((5)*(20000000/4000.0)));
  6045  001EFE  0E21               	movlw	33
  6046  001F00  6E08               	movwf	??_lcd_begin& (0+255),c
  6047  001F02  0E76               	movlw	118
  6048  001F04                     u3607:
  6049  001F04  2EE8               	decfsz	wreg,f,c
  6050  001F06  D7FE               	goto	u3607
  6051  001F08  2E08               	decfsz	??_lcd_begin& (0+255),f,c
  6052  001F0A  D7FC               	goto	u3607
  6053  001F0C  D000               	nop2	
  6054                           
  6055                           ;lcd44780.c: 456: lcd_write4bits(0x03);
  6056  001F0E  0E03               	movlw	3
  6057  001F10  ECE5  F013         	call	_lcd_write4bits
  6058                           
  6059                           ;lcd44780.c: 457: _delay((unsigned long)((150)*(20000000/4000000.0)));
  6060  001F14  0EFA               	movlw	250
  6061  001F16                     u3617:
  6062  001F16  2EE8               	decfsz	wreg,f,c
  6063  001F18  D7FE               	goto	u3617
  6064                           
  6065                           ;lcd44780.c: 459: lcd_write4bits(0x03);
  6066  001F1A  0E03               	movlw	3
  6067  001F1C  ECE5  F013         	call	_lcd_write4bits
  6068                           
  6069                           ;lcd44780.c: 460: _delay((unsigned long)((150)*(20000000/4000000.0)));
  6070  001F20  0EFA               	movlw	250
  6071  001F22                     u3627:
  6072  001F22  2EE8               	decfsz	wreg,f,c
  6073  001F24  D7FE               	goto	u3627
  6074                           
  6075                           ;lcd44780.c: 462: lcd_write4bits(0x02);
  6076  001F26  0E02               	movlw	2
  6077  001F28  ECE5  F013         	call	_lcd_write4bits
  6078                           
  6079                           ;lcd44780.c: 463: }
  6080  001F2C  D01E               	goto	l3219
  6081  001F2E                     l3211:
  6082                           
  6083                           ; BSR set to: 0
  6084                           ;lcd44780.c: 465: else {
  6085                           ;lcd44780.c: 469: lcd_command(0x20 | LCD_function);
  6086  001F2E  51E8               	movf	_LCD_function& (0+255),w,b
  6087  001F30  0920               	iorlw	32
  6088  001F32  EC00  F016         	call	_lcd_command
  6089                           
  6090                           ;lcd44780.c: 470: _delay((unsigned long)((5)*(20000000/4000.0)));
  6091  001F36  0E21               	movlw	33
  6092  001F38  6E08               	movwf	??_lcd_begin& (0+255),c
  6093  001F3A  0E76               	movlw	118
  6094  001F3C                     u3637:
  6095  001F3C  2EE8               	decfsz	wreg,f,c
  6096  001F3E  D7FE               	goto	u3637
  6097  001F40  2E08               	decfsz	??_lcd_begin& (0+255),f,c
  6098  001F42  D7FC               	goto	u3637
  6099  001F44  D000               	nop2	
  6100                           
  6101                           ;lcd44780.c: 473: lcd_command(0x20 | LCD_function);
  6102  001F46  0100               	movlb	0	; () banked
  6103  001F48  51E8               	movf	_LCD_function& (0+255),w,b
  6104  001F4A  0920               	iorlw	32
  6105  001F4C  EC00  F016         	call	_lcd_command
  6106                           
  6107                           ;lcd44780.c: 474: _delay((unsigned long)((5)*(20000000/4000.0)));
  6108  001F50  0E21               	movlw	33
  6109  001F52  6E08               	movwf	??_lcd_begin& (0+255),c
  6110  001F54  0E76               	movlw	118
  6111  001F56                     u3647:
  6112  001F56  2EE8               	decfsz	wreg,f,c
  6113  001F58  D7FE               	goto	u3647
  6114  001F5A  2E08               	decfsz	??_lcd_begin& (0+255),f,c
  6115  001F5C  D7FC               	goto	u3647
  6116  001F5E  D000               	nop2	
  6117                           
  6118                           ;lcd44780.c: 478: lcd_command(0x20 | LCD_function);
  6119  001F60  0100               	movlb	0	; () banked
  6120  001F62  51E8               	movf	_LCD_function& (0+255),w,b
  6121  001F64  0920               	iorlw	32
  6122  001F66  EC00  F016         	call	_lcd_command
  6123  001F6A                     l3219:
  6124                           
  6125                           ;lcd44780.c: 479: }
  6126                           ;lcd44780.c: 482: lcd_command(0x20 | LCD_function);
  6127  001F6A  0100               	movlb	0	; () banked
  6128  001F6C  51E8               	movf	_LCD_function& (0+255),w,b
  6129  001F6E  0920               	iorlw	32
  6130  001F70  EC00  F016         	call	_lcd_command
  6131                           
  6132                           ;lcd44780.c: 485: LCD_ctrl = 0x04 | 0x00 | 0x00;
  6133  001F74  0E04               	movlw	4
  6134  001F76  0100               	movlb	0	; () banked
  6135  001F78  6FE7               	movwf	_LCD_ctrl& (0+255),b
  6136                           
  6137                           ; BSR set to: 0
  6138                           ;lcd44780.c: 486: lcd_command(0x08 | LCD_ctrl);
  6139  001F7A  51E7               	movf	_LCD_ctrl& (0+255),w,b
  6140  001F7C  0908               	iorlw	8
  6141  001F7E  EC00  F016         	call	_lcd_command
  6142                           
  6143                           ;lcd44780.c: 489: lcd_command(0x01);
  6144  001F82  0E01               	movlw	1
  6145  001F84  EC00  F016         	call	_lcd_command
  6146                           
  6147                           ;lcd44780.c: 490: _delay((unsigned long)((2)*(20000000/4000.0)));
  6148  001F88  0E0D               	movlw	13
  6149  001F8A  6E08               	movwf	??_lcd_begin& (0+255),c
  6150  001F8C  0EFC               	movlw	252
  6151  001F8E                     u3657:
  6152  001F8E  2EE8               	decfsz	wreg,f,c
  6153  001F90  D7FE               	goto	u3657
  6154  001F92  2E08               	decfsz	??_lcd_begin& (0+255),f,c
  6155  001F94  D7FC               	goto	u3657
  6156                           
  6157                           ;lcd44780.c: 493: LCD_mode = 0x02 | 0x00;
  6158  001F96  0E02               	movlw	2
  6159  001F98  0100               	movlb	0	; () banked
  6160  001F9A  6FEA               	movwf	_LCD_mode& (0+255),b
  6161                           
  6162                           ; BSR set to: 0
  6163                           ;lcd44780.c: 495: lcd_command(0x04 | LCD_mode);
  6164  001F9C  51EA               	movf	_LCD_mode& (0+255),w,b
  6165  001F9E  0904               	iorlw	4
  6166  001FA0  EC00  F016         	call	_lcd_command
  6167  001FA4  0012               	return		;funcret
  6168  001FA6                     __end_of_lcd_begin:
  6169                           	opt stack 0
  6170                           tosu	equ	0xFFF
  6171                           tosh	equ	0xFFE
  6172                           tosl	equ	0xFFD
  6173                           pclath	equ	0xFFA
  6174                           tblptru	equ	0xFF8
  6175                           tblptrh	equ	0xFF7
  6176                           tblptrl	equ	0xFF6
  6177                           tablat	equ	0xFF5
  6178                           prodh	equ	0xFF4
  6179                           prodl	equ	0xFF3
  6180                           intcon	equ	0xFF2
  6181                           intcon2	equ	0xFF1
  6182                           postinc0	equ	0xFEE
  6183                           wreg	equ	0xFE8
  6184                           postdec1	equ	0xFE5
  6185                           fsr1l	equ	0xFE1
  6186                           postinc2	equ	0xFDE
  6187                           postdec2	equ	0xFDD
  6188                           fsr2h	equ	0xFDA
  6189                           fsr2l	equ	0xFD9
  6190                           status	equ	0xFD8
  6191                           
  6192 ;; *************** function _indicator *****************
  6193 ;; Defined at:
  6194 ;;		line 469 in file "../../../src/print.c"
  6195 ;; Parameters:    Size  Location     Type
  6196 ;;  indicate        1    wreg     unsigned char 
  6197 ;; Auto vars:     Size  Location     Type
  6198 ;;  indicate        1   12[COMRAM] unsigned char 
  6199 ;; Return value:  Size  Location     Type
  6200 ;;		None               void
  6201 ;; Registers used:
  6202 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6203 ;; Tracked objects:
  6204 ;;		On entry : 0/0
  6205 ;;		On exit  : 0/0
  6206 ;;		Unchanged: 0/0
  6207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6208 ;;      Params:         0       0       0       0       0       0       0       0       0
  6209 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6210 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6211 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6212 ;;Total ram usage:        1 bytes
  6213 ;; Hardware stack levels used:    1
  6214 ;; Hardware stack levels required when called:    5
  6215 ;; This function calls:
  6216 ;;		_lcd_gotoxy
  6217 ;;		_lcd_puts
  6218 ;; This function is called by:
  6219 ;;		_main
  6220 ;; This function uses a non-reentrant model
  6221 ;;
  6222                           
  6223                           	psect	text29
  6224  002B90                     __ptext29:
  6225                           	opt stack 0
  6226  002B90                     _indicator:
  6227                           	opt stack 25
  6228                           
  6229                           ;incstack = 0
  6230                           ;indicator@indicate stored from wreg
  6231  002B90  6E0D               	movwf	indicator@indicate,c
  6232                           
  6233                           ;print.c: 483: lcd_gotoxy(0, 1);
  6234  002B92  0E01               	movlw	1
  6235  002B94  6E07               	movwf	lcd_gotoxy@row,c
  6236  002B96  0E00               	movlw	0
  6237  002B98  ECD5  F014         	call	_lcd_gotoxy
  6238                           
  6239                           ;print.c: 484: if(indicate) {
  6240  002B9C  500D               	movf	indicator@indicate,w,c
  6241  002B9E  E004               	bz	l3143
  6242                           
  6243                           ;print.c: 485: lcd_puts("-*-");
  6244  002BA0  0EC5               	movlw	STR_11& (0+255)
  6245  002BA2  ECF1  F014         	call	_lcd_puts
  6246                           
  6247                           ;print.c: 486: } else {
  6248  002BA6  D003               	goto	l34
  6249  002BA8                     l3143:
  6250                           
  6251                           ;print.c: 487: lcd_puts("   ");
  6252  002BA8  0E94               	movlw	(STR_15+3)& (0+255)
  6253  002BAA  ECF1  F014         	call	_lcd_puts
  6254  002BAE                     l34:
  6255  002BAE  0012               	return		;funcret
  6256  002BB0                     __end_of_indicator:
  6257                           	opt stack 0
  6258                           tosu	equ	0xFFF
  6259                           tosh	equ	0xFFE
  6260                           tosl	equ	0xFFD
  6261                           pclath	equ	0xFFA
  6262                           tblptru	equ	0xFF8
  6263                           tblptrh	equ	0xFF7
  6264                           tblptrl	equ	0xFF6
  6265                           tablat	equ	0xFF5
  6266                           prodh	equ	0xFF4
  6267                           prodl	equ	0xFF3
  6268                           intcon	equ	0xFF2
  6269                           intcon2	equ	0xFF1
  6270                           postinc0	equ	0xFEE
  6271                           wreg	equ	0xFE8
  6272                           postdec1	equ	0xFE5
  6273                           fsr1l	equ	0xFE1
  6274                           postinc2	equ	0xFDE
  6275                           postdec2	equ	0xFDD
  6276                           fsr2h	equ	0xFDA
  6277                           fsr2l	equ	0xFD9
  6278                           status	equ	0xFD8
  6279                           
  6280 ;; *************** function _lcd_puts *****************
  6281 ;; Defined at:
  6282 ;;		line 182 in file "../../../lib/lcd44780.c"
  6283 ;; Parameters:    Size  Location     Type
  6284 ;;  string          1    wreg     PTR const unsigned char 
  6285 ;;		 -> STR_18(5), STR_17(6), STR_16(7), STR_15(7), 
  6286 ;;		 -> STR_13(10), STR_12(4), STR_11(4), STR_10(6), 
  6287 ;; Auto vars:     Size  Location     Type
  6288 ;;  string          1    8[COMRAM] PTR const unsigned char 
  6289 ;;		 -> STR_18(5), STR_17(6), STR_16(7), STR_15(7), 
  6290 ;;		 -> STR_13(10), STR_12(4), STR_11(4), STR_10(6), 
  6291 ;;  i               1    7[COMRAM] unsigned char 
  6292 ;; Return value:  Size  Location     Type
  6293 ;;		None               void
  6294 ;; Registers used:
  6295 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6296 ;; Tracked objects:
  6297 ;;		On entry : 0/0
  6298 ;;		On exit  : 0/0
  6299 ;;		Unchanged: 0/0
  6300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6301 ;;      Params:         0       0       0       0       0       0       0       0       0
  6302 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6303 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6304 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6305 ;;Total ram usage:        3 bytes
  6306 ;; Hardware stack levels used:    1
  6307 ;; Hardware stack levels required when called:    4
  6308 ;; This function calls:
  6309 ;;		_lcd_putch
  6310 ;; This function is called by:
  6311 ;;		_print_reading
  6312 ;;		_indicator
  6313 ;;		_main
  6314 ;; This function uses a non-reentrant model
  6315 ;;
  6316                           
  6317                           	psect	text30
  6318  0029E2                     __ptext30:
  6319                           	opt stack 0
  6320  0029E2                     _lcd_puts:
  6321                           	opt stack 24
  6322                           
  6323                           ;incstack = 0
  6324                           ;lcd_puts@string stored from wreg
  6325  0029E2  6E09               	movwf	lcd_puts@string,c
  6326                           
  6327                           ;lcd44780.c: 183: unsigned char i;
  6328                           ;lcd44780.c: 184: for(i = 0; string[i]; i++) lcd_putch(string[i]);
  6329  0029E4  6A08               	clrf	lcd_puts@i,c
  6330  0029E6  D00C               	goto	l2929
  6331  0029E8                     l2925:
  6332  0029E8  5009               	movf	lcd_puts@string,w,c
  6333  0029EA  2408               	addwf	lcd_puts@i,w,c
  6334  0029EC  6E07               	movwf	??_lcd_puts& (0+255),c
  6335  0029EE  C007  FFF6         	movff	??_lcd_puts,tblptrl
  6336  0029F2                     	if	1	;There is more than 1 active tblptr byte
  6337  0029F2  0E08               	movlw	high __smallconst
  6338  0029F4  6EF7               	movwf	tblptrh,c
  6339  0029F6                     	endif
  6340  0029F6                     	if	0	;tblptru may be non-zero
  6341  0029F6                     	endif
  6342  0029F6                     	if	0	;tblptru may be non-zero
  6343  0029F6                     	endif
  6344  0029F6  0008               	tblrd		*
  6345  0029F8  50F5               	movf	tablat,w,c
  6346  0029FA  ECF9  F015         	call	_lcd_putch
  6347  0029FE  2A08               	incf	lcd_puts@i,f,c
  6348  002A00                     l2929:
  6349  002A00  5009               	movf	lcd_puts@string,w,c
  6350  002A02  2408               	addwf	lcd_puts@i,w,c
  6351  002A04  6E07               	movwf	??_lcd_puts& (0+255),c
  6352  002A06  C007  FFF6         	movff	??_lcd_puts,tblptrl
  6353  002A0A                     	if	1	;There is more than 1 active tblptr byte
  6354  002A0A  0E08               	movlw	high __smallconst
  6355  002A0C  6EF7               	movwf	tblptrh,c
  6356  002A0E                     	endif
  6357  002A0E                     	if	0	;tblptru may be non-zero
  6358  002A0E                     	endif
  6359  002A0E                     	if	0	;tblptru may be non-zero
  6360  002A0E                     	endif
  6361  002A0E  0008               	tblrd		*
  6362  002A10  50F5               	movf	tablat,w,c
  6363  002A12  B4D8               	btfsc	status,2,c
  6364  002A14  0012               	return		;funcret
  6365  002A16  D7E8               	goto	l2925
  6366  002A18                     __end_of_lcd_puts:
  6367                           	opt stack 0
  6368                           tosu	equ	0xFFF
  6369                           tosh	equ	0xFFE
  6370                           tosl	equ	0xFFD
  6371                           pclath	equ	0xFFA
  6372                           tblptru	equ	0xFF8
  6373                           tblptrh	equ	0xFF7
  6374                           tblptrl	equ	0xFF6
  6375                           tablat	equ	0xFF5
  6376                           prodh	equ	0xFF4
  6377                           prodl	equ	0xFF3
  6378                           intcon	equ	0xFF2
  6379                           intcon2	equ	0xFF1
  6380                           postinc0	equ	0xFEE
  6381                           wreg	equ	0xFE8
  6382                           postdec1	equ	0xFE5
  6383                           fsr1l	equ	0xFE1
  6384                           postinc2	equ	0xFDE
  6385                           postdec2	equ	0xFDD
  6386                           fsr2h	equ	0xFDA
  6387                           fsr2l	equ	0xFD9
  6388                           status	equ	0xFD8
  6389                           
  6390 ;; *************** function _calibrate *****************
  6391 ;; Defined at:
  6392 ;;		line 346 in file "../../../src/LC-meter.c"
  6393 ;; Parameters:    Size  Location     Type
  6394 ;;		None
  6395 ;; Auto vars:     Size  Location     Type
  6396 ;;  i               1   64[COMRAM] unsigned char 
  6397 ;; Return value:  Size  Location     Type
  6398 ;;		None               void
  6399 ;; Registers used:
  6400 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6401 ;; Tracked objects:
  6402 ;;		On entry : F/0
  6403 ;;		On exit  : 0/0
  6404 ;;		Unchanged: 0/0
  6405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6406 ;;      Params:         0       0       0       0       0       0       0       0       0
  6407 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6408 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6409 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6410 ;;Total ram usage:        1 bytes
  6411 ;; Hardware stack levels used:    1
  6412 ;; Hardware stack levels required when called:    7
  6413 ;; This function calls:
  6414 ;;		___lwtofl
  6415 ;;		_delay10ms
  6416 ;;		_lcd_clear
  6417 ;;		_lcd_gotoxy
  6418 ;;		_lcd_putch
  6419 ;;		_measure_freq
  6420 ;;		_put_str
  6421 ;;		_ser_puts
  6422 ;; This function is called by:
  6423 ;;		_main
  6424 ;; This function uses a non-reentrant model
  6425 ;;
  6426                           
  6427                           	psect	text31
  6428  001DDC                     __ptext31:
  6429                           	opt stack 0
  6430  001DDC                     _calibrate:
  6431                           	opt stack 23
  6432                           
  6433                           ; BSR set to: 0
  6434                           ;LC-meter.c: 347: unsigned char i;
  6435                           ;LC-meter.c: 350: lcd_clear();
  6436                           
  6437                           ;incstack = 0
  6438  001DDC  ECE6  F015         	call	_lcd_clear	;wreg free
  6439                           
  6440                           ;LC-meter.c: 352: lcd_gotoxy(0, 0);
  6441  001DE0  0E00               	movlw	0
  6442  001DE2  6A07               	clrf	lcd_gotoxy@row,c
  6443  001DE4  ECD5  F014         	call	_lcd_gotoxy
  6444                           
  6445                           ;LC-meter.c: 353: put_str("Calibrating");
  6446  001DE8  0E69               	movlw	STR_21& (0+255)
  6447  001DEA  EC0C  F015         	call	_put_str
  6448                           
  6449                           ;LC-meter.c: 355: lcd_gotoxy(0, 1);
  6450  001DEE  0E01               	movlw	1
  6451  001DF0  6E07               	movwf	lcd_gotoxy@row,c
  6452  001DF2  0E00               	movlw	0
  6453  001DF4  ECD5  F014         	call	_lcd_gotoxy
  6454                           
  6455                           ;LC-meter.c: 356: ser_puts("\r\n");
  6456  001DF8  0E9B               	movlw	(STR_14+3)& (0+255)
  6457  001DFA  EC80  F015         	call	_ser_puts
  6458                           
  6459                           ;LC-meter.c: 357: put_str("please wait...");
  6460  001DFE  0E4D               	movlw	STR_23& (0+255)
  6461  001E00  EC0C  F015         	call	_put_str
  6462                           
  6463                           ;LC-meter.c: 360: PORTC &= ~(1 << 5);
  6464  001E04  9A82               	bcf	3970,5,c	;volatile
  6465                           
  6466                           ;LC-meter.c: 362: F1 = (double)measure_freq();
  6467  001E06  EC01  F012         	call	_measure_freq	;wreg free
  6468  001E0A  C035  F03D         	movff	?_measure_freq,___lwtofl@c
  6469  001E0E  C036  F03E         	movff	?_measure_freq+1,___lwtofl@c+1
  6470  001E12  EC6B  F015         	call	___lwtofl	;wreg free
  6471  001E16  C03D  F0EE         	movff	?___lwtofl,_F1
  6472  001E1A  C03E  F0EF         	movff	?___lwtofl+1,_F1+1
  6473  001E1E  C03F  F0F0         	movff	?___lwtofl+2,_F1+2
  6474  001E22  C040  F0F1         	movff	?___lwtofl+3,_F1+3
  6475                           
  6476                           ;LC-meter.c: 363: delay10ms(50);
  6477  001E26  6A04               	clrf	delay10ms@period_10ms+1,c
  6478  001E28  0E32               	movlw	50
  6479  001E2A  6E03               	movwf	delay10ms@period_10ms,c
  6480  001E2C  EC6C  F013         	call	_delay10ms	;wreg free
  6481                           
  6482                           ; BSR set to: 0
  6483                           ;LC-meter.c: 365: F1 = (double)measure_freq();
  6484  001E30  EC01  F012         	call	_measure_freq	;wreg free
  6485  001E34  C035  F03D         	movff	?_measure_freq,___lwtofl@c
  6486  001E38  C036  F03E         	movff	?_measure_freq+1,___lwtofl@c+1
  6487  001E3C  EC6B  F015         	call	___lwtofl	;wreg free
  6488  001E40  C03D  F0EE         	movff	?___lwtofl,_F1
  6489  001E44  C03E  F0EF         	movff	?___lwtofl+1,_F1+1
  6490  001E48  C03F  F0F0         	movff	?___lwtofl+2,_F1+2
  6491  001E4C  C040  F0F1         	movff	?___lwtofl+3,_F1+3
  6492                           
  6493                           ;LC-meter.c: 366: PORTC |= (1 << 5);
  6494  001E50  8A82               	bsf	3970,5,c	;volatile
  6495                           
  6496                           ;LC-meter.c: 368: F2 = (double)measure_freq();
  6497  001E52  EC01  F012         	call	_measure_freq	;wreg free
  6498  001E56  C035  F03D         	movff	?_measure_freq,___lwtofl@c
  6499  001E5A  C036  F03E         	movff	?_measure_freq+1,___lwtofl@c+1
  6500  001E5E  EC6B  F015         	call	___lwtofl	;wreg free
  6501  001E62  C03D  F0D1         	movff	?___lwtofl,_F2
  6502  001E66  C03E  F0D2         	movff	?___lwtofl+1,_F2+1
  6503  001E6A  C03F  F0D3         	movff	?___lwtofl+2,_F2+2
  6504  001E6E  C040  F0D4         	movff	?___lwtofl+3,_F2+3
  6505                           
  6506                           ;LC-meter.c: 369: delay10ms(50);
  6507  001E72  6A04               	clrf	delay10ms@period_10ms+1,c
  6508  001E74  0E32               	movlw	50
  6509  001E76  6E03               	movwf	delay10ms@period_10ms,c
  6510  001E78  EC6C  F013         	call	_delay10ms	;wreg free
  6511                           
  6512                           ; BSR set to: 0
  6513                           ;LC-meter.c: 371: F2 = (double)measure_freq();
  6514  001E7C  EC01  F012         	call	_measure_freq	;wreg free
  6515  001E80  C035  F03D         	movff	?_measure_freq,___lwtofl@c
  6516  001E84  C036  F03E         	movff	?_measure_freq+1,___lwtofl@c+1
  6517  001E88  EC6B  F015         	call	___lwtofl	;wreg free
  6518  001E8C  C03D  F0D1         	movff	?___lwtofl,_F2
  6519  001E90  C03E  F0D2         	movff	?___lwtofl+1,_F2+1
  6520  001E94  C03F  F0D3         	movff	?___lwtofl+2,_F2+2
  6521  001E98  C040  F0D4         	movff	?___lwtofl+3,_F2+3
  6522                           
  6523                           ;LC-meter.c: 372: PORTC &= ~(1 << 5);
  6524  001E9C  9A82               	bcf	3970,5,c	;volatile
  6525                           
  6526                           ;LC-meter.c: 376: lcd_gotoxy(11, 0);
  6527  001E9E  6A07               	clrf	lcd_gotoxy@row,c
  6528  001EA0  0E0B               	movlw	11
  6529  001EA2  ECD5  F014         	call	_lcd_gotoxy
  6530                           
  6531                           ;LC-meter.c: 378: for(i = 0; i < 6; i++) {
  6532  001EA6  6A41               	clrf	calibrate@i,c
  6533  001EA8                     l4039:
  6534                           
  6535                           ;LC-meter.c: 379: lcd_putch('=');
  6536  001EA8  0E3D               	movlw	61
  6537  001EAA  ECF9  F015         	call	_lcd_putch
  6538                           
  6539                           ;LC-meter.c: 381: delay10ms(28);
  6540  001EAE  6A04               	clrf	delay10ms@period_10ms+1,c
  6541  001EB0  0E1C               	movlw	28
  6542  001EB2  6E03               	movwf	delay10ms@period_10ms,c
  6543  001EB4  EC6C  F013         	call	_delay10ms	;wreg free
  6544                           
  6545                           ; BSR set to: 0
  6546  001EB8  2A41               	incf	calibrate@i,f,c
  6547                           
  6548                           ; BSR set to: 0
  6549  001EBA  0E05               	movlw	5
  6550  001EBC  6441               	cpfsgt	calibrate@i,c
  6551  001EBE  D7F4               	goto	l4039
  6552                           
  6553                           ; BSR set to: 0
  6554                           ;LC-meter.c: 382: }
  6555                           ;LC-meter.c: 384: ser_puts("\r\n");
  6556  001EC0  0E9B               	movlw	(STR_14+3)& (0+255)
  6557  001EC2  EC80  F015         	call	_ser_puts
  6558  001EC6  0012               	return		;funcret
  6559  001EC8                     __end_of_calibrate:
  6560                           	opt stack 0
  6561                           tosu	equ	0xFFF
  6562                           tosh	equ	0xFFE
  6563                           tosl	equ	0xFFD
  6564                           pclath	equ	0xFFA
  6565                           tblptru	equ	0xFF8
  6566                           tblptrh	equ	0xFF7
  6567                           tblptrl	equ	0xFF6
  6568                           tablat	equ	0xFF5
  6569                           prodh	equ	0xFF4
  6570                           prodl	equ	0xFF3
  6571                           intcon	equ	0xFF2
  6572                           intcon2	equ	0xFF1
  6573                           postinc0	equ	0xFEE
  6574                           wreg	equ	0xFE8
  6575                           postdec1	equ	0xFE5
  6576                           fsr1l	equ	0xFE1
  6577                           postinc2	equ	0xFDE
  6578                           postdec2	equ	0xFDD
  6579                           fsr2h	equ	0xFDA
  6580                           fsr2l	equ	0xFD9
  6581                           status	equ	0xFD8
  6582                           
  6583 ;; *************** function _ser_puts *****************
  6584 ;; Defined at:
  6585 ;;		line 92 in file "../../../lib/ser.c"
  6586 ;; Parameters:    Size  Location     Type
  6587 ;;  s               1    wreg     PTR const unsigned char 
  6588 ;;		 -> STR_33(3), STR_32(5), STR_31(3), STR_30(8), 
  6589 ;;		 -> STR_29(6), STR_28(6), STR_27(6), STR_26(5), 
  6590 ;;		 -> STR_24(3), STR_22(3), STR_19(3), STR_14(6), 
  6591 ;;		 -> STR_9(3), 
  6592 ;; Auto vars:     Size  Location     Type
  6593 ;;  s               1    3[COMRAM] PTR const unsigned char 
  6594 ;;		 -> STR_33(3), STR_32(5), STR_31(3), STR_30(8), 
  6595 ;;		 -> STR_29(6), STR_28(6), STR_27(6), STR_26(5), 
  6596 ;;		 -> STR_24(3), STR_22(3), STR_19(3), STR_14(6), 
  6597 ;;		 -> STR_9(3), 
  6598 ;; Return value:  Size  Location     Type
  6599 ;;		None               void
  6600 ;; Registers used:
  6601 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6602 ;; Tracked objects:
  6603 ;;		On entry : 0/0
  6604 ;;		On exit  : 0/0
  6605 ;;		Unchanged: 0/0
  6606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6607 ;;      Params:         0       0       0       0       0       0       0       0       0
  6608 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6609 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6610 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6611 ;;Total ram usage:        1 bytes
  6612 ;; Hardware stack levels used:    1
  6613 ;; Hardware stack levels required when called:    2
  6614 ;; This function calls:
  6615 ;;		_ser_putch
  6616 ;; This function is called by:
  6617 ;;		_print_unit
  6618 ;;		_main
  6619 ;;		_calibrate
  6620 ;;		_measure_capacitance
  6621 ;; This function uses a non-reentrant model
  6622 ;;
  6623                           
  6624                           	psect	text32
  6625  002B00                     __ptext32:
  6626                           	opt stack 0
  6627  002B00                     _ser_puts:
  6628                           	opt stack 28
  6629                           
  6630                           ;incstack = 0
  6631                           ;ser_puts@s stored from wreg
  6632  002B00  6E04               	movwf	ser_puts@s,c
  6633                           
  6634                           ;ser.c: 93: while(*s) ser_putch(*s++);
  6635  002B02  D009               	goto	l2921
  6636  002B04                     l2917:
  6637  002B04  C004  FFF6         	movff	ser_puts@s,tblptrl
  6638  002B08                     	if	1	;There is more than 1 active tblptr byte
  6639  002B08  0E08               	movlw	high __smallconst
  6640  002B0A  6EF7               	movwf	tblptrh,c
  6641  002B0C                     	endif
  6642  002B0C                     	if	0	;tblptru may be non-zero
  6643  002B0C                     	endif
  6644  002B0C                     	if	0	;tblptru may be non-zero
  6645  002B0C                     	endif
  6646  002B0C  0008               	tblrd		*
  6647  002B0E  50F5               	movf	tablat,w,c
  6648  002B10  ECA6  F015         	call	_ser_putch
  6649  002B14  2A04               	incf	ser_puts@s,f,c
  6650  002B16                     l2921:
  6651  002B16  C004  FFF6         	movff	ser_puts@s,tblptrl
  6652  002B1A                     	if	1	;There is more than 1 active tblptr byte
  6653  002B1A  0E08               	movlw	high __smallconst
  6654  002B1C  6EF7               	movwf	tblptrh,c
  6655  002B1E                     	endif
  6656  002B1E                     	if	0	;tblptru may be non-zero
  6657  002B1E                     	endif
  6658  002B1E                     	if	0	;tblptru may be non-zero
  6659  002B1E                     	endif
  6660  002B1E  0008               	tblrd		*
  6661  002B20  50F5               	movf	tablat,w,c
  6662  002B22  B4D8               	btfsc	status,2,c
  6663  002B24  0012               	return		;funcret
  6664  002B26  D7EE               	goto	l2917
  6665  002B28                     __end_of_ser_puts:
  6666                           	opt stack 0
  6667                           tosu	equ	0xFFF
  6668                           tosh	equ	0xFFE
  6669                           tosl	equ	0xFFD
  6670                           pclath	equ	0xFFA
  6671                           tblptru	equ	0xFF8
  6672                           tblptrh	equ	0xFF7
  6673                           tblptrl	equ	0xFF6
  6674                           tablat	equ	0xFF5
  6675                           prodh	equ	0xFF4
  6676                           prodl	equ	0xFF3
  6677                           intcon	equ	0xFF2
  6678                           intcon2	equ	0xFF1
  6679                           postinc0	equ	0xFEE
  6680                           wreg	equ	0xFE8
  6681                           postdec1	equ	0xFE5
  6682                           fsr1l	equ	0xFE1
  6683                           postinc2	equ	0xFDE
  6684                           postdec2	equ	0xFDD
  6685                           fsr2h	equ	0xFDA
  6686                           fsr2l	equ	0xFD9
  6687                           status	equ	0xFD8
  6688                           
  6689 ;; *************** function _measure_freq *****************
  6690 ;; Defined at:
  6691 ;;		line 299 in file "../../../src/LC-meter.c"
  6692 ;; Parameters:    Size  Location     Type
  6693 ;;		None
  6694 ;; Auto vars:     Size  Location     Type
  6695 ;;  i               1   57[COMRAM] unsigned char 
  6696 ;;  count           2   58[COMRAM] unsigned short 
  6697 ;;  prev            1   56[COMRAM] unsigned char 
  6698 ;; Return value:  Size  Location     Type
  6699 ;;                  2   52[COMRAM] unsigned short 
  6700 ;; Registers used:
  6701 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, cstack
  6702 ;; Tracked objects:
  6703 ;;		On entry : 0/0
  6704 ;;		On exit  : 0/0
  6705 ;;		Unchanged: 0/0
  6706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6707 ;;      Params:         2       0       0       0       0       0       0       0       0
  6708 ;;      Locals:         4       0       0       0       0       0       0       0       0
  6709 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6710 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6711 ;;Total ram usage:        8 bytes
  6712 ;; Hardware stack levels used:    1
  6713 ;; Hardware stack levels required when called:    6
  6714 ;; This function calls:
  6715 ;;		_format_number
  6716 ;;		_lcd_gotoxy
  6717 ;;		_put_str
  6718 ;; This function is called by:
  6719 ;;		_calibrate
  6720 ;;		_measure_capacitance
  6721 ;;		_measure_inductance
  6722 ;; This function uses a non-reentrant model
  6723 ;;
  6724                           
  6725                           	psect	text33
  6726  002402                     __ptext33:
  6727                           	opt stack 0
  6728  002402                     _measure_freq:
  6729                           	opt stack 23
  6730                           
  6731                           ;LC-meter.c: 300: unsigned char prev;
  6732                           ;LC-meter.c: 301: unsigned short int count;
  6733                           ;LC-meter.c: 303: TMR0IF = 0;
  6734                           
  6735                           ;incstack = 0
  6736  002402  94F2               	bcf	intcon,2,c	;volatile
  6737                           
  6738                           ;LC-meter.c: 305: TRISA &= ~0b00010000;
  6739  002404  9892               	bcf	3986,4,c	;volatile
  6740                           
  6741                           ;LC-meter.c: 308: _delay((unsigned long)((20)*(20000000/4000.0)));
  6742  002406  0E82               	movlw	130
  6743  002408  6E37               	movwf	??_measure_freq& (0+255),c
  6744  00240A  0EDE               	movlw	222
  6745  00240C                     u3667:
  6746  00240C  2EE8               	decfsz	wreg,f,c
  6747  00240E  D7FE               	goto	u3667
  6748  002410  2E37               	decfsz	??_measure_freq& (0+255),f,c
  6749  002412  D7FC               	goto	u3667
  6750                           
  6751                           ;LC-meter.c: 310: TMR0 = 0x00;
  6752  002414  6AD6               	clrf	4054,c	;volatile
  6753  002416  6AD7               	clrf	4055,c	;volatile
  6754                           
  6755                           ;LC-meter.c: 312: for(char i = 0; i < 10; i++) _delay((unsigned long)((10)*(20000000/400
      +                          0.0)));
  6756  002418  6A3A               	clrf	measure_freq@i,c
  6757  00241A                     l3095:
  6758  00241A  0E41               	movlw	65
  6759  00241C  6E37               	movwf	??_measure_freq& (0+255),c
  6760  00241E  0EEE               	movlw	238
  6761  002420                     u3677:
  6762  002420  2EE8               	decfsz	wreg,f,c
  6763  002422  D7FE               	goto	u3677
  6764  002424  2E37               	decfsz	??_measure_freq& (0+255),f,c
  6765  002426  D7FC               	goto	u3677
  6766  002428  D000               	nop2	
  6767  00242A  2A3A               	incf	measure_freq@i,f,c
  6768  00242C  0E09               	movlw	9
  6769  00242E  643A               	cpfsgt	measure_freq@i,c
  6770  002430  D7F4               	goto	l3095
  6771                           
  6772                           ;LC-meter.c: 314: TRISA |= 0b00010000;
  6773  002432  8892               	bsf	3986,4,c	;volatile
  6774                           
  6775                           ;LC-meter.c: 316: prev = TMR0;
  6776  002434  CFD6 F039          	movff	4054,measure_freq@prev	;volatile
  6777                           
  6778                           ;LC-meter.c: 317: count = 0;
  6779  002438  6A3B               	clrf	measure_freq@count,c
  6780  00243A  6A3C               	clrf	measure_freq@count+1,c
  6781  00243C                     l3105:
  6782                           
  6783                           ;LC-meter.c: 321: T0SE = 1;
  6784  00243C  88D5               	bsf	4053,4,c	;volatile
  6785                           
  6786                           ;LC-meter.c: 322: __nop();
  6787  00243E  F000               	nop	
  6788                           
  6789                           ;LC-meter.c: 323: __nop();
  6790  002440  F000               	nop	
  6791                           
  6792                           ;LC-meter.c: 325: T0SE = 0;
  6793  002442  98D5               	bcf	4053,4,c	;volatile
  6794                           
  6795                           ;LC-meter.c: 326: __nop();
  6796  002444  F000               	nop	
  6797                           
  6798                           ;LC-meter.c: 327: __nop();
  6799  002446  F000               	nop	
  6800                           
  6801                           ;LC-meter.c: 328: count++;
  6802  002448  4A3B               	infsnz	measure_freq@count,f,c
  6803  00244A  2A3C               	incf	measure_freq@count+1,f,c
  6804                           
  6805                           ;LC-meter.c: 329: } while(prev == TMR0 && count <= 255);
  6806  00244C  5039               	movf	measure_freq@prev,w,c
  6807  00244E  18D6               	xorwf	4054,w,c	;volatile
  6808  002450  10D7               	iorwf	4055,w,c	;volatile
  6809  002452  E102               	bnz	l3121
  6810  002454  043C               	decf	measure_freq@count+1,w,c
  6811  002456  E3F2               	bnc	l3105
  6812  002458                     l3121:
  6813                           
  6814                           ;LC-meter.c: 332: count = ((prev << 8) + (256 - count));
  6815  002458  5039               	movf	measure_freq@prev,w,c
  6816  00245A  6E38               	movwf	(??_measure_freq+1)& (0+255),c
  6817  00245C  6A37               	clrf	??_measure_freq& (0+255),c
  6818  00245E  503B               	movf	measure_freq@count,w,c
  6819  002460  5E37               	subwf	??_measure_freq,f,c
  6820  002462  503C               	movf	measure_freq@count+1,w,c
  6821  002464  5A38               	subwfb	??_measure_freq+1,f,c
  6822  002466  0E00               	movlw	0
  6823  002468  2437               	addwf	??_measure_freq,w,c
  6824  00246A  6E3B               	movwf	measure_freq@count,c
  6825  00246C  0E01               	movlw	1
  6826  00246E  2038               	addwfc	??_measure_freq+1,w,c
  6827  002470  6E3C               	movwf	measure_freq@count+1,c
  6828                           
  6829                           ;LC-meter.c: 335: lcd_gotoxy(0, 1);
  6830  002472  0E01               	movlw	1
  6831  002474  6E07               	movwf	lcd_gotoxy@row,c
  6832  002476  0E00               	movlw	0
  6833  002478  ECD5  F014         	call	_lcd_gotoxy
  6834                           
  6835                           ;LC-meter.c: 336: put_str("Freq=");
  6836  00247C  0EB0               	movlw	STR_20& (0+255)
  6837  00247E  EC0C  F015         	call	_put_str
  6838                           
  6839                           ;LC-meter.c: 337: format_number( count, 10, 5);
  6840  002482  C03B  F00A         	movff	measure_freq@count,format_number@n
  6841  002486  C03C  F00B         	movff	measure_freq@count+1,format_number@n+1
  6842  00248A  0E0A               	movlw	10
  6843  00248C  6E0C               	movwf	format_number@base,c
  6844  00248E  0E05               	movlw	5
  6845  002490  6E0D               	movwf	format_number@pad,c
  6846  002492  ECD3  F00F         	call	_format_number	;wreg free
  6847                           
  6848                           ;LC-meter.c: 339: return count;
  6849  002496  C03B  F035         	movff	measure_freq@count,?_measure_freq
  6850  00249A  C03C  F036         	movff	measure_freq@count+1,?_measure_freq+1
  6851  00249E  0012               	return		;funcret
  6852  0024A0                     __end_of_measure_freq:
  6853                           	opt stack 0
  6854                           tosu	equ	0xFFF
  6855                           tosh	equ	0xFFE
  6856                           tosl	equ	0xFFD
  6857                           pclath	equ	0xFFA
  6858                           tblptru	equ	0xFF8
  6859                           tblptrh	equ	0xFF7
  6860                           tblptrl	equ	0xFF6
  6861                           tablat	equ	0xFF5
  6862                           prodh	equ	0xFF4
  6863                           prodl	equ	0xFF3
  6864                           intcon	equ	0xFF2
  6865                           intcon2	equ	0xFF1
  6866                           postinc0	equ	0xFEE
  6867                           wreg	equ	0xFE8
  6868                           postdec1	equ	0xFE5
  6869                           fsr1l	equ	0xFE1
  6870                           postinc2	equ	0xFDE
  6871                           postdec2	equ	0xFDD
  6872                           fsr2h	equ	0xFDA
  6873                           fsr2l	equ	0xFD9
  6874                           status	equ	0xFD8
  6875                           
  6876 ;; *************** function _put_str *****************
  6877 ;; Defined at:
  6878 ;;		line 559 in file "../../../src/LC-meter.c"
  6879 ;; Parameters:    Size  Location     Type
  6880 ;;  s               1    wreg     PTR const unsigned char 
  6881 ;;		 -> STR_34(13), STR_25(10), STR_23(15), STR_21(12), 
  6882 ;;		 -> STR_20(6), 
  6883 ;; Auto vars:     Size  Location     Type
  6884 ;;  s               1    9[COMRAM] PTR const unsigned char 
  6885 ;;		 -> STR_34(13), STR_25(10), STR_23(15), STR_21(12), 
  6886 ;;		 -> STR_20(6), 
  6887 ;;  i               1    8[COMRAM] unsigned char 
  6888 ;; Return value:  Size  Location     Type
  6889 ;;		None               void
  6890 ;; Registers used:
  6891 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6892 ;; Tracked objects:
  6893 ;;		On entry : 0/0
  6894 ;;		On exit  : 0/0
  6895 ;;		Unchanged: 0/0
  6896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6897 ;;      Params:         0       0       0       0       0       0       0       0       0
  6898 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6899 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6900 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6901 ;;Total ram usage:        3 bytes
  6902 ;; Hardware stack levels used:    1
  6903 ;; Hardware stack levels required when called:    5
  6904 ;; This function calls:
  6905 ;;		_output_putch
  6906 ;; This function is called by:
  6907 ;;		_measure_freq
  6908 ;;		_calibrate
  6909 ;;		_measure_capacitance
  6910 ;;		_measure_inductance
  6911 ;; This function uses a non-reentrant model
  6912 ;;
  6913                           
  6914                           	psect	text34
  6915  002A18                     __ptext34:
  6916                           	opt stack 0
  6917  002A18                     _put_str:
  6918                           	opt stack 24
  6919                           
  6920                           ;incstack = 0
  6921                           ;put_str@s stored from wreg
  6922  002A18  6E0A               	movwf	put_str@s,c
  6923                           
  6924                           ;LC-meter.c: 560: unsigned char i;
  6925                           ;LC-meter.c: 562: for(i = 0; s[i]; i++) {
  6926  002A1A  6A09               	clrf	put_str@i,c
  6927  002A1C  D00C               	goto	l3017
  6928  002A1E                     l3013:
  6929                           
  6930                           ;LC-meter.c: 563: output_putch(s[i]);
  6931  002A1E  500A               	movf	put_str@s,w,c
  6932  002A20  2409               	addwf	put_str@i,w,c
  6933  002A22  6E08               	movwf	??_put_str& (0+255),c
  6934  002A24  C008  FFF6         	movff	??_put_str,tblptrl
  6935  002A28                     	if	1	;There is more than 1 active tblptr byte
  6936  002A28  0E08               	movlw	high __smallconst
  6937  002A2A  6EF7               	movwf	tblptrh,c
  6938  002A2C                     	endif
  6939  002A2C                     	if	0	;tblptru may be non-zero
  6940  002A2C                     	endif
  6941  002A2C                     	if	0	;tblptru may be non-zero
  6942  002A2C                     	endif
  6943  002A2C  0008               	tblrd		*
  6944  002A2E  50F5               	movf	tablat,w,c
  6945  002A30  ECF1  F015         	call	_output_putch
  6946  002A34  2A09               	incf	put_str@i,f,c
  6947  002A36                     l3017:
  6948  002A36  500A               	movf	put_str@s,w,c
  6949  002A38  2409               	addwf	put_str@i,w,c
  6950  002A3A  6E08               	movwf	??_put_str& (0+255),c
  6951  002A3C  C008  FFF6         	movff	??_put_str,tblptrl
  6952  002A40                     	if	1	;There is more than 1 active tblptr byte
  6953  002A40  0E08               	movlw	high __smallconst
  6954  002A42  6EF7               	movwf	tblptrh,c
  6955  002A44                     	endif
  6956  002A44                     	if	0	;tblptru may be non-zero
  6957  002A44                     	endif
  6958  002A44                     	if	0	;tblptru may be non-zero
  6959  002A44                     	endif
  6960  002A44  0008               	tblrd		*
  6961  002A46  50F5               	movf	tablat,w,c
  6962  002A48  B4D8               	btfsc	status,2,c
  6963  002A4A  0012               	return		;funcret
  6964  002A4C  D7E8               	goto	l3013
  6965  002A4E                     __end_of_put_str:
  6966                           	opt stack 0
  6967                           tosu	equ	0xFFF
  6968                           tosh	equ	0xFFE
  6969                           tosl	equ	0xFFD
  6970                           pclath	equ	0xFFA
  6971                           tblptru	equ	0xFF8
  6972                           tblptrh	equ	0xFF7
  6973                           tblptrl	equ	0xFF6
  6974                           tablat	equ	0xFF5
  6975                           prodh	equ	0xFF4
  6976                           prodl	equ	0xFF3
  6977                           intcon	equ	0xFF2
  6978                           intcon2	equ	0xFF1
  6979                           postinc0	equ	0xFEE
  6980                           wreg	equ	0xFE8
  6981                           postdec1	equ	0xFE5
  6982                           fsr1l	equ	0xFE1
  6983                           postinc2	equ	0xFDE
  6984                           postdec2	equ	0xFDD
  6985                           fsr2h	equ	0xFDA
  6986                           fsr2l	equ	0xFD9
  6987                           status	equ	0xFD8
  6988                           
  6989 ;; *************** function _lcd_gotoxy *****************
  6990 ;; Defined at:
  6991 ;;		line 154 in file "../../../lib/lcd44780.c"
  6992 ;; Parameters:    Size  Location     Type
  6993 ;;  col             1    wreg     unsigned char 
  6994 ;;  row             1    6[COMRAM] unsigned char 
  6995 ;; Auto vars:     Size  Location     Type
  6996 ;;  col             1    7[COMRAM] unsigned char 
  6997 ;;  row_offsets     4    8[COMRAM] unsigned char [4]
  6998 ;; Return value:  Size  Location     Type
  6999 ;;		None               void
  7000 ;; Registers used:
  7001 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7002 ;; Tracked objects:
  7003 ;;		On entry : 0/0
  7004 ;;		On exit  : 0/0
  7005 ;;		Unchanged: 0/0
  7006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7007 ;;      Params:         1       0       0       0       0       0       0       0       0
  7008 ;;      Locals:         5       0       0       0       0       0       0       0       0
  7009 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7010 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7011 ;;Total ram usage:        6 bytes
  7012 ;; Hardware stack levels used:    1
  7013 ;; Hardware stack levels required when called:    4
  7014 ;; This function calls:
  7015 ;;		_lcd_command
  7016 ;; This function is called by:
  7017 ;;		_print_unit
  7018 ;;		_print_reading
  7019 ;;		_indicator
  7020 ;;		_main
  7021 ;;		_measure_freq
  7022 ;;		_calibrate
  7023 ;;		_measure_capacitance
  7024 ;;		_measure_inductance
  7025 ;; This function uses a non-reentrant model
  7026 ;;
  7027                           
  7028                           	psect	text35
  7029  0029AA                     __ptext35:
  7030                           	opt stack 0
  7031  0029AA                     _lcd_gotoxy:
  7032                           	opt stack 24
  7033                           
  7034                           ;incstack = 0
  7035                           ;lcd_gotoxy@col stored from wreg
  7036  0029AA  6E08               	movwf	lcd_gotoxy@col,c
  7037                           
  7038                           ;lcd44780.c: 156: unsigned char row_offsets[] = {0x00, 0x40, 0x14, 0x54};
  7039  0029AC  C0FA  F009         	movff	lcd_gotoxy@F4094,lcd_gotoxy@row_offsets
  7040  0029B0  C0FB  F00A         	movff	lcd_gotoxy@F4094+1,lcd_gotoxy@row_offsets+1
  7041  0029B4  C0FC  F00B         	movff	lcd_gotoxy@F4094+2,lcd_gotoxy@row_offsets+2
  7042  0029B8  C0FD  F00C         	movff	lcd_gotoxy@F4094+3,lcd_gotoxy@row_offsets+3
  7043                           
  7044                           ;lcd44780.c: 165: if(LCD_lines == 1) {
  7045  0029BC  0100               	movlb	0	; () banked
  7046  0029BE  05E9               	decf	_LCD_lines& (0+255),w,b
  7047  0029C0  E106               	bnz	l2913
  7048                           
  7049                           ; BSR set to: 0
  7050                           ;lcd44780.c: 166: row_offsets[1] = 0x14;
  7051  0029C2  0E14               	movlw	20
  7052  0029C4  6E0A               	movwf	lcd_gotoxy@row_offsets+1,c
  7053                           
  7054                           ;lcd44780.c: 167: row_offsets[2] = 0x28;
  7055  0029C6  0E28               	movlw	40
  7056  0029C8  6E0B               	movwf	lcd_gotoxy@row_offsets+2,c
  7057                           
  7058                           ;lcd44780.c: 168: row_offsets[3] = 0x3C;
  7059  0029CA  0E3C               	movlw	60
  7060  0029CC  6E0C               	movwf	lcd_gotoxy@row_offsets+3,c
  7061  0029CE                     l2913:
  7062                           
  7063                           ; BSR set to: 0
  7064                           ;lcd44780.c: 169: }
  7065                           ;lcd44780.c: 175: lcd_command(0x80 | (col + row_offsets[row]));
  7066  0029CE  5007               	movf	lcd_gotoxy@row,w,c
  7067  0029D0  0F09               	addlw	low lcd_gotoxy@row_offsets
  7068  0029D2  6ED9               	movwf	fsr2l,c
  7069  0029D4  6ADA               	clrf	fsr2h,c
  7070  0029D6  50DF               	movf	indf2,w,c
  7071  0029D8  2408               	addwf	lcd_gotoxy@col,w,c
  7072  0029DA  0980               	iorlw	128
  7073  0029DC  EC00  F016         	call	_lcd_command
  7074  0029E0  0012               	return		;funcret
  7075  0029E2                     __end_of_lcd_gotoxy:
  7076                           	opt stack 0
  7077                           tosu	equ	0xFFF
  7078                           tosh	equ	0xFFE
  7079                           tosl	equ	0xFFD
  7080                           pclath	equ	0xFFA
  7081                           tblptru	equ	0xFF8
  7082                           tblptrh	equ	0xFF7
  7083                           tblptrl	equ	0xFF6
  7084                           tablat	equ	0xFF5
  7085                           prodh	equ	0xFF4
  7086                           prodl	equ	0xFF3
  7087                           intcon	equ	0xFF2
  7088                           intcon2	equ	0xFF1
  7089                           postinc0	equ	0xFEE
  7090                           wreg	equ	0xFE8
  7091                           postdec1	equ	0xFE5
  7092                           fsr1l	equ	0xFE1
  7093                           indf2	equ	0xFDF
  7094                           postinc2	equ	0xFDE
  7095                           postdec2	equ	0xFDD
  7096                           fsr2h	equ	0xFDA
  7097                           fsr2l	equ	0xFD9
  7098                           status	equ	0xFD8
  7099                           
  7100 ;; *************** function _format_number *****************
  7101 ;; Defined at:
  7102 ;;		line 14 in file "../../../lib/format.c"
  7103 ;; Parameters:    Size  Location     Type
  7104 ;;  n               2    9[COMRAM] unsigned short 
  7105 ;;  base            1   11[COMRAM] unsigned char 
  7106 ;;  pad             1   12[COMRAM] char 
  7107 ;; Auto vars:     Size  Location     Type
  7108 ;;  buf            32   15[COMRAM] unsigned char [32]
  7109 ;;  i               1   51[COMRAM] char 
  7110 ;;  di              1   50[COMRAM] unsigned char 
  7111 ;;  padchar         1   49[COMRAM] unsigned char 
  7112 ;; Return value:  Size  Location     Type
  7113 ;;		None               void
  7114 ;; Registers used:
  7115 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
  7116 ;; Tracked objects:
  7117 ;;		On entry : 0/0
  7118 ;;		On exit  : 0/0
  7119 ;;		Unchanged: 0/0
  7120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7121 ;;      Params:         4       0       0       0       0       0       0       0       0
  7122 ;;      Locals:        37       0       0       0       0       0       0       0       0
  7123 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7124 ;;      Totals:        43       0       0       0       0       0       0       0       0
  7125 ;;Total ram usage:       43 bytes
  7126 ;; Hardware stack levels used:    1
  7127 ;; Hardware stack levels required when called:    5
  7128 ;; This function calls:
  7129 ;;		___lwdiv
  7130 ;;		___lwmod
  7131 ;;		_format_putchar
  7132 ;;		_lcd_putch
  7133 ;;		_output_putch
  7134 ;;		_ser_putch
  7135 ;; This function is called by:
  7136 ;;		_print_reading
  7137 ;;		_format_xint32
  7138 ;;		_measure_freq
  7139 ;; This function uses a non-reentrant model
  7140 ;;
  7141                           
  7142                           	psect	text36
  7143  001FA6                     __ptext36:
  7144                           	opt stack 0
  7145  001FA6                     _format_number:
  7146                           	opt stack 23
  7147                           
  7148                           ;format.c: 15: char buf[8 * sizeof(long)];
  7149                           ;format.c: 16: unsigned char di;
  7150                           ;format.c: 17: signed char i = 0;
  7151                           
  7152                           ;incstack = 0
  7153  001FA6  6A34               	clrf	format_number@i,c
  7154                           
  7155                           ;format.c: 18: char padchar = ' ';
  7156  001FA8  0E20               	movlw	32
  7157  001FAA  6E32               	movwf	format_number@padchar,c
  7158                           
  7159                           ;format.c: 20: if(pad < 0) {
  7160  001FAC  AE0D               	btfss	format_number@pad,7,c
  7161  001FAE  D003               	goto	l2941
  7162                           
  7163                           ;format.c: 21: pad = -pad;
  7164  001FB0  6C0D               	negf	format_number@pad,c
  7165                           
  7166                           ;format.c: 22: padchar = '0';
  7167  001FB2  0E30               	movlw	48
  7168  001FB4  6E32               	movwf	format_number@padchar,c
  7169  001FB6                     l2941:
  7170                           
  7171                           ;format.c: 34: di = n % base;
  7172  001FB6  C00A  F003         	movff	format_number@n,___lwmod@dividend
  7173  001FBA  C00B  F004         	movff	format_number@n+1,___lwmod@dividend+1
  7174  001FBE  C00C  F005         	movff	format_number@base,___lwmod@divisor
  7175  001FC2  6A06               	clrf	___lwmod@divisor+1,c
  7176  001FC4  EC99  F014         	call	___lwmod	;wreg free
  7177  001FC8  5003               	movf	?___lwmod,w,c
  7178  001FCA  6E33               	movwf	format_number@di,c
  7179                           
  7180                           ;format.c: 35: buf[i++] = (di < 10 ? (unsigned char)'0' + di : (unsigned char)'A' + di -
      +                           10);
  7181  001FCC  0E09               	movlw	9
  7182  001FCE  6433               	cpfsgt	format_number@di,c
  7183  001FD0  D002               	goto	l2947
  7184  001FD2  0E37               	movlw	55
  7185  001FD4  D001               	goto	L5
  7186  001FD6                     l2947:
  7187  001FD6  0E30               	movlw	48
  7188  001FD8                     L5:
  7189  001FD8  2433               	addwf	format_number@di,w,c
  7190  001FDA  6E30               	movwf	_format_number$188,c
  7191  001FDC  6A31               	clrf	_format_number$188+1,c
  7192  001FDE  0E00               	movlw	0
  7193  001FE0  2231               	addwfc	_format_number$188+1,f,c
  7194  001FE2  5034               	movf	format_number@i,w,c
  7195  001FE4  0F10               	addlw	low format_number@buf
  7196  001FE6  6ED9               	movwf	fsr2l,c
  7197  001FE8  6ADA               	clrf	fsr2h,c
  7198  001FEA  C030  FFDF         	movff	_format_number$188,indf2
  7199  001FEE  2A34               	incf	format_number@i,f,c
  7200                           
  7201                           ;format.c: 37: n /= base;
  7202  001FF0  C00A  F003         	movff	format_number@n,___lwdiv@dividend
  7203  001FF4  C00B  F004         	movff	format_number@n+1,___lwdiv@dividend+1
  7204  001FF8  C00C  F005         	movff	format_number@base,___lwdiv@divisor
  7205  001FFC  6A06               	clrf	___lwdiv@divisor+1,c
  7206  001FFE  EC0B  F014         	call	___lwdiv	;wreg free
  7207  002002  C003  F00A         	movff	?___lwdiv,format_number@n
  7208  002006  C004  F00B         	movff	?___lwdiv+1,format_number@n+1
  7209                           
  7210                           ;format.c: 38: } while(n > 0);
  7211  00200A  500A               	movf	format_number@n,w,c
  7212  00200C  100B               	iorwf	format_number@n+1,w,c
  7213  00200E  E00F               	bz	l2959
  7214  002010  D7D2               	goto	l2941
  7215  002012                     l2957:
  7216  002012  D801               	call	u2278
  7217  002014  D00C               	goto	l2959
  7218  002016                     u2278:
  7219  002016  0005               	push	
  7220  002018  0100               	movlb	0	; () banked
  7221  00201A  6EFA               	movwf	pclath,c
  7222  00201C  51FE               	movf	_putchar_ptr& (0+255),w,b
  7223  00201E  6EFD               	movwf	tosl,c
  7224  002020  51FF               	movf	(_putchar_ptr+1)& (0+255),w,b
  7225  002022  6EFE               	movwf	tosh,c
  7226  002024  50F8               	movf	tblptru,w,c
  7227  002026  6EFF               	movwf	tosu,c
  7228  002028  50FA               	movf	pclath,w,c
  7229  00202A  5032               	movf	format_number@padchar,w,c
  7230  00202C  0012               	return		;indir
  7231  00202E                     l2959:
  7232  00202E  060D               	decf	format_number@pad,f,c
  7233  002030  280D               	incf	format_number@pad,w,c
  7234  002032  6E0E               	movwf	??_format_number& (0+255),c
  7235  002034  5034               	movf	format_number@i,w,c
  7236  002036  0A80               	xorlw	128
  7237  002038  6E0F               	movwf	(??_format_number+1)& (0+255),c
  7238  00203A  500E               	movf	??_format_number,w,c
  7239  00203C  0A80               	xorlw	128
  7240  00203E  5C0F               	subwf	(??_format_number+1)& (0+255),w,c
  7241  002040  E3E8               	bnc	l2957
  7242  002042                     l2961:
  7243                           
  7244                           ;format.c: 42: for(; i > 0; i--) putchar_ptr((char)buf[(signed short int)i - 1]);
  7245  002042  5034               	movf	format_number@i,w,c
  7246  002044  0A80               	xorlw	128
  7247  002046  0F7F               	addlw	-129
  7248  002048  E317               	bnc	l193
  7249  00204A  D801               	call	u2308
  7250  00204C  D013               	goto	l2967
  7251  00204E                     u2308:
  7252  00204E  0005               	push	
  7253  002050  0100               	movlb	0	; () banked
  7254  002052  6EFA               	movwf	pclath,c
  7255  002054  51FE               	movf	_putchar_ptr& (0+255),w,b
  7256  002056  6EFD               	movwf	tosl,c
  7257  002058  51FF               	movf	(_putchar_ptr+1)& (0+255),w,b
  7258  00205A  6EFE               	movwf	tosh,c
  7259  00205C  50F8               	movf	tblptru,w,c
  7260  00205E  6EFF               	movwf	tosu,c
  7261  002060  50FA               	movf	pclath,w,c
  7262  002062  C034  F00E         	movff	format_number@i,??_format_number
  7263  002066  060E               	decf	??_format_number,f,c
  7264  002068  500E               	movf	??_format_number,w,c
  7265  00206A  0F10               	addlw	low format_number@buf
  7266  00206C  6ED9               	movwf	fsr2l,c
  7267  00206E  6ADA               	clrf	fsr2h,c
  7268  002070  50DF               	movf	indf2,w,c
  7269  002072  0012               	return		;indir
  7270  002074                     l2967:
  7271  002074  0634               	decf	format_number@i,f,c
  7272  002076  D7E5               	goto	l2961
  7273  002078                     l193:
  7274  002078  0012               	return		;funcret
  7275  00207A                     __end_of_format_number:
  7276                           	opt stack 0
  7277                           tosu	equ	0xFFF
  7278                           tosh	equ	0xFFE
  7279                           tosl	equ	0xFFD
  7280                           pclath	equ	0xFFA
  7281                           tblptru	equ	0xFF8
  7282                           tblptrh	equ	0xFF7
  7283                           tblptrl	equ	0xFF6
  7284                           tablat	equ	0xFF5
  7285                           prodh	equ	0xFF4
  7286                           prodl	equ	0xFF3
  7287                           intcon	equ	0xFF2
  7288                           intcon2	equ	0xFF1
  7289                           postinc0	equ	0xFEE
  7290                           wreg	equ	0xFE8
  7291                           postdec1	equ	0xFE5
  7292                           fsr1l	equ	0xFE1
  7293                           indf2	equ	0xFDF
  7294                           postinc2	equ	0xFDE
  7295                           postdec2	equ	0xFDD
  7296                           fsr2h	equ	0xFDA
  7297                           fsr2l	equ	0xFD9
  7298                           status	equ	0xFD8
  7299                           
  7300 ;; *************** function _format_putchar *****************
  7301 ;; Defined at:
  7302 ;;		line 6 in file "../../../lib/format.c"
  7303 ;; Parameters:    Size  Location     Type
  7304 ;;  c               1    wreg     unsigned char 
  7305 ;; Auto vars:     Size  Location     Type
  7306 ;;  c               1    0[COMRAM] unsigned char 
  7307 ;; Return value:  Size  Location     Type
  7308 ;;		None               void
  7309 ;; Registers used:
  7310 ;;		wreg
  7311 ;; Tracked objects:
  7312 ;;		On entry : F/0
  7313 ;;		On exit  : F/0
  7314 ;;		Unchanged: F/0
  7315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7316 ;;      Params:         0       0       0       0       0       0       0       0       0
  7317 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7318 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7319 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7320 ;;Total ram usage:        0 bytes
  7321 ;; Hardware stack levels used:    1
  7322 ;; Hardware stack levels required when called:    1
  7323 ;; This function calls:
  7324 ;;		Nothing
  7325 ;; This function is called by:
  7326 ;;		_format_number
  7327 ;;		_format_xint32
  7328 ;;		_format_double
  7329 ;; This function uses a non-reentrant model
  7330 ;;
  7331                           
  7332                           	psect	text37
  7333  002C12                     __ptext37:
  7334                           	opt stack 0
  7335  002C12                     _format_putchar:
  7336                           	opt stack 26
  7337                           
  7338                           ; BSR set to: 0
  7339                           
  7340                           ; BSR set to: 0
  7341                           ;format.c: 7: return;
  7342                           
  7343                           ;incstack = 0
  7344  002C12  0012               	return		;funcret
  7345  002C14                     __end_of_format_putchar:
  7346                           	opt stack 0
  7347                           tosu	equ	0xFFF
  7348                           tosh	equ	0xFFE
  7349                           tosl	equ	0xFFD
  7350                           pclath	equ	0xFFA
  7351                           tblptru	equ	0xFF8
  7352                           tblptrh	equ	0xFF7
  7353                           tblptrl	equ	0xFF6
  7354                           tablat	equ	0xFF5
  7355                           prodh	equ	0xFF4
  7356                           prodl	equ	0xFF3
  7357                           intcon	equ	0xFF2
  7358                           intcon2	equ	0xFF1
  7359                           postinc0	equ	0xFEE
  7360                           wreg	equ	0xFE8
  7361                           postdec1	equ	0xFE5
  7362                           fsr1l	equ	0xFE1
  7363                           indf2	equ	0xFDF
  7364                           postinc2	equ	0xFDE
  7365                           postdec2	equ	0xFDD
  7366                           fsr2h	equ	0xFDA
  7367                           fsr2l	equ	0xFD9
  7368                           status	equ	0xFD8
  7369                           
  7370 ;; *************** function _ser_putch *****************
  7371 ;; Defined at:
  7372 ;;		line 82 in file "../../../lib/ser.c"
  7373 ;; Parameters:    Size  Location     Type
  7374 ;;  c               1    wreg     unsigned char 
  7375 ;; Auto vars:     Size  Location     Type
  7376 ;;  c               1    2[COMRAM] unsigned char 
  7377 ;; Return value:  Size  Location     Type
  7378 ;;		None               void
  7379 ;; Registers used:
  7380 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7381 ;; Tracked objects:
  7382 ;;		On entry : 0/0
  7383 ;;		On exit  : 0/0
  7384 ;;		Unchanged: 0/0
  7385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7386 ;;      Params:         0       0       0       0       0       0       0       0       0
  7387 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7388 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7389 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7390 ;;Total ram usage:        1 bytes
  7391 ;; Hardware stack levels used:    1
  7392 ;; Hardware stack levels required when called:    1
  7393 ;; This function calls:
  7394 ;;		Nothing
  7395 ;; This function is called by:
  7396 ;;		_ser_puts
  7397 ;;		_output_putch
  7398 ;;		_measure_capacitance
  7399 ;;		_format_number
  7400 ;;		_format_xint32
  7401 ;;		_format_double
  7402 ;; This function uses a non-reentrant model
  7403 ;;
  7404                           
  7405                           	psect	text38
  7406  002B4C                     __ptext38:
  7407                           	opt stack 0
  7408  002B4C                     _ser_putch:
  7409                           	opt stack 28
  7410                           
  7411                           ; BSR set to: 0
  7412                           ;incstack = 0
  7413                           ;ser_putch@c stored from wreg
  7414  002B4C  6E03               	movwf	ser_putch@c,c
  7415  002B4E                     l2669:
  7416  002B4E  285C               	incf	_txiptr,w,c	;volatile
  7417  002B50  0B0F               	andlw	15
  7418  002B52  185D               	xorwf	_txoptr,w,c	;volatile
  7419  002B54  E0FC               	bz	l2669
  7420                           
  7421                           ;ser.c: 84: GIE = 0;
  7422  002B56  9EF2               	bcf	intcon,7,c	;volatile
  7423                           
  7424                           ;ser.c: 85: txfifo[txiptr] = c;
  7425  002B58  505C               	movf	_txiptr,w,c
  7426  002B5A  0FC1               	addlw	low _txfifo
  7427  002B5C  6ED9               	movwf	fsr2l,c
  7428  002B5E  6ADA               	clrf	fsr2h,c
  7429  002B60  C003  FFDF         	movff	ser_putch@c,indf2
  7430                           
  7431                           ;ser.c: 86: txiptr = (txiptr + 1) & ((unsigned char)16 - 1);
  7432  002B64  285C               	incf	_txiptr,w,c	;volatile
  7433  002B66  0B0F               	andlw	15
  7434  002B68  6E5C               	movwf	_txiptr,c	;volatile
  7435                           
  7436                           ;ser.c: 87: TXIE = 1;
  7437  002B6A  889D               	bsf	3997,4,c	;volatile
  7438                           
  7439                           ;ser.c: 88: GIE = 1;
  7440  002B6C  8EF2               	bsf	intcon,7,c	;volatile
  7441  002B6E  0012               	return		;funcret
  7442  002B70                     __end_of_ser_putch:
  7443                           	opt stack 0
  7444                           tosu	equ	0xFFF
  7445                           tosh	equ	0xFFE
  7446                           tosl	equ	0xFFD
  7447                           pclath	equ	0xFFA
  7448                           tblptru	equ	0xFF8
  7449                           tblptrh	equ	0xFF7
  7450                           tblptrl	equ	0xFF6
  7451                           tablat	equ	0xFF5
  7452                           prodh	equ	0xFF4
  7453                           prodl	equ	0xFF3
  7454                           intcon	equ	0xFF2
  7455                           intcon2	equ	0xFF1
  7456                           postinc0	equ	0xFEE
  7457                           wreg	equ	0xFE8
  7458                           postdec1	equ	0xFE5
  7459                           fsr1l	equ	0xFE1
  7460                           indf2	equ	0xFDF
  7461                           postinc2	equ	0xFDE
  7462                           postdec2	equ	0xFDD
  7463                           fsr2h	equ	0xFDA
  7464                           fsr2l	equ	0xFD9
  7465                           status	equ	0xFD8
  7466                           
  7467 ;; *************** function _lcd_putch *****************
  7468 ;; Defined at:
  7469 ;;		line 139 in file "../../../lib/lcd44780.c"
  7470 ;; Parameters:    Size  Location     Type
  7471 ;;  value           1    wreg     unsigned char 
  7472 ;; Auto vars:     Size  Location     Type
  7473 ;;  value           1    5[COMRAM] unsigned char 
  7474 ;; Return value:  Size  Location     Type
  7475 ;;		None               void
  7476 ;; Registers used:
  7477 ;;		wreg, status,2, status,0, cstack
  7478 ;; Tracked objects:
  7479 ;;		On entry : 0/0
  7480 ;;		On exit  : 0/0
  7481 ;;		Unchanged: 0/0
  7482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7483 ;;      Params:         0       0       0       0       0       0       0       0       0
  7484 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7485 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7486 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7487 ;;Total ram usage:        1 bytes
  7488 ;; Hardware stack levels used:    1
  7489 ;; Hardware stack levels required when called:    3
  7490 ;; This function calls:
  7491 ;;		_lcd_send
  7492 ;; This function is called by:
  7493 ;;		_lcd_puts
  7494 ;;		_output_putch
  7495 ;;		_main
  7496 ;;		_calibrate
  7497 ;;		_format_number
  7498 ;;		_format_xint32
  7499 ;;		_format_double
  7500 ;; This function uses a non-reentrant model
  7501 ;;
  7502                           
  7503                           	psect	text39
  7504  002BF2                     __ptext39:
  7505                           	opt stack 0
  7506  002BF2                     _lcd_putch:
  7507                           	opt stack 24
  7508                           
  7509                           ;incstack = 0
  7510                           ;lcd_putch@value stored from wreg
  7511  002BF2  6E06               	movwf	lcd_putch@value,c
  7512                           
  7513                           ;lcd44780.c: 140: lcd_send((unsigned)value, 1);
  7514  002BF4  0E01               	movlw	1
  7515  002BF6  6E04               	movwf	lcd_send@mode,c
  7516  002BF8  5006               	movf	lcd_putch@value,w,c
  7517  002BFA  ECD8  F015         	call	_lcd_send
  7518  002BFE  0012               	return		;funcret
  7519  002C00                     __end_of_lcd_putch:
  7520                           	opt stack 0
  7521                           tosu	equ	0xFFF
  7522                           tosh	equ	0xFFE
  7523                           tosl	equ	0xFFD
  7524                           pclath	equ	0xFFA
  7525                           tblptru	equ	0xFF8
  7526                           tblptrh	equ	0xFF7
  7527                           tblptrl	equ	0xFF6
  7528                           tablat	equ	0xFF5
  7529                           prodh	equ	0xFF4
  7530                           prodl	equ	0xFF3
  7531                           intcon	equ	0xFF2
  7532                           intcon2	equ	0xFF1
  7533                           postinc0	equ	0xFEE
  7534                           wreg	equ	0xFE8
  7535                           postdec1	equ	0xFE5
  7536                           fsr1l	equ	0xFE1
  7537                           indf2	equ	0xFDF
  7538                           postinc2	equ	0xFDE
  7539                           postdec2	equ	0xFDD
  7540                           fsr2h	equ	0xFDA
  7541                           fsr2l	equ	0xFD9
  7542                           status	equ	0xFD8
  7543                           
  7544 ;; *************** function _output_putch *****************
  7545 ;; Defined at:
  7546 ;;		line 48 in file "../../../src/LC-meter.c"
  7547 ;; Parameters:    Size  Location     Type
  7548 ;;  c               1    wreg     unsigned char 
  7549 ;; Auto vars:     Size  Location     Type
  7550 ;;  c               1    6[COMRAM] unsigned char 
  7551 ;; Return value:  Size  Location     Type
  7552 ;;		None               void
  7553 ;; Registers used:
  7554 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7555 ;; Tracked objects:
  7556 ;;		On entry : 0/0
  7557 ;;		On exit  : 0/0
  7558 ;;		Unchanged: 0/0
  7559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7560 ;;      Params:         0       0       0       0       0       0       0       0       0
  7561 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7562 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7563 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7564 ;;Total ram usage:        1 bytes
  7565 ;; Hardware stack levels used:    1
  7566 ;; Hardware stack levels required when called:    4
  7567 ;; This function calls:
  7568 ;;		_lcd_putch
  7569 ;;		_ser_putch
  7570 ;; This function is called by:
  7571 ;;		_measure_capacitance
  7572 ;;		_put_str
  7573 ;;		_format_number
  7574 ;;		_format_xint32
  7575 ;;		_format_double
  7576 ;; This function uses a non-reentrant model
  7577 ;;
  7578                           
  7579                           	psect	text40
  7580  002BE2                     __ptext40:
  7581                           	opt stack 0
  7582  002BE2                     _output_putch:
  7583                           	opt stack 24
  7584                           
  7585                           ;incstack = 0
  7586                           ;output_putch@c stored from wreg
  7587  002BE2  6E07               	movwf	output_putch@c,c
  7588                           
  7589                           ;LC-meter.c: 51: lcd_putch(c);
  7590  002BE4  5007               	movf	output_putch@c,w,c
  7591  002BE6  ECF9  F015         	call	_lcd_putch
  7592                           
  7593                           ;LC-meter.c: 54: ser_putch(c);
  7594  002BEA  5007               	movf	output_putch@c,w,c
  7595  002BEC  ECA6  F015         	call	_ser_putch
  7596  002BF0  0012               	return		;funcret
  7597  002BF2                     __end_of_output_putch:
  7598                           	opt stack 0
  7599                           tosu	equ	0xFFF
  7600                           tosh	equ	0xFFE
  7601                           tosl	equ	0xFFD
  7602                           pclath	equ	0xFFA
  7603                           tblptru	equ	0xFF8
  7604                           tblptrh	equ	0xFF7
  7605                           tblptrl	equ	0xFF6
  7606                           tablat	equ	0xFF5
  7607                           prodh	equ	0xFF4
  7608                           prodl	equ	0xFF3
  7609                           intcon	equ	0xFF2
  7610                           intcon2	equ	0xFF1
  7611                           postinc0	equ	0xFEE
  7612                           wreg	equ	0xFE8
  7613                           postdec1	equ	0xFE5
  7614                           fsr1l	equ	0xFE1
  7615                           indf2	equ	0xFDF
  7616                           postinc2	equ	0xFDE
  7617                           postdec2	equ	0xFDD
  7618                           fsr2h	equ	0xFDA
  7619                           fsr2l	equ	0xFD9
  7620                           status	equ	0xFD8
  7621                           
  7622 ;; *************** function ___lwmod *****************
  7623 ;; Defined at:
  7624 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  7625 ;; Parameters:    Size  Location     Type
  7626 ;;  dividend        2    2[COMRAM] unsigned int 
  7627 ;;  divisor         2    4[COMRAM] unsigned int 
  7628 ;; Auto vars:     Size  Location     Type
  7629 ;;  counter         1    6[COMRAM] unsigned char 
  7630 ;; Return value:  Size  Location     Type
  7631 ;;                  2    2[COMRAM] unsigned int 
  7632 ;; Registers used:
  7633 ;;		wreg, status,2, status,0
  7634 ;; Tracked objects:
  7635 ;;		On entry : 0/0
  7636 ;;		On exit  : 0/0
  7637 ;;		Unchanged: 0/0
  7638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7639 ;;      Params:         4       0       0       0       0       0       0       0       0
  7640 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7641 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7642 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7643 ;;Total ram usage:        5 bytes
  7644 ;; Hardware stack levels used:    1
  7645 ;; Hardware stack levels required when called:    1
  7646 ;; This function calls:
  7647 ;;		Nothing
  7648 ;; This function is called by:
  7649 ;;		_print_reading
  7650 ;;		_format_number
  7651 ;; This function uses a non-reentrant model
  7652 ;;
  7653                           
  7654                           	psect	text41
  7655  002932                     __ptext41:
  7656                           	opt stack 0
  7657  002932                     ___lwmod:
  7658                           	opt stack 26
  7659                           
  7660                           ;incstack = 0
  7661  002932  5005               	movf	___lwmod@divisor,w,c
  7662  002934  1006               	iorwf	___lwmod@divisor+1,w,c
  7663  002936  E017               	bz	l1120
  7664  002938  0E01               	movlw	1
  7665  00293A  6E07               	movwf	___lwmod@counter,c
  7666  00293C  D004               	goto	l2855
  7667  00293E                     l2853:
  7668  00293E  90D8               	bcf	status,0,c
  7669  002940  3605               	rlcf	___lwmod@divisor,f,c
  7670  002942  3606               	rlcf	___lwmod@divisor+1,f,c
  7671  002944  2A07               	incf	___lwmod@counter,f,c
  7672  002946                     l2855:
  7673  002946  AE06               	btfss	___lwmod@divisor+1,7,c
  7674  002948  D7FA               	goto	l2853
  7675  00294A                     l2857:
  7676  00294A  5005               	movf	___lwmod@divisor,w,c
  7677  00294C  5C03               	subwf	___lwmod@dividend,w,c
  7678  00294E  5006               	movf	___lwmod@divisor+1,w,c
  7679  002950  5804               	subwfb	___lwmod@dividend+1,w,c
  7680  002952  E304               	bnc	l2861
  7681  002954  5005               	movf	___lwmod@divisor,w,c
  7682  002956  5E03               	subwf	___lwmod@dividend,f,c
  7683  002958  5006               	movf	___lwmod@divisor+1,w,c
  7684  00295A  5A04               	subwfb	___lwmod@dividend+1,f,c
  7685  00295C                     l2861:
  7686  00295C  90D8               	bcf	status,0,c
  7687  00295E  3206               	rrcf	___lwmod@divisor+1,f,c
  7688  002960  3205               	rrcf	___lwmod@divisor,f,c
  7689  002962  2E07               	decfsz	___lwmod@counter,f,c
  7690  002964  D7F2               	goto	l2857
  7691  002966                     l1120:
  7692  002966  C003  F003         	movff	___lwmod@dividend,?___lwmod
  7693  00296A  C004  F004         	movff	___lwmod@dividend+1,?___lwmod+1
  7694  00296E  0012               	return		;funcret
  7695  002970                     __end_of___lwmod:
  7696                           	opt stack 0
  7697                           tosu	equ	0xFFF
  7698                           tosh	equ	0xFFE
  7699                           tosl	equ	0xFFD
  7700                           pclath	equ	0xFFA
  7701                           tblptru	equ	0xFF8
  7702                           tblptrh	equ	0xFF7
  7703                           tblptrl	equ	0xFF6
  7704                           tablat	equ	0xFF5
  7705                           prodh	equ	0xFF4
  7706                           prodl	equ	0xFF3
  7707                           intcon	equ	0xFF2
  7708                           intcon2	equ	0xFF1
  7709                           postinc0	equ	0xFEE
  7710                           wreg	equ	0xFE8
  7711                           postdec1	equ	0xFE5
  7712                           fsr1l	equ	0xFE1
  7713                           indf2	equ	0xFDF
  7714                           postinc2	equ	0xFDE
  7715                           postdec2	equ	0xFDD
  7716                           fsr2h	equ	0xFDA
  7717                           fsr2l	equ	0xFD9
  7718                           status	equ	0xFD8
  7719                           
  7720 ;; *************** function ___lwdiv *****************
  7721 ;; Defined at:
  7722 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  7723 ;; Parameters:    Size  Location     Type
  7724 ;;  dividend        2    2[COMRAM] unsigned int 
  7725 ;;  divisor         2    4[COMRAM] unsigned int 
  7726 ;; Auto vars:     Size  Location     Type
  7727 ;;  quotient        2    6[COMRAM] unsigned int 
  7728 ;;  counter         1    8[COMRAM] unsigned char 
  7729 ;; Return value:  Size  Location     Type
  7730 ;;                  2    2[COMRAM] unsigned int 
  7731 ;; Registers used:
  7732 ;;		wreg, status,2, status,0
  7733 ;; Tracked objects:
  7734 ;;		On entry : 0/0
  7735 ;;		On exit  : 0/0
  7736 ;;		Unchanged: 0/0
  7737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7738 ;;      Params:         4       0       0       0       0       0       0       0       0
  7739 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7740 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7741 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7742 ;;Total ram usage:        7 bytes
  7743 ;; Hardware stack levels used:    1
  7744 ;; Hardware stack levels required when called:    1
  7745 ;; This function calls:
  7746 ;;		Nothing
  7747 ;; This function is called by:
  7748 ;;		_print_reading
  7749 ;;		_format_number
  7750 ;; This function uses a non-reentrant model
  7751 ;;
  7752                           
  7753                           	psect	text42
  7754  002816                     __ptext42:
  7755                           	opt stack 0
  7756  002816                     ___lwdiv:
  7757                           	opt stack 26
  7758                           
  7759                           ;incstack = 0
  7760  002816  6A07               	clrf	___lwdiv@quotient,c
  7761  002818  6A08               	clrf	___lwdiv@quotient+1,c
  7762  00281A  5005               	movf	___lwdiv@divisor,w,c
  7763  00281C  1006               	iorwf	___lwdiv@divisor+1,w,c
  7764  00281E  E01B               	bz	l1110
  7765  002820  0E01               	movlw	1
  7766  002822  6E09               	movwf	___lwdiv@counter,c
  7767  002824  D004               	goto	l2835
  7768  002826                     l2833:
  7769  002826  90D8               	bcf	status,0,c
  7770  002828  3605               	rlcf	___lwdiv@divisor,f,c
  7771  00282A  3606               	rlcf	___lwdiv@divisor+1,f,c
  7772  00282C  2A09               	incf	___lwdiv@counter,f,c
  7773  00282E                     l2835:
  7774  00282E  AE06               	btfss	___lwdiv@divisor+1,7,c
  7775  002830  D7FA               	goto	l2833
  7776  002832                     l2837:
  7777  002832  90D8               	bcf	status,0,c
  7778  002834  3607               	rlcf	___lwdiv@quotient,f,c
  7779  002836  3608               	rlcf	___lwdiv@quotient+1,f,c
  7780  002838  5005               	movf	___lwdiv@divisor,w,c
  7781  00283A  5C03               	subwf	___lwdiv@dividend,w,c
  7782  00283C  5006               	movf	___lwdiv@divisor+1,w,c
  7783  00283E  5804               	subwfb	___lwdiv@dividend+1,w,c
  7784  002840  E305               	bnc	l2845
  7785  002842  5005               	movf	___lwdiv@divisor,w,c
  7786  002844  5E03               	subwf	___lwdiv@dividend,f,c
  7787  002846  5006               	movf	___lwdiv@divisor+1,w,c
  7788  002848  5A04               	subwfb	___lwdiv@dividend+1,f,c
  7789  00284A  8007               	bsf	___lwdiv@quotient,0,c
  7790  00284C                     l2845:
  7791  00284C  90D8               	bcf	status,0,c
  7792  00284E  3206               	rrcf	___lwdiv@divisor+1,f,c
  7793  002850  3205               	rrcf	___lwdiv@divisor,f,c
  7794  002852  2E09               	decfsz	___lwdiv@counter,f,c
  7795  002854  D7EE               	goto	l2837
  7796  002856                     l1110:
  7797  002856  C007  F003         	movff	___lwdiv@quotient,?___lwdiv
  7798  00285A  C008  F004         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7799  00285E  0012               	return		;funcret
  7800  002860                     __end_of___lwdiv:
  7801                           	opt stack 0
  7802                           tosu	equ	0xFFF
  7803                           tosh	equ	0xFFE
  7804                           tosl	equ	0xFFD
  7805                           pclath	equ	0xFFA
  7806                           tblptru	equ	0xFF8
  7807                           tblptrh	equ	0xFF7
  7808                           tblptrl	equ	0xFF6
  7809                           tablat	equ	0xFF5
  7810                           prodh	equ	0xFF4
  7811                           prodl	equ	0xFF3
  7812                           intcon	equ	0xFF2
  7813                           intcon2	equ	0xFF1
  7814                           postinc0	equ	0xFEE
  7815                           wreg	equ	0xFE8
  7816                           postdec1	equ	0xFE5
  7817                           fsr1l	equ	0xFE1
  7818                           indf2	equ	0xFDF
  7819                           postinc2	equ	0xFDE
  7820                           postdec2	equ	0xFDD
  7821                           fsr2h	equ	0xFDA
  7822                           fsr2l	equ	0xFD9
  7823                           status	equ	0xFD8
  7824                           
  7825 ;; *************** function _lcd_clear *****************
  7826 ;; Defined at:
  7827 ;;		line 306 in file "../../../lib/lcd44780.c"
  7828 ;; Parameters:    Size  Location     Type
  7829 ;;		None
  7830 ;; Auto vars:     Size  Location     Type
  7831 ;;		None
  7832 ;; Return value:  Size  Location     Type
  7833 ;;		None               void
  7834 ;; Registers used:
  7835 ;;		wreg, status,2, status,0, cstack
  7836 ;; Tracked objects:
  7837 ;;		On entry : 0/0
  7838 ;;		On exit  : 0/0
  7839 ;;		Unchanged: 0/0
  7840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7841 ;;      Params:         0       0       0       0       0       0       0       0       0
  7842 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7843 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7844 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7845 ;;Total ram usage:        1 bytes
  7846 ;; Hardware stack levels used:    1
  7847 ;; Hardware stack levels required when called:    4
  7848 ;; This function calls:
  7849 ;;		_lcd_command
  7850 ;; This function is called by:
  7851 ;;		_main
  7852 ;;		_calibrate
  7853 ;; This function uses a non-reentrant model
  7854 ;;
  7855                           
  7856                           	psect	text43
  7857  002BCC                     __ptext43:
  7858                           	opt stack 0
  7859  002BCC                     _lcd_clear:
  7860                           	opt stack 26
  7861                           
  7862                           ;lcd44780.c: 307: lcd_command(0x01);
  7863                           
  7864                           ;incstack = 0
  7865  002BCC  0E01               	movlw	1
  7866  002BCE  EC00  F016         	call	_lcd_command
  7867                           
  7868                           ;lcd44780.c: 308: _delay((unsigned long)((2)*(20000000/4000.0)));
  7869  002BD2  0E0D               	movlw	13
  7870  002BD4  6E07               	movwf	??_lcd_clear& (0+255),c
  7871  002BD6  0EFC               	movlw	252
  7872  002BD8                     u3687:
  7873  002BD8  2EE8               	decfsz	wreg,f,c
  7874  002BDA  D7FE               	goto	u3687
  7875  002BDC  2E07               	decfsz	??_lcd_clear& (0+255),f,c
  7876  002BDE  D7FC               	goto	u3687
  7877  002BE0  0012               	return		;funcret
  7878  002BE2                     __end_of_lcd_clear:
  7879                           	opt stack 0
  7880                           tosu	equ	0xFFF
  7881                           tosh	equ	0xFFE
  7882                           tosl	equ	0xFFD
  7883                           pclath	equ	0xFFA
  7884                           tblptru	equ	0xFF8
  7885                           tblptrh	equ	0xFF7
  7886                           tblptrl	equ	0xFF6
  7887                           tablat	equ	0xFF5
  7888                           prodh	equ	0xFF4
  7889                           prodl	equ	0xFF3
  7890                           intcon	equ	0xFF2
  7891                           intcon2	equ	0xFF1
  7892                           postinc0	equ	0xFEE
  7893                           wreg	equ	0xFE8
  7894                           postdec1	equ	0xFE5
  7895                           fsr1l	equ	0xFE1
  7896                           indf2	equ	0xFDF
  7897                           postinc2	equ	0xFDE
  7898                           postdec2	equ	0xFDD
  7899                           fsr2h	equ	0xFDA
  7900                           fsr2l	equ	0xFD9
  7901                           status	equ	0xFD8
  7902                           
  7903 ;; *************** function _lcd_command *****************
  7904 ;; Defined at:
  7905 ;;		line 146 in file "../../../lib/lcd44780.c"
  7906 ;; Parameters:    Size  Location     Type
  7907 ;;  value           1    wreg     unsigned char 
  7908 ;; Auto vars:     Size  Location     Type
  7909 ;;  value           1    5[COMRAM] unsigned char 
  7910 ;; Return value:  Size  Location     Type
  7911 ;;		None               void
  7912 ;; Registers used:
  7913 ;;		wreg, status,2, status,0, cstack
  7914 ;; Tracked objects:
  7915 ;;		On entry : 0/0
  7916 ;;		On exit  : 0/0
  7917 ;;		Unchanged: 0/0
  7918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7919 ;;      Params:         0       0       0       0       0       0       0       0       0
  7920 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7921 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7922 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7923 ;;Total ram usage:        1 bytes
  7924 ;; Hardware stack levels used:    1
  7925 ;; Hardware stack levels required when called:    3
  7926 ;; This function calls:
  7927 ;;		_lcd_send
  7928 ;; This function is called by:
  7929 ;;		_lcd_gotoxy
  7930 ;;		_lcd_clear
  7931 ;;		_lcd_begin
  7932 ;; This function uses a non-reentrant model
  7933 ;;
  7934                           
  7935                           	psect	text44
  7936  002C00                     __ptext44:
  7937                           	opt stack 0
  7938  002C00                     _lcd_command:
  7939                           	opt stack 24
  7940                           
  7941                           ;incstack = 0
  7942                           ;lcd_command@value stored from wreg
  7943  002C00  6E06               	movwf	lcd_command@value,c
  7944                           
  7945                           ;lcd44780.c: 147: lcd_send(value, 0);
  7946  002C02  6A04               	clrf	lcd_send@mode,c
  7947  002C04  5006               	movf	lcd_command@value,w,c
  7948  002C06  ECD8  F015         	call	_lcd_send
  7949  002C0A  0012               	return		;funcret
  7950  002C0C                     __end_of_lcd_command:
  7951                           	opt stack 0
  7952                           tosu	equ	0xFFF
  7953                           tosh	equ	0xFFE
  7954                           tosl	equ	0xFFD
  7955                           pclath	equ	0xFFA
  7956                           tblptru	equ	0xFF8
  7957                           tblptrh	equ	0xFF7
  7958                           tblptrl	equ	0xFF6
  7959                           tablat	equ	0xFF5
  7960                           prodh	equ	0xFF4
  7961                           prodl	equ	0xFF3
  7962                           intcon	equ	0xFF2
  7963                           intcon2	equ	0xFF1
  7964                           postinc0	equ	0xFEE
  7965                           wreg	equ	0xFE8
  7966                           postdec1	equ	0xFE5
  7967                           fsr1l	equ	0xFE1
  7968                           indf2	equ	0xFDF
  7969                           postinc2	equ	0xFDE
  7970                           postdec2	equ	0xFDD
  7971                           fsr2h	equ	0xFDA
  7972                           fsr2l	equ	0xFD9
  7973                           status	equ	0xFD8
  7974                           
  7975 ;; *************** function _lcd_send *****************
  7976 ;; Defined at:
  7977 ;;		line 122 in file "../../../lib/lcd44780.c"
  7978 ;; Parameters:    Size  Location     Type
  7979 ;;  value           1    wreg     unsigned char 
  7980 ;;  mode            1    3[COMRAM] unsigned char 
  7981 ;; Auto vars:     Size  Location     Type
  7982 ;;  value           1    4[COMRAM] unsigned char 
  7983 ;; Return value:  Size  Location     Type
  7984 ;;		None               void
  7985 ;; Registers used:
  7986 ;;		wreg, status,2, status,0, cstack
  7987 ;; Tracked objects:
  7988 ;;		On entry : 0/0
  7989 ;;		On exit  : 0/0
  7990 ;;		Unchanged: 0/0
  7991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7992 ;;      Params:         1       0       0       0       0       0       0       0       0
  7993 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7994 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7995 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7996 ;;Total ram usage:        2 bytes
  7997 ;; Hardware stack levels used:    1
  7998 ;; Hardware stack levels required when called:    2
  7999 ;; This function calls:
  8000 ;;		_lcd_write4bits
  8001 ;; This function is called by:
  8002 ;;		_lcd_putch
  8003 ;;		_lcd_command
  8004 ;; This function uses a non-reentrant model
  8005 ;;
  8006                           
  8007                           	psect	text45
  8008  002BB0                     __ptext45:
  8009                           	opt stack 0
  8010  002BB0                     _lcd_send:
  8011                           	opt stack 24
  8012                           
  8013                           ;incstack = 0
  8014                           ;lcd_send@value stored from wreg
  8015  002BB0  6E05               	movwf	lcd_send@value,c
  8016                           
  8017                           ;lcd44780.c: 123: RB2 = mode;
  8018  002BB2  B004               	btfsc	lcd_send@mode,0,c
  8019  002BB4  D002               	bra	u1525
  8020  002BB6  9481               	bcf	3969,2,c	;volatile
  8021  002BB8  D001               	bra	u1526
  8022  002BBA                     u1525:
  8023  002BBA  8481               	bsf	3969,2,c	;volatile
  8024  002BBC                     u1526:
  8025                           
  8026                           ;lcd44780.c: 130: {
  8027                           ;lcd44780.c: 131: lcd_write4bits(value >> 4);
  8028  002BBC  3805               	swapf	lcd_send@value,w,c
  8029  002BBE  0B0F               	andlw	15
  8030  002BC0  ECE5  F013         	call	_lcd_write4bits
  8031                           
  8032                           ;lcd44780.c: 132: lcd_write4bits(value);
  8033  002BC4  5005               	movf	lcd_send@value,w,c
  8034  002BC6  ECE5  F013         	call	_lcd_write4bits
  8035  002BCA  0012               	return		;funcret
  8036  002BCC                     __end_of_lcd_send:
  8037                           	opt stack 0
  8038                           tosu	equ	0xFFF
  8039                           tosh	equ	0xFFE
  8040                           tosl	equ	0xFFD
  8041                           pclath	equ	0xFFA
  8042                           tblptru	equ	0xFF8
  8043                           tblptrh	equ	0xFF7
  8044                           tblptrl	equ	0xFF6
  8045                           tablat	equ	0xFF5
  8046                           prodh	equ	0xFF4
  8047                           prodl	equ	0xFF3
  8048                           intcon	equ	0xFF2
  8049                           intcon2	equ	0xFF1
  8050                           postinc0	equ	0xFEE
  8051                           wreg	equ	0xFE8
  8052                           postdec1	equ	0xFE5
  8053                           fsr1l	equ	0xFE1
  8054                           indf2	equ	0xFDF
  8055                           postinc2	equ	0xFDE
  8056                           postdec2	equ	0xFDD
  8057                           fsr2h	equ	0xFDA
  8058                           fsr2l	equ	0xFD9
  8059                           status	equ	0xFD8
  8060                           
  8061 ;; *************** function _lcd_write4bits *****************
  8062 ;; Defined at:
  8063 ;;		line 57 in file "../../../lib/lcd44780.c"
  8064 ;; Parameters:    Size  Location     Type
  8065 ;;  value           1    wreg     unsigned char 
  8066 ;; Auto vars:     Size  Location     Type
  8067 ;;  value           1    2[COMRAM] unsigned char 
  8068 ;; Return value:  Size  Location     Type
  8069 ;;		None               void
  8070 ;; Registers used:
  8071 ;;		wreg, status,2, status,0
  8072 ;; Tracked objects:
  8073 ;;		On entry : 0/0
  8074 ;;		On exit  : 0/0
  8075 ;;		Unchanged: 0/0
  8076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8077 ;;      Params:         0       0       0       0       0       0       0       0       0
  8078 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8079 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8080 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8081 ;;Total ram usage:        1 bytes
  8082 ;; Hardware stack levels used:    1
  8083 ;; Hardware stack levels required when called:    1
  8084 ;; This function calls:
  8085 ;;		Nothing
  8086 ;; This function is called by:
  8087 ;;		_lcd_send
  8088 ;;		_lcd_begin
  8089 ;; This function uses a non-reentrant model
  8090 ;;
  8091                           
  8092                           	psect	text46
  8093  0027CA                     __ptext46:
  8094                           	opt stack 0
  8095  0027CA                     _lcd_write4bits:
  8096                           	opt stack 24
  8097                           
  8098                           ;incstack = 0
  8099                           ;lcd_write4bits@value stored from wreg
  8100  0027CA  6E03               	movwf	lcd_write4bits@value,c
  8101                           
  8102                           ;lcd44780.c: 62: RB4 = value & 1;
  8103  0027CC  B003               	btfsc	lcd_write4bits@value,0,c
  8104  0027CE  D002               	bra	u1405
  8105  0027D0  9881               	bcf	3969,4,c	;volatile
  8106  0027D2  D001               	bra	u1406
  8107  0027D4                     u1405:
  8108  0027D4  8881               	bsf	3969,4,c	;volatile
  8109  0027D6                     u1406:
  8110                           
  8111                           ;lcd44780.c: 63: value >>= 1;
  8112  0027D6  90D8               	bcf	status,0,c
  8113  0027D8  3203               	rrcf	lcd_write4bits@value,f,c
  8114                           
  8115                           ;lcd44780.c: 64: RB5 = value & 1;
  8116  0027DA  B003               	btfsc	lcd_write4bits@value,0,c
  8117  0027DC  D002               	bra	u1415
  8118  0027DE  9A81               	bcf	3969,5,c	;volatile
  8119  0027E0  D001               	bra	u1416
  8120  0027E2                     u1415:
  8121  0027E2  8A81               	bsf	3969,5,c	;volatile
  8122  0027E4                     u1416:
  8123                           
  8124                           ;lcd44780.c: 65: value >>= 1;
  8125  0027E4  90D8               	bcf	status,0,c
  8126  0027E6  3203               	rrcf	lcd_write4bits@value,f,c
  8127                           
  8128                           ;lcd44780.c: 66: RB6 = value & 1;
  8129  0027E8  B003               	btfsc	lcd_write4bits@value,0,c
  8130  0027EA  D002               	bra	u1425
  8131  0027EC  9C81               	bcf	3969,6,c	;volatile
  8132  0027EE  D001               	bra	u1426
  8133  0027F0                     u1425:
  8134  0027F0  8C81               	bsf	3969,6,c	;volatile
  8135  0027F2                     u1426:
  8136                           
  8137                           ;lcd44780.c: 67: value >>= 1;
  8138  0027F2  90D8               	bcf	status,0,c
  8139  0027F4  3203               	rrcf	lcd_write4bits@value,f,c
  8140                           
  8141                           ;lcd44780.c: 68: RB7 = value & 1;
  8142  0027F6  B003               	btfsc	lcd_write4bits@value,0,c
  8143  0027F8  D002               	bra	u1435
  8144  0027FA  9E81               	bcf	3969,7,c	;volatile
  8145  0027FC  D001               	bra	u1436
  8146  0027FE                     u1435:
  8147  0027FE  8E81               	bsf	3969,7,c	;volatile
  8148  002800                     u1436:
  8149                           
  8150                           ;lcd44780.c: 74: RB3 = 1; _delay((unsigned long)((4)*(20000000/4000000.0))); RB3 = 0; _d
      +                          elay((unsigned long)((100)*(20000000/4000000.0)));;
  8151  002800  8681               	bsf	3969,3,c	;volatile
  8152  002802  0E06               	movlw	6
  8153  002804                     u3697:
  8154  002804  2EE8               	decfsz	wreg,f,c
  8155  002806  D7FE               	goto	u3697
  8156  002808  D000               	nop2		;nop
  8157  00280A  9681               	bcf	3969,3,c	;volatile
  8158  00280C  0EA6               	movlw	166
  8159  00280E                     u3707:
  8160  00280E  2EE8               	decfsz	wreg,f,c
  8161  002810  D7FE               	goto	u3707
  8162  002812  D000               	nop2		;nop
  8163  002814  0012               	return		;funcret
  8164  002816                     __end_of_lcd_write4bits:
  8165                           	opt stack 0
  8166                           tosu	equ	0xFFF
  8167                           tosh	equ	0xFFE
  8168                           tosl	equ	0xFFD
  8169                           pclath	equ	0xFFA
  8170                           tblptru	equ	0xFF8
  8171                           tblptrh	equ	0xFF7
  8172                           tblptrl	equ	0xFF6
  8173                           tablat	equ	0xFF5
  8174                           prodh	equ	0xFF4
  8175                           prodl	equ	0xFF3
  8176                           intcon	equ	0xFF2
  8177                           intcon2	equ	0xFF1
  8178                           postinc0	equ	0xFEE
  8179                           wreg	equ	0xFE8
  8180                           postdec1	equ	0xFE5
  8181                           fsr1l	equ	0xFE1
  8182                           indf2	equ	0xFDF
  8183                           postinc2	equ	0xFDE
  8184                           postdec2	equ	0xFDD
  8185                           fsr2h	equ	0xFDA
  8186                           fsr2l	equ	0xFD9
  8187                           status	equ	0xFD8
  8188                           
  8189 ;; *************** function _delay10ms *****************
  8190 ;; Defined at:
  8191 ;;		line 532 in file "../../../src/LC-meter.c"
  8192 ;; Parameters:    Size  Location     Type
  8193 ;;  period_10ms     2    2[COMRAM] unsigned short 
  8194 ;; Auto vars:     Size  Location     Type
  8195 ;;  ms              4    6[COMRAM] unsigned long 
  8196 ;;  run             1   10[COMRAM] unsigned char 
  8197 ;; Return value:  Size  Location     Type
  8198 ;;		None               void
  8199 ;; Registers used:
  8200 ;;		wreg, status,2, status,0, prodl, prodh
  8201 ;; Tracked objects:
  8202 ;;		On entry : 0/0
  8203 ;;		On exit  : F/0
  8204 ;;		Unchanged: 0/0
  8205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8206 ;;      Params:         2       0       0       0       0       0       0       0       0
  8207 ;;      Locals:         5       0       0       0       0       0       0       0       0
  8208 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8209 ;;      Totals:         9       0       0       0       0       0       0       0       0
  8210 ;;Total ram usage:        9 bytes
  8211 ;; Hardware stack levels used:    1
  8212 ;; Hardware stack levels required when called:    1
  8213 ;; This function calls:
  8214 ;;		Nothing
  8215 ;; This function is called by:
  8216 ;;		_main
  8217 ;;		_calibrate
  8218 ;; This function uses a non-reentrant model
  8219 ;;
  8220                           
  8221                           	psect	text47
  8222  0026D8                     __ptext47:
  8223                           	opt stack 0
  8224  0026D8                     _delay10ms:
  8225                           	opt stack 29
  8226                           
  8227                           ;LC-meter.c: 536: unsigned long int ms;
  8228                           ;LC-meter.c: 537: char run = 1;
  8229                           
  8230                           ;incstack = 0
  8231  0026D8  0E01               	movlw	1
  8232  0026DA  6E0B               	movwf	delay10ms@run,c
  8233                           
  8234                           ;LC-meter.c: 539: GIE = 0, ms = msecs, GIE = 1;
  8235  0026DC  9EF2               	bcf	intcon,7,c	;volatile
  8236  0026DE  C0D9  F007         	movff	_msecs,delay10ms@ms	;volatile
  8237  0026E2  C0DA  F008         	movff	_msecs+1,delay10ms@ms+1	;volatile
  8238  0026E6  C0DB  F009         	movff	_msecs+2,delay10ms@ms+2	;volatile
  8239  0026EA  C0DC  F00A         	movff	_msecs+3,delay10ms@ms+3	;volatile
  8240  0026EE  8EF2               	bsf	intcon,7,c	;volatile
  8241                           
  8242                           ;LC-meter.c: 544: ms += period_10ms * 10;
  8243  0026F0  0E0A               	movlw	10
  8244  0026F2  0203               	mulwf	delay10ms@period_10ms,c
  8245  0026F4  CFF3 F005          	movff	prodl,??_delay10ms
  8246  0026F8  CFF4 F006          	movff	prodh,??_delay10ms+1
  8247  0026FC  0204               	mulwf	delay10ms@period_10ms+1,c
  8248  0026FE  50F3               	movf	prodl,w,c
  8249  002700  2606               	addwf	(??_delay10ms+1)& (0+255),f,c
  8250  002702  5005               	movf	??_delay10ms,w,c
  8251  002704  2607               	addwf	delay10ms@ms,f,c
  8252  002706  5006               	movf	??_delay10ms+1,w,c
  8253  002708  2208               	addwfc	delay10ms@ms+1,f,c
  8254  00270A  0E00               	movlw	0
  8255  00270C  2209               	addwfc	delay10ms@ms+2,f,c
  8256  00270E  220A               	addwfc	delay10ms@ms+3,f,c
  8257  002710                     l3075:
  8258                           
  8259                           ;LC-meter.c: 548: GIE = 0;
  8260  002710  9EF2               	bcf	intcon,7,c	;volatile
  8261                           
  8262                           ;LC-meter.c: 549: if(ms <= msecs)
  8263  002712  5007               	movf	delay10ms@ms,w,c
  8264  002714  0100               	movlb	0	; () banked
  8265  002716  5DD9               	subwf	_msecs& (0+255),w,b	;volatile
  8266  002718  5008               	movf	delay10ms@ms+1,w,c
  8267  00271A  59DA               	subwfb	(_msecs+1)& (0+255),w,b	;volatile
  8268  00271C  5009               	movf	delay10ms@ms+2,w,c
  8269  00271E  59DB               	subwfb	(_msecs+2)& (0+255),w,b	;volatile
  8270  002720  500A               	movf	delay10ms@ms+3,w,c
  8271  002722  59DC               	subwfb	(_msecs+3)& (0+255),w,b	;volatile
  8272  002724  B0D8               	btfsc	status,0,c
  8273                           
  8274                           ; BSR set to: 0
  8275                           ;LC-meter.c: 550: run = 0;
  8276  002726  6A0B               	clrf	delay10ms@run,c
  8277                           
  8278                           ; BSR set to: 0
  8279                           ;LC-meter.c: 551: GIE = 1;
  8280  002728  8EF2               	bsf	intcon,7,c	;volatile
  8281                           
  8282                           ; BSR set to: 0
  8283                           ;LC-meter.c: 552: } while(run);
  8284  00272A  500B               	movf	delay10ms@run,w,c
  8285  00272C  B4D8               	btfsc	status,2,c
  8286                           
  8287                           ; BSR set to: 0
  8288  00272E  0012               	return		;funcret
  8289  002730  D7EF               	goto	l3075
  8290  002732                     __end_of_delay10ms:
  8291                           	opt stack 0
  8292                           tosu	equ	0xFFF
  8293                           tosh	equ	0xFFE
  8294                           tosl	equ	0xFFD
  8295                           pclath	equ	0xFFA
  8296                           tblptru	equ	0xFF8
  8297                           tblptrh	equ	0xFF7
  8298                           tblptrl	equ	0xFF6
  8299                           tablat	equ	0xFF5
  8300                           prodh	equ	0xFF4
  8301                           prodl	equ	0xFF3
  8302                           intcon	equ	0xFF2
  8303                           intcon2	equ	0xFF1
  8304                           postinc0	equ	0xFEE
  8305                           wreg	equ	0xFE8
  8306                           postdec1	equ	0xFE5
  8307                           fsr1l	equ	0xFE1
  8308                           indf2	equ	0xFDF
  8309                           postinc2	equ	0xFDE
  8310                           postdec2	equ	0xFDD
  8311                           fsr2h	equ	0xFDA
  8312                           fsr2l	equ	0xFD9
  8313                           status	equ	0xFD8
  8314                           
  8315 ;; *************** function ___lwtofl *****************
  8316 ;; Defined at:
  8317 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtofl.c"
  8318 ;; Parameters:    Size  Location     Type
  8319 ;;  c               2   60[COMRAM] unsigned int 
  8320 ;; Auto vars:     Size  Location     Type
  8321 ;;		None
  8322 ;; Return value:  Size  Location     Type
  8323 ;;                  4   60[COMRAM] unsigned int 
  8324 ;; Registers used:
  8325 ;;		wreg, status,2, status,0, cstack
  8326 ;; Tracked objects:
  8327 ;;		On entry : 0/0
  8328 ;;		On exit  : 0/0
  8329 ;;		Unchanged: 0/0
  8330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8331 ;;      Params:         4       0       0       0       0       0       0       0       0
  8332 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8333 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8334 ;;      Totals:         4       0       0       0       0       0       0       0       0
  8335 ;;Total ram usage:        4 bytes
  8336 ;; Hardware stack levels used:    1
  8337 ;; Hardware stack levels required when called:    2
  8338 ;; This function calls:
  8339 ;;		___flpack
  8340 ;; This function is called by:
  8341 ;;		_calibrate
  8342 ;;		_measure_capacitance
  8343 ;;		_measure_inductance
  8344 ;; This function uses a non-reentrant model
  8345 ;;
  8346                           
  8347                           	psect	text48
  8348  002AD6                     __ptext48:
  8349                           	opt stack 0
  8350  002AD6                     ___lwtofl:
  8351                           	opt stack 27
  8352                           
  8353                           ; BSR set to: 0
  8354                           ;incstack = 0
  8355  002AD6  C03D  F003         	movff	___lwtofl@c,___flpack@arg
  8356  002ADA  C03E  F004         	movff	___lwtofl@c+1,___flpack@arg+1
  8357  002ADE  6A05               	clrf	___flpack@arg+2,c
  8358  002AE0  6A06               	clrf	___flpack@arg+3,c
  8359  002AE2  0E96               	movlw	150
  8360  002AE4  6E07               	movwf	___flpack@exp,c
  8361  002AE6  0E00               	movlw	0
  8362  002AE8  6E08               	movwf	___flpack@sign,c
  8363  002AEA  EC3D  F010         	call	___flpack	;wreg free
  8364  002AEE  C003  F03D         	movff	?___flpack,?___lwtofl
  8365  002AF2  C004  F03E         	movff	?___flpack+1,?___lwtofl+1
  8366  002AF6  C005  F03F         	movff	?___flpack+2,?___lwtofl+2
  8367  002AFA  C006  F040         	movff	?___flpack+3,?___lwtofl+3
  8368  002AFE  0012               	return		;funcret
  8369  002B00                     __end_of___lwtofl:
  8370                           	opt stack 0
  8371                           tosu	equ	0xFFF
  8372                           tosh	equ	0xFFE
  8373                           tosl	equ	0xFFD
  8374                           pclath	equ	0xFFA
  8375                           tblptru	equ	0xFF8
  8376                           tblptrh	equ	0xFF7
  8377                           tblptrl	equ	0xFF6
  8378                           tablat	equ	0xFF5
  8379                           prodh	equ	0xFF4
  8380                           prodl	equ	0xFF3
  8381                           intcon	equ	0xFF2
  8382                           intcon2	equ	0xFF1
  8383                           postinc0	equ	0xFEE
  8384                           wreg	equ	0xFE8
  8385                           postdec1	equ	0xFE5
  8386                           fsr1l	equ	0xFE1
  8387                           indf2	equ	0xFDF
  8388                           postinc2	equ	0xFDE
  8389                           postdec2	equ	0xFDD
  8390                           fsr2h	equ	0xFDA
  8391                           fsr2l	equ	0xFD9
  8392                           status	equ	0xFD8
  8393                           
  8394 ;; *************** function ___flpack *****************
  8395 ;; Defined at:
  8396 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\double.c"
  8397 ;; Parameters:    Size  Location     Type
  8398 ;;  arg             4    2[COMRAM] unsigned long 
  8399 ;;  exp             1    6[COMRAM] unsigned char 
  8400 ;;  sign            1    7[COMRAM] unsigned char 
  8401 ;; Auto vars:     Size  Location     Type
  8402 ;;		None
  8403 ;; Return value:  Size  Location     Type
  8404 ;;                  4    2[COMRAM] unsigned char 
  8405 ;; Registers used:
  8406 ;;		wreg, status,2, status,0
  8407 ;; Tracked objects:
  8408 ;;		On entry : 0/0
  8409 ;;		On exit  : 0/0
  8410 ;;		Unchanged: 0/0
  8411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8412 ;;      Params:         6       0       0       0       0       0       0       0       0
  8413 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8414 ;;      Temps:          4       0       0       0       0       0       0       0       0
  8415 ;;      Totals:        10       0       0       0       0       0       0       0       0
  8416 ;;Total ram usage:       10 bytes
  8417 ;; Hardware stack levels used:    1
  8418 ;; Hardware stack levels required when called:    1
  8419 ;; This function calls:
  8420 ;;		Nothing
  8421 ;; This function is called by:
  8422 ;;		___altofl
  8423 ;;		___awtofl
  8424 ;;		___fladd
  8425 ;;		___fldiv
  8426 ;;		___flmul
  8427 ;;		___lltofl
  8428 ;;		___lwtofl
  8429 ;; This function uses a non-reentrant model
  8430 ;;
  8431                           
  8432                           	psect	text49
  8433  00207A                     __ptext49:
  8434                           	opt stack 0
  8435  00207A                     ___flpack:
  8436                           	opt stack 27
  8437                           
  8438                           ;incstack = 0
  8439  00207A  5007               	movf	___flpack@exp,w,c
  8440  00207C  E005               	bz	l784
  8441  00207E  5003               	movf	___flpack@arg,w,c
  8442  002080  1004               	iorwf	___flpack@arg+1,w,c
  8443  002082  1005               	iorwf	___flpack@arg+2,w,c
  8444  002084  1006               	iorwf	___flpack@arg+3,w,c
  8445  002086  E10B               	bnz	l3591
  8446  002088                     l784:
  8447  002088  6A03               	clrf	?___flpack,c
  8448  00208A  6A04               	clrf	?___flpack+1,c
  8449  00208C  6A05               	clrf	?___flpack+2,c
  8450  00208E  6A06               	clrf	?___flpack+3,c
  8451  002090  D056               	goto	l785
  8452  002092                     l3589:
  8453  002092  2A07               	incf	___flpack@exp,f,c
  8454  002094  90D8               	bcf	status,0,c
  8455  002096  3206               	rrcf	___flpack@arg+3,f,c
  8456  002098  3205               	rrcf	___flpack@arg+2,f,c
  8457  00209A  3204               	rrcf	___flpack@arg+1,f,c
  8458  00209C  3203               	rrcf	___flpack@arg,f,c
  8459  00209E                     l3591:
  8460  00209E  6A09               	clrf	??___flpack& (0+255),c
  8461  0020A0  6A0A               	clrf	(??___flpack+1)& (0+255),c
  8462  0020A2  6A0B               	clrf	(??___flpack+2)& (0+255),c
  8463  0020A4  0EFE               	movlw	254
  8464  0020A6  1406               	andwf	___flpack@arg+3,w,c
  8465  0020A8  6E0C               	movwf	(??___flpack+3)& (0+255),c
  8466  0020AA  5009               	movf	??___flpack,w,c
  8467  0020AC  100A               	iorwf	??___flpack+1,w,c
  8468  0020AE  100B               	iorwf	??___flpack+2,w,c
  8469  0020B0  100C               	iorwf	??___flpack+3,w,c
  8470  0020B2  E00C               	bz	l789
  8471  0020B4  D7EE               	goto	l3589
  8472  0020B6                     l3593:
  8473  0020B6  2A07               	incf	___flpack@exp,f,c
  8474  0020B8  2A03               	incf	___flpack@arg,f,c
  8475  0020BA  0E00               	movlw	0
  8476  0020BC  2204               	addwfc	___flpack@arg+1,f,c
  8477  0020BE  2205               	addwfc	___flpack@arg+2,f,c
  8478  0020C0  2206               	addwfc	___flpack@arg+3,f,c
  8479  0020C2  90D8               	bcf	status,0,c
  8480  0020C4  3206               	rrcf	___flpack@arg+3,f,c
  8481  0020C6  3205               	rrcf	___flpack@arg+2,f,c
  8482  0020C8  3204               	rrcf	___flpack@arg+1,f,c
  8483  0020CA  3203               	rrcf	___flpack@arg,f,c
  8484  0020CC                     l789:
  8485  0020CC  6A09               	clrf	??___flpack& (0+255),c
  8486  0020CE  6A0A               	clrf	(??___flpack+1)& (0+255),c
  8487  0020D0  6A0B               	clrf	(??___flpack+2)& (0+255),c
  8488  0020D2  5006               	movf	___flpack@arg+3,w,c
  8489  0020D4  6E0C               	movwf	(??___flpack+3)& (0+255),c
  8490  0020D6  5009               	movf	??___flpack,w,c
  8491  0020D8  100A               	iorwf	??___flpack+1,w,c
  8492  0020DA  100B               	iorwf	??___flpack+2,w,c
  8493  0020DC  100C               	iorwf	??___flpack+3,w,c
  8494  0020DE  E007               	bz	l3601
  8495  0020E0  D7EA               	goto	l3593
  8496  0020E2                     l3599:
  8497  0020E2  0607               	decf	___flpack@exp,f,c
  8498  0020E4  90D8               	bcf	status,0,c
  8499  0020E6  3603               	rlcf	___flpack@arg,f,c
  8500  0020E8  3604               	rlcf	___flpack@arg+1,f,c
  8501  0020EA  3605               	rlcf	___flpack@arg+2,f,c
  8502  0020EC  3606               	rlcf	___flpack@arg+3,f,c
  8503  0020EE                     l3601:
  8504  0020EE  BE05               	btfsc	___flpack@arg+2,7,c
  8505  0020F0  D003               	goto	l796
  8506  0020F2  0E02               	movlw	2
  8507  0020F4  6007               	cpfslt	___flpack@exp,c
  8508  0020F6  D7F5               	goto	l3599
  8509  0020F8                     l796:
  8510  0020F8  B007               	btfsc	___flpack@exp,0,c
  8511  0020FA  D002               	goto	l797
  8512  0020FC  0E7F               	movlw	127
  8513  0020FE  1605               	andwf	___flpack@arg+2,f,c
  8514  002100                     l797:
  8515  002100  90D8               	bcf	status,0,c
  8516  002102  3207               	rrcf	___flpack@exp,f,c
  8517  002104  C007  F009         	movff	___flpack@exp,??___flpack
  8518  002108  6A0A               	clrf	(??___flpack+1)& (0+255),c
  8519  00210A  6A0B               	clrf	(??___flpack+2)& (0+255),c
  8520  00210C  6A0C               	clrf	(??___flpack+3)& (0+255),c
  8521  00210E  C009  F00C         	movff	??___flpack,??___flpack+3
  8522  002112  6A0B               	clrf	??___flpack+2,c
  8523  002114  6A0A               	clrf	??___flpack+1,c
  8524  002116  6A09               	clrf	??___flpack,c
  8525  002118  5009               	movf	??___flpack,w,c
  8526  00211A  1203               	iorwf	___flpack@arg,f,c
  8527  00211C  500A               	movf	??___flpack+1,w,c
  8528  00211E  1204               	iorwf	___flpack@arg+1,f,c
  8529  002120  500B               	movf	??___flpack+2,w,c
  8530  002122  1205               	iorwf	___flpack@arg+2,f,c
  8531  002124  500C               	movf	??___flpack+3,w,c
  8532  002126  1206               	iorwf	___flpack@arg+3,f,c
  8533  002128  5008               	movf	___flpack@sign,w,c
  8534  00212A  A4D8               	btfss	status,2,c
  8535  00212C  8E06               	bsf	___flpack@arg+3,7,c
  8536  00212E  C003  F003         	movff	___flpack@arg,?___flpack
  8537  002132  C004  F004         	movff	___flpack@arg+1,?___flpack+1
  8538  002136  C005  F005         	movff	___flpack@arg+2,?___flpack+2
  8539  00213A  C006  F006         	movff	___flpack@arg+3,?___flpack+3
  8540  00213E                     l785:
  8541  00213E  0012               	return		;funcret
  8542  002140                     __end_of___flpack:
  8543                           	opt stack 0
  8544                           tosu	equ	0xFFF
  8545                           tosh	equ	0xFFE
  8546                           tosl	equ	0xFFD
  8547                           pclath	equ	0xFFA
  8548                           tblptru	equ	0xFF8
  8549                           tblptrh	equ	0xFF7
  8550                           tblptrl	equ	0xFF6
  8551                           tablat	equ	0xFF5
  8552                           prodh	equ	0xFF4
  8553                           prodl	equ	0xFF3
  8554                           intcon	equ	0xFF2
  8555                           intcon2	equ	0xFF1
  8556                           postinc0	equ	0xFEE
  8557                           wreg	equ	0xFE8
  8558                           postdec1	equ	0xFE5
  8559                           fsr1l	equ	0xFE1
  8560                           indf2	equ	0xFDF
  8561                           postinc2	equ	0xFDE
  8562                           postdec2	equ	0xFDD
  8563                           fsr2h	equ	0xFDA
  8564                           fsr2l	equ	0xFD9
  8565                           status	equ	0xFD8
  8566                           
  8567 ;; *************** function _isr *****************
  8568 ;; Defined at:
  8569 ;;		line 79 in file "../../../src/LC-meter.c"
  8570 ;; Parameters:    Size  Location     Type
  8571 ;;		None
  8572 ;; Auto vars:     Size  Location     Type
  8573 ;;		None
  8574 ;; Return value:  Size  Location     Type
  8575 ;;                  2  485[None  ] int 
  8576 ;; Registers used:
  8577 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8578 ;; Tracked objects:
  8579 ;;		On entry : 0/0
  8580 ;;		On exit  : 0/0
  8581 ;;		Unchanged: 0/0
  8582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8583 ;;      Params:         0       0       0       0       0       0       0       0       0
  8584 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8585 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8586 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8587 ;;Total ram usage:        2 bytes
  8588 ;; Hardware stack levels used:    1
  8589 ;; This function calls:
  8590 ;;		Nothing
  8591 ;; This function is called by:
  8592 ;;		Interrupt level 2
  8593 ;; This function uses a non-reentrant model
  8594 ;;
  8595                           
  8596                           	psect	intcode
  8597  000008                     __pintcode:
  8598                           	opt stack 0
  8599  000008                     _isr:
  8600                           	opt stack 23
  8601                           
  8602                           ;incstack = 0
  8603  000008  CFD9 F001          	movff	fsr2l,??_isr
  8604  00000C  CFDA F002          	movff	fsr2h,??_isr+1
  8605  000010  EDA0  F010         	call	int_func,f	;refresh shadow registers
  8606                           tosu	equ	0xFFF
  8607                           tosh	equ	0xFFE
  8608                           tosl	equ	0xFFD
  8609                           pclath	equ	0xFFA
  8610                           tblptru	equ	0xFF8
  8611                           tblptrh	equ	0xFF7
  8612                           tblptrl	equ	0xFF6
  8613                           tablat	equ	0xFF5
  8614                           prodh	equ	0xFF4
  8615                           prodl	equ	0xFF3
  8616                           intcon	equ	0xFF2
  8617                           intcon2	equ	0xFF1
  8618                           postinc0	equ	0xFEE
  8619                           wreg	equ	0xFE8
  8620                           postdec1	equ	0xFE5
  8621                           fsr1l	equ	0xFE1
  8622                           indf2	equ	0xFDF
  8623                           postinc2	equ	0xFDE
  8624                           postdec2	equ	0xFDD
  8625                           fsr2h	equ	0xFDA
  8626                           fsr2l	equ	0xFD9
  8627                           status	equ	0xFD8
  8628                           
  8629                           	psect	intcode_body
  8630  002140                     __pintcode_body:
  8631                           	opt stack 23
  8632  002140                     int_func:
  8633                           	opt stack 23
  8634  002140  0006               	pop		; remove dummy address from shadow register refresh
  8635                           
  8636                           ;LC-meter.c: 81: if(TMR2IF) {
  8637  002142  A29E               	btfss	3998,1,c	;volatile
  8638  002144  D035               	goto	i2l3475
  8639                           
  8640                           ;LC-meter.c: 83: bres += 256;
  8641  002146  0100               	movlb	0	; () banked
  8642  002148  2BF7               	incf	(_bres+1)& (0+255),f,b	;volatile
  8643                           
  8644                           ;LC-meter.c: 85: if(bres >= 5000) {
  8645  00214A  0E88               	movlw	136
  8646  00214C  5DF6               	subwf	_bres& (0+255),w,b	;volatile
  8647  00214E  0E13               	movlw	19
  8648  002150  59F7               	subwfb	(_bres+1)& (0+255),w,b	;volatile
  8649  002152  E32D               	bnc	i2l3473
  8650                           
  8651                           ; BSR set to: 0
  8652                           ;LC-meter.c: 86: bres -= 5000;
  8653  002154  0E88               	movlw	136
  8654  002156  5FF6               	subwf	_bres& (0+255),f,b	;volatile
  8655  002158  0E13               	movlw	19
  8656  00215A  5BF7               	subwfb	(_bres+1)& (0+255),f,b	;volatile
  8657                           
  8658                           ; BSR set to: 0
  8659                           ;LC-meter.c: 87: msecpart++;
  8660  00215C  4BF8               	infsnz	_msecpart& (0+255),f,b	;volatile
  8661  00215E  2BF9               	incf	(_msecpart+1)& (0+255),f,b	;volatile
  8662                           
  8663                           ; BSR set to: 0
  8664                           ;LC-meter.c: 88: msecs++;
  8665  002160  2BD9               	incf	_msecs& (0+255),f,b	;volatile
  8666  002162  0E00               	movlw	0
  8667  002164  23DA               	addwfc	(_msecs+1)& (0+255),f,b	;volatile
  8668  002166  23DB               	addwfc	(_msecs+2)& (0+255),f,b	;volatile
  8669  002168  23DC               	addwfc	(_msecs+3)& (0+255),f,b	;volatile
  8670                           
  8671                           ; BSR set to: 0
  8672                           ;LC-meter.c: 90: RC3 = (((blink > 200)) == 0);
  8673  00216A  51E6               	movf	(_blink+1)& (0+255),w,b
  8674  00216C  E105               	bnz	i2u270_40
  8675  00216E  0EC9               	movlw	201
  8676  002170  5DE5               	subwf	_blink& (0+255),w,b
  8677  002172  E202               	bc	i2u270_40
  8678  002174  8682               	bsf	3970,3,c	;volatile
  8679  002176  D001               	goto	i2l3463
  8680  002178                     i2u270_40:
  8681  002178  9682               	bcf	3970,3,c	;volatile
  8682  00217A                     i2l3463:
  8683                           
  8684                           ;LC-meter.c: 91: if(blink >= 400)
  8685  00217A  0E90               	movlw	144
  8686  00217C  0100               	movlb	0	; () banked
  8687  00217E  5DE5               	subwf	_blink& (0+255),w,b
  8688  002180  0E01               	movlw	1
  8689  002182  59E6               	subwfb	(_blink+1)& (0+255),w,b
  8690  002184  E304               	bnc	i2l3467
  8691                           
  8692                           ; BSR set to: 0
  8693                           ;LC-meter.c: 92: blink -= 400;
  8694  002186  0E90               	movlw	144
  8695  002188  5FE5               	subwf	_blink& (0+255),f,b
  8696  00218A  0E01               	movlw	1
  8697  00218C  5BE6               	subwfb	(_blink+1)& (0+255),f,b
  8698  00218E                     i2l3467:
  8699                           
  8700                           ; BSR set to: 0
  8701                           ;LC-meter.c: 93: ++blink;
  8702  00218E  4BE5               	infsnz	_blink& (0+255),f,b
  8703  002190  2BE6               	incf	(_blink+1)& (0+255),f,b
  8704                           
  8705                           ; BSR set to: 0
  8706                           ;LC-meter.c: 96: if(msecpart >= 1000) {
  8707  002192  0EE8               	movlw	232
  8708  002194  5DF8               	subwf	_msecpart& (0+255),w,b	;volatile
  8709  002196  0E03               	movlw	3
  8710  002198  59F9               	subwfb	(_msecpart+1)& (0+255),w,b	;volatile
  8711  00219A  E309               	bnc	i2l3473
  8712                           
  8713                           ; BSR set to: 0
  8714                           ;LC-meter.c: 98: seconds++;
  8715  00219C  2BDD               	incf	_seconds& (0+255),f,b	;volatile
  8716  00219E  0E00               	movlw	0
  8717  0021A0  23DE               	addwfc	(_seconds+1)& (0+255),f,b	;volatile
  8718  0021A2  23DF               	addwfc	(_seconds+2)& (0+255),f,b	;volatile
  8719  0021A4  23E0               	addwfc	(_seconds+3)& (0+255),f,b	;volatile
  8720                           
  8721                           ;LC-meter.c: 99: msecpart -= 1000;
  8722  0021A6  0EE8               	movlw	232
  8723  0021A8  5FF8               	subwf	_msecpart& (0+255),f,b	;volatile
  8724  0021AA  0E03               	movlw	3
  8725  0021AC  5BF9               	subwfb	(_msecpart+1)& (0+255),f,b	;volatile
  8726  0021AE                     i2l3473:
  8727                           
  8728                           ; BSR set to: 0
  8729                           ;LC-meter.c: 100: }
  8730                           ;LC-meter.c: 101: }
  8731                           ;LC-meter.c: 103: TMR2IF = 0;
  8732  0021AE  929E               	bcf	3998,1,c	;volatile
  8733  0021B0                     i2l3475:
  8734                           
  8735                           ;LC-meter.c: 104: }
  8736                           ;LC-meter.c: 106: if(RCIF) { rxfifo[rxiptr] = RCREG; ser_tmp = (rxiptr + 1) & ((unsigned
      +                           char)16 - 1); if(ser_tmp != rxoptr) rxiptr = ser_tmp; }; if(TXIF && TXIE) { TXREG = txf
      +                          ifo[txoptr]; ++txoptr; txoptr &= ((unsigned char)16 - 1); if(txoptr == txiptr) { TXIE = 
      +                          0; }
  8737  0021B0  AA9E               	btfss	3998,5,c	;volatile
  8738  0021B2  D011               	goto	i2l490
  8739  0021B4  0E00               	movlw	low _rxfifo
  8740  0021B6  0100               	movlb	0	; () banked
  8741  0021B8  25EB               	addwf	_rxiptr& (0+255),w,b	;volatile
  8742  0021BA  6ED9               	movwf	fsr2l,c
  8743  0021BC  6ADA               	clrf	fsr2h,c
  8744  0021BE  0E01               	movlw	high _rxfifo
  8745  0021C0  22DA               	addwfc	fsr2h,f,c
  8746  0021C2  CFAE FFDF          	movff	4014,indf2	;volatile
  8747                           
  8748                           ; BSR set to: 0
  8749  0021C6  29EB               	incf	_rxiptr& (0+255),w,b	;volatile
  8750  0021C8  0B0F               	andlw	15
  8751  0021CA  6FED               	movwf	_ser_tmp& (0+255),b
  8752                           
  8753                           ; BSR set to: 0
  8754  0021CC  51EC               	movf	_rxoptr& (0+255),w,b	;volatile
  8755  0021CE  19ED               	xorwf	_ser_tmp& (0+255),w,b
  8756  0021D0  A4D8               	btfss	status,2,c
  8757                           
  8758                           ; BSR set to: 0
  8759  0021D2  C0ED  F0EB         	movff	_ser_tmp,_rxiptr	;volatile
  8760  0021D6                     i2l490:
  8761  0021D6  B89E               	btfsc	3998,4,c	;volatile
  8762  0021D8  A89D               	btfss	3997,4,c	;volatile
  8763  0021DA  D00E               	goto	i2l494
  8764  0021DC  505D               	movf	_txoptr,w,c
  8765  0021DE  0FC1               	addlw	low _txfifo
  8766  0021E0  6ED9               	movwf	fsr2l,c
  8767  0021E2  6ADA               	clrf	fsr2h,c
  8768  0021E4  50DF               	movf	indf2,w,c
  8769  0021E6  6EAD               	movwf	4013,c	;volatile
  8770  0021E8  2A5D               	incf	_txoptr,f,c	;volatile
  8771  0021EA  0E0F               	movlw	15
  8772  0021EC  165D               	andwf	_txoptr,f,c	;volatile
  8773  0021EE  505C               	movf	_txiptr,w,c	;volatile
  8774  0021F0  185D               	xorwf	_txoptr,w,c	;volatile
  8775  0021F2  B4D8               	btfsc	status,2,c
  8776  0021F4  989D               	bcf	3997,4,c	;volatile
  8777  0021F6  989E               	bcf	3998,4,c	;volatile
  8778  0021F8                     i2l494:
  8779  0021F8  C002  FFDA         	movff	??_isr+1,fsr2h
  8780  0021FC  C001  FFD9         	movff	??_isr,fsr2l
  8781  002200  0011               	retfie		f
  8782  002202                     __end_of_isr:
  8783                           	opt stack 0
  8784                           tosu	equ	0xFFF
  8785                           tosh	equ	0xFFE
  8786                           tosl	equ	0xFFD
  8787                           pclath	equ	0xFFA
  8788                           tblptru	equ	0xFF8
  8789                           tblptrh	equ	0xFF7
  8790                           tblptrl	equ	0xFF6
  8791                           tablat	equ	0xFF5
  8792                           prodh	equ	0xFF4
  8793                           prodl	equ	0xFF3
  8794                           intcon	equ	0xFF2
  8795                           intcon2	equ	0xFF1
  8796                           postinc0	equ	0xFEE
  8797                           wreg	equ	0xFE8
  8798                           postdec1	equ	0xFE5
  8799                           fsr1l	equ	0xFE1
  8800                           indf2	equ	0xFDF
  8801                           postinc2	equ	0xFDE
  8802                           postdec2	equ	0xFDD
  8803                           fsr2h	equ	0xFDA
  8804                           fsr2l	equ	0xFD9
  8805                           status	equ	0xFD8
  8806                           tosu	equ	0xFFF
  8807                           tosh	equ	0xFFE
  8808                           tosl	equ	0xFFD
  8809                           pclath	equ	0xFFA
  8810                           tblptru	equ	0xFF8
  8811                           tblptrh	equ	0xFF7
  8812                           tblptrl	equ	0xFF6
  8813                           tablat	equ	0xFF5
  8814                           prodh	equ	0xFF4
  8815                           prodl	equ	0xFF3
  8816                           intcon	equ	0xFF2
  8817                           intcon2	equ	0xFF1
  8818                           postinc0	equ	0xFEE
  8819                           wreg	equ	0xFE8
  8820                           postdec1	equ	0xFE5
  8821                           fsr1l	equ	0xFE1
  8822                           indf2	equ	0xFDF
  8823                           postinc2	equ	0xFDE
  8824                           postdec2	equ	0xFDD
  8825                           fsr2h	equ	0xFDA
  8826                           fsr2l	equ	0xFD9
  8827                           status	equ	0xFD8
  8828                           
  8829                           	psect	rparam
  8830  0000                     tosu	equ	0xFFF
  8831                           tosh	equ	0xFFE
  8832                           tosl	equ	0xFFD
  8833                           pclath	equ	0xFFA
  8834                           tblptru	equ	0xFF8
  8835                           tblptrh	equ	0xFF7
  8836                           tblptrl	equ	0xFF6
  8837                           tablat	equ	0xFF5
  8838                           prodh	equ	0xFF4
  8839                           prodl	equ	0xFF3
  8840                           intcon	equ	0xFF2
  8841                           intcon2	equ	0xFF1
  8842                           postinc0	equ	0xFEE
  8843                           wreg	equ	0xFE8
  8844                           postdec1	equ	0xFE5
  8845                           fsr1l	equ	0xFE1
  8846                           indf2	equ	0xFDF
  8847                           postinc2	equ	0xFDE
  8848                           postdec2	equ	0xFDD
  8849                           fsr2h	equ	0xFDA
  8850                           fsr2l	equ	0xFD9
  8851                           status	equ	0xFD8


Data Sizes:
    Strings     145
    Constant    76
    Data        6
    BSS         86
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     91      93
    BANK0           160     97     160
    BANK1           256      0      35
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(1) Largest target is 40
		 -> exp@coeff(CODE[40]), log@coeff(CODE[36]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(BANK0[2]), 

    put_str@s	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_34(CODE[13]), STR_25(CODE[10]), STR_23(CODE[15]), STR_21(CODE[12]), 
		 -> STR_20(CODE[6]), 

    sp__memcpy	PTR void  size(2) Largest target is 19
		 -> buffer.x(BANK1[16]), buffer(BANK1[19]), 

    lcd_puts@string	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_18(CODE[5]), STR_17(CODE[6]), STR_16(CODE[7]), STR_15(CODE[7]), 
		 -> STR_13(CODE[10]), STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[6]), 

    putchar_ptr	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> output_putch(), format_putchar(), ser_putch(), lcd_putch(), 

    ser_puts@s	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_33(CODE[3]), STR_32(CODE[5]), STR_31(CODE[3]), STR_30(CODE[8]), 
		 -> STR_29(CODE[6]), STR_28(CODE[6]), STR_27(CODE[6]), STR_26(CODE[5]), 
		 -> STR_24(CODE[3]), STR_22(CODE[3]), STR_19(CODE[3]), STR_14(CODE[6]), 
		 -> STR_9(CODE[3]), 

    print_unit@units	PTR const unsigned char [8] size(1) Largest target is 3
		 -> STR_8(CODE[3]), STR_7(CODE[3]), STR_6(CODE[3]), STR_5(CODE[3]), 
		 -> STR_4(CODE[3]), STR_3(CODE[3]), STR_2(CODE[3]), STR_1(CODE[2]), 

    S33$op	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    buffer.op	PTR FTN(unsigned char ,)void  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _measure_inductance->___fltol
    _print_unit->_lcd_gotoxy
    _print_reading->_format_number
    _format_xint32->_format_number
    _ldexp->_eval_poly
    _floor->___altofl
    ___fltol->_log10
    ___altofl->___fltol
    ___flsub->___fladd
    ___fldiv->___flpack
    ___lltofl->___flpack
    _log10->_log
    _log->_eval_poly
    _eval_poly->___fladd
    ___flmul->___fldiv
    ___fladd->___flmul
    ___awtofl->___flpack
    _lcd_begin->_lcd_command
    _indicator->_lcd_gotoxy
    _lcd_puts->_lcd_putch
    _calibrate->___lwtofl
    _ser_puts->_ser_putch
    _measure_freq->_format_number
    _put_str->_output_putch
    _lcd_gotoxy->_lcd_command
    _format_number->___lwdiv
    _output_putch->_lcd_putch
    _lcd_putch->_lcd_send
    _lcd_clear->_lcd_command
    _lcd_command->_lcd_send
    _lcd_send->_lcd_write4bits
    ___lwtofl->_measure_freq

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_measure_capacitance
    _measure_inductance->___fltol
    _measure_capacitance->_format_double
    _format_double->_pow
    _pow->_exp
    _exp->_floor
    _floor->___altofl
    ___fltol->_log10
    ___altofl->___fltol

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  399347
                          _calibrate
                          _delay10ms
                      _format_double
                          _indicator
                          _lcd_begin
                          _lcd_clear
                         _lcd_gotoxy
                           _lcd_init
                           _lcd_puts
                _measure_capacitance
                 _measure_inductance
                           _ser_init
                           _ser_puts
                        _timer2_init
 ---------------------------------------------------------------------------------
 (1) _timer2_init                                          4     4      0     156
                                              2 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _measure_inductance                                  55    55      0   37569
                                             12 BANK0     43    43      0
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___lwtofl
                         _lcd_gotoxy
                       _measure_freq
                      _print_reading
                         _print_unit
                            _put_str
 ---------------------------------------------------------------------------------
 (1) _measure_capacitance                                 19    19      0  193031
                                             78 BANK0     19    19      0
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___lwtofl
                      _format_double
                      _format_xint32
                         _lcd_gotoxy
                       _measure_freq
                      _print_reading
                         _print_unit
                            _put_str
                          _ser_putch
                           _ser_puts
 ---------------------------------------------------------------------------------
 (2) _print_unit                                           3     3      0    1759
                                             12 COMRAM     2     2      0
                         _lcd_gotoxy
                           _ser_puts
 ---------------------------------------------------------------------------------
 (2) _print_reading                                        6     4      2    6204
                                             52 COMRAM     6     4      2
                            ___lwdiv
                            ___lwmod
                      _format_number
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (2) _format_xint32                                        4     0      4    4192
                                             52 COMRAM     4     0      4
                      _format_number
                     _format_putchar *
                          _lcd_putch *
                       _output_putch *
                          _ser_putch *
 ---------------------------------------------------------------------------------
 (2) _format_double                                       20    16      4  151247
                                             58 BANK0     20    16      4
                           ___awtofl
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                              _floor
                     _format_putchar *
                          _lcd_putch *
                              _log10
                       _output_putch *
                                _pow
                          _ser_putch *
 ---------------------------------------------------------------------------------
 (3) _pow                                                 21    13      8   84209
                                             37 BANK0     21    13      8
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___lltofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _exp                                                 11     7      4   44736
                                             26 BANK0     11     7      4
                           ___awtofl
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (5) _ldexp                                                8     2      6     354
                                             78 COMRAM     8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (5) _floor                                               10     6      4   10260
                                             16 BANK0     10     6      4
                           ___altofl
                            ___fladd
                            ___fldiv (ARG)
                             ___flge
                            ___fltol
                              _frexp
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     882
                                             88 COMRAM     2     2      0
                                              4 BANK0      8     4      4
                            ___fldiv (ARG)
                              _log10 (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                               8     0      8    1594
                                              2 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (6) ___altofl                                             5     1      4    2446
                                             90 COMRAM     1     1      0
                                             12 BANK0      4     0      4
                           ___flpack
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    5269
                                             66 COMRAM     8     0      8
                           ___awtofl (ARG)
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4     204
                                              2 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             15     7      8    4021
                                             12 COMRAM    15     7      8
                           ___flpack
 ---------------------------------------------------------------------------------
 (4) ___lltofl                                             4     0      4    2344
                                             12 COMRAM     4     0      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (3) _log10                                                8     4      4   33887
                                             84 COMRAM     4     0      4
                                              0 BANK0      4     4      0
                            ___flmul
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  6     2      4   26714
                                             78 COMRAM     6     2      4
                           ___awtofl
                            ___fladd
                            ___flmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                7     2      5     582
                                              2 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           12     5      7   11855
                                             66 COMRAM    12     5      7
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             28    20      8    6998
                                             27 COMRAM    27    19      8
                           ___awtofl (ARG)
                            ___fldiv (ARG)
                           ___flpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             12     4      8    4213
                                             54 COMRAM    12     4      8
                           ___awtofl (ARG)
                            ___flmul (ARG)
                           ___flpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awtofl                                             9     5      4    2686
                                             12 COMRAM     5     1      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             3     3      0      46
                                              2 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcd_begin                                            3     2      1     517
                                              6 COMRAM     3     2      1
                        _lcd_command
                     _lcd_write4bits
 ---------------------------------------------------------------------------------
 (1) _indicator                                            1     1      0    1954
                                             12 COMRAM     1     1      0
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (3) _lcd_puts                                             3     3      0     591
                                              6 COMRAM     3     3      0
                          _lcd_putch
 ---------------------------------------------------------------------------------
 (1) _calibrate                                            1     1      0   11552
                                             64 COMRAM     1     1      0
                           ___lwtofl
                          _delay10ms
                          _lcd_clear
                         _lcd_gotoxy
                          _lcd_putch
                       _measure_freq
                            _put_str
                           _ser_puts
 ---------------------------------------------------------------------------------
 (1) _ser_puts                                             1     1      0     418
                                              3 COMRAM     1     1      0
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _measure_freq                                         8     6      2    5270
                                             52 COMRAM     8     6      2
                      _format_number
                         _lcd_gotoxy
                            _put_str
 ---------------------------------------------------------------------------------
 (2) _put_str                                              3     3      0     576
                                              7 COMRAM     3     3      0
                       _output_putch
 ---------------------------------------------------------------------------------
 (3) _lcd_gotoxy                                           6     5      1    1341
                                              6 COMRAM     6     5      1
                        _lcd_command
 ---------------------------------------------------------------------------------
 (3) _format_number                                       43    39      4    3171
                                              9 COMRAM    43    39      4
                            ___lwdiv
                            ___lwmod
                     _format_putchar *
                          _lcd_putch *
                       _output_putch *
                          _ser_putch *
 ---------------------------------------------------------------------------------
 (3) _output_putch                                         1     1      0     351
                                              6 COMRAM     1     1      0
                          _lcd_putch
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _ser_putch                                            1     1      0      22
                                              2 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _lcd_putch                                            1     1      0     285
                                              5 COMRAM     1     1      0
                           _lcd_send
 ---------------------------------------------------------------------------------
 (4) _format_putchar                                       1     1      0       0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     451
                                              2 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     454
                                              2 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            1     1      0     285
                                              6 COMRAM     1     1      0
                        _lcd_command
 ---------------------------------------------------------------------------------
 (4) _lcd_command                                          1     1      0     285
                                              5 COMRAM     1     1      0
                           _lcd_send
 ---------------------------------------------------------------------------------
 (5) _lcd_send                                             2     1      1     263
                                              3 COMRAM     2     1      1
                     _lcd_write4bits
 ---------------------------------------------------------------------------------
 (6) _lcd_write4bits                                       1     1      0      91
                                              2 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _delay10ms                                            9     7      2     640
                                              2 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4    2669
                                             60 COMRAM     4     0      4
                           ___flpack
                       _measure_freq (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6    2248
                                              2 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calibrate
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _format_number
           ___lwdiv
           ___lwmod
           _format_putchar *
           _lcd_putch *
             _lcd_send
               _lcd_write4bits
           _output_putch *
             _lcd_putch
               _lcd_send
                 _lcd_write4bits
             _ser_putch
           _ser_putch *
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _put_str
           _output_putch
             _lcd_putch
               _lcd_send
                 _lcd_write4bits
             _ser_putch
     _delay10ms
     _lcd_clear
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_putch
       _lcd_send
         _lcd_write4bits
     _measure_freq
       _format_number
         ___lwdiv
         ___lwmod
         _format_putchar *
         _lcd_putch *
           _lcd_send
             _lcd_write4bits
         _output_putch *
           _lcd_putch
             _lcd_send
               _lcd_write4bits
           _ser_putch
         _ser_putch *
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _put_str
         _output_putch
           _lcd_putch
             _lcd_send
               _lcd_write4bits
           _ser_putch
     _put_str
       _output_putch
         _lcd_putch
           _lcd_send
             _lcd_write4bits
         _ser_putch
     _ser_puts
       _ser_putch
   _delay10ms
   _format_double
     ___awtofl
       ___flpack
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     _floor
       ___altofl
         ___flpack
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
       ___fladd
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___fldiv (ARG)
         ___flpack
       ___flge (ARG)
       ___fltol (ARG)
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       _frexp (ARG)
     _format_putchar *
     _lcd_putch *
       _lcd_send
         _lcd_write4bits
     _log10 *
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       _log
         ___awtofl
           ___flpack
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _frexp
     _output_putch *
       _lcd_putch
         _lcd_send
           _lcd_write4bits
       _ser_putch
     _pow *
       ___flge
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       ___flneg
       ___fltol
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       ___lltofl
         ___flpack
       _exp
         ___awtofl
           ___flpack
         ___fldiv
           ___flpack
         ___flge
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         ___flsub
           ___awtofl (ARG)
             ___flpack
           ___fladd (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _floor
           ___altofl
             ___flpack
             ___fltol (ARG)
               ___fldiv (ARG)
                 ___flpack
               _log10 (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _log
                   ___awtofl
                     ___flpack
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___fladd
                       ___awtofl (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                   _frexp
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___fldiv (ARG)
             ___flpack
           ___flge (ARG)
           ___fltol (ARG)
             ___fldiv (ARG)
               ___flpack
             _log10 (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
           _frexp (ARG)
         _ldexp
           _eval_poly (ARG)
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
         _log (ARG)
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
       _log
         ___awtofl
           ___flpack
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
         _frexp
     _ser_putch *
   _indicator
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_puts
       _lcd_putch
         _lcd_send
           _lcd_write4bits
   _lcd_begin
     _lcd_command
       _lcd_send
         _lcd_write4bits
     _lcd_write4bits
   _lcd_clear
     _lcd_command
       _lcd_send
         _lcd_write4bits
   _lcd_gotoxy
     _lcd_command
       _lcd_send
         _lcd_write4bits
   _lcd_init
   _lcd_puts
     _lcd_putch
       _lcd_send
         _lcd_write4bits
   _measure_capacitance
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _format_number
           ___lwdiv
           ___lwmod
           _format_putchar *
           _lcd_putch *
             _lcd_send
               _lcd_write4bits
           _output_putch *
             _lcd_putch
               _lcd_send
                 _lcd_write4bits
             _ser_putch
           _ser_putch *
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _put_str
           _output_putch
             _lcd_putch
               _lcd_send
                 _lcd_write4bits
             _ser_putch
     _format_double
       ___awtofl
         ___flpack
       ___fldiv
         ___flpack
       ___flge
       ___flmul
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
       ___flsub
         ___awtofl (ARG)
           ___flpack
         ___fladd (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
       ___fltol
         ___fldiv (ARG)
           ___flpack
         _log10 (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _log
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
       _floor
         ___altofl
           ___flpack
           ___fltol (ARG)
             ___fldiv (ARG)
               ___flpack
             _log10 (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flmul (ARG)
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flpack (ARG)
           _frexp (ARG)
         ___fldiv (ARG)
           ___flpack
         ___flge (ARG)
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
         _frexp (ARG)
       _format_putchar *
       _lcd_putch *
         _lcd_send
           _lcd_write4bits
       _log10 *
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
       _output_putch *
         _lcd_putch
           _lcd_send
             _lcd_write4bits
         _ser_putch
       _pow *
         ___flge
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flneg
         ___fltol
           ___fldiv (ARG)
             ___flpack
           _log10 (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _log
               ___awtofl
                 ___flpack
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
               _frexp
         ___lltofl
           ___flpack
         _exp
           ___awtofl
             ___flpack
           ___fldiv
             ___flpack
           ___flge
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           ___flneg
           ___flsub
             ___awtofl (ARG)
               ___flpack
             ___fladd (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           ___fltol
             ___fldiv (ARG)
               ___flpack
             _log10 (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtofl
                   ___flpack
                 ___fladd
                   ___awtofl (ARG)
                     ___flpack
                   ___flmul (ARG)
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                 _frexp
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _floor
             ___altofl
               ___flpack
               ___fltol (ARG)
                 ___fldiv (ARG)
                   ___flpack
                 _log10 (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   _log
                     ___awtofl
                       ___flpack
                     ___fladd
                       ___awtofl (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     _eval_poly
                       ___fladd
                         ___awtofl (ARG)
                           ___flpack
                         ___flmul (ARG)
                           ___awtofl (ARG)
                             ___flpack
                           ___fldiv (ARG)
                             ___flpack
                           ___flpack (ARG)
                           _frexp (ARG)
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flmul
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                     _frexp
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___fldiv (ARG)
               ___flpack
             ___flge (ARG)
             ___fltol (ARG)
               ___fldiv (ARG)
                 ___flpack
               _log10 (ARG)
                 ___flmul
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 _log
                   ___awtofl
                     ___flpack
                   ___fladd
                     ___awtofl (ARG)
                       ___flpack
                     ___flmul (ARG)
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flpack (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___awtofl (ARG)
                       ___flpack
                     ___fldiv (ARG)
                       ___flpack
                     ___flpack (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___fladd
                       ___awtofl (ARG)
                         ___flpack
                       ___flmul (ARG)
                         ___awtofl (ARG)
                           ___flpack
                         ___fldiv (ARG)
                           ___flpack
                         ___flpack (ARG)
                         _frexp (ARG)
                       ___flpack (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___awtofl (ARG)
                         ___flpack
                       ___fldiv (ARG)
                         ___flpack
                       ___flpack (ARG)
                       _frexp (ARG)
                   _frexp
             _frexp (ARG)
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
           _log (ARG)
             ___awtofl
               ___flpack
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___fladd
                 ___awtofl (ARG)
                   ___flpack
                 ___flmul (ARG)
                   ___awtofl (ARG)
                     ___flpack
                   ___fldiv (ARG)
                     ___flpack
                   ___flpack (ARG)
                   _frexp (ARG)
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flmul
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
             _frexp
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
       _ser_putch *
     _format_xint32
       _format_number
         ___lwdiv
         ___lwmod
         _format_putchar *
         _lcd_putch *
           _lcd_send
             _lcd_write4bits
         _output_putch *
           _lcd_putch
             _lcd_send
               _lcd_write4bits
           _ser_putch
         _ser_putch *
       _format_putchar *
       _lcd_putch *
         _lcd_send
           _lcd_write4bits
       _output_putch *
         _lcd_putch
           _lcd_send
             _lcd_write4bits
         _ser_putch
       _ser_putch *
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _measure_freq
       _format_number
         ___lwdiv
         ___lwmod
         _format_putchar *
         _lcd_putch *
           _lcd_send
             _lcd_write4bits
         _output_putch *
           _lcd_putch
             _lcd_send
               _lcd_write4bits
           _ser_putch
         _ser_putch *
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _put_str
         _output_putch
           _lcd_putch
             _lcd_send
               _lcd_write4bits
           _ser_putch
     _print_reading
       ___lwdiv
       ___lwmod
       _format_number
         ___lwdiv
         ___lwmod
         _format_putchar *
         _lcd_putch *
           _lcd_send
             _lcd_write4bits
         _output_putch *
           _lcd_putch
             _lcd_send
               _lcd_write4bits
           _ser_putch
         _ser_putch *
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _lcd_puts
         _lcd_putch
           _lcd_send
             _lcd_write4bits
     _print_unit
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _ser_puts
         _ser_putch
     _put_str
       _output_putch
         _lcd_putch
           _lcd_send
             _lcd_write4bits
         _ser_putch
     _ser_putch
     _ser_puts
       _ser_putch
   _measure_inductance
     ___fldiv
       ___flpack
     ___flge
     ___flmul
       ___awtofl (ARG)
         ___flpack
       ___fldiv (ARG)
         ___flpack
       ___flpack (ARG)
       _frexp (ARG)
     ___flsub
       ___awtofl (ARG)
         ___flpack
       ___fladd (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flmul (ARG)
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         ___flpack (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___awtofl (ARG)
           ___flpack
         ___fldiv (ARG)
           ___flpack
         ___flpack (ARG)
         _frexp (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flpack
       _log10 (ARG)
         ___flmul
           ___awtofl (ARG)
             ___flpack
           ___fldiv (ARG)
             ___flpack
           ___flpack (ARG)
           _frexp (ARG)
         _log
           ___awtofl
             ___flpack
           ___fladd
             ___awtofl (ARG)
               ___flpack
             ___flmul (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
             ___flpack (ARG)
             _frexp (ARG)
           ___flmul
             ___awtofl (ARG)
               ___flpack
             ___fldiv (ARG)
               ___flpack
             ___flpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___fladd
               ___awtofl (ARG)
                 ___flpack
               ___flmul (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 ___fldiv (ARG)
                   ___flpack
                 ___flpack (ARG)
                 _frexp (ARG)
               ___flpack (ARG)
               _frexp (ARG)
             ___flmul
               ___awtofl (ARG)
                 ___flpack
               ___fldiv (ARG)
                 ___flpack
               ___flpack (ARG)
               _frexp (ARG)
           _frexp
     ___lwtofl
       ___flpack
       _measure_freq (ARG)
         _format_number
           ___lwdiv
           ___lwmod
           _format_putchar *
           _lcd_putch *
             _lcd_send
               _lcd_write4bits
           _output_putch *
             _lcd_putch
               _lcd_send
                 _lcd_write4bits
             _ser_putch
           _ser_putch *
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _put_str
           _output_putch
             _lcd_putch
               _lcd_send
                 _lcd_write4bits
             _ser_putch
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _measure_freq
       _format_number
         ___lwdiv
         ___lwmod
         _format_putchar *
         _lcd_putch *
           _lcd_send
             _lcd_write4bits
         _output_putch *
           _lcd_putch
             _lcd_send
               _lcd_write4bits
           _ser_putch
         _ser_putch *
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _put_str
         _output_putch
           _lcd_putch
             _lcd_send
               _lcd_write4bits
           _ser_putch
     _print_reading
       ___lwdiv
       ___lwmod
       _format_number
         ___lwdiv
         ___lwmod
         _format_putchar *
         _lcd_putch *
           _lcd_send
             _lcd_write4bits
         _output_putch *
           _lcd_putch
             _lcd_send
               _lcd_write4bits
           _ser_putch
         _ser_putch *
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _lcd_puts
         _lcd_putch
           _lcd_send
             _lcd_write4bits
     _print_unit
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _ser_puts
         _ser_putch
     _put_str
       _output_putch
         _lcd_putch
           _lcd_send
             _lcd_write4bits
         _ser_putch
   _ser_init
   _ser_puts
     _ser_putch
   _timer2_init

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      23       7       13.7%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     61      A0       5      100.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5B      5D       1       97.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     120      20        0.0%
DATA                 0      0     120       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Sep 05 11:51:18 2019

                ___altofl@sign 005B                   ___fldiv@cntr 0019                   ___fldiv@sign 001B  
                           _F1 00EE                             _F2 00D1                             _F3 00D5  
                           l34 2BAE                   ___flpack@arg 0003                   ___flpack@exp 0007  
                  _putchar_ptr 00FE                            l320 2A64                            l318 2A60  
                          l167 277C                            l193 2078                            l820 1A2C  
                          l805 196C                            l806 1AB0                            l912 25AE  
                          l809 1994                            l852 160E                            l916 2536  
                          l837 2362                            l845 27AA                            l854 15D8  
                          l846 27C8                            l784 2088                            l785 213E  
                          l883 1D12                            l796 20F8                            l884 1DDA  
                          l797 2100                            l789 20CC                            l886 1DCA  
                          l896 2400                            _GIE 007F97                            _RB2 007C0A  
                          _RB3 007C0B                            _RB4 007C0C                            _RC3 007C13  
                          _RB5 007C0D                            _RC4 007C14                            _RB6 007C0E  
                          _RB7 007C0F                            _RC7 007C17                 lcd_begin@lines 0009  
                          _RX9 007D5E                            _TX9 007D66                            _exp 1240  
                          _log 1AB2                            _isr 0008                            _pow 17C2  
                          tosl 000FFD                            wreg 000FE8                   ___flmul@sign 0032  
       __end_of_lcd_write4bits 2816                  ___flpack@sign 0008                   ___fltol@exp1 005A  
                         l1110 2856                           l1120 2966                           l1073 1BCA  
                         l1154 1948                           l1180 1450                           l3013 2A1E  
                         l1158 1938                           l1184 1440                           l3017 2A36  
                         l3121 2458                           l3105 243C                           l3211 1F2E  
                         l4101 0F6E                           l3143 2BA8                           l3075 2710  
                         l3219 1F6A                           l2603 27C6                           l4123 1168  
                         l4131 11D6                           l3095 241A                           l4039 1EA8  
                         l4127 11A0                           l3601 20EE                           l3193 1EE0  
                         l3185 1ED2                           l4153 094C                           l3701 1470  
                         l3623 287A                           l4191 0D62                           l2833 2826  
                         l2913 29CE                           l2921 2B16                           l3633 197E  
                         l3801 1D1C                           l2835 282E                           l2771 24DA  
                         l4187 0D2A                           l4195 0D98                           l4283 1CBC  
                         l2845 284C                           l2837 2832                           l2861 295C  
                         l2853 293E                           l2669 2B4E                           l2941 1FB6  
                         l2917 2B04                           l2925 29E8                           l3661 19EC  
                         l3653 19C0                           l3741 2558                           l2757 2B7E  
                         l2597 2794                           l3805 1D38                           l2781 24F2  
                         l4197 0D9E                           l4285 1CC0                           l4277 1CAC  
                         l3591 209E                           l2855 2946                           l3671 1A1A  
                         l3663 19F4                           l3639 19A6                           l3831 22FA  
                         l2767 24D0                           l3593 20B6                           l2857 294A  
                         l2961 2042                           l2929 2A00                           l3681 1A58  
                         l3673 1A26                           l3665 19FA                           l3817 22D2  
                         l2785 24FE                           l3905 128C                           l2947 1FD6  
                         l3659 19E0                           l3819 22DC                           l3851 28FC  
                         l3771 23B4                           l3755 2370                           l3931 140C  
                         l3915 12E8                           l3589 2092                           l2957 2012  
                         l3861 2980                           l3677 1A42                           l3781 23D8  
                         l3757 237A                           l3909 12B6                           l3599 20E2  
                         l2967 2074                           l2959 202E                           l3839 2328  
                         l3783 23DC                           l3775 23C4                           l3689 1A84  
                         l3881 1AC0                           l3929 1402                           l3953 1806  
                         l3699 1466                           l3867 222E                           l3883 1ACA  
                         l3787 23F0                           l3779 23CC                           l3963 1890  
                         l3947 17EE                           ?_exp 007A                           l3869 22A6  
                         l3957 185C                           ?_log 004F                           l3959 1866  
                         l3993 1796                           l3977 1642                           l3899 1258  
                         l3995 179E                           ?_isr 0001                           l3989 1776  
                         ?_pow 0085                           STR_2 08D5                           STR_3 08DB  
                         STR_4 08D8                           STR_5 08C9                           STR_6 08D2  
                         STR_7 08CC                           STR_8 08CF                           STR_9 089B  
                         _BRGH 007D62                           _CREN 007D5C                           _T0CS 007EAD  
                         _T0SE 007EAC                           u1405 27D4                           u1406 27D6  
                         u1415 27E2                           u1416 27E4                           u1425 27F0  
                         u1426 27F2                           _CCal 00F2                           u1435 27FE  
                         u1436 2800                           u2308 204E                           u3140 2398  
                         u3220 1D26                           u1525 2BBA                           u1526 2BBC  
                         u2510 277A                           u3145 238E                           u2505 276A  
                         u2506 276C                           u2278 2016                           u3430 185C  
                         u2378 2624                           u2379 263A                           u2388 263E  
                         u2389 2654                           u3607 1F04                           u2495 2752  
                         u2496 2754                           u3617 1F16                           u3458 175C  
                         u3707 280E                           u3627 1F22                           _PEIE 007F96  
                         u3637 1F3C                           u3478 1782                           u3647 1F56  
                         u3657 1F8E                           u3667 240C                           _RCIF 007CF5  
                         u3677 2420                           u3597 1EE6                           u3687 2BD8  
                         u3697 2804                           _TMR0 000FD6                           _TMR2 000FCC  
                         _SPEN 007D5F                           _TXIE 007CEC                           _TXIF 007CF4  
                         _TXEN 007D65                           _SYNC 007D64                           _bres 00F6  
                         _main 1BCC                           fsr2h 000FDA                           fsr1l 000FE1  
                         indf2 000FDF                           fsr2l 000FD9                           exp@x 007A  
                         log@x 004F          __size_of_output_putch 0010                           pow@x 0085  
                         pow@y 0089                           prodh 000FF4                           prodl 000FF3  
   __end_of_measure_inductance 0E02                           start 0014              _format_number$188 0030  
                 ___param_bank 000010            lcd_write4bits@value 0003                   lcd_send@mode 0004  
                        ??_exp 005C                          ??_log 0053                          ??_isr 0001  
                        ??_pow 005C                  ___fltol@sign1 0059                __end_of___fladd 1AB2  
                        ?_main 0001                __end_of___fldiv 2364                __end_of___flneg 2B90  
                        STR_10 0892                          STR_11 08C5                          STR_12 0894  
                        STR_20 08B0                          STR_13 0875                          STR_21 0869  
                        STR_22 089B                          STR_14 0898                          STR_30 0889  
                        STR_31 089B                          STR_15 0891                          STR_23 084D  
                        STR_24 089B                          STR_32 08BB                          STR_33 089B  
                        STR_25 087F                          STR_26 08C0                          STR_18 08B6  
                        STR_34 085C                          STR_27 089E                          STR_28 08A4  
                        STR_29 08AA                __end_of___flmul 1610                __end_of___flsub 2932  
              __end_of___fltol 2402                __end_of___lwdiv 2860                __end_of___lwmod 2970  
                        i2l490 21D6                          i2l494 21F8                          _RCREG 000FAE  
             lcd_begin@dotsize 0007                          _SPBRG 000FAF                          _PORTC 000F82  
                        _TRISA 000F92                          _TRISC 000F94                          _SSPEN 007E35  
                        _TXREG 000FAD                  ___awtofl@sign 0011                          _nRBPU 007F8F  
                        _log10 267E                          _blink 00E5                          _floor 1CE2  
                        _ldexp 24A0                          _frexp 2538                   _output_putch 2BE2  
              ?_lcd_write4bits 0001                          _msecs 00D9                          pclath 000FFA  
                        tablat 000FF5                          pow@yi 0096                format_number@di 0033  
                        status 000FD8                __end_of_put_str 2A4E                ??_print_reading 0037  
                  exp@exponent 0082                    ldexp@newexp 0053                __initialization 28A8  
              format_putchar@c 0001                    log@exponent 0053                   __end_of_main 1CE2  
             format_double@num 009A                  lcd_gotoxy@col 0008                  lcd_gotoxy@row 0007  
                ?_measure_freq 0035         __size_of_format_double 01B2                         ??_main 005C  
                lcd_send@value 0005            format_double@weight 00A6                  __activetblptr 000002  
       __size_of_format_number 00D4         __size_of_format_xint32 005E            lcd_init@fourbitmode 0003  
                       ?_log10 0055                         ?_floor 0070                         ?_ldexp 004F  
                       ?_frexp 0003               __end_of___altofl 28A8               __end_of___flpack 2140  
             __end_of___awtofl 29AA               __end_of___lltofl 2AAC                         i2l3463 217A  
                       i2l3473 21AE                         i2l3467 218E                         i2l3475 21B0  
             __end_of___lwtofl 2B00                         _TMR0IF 007F92                         _TMR2IE 007CE9  
                       _TMR2IF 007CF1                         _TMR2ON 007E52                         _TRISC0 007CA0  
                       _TRISB2 007C9A                         _TRISC1 007CA1                         _TRISB3 007C9B  
                       _TRISC2 007CA2                         _TRISB4 007C9C                         _TRISC3 007CA3  
                       _TRISB5 007C9D                         _TRISB6 007C9E                         _TRISB7 007C9F  
                       _TRISC6 007CA6               __end_of_lcd_init 2A7E           __size_of_lcd_command 000C  
             __end_of_lcd_send 2BCC                         ___flge 277E               __end_of_lcd_puts 2A18  
                    ??___fladd 003F                      ??___fldiv 0015                      ??___flneg 0007  
                    ??___flmul 0024                      ??___flsub 004B                      ??___fltol 0068  
               ??_measure_freq 0037                      ??___lwdiv 0007                   ?_timer2_init 0001  
                    ??___lwmod 0007                         _buffer 0110                         clear_0 28AE  
                       clear_1 28BA                         log10@x 0055                         _rxfifo 0100  
                       _txfifo 00C1                         _rxiptr 00EB                         _rxoptr 00EC  
                       floor@i 0074                         _txiptr 005C                         floor@x 0070  
                       _txoptr 005D               __end_of_ser_init 2B4C               __end_of_ser_puts 2B28  
           timer2_init@ps_mode 0004                   __mediumconst 0000                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8               format_number@buf 0010  
             format_number@pad 000D        _measure_inductance$1160 007C        _measure_inductance$1161 0080  
      _measure_inductance$1155 0074        _measure_inductance$1156 0085        _measure_inductance$1157 0089  
      _measure_inductance$1158 008D        _measure_inductance$1159 0078                      ??_put_str 0008  
                   ___fladd@f1 0037                     ___fladd@f2 003B                     ___flge@ff1 0003  
                   ___flge@ff2 0007               __end_ofexp@coeff 0829                  _format_double 1610  
             __end_oflog@coeff 084D                     ___altofl@c 006C                     ___fldiv@f1 000D  
                   ___fldiv@f2 0011                     ___fldiv@f3 0015                     __accesstop 0060  
      __end_of__initialization 28E4                     ___flneg@f1 0003                  _format_number 1FA6  
                _format_xint32 2620                     ___flmul@f1 001C                     ___flmul@f2 0020  
                 eval_poly@res 004B                  ___rparam_used 000001                     ___flsub@f1 0043  
                   ___flsub@f2 0047                     ___fltol@f1 0064                     ___awtofl@c 000D  
       measure_capacitance@Cin 00BD   __size_of_measure_capacitance 043E         measure_capacitance@var 00BB  
        lcd_gotoxy@row_offsets 0009                 __pcstackCOMRAM 0001             __size_of_calibrate 00EC  
                 __pidataBANK0 2C0C                     ___lltofl@c 000D             __size_of_delay10ms 005A  
                __end_of_log10 26D8                  __end_of_floor 1DDC                  __end_of_ldexp 2538  
                __end_of_frexp 25B0                     ___lwtofl@c 003D             __size_of_lcd_begin 00DE  
           __size_of_lcd_clear 0016                        ??_log10 0059             __size_of_lcd_putch 000E  
                      ??_floor 005C                        ??_ldexp 0055                        ??_frexp 0008  
                   _log10$1162 0060                     __pbssBANK0 00C1                     __pbssBANK1 0100  
               ?_format_double 009A             __size_of_eval_poly 00BC             __size_of_indicator 0020  
      __size_of_format_putchar 0002                 ?_format_number 000A                 ?_format_xint32 0035  
               print_unit@unit 0001                        ?___flge 0003                      ?___altofl 006C  
                    ?___flpack 0003                      ?___awtofl 000D                      ?___lltofl 000D  
           _measure_inductance 08E0             __size_of_ser_putch 0024                        _T2CKPS0 007E50  
                      _T2CKPS1 007E51                      ?___lwtofl 003D               ??_lcd_write4bits 0003  
                   _lcd_gotoxy 29AA            ?_measure_inductance 0001              __end_of_calibrate 1EC8  
                    ?_lcd_init 0001                      ?_lcd_send 0004                        _TOUTPS0 007E53  
                      _TOUTPS1 007E54                        _TOUTPS2 007E55              __end_of_delay10ms 2732  
                    ?_lcd_puts 0001           __end_of_measure_freq 24A0                     calibrate@i 0041  
                      __Hparam 0000                        __Lparam 0000                      ?_ser_init 0001  
         ??_measure_inductance 005B              __end_of_lcd_begin 1FA6                      ?_ser_puts 0001  
            __end_of_lcd_clear 2BE2                __size_of___flge 004C                        ___fladd 194A  
            __end_of_lcd_putch 2C00                        ___fldiv 22BE                        ___flneg 2B70  
                      ___flmul 1452                        ___flsub 28EE                        ___fltol 2364  
                      ___lwdiv 2816                        ___lwmod 2932                   __psmallconst 0800  
                   ??___altofl 005B                     ??___flpack 0009                        __pcinit 28A8  
                   ??___awtofl 0011              __end_of_eval_poly 22BE                        __ramtop 0800  
            __end_of_indicator 2BB0                     ??___lltofl 0011                        __ptext0 1BCC  
                      __ptext1 2732                        __ptext2 2B28                        __ptext3 08E0  
                      __ptext4 0E02                        __ptext5 2AAC                        __ptext6 25B0  
                      __ptext7 2620                        __ptext8 1610                        __ptext9 17C2  
         __size_of_timer2_init 004C                     ??___lwtofl 0041                   __size_of_exp 0212  
                 __size_of_log 011A                   __size_of_isr 21FA                   __size_of_pow 0188  
                      _seconds 00DD                 lcd_putch@value 0006                        _ser_tmp 00ED  
              ??_format_double 005C                        _put_str 2A18                     ??_lcd_init 0003  
                   ??_lcd_send 0005                 __pintcode_body 2140                     ??_lcd_puts 0007  
         end_of_initialization 28E4                ??_format_number 000E                ??_format_xint32 0039  
                      exp@sign 0084                      _LCD_lines 00E9                   _lcd_init$265 0004  
                __Lmediumconst 0000                        int_func 2140                 lcd_puts@string 0009  
            __end_of_ser_putch 2B70                        pow@sign 0095  measure_inductance@denominator 0070  
        __end_of_print_reading 2620                     ??_ser_init 0003                     ??_ser_puts 0004  
            format_number@base 000C                        postdec1 000FE5                        postdec2 000FDD  
                      postinc0 000FEE                        postinc2 000FDE                     _print_unit 2AAC  
          _measure_capacitance 0E02                    ?_lcd_gotoxy 0007                    ___fldiv@exp 001A  
               _format_putchar 2C12                    ___flmul@exp 0031                  ??_lcd_command 0006  
         ?_measure_capacitance 0001        measure_capacitance@unit 00BA                 format_double@m 00AC  
       measure_inductance@unit 0084                 __end_of___flge 27CA                lcd_gotoxy@F4094 00FA  
                   floor@expon 0078                 format_number@i 0034                 format_number@n 000A  
               format_xint32@x 0035            start_initialization 28A8                     eval_poly@d 0047  
                   eval_poly@n 0048                     eval_poly@x 0043          __size_of_measure_freq 009E  
                   ldexp@value 004F                    __end_of_exp 1452                    __end_of_log 1BCC  
                  __end_of_isr 2202                    __end_of_pow 194A                   _LCD_function 00E8  
       __end_of_format_putchar 2C14             format_double@digit 00AA                     frexp@value 0003  
        ??_measure_capacitance 005C                       ??___flge 000B            __size_of_lcd_gotoxy 0038  
          __end_of_lcd_command 2C0C                    __pdataBANK0 00FA                   _measure_freq 2402  
                 delay10ms@run 000B       print_reading@measurement 0035              __size_of___altofl 0048  
            __size_of___flpack 00C6              __size_of___awtofl 003A                    ?_print_unit 0001  
            __size_of___lltofl 002E                    __pbssCOMRAM 005C              __size_of___lwtofl 002A  
                __pcstackBANK0 0060                  ?_output_putch 0001                ?_format_putchar 0001  
            measure_freq@count 003B               lcd_command@value 0006              __size_of_lcd_init 0030  
            __size_of_lcd_send 001C                      _calibrate 1DDC              __size_of_lcd_puts 0036  
                    _delay10ms 26D8                      __pnvBANK0 00F2               ___lwdiv@dividend 0003  
                    __pintcode 0008                       ?___fladd 0037                       ?___fldiv 000D  
                     ?___flneg 0003                       ?___flmul 001C                       ?___flsub 0043  
                     ?___fltol 0064              __size_of_ser_init 0024                       ?___lwdiv 0003  
                     ?___lwmod 0003              __size_of_ser_puts 0028                      _lcd_begin 1EC8  
                    _lcd_clear 2BCC                      _lcd_putch 2BF2                    __smallconst 0800  
                    _eval_poly 2202                  output_putch@c 0007                      _indicator 2B90  
               ??_output_putch 0007               ___lwdiv@quotient 0007                 __size_of_log10 005A  
                     ?_put_str 0001                 __size_of_floor 00FA                 __size_of_ldexp 0098  
               __size_of_frexp 0078                     ?_calibrate 0001                     ser_putch@c 0003  
                   ?_delay10ms 0003                       _LCD_ctrl 00E7                       _LCD_mode 00EA  
                  _lcd_command 2C00                  measure_freq@i 003A            __size_of_print_unit 002A  
                     i2u270_40 2178                      _ser_putch 2B4C    __size_of_measure_inductance 0522  
                ??_timer2_init 0003              indicator@indicate 000D                     ?_lcd_begin 0007  
                   ?_lcd_clear 0001                     ?_lcd_putch 0001                     ?_eval_poly 0043  
                   ?_indicator 0001                      lcd_puts@i 0008                   ??_lcd_gotoxy 0008  
        measure_inductance@Lin 0093          measure_inductance@var 0091                      copy_data0 28D8  
        __end_of_format_double 17C2           format_number@padchar 0032        __size_of_lcd_write4bits 004C  
        __end_of_format_number 207A          __end_of_format_xint32 267E                      frexp@eptr 0007  
                     __Hrparam 0000                       __Lrparam 0000                     ?_ser_putch 0001  
                  delay10ms@ms 0007             __end_of_lcd_gotoxy 29E2               __size_of___fladd 0168  
             __size_of___fldiv 00A6               __size_of___flneg 0020               __size_of___flmul 01BE  
             __size_of___flsub 0044               __size_of___fltol 009E                       ___altofl 2860  
                     ___flpack 207A               __size_of___lwdiv 004A               __size_of___lwmod 003E  
                     ___awtofl 2970                       ___lltofl 2A7E                  timer2_init@ps 0005  
                     ___lwtofl 2AD6               measure_freq@prev 0039                       _exp$1165 007E  
          __end_of_timer2_init 277E                ___lwdiv@divisor 0005                ___lwdiv@counter 0009  
       __size_of_print_reading 0070                       __ptext10 1240                       __ptext11 24A0  
                     __ptext20 267E                       __ptext12 1CE2                       __ptext21 1AB2  
                     __ptext13 2364                       __ptext30 29E2                       __ptext22 2538  
                     __ptext14 277E                       __ptext31 1DDC                       __ptext23 2202  
                     __ptext15 2860                       __ptext40 2BE2                       __ptext32 2B00  
                     __ptext24 1452                       __ptext16 28EE                       __ptext41 2932  
                     __ptext33 2402                       __ptext25 194A                       __ptext17 2B70  
                     __ptext42 2816                       __ptext34 2A18                       __ptext26 2970  
                     __ptext18 22BE                       __ptext43 2BCC                       __ptext35 29AA  
                     __ptext27 2A4E                       __ptext19 2A7E                       __ptext44 2C00  
                     __ptext36 1FA6                       __ptext28 1EC8                       __ptext45 2BB0  
                     __ptext37 2C12                       __ptext29 2B90                       __ptext46 27CA  
                     __ptext38 2B4C                       __ptext47 26D8                       __ptext39 2BF2  
                     __ptext48 2AD6                       __ptext49 207A                       _lcd_init 2A4E  
                     _lcd_send 2BB0                       _pow$1163 008D                       _pow$1164 0091  
                     _lcd_puts 29E2               __size_of_put_str 0036                    ??_calibrate 0041  
                __size_of_main 0116                    ??_delay10ms 0005                      ser_puts@s 0004  
                     _msecpart 00F8                       _ser_init 2B28                       _ser_puts 2B00  
                     _timer1of 00E1           __end_of_output_putch 2BF2                    ??_lcd_begin 0008  
                  ??_lcd_clear 0007                    ??_lcd_putch 0006                       exp@coeff 0801  
        ___flmul@f3_as_product 0033                       log@coeff 0829    measure_inductance@numerator 006C  
             ??_format_putchar 0003                   ??_print_unit 000D                    ??_eval_poly 004A  
                  ??_indicator 000D             _print_reading$1146 0037             _print_reading$1147 0039  
                     intlevel2 0000    __end_of_measure_capacitance 1240               ___lwmod@dividend 0003  
                  ??_ser_putch 0003             __end_of_print_unit 2AD6                  _print_reading 25B0  
         delay10ms@period_10ms 0003                    _timer2_init 2732             _format_double$1150 009E  
           _format_double$1151 00A2       _measure_capacitance$1152 00AE       _measure_capacitance$1153 00B2  
     _measure_capacitance$1154 00B6                       put_str@i 0009                       put_str@s 000A  
              ___lwmod@divisor 0005                ___lwmod@counter 0007                 _lcd_write4bits 27CA  
                 ___fladd@exp1 0042                   ___fladd@exp2 0041                   ___fladd@sign 0040  
                 ?_lcd_command 0001                 ?_print_reading 0035  
