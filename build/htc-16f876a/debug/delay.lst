     1: #include "delay.h"
     2: 
     3: #if (defined(HI_TECH_C) || defined(__XC8))
     4: #include <pic.h>
     5: #else
     6: dvars dvar;
     7: #endif
     8: #if 0
     9: // -------------------------------------------------------------------------
    10: void
    11: delay_ms(uint16 milliseconds) {
    12:   /* dvars msecs;
    13:    SAVE_CYCLES_BIG(msecs, US_CYCLES(milliseconds*1000lu));
    14:    CALL_CYCLES_BIG(msecs);*/
    15: #if !(defined(HI_TECH_C) || defined(__XC8))
    16:   __delay_ms(milliseconds);
    17: #else
    18:   Delay100TCYx(US_CYCLES(milliseconds * 1000lu) / 100);
    19: #endif
    20: }
    21: 
    22: // -------------------------------------------------------------------------
    23: void
    24: delay_us(uint16 microseconds) {
    25:   /*dvars usecs;
    26:   SAVE_CYCLES_BIG(usecs, US_CYCLES(microseconds));
    27:   CALL_CYCLES_BIG(usecs);*/
    28: #if !(defined(HI_TECH_C) || defined(__XC8))
    29: 
    30:   __delay_us(microseconds);
    31: #else
    32:   Delay10TCYx(US_CYCLES(microseconds) / 10);
    33: #endif
    34: }
    35: #endif
    36: 
    37: 
    38: #if !(defined(HI_TECH_C) || defined(__XC8))
    39: /**
    40:  *  Fixing x at 191 so b is essentially multiples of cmax
    41:  */
    42: void
    43: cycle_eater(void) {
    44:   __asm
    45:   global correction
    46:   banksel _dvar  // mumblegrumble
    47:   nop
    48:   __delay_big:
    49:   movlw   191      // Calibrated for b*764 cycles
    50:   movwf   _dvar+0  // Load W into reg
    51:   __delay_inner:
    52:   nop  // To make the inner loop take 4 cycles per
    53:   decfsz  _dvar+0, 1
    54:   goto    __delay_inner
    55:   decfsz  _dvar+1, 1
    56:   goto    __delay_big
    57:   correction:
    58:   decfsz  _dvar+2, 1
    59:   goto    correction
    60:   __endasm;
    61: }
    62: #endif
    63: 
    64: // -------------------------------------------------------------------------
    65: /*
    66:  * Delay multiples of 100 Tcy
    67:  * Passing 0 (zero) results in a delay of 25,600 cycles.
    68:  */
    69: void
    70: Delay100TCYx(uint8 unit) {
    71:   do {
    72: #if (defined(HI_TECH_C) || defined(__XC8))
    73: 
    74:     _delay(100);
    75: #else
    76:     DELAY_SMALL_TCY(100);
    77: #endif
    78:   } while(--unit != 0);
    79: }
    80: 
    81: // -------------------------------------------------------------------------
    82: /*
    83:  * Delay multiples of 10,000 Tcy
    84:  * Passing 0 (zero) results in a delay of 2,560,000 cycles.
    85:  */
    86: void
    87: Delay10KTCYx(uint8 unit) {
    88:   do {
    89: #if (defined(HI_TECH_C) || defined(__XC8))
    90: 
    91:     _delay(10000);
    92: #else
    93:     DELAY_BIG_TCY(10000);
    94: #endif
    95:   } while(--unit != 0);
    96: }
    97: 
    98: // -------------------------------------------------------------------------
    99: /*
   100:  * Delay multiples of 10 Tcy
   101:  * Passing 0 (zero) results in a delay of 2560 cycles.
   102:  */
   103: void
   104: Delay10TCYx(uint8 unit) {
   105:   do {
   106: #if (defined(HI_TECH_C) || defined(__XC8))
   107: 
   108:     _delay(10);
   109: #else
   110:     SAVE_CYCLES_SMALL(dvar, 11);
   111:     __asm__("BANKSEL _dvar");
   112:     __asm__("CALL correction");
   113: #endif
   114:   } while(--unit != 0);
   115: }
   116: 
   117: // -------------------------------------------------------------------------
   118: /*
   119:  * Delay multiples of 1000 Tcy
   120:  * Passing 0 (zero) results in a delay of 256,000 cycles.
   121:  */
   122: void
   123: Delay1KTCYx(uint8 unit) {
   124:   do {
   125: #if (defined(HI_TECH_C) || defined(__XC8))
   126: 
   127:     _delay(1000);
   128: #else
   129:     DELAY_BIG_TCY(1000);
   130: #endif
   131:   } while(--unit != 0);
   132: }
