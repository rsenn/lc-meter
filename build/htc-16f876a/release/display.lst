     1: #include "display.h"
     2: #include "main.h"
     3: 
     4: #if USE_NOKIA3310_LCD
     5: #include "lcd3310.h"
     6: 
     7: const char logo_image[504] = {
     8:   0x00, 0x40, 0xC0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF8, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xE0, 0xE0, 0xC0, 0x80, 0x10, 0x7C, 0xFC, 0xFE, 0xFC, 0xF8, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x1F, 0x7F, 0xFC, 0xF8, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFE, 0xFC, 0xDC, 0x18, 0x38, 0x70, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x80, 0xC0, 0xC0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0xF0, 0xF8, 0xF8, 0x78, 0x70, 0xF0, 0xCF, 0x9F, 0x3F, 0x7F, 0xFF, 0xF6, 0xC0, 0x87, 0x7F, 0xFF, 0xFF, 0xE7, 0x9F, 0xFC, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     9:   0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x0F, 0x7F, 0xFE, 0xF8, 0xE0, 0x80, 0x00, 0x07, 0x3F, 0xFF, 0xFE, 0xFC, 0xE0, 0x01, 0x03, 0x0F, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x3F, 0xFF, 0xFF, 0xFF, 0xE7, 0x1F, 0x7F, 0xFF, 0xFF, 0xF3, 0xCF, 0x3F, 0xFF, 0xFE, 0xF8, 0xE3, 0x9F, 0x7F, 0xFF, 0xFC, 0xFF, 0xDF, 0x1F, 0x0F, 0x0E, 0xC3, 0xCF, 0x3F, 0xFF, 0xFE, 0xF9, 0xC7, 0x1F, 0x7F, 0xFF, 0xFF, 0xF3, 0x83, 0x03, 0x21, 0xE7, 0xDF, 0xFF, 0xFC, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x0F, 0x3F, 0xFE, 0xF8, 0xE0, 0x80, 0x01, 0x07, 0x1F, 0xFF, 0xFE, 0xF8, 0xE0, 0x80, 0x00, 0x04, 0x1C, 0xF8, 0xF0, 0x80, 0x00, 0x00, 0x01, 0x03, 0x0F, 0x3F, 0xFF, 0xFE, 0xF9, 0xE7, 0x9F, 0x7F, 0x7F, 0x7C, 0x71, 0x07, 0x3F, 0x3F, 0x1E, 0x1D, 0x01, 0x03, 0x07, 0x0F, 0x0E, 0x0E, 0x0C, 0x0F, 0x0F, 0x00, 0x01, 0x03, 0x07, 0x0F, 0x0E, 0x0F, 0x07, 0x03, 0x07, 0x0E, 0x1E, 0x3D, 0x3F, 0x3F, 0x19, 0x07, 0x1F, 0x7F, 0x7E, 0x78, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
    10:   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x3F, 0xFE, 0xF8, 0xF0, 0x80, 0x01, 0x07, 0x0F, 0x9F, 0xFF, 0x7C, 0xF8, 0xF0, 0xF7, 0xFF, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x3F, 0xFE, 0xFE, 0x7F, 0x3F, 0x1F, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    11: };
    12: 
    13: const char digits_8x16[160] = {
    14:   0xfc, 0xfe, 0xfe, 0x06, 0x06, 0xfe, 0xfe, 0xfc, 0x7f, 0xff, 0xff, 0xc0, 0xc0, 0xff, 0xff, 0x7f, //0
    15:   0x00, 0x18, 0x1c, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xc0, 0x00, //1
    16:   0x3c, 0x3e, 0x3e, 0x06, 0x86, 0xfe, 0xfe, 0x7c, 0xe0, 0xf0, 0xfc, 0xff, 0xcf, 0xc7, 0xc1, 0xc0, //2
    17:   0x1c, 0x1e, 0x9e, 0x86, 0x86, 0xfe, 0xfe, 0xfc, 0x78, 0xf8, 0xf9, 0xc1, 0xc1, 0xff, 0xff, 0x7e, //3
    18:   0x00, 0xf0, 0xfe, 0x7e, 0xfe, 0xfe, 0xfe, 0x00, 0x3f, 0x3f, 0x37, 0x30, 0xff, 0xff, 0xff, 0x30, //4
    19:   0xfe, 0xfe, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x86, 0x71, 0xf1, 0xf1, 0xc0, 0xc0, 0xff, 0xff, 0x7f, //5
    20:   0xfc, 0xfe, 0xfe, 0xc6, 0xc6, 0xde, 0xde, 0x9c, 0x7f, 0xff, 0xff, 0xc0, 0xc0, 0xff, 0xff, 0x7f, //6
    21:   0x06, 0x06, 0x06, 0x86, 0xe6, 0xfe, 0x7e, 0x1e, 0x80, 0xf0, 0xfe, 0x3f, 0x07, 0x01, 0x00, 0x00, //7
    22:   0x7c, 0xfe, 0xfe, 0x86, 0x86, 0xfe, 0xfe, 0x7c, 0x7e, 0xff, 0xff, 0xc1, 0xc1, 0xff, 0xff, 0x7e, //8
    23:   0xfc, 0xfe, 0xfe, 0x86, 0x86, 0xfe, 0xfe, 0xfc, 0x78, 0xf9, 0xf9, 0xc1, 0xc1, 0xff, 0xff, 0x7f  //9
    24: };
    25: 
    26: const char units[288] = { //8units * (18*2)
    27:   //H = 0
    28:   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 252, 192, 192, 192, 252, 252, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 31, 0, 0, 0, 31, 31,
    29:   //mH = 1
    30:   224, 224, 192, 96, 224, 224, 192, 96, 224, 192, 0, 252, 252, 192, 192, 192, 252, 252, 31, 31, 0, 0, 31, 31, 0, 0, 31, 31, 0, 31, 31, 0, 0, 0, 31, 31,
    31:   //uH = 2
    32:   0, 0, 0, 224, 224, 0, 0, 224, 224, 0, 0, 252, 252, 192, 192, 192, 252, 252, 0, 0, 0, 255, 255, 24, 8, 31, 31, 0, 0, 31, 31, 0, 0, 0, 31, 31,
    33:   //nH = 3
    34:   0, 0, 0, 224, 224, 192, 96, 224, 192, 0, 0, 252, 252, 192, 192, 192, 252, 252, 0, 0, 0, 31, 31, 0, 0, 31, 31, 0, 0, 31, 31, 0, 0, 0, 31, 31,
    35:   //mF = 4
    36:   224, 224, 192, 96, 224, 224, 192, 96, 224, 192, 0, 0, 252, 252, 204, 204, 204, 12, 31, 31, 0, 0, 31, 31, 0, 0, 31, 31, 0, 0, 31, 31, 0, 0, 0, 0,
    37:   //uF = 5
    38:   0, 0, 0, 0, 224, 224, 0, 0, 224, 224, 0, 0, 252, 252, 204, 204, 204, 12, 0, 0, 0, 0, 255, 255, 24, 8, 31, 31, 0, 0, 31, 31, 0, 0, 0, 0,
    39:   //nF = 6
    40:   0, 0, 0, 0, 224, 224, 192, 96, 224, 192, 0, 0, 252, 252, 204, 204, 204, 12, 0, 0, 0, 0, 31, 31, 0, 0, 31, 31, 0, 0, 31, 31, 0, 0, 0, 0,
    41:   //pF = 7
    42:   0, 0, 0, 0, 224, 224, 96, 96, 224, 192, 0, 0, 252, 252, 204, 204, 204, 12, 0, 0, 0, 0, 255, 255, 24, 24, 31, 7, 0, 0, 31, 31, 0, 0, 0, 0
    43: };
    44: #elif defined(USE_HD44780_LCD)
    45: #endif
    46: 
    47: // -------------------------------------------------------------------------
    48: // -------------------------------------------------------------------------
    49: void
    50: display_digit(uint8 line, uint8 column, uint8 digit) {
    51: #if USE_NOKIA3310_LCD
    52:   uint8 i;
    53:   if(line < 1 || line > 5) return;
    54:   if(column > 74) return;
    55:   if(digit > 9) return;
    56: 
    57:   lcd_gotoxy(column, line - 1);
    58:   for(i = 0; i < 8; i++) lcd_send(digits_8x16[(digit << 4) + i], LCD_TDATA);
    59:   lcd_gotoxy(column, line);
    60:   for(i = 8; i < 16; i++) lcd_send(digits_8x16[(digit << 4) + i], LCD_TDATA);
    61: #elif defined(USE_HD44780_LCD)
    62:   lcd_set_cursor(column, /*line - 1*/ 0);
    63:   lcd_putch('0' + digit);
    64: #endif // defined(USE_NOKIA3310_LCD)
    65: }
    66: 
    67: // -------------------------------------------------------------------------
    68: void
    69: display_unit(uint8 unit) {
    70: #if USE_NOKIA3310_LCD
    71:   uint8 i;
    72:   lcd_gotoxy(60, 2);
    73:   for(i = 0; i < 18; i++) lcd_send(units[unit * 36 + i], LCD_TDATA);
    74:   lcd_gotoxy(60, 3);
    75:   for(i = 18; i < 36; i++) lcd_send(units[unit * 36 + i], LCD_TDATA);
    76: #elif defined(USE_HD44780_LCD)
    77:   static const char* units[8] = { "H", "mH", "uH", "nH", "mF", "uF", "nF", "pF" };
    78:   lcd_set_cursor(16, 0);
    79:   lcd_print(units[unit]);
    80:   lcd_set_cursor(16, 1);
    81:   lcd_print(units[unit]);
    82: #endif // defined(USE_NOKIA3310_LCD)
    83: }
    84: 
    85: void
    86: display_reading(uint16 measurement) {
    87:     //measurement divide by 100
    88: #if USE_NOKIA3310_LCD
    89:   //clear previous measurement
    90:   lcd_gotoxy(0, 2);
    91:   lcd_puts(" ");
    92:   lcd_gotoxy(0, 3);
    93:   lcd_puts(" ");
    94:   //decimal point
    95:   lcd_gotoxy(35, 3);
    96:   lcd_send(0x70, LCD_TDATA);
    97:   lcd_send(0x70, LCD_TDATA);
    98:   lcd_send(0x70, LCD_TDATA);
    99:   //hundreds digit
   100:   if(measurement / 10000 > 0) display_digit(3, 5, measurement / 10000);
   101:   //tens digit
   102:   if(((measurement / 1000) % 10 > 0) || (measurement / 10000 > 0)) display_digit(3, 15, (measurement / 1000) % 10);
   103:   //ones digit
   104:   display_digit(3, 25, (measurement / 100) % 10);
   105:   //tenths digit
   106:   display_digit(3, 40, (measurement / 10) % 10);
   107:   //hundredths digit
   108:   display_digit(3, 50, measurement % 10);
   109: #elif defined(USE_HD44780_LCD)
   110:   lcd_set_cursor(4, 0);
   111:   display_print_number(measurement / 100, 10, 0);
   112:   lcd_putch('.');
   113:   display_print_number(measurement % 100, 10, 0);
   114: #endif // defined(USE_NOKIA3310_LCD)
   115: }
   116: 
   117: // -------------------------------------------------------------------------
   118: void
   119: indicator(uint8 indicate) {
   120: #if USE_NOKIA3310_LCD
   121:   if(indicate) {
   122:     lcd_gotoxy(70, 4);
   123:     lcd_send(0x1C, LCD_TDATA);
   124:     lcd_send(0x3E, LCD_TDATA);
   125:     lcd_send(0x36, LCD_TDATA);
   126:     lcd_send(0x3E, LCD_TDATA);
   127:     lcd_send(0x1C, LCD_TDATA);
   128:   } else {
   129:     lcd_gotoxy(70, 4);
   130:     lcd_puts(" ");
   131:   }
   132: #elif defined(USE_HD44780_LCD)
   133:   lcd_set_cursor(0, 0);
   134:   if(indicate) {
   135:     lcd_print("-*-");
   136:   } else {
   137:     lcd_print("   ");
   138:   }
   139: #endif // defined(USE_NOKIA3310_LCD)
   140: }
   141: 
   142: /** Print a number on LCD */
   143: #if defined(DISPLAYPRINTNUMBER) || defined(DISPLAYPRINTFLOAT)
   144: /*
   145: static const char digits[] =
   146: { '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z' };
   147: */
   148: void
   149: display_print_number(uint16 n, uint8 base, int8 pad/*, int8 pointpos*/) {
   150:   uint8 buf[8 * sizeof(long)]; // Assumes 8-bit chars.
   151:   uint8 di;
   152:   uint8 i = 0;
   153: 
   154: /*  if(n == 0) {
   155:     lcd_putch('0');
   156:     return;
   157:   }*/
   158: 
   159:   do {
   160: /*    if(i == pointpos)
   161:       buf[i++] = '.';
   162: */
   163:     di = n % base;
   164:     buf[i++] = (di < 10 ? (uint8)'0' + di : (uint8)'A' + di - 10);
   165: 
   166:     n /= base;
   167:   } while(n > 0);
   168: 
   169:   while(pad-- >= i)
   170:     lcd_putch(' ');
   171: 
   172:   for(; i > 0; i--)
   173:     lcd_putch((uint8)buf[(int16)i - 1]);
   174: //    lcd_putch((buf[i - 1] < 10 ? (uint8)'0' + buf[i - 1] : (uint8)'A' + buf[i - 1] - 10));
   175: }
   176: 
   177: #endif
