

Microchip Technology PIC18 PRO Macro Assembler V1.34 build -361300703 
                                                                                               Sat Apr 11 09:59:15 2020

Microchip Technology Omniscient Code Generator (PRO mode) build 201502162209
     1                           	processor	18F252
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    69  0000                     
    70                           	psect	idataBANK0
    71  0000'                    __pidataBANK0:
    72                           	opt stack 0
    73                           
    74                           ;initializer for lcd_gotoxy@F2308
    75  0000' 00                 	db	0
    76  0001' 40                 	db	64
    77  0002' 14                 	db	20
    78  0003' 54                 	db	84
    79                           
    80                           ;initializer for _mode
    81  0004' FF                 	db	255
    82                           
    83                           	psect	smallconst
    84  0000'                    __psmallconst:
    85                           	opt stack 0
    86  0000' 00                 	db	0
    87  0001'                    exp@coeff:
    88                           	opt stack 0
    89  0001' 00                 	db	0
    90  0002' 80                 	db	128
    91  0003' 3F                 	db	63
    92  0004' 72                 	db	114
    93  0005' 31                 	db	49
    94  0006' 3F                 	db	63
    95  0007' FE                 	db	254
    96  0008' 75                 	db	117
    97  0009' 3E                 	db	62
    98  000A' 58                 	db	88
    99  000B' 63                 	db	99
   100  000C' 3D                 	db	61
   101  000D' 95                 	db	149
   102  000E' 1D                 	db	29
   103  000F' 3C                 	db	60
   104  0010' C5                 	db	197
   105  0011' AE                 	db	174
   106  0012' 3A                 	db	58
   107  0013' 79                 	db	121
   108  0014' 21                 	db	33
   109  0015' 39                 	db	57
   110  0016' 94                 	db	148
   111  0017' 80                 	db	128
   112  0018' 37                 	db	55
   113  0019' 93                 	db	147
   114  001A' A7                 	db	167
   115  001B' 35                 	db	53
   116  001C' 56                 	db	86
   117  001D' 15                 	db	21
   118  001E' 34                 	db	52
   119  001F'                    __end_ofexp@coeff:
   120                           	opt stack 0
   121  001F'                    log@coeff:
   122                           	opt stack 0
   123  001F' 00                 	db	0
   124  0020' 00                 	db	0
   125  0021' 00                 	db	0
   126  0022' 00                 	db	0
   127  0023' 80                 	db	128
   128  0024' 3F                 	db	63
   129  0025' F0                 	db	240
   130  0026' FF                 	db	255
   131  0027' BE                 	db	190
   132  0028' E2                 	db	226
   133  0029' A9                 	db	169
   134  002A' 3E                 	db	62
   135  002B' 83                 	db	131
   136  002C' 76                 	db	118
   137  002D' BE                 	db	190
   138  002E' AE                 	db	174
   139  002F' 2B                 	db	43
   140  0030' 3E                 	db	62
   141  0031' 3C                 	db	60
   142  0032' C3                 	db	195
   143  0033' BD                 	db	189
   144  0034' D2                 	db	210
   145  0035' 13                 	db	19
   146  0036' 3D                 	db	61
   147  0037' 78                 	db	120
   148  0038' D3                 	db	211
   149  0039' BB                 	db	187
   150  003A'                    __end_oflog@coeff:
   151                           	opt stack 0
   152  003A'                    STR_2:
   153                           
   154                           ; BSR set to: 0
   155  003A' 2D                 	db	45
   156  003B' 20                 	db	32
   157  003C' 43                 	db	67	;'C'
   158  003D' 20                 	db	32
   159  003E' 28                 	db	40
   160  003F' 55                 	db	85	;'U'
   161  0040' 6E                 	db	110	;'n'
   162  0041' 69                 	db	105	;'i'
   163  0042' 74                 	db	116	;'t'
   164  0043' 3A                 	db	58	;':'
   165  0044' 20                 	db	32
   166  0045' 46                 	db	70	;'F'
   167  0046' 29                 	db	41
   168  0047' 20                 	db	32
   169  0048' 2D                 	db	45
   170  0049' 00                 	db	0
   171  004A'                    STR_3:
   172                           
   173                           ; BSR set to: 0
   174  004A' 2D                 	db	45
   175  004B' 20                 	db	32
   176  004C' 4C                 	db	76	;'L'
   177  004D' 20                 	db	32
   178  004E' 28                 	db	40
   179  004F' 55                 	db	85	;'U'
   180  0050' 6E                 	db	110	;'n'
   181  0051' 69                 	db	105	;'i'
   182  0052' 74                 	db	116	;'t'
   183  0053' 3A                 	db	58	;':'
   184  0054' 20                 	db	32
   185  0055' 48                 	db	72	;'H'
   186  0056' 29                 	db	41
   187  0057' 20                 	db	32
   188  0058' 2D                 	db	45
   189  0059' 00                 	db	0
   190  005A'                    STR_11:
   191                           
   192                           ; BSR set to: 0
   193  005A' 70                 	db	112	;'p'
   194  005B' 6C                 	db	108	;'l'
   195  005C' 65                 	db	101	;'e'
   196  005D' 61                 	db	97	;'a'
   197  005E' 73                 	db	115	;'s'
   198  005F' 65                 	db	101	;'e'
   199  0060' 20                 	db	32
   200  0061' 77                 	db	119	;'w'
   201  0062' 61                 	db	97	;'a'
   202  0063' 69                 	db	105	;'i'
   203  0064' 74                 	db	116	;'t'
   204  0065' 2E                 	db	46
   205  0066' 2E                 	db	46
   206  0067' 2E                 	db	46
   207  0068' 00                 	db	0
   208  0069'                    STR_14:
   209                           
   210                           ; BSR set to: 0
   211  0069' 49                 	db	73	;'I'
   212  006A' 6E                 	db	110	;'n'
   213  006B' 64                 	db	100	;'d'
   214  006C' 75                 	db	117	;'u'
   215  006D' 63                 	db	99	;'c'
   216  006E' 74                 	db	116	;'t'
   217  006F' 69                 	db	105	;'i'
   218  0070' 76                 	db	118	;'v'
   219  0071' 69                 	db	105	;'i'
   220  0072' 74                 	db	116	;'t'
   221  0073' 79                 	db	121	;'y'
   222  0074' 20                 	db	32
   223  0075' 00                 	db	0
   224  0076'                    STR_10:
   225                           
   226                           ; BSR set to: 0
   227  0076' 43                 	db	67	;'C'
   228  0077' 61                 	db	97	;'a'
   229  0078' 6C                 	db	108	;'l'
   230  0079' 69                 	db	105	;'i'
   231  007A' 62                 	db	98	;'b'
   232  007B' 72                 	db	114	;'r'
   233  007C' 61                 	db	97	;'a'
   234  007D' 74                 	db	116	;'t'
   235  007E' 69                 	db	105	;'i'
   236  007F' 6E                 	db	110	;'n'
   237  0080' 67                 	db	103	;'g'
   238  0081' 00                 	db	0
   239  0082'                    STR_13:
   240                           
   241                           ; BSR set to: 0
   242  0082' 43                 	db	67	;'C'
   243  0083' 61                 	db	97	;'a'
   244  0084' 70                 	db	112	;'p'
   245  0085' 61                 	db	97	;'a'
   246  0086' 63                 	db	99	;'c'
   247  0087' 69                 	db	105	;'i'
   248  0088' 74                 	db	116	;'t'
   249  0089' 79                 	db	121	;'y'
   250  008A' 20                 	db	32
   251  008B' 00                 	db	0
   252  008C'                    STR_1:
   253                           
   254                           ; BSR set to: 0
   255  008C' 4C                 	db	76	;'L'
   256  008D' 43                 	db	67	;'C'
   257  008E' 2D                 	db	45
   258  008F' 6D                 	db	109	;'m'
   259  0090' 65                 	db	101	;'e'
   260  0091' 74                 	db	116	;'t'
   261  0092' 65                 	db	101	;'e'
   262  0093' 72                 	db	114	;'r'
   263  0094' 20                 	db	32
   264  0095' 00                 	db	0
   265  0096'                    STR_5:
   266                           
   267                           ; BSR set to: 0
   268  0096' 20                 	db	32
   269  0097' 20                 	db	32
   270  0098' 20                 	db	32
   271  0099' 20                 	db	32
   272  009A' 20                 	db	32
   273  009B' 20                 	db	32
   274  009C' 00                 	db	0
   275  009D'                    STR_12:
   276                           
   277                           ; BSR set to: 0
   278  009D' 46                 	db	70	;'F'
   279  009E' 72                 	db	114	;'r'
   280  009F' 65                 	db	101	;'e'
   281  00A0' 71                 	db	113	;'q'
   282  00A1' 3D                 	db	61	;'='
   283  00A2' 00                 	db	0
   284  00A3'                    
   285                           ; BSR set to: 0
   286  00A3' 52                 	db	82	;'R'
   287  00A4' 43                 	db	67	;'C'
   288  00A5' 34                 	db	52	;'4'
   289  00A6' 3D                 	db	61	;'='
   290  00A7' 00                 	db	0
   291  00A8'                    STR_24:
   292                           
   293                           ; BSR set to: 0
   294  00A8' 2D                 	db	45
   295  00A9' 2A                 	db	42
   296  00AA' 2D                 	db	45
   297  00AB' 00                 	db	0
   298  00AC'                    
   299                           ; BSR set to: 0
   300  00AC' 6D                 	db	109	;'m'
   301  00AD' 46                 	db	70	;'F'
   302  00AE' 00                 	db	0
   303  00AF'                    
   304                           ; BSR set to: 0
   305  00AF' 6E                 	db	110	;'n'
   306  00B0' 46                 	db	70	;'F'
   307  00B1' 00                 	db	0
   308  00B2'                    
   309                           ; BSR set to: 0
   310  00B2' 70                 	db	112	;'p'
   311  00B3' 46                 	db	70	;'F'
   312  00B4' 00                 	db	0
   313  00B5'                    
   314                           ; BSR set to: 0
   315  00B5' 75                 	db	117	;'u'
   316  00B6' 46                 	db	70	;'F'
   317  00B7' 00                 	db	0
   318  00B8'                    STR_16:
   319                           
   320                           ; BSR set to: 0
   321  00B8' 6D                 	db	109	;'m'
   322  00B9' 48                 	db	72	;'H'
   323  00BA' 00                 	db	0
   324  00BB'                    
   325                           ; BSR set to: 0
   326  00BB' 6E                 	db	110	;'n'
   327  00BC' 48                 	db	72	;'H'
   328  00BD' 00                 	db	0
   329  00BE'                    
   330                           ; BSR set to: 0
   331  00BE' 75                 	db	117	;'u'
   332  00BF' 48                 	db	72	;'H'
   333  00C0' 00                 	db	0
   334  00C1'                    STR_4:
   335                           
   336                           ; BSR set to: 0
   337  00C1' 0D                 	db	13
   338  00C2' 0A                 	db	10
   339  00C3' 00                 	db	0
   340  0000                     
   341                           ; #config settings
   342  00C4' 00                 	db	0	; dummy byte at the end
   343  0000                     
   344                           	psect	nvBANK0
   345  0000'                    __pnvBANK0:
   346                           	opt stack 0
   347  0000'                    _bres:
   348                           	opt stack 0
   349  0000'                    	ds	4
   350  0004'                    _CCal:
   351                           	opt stack 0
   352  0004'                    	ds	3
   353  0007'                    _led_interval:
   354                           	opt stack 0
   355  0007'                    	ds	2
   356  0000                     _TMR0	set	4054
   357  0000                     _INTCON	set	4082
   358  0000                     _INTCON2	set	4081
   359  0000                     _INTCONbits	set	4082
   360  0000                     _LATB	set	3978
   361  0000                     _LATC	set	3979
   362  0000                     _PIE1	set	3997
   363  0000                     _PIE1bits	set	3997
   364  0000                     _PIR1	set	3998
   365  0000                     _PIR1bits	set	3998
   366  0000                     _PORTC	set	3970
   367  0000                     _PORTCbits	set	3970
   368  0000                     _RCREG	set	4014
   369  0000                     _T0CON	set	4053
   370  0000                     _T0CONbits	set	4053
   371  0000                     _T2CON	set	4042
   372  0000                     _TMR2	set	4044
   373  0000                     _TRISA	set	3986
   374  0000                     _TRISB	set	3987
   375  0000                     _TRISC	set	3988
   376  0000                     _TXREG	set	4013
   377                           
   378                           	psect	cinit
   379  0000'                    __pcinit:
   380                           	opt stack 0
   381  0000'                    start_initialization:
   382                           	opt stack 0
   383  0000'                    __initialization:
   384                           	opt stack 0
   385                           
   386                           ; Clear objects allocated to BANK0 (35 bytes)
   387  0000' EE00' F000'        	lfsr	0,__pbssBANK0
   388  0004' 0E23               	movlw	35
   389  0006'                    clear_0:
   390  0006' 6AEE               	clrf	postinc0,c
   391  0008' 06E8               	decf	wreg,f,c
   392  000A' E1FD               	bnz	clear_0
   393                           
   394                           ; Clear objects allocated to COMRAM (13 bytes)
   395  000C' EE00' F000'        	lfsr	0,__pbssCOMRAM
   396  0010' 0E0D               	movlw	13
   397  0012'                    clear_1:
   398  0012' 6AEE               	clrf	postinc0,c
   399  0014' 06E8               	decf	wreg,f,c
   400  0016' E1FD               	bnz	clear_1
   401                           
   402                           ; Initialize objects allocated to BANK0 (5 bytes)
   403                           ; load TBLPTR registers with __pidataBANK0
   404  0018' 0E00'              	movlw	low __pidataBANK0
   405  001A' 6EF6               	movwf	tblptrl,c
   406  001C' 0E00'              	movlw	high __pidataBANK0
   407  001E' 6EF7               	movwf	tblptrh,c
   408  0020' 0E00'              	movlw	low (__pidataBANK0 shr (0+16))
   409  0022' 6EF8               	movwf	tblptru,c
   410  0024' EE00' F000'        	lfsr	0,__pdataBANK0
   411  0028' EE10 F005          	lfsr	1,5
   412  002C'                    copy_data0:
   413  002C' 0009               	tblrd		*+
   414  002E' CFF5 FFEE          	movff	tablat,postinc0
   415  0032' 50E5               	movf	postdec1,w,c
   416  0034' 50E1               	movf	fsr1l,w,c
   417  0036' E1FA               	bnz	copy_data0
   418  0038'                    end_of_initialization:
   419                           	opt stack 0
   420  0038'                    __end_of__initialization:
   421                           	opt stack 0
   422  0038' 0E00'              	movlw	low (__Lsmallconst shr (0+16))
   423  003A' 6EF8               	movwf	tblptru,c
   424  003C' 0E00'              	movlw	high __Lsmallconst
   425  003E' 6EF7               	movwf	tblptrh,c
   426  0040' 0100               	movlb	0
   427  0042' EF00' F000'        	goto	_main	;jump to C main() function
   428                           tblptru	equ	0xFF8
   429                           tblptrh	equ	0xFF7
   430                           tblptrl	equ	0xFF6
   431                           tablat	equ	0xFF5
   432                           postinc0	equ	0xFEE
   433                           wreg	equ	0xFE8
   434                           postdec1	equ	0xFE5
   435                           fsr1l	equ	0xFE1
   436                           
   437                           	psect	bssCOMRAM
   438  0000'                    __pbssCOMRAM:
   439                           	opt stack 0
   440  0000'                    _F2:
   441                           	opt stack 0
   442  0000'                    	ds	3
   443  0003'                    _F3:
   444                           	opt stack 0
   445  0003'                    	ds	3
   446  0006'                    _led_cycle:
   447                           	opt stack 0
   448  0006'                    	ds	2
   449  0008'                    _LCD_ctrl:
   450                           	opt stack 0
   451  0008'                    	ds	1
   452  0009'                    _LCD_function:
   453                           	opt stack 0
   454  0009'                    	ds	1
   455  000A'                    _F1:
   456                           	opt stack 0
   457  000A'                    	ds	3
   458                           tblptru	equ	0xFF8
   459                           tblptrh	equ	0xFF7
   460                           tblptrl	equ	0xFF6
   461                           tablat	equ	0xFF5
   462                           postinc0	equ	0xFEE
   463                           wreg	equ	0xFE8
   464                           postdec1	equ	0xFE5
   465                           fsr1l	equ	0xFE1
   466                           
   467                           	psect	bssBANK0
   468  0000'                    __pbssBANK0:
   469                           	opt stack 0
   470  0000'                    _msecs:
   471                           	opt stack 0
   472  0000'                    	ds	4
   473  0004'                    _seconds:
   474                           	opt stack 0
   475  0004'                    	ds	4
   476  0008'                    _timer1of:
   477                           	opt stack 0
   478  0008'                    	ds	4
   479  000C'                    _blink:
   480                           	opt stack 0
   481  000C'                    	ds	2
   482  000E'                    _msecpart:
   483                           	opt stack 0
   484  000E'                    	ds	2
   485  0010'                    _LCD_lines:
   486                           	opt stack 0
   487  0010'                    	ds	1
   488  0011'                    _LCD_mode:
   489                           	opt stack 0
   490  0011'                    	ds	1
   491  0012'                    _buffer:
   492                           	opt stack 0
   493  0012'                    	ds	17
   494                           tblptru	equ	0xFF8
   495                           tblptrh	equ	0xFF7
   496                           tblptrl	equ	0xFF6
   497                           tablat	equ	0xFF5
   498                           postinc0	equ	0xFEE
   499                           wreg	equ	0xFE8
   500                           postdec1	equ	0xFE5
   501                           fsr1l	equ	0xFE1
   502                           
   503                           	psect	dataBANK0
   504  0000'                    __pdataBANK0:
   505                           	opt stack 0
   506  0000'                    lcd_gotoxy@F2308:
   507                           	opt stack 0
   508  0000'                    	ds	4
   509  0004'                    _mode:
   510                           	opt stack 0
   511  0004'                    	ds	1
   512                           tblptru	equ	0xFF8
   513                           tblptrh	equ	0xFF7
   514                           tblptrl	equ	0xFF6
   515                           tablat	equ	0xFF5
   516                           postinc0	equ	0xFEE
   517                           wreg	equ	0xFE8
   518                           postdec1	equ	0xFE5
   519                           fsr1l	equ	0xFE1
   520                           
   521                           	psect	cstackBANK0
   522  0000'                    __pcstackBANK0:
   523                           	opt stack 0
   524  0000'                    ?___altoft:
   525                           	opt stack 0
   526  0000'                    measure_inductance@numerator:
   527                           	opt stack 0
   528  0000'                    _measure_capacitance$1310:
   529                           	opt stack 0
   530  0000'                    ___altoft@c:
   531                           	opt stack 0
   532                           
   533                           ; 4 bytes @ 0x0
   534  0000'                    	ds	3
   535  0003'                    measure_inductance@denominator:
   536                           	opt stack 0
   537  0003'                    _measure_capacitance$1311:
   538                           	opt stack 0
   539                           
   540                           ; 3 bytes @ 0x3
   541  0003'                    	ds	1
   542  0004'                    ??___altoft:
   543                           
   544                           ; 0 bytes @ 0x4
   545  0004'                    	ds	2
   546  0006'                    _measure_capacitance$1312:
   547                           	opt stack 0
   548  0006'                    _measure_inductance$1313:
   549                           	opt stack 0
   550                           
   551                           ; 3 bytes @ 0x6
   552  0006'                    	ds	2
   553  0008'                    ?_floor:
   554                           	opt stack 0
   555  0008'                    floor@x:
   556                           	opt stack 0
   557                           
   558                           ; 3 bytes @ 0x8
   559  0008'                    	ds	1
   560  0009'                    measure_capacitance@unit:
   561                           	opt stack 0
   562  0009'                    _measure_inductance$1317:
   563                           	opt stack 0
   564                           
   565                           ; 3 bytes @ 0x9
   566  0009'                    	ds	1
   567  000A'                    measure_capacitance@var:
   568                           	opt stack 0
   569                           
   570                           ; 2 bytes @ 0xA
   571  000A'                    	ds	1
   572  000B'                    floor@i:
   573                           	opt stack 0
   574                           
   575                           ; 3 bytes @ 0xB
   576  000B'                    	ds	1
   577  000C'                    measure_capacitance@Cin:
   578                           	opt stack 0
   579  000C'                    _measure_inductance$1318:
   580                           	opt stack 0
   581                           
   582                           ; 3 bytes @ 0xC
   583  000C'                    	ds	2
   584  000E'                    floor@expon:
   585                           	opt stack 0
   586                           
   587                           ; 2 bytes @ 0xE
   588  000E'                    	ds	1
   589  000F'                    _measure_inductance$1319:
   590                           	opt stack 0
   591                           
   592                           ; 3 bytes @ 0xF
   593  000F'                    	ds	1
   594  0010'                    ?_exp:
   595                           	opt stack 0
   596  0010'                    exp@x:
   597                           	opt stack 0
   598                           
   599                           ; 3 bytes @ 0x10
   600  0010'                    	ds	2
   601  0012'                    measure_inductance@unit:
   602                           	opt stack 0
   603                           
   604                           ; 1 bytes @ 0x12
   605  0012'                    	ds	1
   606  0013'                    _measure_inductance$1314:
   607                           	opt stack 0
   608  0013'                    _exp$1329:
   609                           	opt stack 0
   610                           
   611                           ; 3 bytes @ 0x13
   612  0013'                    	ds	3
   613  0016'                    exp@exponent:
   614                           	opt stack 0
   615  0016'                    _measure_inductance$1315:
   616                           	opt stack 0
   617                           
   618                           ; 3 bytes @ 0x16
   619  0016'                    	ds	2
   620  0018'                    exp@sign:
   621                           	opt stack 0
   622                           
   623                           ; 1 bytes @ 0x18
   624  0018'                    	ds	1
   625  0019'                    ?_pow:
   626                           	opt stack 0
   627  0019'                    pow@x:
   628                           	opt stack 0
   629  0019'                    _measure_inductance$1316:
   630                           	opt stack 0
   631                           
   632                           ; 3 bytes @ 0x19
   633  0019'                    	ds	3
   634  001C'                    measure_inductance@var:
   635                           	opt stack 0
   636  001C'                    pow@y:
   637                           	opt stack 0
   638                           
   639                           ; 3 bytes @ 0x1C
   640  001C'                    	ds	2
   641  001E'                    measure_inductance@Lin:
   642                           	opt stack 0
   643                           
   644                           ; 3 bytes @ 0x1E
   645  001E'                    	ds	1
   646  001F'                    _pow$1327:
   647                           	opt stack 0
   648                           
   649                           ; 3 bytes @ 0x1F
   650  001F'                    	ds	3
   651  0022'                    _pow$1328:
   652                           	opt stack 0
   653                           
   654                           ; 3 bytes @ 0x22
   655  0022'                    	ds	3
   656  0025'                    pow@sign:
   657                           	opt stack 0
   658                           
   659                           ; 1 bytes @ 0x25
   660  0025'                    	ds	1
   661  0026'                    pow@yi:
   662                           	opt stack 0
   663                           
   664                           ; 4 bytes @ 0x26
   665  0026'                    	ds	4
   666  002A'                    format_double@num:
   667                           	opt stack 0
   668                           
   669                           ; 3 bytes @ 0x2A
   670  002A'                    	ds	3
   671  002D'                    _format_double$1324:
   672                           	opt stack 0
   673                           
   674                           ; 3 bytes @ 0x2D
   675  002D'                    	ds	3
   676  0030'                    _format_double$1325:
   677                           	opt stack 0
   678                           
   679                           ; 3 bytes @ 0x30
   680  0030'                    	ds	3
   681  0033'                    format_double@weight:
   682                           	opt stack 0
   683                           
   684                           ; 3 bytes @ 0x33
   685  0033'                    	ds	3
   686  0036'                    format_double@digit:
   687                           	opt stack 0
   688                           
   689                           ; 2 bytes @ 0x36
   690  0036'                    	ds	2
   691  0038'                    format_double@m:
   692                           	opt stack 0
   693                           
   694                           ; 2 bytes @ 0x38
   695  0038'                    	ds	2
   696  003A'                    _main$294:
   697                           	opt stack 0
   698                           
   699                           ; 1 bytes @ 0x3A
   700  003A'                    	ds	1
   701  003B'                    main@new_mode:
   702                           	opt stack 0
   703                           
   704                           ; 1 bytes @ 0x3B
   705  003B'                    	ds	1
   706                           tblptru	equ	0xFF8
   707                           tblptrh	equ	0xFF7
   708                           tblptrl	equ	0xFF6
   709                           tablat	equ	0xFF5
   710                           postinc0	equ	0xFEE
   711                           wreg	equ	0xFE8
   712                           postdec1	equ	0xFE5
   713                           fsr1l	equ	0xFE1
   714                           
   715                           	psect	cstackCOMRAM
   716  0000'                    __pcstackCOMRAM:
   717                           	opt stack 0
   718  0000'                    ?i2___lwdiv:
   719                           	opt stack 0
   720  0000'                    i2___lwdiv@dividend:
   721                           	opt stack 0
   722                           
   723                           ; 2 bytes @ 0x0
   724  0000'                    	ds	2
   725  0002'                    i2___lwdiv@divisor:
   726                           	opt stack 0
   727                           
   728                           ; 2 bytes @ 0x2
   729  0002'                    	ds	2
   730  0004'                    i2___lwdiv@quotient:
   731                           	opt stack 0
   732                           
   733                           ; 2 bytes @ 0x4
   734  0004'                    	ds	2
   735  0006'                    i2___lwdiv@counter:
   736                           	opt stack 0
   737                           
   738                           ; 1 bytes @ 0x6
   739  0006'                    	ds	1
   740  0007'                    ??_isr:
   741                           
   742                           ; 0 bytes @ 0x7
   743  0007'                    	ds	6
   744  000D'                    ??_timer0_init:
   745  000D'                    ??_timer2_init:
   746  000D'                    ??_buffer_putch:
   747  000D'                    ?_timer0_read_ps:
   748                           	opt stack 0
   749  000D'                    ?___lwdiv:
   750                           	opt stack 0
   751  000D'                    ?___lwmod:
   752                           	opt stack 0
   753  000D'                    ?___ftpack:
   754                           	opt stack 0
   755  000D'                    ?_frexp:
   756                           	opt stack 0
   757  000D'                    ?___ftneg:
   758                           	opt stack 0
   759  000D'                    _ser_puts$0:
   760                           	opt stack 0
   761  000D'                    lcd_write4bits@value:
   762                           	opt stack 0
   763  000D'                    lcd_init@fourbitmode:
   764                           	opt stack 0
   765  000D'                    ___lwdiv@dividend:
   766                           	opt stack 0
   767  000D'                    ___lwmod@dividend:
   768                           	opt stack 0
   769  000D'                    ___ftpack@arg:
   770                           	opt stack 0
   771  000D'                    frexp@value:
   772                           	opt stack 0
   773  000D'                    ___ftge@ff1:
   774                           	opt stack 0
   775  000D'                    ___ftneg@f1:
   776                           	opt stack 0
   777                           
   778                           ; 3 bytes @ 0xD
   779  000D'                    	ds	1
   780  000E'                    lcd_send@mode:
   781                           	opt stack 0
   782  000E'                    timer2_init@ps:
   783                           	opt stack 0
   784  000E'                    _lcd_init$487:
   785                           	opt stack 0
   786  000E'                    _timer0_init$655:
   787                           	opt stack 0
   788                           
   789                           ; 2 bytes @ 0xE
   790  000E'                    	ds	1
   791  000F'                    ??_timer0_read_ps:
   792  000F'                    lcd_send@value:
   793                           	opt stack 0
   794  000F'                    buffer_putch@ch:
   795                           	opt stack 0
   796  000F'                    ___lwdiv@divisor:
   797                           	opt stack 0
   798  000F'                    ___lwmod@divisor:
   799                           	opt stack 0
   800                           
   801                           ; 2 bytes @ 0xF
   802  000F'                    	ds	1
   803  0010'                    lcd_command@value:
   804                           	opt stack 0
   805  0010'                    lcd_putch@value:
   806                           	opt stack 0
   807  0010'                    buffer_puts@x:
   808                           	opt stack 0
   809  0010'                    timer2_init@ps_mode:
   810                           	opt stack 0
   811  0010'                    ___ftpack@exp:
   812                           	opt stack 0
   813  0010'                    frexp@eptr:
   814                           	opt stack 0
   815  0010'                    _timer0_init$656:
   816                           	opt stack 0
   817  0010'                    ___ftge@ff2:
   818                           	opt stack 0
   819                           
   820                           ; 3 bytes @ 0x10
   821  0010'                    	ds	1
   822  0011'                    ??_lcd_puts:
   823  0011'                    ??_lcd_clear:
   824  0011'                    ??_frexp:
   825  0011'                    lcd_gotoxy@row:
   826                           	opt stack 0
   827  0011'                    lcd_begin@dotsize:
   828                           	opt stack 0
   829  0011'                    output_putch@c:
   830                           	opt stack 0
   831  0011'                    timer0_read_ps@prev:
   832                           	opt stack 0
   833  0011'                    ___ftpack@sign:
   834                           	opt stack 0
   835  0011'                    ___lwdiv@counter:
   836                           	opt stack 0
   837  0011'                    ___lwmod@counter:
   838                           	opt stack 0
   839                           
   840                           ; 1 bytes @ 0x11
   841  0011'                    	ds	1
   842  0012'                    ??_lcd_begin:
   843  0012'                    ??_put_str:
   844  0012'                    ??___ftpack:
   845  0012'                    lcd_gotoxy@col:
   846                           	opt stack 0
   847  0012'                    lcd_puts@i:
   848                           	opt stack 0
   849  0012'                    _timer0_init$657:
   850                           	opt stack 0
   851  0012'                    timer0_read_ps@count:
   852                           	opt stack 0
   853  0012'                    ___lwdiv@quotient:
   854                           	opt stack 0
   855                           
   856                           ; 2 bytes @ 0x12
   857  0012'                    	ds	1
   858  0013'                    ??___ftge:
   859  0013'                    lcd_puts@string:
   860                           	opt stack 0
   861  0013'                    lcd_begin@lines:
   862                           	opt stack 0
   863  0013'                    put_str@i:
   864                           	opt stack 0
   865  0013'                    lcd_gotoxy@row_offsets:
   866                           	opt stack 0
   867                           
   868                           ; 4 bytes @ 0x13
   869  0013'                    	ds	1
   870  0014'                    format_number@n:
   871                           	opt stack 0
   872  0014'                    _timer0_init$658:
   873                           	opt stack 0
   874                           
   875                           ; 2 bytes @ 0x14
   876  0014'                    	ds	1
   877  0015'                    ?___ftdiv:
   878                           	opt stack 0
   879  0015'                    ?___awtoft:
   880                           	opt stack 0
   881  0015'                    ?___lltoft:
   882                           	opt stack 0
   883  0015'                    put_str@s:
   884                           	opt stack 0
   885  0015'                    ___awtoft@c:
   886                           	opt stack 0
   887  0015'                    ___ftdiv@f1:
   888                           	opt stack 0
   889  0015'                    ___lltoft@c:
   890                           	opt stack 0
   891                           
   892                           ; 4 bytes @ 0x15
   893  0015'                    	ds	1
   894  0016'                    format_number@base:
   895                           	opt stack 0
   896  0016'                    timer0_init@prescaler:
   897                           	opt stack 0
   898                           
   899                           ; 1 bytes @ 0x16
   900  0016'                    	ds	1
   901  0017'                    ??_print_unit:
   902  0017'                    print_indicator@indicate:
   903                           	opt stack 0
   904  0017'                    format_number@pad:
   905                           	opt stack 0
   906  0017'                    timer0_init@ps_mode:
   907                           	opt stack 0
   908                           
   909                           ; 1 bytes @ 0x17
   910  0017'                    	ds	1
   911  0018'                    ??_format_number:
   912  0018'                    ___awtoft@sign:
   913                           	opt stack 0
   914  0018'                    ___ftdiv@f2:
   915                           	opt stack 0
   916                           
   917                           ; 3 bytes @ 0x18
   918  0018'                    	ds	1
   919  0019'                    ??___lltoft:
   920                           
   921                           ; 0 bytes @ 0x19
   922  0019'                    	ds	1
   923  001A'                    format_number@buf:
   924                           	opt stack 0
   925                           
   926                           ; 32 bytes @ 0x1A
   927  001A'                    	ds	1
   928  001B'                    ??___ftdiv:
   929                           
   930                           ; 0 bytes @ 0x1B
   931  001B'                    	ds	2
   932  001D'                    ___lltoft@exp:
   933                           	opt stack 0
   934                           
   935                           ; 1 bytes @ 0x1D
   936  001D'                    	ds	1
   937  001E'                    ___ftdiv@cntr:
   938                           	opt stack 0
   939                           
   940                           ; 1 bytes @ 0x1E
   941  001E'                    	ds	1
   942  001F'                    ___ftdiv@f3:
   943                           	opt stack 0
   944                           
   945                           ; 3 bytes @ 0x1F
   946  001F'                    	ds	3
   947  0022'                    ___ftdiv@exp:
   948                           	opt stack 0
   949                           
   950                           ; 1 bytes @ 0x22
   951  0022'                    	ds	1
   952  0023'                    ___ftdiv@sign:
   953                           	opt stack 0
   954                           
   955                           ; 1 bytes @ 0x23
   956  0023'                    	ds	1
   957  0024'                    ?___ftmul:
   958                           	opt stack 0
   959  0024'                    ___ftmul@f1:
   960                           	opt stack 0
   961                           
   962                           ; 3 bytes @ 0x24
   963  0024'                    	ds	3
   964  0027'                    ___ftmul@f2:
   965                           	opt stack 0
   966                           
   967                           ; 3 bytes @ 0x27
   968  0027'                    	ds	3
   969  002A'                    ??___ftmul:
   970                           
   971                           ; 0 bytes @ 0x2A
   972  002A'                    	ds	3
   973  002D'                    ___ftmul@exp:
   974                           	opt stack 0
   975                           
   976                           ; 1 bytes @ 0x2D
   977  002D'                    	ds	1
   978  002E'                    ___ftmul@f3_as_product:
   979                           	opt stack 0
   980                           
   981                           ; 3 bytes @ 0x2E
   982  002E'                    	ds	3
   983  0031'                    ___ftmul@cntr:
   984                           	opt stack 0
   985                           
   986                           ; 1 bytes @ 0x31
   987  0031'                    	ds	1
   988  0032'                    ___ftmul@sign:
   989                           	opt stack 0
   990                           
   991                           ; 1 bytes @ 0x32
   992  0032'                    	ds	1
   993  0033'                    ?___ftadd:
   994                           	opt stack 0
   995  0033'                    ___ftadd@f1:
   996                           	opt stack 0
   997                           
   998                           ; 3 bytes @ 0x33
   999  0033'                    	ds	3
  1000  0036'                    ___ftadd@f2:
  1001                           	opt stack 0
  1002                           
  1003                           ; 3 bytes @ 0x36
  1004  0036'                    	ds	3
  1005  0039'                    ??___ftadd:
  1006                           
  1007                           ; 0 bytes @ 0x39
  1008  0039'                    	ds	1
  1009  003A'                    _format_number$576:
  1010                           	opt stack 0
  1011                           
  1012                           ; 2 bytes @ 0x3A
  1013  003A'                    	ds	2
  1014  003C'                    format_number@padchar:
  1015                           	opt stack 0
  1016  003C'                    ___ftadd@sign:
  1017                           	opt stack 0
  1018                           
  1019                           ; 1 bytes @ 0x3C
  1020  003C'                    	ds	1
  1021  003D'                    format_number@di:
  1022                           	opt stack 0
  1023  003D'                    ___ftadd@exp2:
  1024                           	opt stack 0
  1025                           
  1026                           ; 1 bytes @ 0x3D
  1027  003D'                    	ds	1
  1028  003E'                    format_number@i:
  1029                           	opt stack 0
  1030  003E'                    ___ftadd@exp1:
  1031                           	opt stack 0
  1032                           
  1033                           ; 1 bytes @ 0x3E
  1034  003E'                    	ds	1
  1035  003F'                    ?_measure_freq:
  1036                           	opt stack 0
  1037  003F'                    ?___ftsub:
  1038                           	opt stack 0
  1039  003F'                    ?_eval_poly:
  1040                           	opt stack 0
  1041  003F'                    print_reading@measurement:
  1042                           	opt stack 0
  1043  003F'                    ___ftsub@f1:
  1044                           	opt stack 0
  1045  003F'                    eval_poly@x:
  1046                           	opt stack 0
  1047                           
  1048                           ; 3 bytes @ 0x3F
  1049  003F'                    	ds	2
  1050  0041'                    ??_measure_freq:
  1051  0041'                    _print_reading$1320:
  1052                           	opt stack 0
  1053                           
  1054                           ; 2 bytes @ 0x41
  1055  0041'                    	ds	1
  1056  0042'                    eval_poly@d:
  1057                           	opt stack 0
  1058  0042'                    measure_freq@count:
  1059                           	opt stack 0
  1060  0042'                    ___ftsub@f2:
  1061                           	opt stack 0
  1062                           
  1063                           ; 3 bytes @ 0x42
  1064  0042'                    	ds	1
  1065  0043'                    eval_poly@n:
  1066                           	opt stack 0
  1067  0043'                    _print_reading$1321:
  1068                           	opt stack 0
  1069                           
  1070                           ; 2 bytes @ 0x43
  1071  0043'                    	ds	1
  1072  0044'                    ?___lwtoft:
  1073                           	opt stack 0
  1074  0044'                    ___lwtoft@c:
  1075                           	opt stack 0
  1076                           
  1077                           ; 2 bytes @ 0x44
  1078  0044'                    	ds	1
  1079  0045'                    ??_eval_poly:
  1080                           
  1081                           ; 0 bytes @ 0x45
  1082  0045'                    	ds	1
  1083  0046'                    eval_poly@res:
  1084                           	opt stack 0
  1085                           
  1086                           ; 3 bytes @ 0x46
  1087  0046'                    	ds	1
  1088  0047'                    calibrate@i:
  1089                           	opt stack 0
  1090                           
  1091                           ; 1 bytes @ 0x47
  1092  0047'                    	ds	2
  1093  0049'                    ?_ldexp:
  1094                           	opt stack 0
  1095  0049'                    ?_log:
  1096                           	opt stack 0
  1097  0049'                    ldexp@value:
  1098                           	opt stack 0
  1099  0049'                    log@x:
  1100                           	opt stack 0
  1101                           
  1102                           ; 3 bytes @ 0x49
  1103  0049'                    	ds	3
  1104  004C'                    ldexp@newexp:
  1105                           	opt stack 0
  1106  004C'                    log@exponent:
  1107                           	opt stack 0
  1108                           
  1109                           ; 2 bytes @ 0x4C
  1110  004C'                    	ds	2
  1111  004E'                    ??_ldexp:
  1112  004E'                    ?_log10:
  1113                           	opt stack 0
  1114  004E'                    log10@x:
  1115                           	opt stack 0
  1116                           
  1117                           ; 3 bytes @ 0x4E
  1118  004E'                    	ds	3
  1119  0051'                    _log10$1326:
  1120                           	opt stack 0
  1121                           
  1122                           ; 3 bytes @ 0x51
  1123  0051'                    	ds	3
  1124  0054'                    ?___fttol:
  1125                           	opt stack 0
  1126  0054'                    ___fttol@f1:
  1127                           	opt stack 0
  1128                           
  1129                           ; 3 bytes @ 0x54
  1130  0054'                    	ds	4
  1131  0058'                    ??___fttol:
  1132                           
  1133                           ; 0 bytes @ 0x58
  1134  0058'                    	ds	5
  1135  005D'                    ___fttol@sign1:
  1136                           	opt stack 0
  1137                           
  1138                           ; 1 bytes @ 0x5D
  1139  005D'                    	ds	1
  1140  005E'                    ___fttol@lval:
  1141                           	opt stack 0
  1142                           
  1143                           ; 4 bytes @ 0x5E
  1144  005E'                    	ds	4
  1145  0062'                    ___fttol@exp1:
  1146                           	opt stack 0
  1147                           
  1148                           ; 1 bytes @ 0x62
  1149  0062'                    	ds	1
  1150  0063'                    ___altoft@exp:
  1151                           	opt stack 0
  1152                           
  1153                           ; 1 bytes @ 0x63
  1154  0063'                    	ds	1
  1155  0064'                    ___altoft@sign:
  1156                           	opt stack 0
  1157                           
  1158                           ; 1 bytes @ 0x64
  1159  0064'                    	ds	1
  1160  0065'                    tblptru	equ	0xFF8
  1161                           tblptrh	equ	0xFF7
  1162                           tblptrl	equ	0xFF6
  1163                           tablat	equ	0xFF5
  1164                           postinc0	equ	0xFEE
  1165                           wreg	equ	0xFE8
  1166                           postdec1	equ	0xFE5
  1167                           fsr1l	equ	0xFE1
  1168                           
  1169                           ; 0 bytes @ 0x65
  1170 ;;
  1171 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1172 ;;
  1173 ;; *************** function _main *****************
  1174 ;; Defined at:
  1175 ;;		line 117 in file "D:\\Sources\\lc-meter\\obj\\../LC-meter.c"
  1176 ;; Parameters:    Size  Location     Type
  1177 ;;		None
  1178 ;; Auto vars:     Size  Location     Type
  1179 ;;  new_mode        1   59[BANK0 ] unsigned char 
  1180 ;; Return value:  Size  Location     Type
  1181 ;;		None               void
  1182 ;; Registers used:
  1183 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblp
      +tru, prodl, prodh, bsr, cstack
  1184 ;; Tracked objects:
  1185 ;;		On entry : 0/0
  1186 ;;		On exit  : 0/0
  1187 ;;		Unchanged: 0/0
  1188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1189 ;;      Params:         0       0       0       0       0       0       0
  1190 ;;      Locals:         0       2       0       0       0       0       0
  1191 ;;      Temps:          0       0       0       0       0       0       0
  1192 ;;      Totals:         0       2       0       0       0       0       0
  1193 ;;Total ram usage:        2 bytes
  1194 ;; Hardware stack levels required when called:    8
  1195 ;; This function calls:
  1196 ;;		_calibrate
  1197 ;;		_delay10ms
  1198 ;;		_format_double
  1199 ;;		_lcd_begin
  1200 ;;		_lcd_clear
  1201 ;;		_lcd_gotoxy
  1202 ;;		_lcd_init
  1203 ;;		_lcd_puts
  1204 ;;		_measure_capacitance
  1205 ;;		_measure_inductance
  1206 ;;		_print_indicator
  1207 ;;		_ser_init
  1208 ;;		_ser_puts
  1209 ;;		_timer0_init
  1210 ;;		_timer2_init
  1211 ;; This function is called by:
  1212 ;;		Startup code after reset
  1213 ;; This function uses a non-reentrant model
  1214 ;;
  1215                           
  1216                           	psect	text0
  1217  0000'                    __ptext0:
  1218                           	opt stack 0
  1219  0000'                    _main:
  1220                           	opt stack 23
  1221                           
  1222                           ; BSR set to: 0
  1223                           ;incstack = 0
  1224  0000' FFFF               	dw	65535
  1225                           
  1226                           ;LC-meter.c: 118: bres = msecpart = msecs = seconds = 0;
  1227  0002' 0100               	movlb	0	; () banked
  1228  0004' 6B00'              	clrf	_seconds& (0+255),b	;volatile
  1229  0006' 6B00'              	clrf	(_seconds+1)& (0+255),b	;volatile
  1230  0008' 6B00'              	clrf	(_seconds+2)& (0+255),b	;volatile
  1231  000A' 6B00'              	clrf	(_seconds+3)& (0+255),b	;volatile
  1232  000C' C004' F000'        	movff	_seconds,_msecs	;volatile
  1233  0010' C005' F001'        	movff	_seconds+1,_msecs+1	;volatile
  1234  0014' C006' F002'        	movff	_seconds+2,_msecs+2	;volatile
  1235  0018' C007' F003'        	movff	_seconds+3,_msecs+3	;volatile
  1236  001C' C000' F00E'        	movff	_msecs,_msecpart	;volatile
  1237  0020' C001' F00F'        	movff	_msecs+1,_msecpart+1	;volatile
  1238  0024' C00E' F000'        	movff	_msecpart,_bres	;volatile
  1239  0028' C00F' F001'        	movff	_msecpart+1,_bres+1	;volatile
  1240  002C' 6B00'              	clrf	(_bres+2)& (0+255),b	;volatile
  1241  002E' 6B00'              	clrf	(_bres+3)& (0+255),b	;volatile
  1242                           
  1243                           ; BSR set to: 0
  1244                           ;LC-meter.c: 119: mode = -1;
  1245  0030' 6900'              	setf	_mode& (0+255),b
  1246                           
  1247                           ;LC-meter.c: 121: CCal = 1000;
  1248  0032' 6B00'              	clrf	_CCal& (0+255),b
  1249  0034' 0E7A               	movlw	122
  1250  0036' 6F00'              	movwf	(_CCal+1)& (0+255),b
  1251  0038' 0E44               	movlw	68
  1252  003A' 6F00'              	movwf	(_CCal+2)& (0+255),b
  1253                           
  1254                           ; BSR set to: 0
  1255                           ;LC-meter.c: 123: led_cycle = 0;
  1256  003C' 6A06'              	clrf	_led_cycle,c	;volatile
  1257  003E' 6A07'              	clrf	_led_cycle+1,c	;volatile
  1258                           
  1259                           ;LC-meter.c: 124: led_interval = 500;
  1260  0040' 0E01               	movlw	1
  1261  0042' 6F00'              	movwf	(_led_interval+1)& (0+255),b	;volatile
  1262  0044' 0EF4               	movlw	244
  1263  0046' 6F00'              	movwf	_led_interval& (0+255),b	;volatile
  1264                           
  1265                           ;LC-meter.c: 134: TRISA = 0b11001111;
  1266  0048' 0ECF               	movlw	207
  1267  004A' 6E92               	movwf	3986,c	;volatile
  1268                           
  1269                           ; BSR set to: 0
  1270                           ;LC-meter.c: 136: TRISB &= 0b00001111;
  1271  004C' 0E0F               	movlw	15
  1272  004E' 1693               	andwf	3987,f,c	;volatile
  1273                           
  1274                           ; BSR set to: 0
  1275                           ;LC-meter.c: 139: timer0_init(0b1000 | 0x20 | 0x40);
  1276  0050' 0E68               	movlw	104
  1277  0052' EC00' F000'        	call	_timer0_init
  1278                           
  1279                           ;LC-meter.c: 140: timer2_init(0b100 | 0x80);
  1280  0056' 0E84               	movlw	132
  1281  0058' EC00' F000'        	call	_timer2_init
  1282                           
  1283                           ;LC-meter.c: 147: INTCON2 &= ~0b10000000;
  1284  005C' 9EF1               	bcf	intcon2,7,c	;volatile
  1285                           
  1286                           ;LC-meter.c: 155: TRISC = 0b10110011;
  1287  005E' 0EB3               	movlw	179
  1288  0060' 6E94               	movwf	3988,c	;volatile
  1289                           
  1290                           ;LC-meter.c: 159: PORTCbits.RC3 = 1;
  1291  0062' 8682               	bsf	3970,3,c	;volatile
  1292                           
  1293                           ;LC-meter.c: 162: TRISC &= ~(1 << 2);
  1294  0064' 9494               	bcf	3988,2,c	;volatile
  1295                           
  1296                           ;LC-meter.c: 163: LATC &= ~(1 << 2); LATC |= (!!(1)) << 2;;
  1297  0066' 948B               	bcf	3979,2,c	;volatile
  1298  0068' 848B               	bsf	3979,2,c	;volatile
  1299                           
  1300                           ;LC-meter.c: 165: timer2_init(0b000 | 0x80);
  1301  006A' 0E80               	movlw	128
  1302  006C' EC00' F000'        	call	_timer2_init
  1303                           
  1304                           ;LC-meter.c: 172: lcd_init(1);
  1305  0070' 0E01               	movlw	1
  1306  0072' EC00' F000'        	call	_lcd_init
  1307                           
  1308                           ; BSR set to: 0
  1309                           ;LC-meter.c: 173: lcd_begin(2, 1);
  1310  0076' 0E01               	movlw	1
  1311  0078' 6E11'              	movwf	lcd_begin@dotsize,c
  1312  007A' 0E02               	movlw	2
  1313  007C' EC00' F000'        	call	_lcd_begin
  1314                           
  1315                           ;LC-meter.c: 176: TRISC |= (1 << 4);
  1316  0080' 8894               	bsf	3988,4,c	;volatile
  1317                           
  1318                           ;LC-meter.c: 177: TRISC &= ~(1 << 5);
  1319  0082' 9A94               	bcf	3988,5,c	;volatile
  1320                           
  1321                           ;LC-meter.c: 179: LATC &= ~(1 << 5);
  1322  0084' 9A8B               	bcf	3979,5,c	;volatile
  1323                           
  1324                           ;LC-meter.c: 180: delay10ms(50);
  1325  0086' 0E32               	movlw	50
  1326  0088' EC00' F000'        	call	_delay10ms
  1327                           
  1328                           ;LC-meter.c: 181: LATC |= (1 << 5);
  1329  008C' 8A8B               	bsf	3979,5,c	;volatile
  1330                           
  1331                           ;LC-meter.c: 182: delay10ms(50);
  1332  008E' 0E32               	movlw	50
  1333  0090' EC00' F000'        	call	_delay10ms
  1334                           
  1335                           ;LC-meter.c: 183: LATC &= ~(1 << 5);
  1336  0094' 9A8B               	bcf	3979,5,c	;volatile
  1337                           
  1338                           ;LC-meter.c: 184: delay10ms(50);
  1339  0096' 0E32               	movlw	50
  1340  0098' EC00' F000'        	call	_delay10ms
  1341                           
  1342                           ;LC-meter.c: 185: LATC |= (1 << 5);
  1343  009C' 8A8B               	bsf	3979,5,c	;volatile
  1344                           
  1345                           ;LC-meter.c: 186: delay10ms(50);
  1346  009E' 0E32               	movlw	50
  1347  00A0' EC00' F000'        	call	_delay10ms
  1348                           
  1349                           ;LC-meter.c: 187: LATC &= ~(1 << 5);
  1350  00A4' 9A8B               	bcf	3979,5,c	;volatile
  1351                           
  1352                           ;LC-meter.c: 190: ser_init();
  1353  00A6' EC00' F000'        	call	_ser_init	;wreg free
  1354                           
  1355                           ;LC-meter.c: 197: INTCON |= 0xc0;
  1356  00AA' 0EC0               	movlw	192
  1357  00AC' 12F2               	iorwf	intcon,f,c	;volatile
  1358                           
  1359                           ;LC-meter.c: 203: lcd_gotoxy(0, 0);
  1360  00AE' 0E00               	movlw	0
  1361  00B0' 6A11'              	clrf	lcd_gotoxy@row,c
  1362  00B2' EC00' F000'        	call	_lcd_gotoxy
  1363                           
  1364                           ;LC-meter.c: 204: lcd_puts("LC-meter ");
  1365  00B6' 0E00'              	movlw	STR_1& (0+255)
  1366  00B8' EC00' F000'        	call	_lcd_puts
  1367                           
  1368                           ;LC-meter.c: 205: format_double( CCal);
  1369  00BC' C004' F02A'        	movff	_CCal,format_double@num
  1370  00C0' C005' F02B'        	movff	_CCal+1,format_double@num+1
  1371  00C4' C006' F02C'        	movff	_CCal+2,format_double@num+2
  1372  00C8' EC00' F000'        	call	_format_double	;wreg free
  1373                           
  1374                           ;LC-meter.c: 210: delay10ms(5);
  1375  00CC' 0E05               	movlw	5
  1376  00CE' EC00' F000'        	call	_delay10ms
  1377                           
  1378                           ;LC-meter.c: 215: calibrate();
  1379  00D2' EC00' F000'        	call	_calibrate	;wreg free
  1380                           
  1381                           ;LC-meter.c: 218: lcd_clear();
  1382  00D6' EC00' F000'        	call	_lcd_clear	;wreg free
  1383  00DA'                    l4276:
  1384  00DA' FFFF               	dw	65535	; assembler added errata NOP
  1385  00DC' 0E01               	movlw	1
  1386                           
  1387                           ;LC-meter.c: 227: char new_mode = (!!(PORTC & (1 << 4)));
  1388  00DE' A882               	btfss	3970,4,c	;volatile
  1389  00E0' 0E00               	movlw	0
  1390  00E2' 0100               	movlb	0	; () banked
  1391  00E4' 6F00'              	movwf	main@new_mode& (0+255),b
  1392                           
  1393                           ; BSR set to: 0
  1394                           ;LC-meter.c: 229: if(new_mode != mode) {
  1395  00E6' 5100'              	movf	_mode& (0+255),w,b
  1396  00E8' 1900'              	xorwf	main@new_mode& (0+255),w,b
  1397  00EA' E00D               	bz	l117
  1398                           
  1399                           ; BSR set to: 0
  1400                           ;LC-meter.c: 231: ser_puts(mode ? "- C (Unit: F) -" : "- L (Unit: H) -");
  1401  00EC' 5100'              	movf	_mode& (0+255),w,b
  1402                           
  1403                           ; BSR set to: 0
  1404  00EE' 0E00'              	movlw	low STR_3
  1405  00F0' A4D8               	btfss	status,2,c
  1406                           
  1407                           ; BSR set to: 0
  1408  00F2' 0E00'              	movlw	low STR_2
  1409  00F4' 6F00'              	movwf	_main$294& (0+255),b
  1410                           
  1411                           ; BSR set to: 0
  1412  00F6' 5100'              	movf	_main$294& (0+255),w,b
  1413  00F8' EC00' F000'        	call	_ser_puts
  1414                           
  1415                           ;LC-meter.c: 232: ser_puts("\r\n");
  1416  00FC' 0E00'              	movlw	STR_4& (0+255)
  1417  00FE' EC00' F000'        	call	_ser_puts
  1418                           
  1419                           ;LC-meter.c: 233: mode = new_mode;
  1420  0102' C03B' F004'        	movff	main@new_mode,_mode
  1421  0106'                    l117:
  1422                           
  1423                           ;LC-meter.c: 234: }
  1424                           ;LC-meter.c: 237: if(led_cycle >= led_interval)
  1425  0106' 0100               	movlb	0	; () banked
  1426  0108' 5100'              	movf	_led_interval& (0+255),w,b	;volatile
  1427  010A' 5C06'              	subwf	_led_cycle,w,c	;volatile
  1428  010C' 5100'              	movf	(_led_interval+1)& (0+255),w,b	;volatile
  1429  010E' 5807'              	subwfb	_led_cycle+1,w,c	;volatile
  1430  0110' E302               	bnc	l4294
  1431                           
  1432                           ; BSR set to: 0
  1433                           ;LC-meter.c: 238: led_cycle = 0;
  1434  0112' 6A06'              	clrf	_led_cycle,c	;volatile
  1435  0114' 6A07'              	clrf	_led_cycle+1,c	;volatile
  1436  0116'                    l4294:
  1437                           
  1438                           ; BSR set to: 0
  1439                           ;LC-meter.c: 240: if(mode)
  1440  0116' 5100'              	movf	_mode& (0+255),w,b
  1441  0118' E003               	bz	l4298
  1442                           
  1443                           ; BSR set to: 0
  1444                           ;LC-meter.c: 241: measure_capacitance();
  1445  011A' EC00' F000'        	call	_measure_capacitance	;wreg free
  1446  011E' D002               	goto	l124
  1447  0120'                    l4298:
  1448                           
  1449                           ; BSR set to: 0
  1450                           ;LC-meter.c: 242: else
  1451                           ;LC-meter.c: 243: measure_inductance();
  1452  0120' EC00' F000'        	call	_measure_inductance	;wreg free
  1453  0124'                    l124:
  1454  0124' FFFF               	dw	65535	; assembler added errata NOP
  1455                           
  1456                           ;LC-meter.c: 245: print_indicator(1);
  1457  0126' 0E01               	movlw	1
  1458  0128' EC00' F000'        	call	_print_indicator
  1459                           
  1460                           ;LC-meter.c: 246: delay10ms(30);
  1461  012C' 0E1E               	movlw	30
  1462  012E' EC00' F000'        	call	_delay10ms
  1463                           
  1464                           ;LC-meter.c: 248: print_indicator(0);
  1465  0132' 0E00               	movlw	0
  1466  0134' EC00' F000'        	call	_print_indicator
  1467                           
  1468                           ;LC-meter.c: 249: delay10ms(20);
  1469  0138' 0E14               	movlw	20
  1470  013A' EC00' F000'        	call	_delay10ms
  1471                           
  1472                           ;LC-meter.c: 250: }
  1473  013E' D7CD               	goto	l4276
  1474  0140'                    __end_of_main:
  1475                           	opt stack 0
  1476                           tblptru	equ	0xFF8
  1477                           tblptrh	equ	0xFF7
  1478                           tblptrl	equ	0xFF6
  1479                           tablat	equ	0xFF5
  1480                           intcon	equ	0xFF2
  1481                           intcon2	equ	0xFF1
  1482                           postinc0	equ	0xFEE
  1483                           wreg	equ	0xFE8
  1484                           postdec1	equ	0xFE5
  1485                           fsr1l	equ	0xFE1
  1486                           status	equ	0xFD8
  1487                           
  1488 ;; *************** function _timer2_init *****************
  1489 ;; Defined at:
  1490 ;;		line 143 in file "lib/timer.c"
  1491 ;; Parameters:    Size  Location     Type
  1492 ;;  ps_mode         1    wreg     unsigned char 
  1493 ;; Auto vars:     Size  Location     Type
  1494 ;;  ps_mode         1   16[COMRAM] unsigned char 
  1495 ;;  postscaler      1    0        unsigned char 
  1496 ;;  ps              1   14[COMRAM] unsigned char 
  1497 ;; Return value:  Size  Location     Type
  1498 ;;		None               void
  1499 ;; Registers used:
  1500 ;;		wreg, status,2, status,0
  1501 ;; Tracked objects:
  1502 ;;		On entry : 0/0
  1503 ;;		On exit  : 0/0
  1504 ;;		Unchanged: 0/0
  1505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1506 ;;      Params:         0       0       0       0       0       0       0
  1507 ;;      Locals:         3       0       0       0       0       0       0
  1508 ;;      Temps:          1       0       0       0       0       0       0
  1509 ;;      Totals:         4       0       0       0       0       0       0
  1510 ;;Total ram usage:        4 bytes
  1511 ;; Hardware stack levels used:    1
  1512 ;; Hardware stack levels required when called:    2
  1513 ;; This function calls:
  1514 ;;		Nothing
  1515 ;; This function is called by:
  1516 ;;		_main
  1517 ;; This function uses a non-reentrant model
  1518 ;;
  1519                           
  1520                           	psect	text1
  1521  0000'                    __ptext1:
  1522                           	opt stack 0
  1523  0000'                    _timer2_init:
  1524                           	opt stack 28
  1525                           
  1526                           ;incstack = 0
  1527  0000' FFFF               	dw	65535
  1528                           
  1529                           ;timer2_init@ps_mode stored from wreg
  1530  0002' 6E10'              	movwf	timer2_init@ps_mode,c
  1531                           
  1532                           ;timer.c: 144: uint8_t ps = ps_mode & 0b1111;
  1533  0004' 5010'              	movf	timer2_init@ps_mode,w,c
  1534  0006' 0B0F               	andlw	15
  1535  0008' 6E0E'              	movwf	timer2_init@ps,c
  1536                           
  1537                           ;timer.c: 148: T2CON &= ~0b01111111;
  1538  000A' 0E80               	movlw	128
  1539  000C' 16CA               	andwf	4042,f,c	;volatile
  1540                           
  1541                           ;timer.c: 150: T2CON |= (postscaler & 0b1111) << 3;
  1542  000E' 50CA               	movf	4042,w,c	;volatile
  1543                           
  1544                           ;timer.c: 151: T2CON |= (ps & 0b11);
  1545  0010' 500E'              	movf	timer2_init@ps,w,c
  1546  0012' 0B03               	andlw	3
  1547  0014' 12CA               	iorwf	4042,f,c	;volatile
  1548                           
  1549                           ;timer.c: 153: TMR2 = 0;
  1550  0016' 6ACC               	clrf	4044,c	;volatile
  1551                           
  1552                           ;timer.c: 155: T2CON |= 0b100;
  1553  0018' 84CA               	bsf	4042,2,c	;volatile
  1554                           
  1555                           ;timer.c: 158: PIR1 &= ~0b10;
  1556  001A' 929E               	bcf	3998,1,c	;volatile
  1557                           
  1558                           ;timer.c: 159: PIE1 = (!!(ps_mode & 0x80)) << 1;
  1559  001C' AE10'              	btfss	timer2_init@ps_mode,7,c
  1560  001E' D003               	goto	u2590
  1561  0020' 6A00'              	clrf	??_timer2_init& (0+255),c
  1562  0022' 2A00'              	incf	??_timer2_init& (0+255),f,c
  1563  0024' D002               	goto	u2608
  1564  0026'                    u2590:
  1565  0026' FFFF               	dw	65535	; assembler added errata NOP
  1566  0028' 6A00'              	clrf	??_timer2_init& (0+255),c
  1567  002A'                    u2608:
  1568  002A' FFFF               	dw	65535	; assembler added errata NOP
  1569  002C' 90D8               	bcf	status,0,c
  1570  002E' 340D'              	rlcf	??_timer2_init,w,c
  1571  0030' 6E9D               	movwf	3997,c	;volatile
  1572  0032' 0012               	return		;funcret
  1573  0034' FFFF               	dw	65535	; errata NOP
  1574  0036'                    __end_of_timer2_init:
  1575                           	opt stack 0
  1576                           tblptru	equ	0xFF8
  1577                           tblptrh	equ	0xFF7
  1578                           tblptrl	equ	0xFF6
  1579                           tablat	equ	0xFF5
  1580                           intcon	equ	0xFF2
  1581                           intcon2	equ	0xFF1
  1582                           postinc0	equ	0xFEE
  1583                           wreg	equ	0xFE8
  1584                           postdec1	equ	0xFE5
  1585                           fsr1l	equ	0xFE1
  1586                           status	equ	0xFD8
  1587                           
  1588 ;; *************** function _timer0_init *****************
  1589 ;; Defined at:
  1590 ;;		line 28 in file "lib/timer.c"
  1591 ;; Parameters:    Size  Location     Type
  1592 ;;  ps_mode         1    wreg     unsigned char 
  1593 ;; Auto vars:     Size  Location     Type
  1594 ;;  ps_mode         1   23[COMRAM] unsigned char 
  1595 ;;  prescaler       1   22[COMRAM] unsigned char 
  1596 ;; Return value:  Size  Location     Type
  1597 ;;		None               void
  1598 ;; Registers used:
  1599 ;;		wreg, status,2, status,0
  1600 ;; Tracked objects:
  1601 ;;		On entry : F/0
  1602 ;;		On exit  : 0/0
  1603 ;;		Unchanged: 0/0
  1604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1605 ;;      Params:         0       0       0       0       0       0       0
  1606 ;;      Locals:        10       0       0       0       0       0       0
  1607 ;;      Temps:          1       0       0       0       0       0       0
  1608 ;;      Totals:        11       0       0       0       0       0       0
  1609 ;;Total ram usage:       11 bytes
  1610 ;; Hardware stack levels used:    1
  1611 ;; Hardware stack levels required when called:    2
  1612 ;; This function calls:
  1613 ;;		Nothing
  1614 ;; This function is called by:
  1615 ;;		_main
  1616 ;; This function uses a non-reentrant model
  1617 ;;
  1618                           
  1619                           	psect	text2
  1620  0000'                    __ptext2:
  1621                           	opt stack 0
  1622  0000'                    _timer0_init:
  1623                           	opt stack 28
  1624                           
  1625                           ;incstack = 0
  1626  0000' FFFF               	dw	65535
  1627                           
  1628                           ;timer0_init@ps_mode stored from wreg
  1629  0002' 6E17'              	movwf	timer0_init@ps_mode,c
  1630                           
  1631                           ; BSR set to: 0
  1632                           ;timer.c: 29: uint8_t prescaler = ps_mode & 0b1111;
  1633  0004' 5017'              	movf	timer0_init@ps_mode,w,c
  1634  0006' 0B0F               	andlw	15
  1635  0008' 6E16'              	movwf	timer0_init@prescaler,c
  1636                           
  1637                           ; BSR set to: 0
  1638                           ;timer.c: 31: TMR0 = 0;
  1639  000A' 6AD6               	clrf	4054,c	;volatile
  1640  000C' 6AD7               	clrf	4055,c	;volatile
  1641                           
  1642                           ; BSR set to: 0
  1643                           ;timer.c: 34: T0CON |= (!!(ps_mode & 0x40)) ? 0x40 : 0x00;
  1644  000E' BC17'              	btfsc	timer0_init@ps_mode,6,c
  1645  0010' D003               	goto	l2968
  1646                           
  1647                           ; BSR set to: 0
  1648  0012' 6A0E'              	clrf	_timer0_init$655,c
  1649  0014' 6A0F'              	clrf	_timer0_init$655+1,c
  1650  0016' D004               	goto	l2970
  1651  0018'                    l2968:
  1652  0018' FFFF               	dw	65535	; assembler added errata NOP
  1653                           
  1654                           ; BSR set to: 0
  1655  001A' 6A0F'              	clrf	_timer0_init$655+1,c
  1656  001C' 0E40               	movlw	64
  1657  001E' 6E0E'              	movwf	_timer0_init$655,c
  1658  0020'                    l2970:
  1659  0020' FFFF               	dw	65535	; assembler added errata NOP
  1660                           
  1661                           ; BSR set to: 0
  1662  0022' 500E'              	movf	_timer0_init$655,w,c
  1663  0024' 12D5               	iorwf	4053,f,c	;volatile
  1664                           
  1665                           ; BSR set to: 0
  1666                           ;timer.c: 50: T0CON |= (!!(ps_mode & 0x20)) ? 0x20 : 0x00;
  1667  0026' BA17'              	btfsc	timer0_init@ps_mode,5,c
  1668  0028' D003               	goto	l2976
  1669                           
  1670                           ; BSR set to: 0
  1671  002A' 6A10'              	clrf	_timer0_init$656,c
  1672  002C' 6A11'              	clrf	_timer0_init$656+1,c
  1673  002E' D004               	goto	l2978
  1674  0030'                    l2976:
  1675  0030' FFFF               	dw	65535	; assembler added errata NOP
  1676                           
  1677                           ; BSR set to: 0
  1678  0032' 6A11'              	clrf	_timer0_init$656+1,c
  1679  0034' 0E20               	movlw	32
  1680  0036' 6E10'              	movwf	_timer0_init$656,c
  1681  0038'                    l2978:
  1682  0038' FFFF               	dw	65535	; assembler added errata NOP
  1683                           
  1684                           ; BSR set to: 0
  1685  003A' 5010'              	movf	_timer0_init$656,w,c
  1686  003C' 12D5               	iorwf	4053,f,c	;volatile
  1687                           
  1688                           ; BSR set to: 0
  1689                           ;timer.c: 53: T0CON |= (!!(ps_mode & 0x10)) ? 0x10 : 0x00;
  1690  003E' B817'              	btfsc	timer0_init@ps_mode,4,c
  1691  0040' D003               	goto	l2984
  1692                           
  1693                           ; BSR set to: 0
  1694  0042' 6A12'              	clrf	_timer0_init$657,c
  1695  0044' 6A13'              	clrf	_timer0_init$657+1,c
  1696  0046' D004               	goto	l2986
  1697  0048'                    l2984:
  1698  0048' FFFF               	dw	65535	; assembler added errata NOP
  1699                           
  1700                           ; BSR set to: 0
  1701  004A' 6A13'              	clrf	_timer0_init$657+1,c
  1702  004C' 0E10               	movlw	16
  1703  004E' 6E12'              	movwf	_timer0_init$657,c
  1704  0050'                    l2986:
  1705  0050' FFFF               	dw	65535	; assembler added errata NOP
  1706                           
  1707                           ; BSR set to: 0
  1708  0052' 5012'              	movf	_timer0_init$657,w,c
  1709  0054' 12D5               	iorwf	4053,f,c	;volatile
  1710                           
  1711                           ; BSR set to: 0
  1712                           ;timer.c: 56: T0CON &= (!!prescaler) ? ~0x08 : ~0x00;
  1713  0056' 5016'              	movf	timer0_init@prescaler,w,c
  1714  0058' E103               	bnz	l2992
  1715                           
  1716                           ; BSR set to: 0
  1717  005A' 6814'              	setf	_timer0_init$658,c
  1718  005C' 6815'              	setf	_timer0_init$658+1,c
  1719  005E' D003               	goto	l2994
  1720  0060'                    l2992:
  1721                           
  1722                           ; BSR set to: 0
  1723  0060' 6815'              	setf	_timer0_init$658+1,c
  1724  0062' 0EF7               	movlw	247
  1725  0064' 6E14'              	movwf	_timer0_init$658,c
  1726  0066'                    l2994:
  1727  0066' FFFF               	dw	65535	; assembler added errata NOP
  1728                           
  1729                           ; BSR set to: 0
  1730  0068' 5014'              	movf	_timer0_init$658,w,c
  1731  006A' 16D5               	andwf	4053,f,c	;volatile
  1732                           
  1733                           ; BSR set to: 0
  1734                           ;timer.c: 58: T0CON &= ~0b111;
  1735  006C' 0EF8               	movlw	248
  1736  006E' 16D5               	andwf	4053,f,c	;volatile
  1737                           
  1738                           ;timer.c: 60: if(prescaler > 0) {
  1739  0070' 5016'              	movf	timer0_init@prescaler,w,c
  1740  0072' E003               	bz	l3000
  1741                           
  1742                           ; BSR set to: 0
  1743                           ;timer.c: 61: T0CON |= (prescaler - 1) & 0b111;
  1744  0074' 0416'              	decf	timer0_init@prescaler,w,c
  1745  0076' 0B07               	andlw	7
  1746  0078' 12D5               	iorwf	4053,f,c	;volatile
  1747  007A'                    l3000:
  1748                           
  1749                           ; BSR set to: 0
  1750                           ;timer.c: 67: }
  1751                           ;timer.c: 72: INTCONbits.TMR0IF = 0;
  1752  007A' 94F2               	bcf	intcon,2,c	;volatile
  1753                           
  1754                           ;timer.c: 73: INTCONbits.T0IE = (ps_mode & 0x80) ? 1 : 0;
  1755  007C' AE17'              	btfss	timer0_init@ps_mode,7,c
  1756  007E' D003               	goto	u2570
  1757  0080' 6A00'              	clrf	??_timer0_init& (0+255),c
  1758  0082' 2A00'              	incf	??_timer0_init& (0+255),f,c
  1759  0084' D002               	goto	u2588
  1760  0086'                    u2570:
  1761  0086' FFFF               	dw	65535	; assembler added errata NOP
  1762  0088' 6A00'              	clrf	??_timer0_init& (0+255),c
  1763  008A'                    u2588:
  1764  008A' FFFF               	dw	65535	; assembler added errata NOP
  1765  008C' 3A0D'              	swapf	??_timer0_init,f,c
  1766  008E' 460D'              	rlncf	??_timer0_init,f,c
  1767  0090' 50F2               	movf	intcon,w,c	;volatile
  1768  0092' 180D'              	xorwf	??_timer0_init,w,c
  1769  0094' 0BDF               	andlw	-33
  1770  0096' 180D'              	xorwf	??_timer0_init,w,c
  1771  0098' 6EF2               	movwf	intcon,c	;volatile
  1772  009A' 0012               	return		;funcret
  1773  009C' FFFF               	dw	65535	; errata NOP
  1774  009E'                    __end_of_timer0_init:
  1775                           	opt stack 0
  1776                           tblptru	equ	0xFF8
  1777                           tblptrh	equ	0xFF7
  1778                           tblptrl	equ	0xFF6
  1779                           tablat	equ	0xFF5
  1780                           intcon	equ	0xFF2
  1781                           intcon2	equ	0xFF1
  1782                           postinc0	equ	0xFEE
  1783                           wreg	equ	0xFE8
  1784                           postdec1	equ	0xFE5
  1785                           fsr1l	equ	0xFE1
  1786                           status	equ	0xFD8
  1787                           
  1788 ;; *************** function _print_indicator *****************
  1789 ;; Defined at:
  1790 ;;		line 464 in file "src/print.c"
  1791 ;; Parameters:    Size  Location     Type
  1792 ;;  indicate        1    wreg     unsigned char 
  1793 ;; Auto vars:     Size  Location     Type
  1794 ;;  indicate        1   23[COMRAM] unsigned char 
  1795 ;; Return value:  Size  Location     Type
  1796 ;;		None               void
  1797 ;; Registers used:
  1798 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1799 ;; Tracked objects:
  1800 ;;		On entry : 0/0
  1801 ;;		On exit  : 0/0
  1802 ;;		Unchanged: 0/0
  1803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1804 ;;      Params:         0       0       0       0       0       0       0
  1805 ;;      Locals:         1       0       0       0       0       0       0
  1806 ;;      Temps:          0       0       0       0       0       0       0
  1807 ;;      Totals:         1       0       0       0       0       0       0
  1808 ;;Total ram usage:        1 bytes
  1809 ;; Hardware stack levels used:    1
  1810 ;; Hardware stack levels required when called:    6
  1811 ;; This function calls:
  1812 ;;		_lcd_gotoxy
  1813 ;;		_lcd_puts
  1814 ;; This function is called by:
  1815 ;;		_main
  1816 ;; This function uses a non-reentrant model
  1817 ;;
  1818                           
  1819                           	psect	text3
  1820  0000'                    __ptext3:
  1821                           	opt stack 0
  1822  0000'                    _print_indicator:
  1823                           	opt stack 24
  1824                           
  1825                           ;incstack = 0
  1826  0000' FFFF               	dw	65535
  1827                           
  1828                           ;print_indicator@indicate stored from wreg
  1829  0002' 6E17'              	movwf	print_indicator@indicate,c
  1830                           
  1831                           ;print.c: 478: lcd_gotoxy(0, 1);
  1832  0004' 0E01               	movlw	1
  1833  0006' 6E11'              	movwf	lcd_gotoxy@row,c
  1834  0008' 0E00               	movlw	0
  1835  000A' EC00' F000'        	call	_lcd_gotoxy
  1836                           
  1837                           ;print.c: 479: if(indicate) {
  1838  000E' 5017'              	movf	print_indicator@indicate,w,c
  1839  0010' E004               	bz	l4206
  1840                           
  1841                           ;print.c: 480: lcd_puts("-*-");
  1842  0012' 0E00'              	movlw	STR_24& (0+255)
  1843  0014' EC00' F000'        	call	_lcd_puts
  1844                           
  1845                           ;print.c: 481: } else {
  1846  0018' D003               	goto	l337
  1847  001A'                    l4206:
  1848                           
  1849                           ;print.c: 482: lcd_puts("   ");
  1850  001A' 0E00'              	movlw	(STR_5+3)& (0+255)
  1851  001C' EC00' F000'        	call	_lcd_puts
  1852  0020'                    l337:
  1853  0020' FFFF               	dw	65535	; assembler added errata NOP
  1854  0022' 0012               	return		;funcret
  1855  0024' FFFF               	dw	65535	; errata NOP
  1856  0026'                    __end_of_print_indicator:
  1857                           	opt stack 0
  1858                           tblptru	equ	0xFF8
  1859                           tblptrh	equ	0xFF7
  1860                           tblptrl	equ	0xFF6
  1861                           tablat	equ	0xFF5
  1862                           intcon	equ	0xFF2
  1863                           intcon2	equ	0xFF1
  1864                           postinc0	equ	0xFEE
  1865                           wreg	equ	0xFE8
  1866                           postdec1	equ	0xFE5
  1867                           fsr1l	equ	0xFE1
  1868                           status	equ	0xFD8
  1869                           
  1870 ;; *************** function _measure_inductance *****************
  1871 ;; Defined at:
  1872 ;;		line 218 in file "src/measure.c"
  1873 ;; Parameters:    Size  Location     Type
  1874 ;;		None
  1875 ;; Auto vars:     Size  Location     Type
  1876 ;;  Lin             3   30[BANK0 ] unsigned char 
  1877 ;;  denominator     3    3[BANK0 ] unsigned char 
  1878 ;;  numerator       3    0[BANK0 ] unsigned char 
  1879 ;;  var             2   28[BANK0 ] unsigned int 
  1880 ;;  unit            1   18[BANK0 ] unsigned char 
  1881 ;; Return value:  Size  Location     Type
  1882 ;;		None               void
  1883 ;; Registers used:
  1884 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1885 ;; Tracked objects:
  1886 ;;		On entry : F/0
  1887 ;;		On exit  : 0/0
  1888 ;;		Unchanged: 0/0
  1889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1890 ;;      Params:         0       0       0       0       0       0       0
  1891 ;;      Locals:         0      33       0       0       0       0       0
  1892 ;;      Temps:          0       0       0       0       0       0       0
  1893 ;;      Totals:         0      33       0       0       0       0       0
  1894 ;;Total ram usage:       33 bytes
  1895 ;; Hardware stack levels used:    1
  1896 ;; Hardware stack levels required when called:    7
  1897 ;; This function calls:
  1898 ;;		___ftdiv
  1899 ;;		___ftge
  1900 ;;		___ftmul
  1901 ;;		___ftsub
  1902 ;;		___fttol
  1903 ;;		___lwtoft
  1904 ;;		_lcd_gotoxy
  1905 ;;		_measure_freq
  1906 ;;		_print_reading
  1907 ;;		_print_unit
  1908 ;;		_put_str
  1909 ;; This function is called by:
  1910 ;;		_main
  1911 ;; This function uses a non-reentrant model
  1912 ;;
  1913                           
  1914                           	psect	text4
  1915  0000'                    __ptext4:
  1916                           	opt stack 0
  1917  0000'                    _measure_inductance:
  1918                           	opt stack 23
  1919                           
  1920                           ;incstack = 0
  1921  0000' FFFF               	dw	65535
  1922                           
  1923                           ; BSR set to: 0
  1924                           ;measure.c: 219: uint8_t unit;
  1925                           ;measure.c: 220: uint16_t var;
  1926                           ;measure.c: 222: double Lin, numerator, denominator;
  1927                           ;measure.c: 225: lcd_gotoxy(0, 0);
  1928  0002' 0E00               	movlw	0
  1929  0004' 6A11'              	clrf	lcd_gotoxy@row,c
  1930  0006' EC00' F000'        	call	_lcd_gotoxy
  1931                           
  1932                           ;measure.c: 226: put_str("Inductivity ");
  1933  000A' 0E00'              	movlw	STR_14& (0+255)
  1934  000C' EC00' F000'        	call	_put_str
  1935                           
  1936                           ;measure.c: 228: var = measure_freq();
  1937  0010' EC00' F000'        	call	_measure_freq	;wreg free
  1938  0014' C03F' F01C'        	movff	?_measure_freq,measure_inductance@var
  1939  0018' C040' F01D'        	movff	?_measure_freq+1,measure_inductance@var+1
  1940                           
  1941                           ;measure.c: 230: F3 = (double)var;
  1942  001C' C01C' F044'        	movff	measure_inductance@var,___lwtoft@c
  1943  0020' C01D' F045'        	movff	measure_inductance@var+1,___lwtoft@c+1
  1944  0024' EC00' F000'        	call	___lwtoft	;wreg free
  1945  0028' C044' F003'        	movff	?___lwtoft,_F3
  1946  002C' C045' F004'        	movff	?___lwtoft+1,_F3+1
  1947  0030' C046' F005'        	movff	?___lwtoft+2,_F3+2
  1948                           
  1949                           ;measure.c: 231: if(F3 > F1)
  1950  0034' C00A' F00D'        	movff	_F1,___ftge@ff1
  1951  0038' C00B' F00E'        	movff	_F1+1,___ftge@ff1+1
  1952  003C' C00C' F00F'        	movff	_F1+2,___ftge@ff1+2
  1953  0040' C003' F010'        	movff	_F3,___ftge@ff2
  1954  0044' C004' F011'        	movff	_F3+1,___ftge@ff2+1
  1955  0048' C005' F012'        	movff	_F3+2,___ftge@ff2+2
  1956  004C' EC00' F000'        	call	___ftge	;wreg free
  1957  0050' E206               	bc	l4172
  1958                           
  1959                           ;measure.c: 232: F3 = F1;
  1960  0052' C00A' F003'        	movff	_F1,_F3
  1961  0056' C00B' F004'        	movff	_F1+1,_F3+1
  1962  005A' C00C' F005'        	movff	_F1+2,_F3+2
  1963  005E'                    l4172:
  1964                           
  1965                           ;measure.c: 233: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1966  005E' C000' F042'        	movff	_F2,___ftsub@f2
  1967  0062' C001' F043'        	movff	_F2+1,___ftsub@f2+1
  1968  0066' C002' F044'        	movff	_F2+2,___ftsub@f2+2
  1969  006A' C000' F03F'        	movff	_F2,___ftsub@f1
  1970  006E' C001' F040'        	movff	_F2+1,___ftsub@f1+1
  1971  0072' C002' F041'        	movff	_F2+2,___ftsub@f1+2
  1972  0076' EC00' F000'        	call	___ftsub	;wreg free
  1973  007A' C03F' F006'        	movff	?___ftsub,_measure_inductance$1313
  1974  007E' C040' F007'        	movff	?___ftsub+1,_measure_inductance$1313+1
  1975  0082' C041' F008'        	movff	?___ftsub+2,_measure_inductance$1313+2
  1976                           
  1977                           ;measure.c: 233: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1978  0086' C006' F042'        	movff	_measure_inductance$1313,___ftsub@f2
  1979  008A' C007' F043'        	movff	_measure_inductance$1313+1,___ftsub@f2+1
  1980  008E' C008' F044'        	movff	_measure_inductance$1313+2,___ftsub@f2+2
  1981  0092' C00A' F027'        	movff	_F1,___ftmul@f2
  1982  0096' C00B' F028'        	movff	_F1+1,___ftmul@f2+1
  1983  009A' C00C' F029'        	movff	_F1+2,___ftmul@f2+2
  1984  009E' C00A' F024'        	movff	_F1,___ftmul@f1
  1985  00A2' C00B' F025'        	movff	_F1+1,___ftmul@f1+1
  1986  00A6' C00C' F026'        	movff	_F1+2,___ftmul@f1+2
  1987  00AA' EC00' F000'        	call	___ftmul	;wreg free
  1988  00AE' C024' F03F'        	movff	?___ftmul,___ftsub@f1
  1989  00B2' C025' F040'        	movff	?___ftmul+1,___ftsub@f1+1
  1990  00B6' C026' F041'        	movff	?___ftmul+2,___ftsub@f1+2
  1991  00BA' EC00' F000'        	call	___ftsub	;wreg free
  1992  00BE' C03F' F013'        	movff	?___ftsub,_measure_inductance$1314
  1993  00C2' C040' F014'        	movff	?___ftsub+1,_measure_inductance$1314+1
  1994  00C6' C041' F015'        	movff	?___ftsub+2,_measure_inductance$1314+2
  1995                           
  1996                           ;measure.c: 233: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1997  00CA' C003' F027'        	movff	_F3,___ftmul@f2
  1998  00CE' C004' F028'        	movff	_F3+1,___ftmul@f2+1
  1999  00D2' C005' F029'        	movff	_F3+2,___ftmul@f2+2
  2000  00D6' C003' F024'        	movff	_F3,___ftmul@f1
  2001  00DA' C004' F025'        	movff	_F3+1,___ftmul@f1+1
  2002  00DE' C005' F026'        	movff	_F3+2,___ftmul@f1+2
  2003  00E2' EC00' F000'        	call	___ftmul	;wreg free
  2004  00E6' C024' F042'        	movff	?___ftmul,___ftsub@f2
  2005  00EA' C025' F043'        	movff	?___ftmul+1,___ftsub@f2+1
  2006  00EE' C026' F044'        	movff	?___ftmul+2,___ftsub@f2+2
  2007  00F2' C00A' F027'        	movff	_F1,___ftmul@f2
  2008  00F6' C00B' F028'        	movff	_F1+1,___ftmul@f2+1
  2009  00FA' C00C' F029'        	movff	_F1+2,___ftmul@f2+2
  2010  00FE' C00A' F024'        	movff	_F1,___ftmul@f1
  2011  0102' C00B' F025'        	movff	_F1+1,___ftmul@f1+1
  2012  0106' C00C' F026'        	movff	_F1+2,___ftmul@f1+2
  2013  010A' EC00' F000'        	call	___ftmul	;wreg free
  2014  010E' C024' F03F'        	movff	?___ftmul,___ftsub@f1
  2015  0112' C025' F040'        	movff	?___ftmul+1,___ftsub@f1+1
  2016  0116' C026' F041'        	movff	?___ftmul+2,___ftsub@f1+2
  2017  011A' EC00' F000'        	call	___ftsub	;wreg free
  2018  011E' C03F' F016'        	movff	?___ftsub,_measure_inductance$1315
  2019  0122' C040' F017'        	movff	?___ftsub+1,_measure_inductance$1315+1
  2020  0126' C041' F018'        	movff	?___ftsub+2,_measure_inductance$1315+2
  2021                           
  2022                           ;measure.c: 233: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  2023  012A' C013' F027'        	movff	_measure_inductance$1314,___ftmul@f2
  2024  012E' C014' F028'        	movff	_measure_inductance$1314+1,___ftmul@f2+1
  2025  0132' C015' F029'        	movff	_measure_inductance$1314+2,___ftmul@f2+2
  2026  0136' C016' F024'        	movff	_measure_inductance$1315,___ftmul@f1
  2027  013A' C017' F025'        	movff	_measure_inductance$1315+1,___ftmul@f1+1
  2028  013E' C018' F026'        	movff	_measure_inductance$1315+2,___ftmul@f1+2
  2029  0142' EC00' F000'        	call	___ftmul	;wreg free
  2030  0146' C024' F019'        	movff	?___ftmul,_measure_inductance$1316
  2031  014A' C025' F01A'        	movff	?___ftmul+1,_measure_inductance$1316+1
  2032  014E' C026' F01B'        	movff	?___ftmul+2,_measure_inductance$1316+2
  2033                           
  2034                           ;measure.c: 233: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  2035  0152' C019' F024'        	movff	_measure_inductance$1316,___ftmul@f1
  2036  0156' C01A' F025'        	movff	_measure_inductance$1316+1,___ftmul@f1+1
  2037  015A' C01B' F026'        	movff	_measure_inductance$1316+2,___ftmul@f1+2
  2038  015E' 0E40               	movlw	64
  2039  0160' 6E27'              	movwf	___ftmul@f2,c
  2040  0162' 0E1C               	movlw	28
  2041  0164' 6E28'              	movwf	___ftmul@f2+1,c
  2042  0166' 0E46               	movlw	70
  2043  0168' 6E29'              	movwf	___ftmul@f2+2,c
  2044  016A' EC00' F000'        	call	___ftmul	;wreg free
  2045  016E' C024' F000'        	movff	?___ftmul,measure_inductance@numerator
  2046  0172' C025' F001'        	movff	?___ftmul+1,measure_inductance@numerator+1
  2047  0176' C026' F002'        	movff	?___ftmul+2,measure_inductance@numerator+2
  2048                           
  2049                           ;measure.c: 234: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2050  017A' C00A' F027'        	movff	_F1,___ftmul@f2
  2051  017E' C00B' F028'        	movff	_F1+1,___ftmul@f2+1
  2052  0182' C00C' F029'        	movff	_F1+2,___ftmul@f2+2
  2053  0186' C00A' F024'        	movff	_F1,___ftmul@f1
  2054  018A' C00B' F025'        	movff	_F1+1,___ftmul@f1+1
  2055  018E' C00C' F026'        	movff	_F1+2,___ftmul@f1+2
  2056  0192' EC00' F000'        	call	___ftmul	;wreg free
  2057  0196' C024' F009'        	movff	?___ftmul,_measure_inductance$1317
  2058  019A' C025' F00A'        	movff	?___ftmul+1,_measure_inductance$1317+1
  2059  019E' C026' F00B'        	movff	?___ftmul+2,_measure_inductance$1317+2
  2060                           
  2061                           ;measure.c: 234: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2062  01A2' C000' F027'        	movff	_F2,___ftmul@f2
  2063  01A6' C001' F028'        	movff	_F2+1,___ftmul@f2+1
  2064  01AA' C002' F029'        	movff	_F2+2,___ftmul@f2+2
  2065  01AE' C009' F024'        	movff	_measure_inductance$1317,___ftmul@f1
  2066  01B2' C00A' F025'        	movff	_measure_inductance$1317+1,___ftmul@f1+1
  2067  01B6' C00B' F026'        	movff	_measure_inductance$1317+2,___ftmul@f1+2
  2068  01BA' EC00' F000'        	call	___ftmul	;wreg free
  2069  01BE' C024' F013'        	movff	?___ftmul,_measure_inductance$1314
  2070  01C2' C025' F014'        	movff	?___ftmul+1,_measure_inductance$1314+1
  2071  01C6' C026' F015'        	movff	?___ftmul+2,_measure_inductance$1314+2
  2072                           
  2073                           ;measure.c: 234: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2074  01CA' C000' F027'        	movff	_F2,___ftmul@f2
  2075  01CE' C001' F028'        	movff	_F2+1,___ftmul@f2+1
  2076  01D2' C002' F029'        	movff	_F2+2,___ftmul@f2+2
  2077  01D6' C013' F024'        	movff	_measure_inductance$1314,___ftmul@f1
  2078  01DA' C014' F025'        	movff	_measure_inductance$1314+1,___ftmul@f1+1
  2079  01DE' C015' F026'        	movff	_measure_inductance$1314+2,___ftmul@f1+2
  2080  01E2' EC00' F000'        	call	___ftmul	;wreg free
  2081  01E6' C024' F016'        	movff	?___ftmul,_measure_inductance$1315
  2082  01EA' C025' F017'        	movff	?___ftmul+1,_measure_inductance$1315+1
  2083  01EE' C026' F018'        	movff	?___ftmul+2,_measure_inductance$1315+2
  2084                           
  2085                           ;measure.c: 234: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2086  01F2' C003' F027'        	movff	_F3,___ftmul@f2
  2087  01F6' C004' F028'        	movff	_F3+1,___ftmul@f2+1
  2088  01FA' C005' F029'        	movff	_F3+2,___ftmul@f2+2
  2089  01FE' C016' F024'        	movff	_measure_inductance$1315,___ftmul@f1
  2090  0202' C017' F025'        	movff	_measure_inductance$1315+1,___ftmul@f1+1
  2091  0206' C018' F026'        	movff	_measure_inductance$1315+2,___ftmul@f1+2
  2092  020A' EC00' F000'        	call	___ftmul	;wreg free
  2093  020E' C024' F019'        	movff	?___ftmul,_measure_inductance$1316
  2094  0212' C025' F01A'        	movff	?___ftmul+1,_measure_inductance$1316+1
  2095  0216' C026' F01B'        	movff	?___ftmul+2,_measure_inductance$1316+2
  2096                           
  2097                           ;measure.c: 234: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2098  021A' C003' F027'        	movff	_F3,___ftmul@f2
  2099  021E' C004' F028'        	movff	_F3+1,___ftmul@f2+1
  2100  0222' C005' F029'        	movff	_F3+2,___ftmul@f2+2
  2101  0226' C019' F024'        	movff	_measure_inductance$1316,___ftmul@f1
  2102  022A' C01A' F025'        	movff	_measure_inductance$1316+1,___ftmul@f1+1
  2103  022E' C01B' F026'        	movff	_measure_inductance$1316+2,___ftmul@f1+2
  2104  0232' EC00' F000'        	call	___ftmul	;wreg free
  2105  0236' C024' F00C'        	movff	?___ftmul,_measure_inductance$1318
  2106  023A' C025' F00D'        	movff	?___ftmul+1,_measure_inductance$1318+1
  2107  023E' C026' F00E'        	movff	?___ftmul+2,_measure_inductance$1318+2
  2108                           
  2109                           ;measure.c: 234: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2110  0242' C004' F027'        	movff	_CCal,___ftmul@f2
  2111  0246' C005' F028'        	movff	_CCal+1,___ftmul@f2+1
  2112  024A' C006' F029'        	movff	_CCal+2,___ftmul@f2+2
  2113  024E' C00C' F024'        	movff	_measure_inductance$1318,___ftmul@f1
  2114  0252' C00D' F025'        	movff	_measure_inductance$1318+1,___ftmul@f1+1
  2115  0256' C00E' F026'        	movff	_measure_inductance$1318+2,___ftmul@f1+2
  2116  025A' EC00' F000'        	call	___ftmul	;wreg free
  2117  025E' C024' F00F'        	movff	?___ftmul,_measure_inductance$1319
  2118  0262' C025' F010'        	movff	?___ftmul+1,_measure_inductance$1319+1
  2119  0266' C026' F011'        	movff	?___ftmul+2,_measure_inductance$1319+2
  2120                           
  2121                           ;measure.c: 234: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2122  026A' C00F' F024'        	movff	_measure_inductance$1319,___ftmul@f1
  2123  026E' C010' F025'        	movff	_measure_inductance$1319+1,___ftmul@f1+1
  2124  0272' C011' F026'        	movff	_measure_inductance$1319+2,___ftmul@f1+2
  2125  0276' 0EEA               	movlw	234
  2126  0278' 6E27'              	movwf	___ftmul@f2,c
  2127  027A' 0E1D               	movlw	29
  2128  027C' 6E28'              	movwf	___ftmul@f2+1,c
  2129  027E' 0E42               	movlw	66
  2130  0280' 6E29'              	movwf	___ftmul@f2+2,c
  2131  0282' EC00' F000'        	call	___ftmul	;wreg free
  2132  0286' C024' F003'        	movff	?___ftmul,measure_inductance@denominator
  2133  028A' C025' F004'        	movff	?___ftmul+1,measure_inductance@denominator+1
  2134  028E' C026' F005'        	movff	?___ftmul+2,measure_inductance@denominator+2
  2135                           
  2136                           ;measure.c: 235: Lin = (numerator / denominator) * 1e+15l;
  2137  0292' C003' F018'        	movff	measure_inductance@denominator,___ftdiv@f2
  2138  0296' C004' F019'        	movff	measure_inductance@denominator+1,___ftdiv@f2+1
  2139  029A' C005' F01A'        	movff	measure_inductance@denominator+2,___ftdiv@f2+2
  2140  029E' C000' F015'        	movff	measure_inductance@numerator,___ftdiv@f1
  2141  02A2' C001' F016'        	movff	measure_inductance@numerator+1,___ftdiv@f1+1
  2142  02A6' C002' F017'        	movff	measure_inductance@numerator+2,___ftdiv@f1+2
  2143  02AA' EC00' F000'        	call	___ftdiv	;wreg free
  2144  02AE' C015' F024'        	movff	?___ftdiv,___ftmul@f1
  2145  02B2' C016' F025'        	movff	?___ftdiv+1,___ftmul@f1+1
  2146  02B6' C017' F026'        	movff	?___ftdiv+2,___ftmul@f1+2
  2147  02BA' 0E60               	movlw	96
  2148  02BC' 6E27'              	movwf	___ftmul@f2,c
  2149  02BE' 0E63               	movlw	99
  2150  02C0' 6E28'              	movwf	___ftmul@f2+1,c
  2151  02C2' 0E58               	movlw	88
  2152  02C4' 6E29'              	movwf	___ftmul@f2+2,c
  2153  02C6' EC00' F000'        	call	___ftmul	;wreg free
  2154  02CA' C024' F01E'        	movff	?___ftmul,measure_inductance@Lin
  2155  02CE' C025' F01F'        	movff	?___ftmul+1,measure_inductance@Lin+1
  2156  02D2' C026' F020'        	movff	?___ftmul+2,measure_inductance@Lin+2
  2157                           
  2158                           ;measure.c: 237: if(Lin > 999) {
  2159  02D6' 0EC0               	movlw	192
  2160  02D8' 6E0D'              	movwf	___ftge@ff1,c
  2161  02DA' 0E79               	movlw	121
  2162  02DC' 6E0E'              	movwf	___ftge@ff1+1,c
  2163  02DE' 0E44               	movlw	68
  2164  02E0' 6E0F'              	movwf	___ftge@ff1+2,c
  2165  02E2' C01E' F010'        	movff	measure_inductance@Lin,___ftge@ff2
  2166  02E6' C01F' F011'        	movff	measure_inductance@Lin+1,___ftge@ff2+1
  2167  02EA' C020' F012'        	movff	measure_inductance@Lin+2,___ftge@ff2+2
  2168  02EE' EC00' F000'        	call	___ftge	;wreg free
  2169  02F2' E260               	bc	l4190
  2170                           
  2171                           ;measure.c: 238: if(Lin > (999e+03l)) {
  2172  02F4' 0EE6               	movlw	230
  2173  02F6' 6E0D'              	movwf	___ftge@ff1,c
  2174  02F8' 0E73               	movlw	115
  2175  02FA' 6E0E'              	movwf	___ftge@ff1+1,c
  2176  02FC' 0E49               	movlw	73
  2177  02FE' 6E0F'              	movwf	___ftge@ff1+2,c
  2178  0300' C01E' F010'        	movff	measure_inductance@Lin,___ftge@ff2
  2179  0304' C01F' F011'        	movff	measure_inductance@Lin+1,___ftge@ff2+1
  2180  0308' C020' F012'        	movff	measure_inductance@Lin+2,___ftge@ff2+2
  2181  030C' EC00' F000'        	call	___ftge	;wreg free
  2182  0310' E23C               	bc	l4186
  2183                           
  2184                           ;measure.c: 239: if(Lin > (999e+06l)) {
  2185  0312' 0E2E               	movlw	46
  2186  0314' 6E0D'              	movwf	___ftge@ff1,c
  2187  0316' 0E6E               	movlw	110
  2188  0318' 6E0E'              	movwf	___ftge@ff1+1,c
  2189  031A' 0E4E               	movlw	78
  2190  031C' 6E0F'              	movwf	___ftge@ff1+2,c
  2191  031E' C01E' F010'        	movff	measure_inductance@Lin,___ftge@ff2
  2192  0322' C01F' F011'        	movff	measure_inductance@Lin+1,___ftge@ff2+1
  2193  0326' C020' F012'        	movff	measure_inductance@Lin+2,___ftge@ff2+2
  2194  032A' EC00' F000'        	call	___ftge	;wreg free
  2195  032E' E217               	bc	l4182
  2196                           
  2197                           ;measure.c: 240: Lin = Lin / (1e+09l);
  2198  0330' C01E' F015'        	movff	measure_inductance@Lin,___ftdiv@f1
  2199  0334' C01F' F016'        	movff	measure_inductance@Lin+1,___ftdiv@f1+1
  2200  0338' C020' F017'        	movff	measure_inductance@Lin+2,___ftdiv@f1+2
  2201  033C' 0E6B               	movlw	107
  2202  033E' 6E18'              	movwf	___ftdiv@f2,c
  2203  0340' 0E6E               	movlw	110
  2204  0342' 6E19'              	movwf	___ftdiv@f2+1,c
  2205  0344' 0E4E               	movlw	78
  2206  0346' 6E1A'              	movwf	___ftdiv@f2+2,c
  2207  0348' EC00' F000'        	call	___ftdiv	;wreg free
  2208  034C' C015' F01E'        	movff	?___ftdiv,measure_inductance@Lin
  2209  0350' C016' F01F'        	movff	?___ftdiv+1,measure_inductance@Lin+1
  2210  0354' C017' F020'        	movff	?___ftdiv+2,measure_inductance@Lin+2
  2211                           
  2212                           ;measure.c: 241: unit = 0;
  2213  0358' 0100               	movlb	0	; () banked
  2214  035A' 6B00'              	clrf	measure_inductance@unit& (0+255),b
  2215                           
  2216                           ;measure.c: 242: } else {
  2217  035C' D02F               	goto	l4192
  2218  035E'                    l4182:
  2219                           
  2220                           ;measure.c: 243: Lin = Lin / (1e+06l);
  2221  035E' C01E' F015'        	movff	measure_inductance@Lin,___ftdiv@f1
  2222  0362' C01F' F016'        	movff	measure_inductance@Lin+1,___ftdiv@f1+1
  2223  0366' C020' F017'        	movff	measure_inductance@Lin+2,___ftdiv@f1+2
  2224  036A' 0E24               	movlw	36
  2225  036C' 6E18'              	movwf	___ftdiv@f2,c
  2226  036E' 0E74               	movlw	116
  2227  0370' 6E19'              	movwf	___ftdiv@f2+1,c
  2228  0372' 0E49               	movlw	73
  2229  0374' 6E1A'              	movwf	___ftdiv@f2+2,c
  2230  0376' EC00' F000'        	call	___ftdiv	;wreg free
  2231  037A' C015' F01E'        	movff	?___ftdiv,measure_inductance@Lin
  2232  037E' C016' F01F'        	movff	?___ftdiv+1,measure_inductance@Lin+1
  2233  0382' C017' F020'        	movff	?___ftdiv+2,measure_inductance@Lin+2
  2234                           
  2235                           ;measure.c: 244: unit = 1;
  2236  0386' 0E01               	movlw	1
  2237  0388' D016               	goto	L2
  2238  038A'                    l4186:
  2239                           
  2240                           ;measure.c: 247: Lin = Lin / 1e+03l;
  2241  038A' C01E' F015'        	movff	measure_inductance@Lin,___ftdiv@f1
  2242  038E' C01F' F016'        	movff	measure_inductance@Lin+1,___ftdiv@f1+1
  2243  0392' C020' F017'        	movff	measure_inductance@Lin+2,___ftdiv@f1+2
  2244  0396' 6A18'              	clrf	___ftdiv@f2,c
  2245  0398' 0E7A               	movlw	122
  2246  039A' 6E19'              	movwf	___ftdiv@f2+1,c
  2247  039C' 0E44               	movlw	68
  2248  039E' 6E1A'              	movwf	___ftdiv@f2+2,c
  2249  03A0' EC00' F000'        	call	___ftdiv	;wreg free
  2250  03A4' C015' F01E'        	movff	?___ftdiv,measure_inductance@Lin
  2251  03A8' C016' F01F'        	movff	?___ftdiv+1,measure_inductance@Lin+1
  2252  03AC' C017' F020'        	movff	?___ftdiv+2,measure_inductance@Lin+2
  2253                           
  2254                           ;measure.c: 248: unit = 2;
  2255  03B0' 0E02               	movlw	2
  2256  03B2' D001               	goto	L2
  2257  03B4'                    l4190:
  2258                           
  2259                           ;measure.c: 251: unit = 3;
  2260  03B4' 0E03               	movlw	3
  2261  03B6'                    L2:
  2262  03B6' FFFF               	dw	65535	; assembler added errata NOP
  2263  03B8' 0100               	movlb	0	; () banked
  2264  03BA' 6F00'              	movwf	measure_inductance@unit& (0+255),b
  2265  03BC'                    l4192:
  2266  03BC' FFFF               	dw	65535	; assembler added errata NOP
  2267                           
  2268                           ; BSR set to: 0
  2269                           ;measure.c: 253: Lin = Lin * 100;
  2270  03BE' C01E' F024'        	movff	measure_inductance@Lin,___ftmul@f1
  2271  03C2' C01F' F025'        	movff	measure_inductance@Lin+1,___ftmul@f1+1
  2272  03C6' C020' F026'        	movff	measure_inductance@Lin+2,___ftmul@f1+2
  2273  03CA' 6A27'              	clrf	___ftmul@f2,c
  2274  03CC' 0EC8               	movlw	200
  2275  03CE' 6E28'              	movwf	___ftmul@f2+1,c
  2276  03D0' 0E42               	movlw	66
  2277  03D2' 6E29'              	movwf	___ftmul@f2+2,c
  2278  03D4' EC00' F000'        	call	___ftmul	;wreg free
  2279  03D8' C024' F01E'        	movff	?___ftmul,measure_inductance@Lin
  2280  03DC' C025' F01F'        	movff	?___ftmul+1,measure_inductance@Lin+1
  2281  03E0' C026' F020'        	movff	?___ftmul+2,measure_inductance@Lin+2
  2282                           
  2283                           ;measure.c: 254: var = (uint16_t)Lin;
  2284  03E4' C01E' F054'        	movff	measure_inductance@Lin,___fttol@f1
  2285  03E8' C01F' F055'        	movff	measure_inductance@Lin+1,___fttol@f1+1
  2286  03EC' C020' F056'        	movff	measure_inductance@Lin+2,___fttol@f1+2
  2287  03F0' EC00' F000'        	call	___fttol	;wreg free
  2288  03F4' C054' F01C'        	movff	?___fttol,measure_inductance@var
  2289  03F8' C055' F01D'        	movff	?___fttol+1,measure_inductance@var+1
  2290                           
  2291                           ;measure.c: 256: print_reading(var);
  2292  03FC' C01C' F03F'        	movff	measure_inductance@var,print_reading@measurement
  2293  0400' C01D' F040'        	movff	measure_inductance@var+1,print_reading@measurement+1
  2294  0404' EC00' F000'        	call	_print_reading	;wreg free
  2295                           
  2296                           ;measure.c: 257: print_unit(unit);
  2297  0408' 0100               	movlb	0	; () banked
  2298  040A' 5100'              	movf	measure_inductance@unit& (0+255),w,b
  2299  040C' EC00' F000'        	call	_print_unit
  2300  0410' 0012               	return		;funcret
  2301  0412' FFFF               	dw	65535	; errata NOP
  2302  0414'                    __end_of_measure_inductance:
  2303                           	opt stack 0
  2304                           tblptru	equ	0xFF8
  2305                           tblptrh	equ	0xFF7
  2306                           tblptrl	equ	0xFF6
  2307                           tablat	equ	0xFF5
  2308                           intcon	equ	0xFF2
  2309                           intcon2	equ	0xFF1
  2310                           postinc0	equ	0xFEE
  2311                           wreg	equ	0xFE8
  2312                           postdec1	equ	0xFE5
  2313                           fsr1l	equ	0xFE1
  2314                           status	equ	0xFD8
  2315                           
  2316 ;; *************** function _measure_capacitance *****************
  2317 ;; Defined at:
  2318 ;;		line 131 in file "src/measure.c"
  2319 ;; Parameters:    Size  Location     Type
  2320 ;;		None
  2321 ;; Auto vars:     Size  Location     Type
  2322 ;;  Cin             3   12[BANK0 ] unsigned char 
  2323 ;;  var             2   10[BANK0 ] unsigned int 
  2324 ;;  unit            1    9[BANK0 ] unsigned char 
  2325 ;; Return value:  Size  Location     Type
  2326 ;;		None               void
  2327 ;; Registers used:
  2328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2329 ;; Tracked objects:
  2330 ;;		On entry : F/0
  2331 ;;		On exit  : 0/0
  2332 ;;		Unchanged: 0/0
  2333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2334 ;;      Params:         0       0       0       0       0       0       0
  2335 ;;      Locals:         0      15       0       0       0       0       0
  2336 ;;      Temps:          0       0       0       0       0       0       0
  2337 ;;      Totals:         0      15       0       0       0       0       0
  2338 ;;Total ram usage:       15 bytes
  2339 ;; Hardware stack levels used:    1
  2340 ;; Hardware stack levels required when called:    7
  2341 ;; This function calls:
  2342 ;;		___ftdiv
  2343 ;;		___ftge
  2344 ;;		___ftmul
  2345 ;;		___ftsub
  2346 ;;		___fttol
  2347 ;;		___lwtoft
  2348 ;;		_lcd_gotoxy
  2349 ;;		_measure_freq
  2350 ;;		_print_reading
  2351 ;;		_print_unit
  2352 ;;		_put_str
  2353 ;; This function is called by:
  2354 ;;		_main
  2355 ;; This function uses a non-reentrant model
  2356 ;;
  2357                           
  2358                           	psect	text5
  2359  0000'                    __ptext5:
  2360                           	opt stack 0
  2361  0000'                    _measure_capacitance:
  2362                           	opt stack 23
  2363                           
  2364                           ;incstack = 0
  2365  0000' FFFF               	dw	65535
  2366                           
  2367                           ; BSR set to: 0
  2368                           ;measure.c: 132: uint8_t unit;
  2369                           ;measure.c: 133: uint16_t var;
  2370                           ;measure.c: 135: double Cin;
  2371                           ;measure.c: 139: lcd_gotoxy(0, 0);
  2372  0002' 0E00               	movlw	0
  2373  0004' 6A11'              	clrf	lcd_gotoxy@row,c
  2374  0006' EC00' F000'        	call	_lcd_gotoxy
  2375                           
  2376                           ;measure.c: 140: put_str("Capacity ");
  2377  000A' 0E00'              	movlw	STR_13& (0+255)
  2378  000C' EC00' F000'        	call	_put_str
  2379                           
  2380                           ;measure.c: 142: var = measure_freq();
  2381  0010' EC00' F000'        	call	_measure_freq	;wreg free
  2382  0014' C03F' F00A'        	movff	?_measure_freq,measure_capacitance@var
  2383  0018' C040' F00B'        	movff	?_measure_freq+1,measure_capacitance@var+1
  2384                           
  2385                           ;measure.c: 144: F3 = (double)var;
  2386  001C' C00A' F044'        	movff	measure_capacitance@var,___lwtoft@c
  2387  0020' C00B' F045'        	movff	measure_capacitance@var+1,___lwtoft@c+1
  2388  0024' EC00' F000'        	call	___lwtoft	;wreg free
  2389  0028' C044' F003'        	movff	?___lwtoft,_F3
  2390  002C' C045' F004'        	movff	?___lwtoft+1,_F3+1
  2391  0030' C046' F005'        	movff	?___lwtoft+2,_F3+2
  2392                           
  2393                           ;measure.c: 178: if(F3 > F1)
  2394  0034' C00A' F00D'        	movff	_F1,___ftge@ff1
  2395  0038' C00B' F00E'        	movff	_F1+1,___ftge@ff1+1
  2396  003C' C00C' F00F'        	movff	_F1+2,___ftge@ff1+2
  2397  0040' C003' F010'        	movff	_F3,___ftge@ff2
  2398  0044' C004' F011'        	movff	_F3+1,___ftge@ff2+1
  2399  0048' C005' F012'        	movff	_F3+2,___ftge@ff2+2
  2400  004C' EC00' F000'        	call	___ftge	;wreg free
  2401  0050' E206               	bc	l4136
  2402                           
  2403                           ;measure.c: 179: F3 = F1;
  2404  0052' C00A' F003'        	movff	_F1,_F3
  2405  0056' C00B' F004'        	movff	_F1+1,_F3+1
  2406  005A' C00C' F005'        	movff	_F1+2,_F3+2
  2407  005E'                    l4136:
  2408                           
  2409                           ;measure.c: 181: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2410  005E' C003' F027'        	movff	_F3,___ftmul@f2
  2411  0062' C004' F028'        	movff	_F3+1,___ftmul@f2+1
  2412  0066' C005' F029'        	movff	_F3+2,___ftmul@f2+2
  2413  006A' C003' F024'        	movff	_F3,___ftmul@f1
  2414  006E' C004' F025'        	movff	_F3+1,___ftmul@f1+1
  2415  0072' C005' F026'        	movff	_F3+2,___ftmul@f1+2
  2416  0076' EC00' F000'        	call	___ftmul	;wreg free
  2417  007A' C024' F042'        	movff	?___ftmul,___ftsub@f2
  2418  007E' C025' F043'        	movff	?___ftmul+1,___ftsub@f2+1
  2419  0082' C026' F044'        	movff	?___ftmul+2,___ftsub@f2+2
  2420  0086' C00A' F027'        	movff	_F1,___ftmul@f2
  2421  008A' C00B' F028'        	movff	_F1+1,___ftmul@f2+1
  2422  008E' C00C' F029'        	movff	_F1+2,___ftmul@f2+2
  2423  0092' C00A' F024'        	movff	_F1,___ftmul@f1
  2424  0096' C00B' F025'        	movff	_F1+1,___ftmul@f1+1
  2425  009A' C00C' F026'        	movff	_F1+2,___ftmul@f1+2
  2426  009E' EC00' F000'        	call	___ftmul	;wreg free
  2427  00A2' C024' F03F'        	movff	?___ftmul,___ftsub@f1
  2428  00A6' C025' F040'        	movff	?___ftmul+1,___ftsub@f1+1
  2429  00AA' C026' F041'        	movff	?___ftmul+2,___ftsub@f1+2
  2430  00AE' EC00' F000'        	call	___ftsub	;wreg free
  2431  00B2' C03F' F000'        	movff	?___ftsub,_measure_capacitance$1310
  2432  00B6' C040' F001'        	movff	?___ftsub+1,_measure_capacitance$1310+1
  2433  00BA' C041' F002'        	movff	?___ftsub+2,_measure_capacitance$1310+2
  2434                           
  2435                           ;measure.c: 181: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2436  00BE' C000' F027'        	movff	_F2,___ftmul@f2
  2437  00C2' C001' F028'        	movff	_F2+1,___ftmul@f2+1
  2438  00C6' C002' F029'        	movff	_F2+2,___ftmul@f2+2
  2439  00CA' C000' F024'        	movff	_measure_capacitance$1310,___ftmul@f1
  2440  00CE' C001' F025'        	movff	_measure_capacitance$1310+1,___ftmul@f1+1
  2441  00D2' C002' F026'        	movff	_measure_capacitance$1310+2,___ftmul@f1+2
  2442  00D6' EC00' F000'        	call	___ftmul	;wreg free
  2443  00DA' C024' F003'        	movff	?___ftmul,_measure_capacitance$1311
  2444  00DE' C025' F004'        	movff	?___ftmul+1,_measure_capacitance$1311+1
  2445  00E2' C026' F005'        	movff	?___ftmul+2,_measure_capacitance$1311+2
  2446                           
  2447                           ;measure.c: 181: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2448  00E6' C000' F027'        	movff	_F2,___ftmul@f2
  2449  00EA' C001' F028'        	movff	_F2+1,___ftmul@f2+1
  2450  00EE' C002' F029'        	movff	_F2+2,___ftmul@f2+2
  2451  00F2' C003' F024'        	movff	_measure_capacitance$1311,___ftmul@f1
  2452  00F6' C004' F025'        	movff	_measure_capacitance$1311+1,___ftmul@f1+1
  2453  00FA' C005' F026'        	movff	_measure_capacitance$1311+2,___ftmul@f1+2
  2454  00FE' EC00' F000'        	call	___ftmul	;wreg free
  2455  0102' C024' F006'        	movff	?___ftmul,_measure_capacitance$1312
  2456  0106' C025' F007'        	movff	?___ftmul+1,_measure_capacitance$1312+1
  2457  010A' C026' F008'        	movff	?___ftmul+2,_measure_capacitance$1312+2
  2458                           
  2459                           ;measure.c: 181: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2460  010E' C006' F024'        	movff	_measure_capacitance$1312,___ftmul@f1
  2461  0112' C007' F025'        	movff	_measure_capacitance$1312+1,___ftmul@f1+1
  2462  0116' C008' F026'        	movff	_measure_capacitance$1312+2,___ftmul@f1+2
  2463  011A' C004' F027'        	movff	_CCal,___ftmul@f2
  2464  011E' C005' F028'        	movff	_CCal+1,___ftmul@f2+1
  2465  0122' C006' F029'        	movff	_CCal+2,___ftmul@f2+2
  2466  0126' EC00' F000'        	call	___ftmul	;wreg free
  2467  012A' C024' F00C'        	movff	?___ftmul,measure_capacitance@Cin
  2468  012E' C025' F00D'        	movff	?___ftmul+1,measure_capacitance@Cin+1
  2469  0132' C026' F00E'        	movff	?___ftmul+2,measure_capacitance@Cin+2
  2470                           
  2471                           ;measure.c: 191: if(Cin > 999) {
  2472  0136' 0EC0               	movlw	192
  2473  0138' 6E0D'              	movwf	___ftge@ff1,c
  2474  013A' 0E79               	movlw	121
  2475  013C' 6E0E'              	movwf	___ftge@ff1+1,c
  2476  013E' 0E44               	movlw	68
  2477  0140' 6E0F'              	movwf	___ftge@ff1+2,c
  2478  0142' C00C' F010'        	movff	measure_capacitance@Cin,___ftge@ff2
  2479  0146' C00D' F011'        	movff	measure_capacitance@Cin+1,___ftge@ff2+1
  2480  014A' C00E' F012'        	movff	measure_capacitance@Cin+2,___ftge@ff2+2
  2481  014E' EC00' F000'        	call	___ftge	;wreg free
  2482  0152' E25F               	bc	l4154
  2483                           
  2484                           ;measure.c: 192: if(Cin > (999e+03l)) {
  2485  0154' 0EE6               	movlw	230
  2486  0156' 6E0D'              	movwf	___ftge@ff1,c
  2487  0158' 0E73               	movlw	115
  2488  015A' 6E0E'              	movwf	___ftge@ff1+1,c
  2489  015C' 0E49               	movlw	73
  2490  015E' 6E0F'              	movwf	___ftge@ff1+2,c
  2491  0160' C00C' F010'        	movff	measure_capacitance@Cin,___ftge@ff2
  2492  0164' C00D' F011'        	movff	measure_capacitance@Cin+1,___ftge@ff2+1
  2493  0168' C00E' F012'        	movff	measure_capacitance@Cin+2,___ftge@ff2+2
  2494  016C' EC00' F000'        	call	___ftge	;wreg free
  2495  0170' E23B               	bc	l4150
  2496                           
  2497                           ;measure.c: 193: if(Cin > (999e+06l)) {
  2498  0172' 0E2E               	movlw	46
  2499  0174' 6E0D'              	movwf	___ftge@ff1,c
  2500  0176' 0E6E               	movlw	110
  2501  0178' 6E0E'              	movwf	___ftge@ff1+1,c
  2502  017A' 0E4E               	movlw	78
  2503  017C' 6E0F'              	movwf	___ftge@ff1+2,c
  2504  017E' C00C' F010'        	movff	measure_capacitance@Cin,___ftge@ff2
  2505  0182' C00D' F011'        	movff	measure_capacitance@Cin+1,___ftge@ff2+1
  2506  0186' C00E' F012'        	movff	measure_capacitance@Cin+2,___ftge@ff2+2
  2507  018A' EC00' F000'        	call	___ftge	;wreg free
  2508  018E' E216               	bc	l4146
  2509                           
  2510                           ;measure.c: 194: Cin = Cin / (1e+09);
  2511  0190' C00C' F015'        	movff	measure_capacitance@Cin,___ftdiv@f1
  2512  0194' C00D' F016'        	movff	measure_capacitance@Cin+1,___ftdiv@f1+1
  2513  0198' C00E' F017'        	movff	measure_capacitance@Cin+2,___ftdiv@f1+2
  2514  019C' 0E6B               	movlw	107
  2515  019E' 6E18'              	movwf	___ftdiv@f2,c
  2516  01A0' 0E6E               	movlw	110
  2517  01A2' 6E19'              	movwf	___ftdiv@f2+1,c
  2518  01A4' 0E4E               	movlw	78
  2519  01A6' 6E1A'              	movwf	___ftdiv@f2+2,c
  2520  01A8' EC00' F000'        	call	___ftdiv	;wreg free
  2521  01AC' C015' F00C'        	movff	?___ftdiv,measure_capacitance@Cin
  2522  01B0' C016' F00D'        	movff	?___ftdiv+1,measure_capacitance@Cin+1
  2523  01B4' C017' F00E'        	movff	?___ftdiv+2,measure_capacitance@Cin+2
  2524                           
  2525                           ;measure.c: 195: unit = 4;
  2526  01B8' 0E04               	movlw	4
  2527  01BA' D02C               	goto	L3
  2528  01BC'                    l4146:
  2529                           
  2530                           ;measure.c: 197: Cin = Cin / (1e+06);
  2531  01BC' C00C' F015'        	movff	measure_capacitance@Cin,___ftdiv@f1
  2532  01C0' C00D' F016'        	movff	measure_capacitance@Cin+1,___ftdiv@f1+1
  2533  01C4' C00E' F017'        	movff	measure_capacitance@Cin+2,___ftdiv@f1+2
  2534  01C8' 0E24               	movlw	36
  2535  01CA' 6E18'              	movwf	___ftdiv@f2,c
  2536  01CC' 0E74               	movlw	116
  2537  01CE' 6E19'              	movwf	___ftdiv@f2+1,c
  2538  01D0' 0E49               	movlw	73
  2539  01D2' 6E1A'              	movwf	___ftdiv@f2+2,c
  2540  01D4' EC00' F000'        	call	___ftdiv	;wreg free
  2541  01D8' C015' F00C'        	movff	?___ftdiv,measure_capacitance@Cin
  2542  01DC' C016' F00D'        	movff	?___ftdiv+1,measure_capacitance@Cin+1
  2543  01E0' C017' F00E'        	movff	?___ftdiv+2,measure_capacitance@Cin+2
  2544                           
  2545                           ;measure.c: 198: unit = 5;
  2546  01E4' 0E05               	movlw	5
  2547  01E6' D016               	goto	L3
  2548  01E8'                    l4150:
  2549                           
  2550                           ;measure.c: 201: Cin = Cin / 1e+03;
  2551  01E8' C00C' F015'        	movff	measure_capacitance@Cin,___ftdiv@f1
  2552  01EC' C00D' F016'        	movff	measure_capacitance@Cin+1,___ftdiv@f1+1
  2553  01F0' C00E' F017'        	movff	measure_capacitance@Cin+2,___ftdiv@f1+2
  2554  01F4' 6A18'              	clrf	___ftdiv@f2,c
  2555  01F6' 0E7A               	movlw	122
  2556  01F8' 6E19'              	movwf	___ftdiv@f2+1,c
  2557  01FA' 0E44               	movlw	68
  2558  01FC' 6E1A'              	movwf	___ftdiv@f2+2,c
  2559  01FE' EC00' F000'        	call	___ftdiv	;wreg free
  2560  0202' C015' F00C'        	movff	?___ftdiv,measure_capacitance@Cin
  2561  0206' C016' F00D'        	movff	?___ftdiv+1,measure_capacitance@Cin+1
  2562  020A' C017' F00E'        	movff	?___ftdiv+2,measure_capacitance@Cin+2
  2563                           
  2564                           ;measure.c: 202: unit = 6;
  2565  020E' 0E06               	movlw	6
  2566  0210' D001               	goto	L3
  2567  0212'                    l4154:
  2568                           
  2569                           ;measure.c: 205: unit = 7;
  2570  0212' 0E07               	movlw	7
  2571  0214'                    L3:
  2572  0214' FFFF               	dw	65535	; assembler added errata NOP
  2573  0216' 0100               	movlb	0	; () banked
  2574  0218' 6F00'              	movwf	measure_capacitance@unit& (0+255),b
  2575                           
  2576                           ; BSR set to: 0
  2577                           ;measure.c: 207: Cin = Cin * 100;
  2578  021A' C00C' F024'        	movff	measure_capacitance@Cin,___ftmul@f1
  2579  021E' C00D' F025'        	movff	measure_capacitance@Cin+1,___ftmul@f1+1
  2580  0222' C00E' F026'        	movff	measure_capacitance@Cin+2,___ftmul@f1+2
  2581  0226' 6A27'              	clrf	___ftmul@f2,c
  2582  0228' 0EC8               	movlw	200
  2583  022A' 6E28'              	movwf	___ftmul@f2+1,c
  2584  022C' 0E42               	movlw	66
  2585  022E' 6E29'              	movwf	___ftmul@f2+2,c
  2586  0230' EC00' F000'        	call	___ftmul	;wreg free
  2587  0234' C024' F00C'        	movff	?___ftmul,measure_capacitance@Cin
  2588  0238' C025' F00D'        	movff	?___ftmul+1,measure_capacitance@Cin+1
  2589  023C' C026' F00E'        	movff	?___ftmul+2,measure_capacitance@Cin+2
  2590                           
  2591                           ;measure.c: 208: var = (uint16_t)Cin;
  2592  0240' C00C' F054'        	movff	measure_capacitance@Cin,___fttol@f1
  2593  0244' C00D' F055'        	movff	measure_capacitance@Cin+1,___fttol@f1+1
  2594  0248' C00E' F056'        	movff	measure_capacitance@Cin+2,___fttol@f1+2
  2595  024C' EC00' F000'        	call	___fttol	;wreg free
  2596  0250' C054' F00A'        	movff	?___fttol,measure_capacitance@var
  2597  0254' C055' F00B'        	movff	?___fttol+1,measure_capacitance@var+1
  2598                           
  2599                           ;measure.c: 210: print_reading(var);
  2600  0258' C00A' F03F'        	movff	measure_capacitance@var,print_reading@measurement
  2601  025C' C00B' F040'        	movff	measure_capacitance@var+1,print_reading@measurement+1
  2602  0260' EC00' F000'        	call	_print_reading	;wreg free
  2603                           
  2604                           ;measure.c: 211: print_unit(unit);
  2605  0264' 0100               	movlb	0	; () banked
  2606  0266' 5100'              	movf	measure_capacitance@unit& (0+255),w,b
  2607  0268' EC00' F000'        	call	_print_unit
  2608  026C' 0012               	return		;funcret
  2609  026E' FFFF               	dw	65535	; errata NOP
  2610  0270'                    __end_of_measure_capacitance:
  2611                           	opt stack 0
  2612                           tblptru	equ	0xFF8
  2613                           tblptrh	equ	0xFF7
  2614                           tblptrl	equ	0xFF6
  2615                           tablat	equ	0xFF5
  2616                           intcon	equ	0xFF2
  2617                           intcon2	equ	0xFF1
  2618                           postinc0	equ	0xFEE
  2619                           wreg	equ	0xFE8
  2620                           postdec1	equ	0xFE5
  2621                           fsr1l	equ	0xFE1
  2622                           status	equ	0xFD8
  2623                           
  2624 ;; *************** function _print_unit *****************
  2625 ;; Defined at:
  2626 ;;		line 401 in file "src/print.c"
  2627 ;; Parameters:    Size  Location     Type
  2628 ;;  unit            1    wreg     unsigned char 
  2629 ;; Auto vars:     Size  Location     Type
  2630 ;;  unit            1    0[COMRAM] unsigned char 
  2631 ;; Return value:  Size  Location     Type
  2632 ;;		None               void
  2633 ;; Registers used:
  2634 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2635 ;; Tracked objects:
  2636 ;;		On entry : F/0
  2637 ;;		On exit  : 0/0
  2638 ;;		Unchanged: 0/0
  2639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2640 ;;      Params:         0       0       0       0       0       0       0
  2641 ;;      Locals:         0       0       0       0       0       0       0
  2642 ;;      Temps:          2       0       0       0       0       0       0
  2643 ;;      Totals:         2       0       0       0       0       0       0
  2644 ;;Total ram usage:        2 bytes
  2645 ;; Hardware stack levels used:    1
  2646 ;; Hardware stack levels required when called:    6
  2647 ;; This function calls:
  2648 ;;		_lcd_gotoxy
  2649 ;; This function is called by:
  2650 ;;		_measure_capacitance
  2651 ;;		_measure_inductance
  2652 ;; This function uses a non-reentrant model
  2653 ;;
  2654                           
  2655                           	psect	text6
  2656  0000'                    __ptext6:
  2657                           	opt stack 0
  2658  0000'                    _print_unit:
  2659                           	opt stack 23
  2660                           
  2661                           ;incstack = 0
  2662  0000' FFFF               	dw	65535
  2663                           
  2664                           ; BSR set to: 0
  2665                           ;print.c: 409: static const char* units[8] = {"H", "mH", "uH", "nH", "mF", "uF", "nF", "
      +                          pF"};
  2666                           ;print.c: 410: lcd_gotoxy(14, 0);
  2667  0002' 6A11'              	clrf	lcd_gotoxy@row,c
  2668  0004' 0E0E               	movlw	14
  2669  0006' EC00' F000'        	call	_lcd_gotoxy
  2670                           
  2671                           ;print.c: 414: lcd_gotoxy(16 - (buffer.n - buffer.p), 0);
  2672  000A' 6A11'              	clrf	lcd_gotoxy@row,c
  2673  000C' 0100               	movlb	0	; () banked
  2674  000E' 3900'              	swapf	(_buffer+16)& (0+255),w,b
  2675  0010' 0B0F               	andlw	15
  2676  0012' 6E00'              	movwf	??_print_unit& (0+255),c
  2677  0014' 5100'              	movf	(_buffer+16)& (0+255),w,b
  2678  0016' 0B0F               	andlw	15
  2679  0018' 6E00'              	movwf	(??_print_unit+1)& (0+255),c
  2680  001A' 5017'              	movf	??_print_unit,w,c
  2681  001C' 5C18'              	subwf	??_print_unit+1,w,c
  2682  001E' 0F10               	addlw	16
  2683  0020' EC00' F000'        	call	_lcd_gotoxy
  2684  0024' 0012               	return		;funcret
  2685  0026' FFFF               	dw	65535	; errata NOP
  2686  0028'                    __end_of_print_unit:
  2687                           	opt stack 0
  2688                           tblptru	equ	0xFF8
  2689                           tblptrh	equ	0xFF7
  2690                           tblptrl	equ	0xFF6
  2691                           tablat	equ	0xFF5
  2692                           intcon	equ	0xFF2
  2693                           intcon2	equ	0xFF1
  2694                           postinc0	equ	0xFEE
  2695                           wreg	equ	0xFE8
  2696                           postdec1	equ	0xFE5
  2697                           fsr1l	equ	0xFE1
  2698                           status	equ	0xFD8
  2699                           
  2700 ;; *************** function _print_reading *****************
  2701 ;; Defined at:
  2702 ;;		line 424 in file "src/print.c"
  2703 ;; Parameters:    Size  Location     Type
  2704 ;;  measurement     2   63[COMRAM] unsigned int 
  2705 ;; Auto vars:     Size  Location     Type
  2706 ;;		None
  2707 ;; Return value:  Size  Location     Type
  2708 ;;		None               void
  2709 ;; Registers used:
  2710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2711 ;; Tracked objects:
  2712 ;;		On entry : 0/0
  2713 ;;		On exit  : 0/0
  2714 ;;		Unchanged: 0/0
  2715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2716 ;;      Params:         2       0       0       0       0       0       0
  2717 ;;      Locals:         4       0       0       0       0       0       0
  2718 ;;      Temps:          0       0       0       0       0       0       0
  2719 ;;      Totals:         6       0       0       0       0       0       0
  2720 ;;Total ram usage:        6 bytes
  2721 ;; Hardware stack levels used:    1
  2722 ;; Hardware stack levels required when called:    6
  2723 ;; This function calls:
  2724 ;;		___lwdiv
  2725 ;;		___lwmod
  2726 ;;		_format_number
  2727 ;;		_lcd_gotoxy
  2728 ;;		_lcd_puts
  2729 ;; This function is called by:
  2730 ;;		_measure_capacitance
  2731 ;;		_measure_inductance
  2732 ;; This function uses a non-reentrant model
  2733 ;;
  2734                           
  2735                           	psect	text7
  2736  0000'                    __ptext7:
  2737                           	opt stack 0
  2738  0000'                    _print_reading:
  2739                           	opt stack 23
  2740                           
  2741                           ;incstack = 0
  2742  0000' FFFF               	dw	65535
  2743                           
  2744                           ;print.c: 451: lcd_gotoxy(9, 0);
  2745  0002' 6A11'              	clrf	lcd_gotoxy@row,c
  2746  0004' 0E09               	movlw	9
  2747  0006' EC00' F000'        	call	_lcd_gotoxy
  2748                           
  2749                           ;print.c: 452: lcd_puts("     ");
  2750  000A' 0E00'              	movlw	(STR_5+1)& (0+255)
  2751  000C' EC00' F000'        	call	_lcd_puts
  2752                           
  2753                           ;print.c: 453: lcd_gotoxy(9, 0);
  2754  0010' 6A11'              	clrf	lcd_gotoxy@row,c
  2755  0012' 0E09               	movlw	9
  2756  0014' EC00' F000'        	call	_lcd_gotoxy
  2757                           
  2758                           ;print.c: 455: format_number(measurement / 100, 10, 0);
  2759  0018' C03F' F00D'        	movff	print_reading@measurement,___lwdiv@dividend
  2760  001C' C040' F00E'        	movff	print_reading@measurement+1,___lwdiv@dividend+1
  2761  0020' 6A10'              	clrf	___lwdiv@divisor+1,c
  2762  0022' 0E64               	movlw	100
  2763  0024' 6E0F'              	movwf	___lwdiv@divisor,c
  2764  0026' EC00' F000'        	call	___lwdiv	;wreg free
  2765  002A' C00D' F041'        	movff	?___lwdiv,_print_reading$1320
  2766  002E' C00E' F042'        	movff	?___lwdiv+1,_print_reading$1320+1
  2767                           
  2768                           ;print.c: 455: format_number(measurement / 100, 10, 0);
  2769  0032' C041' F014'        	movff	_print_reading$1320,format_number@n
  2770  0036' C042' F015'        	movff	_print_reading$1320+1,format_number@n+1
  2771  003A' 0E0A               	movlw	10
  2772  003C' 6E16'              	movwf	format_number@base,c
  2773  003E' 6A17'              	clrf	format_number@pad,c
  2774  0040' EC00' F000'        	call	_format_number	;wreg free
  2775                           
  2776                           ;print.c: 457: format_number(measurement % 100, 10, 0);
  2777  0044' C03F' F00D'        	movff	print_reading@measurement,___lwmod@dividend
  2778  0048' C040' F00E'        	movff	print_reading@measurement+1,___lwmod@dividend+1
  2779  004C' 6A10'              	clrf	___lwmod@divisor+1,c
  2780  004E' 0E64               	movlw	100
  2781  0050' 6E0F'              	movwf	___lwmod@divisor,c
  2782  0052' EC00' F000'        	call	___lwmod	;wreg free
  2783  0056' C00D' F043'        	movff	?___lwmod,_print_reading$1321
  2784  005A' C00E' F044'        	movff	?___lwmod+1,_print_reading$1321+1
  2785                           
  2786                           ;print.c: 457: format_number(measurement % 100, 10, 0);
  2787  005E' C043' F014'        	movff	_print_reading$1321,format_number@n
  2788  0062' C044' F015'        	movff	_print_reading$1321+1,format_number@n+1
  2789  0066' 0E0A               	movlw	10
  2790  0068' 6E16'              	movwf	format_number@base,c
  2791  006A' 6A17'              	clrf	format_number@pad,c
  2792  006C' EC00' F000'        	call	_format_number	;wreg free
  2793  0070' 0012               	return		;funcret
  2794  0072' FFFF               	dw	65535	; errata NOP
  2795  0074'                    __end_of_print_reading:
  2796                           	opt stack 0
  2797                           tblptru	equ	0xFF8
  2798                           tblptrh	equ	0xFF7
  2799                           tblptrl	equ	0xFF6
  2800                           tablat	equ	0xFF5
  2801                           intcon	equ	0xFF2
  2802                           intcon2	equ	0xFF1
  2803                           postinc0	equ	0xFEE
  2804                           wreg	equ	0xFE8
  2805                           postdec1	equ	0xFE5
  2806                           fsr1l	equ	0xFE1
  2807                           status	equ	0xFD8
  2808                           
  2809 ;; *************** function _lcd_puts *****************
  2810 ;; Defined at:
  2811 ;;		line 163 in file "lib/lcd44780.c"
  2812 ;; Parameters:    Size  Location     Type
  2813 ;;  string          1    wreg     PTR const unsigned char 
  2814 ;;		 -> STR_25(4), STR_24(4), STR_23(6), STR_8(5), 
  2815 ;;		 -> STR_7(6), STR_6(7), STR_5(7), STR_1(10), 
  2816 ;; Auto vars:     Size  Location     Type
  2817 ;;  string          1   19[COMRAM] PTR const unsigned char 
  2818 ;;		 -> STR_25(4), STR_24(4), STR_23(6), STR_8(5), 
  2819 ;;		 -> STR_7(6), STR_6(7), STR_5(7), STR_1(10), 
  2820 ;;  i               1   18[COMRAM] unsigned char 
  2821 ;; Return value:  Size  Location     Type
  2822 ;;		None               void
  2823 ;; Registers used:
  2824 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2825 ;; Tracked objects:
  2826 ;;		On entry : 0/0
  2827 ;;		On exit  : 0/0
  2828 ;;		Unchanged: 0/0
  2829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2830 ;;      Params:         0       0       0       0       0       0       0
  2831 ;;      Locals:         2       0       0       0       0       0       0
  2832 ;;      Temps:          1       0       0       0       0       0       0
  2833 ;;      Totals:         3       0       0       0       0       0       0
  2834 ;;Total ram usage:        3 bytes
  2835 ;; Hardware stack levels used:    1
  2836 ;; Hardware stack levels required when called:    5
  2837 ;; This function calls:
  2838 ;;		_lcd_putch
  2839 ;; This function is called by:
  2840 ;;		_main
  2841 ;;		_print_reading
  2842 ;;		_print_indicator
  2843 ;; This function uses a non-reentrant model
  2844 ;;
  2845                           
  2846                           	psect	text8
  2847  0000'                    __ptext8:
  2848                           	opt stack 0
  2849  0000'                    _lcd_puts:
  2850                           	opt stack 24
  2851                           
  2852                           ;incstack = 0
  2853  0000' FFFF               	dw	65535
  2854                           
  2855                           ;lcd_puts@string stored from wreg
  2856  0002' 6E13'              	movwf	lcd_puts@string,c
  2857                           
  2858                           ;lcd44780.c: 164: uint8_t i;
  2859                           ;lcd44780.c: 165: for(i = 0; string[i]; i++) lcd_putch(string[i]);
  2860  0004' 6A12'              	clrf	lcd_puts@i,c
  2861  0006' D00C               	goto	l3762
  2862  0008'                    l3758:
  2863  0008' FFFF               	dw	65535	; assembler added errata NOP
  2864  000A' 5013'              	movf	lcd_puts@string,w,c
  2865  000C' 2412'              	addwf	lcd_puts@i,w,c
  2866  000E' 6E00'              	movwf	??_lcd_puts& (0+255),c
  2867  0010' C011' FFF6         	movff	??_lcd_puts,tblptrl
  2868  0014'                    	if	0	;There is only one active tblptr byte
  2869  0014'                    	endif
  2870  0014'                    	if	0	;tblptru may be non-zero
  2871  0014'                    	endif
  2872  0014'                    	if	0	;tblptru may be non-zero
  2873  0014'                    	endif
  2874  0014' 0008               	tblrd		*
  2875  0016' FFFF               	dw	65535	; errata NOP
  2876  0018' 50F5               	movf	tablat,w,c
  2877  001A' EC00' F000'        	call	_lcd_putch
  2878  001E' 2A12'              	incf	lcd_puts@i,f,c
  2879  0020'                    l3762:
  2880  0020' FFFF               	dw	65535	; assembler added errata NOP
  2881  0022' 5013'              	movf	lcd_puts@string,w,c
  2882  0024' 2412'              	addwf	lcd_puts@i,w,c
  2883  0026' 6E00'              	movwf	??_lcd_puts& (0+255),c
  2884  0028' C011' FFF6         	movff	??_lcd_puts,tblptrl
  2885  002C'                    	if	0	;There is only one active tblptr byte
  2886  002C'                    	endif
  2887  002C'                    	if	0	;tblptru may be non-zero
  2888  002C'                    	endif
  2889  002C'                    	if	0	;tblptru may be non-zero
  2890  002C'                    	endif
  2891  002C' 0008               	tblrd		*
  2892  002E' FFFF               	dw	65535	; errata NOP
  2893  0030' 50F5               	movf	tablat,w,c
  2894  0032' B4D8               	btfsc	status,2,c
  2895  0034' 0012               	return		;funcret
  2896  0036' FFFF               	dw	65535	; assembler added errata NOP
  2897  0038' D7E7               	goto	l3758
  2898  003A' FFFF               	dw	65535	; errata NOP
  2899  003C'                    __end_of_lcd_puts:
  2900                           	opt stack 0
  2901                           tblptru	equ	0xFF8
  2902                           tblptrh	equ	0xFF7
  2903                           tblptrl	equ	0xFF6
  2904                           tablat	equ	0xFF5
  2905                           intcon	equ	0xFF2
  2906                           intcon2	equ	0xFF1
  2907                           postinc0	equ	0xFEE
  2908                           wreg	equ	0xFE8
  2909                           postdec1	equ	0xFE5
  2910                           fsr1l	equ	0xFE1
  2911                           status	equ	0xFD8
  2912                           
  2913 ;; *************** function _lcd_init *****************
  2914 ;; Defined at:
  2915 ;;		line 489 in file "lib/lcd44780.c"
  2916 ;; Parameters:    Size  Location     Type
  2917 ;;  fourbitmode     1    wreg     unsigned char 
  2918 ;; Auto vars:     Size  Location     Type
  2919 ;;  fourbitmode     1   13[COMRAM] unsigned char 
  2920 ;; Return value:  Size  Location     Type
  2921 ;;		None               void
  2922 ;; Registers used:
  2923 ;;		wreg, status,2, status,0
  2924 ;; Tracked objects:
  2925 ;;		On entry : 0/0
  2926 ;;		On exit  : F/0
  2927 ;;		Unchanged: 0/0
  2928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2929 ;;      Params:         0       0       0       0       0       0       0
  2930 ;;      Locals:         3       0       0       0       0       0       0
  2931 ;;      Temps:          0       0       0       0       0       0       0
  2932 ;;      Totals:         3       0       0       0       0       0       0
  2933 ;;Total ram usage:        3 bytes
  2934 ;; Hardware stack levels used:    1
  2935 ;; Hardware stack levels required when called:    2
  2936 ;; This function calls:
  2937 ;;		Nothing
  2938 ;; This function is called by:
  2939 ;;		_main
  2940 ;; This function uses a non-reentrant model
  2941 ;;
  2942                           
  2943                           	psect	text9
  2944  0000'                    __ptext9:
  2945                           	opt stack 0
  2946  0000'                    _lcd_init:
  2947                           	opt stack 28
  2948                           
  2949                           ;incstack = 0
  2950  0000' FFFF               	dw	65535
  2951                           
  2952                           ;lcd_init@fourbitmode stored from wreg
  2953  0002' 6E0D'              	movwf	lcd_init@fourbitmode,c
  2954                           
  2955                           ;lcd44780.c: 491: LCD_ctrl = 0;
  2956  0004' 6A08'              	clrf	_LCD_ctrl,c
  2957                           
  2958                           ;lcd44780.c: 492: LCD_function = (fourbitmode ? 0x00 : 0x10);
  2959  0006' 500D'              	movf	lcd_init@fourbitmode,w,c
  2960  0008' E104               	bnz	l302
  2961  000A' 6A0F'              	clrf	_lcd_init$487+1,c
  2962  000C' 0E10               	movlw	16
  2963  000E' 6E0E'              	movwf	_lcd_init$487,c
  2964  0010' D002               	goto	l304
  2965  0012'                    l302:
  2966  0012' 6A0E'              	clrf	_lcd_init$487,c
  2967  0014' 6A0F'              	clrf	_lcd_init$487+1,c
  2968  0016'                    l304:
  2969  0016' FFFF               	dw	65535	; assembler added errata NOP
  2970  0018' C00E' F009'        	movff	_lcd_init$487,_LCD_function
  2971                           
  2972                           ;lcd44780.c: 494: LCD_lines = 0;
  2973  001C' 0100               	movlb	0	; () banked
  2974  001E' 6B00'              	clrf	_LCD_lines& (0+255),b
  2975                           
  2976                           ;lcd44780.c: 496: LCD_mode = 0;
  2977  0020' 6B00'              	clrf	_LCD_mode& (0+255),b
  2978                           
  2979                           ; BSR set to: 0
  2980                           ;lcd44780.c: 498: TRISB &= ~0b0100;
  2981  0022' 9493               	bcf	3987,2,c	;volatile
  2982                           
  2983                           ;lcd44780.c: 499: LATB &= ~0b0100;
  2984  0024' 948A               	bcf	3978,2,c	;volatile
  2985                           
  2986                           ;lcd44780.c: 504: TRISB &= ~0b1000;
  2987  0026' 9693               	bcf	3987,3,c	;volatile
  2988                           
  2989                           ;lcd44780.c: 505: LATB &= ~0b1000;
  2990  0028' 968A               	bcf	3978,3,c	;volatile
  2991                           
  2992                           ; BSR set to: 0
  2993                           ;lcd44780.c: 507: LATB &= ~0b11110000;
  2994  002A' 0E0F               	movlw	15
  2995  002C' 168A               	andwf	3978,f,c	;volatile
  2996                           
  2997                           ; BSR set to: 0
  2998  002E' 0012               	return		;funcret
  2999  0030' FFFF               	dw	65535	; errata NOP
  3000  0032'                    __end_of_lcd_init:
  3001                           	opt stack 0
  3002                           tblptru	equ	0xFF8
  3003                           tblptrh	equ	0xFF7
  3004                           tblptrl	equ	0xFF6
  3005                           tablat	equ	0xFF5
  3006                           intcon	equ	0xFF2
  3007                           intcon2	equ	0xFF1
  3008                           postinc0	equ	0xFEE
  3009                           wreg	equ	0xFE8
  3010                           postdec1	equ	0xFE5
  3011                           fsr1l	equ	0xFE1
  3012                           status	equ	0xFD8
  3013                           
  3014 ;; *************** function _lcd_begin *****************
  3015 ;; Defined at:
  3016 ;;		line 416 in file "lib/lcd44780.c"
  3017 ;; Parameters:    Size  Location     Type
  3018 ;;  lines           1    wreg     unsigned char 
  3019 ;;  dotsize         1   17[COMRAM] unsigned char 
  3020 ;; Auto vars:     Size  Location     Type
  3021 ;;  lines           1   19[COMRAM] unsigned char 
  3022 ;; Return value:  Size  Location     Type
  3023 ;;		None               void
  3024 ;; Registers used:
  3025 ;;		wreg, status,2, status,0, cstack
  3026 ;; Tracked objects:
  3027 ;;		On entry : F/0
  3028 ;;		On exit  : 0/0
  3029 ;;		Unchanged: 0/0
  3030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3031 ;;      Params:         1       0       0       0       0       0       0
  3032 ;;      Locals:         1       0       0       0       0       0       0
  3033 ;;      Temps:          1       0       0       0       0       0       0
  3034 ;;      Totals:         3       0       0       0       0       0       0
  3035 ;;Total ram usage:        3 bytes
  3036 ;; Hardware stack levels used:    1
  3037 ;; Hardware stack levels required when called:    5
  3038 ;; This function calls:
  3039 ;;		_lcd_command
  3040 ;;		_lcd_write4bits
  3041 ;; This function is called by:
  3042 ;;		_main
  3043 ;; This function uses a non-reentrant model
  3044 ;;
  3045                           
  3046                           	psect	text10
  3047  0000'                    __ptext10:
  3048                           	opt stack 0
  3049  0000'                    _lcd_begin:
  3050                           	opt stack 25
  3051                           
  3052                           ; BSR set to: 0
  3053                           ;incstack = 0
  3054  0000' FFFF               	dw	65535
  3055                           
  3056                           ;lcd_begin@lines stored from wreg
  3057  0002' 6E13'              	movwf	lcd_begin@lines,c
  3058                           
  3059                           ; BSR set to: 0
  3060                           ;lcd44780.c: 417: if(lines > 1)
  3061  0004' 0E01               	movlw	1
  3062  0006' 6413'              	cpfsgt	lcd_begin@lines,c
  3063  0008' D001               	goto	l4020
  3064                           
  3065                           ; BSR set to: 0
  3066                           ;lcd44780.c: 418: LCD_function |= 0x08;
  3067  000A' 8609'              	bsf	_LCD_function,3,c
  3068  000C'                    l4020:
  3069  000C' FFFF               	dw	65535	; assembler added errata NOP
  3070                           
  3071                           ; BSR set to: 0
  3072                           ;lcd44780.c: 421: LCD_lines = lines;
  3073  000E' C013' F010'        	movff	lcd_begin@lines,_LCD_lines
  3074                           
  3075                           ; BSR set to: 0
  3076                           ;lcd44780.c: 425: if((dotsize != 0) && (lines == 1))
  3077  0012' 5011'              	movf	lcd_begin@dotsize,w,c
  3078  0014' E003               	bz	l4028
  3079                           
  3080                           ; BSR set to: 0
  3081  0016' 0413'              	decf	lcd_begin@lines,w,c
  3082  0018' B4D8               	btfsc	status,2,c
  3083                           
  3084                           ; BSR set to: 0
  3085                           ;lcd44780.c: 426: LCD_function |= 0x04;
  3086  001A' 8409'              	bsf	_LCD_function,2,c
  3087  001C'                    l4028:
  3088                           
  3089                           ; BSR set to: 0
  3090                           ;lcd44780.c: 428: _delay((unsigned long)((15)*(20000000/4000.0)));
  3091  001C' 0E4A               	movlw	74
  3092  001E' 6E00'              	movwf	??_lcd_begin& (0+255),c
  3093  0020' 0E18               	movlw	24
  3094  0022'                    u4147:
  3095  0022' FFFF               	dw	65535	; errata NOP
  3096  0024' 2EE8               	decfsz	wreg,f,c
  3097  0026' D7FD               	goto	u4147
  3098  0028' 2E00'              	decfsz	??_lcd_begin& (0+255),f,c
  3099  002A' D7FB               	goto	u4147
  3100  002C' D000               	nop2	
  3101                           
  3102                           ;lcd44780.c: 431: LATB &= ~0b0100;
  3103  002E' 948A               	bcf	3978,2,c	;volatile
  3104                           
  3105                           ;lcd44780.c: 432: LATB &= ~0b1000;
  3106  0030' 968A               	bcf	3978,3,c	;volatile
  3107                           
  3108                           ;lcd44780.c: 435: if(!(LCD_function & 0x10)) {
  3109  0032' B809'              	btfsc	_LCD_function,4,c
  3110  0034' D01F               	goto	l4046
  3111                           
  3112                           ;lcd44780.c: 439: lcd_write4bits(0x03);
  3113  0036' 0E03               	movlw	3
  3114  0038' EC00' F000'        	call	_lcd_write4bits
  3115                           
  3116                           ;lcd44780.c: 440: _delay((unsigned long)((5)*(20000000/4000.0)));
  3117  003C' 0E19               	movlw	25
  3118  003E' 6E00'              	movwf	??_lcd_begin& (0+255),c
  3119  0040' 0E5D               	movlw	93
  3120  0042'                    u4157:
  3121  0042' FFFF               	dw	65535	; errata NOP
  3122  0044' 2EE8               	decfsz	wreg,f,c
  3123  0046' D7FD               	goto	u4157
  3124  0048' 2E00'              	decfsz	??_lcd_begin& (0+255),f,c
  3125  004A' D7FB               	goto	u4157
  3126                           
  3127                           ;lcd44780.c: 442: lcd_write4bits(0x03);
  3128  004C' 0E03               	movlw	3
  3129  004E' EC00' F000'        	call	_lcd_write4bits
  3130                           
  3131                           ;lcd44780.c: 443: _delay((unsigned long)((150)*(20000000/4000000.0)));
  3132  0052' 0EBB               	movlw	187
  3133  0054'                    u4167:
  3134  0054' FFFF               	dw	65535	; errata NOP
  3135  0056' 2EE8               	decfsz	wreg,f,c
  3136  0058' D7FD               	goto	u4167
  3137  005A' D000               	nop2		;nop
  3138                           
  3139                           ;lcd44780.c: 445: lcd_write4bits(0x03);
  3140  005C' 0E03               	movlw	3
  3141  005E' EC00' F000'        	call	_lcd_write4bits
  3142                           
  3143                           ;lcd44780.c: 446: _delay((unsigned long)((150)*(20000000/4000000.0)));
  3144  0062' 0EBB               	movlw	187
  3145  0064'                    u4177:
  3146  0064' FFFF               	dw	65535	; errata NOP
  3147  0066' 2EE8               	decfsz	wreg,f,c
  3148  0068' D7FD               	goto	u4177
  3149  006A' D000               	nop2		;nop
  3150                           
  3151                           ;lcd44780.c: 448: lcd_write4bits(0x02);
  3152  006C' 0E02               	movlw	2
  3153  006E' EC00' F000'        	call	_lcd_write4bits
  3154                           
  3155                           ;lcd44780.c: 449: }
  3156  0072' D01D               	goto	l4054
  3157  0074'                    l4046:
  3158  0074' FFFF               	dw	65535	; assembler added errata NOP
  3159                           
  3160                           ;lcd44780.c: 451: else {
  3161                           ;lcd44780.c: 455: lcd_command(0x20 | LCD_function);
  3162  0076' 5009'              	movf	_LCD_function,w,c
  3163  0078' 0920               	iorlw	32
  3164  007A' EC00' F000'        	call	_lcd_command
  3165                           
  3166                           ;lcd44780.c: 456: _delay((unsigned long)((5)*(20000000/4000.0)));
  3167  007E' 0E19               	movlw	25
  3168  0080' 6E00'              	movwf	??_lcd_begin& (0+255),c
  3169  0082' 0E5D               	movlw	93
  3170  0084'                    u4187:
  3171  0084' FFFF               	dw	65535	; errata NOP
  3172  0086' 2EE8               	decfsz	wreg,f,c
  3173  0088' D7FD               	goto	u4187
  3174  008A' 2E00'              	decfsz	??_lcd_begin& (0+255),f,c
  3175  008C' D7FB               	goto	u4187
  3176                           
  3177                           ;lcd44780.c: 459: lcd_command(0x20 | LCD_function);
  3178  008E' 5009'              	movf	_LCD_function,w,c
  3179  0090' 0920               	iorlw	32
  3180  0092' EC00' F000'        	call	_lcd_command
  3181                           
  3182                           ;lcd44780.c: 460: _delay((unsigned long)((5)*(20000000/4000.0)));
  3183  0096' 0E19               	movlw	25
  3184  0098' 6E00'              	movwf	??_lcd_begin& (0+255),c
  3185  009A' 0E5D               	movlw	93
  3186  009C'                    u4197:
  3187  009C' FFFF               	dw	65535	; errata NOP
  3188  009E' 2EE8               	decfsz	wreg,f,c
  3189  00A0' D7FD               	goto	u4197
  3190  00A2' 2E00'              	decfsz	??_lcd_begin& (0+255),f,c
  3191  00A4' D7FB               	goto	u4197
  3192                           
  3193                           ;lcd44780.c: 464: lcd_command(0x20 | LCD_function);
  3194  00A6' 5009'              	movf	_LCD_function,w,c
  3195  00A8' 0920               	iorlw	32
  3196  00AA' EC00' F000'        	call	_lcd_command
  3197  00AE'                    l4054:
  3198  00AE' FFFF               	dw	65535	; assembler added errata NOP
  3199                           
  3200                           ;lcd44780.c: 465: }
  3201                           ;lcd44780.c: 468: lcd_command(0x20 | LCD_function);
  3202  00B0' 5009'              	movf	_LCD_function,w,c
  3203  00B2' 0920               	iorlw	32
  3204  00B4' EC00' F000'        	call	_lcd_command
  3205                           
  3206                           ;lcd44780.c: 471: LCD_ctrl = 0x04 | 0x00 | 0x00;
  3207  00B8' 0E04               	movlw	4
  3208  00BA' 6E08'              	movwf	_LCD_ctrl,c
  3209                           
  3210                           ;lcd44780.c: 472: lcd_command(0x08 | LCD_ctrl);
  3211  00BC' 5008'              	movf	_LCD_ctrl,w,c
  3212  00BE' 0908               	iorlw	8
  3213  00C0' EC00' F000'        	call	_lcd_command
  3214                           
  3215                           ;lcd44780.c: 475: lcd_command(0x01);
  3216  00C4' 0E01               	movlw	1
  3217  00C6' EC00' F000'        	call	_lcd_command
  3218                           
  3219                           ;lcd44780.c: 476: _delay((unsigned long)((2)*(20000000/4000.0)));
  3220  00CA' 0E0A               	movlw	10
  3221  00CC' 6E00'              	movwf	??_lcd_begin& (0+255),c
  3222  00CE' 0EBE               	movlw	190
  3223  00D0'                    u4207:
  3224  00D0' FFFF               	dw	65535	; errata NOP
  3225  00D2' 2EE8               	decfsz	wreg,f,c
  3226  00D4' D7FD               	goto	u4207
  3227  00D6' 2E00'              	decfsz	??_lcd_begin& (0+255),f,c
  3228  00D8' D7FB               	goto	u4207
  3229  00DA' D000               	nop2	
  3230                           
  3231                           ;lcd44780.c: 479: LCD_mode = 0x02 | 0x00;
  3232  00DC' 0E02               	movlw	2
  3233  00DE' 0100               	movlb	0	; () banked
  3234  00E0' 6F00'              	movwf	_LCD_mode& (0+255),b
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;lcd44780.c: 481: lcd_command(0x04 | LCD_mode);
  3238  00E2' 5100'              	movf	_LCD_mode& (0+255),w,b
  3239  00E4' 0904               	iorlw	4
  3240  00E6' EC00' F000'        	call	_lcd_command
  3241  00EA' 0012               	return		;funcret
  3242  00EC' FFFF               	dw	65535	; errata NOP
  3243  00EE'                    __end_of_lcd_begin:
  3244                           	opt stack 0
  3245                           tblptru	equ	0xFF8
  3246                           tblptrh	equ	0xFF7
  3247                           tblptrl	equ	0xFF6
  3248                           tablat	equ	0xFF5
  3249                           intcon	equ	0xFF2
  3250                           intcon2	equ	0xFF1
  3251                           postinc0	equ	0xFEE
  3252                           wreg	equ	0xFE8
  3253                           postdec1	equ	0xFE5
  3254                           fsr1l	equ	0xFE1
  3255                           status	equ	0xFD8
  3256                           
  3257 ;; *************** function _format_double *****************
  3258 ;; Defined at:
  3259 ;;		line 81 in file "lib/format.c"
  3260 ;; Parameters:    Size  Location     Type
  3261 ;;  num             3   42[BANK0 ] unsigned char 
  3262 ;; Auto vars:     Size  Location     Type
  3263 ;;  weight          3   51[BANK0 ] unsigned char 
  3264 ;;  m               2   56[BANK0 ] short 
  3265 ;;  digit           2   54[BANK0 ] short 
  3266 ;; Return value:  Size  Location     Type
  3267 ;;		None               void
  3268 ;; Registers used:
  3269 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3270 ;; Tracked objects:
  3271 ;;		On entry : 0/0
  3272 ;;		On exit  : 0/0
  3273 ;;		Unchanged: 0/0
  3274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3275 ;;      Params:         0       3       0       0       0       0       0
  3276 ;;      Locals:         0      13       0       0       0       0       0
  3277 ;;      Temps:          0       0       0       0       0       0       0
  3278 ;;      Totals:         0      16       0       0       0       0       0
  3279 ;;Total ram usage:       16 bytes
  3280 ;; Hardware stack levels used:    1
  3281 ;; Hardware stack levels required when called:    7
  3282 ;; This function calls:
  3283 ;;		___awtoft
  3284 ;;		___ftdiv
  3285 ;;		___ftge
  3286 ;;		___ftmul
  3287 ;;		___ftsub
  3288 ;;		___fttol
  3289 ;;		_buffer_putch
  3290 ;;		_floor
  3291 ;;		_log10
  3292 ;;		_pow
  3293 ;; This function is called by:
  3294 ;;		_main
  3295 ;; This function uses a non-reentrant model
  3296 ;;
  3297                           
  3298                           	psect	text11
  3299  0000'                    __ptext11:
  3300                           	opt stack 0
  3301  0000'                    _format_double:
  3302                           	opt stack 23
  3303                           
  3304                           ;incstack = 0
  3305  0000' FFFF               	dw	65535
  3306                           
  3307                           ;format.c: 82: short m = (short)log10(num);
  3308  0002' C02A' F04E'        	movff	format_double@num,log10@x
  3309  0006' C02B' F04F'        	movff	format_double@num+1,log10@x+1
  3310  000A' C02C' F050'        	movff	format_double@num+2,log10@x+2
  3311  000E' EC00' F000'        	call	_log10	;wreg free
  3312  0012' C04E' F054'        	movff	?_log10,___fttol@f1
  3313  0016' C04F' F055'        	movff	?_log10+1,___fttol@f1+1
  3314  001A' C050' F056'        	movff	?_log10+2,___fttol@f1+2
  3315  001E' EC00' F000'        	call	___fttol	;wreg free
  3316  0022' C054' F038'        	movff	?___fttol,format_double@m
  3317  0026' C055' F039'        	movff	?___fttol+1,format_double@m+1
  3318                           
  3319                           ;format.c: 83: short digit;
  3320                           ;format.c: 86: while(num > 0 + (3.05176e-05)) {
  3321  002A' D07F               	goto	l4086
  3322  002C'                    l4068:
  3323  002C' FFFF               	dw	65535	; assembler added errata NOP
  3324                           
  3325                           ;format.c: 87: double weight = pow(10.0l, m);
  3326  002E' C038' F015'        	movff	format_double@m,___awtoft@c
  3327  0032' C039' F016'        	movff	format_double@m+1,___awtoft@c+1
  3328  0036' EC00' F000'        	call	___awtoft	;wreg free
  3329  003A' C015' F02D'        	movff	?___awtoft,_format_double$1324
  3330  003E' C016' F02E'        	movff	?___awtoft+1,_format_double$1324+1
  3331  0042' C017' F02F'        	movff	?___awtoft+2,_format_double$1324+2
  3332                           
  3333                           ;format.c: 87: double weight = pow(10.0l, m);
  3334  0046' 0100               	movlb	0	; () banked
  3335  0048' 6B00'              	clrf	pow@x& (0+255),b
  3336  004A' 0E20               	movlw	32
  3337  004C' 6F00'              	movwf	(pow@x+1)& (0+255),b
  3338  004E' 0E41               	movlw	65
  3339  0050' 6F00'              	movwf	(pow@x+2)& (0+255),b
  3340  0052' C02D' F01C'        	movff	_format_double$1324,pow@y
  3341  0056' C02E' F01D'        	movff	_format_double$1324+1,pow@y+1
  3342  005A' C02F' F01E'        	movff	_format_double$1324+2,pow@y+2
  3343  005E' EC00' F000'        	call	_pow	;wreg free
  3344  0062' C019' F033'        	movff	?_pow,format_double@weight
  3345  0066' C01A' F034'        	movff	?_pow+1,format_double@weight+1
  3346  006A' C01B' F035'        	movff	?_pow+2,format_double@weight+2
  3347                           
  3348                           ; BSR set to: 0
  3349                           ;format.c: 88: digit = (short)floor(num / weight);
  3350  006E' C033' F018'        	movff	format_double@weight,___ftdiv@f2
  3351  0072' C034' F019'        	movff	format_double@weight+1,___ftdiv@f2+1
  3352  0076' C035' F01A'        	movff	format_double@weight+2,___ftdiv@f2+2
  3353  007A' C02A' F015'        	movff	format_double@num,___ftdiv@f1
  3354  007E' C02B' F016'        	movff	format_double@num+1,___ftdiv@f1+1
  3355  0082' C02C' F017'        	movff	format_double@num+2,___ftdiv@f1+2
  3356  0086' EC00' F000'        	call	___ftdiv	;wreg free
  3357  008A' C015' F008'        	movff	?___ftdiv,floor@x
  3358  008E' C016' F009'        	movff	?___ftdiv+1,floor@x+1
  3359  0092' C017' F00A'        	movff	?___ftdiv+2,floor@x+2
  3360  0096' EC00' F000'        	call	_floor	;wreg free
  3361  009A' C008' F030'        	movff	?_floor,_format_double$1325
  3362  009E' C009' F031'        	movff	?_floor+1,_format_double$1325+1
  3363  00A2' C00A' F032'        	movff	?_floor+2,_format_double$1325+2
  3364                           
  3365                           ;format.c: 88: digit = (short)floor(num / weight);
  3366  00A6' C030' F054'        	movff	_format_double$1325,___fttol@f1
  3367  00AA' C031' F055'        	movff	_format_double$1325+1,___fttol@f1+1
  3368  00AE' C032' F056'        	movff	_format_double$1325+2,___fttol@f1+2
  3369  00B2' EC00' F000'        	call	___fttol	;wreg free
  3370  00B6' C054' F036'        	movff	?___fttol,format_double@digit
  3371  00BA' C055' F037'        	movff	?___fttol+1,format_double@digit+1
  3372                           
  3373                           ;format.c: 89: num -= (digit * weight);
  3374  00BE' C02A' F03F'        	movff	format_double@num,___ftsub@f1
  3375  00C2' C02B' F040'        	movff	format_double@num+1,___ftsub@f1+1
  3376  00C6' C02C' F041'        	movff	format_double@num+2,___ftsub@f1+2
  3377  00CA' C033' F027'        	movff	format_double@weight,___ftmul@f2
  3378  00CE' C034' F028'        	movff	format_double@weight+1,___ftmul@f2+1
  3379  00D2' C035' F029'        	movff	format_double@weight+2,___ftmul@f2+2
  3380  00D6' C036' F015'        	movff	format_double@digit,___awtoft@c
  3381  00DA' C037' F016'        	movff	format_double@digit+1,___awtoft@c+1
  3382  00DE' EC00' F000'        	call	___awtoft	;wreg free
  3383  00E2' C015' F024'        	movff	?___awtoft,___ftmul@f1
  3384  00E6' C016' F025'        	movff	?___awtoft+1,___ftmul@f1+1
  3385  00EA' C017' F026'        	movff	?___awtoft+2,___ftmul@f1+2
  3386  00EE' EC00' F000'        	call	___ftmul	;wreg free
  3387  00F2' C024' F042'        	movff	?___ftmul,___ftsub@f2
  3388  00F6' C025' F043'        	movff	?___ftmul+1,___ftsub@f2+1
  3389  00FA' C026' F044'        	movff	?___ftmul+2,___ftsub@f2+2
  3390  00FE' EC00' F000'        	call	___ftsub	;wreg free
  3391  0102' C03F' F02A'        	movff	?___ftsub,format_double@num
  3392  0106' C040' F02B'        	movff	?___ftsub+1,format_double@num+1
  3393  010A' C041' F02C'        	movff	?___ftsub+2,format_double@num+2
  3394                           
  3395                           ;format.c: 90: buffer_putch((char)('0' + digit));
  3396  010E' 0100               	movlb	0	; () banked
  3397  0110' 5100'              	movf	format_double@digit& (0+255),w,b
  3398  0112' 0F30               	addlw	48
  3399  0114' EC00' F000'        	call	_buffer_putch
  3400                           
  3401                           ; BSR set to: 0
  3402                           ;format.c: 91: if(m == 0)
  3403  0118' 5100'              	movf	format_double@m& (0+255),w,b
  3404  011A' 1100'              	iorwf	(format_double@m+1)& (0+255),w,b
  3405  011C' E103               	bnz	l4084
  3406                           
  3407                           ; BSR set to: 0
  3408                           ;format.c: 92: buffer_putch('.');
  3409  011E' 0E2E               	movlw	46
  3410  0120' EC00' F000'        	call	_buffer_putch
  3411  0124'                    l4084:
  3412                           
  3413                           ; BSR set to: 0
  3414                           ;format.c: 93: m--;
  3415  0124' 0700'              	decf	format_double@m& (0+255),f,b
  3416  0126' A0D8               	btfss	status,0,c
  3417  0128' 0700'              	decf	(format_double@m+1)& (0+255),f,b
  3418  012A'                    l4086:
  3419  012A' FFFF               	dw	65535	; assembler added errata NOP
  3420  012C' 6A0D'              	clrf	___ftge@ff1,c
  3421  012E' 6A0E'              	clrf	___ftge@ff1+1,c
  3422  0130' 0E38               	movlw	56
  3423  0132' 6E0F'              	movwf	___ftge@ff1+2,c
  3424  0134' C02A' F010'        	movff	format_double@num,___ftge@ff2
  3425  0138' C02B' F011'        	movff	format_double@num+1,___ftge@ff2+1
  3426  013C' C02C' F012'        	movff	format_double@num+2,___ftge@ff2+2
  3427  0140' EC00' F000'        	call	___ftge	;wreg free
  3428  0144' B0D8               	btfsc	status,0,c
  3429  0146' 0012               	return		;funcret
  3430  0148' FFFF               	dw	65535	; assembler added errata NOP
  3431  014A' D770               	goto	l4068
  3432  014C' FFFF               	dw	65535	; errata NOP
  3433  014E'                    __end_of_format_double:
  3434                           	opt stack 0
  3435                           tblptru	equ	0xFF8
  3436                           tblptrh	equ	0xFF7
  3437                           tblptrl	equ	0xFF6
  3438                           tablat	equ	0xFF5
  3439                           intcon	equ	0xFF2
  3440                           intcon2	equ	0xFF1
  3441                           postinc0	equ	0xFEE
  3442                           wreg	equ	0xFE8
  3443                           postdec1	equ	0xFE5
  3444                           fsr1l	equ	0xFE1
  3445                           status	equ	0xFD8
  3446                           
  3447 ;; *************** function _pow *****************
  3448 ;; Defined at:
  3449 ;;		line 5 in file "/opt/microchip/xc8/v1.34/sources/common/pow.c"
  3450 ;; Parameters:    Size  Location     Type
  3451 ;;  x               3   25[BANK0 ] short 
  3452 ;;  y               3   28[BANK0 ] short 
  3453 ;; Auto vars:     Size  Location     Type
  3454 ;;  yi              4   38[BANK0 ] unsigned long 
  3455 ;;  sign            1   37[BANK0 ] unsigned char 
  3456 ;; Return value:  Size  Location     Type
  3457 ;;                  3   25[BANK0 ] unsigned char 
  3458 ;; Registers used:
  3459 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3460 ;; Tracked objects:
  3461 ;;		On entry : F/0
  3462 ;;		On exit  : F/0
  3463 ;;		Unchanged: 0/0
  3464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3465 ;;      Params:         0       6       0       0       0       0       0
  3466 ;;      Locals:         0      11       0       0       0       0       0
  3467 ;;      Temps:          0       0       0       0       0       0       0
  3468 ;;      Totals:         0      17       0       0       0       0       0
  3469 ;;Total ram usage:       17 bytes
  3470 ;; Hardware stack levels used:    1
  3471 ;; Hardware stack levels required when called:    6
  3472 ;; This function calls:
  3473 ;;		___ftge
  3474 ;;		___ftmul
  3475 ;;		___ftneg
  3476 ;;		___fttol
  3477 ;;		___lltoft
  3478 ;;		_exp
  3479 ;;		_log
  3480 ;; This function is called by:
  3481 ;;		_format_double
  3482 ;; This function uses a non-reentrant model
  3483 ;;
  3484                           
  3485                           	psect	text12
  3486  0000'                    __ptext12:
  3487                           	opt stack 0
  3488  0000'                    _pow:
  3489                           	opt stack 23
  3490                           
  3491                           ;incstack = 0
  3492  0000' FFFF               	dw	65535
  3493                           
  3494                           ; BSR set to: 0
  3495  0002' 6B00'              	clrf	pow@sign& (0+255),b
  3496                           
  3497                           ; BSR set to: 0
  3498  0004' 5100'              	movf	pow@x& (0+255),w,b
  3499  0006' 1100'              	iorwf	(pow@x+1)& (0+255),w,b
  3500  0008' 1100'              	iorwf	(pow@x+2)& (0+255),w,b
  3501  000A' E10D               	bnz	l3984
  3502                           
  3503                           ; BSR set to: 0
  3504  000C' 6A0D'              	clrf	___ftge@ff1,c
  3505  000E' 6A0E'              	clrf	___ftge@ff1+1,c
  3506  0010' 6A0F'              	clrf	___ftge@ff1+2,c
  3507  0012' C01C' F010'        	movff	pow@y,___ftge@ff2
  3508  0016' C01D' F011'        	movff	pow@y+1,___ftge@ff2+1
  3509  001A' C01E' F012'        	movff	pow@y+2,___ftge@ff2+2
  3510  001E' EC00' F000'        	call	___ftge	;wreg free
  3511  0022' 0100               	movlb	0	; () banked
  3512  0024' D030               	goto	l3994
  3513  0026'                    l3984:
  3514                           
  3515                           ; BSR set to: 0
  3516  0026' 5100'              	movf	pow@y& (0+255),w,b
  3517  0028' 1100'              	iorwf	(pow@y+1)& (0+255),w,b
  3518  002A' 1100'              	iorwf	(pow@y+2)& (0+255),w,b
  3519  002C' E106               	bnz	l3990
  3520                           
  3521                           ; BSR set to: 0
  3522  002E' 6B00'              	clrf	?_pow& (0+255),b
  3523  0030' 0E80               	movlw	128
  3524  0032' 6F00'              	movwf	(?_pow+1)& (0+255),b
  3525  0034' 0E3F               	movlw	63
  3526  0036' 6F00'              	movwf	(?_pow+2)& (0+255),b
  3527  0038' D085               	goto	l1065
  3528  003A'                    l3990:
  3529                           
  3530                           ; BSR set to: 0
  3531  003A' AF00'              	btfss	(pow@x+2)& (0+255),7,b
  3532  003C' D03A               	goto	l4000
  3533                           
  3534                           ; BSR set to: 0
  3535  003E' C01C' F054'        	movff	pow@y,___fttol@f1
  3536  0042' C01D' F055'        	movff	pow@y+1,___fttol@f1+1
  3537  0046' C01E' F056'        	movff	pow@y+2,___fttol@f1+2
  3538  004A' EC00' F000'        	call	___fttol	;wreg free
  3539  004E' C054' F026'        	movff	?___fttol,pow@yi
  3540  0052' C055' F027'        	movff	?___fttol+1,pow@yi+1
  3541  0056' C056' F028'        	movff	?___fttol+2,pow@yi+2
  3542  005A' C057' F029'        	movff	?___fttol+3,pow@yi+3
  3543  005E' C026' F015'        	movff	pow@yi,___lltoft@c
  3544  0062' C027' F016'        	movff	pow@yi+1,___lltoft@c+1
  3545  0066' C028' F017'        	movff	pow@yi+2,___lltoft@c+2
  3546  006A' C029' F018'        	movff	pow@yi+3,___lltoft@c+3
  3547  006E' EC00' F000'        	call	___lltoft	;wreg free
  3548  0072' 0100               	movlb	0	; () banked
  3549  0074' 5100'              	movf	pow@y& (0+255),w,b
  3550  0076' 1815'              	xorwf	?___lltoft,w,c
  3551  0078' E106               	bnz	u3900
  3552  007A' 5100'              	movf	(pow@y+1)& (0+255),w,b
  3553  007C' 1816'              	xorwf	?___lltoft+1,w,c
  3554  007E' E103               	bnz	u3900
  3555  0080' 5100'              	movf	(pow@y+2)& (0+255),w,b
  3556  0082' 1817'              	xorwf	?___lltoft+2,w,c
  3557  0084' E005               	bz	l3996
  3558  0086'                    u3900:
  3559  0086'                    l3994:
  3560  0086' FFFF               	dw	65535	; assembler added errata NOP
  3561                           
  3562                           ; BSR set to: 0
  3563  0088' 6B00'              	clrf	?_pow& (0+255),b
  3564  008A' 6B00'              	clrf	(?_pow+1)& (0+255),b
  3565  008C' 6B00'              	clrf	(?_pow+2)& (0+255),b
  3566  008E' D05A               	goto	l1065
  3567  0090'                    l3996:
  3568                           
  3569                           ; BSR set to: 0
  3570  0090' 5100'              	movf	pow@yi& (0+255),w,b
  3571  0092' 0B01               	andlw	1
  3572  0094' 6F00'              	movwf	pow@sign& (0+255),b
  3573                           
  3574                           ; BSR set to: 0
  3575  0096' C019' F00D'        	movff	pow@x,___ftneg@f1
  3576  009A' C01A' F00E'        	movff	pow@x+1,___ftneg@f1+1
  3577  009E' C01B' F00F'        	movff	pow@x+2,___ftneg@f1+2
  3578  00A2' EC00' F000'        	call	___ftneg	;wreg free
  3579  00A6' C00D' F019'        	movff	?___ftneg,pow@x
  3580  00AA' C00E' F01A'        	movff	?___ftneg+1,pow@x+1
  3581  00AE' C00F' F01B'        	movff	?___ftneg+2,pow@x+2
  3582  00B2'                    l4000:
  3583  00B2' FFFF               	dw	65535	; assembler added errata NOP
  3584                           
  3585                           ; BSR set to: 0
  3586  00B4' C019' F049'        	movff	pow@x,log@x
  3587  00B8' C01A' F04A'        	movff	pow@x+1,log@x+1
  3588  00BC' C01B' F04B'        	movff	pow@x+2,log@x+2
  3589  00C0' EC00' F000'        	call	_log	;wreg free
  3590  00C4' C049' F01F'        	movff	?_log,_pow$1327
  3591  00C8' C04A' F020'        	movff	?_log+1,_pow$1327+1
  3592  00CC' C04B' F021'        	movff	?_log+2,_pow$1327+2
  3593  00D0' C01F' F024'        	movff	_pow$1327,___ftmul@f1
  3594  00D4' C020' F025'        	movff	_pow$1327+1,___ftmul@f1+1
  3595  00D8' C021' F026'        	movff	_pow$1327+2,___ftmul@f1+2
  3596  00DC' C01C' F027'        	movff	pow@y,___ftmul@f2
  3597  00E0' C01D' F028'        	movff	pow@y+1,___ftmul@f2+1
  3598  00E4' C01E' F029'        	movff	pow@y+2,___ftmul@f2+2
  3599  00E8' EC00' F000'        	call	___ftmul	;wreg free
  3600  00EC' C024' F022'        	movff	?___ftmul,_pow$1328
  3601  00F0' C025' F023'        	movff	?___ftmul+1,_pow$1328+1
  3602  00F4' C026' F024'        	movff	?___ftmul+2,_pow$1328+2
  3603  00F8' C022' F010'        	movff	_pow$1328,exp@x
  3604  00FC' C023' F011'        	movff	_pow$1328+1,exp@x+1
  3605  0100' C024' F012'        	movff	_pow$1328+2,exp@x+2
  3606  0104' EC00' F000'        	call	_exp	;wreg free
  3607  0108' C010' F019'        	movff	?_exp,pow@x
  3608  010C' C011' F01A'        	movff	?_exp+1,pow@x+1
  3609  0110' C012' F01B'        	movff	?_exp+2,pow@x+2
  3610  0114' 0100               	movlb	0	; () banked
  3611  0116' 5100'              	movf	pow@sign& (0+255),w,b
  3612  0118' E00F               	bz	l1069
  3613                           
  3614                           ; BSR set to: 0
  3615  011A' C019' F00D'        	movff	pow@x,___ftneg@f1
  3616  011E' C01A' F00E'        	movff	pow@x+1,___ftneg@f1+1
  3617  0122' C01B' F00F'        	movff	pow@x+2,___ftneg@f1+2
  3618  0126' EC00' F000'        	call	___ftneg	;wreg free
  3619  012A' C00D' F019'        	movff	?___ftneg,?_pow
  3620  012E' C00E' F01A'        	movff	?___ftneg+1,?_pow+1
  3621  0132' C00F' F01B'        	movff	?___ftneg+2,?_pow+2
  3622  0136' D006               	goto	l1065
  3623  0138'                    l1069:
  3624                           
  3625                           ; BSR set to: 0
  3626  0138' C019' F019'        	movff	pow@x,?_pow
  3627  013C' C01A' F01A'        	movff	pow@x+1,?_pow+1
  3628  0140' C01B' F01B'        	movff	pow@x+2,?_pow+2
  3629  0144'                    l1065:
  3630  0144' FFFF               	dw	65535	; assembler added errata NOP
  3631                           
  3632                           ; BSR set to: 0
  3633  0146' 0012               	return		;funcret
  3634  0148' FFFF               	dw	65535	; errata NOP
  3635  014A'                    __end_of_pow:
  3636                           	opt stack 0
  3637                           tblptru	equ	0xFF8
  3638                           tblptrh	equ	0xFF7
  3639                           tblptrl	equ	0xFF6
  3640                           tablat	equ	0xFF5
  3641                           intcon	equ	0xFF2
  3642                           intcon2	equ	0xFF1
  3643                           postinc0	equ	0xFEE
  3644                           wreg	equ	0xFE8
  3645                           postdec1	equ	0xFE5
  3646                           fsr1l	equ	0xFE1
  3647                           status	equ	0xFD8
  3648                           
  3649 ;; *************** function _exp *****************
  3650 ;; Defined at:
  3651 ;;		line 12 in file "/opt/microchip/xc8/v1.34/sources/common/exp.c"
  3652 ;; Parameters:    Size  Location     Type
  3653 ;;  x               3   16[BANK0 ] unsigned char 
  3654 ;; Auto vars:     Size  Location     Type
  3655 ;;  exponent        2   22[BANK0 ] int 
  3656 ;;  sign            1   24[BANK0 ] unsigned char 
  3657 ;; Return value:  Size  Location     Type
  3658 ;;                  3   16[BANK0 ] unsigned char 
  3659 ;; Registers used:
  3660 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3661 ;; Tracked objects:
  3662 ;;		On entry : 0/0
  3663 ;;		On exit  : 0/0
  3664 ;;		Unchanged: 0/0
  3665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3666 ;;      Params:         0       3       0       0       0       0       0
  3667 ;;      Locals:         0       6       0       0       0       0       0
  3668 ;;      Temps:          0       0       0       0       0       0       0
  3669 ;;      Totals:         0       9       0       0       0       0       0
  3670 ;;Total ram usage:        9 bytes
  3671 ;; Hardware stack levels used:    1
  3672 ;; Hardware stack levels required when called:    5
  3673 ;; This function calls:
  3674 ;;		___awtoft
  3675 ;;		___ftdiv
  3676 ;;		___ftge
  3677 ;;		___ftmul
  3678 ;;		___ftneg
  3679 ;;		___ftsub
  3680 ;;		___fttol
  3681 ;;		_eval_poly
  3682 ;;		_floor
  3683 ;;		_ldexp
  3684 ;; This function is called by:
  3685 ;;		_pow
  3686 ;; This function uses a non-reentrant model
  3687 ;;
  3688                           
  3689                           	psect	text13
  3690  0000'                    __ptext13:
  3691                           	opt stack 0
  3692  0000'                    _exp:
  3693                           	opt stack 23
  3694                           
  3695                           ; BSR set to: 0
  3696                           ;incstack = 0
  3697  0000' FFFF               	dw	65535
  3698  0002' 0100               	movlb	0	; () banked
  3699  0004' 5100'              	movf	exp@x& (0+255),w,b
  3700  0006' 1100'              	iorwf	(exp@x+1)& (0+255),w,b
  3701  0008' 1100'              	iorwf	(exp@x+2)& (0+255),w,b
  3702  000A' E105               	bnz	l3864
  3703                           
  3704                           ; BSR set to: 0
  3705  000C' 6B00'              	clrf	?_exp& (0+255),b
  3706  000E' 0E80               	movlw	128
  3707  0010' 6F00'              	movwf	(?_exp+1)& (0+255),b
  3708  0012' 0E3F               	movlw	63
  3709  0014' D013               	goto	L4
  3710  0016'                    l3864:
  3711                           
  3712                           ; BSR set to: 0
  3713  0016' 0E72               	movlw	114
  3714  0018' 6E0D'              	movwf	___ftge@ff1,c
  3715  001A' 0E31               	movlw	49
  3716  001C' 6E0E'              	movwf	___ftge@ff1+1,c
  3717  001E' 0E44               	movlw	68
  3718  0020' 6E0F'              	movwf	___ftge@ff1+2,c
  3719  0022' C010' F010'        	movff	exp@x,___ftge@ff2
  3720  0026' C011' F011'        	movff	exp@x+1,___ftge@ff2+1
  3721  002A' C012' F012'        	movff	exp@x+2,___ftge@ff2+2
  3722  002E' EC00' F000'        	call	___ftge	;wreg free
  3723  0032' E207               	bc	l3870
  3724  0034' 0100               	movlb	0	; () banked
  3725  0036' 6900'              	setf	?_exp& (0+255),b
  3726  0038' 0E7F               	movlw	127
  3727  003A' 6F00'              	movwf	(?_exp+1)& (0+255),b
  3728  003C'                    L4:
  3729  003C' FFFF               	dw	65535	; assembler added errata NOP
  3730  003E' 6F00'              	movwf	(?_exp+2)& (0+255),b
  3731  0040' D0B9               	goto	l1091
  3732  0042'                    l3870:
  3733  0042' C010' F00D'        	movff	exp@x,___ftge@ff1
  3734  0046' C011' F00E'        	movff	exp@x+1,___ftge@ff1+1
  3735  004A' C012' F00F'        	movff	exp@x+2,___ftge@ff1+2
  3736  004E' 0E49               	movlw	73
  3737  0050' 6E10'              	movwf	___ftge@ff2,c
  3738  0052' 0E3A               	movlw	58
  3739  0054' 6E11'              	movwf	___ftge@ff2+1,c
  3740  0056' 0EC4               	movlw	196
  3741  0058' 6E12'              	movwf	___ftge@ff2+2,c
  3742  005A' EC00' F000'        	call	___ftge	;wreg free
  3743  005E' E202               	bc	l3874
  3744  0060' 0100               	movlb	0	; () banked
  3745  0062' D088               	goto	l3892
  3746  0064'                    l3874:
  3747  0064' 0100               	movlb	0	; () banked
  3748  0066' 0E01               	movlw	1
  3749  0068' AF00'              	btfss	(exp@x+2)& (0+255),7,b
  3750  006A' 0E00               	movlw	0
  3751  006C' 6F00'              	movwf	exp@sign& (0+255),b
  3752                           
  3753                           ; BSR set to: 0
  3754  006E' 5100'              	movf	exp@sign& (0+255),w,b
  3755  0070' E00E               	bz	l1094
  3756                           
  3757                           ; BSR set to: 0
  3758  0072' C010' F00D'        	movff	exp@x,___ftneg@f1
  3759  0076' C011' F00E'        	movff	exp@x+1,___ftneg@f1+1
  3760  007A' C012' F00F'        	movff	exp@x+2,___ftneg@f1+2
  3761  007E' EC00' F000'        	call	___ftneg	;wreg free
  3762  0082' C00D' F010'        	movff	?___ftneg,exp@x
  3763  0086' C00E' F011'        	movff	?___ftneg+1,exp@x+1
  3764  008A' C00F' F012'        	movff	?___ftneg+2,exp@x+2
  3765  008E'                    l1094:
  3766                           
  3767                           ; BSR set to: 0
  3768  008E' C010' F024'        	movff	exp@x,___ftmul@f1
  3769  0092' C011' F025'        	movff	exp@x+1,___ftmul@f1+1
  3770  0096' C012' F026'        	movff	exp@x+2,___ftmul@f1+2
  3771  009A' 0EAA               	movlw	170
  3772  009C' 6E27'              	movwf	___ftmul@f2,c
  3773  009E' 0EB8               	movlw	184
  3774  00A0' 6E28'              	movwf	___ftmul@f2+1,c
  3775  00A2' 0E3F               	movlw	63
  3776  00A4' 6E29'              	movwf	___ftmul@f2+2,c
  3777  00A6' EC00' F000'        	call	___ftmul	;wreg free
  3778  00AA' C024' F010'        	movff	?___ftmul,exp@x
  3779  00AE' C025' F011'        	movff	?___ftmul+1,exp@x+1
  3780  00B2' C026' F012'        	movff	?___ftmul+2,exp@x+2
  3781  00B6' C010' F008'        	movff	exp@x,floor@x
  3782  00BA' C011' F009'        	movff	exp@x+1,floor@x+1
  3783  00BE' C012' F00A'        	movff	exp@x+2,floor@x+2
  3784  00C2' EC00' F000'        	call	_floor	;wreg free
  3785  00C6' C008' F013'        	movff	?_floor,_exp$1329
  3786  00CA' C009' F014'        	movff	?_floor+1,_exp$1329+1
  3787  00CE' C00A' F015'        	movff	?_floor+2,_exp$1329+2
  3788  00D2' C013' F054'        	movff	_exp$1329,___fttol@f1
  3789  00D6' C014' F055'        	movff	_exp$1329+1,___fttol@f1+1
  3790  00DA' C015' F056'        	movff	_exp$1329+2,___fttol@f1+2
  3791  00DE' EC00' F000'        	call	___fttol	;wreg free
  3792  00E2' C054' F016'        	movff	?___fttol,exp@exponent
  3793  00E6' C055' F017'        	movff	?___fttol+1,exp@exponent+1
  3794  00EA' C010' F03F'        	movff	exp@x,___ftsub@f1
  3795  00EE' C011' F040'        	movff	exp@x+1,___ftsub@f1+1
  3796  00F2' C012' F041'        	movff	exp@x+2,___ftsub@f1+2
  3797  00F6' C016' F015'        	movff	exp@exponent,___awtoft@c
  3798  00FA' C017' F016'        	movff	exp@exponent+1,___awtoft@c+1
  3799  00FE' EC00' F000'        	call	___awtoft	;wreg free
  3800  0102' C015' F042'        	movff	?___awtoft,___ftsub@f2
  3801  0106' C016' F043'        	movff	?___awtoft+1,___ftsub@f2+1
  3802  010A' C017' F044'        	movff	?___awtoft+2,___ftsub@f2+2
  3803  010E' EC00' F000'        	call	___ftsub	;wreg free
  3804  0112' C03F' F010'        	movff	?___ftsub,exp@x
  3805  0116' C040' F011'        	movff	?___ftsub+1,exp@x+1
  3806  011A' C041' F012'        	movff	?___ftsub+2,exp@x+2
  3807  011E' C010' F03F'        	movff	exp@x,eval_poly@x
  3808  0122' C011' F040'        	movff	exp@x+1,eval_poly@x+1
  3809  0126' C012' F041'        	movff	exp@x+2,eval_poly@x+2
  3810  012A' 0E00'              	movlw	low exp@coeff
  3811  012C' 6E42'              	movwf	eval_poly@d,c
  3812  012E' 6A44'              	clrf	eval_poly@n+1,c
  3813  0130' 0E09               	movlw	9
  3814  0132' 6E43'              	movwf	eval_poly@n,c
  3815  0134' EC00' F000'        	call	_eval_poly	;wreg free
  3816  0138' C03F' F049'        	movff	?_eval_poly,ldexp@value
  3817  013C' C040' F04A'        	movff	?_eval_poly+1,ldexp@value+1
  3818  0140' C041' F04B'        	movff	?_eval_poly+2,ldexp@value+2
  3819  0144' C016' F04C'        	movff	exp@exponent,ldexp@newexp
  3820  0148' C017' F04D'        	movff	exp@exponent+1,ldexp@newexp+1
  3821  014C' EC00' F000'        	call	_ldexp	;wreg free
  3822  0150' C049' F010'        	movff	?_ldexp,exp@x
  3823  0154' C04A' F011'        	movff	?_ldexp+1,exp@x+1
  3824  0158' C04B' F012'        	movff	?_ldexp+2,exp@x+2
  3825  015C' 0100               	movlb	0	; () banked
  3826  015E' 5100'              	movf	exp@sign& (0+255),w,b
  3827  0160' E023               	bz	l1095
  3828                           
  3829                           ; BSR set to: 0
  3830  0162' 2900'              	incf	exp@x& (0+255),w,b
  3831  0164' E10C               	bnz	l3894
  3832  0166' 0E7F               	movlw	127
  3833  0168' 1900'              	xorwf	(exp@x+1)& (0+255),w,b
  3834  016A' E109               	bnz	l3894
  3835  016C' 0E7F               	movlw	127
  3836  016E' 1900'              	xorwf	(exp@x+2)& (0+255),w,b
  3837  0170' A4D8               	btfss	status,2,c
  3838  0172' D005               	goto	l3894
  3839  0174'                    l3892:
  3840  0174' FFFF               	dw	65535	; assembler added errata NOP
  3841                           
  3842                           ; BSR set to: 0
  3843  0176' 6B00'              	clrf	?_exp& (0+255),b
  3844  0178' 6B00'              	clrf	(?_exp+1)& (0+255),b
  3845  017A' 6B00'              	clrf	(?_exp+2)& (0+255),b
  3846  017C' D01B               	goto	l1091
  3847  017E'                    l3894:
  3848  017E' FFFF               	dw	65535	; assembler added errata NOP
  3849                           
  3850                           ; BSR set to: 0
  3851  0180' 6A15'              	clrf	___ftdiv@f1,c
  3852  0182' 0E80               	movlw	128
  3853  0184' 6E16'              	movwf	___ftdiv@f1+1,c
  3854  0186' 0E3F               	movlw	63
  3855  0188' 6E17'              	movwf	___ftdiv@f1+2,c
  3856  018A' C010' F018'        	movff	exp@x,___ftdiv@f2
  3857  018E' C011' F019'        	movff	exp@x+1,___ftdiv@f2+1
  3858  0192' C012' F01A'        	movff	exp@x+2,___ftdiv@f2+2
  3859  0196' EC00' F000'        	call	___ftdiv	;wreg free
  3860  019A' C015' F010'        	movff	?___ftdiv,?_exp
  3861  019E' C016' F011'        	movff	?___ftdiv+1,?_exp+1
  3862  01A2' C017' F012'        	movff	?___ftdiv+2,?_exp+2
  3863  01A6' D006               	goto	l1091
  3864  01A8'                    l1095:
  3865                           
  3866                           ; BSR set to: 0
  3867  01A8' C010' F010'        	movff	exp@x,?_exp
  3868  01AC' C011' F011'        	movff	exp@x+1,?_exp+1
  3869  01B0' C012' F012'        	movff	exp@x+2,?_exp+2
  3870  01B4'                    l1091:
  3871  01B4' FFFF               	dw	65535	; assembler added errata NOP
  3872  01B6' 0012               	return		;funcret
  3873  01B8' FFFF               	dw	65535	; errata NOP
  3874  01BA'                    __end_of_exp:
  3875                           	opt stack 0
  3876                           tblptru	equ	0xFF8
  3877                           tblptrh	equ	0xFF7
  3878                           tblptrl	equ	0xFF6
  3879                           tablat	equ	0xFF5
  3880                           intcon	equ	0xFF2
  3881                           intcon2	equ	0xFF1
  3882                           postinc0	equ	0xFEE
  3883                           wreg	equ	0xFE8
  3884                           postdec1	equ	0xFE5
  3885                           fsr1l	equ	0xFE1
  3886                           status	equ	0xFD8
  3887                           
  3888 ;; *************** function _ldexp *****************
  3889 ;; Defined at:
  3890 ;;		line 277 in file "/opt/microchip/xc8/v1.34/sources/common/frexp.c"
  3891 ;; Parameters:    Size  Location     Type
  3892 ;;  value           3   73[COMRAM] unsigned char 
  3893 ;;  newexp          2   76[COMRAM] int 
  3894 ;; Auto vars:     Size  Location     Type
  3895 ;;		None
  3896 ;; Return value:  Size  Location     Type
  3897 ;;                  3   73[COMRAM] int 
  3898 ;; Registers used:
  3899 ;;		wreg, status,2, status,0
  3900 ;; Tracked objects:
  3901 ;;		On entry : 0/0
  3902 ;;		On exit  : 0/0
  3903 ;;		Unchanged: 0/0
  3904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3905 ;;      Params:         5       0       0       0       0       0       0
  3906 ;;      Locals:         0       0       0       0       0       0       0
  3907 ;;      Temps:          2       0       0       0       0       0       0
  3908 ;;      Totals:         7       0       0       0       0       0       0
  3909 ;;Total ram usage:        7 bytes
  3910 ;; Hardware stack levels used:    1
  3911 ;; Hardware stack levels required when called:    2
  3912 ;; This function calls:
  3913 ;;		Nothing
  3914 ;; This function is called by:
  3915 ;;		_exp
  3916 ;; This function uses a non-reentrant model
  3917 ;;
  3918                           
  3919                           	psect	text14
  3920  0000'                    __ptext14:
  3921                           	opt stack 0
  3922  0000'                    _ldexp:
  3923                           	opt stack 25
  3924                           
  3925                           ;incstack = 0
  3926  0000' FFFF               	dw	65535
  3927  0002' 5049'              	movf	ldexp@value,w,c
  3928  0004' 104A'              	iorwf	ldexp@value+1,w,c
  3929  0006' 104B'              	iorwf	ldexp@value+2,w,c
  3930  0008' E013               	bz	l2620
  3931  000A' 504B'              	movf	ldexp@value+2,w,c
  3932  000C' 0B7F               	andlw	127
  3933  000E' 6E00'              	movwf	??_ldexp& (0+255),c
  3934  0010' 6A00'              	clrf	(??_ldexp+1)& (0+255),c
  3935  0012' 90D8               	bcf	status,0,c
  3936  0014' 364E'              	rlcf	??_ldexp,f,c
  3937  0016' 364F'              	rlcf	??_ldexp+1,f,c
  3938  0018' 504E'              	movf	??_ldexp,w,c
  3939  001A' 264C'              	addwf	ldexp@newexp,f,c
  3940  001C' 504F'              	movf	??_ldexp+1,w,c
  3941  001E' 224D'              	addwfc	ldexp@newexp+1,f,c
  3942  0020' 0E01               	movlw	1
  3943  0022' AE4A'              	btfss	ldexp@value+1,7,c
  3944  0024' 0E00               	movlw	0
  3945  0026' 264C'              	addwf	ldexp@newexp,f,c
  3946  0028' 0E00               	movlw	0
  3947  002A' 224D'              	addwfc	ldexp@newexp+1,f,c
  3948  002C' AE4D'              	btfss	ldexp@newexp+1,7,c
  3949  002E' D004               	goto	l2624
  3950  0030'                    l2620:
  3951  0030' 6A49'              	clrf	?_ldexp,c
  3952  0032' 6A4A'              	clrf	?_ldexp+1,c
  3953  0034' 6A4B'              	clrf	?_ldexp+2,c
  3954  0036' D02E               	goto	l828
  3955  0038'                    l2624:
  3956  0038' FFFF               	dw	65535	; assembler added errata NOP
  3957  003A' BE4D'              	btfsc	ldexp@newexp+1,7,c
  3958  003C' D010               	goto	l2638
  3959  003E' 044D'              	decf	ldexp@newexp+1,w,c
  3960  0040' E30E               	bnc	l2638
  3961  0042' AE4B'              	btfss	ldexp@value+2,7,c
  3962  0044' D005               	goto	l2634
  3963  0046' 6849'              	setf	?_ldexp,c
  3964  0048' 0E7F               	movlw	127
  3965  004A' 6E4A'              	movwf	?_ldexp+1,c
  3966  004C' 0EFF               	movlw	255
  3967  004E' D004               	goto	L5
  3968  0050'                    l2634:
  3969  0050' FFFF               	dw	65535	; assembler added errata NOP
  3970  0052' 6849'              	setf	?_ldexp,c
  3971  0054' 0E7F               	movlw	127
  3972  0056' 6E4A'              	movwf	?_ldexp+1,c
  3973  0058'                    L5:
  3974  0058' FFFF               	dw	65535	; assembler added errata NOP
  3975  005A' 6E4B'              	movwf	?_ldexp+2,c
  3976  005C' D01B               	goto	l828
  3977  005E'                    l2638:
  3978  005E' FFFF               	dw	65535	; assembler added errata NOP
  3979  0060' 344D'              	rlcf	ldexp@newexp+1,w,c
  3980  0062' 304D'              	rrcf	ldexp@newexp+1,w,c
  3981  0064' 6E00'              	movwf	(??_ldexp+1)& (0+255),c
  3982  0066' 304C'              	rrcf	ldexp@newexp,w,c
  3983  0068' 6E00'              	movwf	??_ldexp& (0+255),c
  3984  006A' 184B'              	xorwf	ldexp@value+2,w,c
  3985  006C' 0B80               	andlw	-128
  3986  006E' 184E'              	xorwf	??_ldexp,w,c
  3987  0070' 6E4B'              	movwf	ldexp@value+2,c
  3988  0072' C04C' F04E'        	movff	ldexp@newexp,??_ldexp
  3989  0076' 0E01               	movlw	1
  3990  0078' 164E'              	andwf	??_ldexp,f,c
  3991  007A' 324E'              	rrcf	??_ldexp,f,c
  3992  007C' 324E'              	rrcf	??_ldexp,f,c
  3993  007E' 504A'              	movf	ldexp@value+1,w,c
  3994  0080' 184E'              	xorwf	??_ldexp,w,c
  3995  0082' 0B7F               	andlw	-129
  3996  0084' 184E'              	xorwf	??_ldexp,w,c
  3997  0086' 6E4A'              	movwf	ldexp@value+1,c
  3998  0088' C049' F049'        	movff	ldexp@value,?_ldexp
  3999  008C' C04A' F04A'        	movff	ldexp@value+1,?_ldexp+1
  4000  0090' C04B' F04B'        	movff	ldexp@value+2,?_ldexp+2
  4001  0094'                    l828:
  4002  0094' FFFF               	dw	65535	; assembler added errata NOP
  4003  0096' 0012               	return		;funcret
  4004  0098' FFFF               	dw	65535	; errata NOP
  4005  009A'                    __end_of_ldexp:
  4006                           	opt stack 0
  4007                           tblptru	equ	0xFF8
  4008                           tblptrh	equ	0xFF7
  4009                           tblptrl	equ	0xFF6
  4010                           tablat	equ	0xFF5
  4011                           intcon	equ	0xFF2
  4012                           intcon2	equ	0xFF1
  4013                           postinc0	equ	0xFEE
  4014                           wreg	equ	0xFE8
  4015                           postdec1	equ	0xFE5
  4016                           fsr1l	equ	0xFE1
  4017                           status	equ	0xFD8
  4018                           
  4019 ;; *************** function _floor *****************
  4020 ;; Defined at:
  4021 ;;		line 13 in file "/opt/microchip/xc8/v1.34/sources/common/floor.c"
  4022 ;; Parameters:    Size  Location     Type
  4023 ;;  x               3    8[BANK0 ] int 
  4024 ;; Auto vars:     Size  Location     Type
  4025 ;;  i               3   11[BANK0 ] int 
  4026 ;;  expon           2   14[BANK0 ] int 
  4027 ;; Return value:  Size  Location     Type
  4028 ;;                  3    8[BANK0 ] int 
  4029 ;; Registers used:
  4030 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4031 ;; Tracked objects:
  4032 ;;		On entry : 0/0
  4033 ;;		On exit  : 0/0
  4034 ;;		Unchanged: 0/0
  4035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4036 ;;      Params:         0       3       0       0       0       0       0
  4037 ;;      Locals:         0       5       0       0       0       0       0
  4038 ;;      Temps:          0       0       0       0       0       0       0
  4039 ;;      Totals:         0       8       0       0       0       0       0
  4040 ;;Total ram usage:        8 bytes
  4041 ;; Hardware stack levels used:    1
  4042 ;; Hardware stack levels required when called:    4
  4043 ;; This function calls:
  4044 ;;		___altoft
  4045 ;;		___ftadd
  4046 ;;		___ftge
  4047 ;;		___fttol
  4048 ;;		_frexp
  4049 ;; This function is called by:
  4050 ;;		_format_double
  4051 ;;		_exp
  4052 ;; This function uses a non-reentrant model
  4053 ;;
  4054                           
  4055                           	psect	text15
  4056  0000'                    __ptext15:
  4057                           	opt stack 0
  4058  0000'                    _floor:
  4059                           	opt stack 23
  4060                           
  4061                           ;incstack = 0
  4062  0000' FFFF               	dw	65535
  4063  0002' C008' F00D'        	movff	floor@x,frexp@value
  4064  0006' C009' F00E'        	movff	floor@x+1,frexp@value+1
  4065  000A' C00A' F00F'        	movff	floor@x+2,frexp@value+2
  4066  000E' 0E00'              	movlw	low floor@expon
  4067  0010' 6E10'              	movwf	frexp@eptr,c
  4068  0012' EC00' F000'        	call	_frexp	;wreg free
  4069  0016' 0100               	movlb	0	; () banked
  4070  0018' AF00'              	btfss	(floor@expon+1)& (0+255),7,b
  4071  001A' D00D               	goto	l3638
  4072                           
  4073                           ; BSR set to: 0
  4074  001C' AF00'              	btfss	(floor@x+2)& (0+255),7,b
  4075  001E' D006               	goto	l795
  4076                           
  4077                           ; BSR set to: 0
  4078  0020' 6B00'              	clrf	?_floor& (0+255),b
  4079  0022' 0E80               	movlw	128
  4080  0024' 6F00'              	movwf	(?_floor+1)& (0+255),b
  4081  0026' 0EBF               	movlw	191
  4082  0028' 6F00'              	movwf	(?_floor+2)& (0+255),b
  4083  002A' D053               	goto	l796
  4084  002C'                    l795:
  4085  002C' FFFF               	dw	65535	; assembler added errata NOP
  4086                           
  4087                           ; BSR set to: 0
  4088  002E' 6B00'              	clrf	?_floor& (0+255),b
  4089  0030' 6B00'              	clrf	(?_floor+1)& (0+255),b
  4090  0032' 6B00'              	clrf	(?_floor+2)& (0+255),b
  4091  0034' D04E               	goto	l796
  4092  0036'                    l3638:
  4093  0036' FFFF               	dw	65535	; assembler added errata NOP
  4094                           
  4095                           ; BSR set to: 0
  4096  0038' 5100'              	movf	(floor@expon+1)& (0+255),w,b
  4097  003A' E103               	bnz	u3490
  4098  003C' 0E15               	movlw	21
  4099  003E' 5D00'              	subwf	floor@expon& (0+255),w,b
  4100  0040' E307               	bnc	l3642
  4101  0042'                    u3490:
  4102                           
  4103                           ; BSR set to: 0
  4104  0042' C008' F008'        	movff	floor@x,?_floor
  4105  0046' C009' F009'        	movff	floor@x+1,?_floor+1
  4106  004A' C00A' F00A'        	movff	floor@x+2,?_floor+2
  4107  004E' D041               	goto	l796
  4108  0050'                    l3642:
  4109                           
  4110                           ; BSR set to: 0
  4111  0050' C008' F054'        	movff	floor@x,___fttol@f1
  4112  0054' C009' F055'        	movff	floor@x+1,___fttol@f1+1
  4113  0058' C00A' F056'        	movff	floor@x+2,___fttol@f1+2
  4114  005C' EC00' F000'        	call	___fttol	;wreg free
  4115  0060' C054' F000'        	movff	?___fttol,___altoft@c
  4116  0064' C055' F001'        	movff	?___fttol+1,___altoft@c+1
  4117  0068' C056' F002'        	movff	?___fttol+2,___altoft@c+2
  4118  006C' C057' F003'        	movff	?___fttol+3,___altoft@c+3
  4119  0070' EC00' F000'        	call	___altoft	;wreg free
  4120  0074' C000' F00B'        	movff	?___altoft,floor@i
  4121  0078' C001' F00C'        	movff	?___altoft+1,floor@i+1
  4122  007C' C002' F00D'        	movff	?___altoft+2,floor@i+2
  4123  0080' C008' F00D'        	movff	floor@x,___ftge@ff1
  4124  0084' C009' F00E'        	movff	floor@x+1,___ftge@ff1+1
  4125  0088' C00A' F00F'        	movff	floor@x+2,___ftge@ff1+2
  4126  008C' C00B' F010'        	movff	floor@i,___ftge@ff2
  4127  0090' C00C' F011'        	movff	floor@i+1,___ftge@ff2+1
  4128  0094' C00D' F012'        	movff	floor@i+2,___ftge@ff2+2
  4129  0098' EC00' F000'        	call	___ftge	;wreg free
  4130  009C' E214               	bc	l798
  4131  009E' C00B' F033'        	movff	floor@i,___ftadd@f1
  4132  00A2' C00C' F034'        	movff	floor@i+1,___ftadd@f1+1
  4133  00A6' C00D' F035'        	movff	floor@i+2,___ftadd@f1+2
  4134  00AA' 6A36'              	clrf	___ftadd@f2,c
  4135  00AC' 0E80               	movlw	128
  4136  00AE' 6E37'              	movwf	___ftadd@f2+1,c
  4137  00B0' 0EBF               	movlw	191
  4138  00B2' 6E38'              	movwf	___ftadd@f2+2,c
  4139  00B4' EC00' F000'        	call	___ftadd	;wreg free
  4140  00B8' C033' F008'        	movff	?___ftadd,?_floor
  4141  00BC' C034' F009'        	movff	?___ftadd+1,?_floor+1
  4142  00C0' C035' F00A'        	movff	?___ftadd+2,?_floor+2
  4143  00C4' D006               	goto	l796
  4144  00C6'                    l798:
  4145  00C6' C00B' F008'        	movff	floor@i,?_floor
  4146  00CA' C00C' F009'        	movff	floor@i+1,?_floor+1
  4147  00CE' C00D' F00A'        	movff	floor@i+2,?_floor+2
  4148  00D2'                    l796:
  4149  00D2' FFFF               	dw	65535	; assembler added errata NOP
  4150  00D4' 0012               	return		;funcret
  4151  00D6' FFFF               	dw	65535	; errata NOP
  4152  00D8'                    __end_of_floor:
  4153                           	opt stack 0
  4154                           tblptru	equ	0xFF8
  4155                           tblptrh	equ	0xFF7
  4156                           tblptrl	equ	0xFF6
  4157                           tablat	equ	0xFF5
  4158                           intcon	equ	0xFF2
  4159                           intcon2	equ	0xFF1
  4160                           postinc0	equ	0xFEE
  4161                           wreg	equ	0xFE8
  4162                           postdec1	equ	0xFE5
  4163                           fsr1l	equ	0xFE1
  4164                           status	equ	0xFD8
  4165                           
  4166 ;; *************** function ___fttol *****************
  4167 ;; Defined at:
  4168 ;;		line 44 in file "/opt/microchip/xc8/v1.34/sources/common/fttol.c"
  4169 ;; Parameters:    Size  Location     Type
  4170 ;;  f1              3   84[COMRAM] float 
  4171 ;; Auto vars:     Size  Location     Type
  4172 ;;  lval            4   94[COMRAM] unsigned long 
  4173 ;;  exp1            1   98[COMRAM] unsigned char 
  4174 ;;  sign1           1   93[COMRAM] unsigned char 
  4175 ;; Return value:  Size  Location     Type
  4176 ;;                  4   84[COMRAM] long 
  4177 ;; Registers used:
  4178 ;;		wreg, status,2, status,0
  4179 ;; Tracked objects:
  4180 ;;		On entry : 0/0
  4181 ;;		On exit  : 0/0
  4182 ;;		Unchanged: 0/0
  4183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4184 ;;      Params:         4       0       0       0       0       0       0
  4185 ;;      Locals:         6       0       0       0       0       0       0
  4186 ;;      Temps:          5       0       0       0       0       0       0
  4187 ;;      Totals:        15       0       0       0       0       0       0
  4188 ;;Total ram usage:       15 bytes
  4189 ;; Hardware stack levels used:    1
  4190 ;; Hardware stack levels required when called:    2
  4191 ;; This function calls:
  4192 ;;		Nothing
  4193 ;; This function is called by:
  4194 ;;		_measure_capacitance
  4195 ;;		_measure_inductance
  4196 ;;		_format_double
  4197 ;;		_floor
  4198 ;;		_pow
  4199 ;;		_exp
  4200 ;; This function uses a non-reentrant model
  4201 ;;
  4202                           
  4203                           	psect	text16
  4204  0000'                    __ptext16:
  4205                           	opt stack 0
  4206  0000'                    ___fttol:
  4207                           	opt stack 27
  4208                           
  4209                           ;incstack = 0
  4210  0000' FFFF               	dw	65535
  4211  0002' C056' F058'        	movff	___fttol@f1+2,??___fttol
  4212  0006' 6A00'              	clrf	(??___fttol+1)& (0+255),c
  4213  0008' 6A00'              	clrf	(??___fttol+2)& (0+255),c
  4214  000A' 3455'              	rlcf	___fttol@f1+1,w,c
  4215  000C' 3600'              	rlcf	??___fttol& (0+255),f,c
  4216  000E' E301               	bnc	u3381
  4217  0010' 8000'              	bsf	(??___fttol+1)& (0+255),0,c
  4218  0012'                    u3381:
  4219  0012' 5058'              	movf	??___fttol,w,c
  4220  0014' 6E62'              	movwf	___fttol@exp1,c
  4221  0016' 5062'              	movf	___fttol@exp1,w,c
  4222  0018' E106               	bnz	l3578
  4223  001A'                    l3576:
  4224  001A' FFFF               	dw	65535	; assembler added errata NOP
  4225  001C' 6A54'              	clrf	?___fttol,c
  4226  001E' 6A55'              	clrf	?___fttol+1,c
  4227  0020' 6A56'              	clrf	?___fttol+2,c
  4228  0022' 6A57'              	clrf	?___fttol+3,c
  4229  0024' D050               	goto	l909
  4230  0026'                    l3578:
  4231  0026' 0E17               	movlw	23
  4232  0028' 6E00'              	movwf	??___fttol& (0+255),c
  4233  002A' C054' F059'        	movff	___fttol@f1,??___fttol+1
  4234  002E' C055' F05A'        	movff	___fttol@f1+1,??___fttol+2
  4235  0032' C056' F05B'        	movff	___fttol@f1+2,??___fttol+3
  4236  0036' 2858'              	incf	??___fttol,w,c
  4237  0038' 6E00'              	movwf	(??___fttol+4)& (0+255),c
  4238  003A' D005               	goto	u3400
  4239  003C'                    u3405:
  4240  003C' FFFF               	dw	65535	; assembler added errata NOP
  4241  003E' 90D8               	bcf	status,0,c
  4242  0040' 325B'              	rrcf	??___fttol+3,f,c
  4243  0042' 325A'              	rrcf	??___fttol+2,f,c
  4244  0044' 3259'              	rrcf	??___fttol+1,f,c
  4245  0046'                    u3400:
  4246  0046' FFFF               	dw	65535	; assembler added errata NOP
  4247  0048' 2E00'              	decfsz	(??___fttol+4)& (0+255),f,c
  4248  004A' D7F8               	goto	u3405
  4249  004C' 5059'              	movf	??___fttol+1,w,c
  4250  004E' 6E5D'              	movwf	___fttol@sign1,c
  4251  0050' 8E55'              	bsf	___fttol@f1+1,7,c
  4252  0052' 6A56'              	clrf	___fttol@f1+2,c
  4253  0054' 5054'              	movf	___fttol@f1,w,c
  4254  0056' 6E5E'              	movwf	___fttol@lval,c
  4255  0058' 5055'              	movf	___fttol@f1+1,w,c
  4256  005A' 6E5F'              	movwf	___fttol@lval+1,c
  4257  005C' 5056'              	movf	___fttol@f1+2,w,c
  4258  005E' 6E60'              	movwf	___fttol@lval+2,c
  4259  0060' 6A61'              	clrf	___fttol@lval+3,c
  4260  0062' 0E8E               	movlw	142
  4261  0064' 5E62'              	subwf	___fttol@exp1,f,c
  4262  0066' AE62'              	btfss	___fttol@exp1,7,c
  4263  0068' D00D               	goto	l3598
  4264  006A' 5062'              	movf	___fttol@exp1,w,c
  4265  006C' 0A80               	xorlw	128
  4266  006E' 0F8F               	addlw	143
  4267  0070' E3D4               	bnc	l3576
  4268  0072'                    l3594:
  4269  0072' FFFF               	dw	65535	; assembler added errata NOP
  4270  0074' 90D8               	bcf	status,0,c
  4271  0076' 3261'              	rrcf	___fttol@lval+3,f,c
  4272  0078' 3260'              	rrcf	___fttol@lval+2,f,c
  4273  007A' 325F'              	rrcf	___fttol@lval+1,f,c
  4274  007C' 325E'              	rrcf	___fttol@lval,f,c
  4275  007E' 3E62'              	incfsz	___fttol@exp1,f,c
  4276  0080' D7F8               	goto	l3594
  4277  0082' D00E               	goto	l3606
  4278  0084'                    l3598:
  4279  0084' FFFF               	dw	65535	; assembler added errata NOP
  4280  0086' 0E17               	movlw	23
  4281  0088' 6462'              	cpfsgt	___fttol@exp1,c
  4282  008A' D007               	goto	l3604
  4283  008C' D7C6               	goto	l3576
  4284  008E'                    l3602:
  4285  008E' 90D8               	bcf	status,0,c
  4286  0090' 365E'              	rlcf	___fttol@lval,f,c
  4287  0092' 365F'              	rlcf	___fttol@lval+1,f,c
  4288  0094' 3660'              	rlcf	___fttol@lval+2,f,c
  4289  0096' 3661'              	rlcf	___fttol@lval+3,f,c
  4290  0098' 0662'              	decf	___fttol@exp1,f,c
  4291  009A'                    l3604:
  4292  009A' FFFF               	dw	65535	; assembler added errata NOP
  4293  009C' 5062'              	movf	___fttol@exp1,w,c
  4294  009E' E1F7               	bnz	l3602
  4295  00A0'                    l3606:
  4296  00A0' FFFF               	dw	65535	; assembler added errata NOP
  4297  00A2' 505D'              	movf	___fttol@sign1,w,c
  4298  00A4' E008               	bz	l3610
  4299  00A6' 1E61'              	comf	___fttol@lval+3,f,c
  4300  00A8' 1E60'              	comf	___fttol@lval+2,f,c
  4301  00AA' 1E5F'              	comf	___fttol@lval+1,f,c
  4302  00AC' 6C5E'              	negf	___fttol@lval,c
  4303  00AE' 0E00               	movlw	0
  4304  00B0' 225F'              	addwfc	___fttol@lval+1,f,c
  4305  00B2' 2260'              	addwfc	___fttol@lval+2,f,c
  4306  00B4' 2261'              	addwfc	___fttol@lval+3,f,c
  4307  00B6'                    l3610:
  4308  00B6' C05E' F054'        	movff	___fttol@lval,?___fttol
  4309  00BA' C05F' F055'        	movff	___fttol@lval+1,?___fttol+1
  4310  00BE' C060' F056'        	movff	___fttol@lval+2,?___fttol+2
  4311  00C2' C061' F057'        	movff	___fttol@lval+3,?___fttol+3
  4312  00C6'                    l909:
  4313  00C6' FFFF               	dw	65535	; assembler added errata NOP
  4314  00C8' 0012               	return		;funcret
  4315  00CA' FFFF               	dw	65535	; errata NOP
  4316  00CC'                    __end_of___fttol:
  4317                           	opt stack 0
  4318                           tblptru	equ	0xFF8
  4319                           tblptrh	equ	0xFF7
  4320                           tblptrl	equ	0xFF6
  4321                           tablat	equ	0xFF5
  4322                           intcon	equ	0xFF2
  4323                           intcon2	equ	0xFF1
  4324                           postinc0	equ	0xFEE
  4325                           wreg	equ	0xFE8
  4326                           postdec1	equ	0xFE5
  4327                           fsr1l	equ	0xFE1
  4328                           status	equ	0xFD8
  4329                           
  4330 ;; *************** function ___ftge *****************
  4331 ;; Defined at:
  4332 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/ftge.c"
  4333 ;; Parameters:    Size  Location     Type
  4334 ;;  ff1             3   13[COMRAM] float 
  4335 ;;  ff2             3   16[COMRAM] float 
  4336 ;; Auto vars:     Size  Location     Type
  4337 ;;		None
  4338 ;; Return value:  Size  Location     Type
  4339 ;;		None               void
  4340 ;; Registers used:
  4341 ;;		wreg, status,2, status,0
  4342 ;; Tracked objects:
  4343 ;;		On entry : 0/0
  4344 ;;		On exit  : 0/0
  4345 ;;		Unchanged: 0/0
  4346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4347 ;;      Params:         6       0       0       0       0       0       0
  4348 ;;      Locals:         0       0       0       0       0       0       0
  4349 ;;      Temps:          3       0       0       0       0       0       0
  4350 ;;      Totals:         9       0       0       0       0       0       0
  4351 ;;Total ram usage:        9 bytes
  4352 ;; Hardware stack levels used:    1
  4353 ;; Hardware stack levels required when called:    2
  4354 ;; This function calls:
  4355 ;;		Nothing
  4356 ;; This function is called by:
  4357 ;;		_measure_capacitance
  4358 ;;		_measure_inductance
  4359 ;;		_format_double
  4360 ;;		_floor
  4361 ;;		_pow
  4362 ;;		_exp
  4363 ;; This function uses a non-reentrant model
  4364 ;;
  4365                           
  4366                           	psect	text17
  4367  0000'                    __ptext17:
  4368                           	opt stack 0
  4369  0000'                    ___ftge:
  4370                           	opt stack 27
  4371                           
  4372                           ;incstack = 0
  4373  0000' FFFF               	dw	65535
  4374  0002' AE0F'              	btfss	___ftge@ff1+2,7,c
  4375  0004' D00D               	goto	l3560
  4376  0006' 6A00'              	clrf	??___ftge& (0+255),c
  4377  0008' 6A00'              	clrf	(??___ftge+1)& (0+255),c
  4378  000A' 0E80               	movlw	128
  4379  000C' 6E00'              	movwf	(??___ftge+2)& (0+255),c
  4380  000E' 500D'              	movf	___ftge@ff1,w,c
  4381  0010' 5C13'              	subwf	??___ftge,w,c
  4382  0012' 6E0D'              	movwf	___ftge@ff1,c
  4383  0014' 500E'              	movf	___ftge@ff1+1,w,c
  4384  0016' 5814'              	subwfb	??___ftge+1,w,c
  4385  0018' 6E0E'              	movwf	___ftge@ff1+1,c
  4386  001A' 500F'              	movf	___ftge@ff1+2,w,c
  4387  001C' 5815'              	subwfb	??___ftge+2,w,c
  4388  001E' 6E0F'              	movwf	___ftge@ff1+2,c
  4389  0020'                    l3560:
  4390  0020' FFFF               	dw	65535	; assembler added errata NOP
  4391  0022' AE12'              	btfss	___ftge@ff2+2,7,c
  4392  0024' D00D               	goto	l3564
  4393  0026' 6A00'              	clrf	??___ftge& (0+255),c
  4394  0028' 6A00'              	clrf	(??___ftge+1)& (0+255),c
  4395  002A' 0E80               	movlw	128
  4396  002C' 6E00'              	movwf	(??___ftge+2)& (0+255),c
  4397  002E' 5010'              	movf	___ftge@ff2,w,c
  4398  0030' 5C13'              	subwf	??___ftge,w,c
  4399  0032' 6E10'              	movwf	___ftge@ff2,c
  4400  0034' 5011'              	movf	___ftge@ff2+1,w,c
  4401  0036' 5814'              	subwfb	??___ftge+1,w,c
  4402  0038' 6E11'              	movwf	___ftge@ff2+1,c
  4403  003A' 5012'              	movf	___ftge@ff2+2,w,c
  4404  003C' 5815'              	subwfb	??___ftge+2,w,c
  4405  003E' 6E12'              	movwf	___ftge@ff2+2,c
  4406  0040'                    l3564:
  4407  0040' FFFF               	dw	65535	; assembler added errata NOP
  4408  0042' 0E80               	movlw	128
  4409  0044' 1A0F'              	xorwf	___ftge@ff1+2,f,c
  4410  0046' 0E80               	movlw	128
  4411  0048' 1A12'              	xorwf	___ftge@ff2+2,f,c
  4412  004A' 5010'              	movf	___ftge@ff2,w,c
  4413  004C' 5C0D'              	subwf	___ftge@ff1,w,c
  4414  004E' 5011'              	movf	___ftge@ff2+1,w,c
  4415  0050' 580E'              	subwfb	___ftge@ff1+1,w,c
  4416  0052' 5012'              	movf	___ftge@ff2+2,w,c
  4417  0054' 580F'              	subwfb	___ftge@ff1+2,w,c
  4418  0056' E202               	bc	l3570
  4419  0058' 90D8               	bcf	status,0,c
  4420  005A' D001               	goto	l882
  4421  005C'                    l3570:
  4422  005C' 80D8               	bsf	status,0,c
  4423  005E'                    l882:
  4424  005E' FFFF               	dw	65535	; assembler added errata NOP
  4425  0060' 0012               	return		;funcret
  4426  0062' FFFF               	dw	65535	; errata NOP
  4427  0064'                    __end_of___ftge:
  4428                           	opt stack 0
  4429                           tblptru	equ	0xFF8
  4430                           tblptrh	equ	0xFF7
  4431                           tblptrl	equ	0xFF6
  4432                           tablat	equ	0xFF5
  4433                           intcon	equ	0xFF2
  4434                           intcon2	equ	0xFF1
  4435                           postinc0	equ	0xFEE
  4436                           wreg	equ	0xFE8
  4437                           postdec1	equ	0xFE5
  4438                           fsr1l	equ	0xFE1
  4439                           status	equ	0xFD8
  4440                           
  4441 ;; *************** function ___altoft *****************
  4442 ;; Defined at:
  4443 ;;		line 42 in file "/opt/microchip/xc8/v1.34/sources/common/altoft.c"
  4444 ;; Parameters:    Size  Location     Type
  4445 ;;  c               4    0[BANK0 ] long 
  4446 ;; Auto vars:     Size  Location     Type
  4447 ;;  sign            1  100[COMRAM] unsigned char 
  4448 ;;  exp             1   99[COMRAM] unsigned char 
  4449 ;; Return value:  Size  Location     Type
  4450 ;;                  3    0[BANK0 ] float 
  4451 ;; Registers used:
  4452 ;;		wreg, status,2, status,0, cstack
  4453 ;; Tracked objects:
  4454 ;;		On entry : 0/0
  4455 ;;		On exit  : 0/0
  4456 ;;		Unchanged: 0/0
  4457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4458 ;;      Params:         0       4       0       0       0       0       0
  4459 ;;      Locals:         2       0       0       0       0       0       0
  4460 ;;      Temps:          0       4       0       0       0       0       0
  4461 ;;      Totals:         2       8       0       0       0       0       0
  4462 ;;Total ram usage:       10 bytes
  4463 ;; Hardware stack levels used:    1
  4464 ;; Hardware stack levels required when called:    3
  4465 ;; This function calls:
  4466 ;;		___ftpack
  4467 ;; This function is called by:
  4468 ;;		_floor
  4469 ;; This function uses a non-reentrant model
  4470 ;;
  4471                           
  4472                           	psect	text18
  4473  0000'                    __ptext18:
  4474                           	opt stack 0
  4475  0000'                    ___altoft:
  4476                           	opt stack 23
  4477                           
  4478                           ;incstack = 0
  4479  0000' FFFF               	dw	65535
  4480  0002' 6A64'              	clrf	___altoft@sign,c
  4481  0004' 0E8E               	movlw	142
  4482  0006' 6E63'              	movwf	___altoft@exp,c
  4483  0008' 0100               	movlb	0	; () banked
  4484  000A' AF00'              	btfss	(___altoft@c+3)& (0+255),7,b
  4485  000C' D011               	goto	l3442
  4486                           
  4487                           ; BSR set to: 0
  4488  000E' 1F00'              	comf	(___altoft@c+3)& (0+255),f,b
  4489  0010' 1F00'              	comf	(___altoft@c+2)& (0+255),f,b
  4490  0012' 1F00'              	comf	(___altoft@c+1)& (0+255),f,b
  4491  0014' 6D00'              	negf	___altoft@c& (0+255),b
  4492  0016' 0E00               	movlw	0
  4493  0018' 2300'              	addwfc	(___altoft@c+1)& (0+255),f,b
  4494  001A' 2300'              	addwfc	(___altoft@c+2)& (0+255),f,b
  4495  001C' 2300'              	addwfc	(___altoft@c+3)& (0+255),f,b
  4496                           
  4497                           ; BSR set to: 0
  4498  001E' 0E01               	movlw	1
  4499  0020' 6E64'              	movwf	___altoft@sign,c
  4500  0022' D006               	goto	l3442
  4501  0024'                    l3440:
  4502                           
  4503                           ; BSR set to: 0
  4504  0024' 90D8               	bcf	status,0,c
  4505  0026' 3300'              	rrcf	(___altoft@c+3)& (0+255),f,b
  4506  0028' 3300'              	rrcf	(___altoft@c+2)& (0+255),f,b
  4507  002A' 3300'              	rrcf	(___altoft@c+1)& (0+255),f,b
  4508  002C' 3300'              	rrcf	___altoft@c& (0+255),f,b
  4509  002E' 2A63'              	incf	___altoft@exp,f,c
  4510  0030'                    l3442:
  4511  0030' FFFF               	dw	65535	; assembler added errata NOP
  4512                           
  4513                           ; BSR set to: 0
  4514  0032' 6B00'              	clrf	??___altoft& (0+255),b
  4515  0034' 6B00'              	clrf	(??___altoft+1)& (0+255),b
  4516  0036' 6B00'              	clrf	(??___altoft+2)& (0+255),b
  4517  0038' 5100'              	movf	(___altoft@c+3)& (0+255),w,b
  4518  003A' 6F00'              	movwf	(??___altoft+3)& (0+255),b
  4519  003C' 5100'              	movf	??___altoft& (0+255),w,b
  4520  003E' 1100'              	iorwf	(??___altoft+1)& (0+255),w,b
  4521  0040' 1100'              	iorwf	(??___altoft+2)& (0+255),w,b
  4522  0042' 1100'              	iorwf	(??___altoft+3)& (0+255),w,b
  4523  0044' E1EF               	bnz	l3440
  4524                           
  4525                           ; BSR set to: 0
  4526  0046' C000' F00D'        	movff	___altoft@c,___ftpack@arg
  4527  004A' C001' F00E'        	movff	___altoft@c+1,___ftpack@arg+1
  4528  004E' C002' F00F'        	movff	___altoft@c+2,___ftpack@arg+2
  4529  0052' C063' F010'        	movff	___altoft@exp,___ftpack@exp
  4530  0056' C064' F011'        	movff	___altoft@sign,___ftpack@sign
  4531  005A' EC00' F000'        	call	___ftpack	;wreg free
  4532  005E' C00D' F000'        	movff	?___ftpack,?___altoft
  4533  0062' C00E' F001'        	movff	?___ftpack+1,?___altoft+1
  4534  0066' C00F' F002'        	movff	?___ftpack+2,?___altoft+2
  4535  006A' 0012               	return		;funcret
  4536  006C' FFFF               	dw	65535	; errata NOP
  4537  006E'                    __end_of___altoft:
  4538                           	opt stack 0
  4539                           tblptru	equ	0xFF8
  4540                           tblptrh	equ	0xFF7
  4541                           tblptrl	equ	0xFF6
  4542                           tablat	equ	0xFF5
  4543                           intcon	equ	0xFF2
  4544                           intcon2	equ	0xFF1
  4545                           postinc0	equ	0xFEE
  4546                           wreg	equ	0xFE8
  4547                           postdec1	equ	0xFE5
  4548                           fsr1l	equ	0xFE1
  4549                           status	equ	0xFD8
  4550                           
  4551 ;; *************** function ___ftsub *****************
  4552 ;; Defined at:
  4553 ;;		line 20 in file "/opt/microchip/xc8/v1.34/sources/common/ftsub.c"
  4554 ;; Parameters:    Size  Location     Type
  4555 ;;  f1              3   63[COMRAM] float 
  4556 ;;  f2              3   66[COMRAM] float 
  4557 ;; Auto vars:     Size  Location     Type
  4558 ;;		None
  4559 ;; Return value:  Size  Location     Type
  4560 ;;                  3   63[COMRAM] float 
  4561 ;; Registers used:
  4562 ;;		wreg, status,2, status,0, cstack
  4563 ;; Tracked objects:
  4564 ;;		On entry : 0/0
  4565 ;;		On exit  : 0/0
  4566 ;;		Unchanged: 0/0
  4567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4568 ;;      Params:         6       0       0       0       0       0       0
  4569 ;;      Locals:         0       0       0       0       0       0       0
  4570 ;;      Temps:          0       0       0       0       0       0       0
  4571 ;;      Totals:         6       0       0       0       0       0       0
  4572 ;;Total ram usage:        6 bytes
  4573 ;; Hardware stack levels used:    1
  4574 ;; Hardware stack levels required when called:    4
  4575 ;; This function calls:
  4576 ;;		___ftadd
  4577 ;; This function is called by:
  4578 ;;		_measure_capacitance
  4579 ;;		_measure_inductance
  4580 ;;		_format_double
  4581 ;;		_exp
  4582 ;; This function uses a non-reentrant model
  4583 ;;
  4584                           
  4585                           	psect	text19
  4586  0000'                    __ptext19:
  4587                           	opt stack 0
  4588  0000'                    ___ftsub:
  4589                           	opt stack 25
  4590                           
  4591                           ;incstack = 0
  4592  0000' FFFF               	dw	65535
  4593  0002' 5042'              	movf	___ftsub@f2,w,c
  4594  0004' 1043'              	iorwf	___ftsub@f2+1,w,c
  4595  0006' 1044'              	iorwf	___ftsub@f2+2,w,c
  4596  0008' E002               	bz	l3688
  4597  000A' 0E80               	movlw	128
  4598  000C' 1A44'              	xorwf	___ftsub@f2+2,f,c
  4599  000E'                    l3688:
  4600  000E' C03F' F033'        	movff	___ftsub@f1,___ftadd@f1
  4601  0012' C040' F034'        	movff	___ftsub@f1+1,___ftadd@f1+1
  4602  0016' C041' F035'        	movff	___ftsub@f1+2,___ftadd@f1+2
  4603  001A' C042' F036'        	movff	___ftsub@f2,___ftadd@f2
  4604  001E' C043' F037'        	movff	___ftsub@f2+1,___ftadd@f2+1
  4605  0022' C044' F038'        	movff	___ftsub@f2+2,___ftadd@f2+2
  4606  0026' EC00' F000'        	call	___ftadd	;wreg free
  4607  002A' C033' F03F'        	movff	?___ftadd,?___ftsub
  4608  002E' C034' F040'        	movff	?___ftadd+1,?___ftsub+1
  4609  0032' C035' F041'        	movff	?___ftadd+2,?___ftsub+2
  4610  0036' 0012               	return		;funcret
  4611  0038' FFFF               	dw	65535	; errata NOP
  4612  003A'                    __end_of___ftsub:
  4613                           	opt stack 0
  4614                           tblptru	equ	0xFF8
  4615                           tblptrh	equ	0xFF7
  4616                           tblptrl	equ	0xFF6
  4617                           tablat	equ	0xFF5
  4618                           intcon	equ	0xFF2
  4619                           intcon2	equ	0xFF1
  4620                           postinc0	equ	0xFEE
  4621                           wreg	equ	0xFE8
  4622                           postdec1	equ	0xFE5
  4623                           fsr1l	equ	0xFE1
  4624                           status	equ	0xFD8
  4625                           
  4626 ;; *************** function ___ftneg *****************
  4627 ;; Defined at:
  4628 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/ftneg.c"
  4629 ;; Parameters:    Size  Location     Type
  4630 ;;  f1              3   13[COMRAM] float 
  4631 ;; Auto vars:     Size  Location     Type
  4632 ;;		None
  4633 ;; Return value:  Size  Location     Type
  4634 ;;                  3   13[COMRAM] float 
  4635 ;; Registers used:
  4636 ;;		wreg, status,2, status,0
  4637 ;; Tracked objects:
  4638 ;;		On entry : F/0
  4639 ;;		On exit  : F/0
  4640 ;;		Unchanged: F/0
  4641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4642 ;;      Params:         3       0       0       0       0       0       0
  4643 ;;      Locals:         0       0       0       0       0       0       0
  4644 ;;      Temps:          0       0       0       0       0       0       0
  4645 ;;      Totals:         3       0       0       0       0       0       0
  4646 ;;Total ram usage:        3 bytes
  4647 ;; Hardware stack levels used:    1
  4648 ;; Hardware stack levels required when called:    2
  4649 ;; This function calls:
  4650 ;;		Nothing
  4651 ;; This function is called by:
  4652 ;;		_pow
  4653 ;;		_exp
  4654 ;; This function uses a non-reentrant model
  4655 ;;
  4656                           
  4657                           	psect	text20
  4658  0000'                    __ptext20:
  4659                           	opt stack 0
  4660  0000'                    ___ftneg:
  4661                           	opt stack 25
  4662                           
  4663                           ;incstack = 0
  4664  0000' FFFF               	dw	65535
  4665                           
  4666                           ; BSR set to: 0
  4667  0002' 500D'              	movf	___ftneg@f1,w,c
  4668  0004' 100E'              	iorwf	___ftneg@f1+1,w,c
  4669  0006' 100F'              	iorwf	___ftneg@f1+2,w,c
  4670  0008' E002               	bz	l898
  4671                           
  4672                           ; BSR set to: 0
  4673  000A' 0E80               	movlw	128
  4674  000C' 1A0F'              	xorwf	___ftneg@f1+2,f,c
  4675  000E'                    l898:
  4676                           
  4677                           ; BSR set to: 0
  4678  000E' C00D' F00D'        	movff	___ftneg@f1,?___ftneg
  4679  0012' C00E' F00E'        	movff	___ftneg@f1+1,?___ftneg+1
  4680  0016' C00F' F00F'        	movff	___ftneg@f1+2,?___ftneg+2
  4681                           
  4682                           ; BSR set to: 0
  4683  001A' 0012               	return		;funcret
  4684  001C' FFFF               	dw	65535	; errata NOP
  4685  001E'                    __end_of___ftneg:
  4686                           	opt stack 0
  4687                           tblptru	equ	0xFF8
  4688                           tblptrh	equ	0xFF7
  4689                           tblptrl	equ	0xFF6
  4690                           tablat	equ	0xFF5
  4691                           intcon	equ	0xFF2
  4692                           intcon2	equ	0xFF1
  4693                           postinc0	equ	0xFEE
  4694                           wreg	equ	0xFE8
  4695                           postdec1	equ	0xFE5
  4696                           fsr1l	equ	0xFE1
  4697                           status	equ	0xFD8
  4698                           
  4699 ;; *************** function ___ftdiv *****************
  4700 ;; Defined at:
  4701 ;;		line 54 in file "/opt/microchip/xc8/v1.34/sources/common/ftdiv.c"
  4702 ;; Parameters:    Size  Location     Type
  4703 ;;  f1              3   21[COMRAM] float 
  4704 ;;  f2              3   24[COMRAM] float 
  4705 ;; Auto vars:     Size  Location     Type
  4706 ;;  f3              3   31[COMRAM] float 
  4707 ;;  sign            1   35[COMRAM] unsigned char 
  4708 ;;  exp             1   34[COMRAM] unsigned char 
  4709 ;;  cntr            1   30[COMRAM] unsigned char 
  4710 ;; Return value:  Size  Location     Type
  4711 ;;                  3   21[COMRAM] float 
  4712 ;; Registers used:
  4713 ;;		wreg, status,2, status,0, cstack
  4714 ;; Tracked objects:
  4715 ;;		On entry : 0/0
  4716 ;;		On exit  : 0/0
  4717 ;;		Unchanged: 0/0
  4718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4719 ;;      Params:         6       0       0       0       0       0       0
  4720 ;;      Locals:         6       0       0       0       0       0       0
  4721 ;;      Temps:          3       0       0       0       0       0       0
  4722 ;;      Totals:        15       0       0       0       0       0       0
  4723 ;;Total ram usage:       15 bytes
  4724 ;; Hardware stack levels used:    1
  4725 ;; Hardware stack levels required when called:    3
  4726 ;; This function calls:
  4727 ;;		___ftpack
  4728 ;; This function is called by:
  4729 ;;		_measure_capacitance
  4730 ;;		_measure_inductance
  4731 ;;		_format_double
  4732 ;;		_exp
  4733 ;; This function uses a non-reentrant model
  4734 ;;
  4735                           
  4736                           	psect	text21
  4737  0000'                    __ptext21:
  4738                           	opt stack 0
  4739  0000'                    ___ftdiv:
  4740                           	opt stack 26
  4741                           
  4742                           ; BSR set to: 0
  4743                           ;incstack = 0
  4744  0000' FFFF               	dw	65535
  4745  0002' C017' F01B'        	movff	___ftdiv@f1+2,??___ftdiv
  4746  0006' 6A00'              	clrf	(??___ftdiv+1)& (0+255),c
  4747  0008' 6A00'              	clrf	(??___ftdiv+2)& (0+255),c
  4748  000A' 3416'              	rlcf	___ftdiv@f1+1,w,c
  4749  000C' 3600'              	rlcf	??___ftdiv& (0+255),f,c
  4750  000E' E301               	bnc	u3511
  4751  0010' 8000'              	bsf	(??___ftdiv+1)& (0+255),0,c
  4752  0012'                    u3511:
  4753  0012' 501B'              	movf	??___ftdiv,w,c
  4754  0014' 6E22'              	movwf	___ftdiv@exp,c
  4755  0016' 5022'              	movf	___ftdiv@exp,w,c
  4756  0018' E00C               	bz	l3654
  4757  001A' C01A' F01B'        	movff	___ftdiv@f2+2,??___ftdiv
  4758  001E' 6A00'              	clrf	(??___ftdiv+1)& (0+255),c
  4759  0020' 6A00'              	clrf	(??___ftdiv+2)& (0+255),c
  4760  0022' 3419'              	rlcf	___ftdiv@f2+1,w,c
  4761  0024' 3600'              	rlcf	??___ftdiv& (0+255),f,c
  4762  0026' E301               	bnc	u3531
  4763  0028' 8000'              	bsf	(??___ftdiv+1)& (0+255),0,c
  4764  002A'                    u3531:
  4765  002A' 501B'              	movf	??___ftdiv,w,c
  4766  002C' 6E23'              	movwf	___ftdiv@sign,c
  4767  002E' 5023'              	movf	___ftdiv@sign,w,c
  4768  0030' E104               	bnz	l874
  4769  0032'                    l3654:
  4770  0032' 6A15'              	clrf	?___ftdiv,c
  4771  0034' 6A16'              	clrf	?___ftdiv+1,c
  4772  0036' 6A17'              	clrf	?___ftdiv+2,c
  4773  0038' D03D               	goto	l873
  4774  003A'                    l874:
  4775  003A' 6A1F'              	clrf	___ftdiv@f3,c
  4776  003C' 6A20'              	clrf	___ftdiv@f3+1,c
  4777  003E' 6A21'              	clrf	___ftdiv@f3+2,c
  4778  0040' 5023'              	movf	___ftdiv@sign,w,c
  4779  0042' 0F89               	addlw	137
  4780  0044' 5E22'              	subwf	___ftdiv@exp,f,c
  4781  0046' C017' F023'        	movff	___ftdiv@f1+2,___ftdiv@sign
  4782  004A' 501A'              	movf	___ftdiv@f2+2,w,c
  4783  004C' 1A23'              	xorwf	___ftdiv@sign,f,c
  4784  004E' 0E80               	movlw	128
  4785  0050' 1623'              	andwf	___ftdiv@sign,f,c
  4786  0052' 8E16'              	bsf	___ftdiv@f1+1,7,c
  4787  0054' 6A17'              	clrf	___ftdiv@f1+2,c
  4788  0056' 8E19'              	bsf	___ftdiv@f2+1,7,c
  4789  0058' 6A1A'              	clrf	___ftdiv@f2+2,c
  4790  005A' 0E18               	movlw	24
  4791  005C' 6E1E'              	movwf	___ftdiv@cntr,c
  4792  005E'                    l3670:
  4793  005E' FFFF               	dw	65535	; assembler added errata NOP
  4794  0060' 90D8               	bcf	status,0,c
  4795  0062' 361F'              	rlcf	___ftdiv@f3,f,c
  4796  0064' 3620'              	rlcf	___ftdiv@f3+1,f,c
  4797  0066' 3621'              	rlcf	___ftdiv@f3+2,f,c
  4798  0068' 5018'              	movf	___ftdiv@f2,w,c
  4799  006A' 5C15'              	subwf	___ftdiv@f1,w,c
  4800  006C' 5019'              	movf	___ftdiv@f2+1,w,c
  4801  006E' 5816'              	subwfb	___ftdiv@f1+1,w,c
  4802  0070' 501A'              	movf	___ftdiv@f2+2,w,c
  4803  0072' 5817'              	subwfb	___ftdiv@f1+2,w,c
  4804  0074' E307               	bnc	l876
  4805  0076' 5018'              	movf	___ftdiv@f2,w,c
  4806  0078' 5E15'              	subwf	___ftdiv@f1,f,c
  4807  007A' 5019'              	movf	___ftdiv@f2+1,w,c
  4808  007C' 5A16'              	subwfb	___ftdiv@f1+1,f,c
  4809  007E' 501A'              	movf	___ftdiv@f2+2,w,c
  4810  0080' 5A17'              	subwfb	___ftdiv@f1+2,f,c
  4811  0082' 801F'              	bsf	___ftdiv@f3,0,c
  4812  0084'                    l876:
  4813  0084' 90D8               	bcf	status,0,c
  4814  0086' 3615'              	rlcf	___ftdiv@f1,f,c
  4815  0088' 3616'              	rlcf	___ftdiv@f1+1,f,c
  4816  008A' 3617'              	rlcf	___ftdiv@f1+2,f,c
  4817  008C' 2E1E'              	decfsz	___ftdiv@cntr,f,c
  4818  008E' D7E7               	goto	l3670
  4819  0090' C01F' F00D'        	movff	___ftdiv@f3,___ftpack@arg
  4820  0094' C020' F00E'        	movff	___ftdiv@f3+1,___ftpack@arg+1
  4821  0098' C021' F00F'        	movff	___ftdiv@f3+2,___ftpack@arg+2
  4822  009C' C022' F010'        	movff	___ftdiv@exp,___ftpack@exp
  4823  00A0' C023' F011'        	movff	___ftdiv@sign,___ftpack@sign
  4824  00A4' EC00' F000'        	call	___ftpack	;wreg free
  4825  00A8' C00D' F015'        	movff	?___ftpack,?___ftdiv
  4826  00AC' C00E' F016'        	movff	?___ftpack+1,?___ftdiv+1
  4827  00B0' C00F' F017'        	movff	?___ftpack+2,?___ftdiv+2
  4828  00B4'                    l873:
  4829  00B4' FFFF               	dw	65535	; assembler added errata NOP
  4830  00B6' 0012               	return		;funcret
  4831  00B8' FFFF               	dw	65535	; errata NOP
  4832  00BA'                    __end_of___ftdiv:
  4833                           	opt stack 0
  4834                           tblptru	equ	0xFF8
  4835                           tblptrh	equ	0xFF7
  4836                           tblptrl	equ	0xFF6
  4837                           tablat	equ	0xFF5
  4838                           intcon	equ	0xFF2
  4839                           intcon2	equ	0xFF1
  4840                           postinc0	equ	0xFEE
  4841                           wreg	equ	0xFE8
  4842                           postdec1	equ	0xFE5
  4843                           fsr1l	equ	0xFE1
  4844                           status	equ	0xFD8
  4845                           
  4846 ;; *************** function ___lltoft *****************
  4847 ;; Defined at:
  4848 ;;		line 35 in file "/opt/microchip/xc8/v1.34/sources/common/lltoft.c"
  4849 ;; Parameters:    Size  Location     Type
  4850 ;;  c               4   21[COMRAM] unsigned long 
  4851 ;; Auto vars:     Size  Location     Type
  4852 ;;  exp             1   29[COMRAM] unsigned char 
  4853 ;; Return value:  Size  Location     Type
  4854 ;;                  3   21[COMRAM] float 
  4855 ;; Registers used:
  4856 ;;		wreg, status,2, status,0, cstack
  4857 ;; Tracked objects:
  4858 ;;		On entry : 0/0
  4859 ;;		On exit  : 0/0
  4860 ;;		Unchanged: 0/0
  4861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4862 ;;      Params:         4       0       0       0       0       0       0
  4863 ;;      Locals:         1       0       0       0       0       0       0
  4864 ;;      Temps:          4       0       0       0       0       0       0
  4865 ;;      Totals:         9       0       0       0       0       0       0
  4866 ;;Total ram usage:        9 bytes
  4867 ;; Hardware stack levels used:    1
  4868 ;; Hardware stack levels required when called:    3
  4869 ;; This function calls:
  4870 ;;		___ftpack
  4871 ;; This function is called by:
  4872 ;;		_pow
  4873 ;; This function uses a non-reentrant model
  4874 ;;
  4875                           
  4876                           	psect	text22
  4877  0000'                    __ptext22:
  4878                           	opt stack 0
  4879  0000'                    ___lltoft:
  4880                           	opt stack 25
  4881                           
  4882                           ;incstack = 0
  4883  0000' FFFF               	dw	65535
  4884  0002' 0E8E               	movlw	142
  4885  0004' 6E1D'              	movwf	___lltoft@exp,c
  4886  0006' D006               	goto	l3834
  4887  0008'                    l3832:
  4888  0008' 90D8               	bcf	status,0,c
  4889  000A' 3218'              	rrcf	___lltoft@c+3,f,c
  4890  000C' 3217'              	rrcf	___lltoft@c+2,f,c
  4891  000E' 3216'              	rrcf	___lltoft@c+1,f,c
  4892  0010' 3215'              	rrcf	___lltoft@c,f,c
  4893  0012' 2A1D'              	incf	___lltoft@exp,f,c
  4894  0014'                    l3834:
  4895  0014' FFFF               	dw	65535	; assembler added errata NOP
  4896  0016' 6A00'              	clrf	??___lltoft& (0+255),c
  4897  0018' 6A00'              	clrf	(??___lltoft+1)& (0+255),c
  4898  001A' 6A00'              	clrf	(??___lltoft+2)& (0+255),c
  4899  001C' 5018'              	movf	___lltoft@c+3,w,c
  4900  001E' 6E00'              	movwf	(??___lltoft+3)& (0+255),c
  4901  0020' 5019'              	movf	??___lltoft,w,c
  4902  0022' 101A'              	iorwf	??___lltoft+1,w,c
  4903  0024' 101B'              	iorwf	??___lltoft+2,w,c
  4904  0026' 101C'              	iorwf	??___lltoft+3,w,c
  4905  0028' E1EF               	bnz	l3832
  4906  002A' C015' F00D'        	movff	___lltoft@c,___ftpack@arg
  4907  002E' C016' F00E'        	movff	___lltoft@c+1,___ftpack@arg+1
  4908  0032' C017' F00F'        	movff	___lltoft@c+2,___ftpack@arg+2
  4909  0036' C01D' F010'        	movff	___lltoft@exp,___ftpack@exp
  4910  003A' 0E00               	movlw	0
  4911  003C' 6E11'              	movwf	___ftpack@sign,c
  4912  003E' EC00' F000'        	call	___ftpack	;wreg free
  4913  0042' C00D' F015'        	movff	?___ftpack,?___lltoft
  4914  0046' C00E' F016'        	movff	?___ftpack+1,?___lltoft+1
  4915  004A' C00F' F017'        	movff	?___ftpack+2,?___lltoft+2
  4916  004E' 0012               	return		;funcret
  4917  0050' FFFF               	dw	65535	; errata NOP
  4918  0052'                    __end_of___lltoft:
  4919                           	opt stack 0
  4920                           tblptru	equ	0xFF8
  4921                           tblptrh	equ	0xFF7
  4922                           tblptrl	equ	0xFF6
  4923                           tablat	equ	0xFF5
  4924                           intcon	equ	0xFF2
  4925                           intcon2	equ	0xFF1
  4926                           postinc0	equ	0xFEE
  4927                           wreg	equ	0xFE8
  4928                           postdec1	equ	0xFE5
  4929                           fsr1l	equ	0xFE1
  4930                           status	equ	0xFD8
  4931                           
  4932 ;; *************** function _log10 *****************
  4933 ;; Defined at:
  4934 ;;		line 39 in file "/opt/microchip/xc8/v1.34/sources/common/log.c"
  4935 ;; Parameters:    Size  Location     Type
  4936 ;;  x               3   78[COMRAM] float 
  4937 ;; Auto vars:     Size  Location     Type
  4938 ;;		None
  4939 ;; Return value:  Size  Location     Type
  4940 ;;                  3   78[COMRAM] float 
  4941 ;; Registers used:
  4942 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4943 ;; Tracked objects:
  4944 ;;		On entry : 0/0
  4945 ;;		On exit  : 0/0
  4946 ;;		Unchanged: 0/0
  4947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4948 ;;      Params:         3       0       0       0       0       0       0
  4949 ;;      Locals:         3       0       0       0       0       0       0
  4950 ;;      Temps:          0       0       0       0       0       0       0
  4951 ;;      Totals:         6       0       0       0       0       0       0
  4952 ;;Total ram usage:        6 bytes
  4953 ;; Hardware stack levels used:    1
  4954 ;; Hardware stack levels required when called:    6
  4955 ;; This function calls:
  4956 ;;		___ftmul
  4957 ;;		_log
  4958 ;; This function is called by:
  4959 ;;		_format_double
  4960 ;; This function uses a non-reentrant model
  4961 ;;
  4962                           
  4963                           	psect	text23
  4964  0000'                    __ptext23:
  4965                           	opt stack 0
  4966  0000'                    _log10:
  4967                           	opt stack 23
  4968                           
  4969                           ;incstack = 0
  4970  0000' FFFF               	dw	65535
  4971  0002' C04E' F049'        	movff	log10@x,log@x
  4972  0006' C04F' F04A'        	movff	log10@x+1,log@x+1
  4973  000A' C050' F04B'        	movff	log10@x+2,log@x+2
  4974  000E' EC00' F000'        	call	_log	;wreg free
  4975  0012' C049' F051'        	movff	?_log,_log10$1326
  4976  0016' C04A' F052'        	movff	?_log+1,_log10$1326+1
  4977  001A' C04B' F053'        	movff	?_log+2,_log10$1326+2
  4978  001E' C051' F024'        	movff	_log10$1326,___ftmul@f1
  4979  0022' C052' F025'        	movff	_log10$1326+1,___ftmul@f1+1
  4980  0026' C053' F026'        	movff	_log10$1326+2,___ftmul@f1+2
  4981  002A' 0E5C               	movlw	92
  4982  002C' 6E27'              	movwf	___ftmul@f2,c
  4983  002E' 0EDE               	movlw	222
  4984  0030' 6E28'              	movwf	___ftmul@f2+1,c
  4985  0032' 0E3E               	movlw	62
  4986  0034' 6E29'              	movwf	___ftmul@f2+2,c
  4987  0036' EC00' F000'        	call	___ftmul	;wreg free
  4988  003A' C024' F04E'        	movff	?___ftmul,?_log10
  4989  003E' C025' F04F'        	movff	?___ftmul+1,?_log10+1
  4990  0042' C026' F050'        	movff	?___ftmul+2,?_log10+2
  4991  0046' 0012               	return		;funcret
  4992  0048' FFFF               	dw	65535	; errata NOP
  4993  004A'                    __end_of_log10:
  4994                           	opt stack 0
  4995                           tblptru	equ	0xFF8
  4996                           tblptrh	equ	0xFF7
  4997                           tblptrl	equ	0xFF6
  4998                           tablat	equ	0xFF5
  4999                           intcon	equ	0xFF2
  5000                           intcon2	equ	0xFF1
  5001                           postinc0	equ	0xFEE
  5002                           wreg	equ	0xFE8
  5003                           postdec1	equ	0xFE5
  5004                           fsr1l	equ	0xFE1
  5005                           status	equ	0xFD8
  5006                           
  5007 ;; *************** function _log *****************
  5008 ;; Defined at:
  5009 ;;		line 5 in file "/opt/microchip/xc8/v1.34/sources/common/log.c"
  5010 ;; Parameters:    Size  Location     Type
  5011 ;;  x               3   73[COMRAM] float 
  5012 ;; Auto vars:     Size  Location     Type
  5013 ;;  exponent        2   76[COMRAM] int 
  5014 ;; Return value:  Size  Location     Type
  5015 ;;                  3   73[COMRAM] int 
  5016 ;; Registers used:
  5017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5018 ;; Tracked objects:
  5019 ;;		On entry : 0/0
  5020 ;;		On exit  : 0/0
  5021 ;;		Unchanged: 0/0
  5022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5023 ;;      Params:         3       0       0       0       0       0       0
  5024 ;;      Locals:         2       0       0       0       0       0       0
  5025 ;;      Temps:          0       0       0       0       0       0       0
  5026 ;;      Totals:         5       0       0       0       0       0       0
  5027 ;;Total ram usage:        5 bytes
  5028 ;; Hardware stack levels used:    1
  5029 ;; Hardware stack levels required when called:    5
  5030 ;; This function calls:
  5031 ;;		___awtoft
  5032 ;;		___ftadd
  5033 ;;		___ftmul
  5034 ;;		_eval_poly
  5035 ;;		_frexp
  5036 ;; This function is called by:
  5037 ;;		_log10
  5038 ;;		_pow
  5039 ;; This function uses a non-reentrant model
  5040 ;;
  5041                           
  5042                           	psect	text24
  5043  0000'                    __ptext24:
  5044                           	opt stack 0
  5045  0000'                    _log:
  5046                           	opt stack 23
  5047                           
  5048                           ;incstack = 0
  5049  0000' FFFF               	dw	65535
  5050  0002' BE4B'              	btfsc	log@x+2,7,c
  5051  0004' D004               	goto	l3846
  5052  0006' 5049'              	movf	log@x,w,c
  5053  0008' 104A'              	iorwf	log@x+1,w,c
  5054  000A' 104B'              	iorwf	log@x+2,w,c
  5055  000C' E105               	bnz	l3848
  5056  000E'                    l3846:
  5057  000E' FFFF               	dw	65535	; assembler added errata NOP
  5058  0010' 6A49'              	clrf	?_log,c
  5059  0012' 6A4A'              	clrf	?_log+1,c
  5060  0014' 6A4B'              	clrf	?_log+2,c
  5061  0016' D067               	goto	l990
  5062  0018'                    l3848:
  5063  0018' 6A27'              	clrf	___ftmul@f2,c
  5064  001A' 6A28'              	clrf	___ftmul@f2+1,c
  5065  001C' 0E40               	movlw	64
  5066  001E' 6E29'              	movwf	___ftmul@f2+2,c
  5067  0020' 0E00'              	movlw	low log@exponent
  5068  0022' 6E10'              	movwf	frexp@eptr,c
  5069  0024' C049' F00D'        	movff	log@x,frexp@value
  5070  0028' C04A' F00E'        	movff	log@x+1,frexp@value+1
  5071  002C' C04B' F00F'        	movff	log@x+2,frexp@value+2
  5072  0030' EC00' F000'        	call	_frexp	;wreg free
  5073  0034' C00D' F024'        	movff	?_frexp,___ftmul@f1
  5074  0038' C00E' F025'        	movff	?_frexp+1,___ftmul@f1+1
  5075  003C' C00F' F026'        	movff	?_frexp+2,___ftmul@f1+2
  5076  0040' EC00' F000'        	call	___ftmul	;wreg free
  5077  0044' C024' F033'        	movff	?___ftmul,___ftadd@f1
  5078  0048' C025' F034'        	movff	?___ftmul+1,___ftadd@f1+1
  5079  004C' C026' F035'        	movff	?___ftmul+2,___ftadd@f1+2
  5080  0050' 6A36'              	clrf	___ftadd@f2,c
  5081  0052' 0E80               	movlw	128
  5082  0054' 6E37'              	movwf	___ftadd@f2+1,c
  5083  0056' 0EBF               	movlw	191
  5084  0058' 6E38'              	movwf	___ftadd@f2+2,c
  5085  005A' EC00' F000'        	call	___ftadd	;wreg free
  5086  005E' C033' F049'        	movff	?___ftadd,log@x
  5087  0062' C034' F04A'        	movff	?___ftadd+1,log@x+1
  5088  0066' C035' F04B'        	movff	?___ftadd+2,log@x+2
  5089  006A' 064C'              	decf	log@exponent,f,c
  5090  006C' A0D8               	btfss	status,0,c
  5091  006E' 064D'              	decf	log@exponent+1,f,c
  5092  0070' C049' F03F'        	movff	log@x,eval_poly@x
  5093  0074' C04A' F040'        	movff	log@x+1,eval_poly@x+1
  5094  0078' C04B' F041'        	movff	log@x+2,eval_poly@x+2
  5095  007C' 0E00'              	movlw	low log@coeff
  5096  007E' 6E42'              	movwf	eval_poly@d,c
  5097  0080' 6A44'              	clrf	eval_poly@n+1,c
  5098  0082' 0E08               	movlw	8
  5099  0084' 6E43'              	movwf	eval_poly@n,c
  5100  0086' EC00' F000'        	call	_eval_poly	;wreg free
  5101  008A' C03F' F049'        	movff	?_eval_poly,log@x
  5102  008E' C040' F04A'        	movff	?_eval_poly+1,log@x+1
  5103  0092' C041' F04B'        	movff	?_eval_poly+2,log@x+2
  5104  0096' 0E72               	movlw	114
  5105  0098' 6E27'              	movwf	___ftmul@f2,c
  5106  009A' 0E31               	movlw	49
  5107  009C' 6E28'              	movwf	___ftmul@f2+1,c
  5108  009E' 0E3F               	movlw	63
  5109  00A0' 6E29'              	movwf	___ftmul@f2+2,c
  5110  00A2' C04C' F015'        	movff	log@exponent,___awtoft@c
  5111  00A6' C04D' F016'        	movff	log@exponent+1,___awtoft@c+1
  5112  00AA' EC00' F000'        	call	___awtoft	;wreg free
  5113  00AE' C015' F024'        	movff	?___awtoft,___ftmul@f1
  5114  00B2' C016' F025'        	movff	?___awtoft+1,___ftmul@f1+1
  5115  00B6' C017' F026'        	movff	?___awtoft+2,___ftmul@f1+2
  5116  00BA' EC00' F000'        	call	___ftmul	;wreg free
  5117  00BE' C024' F033'        	movff	?___ftmul,___ftadd@f1
  5118  00C2' C025' F034'        	movff	?___ftmul+1,___ftadd@f1+1
  5119  00C6' C026' F035'        	movff	?___ftmul+2,___ftadd@f1+2
  5120  00CA' C049' F036'        	movff	log@x,___ftadd@f2
  5121  00CE' C04A' F037'        	movff	log@x+1,___ftadd@f2+1
  5122  00D2' C04B' F038'        	movff	log@x+2,___ftadd@f2+2
  5123  00D6' EC00' F000'        	call	___ftadd	;wreg free
  5124  00DA' C033' F049'        	movff	?___ftadd,?_log
  5125  00DE' C034' F04A'        	movff	?___ftadd+1,?_log+1
  5126  00E2' C035' F04B'        	movff	?___ftadd+2,?_log+2
  5127  00E6'                    l990:
  5128  00E6' FFFF               	dw	65535	; assembler added errata NOP
  5129  00E8' 0012               	return		;funcret
  5130  00EA' FFFF               	dw	65535	; errata NOP
  5131  00EC'                    __end_of_log:
  5132                           	opt stack 0
  5133                           tblptru	equ	0xFF8
  5134                           tblptrh	equ	0xFF7
  5135                           tblptrl	equ	0xFF6
  5136                           tablat	equ	0xFF5
  5137                           intcon	equ	0xFF2
  5138                           intcon2	equ	0xFF1
  5139                           postinc0	equ	0xFEE
  5140                           wreg	equ	0xFE8
  5141                           postdec1	equ	0xFE5
  5142                           fsr1l	equ	0xFE1
  5143                           status	equ	0xFD8
  5144                           
  5145 ;; *************** function _frexp *****************
  5146 ;; Defined at:
  5147 ;;		line 254 in file "/opt/microchip/xc8/v1.34/sources/common/frexp.c"
  5148 ;; Parameters:    Size  Location     Type
  5149 ;;  value           3   13[COMRAM] int 
  5150 ;;  eptr            1   16[COMRAM] PTR int 
  5151 ;;		 -> log@exponent(2), floor@expon(2), 
  5152 ;; Auto vars:     Size  Location     Type
  5153 ;;		None
  5154 ;; Return value:  Size  Location     Type
  5155 ;;                  3   13[COMRAM] PTR int 
  5156 ;; Registers used:
  5157 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5158 ;; Tracked objects:
  5159 ;;		On entry : 0/0
  5160 ;;		On exit  : 0/0
  5161 ;;		Unchanged: 0/0
  5162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5163 ;;      Params:         4       0       0       0       0       0       0
  5164 ;;      Locals:         0       0       0       0       0       0       0
  5165 ;;      Temps:          2       0       0       0       0       0       0
  5166 ;;      Totals:         6       0       0       0       0       0       0
  5167 ;;Total ram usage:        6 bytes
  5168 ;; Hardware stack levels used:    1
  5169 ;; Hardware stack levels required when called:    2
  5170 ;; This function calls:
  5171 ;;		Nothing
  5172 ;; This function is called by:
  5173 ;;		_floor
  5174 ;;		_log
  5175 ;; This function uses a non-reentrant model
  5176 ;;
  5177                           
  5178                           	psect	text25
  5179  0000'                    __ptext25:
  5180                           	opt stack 0
  5181  0000'                    _frexp:
  5182                           	opt stack 25
  5183                           
  5184                           ;incstack = 0
  5185  0000' FFFF               	dw	65535
  5186  0002' 500D'              	movf	frexp@value,w,c
  5187  0004' 100E'              	iorwf	frexp@value+1,w,c
  5188  0006' 100F'              	iorwf	frexp@value+2,w,c
  5189  0008' E10A               	bnz	l2454
  5190  000A' 5010'              	movf	frexp@eptr,w,c
  5191  000C' 6ED9               	movwf	fsr2l,c
  5192  000E' 6ADA               	clrf	fsr2h,c
  5193  0010' 0E00               	movlw	0
  5194  0012' 6ADE               	clrf	postinc2,c
  5195  0014' 6ADD               	clrf	postdec2,c
  5196  0016' 6A0D'              	clrf	?_frexp,c
  5197  0018' 6A0E'              	clrf	?_frexp+1,c
  5198  001A' 6A0F'              	clrf	?_frexp+2,c
  5199  001C' D029               	goto	l824
  5200  001E'                    l2454:
  5201  001E' 500F'              	movf	frexp@value+2,w,c
  5202  0020' 0B7F               	andlw	127
  5203  0022' 6E00'              	movwf	??_frexp& (0+255),c
  5204  0024' 6A00'              	clrf	(??_frexp+1)& (0+255),c
  5205  0026' 90D8               	bcf	status,0,c
  5206  0028' 3611'              	rlcf	??_frexp,f,c
  5207  002A' 3612'              	rlcf	??_frexp+1,f,c
  5208  002C' 5010'              	movf	frexp@eptr,w,c
  5209  002E' 6ED9               	movwf	fsr2l,c
  5210  0030' 6ADA               	clrf	fsr2h,c
  5211  0032' C011' FFDE         	movff	??_frexp,postinc2
  5212  0036' C012' FFDD         	movff	??_frexp+1,postdec2
  5213  003A' 5010'              	movf	frexp@eptr,w,c
  5214  003C' 6ED9               	movwf	fsr2l,c
  5215  003E' 6ADA               	clrf	fsr2h,c
  5216  0040' 0E01               	movlw	1
  5217  0042' AE0E'              	btfss	frexp@value+1,7,c
  5218  0044' 0E00               	movlw	0
  5219  0046' 12DE               	iorwf	postinc2,f,c
  5220  0048' 0E00               	movlw	0
  5221  004A' 12DD               	iorwf	postdec2,f,c
  5222  004C' 5010'              	movf	frexp@eptr,w,c
  5223  004E' 6ED9               	movwf	fsr2l,c
  5224  0050' 6ADA               	clrf	fsr2h,c
  5225  0052' 0E82               	movlw	130
  5226  0054' 26DE               	addwf	postinc2,f,c
  5227  0056' 0EFF               	movlw	255
  5228  0058' 22DD               	addwfc	postdec2,f,c
  5229  005A' 500F'              	movf	frexp@value+2,w,c
  5230  005C' 0B80               	andlw	-128
  5231  005E' 093F               	iorlw	63
  5232  0060' 6E0F'              	movwf	frexp@value+2,c
  5233  0062' 9E0E'              	bcf	frexp@value+1,7,c
  5234  0064' C00D' F00D'        	movff	frexp@value,?_frexp
  5235  0068' C00E' F00E'        	movff	frexp@value+1,?_frexp+1
  5236  006C' C00F' F00F'        	movff	frexp@value+2,?_frexp+2
  5237  0070'                    l824:
  5238  0070' FFFF               	dw	65535	; assembler added errata NOP
  5239  0072' 0012               	return		;funcret
  5240  0074' FFFF               	dw	65535	; errata NOP
  5241  0076'                    __end_of_frexp:
  5242                           	opt stack 0
  5243                           tblptru	equ	0xFF8
  5244                           tblptrh	equ	0xFF7
  5245                           tblptrl	equ	0xFF6
  5246                           tablat	equ	0xFF5
  5247                           intcon	equ	0xFF2
  5248                           intcon2	equ	0xFF1
  5249                           postinc0	equ	0xFEE
  5250                           wreg	equ	0xFE8
  5251                           postdec1	equ	0xFE5
  5252                           fsr1l	equ	0xFE1
  5253                           postinc2	equ	0xFDE
  5254                           postdec2	equ	0xFDD
  5255                           fsr2h	equ	0xFDA
  5256                           fsr2l	equ	0xFD9
  5257                           status	equ	0xFD8
  5258                           
  5259 ;; *************** function _eval_poly *****************
  5260 ;; Defined at:
  5261 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/evalpoly.c"
  5262 ;; Parameters:    Size  Location     Type
  5263 ;;  x               3   63[COMRAM] PTR int 
  5264 ;;  d               1   66[COMRAM] PTR const 
  5265 ;;		 -> exp@coeff(30), log@coeff(27), 
  5266 ;;  n               2   67[COMRAM] int 
  5267 ;; Auto vars:     Size  Location     Type
  5268 ;;  res             3   70[COMRAM] int 
  5269 ;; Return value:  Size  Location     Type
  5270 ;;                  3   63[COMRAM] int 
  5271 ;; Registers used:
  5272 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5273 ;; Tracked objects:
  5274 ;;		On entry : 0/0
  5275 ;;		On exit  : 0/0
  5276 ;;		Unchanged: 0/0
  5277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5278 ;;      Params:         6       0       0       0       0       0       0
  5279 ;;      Locals:         3       0       0       0       0       0       0
  5280 ;;      Temps:          1       0       0       0       0       0       0
  5281 ;;      Totals:        10       0       0       0       0       0       0
  5282 ;;Total ram usage:       10 bytes
  5283 ;; Hardware stack levels used:    1
  5284 ;; Hardware stack levels required when called:    4
  5285 ;; This function calls:
  5286 ;;		___ftadd
  5287 ;;		___ftmul
  5288 ;; This function is called by:
  5289 ;;		_log
  5290 ;;		_exp
  5291 ;; This function uses a non-reentrant model
  5292 ;;
  5293                           
  5294                           	psect	text26
  5295  0000'                    __ptext26:
  5296                           	opt stack 0
  5297  0000'                    _eval_poly:
  5298                           	opt stack 23
  5299                           
  5300                           ;incstack = 0
  5301  0000' FFFF               	dw	65535
  5302  0002' 5043'              	movf	eval_poly@n,w,c
  5303  0004' 0D03               	mullw	3
  5304  0006' 5042'              	movf	eval_poly@d,w,c
  5305  0008' 24F3               	addwf	prodl,w,c
  5306  000A' 6E00'              	movwf	??_eval_poly& (0+255),c
  5307  000C' C045' FFF6         	movff	??_eval_poly,tblptrl
  5308  0010'                    	if	0	;There is only one active tblptr byte
  5309  0010'                    	endif
  5310  0010'                    	if	0	;tblptru may be non-zero
  5311  0010'                    	endif
  5312  0010'                    	if	0	;tblptru may be non-zero
  5313  0010'                    	endif
  5314  0010' 0009               	tblrd		*+
  5315  0012' FFFF               	dw	65535	; errata NOP
  5316  0014' CFF5 F046'         	movff	tablat,eval_poly@res
  5317  0018' 0009               	tblrd		*+
  5318  001A' FFFF               	dw	65535	; errata NOP
  5319  001C' CFF5 F047'         	movff	tablat,eval_poly@res+1
  5320  0020' 000A               	tblrd		*-
  5321  0022' FFFF               	dw	65535	; errata NOP
  5322  0024' CFF5 F048'         	movff	tablat,eval_poly@res+2
  5323  0028' D032               	goto	l3708
  5324  002A'                    l3706:
  5325  002A' C046' F027'        	movff	eval_poly@res,___ftmul@f2
  5326  002E' C047' F028'        	movff	eval_poly@res+1,___ftmul@f2+1
  5327  0032' C048' F029'        	movff	eval_poly@res+2,___ftmul@f2+2
  5328  0036' C03F' F024'        	movff	eval_poly@x,___ftmul@f1
  5329  003A' C040' F025'        	movff	eval_poly@x+1,___ftmul@f1+1
  5330  003E' C041' F026'        	movff	eval_poly@x+2,___ftmul@f1+2
  5331  0042' EC00' F000'        	call	___ftmul	;wreg free
  5332  0046' C024' F033'        	movff	?___ftmul,___ftadd@f1
  5333  004A' C025' F034'        	movff	?___ftmul+1,___ftadd@f1+1
  5334  004E' C026' F035'        	movff	?___ftmul+2,___ftadd@f1+2
  5335  0052' 0643'              	decf	eval_poly@n,f,c
  5336  0054' A0D8               	btfss	status,0,c
  5337  0056' 0644'              	decf	eval_poly@n+1,f,c
  5338  0058' 5043'              	movf	eval_poly@n,w,c
  5339  005A' 0D03               	mullw	3
  5340  005C' 5042'              	movf	eval_poly@d,w,c
  5341  005E' 24F3               	addwf	prodl,w,c
  5342  0060' 6E00'              	movwf	??_eval_poly& (0+255),c
  5343  0062' C045' FFF6         	movff	??_eval_poly,tblptrl
  5344  0066'                    	if	0	;There is only one active tblptr byte
  5345  0066'                    	endif
  5346  0066'                    	if	0	;tblptru may be non-zero
  5347  0066'                    	endif
  5348  0066'                    	if	0	;tblptru may be non-zero
  5349  0066'                    	endif
  5350  0066' 0009               	tblrd		*+
  5351  0068' FFFF               	dw	65535	; errata NOP
  5352  006A' CFF5 F036'         	movff	tablat,___ftadd@f2
  5353  006E' 0009               	tblrd		*+
  5354  0070' FFFF               	dw	65535	; errata NOP
  5355  0072' CFF5 F037'         	movff	tablat,___ftadd@f2+1
  5356  0076' 000A               	tblrd		*-
  5357  0078' FFFF               	dw	65535	; errata NOP
  5358  007A' CFF5 F038'         	movff	tablat,___ftadd@f2+2
  5359  007E' EC00' F000'        	call	___ftadd	;wreg free
  5360  0082' C033' F046'        	movff	?___ftadd,eval_poly@res
  5361  0086' C034' F047'        	movff	?___ftadd+1,eval_poly@res+1
  5362  008A' C035' F048'        	movff	?___ftadd+2,eval_poly@res+2
  5363  008E'                    l3708:
  5364  008E' FFFF               	dw	65535	; assembler added errata NOP
  5365  0090' 5043'              	movf	eval_poly@n,w,c
  5366  0092' 1044'              	iorwf	eval_poly@n+1,w,c
  5367  0094' E1CA               	bnz	l3706
  5368  0096' C046' F03F'        	movff	eval_poly@res,?_eval_poly
  5369  009A' C047' F040'        	movff	eval_poly@res+1,?_eval_poly+1
  5370  009E' C048' F041'        	movff	eval_poly@res+2,?_eval_poly+2
  5371  00A2' 0012               	return		;funcret
  5372  00A4' FFFF               	dw	65535	; errata NOP
  5373  00A6'                    __end_of_eval_poly:
  5374                           	opt stack 0
  5375                           tblptru	equ	0xFF8
  5376                           tblptrh	equ	0xFF7
  5377                           tblptrl	equ	0xFF6
  5378                           tablat	equ	0xFF5
  5379                           prodl	equ	0xFF3
  5380                           intcon	equ	0xFF2
  5381                           intcon2	equ	0xFF1
  5382                           postinc0	equ	0xFEE
  5383                           wreg	equ	0xFE8
  5384                           postdec1	equ	0xFE5
  5385                           fsr1l	equ	0xFE1
  5386                           postinc2	equ	0xFDE
  5387                           postdec2	equ	0xFDD
  5388                           fsr2h	equ	0xFDA
  5389                           fsr2l	equ	0xFD9
  5390                           status	equ	0xFD8
  5391                           
  5392 ;; *************** function ___ftmul *****************
  5393 ;; Defined at:
  5394 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/ftmul.c"
  5395 ;; Parameters:    Size  Location     Type
  5396 ;;  f1              3   36[COMRAM] float 
  5397 ;;  f2              3   39[COMRAM] float 
  5398 ;; Auto vars:     Size  Location     Type
  5399 ;;  f3_as_produc    3   46[COMRAM] unsigned um
  5400 ;;  sign            1   50[COMRAM] unsigned char 
  5401 ;;  cntr            1   49[COMRAM] unsigned char 
  5402 ;;  exp             1   45[COMRAM] unsigned char 
  5403 ;; Return value:  Size  Location     Type
  5404 ;;                  3   36[COMRAM] float 
  5405 ;; Registers used:
  5406 ;;		wreg, status,2, status,0, cstack
  5407 ;; Tracked objects:
  5408 ;;		On entry : 0/0
  5409 ;;		On exit  : 0/0
  5410 ;;		Unchanged: 0/0
  5411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5412 ;;      Params:         6       0       0       0       0       0       0
  5413 ;;      Locals:         6       0       0       0       0       0       0
  5414 ;;      Temps:          3       0       0       0       0       0       0
  5415 ;;      Totals:        15       0       0       0       0       0       0
  5416 ;;Total ram usage:       15 bytes
  5417 ;; Hardware stack levels used:    1
  5418 ;; Hardware stack levels required when called:    3
  5419 ;; This function calls:
  5420 ;;		___ftpack
  5421 ;; This function is called by:
  5422 ;;		_measure_capacitance
  5423 ;;		_measure_inductance
  5424 ;;		_format_double
  5425 ;;		_log
  5426 ;;		_log10
  5427 ;;		_pow
  5428 ;;		_eval_poly
  5429 ;;		_exp
  5430 ;; This function uses a non-reentrant model
  5431 ;;
  5432                           
  5433                           	psect	text27
  5434  0000'                    __ptext27:
  5435                           	opt stack 0
  5436  0000'                    ___ftmul:
  5437                           	opt stack 26
  5438                           
  5439                           ;incstack = 0
  5440  0000' FFFF               	dw	65535
  5441  0002' C026' F02A'        	movff	___ftmul@f1+2,??___ftmul
  5442  0006' 6A00'              	clrf	(??___ftmul+1)& (0+255),c
  5443  0008' 6A00'              	clrf	(??___ftmul+2)& (0+255),c
  5444  000A' 3425'              	rlcf	___ftmul@f1+1,w,c
  5445  000C' 3600'              	rlcf	??___ftmul& (0+255),f,c
  5446  000E' E301               	bnc	u3291
  5447  0010' 8000'              	bsf	(??___ftmul+1)& (0+255),0,c
  5448  0012'                    u3291:
  5449  0012' 502A'              	movf	??___ftmul,w,c
  5450  0014' 6E2D'              	movwf	___ftmul@exp,c
  5451  0016' 502D'              	movf	___ftmul@exp,w,c
  5452  0018' E00C               	bz	l3518
  5453  001A' C029' F02A'        	movff	___ftmul@f2+2,??___ftmul
  5454  001E' 6A00'              	clrf	(??___ftmul+1)& (0+255),c
  5455  0020' 6A00'              	clrf	(??___ftmul+2)& (0+255),c
  5456  0022' 3428'              	rlcf	___ftmul@f2+1,w,c
  5457  0024' 3600'              	rlcf	??___ftmul& (0+255),f,c
  5458  0026' E301               	bnc	u3311
  5459  0028' 8000'              	bsf	(??___ftmul+1)& (0+255),0,c
  5460  002A'                    u3311:
  5461  002A' 502A'              	movf	??___ftmul,w,c
  5462  002C' 6E32'              	movwf	___ftmul@sign,c
  5463  002E' 5032'              	movf	___ftmul@sign,w,c
  5464  0030' E104               	bnz	l3520
  5465  0032'                    l3518:
  5466  0032' 6A24'              	clrf	?___ftmul,c
  5467  0034' 6A25'              	clrf	?___ftmul+1,c
  5468  0036' 6A26'              	clrf	?___ftmul+2,c
  5469  0038' D04E               	goto	l888
  5470  003A'                    l3520:
  5471  003A' 5032'              	movf	___ftmul@sign,w,c
  5472  003C' 0F7B               	addlw	123
  5473  003E' 262D'              	addwf	___ftmul@exp,f,c
  5474  0040' C026' F032'        	movff	___ftmul@f1+2,___ftmul@sign
  5475  0044' 5029'              	movf	___ftmul@f2+2,w,c
  5476  0046' 1A32'              	xorwf	___ftmul@sign,f,c
  5477  0048' 0E80               	movlw	128
  5478  004A' 1632'              	andwf	___ftmul@sign,f,c
  5479  004C' 8E25'              	bsf	___ftmul@f1+1,7,c
  5480  004E' 8E28'              	bsf	___ftmul@f2+1,7,c
  5481  0050' 0E00               	movlw	0
  5482  0052' 1629'              	andwf	___ftmul@f2+2,f,c
  5483  0054' 6A2E'              	clrf	___ftmul@f3_as_product,c
  5484  0056' 6A2F'              	clrf	___ftmul@f3_as_product+1,c
  5485  0058' 6A30'              	clrf	___ftmul@f3_as_product+2,c
  5486  005A' 0E07               	movlw	7
  5487  005C' 6E31'              	movwf	___ftmul@cntr,c
  5488  005E'                    l3534:
  5489  005E' FFFF               	dw	65535	; assembler added errata NOP
  5490  0060' A024'              	btfss	___ftmul@f1,0,c
  5491  0062' D006               	goto	l3538
  5492  0064' 5027'              	movf	___ftmul@f2,w,c
  5493  0066' 262E'              	addwf	___ftmul@f3_as_product,f,c
  5494  0068' 5028'              	movf	___ftmul@f2+1,w,c
  5495  006A' 222F'              	addwfc	___ftmul@f3_as_product+1,f,c
  5496  006C' 5029'              	movf	___ftmul@f2+2,w,c
  5497  006E' 2230'              	addwfc	___ftmul@f3_as_product+2,f,c
  5498  0070'                    l3538:
  5499  0070' FFFF               	dw	65535	; assembler added errata NOP
  5500  0072' 90D8               	bcf	status,0,c
  5501  0074' 3226'              	rrcf	___ftmul@f1+2,f,c
  5502  0076' 3225'              	rrcf	___ftmul@f1+1,f,c
  5503  0078' 3224'              	rrcf	___ftmul@f1,f,c
  5504  007A' 90D8               	bcf	status,0,c
  5505  007C' 3627'              	rlcf	___ftmul@f2,f,c
  5506  007E' 3628'              	rlcf	___ftmul@f2+1,f,c
  5507  0080' 3629'              	rlcf	___ftmul@f2+2,f,c
  5508  0082' 2E31'              	decfsz	___ftmul@cntr,f,c
  5509  0084' D7EC               	goto	l3534
  5510  0086' 0E09               	movlw	9
  5511  0088' 6E31'              	movwf	___ftmul@cntr,c
  5512  008A'                    l3544:
  5513  008A' FFFF               	dw	65535	; assembler added errata NOP
  5514  008C' A024'              	btfss	___ftmul@f1,0,c
  5515  008E' D006               	goto	l3548
  5516  0090' 5027'              	movf	___ftmul@f2,w,c
  5517  0092' 262E'              	addwf	___ftmul@f3_as_product,f,c
  5518  0094' 5028'              	movf	___ftmul@f2+1,w,c
  5519  0096' 222F'              	addwfc	___ftmul@f3_as_product+1,f,c
  5520  0098' 5029'              	movf	___ftmul@f2+2,w,c
  5521  009A' 2230'              	addwfc	___ftmul@f3_as_product+2,f,c
  5522  009C'                    l3548:
  5523  009C' FFFF               	dw	65535	; assembler added errata NOP
  5524  009E' 90D8               	bcf	status,0,c
  5525  00A0' 3226'              	rrcf	___ftmul@f1+2,f,c
  5526  00A2' 3225'              	rrcf	___ftmul@f1+1,f,c
  5527  00A4' 3224'              	rrcf	___ftmul@f1,f,c
  5528  00A6' 90D8               	bcf	status,0,c
  5529  00A8' 3230'              	rrcf	___ftmul@f3_as_product+2,f,c
  5530  00AA' 322F'              	rrcf	___ftmul@f3_as_product+1,f,c
  5531  00AC' 322E'              	rrcf	___ftmul@f3_as_product,f,c
  5532  00AE' 2E31'              	decfsz	___ftmul@cntr,f,c
  5533  00B0' D7EC               	goto	l3544
  5534  00B2' C02E' F00D'        	movff	___ftmul@f3_as_product,___ftpack@arg
  5535  00B6' C02F' F00E'        	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5536  00BA' C030' F00F'        	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5537  00BE' C02D' F010'        	movff	___ftmul@exp,___ftpack@exp
  5538  00C2' C032' F011'        	movff	___ftmul@sign,___ftpack@sign
  5539  00C6' EC00' F000'        	call	___ftpack	;wreg free
  5540  00CA' C00D' F024'        	movff	?___ftpack,?___ftmul
  5541  00CE' C00E' F025'        	movff	?___ftpack+1,?___ftmul+1
  5542  00D2' C00F' F026'        	movff	?___ftpack+2,?___ftmul+2
  5543  00D6'                    l888:
  5544  00D6' FFFF               	dw	65535	; assembler added errata NOP
  5545  00D8' 0012               	return		;funcret
  5546  00DA' FFFF               	dw	65535	; errata NOP
  5547  00DC'                    __end_of___ftmul:
  5548                           	opt stack 0
  5549                           tblptru	equ	0xFF8
  5550                           tblptrh	equ	0xFF7
  5551                           tblptrl	equ	0xFF6
  5552                           tablat	equ	0xFF5
  5553                           prodl	equ	0xFF3
  5554                           intcon	equ	0xFF2
  5555                           intcon2	equ	0xFF1
  5556                           postinc0	equ	0xFEE
  5557                           wreg	equ	0xFE8
  5558                           postdec1	equ	0xFE5
  5559                           fsr1l	equ	0xFE1
  5560                           postinc2	equ	0xFDE
  5561                           postdec2	equ	0xFDD
  5562                           fsr2h	equ	0xFDA
  5563                           fsr2l	equ	0xFD9
  5564                           status	equ	0xFD8
  5565                           
  5566 ;; *************** function ___ftadd *****************
  5567 ;; Defined at:
  5568 ;;		line 86 in file "/opt/microchip/xc8/v1.34/sources/common/ftadd.c"
  5569 ;; Parameters:    Size  Location     Type
  5570 ;;  f1              3   51[COMRAM] float 
  5571 ;;  f2              3   54[COMRAM] float 
  5572 ;; Auto vars:     Size  Location     Type
  5573 ;;  exp1            1   62[COMRAM] unsigned char 
  5574 ;;  exp2            1   61[COMRAM] unsigned char 
  5575 ;;  sign            1   60[COMRAM] unsigned char 
  5576 ;; Return value:  Size  Location     Type
  5577 ;;                  3   51[COMRAM] float 
  5578 ;; Registers used:
  5579 ;;		wreg, status,2, status,0, cstack
  5580 ;; Tracked objects:
  5581 ;;		On entry : 0/0
  5582 ;;		On exit  : 0/0
  5583 ;;		Unchanged: 0/0
  5584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5585 ;;      Params:         6       0       0       0       0       0       0
  5586 ;;      Locals:         3       0       0       0       0       0       0
  5587 ;;      Temps:          3       0       0       0       0       0       0
  5588 ;;      Totals:        12       0       0       0       0       0       0
  5589 ;;Total ram usage:       12 bytes
  5590 ;; Hardware stack levels used:    1
  5591 ;; Hardware stack levels required when called:    3
  5592 ;; This function calls:
  5593 ;;		___ftpack
  5594 ;; This function is called by:
  5595 ;;		_floor
  5596 ;;		___ftsub
  5597 ;;		_log
  5598 ;;		_eval_poly
  5599 ;; This function uses a non-reentrant model
  5600 ;;
  5601                           
  5602                           	psect	text28
  5603  0000'                    __ptext28:
  5604                           	opt stack 0
  5605  0000'                    ___ftadd:
  5606                           	opt stack 25
  5607                           
  5608                           ;incstack = 0
  5609  0000' FFFF               	dw	65535
  5610  0002' C035' F039'        	movff	___ftadd@f1+2,??___ftadd
  5611  0006' 6A00'              	clrf	(??___ftadd+1)& (0+255),c
  5612  0008' 6A00'              	clrf	(??___ftadd+2)& (0+255),c
  5613  000A' 3434'              	rlcf	___ftadd@f1+1,w,c
  5614  000C' 3600'              	rlcf	??___ftadd& (0+255),f,c
  5615  000E' E301               	bnc	u3081
  5616  0010' 8000'              	bsf	(??___ftadd+1)& (0+255),0,c
  5617  0012'                    u3081:
  5618  0012' 5039'              	movf	??___ftadd,w,c
  5619  0014' 6E3E'              	movwf	___ftadd@exp1,c
  5620  0016' C038' F039'        	movff	___ftadd@f2+2,??___ftadd
  5621  001A' 6A00'              	clrf	(??___ftadd+1)& (0+255),c
  5622  001C' 6A00'              	clrf	(??___ftadd+2)& (0+255),c
  5623  001E' 3437'              	rlcf	___ftadd@f2+1,w,c
  5624  0020' 3600'              	rlcf	??___ftadd& (0+255),f,c
  5625  0022' E301               	bnc	u3091
  5626  0024' 8000'              	bsf	(??___ftadd+1)& (0+255),0,c
  5627  0026'                    u3091:
  5628  0026' 5039'              	movf	??___ftadd,w,c
  5629  0028' 6E3D'              	movwf	___ftadd@exp2,c
  5630  002A' 503E'              	movf	___ftadd@exp1,w,c
  5631  002C' E009               	bz	l841
  5632  002E' 503D'              	movf	___ftadd@exp2,w,c
  5633  0030' 5C3E'              	subwf	___ftadd@exp1,w,c
  5634  0032' E20D               	bc	l3456
  5635  0034' 503E'              	movf	___ftadd@exp1,w,c
  5636  0036' 5C3D'              	subwf	___ftadd@exp2,w,c
  5637  0038' 6E00'              	movwf	??___ftadd& (0+255),c
  5638  003A' 0E18               	movlw	24
  5639  003C' 6439'              	cpfsgt	??___ftadd,c
  5640  003E' D007               	goto	l3456
  5641  0040'                    l841:
  5642  0040' C036' F033'        	movff	___ftadd@f2,?___ftadd
  5643  0044' C037' F034'        	movff	___ftadd@f2+1,?___ftadd+1
  5644  0048' C038' F035'        	movff	___ftadd@f2+2,?___ftadd+2
  5645  004C' D08F               	goto	l842
  5646  004E'                    l3456:
  5647  004E' FFFF               	dw	65535	; assembler added errata NOP
  5648  0050' 503D'              	movf	___ftadd@exp2,w,c
  5649  0052' E009               	bz	l845
  5650  0054' 503E'              	movf	___ftadd@exp1,w,c
  5651  0056' 5C3D'              	subwf	___ftadd@exp2,w,c
  5652  0058' E20D               	bc	l3462
  5653  005A' 503D'              	movf	___ftadd@exp2,w,c
  5654  005C' 5C3E'              	subwf	___ftadd@exp1,w,c
  5655  005E' 6E00'              	movwf	??___ftadd& (0+255),c
  5656  0060' 0E18               	movlw	24
  5657  0062' 6439'              	cpfsgt	??___ftadd,c
  5658  0064' D007               	goto	l3462
  5659  0066'                    l845:
  5660  0066' C033' F033'        	movff	___ftadd@f1,?___ftadd
  5661  006A' C034' F034'        	movff	___ftadd@f1+1,?___ftadd+1
  5662  006E' C035' F035'        	movff	___ftadd@f1+2,?___ftadd+2
  5663  0072' D07C               	goto	l842
  5664  0074'                    l3462:
  5665  0074' FFFF               	dw	65535	; assembler added errata NOP
  5666  0076' 0E06               	movlw	6
  5667  0078' 6E3C'              	movwf	___ftadd@sign,c
  5668  007A' BE35'              	btfsc	___ftadd@f1+2,7,c
  5669  007C' 8E3C'              	bsf	___ftadd@sign,7,c
  5670  007E' BE38'              	btfsc	___ftadd@f2+2,7,c
  5671  0080' 8C3C'              	bsf	___ftadd@sign,6,c
  5672  0082' 8E34'              	bsf	___ftadd@f1+1,7,c
  5673  0084' 6A35'              	clrf	___ftadd@f1+2,c
  5674  0086' 8E37'              	bsf	___ftadd@f2+1,7,c
  5675  0088' 6A38'              	clrf	___ftadd@f2+2,c
  5676  008A' 503D'              	movf	___ftadd@exp2,w,c
  5677  008C' 5C3E'              	subwf	___ftadd@exp1,w,c
  5678  008E' E21A               	bc	l3488
  5679  0090'                    l3478:
  5680  0090' FFFF               	dw	65535	; assembler added errata NOP
  5681  0092' 90D8               	bcf	status,0,c
  5682  0094' 3636'              	rlcf	___ftadd@f2,f,c
  5683  0096' 3637'              	rlcf	___ftadd@f2+1,f,c
  5684  0098' 3638'              	rlcf	___ftadd@f2+2,f,c
  5685  009A' 063D'              	decf	___ftadd@exp2,f,c
  5686  009C' 503E'              	movf	___ftadd@exp1,w,c
  5687  009E' 183D'              	xorwf	___ftadd@exp2,w,c
  5688  00A0' E00D               	bz	l3486
  5689  00A2' 063C'              	decf	___ftadd@sign,f,c
  5690  00A4' C03C' F039'        	movff	___ftadd@sign,??___ftadd
  5691  00A8' 0E07               	movlw	7
  5692  00AA' 1639'              	andwf	??___ftadd,f,c
  5693  00AC' E007               	bz	l3486
  5694  00AE' D7F0               	goto	l3478
  5695  00B0'                    l3484:
  5696  00B0' FFFF               	dw	65535	; assembler added errata NOP
  5697  00B2' 90D8               	bcf	status,0,c
  5698  00B4' 3235'              	rrcf	___ftadd@f1+2,f,c
  5699  00B6' 3234'              	rrcf	___ftadd@f1+1,f,c
  5700  00B8' 3233'              	rrcf	___ftadd@f1,f,c
  5701  00BA' 2A3E'              	incf	___ftadd@exp1,f,c
  5702  00BC'                    l3486:
  5703  00BC' 503D'              	movf	___ftadd@exp2,w,c
  5704  00BE' 183E'              	xorwf	___ftadd@exp1,w,c
  5705  00C0' E01C               	bz	l856
  5706  00C2' D7F6               	goto	l3484
  5707  00C4'                    l3488:
  5708  00C4' 503E'              	movf	___ftadd@exp1,w,c
  5709  00C6' 5C3D'              	subwf	___ftadd@exp2,w,c
  5710  00C8' E218               	bc	l856
  5711  00CA'                    l3490:
  5712  00CA' FFFF               	dw	65535	; assembler added errata NOP
  5713  00CC' 90D8               	bcf	status,0,c
  5714  00CE' 3633'              	rlcf	___ftadd@f1,f,c
  5715  00D0' 3634'              	rlcf	___ftadd@f1+1,f,c
  5716  00D2' 3635'              	rlcf	___ftadd@f1+2,f,c
  5717  00D4' 063E'              	decf	___ftadd@exp1,f,c
  5718  00D6' 503E'              	movf	___ftadd@exp1,w,c
  5719  00D8' 183D'              	xorwf	___ftadd@exp2,w,c
  5720  00DA' E00C               	bz	l3498
  5721  00DC' 063C'              	decf	___ftadd@sign,f,c
  5722  00DE' C03C' F039'        	movff	___ftadd@sign,??___ftadd
  5723  00E2' 0E07               	movlw	7
  5724  00E4' 1639'              	andwf	??___ftadd,f,c
  5725  00E6' E006               	bz	l3498
  5726  00E8' D7F0               	goto	l3490
  5727  00EA'                    l3496:
  5728  00EA' 90D8               	bcf	status,0,c
  5729  00EC' 3238'              	rrcf	___ftadd@f2+2,f,c
  5730  00EE' 3237'              	rrcf	___ftadd@f2+1,f,c
  5731  00F0' 3236'              	rrcf	___ftadd@f2,f,c
  5732  00F2' 2A3D'              	incf	___ftadd@exp2,f,c
  5733  00F4'                    l3498:
  5734  00F4' 503D'              	movf	___ftadd@exp2,w,c
  5735  00F6' 183E'              	xorwf	___ftadd@exp1,w,c
  5736  00F8' E1F8               	bnz	l3496
  5737  00FA'                    l856:
  5738  00FA' AE3C'              	btfss	___ftadd@sign,7,c
  5739  00FC' D007               	goto	l865
  5740  00FE' 1E33'              	comf	___ftadd@f1,f,c
  5741  0100' 1E34'              	comf	___ftadd@f1+1,f,c
  5742  0102' 1E35'              	comf	___ftadd@f1+2,f,c
  5743  0104' 2A33'              	incf	___ftadd@f1,f,c
  5744  0106' 0E00               	movlw	0
  5745  0108' 2234'              	addwfc	___ftadd@f1+1,f,c
  5746  010A' 2235'              	addwfc	___ftadd@f1+2,f,c
  5747  010C'                    l865:
  5748  010C' FFFF               	dw	65535	; assembler added errata NOP
  5749  010E' AC3C'              	btfss	___ftadd@sign,6,c
  5750  0110' D007               	goto	l866
  5751  0112' 1E36'              	comf	___ftadd@f2,f,c
  5752  0114' 1E37'              	comf	___ftadd@f2+1,f,c
  5753  0116' 1E38'              	comf	___ftadd@f2+2,f,c
  5754  0118' 2A36'              	incf	___ftadd@f2,f,c
  5755  011A' 0E00               	movlw	0
  5756  011C' 2237'              	addwfc	___ftadd@f2+1,f,c
  5757  011E' 2238'              	addwfc	___ftadd@f2+2,f,c
  5758  0120'                    l866:
  5759  0120' FFFF               	dw	65535	; assembler added errata NOP
  5760  0122' 6A3C'              	clrf	___ftadd@sign,c
  5761  0124' 5033'              	movf	___ftadd@f1,w,c
  5762  0126' 2636'              	addwf	___ftadd@f2,f,c
  5763  0128' 5034'              	movf	___ftadd@f1+1,w,c
  5764  012A' 2237'              	addwfc	___ftadd@f2+1,f,c
  5765  012C' 5035'              	movf	___ftadd@f1+2,w,c
  5766  012E' 2238'              	addwfc	___ftadd@f2+2,f,c
  5767  0130' AE38'              	btfss	___ftadd@f2+2,7,c
  5768  0132' D009               	goto	l3508
  5769  0134' 1E36'              	comf	___ftadd@f2,f,c
  5770  0136' 1E37'              	comf	___ftadd@f2+1,f,c
  5771  0138' 1E38'              	comf	___ftadd@f2+2,f,c
  5772  013A' 2A36'              	incf	___ftadd@f2,f,c
  5773  013C' 0E00               	movlw	0
  5774  013E' 2237'              	addwfc	___ftadd@f2+1,f,c
  5775  0140' 2238'              	addwfc	___ftadd@f2+2,f,c
  5776  0142' 0E01               	movlw	1
  5777  0144' 6E3C'              	movwf	___ftadd@sign,c
  5778  0146'                    l3508:
  5779  0146' FFFF               	dw	65535	; assembler added errata NOP
  5780  0148' C036' F00D'        	movff	___ftadd@f2,___ftpack@arg
  5781  014C' C037' F00E'        	movff	___ftadd@f2+1,___ftpack@arg+1
  5782  0150' C038' F00F'        	movff	___ftadd@f2+2,___ftpack@arg+2
  5783  0154' C03E' F010'        	movff	___ftadd@exp1,___ftpack@exp
  5784  0158' C03C' F011'        	movff	___ftadd@sign,___ftpack@sign
  5785  015C' EC00' F000'        	call	___ftpack	;wreg free
  5786  0160' C00D' F033'        	movff	?___ftpack,?___ftadd
  5787  0164' C00E' F034'        	movff	?___ftpack+1,?___ftadd+1
  5788  0168' C00F' F035'        	movff	?___ftpack+2,?___ftadd+2
  5789  016C'                    l842:
  5790  016C' FFFF               	dw	65535	; assembler added errata NOP
  5791  016E' 0012               	return		;funcret
  5792  0170' FFFF               	dw	65535	; errata NOP
  5793  0172'                    __end_of___ftadd:
  5794                           	opt stack 0
  5795                           tblptru	equ	0xFF8
  5796                           tblptrh	equ	0xFF7
  5797                           tblptrl	equ	0xFF6
  5798                           tablat	equ	0xFF5
  5799                           prodl	equ	0xFF3
  5800                           intcon	equ	0xFF2
  5801                           intcon2	equ	0xFF1
  5802                           postinc0	equ	0xFEE
  5803                           wreg	equ	0xFE8
  5804                           postdec1	equ	0xFE5
  5805                           fsr1l	equ	0xFE1
  5806                           postinc2	equ	0xFDE
  5807                           postdec2	equ	0xFDD
  5808                           fsr2h	equ	0xFDA
  5809                           fsr2l	equ	0xFD9
  5810                           status	equ	0xFD8
  5811                           
  5812 ;; *************** function ___awtoft *****************
  5813 ;; Defined at:
  5814 ;;		line 32 in file "/opt/microchip/xc8/v1.34/sources/common/awtoft.c"
  5815 ;; Parameters:    Size  Location     Type
  5816 ;;  c               2   21[COMRAM] int 
  5817 ;; Auto vars:     Size  Location     Type
  5818 ;;  sign            1   24[COMRAM] unsigned char 
  5819 ;; Return value:  Size  Location     Type
  5820 ;;                  3   21[COMRAM] float 
  5821 ;; Registers used:
  5822 ;;		wreg, status,2, status,0, cstack
  5823 ;; Tracked objects:
  5824 ;;		On entry : 0/0
  5825 ;;		On exit  : 0/0
  5826 ;;		Unchanged: 0/0
  5827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5828 ;;      Params:         3       0       0       0       0       0       0
  5829 ;;      Locals:         1       0       0       0       0       0       0
  5830 ;;      Temps:          0       0       0       0       0       0       0
  5831 ;;      Totals:         4       0       0       0       0       0       0
  5832 ;;Total ram usage:        4 bytes
  5833 ;; Hardware stack levels used:    1
  5834 ;; Hardware stack levels required when called:    3
  5835 ;; This function calls:
  5836 ;;		___ftpack
  5837 ;; This function is called by:
  5838 ;;		_format_double
  5839 ;;		_log
  5840 ;;		_exp
  5841 ;; This function uses a non-reentrant model
  5842 ;;
  5843                           
  5844                           	psect	text29
  5845  0000'                    __ptext29:
  5846                           	opt stack 0
  5847  0000'                    ___awtoft:
  5848                           	opt stack 24
  5849                           
  5850                           ;incstack = 0
  5851  0000' FFFF               	dw	65535
  5852  0002' 6A18'              	clrf	___awtoft@sign,c
  5853  0004' AE16'              	btfss	___awtoft@c+1,7,c
  5854  0006' D006               	goto	l3700
  5855  0008' 6C15'              	negf	___awtoft@c,c
  5856  000A' 1E16'              	comf	___awtoft@c+1,f,c
  5857  000C' B0D8               	btfsc	status,0,c
  5858  000E' 2A16'              	incf	___awtoft@c+1,f,c
  5859  0010' 0E01               	movlw	1
  5860  0012' 6E18'              	movwf	___awtoft@sign,c
  5861  0014'                    l3700:
  5862  0014' FFFF               	dw	65535	; assembler added errata NOP
  5863  0016' C015' F00D'        	movff	___awtoft@c,___ftpack@arg
  5864  001A' C016' F00E'        	movff	___awtoft@c+1,___ftpack@arg+1
  5865  001E' 6A0F'              	clrf	___ftpack@arg+2,c
  5866  0020' 0E8E               	movlw	142
  5867  0022' 6E10'              	movwf	___ftpack@exp,c
  5868  0024' C018' F011'        	movff	___awtoft@sign,___ftpack@sign
  5869  0028' EC00' F000'        	call	___ftpack	;wreg free
  5870  002C' C00D' F015'        	movff	?___ftpack,?___awtoft
  5871  0030' C00E' F016'        	movff	?___ftpack+1,?___awtoft+1
  5872  0034' C00F' F017'        	movff	?___ftpack+2,?___awtoft+2
  5873  0038' 0012               	return		;funcret
  5874  003A' FFFF               	dw	65535	; errata NOP
  5875  003C'                    __end_of___awtoft:
  5876                           	opt stack 0
  5877                           tblptru	equ	0xFF8
  5878                           tblptrh	equ	0xFF7
  5879                           tblptrl	equ	0xFF6
  5880                           tablat	equ	0xFF5
  5881                           prodl	equ	0xFF3
  5882                           intcon	equ	0xFF2
  5883                           intcon2	equ	0xFF1
  5884                           postinc0	equ	0xFEE
  5885                           wreg	equ	0xFE8
  5886                           postdec1	equ	0xFE5
  5887                           fsr1l	equ	0xFE1
  5888                           postinc2	equ	0xFDE
  5889                           postdec2	equ	0xFDD
  5890                           fsr2h	equ	0xFDA
  5891                           fsr2l	equ	0xFD9
  5892                           status	equ	0xFD8
  5893                           
  5894 ;; *************** function _calibrate *****************
  5895 ;; Defined at:
  5896 ;;		line 26 in file "src/measure.c"
  5897 ;; Parameters:    Size  Location     Type
  5898 ;;		None
  5899 ;; Auto vars:     Size  Location     Type
  5900 ;;  i               1   71[COMRAM] unsigned char 
  5901 ;; Return value:  Size  Location     Type
  5902 ;;		None               void
  5903 ;; Registers used:
  5904 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5905 ;; Tracked objects:
  5906 ;;		On entry : 0/0
  5907 ;;		On exit  : 0/0
  5908 ;;		Unchanged: 0/0
  5909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5910 ;;      Params:         0       0       0       0       0       0       0
  5911 ;;      Locals:         1       0       0       0       0       0       0
  5912 ;;      Temps:          0       0       0       0       0       0       0
  5913 ;;      Totals:         1       0       0       0       0       0       0
  5914 ;;Total ram usage:        1 bytes
  5915 ;; Hardware stack levels used:    1
  5916 ;; Hardware stack levels required when called:    7
  5917 ;; This function calls:
  5918 ;;		___lwtoft
  5919 ;;		_delay10ms
  5920 ;;		_lcd_clear
  5921 ;;		_lcd_gotoxy
  5922 ;;		_lcd_putch
  5923 ;;		_measure_freq
  5924 ;;		_put_str
  5925 ;; This function is called by:
  5926 ;;		_main
  5927 ;; This function uses a non-reentrant model
  5928 ;;
  5929                           
  5930                           	psect	text30
  5931  0000'                    __ptext30:
  5932                           	opt stack 0
  5933  0000'                    _calibrate:
  5934                           	opt stack 23
  5935                           
  5936                           ;incstack = 0
  5937  0000' FFFF               	dw	65535
  5938                           
  5939                           ;measure.c: 27: uint8_t i;
  5940                           ;measure.c: 30: lcd_clear();
  5941  0002' EC00' F000'        	call	_lcd_clear	;wreg free
  5942                           
  5943                           ;measure.c: 32: lcd_gotoxy(0, 0);
  5944  0006' 0E00               	movlw	0
  5945  0008' 6A11'              	clrf	lcd_gotoxy@row,c
  5946  000A' EC00' F000'        	call	_lcd_gotoxy
  5947                           
  5948                           ;measure.c: 33: put_str("Calibrating");
  5949  000E' 0E00'              	movlw	STR_10& (0+255)
  5950  0010' EC00' F000'        	call	_put_str
  5951                           
  5952                           ;measure.c: 35: lcd_gotoxy(0, 1);
  5953  0014' 0E01               	movlw	1
  5954  0016' 6E11'              	movwf	lcd_gotoxy@row,c
  5955  0018' 0E00               	movlw	0
  5956  001A' EC00' F000'        	call	_lcd_gotoxy
  5957                           
  5958                           ;measure.c: 39: put_str("please wait...");
  5959  001E' 0E00'              	movlw	STR_11& (0+255)
  5960  0020' EC00' F000'        	call	_put_str
  5961                           
  5962                           ;measure.c: 42: LATC &= ~(1 << 5);
  5963  0024' 9A8B               	bcf	3979,5,c	;volatile
  5964                           
  5965                           ;measure.c: 44: F1 = (double)measure_freq();
  5966  0026' EC00' F000'        	call	_measure_freq	;wreg free
  5967  002A' C03F' F044'        	movff	?_measure_freq,___lwtoft@c
  5968  002E' C040' F045'        	movff	?_measure_freq+1,___lwtoft@c+1
  5969  0032' EC00' F000'        	call	___lwtoft	;wreg free
  5970  0036' C044' F00A'        	movff	?___lwtoft,_F1
  5971  003A' C045' F00B'        	movff	?___lwtoft+1,_F1+1
  5972  003E' C046' F00C'        	movff	?___lwtoft+2,_F1+2
  5973                           
  5974                           ;measure.c: 45: delay10ms(50);
  5975  0042' 0E32               	movlw	50
  5976  0044' EC00' F000'        	call	_delay10ms
  5977                           
  5978                           ;measure.c: 47: F1 = (double)measure_freq();
  5979  0048' EC00' F000'        	call	_measure_freq	;wreg free
  5980  004C' C03F' F044'        	movff	?_measure_freq,___lwtoft@c
  5981  0050' C040' F045'        	movff	?_measure_freq+1,___lwtoft@c+1
  5982  0054' EC00' F000'        	call	___lwtoft	;wreg free
  5983  0058' C044' F00A'        	movff	?___lwtoft,_F1
  5984  005C' C045' F00B'        	movff	?___lwtoft+1,_F1+1
  5985  0060' C046' F00C'        	movff	?___lwtoft+2,_F1+2
  5986                           
  5987                           ;measure.c: 48: LATC |= (1 << 5);
  5988  0064' 8A8B               	bsf	3979,5,c	;volatile
  5989                           
  5990                           ;measure.c: 50: F2 = (double)measure_freq();
  5991  0066' EC00' F000'        	call	_measure_freq	;wreg free
  5992  006A' C03F' F044'        	movff	?_measure_freq,___lwtoft@c
  5993  006E' C040' F045'        	movff	?_measure_freq+1,___lwtoft@c+1
  5994  0072' EC00' F000'        	call	___lwtoft	;wreg free
  5995  0076' C044' F000'        	movff	?___lwtoft,_F2
  5996  007A' C045' F001'        	movff	?___lwtoft+1,_F2+1
  5997  007E' C046' F002'        	movff	?___lwtoft+2,_F2+2
  5998                           
  5999                           ;measure.c: 51: delay10ms(50);
  6000  0082' 0E32               	movlw	50
  6001  0084' EC00' F000'        	call	_delay10ms
  6002                           
  6003                           ;measure.c: 53: F2 = (double)measure_freq();
  6004  0088' EC00' F000'        	call	_measure_freq	;wreg free
  6005  008C' C03F' F044'        	movff	?_measure_freq,___lwtoft@c
  6006  0090' C040' F045'        	movff	?_measure_freq+1,___lwtoft@c+1
  6007  0094' EC00' F000'        	call	___lwtoft	;wreg free
  6008  0098' C044' F000'        	movff	?___lwtoft,_F2
  6009  009C' C045' F001'        	movff	?___lwtoft+1,_F2+1
  6010  00A0' C046' F002'        	movff	?___lwtoft+2,_F2+2
  6011                           
  6012                           ;measure.c: 54: LATC &= ~(1 << 5);
  6013  00A4' 9A8B               	bcf	3979,5,c	;volatile
  6014                           
  6015                           ;measure.c: 57: lcd_gotoxy(11, 0);
  6016  00A6' 6A11'              	clrf	lcd_gotoxy@row,c
  6017  00A8' 0E0B               	movlw	11
  6018  00AA' EC00' F000'        	call	_lcd_gotoxy
  6019                           
  6020                           ;measure.c: 58: for(i = 0; i < 6; i++) {
  6021  00AE' 6A47'              	clrf	calibrate@i,c
  6022  00B0'                    l4122:
  6023  00B0' FFFF               	dw	65535	; assembler added errata NOP
  6024                           
  6025                           ;measure.c: 59: lcd_putch('=');
  6026  00B2' 0E3D               	movlw	61
  6027  00B4' EC00' F000'        	call	_lcd_putch
  6028                           
  6029                           ;measure.c: 61: delay10ms(28);
  6030  00B8' 0E1C               	movlw	28
  6031  00BA' EC00' F000'        	call	_delay10ms
  6032  00BE' 2A47'              	incf	calibrate@i,f,c
  6033  00C0' 0E05               	movlw	5
  6034  00C2' 6447'              	cpfsgt	calibrate@i,c
  6035  00C4' D7F5               	goto	l4122
  6036  00C6' 0C05               	retlw	5	;funcret
  6037  00C8' FFFF               	dw	65535	; errata NOP
  6038  00CA'                    __end_of_calibrate:
  6039                           	opt stack 0
  6040                           tblptru	equ	0xFF8
  6041                           tblptrh	equ	0xFF7
  6042                           tblptrl	equ	0xFF6
  6043                           tablat	equ	0xFF5
  6044                           prodl	equ	0xFF3
  6045                           intcon	equ	0xFF2
  6046                           intcon2	equ	0xFF1
  6047                           postinc0	equ	0xFEE
  6048                           wreg	equ	0xFE8
  6049                           postdec1	equ	0xFE5
  6050                           fsr1l	equ	0xFE1
  6051                           postinc2	equ	0xFDE
  6052                           postdec2	equ	0xFDD
  6053                           fsr2h	equ	0xFDA
  6054                           fsr2l	equ	0xFD9
  6055                           status	equ	0xFD8
  6056                           
  6057 ;; *************** function _put_str *****************
  6058 ;; Defined at:
  6059 ;;		line 501 in file "src/print.c"
  6060 ;; Parameters:    Size  Location     Type
  6061 ;;  s               1    wreg     PTR const unsigned char 
  6062 ;;		 -> STR_14(13), STR_13(10), STR_11(15), STR_10(12), 
  6063 ;; Auto vars:     Size  Location     Type
  6064 ;;  s               1   21[COMRAM] PTR const unsigned char 
  6065 ;;		 -> STR_14(13), STR_13(10), STR_11(15), STR_10(12), 
  6066 ;;  i               2   19[COMRAM] int 
  6067 ;; Return value:  Size  Location     Type
  6068 ;;		None               void
  6069 ;; Registers used:
  6070 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6071 ;; Tracked objects:
  6072 ;;		On entry : 0/0
  6073 ;;		On exit  : 0/0
  6074 ;;		Unchanged: 0/0
  6075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6076 ;;      Params:         0       0       0       0       0       0       0
  6077 ;;      Locals:         3       0       0       0       0       0       0
  6078 ;;      Temps:          1       0       0       0       0       0       0
  6079 ;;      Totals:         4       0       0       0       0       0       0
  6080 ;;Total ram usage:        4 bytes
  6081 ;; Hardware stack levels used:    1
  6082 ;; Hardware stack levels required when called:    6
  6083 ;; This function calls:
  6084 ;;		_output_putch
  6085 ;; This function is called by:
  6086 ;;		_calibrate
  6087 ;;		_measure_capacitance
  6088 ;;		_measure_inductance
  6089 ;; This function uses a non-reentrant model
  6090 ;;
  6091                           
  6092                           	psect	text31
  6093  0000'                    __ptext31:
  6094                           	opt stack 0
  6095  0000'                    _put_str:
  6096                           	opt stack 23
  6097                           
  6098                           ;incstack = 0
  6099  0000' FFFF               	dw	65535
  6100                           
  6101                           ;put_str@s stored from wreg
  6102  0002' 6E15'              	movwf	put_str@s,c
  6103                           
  6104                           ;print.c: 502: int i;
  6105                           ;print.c: 504: for(i = 0; s[i]; i++) {
  6106  0004' 6A13'              	clrf	put_str@i,c
  6107  0006' 6A14'              	clrf	put_str@i+1,c
  6108  0008' D00D               	goto	l3908
  6109  000A'                    l3904:
  6110  000A' FFFF               	dw	65535	; assembler added errata NOP
  6111                           
  6112                           ;print.c: 505: output_putch(s[i]);
  6113  000C' 5015'              	movf	put_str@s,w,c
  6114  000E' 2413'              	addwf	put_str@i,w,c
  6115  0010' 6E00'              	movwf	??_put_str& (0+255),c
  6116  0012' C012' FFF6         	movff	??_put_str,tblptrl
  6117  0016'                    	if	0	;There is only one active tblptr byte
  6118  0016'                    	endif
  6119  0016'                    	if	0	;tblptru may be non-zero
  6120  0016'                    	endif
  6121  0016'                    	if	0	;tblptru may be non-zero
  6122  0016'                    	endif
  6123  0016' 0008               	tblrd		*
  6124  0018' FFFF               	dw	65535	; errata NOP
  6125  001A' 50F5               	movf	tablat,w,c
  6126  001C' EC00' F000'        	call	_output_putch
  6127  0020' 4A13'              	infsnz	put_str@i,f,c
  6128  0022' 2A14'              	incf	put_str@i+1,f,c
  6129  0024'                    l3908:
  6130  0024' FFFF               	dw	65535	; assembler added errata NOP
  6131  0026' 5015'              	movf	put_str@s,w,c
  6132  0028' 2413'              	addwf	put_str@i,w,c
  6133  002A' 6E00'              	movwf	??_put_str& (0+255),c
  6134  002C' C012' FFF6         	movff	??_put_str,tblptrl
  6135  0030'                    	if	0	;There is only one active tblptr byte
  6136  0030'                    	endif
  6137  0030'                    	if	0	;tblptru may be non-zero
  6138  0030'                    	endif
  6139  0030'                    	if	0	;tblptru may be non-zero
  6140  0030'                    	endif
  6141  0030' 0008               	tblrd		*
  6142  0032' FFFF               	dw	65535	; errata NOP
  6143  0034' 50F5               	movf	tablat,w,c
  6144  0036' B4D8               	btfsc	status,2,c
  6145  0038' 0012               	return		;funcret
  6146  003A' FFFF               	dw	65535	; assembler added errata NOP
  6147  003C' D7E6               	goto	l3904
  6148  003E' FFFF               	dw	65535	; errata NOP
  6149  0040'                    __end_of_put_str:
  6150                           	opt stack 0
  6151                           tblptru	equ	0xFF8
  6152                           tblptrh	equ	0xFF7
  6153                           tblptrl	equ	0xFF6
  6154                           tablat	equ	0xFF5
  6155                           prodl	equ	0xFF3
  6156                           intcon	equ	0xFF2
  6157                           intcon2	equ	0xFF1
  6158                           postinc0	equ	0xFEE
  6159                           wreg	equ	0xFE8
  6160                           postdec1	equ	0xFE5
  6161                           fsr1l	equ	0xFE1
  6162                           postinc2	equ	0xFDE
  6163                           postdec2	equ	0xFDD
  6164                           fsr2h	equ	0xFDA
  6165                           fsr2l	equ	0xFD9
  6166                           status	equ	0xFD8
  6167                           
  6168 ;; *************** function _output_putch *****************
  6169 ;; Defined at:
  6170 ;;		line 488 in file "src/print.c"
  6171 ;; Parameters:    Size  Location     Type
  6172 ;;  c               1    wreg     unsigned char 
  6173 ;; Auto vars:     Size  Location     Type
  6174 ;;  c               1   17[COMRAM] unsigned char 
  6175 ;; Return value:  Size  Location     Type
  6176 ;;		None               void
  6177 ;; Registers used:
  6178 ;;		wreg, status,2, status,0, cstack
  6179 ;; Tracked objects:
  6180 ;;		On entry : 0/0
  6181 ;;		On exit  : 0/0
  6182 ;;		Unchanged: 0/0
  6183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6184 ;;      Params:         0       0       0       0       0       0       0
  6185 ;;      Locals:         1       0       0       0       0       0       0
  6186 ;;      Temps:          0       0       0       0       0       0       0
  6187 ;;      Totals:         1       0       0       0       0       0       0
  6188 ;;Total ram usage:        1 bytes
  6189 ;; Hardware stack levels used:    1
  6190 ;; Hardware stack levels required when called:    5
  6191 ;; This function calls:
  6192 ;;		_lcd_putch
  6193 ;; This function is called by:
  6194 ;;		_put_str
  6195 ;; This function uses a non-reentrant model
  6196 ;;
  6197                           
  6198                           	psect	text32
  6199  0000'                    __ptext32:
  6200                           	opt stack 0
  6201  0000'                    _output_putch:
  6202                           	opt stack 23
  6203                           
  6204                           ;incstack = 0
  6205  0000' FFFF               	dw	65535
  6206                           
  6207                           ;output_putch@c stored from wreg
  6208  0002' 6E11'              	movwf	output_putch@c,c
  6209                           
  6210                           ;print.c: 490: lcd_putch(c);
  6211  0004' 5011'              	movf	output_putch@c,w,c
  6212  0006' EC00' F000'        	call	_lcd_putch
  6213  000A' 0012               	return		;funcret
  6214  000C' FFFF               	dw	65535	; errata NOP
  6215  000E'                    __end_of_output_putch:
  6216                           	opt stack 0
  6217                           tblptru	equ	0xFF8
  6218                           tblptrh	equ	0xFF7
  6219                           tblptrl	equ	0xFF6
  6220                           tablat	equ	0xFF5
  6221                           prodl	equ	0xFF3
  6222                           intcon	equ	0xFF2
  6223                           intcon2	equ	0xFF1
  6224                           postinc0	equ	0xFEE
  6225                           wreg	equ	0xFE8
  6226                           postdec1	equ	0xFE5
  6227                           fsr1l	equ	0xFE1
  6228                           postinc2	equ	0xFDE
  6229                           postdec2	equ	0xFDD
  6230                           fsr2h	equ	0xFDA
  6231                           fsr2l	equ	0xFD9
  6232                           status	equ	0xFD8
  6233                           
  6234 ;; *************** function _lcd_putch *****************
  6235 ;; Defined at:
  6236 ;;		line 170 in file "lib/lcd44780.c"
  6237 ;; Parameters:    Size  Location     Type
  6238 ;;  value           1    wreg     unsigned char 
  6239 ;; Auto vars:     Size  Location     Type
  6240 ;;  value           1   16[COMRAM] unsigned char 
  6241 ;; Return value:  Size  Location     Type
  6242 ;;		None               void
  6243 ;; Registers used:
  6244 ;;		wreg, status,2, status,0, cstack
  6245 ;; Tracked objects:
  6246 ;;		On entry : 0/0
  6247 ;;		On exit  : 0/0
  6248 ;;		Unchanged: 0/0
  6249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6250 ;;      Params:         0       0       0       0       0       0       0
  6251 ;;      Locals:         1       0       0       0       0       0       0
  6252 ;;      Temps:          0       0       0       0       0       0       0
  6253 ;;      Totals:         1       0       0       0       0       0       0
  6254 ;;Total ram usage:        1 bytes
  6255 ;; Hardware stack levels used:    1
  6256 ;; Hardware stack levels required when called:    4
  6257 ;; This function calls:
  6258 ;;		_lcd_send
  6259 ;; This function is called by:
  6260 ;;		_calibrate
  6261 ;;		_lcd_puts
  6262 ;;		_output_putch
  6263 ;; This function uses a non-reentrant model
  6264 ;;
  6265                           
  6266                           	psect	text33
  6267  0000'                    __ptext33:
  6268                           	opt stack 0
  6269  0000'                    _lcd_putch:
  6270                           	opt stack 24
  6271                           
  6272                           ;incstack = 0
  6273  0000' FFFF               	dw	65535
  6274                           
  6275                           ;lcd_putch@value stored from wreg
  6276  0002' 6E10'              	movwf	lcd_putch@value,c
  6277                           
  6278                           ;lcd44780.c: 171: lcd_send((unsigned char)value, 1);
  6279  0004' 0E01               	movlw	1
  6280  0006' 6E0E'              	movwf	lcd_send@mode,c
  6281  0008' 5010'              	movf	lcd_putch@value,w,c
  6282  000A' EC00' F000'        	call	_lcd_send
  6283  000E' 0012               	return		;funcret
  6284  0010' FFFF               	dw	65535	; errata NOP
  6285  0012'                    __end_of_lcd_putch:
  6286                           	opt stack 0
  6287                           tblptru	equ	0xFF8
  6288                           tblptrh	equ	0xFF7
  6289                           tblptrl	equ	0xFF6
  6290                           tablat	equ	0xFF5
  6291                           prodl	equ	0xFF3
  6292                           intcon	equ	0xFF2
  6293                           intcon2	equ	0xFF1
  6294                           postinc0	equ	0xFEE
  6295                           wreg	equ	0xFE8
  6296                           postdec1	equ	0xFE5
  6297                           fsr1l	equ	0xFE1
  6298                           postinc2	equ	0xFDE
  6299                           postdec2	equ	0xFDD
  6300                           fsr2h	equ	0xFDA
  6301                           fsr2l	equ	0xFD9
  6302                           status	equ	0xFD8
  6303                           
  6304 ;; *************** function _measure_freq *****************
  6305 ;; Defined at:
  6306 ;;		line 73 in file "src/measure.c"
  6307 ;; Parameters:    Size  Location     Type
  6308 ;;		None
  6309 ;; Auto vars:     Size  Location     Type
  6310 ;;  count           2   66[COMRAM] unsigned int 
  6311 ;; Return value:  Size  Location     Type
  6312 ;;                  2   63[COMRAM] unsigned short 
  6313 ;; Registers used:
  6314 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6315 ;; Tracked objects:
  6316 ;;		On entry : 0/0
  6317 ;;		On exit  : 0/0
  6318 ;;		Unchanged: 0/0
  6319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6320 ;;      Params:         2       0       0       0       0       0       0
  6321 ;;      Locals:         2       0       0       0       0       0       0
  6322 ;;      Temps:          1       0       0       0       0       0       0
  6323 ;;      Totals:         5       0       0       0       0       0       0
  6324 ;;Total ram usage:        5 bytes
  6325 ;; Hardware stack levels used:    1
  6326 ;; Hardware stack levels required when called:    6
  6327 ;; This function calls:
  6328 ;;		_buffer_init
  6329 ;;		_buffer_puts
  6330 ;;		_format_number
  6331 ;;		_lcd_gotoxy
  6332 ;;		_print_buffer
  6333 ;;		_timer0_read_ps
  6334 ;; This function is called by:
  6335 ;;		_calibrate
  6336 ;;		_measure_capacitance
  6337 ;;		_measure_inductance
  6338 ;; This function uses a non-reentrant model
  6339 ;;
  6340                           
  6341                           	psect	text34
  6342  0000'                    __ptext34:
  6343                           	opt stack 0
  6344  0000'                    _measure_freq:
  6345                           	opt stack 23
  6346                           
  6347                           ;incstack = 0
  6348  0000' FFFF               	dw	65535
  6349                           
  6350                           ;measure.c: 74: uint16_t count;
  6351                           ;measure.c: 76: INTCONbits.TMR0IF = 0;
  6352  0002' 94F2               	bcf	intcon,2,c	;volatile
  6353                           
  6354                           ;measure.c: 80: TRISA &= ~0b00010000;
  6355  0004' 9892               	bcf	3986,4,c	;volatile
  6356                           
  6357                           ;measure.c: 82: _delay((unsigned long)((20)*(20000000/4000.0)));
  6358  0006' 0E62               	movlw	98
  6359  0008' 6E00'              	movwf	??_measure_freq& (0+255),c
  6360  000A' 0E76               	movlw	118
  6361  000C'                    u4217:
  6362  000C' FFFF               	dw	65535	; errata NOP
  6363  000E' 2EE8               	decfsz	wreg,f,c
  6364  0010' D7FD               	goto	u4217
  6365  0012' 2E00'              	decfsz	??_measure_freq& (0+255),f,c
  6366  0014' D7FB               	goto	u4217
  6367  0016' D000               	nop2	
  6368                           
  6369                           ;measure.c: 85: TMR0 = 0x00;
  6370  0018' 6AD6               	clrf	4054,c	;volatile
  6371  001A' 6AD7               	clrf	4055,c	;volatile
  6372                           
  6373                           ;measure.c: 90: _delay((unsigned long)((10)*(20000000/4000.0)));
  6374  001C' 0E31               	movlw	49
  6375  001E' 6E00'              	movwf	??_measure_freq& (0+255),c
  6376  0020' 0EBB               	movlw	187
  6377  0022'                    u4227:
  6378  0022' FFFF               	dw	65535	; errata NOP
  6379  0024' 2EE8               	decfsz	wreg,f,c
  6380  0026' D7FD               	goto	u4227
  6381  0028' 2E00'              	decfsz	??_measure_freq& (0+255),f,c
  6382  002A' D7FB               	goto	u4227
  6383                           
  6384                           ;measure.c: 91: _delay((unsigned long)((10)*(20000000/4000.0)));
  6385  002C' 0E31               	movlw	49
  6386  002E' 6E00'              	movwf	??_measure_freq& (0+255),c
  6387  0030' 0EBB               	movlw	187
  6388  0032'                    u4237:
  6389  0032' FFFF               	dw	65535	; errata NOP
  6390  0034' 2EE8               	decfsz	wreg,f,c
  6391  0036' D7FD               	goto	u4237
  6392  0038' 2E00'              	decfsz	??_measure_freq& (0+255),f,c
  6393  003A' D7FB               	goto	u4237
  6394                           
  6395                           ;measure.c: 92: _delay((unsigned long)((10)*(20000000/4000.0)));
  6396  003C' 0E31               	movlw	49
  6397  003E' 6E00'              	movwf	??_measure_freq& (0+255),c
  6398  0040' 0EBB               	movlw	187
  6399  0042'                    u4247:
  6400  0042' FFFF               	dw	65535	; errata NOP
  6401  0044' 2EE8               	decfsz	wreg,f,c
  6402  0046' D7FD               	goto	u4247
  6403  0048' 2E00'              	decfsz	??_measure_freq& (0+255),f,c
  6404  004A' D7FB               	goto	u4247
  6405                           
  6406                           ;measure.c: 93: _delay((unsigned long)((10)*(20000000/4000.0)));
  6407  004C' 0E31               	movlw	49
  6408  004E' 6E00'              	movwf	??_measure_freq& (0+255),c
  6409  0050' 0EBB               	movlw	187
  6410  0052'                    u4257:
  6411  0052' FFFF               	dw	65535	; errata NOP
  6412  0054' 2EE8               	decfsz	wreg,f,c
  6413  0056' D7FD               	goto	u4257
  6414  0058' 2E00'              	decfsz	??_measure_freq& (0+255),f,c
  6415  005A' D7FB               	goto	u4257
  6416                           
  6417                           ;measure.c: 94: _delay((unsigned long)((10)*(20000000/4000.0)));
  6418  005C' 0E31               	movlw	49
  6419  005E' 6E00'              	movwf	??_measure_freq& (0+255),c
  6420  0060' 0EBB               	movlw	187
  6421  0062'                    u4267:
  6422  0062' FFFF               	dw	65535	; errata NOP
  6423  0064' 2EE8               	decfsz	wreg,f,c
  6424  0066' D7FD               	goto	u4267
  6425  0068' 2E00'              	decfsz	??_measure_freq& (0+255),f,c
  6426  006A' D7FB               	goto	u4267
  6427                           
  6428                           ;measure.c: 95: _delay((unsigned long)((10)*(20000000/4000.0)));
  6429  006C' 0E31               	movlw	49
  6430  006E' 6E00'              	movwf	??_measure_freq& (0+255),c
  6431  0070' 0EBB               	movlw	187
  6432  0072'                    u4277:
  6433  0072' FFFF               	dw	65535	; errata NOP
  6434  0074' 2EE8               	decfsz	wreg,f,c
  6435  0076' D7FD               	goto	u4277
  6436  0078' 2E00'              	decfsz	??_measure_freq& (0+255),f,c
  6437  007A' D7FB               	goto	u4277
  6438                           
  6439                           ;measure.c: 96: _delay((unsigned long)((10)*(20000000/4000.0)));
  6440  007C' 0E31               	movlw	49
  6441  007E' 6E00'              	movwf	??_measure_freq& (0+255),c
  6442  0080' 0EBB               	movlw	187
  6443  0082'                    u4287:
  6444  0082' FFFF               	dw	65535	; errata NOP
  6445  0084' 2EE8               	decfsz	wreg,f,c
  6446  0086' D7FD               	goto	u4287
  6447  0088' 2E00'              	decfsz	??_measure_freq& (0+255),f,c
  6448  008A' D7FB               	goto	u4287
  6449                           
  6450                           ;measure.c: 97: _delay((unsigned long)((10)*(20000000/4000.0)));
  6451  008C' 0E31               	movlw	49
  6452  008E' 6E00'              	movwf	??_measure_freq& (0+255),c
  6453  0090' 0EBB               	movlw	187
  6454  0092'                    u4297:
  6455  0092' FFFF               	dw	65535	; errata NOP
  6456  0094' 2EE8               	decfsz	wreg,f,c
  6457  0096' D7FD               	goto	u4297
  6458  0098' 2E00'              	decfsz	??_measure_freq& (0+255),f,c
  6459  009A' D7FB               	goto	u4297
  6460                           
  6461                           ;measure.c: 98: _delay((unsigned long)((10)*(20000000/4000.0)));
  6462  009C' 0E31               	movlw	49
  6463  009E' 6E00'              	movwf	??_measure_freq& (0+255),c
  6464  00A0' 0EBB               	movlw	187
  6465  00A2'                    u4307:
  6466  00A2' FFFF               	dw	65535	; errata NOP
  6467  00A4' 2EE8               	decfsz	wreg,f,c
  6468  00A6' D7FD               	goto	u4307
  6469  00A8' 2E00'              	decfsz	??_measure_freq& (0+255),f,c
  6470  00AA' D7FB               	goto	u4307
  6471                           
  6472                           ;measure.c: 99: _delay((unsigned long)((10)*(20000000/4000.0)));
  6473  00AC' 0E31               	movlw	49
  6474  00AE' 6E00'              	movwf	??_measure_freq& (0+255),c
  6475  00B0' 0EBB               	movlw	187
  6476  00B2'                    u4317:
  6477  00B2' FFFF               	dw	65535	; errata NOP
  6478  00B4' 2EE8               	decfsz	wreg,f,c
  6479  00B6' D7FD               	goto	u4317
  6480  00B8' 2E00'              	decfsz	??_measure_freq& (0+255),f,c
  6481  00BA' D7FB               	goto	u4317
  6482                           
  6483                           ;measure.c: 104: TRISA |= 0b00010000;
  6484  00BC' 8892               	bsf	3986,4,c	;volatile
  6485                           
  6486                           ;measure.c: 107: count = timer0_read_ps();
  6487  00BE' EC00' F000'        	call	_timer0_read_ps	;wreg free
  6488  00C2' C00D' F042'        	movff	?_timer0_read_ps,measure_freq@count
  6489  00C6' C00E' F043'        	movff	?_timer0_read_ps+1,measure_freq@count+1
  6490                           
  6491                           ;measure.c: 110: lcd_gotoxy(0, 1);
  6492  00CA' 0E01               	movlw	1
  6493  00CC' 6E11'              	movwf	lcd_gotoxy@row,c
  6494  00CE' 0E00               	movlw	0
  6495  00D0' EC00' F000'        	call	_lcd_gotoxy
  6496                           
  6497                           ;measure.c: 112: buffer_init();
  6498  00D4' EC00' F000'        	call	_buffer_init	;wreg free
  6499                           
  6500                           ; BSR set to: 0
  6501                           ;measure.c: 113: buffer_puts("Freq=");
  6502  00D8' 0E00'              	movlw	STR_12& (0+255)
  6503  00DA' EC00' F000'        	call	_buffer_puts
  6504                           
  6505                           ; BSR set to: 0
  6506                           ;measure.c: 114: format_number(count, 10, 5);
  6507  00DE' C042' F014'        	movff	measure_freq@count,format_number@n
  6508  00E2' C043' F015'        	movff	measure_freq@count+1,format_number@n+1
  6509  00E6' 0E0A               	movlw	10
  6510  00E8' 6E16'              	movwf	format_number@base,c
  6511  00EA' 0E05               	movlw	5
  6512  00EC' 6E17'              	movwf	format_number@pad,c
  6513  00EE' EC00' F000'        	call	_format_number	;wreg free
  6514                           
  6515                           ;measure.c: 115: print_buffer();
  6516  00F2' EC00' F000'        	call	_print_buffer	;wreg free
  6517                           
  6518                           ;measure.c: 117: return count;
  6519  00F6' C042' F03F'        	movff	measure_freq@count,?_measure_freq
  6520  00FA' C043' F040'        	movff	measure_freq@count+1,?_measure_freq+1
  6521  00FE' 0012               	return		;funcret
  6522  0100' FFFF               	dw	65535	; errata NOP
  6523  0102'                    __end_of_measure_freq:
  6524                           	opt stack 0
  6525                           tblptru	equ	0xFF8
  6526                           tblptrh	equ	0xFF7
  6527                           tblptrl	equ	0xFF6
  6528                           tablat	equ	0xFF5
  6529                           prodl	equ	0xFF3
  6530                           intcon	equ	0xFF2
  6531                           intcon2	equ	0xFF1
  6532                           postinc0	equ	0xFEE
  6533                           wreg	equ	0xFE8
  6534                           postdec1	equ	0xFE5
  6535                           fsr1l	equ	0xFE1
  6536                           postinc2	equ	0xFDE
  6537                           postdec2	equ	0xFDD
  6538                           fsr2h	equ	0xFDA
  6539                           fsr2l	equ	0xFD9
  6540                           status	equ	0xFD8
  6541                           
  6542 ;; *************** function _timer0_read_ps *****************
  6543 ;; Defined at:
  6544 ;;		line 77 in file "lib/timer.c"
  6545 ;; Parameters:    Size  Location     Type
  6546 ;;		None
  6547 ;; Auto vars:     Size  Location     Type
  6548 ;;  count           2   18[COMRAM] unsigned int 
  6549 ;;  prev            1   17[COMRAM] unsigned char 
  6550 ;; Return value:  Size  Location     Type
  6551 ;;                  2   13[COMRAM] unsigned short 
  6552 ;; Registers used:
  6553 ;;		wreg, status,2, status,0
  6554 ;; Tracked objects:
  6555 ;;		On entry : 0/0
  6556 ;;		On exit  : 0/0
  6557 ;;		Unchanged: 0/0
  6558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6559 ;;      Params:         2       0       0       0       0       0       0
  6560 ;;      Locals:         3       0       0       0       0       0       0
  6561 ;;      Temps:          2       0       0       0       0       0       0
  6562 ;;      Totals:         7       0       0       0       0       0       0
  6563 ;;Total ram usage:        7 bytes
  6564 ;; Hardware stack levels used:    1
  6565 ;; Hardware stack levels required when called:    2
  6566 ;; This function calls:
  6567 ;;		Nothing
  6568 ;; This function is called by:
  6569 ;;		_measure_freq
  6570 ;; This function uses a non-reentrant model
  6571 ;;
  6572                           
  6573                           	psect	text35
  6574  0000'                    __ptext35:
  6575                           	opt stack 0
  6576  0000'                    _timer0_read_ps:
  6577                           	opt stack 26
  6578                           
  6579                           ;incstack = 0
  6580  0000' FFFF               	dw	65535
  6581                           
  6582                           ;timer.c: 78: uint8_t prev = TMR0;
  6583  0002' CFD6 F011'         	movff	4054,timer0_read_ps@prev	;volatile
  6584                           
  6585                           ;timer.c: 79: uint16_t count = 0;
  6586  0006' 6A12'              	clrf	timer0_read_ps@count,c
  6587  0008' 6A13'              	clrf	timer0_read_ps@count+1,c
  6588                           
  6589                           ;timer.c: 81: T0CONbits.T0CS = 1;
  6590  000A' 8AD5               	bsf	4053,5,c	;volatile
  6591  000C'                    l458:
  6592                           
  6593                           ;timer.c: 85: T0CONbits.T0SE = 1;
  6594  000C' 88D5               	bsf	4053,4,c	;volatile
  6595                           
  6596                           ;timer.c: 87: __nop();
  6597  000E' F000               	nop	
  6598                           
  6599                           ;timer.c: 88: __nop();
  6600  0010' F000               	nop	
  6601                           
  6602                           ;timer.c: 90: T0CONbits.T0SE = 0;
  6603  0012' 98D5               	bcf	4053,4,c	;volatile
  6604                           
  6605                           ;timer.c: 92: __nop();
  6606  0014' F000               	nop	
  6607                           
  6608                           ;timer.c: 93: __nop();
  6609  0016' F000               	nop	
  6610                           
  6611                           ;timer.c: 95: ++count;
  6612  0018' 4A12'              	infsnz	timer0_read_ps@count,f,c
  6613  001A' 2A13'              	incf	timer0_read_ps@count+1,f,c
  6614                           
  6615                           ;timer.c: 98: } while(prev == TMR0 && count <= 255);
  6616  001C' 5011'              	movf	timer0_read_ps@prev,w,c
  6617  001E' 18D6               	xorwf	4054,w,c	;volatile
  6618  0020' 10D7               	iorwf	4055,w,c	;volatile
  6619  0022' E102               	bnz	l3812
  6620  0024' 0413'              	decf	timer0_read_ps@count+1,w,c
  6621  0026' E3F2               	bnc	l458
  6622  0028'                    l3812:
  6623                           
  6624                           ;timer.c: 100: count = ((prev << 8) + (256 - count));
  6625  0028' 5011'              	movf	timer0_read_ps@prev,w,c
  6626  002A' 6E00'              	movwf	(??_timer0_read_ps+1)& (0+255),c
  6627  002C' 6A00'              	clrf	??_timer0_read_ps& (0+255),c
  6628  002E' 5012'              	movf	timer0_read_ps@count,w,c
  6629  0030' 5E0F'              	subwf	??_timer0_read_ps,f,c
  6630  0032' 5013'              	movf	timer0_read_ps@count+1,w,c
  6631  0034' 5A10'              	subwfb	??_timer0_read_ps+1,f,c
  6632  0036' 0E00               	movlw	0
  6633  0038' 240F'              	addwf	??_timer0_read_ps,w,c
  6634  003A' 6E12'              	movwf	timer0_read_ps@count,c
  6635  003C' 0E01               	movlw	1
  6636  003E' 2010'              	addwfc	??_timer0_read_ps+1,w,c
  6637  0040' 6E13'              	movwf	timer0_read_ps@count+1,c
  6638                           
  6639                           ;timer.c: 101: return count;
  6640  0042' C012' F00D'        	movff	timer0_read_ps@count,?_timer0_read_ps
  6641  0046' C013' F00E'        	movff	timer0_read_ps@count+1,?_timer0_read_ps+1
  6642  004A' 0012               	return		;funcret
  6643  004C' FFFF               	dw	65535	; errata NOP
  6644  004E'                    __end_of_timer0_read_ps:
  6645                           	opt stack 0
  6646                           tblptru	equ	0xFF8
  6647                           tblptrh	equ	0xFF7
  6648                           tblptrl	equ	0xFF6
  6649                           tablat	equ	0xFF5
  6650                           prodl	equ	0xFF3
  6651                           intcon	equ	0xFF2
  6652                           intcon2	equ	0xFF1
  6653                           postinc0	equ	0xFEE
  6654                           wreg	equ	0xFE8
  6655                           postdec1	equ	0xFE5
  6656                           fsr1l	equ	0xFE1
  6657                           postinc2	equ	0xFDE
  6658                           postdec2	equ	0xFDD
  6659                           fsr2h	equ	0xFDA
  6660                           fsr2l	equ	0xFD9
  6661                           status	equ	0xFD8
  6662                           
  6663 ;; *************** function _print_buffer *****************
  6664 ;; Defined at:
  6665 ;;		line 510 in file "src/print.c"
  6666 ;; Parameters:    Size  Location     Type
  6667 ;;		None
  6668 ;; Auto vars:     Size  Location     Type
  6669 ;;		None
  6670 ;; Return value:  Size  Location     Type
  6671 ;;		None               void
  6672 ;; Registers used:
  6673 ;;		None
  6674 ;; Tracked objects:
  6675 ;;		On entry : 0/0
  6676 ;;		On exit  : 0/0
  6677 ;;		Unchanged: 0/0
  6678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6679 ;;      Params:         0       0       0       0       0       0       0
  6680 ;;      Locals:         0       0       0       0       0       0       0
  6681 ;;      Temps:          0       0       0       0       0       0       0
  6682 ;;      Totals:         0       0       0       0       0       0       0
  6683 ;;Total ram usage:        0 bytes
  6684 ;; Hardware stack levels used:    1
  6685 ;; Hardware stack levels required when called:    2
  6686 ;; This function calls:
  6687 ;;		Nothing
  6688 ;; This function is called by:
  6689 ;;		_measure_freq
  6690 ;; This function uses a non-reentrant model
  6691 ;;
  6692                           
  6693                           	psect	text36
  6694  0000'                    __ptext36:
  6695                           	opt stack 0
  6696  0000'                    _print_buffer:
  6697                           	opt stack 26
  6698                           
  6699                           ;incstack = 0
  6700  0000' FFFF               	dw	65535
  6701  0002' 0012               	return		;funcret
  6702  0004' FFFF               	dw	65535	; errata NOP
  6703  0006'                    __end_of_print_buffer:
  6704                           	opt stack 0
  6705                           tblptru	equ	0xFF8
  6706                           tblptrh	equ	0xFF7
  6707                           tblptrl	equ	0xFF6
  6708                           tablat	equ	0xFF5
  6709                           prodl	equ	0xFF3
  6710                           intcon	equ	0xFF2
  6711                           intcon2	equ	0xFF1
  6712                           postinc0	equ	0xFEE
  6713                           wreg	equ	0xFE8
  6714                           postdec1	equ	0xFE5
  6715                           fsr1l	equ	0xFE1
  6716                           postinc2	equ	0xFDE
  6717                           postdec2	equ	0xFDD
  6718                           fsr2h	equ	0xFDA
  6719                           fsr2l	equ	0xFD9
  6720                           status	equ	0xFD8
  6721                           
  6722 ;; *************** function _lcd_gotoxy *****************
  6723 ;; Defined at:
  6724 ;;		line 135 in file "lib/lcd44780.c"
  6725 ;; Parameters:    Size  Location     Type
  6726 ;;  col             1    wreg     unsigned char 
  6727 ;;  row             1   17[COMRAM] unsigned char 
  6728 ;; Auto vars:     Size  Location     Type
  6729 ;;  col             1   18[COMRAM] unsigned char 
  6730 ;;  row_offsets     4   19[COMRAM] unsigned char [4]
  6731 ;; Return value:  Size  Location     Type
  6732 ;;		None               void
  6733 ;; Registers used:
  6734 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6735 ;; Tracked objects:
  6736 ;;		On entry : 0/0
  6737 ;;		On exit  : 0/0
  6738 ;;		Unchanged: 0/0
  6739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6740 ;;      Params:         1       0       0       0       0       0       0
  6741 ;;      Locals:         5       0       0       0       0       0       0
  6742 ;;      Temps:          0       0       0       0       0       0       0
  6743 ;;      Totals:         6       0       0       0       0       0       0
  6744 ;;Total ram usage:        6 bytes
  6745 ;; Hardware stack levels used:    1
  6746 ;; Hardware stack levels required when called:    5
  6747 ;; This function calls:
  6748 ;;		_lcd_command
  6749 ;; This function is called by:
  6750 ;;		_main
  6751 ;;		_calibrate
  6752 ;;		_measure_freq
  6753 ;;		_measure_capacitance
  6754 ;;		_measure_inductance
  6755 ;;		_print_unit
  6756 ;;		_print_reading
  6757 ;;		_print_indicator
  6758 ;; This function uses a non-reentrant model
  6759 ;;
  6760                           
  6761                           	psect	text37
  6762  0000'                    __ptext37:
  6763                           	opt stack 0
  6764  0000'                    _lcd_gotoxy:
  6765                           	opt stack 24
  6766                           
  6767                           ;incstack = 0
  6768  0000' FFFF               	dw	65535
  6769                           
  6770                           ;lcd_gotoxy@col stored from wreg
  6771  0002' 6E12'              	movwf	lcd_gotoxy@col,c
  6772                           
  6773                           ;lcd44780.c: 137: uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
  6774  0004' C000' F013'        	movff	lcd_gotoxy@F2308,lcd_gotoxy@row_offsets
  6775  0008' C001' F014'        	movff	lcd_gotoxy@F2308+1,lcd_gotoxy@row_offsets+1
  6776  000C' C002' F015'        	movff	lcd_gotoxy@F2308+2,lcd_gotoxy@row_offsets+2
  6777  0010' C003' F016'        	movff	lcd_gotoxy@F2308+3,lcd_gotoxy@row_offsets+3
  6778                           
  6779                           ;lcd44780.c: 146: if(LCD_lines == 1) {
  6780  0014' 0100               	movlb	0	; () banked
  6781  0016' 0500'              	decf	_LCD_lines& (0+255),w,b
  6782  0018' E106               	bnz	l3754
  6783                           
  6784                           ; BSR set to: 0
  6785                           ;lcd44780.c: 147: row_offsets[1] = 0x14;
  6786  001A' 0E14               	movlw	20
  6787  001C' 6E14'              	movwf	lcd_gotoxy@row_offsets+1,c
  6788                           
  6789                           ;lcd44780.c: 148: row_offsets[2] = 0x28;
  6790  001E' 0E28               	movlw	40
  6791  0020' 6E15'              	movwf	lcd_gotoxy@row_offsets+2,c
  6792                           
  6793                           ;lcd44780.c: 149: row_offsets[3] = 0x3C;
  6794  0022' 0E3C               	movlw	60
  6795  0024' 6E16'              	movwf	lcd_gotoxy@row_offsets+3,c
  6796  0026'                    l3754:
  6797                           
  6798                           ; BSR set to: 0
  6799                           ;lcd44780.c: 150: }
  6800                           ;lcd44780.c: 156: lcd_command(0x80 | (col + row_offsets[row]));
  6801  0026' 5011'              	movf	lcd_gotoxy@row,w,c
  6802  0028' 0F00'              	addlw	low lcd_gotoxy@row_offsets
  6803  002A' 6ED9               	movwf	fsr2l,c
  6804  002C' 6ADA               	clrf	fsr2h,c
  6805  002E' 50DF               	movf	indf2,w,c
  6806  0030' 2412'              	addwf	lcd_gotoxy@col,w,c
  6807  0032' 0980               	iorlw	128
  6808  0034' EC00' F000'        	call	_lcd_command
  6809  0038' 0012               	return		;funcret
  6810  003A' FFFF               	dw	65535	; errata NOP
  6811  003C'                    __end_of_lcd_gotoxy:
  6812                           	opt stack 0
  6813                           tblptru	equ	0xFF8
  6814                           tblptrh	equ	0xFF7
  6815                           tblptrl	equ	0xFF6
  6816                           tablat	equ	0xFF5
  6817                           prodl	equ	0xFF3
  6818                           intcon	equ	0xFF2
  6819                           intcon2	equ	0xFF1
  6820                           postinc0	equ	0xFEE
  6821                           wreg	equ	0xFE8
  6822                           postdec1	equ	0xFE5
  6823                           fsr1l	equ	0xFE1
  6824                           indf2	equ	0xFDF
  6825                           postinc2	equ	0xFDE
  6826                           postdec2	equ	0xFDD
  6827                           fsr2h	equ	0xFDA
  6828                           fsr2l	equ	0xFD9
  6829                           status	equ	0xFD8
  6830                           
  6831 ;; *************** function _format_number *****************
  6832 ;; Defined at:
  6833 ;;		line 19 in file "lib/format.c"
  6834 ;; Parameters:    Size  Location     Type
  6835 ;;  n               2   20[COMRAM] unsigned int 
  6836 ;;  base            1   22[COMRAM] unsigned char 
  6837 ;;  pad             1   23[COMRAM] char 
  6838 ;; Auto vars:     Size  Location     Type
  6839 ;;  buf            32   26[COMRAM] unsigned char [32]
  6840 ;;  i               1   62[COMRAM] char 
  6841 ;;  di              1   61[COMRAM] unsigned char 
  6842 ;;  padchar         1   60[COMRAM] unsigned char 
  6843 ;; Return value:  Size  Location     Type
  6844 ;;		None               void
  6845 ;; Registers used:
  6846 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6847 ;; Tracked objects:
  6848 ;;		On entry : 0/0
  6849 ;;		On exit  : 0/0
  6850 ;;		Unchanged: 0/0
  6851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6852 ;;      Params:         4       0       0       0       0       0       0
  6853 ;;      Locals:        37       0       0       0       0       0       0
  6854 ;;      Temps:          2       0       0       0       0       0       0
  6855 ;;      Totals:        43       0       0       0       0       0       0
  6856 ;;Total ram usage:       43 bytes
  6857 ;; Hardware stack levels used:    1
  6858 ;; Hardware stack levels required when called:    3
  6859 ;; This function calls:
  6860 ;;		___lwdiv
  6861 ;;		___lwmod
  6862 ;;		_buffer_putch
  6863 ;; This function is called by:
  6864 ;;		_measure_freq
  6865 ;;		_print_reading
  6866 ;; This function uses a non-reentrant model
  6867 ;;
  6868                           
  6869                           	psect	text38
  6870  0000'                    __ptext38:
  6871                           	opt stack 0
  6872  0000'                    _format_number:
  6873                           	opt stack 25
  6874                           
  6875                           ;incstack = 0
  6876  0000' FFFF               	dw	65535
  6877                           
  6878                           ;format.c: 20: char buf[8 * sizeof(long)];
  6879                           ;format.c: 21: uint8_t di;
  6880                           ;format.c: 22: int8_t i = 0;
  6881  0002' 6A3E'              	clrf	format_number@i,c
  6882                           
  6883                           ;format.c: 23: char padchar = ' ';
  6884  0004' 0E20               	movlw	32
  6885  0006' 6E3C'              	movwf	format_number@padchar,c
  6886                           
  6887                           ;format.c: 25: if(pad < 0) {
  6888  0008' AE17'              	btfss	format_number@pad,7,c
  6889  000A' D003               	goto	l3774
  6890                           
  6891                           ;format.c: 26: pad = -pad;
  6892  000C' 6C17'              	negf	format_number@pad,c
  6893                           
  6894                           ;format.c: 27: padchar = '0';
  6895  000E' 0E30               	movlw	48
  6896  0010' 6E3C'              	movwf	format_number@padchar,c
  6897  0012'                    l3774:
  6898  0012' FFFF               	dw	65535	; assembler added errata NOP
  6899                           
  6900                           ;format.c: 39: di = n % base;
  6901  0014' C014' F00D'        	movff	format_number@n,___lwmod@dividend
  6902  0018' C015' F00E'        	movff	format_number@n+1,___lwmod@dividend+1
  6903  001C' C016' F00F'        	movff	format_number@base,___lwmod@divisor
  6904  0020' 6A10'              	clrf	___lwmod@divisor+1,c
  6905  0022' EC00' F000'        	call	___lwmod	;wreg free
  6906  0026' 500D'              	movf	?___lwmod,w,c
  6907  0028' 6E3D'              	movwf	format_number@di,c
  6908                           
  6909                           ;format.c: 40: buf[i++] = (di < 10 ? (uint8_t)'0' + di : (uint8_t)'A' + di - 10);
  6910  002A' 0E09               	movlw	9
  6911  002C' 643D'              	cpfsgt	format_number@di,c
  6912  002E' D002               	goto	l3780
  6913  0030' 0E37               	movlw	55
  6914  0032' D002               	goto	L6
  6915  0034'                    l3780:
  6916  0034' FFFF               	dw	65535	; assembler added errata NOP
  6917  0036' 0E30               	movlw	48
  6918  0038'                    L6:
  6919  0038' FFFF               	dw	65535	; assembler added errata NOP
  6920  003A' 243D'              	addwf	format_number@di,w,c
  6921  003C' 6E3A'              	movwf	_format_number$576,c
  6922  003E' 6A3B'              	clrf	_format_number$576+1,c
  6923  0040' 0E00               	movlw	0
  6924  0042' 223B'              	addwfc	_format_number$576+1,f,c
  6925  0044' 503E'              	movf	format_number@i,w,c
  6926  0046' 0F00'              	addlw	low format_number@buf
  6927  0048' 6ED9               	movwf	fsr2l,c
  6928  004A' 6ADA               	clrf	fsr2h,c
  6929  004C' C03A' FFDF         	movff	_format_number$576,indf2
  6930  0050' 2A3E'              	incf	format_number@i,f,c
  6931                           
  6932                           ;format.c: 42: n /= base;
  6933  0052' C014' F00D'        	movff	format_number@n,___lwdiv@dividend
  6934  0056' C015' F00E'        	movff	format_number@n+1,___lwdiv@dividend+1
  6935  005A' C016' F00F'        	movff	format_number@base,___lwdiv@divisor
  6936  005E' 6A10'              	clrf	___lwdiv@divisor+1,c
  6937  0060' EC00' F000'        	call	___lwdiv	;wreg free
  6938  0064' C00D' F014'        	movff	?___lwdiv,format_number@n
  6939  0068' C00E' F015'        	movff	?___lwdiv+1,format_number@n+1
  6940                           
  6941                           ;format.c: 43: } while(n > 0);
  6942  006C' 5014'              	movf	format_number@n,w,c
  6943  006E' 1015'              	iorwf	format_number@n+1,w,c
  6944  0070' E004               	bz	l3792
  6945  0072' D7CF               	goto	l3774
  6946  0074'                    l3790:
  6947  0074' 503C'              	movf	format_number@padchar,w,c
  6948  0076' EC00' F000'        	call	_buffer_putch
  6949  007A'                    l3792:
  6950  007A' 0617'              	decf	format_number@pad,f,c
  6951  007C' 2817'              	incf	format_number@pad,w,c
  6952  007E' 6E00'              	movwf	??_format_number& (0+255),c
  6953  0080' 503E'              	movf	format_number@i,w,c
  6954  0082' 0A80               	xorlw	128
  6955  0084' 6E00'              	movwf	(??_format_number+1)& (0+255),c
  6956  0086' 5018'              	movf	??_format_number,w,c
  6957  0088' 0A80               	xorlw	128
  6958  008A' 5C00'              	subwf	(??_format_number+1)& (0+255),w,c
  6959  008C' E3F3               	bnc	l3790
  6960  008E'                    l3794:
  6961  008E' FFFF               	dw	65535	; assembler added errata NOP
  6962                           
  6963                           ;format.c: 47: for(; i > 0; i--) {
  6964  0090' 503E'              	movf	format_number@i,w,c
  6965  0092' 0A80               	xorlw	128
  6966  0094' 0F7F               	addlw	-129
  6967  0096' E30C               	bnc	l400
  6968                           
  6969                           ;format.c: 48: buffer_putch((char)buf[(int16_t)i - 1]);
  6970  0098' C03E' F018'        	movff	format_number@i,??_format_number
  6971  009C' 0618'              	decf	??_format_number,f,c
  6972  009E' 5018'              	movf	??_format_number,w,c
  6973  00A0' 0F00'              	addlw	low format_number@buf
  6974  00A2' 6ED9               	movwf	fsr2l,c
  6975  00A4' 6ADA               	clrf	fsr2h,c
  6976  00A6' 50DF               	movf	indf2,w,c
  6977  00A8' EC00' F000'        	call	_buffer_putch
  6978                           
  6979                           ; BSR set to: 0
  6980  00AC' 063E'              	decf	format_number@i,f,c
  6981  00AE' D7EF               	goto	l3794
  6982  00B0'                    l400:
  6983  00B0' 0012               	return		;funcret
  6984  00B2' FFFF               	dw	65535	; errata NOP
  6985  00B4'                    __end_of_format_number:
  6986                           	opt stack 0
  6987                           tblptru	equ	0xFF8
  6988                           tblptrh	equ	0xFF7
  6989                           tblptrl	equ	0xFF6
  6990                           tablat	equ	0xFF5
  6991                           prodl	equ	0xFF3
  6992                           intcon	equ	0xFF2
  6993                           intcon2	equ	0xFF1
  6994                           postinc0	equ	0xFEE
  6995                           wreg	equ	0xFE8
  6996                           postdec1	equ	0xFE5
  6997                           fsr1l	equ	0xFE1
  6998                           indf2	equ	0xFDF
  6999                           postinc2	equ	0xFDE
  7000                           postdec2	equ	0xFDD
  7001                           fsr2h	equ	0xFDA
  7002                           fsr2l	equ	0xFD9
  7003                           status	equ	0xFD8
  7004                           
  7005 ;; *************** function ___lwmod *****************
  7006 ;; Defined at:
  7007 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lwmod.c"
  7008 ;; Parameters:    Size  Location     Type
  7009 ;;  dividend        2   13[COMRAM] unsigned int 
  7010 ;;  divisor         2   15[COMRAM] unsigned int 
  7011 ;; Auto vars:     Size  Location     Type
  7012 ;;  counter         1   17[COMRAM] unsigned char 
  7013 ;; Return value:  Size  Location     Type
  7014 ;;                  2   13[COMRAM] unsigned int 
  7015 ;; Registers used:
  7016 ;;		wreg, status,2, status,0
  7017 ;; Tracked objects:
  7018 ;;		On entry : 0/0
  7019 ;;		On exit  : 0/0
  7020 ;;		Unchanged: 0/0
  7021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7022 ;;      Params:         4       0       0       0       0       0       0
  7023 ;;      Locals:         1       0       0       0       0       0       0
  7024 ;;      Temps:          0       0       0       0       0       0       0
  7025 ;;      Totals:         5       0       0       0       0       0       0
  7026 ;;Total ram usage:        5 bytes
  7027 ;; Hardware stack levels used:    1
  7028 ;; Hardware stack levels required when called:    2
  7029 ;; This function calls:
  7030 ;;		Nothing
  7031 ;; This function is called by:
  7032 ;;		_print_reading
  7033 ;;		_format_number
  7034 ;; This function uses a non-reentrant model
  7035 ;;
  7036                           
  7037                           	psect	text39
  7038  0000'                    __ptext39:
  7039                           	opt stack 0
  7040  0000'                    ___lwmod:
  7041                           	opt stack 25
  7042                           
  7043                           ;incstack = 0
  7044  0000' FFFF               	dw	65535
  7045  0002' 500F'              	movf	___lwmod@divisor,w,c
  7046  0004' 1010'              	iorwf	___lwmod@divisor+1,w,c
  7047  0006' E01A               	bz	l1037
  7048  0008' 0E01               	movlw	1
  7049  000A' 6E11'              	movwf	___lwmod@counter,c
  7050  000C' D005               	goto	l3738
  7051  000E'                    l3736:
  7052  000E' FFFF               	dw	65535	; assembler added errata NOP
  7053  0010' 90D8               	bcf	status,0,c
  7054  0012' 360F'              	rlcf	___lwmod@divisor,f,c
  7055  0014' 3610'              	rlcf	___lwmod@divisor+1,f,c
  7056  0016' 2A11'              	incf	___lwmod@counter,f,c
  7057  0018'                    l3738:
  7058  0018' FFFF               	dw	65535	; assembler added errata NOP
  7059  001A' AE10'              	btfss	___lwmod@divisor+1,7,c
  7060  001C' D7F8               	goto	l3736
  7061  001E'                    l3740:
  7062  001E' FFFF               	dw	65535	; assembler added errata NOP
  7063  0020' 500F'              	movf	___lwmod@divisor,w,c
  7064  0022' 5C0D'              	subwf	___lwmod@dividend,w,c
  7065  0024' 5010'              	movf	___lwmod@divisor+1,w,c
  7066  0026' 580E'              	subwfb	___lwmod@dividend+1,w,c
  7067  0028' E304               	bnc	l3744
  7068  002A' 500F'              	movf	___lwmod@divisor,w,c
  7069  002C' 5E0D'              	subwf	___lwmod@dividend,f,c
  7070  002E' 5010'              	movf	___lwmod@divisor+1,w,c
  7071  0030' 5A0E'              	subwfb	___lwmod@dividend+1,f,c
  7072  0032'                    l3744:
  7073  0032' 90D8               	bcf	status,0,c
  7074  0034' 3210'              	rrcf	___lwmod@divisor+1,f,c
  7075  0036' 320F'              	rrcf	___lwmod@divisor,f,c
  7076  0038' 2E11'              	decfsz	___lwmod@counter,f,c
  7077  003A' D7F1               	goto	l3740
  7078  003C'                    l1037:
  7079  003C' C00D' F00D'        	movff	___lwmod@dividend,?___lwmod
  7080  0040' C00E' F00E'        	movff	___lwmod@dividend+1,?___lwmod+1
  7081  0044' 0012               	return		;funcret
  7082  0046' FFFF               	dw	65535	; errata NOP
  7083  0048'                    __end_of___lwmod:
  7084                           	opt stack 0
  7085                           tblptru	equ	0xFF8
  7086                           tblptrh	equ	0xFF7
  7087                           tblptrl	equ	0xFF6
  7088                           tablat	equ	0xFF5
  7089                           prodl	equ	0xFF3
  7090                           intcon	equ	0xFF2
  7091                           intcon2	equ	0xFF1
  7092                           postinc0	equ	0xFEE
  7093                           wreg	equ	0xFE8
  7094                           postdec1	equ	0xFE5
  7095                           fsr1l	equ	0xFE1
  7096                           indf2	equ	0xFDF
  7097                           postinc2	equ	0xFDE
  7098                           postdec2	equ	0xFDD
  7099                           fsr2h	equ	0xFDA
  7100                           fsr2l	equ	0xFD9
  7101                           status	equ	0xFD8
  7102                           
  7103 ;; *************** function ___lwdiv *****************
  7104 ;; Defined at:
  7105 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lwdiv.c"
  7106 ;; Parameters:    Size  Location     Type
  7107 ;;  dividend        2   13[COMRAM] unsigned int 
  7108 ;;  divisor         2   15[COMRAM] unsigned int 
  7109 ;; Auto vars:     Size  Location     Type
  7110 ;;  quotient        2   18[COMRAM] unsigned int 
  7111 ;;  counter         1   17[COMRAM] unsigned char 
  7112 ;; Return value:  Size  Location     Type
  7113 ;;                  2   13[COMRAM] unsigned int 
  7114 ;; Registers used:
  7115 ;;		wreg, status,2, status,0
  7116 ;; Tracked objects:
  7117 ;;		On entry : 0/0
  7118 ;;		On exit  : 0/0
  7119 ;;		Unchanged: 0/0
  7120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7121 ;;      Params:         4       0       0       0       0       0       0
  7122 ;;      Locals:         3       0       0       0       0       0       0
  7123 ;;      Temps:          0       0       0       0       0       0       0
  7124 ;;      Totals:         7       0       0       0       0       0       0
  7125 ;;Total ram usage:        7 bytes
  7126 ;; Hardware stack levels used:    1
  7127 ;; Hardware stack levels required when called:    2
  7128 ;; This function calls:
  7129 ;;		Nothing
  7130 ;; This function is called by:
  7131 ;;		_print_reading
  7132 ;;		_format_number
  7133 ;; This function uses a non-reentrant model
  7134 ;;
  7135                           
  7136                           	psect	text40
  7137  0000'                    __ptext40:
  7138                           	opt stack 0
  7139  0000'                    ___lwdiv:
  7140                           	opt stack 25
  7141                           
  7142                           ;incstack = 0
  7143  0000' FFFF               	dw	65535
  7144  0002' 6A12'              	clrf	___lwdiv@quotient,c
  7145  0004' 6A13'              	clrf	___lwdiv@quotient+1,c
  7146  0006' 500F'              	movf	___lwdiv@divisor,w,c
  7147  0008' 1010'              	iorwf	___lwdiv@divisor+1,w,c
  7148  000A' E01E               	bz	l1027
  7149  000C' 0E01               	movlw	1
  7150  000E' 6E11'              	movwf	___lwdiv@counter,c
  7151  0010' D005               	goto	l3718
  7152  0012'                    l3716:
  7153  0012' FFFF               	dw	65535	; assembler added errata NOP
  7154  0014' 90D8               	bcf	status,0,c
  7155  0016' 360F'              	rlcf	___lwdiv@divisor,f,c
  7156  0018' 3610'              	rlcf	___lwdiv@divisor+1,f,c
  7157  001A' 2A11'              	incf	___lwdiv@counter,f,c
  7158  001C'                    l3718:
  7159  001C' FFFF               	dw	65535	; assembler added errata NOP
  7160  001E' AE10'              	btfss	___lwdiv@divisor+1,7,c
  7161  0020' D7F8               	goto	l3716
  7162  0022'                    l3720:
  7163  0022' FFFF               	dw	65535	; assembler added errata NOP
  7164  0024' 90D8               	bcf	status,0,c
  7165  0026' 3612'              	rlcf	___lwdiv@quotient,f,c
  7166  0028' 3613'              	rlcf	___lwdiv@quotient+1,f,c
  7167  002A' 500F'              	movf	___lwdiv@divisor,w,c
  7168  002C' 5C0D'              	subwf	___lwdiv@dividend,w,c
  7169  002E' 5010'              	movf	___lwdiv@divisor+1,w,c
  7170  0030' 580E'              	subwfb	___lwdiv@dividend+1,w,c
  7171  0032' E305               	bnc	l3728
  7172  0034' 500F'              	movf	___lwdiv@divisor,w,c
  7173  0036' 5E0D'              	subwf	___lwdiv@dividend,f,c
  7174  0038' 5010'              	movf	___lwdiv@divisor+1,w,c
  7175  003A' 5A0E'              	subwfb	___lwdiv@dividend+1,f,c
  7176  003C' 8012'              	bsf	___lwdiv@quotient,0,c
  7177  003E'                    l3728:
  7178  003E' 90D8               	bcf	status,0,c
  7179  0040' 3210'              	rrcf	___lwdiv@divisor+1,f,c
  7180  0042' 320F'              	rrcf	___lwdiv@divisor,f,c
  7181  0044' 2E11'              	decfsz	___lwdiv@counter,f,c
  7182  0046' D7ED               	goto	l3720
  7183  0048'                    l1027:
  7184  0048' C012' F00D'        	movff	___lwdiv@quotient,?___lwdiv
  7185  004C' C013' F00E'        	movff	___lwdiv@quotient+1,?___lwdiv+1
  7186  0050' 0012               	return		;funcret
  7187  0052' FFFF               	dw	65535	; errata NOP
  7188  0054'                    __end_of___lwdiv:
  7189                           	opt stack 0
  7190                           tblptru	equ	0xFF8
  7191                           tblptrh	equ	0xFF7
  7192                           tblptrl	equ	0xFF6
  7193                           tablat	equ	0xFF5
  7194                           prodl	equ	0xFF3
  7195                           intcon	equ	0xFF2
  7196                           intcon2	equ	0xFF1
  7197                           postinc0	equ	0xFEE
  7198                           wreg	equ	0xFE8
  7199                           postdec1	equ	0xFE5
  7200                           fsr1l	equ	0xFE1
  7201                           indf2	equ	0xFDF
  7202                           postinc2	equ	0xFDE
  7203                           postdec2	equ	0xFDD
  7204                           fsr2h	equ	0xFDA
  7205                           fsr2l	equ	0xFD9
  7206                           status	equ	0xFD8
  7207                           
  7208 ;; *************** function _buffer_puts *****************
  7209 ;; Defined at:
  7210 ;;		line 56 in file "lib/buffer.c"
  7211 ;; Parameters:    Size  Location     Type
  7212 ;;  x               1    wreg     PTR const unsigned char 
  7213 ;;		 -> STR_12(6), 
  7214 ;; Auto vars:     Size  Location     Type
  7215 ;;  x               1   16[COMRAM] PTR const unsigned char 
  7216 ;;		 -> STR_12(6), 
  7217 ;; Return value:  Size  Location     Type
  7218 ;;                  1    wreg      unsigned char 
  7219 ;; Registers used:
  7220 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7221 ;; Tracked objects:
  7222 ;;		On entry : F/0
  7223 ;;		On exit  : F/0
  7224 ;;		Unchanged: 0/0
  7225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7226 ;;      Params:         0       0       0       0       0       0       0
  7227 ;;      Locals:         1       0       0       0       0       0       0
  7228 ;;      Temps:          0       0       0       0       0       0       0
  7229 ;;      Totals:         1       0       0       0       0       0       0
  7230 ;;Total ram usage:        1 bytes
  7231 ;; Hardware stack levels used:    1
  7232 ;; Hardware stack levels required when called:    3
  7233 ;; This function calls:
  7234 ;;		_buffer_putch
  7235 ;; This function is called by:
  7236 ;;		_measure_freq
  7237 ;; This function uses a non-reentrant model
  7238 ;;
  7239                           
  7240                           	psect	text41
  7241  0000'                    __ptext41:
  7242                           	opt stack 0
  7243  0000'                    _buffer_puts:
  7244                           	opt stack 25
  7245                           
  7246                           ;incstack = 0
  7247  0000' FFFF               	dw	65535
  7248                           
  7249                           ;buffer_puts@x stored from wreg
  7250  0002' 6E10'              	movwf	buffer_puts@x,c
  7251                           
  7252                           ; BSR set to: 0
  7253                           ;buffer.c: 57: while(*x) {
  7254  0004' D009               	goto	l3826
  7255  0006'                    l3822:
  7256  0006' FFFF               	dw	65535	; assembler added errata NOP
  7257                           
  7258                           ; BSR set to: 0
  7259                           ;buffer.c: 58: buffer_putch(*x);
  7260  0008' C010' FFF6         	movff	buffer_puts@x,tblptrl
  7261  000C'                    	if	0	;There is only one active tblptr byte
  7262  000C'                    	endif
  7263  000C'                    	if	0	;tblptru may be non-zero
  7264  000C'                    	endif
  7265  000C'                    	if	0	;tblptru may be non-zero
  7266  000C'                    	endif
  7267  000C' 0008               	tblrd		*
  7268  000E' FFFF               	dw	65535	; errata NOP
  7269  0010' 50F5               	movf	tablat,w,c
  7270  0012' EC00' F000'        	call	_buffer_putch
  7271                           
  7272                           ; BSR set to: 0
  7273                           ;buffer.c: 59: ++x;
  7274  0016' 2A10'              	incf	buffer_puts@x,f,c
  7275  0018'                    l3826:
  7276  0018' FFFF               	dw	65535	; assembler added errata NOP
  7277                           
  7278                           ; BSR set to: 0
  7279  001A' C010' FFF6         	movff	buffer_puts@x,tblptrl
  7280  001E'                    	if	0	;There is only one active tblptr byte
  7281  001E'                    	endif
  7282  001E'                    	if	0	;tblptru may be non-zero
  7283  001E'                    	endif
  7284  001E'                    	if	0	;tblptru may be non-zero
  7285  001E'                    	endif
  7286  001E' 0008               	tblrd		*
  7287  0020' FFFF               	dw	65535	; errata NOP
  7288  0022' 50F5               	movf	tablat,w,c
  7289  0024' B4D8               	btfsc	status,2,c
  7290                           
  7291                           ; BSR set to: 0
  7292  0026' 0012               	return		;funcret
  7293  0028' FFFF               	dw	65535	; assembler added errata NOP
  7294  002A' D7ED               	goto	l3822
  7295  002C' FFFF               	dw	65535	; errata NOP
  7296  002E'                    __end_of_buffer_puts:
  7297                           	opt stack 0
  7298                           tblptru	equ	0xFF8
  7299                           tblptrh	equ	0xFF7
  7300                           tblptrl	equ	0xFF6
  7301                           tablat	equ	0xFF5
  7302                           prodl	equ	0xFF3
  7303                           intcon	equ	0xFF2
  7304                           intcon2	equ	0xFF1
  7305                           postinc0	equ	0xFEE
  7306                           wreg	equ	0xFE8
  7307                           postdec1	equ	0xFE5
  7308                           fsr1l	equ	0xFE1
  7309                           indf2	equ	0xFDF
  7310                           postinc2	equ	0xFDE
  7311                           postdec2	equ	0xFDD
  7312                           fsr2h	equ	0xFDA
  7313                           fsr2l	equ	0xFD9
  7314                           status	equ	0xFD8
  7315                           
  7316 ;; *************** function _buffer_putch *****************
  7317 ;; Defined at:
  7318 ;;		line 30 in file "lib/buffer.c"
  7319 ;; Parameters:    Size  Location     Type
  7320 ;;  ch              1    wreg     unsigned char 
  7321 ;; Auto vars:     Size  Location     Type
  7322 ;;  ch              1   15[COMRAM] unsigned char 
  7323 ;; Return value:  Size  Location     Type
  7324 ;;                  1    wreg      unsigned char 
  7325 ;; Registers used:
  7326 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7327 ;; Tracked objects:
  7328 ;;		On entry : 0/0
  7329 ;;		On exit  : F/0
  7330 ;;		Unchanged: 0/0
  7331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7332 ;;      Params:         0       0       0       0       0       0       0
  7333 ;;      Locals:         1       0       0       0       0       0       0
  7334 ;;      Temps:          2       0       0       0       0       0       0
  7335 ;;      Totals:         3       0       0       0       0       0       0
  7336 ;;Total ram usage:        3 bytes
  7337 ;; Hardware stack levels used:    1
  7338 ;; Hardware stack levels required when called:    2
  7339 ;; This function calls:
  7340 ;;		Nothing
  7341 ;; This function is called by:
  7342 ;;		_buffer_puts
  7343 ;;		_format_number
  7344 ;;		_format_double
  7345 ;; This function uses a non-reentrant model
  7346 ;;
  7347                           
  7348                           	psect	text42
  7349  0000'                    __ptext42:
  7350                           	opt stack 0
  7351  0000'                    _buffer_putch:
  7352                           	opt stack 25
  7353                           
  7354                           ; BSR set to: 0
  7355                           ;incstack = 0
  7356  0000' FFFF               	dw	65535
  7357                           
  7358                           ;buffer_putch@ch stored from wreg
  7359  0002' 6E0F'              	movwf	buffer_putch@ch,c
  7360                           
  7361                           ;buffer.c: 31: if(16 - buffer.n <= 0)
  7362  0004' 0E10               	movlw	16
  7363  0006' 6E00'              	movwf	??_buffer_putch& (0+255),c
  7364  0008' 6A00'              	clrf	(??_buffer_putch+1)& (0+255),c
  7365  000A' 0100               	movlb	0	; () banked
  7366  000C' 3900'              	swapf	(_buffer+16)& (0+255),w,b
  7367  000E' 0B0F               	andlw	15
  7368  0010' 5E0D'              	subwf	??_buffer_putch,f,c
  7369  0012' 0E00               	movlw	0
  7370  0014' 5A0E'              	subwfb	??_buffer_putch+1,f,c
  7371  0016' BE0E'              	btfsc	??_buffer_putch+1,7,c
  7372  0018' D017               	goto	l361
  7373  001A' 500E'              	movf	??_buffer_putch+1,w,c
  7374  001C' E102               	bnz	l3622
  7375  001E' 040D'              	decf	??_buffer_putch,w,c
  7376  0020' E313               	bnc	l361
  7377  0022'                    l3622:
  7378                           
  7379                           ; BSR set to: 0
  7380                           ;buffer.c: 33: buffer.x[buffer.n] = ch;
  7381  0022' 3900'              	swapf	(_buffer+16)& (0+255),w,b
  7382  0024' 0B0F               	andlw	15
  7383  0026' 6E00'              	movwf	??_buffer_putch& (0+255),c
  7384  0028' 500D'              	movf	??_buffer_putch,w,c
  7385  002A' 0F00'              	addlw	low _buffer
  7386  002C' 6ED9               	movwf	fsr2l,c
  7387  002E' 6ADA               	clrf	fsr2h,c
  7388  0030' C00F' FFDF         	movff	buffer_putch@ch,indf2
  7389                           
  7390                           ; BSR set to: 0
  7391                           ;buffer.c: 34: buffer.n++;
  7392  0034' 3900'              	swapf	(_buffer+16)& (0+255),w,b
  7393  0036' 0B0F               	andlw	15
  7394  0038' 6E00'              	movwf	??_buffer_putch& (0+255),c
  7395  003A' 2A0D'              	incf	??_buffer_putch,f,c
  7396  003C' 3A00'              	swapf	??_buffer_putch& (0+255),f,c
  7397  003E' 5100'              	movf	(_buffer+16)& (0+255),w,b
  7398  0040' 1800'              	xorwf	??_buffer_putch& (0+255),w,c
  7399  0042' 0B0F               	andlw	-241
  7400  0044' 1800'              	xorwf	??_buffer_putch& (0+255),w,c
  7401  0046' 6F00'              	movwf	(_buffer+16)& (0+255),b
  7402  0048'                    l361:
  7403  0048' FFFF               	dw	65535	; assembler added errata NOP
  7404                           
  7405                           ; BSR set to: 0
  7406  004A' 0012               	return		;funcret
  7407  004C' FFFF               	dw	65535	; errata NOP
  7408  004E'                    __end_of_buffer_putch:
  7409                           	opt stack 0
  7410                           tblptru	equ	0xFF8
  7411                           tblptrh	equ	0xFF7
  7412                           tblptrl	equ	0xFF6
  7413                           tablat	equ	0xFF5
  7414                           prodl	equ	0xFF3
  7415                           intcon	equ	0xFF2
  7416                           intcon2	equ	0xFF1
  7417                           postinc0	equ	0xFEE
  7418                           wreg	equ	0xFE8
  7419                           postdec1	equ	0xFE5
  7420                           fsr1l	equ	0xFE1
  7421                           indf2	equ	0xFDF
  7422                           postinc2	equ	0xFDE
  7423                           postdec2	equ	0xFDD
  7424                           fsr2h	equ	0xFDA
  7425                           fsr2l	equ	0xFD9
  7426                           status	equ	0xFD8
  7427                           
  7428 ;; *************** function _buffer_init *****************
  7429 ;; Defined at:
  7430 ;;		line 10 in file "lib/buffer.c"
  7431 ;; Parameters:    Size  Location     Type
  7432 ;;		None
  7433 ;; Auto vars:     Size  Location     Type
  7434 ;;		None
  7435 ;; Return value:  Size  Location     Type
  7436 ;;		None               void
  7437 ;; Registers used:
  7438 ;;		wreg, status,2
  7439 ;; Tracked objects:
  7440 ;;		On entry : 0/0
  7441 ;;		On exit  : F/0
  7442 ;;		Unchanged: 0/0
  7443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7444 ;;      Params:         0       0       0       0       0       0       0
  7445 ;;      Locals:         0       0       0       0       0       0       0
  7446 ;;      Temps:          0       0       0       0       0       0       0
  7447 ;;      Totals:         0       0       0       0       0       0       0
  7448 ;;Total ram usage:        0 bytes
  7449 ;; Hardware stack levels used:    1
  7450 ;; Hardware stack levels required when called:    2
  7451 ;; This function calls:
  7452 ;;		Nothing
  7453 ;; This function is called by:
  7454 ;;		_measure_freq
  7455 ;; This function uses a non-reentrant model
  7456 ;;
  7457                           
  7458                           	psect	text43
  7459  0000'                    __ptext43:
  7460                           	opt stack 0
  7461  0000'                    _buffer_init:
  7462                           	opt stack 26
  7463                           
  7464                           ; BSR set to: 0
  7465                           ;incstack = 0
  7466  0000' FFFF               	dw	65535
  7467                           
  7468                           ;buffer.c: 11: buffer.p = 0;
  7469  0002' 0EF0               	movlw	-16
  7470  0004' 0100               	movlb	0	; () banked
  7471  0006' 1700'              	andwf	(_buffer+16)& (0+255),f,b
  7472                           
  7473                           ;buffer.c: 12: buffer.n = 0;
  7474  0008' 0E0F               	movlw	-241
  7475  000A' 1700'              	andwf	(_buffer+16)& (0+255),f,b
  7476                           
  7477                           ; BSR set to: 0
  7478  000C' 0012               	return		;funcret
  7479  000E' FFFF               	dw	65535	; errata NOP
  7480  0010'                    __end_of_buffer_init:
  7481                           	opt stack 0
  7482                           tblptru	equ	0xFF8
  7483                           tblptrh	equ	0xFF7
  7484                           tblptrl	equ	0xFF6
  7485                           tablat	equ	0xFF5
  7486                           prodl	equ	0xFF3
  7487                           intcon	equ	0xFF2
  7488                           intcon2	equ	0xFF1
  7489                           postinc0	equ	0xFEE
  7490                           wreg	equ	0xFE8
  7491                           postdec1	equ	0xFE5
  7492                           fsr1l	equ	0xFE1
  7493                           indf2	equ	0xFDF
  7494                           postinc2	equ	0xFDE
  7495                           postdec2	equ	0xFDD
  7496                           fsr2h	equ	0xFDA
  7497                           fsr2l	equ	0xFD9
  7498                           status	equ	0xFD8
  7499                           
  7500 ;; *************** function _lcd_clear *****************
  7501 ;; Defined at:
  7502 ;;		line 292 in file "lib/lcd44780.c"
  7503 ;; Parameters:    Size  Location     Type
  7504 ;;		None
  7505 ;; Auto vars:     Size  Location     Type
  7506 ;;		None
  7507 ;; Return value:  Size  Location     Type
  7508 ;;		None               void
  7509 ;; Registers used:
  7510 ;;		wreg, status,2, status,0, cstack
  7511 ;; Tracked objects:
  7512 ;;		On entry : 0/0
  7513 ;;		On exit  : 0/0
  7514 ;;		Unchanged: 0/0
  7515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7516 ;;      Params:         0       0       0       0       0       0       0
  7517 ;;      Locals:         0       0       0       0       0       0       0
  7518 ;;      Temps:          1       0       0       0       0       0       0
  7519 ;;      Totals:         1       0       0       0       0       0       0
  7520 ;;Total ram usage:        1 bytes
  7521 ;; Hardware stack levels used:    1
  7522 ;; Hardware stack levels required when called:    5
  7523 ;; This function calls:
  7524 ;;		_lcd_command
  7525 ;; This function is called by:
  7526 ;;		_main
  7527 ;;		_calibrate
  7528 ;; This function uses a non-reentrant model
  7529 ;;
  7530                           
  7531                           	psect	text44
  7532  0000'                    __ptext44:
  7533                           	opt stack 0
  7534  0000'                    _lcd_clear:
  7535                           	opt stack 25
  7536                           
  7537                           ; BSR set to: 0
  7538                           ;incstack = 0
  7539  0000' FFFF               	dw	65535
  7540                           
  7541                           ;lcd44780.c: 293: lcd_command(0x01);
  7542  0002' 0E01               	movlw	1
  7543  0004' EC00' F000'        	call	_lcd_command
  7544                           
  7545                           ;lcd44780.c: 294: _delay((unsigned long)((2)*(20000000/4000.0)));
  7546  0008' 0E0A               	movlw	10
  7547  000A' 6E00'              	movwf	??_lcd_clear& (0+255),c
  7548  000C' 0EBE               	movlw	190
  7549  000E'                    u4327:
  7550  000E' FFFF               	dw	65535	; errata NOP
  7551  0010' 2EE8               	decfsz	wreg,f,c
  7552  0012' D7FD               	goto	u4327
  7553  0014' 2E00'              	decfsz	??_lcd_clear& (0+255),f,c
  7554  0016' D7FB               	goto	u4327
  7555  0018' D000               	nop2	
  7556  001A' 0012               	return		;funcret
  7557  001C' FFFF               	dw	65535	; errata NOP
  7558  001E'                    __end_of_lcd_clear:
  7559                           	opt stack 0
  7560                           tblptru	equ	0xFF8
  7561                           tblptrh	equ	0xFF7
  7562                           tblptrl	equ	0xFF6
  7563                           tablat	equ	0xFF5
  7564                           prodl	equ	0xFF3
  7565                           intcon	equ	0xFF2
  7566                           intcon2	equ	0xFF1
  7567                           postinc0	equ	0xFEE
  7568                           wreg	equ	0xFE8
  7569                           postdec1	equ	0xFE5
  7570                           fsr1l	equ	0xFE1
  7571                           indf2	equ	0xFDF
  7572                           postinc2	equ	0xFDE
  7573                           postdec2	equ	0xFDD
  7574                           fsr2h	equ	0xFDA
  7575                           fsr2l	equ	0xFD9
  7576                           status	equ	0xFD8
  7577                           
  7578 ;; *************** function _lcd_command *****************
  7579 ;; Defined at:
  7580 ;;		line 127 in file "lib/lcd44780.c"
  7581 ;; Parameters:    Size  Location     Type
  7582 ;;  value           1    wreg     unsigned char 
  7583 ;; Auto vars:     Size  Location     Type
  7584 ;;  value           1   16[COMRAM] unsigned char 
  7585 ;; Return value:  Size  Location     Type
  7586 ;;		None               void
  7587 ;; Registers used:
  7588 ;;		wreg, status,2, status,0, cstack
  7589 ;; Tracked objects:
  7590 ;;		On entry : 0/0
  7591 ;;		On exit  : 0/0
  7592 ;;		Unchanged: 0/0
  7593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7594 ;;      Params:         0       0       0       0       0       0       0
  7595 ;;      Locals:         1       0       0       0       0       0       0
  7596 ;;      Temps:          0       0       0       0       0       0       0
  7597 ;;      Totals:         1       0       0       0       0       0       0
  7598 ;;Total ram usage:        1 bytes
  7599 ;; Hardware stack levels used:    1
  7600 ;; Hardware stack levels required when called:    4
  7601 ;; This function calls:
  7602 ;;		_lcd_send
  7603 ;; This function is called by:
  7604 ;;		_lcd_gotoxy
  7605 ;;		_lcd_clear
  7606 ;;		_lcd_begin
  7607 ;; This function uses a non-reentrant model
  7608 ;;
  7609                           
  7610                           	psect	text45
  7611  0000'                    __ptext45:
  7612                           	opt stack 0
  7613  0000'                    _lcd_command:
  7614                           	opt stack 24
  7615                           
  7616                           ;incstack = 0
  7617  0000' FFFF               	dw	65535
  7618                           
  7619                           ;lcd_command@value stored from wreg
  7620  0002' 6E10'              	movwf	lcd_command@value,c
  7621                           
  7622                           ;lcd44780.c: 128: lcd_send(value, 0);
  7623  0004' 0E00               	movlw	0
  7624  0006' 6E0E'              	movwf	lcd_send@mode,c
  7625  0008' 5010'              	movf	lcd_command@value,w,c
  7626  000A' EC00' F000'        	call	_lcd_send
  7627  000E' 0012               	return		;funcret
  7628  0010' FFFF               	dw	65535	; errata NOP
  7629  0012'                    __end_of_lcd_command:
  7630                           	opt stack 0
  7631                           tblptru	equ	0xFF8
  7632                           tblptrh	equ	0xFF7
  7633                           tblptrl	equ	0xFF6
  7634                           tablat	equ	0xFF5
  7635                           prodl	equ	0xFF3
  7636                           intcon	equ	0xFF2
  7637                           intcon2	equ	0xFF1
  7638                           postinc0	equ	0xFEE
  7639                           wreg	equ	0xFE8
  7640                           postdec1	equ	0xFE5
  7641                           fsr1l	equ	0xFE1
  7642                           indf2	equ	0xFDF
  7643                           postinc2	equ	0xFDE
  7644                           postdec2	equ	0xFDD
  7645                           fsr2h	equ	0xFDA
  7646                           fsr2l	equ	0xFD9
  7647                           status	equ	0xFD8
  7648                           
  7649 ;; *************** function _lcd_send *****************
  7650 ;; Defined at:
  7651 ;;		line 103 in file "lib/lcd44780.c"
  7652 ;; Parameters:    Size  Location     Type
  7653 ;;  value           1    wreg     unsigned char 
  7654 ;;  mode            1   14[COMRAM] unsigned char 
  7655 ;; Auto vars:     Size  Location     Type
  7656 ;;  value           1   15[COMRAM] unsigned char 
  7657 ;; Return value:  Size  Location     Type
  7658 ;;		None               void
  7659 ;; Registers used:
  7660 ;;		wreg, status,2, status,0, cstack
  7661 ;; Tracked objects:
  7662 ;;		On entry : 0/0
  7663 ;;		On exit  : 0/0
  7664 ;;		Unchanged: 0/0
  7665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7666 ;;      Params:         1       0       0       0       0       0       0
  7667 ;;      Locals:         1       0       0       0       0       0       0
  7668 ;;      Temps:          0       0       0       0       0       0       0
  7669 ;;      Totals:         2       0       0       0       0       0       0
  7670 ;;Total ram usage:        2 bytes
  7671 ;; Hardware stack levels used:    1
  7672 ;; Hardware stack levels required when called:    3
  7673 ;; This function calls:
  7674 ;;		_lcd_write4bits
  7675 ;; This function is called by:
  7676 ;;		_lcd_command
  7677 ;;		_lcd_putch
  7678 ;; This function uses a non-reentrant model
  7679 ;;
  7680                           
  7681                           	psect	text46
  7682  0000'                    __ptext46:
  7683                           	opt stack 0
  7684  0000'                    _lcd_send:
  7685                           	opt stack 24
  7686                           
  7687                           ;incstack = 0
  7688  0000' FFFF               	dw	65535
  7689                           
  7690                           ;lcd_send@value stored from wreg
  7691  0002' 6E0F'              	movwf	lcd_send@value,c
  7692                           
  7693                           ;lcd44780.c: 104: if(mode) {
  7694  0004' 500E'              	movf	lcd_send@mode,w,c
  7695  0006' E002               	bz	l3424
  7696                           
  7697                           ;lcd44780.c: 105: LATB |= 0b0100;
  7698  0008' 848A               	bsf	3978,2,c	;volatile
  7699                           
  7700                           ;lcd44780.c: 106: } else {
  7701  000A' D001               	goto	l3426
  7702  000C'                    l3424:
  7703                           
  7704                           ;lcd44780.c: 107: LATB &= ~0b0100;
  7705  000C' 948A               	bcf	3978,2,c	;volatile
  7706  000E'                    l3426:
  7707  000E' FFFF               	dw	65535	; assembler added errata NOP
  7708                           
  7709                           ;lcd44780.c: 108: }
  7710                           ;lcd44780.c: 115: {
  7711                           ;lcd44780.c: 116: lcd_write4bits(value >> 4);
  7712  0010' 380F'              	swapf	lcd_send@value,w,c
  7713  0012' 0B0F               	andlw	15
  7714  0014' EC00' F000'        	call	_lcd_write4bits
  7715                           
  7716                           ;lcd44780.c: 117: lcd_write4bits(value);
  7717  0018' 500F'              	movf	lcd_send@value,w,c
  7718  001A' EC00' F000'        	call	_lcd_write4bits
  7719  001E' 0012               	return		;funcret
  7720  0020' FFFF               	dw	65535	; errata NOP
  7721  0022'                    __end_of_lcd_send:
  7722                           	opt stack 0
  7723                           tblptru	equ	0xFF8
  7724                           tblptrh	equ	0xFF7
  7725                           tblptrl	equ	0xFF6
  7726                           tablat	equ	0xFF5
  7727                           prodl	equ	0xFF3
  7728                           intcon	equ	0xFF2
  7729                           intcon2	equ	0xFF1
  7730                           postinc0	equ	0xFEE
  7731                           wreg	equ	0xFE8
  7732                           postdec1	equ	0xFE5
  7733                           fsr1l	equ	0xFE1
  7734                           indf2	equ	0xFDF
  7735                           postinc2	equ	0xFDE
  7736                           postdec2	equ	0xFDD
  7737                           fsr2h	equ	0xFDA
  7738                           fsr2l	equ	0xFD9
  7739                           status	equ	0xFD8
  7740                           
  7741 ;; *************** function _lcd_write4bits *****************
  7742 ;; Defined at:
  7743 ;;		line 34 in file "lib/lcd44780.c"
  7744 ;; Parameters:    Size  Location     Type
  7745 ;;  value           1    wreg     unsigned char 
  7746 ;; Auto vars:     Size  Location     Type
  7747 ;;  value           1   13[COMRAM] unsigned char 
  7748 ;; Return value:  Size  Location     Type
  7749 ;;		None               void
  7750 ;; Registers used:
  7751 ;;		wreg, status,2, status,0
  7752 ;; Tracked objects:
  7753 ;;		On entry : 0/0
  7754 ;;		On exit  : 0/0
  7755 ;;		Unchanged: 0/0
  7756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7757 ;;      Params:         0       0       0       0       0       0       0
  7758 ;;      Locals:         1       0       0       0       0       0       0
  7759 ;;      Temps:          0       0       0       0       0       0       0
  7760 ;;      Totals:         1       0       0       0       0       0       0
  7761 ;;Total ram usage:        1 bytes
  7762 ;; Hardware stack levels used:    1
  7763 ;; Hardware stack levels required when called:    2
  7764 ;; This function calls:
  7765 ;;		Nothing
  7766 ;; This function is called by:
  7767 ;;		_lcd_send
  7768 ;;		_lcd_begin
  7769 ;; This function uses a non-reentrant model
  7770 ;;
  7771                           
  7772                           	psect	text47
  7773  0000'                    __ptext47:
  7774                           	opt stack 0
  7775  0000'                    _lcd_write4bits:
  7776                           	opt stack 24
  7777                           
  7778                           ;incstack = 0
  7779  0000' FFFF               	dw	65535
  7780                           
  7781                           ;lcd_write4bits@value stored from wreg
  7782  0002' 6E0D'              	movwf	lcd_write4bits@value,c
  7783                           
  7784                           ;lcd44780.c: 39: LATB &= 0b00001111;
  7785  0004' 0E0F               	movlw	15
  7786  0006' 168A               	andwf	3978,f,c	;volatile
  7787                           
  7788                           ;lcd44780.c: 40: LATB |= value << 4;
  7789  0008' 380D'              	swapf	lcd_write4bits@value,w,c
  7790  000A' 0BF0               	andlw	240
  7791  000C' 128A               	iorwf	3978,f,c	;volatile
  7792                           
  7793                           ;lcd44780.c: 55: LATB |= 0b1000; _delay((unsigned long)((4)*(20000000/4000000.0))); LATB
      +                           &= ~0b1000; _delay((unsigned long)((100)*(20000000/4000000.0)));;
  7794  000E' 868A               	bsf	3978,3,c	;volatile
  7795  0010' 0E05               	movlw	5
  7796  0012'                    u4337:
  7797  0012' FFFF               	dw	65535	; errata NOP
  7798  0014' 2EE8               	decfsz	wreg,f,c
  7799  0016' D7FD               	goto	u4337
  7800  0018' 968A               	bcf	3978,3,c	;volatile
  7801  001A' 0E7D               	movlw	125
  7802  001C'                    u4347:
  7803  001C' FFFF               	dw	65535	; errata NOP
  7804  001E' 2EE8               	decfsz	wreg,f,c
  7805  0020' D7FD               	goto	u4347
  7806  0022' 0012               	return		;funcret
  7807  0024' FFFF               	dw	65535	; errata NOP
  7808  0026'                    __end_of_lcd_write4bits:
  7809                           	opt stack 0
  7810                           tblptru	equ	0xFF8
  7811                           tblptrh	equ	0xFF7
  7812                           tblptrl	equ	0xFF6
  7813                           tablat	equ	0xFF5
  7814                           prodl	equ	0xFF3
  7815                           intcon	equ	0xFF2
  7816                           intcon2	equ	0xFF1
  7817                           postinc0	equ	0xFEE
  7818                           wreg	equ	0xFE8
  7819                           postdec1	equ	0xFE5
  7820                           fsr1l	equ	0xFE1
  7821                           indf2	equ	0xFDF
  7822                           postinc2	equ	0xFDE
  7823                           postdec2	equ	0xFDD
  7824                           fsr2h	equ	0xFDA
  7825                           fsr2l	equ	0xFD9
  7826                           status	equ	0xFD8
  7827                           
  7828 ;; *************** function _delay10ms *****************
  7829 ;; Defined at:
  7830 ;;		line 64 in file "D:\\Sources\\lc-meter\\obj\\../LC-meter.c"
  7831 ;; Parameters:    Size  Location     Type
  7832 ;;  period_10ms     1    wreg     unsigned char 
  7833 ;; Auto vars:     Size  Location     Type
  7834 ;;  period_10ms     1    0[COMRAM] unsigned char 
  7835 ;; Return value:  Size  Location     Type
  7836 ;;		None               void
  7837 ;; Registers used:
  7838 ;;		wreg
  7839 ;; Tracked objects:
  7840 ;;		On entry : 0/0
  7841 ;;		On exit  : 0/0
  7842 ;;		Unchanged: 0/0
  7843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7844 ;;      Params:         0       0       0       0       0       0       0
  7845 ;;      Locals:         0       0       0       0       0       0       0
  7846 ;;      Temps:          0       0       0       0       0       0       0
  7847 ;;      Totals:         0       0       0       0       0       0       0
  7848 ;;Total ram usage:        0 bytes
  7849 ;; Hardware stack levels used:    1
  7850 ;; Hardware stack levels required when called:    2
  7851 ;; This function calls:
  7852 ;;		Nothing
  7853 ;; This function is called by:
  7854 ;;		_main
  7855 ;;		_calibrate
  7856 ;; This function uses a non-reentrant model
  7857 ;;
  7858                           
  7859                           	psect	text48
  7860  0000'                    __ptext48:
  7861                           	opt stack 0
  7862  0000'                    _delay10ms:
  7863                           	opt stack 28
  7864                           
  7865                           ;incstack = 0
  7866  0000' FFFF               	dw	65535
  7867  0002' 0012               	return		;funcret
  7868  0004' FFFF               	dw	65535	; errata NOP
  7869  0006'                    __end_of_delay10ms:
  7870                           	opt stack 0
  7871                           tblptru	equ	0xFF8
  7872                           tblptrh	equ	0xFF7
  7873                           tblptrl	equ	0xFF6
  7874                           tablat	equ	0xFF5
  7875                           prodl	equ	0xFF3
  7876                           intcon	equ	0xFF2
  7877                           intcon2	equ	0xFF1
  7878                           postinc0	equ	0xFEE
  7879                           wreg	equ	0xFE8
  7880                           postdec1	equ	0xFE5
  7881                           fsr1l	equ	0xFE1
  7882                           indf2	equ	0xFDF
  7883                           postinc2	equ	0xFDE
  7884                           postdec2	equ	0xFDD
  7885                           fsr2h	equ	0xFDA
  7886                           fsr2l	equ	0xFD9
  7887                           status	equ	0xFD8
  7888                           
  7889 ;; *************** function ___lwtoft *****************
  7890 ;; Defined at:
  7891 ;;		line 28 in file "/opt/microchip/xc8/v1.34/sources/common/lwtoft.c"
  7892 ;; Parameters:    Size  Location     Type
  7893 ;;  c               2   68[COMRAM] unsigned int 
  7894 ;; Auto vars:     Size  Location     Type
  7895 ;;		None
  7896 ;; Return value:  Size  Location     Type
  7897 ;;                  3   68[COMRAM] float 
  7898 ;; Registers used:
  7899 ;;		wreg, status,2, status,0, cstack
  7900 ;; Tracked objects:
  7901 ;;		On entry : 0/0
  7902 ;;		On exit  : 0/0
  7903 ;;		Unchanged: 0/0
  7904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7905 ;;      Params:         3       0       0       0       0       0       0
  7906 ;;      Locals:         0       0       0       0       0       0       0
  7907 ;;      Temps:          0       0       0       0       0       0       0
  7908 ;;      Totals:         3       0       0       0       0       0       0
  7909 ;;Total ram usage:        3 bytes
  7910 ;; Hardware stack levels used:    1
  7911 ;; Hardware stack levels required when called:    3
  7912 ;; This function calls:
  7913 ;;		___ftpack
  7914 ;; This function is called by:
  7915 ;;		_calibrate
  7916 ;;		_measure_capacitance
  7917 ;;		_measure_inductance
  7918 ;; This function uses a non-reentrant model
  7919 ;;
  7920                           
  7921                           	psect	text49
  7922  0000'                    __ptext49:
  7923                           	opt stack 0
  7924  0000'                    ___lwtoft:
  7925                           	opt stack 26
  7926                           
  7927                           ;incstack = 0
  7928  0000' FFFF               	dw	65535
  7929  0002' C044' F00D'        	movff	___lwtoft@c,___ftpack@arg
  7930  0006' C045' F00E'        	movff	___lwtoft@c+1,___ftpack@arg+1
  7931  000A' 6A0F'              	clrf	___ftpack@arg+2,c
  7932  000C' 0E8E               	movlw	142
  7933  000E' 6E10'              	movwf	___ftpack@exp,c
  7934  0010' 0E00               	movlw	0
  7935  0012' 6E11'              	movwf	___ftpack@sign,c
  7936  0014' EC00' F000'        	call	___ftpack	;wreg free
  7937  0018' C00D' F044'        	movff	?___ftpack,?___lwtoft
  7938  001C' C00E' F045'        	movff	?___ftpack+1,?___lwtoft+1
  7939  0020' C00F' F046'        	movff	?___ftpack+2,?___lwtoft+2
  7940  0024' 0012               	return		;funcret
  7941  0026' FFFF               	dw	65535	; errata NOP
  7942  0028'                    __end_of___lwtoft:
  7943                           	opt stack 0
  7944                           tblptru	equ	0xFF8
  7945                           tblptrh	equ	0xFF7
  7946                           tblptrl	equ	0xFF6
  7947                           tablat	equ	0xFF5
  7948                           prodl	equ	0xFF3
  7949                           intcon	equ	0xFF2
  7950                           intcon2	equ	0xFF1
  7951                           postinc0	equ	0xFEE
  7952                           wreg	equ	0xFE8
  7953                           postdec1	equ	0xFE5
  7954                           fsr1l	equ	0xFE1
  7955                           indf2	equ	0xFDF
  7956                           postinc2	equ	0xFDE
  7957                           postdec2	equ	0xFDD
  7958                           fsr2h	equ	0xFDA
  7959                           fsr2l	equ	0xFD9
  7960                           status	equ	0xFD8
  7961                           
  7962 ;; *************** function ___ftpack *****************
  7963 ;; Defined at:
  7964 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/float.c"
  7965 ;; Parameters:    Size  Location     Type
  7966 ;;  arg             3   13[COMRAM] unsigned um
  7967 ;;  exp             1   16[COMRAM] unsigned char 
  7968 ;;  sign            1   17[COMRAM] unsigned char 
  7969 ;; Auto vars:     Size  Location     Type
  7970 ;;		None
  7971 ;; Return value:  Size  Location     Type
  7972 ;;                  3   13[COMRAM] float 
  7973 ;; Registers used:
  7974 ;;		wreg, status,2, status,0
  7975 ;; Tracked objects:
  7976 ;;		On entry : 0/0
  7977 ;;		On exit  : 0/0
  7978 ;;		Unchanged: 0/0
  7979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7980 ;;      Params:         5       0       0       0       0       0       0
  7981 ;;      Locals:         0       0       0       0       0       0       0
  7982 ;;      Temps:          3       0       0       0       0       0       0
  7983 ;;      Totals:         8       0       0       0       0       0       0
  7984 ;;Total ram usage:        8 bytes
  7985 ;; Hardware stack levels used:    1
  7986 ;; Hardware stack levels required when called:    2
  7987 ;; This function calls:
  7988 ;;		Nothing
  7989 ;; This function is called by:
  7990 ;;		___altoft
  7991 ;;		___awtoft
  7992 ;;		___ftadd
  7993 ;;		___ftdiv
  7994 ;;		___ftmul
  7995 ;;		___lltoft
  7996 ;;		___lwtoft
  7997 ;; This function uses a non-reentrant model
  7998 ;;
  7999                           
  8000                           	psect	text50
  8001  0000'                    __ptext50:
  8002                           	opt stack 0
  8003  0000'                    ___ftpack:
  8004                           	opt stack 26
  8005                           
  8006                           ;incstack = 0
  8007  0000' FFFF               	dw	65535
  8008  0002' 5010'              	movf	___ftpack@exp,w,c
  8009  0004' E004               	bz	l775
  8010  0006' 500D'              	movf	___ftpack@arg,w,c
  8011  0008' 100E'              	iorwf	___ftpack@arg+1,w,c
  8012  000A' 100F'              	iorwf	___ftpack@arg+2,w,c
  8013  000C' E10A               	bnz	l3392
  8014  000E'                    l775:
  8015  000E' 6A0D'              	clrf	?___ftpack,c
  8016  0010' 6A0E'              	clrf	?___ftpack+1,c
  8017  0012' 6A0F'              	clrf	?___ftpack+2,c
  8018  0014' D03E               	goto	l776
  8019  0016'                    l3390:
  8020  0016' FFFF               	dw	65535	; assembler added errata NOP
  8021  0018' 2A10'              	incf	___ftpack@exp,f,c
  8022  001A' 90D8               	bcf	status,0,c
  8023  001C' 320F'              	rrcf	___ftpack@arg+2,f,c
  8024  001E' 320E'              	rrcf	___ftpack@arg+1,f,c
  8025  0020' 320D'              	rrcf	___ftpack@arg,f,c
  8026  0022'                    l3392:
  8027  0022' 6A00'              	clrf	??___ftpack& (0+255),c
  8028  0024' 6A00'              	clrf	(??___ftpack+1)& (0+255),c
  8029  0026' 0EFE               	movlw	254
  8030  0028' 140F'              	andwf	___ftpack@arg+2,w,c
  8031  002A' 6E00'              	movwf	(??___ftpack+2)& (0+255),c
  8032  002C' 5012'              	movf	??___ftpack,w,c
  8033  002E' 1013'              	iorwf	??___ftpack+1,w,c
  8034  0030' 1014'              	iorwf	??___ftpack+2,w,c
  8035  0032' E00B               	bz	l3398
  8036  0034' D7F0               	goto	l3390
  8037  0036'                    l3394:
  8038  0036' FFFF               	dw	65535	; assembler added errata NOP
  8039  0038' 2A10'              	incf	___ftpack@exp,f,c
  8040  003A' 2A0D'              	incf	___ftpack@arg,f,c
  8041  003C' 0E00               	movlw	0
  8042  003E' 220E'              	addwfc	___ftpack@arg+1,f,c
  8043  0040' 220F'              	addwfc	___ftpack@arg+2,f,c
  8044  0042' 90D8               	bcf	status,0,c
  8045  0044' 320F'              	rrcf	___ftpack@arg+2,f,c
  8046  0046' 320E'              	rrcf	___ftpack@arg+1,f,c
  8047  0048' 320D'              	rrcf	___ftpack@arg,f,c
  8048  004A'                    l3398:
  8049  004A' 6A00'              	clrf	??___ftpack& (0+255),c
  8050  004C' 6A00'              	clrf	(??___ftpack+1)& (0+255),c
  8051  004E' 500F'              	movf	___ftpack@arg+2,w,c
  8052  0050' 6E00'              	movwf	(??___ftpack+2)& (0+255),c
  8053  0052' 5012'              	movf	??___ftpack,w,c
  8054  0054' 1013'              	iorwf	??___ftpack+1,w,c
  8055  0056' 1014'              	iorwf	??___ftpack+2,w,c
  8056  0058' E007               	bz	l3402
  8057  005A' D7ED               	goto	l3394
  8058  005C'                    l3400:
  8059  005C' FFFF               	dw	65535	; assembler added errata NOP
  8060  005E' 0610'              	decf	___ftpack@exp,f,c
  8061  0060' 90D8               	bcf	status,0,c
  8062  0062' 360D'              	rlcf	___ftpack@arg,f,c
  8063  0064' 360E'              	rlcf	___ftpack@arg+1,f,c
  8064  0066' 360F'              	rlcf	___ftpack@arg+2,f,c
  8065  0068'                    l3402:
  8066  0068' BE0E'              	btfsc	___ftpack@arg+1,7,c
  8067  006A' D003               	goto	l787
  8068  006C' 0E02               	movlw	2
  8069  006E' 6010'              	cpfslt	___ftpack@exp,c
  8070  0070' D7F5               	goto	l3400
  8071  0072'                    l787:
  8072  0072' FFFF               	dw	65535	; assembler added errata NOP
  8073  0074' A010'              	btfss	___ftpack@exp,0,c
  8074  0076' 9E0E'              	bcf	___ftpack@arg+1,7,c
  8075  0078' 90D8               	bcf	status,0,c
  8076  007A' 3210'              	rrcf	___ftpack@exp,f,c
  8077  007C' 5010'              	movf	___ftpack@exp,w,c
  8078  007E' 120F'              	iorwf	___ftpack@arg+2,f,c
  8079  0080' 5011'              	movf	___ftpack@sign,w,c
  8080  0082' A4D8               	btfss	status,2,c
  8081  0084' 8E0F'              	bsf	___ftpack@arg+2,7,c
  8082  0086' C00D' F00D'        	movff	___ftpack@arg,?___ftpack
  8083  008A' C00E' F00E'        	movff	___ftpack@arg+1,?___ftpack+1
  8084  008E' C00F' F00F'        	movff	___ftpack@arg+2,?___ftpack+2
  8085  0092'                    l776:
  8086  0092' FFFF               	dw	65535	; assembler added errata NOP
  8087  0094' 0012               	return		;funcret
  8088  0096' FFFF               	dw	65535	; errata NOP
  8089  0098'                    __end_of___ftpack:
  8090                           	opt stack 0
  8091                           tblptru	equ	0xFF8
  8092                           tblptrh	equ	0xFF7
  8093                           tblptrl	equ	0xFF6
  8094                           tablat	equ	0xFF5
  8095                           prodl	equ	0xFF3
  8096                           intcon	equ	0xFF2
  8097                           intcon2	equ	0xFF1
  8098                           postinc0	equ	0xFEE
  8099                           wreg	equ	0xFE8
  8100                           postdec1	equ	0xFE5
  8101                           fsr1l	equ	0xFE1
  8102                           indf2	equ	0xFDF
  8103                           postinc2	equ	0xFDE
  8104                           postdec2	equ	0xFDD
  8105                           fsr2h	equ	0xFDA
  8106                           fsr2l	equ	0xFD9
  8107                           status	equ	0xFD8
  8108                           
  8109 ;; *************** function _isr *****************
  8110 ;; Defined at:
  8111 ;;		line 84 in file "D:\\Sources\\lc-meter\\obj\\../LC-meter.c"
  8112 ;; Parameters:    Size  Location     Type
  8113 ;;		None
  8114 ;; Auto vars:     Size  Location     Type
  8115 ;;		None
  8116 ;; Return value:  Size  Location     Type
  8117 ;;                  2  103[None  ] int 
  8118 ;; Registers used:
  8119 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8120 ;; Tracked objects:
  8121 ;;		On entry : 0/0
  8122 ;;		On exit  : 0/0
  8123 ;;		Unchanged: 0/0
  8124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8125 ;;      Params:         0       0       0       0       0       0       0
  8126 ;;      Locals:         0       0       0       0       0       0       0
  8127 ;;      Temps:          6       0       0       0       0       0       0
  8128 ;;      Totals:         6       0       0       0       0       0       0
  8129 ;;Total ram usage:        6 bytes
  8130 ;; Hardware stack levels used:    1
  8131 ;; Hardware stack levels required when called:    1
  8132 ;; This function calls:
  8133 ;;		i2___lwdiv
  8134 ;; This function is called by:
  8135 ;;		Interrupt level 2
  8136 ;; This function uses a non-reentrant model
  8137 ;;
  8138                           
  8139                           	psect	intcode
  8140  0000'                    __pintcode:
  8141                           	opt stack 0
  8142  0000'                    _isr:
  8143                           	opt stack 23
  8144                           
  8145                           ;incstack = 0
  8146  0000' FFFF               	dw	65535	; errata NOP
  8147  0002' CFE1 F009'         	movff	fsr1l,??_isr+2
  8148  0006' CFE2 F00A'         	movff	fsr1h,??_isr+3
  8149  000A' CFD9 F00B'         	movff	fsr2l,??_isr+4
  8150  000E' CFDA F00C'         	movff	fsr2h,??_isr+5
  8151                           
  8152                           ;LC-meter.c: 85: if(PIR1bits.TMR2IF) {
  8153  0012' A29E               	btfss	3998,1,c	;volatile
  8154  0014' D042               	goto	i2l3256
  8155                           
  8156                           ;LC-meter.c: 86: bres += 256;
  8157  0016' 0E00               	movlw	0
  8158  0018' 0100               	movlb	0	; () banked
  8159  001A' 2700'              	addwf	_bres& (0+255),f,b	;volatile
  8160  001C' 2B00'              	incf	(_bres+1)& (0+255),f,b	;volatile
  8161  001E' 2300'              	addwfc	(_bres+2)& (0+255),f,b	;volatile
  8162  0020' 2300'              	addwfc	(_bres+3)& (0+255),f,b	;volatile
  8163                           
  8164                           ;LC-meter.c: 87: if(bres >= ((unsigned long)((double)((20000000) / 4) / 1000))) {
  8165  0022' 5100'              	movf	(_bres+3)& (0+255),w,b	;volatile
  8166  0024' 1100'              	iorwf	(_bres+2)& (0+255),w,b	;volatile
  8167  0026' E105               	bnz	i2u282_40
  8168  0028' 0E88               	movlw	136
  8169  002A' 5D00'              	subwf	_bres& (0+255),w,b	;volatile
  8170  002C' 0E13               	movlw	19
  8171  002E' 5900'              	subwfb	(_bres+1)& (0+255),w,b	;volatile
  8172  0030' E333               	bnc	i2l3254
  8173  0032'                    i2u282_40:
  8174                           
  8175                           ; BSR set to: 0
  8176                           ;LC-meter.c: 88: bres -= ((unsigned long)((double)((20000000) / 4) / 1000));
  8177  0032' 0E88               	movlw	136
  8178  0034' 5F00'              	subwf	_bres& (0+255),f,b	;volatile
  8179  0036' 0E13               	movlw	19
  8180  0038' 5B00'              	subwfb	(_bres+1)& (0+255),f,b	;volatile
  8181  003A' 0E00               	movlw	0
  8182  003C' 5B00'              	subwfb	(_bres+2)& (0+255),f,b	;volatile
  8183  003E' 5B00'              	subwfb	(_bres+3)& (0+255),f,b	;volatile
  8184                           
  8185                           ; BSR set to: 0
  8186                           ;LC-meter.c: 89: msecpart++;
  8187  0040' 4B00'              	infsnz	_msecpart& (0+255),f,b	;volatile
  8188  0042' 2B00'              	incf	(_msecpart+1)& (0+255),f,b	;volatile
  8189                           
  8190                           ; BSR set to: 0
  8191                           ;LC-meter.c: 90: led_cycle++;
  8192  0044' 4A06'              	infsnz	_led_cycle,f,c	;volatile
  8193  0046' 2A07'              	incf	_led_cycle+1,f,c	;volatile
  8194                           
  8195                           ; BSR set to: 0
  8196                           ;LC-meter.c: 92: LATC &= ~(1 << 2); LATC |= (!!(led_cycle >= 0 && led_cycle < led_interv
      +                          al/6)) << 2;;
  8197  0048' 948B               	bcf	3979,2,c	;volatile
  8198                           
  8199                           ; BSR set to: 0
  8200  004A' C007' F000'        	movff	_led_interval,i2___lwdiv@dividend	;volatile
  8201  004E' C008' F001'        	movff	_led_interval+1,i2___lwdiv@dividend+1	;volatile
  8202  0052' 6A03'              	clrf	i2___lwdiv@divisor+1,c
  8203  0054' 0E06               	movlw	6
  8204  0056' 6E02'              	movwf	i2___lwdiv@divisor,c
  8205  0058' EC00' F000'        	call	i2___lwdiv	;wreg free
  8206  005C' 5000'              	movf	?i2___lwdiv,w,c
  8207  005E' 5C06'              	subwf	_led_cycle,w,c	;volatile
  8208  0060' 5001'              	movf	?i2___lwdiv+1,w,c
  8209  0062' 5807'              	subwfb	_led_cycle+1,w,c	;volatile
  8210  0064' E203               	bc	i2u283_40
  8211  0066' 6A00'              	clrf	??_isr& (0+255),c
  8212  0068' 2A00'              	incf	??_isr& (0+255),f,c
  8213  006A' D001               	goto	i2u284_48
  8214  006C'                    i2u283_40:
  8215  006C' 6A00'              	clrf	??_isr& (0+255),c
  8216  006E'                    i2u284_48:
  8217  006E' FFFF               	dw	65535	; assembler added errata NOP
  8218  0070' 90D8               	bcf	status,0,c
  8219  0072' 3607'              	rlcf	??_isr,f,c
  8220  0074' 90D8               	bcf	status,0,c
  8221  0076' 3407'              	rlcf	??_isr,w,c
  8222  0078' 128B               	iorwf	3979,f,c	;volatile
  8223                           
  8224                           ;LC-meter.c: 96: if(msecpart >= 1000) {
  8225  007A' 0EE8               	movlw	232
  8226  007C' 0100               	movlb	0	; () banked
  8227  007E' 5D00'              	subwf	_msecpart& (0+255),w,b	;volatile
  8228  0080' 0E03               	movlw	3
  8229  0082' 5900'              	subwfb	(_msecpart+1)& (0+255),w,b	;volatile
  8230  0084' E309               	bnc	i2l3254
  8231                           
  8232                           ; BSR set to: 0
  8233                           ;LC-meter.c: 98: seconds++;
  8234  0086' 2B00'              	incf	_seconds& (0+255),f,b	;volatile
  8235  0088' 0E00               	movlw	0
  8236  008A' 2300'              	addwfc	(_seconds+1)& (0+255),f,b	;volatile
  8237  008C' 2300'              	addwfc	(_seconds+2)& (0+255),f,b	;volatile
  8238  008E' 2300'              	addwfc	(_seconds+3)& (0+255),f,b	;volatile
  8239                           
  8240                           ;LC-meter.c: 99: msecpart -= 1000;
  8241  0090' 0EE8               	movlw	232
  8242  0092' 5F00'              	subwf	_msecpart& (0+255),f,b	;volatile
  8243  0094' 0E03               	movlw	3
  8244  0096' 5B00'              	subwfb	(_msecpart+1)& (0+255),f,b	;volatile
  8245  0098'                    i2l3254:
  8246                           
  8247                           ; BSR set to: 0
  8248                           ;LC-meter.c: 100: }
  8249                           ;LC-meter.c: 101: }
  8250                           ;LC-meter.c: 103: PIR1bits.TMR2IF=0;
  8251  0098' 929E               	bcf	3998,1,c	;volatile
  8252  009A'                    i2l3256:
  8253  009A' FFFF               	dw	65535	; assembler added errata NOP
  8254                           
  8255                           ;LC-meter.c: 104: }
  8256                           ;LC-meter.c: 106: if(PIR1bits.RCIF) { rxfifo[rxiptr] = RCREG; ser_tmp = (rxiptr + 1) & (
      +                          (uint8_t)16 - 1); if(ser_tmp != rxoptr) rxiptr = ser_tmp; }; if(PIR1bits.TXIF && PIE1bit
      +                          s.TXIE) { TXREG = txfifo[txoptr]; ++txoptr; txoptr &= ((uint8_t)16 - 1); if(txoptr == tx
      +                          iptr
  8257  009C' AA9E               	btfss	3998,5,c	;volatile
  8258  009E' D01D               	goto	i2l107
  8259  00A0' EE20' F000'        	lfsr	2,_rxiptr
  8260  00A4' 50DF               	movf	indf2,w,c
  8261  00A6' 6E00'              	movwf	??_isr& (0+255),c
  8262  00A8' 6A00'              	clrf	(??_isr+1)& (0+255),c
  8263  00AA' 0E00'              	movlw	low _rxfifo
  8264  00AC' 2407'              	addwf	??_isr,w,c
  8265  00AE' 6ED9               	movwf	fsr2l,c
  8266  00B0' 0E00'              	movlw	high _rxfifo
  8267  00B2' 2008'              	addwfc	??_isr+1,w,c
  8268  00B4' 6EDA               	movwf	fsr2h,c
  8269  00B6' CFAE FFDF          	movff	4014,indf2	;volatile
  8270  00BA' C000' F007'        	movff	_rxiptr,??_isr
  8271  00BE' 2A07'              	incf	??_isr,f,c
  8272  00C0' 0E0F               	movlw	15
  8273  00C2' 1607'              	andwf	??_isr,f,c
  8274  00C4' C007' F000'        	movff	??_isr,_ser_tmp
  8275  00C8' EE20' F000'        	lfsr	2,_rxoptr
  8276  00CC' EE10' F000'        	lfsr	1,_ser_tmp
  8277  00D0' 50DE               	movf	postinc2,w,c
  8278  00D2' 18E6               	xorwf	postinc1,w,c
  8279  00D4' A4D8               	btfss	status,2,c
  8280  00D6' C000' F000'        	movff	_ser_tmp,_rxiptr
  8281  00DA'                    i2l107:
  8282  00DA' FFFF               	dw	65535	; assembler added errata NOP
  8283  00DC' B89E               	btfsc	3998,4,c	;volatile
  8284  00DE' A89D               	btfss	3997,4,c	;volatile
  8285  00E0' D020               	goto	i2l111
  8286  00E2' EE20' F000'        	lfsr	2,_txoptr
  8287  00E6' 50DF               	movf	indf2,w,c
  8288  00E8' 6E00'              	movwf	??_isr& (0+255),c
  8289  00EA' 6A00'              	clrf	(??_isr+1)& (0+255),c
  8290  00EC' 0E00'              	movlw	low _txfifo
  8291  00EE' 2407'              	addwf	??_isr,w,c
  8292  00F0' 6ED9               	movwf	fsr2l,c
  8293  00F2' 0E00'              	movlw	high _txfifo
  8294  00F4' 2008'              	addwfc	??_isr+1,w,c
  8295  00F6' 6EDA               	movwf	fsr2h,c
  8296  00F8' 50DF               	movf	indf2,w,c
  8297  00FA' 6EAD               	movwf	4013,c	;volatile
  8298  00FC' C000' FFE8         	movff	_txoptr,wreg
  8299  0100' 0F01               	addlw	1
  8300  0102' CFE8 F000'         	movff	wreg,_txoptr
  8301  0106' C000' FFE8         	movff	_txoptr,wreg
  8302  010A' 0B0F               	andlw	15
  8303  010C' CFE8 F000'         	movff	wreg,_txoptr
  8304  0110' EE20' F000'        	lfsr	2,_txiptr
  8305  0114' EE10' F000'        	lfsr	1,_txoptr
  8306  0118' 50DE               	movf	postinc2,w,c
  8307  011A' 18E6               	xorwf	postinc1,w,c
  8308  011C' B4D8               	btfsc	status,2,c
  8309  011E' 989D               	bcf	3997,4,c	;volatile
  8310  0120' 989E               	bcf	3998,4,c	;volatile
  8311  0122'                    i2l111:
  8312  0122' FFFF               	dw	65535	; assembler added errata NOP
  8313  0124' C00C' FFDA         	movff	??_isr+5,fsr2h
  8314  0128' C00B' FFD9         	movff	??_isr+4,fsr2l
  8315  012C' C00A' FFE2         	movff	??_isr+3,fsr1h
  8316  0130' C009' FFE1         	movff	??_isr+2,fsr1l
  8317  0134' 0011               	retfie		f
  8318  0136' FFFF               	dw	65535	; errata NOP
  8319  0138'                    __end_of_isr:
  8320                           	opt stack 0
  8321                           tblptru	equ	0xFF8
  8322                           tblptrh	equ	0xFF7
  8323                           tblptrl	equ	0xFF6
  8324                           tablat	equ	0xFF5
  8325                           prodl	equ	0xFF3
  8326                           intcon	equ	0xFF2
  8327                           intcon2	equ	0xFF1
  8328                           postinc0	equ	0xFEE
  8329                           wreg	equ	0xFE8
  8330                           postinc1	equ	0xFE6
  8331                           postdec1	equ	0xFE5
  8332                           fsr1h	equ	0xFE2
  8333                           fsr1l	equ	0xFE1
  8334                           indf2	equ	0xFDF
  8335                           postinc2	equ	0xFDE
  8336                           postdec2	equ	0xFDD
  8337                           fsr2h	equ	0xFDA
  8338                           fsr2l	equ	0xFD9
  8339                           status	equ	0xFD8
  8340                           
  8341 ;; *************** function i2___lwdiv *****************
  8342 ;; Defined at:
  8343 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lwdiv.c"
  8344 ;; Parameters:    Size  Location     Type
  8345 ;;  dividend        2    0[COMRAM] unsigned int 
  8346 ;;  divisor         2    2[COMRAM] unsigned int 
  8347 ;; Auto vars:     Size  Location     Type
  8348 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  8349 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  8350 ;; Return value:  Size  Location     Type
  8351 ;;                  2    0[COMRAM] unsigned int 
  8352 ;; Registers used:
  8353 ;;		wreg, status,2, status,0
  8354 ;; Tracked objects:
  8355 ;;		On entry : F/0
  8356 ;;		On exit  : F/0
  8357 ;;		Unchanged: F/0
  8358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8359 ;;      Params:         4       0       0       0       0       0       0
  8360 ;;      Locals:         3       0       0       0       0       0       0
  8361 ;;      Temps:          0       0       0       0       0       0       0
  8362 ;;      Totals:         7       0       0       0       0       0       0
  8363 ;;Total ram usage:        7 bytes
  8364 ;; Hardware stack levels used:    1
  8365 ;; This function calls:
  8366 ;;		Nothing
  8367 ;; This function is called by:
  8368 ;;		_isr
  8369 ;; This function uses a non-reentrant model
  8370 ;;
  8371                           
  8372                           	psect	text52
  8373  0000'                    __ptext52:
  8374                           	opt stack 0
  8375  0000'                    i2___lwdiv:
  8376                           	opt stack 23
  8377                           
  8378                           ;incstack = 0
  8379  0000' FFFF               	dw	65535
  8380                           
  8381                           ; BSR set to: 0
  8382  0002' 6A04'              	clrf	i2___lwdiv@quotient,c
  8383  0004' 6A05'              	clrf	i2___lwdiv@quotient+1,c
  8384                           
  8385                           ; BSR set to: 0
  8386  0006' 5002'              	movf	i2___lwdiv@divisor,w,c
  8387  0008' 1003'              	iorwf	i2___lwdiv@divisor+1,w,c
  8388  000A' E01E               	bz	i2l1027
  8389                           
  8390                           ; BSR set to: 0
  8391  000C' 0E01               	movlw	1
  8392  000E' 6E06'              	movwf	i2___lwdiv@counter,c
  8393  0010' D005               	goto	i2l3222
  8394  0012'                    i2l3220:
  8395  0012' FFFF               	dw	65535	; assembler added errata NOP
  8396                           
  8397                           ; BSR set to: 0
  8398  0014' 90D8               	bcf	status,0,c
  8399  0016' 3602'              	rlcf	i2___lwdiv@divisor,f,c
  8400  0018' 3603'              	rlcf	i2___lwdiv@divisor+1,f,c
  8401  001A' 2A06'              	incf	i2___lwdiv@counter,f,c
  8402  001C'                    i2l3222:
  8403  001C' FFFF               	dw	65535	; assembler added errata NOP
  8404                           
  8405                           ; BSR set to: 0
  8406  001E' AE03'              	btfss	i2___lwdiv@divisor+1,7,c
  8407  0020' D7F8               	goto	i2l3220
  8408  0022'                    i2l3224:
  8409  0022' FFFF               	dw	65535	; assembler added errata NOP
  8410                           
  8411                           ; BSR set to: 0
  8412  0024' 90D8               	bcf	status,0,c
  8413  0026' 3604'              	rlcf	i2___lwdiv@quotient,f,c
  8414  0028' 3605'              	rlcf	i2___lwdiv@quotient+1,f,c
  8415                           
  8416                           ; BSR set to: 0
  8417  002A' 5002'              	movf	i2___lwdiv@divisor,w,c
  8418  002C' 5C00'              	subwf	i2___lwdiv@dividend,w,c
  8419  002E' 5003'              	movf	i2___lwdiv@divisor+1,w,c
  8420  0030' 5801'              	subwfb	i2___lwdiv@dividend+1,w,c
  8421  0032' E305               	bnc	i2l3232
  8422                           
  8423                           ; BSR set to: 0
  8424  0034' 5002'              	movf	i2___lwdiv@divisor,w,c
  8425  0036' 5E00'              	subwf	i2___lwdiv@dividend,f,c
  8426  0038' 5003'              	movf	i2___lwdiv@divisor+1,w,c
  8427  003A' 5A01'              	subwfb	i2___lwdiv@dividend+1,f,c
  8428                           
  8429                           ; BSR set to: 0
  8430  003C' 8004'              	bsf	i2___lwdiv@quotient,0,c
  8431  003E'                    i2l3232:
  8432                           
  8433                           ; BSR set to: 0
  8434  003E' 90D8               	bcf	status,0,c
  8435  0040' 3203'              	rrcf	i2___lwdiv@divisor+1,f,c
  8436  0042' 3202'              	rrcf	i2___lwdiv@divisor,f,c
  8437                           
  8438                           ; BSR set to: 0
  8439  0044' 2E06'              	decfsz	i2___lwdiv@counter,f,c
  8440  0046' D7ED               	goto	i2l3224
  8441  0048'                    i2l1027:
  8442                           
  8443                           ; BSR set to: 0
  8444  0048' C004' F000'        	movff	i2___lwdiv@quotient,?i2___lwdiv
  8445  004C' C005' F001'        	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  8446                           
  8447                           ; BSR set to: 0
  8448  0050' 0012               	return		;funcret
  8449  0052' FFFF               	dw	65535	; errata NOP
  8450  0054'                    __end_ofi2___lwdiv:
  8451                           	opt stack 0
  8452                           tblptru	equ	0xFF8
  8453                           tblptrh	equ	0xFF7
  8454                           tblptrl	equ	0xFF6
  8455                           tablat	equ	0xFF5
  8456                           prodl	equ	0xFF3
  8457                           intcon	equ	0xFF2
  8458                           intcon2	equ	0xFF1
  8459                           postinc0	equ	0xFEE
  8460                           wreg	equ	0xFE8
  8461                           postinc1	equ	0xFE6
  8462                           postdec1	equ	0xFE5
  8463                           fsr1h	equ	0xFE2
  8464                           fsr1l	equ	0xFE1
  8465                           indf2	equ	0xFDF
  8466                           postinc2	equ	0xFDE
  8467                           postdec2	equ	0xFDD
  8468                           fsr2h	equ	0xFDA
  8469                           fsr2l	equ	0xFD9
  8470                           status	equ	0xFD8
  8471                           tblptru	equ	0xFF8
  8472                           tblptrh	equ	0xFF7
  8473                           tblptrl	equ	0xFF6
  8474                           tablat	equ	0xFF5
  8475                           prodl	equ	0xFF3
  8476                           intcon	equ	0xFF2
  8477                           intcon2	equ	0xFF1
  8478                           postinc0	equ	0xFEE
  8479                           wreg	equ	0xFE8
  8480                           postinc1	equ	0xFE6
  8481                           postdec1	equ	0xFE5
  8482                           fsr1h	equ	0xFE2
  8483                           fsr1l	equ	0xFE1
  8484                           indf2	equ	0xFDF
  8485                           postinc2	equ	0xFDE
  8486                           postdec2	equ	0xFDD
  8487                           fsr2h	equ	0xFDA
  8488                           fsr2l	equ	0xFD9
  8489                           status	equ	0xFD8
  8490                           
  8491                           	psect	rparam
  8492  0000                     tblptru	equ	0xFF8
  8493                           tblptrh	equ	0xFF7
  8494                           tblptrl	equ	0xFF6
  8495                           tablat	equ	0xFF5
  8496                           prodl	equ	0xFF3
  8497                           intcon	equ	0xFF2
  8498                           intcon2	equ	0xFF1
  8499                           postinc0	equ	0xFEE
  8500                           wreg	equ	0xFE8
  8501                           postinc1	equ	0xFE6
  8502                           postdec1	equ	0xFE5
  8503                           fsr1h	equ	0xFE2
  8504                           fsr1l	equ	0xFE1
  8505                           indf2	equ	0xFDF
  8506                           postinc2	equ	0xFDE
  8507                           postdec2	equ	0xFDD
  8508                           fsr2h	equ	0xFDA
  8509                           fsr2l	equ	0xFD9
  8510                           status	equ	0xFD8


Data Sizes:
    Strings     138
    Constant    57
    Data        5
    BSS         53
    Persistent  9
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    101     114
    BANK0           128     60     109
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ser_puts$0	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_9(CODE[3]), STR_4(CODE[3]), STR_3(CODE[16]), STR_2(CODE[16]), 

    eval_poly@d	PTR const  size(1) Largest target is 30
		 -> exp@coeff(CODE[30]), log@coeff(CODE[27]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(BANK0[2]), 

    buffer_puts@x	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_12(CODE[6]), 

    put_str@s	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_14(CODE[13]), STR_13(CODE[10]), STR_11(CODE[15]), STR_10(CODE[12]), 

    print_unit@units	PTR const unsigned char [8] size(1) Largest target is 3
		 -> STR_22(CODE[3]), STR_21(CODE[3]), STR_20(CODE[3]), STR_19(CODE[3]), 
		 -> STR_18(CODE[3]), STR_17(CODE[3]), STR_16(CODE[3]), STR_15(CODE[2]), 

    lcd_puts@string	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_25(CODE[4]), STR_24(CODE[4]), STR_23(CODE[6]), STR_8(CODE[5]), 
		 -> STR_7(CODE[6]), STR_6(CODE[7]), STR_5(CODE[7]), STR_1(CODE[10]), 

    main$294	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_3(CODE[16]), STR_2(CODE[16]), 


Critical Paths under _main in COMRAM

    _print_indicator->_lcd_gotoxy
    _measure_inductance->___fttol
    _measure_capacitance->___fttol
    _print_unit->_lcd_gotoxy
    _print_reading->_format_number
    _lcd_puts->_lcd_putch
    _lcd_begin->_lcd_command
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->_log10
    ___altoft->___fttol
    ___ftsub->___ftadd
    ___ftdiv->___ftpack
    ___lltoft->___ftpack
    _log10->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftadd->___ftmul
    ___awtoft->___ftpack
    _calibrate->___lwtoft
    _put_str->_output_putch
    _output_putch->_lcd_putch
    _lcd_putch->_lcd_send
    _measure_freq->_format_number
    _lcd_gotoxy->_lcd_command
    _format_number->___lwdiv
    _buffer_puts->_buffer_putch
    _lcd_clear->_lcd_command
    _lcd_command->_lcd_send
    _lcd_send->_lcd_write4bits
    ___lwtoft->_measure_freq

Critical Paths under _isr in COMRAM

    _isr->i2___lwdiv

Critical Paths under _main in BANK0

    _main->_format_double
    _format_double->_pow
    _pow->_exp
    _exp->_floor
    _floor->___altoft

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  273864
                                             58 BANK0      2     2      0
                          _calibrate
                          _delay10ms
                      _format_double
                          _lcd_begin
                          _lcd_clear
                         _lcd_gotoxy
                           _lcd_init
                           _lcd_puts
                _measure_capacitance
                 _measure_inductance
                    _print_indicator
                           _ser_init
                           _ser_puts
                        _timer0_init
                        _timer2_init
 ---------------------------------------------------------------------------------
 (1) _timer2_init                                          4     4      0      90
                                             13 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _timer0_init                                         11    11      0     273
                                             13 COMRAM    11    11      0
 ---------------------------------------------------------------------------------
 (1) _ser_puts                                             0     0      0      22
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _print_indicator                                      1     1      0    2576
                                             23 COMRAM     1     1      0
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (1) _measure_inductance                                  42    42      0   43325
                                              0 BANK0     33    33      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                           ___lwtoft
                         _lcd_gotoxy
                       _measure_freq
                      _print_reading
                         _print_unit
                            _put_str
 ---------------------------------------------------------------------------------
 (1) _measure_capacitance                                 15    15      0   42815
                                              0 BANK0     15    15      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                           ___lwtoft
                         _lcd_gotoxy
                       _measure_freq
                      _print_reading
                         _print_unit
                            _put_str
 ---------------------------------------------------------------------------------
 (2) _print_unit                                           3     3      0    1842
                                             23 COMRAM     2     2      0
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (2) _print_reading                                        6     4      2    7698
                                             63 COMRAM     6     4      2
                            ___lwdiv
                            ___lwmod
                      _format_number
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (2) _lcd_puts                                             3     3      0     703
                                             17 COMRAM     3     3      0
                          _lcd_putch
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             3     3      0      46
                                             13 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcd_begin                                            3     2      1     541
                                             17 COMRAM     3     2      1
                        _lcd_command
                     _lcd_write4bits
 ---------------------------------------------------------------------------------
 (1) _format_double                                       16    13      3  169282
                                             42 BANK0     16    13      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                       _buffer_putch
                              _floor
                              _log10
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 17    11      6   94998
                                             25 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _exp                                                  9     6      3   50995
                                             16 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                7     2      5     376
                                             73 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3   12075
                                              8 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                            ___ftdiv (ARG)
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4    1024
                                             84 COMRAM    15    11      4
                            ___ftdiv (ARG)
                              _log10 (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    2314
                                             13 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    2925
                                             99 COMRAM     2     2      0
                                              0 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    6001
                                             63 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     237
                                             13 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4684
                                             21 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2823
                                             21 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _log10                                                6     3      3   37019
                                             78 COMRAM     6     3      3
                            ___ftmul
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  5     2      3   29296
                                             73 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                6     2      4     480
                                             13 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           10     4      6   12993
                                             63 COMRAM    10     4      6
                            ___ftadd
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    7524
                                             36 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4753
                                             51 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3142
                                             21 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _calibrate                                            1     1      0   11938
                                             71 COMRAM     1     1      0
                           ___lwtoft
                          _delay10ms
                          _lcd_clear
                         _lcd_gotoxy
                          _lcd_putch
                       _measure_freq
                            _put_str
 ---------------------------------------------------------------------------------
 (2) _put_str                                              4     4      0     602
                                             18 COMRAM     4     4      0
                       _output_putch
 ---------------------------------------------------------------------------------
 (3) _output_putch                                         1     1      0     340
                                             17 COMRAM     1     1      0
                          _lcd_putch
 ---------------------------------------------------------------------------------
 (3) _lcd_putch                                            1     1      0     309
                                             16 COMRAM     1     1      0
                           _lcd_send
 ---------------------------------------------------------------------------------
 (2) _measure_freq                                         5     3      2    5671
                                             63 COMRAM     5     3      2
                        _buffer_init
                        _buffer_puts
                      _format_number
                         _lcd_gotoxy
                       _print_buffer
                     _timer0_read_ps
 ---------------------------------------------------------------------------------
 (3) _timer0_read_ps                                       7     5      2     167
                                             13 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (3) _print_buffer                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           6     5      1    1842
                                             17 COMRAM     6     5      1
                        _lcd_command
 ---------------------------------------------------------------------------------
 (3) _format_number                                       43    39      4    3468
                                             20 COMRAM    43    39      4
                            ___lwdiv
                            ___lwmod
                       _buffer_putch
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     654
                                             13 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     747
                                             13 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _buffer_puts                                          1     1      0     129
                                             16 COMRAM     1     1      0
                       _buffer_putch
 ---------------------------------------------------------------------------------
 (4) _buffer_putch                                         3     3      0      31
                                             13 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _buffer_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            1     1      0     309
                                             17 COMRAM     1     1      0
                        _lcd_command
 ---------------------------------------------------------------------------------
 (3) _lcd_command                                          1     1      0     309
                                             16 COMRAM     1     1      0
                           _lcd_send
 ---------------------------------------------------------------------------------
 (4) _lcd_send                                             2     1      1     278
                                             14 COMRAM     2     1      1
                     _lcd_write4bits
 ---------------------------------------------------------------------------------
 (5) _lcd_write4bits                                       1     1      0      31
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _delay10ms                                            1     1      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3137
                                             68 COMRAM     3     0      3
                           ___ftpack
                       _measure_freq (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2644
                                             13 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  6     6      0     214
                                              7 COMRAM     6     6      0
                          i2___lwdiv
 ---------------------------------------------------------------------------------
 (8) i2___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calibrate
     ___lwtoft
       ___ftpack
       _measure_freq (ARG)
         _buffer_init
         _buffer_puts
           _buffer_putch
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _print_buffer
         _timer0_read_ps
     _delay10ms
     _lcd_clear
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_putch
       _lcd_send
         _lcd_write4bits
     _measure_freq
       _buffer_init
       _buffer_puts
         _buffer_putch
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _print_buffer
       _timer0_read_ps
     _put_str
       _output_putch
         _lcd_putch
           _lcd_send
             _lcd_write4bits
   _delay10ms
   _format_double
     ___awtoft
       ___ftpack
     ___ftdiv
       ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftsub
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
       _log10 (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
     _buffer_putch
     _floor
       ___altoft
         ___ftpack
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           _log10 (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _frexp
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftge (ARG)
       ___fttol (ARG)
         ___ftdiv (ARG)
           ___ftpack
         _log10 (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             _frexp
       _frexp (ARG)
     _log10
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _frexp
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
         _log10 (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             _frexp
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         ___fttol
           ___ftdiv (ARG)
             ___ftpack
           _log10 (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _frexp
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               _log10 (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 _log
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                   _frexp
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftge (ARG)
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             _log10 (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
           _frexp (ARG)
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _frexp
   _lcd_begin
     _lcd_command
       _lcd_send
         _lcd_write4bits
     _lcd_write4bits
   _lcd_clear
     _lcd_command
       _lcd_send
         _lcd_write4bits
   _lcd_gotoxy
     _lcd_command
       _lcd_send
         _lcd_write4bits
   _lcd_init
   _lcd_puts
     _lcd_putch
       _lcd_send
         _lcd_write4bits
   _measure_capacitance
     ___ftdiv
       ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftsub
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
       _log10 (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
     ___lwtoft
       ___ftpack
       _measure_freq (ARG)
         _buffer_init
         _buffer_puts
           _buffer_putch
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _print_buffer
         _timer0_read_ps
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _measure_freq
       _buffer_init
       _buffer_puts
         _buffer_putch
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _print_buffer
       _timer0_read_ps
     _print_reading
       ___lwdiv
       ___lwmod
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _lcd_puts
         _lcd_putch
           _lcd_send
             _lcd_write4bits
     _print_unit
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
     _put_str
       _output_putch
         _lcd_putch
           _lcd_send
             _lcd_write4bits
   _measure_inductance
     ___ftdiv
       ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftsub
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
       _log10 (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
     ___lwtoft
       ___ftpack
       _measure_freq (ARG)
         _buffer_init
         _buffer_puts
           _buffer_putch
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _print_buffer
         _timer0_read_ps
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _measure_freq
       _buffer_init
       _buffer_puts
         _buffer_putch
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _print_buffer
       _timer0_read_ps
     _print_reading
       ___lwdiv
       ___lwmod
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _lcd_puts
         _lcd_putch
           _lcd_send
             _lcd_write4bits
     _print_unit
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
     _put_str
       _output_putch
         _lcd_putch
           _lcd_send
             _lcd_write4bits
   _print_indicator
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_puts
       _lcd_putch
         _lcd_send
           _lcd_write4bits
   _ser_init
   _ser_puts
   _timer0_init
   _timer2_init

 _isr (ROOT)
   i2___lwdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     3C      6D       5       85.2%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     65      72       1       89.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      DF      15        0.0%
DATA                 0      0      DF       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sat Apr 11 09:59:15 2020

                                                        ___altoft@exp 000063  
                                                       ___altoft@sign 000064  
                                                                  _F1 00000A  
                                                                  _F2 000000  
                                                                  _F3 000003  
                                                         __CFG_BOR$ON 000000  
                                                  i2___lwdiv@dividend 000000  
                                                        ___ftadd@exp1 00003E  
                                                        ___ftadd@exp2 00003D  
                                                        ___ftadd@sign 00003C  
                                                                 l124 000124  
                                                                 l117 000106  
                                                                 l302 000012  
                                                                 l400 0000B0  
                                                                 l304 000016  
                                                                 l361 000048  
                                                                 l337 000020  
                                                                 l458 00000C  
                                                                 l824 000070  
                                                                 l841 000040  
                                                                 l842 00016C  
                                                                 l828 000094  
                                                                 l845 000066  
                                                                 l909 0000C6  
                                                                 l775 00000E  
                                                                 l776 000092  
                                                                 l856 0000FA  
                                                                 l865 00010C  
                                                                 l873 0000B4  
                                                                 l866 000120  
                                                                 l874 00003A  
                                                                 l882 00005E  
                                                                 l787 000072  
                                                                 l795 00002C  
                                                                 l876 000084  
                                                                 l796 0000D2  
                                                                 l990 0000E6  
                                                                 l798 0000C6  
                                                                 l888 0000D6  
                                                                 l898 00000E  
                                                        __CFG_CPD$OFF 000000  
                                                      lcd_begin@lines 000013  
                                                                 _exp 000000  
                                                                 _log 000000  
                                                                 _isr 000000  
                                                                 _pow 000000  
                                                        __CFG_BORV$27 000000  
                                                                 wreg 000FE8  
                                                  timer0_read_ps@prev 000011  
                                                        __CFG_LVP$OFF 000000  
                                              __end_of_lcd_write4bits 000026  
                                                        ___ftdiv@cntr 00001E  
                                                        ___ftdiv@sign 000023  
                                                        __CFG_WDT$OFF 000000  
                                                                l1027 000048  
                                                                l1037 00003C  
                                                                l3000 00007A  
                                                                l1065 000144  
                                                                l1091 0001B4  
                                                                l1069 000138  
                                                                l1094 00008E  
                                                                l1095 0001A8  
                                                                l4000 0000B2  
                                                                l4020 00000C  
                                                                l3400 00005C  
                                                                l3402 000068  
                                                                l4122 0000B0  
                                                                l2620 000030  
                                                                l4028 00001C  
                                                                l2454 00001E  
                                                                l4054 0000AE  
                                                                l4046 000074  
                                                                l4150 0001E8  
                                                                l4206 00001A  
                                                                l3424 00000C  
                                                                l3520 00003A  
                                                                l3440 000024  
                                                                l2624 000038  
                                                                l4136 00005E  
                                                                l3426 00000E  
                                                                l3442 000030  
                                                                l3610 0000B6  
                                                                l3602 00008E  
                                                                l2634 000050  
                                                                l4146 0001BC  
                                                                l4154 000212  
                                                                l3700 000014  
                                                                l3508 000146  
                                                                l3604 00009A  
                                                                l4084 000124  
                                                                l4068 00002C  
                                                                l4172 00005E  
                                                                l3390 000016  
                                                                l3622 000022  
                                                                l3462 000074  
                                                                l3534 00005E  
                                                                l3518 000032  
                                                                l3606 0000A0  
                                                                l2638 00005E  
                                                                l4086 00012A  
                                                                l4182 00035E  
                                                                l4190 0003B4  
                                                                l3392 000022  
                                                                l3720 000022  
                                                                l3456 00004E  
                                                                l3544 00008A  
                                                                l3560 000020  
                                                                l4192 0003BC  
                                                                l3394 000036  
                                                                l3490 0000CA  
                                                                l3538 000070  
                                                                l3706 00002A  
                                                                l3570 00005C  
                                                                l3642 000050  
                                                                l4186 00038A  
                                                                l3716 000012  
                                                                l3740 00001E  
                                                                l3812 000028  
                                                                l3484 0000B0  
                                                                l3548 00009C  
                                                                l3708 00008E  
                                                                l3564 000040  
                                                                l4276 0000DA  
                                                                l3398 00004A  
                                                                l3822 000006  
                                                                l3718 00001C  
                                                                l3486 0000BC  
                                                                l3478 000090  
                                                                l3670 00005E  
                                                                l3654 000032  
                                                                l3638 000036  
                                                                l4294 000116  
                                                                l3728 00003E  
                                                                l3744 000032  
                                                                l3736 00000E  
                                                                l3904 00000A  
                                                                l3496 0000EA  
                                                                l3488 0000C4  
                                                                l3832 000008  
                                                                l3576 00001A  
                                                                l3826 000018  
                                                                l3738 000018  
                                                                l3754 000026  
                                                                l3498 0000F4  
                                                                l3834 000014  
                                                                l3594 000072  
                                                                l3578 000026  
                                                                l3762 000020  
                                                                l2970 000020  
                                                                l4298 000120  
                                                                l3780 000034  
                                                                l3908 000024  
                                                                l3790 000074  
                                                                l3774 000012  
                                                                l3846 00000E  
                                                                l3598 000084  
                                                                l3870 000042  
                                                                l3758 000008  
                                                                l3792 00007A  
                                                                l3848 000018  
                                                                l3688 00000E  
                                                                l3864 000016  
                                                                l2992 000060  
                                                                l2984 000048  
                                                                l2976 000030  
                                                                l2968 000018  
                                                                l3794 00008E  
                                                                l3874 000064  
                                                                l2994 000066  
                                                                l2986 000050  
                                                                l2978 000038  
                                                                l3892 000174  
                                                                ?_exp 000010  
                                                                ?_log 000049  
                                                                l3894 00017E  
                                                                l3990 00003A  
                                                                l3984 000026  
                                                                l3994 000086  
                                                                l3996 000090  
                                                                ?_isr 000000  
                                                                ?_pow 000019  
                                                                STR_1 00008C  
                                                                STR_2 00003A  
                                                                STR_3 00004A  
                                                                STR_4 0000C1  
                                                                STR_5 000096  
                                                                STR_8 0000A3  
                                                                _LATB 000F8A  
                                                                _LATC 000F8B  
                                                                _CCal 000004  
                                                                u3311 00002A  
                                                                u3400 000046  
                                                                u3081 000012  
                                                                u3091 000026  
                                                                u3405 00003C  
                                                                u3511 000012  
                                                                u4207 0000D0  
                                                                _PIE1 000F9D  
                                                                u2608 00002A  
                                                                u4217 00000C  
                                                                u2570 000086  
                                                                u4307 0000A2  
                                                                u4227 000022  
                                                                u3291 000012  
                                                                u3531 00002A  
                                                                u4147 000022  
                                                                u4317 0000B2  
                                                                u4237 000032  
                                                                u3381 000012  
                                                                u4157 000042  
                                                                u2590 000026  
                                                                u4327 00000E  
                                                                u4247 000042  
                                                                u4167 000054  
                                                                u4337 000012  
                                                                u4257 000052  
                                                                u4177 000064  
                                                                u3490 000042  
                                                                u4347 00001C  
                                                                u4267 000062  
                                                                u4187 000084  
                                                                u3900 000086  
                                                                u2588 00008A  
                                                                u4277 000072  
                                                                u4197 00009C  
                                                                u4287 000082  
                                                                u4297 000092  
                                                                _PIR1 000F9E  
                                                                _TMR0 000FD6  
                                                                _TMR2 000FCC  
                                                        __CFG_PWRT$ON 000000  
                                                                _bres 000000  
                                                                _main 000000  
                                                        ___ftpack@arg 00000D  
                                                                _mode 000004  
                                                        ___ftpack@exp 000010  
                                                                fsr1h 000FE2  
                                                  i2___lwdiv@quotient 000004  
                                                                fsr2h 000FDA  
                                                                fsr1l 000FE1  
                                                                indf2 000FDF  
                                                                fsr2l 000FD9  
                                                                exp@x 000010  
                                                                log@x 000049  
                                               __size_of_output_putch 000000  
                                                                pow@x 000019  
                                                                pow@y 00001C  
                                                                prodl 000FF3  
                                          __end_of_measure_inductance 000414  
                                                                start 000000* 
                                                 timer0_read_ps@count 000012  
                                                      ??_buffer_putch 00000D  
                                                   _format_number$576 00003A  
                                                        ___ftmul@cntr 000031  
                                                        ___param_bank 000010  
                                                        ___ftmul@sign 000032  
                                                     _timer0_init$655 00000E  
                                                     _timer0_init$656 000010  
                                                     _timer0_init$657 000012  
                                                     _timer0_init$658 000014  
                                                        buffer_puts@x 000010  
                                                 lcd_write4bits@value 00000D  
                                                        ___fttol@exp1 000062  
                                                        lcd_send@mode 00000E  
                                                               ??_exp 000065  
                                                        ___fttol@lval 00005E  
                                                               ??_log 00004C  
                                                               ??_isr 000007  
                                                               ??_pow 000065  
                                                       __CFG_OSCS$OFF 000000  
                                                               ?_main 000000  
                                                     __end_of___ftadd 000172  
                                                               STR_10 000076  
                                                               STR_11 00005A  
                                                               STR_20 0000B5  
                                                               STR_12 00009D  
                                                               STR_21 0000AF  
                                                               STR_13 000082  
                                                               STR_22 0000B2  
                                                               STR_14 000069  
                                                               STR_23 000001  
                                                               STR_16 0000B8  
                                                               STR_24 0000A8  
                                                               STR_25 000003  
                                                               STR_17 0000BE  
                                                               STR_18 0000BB  
                                                               STR_19 0000AC  
                                                     __end_of___ftdiv 0000BA  
                                                     __end_of___ftneg 00001E  
                                                     __end_of___ftmul 0000DC  
                                                               _T0CON 000FD5  
                                                     __end_of___ftsub 00003A  
                                                     __end_of___fttol 0000CC  
                                                               _T2CON 000FCA  
                                                     __end_of___lwdiv 000054  
                                                               i2l111 000122  
                                                     __end_of___lwmod 000048  
                                                               i2l107 0000DA  
                                                               _RCREG 000FAE  
                                                    lcd_begin@dotsize 000011  
                                                               _PORTC 000F82  
                                                               _TRISA 000F92  
                                                               _TRISB 000F93  
                                                               _TRISC 000F94  
                                                               _TXREG 000FAD  
                                                       __CFG_WRT0$OFF 000000  
                                                       __CFG_WRT1$OFF 000000  
                                                       __CFG_WRT2$OFF 000000  
                                                       __CFG_WRT3$OFF 000000  
                                                        ___lltoft@exp 00001D  
                                                      __CFG_EBTR0$OFF 000000  
                                                      __CFG_EBTR1$OFF 000000  
                                                      __CFG_EBTR2$OFF 000000  
                                                        main@new_mode 00003B  
                                                      __CFG_EBTR3$OFF 000000  
                                                       __CFG_STVR$OFF 000000  
                                                       __CFG_WRTB$OFF 000000  
                                                       __CFG_WRTC$OFF 000000  
                                                       __CFG_WRTD$OFF 000000  
                                                      __CFG_EBTRB$OFF 000000  
                                                       ___awtoft@sign 000018  
                                                               _log10 000000  
                                                               _blink 00000C  
                                                               _floor 000000  
                                                               _ldexp 000000  
                                                               _frexp 000000  
                                                        _output_putch 000000  
                                                     ?_lcd_write4bits 000000  
                                                               _msecs 000000  
                                                       ___ftpack@sign 000011  
                                                               tablat 000FF5  
                                                               pow@yi 000026  
                                                     format_number@di 00003D  
                                                               status 000FD8  
                                                     __end_of_put_str 000040  
                                                     ??_print_reading 000041  
                                                         exp@exponent 000016  
                                                  __size_ofi2___lwdiv 000000  
                                                         ldexp@newexp 00004C  
                                                     __initialization 000000  
                                                         log@exponent 00004C  
                                                        __end_of_main 000140  
                                                    format_double@num 00002A  
                                                       lcd_gotoxy@col 000012  
                                                       lcd_gotoxy@row 000011  
                                                       ?_measure_freq 00003F  
                                                      __CFG_OSC$HSPLL 000000  
                                              __size_of_format_double 000000  
                                                              ??_main 000065  
                                                       ___fttol@sign1 00005D  
                                                       lcd_send@value 00000F  
                                                 format_double@weight 000033  
                                                       __activetblptr 000001  
                                              __size_of_format_number 000000  
                                                 lcd_init@fourbitmode 00000D  
                                                     __CFG_CCP2MUX$ON 000000  
                                                              ?_log10 00004E  
                                                              ?_floor 000008  
                                                              ?_ldexp 000049  
                                                              ?_frexp 00000D  
                                                    __end_of___altoft 00006E  
                                                    __end_of___awtoft 00003C  
                                                    __end_of___ftpack 000098  
                                                    __end_of___lltoft 000052  
                                                              i2l1027 000048  
                                                              i2l3220 000012  
                                                              i2l3222 00001C  
                                                              i2l3232 00003E  
                                                              i2l3224 000022  
                                                              i2l3254 000098  
                                                              i2l3256 00009A  
                                                              _INTCON 000FF2  
                                                    __end_of___lwtoft 000028  
                                                    __end_of_lcd_init 000032  
                                                __size_of_lcd_command 000000  
                                                    __end_of_lcd_send 000022  
                                                    __end_of_lcd_puts 00003C  
                                                              ___ftge 000000  
                                                           ??___ftadd 000039  
                                                           ??___ftdiv 00001B  
                                                           ??___ftneg 000010  
                                                           ??___ftmul 00002A  
                                                        ?_timer0_init 000000  
                                                           ??___ftsub 000045  
                                                __size_of_buffer_init 000000  
                                                           ??___fttol 000058  
                                                      ??_measure_freq 000041  
                                                           ??___lwdiv 000011  
                                                        ?_timer2_init 000000  
                                                           ??___lwmod 000011  
                                                              _buffer 000012  
                                                __size_of_buffer_puts 000000  
                                                              clear_0 000006  
                                                              clear_1 000012  
                                                              log10@x 00004E  
                                                              _rxfifo 000000* 
                                                              _txfifo 000000* 
                                                              _rxiptr 000000* 
                                                              _rxoptr 000000* 
                                                              floor@i 00000B  
                                                              _txiptr 000000* 
                                                              floor@x 000008  
                                               ___ftmul@f3_as_product 00002E  
                                                              _txoptr 000000* 
                                                  timer2_init@ps_mode 000010  
                                                   __end_ofi2___lwdiv 000054  
                                                        __mediumconst 000000* 
                                                              tblptrh 000FF7  
                                                              tblptrl 000FF6  
                                                              tblptru 000FF8  
                                                __end_of_buffer_putch 00004E  
                                                    format_number@buf 00001A  
                                                    format_number@pad 000017  
                                             _measure_inductance$1313 000006  
                                             _measure_inductance$1314 000013  
                                             _measure_inductance$1315 000016  
                                             _measure_inductance$1316 000019  
                                             _measure_inductance$1317 000009  
                                             _measure_inductance$1318 00000C  
                                             _measure_inductance$1319 00000F  
                                                           ??_put_str 000012  
                                                    __end_ofexp@coeff 00001F  
                                                       _format_double 000000  
                                                    __end_oflog@coeff 00003A  
                                                          __accesstop 000000* 
                                             __end_of__initialization 000038  
                                                          ___altoft@c 000000  
                                                          ___ftadd@f1 000033  
                                                          ___ftadd@f2 000036  
                                                       _format_number 000000  
                                                          ___ftge@ff1 00000D  
                                                          ___ftge@ff2 000010  
                                                        eval_poly@res 000046  
                                                       ___rparam_used 000001  
                                                          ___ftdiv@f1 000015  
                                                          ___ftdiv@f2 000018  
                                                          ___ftdiv@f3 00001F  
                                                          ___ftneg@f1 00000D  
                                                          ___awtoft@c 000015  
                                              measure_capacitance@Cin 00000C  
                                                          ___ftmul@f1 000024  
                                                          ___ftmul@f2 000027  
                                        __size_of_measure_capacitance 000000  
                                              measure_capacitance@var 00000A  
                                               lcd_gotoxy@row_offsets 000013  
                                                          ___ftsub@f1 00003F  
                                                          ___ftsub@f2 000042  
                                                          ___fttol@f1 000054  
                                                      __pcstackCOMRAM 000000  
                                                  __size_of_calibrate 000000  
                                                        __pidataBANK0 000000  
                                                  __size_of_delay10ms 000000  
                                                          ___lltoft@c 000015  
                                                       __end_of_log10 00004A  
                                                       __end_of_floor 0000D8  
                                                       __end_of_ldexp 00009A  
                                                       __end_of_frexp 000076  
                                                          ___lwtoft@c 000044  
                                                      buffer_putch@ch 00000F  
                                                  __size_of_lcd_begin 000000  
                                                  __size_of_lcd_clear 000000  
                                                             ??_log10 000051  
                                                  __size_of_lcd_putch 000000  
                                                             ??_floor 000065  
                                                             ??_ldexp 00004E  
                                                             ??_frexp 000011  
                                                          _log10$1326 000051  
                                                          __pbssBANK0 000000  
                                                      ?_format_double 00002A  
                                                  __size_of_eval_poly 000000  
                                                      ?_format_number 000014  
                                                      print_unit@unit 000000  
                                            __size_of_print_indicator 000000  
                                                             ?___ftge 00000D  
                                                           ?___altoft 000000  
                                             __size_of_timer0_read_ps 000000  
                                                           ?___awtoft 000015  
                                                           ?___ftpack 00000D  
                                                           ?___lltoft 000015  
                                                  _measure_inductance 000000  
                                                           ?___lwtoft 000044  
                                                    ??_lcd_write4bits 00000D  
                                                             _INTCON2 000FF1  
                                                          _lcd_gotoxy 000000  
                                                 ?_measure_inductance 000000  
                                                   __end_of_calibrate 0000CA  
                                                           ?_lcd_init 000000  
                                                           ?_lcd_send 00000E  
                                                   __end_of_delay10ms 000006  
                                                           ?_lcd_puts 000000  
                                                __end_of_measure_freq 000102  
                                                          calibrate@i 000047  
                                                             __Hparam 000000  
                                                             __Lparam 000000  
                                                           ?_ser_init 000000  
                                                ??_measure_inductance 000063  
                                                   __end_of_lcd_begin 0000EE  
                                                           ?_ser_puts 00000D  
                                                   __end_of_lcd_clear 00001E  
                                                     __size_of___ftge 000000  
                                                   __end_of_lcd_putch 000012  
                                                             ___ftadd 000000  
                                                             ___ftdiv 000000  
                                                             ___ftneg 000000  
                                                             ___ftmul 000000  
                                                             ___ftsub 000000  
                                                             ___fttol 000000  
                                                             ___lwdiv 000000  
                                                             ___lwmod 000000  
                                                        __psmallconst 000000  
                                                          ??___altoft 000004  
                                                             __pcinit 000000  
                                                          ??___awtoft 000018  
                                                          ??___ftpack 000012  
                                                   __end_of_eval_poly 0000A6  
                                                             __ramtop 000000* 
                                                __size_of_timer0_init 000000  
                                                          ??___lltoft 000019  
                                                             __ptext0 000000  
                                                             __ptext1 000000  
                                                             __ptext2 000000  
                                                             __ptext3 000000  
                                                             __ptext4 000000  
                                                             __ptext5 000000  
                                                             __ptext6 000000  
                                                             __ptext7 000000  
                                                             __ptext8 000000  
                                                             __ptext9 000000  
                                                __size_of_timer2_init 000000  
                                               __size_of_buffer_putch 000000  
                                                          ??___lwtoft 000047  
                                                           _T0CONbits 000FD5  
                                                        __size_of_exp 000000  
                                                        __size_of_log 000000  
                                                        __size_of_isr 000000  
                                                        __size_of_pow 000000  
                                                             _seconds 000004  
                                                      lcd_putch@value 000010  
                                                             _ser_tmp 000000* 
                                                     ??_format_double 000065  
                                                             _put_str 000000  
                                                          ??_lcd_init 00000D  
                                                          ??_lcd_send 00000F  
                                                          ??_lcd_puts 000011  
                                                end_of_initialization 000038  
                                                     ??_format_number 000018  
                                                             exp@sign 000018  
                                                           _LCD_lines 000010  
                                                        _lcd_init$487 00000E  
                                                      lcd_puts@string 000013  
                                                             pow@sign 000025  
                                       measure_inductance@denominator 000003  
                                               __end_of_print_reading 000074  
                                                          ??_ser_init 00000D  
                                                          ??_ser_puts 00000D  
                                                          _ser_puts$0 00000D  
                                                        _buffer_putch 000000  
                                                   format_number@base 000016  
                                                             postdec1 000FE5  
                                                             postdec2 000FDD  
                                                             postinc0 000FEE  
                                                             postinc1 000FE6  
                                                             postinc2 000FDE  
                                                   ??_print_indicator 000017  
                                                           _PORTCbits 000F82  
                                                          _print_unit 000000  
                                                       ?_print_buffer 000000  
                                                 _measure_capacitance 000000  
                                                         ?_lcd_gotoxy 000011  
                                                        _led_interval 000007  
                                                   i2___lwdiv@divisor 000002  
                                                           i2___lwdiv 000000  
                                                   i2___lwdiv@counter 000006  
                                                         ___ftdiv@exp 000022  
                                                       ??_lcd_command 000010  
                                                       ??_buffer_init 00000D  
                                                ?_measure_capacitance 000000  
                                                       ??_buffer_puts 000010  
                                             measure_capacitance@unit 000009  
                                                         ___ftmul@exp 00002D  
                                                      format_double@m 000038  
                                              measure_inductance@unit 000012  
                                                      _timer0_read_ps 000000  
                                                      __end_of___ftge 000064  
                                                     lcd_gotoxy@F2308 000000  
                                                          floor@expon 00000E  
                                                      ??_print_buffer 00000D  
                                                      format_number@i 00003E  
                                                      format_number@n 000014  
                                                 start_initialization 000000  
                                                          eval_poly@d 000042  
                                                          eval_poly@n 000043  
                                                          eval_poly@x 00003F  
                                               __size_of_measure_freq 000000  
                                                          ldexp@value 000049  
                                                         __end_of_exp 0001BA  
                                                         __end_of_log 0000EC  
                                                         __end_of_isr 000138  
                                                         __end_of_pow 00014A  
                                                        _LCD_function 000009  
                                                  format_double@digit 000036  
                                                          ?i2___lwdiv 000000  
                                                          frexp@value 00000D  
                                               ??_measure_capacitance 000063  
                                              __end_of_timer0_read_ps 00004E  
                                                            ??___ftge 000013  
                                                 __size_of_lcd_gotoxy 000000  
                                                 __end_of_lcd_command 000012  
                                                         __pdataBANK0 000000  
                                                        _measure_freq 000000  
                                                 __end_of_buffer_init 000010  
                                                 __end_of_buffer_puts 00002E  
                                            print_reading@measurement 00003F  
                                                   __size_of___altoft 000000  
                                                   __size_of___awtoft 000000  
                                                   __size_of___ftpack 000000  
                                                         ?_print_unit 000000  
                                                   __size_of___lltoft 000000  
                                                         __pbssCOMRAM 000000  
                                                   __size_of___lwtoft 000000  
                                                       __pcstackBANK0 000000  
                                                       ?_output_putch 000000  
                                                   measure_freq@count 000042  
                                                    lcd_command@value 000010  
                                                   __size_of_lcd_init 000000  
                                                   __size_of_lcd_send 000000  
                                                           _calibrate 000000  
                                                   __size_of_lcd_puts 000000  
                                                           _delay10ms 000000  
                                                           __pnvBANK0 000000  
                                                    ___lwdiv@dividend 00000D  
                                                     ?_timer0_read_ps 00000D  
                                                           __pintcode 000000  
                                                            ?___ftadd 000033  
                                                            ?___ftdiv 000015  
                                                            ?___ftneg 00000D  
                                                            ?___ftmul 000024  
                                                            ?___ftsub 00003F  
                                                            ?___fttol 000054  
                                                            ?___lwdiv 00000D  
                                                            ?___lwmod 00000D  
                                                           _lcd_begin 000000  
                                                           _lcd_clear 000000  
                                                           _lcd_putch 000000  
                                                           _led_cycle 000006  
                                                         __smallconst 000000* 
                                                           _eval_poly 000000  
                                                       output_putch@c 000011  
                                                      ??_output_putch 000011  
                                                    ___lwdiv@quotient 000012  
                                                      __size_of_log10 000000  
                                                            ?_put_str 000000  
                                                      __size_of_floor 000000  
                                                      __size_of_ldexp 000000  
                                                      __size_of_frexp 000000  
                                                         ??i2___lwdiv 000004  
                                                          ?_calibrate 000000  
                                                          ?_delay10ms 000000  
                                                            _LCD_ctrl 000008  
                                                            _LCD_mode 000011  
                                                            _PIE1bits 000F9D  
                                                     _print_indicator 000000  
                                                         _lcd_command 000000  
                                                __end_of_print_buffer 000006  
                                                 __size_of_print_unit 000000  
                                                            _PIR1bits 000F9E  
                                                            i2u282_40 000032  
                                                            i2u283_40 00006C  
                                                            i2u284_48 00006E  
                                                         _buffer_init 000000  
                                                         _buffer_puts 000000  
                                         __size_of_measure_inductance 000000  
                                                       ??_timer0_init 00000D  
                                                       ??_timer2_init 00000D  
                                                          ?_lcd_begin 000011  
                                                          ?_lcd_clear 000000  
                                                          ?_lcd_putch 000000  
                                                          ?_eval_poly 00003F  
                                                           lcd_puts@i 000012  
                                                        ??_lcd_gotoxy 000012  
                                               measure_inductance@Lin 00001E  
                                               measure_inductance@var 00001C  
                                                           copy_data0 00002C  
                                               __end_of_format_double 00014E  
                                                format_number@padchar 00003C  
                                             __size_of_lcd_write4bits 000000  
                                               __end_of_format_number 0000B4  
                                                           frexp@eptr 000010  
                                                            __Hrparam 000000* 
                                                            __Lrparam 000000* 
                                                        __Lsmallconst 000000* 
                                                  __end_of_lcd_gotoxy 00003C  
                                                    __size_of___ftadd 000000  
                                                    __size_of___ftdiv 000000  
                                                    __size_of___ftneg 000000  
                                                            ___altoft 000000  
                                                    __size_of___ftmul 000000  
                                                    __size_of___ftsub 000000  
                                                    __size_of___fttol 000000  
                                                    __size_of___lwdiv 000000  
                                                    __size_of___lwmod 000000  
                                                            ___awtoft 000000  
                                                            ___ftpack 000000  
                                                            ___lltoft 000000  
                                                       timer2_init@ps 00000E  
                                                            ___lwtoft 000000  
                                                 __end_of_timer0_init 00009E  
                                                            _exp$1329 000013  
                                                 __end_of_timer2_init 000036  
                                                            _main$294 00003A  
                                                     ___lwdiv@divisor 00000F  
                                                     ___lwdiv@counter 000011  
                                              __size_of_print_reading 000000  
                                                timer0_init@prescaler 000016  
                                                            __ptext10 000000  
                                                            __ptext11 000000  
                                                            __ptext20 000000  
                                                            __ptext12 000000  
                                                            __ptext21 000000  
                                                            __ptext13 000000  
                                                            __ptext30 000000  
                                                            __ptext22 000000  
                                                            __ptext14 000000  
                                                            __ptext31 000000  
                                                            __ptext23 000000  
                                                            __ptext15 000000  
                                                            __ptext40 000000  
                                                            __ptext32 000000  
                                                            __ptext24 000000  
                                                            __ptext16 000000  
                                                            __ptext41 000000  
                                                            __ptext33 000000  
                                                            __ptext25 000000  
                                                            __ptext17 000000  
                                                            __ptext50 000000  
                                                            __ptext42 000000  
                                                            __ptext34 000000  
                                                            __ptext26 000000  
                                                            __ptext18 000000  
                                                            __ptext43 000000  
                                                            __ptext35 000000  
                                                            __ptext27 000000  
                                                            __ptext19 000000  
                                                            __ptext52 000000  
                                                            __ptext44 000000  
                                                            __ptext36 000000  
                                                            __ptext28 000000  
                                                            __ptext45 000000  
                                                            __ptext37 000000  
                                                            __ptext29 000000  
                                                            __ptext46 000000  
                                                            __ptext38 000000  
                                                            __ptext47 000000  
                                                            __ptext39 000000  
                                                            __ptext48 000000  
                                                            __ptext49 000000  
                                                            _lcd_init 000000  
                                                            _lcd_send 000000  
                                             __end_of_print_indicator 000026  
                                                            _pow$1327 00001F  
                                                            _pow$1328 000022  
                                                            _lcd_puts 000000  
                                                    __size_of_put_str 000000  
                                                         ??_calibrate 000047  
                                                       __size_of_main 000000  
                                                         ??_delay10ms 00000D  
                                                            _msecpart 00000E  
                                                            _ser_init 000000* 
                                                            _ser_puts 000000* 
                                                            _timer1of 000008  
                                                __end_of_output_putch 00000E  
                                                         ??_lcd_begin 000012  
                                                         ??_lcd_clear 000011  
                                                         ??_lcd_putch 000010  
                                                            exp@coeff 000001  
                                                            log@coeff 00001F  
                                         measure_inductance@numerator 000000  
                                                        ??_print_unit 000017  
                                                          _INTCONbits 000FF2  
                                                         ??_eval_poly 000045  
                                                  _print_reading$1320 000041  
                                                  _print_reading$1321 000043  
                                                            intlevel2 000000* 
                                         __end_of_measure_capacitance 000270  
                                               __size_of_print_buffer 000000  
                                                    ___lwmod@dividend 00000D  
                                                    ??_timer0_read_ps 00000F  
                                                  __end_of_print_unit 000028  
                                                       _print_reading 000000  
                                                delay10ms@period_10ms 000000  
                                                         _timer0_init 000000  
                                                         _timer2_init 000000  
                                                  _format_double$1324 00002D  
                                                  _format_double$1325 000030  
                                            _measure_capacitance$1310 000000  
                                            _measure_capacitance$1311 000003  
                                            _measure_capacitance$1312 000006  
                                                            put_str@i 000013  
                                                            put_str@s 000015  
                                                  timer0_init@ps_mode 000017  
                                                     ___lwmod@divisor 00000F  
                                                     ___lwmod@counter 000011  
                                                        _print_buffer 000000  
                                             print_indicator@indicate 000017  
                                                    ?_print_indicator 000000  
                                                      _lcd_write4bits 000000  
                                                        ?_lcd_command 000000  
                                                      ?_print_reading 00003F  
                                                        ?_buffer_init 000000  
                                                        ?_buffer_puts 000000  
                                                       ?_buffer_putch 000000  
