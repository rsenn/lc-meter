

Microchip Technology PIC18 PRO Macro Assembler V1.45 build -152302408 
                                                                                               Fri Feb  7 09:08:58 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	18F252
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    70                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    71                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    72  0000                     
    73                           ; Version 1.45
    74                           ; Generated 16/11/2017 GMT
    75                           ; 
    76                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    77                           ; All rights reserved.
    78                           ; 
    79                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    80                           ; 
    81                           ; Redistribution and use in source and binary forms, with or without modification, are
    82                           ; permitted provided that the following conditions are met:
    83                           ; 
    84                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    85                           ;        conditions and the following disclaimer.
    86                           ; 
    87                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    88                           ;        of conditions and the following disclaimer in the documentation and/or other
    89                           ;        materials provided with the distribution.
    90                           ; 
    91                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    92                           ;        software without specific prior written permission.
    93                           ; 
    94                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    95                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    96                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    97                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    98                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    99                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   100                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   101                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   102                           ; 
   103                           ; 
   104                           ; Code-generator required, PIC18F252 Definitions
   105                           ; 
   106                           ; SFR Addresses
   107  0000                     
   108                           	psect	idataCOMRAM
   109  002542                     __pidataCOMRAM:
   110                           	opt stack 0
   111                           
   112                           ;initializer for _mode
   113  002542  FF                 	db	255
   114                           
   115                           	psect	idataBANK0
   116  00253C                     __pidataBANK0:
   117                           	opt stack 0
   118                           
   119                           ;initializer for lcd_gotoxy@F2308
   120  00253C  00                 	db	0
   121  00253D  40                 	db	64
   122  00253E  14                 	db	20
   123  00253F  54                 	db	84
   124                           
   125                           	psect	smallconst
   126  000600                     __psmallconst:
   127                           	opt stack 0
   128  000600  00                 	db	0
   129  000601                     exp@coeff:
   130                           	opt stack 0
   131  000601  00                 	db	0
   132  000602  80                 	db	128
   133  000603  3F                 	db	63
   134  000604  72                 	db	114
   135  000605  31                 	db	49
   136  000606  3F                 	db	63
   137  000607  FE                 	db	254
   138  000608  75                 	db	117
   139  000609  3E                 	db	62
   140  00060A  58                 	db	88
   141  00060B  63                 	db	99
   142  00060C  3D                 	db	61
   143  00060D  95                 	db	149
   144  00060E  1D                 	db	29
   145  00060F  3C                 	db	60
   146  000610  C5                 	db	197
   147  000611  AE                 	db	174
   148  000612  3A                 	db	58
   149  000613  79                 	db	121
   150  000614  21                 	db	33
   151  000615  39                 	db	57
   152  000616  94                 	db	148
   153  000617  80                 	db	128
   154  000618  37                 	db	55
   155  000619  93                 	db	147
   156  00061A  A7                 	db	167
   157  00061B  35                 	db	53
   158  00061C  56                 	db	86
   159  00061D  15                 	db	21
   160  00061E  34                 	db	52
   161  00061F                     __end_ofexp@coeff:
   162                           	opt stack 0
   163  00061F                     log@coeff:
   164                           	opt stack 0
   165  00061F  00                 	db	0
   166  000620  00                 	db	0
   167  000621  00                 	db	0
   168  000622  00                 	db	0
   169  000623  80                 	db	128
   170  000624  3F                 	db	63
   171  000625  F0                 	db	240
   172  000626  FF                 	db	255
   173  000627  BE                 	db	190
   174  000628  E2                 	db	226
   175  000629  A9                 	db	169
   176  00062A  3E                 	db	62
   177  00062B  83                 	db	131
   178  00062C  76                 	db	118
   179  00062D  BE                 	db	190
   180  00062E  AE                 	db	174
   181  00062F  2B                 	db	43
   182  000630  3E                 	db	62
   183  000631  3C                 	db	60
   184  000632  C3                 	db	195
   185  000633  BD                 	db	189
   186  000634  D2                 	db	210
   187  000635  13                 	db	19
   188  000636  3D                 	db	61
   189  000637  78                 	db	120
   190  000638  D3                 	db	211
   191  000639  BB                 	db	187
   192  00063A                     __end_oflog@coeff:
   193                           	opt stack 0
   194  00063A                     STR_7:
   195                           
   196                           ; BSR set to: 0
   197  00063A  70                 	db	112	;'p'
   198  00063B  6C                 	db	108	;'l'
   199  00063C  65                 	db	101	;'e'
   200  00063D  61                 	db	97	;'a'
   201  00063E  73                 	db	115	;'s'
   202  00063F  65                 	db	101	;'e'
   203  000640  20                 	db	32
   204  000641  77                 	db	119	;'w'
   205  000642  61                 	db	97	;'a'
   206  000643  69                 	db	105	;'i'
   207  000644  74                 	db	116	;'t'
   208  000645  2E                 	db	46
   209  000646  2E                 	db	46
   210  000647  2E                 	db	46
   211  000648  00                 	db	0
   212  000649                     STR_10:
   213                           
   214                           ; BSR set to: 0
   215  000649  49                 	db	73	;'I'
   216  00064A  6E                 	db	110	;'n'
   217  00064B  64                 	db	100	;'d'
   218  00064C  75                 	db	117	;'u'
   219  00064D  63                 	db	99	;'c'
   220  00064E  74                 	db	116	;'t'
   221  00064F  69                 	db	105	;'i'
   222  000650  76                 	db	118	;'v'
   223  000651  69                 	db	105	;'i'
   224  000652  74                 	db	116	;'t'
   225  000653  79                 	db	121	;'y'
   226  000654  20                 	db	32
   227  000655  00                 	db	0
   228  000656                     STR_6:
   229                           
   230                           ; BSR set to: 0
   231  000656  43                 	db	67	;'C'
   232  000657  61                 	db	97	;'a'
   233  000658  6C                 	db	108	;'l'
   234  000659  69                 	db	105	;'i'
   235  00065A  62                 	db	98	;'b'
   236  00065B  72                 	db	114	;'r'
   237  00065C  61                 	db	97	;'a'
   238  00065D  74                 	db	116	;'t'
   239  00065E  69                 	db	105	;'i'
   240  00065F  6E                 	db	110	;'n'
   241  000660  67                 	db	103	;'g'
   242  000661  00                 	db	0
   243  000662                     STR_9:
   244                           
   245                           ; BSR set to: 0
   246  000662  43                 	db	67	;'C'
   247  000663  61                 	db	97	;'a'
   248  000664  70                 	db	112	;'p'
   249  000665  61                 	db	97	;'a'
   250  000666  63                 	db	99	;'c'
   251  000667  69                 	db	105	;'i'
   252  000668  74                 	db	116	;'t'
   253  000669  79                 	db	121	;'y'
   254  00066A  20                 	db	32
   255  00066B  00                 	db	0
   256  00066C                     STR_1:
   257                           
   258                           ; BSR set to: 0
   259  00066C  4C                 	db	76	;'L'
   260  00066D  43                 	db	67	;'C'
   261  00066E  2D                 	db	45
   262  00066F  6D                 	db	109	;'m'
   263  000670  65                 	db	101	;'e'
   264  000671  74                 	db	116	;'t'
   265  000672  65                 	db	101	;'e'
   266  000673  72                 	db	114	;'r'
   267  000674  20                 	db	32
   268  000675  00                 	db	0
   269  000676                     STR_2:
   270                           
   271                           ; BSR set to: 0
   272  000676  20                 	db	32
   273  000677  20                 	db	32
   274  000678  20                 	db	32
   275  000679  20                 	db	32
   276  00067A  20                 	db	32
   277  00067B  20                 	db	32
   278  00067C  00                 	db	0
   279  00067D                     STR_8:
   280                           
   281                           ; BSR set to: 0
   282  00067D  46                 	db	70	;'F'
   283  00067E  72                 	db	114	;'r'
   284  00067F  65                 	db	101	;'e'
   285  000680  71                 	db	113	;'q'
   286  000681  3D                 	db	61	;'='
   287  000682  00                 	db	0
   288  000683                     
   289                           ; BSR set to: 0
   290  000683  52                 	db	82	;'R'
   291  000684  43                 	db	67	;'C'
   292  000685  34                 	db	52	;'4'
   293  000686  3D                 	db	61	;'='
   294  000687  00                 	db	0
   295  000688                     STR_20:
   296                           
   297                           ; BSR set to: 0
   298  000688  2D                 	db	45
   299  000689  2A                 	db	42
   300  00068A  2D                 	db	45
   301  00068B  00                 	db	0
   302  00068C                     
   303                           ; BSR set to: 0
   304  00068C  6D                 	db	109	;'m'
   305  00068D  46                 	db	70	;'F'
   306  00068E  00                 	db	0
   307  00068F                     
   308                           ; BSR set to: 0
   309  00068F  6E                 	db	110	;'n'
   310  000690  46                 	db	70	;'F'
   311  000691  00                 	db	0
   312  000692                     
   313                           ; BSR set to: 0
   314  000692  70                 	db	112	;'p'
   315  000693  46                 	db	70	;'F'
   316  000694  00                 	db	0
   317  000695                     
   318                           ; BSR set to: 0
   319  000695  75                 	db	117	;'u'
   320  000696  46                 	db	70	;'F'
   321  000697  00                 	db	0
   322  000698                     STR_12:
   323                           
   324                           ; BSR set to: 0
   325  000698  6D                 	db	109	;'m'
   326  000699  48                 	db	72	;'H'
   327  00069A  00                 	db	0
   328  00069B                     
   329                           ; BSR set to: 0
   330  00069B  6E                 	db	110	;'n'
   331  00069C  48                 	db	72	;'H'
   332  00069D  00                 	db	0
   333  00069E                     
   334                           ; BSR set to: 0
   335  00069E  75                 	db	117	;'u'
   336  00069F  48                 	db	72	;'H'
   337  0006A0  00                 	db	0
   338  0000                     
   339                           ; #config settings
   340  0006A1  00                 	db	0	; dummy byte at the end
   341  0000                     
   342                           	psect	nvBANK0
   343  0000CF                     __pnvBANK0:
   344                           	opt stack 0
   345  0000CF                     _bres:
   346                           	opt stack 0
   347  0000CF                     	ds	4
   348  0000D3                     _CCal:
   349                           	opt stack 0
   350  0000D3                     	ds	3
   351  0000D6                     _led_interval:
   352                           	opt stack 0
   353  0000D6                     	ds	2
   354  0000                     _LATB	set	3978
   355  0000                     _PORTC	set	3970
   356  0000                     _PORTCbits	set	3970
   357  0000                     _TRISC	set	3988
   358  0000                     _TRISB	set	3987
   359  0000                     _TRISA	set	3986
   360  0000                     _LATC	set	3979
   361  0000                     _PIE1	set	3997
   362  0000                     _PIR1	set	3998
   363  0000                     _TMR2	set	4044
   364  0000                     _T2CON	set	4042
   365  0000                     _PIR1bits	set	3998
   366  0000                     _TMR0	set	4054
   367  0000                     _T0CONbits	set	4053
   368  0000                     _T0CON	set	4053
   369  0000                     _INTCONbits	set	4082
   370  0000                     _INTCON	set	4082
   371  0000                     _INTCON2	set	4081
   372                           
   373                           	psect	cinit
   374  001FCC                     __pcinit:
   375                           	opt stack 0
   376  001FCC                     start_initialization:
   377                           	opt stack 0
   378  001FCC                     __initialization:
   379                           	opt stack 0
   380                           
   381                           ; Initialize objects allocated to BANK0 (4 bytes)
   382                           ; load TBLPTR registers with __pidataBANK0
   383  001FCC  0E3C               	movlw	low __pidataBANK0
   384  001FCE  6EF6               	movwf	tblptrl,c
   385  001FD0  0E25               	movlw	high __pidataBANK0
   386  001FD2  6EF7               	movwf	tblptrh,c
   387  001FD4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   388  001FD6  6EF8               	movwf	tblptru,c
   389  001FD8  EE00  F0D8         	lfsr	0,__pdataBANK0
   390  001FDC  EE10 F004          	lfsr	1,4
   391  001FE0                     copy_data0:
   392  001FE0  0009               	tblrd		*+
   393  001FE2  CFF5 FFEE          	movff	tablat,postinc0
   394  001FE6  50E5               	movf	postdec1,w,c
   395  001FE8  50E1               	movf	fsr1l,w,c
   396  001FEA  E1FA               	bnz	copy_data0
   397                           
   398                           ; Initialize objects allocated to COMRAM (1 bytes)
   399                           ; load TBLPTR registers with __pidataCOMRAM
   400  001FEC  0E42               	movlw	low __pidataCOMRAM
   401  001FEE  6EF6               	movwf	tblptrl,c
   402  001FF0  0E25               	movlw	high __pidataCOMRAM
   403  001FF2  6EF7               	movwf	tblptrh,c
   404  001FF4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   405  001FF6  6EF8               	movwf	tblptru,c
   406  001FF8  0009               	tblrd		*+	;fetch initializer
   407  001FFA  CFF5 F072          	movff	tablat,__pdataCOMRAM
   408                           
   409                           ; Clear objects allocated to BANK0 (40 bytes)
   410  001FFE  EE00  F080         	lfsr	0,__pbssBANK0
   411  002002  0E28               	movlw	40
   412  002004                     clear_0:
   413  002004  6AEE               	clrf	postinc0,c
   414  002006  06E8               	decf	wreg,f,c
   415  002008  E1FD               	bnz	clear_0
   416                           
   417                           ; Clear objects allocated to COMRAM (8 bytes)
   418  00200A  EE00  F06A         	lfsr	0,__pbssCOMRAM
   419  00200E  0E08               	movlw	8
   420  002010                     clear_1:
   421  002010  6AEE               	clrf	postinc0,c
   422  002012  06E8               	decf	wreg,f,c
   423  002014  E1FD               	bnz	clear_1
   424  002016                     end_of_initialization:
   425                           	opt stack 0
   426  002016                     __end_of__initialization:
   427                           	opt stack 0
   428  002016  9073               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   429  002018  9273               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   430  00201A  0E00               	movlw	low (__Lsmallconst shr (0+16))
   431  00201C  6EF8               	movwf	tblptru,c
   432  00201E  0E06               	movlw	high __Lsmallconst
   433  002020  6EF7               	movwf	tblptrh,c
   434  002022  0100               	movlb	0
   435  002024  EF6C  F009         	goto	_main	;jump to C main() function
   436                           tblptru	equ	0xFF8
   437                           tblptrh	equ	0xFF7
   438                           tblptrl	equ	0xFF6
   439                           tablat	equ	0xFF5
   440                           postinc0	equ	0xFEE
   441                           wreg	equ	0xFE8
   442                           postdec1	equ	0xFE5
   443                           fsr1l	equ	0xFE1
   444                           
   445                           	psect	bssCOMRAM
   446  00006A                     __pbssCOMRAM:
   447                           	opt stack 0
   448  00006A                     _F3:
   449                           	opt stack 0
   450  00006A                     	ds	3
   451  00006D                     _LCD_ctrl:
   452                           	opt stack 0
   453  00006D                     	ds	1
   454  00006E                     _LCD_function:
   455                           	opt stack 0
   456  00006E                     	ds	1
   457  00006F                     _F1:
   458                           	opt stack 0
   459  00006F                     	ds	3
   460                           tblptru	equ	0xFF8
   461                           tblptrh	equ	0xFF7
   462                           tblptrl	equ	0xFF6
   463                           tablat	equ	0xFF5
   464                           postinc0	equ	0xFEE
   465                           wreg	equ	0xFE8
   466                           postdec1	equ	0xFE5
   467                           fsr1l	equ	0xFE1
   468                           
   469                           	psect	dataCOMRAM
   470  000072                     __pdataCOMRAM:
   471                           	opt stack 0
   472  000072                     _mode:
   473                           	opt stack 0
   474  000072                     	ds	1
   475                           tblptru	equ	0xFF8
   476                           tblptrh	equ	0xFF7
   477                           tblptrl	equ	0xFF6
   478                           tablat	equ	0xFF5
   479                           postinc0	equ	0xFEE
   480                           wreg	equ	0xFE8
   481                           postdec1	equ	0xFE5
   482                           fsr1l	equ	0xFE1
   483                           
   484                           	psect	bssBANK0
   485  000080                     __pbssBANK0:
   486                           	opt stack 0
   487  000080                     _buffer:
   488                           	opt stack 0
   489  000080                     	ds	17
   490  000091                     _timer1of:
   491                           	opt stack 0
   492  000091                     	ds	4
   493  000095                     _msecs:
   494                           	opt stack 0
   495  000095                     	ds	4
   496  000099                     _seconds:
   497                           	opt stack 0
   498  000099                     	ds	4
   499  00009D                     _F2:
   500                           	opt stack 0
   501  00009D                     	ds	3
   502  0000A0                     _blink:
   503                           	opt stack 0
   504  0000A0                     	ds	2
   505  0000A2                     _led_cycle:
   506                           	opt stack 0
   507  0000A2                     	ds	2
   508  0000A4                     _msecpart:
   509                           	opt stack 0
   510  0000A4                     	ds	2
   511  0000A6                     _LCD_lines:
   512                           	opt stack 0
   513  0000A6                     	ds	1
   514  0000A7                     _LCD_mode:
   515                           	opt stack 0
   516  0000A7                     	ds	1
   517                           tblptru	equ	0xFF8
   518                           tblptrh	equ	0xFF7
   519                           tblptrl	equ	0xFF6
   520                           tablat	equ	0xFF5
   521                           postinc0	equ	0xFEE
   522                           wreg	equ	0xFE8
   523                           postdec1	equ	0xFE5
   524                           fsr1l	equ	0xFE1
   525                           
   526                           	psect	dataBANK0
   527  0000D8                     __pdataBANK0:
   528                           	opt stack 0
   529  0000D8                     lcd_gotoxy@F2308:
   530                           	opt stack 0
   531  0000D8                     	ds	4
   532                           tblptru	equ	0xFF8
   533                           tblptrh	equ	0xFF7
   534                           tblptrl	equ	0xFF6
   535                           tablat	equ	0xFF5
   536                           postinc0	equ	0xFEE
   537                           wreg	equ	0xFE8
   538                           postdec1	equ	0xFE5
   539                           fsr1l	equ	0xFE1
   540                           
   541                           	psect	cstackBANK0
   542  0000A8                     __pcstackBANK0:
   543                           	opt stack 0
   544  0000A8                     measure_inductance@numerator:
   545                           	opt stack 0
   546  0000A8                     _exp$1317:
   547                           	opt stack 0
   548                           
   549                           ; 3 bytes @ 0x0
   550  0000A8                     	ds	3
   551  0000AB                     exp@exponent:
   552                           	opt stack 0
   553  0000AB                     measure_inductance@denominator:
   554                           	opt stack 0
   555                           
   556                           ; 3 bytes @ 0x3
   557  0000AB                     	ds	2
   558  0000AD                     exp@sign:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0x5
   562  0000AD                     	ds	1
   563  0000AE                     ?_pow:
   564                           	opt stack 0
   565  0000AE                     pow@x:
   566                           	opt stack 0
   567  0000AE                     _measure_inductance$1305:
   568                           	opt stack 0
   569                           
   570                           ; 3 bytes @ 0x6
   571  0000AE                     	ds	3
   572  0000B1                     pow@y:
   573                           	opt stack 0
   574  0000B1                     _measure_inductance$1309:
   575                           	opt stack 0
   576                           
   577                           ; 3 bytes @ 0x9
   578  0000B1                     	ds	3
   579  0000B4                     _measure_inductance$1310:
   580                           	opt stack 0
   581  0000B4                     _pow$1315:
   582                           	opt stack 0
   583                           
   584                           ; 3 bytes @ 0xC
   585  0000B4                     	ds	3
   586  0000B7                     _measure_inductance$1311:
   587                           	opt stack 0
   588  0000B7                     _pow$1316:
   589                           	opt stack 0
   590                           
   591                           ; 3 bytes @ 0xF
   592  0000B7                     	ds	3
   593  0000BA                     measure_inductance@unit:
   594                           	opt stack 0
   595  0000BA                     pow@sign:
   596                           	opt stack 0
   597                           
   598                           ; 1 bytes @ 0x12
   599  0000BA                     	ds	1
   600  0000BB                     _measure_inductance$1306:
   601                           	opt stack 0
   602  0000BB                     pow@yi:
   603                           	opt stack 0
   604                           
   605                           ; 4 bytes @ 0x13
   606  0000BB                     	ds	3
   607  0000BE                     _measure_inductance$1307:
   608                           	opt stack 0
   609                           
   610                           ; 3 bytes @ 0x16
   611  0000BE                     	ds	1
   612  0000BF                     format_double@num:
   613                           	opt stack 0
   614                           
   615                           ; 3 bytes @ 0x17
   616  0000BF                     	ds	2
   617  0000C1                     _measure_inductance$1308:
   618                           	opt stack 0
   619                           
   620                           ; 3 bytes @ 0x19
   621  0000C1                     	ds	1
   622  0000C2                     _format_double$1300:
   623                           	opt stack 0
   624                           
   625                           ; 3 bytes @ 0x1A
   626  0000C2                     	ds	2
   627  0000C4                     measure_inductance@var:
   628                           	opt stack 0
   629                           
   630                           ; 2 bytes @ 0x1C
   631  0000C4                     	ds	1
   632  0000C5                     _format_double$1301:
   633                           	opt stack 0
   634                           
   635                           ; 3 bytes @ 0x1D
   636  0000C5                     	ds	1
   637  0000C6                     measure_inductance@Lin:
   638                           	opt stack 0
   639                           
   640                           ; 3 bytes @ 0x1E
   641  0000C6                     	ds	2
   642  0000C8                     format_double@weight:
   643                           	opt stack 0
   644                           
   645                           ; 3 bytes @ 0x20
   646  0000C8                     	ds	3
   647  0000CB                     format_double@digit:
   648                           	opt stack 0
   649                           
   650                           ; 2 bytes @ 0x23
   651  0000CB                     	ds	2
   652  0000CD                     format_double@m:
   653                           	opt stack 0
   654                           
   655                           ; 2 bytes @ 0x25
   656  0000CD                     	ds	2
   657                           tblptru	equ	0xFF8
   658                           tblptrh	equ	0xFF7
   659                           tblptrl	equ	0xFF6
   660                           tablat	equ	0xFF5
   661                           postinc0	equ	0xFEE
   662                           wreg	equ	0xFE8
   663                           postdec1	equ	0xFE5
   664                           fsr1l	equ	0xFE1
   665                           
   666                           	psect	cstackCOMRAM
   667  000001                     __pcstackCOMRAM:
   668                           	opt stack 0
   669  000001                     ?i2___lwdiv:
   670                           	opt stack 0
   671  000001                     i2___lwdiv@dividend:
   672                           	opt stack 0
   673                           
   674                           ; 2 bytes @ 0x0
   675  000001                     	ds	2
   676  000003                     i2___lwdiv@divisor:
   677                           	opt stack 0
   678                           
   679                           ; 2 bytes @ 0x2
   680  000003                     	ds	2
   681  000005                     i2___lwdiv@quotient:
   682                           	opt stack 0
   683                           
   684                           ; 2 bytes @ 0x4
   685  000005                     	ds	2
   686  000007                     i2___lwdiv@counter:
   687                           	opt stack 0
   688                           
   689                           ; 1 bytes @ 0x6
   690  000007                     	ds	1
   691  000008                     ??_isr:
   692                           
   693                           ; 1 bytes @ 0x7
   694  000008                     	ds	1
   695  000009                     ??_timer0_init:
   696  000009                     ??_timer2_init:
   697  000009                     ??_buffer_putch:
   698  000009                     ?_timer0_read_ps:
   699                           	opt stack 0
   700  000009                     ?___lwdiv:
   701                           	opt stack 0
   702  000009                     ?___lwmod:
   703                           	opt stack 0
   704  000009                     ?___ftpack:
   705                           	opt stack 0
   706  000009                     ?_frexp:
   707                           	opt stack 0
   708  000009                     ?___ftneg:
   709                           	opt stack 0
   710  000009                     lcd_write4bits@value:
   711                           	opt stack 0
   712  000009                     lcd_init@fourbitmode:
   713                           	opt stack 0
   714  000009                     ___lwdiv@dividend:
   715                           	opt stack 0
   716  000009                     ___lwmod@dividend:
   717                           	opt stack 0
   718  000009                     ___ftpack@arg:
   719                           	opt stack 0
   720  000009                     frexp@value:
   721                           	opt stack 0
   722  000009                     ___ftge@ff1:
   723                           	opt stack 0
   724  000009                     ___ftneg@f1:
   725                           	opt stack 0
   726                           
   727                           ; 3 bytes @ 0x8
   728  000009                     	ds	1
   729  00000A                     lcd_send@mode:
   730                           	opt stack 0
   731  00000A                     timer2_init@ps:
   732                           	opt stack 0
   733  00000A                     _lcd_init$361:
   734                           	opt stack 0
   735  00000A                     _timer0_init$450:
   736                           	opt stack 0
   737                           
   738                           ; 2 bytes @ 0x9
   739  00000A                     	ds	1
   740  00000B                     ??_timer0_read_ps:
   741  00000B                     buffer_putch@ch:
   742                           	opt stack 0
   743  00000B                     lcd_send@value:
   744                           	opt stack 0
   745  00000B                     ___lwdiv@divisor:
   746                           	opt stack 0
   747  00000B                     ___lwmod@divisor:
   748                           	opt stack 0
   749                           
   750                           ; 2 bytes @ 0xA
   751  00000B                     	ds	1
   752  00000C                     buffer_puts@x:
   753                           	opt stack 0
   754  00000C                     lcd_command@value:
   755                           	opt stack 0
   756  00000C                     lcd_putch@value:
   757                           	opt stack 0
   758  00000C                     timer2_init@ps_mode:
   759                           	opt stack 0
   760  00000C                     ___ftpack@exp:
   761                           	opt stack 0
   762  00000C                     frexp@eptr:
   763                           	opt stack 0
   764  00000C                     _timer0_init$451:
   765                           	opt stack 0
   766  00000C                     ___ftge@ff2:
   767                           	opt stack 0
   768                           
   769                           ; 3 bytes @ 0xB
   770  00000C                     	ds	1
   771  00000D                     ??_lcd_clear:
   772  00000D                     ??_frexp:
   773  00000D                     lcd_gotoxy@row:
   774                           	opt stack 0
   775  00000D                     lcd_puts@string:
   776                           	opt stack 0
   777  00000D                     lcd_begin@dotsize:
   778                           	opt stack 0
   779  00000D                     timer0_read_ps@prev:
   780                           	opt stack 0
   781  00000D                     output_putch@c:
   782                           	opt stack 0
   783  00000D                     ___ftpack@sign:
   784                           	opt stack 0
   785  00000D                     ___lwdiv@counter:
   786                           	opt stack 0
   787  00000D                     ___lwmod@counter:
   788                           	opt stack 0
   789                           
   790                           ; 1 bytes @ 0xC
   791  00000D                     	ds	1
   792  00000E                     ??_lcd_begin:
   793  00000E                     ??_lcd_puts:
   794  00000E                     ??___ftpack:
   795  00000E                     lcd_gotoxy@col:
   796                           	opt stack 0
   797  00000E                     put_str@s:
   798                           	opt stack 0
   799  00000E                     _timer0_init$452:
   800                           	opt stack 0
   801  00000E                     timer0_read_ps@count:
   802                           	opt stack 0
   803  00000E                     ___lwdiv@quotient:
   804                           	opt stack 0
   805                           
   806                           ; 2 bytes @ 0xD
   807  00000E                     	ds	1
   808  00000F                     ??_put_str:
   809  00000F                     ??___ftge:
   810  00000F                     lcd_puts@i:
   811                           	opt stack 0
   812  00000F                     lcd_begin@lines:
   813                           	opt stack 0
   814  00000F                     lcd_gotoxy@row_offsets:
   815                           	opt stack 0
   816                           
   817                           ; 4 bytes @ 0xE
   818  00000F                     	ds	1
   819  000010                     format_number@n:
   820                           	opt stack 0
   821  000010                     _timer0_init$453:
   822                           	opt stack 0
   823  000010                     put_str@i:
   824                           	opt stack 0
   825                           
   826                           ; 2 bytes @ 0xF
   827  000010                     	ds	1
   828  000011                     ?___ftdiv:
   829                           	opt stack 0
   830  000011                     ?___awtoft:
   831                           	opt stack 0
   832  000011                     ?___lltoft:
   833                           	opt stack 0
   834  000011                     ___awtoft@c:
   835                           	opt stack 0
   836  000011                     ___ftdiv@f1:
   837                           	opt stack 0
   838  000011                     ___lltoft@c:
   839                           	opt stack 0
   840                           
   841                           ; 4 bytes @ 0x10
   842  000011                     	ds	1
   843  000012                     format_number@base:
   844                           	opt stack 0
   845  000012                     timer0_init@prescaler:
   846                           	opt stack 0
   847                           
   848                           ; 1 bytes @ 0x11
   849  000012                     	ds	1
   850  000013                     ??_print_unit:
   851  000013                     format_number@pad:
   852                           	opt stack 0
   853  000013                     timer0_init@ps_mode:
   854                           	opt stack 0
   855  000013                     print_indicator@indicate:
   856                           	opt stack 0
   857                           
   858                           ; 1 bytes @ 0x12
   859  000013                     	ds	1
   860  000014                     ??_format_number:
   861  000014                     ___awtoft@sign:
   862                           	opt stack 0
   863  000014                     ___ftdiv@f2:
   864                           	opt stack 0
   865                           
   866                           ; 3 bytes @ 0x13
   867  000014                     	ds	1
   868  000015                     ??___lltoft:
   869  000015                     ?___ftadd:
   870                           	opt stack 0
   871  000015                     ___ftadd@f1:
   872                           	opt stack 0
   873                           
   874                           ; 3 bytes @ 0x14
   875  000015                     	ds	1
   876  000016                     format_number@buf:
   877                           	opt stack 0
   878                           
   879                           ; 32 bytes @ 0x15
   880  000016                     	ds	1
   881  000017                     ??___ftdiv:
   882                           
   883                           ; 1 bytes @ 0x16
   884  000017                     	ds	1
   885  000018                     ___ftadd@f2:
   886                           	opt stack 0
   887                           
   888                           ; 3 bytes @ 0x17
   889  000018                     	ds	1
   890  000019                     ___lltoft@exp:
   891                           	opt stack 0
   892                           
   893                           ; 1 bytes @ 0x18
   894  000019                     	ds	1
   895  00001A                     ___ftdiv@cntr:
   896                           	opt stack 0
   897                           
   898                           ; 1 bytes @ 0x19
   899  00001A                     	ds	1
   900  00001B                     ??___ftadd:
   901  00001B                     ___ftdiv@f3:
   902                           	opt stack 0
   903                           
   904                           ; 3 bytes @ 0x1A
   905  00001B                     	ds	3
   906  00001E                     ___ftadd@sign:
   907                           	opt stack 0
   908  00001E                     ___ftdiv@exp:
   909                           	opt stack 0
   910                           
   911                           ; 1 bytes @ 0x1D
   912  00001E                     	ds	1
   913  00001F                     ___ftadd@exp2:
   914                           	opt stack 0
   915  00001F                     ___ftdiv@sign:
   916                           	opt stack 0
   917                           
   918                           ; 1 bytes @ 0x1E
   919  00001F                     	ds	1
   920  000020                     ___ftadd@exp1:
   921                           	opt stack 0
   922                           
   923                           ; 1 bytes @ 0x1F
   924  000020                     	ds	1
   925  000021                     ?___ftmul:
   926                           	opt stack 0
   927  000021                     ___ftmul@f1:
   928                           	opt stack 0
   929                           
   930                           ; 3 bytes @ 0x20
   931  000021                     	ds	3
   932  000024                     ___ftmul@f2:
   933                           	opt stack 0
   934                           
   935                           ; 3 bytes @ 0x23
   936  000024                     	ds	3
   937  000027                     ??___ftmul:
   938                           
   939                           ; 1 bytes @ 0x26
   940  000027                     	ds	3
   941  00002A                     ___ftmul@exp:
   942                           	opt stack 0
   943                           
   944                           ; 1 bytes @ 0x29
   945  00002A                     	ds	1
   946  00002B                     ___ftmul@f3_as_product:
   947                           	opt stack 0
   948                           
   949                           ; 3 bytes @ 0x2A
   950  00002B                     	ds	3
   951  00002E                     ___ftmul@cntr:
   952                           	opt stack 0
   953                           
   954                           ; 1 bytes @ 0x2D
   955  00002E                     	ds	1
   956  00002F                     ___ftmul@sign:
   957                           	opt stack 0
   958                           
   959                           ; 1 bytes @ 0x2E
   960  00002F                     	ds	1
   961  000030                     ?___ftsub:
   962                           	opt stack 0
   963  000030                     ?_eval_poly:
   964                           	opt stack 0
   965  000030                     ___ftsub@f1:
   966                           	opt stack 0
   967  000030                     eval_poly@x:
   968                           	opt stack 0
   969                           
   970                           ; 3 bytes @ 0x2F
   971  000030                     	ds	3
   972  000033                     eval_poly@d:
   973                           	opt stack 0
   974  000033                     ___ftsub@f2:
   975                           	opt stack 0
   976                           
   977                           ; 3 bytes @ 0x32
   978  000033                     	ds	1
   979  000034                     eval_poly@n:
   980                           	opt stack 0
   981                           
   982                           ; 2 bytes @ 0x33
   983  000034                     	ds	2
   984  000036                     ??_eval_poly:
   985  000036                     _format_number$293:
   986                           	opt stack 0
   987                           
   988                           ; 2 bytes @ 0x35
   989  000036                     	ds	1
   990  000037                     eval_poly@res:
   991                           	opt stack 0
   992                           
   993                           ; 3 bytes @ 0x36
   994  000037                     	ds	1
   995  000038                     format_number@padchar:
   996                           	opt stack 0
   997                           
   998                           ; 1 bytes @ 0x37
   999  000038                     	ds	1
  1000  000039                     format_number@di:
  1001                           	opt stack 0
  1002                           
  1003                           ; 1 bytes @ 0x38
  1004  000039                     	ds	1
  1005  00003A                     ?_ldexp:
  1006                           	opt stack 0
  1007  00003A                     ?_log:
  1008                           	opt stack 0
  1009  00003A                     format_number@i:
  1010                           	opt stack 0
  1011  00003A                     ldexp@value:
  1012                           	opt stack 0
  1013  00003A                     log@x:
  1014                           	opt stack 0
  1015                           
  1016                           ; 3 bytes @ 0x39
  1017  00003A                     	ds	1
  1018  00003B                     ?_measure_freq:
  1019                           	opt stack 0
  1020  00003B                     print_reading@measurement:
  1021                           	opt stack 0
  1022                           
  1023                           ; 2 bytes @ 0x3A
  1024  00003B                     	ds	2
  1025  00003D                     ??_measure_freq:
  1026  00003D                     ldexp@newexp:
  1027                           	opt stack 0
  1028  00003D                     log@exponent:
  1029                           	opt stack 0
  1030  00003D                     _print_reading$1312:
  1031                           	opt stack 0
  1032                           
  1033                           ; 2 bytes @ 0x3C
  1034  00003D                     	ds	1
  1035  00003E                     measure_freq@count:
  1036                           	opt stack 0
  1037                           
  1038                           ; 2 bytes @ 0x3D
  1039  00003E                     	ds	1
  1040  00003F                     ??_ldexp:
  1041  00003F                     ?_log10:
  1042                           	opt stack 0
  1043  00003F                     _print_reading$1313:
  1044                           	opt stack 0
  1045  00003F                     log10@x:
  1046                           	opt stack 0
  1047                           
  1048                           ; 3 bytes @ 0x3E
  1049  00003F                     	ds	1
  1050  000040                     ?___lwtoft:
  1051                           	opt stack 0
  1052  000040                     ___lwtoft@c:
  1053                           	opt stack 0
  1054                           
  1055                           ; 2 bytes @ 0x3F
  1056  000040                     	ds	2
  1057  000042                     _log10$1314:
  1058                           	opt stack 0
  1059                           
  1060                           ; 3 bytes @ 0x41
  1061  000042                     	ds	1
  1062  000043                     calibrate@i:
  1063                           	opt stack 0
  1064                           
  1065                           ; 1 bytes @ 0x42
  1066  000043                     	ds	2
  1067  000045                     ?___fttol:
  1068                           	opt stack 0
  1069  000045                     ___fttol@f1:
  1070                           	opt stack 0
  1071                           
  1072                           ; 3 bytes @ 0x44
  1073  000045                     	ds	4
  1074  000049                     ??___fttol:
  1075                           
  1076                           ; 1 bytes @ 0x48
  1077  000049                     	ds	5
  1078  00004E                     ___fttol@sign1:
  1079                           	opt stack 0
  1080                           
  1081                           ; 1 bytes @ 0x4D
  1082  00004E                     	ds	1
  1083  00004F                     ___fttol@lval:
  1084                           	opt stack 0
  1085                           
  1086                           ; 4 bytes @ 0x4E
  1087  00004F                     	ds	4
  1088  000053                     ___fttol@exp1:
  1089                           	opt stack 0
  1090                           
  1091                           ; 1 bytes @ 0x52
  1092  000053                     	ds	1
  1093  000054                     ?___altoft:
  1094                           	opt stack 0
  1095  000054                     _measure_capacitance$1302:
  1096                           	opt stack 0
  1097  000054                     ___altoft@c:
  1098                           	opt stack 0
  1099                           
  1100                           ; 4 bytes @ 0x53
  1101  000054                     	ds	3
  1102  000057                     _measure_capacitance$1303:
  1103                           	opt stack 0
  1104                           
  1105                           ; 3 bytes @ 0x56
  1106  000057                     	ds	1
  1107  000058                     ??___altoft:
  1108                           
  1109                           ; 1 bytes @ 0x57
  1110  000058                     	ds	2
  1111  00005A                     _measure_capacitance$1304:
  1112                           	opt stack 0
  1113                           
  1114                           ; 3 bytes @ 0x59
  1115  00005A                     	ds	2
  1116  00005C                     ___altoft@exp:
  1117                           	opt stack 0
  1118                           
  1119                           ; 1 bytes @ 0x5B
  1120  00005C                     	ds	1
  1121  00005D                     measure_capacitance@unit:
  1122                           	opt stack 0
  1123  00005D                     ___altoft@sign:
  1124                           	opt stack 0
  1125                           
  1126                           ; 1 bytes @ 0x5C
  1127  00005D                     	ds	1
  1128  00005E                     ?_floor:
  1129                           	opt stack 0
  1130  00005E                     measure_capacitance@var:
  1131                           	opt stack 0
  1132  00005E                     floor@x:
  1133                           	opt stack 0
  1134                           
  1135                           ; 3 bytes @ 0x5D
  1136  00005E                     	ds	2
  1137  000060                     measure_capacitance@Cin:
  1138                           	opt stack 0
  1139                           
  1140                           ; 3 bytes @ 0x5F
  1141  000060                     	ds	1
  1142  000061                     floor@i:
  1143                           	opt stack 0
  1144                           
  1145                           ; 3 bytes @ 0x60
  1146  000061                     	ds	3
  1147  000064                     floor@expon:
  1148                           	opt stack 0
  1149                           
  1150                           ; 2 bytes @ 0x63
  1151  000064                     	ds	2
  1152  000066                     ?_exp:
  1153                           	opt stack 0
  1154  000066                     exp@x:
  1155                           	opt stack 0
  1156                           
  1157                           ; 3 bytes @ 0x65
  1158  000066                     	ds	3
  1159  000069                     main@new_mode:
  1160                           	opt stack 0
  1161                           
  1162                           ; 1 bytes @ 0x68
  1163  000069                     	ds	1
  1164                           tblptru	equ	0xFF8
  1165                           tblptrh	equ	0xFF7
  1166                           tblptrl	equ	0xFF6
  1167                           tablat	equ	0xFF5
  1168                           postinc0	equ	0xFEE
  1169                           wreg	equ	0xFE8
  1170                           postdec1	equ	0xFE5
  1171                           fsr1l	equ	0xFE1
  1172                           
  1173 ;;
  1174 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1175 ;;
  1176 ;; *************** function _main *****************
  1177 ;; Defined at:
  1178 ;;		line 117 in file "LC-meter.c"
  1179 ;; Parameters:    Size  Location     Type
  1180 ;;		None
  1181 ;; Auto vars:     Size  Location     Type
  1182 ;;  new_mode        1  104[COMRAM] unsigned char 
  1183 ;; Return value:  Size  Location     Type
  1184 ;;                  1    wreg      void 
  1185 ;; Registers used:
  1186 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1187 ;; Tracked objects:
  1188 ;;		On entry : 0/0
  1189 ;;		On exit  : 0/0
  1190 ;;		Unchanged: 0/0
  1191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1192 ;;      Params:         0       0       0       0       0       0       0
  1193 ;;      Locals:         1       0       0       0       0       0       0
  1194 ;;      Temps:          0       0       0       0       0       0       0
  1195 ;;      Totals:         1       0       0       0       0       0       0
  1196 ;;Total ram usage:        1 bytes
  1197 ;; Hardware stack levels required when called:    8
  1198 ;; This function calls:
  1199 ;;		_calibrate
  1200 ;;		_delay10ms
  1201 ;;		_format_double
  1202 ;;		_lcd_begin
  1203 ;;		_lcd_clear
  1204 ;;		_lcd_gotoxy
  1205 ;;		_lcd_init
  1206 ;;		_lcd_puts
  1207 ;;		_measure_capacitance
  1208 ;;		_measure_inductance
  1209 ;;		_print_indicator
  1210 ;;		_timer0_init
  1211 ;;		_timer2_init
  1212 ;; This function is called by:
  1213 ;;		Startup code after reset
  1214 ;; This function uses a non-reentrant model
  1215 ;;
  1216                           
  1217                           	psect	text0
  1218  0012D8                     __ptext0:
  1219                           	opt stack 0
  1220  0012D8                     _main:
  1221                           	opt stack 0
  1222  0012D8  FFFF               	dw	65535	; assembler added errata NOP
  1223                           
  1224                           ;LC-meter.c: 118: bres = msecpart = msecs = seconds = 0;
  1225                           
  1226                           ;incstack = 0
  1227  0012DA  0100               	movlb	0	; () banked
  1228  0012DC  6B99               	clrf	_seconds& (0+255),b	;volatile
  1229  0012DE  6B9A               	clrf	(_seconds+1)& (0+255),b	;volatile
  1230  0012E0  6B9B               	clrf	(_seconds+2)& (0+255),b	;volatile
  1231  0012E2  6B9C               	clrf	(_seconds+3)& (0+255),b	;volatile
  1232  0012E4  C099  F095         	movff	_seconds,_msecs	;volatile
  1233  0012E8  C09A  F096         	movff	_seconds+1,_msecs+1	;volatile
  1234  0012EC  C09B  F097         	movff	_seconds+2,_msecs+2	;volatile
  1235  0012F0  C09C  F098         	movff	_seconds+3,_msecs+3	;volatile
  1236  0012F4  C095  F0A4         	movff	_msecs,_msecpart	;volatile
  1237  0012F8  C096  F0A5         	movff	_msecs+1,_msecpart+1	;volatile
  1238  0012FC  C0A4  F0CF         	movff	_msecpart,_bres	;volatile
  1239  001300  C0A5  F0D0         	movff	_msecpart+1,_bres+1	;volatile
  1240  001304  6BD1               	clrf	(_bres+2)& (0+255),b	;volatile
  1241  001306  6BD2               	clrf	(_bres+3)& (0+255),b	;volatile
  1242                           
  1243                           ; BSR set to: 0
  1244                           ;LC-meter.c: 119: mode = -1;
  1245  001308  6872               	setf	_mode,c
  1246                           
  1247                           ;LC-meter.c: 121: CCal = 1000;
  1248  00130A  6BD3               	clrf	_CCal& (0+255),b
  1249  00130C  0E7A               	movlw	122
  1250  00130E  6FD4               	movwf	(_CCal+1)& (0+255),b
  1251  001310  0E44               	movlw	68
  1252  001312  6FD5               	movwf	(_CCal+2)& (0+255),b
  1253                           
  1254                           ; BSR set to: 0
  1255                           ;LC-meter.c: 123: led_cycle = 0;
  1256  001314  6BA2               	clrf	_led_cycle& (0+255),b	;volatile
  1257  001316  6BA3               	clrf	(_led_cycle+1)& (0+255),b	;volatile
  1258                           
  1259                           ;LC-meter.c: 124: led_interval = 500;
  1260  001318  0E01               	movlw	1
  1261  00131A  6FD7               	movwf	(_led_interval+1)& (0+255),b	;volatile
  1262  00131C  0EF4               	movlw	244
  1263  00131E  6FD6               	movwf	_led_interval& (0+255),b	;volatile
  1264                           
  1265                           ;LC-meter.c: 134: TRISA = 0b11001111;
  1266  001320  0ECF               	movlw	207
  1267  001322  6E92               	movwf	3986,c	;volatile
  1268                           
  1269                           ; BSR set to: 0
  1270                           ;LC-meter.c: 136: TRISB &= 0b00001111;
  1271  001324  0E0F               	movlw	15
  1272  001326  1693               	andwf	3987,f,c	;volatile
  1273                           
  1274                           ; BSR set to: 0
  1275                           ;LC-meter.c: 139: timer0_init(0b1000 | 0x20 | 0x40);
  1276  001328  0E68               	movlw	104
  1277  00132A  EC20  F00E         	call	_timer0_init
  1278                           
  1279                           ;LC-meter.c: 140: timer2_init(0b100 | 0x80);
  1280  00132E  0E84               	movlw	132
  1281  001330  EC9C  F011         	call	_timer2_init
  1282                           
  1283                           ;LC-meter.c: 147: INTCON2 &= ~0b10000000;
  1284  001334  9EF1               	bcf	intcon2,7,c	;volatile
  1285                           
  1286                           ;LC-meter.c: 155: TRISC = 0b10110011;
  1287  001336  0EB3               	movlw	179
  1288  001338  6E94               	movwf	3988,c	;volatile
  1289                           
  1290                           ;LC-meter.c: 159: PORTCbits.RC3 = 1;
  1291  00133A  8682               	bsf	3970,3,c	;volatile
  1292                           
  1293                           ;LC-meter.c: 162: TRISC &= ~(1 << 2);
  1294  00133C  9494               	bcf	3988,2,c	;volatile
  1295                           
  1296                           ;LC-meter.c: 163: LATC &= ~(1 << 2); LATC |= (!!(1)) << 2;;
  1297  00133E  948B               	bcf	3979,2,c	;volatile
  1298  001340  848B               	bsf	3979,2,c	;volatile
  1299                           
  1300                           ;LC-meter.c: 165: timer2_init(0b000 | 0x80);
  1301  001342  0E80               	movlw	128
  1302  001344  EC9C  F011         	call	_timer2_init
  1303                           
  1304                           ;LC-meter.c: 172: lcd_init(1);
  1305  001348  0E01               	movlw	1
  1306  00134A  ECD1  F011         	call	_lcd_init
  1307                           
  1308                           ; BSR set to: 0
  1309                           ;LC-meter.c: 173: lcd_begin(2, 1);
  1310  00134E  0E01               	movlw	1
  1311  001350  6E0D               	movwf	lcd_begin@dotsize,c
  1312  001352  0E02               	movlw	2
  1313  001354  EC80  F00A         	call	_lcd_begin
  1314                           
  1315                           ;LC-meter.c: 176: TRISC |= (1 << 4);
  1316  001358  8894               	bsf	3988,4,c	;volatile
  1317                           
  1318                           ;LC-meter.c: 177: TRISC &= ~(1 << 5);
  1319  00135A  9A94               	bcf	3988,5,c	;volatile
  1320                           
  1321                           ;LC-meter.c: 179: LATC &= ~(1 << 5);
  1322  00135C  9A8B               	bcf	3979,5,c	;volatile
  1323                           
  1324                           ;LC-meter.c: 180: delay10ms(50);
  1325  00135E  0E32               	movlw	50
  1326  001360  EC9B  F012         	call	_delay10ms
  1327                           
  1328                           ;LC-meter.c: 181: LATC |= (1 << 5);
  1329  001364  8A8B               	bsf	3979,5,c	;volatile
  1330                           
  1331                           ;LC-meter.c: 182: delay10ms(50);
  1332  001366  0E32               	movlw	50
  1333  001368  EC9B  F012         	call	_delay10ms
  1334                           
  1335                           ;LC-meter.c: 183: LATC &= ~(1 << 5);
  1336  00136C  9A8B               	bcf	3979,5,c	;volatile
  1337                           
  1338                           ;LC-meter.c: 184: delay10ms(50);
  1339  00136E  0E32               	movlw	50
  1340  001370  EC9B  F012         	call	_delay10ms
  1341                           
  1342                           ;LC-meter.c: 185: LATC |= (1 << 5);
  1343  001374  8A8B               	bsf	3979,5,c	;volatile
  1344                           
  1345                           ;LC-meter.c: 186: delay10ms(50);
  1346  001376  0E32               	movlw	50
  1347  001378  EC9B  F012         	call	_delay10ms
  1348                           
  1349                           ;LC-meter.c: 187: LATC &= ~(1 << 5);
  1350  00137C  9A8B               	bcf	3979,5,c	;volatile
  1351                           
  1352                           ;LC-meter.c: 197: INTCON |= 0xc0;
  1353  00137E  0EC0               	movlw	192
  1354  001380  12F2               	iorwf	intcon,f,c	;volatile
  1355                           
  1356                           ;LC-meter.c: 203: lcd_gotoxy(0, 0);
  1357  001382  0E00               	movlw	0
  1358  001384  6A0D               	clrf	lcd_gotoxy@row,c
  1359  001386  EC63  F011         	call	_lcd_gotoxy
  1360                           
  1361                           ;LC-meter.c: 205: lcd_puts("LC-meter ");
  1362  00138A  0E6C               	movlw	low STR_1
  1363  00138C  6E0D               	movwf	lcd_puts@string,c
  1364  00138E  ECB7  F011         	call	_lcd_puts	;wreg free
  1365                           
  1366                           ;LC-meter.c: 206: format_double( CCal);
  1367  001392  C0D3  F0BF         	movff	_CCal,format_double@num
  1368  001396  C0D4  F0C0         	movff	_CCal+1,format_double@num+1
  1369  00139A  C0D5  F0C1         	movff	_CCal+2,format_double@num+2
  1370  00139E  EC22  F008         	call	_format_double	;wreg free
  1371                           
  1372                           ;LC-meter.c: 210: delay10ms(5);
  1373  0013A2  0E05               	movlw	5
  1374  0013A4  EC9B  F012         	call	_delay10ms
  1375                           
  1376                           ;LC-meter.c: 215: calibrate();
  1377  0013A8  EC47  F00C         	call	_calibrate	;wreg free
  1378                           
  1379                           ;LC-meter.c: 218: lcd_clear();
  1380  0013AC  EC6B  F012         	call	_lcd_clear	;wreg free
  1381  0013B0                     l4256:
  1382  0013B0  FFFF               	dw	65535	; assembler added errata NOP
  1383  0013B2  0E01               	movlw	1
  1384                           
  1385                           ;LC-meter.c: 227: char new_mode = (!!(PORTC & (1 << 4)));
  1386  0013B4  A882               	btfss	3970,4,c	;volatile
  1387  0013B6  0E00               	movlw	0
  1388  0013B8  6E69               	movwf	main@new_mode,c
  1389                           
  1390                           ;LC-meter.c: 229: if(new_mode != mode) {
  1391  0013BA  1872               	xorwf	_mode,w,c
  1392  0013BC  E002               	bz	l4262
  1393                           
  1394                           ;LC-meter.c: 234: mode = new_mode;
  1395  0013BE  C069  F072         	movff	main@new_mode,_mode
  1396  0013C2                     l4262:
  1397                           
  1398                           ;LC-meter.c: 235: }
  1399                           ;LC-meter.c: 237: if(led_cycle >= led_interval)
  1400  0013C2  0100               	movlb	0	; () banked
  1401  0013C4  51D6               	movf	_led_interval& (0+255),w,b	;volatile
  1402  0013C6  5DA2               	subwf	_led_cycle& (0+255),w,b	;volatile
  1403  0013C8  51D7               	movf	(_led_interval+1)& (0+255),w,b	;volatile
  1404  0013CA  59A3               	subwfb	(_led_cycle+1)& (0+255),w,b	;volatile
  1405  0013CC  E302               	bnc	l4266
  1406                           
  1407                           ; BSR set to: 0
  1408                           ;LC-meter.c: 238: led_cycle = 0;
  1409  0013CE  6BA2               	clrf	_led_cycle& (0+255),b	;volatile
  1410  0013D0  6BA3               	clrf	(_led_cycle+1)& (0+255),b	;volatile
  1411  0013D2                     l4266:
  1412                           
  1413                           ; BSR set to: 0
  1414                           ;LC-meter.c: 240: if(mode)
  1415  0013D2  5072               	movf	_mode,w,c
  1416  0013D4  E003               	bz	l4270
  1417                           
  1418                           ; BSR set to: 0
  1419                           ;LC-meter.c: 241: measure_capacitance();
  1420  0013D6  EC5B  F005         	call	_measure_capacitance	;wreg free
  1421  0013DA  D002               	goto	l92
  1422  0013DC                     l4270:
  1423                           
  1424                           ; BSR set to: 0
  1425                           ;LC-meter.c: 242: else
  1426                           ;LC-meter.c: 243: measure_inductance();
  1427  0013DC  EC51  F003         	call	_measure_inductance	;wreg free
  1428  0013E0                     l92:
  1429  0013E0  FFFF               	dw	65535	; assembler added errata NOP
  1430                           
  1431                           ;LC-meter.c: 245: print_indicator(1);
  1432  0013E2  0E01               	movlw	1
  1433  0013E4  ECEA  F011         	call	_print_indicator
  1434                           
  1435                           ;LC-meter.c: 246: delay10ms(30);
  1436  0013E8  0E1E               	movlw	30
  1437  0013EA  EC9B  F012         	call	_delay10ms
  1438                           
  1439                           ;LC-meter.c: 248: print_indicator(0);
  1440  0013EE  0E00               	movlw	0
  1441  0013F0  ECEA  F011         	call	_print_indicator
  1442                           
  1443                           ;LC-meter.c: 249: delay10ms(20);
  1444  0013F4  0E14               	movlw	20
  1445  0013F6  EC9B  F012         	call	_delay10ms
  1446                           
  1447                           ;LC-meter.c: 250: }
  1448  0013FA  D7DA               	goto	l4256
  1449  0013FC                     __end_of_main:
  1450                           	opt stack 0
  1451                           tblptru	equ	0xFF8
  1452                           tblptrh	equ	0xFF7
  1453                           tblptrl	equ	0xFF6
  1454                           tablat	equ	0xFF5
  1455                           intcon	equ	0xFF2
  1456                           intcon2	equ	0xFF1
  1457                           postinc0	equ	0xFEE
  1458                           wreg	equ	0xFE8
  1459                           postdec1	equ	0xFE5
  1460                           fsr1l	equ	0xFE1
  1461                           
  1462 ;; *************** function _timer2_init *****************
  1463 ;; Defined at:
  1464 ;;		line 143 in file "lib/timer.c"
  1465 ;; Parameters:    Size  Location     Type
  1466 ;;  ps_mode         1    wreg     unsigned char 
  1467 ;; Auto vars:     Size  Location     Type
  1468 ;;  ps_mode         1   11[COMRAM] unsigned char 
  1469 ;;  postscaler      1    0        unsigned char 
  1470 ;;  ps              1    9[COMRAM] unsigned char 
  1471 ;; Return value:  Size  Location     Type
  1472 ;;                  1    wreg      void 
  1473 ;; Registers used:
  1474 ;;		wreg, status,2, status,0
  1475 ;; Tracked objects:
  1476 ;;		On entry : 0/0
  1477 ;;		On exit  : 0/0
  1478 ;;		Unchanged: 0/0
  1479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1480 ;;      Params:         0       0       0       0       0       0       0
  1481 ;;      Locals:         3       0       0       0       0       0       0
  1482 ;;      Temps:          1       0       0       0       0       0       0
  1483 ;;      Totals:         4       0       0       0       0       0       0
  1484 ;;Total ram usage:        4 bytes
  1485 ;; Hardware stack levels used:    1
  1486 ;; Hardware stack levels required when called:    2
  1487 ;; This function calls:
  1488 ;;		Nothing
  1489 ;; This function is called by:
  1490 ;;		_main
  1491 ;; This function uses a non-reentrant model
  1492 ;;
  1493                           
  1494                           	psect	text1
  1495  002338                     __ptext1:
  1496                           	opt stack 0
  1497  002338                     _timer2_init:
  1498                           	opt stack 0
  1499  002338  FFFF               	dw	65535	; assembler added errata NOP
  1500                           
  1501                           ;incstack = 0
  1502                           ;timer2_init@ps_mode stored from wreg
  1503  00233A  6E0C               	movwf	timer2_init@ps_mode,c
  1504                           
  1505                           ;timer.c: 144: uint8_t ps = ps_mode & 0b1111;
  1506  00233C  500C               	movf	timer2_init@ps_mode,w,c
  1507  00233E  0B0F               	andlw	15
  1508  002340  6E0A               	movwf	timer2_init@ps,c
  1509                           
  1510                           ;timer.c: 148: T2CON &= ~0b01111111;
  1511  002342  0E80               	movlw	128
  1512  002344  16CA               	andwf	4042,f,c	;volatile
  1513                           
  1514                           ;timer.c: 150: T2CON |= (postscaler & 0b1111) << 3;
  1515  002346  50CA               	movf	4042,w,c	;volatile
  1516                           
  1517                           ;timer.c: 151: T2CON |= (ps & 0b11);
  1518  002348  500A               	movf	timer2_init@ps,w,c
  1519  00234A  0B03               	andlw	3
  1520  00234C  12CA               	iorwf	4042,f,c	;volatile
  1521                           
  1522                           ;timer.c: 153: TMR2 = 0;
  1523  00234E  6ACC               	clrf	4044,c	;volatile
  1524                           
  1525                           ;timer.c: 155: T2CON |= 0b100;
  1526  002350  84CA               	bsf	4042,2,c	;volatile
  1527                           
  1528                           ;timer.c: 158: PIR1 &= ~0b10;
  1529  002352  929E               	bcf	3998,1,c	;volatile
  1530                           
  1531                           ;timer.c: 159: PIE1 = (!!(ps_mode & 0x80)) << 1;
  1532  002354  AE0C               	btfss	timer2_init@ps_mode,7,c
  1533  002356  D003               	goto	u2530
  1534  002358  6A09               	clrf	??_timer2_init& (0+255),c
  1535  00235A  2A09               	incf	??_timer2_init& (0+255),f,c
  1536  00235C  D002               	goto	u2548
  1537  00235E                     u2530:
  1538  00235E  FFFF               	dw	65535	; assembler added errata NOP
  1539  002360  6A09               	clrf	??_timer2_init& (0+255),c
  1540  002362                     u2548:
  1541  002362  FFFF               	dw	65535	; assembler added errata NOP
  1542  002364  90D8               	bcf	status,0,c
  1543  002366  3409               	rlcf	??_timer2_init,w,c
  1544  002368  6E9D               	movwf	3997,c	;volatile
  1545  00236A  0012               	return		;funcret
  1546  00236C  FFFF               	dw	65535	; errata NOP
  1547  00236E                     __end_of_timer2_init:
  1548                           	opt stack 0
  1549                           tblptru	equ	0xFF8
  1550                           tblptrh	equ	0xFF7
  1551                           tblptrl	equ	0xFF6
  1552                           tablat	equ	0xFF5
  1553                           intcon	equ	0xFF2
  1554                           intcon2	equ	0xFF1
  1555                           postinc0	equ	0xFEE
  1556                           wreg	equ	0xFE8
  1557                           postdec1	equ	0xFE5
  1558                           fsr1l	equ	0xFE1
  1559                           status	equ	0xFD8
  1560                           
  1561 ;; *************** function _timer0_init *****************
  1562 ;; Defined at:
  1563 ;;		line 28 in file "lib/timer.c"
  1564 ;; Parameters:    Size  Location     Type
  1565 ;;  ps_mode         1    wreg     unsigned char 
  1566 ;; Auto vars:     Size  Location     Type
  1567 ;;  ps_mode         1   18[COMRAM] unsigned char 
  1568 ;;  prescaler       1   17[COMRAM] unsigned char 
  1569 ;; Return value:  Size  Location     Type
  1570 ;;                  1    wreg      void 
  1571 ;; Registers used:
  1572 ;;		wreg, status,2, status,0
  1573 ;; Tracked objects:
  1574 ;;		On entry : 3F/0
  1575 ;;		On exit  : 0/0
  1576 ;;		Unchanged: 0/0
  1577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1578 ;;      Params:         0       0       0       0       0       0       0
  1579 ;;      Locals:        10       0       0       0       0       0       0
  1580 ;;      Temps:          1       0       0       0       0       0       0
  1581 ;;      Totals:        11       0       0       0       0       0       0
  1582 ;;Total ram usage:       11 bytes
  1583 ;; Hardware stack levels used:    1
  1584 ;; Hardware stack levels required when called:    2
  1585 ;; This function calls:
  1586 ;;		Nothing
  1587 ;; This function is called by:
  1588 ;;		_main
  1589 ;; This function uses a non-reentrant model
  1590 ;;
  1591                           
  1592                           	psect	text2
  1593  001C40                     __ptext2:
  1594                           	opt stack 0
  1595  001C40                     _timer0_init:
  1596                           	opt stack 0
  1597  001C40  FFFF               	dw	65535	; assembler added errata NOP
  1598                           
  1599                           ;incstack = 0
  1600                           ;timer0_init@ps_mode stored from wreg
  1601  001C42  6E13               	movwf	timer0_init@ps_mode,c
  1602                           
  1603                           ;timer.c: 29: uint8_t prescaler = ps_mode & 0b1111;
  1604  001C44  5013               	movf	timer0_init@ps_mode,w,c
  1605  001C46  0B0F               	andlw	15
  1606  001C48  6E12               	movwf	timer0_init@prescaler,c
  1607                           
  1608                           ;timer.c: 31: TMR0 = 0;
  1609  001C4A  6AD6               	clrf	4054,c	;volatile
  1610  001C4C  6AD7               	clrf	4055,c	;volatile
  1611                           
  1612                           ;timer.c: 34: T0CON |= (!!(ps_mode & 0x40)) ? 0x40 : 0x00;
  1613  001C4E  BC13               	btfsc	timer0_init@ps_mode,6,c
  1614  001C50  D003               	goto	l2928
  1615  001C52  6A0A               	clrf	_timer0_init$450,c
  1616  001C54  6A0B               	clrf	_timer0_init$450+1,c
  1617  001C56  D004               	goto	l2930
  1618  001C58                     l2928:
  1619  001C58  FFFF               	dw	65535	; assembler added errata NOP
  1620  001C5A  6A0B               	clrf	_timer0_init$450+1,c
  1621  001C5C  0E40               	movlw	64
  1622  001C5E  6E0A               	movwf	_timer0_init$450,c
  1623  001C60                     l2930:
  1624  001C60  FFFF               	dw	65535	; assembler added errata NOP
  1625  001C62  500A               	movf	_timer0_init$450,w,c
  1626  001C64  12D5               	iorwf	4053,f,c	;volatile
  1627                           
  1628                           ;timer.c: 50: T0CON |= (!!(ps_mode & 0x20)) ? 0x20 : 0x00;
  1629  001C66  BA13               	btfsc	timer0_init@ps_mode,5,c
  1630  001C68  D003               	goto	l2936
  1631  001C6A  6A0C               	clrf	_timer0_init$451,c
  1632  001C6C  6A0D               	clrf	_timer0_init$451+1,c
  1633  001C6E  D004               	goto	l2938
  1634  001C70                     l2936:
  1635  001C70  FFFF               	dw	65535	; assembler added errata NOP
  1636  001C72  6A0D               	clrf	_timer0_init$451+1,c
  1637  001C74  0E20               	movlw	32
  1638  001C76  6E0C               	movwf	_timer0_init$451,c
  1639  001C78                     l2938:
  1640  001C78  FFFF               	dw	65535	; assembler added errata NOP
  1641  001C7A  500C               	movf	_timer0_init$451,w,c
  1642  001C7C  12D5               	iorwf	4053,f,c	;volatile
  1643                           
  1644                           ;timer.c: 53: T0CON |= (!!(ps_mode & 0x10)) ? 0x10 : 0x00;
  1645  001C7E  B813               	btfsc	timer0_init@ps_mode,4,c
  1646  001C80  D003               	goto	l2944
  1647  001C82  6A0E               	clrf	_timer0_init$452,c
  1648  001C84  6A0F               	clrf	_timer0_init$452+1,c
  1649  001C86  D004               	goto	l2946
  1650  001C88                     l2944:
  1651  001C88  FFFF               	dw	65535	; assembler added errata NOP
  1652  001C8A  6A0F               	clrf	_timer0_init$452+1,c
  1653  001C8C  0E10               	movlw	16
  1654  001C8E  6E0E               	movwf	_timer0_init$452,c
  1655  001C90                     l2946:
  1656  001C90  FFFF               	dw	65535	; assembler added errata NOP
  1657  001C92  500E               	movf	_timer0_init$452,w,c
  1658  001C94  12D5               	iorwf	4053,f,c	;volatile
  1659                           
  1660                           ;timer.c: 56: T0CON &= (!!prescaler) ? ~0x08 : ~0x00;
  1661  001C96  5012               	movf	timer0_init@prescaler,w,c
  1662  001C98  E103               	bnz	l2952
  1663  001C9A  6810               	setf	_timer0_init$453,c
  1664  001C9C  6811               	setf	_timer0_init$453+1,c
  1665  001C9E  D003               	goto	l2954
  1666  001CA0                     l2952:
  1667  001CA0  6811               	setf	_timer0_init$453+1,c
  1668  001CA2  0EF7               	movlw	247
  1669  001CA4  6E10               	movwf	_timer0_init$453,c
  1670  001CA6                     l2954:
  1671  001CA6  FFFF               	dw	65535	; assembler added errata NOP
  1672  001CA8  5010               	movf	_timer0_init$453,w,c
  1673  001CAA  16D5               	andwf	4053,f,c	;volatile
  1674                           
  1675                           ;timer.c: 58: T0CON &= ~0b111;
  1676  001CAC  0EF8               	movlw	248
  1677  001CAE  16D5               	andwf	4053,f,c	;volatile
  1678                           
  1679                           ;timer.c: 60: if(prescaler > 0) {
  1680  001CB0  5012               	movf	timer0_init@prescaler,w,c
  1681  001CB2  E003               	bz	l2960
  1682                           
  1683                           ;timer.c: 61: T0CON |= (prescaler - 1) & 0b111;
  1684  001CB4  0412               	decf	timer0_init@prescaler,w,c
  1685  001CB6  0B07               	andlw	7
  1686  001CB8  12D5               	iorwf	4053,f,c	;volatile
  1687  001CBA                     l2960:
  1688                           
  1689                           ;timer.c: 67: }
  1690                           ;timer.c: 72: INTCONbits.TMR0IF = 0;
  1691  001CBA  94F2               	bcf	intcon,2,c	;volatile
  1692                           
  1693                           ;timer.c: 73: INTCONbits.T0IE = (ps_mode & 0x80) ? 1 : 0;
  1694  001CBC  AE13               	btfss	timer0_init@ps_mode,7,c
  1695  001CBE  D003               	goto	u2510
  1696  001CC0  6A09               	clrf	??_timer0_init& (0+255),c
  1697  001CC2  2A09               	incf	??_timer0_init& (0+255),f,c
  1698  001CC4  D002               	goto	u2528
  1699  001CC6                     u2510:
  1700  001CC6  FFFF               	dw	65535	; assembler added errata NOP
  1701  001CC8  6A09               	clrf	??_timer0_init& (0+255),c
  1702  001CCA                     u2528:
  1703  001CCA  FFFF               	dw	65535	; assembler added errata NOP
  1704  001CCC  3A09               	swapf	??_timer0_init,f,c
  1705  001CCE  4609               	rlncf	??_timer0_init,f,c
  1706  001CD0  50F2               	movf	intcon,w,c	;volatile
  1707  001CD2  1809               	xorwf	??_timer0_init,w,c
  1708  001CD4  0BDF               	andlw	-33
  1709  001CD6  1809               	xorwf	??_timer0_init,w,c
  1710  001CD8  6EF2               	movwf	intcon,c	;volatile
  1711  001CDA  0012               	return		;funcret
  1712  001CDC  FFFF               	dw	65535	; errata NOP
  1713  001CDE                     __end_of_timer0_init:
  1714                           	opt stack 0
  1715                           tblptru	equ	0xFF8
  1716                           tblptrh	equ	0xFF7
  1717                           tblptrl	equ	0xFF6
  1718                           tablat	equ	0xFF5
  1719                           intcon	equ	0xFF2
  1720                           intcon2	equ	0xFF1
  1721                           postinc0	equ	0xFEE
  1722                           wreg	equ	0xFE8
  1723                           postdec1	equ	0xFE5
  1724                           fsr1l	equ	0xFE1
  1725                           status	equ	0xFD8
  1726                           
  1727 ;; *************** function _print_indicator *****************
  1728 ;; Defined at:
  1729 ;;		line 464 in file "src/print.c"
  1730 ;; Parameters:    Size  Location     Type
  1731 ;;  indicate        1    wreg     unsigned char 
  1732 ;; Auto vars:     Size  Location     Type
  1733 ;;  indicate        1   18[COMRAM] unsigned char 
  1734 ;; Return value:  Size  Location     Type
  1735 ;;                  1    wreg      void 
  1736 ;; Registers used:
  1737 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1738 ;; Tracked objects:
  1739 ;;		On entry : 0/0
  1740 ;;		On exit  : 0/0
  1741 ;;		Unchanged: 0/0
  1742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1743 ;;      Params:         0       0       0       0       0       0       0
  1744 ;;      Locals:         1       0       0       0       0       0       0
  1745 ;;      Temps:          0       0       0       0       0       0       0
  1746 ;;      Totals:         1       0       0       0       0       0       0
  1747 ;;Total ram usage:        1 bytes
  1748 ;; Hardware stack levels used:    1
  1749 ;; Hardware stack levels required when called:    6
  1750 ;; This function calls:
  1751 ;;		_lcd_gotoxy
  1752 ;;		_lcd_puts
  1753 ;; This function is called by:
  1754 ;;		_main
  1755 ;; This function uses a non-reentrant model
  1756 ;;
  1757                           
  1758                           	psect	text3
  1759  0023D4                     __ptext3:
  1760                           	opt stack 0
  1761  0023D4                     _print_indicator:
  1762                           	opt stack 0
  1763  0023D4  FFFF               	dw	65535	; assembler added errata NOP
  1764                           
  1765                           ;incstack = 0
  1766                           ;print_indicator@indicate stored from wreg
  1767  0023D6  6E13               	movwf	print_indicator@indicate,c
  1768                           
  1769                           ;print.c: 478: lcd_gotoxy(0, 1);
  1770  0023D8  0E01               	movlw	1
  1771  0023DA  6E0D               	movwf	lcd_gotoxy@row,c
  1772  0023DC  0E00               	movlw	0
  1773  0023DE  EC63  F011         	call	_lcd_gotoxy
  1774                           
  1775                           ;print.c: 479: if(indicate) {
  1776  0023E2  5013               	movf	print_indicator@indicate,w,c
  1777  0023E4  E005               	bz	l4188
  1778                           
  1779                           ;print.c: 480: lcd_puts("-*-");
  1780  0023E6  0E88               	movlw	low STR_20
  1781  0023E8  6E0D               	movwf	lcd_puts@string,c
  1782  0023EA  ECB7  F011         	call	_lcd_puts	;wreg free
  1783                           
  1784                           ;print.c: 481: } else {
  1785  0023EE  D004               	goto	l421
  1786  0023F0                     l4188:
  1787                           
  1788                           ;print.c: 482: lcd_puts("   ");
  1789  0023F0  0E79               	movlw	low (STR_2+3)
  1790  0023F2  6E0D               	movwf	lcd_puts@string,c
  1791  0023F4  ECB7  F011         	call	_lcd_puts	;wreg free
  1792  0023F8                     l421:
  1793  0023F8  FFFF               	dw	65535	; assembler added errata NOP
  1794  0023FA  0012               	return		;funcret
  1795  0023FC  FFFF               	dw	65535	; errata NOP
  1796  0023FE                     __end_of_print_indicator:
  1797                           	opt stack 0
  1798                           tblptru	equ	0xFF8
  1799                           tblptrh	equ	0xFF7
  1800                           tblptrl	equ	0xFF6
  1801                           tablat	equ	0xFF5
  1802                           intcon	equ	0xFF2
  1803                           intcon2	equ	0xFF1
  1804                           postinc0	equ	0xFEE
  1805                           wreg	equ	0xFE8
  1806                           postdec1	equ	0xFE5
  1807                           fsr1l	equ	0xFE1
  1808                           status	equ	0xFD8
  1809                           
  1810 ;; *************** function _measure_inductance *****************
  1811 ;; Defined at:
  1812 ;;		line 218 in file "src/measure.c"
  1813 ;; Parameters:    Size  Location     Type
  1814 ;;		None
  1815 ;; Auto vars:     Size  Location     Type
  1816 ;;  Lin             3   30[BANK0 ] void 
  1817 ;;  denominator     3    3[BANK0 ] void 
  1818 ;;  numerator       3    0[BANK0 ] void 
  1819 ;;  var             2   28[BANK0 ] unsigned int 
  1820 ;;  unit            1   18[BANK0 ] unsigned char 
  1821 ;; Return value:  Size  Location     Type
  1822 ;;                  1    wreg      void 
  1823 ;; Registers used:
  1824 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1825 ;; Tracked objects:
  1826 ;;		On entry : 3F/0
  1827 ;;		On exit  : 0/0
  1828 ;;		Unchanged: 0/0
  1829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1830 ;;      Params:         0       0       0       0       0       0       0
  1831 ;;      Locals:         0      33       0       0       0       0       0
  1832 ;;      Temps:          0       0       0       0       0       0       0
  1833 ;;      Totals:         0      33       0       0       0       0       0
  1834 ;;Total ram usage:       33 bytes
  1835 ;; Hardware stack levels used:    1
  1836 ;; Hardware stack levels required when called:    7
  1837 ;; This function calls:
  1838 ;;		___ftdiv
  1839 ;;		___ftge
  1840 ;;		___ftmul
  1841 ;;		___ftsub
  1842 ;;		___fttol
  1843 ;;		___lwtoft
  1844 ;;		_lcd_gotoxy
  1845 ;;		_measure_freq
  1846 ;;		_print_reading
  1847 ;;		_print_unit
  1848 ;;		_put_str
  1849 ;; This function is called by:
  1850 ;;		_main
  1851 ;; This function uses a non-reentrant model
  1852 ;;
  1853                           
  1854                           	psect	text4
  1855  0006A2                     __ptext4:
  1856                           	opt stack 0
  1857  0006A2                     _measure_inductance:
  1858                           	opt stack 0
  1859  0006A2  FFFF               	dw	65535	; assembler added errata NOP
  1860                           
  1861                           ; BSR set to: 0
  1862                           ;measure.c: 219: uint8_t unit;
  1863                           ;measure.c: 220: uint16_t var;
  1864                           ;measure.c: 222: double Lin, numerator, denominator;
  1865                           ;measure.c: 225: lcd_gotoxy(0, 0);
  1866                           
  1867                           ;incstack = 0
  1868  0006A4  0E00               	movlw	0
  1869  0006A6  6A0D               	clrf	lcd_gotoxy@row,c
  1870  0006A8  EC63  F011         	call	_lcd_gotoxy
  1871                           
  1872                           ;measure.c: 226: put_str("Inductivity ");
  1873  0006AC  0E49               	movlw	low STR_10
  1874  0006AE  6E0E               	movwf	put_str@s,c
  1875  0006B0  EC80  F011         	call	_put_str	;wreg free
  1876                           
  1877                           ;measure.c: 228: var = measure_freq();
  1878  0006B4  ECFE  F009         	call	_measure_freq	;wreg free
  1879  0006B8  C03B  F0C4         	movff	?_measure_freq,measure_inductance@var
  1880  0006BC  C03C  F0C5         	movff	?_measure_freq+1,measure_inductance@var+1
  1881                           
  1882                           ;measure.c: 230: F3 = (double)var;
  1883  0006C0  C0C4  F040         	movff	measure_inductance@var,___lwtoft@c
  1884  0006C4  C0C5  F041         	movff	measure_inductance@var+1,___lwtoft@c+1
  1885  0006C8  ECFF  F011         	call	___lwtoft	;wreg free
  1886  0006CC  C040  F06A         	movff	?___lwtoft,_F3
  1887  0006D0  C041  F06B         	movff	?___lwtoft+1,_F3+1
  1888  0006D4  C042  F06C         	movff	?___lwtoft+2,_F3+2
  1889                           
  1890                           ;measure.c: 231: if(F3 > F1)
  1891  0006D8  C06F  F009         	movff	_F1,___ftge@ff1
  1892  0006DC  C070  F00A         	movff	_F1+1,___ftge@ff1+1
  1893  0006E0  C071  F00B         	movff	_F1+2,___ftge@ff1+2
  1894  0006E4  C06A  F00C         	movff	_F3,___ftge@ff2
  1895  0006E8  C06B  F00D         	movff	_F3+1,___ftge@ff2+1
  1896  0006EC  C06C  F00E         	movff	_F3+2,___ftge@ff2+2
  1897  0006F0  ECB5  F00F         	call	___ftge	;wreg free
  1898  0006F4  E206               	bc	l4154
  1899                           
  1900                           ;measure.c: 232: F3 = F1;
  1901  0006F6  C06F  F06A         	movff	_F1,_F3
  1902  0006FA  C070  F06B         	movff	_F1+1,_F3+1
  1903  0006FE  C071  F06C         	movff	_F1+2,_F3+2
  1904  000702                     l4154:
  1905                           
  1906                           ;measure.c: 233: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1907  000702  C09D  F033         	movff	_F2,___ftsub@f2
  1908  000706  C09E  F034         	movff	_F2+1,___ftsub@f2+1
  1909  00070A  C09F  F035         	movff	_F2+2,___ftsub@f2+2
  1910  00070E  C09D  F030         	movff	_F2,___ftsub@f1
  1911  000712  C09E  F031         	movff	_F2+1,___ftsub@f1+1
  1912  000716  C09F  F032         	movff	_F2+2,___ftsub@f1+2
  1913  00071A  EC46  F011         	call	___ftsub	;wreg free
  1914  00071E  C030  F0AE         	movff	?___ftsub,_measure_inductance$1305
  1915  000722  C031  F0AF         	movff	?___ftsub+1,_measure_inductance$1305+1
  1916  000726  C032  F0B0         	movff	?___ftsub+2,_measure_inductance$1305+2
  1917                           
  1918                           ;measure.c: 233: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1919  00072A  C0AE  F033         	movff	_measure_inductance$1305,___ftsub@f2
  1920  00072E  C0AF  F034         	movff	_measure_inductance$1305+1,___ftsub@f2+1
  1921  000732  C0B0  F035         	movff	_measure_inductance$1305+2,___ftsub@f2+2
  1922  000736  C06F  F024         	movff	_F1,___ftmul@f2
  1923  00073A  C070  F025         	movff	_F1+1,___ftmul@f2+1
  1924  00073E  C071  F026         	movff	_F1+2,___ftmul@f2+2
  1925  000742  C06F  F021         	movff	_F1,___ftmul@f1
  1926  000746  C070  F022         	movff	_F1+1,___ftmul@f1+1
  1927  00074A  C071  F023         	movff	_F1+2,___ftmul@f1+2
  1928  00074E  EC6C  F00B         	call	___ftmul	;wreg free
  1929  000752  C021  F030         	movff	?___ftmul,___ftsub@f1
  1930  000756  C022  F031         	movff	?___ftmul+1,___ftsub@f1+1
  1931  00075A  C023  F032         	movff	?___ftmul+2,___ftsub@f1+2
  1932  00075E  EC46  F011         	call	___ftsub	;wreg free
  1933  000762  C030  F0BB         	movff	?___ftsub,_measure_inductance$1306
  1934  000766  C031  F0BC         	movff	?___ftsub+1,_measure_inductance$1306+1
  1935  00076A  C032  F0BD         	movff	?___ftsub+2,_measure_inductance$1306+2
  1936                           
  1937                           ;measure.c: 233: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1938  00076E  C06A  F024         	movff	_F3,___ftmul@f2
  1939  000772  C06B  F025         	movff	_F3+1,___ftmul@f2+1
  1940  000776  C06C  F026         	movff	_F3+2,___ftmul@f2+2
  1941  00077A  C06A  F021         	movff	_F3,___ftmul@f1
  1942  00077E  C06B  F022         	movff	_F3+1,___ftmul@f1+1
  1943  000782  C06C  F023         	movff	_F3+2,___ftmul@f1+2
  1944  000786  EC6C  F00B         	call	___ftmul	;wreg free
  1945  00078A  C021  F033         	movff	?___ftmul,___ftsub@f2
  1946  00078E  C022  F034         	movff	?___ftmul+1,___ftsub@f2+1
  1947  000792  C023  F035         	movff	?___ftmul+2,___ftsub@f2+2
  1948  000796  C06F  F024         	movff	_F1,___ftmul@f2
  1949  00079A  C070  F025         	movff	_F1+1,___ftmul@f2+1
  1950  00079E  C071  F026         	movff	_F1+2,___ftmul@f2+2
  1951  0007A2  C06F  F021         	movff	_F1,___ftmul@f1
  1952  0007A6  C070  F022         	movff	_F1+1,___ftmul@f1+1
  1953  0007AA  C071  F023         	movff	_F1+2,___ftmul@f1+2
  1954  0007AE  EC6C  F00B         	call	___ftmul	;wreg free
  1955  0007B2  C021  F030         	movff	?___ftmul,___ftsub@f1
  1956  0007B6  C022  F031         	movff	?___ftmul+1,___ftsub@f1+1
  1957  0007BA  C023  F032         	movff	?___ftmul+2,___ftsub@f1+2
  1958  0007BE  EC46  F011         	call	___ftsub	;wreg free
  1959  0007C2  C030  F0BE         	movff	?___ftsub,_measure_inductance$1307
  1960  0007C6  C031  F0BF         	movff	?___ftsub+1,_measure_inductance$1307+1
  1961  0007CA  C032  F0C0         	movff	?___ftsub+2,_measure_inductance$1307+2
  1962                           
  1963                           ;measure.c: 233: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1964  0007CE  C0BB  F024         	movff	_measure_inductance$1306,___ftmul@f2
  1965  0007D2  C0BC  F025         	movff	_measure_inductance$1306+1,___ftmul@f2+1
  1966  0007D6  C0BD  F026         	movff	_measure_inductance$1306+2,___ftmul@f2+2
  1967  0007DA  C0BE  F021         	movff	_measure_inductance$1307,___ftmul@f1
  1968  0007DE  C0BF  F022         	movff	_measure_inductance$1307+1,___ftmul@f1+1
  1969  0007E2  C0C0  F023         	movff	_measure_inductance$1307+2,___ftmul@f1+2
  1970  0007E6  EC6C  F00B         	call	___ftmul	;wreg free
  1971  0007EA  C021  F0C1         	movff	?___ftmul,_measure_inductance$1308
  1972  0007EE  C022  F0C2         	movff	?___ftmul+1,_measure_inductance$1308+1
  1973  0007F2  C023  F0C3         	movff	?___ftmul+2,_measure_inductance$1308+2
  1974                           
  1975                           ;measure.c: 233: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  1976  0007F6  C0C1  F021         	movff	_measure_inductance$1308,___ftmul@f1
  1977  0007FA  C0C2  F022         	movff	_measure_inductance$1308+1,___ftmul@f1+1
  1978  0007FE  C0C3  F023         	movff	_measure_inductance$1308+2,___ftmul@f1+2
  1979  000802  0E40               	movlw	64
  1980  000804  6E24               	movwf	___ftmul@f2,c
  1981  000806  0E1C               	movlw	28
  1982  000808  6E25               	movwf	___ftmul@f2+1,c
  1983  00080A  0E46               	movlw	70
  1984  00080C  6E26               	movwf	___ftmul@f2+2,c
  1985  00080E  EC6C  F00B         	call	___ftmul	;wreg free
  1986  000812  C021  F0A8         	movff	?___ftmul,measure_inductance@numerator
  1987  000816  C022  F0A9         	movff	?___ftmul+1,measure_inductance@numerator+1
  1988  00081A  C023  F0AA         	movff	?___ftmul+2,measure_inductance@numerator+2
  1989                           
  1990                           ;measure.c: 234: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  1991  00081E  C06F  F024         	movff	_F1,___ftmul@f2
  1992  000822  C070  F025         	movff	_F1+1,___ftmul@f2+1
  1993  000826  C071  F026         	movff	_F1+2,___ftmul@f2+2
  1994  00082A  C06F  F021         	movff	_F1,___ftmul@f1
  1995  00082E  C070  F022         	movff	_F1+1,___ftmul@f1+1
  1996  000832  C071  F023         	movff	_F1+2,___ftmul@f1+2
  1997  000836  EC6C  F00B         	call	___ftmul	;wreg free
  1998  00083A  C021  F0B1         	movff	?___ftmul,_measure_inductance$1309
  1999  00083E  C022  F0B2         	movff	?___ftmul+1,_measure_inductance$1309+1
  2000  000842  C023  F0B3         	movff	?___ftmul+2,_measure_inductance$1309+2
  2001                           
  2002                           ;measure.c: 234: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2003  000846  C09D  F024         	movff	_F2,___ftmul@f2
  2004  00084A  C09E  F025         	movff	_F2+1,___ftmul@f2+1
  2005  00084E  C09F  F026         	movff	_F2+2,___ftmul@f2+2
  2006  000852  C0B1  F021         	movff	_measure_inductance$1309,___ftmul@f1
  2007  000856  C0B2  F022         	movff	_measure_inductance$1309+1,___ftmul@f1+1
  2008  00085A  C0B3  F023         	movff	_measure_inductance$1309+2,___ftmul@f1+2
  2009  00085E  EC6C  F00B         	call	___ftmul	;wreg free
  2010  000862  C021  F0BB         	movff	?___ftmul,_measure_inductance$1306
  2011  000866  C022  F0BC         	movff	?___ftmul+1,_measure_inductance$1306+1
  2012  00086A  C023  F0BD         	movff	?___ftmul+2,_measure_inductance$1306+2
  2013                           
  2014                           ;measure.c: 234: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2015  00086E  C09D  F024         	movff	_F2,___ftmul@f2
  2016  000872  C09E  F025         	movff	_F2+1,___ftmul@f2+1
  2017  000876  C09F  F026         	movff	_F2+2,___ftmul@f2+2
  2018  00087A  C0BB  F021         	movff	_measure_inductance$1306,___ftmul@f1
  2019  00087E  C0BC  F022         	movff	_measure_inductance$1306+1,___ftmul@f1+1
  2020  000882  C0BD  F023         	movff	_measure_inductance$1306+2,___ftmul@f1+2
  2021  000886  EC6C  F00B         	call	___ftmul	;wreg free
  2022  00088A  C021  F0BE         	movff	?___ftmul,_measure_inductance$1307
  2023  00088E  C022  F0BF         	movff	?___ftmul+1,_measure_inductance$1307+1
  2024  000892  C023  F0C0         	movff	?___ftmul+2,_measure_inductance$1307+2
  2025                           
  2026                           ;measure.c: 234: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2027  000896  C06A  F024         	movff	_F3,___ftmul@f2
  2028  00089A  C06B  F025         	movff	_F3+1,___ftmul@f2+1
  2029  00089E  C06C  F026         	movff	_F3+2,___ftmul@f2+2
  2030  0008A2  C0BE  F021         	movff	_measure_inductance$1307,___ftmul@f1
  2031  0008A6  C0BF  F022         	movff	_measure_inductance$1307+1,___ftmul@f1+1
  2032  0008AA  C0C0  F023         	movff	_measure_inductance$1307+2,___ftmul@f1+2
  2033  0008AE  EC6C  F00B         	call	___ftmul	;wreg free
  2034  0008B2  C021  F0C1         	movff	?___ftmul,_measure_inductance$1308
  2035  0008B6  C022  F0C2         	movff	?___ftmul+1,_measure_inductance$1308+1
  2036  0008BA  C023  F0C3         	movff	?___ftmul+2,_measure_inductance$1308+2
  2037                           
  2038                           ;measure.c: 234: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2039  0008BE  C06A  F024         	movff	_F3,___ftmul@f2
  2040  0008C2  C06B  F025         	movff	_F3+1,___ftmul@f2+1
  2041  0008C6  C06C  F026         	movff	_F3+2,___ftmul@f2+2
  2042  0008CA  C0C1  F021         	movff	_measure_inductance$1308,___ftmul@f1
  2043  0008CE  C0C2  F022         	movff	_measure_inductance$1308+1,___ftmul@f1+1
  2044  0008D2  C0C3  F023         	movff	_measure_inductance$1308+2,___ftmul@f1+2
  2045  0008D6  EC6C  F00B         	call	___ftmul	;wreg free
  2046  0008DA  C021  F0B4         	movff	?___ftmul,_measure_inductance$1310
  2047  0008DE  C022  F0B5         	movff	?___ftmul+1,_measure_inductance$1310+1
  2048  0008E2  C023  F0B6         	movff	?___ftmul+2,_measure_inductance$1310+2
  2049                           
  2050                           ;measure.c: 234: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2051  0008E6  C0D3  F024         	movff	_CCal,___ftmul@f2
  2052  0008EA  C0D4  F025         	movff	_CCal+1,___ftmul@f2+1
  2053  0008EE  C0D5  F026         	movff	_CCal+2,___ftmul@f2+2
  2054  0008F2  C0B4  F021         	movff	_measure_inductance$1310,___ftmul@f1
  2055  0008F6  C0B5  F022         	movff	_measure_inductance$1310+1,___ftmul@f1+1
  2056  0008FA  C0B6  F023         	movff	_measure_inductance$1310+2,___ftmul@f1+2
  2057  0008FE  EC6C  F00B         	call	___ftmul	;wreg free
  2058  000902  C021  F0B7         	movff	?___ftmul,_measure_inductance$1311
  2059  000906  C022  F0B8         	movff	?___ftmul+1,_measure_inductance$1311+1
  2060  00090A  C023  F0B9         	movff	?___ftmul+2,_measure_inductance$1311+2
  2061                           
  2062                           ;measure.c: 234: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2063  00090E  C0B7  F021         	movff	_measure_inductance$1311,___ftmul@f1
  2064  000912  C0B8  F022         	movff	_measure_inductance$1311+1,___ftmul@f1+1
  2065  000916  C0B9  F023         	movff	_measure_inductance$1311+2,___ftmul@f1+2
  2066  00091A  0EEA               	movlw	234
  2067  00091C  6E24               	movwf	___ftmul@f2,c
  2068  00091E  0E1D               	movlw	29
  2069  000920  6E25               	movwf	___ftmul@f2+1,c
  2070  000922  0E42               	movlw	66
  2071  000924  6E26               	movwf	___ftmul@f2+2,c
  2072  000926  EC6C  F00B         	call	___ftmul	;wreg free
  2073  00092A  C021  F0AB         	movff	?___ftmul,measure_inductance@denominator
  2074  00092E  C022  F0AC         	movff	?___ftmul+1,measure_inductance@denominator+1
  2075  000932  C023  F0AD         	movff	?___ftmul+2,measure_inductance@denominator+2
  2076                           
  2077                           ;measure.c: 235: Lin = (numerator / denominator) * 1e+15l;
  2078  000936  C0AB  F014         	movff	measure_inductance@denominator,___ftdiv@f2
  2079  00093A  C0AC  F015         	movff	measure_inductance@denominator+1,___ftdiv@f2+1
  2080  00093E  C0AD  F016         	movff	measure_inductance@denominator+2,___ftdiv@f2+2
  2081  000942  C0A8  F011         	movff	measure_inductance@numerator,___ftdiv@f1
  2082  000946  C0A9  F012         	movff	measure_inductance@numerator+1,___ftdiv@f1+1
  2083  00094A  C0AA  F013         	movff	measure_inductance@numerator+2,___ftdiv@f1+2
  2084  00094E  EC14  F00D         	call	___ftdiv	;wreg free
  2085  000952  C011  F021         	movff	?___ftdiv,___ftmul@f1
  2086  000956  C012  F022         	movff	?___ftdiv+1,___ftmul@f1+1
  2087  00095A  C013  F023         	movff	?___ftdiv+2,___ftmul@f1+2
  2088  00095E  0E60               	movlw	96
  2089  000960  6E24               	movwf	___ftmul@f2,c
  2090  000962  0E63               	movlw	99
  2091  000964  6E25               	movwf	___ftmul@f2+1,c
  2092  000966  0E58               	movlw	88
  2093  000968  6E26               	movwf	___ftmul@f2+2,c
  2094  00096A  EC6C  F00B         	call	___ftmul	;wreg free
  2095  00096E  C021  F0C6         	movff	?___ftmul,measure_inductance@Lin
  2096  000972  C022  F0C7         	movff	?___ftmul+1,measure_inductance@Lin+1
  2097  000976  C023  F0C8         	movff	?___ftmul+2,measure_inductance@Lin+2
  2098                           
  2099                           ;measure.c: 237: if(Lin > 999) {
  2100  00097A  0EC0               	movlw	192
  2101  00097C  6E09               	movwf	___ftge@ff1,c
  2102  00097E  0E79               	movlw	121
  2103  000980  6E0A               	movwf	___ftge@ff1+1,c
  2104  000982  0E44               	movlw	68
  2105  000984  6E0B               	movwf	___ftge@ff1+2,c
  2106  000986  C0C6  F00C         	movff	measure_inductance@Lin,___ftge@ff2
  2107  00098A  C0C7  F00D         	movff	measure_inductance@Lin+1,___ftge@ff2+1
  2108  00098E  C0C8  F00E         	movff	measure_inductance@Lin+2,___ftge@ff2+2
  2109  000992  ECB5  F00F         	call	___ftge	;wreg free
  2110  000996  E260               	bc	l4172
  2111                           
  2112                           ;measure.c: 238: if(Lin > (999e+03l)) {
  2113  000998  0EE6               	movlw	230
  2114  00099A  6E09               	movwf	___ftge@ff1,c
  2115  00099C  0E73               	movlw	115
  2116  00099E  6E0A               	movwf	___ftge@ff1+1,c
  2117  0009A0  0E49               	movlw	73
  2118  0009A2  6E0B               	movwf	___ftge@ff1+2,c
  2119  0009A4  C0C6  F00C         	movff	measure_inductance@Lin,___ftge@ff2
  2120  0009A8  C0C7  F00D         	movff	measure_inductance@Lin+1,___ftge@ff2+1
  2121  0009AC  C0C8  F00E         	movff	measure_inductance@Lin+2,___ftge@ff2+2
  2122  0009B0  ECB5  F00F         	call	___ftge	;wreg free
  2123  0009B4  E23C               	bc	l4168
  2124                           
  2125                           ;measure.c: 239: if(Lin > (999e+06l)) {
  2126  0009B6  0E2E               	movlw	46
  2127  0009B8  6E09               	movwf	___ftge@ff1,c
  2128  0009BA  0E6E               	movlw	110
  2129  0009BC  6E0A               	movwf	___ftge@ff1+1,c
  2130  0009BE  0E4E               	movlw	78
  2131  0009C0  6E0B               	movwf	___ftge@ff1+2,c
  2132  0009C2  C0C6  F00C         	movff	measure_inductance@Lin,___ftge@ff2
  2133  0009C6  C0C7  F00D         	movff	measure_inductance@Lin+1,___ftge@ff2+1
  2134  0009CA  C0C8  F00E         	movff	measure_inductance@Lin+2,___ftge@ff2+2
  2135  0009CE  ECB5  F00F         	call	___ftge	;wreg free
  2136  0009D2  E217               	bc	l4164
  2137                           
  2138                           ;measure.c: 240: Lin = Lin / (1e+09l);
  2139  0009D4  C0C6  F011         	movff	measure_inductance@Lin,___ftdiv@f1
  2140  0009D8  C0C7  F012         	movff	measure_inductance@Lin+1,___ftdiv@f1+1
  2141  0009DC  C0C8  F013         	movff	measure_inductance@Lin+2,___ftdiv@f1+2
  2142  0009E0  0E6B               	movlw	107
  2143  0009E2  6E14               	movwf	___ftdiv@f2,c
  2144  0009E4  0E6E               	movlw	110
  2145  0009E6  6E15               	movwf	___ftdiv@f2+1,c
  2146  0009E8  0E4E               	movlw	78
  2147  0009EA  6E16               	movwf	___ftdiv@f2+2,c
  2148  0009EC  EC14  F00D         	call	___ftdiv	;wreg free
  2149  0009F0  C011  F0C6         	movff	?___ftdiv,measure_inductance@Lin
  2150  0009F4  C012  F0C7         	movff	?___ftdiv+1,measure_inductance@Lin+1
  2151  0009F8  C013  F0C8         	movff	?___ftdiv+2,measure_inductance@Lin+2
  2152                           
  2153                           ;measure.c: 241: unit = 0;
  2154  0009FC  0100               	movlb	0	; () banked
  2155  0009FE  6BBA               	clrf	measure_inductance@unit& (0+255),b
  2156                           
  2157                           ;measure.c: 242: } else {
  2158  000A00  D02F               	goto	l4174
  2159  000A02                     l4164:
  2160                           
  2161                           ;measure.c: 243: Lin = Lin / (1e+06l);
  2162  000A02  C0C6  F011         	movff	measure_inductance@Lin,___ftdiv@f1
  2163  000A06  C0C7  F012         	movff	measure_inductance@Lin+1,___ftdiv@f1+1
  2164  000A0A  C0C8  F013         	movff	measure_inductance@Lin+2,___ftdiv@f1+2
  2165  000A0E  0E24               	movlw	36
  2166  000A10  6E14               	movwf	___ftdiv@f2,c
  2167  000A12  0E74               	movlw	116
  2168  000A14  6E15               	movwf	___ftdiv@f2+1,c
  2169  000A16  0E49               	movlw	73
  2170  000A18  6E16               	movwf	___ftdiv@f2+2,c
  2171  000A1A  EC14  F00D         	call	___ftdiv	;wreg free
  2172  000A1E  C011  F0C6         	movff	?___ftdiv,measure_inductance@Lin
  2173  000A22  C012  F0C7         	movff	?___ftdiv+1,measure_inductance@Lin+1
  2174  000A26  C013  F0C8         	movff	?___ftdiv+2,measure_inductance@Lin+2
  2175                           
  2176                           ;measure.c: 244: unit = 1;
  2177  000A2A  0E01               	movlw	1
  2178  000A2C  D016               	goto	L1
  2179  000A2E                     l4168:
  2180                           
  2181                           ;measure.c: 247: Lin = Lin / 1e+03l;
  2182  000A2E  C0C6  F011         	movff	measure_inductance@Lin,___ftdiv@f1
  2183  000A32  C0C7  F012         	movff	measure_inductance@Lin+1,___ftdiv@f1+1
  2184  000A36  C0C8  F013         	movff	measure_inductance@Lin+2,___ftdiv@f1+2
  2185  000A3A  6A14               	clrf	___ftdiv@f2,c
  2186  000A3C  0E7A               	movlw	122
  2187  000A3E  6E15               	movwf	___ftdiv@f2+1,c
  2188  000A40  0E44               	movlw	68
  2189  000A42  6E16               	movwf	___ftdiv@f2+2,c
  2190  000A44  EC14  F00D         	call	___ftdiv	;wreg free
  2191  000A48  C011  F0C6         	movff	?___ftdiv,measure_inductance@Lin
  2192  000A4C  C012  F0C7         	movff	?___ftdiv+1,measure_inductance@Lin+1
  2193  000A50  C013  F0C8         	movff	?___ftdiv+2,measure_inductance@Lin+2
  2194                           
  2195                           ;measure.c: 248: unit = 2;
  2196  000A54  0E02               	movlw	2
  2197  000A56  D001               	goto	L1
  2198  000A58                     l4172:
  2199                           
  2200                           ;measure.c: 251: unit = 3;
  2201  000A58  0E03               	movlw	3
  2202  000A5A                     L1:
  2203  000A5A  FFFF               	dw	65535	; assembler added errata NOP
  2204  000A5C  0100               	movlb	0	; () banked
  2205  000A5E  6FBA               	movwf	measure_inductance@unit& (0+255),b
  2206  000A60                     l4174:
  2207  000A60  FFFF               	dw	65535	; assembler added errata NOP
  2208                           
  2209                           ; BSR set to: 0
  2210                           ;measure.c: 253: Lin = Lin * 100;
  2211  000A62  C0C6  F021         	movff	measure_inductance@Lin,___ftmul@f1
  2212  000A66  C0C7  F022         	movff	measure_inductance@Lin+1,___ftmul@f1+1
  2213  000A6A  C0C8  F023         	movff	measure_inductance@Lin+2,___ftmul@f1+2
  2214  000A6E  6A24               	clrf	___ftmul@f2,c
  2215  000A70  0EC8               	movlw	200
  2216  000A72  6E25               	movwf	___ftmul@f2+1,c
  2217  000A74  0E42               	movlw	66
  2218  000A76  6E26               	movwf	___ftmul@f2+2,c
  2219  000A78  EC6C  F00B         	call	___ftmul	;wreg free
  2220  000A7C  C021  F0C6         	movff	?___ftmul,measure_inductance@Lin
  2221  000A80  C022  F0C7         	movff	?___ftmul+1,measure_inductance@Lin+1
  2222  000A84  C023  F0C8         	movff	?___ftmul+2,measure_inductance@Lin+2
  2223                           
  2224                           ;measure.c: 254: var = (uint16_t)Lin;
  2225  000A88  C0C6  F045         	movff	measure_inductance@Lin,___fttol@f1
  2226  000A8C  C0C7  F046         	movff	measure_inductance@Lin+1,___fttol@f1+1
  2227  000A90  C0C8  F047         	movff	measure_inductance@Lin+2,___fttol@f1+2
  2228  000A94  ECAE  F00C         	call	___fttol	;wreg free
  2229  000A98  C045  F0C4         	movff	?___fttol,measure_inductance@var
  2230  000A9C  C046  F0C5         	movff	?___fttol+1,measure_inductance@var+1
  2231                           
  2232                           ;measure.c: 256: print_reading(var);
  2233  000AA0  C0C4  F03B         	movff	measure_inductance@var,print_reading@measurement
  2234  000AA4  C0C5  F03C         	movff	measure_inductance@var+1,print_reading@measurement+1
  2235  000AA8  EC45  F00F         	call	_print_reading	;wreg free
  2236                           
  2237                           ;measure.c: 257: print_unit(unit);
  2238  000AAC  0100               	movlb	0	; () banked
  2239  000AAE  51BA               	movf	measure_inductance@unit& (0+255),w,b
  2240  000AB0  EF13  F012         	goto	_print_unit
  2241  000AB4  FFFF               	dw	65535	; errata NOP
  2242  000AB6                     __end_of_measure_inductance:
  2243                           	opt stack 0
  2244                           tblptru	equ	0xFF8
  2245                           tblptrh	equ	0xFF7
  2246                           tblptrl	equ	0xFF6
  2247                           tablat	equ	0xFF5
  2248                           intcon	equ	0xFF2
  2249                           intcon2	equ	0xFF1
  2250                           postinc0	equ	0xFEE
  2251                           wreg	equ	0xFE8
  2252                           postdec1	equ	0xFE5
  2253                           fsr1l	equ	0xFE1
  2254                           status	equ	0xFD8
  2255                           
  2256 ;; *************** function _measure_capacitance *****************
  2257 ;; Defined at:
  2258 ;;		line 131 in file "src/measure.c"
  2259 ;; Parameters:    Size  Location     Type
  2260 ;;		None
  2261 ;; Auto vars:     Size  Location     Type
  2262 ;;  Cin             3   95[COMRAM] void 
  2263 ;;  var             2   93[COMRAM] unsigned int 
  2264 ;;  unit            1   92[COMRAM] unsigned char 
  2265 ;; Return value:  Size  Location     Type
  2266 ;;                  1    wreg      void 
  2267 ;; Registers used:
  2268 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2269 ;; Tracked objects:
  2270 ;;		On entry : 3F/0
  2271 ;;		On exit  : 0/0
  2272 ;;		Unchanged: 0/0
  2273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2274 ;;      Params:         0       0       0       0       0       0       0
  2275 ;;      Locals:        15       0       0       0       0       0       0
  2276 ;;      Temps:          0       0       0       0       0       0       0
  2277 ;;      Totals:        15       0       0       0       0       0       0
  2278 ;;Total ram usage:       15 bytes
  2279 ;; Hardware stack levels used:    1
  2280 ;; Hardware stack levels required when called:    7
  2281 ;; This function calls:
  2282 ;;		___ftdiv
  2283 ;;		___ftge
  2284 ;;		___ftmul
  2285 ;;		___ftsub
  2286 ;;		___fttol
  2287 ;;		___lwtoft
  2288 ;;		_lcd_gotoxy
  2289 ;;		_measure_freq
  2290 ;;		_print_reading
  2291 ;;		_print_unit
  2292 ;;		_put_str
  2293 ;; This function is called by:
  2294 ;;		_main
  2295 ;; This function uses a non-reentrant model
  2296 ;;
  2297                           
  2298                           	psect	text5
  2299  000AB6                     __ptext5:
  2300                           	opt stack 0
  2301  000AB6                     _measure_capacitance:
  2302                           	opt stack 0
  2303  000AB6  FFFF               	dw	65535	; assembler added errata NOP
  2304                           
  2305                           ; BSR set to: 0
  2306                           ;measure.c: 132: uint8_t unit;
  2307                           ;measure.c: 133: uint16_t var;
  2308                           ;measure.c: 135: double Cin;
  2309                           ;measure.c: 139: lcd_gotoxy(0, 0);
  2310                           
  2311                           ;incstack = 0
  2312  000AB8  0E00               	movlw	0
  2313  000ABA  6A0D               	clrf	lcd_gotoxy@row,c
  2314  000ABC  EC63  F011         	call	_lcd_gotoxy
  2315                           
  2316                           ;measure.c: 140: put_str("Capacity ");
  2317  000AC0  0E62               	movlw	low STR_9
  2318  000AC2  6E0E               	movwf	put_str@s,c
  2319  000AC4  EC80  F011         	call	_put_str	;wreg free
  2320                           
  2321                           ;measure.c: 142: var = measure_freq();
  2322  000AC8  ECFE  F009         	call	_measure_freq	;wreg free
  2323  000ACC  C03B  F05E         	movff	?_measure_freq,measure_capacitance@var
  2324  000AD0  C03C  F05F         	movff	?_measure_freq+1,measure_capacitance@var+1
  2325                           
  2326                           ;measure.c: 144: F3 = (double)var;
  2327  000AD4  C05E  F040         	movff	measure_capacitance@var,___lwtoft@c
  2328  000AD8  C05F  F041         	movff	measure_capacitance@var+1,___lwtoft@c+1
  2329  000ADC  ECFF  F011         	call	___lwtoft	;wreg free
  2330  000AE0  C040  F06A         	movff	?___lwtoft,_F3
  2331  000AE4  C041  F06B         	movff	?___lwtoft+1,_F3+1
  2332  000AE8  C042  F06C         	movff	?___lwtoft+2,_F3+2
  2333                           
  2334                           ;measure.c: 178: if(F3 > F1)
  2335  000AEC  C06F  F009         	movff	_F1,___ftge@ff1
  2336  000AF0  C070  F00A         	movff	_F1+1,___ftge@ff1+1
  2337  000AF4  C071  F00B         	movff	_F1+2,___ftge@ff1+2
  2338  000AF8  C06A  F00C         	movff	_F3,___ftge@ff2
  2339  000AFC  C06B  F00D         	movff	_F3+1,___ftge@ff2+1
  2340  000B00  C06C  F00E         	movff	_F3+2,___ftge@ff2+2
  2341  000B04  ECB5  F00F         	call	___ftge	;wreg free
  2342  000B08  E206               	bc	l4118
  2343                           
  2344                           ;measure.c: 179: F3 = F1;
  2345  000B0A  C06F  F06A         	movff	_F1,_F3
  2346  000B0E  C070  F06B         	movff	_F1+1,_F3+1
  2347  000B12  C071  F06C         	movff	_F1+2,_F3+2
  2348  000B16                     l4118:
  2349                           
  2350                           ;measure.c: 181: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2351  000B16  C06A  F024         	movff	_F3,___ftmul@f2
  2352  000B1A  C06B  F025         	movff	_F3+1,___ftmul@f2+1
  2353  000B1E  C06C  F026         	movff	_F3+2,___ftmul@f2+2
  2354  000B22  C06A  F021         	movff	_F3,___ftmul@f1
  2355  000B26  C06B  F022         	movff	_F3+1,___ftmul@f1+1
  2356  000B2A  C06C  F023         	movff	_F3+2,___ftmul@f1+2
  2357  000B2E  EC6C  F00B         	call	___ftmul	;wreg free
  2358  000B32  C021  F033         	movff	?___ftmul,___ftsub@f2
  2359  000B36  C022  F034         	movff	?___ftmul+1,___ftsub@f2+1
  2360  000B3A  C023  F035         	movff	?___ftmul+2,___ftsub@f2+2
  2361  000B3E  C06F  F024         	movff	_F1,___ftmul@f2
  2362  000B42  C070  F025         	movff	_F1+1,___ftmul@f2+1
  2363  000B46  C071  F026         	movff	_F1+2,___ftmul@f2+2
  2364  000B4A  C06F  F021         	movff	_F1,___ftmul@f1
  2365  000B4E  C070  F022         	movff	_F1+1,___ftmul@f1+1
  2366  000B52  C071  F023         	movff	_F1+2,___ftmul@f1+2
  2367  000B56  EC6C  F00B         	call	___ftmul	;wreg free
  2368  000B5A  C021  F030         	movff	?___ftmul,___ftsub@f1
  2369  000B5E  C022  F031         	movff	?___ftmul+1,___ftsub@f1+1
  2370  000B62  C023  F032         	movff	?___ftmul+2,___ftsub@f1+2
  2371  000B66  EC46  F011         	call	___ftsub	;wreg free
  2372  000B6A  C030  F054         	movff	?___ftsub,_measure_capacitance$1302
  2373  000B6E  C031  F055         	movff	?___ftsub+1,_measure_capacitance$1302+1
  2374  000B72  C032  F056         	movff	?___ftsub+2,_measure_capacitance$1302+2
  2375                           
  2376                           ;measure.c: 181: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2377  000B76  C09D  F024         	movff	_F2,___ftmul@f2
  2378  000B7A  C09E  F025         	movff	_F2+1,___ftmul@f2+1
  2379  000B7E  C09F  F026         	movff	_F2+2,___ftmul@f2+2
  2380  000B82  C054  F021         	movff	_measure_capacitance$1302,___ftmul@f1
  2381  000B86  C055  F022         	movff	_measure_capacitance$1302+1,___ftmul@f1+1
  2382  000B8A  C056  F023         	movff	_measure_capacitance$1302+2,___ftmul@f1+2
  2383  000B8E  EC6C  F00B         	call	___ftmul	;wreg free
  2384  000B92  C021  F057         	movff	?___ftmul,_measure_capacitance$1303
  2385  000B96  C022  F058         	movff	?___ftmul+1,_measure_capacitance$1303+1
  2386  000B9A  C023  F059         	movff	?___ftmul+2,_measure_capacitance$1303+2
  2387                           
  2388                           ;measure.c: 181: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2389  000B9E  C09D  F024         	movff	_F2,___ftmul@f2
  2390  000BA2  C09E  F025         	movff	_F2+1,___ftmul@f2+1
  2391  000BA6  C09F  F026         	movff	_F2+2,___ftmul@f2+2
  2392  000BAA  C057  F021         	movff	_measure_capacitance$1303,___ftmul@f1
  2393  000BAE  C058  F022         	movff	_measure_capacitance$1303+1,___ftmul@f1+1
  2394  000BB2  C059  F023         	movff	_measure_capacitance$1303+2,___ftmul@f1+2
  2395  000BB6  EC6C  F00B         	call	___ftmul	;wreg free
  2396  000BBA  C021  F05A         	movff	?___ftmul,_measure_capacitance$1304
  2397  000BBE  C022  F05B         	movff	?___ftmul+1,_measure_capacitance$1304+1
  2398  000BC2  C023  F05C         	movff	?___ftmul+2,_measure_capacitance$1304+2
  2399                           
  2400                           ;measure.c: 181: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2401  000BC6  C05A  F021         	movff	_measure_capacitance$1304,___ftmul@f1
  2402  000BCA  C05B  F022         	movff	_measure_capacitance$1304+1,___ftmul@f1+1
  2403  000BCE  C05C  F023         	movff	_measure_capacitance$1304+2,___ftmul@f1+2
  2404  000BD2  C0D3  F024         	movff	_CCal,___ftmul@f2
  2405  000BD6  C0D4  F025         	movff	_CCal+1,___ftmul@f2+1
  2406  000BDA  C0D5  F026         	movff	_CCal+2,___ftmul@f2+2
  2407  000BDE  EC6C  F00B         	call	___ftmul	;wreg free
  2408  000BE2  C021  F060         	movff	?___ftmul,measure_capacitance@Cin
  2409  000BE6  C022  F061         	movff	?___ftmul+1,measure_capacitance@Cin+1
  2410  000BEA  C023  F062         	movff	?___ftmul+2,measure_capacitance@Cin+2
  2411                           
  2412                           ;measure.c: 191: if(Cin > 999) {
  2413  000BEE  0EC0               	movlw	192
  2414  000BF0  6E09               	movwf	___ftge@ff1,c
  2415  000BF2  0E79               	movlw	121
  2416  000BF4  6E0A               	movwf	___ftge@ff1+1,c
  2417  000BF6  0E44               	movlw	68
  2418  000BF8  6E0B               	movwf	___ftge@ff1+2,c
  2419  000BFA  C060  F00C         	movff	measure_capacitance@Cin,___ftge@ff2
  2420  000BFE  C061  F00D         	movff	measure_capacitance@Cin+1,___ftge@ff2+1
  2421  000C02  C062  F00E         	movff	measure_capacitance@Cin+2,___ftge@ff2+2
  2422  000C06  ECB5  F00F         	call	___ftge	;wreg free
  2423  000C0A  E25F               	bc	l4136
  2424                           
  2425                           ;measure.c: 192: if(Cin > (999e+03l)) {
  2426  000C0C  0EE6               	movlw	230
  2427  000C0E  6E09               	movwf	___ftge@ff1,c
  2428  000C10  0E73               	movlw	115
  2429  000C12  6E0A               	movwf	___ftge@ff1+1,c
  2430  000C14  0E49               	movlw	73
  2431  000C16  6E0B               	movwf	___ftge@ff1+2,c
  2432  000C18  C060  F00C         	movff	measure_capacitance@Cin,___ftge@ff2
  2433  000C1C  C061  F00D         	movff	measure_capacitance@Cin+1,___ftge@ff2+1
  2434  000C20  C062  F00E         	movff	measure_capacitance@Cin+2,___ftge@ff2+2
  2435  000C24  ECB5  F00F         	call	___ftge	;wreg free
  2436  000C28  E23B               	bc	l4132
  2437                           
  2438                           ;measure.c: 193: if(Cin > (999e+06l)) {
  2439  000C2A  0E2E               	movlw	46
  2440  000C2C  6E09               	movwf	___ftge@ff1,c
  2441  000C2E  0E6E               	movlw	110
  2442  000C30  6E0A               	movwf	___ftge@ff1+1,c
  2443  000C32  0E4E               	movlw	78
  2444  000C34  6E0B               	movwf	___ftge@ff1+2,c
  2445  000C36  C060  F00C         	movff	measure_capacitance@Cin,___ftge@ff2
  2446  000C3A  C061  F00D         	movff	measure_capacitance@Cin+1,___ftge@ff2+1
  2447  000C3E  C062  F00E         	movff	measure_capacitance@Cin+2,___ftge@ff2+2
  2448  000C42  ECB5  F00F         	call	___ftge	;wreg free
  2449  000C46  E216               	bc	l4128
  2450                           
  2451                           ;measure.c: 194: Cin = Cin / (1e+09);
  2452  000C48  C060  F011         	movff	measure_capacitance@Cin,___ftdiv@f1
  2453  000C4C  C061  F012         	movff	measure_capacitance@Cin+1,___ftdiv@f1+1
  2454  000C50  C062  F013         	movff	measure_capacitance@Cin+2,___ftdiv@f1+2
  2455  000C54  0E6B               	movlw	107
  2456  000C56  6E14               	movwf	___ftdiv@f2,c
  2457  000C58  0E6E               	movlw	110
  2458  000C5A  6E15               	movwf	___ftdiv@f2+1,c
  2459  000C5C  0E4E               	movlw	78
  2460  000C5E  6E16               	movwf	___ftdiv@f2+2,c
  2461  000C60  EC14  F00D         	call	___ftdiv	;wreg free
  2462  000C64  C011  F060         	movff	?___ftdiv,measure_capacitance@Cin
  2463  000C68  C012  F061         	movff	?___ftdiv+1,measure_capacitance@Cin+1
  2464  000C6C  C013  F062         	movff	?___ftdiv+2,measure_capacitance@Cin+2
  2465                           
  2466                           ;measure.c: 195: unit = 4;
  2467  000C70  0E04               	movlw	4
  2468  000C72  D02C               	goto	L2
  2469  000C74                     l4128:
  2470                           
  2471                           ;measure.c: 197: Cin = Cin / (1e+06);
  2472  000C74  C060  F011         	movff	measure_capacitance@Cin,___ftdiv@f1
  2473  000C78  C061  F012         	movff	measure_capacitance@Cin+1,___ftdiv@f1+1
  2474  000C7C  C062  F013         	movff	measure_capacitance@Cin+2,___ftdiv@f1+2
  2475  000C80  0E24               	movlw	36
  2476  000C82  6E14               	movwf	___ftdiv@f2,c
  2477  000C84  0E74               	movlw	116
  2478  000C86  6E15               	movwf	___ftdiv@f2+1,c
  2479  000C88  0E49               	movlw	73
  2480  000C8A  6E16               	movwf	___ftdiv@f2+2,c
  2481  000C8C  EC14  F00D         	call	___ftdiv	;wreg free
  2482  000C90  C011  F060         	movff	?___ftdiv,measure_capacitance@Cin
  2483  000C94  C012  F061         	movff	?___ftdiv+1,measure_capacitance@Cin+1
  2484  000C98  C013  F062         	movff	?___ftdiv+2,measure_capacitance@Cin+2
  2485                           
  2486                           ;measure.c: 198: unit = 5;
  2487  000C9C  0E05               	movlw	5
  2488  000C9E  D016               	goto	L2
  2489  000CA0                     l4132:
  2490                           
  2491                           ;measure.c: 201: Cin = Cin / 1e+03;
  2492  000CA0  C060  F011         	movff	measure_capacitance@Cin,___ftdiv@f1
  2493  000CA4  C061  F012         	movff	measure_capacitance@Cin+1,___ftdiv@f1+1
  2494  000CA8  C062  F013         	movff	measure_capacitance@Cin+2,___ftdiv@f1+2
  2495  000CAC  6A14               	clrf	___ftdiv@f2,c
  2496  000CAE  0E7A               	movlw	122
  2497  000CB0  6E15               	movwf	___ftdiv@f2+1,c
  2498  000CB2  0E44               	movlw	68
  2499  000CB4  6E16               	movwf	___ftdiv@f2+2,c
  2500  000CB6  EC14  F00D         	call	___ftdiv	;wreg free
  2501  000CBA  C011  F060         	movff	?___ftdiv,measure_capacitance@Cin
  2502  000CBE  C012  F061         	movff	?___ftdiv+1,measure_capacitance@Cin+1
  2503  000CC2  C013  F062         	movff	?___ftdiv+2,measure_capacitance@Cin+2
  2504                           
  2505                           ;measure.c: 202: unit = 6;
  2506  000CC6  0E06               	movlw	6
  2507  000CC8  D001               	goto	L2
  2508  000CCA                     l4136:
  2509                           
  2510                           ;measure.c: 205: unit = 7;
  2511  000CCA  0E07               	movlw	7
  2512  000CCC                     L2:
  2513  000CCC  FFFF               	dw	65535	; assembler added errata NOP
  2514  000CCE  6E5D               	movwf	measure_capacitance@unit,c
  2515                           
  2516                           ;measure.c: 207: Cin = Cin * 100;
  2517  000CD0  C060  F021         	movff	measure_capacitance@Cin,___ftmul@f1
  2518  000CD4  C061  F022         	movff	measure_capacitance@Cin+1,___ftmul@f1+1
  2519  000CD8  C062  F023         	movff	measure_capacitance@Cin+2,___ftmul@f1+2
  2520  000CDC  6A24               	clrf	___ftmul@f2,c
  2521  000CDE  0EC8               	movlw	200
  2522  000CE0  6E25               	movwf	___ftmul@f2+1,c
  2523  000CE2  0E42               	movlw	66
  2524  000CE4  6E26               	movwf	___ftmul@f2+2,c
  2525  000CE6  EC6C  F00B         	call	___ftmul	;wreg free
  2526  000CEA  C021  F060         	movff	?___ftmul,measure_capacitance@Cin
  2527  000CEE  C022  F061         	movff	?___ftmul+1,measure_capacitance@Cin+1
  2528  000CF2  C023  F062         	movff	?___ftmul+2,measure_capacitance@Cin+2
  2529                           
  2530                           ;measure.c: 208: var = (uint16_t)Cin;
  2531  000CF6  C060  F045         	movff	measure_capacitance@Cin,___fttol@f1
  2532  000CFA  C061  F046         	movff	measure_capacitance@Cin+1,___fttol@f1+1
  2533  000CFE  C062  F047         	movff	measure_capacitance@Cin+2,___fttol@f1+2
  2534  000D02  ECAE  F00C         	call	___fttol	;wreg free
  2535  000D06  C045  F05E         	movff	?___fttol,measure_capacitance@var
  2536  000D0A  C046  F05F         	movff	?___fttol+1,measure_capacitance@var+1
  2537                           
  2538                           ;measure.c: 210: print_reading(var);
  2539  000D0E  C05E  F03B         	movff	measure_capacitance@var,print_reading@measurement
  2540  000D12  C05F  F03C         	movff	measure_capacitance@var+1,print_reading@measurement+1
  2541  000D16  EC45  F00F         	call	_print_reading	;wreg free
  2542                           
  2543                           ;measure.c: 211: print_unit(unit);
  2544  000D1A  505D               	movf	measure_capacitance@unit,w,c
  2545  000D1C  EF13  F012         	goto	_print_unit
  2546  000D20  FFFF               	dw	65535	; errata NOP
  2547  000D22                     __end_of_measure_capacitance:
  2548                           	opt stack 0
  2549                           tblptru	equ	0xFF8
  2550                           tblptrh	equ	0xFF7
  2551                           tblptrl	equ	0xFF6
  2552                           tablat	equ	0xFF5
  2553                           intcon	equ	0xFF2
  2554                           intcon2	equ	0xFF1
  2555                           postinc0	equ	0xFEE
  2556                           wreg	equ	0xFE8
  2557                           postdec1	equ	0xFE5
  2558                           fsr1l	equ	0xFE1
  2559                           status	equ	0xFD8
  2560                           
  2561 ;; *************** function _print_unit *****************
  2562 ;; Defined at:
  2563 ;;		line 401 in file "src/print.c"
  2564 ;; Parameters:    Size  Location     Type
  2565 ;;  unit            1    wreg     unsigned char 
  2566 ;; Auto vars:     Size  Location     Type
  2567 ;;  unit            1    0[COMRAM] unsigned char 
  2568 ;; Return value:  Size  Location     Type
  2569 ;;                  1    wreg      void 
  2570 ;; Registers used:
  2571 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2572 ;; Tracked objects:
  2573 ;;		On entry : 0/0
  2574 ;;		On exit  : 0/0
  2575 ;;		Unchanged: 0/0
  2576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2577 ;;      Params:         0       0       0       0       0       0       0
  2578 ;;      Locals:         0       0       0       0       0       0       0
  2579 ;;      Temps:          2       0       0       0       0       0       0
  2580 ;;      Totals:         2       0       0       0       0       0       0
  2581 ;;Total ram usage:        2 bytes
  2582 ;; Hardware stack levels used:    1
  2583 ;; Hardware stack levels required when called:    6
  2584 ;; This function calls:
  2585 ;;		_lcd_gotoxy
  2586 ;; This function is called by:
  2587 ;;		_measure_capacitance
  2588 ;;		_measure_inductance
  2589 ;; This function uses a non-reentrant model
  2590 ;;
  2591                           
  2592                           	psect	text6
  2593  002426                     __ptext6:
  2594                           	opt stack 0
  2595  002426                     _print_unit:
  2596                           	opt stack 0
  2597  002426  FFFF               	dw	65535	; assembler added errata NOP
  2598                           
  2599                           ;print.c: 409: static const char* units[8] = {"H", "mH", "uH", "nH", "mF", "uF", "nF", "
      +                          pF"};
  2600                           ;print.c: 410: lcd_gotoxy(14, 0);
  2601                           
  2602                           ;incstack = 0
  2603  002428  6A0D               	clrf	lcd_gotoxy@row,c
  2604  00242A  0E0E               	movlw	14
  2605  00242C  EC63  F011         	call	_lcd_gotoxy
  2606                           
  2607                           ;print.c: 414: lcd_gotoxy(16 - (buffer.n - buffer.p), 0);
  2608  002430  6A0D               	clrf	lcd_gotoxy@row,c
  2609  002432  0100               	movlb	0	; () banked
  2610  002434  3990               	swapf	(_buffer+16)& (0+255),w,b
  2611  002436  0B0F               	andlw	15
  2612  002438  6E13               	movwf	??_print_unit& (0+255),c
  2613  00243A  5190               	movf	(_buffer+16)& (0+255),w,b
  2614  00243C  0B0F               	andlw	15
  2615  00243E  6E14               	movwf	(??_print_unit+1)& (0+255),c
  2616  002440  5013               	movf	??_print_unit,w,c
  2617  002442  5C14               	subwf	??_print_unit+1,w,c
  2618  002444  0F10               	addlw	16
  2619  002446  EF63  F011         	goto	_lcd_gotoxy
  2620  00244A  FFFF               	dw	65535	; errata NOP
  2621  00244C                     __end_of_print_unit:
  2622                           	opt stack 0
  2623                           tblptru	equ	0xFF8
  2624                           tblptrh	equ	0xFF7
  2625                           tblptrl	equ	0xFF6
  2626                           tablat	equ	0xFF5
  2627                           intcon	equ	0xFF2
  2628                           intcon2	equ	0xFF1
  2629                           postinc0	equ	0xFEE
  2630                           wreg	equ	0xFE8
  2631                           postdec1	equ	0xFE5
  2632                           fsr1l	equ	0xFE1
  2633                           status	equ	0xFD8
  2634                           
  2635 ;; *************** function _print_reading *****************
  2636 ;; Defined at:
  2637 ;;		line 424 in file "src/print.c"
  2638 ;; Parameters:    Size  Location     Type
  2639 ;;  measurement     2   58[COMRAM] unsigned int 
  2640 ;; Auto vars:     Size  Location     Type
  2641 ;;		None
  2642 ;; Return value:  Size  Location     Type
  2643 ;;                  1    wreg      void 
  2644 ;; Registers used:
  2645 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2646 ;; Tracked objects:
  2647 ;;		On entry : 0/0
  2648 ;;		On exit  : 0/0
  2649 ;;		Unchanged: 0/0
  2650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2651 ;;      Params:         2       0       0       0       0       0       0
  2652 ;;      Locals:         4       0       0       0       0       0       0
  2653 ;;      Temps:          0       0       0       0       0       0       0
  2654 ;;      Totals:         6       0       0       0       0       0       0
  2655 ;;Total ram usage:        6 bytes
  2656 ;; Hardware stack levels used:    1
  2657 ;; Hardware stack levels required when called:    6
  2658 ;; This function calls:
  2659 ;;		___lwdiv
  2660 ;;		___lwmod
  2661 ;;		_format_number
  2662 ;;		_lcd_gotoxy
  2663 ;;		_lcd_puts
  2664 ;; This function is called by:
  2665 ;;		_measure_capacitance
  2666 ;;		_measure_inductance
  2667 ;; This function uses a non-reentrant model
  2668 ;;
  2669                           
  2670                           	psect	text7
  2671  001E8A                     __ptext7:
  2672                           	opt stack 0
  2673  001E8A                     _print_reading:
  2674                           	opt stack 0
  2675  001E8A  FFFF               	dw	65535	; assembler added errata NOP
  2676                           
  2677                           ;print.c: 451: lcd_gotoxy(9, 0);
  2678                           
  2679                           ;incstack = 0
  2680  001E8C  6A0D               	clrf	lcd_gotoxy@row,c
  2681  001E8E  0E09               	movlw	9
  2682  001E90  EC63  F011         	call	_lcd_gotoxy
  2683                           
  2684                           ;print.c: 452: lcd_puts("     ");
  2685  001E94  0E77               	movlw	low (STR_2+1)
  2686  001E96  6E0D               	movwf	lcd_puts@string,c
  2687  001E98  ECB7  F011         	call	_lcd_puts	;wreg free
  2688                           
  2689                           ;print.c: 453: lcd_gotoxy(9, 0);
  2690  001E9C  6A0D               	clrf	lcd_gotoxy@row,c
  2691  001E9E  0E09               	movlw	9
  2692  001EA0  EC63  F011         	call	_lcd_gotoxy
  2693                           
  2694                           ;print.c: 455: format_number(measurement / 100, 10, 0);
  2695  001EA4  C03B  F009         	movff	print_reading@measurement,___lwdiv@dividend
  2696  001EA8  C03C  F00A         	movff	print_reading@measurement+1,___lwdiv@dividend+1
  2697  001EAC  6A0C               	clrf	___lwdiv@divisor+1,c
  2698  001EAE  0E64               	movlw	100
  2699  001EB0  6E0B               	movwf	___lwdiv@divisor,c
  2700  001EB2  EC14  F010         	call	___lwdiv	;wreg free
  2701  001EB6  C009  F03D         	movff	?___lwdiv,_print_reading$1312
  2702  001EBA  C00A  F03E         	movff	?___lwdiv+1,_print_reading$1312+1
  2703                           
  2704                           ;print.c: 455: format_number(measurement / 100, 10, 0);
  2705  001EBE  C03D  F010         	movff	_print_reading$1312,format_number@n
  2706  001EC2  C03E  F011         	movff	_print_reading$1312+1,format_number@n+1
  2707  001EC6  0E0A               	movlw	10
  2708  001EC8  6E12               	movwf	format_number@base,c
  2709  001ECA  6A13               	clrf	format_number@pad,c
  2710  001ECC  EC73  F00D         	call	_format_number	;wreg free
  2711                           
  2712                           ;print.c: 457: format_number(measurement % 100, 10, 0);
  2713  001ED0  C03B  F009         	movff	print_reading@measurement,___lwmod@dividend
  2714  001ED4  C03C  F00A         	movff	print_reading@measurement+1,___lwmod@dividend+1
  2715  001ED8  6A0C               	clrf	___lwmod@divisor+1,c
  2716  001EDA  0E64               	movlw	100
  2717  001EDC  6E0B               	movwf	___lwmod@divisor,c
  2718  001EDE  EC04  F011         	call	___lwmod	;wreg free
  2719  001EE2  C009  F03F         	movff	?___lwmod,_print_reading$1313
  2720  001EE6  C00A  F040         	movff	?___lwmod+1,_print_reading$1313+1
  2721                           
  2722                           ;print.c: 457: format_number(measurement % 100, 10, 0);
  2723  001EEA  C03F  F010         	movff	_print_reading$1313,format_number@n
  2724  001EEE  C040  F011         	movff	_print_reading$1313+1,format_number@n+1
  2725  001EF2  0E0A               	movlw	10
  2726  001EF4  6E12               	movwf	format_number@base,c
  2727  001EF6  6A13               	clrf	format_number@pad,c
  2728  001EF8  EF73  F00D         	goto	_format_number	;wreg free
  2729  001EFC  FFFF               	dw	65535	; errata NOP
  2730  001EFE                     __end_of_print_reading:
  2731                           	opt stack 0
  2732                           tblptru	equ	0xFF8
  2733                           tblptrh	equ	0xFF7
  2734                           tblptrl	equ	0xFF6
  2735                           tablat	equ	0xFF5
  2736                           intcon	equ	0xFF2
  2737                           intcon2	equ	0xFF1
  2738                           postinc0	equ	0xFEE
  2739                           wreg	equ	0xFE8
  2740                           postdec1	equ	0xFE5
  2741                           fsr1l	equ	0xFE1
  2742                           status	equ	0xFD8
  2743                           
  2744 ;; *************** function _lcd_puts *****************
  2745 ;; Defined at:
  2746 ;;		line 163 in file "lib/lcd44780.c"
  2747 ;; Parameters:    Size  Location     Type
  2748 ;;  string          1   12[COMRAM] PTR const unsigned char 
  2749 ;;		 -> STR_21(4), STR_20(4), STR_19(6), STR_5(5), 
  2750 ;;		 -> STR_4(6), STR_3(7), STR_2(7), STR_1(10), 
  2751 ;; Auto vars:     Size  Location     Type
  2752 ;;  i               1   14[COMRAM] unsigned char 
  2753 ;; Return value:  Size  Location     Type
  2754 ;;                  1    wreg      void 
  2755 ;; Registers used:
  2756 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2757 ;; Tracked objects:
  2758 ;;		On entry : 0/0
  2759 ;;		On exit  : 0/0
  2760 ;;		Unchanged: 0/0
  2761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2762 ;;      Params:         1       0       0       0       0       0       0
  2763 ;;      Locals:         1       0       0       0       0       0       0
  2764 ;;      Temps:          1       0       0       0       0       0       0
  2765 ;;      Totals:         3       0       0       0       0       0       0
  2766 ;;Total ram usage:        3 bytes
  2767 ;; Hardware stack levels used:    1
  2768 ;; Hardware stack levels required when called:    5
  2769 ;; This function calls:
  2770 ;;		_lcd_putch
  2771 ;; This function is called by:
  2772 ;;		_main
  2773 ;;		_print_reading
  2774 ;;		_print_indicator
  2775 ;; This function uses a non-reentrant model
  2776 ;;
  2777                           
  2778                           	psect	text8
  2779  00236E                     __ptext8:
  2780                           	opt stack 0
  2781  00236E                     _lcd_puts:
  2782                           	opt stack 0
  2783  00236E  FFFF               	dw	65535	; assembler added errata NOP
  2784                           
  2785                           ;lcd44780.c: 164: uint8_t i;
  2786                           ;lcd44780.c: 165: for(i = 0; string[i]; i++) lcd_putch(string[i]);
  2787                           
  2788                           ;incstack = 0
  2789  002370  6A0F               	clrf	lcd_puts@i,c
  2790  002372  D00B               	goto	l3744
  2791  002374                     l3740:
  2792  002374  500D               	movf	lcd_puts@string,w,c
  2793  002376  240F               	addwf	lcd_puts@i,w,c
  2794  002378  6E0E               	movwf	??_lcd_puts& (0+255),c
  2795  00237A  C00E  FFF6         	movff	??_lcd_puts,tblptrl
  2796  00237E                     	if	0	;There is only one active tblptr byte
  2797  00237E                     	endif
  2798  00237E                     	if	0	;tblptru may be non-zero
  2799  00237E                     	endif
  2800  00237E                     	if	0	;tblptru may be non-zero
  2801  00237E                     	endif
  2802  00237E  0008               	tblrd		*
  2803  002380  FFFF               	dw	65535	; errata NOP
  2804  002382  50F5               	movf	tablat,w,c
  2805  002384  EC7A  F012         	call	_lcd_putch
  2806  002388  2A0F               	incf	lcd_puts@i,f,c
  2807  00238A                     l3744:
  2808  00238A  FFFF               	dw	65535	; assembler added errata NOP
  2809  00238C  500D               	movf	lcd_puts@string,w,c
  2810  00238E  240F               	addwf	lcd_puts@i,w,c
  2811  002390  6E0E               	movwf	??_lcd_puts& (0+255),c
  2812  002392  C00E  FFF6         	movff	??_lcd_puts,tblptrl
  2813  002396                     	if	0	;There is only one active tblptr byte
  2814  002396                     	endif
  2815  002396                     	if	0	;tblptru may be non-zero
  2816  002396                     	endif
  2817  002396                     	if	0	;tblptru may be non-zero
  2818  002396                     	endif
  2819  002396  0008               	tblrd		*
  2820  002398  FFFF               	dw	65535	; errata NOP
  2821  00239A  50F5               	movf	tablat,w,c
  2822  00239C  E1EB               	bnz	l3740
  2823  00239E  0012               	return		;funcret
  2824  0023A0  FFFF               	dw	65535	; errata NOP
  2825  0023A2                     __end_of_lcd_puts:
  2826                           	opt stack 0
  2827                           tblptru	equ	0xFF8
  2828                           tblptrh	equ	0xFF7
  2829                           tblptrl	equ	0xFF6
  2830                           tablat	equ	0xFF5
  2831                           intcon	equ	0xFF2
  2832                           intcon2	equ	0xFF1
  2833                           postinc0	equ	0xFEE
  2834                           wreg	equ	0xFE8
  2835                           postdec1	equ	0xFE5
  2836                           fsr1l	equ	0xFE1
  2837                           status	equ	0xFD8
  2838                           
  2839 ;; *************** function _lcd_init *****************
  2840 ;; Defined at:
  2841 ;;		line 489 in file "lib/lcd44780.c"
  2842 ;; Parameters:    Size  Location     Type
  2843 ;;  fourbitmode     1    wreg     unsigned char 
  2844 ;; Auto vars:     Size  Location     Type
  2845 ;;  fourbitmode     1    8[COMRAM] unsigned char 
  2846 ;; Return value:  Size  Location     Type
  2847 ;;                  1    wreg      void 
  2848 ;; Registers used:
  2849 ;;		wreg, status,2, status,0
  2850 ;; Tracked objects:
  2851 ;;		On entry : 0/0
  2852 ;;		On exit  : 3F/0
  2853 ;;		Unchanged: 0/0
  2854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2855 ;;      Params:         0       0       0       0       0       0       0
  2856 ;;      Locals:         3       0       0       0       0       0       0
  2857 ;;      Temps:          0       0       0       0       0       0       0
  2858 ;;      Totals:         3       0       0       0       0       0       0
  2859 ;;Total ram usage:        3 bytes
  2860 ;; Hardware stack levels used:    1
  2861 ;; Hardware stack levels required when called:    2
  2862 ;; This function calls:
  2863 ;;		Nothing
  2864 ;; This function is called by:
  2865 ;;		_main
  2866 ;; This function uses a non-reentrant model
  2867 ;;
  2868                           
  2869                           	psect	text9
  2870  0023A2                     __ptext9:
  2871                           	opt stack 0
  2872  0023A2                     _lcd_init:
  2873                           	opt stack 0
  2874  0023A2  FFFF               	dw	65535	; assembler added errata NOP
  2875                           
  2876                           ;incstack = 0
  2877                           ;lcd_init@fourbitmode stored from wreg
  2878  0023A4  6E09               	movwf	lcd_init@fourbitmode,c
  2879                           
  2880                           ;lcd44780.c: 491: LCD_ctrl = 0;
  2881  0023A6  6A6D               	clrf	_LCD_ctrl,c
  2882                           
  2883                           ;lcd44780.c: 492: LCD_function = (fourbitmode ? 0x00 : 0x10);
  2884  0023A8  5009               	movf	lcd_init@fourbitmode,w,c
  2885  0023AA  E104               	bnz	l266
  2886  0023AC  6A0B               	clrf	_lcd_init$361+1,c
  2887  0023AE  0E10               	movlw	16
  2888  0023B0  6E0A               	movwf	_lcd_init$361,c
  2889  0023B2  D002               	goto	l268
  2890  0023B4                     l266:
  2891  0023B4  6A0A               	clrf	_lcd_init$361,c
  2892  0023B6  6A0B               	clrf	_lcd_init$361+1,c
  2893  0023B8                     l268:
  2894  0023B8  FFFF               	dw	65535	; assembler added errata NOP
  2895  0023BA  C00A  F06E         	movff	_lcd_init$361,_LCD_function
  2896                           
  2897                           ;lcd44780.c: 494: LCD_lines = 0;
  2898  0023BE  0100               	movlb	0	; () banked
  2899  0023C0  6BA6               	clrf	_LCD_lines& (0+255),b
  2900                           
  2901                           ;lcd44780.c: 496: LCD_mode = 0;
  2902  0023C2  6BA7               	clrf	_LCD_mode& (0+255),b
  2903                           
  2904                           ; BSR set to: 0
  2905                           ;lcd44780.c: 498: TRISB &= ~0b0100;
  2906  0023C4  9493               	bcf	3987,2,c	;volatile
  2907                           
  2908                           ;lcd44780.c: 499: LATB &= ~0b0100;
  2909  0023C6  948A               	bcf	3978,2,c	;volatile
  2910                           
  2911                           ;lcd44780.c: 504: TRISB &= ~0b1000;
  2912  0023C8  9693               	bcf	3987,3,c	;volatile
  2913                           
  2914                           ;lcd44780.c: 505: LATB &= ~0b1000;
  2915  0023CA  968A               	bcf	3978,3,c	;volatile
  2916                           
  2917                           ; BSR set to: 0
  2918                           ;lcd44780.c: 507: LATB &= ~0b11110000;
  2919  0023CC  0E0F               	movlw	15
  2920  0023CE  168A               	andwf	3978,f,c	;volatile
  2921                           
  2922                           ; BSR set to: 0
  2923  0023D0  0C0F               	retlw	15	;funcret
  2924  0023D2  FFFF               	dw	65535	; errata NOP
  2925  0023D4                     __end_of_lcd_init:
  2926                           	opt stack 0
  2927                           tblptru	equ	0xFF8
  2928                           tblptrh	equ	0xFF7
  2929                           tblptrl	equ	0xFF6
  2930                           tablat	equ	0xFF5
  2931                           intcon	equ	0xFF2
  2932                           intcon2	equ	0xFF1
  2933                           postinc0	equ	0xFEE
  2934                           wreg	equ	0xFE8
  2935                           postdec1	equ	0xFE5
  2936                           fsr1l	equ	0xFE1
  2937                           status	equ	0xFD8
  2938                           
  2939 ;; *************** function _lcd_begin *****************
  2940 ;; Defined at:
  2941 ;;		line 416 in file "lib/lcd44780.c"
  2942 ;; Parameters:    Size  Location     Type
  2943 ;;  lines           1    wreg     unsigned char 
  2944 ;;  dotsize         1   12[COMRAM] unsigned char 
  2945 ;; Auto vars:     Size  Location     Type
  2946 ;;  lines           1   14[COMRAM] unsigned char 
  2947 ;; Return value:  Size  Location     Type
  2948 ;;                  1    wreg      void 
  2949 ;; Registers used:
  2950 ;;		wreg, status,2, status,0, cstack
  2951 ;; Tracked objects:
  2952 ;;		On entry : 3F/0
  2953 ;;		On exit  : 0/0
  2954 ;;		Unchanged: 0/0
  2955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2956 ;;      Params:         1       0       0       0       0       0       0
  2957 ;;      Locals:         1       0       0       0       0       0       0
  2958 ;;      Temps:          1       0       0       0       0       0       0
  2959 ;;      Totals:         3       0       0       0       0       0       0
  2960 ;;Total ram usage:        3 bytes
  2961 ;; Hardware stack levels used:    1
  2962 ;; Hardware stack levels required when called:    5
  2963 ;; This function calls:
  2964 ;;		_lcd_command
  2965 ;;		_lcd_write4bits
  2966 ;; This function is called by:
  2967 ;;		_main
  2968 ;; This function uses a non-reentrant model
  2969 ;;
  2970                           
  2971                           	psect	text10
  2972  001500                     __ptext10:
  2973                           	opt stack 0
  2974  001500                     _lcd_begin:
  2975                           	opt stack 0
  2976  001500  FFFF               	dw	65535	; assembler added errata NOP
  2977                           
  2978                           ; BSR set to: 0
  2979                           ;incstack = 0
  2980                           ;lcd_begin@lines stored from wreg
  2981  001502  6E0F               	movwf	lcd_begin@lines,c
  2982                           
  2983                           ;lcd44780.c: 417: if(lines > 1)
  2984  001504  0E01               	movlw	1
  2985  001506  640F               	cpfsgt	lcd_begin@lines,c
  2986  001508  D001               	goto	l4002
  2987                           
  2988                           ;lcd44780.c: 418: LCD_function |= 0x08;
  2989  00150A  866E               	bsf	_LCD_function,3,c
  2990  00150C                     l4002:
  2991  00150C  FFFF               	dw	65535	; assembler added errata NOP
  2992                           
  2993                           ;lcd44780.c: 421: LCD_lines = lines;
  2994  00150E  C00F  F0A6         	movff	lcd_begin@lines,_LCD_lines
  2995                           
  2996                           ;lcd44780.c: 425: if((dotsize != 0) && (lines == 1))
  2997  001512  500D               	movf	lcd_begin@dotsize,w,c
  2998  001514  E003               	bz	l4010
  2999  001516  040F               	decf	lcd_begin@lines,w,c
  3000  001518  E101               	bnz	l4010
  3001                           
  3002                           ;lcd44780.c: 426: LCD_function |= 0x04;
  3003  00151A  846E               	bsf	_LCD_function,2,c
  3004  00151C                     l4010:
  3005                           
  3006                           ;lcd44780.c: 428: _delay((unsigned long)((15)*(20000000/4000.0)));
  3007  00151C  0E4A               	movlw	74
  3008  00151E  6E0E               	movwf	??_lcd_begin& (0+255),c
  3009  001520  0E18               	movlw	24
  3010  001522                     u4097:
  3011  001522  FFFF               	dw	65535	; errata NOP
  3012  001524  2EE8               	decfsz	wreg,f,c
  3013  001526  D7FD               	bra	u4097
  3014  001528  2E0E               	decfsz	??_lcd_begin& (0+255),f,c
  3015  00152A  D7FB               	bra	u4097
  3016  00152C  D000               	nop2	
  3017                           
  3018                           ;lcd44780.c: 431: LATB &= ~0b0100;
  3019  00152E  948A               	bcf	3978,2,c	;volatile
  3020                           
  3021                           ;lcd44780.c: 432: LATB &= ~0b1000;
  3022  001530  968A               	bcf	3978,3,c	;volatile
  3023                           
  3024                           ;lcd44780.c: 435: if(!(LCD_function & 0x10)) {
  3025  001532  B86E               	btfsc	_LCD_function,4,c
  3026  001534  D01F               	goto	l4028
  3027                           
  3028                           ;lcd44780.c: 439: lcd_write4bits(0x03);
  3029  001536  0E03               	movlw	3
  3030  001538  EC39  F012         	call	_lcd_write4bits
  3031                           
  3032                           ;lcd44780.c: 440: _delay((unsigned long)((5)*(20000000/4000.0)));
  3033  00153C  0E19               	movlw	25
  3034  00153E  6E0E               	movwf	??_lcd_begin& (0+255),c
  3035  001540  0E5D               	movlw	93
  3036  001542                     u4107:
  3037  001542  FFFF               	dw	65535	; errata NOP
  3038  001544  2EE8               	decfsz	wreg,f,c
  3039  001546  D7FD               	bra	u4107
  3040  001548  2E0E               	decfsz	??_lcd_begin& (0+255),f,c
  3041  00154A  D7FB               	bra	u4107
  3042                           
  3043                           ;lcd44780.c: 442: lcd_write4bits(0x03);
  3044  00154C  0E03               	movlw	3
  3045  00154E  EC39  F012         	call	_lcd_write4bits
  3046                           
  3047                           ;lcd44780.c: 443: _delay((unsigned long)((150)*(20000000/4000000.0)));
  3048  001552  0EBB               	movlw	187
  3049  001554                     u4117:
  3050  001554  FFFF               	dw	65535	; errata NOP
  3051  001556  2EE8               	decfsz	wreg,f,c
  3052  001558  D7FD               	bra	u4117
  3053  00155A  D000               	nop2	
  3054                           
  3055                           ;lcd44780.c: 445: lcd_write4bits(0x03);
  3056  00155C  0E03               	movlw	3
  3057  00155E  EC39  F012         	call	_lcd_write4bits
  3058                           
  3059                           ;lcd44780.c: 446: _delay((unsigned long)((150)*(20000000/4000000.0)));
  3060  001562  0EBB               	movlw	187
  3061  001564                     u4127:
  3062  001564  FFFF               	dw	65535	; errata NOP
  3063  001566  2EE8               	decfsz	wreg,f,c
  3064  001568  D7FD               	bra	u4127
  3065  00156A  D000               	nop2	
  3066                           
  3067                           ;lcd44780.c: 448: lcd_write4bits(0x02);
  3068  00156C  0E02               	movlw	2
  3069  00156E  EC39  F012         	call	_lcd_write4bits
  3070                           
  3071                           ;lcd44780.c: 449: }
  3072  001572  D01D               	goto	l4036
  3073  001574                     l4028:
  3074  001574  FFFF               	dw	65535	; assembler added errata NOP
  3075                           
  3076                           ;lcd44780.c: 451: else {
  3077                           ;lcd44780.c: 455: lcd_command(0x20 | LCD_function);
  3078  001576  506E               	movf	_LCD_function,w,c
  3079  001578  0920               	iorlw	32
  3080  00157A  EC8A  F012         	call	_lcd_command
  3081                           
  3082                           ;lcd44780.c: 456: _delay((unsigned long)((5)*(20000000/4000.0)));
  3083  00157E  0E19               	movlw	25
  3084  001580  6E0E               	movwf	??_lcd_begin& (0+255),c
  3085  001582  0E5D               	movlw	93
  3086  001584                     u4137:
  3087  001584  FFFF               	dw	65535	; errata NOP
  3088  001586  2EE8               	decfsz	wreg,f,c
  3089  001588  D7FD               	bra	u4137
  3090  00158A  2E0E               	decfsz	??_lcd_begin& (0+255),f,c
  3091  00158C  D7FB               	bra	u4137
  3092                           
  3093                           ;lcd44780.c: 459: lcd_command(0x20 | LCD_function);
  3094  00158E  506E               	movf	_LCD_function,w,c
  3095  001590  0920               	iorlw	32
  3096  001592  EC8A  F012         	call	_lcd_command
  3097                           
  3098                           ;lcd44780.c: 460: _delay((unsigned long)((5)*(20000000/4000.0)));
  3099  001596  0E19               	movlw	25
  3100  001598  6E0E               	movwf	??_lcd_begin& (0+255),c
  3101  00159A  0E5D               	movlw	93
  3102  00159C                     u4147:
  3103  00159C  FFFF               	dw	65535	; errata NOP
  3104  00159E  2EE8               	decfsz	wreg,f,c
  3105  0015A0  D7FD               	bra	u4147
  3106  0015A2  2E0E               	decfsz	??_lcd_begin& (0+255),f,c
  3107  0015A4  D7FB               	bra	u4147
  3108                           
  3109                           ;lcd44780.c: 464: lcd_command(0x20 | LCD_function);
  3110  0015A6  506E               	movf	_LCD_function,w,c
  3111  0015A8  0920               	iorlw	32
  3112  0015AA  EC8A  F012         	call	_lcd_command
  3113  0015AE                     l4036:
  3114  0015AE  FFFF               	dw	65535	; assembler added errata NOP
  3115                           
  3116                           ;lcd44780.c: 465: }
  3117                           ;lcd44780.c: 468: lcd_command(0x20 | LCD_function);
  3118  0015B0  506E               	movf	_LCD_function,w,c
  3119  0015B2  0920               	iorlw	32
  3120  0015B4  EC8A  F012         	call	_lcd_command
  3121                           
  3122                           ;lcd44780.c: 471: LCD_ctrl = 0x04 | 0x00 | 0x00;
  3123  0015B8  0E04               	movlw	4
  3124  0015BA  6E6D               	movwf	_LCD_ctrl,c
  3125                           
  3126                           ;lcd44780.c: 472: lcd_command(0x08 | LCD_ctrl);
  3127  0015BC  506D               	movf	_LCD_ctrl,w,c
  3128  0015BE  0908               	iorlw	8
  3129  0015C0  EC8A  F012         	call	_lcd_command
  3130                           
  3131                           ;lcd44780.c: 475: lcd_command(0x01);
  3132  0015C4  0E01               	movlw	1
  3133  0015C6  EC8A  F012         	call	_lcd_command
  3134                           
  3135                           ;lcd44780.c: 476: _delay((unsigned long)((2)*(20000000/4000.0)));
  3136  0015CA  0E0A               	movlw	10
  3137  0015CC  6E0E               	movwf	??_lcd_begin& (0+255),c
  3138  0015CE  0EBE               	movlw	190
  3139  0015D0                     u4157:
  3140  0015D0  FFFF               	dw	65535	; errata NOP
  3141  0015D2  2EE8               	decfsz	wreg,f,c
  3142  0015D4  D7FD               	bra	u4157
  3143  0015D6  2E0E               	decfsz	??_lcd_begin& (0+255),f,c
  3144  0015D8  D7FB               	bra	u4157
  3145  0015DA  D000               	nop2	
  3146                           
  3147                           ;lcd44780.c: 479: LCD_mode = 0x02 | 0x00;
  3148  0015DC  0E02               	movlw	2
  3149  0015DE  0100               	movlb	0	; () banked
  3150  0015E0  6FA7               	movwf	_LCD_mode& (0+255),b
  3151                           
  3152                           ; BSR set to: 0
  3153                           ;lcd44780.c: 481: lcd_command(0x04 | LCD_mode);
  3154  0015E2  51A7               	movf	_LCD_mode& (0+255),w,b
  3155  0015E4  0904               	iorlw	4
  3156  0015E6  EF8A  F012         	goto	_lcd_command
  3157  0015EA  FFFF               	dw	65535	; errata NOP
  3158  0015EC                     __end_of_lcd_begin:
  3159                           	opt stack 0
  3160                           tblptru	equ	0xFF8
  3161                           tblptrh	equ	0xFF7
  3162                           tblptrl	equ	0xFF6
  3163                           tablat	equ	0xFF5
  3164                           intcon	equ	0xFF2
  3165                           intcon2	equ	0xFF1
  3166                           postinc0	equ	0xFEE
  3167                           wreg	equ	0xFE8
  3168                           postdec1	equ	0xFE5
  3169                           fsr1l	equ	0xFE1
  3170                           status	equ	0xFD8
  3171                           
  3172 ;; *************** function _format_double *****************
  3173 ;; Defined at:
  3174 ;;		line 81 in file "lib/format.c"
  3175 ;; Parameters:    Size  Location     Type
  3176 ;;  num             3   23[BANK0 ] void 
  3177 ;; Auto vars:     Size  Location     Type
  3178 ;;  weight          3   32[BANK0 ] void 
  3179 ;;  m               2   37[BANK0 ] short 
  3180 ;;  digit           2   35[BANK0 ] short 
  3181 ;; Return value:  Size  Location     Type
  3182 ;;                  1    wreg      void 
  3183 ;; Registers used:
  3184 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3185 ;; Tracked objects:
  3186 ;;		On entry : 0/0
  3187 ;;		On exit  : 0/0
  3188 ;;		Unchanged: 0/0
  3189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3190 ;;      Params:         0       3       0       0       0       0       0
  3191 ;;      Locals:         0      13       0       0       0       0       0
  3192 ;;      Temps:          0       0       0       0       0       0       0
  3193 ;;      Totals:         0      16       0       0       0       0       0
  3194 ;;Total ram usage:       16 bytes
  3195 ;; Hardware stack levels used:    1
  3196 ;; Hardware stack levels required when called:    7
  3197 ;; This function calls:
  3198 ;;		___awtoft
  3199 ;;		___ftdiv
  3200 ;;		___ftge
  3201 ;;		___ftmul
  3202 ;;		___ftsub
  3203 ;;		___fttol
  3204 ;;		_buffer_putch
  3205 ;;		_floor
  3206 ;;		_log10
  3207 ;;		_pow
  3208 ;; This function is called by:
  3209 ;;		_main
  3210 ;; This function uses a non-reentrant model
  3211 ;;
  3212                           
  3213                           	psect	text11
  3214  001044                     __ptext11:
  3215                           	opt stack 0
  3216  001044                     _format_double:
  3217                           	opt stack 0
  3218  001044  FFFF               	dw	65535	; assembler added errata NOP
  3219                           
  3220                           ;format.c: 82: short m = (short)log10(num);
  3221                           
  3222                           ;incstack = 0
  3223  001046  C0BF  F03F         	movff	format_double@num,log10@x
  3224  00104A  C0C0  F040         	movff	format_double@num+1,log10@x+1
  3225  00104E  C0C1  F041         	movff	format_double@num+2,log10@x+2
  3226  001052  ECDF  F010         	call	_log10	;wreg free
  3227  001056  C03F  F045         	movff	?_log10,___fttol@f1
  3228  00105A  C040  F046         	movff	?_log10+1,___fttol@f1+1
  3229  00105E  C041  F047         	movff	?_log10+2,___fttol@f1+2
  3230  001062  ECAE  F00C         	call	___fttol	;wreg free
  3231  001066  C045  F0CD         	movff	?___fttol,format_double@m
  3232  00106A  C046  F0CE         	movff	?___fttol+1,format_double@m+1
  3233                           
  3234                           ;format.c: 83: short digit;
  3235                           ;format.c: 86: while(num > 0 + (3.05176e-05)) {
  3236  00106E  D07E               	goto	l4068
  3237  001070                     l4050:
  3238                           
  3239                           ;format.c: 87: double weight = pow(10.0l, m);
  3240  001070  C0CD  F011         	movff	format_double@m,___awtoft@c
  3241  001074  C0CE  F012         	movff	format_double@m+1,___awtoft@c+1
  3242  001078  EC28  F011         	call	___awtoft	;wreg free
  3243  00107C  C011  F0C2         	movff	?___awtoft,_format_double$1300
  3244  001080  C012  F0C3         	movff	?___awtoft+1,_format_double$1300+1
  3245  001084  C013  F0C4         	movff	?___awtoft+2,_format_double$1300+2
  3246                           
  3247                           ;format.c: 87: double weight = pow(10.0l, m);
  3248  001088  0100               	movlb	0	; () banked
  3249  00108A  6BAE               	clrf	pow@x& (0+255),b
  3250  00108C  0E20               	movlw	32
  3251  00108E  6FAF               	movwf	(pow@x+1)& (0+255),b
  3252  001090  0E41               	movlw	65
  3253  001092  6FB0               	movwf	(pow@x+2)& (0+255),b
  3254  001094  C0C2  F0B1         	movff	_format_double$1300,pow@y
  3255  001098  C0C3  F0B2         	movff	_format_double$1300+1,pow@y+1
  3256  00109C  C0C4  F0B3         	movff	_format_double$1300+2,pow@y+2
  3257  0010A0  ECC7  F008         	call	_pow	;wreg free
  3258  0010A4  C0AE  F0C8         	movff	?_pow,format_double@weight
  3259  0010A8  C0AF  F0C9         	movff	?_pow+1,format_double@weight+1
  3260  0010AC  C0B0  F0CA         	movff	?_pow+2,format_double@weight+2
  3261                           
  3262                           ; BSR set to: 0
  3263                           ;format.c: 88: digit = (short)floor(num / weight);
  3264  0010B0  C0C8  F014         	movff	format_double@weight,___ftdiv@f2
  3265  0010B4  C0C9  F015         	movff	format_double@weight+1,___ftdiv@f2+1
  3266  0010B8  C0CA  F016         	movff	format_double@weight+2,___ftdiv@f2+2
  3267  0010BC  C0BF  F011         	movff	format_double@num,___ftdiv@f1
  3268  0010C0  C0C0  F012         	movff	format_double@num+1,___ftdiv@f1+1
  3269  0010C4  C0C1  F013         	movff	format_double@num+2,___ftdiv@f1+2
  3270  0010C8  EC14  F00D         	call	___ftdiv	;wreg free
  3271  0010CC  C011  F05E         	movff	?___ftdiv,floor@x
  3272  0010D0  C012  F05F         	movff	?___ftdiv+1,floor@x+1
  3273  0010D4  C013  F060         	movff	?___ftdiv+2,floor@x+2
  3274  0010D8  ECDC  F00B         	call	_floor	;wreg free
  3275  0010DC  C05E  F0C5         	movff	?_floor,_format_double$1301
  3276  0010E0  C05F  F0C6         	movff	?_floor+1,_format_double$1301+1
  3277  0010E4  C060  F0C7         	movff	?_floor+2,_format_double$1301+2
  3278                           
  3279                           ;format.c: 88: digit = (short)floor(num / weight);
  3280  0010E8  C0C5  F045         	movff	_format_double$1301,___fttol@f1
  3281  0010EC  C0C6  F046         	movff	_format_double$1301+1,___fttol@f1+1
  3282  0010F0  C0C7  F047         	movff	_format_double$1301+2,___fttol@f1+2
  3283  0010F4  ECAE  F00C         	call	___fttol	;wreg free
  3284  0010F8  C045  F0CB         	movff	?___fttol,format_double@digit
  3285  0010FC  C046  F0CC         	movff	?___fttol+1,format_double@digit+1
  3286                           
  3287                           ;format.c: 89: num -= (digit * weight);
  3288  001100  C0BF  F030         	movff	format_double@num,___ftsub@f1
  3289  001104  C0C0  F031         	movff	format_double@num+1,___ftsub@f1+1
  3290  001108  C0C1  F032         	movff	format_double@num+2,___ftsub@f1+2
  3291  00110C  C0C8  F024         	movff	format_double@weight,___ftmul@f2
  3292  001110  C0C9  F025         	movff	format_double@weight+1,___ftmul@f2+1
  3293  001114  C0CA  F026         	movff	format_double@weight+2,___ftmul@f2+2
  3294  001118  C0CB  F011         	movff	format_double@digit,___awtoft@c
  3295  00111C  C0CC  F012         	movff	format_double@digit+1,___awtoft@c+1
  3296  001120  EC28  F011         	call	___awtoft	;wreg free
  3297  001124  C011  F021         	movff	?___awtoft,___ftmul@f1
  3298  001128  C012  F022         	movff	?___awtoft+1,___ftmul@f1+1
  3299  00112C  C013  F023         	movff	?___awtoft+2,___ftmul@f1+2
  3300  001130  EC6C  F00B         	call	___ftmul	;wreg free
  3301  001134  C021  F033         	movff	?___ftmul,___ftsub@f2
  3302  001138  C022  F034         	movff	?___ftmul+1,___ftsub@f2+1
  3303  00113C  C023  F035         	movff	?___ftmul+2,___ftsub@f2+2
  3304  001140  EC46  F011         	call	___ftsub	;wreg free
  3305  001144  C030  F0BF         	movff	?___ftsub,format_double@num
  3306  001148  C031  F0C0         	movff	?___ftsub+1,format_double@num+1
  3307  00114C  C032  F0C1         	movff	?___ftsub+2,format_double@num+2
  3308                           
  3309                           ;format.c: 90: buffer_putch((char)('0' + digit));
  3310  001150  0100               	movlb	0	; () banked
  3311  001152  51CB               	movf	format_double@digit& (0+255),w,b
  3312  001154  0F30               	addlw	48
  3313  001156  ECB8  F010         	call	_buffer_putch
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;format.c: 91: if(m == 0)
  3317  00115A  51CD               	movf	format_double@m& (0+255),w,b
  3318  00115C  11CE               	iorwf	(format_double@m+1)& (0+255),w,b
  3319  00115E  E103               	bnz	l4066
  3320                           
  3321                           ; BSR set to: 0
  3322                           ;format.c: 92: buffer_putch('.');
  3323  001160  0E2E               	movlw	46
  3324  001162  ECB8  F010         	call	_buffer_putch
  3325  001166                     l4066:
  3326                           
  3327                           ; BSR set to: 0
  3328                           ;format.c: 93: m--;
  3329  001166  07CD               	decf	format_double@m& (0+255),f,b
  3330  001168  A0D8               	btfss	status,0,c
  3331  00116A  07CE               	decf	(format_double@m+1)& (0+255),f,b
  3332  00116C                     l4068:
  3333  00116C  FFFF               	dw	65535	; assembler added errata NOP
  3334  00116E  6A09               	clrf	___ftge@ff1,c
  3335  001170  6A0A               	clrf	___ftge@ff1+1,c
  3336  001172  0E38               	movlw	56
  3337  001174  6E0B               	movwf	___ftge@ff1+2,c
  3338  001176  C0BF  F00C         	movff	format_double@num,___ftge@ff2
  3339  00117A  C0C0  F00D         	movff	format_double@num+1,___ftge@ff2+1
  3340  00117E  C0C1  F00E         	movff	format_double@num+2,___ftge@ff2+2
  3341  001182  ECB5  F00F         	call	___ftge	;wreg free
  3342  001186  E201 D773          	bnc	l4050
  3343  00118A  0012               	return		;funcret
  3344  00118C  FFFF               	dw	65535	; errata NOP
  3345  00118E                     __end_of_format_double:
  3346                           	opt stack 0
  3347                           tblptru	equ	0xFF8
  3348                           tblptrh	equ	0xFF7
  3349                           tblptrl	equ	0xFF6
  3350                           tablat	equ	0xFF5
  3351                           intcon	equ	0xFF2
  3352                           intcon2	equ	0xFF1
  3353                           postinc0	equ	0xFEE
  3354                           wreg	equ	0xFE8
  3355                           postdec1	equ	0xFE5
  3356                           fsr1l	equ	0xFE1
  3357                           status	equ	0xFD8
  3358                           
  3359 ;; *************** function _pow *****************
  3360 ;; Defined at:
  3361 ;;		line 5 in file "/opt/microchip/xc8/v1.45/sources/common/pow.c"
  3362 ;; Parameters:    Size  Location     Type
  3363 ;;  x               3    6[BANK0 ] void 
  3364 ;;  y               3    9[BANK0 ] void 
  3365 ;; Auto vars:     Size  Location     Type
  3366 ;;  yi              4   19[BANK0 ] unsigned long 
  3367 ;;  sign            1   18[BANK0 ] unsigned char 
  3368 ;; Return value:  Size  Location     Type
  3369 ;;                  3    6[BANK0 ] unsigned char 
  3370 ;; Registers used:
  3371 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3372 ;; Tracked objects:
  3373 ;;		On entry : 3F/0
  3374 ;;		On exit  : 3F/0
  3375 ;;		Unchanged: 0/0
  3376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3377 ;;      Params:         0       6       0       0       0       0       0
  3378 ;;      Locals:         0      11       0       0       0       0       0
  3379 ;;      Temps:          0       0       0       0       0       0       0
  3380 ;;      Totals:         0      17       0       0       0       0       0
  3381 ;;Total ram usage:       17 bytes
  3382 ;; Hardware stack levels used:    1
  3383 ;; Hardware stack levels required when called:    6
  3384 ;; This function calls:
  3385 ;;		___ftge
  3386 ;;		___ftmul
  3387 ;;		___ftneg
  3388 ;;		___fttol
  3389 ;;		___lltoft
  3390 ;;		_exp
  3391 ;;		_log
  3392 ;; This function is called by:
  3393 ;;		_format_double
  3394 ;; This function uses a non-reentrant model
  3395 ;;
  3396                           
  3397                           	psect	text12
  3398  00118E                     __ptext12:
  3399                           	opt stack 0
  3400  00118E                     _pow:
  3401                           	opt stack 0
  3402  00118E  FFFF               	dw	65535	; assembler added errata NOP
  3403                           
  3404                           ; BSR set to: 0
  3405                           
  3406                           ;incstack = 0
  3407  001190  6BBA               	clrf	pow@sign& (0+255),b
  3408                           
  3409                           ; BSR set to: 0
  3410  001192  51AE               	movf	pow@x& (0+255),w,b
  3411  001194  11AF               	iorwf	(pow@x+1)& (0+255),w,b
  3412  001196  11B0               	iorwf	(pow@x+2)& (0+255),w,b
  3413  001198  E10D               	bnz	l3896
  3414                           
  3415                           ; BSR set to: 0
  3416  00119A  6A09               	clrf	___ftge@ff1,c
  3417  00119C  6A0A               	clrf	___ftge@ff1+1,c
  3418  00119E  6A0B               	clrf	___ftge@ff1+2,c
  3419  0011A0  C0B1  F00C         	movff	pow@y,___ftge@ff2
  3420  0011A4  C0B2  F00D         	movff	pow@y+1,___ftge@ff2+1
  3421  0011A8  C0B3  F00E         	movff	pow@y+2,___ftge@ff2+2
  3422  0011AC  ECB5  F00F         	call	___ftge	;wreg free
  3423  0011B0  0100               	movlb	0	; () banked
  3424  0011B2  D030               	goto	u3850
  3425  0011B4                     l3896:
  3426                           
  3427                           ; BSR set to: 0
  3428  0011B4  51B1               	movf	pow@y& (0+255),w,b
  3429  0011B6  11B2               	iorwf	(pow@y+1)& (0+255),w,b
  3430  0011B8  11B3               	iorwf	(pow@y+2)& (0+255),w,b
  3431  0011BA  E106               	bnz	l3902
  3432                           
  3433                           ; BSR set to: 0
  3434  0011BC  6BAE               	clrf	?_pow& (0+255),b
  3435  0011BE  0E80               	movlw	128
  3436  0011C0  6FAF               	movwf	(?_pow+1)& (0+255),b
  3437  0011C2  0E3F               	movlw	63
  3438  0011C4  6FB0               	movwf	(?_pow+2)& (0+255),b
  3439  0011C6  D085               	goto	l910
  3440  0011C8                     l3902:
  3441                           
  3442                           ; BSR set to: 0
  3443  0011C8  AFB0               	btfss	(pow@x+2)& (0+255),7,b
  3444  0011CA  D03A               	goto	l3912
  3445                           
  3446                           ; BSR set to: 0
  3447  0011CC  C0B1  F045         	movff	pow@y,___fttol@f1
  3448  0011D0  C0B2  F046         	movff	pow@y+1,___fttol@f1+1
  3449  0011D4  C0B3  F047         	movff	pow@y+2,___fttol@f1+2
  3450  0011D8  ECAE  F00C         	call	___fttol	;wreg free
  3451  0011DC  C045  F0BB         	movff	?___fttol,pow@yi
  3452  0011E0  C046  F0BC         	movff	?___fttol+1,pow@yi+1
  3453  0011E4  C047  F0BD         	movff	?___fttol+2,pow@yi+2
  3454  0011E8  C048  F0BE         	movff	?___fttol+3,pow@yi+3
  3455  0011EC  C0BB  F011         	movff	pow@yi,___lltoft@c
  3456  0011F0  C0BC  F012         	movff	pow@yi+1,___lltoft@c+1
  3457  0011F4  C0BD  F013         	movff	pow@yi+2,___lltoft@c+2
  3458  0011F8  C0BE  F014         	movff	pow@yi+3,___lltoft@c+3
  3459  0011FC  EC68  F010         	call	___lltoft	;wreg free
  3460  001200  0100               	movlb	0	; () banked
  3461  001202  51B1               	movf	pow@y& (0+255),w,b
  3462  001204  1811               	xorwf	?___lltoft,w,c
  3463  001206  E106               	bnz	u3850
  3464  001208  51B2               	movf	(pow@y+1)& (0+255),w,b
  3465  00120A  1812               	xorwf	?___lltoft+1,w,c
  3466  00120C  E103               	bnz	u3850
  3467  00120E  51B3               	movf	(pow@y+2)& (0+255),w,b
  3468  001210  1813               	xorwf	?___lltoft+2,w,c
  3469  001212  E005               	bz	l3908
  3470  001214                     u3850:
  3471  001214  FFFF               	dw	65535	; assembler added errata NOP
  3472                           
  3473                           ; BSR set to: 0
  3474  001216  6BAE               	clrf	?_pow& (0+255),b
  3475  001218  6BAF               	clrf	(?_pow+1)& (0+255),b
  3476  00121A  6BB0               	clrf	(?_pow+2)& (0+255),b
  3477  00121C  D05A               	goto	l910
  3478  00121E                     l3908:
  3479                           
  3480                           ; BSR set to: 0
  3481  00121E  51BB               	movf	pow@yi& (0+255),w,b
  3482  001220  0B01               	andlw	1
  3483  001222  6FBA               	movwf	pow@sign& (0+255),b
  3484                           
  3485                           ; BSR set to: 0
  3486  001224  C0AE  F009         	movff	pow@x,___ftneg@f1
  3487  001228  C0AF  F00A         	movff	pow@x+1,___ftneg@f1+1
  3488  00122C  C0B0  F00B         	movff	pow@x+2,___ftneg@f1+2
  3489  001230  EC5C  F012         	call	___ftneg	;wreg free
  3490  001234  C009  F0AE         	movff	?___ftneg,pow@x
  3491  001238  C00A  F0AF         	movff	?___ftneg+1,pow@x+1
  3492  00123C  C00B  F0B0         	movff	?___ftneg+2,pow@x+2
  3493  001240                     l3912:
  3494  001240  FFFF               	dw	65535	; assembler added errata NOP
  3495                           
  3496                           ; BSR set to: 0
  3497  001242  C0AE  F03A         	movff	pow@x,log@x
  3498  001246  C0AF  F03B         	movff	pow@x+1,log@x+1
  3499  00124A  C0B0  F03C         	movff	pow@x+2,log@x+2
  3500  00124E  ECF6  F00A         	call	_log	;wreg free
  3501  001252  C03A  F0B4         	movff	?_log,_pow$1315
  3502  001256  C03B  F0B5         	movff	?_log+1,_pow$1315+1
  3503  00125A  C03C  F0B6         	movff	?_log+2,_pow$1315+2
  3504  00125E  C0B4  F021         	movff	_pow$1315,___ftmul@f1
  3505  001262  C0B5  F022         	movff	_pow$1315+1,___ftmul@f1+1
  3506  001266  C0B6  F023         	movff	_pow$1315+2,___ftmul@f1+2
  3507  00126A  C0B1  F024         	movff	pow@y,___ftmul@f2
  3508  00126E  C0B2  F025         	movff	pow@y+1,___ftmul@f2+1
  3509  001272  C0B3  F026         	movff	pow@y+2,___ftmul@f2+2
  3510  001276  EC6C  F00B         	call	___ftmul	;wreg free
  3511  00127A  C021  F0B7         	movff	?___ftmul,_pow$1316
  3512  00127E  C022  F0B8         	movff	?___ftmul+1,_pow$1316+1
  3513  001282  C023  F0B9         	movff	?___ftmul+2,_pow$1316+2
  3514  001286  C0B7  F066         	movff	_pow$1316,exp@x
  3515  00128A  C0B8  F067         	movff	_pow$1316+1,exp@x+1
  3516  00128E  C0B9  F068         	movff	_pow$1316+2,exp@x+2
  3517  001292  EC91  F006         	call	_exp	;wreg free
  3518  001296  C066  F0AE         	movff	?_exp,pow@x
  3519  00129A  C067  F0AF         	movff	?_exp+1,pow@x+1
  3520  00129E  C068  F0B0         	movff	?_exp+2,pow@x+2
  3521  0012A2  0100               	movlb	0	; () banked
  3522  0012A4  51BA               	movf	pow@sign& (0+255),w,b
  3523  0012A6  E00F               	bz	l914
  3524                           
  3525                           ; BSR set to: 0
  3526  0012A8  C0AE  F009         	movff	pow@x,___ftneg@f1
  3527  0012AC  C0AF  F00A         	movff	pow@x+1,___ftneg@f1+1
  3528  0012B0  C0B0  F00B         	movff	pow@x+2,___ftneg@f1+2
  3529  0012B4  EC5C  F012         	call	___ftneg	;wreg free
  3530  0012B8  C009  F0AE         	movff	?___ftneg,?_pow
  3531  0012BC  C00A  F0AF         	movff	?___ftneg+1,?_pow+1
  3532  0012C0  C00B  F0B0         	movff	?___ftneg+2,?_pow+2
  3533  0012C4  D006               	goto	l910
  3534  0012C6                     l914:
  3535                           
  3536                           ; BSR set to: 0
  3537  0012C6  C0AE  F0AE         	movff	pow@x,?_pow
  3538  0012CA  C0AF  F0AF         	movff	pow@x+1,?_pow+1
  3539  0012CE  C0B0  F0B0         	movff	pow@x+2,?_pow+2
  3540  0012D2                     l910:
  3541  0012D2  FFFF               	dw	65535	; assembler added errata NOP
  3542                           
  3543                           ; BSR set to: 0
  3544  0012D4  0012               	return		;funcret
  3545  0012D6  FFFF               	dw	65535	; errata NOP
  3546  0012D8                     __end_of_pow:
  3547                           	opt stack 0
  3548                           tblptru	equ	0xFF8
  3549                           tblptrh	equ	0xFF7
  3550                           tblptrl	equ	0xFF6
  3551                           tablat	equ	0xFF5
  3552                           intcon	equ	0xFF2
  3553                           intcon2	equ	0xFF1
  3554                           postinc0	equ	0xFEE
  3555                           wreg	equ	0xFE8
  3556                           postdec1	equ	0xFE5
  3557                           fsr1l	equ	0xFE1
  3558                           status	equ	0xFD8
  3559                           
  3560 ;; *************** function _exp *****************
  3561 ;; Defined at:
  3562 ;;		line 12 in file "/opt/microchip/xc8/v1.45/sources/common/exp.c"
  3563 ;; Parameters:    Size  Location     Type
  3564 ;;  x               3  101[COMRAM] unsigned char 
  3565 ;; Auto vars:     Size  Location     Type
  3566 ;;  exponent        2    3[BANK0 ] int 
  3567 ;;  sign            1    5[BANK0 ] unsigned char 
  3568 ;; Return value:  Size  Location     Type
  3569 ;;                  3  101[COMRAM] unsigned char 
  3570 ;; Registers used:
  3571 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3572 ;; Tracked objects:
  3573 ;;		On entry : 0/0
  3574 ;;		On exit  : 0/0
  3575 ;;		Unchanged: 0/0
  3576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3577 ;;      Params:         3       0       0       0       0       0       0
  3578 ;;      Locals:         0       6       0       0       0       0       0
  3579 ;;      Temps:          0       0       0       0       0       0       0
  3580 ;;      Totals:         3       6       0       0       0       0       0
  3581 ;;Total ram usage:        9 bytes
  3582 ;; Hardware stack levels used:    1
  3583 ;; Hardware stack levels required when called:    5
  3584 ;; This function calls:
  3585 ;;		___awtoft
  3586 ;;		___ftdiv
  3587 ;;		___ftge
  3588 ;;		___ftmul
  3589 ;;		___ftneg
  3590 ;;		___ftsub
  3591 ;;		___fttol
  3592 ;;		_eval_poly
  3593 ;;		_floor
  3594 ;;		_ldexp
  3595 ;; This function is called by:
  3596 ;;		_pow
  3597 ;; This function uses a non-reentrant model
  3598 ;;
  3599                           
  3600                           	psect	text13
  3601  000D22                     __ptext13:
  3602                           	opt stack 0
  3603  000D22                     _exp:
  3604                           	opt stack 0
  3605  000D22  FFFF               	dw	65535	; assembler added errata NOP
  3606                           
  3607                           ; BSR set to: 0
  3608                           ;incstack = 0
  3609  000D24  5066               	movf	exp@x,w,c
  3610  000D26  1067               	iorwf	exp@x+1,w,c
  3611  000D28  1068               	iorwf	exp@x+2,w,c
  3612  000D2A  E105               	bnz	l3846
  3613  000D2C  6A66               	clrf	?_exp,c
  3614  000D2E  0E80               	movlw	128
  3615  000D30  6E67               	movwf	?_exp+1,c
  3616  000D32  0E3F               	movlw	63
  3617  000D34  D012               	goto	L3
  3618  000D36                     l3846:
  3619  000D36  0E72               	movlw	114
  3620  000D38  6E09               	movwf	___ftge@ff1,c
  3621  000D3A  0E31               	movlw	49
  3622  000D3C  6E0A               	movwf	___ftge@ff1+1,c
  3623  000D3E  0E44               	movlw	68
  3624  000D40  6E0B               	movwf	___ftge@ff1+2,c
  3625  000D42  C066  F00C         	movff	exp@x,___ftge@ff2
  3626  000D46  C067  F00D         	movff	exp@x+1,___ftge@ff2+1
  3627  000D4A  C068  F00E         	movff	exp@x+2,___ftge@ff2+2
  3628  000D4E  ECB5  F00F         	call	___ftge	;wreg free
  3629  000D52  E206               	bc	l3852
  3630  000D54  6866               	setf	?_exp,c
  3631  000D56  0E7F               	movlw	127
  3632  000D58  6E67               	movwf	?_exp+1,c
  3633  000D5A                     L3:
  3634  000D5A  FFFF               	dw	65535	; assembler added errata NOP
  3635  000D5C  6E68               	movwf	?_exp+2,c
  3636  000D5E  D0B6               	goto	l1075
  3637  000D60                     l3852:
  3638  000D60  C066  F009         	movff	exp@x,___ftge@ff1
  3639  000D64  C067  F00A         	movff	exp@x+1,___ftge@ff1+1
  3640  000D68  C068  F00B         	movff	exp@x+2,___ftge@ff1+2
  3641  000D6C  0E49               	movlw	73
  3642  000D6E  6E0C               	movwf	___ftge@ff2,c
  3643  000D70  0E3A               	movlw	58
  3644  000D72  6E0D               	movwf	___ftge@ff2+1,c
  3645  000D74  0EC4               	movlw	196
  3646  000D76  6E0E               	movwf	___ftge@ff2+2,c
  3647  000D78  ECB5  F00F         	call	___ftge	;wreg free
  3648  000D7C  E201               	bc	l3856
  3649  000D7E  D087               	goto	u3810
  3650  000D80                     l3856:
  3651  000D80  0E01               	movlw	1
  3652  000D82  AE68               	btfss	exp@x+2,7,c
  3653  000D84  0E00               	movlw	0
  3654  000D86  0100               	movlb	0	; () banked
  3655  000D88  6FAD               	movwf	exp@sign& (0+255),b
  3656                           
  3657                           ; BSR set to: 0
  3658  000D8A  51AD               	movf	exp@sign& (0+255),w,b
  3659  000D8C  E00E               	bz	l1078
  3660                           
  3661                           ; BSR set to: 0
  3662  000D8E  C066  F009         	movff	exp@x,___ftneg@f1
  3663  000D92  C067  F00A         	movff	exp@x+1,___ftneg@f1+1
  3664  000D96  C068  F00B         	movff	exp@x+2,___ftneg@f1+2
  3665  000D9A  EC5C  F012         	call	___ftneg	;wreg free
  3666  000D9E  C009  F066         	movff	?___ftneg,exp@x
  3667  000DA2  C00A  F067         	movff	?___ftneg+1,exp@x+1
  3668  000DA6  C00B  F068         	movff	?___ftneg+2,exp@x+2
  3669  000DAA                     l1078:
  3670                           
  3671                           ; BSR set to: 0
  3672  000DAA  C066  F021         	movff	exp@x,___ftmul@f1
  3673  000DAE  C067  F022         	movff	exp@x+1,___ftmul@f1+1
  3674  000DB2  C068  F023         	movff	exp@x+2,___ftmul@f1+2
  3675  000DB6  0EAA               	movlw	170
  3676  000DB8  6E24               	movwf	___ftmul@f2,c
  3677  000DBA  0EB8               	movlw	184
  3678  000DBC  6E25               	movwf	___ftmul@f2+1,c
  3679  000DBE  0E3F               	movlw	63
  3680  000DC0  6E26               	movwf	___ftmul@f2+2,c
  3681  000DC2  EC6C  F00B         	call	___ftmul	;wreg free
  3682  000DC6  C021  F066         	movff	?___ftmul,exp@x
  3683  000DCA  C022  F067         	movff	?___ftmul+1,exp@x+1
  3684  000DCE  C023  F068         	movff	?___ftmul+2,exp@x+2
  3685  000DD2  C066  F05E         	movff	exp@x,floor@x
  3686  000DD6  C067  F05F         	movff	exp@x+1,floor@x+1
  3687  000DDA  C068  F060         	movff	exp@x+2,floor@x+2
  3688  000DDE  ECDC  F00B         	call	_floor	;wreg free
  3689  000DE2  C05E  F0A8         	movff	?_floor,_exp$1317
  3690  000DE6  C05F  F0A9         	movff	?_floor+1,_exp$1317+1
  3691  000DEA  C060  F0AA         	movff	?_floor+2,_exp$1317+2
  3692  000DEE  C0A8  F045         	movff	_exp$1317,___fttol@f1
  3693  000DF2  C0A9  F046         	movff	_exp$1317+1,___fttol@f1+1
  3694  000DF6  C0AA  F047         	movff	_exp$1317+2,___fttol@f1+2
  3695  000DFA  ECAE  F00C         	call	___fttol	;wreg free
  3696  000DFE  C045  F0AB         	movff	?___fttol,exp@exponent
  3697  000E02  C046  F0AC         	movff	?___fttol+1,exp@exponent+1
  3698  000E06  C066  F030         	movff	exp@x,___ftsub@f1
  3699  000E0A  C067  F031         	movff	exp@x+1,___ftsub@f1+1
  3700  000E0E  C068  F032         	movff	exp@x+2,___ftsub@f1+2
  3701  000E12  C0AB  F011         	movff	exp@exponent,___awtoft@c
  3702  000E16  C0AC  F012         	movff	exp@exponent+1,___awtoft@c+1
  3703  000E1A  EC28  F011         	call	___awtoft	;wreg free
  3704  000E1E  C011  F033         	movff	?___awtoft,___ftsub@f2
  3705  000E22  C012  F034         	movff	?___awtoft+1,___ftsub@f2+1
  3706  000E26  C013  F035         	movff	?___awtoft+2,___ftsub@f2+2
  3707  000E2A  EC46  F011         	call	___ftsub	;wreg free
  3708  000E2E  C030  F066         	movff	?___ftsub,exp@x
  3709  000E32  C031  F067         	movff	?___ftsub+1,exp@x+1
  3710  000E36  C032  F068         	movff	?___ftsub+2,exp@x+2
  3711  000E3A  C066  F030         	movff	exp@x,eval_poly@x
  3712  000E3E  C067  F031         	movff	exp@x+1,eval_poly@x+1
  3713  000E42  C068  F032         	movff	exp@x+2,eval_poly@x+2
  3714  000E46  0E01               	movlw	low exp@coeff
  3715  000E48  6E33               	movwf	eval_poly@d,c
  3716  000E4A  6A35               	clrf	eval_poly@n+1,c
  3717  000E4C  0E09               	movlw	9
  3718  000E4E  6E34               	movwf	eval_poly@n,c
  3719  000E50  ECCD  F00D         	call	_eval_poly	;wreg free
  3720  000E54  C030  F03A         	movff	?_eval_poly,ldexp@value
  3721  000E58  C031  F03B         	movff	?_eval_poly+1,ldexp@value+1
  3722  000E5C  C032  F03C         	movff	?_eval_poly+2,ldexp@value+2
  3723  000E60  C0AB  F03D         	movff	exp@exponent,ldexp@newexp
  3724  000E64  C0AC  F03E         	movff	exp@exponent+1,ldexp@newexp+1
  3725  000E68  EC6F  F00E         	call	_ldexp	;wreg free
  3726  000E6C  C03A  F066         	movff	?_ldexp,exp@x
  3727  000E70  C03B  F067         	movff	?_ldexp+1,exp@x+1
  3728  000E74  C03C  F068         	movff	?_ldexp+2,exp@x+2
  3729  000E78  0100               	movlb	0	; () banked
  3730  000E7A  51AD               	movf	exp@sign& (0+255),w,b
  3731  000E7C  E021               	bz	l1079
  3732                           
  3733                           ; BSR set to: 0
  3734  000E7E  2866               	incf	exp@x,w,c
  3735  000E80  E10B               	bnz	l3876
  3736  000E82  0E7F               	movlw	127
  3737  000E84  1867               	xorwf	exp@x+1,w,c
  3738  000E86  E108               	bnz	l3876
  3739  000E88  0E7F               	movlw	127
  3740  000E8A  1868               	xorwf	exp@x+2,w,c
  3741  000E8C  E105               	bnz	l3876
  3742  000E8E                     u3810:
  3743  000E8E  FFFF               	dw	65535	; assembler added errata NOP
  3744                           
  3745                           ; BSR set to: 0
  3746  000E90  6A66               	clrf	?_exp,c
  3747  000E92  6A67               	clrf	?_exp+1,c
  3748  000E94  6A68               	clrf	?_exp+2,c
  3749  000E96  D01A               	goto	l1075
  3750  000E98                     l3876:
  3751                           
  3752                           ; BSR set to: 0
  3753  000E98  6A11               	clrf	___ftdiv@f1,c
  3754  000E9A  0E80               	movlw	128
  3755  000E9C  6E12               	movwf	___ftdiv@f1+1,c
  3756  000E9E  0E3F               	movlw	63
  3757  000EA0  6E13               	movwf	___ftdiv@f1+2,c
  3758  000EA2  C066  F014         	movff	exp@x,___ftdiv@f2
  3759  000EA6  C067  F015         	movff	exp@x+1,___ftdiv@f2+1
  3760  000EAA  C068  F016         	movff	exp@x+2,___ftdiv@f2+2
  3761  000EAE  EC14  F00D         	call	___ftdiv	;wreg free
  3762  000EB2  C011  F066         	movff	?___ftdiv,?_exp
  3763  000EB6  C012  F067         	movff	?___ftdiv+1,?_exp+1
  3764  000EBA  C013  F068         	movff	?___ftdiv+2,?_exp+2
  3765  000EBE  D006               	goto	l1075
  3766  000EC0                     l1079:
  3767                           
  3768                           ; BSR set to: 0
  3769  000EC0  C066  F066         	movff	exp@x,?_exp
  3770  000EC4  C067  F067         	movff	exp@x+1,?_exp+1
  3771  000EC8  C068  F068         	movff	exp@x+2,?_exp+2
  3772  000ECC                     l1075:
  3773  000ECC  FFFF               	dw	65535	; assembler added errata NOP
  3774  000ECE  0012               	return		;funcret
  3775  000ED0  FFFF               	dw	65535	; errata NOP
  3776  000ED2                     __end_of_exp:
  3777                           	opt stack 0
  3778                           tblptru	equ	0xFF8
  3779                           tblptrh	equ	0xFF7
  3780                           tblptrl	equ	0xFF6
  3781                           tablat	equ	0xFF5
  3782                           intcon	equ	0xFF2
  3783                           intcon2	equ	0xFF1
  3784                           postinc0	equ	0xFEE
  3785                           wreg	equ	0xFE8
  3786                           postdec1	equ	0xFE5
  3787                           fsr1l	equ	0xFE1
  3788                           status	equ	0xFD8
  3789                           
  3790 ;; *************** function _ldexp *****************
  3791 ;; Defined at:
  3792 ;;		line 277 in file "/opt/microchip/xc8/v1.45/sources/common/frexp.c"
  3793 ;; Parameters:    Size  Location     Type
  3794 ;;  value           3   57[COMRAM] unsigned char 
  3795 ;;  newexp          2   60[COMRAM] int 
  3796 ;; Auto vars:     Size  Location     Type
  3797 ;;		None
  3798 ;; Return value:  Size  Location     Type
  3799 ;;                  3   57[COMRAM] int 
  3800 ;; Registers used:
  3801 ;;		wreg, status,2, status,0
  3802 ;; Tracked objects:
  3803 ;;		On entry : 0/0
  3804 ;;		On exit  : 0/0
  3805 ;;		Unchanged: 0/0
  3806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3807 ;;      Params:         5       0       0       0       0       0       0
  3808 ;;      Locals:         0       0       0       0       0       0       0
  3809 ;;      Temps:          2       0       0       0       0       0       0
  3810 ;;      Totals:         7       0       0       0       0       0       0
  3811 ;;Total ram usage:        7 bytes
  3812 ;; Hardware stack levels used:    1
  3813 ;; Hardware stack levels required when called:    2
  3814 ;; This function calls:
  3815 ;;		Nothing
  3816 ;; This function is called by:
  3817 ;;		_exp
  3818 ;; This function uses a non-reentrant model
  3819 ;;
  3820                           
  3821                           	psect	text14
  3822  001CDE                     __ptext14:
  3823                           	opt stack 0
  3824  001CDE                     _ldexp:
  3825                           	opt stack 0
  3826  001CDE  FFFF               	dw	65535	; assembler added errata NOP
  3827                           
  3828                           ;incstack = 0
  3829  001CE0  503A               	movf	ldexp@value,w,c
  3830  001CE2  103B               	iorwf	ldexp@value+1,w,c
  3831  001CE4  103C               	iorwf	ldexp@value+2,w,c
  3832  001CE6  E101               	bnz	l3656
  3833  001CE8  D013               	goto	u3500
  3834  001CEA                     l3656:
  3835  001CEA  503C               	movf	ldexp@value+2,w,c
  3836  001CEC  0B7F               	andlw	127
  3837  001CEE  6E3F               	movwf	??_ldexp& (0+255),c
  3838  001CF0  6A40               	clrf	(??_ldexp+1)& (0+255),c
  3839  001CF2  90D8               	bcf	status,0,c
  3840  001CF4  363F               	rlcf	??_ldexp,f,c
  3841  001CF6  3640               	rlcf	??_ldexp+1,f,c
  3842  001CF8  503F               	movf	??_ldexp,w,c
  3843  001CFA  263D               	addwf	ldexp@newexp,f,c
  3844  001CFC  5040               	movf	??_ldexp+1,w,c
  3845  001CFE  223E               	addwfc	ldexp@newexp+1,f,c
  3846  001D00  0E01               	movlw	1
  3847  001D02  AE3B               	btfss	ldexp@value+1,7,c
  3848  001D04  0E00               	movlw	0
  3849  001D06  263D               	addwf	ldexp@newexp,f,c
  3850  001D08  0E00               	movlw	0
  3851  001D0A  223E               	addwfc	ldexp@newexp+1,f,c
  3852  001D0C  AE3E               	btfss	ldexp@newexp+1,7,c
  3853  001D0E  D005               	goto	l3662
  3854  001D10                     u3500:
  3855  001D10  FFFF               	dw	65535	; assembler added errata NOP
  3856  001D12  6A3A               	clrf	?_ldexp,c
  3857  001D14  6A3B               	clrf	?_ldexp+1,c
  3858  001D16  6A3C               	clrf	?_ldexp+2,c
  3859  001D18  D02E               	goto	l693
  3860  001D1A                     l3662:
  3861  001D1A  FFFF               	dw	65535	; assembler added errata NOP
  3862  001D1C  BE3E               	btfsc	ldexp@newexp+1,7,c
  3863  001D1E  D010               	goto	l3676
  3864  001D20  043E               	decf	ldexp@newexp+1,w,c
  3865  001D22  E30E               	bnc	l3676
  3866  001D24  AE3C               	btfss	ldexp@value+2,7,c
  3867  001D26  D006               	goto	l3672
  3868  001D28  683A               	setf	?_ldexp,c
  3869  001D2A  0E7F               	movlw	127
  3870  001D2C  6E3B               	movwf	?_ldexp+1,c
  3871  001D2E  0EFF               	movlw	255
  3872  001D30  683C               	setf	?_ldexp+2,c
  3873  001D32  D021               	goto	l693
  3874  001D34                     l3672:
  3875  001D34  FFFF               	dw	65535	; assembler added errata NOP
  3876  001D36  683A               	setf	?_ldexp,c
  3877  001D38  0E7F               	movlw	127
  3878  001D3A  6E3B               	movwf	?_ldexp+1,c
  3879  001D3C  6E3C               	movwf	?_ldexp+2,c
  3880  001D3E  D01B               	goto	l693
  3881  001D40                     l3676:
  3882  001D40  FFFF               	dw	65535	; assembler added errata NOP
  3883  001D42  343E               	rlcf	ldexp@newexp+1,w,c
  3884  001D44  303E               	rrcf	ldexp@newexp+1,w,c
  3885  001D46  6E40               	movwf	(??_ldexp+1)& (0+255),c
  3886  001D48  303D               	rrcf	ldexp@newexp,w,c
  3887  001D4A  6E3F               	movwf	??_ldexp& (0+255),c
  3888  001D4C  183C               	xorwf	ldexp@value+2,w,c
  3889  001D4E  0B80               	andlw	-128
  3890  001D50  183F               	xorwf	??_ldexp,w,c
  3891  001D52  6E3C               	movwf	ldexp@value+2,c
  3892  001D54  C03D  F03F         	movff	ldexp@newexp,??_ldexp
  3893  001D58  0E01               	movlw	1
  3894  001D5A  163F               	andwf	??_ldexp,f,c
  3895  001D5C  323F               	rrcf	??_ldexp,f,c
  3896  001D5E  323F               	rrcf	??_ldexp,f,c
  3897  001D60  503B               	movf	ldexp@value+1,w,c
  3898  001D62  183F               	xorwf	??_ldexp,w,c
  3899  001D64  0B7F               	andlw	-129
  3900  001D66  183F               	xorwf	??_ldexp,w,c
  3901  001D68  6E3B               	movwf	ldexp@value+1,c
  3902  001D6A  C03A  F03A         	movff	ldexp@value,?_ldexp
  3903  001D6E  C03B  F03B         	movff	ldexp@value+1,?_ldexp+1
  3904  001D72  C03C  F03C         	movff	ldexp@value+2,?_ldexp+2
  3905  001D76                     l693:
  3906  001D76  FFFF               	dw	65535	; assembler added errata NOP
  3907  001D78  0012               	return		;funcret
  3908  001D7A  FFFF               	dw	65535	; errata NOP
  3909  001D7C                     __end_of_ldexp:
  3910                           	opt stack 0
  3911                           tblptru	equ	0xFF8
  3912                           tblptrh	equ	0xFF7
  3913                           tblptrl	equ	0xFF6
  3914                           tablat	equ	0xFF5
  3915                           intcon	equ	0xFF2
  3916                           intcon2	equ	0xFF1
  3917                           postinc0	equ	0xFEE
  3918                           wreg	equ	0xFE8
  3919                           postdec1	equ	0xFE5
  3920                           fsr1l	equ	0xFE1
  3921                           status	equ	0xFD8
  3922                           
  3923 ;; *************** function _floor *****************
  3924 ;; Defined at:
  3925 ;;		line 13 in file "/opt/microchip/xc8/v1.45/sources/common/floor.c"
  3926 ;; Parameters:    Size  Location     Type
  3927 ;;  x               3   93[COMRAM] int 
  3928 ;; Auto vars:     Size  Location     Type
  3929 ;;  i               3   96[COMRAM] int 
  3930 ;;  expon           2   99[COMRAM] int 
  3931 ;; Return value:  Size  Location     Type
  3932 ;;                  3   93[COMRAM] int 
  3933 ;; Registers used:
  3934 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3935 ;; Tracked objects:
  3936 ;;		On entry : 0/0
  3937 ;;		On exit  : 0/0
  3938 ;;		Unchanged: 0/0
  3939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3940 ;;      Params:         3       0       0       0       0       0       0
  3941 ;;      Locals:         5       0       0       0       0       0       0
  3942 ;;      Temps:          0       0       0       0       0       0       0
  3943 ;;      Totals:         8       0       0       0       0       0       0
  3944 ;;Total ram usage:        8 bytes
  3945 ;; Hardware stack levels used:    1
  3946 ;; Hardware stack levels required when called:    4
  3947 ;; This function calls:
  3948 ;;		___altoft
  3949 ;;		___ftadd
  3950 ;;		___ftge
  3951 ;;		___fttol
  3952 ;;		_frexp
  3953 ;; This function is called by:
  3954 ;;		_format_double
  3955 ;;		_exp
  3956 ;; This function uses a non-reentrant model
  3957 ;;
  3958                           
  3959                           	psect	text15
  3960  0017B8                     __ptext15:
  3961                           	opt stack 0
  3962  0017B8                     _floor:
  3963                           	opt stack 0
  3964  0017B8  FFFF               	dw	65535	; assembler added errata NOP
  3965                           
  3966                           ;incstack = 0
  3967  0017BA  C05E  F009         	movff	floor@x,frexp@value
  3968  0017BE  C05F  F00A         	movff	floor@x+1,frexp@value+1
  3969  0017C2  C060  F00B         	movff	floor@x+2,frexp@value+2
  3970  0017C6  0E64               	movlw	low floor@expon
  3971  0017C8  6E0C               	movwf	frexp@eptr,c
  3972  0017CA  EC0A  F00F         	call	_frexp	;wreg free
  3973  0017CE  AE65               	btfss	floor@expon+1,7,c
  3974  0017D0  D00D               	goto	l3584
  3975  0017D2  AE60               	btfss	floor@x+2,7,c
  3976  0017D4  D006               	goto	l666
  3977  0017D6  6A5E               	clrf	?_floor,c
  3978  0017D8  0E80               	movlw	128
  3979  0017DA  6E5F               	movwf	?_floor+1,c
  3980  0017DC  0EBF               	movlw	191
  3981  0017DE  6E60               	movwf	?_floor+2,c
  3982  0017E0  D053               	goto	l667
  3983  0017E2                     l666:
  3984  0017E2  FFFF               	dw	65535	; assembler added errata NOP
  3985  0017E4  6A5E               	clrf	?_floor,c
  3986  0017E6  6A5F               	clrf	?_floor+1,c
  3987  0017E8  6A60               	clrf	?_floor+2,c
  3988  0017EA  D04E               	goto	l667
  3989  0017EC                     l3584:
  3990  0017EC  FFFF               	dw	65535	; assembler added errata NOP
  3991  0017EE  5065               	movf	floor@expon+1,w,c
  3992  0017F0  E103               	bnz	u3390
  3993  0017F2  0E15               	movlw	21
  3994  0017F4  5C64               	subwf	floor@expon,w,c
  3995  0017F6  E307               	bnc	l3588
  3996  0017F8                     u3390:
  3997  0017F8  C05E  F05E         	movff	floor@x,?_floor
  3998  0017FC  C05F  F05F         	movff	floor@x+1,?_floor+1
  3999  001800  C060  F060         	movff	floor@x+2,?_floor+2
  4000  001804  D041               	goto	l667
  4001  001806                     l3588:
  4002  001806  C05E  F045         	movff	floor@x,___fttol@f1
  4003  00180A  C05F  F046         	movff	floor@x+1,___fttol@f1+1
  4004  00180E  C060  F047         	movff	floor@x+2,___fttol@f1+2
  4005  001812  ECAE  F00C         	call	___fttol	;wreg free
  4006  001816  C045  F054         	movff	?___fttol,___altoft@c
  4007  00181A  C046  F055         	movff	?___fttol+1,___altoft@c+1
  4008  00181E  C047  F056         	movff	?___fttol+2,___altoft@c+2
  4009  001822  C048  F057         	movff	?___fttol+3,___altoft@c+3
  4010  001826  EC7F  F00F         	call	___altoft	;wreg free
  4011  00182A  C054  F061         	movff	?___altoft,floor@i
  4012  00182E  C055  F062         	movff	?___altoft+1,floor@i+1
  4013  001832  C056  F063         	movff	?___altoft+2,floor@i+2
  4014  001836  C05E  F009         	movff	floor@x,___ftge@ff1
  4015  00183A  C05F  F00A         	movff	floor@x+1,___ftge@ff1+1
  4016  00183E  C060  F00B         	movff	floor@x+2,___ftge@ff1+2
  4017  001842  C061  F00C         	movff	floor@i,___ftge@ff2
  4018  001846  C062  F00D         	movff	floor@i+1,___ftge@ff2+1
  4019  00184A  C063  F00E         	movff	floor@i+2,___ftge@ff2+2
  4020  00184E  ECB5  F00F         	call	___ftge	;wreg free
  4021  001852  E214               	bc	l669
  4022  001854  C061  F015         	movff	floor@i,___ftadd@f1
  4023  001858  C062  F016         	movff	floor@i+1,___ftadd@f1+1
  4024  00185C  C063  F017         	movff	floor@i+2,___ftadd@f1+2
  4025  001860  6A18               	clrf	___ftadd@f2,c
  4026  001862  0E80               	movlw	128
  4027  001864  6E19               	movwf	___ftadd@f2+1,c
  4028  001866  0EBF               	movlw	191
  4029  001868  6E1A               	movwf	___ftadd@f2+2,c
  4030  00186A  EC69  F007         	call	___ftadd	;wreg free
  4031  00186E  C015  F05E         	movff	?___ftadd,?_floor
  4032  001872  C016  F05F         	movff	?___ftadd+1,?_floor+1
  4033  001876  C017  F060         	movff	?___ftadd+2,?_floor+2
  4034  00187A  D006               	goto	l667
  4035  00187C                     l669:
  4036  00187C  C061  F05E         	movff	floor@i,?_floor
  4037  001880  C062  F05F         	movff	floor@i+1,?_floor+1
  4038  001884  C063  F060         	movff	floor@i+2,?_floor+2
  4039  001888                     l667:
  4040  001888  FFFF               	dw	65535	; assembler added errata NOP
  4041  00188A  0012               	return		;funcret
  4042  00188C  FFFF               	dw	65535	; errata NOP
  4043  00188E                     __end_of_floor:
  4044                           	opt stack 0
  4045                           tblptru	equ	0xFF8
  4046                           tblptrh	equ	0xFF7
  4047                           tblptrl	equ	0xFF6
  4048                           tablat	equ	0xFF5
  4049                           intcon	equ	0xFF2
  4050                           intcon2	equ	0xFF1
  4051                           postinc0	equ	0xFEE
  4052                           wreg	equ	0xFE8
  4053                           postdec1	equ	0xFE5
  4054                           fsr1l	equ	0xFE1
  4055                           status	equ	0xFD8
  4056                           
  4057 ;; *************** function ___fttol *****************
  4058 ;; Defined at:
  4059 ;;		line 44 in file "/opt/microchip/xc8/v1.45/sources/common/fttol.c"
  4060 ;; Parameters:    Size  Location     Type
  4061 ;;  f1              3   68[COMRAM] float 
  4062 ;; Auto vars:     Size  Location     Type
  4063 ;;  lval            4   78[COMRAM] unsigned long 
  4064 ;;  exp1            1   82[COMRAM] unsigned char 
  4065 ;;  sign1           1   77[COMRAM] unsigned char 
  4066 ;; Return value:  Size  Location     Type
  4067 ;;                  4   68[COMRAM] long 
  4068 ;; Registers used:
  4069 ;;		wreg, status,2, status,0
  4070 ;; Tracked objects:
  4071 ;;		On entry : 0/0
  4072 ;;		On exit  : 0/0
  4073 ;;		Unchanged: 0/0
  4074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4075 ;;      Params:         4       0       0       0       0       0       0
  4076 ;;      Locals:         6       0       0       0       0       0       0
  4077 ;;      Temps:          5       0       0       0       0       0       0
  4078 ;;      Totals:        15       0       0       0       0       0       0
  4079 ;;Total ram usage:       15 bytes
  4080 ;; Hardware stack levels used:    1
  4081 ;; Hardware stack levels required when called:    2
  4082 ;; This function calls:
  4083 ;;		Nothing
  4084 ;; This function is called by:
  4085 ;;		_format_double
  4086 ;;		_measure_capacitance
  4087 ;;		_measure_inductance
  4088 ;;		_floor
  4089 ;;		_pow
  4090 ;;		_exp
  4091 ;; This function uses a non-reentrant model
  4092 ;;
  4093                           
  4094                           	psect	text16
  4095  00195C                     __ptext16:
  4096                           	opt stack 0
  4097  00195C                     ___fttol:
  4098                           	opt stack 0
  4099  00195C  FFFF               	dw	65535	; assembler added errata NOP
  4100                           
  4101                           ;incstack = 0
  4102  00195E  C047  F049         	movff	___fttol@f1+2,??___fttol
  4103  001962  6A4A               	clrf	(??___fttol+1)& (0+255),c
  4104  001964  6A4B               	clrf	(??___fttol+2)& (0+255),c
  4105  001966  3446               	rlcf	___fttol@f1+1,w,c
  4106  001968  3649               	rlcf	??___fttol& (0+255),f,c
  4107  00196A  E301               	bnc	u3281
  4108  00196C  804A               	bsf	(??___fttol+1)& (0+255),0,c
  4109  00196E                     u3281:
  4110  00196E  5049               	movf	??___fttol,w,c
  4111  001970  6E53               	movwf	___fttol@exp1,c
  4112  001972  5053               	movf	___fttol@exp1,w,c
  4113  001974  E106               	bnz	l3526
  4114  001976                     u3290:
  4115  001976  FFFF               	dw	65535	; assembler added errata NOP
  4116  001978  6A45               	clrf	?___fttol,c
  4117  00197A  6A46               	clrf	?___fttol+1,c
  4118  00197C  6A47               	clrf	?___fttol+2,c
  4119  00197E  6A48               	clrf	?___fttol+3,c
  4120  001980  D050               	goto	l774
  4121  001982                     l3526:
  4122  001982  0E17               	movlw	23
  4123  001984  6E49               	movwf	??___fttol& (0+255),c
  4124  001986  C045  F04A         	movff	___fttol@f1,??___fttol+1
  4125  00198A  C046  F04B         	movff	___fttol@f1+1,??___fttol+2
  4126  00198E  C047  F04C         	movff	___fttol@f1+2,??___fttol+3
  4127  001992  2849               	incf	??___fttol,w,c
  4128  001994  6E4D               	movwf	(??___fttol+4)& (0+255),c
  4129  001996  D005               	goto	u3300
  4130  001998                     u3305:
  4131  001998  FFFF               	dw	65535	; assembler added errata NOP
  4132  00199A  90D8               	bcf	status,0,c
  4133  00199C  324C               	rrcf	??___fttol+3,f,c
  4134  00199E  324B               	rrcf	??___fttol+2,f,c
  4135  0019A0  324A               	rrcf	??___fttol+1,f,c
  4136  0019A2                     u3300:
  4137  0019A2  FFFF               	dw	65535	; assembler added errata NOP
  4138  0019A4  2E4D               	decfsz	(??___fttol+4)& (0+255),f,c
  4139  0019A6  D7F8               	goto	u3305
  4140  0019A8  504A               	movf	??___fttol+1,w,c
  4141  0019AA  6E4E               	movwf	___fttol@sign1,c
  4142  0019AC  8E46               	bsf	___fttol@f1+1,7,c
  4143  0019AE  6A47               	clrf	___fttol@f1+2,c
  4144  0019B0  5045               	movf	___fttol@f1,w,c
  4145  0019B2  6E4F               	movwf	___fttol@lval,c
  4146  0019B4  5046               	movf	___fttol@f1+1,w,c
  4147  0019B6  6E50               	movwf	___fttol@lval+1,c
  4148  0019B8  5047               	movf	___fttol@f1+2,w,c
  4149  0019BA  6E51               	movwf	___fttol@lval+2,c
  4150  0019BC  6A52               	clrf	___fttol@lval+3,c
  4151  0019BE  0E8E               	movlw	142
  4152  0019C0  5E53               	subwf	___fttol@exp1,f,c
  4153  0019C2  AE53               	btfss	___fttol@exp1,7,c
  4154  0019C4  D00D               	goto	l3546
  4155  0019C6  5053               	movf	___fttol@exp1,w,c
  4156  0019C8  0A80               	xorlw	128
  4157  0019CA  0F8F               	addlw	143
  4158  0019CC  E3D4               	bnc	u3290
  4159  0019CE                     l3542:
  4160  0019CE  FFFF               	dw	65535	; assembler added errata NOP
  4161  0019D0  90D8               	bcf	status,0,c
  4162  0019D2  3252               	rrcf	___fttol@lval+3,f,c
  4163  0019D4  3251               	rrcf	___fttol@lval+2,f,c
  4164  0019D6  3250               	rrcf	___fttol@lval+1,f,c
  4165  0019D8  324F               	rrcf	___fttol@lval,f,c
  4166  0019DA  3E53               	incfsz	___fttol@exp1,f,c
  4167  0019DC  D7F8               	goto	l3542
  4168  0019DE  D00E               	goto	u3340
  4169  0019E0                     l3546:
  4170  0019E0  FFFF               	dw	65535	; assembler added errata NOP
  4171  0019E2  0E17               	movlw	23
  4172  0019E4  6453               	cpfsgt	___fttol@exp1,c
  4173  0019E6  D007               	goto	l3552
  4174  0019E8  D7C6               	goto	u3290
  4175  0019EA                     l3550:
  4176  0019EA  90D8               	bcf	status,0,c
  4177  0019EC  364F               	rlcf	___fttol@lval,f,c
  4178  0019EE  3650               	rlcf	___fttol@lval+1,f,c
  4179  0019F0  3651               	rlcf	___fttol@lval+2,f,c
  4180  0019F2  3652               	rlcf	___fttol@lval+3,f,c
  4181  0019F4  0653               	decf	___fttol@exp1,f,c
  4182  0019F6                     l3552:
  4183  0019F6  FFFF               	dw	65535	; assembler added errata NOP
  4184  0019F8  5053               	movf	___fttol@exp1,w,c
  4185  0019FA  E1F7               	bnz	l3550
  4186  0019FC                     u3340:
  4187  0019FC  FFFF               	dw	65535	; assembler added errata NOP
  4188  0019FE  504E               	movf	___fttol@sign1,w,c
  4189  001A00  E008               	bz	l3558
  4190  001A02  1E52               	comf	___fttol@lval+3,f,c
  4191  001A04  1E51               	comf	___fttol@lval+2,f,c
  4192  001A06  1E50               	comf	___fttol@lval+1,f,c
  4193  001A08  6C4F               	negf	___fttol@lval,c
  4194  001A0A  0E00               	movlw	0
  4195  001A0C  2250               	addwfc	___fttol@lval+1,f,c
  4196  001A0E  2251               	addwfc	___fttol@lval+2,f,c
  4197  001A10  2252               	addwfc	___fttol@lval+3,f,c
  4198  001A12                     l3558:
  4199  001A12  C04F  F045         	movff	___fttol@lval,?___fttol
  4200  001A16  C050  F046         	movff	___fttol@lval+1,?___fttol+1
  4201  001A1A  C051  F047         	movff	___fttol@lval+2,?___fttol+2
  4202  001A1E  C052  F048         	movff	___fttol@lval+3,?___fttol+3
  4203  001A22                     l774:
  4204  001A22  FFFF               	dw	65535	; assembler added errata NOP
  4205  001A24  0012               	return		;funcret
  4206  001A26  FFFF               	dw	65535	; errata NOP
  4207  001A28                     __end_of___fttol:
  4208                           	opt stack 0
  4209                           tblptru	equ	0xFF8
  4210                           tblptrh	equ	0xFF7
  4211                           tblptrl	equ	0xFF6
  4212                           tablat	equ	0xFF5
  4213                           intcon	equ	0xFF2
  4214                           intcon2	equ	0xFF1
  4215                           postinc0	equ	0xFEE
  4216                           wreg	equ	0xFE8
  4217                           postdec1	equ	0xFE5
  4218                           fsr1l	equ	0xFE1
  4219                           status	equ	0xFD8
  4220                           
  4221 ;; *************** function ___ftge *****************
  4222 ;; Defined at:
  4223 ;;		line 4 in file "/opt/microchip/xc8/v1.45/sources/common/ftge.c"
  4224 ;; Parameters:    Size  Location     Type
  4225 ;;  ff1             3    8[COMRAM] float 
  4226 ;;  ff2             3   11[COMRAM] float 
  4227 ;; Auto vars:     Size  Location     Type
  4228 ;;		None
  4229 ;; Return value:  Size  Location     Type
  4230 ;;		None               void
  4231 ;; Registers used:
  4232 ;;		wreg, status,2, status,0
  4233 ;; Tracked objects:
  4234 ;;		On entry : 0/0
  4235 ;;		On exit  : 0/0
  4236 ;;		Unchanged: 0/0
  4237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4238 ;;      Params:         6       0       0       0       0       0       0
  4239 ;;      Locals:         0       0       0       0       0       0       0
  4240 ;;      Temps:          3       0       0       0       0       0       0
  4241 ;;      Totals:         9       0       0       0       0       0       0
  4242 ;;Total ram usage:        9 bytes
  4243 ;; Hardware stack levels used:    1
  4244 ;; Hardware stack levels required when called:    2
  4245 ;; This function calls:
  4246 ;;		Nothing
  4247 ;; This function is called by:
  4248 ;;		_format_double
  4249 ;;		_measure_capacitance
  4250 ;;		_measure_inductance
  4251 ;;		_floor
  4252 ;;		_pow
  4253 ;;		_exp
  4254 ;; This function uses a non-reentrant model
  4255 ;;
  4256                           
  4257                           	psect	text17
  4258  001F6A                     __ptext17:
  4259                           	opt stack 0
  4260  001F6A                     ___ftge:
  4261                           	opt stack 0
  4262  001F6A  FFFF               	dw	65535	; assembler added errata NOP
  4263                           
  4264                           ;incstack = 0
  4265  001F6C  AE0B               	btfss	___ftge@ff1+2,7,c
  4266  001F6E  D00D               	goto	l3508
  4267  001F70  6A0F               	clrf	??___ftge& (0+255),c
  4268  001F72  6A10               	clrf	(??___ftge+1)& (0+255),c
  4269  001F74  0E80               	movlw	128
  4270  001F76  6E11               	movwf	(??___ftge+2)& (0+255),c
  4271  001F78  5009               	movf	___ftge@ff1,w,c
  4272  001F7A  5C0F               	subwf	??___ftge,w,c
  4273  001F7C  6E09               	movwf	___ftge@ff1,c
  4274  001F7E  500A               	movf	___ftge@ff1+1,w,c
  4275  001F80  5810               	subwfb	??___ftge+1,w,c
  4276  001F82  6E0A               	movwf	___ftge@ff1+1,c
  4277  001F84  500B               	movf	___ftge@ff1+2,w,c
  4278  001F86  5811               	subwfb	??___ftge+2,w,c
  4279  001F88  6E0B               	movwf	___ftge@ff1+2,c
  4280  001F8A                     l3508:
  4281  001F8A  FFFF               	dw	65535	; assembler added errata NOP
  4282  001F8C  AE0E               	btfss	___ftge@ff2+2,7,c
  4283  001F8E  D00D               	goto	l3512
  4284  001F90  6A0F               	clrf	??___ftge& (0+255),c
  4285  001F92  6A10               	clrf	(??___ftge+1)& (0+255),c
  4286  001F94  0E80               	movlw	128
  4287  001F96  6E11               	movwf	(??___ftge+2)& (0+255),c
  4288  001F98  500C               	movf	___ftge@ff2,w,c
  4289  001F9A  5C0F               	subwf	??___ftge,w,c
  4290  001F9C  6E0C               	movwf	___ftge@ff2,c
  4291  001F9E  500D               	movf	___ftge@ff2+1,w,c
  4292  001FA0  5810               	subwfb	??___ftge+1,w,c
  4293  001FA2  6E0D               	movwf	___ftge@ff2+1,c
  4294  001FA4  500E               	movf	___ftge@ff2+2,w,c
  4295  001FA6  5811               	subwfb	??___ftge+2,w,c
  4296  001FA8  6E0E               	movwf	___ftge@ff2+2,c
  4297  001FAA                     l3512:
  4298  001FAA  FFFF               	dw	65535	; assembler added errata NOP
  4299  001FAC  0E80               	movlw	128
  4300  001FAE  1A0B               	xorwf	___ftge@ff1+2,f,c
  4301  001FB0  1A0E               	xorwf	___ftge@ff2+2,f,c
  4302  001FB2  500C               	movf	___ftge@ff2,w,c
  4303  001FB4  5C09               	subwf	___ftge@ff1,w,c
  4304  001FB6  500D               	movf	___ftge@ff2+1,w,c
  4305  001FB8  580A               	subwfb	___ftge@ff1+1,w,c
  4306  001FBA  500E               	movf	___ftge@ff2+2,w,c
  4307  001FBC  580B               	subwfb	___ftge@ff1+2,w,c
  4308  001FBE  E202               	bc	l3518
  4309  001FC0  90D8               	bcf	status,0,c
  4310  001FC2  D001               	goto	l747
  4311  001FC4                     l3518:
  4312  001FC4  80D8               	bsf	status,0,c
  4313  001FC6                     l747:
  4314  001FC6  FFFF               	dw	65535	; assembler added errata NOP
  4315  001FC8  0012               	return		;funcret
  4316  001FCA  FFFF               	dw	65535	; errata NOP
  4317  001FCC                     __end_of___ftge:
  4318                           	opt stack 0
  4319                           tblptru	equ	0xFF8
  4320                           tblptrh	equ	0xFF7
  4321                           tblptrl	equ	0xFF6
  4322                           tablat	equ	0xFF5
  4323                           intcon	equ	0xFF2
  4324                           intcon2	equ	0xFF1
  4325                           postinc0	equ	0xFEE
  4326                           wreg	equ	0xFE8
  4327                           postdec1	equ	0xFE5
  4328                           fsr1l	equ	0xFE1
  4329                           status	equ	0xFD8
  4330                           
  4331 ;; *************** function ___altoft *****************
  4332 ;; Defined at:
  4333 ;;		line 42 in file "/opt/microchip/xc8/v1.45/sources/common/altoft.c"
  4334 ;; Parameters:    Size  Location     Type
  4335 ;;  c               4   83[COMRAM] long 
  4336 ;; Auto vars:     Size  Location     Type
  4337 ;;  sign            1   92[COMRAM] unsigned char 
  4338 ;;  exp             1   91[COMRAM] unsigned char 
  4339 ;; Return value:  Size  Location     Type
  4340 ;;                  3   83[COMRAM] float 
  4341 ;; Registers used:
  4342 ;;		wreg, status,2, status,0, cstack
  4343 ;; Tracked objects:
  4344 ;;		On entry : 0/0
  4345 ;;		On exit  : 0/0
  4346 ;;		Unchanged: 0/0
  4347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4348 ;;      Params:         4       0       0       0       0       0       0
  4349 ;;      Locals:         2       0       0       0       0       0       0
  4350 ;;      Temps:          4       0       0       0       0       0       0
  4351 ;;      Totals:        10       0       0       0       0       0       0
  4352 ;;Total ram usage:       10 bytes
  4353 ;; Hardware stack levels used:    1
  4354 ;; Hardware stack levels required when called:    3
  4355 ;; This function calls:
  4356 ;;		___ftpack
  4357 ;; This function is called by:
  4358 ;;		_floor
  4359 ;; This function uses a non-reentrant model
  4360 ;;
  4361                           
  4362                           	psect	text18
  4363  001EFE                     __ptext18:
  4364                           	opt stack 0
  4365  001EFE                     ___altoft:
  4366                           	opt stack 0
  4367  001EFE  FFFF               	dw	65535	; assembler added errata NOP
  4368                           
  4369                           ;incstack = 0
  4370  001F00  6A5D               	clrf	___altoft@sign,c
  4371  001F02  0E8E               	movlw	142
  4372  001F04  6E5C               	movwf	___altoft@exp,c
  4373  001F06  AE57               	btfss	___altoft@c+3,7,c
  4374  001F08  D011               	goto	l3370
  4375  001F0A  1E57               	comf	___altoft@c+3,f,c
  4376  001F0C  1E56               	comf	___altoft@c+2,f,c
  4377  001F0E  1E55               	comf	___altoft@c+1,f,c
  4378  001F10  6C54               	negf	___altoft@c,c
  4379  001F12  0E00               	movlw	0
  4380  001F14  2255               	addwfc	___altoft@c+1,f,c
  4381  001F16  2256               	addwfc	___altoft@c+2,f,c
  4382  001F18  2257               	addwfc	___altoft@c+3,f,c
  4383  001F1A  0E01               	movlw	1
  4384  001F1C  6E5D               	movwf	___altoft@sign,c
  4385  001F1E  D006               	goto	l3370
  4386  001F20                     l3368:
  4387  001F20  90D8               	bcf	status,0,c
  4388  001F22  3257               	rrcf	___altoft@c+3,f,c
  4389  001F24  3256               	rrcf	___altoft@c+2,f,c
  4390  001F26  3255               	rrcf	___altoft@c+1,f,c
  4391  001F28  3254               	rrcf	___altoft@c,f,c
  4392  001F2A  2A5C               	incf	___altoft@exp,f,c
  4393  001F2C                     l3370:
  4394  001F2C  FFFF               	dw	65535	; assembler added errata NOP
  4395  001F2E  6A58               	clrf	??___altoft& (0+255),c
  4396  001F30  6A59               	clrf	(??___altoft+1)& (0+255),c
  4397  001F32  6A5A               	clrf	(??___altoft+2)& (0+255),c
  4398  001F34  5057               	movf	___altoft@c+3,w,c
  4399  001F36  6E5B               	movwf	(??___altoft+3)& (0+255),c
  4400  001F38  5058               	movf	??___altoft,w,c
  4401  001F3A  1059               	iorwf	??___altoft+1,w,c
  4402  001F3C  105A               	iorwf	??___altoft+2,w,c
  4403  001F3E  105B               	iorwf	??___altoft+3,w,c
  4404  001F40  E1EF               	bnz	l3368
  4405  001F42  C054  F009         	movff	___altoft@c,___ftpack@arg
  4406  001F46  C055  F00A         	movff	___altoft@c+1,___ftpack@arg+1
  4407  001F4A  C056  F00B         	movff	___altoft@c+2,___ftpack@arg+2
  4408  001F4E  C05C  F00C         	movff	___altoft@exp,___ftpack@exp
  4409  001F52  C05D  F00D         	movff	___altoft@sign,___ftpack@sign
  4410  001F56  ECBE  F00E         	call	___ftpack	;wreg free
  4411  001F5A  C009  F054         	movff	?___ftpack,?___altoft
  4412  001F5E  C00A  F055         	movff	?___ftpack+1,?___altoft+1
  4413  001F62  C00B  F056         	movff	?___ftpack+2,?___altoft+2
  4414  001F66  0012               	return		;funcret
  4415  001F68  FFFF               	dw	65535	; errata NOP
  4416  001F6A                     __end_of___altoft:
  4417                           	opt stack 0
  4418                           tblptru	equ	0xFF8
  4419                           tblptrh	equ	0xFF7
  4420                           tblptrl	equ	0xFF6
  4421                           tablat	equ	0xFF5
  4422                           intcon	equ	0xFF2
  4423                           intcon2	equ	0xFF1
  4424                           postinc0	equ	0xFEE
  4425                           wreg	equ	0xFE8
  4426                           postdec1	equ	0xFE5
  4427                           fsr1l	equ	0xFE1
  4428                           status	equ	0xFD8
  4429                           
  4430 ;; *************** function ___ftsub *****************
  4431 ;; Defined at:
  4432 ;;		line 20 in file "/opt/microchip/xc8/v1.45/sources/common/ftsub.c"
  4433 ;; Parameters:    Size  Location     Type
  4434 ;;  f1              3   47[COMRAM] float 
  4435 ;;  f2              3   50[COMRAM] float 
  4436 ;; Auto vars:     Size  Location     Type
  4437 ;;		None
  4438 ;; Return value:  Size  Location     Type
  4439 ;;                  3   47[COMRAM] float 
  4440 ;; Registers used:
  4441 ;;		wreg, status,2, status,0, cstack
  4442 ;; Tracked objects:
  4443 ;;		On entry : 0/0
  4444 ;;		On exit  : 0/0
  4445 ;;		Unchanged: 0/0
  4446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4447 ;;      Params:         6       0       0       0       0       0       0
  4448 ;;      Locals:         0       0       0       0       0       0       0
  4449 ;;      Temps:          0       0       0       0       0       0       0
  4450 ;;      Totals:         6       0       0       0       0       0       0
  4451 ;;Total ram usage:        6 bytes
  4452 ;; Hardware stack levels used:    1
  4453 ;; Hardware stack levels required when called:    4
  4454 ;; This function calls:
  4455 ;;		___ftadd
  4456 ;; This function is called by:
  4457 ;;		_format_double
  4458 ;;		_measure_capacitance
  4459 ;;		_measure_inductance
  4460 ;;		_exp
  4461 ;; This function uses a non-reentrant model
  4462 ;;
  4463                           
  4464                           	psect	text19
  4465  00228C                     __ptext19:
  4466                           	opt stack 0
  4467  00228C                     ___ftsub:
  4468                           	opt stack 0
  4469  00228C  FFFF               	dw	65535	; assembler added errata NOP
  4470                           
  4471                           ;incstack = 0
  4472  00228E  5033               	movf	___ftsub@f2,w,c
  4473  002290  1034               	iorwf	___ftsub@f2+1,w,c
  4474  002292  1035               	iorwf	___ftsub@f2+2,w,c
  4475  002294  E002               	bz	l3636
  4476  002296  0E80               	movlw	128
  4477  002298  1A35               	xorwf	___ftsub@f2+2,f,c
  4478  00229A                     l3636:
  4479  00229A  C030  F015         	movff	___ftsub@f1,___ftadd@f1
  4480  00229E  C031  F016         	movff	___ftsub@f1+1,___ftadd@f1+1
  4481  0022A2  C032  F017         	movff	___ftsub@f1+2,___ftadd@f1+2
  4482  0022A6  C033  F018         	movff	___ftsub@f2,___ftadd@f2
  4483  0022AA  C034  F019         	movff	___ftsub@f2+1,___ftadd@f2+1
  4484  0022AE  C035  F01A         	movff	___ftsub@f2+2,___ftadd@f2+2
  4485  0022B2  EC69  F007         	call	___ftadd	;wreg free
  4486  0022B6  C015  F030         	movff	?___ftadd,?___ftsub
  4487  0022BA  C016  F031         	movff	?___ftadd+1,?___ftsub+1
  4488  0022BE  C017  F032         	movff	?___ftadd+2,?___ftsub+2
  4489  0022C2  0012               	return		;funcret
  4490  0022C4  FFFF               	dw	65535	; errata NOP
  4491  0022C6                     __end_of___ftsub:
  4492                           	opt stack 0
  4493                           tblptru	equ	0xFF8
  4494                           tblptrh	equ	0xFF7
  4495                           tblptrl	equ	0xFF6
  4496                           tablat	equ	0xFF5
  4497                           intcon	equ	0xFF2
  4498                           intcon2	equ	0xFF1
  4499                           postinc0	equ	0xFEE
  4500                           wreg	equ	0xFE8
  4501                           postdec1	equ	0xFE5
  4502                           fsr1l	equ	0xFE1
  4503                           status	equ	0xFD8
  4504                           
  4505 ;; *************** function ___ftneg *****************
  4506 ;; Defined at:
  4507 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/ftneg.c"
  4508 ;; Parameters:    Size  Location     Type
  4509 ;;  f1              3    8[COMRAM] float 
  4510 ;; Auto vars:     Size  Location     Type
  4511 ;;		None
  4512 ;; Return value:  Size  Location     Type
  4513 ;;                  3    8[COMRAM] float 
  4514 ;; Registers used:
  4515 ;;		wreg, status,2, status,0
  4516 ;; Tracked objects:
  4517 ;;		On entry : 3F/0
  4518 ;;		On exit  : 3F/0
  4519 ;;		Unchanged: 3F/0
  4520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4521 ;;      Params:         3       0       0       0       0       0       0
  4522 ;;      Locals:         0       0       0       0       0       0       0
  4523 ;;      Temps:          0       0       0       0       0       0       0
  4524 ;;      Totals:         3       0       0       0       0       0       0
  4525 ;;Total ram usage:        3 bytes
  4526 ;; Hardware stack levels used:    1
  4527 ;; Hardware stack levels required when called:    2
  4528 ;; This function calls:
  4529 ;;		Nothing
  4530 ;; This function is called by:
  4531 ;;		_pow
  4532 ;;		_exp
  4533 ;; This function uses a non-reentrant model
  4534 ;;
  4535                           
  4536                           	psect	text20
  4537  0024B8                     __ptext20:
  4538                           	opt stack 0
  4539  0024B8                     ___ftneg:
  4540                           	opt stack 0
  4541  0024B8  FFFF               	dw	65535	; assembler added errata NOP
  4542                           
  4543                           ; BSR set to: 0
  4544                           
  4545                           ;incstack = 0
  4546  0024BA  5009               	movf	___ftneg@f1,w,c
  4547  0024BC  100A               	iorwf	___ftneg@f1+1,w,c
  4548  0024BE  100B               	iorwf	___ftneg@f1+2,w,c
  4549  0024C0  E002               	bz	l763
  4550                           
  4551                           ; BSR set to: 0
  4552  0024C2  0E80               	movlw	128
  4553  0024C4  1A0B               	xorwf	___ftneg@f1+2,f,c
  4554  0024C6                     l763:
  4555                           
  4556                           ; BSR set to: 0
  4557  0024C6  C009  F009         	movff	___ftneg@f1,?___ftneg
  4558  0024CA  C00A  F00A         	movff	___ftneg@f1+1,?___ftneg+1
  4559  0024CE  C00B  F00B         	movff	___ftneg@f1+2,?___ftneg+2
  4560                           
  4561                           ; BSR set to: 0
  4562  0024D2  0012               	return		;funcret
  4563  0024D4  FFFF               	dw	65535	; errata NOP
  4564  0024D6                     __end_of___ftneg:
  4565                           	opt stack 0
  4566                           tblptru	equ	0xFF8
  4567                           tblptrh	equ	0xFF7
  4568                           tblptrl	equ	0xFF6
  4569                           tablat	equ	0xFF5
  4570                           intcon	equ	0xFF2
  4571                           intcon2	equ	0xFF1
  4572                           postinc0	equ	0xFEE
  4573                           wreg	equ	0xFE8
  4574                           postdec1	equ	0xFE5
  4575                           fsr1l	equ	0xFE1
  4576                           status	equ	0xFD8
  4577                           
  4578 ;; *************** function ___ftdiv *****************
  4579 ;; Defined at:
  4580 ;;		line 54 in file "/opt/microchip/xc8/v1.45/sources/common/ftdiv.c"
  4581 ;; Parameters:    Size  Location     Type
  4582 ;;  f1              3   16[COMRAM] float 
  4583 ;;  f2              3   19[COMRAM] float 
  4584 ;; Auto vars:     Size  Location     Type
  4585 ;;  f3              3   26[COMRAM] float 
  4586 ;;  sign            1   30[COMRAM] unsigned char 
  4587 ;;  exp             1   29[COMRAM] unsigned char 
  4588 ;;  cntr            1   25[COMRAM] unsigned char 
  4589 ;; Return value:  Size  Location     Type
  4590 ;;                  3   16[COMRAM] float 
  4591 ;; Registers used:
  4592 ;;		wreg, status,2, status,0, cstack
  4593 ;; Tracked objects:
  4594 ;;		On entry : 0/0
  4595 ;;		On exit  : 0/0
  4596 ;;		Unchanged: 0/0
  4597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4598 ;;      Params:         6       0       0       0       0       0       0
  4599 ;;      Locals:         6       0       0       0       0       0       0
  4600 ;;      Temps:          3       0       0       0       0       0       0
  4601 ;;      Totals:        15       0       0       0       0       0       0
  4602 ;;Total ram usage:       15 bytes
  4603 ;; Hardware stack levels used:    1
  4604 ;; Hardware stack levels required when called:    3
  4605 ;; This function calls:
  4606 ;;		___ftpack
  4607 ;; This function is called by:
  4608 ;;		_format_double
  4609 ;;		_measure_capacitance
  4610 ;;		_measure_inductance
  4611 ;;		_exp
  4612 ;; This function uses a non-reentrant model
  4613 ;;
  4614                           
  4615                           	psect	text21
  4616  001A28                     __ptext21:
  4617                           	opt stack 0
  4618  001A28                     ___ftdiv:
  4619                           	opt stack 0
  4620  001A28  FFFF               	dw	65535	; assembler added errata NOP
  4621                           
  4622                           ; BSR set to: 0
  4623                           ;incstack = 0
  4624  001A2A  C013  F017         	movff	___ftdiv@f1+2,??___ftdiv
  4625  001A2E  6A18               	clrf	(??___ftdiv+1)& (0+255),c
  4626  001A30  6A19               	clrf	(??___ftdiv+2)& (0+255),c
  4627  001A32  3412               	rlcf	___ftdiv@f1+1,w,c
  4628  001A34  3617               	rlcf	??___ftdiv& (0+255),f,c
  4629  001A36  E301               	bnc	u3411
  4630  001A38  8018               	bsf	(??___ftdiv+1)& (0+255),0,c
  4631  001A3A                     u3411:
  4632  001A3A  5017               	movf	??___ftdiv,w,c
  4633  001A3C  6E1E               	movwf	___ftdiv@exp,c
  4634  001A3E  501E               	movf	___ftdiv@exp,w,c
  4635  001A40  E101               	bnz	l3600
  4636  001A42  D00C               	goto	u3440
  4637  001A44                     l3600:
  4638  001A44  C016  F017         	movff	___ftdiv@f2+2,??___ftdiv
  4639  001A48  6A18               	clrf	(??___ftdiv+1)& (0+255),c
  4640  001A4A  6A19               	clrf	(??___ftdiv+2)& (0+255),c
  4641  001A4C  3415               	rlcf	___ftdiv@f2+1,w,c
  4642  001A4E  3617               	rlcf	??___ftdiv& (0+255),f,c
  4643  001A50  E301               	bnc	u3431
  4644  001A52  8018               	bsf	(??___ftdiv+1)& (0+255),0,c
  4645  001A54                     u3431:
  4646  001A54  5017               	movf	??___ftdiv,w,c
  4647  001A56  6E1F               	movwf	___ftdiv@sign,c
  4648  001A58  501F               	movf	___ftdiv@sign,w,c
  4649  001A5A  E105               	bnz	l739
  4650  001A5C                     u3440:
  4651  001A5C  FFFF               	dw	65535	; assembler added errata NOP
  4652  001A5E  6A11               	clrf	?___ftdiv,c
  4653  001A60  6A12               	clrf	?___ftdiv+1,c
  4654  001A62  6A13               	clrf	?___ftdiv+2,c
  4655  001A64  D03D               	goto	l738
  4656  001A66                     l739:
  4657  001A66  6A1B               	clrf	___ftdiv@f3,c
  4658  001A68  6A1C               	clrf	___ftdiv@f3+1,c
  4659  001A6A  6A1D               	clrf	___ftdiv@f3+2,c
  4660  001A6C  501F               	movf	___ftdiv@sign,w,c
  4661  001A6E  0F89               	addlw	137
  4662  001A70  5E1E               	subwf	___ftdiv@exp,f,c
  4663  001A72  C013  F01F         	movff	___ftdiv@f1+2,___ftdiv@sign
  4664  001A76  5016               	movf	___ftdiv@f2+2,w,c
  4665  001A78  1A1F               	xorwf	___ftdiv@sign,f,c
  4666  001A7A  0E80               	movlw	128
  4667  001A7C  161F               	andwf	___ftdiv@sign,f,c
  4668  001A7E  8E12               	bsf	___ftdiv@f1+1,7,c
  4669  001A80  6A13               	clrf	___ftdiv@f1+2,c
  4670  001A82  8E15               	bsf	___ftdiv@f2+1,7,c
  4671  001A84  6A16               	clrf	___ftdiv@f2+2,c
  4672  001A86  0E18               	movlw	24
  4673  001A88  6E1A               	movwf	___ftdiv@cntr,c
  4674  001A8A                     l3618:
  4675  001A8A  FFFF               	dw	65535	; assembler added errata NOP
  4676  001A8C  90D8               	bcf	status,0,c
  4677  001A8E  361B               	rlcf	___ftdiv@f3,f,c
  4678  001A90  361C               	rlcf	___ftdiv@f3+1,f,c
  4679  001A92  361D               	rlcf	___ftdiv@f3+2,f,c
  4680  001A94  5014               	movf	___ftdiv@f2,w,c
  4681  001A96  5C11               	subwf	___ftdiv@f1,w,c
  4682  001A98  5015               	movf	___ftdiv@f2+1,w,c
  4683  001A9A  5812               	subwfb	___ftdiv@f1+1,w,c
  4684  001A9C  5016               	movf	___ftdiv@f2+2,w,c
  4685  001A9E  5813               	subwfb	___ftdiv@f1+2,w,c
  4686  001AA0  E307               	bnc	l741
  4687  001AA2  5014               	movf	___ftdiv@f2,w,c
  4688  001AA4  5E11               	subwf	___ftdiv@f1,f,c
  4689  001AA6  5015               	movf	___ftdiv@f2+1,w,c
  4690  001AA8  5A12               	subwfb	___ftdiv@f1+1,f,c
  4691  001AAA  5016               	movf	___ftdiv@f2+2,w,c
  4692  001AAC  5A13               	subwfb	___ftdiv@f1+2,f,c
  4693  001AAE  801B               	bsf	___ftdiv@f3,0,c
  4694  001AB0                     l741:
  4695  001AB0  90D8               	bcf	status,0,c
  4696  001AB2  3611               	rlcf	___ftdiv@f1,f,c
  4697  001AB4  3612               	rlcf	___ftdiv@f1+1,f,c
  4698  001AB6  3613               	rlcf	___ftdiv@f1+2,f,c
  4699  001AB8  2E1A               	decfsz	___ftdiv@cntr,f,c
  4700  001ABA  D7E7               	goto	l3618
  4701  001ABC  C01B  F009         	movff	___ftdiv@f3,___ftpack@arg
  4702  001AC0  C01C  F00A         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4703  001AC4  C01D  F00B         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4704  001AC8  C01E  F00C         	movff	___ftdiv@exp,___ftpack@exp
  4705  001ACC  C01F  F00D         	movff	___ftdiv@sign,___ftpack@sign
  4706  001AD0  ECBE  F00E         	call	___ftpack	;wreg free
  4707  001AD4  C009  F011         	movff	?___ftpack,?___ftdiv
  4708  001AD8  C00A  F012         	movff	?___ftpack+1,?___ftdiv+1
  4709  001ADC  C00B  F013         	movff	?___ftpack+2,?___ftdiv+2
  4710  001AE0                     l738:
  4711  001AE0  FFFF               	dw	65535	; assembler added errata NOP
  4712  001AE2  0012               	return		;funcret
  4713  001AE4  FFFF               	dw	65535	; errata NOP
  4714  001AE6                     __end_of___ftdiv:
  4715                           	opt stack 0
  4716                           tblptru	equ	0xFF8
  4717                           tblptrh	equ	0xFF7
  4718                           tblptrl	equ	0xFF6
  4719                           tablat	equ	0xFF5
  4720                           intcon	equ	0xFF2
  4721                           intcon2	equ	0xFF1
  4722                           postinc0	equ	0xFEE
  4723                           wreg	equ	0xFE8
  4724                           postdec1	equ	0xFE5
  4725                           fsr1l	equ	0xFE1
  4726                           status	equ	0xFD8
  4727                           
  4728 ;; *************** function ___lltoft *****************
  4729 ;; Defined at:
  4730 ;;		line 35 in file "/opt/microchip/xc8/v1.45/sources/common/lltoft.c"
  4731 ;; Parameters:    Size  Location     Type
  4732 ;;  c               4   16[COMRAM] unsigned long 
  4733 ;; Auto vars:     Size  Location     Type
  4734 ;;  exp             1   24[COMRAM] unsigned char 
  4735 ;; Return value:  Size  Location     Type
  4736 ;;                  3   16[COMRAM] float 
  4737 ;; Registers used:
  4738 ;;		wreg, status,2, status,0, cstack
  4739 ;; Tracked objects:
  4740 ;;		On entry : 0/0
  4741 ;;		On exit  : 0/0
  4742 ;;		Unchanged: 0/0
  4743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4744 ;;      Params:         4       0       0       0       0       0       0
  4745 ;;      Locals:         1       0       0       0       0       0       0
  4746 ;;      Temps:          4       0       0       0       0       0       0
  4747 ;;      Totals:         9       0       0       0       0       0       0
  4748 ;;Total ram usage:        9 bytes
  4749 ;; Hardware stack levels used:    1
  4750 ;; Hardware stack levels required when called:    3
  4751 ;; This function calls:
  4752 ;;		___ftpack
  4753 ;; This function is called by:
  4754 ;;		_pow
  4755 ;; This function uses a non-reentrant model
  4756 ;;
  4757                           
  4758                           	psect	text22
  4759  0020D0                     __ptext22:
  4760                           	opt stack 0
  4761  0020D0                     ___lltoft:
  4762                           	opt stack 0
  4763  0020D0  FFFF               	dw	65535	; assembler added errata NOP
  4764                           
  4765                           ;incstack = 0
  4766  0020D2  0E8E               	movlw	142
  4767  0020D4  6E19               	movwf	___lltoft@exp,c
  4768  0020D6  D006               	goto	l3816
  4769  0020D8                     l3814:
  4770  0020D8  90D8               	bcf	status,0,c
  4771  0020DA  3214               	rrcf	___lltoft@c+3,f,c
  4772  0020DC  3213               	rrcf	___lltoft@c+2,f,c
  4773  0020DE  3212               	rrcf	___lltoft@c+1,f,c
  4774  0020E0  3211               	rrcf	___lltoft@c,f,c
  4775  0020E2  2A19               	incf	___lltoft@exp,f,c
  4776  0020E4                     l3816:
  4777  0020E4  FFFF               	dw	65535	; assembler added errata NOP
  4778  0020E6  6A15               	clrf	??___lltoft& (0+255),c
  4779  0020E8  6A16               	clrf	(??___lltoft+1)& (0+255),c
  4780  0020EA  6A17               	clrf	(??___lltoft+2)& (0+255),c
  4781  0020EC  5014               	movf	___lltoft@c+3,w,c
  4782  0020EE  6E18               	movwf	(??___lltoft+3)& (0+255),c
  4783  0020F0  5015               	movf	??___lltoft,w,c
  4784  0020F2  1016               	iorwf	??___lltoft+1,w,c
  4785  0020F4  1017               	iorwf	??___lltoft+2,w,c
  4786  0020F6  1018               	iorwf	??___lltoft+3,w,c
  4787  0020F8  E1EF               	bnz	l3814
  4788  0020FA  C011  F009         	movff	___lltoft@c,___ftpack@arg
  4789  0020FE  C012  F00A         	movff	___lltoft@c+1,___ftpack@arg+1
  4790  002102  C013  F00B         	movff	___lltoft@c+2,___ftpack@arg+2
  4791  002106  C019  F00C         	movff	___lltoft@exp,___ftpack@exp
  4792  00210A  0E00               	movlw	0
  4793  00210C  6E0D               	movwf	___ftpack@sign,c
  4794  00210E  ECBE  F00E         	call	___ftpack	;wreg free
  4795  002112  C009  F011         	movff	?___ftpack,?___lltoft
  4796  002116  C00A  F012         	movff	?___ftpack+1,?___lltoft+1
  4797  00211A  C00B  F013         	movff	?___ftpack+2,?___lltoft+2
  4798  00211E  0012               	return		;funcret
  4799  002120  FFFF               	dw	65535	; errata NOP
  4800  002122                     __end_of___lltoft:
  4801                           	opt stack 0
  4802                           tblptru	equ	0xFF8
  4803                           tblptrh	equ	0xFF7
  4804                           tblptrl	equ	0xFF6
  4805                           tablat	equ	0xFF5
  4806                           intcon	equ	0xFF2
  4807                           intcon2	equ	0xFF1
  4808                           postinc0	equ	0xFEE
  4809                           wreg	equ	0xFE8
  4810                           postdec1	equ	0xFE5
  4811                           fsr1l	equ	0xFE1
  4812                           status	equ	0xFD8
  4813                           
  4814 ;; *************** function _log10 *****************
  4815 ;; Defined at:
  4816 ;;		line 39 in file "/opt/microchip/xc8/v1.45/sources/common/log.c"
  4817 ;; Parameters:    Size  Location     Type
  4818 ;;  x               3   62[COMRAM] float 
  4819 ;; Auto vars:     Size  Location     Type
  4820 ;;		None
  4821 ;; Return value:  Size  Location     Type
  4822 ;;                  3   62[COMRAM] float 
  4823 ;; Registers used:
  4824 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4825 ;; Tracked objects:
  4826 ;;		On entry : 0/0
  4827 ;;		On exit  : 0/0
  4828 ;;		Unchanged: 0/0
  4829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4830 ;;      Params:         3       0       0       0       0       0       0
  4831 ;;      Locals:         3       0       0       0       0       0       0
  4832 ;;      Temps:          0       0       0       0       0       0       0
  4833 ;;      Totals:         6       0       0       0       0       0       0
  4834 ;;Total ram usage:        6 bytes
  4835 ;; Hardware stack levels used:    1
  4836 ;; Hardware stack levels required when called:    6
  4837 ;; This function calls:
  4838 ;;		___ftmul
  4839 ;;		_log
  4840 ;; This function is called by:
  4841 ;;		_format_double
  4842 ;; This function uses a non-reentrant model
  4843 ;;
  4844                           
  4845                           	psect	text23
  4846  0021BE                     __ptext23:
  4847                           	opt stack 0
  4848  0021BE                     _log10:
  4849                           	opt stack 0
  4850  0021BE  FFFF               	dw	65535	; assembler added errata NOP
  4851                           
  4852                           ;incstack = 0
  4853  0021C0  C03F  F03A         	movff	log10@x,log@x
  4854  0021C4  C040  F03B         	movff	log10@x+1,log@x+1
  4855  0021C8  C041  F03C         	movff	log10@x+2,log@x+2
  4856  0021CC  ECF6  F00A         	call	_log	;wreg free
  4857  0021D0  C03A  F042         	movff	?_log,_log10$1314
  4858  0021D4  C03B  F043         	movff	?_log+1,_log10$1314+1
  4859  0021D8  C03C  F044         	movff	?_log+2,_log10$1314+2
  4860  0021DC  C042  F021         	movff	_log10$1314,___ftmul@f1
  4861  0021E0  C043  F022         	movff	_log10$1314+1,___ftmul@f1+1
  4862  0021E4  C044  F023         	movff	_log10$1314+2,___ftmul@f1+2
  4863  0021E8  0E5C               	movlw	92
  4864  0021EA  6E24               	movwf	___ftmul@f2,c
  4865  0021EC  0EDE               	movlw	222
  4866  0021EE  6E25               	movwf	___ftmul@f2+1,c
  4867  0021F0  0E3E               	movlw	62
  4868  0021F2  6E26               	movwf	___ftmul@f2+2,c
  4869  0021F4  EC6C  F00B         	call	___ftmul	;wreg free
  4870  0021F8  C021  F03F         	movff	?___ftmul,?_log10
  4871  0021FC  C022  F040         	movff	?___ftmul+1,?_log10+1
  4872  002200  C023  F041         	movff	?___ftmul+2,?_log10+2
  4873  002204  0012               	return		;funcret
  4874  002206  FFFF               	dw	65535	; errata NOP
  4875  002208                     __end_of_log10:
  4876                           	opt stack 0
  4877                           tblptru	equ	0xFF8
  4878                           tblptrh	equ	0xFF7
  4879                           tblptrl	equ	0xFF6
  4880                           tablat	equ	0xFF5
  4881                           intcon	equ	0xFF2
  4882                           intcon2	equ	0xFF1
  4883                           postinc0	equ	0xFEE
  4884                           wreg	equ	0xFE8
  4885                           postdec1	equ	0xFE5
  4886                           fsr1l	equ	0xFE1
  4887                           status	equ	0xFD8
  4888                           
  4889 ;; *************** function _log *****************
  4890 ;; Defined at:
  4891 ;;		line 5 in file "/opt/microchip/xc8/v1.45/sources/common/log.c"
  4892 ;; Parameters:    Size  Location     Type
  4893 ;;  x               3   57[COMRAM] float 
  4894 ;; Auto vars:     Size  Location     Type
  4895 ;;  exponent        2   60[COMRAM] int 
  4896 ;; Return value:  Size  Location     Type
  4897 ;;                  3   57[COMRAM] int 
  4898 ;; Registers used:
  4899 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4900 ;; Tracked objects:
  4901 ;;		On entry : 0/0
  4902 ;;		On exit  : 0/0
  4903 ;;		Unchanged: 0/0
  4904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4905 ;;      Params:         3       0       0       0       0       0       0
  4906 ;;      Locals:         2       0       0       0       0       0       0
  4907 ;;      Temps:          0       0       0       0       0       0       0
  4908 ;;      Totals:         5       0       0       0       0       0       0
  4909 ;;Total ram usage:        5 bytes
  4910 ;; Hardware stack levels used:    1
  4911 ;; Hardware stack levels required when called:    5
  4912 ;; This function calls:
  4913 ;;		___awtoft
  4914 ;;		___ftadd
  4915 ;;		___ftmul
  4916 ;;		_eval_poly
  4917 ;;		_frexp
  4918 ;; This function is called by:
  4919 ;;		_log10
  4920 ;;		_pow
  4921 ;; This function uses a non-reentrant model
  4922 ;;
  4923                           
  4924                           	psect	text24
  4925  0015EC                     __ptext24:
  4926                           	opt stack 0
  4927  0015EC                     _log:
  4928                           	opt stack 0
  4929  0015EC  FFFF               	dw	65535	; assembler added errata NOP
  4930                           
  4931                           ;incstack = 0
  4932  0015EE  BE3C               	btfsc	log@x+2,7,c
  4933  0015F0  D004               	goto	u3730
  4934  0015F2  503A               	movf	log@x,w,c
  4935  0015F4  103B               	iorwf	log@x+1,w,c
  4936  0015F6  103C               	iorwf	log@x+2,w,c
  4937  0015F8  E105               	bnz	l3830
  4938  0015FA                     u3730:
  4939  0015FA  FFFF               	dw	65535	; assembler added errata NOP
  4940  0015FC  6A3A               	clrf	?_log,c
  4941  0015FE  6A3B               	clrf	?_log+1,c
  4942  001600  6A3C               	clrf	?_log+2,c
  4943  001602  D067               	goto	l845
  4944  001604                     l3830:
  4945  001604  6A24               	clrf	___ftmul@f2,c
  4946  001606  6A25               	clrf	___ftmul@f2+1,c
  4947  001608  0E40               	movlw	64
  4948  00160A  6E26               	movwf	___ftmul@f2+2,c
  4949  00160C  0E3D               	movlw	low log@exponent
  4950  00160E  6E0C               	movwf	frexp@eptr,c
  4951  001610  C03A  F009         	movff	log@x,frexp@value
  4952  001614  C03B  F00A         	movff	log@x+1,frexp@value+1
  4953  001618  C03C  F00B         	movff	log@x+2,frexp@value+2
  4954  00161C  EC0A  F00F         	call	_frexp	;wreg free
  4955  001620  C009  F021         	movff	?_frexp,___ftmul@f1
  4956  001624  C00A  F022         	movff	?_frexp+1,___ftmul@f1+1
  4957  001628  C00B  F023         	movff	?_frexp+2,___ftmul@f1+2
  4958  00162C  EC6C  F00B         	call	___ftmul	;wreg free
  4959  001630  C021  F015         	movff	?___ftmul,___ftadd@f1
  4960  001634  C022  F016         	movff	?___ftmul+1,___ftadd@f1+1
  4961  001638  C023  F017         	movff	?___ftmul+2,___ftadd@f1+2
  4962  00163C  6A18               	clrf	___ftadd@f2,c
  4963  00163E  0E80               	movlw	128
  4964  001640  6E19               	movwf	___ftadd@f2+1,c
  4965  001642  0EBF               	movlw	191
  4966  001644  6E1A               	movwf	___ftadd@f2+2,c
  4967  001646  EC69  F007         	call	___ftadd	;wreg free
  4968  00164A  C015  F03A         	movff	?___ftadd,log@x
  4969  00164E  C016  F03B         	movff	?___ftadd+1,log@x+1
  4970  001652  C017  F03C         	movff	?___ftadd+2,log@x+2
  4971  001656  063D               	decf	log@exponent,f,c
  4972  001658  A0D8               	btfss	status,0,c
  4973  00165A  063E               	decf	log@exponent+1,f,c
  4974  00165C  C03A  F030         	movff	log@x,eval_poly@x
  4975  001660  C03B  F031         	movff	log@x+1,eval_poly@x+1
  4976  001664  C03C  F032         	movff	log@x+2,eval_poly@x+2
  4977  001668  0E1F               	movlw	low log@coeff
  4978  00166A  6E33               	movwf	eval_poly@d,c
  4979  00166C  6A35               	clrf	eval_poly@n+1,c
  4980  00166E  0E08               	movlw	8
  4981  001670  6E34               	movwf	eval_poly@n,c
  4982  001672  ECCD  F00D         	call	_eval_poly	;wreg free
  4983  001676  C030  F03A         	movff	?_eval_poly,log@x
  4984  00167A  C031  F03B         	movff	?_eval_poly+1,log@x+1
  4985  00167E  C032  F03C         	movff	?_eval_poly+2,log@x+2
  4986  001682  0E72               	movlw	114
  4987  001684  6E24               	movwf	___ftmul@f2,c
  4988  001686  0E31               	movlw	49
  4989  001688  6E25               	movwf	___ftmul@f2+1,c
  4990  00168A  0E3F               	movlw	63
  4991  00168C  6E26               	movwf	___ftmul@f2+2,c
  4992  00168E  C03D  F011         	movff	log@exponent,___awtoft@c
  4993  001692  C03E  F012         	movff	log@exponent+1,___awtoft@c+1
  4994  001696  EC28  F011         	call	___awtoft	;wreg free
  4995  00169A  C011  F021         	movff	?___awtoft,___ftmul@f1
  4996  00169E  C012  F022         	movff	?___awtoft+1,___ftmul@f1+1
  4997  0016A2  C013  F023         	movff	?___awtoft+2,___ftmul@f1+2
  4998  0016A6  EC6C  F00B         	call	___ftmul	;wreg free
  4999  0016AA  C021  F015         	movff	?___ftmul,___ftadd@f1
  5000  0016AE  C022  F016         	movff	?___ftmul+1,___ftadd@f1+1
  5001  0016B2  C023  F017         	movff	?___ftmul+2,___ftadd@f1+2
  5002  0016B6  C03A  F018         	movff	log@x,___ftadd@f2
  5003  0016BA  C03B  F019         	movff	log@x+1,___ftadd@f2+1
  5004  0016BE  C03C  F01A         	movff	log@x+2,___ftadd@f2+2
  5005  0016C2  EC69  F007         	call	___ftadd	;wreg free
  5006  0016C6  C015  F03A         	movff	?___ftadd,?_log
  5007  0016CA  C016  F03B         	movff	?___ftadd+1,?_log+1
  5008  0016CE  C017  F03C         	movff	?___ftadd+2,?_log+2
  5009  0016D2                     l845:
  5010  0016D2  FFFF               	dw	65535	; assembler added errata NOP
  5011  0016D4  0012               	return		;funcret
  5012  0016D6  FFFF               	dw	65535	; errata NOP
  5013  0016D8                     __end_of_log:
  5014                           	opt stack 0
  5015                           tblptru	equ	0xFF8
  5016                           tblptrh	equ	0xFF7
  5017                           tblptrl	equ	0xFF6
  5018                           tablat	equ	0xFF5
  5019                           intcon	equ	0xFF2
  5020                           intcon2	equ	0xFF1
  5021                           postinc0	equ	0xFEE
  5022                           wreg	equ	0xFE8
  5023                           postdec1	equ	0xFE5
  5024                           fsr1l	equ	0xFE1
  5025                           status	equ	0xFD8
  5026                           
  5027 ;; *************** function _frexp *****************
  5028 ;; Defined at:
  5029 ;;		line 254 in file "/opt/microchip/xc8/v1.45/sources/common/frexp.c"
  5030 ;; Parameters:    Size  Location     Type
  5031 ;;  value           3    8[COMRAM] int 
  5032 ;;  eptr            1   11[COMRAM] PTR int 
  5033 ;;		 -> log@exponent(2), floor@expon(2), 
  5034 ;; Auto vars:     Size  Location     Type
  5035 ;;		None
  5036 ;; Return value:  Size  Location     Type
  5037 ;;                  3    8[COMRAM] PTR int 
  5038 ;; Registers used:
  5039 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5040 ;; Tracked objects:
  5041 ;;		On entry : 0/0
  5042 ;;		On exit  : 0/0
  5043 ;;		Unchanged: 0/0
  5044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5045 ;;      Params:         4       0       0       0       0       0       0
  5046 ;;      Locals:         0       0       0       0       0       0       0
  5047 ;;      Temps:          2       0       0       0       0       0       0
  5048 ;;      Totals:         6       0       0       0       0       0       0
  5049 ;;Total ram usage:        6 bytes
  5050 ;; Hardware stack levels used:    1
  5051 ;; Hardware stack levels required when called:    2
  5052 ;; This function calls:
  5053 ;;		Nothing
  5054 ;; This function is called by:
  5055 ;;		_floor
  5056 ;;		_log
  5057 ;; This function uses a non-reentrant model
  5058 ;;
  5059                           
  5060                           	psect	text25
  5061  001E14                     __ptext25:
  5062                           	opt stack 0
  5063  001E14                     _frexp:
  5064                           	opt stack 0
  5065  001E14  FFFF               	dw	65535	; assembler added errata NOP
  5066                           
  5067                           ;incstack = 0
  5068  001E16  5009               	movf	frexp@value,w,c
  5069  001E18  100A               	iorwf	frexp@value+1,w,c
  5070  001E1A  100B               	iorwf	frexp@value+2,w,c
  5071  001E1C  E10A               	bnz	l3492
  5072  001E1E  500C               	movf	frexp@eptr,w,c
  5073  001E20  6ED9               	movwf	fsr2l,c
  5074  001E22  6ADA               	clrf	fsr2h,c
  5075  001E24  0E00               	movlw	0
  5076  001E26  6ADE               	clrf	postinc2,c
  5077  001E28  6ADD               	clrf	postdec2,c
  5078  001E2A  6A09               	clrf	?_frexp,c
  5079  001E2C  6A0A               	clrf	?_frexp+1,c
  5080  001E2E  6A0B               	clrf	?_frexp+2,c
  5081  001E30  D029               	goto	l689
  5082  001E32                     l3492:
  5083  001E32  500B               	movf	frexp@value+2,w,c
  5084  001E34  0B7F               	andlw	127
  5085  001E36  6E0D               	movwf	??_frexp& (0+255),c
  5086  001E38  6A0E               	clrf	(??_frexp+1)& (0+255),c
  5087  001E3A  90D8               	bcf	status,0,c
  5088  001E3C  360D               	rlcf	??_frexp,f,c
  5089  001E3E  360E               	rlcf	??_frexp+1,f,c
  5090  001E40  500C               	movf	frexp@eptr,w,c
  5091  001E42  6ED9               	movwf	fsr2l,c
  5092  001E44  6ADA               	clrf	fsr2h,c
  5093  001E46  C00D  FFDE         	movff	??_frexp,postinc2
  5094  001E4A  C00E  FFDD         	movff	??_frexp+1,postdec2
  5095  001E4E  500C               	movf	frexp@eptr,w,c
  5096  001E50  6ED9               	movwf	fsr2l,c
  5097  001E52  6ADA               	clrf	fsr2h,c
  5098  001E54  0E01               	movlw	1
  5099  001E56  AE0A               	btfss	frexp@value+1,7,c
  5100  001E58  0E00               	movlw	0
  5101  001E5A  12DE               	iorwf	postinc2,f,c
  5102  001E5C  0E00               	movlw	0
  5103  001E5E  12DD               	iorwf	postdec2,f,c
  5104  001E60  500C               	movf	frexp@eptr,w,c
  5105  001E62  6ED9               	movwf	fsr2l,c
  5106  001E64  6ADA               	clrf	fsr2h,c
  5107  001E66  0E82               	movlw	130
  5108  001E68  26DE               	addwf	postinc2,f,c
  5109  001E6A  0EFF               	movlw	255
  5110  001E6C  22DD               	addwfc	postdec2,f,c
  5111  001E6E  500B               	movf	frexp@value+2,w,c
  5112  001E70  0B80               	andlw	-128
  5113  001E72  093F               	iorlw	63
  5114  001E74  6E0B               	movwf	frexp@value+2,c
  5115  001E76  9E0A               	bcf	frexp@value+1,7,c
  5116  001E78  C009  F009         	movff	frexp@value,?_frexp
  5117  001E7C  C00A  F00A         	movff	frexp@value+1,?_frexp+1
  5118  001E80  C00B  F00B         	movff	frexp@value+2,?_frexp+2
  5119  001E84                     l689:
  5120  001E84  FFFF               	dw	65535	; assembler added errata NOP
  5121  001E86  0012               	return		;funcret
  5122  001E88  FFFF               	dw	65535	; errata NOP
  5123  001E8A                     __end_of_frexp:
  5124                           	opt stack 0
  5125                           tblptru	equ	0xFF8
  5126                           tblptrh	equ	0xFF7
  5127                           tblptrl	equ	0xFF6
  5128                           tablat	equ	0xFF5
  5129                           intcon	equ	0xFF2
  5130                           intcon2	equ	0xFF1
  5131                           postinc0	equ	0xFEE
  5132                           wreg	equ	0xFE8
  5133                           postdec1	equ	0xFE5
  5134                           fsr1l	equ	0xFE1
  5135                           postinc2	equ	0xFDE
  5136                           postdec2	equ	0xFDD
  5137                           fsr2h	equ	0xFDA
  5138                           fsr2l	equ	0xFD9
  5139                           status	equ	0xFD8
  5140                           
  5141 ;; *************** function _eval_poly *****************
  5142 ;; Defined at:
  5143 ;;		line 4 in file "/opt/microchip/xc8/v1.45/sources/common/evalpoly.c"
  5144 ;; Parameters:    Size  Location     Type
  5145 ;;  x               3   47[COMRAM] PTR int 
  5146 ;;  d               1   50[COMRAM] PTR const 
  5147 ;;		 -> exp@coeff(30), log@coeff(27), 
  5148 ;;  n               2   51[COMRAM] int 
  5149 ;; Auto vars:     Size  Location     Type
  5150 ;;  res             3   54[COMRAM] int 
  5151 ;; Return value:  Size  Location     Type
  5152 ;;                  3   47[COMRAM] int 
  5153 ;; Registers used:
  5154 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5155 ;; Tracked objects:
  5156 ;;		On entry : 0/0
  5157 ;;		On exit  : 0/0
  5158 ;;		Unchanged: 0/0
  5159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5160 ;;      Params:         6       0       0       0       0       0       0
  5161 ;;      Locals:         3       0       0       0       0       0       0
  5162 ;;      Temps:          1       0       0       0       0       0       0
  5163 ;;      Totals:        10       0       0       0       0       0       0
  5164 ;;Total ram usage:       10 bytes
  5165 ;; Hardware stack levels used:    1
  5166 ;; Hardware stack levels required when called:    4
  5167 ;; This function calls:
  5168 ;;		___ftadd
  5169 ;;		___ftmul
  5170 ;; This function is called by:
  5171 ;;		_log
  5172 ;;		_exp
  5173 ;; This function uses a non-reentrant model
  5174 ;;
  5175                           
  5176                           	psect	text26
  5177  001B9A                     __ptext26:
  5178                           	opt stack 0
  5179  001B9A                     _eval_poly:
  5180                           	opt stack 0
  5181  001B9A  FFFF               	dw	65535	; assembler added errata NOP
  5182                           
  5183                           ;incstack = 0
  5184  001B9C  5034               	movf	eval_poly@n,w,c
  5185  001B9E  0D03               	mullw	3
  5186  001BA0  5033               	movf	eval_poly@d,w,c
  5187  001BA2  24F3               	addwf	prodl,w,c
  5188  001BA4  6E36               	movwf	??_eval_poly& (0+255),c
  5189  001BA6  C036  FFF6         	movff	??_eval_poly,tblptrl
  5190  001BAA                     	if	0	;There is only one active tblptr byte
  5191  001BAA                     	endif
  5192  001BAA                     	if	0	;tblptru may be non-zero
  5193  001BAA                     	endif
  5194  001BAA                     	if	0	;tblptru may be non-zero
  5195  001BAA                     	endif
  5196  001BAA  0009               	tblrd		*+
  5197  001BAC  FFFF               	dw	65535	; errata NOP
  5198  001BAE  CFF5 F037          	movff	tablat,eval_poly@res
  5199  001BB2  0009               	tblrd		*+
  5200  001BB4  FFFF               	dw	65535	; errata NOP
  5201  001BB6  CFF5 F038          	movff	tablat,eval_poly@res+1
  5202  001BBA  000A               	tblrd		*-
  5203  001BBC  FFFF               	dw	65535	; errata NOP
  5204  001BBE  CFF5 F039          	movff	tablat,eval_poly@res+2
  5205  001BC2  D032               	goto	l3690
  5206  001BC4                     l3688:
  5207  001BC4  C037  F024         	movff	eval_poly@res,___ftmul@f2
  5208  001BC8  C038  F025         	movff	eval_poly@res+1,___ftmul@f2+1
  5209  001BCC  C039  F026         	movff	eval_poly@res+2,___ftmul@f2+2
  5210  001BD0  C030  F021         	movff	eval_poly@x,___ftmul@f1
  5211  001BD4  C031  F022         	movff	eval_poly@x+1,___ftmul@f1+1
  5212  001BD8  C032  F023         	movff	eval_poly@x+2,___ftmul@f1+2
  5213  001BDC  EC6C  F00B         	call	___ftmul	;wreg free
  5214  001BE0  C021  F015         	movff	?___ftmul,___ftadd@f1
  5215  001BE4  C022  F016         	movff	?___ftmul+1,___ftadd@f1+1
  5216  001BE8  C023  F017         	movff	?___ftmul+2,___ftadd@f1+2
  5217  001BEC  0634               	decf	eval_poly@n,f,c
  5218  001BEE  A0D8               	btfss	status,0,c
  5219  001BF0  0635               	decf	eval_poly@n+1,f,c
  5220  001BF2  5034               	movf	eval_poly@n,w,c
  5221  001BF4  0D03               	mullw	3
  5222  001BF6  5033               	movf	eval_poly@d,w,c
  5223  001BF8  24F3               	addwf	prodl,w,c
  5224  001BFA  6E36               	movwf	??_eval_poly& (0+255),c
  5225  001BFC  C036  FFF6         	movff	??_eval_poly,tblptrl
  5226  001C00                     	if	0	;There is only one active tblptr byte
  5227  001C00                     	endif
  5228  001C00                     	if	0	;tblptru may be non-zero
  5229  001C00                     	endif
  5230  001C00                     	if	0	;tblptru may be non-zero
  5231  001C00                     	endif
  5232  001C00  0009               	tblrd		*+
  5233  001C02  FFFF               	dw	65535	; errata NOP
  5234  001C04  CFF5 F018          	movff	tablat,___ftadd@f2
  5235  001C08  0009               	tblrd		*+
  5236  001C0A  FFFF               	dw	65535	; errata NOP
  5237  001C0C  CFF5 F019          	movff	tablat,___ftadd@f2+1
  5238  001C10  000A               	tblrd		*-
  5239  001C12  FFFF               	dw	65535	; errata NOP
  5240  001C14  CFF5 F01A          	movff	tablat,___ftadd@f2+2
  5241  001C18  EC69  F007         	call	___ftadd	;wreg free
  5242  001C1C  C015  F037         	movff	?___ftadd,eval_poly@res
  5243  001C20  C016  F038         	movff	?___ftadd+1,eval_poly@res+1
  5244  001C24  C017  F039         	movff	?___ftadd+2,eval_poly@res+2
  5245  001C28                     l3690:
  5246  001C28  FFFF               	dw	65535	; assembler added errata NOP
  5247  001C2A  5034               	movf	eval_poly@n,w,c
  5248  001C2C  1035               	iorwf	eval_poly@n+1,w,c
  5249  001C2E  E1CA               	bnz	l3688
  5250  001C30  C037  F030         	movff	eval_poly@res,?_eval_poly
  5251  001C34  C038  F031         	movff	eval_poly@res+1,?_eval_poly+1
  5252  001C38  C039  F032         	movff	eval_poly@res+2,?_eval_poly+2
  5253  001C3C  0012               	return		;funcret
  5254  001C3E  FFFF               	dw	65535	; errata NOP
  5255  001C40                     __end_of_eval_poly:
  5256                           	opt stack 0
  5257                           tblptru	equ	0xFF8
  5258                           tblptrh	equ	0xFF7
  5259                           tblptrl	equ	0xFF6
  5260                           tablat	equ	0xFF5
  5261                           prodl	equ	0xFF3
  5262                           intcon	equ	0xFF2
  5263                           intcon2	equ	0xFF1
  5264                           postinc0	equ	0xFEE
  5265                           wreg	equ	0xFE8
  5266                           postdec1	equ	0xFE5
  5267                           fsr1l	equ	0xFE1
  5268                           postinc2	equ	0xFDE
  5269                           postdec2	equ	0xFDD
  5270                           fsr2h	equ	0xFDA
  5271                           fsr2l	equ	0xFD9
  5272                           status	equ	0xFD8
  5273                           
  5274 ;; *************** function ___ftmul *****************
  5275 ;; Defined at:
  5276 ;;		line 62 in file "/opt/microchip/xc8/v1.45/sources/common/ftmul.c"
  5277 ;; Parameters:    Size  Location     Type
  5278 ;;  f1              3   32[COMRAM] float 
  5279 ;;  f2              3   35[COMRAM] float 
  5280 ;; Auto vars:     Size  Location     Type
  5281 ;;  f3_as_produc    3   42[COMRAM] unsigned um
  5282 ;;  sign            1   46[COMRAM] unsigned char 
  5283 ;;  cntr            1   45[COMRAM] unsigned char 
  5284 ;;  exp             1   41[COMRAM] unsigned char 
  5285 ;; Return value:  Size  Location     Type
  5286 ;;                  3   32[COMRAM] float 
  5287 ;; Registers used:
  5288 ;;		wreg, status,2, status,0, cstack
  5289 ;; Tracked objects:
  5290 ;;		On entry : 0/0
  5291 ;;		On exit  : 0/0
  5292 ;;		Unchanged: 0/0
  5293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5294 ;;      Params:         6       0       0       0       0       0       0
  5295 ;;      Locals:         6       0       0       0       0       0       0
  5296 ;;      Temps:          3       0       0       0       0       0       0
  5297 ;;      Totals:        15       0       0       0       0       0       0
  5298 ;;Total ram usage:       15 bytes
  5299 ;; Hardware stack levels used:    1
  5300 ;; Hardware stack levels required when called:    3
  5301 ;; This function calls:
  5302 ;;		___ftpack
  5303 ;; This function is called by:
  5304 ;;		_format_double
  5305 ;;		_measure_capacitance
  5306 ;;		_measure_inductance
  5307 ;;		_log
  5308 ;;		_log10
  5309 ;;		_pow
  5310 ;;		_eval_poly
  5311 ;;		_exp
  5312 ;; This function uses a non-reentrant model
  5313 ;;
  5314                           
  5315                           	psect	text27
  5316  0016D8                     __ptext27:
  5317                           	opt stack 0
  5318  0016D8                     ___ftmul:
  5319                           	opt stack 0
  5320  0016D8  FFFF               	dw	65535	; assembler added errata NOP
  5321                           
  5322                           ;incstack = 0
  5323  0016DA  C023  F027         	movff	___ftmul@f1+2,??___ftmul
  5324  0016DE  6A28               	clrf	(??___ftmul+1)& (0+255),c
  5325  0016E0  6A29               	clrf	(??___ftmul+2)& (0+255),c
  5326  0016E2  3422               	rlcf	___ftmul@f1+1,w,c
  5327  0016E4  3627               	rlcf	??___ftmul& (0+255),f,c
  5328  0016E6  E301               	bnc	u3171
  5329  0016E8  8028               	bsf	(??___ftmul+1)& (0+255),0,c
  5330  0016EA                     u3171:
  5331  0016EA  5027               	movf	??___ftmul,w,c
  5332  0016EC  6E2A               	movwf	___ftmul@exp,c
  5333  0016EE  502A               	movf	___ftmul@exp,w,c
  5334  0016F0  E101               	bnz	l3444
  5335  0016F2  D00C               	goto	u3200
  5336  0016F4                     l3444:
  5337  0016F4  C026  F027         	movff	___ftmul@f2+2,??___ftmul
  5338  0016F8  6A28               	clrf	(??___ftmul+1)& (0+255),c
  5339  0016FA  6A29               	clrf	(??___ftmul+2)& (0+255),c
  5340  0016FC  3425               	rlcf	___ftmul@f2+1,w,c
  5341  0016FE  3627               	rlcf	??___ftmul& (0+255),f,c
  5342  001700  E301               	bnc	u3191
  5343  001702  8028               	bsf	(??___ftmul+1)& (0+255),0,c
  5344  001704                     u3191:
  5345  001704  5027               	movf	??___ftmul,w,c
  5346  001706  6E2F               	movwf	___ftmul@sign,c
  5347  001708  502F               	movf	___ftmul@sign,w,c
  5348  00170A  E105               	bnz	l3448
  5349  00170C                     u3200:
  5350  00170C  FFFF               	dw	65535	; assembler added errata NOP
  5351  00170E  6A21               	clrf	?___ftmul,c
  5352  001710  6A22               	clrf	?___ftmul+1,c
  5353  001712  6A23               	clrf	?___ftmul+2,c
  5354  001714  D04E               	goto	l753
  5355  001716                     l3448:
  5356  001716  502F               	movf	___ftmul@sign,w,c
  5357  001718  0F7B               	addlw	123
  5358  00171A  262A               	addwf	___ftmul@exp,f,c
  5359  00171C  C023  F02F         	movff	___ftmul@f1+2,___ftmul@sign
  5360  001720  5026               	movf	___ftmul@f2+2,w,c
  5361  001722  1A2F               	xorwf	___ftmul@sign,f,c
  5362  001724  0E80               	movlw	128
  5363  001726  162F               	andwf	___ftmul@sign,f,c
  5364  001728  8E22               	bsf	___ftmul@f1+1,7,c
  5365  00172A  8E25               	bsf	___ftmul@f2+1,7,c
  5366  00172C  0E00               	movlw	0
  5367  00172E  1626               	andwf	___ftmul@f2+2,f,c
  5368  001730  6A2B               	clrf	___ftmul@f3_as_product,c
  5369  001732  6A2C               	clrf	___ftmul@f3_as_product+1,c
  5370  001734  6A2D               	clrf	___ftmul@f3_as_product+2,c
  5371  001736  0E07               	movlw	7
  5372  001738  6E2E               	movwf	___ftmul@cntr,c
  5373  00173A                     l3462:
  5374  00173A  FFFF               	dw	65535	; assembler added errata NOP
  5375  00173C  A021               	btfss	___ftmul@f1,0,c
  5376  00173E  D006               	goto	l3466
  5377  001740  5024               	movf	___ftmul@f2,w,c
  5378  001742  262B               	addwf	___ftmul@f3_as_product,f,c
  5379  001744  5025               	movf	___ftmul@f2+1,w,c
  5380  001746  222C               	addwfc	___ftmul@f3_as_product+1,f,c
  5381  001748  5026               	movf	___ftmul@f2+2,w,c
  5382  00174A  222D               	addwfc	___ftmul@f3_as_product+2,f,c
  5383  00174C                     l3466:
  5384  00174C  FFFF               	dw	65535	; assembler added errata NOP
  5385  00174E  90D8               	bcf	status,0,c
  5386  001750  3223               	rrcf	___ftmul@f1+2,f,c
  5387  001752  3222               	rrcf	___ftmul@f1+1,f,c
  5388  001754  3221               	rrcf	___ftmul@f1,f,c
  5389  001756  90D8               	bcf	status,0,c
  5390  001758  3624               	rlcf	___ftmul@f2,f,c
  5391  00175A  3625               	rlcf	___ftmul@f2+1,f,c
  5392  00175C  3626               	rlcf	___ftmul@f2+2,f,c
  5393  00175E  2E2E               	decfsz	___ftmul@cntr,f,c
  5394  001760  D7EC               	goto	l3462
  5395  001762  0E09               	movlw	9
  5396  001764  6E2E               	movwf	___ftmul@cntr,c
  5397  001766                     l3472:
  5398  001766  FFFF               	dw	65535	; assembler added errata NOP
  5399  001768  A021               	btfss	___ftmul@f1,0,c
  5400  00176A  D006               	goto	l3476
  5401  00176C  5024               	movf	___ftmul@f2,w,c
  5402  00176E  262B               	addwf	___ftmul@f3_as_product,f,c
  5403  001770  5025               	movf	___ftmul@f2+1,w,c
  5404  001772  222C               	addwfc	___ftmul@f3_as_product+1,f,c
  5405  001774  5026               	movf	___ftmul@f2+2,w,c
  5406  001776  222D               	addwfc	___ftmul@f3_as_product+2,f,c
  5407  001778                     l3476:
  5408  001778  FFFF               	dw	65535	; assembler added errata NOP
  5409  00177A  90D8               	bcf	status,0,c
  5410  00177C  3223               	rrcf	___ftmul@f1+2,f,c
  5411  00177E  3222               	rrcf	___ftmul@f1+1,f,c
  5412  001780  3221               	rrcf	___ftmul@f1,f,c
  5413  001782  90D8               	bcf	status,0,c
  5414  001784  322D               	rrcf	___ftmul@f3_as_product+2,f,c
  5415  001786  322C               	rrcf	___ftmul@f3_as_product+1,f,c
  5416  001788  322B               	rrcf	___ftmul@f3_as_product,f,c
  5417  00178A  2E2E               	decfsz	___ftmul@cntr,f,c
  5418  00178C  D7EC               	goto	l3472
  5419  00178E  C02B  F009         	movff	___ftmul@f3_as_product,___ftpack@arg
  5420  001792  C02C  F00A         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5421  001796  C02D  F00B         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5422  00179A  C02A  F00C         	movff	___ftmul@exp,___ftpack@exp
  5423  00179E  C02F  F00D         	movff	___ftmul@sign,___ftpack@sign
  5424  0017A2  ECBE  F00E         	call	___ftpack	;wreg free
  5425  0017A6  C009  F021         	movff	?___ftpack,?___ftmul
  5426  0017AA  C00A  F022         	movff	?___ftpack+1,?___ftmul+1
  5427  0017AE  C00B  F023         	movff	?___ftpack+2,?___ftmul+2
  5428  0017B2                     l753:
  5429  0017B2  FFFF               	dw	65535	; assembler added errata NOP
  5430  0017B4  0012               	return		;funcret
  5431  0017B6  FFFF               	dw	65535	; errata NOP
  5432  0017B8                     __end_of___ftmul:
  5433                           	opt stack 0
  5434                           tblptru	equ	0xFF8
  5435                           tblptrh	equ	0xFF7
  5436                           tblptrl	equ	0xFF6
  5437                           tablat	equ	0xFF5
  5438                           prodl	equ	0xFF3
  5439                           intcon	equ	0xFF2
  5440                           intcon2	equ	0xFF1
  5441                           postinc0	equ	0xFEE
  5442                           wreg	equ	0xFE8
  5443                           postdec1	equ	0xFE5
  5444                           fsr1l	equ	0xFE1
  5445                           postinc2	equ	0xFDE
  5446                           postdec2	equ	0xFDD
  5447                           fsr2h	equ	0xFDA
  5448                           fsr2l	equ	0xFD9
  5449                           status	equ	0xFD8
  5450                           
  5451 ;; *************** function ___ftadd *****************
  5452 ;; Defined at:
  5453 ;;		line 86 in file "/opt/microchip/xc8/v1.45/sources/common/ftadd.c"
  5454 ;; Parameters:    Size  Location     Type
  5455 ;;  f1              3   20[COMRAM] float 
  5456 ;;  f2              3   23[COMRAM] float 
  5457 ;; Auto vars:     Size  Location     Type
  5458 ;;  exp1            1   31[COMRAM] unsigned char 
  5459 ;;  exp2            1   30[COMRAM] unsigned char 
  5460 ;;  sign            1   29[COMRAM] unsigned char 
  5461 ;; Return value:  Size  Location     Type
  5462 ;;                  3   20[COMRAM] float 
  5463 ;; Registers used:
  5464 ;;		wreg, status,2, status,0, cstack
  5465 ;; Tracked objects:
  5466 ;;		On entry : 0/0
  5467 ;;		On exit  : 0/0
  5468 ;;		Unchanged: 0/0
  5469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5470 ;;      Params:         6       0       0       0       0       0       0
  5471 ;;      Locals:         3       0       0       0       0       0       0
  5472 ;;      Temps:          3       0       0       0       0       0       0
  5473 ;;      Totals:        12       0       0       0       0       0       0
  5474 ;;Total ram usage:       12 bytes
  5475 ;; Hardware stack levels used:    1
  5476 ;; Hardware stack levels required when called:    3
  5477 ;; This function calls:
  5478 ;;		___ftpack
  5479 ;; This function is called by:
  5480 ;;		_floor
  5481 ;;		___ftsub
  5482 ;;		_log
  5483 ;;		_eval_poly
  5484 ;; This function uses a non-reentrant model
  5485 ;;
  5486                           
  5487                           	psect	text28
  5488  000ED2                     __ptext28:
  5489                           	opt stack 0
  5490  000ED2                     ___ftadd:
  5491                           	opt stack 0
  5492  000ED2  FFFF               	dw	65535	; assembler added errata NOP
  5493                           
  5494                           ;incstack = 0
  5495  000ED4  C017  F01B         	movff	___ftadd@f1+2,??___ftadd
  5496  000ED8  6A1C               	clrf	(??___ftadd+1)& (0+255),c
  5497  000EDA  6A1D               	clrf	(??___ftadd+2)& (0+255),c
  5498  000EDC  3416               	rlcf	___ftadd@f1+1,w,c
  5499  000EDE  361B               	rlcf	??___ftadd& (0+255),f,c
  5500  000EE0  E301               	bnc	u2961
  5501  000EE2  801C               	bsf	(??___ftadd+1)& (0+255),0,c
  5502  000EE4                     u2961:
  5503  000EE4  501B               	movf	??___ftadd,w,c
  5504  000EE6  6E20               	movwf	___ftadd@exp1,c
  5505  000EE8  C01A  F01B         	movff	___ftadd@f2+2,??___ftadd
  5506  000EEC  6A1C               	clrf	(??___ftadd+1)& (0+255),c
  5507  000EEE  6A1D               	clrf	(??___ftadd+2)& (0+255),c
  5508  000EF0  3419               	rlcf	___ftadd@f2+1,w,c
  5509  000EF2  361B               	rlcf	??___ftadd& (0+255),f,c
  5510  000EF4  E301               	bnc	u2971
  5511  000EF6  801C               	bsf	(??___ftadd+1)& (0+255),0,c
  5512  000EF8                     u2971:
  5513  000EF8  501B               	movf	??___ftadd,w,c
  5514  000EFA  6E1F               	movwf	___ftadd@exp2,c
  5515  000EFC  5020               	movf	___ftadd@exp1,w,c
  5516  000EFE  E009               	bz	u3000
  5517  000F00  501F               	movf	___ftadd@exp2,w,c
  5518  000F02  5C20               	subwf	___ftadd@exp1,w,c
  5519  000F04  E20D               	bc	l3384
  5520  000F06  5020               	movf	___ftadd@exp1,w,c
  5521  000F08  5C1F               	subwf	___ftadd@exp2,w,c
  5522  000F0A  6E1B               	movwf	??___ftadd& (0+255),c
  5523  000F0C  0E18               	movlw	24
  5524  000F0E  641B               	cpfsgt	??___ftadd,c
  5525  000F10  D007               	goto	l3384
  5526  000F12                     u3000:
  5527  000F12  C018  F015         	movff	___ftadd@f2,?___ftadd
  5528  000F16  C019  F016         	movff	___ftadd@f2+1,?___ftadd+1
  5529  000F1A  C01A  F017         	movff	___ftadd@f2+2,?___ftadd+2
  5530  000F1E  D08F               	goto	l707
  5531  000F20                     l3384:
  5532  000F20  FFFF               	dw	65535	; assembler added errata NOP
  5533  000F22  501F               	movf	___ftadd@exp2,w,c
  5534  000F24  E009               	bz	u3030
  5535  000F26  5020               	movf	___ftadd@exp1,w,c
  5536  000F28  5C1F               	subwf	___ftadd@exp2,w,c
  5537  000F2A  E20D               	bc	l3390
  5538  000F2C  501F               	movf	___ftadd@exp2,w,c
  5539  000F2E  5C20               	subwf	___ftadd@exp1,w,c
  5540  000F30  6E1B               	movwf	??___ftadd& (0+255),c
  5541  000F32  0E18               	movlw	24
  5542  000F34  641B               	cpfsgt	??___ftadd,c
  5543  000F36  D007               	goto	l3390
  5544  000F38                     u3030:
  5545  000F38  C015  F015         	movff	___ftadd@f1,?___ftadd
  5546  000F3C  C016  F016         	movff	___ftadd@f1+1,?___ftadd+1
  5547  000F40  C017  F017         	movff	___ftadd@f1+2,?___ftadd+2
  5548  000F44  D07C               	goto	l707
  5549  000F46                     l3390:
  5550  000F46  FFFF               	dw	65535	; assembler added errata NOP
  5551  000F48  0E06               	movlw	6
  5552  000F4A  6E1E               	movwf	___ftadd@sign,c
  5553  000F4C  BE17               	btfsc	___ftadd@f1+2,7,c
  5554  000F4E  8E1E               	bsf	___ftadd@sign,7,c
  5555  000F50  BE1A               	btfsc	___ftadd@f2+2,7,c
  5556  000F52  8C1E               	bsf	___ftadd@sign,6,c
  5557  000F54  8E16               	bsf	___ftadd@f1+1,7,c
  5558  000F56  6A17               	clrf	___ftadd@f1+2,c
  5559  000F58  8E19               	bsf	___ftadd@f2+1,7,c
  5560  000F5A  6A1A               	clrf	___ftadd@f2+2,c
  5561  000F5C  501F               	movf	___ftadd@exp2,w,c
  5562  000F5E  5C20               	subwf	___ftadd@exp1,w,c
  5563  000F60  E21A               	bc	l3416
  5564  000F62                     u3060:
  5565  000F62  FFFF               	dw	65535	; assembler added errata NOP
  5566  000F64  90D8               	bcf	status,0,c
  5567  000F66  3618               	rlcf	___ftadd@f2,f,c
  5568  000F68  3619               	rlcf	___ftadd@f2+1,f,c
  5569  000F6A  361A               	rlcf	___ftadd@f2+2,f,c
  5570  000F6C  061F               	decf	___ftadd@exp2,f,c
  5571  000F6E  5020               	movf	___ftadd@exp1,w,c
  5572  000F70  181F               	xorwf	___ftadd@exp2,w,c
  5573  000F72  E00D               	bz	l3414
  5574  000F74  061E               	decf	___ftadd@sign,f,c
  5575  000F76  C01E  F01B         	movff	___ftadd@sign,??___ftadd
  5576  000F7A  0E07               	movlw	7
  5577  000F7C  161B               	andwf	??___ftadd,f,c
  5578  000F7E  E007               	bz	l3414
  5579  000F80  D7F0               	goto	u3060
  5580  000F82                     l3412:
  5581  000F82  FFFF               	dw	65535	; assembler added errata NOP
  5582  000F84  90D8               	bcf	status,0,c
  5583  000F86  3217               	rrcf	___ftadd@f1+2,f,c
  5584  000F88  3216               	rrcf	___ftadd@f1+1,f,c
  5585  000F8A  3215               	rrcf	___ftadd@f1,f,c
  5586  000F8C  2A20               	incf	___ftadd@exp1,f,c
  5587  000F8E                     l3414:
  5588  000F8E  501F               	movf	___ftadd@exp2,w,c
  5589  000F90  1820               	xorwf	___ftadd@exp1,w,c
  5590  000F92  E01C               	bz	u3130
  5591  000F94  D7F6               	goto	l3412
  5592  000F96                     l3416:
  5593  000F96  5020               	movf	___ftadd@exp1,w,c
  5594  000F98  5C1F               	subwf	___ftadd@exp2,w,c
  5595  000F9A  E218               	bc	u3130
  5596  000F9C                     u3100:
  5597  000F9C  FFFF               	dw	65535	; assembler added errata NOP
  5598  000F9E  90D8               	bcf	status,0,c
  5599  000FA0  3615               	rlcf	___ftadd@f1,f,c
  5600  000FA2  3616               	rlcf	___ftadd@f1+1,f,c
  5601  000FA4  3617               	rlcf	___ftadd@f1+2,f,c
  5602  000FA6  0620               	decf	___ftadd@exp1,f,c
  5603  000FA8  5020               	movf	___ftadd@exp1,w,c
  5604  000FAA  181F               	xorwf	___ftadd@exp2,w,c
  5605  000FAC  E00C               	bz	l3426
  5606  000FAE  061E               	decf	___ftadd@sign,f,c
  5607  000FB0  C01E  F01B         	movff	___ftadd@sign,??___ftadd
  5608  000FB4  0E07               	movlw	7
  5609  000FB6  161B               	andwf	??___ftadd,f,c
  5610  000FB8  E006               	bz	l3426
  5611  000FBA  D7F0               	goto	u3100
  5612  000FBC                     l3424:
  5613  000FBC  90D8               	bcf	status,0,c
  5614  000FBE  321A               	rrcf	___ftadd@f2+2,f,c
  5615  000FC0  3219               	rrcf	___ftadd@f2+1,f,c
  5616  000FC2  3218               	rrcf	___ftadd@f2,f,c
  5617  000FC4  2A1F               	incf	___ftadd@exp2,f,c
  5618  000FC6                     l3426:
  5619  000FC6  501F               	movf	___ftadd@exp2,w,c
  5620  000FC8  1820               	xorwf	___ftadd@exp1,w,c
  5621  000FCA  E1F8               	bnz	l3424
  5622  000FCC                     u3130:
  5623  000FCC  AE1E               	btfss	___ftadd@sign,7,c
  5624  000FCE  D007               	goto	l730
  5625  000FD0  1E15               	comf	___ftadd@f1,f,c
  5626  000FD2  1E16               	comf	___ftadd@f1+1,f,c
  5627  000FD4  1E17               	comf	___ftadd@f1+2,f,c
  5628  000FD6  2A15               	incf	___ftadd@f1,f,c
  5629  000FD8  0E00               	movlw	0
  5630  000FDA  2216               	addwfc	___ftadd@f1+1,f,c
  5631  000FDC  2217               	addwfc	___ftadd@f1+2,f,c
  5632  000FDE                     l730:
  5633  000FDE  FFFF               	dw	65535	; assembler added errata NOP
  5634  000FE0  AC1E               	btfss	___ftadd@sign,6,c
  5635  000FE2  D007               	goto	l731
  5636  000FE4  1E18               	comf	___ftadd@f2,f,c
  5637  000FE6  1E19               	comf	___ftadd@f2+1,f,c
  5638  000FE8  1E1A               	comf	___ftadd@f2+2,f,c
  5639  000FEA  2A18               	incf	___ftadd@f2,f,c
  5640  000FEC  0E00               	movlw	0
  5641  000FEE  2219               	addwfc	___ftadd@f2+1,f,c
  5642  000FF0  221A               	addwfc	___ftadd@f2+2,f,c
  5643  000FF2                     l731:
  5644  000FF2  FFFF               	dw	65535	; assembler added errata NOP
  5645  000FF4  6A1E               	clrf	___ftadd@sign,c
  5646  000FF6  5015               	movf	___ftadd@f1,w,c
  5647  000FF8  2618               	addwf	___ftadd@f2,f,c
  5648  000FFA  5016               	movf	___ftadd@f1+1,w,c
  5649  000FFC  2219               	addwfc	___ftadd@f2+1,f,c
  5650  000FFE  5017               	movf	___ftadd@f1+2,w,c
  5651  001000  221A               	addwfc	___ftadd@f2+2,f,c
  5652  001002  AE1A               	btfss	___ftadd@f2+2,7,c
  5653  001004  D009               	goto	l3436
  5654  001006  1E18               	comf	___ftadd@f2,f,c
  5655  001008  1E19               	comf	___ftadd@f2+1,f,c
  5656  00100A  1E1A               	comf	___ftadd@f2+2,f,c
  5657  00100C  2A18               	incf	___ftadd@f2,f,c
  5658  00100E  0E00               	movlw	0
  5659  001010  2219               	addwfc	___ftadd@f2+1,f,c
  5660  001012  221A               	addwfc	___ftadd@f2+2,f,c
  5661  001014  0E01               	movlw	1
  5662  001016  6E1E               	movwf	___ftadd@sign,c
  5663  001018                     l3436:
  5664  001018  FFFF               	dw	65535	; assembler added errata NOP
  5665  00101A  C018  F009         	movff	___ftadd@f2,___ftpack@arg
  5666  00101E  C019  F00A         	movff	___ftadd@f2+1,___ftpack@arg+1
  5667  001022  C01A  F00B         	movff	___ftadd@f2+2,___ftpack@arg+2
  5668  001026  C020  F00C         	movff	___ftadd@exp1,___ftpack@exp
  5669  00102A  C01E  F00D         	movff	___ftadd@sign,___ftpack@sign
  5670  00102E  ECBE  F00E         	call	___ftpack	;wreg free
  5671  001032  C009  F015         	movff	?___ftpack,?___ftadd
  5672  001036  C00A  F016         	movff	?___ftpack+1,?___ftadd+1
  5673  00103A  C00B  F017         	movff	?___ftpack+2,?___ftadd+2
  5674  00103E                     l707:
  5675  00103E  FFFF               	dw	65535	; assembler added errata NOP
  5676  001040  0012               	return		;funcret
  5677  001042  FFFF               	dw	65535	; errata NOP
  5678  001044                     __end_of___ftadd:
  5679                           	opt stack 0
  5680                           tblptru	equ	0xFF8
  5681                           tblptrh	equ	0xFF7
  5682                           tblptrl	equ	0xFF6
  5683                           tablat	equ	0xFF5
  5684                           prodl	equ	0xFF3
  5685                           intcon	equ	0xFF2
  5686                           intcon2	equ	0xFF1
  5687                           postinc0	equ	0xFEE
  5688                           wreg	equ	0xFE8
  5689                           postdec1	equ	0xFE5
  5690                           fsr1l	equ	0xFE1
  5691                           postinc2	equ	0xFDE
  5692                           postdec2	equ	0xFDD
  5693                           fsr2h	equ	0xFDA
  5694                           fsr2l	equ	0xFD9
  5695                           status	equ	0xFD8
  5696                           
  5697 ;; *************** function ___awtoft *****************
  5698 ;; Defined at:
  5699 ;;		line 32 in file "/opt/microchip/xc8/v1.45/sources/common/awtoft.c"
  5700 ;; Parameters:    Size  Location     Type
  5701 ;;  c               2   16[COMRAM] int 
  5702 ;; Auto vars:     Size  Location     Type
  5703 ;;  sign            1   19[COMRAM] unsigned char 
  5704 ;; Return value:  Size  Location     Type
  5705 ;;                  3   16[COMRAM] float 
  5706 ;; Registers used:
  5707 ;;		wreg, status,2, status,0, cstack
  5708 ;; Tracked objects:
  5709 ;;		On entry : 0/0
  5710 ;;		On exit  : 0/0
  5711 ;;		Unchanged: 0/0
  5712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5713 ;;      Params:         3       0       0       0       0       0       0
  5714 ;;      Locals:         1       0       0       0       0       0       0
  5715 ;;      Temps:          0       0       0       0       0       0       0
  5716 ;;      Totals:         4       0       0       0       0       0       0
  5717 ;;Total ram usage:        4 bytes
  5718 ;; Hardware stack levels used:    1
  5719 ;; Hardware stack levels required when called:    3
  5720 ;; This function calls:
  5721 ;;		___ftpack
  5722 ;; This function is called by:
  5723 ;;		_format_double
  5724 ;;		_log
  5725 ;;		_exp
  5726 ;; This function uses a non-reentrant model
  5727 ;;
  5728                           
  5729                           	psect	text29
  5730  002250                     __ptext29:
  5731                           	opt stack 0
  5732  002250                     ___awtoft:
  5733                           	opt stack 0
  5734  002250  FFFF               	dw	65535	; assembler added errata NOP
  5735                           
  5736                           ;incstack = 0
  5737  002252  6A14               	clrf	___awtoft@sign,c
  5738  002254  AE12               	btfss	___awtoft@c+1,7,c
  5739  002256  D006               	goto	l3648
  5740  002258  6C11               	negf	___awtoft@c,c
  5741  00225A  1E12               	comf	___awtoft@c+1,f,c
  5742  00225C  B0D8               	btfsc	status,0,c
  5743  00225E  2A12               	incf	___awtoft@c+1,f,c
  5744  002260  0E01               	movlw	1
  5745  002262  6E14               	movwf	___awtoft@sign,c
  5746  002264                     l3648:
  5747  002264  FFFF               	dw	65535	; assembler added errata NOP
  5748  002266  C011  F009         	movff	___awtoft@c,___ftpack@arg
  5749  00226A  C012  F00A         	movff	___awtoft@c+1,___ftpack@arg+1
  5750  00226E  6A0B               	clrf	___ftpack@arg+2,c
  5751  002270  0E8E               	movlw	142
  5752  002272  6E0C               	movwf	___ftpack@exp,c
  5753  002274  C014  F00D         	movff	___awtoft@sign,___ftpack@sign
  5754  002278  ECBE  F00E         	call	___ftpack	;wreg free
  5755  00227C  C009  F011         	movff	?___ftpack,?___awtoft
  5756  002280  C00A  F012         	movff	?___ftpack+1,?___awtoft+1
  5757  002284  C00B  F013         	movff	?___ftpack+2,?___awtoft+2
  5758  002288  0012               	return		;funcret
  5759  00228A  FFFF               	dw	65535	; errata NOP
  5760  00228C                     __end_of___awtoft:
  5761                           	opt stack 0
  5762                           tblptru	equ	0xFF8
  5763                           tblptrh	equ	0xFF7
  5764                           tblptrl	equ	0xFF6
  5765                           tablat	equ	0xFF5
  5766                           prodl	equ	0xFF3
  5767                           intcon	equ	0xFF2
  5768                           intcon2	equ	0xFF1
  5769                           postinc0	equ	0xFEE
  5770                           wreg	equ	0xFE8
  5771                           postdec1	equ	0xFE5
  5772                           fsr1l	equ	0xFE1
  5773                           postinc2	equ	0xFDE
  5774                           postdec2	equ	0xFDD
  5775                           fsr2h	equ	0xFDA
  5776                           fsr2l	equ	0xFD9
  5777                           status	equ	0xFD8
  5778                           
  5779 ;; *************** function _calibrate *****************
  5780 ;; Defined at:
  5781 ;;		line 26 in file "src/measure.c"
  5782 ;; Parameters:    Size  Location     Type
  5783 ;;		None
  5784 ;; Auto vars:     Size  Location     Type
  5785 ;;  i               1   66[COMRAM] unsigned char 
  5786 ;; Return value:  Size  Location     Type
  5787 ;;                  1    wreg      void 
  5788 ;; Registers used:
  5789 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5790 ;; Tracked objects:
  5791 ;;		On entry : 0/0
  5792 ;;		On exit  : 0/0
  5793 ;;		Unchanged: 0/0
  5794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5795 ;;      Params:         0       0       0       0       0       0       0
  5796 ;;      Locals:         1       0       0       0       0       0       0
  5797 ;;      Temps:          0       0       0       0       0       0       0
  5798 ;;      Totals:         1       0       0       0       0       0       0
  5799 ;;Total ram usage:        1 bytes
  5800 ;; Hardware stack levels used:    1
  5801 ;; Hardware stack levels required when called:    7
  5802 ;; This function calls:
  5803 ;;		___lwtoft
  5804 ;;		_delay10ms
  5805 ;;		_lcd_clear
  5806 ;;		_lcd_gotoxy
  5807 ;;		_lcd_putch
  5808 ;;		_measure_freq
  5809 ;;		_put_str
  5810 ;; This function is called by:
  5811 ;;		_main
  5812 ;; This function uses a non-reentrant model
  5813 ;;
  5814                           
  5815                           	psect	text30
  5816  00188E                     __ptext30:
  5817                           	opt stack 0
  5818  00188E                     _calibrate:
  5819                           	opt stack 0
  5820  00188E  FFFF               	dw	65535	; assembler added errata NOP
  5821                           
  5822                           ;measure.c: 27: uint8_t i;
  5823                           ;measure.c: 30: lcd_clear();
  5824                           
  5825                           ;incstack = 0
  5826  001890  EC6B  F012         	call	_lcd_clear	;wreg free
  5827                           
  5828                           ;measure.c: 32: lcd_gotoxy(0, 0);
  5829  001894  0E00               	movlw	0
  5830  001896  6A0D               	clrf	lcd_gotoxy@row,c
  5831  001898  EC63  F011         	call	_lcd_gotoxy
  5832                           
  5833                           ;measure.c: 33: put_str("Calibrating");
  5834  00189C  0E56               	movlw	low STR_6
  5835  00189E  6E0E               	movwf	put_str@s,c
  5836  0018A0  EC80  F011         	call	_put_str	;wreg free
  5837                           
  5838                           ;measure.c: 35: lcd_gotoxy(0, 1);
  5839  0018A4  0E01               	movlw	1
  5840  0018A6  6E0D               	movwf	lcd_gotoxy@row,c
  5841  0018A8  0E00               	movlw	0
  5842  0018AA  EC63  F011         	call	_lcd_gotoxy
  5843                           
  5844                           ;measure.c: 39: put_str("please wait...");
  5845  0018AE  0E3A               	movlw	low STR_7
  5846  0018B0  6E0E               	movwf	put_str@s,c
  5847  0018B2  EC80  F011         	call	_put_str	;wreg free
  5848                           
  5849                           ;measure.c: 42: LATC &= ~(1 << 5);
  5850  0018B6  9A8B               	bcf	3979,5,c	;volatile
  5851                           
  5852                           ;measure.c: 44: F1 = (double)measure_freq();
  5853  0018B8  ECFE  F009         	call	_measure_freq	;wreg free
  5854  0018BC  C03B  F040         	movff	?_measure_freq,___lwtoft@c
  5855  0018C0  C03C  F041         	movff	?_measure_freq+1,___lwtoft@c+1
  5856  0018C4  ECFF  F011         	call	___lwtoft	;wreg free
  5857  0018C8  C040  F06F         	movff	?___lwtoft,_F1
  5858  0018CC  C041  F070         	movff	?___lwtoft+1,_F1+1
  5859  0018D0  C042  F071         	movff	?___lwtoft+2,_F1+2
  5860                           
  5861                           ;measure.c: 45: delay10ms(50);
  5862  0018D4  0E32               	movlw	50
  5863  0018D6  EC9B  F012         	call	_delay10ms
  5864                           
  5865                           ;measure.c: 47: F1 = (double)measure_freq();
  5866  0018DA  ECFE  F009         	call	_measure_freq	;wreg free
  5867  0018DE  C03B  F040         	movff	?_measure_freq,___lwtoft@c
  5868  0018E2  C03C  F041         	movff	?_measure_freq+1,___lwtoft@c+1
  5869  0018E6  ECFF  F011         	call	___lwtoft	;wreg free
  5870  0018EA  C040  F06F         	movff	?___lwtoft,_F1
  5871  0018EE  C041  F070         	movff	?___lwtoft+1,_F1+1
  5872  0018F2  C042  F071         	movff	?___lwtoft+2,_F1+2
  5873                           
  5874                           ;measure.c: 48: LATC |= (1 << 5);
  5875  0018F6  8A8B               	bsf	3979,5,c	;volatile
  5876                           
  5877                           ;measure.c: 50: F2 = (double)measure_freq();
  5878  0018F8  ECFE  F009         	call	_measure_freq	;wreg free
  5879  0018FC  C03B  F040         	movff	?_measure_freq,___lwtoft@c
  5880  001900  C03C  F041         	movff	?_measure_freq+1,___lwtoft@c+1
  5881  001904  ECFF  F011         	call	___lwtoft	;wreg free
  5882  001908  C040  F09D         	movff	?___lwtoft,_F2
  5883  00190C  C041  F09E         	movff	?___lwtoft+1,_F2+1
  5884  001910  C042  F09F         	movff	?___lwtoft+2,_F2+2
  5885                           
  5886                           ;measure.c: 51: delay10ms(50);
  5887  001914  0E32               	movlw	50
  5888  001916  EC9B  F012         	call	_delay10ms
  5889                           
  5890                           ;measure.c: 53: F2 = (double)measure_freq();
  5891  00191A  ECFE  F009         	call	_measure_freq	;wreg free
  5892  00191E  C03B  F040         	movff	?_measure_freq,___lwtoft@c
  5893  001922  C03C  F041         	movff	?_measure_freq+1,___lwtoft@c+1
  5894  001926  ECFF  F011         	call	___lwtoft	;wreg free
  5895  00192A  C040  F09D         	movff	?___lwtoft,_F2
  5896  00192E  C041  F09E         	movff	?___lwtoft+1,_F2+1
  5897  001932  C042  F09F         	movff	?___lwtoft+2,_F2+2
  5898                           
  5899                           ;measure.c: 54: LATC &= ~(1 << 5);
  5900  001936  9A8B               	bcf	3979,5,c	;volatile
  5901                           
  5902                           ;measure.c: 57: lcd_gotoxy(11, 0);
  5903  001938  6A0D               	clrf	lcd_gotoxy@row,c
  5904  00193A  0E0B               	movlw	11
  5905  00193C  EC63  F011         	call	_lcd_gotoxy
  5906                           
  5907                           ;measure.c: 58: for(i = 0; i < 6; i++) {
  5908  001940  6A43               	clrf	calibrate@i,c
  5909  001942                     l4104:
  5910  001942  FFFF               	dw	65535	; assembler added errata NOP
  5911                           
  5912                           ;measure.c: 59: lcd_putch('=');
  5913  001944  0E3D               	movlw	61
  5914  001946  EC7A  F012         	call	_lcd_putch
  5915                           
  5916                           ;measure.c: 61: delay10ms(28);
  5917  00194A  0E1C               	movlw	28
  5918  00194C  EC9B  F012         	call	_delay10ms
  5919  001950  2A43               	incf	calibrate@i,f,c
  5920  001952  0E05               	movlw	5
  5921  001954  6443               	cpfsgt	calibrate@i,c
  5922  001956  D7F5               	goto	l4104
  5923  001958  0C05               	retlw	5	;funcret
  5924  00195A  FFFF               	dw	65535	; errata NOP
  5925  00195C                     __end_of_calibrate:
  5926                           	opt stack 0
  5927                           tblptru	equ	0xFF8
  5928                           tblptrh	equ	0xFF7
  5929                           tblptrl	equ	0xFF6
  5930                           tablat	equ	0xFF5
  5931                           prodl	equ	0xFF3
  5932                           intcon	equ	0xFF2
  5933                           intcon2	equ	0xFF1
  5934                           postinc0	equ	0xFEE
  5935                           wreg	equ	0xFE8
  5936                           postdec1	equ	0xFE5
  5937                           fsr1l	equ	0xFE1
  5938                           postinc2	equ	0xFDE
  5939                           postdec2	equ	0xFDD
  5940                           fsr2h	equ	0xFDA
  5941                           fsr2l	equ	0xFD9
  5942                           status	equ	0xFD8
  5943                           
  5944 ;; *************** function _put_str *****************
  5945 ;; Defined at:
  5946 ;;		line 501 in file "src/print.c"
  5947 ;; Parameters:    Size  Location     Type
  5948 ;;  s               1   13[COMRAM] PTR const unsigned char 
  5949 ;;		 -> STR_10(13), STR_9(10), STR_7(15), STR_6(12), 
  5950 ;; Auto vars:     Size  Location     Type
  5951 ;;  i               2   15[COMRAM] int 
  5952 ;; Return value:  Size  Location     Type
  5953 ;;                  1    wreg      void 
  5954 ;; Registers used:
  5955 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5956 ;; Tracked objects:
  5957 ;;		On entry : 0/0
  5958 ;;		On exit  : 0/0
  5959 ;;		Unchanged: 0/0
  5960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5961 ;;      Params:         1       0       0       0       0       0       0
  5962 ;;      Locals:         2       0       0       0       0       0       0
  5963 ;;      Temps:          1       0       0       0       0       0       0
  5964 ;;      Totals:         4       0       0       0       0       0       0
  5965 ;;Total ram usage:        4 bytes
  5966 ;; Hardware stack levels used:    1
  5967 ;; Hardware stack levels required when called:    6
  5968 ;; This function calls:
  5969 ;;		_output_putch
  5970 ;; This function is called by:
  5971 ;;		_calibrate
  5972 ;;		_measure_capacitance
  5973 ;;		_measure_inductance
  5974 ;; This function uses a non-reentrant model
  5975 ;;
  5976                           
  5977                           	psect	text31
  5978  002300                     __ptext31:
  5979                           	opt stack 0
  5980  002300                     _put_str:
  5981                           	opt stack 0
  5982  002300  FFFF               	dw	65535	; assembler added errata NOP
  5983                           
  5984                           ;print.c: 502: int i;
  5985                           ;print.c: 504: for(i = 0; s[i]; i++) {
  5986                           
  5987                           ;incstack = 0
  5988  002302  6A10               	clrf	put_str@i,c
  5989  002304  6A11               	clrf	put_str@i+1,c
  5990  002306  D00C               	goto	l3930
  5991  002308                     l3926:
  5992                           
  5993                           ;print.c: 505: output_putch(s[i]);
  5994  002308  500E               	movf	put_str@s,w,c
  5995  00230A  2410               	addwf	put_str@i,w,c
  5996  00230C  6E0F               	movwf	??_put_str& (0+255),c
  5997  00230E  C00F  FFF6         	movff	??_put_str,tblptrl
  5998  002312                     	if	0	;There is only one active tblptr byte
  5999  002312                     	endif
  6000  002312                     	if	0	;tblptru may be non-zero
  6001  002312                     	endif
  6002  002312                     	if	0	;tblptru may be non-zero
  6003  002312                     	endif
  6004  002312  0008               	tblrd		*
  6005  002314  FFFF               	dw	65535	; errata NOP
  6006  002316  50F5               	movf	tablat,w,c
  6007  002318  EC92  F012         	call	_output_putch
  6008  00231C  4A10               	infsnz	put_str@i,f,c
  6009  00231E  2A11               	incf	put_str@i+1,f,c
  6010  002320                     l3930:
  6011  002320  FFFF               	dw	65535	; assembler added errata NOP
  6012  002322  500E               	movf	put_str@s,w,c
  6013  002324  2410               	addwf	put_str@i,w,c
  6014  002326  6E0F               	movwf	??_put_str& (0+255),c
  6015  002328  C00F  FFF6         	movff	??_put_str,tblptrl
  6016  00232C                     	if	0	;There is only one active tblptr byte
  6017  00232C                     	endif
  6018  00232C                     	if	0	;tblptru may be non-zero
  6019  00232C                     	endif
  6020  00232C                     	if	0	;tblptru may be non-zero
  6021  00232C                     	endif
  6022  00232C  0008               	tblrd		*
  6023  00232E  FFFF               	dw	65535	; errata NOP
  6024  002330  50F5               	movf	tablat,w,c
  6025  002332  E1EA               	bnz	l3926
  6026  002334  0012               	return		;funcret
  6027  002336  FFFF               	dw	65535	; errata NOP
  6028  002338                     __end_of_put_str:
  6029                           	opt stack 0
  6030                           tblptru	equ	0xFF8
  6031                           tblptrh	equ	0xFF7
  6032                           tblptrl	equ	0xFF6
  6033                           tablat	equ	0xFF5
  6034                           prodl	equ	0xFF3
  6035                           intcon	equ	0xFF2
  6036                           intcon2	equ	0xFF1
  6037                           postinc0	equ	0xFEE
  6038                           wreg	equ	0xFE8
  6039                           postdec1	equ	0xFE5
  6040                           fsr1l	equ	0xFE1
  6041                           postinc2	equ	0xFDE
  6042                           postdec2	equ	0xFDD
  6043                           fsr2h	equ	0xFDA
  6044                           fsr2l	equ	0xFD9
  6045                           status	equ	0xFD8
  6046                           
  6047 ;; *************** function _output_putch *****************
  6048 ;; Defined at:
  6049 ;;		line 488 in file "src/print.c"
  6050 ;; Parameters:    Size  Location     Type
  6051 ;;  c               1    wreg     unsigned char 
  6052 ;; Auto vars:     Size  Location     Type
  6053 ;;  c               1   12[COMRAM] unsigned char 
  6054 ;; Return value:  Size  Location     Type
  6055 ;;                  1    wreg      void 
  6056 ;; Registers used:
  6057 ;;		wreg, status,2, status,0, cstack
  6058 ;; Tracked objects:
  6059 ;;		On entry : 0/0
  6060 ;;		On exit  : 0/0
  6061 ;;		Unchanged: 0/0
  6062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6063 ;;      Params:         0       0       0       0       0       0       0
  6064 ;;      Locals:         1       0       0       0       0       0       0
  6065 ;;      Temps:          0       0       0       0       0       0       0
  6066 ;;      Totals:         1       0       0       0       0       0       0
  6067 ;;Total ram usage:        1 bytes
  6068 ;; Hardware stack levels used:    1
  6069 ;; Hardware stack levels required when called:    5
  6070 ;; This function calls:
  6071 ;;		_lcd_putch
  6072 ;; This function is called by:
  6073 ;;		_put_str
  6074 ;; This function uses a non-reentrant model
  6075 ;;
  6076                           
  6077                           	psect	text32
  6078  002524                     __ptext32:
  6079                           	opt stack 0
  6080  002524                     _output_putch:
  6081                           	opt stack 0
  6082  002524  FFFF               	dw	65535	; assembler added errata NOP
  6083                           
  6084                           ;incstack = 0
  6085                           ;output_putch@c stored from wreg
  6086  002526  6E0D               	movwf	output_putch@c,c
  6087                           
  6088                           ;print.c: 490: lcd_putch(c);
  6089  002528  500D               	movf	output_putch@c,w,c
  6090  00252A  EF7A  F012         	goto	_lcd_putch
  6091  00252E  FFFF               	dw	65535	; errata NOP
  6092  002530                     __end_of_output_putch:
  6093                           	opt stack 0
  6094                           tblptru	equ	0xFF8
  6095                           tblptrh	equ	0xFF7
  6096                           tblptrl	equ	0xFF6
  6097                           tablat	equ	0xFF5
  6098                           prodl	equ	0xFF3
  6099                           intcon	equ	0xFF2
  6100                           intcon2	equ	0xFF1
  6101                           postinc0	equ	0xFEE
  6102                           wreg	equ	0xFE8
  6103                           postdec1	equ	0xFE5
  6104                           fsr1l	equ	0xFE1
  6105                           postinc2	equ	0xFDE
  6106                           postdec2	equ	0xFDD
  6107                           fsr2h	equ	0xFDA
  6108                           fsr2l	equ	0xFD9
  6109                           status	equ	0xFD8
  6110                           
  6111 ;; *************** function _lcd_putch *****************
  6112 ;; Defined at:
  6113 ;;		line 170 in file "lib/lcd44780.c"
  6114 ;; Parameters:    Size  Location     Type
  6115 ;;  value           1    wreg     unsigned char 
  6116 ;; Auto vars:     Size  Location     Type
  6117 ;;  value           1   11[COMRAM] unsigned char 
  6118 ;; Return value:  Size  Location     Type
  6119 ;;                  1    wreg      void 
  6120 ;; Registers used:
  6121 ;;		wreg, status,2, status,0, cstack
  6122 ;; Tracked objects:
  6123 ;;		On entry : 0/0
  6124 ;;		On exit  : 0/0
  6125 ;;		Unchanged: 0/0
  6126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6127 ;;      Params:         0       0       0       0       0       0       0
  6128 ;;      Locals:         1       0       0       0       0       0       0
  6129 ;;      Temps:          0       0       0       0       0       0       0
  6130 ;;      Totals:         1       0       0       0       0       0       0
  6131 ;;Total ram usage:        1 bytes
  6132 ;; Hardware stack levels used:    1
  6133 ;; Hardware stack levels required when called:    4
  6134 ;; This function calls:
  6135 ;;		_lcd_send
  6136 ;; This function is called by:
  6137 ;;		_lcd_puts
  6138 ;;		_calibrate
  6139 ;;		_output_putch
  6140 ;; This function uses a non-reentrant model
  6141 ;;
  6142                           
  6143                           	psect	text33
  6144  0024F4                     __ptext33:
  6145                           	opt stack 0
  6146  0024F4                     _lcd_putch:
  6147                           	opt stack 0
  6148  0024F4  FFFF               	dw	65535	; assembler added errata NOP
  6149                           
  6150                           ;incstack = 0
  6151                           ;lcd_putch@value stored from wreg
  6152  0024F6  6E0C               	movwf	lcd_putch@value,c
  6153                           
  6154                           ;lcd44780.c: 171: lcd_send((unsigned char)value, 1);
  6155  0024F8  0E01               	movlw	1
  6156  0024FA  6E0A               	movwf	lcd_send@mode,c
  6157  0024FC  500C               	movf	lcd_putch@value,w,c
  6158  0024FE  EF4C  F012         	goto	_lcd_send
  6159  002502  FFFF               	dw	65535	; errata NOP
  6160  002504                     __end_of_lcd_putch:
  6161                           	opt stack 0
  6162                           tblptru	equ	0xFF8
  6163                           tblptrh	equ	0xFF7
  6164                           tblptrl	equ	0xFF6
  6165                           tablat	equ	0xFF5
  6166                           prodl	equ	0xFF3
  6167                           intcon	equ	0xFF2
  6168                           intcon2	equ	0xFF1
  6169                           postinc0	equ	0xFEE
  6170                           wreg	equ	0xFE8
  6171                           postdec1	equ	0xFE5
  6172                           fsr1l	equ	0xFE1
  6173                           postinc2	equ	0xFDE
  6174                           postdec2	equ	0xFDD
  6175                           fsr2h	equ	0xFDA
  6176                           fsr2l	equ	0xFD9
  6177                           status	equ	0xFD8
  6178                           
  6179 ;; *************** function _measure_freq *****************
  6180 ;; Defined at:
  6181 ;;		line 73 in file "src/measure.c"
  6182 ;; Parameters:    Size  Location     Type
  6183 ;;		None
  6184 ;; Auto vars:     Size  Location     Type
  6185 ;;  count           2   61[COMRAM] unsigned int 
  6186 ;; Return value:  Size  Location     Type
  6187 ;;                  2   58[COMRAM] unsigned short 
  6188 ;; Registers used:
  6189 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6190 ;; Tracked objects:
  6191 ;;		On entry : 0/0
  6192 ;;		On exit  : 0/0
  6193 ;;		Unchanged: 0/0
  6194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6195 ;;      Params:         2       0       0       0       0       0       0
  6196 ;;      Locals:         2       0       0       0       0       0       0
  6197 ;;      Temps:          1       0       0       0       0       0       0
  6198 ;;      Totals:         5       0       0       0       0       0       0
  6199 ;;Total ram usage:        5 bytes
  6200 ;; Hardware stack levels used:    1
  6201 ;; Hardware stack levels required when called:    6
  6202 ;; This function calls:
  6203 ;;		_buffer_init
  6204 ;;		_buffer_puts
  6205 ;;		_format_number
  6206 ;;		_lcd_gotoxy
  6207 ;;		_print_buffer
  6208 ;;		_timer0_read_ps
  6209 ;; This function is called by:
  6210 ;;		_calibrate
  6211 ;;		_measure_capacitance
  6212 ;;		_measure_inductance
  6213 ;; This function uses a non-reentrant model
  6214 ;;
  6215                           
  6216                           	psect	text34
  6217  0013FC                     __ptext34:
  6218                           	opt stack 0
  6219  0013FC                     _measure_freq:
  6220                           	opt stack 0
  6221  0013FC  FFFF               	dw	65535	; assembler added errata NOP
  6222                           
  6223                           ;measure.c: 74: uint16_t count;
  6224                           ;measure.c: 76: INTCONbits.TMR0IF = 0;
  6225                           
  6226                           ;incstack = 0
  6227  0013FE  94F2               	bcf	intcon,2,c	;volatile
  6228                           
  6229                           ;measure.c: 80: TRISA &= ~0b00010000;
  6230  001400  9892               	bcf	3986,4,c	;volatile
  6231                           
  6232                           ;measure.c: 82: _delay((unsigned long)((20)*(20000000/4000.0)));
  6233  001402  0E62               	movlw	98
  6234  001404  6E3D               	movwf	??_measure_freq& (0+255),c
  6235  001406  0E76               	movlw	118
  6236  001408                     u4167:
  6237  001408  FFFF               	dw	65535	; errata NOP
  6238  00140A  2EE8               	decfsz	wreg,f,c
  6239  00140C  D7FD               	bra	u4167
  6240  00140E  2E3D               	decfsz	??_measure_freq& (0+255),f,c
  6241  001410  D7FB               	bra	u4167
  6242  001412  D000               	nop2	
  6243                           
  6244                           ;measure.c: 85: TMR0 = 0x00;
  6245  001414  6AD6               	clrf	4054,c	;volatile
  6246  001416  6AD7               	clrf	4055,c	;volatile
  6247                           
  6248                           ;measure.c: 90: _delay((unsigned long)((10)*(20000000/4000.0)));
  6249  001418  0E31               	movlw	49
  6250  00141A  6E3D               	movwf	??_measure_freq& (0+255),c
  6251  00141C  0EBB               	movlw	187
  6252  00141E                     u4177:
  6253  00141E  FFFF               	dw	65535	; errata NOP
  6254  001420  2EE8               	decfsz	wreg,f,c
  6255  001422  D7FD               	bra	u4177
  6256  001424  2E3D               	decfsz	??_measure_freq& (0+255),f,c
  6257  001426  D7FB               	bra	u4177
  6258                           
  6259                           ;measure.c: 91: _delay((unsigned long)((10)*(20000000/4000.0)));
  6260  001428  0E31               	movlw	49
  6261  00142A  6E3D               	movwf	??_measure_freq& (0+255),c
  6262  00142C  0EBB               	movlw	187
  6263  00142E                     u4187:
  6264  00142E  FFFF               	dw	65535	; errata NOP
  6265  001430  2EE8               	decfsz	wreg,f,c
  6266  001432  D7FD               	bra	u4187
  6267  001434  2E3D               	decfsz	??_measure_freq& (0+255),f,c
  6268  001436  D7FB               	bra	u4187
  6269                           
  6270                           ;measure.c: 92: _delay((unsigned long)((10)*(20000000/4000.0)));
  6271  001438  0E31               	movlw	49
  6272  00143A  6E3D               	movwf	??_measure_freq& (0+255),c
  6273  00143C  0EBB               	movlw	187
  6274  00143E                     u4197:
  6275  00143E  FFFF               	dw	65535	; errata NOP
  6276  001440  2EE8               	decfsz	wreg,f,c
  6277  001442  D7FD               	bra	u4197
  6278  001444  2E3D               	decfsz	??_measure_freq& (0+255),f,c
  6279  001446  D7FB               	bra	u4197
  6280                           
  6281                           ;measure.c: 93: _delay((unsigned long)((10)*(20000000/4000.0)));
  6282  001448  0E31               	movlw	49
  6283  00144A  6E3D               	movwf	??_measure_freq& (0+255),c
  6284  00144C  0EBB               	movlw	187
  6285  00144E                     u4207:
  6286  00144E  FFFF               	dw	65535	; errata NOP
  6287  001450  2EE8               	decfsz	wreg,f,c
  6288  001452  D7FD               	bra	u4207
  6289  001454  2E3D               	decfsz	??_measure_freq& (0+255),f,c
  6290  001456  D7FB               	bra	u4207
  6291                           
  6292                           ;measure.c: 94: _delay((unsigned long)((10)*(20000000/4000.0)));
  6293  001458  0E31               	movlw	49
  6294  00145A  6E3D               	movwf	??_measure_freq& (0+255),c
  6295  00145C  0EBB               	movlw	187
  6296  00145E                     u4217:
  6297  00145E  FFFF               	dw	65535	; errata NOP
  6298  001460  2EE8               	decfsz	wreg,f,c
  6299  001462  D7FD               	bra	u4217
  6300  001464  2E3D               	decfsz	??_measure_freq& (0+255),f,c
  6301  001466  D7FB               	bra	u4217
  6302                           
  6303                           ;measure.c: 95: _delay((unsigned long)((10)*(20000000/4000.0)));
  6304  001468  0E31               	movlw	49
  6305  00146A  6E3D               	movwf	??_measure_freq& (0+255),c
  6306  00146C  0EBB               	movlw	187
  6307  00146E                     u4227:
  6308  00146E  FFFF               	dw	65535	; errata NOP
  6309  001470  2EE8               	decfsz	wreg,f,c
  6310  001472  D7FD               	bra	u4227
  6311  001474  2E3D               	decfsz	??_measure_freq& (0+255),f,c
  6312  001476  D7FB               	bra	u4227
  6313                           
  6314                           ;measure.c: 96: _delay((unsigned long)((10)*(20000000/4000.0)));
  6315  001478  0E31               	movlw	49
  6316  00147A  6E3D               	movwf	??_measure_freq& (0+255),c
  6317  00147C  0EBB               	movlw	187
  6318  00147E                     u4237:
  6319  00147E  FFFF               	dw	65535	; errata NOP
  6320  001480  2EE8               	decfsz	wreg,f,c
  6321  001482  D7FD               	bra	u4237
  6322  001484  2E3D               	decfsz	??_measure_freq& (0+255),f,c
  6323  001486  D7FB               	bra	u4237
  6324                           
  6325                           ;measure.c: 97: _delay((unsigned long)((10)*(20000000/4000.0)));
  6326  001488  0E31               	movlw	49
  6327  00148A  6E3D               	movwf	??_measure_freq& (0+255),c
  6328  00148C  0EBB               	movlw	187
  6329  00148E                     u4247:
  6330  00148E  FFFF               	dw	65535	; errata NOP
  6331  001490  2EE8               	decfsz	wreg,f,c
  6332  001492  D7FD               	bra	u4247
  6333  001494  2E3D               	decfsz	??_measure_freq& (0+255),f,c
  6334  001496  D7FB               	bra	u4247
  6335                           
  6336                           ;measure.c: 98: _delay((unsigned long)((10)*(20000000/4000.0)));
  6337  001498  0E31               	movlw	49
  6338  00149A  6E3D               	movwf	??_measure_freq& (0+255),c
  6339  00149C  0EBB               	movlw	187
  6340  00149E                     u4257:
  6341  00149E  FFFF               	dw	65535	; errata NOP
  6342  0014A0  2EE8               	decfsz	wreg,f,c
  6343  0014A2  D7FD               	bra	u4257
  6344  0014A4  2E3D               	decfsz	??_measure_freq& (0+255),f,c
  6345  0014A6  D7FB               	bra	u4257
  6346                           
  6347                           ;measure.c: 99: _delay((unsigned long)((10)*(20000000/4000.0)));
  6348  0014A8  0E31               	movlw	49
  6349  0014AA  6E3D               	movwf	??_measure_freq& (0+255),c
  6350  0014AC  0EBB               	movlw	187
  6351  0014AE                     u4267:
  6352  0014AE  FFFF               	dw	65535	; errata NOP
  6353  0014B0  2EE8               	decfsz	wreg,f,c
  6354  0014B2  D7FD               	bra	u4267
  6355  0014B4  2E3D               	decfsz	??_measure_freq& (0+255),f,c
  6356  0014B6  D7FB               	bra	u4267
  6357                           
  6358                           ;measure.c: 104: TRISA |= 0b00010000;
  6359  0014B8  8892               	bsf	3986,4,c	;volatile
  6360                           
  6361                           ;measure.c: 107: count = timer0_read_ps();
  6362  0014BA  EC91  F010         	call	_timer0_read_ps	;wreg free
  6363  0014BE  C009  F03E         	movff	?_timer0_read_ps,measure_freq@count
  6364  0014C2  C00A  F03F         	movff	?_timer0_read_ps+1,measure_freq@count+1
  6365                           
  6366                           ;measure.c: 110: lcd_gotoxy(0, 1);
  6367  0014C6  0E01               	movlw	1
  6368  0014C8  6E0D               	movwf	lcd_gotoxy@row,c
  6369  0014CA  0E00               	movlw	0
  6370  0014CC  EC63  F011         	call	_lcd_gotoxy
  6371                           
  6372                           ;measure.c: 112: buffer_init();
  6373  0014D0  EC82  F012         	call	_buffer_init	;wreg free
  6374                           
  6375                           ; BSR set to: 0
  6376                           ;measure.c: 113: buffer_puts("Freq=");
  6377  0014D4  0E7D               	movlw	low STR_8
  6378  0014D6  6E0C               	movwf	buffer_puts@x,c
  6379  0014D8  EC26  F012         	call	_buffer_puts	;wreg free
  6380                           
  6381                           ; BSR set to: 0
  6382                           ;measure.c: 114: format_number(count, 10, 5);
  6383  0014DC  C03E  F010         	movff	measure_freq@count,format_number@n
  6384  0014E0  C03F  F011         	movff	measure_freq@count+1,format_number@n+1
  6385  0014E4  0E0A               	movlw	10
  6386  0014E6  6E12               	movwf	format_number@base,c
  6387  0014E8  0E05               	movlw	5
  6388  0014EA  6E13               	movwf	format_number@pad,c
  6389  0014EC  EC73  F00D         	call	_format_number	;wreg free
  6390                           
  6391                           ;measure.c: 115: print_buffer();
  6392  0014F0  EC98  F012         	call	_print_buffer	;wreg free
  6393                           
  6394                           ;measure.c: 117: return count;
  6395  0014F4  C03E  F03B         	movff	measure_freq@count,?_measure_freq
  6396  0014F8  C03F  F03C         	movff	measure_freq@count+1,?_measure_freq+1
  6397  0014FC  0012               	return		;funcret
  6398  0014FE  FFFF               	dw	65535	; errata NOP
  6399  001500                     __end_of_measure_freq:
  6400                           	opt stack 0
  6401                           tblptru	equ	0xFF8
  6402                           tblptrh	equ	0xFF7
  6403                           tblptrl	equ	0xFF6
  6404                           tablat	equ	0xFF5
  6405                           prodl	equ	0xFF3
  6406                           intcon	equ	0xFF2
  6407                           intcon2	equ	0xFF1
  6408                           postinc0	equ	0xFEE
  6409                           wreg	equ	0xFE8
  6410                           postdec1	equ	0xFE5
  6411                           fsr1l	equ	0xFE1
  6412                           postinc2	equ	0xFDE
  6413                           postdec2	equ	0xFDD
  6414                           fsr2h	equ	0xFDA
  6415                           fsr2l	equ	0xFD9
  6416                           status	equ	0xFD8
  6417                           
  6418 ;; *************** function _timer0_read_ps *****************
  6419 ;; Defined at:
  6420 ;;		line 77 in file "lib/timer.c"
  6421 ;; Parameters:    Size  Location     Type
  6422 ;;		None
  6423 ;; Auto vars:     Size  Location     Type
  6424 ;;  count           2   13[COMRAM] unsigned int 
  6425 ;;  prev            1   12[COMRAM] unsigned char 
  6426 ;; Return value:  Size  Location     Type
  6427 ;;                  2    8[COMRAM] unsigned short 
  6428 ;; Registers used:
  6429 ;;		wreg, status,2, status,0
  6430 ;; Tracked objects:
  6431 ;;		On entry : 0/0
  6432 ;;		On exit  : 0/0
  6433 ;;		Unchanged: 0/0
  6434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6435 ;;      Params:         2       0       0       0       0       0       0
  6436 ;;      Locals:         3       0       0       0       0       0       0
  6437 ;;      Temps:          2       0       0       0       0       0       0
  6438 ;;      Totals:         7       0       0       0       0       0       0
  6439 ;;Total ram usage:        7 bytes
  6440 ;; Hardware stack levels used:    1
  6441 ;; Hardware stack levels required when called:    2
  6442 ;; This function calls:
  6443 ;;		Nothing
  6444 ;; This function is called by:
  6445 ;;		_measure_freq
  6446 ;; This function uses a non-reentrant model
  6447 ;;
  6448                           
  6449                           	psect	text35
  6450  002122                     __ptext35:
  6451                           	opt stack 0
  6452  002122                     _timer0_read_ps:
  6453                           	opt stack 0
  6454  002122  FFFF               	dw	65535	; assembler added errata NOP
  6455                           
  6456                           ;timer.c: 78: uint8_t prev = TMR0;
  6457                           
  6458                           ;incstack = 0
  6459  002124  CFD6 F00D          	movff	4054,timer0_read_ps@prev	;volatile
  6460                           
  6461                           ;timer.c: 79: uint16_t count = 0;
  6462  002128  6A0E               	clrf	timer0_read_ps@count,c
  6463  00212A  6A0F               	clrf	timer0_read_ps@count+1,c
  6464                           
  6465                           ;timer.c: 81: T0CONbits.T0CS = 1;
  6466  00212C  8AD5               	bsf	4053,5,c	;volatile
  6467  00212E                     l310:
  6468                           
  6469                           ;timer.c: 85: T0CONbits.T0SE = 1;
  6470  00212E  88D5               	bsf	4053,4,c	;volatile
  6471                           
  6472                           ;timer.c: 87: __nop();
  6473  002130  F000               	nop	
  6474                           
  6475                           ;timer.c: 88: __nop();
  6476  002132  F000               	nop	
  6477                           
  6478                           ;timer.c: 90: T0CONbits.T0SE = 0;
  6479  002134  98D5               	bcf	4053,4,c	;volatile
  6480                           
  6481                           ;timer.c: 92: __nop();
  6482  002136  F000               	nop	
  6483                           
  6484                           ;timer.c: 93: __nop();
  6485  002138  F000               	nop	
  6486                           
  6487                           ;timer.c: 95: ++count;
  6488  00213A  4A0E               	infsnz	timer0_read_ps@count,f,c
  6489  00213C  2A0F               	incf	timer0_read_ps@count+1,f,c
  6490                           
  6491                           ;timer.c: 98: } while(prev == TMR0 && count <= 255);
  6492  00213E  500D               	movf	timer0_read_ps@prev,w,c
  6493  002140  18D6               	xorwf	4054,w,c	;volatile
  6494  002142  10D7               	iorwf	4055,w,c	;volatile
  6495  002144  E102               	bnz	u3700
  6496  002146  040F               	decf	timer0_read_ps@count+1,w,c
  6497  002148  E3F2               	bnc	l310
  6498  00214A                     u3700:
  6499                           
  6500                           ;timer.c: 100: count = ((prev << 8) + (256 - count));
  6501  00214A  500D               	movf	timer0_read_ps@prev,w,c
  6502  00214C  6E0C               	movwf	(??_timer0_read_ps+1)& (0+255),c
  6503  00214E  6A0B               	clrf	??_timer0_read_ps& (0+255),c
  6504  002150  500E               	movf	timer0_read_ps@count,w,c
  6505  002152  5E0B               	subwf	??_timer0_read_ps,f,c
  6506  002154  500F               	movf	timer0_read_ps@count+1,w,c
  6507  002156  5A0C               	subwfb	??_timer0_read_ps+1,f,c
  6508  002158  0E00               	movlw	0
  6509  00215A  240B               	addwf	??_timer0_read_ps,w,c
  6510  00215C  6E0E               	movwf	timer0_read_ps@count,c
  6511  00215E  0E01               	movlw	1
  6512  002160  200C               	addwfc	??_timer0_read_ps+1,w,c
  6513  002162  6E0F               	movwf	timer0_read_ps@count+1,c
  6514                           
  6515                           ;timer.c: 101: return count;
  6516  002164  C00E  F009         	movff	timer0_read_ps@count,?_timer0_read_ps
  6517  002168  C00F  F00A         	movff	timer0_read_ps@count+1,?_timer0_read_ps+1
  6518  00216C  0012               	return		;funcret
  6519  00216E  FFFF               	dw	65535	; errata NOP
  6520  002170                     __end_of_timer0_read_ps:
  6521                           	opt stack 0
  6522                           tblptru	equ	0xFF8
  6523                           tblptrh	equ	0xFF7
  6524                           tblptrl	equ	0xFF6
  6525                           tablat	equ	0xFF5
  6526                           prodl	equ	0xFF3
  6527                           intcon	equ	0xFF2
  6528                           intcon2	equ	0xFF1
  6529                           postinc0	equ	0xFEE
  6530                           wreg	equ	0xFE8
  6531                           postdec1	equ	0xFE5
  6532                           fsr1l	equ	0xFE1
  6533                           postinc2	equ	0xFDE
  6534                           postdec2	equ	0xFDD
  6535                           fsr2h	equ	0xFDA
  6536                           fsr2l	equ	0xFD9
  6537                           status	equ	0xFD8
  6538                           
  6539 ;; *************** function _print_buffer *****************
  6540 ;; Defined at:
  6541 ;;		line 510 in file "src/print.c"
  6542 ;; Parameters:    Size  Location     Type
  6543 ;;		None
  6544 ;; Auto vars:     Size  Location     Type
  6545 ;;		None
  6546 ;; Return value:  Size  Location     Type
  6547 ;;                  1    wreg      void 
  6548 ;; Registers used:
  6549 ;;		None
  6550 ;; Tracked objects:
  6551 ;;		On entry : 0/0
  6552 ;;		On exit  : 0/0
  6553 ;;		Unchanged: 0/0
  6554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6555 ;;      Params:         0       0       0       0       0       0       0
  6556 ;;      Locals:         0       0       0       0       0       0       0
  6557 ;;      Temps:          0       0       0       0       0       0       0
  6558 ;;      Totals:         0       0       0       0       0       0       0
  6559 ;;Total ram usage:        0 bytes
  6560 ;; Hardware stack levels used:    1
  6561 ;; Hardware stack levels required when called:    2
  6562 ;; This function calls:
  6563 ;;		Nothing
  6564 ;; This function is called by:
  6565 ;;		_measure_freq
  6566 ;; This function uses a non-reentrant model
  6567 ;;
  6568                           
  6569                           	psect	text36
  6570  002530                     __ptext36:
  6571                           	opt stack 0
  6572  002530                     _print_buffer:
  6573                           	opt stack 0
  6574  002530  FFFF               	dw	65535	; assembler added errata NOP
  6575                           
  6576                           ;incstack = 0
  6577  002532  0012               	return		;funcret
  6578  002534  FFFF               	dw	65535	; errata NOP
  6579  002536                     __end_of_print_buffer:
  6580                           	opt stack 0
  6581                           tblptru	equ	0xFF8
  6582                           tblptrh	equ	0xFF7
  6583                           tblptrl	equ	0xFF6
  6584                           tablat	equ	0xFF5
  6585                           prodl	equ	0xFF3
  6586                           intcon	equ	0xFF2
  6587                           intcon2	equ	0xFF1
  6588                           postinc0	equ	0xFEE
  6589                           wreg	equ	0xFE8
  6590                           postdec1	equ	0xFE5
  6591                           fsr1l	equ	0xFE1
  6592                           postinc2	equ	0xFDE
  6593                           postdec2	equ	0xFDD
  6594                           fsr2h	equ	0xFDA
  6595                           fsr2l	equ	0xFD9
  6596                           status	equ	0xFD8
  6597                           
  6598 ;; *************** function _lcd_gotoxy *****************
  6599 ;; Defined at:
  6600 ;;		line 135 in file "lib/lcd44780.c"
  6601 ;; Parameters:    Size  Location     Type
  6602 ;;  col             1    wreg     unsigned char 
  6603 ;;  row             1   12[COMRAM] unsigned char 
  6604 ;; Auto vars:     Size  Location     Type
  6605 ;;  col             1   13[COMRAM] unsigned char 
  6606 ;;  row_offsets     4   14[COMRAM] unsigned char [4]
  6607 ;; Return value:  Size  Location     Type
  6608 ;;                  1    wreg      void 
  6609 ;; Registers used:
  6610 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6611 ;; Tracked objects:
  6612 ;;		On entry : 0/0
  6613 ;;		On exit  : 0/0
  6614 ;;		Unchanged: 0/0
  6615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6616 ;;      Params:         1       0       0       0       0       0       0
  6617 ;;      Locals:         5       0       0       0       0       0       0
  6618 ;;      Temps:          0       0       0       0       0       0       0
  6619 ;;      Totals:         6       0       0       0       0       0       0
  6620 ;;Total ram usage:        6 bytes
  6621 ;; Hardware stack levels used:    1
  6622 ;; Hardware stack levels required when called:    5
  6623 ;; This function calls:
  6624 ;;		_lcd_command
  6625 ;; This function is called by:
  6626 ;;		_main
  6627 ;;		_calibrate
  6628 ;;		_measure_freq
  6629 ;;		_measure_capacitance
  6630 ;;		_measure_inductance
  6631 ;;		_print_unit
  6632 ;;		_print_reading
  6633 ;;		_print_indicator
  6634 ;; This function uses a non-reentrant model
  6635 ;;
  6636                           
  6637                           	psect	text37
  6638  0022C6                     __ptext37:
  6639                           	opt stack 0
  6640  0022C6                     _lcd_gotoxy:
  6641                           	opt stack 0
  6642  0022C6  FFFF               	dw	65535	; assembler added errata NOP
  6643                           
  6644                           ;incstack = 0
  6645                           ;lcd_gotoxy@col stored from wreg
  6646  0022C8  6E0E               	movwf	lcd_gotoxy@col,c
  6647                           
  6648                           ;lcd44780.c: 137: uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
  6649  0022CA  C0D8  F00F         	movff	lcd_gotoxy@F2308,lcd_gotoxy@row_offsets
  6650  0022CE  C0D9  F010         	movff	lcd_gotoxy@F2308+1,lcd_gotoxy@row_offsets+1
  6651  0022D2  C0DA  F011         	movff	lcd_gotoxy@F2308+2,lcd_gotoxy@row_offsets+2
  6652  0022D6  C0DB  F012         	movff	lcd_gotoxy@F2308+3,lcd_gotoxy@row_offsets+3
  6653                           
  6654                           ;lcd44780.c: 146: if(LCD_lines == 1) {
  6655  0022DA  0100               	movlb	0	; () banked
  6656  0022DC  05A6               	decf	_LCD_lines& (0+255),w,b
  6657  0022DE  E106               	bnz	l3736
  6658                           
  6659                           ; BSR set to: 0
  6660                           ;lcd44780.c: 147: row_offsets[1] = 0x14;
  6661  0022E0  0E14               	movlw	20
  6662  0022E2  6E10               	movwf	lcd_gotoxy@row_offsets+1,c
  6663                           
  6664                           ;lcd44780.c: 148: row_offsets[2] = 0x28;
  6665  0022E4  0E28               	movlw	40
  6666  0022E6  6E11               	movwf	lcd_gotoxy@row_offsets+2,c
  6667                           
  6668                           ;lcd44780.c: 149: row_offsets[3] = 0x3C;
  6669  0022E8  0E3C               	movlw	60
  6670  0022EA  6E12               	movwf	lcd_gotoxy@row_offsets+3,c
  6671  0022EC                     l3736:
  6672                           
  6673                           ; BSR set to: 0
  6674                           ;lcd44780.c: 150: }
  6675                           ;lcd44780.c: 156: lcd_command(0x80 | (col + row_offsets[row]));
  6676  0022EC  500D               	movf	lcd_gotoxy@row,w,c
  6677  0022EE  0F0F               	addlw	low lcd_gotoxy@row_offsets
  6678  0022F0  6ED9               	movwf	fsr2l,c
  6679  0022F2  6ADA               	clrf	fsr2h,c
  6680  0022F4  50DF               	movf	indf2,w,c
  6681  0022F6  240E               	addwf	lcd_gotoxy@col,w,c
  6682  0022F8  0980               	iorlw	128
  6683  0022FA  EF8A  F012         	goto	_lcd_command
  6684  0022FE  FFFF               	dw	65535	; errata NOP
  6685  002300                     __end_of_lcd_gotoxy:
  6686                           	opt stack 0
  6687                           tblptru	equ	0xFF8
  6688                           tblptrh	equ	0xFF7
  6689                           tblptrl	equ	0xFF6
  6690                           tablat	equ	0xFF5
  6691                           prodl	equ	0xFF3
  6692                           intcon	equ	0xFF2
  6693                           intcon2	equ	0xFF1
  6694                           postinc0	equ	0xFEE
  6695                           wreg	equ	0xFE8
  6696                           postdec1	equ	0xFE5
  6697                           fsr1l	equ	0xFE1
  6698                           indf2	equ	0xFDF
  6699                           postinc2	equ	0xFDE
  6700                           postdec2	equ	0xFDD
  6701                           fsr2h	equ	0xFDA
  6702                           fsr2l	equ	0xFD9
  6703                           status	equ	0xFD8
  6704                           
  6705 ;; *************** function _format_number *****************
  6706 ;; Defined at:
  6707 ;;		line 19 in file "lib/format.c"
  6708 ;; Parameters:    Size  Location     Type
  6709 ;;  n               2   15[COMRAM] unsigned int 
  6710 ;;  base            1   17[COMRAM] unsigned char 
  6711 ;;  pad             1   18[COMRAM] char 
  6712 ;; Auto vars:     Size  Location     Type
  6713 ;;  buf            32   21[COMRAM] unsigned char [32]
  6714 ;;  i               1   57[COMRAM] char 
  6715 ;;  di              1   56[COMRAM] unsigned char 
  6716 ;;  padchar         1   55[COMRAM] unsigned char 
  6717 ;; Return value:  Size  Location     Type
  6718 ;;                  1    wreg      void 
  6719 ;; Registers used:
  6720 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6721 ;; Tracked objects:
  6722 ;;		On entry : 0/0
  6723 ;;		On exit  : 0/0
  6724 ;;		Unchanged: 0/0
  6725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6726 ;;      Params:         4       0       0       0       0       0       0
  6727 ;;      Locals:        37       0       0       0       0       0       0
  6728 ;;      Temps:          2       0       0       0       0       0       0
  6729 ;;      Totals:        43       0       0       0       0       0       0
  6730 ;;Total ram usage:       43 bytes
  6731 ;; Hardware stack levels used:    1
  6732 ;; Hardware stack levels required when called:    3
  6733 ;; This function calls:
  6734 ;;		___lwdiv
  6735 ;;		___lwmod
  6736 ;;		_buffer_putch
  6737 ;; This function is called by:
  6738 ;;		_measure_freq
  6739 ;;		_print_reading
  6740 ;; This function uses a non-reentrant model
  6741 ;;
  6742                           
  6743                           	psect	text38
  6744  001AE6                     __ptext38:
  6745                           	opt stack 0
  6746  001AE6                     _format_number:
  6747                           	opt stack 0
  6748  001AE6  FFFF               	dw	65535	; assembler added errata NOP
  6749                           
  6750                           ;format.c: 20: char buf[8 * sizeof(long)];
  6751                           ;format.c: 21: uint8_t di;
  6752                           ;format.c: 22: int8_t i = 0;
  6753                           
  6754                           ;incstack = 0
  6755  001AE8  6A3A               	clrf	format_number@i,c
  6756                           
  6757                           ;format.c: 23: char padchar = ' ';
  6758  001AEA  0E20               	movlw	32
  6759  001AEC  6E38               	movwf	format_number@padchar,c
  6760                           
  6761                           ;format.c: 25: if(pad < 0) {
  6762  001AEE  AE13               	btfss	format_number@pad,7,c
  6763  001AF0  D003               	goto	l3756
  6764                           
  6765                           ;format.c: 26: pad = -pad;
  6766  001AF2  6C13               	negf	format_number@pad,c
  6767                           
  6768                           ;format.c: 27: padchar = '0';
  6769  001AF4  0E30               	movlw	48
  6770  001AF6  6E38               	movwf	format_number@padchar,c
  6771  001AF8                     l3756:
  6772  001AF8  FFFF               	dw	65535	; assembler added errata NOP
  6773                           
  6774                           ;format.c: 39: di = n % base;
  6775  001AFA  C010  F009         	movff	format_number@n,___lwmod@dividend
  6776  001AFE  C011  F00A         	movff	format_number@n+1,___lwmod@dividend+1
  6777  001B02  C012  F00B         	movff	format_number@base,___lwmod@divisor
  6778  001B06  6A0C               	clrf	___lwmod@divisor+1,c
  6779  001B08  EC04  F011         	call	___lwmod	;wreg free
  6780  001B0C  5009               	movf	?___lwmod,w,c
  6781  001B0E  6E39               	movwf	format_number@di,c
  6782                           
  6783                           ;format.c: 40: buf[i++] = (di < 10 ? (uint8_t)'0' + di : (uint8_t)'A' + di - 10);
  6784  001B10  0E09               	movlw	9
  6785  001B12  6439               	cpfsgt	format_number@di,c
  6786  001B14  D002               	goto	l3762
  6787  001B16  0E37               	movlw	55
  6788  001B18  D002               	goto	L4
  6789  001B1A                     l3762:
  6790  001B1A  FFFF               	dw	65535	; assembler added errata NOP
  6791  001B1C  0E30               	movlw	48
  6792  001B1E                     L4:
  6793  001B1E  FFFF               	dw	65535	; assembler added errata NOP
  6794  001B20  2439               	addwf	format_number@di,w,c
  6795  001B22  6E36               	movwf	_format_number$293,c
  6796  001B24  6A37               	clrf	_format_number$293+1,c
  6797  001B26  0E00               	movlw	0
  6798  001B28  2237               	addwfc	_format_number$293+1,f,c
  6799  001B2A  503A               	movf	format_number@i,w,c
  6800  001B2C  0F16               	addlw	low format_number@buf
  6801  001B2E  6ED9               	movwf	fsr2l,c
  6802  001B30  6ADA               	clrf	fsr2h,c
  6803  001B32  C036  FFDF         	movff	_format_number$293,indf2
  6804  001B36  2A3A               	incf	format_number@i,f,c
  6805                           
  6806                           ;format.c: 42: n /= base;
  6807  001B38  C010  F009         	movff	format_number@n,___lwdiv@dividend
  6808  001B3C  C011  F00A         	movff	format_number@n+1,___lwdiv@dividend+1
  6809  001B40  C012  F00B         	movff	format_number@base,___lwdiv@divisor
  6810  001B44  6A0C               	clrf	___lwdiv@divisor+1,c
  6811  001B46  EC14  F010         	call	___lwdiv	;wreg free
  6812  001B4A  C009  F010         	movff	?___lwdiv,format_number@n
  6813  001B4E  C00A  F011         	movff	?___lwdiv+1,format_number@n+1
  6814                           
  6815                           ;format.c: 43: } while(n > 0);
  6816  001B52  5010               	movf	format_number@n,w,c
  6817  001B54  1011               	iorwf	format_number@n+1,w,c
  6818  001B56  E004               	bz	l3774
  6819  001B58  D7CF               	goto	l3756
  6820  001B5A                     l3772:
  6821  001B5A  5038               	movf	format_number@padchar,w,c
  6822  001B5C  ECB8  F010         	call	_buffer_putch
  6823  001B60                     l3774:
  6824  001B60  0613               	decf	format_number@pad,f,c
  6825  001B62  2813               	incf	format_number@pad,w,c
  6826  001B64  6E14               	movwf	??_format_number& (0+255),c
  6827  001B66  503A               	movf	format_number@i,w,c
  6828  001B68  0A80               	xorlw	128
  6829  001B6A  6E15               	movwf	(??_format_number+1)& (0+255),c
  6830  001B6C  5014               	movf	??_format_number,w,c
  6831  001B6E  0A80               	xorlw	128
  6832  001B70  5C15               	subwf	(??_format_number+1)& (0+255),w,c
  6833  001B72  E3F3               	bnc	l3772
  6834  001B74                     u3660:
  6835  001B74  FFFF               	dw	65535	; assembler added errata NOP
  6836                           
  6837                           ;format.c: 47: for(; i > 0; i--) {
  6838  001B76  503A               	movf	format_number@i,w,c
  6839  001B78  0A80               	xorlw	128
  6840  001B7A  0F7F               	addlw	-129
  6841  001B7C  E30C               	bnc	l157
  6842                           
  6843                           ;format.c: 48: buffer_putch((char)buf[(int16_t)i - 1]);
  6844  001B7E  C03A  F014         	movff	format_number@i,??_format_number
  6845  001B82  0614               	decf	??_format_number,f,c
  6846  001B84  5014               	movf	??_format_number,w,c
  6847  001B86  0F16               	addlw	low format_number@buf
  6848  001B88  6ED9               	movwf	fsr2l,c
  6849  001B8A  6ADA               	clrf	fsr2h,c
  6850  001B8C  50DF               	movf	indf2,w,c
  6851  001B8E  ECB8  F010         	call	_buffer_putch
  6852                           
  6853                           ; BSR set to: 0
  6854  001B92  063A               	decf	format_number@i,f,c
  6855  001B94  D7EF               	goto	u3660
  6856  001B96                     l157:
  6857  001B96  0012               	return		;funcret
  6858  001B98  FFFF               	dw	65535	; errata NOP
  6859  001B9A                     __end_of_format_number:
  6860                           	opt stack 0
  6861                           tblptru	equ	0xFF8
  6862                           tblptrh	equ	0xFF7
  6863                           tblptrl	equ	0xFF6
  6864                           tablat	equ	0xFF5
  6865                           prodl	equ	0xFF3
  6866                           intcon	equ	0xFF2
  6867                           intcon2	equ	0xFF1
  6868                           postinc0	equ	0xFEE
  6869                           wreg	equ	0xFE8
  6870                           postdec1	equ	0xFE5
  6871                           fsr1l	equ	0xFE1
  6872                           indf2	equ	0xFDF
  6873                           postinc2	equ	0xFDE
  6874                           postdec2	equ	0xFDD
  6875                           fsr2h	equ	0xFDA
  6876                           fsr2l	equ	0xFD9
  6877                           status	equ	0xFD8
  6878                           
  6879 ;; *************** function ___lwmod *****************
  6880 ;; Defined at:
  6881 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwmod.c"
  6882 ;; Parameters:    Size  Location     Type
  6883 ;;  dividend        2    8[COMRAM] unsigned int 
  6884 ;;  divisor         2   10[COMRAM] unsigned int 
  6885 ;; Auto vars:     Size  Location     Type
  6886 ;;  counter         1   12[COMRAM] unsigned char 
  6887 ;; Return value:  Size  Location     Type
  6888 ;;                  2    8[COMRAM] unsigned int 
  6889 ;; Registers used:
  6890 ;;		wreg, status,2, status,0
  6891 ;; Tracked objects:
  6892 ;;		On entry : 0/0
  6893 ;;		On exit  : 0/0
  6894 ;;		Unchanged: 0/0
  6895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6896 ;;      Params:         4       0       0       0       0       0       0
  6897 ;;      Locals:         1       0       0       0       0       0       0
  6898 ;;      Temps:          0       0       0       0       0       0       0
  6899 ;;      Totals:         5       0       0       0       0       0       0
  6900 ;;Total ram usage:        5 bytes
  6901 ;; Hardware stack levels used:    1
  6902 ;; Hardware stack levels required when called:    2
  6903 ;; This function calls:
  6904 ;;		Nothing
  6905 ;; This function is called by:
  6906 ;;		_format_number
  6907 ;;		_print_reading
  6908 ;; This function uses a non-reentrant model
  6909 ;;
  6910                           
  6911                           	psect	text39
  6912  002208                     __ptext39:
  6913                           	opt stack 0
  6914  002208                     ___lwmod:
  6915                           	opt stack 0
  6916  002208  FFFF               	dw	65535	; assembler added errata NOP
  6917                           
  6918                           ;incstack = 0
  6919  00220A  500B               	movf	___lwmod@divisor,w,c
  6920  00220C  100C               	iorwf	___lwmod@divisor+1,w,c
  6921  00220E  E01A               	bz	l887
  6922  002210  0E01               	movlw	1
  6923  002212  6E0D               	movwf	___lwmod@counter,c
  6924  002214  D005               	goto	l3720
  6925  002216                     l3718:
  6926  002216  FFFF               	dw	65535	; assembler added errata NOP
  6927  002218  90D8               	bcf	status,0,c
  6928  00221A  360B               	rlcf	___lwmod@divisor,f,c
  6929  00221C  360C               	rlcf	___lwmod@divisor+1,f,c
  6930  00221E  2A0D               	incf	___lwmod@counter,f,c
  6931  002220                     l3720:
  6932  002220  FFFF               	dw	65535	; assembler added errata NOP
  6933  002222  AE0C               	btfss	___lwmod@divisor+1,7,c
  6934  002224  D7F8               	goto	l3718
  6935  002226                     u3590:
  6936  002226  FFFF               	dw	65535	; assembler added errata NOP
  6937  002228  500B               	movf	___lwmod@divisor,w,c
  6938  00222A  5C09               	subwf	___lwmod@dividend,w,c
  6939  00222C  500C               	movf	___lwmod@divisor+1,w,c
  6940  00222E  580A               	subwfb	___lwmod@dividend+1,w,c
  6941  002230  E304               	bnc	l3726
  6942  002232  500B               	movf	___lwmod@divisor,w,c
  6943  002234  5E09               	subwf	___lwmod@dividend,f,c
  6944  002236  500C               	movf	___lwmod@divisor+1,w,c
  6945  002238  5A0A               	subwfb	___lwmod@dividend+1,f,c
  6946  00223A                     l3726:
  6947  00223A  90D8               	bcf	status,0,c
  6948  00223C  320C               	rrcf	___lwmod@divisor+1,f,c
  6949  00223E  320B               	rrcf	___lwmod@divisor,f,c
  6950  002240  2E0D               	decfsz	___lwmod@counter,f,c
  6951  002242  D7F1               	goto	u3590
  6952  002244                     l887:
  6953  002244  C009  F009         	movff	___lwmod@dividend,?___lwmod
  6954  002248  C00A  F00A         	movff	___lwmod@dividend+1,?___lwmod+1
  6955  00224C  0012               	return		;funcret
  6956  00224E  FFFF               	dw	65535	; errata NOP
  6957  002250                     __end_of___lwmod:
  6958                           	opt stack 0
  6959                           tblptru	equ	0xFF8
  6960                           tblptrh	equ	0xFF7
  6961                           tblptrl	equ	0xFF6
  6962                           tablat	equ	0xFF5
  6963                           prodl	equ	0xFF3
  6964                           intcon	equ	0xFF2
  6965                           intcon2	equ	0xFF1
  6966                           postinc0	equ	0xFEE
  6967                           wreg	equ	0xFE8
  6968                           postdec1	equ	0xFE5
  6969                           fsr1l	equ	0xFE1
  6970                           indf2	equ	0xFDF
  6971                           postinc2	equ	0xFDE
  6972                           postdec2	equ	0xFDD
  6973                           fsr2h	equ	0xFDA
  6974                           fsr2l	equ	0xFD9
  6975                           status	equ	0xFD8
  6976                           
  6977 ;; *************** function ___lwdiv *****************
  6978 ;; Defined at:
  6979 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwdiv.c"
  6980 ;; Parameters:    Size  Location     Type
  6981 ;;  dividend        2    8[COMRAM] unsigned int 
  6982 ;;  divisor         2   10[COMRAM] unsigned int 
  6983 ;; Auto vars:     Size  Location     Type
  6984 ;;  quotient        2   13[COMRAM] unsigned int 
  6985 ;;  counter         1   12[COMRAM] unsigned char 
  6986 ;; Return value:  Size  Location     Type
  6987 ;;                  2    8[COMRAM] unsigned int 
  6988 ;; Registers used:
  6989 ;;		wreg, status,2, status,0
  6990 ;; Tracked objects:
  6991 ;;		On entry : 0/0
  6992 ;;		On exit  : 0/0
  6993 ;;		Unchanged: 0/0
  6994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6995 ;;      Params:         4       0       0       0       0       0       0
  6996 ;;      Locals:         3       0       0       0       0       0       0
  6997 ;;      Temps:          0       0       0       0       0       0       0
  6998 ;;      Totals:         7       0       0       0       0       0       0
  6999 ;;Total ram usage:        7 bytes
  7000 ;; Hardware stack levels used:    1
  7001 ;; Hardware stack levels required when called:    2
  7002 ;; This function calls:
  7003 ;;		Nothing
  7004 ;; This function is called by:
  7005 ;;		_format_number
  7006 ;;		_print_reading
  7007 ;; This function uses a non-reentrant model
  7008 ;;
  7009                           
  7010                           	psect	text40
  7011  002028                     __ptext40:
  7012                           	opt stack 0
  7013  002028                     ___lwdiv:
  7014                           	opt stack 0
  7015  002028  FFFF               	dw	65535	; assembler added errata NOP
  7016                           
  7017                           ;incstack = 0
  7018  00202A  6A0E               	clrf	___lwdiv@quotient,c
  7019  00202C  6A0F               	clrf	___lwdiv@quotient+1,c
  7020  00202E  500B               	movf	___lwdiv@divisor,w,c
  7021  002030  100C               	iorwf	___lwdiv@divisor+1,w,c
  7022  002032  E01E               	bz	l877
  7023  002034  0E01               	movlw	1
  7024  002036  6E0D               	movwf	___lwdiv@counter,c
  7025  002038  D005               	goto	l3700
  7026  00203A                     l3698:
  7027  00203A  FFFF               	dw	65535	; assembler added errata NOP
  7028  00203C  90D8               	bcf	status,0,c
  7029  00203E  360B               	rlcf	___lwdiv@divisor,f,c
  7030  002040  360C               	rlcf	___lwdiv@divisor+1,f,c
  7031  002042  2A0D               	incf	___lwdiv@counter,f,c
  7032  002044                     l3700:
  7033  002044  FFFF               	dw	65535	; assembler added errata NOP
  7034  002046  AE0C               	btfss	___lwdiv@divisor+1,7,c
  7035  002048  D7F8               	goto	l3698
  7036  00204A                     u3560:
  7037  00204A  FFFF               	dw	65535	; assembler added errata NOP
  7038  00204C  90D8               	bcf	status,0,c
  7039  00204E  360E               	rlcf	___lwdiv@quotient,f,c
  7040  002050  360F               	rlcf	___lwdiv@quotient+1,f,c
  7041  002052  500B               	movf	___lwdiv@divisor,w,c
  7042  002054  5C09               	subwf	___lwdiv@dividend,w,c
  7043  002056  500C               	movf	___lwdiv@divisor+1,w,c
  7044  002058  580A               	subwfb	___lwdiv@dividend+1,w,c
  7045  00205A  E305               	bnc	l3710
  7046  00205C  500B               	movf	___lwdiv@divisor,w,c
  7047  00205E  5E09               	subwf	___lwdiv@dividend,f,c
  7048  002060  500C               	movf	___lwdiv@divisor+1,w,c
  7049  002062  5A0A               	subwfb	___lwdiv@dividend+1,f,c
  7050  002064  800E               	bsf	___lwdiv@quotient,0,c
  7051  002066                     l3710:
  7052  002066  90D8               	bcf	status,0,c
  7053  002068  320C               	rrcf	___lwdiv@divisor+1,f,c
  7054  00206A  320B               	rrcf	___lwdiv@divisor,f,c
  7055  00206C  2E0D               	decfsz	___lwdiv@counter,f,c
  7056  00206E  D7ED               	goto	u3560
  7057  002070                     l877:
  7058  002070  C00E  F009         	movff	___lwdiv@quotient,?___lwdiv
  7059  002074  C00F  F00A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7060  002078  0012               	return		;funcret
  7061  00207A  FFFF               	dw	65535	; errata NOP
  7062  00207C                     __end_of___lwdiv:
  7063                           	opt stack 0
  7064                           tblptru	equ	0xFF8
  7065                           tblptrh	equ	0xFF7
  7066                           tblptrl	equ	0xFF6
  7067                           tablat	equ	0xFF5
  7068                           prodl	equ	0xFF3
  7069                           intcon	equ	0xFF2
  7070                           intcon2	equ	0xFF1
  7071                           postinc0	equ	0xFEE
  7072                           wreg	equ	0xFE8
  7073                           postdec1	equ	0xFE5
  7074                           fsr1l	equ	0xFE1
  7075                           indf2	equ	0xFDF
  7076                           postinc2	equ	0xFDE
  7077                           postdec2	equ	0xFDD
  7078                           fsr2h	equ	0xFDA
  7079                           fsr2l	equ	0xFD9
  7080                           status	equ	0xFD8
  7081                           
  7082 ;; *************** function _buffer_puts *****************
  7083 ;; Defined at:
  7084 ;;		line 56 in file "lib/buffer.c"
  7085 ;; Parameters:    Size  Location     Type
  7086 ;;  x               1   11[COMRAM] PTR const unsigned char 
  7087 ;;		 -> STR_8(6), 
  7088 ;; Auto vars:     Size  Location     Type
  7089 ;;		None
  7090 ;; Return value:  Size  Location     Type
  7091 ;;                  1    wreg      unsigned char 
  7092 ;; Registers used:
  7093 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7094 ;; Tracked objects:
  7095 ;;		On entry : 3F/0
  7096 ;;		On exit  : 3F/0
  7097 ;;		Unchanged: 0/0
  7098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7099 ;;      Params:         1       0       0       0       0       0       0
  7100 ;;      Locals:         0       0       0       0       0       0       0
  7101 ;;      Temps:          0       0       0       0       0       0       0
  7102 ;;      Totals:         1       0       0       0       0       0       0
  7103 ;;Total ram usage:        1 bytes
  7104 ;; Hardware stack levels used:    1
  7105 ;; Hardware stack levels required when called:    3
  7106 ;; This function calls:
  7107 ;;		_buffer_putch
  7108 ;; This function is called by:
  7109 ;;		_measure_freq
  7110 ;; This function uses a non-reentrant model
  7111 ;;
  7112                           
  7113                           	psect	text41
  7114  00244C                     __ptext41:
  7115                           	opt stack 0
  7116  00244C                     _buffer_puts:
  7117                           	opt stack 0
  7118  00244C  FFFF               	dw	65535	; assembler added errata NOP
  7119                           
  7120                           ; BSR set to: 0
  7121                           ;buffer.c: 57: while(*x) {
  7122                           
  7123                           ;incstack = 0
  7124  00244E  D008               	goto	l3794
  7125  002450                     l3790:
  7126                           
  7127                           ; BSR set to: 0
  7128                           ;buffer.c: 58: buffer_putch(*x);
  7129  002450  C00C  FFF6         	movff	buffer_puts@x,tblptrl
  7130  002454                     	if	0	;There is only one active tblptr byte
  7131  002454                     	endif
  7132  002454                     	if	0	;tblptru may be non-zero
  7133  002454                     	endif
  7134  002454                     	if	0	;tblptru may be non-zero
  7135  002454                     	endif
  7136  002454  0008               	tblrd		*
  7137  002456  FFFF               	dw	65535	; errata NOP
  7138  002458  50F5               	movf	tablat,w,c
  7139  00245A  ECB8  F010         	call	_buffer_putch
  7140                           
  7141                           ; BSR set to: 0
  7142                           ;buffer.c: 59: ++x;
  7143  00245E  2A0C               	incf	buffer_puts@x,f,c
  7144  002460                     l3794:
  7145  002460  FFFF               	dw	65535	; assembler added errata NOP
  7146                           
  7147                           ; BSR set to: 0
  7148  002462  C00C  FFF6         	movff	buffer_puts@x,tblptrl
  7149  002466                     	if	0	;There is only one active tblptr byte
  7150  002466                     	endif
  7151  002466                     	if	0	;tblptru may be non-zero
  7152  002466                     	endif
  7153  002466                     	if	0	;tblptru may be non-zero
  7154  002466                     	endif
  7155  002466  0008               	tblrd		*
  7156  002468  FFFF               	dw	65535	; errata NOP
  7157  00246A  50F5               	movf	tablat,w,c
  7158  00246C  E1F1               	bnz	l3790
  7159                           
  7160                           ; BSR set to: 0
  7161  00246E  0012               	return		;funcret
  7162  002470  FFFF               	dw	65535	; errata NOP
  7163  002472                     __end_of_buffer_puts:
  7164                           	opt stack 0
  7165                           tblptru	equ	0xFF8
  7166                           tblptrh	equ	0xFF7
  7167                           tblptrl	equ	0xFF6
  7168                           tablat	equ	0xFF5
  7169                           prodl	equ	0xFF3
  7170                           intcon	equ	0xFF2
  7171                           intcon2	equ	0xFF1
  7172                           postinc0	equ	0xFEE
  7173                           wreg	equ	0xFE8
  7174                           postdec1	equ	0xFE5
  7175                           fsr1l	equ	0xFE1
  7176                           indf2	equ	0xFDF
  7177                           postinc2	equ	0xFDE
  7178                           postdec2	equ	0xFDD
  7179                           fsr2h	equ	0xFDA
  7180                           fsr2l	equ	0xFD9
  7181                           status	equ	0xFD8
  7182                           
  7183 ;; *************** function _buffer_putch *****************
  7184 ;; Defined at:
  7185 ;;		line 30 in file "lib/buffer.c"
  7186 ;; Parameters:    Size  Location     Type
  7187 ;;  ch              1    wreg     unsigned char 
  7188 ;; Auto vars:     Size  Location     Type
  7189 ;;  ch              1   10[COMRAM] unsigned char 
  7190 ;; Return value:  Size  Location     Type
  7191 ;;                  1    wreg      unsigned char 
  7192 ;; Registers used:
  7193 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7194 ;; Tracked objects:
  7195 ;;		On entry : 0/0
  7196 ;;		On exit  : 3F/0
  7197 ;;		Unchanged: 0/0
  7198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7199 ;;      Params:         0       0       0       0       0       0       0
  7200 ;;      Locals:         1       0       0       0       0       0       0
  7201 ;;      Temps:          2       0       0       0       0       0       0
  7202 ;;      Totals:         3       0       0       0       0       0       0
  7203 ;;Total ram usage:        3 bytes
  7204 ;; Hardware stack levels used:    1
  7205 ;; Hardware stack levels required when called:    2
  7206 ;; This function calls:
  7207 ;;		Nothing
  7208 ;; This function is called by:
  7209 ;;		_buffer_puts
  7210 ;;		_format_number
  7211 ;;		_format_double
  7212 ;; This function uses a non-reentrant model
  7213 ;;
  7214                           
  7215                           	psect	text42
  7216  002170                     __ptext42:
  7217                           	opt stack 0
  7218  002170                     _buffer_putch:
  7219                           	opt stack 0
  7220  002170  FFFF               	dw	65535	; assembler added errata NOP
  7221                           
  7222                           ; BSR set to: 0
  7223                           ;incstack = 0
  7224                           ;buffer_putch@ch stored from wreg
  7225  002172  6E0B               	movwf	buffer_putch@ch,c
  7226                           
  7227                           ;buffer.c: 31: if(16 - buffer.n <= 0)
  7228  002174  0E10               	movlw	16
  7229  002176  6E09               	movwf	??_buffer_putch& (0+255),c
  7230  002178  6A0A               	clrf	(??_buffer_putch+1)& (0+255),c
  7231  00217A  0100               	movlb	0	; () banked
  7232  00217C  3990               	swapf	(_buffer+16)& (0+255),w,b
  7233  00217E  0B0F               	andlw	15
  7234  002180  5E09               	subwf	??_buffer_putch,f,c
  7235  002182  0E00               	movlw	0
  7236  002184  5A0A               	subwfb	??_buffer_putch+1,f,c
  7237  002186  BE0A               	btfsc	??_buffer_putch+1,7,c
  7238  002188  D017               	goto	l118
  7239  00218A  500A               	movf	??_buffer_putch+1,w,c
  7240  00218C  E102               	bnz	l3568
  7241  00218E  0409               	decf	??_buffer_putch,w,c
  7242  002190  E313               	bnc	l118
  7243  002192                     l3568:
  7244                           
  7245                           ; BSR set to: 0
  7246                           ;buffer.c: 33: buffer.x[buffer.n] = ch;
  7247  002192  3990               	swapf	(_buffer+16)& (0+255),w,b
  7248  002194  0B0F               	andlw	15
  7249  002196  6E09               	movwf	??_buffer_putch& (0+255),c
  7250  002198  5009               	movf	??_buffer_putch,w,c
  7251  00219A  0F80               	addlw	low _buffer
  7252  00219C  6ED9               	movwf	fsr2l,c
  7253  00219E  6ADA               	clrf	fsr2h,c
  7254  0021A0  C00B  FFDF         	movff	buffer_putch@ch,indf2
  7255                           
  7256                           ; BSR set to: 0
  7257                           ;buffer.c: 34: buffer.n++;
  7258  0021A4  3990               	swapf	(_buffer+16)& (0+255),w,b
  7259  0021A6  0B0F               	andlw	15
  7260  0021A8  6E09               	movwf	??_buffer_putch& (0+255),c
  7261  0021AA  2A09               	incf	??_buffer_putch,f,c
  7262  0021AC  3A09               	swapf	??_buffer_putch& (0+255),f,c
  7263  0021AE  5190               	movf	(_buffer+16)& (0+255),w,b
  7264  0021B0  1809               	xorwf	??_buffer_putch& (0+255),w,c
  7265  0021B2  0B0F               	andlw	-241
  7266  0021B4  1809               	xorwf	??_buffer_putch& (0+255),w,c
  7267  0021B6  6F90               	movwf	(_buffer+16)& (0+255),b
  7268  0021B8                     l118:
  7269  0021B8  FFFF               	dw	65535	; assembler added errata NOP
  7270                           
  7271                           ; BSR set to: 0
  7272  0021BA  0012               	return		;funcret
  7273  0021BC  FFFF               	dw	65535	; errata NOP
  7274  0021BE                     __end_of_buffer_putch:
  7275                           	opt stack 0
  7276                           tblptru	equ	0xFF8
  7277                           tblptrh	equ	0xFF7
  7278                           tblptrl	equ	0xFF6
  7279                           tablat	equ	0xFF5
  7280                           prodl	equ	0xFF3
  7281                           intcon	equ	0xFF2
  7282                           intcon2	equ	0xFF1
  7283                           postinc0	equ	0xFEE
  7284                           wreg	equ	0xFE8
  7285                           postdec1	equ	0xFE5
  7286                           fsr1l	equ	0xFE1
  7287                           indf2	equ	0xFDF
  7288                           postinc2	equ	0xFDE
  7289                           postdec2	equ	0xFDD
  7290                           fsr2h	equ	0xFDA
  7291                           fsr2l	equ	0xFD9
  7292                           status	equ	0xFD8
  7293                           
  7294 ;; *************** function _buffer_init *****************
  7295 ;; Defined at:
  7296 ;;		line 10 in file "lib/buffer.c"
  7297 ;; Parameters:    Size  Location     Type
  7298 ;;		None
  7299 ;; Auto vars:     Size  Location     Type
  7300 ;;		None
  7301 ;; Return value:  Size  Location     Type
  7302 ;;                  1    wreg      void 
  7303 ;; Registers used:
  7304 ;;		wreg, status,2
  7305 ;; Tracked objects:
  7306 ;;		On entry : 0/0
  7307 ;;		On exit  : 3F/0
  7308 ;;		Unchanged: 0/0
  7309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7310 ;;      Params:         0       0       0       0       0       0       0
  7311 ;;      Locals:         0       0       0       0       0       0       0
  7312 ;;      Temps:          0       0       0       0       0       0       0
  7313 ;;      Totals:         0       0       0       0       0       0       0
  7314 ;;Total ram usage:        0 bytes
  7315 ;; Hardware stack levels used:    1
  7316 ;; Hardware stack levels required when called:    2
  7317 ;; This function calls:
  7318 ;;		Nothing
  7319 ;; This function is called by:
  7320 ;;		_measure_freq
  7321 ;; This function uses a non-reentrant model
  7322 ;;
  7323                           
  7324                           	psect	text43
  7325  002504                     __ptext43:
  7326                           	opt stack 0
  7327  002504                     _buffer_init:
  7328                           	opt stack 0
  7329  002504  FFFF               	dw	65535	; assembler added errata NOP
  7330                           
  7331                           ;buffer.c: 11: buffer.p = 0;
  7332                           
  7333                           ; BSR set to: 0
  7334                           ;incstack = 0
  7335  002506  0EF0               	movlw	-16
  7336  002508  0100               	movlb	0	; () banked
  7337  00250A  1790               	andwf	(_buffer+16)& (0+255),f,b
  7338                           
  7339                           ;buffer.c: 12: buffer.n = 0;
  7340  00250C  0E0F               	movlw	-241
  7341  00250E  1790               	andwf	(_buffer+16)& (0+255),f,b
  7342                           
  7343                           ; BSR set to: 0
  7344  002510  0C0F               	retlw	15	;funcret
  7345  002512  FFFF               	dw	65535	; errata NOP
  7346  002514                     __end_of_buffer_init:
  7347                           	opt stack 0
  7348                           tblptru	equ	0xFF8
  7349                           tblptrh	equ	0xFF7
  7350                           tblptrl	equ	0xFF6
  7351                           tablat	equ	0xFF5
  7352                           prodl	equ	0xFF3
  7353                           intcon	equ	0xFF2
  7354                           intcon2	equ	0xFF1
  7355                           postinc0	equ	0xFEE
  7356                           wreg	equ	0xFE8
  7357                           postdec1	equ	0xFE5
  7358                           fsr1l	equ	0xFE1
  7359                           indf2	equ	0xFDF
  7360                           postinc2	equ	0xFDE
  7361                           postdec2	equ	0xFDD
  7362                           fsr2h	equ	0xFDA
  7363                           fsr2l	equ	0xFD9
  7364                           status	equ	0xFD8
  7365                           
  7366 ;; *************** function _lcd_clear *****************
  7367 ;; Defined at:
  7368 ;;		line 292 in file "lib/lcd44780.c"
  7369 ;; Parameters:    Size  Location     Type
  7370 ;;		None
  7371 ;; Auto vars:     Size  Location     Type
  7372 ;;		None
  7373 ;; Return value:  Size  Location     Type
  7374 ;;                  1    wreg      void 
  7375 ;; Registers used:
  7376 ;;		wreg, status,2, status,0, cstack
  7377 ;; Tracked objects:
  7378 ;;		On entry : 0/0
  7379 ;;		On exit  : 0/0
  7380 ;;		Unchanged: 0/0
  7381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7382 ;;      Params:         0       0       0       0       0       0       0
  7383 ;;      Locals:         0       0       0       0       0       0       0
  7384 ;;      Temps:          1       0       0       0       0       0       0
  7385 ;;      Totals:         1       0       0       0       0       0       0
  7386 ;;Total ram usage:        1 bytes
  7387 ;; Hardware stack levels used:    1
  7388 ;; Hardware stack levels required when called:    5
  7389 ;; This function calls:
  7390 ;;		_lcd_command
  7391 ;; This function is called by:
  7392 ;;		_main
  7393 ;;		_calibrate
  7394 ;; This function uses a non-reentrant model
  7395 ;;
  7396                           
  7397                           	psect	text44
  7398  0024D6                     __ptext44:
  7399                           	opt stack 0
  7400  0024D6                     _lcd_clear:
  7401                           	opt stack 0
  7402  0024D6  FFFF               	dw	65535	; assembler added errata NOP
  7403                           
  7404                           ;lcd44780.c: 293: lcd_command(0x01);
  7405                           
  7406                           ; BSR set to: 0
  7407                           ;incstack = 0
  7408  0024D8  0E01               	movlw	1
  7409  0024DA  EC8A  F012         	call	_lcd_command
  7410                           
  7411                           ;lcd44780.c: 294: _delay((unsigned long)((2)*(20000000/4000.0)));
  7412  0024DE  0E0A               	movlw	10
  7413  0024E0  6E0D               	movwf	??_lcd_clear& (0+255),c
  7414  0024E2  0EBE               	movlw	190
  7415  0024E4                     u4277:
  7416  0024E4  FFFF               	dw	65535	; errata NOP
  7417  0024E6  2EE8               	decfsz	wreg,f,c
  7418  0024E8  D7FD               	bra	u4277
  7419  0024EA  2E0D               	decfsz	??_lcd_clear& (0+255),f,c
  7420  0024EC  D7FB               	bra	u4277
  7421  0024EE  D000               	nop2	
  7422  0024F0  0012               	return		;funcret
  7423  0024F2  FFFF               	dw	65535	; errata NOP
  7424  0024F4                     __end_of_lcd_clear:
  7425                           	opt stack 0
  7426                           tblptru	equ	0xFF8
  7427                           tblptrh	equ	0xFF7
  7428                           tblptrl	equ	0xFF6
  7429                           tablat	equ	0xFF5
  7430                           prodl	equ	0xFF3
  7431                           intcon	equ	0xFF2
  7432                           intcon2	equ	0xFF1
  7433                           postinc0	equ	0xFEE
  7434                           wreg	equ	0xFE8
  7435                           postdec1	equ	0xFE5
  7436                           fsr1l	equ	0xFE1
  7437                           indf2	equ	0xFDF
  7438                           postinc2	equ	0xFDE
  7439                           postdec2	equ	0xFDD
  7440                           fsr2h	equ	0xFDA
  7441                           fsr2l	equ	0xFD9
  7442                           status	equ	0xFD8
  7443                           
  7444 ;; *************** function _lcd_command *****************
  7445 ;; Defined at:
  7446 ;;		line 127 in file "lib/lcd44780.c"
  7447 ;; Parameters:    Size  Location     Type
  7448 ;;  value           1    wreg     unsigned char 
  7449 ;; Auto vars:     Size  Location     Type
  7450 ;;  value           1   11[COMRAM] unsigned char 
  7451 ;; Return value:  Size  Location     Type
  7452 ;;                  1    wreg      void 
  7453 ;; Registers used:
  7454 ;;		wreg, status,2, status,0, cstack
  7455 ;; Tracked objects:
  7456 ;;		On entry : 0/0
  7457 ;;		On exit  : 0/0
  7458 ;;		Unchanged: 0/0
  7459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7460 ;;      Params:         0       0       0       0       0       0       0
  7461 ;;      Locals:         1       0       0       0       0       0       0
  7462 ;;      Temps:          0       0       0       0       0       0       0
  7463 ;;      Totals:         1       0       0       0       0       0       0
  7464 ;;Total ram usage:        1 bytes
  7465 ;; Hardware stack levels used:    1
  7466 ;; Hardware stack levels required when called:    4
  7467 ;; This function calls:
  7468 ;;		_lcd_send
  7469 ;; This function is called by:
  7470 ;;		_lcd_gotoxy
  7471 ;;		_lcd_clear
  7472 ;;		_lcd_begin
  7473 ;; This function uses a non-reentrant model
  7474 ;;
  7475                           
  7476                           	psect	text45
  7477  002514                     __ptext45:
  7478                           	opt stack 0
  7479  002514                     _lcd_command:
  7480                           	opt stack 0
  7481  002514  FFFF               	dw	65535	; assembler added errata NOP
  7482                           
  7483                           ;incstack = 0
  7484                           ;lcd_command@value stored from wreg
  7485  002516  6E0C               	movwf	lcd_command@value,c
  7486                           
  7487                           ;lcd44780.c: 128: lcd_send(value, 0);
  7488  002518  0E00               	movlw	0
  7489  00251A  6E0A               	movwf	lcd_send@mode,c
  7490  00251C  500C               	movf	lcd_command@value,w,c
  7491  00251E  EF4C  F012         	goto	_lcd_send
  7492  002522  FFFF               	dw	65535	; errata NOP
  7493  002524                     __end_of_lcd_command:
  7494                           	opt stack 0
  7495                           tblptru	equ	0xFF8
  7496                           tblptrh	equ	0xFF7
  7497                           tblptrl	equ	0xFF6
  7498                           tablat	equ	0xFF5
  7499                           prodl	equ	0xFF3
  7500                           intcon	equ	0xFF2
  7501                           intcon2	equ	0xFF1
  7502                           postinc0	equ	0xFEE
  7503                           wreg	equ	0xFE8
  7504                           postdec1	equ	0xFE5
  7505                           fsr1l	equ	0xFE1
  7506                           indf2	equ	0xFDF
  7507                           postinc2	equ	0xFDE
  7508                           postdec2	equ	0xFDD
  7509                           fsr2h	equ	0xFDA
  7510                           fsr2l	equ	0xFD9
  7511                           status	equ	0xFD8
  7512                           
  7513 ;; *************** function _lcd_send *****************
  7514 ;; Defined at:
  7515 ;;		line 103 in file "lib/lcd44780.c"
  7516 ;; Parameters:    Size  Location     Type
  7517 ;;  value           1    wreg     unsigned char 
  7518 ;;  mode            1    9[COMRAM] unsigned char 
  7519 ;; Auto vars:     Size  Location     Type
  7520 ;;  value           1   10[COMRAM] unsigned char 
  7521 ;; Return value:  Size  Location     Type
  7522 ;;                  1    wreg      void 
  7523 ;; Registers used:
  7524 ;;		wreg, status,2, status,0, cstack
  7525 ;; Tracked objects:
  7526 ;;		On entry : 0/0
  7527 ;;		On exit  : 0/0
  7528 ;;		Unchanged: 0/0
  7529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7530 ;;      Params:         1       0       0       0       0       0       0
  7531 ;;      Locals:         1       0       0       0       0       0       0
  7532 ;;      Temps:          0       0       0       0       0       0       0
  7533 ;;      Totals:         2       0       0       0       0       0       0
  7534 ;;Total ram usage:        2 bytes
  7535 ;; Hardware stack levels used:    1
  7536 ;; Hardware stack levels required when called:    3
  7537 ;; This function calls:
  7538 ;;		_lcd_write4bits
  7539 ;; This function is called by:
  7540 ;;		_lcd_command
  7541 ;;		_lcd_putch
  7542 ;; This function uses a non-reentrant model
  7543 ;;
  7544                           
  7545                           	psect	text46
  7546  002498                     __ptext46:
  7547                           	opt stack 0
  7548  002498                     _lcd_send:
  7549                           	opt stack 0
  7550  002498  FFFF               	dw	65535	; assembler added errata NOP
  7551                           
  7552                           ;incstack = 0
  7553                           ;lcd_send@value stored from wreg
  7554  00249A  6E0B               	movwf	lcd_send@value,c
  7555                           
  7556                           ;lcd44780.c: 104: if(mode) {
  7557  00249C  500A               	movf	lcd_send@mode,w,c
  7558  00249E  E002               	bz	l3352
  7559                           
  7560                           ;lcd44780.c: 105: LATB |= 0b0100;
  7561  0024A0  848A               	bsf	3978,2,c	;volatile
  7562                           
  7563                           ;lcd44780.c: 106: } else {
  7564  0024A2  D001               	goto	l3354
  7565  0024A4                     l3352:
  7566                           
  7567                           ;lcd44780.c: 107: LATB &= ~0b0100;
  7568  0024A4  948A               	bcf	3978,2,c	;volatile
  7569  0024A6                     l3354:
  7570  0024A6  FFFF               	dw	65535	; assembler added errata NOP
  7571                           
  7572                           ;lcd44780.c: 108: }
  7573                           ;lcd44780.c: 115: {
  7574                           ;lcd44780.c: 116: lcd_write4bits(value >> 4);
  7575  0024A8  380B               	swapf	lcd_send@value,w,c
  7576  0024AA  0B0F               	andlw	15
  7577  0024AC  EC39  F012         	call	_lcd_write4bits
  7578                           
  7579                           ;lcd44780.c: 117: lcd_write4bits(value);
  7580  0024B0  500B               	movf	lcd_send@value,w,c
  7581  0024B2  EF39  F012         	goto	_lcd_write4bits
  7582  0024B6  FFFF               	dw	65535	; errata NOP
  7583  0024B8                     __end_of_lcd_send:
  7584                           	opt stack 0
  7585                           tblptru	equ	0xFF8
  7586                           tblptrh	equ	0xFF7
  7587                           tblptrl	equ	0xFF6
  7588                           tablat	equ	0xFF5
  7589                           prodl	equ	0xFF3
  7590                           intcon	equ	0xFF2
  7591                           intcon2	equ	0xFF1
  7592                           postinc0	equ	0xFEE
  7593                           wreg	equ	0xFE8
  7594                           postdec1	equ	0xFE5
  7595                           fsr1l	equ	0xFE1
  7596                           indf2	equ	0xFDF
  7597                           postinc2	equ	0xFDE
  7598                           postdec2	equ	0xFDD
  7599                           fsr2h	equ	0xFDA
  7600                           fsr2l	equ	0xFD9
  7601                           status	equ	0xFD8
  7602                           
  7603 ;; *************** function _lcd_write4bits *****************
  7604 ;; Defined at:
  7605 ;;		line 34 in file "lib/lcd44780.c"
  7606 ;; Parameters:    Size  Location     Type
  7607 ;;  value           1    wreg     unsigned char 
  7608 ;; Auto vars:     Size  Location     Type
  7609 ;;  value           1    8[COMRAM] unsigned char 
  7610 ;; Return value:  Size  Location     Type
  7611 ;;                  1    wreg      void 
  7612 ;; Registers used:
  7613 ;;		wreg, status,2, status,0
  7614 ;; Tracked objects:
  7615 ;;		On entry : 0/0
  7616 ;;		On exit  : 0/0
  7617 ;;		Unchanged: 0/0
  7618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7619 ;;      Params:         0       0       0       0       0       0       0
  7620 ;;      Locals:         1       0       0       0       0       0       0
  7621 ;;      Temps:          0       0       0       0       0       0       0
  7622 ;;      Totals:         1       0       0       0       0       0       0
  7623 ;;Total ram usage:        1 bytes
  7624 ;; Hardware stack levels used:    1
  7625 ;; Hardware stack levels required when called:    2
  7626 ;; This function calls:
  7627 ;;		Nothing
  7628 ;; This function is called by:
  7629 ;;		_lcd_send
  7630 ;;		_lcd_begin
  7631 ;; This function uses a non-reentrant model
  7632 ;;
  7633                           
  7634                           	psect	text47
  7635  002472                     __ptext47:
  7636                           	opt stack 0
  7637  002472                     _lcd_write4bits:
  7638                           	opt stack 0
  7639  002472  FFFF               	dw	65535	; assembler added errata NOP
  7640                           
  7641                           ;incstack = 0
  7642                           ;lcd_write4bits@value stored from wreg
  7643  002474  6E09               	movwf	lcd_write4bits@value,c
  7644                           
  7645                           ;lcd44780.c: 39: LATB &= 0b00001111;
  7646  002476  0E0F               	movlw	15
  7647  002478  168A               	andwf	3978,f,c	;volatile
  7648                           
  7649                           ;lcd44780.c: 40: LATB |= value << 4;
  7650  00247A  3809               	swapf	lcd_write4bits@value,w,c
  7651  00247C  0BF0               	andlw	240
  7652  00247E  128A               	iorwf	3978,f,c	;volatile
  7653                           
  7654                           ;lcd44780.c: 55: LATB |= 0b1000; _delay((unsigned long)((4)*(20000000/4000000.0))); LATB
      +                           &= ~0b1000; _delay((unsigned long)((100)*(20000000/4000000.0)));;
  7655  002480  868A               	bsf	3978,3,c	;volatile
  7656  002482  0E05               	movlw	5
  7657  002484                     u4287:
  7658  002484  FFFF               	dw	65535	; errata NOP
  7659  002486  2EE8               	decfsz	wreg,f,c
  7660  002488  D7FD               	bra	u4287
  7661  00248A  968A               	bcf	3978,3,c	;volatile
  7662  00248C  0E7D               	movlw	125
  7663  00248E                     u4297:
  7664  00248E  FFFF               	dw	65535	; errata NOP
  7665  002490  2EE8               	decfsz	wreg,f,c
  7666  002492  D7FD               	bra	u4297
  7667  002494  0012               	return		;funcret
  7668  002496  FFFF               	dw	65535	; errata NOP
  7669  002498                     __end_of_lcd_write4bits:
  7670                           	opt stack 0
  7671                           tblptru	equ	0xFF8
  7672                           tblptrh	equ	0xFF7
  7673                           tblptrl	equ	0xFF6
  7674                           tablat	equ	0xFF5
  7675                           prodl	equ	0xFF3
  7676                           intcon	equ	0xFF2
  7677                           intcon2	equ	0xFF1
  7678                           postinc0	equ	0xFEE
  7679                           wreg	equ	0xFE8
  7680                           postdec1	equ	0xFE5
  7681                           fsr1l	equ	0xFE1
  7682                           indf2	equ	0xFDF
  7683                           postinc2	equ	0xFDE
  7684                           postdec2	equ	0xFDD
  7685                           fsr2h	equ	0xFDA
  7686                           fsr2l	equ	0xFD9
  7687                           status	equ	0xFD8
  7688                           
  7689 ;; *************** function _delay10ms *****************
  7690 ;; Defined at:
  7691 ;;		line 64 in file "LC-meter.c"
  7692 ;; Parameters:    Size  Location     Type
  7693 ;;  period_10ms     1    wreg     unsigned char 
  7694 ;; Auto vars:     Size  Location     Type
  7695 ;;  period_10ms     1    0[COMRAM] unsigned char 
  7696 ;; Return value:  Size  Location     Type
  7697 ;;                  1    wreg      void 
  7698 ;; Registers used:
  7699 ;;		wreg
  7700 ;; Tracked objects:
  7701 ;;		On entry : 0/0
  7702 ;;		On exit  : 0/0
  7703 ;;		Unchanged: 0/0
  7704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7705 ;;      Params:         0       0       0       0       0       0       0
  7706 ;;      Locals:         0       0       0       0       0       0       0
  7707 ;;      Temps:          0       0       0       0       0       0       0
  7708 ;;      Totals:         0       0       0       0       0       0       0
  7709 ;;Total ram usage:        0 bytes
  7710 ;; Hardware stack levels used:    1
  7711 ;; Hardware stack levels required when called:    2
  7712 ;; This function calls:
  7713 ;;		Nothing
  7714 ;; This function is called by:
  7715 ;;		_main
  7716 ;;		_calibrate
  7717 ;; This function uses a non-reentrant model
  7718 ;;
  7719                           
  7720                           	psect	text48
  7721  002536                     __ptext48:
  7722                           	opt stack 0
  7723  002536                     _delay10ms:
  7724                           	opt stack 0
  7725  002536  FFFF               	dw	65535	; assembler added errata NOP
  7726                           
  7727                           ;incstack = 0
  7728  002538  0012               	return		;funcret
  7729  00253A  FFFF               	dw	65535	; errata NOP
  7730  00253C                     __end_of_delay10ms:
  7731                           	opt stack 0
  7732                           tblptru	equ	0xFF8
  7733                           tblptrh	equ	0xFF7
  7734                           tblptrl	equ	0xFF6
  7735                           tablat	equ	0xFF5
  7736                           prodl	equ	0xFF3
  7737                           intcon	equ	0xFF2
  7738                           intcon2	equ	0xFF1
  7739                           postinc0	equ	0xFEE
  7740                           wreg	equ	0xFE8
  7741                           postdec1	equ	0xFE5
  7742                           fsr1l	equ	0xFE1
  7743                           indf2	equ	0xFDF
  7744                           postinc2	equ	0xFDE
  7745                           postdec2	equ	0xFDD
  7746                           fsr2h	equ	0xFDA
  7747                           fsr2l	equ	0xFD9
  7748                           status	equ	0xFD8
  7749                           
  7750 ;; *************** function ___lwtoft *****************
  7751 ;; Defined at:
  7752 ;;		line 28 in file "/opt/microchip/xc8/v1.45/sources/common/lwtoft.c"
  7753 ;; Parameters:    Size  Location     Type
  7754 ;;  c               2   63[COMRAM] unsigned int 
  7755 ;; Auto vars:     Size  Location     Type
  7756 ;;		None
  7757 ;; Return value:  Size  Location     Type
  7758 ;;                  3   63[COMRAM] float 
  7759 ;; Registers used:
  7760 ;;		wreg, status,2, status,0, cstack
  7761 ;; Tracked objects:
  7762 ;;		On entry : 0/0
  7763 ;;		On exit  : 0/0
  7764 ;;		Unchanged: 0/0
  7765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7766 ;;      Params:         3       0       0       0       0       0       0
  7767 ;;      Locals:         0       0       0       0       0       0       0
  7768 ;;      Temps:          0       0       0       0       0       0       0
  7769 ;;      Totals:         3       0       0       0       0       0       0
  7770 ;;Total ram usage:        3 bytes
  7771 ;; Hardware stack levels used:    1
  7772 ;; Hardware stack levels required when called:    3
  7773 ;; This function calls:
  7774 ;;		___ftpack
  7775 ;; This function is called by:
  7776 ;;		_calibrate
  7777 ;;		_measure_capacitance
  7778 ;;		_measure_inductance
  7779 ;; This function uses a non-reentrant model
  7780 ;;
  7781                           
  7782                           	psect	text49
  7783  0023FE                     __ptext49:
  7784                           	opt stack 0
  7785  0023FE                     ___lwtoft:
  7786                           	opt stack 0
  7787  0023FE  FFFF               	dw	65535	; assembler added errata NOP
  7788                           
  7789                           ;incstack = 0
  7790  002400  C040  F009         	movff	___lwtoft@c,___ftpack@arg
  7791  002404  C041  F00A         	movff	___lwtoft@c+1,___ftpack@arg+1
  7792  002408  6A0B               	clrf	___ftpack@arg+2,c
  7793  00240A  0E8E               	movlw	142
  7794  00240C  6E0C               	movwf	___ftpack@exp,c
  7795  00240E  0E00               	movlw	0
  7796  002410  6E0D               	movwf	___ftpack@sign,c
  7797  002412  ECBE  F00E         	call	___ftpack	;wreg free
  7798  002416  C009  F040         	movff	?___ftpack,?___lwtoft
  7799  00241A  C00A  F041         	movff	?___ftpack+1,?___lwtoft+1
  7800  00241E  C00B  F042         	movff	?___ftpack+2,?___lwtoft+2
  7801  002422  0012               	return		;funcret
  7802  002424  FFFF               	dw	65535	; errata NOP
  7803  002426                     __end_of___lwtoft:
  7804                           	opt stack 0
  7805                           tblptru	equ	0xFF8
  7806                           tblptrh	equ	0xFF7
  7807                           tblptrl	equ	0xFF6
  7808                           tablat	equ	0xFF5
  7809                           prodl	equ	0xFF3
  7810                           intcon	equ	0xFF2
  7811                           intcon2	equ	0xFF1
  7812                           postinc0	equ	0xFEE
  7813                           wreg	equ	0xFE8
  7814                           postdec1	equ	0xFE5
  7815                           fsr1l	equ	0xFE1
  7816                           indf2	equ	0xFDF
  7817                           postinc2	equ	0xFDE
  7818                           postdec2	equ	0xFDD
  7819                           fsr2h	equ	0xFDA
  7820                           fsr2l	equ	0xFD9
  7821                           status	equ	0xFD8
  7822                           
  7823 ;; *************** function ___ftpack *****************
  7824 ;; Defined at:
  7825 ;;		line 62 in file "/opt/microchip/xc8/v1.45/sources/common/float.c"
  7826 ;; Parameters:    Size  Location     Type
  7827 ;;  arg             3    8[COMRAM] unsigned um
  7828 ;;  exp             1   11[COMRAM] unsigned char 
  7829 ;;  sign            1   12[COMRAM] unsigned char 
  7830 ;; Auto vars:     Size  Location     Type
  7831 ;;		None
  7832 ;; Return value:  Size  Location     Type
  7833 ;;                  3    8[COMRAM] float 
  7834 ;; Registers used:
  7835 ;;		wreg, status,2, status,0
  7836 ;; Tracked objects:
  7837 ;;		On entry : 0/0
  7838 ;;		On exit  : 0/0
  7839 ;;		Unchanged: 0/0
  7840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7841 ;;      Params:         5       0       0       0       0       0       0
  7842 ;;      Locals:         0       0       0       0       0       0       0
  7843 ;;      Temps:          3       0       0       0       0       0       0
  7844 ;;      Totals:         8       0       0       0       0       0       0
  7845 ;;Total ram usage:        8 bytes
  7846 ;; Hardware stack levels used:    1
  7847 ;; Hardware stack levels required when called:    2
  7848 ;; This function calls:
  7849 ;;		Nothing
  7850 ;; This function is called by:
  7851 ;;		___altoft
  7852 ;;		___awtoft
  7853 ;;		___ftadd
  7854 ;;		___ftdiv
  7855 ;;		___ftmul
  7856 ;;		___lltoft
  7857 ;;		___lwtoft
  7858 ;; This function uses a non-reentrant model
  7859 ;;
  7860                           
  7861                           	psect	text50
  7862  001D7C                     __ptext50:
  7863                           	opt stack 0
  7864  001D7C                     ___ftpack:
  7865                           	opt stack 0
  7866  001D7C  FFFF               	dw	65535	; assembler added errata NOP
  7867                           
  7868                           ;incstack = 0
  7869  001D7E  500C               	movf	___ftpack@exp,w,c
  7870  001D80  E004               	bz	u2860
  7871  001D82  5009               	movf	___ftpack@arg,w,c
  7872  001D84  100A               	iorwf	___ftpack@arg+1,w,c
  7873  001D86  100B               	iorwf	___ftpack@arg+2,w,c
  7874  001D88  E10A               	bnz	l3320
  7875  001D8A                     u2860:
  7876  001D8A  6A09               	clrf	?___ftpack,c
  7877  001D8C  6A0A               	clrf	?___ftpack+1,c
  7878  001D8E  6A0B               	clrf	?___ftpack+2,c
  7879  001D90  D03E               	goto	l647
  7880  001D92                     l3318:
  7881  001D92  FFFF               	dw	65535	; assembler added errata NOP
  7882  001D94  2A0C               	incf	___ftpack@exp,f,c
  7883  001D96  90D8               	bcf	status,0,c
  7884  001D98  320B               	rrcf	___ftpack@arg+2,f,c
  7885  001D9A  320A               	rrcf	___ftpack@arg+1,f,c
  7886  001D9C  3209               	rrcf	___ftpack@arg,f,c
  7887  001D9E                     l3320:
  7888  001D9E  6A0E               	clrf	??___ftpack& (0+255),c
  7889  001DA0  6A0F               	clrf	(??___ftpack+1)& (0+255),c
  7890  001DA2  0EFE               	movlw	254
  7891  001DA4  140B               	andwf	___ftpack@arg+2,w,c
  7892  001DA6  6E10               	movwf	(??___ftpack+2)& (0+255),c
  7893  001DA8  500E               	movf	??___ftpack,w,c
  7894  001DAA  100F               	iorwf	??___ftpack+1,w,c
  7895  001DAC  1010               	iorwf	??___ftpack+2,w,c
  7896  001DAE  E00B               	bz	l3326
  7897  001DB0  D7F0               	goto	l3318
  7898  001DB2                     l3322:
  7899  001DB2  FFFF               	dw	65535	; assembler added errata NOP
  7900  001DB4  2A0C               	incf	___ftpack@exp,f,c
  7901  001DB6  2A09               	incf	___ftpack@arg,f,c
  7902  001DB8  0E00               	movlw	0
  7903  001DBA  220A               	addwfc	___ftpack@arg+1,f,c
  7904  001DBC  220B               	addwfc	___ftpack@arg+2,f,c
  7905  001DBE  90D8               	bcf	status,0,c
  7906  001DC0  320B               	rrcf	___ftpack@arg+2,f,c
  7907  001DC2  320A               	rrcf	___ftpack@arg+1,f,c
  7908  001DC4  3209               	rrcf	___ftpack@arg,f,c
  7909  001DC6                     l3326:
  7910  001DC6  6A0E               	clrf	??___ftpack& (0+255),c
  7911  001DC8  6A0F               	clrf	(??___ftpack+1)& (0+255),c
  7912  001DCA  500B               	movf	___ftpack@arg+2,w,c
  7913  001DCC  6E10               	movwf	(??___ftpack+2)& (0+255),c
  7914  001DCE  500E               	movf	??___ftpack,w,c
  7915  001DD0  100F               	iorwf	??___ftpack+1,w,c
  7916  001DD2  1010               	iorwf	??___ftpack+2,w,c
  7917  001DD4  E007               	bz	l3330
  7918  001DD6  D7ED               	goto	l3322
  7919  001DD8                     l3328:
  7920  001DD8  FFFF               	dw	65535	; assembler added errata NOP
  7921  001DDA  060C               	decf	___ftpack@exp,f,c
  7922  001DDC  90D8               	bcf	status,0,c
  7923  001DDE  3609               	rlcf	___ftpack@arg,f,c
  7924  001DE0  360A               	rlcf	___ftpack@arg+1,f,c
  7925  001DE2  360B               	rlcf	___ftpack@arg+2,f,c
  7926  001DE4                     l3330:
  7927  001DE4  BE0A               	btfsc	___ftpack@arg+1,7,c
  7928  001DE6  D003               	goto	u2900
  7929  001DE8  0E02               	movlw	2
  7930  001DEA  600C               	cpfslt	___ftpack@exp,c
  7931  001DEC  D7F5               	goto	l3328
  7932  001DEE                     u2900:
  7933  001DEE  FFFF               	dw	65535	; assembler added errata NOP
  7934  001DF0  A00C               	btfss	___ftpack@exp,0,c
  7935  001DF2  9E0A               	bcf	___ftpack@arg+1,7,c
  7936  001DF4  90D8               	bcf	status,0,c
  7937  001DF6  320C               	rrcf	___ftpack@exp,f,c
  7938  001DF8  500C               	movf	___ftpack@exp,w,c
  7939  001DFA  120B               	iorwf	___ftpack@arg+2,f,c
  7940  001DFC  500D               	movf	___ftpack@sign,w,c
  7941  001DFE  E001               	bz	l3344
  7942  001E00  8E0B               	bsf	___ftpack@arg+2,7,c
  7943  001E02                     l3344:
  7944  001E02  C009  F009         	movff	___ftpack@arg,?___ftpack
  7945  001E06  C00A  F00A         	movff	___ftpack@arg+1,?___ftpack+1
  7946  001E0A  C00B  F00B         	movff	___ftpack@arg+2,?___ftpack+2
  7947  001E0E                     l647:
  7948  001E0E  FFFF               	dw	65535	; assembler added errata NOP
  7949  001E10  0012               	return		;funcret
  7950  001E12  FFFF               	dw	65535	; errata NOP
  7951  001E14                     __end_of___ftpack:
  7952                           	opt stack 0
  7953                           tblptru	equ	0xFF8
  7954                           tblptrh	equ	0xFF7
  7955                           tblptrl	equ	0xFF6
  7956                           tablat	equ	0xFF5
  7957                           prodl	equ	0xFF3
  7958                           intcon	equ	0xFF2
  7959                           intcon2	equ	0xFF1
  7960                           postinc0	equ	0xFEE
  7961                           wreg	equ	0xFE8
  7962                           postdec1	equ	0xFE5
  7963                           fsr1l	equ	0xFE1
  7964                           indf2	equ	0xFDF
  7965                           postinc2	equ	0xFDE
  7966                           postdec2	equ	0xFDD
  7967                           fsr2h	equ	0xFDA
  7968                           fsr2l	equ	0xFD9
  7969                           status	equ	0xFD8
  7970                           
  7971 ;; *************** function _isr *****************
  7972 ;; Defined at:
  7973 ;;		line 84 in file "LC-meter.c"
  7974 ;; Parameters:    Size  Location     Type
  7975 ;;		None
  7976 ;; Auto vars:     Size  Location     Type
  7977 ;;		None
  7978 ;; Return value:  Size  Location     Type
  7979 ;;                  2   79[None  ] int 
  7980 ;; Registers used:
  7981 ;;		wreg, status,2, status,0, cstack
  7982 ;; Tracked objects:
  7983 ;;		On entry : 0/0
  7984 ;;		On exit  : 0/0
  7985 ;;		Unchanged: 0/0
  7986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7987 ;;      Params:         0       0       0       0       0       0       0
  7988 ;;      Locals:         0       0       0       0       0       0       0
  7989 ;;      Temps:          1       0       0       0       0       0       0
  7990 ;;      Totals:         1       0       0       0       0       0       0
  7991 ;;Total ram usage:        1 bytes
  7992 ;; Hardware stack levels used:    1
  7993 ;; Hardware stack levels required when called:    1
  7994 ;; This function calls:
  7995 ;;		i2___lwdiv
  7996 ;; This function is called by:
  7997 ;;		Interrupt level 2
  7998 ;; This function uses a non-reentrant model
  7999 ;;
  8000                           
  8001                           	psect	intcode
  8002  000008                     __pintcode:
  8003                           	opt stack 0
  8004  000008                     _isr:
  8005                           	opt stack 0
  8006  000008  FFFF               	dw	65535	; assembler added errata NOP
  8007                           
  8008                           ;incstack = 0
  8009  00000A  8273               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8010                           
  8011                           ;LC-meter.c: 85: if(PIR1bits.TMR2IF) {
  8012  00000C  A29E               	btfss	3998,1,c	;volatile
  8013  00000E  D042               	goto	i2l83
  8014                           
  8015                           ;LC-meter.c: 86: bres += 256;
  8016  000010  0E00               	movlw	0
  8017  000012  0100               	movlb	0	; () banked
  8018  000014  27CF               	addwf	_bres& (0+255),f,b	;volatile
  8019  000016  2BD0               	incf	(_bres+1)& (0+255),f,b	;volatile
  8020  000018  23D1               	addwfc	(_bres+2)& (0+255),f,b	;volatile
  8021  00001A  23D2               	addwfc	(_bres+3)& (0+255),f,b	;volatile
  8022                           
  8023                           ;LC-meter.c: 87: if(bres >= ((unsigned long)((double)((20000000) / 4) / 1000))) {
  8024  00001C  51D2               	movf	(_bres+3)& (0+255),w,b	;volatile
  8025  00001E  11D1               	iorwf	(_bres+2)& (0+255),w,b	;volatile
  8026  000020  E105               	bnz	i2u276_40
  8027  000022  0E88               	movlw	136
  8028  000024  5DCF               	subwf	_bres& (0+255),w,b	;volatile
  8029  000026  0E13               	movlw	19
  8030  000028  59D0               	subwfb	(_bres+1)& (0+255),w,b	;volatile
  8031  00002A  E333               	bnc	i2l3214
  8032  00002C                     i2u276_40:
  8033                           
  8034                           ; BSR set to: 0
  8035                           ;LC-meter.c: 88: bres -= ((unsigned long)((double)((20000000) / 4) / 1000));
  8036  00002C  0E88               	movlw	136
  8037  00002E  5FCF               	subwf	_bres& (0+255),f,b	;volatile
  8038  000030  0E13               	movlw	19
  8039  000032  5BD0               	subwfb	(_bres+1)& (0+255),f,b	;volatile
  8040  000034  0E00               	movlw	0
  8041  000036  5BD1               	subwfb	(_bres+2)& (0+255),f,b	;volatile
  8042  000038  5BD2               	subwfb	(_bres+3)& (0+255),f,b	;volatile
  8043                           
  8044                           ; BSR set to: 0
  8045                           ;LC-meter.c: 89: msecpart++;
  8046  00003A  4BA4               	infsnz	_msecpart& (0+255),f,b	;volatile
  8047  00003C  2BA5               	incf	(_msecpart+1)& (0+255),f,b	;volatile
  8048                           
  8049                           ; BSR set to: 0
  8050                           ;LC-meter.c: 90: led_cycle++;
  8051  00003E  4BA2               	infsnz	_led_cycle& (0+255),f,b	;volatile
  8052  000040  2BA3               	incf	(_led_cycle+1)& (0+255),f,b	;volatile
  8053                           
  8054                           ; BSR set to: 0
  8055                           ;LC-meter.c: 92: LATC &= ~(1 << 2); LATC |= (!!(led_cycle >= 0 && led_cycle < led_interv
      +                          al/6)) << 2;;
  8056  000042  948B               	bcf	3979,2,c	;volatile
  8057                           
  8058                           ; BSR set to: 0
  8059  000044  C0D6  F001         	movff	_led_interval,i2___lwdiv@dividend	;volatile
  8060  000048  C0D7  F002         	movff	_led_interval+1,i2___lwdiv@dividend+1	;volatile
  8061  00004C  6A04               	clrf	i2___lwdiv@divisor+1,c
  8062  00004E  0E06               	movlw	6
  8063  000050  6E03               	movwf	i2___lwdiv@divisor,c
  8064  000052  EC3E  F010         	call	i2___lwdiv	;wreg free
  8065  000056  5001               	movf	?i2___lwdiv,w,c
  8066  000058  5DA2               	subwf	_led_cycle& (0+255),w,b	;volatile
  8067  00005A  5002               	movf	?i2___lwdiv+1,w,c
  8068  00005C  59A3               	subwfb	(_led_cycle+1)& (0+255),w,b	;volatile
  8069  00005E  E203               	bc	i2u277_40
  8070  000060  6A08               	clrf	??_isr& (0+255),c
  8071  000062  2A08               	incf	??_isr& (0+255),f,c
  8072  000064  D001               	goto	i2u278_48
  8073  000066                     i2u277_40:
  8074  000066  6A08               	clrf	??_isr& (0+255),c
  8075  000068                     i2u278_48:
  8076  000068  FFFF               	dw	65535	; assembler added errata NOP
  8077  00006A  90D8               	bcf	status,0,c
  8078  00006C  3608               	rlcf	??_isr,f,c
  8079  00006E  90D8               	bcf	status,0,c
  8080  000070  3408               	rlcf	??_isr,w,c
  8081  000072  128B               	iorwf	3979,f,c	;volatile
  8082                           
  8083                           ;LC-meter.c: 96: if(msecpart >= 1000) {
  8084  000074  0EE8               	movlw	232
  8085  000076  0100               	movlb	0	; () banked
  8086  000078  5DA4               	subwf	_msecpart& (0+255),w,b	;volatile
  8087  00007A  0E03               	movlw	3
  8088  00007C  59A5               	subwfb	(_msecpart+1)& (0+255),w,b	;volatile
  8089  00007E  E309               	bnc	i2l3214
  8090                           
  8091                           ; BSR set to: 0
  8092                           ;LC-meter.c: 98: seconds++;
  8093  000080  2B99               	incf	_seconds& (0+255),f,b	;volatile
  8094  000082  0E00               	movlw	0
  8095  000084  239A               	addwfc	(_seconds+1)& (0+255),f,b	;volatile
  8096  000086  239B               	addwfc	(_seconds+2)& (0+255),f,b	;volatile
  8097  000088  239C               	addwfc	(_seconds+3)& (0+255),f,b	;volatile
  8098                           
  8099                           ;LC-meter.c: 99: msecpart -= 1000;
  8100  00008A  0EE8               	movlw	232
  8101  00008C  5FA4               	subwf	_msecpart& (0+255),f,b	;volatile
  8102  00008E  0E03               	movlw	3
  8103  000090  5BA5               	subwfb	(_msecpart+1)& (0+255),f,b	;volatile
  8104  000092                     i2l3214:
  8105                           
  8106                           ; BSR set to: 0
  8107                           ;LC-meter.c: 100: }
  8108                           ;LC-meter.c: 101: }
  8109                           ;LC-meter.c: 103: PIR1bits.TMR2IF=0;
  8110  000092  929E               	bcf	3998,1,c	;volatile
  8111  000094                     i2l83:
  8112  000094  FFFF               	dw	65535	; assembler added errata NOP
  8113  000096  9273               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8114  000098  0011               	retfie		f
  8115  00009A  FFFF               	dw	65535	; errata NOP
  8116  00009C                     __end_of_isr:
  8117                           	opt stack 0
  8118                           tblptru	equ	0xFF8
  8119                           tblptrh	equ	0xFF7
  8120                           tblptrl	equ	0xFF6
  8121                           tablat	equ	0xFF5
  8122                           prodl	equ	0xFF3
  8123                           intcon	equ	0xFF2
  8124                           intcon2	equ	0xFF1
  8125                           postinc0	equ	0xFEE
  8126                           wreg	equ	0xFE8
  8127                           postdec1	equ	0xFE5
  8128                           fsr1l	equ	0xFE1
  8129                           indf2	equ	0xFDF
  8130                           postinc2	equ	0xFDE
  8131                           postdec2	equ	0xFDD
  8132                           fsr2h	equ	0xFDA
  8133                           fsr2l	equ	0xFD9
  8134                           status	equ	0xFD8
  8135                           
  8136 ;; *************** function i2___lwdiv *****************
  8137 ;; Defined at:
  8138 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwdiv.c"
  8139 ;; Parameters:    Size  Location     Type
  8140 ;;  dividend        2    0[COMRAM] unsigned int 
  8141 ;;  divisor         2    2[COMRAM] unsigned int 
  8142 ;; Auto vars:     Size  Location     Type
  8143 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  8144 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  8145 ;; Return value:  Size  Location     Type
  8146 ;;                  2    0[COMRAM] unsigned int 
  8147 ;; Registers used:
  8148 ;;		wreg, status,2, status,0
  8149 ;; Tracked objects:
  8150 ;;		On entry : 3F/0
  8151 ;;		On exit  : 3F/0
  8152 ;;		Unchanged: 3F/0
  8153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8154 ;;      Params:         4       0       0       0       0       0       0
  8155 ;;      Locals:         3       0       0       0       0       0       0
  8156 ;;      Temps:          0       0       0       0       0       0       0
  8157 ;;      Totals:         7       0       0       0       0       0       0
  8158 ;;Total ram usage:        7 bytes
  8159 ;; Hardware stack levels used:    1
  8160 ;; This function calls:
  8161 ;;		Nothing
  8162 ;; This function is called by:
  8163 ;;		_isr
  8164 ;; This function uses a non-reentrant model
  8165 ;;
  8166                           
  8167                           	psect	text52
  8168  00207C                     __ptext52:
  8169                           	opt stack 0
  8170  00207C                     i2___lwdiv:
  8171                           	opt stack 0
  8172  00207C  FFFF               	dw	65535	; assembler added errata NOP
  8173                           
  8174                           ; BSR set to: 0
  8175                           
  8176                           ;incstack = 0
  8177  00207E  6A05               	clrf	i2___lwdiv@quotient,c
  8178  002080  6A06               	clrf	i2___lwdiv@quotient+1,c
  8179                           
  8180                           ; BSR set to: 0
  8181  002082  5003               	movf	i2___lwdiv@divisor,w,c
  8182  002084  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  8183  002086  E01E               	bz	i2l877
  8184                           
  8185                           ; BSR set to: 0
  8186  002088  0E01               	movlw	1
  8187  00208A  6E07               	movwf	i2___lwdiv@counter,c
  8188  00208C  D005               	goto	i2l3182
  8189  00208E                     i2l3180:
  8190  00208E  FFFF               	dw	65535	; assembler added errata NOP
  8191                           
  8192                           ; BSR set to: 0
  8193  002090  90D8               	bcf	status,0,c
  8194  002092  3603               	rlcf	i2___lwdiv@divisor,f,c
  8195  002094  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  8196  002096  2A07               	incf	i2___lwdiv@counter,f,c
  8197  002098                     i2l3182:
  8198  002098  FFFF               	dw	65535	; assembler added errata NOP
  8199                           
  8200                           ; BSR set to: 0
  8201  00209A  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  8202  00209C  D7F8               	goto	i2l3180
  8203  00209E                     i2u273_40:
  8204  00209E  FFFF               	dw	65535	; assembler added errata NOP
  8205                           
  8206                           ; BSR set to: 0
  8207  0020A0  90D8               	bcf	status,0,c
  8208  0020A2  3605               	rlcf	i2___lwdiv@quotient,f,c
  8209  0020A4  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  8210                           
  8211                           ; BSR set to: 0
  8212  0020A6  5003               	movf	i2___lwdiv@divisor,w,c
  8213  0020A8  5C01               	subwf	i2___lwdiv@dividend,w,c
  8214  0020AA  5004               	movf	i2___lwdiv@divisor+1,w,c
  8215  0020AC  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  8216  0020AE  E305               	bnc	i2l3192
  8217                           
  8218                           ; BSR set to: 0
  8219  0020B0  5003               	movf	i2___lwdiv@divisor,w,c
  8220  0020B2  5E01               	subwf	i2___lwdiv@dividend,f,c
  8221  0020B4  5004               	movf	i2___lwdiv@divisor+1,w,c
  8222  0020B6  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  8223                           
  8224                           ; BSR set to: 0
  8225  0020B8  8005               	bsf	i2___lwdiv@quotient,0,c
  8226  0020BA                     i2l3192:
  8227                           
  8228                           ; BSR set to: 0
  8229  0020BA  90D8               	bcf	status,0,c
  8230  0020BC  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  8231  0020BE  3203               	rrcf	i2___lwdiv@divisor,f,c
  8232                           
  8233                           ; BSR set to: 0
  8234  0020C0  2E07               	decfsz	i2___lwdiv@counter,f,c
  8235  0020C2  D7ED               	goto	i2u273_40
  8236  0020C4                     i2l877:
  8237                           
  8238                           ; BSR set to: 0
  8239  0020C4  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  8240  0020C8  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  8241                           
  8242                           ; BSR set to: 0
  8243  0020CC  0012               	return		;funcret
  8244  0020CE  FFFF               	dw	65535	; errata NOP
  8245  0020D0                     __end_ofi2___lwdiv:
  8246                           	opt stack 0
  8247                           tblptru	equ	0xFF8
  8248                           tblptrh	equ	0xFF7
  8249                           tblptrl	equ	0xFF6
  8250                           tablat	equ	0xFF5
  8251                           prodl	equ	0xFF3
  8252                           intcon	equ	0xFF2
  8253                           intcon2	equ	0xFF1
  8254                           postinc0	equ	0xFEE
  8255                           wreg	equ	0xFE8
  8256                           postdec1	equ	0xFE5
  8257                           fsr1l	equ	0xFE1
  8258                           indf2	equ	0xFDF
  8259                           postinc2	equ	0xFDE
  8260                           postdec2	equ	0xFDD
  8261                           fsr2h	equ	0xFDA
  8262                           fsr2l	equ	0xFD9
  8263                           status	equ	0xFD8
  8264                           tblptru	equ	0xFF8
  8265                           tblptrh	equ	0xFF7
  8266                           tblptrl	equ	0xFF6
  8267                           tablat	equ	0xFF5
  8268                           prodl	equ	0xFF3
  8269                           intcon	equ	0xFF2
  8270                           intcon2	equ	0xFF1
  8271                           postinc0	equ	0xFEE
  8272                           wreg	equ	0xFE8
  8273                           postdec1	equ	0xFE5
  8274                           fsr1l	equ	0xFE1
  8275                           indf2	equ	0xFDF
  8276                           postinc2	equ	0xFDE
  8277                           postdec2	equ	0xFDD
  8278                           fsr2h	equ	0xFDA
  8279                           fsr2l	equ	0xFD9
  8280                           status	equ	0xFD8
  8281                           
  8282                           	psect	rparam
  8283  0000                     tblptru	equ	0xFF8
  8284                           tblptrh	equ	0xFF7
  8285                           tblptrl	equ	0xFF6
  8286                           tablat	equ	0xFF5
  8287                           prodl	equ	0xFF3
  8288                           intcon	equ	0xFF2
  8289                           intcon2	equ	0xFF1
  8290                           postinc0	equ	0xFEE
  8291                           wreg	equ	0xFE8
  8292                           postdec1	equ	0xFE5
  8293                           fsr1l	equ	0xFE1
  8294                           indf2	equ	0xFDF
  8295                           postinc2	equ	0xFDE
  8296                           postdec2	equ	0xFDD
  8297                           fsr2h	equ	0xFDA
  8298                           fsr2l	equ	0xFD9
  8299                           status	equ	0xFD8
  8300                           
  8301                           	psect	temp
  8302  000073                     btemp:
  8303                           	opt stack 0
  8304  000073                     	ds	1
  8305  0000                     int$flags	set	btemp
  8306  0000                     wtemp6	set	btemp+1
  8307                           tblptru	equ	0xFF8
  8308                           tblptrh	equ	0xFF7
  8309                           tblptrl	equ	0xFF6
  8310                           tablat	equ	0xFF5
  8311                           prodl	equ	0xFF3
  8312                           intcon	equ	0xFF2
  8313                           intcon2	equ	0xFF1
  8314                           postinc0	equ	0xFEE
  8315                           wreg	equ	0xFE8
  8316                           postdec1	equ	0xFE5
  8317                           fsr1l	equ	0xFE1
  8318                           indf2	equ	0xFDF
  8319                           postinc2	equ	0xFDE
  8320                           postdec2	equ	0xFDD
  8321                           fsr2h	equ	0xFDA
  8322                           fsr2l	equ	0xFD9
  8323                           status	equ	0xFD8


Data Sizes:
    Strings     103
    Constant    57
    Data        5
    BSS         48
    Persistent  9
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    105     114
    BANK0           128     39      92
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(1) Largest target is 30
		 -> exp@coeff(CODE[30]), log@coeff(CODE[27]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    put_str@s	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_10(CODE[13]), STR_9(CODE[10]), STR_7(CODE[15]), STR_6(CODE[12]), 

    print_unit@units	PTR const unsigned char [8] size(1) Largest target is 3
		 -> STR_18(CODE[3]), STR_17(CODE[3]), STR_16(CODE[3]), STR_15(CODE[3]), 
		 -> STR_14(CODE[3]), STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[2]), 

    lcd_puts@string	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_21(CODE[4]), STR_20(CODE[4]), STR_19(CODE[6]), STR_5(CODE[5]), 
		 -> STR_4(CODE[6]), STR_3(CODE[7]), STR_2(CODE[7]), STR_1(CODE[10]), 

    buffer_puts@x	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_8(CODE[6]), 


Critical Paths under _main in COMRAM

    _print_indicator->_lcd_gotoxy
    _measure_inductance->___fttol
    _measure_capacitance->___fttol
    _print_unit->_lcd_gotoxy
    _print_reading->_format_number
    _lcd_puts->_lcd_putch
    _lcd_begin->_lcd_command
    _pow->_exp
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->_log10
    ___altoft->___fttol
    ___ftsub->___ftmul
    ___ftdiv->___ftpack
    ___lltoft->___ftpack
    _log10->_log
    _log->_eval_poly
    _eval_poly->___ftmul
    ___ftmul->___ftadd
    ___ftadd->___awtoft
    ___awtoft->___ftpack
    _calibrate->___lwtoft
    _put_str->_output_putch
    _output_putch->_lcd_putch
    _lcd_putch->_lcd_send
    _measure_freq->_format_number
    _lcd_gotoxy->_lcd_command
    _format_number->___lwdiv
    _buffer_puts->_buffer_putch
    _lcd_clear->_lcd_command
    _lcd_command->_lcd_send
    _lcd_send->_lcd_write4bits
    ___lwtoft->_measure_freq

Critical Paths under _isr in COMRAM

    _isr->i2___lwdiv

Critical Paths under _main in BANK0

    _main->_format_double
    _format_double->_pow
    _pow->_exp

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  314141
                                            104 COMRAM     1     1      0
                          _calibrate
                          _delay10ms
                      _format_double
                          _lcd_begin
                          _lcd_clear
                         _lcd_gotoxy
                           _lcd_init
                           _lcd_puts
                _measure_capacitance
                 _measure_inductance
                    _print_indicator
                        _timer0_init
                        _timer2_init
 ---------------------------------------------------------------------------------
 (1) _timer2_init                                          4     4      0      90
                                              8 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _timer0_init                                         11    11      0     273
                                              8 COMRAM    11    11      0
 ---------------------------------------------------------------------------------
 (1) _print_indicator                                      1     1      0    3251
                                             18 COMRAM     1     1      0
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (1) _measure_inductance                                  33    33      0   49303
                                              0 BANK0     33    33      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                           ___lwtoft
                         _lcd_gotoxy
                       _measure_freq
                      _print_reading
                         _print_unit
                            _put_str
 ---------------------------------------------------------------------------------
 (1) _measure_capacitance                                 15    15      0   48997
                                             83 COMRAM    15    15      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                           ___lwtoft
                         _lcd_gotoxy
                       _measure_freq
                      _print_reading
                         _print_unit
                            _put_str
 ---------------------------------------------------------------------------------
 (2) _print_unit                                           3     3      0    2115
                                             18 COMRAM     2     2      0
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (2) _print_reading                                        6     4      2    8826
                                             58 COMRAM     6     4      2
                            ___lwdiv
                            ___lwmod
                      _format_number
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (2) _lcd_puts                                             3     2      1    1105
                                             12 COMRAM     3     2      1
                          _lcd_putch
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             3     3      0      46
                                              8 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcd_begin                                            3     2      1     580
                                             12 COMRAM     3     2      1
                        _lcd_command
                     _lcd_write4bits
 ---------------------------------------------------------------------------------
 (1) _format_double                                       16    13      3  194382
                                             23 BANK0     16    13      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                       _buffer_putch
                              _floor
                              _log10
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 17    11      6  109125
                                              6 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _exp                                                  9     6      3   58530
                                            101 COMRAM     3     0      3
                                              0 BANK0      6     6      0
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                7     2      5     539
                                             57 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3   13824
                                             93 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                            ___ftdiv (ARG)
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4    1141
                                             68 COMRAM    15    11      4
                            ___ftdiv (ARG)
                              _log10 (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    2678
                                              8 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    3367
                                             83 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    6794
                                             47 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     335
                                              8 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    5399
                                             16 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    3265
                                             16 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _log10                                                6     3      3   42564
                                             62 COMRAM     6     3      3
                            ___ftmul
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  5     2      3   33632
                                             57 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                6     2      4     682
                                              8 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           10     4      6   14839
                                             47 COMRAM    10     4      6
                            ___ftadd
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    8707
                                             32 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    5338
                                             20 COMRAM    12     6      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3636
                                             16 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _calibrate                                            1     1      0   13599
                                             66 COMRAM     1     1      0
                           ___lwtoft
                          _delay10ms
                          _lcd_clear
                         _lcd_gotoxy
                          _lcd_putch
                       _measure_freq
                            _put_str
 ---------------------------------------------------------------------------------
 (2) _put_str                                              4     3      1     856
                                             13 COMRAM     4     3      1
                       _output_putch
 ---------------------------------------------------------------------------------
 (3) _output_putch                                         1     1      0     366
                                             12 COMRAM     1     1      0
                          _lcd_putch
 ---------------------------------------------------------------------------------
 (3) _lcd_putch                                            1     1      0     335
                                             11 COMRAM     1     1      0
                           _lcd_send
 ---------------------------------------------------------------------------------
 (2) _measure_freq                                         5     3      2    6246
                                             58 COMRAM     5     3      2
                        _buffer_init
                        _buffer_puts
                      _format_number
                         _lcd_gotoxy
                       _print_buffer
                     _timer0_read_ps
 ---------------------------------------------------------------------------------
 (3) _timer0_read_ps                                       7     5      2     167
                                              8 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (3) _print_buffer                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           6     5      1    2115
                                             12 COMRAM     6     5      1
                        _lcd_command
 ---------------------------------------------------------------------------------
 (3) _format_number                                       43    39      4    3713
                                             15 COMRAM    43    39      4
                            ___lwdiv
                            ___lwmod
                       _buffer_putch
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     732
                                              8 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     851
                                              8 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _buffer_puts                                          1     0      1     186
                                             11 COMRAM     1     0      1
                       _buffer_putch
 ---------------------------------------------------------------------------------
 (4) _buffer_putch                                         3     3      0      31
                                              8 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _buffer_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            1     1      0     335
                                             12 COMRAM     1     1      0
                        _lcd_command
 ---------------------------------------------------------------------------------
 (3) _lcd_command                                          1     1      0     335
                                             11 COMRAM     1     1      0
                           _lcd_send
 ---------------------------------------------------------------------------------
 (4) _lcd_send                                             2     1      1     304
                                              9 COMRAM     2     1      1
                     _lcd_write4bits
 ---------------------------------------------------------------------------------
 (5) _lcd_write4bits                                       1     1      0      31
                                              8 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _delay10ms                                            1     1      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3644
                                             63 COMRAM     3     0      3
                           ___ftpack
                       _measure_freq (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    3073
                                              8 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  1     1      0     214
                                              7 COMRAM     1     1      0
                          i2___lwdiv
 ---------------------------------------------------------------------------------
 (8) i2___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calibrate
     ___lwtoft
       ___ftpack
       _measure_freq (ARG)
         _buffer_init
         _buffer_puts
           _buffer_putch
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _print_buffer
         _timer0_read_ps
     _delay10ms
     _lcd_clear
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_putch
       _lcd_send
         _lcd_write4bits
     _measure_freq
       _buffer_init
       _buffer_puts
         _buffer_putch
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _print_buffer
       _timer0_read_ps
     _put_str
       _output_putch
         _lcd_putch
           _lcd_send
             _lcd_write4bits
   _delay10ms
   _format_double
     ___awtoft
       ___ftpack
     ___ftdiv
       ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftsub
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
       _log10 (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
     _buffer_putch
     _floor
       ___altoft
         ___ftpack
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           _log10 (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
               _frexp
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftge (ARG)
       ___fttol (ARG)
         ___ftdiv (ARG)
           ___ftpack
         _log10 (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
             _frexp
       _frexp (ARG)
     _log10
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
         _frexp
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
         _log10 (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
             _frexp
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
         ___fttol
           ___ftdiv (ARG)
             ___ftpack
           _log10 (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
               _frexp
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               _log10 (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 _log
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftdiv (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                   _frexp
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftge (ARG)
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             _log10 (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
           _frexp (ARG)
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
         _frexp
   _lcd_begin
     _lcd_command
       _lcd_send
         _lcd_write4bits
     _lcd_write4bits
   _lcd_clear
     _lcd_command
       _lcd_send
         _lcd_write4bits
   _lcd_gotoxy
     _lcd_command
       _lcd_send
         _lcd_write4bits
   _lcd_init
   _lcd_puts
     _lcd_putch
       _lcd_send
         _lcd_write4bits
   _measure_capacitance
     ___ftdiv
       ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftsub
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
       _log10 (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
     ___lwtoft
       ___ftpack
       _measure_freq (ARG)
         _buffer_init
         _buffer_puts
           _buffer_putch
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _print_buffer
         _timer0_read_ps
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _measure_freq
       _buffer_init
       _buffer_puts
         _buffer_putch
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _print_buffer
       _timer0_read_ps
     _print_reading
       ___lwdiv
       ___lwmod
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _lcd_puts
         _lcd_putch
           _lcd_send
             _lcd_write4bits
     _print_unit
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
     _put_str
       _output_putch
         _lcd_putch
           _lcd_send
             _lcd_write4bits
   _measure_inductance
     ___ftdiv
       ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftsub
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
       _log10 (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
     ___lwtoft
       ___ftpack
       _measure_freq (ARG)
         _buffer_init
         _buffer_puts
           _buffer_putch
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _print_buffer
         _timer0_read_ps
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _measure_freq
       _buffer_init
       _buffer_puts
         _buffer_putch
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _print_buffer
       _timer0_read_ps
     _print_reading
       ___lwdiv
       ___lwmod
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _lcd_puts
         _lcd_putch
           _lcd_send
             _lcd_write4bits
     _print_unit
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
     _put_str
       _output_putch
         _lcd_putch
           _lcd_send
             _lcd_write4bits
   _print_indicator
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_puts
       _lcd_putch
         _lcd_send
           _lcd_write4bits
   _timer0_init
   _timer2_init

 _isr (ROOT)
   i2___lwdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK5            EF      0       0      15        0.0%
BANK5               EF      0       0      13        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80     27      5C       4       71.9%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     69      72       1       90.5%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      CE      14        0.0%
DATA                 0      0      CE      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Feb  7 09:08:58 2020

                                   ___altoft@exp 005C                                    ___altoft@sign 005D  
                                             _F1 006F                                               _F2 009D  
                                             _F3 006A                                               l92 13E0  
                                    __CFG_BOR$ON 000000                               i2___lwdiv@dividend 0001  
                                   ___ftadd@exp1 0020                                     ___ftadd@exp2 001F  
                                   ___ftadd@sign 001E                                              l118 21B8  
                                            l310 212E                                              l157 1B96  
                                            l421 23F8                                              l266 23B4  
                                            l268 23B8                                              l730 0FDE  
                                            l731 0FF2                                              l707 103E  
                                            l741 1AB0                                              l910 12D2  
                                            l647 1E0E                                              l753 17B2  
                                            l738 1AE0                                              l666 17E2  
                                            l914 12C6                                              l739 1A66  
                                            l763 24C6                                              l747 1FC6  
                                            l667 1888                                              l845 16D2  
                                            l669 187C                                              l693 1D76  
                                            l774 1A22                                              l689 1E84  
                                            l877 2070                                              l887 2244  
                                   __CFG_CPD$OFF 000000                                   lcd_begin@lines 000F  
                                            _exp 0D22                                              _log 15EC  
                                            _isr 0008                                              _pow 118E  
                                   __CFG_BORV$27 000000                                              wreg 000FE8  
                             timer0_read_ps@prev 000D                                     __CFG_LVP$OFF 000000  
                         __end_of_lcd_write4bits 2498                                     ___ftdiv@cntr 001A  
                                   ___ftdiv@sign 001F                                     __CFG_WDT$OFF 000000  
                                           l1075 0ECC                                             l1078 0DAA  
                                           l1079 0EC0                                             l4010 151C  
                                           l4002 150C                                             l3320 1D9E  
                                           l4104 1942                                             l3330 1DE4  
                                           l3322 1DB2                                             l4050 1070  
                                           l3412 0F82                                             l4036 15AE  
                                           l4028 1574                                             l4132 0CA0  
                                           l3326 1DC6                                             l3318 1D92  
                                           l3414 0F8E                                             l4118 0B16  
                                           l3344 1E02                                             l3328 1DD8  
                                           l3352 24A4                                             l3424 0FBC  
                                           l3416 0F96                                             l3600 1A44  
                                           l3512 1FAA                                             l4128 0C74  
                                           l4136 0CCA                                             l3354 24A6  
                                           l3426 0FC6                                             l3370 1F2C  
                                           l4066 1166                                             l4154 0702  
                                           l3700 2044                                             l3436 1018  
                                           l3444 16F4                                             l3508 1F8A  
                                           l4068 116C                                             l4164 0A02  
                                           l4172 0A58                                             l3710 2066  
                                           l3390 0F46                                             l3462 173A  
                                           l3518 1FC4                                             l3550 19EA  
                                           l3542 19CE                                             l3526 1982  
                                           l4174 0A60                                             l4270 13DC  
                                           l4262 13C2                                             l3720 2220  
                                           l3384 0F20                                             l3472 1766  
                                           l3448 1716                                             l3368 1F20  
                                           l3552 19F6                                             l4168 0A2E  
                                           l4256 13B0                                             l3466 174C  
                                           l3618 1A8A                                             l3546 19E0  
                                           l2930 1C60                                             l4266 13D2  
                                           l3476 1778                                             l3492 1E32  
                                           l3636 229A                                             l3740 2374  
                                           l4188 23F0                                             l3726 223A  
                                           l3718 2216                                             l3830 1604  
                                           l3814 20D8                                             l3558 1A12  
                                           l3662 1D1A                                             l3902 11C8  
                                           l3568 2192                                             l3736 22EC  
                                           l3648 2264                                             l3816 20E4  
                                           l3584 17EC                                             l3672 1D34  
                                           l3656 1CEA                                             l3912 1240  
                                           l3744 238A                                             l2960 1CBA  
                                           l2952 1CA0                                             l2944 1C88  
                                           l2936 1C70                                             l2928 1C58  
                                           l3762 1B1A                                             l3930 2320  
                                           l3690 1C28                                             l2954 1CA6  
                                           l2946 1C90                                             l2938 1C78  
                                           l3772 1B5A                                             l3756 1AF8  
                                           l3588 1806                                             l3676 1D40  
                                           l3852 0D60                                             l3908 121E  
                                           l3790 2450                                             l3774 1B60  
                                           l3926 2308                                             l3846 0D36  
                                           l3688 1BC4                                             l3856 0D80  
                                           l3794 2460                                             l3698 203A  
                                           l3876 0E98                                             ?_exp 0066  
                                           ?_log 003A                                             l3896 11B4  
                                           ?_isr 0001                                             ?_pow 00AE  
                                           STR_1 066C                                             STR_2 0676  
                                           STR_5 0683                                             STR_6 0656  
                                           STR_7 063A                                             STR_8 067D  
                                           STR_9 0662                                             u3000 0F12  
                                           u3100 0F9C                                             u3030 0F38  
                                           _LATB 000F8A                                             _LATC 000F8B  
                                           u3200 170C                                             u3130 0FCC  
                                           _CCal 00D3                                             u3060 0F62  
                                           u3300 19A2                                             u2510 1CC6  
                                           u3305 1998                                             u2530 235E  
                                           u3171 16EA                                             u3411 1A3A  
                                           u4107 1542                                             u3340 19FC  
                                           u3500 1D10                                             u4117 1554  
                                           u4207 144E                                             u3191 1704  
                                           u3431 1A54                                             u4127 1564  
                                           _PIE1 000F9D                                             u3440 1A5C  
                                           u2528 1CCA                                             u4217 145E  
                                           u3281 196E                                             u4137 1584  
                                           u3290 1976                                             u4227 146E  
                                           u4147 159C                                             u2900 1DEE  
                                           u3700 214A                                             u2548 2362  
                                           u4237 147E                                             u4157 15D0  
                                           u3390 17F8                                             u4247 148E  
                                           u4167 1408                                             u3560 204A  
                                           u4257 149E                                             u4177 141E  
                                           u4097 1522                                             u3730 15FA  
                                           u3810 0E8E                                             u4267 14AE  
                                           u4187 142E                                             u2860 1D8A  
                                           u3660 1B74                                             u4277 24E4  
                                           u4197 143E                                             u3590 2226  
                                           u4287 2484                                             u4297 248E  
                                           u2961 0EE4                                             u3850 1214  
                                           u2971 0EF8                                             _PIR1 000F9E  
                                           i2l83 0094                                             _TMR0 000FD6  
                                           _TMR2 000FCC                                     __CFG_PWRT$ON 000000  
                                           _bres 00CF                                             _main 12D8  
                                   ___ftpack@arg 0009                                             _mode 0072  
                                   ___ftpack@exp 000C                               i2___lwdiv@quotient 0005  
                                           fsr2h 000FDA                                             indf2 000FDF  
                                           fsr1l 000FE1                                             fsr2l 000FD9  
                                           btemp 0073                                             exp@x 0066  
                                           log@x 003A                            __size_of_output_putch 000C  
                                           pow@x 00AE                                             pow@y 00B1  
                                           prodl 000FF3                       __end_of_measure_inductance 0AB6  
                                           start 009C                              timer0_read_ps@count 000E  
                                 ??_buffer_putch 0009                                _format_number$293 0036  
                                   ___ftmul@cntr 002E                                     ___param_bank 000000  
                                   ___ftmul@sign 002F                                  _timer0_init$450 000A  
                                _timer0_init$451 000C                                  _timer0_init$452 000E  
                                _timer0_init$453 0010                                     buffer_puts@x 000C  
                            lcd_write4bits@value 0009                                     ___fttol@exp1 0053  
                                   lcd_send@mode 000A                                            ??_exp 0069  
                                   ___fttol@lval 004F                                            ??_log 003D  
                                          ??_isr 0008                                            ??_pow 0069  
                                  __CFG_OSCS$OFF 000000                                            ?_main 0001  
                                __end_of___ftadd 1044                                            STR_10 0649  
                                          STR_12 0698                                            STR_20 0688  
                                          STR_21 0679                                            STR_13 069E  
                                          STR_14 069B                                            STR_15 068C  
                                          STR_16 0695                                            STR_17 068F  
                                          STR_18 0692                                            STR_19 0677  
                                __end_of___ftdiv 1AE6                                  __end_of___ftneg 24D6  
                                __end_of___ftmul 17B8                                            _T0CON 000FD5  
                                __end_of___ftsub 22C6                                  __end_of___fttol 1A28  
                                          _T2CON 000FCA                                  __end_of___lwdiv 207C  
                                __end_of___lwmod 2250                                            i2l877 20C4  
                               lcd_begin@dotsize 000D                                            _PORTC 000F82  
                                          _TRISA 000F92                                            _TRISB 000F93  
                                          _TRISC 000F94                                    __CFG_WRT0$OFF 000000  
                                  __CFG_WRT1$OFF 000000                                    __CFG_WRT2$OFF 000000  
                                  __CFG_WRT3$OFF 000000                                     ___lltoft@exp 0019  
                                 __CFG_EBTR0$OFF 000000                                   __CFG_EBTR1$OFF 000000  
                                 __CFG_EBTR2$OFF 000000                                     main@new_mode 0069  
                                 __CFG_EBTR3$OFF 000000                                    __CFG_STVR$OFF 000000  
                                  __CFG_WRTB$OFF 000000                                    __CFG_WRTC$OFF 000000  
                                  __CFG_WRTD$OFF 000000                                   __CFG_EBTRB$OFF 000000  
                                  ___awtoft@sign 0014                                            _log10 21BE  
                                          _blink 00A0                                            _floor 17B8  
                                          _ldexp 1CDE                                            _frexp 1E14  
                                   _output_putch 2524                                  ?_lcd_write4bits 0001  
                                          _msecs 0095                                    ___ftpack@sign 000D  
                                          tablat 000FF5                                            pow@yi 00BB  
                                format_number@di 0039                                            status 000FD8  
                                __end_of_put_str 2338                                            wtemp6 0074  
                                ??_print_reading 003D                                      exp@exponent 00AB  
                             __size_ofi2___lwdiv 0054                                      ldexp@newexp 003D  
                                __initialization 1FCC                                      log@exponent 003D  
                                   __end_of_main 13FC                                 format_double@num 00BF  
                                  lcd_gotoxy@col 000E                                    lcd_gotoxy@row 000D  
                                  ?_measure_freq 003B                                   __CFG_OSC$HSPLL 000000  
                         __size_of_format_double 014A                                           ??_main 0069  
                                  ___fttol@sign1 004E                                    lcd_send@value 000B  
                            format_double@weight 00C8                                    __activetblptr 000001  
                         __size_of_format_number 00B4                              lcd_init@fourbitmode 0009  
                                __CFG_CCP2MUX$ON 000000                                           ?_log10 003F  
                                         ?_floor 005E                                           ?_ldexp 003A  
                                         ?_frexp 0009                                 __end_of___altoft 1F6A  
                               __end_of___awtoft 228C                                 __end_of___ftpack 1E14  
                               __end_of___lltoft 2122                                           i2l3214 0092  
                                         i2l3180 208E                                           i2l3182 2098  
                                         i2l3192 20BA                                           _INTCON 000FF2  
                               __end_of___lwtoft 2426                                 __end_of_lcd_init 23D4  
                           __size_of_lcd_command 0010                                 __end_of_lcd_send 24B8  
                               __end_of_lcd_puts 23A2                                           ___ftge 1F6A  
                                      ??___ftadd 001B                                        ??___ftdiv 0017  
                                      ??___ftneg 000C                                        ??___ftmul 0027  
                                   ?_timer0_init 0001                                        ??___ftsub 0036  
                           __size_of_buffer_init 0010                                        ??___fttol 0049  
                                 ??_measure_freq 003D                                        ??___lwdiv 000D  
                                   ?_timer2_init 0001                                        ??___lwmod 000D  
                                         _buffer 0080                             __size_of_buffer_puts 0026  
                                         clear_0 2004                                           clear_1 2010  
                                         log10@x 003F                                           floor@i 0061  
                                         floor@x 005E                            ___ftmul@f3_as_product 002B  
                                   __pdataCOMRAM 0072                               timer2_init@ps_mode 000C  
                              __end_ofi2___lwdiv 20D0                                     __mediumconst 0000  
                                         tblptrh 000FF7                                           tblptrl 000FF6  
                                         tblptru 000FF8                             __end_of_buffer_putch 21BE  
                               format_number@buf 0016                                 format_number@pad 0013  
                        _measure_inductance$1310 00B4                          _measure_inductance$1311 00B7  
                        _measure_inductance$1305 00AE                          _measure_inductance$1306 00BB  
                        _measure_inductance$1307 00BE                          _measure_inductance$1308 00C1  
                        _measure_inductance$1309 00B1                                        ??_put_str 000F  
                               __end_ofexp@coeff 061F                                    _format_double 1044  
                               __end_oflog@coeff 063A                                       __accesstop 0080  
                        __end_of__initialization 2016                                       ___altoft@c 0054  
                                     ___ftadd@f1 0015                                       ___ftadd@f2 0018  
                                  _format_number 1AE6                                       ___ftge@ff1 0009  
                                     ___ftge@ff2 000C                                     eval_poly@res 0037  
                                  ___rparam_used 000001                                       ___ftdiv@f1 0011  
                                     ___ftdiv@f2 0014                                       ___ftdiv@f3 001B  
                                     ___ftneg@f1 0009                                       ___awtoft@c 0011  
                         measure_capacitance@Cin 0060                                       ___ftmul@f1 0021  
                                     ___ftmul@f2 0024                     __size_of_measure_capacitance 026C  
                         measure_capacitance@var 005E                            lcd_gotoxy@row_offsets 000F  
                                     ___ftsub@f1 0030                                       ___ftsub@f2 0033  
                                     ___fttol@f1 0045                                   __pcstackCOMRAM 0001  
                             __size_of_calibrate 00CE                                     __pidataBANK0 253C  
                             __size_of_delay10ms 0006                                       ___lltoft@c 0011  
                                  __end_of_log10 2208                                    __end_of_floor 188E  
                                  __end_of_ldexp 1D7C                                    __end_of_frexp 1E8A  
                                     ___lwtoft@c 0040                                   buffer_putch@ch 000B  
                             __size_of_lcd_begin 00EC                               __size_of_lcd_clear 001E  
                                        ??_log10 0042                               __size_of_lcd_putch 0010  
                                        ??_floor 0061                                          ??_ldexp 003F  
                                        ??_frexp 000D                                       _log10$1314 0042  
                                     __pbssBANK0 0080                                   ?_format_double 00BF  
                             __size_of_eval_poly 00A6                                   ?_format_number 0010  
                                 print_unit@unit 0001                         __size_of_print_indicator 002A  
                                        ?___ftge 0009                                        ?___altoft 0054  
                        __size_of_timer0_read_ps 004E                                        ?___awtoft 0011  
                                      ?___ftpack 0009                                        ?___lltoft 0011  
                             _measure_inductance 06A2                                        ?___lwtoft 0040  
                               ??_lcd_write4bits 0009                                          _INTCON2 000FF1  
                                     _lcd_gotoxy 22C6                              ?_measure_inductance 0001  
                              __end_of_calibrate 195C                                        ?_lcd_init 0001  
                                      ?_lcd_send 000A                                __end_of_delay10ms 253C  
                                      ?_lcd_puts 000D                             __end_of_measure_freq 1500  
                                     calibrate@i 0043                                          __Hparam 0000  
                                        __Lparam 0000                             ??_measure_inductance 0054  
                              __end_of_lcd_begin 15EC                                __end_of_lcd_clear 24F4  
                                __size_of___ftge 0062                                __end_of_lcd_putch 2504  
                                        ___ftadd 0ED2                                          ___ftdiv 1A28  
                                        ___ftneg 24B8                                          ___ftmul 16D8  
                                        ___ftsub 228C                                          ___fttol 195C  
                                        ___lwdiv 2028                                          ___lwmod 2208  
                                   __psmallconst 0600                                       ??___altoft 0058  
                                        __pcinit 1FCC                                       ??___awtoft 0014  
                                     ??___ftpack 000E                                __end_of_eval_poly 1C40  
                                        __ramtop 0600                             __size_of_timer0_init 009E  
                                     ??___lltoft 0015                                          __ptext0 12D8  
                                        __ptext1 2338                                          __ptext2 1C40  
                                        __ptext3 23D4                                          __ptext4 06A2  
                                        __ptext5 0AB6                                          __ptext6 2426  
                                        __ptext7 1E8A                                          __ptext8 236E  
                                        __ptext9 23A2                             __size_of_timer2_init 0036  
                          __size_of_buffer_putch 004E                                       ??___lwtoft 0043  
                                      _T0CONbits 000FD5                                     __size_of_exp 01B0  
                                   __size_of_log 00EC                                     __size_of_isr 0094  
                                   __size_of_pow 014A                                          _seconds 0099  
                                 lcd_putch@value 000C                                  ??_format_double 0069  
                                        _put_str 2300                                       ??_lcd_init 0009  
                                     ??_lcd_send 000B                                       ??_lcd_puts 000E  
                           end_of_initialization 2016                                  ??_format_number 0014  
                                        exp@sign 00AD                                        _LCD_lines 00A6  
                                   _lcd_init$361 000A                                   lcd_puts@string 000D  
                                        pow@sign 00BA                    measure_inductance@denominator 00AB  
                          __end_of_print_reading 1EFE                                     _buffer_putch 2170  
                              format_number@base 0012                                          postdec1 000FE5  
                                        postdec2 000FDD                                          postinc0 000FEE  
                                        postinc2 000FDE                                ??_print_indicator 0013  
                                      _PORTCbits 000F82                                       _print_unit 2426  
                                  ?_print_buffer 0001                              _measure_capacitance 0AB6  
                                    ?_lcd_gotoxy 000D                                     _led_interval 00D6  
                              i2___lwdiv@divisor 0003                                        i2___lwdiv 207C  
                              i2___lwdiv@counter 0007                                      ___ftdiv@exp 001E  
                                  ??_lcd_command 000C                                    ??_buffer_init 0009  
                           ?_measure_capacitance 0001                                    ??_buffer_puts 000D  
                        measure_capacitance@unit 005D                                      ___ftmul@exp 002A  
                                 format_double@m 00CD                           measure_inductance@unit 00BA  
                                 _timer0_read_ps 2122                                   __end_of___ftge 1FCC  
                                  __pidataCOMRAM 2542                                  lcd_gotoxy@F2308 00D8  
                                     floor@expon 0064                                   ??_print_buffer 0009  
                                 format_number@i 003A                                   format_number@n 0010  
                            start_initialization 1FCC                                       eval_poly@d 0033  
                                     eval_poly@n 0034                                       eval_poly@x 0030  
                          __size_of_measure_freq 0104                                       ldexp@value 003A  
                                    __end_of_exp 0ED2                                      __end_of_log 16D8  
                                    __end_of_isr 009C                                      __end_of_pow 12D8  
                                   _LCD_function 006E                               format_double@digit 00CB  
                                     ?i2___lwdiv 0001                                       frexp@value 0009  
                          ??_measure_capacitance 0054                           __end_of_timer0_read_ps 2170  
                                       ??___ftge 000F                              __size_of_lcd_gotoxy 003A  
                            __end_of_lcd_command 2524                                      __pdataBANK0 00D8  
                                   _measure_freq 13FC                              __end_of_buffer_init 2514  
                            __end_of_buffer_puts 2472                         print_reading@measurement 003B  
                              __size_of___altoft 006C                                __size_of___awtoft 003C  
                              __size_of___ftpack 0098                                      ?_print_unit 0001  
                              __size_of___lltoft 0052                                      __pbssCOMRAM 006A  
                              __size_of___lwtoft 0028                                    __pcstackBANK0 00A8  
                                  ?_output_putch 0001                                measure_freq@count 003E  
                               lcd_command@value 000C                                __size_of_lcd_init 0032  
                              __size_of_lcd_send 0020                                        _calibrate 188E  
                              __size_of_lcd_puts 0034                                        _delay10ms 2536  
                                      __pnvBANK0 00CF                                 ___lwdiv@dividend 0009  
                                ?_timer0_read_ps 0009                                        __pintcode 0008  
                                       ?___ftadd 0015                                         ?___ftdiv 0011  
                                       ?___ftneg 0009                                         ?___ftmul 0021  
                                       ?___ftsub 0030                                         ?___fttol 0045  
                                       ?___lwdiv 0009                                         ?___lwmod 0009  
                                      _lcd_begin 1500                                        _lcd_clear 24D6  
                                      _lcd_putch 24F4                                        _led_cycle 00A2  
                                    __smallconst 0600                                        _eval_poly 1B9A  
                                  output_putch@c 000D                                   ??_output_putch 000D  
                               ___lwdiv@quotient 000E                                   __size_of_log10 004A  
                                       ?_put_str 000E                                   __size_of_floor 00D6  
                                 __size_of_ldexp 009E                                   __size_of_frexp 0076  
                                    ??i2___lwdiv 0005                                       ?_calibrate 0001  
                                     ?_delay10ms 0001                                         _LCD_ctrl 006D  
                                       _LCD_mode 00A7                                  _print_indicator 23D4  
                                    _lcd_command 2514                             __end_of_print_buffer 2536  
                            __size_of_print_unit 0026                                         i2u273_40 209E  
                                       _PIR1bits 000F9E                                         i2u276_40 002C  
                                       i2u277_40 0066                                         i2u278_48 0068  
                                    _buffer_init 2504                                      _buffer_puts 244C  
                    __size_of_measure_inductance 0414                                    ??_timer0_init 0009  
                                  ??_timer2_init 0009                                       ?_lcd_begin 000D  
                                     ?_lcd_clear 0001                                       ?_lcd_putch 0001  
                                     ?_eval_poly 0030                                        lcd_puts@i 000F  
                                   ??_lcd_gotoxy 000E                            measure_inductance@Lin 00C6  
                          measure_inductance@var 00C4                                        copy_data0 1FE0  
                          __end_of_format_double 118E                             format_number@padchar 0038  
                        __size_of_lcd_write4bits 0026                            __end_of_format_number 1B9A  
                                      frexp@eptr 000C                                         __Hrparam 0000  
                                       __Lrparam 0000                                     __Lsmallconst 0600  
                             __end_of_lcd_gotoxy 2300                                 __size_of___ftadd 0172  
                               __size_of___ftdiv 00BE                                 __size_of___ftneg 001E  
                                       ___altoft 1EFE                                 __size_of___ftmul 00E0  
                               __size_of___ftsub 003A                                 __size_of___fttol 00CC  
                               __size_of___lwdiv 0054                                 __size_of___lwmod 0048  
                                       ___awtoft 2250                                         ___ftpack 1D7C  
                                       ___lltoft 20D0                                    timer2_init@ps 000A  
                                       ___lwtoft 23FE                              __end_of_timer0_init 1CDE  
                                       _exp$1317 00A8                              __end_of_timer2_init 236E  
                                ___lwdiv@divisor 000B                                  ___lwdiv@counter 000D  
                         __size_of_print_reading 0074                             timer0_init@prescaler 0012  
                                       __ptext10 1500                                         __ptext11 1044  
                                       __ptext20 24B8                                         __ptext12 118E  
                                       __ptext21 1A28                                         __ptext13 0D22  
                                       __ptext30 188E                                         __ptext22 20D0  
                                       __ptext14 1CDE                                         __ptext31 2300  
                                       __ptext23 21BE                                         __ptext15 17B8  
                                       __ptext40 2028                                         __ptext32 2524  
                                       __ptext24 15EC                                         __ptext16 195C  
                                       __ptext41 244C                                         __ptext33 24F4  
                                       __ptext25 1E14                                         __ptext17 1F6A  
                                       __ptext50 1D7C                                         __ptext42 2170  
                                       __ptext34 13FC                                         __ptext26 1B9A  
                                       __ptext18 1EFE                                         __ptext43 2504  
                                       __ptext35 2122                                         __ptext27 16D8  
                                       __ptext19 228C                                         __ptext52 207C  
                                       __ptext44 24D6                                         __ptext36 2530  
                                       __ptext28 0ED2                                         __ptext45 2514  
                                       __ptext37 22C6                                         __ptext29 2250  
                                       __ptext46 2498                                         __ptext38 1AE6  
                                       __ptext47 2472                                         __ptext39 2208  
                                       __ptext48 2536                                         __ptext49 23FE  
                                       _lcd_init 23A2                                         _lcd_send 2498  
                        __end_of_print_indicator 23FE                                         _pow$1315 00B4  
                                       _pow$1316 00B7                                         _lcd_puts 236E  
                               __size_of_put_str 0038                                      ??_calibrate 0043  
                                  __size_of_main 0124                                      ??_delay10ms 0009  
                                       _msecpart 00A4                                         _timer1of 0091  
                           __end_of_output_putch 2530                                         int$flags 0073  
                                    ??_lcd_begin 000E                                      ??_lcd_clear 000D  
                                    ??_lcd_putch 000C                                         exp@coeff 0601  
                                       log@coeff 061F                      measure_inductance@numerator 00A8  
                                   ??_print_unit 0013                                       _INTCONbits 000FF2  
                                    ??_eval_poly 0036                               _print_reading$1312 003D  
                             _print_reading$1313 003F                                         intlevel2 2540  
                    __end_of_measure_capacitance 0D22                            __size_of_print_buffer 0006  
                               ___lwmod@dividend 0009                                 ??_timer0_read_ps 000B  
                             __end_of_print_unit 244C                                    _print_reading 1E8A  
                           delay10ms@period_10ms 0001                                      _timer0_init 1C40  
                                    _timer2_init 2338                               _format_double$1300 00C2  
                             _format_double$1301 00C5                         _measure_capacitance$1302 0054  
                       _measure_capacitance$1303 0057                         _measure_capacitance$1304 005A  
                                       put_str@i 0010                                         put_str@s 000E  
                             timer0_init@ps_mode 0013                                  ___lwmod@divisor 000B  
                                ___lwmod@counter 000D                                     _print_buffer 2530  
                        print_indicator@indicate 0013                                 ?_print_indicator 0001  
                                 _lcd_write4bits 2472                                     ?_lcd_command 0001  
                                 ?_print_reading 003B                                     ?_buffer_init 0001  
                                   ?_buffer_puts 000C                                    ?_buffer_putch 0001  
