

Microchip Technology PIC18 PRO Macro Assembler V1.45 build -152302408 
                                                                                               Sun Jul 12 01:11:13 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	18F252
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    80                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    81  0000                     
    82                           ; Version 1.45
    83                           ; Generated 16/11/2017 GMT
    84                           ; 
    85                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    86                           ; All rights reserved.
    87                           ; 
    88                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    89                           ; 
    90                           ; Redistribution and use in source and binary forms, with or without modification, are
    91                           ; permitted provided that the following conditions are met:
    92                           ; 
    93                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    94                           ;        conditions and the following disclaimer.
    95                           ; 
    96                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    97                           ;        of conditions and the following disclaimer in the documentation and/or other
    98                           ;        materials provided with the distribution.
    99                           ; 
   100                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   101                           ;        software without specific prior written permission.
   102                           ; 
   103                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   104                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   105                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   106                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   107                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   108                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   109                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   110                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   111                           ; 
   112                           ; 
   113                           ; Code-generator required, PIC18F252 Definitions
   114                           ; 
   115                           ; SFR Addresses
   116  0000                     
   117                           	psect	idataCOMRAM
   118  002908                     __pidataCOMRAM:
   119                           	opt stack 0
   120                           
   121                           ;initializer for _mode
   122  002908  FF                 	db	255
   123                           
   124                           	psect	idataBANK0
   125  002902                     __pidataBANK0:
   126                           	opt stack 0
   127                           
   128                           ;initializer for lcd_gotoxy@F2326
   129  002902  00                 	db	0
   130  002903  40                 	db	64
   131  002904  14                 	db	20
   132  002905  54                 	db	84
   133                           
   134                           	psect	smallconst
   135  000600                     __psmallconst:
   136                           	opt stack 0
   137  000600  00                 	db	0
   138  000601                     exp@coeff:
   139                           	opt stack 0
   140  000601  00                 	db	0
   141  000602  80                 	db	128
   142  000603  3F                 	db	63
   143  000604  72                 	db	114
   144  000605  31                 	db	49
   145  000606  3F                 	db	63
   146  000607  FE                 	db	254
   147  000608  75                 	db	117
   148  000609  3E                 	db	62
   149  00060A  58                 	db	88
   150  00060B  63                 	db	99
   151  00060C  3D                 	db	61
   152  00060D  95                 	db	149
   153  00060E  1D                 	db	29
   154  00060F  3C                 	db	60
   155  000610  C5                 	db	197
   156  000611  AE                 	db	174
   157  000612  3A                 	db	58
   158  000613  79                 	db	121
   159  000614  21                 	db	33
   160  000615  39                 	db	57
   161  000616  94                 	db	148
   162  000617  80                 	db	128
   163  000618  37                 	db	55
   164  000619  93                 	db	147
   165  00061A  A7                 	db	167
   166  00061B  35                 	db	53
   167  00061C  56                 	db	86
   168  00061D  15                 	db	21
   169  00061E  34                 	db	52
   170  00061F                     __end_ofexp@coeff:
   171                           	opt stack 0
   172  00061F                     log@coeff:
   173                           	opt stack 0
   174  00061F  00                 	db	0
   175  000620  00                 	db	0
   176  000621  00                 	db	0
   177  000622  00                 	db	0
   178  000623  80                 	db	128
   179  000624  3F                 	db	63
   180  000625  F0                 	db	240
   181  000626  FF                 	db	255
   182  000627  BE                 	db	190
   183  000628  E2                 	db	226
   184  000629  A9                 	db	169
   185  00062A  3E                 	db	62
   186  00062B  83                 	db	131
   187  00062C  76                 	db	118
   188  00062D  BE                 	db	190
   189  00062E  AE                 	db	174
   190  00062F  2B                 	db	43
   191  000630  3E                 	db	62
   192  000631  3C                 	db	60
   193  000632  C3                 	db	195
   194  000633  BD                 	db	189
   195  000634  D2                 	db	210
   196  000635  13                 	db	19
   197  000636  3D                 	db	61
   198  000637  78                 	db	120
   199  000638  D3                 	db	211
   200  000639  BB                 	db	187
   201  00063A                     __end_oflog@coeff:
   202                           	opt stack 0
   203  00063A                     STR_2:
   204                           
   205                           ; BSR set to: 0
   206  00063A  2D                 	db	45
   207  00063B  20                 	db	32
   208  00063C  43                 	db	67	;'C'
   209  00063D  20                 	db	32
   210  00063E  28                 	db	40
   211  00063F  55                 	db	85	;'U'
   212  000640  6E                 	db	110	;'n'
   213  000641  69                 	db	105	;'i'
   214  000642  74                 	db	116	;'t'
   215  000643  3A                 	db	58	;':'
   216  000644  20                 	db	32
   217  000645  46                 	db	70	;'F'
   218  000646  29                 	db	41
   219  000647  20                 	db	32
   220  000648  2D                 	db	45
   221  000649  00                 	db	0
   222  00064A                     STR_3:
   223                           
   224                           ; BSR set to: 0
   225  00064A  2D                 	db	45
   226  00064B  20                 	db	32
   227  00064C  4C                 	db	76	;'L'
   228  00064D  20                 	db	32
   229  00064E  28                 	db	40
   230  00064F  55                 	db	85	;'U'
   231  000650  6E                 	db	110	;'n'
   232  000651  69                 	db	105	;'i'
   233  000652  74                 	db	116	;'t'
   234  000653  3A                 	db	58	;':'
   235  000654  20                 	db	32
   236  000655  48                 	db	72	;'H'
   237  000656  29                 	db	41
   238  000657  20                 	db	32
   239  000658  2D                 	db	45
   240  000659  00                 	db	0
   241  00065A                     STR_12:
   242                           
   243                           ; BSR set to: 0
   244  00065A  70                 	db	112	;'p'
   245  00065B  6C                 	db	108	;'l'
   246  00065C  65                 	db	101	;'e'
   247  00065D  61                 	db	97	;'a'
   248  00065E  73                 	db	115	;'s'
   249  00065F  65                 	db	101	;'e'
   250  000660  20                 	db	32
   251  000661  77                 	db	119	;'w'
   252  000662  61                 	db	97	;'a'
   253  000663  69                 	db	105	;'i'
   254  000664  74                 	db	116	;'t'
   255  000665  2E                 	db	46
   256  000666  2E                 	db	46
   257  000667  2E                 	db	46
   258  000668  00                 	db	0
   259  000669                     STR_24:
   260                           
   261                           ; BSR set to: 0
   262  000669  49                 	db	73	;'I'
   263  00066A  6E                 	db	110	;'n'
   264  00066B  64                 	db	100	;'d'
   265  00066C  75                 	db	117	;'u'
   266  00066D  63                 	db	99	;'c'
   267  00066E  74                 	db	116	;'t'
   268  00066F  69                 	db	105	;'i'
   269  000670  76                 	db	118	;'v'
   270  000671  69                 	db	105	;'i'
   271  000672  74                 	db	116	;'t'
   272  000673  79                 	db	121	;'y'
   273  000674  20                 	db	32
   274  000675  00                 	db	0
   275  000676                     STR_10:
   276                           
   277                           ; BSR set to: 0
   278  000676  43                 	db	67	;'C'
   279  000677  61                 	db	97	;'a'
   280  000678  6C                 	db	108	;'l'
   281  000679  69                 	db	105	;'i'
   282  00067A  62                 	db	98	;'b'
   283  00067B  72                 	db	114	;'r'
   284  00067C  61                 	db	97	;'a'
   285  00067D  74                 	db	116	;'t'
   286  00067E  69                 	db	105	;'i'
   287  00067F  6E                 	db	110	;'n'
   288  000680  67                 	db	103	;'g'
   289  000681  00                 	db	0
   290  000682                     STR_15:
   291                           
   292                           ; BSR set to: 0
   293  000682  43                 	db	67	;'C'
   294  000683  61                 	db	97	;'a'
   295  000684  70                 	db	112	;'p'
   296  000685  61                 	db	97	;'a'
   297  000686  63                 	db	99	;'c'
   298  000687  69                 	db	105	;'i'
   299  000688  74                 	db	116	;'t'
   300  000689  79                 	db	121	;'y'
   301  00068A  20                 	db	32
   302  00068B  00                 	db	0
   303  00068C                     STR_1:
   304                           
   305                           ; BSR set to: 0
   306  00068C  4C                 	db	76	;'L'
   307  00068D  43                 	db	67	;'C'
   308  00068E  2D                 	db	45
   309  00068F  6D                 	db	109	;'m'
   310  000690  65                 	db	101	;'e'
   311  000691  74                 	db	116	;'t'
   312  000692  65                 	db	101	;'e'
   313  000693  72                 	db	114	;'r'
   314  000694  20                 	db	32
   315  000695  00                 	db	0
   316  000696                     STR_20:
   317                           
   318                           ; BSR set to: 0
   319  000696  0D                 	db	13
   320  000697  0A                 	db	10
   321  000698  43                 	db	67	;'C'
   322  000699  43                 	db	67	;'C'
   323  00069A  61                 	db	97	;'a'
   324  00069B  6C                 	db	108	;'l'
   325  00069C  3D                 	db	61	;'='
   326  00069D  00                 	db	0
   327  00069E                     STR_5:
   328                           
   329                           ; BSR set to: 0
   330  00069E  20                 	db	32
   331  00069F  20                 	db	32
   332  0006A0  20                 	db	32
   333  0006A1  20                 	db	32
   334  0006A2  20                 	db	32
   335  0006A3  20                 	db	32
   336  0006A4  00                 	db	0
   337  0006A5                     STR_17:
   338                           
   339                           ; BSR set to: 0
   340  0006A5  0D                 	db	13
   341  0006A6  0A                 	db	10
   342  0006A7  46                 	db	70	;'F'
   343  0006A8  31                 	db	49	;'1'
   344  0006A9  3D                 	db	61	;'='
   345  0006AA  00                 	db	0
   346  0006AB                     STR_18:
   347                           
   348                           ; BSR set to: 0
   349  0006AB  0D                 	db	13
   350  0006AC  0A                 	db	10
   351  0006AD  46                 	db	70	;'F'
   352  0006AE  32                 	db	50	;'2'
   353  0006AF  3D                 	db	61	;'='
   354  0006B0  00                 	db	0
   355  0006B1                     STR_19:
   356                           
   357                           ; BSR set to: 0
   358  0006B1  0D                 	db	13
   359  0006B2  0A                 	db	10
   360  0006B3  46                 	db	70	;'F'
   361  0006B4  33                 	db	51	;'3'
   362  0006B5  3D                 	db	61	;'='
   363  0006B6  00                 	db	0
   364  0006B7                     STR_14:
   365                           
   366                           ; BSR set to: 0
   367  0006B7  46                 	db	70	;'F'
   368  0006B8  72                 	db	114	;'r'
   369  0006B9  65                 	db	101	;'e'
   370  0006BA  71                 	db	113	;'q'
   371  0006BB  3D                 	db	61	;'='
   372  0006BC  00                 	db	0
   373  0006BD                     STR_22:
   374                           
   375                           ; BSR set to: 0
   376  0006BD  43                 	db	67	;'C'
   377  0006BE  69                 	db	105	;'i'
   378  0006BF  6E                 	db	110	;'n'
   379  0006C0  3D                 	db	61	;'='
   380  0006C1  00                 	db	0
   381  0006C2                     STR_16:
   382                           
   383                           ; BSR set to: 0
   384  0006C2  76                 	db	118	;'v'
   385  0006C3  61                 	db	97	;'a'
   386  0006C4  72                 	db	114	;'r'
   387  0006C5  3D                 	db	61	;'='
   388  0006C6  00                 	db	0
   389  0006C7                     
   390                           ; BSR set to: 0
   391  0006C7  52                 	db	82	;'R'
   392  0006C8  43                 	db	67	;'C'
   393  0006C9  34                 	db	52	;'4'
   394  0006CA  3D                 	db	61	;'='
   395  0006CB  00                 	db	0
   396  0006CC                     STR_34:
   397                           
   398                           ; BSR set to: 0
   399  0006CC  2D                 	db	45
   400  0006CD  2A                 	db	42
   401  0006CE  2D                 	db	45
   402  0006CF  00                 	db	0
   403  0006D0                     
   404                           ; BSR set to: 0
   405  0006D0  6D                 	db	109	;'m'
   406  0006D1  46                 	db	70	;'F'
   407  0006D2  00                 	db	0
   408  0006D3                     
   409                           ; BSR set to: 0
   410  0006D3  6E                 	db	110	;'n'
   411  0006D4  46                 	db	70	;'F'
   412  0006D5  00                 	db	0
   413  0006D6                     
   414                           ; BSR set to: 0
   415  0006D6  70                 	db	112	;'p'
   416  0006D7  46                 	db	70	;'F'
   417  0006D8  00                 	db	0
   418  0006D9                     
   419                           ; BSR set to: 0
   420  0006D9  75                 	db	117	;'u'
   421  0006DA  46                 	db	70	;'F'
   422  0006DB  00                 	db	0
   423  0006DC                     STR_26:
   424                           
   425                           ; BSR set to: 0
   426  0006DC  6D                 	db	109	;'m'
   427  0006DD  48                 	db	72	;'H'
   428  0006DE  00                 	db	0
   429  0006DF                     
   430                           ; BSR set to: 0
   431  0006DF  6E                 	db	110	;'n'
   432  0006E0  48                 	db	72	;'H'
   433  0006E1  00                 	db	0
   434  0006E2                     
   435                           ; BSR set to: 0
   436  0006E2  75                 	db	117	;'u'
   437  0006E3  48                 	db	72	;'H'
   438  0006E4  00                 	db	0
   439  0006E5                     STR_4:
   440                           
   441                           ; BSR set to: 0
   442  0006E5  0D                 	db	13
   443  0006E6  0A                 	db	10
   444  0006E7  00                 	db	0
   445  0000                     
   446                           ; #config settings
   447  0006E8  00                 	db	0	; dummy byte at the end
   448  0000                     
   449                           	psect	nvCOMRAM
   450  000071                     __pnvCOMRAM:
   451                           	opt stack 0
   452  000071                     _CCal:
   453                           	opt stack 0
   454  000071                     	ds	3
   455                           
   456                           	psect	nvBANK0
   457  0000EA                     __pnvBANK0:
   458                           	opt stack 0
   459  0000EA                     _bres:
   460                           	opt stack 0
   461  0000EA                     	ds	4
   462  0000EE                     _led_interval:
   463                           	opt stack 0
   464  0000EE                     	ds	2
   465  0000                     _TMR0	set	4054
   466  0000                     _SPBRG	set	4015
   467  0000                     _TXSTAbits	set	4012
   468  0000                     _RCSTAbits	set	4011
   469  0000                     _LATB	set	3978
   470  0000                     _PIE1	set	3997
   471  0000                     _PIR1	set	3998
   472  0000                     _TMR2	set	4044
   473  0000                     _T2CON	set	4042
   474  0000                     _T0CONbits	set	4053
   475  0000                     _T0CON	set	4053
   476  0000                     _INTCONbits	set	4082
   477  0000                     _PORTC	set	3970
   478  0000                     _INTCON	set	4082
   479  0000                     _PORTCbits	set	3970
   480  0000                     _TRISC	set	3988
   481  0000                     _INTCON2	set	4081
   482  0000                     _TRISB	set	3987
   483  0000                     _TRISA	set	3986
   484  0000                     _TXREG	set	4013
   485  0000                     _PIE1bits	set	3997
   486  0000                     _RCREG	set	4014
   487  0000                     _LATC	set	3979
   488  0000                     _PIR1bits	set	3998
   489                           
   490                           	psect	cinit
   491  00225A                     __pcinit:
   492                           	opt stack 0
   493  00225A                     start_initialization:
   494                           	opt stack 0
   495  00225A                     __initialization:
   496                           	opt stack 0
   497                           
   498                           ; Initialize objects allocated to BANK0 (4 bytes)
   499                           ; load TBLPTR registers with __pidataBANK0
   500  00225A  0E02               	movlw	low __pidataBANK0
   501  00225C  6EF6               	movwf	tblptrl,c
   502  00225E  0E29               	movlw	high __pidataBANK0
   503  002260  6EF7               	movwf	tblptrh,c
   504  002262  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   505  002264  6EF8               	movwf	tblptru,c
   506  002266  EE00  F0F0         	lfsr	0,__pdataBANK0
   507  00226A  EE10 F004          	lfsr	1,4
   508  00226E                     copy_data0:
   509  00226E  0009               	tblrd		*+
   510  002270  CFF5 FFEE          	movff	tablat,postinc0
   511  002274  50E5               	movf	postdec1,w,c
   512  002276  50E1               	movf	fsr1l,w,c
   513  002278  E1FA               	bnz	copy_data0
   514                           
   515                           ; Initialize objects allocated to COMRAM (1 bytes)
   516                           ; load TBLPTR registers with __pidataCOMRAM
   517  00227A  0E08               	movlw	low __pidataCOMRAM
   518  00227C  6EF6               	movwf	tblptrl,c
   519  00227E  0E29               	movlw	high __pidataCOMRAM
   520  002280  6EF7               	movwf	tblptrh,c
   521  002282  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   522  002284  6EF8               	movwf	tblptru,c
   523  002286  0009               	tblrd		*+	;fetch initializer
   524  002288  CFF5 F074          	movff	tablat,__pdataCOMRAM
   525                           
   526                           ; Clear objects allocated to BANK1 (16 bytes)
   527  00228C  EE01  F000         	lfsr	0,__pbssBANK1
   528  002290  0E10               	movlw	16
   529  002292                     clear_0:
   530  002292  6AEE               	clrf	postinc0,c
   531  002294  06E8               	decf	wreg,f,c
   532  002296  E1FD               	bnz	clear_0
   533                           
   534                           ; Clear objects allocated to BANK0 (58 bytes)
   535  002298  EE00  F080         	lfsr	0,__pbssBANK0
   536  00229C  0E3A               	movlw	58
   537  00229E                     clear_1:
   538  00229E  6AEE               	clrf	postinc0,c
   539  0022A0  06E8               	decf	wreg,f,c
   540  0022A2  E1FD               	bnz	clear_1
   541                           
   542                           ; Clear objects allocated to COMRAM (11 bytes)
   543  0022A4  EE00  F066         	lfsr	0,__pbssCOMRAM
   544  0022A8  0E0B               	movlw	11
   545  0022AA                     clear_2:
   546  0022AA  6AEE               	clrf	postinc0,c
   547  0022AC  06E8               	decf	wreg,f,c
   548  0022AE  E1FD               	bnz	clear_2
   549  0022B0                     end_of_initialization:
   550                           	opt stack 0
   551  0022B0                     __end_of__initialization:
   552                           	opt stack 0
   553  0022B0  9075               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   554  0022B2  9275               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   555  0022B4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   556  0022B6  6EF8               	movwf	tblptru,c
   557  0022B8  0100               	movlb	0
   558  0022BA  EFCA  F009         	goto	_main	;jump to C main() function
   559                           tblptru	equ	0xFF8
   560                           tblptrh	equ	0xFF7
   561                           tblptrl	equ	0xFF6
   562                           tablat	equ	0xFF5
   563                           postinc0	equ	0xFEE
   564                           wreg	equ	0xFE8
   565                           postdec1	equ	0xFE5
   566                           fsr1l	equ	0xFE1
   567                           
   568                           	psect	bssCOMRAM
   569  000066                     __pbssCOMRAM:
   570                           	opt stack 0
   571  000066                     _led_cycle:
   572                           	opt stack 0
   573  000066                     	ds	2
   574  000068                     _LCD_lines:
   575                           	opt stack 0
   576  000068                     	ds	1
   577  000069                     _LCD_mode:
   578                           	opt stack 0
   579  000069                     	ds	1
   580  00006A                     _LCD_ctrl:
   581                           	opt stack 0
   582  00006A                     	ds	1
   583  00006B                     _LCD_function:
   584                           	opt stack 0
   585  00006B                     	ds	1
   586  00006C                     _ser_txiptr:
   587                           	opt stack 0
   588  00006C                     	ds	1
   589  00006D                     _ser_txoptr:
   590                           	opt stack 0
   591  00006D                     	ds	1
   592  00006E                     _ser_rxoptr:
   593                           	opt stack 0
   594  00006E                     	ds	1
   595  00006F                     _ser_tmp:
   596                           	opt stack 0
   597  00006F                     	ds	1
   598  000070                     _ser_rxiptr:
   599                           	opt stack 0
   600  000070                     	ds	1
   601                           tblptru	equ	0xFF8
   602                           tblptrh	equ	0xFF7
   603                           tblptrl	equ	0xFF6
   604                           tablat	equ	0xFF5
   605                           postinc0	equ	0xFEE
   606                           wreg	equ	0xFE8
   607                           postdec1	equ	0xFE5
   608                           fsr1l	equ	0xFE1
   609                           
   610                           	psect	dataCOMRAM
   611  000074                     __pdataCOMRAM:
   612                           	opt stack 0
   613  000074                     _mode:
   614                           	opt stack 0
   615  000074                     	ds	1
   616                           tblptru	equ	0xFF8
   617                           tblptrh	equ	0xFF7
   618                           tblptrl	equ	0xFF6
   619                           tablat	equ	0xFF5
   620                           postinc0	equ	0xFEE
   621                           wreg	equ	0xFE8
   622                           postdec1	equ	0xFE5
   623                           fsr1l	equ	0xFE1
   624                           
   625                           	psect	bssBANK0
   626  000080                     __pbssBANK0:
   627                           	opt stack 0
   628  000080                     _ser_txfifo:
   629                           	opt stack 0
   630  000080                     	ds	16
   631  000090                     _timer1of:
   632                           	opt stack 0
   633  000090                     	ds	4
   634  000094                     _msecs:
   635                           	opt stack 0
   636  000094                     	ds	4
   637  000098                     _seconds:
   638                           	opt stack 0
   639  000098                     	ds	4
   640  00009C                     _F3:
   641                           	opt stack 0
   642  00009C                     	ds	3
   643  00009F                     _F2:
   644                           	opt stack 0
   645  00009F                     	ds	3
   646  0000A2                     _blink:
   647                           	opt stack 0
   648  0000A2                     	ds	2
   649  0000A4                     _msecpart:
   650                           	opt stack 0
   651  0000A4                     	ds	2
   652  0000A6                     _buffer:
   653                           	opt stack 0
   654  0000A6                     	ds	17
   655  0000B7                     _F1:
   656                           	opt stack 0
   657  0000B7                     	ds	3
   658                           tblptru	equ	0xFF8
   659                           tblptrh	equ	0xFF7
   660                           tblptrl	equ	0xFF6
   661                           tablat	equ	0xFF5
   662                           postinc0	equ	0xFEE
   663                           wreg	equ	0xFE8
   664                           postdec1	equ	0xFE5
   665                           fsr1l	equ	0xFE1
   666                           
   667                           	psect	dataBANK0
   668  0000F0                     __pdataBANK0:
   669                           	opt stack 0
   670  0000F0                     lcd_gotoxy@F2326:
   671                           	opt stack 0
   672  0000F0                     	ds	4
   673                           tblptru	equ	0xFF8
   674                           tblptrh	equ	0xFF7
   675                           tblptrl	equ	0xFF6
   676                           tablat	equ	0xFF5
   677                           postinc0	equ	0xFEE
   678                           wreg	equ	0xFE8
   679                           postdec1	equ	0xFE5
   680                           fsr1l	equ	0xFE1
   681                           
   682                           	psect	bssBANK1
   683  000100                     __pbssBANK1:
   684                           	opt stack 0
   685  000100                     _ser_rxfifo:
   686                           	opt stack 0
   687  000100                     	ds	16
   688                           tblptru	equ	0xFF8
   689                           tblptrh	equ	0xFF7
   690                           tblptrl	equ	0xFF6
   691                           tablat	equ	0xFF5
   692                           postinc0	equ	0xFEE
   693                           wreg	equ	0xFE8
   694                           postdec1	equ	0xFE5
   695                           fsr1l	equ	0xFE1
   696                           
   697                           	psect	cstackBANK1
   698  000110                     __pcstackBANK1:
   699                           	opt stack 0
   700  000110                     _measure_capacitance$1671:
   701                           	opt stack 0
   702                           
   703                           ; 3 bytes @ 0x0
   704  000110                     	ds	3
   705  000113                     _measure_capacitance$1672:
   706                           	opt stack 0
   707                           
   708                           ; 3 bytes @ 0x3
   709  000113                     	ds	3
   710  000116                     _measure_capacitance$1673:
   711                           	opt stack 0
   712                           
   713                           ; 3 bytes @ 0x6
   714  000116                     	ds	3
   715  000119                     measure_capacitance@unit:
   716                           	opt stack 0
   717                           
   718                           ; 1 bytes @ 0x9
   719  000119                     	ds	1
   720  00011A                     measure_capacitance@var:
   721                           	opt stack 0
   722                           
   723                           ; 2 bytes @ 0xA
   724  00011A                     	ds	2
   725  00011C                     measure_capacitance@Cin:
   726                           	opt stack 0
   727                           
   728                           ; 3 bytes @ 0xC
   729  00011C                     	ds	3
   730                           tblptru	equ	0xFF8
   731                           tblptrh	equ	0xFF7
   732                           tblptrl	equ	0xFF6
   733                           tablat	equ	0xFF5
   734                           postinc0	equ	0xFEE
   735                           wreg	equ	0xFE8
   736                           postdec1	equ	0xFE5
   737                           fsr1l	equ	0xFE1
   738                           
   739                           	psect	cstackBANK0
   740  0000BA                     __pcstackBANK0:
   741                           	opt stack 0
   742  0000BA                     measure_inductance@numerator:
   743                           	opt stack 0
   744  0000BA                     floor@i:
   745                           	opt stack 0
   746                           
   747                           ; 3 bytes @ 0x0
   748  0000BA                     	ds	3
   749  0000BD                     floor@expon:
   750                           	opt stack 0
   751  0000BD                     measure_inductance@denominator:
   752                           	opt stack 0
   753                           
   754                           ; 3 bytes @ 0x3
   755  0000BD                     	ds	2
   756  0000BF                     _exp$1690:
   757                           	opt stack 0
   758                           
   759                           ; 3 bytes @ 0x5
   760  0000BF                     	ds	1
   761  0000C0                     _measure_inductance$1674:
   762                           	opt stack 0
   763                           
   764                           ; 3 bytes @ 0x6
   765  0000C0                     	ds	2
   766  0000C2                     exp@exponent:
   767                           	opt stack 0
   768                           
   769                           ; 2 bytes @ 0x8
   770  0000C2                     	ds	1
   771  0000C3                     _measure_inductance$1678:
   772                           	opt stack 0
   773                           
   774                           ; 3 bytes @ 0x9
   775  0000C3                     	ds	1
   776  0000C4                     exp@sign:
   777                           	opt stack 0
   778                           
   779                           ; 1 bytes @ 0xA
   780  0000C4                     	ds	1
   781  0000C5                     ?_pow:
   782                           	opt stack 0
   783  0000C5                     pow@x:
   784                           	opt stack 0
   785                           
   786                           ; 3 bytes @ 0xB
   787  0000C5                     	ds	1
   788  0000C6                     _measure_inductance$1679:
   789                           	opt stack 0
   790                           
   791                           ; 3 bytes @ 0xC
   792  0000C6                     	ds	2
   793  0000C8                     pow@y:
   794                           	opt stack 0
   795                           
   796                           ; 3 bytes @ 0xE
   797  0000C8                     	ds	1
   798  0000C9                     _measure_inductance$1680:
   799                           	opt stack 0
   800                           
   801                           ; 3 bytes @ 0xF
   802  0000C9                     	ds	2
   803  0000CB                     _pow$1688:
   804                           	opt stack 0
   805                           
   806                           ; 3 bytes @ 0x11
   807  0000CB                     	ds	1
   808  0000CC                     measure_inductance@unit:
   809                           	opt stack 0
   810                           
   811                           ; 1 bytes @ 0x12
   812  0000CC                     	ds	1
   813  0000CD                     _measure_inductance$1675:
   814                           	opt stack 0
   815                           
   816                           ; 3 bytes @ 0x13
   817  0000CD                     	ds	1
   818  0000CE                     _pow$1689:
   819                           	opt stack 0
   820                           
   821                           ; 3 bytes @ 0x14
   822  0000CE                     	ds	2
   823  0000D0                     _measure_inductance$1676:
   824                           	opt stack 0
   825                           
   826                           ; 3 bytes @ 0x16
   827  0000D0                     	ds	1
   828  0000D1                     pow@sign:
   829                           	opt stack 0
   830                           
   831                           ; 1 bytes @ 0x17
   832  0000D1                     	ds	1
   833  0000D2                     pow@yi:
   834                           	opt stack 0
   835                           
   836                           ; 4 bytes @ 0x18
   837  0000D2                     	ds	1
   838  0000D3                     _measure_inductance$1677:
   839                           	opt stack 0
   840                           
   841                           ; 3 bytes @ 0x19
   842  0000D3                     	ds	3
   843  0000D6                     measure_inductance@var:
   844                           	opt stack 0
   845  0000D6                     format_double@fn:
   846                           	opt stack 0
   847                           
   848                           ; 2 bytes @ 0x1C
   849  0000D6                     	ds	2
   850  0000D8                     measure_inductance@Lin:
   851                           	opt stack 0
   852  0000D8                     format_double@num:
   853                           	opt stack 0
   854                           
   855                           ; 3 bytes @ 0x1E
   856  0000D8                     	ds	3
   857  0000DB                     _format_double$1683:
   858                           	opt stack 0
   859                           
   860                           ; 3 bytes @ 0x21
   861  0000DB                     	ds	3
   862  0000DE                     _format_double$1684:
   863                           	opt stack 0
   864                           
   865                           ; 3 bytes @ 0x24
   866  0000DE                     	ds	3
   867  0000E1                     format_double@weight:
   868                           	opt stack 0
   869                           
   870                           ; 3 bytes @ 0x27
   871  0000E1                     	ds	3
   872  0000E4                     format_double@digit:
   873                           	opt stack 0
   874                           
   875                           ; 2 bytes @ 0x2A
   876  0000E4                     	ds	2
   877  0000E6                     format_double@m:
   878                           	opt stack 0
   879                           
   880                           ; 2 bytes @ 0x2C
   881  0000E6                     	ds	2
   882  0000E8                     _main$303:
   883                           	opt stack 0
   884                           
   885                           ; 1 bytes @ 0x2E
   886  0000E8                     	ds	1
   887  0000E9                     main@new_mode:
   888                           	opt stack 0
   889                           
   890                           ; 1 bytes @ 0x2F
   891  0000E9                     	ds	1
   892                           tblptru	equ	0xFF8
   893                           tblptrh	equ	0xFF7
   894                           tblptrl	equ	0xFF6
   895                           tablat	equ	0xFF5
   896                           postinc0	equ	0xFEE
   897                           wreg	equ	0xFE8
   898                           postdec1	equ	0xFE5
   899                           fsr1l	equ	0xFE1
   900                           
   901                           	psect	cstackCOMRAM
   902  000001                     __pcstackCOMRAM:
   903                           	opt stack 0
   904  000001                     ?i2___lwdiv:
   905                           	opt stack 0
   906  000001                     i2___lwdiv@dividend:
   907                           	opt stack 0
   908                           
   909                           ; 2 bytes @ 0x0
   910  000001                     	ds	2
   911  000003                     i2___lwdiv@divisor:
   912                           	opt stack 0
   913                           
   914                           ; 2 bytes @ 0x2
   915  000003                     	ds	2
   916  000005                     i2___lwdiv@quotient:
   917                           	opt stack 0
   918                           
   919                           ; 2 bytes @ 0x4
   920  000005                     	ds	2
   921  000007                     i2___lwdiv@counter:
   922                           	opt stack 0
   923                           
   924                           ; 1 bytes @ 0x6
   925  000007                     	ds	1
   926  000008                     ??_isr:
   927                           
   928                           ; 1 bytes @ 0x7
   929  000008                     	ds	3
   930  00000B                     ??_timer0_init:
   931  00000B                     ??_timer2_init:
   932  00000B                     ??_buffer_putc:
   933  00000B                     ?_timer0_read_ps:
   934                           	opt stack 0
   935  00000B                     ?___lwdiv:
   936                           	opt stack 0
   937  00000B                     ?___lwmod:
   938                           	opt stack 0
   939  00000B                     ?___ftpack:
   940                           	opt stack 0
   941  00000B                     ?_frexp:
   942                           	opt stack 0
   943  00000B                     ?___ftneg:
   944                           	opt stack 0
   945  00000B                     lcd_write4bits@value:
   946                           	opt stack 0
   947  00000B                     lcd_putch@value:
   948                           	opt stack 0
   949  00000B                     lcd_init@fourbitmode:
   950                           	opt stack 0
   951  00000B                     ser_putch@c:
   952                           	opt stack 0
   953  00000B                     ___lwdiv@dividend:
   954                           	opt stack 0
   955  00000B                     ___lwmod@dividend:
   956                           	opt stack 0
   957  00000B                     ___ftpack@arg:
   958                           	opt stack 0
   959  00000B                     frexp@value:
   960                           	opt stack 0
   961  00000B                     ___ftge@ff1:
   962                           	opt stack 0
   963  00000B                     ___ftneg@f1:
   964                           	opt stack 0
   965                           
   966                           ; 3 bytes @ 0xA
   967  00000B                     	ds	1
   968  00000C                     output_putch@c:
   969                           	opt stack 0
   970  00000C                     timer2_init@ps:
   971                           	opt stack 0
   972  00000C                     lcd_send@mode:
   973                           	opt stack 0
   974  00000C                     lcd_puts@string:
   975                           	opt stack 0
   976  00000C                     ser_puts@s:
   977                           	opt stack 0
   978  00000C                     _timer0_init$686:
   979                           	opt stack 0
   980  00000C                     _lcd_init$762:
   981                           	opt stack 0
   982                           
   983                           ; 2 bytes @ 0xB
   984  00000C                     	ds	1
   985  00000D                     ??_lcd_puts:
   986  00000D                     ??_timer0_read_ps:
   987  00000D                     ??_print_buffer:
   988  00000D                     buffer_putc@ch:
   989                           	opt stack 0
   990  00000D                     put_str@s:
   991                           	opt stack 0
   992  00000D                     lcd_send@value:
   993                           	opt stack 0
   994  00000D                     ___lwdiv@divisor:
   995                           	opt stack 0
   996  00000D                     ___lwmod@divisor:
   997                           	opt stack 0
   998                           
   999                           ; 2 bytes @ 0xC
  1000  00000D                     	ds	1
  1001  00000E                     ??_put_str:
  1002  00000E                     buffer_putch@ch:
  1003                           	opt stack 0
  1004  00000E                     print_buffer@i:
  1005                           	opt stack 0
  1006  00000E                     timer2_init@ps_mode:
  1007                           	opt stack 0
  1008  00000E                     lcd_command@value:
  1009                           	opt stack 0
  1010  00000E                     lcd_puts@i:
  1011                           	opt stack 0
  1012  00000E                     ___ftpack@exp:
  1013                           	opt stack 0
  1014  00000E                     frexp@eptr:
  1015                           	opt stack 0
  1016  00000E                     _timer0_init$687:
  1017                           	opt stack 0
  1018  00000E                     ___ftge@ff2:
  1019                           	opt stack 0
  1020                           
  1021                           ; 3 bytes @ 0xD
  1022  00000E                     	ds	1
  1023  00000F                     ??_lcd_clear:
  1024  00000F                     ??_frexp:
  1025  00000F                     buffer_puts@x:
  1026                           	opt stack 0
  1027  00000F                     timer0_read_ps@prev:
  1028                           	opt stack 0
  1029  00000F                     lcd_gotoxy@row:
  1030                           	opt stack 0
  1031  00000F                     lcd_begin@dotsize:
  1032                           	opt stack 0
  1033  00000F                     ___ftpack@sign:
  1034                           	opt stack 0
  1035  00000F                     ___lwdiv@counter:
  1036                           	opt stack 0
  1037  00000F                     ___lwmod@counter:
  1038                           	opt stack 0
  1039  00000F                     put_str@i:
  1040                           	opt stack 0
  1041                           
  1042                           ; 2 bytes @ 0xE
  1043  00000F                     	ds	1
  1044  000010                     ??_lcd_begin:
  1045  000010                     ??___ftpack:
  1046  000010                     lcd_gotoxy@col:
  1047                           	opt stack 0
  1048  000010                     _timer0_init$688:
  1049                           	opt stack 0
  1050  000010                     timer0_read_ps@count:
  1051                           	opt stack 0
  1052  000010                     ___lwdiv@quotient:
  1053                           	opt stack 0
  1054                           
  1055                           ; 2 bytes @ 0xF
  1056  000010                     	ds	1
  1057  000011                     ??___ftge:
  1058  000011                     lcd_begin@lines:
  1059                           	opt stack 0
  1060  000011                     lcd_gotoxy@row_offsets:
  1061                           	opt stack 0
  1062                           
  1063                           ; 4 bytes @ 0x10
  1064  000011                     	ds	1
  1065  000012                     format_number@fn:
  1066                           	opt stack 0
  1067  000012                     _timer0_init$689:
  1068                           	opt stack 0
  1069                           
  1070                           ; 2 bytes @ 0x11
  1071  000012                     	ds	1
  1072  000013                     ?___ftdiv:
  1073                           	opt stack 0
  1074  000013                     ?___awtoft:
  1075                           	opt stack 0
  1076  000013                     ?___lltoft:
  1077                           	opt stack 0
  1078  000013                     ___awtoft@c:
  1079                           	opt stack 0
  1080  000013                     ___ftdiv@f1:
  1081                           	opt stack 0
  1082  000013                     ___lltoft@c:
  1083                           	opt stack 0
  1084                           
  1085                           ; 4 bytes @ 0x12
  1086  000013                     	ds	1
  1087  000014                     timer0_init@prescaler:
  1088                           	opt stack 0
  1089  000014                     format_number@n:
  1090                           	opt stack 0
  1091                           
  1092                           ; 2 bytes @ 0x13
  1093  000014                     	ds	1
  1094  000015                     ??_print_unit:
  1095  000015                     print_indicator@indicate:
  1096                           	opt stack 0
  1097  000015                     timer0_init@ps_mode:
  1098                           	opt stack 0
  1099                           
  1100                           ; 1 bytes @ 0x14
  1101  000015                     	ds	1
  1102  000016                     format_number@base:
  1103                           	opt stack 0
  1104  000016                     ___awtoft@sign:
  1105                           	opt stack 0
  1106  000016                     ___ftdiv@f2:
  1107                           	opt stack 0
  1108                           
  1109                           ; 3 bytes @ 0x15
  1110  000016                     	ds	1
  1111  000017                     ??___lltoft:
  1112  000017                     ?___ftadd:
  1113                           	opt stack 0
  1114  000017                     format_number@pad:
  1115                           	opt stack 0
  1116  000017                     ___ftadd@f1:
  1117                           	opt stack 0
  1118                           
  1119                           ; 3 bytes @ 0x16
  1120  000017                     	ds	1
  1121  000018                     ??_format_number:
  1122                           
  1123                           ; 1 bytes @ 0x17
  1124  000018                     	ds	1
  1125  000019                     ??___ftdiv:
  1126                           
  1127                           ; 1 bytes @ 0x18
  1128  000019                     	ds	1
  1129  00001A                     ___ftadd@f2:
  1130                           	opt stack 0
  1131  00001A                     format_number@buf:
  1132                           	opt stack 0
  1133                           
  1134                           ; 32 bytes @ 0x19
  1135  00001A                     	ds	1
  1136  00001B                     ___lltoft@exp:
  1137                           	opt stack 0
  1138                           
  1139                           ; 1 bytes @ 0x1A
  1140  00001B                     	ds	1
  1141  00001C                     ___ftdiv@cntr:
  1142                           	opt stack 0
  1143                           
  1144                           ; 1 bytes @ 0x1B
  1145  00001C                     	ds	1
  1146  00001D                     ??___ftadd:
  1147  00001D                     ___ftdiv@f3:
  1148                           	opt stack 0
  1149                           
  1150                           ; 3 bytes @ 0x1C
  1151  00001D                     	ds	3
  1152  000020                     ___ftadd@sign:
  1153                           	opt stack 0
  1154  000020                     ___ftdiv@exp:
  1155                           	opt stack 0
  1156                           
  1157                           ; 1 bytes @ 0x1F
  1158  000020                     	ds	1
  1159  000021                     ___ftadd@exp2:
  1160                           	opt stack 0
  1161  000021                     ___ftdiv@sign:
  1162                           	opt stack 0
  1163                           
  1164                           ; 1 bytes @ 0x20
  1165  000021                     	ds	1
  1166  000022                     ___ftadd@exp1:
  1167                           	opt stack 0
  1168                           
  1169                           ; 1 bytes @ 0x21
  1170  000022                     	ds	1
  1171  000023                     ?___ftmul:
  1172                           	opt stack 0
  1173  000023                     ___ftmul@f1:
  1174                           	opt stack 0
  1175                           
  1176                           ; 3 bytes @ 0x22
  1177  000023                     	ds	3
  1178  000026                     ___ftmul@f2:
  1179                           	opt stack 0
  1180                           
  1181                           ; 3 bytes @ 0x25
  1182  000026                     	ds	3
  1183  000029                     ??___ftmul:
  1184                           
  1185                           ; 1 bytes @ 0x28
  1186  000029                     	ds	3
  1187  00002C                     ___ftmul@exp:
  1188                           	opt stack 0
  1189                           
  1190                           ; 1 bytes @ 0x2B
  1191  00002C                     	ds	1
  1192  00002D                     ___ftmul@f3_as_product:
  1193                           	opt stack 0
  1194                           
  1195                           ; 3 bytes @ 0x2C
  1196  00002D                     	ds	3
  1197  000030                     ___ftmul@cntr:
  1198                           	opt stack 0
  1199                           
  1200                           ; 1 bytes @ 0x2F
  1201  000030                     	ds	1
  1202  000031                     ___ftmul@sign:
  1203                           	opt stack 0
  1204                           
  1205                           ; 1 bytes @ 0x30
  1206  000031                     	ds	1
  1207  000032                     ?___ftsub:
  1208                           	opt stack 0
  1209  000032                     ?_eval_poly:
  1210                           	opt stack 0
  1211  000032                     ___ftsub@f1:
  1212                           	opt stack 0
  1213  000032                     eval_poly@x:
  1214                           	opt stack 0
  1215                           
  1216                           ; 3 bytes @ 0x31
  1217  000032                     	ds	3
  1218  000035                     eval_poly@d:
  1219                           	opt stack 0
  1220  000035                     ___ftsub@f2:
  1221                           	opt stack 0
  1222                           
  1223                           ; 3 bytes @ 0x34
  1224  000035                     	ds	1
  1225  000036                     eval_poly@n:
  1226                           	opt stack 0
  1227                           
  1228                           ; 2 bytes @ 0x35
  1229  000036                     	ds	2
  1230  000038                     ??_eval_poly:
  1231                           
  1232                           ; 1 bytes @ 0x37
  1233  000038                     	ds	1
  1234  000039                     eval_poly@res:
  1235                           	opt stack 0
  1236                           
  1237                           ; 3 bytes @ 0x38
  1238  000039                     	ds	1
  1239  00003A                     _format_number$542:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x39
  1243  00003A                     	ds	2
  1244  00003C                     ?_ldexp:
  1245                           	opt stack 0
  1246  00003C                     ?_log:
  1247                           	opt stack 0
  1248  00003C                     format_number@padchar:
  1249                           	opt stack 0
  1250  00003C                     ldexp@value:
  1251                           	opt stack 0
  1252  00003C                     log@x:
  1253                           	opt stack 0
  1254                           
  1255                           ; 3 bytes @ 0x3B
  1256  00003C                     	ds	1
  1257  00003D                     format_number@di:
  1258                           	opt stack 0
  1259                           
  1260                           ; 1 bytes @ 0x3C
  1261  00003D                     	ds	1
  1262  00003E                     format_number@i:
  1263                           	opt stack 0
  1264                           
  1265                           ; 1 bytes @ 0x3D
  1266  00003E                     	ds	1
  1267  00003F                     ?_measure_freq:
  1268                           	opt stack 0
  1269  00003F                     format_xint32@fn:
  1270                           	opt stack 0
  1271  00003F                     print_reading@measurement:
  1272                           	opt stack 0
  1273  00003F                     ldexp@newexp:
  1274                           	opt stack 0
  1275  00003F                     log@exponent:
  1276                           	opt stack 0
  1277                           
  1278                           ; 2 bytes @ 0x3E
  1279  00003F                     	ds	2
  1280  000041                     ??_measure_freq:
  1281  000041                     ??_ldexp:
  1282  000041                     ?_log10:
  1283                           	opt stack 0
  1284  000041                     _print_reading$1685:
  1285                           	opt stack 0
  1286  000041                     log10@x:
  1287                           	opt stack 0
  1288  000041                     format_xint32@x:
  1289                           	opt stack 0
  1290                           
  1291                           ; 4 bytes @ 0x40
  1292  000041                     	ds	1
  1293  000042                     measure_freq@count:
  1294                           	opt stack 0
  1295                           
  1296                           ; 2 bytes @ 0x41
  1297  000042                     	ds	1
  1298  000043                     _print_reading$1686:
  1299                           	opt stack 0
  1300                           
  1301                           ; 2 bytes @ 0x42
  1302  000043                     	ds	1
  1303  000044                     ?___lwtoft:
  1304                           	opt stack 0
  1305  000044                     ___lwtoft@c:
  1306                           	opt stack 0
  1307  000044                     _log10$1687:
  1308                           	opt stack 0
  1309                           
  1310                           ; 3 bytes @ 0x43
  1311  000044                     	ds	1
  1312  000045                     
  1313                           ; 1 bytes @ 0x44
  1314  000045                     	ds	2
  1315  000047                     ?___fttol:
  1316                           	opt stack 0
  1317  000047                     calibrate@i:
  1318                           	opt stack 0
  1319  000047                     ___fttol@f1:
  1320                           	opt stack 0
  1321                           
  1322                           ; 3 bytes @ 0x46
  1323  000047                     	ds	4
  1324  00004B                     ??___fttol:
  1325                           
  1326                           ; 1 bytes @ 0x4A
  1327  00004B                     	ds	5
  1328  000050                     ___fttol@sign1:
  1329                           	opt stack 0
  1330                           
  1331                           ; 1 bytes @ 0x4F
  1332  000050                     	ds	1
  1333  000051                     ___fttol@lval:
  1334                           	opt stack 0
  1335                           
  1336                           ; 4 bytes @ 0x50
  1337  000051                     	ds	4
  1338  000055                     ___fttol@exp1:
  1339                           	opt stack 0
  1340                           
  1341                           ; 1 bytes @ 0x54
  1342  000055                     	ds	1
  1343  000056                     ?___altoft:
  1344                           	opt stack 0
  1345  000056                     ___altoft@c:
  1346                           	opt stack 0
  1347                           
  1348                           ; 4 bytes @ 0x55
  1349  000056                     	ds	4
  1350  00005A                     ??___altoft:
  1351                           
  1352                           ; 1 bytes @ 0x59
  1353  00005A                     	ds	4
  1354  00005E                     ___altoft@exp:
  1355                           	opt stack 0
  1356                           
  1357                           ; 1 bytes @ 0x5D
  1358  00005E                     	ds	1
  1359  00005F                     ___altoft@sign:
  1360                           	opt stack 0
  1361                           
  1362                           ; 1 bytes @ 0x5E
  1363  00005F                     	ds	1
  1364  000060                     ?_floor:
  1365                           	opt stack 0
  1366  000060                     floor@x:
  1367                           	opt stack 0
  1368                           
  1369                           ; 3 bytes @ 0x5F
  1370  000060                     	ds	3
  1371  000063                     ?_exp:
  1372                           	opt stack 0
  1373  000063                     exp@x:
  1374                           	opt stack 0
  1375                           
  1376                           ; 3 bytes @ 0x62
  1377  000063                     	ds	3
  1378  000066                     tblptru	equ	0xFF8
  1379                           tblptrh	equ	0xFF7
  1380                           tblptrl	equ	0xFF6
  1381                           tablat	equ	0xFF5
  1382                           postinc0	equ	0xFEE
  1383                           wreg	equ	0xFE8
  1384                           postdec1	equ	0xFE5
  1385                           fsr1l	equ	0xFE1
  1386                           
  1387                           ; 1 bytes @ 0x65
  1388 ;;
  1389 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1390 ;;
  1391 ;; *************** function _main *****************
  1392 ;; Defined at:
  1393 ;;		line 117 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../LC-meter.c"
  1394 ;; Parameters:    Size  Location     Type
  1395 ;;		None
  1396 ;; Auto vars:     Size  Location     Type
  1397 ;;  new_mode        1   47[BANK0 ] unsigned char 
  1398 ;; Return value:  Size  Location     Type
  1399 ;;                  1    wreg      void 
  1400 ;; Registers used:
  1401 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1402 ;; Tracked objects:
  1403 ;;		On entry : 0/0
  1404 ;;		On exit  : 0/0
  1405 ;;		Unchanged: 0/0
  1406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1407 ;;      Params:         0       0       0       0       0       0       0
  1408 ;;      Locals:         0       2       0       0       0       0       0
  1409 ;;      Temps:          0       0       0       0       0       0       0
  1410 ;;      Totals:         0       2       0       0       0       0       0
  1411 ;;Total ram usage:        2 bytes
  1412 ;; Hardware stack levels required when called:    9
  1413 ;; This function calls:
  1414 ;;		_calibrate
  1415 ;;		_delay10ms
  1416 ;;		_format_double
  1417 ;;		_lcd_begin
  1418 ;;		_lcd_clear
  1419 ;;		_lcd_gotoxy
  1420 ;;		_lcd_init
  1421 ;;		_lcd_puts
  1422 ;;		_measure_capacitance
  1423 ;;		_measure_inductance
  1424 ;;		_print_indicator
  1425 ;;		_ser_init
  1426 ;;		_ser_puts
  1427 ;;		_timer0_init
  1428 ;;		_timer2_init
  1429 ;; This function is called by:
  1430 ;;		Startup code after reset
  1431 ;; This function uses a non-reentrant model
  1432 ;;
  1433                           
  1434                           	psect	text0
  1435  001394                     __ptext0:
  1436                           	opt stack 0
  1437  001394                     _main:
  1438                           	opt stack 0
  1439  001394  FFFF               	dw	65535	; assembler added errata NOP
  1440                           
  1441                           ;LC-meter.c: 118: bres = msecpart = msecs = seconds = 0;
  1442                           
  1443                           ;incstack = 0
  1444  001396  0100               	movlb	0	; () banked
  1445  001398  6B98               	clrf	_seconds& (0+255),b	;volatile
  1446  00139A  6B99               	clrf	(_seconds+1)& (0+255),b	;volatile
  1447  00139C  6B9A               	clrf	(_seconds+2)& (0+255),b	;volatile
  1448  00139E  6B9B               	clrf	(_seconds+3)& (0+255),b	;volatile
  1449  0013A0  C098  F094         	movff	_seconds,_msecs	;volatile
  1450  0013A4  C099  F095         	movff	_seconds+1,_msecs+1	;volatile
  1451  0013A8  C09A  F096         	movff	_seconds+2,_msecs+2	;volatile
  1452  0013AC  C09B  F097         	movff	_seconds+3,_msecs+3	;volatile
  1453  0013B0  C094  F0A4         	movff	_msecs,_msecpart	;volatile
  1454  0013B4  C095  F0A5         	movff	_msecs+1,_msecpart+1	;volatile
  1455  0013B8  C0A4  F0EA         	movff	_msecpart,_bres	;volatile
  1456  0013BC  C0A5  F0EB         	movff	_msecpart+1,_bres+1	;volatile
  1457  0013C0  6BEC               	clrf	(_bres+2)& (0+255),b	;volatile
  1458  0013C2  6BED               	clrf	(_bres+3)& (0+255),b	;volatile
  1459                           
  1460                           ; BSR set to: 0
  1461                           ;LC-meter.c: 119: mode = -1;
  1462  0013C4  6874               	setf	_mode,c
  1463                           
  1464                           ;LC-meter.c: 121: CCal = 1000;
  1465  0013C6  6A71               	clrf	_CCal,c
  1466  0013C8  0E7A               	movlw	122
  1467  0013CA  6E72               	movwf	_CCal+1,c
  1468  0013CC  0E44               	movlw	68
  1469  0013CE  6E73               	movwf	_CCal+2,c
  1470                           
  1471                           ; BSR set to: 0
  1472                           ;LC-meter.c: 123: led_cycle = 0;
  1473  0013D0  6A66               	clrf	_led_cycle,c	;volatile
  1474  0013D2  6A67               	clrf	_led_cycle+1,c	;volatile
  1475                           
  1476                           ;LC-meter.c: 124: led_interval = 500;
  1477  0013D4  0E01               	movlw	1
  1478  0013D6  6FEF               	movwf	(_led_interval+1)& (0+255),b	;volatile
  1479  0013D8  0EF4               	movlw	244
  1480  0013DA  6FEE               	movwf	_led_interval& (0+255),b	;volatile
  1481                           
  1482                           ;LC-meter.c: 134: TRISA = 0b11001111;
  1483  0013DC  0ECF               	movlw	207
  1484  0013DE  6E92               	movwf	3986,c	;volatile
  1485                           
  1486                           ; BSR set to: 0
  1487                           ;LC-meter.c: 136: TRISB &= 0b00001111;
  1488  0013E0  0E0F               	movlw	15
  1489  0013E2  1693               	andwf	3987,f,c	;volatile
  1490                           
  1491                           ; BSR set to: 0
  1492                           ;LC-meter.c: 139: timer0_init(0b1000 | 0x20 | 0x40);
  1493  0013E4  0E68               	movlw	104
  1494  0013E6  EC54  F00F         	call	_timer0_init
  1495                           
  1496                           ;LC-meter.c: 140: timer2_init(0b100 | 0x80);
  1497  0013EA  0E84               	movlw	132
  1498  0013EC  EC39  F013         	call	_timer2_init
  1499                           
  1500                           ;LC-meter.c: 147: INTCON2 &= ~0b10000000;
  1501  0013F0  9EF1               	bcf	intcon2,7,c	;volatile
  1502                           
  1503                           ;LC-meter.c: 155: TRISC = 0b10110011;
  1504  0013F2  0EB3               	movlw	179
  1505  0013F4  6E94               	movwf	3988,c	;volatile
  1506                           
  1507                           ;LC-meter.c: 159: PORTCbits.RC3 = 1;
  1508  0013F6  8682               	bsf	3970,3,c	;volatile
  1509                           
  1510                           ;LC-meter.c: 162: TRISC &= ~(1 << 2);
  1511  0013F8  9494               	bcf	3988,2,c	;volatile
  1512                           
  1513                           ;LC-meter.c: 163: LATC &= ~(1 << 2); LATC |= (!!(1)) << 2;;
  1514  0013FA  948B               	bcf	3979,2,c	;volatile
  1515  0013FC  848B               	bsf	3979,2,c	;volatile
  1516                           
  1517                           ;LC-meter.c: 165: timer2_init(0b000 | 0x80);
  1518  0013FE  0E80               	movlw	128
  1519  001400  EC39  F013         	call	_timer2_init
  1520                           
  1521                           ;LC-meter.c: 172: lcd_init(1);
  1522  001404  0E01               	movlw	1
  1523  001406  EC54  F013         	call	_lcd_init
  1524                           
  1525                           ;LC-meter.c: 173: lcd_begin(2, 1);
  1526  00140A  0E01               	movlw	1
  1527  00140C  6E0F               	movwf	lcd_begin@dotsize,c
  1528  00140E  0E02               	movlw	2
  1529  001410  EC12  F00C         	call	_lcd_begin
  1530                           
  1531                           ;LC-meter.c: 176: TRISC |= (1 << 4);
  1532  001414  8894               	bsf	3988,4,c	;volatile
  1533                           
  1534                           ;LC-meter.c: 177: TRISC &= ~(1 << 5);
  1535  001416  9A94               	bcf	3988,5,c	;volatile
  1536                           
  1537                           ;LC-meter.c: 179: LATC &= ~(1 << 5);
  1538  001418  9A8B               	bcf	3979,5,c	;volatile
  1539                           
  1540                           ;LC-meter.c: 180: delay10ms(50);
  1541  00141A  0E32               	movlw	50
  1542  00141C  EC7E  F014         	call	_delay10ms
  1543                           
  1544                           ;LC-meter.c: 181: LATC |= (1 << 5);
  1545  001420  8A8B               	bsf	3979,5,c	;volatile
  1546                           
  1547                           ;LC-meter.c: 182: delay10ms(50);
  1548  001422  0E32               	movlw	50
  1549  001424  EC7E  F014         	call	_delay10ms
  1550                           
  1551                           ;LC-meter.c: 183: LATC &= ~(1 << 5);
  1552  001428  9A8B               	bcf	3979,5,c	;volatile
  1553                           
  1554                           ;LC-meter.c: 184: delay10ms(50);
  1555  00142A  0E32               	movlw	50
  1556  00142C  EC7E  F014         	call	_delay10ms
  1557                           
  1558                           ;LC-meter.c: 185: LATC |= (1 << 5);
  1559  001430  8A8B               	bsf	3979,5,c	;volatile
  1560                           
  1561                           ;LC-meter.c: 186: delay10ms(50);
  1562  001432  0E32               	movlw	50
  1563  001434  EC7E  F014         	call	_delay10ms
  1564                           
  1565                           ;LC-meter.c: 187: LATC &= ~(1 << 5);
  1566  001438  9A8B               	bcf	3979,5,c	;volatile
  1567                           
  1568                           ;LC-meter.c: 190: ser_init();
  1569  00143A  ECC7  F013         	call	_ser_init	;wreg free
  1570                           
  1571                           ;LC-meter.c: 197: INTCON |= 0xc0;
  1572  00143E  0EC0               	movlw	192
  1573  001440  12F2               	iorwf	intcon,f,c	;volatile
  1574                           
  1575                           ;LC-meter.c: 203: lcd_gotoxy(0, 0);
  1576  001442  0E00               	movlw	0
  1577  001444  6A0F               	clrf	lcd_gotoxy@row,c
  1578  001446  EC1D  F013         	call	_lcd_gotoxy
  1579                           
  1580                           ;LC-meter.c: 204: lcd_puts("LC-meter ");
  1581  00144A  0E8C               	movlw	low STR_1
  1582  00144C  6E0C               	movwf	lcd_puts@string,c
  1583  00144E  ECC4  F012         	call	_lcd_puts	;wreg free
  1584                           
  1585                           ;LC-meter.c: 205: format_double(&lcd_putch, CCal);
  1586  001452  0EC0               	movlw	low _lcd_putch
  1587  001454  0100               	movlb	0	; () banked
  1588  001456  6FD6               	movwf	format_double@fn& (0+255),b
  1589  001458  0E28               	movlw	high _lcd_putch
  1590  00145A  6FD7               	movwf	(format_double@fn+1)& (0+255),b
  1591  00145C  C071  F0D8         	movff	_CCal,format_double@num
  1592  001460  C072  F0D9         	movff	_CCal+1,format_double@num+1
  1593  001464  C073  F0DA         	movff	_CCal+2,format_double@num+2
  1594  001468  EC51  F008         	call	_format_double	;wreg free
  1595                           
  1596                           ;LC-meter.c: 212: delay10ms(200);
  1597  00146C  0EC8               	movlw	200
  1598  00146E  EC7E  F014         	call	_delay10ms
  1599                           
  1600                           ;LC-meter.c: 215: calibrate();
  1601  001472  ECF7  F00C         	call	_calibrate	;wreg free
  1602                           
  1603                           ;LC-meter.c: 218: lcd_clear();
  1604  001476  EC48  F014         	call	_lcd_clear	;wreg free
  1605  00147A                     l4911:
  1606  00147A  FFFF               	dw	65535	; assembler added errata NOP
  1607  00147C  0E01               	movlw	1
  1608                           
  1609                           ;LC-meter.c: 227: char new_mode = (!!(PORTC & (1 << 4)));
  1610  00147E  A882               	btfss	3970,4,c	;volatile
  1611  001480  0E00               	movlw	0
  1612  001482  0100               	movlb	0	; () banked
  1613  001484  6FE9               	movwf	main@new_mode& (0+255),b
  1614                           
  1615                           ; BSR set to: 0
  1616                           ;LC-meter.c: 229: if(new_mode != mode) {
  1617  001486  1874               	xorwf	_mode,w,c
  1618  001488  E00F               	bz	l119
  1619                           
  1620                           ; BSR set to: 0
  1621                           ;LC-meter.c: 231: ser_puts(mode ? "- C (Unit: F) -" : "- L (Unit: H) -");
  1622  00148A  5074               	movf	_mode,w,c
  1623                           
  1624                           ; BSR set to: 0
  1625  00148C  0E4A               	movlw	low STR_3
  1626  00148E  A4D8               	btfss	status,2,c
  1627                           
  1628                           ; BSR set to: 0
  1629  001490  0E3A               	movlw	low STR_2
  1630  001492  6FE8               	movwf	_main$303& (0+255),b
  1631                           
  1632                           ; BSR set to: 0
  1633  001494  C0E8  F00C         	movff	_main$303,ser_puts@s
  1634  001498  EC84  F013         	call	_ser_puts	;wreg free
  1635                           
  1636                           ;LC-meter.c: 232: ser_puts("\r\n");
  1637  00149C  0EE5               	movlw	low STR_4
  1638  00149E  6E0C               	movwf	ser_puts@s,c
  1639  0014A0  EC84  F013         	call	_ser_puts	;wreg free
  1640                           
  1641                           ;LC-meter.c: 233: mode = new_mode;
  1642  0014A4  C0E9  F074         	movff	main@new_mode,_mode
  1643  0014A8                     l119:
  1644                           
  1645                           ;LC-meter.c: 234: }
  1646                           ;LC-meter.c: 237: if(led_cycle >= led_interval)
  1647  0014A8  0100               	movlb	0	; () banked
  1648  0014AA  51EE               	movf	_led_interval& (0+255),w,b	;volatile
  1649  0014AC  5C66               	subwf	_led_cycle,w,c	;volatile
  1650  0014AE  51EF               	movf	(_led_interval+1)& (0+255),w,b	;volatile
  1651  0014B0  5867               	subwfb	_led_cycle+1,w,c	;volatile
  1652  0014B2  E302               	bnc	l4929
  1653                           
  1654                           ; BSR set to: 0
  1655                           ;LC-meter.c: 238: led_cycle = 0;
  1656  0014B4  6A66               	clrf	_led_cycle,c	;volatile
  1657  0014B6  6A67               	clrf	_led_cycle+1,c	;volatile
  1658  0014B8                     l4929:
  1659                           
  1660                           ; BSR set to: 0
  1661                           ;LC-meter.c: 240: if(mode)
  1662  0014B8  5074               	movf	_mode,w,c
  1663  0014BA  E003               	bz	l4933
  1664                           
  1665                           ; BSR set to: 0
  1666                           ;LC-meter.c: 241: measure_capacitance();
  1667  0014BC  EC7F  F005         	call	_measure_capacitance	;wreg free
  1668  0014C0  D002               	goto	l4935
  1669  0014C2                     l4933:
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;LC-meter.c: 242: else
  1673                           ;LC-meter.c: 243: measure_inductance();
  1674  0014C2  EC75  F003         	call	_measure_inductance	;wreg free
  1675  0014C6                     l4935:
  1676  0014C6  FFFF               	dw	65535	; assembler added errata NOP
  1677                           
  1678                           ;LC-meter.c: 245: print_indicator(1);
  1679  0014C8  0E01               	movlw	1
  1680  0014CA  ECB2  F013         	call	_print_indicator
  1681                           
  1682                           ;LC-meter.c: 246: delay10ms(30);
  1683  0014CE  0E1E               	movlw	30
  1684  0014D0  EC7E  F014         	call	_delay10ms
  1685                           
  1686                           ;LC-meter.c: 248: print_indicator(0);
  1687  0014D4  0E00               	movlw	0
  1688  0014D6  ECB2  F013         	call	_print_indicator
  1689                           
  1690                           ;LC-meter.c: 249: delay10ms(20);
  1691  0014DA  0E14               	movlw	20
  1692  0014DC  EC7E  F014         	call	_delay10ms
  1693                           
  1694                           ;LC-meter.c: 250: }
  1695  0014E0  D7CC               	goto	l4911
  1696  0014E2                     __end_of_main:
  1697                           	opt stack 0
  1698                           tblptru	equ	0xFF8
  1699                           tblptrh	equ	0xFF7
  1700                           tblptrl	equ	0xFF6
  1701                           tablat	equ	0xFF5
  1702                           intcon	equ	0xFF2
  1703                           intcon2	equ	0xFF1
  1704                           postinc0	equ	0xFEE
  1705                           wreg	equ	0xFE8
  1706                           postdec1	equ	0xFE5
  1707                           fsr1l	equ	0xFE1
  1708                           status	equ	0xFD8
  1709                           
  1710 ;; *************** function _timer2_init *****************
  1711 ;; Defined at:
  1712 ;;		line 145 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../lib/timer.c"
  1713 ;; Parameters:    Size  Location     Type
  1714 ;;  ps_mode         1    wreg     unsigned char 
  1715 ;; Auto vars:     Size  Location     Type
  1716 ;;  ps_mode         1   13[COMRAM] unsigned char 
  1717 ;;  postscaler      1    0        unsigned char 
  1718 ;;  ps              1   11[COMRAM] unsigned char 
  1719 ;; Return value:  Size  Location     Type
  1720 ;;                  1    wreg      void 
  1721 ;; Registers used:
  1722 ;;		wreg, status,2, status,0
  1723 ;; Tracked objects:
  1724 ;;		On entry : 0/0
  1725 ;;		On exit  : 0/0
  1726 ;;		Unchanged: 0/0
  1727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1728 ;;      Params:         0       0       0       0       0       0       0
  1729 ;;      Locals:         3       0       0       0       0       0       0
  1730 ;;      Temps:          1       0       0       0       0       0       0
  1731 ;;      Totals:         4       0       0       0       0       0       0
  1732 ;;Total ram usage:        4 bytes
  1733 ;; Hardware stack levels used:    1
  1734 ;; Hardware stack levels required when called:    2
  1735 ;; This function calls:
  1736 ;;		Nothing
  1737 ;; This function is called by:
  1738 ;;		_main
  1739 ;; This function uses a non-reentrant model
  1740 ;;
  1741                           
  1742                           	psect	text1
  1743  002672                     __ptext1:
  1744                           	opt stack 0
  1745  002672                     _timer2_init:
  1746                           	opt stack 0
  1747  002672  FFFF               	dw	65535	; assembler added errata NOP
  1748                           
  1749                           ;incstack = 0
  1750                           ;timer2_init@ps_mode stored from wreg
  1751  002674  6E0E               	movwf	timer2_init@ps_mode,c
  1752                           
  1753                           ;timer.c: 146: uint8_t ps = ps_mode & 0b1111;
  1754  002676  500E               	movf	timer2_init@ps_mode,w,c
  1755  002678  0B0F               	andlw	15
  1756  00267A  6E0C               	movwf	timer2_init@ps,c
  1757                           
  1758                           ;timer.c: 150: T2CON &= ~0b01111111;
  1759  00267C  0E80               	movlw	128
  1760  00267E  16CA               	andwf	4042,f,c	;volatile
  1761                           
  1762                           ;timer.c: 152: T2CON |= (postscaler & 0b1111) << 3;
  1763  002680  50CA               	movf	4042,w,c	;volatile
  1764                           
  1765                           ;timer.c: 153: T2CON |= (ps & 0b11);
  1766  002682  500C               	movf	timer2_init@ps,w,c
  1767  002684  0B03               	andlw	3
  1768  002686  12CA               	iorwf	4042,f,c	;volatile
  1769                           
  1770                           ;timer.c: 155: TMR2 = 0;
  1771  002688  6ACC               	clrf	4044,c	;volatile
  1772                           
  1773                           ;timer.c: 157: T2CON |= 0b100;
  1774  00268A  84CA               	bsf	4042,2,c	;volatile
  1775                           
  1776                           ;timer.c: 160: PIR1 &= ~0b10;
  1777  00268C  929E               	bcf	3998,1,c	;volatile
  1778                           
  1779                           ;timer.c: 161: PIE1 = (!!(ps_mode & 0x80)) << 1;
  1780  00268E  AE0E               	btfss	timer2_init@ps_mode,7,c
  1781  002690  D003               	goto	u4340
  1782  002692  6A0B               	clrf	??_timer2_init& (0+255),c
  1783  002694  2A0B               	incf	??_timer2_init& (0+255),f,c
  1784  002696  D002               	goto	u4358
  1785  002698                     u4340:
  1786  002698  FFFF               	dw	65535	; assembler added errata NOP
  1787  00269A  6A0B               	clrf	??_timer2_init& (0+255),c
  1788  00269C                     u4358:
  1789  00269C  FFFF               	dw	65535	; assembler added errata NOP
  1790  00269E  90D8               	bcf	status,0,c
  1791  0026A0  340B               	rlcf	??_timer2_init,w,c
  1792  0026A2  6E9D               	movwf	3997,c	;volatile
  1793  0026A4  0012               	return		;funcret
  1794  0026A6  FFFF               	dw	65535	; errata NOP
  1795  0026A8                     __end_of_timer2_init:
  1796                           	opt stack 0
  1797                           tblptru	equ	0xFF8
  1798                           tblptrh	equ	0xFF7
  1799                           tblptrl	equ	0xFF6
  1800                           tablat	equ	0xFF5
  1801                           intcon	equ	0xFF2
  1802                           intcon2	equ	0xFF1
  1803                           postinc0	equ	0xFEE
  1804                           wreg	equ	0xFE8
  1805                           postdec1	equ	0xFE5
  1806                           fsr1l	equ	0xFE1
  1807                           status	equ	0xFD8
  1808                           
  1809 ;; *************** function _timer0_init *****************
  1810 ;; Defined at:
  1811 ;;		line 26 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../lib/timer.c"
  1812 ;; Parameters:    Size  Location     Type
  1813 ;;  ps_mode         1    wreg     unsigned char 
  1814 ;; Auto vars:     Size  Location     Type
  1815 ;;  ps_mode         1   20[COMRAM] unsigned char 
  1816 ;;  prescaler       1   19[COMRAM] unsigned char 
  1817 ;; Return value:  Size  Location     Type
  1818 ;;                  1    wreg      void 
  1819 ;; Registers used:
  1820 ;;		wreg, status,2, status,0
  1821 ;; Tracked objects:
  1822 ;;		On entry : 3F/0
  1823 ;;		On exit  : 0/0
  1824 ;;		Unchanged: 0/0
  1825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1826 ;;      Params:         0       0       0       0       0       0       0
  1827 ;;      Locals:        10       0       0       0       0       0       0
  1828 ;;      Temps:          1       0       0       0       0       0       0
  1829 ;;      Totals:        11       0       0       0       0       0       0
  1830 ;;Total ram usage:       11 bytes
  1831 ;; Hardware stack levels used:    1
  1832 ;; Hardware stack levels required when called:    2
  1833 ;; This function calls:
  1834 ;;		Nothing
  1835 ;; This function is called by:
  1836 ;;		_main
  1837 ;; This function uses a non-reentrant model
  1838 ;;
  1839                           
  1840                           	psect	text2
  1841  001EA8                     __ptext2:
  1842                           	opt stack 0
  1843  001EA8                     _timer0_init:
  1844                           	opt stack 0
  1845  001EA8  FFFF               	dw	65535	; assembler added errata NOP
  1846                           
  1847                           ;incstack = 0
  1848                           ;timer0_init@ps_mode stored from wreg
  1849  001EAA  6E15               	movwf	timer0_init@ps_mode,c
  1850                           
  1851                           ;timer.c: 27: uint8_t prescaler = ps_mode & 0b1111;
  1852  001EAC  5015               	movf	timer0_init@ps_mode,w,c
  1853  001EAE  0B0F               	andlw	15
  1854  001EB0  6E14               	movwf	timer0_init@prescaler,c
  1855                           
  1856                           ;timer.c: 30: TMR0 = 0;
  1857  001EB2  6AD6               	clrf	4054,c	;volatile
  1858  001EB4  6AD7               	clrf	4055,c	;volatile
  1859                           
  1860                           ;timer.c: 31: T0CON |= (!!(ps_mode & 0x40)) ? 0x40 : 0x00;
  1861  001EB6  BC15               	btfsc	timer0_init@ps_mode,6,c
  1862  001EB8  D003               	goto	l4533
  1863  001EBA  6A0C               	clrf	_timer0_init$686,c
  1864  001EBC  6A0D               	clrf	_timer0_init$686+1,c
  1865  001EBE  D004               	goto	l4535
  1866  001EC0                     l4533:
  1867  001EC0  FFFF               	dw	65535	; assembler added errata NOP
  1868  001EC2  6A0D               	clrf	_timer0_init$686+1,c
  1869  001EC4  0E40               	movlw	64
  1870  001EC6  6E0C               	movwf	_timer0_init$686,c
  1871  001EC8                     l4535:
  1872  001EC8  FFFF               	dw	65535	; assembler added errata NOP
  1873  001ECA  500C               	movf	_timer0_init$686,w,c
  1874  001ECC  12D5               	iorwf	4053,f,c	;volatile
  1875                           
  1876                           ;timer.c: 52: T0CON |= (!!(ps_mode & 0x20)) ? 0x20 : 0x00;
  1877  001ECE  BA15               	btfsc	timer0_init@ps_mode,5,c
  1878  001ED0  D003               	goto	l4541
  1879  001ED2  6A0E               	clrf	_timer0_init$687,c
  1880  001ED4  6A0F               	clrf	_timer0_init$687+1,c
  1881  001ED6  D004               	goto	l4543
  1882  001ED8                     l4541:
  1883  001ED8  FFFF               	dw	65535	; assembler added errata NOP
  1884  001EDA  6A0F               	clrf	_timer0_init$687+1,c
  1885  001EDC  0E20               	movlw	32
  1886  001EDE  6E0E               	movwf	_timer0_init$687,c
  1887  001EE0                     l4543:
  1888  001EE0  FFFF               	dw	65535	; assembler added errata NOP
  1889  001EE2  500E               	movf	_timer0_init$687,w,c
  1890  001EE4  12D5               	iorwf	4053,f,c	;volatile
  1891                           
  1892                           ;timer.c: 55: T0CON |= (!!(ps_mode & 0x10)) ? 0x10 : 0x00;
  1893  001EE6  B815               	btfsc	timer0_init@ps_mode,4,c
  1894  001EE8  D003               	goto	l4549
  1895  001EEA  6A10               	clrf	_timer0_init$688,c
  1896  001EEC  6A11               	clrf	_timer0_init$688+1,c
  1897  001EEE  D004               	goto	l4551
  1898  001EF0                     l4549:
  1899  001EF0  FFFF               	dw	65535	; assembler added errata NOP
  1900  001EF2  6A11               	clrf	_timer0_init$688+1,c
  1901  001EF4  0E10               	movlw	16
  1902  001EF6  6E10               	movwf	_timer0_init$688,c
  1903  001EF8                     l4551:
  1904  001EF8  FFFF               	dw	65535	; assembler added errata NOP
  1905  001EFA  5010               	movf	_timer0_init$688,w,c
  1906  001EFC  12D5               	iorwf	4053,f,c	;volatile
  1907                           
  1908                           ;timer.c: 58: T0CON &= (!!prescaler) ? ~0x08 : ~0x00;
  1909  001EFE  5014               	movf	timer0_init@prescaler,w,c
  1910  001F00  E103               	bnz	l4557
  1911  001F02  6812               	setf	_timer0_init$689,c
  1912  001F04  6813               	setf	_timer0_init$689+1,c
  1913  001F06  D003               	goto	l4559
  1914  001F08                     l4557:
  1915  001F08  6813               	setf	_timer0_init$689+1,c
  1916  001F0A  0EF7               	movlw	247
  1917  001F0C  6E12               	movwf	_timer0_init$689,c
  1918  001F0E                     l4559:
  1919  001F0E  FFFF               	dw	65535	; assembler added errata NOP
  1920  001F10  5012               	movf	_timer0_init$689,w,c
  1921  001F12  16D5               	andwf	4053,f,c	;volatile
  1922                           
  1923                           ;timer.c: 60: T0CON &= ~0b111;
  1924  001F14  0EF8               	movlw	248
  1925  001F16  16D5               	andwf	4053,f,c	;volatile
  1926                           
  1927                           ;timer.c: 62: if(prescaler > 0) {
  1928  001F18  5014               	movf	timer0_init@prescaler,w,c
  1929  001F1A  E003               	bz	l4565
  1930                           
  1931                           ;timer.c: 63: T0CON |= (prescaler - 1) & 0b111;
  1932  001F1C  0414               	decf	timer0_init@prescaler,w,c
  1933  001F1E  0B07               	andlw	7
  1934  001F20  12D5               	iorwf	4053,f,c	;volatile
  1935  001F22                     l4565:
  1936                           
  1937                           ;timer.c: 69: }
  1938                           ;timer.c: 72: INTCONbits.TMR0IF = 0;
  1939  001F22  94F2               	bcf	intcon,2,c	;volatile
  1940                           
  1941                           ;timer.c: 75: INTCONbits.T0IE = (ps_mode & 0x80) ? 1 : 0;
  1942  001F24  AE15               	btfss	timer0_init@ps_mode,7,c
  1943  001F26  D003               	goto	u4320
  1944  001F28  6A0B               	clrf	??_timer0_init& (0+255),c
  1945  001F2A  2A0B               	incf	??_timer0_init& (0+255),f,c
  1946  001F2C  D002               	goto	u4338
  1947  001F2E                     u4320:
  1948  001F2E  FFFF               	dw	65535	; assembler added errata NOP
  1949  001F30  6A0B               	clrf	??_timer0_init& (0+255),c
  1950  001F32                     u4338:
  1951  001F32  FFFF               	dw	65535	; assembler added errata NOP
  1952  001F34  3A0B               	swapf	??_timer0_init,f,c
  1953  001F36  460B               	rlncf	??_timer0_init,f,c
  1954  001F38  50F2               	movf	intcon,w,c	;volatile
  1955  001F3A  180B               	xorwf	??_timer0_init,w,c
  1956  001F3C  0BDF               	andlw	-33
  1957  001F3E  180B               	xorwf	??_timer0_init,w,c
  1958  001F40  6EF2               	movwf	intcon,c	;volatile
  1959  001F42  0012               	return		;funcret
  1960  001F44  FFFF               	dw	65535	; errata NOP
  1961  001F46                     __end_of_timer0_init:
  1962                           	opt stack 0
  1963                           tblptru	equ	0xFF8
  1964                           tblptrh	equ	0xFF7
  1965                           tblptrl	equ	0xFF6
  1966                           tablat	equ	0xFF5
  1967                           intcon	equ	0xFF2
  1968                           intcon2	equ	0xFF1
  1969                           postinc0	equ	0xFEE
  1970                           wreg	equ	0xFE8
  1971                           postdec1	equ	0xFE5
  1972                           fsr1l	equ	0xFE1
  1973                           status	equ	0xFD8
  1974                           
  1975 ;; *************** function _ser_init *****************
  1976 ;; Defined at:
  1977 ;;		line 114 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../lib/ser.c"
  1978 ;; Parameters:    Size  Location     Type
  1979 ;;		None
  1980 ;; Auto vars:     Size  Location     Type
  1981 ;;		None
  1982 ;; Return value:  Size  Location     Type
  1983 ;;                  1    wreg      void 
  1984 ;; Registers used:
  1985 ;;		wreg, status,2, status,0
  1986 ;; Tracked objects:
  1987 ;;		On entry : 0/0
  1988 ;;		On exit  : 0/0
  1989 ;;		Unchanged: 0/0
  1990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1991 ;;      Params:         0       0       0       0       0       0       0
  1992 ;;      Locals:         0       0       0       0       0       0       0
  1993 ;;      Temps:          0       0       0       0       0       0       0
  1994 ;;      Totals:         0       0       0       0       0       0       0
  1995 ;;Total ram usage:        0 bytes
  1996 ;; Hardware stack levels used:    1
  1997 ;; Hardware stack levels required when called:    2
  1998 ;; This function calls:
  1999 ;;		Nothing
  2000 ;; This function is called by:
  2001 ;;		_main
  2002 ;; This function uses a non-reentrant model
  2003 ;;
  2004                           
  2005                           	psect	text3
  2006  00278E                     __ptext3:
  2007                           	opt stack 0
  2008  00278E                     _ser_init:
  2009                           	opt stack 0
  2010  00278E  FFFF               	dw	65535	; assembler added errata NOP
  2011                           
  2012                           ;ser.c: 115: TRISC &= ~0x40;
  2013                           
  2014                           ;incstack = 0
  2015  002790  9C94               	bcf	3988,6,c	;volatile
  2016                           
  2017                           ;ser.c: 117: TRISC |= 0x80;
  2018  002792  8E94               	bsf	3988,7,c	;volatile
  2019                           
  2020                           ;ser.c: 119: TXSTAbits.BRGH = 1;
  2021  002794  84AC               	bsf	4012,2,c	;volatile
  2022                           
  2023                           ;ser.c: 125: SPBRG = ser_brg;
  2024  002796  0E1F               	movlw	31
  2025  002798  6EAF               	movwf	4015,c	;volatile
  2026                           
  2027                           ;ser.c: 128: TXSTAbits.TX9 = 0;
  2028  00279A  9CAC               	bcf	4012,6,c	;volatile
  2029                           
  2030                           ;ser.c: 129: RCSTAbits.RX9 = 0;
  2031  00279C  9CAB               	bcf	4011,6,c	;volatile
  2032                           
  2033                           ;ser.c: 131: TXSTAbits.SYNC = 0;
  2034  00279E  98AC               	bcf	4012,4,c	;volatile
  2035                           
  2036                           ;ser.c: 132: RCSTAbits.SPEN = 1;
  2037  0027A0  8EAB               	bsf	4011,7,c	;volatile
  2038                           
  2039                           ;ser.c: 133: RCSTAbits.CREN = 1;
  2040  0027A2  88AB               	bsf	4011,4,c	;volatile
  2041                           
  2042                           ;ser.c: 134: PIE1bits.TXIE = 0;
  2043  0027A4  989D               	bcf	3997,4,c	;volatile
  2044                           
  2045                           ;ser.c: 136: TXSTAbits.TXEN = 1;
  2046  0027A6  8AAC               	bsf	4012,5,c	;volatile
  2047                           
  2048                           ;ser.c: 137: INTCONbits.PEIE = 1;
  2049  0027A8  8CF2               	bsf	intcon,6,c	;volatile
  2050                           
  2051                           ;ser.c: 139: ser_rxiptr = ser_rxoptr = ser_txiptr = ser_txoptr = 0;
  2052  0027AA  6A6D               	clrf	_ser_txoptr,c	;volatile
  2053  0027AC  6A6C               	clrf	_ser_txiptr,c	;volatile
  2054  0027AE  6A6E               	clrf	_ser_rxoptr,c	;volatile
  2055  0027B0  6A70               	clrf	_ser_rxiptr,c	;volatile
  2056  0027B2  0012               	return		;funcret
  2057  0027B4  FFFF               	dw	65535	; errata NOP
  2058  0027B6                     __end_of_ser_init:
  2059                           	opt stack 0
  2060                           tblptru	equ	0xFF8
  2061                           tblptrh	equ	0xFF7
  2062                           tblptrl	equ	0xFF6
  2063                           tablat	equ	0xFF5
  2064                           intcon	equ	0xFF2
  2065                           intcon2	equ	0xFF1
  2066                           postinc0	equ	0xFEE
  2067                           wreg	equ	0xFE8
  2068                           postdec1	equ	0xFE5
  2069                           fsr1l	equ	0xFE1
  2070                           status	equ	0xFD8
  2071                           
  2072 ;; *************** function _print_indicator *****************
  2073 ;; Defined at:
  2074 ;;		line 464 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../src/print.c"
  2075 ;; Parameters:    Size  Location     Type
  2076 ;;  indicate        1    wreg     unsigned char 
  2077 ;; Auto vars:     Size  Location     Type
  2078 ;;  indicate        1   20[COMRAM] unsigned char 
  2079 ;; Return value:  Size  Location     Type
  2080 ;;                  1    wreg      void 
  2081 ;; Registers used:
  2082 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2083 ;; Tracked objects:
  2084 ;;		On entry : 0/0
  2085 ;;		On exit  : 0/0
  2086 ;;		Unchanged: 0/0
  2087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2088 ;;      Params:         0       0       0       0       0       0       0
  2089 ;;      Locals:         1       0       0       0       0       0       0
  2090 ;;      Temps:          0       0       0       0       0       0       0
  2091 ;;      Totals:         1       0       0       0       0       0       0
  2092 ;;Total ram usage:        1 bytes
  2093 ;; Hardware stack levels used:    1
  2094 ;; Hardware stack levels required when called:    6
  2095 ;; This function calls:
  2096 ;;		_lcd_gotoxy
  2097 ;;		_lcd_puts
  2098 ;; This function is called by:
  2099 ;;		_main
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102                           
  2103                           	psect	text4
  2104  002764                     __ptext4:
  2105                           	opt stack 0
  2106  002764                     _print_indicator:
  2107                           	opt stack 0
  2108  002764  FFFF               	dw	65535	; assembler added errata NOP
  2109                           
  2110                           ;incstack = 0
  2111                           ;print_indicator@indicate stored from wreg
  2112  002766  6E15               	movwf	print_indicator@indicate,c
  2113                           
  2114                           ;print.c: 478: lcd_gotoxy(0, 1);
  2115  002768  0E01               	movlw	1
  2116  00276A  6E0F               	movwf	lcd_gotoxy@row,c
  2117  00276C  0E00               	movlw	0
  2118  00276E  EC1D  F013         	call	_lcd_gotoxy
  2119                           
  2120                           ;print.c: 479: if(indicate) {
  2121  002772  5015               	movf	print_indicator@indicate,w,c
  2122  002774  E005               	bz	l4841
  2123                           
  2124                           ;print.c: 480: lcd_puts("-*-");
  2125  002776  0ECC               	movlw	low STR_34
  2126  002778  6E0C               	movwf	lcd_puts@string,c
  2127  00277A  ECC4  F012         	call	_lcd_puts	;wreg free
  2128                           
  2129                           ;print.c: 481: } else {
  2130  00277E  D004               	goto	l338
  2131  002780                     l4841:
  2132                           
  2133                           ;print.c: 482: lcd_puts("   ");
  2134  002780  0EA1               	movlw	low (STR_5+3)
  2135  002782  6E0C               	movwf	lcd_puts@string,c
  2136  002784  ECC4  F012         	call	_lcd_puts	;wreg free
  2137  002788                     l338:
  2138  002788  FFFF               	dw	65535	; assembler added errata NOP
  2139  00278A  0012               	return		;funcret
  2140  00278C  FFFF               	dw	65535	; errata NOP
  2141  00278E                     __end_of_print_indicator:
  2142                           	opt stack 0
  2143                           tblptru	equ	0xFF8
  2144                           tblptrh	equ	0xFF7
  2145                           tblptrl	equ	0xFF6
  2146                           tablat	equ	0xFF5
  2147                           intcon	equ	0xFF2
  2148                           intcon2	equ	0xFF1
  2149                           postinc0	equ	0xFEE
  2150                           wreg	equ	0xFE8
  2151                           postdec1	equ	0xFE5
  2152                           fsr1l	equ	0xFE1
  2153                           status	equ	0xFD8
  2154                           
  2155 ;; *************** function _measure_inductance *****************
  2156 ;; Defined at:
  2157 ;;		line 218 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../src/measure.c"
  2158 ;; Parameters:    Size  Location     Type
  2159 ;;		None
  2160 ;; Auto vars:     Size  Location     Type
  2161 ;;  Lin             3   30[BANK0 ] void 
  2162 ;;  denominator     3    3[BANK0 ] void 
  2163 ;;  numerator       3    0[BANK0 ] void 
  2164 ;;  var             2   28[BANK0 ] unsigned int 
  2165 ;;  unit            1   18[BANK0 ] unsigned char 
  2166 ;; Return value:  Size  Location     Type
  2167 ;;                  1    wreg      void 
  2168 ;; Registers used:
  2169 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, cstack
  2170 ;; Tracked objects:
  2171 ;;		On entry : 3F/0
  2172 ;;		On exit  : 0/0
  2173 ;;		Unchanged: 0/0
  2174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2175 ;;      Params:         0       0       0       0       0       0       0
  2176 ;;      Locals:         0      33       0       0       0       0       0
  2177 ;;      Temps:          0       0       0       0       0       0       0
  2178 ;;      Totals:         0      33       0       0       0       0       0
  2179 ;;Total ram usage:       33 bytes
  2180 ;; Hardware stack levels used:    1
  2181 ;; Hardware stack levels required when called:    7
  2182 ;; This function calls:
  2183 ;;		___ftdiv
  2184 ;;		___ftge
  2185 ;;		___ftmul
  2186 ;;		___ftsub
  2187 ;;		___fttol
  2188 ;;		___lwtoft
  2189 ;;		_lcd_gotoxy
  2190 ;;		_measure_freq
  2191 ;;		_print_reading
  2192 ;;		_print_unit
  2193 ;;		_put_str
  2194 ;; This function is called by:
  2195 ;;		_main
  2196 ;; This function uses a non-reentrant model
  2197 ;;
  2198                           
  2199                           	psect	text5
  2200  0006EA                     __ptext5:
  2201                           	opt stack 0
  2202  0006EA                     _measure_inductance:
  2203                           	opt stack 0
  2204  0006EA  FFFF               	dw	65535	; assembler added errata NOP
  2205                           
  2206                           ; BSR set to: 0
  2207                           ;measure.c: 219: uint8_t unit;
  2208                           ;measure.c: 220: uint16_t var;
  2209                           ;measure.c: 222: double Lin, numerator, denominator;
  2210                           ;measure.c: 225: lcd_gotoxy(0, 0);
  2211                           
  2212                           ;incstack = 0
  2213  0006EC  0E00               	movlw	0
  2214  0006EE  6A0F               	clrf	lcd_gotoxy@row,c
  2215  0006F0  EC1D  F013         	call	_lcd_gotoxy
  2216                           
  2217                           ;measure.c: 226: put_str("Inductivity ");
  2218  0006F4  0E69               	movlw	low STR_24
  2219  0006F6  6E0D               	movwf	put_str@s,c
  2220  0006F8  ECA4  F012         	call	_put_str	;wreg free
  2221                           
  2222                           ;measure.c: 227: var = measure_freq();
  2223  0006FC  EC16  F00B         	call	_measure_freq	;wreg free
  2224  000700  C03F  F0D6         	movff	?_measure_freq,measure_inductance@var
  2225  000704  C040  F0D7         	movff	?_measure_freq+1,measure_inductance@var+1
  2226                           
  2227                           ;measure.c: 230: F3 = (double)var;
  2228  000708  C0D6  F044         	movff	measure_inductance@var,___lwtoft@c
  2229  00070C  C0D7  F045         	movff	measure_inductance@var+1,___lwtoft@c+1
  2230  000710  ECEF  F013         	call	___lwtoft	;wreg free
  2231  000714  C044  F09C         	movff	?___lwtoft,_F3
  2232  000718  C045  F09D         	movff	?___lwtoft+1,_F3+1
  2233  00071C  C046  F09E         	movff	?___lwtoft+2,_F3+2
  2234                           
  2235                           ;measure.c: 231: if(F3 > F1)
  2236  000720  C0B7  F00B         	movff	_F1,___ftge@ff1
  2237  000724  C0B8  F00C         	movff	_F1+1,___ftge@ff1+1
  2238  000728  C0B9  F00D         	movff	_F1+2,___ftge@ff1+2
  2239  00072C  C09C  F00E         	movff	_F3,___ftge@ff2
  2240  000730  C09D  F00F         	movff	_F3+1,___ftge@ff2+1
  2241  000734  C09E  F010         	movff	_F3+2,___ftge@ff2+2
  2242  000738  EC5F  F011         	call	___ftge	;wreg free
  2243  00073C  E206               	bc	l4807
  2244                           
  2245                           ;measure.c: 232: F3 = F1;
  2246  00073E  C0B7  F09C         	movff	_F1,_F3
  2247  000742  C0B8  F09D         	movff	_F1+1,_F3+1
  2248  000746  C0B9  F09E         	movff	_F1+2,_F3+2
  2249  00074A                     l4807:
  2250                           
  2251                           ;measure.c: 233: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  2252  00074A  C09F  F035         	movff	_F2,___ftsub@f2
  2253  00074E  C0A0  F036         	movff	_F2+1,___ftsub@f2+1
  2254  000752  C0A1  F037         	movff	_F2+2,___ftsub@f2+2
  2255  000756  C09F  F032         	movff	_F2,___ftsub@f1
  2256  00075A  C0A0  F033         	movff	_F2+1,___ftsub@f1+1
  2257  00075E  C0A1  F034         	movff	_F2+2,___ftsub@f1+2
  2258  000762  EC00  F013         	call	___ftsub	;wreg free
  2259  000766  C032  F0C0         	movff	?___ftsub,_measure_inductance$1674
  2260  00076A  C033  F0C1         	movff	?___ftsub+1,_measure_inductance$1674+1
  2261  00076E  C034  F0C2         	movff	?___ftsub+2,_measure_inductance$1674+2
  2262                           
  2263                           ;measure.c: 233: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  2264  000772  C0C0  F035         	movff	_measure_inductance$1674,___ftsub@f2
  2265  000776  C0C1  F036         	movff	_measure_inductance$1674+1,___ftsub@f2+1
  2266  00077A  C0C2  F037         	movff	_measure_inductance$1674+2,___ftsub@f2+2
  2267  00077E  C0B7  F026         	movff	_F1,___ftmul@f2
  2268  000782  C0B8  F027         	movff	_F1+1,___ftmul@f2+1
  2269  000786  C0B9  F028         	movff	_F1+2,___ftmul@f2+2
  2270  00078A  C0B7  F023         	movff	_F1,___ftmul@f1
  2271  00078E  C0B8  F024         	movff	_F1+1,___ftmul@f1+1
  2272  000792  C0B9  F025         	movff	_F1+2,___ftmul@f1+2
  2273  000796  EC87  F00C         	call	___ftmul	;wreg free
  2274  00079A  C023  F032         	movff	?___ftmul,___ftsub@f1
  2275  00079E  C024  F033         	movff	?___ftmul+1,___ftsub@f1+1
  2276  0007A2  C025  F034         	movff	?___ftmul+2,___ftsub@f1+2
  2277  0007A6  EC00  F013         	call	___ftsub	;wreg free
  2278  0007AA  C032  F0CD         	movff	?___ftsub,_measure_inductance$1675
  2279  0007AE  C033  F0CE         	movff	?___ftsub+1,_measure_inductance$1675+1
  2280  0007B2  C034  F0CF         	movff	?___ftsub+2,_measure_inductance$1675+2
  2281                           
  2282                           ;measure.c: 233: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  2283  0007B6  C09C  F026         	movff	_F3,___ftmul@f2
  2284  0007BA  C09D  F027         	movff	_F3+1,___ftmul@f2+1
  2285  0007BE  C09E  F028         	movff	_F3+2,___ftmul@f2+2
  2286  0007C2  C09C  F023         	movff	_F3,___ftmul@f1
  2287  0007C6  C09D  F024         	movff	_F3+1,___ftmul@f1+1
  2288  0007CA  C09E  F025         	movff	_F3+2,___ftmul@f1+2
  2289  0007CE  EC87  F00C         	call	___ftmul	;wreg free
  2290  0007D2  C023  F035         	movff	?___ftmul,___ftsub@f2
  2291  0007D6  C024  F036         	movff	?___ftmul+1,___ftsub@f2+1
  2292  0007DA  C025  F037         	movff	?___ftmul+2,___ftsub@f2+2
  2293  0007DE  C0B7  F026         	movff	_F1,___ftmul@f2
  2294  0007E2  C0B8  F027         	movff	_F1+1,___ftmul@f2+1
  2295  0007E6  C0B9  F028         	movff	_F1+2,___ftmul@f2+2
  2296  0007EA  C0B7  F023         	movff	_F1,___ftmul@f1
  2297  0007EE  C0B8  F024         	movff	_F1+1,___ftmul@f1+1
  2298  0007F2  C0B9  F025         	movff	_F1+2,___ftmul@f1+2
  2299  0007F6  EC87  F00C         	call	___ftmul	;wreg free
  2300  0007FA  C023  F032         	movff	?___ftmul,___ftsub@f1
  2301  0007FE  C024  F033         	movff	?___ftmul+1,___ftsub@f1+1
  2302  000802  C025  F034         	movff	?___ftmul+2,___ftsub@f1+2
  2303  000806  EC00  F013         	call	___ftsub	;wreg free
  2304  00080A  C032  F0D0         	movff	?___ftsub,_measure_inductance$1676
  2305  00080E  C033  F0D1         	movff	?___ftsub+1,_measure_inductance$1676+1
  2306  000812  C034  F0D2         	movff	?___ftsub+2,_measure_inductance$1676+2
  2307                           
  2308                           ;measure.c: 233: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  2309  000816  C0CD  F026         	movff	_measure_inductance$1675,___ftmul@f2
  2310  00081A  C0CE  F027         	movff	_measure_inductance$1675+1,___ftmul@f2+1
  2311  00081E  C0CF  F028         	movff	_measure_inductance$1675+2,___ftmul@f2+2
  2312  000822  C0D0  F023         	movff	_measure_inductance$1676,___ftmul@f1
  2313  000826  C0D1  F024         	movff	_measure_inductance$1676+1,___ftmul@f1+1
  2314  00082A  C0D2  F025         	movff	_measure_inductance$1676+2,___ftmul@f1+2
  2315  00082E  EC87  F00C         	call	___ftmul	;wreg free
  2316  000832  C023  F0D3         	movff	?___ftmul,_measure_inductance$1677
  2317  000836  C024  F0D4         	movff	?___ftmul+1,_measure_inductance$1677+1
  2318  00083A  C025  F0D5         	movff	?___ftmul+2,_measure_inductance$1677+2
  2319                           
  2320                           ;measure.c: 233: numerator = ((F1 * F1) - (F3 * F3)) * ((F1 * F1) - (F2 - F2)) * (100 * 
      +                          100);
  2321  00083E  C0D3  F023         	movff	_measure_inductance$1677,___ftmul@f1
  2322  000842  C0D4  F024         	movff	_measure_inductance$1677+1,___ftmul@f1+1
  2323  000846  C0D5  F025         	movff	_measure_inductance$1677+2,___ftmul@f1+2
  2324  00084A  0E40               	movlw	64
  2325  00084C  6E26               	movwf	___ftmul@f2,c
  2326  00084E  0E1C               	movlw	28
  2327  000850  6E27               	movwf	___ftmul@f2+1,c
  2328  000852  0E46               	movlw	70
  2329  000854  6E28               	movwf	___ftmul@f2+2,c
  2330  000856  EC87  F00C         	call	___ftmul	;wreg free
  2331  00085A  C023  F0BA         	movff	?___ftmul,measure_inductance@numerator
  2332  00085E  C024  F0BB         	movff	?___ftmul+1,measure_inductance@numerator+1
  2333  000862  C025  F0BC         	movff	?___ftmul+2,measure_inductance@numerator+2
  2334                           
  2335                           ;measure.c: 234: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2336  000866  C0B7  F026         	movff	_F1,___ftmul@f2
  2337  00086A  C0B8  F027         	movff	_F1+1,___ftmul@f2+1
  2338  00086E  C0B9  F028         	movff	_F1+2,___ftmul@f2+2
  2339  000872  C0B7  F023         	movff	_F1,___ftmul@f1
  2340  000876  C0B8  F024         	movff	_F1+1,___ftmul@f1+1
  2341  00087A  C0B9  F025         	movff	_F1+2,___ftmul@f1+2
  2342  00087E  EC87  F00C         	call	___ftmul	;wreg free
  2343  000882  C023  F0C3         	movff	?___ftmul,_measure_inductance$1678
  2344  000886  C024  F0C4         	movff	?___ftmul+1,_measure_inductance$1678+1
  2345  00088A  C025  F0C5         	movff	?___ftmul+2,_measure_inductance$1678+2
  2346                           
  2347                           ;measure.c: 234: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2348  00088E  C09F  F026         	movff	_F2,___ftmul@f2
  2349  000892  C0A0  F027         	movff	_F2+1,___ftmul@f2+1
  2350  000896  C0A1  F028         	movff	_F2+2,___ftmul@f2+2
  2351  00089A  C0C3  F023         	movff	_measure_inductance$1678,___ftmul@f1
  2352  00089E  C0C4  F024         	movff	_measure_inductance$1678+1,___ftmul@f1+1
  2353  0008A2  C0C5  F025         	movff	_measure_inductance$1678+2,___ftmul@f1+2
  2354  0008A6  EC87  F00C         	call	___ftmul	;wreg free
  2355  0008AA  C023  F0CD         	movff	?___ftmul,_measure_inductance$1675
  2356  0008AE  C024  F0CE         	movff	?___ftmul+1,_measure_inductance$1675+1
  2357  0008B2  C025  F0CF         	movff	?___ftmul+2,_measure_inductance$1675+2
  2358                           
  2359                           ;measure.c: 234: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2360  0008B6  C09F  F026         	movff	_F2,___ftmul@f2
  2361  0008BA  C0A0  F027         	movff	_F2+1,___ftmul@f2+1
  2362  0008BE  C0A1  F028         	movff	_F2+2,___ftmul@f2+2
  2363  0008C2  C0CD  F023         	movff	_measure_inductance$1675,___ftmul@f1
  2364  0008C6  C0CE  F024         	movff	_measure_inductance$1675+1,___ftmul@f1+1
  2365  0008CA  C0CF  F025         	movff	_measure_inductance$1675+2,___ftmul@f1+2
  2366  0008CE  EC87  F00C         	call	___ftmul	;wreg free
  2367  0008D2  C023  F0D0         	movff	?___ftmul,_measure_inductance$1676
  2368  0008D6  C024  F0D1         	movff	?___ftmul+1,_measure_inductance$1676+1
  2369  0008DA  C025  F0D2         	movff	?___ftmul+2,_measure_inductance$1676+2
  2370                           
  2371                           ;measure.c: 234: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2372  0008DE  C09C  F026         	movff	_F3,___ftmul@f2
  2373  0008E2  C09D  F027         	movff	_F3+1,___ftmul@f2+1
  2374  0008E6  C09E  F028         	movff	_F3+2,___ftmul@f2+2
  2375  0008EA  C0D0  F023         	movff	_measure_inductance$1676,___ftmul@f1
  2376  0008EE  C0D1  F024         	movff	_measure_inductance$1676+1,___ftmul@f1+1
  2377  0008F2  C0D2  F025         	movff	_measure_inductance$1676+2,___ftmul@f1+2
  2378  0008F6  EC87  F00C         	call	___ftmul	;wreg free
  2379  0008FA  C023  F0D3         	movff	?___ftmul,_measure_inductance$1677
  2380  0008FE  C024  F0D4         	movff	?___ftmul+1,_measure_inductance$1677+1
  2381  000902  C025  F0D5         	movff	?___ftmul+2,_measure_inductance$1677+2
  2382                           
  2383                           ;measure.c: 234: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2384  000906  C09C  F026         	movff	_F3,___ftmul@f2
  2385  00090A  C09D  F027         	movff	_F3+1,___ftmul@f2+1
  2386  00090E  C09E  F028         	movff	_F3+2,___ftmul@f2+2
  2387  000912  C0D3  F023         	movff	_measure_inductance$1677,___ftmul@f1
  2388  000916  C0D4  F024         	movff	_measure_inductance$1677+1,___ftmul@f1+1
  2389  00091A  C0D5  F025         	movff	_measure_inductance$1677+2,___ftmul@f1+2
  2390  00091E  EC87  F00C         	call	___ftmul	;wreg free
  2391  000922  C023  F0C6         	movff	?___ftmul,_measure_inductance$1679
  2392  000926  C024  F0C7         	movff	?___ftmul+1,_measure_inductance$1679+1
  2393  00092A  C025  F0C8         	movff	?___ftmul+2,_measure_inductance$1679+2
  2394                           
  2395                           ;measure.c: 234: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2396  00092E  C071  F026         	movff	_CCal,___ftmul@f2
  2397  000932  C072  F027         	movff	_CCal+1,___ftmul@f2+1
  2398  000936  C073  F028         	movff	_CCal+2,___ftmul@f2+2
  2399  00093A  C0C6  F023         	movff	_measure_inductance$1679,___ftmul@f1
  2400  00093E  C0C7  F024         	movff	_measure_inductance$1679+1,___ftmul@f1+1
  2401  000942  C0C8  F025         	movff	_measure_inductance$1679+2,___ftmul@f1+2
  2402  000946  EC87  F00C         	call	___ftmul	;wreg free
  2403  00094A  C023  F0C9         	movff	?___ftmul,_measure_inductance$1680
  2404  00094E  C024  F0CA         	movff	?___ftmul+1,_measure_inductance$1680+1
  2405  000952  C025  F0CB         	movff	?___ftmul+2,_measure_inductance$1680+2
  2406                           
  2407                           ;measure.c: 234: denominator = 4 * 3.14159265358979323846l * 3.14159265358979323846l * F
      +                          1 * F1 * F2 * F2 * F3 * F3 * CCal;
  2408  000956  C0C9  F023         	movff	_measure_inductance$1680,___ftmul@f1
  2409  00095A  C0CA  F024         	movff	_measure_inductance$1680+1,___ftmul@f1+1
  2410  00095E  C0CB  F025         	movff	_measure_inductance$1680+2,___ftmul@f1+2
  2411  000962  0EEA               	movlw	234
  2412  000964  6E26               	movwf	___ftmul@f2,c
  2413  000966  0E1D               	movlw	29
  2414  000968  6E27               	movwf	___ftmul@f2+1,c
  2415  00096A  0E42               	movlw	66
  2416  00096C  6E28               	movwf	___ftmul@f2+2,c
  2417  00096E  EC87  F00C         	call	___ftmul	;wreg free
  2418  000972  C023  F0BD         	movff	?___ftmul,measure_inductance@denominator
  2419  000976  C024  F0BE         	movff	?___ftmul+1,measure_inductance@denominator+1
  2420  00097A  C025  F0BF         	movff	?___ftmul+2,measure_inductance@denominator+2
  2421                           
  2422                           ;measure.c: 235: Lin = (numerator / denominator) * 1e+15l;
  2423  00097E  C0BD  F016         	movff	measure_inductance@denominator,___ftdiv@f2
  2424  000982  C0BE  F017         	movff	measure_inductance@denominator+1,___ftdiv@f2+1
  2425  000986  C0BF  F018         	movff	measure_inductance@denominator+2,___ftdiv@f2+2
  2426  00098A  C0BA  F013         	movff	measure_inductance@numerator,___ftdiv@f1
  2427  00098E  C0BB  F014         	movff	measure_inductance@numerator+1,___ftdiv@f1+1
  2428  000992  C0BC  F015         	movff	measure_inductance@numerator+2,___ftdiv@f1+2
  2429  000996  EC9E  F00E         	call	___ftdiv	;wreg free
  2430  00099A  C013  F023         	movff	?___ftdiv,___ftmul@f1
  2431  00099E  C014  F024         	movff	?___ftdiv+1,___ftmul@f1+1
  2432  0009A2  C015  F025         	movff	?___ftdiv+2,___ftmul@f1+2
  2433  0009A6  0E60               	movlw	96
  2434  0009A8  6E26               	movwf	___ftmul@f2,c
  2435  0009AA  0E63               	movlw	99
  2436  0009AC  6E27               	movwf	___ftmul@f2+1,c
  2437  0009AE  0E58               	movlw	88
  2438  0009B0  6E28               	movwf	___ftmul@f2+2,c
  2439  0009B2  EC87  F00C         	call	___ftmul	;wreg free
  2440  0009B6  C023  F0D8         	movff	?___ftmul,measure_inductance@Lin
  2441  0009BA  C024  F0D9         	movff	?___ftmul+1,measure_inductance@Lin+1
  2442  0009BE  C025  F0DA         	movff	?___ftmul+2,measure_inductance@Lin+2
  2443                           
  2444                           ;measure.c: 237: if(Lin > 999) {
  2445  0009C2  0EC0               	movlw	192
  2446  0009C4  6E0B               	movwf	___ftge@ff1,c
  2447  0009C6  0E79               	movlw	121
  2448  0009C8  6E0C               	movwf	___ftge@ff1+1,c
  2449  0009CA  0E44               	movlw	68
  2450  0009CC  6E0D               	movwf	___ftge@ff1+2,c
  2451  0009CE  C0D8  F00E         	movff	measure_inductance@Lin,___ftge@ff2
  2452  0009D2  C0D9  F00F         	movff	measure_inductance@Lin+1,___ftge@ff2+1
  2453  0009D6  C0DA  F010         	movff	measure_inductance@Lin+2,___ftge@ff2+2
  2454  0009DA  EC5F  F011         	call	___ftge	;wreg free
  2455  0009DE  E260               	bc	l4825
  2456                           
  2457                           ;measure.c: 238: if(Lin > (999e+03l)) {
  2458  0009E0  0EE6               	movlw	230
  2459  0009E2  6E0B               	movwf	___ftge@ff1,c
  2460  0009E4  0E73               	movlw	115
  2461  0009E6  6E0C               	movwf	___ftge@ff1+1,c
  2462  0009E8  0E49               	movlw	73
  2463  0009EA  6E0D               	movwf	___ftge@ff1+2,c
  2464  0009EC  C0D8  F00E         	movff	measure_inductance@Lin,___ftge@ff2
  2465  0009F0  C0D9  F00F         	movff	measure_inductance@Lin+1,___ftge@ff2+1
  2466  0009F4  C0DA  F010         	movff	measure_inductance@Lin+2,___ftge@ff2+2
  2467  0009F8  EC5F  F011         	call	___ftge	;wreg free
  2468  0009FC  E23C               	bc	l4821
  2469                           
  2470                           ;measure.c: 239: if(Lin > (999e+06l)) {
  2471  0009FE  0E2E               	movlw	46
  2472  000A00  6E0B               	movwf	___ftge@ff1,c
  2473  000A02  0E6E               	movlw	110
  2474  000A04  6E0C               	movwf	___ftge@ff1+1,c
  2475  000A06  0E4E               	movlw	78
  2476  000A08  6E0D               	movwf	___ftge@ff1+2,c
  2477  000A0A  C0D8  F00E         	movff	measure_inductance@Lin,___ftge@ff2
  2478  000A0E  C0D9  F00F         	movff	measure_inductance@Lin+1,___ftge@ff2+1
  2479  000A12  C0DA  F010         	movff	measure_inductance@Lin+2,___ftge@ff2+2
  2480  000A16  EC5F  F011         	call	___ftge	;wreg free
  2481  000A1A  E217               	bc	l4817
  2482                           
  2483                           ;measure.c: 240: Lin = Lin / (1e+09l);
  2484  000A1C  C0D8  F013         	movff	measure_inductance@Lin,___ftdiv@f1
  2485  000A20  C0D9  F014         	movff	measure_inductance@Lin+1,___ftdiv@f1+1
  2486  000A24  C0DA  F015         	movff	measure_inductance@Lin+2,___ftdiv@f1+2
  2487  000A28  0E6B               	movlw	107
  2488  000A2A  6E16               	movwf	___ftdiv@f2,c
  2489  000A2C  0E6E               	movlw	110
  2490  000A2E  6E17               	movwf	___ftdiv@f2+1,c
  2491  000A30  0E4E               	movlw	78
  2492  000A32  6E18               	movwf	___ftdiv@f2+2,c
  2493  000A34  EC9E  F00E         	call	___ftdiv	;wreg free
  2494  000A38  C013  F0D8         	movff	?___ftdiv,measure_inductance@Lin
  2495  000A3C  C014  F0D9         	movff	?___ftdiv+1,measure_inductance@Lin+1
  2496  000A40  C015  F0DA         	movff	?___ftdiv+2,measure_inductance@Lin+2
  2497                           
  2498                           ;measure.c: 241: unit = 0;
  2499  000A44  0100               	movlb	0	; () banked
  2500  000A46  6BCC               	clrf	measure_inductance@unit& (0+255),b
  2501                           
  2502                           ;measure.c: 242: } else {
  2503  000A48  D02F               	goto	l4827
  2504  000A4A                     l4817:
  2505                           
  2506                           ;measure.c: 243: Lin = Lin / (1e+06l);
  2507  000A4A  C0D8  F013         	movff	measure_inductance@Lin,___ftdiv@f1
  2508  000A4E  C0D9  F014         	movff	measure_inductance@Lin+1,___ftdiv@f1+1
  2509  000A52  C0DA  F015         	movff	measure_inductance@Lin+2,___ftdiv@f1+2
  2510  000A56  0E24               	movlw	36
  2511  000A58  6E16               	movwf	___ftdiv@f2,c
  2512  000A5A  0E74               	movlw	116
  2513  000A5C  6E17               	movwf	___ftdiv@f2+1,c
  2514  000A5E  0E49               	movlw	73
  2515  000A60  6E18               	movwf	___ftdiv@f2+2,c
  2516  000A62  EC9E  F00E         	call	___ftdiv	;wreg free
  2517  000A66  C013  F0D8         	movff	?___ftdiv,measure_inductance@Lin
  2518  000A6A  C014  F0D9         	movff	?___ftdiv+1,measure_inductance@Lin+1
  2519  000A6E  C015  F0DA         	movff	?___ftdiv+2,measure_inductance@Lin+2
  2520                           
  2521                           ;measure.c: 244: unit = 1;
  2522  000A72  0E01               	movlw	1
  2523  000A74  D016               	goto	L2
  2524  000A76                     l4821:
  2525                           
  2526                           ;measure.c: 247: Lin = Lin / 1e+03l;
  2527  000A76  C0D8  F013         	movff	measure_inductance@Lin,___ftdiv@f1
  2528  000A7A  C0D9  F014         	movff	measure_inductance@Lin+1,___ftdiv@f1+1
  2529  000A7E  C0DA  F015         	movff	measure_inductance@Lin+2,___ftdiv@f1+2
  2530  000A82  6A16               	clrf	___ftdiv@f2,c
  2531  000A84  0E7A               	movlw	122
  2532  000A86  6E17               	movwf	___ftdiv@f2+1,c
  2533  000A88  0E44               	movlw	68
  2534  000A8A  6E18               	movwf	___ftdiv@f2+2,c
  2535  000A8C  EC9E  F00E         	call	___ftdiv	;wreg free
  2536  000A90  C013  F0D8         	movff	?___ftdiv,measure_inductance@Lin
  2537  000A94  C014  F0D9         	movff	?___ftdiv+1,measure_inductance@Lin+1
  2538  000A98  C015  F0DA         	movff	?___ftdiv+2,measure_inductance@Lin+2
  2539                           
  2540                           ;measure.c: 248: unit = 2;
  2541  000A9C  0E02               	movlw	2
  2542  000A9E  D001               	goto	L2
  2543  000AA0                     l4825:
  2544                           
  2545                           ;measure.c: 251: unit = 3;
  2546  000AA0  0E03               	movlw	3
  2547  000AA2                     L2:
  2548  000AA2  FFFF               	dw	65535	; assembler added errata NOP
  2549  000AA4  0100               	movlb	0	; () banked
  2550  000AA6  6FCC               	movwf	measure_inductance@unit& (0+255),b
  2551  000AA8                     l4827:
  2552  000AA8  FFFF               	dw	65535	; assembler added errata NOP
  2553                           
  2554                           ; BSR set to: 0
  2555                           ;measure.c: 253: Lin = Lin * 100;
  2556  000AAA  C0D8  F023         	movff	measure_inductance@Lin,___ftmul@f1
  2557  000AAE  C0D9  F024         	movff	measure_inductance@Lin+1,___ftmul@f1+1
  2558  000AB2  C0DA  F025         	movff	measure_inductance@Lin+2,___ftmul@f1+2
  2559  000AB6  6A26               	clrf	___ftmul@f2,c
  2560  000AB8  0EC8               	movlw	200
  2561  000ABA  6E27               	movwf	___ftmul@f2+1,c
  2562  000ABC  0E42               	movlw	66
  2563  000ABE  6E28               	movwf	___ftmul@f2+2,c
  2564  000AC0  EC87  F00C         	call	___ftmul	;wreg free
  2565  000AC4  C023  F0D8         	movff	?___ftmul,measure_inductance@Lin
  2566  000AC8  C024  F0D9         	movff	?___ftmul+1,measure_inductance@Lin+1
  2567  000ACC  C025  F0DA         	movff	?___ftmul+2,measure_inductance@Lin+2
  2568                           
  2569                           ;measure.c: 254: var = (uint16_t)Lin;
  2570  000AD0  C0D8  F047         	movff	measure_inductance@Lin,___fttol@f1
  2571  000AD4  C0D9  F048         	movff	measure_inductance@Lin+1,___fttol@f1+1
  2572  000AD8  C0DA  F049         	movff	measure_inductance@Lin+2,___fttol@f1+2
  2573  000ADC  EC38  F00E         	call	___fttol	;wreg free
  2574  000AE0  C047  F0D6         	movff	?___fttol,measure_inductance@var
  2575  000AE4  C048  F0D7         	movff	?___fttol+1,measure_inductance@var+1
  2576                           
  2577                           ;measure.c: 256: print_reading(var);
  2578  000AE8  C0D6  F03F         	movff	measure_inductance@var,print_reading@measurement
  2579  000AEC  C0D7  F040         	movff	measure_inductance@var+1,print_reading@measurement+1
  2580  000AF0  EC3E  F010         	call	_print_reading	;wreg free
  2581                           
  2582                           ;measure.c: 257: print_unit(unit);
  2583  000AF4  0100               	movlb	0	; () banked
  2584  000AF6  51CC               	movf	measure_inductance@unit& (0+255),w,b
  2585  000AF8  EF03  F014         	goto	_print_unit
  2586  000AFC  FFFF               	dw	65535	; errata NOP
  2587  000AFE                     __end_of_measure_inductance:
  2588                           	opt stack 0
  2589                           tblptru	equ	0xFF8
  2590                           tblptrh	equ	0xFF7
  2591                           tblptrl	equ	0xFF6
  2592                           tablat	equ	0xFF5
  2593                           intcon	equ	0xFF2
  2594                           intcon2	equ	0xFF1
  2595                           postinc0	equ	0xFEE
  2596                           wreg	equ	0xFE8
  2597                           postdec1	equ	0xFE5
  2598                           fsr1l	equ	0xFE1
  2599                           status	equ	0xFD8
  2600                           
  2601 ;; *************** function _measure_capacitance *****************
  2602 ;; Defined at:
  2603 ;;		line 131 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../src/measure.c"
  2604 ;; Parameters:    Size  Location     Type
  2605 ;;		None
  2606 ;; Auto vars:     Size  Location     Type
  2607 ;;  Cin             3   12[BANK1 ] void 
  2608 ;;  var             2   10[BANK1 ] unsigned int 
  2609 ;;  unit            1    9[BANK1 ] unsigned char 
  2610 ;; Return value:  Size  Location     Type
  2611 ;;                  1    wreg      void 
  2612 ;; Registers used:
  2613 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2614 ;; Tracked objects:
  2615 ;;		On entry : 3F/0
  2616 ;;		On exit  : 0/0
  2617 ;;		Unchanged: 0/0
  2618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2619 ;;      Params:         0       0       0       0       0       0       0
  2620 ;;      Locals:         0       0      15       0       0       0       0
  2621 ;;      Temps:          0       0       0       0       0       0       0
  2622 ;;      Totals:         0       0      15       0       0       0       0
  2623 ;;Total ram usage:       15 bytes
  2624 ;; Hardware stack levels used:    1
  2625 ;; Hardware stack levels required when called:    8
  2626 ;; This function calls:
  2627 ;;		___ftdiv
  2628 ;;		___ftge
  2629 ;;		___ftmul
  2630 ;;		___ftsub
  2631 ;;		___fttol
  2632 ;;		___lwtoft
  2633 ;;		_format_double
  2634 ;;		_format_xint32
  2635 ;;		_lcd_gotoxy
  2636 ;;		_measure_freq
  2637 ;;		_print_reading
  2638 ;;		_print_unit
  2639 ;;		_put_str
  2640 ;;		_ser_putch
  2641 ;;		_ser_puts
  2642 ;; This function is called by:
  2643 ;;		_main
  2644 ;; This function uses a non-reentrant model
  2645 ;;
  2646                           
  2647                           	psect	text6
  2648  000AFE                     __ptext6:
  2649                           	opt stack 0
  2650  000AFE                     _measure_capacitance:
  2651                           	opt stack 0
  2652  000AFE  FFFF               	dw	65535	; assembler added errata NOP
  2653                           
  2654                           ; BSR set to: 0
  2655                           ;measure.c: 132: uint8_t unit;
  2656                           ;measure.c: 133: uint16_t var;
  2657                           ;measure.c: 135: double Cin;
  2658                           ;measure.c: 139: lcd_gotoxy(0, 0);
  2659                           
  2660                           ;incstack = 0
  2661  000B00  0E00               	movlw	0
  2662  000B02  6A0F               	clrf	lcd_gotoxy@row,c
  2663  000B04  EC1D  F013         	call	_lcd_gotoxy
  2664                           
  2665                           ;measure.c: 140: put_str("Capacity ");
  2666  000B08  0E82               	movlw	low STR_15
  2667  000B0A  6E0D               	movwf	put_str@s,c
  2668  000B0C  ECA4  F012         	call	_put_str	;wreg free
  2669                           
  2670                           ;measure.c: 141: var = measure_freq();
  2671  000B10  EC16  F00B         	call	_measure_freq	;wreg free
  2672  000B14  C03F  F11A         	movff	?_measure_freq,measure_capacitance@var
  2673  000B18  C040  F11B         	movff	?_measure_freq+1,measure_capacitance@var+1
  2674                           
  2675                           ;measure.c: 144: F3 = (double)var;
  2676  000B1C  C11A  F044         	movff	measure_capacitance@var,___lwtoft@c
  2677  000B20  C11B  F045         	movff	measure_capacitance@var+1,___lwtoft@c+1
  2678  000B24  ECEF  F013         	call	___lwtoft	;wreg free
  2679  000B28  C044  F09C         	movff	?___lwtoft,_F3
  2680  000B2C  C045  F09D         	movff	?___lwtoft+1,_F3+1
  2681  000B30  C046  F09E         	movff	?___lwtoft+2,_F3+2
  2682                           
  2683                           ;measure.c: 147: ser_puts("var=");
  2684  000B34  0EC2               	movlw	low STR_16
  2685  000B36  6E0C               	movwf	ser_puts@s,c
  2686  000B38  EC84  F013         	call	_ser_puts	;wreg free
  2687                           
  2688                           ;measure.c: 148: format_xint32(&ser_putch, var);
  2689  000B3C  0EB6               	movlw	low _ser_putch
  2690  000B3E  6E3F               	movwf	format_xint32@fn,c
  2691  000B40  0E27               	movlw	high _ser_putch
  2692  000B42  6E40               	movwf	format_xint32@fn+1,c
  2693  000B44  C11A  F041         	movff	measure_capacitance@var,format_xint32@x
  2694  000B48  C11B  F042         	movff	measure_capacitance@var+1,format_xint32@x+1
  2695  000B4C  6A43               	clrf	format_xint32@x+2,c
  2696  000B4E  6A44               	clrf	format_xint32@x+3,c
  2697  000B50  EC80  F010         	call	_format_xint32	;wreg free
  2698                           
  2699                           ;measure.c: 150: ser_puts("\r\nF1=");
  2700  000B54  0EA5               	movlw	low STR_17
  2701  000B56  6E0C               	movwf	ser_puts@s,c
  2702  000B58  EC84  F013         	call	_ser_puts	;wreg free
  2703                           
  2704                           ;measure.c: 151: format_double(&ser_putch, F1);
  2705  000B5C  0EB6               	movlw	low _ser_putch
  2706  000B5E  0100               	movlb	0	; () banked
  2707  000B60  6FD6               	movwf	format_double@fn& (0+255),b
  2708  000B62  0E27               	movlw	high _ser_putch
  2709  000B64  6FD7               	movwf	(format_double@fn+1)& (0+255),b
  2710  000B66  C0B7  F0D8         	movff	_F1,format_double@num
  2711  000B6A  C0B8  F0D9         	movff	_F1+1,format_double@num+1
  2712  000B6E  C0B9  F0DA         	movff	_F1+2,format_double@num+2
  2713  000B72  EC51  F008         	call	_format_double	;wreg free
  2714                           
  2715                           ;measure.c: 153: ser_putch(' ');
  2716  000B76  0E20               	movlw	32
  2717  000B78  ECDB  F013         	call	_ser_putch
  2718                           
  2719                           ;measure.c: 154: format_xint32(&ser_putch, *(uint32_t*)&F1);
  2720  000B7C  0EB6               	movlw	low _ser_putch
  2721  000B7E  6E3F               	movwf	format_xint32@fn,c
  2722  000B80  0E27               	movlw	high _ser_putch
  2723  000B82  6E40               	movwf	format_xint32@fn+1,c
  2724  000B84  C0B7  F041         	movff	_F1,format_xint32@x
  2725  000B88  C0B8  F042         	movff	_F1+1,format_xint32@x+1
  2726  000B8C  C0B9  F043         	movff	_F1+2,format_xint32@x+2
  2727  000B90  C0BA  F044         	movff	_F1+3,format_xint32@x+3
  2728  000B94  EC80  F010         	call	_format_xint32	;wreg free
  2729                           
  2730                           ;measure.c: 156: ser_puts("\r\nF2=");
  2731  000B98  0EAB               	movlw	low STR_18
  2732  000B9A  6E0C               	movwf	ser_puts@s,c
  2733  000B9C  EC84  F013         	call	_ser_puts	;wreg free
  2734                           
  2735                           ;measure.c: 157: format_double(&ser_putch, F2);
  2736  000BA0  0EB6               	movlw	low _ser_putch
  2737  000BA2  0100               	movlb	0	; () banked
  2738  000BA4  6FD6               	movwf	format_double@fn& (0+255),b
  2739  000BA6  0E27               	movlw	high _ser_putch
  2740  000BA8  6FD7               	movwf	(format_double@fn+1)& (0+255),b
  2741  000BAA  C09F  F0D8         	movff	_F2,format_double@num
  2742  000BAE  C0A0  F0D9         	movff	_F2+1,format_double@num+1
  2743  000BB2  C0A1  F0DA         	movff	_F2+2,format_double@num+2
  2744  000BB6  EC51  F008         	call	_format_double	;wreg free
  2745                           
  2746                           ;measure.c: 159: ser_putch(' ');
  2747  000BBA  0E20               	movlw	32
  2748  000BBC  ECDB  F013         	call	_ser_putch
  2749                           
  2750                           ;measure.c: 160: format_xint32(&ser_putch, *(uint32_t*)&F2);
  2751  000BC0  0EB6               	movlw	low _ser_putch
  2752  000BC2  6E3F               	movwf	format_xint32@fn,c
  2753  000BC4  0E27               	movlw	high _ser_putch
  2754  000BC6  6E40               	movwf	format_xint32@fn+1,c
  2755  000BC8  C09F  F041         	movff	_F2,format_xint32@x
  2756  000BCC  C0A0  F042         	movff	_F2+1,format_xint32@x+1
  2757  000BD0  C0A1  F043         	movff	_F2+2,format_xint32@x+2
  2758  000BD4  C0A2  F044         	movff	_F2+3,format_xint32@x+3
  2759  000BD8  EC80  F010         	call	_format_xint32	;wreg free
  2760                           
  2761                           ;measure.c: 162: ser_puts("\r\nF3=");
  2762  000BDC  0EB1               	movlw	low STR_19
  2763  000BDE  6E0C               	movwf	ser_puts@s,c
  2764  000BE0  EC84  F013         	call	_ser_puts	;wreg free
  2765                           
  2766                           ;measure.c: 163: format_double(&ser_putch, F3);
  2767  000BE4  0EB6               	movlw	low _ser_putch
  2768  000BE6  0100               	movlb	0	; () banked
  2769  000BE8  6FD6               	movwf	format_double@fn& (0+255),b
  2770  000BEA  0E27               	movlw	high _ser_putch
  2771  000BEC  6FD7               	movwf	(format_double@fn+1)& (0+255),b
  2772  000BEE  C09C  F0D8         	movff	_F3,format_double@num
  2773  000BF2  C09D  F0D9         	movff	_F3+1,format_double@num+1
  2774  000BF6  C09E  F0DA         	movff	_F3+2,format_double@num+2
  2775  000BFA  EC51  F008         	call	_format_double	;wreg free
  2776                           
  2777                           ;measure.c: 165: ser_putch(' ');
  2778  000BFE  0E20               	movlw	32
  2779  000C00  ECDB  F013         	call	_ser_putch
  2780                           
  2781                           ;measure.c: 166: format_xint32(&ser_putch, *(uint32_t*)&F3);
  2782  000C04  0EB6               	movlw	low _ser_putch
  2783  000C06  6E3F               	movwf	format_xint32@fn,c
  2784  000C08  0E27               	movlw	high _ser_putch
  2785  000C0A  6E40               	movwf	format_xint32@fn+1,c
  2786  000C0C  C09C  F041         	movff	_F3,format_xint32@x
  2787  000C10  C09D  F042         	movff	_F3+1,format_xint32@x+1
  2788  000C14  C09E  F043         	movff	_F3+2,format_xint32@x+2
  2789  000C18  C09F  F044         	movff	_F3+3,format_xint32@x+3
  2790  000C1C  EC80  F010         	call	_format_xint32	;wreg free
  2791                           
  2792                           ;measure.c: 168: ser_puts("\r\nCCal=");
  2793  000C20  0E96               	movlw	low STR_20
  2794  000C22  6E0C               	movwf	ser_puts@s,c
  2795  000C24  EC84  F013         	call	_ser_puts	;wreg free
  2796                           
  2797                           ;measure.c: 169: format_double(&ser_putch, CCal);
  2798  000C28  0EB6               	movlw	low _ser_putch
  2799  000C2A  0100               	movlb	0	; () banked
  2800  000C2C  6FD6               	movwf	format_double@fn& (0+255),b
  2801  000C2E  0E27               	movlw	high _ser_putch
  2802  000C30  6FD7               	movwf	(format_double@fn+1)& (0+255),b
  2803  000C32  C071  F0D8         	movff	_CCal,format_double@num
  2804  000C36  C072  F0D9         	movff	_CCal+1,format_double@num+1
  2805  000C3A  C073  F0DA         	movff	_CCal+2,format_double@num+2
  2806  000C3E  EC51  F008         	call	_format_double	;wreg free
  2807                           
  2808                           ;measure.c: 171: ser_putch(' ');
  2809  000C42  0E20               	movlw	32
  2810  000C44  ECDB  F013         	call	_ser_putch
  2811                           
  2812                           ;measure.c: 172: format_xint32(&ser_putch, *(uint32_t*)&CCal);
  2813  000C48  0EB6               	movlw	low _ser_putch
  2814  000C4A  6E3F               	movwf	format_xint32@fn,c
  2815  000C4C  0E27               	movlw	high _ser_putch
  2816  000C4E  6E40               	movwf	format_xint32@fn+1,c
  2817  000C50  C071  F041         	movff	_CCal,format_xint32@x
  2818  000C54  C072  F042         	movff	_CCal+1,format_xint32@x+1
  2819  000C58  C073  F043         	movff	_CCal+2,format_xint32@x+2
  2820  000C5C  C074  F044         	movff	_CCal+3,format_xint32@x+3
  2821  000C60  EC80  F010         	call	_format_xint32	;wreg free
  2822                           
  2823                           ;measure.c: 174: ser_puts("\r\n");
  2824  000C64  0EE5               	movlw	low STR_4
  2825  000C66  6E0C               	movwf	ser_puts@s,c
  2826  000C68  EC84  F013         	call	_ser_puts	;wreg free
  2827                           
  2828                           ;measure.c: 178: if(F3 > F1)
  2829  000C6C  C0B7  F00B         	movff	_F1,___ftge@ff1
  2830  000C70  C0B8  F00C         	movff	_F1+1,___ftge@ff1+1
  2831  000C74  C0B9  F00D         	movff	_F1+2,___ftge@ff1+2
  2832  000C78  C09C  F00E         	movff	_F3,___ftge@ff2
  2833  000C7C  C09D  F00F         	movff	_F3+1,___ftge@ff2+1
  2834  000C80  C09E  F010         	movff	_F3+2,___ftge@ff2+2
  2835  000C84  EC5F  F011         	call	___ftge	;wreg free
  2836  000C88  E206               	bc	l4755
  2837                           
  2838                           ;measure.c: 179: F3 = F1;
  2839  000C8A  C0B7  F09C         	movff	_F1,_F3
  2840  000C8E  C0B8  F09D         	movff	_F1+1,_F3+1
  2841  000C92  C0B9  F09E         	movff	_F1+2,_F3+2
  2842  000C96                     l4755:
  2843                           
  2844                           ;measure.c: 181: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2845  000C96  C09C  F026         	movff	_F3,___ftmul@f2
  2846  000C9A  C09D  F027         	movff	_F3+1,___ftmul@f2+1
  2847  000C9E  C09E  F028         	movff	_F3+2,___ftmul@f2+2
  2848  000CA2  C09C  F023         	movff	_F3,___ftmul@f1
  2849  000CA6  C09D  F024         	movff	_F3+1,___ftmul@f1+1
  2850  000CAA  C09E  F025         	movff	_F3+2,___ftmul@f1+2
  2851  000CAE  EC87  F00C         	call	___ftmul	;wreg free
  2852  000CB2  C023  F035         	movff	?___ftmul,___ftsub@f2
  2853  000CB6  C024  F036         	movff	?___ftmul+1,___ftsub@f2+1
  2854  000CBA  C025  F037         	movff	?___ftmul+2,___ftsub@f2+2
  2855  000CBE  C0B7  F026         	movff	_F1,___ftmul@f2
  2856  000CC2  C0B8  F027         	movff	_F1+1,___ftmul@f2+1
  2857  000CC6  C0B9  F028         	movff	_F1+2,___ftmul@f2+2
  2858  000CCA  C0B7  F023         	movff	_F1,___ftmul@f1
  2859  000CCE  C0B8  F024         	movff	_F1+1,___ftmul@f1+1
  2860  000CD2  C0B9  F025         	movff	_F1+2,___ftmul@f1+2
  2861  000CD6  EC87  F00C         	call	___ftmul	;wreg free
  2862  000CDA  C023  F032         	movff	?___ftmul,___ftsub@f1
  2863  000CDE  C024  F033         	movff	?___ftmul+1,___ftsub@f1+1
  2864  000CE2  C025  F034         	movff	?___ftmul+2,___ftsub@f1+2
  2865  000CE6  EC00  F013         	call	___ftsub	;wreg free
  2866  000CEA  C032  F110         	movff	?___ftsub,_measure_capacitance$1671
  2867  000CEE  C033  F111         	movff	?___ftsub+1,_measure_capacitance$1671+1
  2868  000CF2  C034  F112         	movff	?___ftsub+2,_measure_capacitance$1671+2
  2869                           
  2870                           ;measure.c: 181: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2871  000CF6  C09F  F026         	movff	_F2,___ftmul@f2
  2872  000CFA  C0A0  F027         	movff	_F2+1,___ftmul@f2+1
  2873  000CFE  C0A1  F028         	movff	_F2+2,___ftmul@f2+2
  2874  000D02  C110  F023         	movff	_measure_capacitance$1671,___ftmul@f1
  2875  000D06  C111  F024         	movff	_measure_capacitance$1671+1,___ftmul@f1+1
  2876  000D0A  C112  F025         	movff	_measure_capacitance$1671+2,___ftmul@f1+2
  2877  000D0E  EC87  F00C         	call	___ftmul	;wreg free
  2878  000D12  C023  F113         	movff	?___ftmul,_measure_capacitance$1672
  2879  000D16  C024  F114         	movff	?___ftmul+1,_measure_capacitance$1672+1
  2880  000D1A  C025  F115         	movff	?___ftmul+2,_measure_capacitance$1672+2
  2881                           
  2882                           ;measure.c: 181: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2883  000D1E  C09F  F026         	movff	_F2,___ftmul@f2
  2884  000D22  C0A0  F027         	movff	_F2+1,___ftmul@f2+1
  2885  000D26  C0A1  F028         	movff	_F2+2,___ftmul@f2+2
  2886  000D2A  C113  F023         	movff	_measure_capacitance$1672,___ftmul@f1
  2887  000D2E  C114  F024         	movff	_measure_capacitance$1672+1,___ftmul@f1+1
  2888  000D32  C115  F025         	movff	_measure_capacitance$1672+2,___ftmul@f1+2
  2889  000D36  EC87  F00C         	call	___ftmul	;wreg free
  2890  000D3A  C023  F116         	movff	?___ftmul,_measure_capacitance$1673
  2891  000D3E  C024  F117         	movff	?___ftmul+1,_measure_capacitance$1673+1
  2892  000D42  C025  F118         	movff	?___ftmul+2,_measure_capacitance$1673+2
  2893                           
  2894                           ;measure.c: 181: Cin = F2 * F2 * (F1 * F1 - F3 * F3) * CCal;
  2895  000D46  C116  F023         	movff	_measure_capacitance$1673,___ftmul@f1
  2896  000D4A  C117  F024         	movff	_measure_capacitance$1673+1,___ftmul@f1+1
  2897  000D4E  C118  F025         	movff	_measure_capacitance$1673+2,___ftmul@f1+2
  2898  000D52  C071  F026         	movff	_CCal,___ftmul@f2
  2899  000D56  C072  F027         	movff	_CCal+1,___ftmul@f2+1
  2900  000D5A  C073  F028         	movff	_CCal+2,___ftmul@f2+2
  2901  000D5E  EC87  F00C         	call	___ftmul	;wreg free
  2902  000D62  C023  F11C         	movff	?___ftmul,measure_capacitance@Cin
  2903  000D66  C024  F11D         	movff	?___ftmul+1,measure_capacitance@Cin+1
  2904  000D6A  C025  F11E         	movff	?___ftmul+2,measure_capacitance@Cin+2
  2905                           
  2906                           ;measure.c: 185: ser_puts("Cin=");
  2907  000D6E  0EBD               	movlw	low STR_22
  2908  000D70  6E0C               	movwf	ser_puts@s,c
  2909  000D72  EC84  F013         	call	_ser_puts	;wreg free
  2910                           
  2911                           ;measure.c: 186: format_double(&ser_putch, Cin);
  2912  000D76  0EB6               	movlw	low _ser_putch
  2913  000D78  0100               	movlb	0	; () banked
  2914  000D7A  6FD6               	movwf	format_double@fn& (0+255),b
  2915  000D7C  0E27               	movlw	high _ser_putch
  2916  000D7E  6FD7               	movwf	(format_double@fn+1)& (0+255),b
  2917  000D80  C11C  F0D8         	movff	measure_capacitance@Cin,format_double@num
  2918  000D84  C11D  F0D9         	movff	measure_capacitance@Cin+1,format_double@num+1
  2919  000D88  C11E  F0DA         	movff	measure_capacitance@Cin+2,format_double@num+2
  2920  000D8C  EC51  F008         	call	_format_double	;wreg free
  2921                           
  2922                           ;measure.c: 187: ser_putch(' ');
  2923  000D90  0E20               	movlw	32
  2924  000D92  ECDB  F013         	call	_ser_putch
  2925                           
  2926                           ;measure.c: 188: format_xint32(&ser_putch, *(uint32_t*)&Cin);
  2927  000D96  0EB6               	movlw	low _ser_putch
  2928  000D98  6E3F               	movwf	format_xint32@fn,c
  2929  000D9A  0E27               	movlw	high _ser_putch
  2930  000D9C  6E40               	movwf	format_xint32@fn+1,c
  2931  000D9E  C11C  F041         	movff	measure_capacitance@Cin,format_xint32@x
  2932  000DA2  C11D  F042         	movff	measure_capacitance@Cin+1,format_xint32@x+1
  2933  000DA6  C11E  F043         	movff	measure_capacitance@Cin+2,format_xint32@x+2
  2934  000DAA  C11F  F044         	movff	measure_capacitance@Cin+3,format_xint32@x+3
  2935  000DAE  EC80  F010         	call	_format_xint32	;wreg free
  2936                           
  2937                           ;measure.c: 189: ser_puts("\r\n");
  2938  000DB2  0EE5               	movlw	low STR_4
  2939  000DB4  6E0C               	movwf	ser_puts@s,c
  2940  000DB6  EC84  F013         	call	_ser_puts	;wreg free
  2941                           
  2942                           ;measure.c: 190: if(Cin > 999) {
  2943  000DBA  0EC0               	movlw	192
  2944  000DBC  6E0B               	movwf	___ftge@ff1,c
  2945  000DBE  0E79               	movlw	121
  2946  000DC0  6E0C               	movwf	___ftge@ff1+1,c
  2947  000DC2  0E44               	movlw	68
  2948  000DC4  6E0D               	movwf	___ftge@ff1+2,c
  2949  000DC6  C11C  F00E         	movff	measure_capacitance@Cin,___ftge@ff2
  2950  000DCA  C11D  F00F         	movff	measure_capacitance@Cin+1,___ftge@ff2+1
  2951  000DCE  C11E  F010         	movff	measure_capacitance@Cin+2,___ftge@ff2+2
  2952  000DD2  EC5F  F011         	call	___ftge	;wreg free
  2953  000DD6  E25F               	bc	l4785
  2954                           
  2955                           ;measure.c: 191: if(Cin > (999e+03l)) {
  2956  000DD8  0EE6               	movlw	230
  2957  000DDA  6E0B               	movwf	___ftge@ff1,c
  2958  000DDC  0E73               	movlw	115
  2959  000DDE  6E0C               	movwf	___ftge@ff1+1,c
  2960  000DE0  0E49               	movlw	73
  2961  000DE2  6E0D               	movwf	___ftge@ff1+2,c
  2962  000DE4  C11C  F00E         	movff	measure_capacitance@Cin,___ftge@ff2
  2963  000DE8  C11D  F00F         	movff	measure_capacitance@Cin+1,___ftge@ff2+1
  2964  000DEC  C11E  F010         	movff	measure_capacitance@Cin+2,___ftge@ff2+2
  2965  000DF0  EC5F  F011         	call	___ftge	;wreg free
  2966  000DF4  E23B               	bc	l4781
  2967                           
  2968                           ;measure.c: 192: if(Cin > (999e+06l)) {
  2969  000DF6  0E2E               	movlw	46
  2970  000DF8  6E0B               	movwf	___ftge@ff1,c
  2971  000DFA  0E6E               	movlw	110
  2972  000DFC  6E0C               	movwf	___ftge@ff1+1,c
  2973  000DFE  0E4E               	movlw	78
  2974  000E00  6E0D               	movwf	___ftge@ff1+2,c
  2975  000E02  C11C  F00E         	movff	measure_capacitance@Cin,___ftge@ff2
  2976  000E06  C11D  F00F         	movff	measure_capacitance@Cin+1,___ftge@ff2+1
  2977  000E0A  C11E  F010         	movff	measure_capacitance@Cin+2,___ftge@ff2+2
  2978  000E0E  EC5F  F011         	call	___ftge	;wreg free
  2979  000E12  E216               	bc	l4777
  2980                           
  2981                           ;measure.c: 193: Cin = Cin / (1e+09);
  2982  000E14  C11C  F013         	movff	measure_capacitance@Cin,___ftdiv@f1
  2983  000E18  C11D  F014         	movff	measure_capacitance@Cin+1,___ftdiv@f1+1
  2984  000E1C  C11E  F015         	movff	measure_capacitance@Cin+2,___ftdiv@f1+2
  2985  000E20  0E6B               	movlw	107
  2986  000E22  6E16               	movwf	___ftdiv@f2,c
  2987  000E24  0E6E               	movlw	110
  2988  000E26  6E17               	movwf	___ftdiv@f2+1,c
  2989  000E28  0E4E               	movlw	78
  2990  000E2A  6E18               	movwf	___ftdiv@f2+2,c
  2991  000E2C  EC9E  F00E         	call	___ftdiv	;wreg free
  2992  000E30  C013  F11C         	movff	?___ftdiv,measure_capacitance@Cin
  2993  000E34  C014  F11D         	movff	?___ftdiv+1,measure_capacitance@Cin+1
  2994  000E38  C015  F11E         	movff	?___ftdiv+2,measure_capacitance@Cin+2
  2995                           
  2996                           ;measure.c: 194: unit = 4;
  2997  000E3C  0E04               	movlw	4
  2998  000E3E  D02C               	goto	L3
  2999  000E40                     l4777:
  3000                           
  3001                           ;measure.c: 196: Cin = Cin / (1e+06);
  3002  000E40  C11C  F013         	movff	measure_capacitance@Cin,___ftdiv@f1
  3003  000E44  C11D  F014         	movff	measure_capacitance@Cin+1,___ftdiv@f1+1
  3004  000E48  C11E  F015         	movff	measure_capacitance@Cin+2,___ftdiv@f1+2
  3005  000E4C  0E24               	movlw	36
  3006  000E4E  6E16               	movwf	___ftdiv@f2,c
  3007  000E50  0E74               	movlw	116
  3008  000E52  6E17               	movwf	___ftdiv@f2+1,c
  3009  000E54  0E49               	movlw	73
  3010  000E56  6E18               	movwf	___ftdiv@f2+2,c
  3011  000E58  EC9E  F00E         	call	___ftdiv	;wreg free
  3012  000E5C  C013  F11C         	movff	?___ftdiv,measure_capacitance@Cin
  3013  000E60  C014  F11D         	movff	?___ftdiv+1,measure_capacitance@Cin+1
  3014  000E64  C015  F11E         	movff	?___ftdiv+2,measure_capacitance@Cin+2
  3015                           
  3016                           ;measure.c: 197: unit = 5;
  3017  000E68  0E05               	movlw	5
  3018  000E6A  D016               	goto	L3
  3019  000E6C                     l4781:
  3020                           
  3021                           ;measure.c: 200: Cin = Cin / 1e+03;
  3022  000E6C  C11C  F013         	movff	measure_capacitance@Cin,___ftdiv@f1
  3023  000E70  C11D  F014         	movff	measure_capacitance@Cin+1,___ftdiv@f1+1
  3024  000E74  C11E  F015         	movff	measure_capacitance@Cin+2,___ftdiv@f1+2
  3025  000E78  6A16               	clrf	___ftdiv@f2,c
  3026  000E7A  0E7A               	movlw	122
  3027  000E7C  6E17               	movwf	___ftdiv@f2+1,c
  3028  000E7E  0E44               	movlw	68
  3029  000E80  6E18               	movwf	___ftdiv@f2+2,c
  3030  000E82  EC9E  F00E         	call	___ftdiv	;wreg free
  3031  000E86  C013  F11C         	movff	?___ftdiv,measure_capacitance@Cin
  3032  000E8A  C014  F11D         	movff	?___ftdiv+1,measure_capacitance@Cin+1
  3033  000E8E  C015  F11E         	movff	?___ftdiv+2,measure_capacitance@Cin+2
  3034                           
  3035                           ;measure.c: 201: unit = 6;
  3036  000E92  0E06               	movlw	6
  3037  000E94  D001               	goto	L3
  3038  000E96                     l4785:
  3039                           
  3040                           ;measure.c: 204: unit = 7;
  3041  000E96  0E07               	movlw	7
  3042  000E98                     L3:
  3043  000E98  FFFF               	dw	65535	; assembler added errata NOP
  3044  000E9A  0101               	movlb	1	; () banked
  3045  000E9C  6F19               	movwf	measure_capacitance@unit& (0+255),b
  3046                           
  3047                           ; BSR set to: 1
  3048                           ;measure.c: 207: Cin = Cin * 100;
  3049  000E9E  C11C  F023         	movff	measure_capacitance@Cin,___ftmul@f1
  3050  000EA2  C11D  F024         	movff	measure_capacitance@Cin+1,___ftmul@f1+1
  3051  000EA6  C11E  F025         	movff	measure_capacitance@Cin+2,___ftmul@f1+2
  3052  000EAA  6A26               	clrf	___ftmul@f2,c
  3053  000EAC  0EC8               	movlw	200
  3054  000EAE  6E27               	movwf	___ftmul@f2+1,c
  3055  000EB0  0E42               	movlw	66
  3056  000EB2  6E28               	movwf	___ftmul@f2+2,c
  3057  000EB4  EC87  F00C         	call	___ftmul	;wreg free
  3058  000EB8  C023  F11C         	movff	?___ftmul,measure_capacitance@Cin
  3059  000EBC  C024  F11D         	movff	?___ftmul+1,measure_capacitance@Cin+1
  3060  000EC0  C025  F11E         	movff	?___ftmul+2,measure_capacitance@Cin+2
  3061                           
  3062                           ;measure.c: 208: var = (uint16_t)Cin;
  3063  000EC4  C11C  F047         	movff	measure_capacitance@Cin,___fttol@f1
  3064  000EC8  C11D  F048         	movff	measure_capacitance@Cin+1,___fttol@f1+1
  3065  000ECC  C11E  F049         	movff	measure_capacitance@Cin+2,___fttol@f1+2
  3066  000ED0  EC38  F00E         	call	___fttol	;wreg free
  3067  000ED4  C047  F11A         	movff	?___fttol,measure_capacitance@var
  3068  000ED8  C048  F11B         	movff	?___fttol+1,measure_capacitance@var+1
  3069                           
  3070                           ;measure.c: 210: print_reading(var);
  3071  000EDC  C11A  F03F         	movff	measure_capacitance@var,print_reading@measurement
  3072  000EE0  C11B  F040         	movff	measure_capacitance@var+1,print_reading@measurement+1
  3073  000EE4  EC3E  F010         	call	_print_reading	;wreg free
  3074                           
  3075                           ;measure.c: 211: print_unit(unit);
  3076  000EE8  0101               	movlb	1	; () banked
  3077  000EEA  5119               	movf	measure_capacitance@unit& (0+255),w,b
  3078  000EEC  EF03  F014         	goto	_print_unit
  3079  000EF0  FFFF               	dw	65535	; errata NOP
  3080  000EF2                     __end_of_measure_capacitance:
  3081                           	opt stack 0
  3082                           tblptru	equ	0xFF8
  3083                           tblptrh	equ	0xFF7
  3084                           tblptrl	equ	0xFF6
  3085                           tablat	equ	0xFF5
  3086                           intcon	equ	0xFF2
  3087                           intcon2	equ	0xFF1
  3088                           postinc0	equ	0xFEE
  3089                           wreg	equ	0xFE8
  3090                           postdec1	equ	0xFE5
  3091                           fsr1l	equ	0xFE1
  3092                           status	equ	0xFD8
  3093                           
  3094 ;; *************** function _print_unit *****************
  3095 ;; Defined at:
  3096 ;;		line 401 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../src/print.c"
  3097 ;; Parameters:    Size  Location     Type
  3098 ;;  unit            1    wreg     unsigned char 
  3099 ;; Auto vars:     Size  Location     Type
  3100 ;;  unit            1    0[COMRAM] unsigned char 
  3101 ;; Return value:  Size  Location     Type
  3102 ;;                  1    wreg      void 
  3103 ;; Registers used:
  3104 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3105 ;; Tracked objects:
  3106 ;;		On entry : 3E/0
  3107 ;;		On exit  : 0/0
  3108 ;;		Unchanged: 0/0
  3109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3110 ;;      Params:         0       0       0       0       0       0       0
  3111 ;;      Locals:         0       0       0       0       0       0       0
  3112 ;;      Temps:          2       0       0       0       0       0       0
  3113 ;;      Totals:         2       0       0       0       0       0       0
  3114 ;;Total ram usage:        2 bytes
  3115 ;; Hardware stack levels used:    1
  3116 ;; Hardware stack levels required when called:    6
  3117 ;; This function calls:
  3118 ;;		_lcd_gotoxy
  3119 ;; This function is called by:
  3120 ;;		_measure_capacitance
  3121 ;;		_measure_inductance
  3122 ;; This function uses a non-reentrant model
  3123 ;;
  3124                           
  3125                           	psect	text7
  3126  002806                     __ptext7:
  3127                           	opt stack 0
  3128  002806                     _print_unit:
  3129                           	opt stack 0
  3130  002806  FFFF               	dw	65535	; assembler added errata NOP
  3131                           
  3132                           ;print.c: 409: static const char* units[8] = {"H", "mH", "uH", "nH", "mF", "uF", "nF", "
      +                          pF"};
  3133                           ;print.c: 410: lcd_gotoxy(14, 0);
  3134                           
  3135                           ;incstack = 0
  3136  002808  6A0F               	clrf	lcd_gotoxy@row,c
  3137  00280A  0E0E               	movlw	14
  3138  00280C  EC1D  F013         	call	_lcd_gotoxy
  3139                           
  3140                           ;print.c: 414: lcd_gotoxy(16 - (buffer.n - buffer.p), 0);
  3141  002810  6A0F               	clrf	lcd_gotoxy@row,c
  3142  002812  0100               	movlb	0	; () banked
  3143  002814  39B6               	swapf	(_buffer+16)& (0+255),w,b
  3144  002816  0B0F               	andlw	15
  3145  002818  6E15               	movwf	??_print_unit& (0+255),c
  3146  00281A  51B6               	movf	(_buffer+16)& (0+255),w,b
  3147  00281C  0B0F               	andlw	15
  3148  00281E  6E16               	movwf	(??_print_unit+1)& (0+255),c
  3149  002820  5015               	movf	??_print_unit,w,c
  3150  002822  5C16               	subwf	??_print_unit+1,w,c
  3151  002824  0F10               	addlw	16
  3152  002826  EF1D  F013         	goto	_lcd_gotoxy
  3153  00282A  FFFF               	dw	65535	; errata NOP
  3154  00282C                     __end_of_print_unit:
  3155                           	opt stack 0
  3156                           tblptru	equ	0xFF8
  3157                           tblptrh	equ	0xFF7
  3158                           tblptrl	equ	0xFF6
  3159                           tablat	equ	0xFF5
  3160                           intcon	equ	0xFF2
  3161                           intcon2	equ	0xFF1
  3162                           postinc0	equ	0xFEE
  3163                           wreg	equ	0xFE8
  3164                           postdec1	equ	0xFE5
  3165                           fsr1l	equ	0xFE1
  3166                           status	equ	0xFD8
  3167                           
  3168 ;; *************** function _print_reading *****************
  3169 ;; Defined at:
  3170 ;;		line 424 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../src/print.c"
  3171 ;; Parameters:    Size  Location     Type
  3172 ;;  measurement     2   62[COMRAM] unsigned int 
  3173 ;; Auto vars:     Size  Location     Type
  3174 ;;		None
  3175 ;; Return value:  Size  Location     Type
  3176 ;;                  1    wreg      void 
  3177 ;; Registers used:
  3178 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, cstack
  3179 ;; Tracked objects:
  3180 ;;		On entry : 0/0
  3181 ;;		On exit  : 0/0
  3182 ;;		Unchanged: 0/0
  3183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3184 ;;      Params:         2       0       0       0       0       0       0
  3185 ;;      Locals:         4       0       0       0       0       0       0
  3186 ;;      Temps:          0       0       0       0       0       0       0
  3187 ;;      Totals:         6       0       0       0       0       0       0
  3188 ;;Total ram usage:        6 bytes
  3189 ;; Hardware stack levels used:    1
  3190 ;; Hardware stack levels required when called:    6
  3191 ;; This function calls:
  3192 ;;		___lwdiv
  3193 ;;		___lwmod
  3194 ;;		_format_number
  3195 ;;		_lcd_gotoxy
  3196 ;;		_lcd_puts
  3197 ;; This function is called by:
  3198 ;;		_measure_capacitance
  3199 ;;		_measure_inductance
  3200 ;; This function uses a non-reentrant model
  3201 ;;
  3202                           
  3203                           	psect	text8
  3204  00207C                     __ptext8:
  3205                           	opt stack 0
  3206  00207C                     _print_reading:
  3207                           	opt stack 0
  3208  00207C  FFFF               	dw	65535	; assembler added errata NOP
  3209                           
  3210                           ;print.c: 451: lcd_gotoxy(9, 0);
  3211                           
  3212                           ;incstack = 0
  3213  00207E  6A0F               	clrf	lcd_gotoxy@row,c
  3214  002080  0E09               	movlw	9
  3215  002082  EC1D  F013         	call	_lcd_gotoxy
  3216                           
  3217                           ;print.c: 452: lcd_puts("     ");
  3218  002086  0E9F               	movlw	low (STR_5+1)
  3219  002088  6E0C               	movwf	lcd_puts@string,c
  3220  00208A  ECC4  F012         	call	_lcd_puts	;wreg free
  3221                           
  3222                           ;print.c: 453: lcd_gotoxy(9, 0);
  3223  00208E  6A0F               	clrf	lcd_gotoxy@row,c
  3224  002090  0E09               	movlw	9
  3225  002092  EC1D  F013         	call	_lcd_gotoxy
  3226                           
  3227                           ;print.c: 455: format_number(&buffer_putch, measurement / 100, 10, 0);
  3228  002096  C03F  F00B         	movff	print_reading@measurement,___lwdiv@dividend
  3229  00209A  C040  F00C         	movff	print_reading@measurement+1,___lwdiv@dividend+1
  3230  00209E  6A0E               	clrf	___lwdiv@divisor+1,c
  3231  0020A0  0E64               	movlw	100
  3232  0020A2  6E0D               	movwf	___lwdiv@divisor,c
  3233  0020A4  EC90  F011         	call	___lwdiv	;wreg free
  3234  0020A8  C00B  F041         	movff	?___lwdiv,_print_reading$1685
  3235  0020AC  C00C  F042         	movff	?___lwdiv+1,_print_reading$1685+1
  3236                           
  3237                           ;print.c: 455: format_number(&buffer_putch, measurement / 100, 10, 0);
  3238  0020B0  0EF0               	movlw	low _buffer_putch
  3239  0020B2  6E12               	movwf	format_number@fn,c
  3240  0020B4  0E28               	movlw	high _buffer_putch
  3241  0020B6  6E13               	movwf	format_number@fn+1,c
  3242  0020B8  C041  F014         	movff	_print_reading$1685,format_number@n
  3243  0020BC  C042  F015         	movff	_print_reading$1685+1,format_number@n+1
  3244  0020C0  0E0A               	movlw	10
  3245  0020C2  6E16               	movwf	format_number@base,c
  3246  0020C4  6A17               	clrf	format_number@pad,c
  3247  0020C6  ECD1  F00D         	call	_format_number	;wreg free
  3248                           
  3249                           ;print.c: 457: format_number(&buffer_putch, measurement % 100, 10, 0);
  3250  0020CA  C03F  F00B         	movff	print_reading@measurement,___lwmod@dividend
  3251  0020CE  C040  F00C         	movff	print_reading@measurement+1,___lwmod@dividend+1
  3252  0020D2  6A0E               	clrf	___lwmod@divisor+1,c
  3253  0020D4  0E64               	movlw	100
  3254  0020D6  6E0D               	movwf	___lwmod@divisor,c
  3255  0020D8  EC80  F012         	call	___lwmod	;wreg free
  3256  0020DC  C00B  F043         	movff	?___lwmod,_print_reading$1686
  3257  0020E0  C00C  F044         	movff	?___lwmod+1,_print_reading$1686+1
  3258                           
  3259                           ;print.c: 457: format_number(&buffer_putch, measurement % 100, 10, 0);
  3260  0020E4  0EF0               	movlw	low _buffer_putch
  3261  0020E6  6E12               	movwf	format_number@fn,c
  3262  0020E8  0E28               	movlw	high _buffer_putch
  3263  0020EA  6E13               	movwf	format_number@fn+1,c
  3264  0020EC  C043  F014         	movff	_print_reading$1686,format_number@n
  3265  0020F0  C044  F015         	movff	_print_reading$1686+1,format_number@n+1
  3266  0020F4  0E0A               	movlw	10
  3267  0020F6  6E16               	movwf	format_number@base,c
  3268  0020F8  6A17               	clrf	format_number@pad,c
  3269  0020FA  EFD1  F00D         	goto	_format_number	;wreg free
  3270  0020FE  FFFF               	dw	65535	; errata NOP
  3271  002100                     __end_of_print_reading:
  3272                           	opt stack 0
  3273                           tblptru	equ	0xFF8
  3274                           tblptrh	equ	0xFF7
  3275                           tblptrl	equ	0xFF6
  3276                           tablat	equ	0xFF5
  3277                           intcon	equ	0xFF2
  3278                           intcon2	equ	0xFF1
  3279                           postinc0	equ	0xFEE
  3280                           wreg	equ	0xFE8
  3281                           postdec1	equ	0xFE5
  3282                           fsr1l	equ	0xFE1
  3283                           status	equ	0xFD8
  3284                           
  3285 ;; *************** function _lcd_puts *****************
  3286 ;; Defined at:
  3287 ;;		line 163 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../lib/lcd44780.c"
  3288 ;; Parameters:    Size  Location     Type
  3289 ;;  string          1   11[COMRAM] PTR const unsigned char 
  3290 ;;		 -> STR_35(4), STR_34(4), STR_33(6), STR_8(5), 
  3291 ;;		 -> STR_7(6), STR_6(7), STR_5(7), STR_1(10), 
  3292 ;; Auto vars:     Size  Location     Type
  3293 ;;  i               1   13[COMRAM] unsigned char 
  3294 ;; Return value:  Size  Location     Type
  3295 ;;                  1    wreg      void 
  3296 ;; Registers used:
  3297 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3298 ;; Tracked objects:
  3299 ;;		On entry : 0/0
  3300 ;;		On exit  : 0/0
  3301 ;;		Unchanged: 0/0
  3302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3303 ;;      Params:         1       0       0       0       0       0       0
  3304 ;;      Locals:         1       0       0       0       0       0       0
  3305 ;;      Temps:          1       0       0       0       0       0       0
  3306 ;;      Totals:         3       0       0       0       0       0       0
  3307 ;;Total ram usage:        3 bytes
  3308 ;; Hardware stack levels used:    1
  3309 ;; Hardware stack levels required when called:    5
  3310 ;; This function calls:
  3311 ;;		_lcd_putch
  3312 ;; This function is called by:
  3313 ;;		_main
  3314 ;;		_print_reading
  3315 ;;		_print_indicator
  3316 ;; This function uses a non-reentrant model
  3317 ;;
  3318                           
  3319                           	psect	text9
  3320  002588                     __ptext9:
  3321                           	opt stack 0
  3322  002588                     _lcd_puts:
  3323                           	opt stack 0
  3324  002588  FFFF               	dw	65535	; assembler added errata NOP
  3325                           
  3326                           ;lcd44780.c: 164: uint8_t i;
  3327                           ;lcd44780.c: 165: for(i = 0; string[i]; i++) lcd_putch(string[i]);
  3328                           
  3329                           ;incstack = 0
  3330  00258A  6A0E               	clrf	lcd_puts@i,c
  3331  00258C  D00D               	goto	l4303
  3332  00258E                     l4299:
  3333  00258E  500C               	movf	lcd_puts@string,w,c
  3334  002590  240E               	addwf	lcd_puts@i,w,c
  3335  002592  6E0D               	movwf	??_lcd_puts& (0+255),c
  3336  002594  C00D  FFF6         	movff	??_lcd_puts,tblptrl
  3337  002598                     	if	1	;There is more than 1 active tblptr byte
  3338  002598  0E06               	movlw	high __smallconst
  3339  00259A  6EF7               	movwf	tblptrh,c
  3340  00259C                     	endif
  3341  00259C                     	if	0	;tblptru may be non-zero
  3342  00259C                     	endif
  3343  00259C                     	if	0	;tblptru may be non-zero
  3344  00259C                     	endif
  3345  00259C  0008               	tblrd		*
  3346  00259E  FFFF               	dw	65535	; errata NOP
  3347  0025A0  50F5               	movf	tablat,w,c
  3348  0025A2  EC60  F014         	call	_lcd_putch
  3349  0025A6  2A0E               	incf	lcd_puts@i,f,c
  3350  0025A8                     l4303:
  3351  0025A8  FFFF               	dw	65535	; assembler added errata NOP
  3352  0025AA  500C               	movf	lcd_puts@string,w,c
  3353  0025AC  240E               	addwf	lcd_puts@i,w,c
  3354  0025AE  6E0D               	movwf	??_lcd_puts& (0+255),c
  3355  0025B0  C00D  FFF6         	movff	??_lcd_puts,tblptrl
  3356  0025B4                     	if	1	;There is more than 1 active tblptr byte
  3357  0025B4  0E06               	movlw	high __smallconst
  3358  0025B6  6EF7               	movwf	tblptrh,c
  3359  0025B8                     	endif
  3360  0025B8                     	if	0	;tblptru may be non-zero
  3361  0025B8                     	endif
  3362  0025B8                     	if	0	;tblptru may be non-zero
  3363  0025B8                     	endif
  3364  0025B8  0008               	tblrd		*
  3365  0025BA  FFFF               	dw	65535	; errata NOP
  3366  0025BC  50F5               	movf	tablat,w,c
  3367  0025BE  E1E7               	bnz	l4299
  3368  0025C0  0012               	return		;funcret
  3369  0025C2  FFFF               	dw	65535	; errata NOP
  3370  0025C4                     __end_of_lcd_puts:
  3371                           	opt stack 0
  3372                           tblptru	equ	0xFF8
  3373                           tblptrh	equ	0xFF7
  3374                           tblptrl	equ	0xFF6
  3375                           tablat	equ	0xFF5
  3376                           intcon	equ	0xFF2
  3377                           intcon2	equ	0xFF1
  3378                           postinc0	equ	0xFEE
  3379                           wreg	equ	0xFE8
  3380                           postdec1	equ	0xFE5
  3381                           fsr1l	equ	0xFE1
  3382                           status	equ	0xFD8
  3383                           
  3384 ;; *************** function _format_xint32 *****************
  3385 ;; Defined at:
  3386 ;;		line 55 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../lib/format.c"
  3387 ;; Parameters:    Size  Location     Type
  3388 ;;  fn              2   62[COMRAM] PTR FTN(unsigned char ,)
  3389 ;;		 -> ser_putch(1), 
  3390 ;;  x               4   64[COMRAM] unsigned long 
  3391 ;; Auto vars:     Size  Location     Type
  3392 ;;		None
  3393 ;; Return value:  Size  Location     Type
  3394 ;;                  1    wreg      void 
  3395 ;; Registers used:
  3396 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  3397 ;; Tracked objects:
  3398 ;;		On entry : 0/0
  3399 ;;		On exit  : 0/0
  3400 ;;		Unchanged: 0/0
  3401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3402 ;;      Params:         6       0       0       0       0       0       0
  3403 ;;      Locals:         0       0       0       0       0       0       0
  3404 ;;      Temps:          0       0       0       0       0       0       0
  3405 ;;      Totals:         6       0       0       0       0       0       0
  3406 ;;Total ram usage:        6 bytes
  3407 ;; Hardware stack levels used:    1
  3408 ;; Hardware stack levels required when called:    6
  3409 ;; This function calls:
  3410 ;;		_format_number
  3411 ;;		_ser_putch
  3412 ;; This function is called by:
  3413 ;;		_measure_capacitance
  3414 ;; This function uses a non-reentrant model
  3415 ;;
  3416                           
  3417                           	psect	text10
  3418  002100                     __ptext10:
  3419                           	opt stack 0
  3420  002100                     _format_xint32:
  3421                           	opt stack 0
  3422  002100  FFFF               	dw	65535	; assembler added errata NOP
  3423                           
  3424                           ;format.c: 56: fn('0');
  3425                           
  3426                           ;incstack = 0
  3427  002102  D801               	call	u4258
  3428  002104  D00C               	goto	u4259
  3429  002106                     u4258:
  3430  002106  FFFF               	dw	65535	; assembler added errata NOP
  3431  002108  0005               	push	
  3432  00210A  6EFA               	movwf	pclath,c
  3433  00210C  503F               	movf	format_xint32@fn,w,c
  3434  00210E  6EFD               	movwf	tosl,c
  3435  002110  5040               	movf	format_xint32@fn+1,w,c
  3436  002112  6EFE               	movwf	tosh,c
  3437  002114  50F8               	movf	tblptru,w,c
  3438  002116  6EFF               	movwf	tosu,c
  3439  002118  50FA               	movf	pclath,w,c
  3440  00211A  0C30               	retlw	48	;indir
  3441  00211C  FFFF               	dw	65535	; errata NOP
  3442  00211E                     u4259:
  3443  00211E  FFFF               	dw	65535	; assembler added errata NOP
  3444                           
  3445                           ;format.c: 57: fn('x');
  3446  002120  D801               	call	u4268
  3447  002122  D00C               	goto	u4269
  3448  002124                     u4268:
  3449  002124  FFFF               	dw	65535	; assembler added errata NOP
  3450  002126  0005               	push	
  3451  002128  6EFA               	movwf	pclath,c
  3452  00212A  503F               	movf	format_xint32@fn,w,c
  3453  00212C  6EFD               	movwf	tosl,c
  3454  00212E  5040               	movf	format_xint32@fn+1,w,c
  3455  002130  6EFE               	movwf	tosh,c
  3456  002132  50F8               	movf	tblptru,w,c
  3457  002134  6EFF               	movwf	tosu,c
  3458  002136  50FA               	movf	pclath,w,c
  3459  002138  0C78               	retlw	120	;indir
  3460  00213A  FFFF               	dw	65535	; errata NOP
  3461  00213C                     u4269:
  3462  00213C  FFFF               	dw	65535	; assembler added errata NOP
  3463                           
  3464                           ;format.c: 58: format_number(fn, (uint16_t)(x >> 16), 16, -4);
  3465  00213E  C03F  F012         	movff	format_xint32@fn,format_number@fn
  3466  002142  C040  F013         	movff	format_xint32@fn+1,format_number@fn+1
  3467  002146  C043  F014         	movff	format_xint32@x+2,format_number@n
  3468  00214A  C044  F015         	movff	format_xint32@x+3,format_number@n+1
  3469  00214E  0E10               	movlw	16
  3470  002150  6E16               	movwf	format_number@base,c
  3471  002152  0EFC               	movlw	252
  3472  002154  6E17               	movwf	format_number@pad,c
  3473  002156  ECD1  F00D         	call	_format_number
  3474                           
  3475                           ;format.c: 59: format_number(fn, (uint16_t)(x & 0xffff), 16, -4);
  3476  00215A  C03F  F012         	movff	format_xint32@fn,format_number@fn
  3477  00215E  C040  F013         	movff	format_xint32@fn+1,format_number@fn+1
  3478  002162  C041  F014         	movff	format_xint32@x,format_number@n
  3479  002166  C042  F015         	movff	format_xint32@x+1,format_number@n+1
  3480  00216A  0E10               	movlw	16
  3481  00216C  6E16               	movwf	format_number@base,c
  3482  00216E  0EFC               	movlw	252
  3483  002170  6E17               	movwf	format_number@pad,c
  3484  002172  EFD1  F00D         	goto	_format_number	;wreg free
  3485  002176  FFFF               	dw	65535	; errata NOP
  3486  002178                     __end_of_format_xint32:
  3487                           	opt stack 0
  3488                           tosu	equ	0xFFF
  3489                           tosh	equ	0xFFE
  3490                           tosl	equ	0xFFD
  3491                           pclath	equ	0xFFA
  3492                           tblptru	equ	0xFF8
  3493                           tblptrh	equ	0xFF7
  3494                           tblptrl	equ	0xFF6
  3495                           tablat	equ	0xFF5
  3496                           intcon	equ	0xFF2
  3497                           intcon2	equ	0xFF1
  3498                           postinc0	equ	0xFEE
  3499                           wreg	equ	0xFE8
  3500                           postdec1	equ	0xFE5
  3501                           fsr1l	equ	0xFE1
  3502                           status	equ	0xFD8
  3503                           
  3504 ;; *************** function _format_double *****************
  3505 ;; Defined at:
  3506 ;;		line 81 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../lib/format.c"
  3507 ;; Parameters:    Size  Location     Type
  3508 ;;  fn              2   28[BANK0 ] PTR FTN(unsigned char ,)
  3509 ;;		 -> ser_putch(1), lcd_putch(1), 
  3510 ;;  num             3   30[BANK0 ] PTR FTN(unsigned char ,)
  3511 ;; Auto vars:     Size  Location     Type
  3512 ;;  weight          3   39[BANK0 ] PTR FTN(unsigned char ,)
  3513 ;;  m               2   44[BANK0 ] short 
  3514 ;;  digit           2   42[BANK0 ] short 
  3515 ;; Return value:  Size  Location     Type
  3516 ;;                  1    wreg      void 
  3517 ;; Registers used:
  3518 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3519 ;; Tracked objects:
  3520 ;;		On entry : 3F/0
  3521 ;;		On exit  : 0/0
  3522 ;;		Unchanged: 0/0
  3523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3524 ;;      Params:         0       5       0       0       0       0       0
  3525 ;;      Locals:         0      13       0       0       0       0       0
  3526 ;;      Temps:          0       0       0       0       0       0       0
  3527 ;;      Totals:         0      18       0       0       0       0       0
  3528 ;;Total ram usage:       18 bytes
  3529 ;; Hardware stack levels used:    1
  3530 ;; Hardware stack levels required when called:    7
  3531 ;; This function calls:
  3532 ;;		___awtoft
  3533 ;;		___ftdiv
  3534 ;;		___ftge
  3535 ;;		___ftmul
  3536 ;;		___ftsub
  3537 ;;		___fttol
  3538 ;;		_floor
  3539 ;;		_lcd_putch
  3540 ;;		_log10
  3541 ;;		_pow
  3542 ;;		_ser_putch
  3543 ;; This function is called by:
  3544 ;;		_main
  3545 ;;		_measure_capacitance
  3546 ;; This function uses a non-reentrant model
  3547 ;;
  3548                           
  3549                           	psect	text11
  3550  0010A2                     __ptext11:
  3551                           	opt stack 0
  3552  0010A2                     _format_double:
  3553                           	opt stack 0
  3554  0010A2  FFFF               	dw	65535	; assembler added errata NOP
  3555                           
  3556                           ; BSR set to: 0
  3557                           ;format.c: 82: short m = (short)log10(num);
  3558                           
  3559                           ;incstack = 0
  3560  0010A4  C0D8  F041         	movff	format_double@num,log10@x
  3561  0010A8  C0D9  F042         	movff	format_double@num+1,log10@x+1
  3562  0010AC  C0DA  F043         	movff	format_double@num+2,log10@x+2
  3563  0010B0  EC5B  F012         	call	_log10	;wreg free
  3564  0010B4  C041  F047         	movff	?_log10,___fttol@f1
  3565  0010B8  C042  F048         	movff	?_log10+1,___fttol@f1+1
  3566  0010BC  C043  F049         	movff	?_log10+2,___fttol@f1+2
  3567  0010C0  EC38  F00E         	call	___fttol	;wreg free
  3568  0010C4  C047  F0E6         	movff	?___fttol,format_double@m
  3569  0010C8  C048  F0E7         	movff	?___fttol+1,format_double@m+1
  3570                           
  3571                           ;format.c: 83: short digit;
  3572                           ;format.c: 86: while(num > 0 + (3.05176e-05)) {
  3573  0010CC  D099               	goto	l4443
  3574  0010CE                     l4425:
  3575                           
  3576                           ;format.c: 87: double weight = pow(10.0l, m);
  3577  0010CE  C0E6  F013         	movff	format_double@m,___awtoft@c
  3578  0010D2  C0E7  F014         	movff	format_double@m+1,___awtoft@c+1
  3579  0010D6  ECE2  F012         	call	___awtoft	;wreg free
  3580  0010DA  C013  F0DB         	movff	?___awtoft,_format_double$1683
  3581  0010DE  C014  F0DC         	movff	?___awtoft+1,_format_double$1683+1
  3582  0010E2  C015  F0DD         	movff	?___awtoft+2,_format_double$1683+2
  3583                           
  3584                           ;format.c: 87: double weight = pow(10.0l, m);
  3585  0010E6  0100               	movlb	0	; () banked
  3586  0010E8  6BC5               	clrf	pow@x& (0+255),b
  3587  0010EA  0E20               	movlw	32
  3588  0010EC  6FC6               	movwf	(pow@x+1)& (0+255),b
  3589  0010EE  0E41               	movlw	65
  3590  0010F0  6FC7               	movwf	(pow@x+2)& (0+255),b
  3591  0010F2  C0DB  F0C8         	movff	_format_double$1683,pow@y
  3592  0010F6  C0DC  F0C9         	movff	_format_double$1683+1,pow@y+1
  3593  0010FA  C0DD  F0CA         	movff	_format_double$1683+2,pow@y+2
  3594  0010FE  EC71  F00A         	call	_pow	;wreg free
  3595  001102  C0C5  F0E1         	movff	?_pow,format_double@weight
  3596  001106  C0C6  F0E2         	movff	?_pow+1,format_double@weight+1
  3597  00110A  C0C7  F0E3         	movff	?_pow+2,format_double@weight+2
  3598                           
  3599                           ; BSR set to: 0
  3600                           ;format.c: 88: digit = (short)floor(num / weight);
  3601  00110E  C0E1  F016         	movff	format_double@weight,___ftdiv@f2
  3602  001112  C0E2  F017         	movff	format_double@weight+1,___ftdiv@f2+1
  3603  001116  C0E3  F018         	movff	format_double@weight+2,___ftdiv@f2+2
  3604  00111A  C0D8  F013         	movff	format_double@num,___ftdiv@f1
  3605  00111E  C0D9  F014         	movff	format_double@num+1,___ftdiv@f1+1
  3606  001122  C0DA  F015         	movff	format_double@num+2,___ftdiv@f1+2
  3607  001126  EC9E  F00E         	call	___ftdiv	;wreg free
  3608  00112A  C013  F060         	movff	?___ftdiv,floor@x
  3609  00112E  C014  F061         	movff	?___ftdiv+1,floor@x+1
  3610  001132  C015  F062         	movff	?___ftdiv+2,floor@x+2
  3611  001136  EC65  F00D         	call	_floor	;wreg free
  3612  00113A  C060  F0DE         	movff	?_floor,_format_double$1684
  3613  00113E  C061  F0DF         	movff	?_floor+1,_format_double$1684+1
  3614  001142  C062  F0E0         	movff	?_floor+2,_format_double$1684+2
  3615                           
  3616                           ;format.c: 88: digit = (short)floor(num / weight);
  3617  001146  C0DE  F047         	movff	_format_double$1684,___fttol@f1
  3618  00114A  C0DF  F048         	movff	_format_double$1684+1,___fttol@f1+1
  3619  00114E  C0E0  F049         	movff	_format_double$1684+2,___fttol@f1+2
  3620  001152  EC38  F00E         	call	___fttol	;wreg free
  3621  001156  C047  F0E4         	movff	?___fttol,format_double@digit
  3622  00115A  C048  F0E5         	movff	?___fttol+1,format_double@digit+1
  3623                           
  3624                           ;format.c: 89: num -= (digit * weight);
  3625  00115E  C0D8  F032         	movff	format_double@num,___ftsub@f1
  3626  001162  C0D9  F033         	movff	format_double@num+1,___ftsub@f1+1
  3627  001166  C0DA  F034         	movff	format_double@num+2,___ftsub@f1+2
  3628  00116A  C0E1  F026         	movff	format_double@weight,___ftmul@f2
  3629  00116E  C0E2  F027         	movff	format_double@weight+1,___ftmul@f2+1
  3630  001172  C0E3  F028         	movff	format_double@weight+2,___ftmul@f2+2
  3631  001176  C0E4  F013         	movff	format_double@digit,___awtoft@c
  3632  00117A  C0E5  F014         	movff	format_double@digit+1,___awtoft@c+1
  3633  00117E  ECE2  F012         	call	___awtoft	;wreg free
  3634  001182  C013  F023         	movff	?___awtoft,___ftmul@f1
  3635  001186  C014  F024         	movff	?___awtoft+1,___ftmul@f1+1
  3636  00118A  C015  F025         	movff	?___awtoft+2,___ftmul@f1+2
  3637  00118E  EC87  F00C         	call	___ftmul	;wreg free
  3638  001192  C023  F035         	movff	?___ftmul,___ftsub@f2
  3639  001196  C024  F036         	movff	?___ftmul+1,___ftsub@f2+1
  3640  00119A  C025  F037         	movff	?___ftmul+2,___ftsub@f2+2
  3641  00119E  EC00  F013         	call	___ftsub	;wreg free
  3642  0011A2  C032  F0D8         	movff	?___ftsub,format_double@num
  3643  0011A6  C033  F0D9         	movff	?___ftsub+1,format_double@num+1
  3644  0011AA  C034  F0DA         	movff	?___ftsub+2,format_double@num+2
  3645                           
  3646                           ;format.c: 90: fn((char)('0' + digit));
  3647  0011AE  D801               	call	u4208
  3648  0011B0  D00F               	goto	u4209
  3649  0011B2                     u4208:
  3650  0011B2  FFFF               	dw	65535	; assembler added errata NOP
  3651  0011B4  0005               	push	
  3652  0011B6  0100               	movlb	0	; () banked
  3653  0011B8  6EFA               	movwf	pclath,c
  3654  0011BA  51D6               	movf	format_double@fn& (0+255),w,b
  3655  0011BC  6EFD               	movwf	tosl,c
  3656  0011BE  51D7               	movf	(format_double@fn+1)& (0+255),w,b
  3657  0011C0  6EFE               	movwf	tosh,c
  3658  0011C2  50F8               	movf	tblptru,w,c
  3659  0011C4  6EFF               	movwf	tosu,c
  3660  0011C6  50FA               	movf	pclath,w,c
  3661  0011C8  51E4               	movf	format_double@digit& (0+255),w,b
  3662  0011CA  0F30               	addlw	48
  3663  0011CC  0012               	return		;indir
  3664  0011CE  FFFF               	dw	65535	; errata NOP
  3665  0011D0                     u4209:
  3666  0011D0  FFFF               	dw	65535	; assembler added errata NOP
  3667                           
  3668                           ;format.c: 91: if(m == 0)
  3669  0011D2  0100               	movlb	0	; () banked
  3670  0011D4  51E6               	movf	format_double@m& (0+255),w,b
  3671  0011D6  11E7               	iorwf	(format_double@m+1)& (0+255),w,b
  3672  0011D8  E10E               	bnz	u4229
  3673                           
  3674                           ; BSR set to: 0
  3675                           ;format.c: 92: fn('.');
  3676  0011DA  D801               	call	u4228
  3677  0011DC  D00C               	goto	u4229
  3678  0011DE                     u4228:
  3679  0011DE  FFFF               	dw	65535	; assembler added errata NOP
  3680  0011E0  0005               	push	
  3681  0011E2  6EFA               	movwf	pclath,c
  3682  0011E4  51D6               	movf	format_double@fn& (0+255),w,b
  3683  0011E6  6EFD               	movwf	tosl,c
  3684  0011E8  51D7               	movf	(format_double@fn+1)& (0+255),w,b
  3685  0011EA  6EFE               	movwf	tosh,c
  3686  0011EC  50F8               	movf	tblptru,w,c
  3687  0011EE  6EFF               	movwf	tosu,c
  3688  0011F0  50FA               	movf	pclath,w,c
  3689  0011F2  0C2E               	retlw	46	;indir
  3690  0011F4  FFFF               	dw	65535	; errata NOP
  3691  0011F6                     u4229:
  3692  0011F6  FFFF               	dw	65535	; assembler added errata NOP
  3693                           
  3694                           ;format.c: 93: m--;
  3695  0011F8  0100               	movlb	0	; () banked
  3696  0011FA  07E6               	decf	format_double@m& (0+255),f,b
  3697  0011FC  A0D8               	btfss	status,0,c
  3698  0011FE  07E7               	decf	(format_double@m+1)& (0+255),f,b
  3699  001200                     l4443:
  3700  001200  FFFF               	dw	65535	; assembler added errata NOP
  3701  001202  6A0B               	clrf	___ftge@ff1,c
  3702  001204  6A0C               	clrf	___ftge@ff1+1,c
  3703  001206  0E38               	movlw	56
  3704  001208  6E0D               	movwf	___ftge@ff1+2,c
  3705  00120A  C0D8  F00E         	movff	format_double@num,___ftge@ff2
  3706  00120E  C0D9  F00F         	movff	format_double@num+1,___ftge@ff2+1
  3707  001212  C0DA  F010         	movff	format_double@num+2,___ftge@ff2+2
  3708  001216  EC5F  F011         	call	___ftge
  3709  00121A  E201 D758          	bnc	l4425
  3710  00121E  0012               	return		;funcret
  3711  001220  FFFF               	dw	65535	; errata NOP
  3712  001222                     __end_of_format_double:
  3713                           	opt stack 0
  3714                           tosu	equ	0xFFF
  3715                           tosh	equ	0xFFE
  3716                           tosl	equ	0xFFD
  3717                           pclath	equ	0xFFA
  3718                           tblptru	equ	0xFF8
  3719                           tblptrh	equ	0xFF7
  3720                           tblptrl	equ	0xFF6
  3721                           tablat	equ	0xFF5
  3722                           intcon	equ	0xFF2
  3723                           intcon2	equ	0xFF1
  3724                           postinc0	equ	0xFEE
  3725                           wreg	equ	0xFE8
  3726                           postdec1	equ	0xFE5
  3727                           fsr1l	equ	0xFE1
  3728                           status	equ	0xFD8
  3729                           
  3730 ;; *************** function _pow *****************
  3731 ;; Defined at:
  3732 ;;		line 5 in file "/opt/microchip/xc8/v1.45/sources/common/pow.c"
  3733 ;; Parameters:    Size  Location     Type
  3734 ;;  x               3   11[BANK0 ] void 
  3735 ;;  y               3   14[BANK0 ] void 
  3736 ;; Auto vars:     Size  Location     Type
  3737 ;;  yi              4   24[BANK0 ] unsigned long 
  3738 ;;  sign            1   23[BANK0 ] unsigned char 
  3739 ;; Return value:  Size  Location     Type
  3740 ;;                  3   11[BANK0 ] unsigned char 
  3741 ;; Registers used:
  3742 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3743 ;; Tracked objects:
  3744 ;;		On entry : 3F/0
  3745 ;;		On exit  : 3F/0
  3746 ;;		Unchanged: 0/0
  3747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3748 ;;      Params:         0       6       0       0       0       0       0
  3749 ;;      Locals:         0      11       0       0       0       0       0
  3750 ;;      Temps:          0       0       0       0       0       0       0
  3751 ;;      Totals:         0      17       0       0       0       0       0
  3752 ;;Total ram usage:       17 bytes
  3753 ;; Hardware stack levels used:    1
  3754 ;; Hardware stack levels required when called:    6
  3755 ;; This function calls:
  3756 ;;		___ftge
  3757 ;;		___ftmul
  3758 ;;		___ftneg
  3759 ;;		___fttol
  3760 ;;		___lltoft
  3761 ;;		_exp
  3762 ;;		_log
  3763 ;; This function is called by:
  3764 ;;		_format_double
  3765 ;; This function uses a non-reentrant model
  3766 ;;
  3767                           
  3768                           	psect	text12
  3769  0014E2                     __ptext12:
  3770                           	opt stack 0
  3771  0014E2                     _pow:
  3772                           	opt stack 0
  3773  0014E2  FFFF               	dw	65535	; assembler added errata NOP
  3774                           
  3775                           ; BSR set to: 0
  3776                           
  3777                           ;incstack = 0
  3778  0014E4  6BD1               	clrf	pow@sign& (0+255),b
  3779                           
  3780                           ; BSR set to: 0
  3781  0014E6  51C5               	movf	pow@x& (0+255),w,b
  3782  0014E8  11C6               	iorwf	(pow@x+1)& (0+255),w,b
  3783  0014EA  11C7               	iorwf	(pow@x+2)& (0+255),w,b
  3784  0014EC  E10D               	bnz	l4391
  3785                           
  3786                           ; BSR set to: 0
  3787  0014EE  6A0B               	clrf	___ftge@ff1,c
  3788  0014F0  6A0C               	clrf	___ftge@ff1+1,c
  3789  0014F2  6A0D               	clrf	___ftge@ff1+2,c
  3790  0014F4  C0C8  F00E         	movff	pow@y,___ftge@ff2
  3791  0014F8  C0C9  F00F         	movff	pow@y+1,___ftge@ff2+1
  3792  0014FC  C0CA  F010         	movff	pow@y+2,___ftge@ff2+2
  3793  001500  EC5F  F011         	call	___ftge	;wreg free
  3794  001504  0100               	movlb	0	; () banked
  3795  001506  D030               	goto	u4180
  3796  001508                     l4391:
  3797                           
  3798                           ; BSR set to: 0
  3799  001508  51C8               	movf	pow@y& (0+255),w,b
  3800  00150A  11C9               	iorwf	(pow@y+1)& (0+255),w,b
  3801  00150C  11CA               	iorwf	(pow@y+2)& (0+255),w,b
  3802  00150E  E106               	bnz	l4397
  3803                           
  3804                           ; BSR set to: 0
  3805  001510  6BC5               	clrf	?_pow& (0+255),b
  3806  001512  0E80               	movlw	128
  3807  001514  6FC6               	movwf	(?_pow+1)& (0+255),b
  3808  001516  0E3F               	movlw	63
  3809  001518  6FC7               	movwf	(?_pow+2)& (0+255),b
  3810  00151A  D085               	goto	l1057
  3811  00151C                     l4397:
  3812                           
  3813                           ; BSR set to: 0
  3814  00151C  AFC7               	btfss	(pow@x+2)& (0+255),7,b
  3815  00151E  D03A               	goto	l4407
  3816                           
  3817                           ; BSR set to: 0
  3818  001520  C0C8  F047         	movff	pow@y,___fttol@f1
  3819  001524  C0C9  F048         	movff	pow@y+1,___fttol@f1+1
  3820  001528  C0CA  F049         	movff	pow@y+2,___fttol@f1+2
  3821  00152C  EC38  F00E         	call	___fttol	;wreg free
  3822  001530  C047  F0D2         	movff	?___fttol,pow@yi
  3823  001534  C048  F0D3         	movff	?___fttol+1,pow@yi+1
  3824  001538  C049  F0D4         	movff	?___fttol+2,pow@yi+2
  3825  00153C  C04A  F0D5         	movff	?___fttol+3,pow@yi+3
  3826  001540  C0D2  F013         	movff	pow@yi,___lltoft@c
  3827  001544  C0D3  F014         	movff	pow@yi+1,___lltoft@c+1
  3828  001548  C0D4  F015         	movff	pow@yi+2,___lltoft@c+2
  3829  00154C  C0D5  F016         	movff	pow@yi+3,___lltoft@c+3
  3830  001550  ECE4  F011         	call	___lltoft	;wreg free
  3831  001554  0100               	movlb	0	; () banked
  3832  001556  51C8               	movf	pow@y& (0+255),w,b
  3833  001558  1813               	xorwf	?___lltoft,w,c
  3834  00155A  E106               	bnz	u4180
  3835  00155C  51C9               	movf	(pow@y+1)& (0+255),w,b
  3836  00155E  1814               	xorwf	?___lltoft+1,w,c
  3837  001560  E103               	bnz	u4180
  3838  001562  51CA               	movf	(pow@y+2)& (0+255),w,b
  3839  001564  1815               	xorwf	?___lltoft+2,w,c
  3840  001566  E005               	bz	l4403
  3841  001568                     u4180:
  3842  001568  FFFF               	dw	65535	; assembler added errata NOP
  3843                           
  3844                           ; BSR set to: 0
  3845  00156A  6BC5               	clrf	?_pow& (0+255),b
  3846  00156C  6BC6               	clrf	(?_pow+1)& (0+255),b
  3847  00156E  6BC7               	clrf	(?_pow+2)& (0+255),b
  3848  001570  D05A               	goto	l1057
  3849  001572                     l4403:
  3850                           
  3851                           ; BSR set to: 0
  3852  001572  51D2               	movf	pow@yi& (0+255),w,b
  3853  001574  0B01               	andlw	1
  3854  001576  6FD1               	movwf	pow@sign& (0+255),b
  3855                           
  3856                           ; BSR set to: 0
  3857  001578  C0C5  F00B         	movff	pow@x,___ftneg@f1
  3858  00157C  C0C6  F00C         	movff	pow@x+1,___ftneg@f1+1
  3859  001580  C0C7  F00D         	movff	pow@x+2,___ftneg@f1+2
  3860  001584  EC39  F014         	call	___ftneg	;wreg free
  3861  001588  C00B  F0C5         	movff	?___ftneg,pow@x
  3862  00158C  C00C  F0C6         	movff	?___ftneg+1,pow@x+1
  3863  001590  C00D  F0C7         	movff	?___ftneg+2,pow@x+2
  3864  001594                     l4407:
  3865  001594  FFFF               	dw	65535	; assembler added errata NOP
  3866                           
  3867                           ; BSR set to: 0
  3868  001596  C0C5  F03C         	movff	pow@x,log@x
  3869  00159A  C0C6  F03D         	movff	pow@x+1,log@x+1
  3870  00159E  C0C7  F03E         	movff	pow@x+2,log@x+2
  3871  0015A2  EC9C  F00B         	call	_log	;wreg free
  3872  0015A6  C03C  F0CB         	movff	?_log,_pow$1688
  3873  0015AA  C03D  F0CC         	movff	?_log+1,_pow$1688+1
  3874  0015AE  C03E  F0CD         	movff	?_log+2,_pow$1688+2
  3875  0015B2  C0CB  F023         	movff	_pow$1688,___ftmul@f1
  3876  0015B6  C0CC  F024         	movff	_pow$1688+1,___ftmul@f1+1
  3877  0015BA  C0CD  F025         	movff	_pow$1688+2,___ftmul@f1+2
  3878  0015BE  C0C8  F026         	movff	pow@y,___ftmul@f2
  3879  0015C2  C0C9  F027         	movff	pow@y+1,___ftmul@f2+1
  3880  0015C6  C0CA  F028         	movff	pow@y+2,___ftmul@f2+2
  3881  0015CA  EC87  F00C         	call	___ftmul	;wreg free
  3882  0015CE  C023  F0CE         	movff	?___ftmul,_pow$1689
  3883  0015D2  C024  F0CF         	movff	?___ftmul+1,_pow$1689+1
  3884  0015D6  C025  F0D0         	movff	?___ftmul+2,_pow$1689+2
  3885  0015DA  C0CE  F063         	movff	_pow$1689,exp@x
  3886  0015DE  C0CF  F064         	movff	_pow$1689+1,exp@x+1
  3887  0015E2  C0D0  F065         	movff	_pow$1689+2,exp@x+2
  3888  0015E6  EC79  F007         	call	_exp	;wreg free
  3889  0015EA  C063  F0C5         	movff	?_exp,pow@x
  3890  0015EE  C064  F0C6         	movff	?_exp+1,pow@x+1
  3891  0015F2  C065  F0C7         	movff	?_exp+2,pow@x+2
  3892  0015F6  0100               	movlb	0	; () banked
  3893  0015F8  51D1               	movf	pow@sign& (0+255),w,b
  3894  0015FA  E00F               	bz	l1061
  3895                           
  3896                           ; BSR set to: 0
  3897  0015FC  C0C5  F00B         	movff	pow@x,___ftneg@f1
  3898  001600  C0C6  F00C         	movff	pow@x+1,___ftneg@f1+1
  3899  001604  C0C7  F00D         	movff	pow@x+2,___ftneg@f1+2
  3900  001608  EC39  F014         	call	___ftneg	;wreg free
  3901  00160C  C00B  F0C5         	movff	?___ftneg,?_pow
  3902  001610  C00C  F0C6         	movff	?___ftneg+1,?_pow+1
  3903  001614  C00D  F0C7         	movff	?___ftneg+2,?_pow+2
  3904  001618  D006               	goto	l1057
  3905  00161A                     l1061:
  3906                           
  3907                           ; BSR set to: 0
  3908  00161A  C0C5  F0C5         	movff	pow@x,?_pow
  3909  00161E  C0C6  F0C6         	movff	pow@x+1,?_pow+1
  3910  001622  C0C7  F0C7         	movff	pow@x+2,?_pow+2
  3911  001626                     l1057:
  3912  001626  FFFF               	dw	65535	; assembler added errata NOP
  3913                           
  3914                           ; BSR set to: 0
  3915  001628  0012               	return		;funcret
  3916  00162A  FFFF               	dw	65535	; errata NOP
  3917  00162C                     __end_of_pow:
  3918                           	opt stack 0
  3919                           tosu	equ	0xFFF
  3920                           tosh	equ	0xFFE
  3921                           tosl	equ	0xFFD
  3922                           pclath	equ	0xFFA
  3923                           tblptru	equ	0xFF8
  3924                           tblptrh	equ	0xFF7
  3925                           tblptrl	equ	0xFF6
  3926                           tablat	equ	0xFF5
  3927                           intcon	equ	0xFF2
  3928                           intcon2	equ	0xFF1
  3929                           postinc0	equ	0xFEE
  3930                           wreg	equ	0xFE8
  3931                           postdec1	equ	0xFE5
  3932                           fsr1l	equ	0xFE1
  3933                           status	equ	0xFD8
  3934                           
  3935 ;; *************** function _exp *****************
  3936 ;; Defined at:
  3937 ;;		line 12 in file "/opt/microchip/xc8/v1.45/sources/common/exp.c"
  3938 ;; Parameters:    Size  Location     Type
  3939 ;;  x               3   98[COMRAM] unsigned char 
  3940 ;; Auto vars:     Size  Location     Type
  3941 ;;  exponent        2    8[BANK0 ] int 
  3942 ;;  sign            1   10[BANK0 ] unsigned char 
  3943 ;; Return value:  Size  Location     Type
  3944 ;;                  3   98[COMRAM] unsigned char 
  3945 ;; Registers used:
  3946 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3947 ;; Tracked objects:
  3948 ;;		On entry : 0/0
  3949 ;;		On exit  : 0/0
  3950 ;;		Unchanged: 0/0
  3951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3952 ;;      Params:         3       0       0       0       0       0       0
  3953 ;;      Locals:         0       6       0       0       0       0       0
  3954 ;;      Temps:          0       0       0       0       0       0       0
  3955 ;;      Totals:         3       6       0       0       0       0       0
  3956 ;;Total ram usage:        9 bytes
  3957 ;; Hardware stack levels used:    1
  3958 ;; Hardware stack levels required when called:    5
  3959 ;; This function calls:
  3960 ;;		___awtoft
  3961 ;;		___ftdiv
  3962 ;;		___ftge
  3963 ;;		___ftmul
  3964 ;;		___ftneg
  3965 ;;		___ftsub
  3966 ;;		___fttol
  3967 ;;		_eval_poly
  3968 ;;		_floor
  3969 ;;		_ldexp
  3970 ;; This function is called by:
  3971 ;;		_pow
  3972 ;; This function uses a non-reentrant model
  3973 ;;
  3974                           
  3975                           	psect	text13
  3976  000EF2                     __ptext13:
  3977                           	opt stack 0
  3978  000EF2                     _exp:
  3979                           	opt stack 0
  3980  000EF2  FFFF               	dw	65535	; assembler added errata NOP
  3981                           
  3982                           ; BSR set to: 0
  3983                           ;incstack = 0
  3984  000EF4  5063               	movf	exp@x,w,c
  3985  000EF6  1064               	iorwf	exp@x+1,w,c
  3986  000EF8  1065               	iorwf	exp@x+2,w,c
  3987  000EFA  E105               	bnz	l4255
  3988  000EFC  6A63               	clrf	?_exp,c
  3989  000EFE  0E80               	movlw	128
  3990  000F00  6E64               	movwf	?_exp+1,c
  3991  000F02  0E3F               	movlw	63
  3992  000F04  D012               	goto	L4
  3993  000F06                     l4255:
  3994  000F06  0E72               	movlw	114
  3995  000F08  6E0B               	movwf	___ftge@ff1,c
  3996  000F0A  0E31               	movlw	49
  3997  000F0C  6E0C               	movwf	___ftge@ff1+1,c
  3998  000F0E  0E44               	movlw	68
  3999  000F10  6E0D               	movwf	___ftge@ff1+2,c
  4000  000F12  C063  F00E         	movff	exp@x,___ftge@ff2
  4001  000F16  C064  F00F         	movff	exp@x+1,___ftge@ff2+1
  4002  000F1A  C065  F010         	movff	exp@x+2,___ftge@ff2+2
  4003  000F1E  EC5F  F011         	call	___ftge	;wreg free
  4004  000F22  E206               	bc	l4261
  4005  000F24  6863               	setf	?_exp,c
  4006  000F26  0E7F               	movlw	127
  4007  000F28  6E64               	movwf	?_exp+1,c
  4008  000F2A                     L4:
  4009  000F2A  FFFF               	dw	65535	; assembler added errata NOP
  4010  000F2C  6E65               	movwf	?_exp+2,c
  4011  000F2E  D0B6               	goto	l1222
  4012  000F30                     l4261:
  4013  000F30  C063  F00B         	movff	exp@x,___ftge@ff1
  4014  000F34  C064  F00C         	movff	exp@x+1,___ftge@ff1+1
  4015  000F38  C065  F00D         	movff	exp@x+2,___ftge@ff1+2
  4016  000F3C  0E49               	movlw	73
  4017  000F3E  6E0E               	movwf	___ftge@ff2,c
  4018  000F40  0E3A               	movlw	58
  4019  000F42  6E0F               	movwf	___ftge@ff2+1,c
  4020  000F44  0EC4               	movlw	196
  4021  000F46  6E10               	movwf	___ftge@ff2+2,c
  4022  000F48  EC5F  F011         	call	___ftge	;wreg free
  4023  000F4C  E201               	bc	l4265
  4024  000F4E  D087               	goto	u4020
  4025  000F50                     l4265:
  4026  000F50  0E01               	movlw	1
  4027  000F52  AE65               	btfss	exp@x+2,7,c
  4028  000F54  0E00               	movlw	0
  4029  000F56  0100               	movlb	0	; () banked
  4030  000F58  6FC4               	movwf	exp@sign& (0+255),b
  4031                           
  4032                           ; BSR set to: 0
  4033  000F5A  51C4               	movf	exp@sign& (0+255),w,b
  4034  000F5C  E00E               	bz	l1225
  4035                           
  4036                           ; BSR set to: 0
  4037  000F5E  C063  F00B         	movff	exp@x,___ftneg@f1
  4038  000F62  C064  F00C         	movff	exp@x+1,___ftneg@f1+1
  4039  000F66  C065  F00D         	movff	exp@x+2,___ftneg@f1+2
  4040  000F6A  EC39  F014         	call	___ftneg	;wreg free
  4041  000F6E  C00B  F063         	movff	?___ftneg,exp@x
  4042  000F72  C00C  F064         	movff	?___ftneg+1,exp@x+1
  4043  000F76  C00D  F065         	movff	?___ftneg+2,exp@x+2
  4044  000F7A                     l1225:
  4045                           
  4046                           ; BSR set to: 0
  4047  000F7A  C063  F023         	movff	exp@x,___ftmul@f1
  4048  000F7E  C064  F024         	movff	exp@x+1,___ftmul@f1+1
  4049  000F82  C065  F025         	movff	exp@x+2,___ftmul@f1+2
  4050  000F86  0EAA               	movlw	170
  4051  000F88  6E26               	movwf	___ftmul@f2,c
  4052  000F8A  0EB8               	movlw	184
  4053  000F8C  6E27               	movwf	___ftmul@f2+1,c
  4054  000F8E  0E3F               	movlw	63
  4055  000F90  6E28               	movwf	___ftmul@f2+2,c
  4056  000F92  EC87  F00C         	call	___ftmul	;wreg free
  4057  000F96  C023  F063         	movff	?___ftmul,exp@x
  4058  000F9A  C024  F064         	movff	?___ftmul+1,exp@x+1
  4059  000F9E  C025  F065         	movff	?___ftmul+2,exp@x+2
  4060  000FA2  C063  F060         	movff	exp@x,floor@x
  4061  000FA6  C064  F061         	movff	exp@x+1,floor@x+1
  4062  000FAA  C065  F062         	movff	exp@x+2,floor@x+2
  4063  000FAE  EC65  F00D         	call	_floor	;wreg free
  4064  000FB2  C060  F0BF         	movff	?_floor,_exp$1690
  4065  000FB6  C061  F0C0         	movff	?_floor+1,_exp$1690+1
  4066  000FBA  C062  F0C1         	movff	?_floor+2,_exp$1690+2
  4067  000FBE  C0BF  F047         	movff	_exp$1690,___fttol@f1
  4068  000FC2  C0C0  F048         	movff	_exp$1690+1,___fttol@f1+1
  4069  000FC6  C0C1  F049         	movff	_exp$1690+2,___fttol@f1+2
  4070  000FCA  EC38  F00E         	call	___fttol	;wreg free
  4071  000FCE  C047  F0C2         	movff	?___fttol,exp@exponent
  4072  000FD2  C048  F0C3         	movff	?___fttol+1,exp@exponent+1
  4073  000FD6  C063  F032         	movff	exp@x,___ftsub@f1
  4074  000FDA  C064  F033         	movff	exp@x+1,___ftsub@f1+1
  4075  000FDE  C065  F034         	movff	exp@x+2,___ftsub@f1+2
  4076  000FE2  C0C2  F013         	movff	exp@exponent,___awtoft@c
  4077  000FE6  C0C3  F014         	movff	exp@exponent+1,___awtoft@c+1
  4078  000FEA  ECE2  F012         	call	___awtoft	;wreg free
  4079  000FEE  C013  F035         	movff	?___awtoft,___ftsub@f2
  4080  000FF2  C014  F036         	movff	?___awtoft+1,___ftsub@f2+1
  4081  000FF6  C015  F037         	movff	?___awtoft+2,___ftsub@f2+2
  4082  000FFA  EC00  F013         	call	___ftsub	;wreg free
  4083  000FFE  C032  F063         	movff	?___ftsub,exp@x
  4084  001002  C033  F064         	movff	?___ftsub+1,exp@x+1
  4085  001006  C034  F065         	movff	?___ftsub+2,exp@x+2
  4086  00100A  C063  F032         	movff	exp@x,eval_poly@x
  4087  00100E  C064  F033         	movff	exp@x+1,eval_poly@x+1
  4088  001012  C065  F034         	movff	exp@x+2,eval_poly@x+2
  4089  001016  0E01               	movlw	low exp@coeff
  4090  001018  6E35               	movwf	eval_poly@d,c
  4091  00101A  6A37               	clrf	eval_poly@n+1,c
  4092  00101C  0E09               	movlw	9
  4093  00101E  6E36               	movwf	eval_poly@n,c
  4094  001020  ECFD  F00E         	call	_eval_poly	;wreg free
  4095  001024  C032  F03C         	movff	?_eval_poly,ldexp@value
  4096  001028  C033  F03D         	movff	?_eval_poly+1,ldexp@value+1
  4097  00102C  C034  F03E         	movff	?_eval_poly+2,ldexp@value+2
  4098  001030  C0C2  F03F         	movff	exp@exponent,ldexp@newexp
  4099  001034  C0C3  F040         	movff	exp@exponent+1,ldexp@newexp+1
  4100  001038  ECA3  F00F         	call	_ldexp	;wreg free
  4101  00103C  C03C  F063         	movff	?_ldexp,exp@x
  4102  001040  C03D  F064         	movff	?_ldexp+1,exp@x+1
  4103  001044  C03E  F065         	movff	?_ldexp+2,exp@x+2
  4104  001048  0100               	movlb	0	; () banked
  4105  00104A  51C4               	movf	exp@sign& (0+255),w,b
  4106  00104C  E021               	bz	l1226
  4107                           
  4108                           ; BSR set to: 0
  4109  00104E  2863               	incf	exp@x,w,c
  4110  001050  E10B               	bnz	l4285
  4111  001052  0E7F               	movlw	127
  4112  001054  1864               	xorwf	exp@x+1,w,c
  4113  001056  E108               	bnz	l4285
  4114  001058  0E7F               	movlw	127
  4115  00105A  1865               	xorwf	exp@x+2,w,c
  4116  00105C  E105               	bnz	l4285
  4117  00105E                     u4020:
  4118  00105E  FFFF               	dw	65535	; assembler added errata NOP
  4119                           
  4120                           ; BSR set to: 0
  4121  001060  6A63               	clrf	?_exp,c
  4122  001062  6A64               	clrf	?_exp+1,c
  4123  001064  6A65               	clrf	?_exp+2,c
  4124  001066  D01A               	goto	l1222
  4125  001068                     l4285:
  4126                           
  4127                           ; BSR set to: 0
  4128  001068  6A13               	clrf	___ftdiv@f1,c
  4129  00106A  0E80               	movlw	128
  4130  00106C  6E14               	movwf	___ftdiv@f1+1,c
  4131  00106E  0E3F               	movlw	63
  4132  001070  6E15               	movwf	___ftdiv@f1+2,c
  4133  001072  C063  F016         	movff	exp@x,___ftdiv@f2
  4134  001076  C064  F017         	movff	exp@x+1,___ftdiv@f2+1
  4135  00107A  C065  F018         	movff	exp@x+2,___ftdiv@f2+2
  4136  00107E  EC9E  F00E         	call	___ftdiv	;wreg free
  4137  001082  C013  F063         	movff	?___ftdiv,?_exp
  4138  001086  C014  F064         	movff	?___ftdiv+1,?_exp+1
  4139  00108A  C015  F065         	movff	?___ftdiv+2,?_exp+2
  4140  00108E  D006               	goto	l1222
  4141  001090                     l1226:
  4142                           
  4143                           ; BSR set to: 0
  4144  001090  C063  F063         	movff	exp@x,?_exp
  4145  001094  C064  F064         	movff	exp@x+1,?_exp+1
  4146  001098  C065  F065         	movff	exp@x+2,?_exp+2
  4147  00109C                     l1222:
  4148  00109C  FFFF               	dw	65535	; assembler added errata NOP
  4149  00109E  0012               	return		;funcret
  4150  0010A0  FFFF               	dw	65535	; errata NOP
  4151  0010A2                     __end_of_exp:
  4152                           	opt stack 0
  4153                           tosu	equ	0xFFF
  4154                           tosh	equ	0xFFE
  4155                           tosl	equ	0xFFD
  4156                           pclath	equ	0xFFA
  4157                           tblptru	equ	0xFF8
  4158                           tblptrh	equ	0xFF7
  4159                           tblptrl	equ	0xFF6
  4160                           tablat	equ	0xFF5
  4161                           intcon	equ	0xFF2
  4162                           intcon2	equ	0xFF1
  4163                           postinc0	equ	0xFEE
  4164                           wreg	equ	0xFE8
  4165                           postdec1	equ	0xFE5
  4166                           fsr1l	equ	0xFE1
  4167                           status	equ	0xFD8
  4168                           
  4169 ;; *************** function _ldexp *****************
  4170 ;; Defined at:
  4171 ;;		line 277 in file "/opt/microchip/xc8/v1.45/sources/common/frexp.c"
  4172 ;; Parameters:    Size  Location     Type
  4173 ;;  value           3   59[COMRAM] unsigned char 
  4174 ;;  newexp          2   62[COMRAM] int 
  4175 ;; Auto vars:     Size  Location     Type
  4176 ;;		None
  4177 ;; Return value:  Size  Location     Type
  4178 ;;                  3   59[COMRAM] int 
  4179 ;; Registers used:
  4180 ;;		wreg, status,2, status,0
  4181 ;; Tracked objects:
  4182 ;;		On entry : 0/0
  4183 ;;		On exit  : 0/0
  4184 ;;		Unchanged: 0/0
  4185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4186 ;;      Params:         5       0       0       0       0       0       0
  4187 ;;      Locals:         0       0       0       0       0       0       0
  4188 ;;      Temps:          2       0       0       0       0       0       0
  4189 ;;      Totals:         7       0       0       0       0       0       0
  4190 ;;Total ram usage:        7 bytes
  4191 ;; Hardware stack levels used:    1
  4192 ;; Hardware stack levels required when called:    2
  4193 ;; This function calls:
  4194 ;;		Nothing
  4195 ;; This function is called by:
  4196 ;;		_exp
  4197 ;; This function uses a non-reentrant model
  4198 ;;
  4199                           
  4200                           	psect	text14
  4201  001F46                     __ptext14:
  4202                           	opt stack 0
  4203  001F46                     _ldexp:
  4204                           	opt stack 0
  4205  001F46  FFFF               	dw	65535	; assembler added errata NOP
  4206                           
  4207                           ;incstack = 0
  4208  001F48  503C               	movf	ldexp@value,w,c
  4209  001F4A  103D               	iorwf	ldexp@value+1,w,c
  4210  001F4C  103E               	iorwf	ldexp@value+2,w,c
  4211  001F4E  E101               	bnz	l4133
  4212  001F50  D013               	goto	u3800
  4213  001F52                     l4133:
  4214  001F52  503E               	movf	ldexp@value+2,w,c
  4215  001F54  0B7F               	andlw	127
  4216  001F56  6E41               	movwf	??_ldexp& (0+255),c
  4217  001F58  6A42               	clrf	(??_ldexp+1)& (0+255),c
  4218  001F5A  90D8               	bcf	status,0,c
  4219  001F5C  3641               	rlcf	??_ldexp,f,c
  4220  001F5E  3642               	rlcf	??_ldexp+1,f,c
  4221  001F60  5041               	movf	??_ldexp,w,c
  4222  001F62  263F               	addwf	ldexp@newexp,f,c
  4223  001F64  5042               	movf	??_ldexp+1,w,c
  4224  001F66  2240               	addwfc	ldexp@newexp+1,f,c
  4225  001F68  0E01               	movlw	1
  4226  001F6A  AE3D               	btfss	ldexp@value+1,7,c
  4227  001F6C  0E00               	movlw	0
  4228  001F6E  263F               	addwf	ldexp@newexp,f,c
  4229  001F70  0E00               	movlw	0
  4230  001F72  2240               	addwfc	ldexp@newexp+1,f,c
  4231  001F74  AE40               	btfss	ldexp@newexp+1,7,c
  4232  001F76  D005               	goto	l4139
  4233  001F78                     u3800:
  4234  001F78  FFFF               	dw	65535	; assembler added errata NOP
  4235  001F7A  6A3C               	clrf	?_ldexp,c
  4236  001F7C  6A3D               	clrf	?_ldexp+1,c
  4237  001F7E  6A3E               	clrf	?_ldexp+2,c
  4238  001F80  D02E               	goto	l840
  4239  001F82                     l4139:
  4240  001F82  FFFF               	dw	65535	; assembler added errata NOP
  4241  001F84  BE40               	btfsc	ldexp@newexp+1,7,c
  4242  001F86  D010               	goto	l4153
  4243  001F88  0440               	decf	ldexp@newexp+1,w,c
  4244  001F8A  E30E               	bnc	l4153
  4245  001F8C  AE3E               	btfss	ldexp@value+2,7,c
  4246  001F8E  D006               	goto	l4149
  4247  001F90  683C               	setf	?_ldexp,c
  4248  001F92  0E7F               	movlw	127
  4249  001F94  6E3D               	movwf	?_ldexp+1,c
  4250  001F96  0EFF               	movlw	255
  4251  001F98  683E               	setf	?_ldexp+2,c
  4252  001F9A  D021               	goto	l840
  4253  001F9C                     l4149:
  4254  001F9C  FFFF               	dw	65535	; assembler added errata NOP
  4255  001F9E  683C               	setf	?_ldexp,c
  4256  001FA0  0E7F               	movlw	127
  4257  001FA2  6E3D               	movwf	?_ldexp+1,c
  4258  001FA4  6E3E               	movwf	?_ldexp+2,c
  4259  001FA6  D01B               	goto	l840
  4260  001FA8                     l4153:
  4261  001FA8  FFFF               	dw	65535	; assembler added errata NOP
  4262  001FAA  3440               	rlcf	ldexp@newexp+1,w,c
  4263  001FAC  3040               	rrcf	ldexp@newexp+1,w,c
  4264  001FAE  6E42               	movwf	(??_ldexp+1)& (0+255),c
  4265  001FB0  303F               	rrcf	ldexp@newexp,w,c
  4266  001FB2  6E41               	movwf	??_ldexp& (0+255),c
  4267  001FB4  183E               	xorwf	ldexp@value+2,w,c
  4268  001FB6  0B80               	andlw	-128
  4269  001FB8  1841               	xorwf	??_ldexp,w,c
  4270  001FBA  6E3E               	movwf	ldexp@value+2,c
  4271  001FBC  C03F  F041         	movff	ldexp@newexp,??_ldexp
  4272  001FC0  0E01               	movlw	1
  4273  001FC2  1641               	andwf	??_ldexp,f,c
  4274  001FC4  3241               	rrcf	??_ldexp,f,c
  4275  001FC6  3241               	rrcf	??_ldexp,f,c
  4276  001FC8  503D               	movf	ldexp@value+1,w,c
  4277  001FCA  1841               	xorwf	??_ldexp,w,c
  4278  001FCC  0B7F               	andlw	-129
  4279  001FCE  1841               	xorwf	??_ldexp,w,c
  4280  001FD0  6E3D               	movwf	ldexp@value+1,c
  4281  001FD2  C03C  F03C         	movff	ldexp@value,?_ldexp
  4282  001FD6  C03D  F03D         	movff	ldexp@value+1,?_ldexp+1
  4283  001FDA  C03E  F03E         	movff	ldexp@value+2,?_ldexp+2
  4284  001FDE                     l840:
  4285  001FDE  FFFF               	dw	65535	; assembler added errata NOP
  4286  001FE0  0012               	return		;funcret
  4287  001FE2  FFFF               	dw	65535	; errata NOP
  4288  001FE4                     __end_of_ldexp:
  4289                           	opt stack 0
  4290                           tosu	equ	0xFFF
  4291                           tosh	equ	0xFFE
  4292                           tosl	equ	0xFFD
  4293                           pclath	equ	0xFFA
  4294                           tblptru	equ	0xFF8
  4295                           tblptrh	equ	0xFF7
  4296                           tblptrl	equ	0xFF6
  4297                           tablat	equ	0xFF5
  4298                           intcon	equ	0xFF2
  4299                           intcon2	equ	0xFF1
  4300                           postinc0	equ	0xFEE
  4301                           wreg	equ	0xFE8
  4302                           postdec1	equ	0xFE5
  4303                           fsr1l	equ	0xFE1
  4304                           status	equ	0xFD8
  4305                           
  4306 ;; *************** function _floor *****************
  4307 ;; Defined at:
  4308 ;;		line 13 in file "/opt/microchip/xc8/v1.45/sources/common/floor.c"
  4309 ;; Parameters:    Size  Location     Type
  4310 ;;  x               3   95[COMRAM] int 
  4311 ;; Auto vars:     Size  Location     Type
  4312 ;;  i               3    0[BANK0 ] int 
  4313 ;;  expon           2    3[BANK0 ] int 
  4314 ;; Return value:  Size  Location     Type
  4315 ;;                  3   95[COMRAM] int 
  4316 ;; Registers used:
  4317 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4318 ;; Tracked objects:
  4319 ;;		On entry : 0/0
  4320 ;;		On exit  : 0/0
  4321 ;;		Unchanged: 0/0
  4322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4323 ;;      Params:         3       0       0       0       0       0       0
  4324 ;;      Locals:         0       5       0       0       0       0       0
  4325 ;;      Temps:          0       0       0       0       0       0       0
  4326 ;;      Totals:         3       5       0       0       0       0       0
  4327 ;;Total ram usage:        8 bytes
  4328 ;; Hardware stack levels used:    1
  4329 ;; Hardware stack levels required when called:    4
  4330 ;; This function calls:
  4331 ;;		___altoft
  4332 ;;		___ftadd
  4333 ;;		___ftge
  4334 ;;		___fttol
  4335 ;;		_frexp
  4336 ;; This function is called by:
  4337 ;;		_format_double
  4338 ;;		_exp
  4339 ;; This function uses a non-reentrant model
  4340 ;;
  4341                           
  4342                           	psect	text15
  4343  001ACA                     __ptext15:
  4344                           	opt stack 0
  4345  001ACA                     _floor:
  4346                           	opt stack 0
  4347  001ACA  FFFF               	dw	65535	; assembler added errata NOP
  4348                           
  4349                           ;incstack = 0
  4350  001ACC  C060  F00B         	movff	floor@x,frexp@value
  4351  001AD0  C061  F00C         	movff	floor@x+1,frexp@value+1
  4352  001AD4  C062  F00D         	movff	floor@x+2,frexp@value+2
  4353  001AD8  0EBD               	movlw	low floor@expon
  4354  001ADA  6E0E               	movwf	frexp@eptr,c
  4355  001ADC  ECBC  F010         	call	_frexp	;wreg free
  4356  001AE0  0100               	movlb	0	; () banked
  4357  001AE2  AFBE               	btfss	(floor@expon+1)& (0+255),7,b
  4358  001AE4  D00D               	goto	l4053
  4359                           
  4360                           ; BSR set to: 0
  4361  001AE6  AE62               	btfss	floor@x+2,7,c
  4362  001AE8  D006               	goto	l813
  4363                           
  4364                           ; BSR set to: 0
  4365  001AEA  6A60               	clrf	?_floor,c
  4366  001AEC  0E80               	movlw	128
  4367  001AEE  6E61               	movwf	?_floor+1,c
  4368  001AF0  0EBF               	movlw	191
  4369  001AF2  6E62               	movwf	?_floor+2,c
  4370  001AF4  D053               	goto	l814
  4371  001AF6                     l813:
  4372  001AF6  FFFF               	dw	65535	; assembler added errata NOP
  4373                           
  4374                           ; BSR set to: 0
  4375  001AF8  6A60               	clrf	?_floor,c
  4376  001AFA  6A61               	clrf	?_floor+1,c
  4377  001AFC  6A62               	clrf	?_floor+2,c
  4378  001AFE  D04E               	goto	l814
  4379  001B00                     l4053:
  4380  001B00  FFFF               	dw	65535	; assembler added errata NOP
  4381                           
  4382                           ; BSR set to: 0
  4383  001B02  51BE               	movf	(floor@expon+1)& (0+255),w,b
  4384  001B04  E103               	bnz	u3680
  4385  001B06  0E15               	movlw	21
  4386  001B08  5DBD               	subwf	floor@expon& (0+255),w,b
  4387  001B0A  E307               	bnc	l4057
  4388  001B0C                     u3680:
  4389                           
  4390                           ; BSR set to: 0
  4391  001B0C  C060  F060         	movff	floor@x,?_floor
  4392  001B10  C061  F061         	movff	floor@x+1,?_floor+1
  4393  001B14  C062  F062         	movff	floor@x+2,?_floor+2
  4394  001B18  D041               	goto	l814
  4395  001B1A                     l4057:
  4396                           
  4397                           ; BSR set to: 0
  4398  001B1A  C060  F047         	movff	floor@x,___fttol@f1
  4399  001B1E  C061  F048         	movff	floor@x+1,___fttol@f1+1
  4400  001B22  C062  F049         	movff	floor@x+2,___fttol@f1+2
  4401  001B26  EC38  F00E         	call	___fttol	;wreg free
  4402  001B2A  C047  F056         	movff	?___fttol,___altoft@c
  4403  001B2E  C048  F057         	movff	?___fttol+1,___altoft@c+1
  4404  001B32  C049  F058         	movff	?___fttol+2,___altoft@c+2
  4405  001B36  C04A  F059         	movff	?___fttol+3,___altoft@c+3
  4406  001B3A  ECF7  F010         	call	___altoft	;wreg free
  4407  001B3E  C056  F0BA         	movff	?___altoft,floor@i
  4408  001B42  C057  F0BB         	movff	?___altoft+1,floor@i+1
  4409  001B46  C058  F0BC         	movff	?___altoft+2,floor@i+2
  4410  001B4A  C060  F00B         	movff	floor@x,___ftge@ff1
  4411  001B4E  C061  F00C         	movff	floor@x+1,___ftge@ff1+1
  4412  001B52  C062  F00D         	movff	floor@x+2,___ftge@ff1+2
  4413  001B56  C0BA  F00E         	movff	floor@i,___ftge@ff2
  4414  001B5A  C0BB  F00F         	movff	floor@i+1,___ftge@ff2+1
  4415  001B5E  C0BC  F010         	movff	floor@i+2,___ftge@ff2+2
  4416  001B62  EC5F  F011         	call	___ftge	;wreg free
  4417  001B66  E214               	bc	l816
  4418  001B68  C0BA  F017         	movff	floor@i,___ftadd@f1
  4419  001B6C  C0BB  F018         	movff	floor@i+1,___ftadd@f1+1
  4420  001B70  C0BC  F019         	movff	floor@i+2,___ftadd@f1+2
  4421  001B74  6A1A               	clrf	___ftadd@f2,c
  4422  001B76  0E80               	movlw	128
  4423  001B78  6E1B               	movwf	___ftadd@f2+1,c
  4424  001B7A  0EBF               	movlw	191
  4425  001B7C  6E1C               	movwf	___ftadd@f2+2,c
  4426  001B7E  EC11  F009         	call	___ftadd	;wreg free
  4427  001B82  C017  F060         	movff	?___ftadd,?_floor
  4428  001B86  C018  F061         	movff	?___ftadd+1,?_floor+1
  4429  001B8A  C019  F062         	movff	?___ftadd+2,?_floor+2
  4430  001B8E  D006               	goto	l814
  4431  001B90                     l816:
  4432  001B90  C0BA  F060         	movff	floor@i,?_floor
  4433  001B94  C0BB  F061         	movff	floor@i+1,?_floor+1
  4434  001B98  C0BC  F062         	movff	floor@i+2,?_floor+2
  4435  001B9C                     l814:
  4436  001B9C  FFFF               	dw	65535	; assembler added errata NOP
  4437  001B9E  0012               	return		;funcret
  4438  001BA0  FFFF               	dw	65535	; errata NOP
  4439  001BA2                     __end_of_floor:
  4440                           	opt stack 0
  4441                           tosu	equ	0xFFF
  4442                           tosh	equ	0xFFE
  4443                           tosl	equ	0xFFD
  4444                           pclath	equ	0xFFA
  4445                           tblptru	equ	0xFF8
  4446                           tblptrh	equ	0xFF7
  4447                           tblptrl	equ	0xFF6
  4448                           tablat	equ	0xFF5
  4449                           intcon	equ	0xFF2
  4450                           intcon2	equ	0xFF1
  4451                           postinc0	equ	0xFEE
  4452                           wreg	equ	0xFE8
  4453                           postdec1	equ	0xFE5
  4454                           fsr1l	equ	0xFE1
  4455                           status	equ	0xFD8
  4456                           
  4457 ;; *************** function ___fttol *****************
  4458 ;; Defined at:
  4459 ;;		line 44 in file "/opt/microchip/xc8/v1.45/sources/common/fttol.c"
  4460 ;; Parameters:    Size  Location     Type
  4461 ;;  f1              3   70[COMRAM] float 
  4462 ;; Auto vars:     Size  Location     Type
  4463 ;;  lval            4   80[COMRAM] unsigned long 
  4464 ;;  exp1            1   84[COMRAM] unsigned char 
  4465 ;;  sign1           1   79[COMRAM] unsigned char 
  4466 ;; Return value:  Size  Location     Type
  4467 ;;                  4   70[COMRAM] long 
  4468 ;; Registers used:
  4469 ;;		wreg, status,2, status,0
  4470 ;; Tracked objects:
  4471 ;;		On entry : 0/0
  4472 ;;		On exit  : 0/0
  4473 ;;		Unchanged: 0/0
  4474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4475 ;;      Params:         4       0       0       0       0       0       0
  4476 ;;      Locals:         6       0       0       0       0       0       0
  4477 ;;      Temps:          5       0       0       0       0       0       0
  4478 ;;      Totals:        15       0       0       0       0       0       0
  4479 ;;Total ram usage:       15 bytes
  4480 ;; Hardware stack levels used:    1
  4481 ;; Hardware stack levels required when called:    2
  4482 ;; This function calls:
  4483 ;;		Nothing
  4484 ;; This function is called by:
  4485 ;;		_measure_capacitance
  4486 ;;		_measure_inductance
  4487 ;;		_format_double
  4488 ;;		_floor
  4489 ;;		_pow
  4490 ;;		_exp
  4491 ;; This function uses a non-reentrant model
  4492 ;;
  4493                           
  4494                           	psect	text16
  4495  001C70                     __ptext16:
  4496                           	opt stack 0
  4497  001C70                     ___fttol:
  4498                           	opt stack 0
  4499  001C70  FFFF               	dw	65535	; assembler added errata NOP
  4500                           
  4501                           ;incstack = 0
  4502  001C72  C049  F04B         	movff	___fttol@f1+2,??___fttol
  4503  001C76  6A4C               	clrf	(??___fttol+1)& (0+255),c
  4504  001C78  6A4D               	clrf	(??___fttol+2)& (0+255),c
  4505  001C7A  3448               	rlcf	___fttol@f1+1,w,c
  4506  001C7C  364B               	rlcf	??___fttol& (0+255),f,c
  4507  001C7E  E301               	bnc	u3561
  4508  001C80  804C               	bsf	(??___fttol+1)& (0+255),0,c
  4509  001C82                     u3561:
  4510  001C82  504B               	movf	??___fttol,w,c
  4511  001C84  6E55               	movwf	___fttol@exp1,c
  4512  001C86  5055               	movf	___fttol@exp1,w,c
  4513  001C88  E106               	bnz	l3985
  4514  001C8A                     u3570:
  4515  001C8A  FFFF               	dw	65535	; assembler added errata NOP
  4516  001C8C  6A47               	clrf	?___fttol,c
  4517  001C8E  6A48               	clrf	?___fttol+1,c
  4518  001C90  6A49               	clrf	?___fttol+2,c
  4519  001C92  6A4A               	clrf	?___fttol+3,c
  4520  001C94  D050               	goto	l921
  4521  001C96                     l3985:
  4522  001C96  0E17               	movlw	23
  4523  001C98  6E4B               	movwf	??___fttol& (0+255),c
  4524  001C9A  C047  F04C         	movff	___fttol@f1,??___fttol+1
  4525  001C9E  C048  F04D         	movff	___fttol@f1+1,??___fttol+2
  4526  001CA2  C049  F04E         	movff	___fttol@f1+2,??___fttol+3
  4527  001CA6  284B               	incf	??___fttol,w,c
  4528  001CA8  6E4F               	movwf	(??___fttol+4)& (0+255),c
  4529  001CAA  D005               	goto	u3580
  4530  001CAC                     u3585:
  4531  001CAC  FFFF               	dw	65535	; assembler added errata NOP
  4532  001CAE  90D8               	bcf	status,0,c
  4533  001CB0  324E               	rrcf	??___fttol+3,f,c
  4534  001CB2  324D               	rrcf	??___fttol+2,f,c
  4535  001CB4  324C               	rrcf	??___fttol+1,f,c
  4536  001CB6                     u3580:
  4537  001CB6  FFFF               	dw	65535	; assembler added errata NOP
  4538  001CB8  2E4F               	decfsz	(??___fttol+4)& (0+255),f,c
  4539  001CBA  D7F8               	goto	u3585
  4540  001CBC  504C               	movf	??___fttol+1,w,c
  4541  001CBE  6E50               	movwf	___fttol@sign1,c
  4542  001CC0  8E48               	bsf	___fttol@f1+1,7,c
  4543  001CC2  6A49               	clrf	___fttol@f1+2,c
  4544  001CC4  5047               	movf	___fttol@f1,w,c
  4545  001CC6  6E51               	movwf	___fttol@lval,c
  4546  001CC8  5048               	movf	___fttol@f1+1,w,c
  4547  001CCA  6E52               	movwf	___fttol@lval+1,c
  4548  001CCC  5049               	movf	___fttol@f1+2,w,c
  4549  001CCE  6E53               	movwf	___fttol@lval+2,c
  4550  001CD0  6A54               	clrf	___fttol@lval+3,c
  4551  001CD2  0E8E               	movlw	142
  4552  001CD4  5E55               	subwf	___fttol@exp1,f,c
  4553  001CD6  AE55               	btfss	___fttol@exp1,7,c
  4554  001CD8  D00D               	goto	l4005
  4555  001CDA  5055               	movf	___fttol@exp1,w,c
  4556  001CDC  0A80               	xorlw	128
  4557  001CDE  0F8F               	addlw	143
  4558  001CE0  E3D4               	bnc	u3570
  4559  001CE2                     l4001:
  4560  001CE2  FFFF               	dw	65535	; assembler added errata NOP
  4561  001CE4  90D8               	bcf	status,0,c
  4562  001CE6  3254               	rrcf	___fttol@lval+3,f,c
  4563  001CE8  3253               	rrcf	___fttol@lval+2,f,c
  4564  001CEA  3252               	rrcf	___fttol@lval+1,f,c
  4565  001CEC  3251               	rrcf	___fttol@lval,f,c
  4566  001CEE  3E55               	incfsz	___fttol@exp1,f,c
  4567  001CF0  D7F8               	goto	l4001
  4568  001CF2  D00E               	goto	u3620
  4569  001CF4                     l4005:
  4570  001CF4  FFFF               	dw	65535	; assembler added errata NOP
  4571  001CF6  0E17               	movlw	23
  4572  001CF8  6455               	cpfsgt	___fttol@exp1,c
  4573  001CFA  D007               	goto	l4011
  4574  001CFC  D7C6               	goto	u3570
  4575  001CFE                     l4009:
  4576  001CFE  90D8               	bcf	status,0,c
  4577  001D00  3651               	rlcf	___fttol@lval,f,c
  4578  001D02  3652               	rlcf	___fttol@lval+1,f,c
  4579  001D04  3653               	rlcf	___fttol@lval+2,f,c
  4580  001D06  3654               	rlcf	___fttol@lval+3,f,c
  4581  001D08  0655               	decf	___fttol@exp1,f,c
  4582  001D0A                     l4011:
  4583  001D0A  FFFF               	dw	65535	; assembler added errata NOP
  4584  001D0C  5055               	movf	___fttol@exp1,w,c
  4585  001D0E  E1F7               	bnz	l4009
  4586  001D10                     u3620:
  4587  001D10  FFFF               	dw	65535	; assembler added errata NOP
  4588  001D12  5050               	movf	___fttol@sign1,w,c
  4589  001D14  E008               	bz	l4017
  4590  001D16  1E54               	comf	___fttol@lval+3,f,c
  4591  001D18  1E53               	comf	___fttol@lval+2,f,c
  4592  001D1A  1E52               	comf	___fttol@lval+1,f,c
  4593  001D1C  6C51               	negf	___fttol@lval,c
  4594  001D1E  0E00               	movlw	0
  4595  001D20  2252               	addwfc	___fttol@lval+1,f,c
  4596  001D22  2253               	addwfc	___fttol@lval+2,f,c
  4597  001D24  2254               	addwfc	___fttol@lval+3,f,c
  4598  001D26                     l4017:
  4599  001D26  C051  F047         	movff	___fttol@lval,?___fttol
  4600  001D2A  C052  F048         	movff	___fttol@lval+1,?___fttol+1
  4601  001D2E  C053  F049         	movff	___fttol@lval+2,?___fttol+2
  4602  001D32  C054  F04A         	movff	___fttol@lval+3,?___fttol+3
  4603  001D36                     l921:
  4604  001D36  FFFF               	dw	65535	; assembler added errata NOP
  4605  001D38  0012               	return		;funcret
  4606  001D3A  FFFF               	dw	65535	; errata NOP
  4607  001D3C                     __end_of___fttol:
  4608                           	opt stack 0
  4609                           tosu	equ	0xFFF
  4610                           tosh	equ	0xFFE
  4611                           tosl	equ	0xFFD
  4612                           pclath	equ	0xFFA
  4613                           tblptru	equ	0xFF8
  4614                           tblptrh	equ	0xFF7
  4615                           tblptrl	equ	0xFF6
  4616                           tablat	equ	0xFF5
  4617                           intcon	equ	0xFF2
  4618                           intcon2	equ	0xFF1
  4619                           postinc0	equ	0xFEE
  4620                           wreg	equ	0xFE8
  4621                           postdec1	equ	0xFE5
  4622                           fsr1l	equ	0xFE1
  4623                           status	equ	0xFD8
  4624                           
  4625 ;; *************** function ___ftge *****************
  4626 ;; Defined at:
  4627 ;;		line 4 in file "/opt/microchip/xc8/v1.45/sources/common/ftge.c"
  4628 ;; Parameters:    Size  Location     Type
  4629 ;;  ff1             3   10[COMRAM] float 
  4630 ;;  ff2             3   13[COMRAM] float 
  4631 ;; Auto vars:     Size  Location     Type
  4632 ;;		None
  4633 ;; Return value:  Size  Location     Type
  4634 ;;		None               void
  4635 ;; Registers used:
  4636 ;;		wreg, status,2, status,0
  4637 ;; Tracked objects:
  4638 ;;		On entry : 0/0
  4639 ;;		On exit  : 0/0
  4640 ;;		Unchanged: 0/0
  4641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4642 ;;      Params:         6       0       0       0       0       0       0
  4643 ;;      Locals:         0       0       0       0       0       0       0
  4644 ;;      Temps:          3       0       0       0       0       0       0
  4645 ;;      Totals:         9       0       0       0       0       0       0
  4646 ;;Total ram usage:        9 bytes
  4647 ;; Hardware stack levels used:    1
  4648 ;; Hardware stack levels required when called:    2
  4649 ;; This function calls:
  4650 ;;		Nothing
  4651 ;; This function is called by:
  4652 ;;		_measure_capacitance
  4653 ;;		_measure_inductance
  4654 ;;		_format_double
  4655 ;;		_floor
  4656 ;;		_pow
  4657 ;;		_exp
  4658 ;; This function uses a non-reentrant model
  4659 ;;
  4660                           
  4661                           	psect	text17
  4662  0022BE                     __ptext17:
  4663                           	opt stack 0
  4664  0022BE                     ___ftge:
  4665                           	opt stack 0
  4666  0022BE  FFFF               	dw	65535	; assembler added errata NOP
  4667                           
  4668                           ;incstack = 0
  4669  0022C0  AE0D               	btfss	___ftge@ff1+2,7,c
  4670  0022C2  D00D               	goto	l3967
  4671  0022C4  6A11               	clrf	??___ftge& (0+255),c
  4672  0022C6  6A12               	clrf	(??___ftge+1)& (0+255),c
  4673  0022C8  0E80               	movlw	128
  4674  0022CA  6E13               	movwf	(??___ftge+2)& (0+255),c
  4675  0022CC  500B               	movf	___ftge@ff1,w,c
  4676  0022CE  5C11               	subwf	??___ftge,w,c
  4677  0022D0  6E0B               	movwf	___ftge@ff1,c
  4678  0022D2  500C               	movf	___ftge@ff1+1,w,c
  4679  0022D4  5812               	subwfb	??___ftge+1,w,c
  4680  0022D6  6E0C               	movwf	___ftge@ff1+1,c
  4681  0022D8  500D               	movf	___ftge@ff1+2,w,c
  4682  0022DA  5813               	subwfb	??___ftge+2,w,c
  4683  0022DC  6E0D               	movwf	___ftge@ff1+2,c
  4684  0022DE                     l3967:
  4685  0022DE  FFFF               	dw	65535	; assembler added errata NOP
  4686  0022E0  AE10               	btfss	___ftge@ff2+2,7,c
  4687  0022E2  D00D               	goto	l3971
  4688  0022E4  6A11               	clrf	??___ftge& (0+255),c
  4689  0022E6  6A12               	clrf	(??___ftge+1)& (0+255),c
  4690  0022E8  0E80               	movlw	128
  4691  0022EA  6E13               	movwf	(??___ftge+2)& (0+255),c
  4692  0022EC  500E               	movf	___ftge@ff2,w,c
  4693  0022EE  5C11               	subwf	??___ftge,w,c
  4694  0022F0  6E0E               	movwf	___ftge@ff2,c
  4695  0022F2  500F               	movf	___ftge@ff2+1,w,c
  4696  0022F4  5812               	subwfb	??___ftge+1,w,c
  4697  0022F6  6E0F               	movwf	___ftge@ff2+1,c
  4698  0022F8  5010               	movf	___ftge@ff2+2,w,c
  4699  0022FA  5813               	subwfb	??___ftge+2,w,c
  4700  0022FC  6E10               	movwf	___ftge@ff2+2,c
  4701  0022FE                     l3971:
  4702  0022FE  FFFF               	dw	65535	; assembler added errata NOP
  4703  002300  0E80               	movlw	128
  4704  002302  1A0D               	xorwf	___ftge@ff1+2,f,c
  4705  002304  1A10               	xorwf	___ftge@ff2+2,f,c
  4706  002306  500E               	movf	___ftge@ff2,w,c
  4707  002308  5C0B               	subwf	___ftge@ff1,w,c
  4708  00230A  500F               	movf	___ftge@ff2+1,w,c
  4709  00230C  580C               	subwfb	___ftge@ff1+1,w,c
  4710  00230E  5010               	movf	___ftge@ff2+2,w,c
  4711  002310  580D               	subwfb	___ftge@ff1+2,w,c
  4712  002312  E202               	bc	l3977
  4713  002314  90D8               	bcf	status,0,c
  4714  002316  D001               	goto	l894
  4715  002318                     l3977:
  4716  002318  80D8               	bsf	status,0,c
  4717  00231A                     l894:
  4718  00231A  FFFF               	dw	65535	; assembler added errata NOP
  4719  00231C  0012               	return		;funcret
  4720  00231E  FFFF               	dw	65535	; errata NOP
  4721  002320                     __end_of___ftge:
  4722                           	opt stack 0
  4723                           tosu	equ	0xFFF
  4724                           tosh	equ	0xFFE
  4725                           tosl	equ	0xFFD
  4726                           pclath	equ	0xFFA
  4727                           tblptru	equ	0xFF8
  4728                           tblptrh	equ	0xFF7
  4729                           tblptrl	equ	0xFF6
  4730                           tablat	equ	0xFF5
  4731                           intcon	equ	0xFF2
  4732                           intcon2	equ	0xFF1
  4733                           postinc0	equ	0xFEE
  4734                           wreg	equ	0xFE8
  4735                           postdec1	equ	0xFE5
  4736                           fsr1l	equ	0xFE1
  4737                           status	equ	0xFD8
  4738                           
  4739 ;; *************** function ___altoft *****************
  4740 ;; Defined at:
  4741 ;;		line 42 in file "/opt/microchip/xc8/v1.45/sources/common/altoft.c"
  4742 ;; Parameters:    Size  Location     Type
  4743 ;;  c               4   85[COMRAM] long 
  4744 ;; Auto vars:     Size  Location     Type
  4745 ;;  sign            1   94[COMRAM] unsigned char 
  4746 ;;  exp             1   93[COMRAM] unsigned char 
  4747 ;; Return value:  Size  Location     Type
  4748 ;;                  3   85[COMRAM] float 
  4749 ;; Registers used:
  4750 ;;		wreg, status,2, status,0, cstack
  4751 ;; Tracked objects:
  4752 ;;		On entry : 0/0
  4753 ;;		On exit  : 0/0
  4754 ;;		Unchanged: 0/0
  4755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4756 ;;      Params:         4       0       0       0       0       0       0
  4757 ;;      Locals:         2       0       0       0       0       0       0
  4758 ;;      Temps:          4       0       0       0       0       0       0
  4759 ;;      Totals:        10       0       0       0       0       0       0
  4760 ;;Total ram usage:       10 bytes
  4761 ;; Hardware stack levels used:    1
  4762 ;; Hardware stack levels required when called:    3
  4763 ;; This function calls:
  4764 ;;		___ftpack
  4765 ;; This function is called by:
  4766 ;;		_floor
  4767 ;; This function uses a non-reentrant model
  4768 ;;
  4769                           
  4770                           	psect	text18
  4771  0021EE                     __ptext18:
  4772                           	opt stack 0
  4773  0021EE                     ___altoft:
  4774                           	opt stack 0
  4775  0021EE  FFFF               	dw	65535	; assembler added errata NOP
  4776                           
  4777                           ;incstack = 0
  4778  0021F0  6A5F               	clrf	___altoft@sign,c
  4779  0021F2  0E8E               	movlw	142
  4780  0021F4  6E5E               	movwf	___altoft@exp,c
  4781  0021F6  AE59               	btfss	___altoft@c+3,7,c
  4782  0021F8  D011               	goto	l3829
  4783  0021FA  1E59               	comf	___altoft@c+3,f,c
  4784  0021FC  1E58               	comf	___altoft@c+2,f,c
  4785  0021FE  1E57               	comf	___altoft@c+1,f,c
  4786  002200  6C56               	negf	___altoft@c,c
  4787  002202  0E00               	movlw	0
  4788  002204  2257               	addwfc	___altoft@c+1,f,c
  4789  002206  2258               	addwfc	___altoft@c+2,f,c
  4790  002208  2259               	addwfc	___altoft@c+3,f,c
  4791  00220A  0E01               	movlw	1
  4792  00220C  6E5F               	movwf	___altoft@sign,c
  4793  00220E  D006               	goto	l3829
  4794  002210                     l3827:
  4795  002210  90D8               	bcf	status,0,c
  4796  002212  3259               	rrcf	___altoft@c+3,f,c
  4797  002214  3258               	rrcf	___altoft@c+2,f,c
  4798  002216  3257               	rrcf	___altoft@c+1,f,c
  4799  002218  3256               	rrcf	___altoft@c,f,c
  4800  00221A  2A5E               	incf	___altoft@exp,f,c
  4801  00221C                     l3829:
  4802  00221C  FFFF               	dw	65535	; assembler added errata NOP
  4803  00221E  6A5A               	clrf	??___altoft& (0+255),c
  4804  002220  6A5B               	clrf	(??___altoft+1)& (0+255),c
  4805  002222  6A5C               	clrf	(??___altoft+2)& (0+255),c
  4806  002224  5059               	movf	___altoft@c+3,w,c
  4807  002226  6E5D               	movwf	(??___altoft+3)& (0+255),c
  4808  002228  505A               	movf	??___altoft,w,c
  4809  00222A  105B               	iorwf	??___altoft+1,w,c
  4810  00222C  105C               	iorwf	??___altoft+2,w,c
  4811  00222E  105D               	iorwf	??___altoft+3,w,c
  4812  002230  E1EF               	bnz	l3827
  4813  002232  C056  F00B         	movff	___altoft@c,___ftpack@arg
  4814  002236  C057  F00C         	movff	___altoft@c+1,___ftpack@arg+1
  4815  00223A  C058  F00D         	movff	___altoft@c+2,___ftpack@arg+2
  4816  00223E  C05E  F00E         	movff	___altoft@exp,___ftpack@exp
  4817  002242  C05F  F00F         	movff	___altoft@sign,___ftpack@sign
  4818  002246  ECF2  F00F         	call	___ftpack	;wreg free
  4819  00224A  C00B  F056         	movff	?___ftpack,?___altoft
  4820  00224E  C00C  F057         	movff	?___ftpack+1,?___altoft+1
  4821  002252  C00D  F058         	movff	?___ftpack+2,?___altoft+2
  4822  002256  0012               	return		;funcret
  4823  002258  FFFF               	dw	65535	; errata NOP
  4824  00225A                     __end_of___altoft:
  4825                           	opt stack 0
  4826                           tosu	equ	0xFFF
  4827                           tosh	equ	0xFFE
  4828                           tosl	equ	0xFFD
  4829                           pclath	equ	0xFFA
  4830                           tblptru	equ	0xFF8
  4831                           tblptrh	equ	0xFF7
  4832                           tblptrl	equ	0xFF6
  4833                           tablat	equ	0xFF5
  4834                           intcon	equ	0xFF2
  4835                           intcon2	equ	0xFF1
  4836                           postinc0	equ	0xFEE
  4837                           wreg	equ	0xFE8
  4838                           postdec1	equ	0xFE5
  4839                           fsr1l	equ	0xFE1
  4840                           status	equ	0xFD8
  4841                           
  4842 ;; *************** function ___ftsub *****************
  4843 ;; Defined at:
  4844 ;;		line 20 in file "/opt/microchip/xc8/v1.45/sources/common/ftsub.c"
  4845 ;; Parameters:    Size  Location     Type
  4846 ;;  f1              3   49[COMRAM] float 
  4847 ;;  f2              3   52[COMRAM] float 
  4848 ;; Auto vars:     Size  Location     Type
  4849 ;;		None
  4850 ;; Return value:  Size  Location     Type
  4851 ;;                  3   49[COMRAM] float 
  4852 ;; Registers used:
  4853 ;;		wreg, status,2, status,0, cstack
  4854 ;; Tracked objects:
  4855 ;;		On entry : 0/0
  4856 ;;		On exit  : 0/0
  4857 ;;		Unchanged: 0/0
  4858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4859 ;;      Params:         6       0       0       0       0       0       0
  4860 ;;      Locals:         0       0       0       0       0       0       0
  4861 ;;      Temps:          0       0       0       0       0       0       0
  4862 ;;      Totals:         6       0       0       0       0       0       0
  4863 ;;Total ram usage:        6 bytes
  4864 ;; Hardware stack levels used:    1
  4865 ;; Hardware stack levels required when called:    4
  4866 ;; This function calls:
  4867 ;;		___ftadd
  4868 ;; This function is called by:
  4869 ;;		_measure_capacitance
  4870 ;;		_measure_inductance
  4871 ;;		_format_double
  4872 ;;		_exp
  4873 ;; This function uses a non-reentrant model
  4874 ;;
  4875                           
  4876                           	psect	text19
  4877  002600                     __ptext19:
  4878                           	opt stack 0
  4879  002600                     ___ftsub:
  4880                           	opt stack 0
  4881  002600  FFFF               	dw	65535	; assembler added errata NOP
  4882                           
  4883                           ;incstack = 0
  4884  002602  5035               	movf	___ftsub@f2,w,c
  4885  002604  1036               	iorwf	___ftsub@f2+1,w,c
  4886  002606  1037               	iorwf	___ftsub@f2+2,w,c
  4887  002608  E002               	bz	l4113
  4888  00260A  0E80               	movlw	128
  4889  00260C  1A37               	xorwf	___ftsub@f2+2,f,c
  4890  00260E                     l4113:
  4891  00260E  C032  F017         	movff	___ftsub@f1,___ftadd@f1
  4892  002612  C033  F018         	movff	___ftsub@f1+1,___ftadd@f1+1
  4893  002616  C034  F019         	movff	___ftsub@f1+2,___ftadd@f1+2
  4894  00261A  C035  F01A         	movff	___ftsub@f2,___ftadd@f2
  4895  00261E  C036  F01B         	movff	___ftsub@f2+1,___ftadd@f2+1
  4896  002622  C037  F01C         	movff	___ftsub@f2+2,___ftadd@f2+2
  4897  002626  EC11  F009         	call	___ftadd	;wreg free
  4898  00262A  C017  F032         	movff	?___ftadd,?___ftsub
  4899  00262E  C018  F033         	movff	?___ftadd+1,?___ftsub+1
  4900  002632  C019  F034         	movff	?___ftadd+2,?___ftsub+2
  4901  002636  0012               	return		;funcret
  4902  002638  FFFF               	dw	65535	; errata NOP
  4903  00263A                     __end_of___ftsub:
  4904                           	opt stack 0
  4905                           tosu	equ	0xFFF
  4906                           tosh	equ	0xFFE
  4907                           tosl	equ	0xFFD
  4908                           pclath	equ	0xFFA
  4909                           tblptru	equ	0xFF8
  4910                           tblptrh	equ	0xFF7
  4911                           tblptrl	equ	0xFF6
  4912                           tablat	equ	0xFF5
  4913                           intcon	equ	0xFF2
  4914                           intcon2	equ	0xFF1
  4915                           postinc0	equ	0xFEE
  4916                           wreg	equ	0xFE8
  4917                           postdec1	equ	0xFE5
  4918                           fsr1l	equ	0xFE1
  4919                           status	equ	0xFD8
  4920                           
  4921 ;; *************** function ___ftneg *****************
  4922 ;; Defined at:
  4923 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/ftneg.c"
  4924 ;; Parameters:    Size  Location     Type
  4925 ;;  f1              3   10[COMRAM] float 
  4926 ;; Auto vars:     Size  Location     Type
  4927 ;;		None
  4928 ;; Return value:  Size  Location     Type
  4929 ;;                  3   10[COMRAM] float 
  4930 ;; Registers used:
  4931 ;;		wreg, status,2, status,0
  4932 ;; Tracked objects:
  4933 ;;		On entry : 3F/0
  4934 ;;		On exit  : 3F/0
  4935 ;;		Unchanged: 3F/0
  4936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4937 ;;      Params:         3       0       0       0       0       0       0
  4938 ;;      Locals:         0       0       0       0       0       0       0
  4939 ;;      Temps:          0       0       0       0       0       0       0
  4940 ;;      Totals:         3       0       0       0       0       0       0
  4941 ;;Total ram usage:        3 bytes
  4942 ;; Hardware stack levels used:    1
  4943 ;; Hardware stack levels required when called:    2
  4944 ;; This function calls:
  4945 ;;		Nothing
  4946 ;; This function is called by:
  4947 ;;		_pow
  4948 ;;		_exp
  4949 ;; This function uses a non-reentrant model
  4950 ;;
  4951                           
  4952                           	psect	text20
  4953  002872                     __ptext20:
  4954                           	opt stack 0
  4955  002872                     ___ftneg:
  4956                           	opt stack 0
  4957  002872  FFFF               	dw	65535	; assembler added errata NOP
  4958                           
  4959                           ; BSR set to: 0
  4960                           
  4961                           ;incstack = 0
  4962  002874  500B               	movf	___ftneg@f1,w,c
  4963  002876  100C               	iorwf	___ftneg@f1+1,w,c
  4964  002878  100D               	iorwf	___ftneg@f1+2,w,c
  4965  00287A  E002               	bz	l910
  4966                           
  4967                           ; BSR set to: 0
  4968  00287C  0E80               	movlw	128
  4969  00287E  1A0D               	xorwf	___ftneg@f1+2,f,c
  4970  002880                     l910:
  4971                           
  4972                           ; BSR set to: 0
  4973  002880  C00B  F00B         	movff	___ftneg@f1,?___ftneg
  4974  002884  C00C  F00C         	movff	___ftneg@f1+1,?___ftneg+1
  4975  002888  C00D  F00D         	movff	___ftneg@f1+2,?___ftneg+2
  4976                           
  4977                           ; BSR set to: 0
  4978  00288C  0012               	return		;funcret
  4979  00288E  FFFF               	dw	65535	; errata NOP
  4980  002890                     __end_of___ftneg:
  4981                           	opt stack 0
  4982                           tosu	equ	0xFFF
  4983                           tosh	equ	0xFFE
  4984                           tosl	equ	0xFFD
  4985                           pclath	equ	0xFFA
  4986                           tblptru	equ	0xFF8
  4987                           tblptrh	equ	0xFF7
  4988                           tblptrl	equ	0xFF6
  4989                           tablat	equ	0xFF5
  4990                           intcon	equ	0xFF2
  4991                           intcon2	equ	0xFF1
  4992                           postinc0	equ	0xFEE
  4993                           wreg	equ	0xFE8
  4994                           postdec1	equ	0xFE5
  4995                           fsr1l	equ	0xFE1
  4996                           status	equ	0xFD8
  4997                           
  4998 ;; *************** function ___ftdiv *****************
  4999 ;; Defined at:
  5000 ;;		line 54 in file "/opt/microchip/xc8/v1.45/sources/common/ftdiv.c"
  5001 ;; Parameters:    Size  Location     Type
  5002 ;;  f1              3   18[COMRAM] float 
  5003 ;;  f2              3   21[COMRAM] float 
  5004 ;; Auto vars:     Size  Location     Type
  5005 ;;  f3              3   28[COMRAM] float 
  5006 ;;  sign            1   32[COMRAM] unsigned char 
  5007 ;;  exp             1   31[COMRAM] unsigned char 
  5008 ;;  cntr            1   27[COMRAM] unsigned char 
  5009 ;; Return value:  Size  Location     Type
  5010 ;;                  3   18[COMRAM] float 
  5011 ;; Registers used:
  5012 ;;		wreg, status,2, status,0, cstack
  5013 ;; Tracked objects:
  5014 ;;		On entry : 0/0
  5015 ;;		On exit  : 0/0
  5016 ;;		Unchanged: 0/0
  5017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5018 ;;      Params:         6       0       0       0       0       0       0
  5019 ;;      Locals:         6       0       0       0       0       0       0
  5020 ;;      Temps:          3       0       0       0       0       0       0
  5021 ;;      Totals:        15       0       0       0       0       0       0
  5022 ;;Total ram usage:       15 bytes
  5023 ;; Hardware stack levels used:    1
  5024 ;; Hardware stack levels required when called:    3
  5025 ;; This function calls:
  5026 ;;		___ftpack
  5027 ;; This function is called by:
  5028 ;;		_measure_capacitance
  5029 ;;		_measure_inductance
  5030 ;;		_format_double
  5031 ;;		_exp
  5032 ;; This function uses a non-reentrant model
  5033 ;;
  5034                           
  5035                           	psect	text21
  5036  001D3C                     __ptext21:
  5037                           	opt stack 0
  5038  001D3C                     ___ftdiv:
  5039                           	opt stack 0
  5040  001D3C  FFFF               	dw	65535	; assembler added errata NOP
  5041                           
  5042                           ; BSR set to: 0
  5043                           ;incstack = 0
  5044  001D3E  C015  F019         	movff	___ftdiv@f1+2,??___ftdiv
  5045  001D42  6A1A               	clrf	(??___ftdiv+1)& (0+255),c
  5046  001D44  6A1B               	clrf	(??___ftdiv+2)& (0+255),c
  5047  001D46  3414               	rlcf	___ftdiv@f1+1,w,c
  5048  001D48  3619               	rlcf	??___ftdiv& (0+255),f,c
  5049  001D4A  E301               	bnc	u3711
  5050  001D4C  801A               	bsf	(??___ftdiv+1)& (0+255),0,c
  5051  001D4E                     u3711:
  5052  001D4E  5019               	movf	??___ftdiv,w,c
  5053  001D50  6E20               	movwf	___ftdiv@exp,c
  5054  001D52  5020               	movf	___ftdiv@exp,w,c
  5055  001D54  E101               	bnz	l4077
  5056  001D56  D00C               	goto	u3740
  5057  001D58                     l4077:
  5058  001D58  C018  F019         	movff	___ftdiv@f2+2,??___ftdiv
  5059  001D5C  6A1A               	clrf	(??___ftdiv+1)& (0+255),c
  5060  001D5E  6A1B               	clrf	(??___ftdiv+2)& (0+255),c
  5061  001D60  3417               	rlcf	___ftdiv@f2+1,w,c
  5062  001D62  3619               	rlcf	??___ftdiv& (0+255),f,c
  5063  001D64  E301               	bnc	u3731
  5064  001D66  801A               	bsf	(??___ftdiv+1)& (0+255),0,c
  5065  001D68                     u3731:
  5066  001D68  5019               	movf	??___ftdiv,w,c
  5067  001D6A  6E21               	movwf	___ftdiv@sign,c
  5068  001D6C  5021               	movf	___ftdiv@sign,w,c
  5069  001D6E  E105               	bnz	l886
  5070  001D70                     u3740:
  5071  001D70  FFFF               	dw	65535	; assembler added errata NOP
  5072  001D72  6A13               	clrf	?___ftdiv,c
  5073  001D74  6A14               	clrf	?___ftdiv+1,c
  5074  001D76  6A15               	clrf	?___ftdiv+2,c
  5075  001D78  D03D               	goto	l885
  5076  001D7A                     l886:
  5077  001D7A  6A1D               	clrf	___ftdiv@f3,c
  5078  001D7C  6A1E               	clrf	___ftdiv@f3+1,c
  5079  001D7E  6A1F               	clrf	___ftdiv@f3+2,c
  5080  001D80  5021               	movf	___ftdiv@sign,w,c
  5081  001D82  0F89               	addlw	137
  5082  001D84  5E20               	subwf	___ftdiv@exp,f,c
  5083  001D86  C015  F021         	movff	___ftdiv@f1+2,___ftdiv@sign
  5084  001D8A  5018               	movf	___ftdiv@f2+2,w,c
  5085  001D8C  1A21               	xorwf	___ftdiv@sign,f,c
  5086  001D8E  0E80               	movlw	128
  5087  001D90  1621               	andwf	___ftdiv@sign,f,c
  5088  001D92  8E14               	bsf	___ftdiv@f1+1,7,c
  5089  001D94  6A15               	clrf	___ftdiv@f1+2,c
  5090  001D96  8E17               	bsf	___ftdiv@f2+1,7,c
  5091  001D98  6A18               	clrf	___ftdiv@f2+2,c
  5092  001D9A  0E18               	movlw	24
  5093  001D9C  6E1C               	movwf	___ftdiv@cntr,c
  5094  001D9E                     l4095:
  5095  001D9E  FFFF               	dw	65535	; assembler added errata NOP
  5096  001DA0  90D8               	bcf	status,0,c
  5097  001DA2  361D               	rlcf	___ftdiv@f3,f,c
  5098  001DA4  361E               	rlcf	___ftdiv@f3+1,f,c
  5099  001DA6  361F               	rlcf	___ftdiv@f3+2,f,c
  5100  001DA8  5016               	movf	___ftdiv@f2,w,c
  5101  001DAA  5C13               	subwf	___ftdiv@f1,w,c
  5102  001DAC  5017               	movf	___ftdiv@f2+1,w,c
  5103  001DAE  5814               	subwfb	___ftdiv@f1+1,w,c
  5104  001DB0  5018               	movf	___ftdiv@f2+2,w,c
  5105  001DB2  5815               	subwfb	___ftdiv@f1+2,w,c
  5106  001DB4  E307               	bnc	l888
  5107  001DB6  5016               	movf	___ftdiv@f2,w,c
  5108  001DB8  5E13               	subwf	___ftdiv@f1,f,c
  5109  001DBA  5017               	movf	___ftdiv@f2+1,w,c
  5110  001DBC  5A14               	subwfb	___ftdiv@f1+1,f,c
  5111  001DBE  5018               	movf	___ftdiv@f2+2,w,c
  5112  001DC0  5A15               	subwfb	___ftdiv@f1+2,f,c
  5113  001DC2  801D               	bsf	___ftdiv@f3,0,c
  5114  001DC4                     l888:
  5115  001DC4  90D8               	bcf	status,0,c
  5116  001DC6  3613               	rlcf	___ftdiv@f1,f,c
  5117  001DC8  3614               	rlcf	___ftdiv@f1+1,f,c
  5118  001DCA  3615               	rlcf	___ftdiv@f1+2,f,c
  5119  001DCC  2E1C               	decfsz	___ftdiv@cntr,f,c
  5120  001DCE  D7E7               	goto	l4095
  5121  001DD0  C01D  F00B         	movff	___ftdiv@f3,___ftpack@arg
  5122  001DD4  C01E  F00C         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5123  001DD8  C01F  F00D         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5124  001DDC  C020  F00E         	movff	___ftdiv@exp,___ftpack@exp
  5125  001DE0  C021  F00F         	movff	___ftdiv@sign,___ftpack@sign
  5126  001DE4  ECF2  F00F         	call	___ftpack	;wreg free
  5127  001DE8  C00B  F013         	movff	?___ftpack,?___ftdiv
  5128  001DEC  C00C  F014         	movff	?___ftpack+1,?___ftdiv+1
  5129  001DF0  C00D  F015         	movff	?___ftpack+2,?___ftdiv+2
  5130  001DF4                     l885:
  5131  001DF4  FFFF               	dw	65535	; assembler added errata NOP
  5132  001DF6  0012               	return		;funcret
  5133  001DF8  FFFF               	dw	65535	; errata NOP
  5134  001DFA                     __end_of___ftdiv:
  5135                           	opt stack 0
  5136                           tosu	equ	0xFFF
  5137                           tosh	equ	0xFFE
  5138                           tosl	equ	0xFFD
  5139                           pclath	equ	0xFFA
  5140                           tblptru	equ	0xFF8
  5141                           tblptrh	equ	0xFF7
  5142                           tblptrl	equ	0xFF6
  5143                           tablat	equ	0xFF5
  5144                           intcon	equ	0xFF2
  5145                           intcon2	equ	0xFF1
  5146                           postinc0	equ	0xFEE
  5147                           wreg	equ	0xFE8
  5148                           postdec1	equ	0xFE5
  5149                           fsr1l	equ	0xFE1
  5150                           status	equ	0xFD8
  5151                           
  5152 ;; *************** function ___lltoft *****************
  5153 ;; Defined at:
  5154 ;;		line 35 in file "/opt/microchip/xc8/v1.45/sources/common/lltoft.c"
  5155 ;; Parameters:    Size  Location     Type
  5156 ;;  c               4   18[COMRAM] unsigned long 
  5157 ;; Auto vars:     Size  Location     Type
  5158 ;;  exp             1   26[COMRAM] unsigned char 
  5159 ;; Return value:  Size  Location     Type
  5160 ;;                  3   18[COMRAM] float 
  5161 ;; Registers used:
  5162 ;;		wreg, status,2, status,0, cstack
  5163 ;; Tracked objects:
  5164 ;;		On entry : 0/0
  5165 ;;		On exit  : 0/0
  5166 ;;		Unchanged: 0/0
  5167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5168 ;;      Params:         4       0       0       0       0       0       0
  5169 ;;      Locals:         1       0       0       0       0       0       0
  5170 ;;      Temps:          4       0       0       0       0       0       0
  5171 ;;      Totals:         9       0       0       0       0       0       0
  5172 ;;Total ram usage:        9 bytes
  5173 ;; Hardware stack levels used:    1
  5174 ;; Hardware stack levels required when called:    3
  5175 ;; This function calls:
  5176 ;;		___ftpack
  5177 ;; This function is called by:
  5178 ;;		_pow
  5179 ;; This function uses a non-reentrant model
  5180 ;;
  5181                           
  5182                           	psect	text22
  5183  0023C8                     __ptext22:
  5184                           	opt stack 0
  5185  0023C8                     ___lltoft:
  5186                           	opt stack 0
  5187  0023C8  FFFF               	dw	65535	; assembler added errata NOP
  5188                           
  5189                           ;incstack = 0
  5190  0023CA  0E8E               	movlw	142
  5191  0023CC  6E1B               	movwf	___lltoft@exp,c
  5192  0023CE  D006               	goto	l4187
  5193  0023D0                     l4185:
  5194  0023D0  90D8               	bcf	status,0,c
  5195  0023D2  3216               	rrcf	___lltoft@c+3,f,c
  5196  0023D4  3215               	rrcf	___lltoft@c+2,f,c
  5197  0023D6  3214               	rrcf	___lltoft@c+1,f,c
  5198  0023D8  3213               	rrcf	___lltoft@c,f,c
  5199  0023DA  2A1B               	incf	___lltoft@exp,f,c
  5200  0023DC                     l4187:
  5201  0023DC  FFFF               	dw	65535	; assembler added errata NOP
  5202  0023DE  6A17               	clrf	??___lltoft& (0+255),c
  5203  0023E0  6A18               	clrf	(??___lltoft+1)& (0+255),c
  5204  0023E2  6A19               	clrf	(??___lltoft+2)& (0+255),c
  5205  0023E4  5016               	movf	___lltoft@c+3,w,c
  5206  0023E6  6E1A               	movwf	(??___lltoft+3)& (0+255),c
  5207  0023E8  5017               	movf	??___lltoft,w,c
  5208  0023EA  1018               	iorwf	??___lltoft+1,w,c
  5209  0023EC  1019               	iorwf	??___lltoft+2,w,c
  5210  0023EE  101A               	iorwf	??___lltoft+3,w,c
  5211  0023F0  E1EF               	bnz	l4185
  5212  0023F2  C013  F00B         	movff	___lltoft@c,___ftpack@arg
  5213  0023F6  C014  F00C         	movff	___lltoft@c+1,___ftpack@arg+1
  5214  0023FA  C015  F00D         	movff	___lltoft@c+2,___ftpack@arg+2
  5215  0023FE  C01B  F00E         	movff	___lltoft@exp,___ftpack@exp
  5216  002402  0E00               	movlw	0
  5217  002404  6E0F               	movwf	___ftpack@sign,c
  5218  002406  ECF2  F00F         	call	___ftpack	;wreg free
  5219  00240A  C00B  F013         	movff	?___ftpack,?___lltoft
  5220  00240E  C00C  F014         	movff	?___ftpack+1,?___lltoft+1
  5221  002412  C00D  F015         	movff	?___ftpack+2,?___lltoft+2
  5222  002416  0012               	return		;funcret
  5223  002418  FFFF               	dw	65535	; errata NOP
  5224  00241A                     __end_of___lltoft:
  5225                           	opt stack 0
  5226                           tosu	equ	0xFFF
  5227                           tosh	equ	0xFFE
  5228                           tosl	equ	0xFFD
  5229                           pclath	equ	0xFFA
  5230                           tblptru	equ	0xFF8
  5231                           tblptrh	equ	0xFF7
  5232                           tblptrl	equ	0xFF6
  5233                           tablat	equ	0xFF5
  5234                           intcon	equ	0xFF2
  5235                           intcon2	equ	0xFF1
  5236                           postinc0	equ	0xFEE
  5237                           wreg	equ	0xFE8
  5238                           postdec1	equ	0xFE5
  5239                           fsr1l	equ	0xFE1
  5240                           status	equ	0xFD8
  5241                           
  5242 ;; *************** function _log10 *****************
  5243 ;; Defined at:
  5244 ;;		line 39 in file "/opt/microchip/xc8/v1.45/sources/common/log.c"
  5245 ;; Parameters:    Size  Location     Type
  5246 ;;  x               3   64[COMRAM] float 
  5247 ;; Auto vars:     Size  Location     Type
  5248 ;;		None
  5249 ;; Return value:  Size  Location     Type
  5250 ;;                  3   64[COMRAM] float 
  5251 ;; Registers used:
  5252 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5253 ;; Tracked objects:
  5254 ;;		On entry : 3F/0
  5255 ;;		On exit  : 0/0
  5256 ;;		Unchanged: 0/0
  5257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5258 ;;      Params:         3       0       0       0       0       0       0
  5259 ;;      Locals:         3       0       0       0       0       0       0
  5260 ;;      Temps:          0       0       0       0       0       0       0
  5261 ;;      Totals:         6       0       0       0       0       0       0
  5262 ;;Total ram usage:        6 bytes
  5263 ;; Hardware stack levels used:    1
  5264 ;; Hardware stack levels required when called:    6
  5265 ;; This function calls:
  5266 ;;		___ftmul
  5267 ;;		_log
  5268 ;; This function is called by:
  5269 ;;		_format_double
  5270 ;; This function uses a non-reentrant model
  5271 ;;
  5272                           
  5273                           	psect	text23
  5274  0024B6                     __ptext23:
  5275                           	opt stack 0
  5276  0024B6                     _log10:
  5277                           	opt stack 0
  5278  0024B6  FFFF               	dw	65535	; assembler added errata NOP
  5279                           
  5280                           ; BSR set to: 0
  5281                           
  5282                           ;incstack = 0
  5283  0024B8  C041  F03C         	movff	log10@x,log@x
  5284  0024BC  C042  F03D         	movff	log10@x+1,log@x+1
  5285  0024C0  C043  F03E         	movff	log10@x+2,log@x+2
  5286  0024C4  EC9C  F00B         	call	_log	;wreg free
  5287  0024C8  C03C  F044         	movff	?_log,_log10$1687
  5288  0024CC  C03D  F045         	movff	?_log+1,_log10$1687+1
  5289  0024D0  C03E  F046         	movff	?_log+2,_log10$1687+2
  5290  0024D4  C044  F023         	movff	_log10$1687,___ftmul@f1
  5291  0024D8  C045  F024         	movff	_log10$1687+1,___ftmul@f1+1
  5292  0024DC  C046  F025         	movff	_log10$1687+2,___ftmul@f1+2
  5293  0024E0  0E5C               	movlw	92
  5294  0024E2  6E26               	movwf	___ftmul@f2,c
  5295  0024E4  0EDE               	movlw	222
  5296  0024E6  6E27               	movwf	___ftmul@f2+1,c
  5297  0024E8  0E3E               	movlw	62
  5298  0024EA  6E28               	movwf	___ftmul@f2+2,c
  5299  0024EC  EC87  F00C         	call	___ftmul	;wreg free
  5300  0024F0  C023  F041         	movff	?___ftmul,?_log10
  5301  0024F4  C024  F042         	movff	?___ftmul+1,?_log10+1
  5302  0024F8  C025  F043         	movff	?___ftmul+2,?_log10+2
  5303  0024FC  0012               	return		;funcret
  5304  0024FE  FFFF               	dw	65535	; errata NOP
  5305  002500                     __end_of_log10:
  5306                           	opt stack 0
  5307                           tosu	equ	0xFFF
  5308                           tosh	equ	0xFFE
  5309                           tosl	equ	0xFFD
  5310                           pclath	equ	0xFFA
  5311                           tblptru	equ	0xFF8
  5312                           tblptrh	equ	0xFF7
  5313                           tblptrl	equ	0xFF6
  5314                           tablat	equ	0xFF5
  5315                           intcon	equ	0xFF2
  5316                           intcon2	equ	0xFF1
  5317                           postinc0	equ	0xFEE
  5318                           wreg	equ	0xFE8
  5319                           postdec1	equ	0xFE5
  5320                           fsr1l	equ	0xFE1
  5321                           status	equ	0xFD8
  5322                           
  5323 ;; *************** function _log *****************
  5324 ;; Defined at:
  5325 ;;		line 5 in file "/opt/microchip/xc8/v1.45/sources/common/log.c"
  5326 ;; Parameters:    Size  Location     Type
  5327 ;;  x               3   59[COMRAM] float 
  5328 ;; Auto vars:     Size  Location     Type
  5329 ;;  exponent        2   62[COMRAM] int 
  5330 ;; Return value:  Size  Location     Type
  5331 ;;                  3   59[COMRAM] int 
  5332 ;; Registers used:
  5333 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5334 ;; Tracked objects:
  5335 ;;		On entry : 3F/0
  5336 ;;		On exit  : 0/0
  5337 ;;		Unchanged: 0/0
  5338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5339 ;;      Params:         3       0       0       0       0       0       0
  5340 ;;      Locals:         2       0       0       0       0       0       0
  5341 ;;      Temps:          0       0       0       0       0       0       0
  5342 ;;      Totals:         5       0       0       0       0       0       0
  5343 ;;Total ram usage:        5 bytes
  5344 ;; Hardware stack levels used:    1
  5345 ;; Hardware stack levels required when called:    5
  5346 ;; This function calls:
  5347 ;;		___awtoft
  5348 ;;		___ftadd
  5349 ;;		___ftmul
  5350 ;;		_eval_poly
  5351 ;;		_frexp
  5352 ;; This function is called by:
  5353 ;;		_log10
  5354 ;;		_pow
  5355 ;; This function uses a non-reentrant model
  5356 ;;
  5357                           
  5358                           	psect	text24
  5359  001738                     __ptext24:
  5360                           	opt stack 0
  5361  001738                     _log:
  5362                           	opt stack 0
  5363  001738  FFFF               	dw	65535	; assembler added errata NOP
  5364                           
  5365                           ; BSR set to: 0
  5366                           
  5367                           ;incstack = 0
  5368  00173A  BE3E               	btfsc	log@x+2,7,c
  5369  00173C  D004               	goto	u3880
  5370                           
  5371                           ; BSR set to: 0
  5372                           
  5373                           ; BSR set to: 0
  5374  00173E  503C               	movf	log@x,w,c
  5375  001740  103D               	iorwf	log@x+1,w,c
  5376  001742  103E               	iorwf	log@x+2,w,c
  5377  001744  E105               	bnz	l4201
  5378  001746                     u3880:
  5379  001746  FFFF               	dw	65535	; assembler added errata NOP
  5380                           
  5381                           ; BSR set to: 0
  5382  001748  6A3C               	clrf	?_log,c
  5383  00174A  6A3D               	clrf	?_log+1,c
  5384  00174C  6A3E               	clrf	?_log+2,c
  5385  00174E  D067               	goto	l992
  5386  001750                     l4201:
  5387                           
  5388                           ; BSR set to: 0
  5389  001750  6A26               	clrf	___ftmul@f2,c
  5390  001752  6A27               	clrf	___ftmul@f2+1,c
  5391  001754  0E40               	movlw	64
  5392  001756  6E28               	movwf	___ftmul@f2+2,c
  5393  001758  0E3F               	movlw	low log@exponent
  5394  00175A  6E0E               	movwf	frexp@eptr,c
  5395  00175C  C03C  F00B         	movff	log@x,frexp@value
  5396  001760  C03D  F00C         	movff	log@x+1,frexp@value+1
  5397  001764  C03E  F00D         	movff	log@x+2,frexp@value+2
  5398  001768  ECBC  F010         	call	_frexp	;wreg free
  5399  00176C  C00B  F023         	movff	?_frexp,___ftmul@f1
  5400  001770  C00C  F024         	movff	?_frexp+1,___ftmul@f1+1
  5401  001774  C00D  F025         	movff	?_frexp+2,___ftmul@f1+2
  5402  001778  EC87  F00C         	call	___ftmul	;wreg free
  5403  00177C  C023  F017         	movff	?___ftmul,___ftadd@f1
  5404  001780  C024  F018         	movff	?___ftmul+1,___ftadd@f1+1
  5405  001784  C025  F019         	movff	?___ftmul+2,___ftadd@f1+2
  5406  001788  6A1A               	clrf	___ftadd@f2,c
  5407  00178A  0E80               	movlw	128
  5408  00178C  6E1B               	movwf	___ftadd@f2+1,c
  5409  00178E  0EBF               	movlw	191
  5410  001790  6E1C               	movwf	___ftadd@f2+2,c
  5411  001792  EC11  F009         	call	___ftadd	;wreg free
  5412  001796  C017  F03C         	movff	?___ftadd,log@x
  5413  00179A  C018  F03D         	movff	?___ftadd+1,log@x+1
  5414  00179E  C019  F03E         	movff	?___ftadd+2,log@x+2
  5415  0017A2  063F               	decf	log@exponent,f,c
  5416  0017A4  A0D8               	btfss	status,0,c
  5417  0017A6  0640               	decf	log@exponent+1,f,c
  5418  0017A8  C03C  F032         	movff	log@x,eval_poly@x
  5419  0017AC  C03D  F033         	movff	log@x+1,eval_poly@x+1
  5420  0017B0  C03E  F034         	movff	log@x+2,eval_poly@x+2
  5421  0017B4  0E1F               	movlw	low log@coeff
  5422  0017B6  6E35               	movwf	eval_poly@d,c
  5423  0017B8  6A37               	clrf	eval_poly@n+1,c
  5424  0017BA  0E08               	movlw	8
  5425  0017BC  6E36               	movwf	eval_poly@n,c
  5426  0017BE  ECFD  F00E         	call	_eval_poly	;wreg free
  5427  0017C2  C032  F03C         	movff	?_eval_poly,log@x
  5428  0017C6  C033  F03D         	movff	?_eval_poly+1,log@x+1
  5429  0017CA  C034  F03E         	movff	?_eval_poly+2,log@x+2
  5430  0017CE  0E72               	movlw	114
  5431  0017D0  6E26               	movwf	___ftmul@f2,c
  5432  0017D2  0E31               	movlw	49
  5433  0017D4  6E27               	movwf	___ftmul@f2+1,c
  5434  0017D6  0E3F               	movlw	63
  5435  0017D8  6E28               	movwf	___ftmul@f2+2,c
  5436  0017DA  C03F  F013         	movff	log@exponent,___awtoft@c
  5437  0017DE  C040  F014         	movff	log@exponent+1,___awtoft@c+1
  5438  0017E2  ECE2  F012         	call	___awtoft	;wreg free
  5439  0017E6  C013  F023         	movff	?___awtoft,___ftmul@f1
  5440  0017EA  C014  F024         	movff	?___awtoft+1,___ftmul@f1+1
  5441  0017EE  C015  F025         	movff	?___awtoft+2,___ftmul@f1+2
  5442  0017F2  EC87  F00C         	call	___ftmul	;wreg free
  5443  0017F6  C023  F017         	movff	?___ftmul,___ftadd@f1
  5444  0017FA  C024  F018         	movff	?___ftmul+1,___ftadd@f1+1
  5445  0017FE  C025  F019         	movff	?___ftmul+2,___ftadd@f1+2
  5446  001802  C03C  F01A         	movff	log@x,___ftadd@f2
  5447  001806  C03D  F01B         	movff	log@x+1,___ftadd@f2+1
  5448  00180A  C03E  F01C         	movff	log@x+2,___ftadd@f2+2
  5449  00180E  EC11  F009         	call	___ftadd	;wreg free
  5450  001812  C017  F03C         	movff	?___ftadd,?_log
  5451  001816  C018  F03D         	movff	?___ftadd+1,?_log+1
  5452  00181A  C019  F03E         	movff	?___ftadd+2,?_log+2
  5453  00181E                     l992:
  5454  00181E  FFFF               	dw	65535	; assembler added errata NOP
  5455  001820  0012               	return		;funcret
  5456  001822  FFFF               	dw	65535	; errata NOP
  5457  001824                     __end_of_log:
  5458                           	opt stack 0
  5459                           tosu	equ	0xFFF
  5460                           tosh	equ	0xFFE
  5461                           tosl	equ	0xFFD
  5462                           pclath	equ	0xFFA
  5463                           tblptru	equ	0xFF8
  5464                           tblptrh	equ	0xFF7
  5465                           tblptrl	equ	0xFF6
  5466                           tablat	equ	0xFF5
  5467                           intcon	equ	0xFF2
  5468                           intcon2	equ	0xFF1
  5469                           postinc0	equ	0xFEE
  5470                           wreg	equ	0xFE8
  5471                           postdec1	equ	0xFE5
  5472                           fsr1l	equ	0xFE1
  5473                           status	equ	0xFD8
  5474                           
  5475 ;; *************** function _frexp *****************
  5476 ;; Defined at:
  5477 ;;		line 254 in file "/opt/microchip/xc8/v1.45/sources/common/frexp.c"
  5478 ;; Parameters:    Size  Location     Type
  5479 ;;  value           3   10[COMRAM] int 
  5480 ;;  eptr            1   13[COMRAM] PTR int 
  5481 ;;		 -> log@exponent(2), floor@expon(2), 
  5482 ;; Auto vars:     Size  Location     Type
  5483 ;;		None
  5484 ;; Return value:  Size  Location     Type
  5485 ;;                  3   10[COMRAM] PTR int 
  5486 ;; Registers used:
  5487 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5488 ;; Tracked objects:
  5489 ;;		On entry : 0/0
  5490 ;;		On exit  : 0/0
  5491 ;;		Unchanged: 0/0
  5492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5493 ;;      Params:         4       0       0       0       0       0       0
  5494 ;;      Locals:         0       0       0       0       0       0       0
  5495 ;;      Temps:          2       0       0       0       0       0       0
  5496 ;;      Totals:         6       0       0       0       0       0       0
  5497 ;;Total ram usage:        6 bytes
  5498 ;; Hardware stack levels used:    1
  5499 ;; Hardware stack levels required when called:    2
  5500 ;; This function calls:
  5501 ;;		Nothing
  5502 ;; This function is called by:
  5503 ;;		_floor
  5504 ;;		_log
  5505 ;; This function uses a non-reentrant model
  5506 ;;
  5507                           
  5508                           	psect	text25
  5509  002178                     __ptext25:
  5510                           	opt stack 0
  5511  002178                     _frexp:
  5512                           	opt stack 0
  5513  002178  FFFF               	dw	65535	; assembler added errata NOP
  5514                           
  5515                           ;incstack = 0
  5516  00217A  500B               	movf	frexp@value,w,c
  5517  00217C  100C               	iorwf	frexp@value+1,w,c
  5518  00217E  100D               	iorwf	frexp@value+2,w,c
  5519  002180  E10A               	bnz	l3951
  5520  002182  500E               	movf	frexp@eptr,w,c
  5521  002184  6ED9               	movwf	fsr2l,c
  5522  002186  6ADA               	clrf	fsr2h,c
  5523  002188  0E00               	movlw	0
  5524  00218A  6ADE               	clrf	postinc2,c
  5525  00218C  6ADD               	clrf	postdec2,c
  5526  00218E  6A0B               	clrf	?_frexp,c
  5527  002190  6A0C               	clrf	?_frexp+1,c
  5528  002192  6A0D               	clrf	?_frexp+2,c
  5529  002194  D029               	goto	l836
  5530  002196                     l3951:
  5531  002196  500D               	movf	frexp@value+2,w,c
  5532  002198  0B7F               	andlw	127
  5533  00219A  6E0F               	movwf	??_frexp& (0+255),c
  5534  00219C  6A10               	clrf	(??_frexp+1)& (0+255),c
  5535  00219E  90D8               	bcf	status,0,c
  5536  0021A0  360F               	rlcf	??_frexp,f,c
  5537  0021A2  3610               	rlcf	??_frexp+1,f,c
  5538  0021A4  500E               	movf	frexp@eptr,w,c
  5539  0021A6  6ED9               	movwf	fsr2l,c
  5540  0021A8  6ADA               	clrf	fsr2h,c
  5541  0021AA  C00F  FFDE         	movff	??_frexp,postinc2
  5542  0021AE  C010  FFDD         	movff	??_frexp+1,postdec2
  5543  0021B2  500E               	movf	frexp@eptr,w,c
  5544  0021B4  6ED9               	movwf	fsr2l,c
  5545  0021B6  6ADA               	clrf	fsr2h,c
  5546  0021B8  0E01               	movlw	1
  5547  0021BA  AE0C               	btfss	frexp@value+1,7,c
  5548  0021BC  0E00               	movlw	0
  5549  0021BE  12DE               	iorwf	postinc2,f,c
  5550  0021C0  0E00               	movlw	0
  5551  0021C2  12DD               	iorwf	postdec2,f,c
  5552  0021C4  500E               	movf	frexp@eptr,w,c
  5553  0021C6  6ED9               	movwf	fsr2l,c
  5554  0021C8  6ADA               	clrf	fsr2h,c
  5555  0021CA  0E82               	movlw	130
  5556  0021CC  26DE               	addwf	postinc2,f,c
  5557  0021CE  0EFF               	movlw	255
  5558  0021D0  22DD               	addwfc	postdec2,f,c
  5559  0021D2  500D               	movf	frexp@value+2,w,c
  5560  0021D4  0B80               	andlw	-128
  5561  0021D6  093F               	iorlw	63
  5562  0021D8  6E0D               	movwf	frexp@value+2,c
  5563  0021DA  9E0C               	bcf	frexp@value+1,7,c
  5564  0021DC  C00B  F00B         	movff	frexp@value,?_frexp
  5565  0021E0  C00C  F00C         	movff	frexp@value+1,?_frexp+1
  5566  0021E4  C00D  F00D         	movff	frexp@value+2,?_frexp+2
  5567  0021E8                     l836:
  5568  0021E8  FFFF               	dw	65535	; assembler added errata NOP
  5569  0021EA  0012               	return		;funcret
  5570  0021EC  FFFF               	dw	65535	; errata NOP
  5571  0021EE                     __end_of_frexp:
  5572                           	opt stack 0
  5573                           tosu	equ	0xFFF
  5574                           tosh	equ	0xFFE
  5575                           tosl	equ	0xFFD
  5576                           pclath	equ	0xFFA
  5577                           tblptru	equ	0xFF8
  5578                           tblptrh	equ	0xFF7
  5579                           tblptrl	equ	0xFF6
  5580                           tablat	equ	0xFF5
  5581                           intcon	equ	0xFF2
  5582                           intcon2	equ	0xFF1
  5583                           postinc0	equ	0xFEE
  5584                           wreg	equ	0xFE8
  5585                           postdec1	equ	0xFE5
  5586                           fsr1l	equ	0xFE1
  5587                           postinc2	equ	0xFDE
  5588                           postdec2	equ	0xFDD
  5589                           fsr2h	equ	0xFDA
  5590                           fsr2l	equ	0xFD9
  5591                           status	equ	0xFD8
  5592                           
  5593 ;; *************** function _eval_poly *****************
  5594 ;; Defined at:
  5595 ;;		line 4 in file "/opt/microchip/xc8/v1.45/sources/common/evalpoly.c"
  5596 ;; Parameters:    Size  Location     Type
  5597 ;;  x               3   49[COMRAM] PTR int 
  5598 ;;  d               1   52[COMRAM] PTR const 
  5599 ;;		 -> exp@coeff(30), log@coeff(27), 
  5600 ;;  n               2   53[COMRAM] int 
  5601 ;; Auto vars:     Size  Location     Type
  5602 ;;  res             3   56[COMRAM] int 
  5603 ;; Return value:  Size  Location     Type
  5604 ;;                  3   49[COMRAM] int 
  5605 ;; Registers used:
  5606 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5607 ;; Tracked objects:
  5608 ;;		On entry : 0/0
  5609 ;;		On exit  : 0/0
  5610 ;;		Unchanged: 0/0
  5611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5612 ;;      Params:         6       0       0       0       0       0       0
  5613 ;;      Locals:         3       0       0       0       0       0       0
  5614 ;;      Temps:          1       0       0       0       0       0       0
  5615 ;;      Totals:        10       0       0       0       0       0       0
  5616 ;;Total ram usage:       10 bytes
  5617 ;; Hardware stack levels used:    1
  5618 ;; Hardware stack levels required when called:    4
  5619 ;; This function calls:
  5620 ;;		___ftadd
  5621 ;;		___ftmul
  5622 ;; This function is called by:
  5623 ;;		_log
  5624 ;;		_exp
  5625 ;; This function uses a non-reentrant model
  5626 ;;
  5627                           
  5628                           	psect	text26
  5629  001DFA                     __ptext26:
  5630                           	opt stack 0
  5631  001DFA                     _eval_poly:
  5632                           	opt stack 0
  5633  001DFA  FFFF               	dw	65535	; assembler added errata NOP
  5634                           
  5635                           ;incstack = 0
  5636  001DFC  5036               	movf	eval_poly@n,w,c
  5637  001DFE  0D03               	mullw	3
  5638  001E00  5035               	movf	eval_poly@d,w,c
  5639  001E02  24F3               	addwf	prodl,w,c
  5640  001E04  6E38               	movwf	??_eval_poly& (0+255),c
  5641  001E06  C038  FFF6         	movff	??_eval_poly,tblptrl
  5642  001E0A                     	if	1	;There is more than 1 active tblptr byte
  5643  001E0A  0E06               	movlw	high __smallconst
  5644  001E0C  6EF7               	movwf	tblptrh,c
  5645  001E0E                     	endif
  5646  001E0E                     	if	0	;tblptru may be non-zero
  5647  001E0E                     	endif
  5648  001E0E                     	if	0	;tblptru may be non-zero
  5649  001E0E                     	endif
  5650  001E0E  0009               	tblrd		*+
  5651  001E10  FFFF               	dw	65535	; errata NOP
  5652  001E12  CFF5 F039          	movff	tablat,eval_poly@res
  5653  001E16  0009               	tblrd		*+
  5654  001E18  FFFF               	dw	65535	; errata NOP
  5655  001E1A  CFF5 F03A          	movff	tablat,eval_poly@res+1
  5656  001E1E  000A               	tblrd		*-
  5657  001E20  FFFF               	dw	65535	; errata NOP
  5658  001E22  CFF5 F03B          	movff	tablat,eval_poly@res+2
  5659  001E26  D034               	goto	l4167
  5660  001E28                     l4165:
  5661  001E28  C039  F026         	movff	eval_poly@res,___ftmul@f2
  5662  001E2C  C03A  F027         	movff	eval_poly@res+1,___ftmul@f2+1
  5663  001E30  C03B  F028         	movff	eval_poly@res+2,___ftmul@f2+2
  5664  001E34  C032  F023         	movff	eval_poly@x,___ftmul@f1
  5665  001E38  C033  F024         	movff	eval_poly@x+1,___ftmul@f1+1
  5666  001E3C  C034  F025         	movff	eval_poly@x+2,___ftmul@f1+2
  5667  001E40  EC87  F00C         	call	___ftmul	;wreg free
  5668  001E44  C023  F017         	movff	?___ftmul,___ftadd@f1
  5669  001E48  C024  F018         	movff	?___ftmul+1,___ftadd@f1+1
  5670  001E4C  C025  F019         	movff	?___ftmul+2,___ftadd@f1+2
  5671  001E50  0636               	decf	eval_poly@n,f,c
  5672  001E52  A0D8               	btfss	status,0,c
  5673  001E54  0637               	decf	eval_poly@n+1,f,c
  5674  001E56  5036               	movf	eval_poly@n,w,c
  5675  001E58  0D03               	mullw	3
  5676  001E5A  5035               	movf	eval_poly@d,w,c
  5677  001E5C  24F3               	addwf	prodl,w,c
  5678  001E5E  6E38               	movwf	??_eval_poly& (0+255),c
  5679  001E60  C038  FFF6         	movff	??_eval_poly,tblptrl
  5680  001E64                     	if	1	;There is more than 1 active tblptr byte
  5681  001E64  0E06               	movlw	high __smallconst
  5682  001E66  6EF7               	movwf	tblptrh,c
  5683  001E68                     	endif
  5684  001E68                     	if	0	;tblptru may be non-zero
  5685  001E68                     	endif
  5686  001E68                     	if	0	;tblptru may be non-zero
  5687  001E68                     	endif
  5688  001E68  0009               	tblrd		*+
  5689  001E6A  FFFF               	dw	65535	; errata NOP
  5690  001E6C  CFF5 F01A          	movff	tablat,___ftadd@f2
  5691  001E70  0009               	tblrd		*+
  5692  001E72  FFFF               	dw	65535	; errata NOP
  5693  001E74  CFF5 F01B          	movff	tablat,___ftadd@f2+1
  5694  001E78  000A               	tblrd		*-
  5695  001E7A  FFFF               	dw	65535	; errata NOP
  5696  001E7C  CFF5 F01C          	movff	tablat,___ftadd@f2+2
  5697  001E80  EC11  F009         	call	___ftadd	;wreg free
  5698  001E84  C017  F039         	movff	?___ftadd,eval_poly@res
  5699  001E88  C018  F03A         	movff	?___ftadd+1,eval_poly@res+1
  5700  001E8C  C019  F03B         	movff	?___ftadd+2,eval_poly@res+2
  5701  001E90                     l4167:
  5702  001E90  FFFF               	dw	65535	; assembler added errata NOP
  5703  001E92  5036               	movf	eval_poly@n,w,c
  5704  001E94  1037               	iorwf	eval_poly@n+1,w,c
  5705  001E96  E1C8               	bnz	l4165
  5706  001E98  C039  F032         	movff	eval_poly@res,?_eval_poly
  5707  001E9C  C03A  F033         	movff	eval_poly@res+1,?_eval_poly+1
  5708  001EA0  C03B  F034         	movff	eval_poly@res+2,?_eval_poly+2
  5709  001EA4  0012               	return		;funcret
  5710  001EA6  FFFF               	dw	65535	; errata NOP
  5711  001EA8                     __end_of_eval_poly:
  5712                           	opt stack 0
  5713                           tosu	equ	0xFFF
  5714                           tosh	equ	0xFFE
  5715                           tosl	equ	0xFFD
  5716                           pclath	equ	0xFFA
  5717                           tblptru	equ	0xFF8
  5718                           tblptrh	equ	0xFF7
  5719                           tblptrl	equ	0xFF6
  5720                           tablat	equ	0xFF5
  5721                           prodl	equ	0xFF3
  5722                           intcon	equ	0xFF2
  5723                           intcon2	equ	0xFF1
  5724                           postinc0	equ	0xFEE
  5725                           wreg	equ	0xFE8
  5726                           postdec1	equ	0xFE5
  5727                           fsr1l	equ	0xFE1
  5728                           postinc2	equ	0xFDE
  5729                           postdec2	equ	0xFDD
  5730                           fsr2h	equ	0xFDA
  5731                           fsr2l	equ	0xFD9
  5732                           status	equ	0xFD8
  5733                           
  5734 ;; *************** function ___ftmul *****************
  5735 ;; Defined at:
  5736 ;;		line 62 in file "/opt/microchip/xc8/v1.45/sources/common/ftmul.c"
  5737 ;; Parameters:    Size  Location     Type
  5738 ;;  f1              3   34[COMRAM] float 
  5739 ;;  f2              3   37[COMRAM] float 
  5740 ;; Auto vars:     Size  Location     Type
  5741 ;;  f3_as_produc    3   44[COMRAM] unsigned um
  5742 ;;  sign            1   48[COMRAM] unsigned char 
  5743 ;;  cntr            1   47[COMRAM] unsigned char 
  5744 ;;  exp             1   43[COMRAM] unsigned char 
  5745 ;; Return value:  Size  Location     Type
  5746 ;;                  3   34[COMRAM] float 
  5747 ;; Registers used:
  5748 ;;		wreg, status,2, status,0, cstack
  5749 ;; Tracked objects:
  5750 ;;		On entry : 0/0
  5751 ;;		On exit  : 0/0
  5752 ;;		Unchanged: 0/0
  5753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5754 ;;      Params:         6       0       0       0       0       0       0
  5755 ;;      Locals:         6       0       0       0       0       0       0
  5756 ;;      Temps:          3       0       0       0       0       0       0
  5757 ;;      Totals:        15       0       0       0       0       0       0
  5758 ;;Total ram usage:       15 bytes
  5759 ;; Hardware stack levels used:    1
  5760 ;; Hardware stack levels required when called:    3
  5761 ;; This function calls:
  5762 ;;		___ftpack
  5763 ;; This function is called by:
  5764 ;;		_measure_capacitance
  5765 ;;		_measure_inductance
  5766 ;;		_format_double
  5767 ;;		_log
  5768 ;;		_log10
  5769 ;;		_pow
  5770 ;;		_eval_poly
  5771 ;;		_exp
  5772 ;; This function uses a non-reentrant model
  5773 ;;
  5774                           
  5775                           	psect	text27
  5776  00190E                     __ptext27:
  5777                           	opt stack 0
  5778  00190E                     ___ftmul:
  5779                           	opt stack 0
  5780  00190E  FFFF               	dw	65535	; assembler added errata NOP
  5781                           
  5782                           ;incstack = 0
  5783  001910  C025  F029         	movff	___ftmul@f1+2,??___ftmul
  5784  001914  6A2A               	clrf	(??___ftmul+1)& (0+255),c
  5785  001916  6A2B               	clrf	(??___ftmul+2)& (0+255),c
  5786  001918  3424               	rlcf	___ftmul@f1+1,w,c
  5787  00191A  3629               	rlcf	??___ftmul& (0+255),f,c
  5788  00191C  E301               	bnc	u3451
  5789  00191E  802A               	bsf	(??___ftmul+1)& (0+255),0,c
  5790  001920                     u3451:
  5791  001920  5029               	movf	??___ftmul,w,c
  5792  001922  6E2C               	movwf	___ftmul@exp,c
  5793  001924  502C               	movf	___ftmul@exp,w,c
  5794  001926  E101               	bnz	l3903
  5795  001928  D00C               	goto	u3480
  5796  00192A                     l3903:
  5797  00192A  C028  F029         	movff	___ftmul@f2+2,??___ftmul
  5798  00192E  6A2A               	clrf	(??___ftmul+1)& (0+255),c
  5799  001930  6A2B               	clrf	(??___ftmul+2)& (0+255),c
  5800  001932  3427               	rlcf	___ftmul@f2+1,w,c
  5801  001934  3629               	rlcf	??___ftmul& (0+255),f,c
  5802  001936  E301               	bnc	u3471
  5803  001938  802A               	bsf	(??___ftmul+1)& (0+255),0,c
  5804  00193A                     u3471:
  5805  00193A  5029               	movf	??___ftmul,w,c
  5806  00193C  6E31               	movwf	___ftmul@sign,c
  5807  00193E  5031               	movf	___ftmul@sign,w,c
  5808  001940  E105               	bnz	l3907
  5809  001942                     u3480:
  5810  001942  FFFF               	dw	65535	; assembler added errata NOP
  5811  001944  6A23               	clrf	?___ftmul,c
  5812  001946  6A24               	clrf	?___ftmul+1,c
  5813  001948  6A25               	clrf	?___ftmul+2,c
  5814  00194A  D04E               	goto	l900
  5815  00194C                     l3907:
  5816  00194C  5031               	movf	___ftmul@sign,w,c
  5817  00194E  0F7B               	addlw	123
  5818  001950  262C               	addwf	___ftmul@exp,f,c
  5819  001952  C025  F031         	movff	___ftmul@f1+2,___ftmul@sign
  5820  001956  5028               	movf	___ftmul@f2+2,w,c
  5821  001958  1A31               	xorwf	___ftmul@sign,f,c
  5822  00195A  0E80               	movlw	128
  5823  00195C  1631               	andwf	___ftmul@sign,f,c
  5824  00195E  8E24               	bsf	___ftmul@f1+1,7,c
  5825  001960  8E27               	bsf	___ftmul@f2+1,7,c
  5826  001962  0E00               	movlw	0
  5827  001964  1628               	andwf	___ftmul@f2+2,f,c
  5828  001966  6A2D               	clrf	___ftmul@f3_as_product,c
  5829  001968  6A2E               	clrf	___ftmul@f3_as_product+1,c
  5830  00196A  6A2F               	clrf	___ftmul@f3_as_product+2,c
  5831  00196C  0E07               	movlw	7
  5832  00196E  6E30               	movwf	___ftmul@cntr,c
  5833  001970                     l3921:
  5834  001970  FFFF               	dw	65535	; assembler added errata NOP
  5835  001972  A023               	btfss	___ftmul@f1,0,c
  5836  001974  D006               	goto	l3925
  5837  001976  5026               	movf	___ftmul@f2,w,c
  5838  001978  262D               	addwf	___ftmul@f3_as_product,f,c
  5839  00197A  5027               	movf	___ftmul@f2+1,w,c
  5840  00197C  222E               	addwfc	___ftmul@f3_as_product+1,f,c
  5841  00197E  5028               	movf	___ftmul@f2+2,w,c
  5842  001980  222F               	addwfc	___ftmul@f3_as_product+2,f,c
  5843  001982                     l3925:
  5844  001982  FFFF               	dw	65535	; assembler added errata NOP
  5845  001984  90D8               	bcf	status,0,c
  5846  001986  3225               	rrcf	___ftmul@f1+2,f,c
  5847  001988  3224               	rrcf	___ftmul@f1+1,f,c
  5848  00198A  3223               	rrcf	___ftmul@f1,f,c
  5849  00198C  90D8               	bcf	status,0,c
  5850  00198E  3626               	rlcf	___ftmul@f2,f,c
  5851  001990  3627               	rlcf	___ftmul@f2+1,f,c
  5852  001992  3628               	rlcf	___ftmul@f2+2,f,c
  5853  001994  2E30               	decfsz	___ftmul@cntr,f,c
  5854  001996  D7EC               	goto	l3921
  5855  001998  0E09               	movlw	9
  5856  00199A  6E30               	movwf	___ftmul@cntr,c
  5857  00199C                     l3931:
  5858  00199C  FFFF               	dw	65535	; assembler added errata NOP
  5859  00199E  A023               	btfss	___ftmul@f1,0,c
  5860  0019A0  D006               	goto	l3935
  5861  0019A2  5026               	movf	___ftmul@f2,w,c
  5862  0019A4  262D               	addwf	___ftmul@f3_as_product,f,c
  5863  0019A6  5027               	movf	___ftmul@f2+1,w,c
  5864  0019A8  222E               	addwfc	___ftmul@f3_as_product+1,f,c
  5865  0019AA  5028               	movf	___ftmul@f2+2,w,c
  5866  0019AC  222F               	addwfc	___ftmul@f3_as_product+2,f,c
  5867  0019AE                     l3935:
  5868  0019AE  FFFF               	dw	65535	; assembler added errata NOP
  5869  0019B0  90D8               	bcf	status,0,c
  5870  0019B2  3225               	rrcf	___ftmul@f1+2,f,c
  5871  0019B4  3224               	rrcf	___ftmul@f1+1,f,c
  5872  0019B6  3223               	rrcf	___ftmul@f1,f,c
  5873  0019B8  90D8               	bcf	status,0,c
  5874  0019BA  322F               	rrcf	___ftmul@f3_as_product+2,f,c
  5875  0019BC  322E               	rrcf	___ftmul@f3_as_product+1,f,c
  5876  0019BE  322D               	rrcf	___ftmul@f3_as_product,f,c
  5877  0019C0  2E30               	decfsz	___ftmul@cntr,f,c
  5878  0019C2  D7EC               	goto	l3931
  5879  0019C4  C02D  F00B         	movff	___ftmul@f3_as_product,___ftpack@arg
  5880  0019C8  C02E  F00C         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5881  0019CC  C02F  F00D         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5882  0019D0  C02C  F00E         	movff	___ftmul@exp,___ftpack@exp
  5883  0019D4  C031  F00F         	movff	___ftmul@sign,___ftpack@sign
  5884  0019D8  ECF2  F00F         	call	___ftpack	;wreg free
  5885  0019DC  C00B  F023         	movff	?___ftpack,?___ftmul
  5886  0019E0  C00C  F024         	movff	?___ftpack+1,?___ftmul+1
  5887  0019E4  C00D  F025         	movff	?___ftpack+2,?___ftmul+2
  5888  0019E8                     l900:
  5889  0019E8  FFFF               	dw	65535	; assembler added errata NOP
  5890  0019EA  0012               	return		;funcret
  5891  0019EC  FFFF               	dw	65535	; errata NOP
  5892  0019EE                     __end_of___ftmul:
  5893                           	opt stack 0
  5894                           tosu	equ	0xFFF
  5895                           tosh	equ	0xFFE
  5896                           tosl	equ	0xFFD
  5897                           pclath	equ	0xFFA
  5898                           tblptru	equ	0xFF8
  5899                           tblptrh	equ	0xFF7
  5900                           tblptrl	equ	0xFF6
  5901                           tablat	equ	0xFF5
  5902                           prodl	equ	0xFF3
  5903                           intcon	equ	0xFF2
  5904                           intcon2	equ	0xFF1
  5905                           postinc0	equ	0xFEE
  5906                           wreg	equ	0xFE8
  5907                           postdec1	equ	0xFE5
  5908                           fsr1l	equ	0xFE1
  5909                           postinc2	equ	0xFDE
  5910                           postdec2	equ	0xFDD
  5911                           fsr2h	equ	0xFDA
  5912                           fsr2l	equ	0xFD9
  5913                           status	equ	0xFD8
  5914                           
  5915 ;; *************** function ___ftadd *****************
  5916 ;; Defined at:
  5917 ;;		line 86 in file "/opt/microchip/xc8/v1.45/sources/common/ftadd.c"
  5918 ;; Parameters:    Size  Location     Type
  5919 ;;  f1              3   22[COMRAM] float 
  5920 ;;  f2              3   25[COMRAM] float 
  5921 ;; Auto vars:     Size  Location     Type
  5922 ;;  exp1            1   33[COMRAM] unsigned char 
  5923 ;;  exp2            1   32[COMRAM] unsigned char 
  5924 ;;  sign            1   31[COMRAM] unsigned char 
  5925 ;; Return value:  Size  Location     Type
  5926 ;;                  3   22[COMRAM] float 
  5927 ;; Registers used:
  5928 ;;		wreg, status,2, status,0, cstack
  5929 ;; Tracked objects:
  5930 ;;		On entry : 0/0
  5931 ;;		On exit  : 0/0
  5932 ;;		Unchanged: 0/0
  5933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5934 ;;      Params:         6       0       0       0       0       0       0
  5935 ;;      Locals:         3       0       0       0       0       0       0
  5936 ;;      Temps:          3       0       0       0       0       0       0
  5937 ;;      Totals:        12       0       0       0       0       0       0
  5938 ;;Total ram usage:       12 bytes
  5939 ;; Hardware stack levels used:    1
  5940 ;; Hardware stack levels required when called:    3
  5941 ;; This function calls:
  5942 ;;		___ftpack
  5943 ;; This function is called by:
  5944 ;;		_floor
  5945 ;;		___ftsub
  5946 ;;		_log
  5947 ;;		_eval_poly
  5948 ;; This function uses a non-reentrant model
  5949 ;;
  5950                           
  5951                           	psect	text28
  5952  001222                     __ptext28:
  5953                           	opt stack 0
  5954  001222                     ___ftadd:
  5955                           	opt stack 0
  5956  001222  FFFF               	dw	65535	; assembler added errata NOP
  5957                           
  5958                           ;incstack = 0
  5959  001224  C019  F01D         	movff	___ftadd@f1+2,??___ftadd
  5960  001228  6A1E               	clrf	(??___ftadd+1)& (0+255),c
  5961  00122A  6A1F               	clrf	(??___ftadd+2)& (0+255),c
  5962  00122C  3418               	rlcf	___ftadd@f1+1,w,c
  5963  00122E  361D               	rlcf	??___ftadd& (0+255),f,c
  5964  001230  E301               	bnc	u3241
  5965  001232  801E               	bsf	(??___ftadd+1)& (0+255),0,c
  5966  001234                     u3241:
  5967  001234  501D               	movf	??___ftadd,w,c
  5968  001236  6E22               	movwf	___ftadd@exp1,c
  5969  001238  C01C  F01D         	movff	___ftadd@f2+2,??___ftadd
  5970  00123C  6A1E               	clrf	(??___ftadd+1)& (0+255),c
  5971  00123E  6A1F               	clrf	(??___ftadd+2)& (0+255),c
  5972  001240  341B               	rlcf	___ftadd@f2+1,w,c
  5973  001242  361D               	rlcf	??___ftadd& (0+255),f,c
  5974  001244  E301               	bnc	u3251
  5975  001246  801E               	bsf	(??___ftadd+1)& (0+255),0,c
  5976  001248                     u3251:
  5977  001248  501D               	movf	??___ftadd,w,c
  5978  00124A  6E21               	movwf	___ftadd@exp2,c
  5979  00124C  5022               	movf	___ftadd@exp1,w,c
  5980  00124E  E009               	bz	u3280
  5981  001250  5021               	movf	___ftadd@exp2,w,c
  5982  001252  5C22               	subwf	___ftadd@exp1,w,c
  5983  001254  E20D               	bc	l3843
  5984  001256  5022               	movf	___ftadd@exp1,w,c
  5985  001258  5C21               	subwf	___ftadd@exp2,w,c
  5986  00125A  6E1D               	movwf	??___ftadd& (0+255),c
  5987  00125C  0E18               	movlw	24
  5988  00125E  641D               	cpfsgt	??___ftadd,c
  5989  001260  D007               	goto	l3843
  5990  001262                     u3280:
  5991  001262  C01A  F017         	movff	___ftadd@f2,?___ftadd
  5992  001266  C01B  F018         	movff	___ftadd@f2+1,?___ftadd+1
  5993  00126A  C01C  F019         	movff	___ftadd@f2+2,?___ftadd+2
  5994  00126E  D08F               	goto	l854
  5995  001270                     l3843:
  5996  001270  FFFF               	dw	65535	; assembler added errata NOP
  5997  001272  5021               	movf	___ftadd@exp2,w,c
  5998  001274  E009               	bz	u3310
  5999  001276  5022               	movf	___ftadd@exp1,w,c
  6000  001278  5C21               	subwf	___ftadd@exp2,w,c
  6001  00127A  E20D               	bc	l3849
  6002  00127C  5021               	movf	___ftadd@exp2,w,c
  6003  00127E  5C22               	subwf	___ftadd@exp1,w,c
  6004  001280  6E1D               	movwf	??___ftadd& (0+255),c
  6005  001282  0E18               	movlw	24
  6006  001284  641D               	cpfsgt	??___ftadd,c
  6007  001286  D007               	goto	l3849
  6008  001288                     u3310:
  6009  001288  C017  F017         	movff	___ftadd@f1,?___ftadd
  6010  00128C  C018  F018         	movff	___ftadd@f1+1,?___ftadd+1
  6011  001290  C019  F019         	movff	___ftadd@f1+2,?___ftadd+2
  6012  001294  D07C               	goto	l854
  6013  001296                     l3849:
  6014  001296  FFFF               	dw	65535	; assembler added errata NOP
  6015  001298  0E06               	movlw	6
  6016  00129A  6E20               	movwf	___ftadd@sign,c
  6017  00129C  BE19               	btfsc	___ftadd@f1+2,7,c
  6018  00129E  8E20               	bsf	___ftadd@sign,7,c
  6019  0012A0  BE1C               	btfsc	___ftadd@f2+2,7,c
  6020  0012A2  8C20               	bsf	___ftadd@sign,6,c
  6021  0012A4  8E18               	bsf	___ftadd@f1+1,7,c
  6022  0012A6  6A19               	clrf	___ftadd@f1+2,c
  6023  0012A8  8E1B               	bsf	___ftadd@f2+1,7,c
  6024  0012AA  6A1C               	clrf	___ftadd@f2+2,c
  6025  0012AC  5021               	movf	___ftadd@exp2,w,c
  6026  0012AE  5C22               	subwf	___ftadd@exp1,w,c
  6027  0012B0  E21A               	bc	l3875
  6028  0012B2                     u3340:
  6029  0012B2  FFFF               	dw	65535	; assembler added errata NOP
  6030  0012B4  90D8               	bcf	status,0,c
  6031  0012B6  361A               	rlcf	___ftadd@f2,f,c
  6032  0012B8  361B               	rlcf	___ftadd@f2+1,f,c
  6033  0012BA  361C               	rlcf	___ftadd@f2+2,f,c
  6034  0012BC  0621               	decf	___ftadd@exp2,f,c
  6035  0012BE  5022               	movf	___ftadd@exp1,w,c
  6036  0012C0  1821               	xorwf	___ftadd@exp2,w,c
  6037  0012C2  E00D               	bz	l3873
  6038  0012C4  0620               	decf	___ftadd@sign,f,c
  6039  0012C6  C020  F01D         	movff	___ftadd@sign,??___ftadd
  6040  0012CA  0E07               	movlw	7
  6041  0012CC  161D               	andwf	??___ftadd,f,c
  6042  0012CE  E007               	bz	l3873
  6043  0012D0  D7F0               	goto	u3340
  6044  0012D2                     l3871:
  6045  0012D2  FFFF               	dw	65535	; assembler added errata NOP
  6046  0012D4  90D8               	bcf	status,0,c
  6047  0012D6  3219               	rrcf	___ftadd@f1+2,f,c
  6048  0012D8  3218               	rrcf	___ftadd@f1+1,f,c
  6049  0012DA  3217               	rrcf	___ftadd@f1,f,c
  6050  0012DC  2A22               	incf	___ftadd@exp1,f,c
  6051  0012DE                     l3873:
  6052  0012DE  5021               	movf	___ftadd@exp2,w,c
  6053  0012E0  1822               	xorwf	___ftadd@exp1,w,c
  6054  0012E2  E01C               	bz	u3410
  6055  0012E4  D7F6               	goto	l3871
  6056  0012E6                     l3875:
  6057  0012E6  5022               	movf	___ftadd@exp1,w,c
  6058  0012E8  5C21               	subwf	___ftadd@exp2,w,c
  6059  0012EA  E218               	bc	u3410
  6060  0012EC                     u3380:
  6061  0012EC  FFFF               	dw	65535	; assembler added errata NOP
  6062  0012EE  90D8               	bcf	status,0,c
  6063  0012F0  3617               	rlcf	___ftadd@f1,f,c
  6064  0012F2  3618               	rlcf	___ftadd@f1+1,f,c
  6065  0012F4  3619               	rlcf	___ftadd@f1+2,f,c
  6066  0012F6  0622               	decf	___ftadd@exp1,f,c
  6067  0012F8  5022               	movf	___ftadd@exp1,w,c
  6068  0012FA  1821               	xorwf	___ftadd@exp2,w,c
  6069  0012FC  E00C               	bz	l3885
  6070  0012FE  0620               	decf	___ftadd@sign,f,c
  6071  001300  C020  F01D         	movff	___ftadd@sign,??___ftadd
  6072  001304  0E07               	movlw	7
  6073  001306  161D               	andwf	??___ftadd,f,c
  6074  001308  E006               	bz	l3885
  6075  00130A  D7F0               	goto	u3380
  6076  00130C                     l3883:
  6077  00130C  90D8               	bcf	status,0,c
  6078  00130E  321C               	rrcf	___ftadd@f2+2,f,c
  6079  001310  321B               	rrcf	___ftadd@f2+1,f,c
  6080  001312  321A               	rrcf	___ftadd@f2,f,c
  6081  001314  2A21               	incf	___ftadd@exp2,f,c
  6082  001316                     l3885:
  6083  001316  5021               	movf	___ftadd@exp2,w,c
  6084  001318  1822               	xorwf	___ftadd@exp1,w,c
  6085  00131A  E1F8               	bnz	l3883
  6086  00131C                     u3410:
  6087  00131C  AE20               	btfss	___ftadd@sign,7,c
  6088  00131E  D007               	goto	l877
  6089  001320  1E17               	comf	___ftadd@f1,f,c
  6090  001322  1E18               	comf	___ftadd@f1+1,f,c
  6091  001324  1E19               	comf	___ftadd@f1+2,f,c
  6092  001326  2A17               	incf	___ftadd@f1,f,c
  6093  001328  0E00               	movlw	0
  6094  00132A  2218               	addwfc	___ftadd@f1+1,f,c
  6095  00132C  2219               	addwfc	___ftadd@f1+2,f,c
  6096  00132E                     l877:
  6097  00132E  FFFF               	dw	65535	; assembler added errata NOP
  6098  001330  AC20               	btfss	___ftadd@sign,6,c
  6099  001332  D007               	goto	l878
  6100  001334  1E1A               	comf	___ftadd@f2,f,c
  6101  001336  1E1B               	comf	___ftadd@f2+1,f,c
  6102  001338  1E1C               	comf	___ftadd@f2+2,f,c
  6103  00133A  2A1A               	incf	___ftadd@f2,f,c
  6104  00133C  0E00               	movlw	0
  6105  00133E  221B               	addwfc	___ftadd@f2+1,f,c
  6106  001340  221C               	addwfc	___ftadd@f2+2,f,c
  6107  001342                     l878:
  6108  001342  FFFF               	dw	65535	; assembler added errata NOP
  6109  001344  6A20               	clrf	___ftadd@sign,c
  6110  001346  5017               	movf	___ftadd@f1,w,c
  6111  001348  261A               	addwf	___ftadd@f2,f,c
  6112  00134A  5018               	movf	___ftadd@f1+1,w,c
  6113  00134C  221B               	addwfc	___ftadd@f2+1,f,c
  6114  00134E  5019               	movf	___ftadd@f1+2,w,c
  6115  001350  221C               	addwfc	___ftadd@f2+2,f,c
  6116  001352  AE1C               	btfss	___ftadd@f2+2,7,c
  6117  001354  D009               	goto	l3895
  6118  001356  1E1A               	comf	___ftadd@f2,f,c
  6119  001358  1E1B               	comf	___ftadd@f2+1,f,c
  6120  00135A  1E1C               	comf	___ftadd@f2+2,f,c
  6121  00135C  2A1A               	incf	___ftadd@f2,f,c
  6122  00135E  0E00               	movlw	0
  6123  001360  221B               	addwfc	___ftadd@f2+1,f,c
  6124  001362  221C               	addwfc	___ftadd@f2+2,f,c
  6125  001364  0E01               	movlw	1
  6126  001366  6E20               	movwf	___ftadd@sign,c
  6127  001368                     l3895:
  6128  001368  FFFF               	dw	65535	; assembler added errata NOP
  6129  00136A  C01A  F00B         	movff	___ftadd@f2,___ftpack@arg
  6130  00136E  C01B  F00C         	movff	___ftadd@f2+1,___ftpack@arg+1
  6131  001372  C01C  F00D         	movff	___ftadd@f2+2,___ftpack@arg+2
  6132  001376  C022  F00E         	movff	___ftadd@exp1,___ftpack@exp
  6133  00137A  C020  F00F         	movff	___ftadd@sign,___ftpack@sign
  6134  00137E  ECF2  F00F         	call	___ftpack	;wreg free
  6135  001382  C00B  F017         	movff	?___ftpack,?___ftadd
  6136  001386  C00C  F018         	movff	?___ftpack+1,?___ftadd+1
  6137  00138A  C00D  F019         	movff	?___ftpack+2,?___ftadd+2
  6138  00138E                     l854:
  6139  00138E  FFFF               	dw	65535	; assembler added errata NOP
  6140  001390  0012               	return		;funcret
  6141  001392  FFFF               	dw	65535	; errata NOP
  6142  001394                     __end_of___ftadd:
  6143                           	opt stack 0
  6144                           tosu	equ	0xFFF
  6145                           tosh	equ	0xFFE
  6146                           tosl	equ	0xFFD
  6147                           pclath	equ	0xFFA
  6148                           tblptru	equ	0xFF8
  6149                           tblptrh	equ	0xFF7
  6150                           tblptrl	equ	0xFF6
  6151                           tablat	equ	0xFF5
  6152                           prodl	equ	0xFF3
  6153                           intcon	equ	0xFF2
  6154                           intcon2	equ	0xFF1
  6155                           postinc0	equ	0xFEE
  6156                           wreg	equ	0xFE8
  6157                           postdec1	equ	0xFE5
  6158                           fsr1l	equ	0xFE1
  6159                           postinc2	equ	0xFDE
  6160                           postdec2	equ	0xFDD
  6161                           fsr2h	equ	0xFDA
  6162                           fsr2l	equ	0xFD9
  6163                           status	equ	0xFD8
  6164                           
  6165 ;; *************** function ___awtoft *****************
  6166 ;; Defined at:
  6167 ;;		line 32 in file "/opt/microchip/xc8/v1.45/sources/common/awtoft.c"
  6168 ;; Parameters:    Size  Location     Type
  6169 ;;  c               2   18[COMRAM] int 
  6170 ;; Auto vars:     Size  Location     Type
  6171 ;;  sign            1   21[COMRAM] unsigned char 
  6172 ;; Return value:  Size  Location     Type
  6173 ;;                  3   18[COMRAM] float 
  6174 ;; Registers used:
  6175 ;;		wreg, status,2, status,0, cstack
  6176 ;; Tracked objects:
  6177 ;;		On entry : 0/0
  6178 ;;		On exit  : 0/0
  6179 ;;		Unchanged: 0/0
  6180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6181 ;;      Params:         3       0       0       0       0       0       0
  6182 ;;      Locals:         1       0       0       0       0       0       0
  6183 ;;      Temps:          0       0       0       0       0       0       0
  6184 ;;      Totals:         4       0       0       0       0       0       0
  6185 ;;Total ram usage:        4 bytes
  6186 ;; Hardware stack levels used:    1
  6187 ;; Hardware stack levels required when called:    3
  6188 ;; This function calls:
  6189 ;;		___ftpack
  6190 ;; This function is called by:
  6191 ;;		_format_double
  6192 ;;		_log
  6193 ;;		_exp
  6194 ;; This function uses a non-reentrant model
  6195 ;;
  6196                           
  6197                           	psect	text29
  6198  0025C4                     __ptext29:
  6199                           	opt stack 0
  6200  0025C4                     ___awtoft:
  6201                           	opt stack 0
  6202  0025C4  FFFF               	dw	65535	; assembler added errata NOP
  6203                           
  6204                           ;incstack = 0
  6205  0025C6  6A16               	clrf	___awtoft@sign,c
  6206  0025C8  AE14               	btfss	___awtoft@c+1,7,c
  6207  0025CA  D006               	goto	l4125
  6208  0025CC  6C13               	negf	___awtoft@c,c
  6209  0025CE  1E14               	comf	___awtoft@c+1,f,c
  6210  0025D0  B0D8               	btfsc	status,0,c
  6211  0025D2  2A14               	incf	___awtoft@c+1,f,c
  6212  0025D4  0E01               	movlw	1
  6213  0025D6  6E16               	movwf	___awtoft@sign,c
  6214  0025D8                     l4125:
  6215  0025D8  FFFF               	dw	65535	; assembler added errata NOP
  6216  0025DA  C013  F00B         	movff	___awtoft@c,___ftpack@arg
  6217  0025DE  C014  F00C         	movff	___awtoft@c+1,___ftpack@arg+1
  6218  0025E2  6A0D               	clrf	___ftpack@arg+2,c
  6219  0025E4  0E8E               	movlw	142
  6220  0025E6  6E0E               	movwf	___ftpack@exp,c
  6221  0025E8  C016  F00F         	movff	___awtoft@sign,___ftpack@sign
  6222  0025EC  ECF2  F00F         	call	___ftpack	;wreg free
  6223  0025F0  C00B  F013         	movff	?___ftpack,?___awtoft
  6224  0025F4  C00C  F014         	movff	?___ftpack+1,?___awtoft+1
  6225  0025F8  C00D  F015         	movff	?___ftpack+2,?___awtoft+2
  6226  0025FC  0012               	return		;funcret
  6227  0025FE  FFFF               	dw	65535	; errata NOP
  6228  002600                     __end_of___awtoft:
  6229                           	opt stack 0
  6230                           tosu	equ	0xFFF
  6231                           tosh	equ	0xFFE
  6232                           tosl	equ	0xFFD
  6233                           pclath	equ	0xFFA
  6234                           tblptru	equ	0xFF8
  6235                           tblptrh	equ	0xFF7
  6236                           tblptrl	equ	0xFF6
  6237                           tablat	equ	0xFF5
  6238                           prodl	equ	0xFF3
  6239                           intcon	equ	0xFF2
  6240                           intcon2	equ	0xFF1
  6241                           postinc0	equ	0xFEE
  6242                           wreg	equ	0xFE8
  6243                           postdec1	equ	0xFE5
  6244                           fsr1l	equ	0xFE1
  6245                           postinc2	equ	0xFDE
  6246                           postdec2	equ	0xFDD
  6247                           fsr2h	equ	0xFDA
  6248                           fsr2l	equ	0xFD9
  6249                           status	equ	0xFD8
  6250                           
  6251 ;; *************** function _lcd_init *****************
  6252 ;; Defined at:
  6253 ;;		line 489 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../lib/lcd44780.c"
  6254 ;; Parameters:    Size  Location     Type
  6255 ;;  fourbitmode     1    wreg     unsigned char 
  6256 ;; Auto vars:     Size  Location     Type
  6257 ;;  fourbitmode     1   10[COMRAM] unsigned char 
  6258 ;; Return value:  Size  Location     Type
  6259 ;;                  1    wreg      void 
  6260 ;; Registers used:
  6261 ;;		wreg, status,2, status,0
  6262 ;; Tracked objects:
  6263 ;;		On entry : 0/0
  6264 ;;		On exit  : 0/0
  6265 ;;		Unchanged: 0/0
  6266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6267 ;;      Params:         0       0       0       0       0       0       0
  6268 ;;      Locals:         3       0       0       0       0       0       0
  6269 ;;      Temps:          0       0       0       0       0       0       0
  6270 ;;      Totals:         3       0       0       0       0       0       0
  6271 ;;Total ram usage:        3 bytes
  6272 ;; Hardware stack levels used:    1
  6273 ;; Hardware stack levels required when called:    2
  6274 ;; This function calls:
  6275 ;;		Nothing
  6276 ;; This function is called by:
  6277 ;;		_main
  6278 ;; This function uses a non-reentrant model
  6279 ;;
  6280                           
  6281                           	psect	text30
  6282  0026A8                     __ptext30:
  6283                           	opt stack 0
  6284  0026A8                     _lcd_init:
  6285                           	opt stack 0
  6286  0026A8  FFFF               	dw	65535	; assembler added errata NOP
  6287                           
  6288                           ;incstack = 0
  6289                           ;lcd_init@fourbitmode stored from wreg
  6290  0026AA  6E0B               	movwf	lcd_init@fourbitmode,c
  6291                           
  6292                           ;lcd44780.c: 491: LCD_ctrl = 0;
  6293  0026AC  6A6A               	clrf	_LCD_ctrl,c
  6294                           
  6295                           ;lcd44780.c: 492: LCD_function = (fourbitmode ? 0x00 : 0x10);
  6296  0026AE  500B               	movf	lcd_init@fourbitmode,w,c
  6297  0026B0  E104               	bnz	l493
  6298  0026B2  6A0D               	clrf	_lcd_init$762+1,c
  6299  0026B4  0E10               	movlw	16
  6300  0026B6  6E0C               	movwf	_lcd_init$762,c
  6301  0026B8  D002               	goto	l495
  6302  0026BA                     l493:
  6303  0026BA  6A0C               	clrf	_lcd_init$762,c
  6304  0026BC  6A0D               	clrf	_lcd_init$762+1,c
  6305  0026BE                     l495:
  6306  0026BE  FFFF               	dw	65535	; assembler added errata NOP
  6307  0026C0  C00C  F06B         	movff	_lcd_init$762,_LCD_function
  6308                           
  6309                           ;lcd44780.c: 493: LCD_lines = 0;
  6310  0026C4  6A68               	clrf	_LCD_lines,c
  6311                           
  6312                           ;lcd44780.c: 494: LCD_mode = 0;
  6313  0026C6  6A69               	clrf	_LCD_mode,c
  6314                           
  6315                           ;lcd44780.c: 498: TRISB &= ~0b0100;
  6316  0026C8  9493               	bcf	3987,2,c	;volatile
  6317                           
  6318                           ;lcd44780.c: 499: LATB &= ~0b0100;
  6319  0026CA  948A               	bcf	3978,2,c	;volatile
  6320                           
  6321                           ;lcd44780.c: 504: TRISB &= ~0b1000;
  6322  0026CC  9693               	bcf	3987,3,c	;volatile
  6323                           
  6324                           ;lcd44780.c: 505: LATB &= ~0b1000;
  6325  0026CE  968A               	bcf	3978,3,c	;volatile
  6326                           
  6327                           ;lcd44780.c: 507: LATB &= ~0b11110000;
  6328  0026D0  0E0F               	movlw	15
  6329  0026D2  168A               	andwf	3978,f,c	;volatile
  6330  0026D4  0C0F               	retlw	15	;funcret
  6331  0026D6  FFFF               	dw	65535	; errata NOP
  6332  0026D8                     __end_of_lcd_init:
  6333                           	opt stack 0
  6334                           tosu	equ	0xFFF
  6335                           tosh	equ	0xFFE
  6336                           tosl	equ	0xFFD
  6337                           pclath	equ	0xFFA
  6338                           tblptru	equ	0xFF8
  6339                           tblptrh	equ	0xFF7
  6340                           tblptrl	equ	0xFF6
  6341                           tablat	equ	0xFF5
  6342                           prodl	equ	0xFF3
  6343                           intcon	equ	0xFF2
  6344                           intcon2	equ	0xFF1
  6345                           postinc0	equ	0xFEE
  6346                           wreg	equ	0xFE8
  6347                           postdec1	equ	0xFE5
  6348                           fsr1l	equ	0xFE1
  6349                           postinc2	equ	0xFDE
  6350                           postdec2	equ	0xFDD
  6351                           fsr2h	equ	0xFDA
  6352                           fsr2l	equ	0xFD9
  6353                           status	equ	0xFD8
  6354                           
  6355 ;; *************** function _lcd_begin *****************
  6356 ;; Defined at:
  6357 ;;		line 416 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../lib/lcd44780.c"
  6358 ;; Parameters:    Size  Location     Type
  6359 ;;  lines           1    wreg     unsigned char 
  6360 ;;  dotsize         1   14[COMRAM] unsigned char 
  6361 ;; Auto vars:     Size  Location     Type
  6362 ;;  lines           1   16[COMRAM] unsigned char 
  6363 ;; Return value:  Size  Location     Type
  6364 ;;                  1    wreg      void 
  6365 ;; Registers used:
  6366 ;;		wreg, status,2, status,0, cstack
  6367 ;; Tracked objects:
  6368 ;;		On entry : 0/0
  6369 ;;		On exit  : 0/0
  6370 ;;		Unchanged: 0/0
  6371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6372 ;;      Params:         1       0       0       0       0       0       0
  6373 ;;      Locals:         1       0       0       0       0       0       0
  6374 ;;      Temps:          1       0       0       0       0       0       0
  6375 ;;      Totals:         3       0       0       0       0       0       0
  6376 ;;Total ram usage:        3 bytes
  6377 ;; Hardware stack levels used:    1
  6378 ;; Hardware stack levels required when called:    5
  6379 ;; This function calls:
  6380 ;;		_lcd_command
  6381 ;;		_lcd_write4bits
  6382 ;; This function is called by:
  6383 ;;		_main
  6384 ;; This function uses a non-reentrant model
  6385 ;;
  6386                           
  6387                           	psect	text31
  6388  001824                     __ptext31:
  6389                           	opt stack 0
  6390  001824                     _lcd_begin:
  6391                           	opt stack 0
  6392  001824  FFFF               	dw	65535	; assembler added errata NOP
  6393                           
  6394                           ;incstack = 0
  6395                           ;lcd_begin@lines stored from wreg
  6396  001826  6E11               	movwf	lcd_begin@lines,c
  6397                           
  6398                           ;lcd44780.c: 417: if(lines > 1)
  6399  001828  0E01               	movlw	1
  6400  00182A  6411               	cpfsgt	lcd_begin@lines,c
  6401  00182C  D001               	goto	l4591
  6402                           
  6403                           ;lcd44780.c: 418: LCD_function |= 0x08;
  6404  00182E  866B               	bsf	_LCD_function,3,c
  6405  001830                     l4591:
  6406  001830  FFFF               	dw	65535	; assembler added errata NOP
  6407                           
  6408                           ;lcd44780.c: 421: LCD_lines = lines;
  6409  001832  C011  F068         	movff	lcd_begin@lines,_LCD_lines
  6410                           
  6411                           ;lcd44780.c: 425: if((dotsize != 0) && (lines == 1))
  6412  001836  500F               	movf	lcd_begin@dotsize,w,c
  6413  001838  E003               	bz	l4599
  6414  00183A  0411               	decf	lcd_begin@lines,w,c
  6415  00183C  E101               	bnz	l4599
  6416                           
  6417                           ;lcd44780.c: 426: LCD_function |= 0x04;
  6418  00183E  846B               	bsf	_LCD_function,2,c
  6419  001840                     l4599:
  6420                           
  6421                           ;lcd44780.c: 428: _delay((unsigned long)((15)*(20000000/4000.0)));
  6422  001840  0E4A               	movlw	74
  6423  001842  6E10               	movwf	??_lcd_begin& (0+255),c
  6424  001844  0E18               	movlw	24
  6425  001846                     u4587:
  6426  001846  FFFF               	dw	65535	; errata NOP
  6427  001848  2EE8               	decfsz	wreg,f,c
  6428  00184A  D7FD               	bra	u4587
  6429  00184C  2E10               	decfsz	??_lcd_begin& (0+255),f,c
  6430  00184E  D7FB               	bra	u4587
  6431  001850  D000               	nop2	
  6432                           
  6433                           ;lcd44780.c: 431: LATB &= ~0b0100;
  6434  001852  948A               	bcf	3978,2,c	;volatile
  6435                           
  6436                           ;lcd44780.c: 432: LATB &= ~0b1000;
  6437  001854  968A               	bcf	3978,3,c	;volatile
  6438                           
  6439                           ;lcd44780.c: 435: if(!(LCD_function & 0x10)) {
  6440  001856  B86B               	btfsc	_LCD_function,4,c
  6441  001858  D01F               	goto	l4617
  6442                           
  6443                           ;lcd44780.c: 439: lcd_write4bits(0x03);
  6444  00185A  0E03               	movlw	3
  6445  00185C  EC16  F014         	call	_lcd_write4bits
  6446                           
  6447                           ;lcd44780.c: 440: _delay((unsigned long)((5)*(20000000/4000.0)));
  6448  001860  0E19               	movlw	25
  6449  001862  6E10               	movwf	??_lcd_begin& (0+255),c
  6450  001864  0E5D               	movlw	93
  6451  001866                     u4597:
  6452  001866  FFFF               	dw	65535	; errata NOP
  6453  001868  2EE8               	decfsz	wreg,f,c
  6454  00186A  D7FD               	bra	u4597
  6455  00186C  2E10               	decfsz	??_lcd_begin& (0+255),f,c
  6456  00186E  D7FB               	bra	u4597
  6457                           
  6458                           ;lcd44780.c: 442: lcd_write4bits(0x03);
  6459  001870  0E03               	movlw	3
  6460  001872  EC16  F014         	call	_lcd_write4bits
  6461                           
  6462                           ;lcd44780.c: 443: _delay((unsigned long)((150)*(20000000/4000000.0)));
  6463  001876  0EBB               	movlw	187
  6464  001878                     u4607:
  6465  001878  FFFF               	dw	65535	; errata NOP
  6466  00187A  2EE8               	decfsz	wreg,f,c
  6467  00187C  D7FD               	bra	u4607
  6468  00187E  D000               	nop2	
  6469                           
  6470                           ;lcd44780.c: 445: lcd_write4bits(0x03);
  6471  001880  0E03               	movlw	3
  6472  001882  EC16  F014         	call	_lcd_write4bits
  6473                           
  6474                           ;lcd44780.c: 446: _delay((unsigned long)((150)*(20000000/4000000.0)));
  6475  001886  0EBB               	movlw	187
  6476  001888                     u4617:
  6477  001888  FFFF               	dw	65535	; errata NOP
  6478  00188A  2EE8               	decfsz	wreg,f,c
  6479  00188C  D7FD               	bra	u4617
  6480  00188E  D000               	nop2	
  6481                           
  6482                           ;lcd44780.c: 448: lcd_write4bits(0x02);
  6483  001890  0E02               	movlw	2
  6484  001892  EC16  F014         	call	_lcd_write4bits
  6485                           
  6486                           ;lcd44780.c: 449: }
  6487  001896  D01D               	goto	l4625
  6488  001898                     l4617:
  6489  001898  FFFF               	dw	65535	; assembler added errata NOP
  6490                           
  6491                           ;lcd44780.c: 451: else {
  6492                           ;lcd44780.c: 455: lcd_command(0x20 | LCD_function);
  6493  00189A  506B               	movf	_LCD_function,w,c
  6494  00189C  0920               	iorlw	32
  6495  00189E  EC70  F014         	call	_lcd_command
  6496                           
  6497                           ;lcd44780.c: 456: _delay((unsigned long)((5)*(20000000/4000.0)));
  6498  0018A2  0E19               	movlw	25
  6499  0018A4  6E10               	movwf	??_lcd_begin& (0+255),c
  6500  0018A6  0E5D               	movlw	93
  6501  0018A8                     u4627:
  6502  0018A8  FFFF               	dw	65535	; errata NOP
  6503  0018AA  2EE8               	decfsz	wreg,f,c
  6504  0018AC  D7FD               	bra	u4627
  6505  0018AE  2E10               	decfsz	??_lcd_begin& (0+255),f,c
  6506  0018B0  D7FB               	bra	u4627
  6507                           
  6508                           ;lcd44780.c: 459: lcd_command(0x20 | LCD_function);
  6509  0018B2  506B               	movf	_LCD_function,w,c
  6510  0018B4  0920               	iorlw	32
  6511  0018B6  EC70  F014         	call	_lcd_command
  6512                           
  6513                           ;lcd44780.c: 460: _delay((unsigned long)((5)*(20000000/4000.0)));
  6514  0018BA  0E19               	movlw	25
  6515  0018BC  6E10               	movwf	??_lcd_begin& (0+255),c
  6516  0018BE  0E5D               	movlw	93
  6517  0018C0                     u4637:
  6518  0018C0  FFFF               	dw	65535	; errata NOP
  6519  0018C2  2EE8               	decfsz	wreg,f,c
  6520  0018C4  D7FD               	bra	u4637
  6521  0018C6  2E10               	decfsz	??_lcd_begin& (0+255),f,c
  6522  0018C8  D7FB               	bra	u4637
  6523                           
  6524                           ;lcd44780.c: 464: lcd_command(0x20 | LCD_function);
  6525  0018CA  506B               	movf	_LCD_function,w,c
  6526  0018CC  0920               	iorlw	32
  6527  0018CE  EC70  F014         	call	_lcd_command
  6528  0018D2                     l4625:
  6529  0018D2  FFFF               	dw	65535	; assembler added errata NOP
  6530                           
  6531                           ;lcd44780.c: 465: }
  6532                           ;lcd44780.c: 468: lcd_command(0x20 | LCD_function);
  6533  0018D4  506B               	movf	_LCD_function,w,c
  6534  0018D6  0920               	iorlw	32
  6535  0018D8  EC70  F014         	call	_lcd_command
  6536                           
  6537                           ;lcd44780.c: 471: LCD_ctrl = 0x04 | 0x00 | 0x00;
  6538  0018DC  0E04               	movlw	4
  6539  0018DE  6E6A               	movwf	_LCD_ctrl,c
  6540                           
  6541                           ;lcd44780.c: 472: lcd_command(0x08 | LCD_ctrl);
  6542  0018E0  506A               	movf	_LCD_ctrl,w,c
  6543  0018E2  0908               	iorlw	8
  6544  0018E4  EC70  F014         	call	_lcd_command
  6545                           
  6546                           ;lcd44780.c: 475: lcd_command(0x01);
  6547  0018E8  0E01               	movlw	1
  6548  0018EA  EC70  F014         	call	_lcd_command
  6549                           
  6550                           ;lcd44780.c: 476: _delay((unsigned long)((2)*(20000000/4000.0)));
  6551  0018EE  0E0A               	movlw	10
  6552  0018F0  6E10               	movwf	??_lcd_begin& (0+255),c
  6553  0018F2  0EBE               	movlw	190
  6554  0018F4                     u4647:
  6555  0018F4  FFFF               	dw	65535	; errata NOP
  6556  0018F6  2EE8               	decfsz	wreg,f,c
  6557  0018F8  D7FD               	bra	u4647
  6558  0018FA  2E10               	decfsz	??_lcd_begin& (0+255),f,c
  6559  0018FC  D7FB               	bra	u4647
  6560  0018FE  D000               	nop2	
  6561                           
  6562                           ;lcd44780.c: 479: LCD_mode = 0x02 | 0x00;
  6563  001900  0E02               	movlw	2
  6564  001902  6E69               	movwf	_LCD_mode,c
  6565                           
  6566                           ;lcd44780.c: 481: lcd_command(0x04 | LCD_mode);
  6567  001904  5069               	movf	_LCD_mode,w,c
  6568  001906  0904               	iorlw	4
  6569  001908  EF70  F014         	goto	_lcd_command
  6570  00190C  FFFF               	dw	65535	; errata NOP
  6571  00190E                     __end_of_lcd_begin:
  6572                           	opt stack 0
  6573                           tosu	equ	0xFFF
  6574                           tosh	equ	0xFFE
  6575                           tosl	equ	0xFFD
  6576                           pclath	equ	0xFFA
  6577                           tblptru	equ	0xFF8
  6578                           tblptrh	equ	0xFF7
  6579                           tblptrl	equ	0xFF6
  6580                           tablat	equ	0xFF5
  6581                           prodl	equ	0xFF3
  6582                           intcon	equ	0xFF2
  6583                           intcon2	equ	0xFF1
  6584                           postinc0	equ	0xFEE
  6585                           wreg	equ	0xFE8
  6586                           postdec1	equ	0xFE5
  6587                           fsr1l	equ	0xFE1
  6588                           postinc2	equ	0xFDE
  6589                           postdec2	equ	0xFDD
  6590                           fsr2h	equ	0xFDA
  6591                           fsr2l	equ	0xFD9
  6592                           status	equ	0xFD8
  6593                           
  6594 ;; *************** function _calibrate *****************
  6595 ;; Defined at:
  6596 ;;		line 26 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../src/measure.c"
  6597 ;; Parameters:    Size  Location     Type
  6598 ;;		None
  6599 ;; Auto vars:     Size  Location     Type
  6600 ;;  i               1   70[COMRAM] unsigned char 
  6601 ;; Return value:  Size  Location     Type
  6602 ;;                  1    wreg      void 
  6603 ;; Registers used:
  6604 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, cstack
  6605 ;; Tracked objects:
  6606 ;;		On entry : 0/0
  6607 ;;		On exit  : 0/0
  6608 ;;		Unchanged: 0/0
  6609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6610 ;;      Params:         0       0       0       0       0       0       0
  6611 ;;      Locals:         1       0       0       0       0       0       0
  6612 ;;      Temps:          0       0       0       0       0       0       0
  6613 ;;      Totals:         1       0       0       0       0       0       0
  6614 ;;Total ram usage:        1 bytes
  6615 ;; Hardware stack levels used:    1
  6616 ;; Hardware stack levels required when called:    7
  6617 ;; This function calls:
  6618 ;;		___lwtoft
  6619 ;;		_delay10ms
  6620 ;;		_lcd_clear
  6621 ;;		_lcd_gotoxy
  6622 ;;		_lcd_putch
  6623 ;;		_measure_freq
  6624 ;;		_put_str
  6625 ;;		_ser_puts
  6626 ;; This function is called by:
  6627 ;;		_main
  6628 ;; This function uses a non-reentrant model
  6629 ;;
  6630                           
  6631                           	psect	text32
  6632  0019EE                     __ptext32:
  6633                           	opt stack 0
  6634  0019EE                     _calibrate:
  6635                           	opt stack 0
  6636  0019EE  FFFF               	dw	65535	; assembler added errata NOP
  6637                           
  6638                           ;measure.c: 27: uint8_t i;
  6639                           ;measure.c: 30: lcd_clear();
  6640                           
  6641                           ;incstack = 0
  6642  0019F0  EC48  F014         	call	_lcd_clear	;wreg free
  6643                           
  6644                           ;measure.c: 32: lcd_gotoxy(0, 0);
  6645  0019F4  0E00               	movlw	0
  6646  0019F6  6A0F               	clrf	lcd_gotoxy@row,c
  6647  0019F8  EC1D  F013         	call	_lcd_gotoxy
  6648                           
  6649                           ;measure.c: 33: put_str("Calibrating");
  6650  0019FC  0E76               	movlw	low STR_10
  6651  0019FE  6E0D               	movwf	put_str@s,c
  6652  001A00  ECA4  F012         	call	_put_str	;wreg free
  6653                           
  6654                           ;measure.c: 35: lcd_gotoxy(0, 1);
  6655  001A04  0E01               	movlw	1
  6656  001A06  6E0F               	movwf	lcd_gotoxy@row,c
  6657  001A08  0E00               	movlw	0
  6658  001A0A  EC1D  F013         	call	_lcd_gotoxy
  6659                           
  6660                           ;measure.c: 37: ser_puts("\r\n");
  6661  001A0E  0EE5               	movlw	low STR_4
  6662  001A10  6E0C               	movwf	ser_puts@s,c
  6663  001A12  EC84  F013         	call	_ser_puts	;wreg free
  6664                           
  6665                           ;measure.c: 38: put_str("please wait...");
  6666  001A16  0E5A               	movlw	low STR_12
  6667  001A18  6E0D               	movwf	put_str@s,c
  6668  001A1A  ECA4  F012         	call	_put_str	;wreg free
  6669                           
  6670                           ;measure.c: 42: LATC &= ~(1 << 5);
  6671  001A1E  9A8B               	bcf	3979,5,c	;volatile
  6672                           
  6673                           ;measure.c: 44: F1 = (double)measure_freq();
  6674  001A20  EC16  F00B         	call	_measure_freq	;wreg free
  6675  001A24  C03F  F044         	movff	?_measure_freq,___lwtoft@c
  6676  001A28  C040  F045         	movff	?_measure_freq+1,___lwtoft@c+1
  6677  001A2C  ECEF  F013         	call	___lwtoft	;wreg free
  6678  001A30  C044  F0B7         	movff	?___lwtoft,_F1
  6679  001A34  C045  F0B8         	movff	?___lwtoft+1,_F1+1
  6680  001A38  C046  F0B9         	movff	?___lwtoft+2,_F1+2
  6681                           
  6682                           ;measure.c: 45: delay10ms(50);
  6683  001A3C  0E32               	movlw	50
  6684  001A3E  EC7E  F014         	call	_delay10ms
  6685                           
  6686                           ;measure.c: 47: F1 = (double)measure_freq();
  6687  001A42  EC16  F00B         	call	_measure_freq	;wreg free
  6688  001A46  C03F  F044         	movff	?_measure_freq,___lwtoft@c
  6689  001A4A  C040  F045         	movff	?_measure_freq+1,___lwtoft@c+1
  6690  001A4E  ECEF  F013         	call	___lwtoft	;wreg free
  6691  001A52  C044  F0B7         	movff	?___lwtoft,_F1
  6692  001A56  C045  F0B8         	movff	?___lwtoft+1,_F1+1
  6693  001A5A  C046  F0B9         	movff	?___lwtoft+2,_F1+2
  6694                           
  6695                           ;measure.c: 48: LATC |= (1 << 5);
  6696  001A5E  8A8B               	bsf	3979,5,c	;volatile
  6697                           
  6698                           ;measure.c: 50: F2 = (double)measure_freq();
  6699  001A60  EC16  F00B         	call	_measure_freq	;wreg free
  6700  001A64  C03F  F044         	movff	?_measure_freq,___lwtoft@c
  6701  001A68  C040  F045         	movff	?_measure_freq+1,___lwtoft@c+1
  6702  001A6C  ECEF  F013         	call	___lwtoft	;wreg free
  6703  001A70  C044  F09F         	movff	?___lwtoft,_F2
  6704  001A74  C045  F0A0         	movff	?___lwtoft+1,_F2+1
  6705  001A78  C046  F0A1         	movff	?___lwtoft+2,_F2+2
  6706                           
  6707                           ;measure.c: 51: delay10ms(50);
  6708  001A7C  0E32               	movlw	50
  6709  001A7E  EC7E  F014         	call	_delay10ms
  6710                           
  6711                           ;measure.c: 53: F2 = (double)measure_freq();
  6712  001A82  EC16  F00B         	call	_measure_freq	;wreg free
  6713  001A86  C03F  F044         	movff	?_measure_freq,___lwtoft@c
  6714  001A8A  C040  F045         	movff	?_measure_freq+1,___lwtoft@c+1
  6715  001A8E  ECEF  F013         	call	___lwtoft	;wreg free
  6716  001A92  C044  F09F         	movff	?___lwtoft,_F2
  6717  001A96  C045  F0A0         	movff	?___lwtoft+1,_F2+1
  6718  001A9A  C046  F0A1         	movff	?___lwtoft+2,_F2+2
  6719                           
  6720                           ;measure.c: 54: LATC &= ~(1 << 5);
  6721  001A9E  9A8B               	bcf	3979,5,c	;volatile
  6722                           
  6723                           ;measure.c: 57: lcd_gotoxy(11, 0);
  6724  001AA0  6A0F               	clrf	lcd_gotoxy@row,c
  6725  001AA2  0E0B               	movlw	11
  6726  001AA4  EC1D  F013         	call	_lcd_gotoxy
  6727                           
  6728                           ;measure.c: 58: for(i = 0; i < 6; i++) {
  6729  001AA8  6A47               	clrf	calibrate@i,c
  6730  001AAA                     l4699:
  6731  001AAA  FFFF               	dw	65535	; assembler added errata NOP
  6732                           
  6733                           ;measure.c: 59: lcd_putch('=');
  6734  001AAC  0E3D               	movlw	61
  6735  001AAE  EC60  F014         	call	_lcd_putch
  6736                           
  6737                           ;measure.c: 61: delay10ms(28);
  6738  001AB2  0E1C               	movlw	28
  6739  001AB4  EC7E  F014         	call	_delay10ms
  6740  001AB8  2A47               	incf	calibrate@i,f,c
  6741  001ABA  0E05               	movlw	5
  6742  001ABC  6447               	cpfsgt	calibrate@i,c
  6743  001ABE  D7F5               	goto	l4699
  6744                           
  6745                           ;measure.c: 62: }
  6746                           ;measure.c: 65: ser_puts("\r\n");
  6747  001AC0  0EE5               	movlw	low STR_4
  6748  001AC2  6E0C               	movwf	ser_puts@s,c
  6749  001AC4  EF84  F013         	goto	_ser_puts	;wreg free
  6750  001AC8  FFFF               	dw	65535	; errata NOP
  6751  001ACA                     __end_of_calibrate:
  6752                           	opt stack 0
  6753                           tosu	equ	0xFFF
  6754                           tosh	equ	0xFFE
  6755                           tosl	equ	0xFFD
  6756                           pclath	equ	0xFFA
  6757                           tblptru	equ	0xFF8
  6758                           tblptrh	equ	0xFF7
  6759                           tblptrl	equ	0xFF6
  6760                           tablat	equ	0xFF5
  6761                           prodl	equ	0xFF3
  6762                           intcon	equ	0xFF2
  6763                           intcon2	equ	0xFF1
  6764                           postinc0	equ	0xFEE
  6765                           wreg	equ	0xFE8
  6766                           postdec1	equ	0xFE5
  6767                           fsr1l	equ	0xFE1
  6768                           postinc2	equ	0xFDE
  6769                           postdec2	equ	0xFDD
  6770                           fsr2h	equ	0xFDA
  6771                           fsr2l	equ	0xFD9
  6772                           status	equ	0xFD8
  6773                           
  6774 ;; *************** function _put_str *****************
  6775 ;; Defined at:
  6776 ;;		line 501 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../src/print.c"
  6777 ;; Parameters:    Size  Location     Type
  6778 ;;  s               1   12[COMRAM] PTR const unsigned char 
  6779 ;;		 -> STR_24(13), STR_15(10), STR_12(15), STR_10(12), 
  6780 ;; Auto vars:     Size  Location     Type
  6781 ;;  i               2   14[COMRAM] int 
  6782 ;; Return value:  Size  Location     Type
  6783 ;;                  1    wreg      void 
  6784 ;; Registers used:
  6785 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6786 ;; Tracked objects:
  6787 ;;		On entry : 0/0
  6788 ;;		On exit  : 0/0
  6789 ;;		Unchanged: 0/0
  6790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6791 ;;      Params:         1       0       0       0       0       0       0
  6792 ;;      Locals:         2       0       0       0       0       0       0
  6793 ;;      Temps:          1       0       0       0       0       0       0
  6794 ;;      Totals:         4       0       0       0       0       0       0
  6795 ;;Total ram usage:        4 bytes
  6796 ;; Hardware stack levels used:    1
  6797 ;; Hardware stack levels required when called:    6
  6798 ;; This function calls:
  6799 ;;		_output_putch
  6800 ;; This function is called by:
  6801 ;;		_calibrate
  6802 ;;		_measure_capacitance
  6803 ;;		_measure_inductance
  6804 ;; This function uses a non-reentrant model
  6805 ;;
  6806                           
  6807                           	psect	text33
  6808  002548                     __ptext33:
  6809                           	opt stack 0
  6810  002548                     _put_str:
  6811                           	opt stack 0
  6812  002548  FFFF               	dw	65535	; assembler added errata NOP
  6813                           
  6814                           ;print.c: 502: int i;
  6815                           ;print.c: 504: for(i = 0; s[i]; i++) {
  6816                           
  6817                           ;incstack = 0
  6818  00254A  6A0F               	clrf	put_str@i,c
  6819  00254C  6A10               	clrf	put_str@i+1,c
  6820  00254E  D00E               	goto	l4455
  6821  002550                     l4451:
  6822                           
  6823                           ;print.c: 505: output_putch(s[i]);
  6824  002550  500D               	movf	put_str@s,w,c
  6825  002552  240F               	addwf	put_str@i,w,c
  6826  002554  6E0E               	movwf	??_put_str& (0+255),c
  6827  002556  C00E  FFF6         	movff	??_put_str,tblptrl
  6828  00255A                     	if	1	;There is more than 1 active tblptr byte
  6829  00255A  0E06               	movlw	high __smallconst
  6830  00255C  6EF7               	movwf	tblptrh,c
  6831  00255E                     	endif
  6832  00255E                     	if	0	;tblptru may be non-zero
  6833  00255E                     	endif
  6834  00255E                     	if	0	;tblptru may be non-zero
  6835  00255E                     	endif
  6836  00255E  0008               	tblrd		*
  6837  002560  FFFF               	dw	65535	; errata NOP
  6838  002562  50F5               	movf	tablat,w,c
  6839  002564  EC57  F014         	call	_output_putch
  6840  002568  4A0F               	infsnz	put_str@i,f,c
  6841  00256A  2A10               	incf	put_str@i+1,f,c
  6842  00256C                     l4455:
  6843  00256C  FFFF               	dw	65535	; assembler added errata NOP
  6844  00256E  500D               	movf	put_str@s,w,c
  6845  002570  240F               	addwf	put_str@i,w,c
  6846  002572  6E0E               	movwf	??_put_str& (0+255),c
  6847  002574  C00E  FFF6         	movff	??_put_str,tblptrl
  6848  002578                     	if	1	;There is more than 1 active tblptr byte
  6849  002578  0E06               	movlw	high __smallconst
  6850  00257A  6EF7               	movwf	tblptrh,c
  6851  00257C                     	endif
  6852  00257C                     	if	0	;tblptru may be non-zero
  6853  00257C                     	endif
  6854  00257C                     	if	0	;tblptru may be non-zero
  6855  00257C                     	endif
  6856  00257C  0008               	tblrd		*
  6857  00257E  FFFF               	dw	65535	; errata NOP
  6858  002580  50F5               	movf	tablat,w,c
  6859  002582  E1E6               	bnz	l4451
  6860  002584  0012               	return		;funcret
  6861  002586  FFFF               	dw	65535	; errata NOP
  6862  002588                     __end_of_put_str:
  6863                           	opt stack 0
  6864                           tosu	equ	0xFFF
  6865                           tosh	equ	0xFFE
  6866                           tosl	equ	0xFFD
  6867                           pclath	equ	0xFFA
  6868                           tblptru	equ	0xFF8
  6869                           tblptrh	equ	0xFF7
  6870                           tblptrl	equ	0xFF6
  6871                           tablat	equ	0xFF5
  6872                           prodl	equ	0xFF3
  6873                           intcon	equ	0xFF2
  6874                           intcon2	equ	0xFF1
  6875                           postinc0	equ	0xFEE
  6876                           wreg	equ	0xFE8
  6877                           postdec1	equ	0xFE5
  6878                           fsr1l	equ	0xFE1
  6879                           postinc2	equ	0xFDE
  6880                           postdec2	equ	0xFDD
  6881                           fsr2h	equ	0xFDA
  6882                           fsr2l	equ	0xFD9
  6883                           status	equ	0xFD8
  6884                           
  6885 ;; *************** function _output_putch *****************
  6886 ;; Defined at:
  6887 ;;		line 488 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../src/print.c"
  6888 ;; Parameters:    Size  Location     Type
  6889 ;;  c               1    wreg     unsigned char 
  6890 ;; Auto vars:     Size  Location     Type
  6891 ;;  c               1   11[COMRAM] unsigned char 
  6892 ;; Return value:  Size  Location     Type
  6893 ;;                  1    wreg      void 
  6894 ;; Registers used:
  6895 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6896 ;; Tracked objects:
  6897 ;;		On entry : 0/0
  6898 ;;		On exit  : 0/0
  6899 ;;		Unchanged: 0/0
  6900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6901 ;;      Params:         0       0       0       0       0       0       0
  6902 ;;      Locals:         1       0       0       0       0       0       0
  6903 ;;      Temps:          0       0       0       0       0       0       0
  6904 ;;      Totals:         1       0       0       0       0       0       0
  6905 ;;Total ram usage:        1 bytes
  6906 ;; Hardware stack levels used:    1
  6907 ;; Hardware stack levels required when called:    5
  6908 ;; This function calls:
  6909 ;;		_lcd_putch
  6910 ;;		_ser_putch
  6911 ;; This function is called by:
  6912 ;;		_put_str
  6913 ;; This function uses a non-reentrant model
  6914 ;;
  6915                           
  6916                           	psect	text34
  6917  0028AE                     __ptext34:
  6918                           	opt stack 0
  6919  0028AE                     _output_putch:
  6920                           	opt stack 0
  6921  0028AE  FFFF               	dw	65535	; assembler added errata NOP
  6922                           
  6923                           ;incstack = 0
  6924                           ;output_putch@c stored from wreg
  6925  0028B0  6E0C               	movwf	output_putch@c,c
  6926                           
  6927                           ;print.c: 490: lcd_putch(c);
  6928  0028B2  500C               	movf	output_putch@c,w,c
  6929  0028B4  EC60  F014         	call	_lcd_putch
  6930                           
  6931                           ;print.c: 493: ser_putch(c);
  6932  0028B8  500C               	movf	output_putch@c,w,c
  6933  0028BA  EFDB  F013         	goto	_ser_putch
  6934  0028BE  FFFF               	dw	65535	; errata NOP
  6935  0028C0                     __end_of_output_putch:
  6936                           	opt stack 0
  6937                           tosu	equ	0xFFF
  6938                           tosh	equ	0xFFE
  6939                           tosl	equ	0xFFD
  6940                           pclath	equ	0xFFA
  6941                           tblptru	equ	0xFF8
  6942                           tblptrh	equ	0xFF7
  6943                           tblptrl	equ	0xFF6
  6944                           tablat	equ	0xFF5
  6945                           prodl	equ	0xFF3
  6946                           intcon	equ	0xFF2
  6947                           intcon2	equ	0xFF1
  6948                           postinc0	equ	0xFEE
  6949                           wreg	equ	0xFE8
  6950                           postdec1	equ	0xFE5
  6951                           fsr1l	equ	0xFE1
  6952                           postinc2	equ	0xFDE
  6953                           postdec2	equ	0xFDD
  6954                           fsr2h	equ	0xFDA
  6955                           fsr2l	equ	0xFD9
  6956                           status	equ	0xFD8
  6957                           
  6958 ;; *************** function _measure_freq *****************
  6959 ;; Defined at:
  6960 ;;		line 73 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../src/measure.c"
  6961 ;; Parameters:    Size  Location     Type
  6962 ;;		None
  6963 ;; Auto vars:     Size  Location     Type
  6964 ;;  count           2   65[COMRAM] unsigned int 
  6965 ;; Return value:  Size  Location     Type
  6966 ;;                  2   62[COMRAM] unsigned short 
  6967 ;; Registers used:
  6968 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, cstack
  6969 ;; Tracked objects:
  6970 ;;		On entry : 0/0
  6971 ;;		On exit  : 0/0
  6972 ;;		Unchanged: 0/0
  6973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6974 ;;      Params:         2       0       0       0       0       0       0
  6975 ;;      Locals:         2       0       0       0       0       0       0
  6976 ;;      Temps:          1       0       0       0       0       0       0
  6977 ;;      Totals:         5       0       0       0       0       0       0
  6978 ;;Total ram usage:        5 bytes
  6979 ;; Hardware stack levels used:    1
  6980 ;; Hardware stack levels required when called:    6
  6981 ;; This function calls:
  6982 ;;		_buffer_init
  6983 ;;		_buffer_puts
  6984 ;;		_format_number
  6985 ;;		_lcd_gotoxy
  6986 ;;		_print_buffer
  6987 ;;		_timer0_read_ps
  6988 ;; This function is called by:
  6989 ;;		_calibrate
  6990 ;;		_measure_capacitance
  6991 ;;		_measure_inductance
  6992 ;; This function uses a non-reentrant model
  6993 ;;
  6994                           
  6995                           	psect	text35
  6996  00162C                     __ptext35:
  6997                           	opt stack 0
  6998  00162C                     _measure_freq:
  6999                           	opt stack 0
  7000  00162C  FFFF               	dw	65535	; assembler added errata NOP
  7001                           
  7002                           ;measure.c: 74: uint16_t count;
  7003                           ;measure.c: 76: INTCONbits.TMR0IF = 0;
  7004                           
  7005                           ;incstack = 0
  7006  00162E  94F2               	bcf	intcon,2,c	;volatile
  7007                           
  7008                           ;measure.c: 80: TRISA &= ~0b00010000;
  7009  001630  9892               	bcf	3986,4,c	;volatile
  7010                           
  7011                           ;measure.c: 82: _delay((unsigned long)((20)*(20000000/4000.0)));
  7012  001632  0E62               	movlw	98
  7013  001634  6E41               	movwf	??_measure_freq& (0+255),c
  7014  001636  0E76               	movlw	118
  7015  001638                     u4657:
  7016  001638  FFFF               	dw	65535	; errata NOP
  7017  00163A  2EE8               	decfsz	wreg,f,c
  7018  00163C  D7FD               	bra	u4657
  7019  00163E  2E41               	decfsz	??_measure_freq& (0+255),f,c
  7020  001640  D7FB               	bra	u4657
  7021  001642  D000               	nop2	
  7022                           
  7023                           ;measure.c: 85: TMR0 = 0x00;
  7024  001644  6AD6               	clrf	4054,c	;volatile
  7025  001646  6AD7               	clrf	4055,c	;volatile
  7026                           
  7027                           ;measure.c: 90: _delay((unsigned long)((10)*(20000000/4000.0)));
  7028  001648  0E31               	movlw	49
  7029  00164A  6E41               	movwf	??_measure_freq& (0+255),c
  7030  00164C  0EBB               	movlw	187
  7031  00164E                     u4667:
  7032  00164E  FFFF               	dw	65535	; errata NOP
  7033  001650  2EE8               	decfsz	wreg,f,c
  7034  001652  D7FD               	bra	u4667
  7035  001654  2E41               	decfsz	??_measure_freq& (0+255),f,c
  7036  001656  D7FB               	bra	u4667
  7037                           
  7038                           ;measure.c: 91: _delay((unsigned long)((10)*(20000000/4000.0)));
  7039  001658  0E31               	movlw	49
  7040  00165A  6E41               	movwf	??_measure_freq& (0+255),c
  7041  00165C  0EBB               	movlw	187
  7042  00165E                     u4677:
  7043  00165E  FFFF               	dw	65535	; errata NOP
  7044  001660  2EE8               	decfsz	wreg,f,c
  7045  001662  D7FD               	bra	u4677
  7046  001664  2E41               	decfsz	??_measure_freq& (0+255),f,c
  7047  001666  D7FB               	bra	u4677
  7048                           
  7049                           ;measure.c: 92: _delay((unsigned long)((10)*(20000000/4000.0)));
  7050  001668  0E31               	movlw	49
  7051  00166A  6E41               	movwf	??_measure_freq& (0+255),c
  7052  00166C  0EBB               	movlw	187
  7053  00166E                     u4687:
  7054  00166E  FFFF               	dw	65535	; errata NOP
  7055  001670  2EE8               	decfsz	wreg,f,c
  7056  001672  D7FD               	bra	u4687
  7057  001674  2E41               	decfsz	??_measure_freq& (0+255),f,c
  7058  001676  D7FB               	bra	u4687
  7059                           
  7060                           ;measure.c: 93: _delay((unsigned long)((10)*(20000000/4000.0)));
  7061  001678  0E31               	movlw	49
  7062  00167A  6E41               	movwf	??_measure_freq& (0+255),c
  7063  00167C  0EBB               	movlw	187
  7064  00167E                     u4697:
  7065  00167E  FFFF               	dw	65535	; errata NOP
  7066  001680  2EE8               	decfsz	wreg,f,c
  7067  001682  D7FD               	bra	u4697
  7068  001684  2E41               	decfsz	??_measure_freq& (0+255),f,c
  7069  001686  D7FB               	bra	u4697
  7070                           
  7071                           ;measure.c: 94: _delay((unsigned long)((10)*(20000000/4000.0)));
  7072  001688  0E31               	movlw	49
  7073  00168A  6E41               	movwf	??_measure_freq& (0+255),c
  7074  00168C  0EBB               	movlw	187
  7075  00168E                     u4707:
  7076  00168E  FFFF               	dw	65535	; errata NOP
  7077  001690  2EE8               	decfsz	wreg,f,c
  7078  001692  D7FD               	bra	u4707
  7079  001694  2E41               	decfsz	??_measure_freq& (0+255),f,c
  7080  001696  D7FB               	bra	u4707
  7081                           
  7082                           ;measure.c: 95: _delay((unsigned long)((10)*(20000000/4000.0)));
  7083  001698  0E31               	movlw	49
  7084  00169A  6E41               	movwf	??_measure_freq& (0+255),c
  7085  00169C  0EBB               	movlw	187
  7086  00169E                     u4717:
  7087  00169E  FFFF               	dw	65535	; errata NOP
  7088  0016A0  2EE8               	decfsz	wreg,f,c
  7089  0016A2  D7FD               	bra	u4717
  7090  0016A4  2E41               	decfsz	??_measure_freq& (0+255),f,c
  7091  0016A6  D7FB               	bra	u4717
  7092                           
  7093                           ;measure.c: 96: _delay((unsigned long)((10)*(20000000/4000.0)));
  7094  0016A8  0E31               	movlw	49
  7095  0016AA  6E41               	movwf	??_measure_freq& (0+255),c
  7096  0016AC  0EBB               	movlw	187
  7097  0016AE                     u4727:
  7098  0016AE  FFFF               	dw	65535	; errata NOP
  7099  0016B0  2EE8               	decfsz	wreg,f,c
  7100  0016B2  D7FD               	bra	u4727
  7101  0016B4  2E41               	decfsz	??_measure_freq& (0+255),f,c
  7102  0016B6  D7FB               	bra	u4727
  7103                           
  7104                           ;measure.c: 97: _delay((unsigned long)((10)*(20000000/4000.0)));
  7105  0016B8  0E31               	movlw	49
  7106  0016BA  6E41               	movwf	??_measure_freq& (0+255),c
  7107  0016BC  0EBB               	movlw	187
  7108  0016BE                     u4737:
  7109  0016BE  FFFF               	dw	65535	; errata NOP
  7110  0016C0  2EE8               	decfsz	wreg,f,c
  7111  0016C2  D7FD               	bra	u4737
  7112  0016C4  2E41               	decfsz	??_measure_freq& (0+255),f,c
  7113  0016C6  D7FB               	bra	u4737
  7114                           
  7115                           ;measure.c: 98: _delay((unsigned long)((10)*(20000000/4000.0)));
  7116  0016C8  0E31               	movlw	49
  7117  0016CA  6E41               	movwf	??_measure_freq& (0+255),c
  7118  0016CC  0EBB               	movlw	187
  7119  0016CE                     u4747:
  7120  0016CE  FFFF               	dw	65535	; errata NOP
  7121  0016D0  2EE8               	decfsz	wreg,f,c
  7122  0016D2  D7FD               	bra	u4747
  7123  0016D4  2E41               	decfsz	??_measure_freq& (0+255),f,c
  7124  0016D6  D7FB               	bra	u4747
  7125                           
  7126                           ;measure.c: 99: _delay((unsigned long)((10)*(20000000/4000.0)));
  7127  0016D8  0E31               	movlw	49
  7128  0016DA  6E41               	movwf	??_measure_freq& (0+255),c
  7129  0016DC  0EBB               	movlw	187
  7130  0016DE                     u4757:
  7131  0016DE  FFFF               	dw	65535	; errata NOP
  7132  0016E0  2EE8               	decfsz	wreg,f,c
  7133  0016E2  D7FD               	bra	u4757
  7134  0016E4  2E41               	decfsz	??_measure_freq& (0+255),f,c
  7135  0016E6  D7FB               	bra	u4757
  7136                           
  7137                           ;measure.c: 104: TRISA |= 0b00010000;
  7138  0016E8  8892               	bsf	3986,4,c	;volatile
  7139                           
  7140                           ;measure.c: 107: count = timer0_read_ps();
  7141  0016EA  EC0D  F012         	call	_timer0_read_ps	;wreg free
  7142  0016EE  C00B  F042         	movff	?_timer0_read_ps,measure_freq@count
  7143  0016F2  C00C  F043         	movff	?_timer0_read_ps+1,measure_freq@count+1
  7144                           
  7145                           ;measure.c: 110: lcd_gotoxy(0, 1);
  7146  0016F6  0E01               	movlw	1
  7147  0016F8  6E0F               	movwf	lcd_gotoxy@row,c
  7148  0016FA  0E00               	movlw	0
  7149  0016FC  EC1D  F013         	call	_lcd_gotoxy
  7150                           
  7151                           ;measure.c: 111: buffer_init();
  7152  001700  EC68  F014         	call	_buffer_init	;wreg free
  7153                           
  7154                           ; BSR set to: 0
  7155                           ;measure.c: 112: buffer_puts("Freq=");
  7156  001704  0EB7               	movlw	low STR_14
  7157  001706  6E0F               	movwf	buffer_puts@x,c
  7158  001708  EC9B  F013         	call	_buffer_puts	;wreg free
  7159                           
  7160                           ; BSR set to: 0
  7161                           ;measure.c: 113: format_number(&buffer_putch,count, 10, 5);
  7162  00170C  0EF0               	movlw	low _buffer_putch
  7163  00170E  6E12               	movwf	format_number@fn,c
  7164  001710  0E28               	movlw	high _buffer_putch
  7165  001712  6E13               	movwf	format_number@fn+1,c
  7166  001714  C042  F014         	movff	measure_freq@count,format_number@n
  7167  001718  C043  F015         	movff	measure_freq@count+1,format_number@n+1
  7168  00171C  0E0A               	movlw	10
  7169  00171E  6E16               	movwf	format_number@base,c
  7170  001720  0E05               	movlw	5
  7171  001722  6E17               	movwf	format_number@pad,c
  7172  001724  ECD1  F00D         	call	_format_number	;wreg free
  7173                           
  7174                           ;measure.c: 114: print_buffer();
  7175  001728  EC6C  F013         	call	_print_buffer	;wreg free
  7176                           
  7177                           ;measure.c: 117: return count;
  7178  00172C  C042  F03F         	movff	measure_freq@count,?_measure_freq
  7179  001730  C043  F040         	movff	measure_freq@count+1,?_measure_freq+1
  7180  001734  0012               	return		;funcret
  7181  001736  FFFF               	dw	65535	; errata NOP
  7182  001738                     __end_of_measure_freq:
  7183                           	opt stack 0
  7184                           tosu	equ	0xFFF
  7185                           tosh	equ	0xFFE
  7186                           tosl	equ	0xFFD
  7187                           pclath	equ	0xFFA
  7188                           tblptru	equ	0xFF8
  7189                           tblptrh	equ	0xFF7
  7190                           tblptrl	equ	0xFF6
  7191                           tablat	equ	0xFF5
  7192                           prodl	equ	0xFF3
  7193                           intcon	equ	0xFF2
  7194                           intcon2	equ	0xFF1
  7195                           postinc0	equ	0xFEE
  7196                           wreg	equ	0xFE8
  7197                           postdec1	equ	0xFE5
  7198                           fsr1l	equ	0xFE1
  7199                           postinc2	equ	0xFDE
  7200                           postdec2	equ	0xFDD
  7201                           fsr2h	equ	0xFDA
  7202                           fsr2l	equ	0xFD9
  7203                           status	equ	0xFD8
  7204                           
  7205 ;; *************** function _timer0_read_ps *****************
  7206 ;; Defined at:
  7207 ;;		line 79 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../lib/timer.c"
  7208 ;; Parameters:    Size  Location     Type
  7209 ;;		None
  7210 ;; Auto vars:     Size  Location     Type
  7211 ;;  count           2   15[COMRAM] unsigned int 
  7212 ;;  prev            1   14[COMRAM] unsigned char 
  7213 ;; Return value:  Size  Location     Type
  7214 ;;                  2   10[COMRAM] unsigned short 
  7215 ;; Registers used:
  7216 ;;		wreg, status,2, status,0
  7217 ;; Tracked objects:
  7218 ;;		On entry : 0/0
  7219 ;;		On exit  : 0/0
  7220 ;;		Unchanged: 0/0
  7221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7222 ;;      Params:         2       0       0       0       0       0       0
  7223 ;;      Locals:         3       0       0       0       0       0       0
  7224 ;;      Temps:          2       0       0       0       0       0       0
  7225 ;;      Totals:         7       0       0       0       0       0       0
  7226 ;;Total ram usage:        7 bytes
  7227 ;; Hardware stack levels used:    1
  7228 ;; Hardware stack levels required when called:    2
  7229 ;; This function calls:
  7230 ;;		Nothing
  7231 ;; This function is called by:
  7232 ;;		_measure_freq
  7233 ;; This function uses a non-reentrant model
  7234 ;;
  7235                           
  7236                           	psect	text36
  7237  00241A                     __ptext36:
  7238                           	opt stack 0
  7239  00241A                     _timer0_read_ps:
  7240                           	opt stack 0
  7241  00241A  FFFF               	dw	65535	; assembler added errata NOP
  7242                           
  7243                           ;timer.c: 80: uint8_t prev = TMR0;
  7244                           
  7245                           ;incstack = 0
  7246  00241C  CFD6 F00F          	movff	4054,timer0_read_ps@prev	;volatile
  7247                           
  7248                           ;timer.c: 81: uint16_t count = 0;
  7249  002420  6A10               	clrf	timer0_read_ps@count,c
  7250  002422  6A11               	clrf	timer0_read_ps@count+1,c
  7251                           
  7252                           ;timer.c: 82: T0CONbits.T0CS = 1;
  7253  002424  8AD5               	bsf	4053,5,c	;volatile
  7254  002426                     l394:
  7255                           
  7256                           ;timer.c: 87: T0CONbits.T0SE = 1;
  7257  002426  88D5               	bsf	4053,4,c	;volatile
  7258                           
  7259                           ;timer.c: 89: __nop();
  7260  002428  F000               	nop	
  7261                           
  7262                           ;timer.c: 90: __nop();
  7263  00242A  F000               	nop	
  7264                           
  7265                           ;timer.c: 91: T0CONbits.T0SE = 0;
  7266  00242C  98D5               	bcf	4053,4,c	;volatile
  7267                           
  7268                           ;timer.c: 94: __nop();
  7269  00242E  F000               	nop	
  7270                           
  7271                           ;timer.c: 95: __nop();
  7272  002430  F000               	nop	
  7273                           
  7274                           ;timer.c: 97: ++count;
  7275  002432  4A10               	infsnz	timer0_read_ps@count,f,c
  7276  002434  2A11               	incf	timer0_read_ps@count+1,f,c
  7277                           
  7278                           ;timer.c: 100: } while(prev == TMR0 && count <= 255);
  7279  002436  500F               	movf	timer0_read_ps@prev,w,c
  7280  002438  18D6               	xorwf	4054,w,c	;volatile
  7281  00243A  10D7               	iorwf	4055,w,c	;volatile
  7282  00243C  E102               	bnz	u4120
  7283  00243E  0411               	decf	timer0_read_ps@count+1,w,c
  7284  002440  E3F2               	bnc	l394
  7285  002442                     u4120:
  7286                           
  7287                           ;timer.c: 102: count = ((prev << 8) + (256 - count));
  7288  002442  500F               	movf	timer0_read_ps@prev,w,c
  7289  002444  6E0E               	movwf	(??_timer0_read_ps+1)& (0+255),c
  7290  002446  6A0D               	clrf	??_timer0_read_ps& (0+255),c
  7291  002448  5010               	movf	timer0_read_ps@count,w,c
  7292  00244A  5E0D               	subwf	??_timer0_read_ps,f,c
  7293  00244C  5011               	movf	timer0_read_ps@count+1,w,c
  7294  00244E  5A0E               	subwfb	??_timer0_read_ps+1,f,c
  7295  002450  0E00               	movlw	0
  7296  002452  240D               	addwf	??_timer0_read_ps,w,c
  7297  002454  6E10               	movwf	timer0_read_ps@count,c
  7298  002456  0E01               	movlw	1
  7299  002458  200E               	addwfc	??_timer0_read_ps+1,w,c
  7300  00245A  6E11               	movwf	timer0_read_ps@count+1,c
  7301                           
  7302                           ;timer.c: 103: return count;
  7303  00245C  C010  F00B         	movff	timer0_read_ps@count,?_timer0_read_ps
  7304  002460  C011  F00C         	movff	timer0_read_ps@count+1,?_timer0_read_ps+1
  7305  002464  0012               	return		;funcret
  7306  002466  FFFF               	dw	65535	; errata NOP
  7307  002468                     __end_of_timer0_read_ps:
  7308                           	opt stack 0
  7309                           tosu	equ	0xFFF
  7310                           tosh	equ	0xFFE
  7311                           tosl	equ	0xFFD
  7312                           pclath	equ	0xFFA
  7313                           tblptru	equ	0xFF8
  7314                           tblptrh	equ	0xFF7
  7315                           tblptrl	equ	0xFF6
  7316                           tablat	equ	0xFF5
  7317                           prodl	equ	0xFF3
  7318                           intcon	equ	0xFF2
  7319                           intcon2	equ	0xFF1
  7320                           postinc0	equ	0xFEE
  7321                           wreg	equ	0xFE8
  7322                           postdec1	equ	0xFE5
  7323                           fsr1l	equ	0xFE1
  7324                           postinc2	equ	0xFDE
  7325                           postdec2	equ	0xFDD
  7326                           fsr2h	equ	0xFDA
  7327                           fsr2l	equ	0xFD9
  7328                           status	equ	0xFD8
  7329                           
  7330 ;; *************** function _print_buffer *****************
  7331 ;; Defined at:
  7332 ;;		line 510 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../src/print.c"
  7333 ;; Parameters:    Size  Location     Type
  7334 ;;		None
  7335 ;; Auto vars:     Size  Location     Type
  7336 ;;  i               1   13[COMRAM] unsigned char 
  7337 ;; Return value:  Size  Location     Type
  7338 ;;                  1    wreg      void 
  7339 ;; Registers used:
  7340 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7341 ;; Tracked objects:
  7342 ;;		On entry : 0/0
  7343 ;;		On exit  : 0/0
  7344 ;;		Unchanged: 0/0
  7345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7346 ;;      Params:         0       0       0       0       0       0       0
  7347 ;;      Locals:         1       0       0       0       0       0       0
  7348 ;;      Temps:          1       0       0       0       0       0       0
  7349 ;;      Totals:         2       0       0       0       0       0       0
  7350 ;;Total ram usage:        2 bytes
  7351 ;; Hardware stack levels used:    1
  7352 ;; Hardware stack levels required when called:    4
  7353 ;; This function calls:
  7354 ;;		_ser_putch
  7355 ;;		_ser_puts
  7356 ;; This function is called by:
  7357 ;;		_measure_freq
  7358 ;; This function uses a non-reentrant model
  7359 ;;
  7360                           
  7361                           	psect	text37
  7362  0026D8                     __ptext37:
  7363                           	opt stack 0
  7364  0026D8                     _print_buffer:
  7365                           	opt stack 0
  7366  0026D8  FFFF               	dw	65535	; assembler added errata NOP
  7367                           
  7368                           ;print.c: 512: uint8_t i;
  7369                           ;print.c: 513: for(i = 0; i < buffer.n; i++) {
  7370                           
  7371                           ;incstack = 0
  7372  0026DA  6A0E               	clrf	print_buffer@i,c
  7373  0026DC  D008               	goto	l4375
  7374  0026DE                     l4371:
  7375                           
  7376                           ; BSR set to: 0
  7377                           ;print.c: 514: ser_putch(buffer.x[i]);
  7378  0026DE  500E               	movf	print_buffer@i,w,c
  7379  0026E0  0FA6               	addlw	low _buffer
  7380  0026E2  6ED9               	movwf	fsr2l,c
  7381  0026E4  6ADA               	clrf	fsr2h,c
  7382  0026E6  50DF               	movf	indf2,w,c
  7383  0026E8  ECDB  F013         	call	_ser_putch
  7384  0026EC  2A0E               	incf	print_buffer@i,f,c
  7385  0026EE                     l4375:
  7386  0026EE  FFFF               	dw	65535	; assembler added errata NOP
  7387  0026F0  0100               	movlb	0	; () banked
  7388  0026F2  39B6               	swapf	(_buffer+16)& (0+255),w,b
  7389  0026F4  0B0F               	andlw	15
  7390  0026F6  6E0D               	movwf	??_print_buffer& (0+255),c
  7391  0026F8  500D               	movf	??_print_buffer,w,c
  7392  0026FA  5C0E               	subwf	print_buffer@i,w,c
  7393  0026FC  E3F0               	bnc	l4371
  7394                           
  7395                           ; BSR set to: 0
  7396                           ;print.c: 515: }
  7397                           ;print.c: 516: ser_puts("\r\n");
  7398  0026FE  0EE5               	movlw	low STR_4
  7399  002700  6E0C               	movwf	ser_puts@s,c
  7400  002702  EF84  F013         	goto	_ser_puts	;wreg free
  7401  002706  FFFF               	dw	65535	; errata NOP
  7402  002708                     __end_of_print_buffer:
  7403                           	opt stack 0
  7404                           tosu	equ	0xFFF
  7405                           tosh	equ	0xFFE
  7406                           tosl	equ	0xFFD
  7407                           pclath	equ	0xFFA
  7408                           tblptru	equ	0xFF8
  7409                           tblptrh	equ	0xFF7
  7410                           tblptrl	equ	0xFF6
  7411                           tablat	equ	0xFF5
  7412                           prodl	equ	0xFF3
  7413                           intcon	equ	0xFF2
  7414                           intcon2	equ	0xFF1
  7415                           postinc0	equ	0xFEE
  7416                           wreg	equ	0xFE8
  7417                           postdec1	equ	0xFE5
  7418                           fsr1l	equ	0xFE1
  7419                           indf2	equ	0xFDF
  7420                           postinc2	equ	0xFDE
  7421                           postdec2	equ	0xFDD
  7422                           fsr2h	equ	0xFDA
  7423                           fsr2l	equ	0xFD9
  7424                           status	equ	0xFD8
  7425                           
  7426 ;; *************** function _ser_puts *****************
  7427 ;; Defined at:
  7428 ;;		line 81 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../lib/ser.c"
  7429 ;; Parameters:    Size  Location     Type
  7430 ;;  s               1   11[COMRAM] PTR const unsigned char 
  7431 ;;		 -> STR_36(3), STR_23(3), STR_22(5), STR_21(3), 
  7432 ;;		 -> STR_20(8), STR_19(6), STR_18(6), STR_17(6), 
  7433 ;;		 -> STR_16(5), STR_13(3), STR_11(3), STR_9(3), 
  7434 ;;		 -> STR_4(3), STR_3(16), STR_2(16), 
  7435 ;; Auto vars:     Size  Location     Type
  7436 ;;		None
  7437 ;; Return value:  Size  Location     Type
  7438 ;;                  1    wreg      void 
  7439 ;; Registers used:
  7440 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7441 ;; Tracked objects:
  7442 ;;		On entry : 0/0
  7443 ;;		On exit  : 0/0
  7444 ;;		Unchanged: 0/0
  7445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7446 ;;      Params:         1       0       0       0       0       0       0
  7447 ;;      Locals:         0       0       0       0       0       0       0
  7448 ;;      Temps:          0       0       0       0       0       0       0
  7449 ;;      Totals:         1       0       0       0       0       0       0
  7450 ;;Total ram usage:        1 bytes
  7451 ;; Hardware stack levels used:    1
  7452 ;; Hardware stack levels required when called:    3
  7453 ;; This function calls:
  7454 ;;		_ser_putch
  7455 ;; This function is called by:
  7456 ;;		_main
  7457 ;;		_calibrate
  7458 ;;		_measure_capacitance
  7459 ;;		_print_buffer
  7460 ;; This function uses a non-reentrant model
  7461 ;;
  7462                           
  7463                           	psect	text38
  7464  002708                     __ptext38:
  7465                           	opt stack 0
  7466  002708                     _ser_puts:
  7467                           	opt stack 0
  7468  002708  FFFF               	dw	65535	; assembler added errata NOP
  7469                           
  7470                           ;ser.c: 82: while(*s) ser_putch(*s++);
  7471                           
  7472                           ;incstack = 0
  7473  00270A  D00A               	goto	l4175
  7474  00270C                     l4171:
  7475  00270C  C00C  FFF6         	movff	ser_puts@s,tblptrl
  7476  002710                     	if	1	;There is more than 1 active tblptr byte
  7477  002710  0E06               	movlw	high __smallconst
  7478  002712  6EF7               	movwf	tblptrh,c
  7479  002714                     	endif
  7480  002714                     	if	0	;tblptru may be non-zero
  7481  002714                     	endif
  7482  002714                     	if	0	;tblptru may be non-zero
  7483  002714                     	endif
  7484  002714  0008               	tblrd		*
  7485  002716  FFFF               	dw	65535	; errata NOP
  7486  002718  50F5               	movf	tablat,w,c
  7487  00271A  ECDB  F013         	call	_ser_putch
  7488  00271E  2A0C               	incf	ser_puts@s,f,c
  7489  002720                     l4175:
  7490  002720  FFFF               	dw	65535	; assembler added errata NOP
  7491  002722  C00C  FFF6         	movff	ser_puts@s,tblptrl
  7492  002726                     	if	1	;There is more than 1 active tblptr byte
  7493  002726  0E06               	movlw	high __smallconst
  7494  002728  6EF7               	movwf	tblptrh,c
  7495  00272A                     	endif
  7496  00272A                     	if	0	;tblptru may be non-zero
  7497  00272A                     	endif
  7498  00272A                     	if	0	;tblptru may be non-zero
  7499  00272A                     	endif
  7500  00272A  0008               	tblrd		*
  7501  00272C  FFFF               	dw	65535	; errata NOP
  7502  00272E  50F5               	movf	tablat,w,c
  7503  002730  E1ED               	bnz	l4171
  7504  002732  0012               	return		;funcret
  7505  002734  FFFF               	dw	65535	; errata NOP
  7506  002736                     __end_of_ser_puts:
  7507                           	opt stack 0
  7508                           tosu	equ	0xFFF
  7509                           tosh	equ	0xFFE
  7510                           tosl	equ	0xFFD
  7511                           pclath	equ	0xFFA
  7512                           tblptru	equ	0xFF8
  7513                           tblptrh	equ	0xFF7
  7514                           tblptrl	equ	0xFF6
  7515                           tablat	equ	0xFF5
  7516                           prodl	equ	0xFF3
  7517                           intcon	equ	0xFF2
  7518                           intcon2	equ	0xFF1
  7519                           postinc0	equ	0xFEE
  7520                           wreg	equ	0xFE8
  7521                           postdec1	equ	0xFE5
  7522                           fsr1l	equ	0xFE1
  7523                           indf2	equ	0xFDF
  7524                           postinc2	equ	0xFDE
  7525                           postdec2	equ	0xFDD
  7526                           fsr2h	equ	0xFDA
  7527                           fsr2l	equ	0xFD9
  7528                           status	equ	0xFD8
  7529                           
  7530 ;; *************** function _lcd_gotoxy *****************
  7531 ;; Defined at:
  7532 ;;		line 135 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../lib/lcd44780.c"
  7533 ;; Parameters:    Size  Location     Type
  7534 ;;  col             1    wreg     unsigned char 
  7535 ;;  row             1   14[COMRAM] unsigned char 
  7536 ;; Auto vars:     Size  Location     Type
  7537 ;;  col             1   15[COMRAM] unsigned char 
  7538 ;;  row_offsets     4   16[COMRAM] unsigned char [4]
  7539 ;; Return value:  Size  Location     Type
  7540 ;;                  1    wreg      void 
  7541 ;; Registers used:
  7542 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7543 ;; Tracked objects:
  7544 ;;		On entry : 0/0
  7545 ;;		On exit  : 0/0
  7546 ;;		Unchanged: 0/0
  7547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7548 ;;      Params:         1       0       0       0       0       0       0
  7549 ;;      Locals:         5       0       0       0       0       0       0
  7550 ;;      Temps:          0       0       0       0       0       0       0
  7551 ;;      Totals:         6       0       0       0       0       0       0
  7552 ;;Total ram usage:        6 bytes
  7553 ;; Hardware stack levels used:    1
  7554 ;; Hardware stack levels required when called:    5
  7555 ;; This function calls:
  7556 ;;		_lcd_command
  7557 ;; This function is called by:
  7558 ;;		_main
  7559 ;;		_calibrate
  7560 ;;		_measure_freq
  7561 ;;		_measure_capacitance
  7562 ;;		_measure_inductance
  7563 ;;		_print_unit
  7564 ;;		_print_reading
  7565 ;;		_print_indicator
  7566 ;; This function uses a non-reentrant model
  7567 ;;
  7568                           
  7569                           	psect	text39
  7570  00263A                     __ptext39:
  7571                           	opt stack 0
  7572  00263A                     _lcd_gotoxy:
  7573                           	opt stack 0
  7574  00263A  FFFF               	dw	65535	; assembler added errata NOP
  7575                           
  7576                           ;incstack = 0
  7577                           ;lcd_gotoxy@col stored from wreg
  7578  00263C  6E10               	movwf	lcd_gotoxy@col,c
  7579                           
  7580                           ;lcd44780.c: 137: uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
  7581  00263E  C0F0  F011         	movff	lcd_gotoxy@F2326,lcd_gotoxy@row_offsets
  7582  002642  C0F1  F012         	movff	lcd_gotoxy@F2326+1,lcd_gotoxy@row_offsets+1
  7583  002646  C0F2  F013         	movff	lcd_gotoxy@F2326+2,lcd_gotoxy@row_offsets+2
  7584  00264A  C0F3  F014         	movff	lcd_gotoxy@F2326+3,lcd_gotoxy@row_offsets+3
  7585                           
  7586                           ;lcd44780.c: 146: if(LCD_lines == 1) {
  7587  00264E  0468               	decf	_LCD_lines,w,c
  7588  002650  E106               	bnz	l4295
  7589                           
  7590                           ;lcd44780.c: 147: row_offsets[1] = 0x14;
  7591  002652  0E14               	movlw	20
  7592  002654  6E12               	movwf	lcd_gotoxy@row_offsets+1,c
  7593                           
  7594                           ;lcd44780.c: 148: row_offsets[2] = 0x28;
  7595  002656  0E28               	movlw	40
  7596  002658  6E13               	movwf	lcd_gotoxy@row_offsets+2,c
  7597                           
  7598                           ;lcd44780.c: 149: row_offsets[3] = 0x3C;
  7599  00265A  0E3C               	movlw	60
  7600  00265C  6E14               	movwf	lcd_gotoxy@row_offsets+3,c
  7601  00265E                     l4295:
  7602                           
  7603                           ;lcd44780.c: 150: }
  7604                           ;lcd44780.c: 156: lcd_command(0x80 | (col + row_offsets[row]));
  7605  00265E  500F               	movf	lcd_gotoxy@row,w,c
  7606  002660  0F11               	addlw	low lcd_gotoxy@row_offsets
  7607  002662  6ED9               	movwf	fsr2l,c
  7608  002664  6ADA               	clrf	fsr2h,c
  7609  002666  50DF               	movf	indf2,w,c
  7610  002668  2410               	addwf	lcd_gotoxy@col,w,c
  7611  00266A  0980               	iorlw	128
  7612  00266C  EF70  F014         	goto	_lcd_command
  7613  002670  FFFF               	dw	65535	; errata NOP
  7614  002672                     __end_of_lcd_gotoxy:
  7615                           	opt stack 0
  7616                           tosu	equ	0xFFF
  7617                           tosh	equ	0xFFE
  7618                           tosl	equ	0xFFD
  7619                           pclath	equ	0xFFA
  7620                           tblptru	equ	0xFF8
  7621                           tblptrh	equ	0xFF7
  7622                           tblptrl	equ	0xFF6
  7623                           tablat	equ	0xFF5
  7624                           prodl	equ	0xFF3
  7625                           intcon	equ	0xFF2
  7626                           intcon2	equ	0xFF1
  7627                           postinc0	equ	0xFEE
  7628                           wreg	equ	0xFE8
  7629                           postdec1	equ	0xFE5
  7630                           fsr1l	equ	0xFE1
  7631                           indf2	equ	0xFDF
  7632                           postinc2	equ	0xFDE
  7633                           postdec2	equ	0xFDD
  7634                           fsr2h	equ	0xFDA
  7635                           fsr2l	equ	0xFD9
  7636                           status	equ	0xFD8
  7637                           
  7638 ;; *************** function _format_number *****************
  7639 ;; Defined at:
  7640 ;;		line 19 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../lib/format.c"
  7641 ;; Parameters:    Size  Location     Type
  7642 ;;  fn              2   17[COMRAM] PTR FTN(unsigned char ,)
  7643 ;;		 -> buffer_putch(1), ser_putch(1), lcd_putch(1), 
  7644 ;;  n               2   19[COMRAM] unsigned int 
  7645 ;;  base            1   21[COMRAM] unsigned char 
  7646 ;;  pad             1   22[COMRAM] char 
  7647 ;; Auto vars:     Size  Location     Type
  7648 ;;  buf            32   25[COMRAM] unsigned char [32]
  7649 ;;  i               1   61[COMRAM] char 
  7650 ;;  di              1   60[COMRAM] unsigned char 
  7651 ;;  padchar         1   59[COMRAM] unsigned char 
  7652 ;; Return value:  Size  Location     Type
  7653 ;;                  1    wreg      void 
  7654 ;; Registers used:
  7655 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  7656 ;; Tracked objects:
  7657 ;;		On entry : 0/0
  7658 ;;		On exit  : 0/0
  7659 ;;		Unchanged: 0/0
  7660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7661 ;;      Params:         6       0       0       0       0       0       0
  7662 ;;      Locals:        37       0       0       0       0       0       0
  7663 ;;      Temps:          2       0       0       0       0       0       0
  7664 ;;      Totals:        45       0       0       0       0       0       0
  7665 ;;Total ram usage:       45 bytes
  7666 ;; Hardware stack levels used:    1
  7667 ;; Hardware stack levels required when called:    5
  7668 ;; This function calls:
  7669 ;;		___lwdiv
  7670 ;;		___lwmod
  7671 ;;		_buffer_putch
  7672 ;;		_lcd_putch
  7673 ;;		_ser_putch
  7674 ;; This function is called by:
  7675 ;;		_measure_freq
  7676 ;;		_format_xint32
  7677 ;;		_print_reading
  7678 ;; This function uses a non-reentrant model
  7679 ;;
  7680                           
  7681                           	psect	text40
  7682  001BA2                     __ptext40:
  7683                           	opt stack 0
  7684  001BA2                     _format_number:
  7685                           	opt stack 0
  7686  001BA2  FFFF               	dw	65535	; assembler added errata NOP
  7687                           
  7688                           ;format.c: 20: char buf[8 * sizeof(long)];
  7689                           ;format.c: 21: uint8_t di;
  7690                           ;format.c: 22: int8_t i = 0;
  7691                           
  7692                           ;incstack = 0
  7693  001BA4  6A3E               	clrf	format_number@i,c
  7694                           
  7695                           ;format.c: 23: char padchar = ' ';
  7696  001BA6  0E20               	movlw	32
  7697  001BA8  6E3C               	movwf	format_number@padchar,c
  7698                           
  7699                           ;format.c: 25: if(pad < 0) {
  7700  001BAA  AE17               	btfss	format_number@pad,7,c
  7701  001BAC  D003               	goto	l4315
  7702                           
  7703                           ;format.c: 26: pad = -pad;
  7704  001BAE  6C17               	negf	format_number@pad,c
  7705                           
  7706                           ;format.c: 27: padchar = '0';
  7707  001BB0  0E30               	movlw	48
  7708  001BB2  6E3C               	movwf	format_number@padchar,c
  7709  001BB4                     l4315:
  7710  001BB4  FFFF               	dw	65535	; assembler added errata NOP
  7711                           
  7712                           ;format.c: 39: di = n % base;
  7713  001BB6  C014  F00B         	movff	format_number@n,___lwmod@dividend
  7714  001BBA  C015  F00C         	movff	format_number@n+1,___lwmod@dividend+1
  7715  001BBE  C016  F00D         	movff	format_number@base,___lwmod@divisor
  7716  001BC2  6A0E               	clrf	___lwmod@divisor+1,c
  7717  001BC4  EC80  F012         	call	___lwmod	;wreg free
  7718  001BC8  500B               	movf	?___lwmod,w,c
  7719  001BCA  6E3D               	movwf	format_number@di,c
  7720                           
  7721                           ;format.c: 40: buf[i++] = (di < 10 ? (uint8_t)'0' + di : (uint8_t)'A' + di - 10);
  7722  001BCC  0E09               	movlw	9
  7723  001BCE  643D               	cpfsgt	format_number@di,c
  7724  001BD0  D002               	goto	l4321
  7725  001BD2  0E37               	movlw	55
  7726  001BD4  D002               	goto	L5
  7727  001BD6                     l4321:
  7728  001BD6  FFFF               	dw	65535	; assembler added errata NOP
  7729  001BD8  0E30               	movlw	48
  7730  001BDA                     L5:
  7731  001BDA  FFFF               	dw	65535	; assembler added errata NOP
  7732  001BDC  243D               	addwf	format_number@di,w,c
  7733  001BDE  6E3A               	movwf	_format_number$542,c
  7734  001BE0  6A3B               	clrf	_format_number$542+1,c
  7735  001BE2  0E00               	movlw	0
  7736  001BE4  223B               	addwfc	_format_number$542+1,f,c
  7737  001BE6  503E               	movf	format_number@i,w,c
  7738  001BE8  0F1A               	addlw	low format_number@buf
  7739  001BEA  6ED9               	movwf	fsr2l,c
  7740  001BEC  6ADA               	clrf	fsr2h,c
  7741  001BEE  C03A  FFDF         	movff	_format_number$542,indf2
  7742  001BF2  2A3E               	incf	format_number@i,f,c
  7743                           
  7744                           ;format.c: 42: n /= base;
  7745  001BF4  C014  F00B         	movff	format_number@n,___lwdiv@dividend
  7746  001BF8  C015  F00C         	movff	format_number@n+1,___lwdiv@dividend+1
  7747  001BFC  C016  F00D         	movff	format_number@base,___lwdiv@divisor
  7748  001C00  6A0E               	clrf	___lwdiv@divisor+1,c
  7749  001C02  EC90  F011         	call	___lwdiv	;wreg free
  7750  001C06  C00B  F014         	movff	?___lwdiv,format_number@n
  7751  001C0A  C00C  F015         	movff	?___lwdiv+1,format_number@n+1
  7752                           
  7753                           ;format.c: 43: } while(n > 0);
  7754  001C0E  5014               	movf	format_number@n,w,c
  7755  001C10  1015               	iorwf	format_number@n+1,w,c
  7756  001C12  E004               	bz	l4333
  7757  001C14  D7CF               	goto	l4315
  7758  001C16                     l4331:
  7759  001C16  503C               	movf	format_number@padchar,w,c
  7760  001C18  EC78  F014         	call	_buffer_putch
  7761  001C1C                     l4333:
  7762  001C1C  0617               	decf	format_number@pad,f,c
  7763  001C1E  2817               	incf	format_number@pad,w,c
  7764  001C20  6E18               	movwf	??_format_number& (0+255),c
  7765  001C22  503E               	movf	format_number@i,w,c
  7766  001C24  0A80               	xorlw	128
  7767  001C26  6E19               	movwf	(??_format_number+1)& (0+255),c
  7768  001C28  5018               	movf	??_format_number,w,c
  7769  001C2A  0A80               	xorlw	128
  7770  001C2C  5C19               	subwf	(??_format_number+1)& (0+255),w,c
  7771  001C2E  E3F3               	bnc	l4331
  7772  001C30                     u4080:
  7773  001C30  FFFF               	dw	65535	; assembler added errata NOP
  7774                           
  7775                           ;format.c: 47: for(; i > 0; i--) {
  7776  001C32  503E               	movf	format_number@i,w,c
  7777  001C34  0A80               	xorlw	128
  7778  001C36  0F7F               	addlw	-129
  7779  001C38  E319               	bnc	l283
  7780                           
  7781                           ;format.c: 48: fn((char)buf[(int16_t)i - 1]);
  7782  001C3A  D801               	call	u4108
  7783  001C3C  D014               	goto	u4109
  7784  001C3E                     u4108:
  7785  001C3E  FFFF               	dw	65535	; assembler added errata NOP
  7786  001C40  0005               	push	
  7787  001C42  6EFA               	movwf	pclath,c
  7788  001C44  5012               	movf	format_number@fn,w,c
  7789  001C46  6EFD               	movwf	tosl,c
  7790  001C48  5013               	movf	format_number@fn+1,w,c
  7791  001C4A  6EFE               	movwf	tosh,c
  7792  001C4C  50F8               	movf	tblptru,w,c
  7793  001C4E  6EFF               	movwf	tosu,c
  7794  001C50  50FA               	movf	pclath,w,c
  7795  001C52  C03E  F018         	movff	format_number@i,??_format_number
  7796  001C56  0618               	decf	??_format_number,f,c
  7797  001C58  5018               	movf	??_format_number,w,c
  7798  001C5A  0F1A               	addlw	low format_number@buf
  7799  001C5C  6ED9               	movwf	fsr2l,c
  7800  001C5E  6ADA               	clrf	fsr2h,c
  7801  001C60  50DF               	movf	indf2,w,c
  7802  001C62  0012               	return		;indir
  7803  001C64  FFFF               	dw	65535	; errata NOP
  7804  001C66                     u4109:
  7805  001C66  FFFF               	dw	65535	; assembler added errata NOP
  7806  001C68  063E               	decf	format_number@i,f,c
  7807  001C6A  D7E2               	goto	u4080
  7808  001C6C                     l283:
  7809  001C6C  0012               	return		;funcret
  7810  001C6E  FFFF               	dw	65535	; errata NOP
  7811  001C70                     __end_of_format_number:
  7812                           	opt stack 0
  7813                           tosu	equ	0xFFF
  7814                           tosh	equ	0xFFE
  7815                           tosl	equ	0xFFD
  7816                           pclath	equ	0xFFA
  7817                           tblptru	equ	0xFF8
  7818                           tblptrh	equ	0xFF7
  7819                           tblptrl	equ	0xFF6
  7820                           tablat	equ	0xFF5
  7821                           prodl	equ	0xFF3
  7822                           intcon	equ	0xFF2
  7823                           intcon2	equ	0xFF1
  7824                           postinc0	equ	0xFEE
  7825                           wreg	equ	0xFE8
  7826                           postdec1	equ	0xFE5
  7827                           fsr1l	equ	0xFE1
  7828                           indf2	equ	0xFDF
  7829                           postinc2	equ	0xFDE
  7830                           postdec2	equ	0xFDD
  7831                           fsr2h	equ	0xFDA
  7832                           fsr2l	equ	0xFD9
  7833                           status	equ	0xFD8
  7834                           
  7835 ;; *************** function _buffer_putch *****************
  7836 ;; Defined at:
  7837 ;;		line 39 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../lib/buffer.c"
  7838 ;; Parameters:    Size  Location     Type
  7839 ;;  ch              1    wreg     unsigned char 
  7840 ;; Auto vars:     Size  Location     Type
  7841 ;;  ch              1   13[COMRAM] unsigned char 
  7842 ;; Return value:  Size  Location     Type
  7843 ;;                  1    wreg      void 
  7844 ;; Registers used:
  7845 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7846 ;; Tracked objects:
  7847 ;;		On entry : 0/0
  7848 ;;		On exit  : 3F/0
  7849 ;;		Unchanged: 0/0
  7850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7851 ;;      Params:         0       0       0       0       0       0       0
  7852 ;;      Locals:         1       0       0       0       0       0       0
  7853 ;;      Temps:          0       0       0       0       0       0       0
  7854 ;;      Totals:         1       0       0       0       0       0       0
  7855 ;;Total ram usage:        1 bytes
  7856 ;; Hardware stack levels used:    1
  7857 ;; Hardware stack levels required when called:    3
  7858 ;; This function calls:
  7859 ;;		_buffer_putc
  7860 ;; This function is called by:
  7861 ;;		_measure_freq
  7862 ;;		_buffer_puts
  7863 ;;		_format_number
  7864 ;;		_print_reading
  7865 ;; This function uses a non-reentrant model
  7866 ;;
  7867                           
  7868                           	psect	text41
  7869  0028F0                     __ptext41:
  7870                           	opt stack 0
  7871  0028F0                     _buffer_putch:
  7872                           	opt stack 0
  7873  0028F0  FFFF               	dw	65535	; assembler added errata NOP
  7874                           
  7875                           ;incstack = 0
  7876                           ;buffer_putch@ch stored from wreg
  7877  0028F2  6E0E               	movwf	buffer_putch@ch,c
  7878                           
  7879                           ;buffer.c: 40: buffer_putc(ch);
  7880  0028F4  500E               	movf	buffer_putch@ch,w,c
  7881  0028F6  EF34  F012         	goto	_buffer_putc
  7882                           
  7883                           ; BSR set to: 0
  7884  0028FA  FFFF               	dw	65535	; errata NOP
  7885  0028FC                     __end_of_buffer_putch:
  7886                           	opt stack 0
  7887                           tosu	equ	0xFFF
  7888                           tosh	equ	0xFFE
  7889                           tosl	equ	0xFFD
  7890                           pclath	equ	0xFFA
  7891                           tblptru	equ	0xFF8
  7892                           tblptrh	equ	0xFF7
  7893                           tblptrl	equ	0xFF6
  7894                           tablat	equ	0xFF5
  7895                           prodl	equ	0xFF3
  7896                           intcon	equ	0xFF2
  7897                           intcon2	equ	0xFF1
  7898                           postinc0	equ	0xFEE
  7899                           wreg	equ	0xFE8
  7900                           postdec1	equ	0xFE5
  7901                           fsr1l	equ	0xFE1
  7902                           indf2	equ	0xFDF
  7903                           postinc2	equ	0xFDE
  7904                           postdec2	equ	0xFDD
  7905                           fsr2h	equ	0xFDA
  7906                           fsr2l	equ	0xFD9
  7907                           status	equ	0xFD8
  7908                           
  7909 ;; *************** function _lcd_putch *****************
  7910 ;; Defined at:
  7911 ;;		line 170 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../lib/lcd44780.c"
  7912 ;; Parameters:    Size  Location     Type
  7913 ;;  value           1    wreg     unsigned char 
  7914 ;; Auto vars:     Size  Location     Type
  7915 ;;  value           1   10[COMRAM] unsigned char 
  7916 ;; Return value:  Size  Location     Type
  7917 ;;                  1    wreg      void 
  7918 ;; Registers used:
  7919 ;;		wreg, status,2, status,0, cstack
  7920 ;; Tracked objects:
  7921 ;;		On entry : 0/0
  7922 ;;		On exit  : 0/0
  7923 ;;		Unchanged: 0/0
  7924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7925 ;;      Params:         0       0       0       0       0       0       0
  7926 ;;      Locals:         1       0       0       0       0       0       0
  7927 ;;      Temps:          0       0       0       0       0       0       0
  7928 ;;      Totals:         1       0       0       0       0       0       0
  7929 ;;Total ram usage:        1 bytes
  7930 ;; Hardware stack levels used:    1
  7931 ;; Hardware stack levels required when called:    4
  7932 ;; This function calls:
  7933 ;;		_lcd_send
  7934 ;; This function is called by:
  7935 ;;		_main
  7936 ;;		_calibrate
  7937 ;;		_output_putch
  7938 ;;		_lcd_puts
  7939 ;;		_format_number
  7940 ;;		_format_double
  7941 ;; This function uses a non-reentrant model
  7942 ;;
  7943                           
  7944                           	psect	text42
  7945  0028C0                     __ptext42:
  7946                           	opt stack 0
  7947  0028C0                     _lcd_putch:
  7948                           	opt stack 0
  7949  0028C0  FFFF               	dw	65535	; assembler added errata NOP
  7950                           
  7951                           ; BSR set to: 0
  7952                           ;incstack = 0
  7953                           ;lcd_putch@value stored from wreg
  7954  0028C2  6E0B               	movwf	lcd_putch@value,c
  7955                           
  7956                           ;lcd44780.c: 171: lcd_send((unsigned char)value, 1);
  7957  0028C4  0E01               	movlw	1
  7958  0028C6  6E0C               	movwf	lcd_send@mode,c
  7959  0028C8  500B               	movf	lcd_putch@value,w,c
  7960  0028CA  EF29  F014         	goto	_lcd_send
  7961  0028CE  FFFF               	dw	65535	; errata NOP
  7962  0028D0                     __end_of_lcd_putch:
  7963                           	opt stack 0
  7964                           tosu	equ	0xFFF
  7965                           tosh	equ	0xFFE
  7966                           tosl	equ	0xFFD
  7967                           pclath	equ	0xFFA
  7968                           tblptru	equ	0xFF8
  7969                           tblptrh	equ	0xFF7
  7970                           tblptrl	equ	0xFF6
  7971                           tablat	equ	0xFF5
  7972                           prodl	equ	0xFF3
  7973                           intcon	equ	0xFF2
  7974                           intcon2	equ	0xFF1
  7975                           postinc0	equ	0xFEE
  7976                           wreg	equ	0xFE8
  7977                           postdec1	equ	0xFE5
  7978                           fsr1l	equ	0xFE1
  7979                           indf2	equ	0xFDF
  7980                           postinc2	equ	0xFDE
  7981                           postdec2	equ	0xFDD
  7982                           fsr2h	equ	0xFDA
  7983                           fsr2l	equ	0xFD9
  7984                           status	equ	0xFD8
  7985                           
  7986 ;; *************** function _ser_putch *****************
  7987 ;; Defined at:
  7988 ;;		line 71 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../lib/ser.c"
  7989 ;; Parameters:    Size  Location     Type
  7990 ;;  c               1    wreg     unsigned char 
  7991 ;; Auto vars:     Size  Location     Type
  7992 ;;  c               1   10[COMRAM] unsigned char 
  7993 ;; Return value:  Size  Location     Type
  7994 ;;                  1    wreg      void 
  7995 ;; Registers used:
  7996 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7997 ;; Tracked objects:
  7998 ;;		On entry : 0/0
  7999 ;;		On exit  : 0/0
  8000 ;;		Unchanged: 0/0
  8001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8002 ;;      Params:         0       0       0       0       0       0       0
  8003 ;;      Locals:         1       0       0       0       0       0       0
  8004 ;;      Temps:          0       0       0       0       0       0       0
  8005 ;;      Totals:         1       0       0       0       0       0       0
  8006 ;;Total ram usage:        1 bytes
  8007 ;; Hardware stack levels used:    1
  8008 ;; Hardware stack levels required when called:    2
  8009 ;; This function calls:
  8010 ;;		Nothing
  8011 ;; This function is called by:
  8012 ;;		_measure_capacitance
  8013 ;;		_output_putch
  8014 ;;		_print_buffer
  8015 ;;		_ser_puts
  8016 ;;		_format_number
  8017 ;;		_format_double
  8018 ;;		_format_xint32
  8019 ;;		_ser_put
  8020 ;; This function uses a non-reentrant model
  8021 ;;
  8022                           
  8023                           	psect	text43
  8024  0027B6                     __ptext43:
  8025                           	opt stack 0
  8026  0027B6                     _ser_putch:
  8027                           	opt stack 0
  8028  0027B6  FFFF               	dw	65535	; assembler added errata NOP
  8029                           
  8030                           ;incstack = 0
  8031                           ;ser_putch@c stored from wreg
  8032  0027B8  6E0B               	movwf	ser_putch@c,c
  8033  0027BA                     
  8034                           ;ser.c: 72: while(((ser_txiptr + 1) & ((uint8_t)16 - 1)) == ser_txoptr) continue;
  8035  0027BA  286C               	incf	_ser_txiptr,w,c	;volatile
  8036  0027BC  0B0F               	andlw	15
  8037  0027BE  186D               	xorwf	_ser_txoptr,w,c	;volatile
  8038  0027C0  E0FC               	bz	l4021
  8039                           
  8040                           ;ser.c: 73: INTCONbits.GIE = 0;
  8041  0027C2  9EF2               	bcf	intcon,7,c	;volatile
  8042                           
  8043                           ;ser.c: 74: ser_txfifo[ser_txiptr] = c;
  8044  0027C4  506C               	movf	_ser_txiptr,w,c
  8045  0027C6  0F80               	addlw	low _ser_txfifo
  8046  0027C8  6ED9               	movwf	fsr2l,c
  8047  0027CA  6ADA               	clrf	fsr2h,c
  8048  0027CC  C00B  FFDF         	movff	ser_putch@c,indf2
  8049                           
  8050                           ;ser.c: 75: ser_txiptr = (ser_txiptr + 1) & ((uint8_t)16 - 1);
  8051  0027D0  286C               	incf	_ser_txiptr,w,c	;volatile
  8052  0027D2  0B0F               	andlw	15
  8053  0027D4  6E6C               	movwf	_ser_txiptr,c	;volatile
  8054                           
  8055                           ;ser.c: 76: PIE1bits.TXIE = 1;
  8056  0027D6  889D               	bsf	3997,4,c	;volatile
  8057                           
  8058                           ;ser.c: 77: INTCONbits.GIE = 1;
  8059  0027D8  8EF2               	bsf	intcon,7,c	;volatile
  8060  0027DA  0012               	return		;funcret
  8061  0027DC  FFFF               	dw	65535	; errata NOP
  8062  0027DE                     __end_of_ser_putch:
  8063                           	opt stack 0
  8064                           tosu	equ	0xFFF
  8065                           tosh	equ	0xFFE
  8066                           tosl	equ	0xFFD
  8067                           pclath	equ	0xFFA
  8068                           tblptru	equ	0xFF8
  8069                           tblptrh	equ	0xFF7
  8070                           tblptrl	equ	0xFF6
  8071                           tablat	equ	0xFF5
  8072                           prodl	equ	0xFF3
  8073                           intcon	equ	0xFF2
  8074                           intcon2	equ	0xFF1
  8075                           postinc0	equ	0xFEE
  8076                           wreg	equ	0xFE8
  8077                           postdec1	equ	0xFE5
  8078                           fsr1l	equ	0xFE1
  8079                           indf2	equ	0xFDF
  8080                           postinc2	equ	0xFDE
  8081                           postdec2	equ	0xFDD
  8082                           fsr2h	equ	0xFDA
  8083                           fsr2l	equ	0xFD9
  8084                           status	equ	0xFD8
  8085                           
  8086 ;; *************** function ___lwmod *****************
  8087 ;; Defined at:
  8088 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwmod.c"
  8089 ;; Parameters:    Size  Location     Type
  8090 ;;  dividend        2   10[COMRAM] unsigned int 
  8091 ;;  divisor         2   12[COMRAM] unsigned int 
  8092 ;; Auto vars:     Size  Location     Type
  8093 ;;  counter         1   14[COMRAM] unsigned char 
  8094 ;; Return value:  Size  Location     Type
  8095 ;;                  2   10[COMRAM] unsigned int 
  8096 ;; Registers used:
  8097 ;;		wreg, status,2, status,0
  8098 ;; Tracked objects:
  8099 ;;		On entry : 0/0
  8100 ;;		On exit  : 0/0
  8101 ;;		Unchanged: 0/0
  8102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8103 ;;      Params:         4       0       0       0       0       0       0
  8104 ;;      Locals:         1       0       0       0       0       0       0
  8105 ;;      Temps:          0       0       0       0       0       0       0
  8106 ;;      Totals:         5       0       0       0       0       0       0
  8107 ;;Total ram usage:        5 bytes
  8108 ;; Hardware stack levels used:    1
  8109 ;; Hardware stack levels required when called:    2
  8110 ;; This function calls:
  8111 ;;		Nothing
  8112 ;; This function is called by:
  8113 ;;		_format_number
  8114 ;;		_print_reading
  8115 ;; This function uses a non-reentrant model
  8116 ;;
  8117                           
  8118                           	psect	text44
  8119  002500                     __ptext44:
  8120                           	opt stack 0
  8121  002500                     ___lwmod:
  8122                           	opt stack 0
  8123  002500  FFFF               	dw	65535	; assembler added errata NOP
  8124                           
  8125                           ;incstack = 0
  8126  002502  500D               	movf	___lwmod@divisor,w,c
  8127  002504  100E               	iorwf	___lwmod@divisor+1,w,c
  8128  002506  E01A               	bz	l1034
  8129  002508  0E01               	movlw	1
  8130  00250A  6E0F               	movwf	___lwmod@counter,c
  8131  00250C  D005               	goto	l4239
  8132  00250E                     l4237:
  8133  00250E  FFFF               	dw	65535	; assembler added errata NOP
  8134  002510  90D8               	bcf	status,0,c
  8135  002512  360D               	rlcf	___lwmod@divisor,f,c
  8136  002514  360E               	rlcf	___lwmod@divisor+1,f,c
  8137  002516  2A0F               	incf	___lwmod@counter,f,c
  8138  002518                     l4239:
  8139  002518  FFFF               	dw	65535	; assembler added errata NOP
  8140  00251A  AE0E               	btfss	___lwmod@divisor+1,7,c
  8141  00251C  D7F8               	goto	l4237
  8142  00251E                     u3930:
  8143  00251E  FFFF               	dw	65535	; assembler added errata NOP
  8144  002520  500D               	movf	___lwmod@divisor,w,c
  8145  002522  5C0B               	subwf	___lwmod@dividend,w,c
  8146  002524  500E               	movf	___lwmod@divisor+1,w,c
  8147  002526  580C               	subwfb	___lwmod@dividend+1,w,c
  8148  002528  E304               	bnc	l4245
  8149  00252A  500D               	movf	___lwmod@divisor,w,c
  8150  00252C  5E0B               	subwf	___lwmod@dividend,f,c
  8151  00252E  500E               	movf	___lwmod@divisor+1,w,c
  8152  002530  5A0C               	subwfb	___lwmod@dividend+1,f,c
  8153  002532                     l4245:
  8154  002532  90D8               	bcf	status,0,c
  8155  002534  320E               	rrcf	___lwmod@divisor+1,f,c
  8156  002536  320D               	rrcf	___lwmod@divisor,f,c
  8157  002538  2E0F               	decfsz	___lwmod@counter,f,c
  8158  00253A  D7F1               	goto	u3930
  8159  00253C                     l1034:
  8160  00253C  C00B  F00B         	movff	___lwmod@dividend,?___lwmod
  8161  002540  C00C  F00C         	movff	___lwmod@dividend+1,?___lwmod+1
  8162  002544  0012               	return		;funcret
  8163  002546  FFFF               	dw	65535	; errata NOP
  8164  002548                     __end_of___lwmod:
  8165                           	opt stack 0
  8166                           tosu	equ	0xFFF
  8167                           tosh	equ	0xFFE
  8168                           tosl	equ	0xFFD
  8169                           pclath	equ	0xFFA
  8170                           tblptru	equ	0xFF8
  8171                           tblptrh	equ	0xFF7
  8172                           tblptrl	equ	0xFF6
  8173                           tablat	equ	0xFF5
  8174                           prodl	equ	0xFF3
  8175                           intcon	equ	0xFF2
  8176                           intcon2	equ	0xFF1
  8177                           postinc0	equ	0xFEE
  8178                           wreg	equ	0xFE8
  8179                           postdec1	equ	0xFE5
  8180                           fsr1l	equ	0xFE1
  8181                           indf2	equ	0xFDF
  8182                           postinc2	equ	0xFDE
  8183                           postdec2	equ	0xFDD
  8184                           fsr2h	equ	0xFDA
  8185                           fsr2l	equ	0xFD9
  8186                           status	equ	0xFD8
  8187                           
  8188 ;; *************** function ___lwdiv *****************
  8189 ;; Defined at:
  8190 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwdiv.c"
  8191 ;; Parameters:    Size  Location     Type
  8192 ;;  dividend        2   10[COMRAM] unsigned int 
  8193 ;;  divisor         2   12[COMRAM] unsigned int 
  8194 ;; Auto vars:     Size  Location     Type
  8195 ;;  quotient        2   15[COMRAM] unsigned int 
  8196 ;;  counter         1   14[COMRAM] unsigned char 
  8197 ;; Return value:  Size  Location     Type
  8198 ;;                  2   10[COMRAM] unsigned int 
  8199 ;; Registers used:
  8200 ;;		wreg, status,2, status,0
  8201 ;; Tracked objects:
  8202 ;;		On entry : 0/0
  8203 ;;		On exit  : 0/0
  8204 ;;		Unchanged: 0/0
  8205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8206 ;;      Params:         4       0       0       0       0       0       0
  8207 ;;      Locals:         3       0       0       0       0       0       0
  8208 ;;      Temps:          0       0       0       0       0       0       0
  8209 ;;      Totals:         7       0       0       0       0       0       0
  8210 ;;Total ram usage:        7 bytes
  8211 ;; Hardware stack levels used:    1
  8212 ;; Hardware stack levels required when called:    2
  8213 ;; This function calls:
  8214 ;;		Nothing
  8215 ;; This function is called by:
  8216 ;;		_format_number
  8217 ;;		_print_reading
  8218 ;; This function uses a non-reentrant model
  8219 ;;
  8220                           
  8221                           	psect	text45
  8222  002320                     __ptext45:
  8223                           	opt stack 0
  8224  002320                     ___lwdiv:
  8225                           	opt stack 0
  8226  002320  FFFF               	dw	65535	; assembler added errata NOP
  8227                           
  8228                           ;incstack = 0
  8229  002322  6A10               	clrf	___lwdiv@quotient,c
  8230  002324  6A11               	clrf	___lwdiv@quotient+1,c
  8231  002326  500D               	movf	___lwdiv@divisor,w,c
  8232  002328  100E               	iorwf	___lwdiv@divisor+1,w,c
  8233  00232A  E01E               	bz	l1024
  8234  00232C  0E01               	movlw	1
  8235  00232E  6E0F               	movwf	___lwdiv@counter,c
  8236  002330  D005               	goto	l4219
  8237  002332                     l4217:
  8238  002332  FFFF               	dw	65535	; assembler added errata NOP
  8239  002334  90D8               	bcf	status,0,c
  8240  002336  360D               	rlcf	___lwdiv@divisor,f,c
  8241  002338  360E               	rlcf	___lwdiv@divisor+1,f,c
  8242  00233A  2A0F               	incf	___lwdiv@counter,f,c
  8243  00233C                     l4219:
  8244  00233C  FFFF               	dw	65535	; assembler added errata NOP
  8245  00233E  AE0E               	btfss	___lwdiv@divisor+1,7,c
  8246  002340  D7F8               	goto	l4217
  8247  002342                     u3900:
  8248  002342  FFFF               	dw	65535	; assembler added errata NOP
  8249  002344  90D8               	bcf	status,0,c
  8250  002346  3610               	rlcf	___lwdiv@quotient,f,c
  8251  002348  3611               	rlcf	___lwdiv@quotient+1,f,c
  8252  00234A  500D               	movf	___lwdiv@divisor,w,c
  8253  00234C  5C0B               	subwf	___lwdiv@dividend,w,c
  8254  00234E  500E               	movf	___lwdiv@divisor+1,w,c
  8255  002350  580C               	subwfb	___lwdiv@dividend+1,w,c
  8256  002352  E305               	bnc	l4229
  8257  002354  500D               	movf	___lwdiv@divisor,w,c
  8258  002356  5E0B               	subwf	___lwdiv@dividend,f,c
  8259  002358  500E               	movf	___lwdiv@divisor+1,w,c
  8260  00235A  5A0C               	subwfb	___lwdiv@dividend+1,f,c
  8261  00235C  8010               	bsf	___lwdiv@quotient,0,c
  8262  00235E                     l4229:
  8263  00235E  90D8               	bcf	status,0,c
  8264  002360  320E               	rrcf	___lwdiv@divisor+1,f,c
  8265  002362  320D               	rrcf	___lwdiv@divisor,f,c
  8266  002364  2E0F               	decfsz	___lwdiv@counter,f,c
  8267  002366  D7ED               	goto	u3900
  8268  002368                     l1024:
  8269  002368  C010  F00B         	movff	___lwdiv@quotient,?___lwdiv
  8270  00236C  C011  F00C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8271  002370  0012               	return		;funcret
  8272  002372  FFFF               	dw	65535	; errata NOP
  8273  002374                     __end_of___lwdiv:
  8274                           	opt stack 0
  8275                           tosu	equ	0xFFF
  8276                           tosh	equ	0xFFE
  8277                           tosl	equ	0xFFD
  8278                           pclath	equ	0xFFA
  8279                           tblptru	equ	0xFF8
  8280                           tblptrh	equ	0xFF7
  8281                           tblptrl	equ	0xFF6
  8282                           tablat	equ	0xFF5
  8283                           prodl	equ	0xFF3
  8284                           intcon	equ	0xFF2
  8285                           intcon2	equ	0xFF1
  8286                           postinc0	equ	0xFEE
  8287                           wreg	equ	0xFE8
  8288                           postdec1	equ	0xFE5
  8289                           fsr1l	equ	0xFE1
  8290                           indf2	equ	0xFDF
  8291                           postinc2	equ	0xFDE
  8292                           postdec2	equ	0xFDD
  8293                           fsr2h	equ	0xFDA
  8294                           fsr2l	equ	0xFD9
  8295                           status	equ	0xFD8
  8296                           
  8297 ;; *************** function _buffer_puts *****************
  8298 ;; Defined at:
  8299 ;;		line 61 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../lib/buffer.c"
  8300 ;; Parameters:    Size  Location     Type
  8301 ;;  x               1   14[COMRAM] PTR const unsigned char 
  8302 ;;		 -> STR_14(6), 
  8303 ;; Auto vars:     Size  Location     Type
  8304 ;;		None
  8305 ;; Return value:  Size  Location     Type
  8306 ;;                  1    wreg      unsigned char 
  8307 ;; Registers used:
  8308 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8309 ;; Tracked objects:
  8310 ;;		On entry : 3F/0
  8311 ;;		On exit  : 3F/0
  8312 ;;		Unchanged: 0/0
  8313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8314 ;;      Params:         1       0       0       0       0       0       0
  8315 ;;      Locals:         0       0       0       0       0       0       0
  8316 ;;      Temps:          0       0       0       0       0       0       0
  8317 ;;      Totals:         1       0       0       0       0       0       0
  8318 ;;Total ram usage:        1 bytes
  8319 ;; Hardware stack levels used:    1
  8320 ;; Hardware stack levels required when called:    4
  8321 ;; This function calls:
  8322 ;;		_buffer_putch
  8323 ;; This function is called by:
  8324 ;;		_measure_freq
  8325 ;; This function uses a non-reentrant model
  8326 ;;
  8327                           
  8328                           	psect	text46
  8329  002736                     __ptext46:
  8330                           	opt stack 0
  8331  002736                     _buffer_puts:
  8332                           	opt stack 0
  8333  002736  FFFF               	dw	65535	; assembler added errata NOP
  8334                           
  8335                           ; BSR set to: 0
  8336                           ;buffer.c: 62: while(*x) {
  8337                           
  8338                           ;incstack = 0
  8339  002738  D00A               	goto	l4367
  8340  00273A                     l4363:
  8341                           
  8342                           ; BSR set to: 0
  8343                           ;buffer.c: 63: buffer_putch(*x);
  8344  00273A  C00F  FFF6         	movff	buffer_puts@x,tblptrl
  8345  00273E                     	if	1	;There is more than 1 active tblptr byte
  8346  00273E  0E06               	movlw	high __smallconst
  8347  002740  6EF7               	movwf	tblptrh,c
  8348  002742                     	endif
  8349  002742                     	if	0	;tblptru may be non-zero
  8350  002742                     	endif
  8351  002742                     	if	0	;tblptru may be non-zero
  8352  002742                     	endif
  8353  002742  0008               	tblrd		*
  8354  002744  FFFF               	dw	65535	; errata NOP
  8355  002746  50F5               	movf	tablat,w,c
  8356  002748  EC78  F014         	call	_buffer_putch
  8357                           
  8358                           ; BSR set to: 0
  8359                           ;buffer.c: 64: ++x;
  8360  00274C  2A0F               	incf	buffer_puts@x,f,c
  8361  00274E                     l4367:
  8362  00274E  FFFF               	dw	65535	; assembler added errata NOP
  8363                           
  8364                           ; BSR set to: 0
  8365  002750  C00F  FFF6         	movff	buffer_puts@x,tblptrl
  8366  002754                     	if	1	;There is more than 1 active tblptr byte
  8367  002754  0E06               	movlw	high __smallconst
  8368  002756  6EF7               	movwf	tblptrh,c
  8369  002758                     	endif
  8370  002758                     	if	0	;tblptru may be non-zero
  8371  002758                     	endif
  8372  002758                     	if	0	;tblptru may be non-zero
  8373  002758                     	endif
  8374  002758  0008               	tblrd		*
  8375  00275A  FFFF               	dw	65535	; errata NOP
  8376  00275C  50F5               	movf	tablat,w,c
  8377  00275E  E1ED               	bnz	l4363
  8378                           
  8379                           ; BSR set to: 0
  8380  002760  0012               	return		;funcret
  8381  002762  FFFF               	dw	65535	; errata NOP
  8382  002764                     __end_of_buffer_puts:
  8383                           	opt stack 0
  8384                           tosu	equ	0xFFF
  8385                           tosh	equ	0xFFE
  8386                           tosl	equ	0xFFD
  8387                           pclath	equ	0xFFA
  8388                           tblptru	equ	0xFF8
  8389                           tblptrh	equ	0xFF7
  8390                           tblptrl	equ	0xFF6
  8391                           tablat	equ	0xFF5
  8392                           prodl	equ	0xFF3
  8393                           intcon	equ	0xFF2
  8394                           intcon2	equ	0xFF1
  8395                           postinc0	equ	0xFEE
  8396                           wreg	equ	0xFE8
  8397                           postdec1	equ	0xFE5
  8398                           fsr1l	equ	0xFE1
  8399                           indf2	equ	0xFDF
  8400                           postinc2	equ	0xFDE
  8401                           postdec2	equ	0xFDD
  8402                           fsr2h	equ	0xFDA
  8403                           fsr2l	equ	0xFD9
  8404                           status	equ	0xFD8
  8405                           
  8406 ;; *************** function _buffer_putc *****************
  8407 ;; Defined at:
  8408 ;;		line 30 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../lib/buffer.c"
  8409 ;; Parameters:    Size  Location     Type
  8410 ;;  ch              1    wreg     unsigned char 
  8411 ;; Auto vars:     Size  Location     Type
  8412 ;;  ch              1   12[COMRAM] unsigned char 
  8413 ;; Return value:  Size  Location     Type
  8414 ;;                  1    wreg      unsigned char 
  8415 ;; Registers used:
  8416 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8417 ;; Tracked objects:
  8418 ;;		On entry : 0/0
  8419 ;;		On exit  : 3F/0
  8420 ;;		Unchanged: 0/0
  8421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8422 ;;      Params:         0       0       0       0       0       0       0
  8423 ;;      Locals:         1       0       0       0       0       0       0
  8424 ;;      Temps:          2       0       0       0       0       0       0
  8425 ;;      Totals:         3       0       0       0       0       0       0
  8426 ;;Total ram usage:        3 bytes
  8427 ;; Hardware stack levels used:    1
  8428 ;; Hardware stack levels required when called:    2
  8429 ;; This function calls:
  8430 ;;		Nothing
  8431 ;; This function is called by:
  8432 ;;		_buffer_putch
  8433 ;; This function uses a non-reentrant model
  8434 ;;
  8435                           
  8436                           	psect	text47
  8437  002468                     __ptext47:
  8438                           	opt stack 0
  8439  002468                     _buffer_putc:
  8440                           	opt stack 0
  8441  002468  FFFF               	dw	65535	; assembler added errata NOP
  8442                           
  8443                           ; BSR set to: 0
  8444                           ;incstack = 0
  8445                           ;buffer_putc@ch stored from wreg
  8446  00246A  6E0D               	movwf	buffer_putc@ch,c
  8447                           
  8448                           ;buffer.c: 31: if(16 - buffer.n <= 0)
  8449  00246C  0E10               	movlw	16
  8450  00246E  6E0B               	movwf	??_buffer_putc& (0+255),c
  8451  002470  6A0C               	clrf	(??_buffer_putc+1)& (0+255),c
  8452  002472  0100               	movlb	0	; () banked
  8453  002474  39B6               	swapf	(_buffer+16)& (0+255),w,b
  8454  002476  0B0F               	andlw	15
  8455  002478  5E0B               	subwf	??_buffer_putc,f,c
  8456  00247A  0E00               	movlw	0
  8457  00247C  5A0C               	subwfb	??_buffer_putc+1,f,c
  8458  00247E  BE0C               	btfsc	??_buffer_putc+1,7,c
  8459  002480  D017               	goto	l241
  8460  002482  500C               	movf	??_buffer_putc+1,w,c
  8461  002484  E102               	bnz	l4037
  8462  002486  040B               	decf	??_buffer_putc,w,c
  8463  002488  E313               	bnc	l241
  8464  00248A                     l4037:
  8465                           
  8466                           ; BSR set to: 0
  8467                           ;buffer.c: 33: buffer.x[buffer.n] = ch;
  8468  00248A  39B6               	swapf	(_buffer+16)& (0+255),w,b
  8469  00248C  0B0F               	andlw	15
  8470  00248E  6E0B               	movwf	??_buffer_putc& (0+255),c
  8471  002490  500B               	movf	??_buffer_putc,w,c
  8472  002492  0FA6               	addlw	low _buffer
  8473  002494  6ED9               	movwf	fsr2l,c
  8474  002496  6ADA               	clrf	fsr2h,c
  8475  002498  C00D  FFDF         	movff	buffer_putc@ch,indf2
  8476                           
  8477                           ; BSR set to: 0
  8478                           ;buffer.c: 34: buffer.n++;
  8479  00249C  39B6               	swapf	(_buffer+16)& (0+255),w,b
  8480  00249E  0B0F               	andlw	15
  8481  0024A0  6E0B               	movwf	??_buffer_putc& (0+255),c
  8482  0024A2  2A0B               	incf	??_buffer_putc,f,c
  8483  0024A4  3A0B               	swapf	??_buffer_putc& (0+255),f,c
  8484  0024A6  51B6               	movf	(_buffer+16)& (0+255),w,b
  8485  0024A8  180B               	xorwf	??_buffer_putc& (0+255),w,c
  8486  0024AA  0B0F               	andlw	-241
  8487  0024AC  180B               	xorwf	??_buffer_putc& (0+255),w,c
  8488  0024AE  6FB6               	movwf	(_buffer+16)& (0+255),b
  8489  0024B0                     l241:
  8490  0024B0  FFFF               	dw	65535	; assembler added errata NOP
  8491                           
  8492                           ; BSR set to: 0
  8493  0024B2  0012               	return		;funcret
  8494  0024B4  FFFF               	dw	65535	; errata NOP
  8495  0024B6                     __end_of_buffer_putc:
  8496                           	opt stack 0
  8497                           tosu	equ	0xFFF
  8498                           tosh	equ	0xFFE
  8499                           tosl	equ	0xFFD
  8500                           pclath	equ	0xFFA
  8501                           tblptru	equ	0xFF8
  8502                           tblptrh	equ	0xFF7
  8503                           tblptrl	equ	0xFF6
  8504                           tablat	equ	0xFF5
  8505                           prodl	equ	0xFF3
  8506                           intcon	equ	0xFF2
  8507                           intcon2	equ	0xFF1
  8508                           postinc0	equ	0xFEE
  8509                           wreg	equ	0xFE8
  8510                           postdec1	equ	0xFE5
  8511                           fsr1l	equ	0xFE1
  8512                           indf2	equ	0xFDF
  8513                           postinc2	equ	0xFDE
  8514                           postdec2	equ	0xFDD
  8515                           fsr2h	equ	0xFDA
  8516                           fsr2l	equ	0xFD9
  8517                           status	equ	0xFD8
  8518                           
  8519 ;; *************** function _buffer_init *****************
  8520 ;; Defined at:
  8521 ;;		line 10 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../lib/buffer.c"
  8522 ;; Parameters:    Size  Location     Type
  8523 ;;		None
  8524 ;; Auto vars:     Size  Location     Type
  8525 ;;		None
  8526 ;; Return value:  Size  Location     Type
  8527 ;;                  1    wreg      void 
  8528 ;; Registers used:
  8529 ;;		wreg, status,2
  8530 ;; Tracked objects:
  8531 ;;		On entry : 0/0
  8532 ;;		On exit  : 3F/0
  8533 ;;		Unchanged: 0/0
  8534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8535 ;;      Params:         0       0       0       0       0       0       0
  8536 ;;      Locals:         0       0       0       0       0       0       0
  8537 ;;      Temps:          0       0       0       0       0       0       0
  8538 ;;      Totals:         0       0       0       0       0       0       0
  8539 ;;Total ram usage:        0 bytes
  8540 ;; Hardware stack levels used:    1
  8541 ;; Hardware stack levels required when called:    2
  8542 ;; This function calls:
  8543 ;;		Nothing
  8544 ;; This function is called by:
  8545 ;;		_measure_freq
  8546 ;; This function uses a non-reentrant model
  8547 ;;
  8548                           
  8549                           	psect	text48
  8550  0028D0                     __ptext48:
  8551                           	opt stack 0
  8552  0028D0                     _buffer_init:
  8553                           	opt stack 0
  8554  0028D0  FFFF               	dw	65535	; assembler added errata NOP
  8555                           
  8556                           ;buffer.c: 11: buffer.p = 0;
  8557                           
  8558                           ; BSR set to: 0
  8559                           ;incstack = 0
  8560  0028D2  0EF0               	movlw	-16
  8561  0028D4  0100               	movlb	0	; () banked
  8562  0028D6  17B6               	andwf	(_buffer+16)& (0+255),f,b
  8563                           
  8564                           ;buffer.c: 12: buffer.n = 0;
  8565  0028D8  0E0F               	movlw	-241
  8566  0028DA  17B6               	andwf	(_buffer+16)& (0+255),f,b
  8567                           
  8568                           ; BSR set to: 0
  8569  0028DC  0C0F               	retlw	15	;funcret
  8570  0028DE  FFFF               	dw	65535	; errata NOP
  8571  0028E0                     __end_of_buffer_init:
  8572                           	opt stack 0
  8573                           tosu	equ	0xFFF
  8574                           tosh	equ	0xFFE
  8575                           tosl	equ	0xFFD
  8576                           pclath	equ	0xFFA
  8577                           tblptru	equ	0xFF8
  8578                           tblptrh	equ	0xFF7
  8579                           tblptrl	equ	0xFF6
  8580                           tablat	equ	0xFF5
  8581                           prodl	equ	0xFF3
  8582                           intcon	equ	0xFF2
  8583                           intcon2	equ	0xFF1
  8584                           postinc0	equ	0xFEE
  8585                           wreg	equ	0xFE8
  8586                           postdec1	equ	0xFE5
  8587                           fsr1l	equ	0xFE1
  8588                           indf2	equ	0xFDF
  8589                           postinc2	equ	0xFDE
  8590                           postdec2	equ	0xFDD
  8591                           fsr2h	equ	0xFDA
  8592                           fsr2l	equ	0xFD9
  8593                           status	equ	0xFD8
  8594                           
  8595 ;; *************** function _lcd_clear *****************
  8596 ;; Defined at:
  8597 ;;		line 292 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../lib/lcd44780.c"
  8598 ;; Parameters:    Size  Location     Type
  8599 ;;		None
  8600 ;; Auto vars:     Size  Location     Type
  8601 ;;		None
  8602 ;; Return value:  Size  Location     Type
  8603 ;;                  1    wreg      void 
  8604 ;; Registers used:
  8605 ;;		wreg, status,2, status,0, cstack
  8606 ;; Tracked objects:
  8607 ;;		On entry : 0/0
  8608 ;;		On exit  : 0/0
  8609 ;;		Unchanged: 0/0
  8610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8611 ;;      Params:         0       0       0       0       0       0       0
  8612 ;;      Locals:         0       0       0       0       0       0       0
  8613 ;;      Temps:          1       0       0       0       0       0       0
  8614 ;;      Totals:         1       0       0       0       0       0       0
  8615 ;;Total ram usage:        1 bytes
  8616 ;; Hardware stack levels used:    1
  8617 ;; Hardware stack levels required when called:    5
  8618 ;; This function calls:
  8619 ;;		_lcd_command
  8620 ;; This function is called by:
  8621 ;;		_main
  8622 ;;		_calibrate
  8623 ;; This function uses a non-reentrant model
  8624 ;;
  8625                           
  8626                           	psect	text49
  8627  002890                     __ptext49:
  8628                           	opt stack 0
  8629  002890                     _lcd_clear:
  8630                           	opt stack 0
  8631  002890  FFFF               	dw	65535	; assembler added errata NOP
  8632                           
  8633                           ;lcd44780.c: 293: lcd_command(0x01);
  8634                           
  8635                           ; BSR set to: 0
  8636                           ;incstack = 0
  8637  002892  0E01               	movlw	1
  8638  002894  EC70  F014         	call	_lcd_command
  8639                           
  8640                           ;lcd44780.c: 294: _delay((unsigned long)((2)*(20000000/4000.0)));
  8641  002898  0E0A               	movlw	10
  8642  00289A  6E0F               	movwf	??_lcd_clear& (0+255),c
  8643  00289C  0EBE               	movlw	190
  8644  00289E                     u4767:
  8645  00289E  FFFF               	dw	65535	; errata NOP
  8646  0028A0  2EE8               	decfsz	wreg,f,c
  8647  0028A2  D7FD               	bra	u4767
  8648  0028A4  2E0F               	decfsz	??_lcd_clear& (0+255),f,c
  8649  0028A6  D7FB               	bra	u4767
  8650  0028A8  D000               	nop2	
  8651  0028AA  0012               	return		;funcret
  8652  0028AC  FFFF               	dw	65535	; errata NOP
  8653  0028AE                     __end_of_lcd_clear:
  8654                           	opt stack 0
  8655                           tosu	equ	0xFFF
  8656                           tosh	equ	0xFFE
  8657                           tosl	equ	0xFFD
  8658                           pclath	equ	0xFFA
  8659                           tblptru	equ	0xFF8
  8660                           tblptrh	equ	0xFF7
  8661                           tblptrl	equ	0xFF6
  8662                           tablat	equ	0xFF5
  8663                           prodl	equ	0xFF3
  8664                           intcon	equ	0xFF2
  8665                           intcon2	equ	0xFF1
  8666                           postinc0	equ	0xFEE
  8667                           wreg	equ	0xFE8
  8668                           postdec1	equ	0xFE5
  8669                           fsr1l	equ	0xFE1
  8670                           indf2	equ	0xFDF
  8671                           postinc2	equ	0xFDE
  8672                           postdec2	equ	0xFDD
  8673                           fsr2h	equ	0xFDA
  8674                           fsr2l	equ	0xFD9
  8675                           status	equ	0xFD8
  8676                           
  8677 ;; *************** function _lcd_command *****************
  8678 ;; Defined at:
  8679 ;;		line 127 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../lib/lcd44780.c"
  8680 ;; Parameters:    Size  Location     Type
  8681 ;;  value           1    wreg     unsigned char 
  8682 ;; Auto vars:     Size  Location     Type
  8683 ;;  value           1   13[COMRAM] unsigned char 
  8684 ;; Return value:  Size  Location     Type
  8685 ;;                  1    wreg      void 
  8686 ;; Registers used:
  8687 ;;		wreg, status,2, status,0, cstack
  8688 ;; Tracked objects:
  8689 ;;		On entry : 0/0
  8690 ;;		On exit  : 0/0
  8691 ;;		Unchanged: 0/0
  8692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8693 ;;      Params:         0       0       0       0       0       0       0
  8694 ;;      Locals:         1       0       0       0       0       0       0
  8695 ;;      Temps:          0       0       0       0       0       0       0
  8696 ;;      Totals:         1       0       0       0       0       0       0
  8697 ;;Total ram usage:        1 bytes
  8698 ;; Hardware stack levels used:    1
  8699 ;; Hardware stack levels required when called:    4
  8700 ;; This function calls:
  8701 ;;		_lcd_send
  8702 ;; This function is called by:
  8703 ;;		_lcd_gotoxy
  8704 ;;		_lcd_clear
  8705 ;;		_lcd_begin
  8706 ;; This function uses a non-reentrant model
  8707 ;;
  8708                           
  8709                           	psect	text50
  8710  0028E0                     __ptext50:
  8711                           	opt stack 0
  8712  0028E0                     _lcd_command:
  8713                           	opt stack 0
  8714  0028E0  FFFF               	dw	65535	; assembler added errata NOP
  8715                           
  8716                           ;incstack = 0
  8717                           ;lcd_command@value stored from wreg
  8718  0028E2  6E0E               	movwf	lcd_command@value,c
  8719                           
  8720                           ;lcd44780.c: 128: lcd_send(value, 0);
  8721  0028E4  0E00               	movlw	0
  8722  0028E6  6E0C               	movwf	lcd_send@mode,c
  8723  0028E8  500E               	movf	lcd_command@value,w,c
  8724  0028EA  EF29  F014         	goto	_lcd_send
  8725  0028EE  FFFF               	dw	65535	; errata NOP
  8726  0028F0                     __end_of_lcd_command:
  8727                           	opt stack 0
  8728                           tosu	equ	0xFFF
  8729                           tosh	equ	0xFFE
  8730                           tosl	equ	0xFFD
  8731                           pclath	equ	0xFFA
  8732                           tblptru	equ	0xFF8
  8733                           tblptrh	equ	0xFF7
  8734                           tblptrl	equ	0xFF6
  8735                           tablat	equ	0xFF5
  8736                           prodl	equ	0xFF3
  8737                           intcon	equ	0xFF2
  8738                           intcon2	equ	0xFF1
  8739                           postinc0	equ	0xFEE
  8740                           wreg	equ	0xFE8
  8741                           postdec1	equ	0xFE5
  8742                           fsr1l	equ	0xFE1
  8743                           indf2	equ	0xFDF
  8744                           postinc2	equ	0xFDE
  8745                           postdec2	equ	0xFDD
  8746                           fsr2h	equ	0xFDA
  8747                           fsr2l	equ	0xFD9
  8748                           status	equ	0xFD8
  8749                           
  8750 ;; *************** function _lcd_send *****************
  8751 ;; Defined at:
  8752 ;;		line 103 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../lib/lcd44780.c"
  8753 ;; Parameters:    Size  Location     Type
  8754 ;;  value           1    wreg     unsigned char 
  8755 ;;  mode            1   11[COMRAM] unsigned char 
  8756 ;; Auto vars:     Size  Location     Type
  8757 ;;  value           1   12[COMRAM] unsigned char 
  8758 ;; Return value:  Size  Location     Type
  8759 ;;                  1    wreg      void 
  8760 ;; Registers used:
  8761 ;;		wreg, status,2, status,0, cstack
  8762 ;; Tracked objects:
  8763 ;;		On entry : 0/0
  8764 ;;		On exit  : 0/0
  8765 ;;		Unchanged: 0/0
  8766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8767 ;;      Params:         1       0       0       0       0       0       0
  8768 ;;      Locals:         1       0       0       0       0       0       0
  8769 ;;      Temps:          0       0       0       0       0       0       0
  8770 ;;      Totals:         2       0       0       0       0       0       0
  8771 ;;Total ram usage:        2 bytes
  8772 ;; Hardware stack levels used:    1
  8773 ;; Hardware stack levels required when called:    3
  8774 ;; This function calls:
  8775 ;;		_lcd_write4bits
  8776 ;; This function is called by:
  8777 ;;		_lcd_command
  8778 ;;		_lcd_putch
  8779 ;; This function uses a non-reentrant model
  8780 ;;
  8781                           
  8782                           	psect	text51
  8783  002852                     __ptext51:
  8784                           	opt stack 0
  8785  002852                     _lcd_send:
  8786                           	opt stack 0
  8787  002852  FFFF               	dw	65535	; assembler added errata NOP
  8788                           
  8789                           ;incstack = 0
  8790                           ;lcd_send@value stored from wreg
  8791  002854  6E0D               	movwf	lcd_send@value,c
  8792                           
  8793                           ;lcd44780.c: 104: if(mode) {
  8794  002856  500C               	movf	lcd_send@mode,w,c
  8795  002858  E002               	bz	l4067
  8796                           
  8797                           ;lcd44780.c: 105: LATB |= 0b0100;
  8798  00285A  848A               	bsf	3978,2,c	;volatile
  8799                           
  8800                           ;lcd44780.c: 106: } else {
  8801  00285C  D001               	goto	l4069
  8802  00285E                     l4067:
  8803                           
  8804                           ;lcd44780.c: 107: LATB &= ~0b0100;
  8805  00285E  948A               	bcf	3978,2,c	;volatile
  8806  002860                     l4069:
  8807  002860  FFFF               	dw	65535	; assembler added errata NOP
  8808                           
  8809                           ;lcd44780.c: 108: }
  8810                           ;lcd44780.c: 115: {
  8811                           ;lcd44780.c: 116: lcd_write4bits(value >> 4);
  8812  002862  380D               	swapf	lcd_send@value,w,c
  8813  002864  0B0F               	andlw	15
  8814  002866  EC16  F014         	call	_lcd_write4bits
  8815                           
  8816                           ;lcd44780.c: 117: lcd_write4bits(value);
  8817  00286A  500D               	movf	lcd_send@value,w,c
  8818  00286C  EF16  F014         	goto	_lcd_write4bits
  8819  002870  FFFF               	dw	65535	; errata NOP
  8820  002872                     __end_of_lcd_send:
  8821                           	opt stack 0
  8822                           tosu	equ	0xFFF
  8823                           tosh	equ	0xFFE
  8824                           tosl	equ	0xFFD
  8825                           pclath	equ	0xFFA
  8826                           tblptru	equ	0xFF8
  8827                           tblptrh	equ	0xFF7
  8828                           tblptrl	equ	0xFF6
  8829                           tablat	equ	0xFF5
  8830                           prodl	equ	0xFF3
  8831                           intcon	equ	0xFF2
  8832                           intcon2	equ	0xFF1
  8833                           postinc0	equ	0xFEE
  8834                           wreg	equ	0xFE8
  8835                           postdec1	equ	0xFE5
  8836                           fsr1l	equ	0xFE1
  8837                           indf2	equ	0xFDF
  8838                           postinc2	equ	0xFDE
  8839                           postdec2	equ	0xFDD
  8840                           fsr2h	equ	0xFDA
  8841                           fsr2l	equ	0xFD9
  8842                           status	equ	0xFD8
  8843                           
  8844 ;; *************** function _lcd_write4bits *****************
  8845 ;; Defined at:
  8846 ;;		line 34 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../lib/lcd44780.c"
  8847 ;; Parameters:    Size  Location     Type
  8848 ;;  value           1    wreg     unsigned char 
  8849 ;; Auto vars:     Size  Location     Type
  8850 ;;  value           1   10[COMRAM] unsigned char 
  8851 ;; Return value:  Size  Location     Type
  8852 ;;                  1    wreg      void 
  8853 ;; Registers used:
  8854 ;;		wreg, status,2, status,0
  8855 ;; Tracked objects:
  8856 ;;		On entry : 0/0
  8857 ;;		On exit  : 0/0
  8858 ;;		Unchanged: 0/0
  8859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8860 ;;      Params:         0       0       0       0       0       0       0
  8861 ;;      Locals:         1       0       0       0       0       0       0
  8862 ;;      Temps:          0       0       0       0       0       0       0
  8863 ;;      Totals:         1       0       0       0       0       0       0
  8864 ;;Total ram usage:        1 bytes
  8865 ;; Hardware stack levels used:    1
  8866 ;; Hardware stack levels required when called:    2
  8867 ;; This function calls:
  8868 ;;		Nothing
  8869 ;; This function is called by:
  8870 ;;		_lcd_send
  8871 ;;		_lcd_begin
  8872 ;; This function uses a non-reentrant model
  8873 ;;
  8874                           
  8875                           	psect	text52
  8876  00282C                     __ptext52:
  8877                           	opt stack 0
  8878  00282C                     _lcd_write4bits:
  8879                           	opt stack 0
  8880  00282C  FFFF               	dw	65535	; assembler added errata NOP
  8881                           
  8882                           ;incstack = 0
  8883                           ;lcd_write4bits@value stored from wreg
  8884  00282E  6E0B               	movwf	lcd_write4bits@value,c
  8885                           
  8886                           ;lcd44780.c: 39: LATB &= 0b00001111;
  8887  002830  0E0F               	movlw	15
  8888  002832  168A               	andwf	3978,f,c	;volatile
  8889                           
  8890                           ;lcd44780.c: 40: LATB |= value << 4;
  8891  002834  380B               	swapf	lcd_write4bits@value,w,c
  8892  002836  0BF0               	andlw	240
  8893  002838  128A               	iorwf	3978,f,c	;volatile
  8894                           
  8895                           ;lcd44780.c: 55: LATB |= 0b1000; _delay((unsigned long)((4)*(20000000/4000000.0))); LATB
      +                           &= ~0b1000; _delay((unsigned long)((100)*(20000000/4000000.0)));;
  8896  00283A  868A               	bsf	3978,3,c	;volatile
  8897  00283C  0E05               	movlw	5
  8898  00283E                     u4777:
  8899  00283E  FFFF               	dw	65535	; errata NOP
  8900  002840  2EE8               	decfsz	wreg,f,c
  8901  002842  D7FD               	bra	u4777
  8902  002844  968A               	bcf	3978,3,c	;volatile
  8903  002846  0E7D               	movlw	125
  8904  002848                     u4787:
  8905  002848  FFFF               	dw	65535	; errata NOP
  8906  00284A  2EE8               	decfsz	wreg,f,c
  8907  00284C  D7FD               	bra	u4787
  8908  00284E  0012               	return		;funcret
  8909  002850  FFFF               	dw	65535	; errata NOP
  8910  002852                     __end_of_lcd_write4bits:
  8911                           	opt stack 0
  8912                           tosu	equ	0xFFF
  8913                           tosh	equ	0xFFE
  8914                           tosl	equ	0xFFD
  8915                           pclath	equ	0xFFA
  8916                           tblptru	equ	0xFF8
  8917                           tblptrh	equ	0xFF7
  8918                           tblptrl	equ	0xFF6
  8919                           tablat	equ	0xFF5
  8920                           prodl	equ	0xFF3
  8921                           intcon	equ	0xFF2
  8922                           intcon2	equ	0xFF1
  8923                           postinc0	equ	0xFEE
  8924                           wreg	equ	0xFE8
  8925                           postdec1	equ	0xFE5
  8926                           fsr1l	equ	0xFE1
  8927                           indf2	equ	0xFDF
  8928                           postinc2	equ	0xFDE
  8929                           postdec2	equ	0xFDD
  8930                           fsr2h	equ	0xFDA
  8931                           fsr2l	equ	0xFD9
  8932                           status	equ	0xFD8
  8933                           
  8934 ;; *************** function _delay10ms *****************
  8935 ;; Defined at:
  8936 ;;		line 65 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../LC-meter.c"
  8937 ;; Parameters:    Size  Location     Type
  8938 ;;  period_10ms     1    wreg     unsigned char 
  8939 ;; Auto vars:     Size  Location     Type
  8940 ;;  period_10ms     1    0[COMRAM] unsigned char 
  8941 ;; Return value:  Size  Location     Type
  8942 ;;                  1    wreg      void 
  8943 ;; Registers used:
  8944 ;;		wreg
  8945 ;; Tracked objects:
  8946 ;;		On entry : 0/0
  8947 ;;		On exit  : 0/0
  8948 ;;		Unchanged: 0/0
  8949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8950 ;;      Params:         0       0       0       0       0       0       0
  8951 ;;      Locals:         0       0       0       0       0       0       0
  8952 ;;      Temps:          0       0       0       0       0       0       0
  8953 ;;      Totals:         0       0       0       0       0       0       0
  8954 ;;Total ram usage:        0 bytes
  8955 ;; Hardware stack levels used:    1
  8956 ;; Hardware stack levels required when called:    2
  8957 ;; This function calls:
  8958 ;;		Nothing
  8959 ;; This function is called by:
  8960 ;;		_main
  8961 ;;		_calibrate
  8962 ;; This function uses a non-reentrant model
  8963 ;;
  8964                           
  8965                           	psect	text53
  8966  0028FC                     __ptext53:
  8967                           	opt stack 0
  8968  0028FC                     _delay10ms:
  8969                           	opt stack 0
  8970  0028FC  FFFF               	dw	65535	; assembler added errata NOP
  8971                           
  8972                           ;incstack = 0
  8973  0028FE  0012               	return		;funcret
  8974  002900  FFFF               	dw	65535	; errata NOP
  8975  002902                     __end_of_delay10ms:
  8976                           	opt stack 0
  8977                           tosu	equ	0xFFF
  8978                           tosh	equ	0xFFE
  8979                           tosl	equ	0xFFD
  8980                           pclath	equ	0xFFA
  8981                           tblptru	equ	0xFF8
  8982                           tblptrh	equ	0xFF7
  8983                           tblptrl	equ	0xFF6
  8984                           tablat	equ	0xFF5
  8985                           prodl	equ	0xFF3
  8986                           intcon	equ	0xFF2
  8987                           intcon2	equ	0xFF1
  8988                           postinc0	equ	0xFEE
  8989                           wreg	equ	0xFE8
  8990                           postdec1	equ	0xFE5
  8991                           fsr1l	equ	0xFE1
  8992                           indf2	equ	0xFDF
  8993                           postinc2	equ	0xFDE
  8994                           postdec2	equ	0xFDD
  8995                           fsr2h	equ	0xFDA
  8996                           fsr2l	equ	0xFD9
  8997                           status	equ	0xFD8
  8998                           
  8999 ;; *************** function ___lwtoft *****************
  9000 ;; Defined at:
  9001 ;;		line 28 in file "/opt/microchip/xc8/v1.45/sources/common/lwtoft.c"
  9002 ;; Parameters:    Size  Location     Type
  9003 ;;  c               2   67[COMRAM] unsigned int 
  9004 ;; Auto vars:     Size  Location     Type
  9005 ;;		None
  9006 ;; Return value:  Size  Location     Type
  9007 ;;                  3   67[COMRAM] float 
  9008 ;; Registers used:
  9009 ;;		wreg, status,2, status,0, cstack
  9010 ;; Tracked objects:
  9011 ;;		On entry : 0/0
  9012 ;;		On exit  : 0/0
  9013 ;;		Unchanged: 0/0
  9014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9015 ;;      Params:         3       0       0       0       0       0       0
  9016 ;;      Locals:         0       0       0       0       0       0       0
  9017 ;;      Temps:          0       0       0       0       0       0       0
  9018 ;;      Totals:         3       0       0       0       0       0       0
  9019 ;;Total ram usage:        3 bytes
  9020 ;; Hardware stack levels used:    1
  9021 ;; Hardware stack levels required when called:    3
  9022 ;; This function calls:
  9023 ;;		___ftpack
  9024 ;; This function is called by:
  9025 ;;		_calibrate
  9026 ;;		_measure_capacitance
  9027 ;;		_measure_inductance
  9028 ;; This function uses a non-reentrant model
  9029 ;;
  9030                           
  9031                           	psect	text54
  9032  0027DE                     __ptext54:
  9033                           	opt stack 0
  9034  0027DE                     ___lwtoft:
  9035                           	opt stack 0
  9036  0027DE  FFFF               	dw	65535	; assembler added errata NOP
  9037                           
  9038                           ;incstack = 0
  9039  0027E0  C044  F00B         	movff	___lwtoft@c,___ftpack@arg
  9040  0027E4  C045  F00C         	movff	___lwtoft@c+1,___ftpack@arg+1
  9041  0027E8  6A0D               	clrf	___ftpack@arg+2,c
  9042  0027EA  0E8E               	movlw	142
  9043  0027EC  6E0E               	movwf	___ftpack@exp,c
  9044  0027EE  0E00               	movlw	0
  9045  0027F0  6E0F               	movwf	___ftpack@sign,c
  9046  0027F2  ECF2  F00F         	call	___ftpack	;wreg free
  9047  0027F6  C00B  F044         	movff	?___ftpack,?___lwtoft
  9048  0027FA  C00C  F045         	movff	?___ftpack+1,?___lwtoft+1
  9049  0027FE  C00D  F046         	movff	?___ftpack+2,?___lwtoft+2
  9050  002802  0012               	return		;funcret
  9051  002804  FFFF               	dw	65535	; errata NOP
  9052  002806                     __end_of___lwtoft:
  9053                           	opt stack 0
  9054                           tosu	equ	0xFFF
  9055                           tosh	equ	0xFFE
  9056                           tosl	equ	0xFFD
  9057                           pclath	equ	0xFFA
  9058                           tblptru	equ	0xFF8
  9059                           tblptrh	equ	0xFF7
  9060                           tblptrl	equ	0xFF6
  9061                           tablat	equ	0xFF5
  9062                           prodl	equ	0xFF3
  9063                           intcon	equ	0xFF2
  9064                           intcon2	equ	0xFF1
  9065                           postinc0	equ	0xFEE
  9066                           wreg	equ	0xFE8
  9067                           postdec1	equ	0xFE5
  9068                           fsr1l	equ	0xFE1
  9069                           indf2	equ	0xFDF
  9070                           postinc2	equ	0xFDE
  9071                           postdec2	equ	0xFDD
  9072                           fsr2h	equ	0xFDA
  9073                           fsr2l	equ	0xFD9
  9074                           status	equ	0xFD8
  9075                           
  9076 ;; *************** function ___ftpack *****************
  9077 ;; Defined at:
  9078 ;;		line 62 in file "/opt/microchip/xc8/v1.45/sources/common/float.c"
  9079 ;; Parameters:    Size  Location     Type
  9080 ;;  arg             3   10[COMRAM] unsigned um
  9081 ;;  exp             1   13[COMRAM] unsigned char 
  9082 ;;  sign            1   14[COMRAM] unsigned char 
  9083 ;; Auto vars:     Size  Location     Type
  9084 ;;		None
  9085 ;; Return value:  Size  Location     Type
  9086 ;;                  3   10[COMRAM] float 
  9087 ;; Registers used:
  9088 ;;		wreg, status,2, status,0
  9089 ;; Tracked objects:
  9090 ;;		On entry : 0/0
  9091 ;;		On exit  : 0/0
  9092 ;;		Unchanged: 0/0
  9093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9094 ;;      Params:         5       0       0       0       0       0       0
  9095 ;;      Locals:         0       0       0       0       0       0       0
  9096 ;;      Temps:          3       0       0       0       0       0       0
  9097 ;;      Totals:         8       0       0       0       0       0       0
  9098 ;;Total ram usage:        8 bytes
  9099 ;; Hardware stack levels used:    1
  9100 ;; Hardware stack levels required when called:    2
  9101 ;; This function calls:
  9102 ;;		Nothing
  9103 ;; This function is called by:
  9104 ;;		___altoft
  9105 ;;		___awtoft
  9106 ;;		___ftadd
  9107 ;;		___ftdiv
  9108 ;;		___ftmul
  9109 ;;		___lltoft
  9110 ;;		___lwtoft
  9111 ;; This function uses a non-reentrant model
  9112 ;;
  9113                           
  9114                           	psect	text55
  9115  001FE4                     __ptext55:
  9116                           	opt stack 0
  9117  001FE4                     ___ftpack:
  9118                           	opt stack 0
  9119  001FE4  FFFF               	dw	65535	; assembler added errata NOP
  9120                           
  9121                           ;incstack = 0
  9122  001FE6  500E               	movf	___ftpack@exp,w,c
  9123  001FE8  E004               	bz	u3150
  9124  001FEA  500B               	movf	___ftpack@arg,w,c
  9125  001FEC  100C               	iorwf	___ftpack@arg+1,w,c
  9126  001FEE  100D               	iorwf	___ftpack@arg+2,w,c
  9127  001FF0  E10A               	bnz	l3781
  9128  001FF2                     u3150:
  9129  001FF2  6A0B               	clrf	?___ftpack,c
  9130  001FF4  6A0C               	clrf	?___ftpack+1,c
  9131  001FF6  6A0D               	clrf	?___ftpack+2,c
  9132  001FF8  D03E               	goto	l794
  9133  001FFA                     l3779:
  9134  001FFA  FFFF               	dw	65535	; assembler added errata NOP
  9135  001FFC  2A0E               	incf	___ftpack@exp,f,c
  9136  001FFE  90D8               	bcf	status,0,c
  9137  002000  320D               	rrcf	___ftpack@arg+2,f,c
  9138  002002  320C               	rrcf	___ftpack@arg+1,f,c
  9139  002004  320B               	rrcf	___ftpack@arg,f,c
  9140  002006                     l3781:
  9141  002006  6A10               	clrf	??___ftpack& (0+255),c
  9142  002008  6A11               	clrf	(??___ftpack+1)& (0+255),c
  9143  00200A  0EFE               	movlw	254
  9144  00200C  140D               	andwf	___ftpack@arg+2,w,c
  9145  00200E  6E12               	movwf	(??___ftpack+2)& (0+255),c
  9146  002010  5010               	movf	??___ftpack,w,c
  9147  002012  1011               	iorwf	??___ftpack+1,w,c
  9148  002014  1012               	iorwf	??___ftpack+2,w,c
  9149  002016  E00B               	bz	l3787
  9150  002018  D7F0               	goto	l3779
  9151  00201A                     l3783:
  9152  00201A  FFFF               	dw	65535	; assembler added errata NOP
  9153  00201C  2A0E               	incf	___ftpack@exp,f,c
  9154  00201E  2A0B               	incf	___ftpack@arg,f,c
  9155  002020  0E00               	movlw	0
  9156  002022  220C               	addwfc	___ftpack@arg+1,f,c
  9157  002024  220D               	addwfc	___ftpack@arg+2,f,c
  9158  002026  90D8               	bcf	status,0,c
  9159  002028  320D               	rrcf	___ftpack@arg+2,f,c
  9160  00202A  320C               	rrcf	___ftpack@arg+1,f,c
  9161  00202C  320B               	rrcf	___ftpack@arg,f,c
  9162  00202E                     l3787:
  9163  00202E  6A10               	clrf	??___ftpack& (0+255),c
  9164  002030  6A11               	clrf	(??___ftpack+1)& (0+255),c
  9165  002032  500D               	movf	___ftpack@arg+2,w,c
  9166  002034  6E12               	movwf	(??___ftpack+2)& (0+255),c
  9167  002036  5010               	movf	??___ftpack,w,c
  9168  002038  1011               	iorwf	??___ftpack+1,w,c
  9169  00203A  1012               	iorwf	??___ftpack+2,w,c
  9170  00203C  E007               	bz	l3791
  9171  00203E  D7ED               	goto	l3783
  9172  002040                     l3789:
  9173  002040  FFFF               	dw	65535	; assembler added errata NOP
  9174  002042  060E               	decf	___ftpack@exp,f,c
  9175  002044  90D8               	bcf	status,0,c
  9176  002046  360B               	rlcf	___ftpack@arg,f,c
  9177  002048  360C               	rlcf	___ftpack@arg+1,f,c
  9178  00204A  360D               	rlcf	___ftpack@arg+2,f,c
  9179  00204C                     l3791:
  9180  00204C  BE0C               	btfsc	___ftpack@arg+1,7,c
  9181  00204E  D003               	goto	u3190
  9182  002050  0E02               	movlw	2
  9183  002052  600E               	cpfslt	___ftpack@exp,c
  9184  002054  D7F5               	goto	l3789
  9185  002056                     u3190:
  9186  002056  FFFF               	dw	65535	; assembler added errata NOP
  9187  002058  A00E               	btfss	___ftpack@exp,0,c
  9188  00205A  9E0C               	bcf	___ftpack@arg+1,7,c
  9189  00205C  90D8               	bcf	status,0,c
  9190  00205E  320E               	rrcf	___ftpack@exp,f,c
  9191  002060  500E               	movf	___ftpack@exp,w,c
  9192  002062  120D               	iorwf	___ftpack@arg+2,f,c
  9193  002064  500F               	movf	___ftpack@sign,w,c
  9194  002066  E001               	bz	l3805
  9195  002068  8E0D               	bsf	___ftpack@arg+2,7,c
  9196  00206A                     l3805:
  9197  00206A  C00B  F00B         	movff	___ftpack@arg,?___ftpack
  9198  00206E  C00C  F00C         	movff	___ftpack@arg+1,?___ftpack+1
  9199  002072  C00D  F00D         	movff	___ftpack@arg+2,?___ftpack+2
  9200  002076                     l794:
  9201  002076  FFFF               	dw	65535	; assembler added errata NOP
  9202  002078  0012               	return		;funcret
  9203  00207A  FFFF               	dw	65535	; errata NOP
  9204  00207C                     __end_of___ftpack:
  9205                           	opt stack 0
  9206                           tosu	equ	0xFFF
  9207                           tosh	equ	0xFFE
  9208                           tosl	equ	0xFFD
  9209                           pclath	equ	0xFFA
  9210                           tblptru	equ	0xFF8
  9211                           tblptrh	equ	0xFF7
  9212                           tblptrl	equ	0xFF6
  9213                           tablat	equ	0xFF5
  9214                           prodl	equ	0xFF3
  9215                           intcon	equ	0xFF2
  9216                           intcon2	equ	0xFF1
  9217                           postinc0	equ	0xFEE
  9218                           wreg	equ	0xFE8
  9219                           postdec1	equ	0xFE5
  9220                           fsr1l	equ	0xFE1
  9221                           indf2	equ	0xFDF
  9222                           postinc2	equ	0xFDE
  9223                           postdec2	equ	0xFDD
  9224                           fsr2h	equ	0xFDA
  9225                           fsr2l	equ	0xFD9
  9226                           status	equ	0xFD8
  9227                           
  9228 ;; *************** function _isr *****************
  9229 ;; Defined at:
  9230 ;;		line 85 in file "/home/roman/Dokumente/Sources/lc-meter/obj/../LC-meter.c"
  9231 ;; Parameters:    Size  Location     Type
  9232 ;;		None
  9233 ;; Auto vars:     Size  Location     Type
  9234 ;;		None
  9235 ;; Return value:  Size  Location     Type
  9236 ;;                  2  105[None  ] int 
  9237 ;; Registers used:
  9238 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9239 ;; Tracked objects:
  9240 ;;		On entry : 0/0
  9241 ;;		On exit  : 0/0
  9242 ;;		Unchanged: 0/0
  9243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9244 ;;      Params:         0       0       0       0       0       0       0
  9245 ;;      Locals:         0       0       0       0       0       0       0
  9246 ;;      Temps:          3       0       0       0       0       0       0
  9247 ;;      Totals:         3       0       0       0       0       0       0
  9248 ;;Total ram usage:        3 bytes
  9249 ;; Hardware stack levels used:    1
  9250 ;; Hardware stack levels required when called:    1
  9251 ;; This function calls:
  9252 ;;		i2___lwdiv
  9253 ;; This function is called by:
  9254 ;;		Interrupt level 2
  9255 ;; This function uses a non-reentrant model
  9256 ;;
  9257                           
  9258                           	psect	intcode
  9259  000008                     __pintcode:
  9260                           	opt stack 0
  9261  000008                     _isr:
  9262                           	opt stack 0
  9263  000008  FFFF               	dw	65535	; assembler added errata NOP
  9264                           
  9265                           ;incstack = 0
  9266  00000A  8275               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9267  00000C  CFD9 F009          	movff	fsr2l,??_isr+1
  9268  000010  CFDA F00A          	movff	fsr2h,??_isr+2
  9269                           
  9270                           ;LC-meter.c: 86: if(PIR1bits.TMR2IF) {
  9271  000014  A29E               	btfss	3998,1,c	;volatile
  9272  000016  D042               	goto	i2l3641
  9273                           
  9274                           ;LC-meter.c: 87: bres += 256;
  9275  000018  0E00               	movlw	0
  9276  00001A  0100               	movlb	0	; () banked
  9277  00001C  27EA               	addwf	_bres& (0+255),f,b	;volatile
  9278  00001E  2BEB               	incf	(_bres+1)& (0+255),f,b	;volatile
  9279  000020  23EC               	addwfc	(_bres+2)& (0+255),f,b	;volatile
  9280  000022  23ED               	addwfc	(_bres+3)& (0+255),f,b	;volatile
  9281                           
  9282                           ;LC-meter.c: 88: if(bres >= ((unsigned long)((double)((20000000) / 4) / 1000))) {
  9283  000024  51ED               	movf	(_bres+3)& (0+255),w,b	;volatile
  9284  000026  11EC               	iorwf	(_bres+2)& (0+255),w,b	;volatile
  9285  000028  E105               	bnz	i2u298_40
  9286  00002A  0E88               	movlw	136
  9287  00002C  5DEA               	subwf	_bres& (0+255),w,b	;volatile
  9288  00002E  0E13               	movlw	19
  9289  000030  59EB               	subwfb	(_bres+1)& (0+255),w,b	;volatile
  9290  000032  E333               	bnc	i2l3639
  9291  000034                     i2u298_40:
  9292                           
  9293                           ; BSR set to: 0
  9294                           ;LC-meter.c: 89: bres -= ((unsigned long)((double)((20000000) / 4) / 1000));
  9295  000034  0E88               	movlw	136
  9296  000036  5FEA               	subwf	_bres& (0+255),f,b	;volatile
  9297  000038  0E13               	movlw	19
  9298  00003A  5BEB               	subwfb	(_bres+1)& (0+255),f,b	;volatile
  9299  00003C  0E00               	movlw	0
  9300  00003E  5BEC               	subwfb	(_bres+2)& (0+255),f,b	;volatile
  9301  000040  5BED               	subwfb	(_bres+3)& (0+255),f,b	;volatile
  9302                           
  9303                           ; BSR set to: 0
  9304                           ;LC-meter.c: 90: msecpart++;
  9305  000042  4BA4               	infsnz	_msecpart& (0+255),f,b	;volatile
  9306  000044  2BA5               	incf	(_msecpart+1)& (0+255),f,b	;volatile
  9307                           
  9308                           ; BSR set to: 0
  9309                           ;LC-meter.c: 91: led_cycle++;
  9310  000046  4A66               	infsnz	_led_cycle,f,c	;volatile
  9311  000048  2A67               	incf	_led_cycle+1,f,c	;volatile
  9312                           
  9313                           ; BSR set to: 0
  9314                           ;LC-meter.c: 93: LATC &= ~(1 << 2); LATC |= (!!(led_cycle >= 0 && led_cycle < led_interv
      +                          al / 6)) << 2;;
  9315  00004A  948B               	bcf	3979,2,c	;volatile
  9316                           
  9317                           ; BSR set to: 0
  9318  00004C  C0EE  F001         	movff	_led_interval,i2___lwdiv@dividend	;volatile
  9319  000050  C0EF  F002         	movff	_led_interval+1,i2___lwdiv@dividend+1	;volatile
  9320  000054  6A04               	clrf	i2___lwdiv@divisor+1,c
  9321  000056  0E06               	movlw	6
  9322  000058  6E03               	movwf	i2___lwdiv@divisor,c
  9323  00005A  ECBA  F011         	call	i2___lwdiv	;wreg free
  9324  00005E  5001               	movf	?i2___lwdiv,w,c
  9325  000060  5C66               	subwf	_led_cycle,w,c	;volatile
  9326  000062  5002               	movf	?i2___lwdiv+1,w,c
  9327  000064  5867               	subwfb	_led_cycle+1,w,c	;volatile
  9328  000066  E203               	bc	i2u299_40
  9329  000068  6A08               	clrf	??_isr& (0+255),c
  9330  00006A  2A08               	incf	??_isr& (0+255),f,c
  9331  00006C  D001               	goto	i2u300_48
  9332  00006E                     i2u299_40:
  9333  00006E  6A08               	clrf	??_isr& (0+255),c
  9334  000070                     i2u300_48:
  9335  000070  FFFF               	dw	65535	; assembler added errata NOP
  9336  000072  90D8               	bcf	status,0,c
  9337  000074  3608               	rlcf	??_isr,f,c
  9338  000076  90D8               	bcf	status,0,c
  9339  000078  3408               	rlcf	??_isr,w,c
  9340  00007A  128B               	iorwf	3979,f,c	;volatile
  9341                           
  9342                           ;LC-meter.c: 96: if(msecpart >= 1000) {
  9343  00007C  0EE8               	movlw	232
  9344  00007E  0100               	movlb	0	; () banked
  9345  000080  5DA4               	subwf	_msecpart& (0+255),w,b	;volatile
  9346  000082  0E03               	movlw	3
  9347  000084  59A5               	subwfb	(_msecpart+1)& (0+255),w,b	;volatile
  9348  000086  E309               	bnc	i2l3639
  9349                           
  9350                           ; BSR set to: 0
  9351                           ;LC-meter.c: 98: seconds++;
  9352  000088  2B98               	incf	_seconds& (0+255),f,b	;volatile
  9353  00008A  0E00               	movlw	0
  9354  00008C  2399               	addwfc	(_seconds+1)& (0+255),f,b	;volatile
  9355  00008E  239A               	addwfc	(_seconds+2)& (0+255),f,b	;volatile
  9356  000090  239B               	addwfc	(_seconds+3)& (0+255),f,b	;volatile
  9357                           
  9358                           ;LC-meter.c: 99: msecpart -= 1000;
  9359  000092  0EE8               	movlw	232
  9360  000094  5FA4               	subwf	_msecpart& (0+255),f,b	;volatile
  9361  000096  0E03               	movlw	3
  9362  000098  5BA5               	subwfb	(_msecpart+1)& (0+255),f,b	;volatile
  9363  00009A                     i2l3639:
  9364                           
  9365                           ; BSR set to: 0
  9366                           ;LC-meter.c: 100: }
  9367                           ;LC-meter.c: 101: }
  9368                           ;LC-meter.c: 103: PIR1bits.TMR2IF = 0;
  9369  00009A  929E               	bcf	3998,1,c	;volatile
  9370  00009C                     i2l3641:
  9371  00009C  FFFF               	dw	65535	; assembler added errata NOP
  9372                           
  9373                           ;LC-meter.c: 104: }
  9374                           ;LC-meter.c: 106: if(PIR1bits.RCIF) { ser_rxfifo[ser_rxiptr] = RCREG; ser_tmp = (ser_rxi
      +                          ptr + 1) & ((uint8_t)16 - 1); if(ser_tmp != ser_rxoptr) ser_rxiptr = ser_tmp; }; if(PIR1
      +                          bits.TXIF && PIE1bits.TXIE) { TXREG = ser_txfifo[ser_txoptr]; ++ser_txoptr; ser_txoptr &
      +                          = ((
  9375  00009E  AA9E               	btfss	3998,5,c	;volatile
  9376  0000A0  D010               	goto	i2l109
  9377  0000A2  0E00               	movlw	low _ser_rxfifo
  9378  0000A4  2470               	addwf	_ser_rxiptr,w,c	;volatile
  9379  0000A6  6ED9               	movwf	fsr2l,c
  9380  0000A8  6ADA               	clrf	fsr2h,c
  9381  0000AA  0E01               	movlw	high _ser_rxfifo
  9382  0000AC  22DA               	addwfc	fsr2h,f,c
  9383  0000AE  CFAE FFDF          	movff	4014,indf2	;volatile
  9384  0000B2  2870               	incf	_ser_rxiptr,w,c	;volatile
  9385  0000B4  0B0F               	andlw	15
  9386  0000B6  6E6F               	movwf	_ser_tmp,c
  9387  0000B8  506E               	movf	_ser_rxoptr,w,c	;volatile
  9388  0000BA  186F               	xorwf	_ser_tmp,w,c
  9389  0000BC  E002               	bz	i2l109
  9390  0000BE  C06F  F070         	movff	_ser_tmp,_ser_rxiptr	;volatile
  9391  0000C2                     i2l109:
  9392  0000C2  FFFF               	dw	65535	; assembler added errata NOP
  9393  0000C4  B89E               	btfsc	3998,4,c	;volatile
  9394  0000C6  A89D               	btfss	3997,4,c	;volatile
  9395  0000C8  D00E               	goto	i2l113
  9396  0000CA  506D               	movf	_ser_txoptr,w,c
  9397  0000CC  0F80               	addlw	low _ser_txfifo
  9398  0000CE  6ED9               	movwf	fsr2l,c
  9399  0000D0  6ADA               	clrf	fsr2h,c
  9400  0000D2  50DF               	movf	indf2,w,c
  9401  0000D4  6EAD               	movwf	4013,c	;volatile
  9402  0000D6  2A6D               	incf	_ser_txoptr,f,c	;volatile
  9403  0000D8  0E0F               	movlw	15
  9404  0000DA  166D               	andwf	_ser_txoptr,f,c	;volatile
  9405  0000DC  506C               	movf	_ser_txiptr,w,c	;volatile
  9406  0000DE  186D               	xorwf	_ser_txoptr,w,c	;volatile
  9407  0000E0  E101               	bnz	i2l112
  9408  0000E2  989D               	bcf	3997,4,c	;volatile
  9409  0000E4                     i2l112:
  9410  0000E4  989E               	bcf	3998,4,c	;volatile
  9411  0000E6                     i2l113:
  9412  0000E6  FFFF               	dw	65535	; assembler added errata NOP
  9413  0000E8  C00A  FFDA         	movff	??_isr+2,fsr2h
  9414  0000EC  C009  FFD9         	movff	??_isr+1,fsr2l
  9415  0000F0  9275               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9416  0000F2  0011               	retfie		f
  9417  0000F4  FFFF               	dw	65535	; errata NOP
  9418  0000F6                     __end_of_isr:
  9419                           	opt stack 0
  9420                           tosu	equ	0xFFF
  9421                           tosh	equ	0xFFE
  9422                           tosl	equ	0xFFD
  9423                           pclath	equ	0xFFA
  9424                           tblptru	equ	0xFF8
  9425                           tblptrh	equ	0xFF7
  9426                           tblptrl	equ	0xFF6
  9427                           tablat	equ	0xFF5
  9428                           prodl	equ	0xFF3
  9429                           intcon	equ	0xFF2
  9430                           intcon2	equ	0xFF1
  9431                           postinc0	equ	0xFEE
  9432                           wreg	equ	0xFE8
  9433                           postdec1	equ	0xFE5
  9434                           fsr1l	equ	0xFE1
  9435                           indf2	equ	0xFDF
  9436                           postinc2	equ	0xFDE
  9437                           postdec2	equ	0xFDD
  9438                           fsr2h	equ	0xFDA
  9439                           fsr2l	equ	0xFD9
  9440                           status	equ	0xFD8
  9441                           
  9442 ;; *************** function i2___lwdiv *****************
  9443 ;; Defined at:
  9444 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwdiv.c"
  9445 ;; Parameters:    Size  Location     Type
  9446 ;;  dividend        2    0[COMRAM] unsigned int 
  9447 ;;  divisor         2    2[COMRAM] unsigned int 
  9448 ;; Auto vars:     Size  Location     Type
  9449 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  9450 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  9451 ;; Return value:  Size  Location     Type
  9452 ;;                  2    0[COMRAM] unsigned int 
  9453 ;; Registers used:
  9454 ;;		wreg, status,2, status,0
  9455 ;; Tracked objects:
  9456 ;;		On entry : 3F/0
  9457 ;;		On exit  : 3F/0
  9458 ;;		Unchanged: 3F/0
  9459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9460 ;;      Params:         4       0       0       0       0       0       0
  9461 ;;      Locals:         3       0       0       0       0       0       0
  9462 ;;      Temps:          0       0       0       0       0       0       0
  9463 ;;      Totals:         7       0       0       0       0       0       0
  9464 ;;Total ram usage:        7 bytes
  9465 ;; Hardware stack levels used:    1
  9466 ;; This function calls:
  9467 ;;		Nothing
  9468 ;; This function is called by:
  9469 ;;		_isr
  9470 ;; This function uses a non-reentrant model
  9471 ;;
  9472                           
  9473                           	psect	text57
  9474  002374                     __ptext57:
  9475                           	opt stack 0
  9476  002374                     i2___lwdiv:
  9477                           	opt stack 0
  9478  002374  FFFF               	dw	65535	; assembler added errata NOP
  9479                           
  9480                           ; BSR set to: 0
  9481                           
  9482                           ;incstack = 0
  9483  002376  6A05               	clrf	i2___lwdiv@quotient,c
  9484  002378  6A06               	clrf	i2___lwdiv@quotient+1,c
  9485                           
  9486                           ; BSR set to: 0
  9487  00237A  5003               	movf	i2___lwdiv@divisor,w,c
  9488  00237C  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  9489  00237E  E01E               	bz	i2l1024
  9490                           
  9491                           ; BSR set to: 0
  9492  002380  0E01               	movlw	1
  9493  002382  6E07               	movwf	i2___lwdiv@counter,c
  9494  002384  D005               	goto	i2l3607
  9495  002386                     i2l3605:
  9496  002386  FFFF               	dw	65535	; assembler added errata NOP
  9497                           
  9498                           ; BSR set to: 0
  9499  002388  90D8               	bcf	status,0,c
  9500  00238A  3603               	rlcf	i2___lwdiv@divisor,f,c
  9501  00238C  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  9502  00238E  2A07               	incf	i2___lwdiv@counter,f,c
  9503  002390                     i2l3607:
  9504  002390  FFFF               	dw	65535	; assembler added errata NOP
  9505                           
  9506                           ; BSR set to: 0
  9507  002392  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  9508  002394  D7F8               	goto	i2l3605
  9509  002396                     i2u295_40:
  9510  002396  FFFF               	dw	65535	; assembler added errata NOP
  9511                           
  9512                           ; BSR set to: 0
  9513  002398  90D8               	bcf	status,0,c
  9514  00239A  3605               	rlcf	i2___lwdiv@quotient,f,c
  9515  00239C  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  9516                           
  9517                           ; BSR set to: 0
  9518  00239E  5003               	movf	i2___lwdiv@divisor,w,c
  9519  0023A0  5C01               	subwf	i2___lwdiv@dividend,w,c
  9520  0023A2  5004               	movf	i2___lwdiv@divisor+1,w,c
  9521  0023A4  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  9522  0023A6  E305               	bnc	i2l3617
  9523                           
  9524                           ; BSR set to: 0
  9525  0023A8  5003               	movf	i2___lwdiv@divisor,w,c
  9526  0023AA  5E01               	subwf	i2___lwdiv@dividend,f,c
  9527  0023AC  5004               	movf	i2___lwdiv@divisor+1,w,c
  9528  0023AE  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  9529                           
  9530                           ; BSR set to: 0
  9531  0023B0  8005               	bsf	i2___lwdiv@quotient,0,c
  9532  0023B2                     i2l3617:
  9533                           
  9534                           ; BSR set to: 0
  9535  0023B2  90D8               	bcf	status,0,c
  9536  0023B4  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  9537  0023B6  3203               	rrcf	i2___lwdiv@divisor,f,c
  9538                           
  9539                           ; BSR set to: 0
  9540  0023B8  2E07               	decfsz	i2___lwdiv@counter,f,c
  9541  0023BA  D7ED               	goto	i2u295_40
  9542  0023BC                     i2l1024:
  9543                           
  9544                           ; BSR set to: 0
  9545  0023BC  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  9546  0023C0  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  9547                           
  9548                           ; BSR set to: 0
  9549  0023C4  0012               	return		;funcret
  9550  0023C6  FFFF               	dw	65535	; errata NOP
  9551  0023C8                     __end_ofi2___lwdiv:
  9552                           	opt stack 0
  9553                           tosu	equ	0xFFF
  9554                           tosh	equ	0xFFE
  9555                           tosl	equ	0xFFD
  9556                           pclath	equ	0xFFA
  9557                           tblptru	equ	0xFF8
  9558                           tblptrh	equ	0xFF7
  9559                           tblptrl	equ	0xFF6
  9560                           tablat	equ	0xFF5
  9561                           prodl	equ	0xFF3
  9562                           intcon	equ	0xFF2
  9563                           intcon2	equ	0xFF1
  9564                           postinc0	equ	0xFEE
  9565                           wreg	equ	0xFE8
  9566                           postdec1	equ	0xFE5
  9567                           fsr1l	equ	0xFE1
  9568                           indf2	equ	0xFDF
  9569                           postinc2	equ	0xFDE
  9570                           postdec2	equ	0xFDD
  9571                           fsr2h	equ	0xFDA
  9572                           fsr2l	equ	0xFD9
  9573                           status	equ	0xFD8
  9574                           tosu	equ	0xFFF
  9575                           tosh	equ	0xFFE
  9576                           tosl	equ	0xFFD
  9577                           pclath	equ	0xFFA
  9578                           tblptru	equ	0xFF8
  9579                           tblptrh	equ	0xFF7
  9580                           tblptrl	equ	0xFF6
  9581                           tablat	equ	0xFF5
  9582                           prodl	equ	0xFF3
  9583                           intcon	equ	0xFF2
  9584                           intcon2	equ	0xFF1
  9585                           postinc0	equ	0xFEE
  9586                           wreg	equ	0xFE8
  9587                           postdec1	equ	0xFE5
  9588                           fsr1l	equ	0xFE1
  9589                           indf2	equ	0xFDF
  9590                           postinc2	equ	0xFDE
  9591                           postdec2	equ	0xFDD
  9592                           fsr2h	equ	0xFDA
  9593                           fsr2l	equ	0xFD9
  9594                           status	equ	0xFD8
  9595                           
  9596                           	psect	text58
  9597  000000                     __ptext58:
  9598                           	opt stack 0
  9599                           tosu	equ	0xFFF
  9600                           tosh	equ	0xFFE
  9601                           tosl	equ	0xFFD
  9602                           pclath	equ	0xFFA
  9603                           tblptru	equ	0xFF8
  9604                           tblptrh	equ	0xFF7
  9605                           tblptrl	equ	0xFF6
  9606                           tablat	equ	0xFF5
  9607                           prodl	equ	0xFF3
  9608                           intcon	equ	0xFF2
  9609                           intcon2	equ	0xFF1
  9610                           postinc0	equ	0xFEE
  9611                           wreg	equ	0xFE8
  9612                           postdec1	equ	0xFE5
  9613                           fsr1l	equ	0xFE1
  9614                           indf2	equ	0xFDF
  9615                           postinc2	equ	0xFDE
  9616                           postdec2	equ	0xFDD
  9617                           fsr2h	equ	0xFDA
  9618                           fsr2l	equ	0xFD9
  9619                           status	equ	0xFD8
  9620                           
  9621                           	psect	rparam
  9622  0000                     tosu	equ	0xFFF
  9623                           tosh	equ	0xFFE
  9624                           tosl	equ	0xFFD
  9625                           pclath	equ	0xFFA
  9626                           tblptru	equ	0xFF8
  9627                           tblptrh	equ	0xFF7
  9628                           tblptrl	equ	0xFF6
  9629                           tablat	equ	0xFF5
  9630                           prodl	equ	0xFF3
  9631                           intcon	equ	0xFF2
  9632                           intcon2	equ	0xFF1
  9633                           postinc0	equ	0xFEE
  9634                           wreg	equ	0xFE8
  9635                           postdec1	equ	0xFE5
  9636                           fsr1l	equ	0xFE1
  9637                           indf2	equ	0xFDF
  9638                           postinc2	equ	0xFDE
  9639                           postdec2	equ	0xFDD
  9640                           fsr2h	equ	0xFDA
  9641                           fsr2l	equ	0xFD9
  9642                           status	equ	0xFD8
  9643                           
  9644                           	psect	temp
  9645  000075                     btemp:
  9646                           	opt stack 0
  9647  000075                     	ds	1
  9648  0000                     int$flags	set	btemp
  9649  0000                     wtemp6	set	btemp+1
  9650                           tosu	equ	0xFFF
  9651                           tosh	equ	0xFFE
  9652                           tosl	equ	0xFFD
  9653                           pclath	equ	0xFFA
  9654                           tblptru	equ	0xFF8
  9655                           tblptrh	equ	0xFF7
  9656                           tblptrl	equ	0xFF6
  9657                           tablat	equ	0xFF5
  9658                           prodl	equ	0xFF3
  9659                           intcon	equ	0xFF2
  9660                           intcon2	equ	0xFF1
  9661                           postinc0	equ	0xFEE
  9662                           wreg	equ	0xFE8
  9663                           postdec1	equ	0xFE5
  9664                           fsr1l	equ	0xFE1
  9665                           indf2	equ	0xFDF
  9666                           postinc2	equ	0xFDE
  9667                           postdec2	equ	0xFDD
  9668                           fsr2h	equ	0xFDA
  9669                           fsr2l	equ	0xFD9
  9670                           status	equ	0xFD8


Data Sizes:
    Strings     174
    Constant    57
    Data        5
    BSS         85
    Persistent  9
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    101     116
    BANK0           128     48     116
    BANK1           256     15      31
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(1) Largest target is 30
		 -> exp@coeff(CODE[30]), log@coeff(CODE[27]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(BANK0[2]), 

    ser_puts@s	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_36(CODE[3]), STR_23(CODE[3]), STR_22(CODE[5]), STR_21(CODE[3]), 
		 -> STR_20(CODE[8]), STR_19(CODE[6]), STR_18(CODE[6]), STR_17(CODE[6]), 
		 -> STR_16(CODE[5]), STR_13(CODE[3]), STR_11(CODE[3]), STR_9(CODE[3]), 
		 -> STR_4(CODE[3]), STR_3(CODE[16]), STR_2(CODE[16]), 

    lcd_puts@string	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_35(CODE[4]), STR_34(CODE[4]), STR_33(CODE[6]), STR_8(CODE[5]), 
		 -> STR_7(CODE[6]), STR_6(CODE[7]), STR_5(CODE[7]), STR_1(CODE[10]), 

    put_str@s	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_24(CODE[13]), STR_15(CODE[10]), STR_12(CODE[15]), STR_10(CODE[12]), 

    print_unit@units	PTR const unsigned char [8] size(1) Largest target is 3
		 -> STR_32(CODE[3]), STR_31(CODE[3]), STR_30(CODE[3]), STR_29(CODE[3]), 
		 -> STR_28(CODE[3]), STR_27(CODE[3]), STR_26(CODE[3]), STR_25(CODE[2]), 

    format_double@fn	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> ser_putch(), lcd_putch(), 

    format_xint32@fn	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> ser_putch(), 

    format_number@fn	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> buffer_putch(), ser_putch(), lcd_putch(), 

    buffer_puts@x	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_14(CODE[6]), 

    main$303	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_3(CODE[16]), STR_2(CODE[16]), 


Critical Paths under _main in COMRAM

    _print_indicator->_lcd_gotoxy
    _measure_inductance->___fttol
    _print_unit->_lcd_gotoxy
    _print_reading->_format_number
    _lcd_puts->_lcd_putch
    _format_xint32->_format_number
    _pow->_exp
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->_log10
    ___altoft->___fttol
    ___ftsub->___ftmul
    ___ftdiv->___ftpack
    ___lltoft->___ftpack
    _log10->_log
    _log->_eval_poly
    _eval_poly->___ftmul
    ___ftmul->___ftadd
    ___ftadd->___awtoft
    ___awtoft->___ftpack
    _lcd_begin->_lcd_command
    _calibrate->___lwtoft
    _put_str->_output_putch
    _output_putch->_lcd_putch
    _output_putch->_ser_putch
    _measure_freq->_format_number
    _print_buffer->_ser_puts
    _ser_puts->_ser_putch
    _lcd_gotoxy->_lcd_command
    _format_number->___lwdiv
    _buffer_puts->_buffer_putch
    _buffer_putch->_buffer_putc
    _lcd_clear->_lcd_command
    _lcd_command->_lcd_send
    _lcd_send->_lcd_write4bits
    ___lwtoft->_measure_freq

Critical Paths under _isr in COMRAM

    _isr->i2___lwdiv

Critical Paths under _main in BANK0

    _main->_format_double
    _measure_capacitance->_format_double
    _format_double->_pow
    _pow->_exp
    _exp->_floor

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_measure_capacitance

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  533342
                                             46 BANK0      2     2      0
                          _calibrate
                          _delay10ms
                      _format_double
                          _lcd_begin
                          _lcd_clear
                         _lcd_gotoxy
                           _lcd_init
                           _lcd_puts
                _measure_capacitance
                 _measure_inductance
                    _print_indicator
                           _ser_init
                           _ser_puts
                        _timer0_init
                        _timer2_init
 ---------------------------------------------------------------------------------
 (1) _timer2_init                                          4     4      0     130
                                             10 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _timer0_init                                         11    11      0     399
                                             10 COMRAM    11    11      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _print_indicator                                      1     1      0    3251
                                             20 COMRAM     1     1      0
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (1) _measure_inductance                                  33    33      0   53527
                                              0 BANK0     33    33      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                           ___lwtoft
                         _lcd_gotoxy
                       _measure_freq
                      _print_reading
                         _print_unit
                            _put_str
 ---------------------------------------------------------------------------------
 (1) _measure_capacitance                                 15    15      0  256814
                                              0 BANK1     15    15      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                           ___lwtoft
                      _format_double
                      _format_xint32
                         _lcd_gotoxy
                       _measure_freq
                      _print_reading
                         _print_unit
                            _put_str
                          _ser_putch
                           _ser_puts
 ---------------------------------------------------------------------------------
 (2) _print_unit                                           3     3      0    2115
                                             20 COMRAM     2     2      0
                         _lcd_gotoxy
 ---------------------------------------------------------------------------------
 (2) _print_reading                                        6     4      2   10174
                                             62 COMRAM     6     4      2
                            ___lwdiv
                            ___lwmod
                      _format_number
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (2) _lcd_puts                                             3     2      1    1105
                                             11 COMRAM     3     2      1
                          _lcd_putch
 ---------------------------------------------------------------------------------
 (2) _format_xint32                                        6     0      6    6361
                                             62 COMRAM     6     0      6
                      _format_number
                          _ser_putch *
 ---------------------------------------------------------------------------------
 (2) _format_double                                       18    13      5  195769
                                             28 BANK0     18    13      5
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                              _floor
                          _lcd_putch *
                              _log10
                                _pow
                          _ser_putch *
 ---------------------------------------------------------------------------------
 (3) _pow                                                 17    11      6  109125
                                             11 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _exp                                                  9     6      3   58530
                                             98 COMRAM     3     0      3
                                              5 BANK0      6     6      0
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (5) _ldexp                                                7     2      5     539
                                             59 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (5) _floor                                                8     5      3   13824
                                             95 COMRAM     3     0      3
                                              0 BANK0      5     5      0
                           ___altoft
                            ___ftadd
                            ___ftdiv (ARG)
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4    1141
                                             70 COMRAM    15    11      4
                            ___ftdiv (ARG)
                              _log10 (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    2678
                                             10 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (6) ___altoft                                            10     6      4    3367
                                             85 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    6794
                                             49 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3     335
                                             10 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    5399
                                             18 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    3265
                                             18 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _log10                                                6     3      3   42564
                                             64 COMRAM     6     3      3
                            ___ftmul
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  5     2      3   33632
                                             59 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                6     2      4     682
                                             10 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           10     4      6   14839
                                             49 COMRAM    10     4      6
                            ___ftadd
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    8707
                                             34 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    5338
                                             22 COMRAM    12     6      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awtoft                                             4     1      3    3636
                                             18 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             3     3      0      68
                                             10 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcd_begin                                            3     2      1     580
                                             14 COMRAM     3     2      1
                        _lcd_command
                     _lcd_write4bits
 ---------------------------------------------------------------------------------
 (1) _calibrate                                            1     1      0   17811
                                             70 COMRAM     1     1      0
                           ___lwtoft
                          _delay10ms
                          _lcd_clear
                         _lcd_gotoxy
                          _lcd_putch
                       _measure_freq
                            _put_str
                           _ser_puts
 ---------------------------------------------------------------------------------
 (2) _put_str                                              4     3      1     918
                                             12 COMRAM     4     3      1
                       _output_putch
 ---------------------------------------------------------------------------------
 (3) _output_putch                                         1     1      0     428
                                             11 COMRAM     1     1      0
                          _lcd_putch
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _measure_freq                                         5     3      2    9060
                                             62 COMRAM     5     3      2
                        _buffer_init
                        _buffer_puts
                      _format_number
                         _lcd_gotoxy
                       _print_buffer
                     _timer0_read_ps
 ---------------------------------------------------------------------------------
 (3) _timer0_read_ps                                       7     5      2     167
                                             10 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (3) _print_buffer                                         2     2      0    1435
                                             12 COMRAM     2     2      0
                          _ser_putch
                           _ser_puts
 ---------------------------------------------------------------------------------
 (1) _ser_puts                                             1     0      1    1336
                                             11 COMRAM     1     0      1
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           6     5      1    2115
                                             14 COMRAM     6     5      1
                        _lcd_command
 ---------------------------------------------------------------------------------
 (3) _format_number                                       45    39      6    5061
                                             17 COMRAM    45    39      6
                            ___lwdiv
                            ___lwmod
                       _buffer_putch *
                          _lcd_putch *
                          _ser_putch *
 ---------------------------------------------------------------------------------
 (2) _ser_putch                                            1     1      0      31
                                             10 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _lcd_putch                                            1     1      0     335
                                             10 COMRAM     1     1      0
                           _lcd_send
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     732
                                             10 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     851
                                             10 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _buffer_puts                                          1     0      1     217
                                             14 COMRAM     1     0      1
                       _buffer_putch
 ---------------------------------------------------------------------------------
 (4) _buffer_putch                                         1     1      0      62
                                             13 COMRAM     1     1      0
                        _buffer_putc
 ---------------------------------------------------------------------------------
 (5) _buffer_putc                                          3     3      0      31
                                             10 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _buffer_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            1     1      0     335
                                             14 COMRAM     1     1      0
                        _lcd_command
 ---------------------------------------------------------------------------------
 (3) _lcd_command                                          1     1      0     335
                                             13 COMRAM     1     1      0
                           _lcd_send
 ---------------------------------------------------------------------------------
 (4) _lcd_send                                             2     1      1     304
                                             11 COMRAM     2     1      1
                     _lcd_write4bits
 ---------------------------------------------------------------------------------
 (5) _lcd_write4bits                                       1     1      0      31
                                             10 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _delay10ms                                            1     1      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3644
                                             67 COMRAM     3     0      3
                           ___ftpack
                       _measure_freq (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    3073
                                             10 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  3     3      0     214
                                              7 COMRAM     3     3      0
                          i2___lwdiv
 ---------------------------------------------------------------------------------
 (9) i2___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calibrate
     ___lwtoft
       ___ftpack
       _measure_freq (ARG)
         _buffer_init
         _buffer_puts
           _buffer_putch
             _buffer_putc
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch *
             _buffer_putc
           _lcd_putch *
             _lcd_send
               _lcd_write4bits
           _ser_putch *
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _print_buffer
           _ser_putch
           _ser_puts
             _ser_putch
         _timer0_read_ps
     _delay10ms
     _lcd_clear
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_putch
       _lcd_send
         _lcd_write4bits
     _measure_freq
       _buffer_init
       _buffer_puts
         _buffer_putch
           _buffer_putc
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch *
           _buffer_putc
         _lcd_putch *
           _lcd_send
             _lcd_write4bits
         _ser_putch *
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _print_buffer
         _ser_putch
         _ser_puts
           _ser_putch
       _timer0_read_ps
     _put_str
       _output_putch
         _lcd_putch
           _lcd_send
             _lcd_write4bits
         _ser_putch
     _ser_puts
       _ser_putch
   _delay10ms
   _format_double
     ___awtoft
       ___ftpack
     ___ftdiv
       ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftsub
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
       _log10 (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
     _floor
       ___altoft
         ___ftpack
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           _log10 (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
               _frexp
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftge (ARG)
       ___fttol (ARG)
         ___ftdiv (ARG)
           ___ftpack
         _log10 (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
             _frexp
       _frexp (ARG)
     _lcd_putch *
       _lcd_send
         _lcd_write4bits
     _log10 *
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
         _frexp
     _pow *
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
         _log10 (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
             _frexp
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
         ___fttol
           ___ftdiv (ARG)
             ___ftpack
           _log10 (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
               _frexp
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               _log10 (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 _log
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftdiv (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                   _frexp
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftge (ARG)
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             _log10 (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
           _frexp (ARG)
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
         _frexp
     _ser_putch *
   _lcd_begin
     _lcd_command
       _lcd_send
         _lcd_write4bits
     _lcd_write4bits
   _lcd_clear
     _lcd_command
       _lcd_send
         _lcd_write4bits
   _lcd_gotoxy
     _lcd_command
       _lcd_send
         _lcd_write4bits
   _lcd_init
   _lcd_puts
     _lcd_putch
       _lcd_send
         _lcd_write4bits
   _measure_capacitance
     ___ftdiv
       ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftsub
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
       _log10 (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
     ___lwtoft
       ___ftpack
       _measure_freq (ARG)
         _buffer_init
         _buffer_puts
           _buffer_putch
             _buffer_putc
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch *
             _buffer_putc
           _lcd_putch *
             _lcd_send
               _lcd_write4bits
           _ser_putch *
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _print_buffer
           _ser_putch
           _ser_puts
             _ser_putch
         _timer0_read_ps
     _format_double
       ___awtoft
         ___ftpack
       ___ftdiv
         ___ftpack
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
         _log10 (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
             _frexp
       _floor
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___ftpack
             _log10 (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftge (ARG)
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___ftpack
           _log10 (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
               _frexp
         _frexp (ARG)
       _lcd_putch *
         _lcd_send
           _lcd_write4bits
       _log10 *
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
       _pow *
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
         ___fttol
           ___ftdiv (ARG)
             ___ftpack
           _log10 (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
               _frexp
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
           ___ftdiv
             ___ftpack
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
           ___fttol
             ___ftdiv (ARG)
               ___ftpack
             _log10 (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 _log10 (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   _log
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftdiv (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                     _eval_poly
                       ___ftadd
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftmul
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftadd (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           _frexp (ARG)
                         ___ftdiv (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                     _frexp
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftge (ARG)
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               _log10 (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 _log
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftdiv (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                   _frexp
             _frexp (ARG)
           _ldexp
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
             _frexp
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
       _ser_putch *
     _format_xint32
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch *
           _buffer_putc
         _lcd_putch *
           _lcd_send
             _lcd_write4bits
         _ser_putch *
       _ser_putch *
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _measure_freq
       _buffer_init
       _buffer_puts
         _buffer_putch
           _buffer_putc
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch *
           _buffer_putc
         _lcd_putch *
           _lcd_send
             _lcd_write4bits
         _ser_putch *
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _print_buffer
         _ser_putch
         _ser_puts
           _ser_putch
       _timer0_read_ps
     _print_reading
       ___lwdiv
       ___lwmod
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch *
           _buffer_putc
         _lcd_putch *
           _lcd_send
             _lcd_write4bits
         _ser_putch *
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _lcd_puts
         _lcd_putch
           _lcd_send
             _lcd_write4bits
     _print_unit
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
     _put_str
       _output_putch
         _lcd_putch
           _lcd_send
             _lcd_write4bits
         _ser_putch
     _ser_putch
     _ser_puts
       _ser_putch
   _measure_inductance
     ___ftdiv
       ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftsub
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
       _log10 (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
     ___lwtoft
       ___ftpack
       _measure_freq (ARG)
         _buffer_init
         _buffer_puts
           _buffer_putch
             _buffer_putc
         _format_number
           ___lwdiv
           ___lwmod
           _buffer_putch *
             _buffer_putc
           _lcd_putch *
             _lcd_send
               _lcd_write4bits
           _ser_putch *
         _lcd_gotoxy
           _lcd_command
             _lcd_send
               _lcd_write4bits
         _print_buffer
           _ser_putch
           _ser_puts
             _ser_putch
         _timer0_read_ps
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _measure_freq
       _buffer_init
       _buffer_puts
         _buffer_putch
           _buffer_putc
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch *
           _buffer_putc
         _lcd_putch *
           _lcd_send
             _lcd_write4bits
         _ser_putch *
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _print_buffer
         _ser_putch
         _ser_puts
           _ser_putch
       _timer0_read_ps
     _print_reading
       ___lwdiv
       ___lwmod
       _format_number
         ___lwdiv
         ___lwmod
         _buffer_putch *
           _buffer_putc
         _lcd_putch *
           _lcd_send
             _lcd_write4bits
         _ser_putch *
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
       _lcd_puts
         _lcd_putch
           _lcd_send
             _lcd_write4bits
     _print_unit
       _lcd_gotoxy
         _lcd_command
           _lcd_send
             _lcd_write4bits
     _put_str
       _output_putch
         _lcd_putch
           _lcd_send
             _lcd_write4bits
         _ser_putch
   _print_indicator
     _lcd_gotoxy
       _lcd_command
         _lcd_send
           _lcd_write4bits
     _lcd_puts
       _lcd_putch
         _lcd_send
           _lcd_write4bits
   _ser_init
   _ser_puts
     _ser_putch
   _timer0_init
   _timer2_init

 _isr (ROOT)
   i2___lwdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      F      1F       7       12.1%
BITBANK0            80      0       0       4        0.0%
BANK0               80     30      74       5       90.6%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     65      74       1       92.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     107      15        0.0%
DATA                 0      0     107       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Jul 12 01:11:13 2020

                                                          ___altoft@exp 005E  
                                                         ___altoft@sign 005F  
                                                                    _F1 00B7  
                                                                    _F2 009F  
                                                                    _F3 009C  
                                                           __CFG_BOR$ON 000000  
                                                    i2___lwdiv@dividend 0001  
                                                          ___ftadd@exp1 0022  
                                                          ___ftadd@exp2 0021  
                                                          ___ftadd@sign 0020  
                                                                   l119 14A8  
                                                                   l241 24B0  
                                                                   l338 2788  
                                                                   l283 1C6C  
                                                                   l394 2426  
                                                                   l900 19E8  
                                                                   l493 26BA  
                                                                   l813 1AF6  
                                                                   l910 2880  
                                                                   l814 1B9C  
                                                                   l495 26BE  
                                                                   l816 1B90  
                                                                   l840 1FDE  
                                                                   l921 1D36  
                                                                   l836 21E8  
                                                                   l854 138E  
                                                                   l794 2076  
                                                                   l877 132E  
                                                                   l885 1DF4  
                                                                   l878 1342  
                                                                   l886 1D7A  
                                                                   l894 231A  
                                                                   l992 181E  
                                                                   l888 1DC4  
                                                          __CFG_CPD$OFF 000000  
                                                        lcd_begin@lines 0011  
                                                                   _exp 0EF2  
                                                                   _log 1738  
                                                                   _isr 0008  
                                                                   _pow 14E2  
                                                          __CFG_BORV$27 000000  
                                                                   tosl 000FFD  
                                                                   wreg 000FE8  
                                                    timer0_read_ps@prev 000F  
                                                          __CFG_LVP$OFF 000000  
                                                __end_of_lcd_write4bits 2852  
                                                          ___ftdiv@cntr 001C  
                                                          ___ftdiv@sign 0021  
                                                          __CFG_WDT$OFF 000000  
                                                                  l1024 2368  
                                                                  l1034 253C  
                                                                  l1061 161A  
                                                                  l1222 109C  
                                                                  l1225 0F7A  
                                                                  l1057 1626  
                                                                  l1226 1090  
                                                                  l4001 1CE2  
                                                                  l4011 1D0A  
                                                                  l4021 27BA  
                                                                  l4005 1CF4  
                                                                  l4201 1750  
                                                                  l4113 260E  
                                                                  l4017 1D26  
                                                                  l4009 1CFE  
                                                                  l4037 248A  
                                                                  l4125 25D8  
                                                                  l4053 1B00  
                                                                  l4133 1F52  
                                                                  l4303 25A8  
                                                                  l4217 2332  
                                                                  l4321 1BD6  
                                                                  l4057 1B1A  
                                                                  l4153 1FA8  
                                                                  l4067 285E  
                                                                  l4219 233C  
                                                                  l4331 1C16  
                                                                  l4315 1BB4  
                                                                  l4171 270C  
                                                                  l4139 1F82  
                                                                  l4403 1572  
                                                                  l4069 2860  
                                                                  l4229 235E  
                                                                  l4245 2532  
                                                                  l4237 250E  
                                                                  l4333 1C1C  
                                                                  l4165 1E28  
                                                                  l4077 1D58  
                                                                  l4149 1F9C  
                                                                  l4261 0F30  
                                                                  l4239 2518  
                                                                  l4175 2720  
                                                                  l4167 1E90  
                                                                  l4095 1D9E  
                                                                  l4255 0F06  
                                                                  l4407 1594  
                                                                  l4185 23D0  
                                                                  l4265 0F50  
                                                                  l4425 10CE  
                                                                  l4363 273A  
                                                                  l4371 26DE  
                                                                  l4451 2550  
                                                                  l4187 23DC  
                                                                  l4443 1200  
                                                                  l3805 206A  
                                                                  l4285 1068  
                                                                  l4541 1ED8  
                                                                  l4533 1EC0  
                                                                  l4367 274E  
                                                                  l4295 265E  
                                                                  l4375 26EE  
                                                                  l4455 256C  
                                                                  l3903 192A  
                                                                  l4391 1508  
                                                                  l4551 1EF8  
                                                                  l4543 1EE0  
                                                                  l4535 1EC8  
                                                                  l4625 18D2  
                                                                  l4617 1898  
                                                                  l3921 1970  
                                                                  l3843 1270  
                                                                  l3931 199C  
                                                                  l3907 194C  
                                                                  l3827 2210  
                                                                  l4299 258E  
                                                                  l3781 2006  
                                                                  l3925 1982  
                                                                  l3829 221C  
                                                                  l4397 151C  
                                                                  l4821 0A76  
                                                                  l4565 1F22  
                                                                  l4557 1F08  
                                                                  l4549 1EF0  
                                                                  l3791 204C  
                                                                  l3783 201A  
                                                                  l4591 1830  
                                                                  l3871 12D2  
                                                                  l3935 19AE  
                                                                  l3951 2196  
                                                                  l4807 074A  
                                                                  l4559 1F0E  
                                                                  l4911 147A  
                                                                  l3873 12DE  
                                                                  l3849 1296  
                                                                  l4817 0A4A  
                                                                  l4825 0AA0  
                                                                  l4841 2780  
                                                                  l3787 202E  
                                                                  l3779 1FFA  
                                                                  l3883 130C  
                                                                  l3875 12E6  
                                                                  l3971 22FE  
                                                                  l4755 0C96  
                                                                  l4827 0AA8  
                                                                  ?_exp 0063  
                                                                  l3789 2040  
                                                                  l3885 1316  
                                                                  l4781 0E6C  
                                                                  l4933 14C2  
                                                                  ?_log 003C  
                                                                  l4599 1840  
                                                                  l3895 1368  
                                                                  l3967 22DE  
                                                                  l4935 14C6  
                                                                  l3977 2318  
                                                                  l3985 1C96  
                                                                  l4777 0E40  
                                                                  l4785 0E96  
                                                                  l4929 14B8  
                                                                  l4699 1AAA  
                                                                  ?_isr 0001  
                                                                  ?_pow 00C5  
                                                                  STR_1 068C  
                                                                  STR_2 063A  
                                                                  STR_3 064A  
                                                                  STR_4 06E5  
                                                                  STR_5 069E  
                                                                  STR_8 06C7  
                                                                  _LATB 000F8A  
                                                                  _LATC 000F8B  
                                                                  _CCal 0071  
                                                                  u4020 105E  
                                                                  u3150 1FF2  
                                                                  u3310 1288  
                                                                  u4120 2442  
                                                                  u3241 1234  
                                                                  u3410 131C  
                                                                  u3251 1248  
                                                                  u4108 1C3E  
                                                                  u3340 12B2  
                                                                  u4109 1C66  
                                                                  u3190 2056  
                                                                  _PIE1 000F9D  
                                                                  u4080 1C30  
                                                                  u3280 1262  
                                                                  u4208 11B2  
                                                                  u4320 1F2E  
                                                                  u4209 11D0  
                                                                  u3451 1920  
                                                                  u3380 12EC  
                                                                  u3620 1D10  
                                                                  u4180 1568  
                                                                  u4228 11DE  
                                                                  u4340 2698  
                                                                  u4229 11F6  
                                                                  u3471 193A  
                                                                  u3711 1D4E  
                                                                  u3480 1942  
                                                                  u3800 1F78  
                                                                  u3561 1C82  
                                                                  u3570 1C8A  
                                                                  u4258 2106  
                                                                  u4338 1F32  
                                                                  u3731 1D68  
                                                                  u4259 211E  
                                                                  u3900 2342  
                                                                  u3740 1D70  
                                                                  u3580 1CB6  
                                                                  u4268 2124  
                                                                  u4269 213C  
                                                                  u4358 269C  
                                                                  u4607 1878  
                                                                  u3680 1B0C  
                                                                  u4617 1888  
                                                                  u3585 1CAC  
                                                                  u3930 251E  
                                                                  u4707 168E  
                                                                  u4627 18A8  
                                                                  u4717 169E  
                                                                  u4637 18C0  
                                                                  u4727 16AE  
                                                                  u4647 18F4  
                                                                  u3880 1746  
                                                                  u4737 16BE  
                                                                  u4657 1638  
                                                                  _PIR1 000F9E  
                                                                  u4747 16CE  
                                                                  u4667 164E  
                                                                  u4587 1846  
                                                                  u4757 16DE  
                                                                  u4677 165E  
                                                                  u4597 1866  
                                                                  u4767 289E  
                                                                  u4687 166E  
                                                                  u4777 283E  
                                                                  u4697 167E  
                                                                  u4787 2848  
                                                                  _TMR0 000FD6  
                                                                  _TMR2 000FCC  
                                                          __CFG_PWRT$ON 000000  
                                                                  _bres 00EA  
                                                                  _main 1394  
                                                          ___ftpack@arg 000B  
                                                                  _mode 0074  
                                                          ___ftpack@exp 000E  
                                                    i2___lwdiv@quotient 0005  
                                                                  fsr2h 000FDA  
                                                                  indf2 000FDF  
                                                                  fsr1l 000FE1  
                                                                  fsr2l 000FD9  
                                                                  btemp 0075  
                                                                  exp@x 0063  
                                                                  log@x 003C  
                                                 __size_of_output_putch 0012  
                                                                  pow@x 00C5  
                                                                  pow@y 00C8  
                                                                  prodl 000FF3  
                                            __end_of_measure_inductance 0AFE  
                                                                  start 00F6  
                                                   timer0_read_ps@count 0010  
                                                        ??_buffer_putch 000E  
                                                     _format_number$542 003A  
                                                          ___ftmul@cntr 0030  
                                                          ___param_bank 000000  
                                                          ___ftmul@sign 0031  
                                                       format_double@fn 00D6  
                                                       _timer0_init$686 000C  
                                                       _timer0_init$687 000E  
                                                       _timer0_init$688 0010  
                                                       _timer0_init$689 0012  
                                                          buffer_puts@x 000F  
                                                   lcd_write4bits@value 000B  
                                                          ___fttol@exp1 0055  
                                                          lcd_send@mode 000C  
                                                                 ??_exp 0066  
                                                          ___fttol@lval 0051  
                                                                 ??_log 003F  
                                                                 ??_isr 0008  
                                                                 ??_pow 0066  
                                                         __CFG_OSCS$OFF 000000  
                                                                 ?_main 0001  
                                                       __end_of___ftadd 1394  
                                                                 STR_10 0676  
                                                                 STR_11 06E5  
                                                                 STR_20 0696  
                                                                 STR_12 065A  
                                                                 STR_21 06E5  
                                                                 STR_13 06E5  
                                                                 STR_30 06D9  
                                                                 STR_22 06BD  
                                                                 STR_14 06B7  
                                                                 STR_23 06E5  
                                                                 STR_31 06D3  
                                                                 STR_15 0682  
                                                                 STR_32 06D6  
                                                                 STR_16 06C2  
                                                                 STR_24 0669  
                                                                 STR_33 069F  
                                                                 STR_17 06A5  
                                                                 STR_26 06DC  
                                                                 STR_34 06CC  
                                                                 STR_18 06AB  
                                                                 STR_35 06A1  
                                                                 STR_27 06E2  
                                                                 STR_19 06B1  
                                                                 STR_36 06E5  
                                                                 STR_28 06DF  
                                                                 STR_29 06D0  
                                                       __end_of___ftdiv 1DFA  
                                                       __end_of___ftneg 2890  
                                                       __end_of___ftmul 19EE  
                                                                 _T0CON 000FD5  
                                                       __end_of___ftsub 263A  
                                                       __end_of___fttol 1D3C  
                                                                 _T2CON 000FCA  
                                                       __end_of___lwdiv 2374  
                                                                 i2l112 00E4  
                                                                 i2l113 00E6  
                                                       __end_of___lwmod 2548  
                                                                 i2l109 00C2  
                                                                 _RCREG 000FAE  
                                                      lcd_begin@dotsize 000F  
                                                                 _SPBRG 000FAF  
                                                                 _PORTC 000F82  
                                                                 _TRISA 000F92  
                                                                 _TRISB 000F93  
                                                                 _TRISC 000F94  
                                                                 _TXREG 000FAD  
                                                         __CFG_WRT0$OFF 000000  
                                                         __CFG_WRT1$OFF 000000  
                                                         __CFG_WRT2$OFF 000000  
                                                         __CFG_WRT3$OFF 000000  
                                                          ___lltoft@exp 001B  
                                                        __CFG_EBTR0$OFF 000000  
                                                        __CFG_EBTR1$OFF 000000  
                                                        __CFG_EBTR2$OFF 000000  
                                                          main@new_mode 00E9  
                                                        __CFG_EBTR3$OFF 000000  
                                                         __CFG_STVR$OFF 000000  
                                                         __CFG_WRTB$OFF 000000  
                                                         __CFG_WRTC$OFF 000000  
                                                         __CFG_WRTD$OFF 000000  
                                                        __CFG_EBTRB$OFF 000000  
                                                         ___awtoft@sign 0016  
                                                                 _log10 24B6  
                                                                 _blink 00A2  
                                                                 _floor 1ACA  
                                                                 _ldexp 1F46  
                                                                 _frexp 2178  
                                                          _output_putch 28AE  
                                                       ?_lcd_write4bits 0001  
                                                                 _msecs 0094  
                                                         ___ftpack@sign 000F  
                                                                 pclath 000FFA  
                                                                 tablat 000FF5  
                                                                 pow@yi 00D2  
                                                       format_number@di 003D  
                                                       format_number@fn 0012  
                                                                 status 000FD8  
                                                       __end_of_put_str 2588  
                                                                 wtemp6 0076  
                                                       format_xint32@fn 003F  
                                                       ??_print_reading 0041  
                                                         print_buffer@i 000E  
                                                           exp@exponent 00C2  
                                                    __size_ofi2___lwdiv 0054  
                                                           ldexp@newexp 003F  
                                                       __initialization 225A  
                                                           log@exponent 003F  
                                                          __end_of_main 14E2  
                                                      format_double@num 00D8  
                                                         lcd_gotoxy@col 0010  
                                                         lcd_gotoxy@row 000F  
                                                         ?_measure_freq 003F  
                                                         buffer_putc@ch 000D  
                                                        __CFG_OSC$HSPLL 000000  
                                                __size_of_format_double 0180  
                                                                ??_main 0066  
                                                         ___fttol@sign1 0050  
                                                         lcd_send@value 000D  
                                                   format_double@weight 00E1  
                                                         __activetblptr 000002  
                                                __size_of_format_number 00CE  
                                                __size_of_format_xint32 0078  
                                                   lcd_init@fourbitmode 000B  
                                                       __CFG_CCP2MUX$ON 000000  
                                                                ?_log10 0041  
                                                                ?_floor 0060  
                                                                ?_ldexp 003C  
                                                                ?_frexp 000B  
                                                      __end_of___altoft 225A  
                                                      __end_of___awtoft 2600  
                                                      __end_of___ftpack 207C  
                                                      __end_of___lltoft 241A  
                                                                i2l1024 23BC  
                                                                i2l3605 2386  
                                                                i2l3607 2390  
                                                                i2l3617 23B2  
                                                                i2l3641 009C  
                                                                i2l3639 009A  
                                                                _INTCON 000FF2  
                                                      __end_of___lwtoft 2806  
                                                      __end_of_lcd_init 26D8  
                                                  __size_of_lcd_command 0010  
                                                      __end_of_lcd_send 2872  
                                                      __end_of_lcd_puts 25C4  
                                                                ___ftge 22BE  
                                                             ??___ftadd 001D  
                                                             ??___ftdiv 0019  
                                                             ??___ftneg 000E  
                                                             ??___ftmul 0029  
                                                          ?_timer0_init 0001  
                                                             ??___ftsub 0038  
                                                  __size_of_buffer_init 0010  
                                                             ??___fttol 004B  
                                                        ??_measure_freq 0041  
                                                             ??___lwdiv 000F  
                                                          ?_timer2_init 0001  
                                                             ??___lwmod 000F  
                                                  __size_of_buffer_putc 004E  
                                                                _buffer 00A6  
                                                  __size_of_buffer_puts 002E  
                                                                clear_0 2292  
                                                                clear_1 229E  
                                                                clear_2 22AA  
                                                                log10@x 0041  
                                                                floor@i 00BA  
                                                                floor@x 0060  
                                                 ___ftmul@f3_as_product 002D  
                                                      __end_of_ser_init 27B6  
                                                          __pdataCOMRAM 0074  
                                                      __end_of_ser_puts 2736  
                                                    timer2_init@ps_mode 000E  
                                                     __end_ofi2___lwdiv 23C8  
                                                          __mediumconst 0000  
                                                                tblptrh 000FF7  
                                                                tblptrl 000FF6  
                                                                tblptru 000FF8  
                                                  __end_of_buffer_putch 28FC  
                                                      format_number@buf 001A  
                                                      format_number@pad 0017  
                                               _measure_inductance$1680 00C9  
                                               _measure_inductance$1674 00C0  
                                               _measure_inductance$1675 00CD  
                                               _measure_inductance$1676 00D0  
                                               _measure_inductance$1677 00D3  
                                               _measure_inductance$1678 00C3  
                                               _measure_inductance$1679 00C6  
                                                             ??_put_str 000E  
                                                      __end_ofexp@coeff 061F  
                                                         _format_double 10A2  
                                                      __end_oflog@coeff 063A  
                                                            __accesstop 0080  
                                               __end_of__initialization 22B0  
                                                            ___altoft@c 0056  
                                                            ___ftadd@f1 0017  
                                                            ___ftadd@f2 001A  
                                                         _format_number 1BA2  
                                                            ___ftge@ff1 000B  
                                                            ___ftge@ff2 000E  
                                                         _format_xint32 2100  
                                                          eval_poly@res 0039  
                                                         ___rparam_used 000001  
                                                            ___ftdiv@f1 0013  
                                                            ___ftdiv@f2 0016  
                                                            ___ftdiv@f3 001D  
                                                            ___ftneg@f1 000B  
                                                            ___awtoft@c 0013  
                                                measure_capacitance@Cin 011C  
                                                            ___ftmul@f1 0023  
                                                            ___ftmul@f2 0026  
                                          __size_of_measure_capacitance 03F4  
                                                measure_capacitance@var 011A  
                                                 lcd_gotoxy@row_offsets 0011  
                                                            ___ftsub@f1 0032  
                                                            ___ftsub@f2 0035  
                                                            ___fttol@f1 0047  
                                                        __pcstackCOMRAM 0001  
                                                    __size_of_calibrate 00DC  
                                                          __pidataBANK0 2902  
                                                    __size_of_delay10ms 0006  
                                                            ___lltoft@c 0013  
                                                         __end_of_log10 2500  
                                                         __end_of_floor 1BA2  
                                                         __end_of_ldexp 1FE4  
                                                         __end_of_frexp 21EE  
                                                            ___lwtoft@c 0044  
                                                        buffer_putch@ch 000E  
                                                    __size_of_lcd_begin 00EA  
                                                    __size_of_lcd_clear 001E  
                                                               ??_log10 0044  
                                                    __size_of_lcd_putch 0010  
                                                               ??_floor 0063  
                                                               ??_ldexp 0041  
                                                               ??_frexp 000F  
                                                            _log10$1687 0044  
                                                            __pbssBANK0 0080  
                                                            __pbssBANK1 0100  
                                                        ?_format_double 00D6  
                                                    __size_of_eval_poly 00AE  
                                                        ?_format_number 0012  
                                                        ?_format_xint32 003F  
                                                        print_unit@unit 0001  
                                                            __pnvCOMRAM 0071  
                                              __size_of_print_indicator 002A  
                                                               ?___ftge 000B  
                                                             ?___altoft 0056  
                                               __size_of_timer0_read_ps 004E  
                                                             ?___awtoft 0013  
                                                             ?___ftpack 000B  
                                                             ?___lltoft 0013  
                                                    _measure_inductance 06EA  
                                                    __size_of_ser_putch 0028  
                                                             ?___lwtoft 0044  
                                                      ??_lcd_write4bits 000B  
                                                               _INTCON2 000FF1  
                                                            _lcd_gotoxy 263A  
                                                   ?_measure_inductance 0001  
                                                     __end_of_calibrate 1ACA  
                                                             ?_lcd_init 0001  
                                                             ?_lcd_send 000C  
                                                     __end_of_delay10ms 2902  
                                                             ?_lcd_puts 000C  
                                                  __end_of_measure_freq 1738  
                                                            calibrate@i 0047  
                                                               __Hparam 0000  
                                                               __Lparam 0000  
                                                             ?_ser_init 0001  
                                                  ??_measure_inductance 0056  
                                                     __end_of_lcd_begin 190E  
                                                             ?_ser_puts 000C  
                                                     __end_of_lcd_clear 28AE  
                                                       __size_of___ftge 0062  
                                                     __end_of_lcd_putch 28D0  
                                                               ___ftadd 1222  
                                                               ___ftdiv 1D3C  
                                                               ___ftneg 2872  
                                                               ___ftmul 190E  
                                                               ___ftsub 2600  
                                                               ___fttol 1C70  
                                                               ___lwdiv 2320  
                                                               ___lwmod 2500  
                                                          __psmallconst 0600  
                                                            ??___altoft 005A  
                                                               __pcinit 225A  
                                                            ??___awtoft 0016  
                                                            ??___ftpack 0010  
                                                     __end_of_eval_poly 1EA8  
                                                               __ramtop 0600  
                                                  __size_of_timer0_init 009E  
                                                            ??___lltoft 0017  
                                                               __ptext0 1394  
                                                               __ptext1 2672  
                                                               __ptext2 1EA8  
                                                               __ptext3 278E  
                                                               __ptext4 2764  
                                                               __ptext5 06EA  
                                                               __ptext6 0AFE  
                                                               __ptext7 2806  
                                                               __ptext8 207C  
                                                               __ptext9 2588  
                                                  __size_of_timer2_init 0036  
                                                 __size_of_buffer_putch 000C  
                                                            ??___lwtoft 0047  
                                                             _T0CONbits 000FD5  
                                                          __size_of_exp 01B0  
                                                          __size_of_log 00EC  
                                                          __size_of_isr 00EE  
                                                          __size_of_pow 014A  
                                                               _seconds 0098  
                                                        lcd_putch@value 000B  
                                                               _ser_tmp 006F  
                                                       ??_format_double 0066  
                                                               _put_str 2548  
                                                            ??_lcd_init 000B  
                                                            ??_lcd_send 000D  
                                                            ??_lcd_puts 000D  
                                                  end_of_initialization 22B0  
                                                       ??_format_number 0018  
                                                       ??_format_xint32 0045  
                                                               exp@sign 00C4  
                                                             _LCD_lines 0068  
                                                          _lcd_init$762 000C  
                                                         __Lmediumconst 0000  
                                                        lcd_puts@string 000C  
                                                     __end_of_ser_putch 27DE  
                                                               pow@sign 00D1  
                                         measure_inductance@denominator 00BD  
                                                 __end_of_print_reading 2100  
                                                            ??_ser_init 000B  
                                                            ??_ser_puts 000D  
                                                             _RCSTAbits 000FAB  
                                                          _buffer_putch 28F0  
                                                            _ser_rxfifo 0100  
                                                            _ser_txfifo 0080  
                                                            _ser_rxiptr 0070  
                                                     format_number@base 0016  
                                                               postdec1 000FE5  
                                                               postdec2 000FDD  
                                                            _ser_rxoptr 006E  
                                                            _ser_txiptr 006C  
                                                               postinc0 000FEE  
                                                               postinc2 000FDE  
                                                            _ser_txoptr 006D  
                                                     ??_print_indicator 0015  
                                                             _PORTCbits 000F82  
                                                            _print_unit 2806  
                                                         ?_print_buffer 0001  
                                                   _measure_capacitance 0AFE  
                                                           ?_lcd_gotoxy 000F  
                                                          _led_interval 00EE  
                                                     i2___lwdiv@divisor 0003  
                                                             i2___lwdiv 2374  
                                                     i2___lwdiv@counter 0007  
                                                           ___ftdiv@exp 0020  
                                                             _TXSTAbits 000FAC  
                                                         ??_lcd_command 000E  
                                                         ??_buffer_init 000B  
                                                  ?_measure_capacitance 0001  
                                                         ??_buffer_putc 000B  
                                                         ??_buffer_puts 0010  
                                               measure_capacitance@unit 0119  
                                                           ___ftmul@exp 002C  
                                                        format_double@m 00E6  
                                                measure_inductance@unit 00CC  
                                                        _timer0_read_ps 241A  
                                                        __end_of___ftge 2320  
                                                         __pidataCOMRAM 2908  
                                                       lcd_gotoxy@F2326 00F0  
                                                            floor@expon 00BD  
                                                        ??_print_buffer 000D  
                                                        format_number@i 003E  
                                                        format_number@n 0014  
                                                        format_xint32@x 0041  
                                                   start_initialization 225A  
                                                            eval_poly@d 0035  
                                                            eval_poly@n 0036  
                                                            eval_poly@x 0032  
                                                 __size_of_measure_freq 010C  
                                                            ldexp@value 003C  
                                                           __end_of_exp 10A2  
                                                           __end_of_log 1824  
                                                           __end_of_isr 00F6  
                                                           __end_of_pow 162C  
                                                          _LCD_function 006B  
                                                    format_double@digit 00E4  
                                                            ?i2___lwdiv 0001  
                                                            frexp@value 000B  
                                                 ??_measure_capacitance 0066  
                                                __end_of_timer0_read_ps 2468  
                                                              ??___ftge 0011  
                                                   __size_of_lcd_gotoxy 0038  
                                                   __end_of_lcd_command 28F0  
                                                           __pdataBANK0 00F0  
                                                          _measure_freq 162C  
                                                   __end_of_buffer_init 28E0  
                                                   __end_of_buffer_putc 24B6  
                                                   __end_of_buffer_puts 2764  
                                              print_reading@measurement 003F  
                                                     __size_of___altoft 006C  
                                                     __size_of___awtoft 003C  
                                                     __size_of___ftpack 0098  
                                                           ?_print_unit 0001  
                                                     __size_of___lltoft 0052  
                                                           __pbssCOMRAM 0066  
                                                     __size_of___lwtoft 0028  
                                                         __pcstackBANK0 00BA  
                                                         __pcstackBANK1 0110  
                                                         ?_output_putch 0001  
                                                     measure_freq@count 0042  
                                                      lcd_command@value 000E  
                                                     __size_of_lcd_init 0030  
                                                     __size_of_lcd_send 0020  
                                                             _calibrate 19EE  
                                                     __size_of_lcd_puts 003C  
                                                             _delay10ms 28FC  
                                                             __pnvBANK0 00EA  
                                                      ___lwdiv@dividend 000B  
                                                       ?_timer0_read_ps 000B  
                                                             __pintcode 0008  
                                                              ?___ftadd 0017  
                                                              ?___ftdiv 0013  
                                                              ?___ftneg 000B  
                                                              ?___ftmul 0023  
                                                     __size_of_ser_init 0028  
                                                              ?___ftsub 0032  
                                                              ?___fttol 0047  
                                                              ?___lwdiv 000B  
                                                              ?___lwmod 000B  
                                                     __size_of_ser_puts 002E  
                                                             _lcd_begin 1824  
                                                             _lcd_clear 2890  
                                                             _lcd_putch 28C0  
                                                             _led_cycle 0066  
                                                           __smallconst 0600  
                                                             _eval_poly 1DFA  
                                                         output_putch@c 000C  
                                                        ??_output_putch 000C  
                                                      ___lwdiv@quotient 0010  
                                                        __size_of_log10 004A  
                                                              ?_put_str 000D  
                                                        __size_of_floor 00D8  
                                                        __size_of_ldexp 009E  
                                                        __size_of_frexp 0076  
                                                           ??i2___lwdiv 0005  
                                                            ?_calibrate 0001  
                                                            ser_putch@c 000B  
                                                            ?_delay10ms 0001  
                                                              _LCD_ctrl 006A  
                                                              _LCD_mode 0069  
                                                              _PIE1bits 000F9D  
                                                       _print_indicator 2764  
                                                           _lcd_command 28E0  
                                                  __end_of_print_buffer 2708  
                                                              i2u300_48 0070  
                                                   __size_of_print_unit 0026  
                                                              _PIR1bits 000F9E  
                                                              i2u295_40 2396  
                                                              i2u298_40 0034  
                                                           _buffer_init 28D0  
                                                              i2u299_40 006E  
                                                             _ser_putch 27B6  
                                                           _buffer_putc 2468  
                                                           _buffer_puts 2736  
                                           __size_of_measure_inductance 0414  
                                                         ??_timer0_init 000B  
                                                         ??_timer2_init 000B  
                                                            ?_lcd_begin 000F  
                                                            ?_lcd_clear 0001  
                                                            ?_lcd_putch 0001  
                                                            ?_eval_poly 0032  
                                                             lcd_puts@i 000E  
                                                          ??_lcd_gotoxy 0010  
                                                 measure_inductance@Lin 00D8  
                                                 measure_inductance@var 00D6  
                                                             copy_data0 226E  
                                                 __end_of_format_double 1222  
                                                  format_number@padchar 003C  
                                               __size_of_lcd_write4bits 0026  
                                                 __end_of_format_number 1C70  
                                                 __end_of_format_xint32 2178  
                                                             frexp@eptr 000E  
                                                              __Hrparam 0000  
                                                              __Lrparam 0000  
                                                            ?_ser_putch 0001  
                                                    __end_of_lcd_gotoxy 2672  
                                                      __size_of___ftadd 0172  
                                                      __size_of___ftdiv 00BE  
                                                      __size_of___ftneg 001E  
                                                              ___altoft 21EE  
                                                      __size_of___ftmul 00E0  
                                                      __size_of___ftsub 003A  
                                                      __size_of___fttol 00CC  
                                                      __size_of___lwdiv 0054  
                                                      __size_of___lwmod 0048  
                                                              ___awtoft 25C4  
                                                              ___ftpack 1FE4  
                                                              ___lltoft 23C8  
                                                         timer2_init@ps 000C  
                                                              ___lwtoft 27DE  
                                                   __end_of_timer0_init 1F46  
                                                              _exp$1690 00BF  
                                                   __end_of_timer2_init 26A8  
                                                              _main$303 00E8  
                                                       ___lwdiv@divisor 000D  
                                                       ___lwdiv@counter 000F  
                                                __size_of_print_reading 0084  
                                                  timer0_init@prescaler 0014  
                                                              __ptext10 2100  
                                                              __ptext11 10A2  
                                                              __ptext20 2872  
                                                              __ptext12 14E2  
                                                              __ptext21 1D3C  
                                                              __ptext13 0EF2  
                                                              __ptext30 26A8  
                                                              __ptext22 23C8  
                                                              __ptext14 1F46  
                                                              __ptext31 1824  
                                                              __ptext23 24B6  
                                                              __ptext15 1ACA  
                                                              __ptext40 1BA2  
                                                              __ptext32 19EE  
                                                              __ptext24 1738  
                                                              __ptext16 1C70  
                                                              __ptext41 28F0  
                                                              __ptext33 2548  
                                                              __ptext25 2178  
                                                              __ptext17 22BE  
                                                              __ptext50 28E0  
                                                              __ptext42 28C0  
                                                              __ptext34 28AE  
                                                              __ptext26 1DFA  
                                                              __ptext18 21EE  
                                                              __ptext51 2852  
                                                              __ptext43 27B6  
                                                              __ptext35 162C  
                                                              __ptext27 190E  
                                                              __ptext19 2600  
                                                              __ptext52 282C  
                                                              __ptext44 2500  
                                                              __ptext36 241A  
                                                              __ptext28 1222  
                                                              __ptext53 28FC  
                                                              __ptext45 2320  
                                                              __ptext37 26D8  
                                                              __ptext29 25C4  
                                                              __ptext54 27DE  
                                                              __ptext46 2736  
                                                              __ptext38 2708  
                                                              __ptext55 1FE4  
                                                              __ptext47 2468  
                                                              __ptext39 263A  
                                                              __ptext48 28D0  
                                                              __ptext57 2374  
                                                              __ptext49 2890  
                                                              __ptext58 0000  
                                                              _lcd_init 26A8  
                                                              _lcd_send 2852  
                                               __end_of_print_indicator 278E  
                                                              _lcd_puts 2588  
                                                              _pow$1688 00CB  
                                                              _pow$1689 00CE  
                                                      __size_of_put_str 0040  
                                                           ??_calibrate 0047  
                                                         __size_of_main 014E  
                                                           ??_delay10ms 000B  
                                                             ser_puts@s 000C  
                                                              _msecpart 00A4  
                                                              _ser_init 278E  
                                                              _ser_puts 2708  
                                                              _timer1of 0090  
                                                  __end_of_output_putch 28C0  
                                                              int$flags 0075  
                                                           ??_lcd_begin 0010  
                                                           ??_lcd_clear 000F  
                                                           ??_lcd_putch 000B  
                                                              exp@coeff 0601  
                                                              log@coeff 061F  
                                           measure_inductance@numerator 00BA  
                                                          ??_print_unit 0015  
                                                            _INTCONbits 000FF2  
                                                           ??_eval_poly 0038  
                                                    _print_reading$1685 0041  
                                                    _print_reading$1686 0043  
                                                              intlevel2 2906  
                                           __end_of_measure_capacitance 0EF2  
                                                 __size_of_print_buffer 0030  
                                                      ___lwmod@dividend 000B  
                                                      ??_timer0_read_ps 000D  
                                                           ??_ser_putch 000B  
                                                    __end_of_print_unit 282C  
                                                         _print_reading 207C  
                                                  delay10ms@period_10ms 0001  
                                                           _timer0_init 1EA8  
                                                           _timer2_init 2672  
                                                    _format_double$1683 00DB  
                                                    _format_double$1684 00DE  
                                              _measure_capacitance$1671 0110  
                                              _measure_capacitance$1672 0113  
                                              _measure_capacitance$1673 0116  
                                                              put_str@i 000F  
                                                              put_str@s 000D  
                                                    timer0_init@ps_mode 0015  
                                                       ___lwmod@divisor 000D  
                                                       ___lwmod@counter 000F  
                                                          _print_buffer 26D8  
                                               print_indicator@indicate 0015  
                                                      ?_print_indicator 0001  
                                                        _lcd_write4bits 282C  
                                                          ?_lcd_command 0001  
                                                        ?_print_reading 003F  
                                                          ?_buffer_init 0001  
                                                          ?_buffer_putc 0001  
                                                          ?_buffer_puts 000F  
                                                         ?_buffer_putch 0001  
