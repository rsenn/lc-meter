VERSION_MAJOR = 0
VERSION_MINOR = 9
VERSION_PATCH = 1

COMPILER = xc8

-include Makefile.vars

ifeq ($(PROGRAM),)
PROGRAM := pictest
endif

#BUILDDIR = build/xc8-$(chipl)/
#OBJDIR = $(BUILDDIR)$(BUILD_TYPE)/

vpath $(BUILDDIR)

VERSION = $(VERSION_MAJOR).$(VERSION_MINOR).$(VERSION_PATCH)

CCVER = v1.34

PROGRAMFILES = C:/Program Files (x86)

OS = $(shell uname -o)

#PICC = $(shell which picc 2>/dev/null)

ifeq ($(PICC),)
ifeq ($(OS),GNU/Linux)
CCDIR = /opt/microchip/xc8/v1.34
else
CCDIR = $(PROGRAMFILES)/Microchip/xc8/$(CCVER)
endif
endif

ifeq ($(COMPILER),xc8)
COMPILER_NAME = xc8
else
COMPILER_NAME = picc
endif

ifneq ($(CCDIR),)
PICC = "$(CCDIR)/bin/$(COMPILER_NAME)"
else
PICC = $(COMPILER_NAME)
endif

ifeq ($(strip $(PICC)),)
PICC = picc
endif

CPP = $(CCDIR)/bin/cpp
INCDIR = $(CCDIR)/include
#INCDIR := $(dir $(dir $(shell which picc)))/include

LD = $(PICC)
#RM = del /f
DISTFILES = Makefile Makefile.xc8 Makefile.sdcc

OPT = space

#DEFINES += HI_TECH_C=1

SOURCES = $($(PROGRAM)_SOURCES)
COMMON_FLAGS += $($(PROGRAM)_DEFS)
P1OBJS = $(SOURCES:%.c=$(OBJDIR)%.p1)
ASSRCS = $(SOURCES:%.c=$(OBJDIR)%.as)

COMMON_FLAGS += -g
COMMON_FLAGS += -N127

#COMMON_FLAGS += --runtime="default,+clear,+init,-keep,+osccal,+download,-resetbits,-stackcall,+clib"
#COMMON_FLAGS += --runtime="default,-clear,+init,+keep,-osccal,+download,+resetbits,-stackcall,+clib"
COMMON_FLAGS += --runtime="default,+init,+osccal,+download,-stackcall,+clib"

ifneq ($(CODEOFFSET),0)
ifneq ($(CODEOFFSET),)
LDFLAGS += --codeoffset=$(CODEOFFSET)
endif
endif

ifeq ($(OPT),speed)
OPT_SPEED = ,+speed,-space,9
endif
ifeq ($(OPT),space)
OPT_SPEED = ,+speed,-space,9
endif

ifneq ($(DEBUG),1)
COMMON_FLAGS += --opt="default,+asm,-debug$(OPT_SPEED)"
#COMMON_FLAGS += -D__DEBUG=1
else
COMMON_FLAGS += --opt="default,+asm,+debug$(OPT_SPEED)"
COMMON_FLAGS +=  -DNDEBUG=1
endif

COMMON_FLAGS += --double=32 --float=24

COMMON_FLAGS += --warn=3

COMMON_FLAGS += --mode=PRO

#_COMMON_FLAGS += --errformat="Error   [%n] %f; %l.%c %s"
#COMMON_FLAGS += --msgformat="Advisory[%n] %s"
#COMMON_FLAGS += --warnformat="Warning [%n] %f; %l.%c %s"

CPPFLAGS += $(DEFINES:%=-D%)

_CPPFLAGS += \
	-DVERSION_MAJOR=$(VERSION_MAJOR) \
	-DVERSION_MINOR=$(VERSION_MINOR) \
	-DVERSION_PATCH=$(VERSION_PATCH)

CFLAGS = -q --chip=$(chipl) $(COMMON_FLAGS)

_LDFLAGS += --summary="default,-psect,-class,+mem,-hex"

#LDFLAGS += --output="default,-inhx032"
LDFLAGS += --chip=$(chipl)
LDFLAGS +=  --asmlist

PM3CMD = "$$PROGRAMFILES"/Microchip/MPLAB\ IDE/Programmer\ Utilities/PM3Cmd/PM3Cmd

COFFILE = $(subst .hex,.cof,$(HEXFILE))

#-include Makefile.vars

.PHONY: all clean dist prototypes

all: $(BUILDDIR) $(OBJDIR) output

$(HEXFILE): $(P1OBJS)
	$(RM) $(HEXFILE) $(COFFILE)
	$(LD) $(LDFLAGS) -m$(BUILDDIR)$(PROGRAM)_$(BUILD_TYPE).map -o$@ $^
	sed -i 's/^:02400E00\(....\)\(..\)/:02400E0072FF32/' $(HEXFILE)
	@-(type cygpath 2>/dev/null >/dev/null && PATHTOOL="cygpath -w"; \
	 test -f "$$PWD/$(HEXFILE)" && { echo; echo "Got HEX file: `$${PATHTOOL:-echo} $$PWD/$(HEXFILE)`"; })

$(P1OBJS): $(OBJDIR)%.p1: %.c
	$(PICC) --pass1 $(CFLAGS) $(CPPFLAGS) --outdir=$(OBJDIR:%/=%) $<
#	$(PICC) --pass1 $(CFLAGS) $(CPPFLAGS) -o$(<:%.c=$(BUILDDIR)%_$(BUILD_TYPE).p1) $<

$(ASSRCS): $(OBJDIR)%.as: %.c
	$(PICC) -S $(CFLAGS) $(CPPFLAGS) --outdir=$(OBJDIR:%/=%) $<


prototypes:
	cproto -DHI_TECH_C=1 -E '$(CPP)' $(CPPFLAGS) $(SOURCES) 2>/dev/null
ifneq ($(CCDIR),)
prototypes: CPPFLAGS += -I'$(CCDIR)/include'
endif


-include Makefile.common
